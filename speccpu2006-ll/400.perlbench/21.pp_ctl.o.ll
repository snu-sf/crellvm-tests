; ModuleID = 'pp_ctl.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sv = type { i8*, i32, i32 }
%struct.stackinfo = type { %struct.av*, %struct.context*, i32, i32, i32, %struct.stackinfo*, %struct.stackinfo*, i32 }
%struct.av = type { %struct.xpvav*, i32, i32 }
%struct.xpvav = type { i8*, i64, i64, i64, double, %struct.magic*, %struct.hv*, %struct.sv**, %struct.sv*, i8 }
%struct.magic = type { %struct.magic*, %struct.mgvtbl*, i16, i8, i8, %struct.sv*, i8*, i32 }
%struct.mgvtbl = type { i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*, %struct.sv*, i8*, i32)*, i32 (%struct.magic*, %struct.clone_params*)* }
%struct.clone_params = type { %struct.av*, i64, %struct.interpreter* }
%struct.interpreter = type { i8 }
%struct.hv = type { %struct.xpvhv*, i32, i32 }
%struct.xpvhv = type { i8*, i64, i64, i64, double, %struct.magic*, %struct.hv*, i32, %struct.he*, %struct.pmop*, i8* }
%struct.he = type { %struct.he*, %struct.hek*, %struct.sv* }
%struct.hek = type { i32, i32, [1 x i8] }
%struct.pmop = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i16, i8, i8, %struct.op*, %struct.op*, %struct.op*, %struct.op*, %struct.pmop*, %struct.regexp*, i32, i32, i8, %struct.hv* }
%struct.op = type { %struct.op*, %struct.op*, {}*, i64, i16, i16, i8, i8 }
%struct.regexp = type { i32*, i32*, %struct.regnode*, %struct.reg_substr_data*, i8*, %struct.reg_data*, i8*, i32*, i32, i32, i32, i32, i32, i32, i32, i32, [1 x %struct.regnode] }
%struct.regnode = type { i8, i8, i16 }
%struct.reg_substr_data = type opaque
%struct.reg_data = type opaque
%struct.context = type { i32, %union.anon }
%union.anon = type { %struct.block }
%struct.block = type { i32, %struct.cop*, i32, i32, i32, %struct.pmop*, i8, %union.anon.1 }
%struct.cop = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i16, i8, i8, i8*, %struct.hv*, %struct.gv*, i32, i32, i32, %struct.sv*, %struct.sv* }
%struct.gv = type { %struct.xpvgv*, i32, i32 }
%struct.xpvgv = type { i8*, i64, i64, i64, double, %struct.magic*, %struct.hv*, %struct.gp*, i8*, i64, %struct.hv*, i8 }
%struct.gp = type { %struct.sv*, i32, %struct.io*, %struct.cv*, %struct.av*, %struct.hv*, %struct.gv*, %struct.cv*, i32, i32, i32, i8* }
%struct.io = type { %struct.xpvio*, i32, i32 }
%struct.xpvio = type { i8*, i64, i64, i64, double, %struct.magic*, %struct.hv*, %struct._PerlIO**, %struct._PerlIO**, %union.anon.0, i64, i64, i64, i64, i8*, %struct.gv*, i8*, %struct.gv*, i8*, %struct.gv*, i16, i8, i8 }
%struct._PerlIO = type opaque
%union.anon.0 = type { %struct.__dirstream* }
%struct.__dirstream = type opaque
%struct.cv = type { %struct.xpvcv*, i32, i32 }
%struct.xpvcv = type { i8*, i64, i64, i64, double, %struct.magic*, %struct.hv*, %struct.hv*, %struct.op*, %struct.op*, void (%struct.cv*)*, %union.any, %struct.gv*, i8*, i64, %struct.av*, %struct.cv*, i16, i32 }
%union.any = type { i8* }
%union.anon.1 = type { %struct.block_loop }
%struct.block_loop = type { i8*, i32, %struct.op*, %struct.op*, %struct.op*, %struct.sv**, %struct.sv*, %struct.sv*, %struct.av*, i64, i64 }
%struct.xpv = type { i8*, i64, i64 }
%struct.jmpenv = type { [1 x %struct.__jmp_buf_tag], %struct.jmpenv*, i32, i8 }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.logop = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i16, i8, i8, %struct.op*, %struct.op* }
%struct.xrv = type { %struct.sv* }
%struct.subst = type { i32, i32, i32, i32, i8, i8, i8*, %struct.sv*, %struct.sv*, i8*, i8*, i8*, i8*, %struct.regexp* }
%struct.xpvnv = type { i8*, i64, i64, i64, double }
%struct.xpvfm = type { i8*, i64, i64, i64, double, %struct.magic*, %struct.hv*, %struct.hv*, %struct.op*, %struct.op*, void (%struct.cv*)*, %union.any, %struct.gv*, i8*, i64, %struct.av*, %struct.cv*, i16, i32, i64 }
%struct.listop = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i16, i8, i8, %struct.op*, %struct.op* }
%struct.xpviv = type { i8*, i64, i64, i64 }
%struct.unop = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i16, i8, i8, %struct.op* }
%struct.block_sub = type { %struct.cv*, %struct.gv*, %struct.gv*, %struct.av*, %struct.av*, i64, i8, i8, %struct.av* }
%struct.block_eval = type { i32, i32, %struct.sv*, %struct.op*, %struct.sv*, %struct.cv* }
%struct.loop = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i16, i8, i8, %struct.op*, %struct.op*, %struct.op*, %struct.op*, %struct.op* }
%struct.pvop = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i16, i8, i8, i8* }
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.timespec = type { i64, i64 }

@PL_stack_sp = external global %struct.sv**, align 8
@PL_stack_max = external global %struct.sv**, align 8
@PL_curstackinfo = external global %struct.stackinfo*, align 8
@PL_sv_undef = external global %struct.sv, align 8
@PL_op = external global %struct.op*, align 8
@PL_sv_yes = external global %struct.sv, align 8
@PL_sv_no = external global %struct.sv, align 8
@PL_reginterp_cnt = external global i32, align 4
@PL_tainted = external global i8, align 1
@PL_regfree = external global void (%struct.regexp*)*, align 8
@PL_curcop = external global %struct.cop*, align 8
@PL_regcompp = external global %struct.regexp* (i8*, i8*, %struct.pmop*)*, align 8
@PL_curpm = external global %struct.pmop*, align 8
@.str = private unnamed_addr constant [4 x i8] c"\5Cs+\00", align 1
@PL_reg_match_utf8 = external global i8, align 1
@.str.1 = private unnamed_addr constant [18 x i8] c"Substitution loop\00", align 1
@PL_regexecp = external global i32 (%struct.regexp*, i8*, i8*, i8*, i32, %struct.sv*, i8*, i32)*, align 8
@PL_tainting = external global i8, align 1
@PL_savestack_ix = external global i32, align 4
@PL_stack_base = external global %struct.sv**, align 8
@PL_markstack_ptr = external global i32*, align 8
@PL_chopset = external global i8*, align 8
@PL_formtarget = external global %struct.sv*, align 8
@PL_dowarn = external global i8, align 1
@.str.2 = private unnamed_addr constant [28 x i8] c"Not enough format arguments\00", align 1
@PL_utf8skip = external constant [0 x i8], align 1
@.str.3 = private unnamed_addr constant [8 x i8] c"%#0*.*f\00", align 1
@.str.4 = private unnamed_addr constant [7 x i8] c"%0*.*f\00", align 1
@.str.5 = private unnamed_addr constant [7 x i8] c"%#*.*f\00", align 1
@.str.6 = private unnamed_addr constant [6 x i8] c"%*.*f\00", align 1
@.str.7 = private unnamed_addr constant [15 x i8] c"Runaway format\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"   \00", align 1
@PL_tmps_floor = external global i32, align 4
@PL_tmps_ix = external global i32, align 4
@PL_defgv = external global %struct.gv*, align 8
@.str.9 = private unnamed_addr constant [16 x i8] c"panic: mapstart\00", align 1
@PL_curpad = external global %struct.sv**, align 8
@PL_Sv = external global %struct.sv*, align 8
@PL_Xpv = external global %struct.xpv*, align 8
@PL_last_in_gv = external global %struct.gv*, align 8
@.str.10 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.11 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.12 = private unnamed_addr constant [37 x i8] c"Range iterator outside integer range\00", align 1
@PL_tmps_max = external global i32, align 4
@.str.13 = private unnamed_addr constant [3 x i8] c"E0\00", align 1
@.str.14 = private unnamed_addr constant [22 x i8] c"panic: bad gimme: %d\0A\00", align 1
@PL_in_eval = external global i32, align 4
@PL_eval_root = external global %struct.op*, align 8
@PL_curstack = external global %struct.av*, align 8
@PL_errgv = external global %struct.gv*, align 8
@PL_errors = external global %struct.sv*, align 8
@.str.15 = private unnamed_addr constant [3 x i8] c"%_\00", align 1
@PL_error_count = external global i32, align 4
@Perl_die_where.prefix = internal global [15 x i8] c"\09(in cleanup) \00", align 1
@PL_stderrgv = external global %struct.gv*, align 8
@.str.16 = private unnamed_addr constant [17 x i8] c"panic: POPSTACK\0A\00", align 1
@PL_markstack = external global i32*, align 8
@PL_scopestack_ix = external global i32, align 4
@PL_retstack_ix = external global i32, align 4
@.str.17 = private unnamed_addr constant [12 x i8] c"panic: die \00", align 1
@.str.18 = private unnamed_addr constant [32 x i8] c"%sCompilation failed in require\00", align 1
@.str.19 = private unnamed_addr constant [15 x i8] c"Unknown error\0A\00", align 1
@PL_DBsub = external global %struct.gv*, align 8
@.str.20 = private unnamed_addr constant [10 x i8] c"(unknown)\00", align 1
@.str.21 = private unnamed_addr constant [7 x i8] c"(eval)\00", align 1
@PL_debstash = external global %struct.hv*, align 8
@PL_dbargs = external global %struct.av*, align 8
@.str.22 = private unnamed_addr constant [9 x i8] c"DB::args\00", align 1
@.str.23 = private unnamed_addr constant [13 x i8] zeroinitializer, align 1
@.str.24 = private unnamed_addr constant [15 x i8] c"warnings::Bits\00", align 1
@.str.25 = private unnamed_addr constant [4 x i8] c"all\00", align 1
@.str.26 = private unnamed_addr constant [13 x i8] c"UUUUUUUUUUUU\00", align 1
@PL_DBsingle = external global %struct.sv*, align 8
@PL_DBsignal = external global %struct.sv*, align 8
@PL_DBtrace = external global %struct.sv*, align 8
@PL_DBgv = external global %struct.gv*, align 8
@.str.27 = private unnamed_addr constant [26 x i8] c"No DB::DB routine defined\00", align 1
@PL_debug = external global i32, align 4
@PL_savestack_max = external global i32, align 4
@PL_savestack = external global %union.any*, align 8
@PL_comppad = external global %struct.av*, align 8
@PL_sortcxix = external global i32, align 4
@.str.28 = private unnamed_addr constant [34 x i8] c"Can't return outside a subroutine\00", align 1
@PL_incgv = external global %struct.gv*, align 8
@.str.29 = private unnamed_addr constant [31 x i8] c"%_ did not return a true value\00", align 1
@.str.30 = private unnamed_addr constant [14 x i8] c"panic: return\00", align 1
@.str.31 = private unnamed_addr constant [34 x i8] c"Can't \22last\22 outside a loop block\00", align 1
@.str.32 = private unnamed_addr constant [30 x i8] c"Label not found for \22last %s\22\00", align 1
@.str.33 = private unnamed_addr constant [12 x i8] c"panic: last\00", align 1
@.str.34 = private unnamed_addr constant [34 x i8] c"Can't \22next\22 outside a loop block\00", align 1
@.str.35 = private unnamed_addr constant [30 x i8] c"Label not found for \22next %s\22\00", align 1
@PL_scopestack = external global i32*, align 8
@.str.36 = private unnamed_addr constant [34 x i8] c"Can't \22redo\22 outside a loop block\00", align 1
@.str.37 = private unnamed_addr constant [30 x i8] c"Label not found for \22redo %s\22\00", align 1
@Perl_pp_goto.must_have_label = internal global [21 x i8] c"goto must have label\00", align 16
@.str.38 = private unnamed_addr constant [30 x i8] c"Goto undefined subroutine &%_\00", align 1
@.str.39 = private unnamed_addr constant [26 x i8] c"Goto undefined subroutine\00", align 1
@.str.40 = private unnamed_addr constant [43 x i8] c"Can't goto subroutine outside a subroutine\00", align 1
@.str.41 = private unnamed_addr constant [42 x i8] c"Can't goto subroutine from an eval-string\00", align 1
@PL_markstack_max = external global i32*, align 8
@PL_perldb = external global i32, align 4
@.str.42 = private unnamed_addr constant [9 x i8] c"DB::goto\00", align 1
@PL_lastgotoprobe = external global %struct.op*, align 8
@PL_main_root = external global %struct.op*, align 8
@.str.43 = private unnamed_addr constant [35 x i8] c"Can't \22goto\22 out of a pseudo block\00", align 1
@.str.44 = private unnamed_addr constant [12 x i8] c"panic: goto\00", align 1
@.str.45 = private unnamed_addr constant [20 x i8] c"Can't find label %s\00", align 1
@.str.46 = private unnamed_addr constant [47 x i8] c"Can't \22goto\22 into the middle of a foreach loop\00", align 1
@PL_restartop = external global %struct.op*, align 8
@PL_do_undump = external global i8, align 1
@PL_exit_flags = external global i8, align 1
@PL_compiling = external global %struct.cop, align 8
@PL_curstash = external global %struct.hv*, align 8
@.str.47 = private unnamed_addr constant [26 x i8] c"_<(%.10seval %lu)[%s:%ld]\00", align 1
@PL_evalseq = external global i32, align 4
@.str.48 = private unnamed_addr constant [19 x i8] c"_<(%.10s_eval %lu)\00", align 1
@PL_defstash = external global %struct.hv*, align 8
@PL_hints = external global i32, align 4
@PL_hintgv = external global %struct.gv*, align 8
@PL_linestr = external global %struct.sv*, align 8
@PL_compcv = external global %struct.cv*, align 8
@PL_cop_seqmax = external global i32, align 4
@PL_ppaddr = external global [0 x %struct.op* ()*], align 8
@PL_main_cv = external global %struct.cv*, align 8
@.str.49 = private unnamed_addr constant [60 x i8] c"Perl v%lu.%lu.%lu required--this is only v%d.%d.%d, stopped\00", align 1
@.str.50 = private unnamed_addr constant [87 x i8] c"Perl v%lu.%lu.%lu required (did you mean v%lu.%03lu?)--this is only v%d.%d.%d, stopped\00", align 1
@.str.51 = private unnamed_addr constant [19 x i8] c"Null filename used\00", align 1
@.str.52 = private unnamed_addr constant [8 x i8] c"require\00", align 1
@.str.53 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.54 = private unnamed_addr constant [17 x i8] c"/loader/0x%lx/%s\00", align 1
@.str.55 = private unnamed_addr constant [4 x i8] c"INC\00", align 1
@.str.56 = private unnamed_addr constant [10 x i8] c"/dev/null\00", align 1
@.str.57 = private unnamed_addr constant [6 x i8] c"%s/%s\00", align 1
@.str.58 = private unnamed_addr constant [9 x i8] c" in @INC\00", align 1
@.str.59 = private unnamed_addr constant [4 x i8] c".h \00", align 1
@.str.60 = private unnamed_addr constant [27 x i8] c" (change .h to .ph maybe?)\00", align 1
@.str.61 = private unnamed_addr constant [5 x i8] c".ph \00", align 1
@.str.62 = private unnamed_addr constant [21 x i8] c" (did you run h2ph?)\00", align 1
@.str.63 = private unnamed_addr constant [17 x i8] c" (@INC contains:\00", align 1
@.str.64 = private unnamed_addr constant [4 x i8] c" %s\00", align 1
@.str.65 = private unnamed_addr constant [2 x i8] c")\00", align 1
@.str.66 = private unnamed_addr constant [16 x i8] c"Can't locate %s\00", align 1
@PL_rsfp_filters = external global %struct.av*, align 8
@PL_rsfp = external global %struct._PerlIO**, align 8
@PL_taint_warn = external global i8, align 1
@.str.67 = private unnamed_addr constant [13 x i8] c"\00\00\00\00\00\00\00\00\00@\00\00\00", align 1
@PL_encoding = external global %struct.sv*, align 8
@PL_top_env = external global %struct.jmpenv*, align 8
@PL_sub_generation = external global i32, align 4
@.str.68 = private unnamed_addr constant [5 x i8] c"eval\00", align 1
@.str.69 = private unnamed_addr constant [21 x i8] c"_<(eval %lu)[%s:%ld]\00", align 1
@.str.70 = private unnamed_addr constant [13 x i8] c"_<(eval %lu)\00", align 1
@.str.71 = private unnamed_addr constant [10 x i8] c"_<(eval )\00", align 1
@.str.72 = private unnamed_addr constant [18 x i8] c"Exiting %s via %s\00", align 1
@context_name = internal global [7 x i8*] [i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.73, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.74, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.68, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.75, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.76, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.77, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)], align 16
@PL_op_name = external global [0 x i8*], align 8
@.str.73 = private unnamed_addr constant [13 x i8] c"pseudo-block\00", align 1
@.str.74 = private unnamed_addr constant [11 x i8] c"subroutine\00", align 1
@.str.75 = private unnamed_addr constant [5 x i8] c"loop\00", align 1
@.str.76 = private unnamed_addr constant [13 x i8] c"substitution\00", align 1
@.str.77 = private unnamed_addr constant [6 x i8] c"block\00", align 1
@.str.78 = private unnamed_addr constant [7 x i8] c"format\00", align 1
@S_dofindlabel.too_deep = internal global [36 x i8] c"Target of goto is too deeply nested\00", align 16
@PL_beginav = external global %struct.av*, align 8
@.str.79 = private unnamed_addr constant [31 x i8] c"%sCompilation failed in regexp\00", align 1
@.str.80 = private unnamed_addr constant [18 x i8] c"Compilation error\00", align 1
@.str.81 = private unnamed_addr constant [14 x i8] c"DB::postponed\00", align 1
@PL_lex_state = external global i32, align 4
@PL_eval_start = external global %struct.op*, align 8
@.str.82 = private unnamed_addr constant [4 x i8] c".pm\00", align 1
@.str.83 = private unnamed_addr constant [5 x i8] c"%s%c\00", align 1
@PL_statusvalue = external global i32, align 4
@.str.84 = private unnamed_addr constant [16 x i8] c"panic: top_env\0A\00", align 1
@PL_runops = external global i32 ()*, align 8
@.str.85 = private unnamed_addr constant [25 x i8] c"Null picture in formline\00", align 1
@.str.86 = private unnamed_addr constant [54 x i8] c"Repeated format line will never terminate (~~ and @#)\00", align 1

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_wantarray() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %cxix = alloca i32, align 4
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %2 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %1 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %2 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp = icmp slt i64 %sub.ptr.div, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.sv**, %struct.sv*** %sp, align 8
  %4 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call = call %struct.sv** @Perl_stack_grow(%struct.sv** %3, %struct.sv** %4, i32 1)
  store %struct.sv** %call, %struct.sv*** %sp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %5, i32 0, i32 2
  %6 = load i32, i32* %si_cxix, align 4
  %call1 = call i32 @S_dopoptosub(i32 %6)
  store i32 %call1, i32* %cxix, align 4
  %7 = load i32, i32* %cxix, align 4
  %cmp2 = icmp slt i32 %7, 0
  br i1 %cmp2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  %8 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %8, i32 1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %incdec.ptr, align 8
  %9 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %9, %struct.sv*** @PL_stack_sp, align 8
  %10 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %10, i32 0, i32 0
  %11 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %11, %struct.op** %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %12 = load i32, i32* %cxix, align 4
  %idxprom = sext i32 %12 to i64
  %13 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxstack = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %13, i32 0, i32 1
  %14 = load %struct.context*, %struct.context** %si_cxstack, align 8
  %arrayidx = getelementptr inbounds %struct.context, %struct.context* %14, i64 %idxprom
  %cx_u = getelementptr inbounds %struct.context, %struct.context* %arrayidx, i32 0, i32 1
  %cx_blk = bitcast %union.anon* %cx_u to %struct.block*
  %blku_gimme = getelementptr inbounds %struct.block, %struct.block* %cx_blk, i32 0, i32 6
  %15 = load i8, i8* %blku_gimme, align 1
  %conv = zext i8 %15 to i32
  switch i32 %conv, label %sw.default [
    i32 1, label %sw.bb
    i32 0, label %sw.bb.7
  ]

sw.bb:                                            ; preds = %if.end.4
  %16 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr5 = getelementptr inbounds %struct.sv*, %struct.sv** %16, i32 1
  store %struct.sv** %incdec.ptr5, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_yes, %struct.sv** %incdec.ptr5, align 8
  %17 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %17, %struct.sv*** @PL_stack_sp, align 8
  %18 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next6 = getelementptr inbounds %struct.op, %struct.op* %18, i32 0, i32 0
  %19 = load %struct.op*, %struct.op** %op_next6, align 8
  store %struct.op* %19, %struct.op** %retval
  br label %return

sw.bb.7:                                          ; preds = %if.end.4
  %20 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr8 = getelementptr inbounds %struct.sv*, %struct.sv** %20, i32 1
  store %struct.sv** %incdec.ptr8, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_no, %struct.sv** %incdec.ptr8, align 8
  %21 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %21, %struct.sv*** @PL_stack_sp, align 8
  %22 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next9 = getelementptr inbounds %struct.op, %struct.op* %22, i32 0, i32 0
  %23 = load %struct.op*, %struct.op** %op_next9, align 8
  store %struct.op* %23, %struct.op** %retval
  br label %return

sw.default:                                       ; preds = %if.end.4
  %24 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr10 = getelementptr inbounds %struct.sv*, %struct.sv** %24, i32 1
  store %struct.sv** %incdec.ptr10, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %incdec.ptr10, align 8
  %25 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %25, %struct.sv*** @PL_stack_sp, align 8
  %26 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next11 = getelementptr inbounds %struct.op, %struct.op* %26, i32 0, i32 0
  %27 = load %struct.op*, %struct.op** %op_next11, align 8
  store %struct.op* %27, %struct.op** %retval
  br label %return

return:                                           ; preds = %sw.default, %sw.bb.7, %sw.bb, %if.then.3
  %28 = load %struct.op*, %struct.op** %retval
  ret %struct.op* %28
}

declare %struct.sv** @Perl_stack_grow(%struct.sv**, %struct.sv**, i32) #1

; Function Attrs: nounwind uwtable
define internal i32 @S_dopoptosub(i32 %startingblock) #0 {
entry:
  %startingblock.addr = alloca i32, align 4
  store i32 %startingblock, i32* %startingblock.addr, align 4
  %0 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxstack = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %0, i32 0, i32 1
  %1 = load %struct.context*, %struct.context** %si_cxstack, align 8
  %2 = load i32, i32* %startingblock.addr, align 4
  %call = call i32 @S_dopoptosub_at(%struct.context* %1, i32 %2)
  ret i32 %call
}

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_regcmaybe() #0 {
entry:
  %0 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 0
  %1 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %1
}

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_regcreset() #0 {
entry:
  store i32 0, i32* @PL_reginterp_cnt, align 4
  store i8 0, i8* @PL_tainted, align 1
  %0 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 0
  %1 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %1
}

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_regcomp() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %pm = alloca %struct.pmop*, align 8
  %t = alloca i8*, align 8
  %tmpstr = alloca %struct.sv*, align 8
  %len = alloca i64, align 8
  %mg = alloca %struct.magic*, align 8
  %sv = alloca %struct.sv*, align 8
  %re = alloca %struct.regexp*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %2 = bitcast %struct.op* %1 to %struct.logop*
  %op_other = getelementptr inbounds %struct.logop, %struct.logop* %2, i32 0, i32 9
  %3 = load %struct.op*, %struct.op** %op_other, align 8
  %4 = bitcast %struct.op* %3 to %struct.pmop*
  store %struct.pmop* %4, %struct.pmop** %pm, align 8
  store %struct.magic* null, %struct.magic** %mg, align 8
  %5 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %5, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %6 = load %struct.sv*, %struct.sv** %5, align 8
  store %struct.sv* %6, %struct.sv** %tmpstr, align 8
  %7 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 2
  %8 = load i32, i32* %sv_flags, align 4
  %and = and i32 %8, 524288
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end.5

if.then:                                          ; preds = %entry
  %9 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 0
  %10 = load i8*, i8** %sv_any, align 8
  %11 = bitcast i8* %10 to %struct.xrv*
  %xrv_rv = getelementptr inbounds %struct.xrv, %struct.xrv* %11, i32 0, i32 0
  %12 = load %struct.sv*, %struct.sv** %xrv_rv, align 8
  store %struct.sv* %12, %struct.sv** %sv, align 8
  %13 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 2
  %14 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %14, 57344
  %tobool3 = icmp ne i32 %and2, 0
  br i1 %tobool3, label %if.then.4, label %if.end

if.then.4:                                        ; preds = %if.then
  %15 = load %struct.sv*, %struct.sv** %sv, align 8
  %call = call %struct.magic* @Perl_mg_find(%struct.sv* %15, i32 114)
  store %struct.magic* %call, %struct.magic** %mg, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.4, %if.then
  br label %if.end.5

if.end.5:                                         ; preds = %if.end, %entry
  %16 = load %struct.magic*, %struct.magic** %mg, align 8
  %tobool6 = icmp ne %struct.magic* %16, null
  br i1 %tobool6, label %if.then.7, label %if.else

if.then.7:                                        ; preds = %if.end.5
  %17 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_obj = getelementptr inbounds %struct.magic, %struct.magic* %17, i32 0, i32 5
  %18 = load %struct.sv*, %struct.sv** %mg_obj, align 8
  %19 = bitcast %struct.sv* %18 to %struct.regexp*
  store %struct.regexp* %19, %struct.regexp** %re, align 8
  %20 = load void (%struct.regexp*)*, void (%struct.regexp*)** @PL_regfree, align 8
  %21 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmregexp = getelementptr inbounds %struct.pmop, %struct.pmop* %21, i32 0, i32 13
  %22 = load %struct.regexp*, %struct.regexp** %op_pmregexp, align 8
  call void %20(%struct.regexp* %22)
  %23 = load %struct.regexp*, %struct.regexp** %re, align 8
  %tobool8 = icmp ne %struct.regexp* %23, null
  br i1 %tobool8, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then.7
  %24 = load %struct.regexp*, %struct.regexp** %re, align 8
  %refcnt = getelementptr inbounds %struct.regexp, %struct.regexp* %24, i32 0, i32 9
  %25 = load i32, i32* %refcnt, align 4
  %inc = add nsw i32 %25, 1
  store i32 %inc, i32* %refcnt, align 4
  %tobool9 = icmp ne i32 %25, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then.7
  %26 = phi i1 [ false, %if.then.7 ], [ %tobool9, %land.rhs ]
  %land.ext = zext i1 %26 to i32
  %27 = load %struct.regexp*, %struct.regexp** %re, align 8
  %28 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmregexp10 = getelementptr inbounds %struct.pmop, %struct.pmop* %28, i32 0, i32 13
  store %struct.regexp* %27, %struct.regexp** %op_pmregexp10, align 8
  br label %if.end.81

if.else:                                          ; preds = %if.end.5
  %29 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_flags11 = getelementptr inbounds %struct.sv, %struct.sv* %29, i32 0, i32 2
  %30 = load i32, i32* %sv_flags11, align 4
  %and12 = and i32 %30, 262144
  %cmp = icmp eq i32 %and12, 262144
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else
  %31 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_any13 = getelementptr inbounds %struct.sv, %struct.sv* %31, i32 0, i32 0
  %32 = load i8*, i8** %sv_any13, align 8
  %33 = bitcast i8* %32 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %33, i32 0, i32 1
  %34 = load i64, i64* %xpv_cur, align 8
  store i64 %34, i64* %len, align 8
  %35 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_any14 = getelementptr inbounds %struct.sv, %struct.sv* %35, i32 0, i32 0
  %36 = load i8*, i8** %sv_any14, align 8
  %37 = bitcast i8* %36 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %37, i32 0, i32 0
  %38 = load i8*, i8** %xpv_pv, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.else
  %39 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %call15 = call i8* @Perl_sv_2pv_flags(%struct.sv* %39, i64* %len, i32 2)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %38, %cond.true ], [ %call15, %cond.false ]
  store i8* %cond, i8** %t, align 8
  %40 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmregexp16 = getelementptr inbounds %struct.pmop, %struct.pmop* %40, i32 0, i32 13
  %41 = load %struct.regexp*, %struct.regexp** %op_pmregexp16, align 8
  %tobool17 = icmp ne %struct.regexp* %41, null
  br i1 %tobool17, label %lor.lhs.false, label %if.then.29

lor.lhs.false:                                    ; preds = %cond.end
  %42 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmregexp18 = getelementptr inbounds %struct.pmop, %struct.pmop* %42, i32 0, i32 13
  %43 = load %struct.regexp*, %struct.regexp** %op_pmregexp18, align 8
  %precomp = getelementptr inbounds %struct.regexp, %struct.regexp* %43, i32 0, i32 4
  %44 = load i8*, i8** %precomp, align 8
  %tobool19 = icmp ne i8* %44, null
  br i1 %tobool19, label %lor.lhs.false.20, label %if.then.29

lor.lhs.false.20:                                 ; preds = %lor.lhs.false
  %45 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmregexp21 = getelementptr inbounds %struct.pmop, %struct.pmop* %45, i32 0, i32 13
  %46 = load %struct.regexp*, %struct.regexp** %op_pmregexp21, align 8
  %prelen = getelementptr inbounds %struct.regexp, %struct.regexp* %46, i32 0, i32 11
  %47 = load i32, i32* %prelen, align 4
  %48 = load i64, i64* %len, align 8
  %conv = trunc i64 %48 to i32
  %cmp22 = icmp ne i32 %47, %conv
  br i1 %cmp22, label %if.then.29, label %lor.lhs.false.24

lor.lhs.false.24:                                 ; preds = %lor.lhs.false.20
  %49 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmregexp25 = getelementptr inbounds %struct.pmop, %struct.pmop* %49, i32 0, i32 13
  %50 = load %struct.regexp*, %struct.regexp** %op_pmregexp25, align 8
  %precomp26 = getelementptr inbounds %struct.regexp, %struct.regexp* %50, i32 0, i32 4
  %51 = load i8*, i8** %precomp26, align 8
  %52 = load i8*, i8** %t, align 8
  %53 = load i64, i64* %len, align 8
  %call27 = call i32 @memcmp(i8* %51, i8* %52, i64 %53)
  %tobool28 = icmp ne i32 %call27, 0
  br i1 %tobool28, label %if.then.29, label %if.end.80

if.then.29:                                       ; preds = %lor.lhs.false.24, %lor.lhs.false.20, %lor.lhs.false, %cond.end
  %54 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmregexp30 = getelementptr inbounds %struct.pmop, %struct.pmop* %54, i32 0, i32 13
  %55 = load %struct.regexp*, %struct.regexp** %op_pmregexp30, align 8
  %tobool31 = icmp ne %struct.regexp* %55, null
  br i1 %tobool31, label %if.then.32, label %if.end.35

if.then.32:                                       ; preds = %if.then.29
  %56 = load void (%struct.regexp*)*, void (%struct.regexp*)** @PL_regfree, align 8
  %57 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmregexp33 = getelementptr inbounds %struct.pmop, %struct.pmop* %57, i32 0, i32 13
  %58 = load %struct.regexp*, %struct.regexp** %op_pmregexp33, align 8
  call void %56(%struct.regexp* %58)
  %59 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmregexp34 = getelementptr inbounds %struct.pmop, %struct.pmop* %59, i32 0, i32 13
  store %struct.regexp* null, %struct.regexp** %op_pmregexp34, align 8
  br label %if.end.35

if.end.35:                                        ; preds = %if.then.32, %if.then.29
  %60 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %60, i32 0, i32 6
  %61 = load i8, i8* %op_flags, align 1
  %conv36 = zext i8 %61 to i32
  %and37 = and i32 %conv36, 128
  %tobool38 = icmp ne i32 %and37, 0
  br i1 %tobool38, label %if.then.39, label %if.end.40

if.then.39:                                       ; preds = %if.end.35
  store i32 2147483647, i32* @PL_reginterp_cnt, align 4
  br label %if.end.40

if.end.40:                                        ; preds = %if.then.39, %if.end.35
  %62 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmpermflags = getelementptr inbounds %struct.pmop, %struct.pmop* %62, i32 0, i32 15
  %63 = load i32, i32* %op_pmpermflags, align 4
  %64 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmflags = getelementptr inbounds %struct.pmop, %struct.pmop* %64, i32 0, i32 14
  store i32 %63, i32* %op_pmflags, align 4
  %65 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_flags41 = getelementptr inbounds %struct.sv, %struct.sv* %65, i32 0, i32 2
  %66 = load i32, i32* %sv_flags41, align 4
  %and42 = and i32 %66, 536870912
  %tobool43 = icmp ne i32 %and42, 0
  br i1 %tobool43, label %land.lhs.true, label %if.else.50

land.lhs.true:                                    ; preds = %if.end.40
  %67 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %op_private = getelementptr inbounds %struct.cop, %struct.cop* %67, i32 0, i32 7
  %68 = load i8, i8* %op_private, align 1
  %conv44 = zext i8 %68 to i32
  %and45 = and i32 %conv44, 8
  %tobool46 = icmp ne i32 %and45, 0
  br i1 %tobool46, label %if.else.50, label %if.then.47

if.then.47:                                       ; preds = %land.lhs.true
  %69 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmdynflags = getelementptr inbounds %struct.pmop, %struct.pmop* %69, i32 0, i32 16
  %70 = load i8, i8* %op_pmdynflags, align 1
  %conv48 = zext i8 %70 to i32
  %or = or i32 %conv48, 8
  %conv49 = trunc i32 %or to i8
  store i8 %conv49, i8* %op_pmdynflags, align 1
  br label %if.end.62

if.else.50:                                       ; preds = %land.lhs.true, %if.end.40
  %71 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmdynflags51 = getelementptr inbounds %struct.pmop, %struct.pmop* %71, i32 0, i32 16
  %72 = load i8, i8* %op_pmdynflags51, align 1
  %conv52 = zext i8 %72 to i32
  %and53 = and i32 %conv52, -9
  %conv54 = trunc i32 %and53 to i8
  store i8 %conv54, i8* %op_pmdynflags51, align 1
  %73 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmdynflags55 = getelementptr inbounds %struct.pmop, %struct.pmop* %73, i32 0, i32 16
  %74 = load i8, i8* %op_pmdynflags55, align 1
  %conv56 = zext i8 %74 to i32
  %and57 = and i32 %conv56, 4
  %tobool58 = icmp ne i32 %and57, 0
  br i1 %tobool58, label %if.then.59, label %if.end.61

if.then.59:                                       ; preds = %if.else.50
  %75 = load i8*, i8** %t, align 8
  %call60 = call i8* @Perl_bytes_to_utf8(i8* %75, i64* %len)
  store i8* %call60, i8** %t, align 8
  br label %if.end.61

if.end.61:                                        ; preds = %if.then.59, %if.else.50
  br label %if.end.62

if.end.62:                                        ; preds = %if.end.61, %if.then.47
  %76 = load %struct.regexp* (i8*, i8*, %struct.pmop*)*, %struct.regexp* (i8*, i8*, %struct.pmop*)** @PL_regcompp, align 8
  %77 = load i8*, i8** %t, align 8
  %78 = load i8*, i8** %t, align 8
  %79 = load i64, i64* %len, align 8
  %add.ptr = getelementptr inbounds i8, i8* %78, i64 %79
  %80 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %call63 = call %struct.regexp* %76(i8* %77, i8* %add.ptr, %struct.pmop* %80)
  %81 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmregexp64 = getelementptr inbounds %struct.pmop, %struct.pmop* %81, i32 0, i32 13
  store %struct.regexp* %call63, %struct.regexp** %op_pmregexp64, align 8
  %82 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_flags65 = getelementptr inbounds %struct.sv, %struct.sv* %82, i32 0, i32 2
  %83 = load i32, i32* %sv_flags65, align 4
  %and66 = and i32 %83, 536870912
  %tobool67 = icmp ne i32 %and66, 0
  br i1 %tobool67, label %land.lhs.true.68, label %land.lhs.true.73

land.lhs.true.68:                                 ; preds = %if.end.62
  %84 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %op_private69 = getelementptr inbounds %struct.cop, %struct.cop* %84, i32 0, i32 7
  %85 = load i8, i8* %op_private69, align 1
  %conv70 = zext i8 %85 to i32
  %and71 = and i32 %conv70, 8
  %tobool72 = icmp ne i32 %and71, 0
  br i1 %tobool72, label %land.lhs.true.73, label %if.end.79

land.lhs.true.73:                                 ; preds = %land.lhs.true.68, %if.end.62
  %86 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmdynflags74 = getelementptr inbounds %struct.pmop, %struct.pmop* %86, i32 0, i32 16
  %87 = load i8, i8* %op_pmdynflags74, align 1
  %conv75 = zext i8 %87 to i32
  %and76 = and i32 %conv75, 4
  %tobool77 = icmp ne i32 %and76, 0
  br i1 %tobool77, label %if.then.78, label %if.end.79

if.then.78:                                       ; preds = %land.lhs.true.73
  %88 = load i8*, i8** %t, align 8
  call void @Perl_safesysfree(i8* %88)
  br label %if.end.79

if.end.79:                                        ; preds = %if.then.78, %land.lhs.true.73, %land.lhs.true.68
  store i32 0, i32* @PL_reginterp_cnt, align 4
  br label %if.end.80

if.end.80:                                        ; preds = %if.end.79, %lor.lhs.false.24
  br label %if.end.81

if.end.81:                                        ; preds = %if.end.80, %land.end
  %89 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmregexp82 = getelementptr inbounds %struct.pmop, %struct.pmop* %89, i32 0, i32 13
  %90 = load %struct.regexp*, %struct.regexp** %op_pmregexp82, align 8
  %prelen83 = getelementptr inbounds %struct.regexp, %struct.regexp* %90, i32 0, i32 11
  %91 = load i32, i32* %prelen83, align 4
  %tobool84 = icmp ne i32 %91, 0
  br i1 %tobool84, label %if.else.88, label %land.lhs.true.85

land.lhs.true.85:                                 ; preds = %if.end.81
  %92 = load %struct.pmop*, %struct.pmop** @PL_curpm, align 8
  %tobool86 = icmp ne %struct.pmop* %92, null
  br i1 %tobool86, label %if.then.87, label %if.else.88

if.then.87:                                       ; preds = %land.lhs.true.85
  %93 = load %struct.pmop*, %struct.pmop** @PL_curpm, align 8
  store %struct.pmop* %93, %struct.pmop** %pm, align 8
  br label %if.end.100

if.else.88:                                       ; preds = %land.lhs.true.85, %if.end.81
  %94 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmregexp89 = getelementptr inbounds %struct.pmop, %struct.pmop* %94, i32 0, i32 13
  %95 = load %struct.regexp*, %struct.regexp** %op_pmregexp89, align 8
  %precomp90 = getelementptr inbounds %struct.regexp, %struct.regexp* %95, i32 0, i32 4
  %96 = load i8*, i8** %precomp90, align 8
  %call91 = call i32 @strcmp(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* %96)
  %tobool92 = icmp ne i32 %call91, 0
  br i1 %tobool92, label %if.else.96, label %if.then.93

if.then.93:                                       ; preds = %if.else.88
  %97 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmflags94 = getelementptr inbounds %struct.pmop, %struct.pmop* %97, i32 0, i32 14
  %98 = load i32, i32* %op_pmflags94, align 4
  %or95 = or i32 %98, 32
  store i32 %or95, i32* %op_pmflags94, align 4
  br label %if.end.99

if.else.96:                                       ; preds = %if.else.88
  %99 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmflags97 = getelementptr inbounds %struct.pmop, %struct.pmop* %99, i32 0, i32 14
  %100 = load i32, i32* %op_pmflags97, align 4
  %and98 = and i32 %100, -33
  store i32 %and98, i32* %op_pmflags97, align 4
  br label %if.end.99

if.end.99:                                        ; preds = %if.else.96, %if.then.93
  br label %if.end.100

if.end.100:                                       ; preds = %if.end.99, %if.then.87
  %101 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmflags101 = getelementptr inbounds %struct.pmop, %struct.pmop* %101, i32 0, i32 14
  %102 = load i32, i32* %op_pmflags101, align 4
  %and102 = and i32 %102, 128
  %tobool103 = icmp ne i32 %and102, 0
  br i1 %tobool103, label %if.then.104, label %if.end.110

if.then.104:                                      ; preds = %if.end.100
  %103 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_private105 = getelementptr inbounds %struct.pmop, %struct.pmop* %103, i32 0, i32 7
  %104 = load i8, i8* %op_private105, align 1
  %conv106 = zext i8 %104 to i32
  %and107 = and i32 %conv106, -65
  %conv108 = trunc i32 %and107 to i8
  store i8 %conv108, i8* %op_private105, align 1
  %105 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %105, i32 0, i32 0
  %106 = load %struct.op*, %struct.op** %op_next, align 8
  %107 = load %struct.op*, %struct.op** @PL_op, align 8
  %108 = bitcast %struct.op* %107 to %struct.logop*
  %op_first = getelementptr inbounds %struct.logop, %struct.logop* %108, i32 0, i32 8
  %109 = load %struct.op*, %struct.op** %op_first, align 8
  %op_next109 = getelementptr inbounds %struct.op, %struct.op* %109, i32 0, i32 0
  store %struct.op* %106, %struct.op** %op_next109, align 8
  br label %if.end.110

if.end.110:                                       ; preds = %if.then.104, %if.end.100
  %110 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %110, %struct.sv*** @PL_stack_sp, align 8
  %111 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next111 = getelementptr inbounds %struct.op, %struct.op* %111, i32 0, i32 0
  %112 = load %struct.op*, %struct.op** %op_next111, align 8
  ret %struct.op* %112
}

declare %struct.magic* @Perl_mg_find(%struct.sv*, i32) #1

declare i8* @Perl_sv_2pv_flags(%struct.sv*, i64*, i32) #1

declare i32 @memcmp(i8*, i8*, i64) #1

declare i8* @Perl_bytes_to_utf8(i8*, i64*) #1

declare void @Perl_safesysfree(i8*) #1

declare i32 @strcmp(i8*, i8*) #1

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_substcont() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %pm = alloca %struct.pmop*, align 8
  %cx = alloca %struct.context*, align 8
  %dstr = alloca %struct.sv*, align 8
  %s = alloca i8*, align 8
  %m = alloca i8*, align 8
  %orig = alloca i8*, align 8
  %rx = alloca %struct.regexp*, align 8
  %nsv = alloca %struct.sv*, align 8
  %old = alloca %struct.regexp*, align 8
  %saviters = alloca i32, align 4
  %targ = alloca %struct.sv*, align 8
  %tmp = alloca i64, align 8
  %tmp143 = alloca i64, align 8
  %sv = alloca %struct.sv*, align 8
  %mg = alloca %struct.magic*, align 8
  %i = alloca i32, align 4
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %2 = bitcast %struct.op* %1 to %struct.logop*
  %op_other = getelementptr inbounds %struct.logop, %struct.logop* %2, i32 0, i32 9
  %3 = load %struct.op*, %struct.op** %op_other, align 8
  %4 = bitcast %struct.op* %3 to %struct.pmop*
  store %struct.pmop* %4, %struct.pmop** %pm, align 8
  %5 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %5, i32 0, i32 2
  %6 = load i32, i32* %si_cxix, align 4
  %idxprom = sext i32 %6 to i64
  %7 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxstack = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %7, i32 0, i32 1
  %8 = load %struct.context*, %struct.context** %si_cxstack, align 8
  %arrayidx = getelementptr inbounds %struct.context, %struct.context* %8, i64 %idxprom
  store %struct.context* %arrayidx, %struct.context** %cx, align 8
  %9 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u = getelementptr inbounds %struct.context, %struct.context* %9, i32 0, i32 1
  %cx_subst = bitcast %union.anon* %cx_u to %struct.subst*
  %sbu_dstr = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst, i32 0, i32 7
  %10 = load %struct.sv*, %struct.sv** %sbu_dstr, align 8
  store %struct.sv* %10, %struct.sv** %dstr, align 8
  %11 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u1 = getelementptr inbounds %struct.context, %struct.context* %11, i32 0, i32 1
  %cx_subst2 = bitcast %union.anon* %cx_u1 to %struct.subst*
  %sbu_s = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst2, i32 0, i32 9
  %12 = load i8*, i8** %sbu_s, align 8
  store i8* %12, i8** %s, align 8
  %13 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u3 = getelementptr inbounds %struct.context, %struct.context* %13, i32 0, i32 1
  %cx_subst4 = bitcast %union.anon* %cx_u3 to %struct.subst*
  %sbu_m = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst4, i32 0, i32 10
  %14 = load i8*, i8** %sbu_m, align 8
  store i8* %14, i8** %m, align 8
  %15 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u5 = getelementptr inbounds %struct.context, %struct.context* %15, i32 0, i32 1
  %cx_subst6 = bitcast %union.anon* %cx_u5 to %struct.subst*
  %sbu_orig = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst6, i32 0, i32 6
  %16 = load i8*, i8** %sbu_orig, align 8
  store i8* %16, i8** %orig, align 8
  %17 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u7 = getelementptr inbounds %struct.context, %struct.context* %17, i32 0, i32 1
  %cx_subst8 = bitcast %union.anon* %cx_u7 to %struct.subst*
  %sbu_rx = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst8, i32 0, i32 13
  %18 = load %struct.regexp*, %struct.regexp** %sbu_rx, align 8
  store %struct.regexp* %18, %struct.regexp** %rx, align 8
  store %struct.sv* null, %struct.sv** %nsv, align 8
  %19 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmregexp = getelementptr inbounds %struct.pmop, %struct.pmop* %19, i32 0, i32 13
  %20 = load %struct.regexp*, %struct.regexp** %op_pmregexp, align 8
  store %struct.regexp* %20, %struct.regexp** %old, align 8
  %21 = load %struct.regexp*, %struct.regexp** %old, align 8
  %22 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %cmp = icmp ne %struct.regexp* %21, %22
  br i1 %cmp, label %if.then, label %if.end.11

if.then:                                          ; preds = %entry
  %23 = load %struct.regexp*, %struct.regexp** %old, align 8
  %tobool = icmp ne %struct.regexp* %23, null
  br i1 %tobool, label %if.then.9, label %if.end

if.then.9:                                        ; preds = %if.then
  %24 = load void (%struct.regexp*)*, void (%struct.regexp*)** @PL_regfree, align 8
  %25 = load %struct.regexp*, %struct.regexp** %old, align 8
  call void %24(%struct.regexp* %25)
  br label %if.end

if.end:                                           ; preds = %if.then.9, %if.then
  %26 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %27 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmregexp10 = getelementptr inbounds %struct.pmop, %struct.pmop* %27, i32 0, i32 13
  store %struct.regexp* %26, %struct.regexp** %op_pmregexp10, align 8
  br label %if.end.11

if.end.11:                                        ; preds = %if.end, %entry
  %28 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u12 = getelementptr inbounds %struct.context, %struct.context* %28, i32 0, i32 1
  %cx_subst13 = bitcast %union.anon* %cx_u12 to %struct.subst*
  %sbu_rxres = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst13, i32 0, i32 12
  %29 = load %struct.regexp*, %struct.regexp** %rx, align 8
  call void @Perl_rxres_restore(i8** %sbu_rxres, %struct.regexp* %29)
  %30 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u14 = getelementptr inbounds %struct.context, %struct.context* %30, i32 0, i32 1
  %cx_subst15 = bitcast %union.anon* %cx_u14 to %struct.subst*
  %sbu_targ = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst15, i32 0, i32 8
  %31 = load %struct.sv*, %struct.sv** %sbu_targ, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %31, i32 0, i32 2
  %32 = load i32, i32* %sv_flags, align 4
  %and = and i32 %32, 536870912
  %tobool16 = icmp ne i32 %and, 0
  br i1 %tobool16, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.11
  %33 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %reganch = getelementptr inbounds %struct.regexp, %struct.regexp* %33, i32 0, i32 15
  %34 = load i32, i32* %reganch, align 4
  %or = or i32 %34, 268435456
  store i32 %or, i32* %reganch, align 4
  store i8 1, i8* @PL_reg_match_utf8, align 1
  br label %cond.end

cond.false:                                       ; preds = %if.end.11
  %35 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %reganch17 = getelementptr inbounds %struct.regexp, %struct.regexp* %35, i32 0, i32 15
  %36 = load i32, i32* %reganch17, align 4
  %and18 = and i32 %36, -268435457
  store i32 %and18, i32* %reganch17, align 4
  store i8 0, i8* @PL_reg_match_utf8, align 1
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 1, %cond.true ], [ 0, %cond.false ]
  %37 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u19 = getelementptr inbounds %struct.context, %struct.context* %37, i32 0, i32 1
  %cx_subst20 = bitcast %union.anon* %cx_u19 to %struct.subst*
  %sbu_iters = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst20, i32 0, i32 0
  %38 = load i32, i32* %sbu_iters, align 4
  %inc = add nsw i32 %38, 1
  store i32 %inc, i32* %sbu_iters, align 4
  %tobool21 = icmp ne i32 %38, 0
  br i1 %tobool21, label %if.then.22, label %if.end.219

if.then.22:                                       ; preds = %cond.end
  %39 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u23 = getelementptr inbounds %struct.context, %struct.context* %39, i32 0, i32 1
  %cx_subst24 = bitcast %union.anon* %cx_u23 to %struct.subst*
  %sbu_iters25 = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst24, i32 0, i32 0
  %40 = load i32, i32* %sbu_iters25, align 4
  store i32 %40, i32* %saviters, align 4
  %41 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u26 = getelementptr inbounds %struct.context, %struct.context* %41, i32 0, i32 1
  %cx_subst27 = bitcast %union.anon* %cx_u26 to %struct.subst*
  %sbu_iters28 = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst27, i32 0, i32 0
  %42 = load i32, i32* %sbu_iters28, align 4
  %43 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u29 = getelementptr inbounds %struct.context, %struct.context* %43, i32 0, i32 1
  %cx_subst30 = bitcast %union.anon* %cx_u29 to %struct.subst*
  %sbu_maxiters = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst30, i32 0, i32 1
  %44 = load i32, i32* %sbu_maxiters, align 4
  %cmp31 = icmp sgt i32 %42, %44
  br i1 %cmp31, label %if.then.32, label %if.end.33

if.then.32:                                       ; preds = %if.then.22
  %call = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i32 0, i32 0))
  store %struct.op* %call, %struct.op** %retval
  br label %return

if.end.33:                                        ; preds = %if.then.22
  %45 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u34 = getelementptr inbounds %struct.context, %struct.context* %45, i32 0, i32 1
  %cx_subst35 = bitcast %union.anon* %cx_u34 to %struct.subst*
  %sbu_rxtainted = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst35, i32 0, i32 5
  %46 = load i8, i8* %sbu_rxtainted, align 1
  %conv = sext i8 %46 to i32
  %and36 = and i32 %conv, 2
  %tobool37 = icmp ne i32 %and36, 0
  br i1 %tobool37, label %if.end.52, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end.33
  %47 = load %struct.sv**, %struct.sv*** %sp, align 8
  %48 = load %struct.sv*, %struct.sv** %47, align 8
  %sv_flags38 = getelementptr inbounds %struct.sv, %struct.sv* %48, i32 0, i32 2
  %49 = load i32, i32* %sv_flags38, align 4
  %and39 = and i32 %49, 57344
  %tobool40 = icmp ne i32 %and39, 0
  br i1 %tobool40, label %land.lhs.true.41, label %if.end.52

land.lhs.true.41:                                 ; preds = %land.lhs.true
  %50 = load %struct.sv**, %struct.sv*** %sp, align 8
  %51 = load %struct.sv*, %struct.sv** %50, align 8
  %call42 = call signext i8 @Perl_sv_tainted(%struct.sv* %51)
  %conv43 = sext i8 %call42 to i32
  %tobool44 = icmp ne i32 %conv43, 0
  br i1 %tobool44, label %if.then.45, label %if.end.52

if.then.45:                                       ; preds = %land.lhs.true.41
  %52 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u46 = getelementptr inbounds %struct.context, %struct.context* %52, i32 0, i32 1
  %cx_subst47 = bitcast %union.anon* %cx_u46 to %struct.subst*
  %sbu_rxtainted48 = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst47, i32 0, i32 5
  %53 = load i8, i8* %sbu_rxtainted48, align 1
  %conv49 = sext i8 %53 to i32
  %or50 = or i32 %conv49, 2
  %conv51 = trunc i32 %or50 to i8
  store i8 %conv51, i8* %sbu_rxtainted48, align 1
  br label %if.end.52

if.end.52:                                        ; preds = %if.then.45, %land.lhs.true.41, %land.lhs.true, %if.end.33
  %54 = load %struct.sv*, %struct.sv** %dstr, align 8
  %55 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %55, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %56 = load %struct.sv*, %struct.sv** %55, align 8
  call void @Perl_sv_catsv_flags(%struct.sv* %54, %struct.sv* %56, i32 2)
  %57 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u53 = getelementptr inbounds %struct.context, %struct.context* %57, i32 0, i32 1
  %cx_subst54 = bitcast %union.anon* %cx_u53 to %struct.subst*
  %sbu_once = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst54, i32 0, i32 4
  %58 = load i8, i8* %sbu_once, align 1
  %conv55 = sext i8 %58 to i32
  %tobool56 = icmp ne i32 %conv55, 0
  br i1 %tobool56, label %if.then.71, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.52
  %59 = load i32 (%struct.regexp*, i8*, i8*, i8*, i32, %struct.sv*, i8*, i32)*, i32 (%struct.regexp*, i8*, i8*, i8*, i32, %struct.sv*, i8*, i32)** @PL_regexecp, align 8
  %60 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %61 = load i8*, i8** %s, align 8
  %62 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u57 = getelementptr inbounds %struct.context, %struct.context* %62, i32 0, i32 1
  %cx_subst58 = bitcast %union.anon* %cx_u57 to %struct.subst*
  %sbu_strend = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst58, i32 0, i32 11
  %63 = load i8*, i8** %sbu_strend, align 8
  %64 = load i8*, i8** %orig, align 8
  %65 = load i8*, i8** %s, align 8
  %66 = load i8*, i8** %m, align 8
  %cmp59 = icmp eq i8* %65, %66
  %conv60 = zext i1 %cmp59 to i32
  %67 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u61 = getelementptr inbounds %struct.context, %struct.context* %67, i32 0, i32 1
  %cx_subst62 = bitcast %union.anon* %cx_u61 to %struct.subst*
  %sbu_targ63 = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst62, i32 0, i32 8
  %68 = load %struct.sv*, %struct.sv** %sbu_targ63, align 8
  %69 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u64 = getelementptr inbounds %struct.context, %struct.context* %69, i32 0, i32 1
  %cx_subst65 = bitcast %union.anon* %cx_u64 to %struct.subst*
  %sbu_rflags = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst65, i32 0, i32 2
  %70 = load i32, i32* %sbu_rflags, align 4
  %and66 = and i32 %70, 1
  %tobool67 = icmp ne i32 %and66, 0
  %cond68 = select i1 %tobool67, i32 24, i32 25
  %call69 = call i32 %59(%struct.regexp* %60, i8* %61, i8* %63, i8* %64, i32 %conv60, %struct.sv* %68, i8* null, i32 %cond68)
  %tobool70 = icmp ne i32 %call69, 0
  br i1 %tobool70, label %if.end.215, label %if.then.71

if.then.71:                                       ; preds = %lor.lhs.false, %if.end.52
  %71 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u72 = getelementptr inbounds %struct.context, %struct.context* %71, i32 0, i32 1
  %cx_subst73 = bitcast %union.anon* %cx_u72 to %struct.subst*
  %sbu_targ74 = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst73, i32 0, i32 8
  %72 = load %struct.sv*, %struct.sv** %sbu_targ74, align 8
  store %struct.sv* %72, %struct.sv** %targ, align 8
  %73 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u75 = getelementptr inbounds %struct.context, %struct.context* %73, i32 0, i32 1
  %cx_subst76 = bitcast %union.anon* %cx_u75 to %struct.subst*
  %sbu_strend77 = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst76, i32 0, i32 11
  %74 = load i8*, i8** %sbu_strend77, align 8
  %75 = load i8*, i8** %s, align 8
  %cmp78 = icmp ugt i8* %74, %75
  br i1 %cmp78, label %if.then.80, label %if.end.118

if.then.80:                                       ; preds = %if.then.71
  %76 = load %struct.sv*, %struct.sv** %dstr, align 8
  %sv_flags81 = getelementptr inbounds %struct.sv, %struct.sv* %76, i32 0, i32 2
  %77 = load i32, i32* %sv_flags81, align 4
  %and82 = and i32 %77, 536870912
  %tobool83 = icmp ne i32 %and82, 0
  br i1 %tobool83, label %land.lhs.true.84, label %if.else.110

land.lhs.true.84:                                 ; preds = %if.then.80
  %78 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %op_private = getelementptr inbounds %struct.cop, %struct.cop* %78, i32 0, i32 7
  %79 = load i8, i8* %op_private, align 1
  %conv85 = zext i8 %79 to i32
  %and86 = and i32 %conv85, 8
  %tobool87 = icmp ne i32 %and86, 0
  br i1 %tobool87, label %if.else.110, label %land.lhs.true.88

land.lhs.true.88:                                 ; preds = %land.lhs.true.84
  %80 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags89 = getelementptr inbounds %struct.sv, %struct.sv* %80, i32 0, i32 2
  %81 = load i32, i32* %sv_flags89, align 4
  %and90 = and i32 %81, 536870912
  %tobool91 = icmp ne i32 %and90, 0
  br i1 %tobool91, label %if.else.110, label %if.then.92

if.then.92:                                       ; preds = %land.lhs.true.88
  %82 = load %struct.sv*, %struct.sv** %nsv, align 8
  %tobool93 = icmp ne %struct.sv* %82, null
  br i1 %tobool93, label %if.else, label %if.then.94

if.then.94:                                       ; preds = %if.then.92
  %83 = load i8*, i8** %s, align 8
  %84 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u95 = getelementptr inbounds %struct.context, %struct.context* %84, i32 0, i32 1
  %cx_subst96 = bitcast %union.anon* %cx_u95 to %struct.subst*
  %sbu_strend97 = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst96, i32 0, i32 11
  %85 = load i8*, i8** %sbu_strend97, align 8
  %86 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %85 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %86 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %call98 = call %struct.sv* @Perl_newSVpvn(i8* %83, i64 %sub.ptr.sub)
  %call99 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call98)
  store %struct.sv* %call99, %struct.sv** %nsv, align 8
  br label %if.end.106

if.else:                                          ; preds = %if.then.92
  %87 = load %struct.sv*, %struct.sv** %nsv, align 8
  %88 = load i8*, i8** %s, align 8
  %89 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u100 = getelementptr inbounds %struct.context, %struct.context* %89, i32 0, i32 1
  %cx_subst101 = bitcast %union.anon* %cx_u100 to %struct.subst*
  %sbu_strend102 = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst101, i32 0, i32 11
  %90 = load i8*, i8** %sbu_strend102, align 8
  %91 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast103 = ptrtoint i8* %90 to i64
  %sub.ptr.rhs.cast104 = ptrtoint i8* %91 to i64
  %sub.ptr.sub105 = sub i64 %sub.ptr.lhs.cast103, %sub.ptr.rhs.cast104
  call void @Perl_sv_setpvn(%struct.sv* %87, i8* %88, i64 %sub.ptr.sub105)
  br label %if.end.106

if.end.106:                                       ; preds = %if.else, %if.then.94
  %92 = load %struct.sv*, %struct.sv** %nsv, align 8
  %sv_flags107 = getelementptr inbounds %struct.sv, %struct.sv* %92, i32 0, i32 2
  %93 = load i32, i32* %sv_flags107, align 4
  %and108 = and i32 %93, -536870913
  store i32 %and108, i32* %sv_flags107, align 4
  %94 = load %struct.sv*, %struct.sv** %nsv, align 8
  %call109 = call i64 @Perl_sv_utf8_upgrade_flags(%struct.sv* %94, i32 2)
  %95 = load %struct.sv*, %struct.sv** %dstr, align 8
  %96 = load %struct.sv*, %struct.sv** %nsv, align 8
  call void @Perl_sv_catsv_flags(%struct.sv* %95, %struct.sv* %96, i32 2)
  br label %if.end.117

if.else.110:                                      ; preds = %land.lhs.true.88, %land.lhs.true.84, %if.then.80
  %97 = load %struct.sv*, %struct.sv** %dstr, align 8
  %98 = load i8*, i8** %s, align 8
  %99 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u111 = getelementptr inbounds %struct.context, %struct.context* %99, i32 0, i32 1
  %cx_subst112 = bitcast %union.anon* %cx_u111 to %struct.subst*
  %sbu_strend113 = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst112, i32 0, i32 11
  %100 = load i8*, i8** %sbu_strend113, align 8
  %101 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast114 = ptrtoint i8* %100 to i64
  %sub.ptr.rhs.cast115 = ptrtoint i8* %101 to i64
  %sub.ptr.sub116 = sub i64 %sub.ptr.lhs.cast114, %sub.ptr.rhs.cast115
  call void @Perl_sv_catpvn_flags(%struct.sv* %97, i8* %98, i64 %sub.ptr.sub116, i32 2)
  br label %if.end.117

if.end.117:                                       ; preds = %if.else.110, %if.end.106
  br label %if.end.118

if.end.118:                                       ; preds = %if.end.117, %if.then.71
  %102 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %reganch119 = getelementptr inbounds %struct.regexp, %struct.regexp* %102, i32 0, i32 15
  %103 = load i32, i32* %reganch119, align 4
  %and120 = and i32 %103, 524288
  %104 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u121 = getelementptr inbounds %struct.context, %struct.context* %104, i32 0, i32 1
  %cx_subst122 = bitcast %union.anon* %cx_u121 to %struct.subst*
  %sbu_rxtainted123 = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst122, i32 0, i32 5
  %105 = load i8, i8* %sbu_rxtainted123, align 1
  %conv124 = sext i8 %105 to i32
  %or125 = or i32 %conv124, %and120
  %conv126 = trunc i32 %or125 to i8
  store i8 %conv126, i8* %sbu_rxtainted123, align 1
  %106 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags127 = getelementptr inbounds %struct.sv, %struct.sv* %106, i32 0, i32 2
  %107 = load i32, i32* %sv_flags127, align 4
  %and128 = and i32 %107, 2097152
  %tobool129 = icmp ne i32 %and128, 0
  br i1 %tobool129, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.end.118
  %108 = load %struct.sv*, %struct.sv** %targ, align 8
  %call130 = call i32 @Perl_sv_backoff(%struct.sv* %108)
  %tobool131 = icmp ne i32 %call130, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end.118
  %109 = phi i1 [ false, %if.end.118 ], [ %tobool131, %land.rhs ]
  %land.ext = zext i1 %109 to i32
  %110 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %110, i32 0, i32 0
  %111 = load i8*, i8** %sv_any, align 8
  %112 = bitcast i8* %111 to %struct.xpv*
  %xpv_len = getelementptr inbounds %struct.xpv, %struct.xpv* %112, i32 0, i32 2
  %113 = load i64, i64* %xpv_len, align 8
  %tobool132 = icmp ne i64 %113, 0
  br i1 %tobool132, label %if.then.133, label %if.end.135

if.then.133:                                      ; preds = %land.end
  %114 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_any134 = getelementptr inbounds %struct.sv, %struct.sv* %114, i32 0, i32 0
  %115 = load i8*, i8** %sv_any134, align 8
  %116 = bitcast i8* %115 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %116, i32 0, i32 0
  %117 = load i8*, i8** %xpv_pv, align 8
  call void @Perl_safesysfree(i8* %117)
  br label %if.end.135

if.end.135:                                       ; preds = %if.then.133, %land.end
  %118 = load %struct.sv*, %struct.sv** %dstr, align 8
  %sv_any136 = getelementptr inbounds %struct.sv, %struct.sv* %118, i32 0, i32 0
  %119 = load i8*, i8** %sv_any136, align 8
  %120 = bitcast i8* %119 to %struct.xpv*
  %xpv_pv137 = getelementptr inbounds %struct.xpv, %struct.xpv* %120, i32 0, i32 0
  %121 = load i8*, i8** %xpv_pv137, align 8
  %122 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_any138 = getelementptr inbounds %struct.sv, %struct.sv* %122, i32 0, i32 0
  %123 = load i8*, i8** %sv_any138, align 8
  %124 = bitcast i8* %123 to %struct.xpv*
  %xpv_pv139 = getelementptr inbounds %struct.xpv, %struct.xpv* %124, i32 0, i32 0
  store i8* %121, i8** %xpv_pv139, align 8
  %125 = load %struct.sv*, %struct.sv** %dstr, align 8
  %sv_any140 = getelementptr inbounds %struct.sv, %struct.sv* %125, i32 0, i32 0
  %126 = load i8*, i8** %sv_any140, align 8
  %127 = bitcast i8* %126 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %127, i32 0, i32 1
  %128 = load i64, i64* %xpv_cur, align 8
  %129 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_any141 = getelementptr inbounds %struct.sv, %struct.sv* %129, i32 0, i32 0
  %130 = load i8*, i8** %sv_any141, align 8
  %131 = bitcast i8* %130 to %struct.xpv*
  %xpv_cur142 = getelementptr inbounds %struct.xpv, %struct.xpv* %131, i32 0, i32 1
  store i64 %128, i64* %xpv_cur142, align 8
  store i64 %128, i64* %tmp
  %132 = load i64, i64* %tmp
  %133 = load %struct.sv*, %struct.sv** %dstr, align 8
  %sv_any144 = getelementptr inbounds %struct.sv, %struct.sv* %133, i32 0, i32 0
  %134 = load i8*, i8** %sv_any144, align 8
  %135 = bitcast i8* %134 to %struct.xpv*
  %xpv_len145 = getelementptr inbounds %struct.xpv, %struct.xpv* %135, i32 0, i32 2
  %136 = load i64, i64* %xpv_len145, align 8
  %137 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_any146 = getelementptr inbounds %struct.sv, %struct.sv* %137, i32 0, i32 0
  %138 = load i8*, i8** %sv_any146, align 8
  %139 = bitcast i8* %138 to %struct.xpv*
  %xpv_len147 = getelementptr inbounds %struct.xpv, %struct.xpv* %139, i32 0, i32 2
  store i64 %136, i64* %xpv_len147, align 8
  store i64 %136, i64* %tmp143
  %140 = load i64, i64* %tmp143
  %141 = load %struct.sv*, %struct.sv** %dstr, align 8
  %sv_flags148 = getelementptr inbounds %struct.sv, %struct.sv* %141, i32 0, i32 2
  %142 = load i32, i32* %sv_flags148, align 4
  %and149 = and i32 %142, 536870912
  %tobool150 = icmp ne i32 %and149, 0
  br i1 %tobool150, label %land.lhs.true.151, label %if.end.159

land.lhs.true.151:                                ; preds = %if.end.135
  %143 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %op_private152 = getelementptr inbounds %struct.cop, %struct.cop* %143, i32 0, i32 7
  %144 = load i8, i8* %op_private152, align 1
  %conv153 = zext i8 %144 to i32
  %and154 = and i32 %conv153, 8
  %tobool155 = icmp ne i32 %and154, 0
  br i1 %tobool155, label %if.end.159, label %if.then.156

if.then.156:                                      ; preds = %land.lhs.true.151
  %145 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags157 = getelementptr inbounds %struct.sv, %struct.sv* %145, i32 0, i32 2
  %146 = load i32, i32* %sv_flags157, align 4
  %or158 = or i32 %146, 536870912
  store i32 %or158, i32* %sv_flags157, align 4
  br label %if.end.159

if.end.159:                                       ; preds = %if.then.156, %land.lhs.true.151, %if.end.135
  %147 = load %struct.sv*, %struct.sv** %dstr, align 8
  %sv_any160 = getelementptr inbounds %struct.sv, %struct.sv* %147, i32 0, i32 0
  %148 = load i8*, i8** %sv_any160, align 8
  %149 = bitcast i8* %148 to %struct.xpv*
  %xpv_pv161 = getelementptr inbounds %struct.xpv, %struct.xpv* %149, i32 0, i32 0
  store i8* null, i8** %xpv_pv161, align 8
  %150 = load %struct.sv*, %struct.sv** %dstr, align 8
  call void @Perl_sv_free(%struct.sv* %150)
  %151 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u162 = getelementptr inbounds %struct.context, %struct.context* %151, i32 0, i32 1
  %cx_subst163 = bitcast %union.anon* %cx_u162 to %struct.subst*
  %sbu_rxtainted164 = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst163, i32 0, i32 5
  %152 = load i8, i8* %sbu_rxtainted164, align 1
  %conv165 = sext i8 %152 to i32
  %and166 = and i32 %conv165, 1
  %tobool167 = icmp ne i32 %and166, 0
  br i1 %tobool167, label %if.then.168, label %if.end.169

if.then.168:                                      ; preds = %if.end.159
  store i8 1, i8* @PL_tainted, align 1
  br label %if.end.169

if.end.169:                                       ; preds = %if.then.168, %if.end.159
  %153 = load i32, i32* %saviters, align 4
  %sub = sub nsw i32 %153, 1
  %conv170 = sext i32 %sub to i64
  %call171 = call %struct.sv* @Perl_newSViv(i64 %conv170)
  %call172 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call171)
  %154 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr173 = getelementptr inbounds %struct.sv*, %struct.sv** %154, i32 1
  store %struct.sv** %incdec.ptr173, %struct.sv*** %sp, align 8
  store %struct.sv* %call172, %struct.sv** %incdec.ptr173, align 8
  %155 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags174 = getelementptr inbounds %struct.sv, %struct.sv* %155, i32 0, i32 2
  %156 = load i32, i32* %sv_flags174, align 4
  %and175 = and i32 %156, 1760624639
  store i32 %and175, i32* %sv_flags174, align 4
  %157 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags176 = getelementptr inbounds %struct.sv, %struct.sv* %157, i32 0, i32 2
  %158 = load i32, i32* %sv_flags176, align 4
  %or177 = or i32 %158, 67371008
  store i32 %or177, i32* %sv_flags176, align 4
  %159 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u178 = getelementptr inbounds %struct.context, %struct.context* %159, i32 0, i32 1
  %cx_subst179 = bitcast %union.anon* %cx_u178 to %struct.subst*
  %sbu_rxtainted180 = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst179, i32 0, i32 5
  %160 = load i8, i8* %sbu_rxtainted180, align 1
  %tobool181 = icmp ne i8 %160, 0
  br i1 %tobool181, label %if.then.182, label %if.end.183

if.then.182:                                      ; preds = %if.end.169
  store i8 1, i8* @PL_tainted, align 1
  br label %if.end.183

if.end.183:                                       ; preds = %if.then.182, %if.end.169
  %161 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags184 = getelementptr inbounds %struct.sv, %struct.sv* %161, i32 0, i32 2
  %162 = load i32, i32* %sv_flags184, align 4
  %and185 = and i32 %162, 16384
  %tobool186 = icmp ne i32 %and185, 0
  br i1 %tobool186, label %if.then.187, label %if.end.189

if.then.187:                                      ; preds = %if.end.183
  %163 = load %struct.sv*, %struct.sv** %targ, align 8
  %call188 = call i32 @Perl_mg_set(%struct.sv* %163)
  br label %if.end.189

if.end.189:                                       ; preds = %if.then.187, %if.end.183
  %164 = load i8, i8* @PL_tainting, align 1
  %tobool190 = icmp ne i8 %164, 0
  br i1 %tobool190, label %if.then.191, label %if.end.198

if.then.191:                                      ; preds = %if.end.189
  %165 = load i8, i8* @PL_tainted, align 1
  %tobool192 = icmp ne i8 %165, 0
  br i1 %tobool192, label %if.then.193, label %if.end.197

if.then.193:                                      ; preds = %if.then.191
  %166 = load i8, i8* @PL_tainting, align 1
  %tobool194 = icmp ne i8 %166, 0
  br i1 %tobool194, label %if.then.195, label %if.end.196

if.then.195:                                      ; preds = %if.then.193
  %167 = load %struct.sv*, %struct.sv** %targ, align 8
  call void @Perl_sv_taint(%struct.sv* %167)
  br label %if.end.196

if.end.196:                                       ; preds = %if.then.195, %if.then.193
  br label %if.end.197

if.end.197:                                       ; preds = %if.end.196, %if.then.191
  br label %if.end.198

if.end.198:                                       ; preds = %if.end.197, %if.end.189
  %168 = load i32, i32* @PL_savestack_ix, align 4
  %169 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u199 = getelementptr inbounds %struct.context, %struct.context* %169, i32 0, i32 1
  %cx_subst200 = bitcast %union.anon* %cx_u199 to %struct.subst*
  %sbu_oldsave = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst200, i32 0, i32 3
  %170 = load i32, i32* %sbu_oldsave, align 4
  %cmp201 = icmp sgt i32 %168, %170
  br i1 %cmp201, label %if.then.203, label %if.end.207

if.then.203:                                      ; preds = %if.end.198
  %171 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u204 = getelementptr inbounds %struct.context, %struct.context* %171, i32 0, i32 1
  %cx_subst205 = bitcast %union.anon* %cx_u204 to %struct.subst*
  %sbu_oldsave206 = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst205, i32 0, i32 3
  %172 = load i32, i32* %sbu_oldsave206, align 4
  call void @Perl_leave_scope(i32 %172)
  br label %if.end.207

if.end.207:                                       ; preds = %if.then.203, %if.end.198
  %173 = load void (%struct.regexp*)*, void (%struct.regexp*)** @PL_regfree, align 8
  %174 = load %struct.regexp*, %struct.regexp** %rx, align 8
  call void %173(%struct.regexp* %174)
  %175 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix208 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %175, i32 0, i32 2
  %176 = load i32, i32* %si_cxix208, align 4
  %dec = add nsw i32 %176, -1
  store i32 %dec, i32* %si_cxix208, align 4
  %idxprom209 = sext i32 %176 to i64
  %177 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxstack210 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %177, i32 0, i32 1
  %178 = load %struct.context*, %struct.context** %si_cxstack210, align 8
  %arrayidx211 = getelementptr inbounds %struct.context, %struct.context* %178, i64 %idxprom209
  store %struct.context* %arrayidx211, %struct.context** %cx, align 8
  %179 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u212 = getelementptr inbounds %struct.context, %struct.context* %179, i32 0, i32 1
  %cx_subst213 = bitcast %union.anon* %cx_u212 to %struct.subst*
  %sbu_rxres214 = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst213, i32 0, i32 12
  call void @Perl_rxres_free(i8** %sbu_rxres214)
  %180 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %180, %struct.sv*** @PL_stack_sp, align 8
  %181 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_next = getelementptr inbounds %struct.pmop, %struct.pmop* %181, i32 0, i32 0
  %182 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %182, %struct.op** %retval
  br label %return

if.end.215:                                       ; preds = %lor.lhs.false
  %183 = load i32, i32* %saviters, align 4
  %184 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u216 = getelementptr inbounds %struct.context, %struct.context* %184, i32 0, i32 1
  %cx_subst217 = bitcast %union.anon* %cx_u216 to %struct.subst*
  %sbu_iters218 = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst217, i32 0, i32 0
  store i32 %183, i32* %sbu_iters218, align 4
  br label %if.end.219

if.end.219:                                       ; preds = %if.end.215, %cond.end
  %185 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %reganch220 = getelementptr inbounds %struct.regexp, %struct.regexp* %185, i32 0, i32 15
  %186 = load i32, i32* %reganch220, align 4
  %and221 = and i32 %186, 262144
  %tobool222 = icmp ne i32 %and221, 0
  br i1 %tobool222, label %land.lhs.true.223, label %if.end.244

land.lhs.true.223:                                ; preds = %if.end.219
  %187 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %subbeg = getelementptr inbounds %struct.regexp, %struct.regexp* %187, i32 0, i32 6
  %188 = load i8*, i8** %subbeg, align 8
  %189 = load i8*, i8** %orig, align 8
  %cmp224 = icmp ne i8* %188, %189
  br i1 %cmp224, label %if.then.226, label %if.end.244

if.then.226:                                      ; preds = %land.lhs.true.223
  %190 = load i8*, i8** %s, align 8
  store i8* %190, i8** %m, align 8
  %191 = load i8*, i8** %orig, align 8
  store i8* %191, i8** %s, align 8
  %192 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %subbeg227 = getelementptr inbounds %struct.regexp, %struct.regexp* %192, i32 0, i32 6
  %193 = load i8*, i8** %subbeg227, align 8
  store i8* %193, i8** %orig, align 8
  %194 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u228 = getelementptr inbounds %struct.context, %struct.context* %194, i32 0, i32 1
  %cx_subst229 = bitcast %union.anon* %cx_u228 to %struct.subst*
  %sbu_orig230 = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst229, i32 0, i32 6
  store i8* %193, i8** %sbu_orig230, align 8
  %195 = load i8*, i8** %orig, align 8
  %196 = load i8*, i8** %m, align 8
  %197 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast231 = ptrtoint i8* %196 to i64
  %sub.ptr.rhs.cast232 = ptrtoint i8* %197 to i64
  %sub.ptr.sub233 = sub i64 %sub.ptr.lhs.cast231, %sub.ptr.rhs.cast232
  %add.ptr = getelementptr inbounds i8, i8* %195, i64 %sub.ptr.sub233
  store i8* %add.ptr, i8** %s, align 8
  %198 = load i8*, i8** %s, align 8
  %199 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u234 = getelementptr inbounds %struct.context, %struct.context* %199, i32 0, i32 1
  %cx_subst235 = bitcast %union.anon* %cx_u234 to %struct.subst*
  %sbu_strend236 = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst235, i32 0, i32 11
  %200 = load i8*, i8** %sbu_strend236, align 8
  %201 = load i8*, i8** %m, align 8
  %sub.ptr.lhs.cast237 = ptrtoint i8* %200 to i64
  %sub.ptr.rhs.cast238 = ptrtoint i8* %201 to i64
  %sub.ptr.sub239 = sub i64 %sub.ptr.lhs.cast237, %sub.ptr.rhs.cast238
  %add.ptr240 = getelementptr inbounds i8, i8* %198, i64 %sub.ptr.sub239
  %202 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u241 = getelementptr inbounds %struct.context, %struct.context* %202, i32 0, i32 1
  %cx_subst242 = bitcast %union.anon* %cx_u241 to %struct.subst*
  %sbu_strend243 = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst242, i32 0, i32 11
  store i8* %add.ptr240, i8** %sbu_strend243, align 8
  br label %if.end.244

if.end.244:                                       ; preds = %if.then.226, %land.lhs.true.223, %if.end.219
  %203 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %startp = getelementptr inbounds %struct.regexp, %struct.regexp* %203, i32 0, i32 0
  %204 = load i32*, i32** %startp, align 8
  %arrayidx245 = getelementptr inbounds i32, i32* %204, i64 0
  %205 = load i32, i32* %arrayidx245, align 4
  %206 = load i8*, i8** %orig, align 8
  %idx.ext = sext i32 %205 to i64
  %add.ptr246 = getelementptr inbounds i8, i8* %206, i64 %idx.ext
  store i8* %add.ptr246, i8** %m, align 8
  %207 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u247 = getelementptr inbounds %struct.context, %struct.context* %207, i32 0, i32 1
  %cx_subst248 = bitcast %union.anon* %cx_u247 to %struct.subst*
  %sbu_m249 = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst248, i32 0, i32 10
  store i8* %add.ptr246, i8** %sbu_m249, align 8
  %208 = load i8*, i8** %m, align 8
  %209 = load i8*, i8** %s, align 8
  %cmp250 = icmp ugt i8* %208, %209
  br i1 %cmp250, label %if.then.252, label %if.end.289

if.then.252:                                      ; preds = %if.end.244
  %210 = load %struct.sv*, %struct.sv** %dstr, align 8
  %sv_flags253 = getelementptr inbounds %struct.sv, %struct.sv* %210, i32 0, i32 2
  %211 = load i32, i32* %sv_flags253, align 4
  %and254 = and i32 %211, 536870912
  %tobool255 = icmp ne i32 %and254, 0
  br i1 %tobool255, label %land.lhs.true.256, label %if.else.284

land.lhs.true.256:                                ; preds = %if.then.252
  %212 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %op_private257 = getelementptr inbounds %struct.cop, %struct.cop* %212, i32 0, i32 7
  %213 = load i8, i8* %op_private257, align 1
  %conv258 = zext i8 %213 to i32
  %and259 = and i32 %conv258, 8
  %tobool260 = icmp ne i32 %and259, 0
  br i1 %tobool260, label %if.else.284, label %land.lhs.true.261

land.lhs.true.261:                                ; preds = %land.lhs.true.256
  %214 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u262 = getelementptr inbounds %struct.context, %struct.context* %214, i32 0, i32 1
  %cx_subst263 = bitcast %union.anon* %cx_u262 to %struct.subst*
  %sbu_targ264 = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst263, i32 0, i32 8
  %215 = load %struct.sv*, %struct.sv** %sbu_targ264, align 8
  %sv_flags265 = getelementptr inbounds %struct.sv, %struct.sv* %215, i32 0, i32 2
  %216 = load i32, i32* %sv_flags265, align 4
  %and266 = and i32 %216, 536870912
  %tobool267 = icmp ne i32 %and266, 0
  br i1 %tobool267, label %if.else.284, label %if.then.268

if.then.268:                                      ; preds = %land.lhs.true.261
  %217 = load %struct.sv*, %struct.sv** %nsv, align 8
  %tobool269 = icmp ne %struct.sv* %217, null
  br i1 %tobool269, label %if.else.276, label %if.then.270

if.then.270:                                      ; preds = %if.then.268
  %218 = load i8*, i8** %s, align 8
  %219 = load i8*, i8** %m, align 8
  %220 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast271 = ptrtoint i8* %219 to i64
  %sub.ptr.rhs.cast272 = ptrtoint i8* %220 to i64
  %sub.ptr.sub273 = sub i64 %sub.ptr.lhs.cast271, %sub.ptr.rhs.cast272
  %call274 = call %struct.sv* @Perl_newSVpvn(i8* %218, i64 %sub.ptr.sub273)
  %call275 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call274)
  store %struct.sv* %call275, %struct.sv** %nsv, align 8
  br label %if.end.280

if.else.276:                                      ; preds = %if.then.268
  %221 = load %struct.sv*, %struct.sv** %nsv, align 8
  %222 = load i8*, i8** %s, align 8
  %223 = load i8*, i8** %m, align 8
  %224 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast277 = ptrtoint i8* %223 to i64
  %sub.ptr.rhs.cast278 = ptrtoint i8* %224 to i64
  %sub.ptr.sub279 = sub i64 %sub.ptr.lhs.cast277, %sub.ptr.rhs.cast278
  call void @Perl_sv_setpvn(%struct.sv* %221, i8* %222, i64 %sub.ptr.sub279)
  br label %if.end.280

if.end.280:                                       ; preds = %if.else.276, %if.then.270
  %225 = load %struct.sv*, %struct.sv** %nsv, align 8
  %sv_flags281 = getelementptr inbounds %struct.sv, %struct.sv* %225, i32 0, i32 2
  %226 = load i32, i32* %sv_flags281, align 4
  %and282 = and i32 %226, -536870913
  store i32 %and282, i32* %sv_flags281, align 4
  %227 = load %struct.sv*, %struct.sv** %nsv, align 8
  %call283 = call i64 @Perl_sv_utf8_upgrade_flags(%struct.sv* %227, i32 2)
  %228 = load %struct.sv*, %struct.sv** %dstr, align 8
  %229 = load %struct.sv*, %struct.sv** %nsv, align 8
  call void @Perl_sv_catsv_flags(%struct.sv* %228, %struct.sv* %229, i32 2)
  br label %if.end.288

if.else.284:                                      ; preds = %land.lhs.true.261, %land.lhs.true.256, %if.then.252
  %230 = load %struct.sv*, %struct.sv** %dstr, align 8
  %231 = load i8*, i8** %s, align 8
  %232 = load i8*, i8** %m, align 8
  %233 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast285 = ptrtoint i8* %232 to i64
  %sub.ptr.rhs.cast286 = ptrtoint i8* %233 to i64
  %sub.ptr.sub287 = sub i64 %sub.ptr.lhs.cast285, %sub.ptr.rhs.cast286
  call void @Perl_sv_catpvn_flags(%struct.sv* %230, i8* %231, i64 %sub.ptr.sub287, i32 2)
  br label %if.end.288

if.end.288:                                       ; preds = %if.else.284, %if.end.280
  br label %if.end.289

if.end.289:                                       ; preds = %if.end.288, %if.end.244
  %234 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %endp = getelementptr inbounds %struct.regexp, %struct.regexp* %234, i32 0, i32 1
  %235 = load i32*, i32** %endp, align 8
  %arrayidx290 = getelementptr inbounds i32, i32* %235, i64 0
  %236 = load i32, i32* %arrayidx290, align 4
  %237 = load i8*, i8** %orig, align 8
  %idx.ext291 = sext i32 %236 to i64
  %add.ptr292 = getelementptr inbounds i8, i8* %237, i64 %idx.ext291
  %238 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u293 = getelementptr inbounds %struct.context, %struct.context* %238, i32 0, i32 1
  %cx_subst294 = bitcast %union.anon* %cx_u293 to %struct.subst*
  %sbu_s295 = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst294, i32 0, i32 9
  store i8* %add.ptr292, i8** %sbu_s295, align 8
  %239 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u297 = getelementptr inbounds %struct.context, %struct.context* %239, i32 0, i32 1
  %cx_subst298 = bitcast %union.anon* %cx_u297 to %struct.subst*
  %sbu_targ299 = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst298, i32 0, i32 8
  %240 = load %struct.sv*, %struct.sv** %sbu_targ299, align 8
  store %struct.sv* %240, %struct.sv** %sv, align 8
  %241 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags302 = getelementptr inbounds %struct.sv, %struct.sv* %241, i32 0, i32 2
  %242 = load i32, i32* %sv_flags302, align 4
  %and303 = and i32 %242, 255
  %cmp304 = icmp ult i32 %and303, 7
  br i1 %cmp304, label %if.then.306, label %if.end.314

if.then.306:                                      ; preds = %if.end.289
  %243 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags307 = getelementptr inbounds %struct.sv, %struct.sv* %243, i32 0, i32 2
  %244 = load i32, i32* %sv_flags307, align 4
  %and308 = and i32 %244, 255
  %cmp309 = icmp uge i32 %and308, 7
  br i1 %cmp309, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.then.306
  %245 = load %struct.sv*, %struct.sv** %sv, align 8
  %call311 = call signext i8 @Perl_sv_upgrade(%struct.sv* %245, i32 7)
  %conv312 = sext i8 %call311 to i32
  %tobool313 = icmp ne i32 %conv312, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.then.306
  %246 = phi i1 [ true, %if.then.306 ], [ %tobool313, %lor.rhs ]
  %lor.ext = zext i1 %246 to i32
  br label %if.end.314

if.end.314:                                       ; preds = %lor.end, %if.end.289
  %247 = load %struct.sv*, %struct.sv** %sv, align 8
  %call315 = call %struct.magic* @Perl_mg_find(%struct.sv* %247, i32 103)
  store %struct.magic* %call315, %struct.magic** %mg, align 8
  %tobool316 = icmp ne %struct.magic* %call315, null
  br i1 %tobool316, label %if.end.319, label %if.then.317

if.then.317:                                      ; preds = %if.end.314
  %248 = load %struct.sv*, %struct.sv** %sv, align 8
  call void @Perl_sv_magic(%struct.sv* %248, %struct.sv* null, i32 103, i8* null, i32 0)
  %249 = load %struct.sv*, %struct.sv** %sv, align 8
  %call318 = call %struct.magic* @Perl_mg_find(%struct.sv* %249, i32 103)
  store %struct.magic* %call318, %struct.magic** %mg, align 8
  br label %if.end.319

if.end.319:                                       ; preds = %if.then.317, %if.end.314
  %250 = load i8*, i8** %m, align 8
  %251 = load i8*, i8** %orig, align 8
  %sub.ptr.lhs.cast320 = ptrtoint i8* %250 to i64
  %sub.ptr.rhs.cast321 = ptrtoint i8* %251 to i64
  %sub.ptr.sub322 = sub i64 %sub.ptr.lhs.cast320, %sub.ptr.rhs.cast321
  %conv323 = trunc i64 %sub.ptr.sub322 to i32
  store i32 %conv323, i32* %i, align 4
  %252 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags324 = getelementptr inbounds %struct.sv, %struct.sv* %252, i32 0, i32 2
  %253 = load i32, i32* %sv_flags324, align 4
  %and325 = and i32 %253, 536870912
  %tobool326 = icmp ne i32 %and325, 0
  br i1 %tobool326, label %land.lhs.true.327, label %if.end.333

land.lhs.true.327:                                ; preds = %if.end.319
  %254 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %op_private328 = getelementptr inbounds %struct.cop, %struct.cop* %254, i32 0, i32 7
  %255 = load i8, i8* %op_private328, align 1
  %conv329 = zext i8 %255 to i32
  %and330 = and i32 %conv329, 8
  %tobool331 = icmp ne i32 %and330, 0
  br i1 %tobool331, label %if.end.333, label %if.then.332

if.then.332:                                      ; preds = %land.lhs.true.327
  %256 = load %struct.sv*, %struct.sv** %sv, align 8
  call void @Perl_sv_pos_b2u(%struct.sv* %256, i32* %i)
  br label %if.end.333

if.end.333:                                       ; preds = %if.then.332, %land.lhs.true.327, %if.end.319
  %257 = load i32, i32* %i, align 4
  %258 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_len = getelementptr inbounds %struct.magic, %struct.magic* %258, i32 0, i32 7
  store i32 %257, i32* %mg_len, align 4
  %259 = load %struct.regexp*, %struct.regexp** %old, align 8
  %260 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %cmp334 = icmp ne %struct.regexp* %259, %260
  br i1 %cmp334, label %if.then.336, label %if.end.343

if.then.336:                                      ; preds = %if.end.333
  %261 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %tobool337 = icmp ne %struct.regexp* %261, null
  br i1 %tobool337, label %land.rhs.338, label %land.end.341

land.rhs.338:                                     ; preds = %if.then.336
  %262 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %refcnt = getelementptr inbounds %struct.regexp, %struct.regexp* %262, i32 0, i32 9
  %263 = load i32, i32* %refcnt, align 4
  %inc339 = add nsw i32 %263, 1
  store i32 %inc339, i32* %refcnt, align 4
  %tobool340 = icmp ne i32 %263, 0
  br label %land.end.341

land.end.341:                                     ; preds = %land.rhs.338, %if.then.336
  %264 = phi i1 [ false, %if.then.336 ], [ %tobool340, %land.rhs.338 ]
  %land.ext342 = zext i1 %264 to i32
  %265 = load %struct.regexp*, %struct.regexp** %rx, align 8
  br label %if.end.343

if.end.343:                                       ; preds = %land.end.341, %if.end.333
  %266 = load %struct.regexp*, %struct.regexp** %rx, align 8
  %reganch344 = getelementptr inbounds %struct.regexp, %struct.regexp* %266, i32 0, i32 15
  %267 = load i32, i32* %reganch344, align 4
  %and345 = and i32 %267, 524288
  %268 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u346 = getelementptr inbounds %struct.context, %struct.context* %268, i32 0, i32 1
  %cx_subst347 = bitcast %union.anon* %cx_u346 to %struct.subst*
  %sbu_rxtainted348 = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst347, i32 0, i32 5
  %269 = load i8, i8* %sbu_rxtainted348, align 1
  %conv349 = sext i8 %269 to i32
  %or350 = or i32 %conv349, %and345
  %conv351 = trunc i32 %or350 to i8
  store i8 %conv351, i8* %sbu_rxtainted348, align 1
  %270 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u352 = getelementptr inbounds %struct.context, %struct.context* %270, i32 0, i32 1
  %cx_subst353 = bitcast %union.anon* %cx_u352 to %struct.subst*
  %sbu_rxres354 = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst353, i32 0, i32 12
  %271 = load %struct.regexp*, %struct.regexp** %rx, align 8
  call void @Perl_rxres_save(i8** %sbu_rxres354, %struct.regexp* %271)
  %272 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %272, %struct.sv*** @PL_stack_sp, align 8
  %273 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmreplstart = getelementptr inbounds %struct.pmop, %struct.pmop* %273, i32 0, i32 11
  %274 = load %struct.op*, %struct.op** %op_pmreplstart, align 8
  store %struct.op* %274, %struct.op** %retval
  br label %return

return:                                           ; preds = %if.end.343, %if.end.207, %if.then.32
  %275 = load %struct.op*, %struct.op** %retval
  ret %struct.op* %275
}

; Function Attrs: nounwind uwtable
define void @Perl_rxres_restore(i8** %rsp, %struct.regexp* %rx) #0 {
entry:
  %rsp.addr = alloca i8**, align 8
  %rx.addr = alloca %struct.regexp*, align 8
  %p = alloca i64*, align 8
  %i = alloca i32, align 4
  store i8** %rsp, i8*** %rsp.addr, align 8
  store %struct.regexp* %rx, %struct.regexp** %rx.addr, align 8
  %0 = load i8**, i8*** %rsp.addr, align 8
  %1 = load i8*, i8** %0, align 8
  %2 = bitcast i8* %1 to i64*
  store i64* %2, i64** %p, align 8
  %3 = load %struct.regexp*, %struct.regexp** %rx.addr, align 8
  %reganch = getelementptr inbounds %struct.regexp, %struct.regexp* %3, i32 0, i32 15
  %4 = load i32, i32* %reganch, align 4
  %and = and i32 %4, 262144
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.regexp*, %struct.regexp** %rx.addr, align 8
  %subbeg = getelementptr inbounds %struct.regexp, %struct.regexp* %5, i32 0, i32 6
  %6 = load i8*, i8** %subbeg, align 8
  call void @Perl_safesysfree(i8* %6)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load i64*, i64** %p, align 8
  %8 = load i64, i64* %7, align 8
  %tobool1 = icmp ne i64 %8, 0
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %9 = load %struct.regexp*, %struct.regexp** %rx.addr, align 8
  %reganch2 = getelementptr inbounds %struct.regexp, %struct.regexp* %9, i32 0, i32 15
  %10 = load i32, i32* %reganch2, align 4
  %or = or i32 %10, 262144
  store i32 %or, i32* %reganch2, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %11 = load %struct.regexp*, %struct.regexp** %rx.addr, align 8
  %reganch3 = getelementptr inbounds %struct.regexp, %struct.regexp* %11, i32 0, i32 15
  %12 = load i32, i32* %reganch3, align 4
  %and4 = and i32 %12, -262145
  store i32 %and4, i32* %reganch3, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %or, %cond.true ], [ %and4, %cond.false ]
  %13 = load i64*, i64** %p, align 8
  %incdec.ptr = getelementptr inbounds i64, i64* %13, i32 1
  store i64* %incdec.ptr, i64** %p, align 8
  store i64 0, i64* %13, align 8
  %14 = load i64*, i64** %p, align 8
  %incdec.ptr5 = getelementptr inbounds i64, i64* %14, i32 1
  store i64* %incdec.ptr5, i64** %p, align 8
  %15 = load i64, i64* %14, align 8
  %conv = trunc i64 %15 to i32
  %16 = load %struct.regexp*, %struct.regexp** %rx.addr, align 8
  %nparens = getelementptr inbounds %struct.regexp, %struct.regexp* %16, i32 0, i32 12
  store i32 %conv, i32* %nparens, align 4
  %17 = load i64*, i64** %p, align 8
  %incdec.ptr6 = getelementptr inbounds i64, i64* %17, i32 1
  store i64* %incdec.ptr6, i64** %p, align 8
  %18 = load i64, i64* %17, align 8
  %19 = inttoptr i64 %18 to i8*
  %20 = load %struct.regexp*, %struct.regexp** %rx.addr, align 8
  %subbeg7 = getelementptr inbounds %struct.regexp, %struct.regexp* %20, i32 0, i32 6
  store i8* %19, i8** %subbeg7, align 8
  %21 = load i64*, i64** %p, align 8
  %incdec.ptr8 = getelementptr inbounds i64, i64* %21, i32 1
  store i64* %incdec.ptr8, i64** %p, align 8
  %22 = load i64, i64* %21, align 8
  %conv9 = trunc i64 %22 to i32
  %23 = load %struct.regexp*, %struct.regexp** %rx.addr, align 8
  %sublen = getelementptr inbounds %struct.regexp, %struct.regexp* %23, i32 0, i32 8
  store i32 %conv9, i32* %sublen, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %cond.end
  %24 = load i32, i32* %i, align 4
  %25 = load %struct.regexp*, %struct.regexp** %rx.addr, align 8
  %nparens10 = getelementptr inbounds %struct.regexp, %struct.regexp* %25, i32 0, i32 12
  %26 = load i32, i32* %nparens10, align 4
  %cmp = icmp ule i32 %24, %26
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %27 = load i64*, i64** %p, align 8
  %incdec.ptr12 = getelementptr inbounds i64, i64* %27, i32 1
  store i64* %incdec.ptr12, i64** %p, align 8
  %28 = load i64, i64* %27, align 8
  %conv13 = trunc i64 %28 to i32
  %29 = load i32, i32* %i, align 4
  %idxprom = zext i32 %29 to i64
  %30 = load %struct.regexp*, %struct.regexp** %rx.addr, align 8
  %startp = getelementptr inbounds %struct.regexp, %struct.regexp* %30, i32 0, i32 0
  %31 = load i32*, i32** %startp, align 8
  %arrayidx = getelementptr inbounds i32, i32* %31, i64 %idxprom
  store i32 %conv13, i32* %arrayidx, align 4
  %32 = load i64*, i64** %p, align 8
  %incdec.ptr14 = getelementptr inbounds i64, i64* %32, i32 1
  store i64* %incdec.ptr14, i64** %p, align 8
  %33 = load i64, i64* %32, align 8
  %conv15 = trunc i64 %33 to i32
  %34 = load i32, i32* %i, align 4
  %idxprom16 = zext i32 %34 to i64
  %35 = load %struct.regexp*, %struct.regexp** %rx.addr, align 8
  %endp = getelementptr inbounds %struct.regexp, %struct.regexp* %35, i32 0, i32 1
  %36 = load i32*, i32** %endp, align 8
  %arrayidx17 = getelementptr inbounds i32, i32* %36, i64 %idxprom16
  store i32 %conv15, i32* %arrayidx17, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %37 = load i32, i32* %i, align 4
  %inc = add i32 %37, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare %struct.op* @Perl_die(i8*, ...) #1

declare signext i8 @Perl_sv_tainted(%struct.sv*) #1

declare void @Perl_sv_catsv_flags(%struct.sv*, %struct.sv*, i32) #1

declare %struct.sv* @Perl_sv_2mortal(%struct.sv*) #1

declare %struct.sv* @Perl_newSVpvn(i8*, i64) #1

declare void @Perl_sv_setpvn(%struct.sv*, i8*, i64) #1

declare i64 @Perl_sv_utf8_upgrade_flags(%struct.sv*, i32) #1

declare void @Perl_sv_catpvn_flags(%struct.sv*, i8*, i64, i32) #1

declare i32 @Perl_sv_backoff(%struct.sv*) #1

declare void @Perl_sv_free(%struct.sv*) #1

declare %struct.sv* @Perl_newSViv(i64) #1

declare i32 @Perl_mg_set(%struct.sv*) #1

declare void @Perl_sv_taint(%struct.sv*) #1

declare void @Perl_leave_scope(i32) #1

; Function Attrs: nounwind uwtable
define void @Perl_rxres_free(i8** %rsp) #0 {
entry:
  %rsp.addr = alloca i8**, align 8
  %p = alloca i64*, align 8
  store i8** %rsp, i8*** %rsp.addr, align 8
  %0 = load i8**, i8*** %rsp.addr, align 8
  %1 = load i8*, i8** %0, align 8
  %2 = bitcast i8* %1 to i64*
  store i64* %2, i64** %p, align 8
  %3 = load i64*, i64** %p, align 8
  %tobool = icmp ne i64* %3, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load i64*, i64** %p, align 8
  %5 = load i64, i64* %4, align 8
  %6 = inttoptr i64 %5 to i8*
  call void @Perl_safesysfree(i8* %6)
  %7 = load i64*, i64** %p, align 8
  %8 = bitcast i64* %7 to i8*
  call void @Perl_safesysfree(i8* %8)
  %9 = load i8**, i8*** %rsp.addr, align 8
  store i8* null, i8** %9, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare signext i8 @Perl_sv_upgrade(%struct.sv*, i32) #1

declare void @Perl_sv_magic(%struct.sv*, %struct.sv*, i32, i8*, i32) #1

declare void @Perl_sv_pos_b2u(%struct.sv*, i32*) #1

; Function Attrs: nounwind uwtable
define void @Perl_rxres_save(i8** %rsp, %struct.regexp* %rx) #0 {
entry:
  %rsp.addr = alloca i8**, align 8
  %rx.addr = alloca %struct.regexp*, align 8
  %p = alloca i64*, align 8
  %i = alloca i32, align 4
  store i8** %rsp, i8*** %rsp.addr, align 8
  store %struct.regexp* %rx, %struct.regexp** %rx.addr, align 8
  %0 = load i8**, i8*** %rsp.addr, align 8
  %1 = load i8*, i8** %0, align 8
  %2 = bitcast i8* %1 to i64*
  store i64* %2, i64** %p, align 8
  %3 = load i64*, i64** %p, align 8
  %tobool = icmp ne i64* %3, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %4 = load i64*, i64** %p, align 8
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 1
  %5 = load i64, i64* %arrayidx, align 8
  %6 = load %struct.regexp*, %struct.regexp** %rx.addr, align 8
  %nparens = getelementptr inbounds %struct.regexp, %struct.regexp* %6, i32 0, i32 12
  %7 = load i32, i32* %nparens, align 4
  %conv = zext i32 %7 to i64
  %cmp = icmp ult i64 %5, %conv
  br i1 %cmp, label %if.then, label %if.end.10

if.then:                                          ; preds = %lor.lhs.false, %entry
  %8 = load %struct.regexp*, %struct.regexp** %rx.addr, align 8
  %nparens2 = getelementptr inbounds %struct.regexp, %struct.regexp* %8, i32 0, i32 12
  %9 = load i32, i32* %nparens2, align 4
  %mul = mul i32 %9, 2
  %add = add i32 6, %mul
  store i32 %add, i32* %i, align 4
  %10 = load i64*, i64** %p, align 8
  %tobool3 = icmp ne i64* %10, null
  br i1 %tobool3, label %if.else, label %if.then.4

if.then.4:                                        ; preds = %if.then
  %11 = load i32, i32* %i, align 4
  %conv5 = zext i32 %11 to i64
  %mul6 = mul i64 %conv5, 8
  %call = call i8* @Perl_safesysmalloc(i64 %mul6)
  %12 = bitcast i8* %call to i64*
  store i64* %12, i64** %p, align 8
  br label %if.end

if.else:                                          ; preds = %if.then
  %13 = load i64*, i64** %p, align 8
  %14 = bitcast i64* %13 to i8*
  %15 = load i32, i32* %i, align 4
  %conv7 = zext i32 %15 to i64
  %mul8 = mul i64 %conv7, 8
  %call9 = call i8* @Perl_safesysrealloc(i8* %14, i64 %mul8)
  %16 = bitcast i8* %call9 to i64*
  store i64* %16, i64** %p, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.4
  %17 = load i64*, i64** %p, align 8
  %18 = bitcast i64* %17 to i8*
  %19 = load i8**, i8*** %rsp.addr, align 8
  store i8* %18, i8** %19, align 8
  br label %if.end.10

if.end.10:                                        ; preds = %if.end, %lor.lhs.false
  %20 = load %struct.regexp*, %struct.regexp** %rx.addr, align 8
  %reganch = getelementptr inbounds %struct.regexp, %struct.regexp* %20, i32 0, i32 15
  %21 = load i32, i32* %reganch, align 4
  %and = and i32 %21, 262144
  %tobool11 = icmp ne i32 %and, 0
  br i1 %tobool11, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.10
  %22 = load %struct.regexp*, %struct.regexp** %rx.addr, align 8
  %subbeg = getelementptr inbounds %struct.regexp, %struct.regexp* %22, i32 0, i32 6
  %23 = load i8*, i8** %subbeg, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end.10
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %23, %cond.true ], [ null, %cond.false ]
  %24 = ptrtoint i8* %cond to i64
  %25 = load i64*, i64** %p, align 8
  %incdec.ptr = getelementptr inbounds i64, i64* %25, i32 1
  store i64* %incdec.ptr, i64** %p, align 8
  store i64 %24, i64* %25, align 8
  %26 = load %struct.regexp*, %struct.regexp** %rx.addr, align 8
  %reganch12 = getelementptr inbounds %struct.regexp, %struct.regexp* %26, i32 0, i32 15
  %27 = load i32, i32* %reganch12, align 4
  %and13 = and i32 %27, -262145
  store i32 %and13, i32* %reganch12, align 4
  %28 = load %struct.regexp*, %struct.regexp** %rx.addr, align 8
  %nparens14 = getelementptr inbounds %struct.regexp, %struct.regexp* %28, i32 0, i32 12
  %29 = load i32, i32* %nparens14, align 4
  %conv15 = zext i32 %29 to i64
  %30 = load i64*, i64** %p, align 8
  %incdec.ptr16 = getelementptr inbounds i64, i64* %30, i32 1
  store i64* %incdec.ptr16, i64** %p, align 8
  store i64 %conv15, i64* %30, align 8
  %31 = load %struct.regexp*, %struct.regexp** %rx.addr, align 8
  %subbeg17 = getelementptr inbounds %struct.regexp, %struct.regexp* %31, i32 0, i32 6
  %32 = load i8*, i8** %subbeg17, align 8
  %33 = ptrtoint i8* %32 to i64
  %34 = load i64*, i64** %p, align 8
  %incdec.ptr18 = getelementptr inbounds i64, i64* %34, i32 1
  store i64* %incdec.ptr18, i64** %p, align 8
  store i64 %33, i64* %34, align 8
  %35 = load %struct.regexp*, %struct.regexp** %rx.addr, align 8
  %sublen = getelementptr inbounds %struct.regexp, %struct.regexp* %35, i32 0, i32 8
  %36 = load i32, i32* %sublen, align 4
  %conv19 = sext i32 %36 to i64
  %37 = load i64*, i64** %p, align 8
  %incdec.ptr20 = getelementptr inbounds i64, i64* %37, i32 1
  store i64* %incdec.ptr20, i64** %p, align 8
  store i64 %conv19, i64* %37, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %cond.end
  %38 = load i32, i32* %i, align 4
  %39 = load %struct.regexp*, %struct.regexp** %rx.addr, align 8
  %nparens21 = getelementptr inbounds %struct.regexp, %struct.regexp* %39, i32 0, i32 12
  %40 = load i32, i32* %nparens21, align 4
  %cmp22 = icmp ule i32 %38, %40
  br i1 %cmp22, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %41 = load i32, i32* %i, align 4
  %idxprom = zext i32 %41 to i64
  %42 = load %struct.regexp*, %struct.regexp** %rx.addr, align 8
  %startp = getelementptr inbounds %struct.regexp, %struct.regexp* %42, i32 0, i32 0
  %43 = load i32*, i32** %startp, align 8
  %arrayidx24 = getelementptr inbounds i32, i32* %43, i64 %idxprom
  %44 = load i32, i32* %arrayidx24, align 4
  %conv25 = sext i32 %44 to i64
  %45 = load i64*, i64** %p, align 8
  %incdec.ptr26 = getelementptr inbounds i64, i64* %45, i32 1
  store i64* %incdec.ptr26, i64** %p, align 8
  store i64 %conv25, i64* %45, align 8
  %46 = load i32, i32* %i, align 4
  %idxprom27 = zext i32 %46 to i64
  %47 = load %struct.regexp*, %struct.regexp** %rx.addr, align 8
  %endp = getelementptr inbounds %struct.regexp, %struct.regexp* %47, i32 0, i32 1
  %48 = load i32*, i32** %endp, align 8
  %arrayidx28 = getelementptr inbounds i32, i32* %48, i64 %idxprom27
  %49 = load i32, i32* %arrayidx28, align 4
  %conv29 = sext i32 %49 to i64
  %50 = load i64*, i64** %p, align 8
  %incdec.ptr30 = getelementptr inbounds i64, i64* %50, i32 1
  store i64* %incdec.ptr30, i64** %p, align 8
  store i64 %conv29, i64* %50, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %51 = load i32, i32* %i, align 4
  %inc = add i32 %51, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare i8* @Perl_safesysmalloc(i64) #1

declare i8* @Perl_safesysrealloc(i8*, i64) #1

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_formline() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %mark = alloca %struct.sv**, align 8
  %origmark = alloca i32, align 4
  %tmpForm = alloca %struct.sv*, align 8
  %fpc = alloca i32*, align 8
  %t = alloca i8*, align 8
  %f = alloca i8*, align 8
  %s = alloca i8*, align 8
  %send = alloca i8*, align 8
  %arg = alloca i32, align 4
  %sv = alloca %struct.sv*, align 8
  %item = alloca i8*, align 8
  %itemsize = alloca i32, align 4
  %fieldsize = alloca i32, align 4
  %lines = alloca i32, align 4
  %chopspace = alloca i8, align 1
  %chophere = alloca i8*, align 8
  %linemark = alloca i8*, align 8
  %value = alloca double, align 8
  %gotsome = alloca i8, align 1
  %len = alloca i64, align 8
  %fudge = alloca i64, align 8
  %item_is_utf8 = alloca i8, align 1
  %targ_is_utf8 = alloca i8, align 1
  %nsv = alloca %struct.sv*, align 8
  %parseres = alloca %struct.op*, align 8
  %fmt = alloca i8*, align 8
  %oneline = alloca i8, align 1
  %tmp = alloca i64, align 8
  %tmp127 = alloca i64, align 8
  %itembytes = alloca i32, align 4
  %itembytes325 = alloca i32, align 4
  %tmp566 = alloca i64, align 8
  %skip = alloca i64, align 8
  %tmp652 = alloca i64, align 8
  %chopped = alloca i8, align 1
  %tmp796 = alloca i64, align 8
  %tmp811 = alloca i64, align 8
  %tmp817 = alloca i64, align 8
  %tmp825 = alloca i64, align 8
  %tmp929 = alloca i64, align 8
  %tmp1069 = alloca i64, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %2 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %2, i32 -1
  store i32* %incdec.ptr, i32** @PL_markstack_ptr, align 8
  %3 = load i32, i32* %2, align 4
  %idx.ext = sext i32 %3 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %idx.ext
  store %struct.sv** %add.ptr, %struct.sv*** %mark, align 8
  %4 = load %struct.sv**, %struct.sv*** %mark, align 8
  %5 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %4 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %5 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %conv = trunc i64 %sub.ptr.div to i32
  store i32 %conv, i32* %origmark, align 4
  %6 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr1 = getelementptr inbounds %struct.sv*, %struct.sv** %6, i32 1
  store %struct.sv** %incdec.ptr1, %struct.sv*** %mark, align 8
  %7 = load %struct.sv*, %struct.sv** %incdec.ptr1, align 8
  store %struct.sv* %7, %struct.sv** %tmpForm, align 8
  store %struct.sv* null, %struct.sv** %sv, align 8
  store i8* null, i8** %item, align 8
  store i32 0, i32* %itemsize, align 4
  store i32 0, i32* %fieldsize, align 4
  store i32 0, i32* %lines, align 4
  %8 = load i8*, i8** @PL_chopset, align 8
  %call = call i8* @strchr(i8* %8, i32 32)
  %cmp = icmp ne i8* %call, null
  %conv2 = zext i1 %cmp to i32
  %conv3 = trunc i32 %conv2 to i8
  store i8 %conv3, i8* %chopspace, align 1
  store i8* null, i8** %chophere, align 8
  store i8* null, i8** %linemark, align 8
  store i8 0, i8* %gotsome, align 1
  %9 = load %struct.sv*, %struct.sv** %tmpForm, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 2
  %10 = load i32, i32* %sv_flags, align 4
  %and = and i32 %10, 262144
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %11 = load %struct.sv*, %struct.sv** %tmpForm, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 0
  %12 = load i8*, i8** %sv_any, align 8
  %13 = bitcast i8* %12 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %13, i32 0, i32 1
  %14 = load i64, i64* %xpv_cur, align 8
  %15 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %op_private = getelementptr inbounds %struct.cop, %struct.cop* %15, i32 0, i32 7
  %16 = load i8, i8* %op_private, align 1
  %conv4 = zext i8 %16 to i32
  %and5 = and i32 %conv4, 8
  %tobool6 = icmp ne i32 %and5, 0
  %cond = select i1 %tobool6, i32 1, i32 3
  %conv7 = sext i32 %cond to i64
  %mul = mul i64 %14, %conv7
  %add = add i64 %mul, 1
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond8 = phi i64 [ %add, %cond.true ], [ 0, %cond.false ]
  store i64 %cond8, i64* %fudge, align 8
  store i8 0, i8* %item_is_utf8, align 1
  store i8 0, i8* %targ_is_utf8, align 1
  store %struct.sv* null, %struct.sv** %nsv, align 8
  store %struct.op* null, %struct.op** %parseres, align 8
  %17 = load %struct.sv*, %struct.sv** %tmpForm, align 8
  %sv_flags9 = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 2
  %18 = load i32, i32* %sv_flags9, align 4
  %and10 = and i32 %18, 57344
  %tobool11 = icmp ne i32 %and10, 0
  br i1 %tobool11, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %cond.end
  %19 = load %struct.sv*, %struct.sv** %tmpForm, align 8
  %sv_flags12 = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 2
  %20 = load i32, i32* %sv_flags12, align 4
  %and13 = and i32 %20, -2147483648
  %tobool14 = icmp ne i32 %and13, 0
  br i1 %tobool14, label %if.end.27, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %cond.end
  %21 = load %struct.sv*, %struct.sv** %tmpForm, align 8
  %sv_flags15 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 2
  %22 = load i32, i32* %sv_flags15, align 4
  %and16 = and i32 %22, 8388608
  %tobool17 = icmp ne i32 %and16, 0
  br i1 %tobool17, label %if.then.18, label %if.else

if.then.18:                                       ; preds = %if.then
  %23 = load %struct.sv*, %struct.sv** %tmpForm, align 8
  %sv_flags19 = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 2
  %24 = load i32, i32* %sv_flags19, align 4
  %and20 = and i32 %24, -8388609
  store i32 %and20, i32* %sv_flags19, align 4
  %25 = load %struct.sv*, %struct.sv** %tmpForm, align 8
  %call21 = call %struct.op* @S_doparseform(%struct.sv* %25)
  store %struct.op* %call21, %struct.op** %parseres, align 8
  %26 = load %struct.sv*, %struct.sv** %tmpForm, align 8
  %sv_flags22 = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 2
  %27 = load i32, i32* %sv_flags22, align 4
  %or = or i32 %27, 8388608
  store i32 %or, i32* %sv_flags22, align 4
  br label %if.end

if.else:                                          ; preds = %if.then
  %28 = load %struct.sv*, %struct.sv** %tmpForm, align 8
  %call23 = call %struct.op* @S_doparseform(%struct.sv* %28)
  store %struct.op* %call23, %struct.op** %parseres, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.18
  %29 = load %struct.op*, %struct.op** %parseres, align 8
  %tobool24 = icmp ne %struct.op* %29, null
  br i1 %tobool24, label %if.then.25, label %if.end.26

if.then.25:                                       ; preds = %if.end
  %30 = load %struct.op*, %struct.op** %parseres, align 8
  store %struct.op* %30, %struct.op** %retval
  br label %return

if.end.26:                                        ; preds = %if.end
  br label %if.end.27

if.end.27:                                        ; preds = %if.end.26, %lor.lhs.false
  %31 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %sv_flags28 = getelementptr inbounds %struct.sv, %struct.sv* %31, i32 0, i32 2
  %32 = load i32, i32* %sv_flags28, align 4
  %and29 = and i32 %32, 10223616
  %cmp30 = icmp eq i32 %and29, 262144
  br i1 %cmp30, label %cond.true.32, label %cond.false.36

cond.true.32:                                     ; preds = %if.end.27
  %33 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %sv_any33 = getelementptr inbounds %struct.sv, %struct.sv* %33, i32 0, i32 0
  %34 = load i8*, i8** %sv_any33, align 8
  %35 = bitcast i8* %34 to %struct.xpv*
  %xpv_cur34 = getelementptr inbounds %struct.xpv, %struct.xpv* %35, i32 0, i32 1
  %36 = load i64, i64* %xpv_cur34, align 8
  store i64 %36, i64* %len, align 8
  %37 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %sv_any35 = getelementptr inbounds %struct.sv, %struct.sv* %37, i32 0, i32 0
  %38 = load i8*, i8** %sv_any35, align 8
  %39 = bitcast i8* %38 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %39, i32 0, i32 0
  %40 = load i8*, i8** %xpv_pv, align 8
  br label %cond.end.38

cond.false.36:                                    ; preds = %if.end.27
  %41 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %call37 = call i8* @Perl_sv_pvn_force_flags(%struct.sv* %41, i64* %len, i32 2)
  br label %cond.end.38

cond.end.38:                                      ; preds = %cond.false.36, %cond.true.32
  %cond39 = phi i8* [ %40, %cond.true.32 ], [ %call37, %cond.false.36 ]
  %42 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %sv_flags40 = getelementptr inbounds %struct.sv, %struct.sv* %42, i32 0, i32 2
  %43 = load i32, i32* %sv_flags40, align 4
  %and41 = and i32 %43, 536870912
  %tobool42 = icmp ne i32 %and41, 0
  br i1 %tobool42, label %land.lhs.true, label %if.end.48

land.lhs.true:                                    ; preds = %cond.end.38
  %44 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %op_private43 = getelementptr inbounds %struct.cop, %struct.cop* %44, i32 0, i32 7
  %45 = load i8, i8* %op_private43, align 1
  %conv44 = zext i8 %45 to i32
  %and45 = and i32 %conv44, 8
  %tobool46 = icmp ne i32 %and45, 0
  br i1 %tobool46, label %if.end.48, label %if.then.47

if.then.47:                                       ; preds = %land.lhs.true
  store i8 1, i8* %targ_is_utf8, align 1
  br label %if.end.48

if.end.48:                                        ; preds = %if.then.47, %land.lhs.true, %cond.end.38
  %46 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %sv_any49 = getelementptr inbounds %struct.sv, %struct.sv* %46, i32 0, i32 0
  %47 = load i8*, i8** %sv_any49, align 8
  %48 = bitcast i8* %47 to %struct.xpv*
  %xpv_len = getelementptr inbounds %struct.xpv, %struct.xpv* %48, i32 0, i32 2
  %49 = load i64, i64* %xpv_len, align 8
  %50 = load i64, i64* %len, align 8
  %51 = load i64, i64* %fudge, align 8
  %add50 = add i64 %50, %51
  %add51 = add i64 %add50, 1
  %cmp52 = icmp ult i64 %49, %add51
  br i1 %cmp52, label %cond.true.54, label %cond.false.58

cond.true.54:                                     ; preds = %if.end.48
  %52 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %53 = load i64, i64* %len, align 8
  %54 = load i64, i64* %fudge, align 8
  %add55 = add i64 %53, %54
  %add56 = add i64 %add55, 1
  %call57 = call i8* @Perl_sv_grow(%struct.sv* %52, i64 %add56)
  br label %cond.end.61

cond.false.58:                                    ; preds = %if.end.48
  %55 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %sv_any59 = getelementptr inbounds %struct.sv, %struct.sv* %55, i32 0, i32 0
  %56 = load i8*, i8** %sv_any59, align 8
  %57 = bitcast i8* %56 to %struct.xpv*
  %xpv_pv60 = getelementptr inbounds %struct.xpv, %struct.xpv* %57, i32 0, i32 0
  %58 = load i8*, i8** %xpv_pv60, align 8
  br label %cond.end.61

cond.end.61:                                      ; preds = %cond.false.58, %cond.true.54
  %cond62 = phi i8* [ %call57, %cond.true.54 ], [ %58, %cond.false.58 ]
  store i8* %cond62, i8** %t, align 8
  %59 = load i64, i64* %len, align 8
  %60 = load i8*, i8** %t, align 8
  %add.ptr63 = getelementptr inbounds i8, i8* %60, i64 %59
  store i8* %add.ptr63, i8** %t, align 8
  %61 = load %struct.sv*, %struct.sv** %tmpForm, align 8
  %sv_flags64 = getelementptr inbounds %struct.sv, %struct.sv* %61, i32 0, i32 2
  %62 = load i32, i32* %sv_flags64, align 4
  %and65 = and i32 %62, 262144
  %cmp66 = icmp eq i32 %and65, 262144
  br i1 %cmp66, label %cond.true.68, label %cond.false.73

cond.true.68:                                     ; preds = %cond.end.61
  %63 = load %struct.sv*, %struct.sv** %tmpForm, align 8
  %sv_any69 = getelementptr inbounds %struct.sv, %struct.sv* %63, i32 0, i32 0
  %64 = load i8*, i8** %sv_any69, align 8
  %65 = bitcast i8* %64 to %struct.xpv*
  %xpv_cur70 = getelementptr inbounds %struct.xpv, %struct.xpv* %65, i32 0, i32 1
  %66 = load i64, i64* %xpv_cur70, align 8
  store i64 %66, i64* %len, align 8
  %67 = load %struct.sv*, %struct.sv** %tmpForm, align 8
  %sv_any71 = getelementptr inbounds %struct.sv, %struct.sv* %67, i32 0, i32 0
  %68 = load i8*, i8** %sv_any71, align 8
  %69 = bitcast i8* %68 to %struct.xpv*
  %xpv_pv72 = getelementptr inbounds %struct.xpv, %struct.xpv* %69, i32 0, i32 0
  %70 = load i8*, i8** %xpv_pv72, align 8
  br label %cond.end.75

cond.false.73:                                    ; preds = %cond.end.61
  %71 = load %struct.sv*, %struct.sv** %tmpForm, align 8
  %call74 = call i8* @Perl_sv_2pv_flags(%struct.sv* %71, i64* %len, i32 2)
  br label %cond.end.75

cond.end.75:                                      ; preds = %cond.false.73, %cond.true.68
  %cond76 = phi i8* [ %70, %cond.true.68 ], [ %call74, %cond.false.73 ]
  store i8* %cond76, i8** %f, align 8
  %72 = load i8*, i8** %f, align 8
  %73 = load i64, i64* %len, align 8
  %add.ptr77 = getelementptr inbounds i8, i8* %72, i64 %73
  %add.ptr78 = getelementptr inbounds i8, i8* %add.ptr77, i64 4
  %74 = load %struct.sv*, %struct.sv** %tmpForm, align 8
  %sv_any79 = getelementptr inbounds %struct.sv, %struct.sv* %74, i32 0, i32 0
  %75 = load i8*, i8** %sv_any79, align 8
  %76 = bitcast i8* %75 to %struct.xpv*
  %xpv_cur80 = getelementptr inbounds %struct.xpv, %struct.xpv* %76, i32 0, i32 1
  %77 = load i64, i64* %xpv_cur80, align 8
  %rem = urem i64 %77, 4
  %idx.neg = sub i64 0, %rem
  %add.ptr81 = getelementptr inbounds i8, i8* %add.ptr78, i64 %idx.neg
  store i8* %add.ptr81, i8** %s, align 8
  %78 = load i8*, i8** %s, align 8
  %79 = bitcast i8* %78 to i32*
  store i32* %79, i32** %fpc, align 8
  br label %for.cond

for.cond:                                         ; preds = %sw.epilog.1089, %cond.end.75
  %80 = load i32*, i32** %fpc, align 8
  %incdec.ptr82 = getelementptr inbounds i32, i32* %80, i32 1
  store i32* %incdec.ptr82, i32** %fpc, align 8
  %81 = load i32, i32* %80, align 4
  switch i32 %81, label %sw.epilog.1089 [
    i32 1, label %sw.bb
    i32 2, label %sw.bb.83
    i32 3, label %sw.bb.164
    i32 4, label %sw.bb.168
    i32 5, label %sw.bb.205
    i32 6, label %sw.bb.294
    i32 7, label %sw.bb.536
    i32 8, label %sw.bb.548
    i32 9, label %sw.bb.561
    i32 10, label %sw.bb.699
    i32 17, label %sw.bb.737
    i32 11, label %sw.bb.738
    i32 16, label %sw.bb.860
    i32 12, label %sw.bb.865
    i32 13, label %sw.bb.907
    i32 14, label %sw.bb.923
    i32 15, label %sw.bb.972
    i32 0, label %sw.bb.1068
  ]

sw.bb:                                            ; preds = %for.cond
  %82 = load i8*, i8** %t, align 8
  store i8* %82, i8** %linemark, align 8
  %83 = load i32, i32* %lines, align 4
  %inc = add nsw i32 %83, 1
  store i32 %inc, i32* %lines, align 4
  store i8 0, i8* %gotsome, align 1
  br label %sw.epilog.1089

sw.bb.83:                                         ; preds = %for.cond
  %84 = load i32*, i32** %fpc, align 8
  %incdec.ptr84 = getelementptr inbounds i32, i32* %84, i32 1
  store i32* %incdec.ptr84, i32** %fpc, align 8
  %85 = load i32, i32* %84, align 4
  store i32 %85, i32* %arg, align 4
  %86 = load i8, i8* %targ_is_utf8, align 1
  %conv85 = sext i8 %86 to i32
  %tobool86 = icmp ne i32 %conv85, 0
  br i1 %tobool86, label %land.lhs.true.87, label %if.end.115

land.lhs.true.87:                                 ; preds = %sw.bb.83
  %87 = load %struct.sv*, %struct.sv** %tmpForm, align 8
  %sv_flags88 = getelementptr inbounds %struct.sv, %struct.sv* %87, i32 0, i32 2
  %88 = load i32, i32* %sv_flags88, align 4
  %and89 = and i32 %88, 536870912
  %tobool90 = icmp ne i32 %and89, 0
  br i1 %tobool90, label %if.end.115, label %if.then.91

if.then.91:                                       ; preds = %land.lhs.true.87
  %89 = load i8*, i8** %t, align 8
  %90 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %sv_any92 = getelementptr inbounds %struct.sv, %struct.sv* %90, i32 0, i32 0
  %91 = load i8*, i8** %sv_any92, align 8
  %92 = bitcast i8* %91 to %struct.xpv*
  %xpv_pv93 = getelementptr inbounds %struct.xpv, %struct.xpv* %92, i32 0, i32 0
  %93 = load i8*, i8** %xpv_pv93, align 8
  %sub.ptr.lhs.cast94 = ptrtoint i8* %89 to i64
  %sub.ptr.rhs.cast95 = ptrtoint i8* %93 to i64
  %sub.ptr.sub96 = sub i64 %sub.ptr.lhs.cast94, %sub.ptr.rhs.cast95
  %94 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %sv_any97 = getelementptr inbounds %struct.sv, %struct.sv* %94, i32 0, i32 0
  %95 = load i8*, i8** %sv_any97, align 8
  %96 = bitcast i8* %95 to %struct.xpv*
  %xpv_cur98 = getelementptr inbounds %struct.xpv, %struct.xpv* %96, i32 0, i32 1
  store i64 %sub.ptr.sub96, i64* %xpv_cur98, align 8
  store i64 %sub.ptr.sub96, i64* %tmp
  %97 = load i64, i64* %tmp
  %98 = load i8*, i8** %t, align 8
  store i8 0, i8* %98, align 1
  %99 = load %struct.sv*, %struct.sv** %nsv, align 8
  %tobool99 = icmp ne %struct.sv* %99, null
  br i1 %tobool99, label %if.else.104, label %if.then.100

if.then.100:                                      ; preds = %if.then.91
  %100 = load i8*, i8** %f, align 8
  %101 = load i32, i32* %arg, align 4
  %conv101 = sext i32 %101 to i64
  %call102 = call %struct.sv* @Perl_newSVpvn(i8* %100, i64 %conv101)
  %call103 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call102)
  store %struct.sv* %call103, %struct.sv** %nsv, align 8
  br label %if.end.106

if.else.104:                                      ; preds = %if.then.91
  %102 = load %struct.sv*, %struct.sv** %nsv, align 8
  %103 = load i8*, i8** %f, align 8
  %104 = load i32, i32* %arg, align 4
  %conv105 = sext i32 %104 to i64
  call void @Perl_sv_setpvn(%struct.sv* %102, i8* %103, i64 %conv105)
  br label %if.end.106

if.end.106:                                       ; preds = %if.else.104, %if.then.100
  %105 = load %struct.sv*, %struct.sv** %nsv, align 8
  %sv_flags107 = getelementptr inbounds %struct.sv, %struct.sv* %105, i32 0, i32 2
  %106 = load i32, i32* %sv_flags107, align 4
  %and108 = and i32 %106, -536870913
  store i32 %and108, i32* %sv_flags107, align 4
  %107 = load %struct.sv*, %struct.sv** %nsv, align 8
  %call109 = call i64 @Perl_sv_utf8_upgrade_flags(%struct.sv* %107, i32 2)
  %108 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %109 = load %struct.sv*, %struct.sv** %nsv, align 8
  call void @Perl_sv_catsv_flags(%struct.sv* %108, %struct.sv* %109, i32 2)
  %110 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %sv_any110 = getelementptr inbounds %struct.sv, %struct.sv* %110, i32 0, i32 0
  %111 = load i8*, i8** %sv_any110, align 8
  %112 = bitcast i8* %111 to %struct.xpv*
  %xpv_pv111 = getelementptr inbounds %struct.xpv, %struct.xpv* %112, i32 0, i32 0
  %113 = load i8*, i8** %xpv_pv111, align 8
  %114 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %sv_any112 = getelementptr inbounds %struct.sv, %struct.sv* %114, i32 0, i32 0
  %115 = load i8*, i8** %sv_any112, align 8
  %116 = bitcast i8* %115 to %struct.xpv*
  %xpv_cur113 = getelementptr inbounds %struct.xpv, %struct.xpv* %116, i32 0, i32 1
  %117 = load i64, i64* %xpv_cur113, align 8
  %add.ptr114 = getelementptr inbounds i8, i8* %113, i64 %117
  store i8* %add.ptr114, i8** %t, align 8
  br label %sw.epilog.1089

if.end.115:                                       ; preds = %land.lhs.true.87, %sw.bb.83
  %118 = load i8, i8* %targ_is_utf8, align 1
  %tobool116 = icmp ne i8 %118, 0
  br i1 %tobool116, label %if.end.160, label %land.lhs.true.117

land.lhs.true.117:                                ; preds = %if.end.115
  %119 = load %struct.sv*, %struct.sv** %tmpForm, align 8
  %sv_flags118 = getelementptr inbounds %struct.sv, %struct.sv* %119, i32 0, i32 2
  %120 = load i32, i32* %sv_flags118, align 4
  %and119 = and i32 %120, 536870912
  %tobool120 = icmp ne i32 %and119, 0
  br i1 %tobool120, label %land.lhs.true.121, label %if.end.160

land.lhs.true.121:                                ; preds = %land.lhs.true.117
  %121 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %op_private122 = getelementptr inbounds %struct.cop, %struct.cop* %121, i32 0, i32 7
  %122 = load i8, i8* %op_private122, align 1
  %conv123 = zext i8 %122 to i32
  %and124 = and i32 %conv123, 8
  %tobool125 = icmp ne i32 %and124, 0
  br i1 %tobool125, label %if.end.160, label %if.then.126

if.then.126:                                      ; preds = %land.lhs.true.121
  %123 = load i8*, i8** %t, align 8
  %124 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %sv_any128 = getelementptr inbounds %struct.sv, %struct.sv* %124, i32 0, i32 0
  %125 = load i8*, i8** %sv_any128, align 8
  %126 = bitcast i8* %125 to %struct.xpv*
  %xpv_pv129 = getelementptr inbounds %struct.xpv, %struct.xpv* %126, i32 0, i32 0
  %127 = load i8*, i8** %xpv_pv129, align 8
  %sub.ptr.lhs.cast130 = ptrtoint i8* %123 to i64
  %sub.ptr.rhs.cast131 = ptrtoint i8* %127 to i64
  %sub.ptr.sub132 = sub i64 %sub.ptr.lhs.cast130, %sub.ptr.rhs.cast131
  %128 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %sv_any133 = getelementptr inbounds %struct.sv, %struct.sv* %128, i32 0, i32 0
  %129 = load i8*, i8** %sv_any133, align 8
  %130 = bitcast i8* %129 to %struct.xpv*
  %xpv_cur134 = getelementptr inbounds %struct.xpv, %struct.xpv* %130, i32 0, i32 1
  store i64 %sub.ptr.sub132, i64* %xpv_cur134, align 8
  store i64 %sub.ptr.sub132, i64* %tmp127
  %131 = load i64, i64* %tmp127
  %132 = load i8*, i8** %t, align 8
  store i8 0, i8* %132, align 1
  %133 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %call135 = call i64 @Perl_sv_utf8_upgrade_flags(%struct.sv* %133, i32 2)
  %134 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %sv_any136 = getelementptr inbounds %struct.sv, %struct.sv* %134, i32 0, i32 0
  %135 = load i8*, i8** %sv_any136, align 8
  %136 = bitcast i8* %135 to %struct.xpv*
  %xpv_len137 = getelementptr inbounds %struct.xpv, %struct.xpv* %136, i32 0, i32 2
  %137 = load i64, i64* %xpv_len137, align 8
  %138 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %sv_any138 = getelementptr inbounds %struct.sv, %struct.sv* %138, i32 0, i32 0
  %139 = load i8*, i8** %sv_any138, align 8
  %140 = bitcast i8* %139 to %struct.xpv*
  %xpv_cur139 = getelementptr inbounds %struct.xpv, %struct.xpv* %140, i32 0, i32 1
  %141 = load i64, i64* %xpv_cur139, align 8
  %142 = load i64, i64* %fudge, align 8
  %add140 = add i64 %141, %142
  %add141 = add i64 %add140, 1
  %cmp142 = icmp ult i64 %137, %add141
  br i1 %cmp142, label %cond.true.144, label %cond.false.150

cond.true.144:                                    ; preds = %if.then.126
  %143 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %144 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %sv_any145 = getelementptr inbounds %struct.sv, %struct.sv* %144, i32 0, i32 0
  %145 = load i8*, i8** %sv_any145, align 8
  %146 = bitcast i8* %145 to %struct.xpv*
  %xpv_cur146 = getelementptr inbounds %struct.xpv, %struct.xpv* %146, i32 0, i32 1
  %147 = load i64, i64* %xpv_cur146, align 8
  %148 = load i64, i64* %fudge, align 8
  %add147 = add i64 %147, %148
  %add148 = add i64 %add147, 1
  %call149 = call i8* @Perl_sv_grow(%struct.sv* %143, i64 %add148)
  br label %cond.end.153

cond.false.150:                                   ; preds = %if.then.126
  %149 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %sv_any151 = getelementptr inbounds %struct.sv, %struct.sv* %149, i32 0, i32 0
  %150 = load i8*, i8** %sv_any151, align 8
  %151 = bitcast i8* %150 to %struct.xpv*
  %xpv_pv152 = getelementptr inbounds %struct.xpv, %struct.xpv* %151, i32 0, i32 0
  %152 = load i8*, i8** %xpv_pv152, align 8
  br label %cond.end.153

cond.end.153:                                     ; preds = %cond.false.150, %cond.true.144
  %cond154 = phi i8* [ %call149, %cond.true.144 ], [ %152, %cond.false.150 ]
  %153 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %sv_any155 = getelementptr inbounds %struct.sv, %struct.sv* %153, i32 0, i32 0
  %154 = load i8*, i8** %sv_any155, align 8
  %155 = bitcast i8* %154 to %struct.xpv*
  %xpv_pv156 = getelementptr inbounds %struct.xpv, %struct.xpv* %155, i32 0, i32 0
  %156 = load i8*, i8** %xpv_pv156, align 8
  %157 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %sv_any157 = getelementptr inbounds %struct.sv, %struct.sv* %157, i32 0, i32 0
  %158 = load i8*, i8** %sv_any157, align 8
  %159 = bitcast i8* %158 to %struct.xpv*
  %xpv_cur158 = getelementptr inbounds %struct.xpv, %struct.xpv* %159, i32 0, i32 1
  %160 = load i64, i64* %xpv_cur158, align 8
  %add.ptr159 = getelementptr inbounds i8, i8* %156, i64 %160
  store i8* %add.ptr159, i8** %t, align 8
  store i8 1, i8* %targ_is_utf8, align 1
  br label %if.end.160

if.end.160:                                       ; preds = %cond.end.153, %land.lhs.true.121, %land.lhs.true.117, %if.end.115
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end.160
  %161 = load i32, i32* %arg, align 4
  %dec = add nsw i32 %161, -1
  store i32 %dec, i32* %arg, align 4
  %tobool161 = icmp ne i32 %161, 0
  br i1 %tobool161, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %162 = load i8*, i8** %f, align 8
  %incdec.ptr162 = getelementptr inbounds i8, i8* %162, i32 1
  store i8* %incdec.ptr162, i8** %f, align 8
  %163 = load i8, i8* %162, align 1
  %164 = load i8*, i8** %t, align 8
  %incdec.ptr163 = getelementptr inbounds i8, i8* %164, i32 1
  store i8* %incdec.ptr163, i8** %t, align 8
  store i8 %163, i8* %164, align 1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %sw.epilog.1089

sw.bb.164:                                        ; preds = %for.cond
  %165 = load i32*, i32** %fpc, align 8
  %incdec.ptr165 = getelementptr inbounds i32, i32* %165, i32 1
  store i32* %incdec.ptr165, i32** %fpc, align 8
  %166 = load i32, i32* %165, align 4
  %167 = load i8*, i8** %f, align 8
  %idx.ext166 = zext i32 %166 to i64
  %add.ptr167 = getelementptr inbounds i8, i8* %167, i64 %idx.ext166
  store i8* %add.ptr167, i8** %f, align 8
  br label %sw.epilog.1089

sw.bb.168:                                        ; preds = %for.cond
  %168 = load i32*, i32** %fpc, align 8
  %incdec.ptr169 = getelementptr inbounds i32, i32* %168, i32 1
  store i32* %incdec.ptr169, i32** %fpc, align 8
  %169 = load i32, i32* %168, align 4
  store i32 %169, i32* %arg, align 4
  %170 = load i32, i32* %arg, align 4
  %171 = load i8*, i8** %f, align 8
  %idx.ext170 = sext i32 %170 to i64
  %add.ptr171 = getelementptr inbounds i8, i8* %171, i64 %idx.ext170
  store i8* %add.ptr171, i8** %f, align 8
  %172 = load i32, i32* %arg, align 4
  store i32 %172, i32* %fieldsize, align 4
  %173 = load %struct.sv**, %struct.sv*** %mark, align 8
  %174 = load %struct.sv**, %struct.sv*** %sp, align 8
  %cmp172 = icmp ult %struct.sv** %173, %174
  br i1 %cmp172, label %if.then.174, label %if.else.176

if.then.174:                                      ; preds = %sw.bb.168
  %175 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr175 = getelementptr inbounds %struct.sv*, %struct.sv** %175, i32 1
  store %struct.sv** %incdec.ptr175, %struct.sv*** %mark, align 8
  %176 = load %struct.sv*, %struct.sv** %incdec.ptr175, align 8
  store %struct.sv* %176, %struct.sv** %sv, align 8
  br label %if.end.204

if.else.176:                                      ; preds = %sw.bb.168
  store %struct.sv* @PL_sv_no, %struct.sv** %sv, align 8
  %177 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings = getelementptr inbounds %struct.cop, %struct.cop* %177, i32 0, i32 14
  %178 = load %struct.sv*, %struct.sv** %cop_warnings, align 8
  %cmp177 = icmp ne %struct.sv* %178, null
  br i1 %cmp177, label %land.lhs.true.179, label %lor.lhs.false.194

land.lhs.true.179:                                ; preds = %if.else.176
  %179 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings180 = getelementptr inbounds %struct.cop, %struct.cop* %179, i32 0, i32 14
  %180 = load %struct.sv*, %struct.sv** %cop_warnings180, align 8
  %cmp181 = icmp ne %struct.sv* %180, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 2)
  br i1 %cmp181, label %land.lhs.true.183, label %lor.lhs.false.194

land.lhs.true.183:                                ; preds = %land.lhs.true.179
  %181 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings184 = getelementptr inbounds %struct.cop, %struct.cop* %181, i32 0, i32 14
  %182 = load %struct.sv*, %struct.sv** %cop_warnings184, align 8
  %cmp185 = icmp eq %struct.sv* %182, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 1)
  br i1 %cmp185, label %if.then.202, label %lor.lhs.false.187

lor.lhs.false.187:                                ; preds = %land.lhs.true.183
  %183 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings188 = getelementptr inbounds %struct.cop, %struct.cop* %183, i32 0, i32 14
  %184 = load %struct.sv*, %struct.sv** %cop_warnings188, align 8
  %sv_any189 = getelementptr inbounds %struct.sv, %struct.sv* %184, i32 0, i32 0
  %185 = load i8*, i8** %sv_any189, align 8
  %186 = bitcast i8* %185 to %struct.xpv*
  %xpv_pv190 = getelementptr inbounds %struct.xpv, %struct.xpv* %186, i32 0, i32 0
  %187 = load i8*, i8** %xpv_pv190, align 8
  %arrayidx = getelementptr inbounds i8, i8* %187, i64 7
  %188 = load i8, i8* %arrayidx, align 1
  %conv191 = sext i8 %188 to i32
  %and192 = and i32 %conv191, 1
  %tobool193 = icmp ne i32 %and192, 0
  br i1 %tobool193, label %if.then.202, label %lor.lhs.false.194

lor.lhs.false.194:                                ; preds = %lor.lhs.false.187, %land.lhs.true.179, %if.else.176
  %189 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings195 = getelementptr inbounds %struct.cop, %struct.cop* %189, i32 0, i32 14
  %190 = load %struct.sv*, %struct.sv** %cop_warnings195, align 8
  %cmp196 = icmp eq %struct.sv* %190, null
  br i1 %cmp196, label %land.lhs.true.198, label %if.end.203

land.lhs.true.198:                                ; preds = %lor.lhs.false.194
  %191 = load i8, i8* @PL_dowarn, align 1
  %conv199 = zext i8 %191 to i32
  %and200 = and i32 %conv199, 1
  %tobool201 = icmp ne i32 %and200, 0
  br i1 %tobool201, label %if.then.202, label %if.end.203

if.then.202:                                      ; preds = %land.lhs.true.198, %lor.lhs.false.187, %land.lhs.true.183
  call void (i32, i8*, ...) @Perl_warner(i32 28, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end.203

if.end.203:                                       ; preds = %if.then.202, %land.lhs.true.198, %lor.lhs.false.194
  br label %if.end.204

if.end.204:                                       ; preds = %if.end.203, %if.then.174
  br label %sw.epilog.1089

sw.bb.205:                                        ; preds = %for.cond
  %192 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags206 = getelementptr inbounds %struct.sv, %struct.sv* %192, i32 0, i32 2
  %193 = load i32, i32* %sv_flags206, align 4
  %and207 = and i32 %193, 262144
  %cmp208 = icmp eq i32 %and207, 262144
  br i1 %cmp208, label %cond.true.210, label %cond.false.215

cond.true.210:                                    ; preds = %sw.bb.205
  %194 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any211 = getelementptr inbounds %struct.sv, %struct.sv* %194, i32 0, i32 0
  %195 = load i8*, i8** %sv_any211, align 8
  %196 = bitcast i8* %195 to %struct.xpv*
  %xpv_cur212 = getelementptr inbounds %struct.xpv, %struct.xpv* %196, i32 0, i32 1
  %197 = load i64, i64* %xpv_cur212, align 8
  store i64 %197, i64* %len, align 8
  %198 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any213 = getelementptr inbounds %struct.sv, %struct.sv* %198, i32 0, i32 0
  %199 = load i8*, i8** %sv_any213, align 8
  %200 = bitcast i8* %199 to %struct.xpv*
  %xpv_pv214 = getelementptr inbounds %struct.xpv, %struct.xpv* %200, i32 0, i32 0
  %201 = load i8*, i8** %xpv_pv214, align 8
  br label %cond.end.217

cond.false.215:                                   ; preds = %sw.bb.205
  %202 = load %struct.sv*, %struct.sv** %sv, align 8
  %call216 = call i8* @Perl_sv_2pv_flags(%struct.sv* %202, i64* %len, i32 2)
  br label %cond.end.217

cond.end.217:                                     ; preds = %cond.false.215, %cond.true.210
  %cond218 = phi i8* [ %201, %cond.true.210 ], [ %call216, %cond.false.215 ]
  store i8* %cond218, i8** %s, align 8
  store i8* %cond218, i8** %item, align 8
  %203 = load i64, i64* %len, align 8
  %conv219 = trunc i64 %203 to i32
  store i32 %conv219, i32* %itemsize, align 4
  %204 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags220 = getelementptr inbounds %struct.sv, %struct.sv* %204, i32 0, i32 2
  %205 = load i32, i32* %sv_flags220, align 4
  %and221 = and i32 %205, 536870912
  %tobool222 = icmp ne i32 %and221, 0
  br i1 %tobool222, label %land.lhs.true.223, label %if.end.266

land.lhs.true.223:                                ; preds = %cond.end.217
  %206 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %op_private224 = getelementptr inbounds %struct.cop, %struct.cop* %206, i32 0, i32 7
  %207 = load i8, i8* %op_private224, align 1
  %conv225 = zext i8 %207 to i32
  %and226 = and i32 %conv225, 8
  %tobool227 = icmp ne i32 %and226, 0
  br i1 %tobool227, label %if.end.266, label %if.then.228

if.then.228:                                      ; preds = %land.lhs.true.223
  %208 = load %struct.sv*, %struct.sv** %sv, align 8
  %call229 = call i64 @Perl_sv_len_utf8(%struct.sv* %208)
  %conv230 = trunc i64 %call229 to i32
  store i32 %conv230, i32* %itemsize, align 4
  %209 = load i32, i32* %itemsize, align 4
  %210 = load i64, i64* %len, align 8
  %conv231 = trunc i64 %210 to i32
  %cmp232 = icmp ne i32 %209, %conv231
  br i1 %cmp232, label %if.then.234, label %if.end.265

if.then.234:                                      ; preds = %if.then.228
  %211 = load i32, i32* %itemsize, align 4
  %212 = load i32, i32* %fieldsize, align 4
  %cmp236 = icmp sgt i32 %211, %212
  br i1 %cmp236, label %if.then.238, label %if.else.239

if.then.238:                                      ; preds = %if.then.234
  %213 = load i32, i32* %fieldsize, align 4
  store i32 %213, i32* %itemsize, align 4
  %214 = load i32, i32* %itemsize, align 4
  store i32 %214, i32* %itembytes, align 4
  %215 = load %struct.sv*, %struct.sv** %sv, align 8
  call void @Perl_sv_pos_u2b(%struct.sv* %215, i32* %itembytes, i32* null)
  br label %if.end.241

if.else.239:                                      ; preds = %if.then.234
  %216 = load i64, i64* %len, align 8
  %conv240 = trunc i64 %216 to i32
  store i32 %conv240, i32* %itembytes, align 4
  br label %if.end.241

if.end.241:                                       ; preds = %if.else.239, %if.then.238
  %217 = load i8*, i8** %s, align 8
  %218 = load i32, i32* %itembytes, align 4
  %idx.ext242 = sext i32 %218 to i64
  %add.ptr243 = getelementptr inbounds i8, i8* %217, i64 %idx.ext242
  store i8* %add.ptr243, i8** %chophere, align 8
  store i8* %add.ptr243, i8** %send, align 8
  br label %while.cond.244

while.cond.244:                                   ; preds = %if.end.258, %if.end.241
  %219 = load i8*, i8** %s, align 8
  %220 = load i8*, i8** %send, align 8
  %cmp245 = icmp ult i8* %219, %220
  br i1 %cmp245, label %while.body.247, label %while.end.260

while.body.247:                                   ; preds = %while.cond.244
  %221 = load i8*, i8** %s, align 8
  %222 = load i8, i8* %221, align 1
  %conv248 = sext i8 %222 to i32
  %and249 = and i32 %conv248, -32
  %tobool250 = icmp ne i32 %and249, 0
  br i1 %tobool250, label %if.then.251, label %if.else.252

if.then.251:                                      ; preds = %while.body.247
  store i8 1, i8* %gotsome, align 1
  br label %if.end.258

if.else.252:                                      ; preds = %while.body.247
  %223 = load i8*, i8** %s, align 8
  %224 = load i8, i8* %223, align 1
  %conv253 = sext i8 %224 to i32
  %cmp254 = icmp eq i32 %conv253, 10
  br i1 %cmp254, label %if.then.256, label %if.end.257

if.then.256:                                      ; preds = %if.else.252
  br label %while.end.260

if.end.257:                                       ; preds = %if.else.252
  br label %if.end.258

if.end.258:                                       ; preds = %if.end.257, %if.then.251
  %225 = load i8*, i8** %s, align 8
  %incdec.ptr259 = getelementptr inbounds i8, i8* %225, i32 1
  store i8* %incdec.ptr259, i8** %s, align 8
  br label %while.cond.244

while.end.260:                                    ; preds = %if.then.256, %while.cond.244
  store i8 1, i8* %item_is_utf8, align 1
  %226 = load i8*, i8** %s, align 8
  %227 = load i8*, i8** %item, align 8
  %sub.ptr.lhs.cast261 = ptrtoint i8* %226 to i64
  %sub.ptr.rhs.cast262 = ptrtoint i8* %227 to i64
  %sub.ptr.sub263 = sub i64 %sub.ptr.lhs.cast261, %sub.ptr.rhs.cast262
  %conv264 = trunc i64 %sub.ptr.sub263 to i32
  store i32 %conv264, i32* %itemsize, align 4
  %228 = load %struct.sv*, %struct.sv** %sv, align 8
  call void @Perl_sv_pos_b2u(%struct.sv* %228, i32* %itemsize)
  br label %sw.epilog.1089

if.end.265:                                       ; preds = %if.then.228
  br label %if.end.266

if.end.266:                                       ; preds = %if.end.265, %land.lhs.true.223, %cond.end.217
  store i8 0, i8* %item_is_utf8, align 1
  %229 = load i32, i32* %itemsize, align 4
  %230 = load i32, i32* %fieldsize, align 4
  %cmp267 = icmp sgt i32 %229, %230
  br i1 %cmp267, label %if.then.269, label %if.end.270

if.then.269:                                      ; preds = %if.end.266
  %231 = load i32, i32* %fieldsize, align 4
  store i32 %231, i32* %itemsize, align 4
  br label %if.end.270

if.end.270:                                       ; preds = %if.then.269, %if.end.266
  %232 = load i8*, i8** %s, align 8
  %233 = load i32, i32* %itemsize, align 4
  %idx.ext271 = sext i32 %233 to i64
  %add.ptr272 = getelementptr inbounds i8, i8* %232, i64 %idx.ext271
  store i8* %add.ptr272, i8** %chophere, align 8
  store i8* %add.ptr272, i8** %send, align 8
  br label %while.cond.273

while.cond.273:                                   ; preds = %if.end.287, %if.end.270
  %234 = load i8*, i8** %s, align 8
  %235 = load i8*, i8** %send, align 8
  %cmp274 = icmp ult i8* %234, %235
  br i1 %cmp274, label %while.body.276, label %while.end.289

while.body.276:                                   ; preds = %while.cond.273
  %236 = load i8*, i8** %s, align 8
  %237 = load i8, i8* %236, align 1
  %conv277 = sext i8 %237 to i32
  %and278 = and i32 %conv277, -32
  %tobool279 = icmp ne i32 %and278, 0
  br i1 %tobool279, label %if.then.280, label %if.else.281

if.then.280:                                      ; preds = %while.body.276
  store i8 1, i8* %gotsome, align 1
  br label %if.end.287

if.else.281:                                      ; preds = %while.body.276
  %238 = load i8*, i8** %s, align 8
  %239 = load i8, i8* %238, align 1
  %conv282 = sext i8 %239 to i32
  %cmp283 = icmp eq i32 %conv282, 10
  br i1 %cmp283, label %if.then.285, label %if.end.286

if.then.285:                                      ; preds = %if.else.281
  br label %while.end.289

if.end.286:                                       ; preds = %if.else.281
  br label %if.end.287

if.end.287:                                       ; preds = %if.end.286, %if.then.280
  %240 = load i8*, i8** %s, align 8
  %incdec.ptr288 = getelementptr inbounds i8, i8* %240, i32 1
  store i8* %incdec.ptr288, i8** %s, align 8
  br label %while.cond.273

while.end.289:                                    ; preds = %if.then.285, %while.cond.273
  %241 = load i8*, i8** %s, align 8
  %242 = load i8*, i8** %item, align 8
  %sub.ptr.lhs.cast290 = ptrtoint i8* %241 to i64
  %sub.ptr.rhs.cast291 = ptrtoint i8* %242 to i64
  %sub.ptr.sub292 = sub i64 %sub.ptr.lhs.cast290, %sub.ptr.rhs.cast291
  %conv293 = trunc i64 %sub.ptr.sub292 to i32
  store i32 %conv293, i32* %itemsize, align 4
  br label %sw.epilog.1089

sw.bb.294:                                        ; preds = %for.cond
  %243 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags295 = getelementptr inbounds %struct.sv, %struct.sv* %243, i32 0, i32 2
  %244 = load i32, i32* %sv_flags295, align 4
  %and296 = and i32 %244, 262144
  %cmp297 = icmp eq i32 %and296, 262144
  br i1 %cmp297, label %cond.true.299, label %cond.false.304

cond.true.299:                                    ; preds = %sw.bb.294
  %245 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any300 = getelementptr inbounds %struct.sv, %struct.sv* %245, i32 0, i32 0
  %246 = load i8*, i8** %sv_any300, align 8
  %247 = bitcast i8* %246 to %struct.xpv*
  %xpv_cur301 = getelementptr inbounds %struct.xpv, %struct.xpv* %247, i32 0, i32 1
  %248 = load i64, i64* %xpv_cur301, align 8
  store i64 %248, i64* %len, align 8
  %249 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any302 = getelementptr inbounds %struct.sv, %struct.sv* %249, i32 0, i32 0
  %250 = load i8*, i8** %sv_any302, align 8
  %251 = bitcast i8* %250 to %struct.xpv*
  %xpv_pv303 = getelementptr inbounds %struct.xpv, %struct.xpv* %251, i32 0, i32 0
  %252 = load i8*, i8** %xpv_pv303, align 8
  br label %cond.end.306

cond.false.304:                                   ; preds = %sw.bb.294
  %253 = load %struct.sv*, %struct.sv** %sv, align 8
  %call305 = call i8* @Perl_sv_2pv_flags(%struct.sv* %253, i64* %len, i32 2)
  br label %cond.end.306

cond.end.306:                                     ; preds = %cond.false.304, %cond.true.299
  %cond307 = phi i8* [ %252, %cond.true.299 ], [ %call305, %cond.false.304 ]
  store i8* %cond307, i8** %s, align 8
  store i8* %cond307, i8** %item, align 8
  %254 = load i64, i64* %len, align 8
  %conv308 = trunc i64 %254 to i32
  store i32 %conv308, i32* %itemsize, align 4
  %255 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags309 = getelementptr inbounds %struct.sv, %struct.sv* %255, i32 0, i32 2
  %256 = load i32, i32* %sv_flags309, align 4
  %and310 = and i32 %256, 536870912
  %tobool311 = icmp ne i32 %and310, 0
  br i1 %tobool311, label %land.lhs.true.312, label %if.end.429

land.lhs.true.312:                                ; preds = %cond.end.306
  %257 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %op_private313 = getelementptr inbounds %struct.cop, %struct.cop* %257, i32 0, i32 7
  %258 = load i8, i8* %op_private313, align 1
  %conv314 = zext i8 %258 to i32
  %and315 = and i32 %conv314, 8
  %tobool316 = icmp ne i32 %and315, 0
  br i1 %tobool316, label %if.end.429, label %if.then.317

if.then.317:                                      ; preds = %land.lhs.true.312
  %259 = load %struct.sv*, %struct.sv** %sv, align 8
  %call318 = call i64 @Perl_sv_len_utf8(%struct.sv* %259)
  %conv319 = trunc i64 %call318 to i32
  store i32 %conv319, i32* %itemsize, align 4
  %260 = load i32, i32* %itemsize, align 4
  %261 = load i64, i64* %len, align 8
  %conv320 = trunc i64 %261 to i32
  %cmp321 = icmp ne i32 %260, %conv320
  br i1 %cmp321, label %if.then.323, label %if.end.428

if.then.323:                                      ; preds = %if.then.317
  %262 = load i32, i32* %itemsize, align 4
  %263 = load i32, i32* %fieldsize, align 4
  %cmp326 = icmp sle i32 %262, %263
  br i1 %cmp326, label %if.then.328, label %if.else.351

if.then.328:                                      ; preds = %if.then.323
  %264 = load i8*, i8** %s, align 8
  %265 = load i32, i32* %itemsize, align 4
  %idx.ext329 = sext i32 %265 to i64
  %add.ptr330 = getelementptr inbounds i8, i8* %264, i64 %idx.ext329
  store i8* %add.ptr330, i8** %chophere, align 8
  store i8* %add.ptr330, i8** %send, align 8
  br label %while.cond.331

while.cond.331:                                   ; preds = %if.end.349, %if.then.328
  %266 = load i8*, i8** %s, align 8
  %267 = load i8*, i8** %send, align 8
  %cmp332 = icmp ult i8* %266, %267
  br i1 %cmp332, label %while.body.334, label %while.end.350

while.body.334:                                   ; preds = %while.cond.331
  %268 = load i8*, i8** %s, align 8
  %269 = load i8, i8* %268, align 1
  %conv335 = sext i8 %269 to i32
  %cmp336 = icmp eq i32 %conv335, 13
  br i1 %cmp336, label %if.then.338, label %if.end.343

if.then.338:                                      ; preds = %while.body.334
  %270 = load i8*, i8** %s, align 8
  %271 = load i8*, i8** %item, align 8
  %sub.ptr.lhs.cast339 = ptrtoint i8* %270 to i64
  %sub.ptr.rhs.cast340 = ptrtoint i8* %271 to i64
  %sub.ptr.sub341 = sub i64 %sub.ptr.lhs.cast339, %sub.ptr.rhs.cast340
  %conv342 = trunc i64 %sub.ptr.sub341 to i32
  store i32 %conv342, i32* %itemsize, align 4
  %272 = load i8*, i8** %s, align 8
  store i8* %272, i8** %chophere, align 8
  br label %while.end.350

if.end.343:                                       ; preds = %while.body.334
  %273 = load i8*, i8** %s, align 8
  %incdec.ptr344 = getelementptr inbounds i8, i8* %273, i32 1
  store i8* %incdec.ptr344, i8** %s, align 8
  %274 = load i8, i8* %273, align 1
  %conv345 = sext i8 %274 to i32
  %and346 = and i32 %conv345, -32
  %tobool347 = icmp ne i32 %and346, 0
  br i1 %tobool347, label %if.then.348, label %if.end.349

if.then.348:                                      ; preds = %if.end.343
  store i8 1, i8* %gotsome, align 1
  br label %if.end.349

if.end.349:                                       ; preds = %if.then.348, %if.end.343
  br label %while.cond.331

while.end.350:                                    ; preds = %if.then.338, %while.cond.331
  br label %if.end.427

if.else.351:                                      ; preds = %if.then.323
  %275 = load i32, i32* %fieldsize, align 4
  store i32 %275, i32* %itemsize, align 4
  %276 = load i32, i32* %itemsize, align 4
  store i32 %276, i32* %itembytes325, align 4
  %277 = load %struct.sv*, %struct.sv** %sv, align 8
  call void @Perl_sv_pos_u2b(%struct.sv* %277, i32* %itembytes325, i32* null)
  %278 = load i8*, i8** %s, align 8
  %279 = load i32, i32* %itembytes325, align 4
  %idx.ext352 = sext i32 %279 to i64
  %add.ptr353 = getelementptr inbounds i8, i8* %278, i64 %idx.ext352
  store i8* %add.ptr353, i8** %chophere, align 8
  store i8* %add.ptr353, i8** %send, align 8
  br label %while.cond.354

while.cond.354:                                   ; preds = %if.end.420, %if.else.351
  %280 = load i8*, i8** %s, align 8
  %281 = load i8*, i8** %send, align 8
  %cmp355 = icmp ult i8* %280, %281
  br i1 %cmp355, label %lor.end.378, label %lor.rhs

lor.rhs:                                          ; preds = %while.cond.354
  %282 = load i8*, i8** %s, align 8
  %283 = load i8*, i8** %send, align 8
  %cmp357 = icmp eq i8* %282, %283
  br i1 %cmp357, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %lor.rhs
  %284 = load i8*, i8** %s, align 8
  %285 = load i8, i8* %284, align 1
  %conv359 = sext i8 %285 to i32
  %cmp360 = icmp eq i32 %conv359, 32
  br i1 %cmp360, label %lor.end, label %lor.lhs.false.362

lor.lhs.false.362:                                ; preds = %land.rhs
  %286 = load i8*, i8** %s, align 8
  %287 = load i8, i8* %286, align 1
  %conv363 = sext i8 %287 to i32
  %cmp364 = icmp eq i32 %conv363, 9
  br i1 %cmp364, label %lor.end, label %lor.lhs.false.366

lor.lhs.false.366:                                ; preds = %lor.lhs.false.362
  %288 = load i8*, i8** %s, align 8
  %289 = load i8, i8* %288, align 1
  %conv367 = sext i8 %289 to i32
  %cmp368 = icmp eq i32 %conv367, 10
  br i1 %cmp368, label %lor.end, label %lor.lhs.false.370

lor.lhs.false.370:                                ; preds = %lor.lhs.false.366
  %290 = load i8*, i8** %s, align 8
  %291 = load i8, i8* %290, align 1
  %conv371 = sext i8 %291 to i32
  %cmp372 = icmp eq i32 %conv371, 13
  br i1 %cmp372, label %lor.end, label %lor.rhs.374

lor.rhs.374:                                      ; preds = %lor.lhs.false.370
  %292 = load i8*, i8** %s, align 8
  %293 = load i8, i8* %292, align 1
  %conv375 = sext i8 %293 to i32
  %cmp376 = icmp eq i32 %conv375, 12
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs.374, %lor.lhs.false.370, %lor.lhs.false.366, %lor.lhs.false.362, %land.rhs
  %294 = phi i1 [ true, %lor.lhs.false.370 ], [ true, %lor.lhs.false.366 ], [ true, %lor.lhs.false.362 ], [ true, %land.rhs ], [ %cmp376, %lor.rhs.374 ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %lor.rhs
  %295 = phi i1 [ false, %lor.rhs ], [ %294, %lor.end ]
  br label %lor.end.378

lor.end.378:                                      ; preds = %land.end, %while.cond.354
  %296 = phi i1 [ true, %while.cond.354 ], [ %295, %land.end ]
  br i1 %296, label %while.body.379, label %while.end.422

while.body.379:                                   ; preds = %lor.end.378
  %297 = load i8*, i8** %s, align 8
  %298 = load i8, i8* %297, align 1
  %conv380 = sext i8 %298 to i32
  %cmp381 = icmp eq i32 %conv380, 32
  br i1 %cmp381, label %if.then.399, label %lor.lhs.false.383

lor.lhs.false.383:                                ; preds = %while.body.379
  %299 = load i8*, i8** %s, align 8
  %300 = load i8, i8* %299, align 1
  %conv384 = sext i8 %300 to i32
  %cmp385 = icmp eq i32 %conv384, 9
  br i1 %cmp385, label %if.then.399, label %lor.lhs.false.387

lor.lhs.false.387:                                ; preds = %lor.lhs.false.383
  %301 = load i8*, i8** %s, align 8
  %302 = load i8, i8* %301, align 1
  %conv388 = sext i8 %302 to i32
  %cmp389 = icmp eq i32 %conv388, 10
  br i1 %cmp389, label %if.then.399, label %lor.lhs.false.391

lor.lhs.false.391:                                ; preds = %lor.lhs.false.387
  %303 = load i8*, i8** %s, align 8
  %304 = load i8, i8* %303, align 1
  %conv392 = sext i8 %304 to i32
  %cmp393 = icmp eq i32 %conv392, 13
  br i1 %cmp393, label %if.then.399, label %lor.lhs.false.395

lor.lhs.false.395:                                ; preds = %lor.lhs.false.391
  %305 = load i8*, i8** %s, align 8
  %306 = load i8, i8* %305, align 1
  %conv396 = sext i8 %306 to i32
  %cmp397 = icmp eq i32 %conv396, 12
  br i1 %cmp397, label %if.then.399, label %if.else.408

if.then.399:                                      ; preds = %lor.lhs.false.395, %lor.lhs.false.391, %lor.lhs.false.387, %lor.lhs.false.383, %while.body.379
  %307 = load i8, i8* %chopspace, align 1
  %tobool400 = icmp ne i8 %307, 0
  br i1 %tobool400, label %if.then.401, label %if.end.402

if.then.401:                                      ; preds = %if.then.399
  %308 = load i8*, i8** %s, align 8
  store i8* %308, i8** %chophere, align 8
  br label %if.end.402

if.end.402:                                       ; preds = %if.then.401, %if.then.399
  %309 = load i8*, i8** %s, align 8
  %310 = load i8, i8* %309, align 1
  %conv403 = sext i8 %310 to i32
  %cmp404 = icmp eq i32 %conv403, 13
  br i1 %cmp404, label %if.then.406, label %if.end.407

if.then.406:                                      ; preds = %if.end.402
  br label %while.end.422

if.end.407:                                       ; preds = %if.end.402
  br label %if.end.420

if.else.408:                                      ; preds = %lor.lhs.false.395
  %311 = load i8*, i8** %s, align 8
  %312 = load i8, i8* %311, align 1
  %conv409 = sext i8 %312 to i32
  %and410 = and i32 %conv409, -32
  %tobool411 = icmp ne i32 %and410, 0
  br i1 %tobool411, label %if.then.412, label %if.end.413

if.then.412:                                      ; preds = %if.else.408
  store i8 1, i8* %gotsome, align 1
  br label %if.end.413

if.end.413:                                       ; preds = %if.then.412, %if.else.408
  %313 = load i8*, i8** @PL_chopset, align 8
  %314 = load i8*, i8** %s, align 8
  %315 = load i8, i8* %314, align 1
  %conv414 = sext i8 %315 to i32
  %call415 = call i8* @strchr(i8* %313, i32 %conv414)
  %tobool416 = icmp ne i8* %call415, null
  br i1 %tobool416, label %if.then.417, label %if.end.419

if.then.417:                                      ; preds = %if.end.413
  %316 = load i8*, i8** %s, align 8
  %add.ptr418 = getelementptr inbounds i8, i8* %316, i64 1
  store i8* %add.ptr418, i8** %chophere, align 8
  br label %if.end.419

if.end.419:                                       ; preds = %if.then.417, %if.end.413
  br label %if.end.420

if.end.420:                                       ; preds = %if.end.419, %if.end.407
  %317 = load i8*, i8** %s, align 8
  %incdec.ptr421 = getelementptr inbounds i8, i8* %317, i32 1
  store i8* %incdec.ptr421, i8** %s, align 8
  br label %while.cond.354

while.end.422:                                    ; preds = %if.then.406, %lor.end.378
  %318 = load i8*, i8** %chophere, align 8
  %319 = load i8*, i8** %item, align 8
  %sub.ptr.lhs.cast423 = ptrtoint i8* %318 to i64
  %sub.ptr.rhs.cast424 = ptrtoint i8* %319 to i64
  %sub.ptr.sub425 = sub i64 %sub.ptr.lhs.cast423, %sub.ptr.rhs.cast424
  %conv426 = trunc i64 %sub.ptr.sub425 to i32
  store i32 %conv426, i32* %itemsize, align 4
  %320 = load %struct.sv*, %struct.sv** %sv, align 8
  call void @Perl_sv_pos_b2u(%struct.sv* %320, i32* %itemsize)
  br label %if.end.427

if.end.427:                                       ; preds = %while.end.422, %while.end.350
  store i8 1, i8* %item_is_utf8, align 1
  br label %sw.epilog.1089

if.end.428:                                       ; preds = %if.then.317
  br label %if.end.429

if.end.429:                                       ; preds = %if.end.428, %land.lhs.true.312, %cond.end.306
  store i8 0, i8* %item_is_utf8, align 1
  %321 = load i32, i32* %itemsize, align 4
  %322 = load i32, i32* %fieldsize, align 4
  %cmp430 = icmp sle i32 %321, %322
  br i1 %cmp430, label %if.then.432, label %if.else.455

if.then.432:                                      ; preds = %if.end.429
  %323 = load i8*, i8** %s, align 8
  %324 = load i32, i32* %itemsize, align 4
  %idx.ext433 = sext i32 %324 to i64
  %add.ptr434 = getelementptr inbounds i8, i8* %323, i64 %idx.ext433
  store i8* %add.ptr434, i8** %chophere, align 8
  store i8* %add.ptr434, i8** %send, align 8
  br label %while.cond.435

while.cond.435:                                   ; preds = %if.end.453, %if.then.432
  %325 = load i8*, i8** %s, align 8
  %326 = load i8*, i8** %send, align 8
  %cmp436 = icmp ult i8* %325, %326
  br i1 %cmp436, label %while.body.438, label %while.end.454

while.body.438:                                   ; preds = %while.cond.435
  %327 = load i8*, i8** %s, align 8
  %328 = load i8, i8* %327, align 1
  %conv439 = sext i8 %328 to i32
  %cmp440 = icmp eq i32 %conv439, 13
  br i1 %cmp440, label %if.then.442, label %if.end.447

if.then.442:                                      ; preds = %while.body.438
  %329 = load i8*, i8** %s, align 8
  %330 = load i8*, i8** %item, align 8
  %sub.ptr.lhs.cast443 = ptrtoint i8* %329 to i64
  %sub.ptr.rhs.cast444 = ptrtoint i8* %330 to i64
  %sub.ptr.sub445 = sub i64 %sub.ptr.lhs.cast443, %sub.ptr.rhs.cast444
  %conv446 = trunc i64 %sub.ptr.sub445 to i32
  store i32 %conv446, i32* %itemsize, align 4
  %331 = load i8*, i8** %s, align 8
  store i8* %331, i8** %chophere, align 8
  br label %while.end.454

if.end.447:                                       ; preds = %while.body.438
  %332 = load i8*, i8** %s, align 8
  %incdec.ptr448 = getelementptr inbounds i8, i8* %332, i32 1
  store i8* %incdec.ptr448, i8** %s, align 8
  %333 = load i8, i8* %332, align 1
  %conv449 = sext i8 %333 to i32
  %and450 = and i32 %conv449, -32
  %tobool451 = icmp ne i32 %and450, 0
  br i1 %tobool451, label %if.then.452, label %if.end.453

if.then.452:                                      ; preds = %if.end.447
  store i8 1, i8* %gotsome, align 1
  br label %if.end.453

if.end.453:                                       ; preds = %if.then.452, %if.end.447
  br label %while.cond.435

while.end.454:                                    ; preds = %if.then.442, %while.cond.435
  br label %if.end.535

if.else.455:                                      ; preds = %if.end.429
  %334 = load i32, i32* %fieldsize, align 4
  store i32 %334, i32* %itemsize, align 4
  %335 = load i8*, i8** %s, align 8
  %336 = load i32, i32* %itemsize, align 4
  %idx.ext456 = sext i32 %336 to i64
  %add.ptr457 = getelementptr inbounds i8, i8* %335, i64 %idx.ext456
  store i8* %add.ptr457, i8** %chophere, align 8
  store i8* %add.ptr457, i8** %send, align 8
  br label %while.cond.458

while.cond.458:                                   ; preds = %if.end.528, %if.else.455
  %337 = load i8*, i8** %s, align 8
  %338 = load i8*, i8** %send, align 8
  %cmp459 = icmp ult i8* %337, %338
  br i1 %cmp459, label %lor.end.486, label %lor.rhs.461

lor.rhs.461:                                      ; preds = %while.cond.458
  %339 = load i8*, i8** %s, align 8
  %340 = load i8*, i8** %send, align 8
  %cmp462 = icmp eq i8* %339, %340
  br i1 %cmp462, label %land.rhs.464, label %land.end.485

land.rhs.464:                                     ; preds = %lor.rhs.461
  %341 = load i8*, i8** %s, align 8
  %342 = load i8, i8* %341, align 1
  %conv465 = sext i8 %342 to i32
  %cmp466 = icmp eq i32 %conv465, 32
  br i1 %cmp466, label %lor.end.484, label %lor.lhs.false.468

lor.lhs.false.468:                                ; preds = %land.rhs.464
  %343 = load i8*, i8** %s, align 8
  %344 = load i8, i8* %343, align 1
  %conv469 = sext i8 %344 to i32
  %cmp470 = icmp eq i32 %conv469, 9
  br i1 %cmp470, label %lor.end.484, label %lor.lhs.false.472

lor.lhs.false.472:                                ; preds = %lor.lhs.false.468
  %345 = load i8*, i8** %s, align 8
  %346 = load i8, i8* %345, align 1
  %conv473 = sext i8 %346 to i32
  %cmp474 = icmp eq i32 %conv473, 10
  br i1 %cmp474, label %lor.end.484, label %lor.lhs.false.476

lor.lhs.false.476:                                ; preds = %lor.lhs.false.472
  %347 = load i8*, i8** %s, align 8
  %348 = load i8, i8* %347, align 1
  %conv477 = sext i8 %348 to i32
  %cmp478 = icmp eq i32 %conv477, 13
  br i1 %cmp478, label %lor.end.484, label %lor.rhs.480

lor.rhs.480:                                      ; preds = %lor.lhs.false.476
  %349 = load i8*, i8** %s, align 8
  %350 = load i8, i8* %349, align 1
  %conv481 = sext i8 %350 to i32
  %cmp482 = icmp eq i32 %conv481, 12
  br label %lor.end.484

lor.end.484:                                      ; preds = %lor.rhs.480, %lor.lhs.false.476, %lor.lhs.false.472, %lor.lhs.false.468, %land.rhs.464
  %351 = phi i1 [ true, %lor.lhs.false.476 ], [ true, %lor.lhs.false.472 ], [ true, %lor.lhs.false.468 ], [ true, %land.rhs.464 ], [ %cmp482, %lor.rhs.480 ]
  br label %land.end.485

land.end.485:                                     ; preds = %lor.end.484, %lor.rhs.461
  %352 = phi i1 [ false, %lor.rhs.461 ], [ %351, %lor.end.484 ]
  br label %lor.end.486

lor.end.486:                                      ; preds = %land.end.485, %while.cond.458
  %353 = phi i1 [ true, %while.cond.458 ], [ %352, %land.end.485 ]
  br i1 %353, label %while.body.487, label %while.end.530

while.body.487:                                   ; preds = %lor.end.486
  %354 = load i8*, i8** %s, align 8
  %355 = load i8, i8* %354, align 1
  %conv488 = sext i8 %355 to i32
  %cmp489 = icmp eq i32 %conv488, 32
  br i1 %cmp489, label %if.then.507, label %lor.lhs.false.491

lor.lhs.false.491:                                ; preds = %while.body.487
  %356 = load i8*, i8** %s, align 8
  %357 = load i8, i8* %356, align 1
  %conv492 = sext i8 %357 to i32
  %cmp493 = icmp eq i32 %conv492, 9
  br i1 %cmp493, label %if.then.507, label %lor.lhs.false.495

lor.lhs.false.495:                                ; preds = %lor.lhs.false.491
  %358 = load i8*, i8** %s, align 8
  %359 = load i8, i8* %358, align 1
  %conv496 = sext i8 %359 to i32
  %cmp497 = icmp eq i32 %conv496, 10
  br i1 %cmp497, label %if.then.507, label %lor.lhs.false.499

lor.lhs.false.499:                                ; preds = %lor.lhs.false.495
  %360 = load i8*, i8** %s, align 8
  %361 = load i8, i8* %360, align 1
  %conv500 = sext i8 %361 to i32
  %cmp501 = icmp eq i32 %conv500, 13
  br i1 %cmp501, label %if.then.507, label %lor.lhs.false.503

lor.lhs.false.503:                                ; preds = %lor.lhs.false.499
  %362 = load i8*, i8** %s, align 8
  %363 = load i8, i8* %362, align 1
  %conv504 = sext i8 %363 to i32
  %cmp505 = icmp eq i32 %conv504, 12
  br i1 %cmp505, label %if.then.507, label %if.else.516

if.then.507:                                      ; preds = %lor.lhs.false.503, %lor.lhs.false.499, %lor.lhs.false.495, %lor.lhs.false.491, %while.body.487
  %364 = load i8, i8* %chopspace, align 1
  %tobool508 = icmp ne i8 %364, 0
  br i1 %tobool508, label %if.then.509, label %if.end.510

if.then.509:                                      ; preds = %if.then.507
  %365 = load i8*, i8** %s, align 8
  store i8* %365, i8** %chophere, align 8
  br label %if.end.510

if.end.510:                                       ; preds = %if.then.509, %if.then.507
  %366 = load i8*, i8** %s, align 8
  %367 = load i8, i8* %366, align 1
  %conv511 = sext i8 %367 to i32
  %cmp512 = icmp eq i32 %conv511, 13
  br i1 %cmp512, label %if.then.514, label %if.end.515

if.then.514:                                      ; preds = %if.end.510
  br label %while.end.530

if.end.515:                                       ; preds = %if.end.510
  br label %if.end.528

if.else.516:                                      ; preds = %lor.lhs.false.503
  %368 = load i8*, i8** %s, align 8
  %369 = load i8, i8* %368, align 1
  %conv517 = sext i8 %369 to i32
  %and518 = and i32 %conv517, -32
  %tobool519 = icmp ne i32 %and518, 0
  br i1 %tobool519, label %if.then.520, label %if.end.521

if.then.520:                                      ; preds = %if.else.516
  store i8 1, i8* %gotsome, align 1
  br label %if.end.521

if.end.521:                                       ; preds = %if.then.520, %if.else.516
  %370 = load i8*, i8** @PL_chopset, align 8
  %371 = load i8*, i8** %s, align 8
  %372 = load i8, i8* %371, align 1
  %conv522 = sext i8 %372 to i32
  %call523 = call i8* @strchr(i8* %370, i32 %conv522)
  %tobool524 = icmp ne i8* %call523, null
  br i1 %tobool524, label %if.then.525, label %if.end.527

if.then.525:                                      ; preds = %if.end.521
  %373 = load i8*, i8** %s, align 8
  %add.ptr526 = getelementptr inbounds i8, i8* %373, i64 1
  store i8* %add.ptr526, i8** %chophere, align 8
  br label %if.end.527

if.end.527:                                       ; preds = %if.then.525, %if.end.521
  br label %if.end.528

if.end.528:                                       ; preds = %if.end.527, %if.end.515
  %374 = load i8*, i8** %s, align 8
  %incdec.ptr529 = getelementptr inbounds i8, i8* %374, i32 1
  store i8* %incdec.ptr529, i8** %s, align 8
  br label %while.cond.458

while.end.530:                                    ; preds = %if.then.514, %lor.end.486
  %375 = load i8*, i8** %chophere, align 8
  %376 = load i8*, i8** %item, align 8
  %sub.ptr.lhs.cast531 = ptrtoint i8* %375 to i64
  %sub.ptr.rhs.cast532 = ptrtoint i8* %376 to i64
  %sub.ptr.sub533 = sub i64 %sub.ptr.lhs.cast531, %sub.ptr.rhs.cast532
  %conv534 = trunc i64 %sub.ptr.sub533 to i32
  store i32 %conv534, i32* %itemsize, align 4
  br label %if.end.535

if.end.535:                                       ; preds = %while.end.530, %while.end.454
  br label %sw.epilog.1089

sw.bb.536:                                        ; preds = %for.cond
  %377 = load i32, i32* %fieldsize, align 4
  %378 = load i32, i32* %itemsize, align 4
  %sub = sub nsw i32 %377, %378
  store i32 %sub, i32* %arg, align 4
  %379 = load i32, i32* %arg, align 4
  %tobool537 = icmp ne i32 %379, 0
  br i1 %tobool537, label %if.then.538, label %if.end.547

if.then.538:                                      ; preds = %sw.bb.536
  %380 = load i32, i32* %arg, align 4
  %381 = load i32, i32* %fieldsize, align 4
  %sub539 = sub nsw i32 %381, %380
  store i32 %sub539, i32* %fieldsize, align 4
  br label %while.cond.540

while.cond.540:                                   ; preds = %while.body.544, %if.then.538
  %382 = load i32, i32* %arg, align 4
  %dec541 = add nsw i32 %382, -1
  store i32 %dec541, i32* %arg, align 4
  %cmp542 = icmp sgt i32 %382, 0
  br i1 %cmp542, label %while.body.544, label %while.end.546

while.body.544:                                   ; preds = %while.cond.540
  %383 = load i8*, i8** %t, align 8
  %incdec.ptr545 = getelementptr inbounds i8, i8* %383, i32 1
  store i8* %incdec.ptr545, i8** %t, align 8
  store i8 32, i8* %383, align 1
  br label %while.cond.540

while.end.546:                                    ; preds = %while.cond.540
  br label %if.end.547

if.end.547:                                       ; preds = %while.end.546, %sw.bb.536
  br label %sw.epilog.1089

sw.bb.548:                                        ; preds = %for.cond
  %384 = load i32, i32* %fieldsize, align 4
  %385 = load i32, i32* %itemsize, align 4
  %sub549 = sub nsw i32 %384, %385
  store i32 %sub549, i32* %arg, align 4
  %386 = load i32, i32* %arg, align 4
  %tobool550 = icmp ne i32 %386, 0
  br i1 %tobool550, label %if.then.551, label %if.end.560

if.then.551:                                      ; preds = %sw.bb.548
  %387 = load i32, i32* %arg, align 4
  %div = sdiv i32 %387, 2
  store i32 %div, i32* %arg, align 4
  %388 = load i32, i32* %arg, align 4
  %389 = load i32, i32* %fieldsize, align 4
  %sub552 = sub nsw i32 %389, %388
  store i32 %sub552, i32* %fieldsize, align 4
  br label %while.cond.553

while.cond.553:                                   ; preds = %while.body.557, %if.then.551
  %390 = load i32, i32* %arg, align 4
  %dec554 = add nsw i32 %390, -1
  store i32 %dec554, i32* %arg, align 4
  %cmp555 = icmp sgt i32 %390, 0
  br i1 %cmp555, label %while.body.557, label %while.end.559

while.body.557:                                   ; preds = %while.cond.553
  %391 = load i8*, i8** %t, align 8
  %incdec.ptr558 = getelementptr inbounds i8, i8* %391, i32 1
  store i8* %incdec.ptr558, i8** %t, align 8
  store i8 32, i8* %391, align 1
  br label %while.cond.553

while.end.559:                                    ; preds = %while.cond.553
  br label %if.end.560

if.end.560:                                       ; preds = %while.end.559, %sw.bb.548
  br label %sw.epilog.1089

sw.bb.561:                                        ; preds = %for.cond
  %392 = load i32, i32* %itemsize, align 4
  store i32 %392, i32* %arg, align 4
  %393 = load i8*, i8** %item, align 8
  store i8* %393, i8** %s, align 8
  %394 = load i8, i8* %item_is_utf8, align 1
  %tobool562 = icmp ne i8 %394, 0
  br i1 %tobool562, label %if.then.563, label %if.end.646

if.then.563:                                      ; preds = %sw.bb.561
  %395 = load i8, i8* %targ_is_utf8, align 1
  %tobool564 = icmp ne i8 %395, 0
  br i1 %tobool564, label %if.end.599, label %if.then.565

if.then.565:                                      ; preds = %if.then.563
  %396 = load i8*, i8** %t, align 8
  %397 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %sv_any567 = getelementptr inbounds %struct.sv, %struct.sv* %397, i32 0, i32 0
  %398 = load i8*, i8** %sv_any567, align 8
  %399 = bitcast i8* %398 to %struct.xpv*
  %xpv_pv568 = getelementptr inbounds %struct.xpv, %struct.xpv* %399, i32 0, i32 0
  %400 = load i8*, i8** %xpv_pv568, align 8
  %sub.ptr.lhs.cast569 = ptrtoint i8* %396 to i64
  %sub.ptr.rhs.cast570 = ptrtoint i8* %400 to i64
  %sub.ptr.sub571 = sub i64 %sub.ptr.lhs.cast569, %sub.ptr.rhs.cast570
  %401 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %sv_any572 = getelementptr inbounds %struct.sv, %struct.sv* %401, i32 0, i32 0
  %402 = load i8*, i8** %sv_any572, align 8
  %403 = bitcast i8* %402 to %struct.xpv*
  %xpv_cur573 = getelementptr inbounds %struct.xpv, %struct.xpv* %403, i32 0, i32 1
  store i64 %sub.ptr.sub571, i64* %xpv_cur573, align 8
  store i64 %sub.ptr.sub571, i64* %tmp566
  %404 = load i64, i64* %tmp566
  %405 = load i8*, i8** %t, align 8
  store i8 0, i8* %405, align 1
  %406 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %call574 = call i64 @Perl_sv_utf8_upgrade_flags(%struct.sv* %406, i32 2)
  %407 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %sv_any575 = getelementptr inbounds %struct.sv, %struct.sv* %407, i32 0, i32 0
  %408 = load i8*, i8** %sv_any575, align 8
  %409 = bitcast i8* %408 to %struct.xpv*
  %xpv_len576 = getelementptr inbounds %struct.xpv, %struct.xpv* %409, i32 0, i32 2
  %410 = load i64, i64* %xpv_len576, align 8
  %411 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %sv_any577 = getelementptr inbounds %struct.sv, %struct.sv* %411, i32 0, i32 0
  %412 = load i8*, i8** %sv_any577, align 8
  %413 = bitcast i8* %412 to %struct.xpv*
  %xpv_cur578 = getelementptr inbounds %struct.xpv, %struct.xpv* %413, i32 0, i32 1
  %414 = load i64, i64* %xpv_cur578, align 8
  %415 = load i64, i64* %fudge, align 8
  %add579 = add i64 %414, %415
  %add580 = add i64 %add579, 1
  %cmp581 = icmp ult i64 %410, %add580
  br i1 %cmp581, label %cond.true.583, label %cond.false.589

cond.true.583:                                    ; preds = %if.then.565
  %416 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %417 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %sv_any584 = getelementptr inbounds %struct.sv, %struct.sv* %417, i32 0, i32 0
  %418 = load i8*, i8** %sv_any584, align 8
  %419 = bitcast i8* %418 to %struct.xpv*
  %xpv_cur585 = getelementptr inbounds %struct.xpv, %struct.xpv* %419, i32 0, i32 1
  %420 = load i64, i64* %xpv_cur585, align 8
  %421 = load i64, i64* %fudge, align 8
  %add586 = add i64 %420, %421
  %add587 = add i64 %add586, 1
  %call588 = call i8* @Perl_sv_grow(%struct.sv* %416, i64 %add587)
  br label %cond.end.592

cond.false.589:                                   ; preds = %if.then.565
  %422 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %sv_any590 = getelementptr inbounds %struct.sv, %struct.sv* %422, i32 0, i32 0
  %423 = load i8*, i8** %sv_any590, align 8
  %424 = bitcast i8* %423 to %struct.xpv*
  %xpv_pv591 = getelementptr inbounds %struct.xpv, %struct.xpv* %424, i32 0, i32 0
  %425 = load i8*, i8** %xpv_pv591, align 8
  br label %cond.end.592

cond.end.592:                                     ; preds = %cond.false.589, %cond.true.583
  %cond593 = phi i8* [ %call588, %cond.true.583 ], [ %425, %cond.false.589 ]
  %426 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %sv_any594 = getelementptr inbounds %struct.sv, %struct.sv* %426, i32 0, i32 0
  %427 = load i8*, i8** %sv_any594, align 8
  %428 = bitcast i8* %427 to %struct.xpv*
  %xpv_pv595 = getelementptr inbounds %struct.xpv, %struct.xpv* %428, i32 0, i32 0
  %429 = load i8*, i8** %xpv_pv595, align 8
  %430 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %sv_any596 = getelementptr inbounds %struct.sv, %struct.sv* %430, i32 0, i32 0
  %431 = load i8*, i8** %sv_any596, align 8
  %432 = bitcast i8* %431 to %struct.xpv*
  %xpv_cur597 = getelementptr inbounds %struct.xpv, %struct.xpv* %432, i32 0, i32 1
  %433 = load i64, i64* %xpv_cur597, align 8
  %add.ptr598 = getelementptr inbounds i8, i8* %429, i64 %433
  store i8* %add.ptr598, i8** %t, align 8
  store i8 1, i8* %targ_is_utf8, align 1
  br label %if.end.599

if.end.599:                                       ; preds = %cond.end.592, %if.then.563
  br label %while.cond.600

while.cond.600:                                   ; preds = %if.end.644, %if.end.599
  %434 = load i32, i32* %arg, align 4
  %dec601 = add nsw i32 %434, -1
  store i32 %dec601, i32* %arg, align 4
  %tobool602 = icmp ne i32 %434, 0
  br i1 %tobool602, label %while.body.603, label %while.end.645

while.body.603:                                   ; preds = %while.cond.600
  %435 = load i8*, i8** %s, align 8
  %436 = load i8, i8* %435, align 1
  %conv604 = zext i8 %436 to i32
  %and605 = and i32 %conv604, 128
  %tobool606 = icmp ne i32 %and605, 0
  br i1 %tobool606, label %if.then.607, label %if.else.635

if.then.607:                                      ; preds = %while.body.603
  %437 = load i8*, i8** %s, align 8
  %438 = load i8, i8* %437, align 1
  %idxprom = zext i8 %438 to i64
  %arrayidx609 = getelementptr inbounds [0 x i8], [0 x i8]* @PL_utf8skip, i32 0, i64 %idxprom
  %439 = load i8, i8* %arrayidx609, align 1
  %conv610 = zext i8 %439 to i64
  store i64 %conv610, i64* %skip, align 8
  %440 = load i64, i64* %skip, align 8
  switch i64 %440, label %sw.default [
    i64 7, label %sw.bb.614
    i64 6, label %sw.bb.617
    i64 5, label %sw.bb.620
    i64 4, label %sw.bb.623
    i64 3, label %sw.bb.626
    i64 2, label %sw.bb.629
    i64 1, label %sw.bb.632
  ]

sw.default:                                       ; preds = %if.then.607
  %441 = load i8*, i8** %t, align 8
  %442 = load i8*, i8** %s, align 8
  %443 = load i64, i64* %skip, align 8
  %mul611 = mul i64 %443, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %441, i8* %442, i64 %mul611, i32 1, i1 false)
  %444 = load i64, i64* %skip, align 8
  %445 = load i8*, i8** %s, align 8
  %add.ptr612 = getelementptr inbounds i8, i8* %445, i64 %444
  store i8* %add.ptr612, i8** %s, align 8
  %446 = load i64, i64* %skip, align 8
  %447 = load i8*, i8** %t, align 8
  %add.ptr613 = getelementptr inbounds i8, i8* %447, i64 %446
  store i8* %add.ptr613, i8** %t, align 8
  br label %sw.epilog

sw.bb.614:                                        ; preds = %if.then.607
  %448 = load i8*, i8** %s, align 8
  %incdec.ptr615 = getelementptr inbounds i8, i8* %448, i32 1
  store i8* %incdec.ptr615, i8** %s, align 8
  %449 = load i8, i8* %448, align 1
  %450 = load i8*, i8** %t, align 8
  %incdec.ptr616 = getelementptr inbounds i8, i8* %450, i32 1
  store i8* %incdec.ptr616, i8** %t, align 8
  store i8 %449, i8* %450, align 1
  br label %sw.bb.617

sw.bb.617:                                        ; preds = %if.then.607, %sw.bb.614
  %451 = load i8*, i8** %s, align 8
  %incdec.ptr618 = getelementptr inbounds i8, i8* %451, i32 1
  store i8* %incdec.ptr618, i8** %s, align 8
  %452 = load i8, i8* %451, align 1
  %453 = load i8*, i8** %t, align 8
  %incdec.ptr619 = getelementptr inbounds i8, i8* %453, i32 1
  store i8* %incdec.ptr619, i8** %t, align 8
  store i8 %452, i8* %453, align 1
  br label %sw.bb.620

sw.bb.620:                                        ; preds = %if.then.607, %sw.bb.617
  %454 = load i8*, i8** %s, align 8
  %incdec.ptr621 = getelementptr inbounds i8, i8* %454, i32 1
  store i8* %incdec.ptr621, i8** %s, align 8
  %455 = load i8, i8* %454, align 1
  %456 = load i8*, i8** %t, align 8
  %incdec.ptr622 = getelementptr inbounds i8, i8* %456, i32 1
  store i8* %incdec.ptr622, i8** %t, align 8
  store i8 %455, i8* %456, align 1
  br label %sw.bb.623

sw.bb.623:                                        ; preds = %if.then.607, %sw.bb.620
  %457 = load i8*, i8** %s, align 8
  %incdec.ptr624 = getelementptr inbounds i8, i8* %457, i32 1
  store i8* %incdec.ptr624, i8** %s, align 8
  %458 = load i8, i8* %457, align 1
  %459 = load i8*, i8** %t, align 8
  %incdec.ptr625 = getelementptr inbounds i8, i8* %459, i32 1
  store i8* %incdec.ptr625, i8** %t, align 8
  store i8 %458, i8* %459, align 1
  br label %sw.bb.626

sw.bb.626:                                        ; preds = %if.then.607, %sw.bb.623
  %460 = load i8*, i8** %s, align 8
  %incdec.ptr627 = getelementptr inbounds i8, i8* %460, i32 1
  store i8* %incdec.ptr627, i8** %s, align 8
  %461 = load i8, i8* %460, align 1
  %462 = load i8*, i8** %t, align 8
  %incdec.ptr628 = getelementptr inbounds i8, i8* %462, i32 1
  store i8* %incdec.ptr628, i8** %t, align 8
  store i8 %461, i8* %462, align 1
  br label %sw.bb.629

sw.bb.629:                                        ; preds = %if.then.607, %sw.bb.626
  %463 = load i8*, i8** %s, align 8
  %incdec.ptr630 = getelementptr inbounds i8, i8* %463, i32 1
  store i8* %incdec.ptr630, i8** %s, align 8
  %464 = load i8, i8* %463, align 1
  %465 = load i8*, i8** %t, align 8
  %incdec.ptr631 = getelementptr inbounds i8, i8* %465, i32 1
  store i8* %incdec.ptr631, i8** %t, align 8
  store i8 %464, i8* %465, align 1
  br label %sw.bb.632

sw.bb.632:                                        ; preds = %if.then.607, %sw.bb.629
  %466 = load i8*, i8** %s, align 8
  %incdec.ptr633 = getelementptr inbounds i8, i8* %466, i32 1
  store i8* %incdec.ptr633, i8** %s, align 8
  %467 = load i8, i8* %466, align 1
  %468 = load i8*, i8** %t, align 8
  %incdec.ptr634 = getelementptr inbounds i8, i8* %468, i32 1
  store i8* %incdec.ptr634, i8** %t, align 8
  store i8 %467, i8* %468, align 1
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.bb.632, %sw.default
  br label %if.end.644

if.else.635:                                      ; preds = %while.body.603
  %469 = load i8*, i8** %s, align 8
  %incdec.ptr636 = getelementptr inbounds i8, i8* %469, i32 1
  store i8* %incdec.ptr636, i8** %s, align 8
  %470 = load i8, i8* %469, align 1
  %471 = load i8*, i8** %t, align 8
  %incdec.ptr637 = getelementptr inbounds i8, i8* %471, i32 1
  store i8* %incdec.ptr637, i8** %t, align 8
  store i8 %470, i8* %471, align 1
  %conv638 = sext i8 %470 to i32
  %and639 = and i32 %conv638, -32
  %tobool640 = icmp ne i32 %and639, 0
  br i1 %tobool640, label %if.end.643, label %if.then.641

if.then.641:                                      ; preds = %if.else.635
  %472 = load i8*, i8** %t, align 8
  %arrayidx642 = getelementptr inbounds i8, i8* %472, i64 -1
  store i8 32, i8* %arrayidx642, align 1
  br label %if.end.643

if.end.643:                                       ; preds = %if.then.641, %if.else.635
  br label %if.end.644

if.end.644:                                       ; preds = %if.end.643, %sw.epilog
  br label %while.cond.600

while.end.645:                                    ; preds = %while.cond.600
  br label %sw.epilog.1089

if.end.646:                                       ; preds = %sw.bb.561
  %473 = load i8, i8* %targ_is_utf8, align 1
  %conv647 = sext i8 %473 to i32
  %tobool648 = icmp ne i32 %conv647, 0
  br i1 %tobool648, label %land.lhs.true.649, label %if.end.685

land.lhs.true.649:                                ; preds = %if.end.646
  %474 = load i8, i8* %item_is_utf8, align 1
  %tobool650 = icmp ne i8 %474, 0
  br i1 %tobool650, label %if.end.685, label %if.then.651

if.then.651:                                      ; preds = %land.lhs.true.649
  %475 = load i8*, i8** %t, align 8
  %476 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %sv_any653 = getelementptr inbounds %struct.sv, %struct.sv* %476, i32 0, i32 0
  %477 = load i8*, i8** %sv_any653, align 8
  %478 = bitcast i8* %477 to %struct.xpv*
  %xpv_pv654 = getelementptr inbounds %struct.xpv, %struct.xpv* %478, i32 0, i32 0
  %479 = load i8*, i8** %xpv_pv654, align 8
  %sub.ptr.lhs.cast655 = ptrtoint i8* %475 to i64
  %sub.ptr.rhs.cast656 = ptrtoint i8* %479 to i64
  %sub.ptr.sub657 = sub i64 %sub.ptr.lhs.cast655, %sub.ptr.rhs.cast656
  %480 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %sv_any658 = getelementptr inbounds %struct.sv, %struct.sv* %480, i32 0, i32 0
  %481 = load i8*, i8** %sv_any658, align 8
  %482 = bitcast i8* %481 to %struct.xpv*
  %xpv_cur659 = getelementptr inbounds %struct.xpv, %struct.xpv* %482, i32 0, i32 1
  store i64 %sub.ptr.sub657, i64* %xpv_cur659, align 8
  store i64 %sub.ptr.sub657, i64* %tmp652
  %483 = load i64, i64* %tmp652
  %484 = load i8*, i8** %t, align 8
  store i8 0, i8* %484, align 1
  %485 = load %struct.sv*, %struct.sv** %nsv, align 8
  %tobool660 = icmp ne %struct.sv* %485, null
  br i1 %tobool660, label %if.else.665, label %if.then.661

if.then.661:                                      ; preds = %if.then.651
  %486 = load i8*, i8** %s, align 8
  %487 = load i32, i32* %arg, align 4
  %conv662 = sext i32 %487 to i64
  %call663 = call %struct.sv* @Perl_newSVpvn(i8* %486, i64 %conv662)
  %call664 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call663)
  store %struct.sv* %call664, %struct.sv** %nsv, align 8
  br label %if.end.667

if.else.665:                                      ; preds = %if.then.651
  %488 = load %struct.sv*, %struct.sv** %nsv, align 8
  %489 = load i8*, i8** %s, align 8
  %490 = load i32, i32* %arg, align 4
  %conv666 = sext i32 %490 to i64
  call void @Perl_sv_setpvn(%struct.sv* %488, i8* %489, i64 %conv666)
  br label %if.end.667

if.end.667:                                       ; preds = %if.else.665, %if.then.661
  %491 = load %struct.sv*, %struct.sv** %nsv, align 8
  %sv_flags668 = getelementptr inbounds %struct.sv, %struct.sv* %491, i32 0, i32 2
  %492 = load i32, i32* %sv_flags668, align 4
  %and669 = and i32 %492, -536870913
  store i32 %and669, i32* %sv_flags668, align 4
  %493 = load %struct.sv*, %struct.sv** %nsv, align 8
  %call670 = call i64 @Perl_sv_utf8_upgrade_flags(%struct.sv* %493, i32 2)
  %494 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %495 = load %struct.sv*, %struct.sv** %nsv, align 8
  call void @Perl_sv_catsv_flags(%struct.sv* %494, %struct.sv* %495, i32 2)
  br label %for.cond.671

for.cond.671:                                     ; preds = %for.inc, %if.end.667
  %496 = load i8*, i8** %t, align 8
  %497 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %sv_any672 = getelementptr inbounds %struct.sv, %struct.sv* %497, i32 0, i32 0
  %498 = load i8*, i8** %sv_any672, align 8
  %499 = bitcast i8* %498 to %struct.xpv*
  %xpv_pv673 = getelementptr inbounds %struct.xpv, %struct.xpv* %499, i32 0, i32 0
  %500 = load i8*, i8** %xpv_pv673, align 8
  %501 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %sv_any674 = getelementptr inbounds %struct.sv, %struct.sv* %501, i32 0, i32 0
  %502 = load i8*, i8** %sv_any674, align 8
  %503 = bitcast i8* %502 to %struct.xpv*
  %xpv_cur675 = getelementptr inbounds %struct.xpv, %struct.xpv* %503, i32 0, i32 1
  %504 = load i64, i64* %xpv_cur675, align 8
  %add.ptr676 = getelementptr inbounds i8, i8* %500, i64 %504
  %cmp677 = icmp ult i8* %496, %add.ptr676
  br i1 %cmp677, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond.671
  %505 = load i8*, i8** %t, align 8
  %506 = load i8, i8* %505, align 1
  %conv679 = sext i8 %506 to i32
  %and680 = and i32 %conv679, -32
  %tobool681 = icmp ne i32 %and680, 0
  br i1 %tobool681, label %if.end.683, label %if.then.682

if.then.682:                                      ; preds = %for.body
  %507 = load i8*, i8** %t, align 8
  store i8 32, i8* %507, align 1
  br label %if.end.683

if.end.683:                                       ; preds = %if.then.682, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.683
  %508 = load i8*, i8** %t, align 8
  %incdec.ptr684 = getelementptr inbounds i8, i8* %508, i32 1
  store i8* %incdec.ptr684, i8** %t, align 8
  br label %for.cond.671

for.end:                                          ; preds = %for.cond.671
  br label %sw.epilog.1089

if.end.685:                                       ; preds = %land.lhs.true.649, %if.end.646
  br label %while.cond.686

while.cond.686:                                   ; preds = %if.end.697, %if.end.685
  %509 = load i32, i32* %arg, align 4
  %dec687 = add nsw i32 %509, -1
  store i32 %dec687, i32* %arg, align 4
  %tobool688 = icmp ne i32 %509, 0
  br i1 %tobool688, label %while.body.689, label %while.end.698

while.body.689:                                   ; preds = %while.cond.686
  %510 = load i8*, i8** %s, align 8
  %incdec.ptr690 = getelementptr inbounds i8, i8* %510, i32 1
  store i8* %incdec.ptr690, i8** %s, align 8
  %511 = load i8, i8* %510, align 1
  %512 = load i8*, i8** %t, align 8
  %incdec.ptr691 = getelementptr inbounds i8, i8* %512, i32 1
  store i8* %incdec.ptr691, i8** %t, align 8
  store i8 %511, i8* %512, align 1
  %conv692 = sext i8 %511 to i32
  %and693 = and i32 %conv692, -32
  %tobool694 = icmp ne i32 %and693, 0
  br i1 %tobool694, label %if.end.697, label %if.then.695

if.then.695:                                      ; preds = %while.body.689
  %513 = load i8*, i8** %t, align 8
  %arrayidx696 = getelementptr inbounds i8, i8* %513, i64 -1
  store i8 32, i8* %arrayidx696, align 1
  br label %if.end.697

if.end.697:                                       ; preds = %if.then.695, %while.body.689
  br label %while.cond.686

while.end.698:                                    ; preds = %while.cond.686
  br label %sw.epilog.1089

sw.bb.699:                                        ; preds = %for.cond
  %514 = load i8*, i8** %chophere, align 8
  store i8* %514, i8** %s, align 8
  %515 = load i8, i8* %chopspace, align 1
  %tobool700 = icmp ne i8 %515, 0
  br i1 %tobool700, label %if.then.701, label %if.end.730

if.then.701:                                      ; preds = %sw.bb.699
  br label %while.cond.702

while.cond.702:                                   ; preds = %while.body.727, %if.then.701
  %516 = load i8*, i8** %s, align 8
  %517 = load i8, i8* %516, align 1
  %conv703 = sext i8 %517 to i32
  %tobool704 = icmp ne i32 %conv703, 0
  br i1 %tobool704, label %land.rhs.705, label %land.end.726

land.rhs.705:                                     ; preds = %while.cond.702
  %518 = load i8*, i8** %s, align 8
  %519 = load i8, i8* %518, align 1
  %conv706 = sext i8 %519 to i32
  %cmp707 = icmp eq i32 %conv706, 32
  br i1 %cmp707, label %lor.end.725, label %lor.lhs.false.709

lor.lhs.false.709:                                ; preds = %land.rhs.705
  %520 = load i8*, i8** %s, align 8
  %521 = load i8, i8* %520, align 1
  %conv710 = sext i8 %521 to i32
  %cmp711 = icmp eq i32 %conv710, 9
  br i1 %cmp711, label %lor.end.725, label %lor.lhs.false.713

lor.lhs.false.713:                                ; preds = %lor.lhs.false.709
  %522 = load i8*, i8** %s, align 8
  %523 = load i8, i8* %522, align 1
  %conv714 = sext i8 %523 to i32
  %cmp715 = icmp eq i32 %conv714, 10
  br i1 %cmp715, label %lor.end.725, label %lor.lhs.false.717

lor.lhs.false.717:                                ; preds = %lor.lhs.false.713
  %524 = load i8*, i8** %s, align 8
  %525 = load i8, i8* %524, align 1
  %conv718 = sext i8 %525 to i32
  %cmp719 = icmp eq i32 %conv718, 13
  br i1 %cmp719, label %lor.end.725, label %lor.rhs.721

lor.rhs.721:                                      ; preds = %lor.lhs.false.717
  %526 = load i8*, i8** %s, align 8
  %527 = load i8, i8* %526, align 1
  %conv722 = sext i8 %527 to i32
  %cmp723 = icmp eq i32 %conv722, 12
  br label %lor.end.725

lor.end.725:                                      ; preds = %lor.rhs.721, %lor.lhs.false.717, %lor.lhs.false.713, %lor.lhs.false.709, %land.rhs.705
  %528 = phi i1 [ true, %lor.lhs.false.717 ], [ true, %lor.lhs.false.713 ], [ true, %lor.lhs.false.709 ], [ true, %land.rhs.705 ], [ %cmp723, %lor.rhs.721 ]
  br label %land.end.726

land.end.726:                                     ; preds = %lor.end.725, %while.cond.702
  %529 = phi i1 [ false, %while.cond.702 ], [ %528, %lor.end.725 ]
  br i1 %529, label %while.body.727, label %while.end.729

while.body.727:                                   ; preds = %land.end.726
  %530 = load i8*, i8** %s, align 8
  %incdec.ptr728 = getelementptr inbounds i8, i8* %530, i32 1
  store i8* %incdec.ptr728, i8** %s, align 8
  br label %while.cond.702

while.end.729:                                    ; preds = %land.end.726
  br label %if.end.730

if.end.730:                                       ; preds = %while.end.729, %sw.bb.699
  %531 = load %struct.sv*, %struct.sv** %sv, align 8
  %532 = load i8*, i8** %s, align 8
  call void @Perl_sv_chop(%struct.sv* %531, i8* %532)
  %533 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags731 = getelementptr inbounds %struct.sv, %struct.sv* %533, i32 0, i32 2
  %534 = load i32, i32* %sv_flags731, align 4
  %and732 = and i32 %534, 16384
  %tobool733 = icmp ne i32 %and732, 0
  br i1 %tobool733, label %if.then.734, label %if.end.736

if.then.734:                                      ; preds = %if.end.730
  %535 = load %struct.sv*, %struct.sv** %sv, align 8
  %call735 = call i32 @Perl_mg_set(%struct.sv* %535)
  br label %if.end.736

if.end.736:                                       ; preds = %if.then.734, %if.end.730
  br label %sw.epilog.1089

sw.bb.737:                                        ; preds = %for.cond
  store i8 0, i8* %chopspace, align 1
  store i8 1, i8* %oneline, align 1
  br label %ff_line

sw.bb.738:                                        ; preds = %for.cond
  store i8 0, i8* %oneline, align 1
  br label %ff_line

ff_line:                                          ; preds = %sw.bb.738, %sw.bb.737
  %536 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags739 = getelementptr inbounds %struct.sv, %struct.sv* %536, i32 0, i32 2
  %537 = load i32, i32* %sv_flags739, align 4
  %and740 = and i32 %537, 262144
  %cmp741 = icmp eq i32 %and740, 262144
  br i1 %cmp741, label %cond.true.743, label %cond.false.748

cond.true.743:                                    ; preds = %ff_line
  %538 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any744 = getelementptr inbounds %struct.sv, %struct.sv* %538, i32 0, i32 0
  %539 = load i8*, i8** %sv_any744, align 8
  %540 = bitcast i8* %539 to %struct.xpv*
  %xpv_cur745 = getelementptr inbounds %struct.xpv, %struct.xpv* %540, i32 0, i32 1
  %541 = load i64, i64* %xpv_cur745, align 8
  store i64 %541, i64* %len, align 8
  %542 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any746 = getelementptr inbounds %struct.sv, %struct.sv* %542, i32 0, i32 0
  %543 = load i8*, i8** %sv_any746, align 8
  %544 = bitcast i8* %543 to %struct.xpv*
  %xpv_pv747 = getelementptr inbounds %struct.xpv, %struct.xpv* %544, i32 0, i32 0
  %545 = load i8*, i8** %xpv_pv747, align 8
  br label %cond.end.750

cond.false.748:                                   ; preds = %ff_line
  %546 = load %struct.sv*, %struct.sv** %sv, align 8
  %call749 = call i8* @Perl_sv_2pv_flags(%struct.sv* %546, i64* %len, i32 2)
  br label %cond.end.750

cond.end.750:                                     ; preds = %cond.false.748, %cond.true.743
  %cond751 = phi i8* [ %545, %cond.true.743 ], [ %call749, %cond.false.748 ]
  store i8* %cond751, i8** %s, align 8
  store i8* %cond751, i8** %item, align 8
  %547 = load i64, i64* %len, align 8
  %conv752 = trunc i64 %547 to i32
  store i32 %conv752, i32* %itemsize, align 4
  %548 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags753 = getelementptr inbounds %struct.sv, %struct.sv* %548, i32 0, i32 2
  %549 = load i32, i32* %sv_flags753, align 4
  %and754 = and i32 %549, 536870912
  %tobool755 = icmp ne i32 %and754, 0
  br i1 %tobool755, label %land.rhs.756, label %land.end.761

land.rhs.756:                                     ; preds = %cond.end.750
  %550 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %op_private757 = getelementptr inbounds %struct.cop, %struct.cop* %550, i32 0, i32 7
  %551 = load i8, i8* %op_private757, align 1
  %conv758 = zext i8 %551 to i32
  %and759 = and i32 %conv758, 8
  %tobool760 = icmp ne i32 %and759, 0
  %lnot = xor i1 %tobool760, true
  br label %land.end.761

land.end.761:                                     ; preds = %land.rhs.756, %cond.end.750
  %552 = phi i1 [ false, %cond.end.750 ], [ %lnot, %land.rhs.756 ]
  %land.ext = zext i1 %552 to i32
  %conv762 = trunc i32 %land.ext to i8
  store i8 %conv762, i8* %item_is_utf8, align 1
  %tobool763 = icmp ne i8 %conv762, 0
  br i1 %tobool763, label %if.then.764, label %if.end.767

if.then.764:                                      ; preds = %land.end.761
  %553 = load %struct.sv*, %struct.sv** %sv, align 8
  %call765 = call i64 @Perl_sv_len_utf8(%struct.sv* %553)
  %conv766 = trunc i64 %call765 to i32
  store i32 %conv766, i32* %itemsize, align 4
  br label %if.end.767

if.end.767:                                       ; preds = %if.then.764, %land.end.761
  %554 = load i32, i32* %itemsize, align 4
  %tobool768 = icmp ne i32 %554, 0
  br i1 %tobool768, label %if.then.769, label %if.end.859

if.then.769:                                      ; preds = %if.end.767
  store i8 0, i8* %chopped, align 1
  store i8 1, i8* %gotsome, align 1
  %555 = load i8*, i8** %s, align 8
  %556 = load i64, i64* %len, align 8
  %add.ptr771 = getelementptr inbounds i8, i8* %555, i64 %556
  store i8* %add.ptr771, i8** %send, align 8
  %557 = load i8*, i8** %s, align 8
  %558 = load i32, i32* %itemsize, align 4
  %idx.ext772 = sext i32 %558 to i64
  %add.ptr773 = getelementptr inbounds i8, i8* %557, i64 %idx.ext772
  store i8* %add.ptr773, i8** %chophere, align 8
  br label %while.cond.774

while.cond.774:                                   ; preds = %if.end.794, %if.then.769
  %559 = load i8*, i8** %s, align 8
  %560 = load i8*, i8** %send, align 8
  %cmp775 = icmp ult i8* %559, %560
  br i1 %cmp775, label %while.body.777, label %while.end.795

while.body.777:                                   ; preds = %while.cond.774
  %561 = load i8*, i8** %s, align 8
  %incdec.ptr778 = getelementptr inbounds i8, i8* %561, i32 1
  store i8* %incdec.ptr778, i8** %s, align 8
  %562 = load i8, i8* %561, align 1
  %conv779 = sext i8 %562 to i32
  %cmp780 = icmp eq i32 %conv779, 10
  br i1 %cmp780, label %if.then.782, label %if.end.794

if.then.782:                                      ; preds = %while.body.777
  %563 = load i8, i8* %oneline, align 1
  %tobool783 = icmp ne i8 %563, 0
  br i1 %tobool783, label %if.then.784, label %if.else.785

if.then.784:                                      ; preds = %if.then.782
  store i8 1, i8* %chopped, align 1
  %564 = load i8*, i8** %s, align 8
  store i8* %564, i8** %chophere, align 8
  br label %while.end.795

if.else.785:                                      ; preds = %if.then.782
  %565 = load i8*, i8** %s, align 8
  %566 = load i8*, i8** %send, align 8
  %cmp786 = icmp eq i8* %565, %566
  br i1 %cmp786, label %if.then.788, label %if.else.790

if.then.788:                                      ; preds = %if.else.785
  %567 = load i32, i32* %itemsize, align 4
  %dec789 = add nsw i32 %567, -1
  store i32 %dec789, i32* %itemsize, align 4
  store i8 1, i8* %chopped, align 1
  br label %if.end.792

if.else.790:                                      ; preds = %if.else.785
  %568 = load i32, i32* %lines, align 4
  %inc791 = add nsw i32 %568, 1
  store i32 %inc791, i32* %lines, align 4
  br label %if.end.792

if.end.792:                                       ; preds = %if.else.790, %if.then.788
  br label %if.end.793

if.end.793:                                       ; preds = %if.end.792
  br label %if.end.794

if.end.794:                                       ; preds = %if.end.793, %while.body.777
  br label %while.cond.774

while.end.795:                                    ; preds = %if.then.784, %while.cond.774
  %569 = load i8*, i8** %t, align 8
  %570 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %sv_any797 = getelementptr inbounds %struct.sv, %struct.sv* %570, i32 0, i32 0
  %571 = load i8*, i8** %sv_any797, align 8
  %572 = bitcast i8* %571 to %struct.xpv*
  %xpv_pv798 = getelementptr inbounds %struct.xpv, %struct.xpv* %572, i32 0, i32 0
  %573 = load i8*, i8** %xpv_pv798, align 8
  %sub.ptr.lhs.cast799 = ptrtoint i8* %569 to i64
  %sub.ptr.rhs.cast800 = ptrtoint i8* %573 to i64
  %sub.ptr.sub801 = sub i64 %sub.ptr.lhs.cast799, %sub.ptr.rhs.cast800
  %574 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %sv_any802 = getelementptr inbounds %struct.sv, %struct.sv* %574, i32 0, i32 0
  %575 = load i8*, i8** %sv_any802, align 8
  %576 = bitcast i8* %575 to %struct.xpv*
  %xpv_cur803 = getelementptr inbounds %struct.xpv, %struct.xpv* %576, i32 0, i32 1
  store i64 %sub.ptr.sub801, i64* %xpv_cur803, align 8
  store i64 %sub.ptr.sub801, i64* %tmp796
  %577 = load i64, i64* %tmp796
  %578 = load i8, i8* %targ_is_utf8, align 1
  %tobool804 = icmp ne i8 %578, 0
  br i1 %tobool804, label %if.then.805, label %if.end.808

if.then.805:                                      ; preds = %while.end.795
  %579 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %sv_flags806 = getelementptr inbounds %struct.sv, %struct.sv* %579, i32 0, i32 2
  %580 = load i32, i32* %sv_flags806, align 4
  %or807 = or i32 %580, 536870912
  store i32 %or807, i32* %sv_flags806, align 4
  br label %if.end.808

if.end.808:                                       ; preds = %if.then.805, %while.end.795
  %581 = load i8, i8* %oneline, align 1
  %tobool809 = icmp ne i8 %581, 0
  br i1 %tobool809, label %if.then.810, label %if.else.821

if.then.810:                                      ; preds = %if.end.808
  %582 = load i8*, i8** %chophere, align 8
  %583 = load i8*, i8** %item, align 8
  %sub.ptr.lhs.cast812 = ptrtoint i8* %582 to i64
  %sub.ptr.rhs.cast813 = ptrtoint i8* %583 to i64
  %sub.ptr.sub814 = sub i64 %sub.ptr.lhs.cast812, %sub.ptr.rhs.cast813
  %584 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any815 = getelementptr inbounds %struct.sv, %struct.sv* %584, i32 0, i32 0
  %585 = load i8*, i8** %sv_any815, align 8
  %586 = bitcast i8* %585 to %struct.xpv*
  %xpv_cur816 = getelementptr inbounds %struct.xpv, %struct.xpv* %586, i32 0, i32 1
  store i64 %sub.ptr.sub814, i64* %xpv_cur816, align 8
  store i64 %sub.ptr.sub814, i64* %tmp811
  %587 = load i64, i64* %tmp811
  %588 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %589 = load %struct.sv*, %struct.sv** %sv, align 8
  call void @Perl_sv_catsv_flags(%struct.sv* %588, %struct.sv* %589, i32 2)
  %590 = load i32, i32* %itemsize, align 4
  %conv818 = sext i32 %590 to i64
  %591 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any819 = getelementptr inbounds %struct.sv, %struct.sv* %591, i32 0, i32 0
  %592 = load i8*, i8** %sv_any819, align 8
  %593 = bitcast i8* %592 to %struct.xpv*
  %xpv_cur820 = getelementptr inbounds %struct.xpv, %struct.xpv* %593, i32 0, i32 1
  store i64 %conv818, i64* %xpv_cur820, align 8
  store i64 %conv818, i64* %tmp817
  %594 = load i64, i64* %tmp817
  br label %if.end.822

if.else.821:                                      ; preds = %if.end.808
  %595 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %596 = load %struct.sv*, %struct.sv** %sv, align 8
  call void @Perl_sv_catsv_flags(%struct.sv* %595, %struct.sv* %596, i32 2)
  br label %if.end.822

if.end.822:                                       ; preds = %if.else.821, %if.then.810
  %597 = load i8, i8* %chopped, align 1
  %tobool823 = icmp ne i8 %597, 0
  br i1 %tobool823, label %if.then.824, label %if.end.831

if.then.824:                                      ; preds = %if.end.822
  %598 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %sv_any826 = getelementptr inbounds %struct.sv, %struct.sv* %598, i32 0, i32 0
  %599 = load i8*, i8** %sv_any826, align 8
  %600 = bitcast i8* %599 to %struct.xpv*
  %xpv_cur827 = getelementptr inbounds %struct.xpv, %struct.xpv* %600, i32 0, i32 1
  %601 = load i64, i64* %xpv_cur827, align 8
  %sub828 = sub i64 %601, 1
  %602 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %sv_any829 = getelementptr inbounds %struct.sv, %struct.sv* %602, i32 0, i32 0
  %603 = load i8*, i8** %sv_any829, align 8
  %604 = bitcast i8* %603 to %struct.xpv*
  %xpv_cur830 = getelementptr inbounds %struct.xpv, %struct.xpv* %604, i32 0, i32 1
  store i64 %sub828, i64* %xpv_cur830, align 8
  store i64 %sub828, i64* %tmp825
  %605 = load i64, i64* %tmp825
  br label %if.end.831

if.end.831:                                       ; preds = %if.then.824, %if.end.822
  %606 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %sv_any832 = getelementptr inbounds %struct.sv, %struct.sv* %606, i32 0, i32 0
  %607 = load i8*, i8** %sv_any832, align 8
  %608 = bitcast i8* %607 to %struct.xpv*
  %xpv_len833 = getelementptr inbounds %struct.xpv, %struct.xpv* %608, i32 0, i32 2
  %609 = load i64, i64* %xpv_len833, align 8
  %610 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %sv_any834 = getelementptr inbounds %struct.sv, %struct.sv* %610, i32 0, i32 0
  %611 = load i8*, i8** %sv_any834, align 8
  %612 = bitcast i8* %611 to %struct.xpv*
  %xpv_cur835 = getelementptr inbounds %struct.xpv, %struct.xpv* %612, i32 0, i32 1
  %613 = load i64, i64* %xpv_cur835, align 8
  %614 = load i64, i64* %fudge, align 8
  %add836 = add i64 %613, %614
  %add837 = add i64 %add836, 1
  %cmp838 = icmp ult i64 %609, %add837
  br i1 %cmp838, label %cond.true.840, label %cond.false.846

cond.true.840:                                    ; preds = %if.end.831
  %615 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %616 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %sv_any841 = getelementptr inbounds %struct.sv, %struct.sv* %616, i32 0, i32 0
  %617 = load i8*, i8** %sv_any841, align 8
  %618 = bitcast i8* %617 to %struct.xpv*
  %xpv_cur842 = getelementptr inbounds %struct.xpv, %struct.xpv* %618, i32 0, i32 1
  %619 = load i64, i64* %xpv_cur842, align 8
  %620 = load i64, i64* %fudge, align 8
  %add843 = add i64 %619, %620
  %add844 = add i64 %add843, 1
  %call845 = call i8* @Perl_sv_grow(%struct.sv* %615, i64 %add844)
  br label %cond.end.849

cond.false.846:                                   ; preds = %if.end.831
  %621 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %sv_any847 = getelementptr inbounds %struct.sv, %struct.sv* %621, i32 0, i32 0
  %622 = load i8*, i8** %sv_any847, align 8
  %623 = bitcast i8* %622 to %struct.xpv*
  %xpv_pv848 = getelementptr inbounds %struct.xpv, %struct.xpv* %623, i32 0, i32 0
  %624 = load i8*, i8** %xpv_pv848, align 8
  br label %cond.end.849

cond.end.849:                                     ; preds = %cond.false.846, %cond.true.840
  %cond850 = phi i8* [ %call845, %cond.true.840 ], [ %624, %cond.false.846 ]
  %625 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %sv_any851 = getelementptr inbounds %struct.sv, %struct.sv* %625, i32 0, i32 0
  %626 = load i8*, i8** %sv_any851, align 8
  %627 = bitcast i8* %626 to %struct.xpv*
  %xpv_pv852 = getelementptr inbounds %struct.xpv, %struct.xpv* %627, i32 0, i32 0
  %628 = load i8*, i8** %xpv_pv852, align 8
  %629 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %sv_any853 = getelementptr inbounds %struct.sv, %struct.sv* %629, i32 0, i32 0
  %630 = load i8*, i8** %sv_any853, align 8
  %631 = bitcast i8* %630 to %struct.xpv*
  %xpv_cur854 = getelementptr inbounds %struct.xpv, %struct.xpv* %631, i32 0, i32 1
  %632 = load i64, i64* %xpv_cur854, align 8
  %add.ptr855 = getelementptr inbounds i8, i8* %628, i64 %632
  store i8* %add.ptr855, i8** %t, align 8
  %633 = load i8, i8* %item_is_utf8, align 1
  %tobool856 = icmp ne i8 %633, 0
  br i1 %tobool856, label %if.then.857, label %if.end.858

if.then.857:                                      ; preds = %cond.end.849
  store i8 1, i8* %targ_is_utf8, align 1
  br label %if.end.858

if.end.858:                                       ; preds = %if.then.857, %cond.end.849
  br label %if.end.859

if.end.859:                                       ; preds = %if.end.858, %if.end.767
  br label %sw.epilog.1089

sw.bb.860:                                        ; preds = %for.cond
  %634 = load i32*, i32** %fpc, align 8
  %incdec.ptr861 = getelementptr inbounds i32, i32* %634, i32 1
  store i32* %incdec.ptr861, i32** %fpc, align 8
  %635 = load i32, i32* %634, align 4
  store i32 %635, i32* %arg, align 4
  %636 = load i32, i32* %arg, align 4
  %and862 = and i32 %636, 256
  %tobool863 = icmp ne i32 %and862, 0
  %cond864 = select i1 %tobool863, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i32 0, i32 0)
  store i8* %cond864, i8** %fmt, align 8
  br label %ff_dec

sw.bb.865:                                        ; preds = %for.cond
  %637 = load i32*, i32** %fpc, align 8
  %incdec.ptr866 = getelementptr inbounds i32, i32* %637, i32 1
  store i32* %incdec.ptr866, i32** %fpc, align 8
  %638 = load i32, i32* %637, align 4
  store i32 %638, i32* %arg, align 4
  %639 = load i32, i32* %arg, align 4
  %and867 = and i32 %639, 256
  %tobool868 = icmp ne i32 %and867, 0
  %cond869 = select i1 %tobool868, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i32 0, i32 0)
  store i8* %cond869, i8** %fmt, align 8
  br label %ff_dec

ff_dec:                                           ; preds = %sw.bb.865, %sw.bb.860
  %640 = load i32, i32* %arg, align 4
  %and870 = and i32 %640, 512
  %tobool871 = icmp ne i32 %and870, 0
  br i1 %tobool871, label %land.lhs.true.872, label %if.end.883

land.lhs.true.872:                                ; preds = %ff_dec
  %641 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags873 = getelementptr inbounds %struct.sv, %struct.sv* %641, i32 0, i32 2
  %642 = load i32, i32* %sv_flags873, align 4
  %and874 = and i32 %642, 118423552
  %tobool875 = icmp ne i32 %and874, 0
  br i1 %tobool875, label %if.end.883, label %if.then.876

if.then.876:                                      ; preds = %land.lhs.true.872
  %643 = load i32, i32* %fieldsize, align 4
  store i32 %643, i32* %arg, align 4
  br label %while.cond.877

while.cond.877:                                   ; preds = %while.body.880, %if.then.876
  %644 = load i32, i32* %arg, align 4
  %dec878 = add nsw i32 %644, -1
  store i32 %dec878, i32* %arg, align 4
  %tobool879 = icmp ne i32 %644, 0
  br i1 %tobool879, label %while.body.880, label %while.end.882

while.body.880:                                   ; preds = %while.cond.877
  %645 = load i8*, i8** %t, align 8
  %incdec.ptr881 = getelementptr inbounds i8, i8* %645, i32 1
  store i8* %incdec.ptr881, i8** %t, align 8
  store i8 32, i8* %645, align 1
  br label %while.cond.877

while.end.882:                                    ; preds = %while.cond.877
  br label %sw.epilog.1089

if.end.883:                                       ; preds = %land.lhs.true.872, %ff_dec
  store i8 1, i8* %gotsome, align 1
  %646 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags884 = getelementptr inbounds %struct.sv, %struct.sv* %646, i32 0, i32 2
  %647 = load i32, i32* %sv_flags884, align 4
  %and885 = and i32 %647, 131072
  %tobool886 = icmp ne i32 %and885, 0
  br i1 %tobool886, label %cond.true.887, label %cond.false.889

cond.true.887:                                    ; preds = %if.end.883
  %648 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any888 = getelementptr inbounds %struct.sv, %struct.sv* %648, i32 0, i32 0
  %649 = load i8*, i8** %sv_any888, align 8
  %650 = bitcast i8* %649 to %struct.xpvnv*
  %xnv_nv = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %650, i32 0, i32 4
  %651 = load double, double* %xnv_nv, align 8
  br label %cond.end.891

cond.false.889:                                   ; preds = %if.end.883
  %652 = load %struct.sv*, %struct.sv** %sv, align 8
  %call890 = call double @Perl_sv_2nv(%struct.sv* %652)
  br label %cond.end.891

cond.end.891:                                     ; preds = %cond.false.889, %cond.true.887
  %cond892 = phi double [ %651, %cond.true.887 ], [ %call890, %cond.false.889 ]
  store double %cond892, double* %value, align 8
  %653 = load double, double* %value, align 8
  %654 = load i32, i32* %fieldsize, align 4
  %655 = load i32, i32* %arg, align 4
  %call893 = call signext i8 @S_num_overflow(double %653, i32 %654, i32 %655)
  %tobool894 = icmp ne i8 %call893, 0
  br i1 %tobool894, label %if.then.895, label %if.end.902

if.then.895:                                      ; preds = %cond.end.891
  %656 = load i32, i32* %fieldsize, align 4
  store i32 %656, i32* %arg, align 4
  br label %while.cond.896

while.cond.896:                                   ; preds = %while.body.899, %if.then.895
  %657 = load i32, i32* %arg, align 4
  %dec897 = add nsw i32 %657, -1
  store i32 %dec897, i32* %arg, align 4
  %tobool898 = icmp ne i32 %657, 0
  br i1 %tobool898, label %while.body.899, label %while.end.901

while.body.899:                                   ; preds = %while.cond.896
  %658 = load i8*, i8** %t, align 8
  %incdec.ptr900 = getelementptr inbounds i8, i8* %658, i32 1
  store i8* %incdec.ptr900, i8** %t, align 8
  store i8 35, i8* %658, align 1
  br label %while.cond.896

while.end.901:                                    ; preds = %while.cond.896
  br label %sw.epilog.1089

if.end.902:                                       ; preds = %cond.end.891
  %659 = load i8*, i8** %t, align 8
  %660 = load i8*, i8** %fmt, align 8
  %661 = load i32, i32* %fieldsize, align 4
  %662 = load i32, i32* %arg, align 4
  %and903 = and i32 %662, 255
  %663 = load double, double* %value, align 8
  %call904 = call i32 (i8*, i8*, ...) @sprintf(i8* %659, i8* %660, i32 %661, i32 %and903, double %663)
  %664 = load i32, i32* %fieldsize, align 4
  %665 = load i8*, i8** %t, align 8
  %idx.ext905 = sext i32 %664 to i64
  %add.ptr906 = getelementptr inbounds i8, i8* %665, i64 %idx.ext905
  store i8* %add.ptr906, i8** %t, align 8
  br label %sw.epilog.1089

sw.bb.907:                                        ; preds = %for.cond
  %666 = load i8*, i8** %f, align 8
  %incdec.ptr908 = getelementptr inbounds i8, i8* %666, i32 1
  store i8* %incdec.ptr908, i8** %f, align 8
  br label %while.cond.909

while.cond.909:                                   ; preds = %while.body.919, %sw.bb.907
  %667 = load i8*, i8** %t, align 8
  %incdec.ptr910 = getelementptr inbounds i8, i8* %667, i32 -1
  store i8* %incdec.ptr910, i8** %t, align 8
  %668 = load i8*, i8** %linemark, align 8
  %cmp911 = icmp ugt i8* %667, %668
  br i1 %cmp911, label %land.rhs.913, label %land.end.917

land.rhs.913:                                     ; preds = %while.cond.909
  %669 = load i8*, i8** %t, align 8
  %670 = load i8, i8* %669, align 1
  %conv914 = sext i8 %670 to i32
  %cmp915 = icmp eq i32 %conv914, 32
  br label %land.end.917

land.end.917:                                     ; preds = %land.rhs.913, %while.cond.909
  %671 = phi i1 [ false, %while.cond.909 ], [ %cmp915, %land.rhs.913 ]
  br i1 %671, label %while.body.919, label %while.end.920

while.body.919:                                   ; preds = %land.end.917
  br label %while.cond.909

while.end.920:                                    ; preds = %land.end.917
  %672 = load i8*, i8** %t, align 8
  %incdec.ptr921 = getelementptr inbounds i8, i8* %672, i32 1
  store i8* %incdec.ptr921, i8** %t, align 8
  %673 = load i8*, i8** %t, align 8
  %incdec.ptr922 = getelementptr inbounds i8, i8* %673, i32 1
  store i8* %incdec.ptr922, i8** %t, align 8
  store i8 10, i8* %673, align 1
  br label %sw.epilog.1089

sw.bb.923:                                        ; preds = %for.cond
  %674 = load i32*, i32** %fpc, align 8
  %incdec.ptr924 = getelementptr inbounds i32, i32* %674, i32 1
  store i32* %incdec.ptr924, i32** %fpc, align 8
  %675 = load i32, i32* %674, align 4
  store i32 %675, i32* %arg, align 4
  %676 = load i8, i8* %gotsome, align 1
  %tobool925 = icmp ne i8 %676, 0
  br i1 %tobool925, label %if.then.926, label %if.else.969

if.then.926:                                      ; preds = %sw.bb.923
  %677 = load i32, i32* %arg, align 4
  %tobool927 = icmp ne i32 %677, 0
  br i1 %tobool927, label %if.then.928, label %if.end.968

if.then.928:                                      ; preds = %if.then.926
  %678 = load i8*, i8** %t, align 8
  store i8 0, i8* %678, align 1
  %679 = load i8*, i8** %t, align 8
  %680 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %sv_any930 = getelementptr inbounds %struct.sv, %struct.sv* %680, i32 0, i32 0
  %681 = load i8*, i8** %sv_any930, align 8
  %682 = bitcast i8* %681 to %struct.xpv*
  %xpv_pv931 = getelementptr inbounds %struct.xpv, %struct.xpv* %682, i32 0, i32 0
  %683 = load i8*, i8** %xpv_pv931, align 8
  %sub.ptr.lhs.cast932 = ptrtoint i8* %679 to i64
  %sub.ptr.rhs.cast933 = ptrtoint i8* %683 to i64
  %sub.ptr.sub934 = sub i64 %sub.ptr.lhs.cast932, %sub.ptr.rhs.cast933
  %684 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %sv_any935 = getelementptr inbounds %struct.sv, %struct.sv* %684, i32 0, i32 0
  %685 = load i8*, i8** %sv_any935, align 8
  %686 = bitcast i8* %685 to %struct.xpv*
  %xpv_cur936 = getelementptr inbounds %struct.xpv, %struct.xpv* %686, i32 0, i32 1
  store i64 %sub.ptr.sub934, i64* %xpv_cur936, align 8
  store i64 %sub.ptr.sub934, i64* %tmp929
  %687 = load i64, i64* %tmp929
  %688 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %sv_any937 = getelementptr inbounds %struct.sv, %struct.sv* %688, i32 0, i32 0
  %689 = load i8*, i8** %sv_any937, align 8
  %690 = bitcast i8* %689 to %struct.xpvfm*
  %xfm_lines = getelementptr inbounds %struct.xpvfm, %struct.xpvfm* %690, i32 0, i32 19
  %691 = load i64, i64* %xfm_lines, align 8
  %692 = load i32, i32* %lines, align 4
  %conv938 = sext i32 %692 to i64
  %add939 = add nsw i64 %conv938, %691
  %conv940 = trunc i64 %add939 to i32
  store i32 %conv940, i32* %lines, align 4
  %693 = load i32, i32* %lines, align 4
  %cmp941 = icmp eq i32 %693, 200
  br i1 %cmp941, label %if.then.943, label %if.end.957

if.then.943:                                      ; preds = %if.then.928
  %694 = load i8*, i8** %t, align 8
  %695 = load i8*, i8** %linemark, align 8
  %sub.ptr.lhs.cast944 = ptrtoint i8* %694 to i64
  %sub.ptr.rhs.cast945 = ptrtoint i8* %695 to i64
  %sub.ptr.sub946 = sub i64 %sub.ptr.lhs.cast944, %sub.ptr.rhs.cast945
  %conv947 = trunc i64 %sub.ptr.sub946 to i32
  store i32 %conv947, i32* %arg, align 4
  %696 = load i8*, i8** %linemark, align 8
  %697 = load i8*, i8** %linemark, align 8
  %698 = load i32, i32* %arg, align 4
  %idx.ext948 = sext i32 %698 to i64
  %idx.neg949 = sub i64 0, %idx.ext948
  %add.ptr950 = getelementptr inbounds i8, i8* %697, i64 %idx.neg949
  %699 = load i32, i32* %arg, align 4
  %conv951 = sext i32 %699 to i64
  %call952 = call i32 @strncmp(i8* %696, i8* %add.ptr950, i64 %conv951)
  %tobool953 = icmp ne i32 %call952, 0
  br i1 %tobool953, label %if.end.956, label %if.then.954

if.then.954:                                      ; preds = %if.then.943
  %call955 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.7, i32 0, i32 0))
  store %struct.op* %call955, %struct.op** %retval
  br label %return

if.end.956:                                       ; preds = %if.then.943
  br label %if.end.957

if.end.957:                                       ; preds = %if.end.956, %if.then.928
  %700 = load i8, i8* %targ_is_utf8, align 1
  %tobool958 = icmp ne i8 %700, 0
  br i1 %tobool958, label %if.then.959, label %if.end.962

if.then.959:                                      ; preds = %if.end.957
  %701 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %sv_flags960 = getelementptr inbounds %struct.sv, %struct.sv* %701, i32 0, i32 2
  %702 = load i32, i32* %sv_flags960, align 4
  %or961 = or i32 %702, 536870912
  store i32 %or961, i32* %sv_flags960, align 4
  br label %if.end.962

if.end.962:                                       ; preds = %if.then.959, %if.end.957
  %703 = load i32, i32* %lines, align 4
  %conv963 = sext i32 %703 to i64
  %704 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %sv_any964 = getelementptr inbounds %struct.sv, %struct.sv* %704, i32 0, i32 0
  %705 = load i8*, i8** %sv_any964, align 8
  %706 = bitcast i8* %705 to %struct.xpvfm*
  %xfm_lines965 = getelementptr inbounds %struct.xpvfm, %struct.xpvfm* %706, i32 0, i32 19
  store i64 %conv963, i64* %xfm_lines965, align 8
  %707 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %708 = load i32, i32* %origmark, align 4
  %idx.ext966 = sext i32 %708 to i64
  %add.ptr967 = getelementptr inbounds %struct.sv*, %struct.sv** %707, i64 %idx.ext966
  store %struct.sv** %add.ptr967, %struct.sv*** %sp, align 8
  %709 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %709, %struct.sv*** @PL_stack_sp, align 8
  %710 = load %struct.op*, %struct.op** @PL_op, align 8
  %711 = bitcast %struct.op* %710 to %struct.listop*
  %op_first = getelementptr inbounds %struct.listop, %struct.listop* %711, i32 0, i32 8
  %712 = load %struct.op*, %struct.op** %op_first, align 8
  store %struct.op* %712, %struct.op** %retval
  br label %return

if.end.968:                                       ; preds = %if.then.926
  br label %if.end.971

if.else.969:                                      ; preds = %sw.bb.923
  %713 = load i8*, i8** %linemark, align 8
  store i8* %713, i8** %t, align 8
  %714 = load i32, i32* %lines, align 4
  %dec970 = add nsw i32 %714, -1
  store i32 %dec970, i32* %lines, align 4
  br label %if.end.971

if.end.971:                                       ; preds = %if.else.969, %if.end.968
  br label %sw.epilog.1089

sw.bb.972:                                        ; preds = %for.cond
  %715 = load i8*, i8** %chophere, align 8
  store i8* %715, i8** %s, align 8
  %716 = load i8*, i8** %item, align 8
  %717 = load i64, i64* %len, align 8
  %add.ptr973 = getelementptr inbounds i8, i8* %716, i64 %717
  store i8* %add.ptr973, i8** %send, align 8
  %718 = load i8, i8* %chopspace, align 1
  %tobool974 = icmp ne i8 %718, 0
  br i1 %tobool974, label %if.then.975, label %if.end.1007

if.then.975:                                      ; preds = %sw.bb.972
  br label %while.cond.976

while.cond.976:                                   ; preds = %while.body.1004, %if.then.975
  %719 = load i8*, i8** %s, align 8
  %720 = load i8, i8* %719, align 1
  %conv977 = sext i8 %720 to i32
  %tobool978 = icmp ne i32 %conv977, 0
  br i1 %tobool978, label %land.lhs.true.979, label %land.end.1002

land.lhs.true.979:                                ; preds = %while.cond.976
  %721 = load i8*, i8** %s, align 8
  %722 = load i8, i8* %721, align 1
  %conv980 = sext i8 %722 to i32
  %cmp981 = icmp eq i32 %conv980, 32
  br i1 %cmp981, label %land.rhs.999, label %lor.lhs.false.983

lor.lhs.false.983:                                ; preds = %land.lhs.true.979
  %723 = load i8*, i8** %s, align 8
  %724 = load i8, i8* %723, align 1
  %conv984 = sext i8 %724 to i32
  %cmp985 = icmp eq i32 %conv984, 9
  br i1 %cmp985, label %land.rhs.999, label %lor.lhs.false.987

lor.lhs.false.987:                                ; preds = %lor.lhs.false.983
  %725 = load i8*, i8** %s, align 8
  %726 = load i8, i8* %725, align 1
  %conv988 = sext i8 %726 to i32
  %cmp989 = icmp eq i32 %conv988, 10
  br i1 %cmp989, label %land.rhs.999, label %lor.lhs.false.991

lor.lhs.false.991:                                ; preds = %lor.lhs.false.987
  %727 = load i8*, i8** %s, align 8
  %728 = load i8, i8* %727, align 1
  %conv992 = sext i8 %728 to i32
  %cmp993 = icmp eq i32 %conv992, 13
  br i1 %cmp993, label %land.rhs.999, label %lor.lhs.false.995

lor.lhs.false.995:                                ; preds = %lor.lhs.false.991
  %729 = load i8*, i8** %s, align 8
  %730 = load i8, i8* %729, align 1
  %conv996 = sext i8 %730 to i32
  %cmp997 = icmp eq i32 %conv996, 12
  br i1 %cmp997, label %land.rhs.999, label %land.end.1002

land.rhs.999:                                     ; preds = %lor.lhs.false.995, %lor.lhs.false.991, %lor.lhs.false.987, %lor.lhs.false.983, %land.lhs.true.979
  %731 = load i8*, i8** %s, align 8
  %732 = load i8*, i8** %send, align 8
  %cmp1000 = icmp ult i8* %731, %732
  br label %land.end.1002

land.end.1002:                                    ; preds = %land.rhs.999, %lor.lhs.false.995, %while.cond.976
  %733 = phi i1 [ false, %lor.lhs.false.995 ], [ false, %while.cond.976 ], [ %cmp1000, %land.rhs.999 ]
  br i1 %733, label %while.body.1004, label %while.end.1006

while.body.1004:                                  ; preds = %land.end.1002
  %734 = load i8*, i8** %s, align 8
  %incdec.ptr1005 = getelementptr inbounds i8, i8* %734, i32 1
  store i8* %incdec.ptr1005, i8** %s, align 8
  br label %while.cond.976

while.end.1006:                                   ; preds = %land.end.1002
  br label %if.end.1007

if.end.1007:                                      ; preds = %while.end.1006, %sw.bb.972
  %735 = load i8*, i8** %s, align 8
  %736 = load i8*, i8** %send, align 8
  %cmp1008 = icmp ult i8* %735, %736
  br i1 %cmp1008, label %if.then.1010, label %if.end.1067

if.then.1010:                                     ; preds = %if.end.1007
  %737 = load i32, i32* %fieldsize, align 4
  %738 = load i32, i32* %itemsize, align 4
  %sub1011 = sub nsw i32 %737, %738
  store i32 %sub1011, i32* %arg, align 4
  %739 = load i32, i32* %arg, align 4
  %tobool1012 = icmp ne i32 %739, 0
  br i1 %tobool1012, label %if.then.1013, label %if.end.1022

if.then.1013:                                     ; preds = %if.then.1010
  %740 = load i32, i32* %arg, align 4
  %741 = load i32, i32* %fieldsize, align 4
  %sub1014 = sub nsw i32 %741, %740
  store i32 %sub1014, i32* %fieldsize, align 4
  br label %while.cond.1015

while.cond.1015:                                  ; preds = %while.body.1019, %if.then.1013
  %742 = load i32, i32* %arg, align 4
  %dec1016 = add nsw i32 %742, -1
  store i32 %dec1016, i32* %arg, align 4
  %cmp1017 = icmp sgt i32 %742, 0
  br i1 %cmp1017, label %while.body.1019, label %while.end.1021

while.body.1019:                                  ; preds = %while.cond.1015
  %743 = load i8*, i8** %t, align 8
  %incdec.ptr1020 = getelementptr inbounds i8, i8* %743, i32 1
  store i8* %incdec.ptr1020, i8** %t, align 8
  store i8 32, i8* %743, align 1
  br label %while.cond.1015

while.end.1021:                                   ; preds = %while.cond.1015
  br label %if.end.1022

if.end.1022:                                      ; preds = %while.end.1021, %if.then.1010
  %744 = load i8*, i8** %t, align 8
  %add.ptr1023 = getelementptr inbounds i8, i8* %744, i64 -3
  store i8* %add.ptr1023, i8** %s, align 8
  %745 = load i8*, i8** %s, align 8
  %call1024 = call i32 @strncmp(i8* %745, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0), i64 3)
  %tobool1025 = icmp ne i32 %call1024, 0
  br i1 %tobool1025, label %if.end.1063, label %if.then.1026

if.then.1026:                                     ; preds = %if.end.1022
  br label %while.cond.1027

while.cond.1027:                                  ; preds = %while.body.1060, %if.then.1026
  %746 = load i8*, i8** %s, align 8
  %747 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %sv_any1028 = getelementptr inbounds %struct.sv, %struct.sv* %747, i32 0, i32 0
  %748 = load i8*, i8** %sv_any1028, align 8
  %749 = bitcast i8* %748 to %struct.xpv*
  %xpv_pv1029 = getelementptr inbounds %struct.xpv, %struct.xpv* %749, i32 0, i32 0
  %750 = load i8*, i8** %xpv_pv1029, align 8
  %cmp1030 = icmp ugt i8* %746, %750
  br i1 %cmp1030, label %land.rhs.1032, label %land.end.1058

land.rhs.1032:                                    ; preds = %while.cond.1027
  %751 = load i8*, i8** %s, align 8
  %arrayidx1033 = getelementptr inbounds i8, i8* %751, i64 -1
  %752 = load i8, i8* %arrayidx1033, align 1
  %conv1034 = sext i8 %752 to i32
  %cmp1035 = icmp eq i32 %conv1034, 32
  br i1 %cmp1035, label %lor.end.1057, label %lor.lhs.false.1037

lor.lhs.false.1037:                               ; preds = %land.rhs.1032
  %753 = load i8*, i8** %s, align 8
  %arrayidx1038 = getelementptr inbounds i8, i8* %753, i64 -1
  %754 = load i8, i8* %arrayidx1038, align 1
  %conv1039 = sext i8 %754 to i32
  %cmp1040 = icmp eq i32 %conv1039, 9
  br i1 %cmp1040, label %lor.end.1057, label %lor.lhs.false.1042

lor.lhs.false.1042:                               ; preds = %lor.lhs.false.1037
  %755 = load i8*, i8** %s, align 8
  %arrayidx1043 = getelementptr inbounds i8, i8* %755, i64 -1
  %756 = load i8, i8* %arrayidx1043, align 1
  %conv1044 = sext i8 %756 to i32
  %cmp1045 = icmp eq i32 %conv1044, 10
  br i1 %cmp1045, label %lor.end.1057, label %lor.lhs.false.1047

lor.lhs.false.1047:                               ; preds = %lor.lhs.false.1042
  %757 = load i8*, i8** %s, align 8
  %arrayidx1048 = getelementptr inbounds i8, i8* %757, i64 -1
  %758 = load i8, i8* %arrayidx1048, align 1
  %conv1049 = sext i8 %758 to i32
  %cmp1050 = icmp eq i32 %conv1049, 13
  br i1 %cmp1050, label %lor.end.1057, label %lor.rhs.1052

lor.rhs.1052:                                     ; preds = %lor.lhs.false.1047
  %759 = load i8*, i8** %s, align 8
  %arrayidx1053 = getelementptr inbounds i8, i8* %759, i64 -1
  %760 = load i8, i8* %arrayidx1053, align 1
  %conv1054 = sext i8 %760 to i32
  %cmp1055 = icmp eq i32 %conv1054, 12
  br label %lor.end.1057

lor.end.1057:                                     ; preds = %lor.rhs.1052, %lor.lhs.false.1047, %lor.lhs.false.1042, %lor.lhs.false.1037, %land.rhs.1032
  %761 = phi i1 [ true, %lor.lhs.false.1047 ], [ true, %lor.lhs.false.1042 ], [ true, %lor.lhs.false.1037 ], [ true, %land.rhs.1032 ], [ %cmp1055, %lor.rhs.1052 ]
  br label %land.end.1058

land.end.1058:                                    ; preds = %lor.end.1057, %while.cond.1027
  %762 = phi i1 [ false, %while.cond.1027 ], [ %761, %lor.end.1057 ]
  br i1 %762, label %while.body.1060, label %while.end.1062

while.body.1060:                                  ; preds = %land.end.1058
  %763 = load i8*, i8** %s, align 8
  %incdec.ptr1061 = getelementptr inbounds i8, i8* %763, i32 -1
  store i8* %incdec.ptr1061, i8** %s, align 8
  br label %while.cond.1027

while.end.1062:                                   ; preds = %land.end.1058
  br label %if.end.1063

if.end.1063:                                      ; preds = %while.end.1062, %if.end.1022
  %764 = load i8*, i8** %s, align 8
  %incdec.ptr1064 = getelementptr inbounds i8, i8* %764, i32 1
  store i8* %incdec.ptr1064, i8** %s, align 8
  store i8 46, i8* %764, align 1
  %765 = load i8*, i8** %s, align 8
  %incdec.ptr1065 = getelementptr inbounds i8, i8* %765, i32 1
  store i8* %incdec.ptr1065, i8** %s, align 8
  store i8 46, i8* %765, align 1
  %766 = load i8*, i8** %s, align 8
  %incdec.ptr1066 = getelementptr inbounds i8, i8* %766, i32 1
  store i8* %incdec.ptr1066, i8** %s, align 8
  store i8 46, i8* %766, align 1
  br label %if.end.1067

if.end.1067:                                      ; preds = %if.end.1063, %if.end.1007
  br label %sw.epilog.1089

sw.bb.1068:                                       ; preds = %for.cond
  %767 = load i8*, i8** %t, align 8
  store i8 0, i8* %767, align 1
  %768 = load i8*, i8** %t, align 8
  %769 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %sv_any1070 = getelementptr inbounds %struct.sv, %struct.sv* %769, i32 0, i32 0
  %770 = load i8*, i8** %sv_any1070, align 8
  %771 = bitcast i8* %770 to %struct.xpv*
  %xpv_pv1071 = getelementptr inbounds %struct.xpv, %struct.xpv* %771, i32 0, i32 0
  %772 = load i8*, i8** %xpv_pv1071, align 8
  %sub.ptr.lhs.cast1072 = ptrtoint i8* %768 to i64
  %sub.ptr.rhs.cast1073 = ptrtoint i8* %772 to i64
  %sub.ptr.sub1074 = sub i64 %sub.ptr.lhs.cast1072, %sub.ptr.rhs.cast1073
  %773 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %sv_any1075 = getelementptr inbounds %struct.sv, %struct.sv* %773, i32 0, i32 0
  %774 = load i8*, i8** %sv_any1075, align 8
  %775 = bitcast i8* %774 to %struct.xpv*
  %xpv_cur1076 = getelementptr inbounds %struct.xpv, %struct.xpv* %775, i32 0, i32 1
  store i64 %sub.ptr.sub1074, i64* %xpv_cur1076, align 8
  store i64 %sub.ptr.sub1074, i64* %tmp1069
  %776 = load i64, i64* %tmp1069
  %777 = load i8, i8* %targ_is_utf8, align 1
  %tobool1077 = icmp ne i8 %777, 0
  br i1 %tobool1077, label %if.then.1078, label %if.end.1081

if.then.1078:                                     ; preds = %sw.bb.1068
  %778 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %sv_flags1079 = getelementptr inbounds %struct.sv, %struct.sv* %778, i32 0, i32 2
  %779 = load i32, i32* %sv_flags1079, align 4
  %or1080 = or i32 %779, 536870912
  store i32 %or1080, i32* %sv_flags1079, align 4
  br label %if.end.1081

if.end.1081:                                      ; preds = %if.then.1078, %sw.bb.1068
  %780 = load i32, i32* %lines, align 4
  %conv1082 = sext i32 %780 to i64
  %781 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %sv_any1083 = getelementptr inbounds %struct.sv, %struct.sv* %781, i32 0, i32 0
  %782 = load i8*, i8** %sv_any1083, align 8
  %783 = bitcast i8* %782 to %struct.xpvfm*
  %xfm_lines1084 = getelementptr inbounds %struct.xpvfm, %struct.xpvfm* %783, i32 0, i32 19
  %784 = load i64, i64* %xfm_lines1084, align 8
  %add1085 = add nsw i64 %784, %conv1082
  store i64 %add1085, i64* %xfm_lines1084, align 8
  %785 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %786 = load i32, i32* %origmark, align 4
  %idx.ext1086 = sext i32 %786 to i64
  %add.ptr1087 = getelementptr inbounds %struct.sv*, %struct.sv** %785, i64 %idx.ext1086
  store %struct.sv** %add.ptr1087, %struct.sv*** %sp, align 8
  %787 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr1088 = getelementptr inbounds %struct.sv*, %struct.sv** %787, i32 1
  store %struct.sv** %incdec.ptr1088, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_yes, %struct.sv** %incdec.ptr1088, align 8
  %788 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %788, %struct.sv*** @PL_stack_sp, align 8
  %789 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %789, i32 0, i32 0
  %790 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %790, %struct.op** %retval
  br label %return

sw.epilog.1089:                                   ; preds = %for.cond, %if.end.1067, %if.end.971, %while.end.920, %if.end.902, %while.end.901, %while.end.882, %if.end.859, %if.end.736, %while.end.698, %for.end, %while.end.645, %if.end.560, %if.end.547, %if.end.535, %if.end.427, %while.end.289, %while.end.260, %if.end.204, %sw.bb.164, %while.end, %if.end.106, %sw.bb
  br label %for.cond

return:                                           ; preds = %if.end.1081, %if.end.962, %if.then.954, %if.then.25
  %791 = load %struct.op*, %struct.op** %retval
  ret %struct.op* %791
}

declare i8* @strchr(i8*, i32) #1

; Function Attrs: nounwind uwtable
define internal %struct.op* @S_doparseform(%struct.sv* %sv) #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sv.addr = alloca %struct.sv*, align 8
  %len = alloca i64, align 8
  %s = alloca i8*, align 8
  %send = alloca i8*, align 8
  %base = alloca i8*, align 8
  %skipspaces = alloca i32, align 4
  %noblank = alloca i8, align 1
  %repeat = alloca i8, align 1
  %postspace = alloca i8, align 1
  %fops = alloca i32*, align 8
  %fpc = alloca i32*, align 8
  %linepc = alloca i32*, align 8
  %arg = alloca i32, align 4
  %ischop = alloca i8, align 1
  %unchopnum = alloca i8, align 1
  %maxops = alloca i32, align 4
  %f = alloca i8*, align 8
  %f206 = alloca i8*, align 8
  %prespace = alloca i32, align 4
  %ismore = alloca i8, align 1
  %z = alloca i32, align 4
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 10223616
  %cmp = icmp eq i32 %and, 262144
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 0
  %3 = load i8*, i8** %sv_any, align 8
  %4 = bitcast i8* %3 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %4, i32 0, i32 1
  %5 = load i64, i64* %xpv_cur, align 8
  store i64 %5, i64* %len, align 8
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any1 = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 0
  %7 = load i8*, i8** %sv_any1, align 8
  %8 = bitcast i8* %7 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %8, i32 0, i32 0
  %9 = load i8*, i8** %xpv_pv, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %10 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i8* @Perl_sv_pvn_force_flags(%struct.sv* %10, i64* %len, i32 2)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %9, %cond.true ], [ %call, %cond.false ]
  store i8* %cond, i8** %s, align 8
  %11 = load i8*, i8** %s, align 8
  %12 = load i64, i64* %len, align 8
  %add.ptr = getelementptr inbounds i8, i8* %11, i64 %12
  store i8* %add.ptr, i8** %send, align 8
  store i8* null, i8** %base, align 8
  store i32 0, i32* %skipspaces, align 4
  store i8 0, i8* %noblank, align 1
  store i8 0, i8* %repeat, align 1
  store i8 0, i8* %postspace, align 1
  store i32* null, i32** %linepc, align 8
  store i8 0, i8* %unchopnum, align 1
  store i32 12, i32* %maxops, align 4
  %13 = load i64, i64* %len, align 8
  %cmp2 = icmp eq i64 %13, 0
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.85, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end
  %14 = load i8*, i8** %s, align 8
  store i8* %14, i8** %base, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %15 = load i8*, i8** %s, align 8
  %16 = load i8*, i8** %send, align 8
  %cmp3 = icmp ule i8* %15, %16
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %17 = load i8*, i8** %s, align 8
  %18 = load i8, i8* %17, align 1
  %conv = sext i8 %18 to i32
  %cmp4 = icmp eq i32 %conv, 10
  br i1 %cmp4, label %if.then.13, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body
  %19 = load i8*, i8** %s, align 8
  %20 = load i8, i8* %19, align 1
  %conv6 = sext i8 %20 to i32
  %cmp7 = icmp eq i32 %conv6, 64
  br i1 %cmp7, label %if.then.13, label %lor.lhs.false.9

lor.lhs.false.9:                                  ; preds = %lor.lhs.false
  %21 = load i8*, i8** %s, align 8
  %22 = load i8, i8* %21, align 1
  %conv10 = sext i8 %22 to i32
  %cmp11 = icmp eq i32 %conv10, 94
  br i1 %cmp11, label %if.then.13, label %if.end.14

if.then.13:                                       ; preds = %lor.lhs.false.9, %lor.lhs.false, %for.body
  %23 = load i32, i32* %maxops, align 4
  %add = add nsw i32 %23, 10
  store i32 %add, i32* %maxops, align 4
  br label %if.end.14

if.end.14:                                        ; preds = %if.then.13, %lor.lhs.false.9
  br label %for.inc

for.inc:                                          ; preds = %if.end.14
  %24 = load i8*, i8** %s, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %24, i32 1
  store i8* %incdec.ptr, i8** %s, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %25 = load i8*, i8** %base, align 8
  store i8* %25, i8** %s, align 8
  store i8* null, i8** %base, align 8
  %26 = load i32, i32* %maxops, align 4
  %conv15 = sext i32 %26 to i64
  %mul = mul i64 %conv15, 4
  %call16 = call i8* @Perl_safesysmalloc(i64 %mul)
  %27 = bitcast i8* %call16 to i32*
  store i32* %27, i32** %fops, align 8
  %28 = load i32*, i32** %fops, align 8
  store i32* %28, i32** %fpc, align 8
  %29 = load i8*, i8** %s, align 8
  %30 = load i8*, i8** %send, align 8
  %cmp17 = icmp ult i8* %29, %30
  br i1 %cmp17, label %if.then.19, label %if.end.21

if.then.19:                                       ; preds = %for.end
  %31 = load i32*, i32** %fpc, align 8
  store i32* %31, i32** %linepc, align 8
  %32 = load i32*, i32** %fpc, align 8
  %incdec.ptr20 = getelementptr inbounds i32, i32* %32, i32 1
  store i32* %incdec.ptr20, i32** %fpc, align 8
  store i32 1, i32* %32, align 4
  store i8 0, i8* %repeat, align 1
  store i8 0, i8* %noblank, align 1
  %33 = load i8*, i8** %s, align 8
  store i8* %33, i8** %base, align 8
  br label %if.end.21

if.end.21:                                        ; preds = %if.then.19, %for.end
  br label %while.cond

while.cond:                                       ; preds = %if.end.319, %if.end.87, %if.then.35, %sw.bb.31, %sw.default, %if.end.21
  %34 = load i8*, i8** %s, align 8
  %35 = load i8*, i8** %send, align 8
  %cmp22 = icmp ule i8* %34, %35
  br i1 %cmp22, label %while.body, label %while.end.320

while.body:                                       ; preds = %while.cond
  %36 = load i8*, i8** %s, align 8
  %incdec.ptr24 = getelementptr inbounds i8, i8* %36, i32 1
  store i8* %incdec.ptr24, i8** %s, align 8
  %37 = load i8, i8* %36, align 1
  %conv25 = sext i8 %37 to i32
  switch i32 %conv25, label %sw.default [
    i32 126, label %sw.bb
    i32 32, label %sw.bb.31
    i32 9, label %sw.bb.31
    i32 0, label %sw.bb.32
    i32 10, label %sw.bb.37
    i32 64, label %sw.bb.88
    i32 94, label %sw.bb.88
  ]

sw.default:                                       ; preds = %while.body
  store i32 0, i32* %skipspaces, align 4
  br label %while.cond

sw.bb:                                            ; preds = %while.body
  %38 = load i8*, i8** %s, align 8
  %39 = load i8, i8* %38, align 1
  %conv26 = sext i8 %39 to i32
  %cmp27 = icmp eq i32 %conv26, 126
  br i1 %cmp27, label %if.then.29, label %if.end.30

if.then.29:                                       ; preds = %sw.bb
  store i8 1, i8* %repeat, align 1
  %40 = load i8*, i8** %s, align 8
  store i8 32, i8* %40, align 1
  br label %if.end.30

if.end.30:                                        ; preds = %if.then.29, %sw.bb
  store i8 1, i8* %noblank, align 1
  %41 = load i8*, i8** %s, align 8
  %arrayidx = getelementptr inbounds i8, i8* %41, i64 -1
  store i8 32, i8* %arrayidx, align 1
  br label %sw.bb.31

sw.bb.31:                                         ; preds = %while.body, %while.body, %if.end.30
  %42 = load i32, i32* %skipspaces, align 4
  %inc = add nsw i32 %42, 1
  store i32 %inc, i32* %skipspaces, align 4
  br label %while.cond

sw.bb.32:                                         ; preds = %while.body
  %43 = load i8*, i8** %s, align 8
  %44 = load i8*, i8** %send, align 8
  %cmp33 = icmp ult i8* %43, %44
  br i1 %cmp33, label %if.then.35, label %if.end.36

if.then.35:                                       ; preds = %sw.bb.32
  store i32 0, i32* %skipspaces, align 4
  br label %while.cond

if.end.36:                                        ; preds = %sw.bb.32
  br label %sw.bb.37

sw.bb.37:                                         ; preds = %while.body, %if.end.36
  %45 = load i8*, i8** %s, align 8
  %46 = load i8*, i8** %base, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %45 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %46 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %conv38 = trunc i64 %sub.ptr.sub to i32
  store i32 %conv38, i32* %arg, align 4
  %47 = load i32, i32* %skipspaces, align 4
  %inc39 = add nsw i32 %47, 1
  store i32 %inc39, i32* %skipspaces, align 4
  %48 = load i32, i32* %skipspaces, align 4
  %49 = load i32, i32* %arg, align 4
  %sub = sub nsw i32 %49, %48
  store i32 %sub, i32* %arg, align 4
  %50 = load i32, i32* %arg, align 4
  %tobool = icmp ne i32 %50, 0
  br i1 %tobool, label %if.then.40, label %if.end.49

if.then.40:                                       ; preds = %sw.bb.37
  %51 = load i8, i8* %postspace, align 1
  %tobool41 = icmp ne i8 %51, 0
  br i1 %tobool41, label %if.then.42, label %if.end.44

if.then.42:                                       ; preds = %if.then.40
  %52 = load i32*, i32** %fpc, align 8
  %incdec.ptr43 = getelementptr inbounds i32, i32* %52, i32 1
  store i32* %incdec.ptr43, i32** %fpc, align 8
  store i32 7, i32* %52, align 4
  br label %if.end.44

if.end.44:                                        ; preds = %if.then.42, %if.then.40
  %53 = load i32*, i32** %fpc, align 8
  %incdec.ptr45 = getelementptr inbounds i32, i32* %53, i32 1
  store i32* %incdec.ptr45, i32** %fpc, align 8
  store i32 2, i32* %53, align 4
  %54 = load i32, i32* %arg, align 4
  %conv46 = trunc i32 %54 to i16
  %conv47 = zext i16 %conv46 to i32
  %55 = load i32*, i32** %fpc, align 8
  %incdec.ptr48 = getelementptr inbounds i32, i32* %55, i32 1
  store i32* %incdec.ptr48, i32** %fpc, align 8
  store i32 %conv47, i32* %55, align 4
  br label %if.end.49

if.end.49:                                        ; preds = %if.end.44, %sw.bb.37
  store i8 0, i8* %postspace, align 1
  %56 = load i8*, i8** %s, align 8
  %57 = load i8*, i8** %send, align 8
  %cmp50 = icmp ule i8* %56, %57
  br i1 %cmp50, label %if.then.52, label %if.end.53

if.then.52:                                       ; preds = %if.end.49
  %58 = load i32, i32* %skipspaces, align 4
  %dec = add nsw i32 %58, -1
  store i32 %dec, i32* %skipspaces, align 4
  br label %if.end.53

if.end.53:                                        ; preds = %if.then.52, %if.end.49
  %59 = load i32, i32* %skipspaces, align 4
  %tobool54 = icmp ne i32 %59, 0
  br i1 %tobool54, label %if.then.55, label %if.end.60

if.then.55:                                       ; preds = %if.end.53
  %60 = load i32*, i32** %fpc, align 8
  %incdec.ptr56 = getelementptr inbounds i32, i32* %60, i32 1
  store i32* %incdec.ptr56, i32** %fpc, align 8
  store i32 3, i32* %60, align 4
  %61 = load i32, i32* %skipspaces, align 4
  %conv57 = trunc i32 %61 to i16
  %conv58 = zext i16 %conv57 to i32
  %62 = load i32*, i32** %fpc, align 8
  %incdec.ptr59 = getelementptr inbounds i32, i32* %62, i32 1
  store i32* %incdec.ptr59, i32** %fpc, align 8
  store i32 %conv58, i32* %62, align 4
  br label %if.end.60

if.end.60:                                        ; preds = %if.then.55, %if.end.53
  store i32 0, i32* %skipspaces, align 4
  %63 = load i8*, i8** %s, align 8
  %64 = load i8*, i8** %send, align 8
  %cmp61 = icmp ule i8* %63, %64
  br i1 %cmp61, label %if.then.63, label %if.end.65

if.then.63:                                       ; preds = %if.end.60
  %65 = load i32*, i32** %fpc, align 8
  %incdec.ptr64 = getelementptr inbounds i32, i32* %65, i32 1
  store i32* %incdec.ptr64, i32** %fpc, align 8
  store i32 13, i32* %65, align 4
  br label %if.end.65

if.end.65:                                        ; preds = %if.then.63, %if.end.60
  %66 = load i8, i8* %noblank, align 1
  %tobool66 = icmp ne i8 %66, 0
  br i1 %tobool66, label %if.then.67, label %if.end.80

if.then.67:                                       ; preds = %if.end.65
  %67 = load i32*, i32** %fpc, align 8
  %incdec.ptr68 = getelementptr inbounds i32, i32* %67, i32 1
  store i32* %incdec.ptr68, i32** %fpc, align 8
  store i32 14, i32* %67, align 4
  %68 = load i8, i8* %repeat, align 1
  %tobool69 = icmp ne i8 %68, 0
  br i1 %tobool69, label %if.then.70, label %if.else

if.then.70:                                       ; preds = %if.then.67
  %69 = load i32*, i32** %fpc, align 8
  %70 = load i32*, i32** %linepc, align 8
  %sub.ptr.lhs.cast71 = ptrtoint i32* %69 to i64
  %sub.ptr.rhs.cast72 = ptrtoint i32* %70 to i64
  %sub.ptr.sub73 = sub i64 %sub.ptr.lhs.cast71, %sub.ptr.rhs.cast72
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub73, 4
  %add74 = add nsw i64 %sub.ptr.div, 1
  %conv75 = trunc i64 %add74 to i32
  store i32 %conv75, i32* %arg, align 4
  br label %if.end.76

if.else:                                          ; preds = %if.then.67
  store i32 0, i32* %arg, align 4
  br label %if.end.76

if.end.76:                                        ; preds = %if.else, %if.then.70
  %71 = load i32, i32* %arg, align 4
  %conv77 = trunc i32 %71 to i16
  %conv78 = zext i16 %conv77 to i32
  %72 = load i32*, i32** %fpc, align 8
  %incdec.ptr79 = getelementptr inbounds i32, i32* %72, i32 1
  store i32* %incdec.ptr79, i32** %fpc, align 8
  store i32 %conv78, i32* %72, align 4
  br label %if.end.80

if.end.80:                                        ; preds = %if.end.76, %if.end.65
  %73 = load i8*, i8** %s, align 8
  %74 = load i8*, i8** %send, align 8
  %cmp81 = icmp ult i8* %73, %74
  br i1 %cmp81, label %if.then.83, label %if.else.85

if.then.83:                                       ; preds = %if.end.80
  %75 = load i32*, i32** %fpc, align 8
  store i32* %75, i32** %linepc, align 8
  %76 = load i32*, i32** %fpc, align 8
  %incdec.ptr84 = getelementptr inbounds i32, i32* %76, i32 1
  store i32* %incdec.ptr84, i32** %fpc, align 8
  store i32 1, i32* %76, align 4
  store i8 0, i8* %repeat, align 1
  store i8 0, i8* %noblank, align 1
  %77 = load i8*, i8** %s, align 8
  store i8* %77, i8** %base, align 8
  br label %if.end.87

if.else.85:                                       ; preds = %if.end.80
  %78 = load i8*, i8** %s, align 8
  %incdec.ptr86 = getelementptr inbounds i8, i8* %78, i32 1
  store i8* %incdec.ptr86, i8** %s, align 8
  br label %if.end.87

if.end.87:                                        ; preds = %if.else.85, %if.then.83
  br label %while.cond

sw.bb.88:                                         ; preds = %while.body, %while.body
  %79 = load i8*, i8** %s, align 8
  %arrayidx89 = getelementptr inbounds i8, i8* %79, i64 -1
  %80 = load i8, i8* %arrayidx89, align 1
  %conv90 = sext i8 %80 to i32
  %cmp91 = icmp eq i32 %conv90, 94
  %conv92 = zext i1 %cmp91 to i32
  %conv93 = trunc i32 %conv92 to i8
  store i8 %conv93, i8* %ischop, align 1
  %81 = load i8, i8* %postspace, align 1
  %tobool94 = icmp ne i8 %81, 0
  br i1 %tobool94, label %if.then.95, label %if.end.97

if.then.95:                                       ; preds = %sw.bb.88
  %82 = load i32*, i32** %fpc, align 8
  %incdec.ptr96 = getelementptr inbounds i32, i32* %82, i32 1
  store i32* %incdec.ptr96, i32** %fpc, align 8
  store i32 7, i32* %82, align 4
  store i8 0, i8* %postspace, align 1
  br label %if.end.97

if.end.97:                                        ; preds = %if.then.95, %sw.bb.88
  %83 = load i8*, i8** %s, align 8
  %84 = load i8*, i8** %base, align 8
  %sub.ptr.lhs.cast98 = ptrtoint i8* %83 to i64
  %sub.ptr.rhs.cast99 = ptrtoint i8* %84 to i64
  %sub.ptr.sub100 = sub i64 %sub.ptr.lhs.cast98, %sub.ptr.rhs.cast99
  %sub101 = sub nsw i64 %sub.ptr.sub100, 1
  %conv102 = trunc i64 %sub101 to i32
  store i32 %conv102, i32* %arg, align 4
  %85 = load i32, i32* %arg, align 4
  %tobool103 = icmp ne i32 %85, 0
  br i1 %tobool103, label %if.then.104, label %if.end.109

if.then.104:                                      ; preds = %if.end.97
  %86 = load i32*, i32** %fpc, align 8
  %incdec.ptr105 = getelementptr inbounds i32, i32* %86, i32 1
  store i32* %incdec.ptr105, i32** %fpc, align 8
  store i32 2, i32* %86, align 4
  %87 = load i32, i32* %arg, align 4
  %conv106 = trunc i32 %87 to i16
  %conv107 = zext i16 %conv106 to i32
  %88 = load i32*, i32** %fpc, align 8
  %incdec.ptr108 = getelementptr inbounds i32, i32* %88, i32 1
  store i32* %incdec.ptr108, i32** %fpc, align 8
  store i32 %conv107, i32* %88, align 4
  br label %if.end.109

if.end.109:                                       ; preds = %if.then.104, %if.end.97
  %89 = load i8*, i8** %s, align 8
  %add.ptr110 = getelementptr inbounds i8, i8* %89, i64 -1
  store i8* %add.ptr110, i8** %base, align 8
  %90 = load i32*, i32** %fpc, align 8
  %incdec.ptr111 = getelementptr inbounds i32, i32* %90, i32 1
  store i32* %incdec.ptr111, i32** %fpc, align 8
  store i32 4, i32* %90, align 4
  %91 = load i8*, i8** %s, align 8
  %92 = load i8, i8* %91, align 1
  %conv112 = sext i8 %92 to i32
  %cmp113 = icmp eq i32 %conv112, 42
  br i1 %cmp113, label %if.then.115, label %if.else.125

if.then.115:                                      ; preds = %if.end.109
  %93 = load i8*, i8** %s, align 8
  %incdec.ptr116 = getelementptr inbounds i8, i8* %93, i32 1
  store i8* %incdec.ptr116, i8** %s, align 8
  %94 = load i32*, i32** %fpc, align 8
  %incdec.ptr117 = getelementptr inbounds i32, i32* %94, i32 1
  store i32* %incdec.ptr117, i32** %fpc, align 8
  store i32 2, i32* %94, align 4
  %95 = load i8, i8* %ischop, align 1
  %tobool118 = icmp ne i8 %95, 0
  br i1 %tobool118, label %if.then.119, label %if.else.122

if.then.119:                                      ; preds = %if.then.115
  %96 = load i32*, i32** %fpc, align 8
  %incdec.ptr120 = getelementptr inbounds i32, i32* %96, i32 1
  store i32* %incdec.ptr120, i32** %fpc, align 8
  store i32 17, i32* %96, align 4
  %97 = load i32*, i32** %fpc, align 8
  %incdec.ptr121 = getelementptr inbounds i32, i32* %97, i32 1
  store i32* %incdec.ptr121, i32** %fpc, align 8
  store i32 10, i32* %97, align 4
  br label %if.end.124

if.else.122:                                      ; preds = %if.then.115
  %98 = load i32*, i32** %fpc, align 8
  %incdec.ptr123 = getelementptr inbounds i32, i32* %98, i32 1
  store i32* %incdec.ptr123, i32** %fpc, align 8
  store i32 11, i32* %98, align 4
  br label %if.end.124

if.end.124:                                       ; preds = %if.else.122, %if.then.119
  br label %if.end.319

if.else.125:                                      ; preds = %if.end.109
  %99 = load i8*, i8** %s, align 8
  %100 = load i8, i8* %99, align 1
  %conv126 = sext i8 %100 to i32
  %cmp127 = icmp eq i32 %conv126, 35
  br i1 %cmp127, label %if.then.137, label %lor.lhs.false.129

lor.lhs.false.129:                                ; preds = %if.else.125
  %101 = load i8*, i8** %s, align 8
  %102 = load i8, i8* %101, align 1
  %conv130 = sext i8 %102 to i32
  %cmp131 = icmp eq i32 %conv130, 46
  br i1 %cmp131, label %land.lhs.true, label %if.else.180

land.lhs.true:                                    ; preds = %lor.lhs.false.129
  %103 = load i8*, i8** %s, align 8
  %arrayidx133 = getelementptr inbounds i8, i8* %103, i64 1
  %104 = load i8, i8* %arrayidx133, align 1
  %conv134 = sext i8 %104 to i32
  %cmp135 = icmp eq i32 %conv134, 35
  br i1 %cmp135, label %if.then.137, label %if.else.180

if.then.137:                                      ; preds = %land.lhs.true, %if.else.125
  %105 = load i8, i8* %ischop, align 1
  %conv138 = sext i8 %105 to i32
  %tobool139 = icmp ne i32 %conv138, 0
  %cond140 = select i1 %tobool139, i32 512, i32 0
  store i32 %cond140, i32* %arg, align 4
  %106 = load i8*, i8** %s, align 8
  %add.ptr141 = getelementptr inbounds i8, i8* %106, i64 -1
  store i8* %add.ptr141, i8** %base, align 8
  br label %while.cond.142

while.cond.142:                                   ; preds = %while.body.146, %if.then.137
  %107 = load i8*, i8** %s, align 8
  %108 = load i8, i8* %107, align 1
  %conv143 = sext i8 %108 to i32
  %cmp144 = icmp eq i32 %conv143, 35
  br i1 %cmp144, label %while.body.146, label %while.end

while.body.146:                                   ; preds = %while.cond.142
  %109 = load i8*, i8** %s, align 8
  %incdec.ptr147 = getelementptr inbounds i8, i8* %109, i32 1
  store i8* %incdec.ptr147, i8** %s, align 8
  br label %while.cond.142

while.end:                                        ; preds = %while.cond.142
  %110 = load i8*, i8** %s, align 8
  %111 = load i8, i8* %110, align 1
  %conv148 = sext i8 %111 to i32
  %cmp149 = icmp eq i32 %conv148, 46
  br i1 %cmp149, label %if.then.151, label %if.end.166

if.then.151:                                      ; preds = %while.end
  %112 = load i8*, i8** %s, align 8
  %incdec.ptr152 = getelementptr inbounds i8, i8* %112, i32 1
  store i8* %incdec.ptr152, i8** %s, align 8
  %113 = load i8*, i8** %s, align 8
  store i8* %113, i8** %f, align 8
  br label %while.cond.153

while.cond.153:                                   ; preds = %while.body.157, %if.then.151
  %114 = load i8*, i8** %s, align 8
  %115 = load i8, i8* %114, align 1
  %conv154 = sext i8 %115 to i32
  %cmp155 = icmp eq i32 %conv154, 35
  br i1 %cmp155, label %while.body.157, label %while.end.159

while.body.157:                                   ; preds = %while.cond.153
  %116 = load i8*, i8** %s, align 8
  %incdec.ptr158 = getelementptr inbounds i8, i8* %116, i32 1
  store i8* %incdec.ptr158, i8** %s, align 8
  br label %while.cond.153

while.end.159:                                    ; preds = %while.cond.153
  %117 = load i8*, i8** %s, align 8
  %118 = load i8*, i8** %f, align 8
  %sub.ptr.lhs.cast160 = ptrtoint i8* %117 to i64
  %sub.ptr.rhs.cast161 = ptrtoint i8* %118 to i64
  %sub.ptr.sub162 = sub i64 %sub.ptr.lhs.cast160, %sub.ptr.rhs.cast161
  %add163 = add nsw i64 256, %sub.ptr.sub162
  %119 = load i32, i32* %arg, align 4
  %conv164 = sext i32 %119 to i64
  %or = or i64 %conv164, %add163
  %conv165 = trunc i64 %or to i32
  store i32 %conv165, i32* %arg, align 4
  br label %if.end.166

if.end.166:                                       ; preds = %while.end.159, %while.end
  %120 = load i8*, i8** %s, align 8
  %121 = load i8*, i8** %base, align 8
  %sub.ptr.lhs.cast167 = ptrtoint i8* %120 to i64
  %sub.ptr.rhs.cast168 = ptrtoint i8* %121 to i64
  %sub.ptr.sub169 = sub i64 %sub.ptr.lhs.cast167, %sub.ptr.rhs.cast168
  %conv170 = trunc i64 %sub.ptr.sub169 to i32
  %122 = load i32*, i32** %fpc, align 8
  %incdec.ptr171 = getelementptr inbounds i32, i32* %122, i32 1
  store i32* %incdec.ptr171, i32** %fpc, align 8
  store i32 %conv170, i32* %122, align 4
  %123 = load i32*, i32** %fpc, align 8
  %incdec.ptr172 = getelementptr inbounds i32, i32* %123, i32 1
  store i32* %incdec.ptr172, i32** %fpc, align 8
  store i32 12, i32* %123, align 4
  %124 = load i32, i32* %arg, align 4
  %conv173 = trunc i32 %124 to i16
  %conv174 = zext i16 %conv173 to i32
  %125 = load i32*, i32** %fpc, align 8
  %incdec.ptr175 = getelementptr inbounds i32, i32* %125, i32 1
  store i32* %incdec.ptr175, i32** %fpc, align 8
  store i32 %conv174, i32* %125, align 4
  %126 = load i8, i8* %ischop, align 1
  %tobool176 = icmp ne i8 %126, 0
  %lnot = xor i1 %tobool176, true
  %lnot.ext = zext i1 %lnot to i32
  %127 = load i8, i8* %unchopnum, align 1
  %conv177 = sext i8 %127 to i32
  %or178 = or i32 %conv177, %lnot.ext
  %conv179 = trunc i32 %or178 to i8
  store i8 %conv179, i8* %unchopnum, align 1
  br label %if.end.318

if.else.180:                                      ; preds = %land.lhs.true, %lor.lhs.false.129
  %128 = load i8*, i8** %s, align 8
  %129 = load i8, i8* %128, align 1
  %conv181 = sext i8 %129 to i32
  %cmp182 = icmp eq i32 %conv181, 48
  br i1 %cmp182, label %land.lhs.true.184, label %if.else.238

land.lhs.true.184:                                ; preds = %if.else.180
  %130 = load i8*, i8** %s, align 8
  %arrayidx185 = getelementptr inbounds i8, i8* %130, i64 1
  %131 = load i8, i8* %arrayidx185, align 1
  %conv186 = sext i8 %131 to i32
  %cmp187 = icmp eq i32 %conv186, 35
  br i1 %cmp187, label %if.then.189, label %if.else.238

if.then.189:                                      ; preds = %land.lhs.true.184
  %132 = load i8, i8* %ischop, align 1
  %conv190 = sext i8 %132 to i32
  %tobool191 = icmp ne i32 %conv190, 0
  %cond192 = select i1 %tobool191, i32 512, i32 0
  store i32 %cond192, i32* %arg, align 4
  %133 = load i8*, i8** %s, align 8
  %add.ptr193 = getelementptr inbounds i8, i8* %133, i64 -1
  store i8* %add.ptr193, i8** %base, align 8
  %134 = load i8*, i8** %s, align 8
  %incdec.ptr194 = getelementptr inbounds i8, i8* %134, i32 1
  store i8* %incdec.ptr194, i8** %s, align 8
  br label %while.cond.195

while.cond.195:                                   ; preds = %while.body.199, %if.then.189
  %135 = load i8*, i8** %s, align 8
  %136 = load i8, i8* %135, align 1
  %conv196 = sext i8 %136 to i32
  %cmp197 = icmp eq i32 %conv196, 35
  br i1 %cmp197, label %while.body.199, label %while.end.201

while.body.199:                                   ; preds = %while.cond.195
  %137 = load i8*, i8** %s, align 8
  %incdec.ptr200 = getelementptr inbounds i8, i8* %137, i32 1
  store i8* %incdec.ptr200, i8** %s, align 8
  br label %while.cond.195

while.end.201:                                    ; preds = %while.cond.195
  %138 = load i8*, i8** %s, align 8
  %139 = load i8, i8* %138, align 1
  %conv202 = sext i8 %139 to i32
  %cmp203 = icmp eq i32 %conv202, 46
  br i1 %cmp203, label %if.then.205, label %if.end.222

if.then.205:                                      ; preds = %while.end.201
  %140 = load i8*, i8** %s, align 8
  %incdec.ptr207 = getelementptr inbounds i8, i8* %140, i32 1
  store i8* %incdec.ptr207, i8** %s, align 8
  %141 = load i8*, i8** %s, align 8
  store i8* %141, i8** %f206, align 8
  br label %while.cond.208

while.cond.208:                                   ; preds = %while.body.212, %if.then.205
  %142 = load i8*, i8** %s, align 8
  %143 = load i8, i8* %142, align 1
  %conv209 = sext i8 %143 to i32
  %cmp210 = icmp eq i32 %conv209, 35
  br i1 %cmp210, label %while.body.212, label %while.end.214

while.body.212:                                   ; preds = %while.cond.208
  %144 = load i8*, i8** %s, align 8
  %incdec.ptr213 = getelementptr inbounds i8, i8* %144, i32 1
  store i8* %incdec.ptr213, i8** %s, align 8
  br label %while.cond.208

while.end.214:                                    ; preds = %while.cond.208
  %145 = load i8*, i8** %s, align 8
  %146 = load i8*, i8** %f206, align 8
  %sub.ptr.lhs.cast215 = ptrtoint i8* %145 to i64
  %sub.ptr.rhs.cast216 = ptrtoint i8* %146 to i64
  %sub.ptr.sub217 = sub i64 %sub.ptr.lhs.cast215, %sub.ptr.rhs.cast216
  %add218 = add nsw i64 256, %sub.ptr.sub217
  %147 = load i32, i32* %arg, align 4
  %conv219 = sext i32 %147 to i64
  %or220 = or i64 %conv219, %add218
  %conv221 = trunc i64 %or220 to i32
  store i32 %conv221, i32* %arg, align 4
  br label %if.end.222

if.end.222:                                       ; preds = %while.end.214, %while.end.201
  %148 = load i8*, i8** %s, align 8
  %149 = load i8*, i8** %base, align 8
  %sub.ptr.lhs.cast223 = ptrtoint i8* %148 to i64
  %sub.ptr.rhs.cast224 = ptrtoint i8* %149 to i64
  %sub.ptr.sub225 = sub i64 %sub.ptr.lhs.cast223, %sub.ptr.rhs.cast224
  %conv226 = trunc i64 %sub.ptr.sub225 to i32
  %150 = load i32*, i32** %fpc, align 8
  %incdec.ptr227 = getelementptr inbounds i32, i32* %150, i32 1
  store i32* %incdec.ptr227, i32** %fpc, align 8
  store i32 %conv226, i32* %150, align 4
  %151 = load i32*, i32** %fpc, align 8
  %incdec.ptr228 = getelementptr inbounds i32, i32* %151, i32 1
  store i32* %incdec.ptr228, i32** %fpc, align 8
  store i32 16, i32* %151, align 4
  %152 = load i32, i32* %arg, align 4
  %conv229 = trunc i32 %152 to i16
  %conv230 = zext i16 %conv229 to i32
  %153 = load i32*, i32** %fpc, align 8
  %incdec.ptr231 = getelementptr inbounds i32, i32* %153, i32 1
  store i32* %incdec.ptr231, i32** %fpc, align 8
  store i32 %conv230, i32* %153, align 4
  %154 = load i8, i8* %ischop, align 1
  %tobool232 = icmp ne i8 %154, 0
  %lnot233 = xor i1 %tobool232, true
  %lnot.ext234 = zext i1 %lnot233 to i32
  %155 = load i8, i8* %unchopnum, align 1
  %conv235 = sext i8 %155 to i32
  %or236 = or i32 %conv235, %lnot.ext234
  %conv237 = trunc i32 %or236 to i8
  store i8 %conv237, i8* %unchopnum, align 1
  br label %if.end.317

if.else.238:                                      ; preds = %land.lhs.true.184, %if.else.180
  store i32 0, i32* %prespace, align 4
  store i8 0, i8* %ismore, align 1
  %156 = load i8*, i8** %s, align 8
  %157 = load i8, i8* %156, align 1
  %conv239 = sext i8 %157 to i32
  %cmp240 = icmp eq i32 %conv239, 62
  br i1 %cmp240, label %if.then.242, label %if.else.250

if.then.242:                                      ; preds = %if.else.238
  br label %while.cond.243

while.cond.243:                                   ; preds = %while.body.248, %if.then.242
  %158 = load i8*, i8** %s, align 8
  %incdec.ptr244 = getelementptr inbounds i8, i8* %158, i32 1
  store i8* %incdec.ptr244, i8** %s, align 8
  %159 = load i8, i8* %incdec.ptr244, align 1
  %conv245 = sext i8 %159 to i32
  %cmp246 = icmp eq i32 %conv245, 62
  br i1 %cmp246, label %while.body.248, label %while.end.249

while.body.248:                                   ; preds = %while.cond.243
  br label %while.cond.243

while.end.249:                                    ; preds = %while.cond.243
  store i32 7, i32* %prespace, align 4
  br label %if.end.276

if.else.250:                                      ; preds = %if.else.238
  %160 = load i8*, i8** %s, align 8
  %161 = load i8, i8* %160, align 1
  %conv251 = sext i8 %161 to i32
  %cmp252 = icmp eq i32 %conv251, 124
  br i1 %cmp252, label %if.then.254, label %if.else.262

if.then.254:                                      ; preds = %if.else.250
  br label %while.cond.255

while.cond.255:                                   ; preds = %while.body.260, %if.then.254
  %162 = load i8*, i8** %s, align 8
  %incdec.ptr256 = getelementptr inbounds i8, i8* %162, i32 1
  store i8* %incdec.ptr256, i8** %s, align 8
  %163 = load i8, i8* %incdec.ptr256, align 1
  %conv257 = sext i8 %163 to i32
  %cmp258 = icmp eq i32 %conv257, 124
  br i1 %cmp258, label %while.body.260, label %while.end.261

while.body.260:                                   ; preds = %while.cond.255
  br label %while.cond.255

while.end.261:                                    ; preds = %while.cond.255
  store i32 8, i32* %prespace, align 4
  store i8 1, i8* %postspace, align 1
  br label %if.end.275

if.else.262:                                      ; preds = %if.else.250
  %164 = load i8*, i8** %s, align 8
  %165 = load i8, i8* %164, align 1
  %conv263 = sext i8 %165 to i32
  %cmp264 = icmp eq i32 %conv263, 60
  br i1 %cmp264, label %if.then.266, label %if.end.274

if.then.266:                                      ; preds = %if.else.262
  br label %while.cond.267

while.cond.267:                                   ; preds = %while.body.272, %if.then.266
  %166 = load i8*, i8** %s, align 8
  %incdec.ptr268 = getelementptr inbounds i8, i8* %166, i32 1
  store i8* %incdec.ptr268, i8** %s, align 8
  %167 = load i8, i8* %incdec.ptr268, align 1
  %conv269 = sext i8 %167 to i32
  %cmp270 = icmp eq i32 %conv269, 60
  br i1 %cmp270, label %while.body.272, label %while.end.273

while.body.272:                                   ; preds = %while.cond.267
  br label %while.cond.267

while.end.273:                                    ; preds = %while.cond.267
  br label %if.end.274

if.end.274:                                       ; preds = %while.end.273, %if.else.262
  store i8 1, i8* %postspace, align 1
  br label %if.end.275

if.end.275:                                       ; preds = %if.end.274, %while.end.261
  br label %if.end.276

if.end.276:                                       ; preds = %if.end.275, %while.end.249
  %168 = load i8*, i8** %s, align 8
  %169 = load i8, i8* %168, align 1
  %conv277 = sext i8 %169 to i32
  %cmp278 = icmp eq i32 %conv277, 46
  br i1 %cmp278, label %land.lhs.true.280, label %if.end.292

land.lhs.true.280:                                ; preds = %if.end.276
  %170 = load i8*, i8** %s, align 8
  %arrayidx281 = getelementptr inbounds i8, i8* %170, i64 1
  %171 = load i8, i8* %arrayidx281, align 1
  %conv282 = sext i8 %171 to i32
  %cmp283 = icmp eq i32 %conv282, 46
  br i1 %cmp283, label %land.lhs.true.285, label %if.end.292

land.lhs.true.285:                                ; preds = %land.lhs.true.280
  %172 = load i8*, i8** %s, align 8
  %arrayidx286 = getelementptr inbounds i8, i8* %172, i64 2
  %173 = load i8, i8* %arrayidx286, align 1
  %conv287 = sext i8 %173 to i32
  %cmp288 = icmp eq i32 %conv287, 46
  br i1 %cmp288, label %if.then.290, label %if.end.292

if.then.290:                                      ; preds = %land.lhs.true.285
  %174 = load i8*, i8** %s, align 8
  %add.ptr291 = getelementptr inbounds i8, i8* %174, i64 3
  store i8* %add.ptr291, i8** %s, align 8
  store i8 1, i8* %ismore, align 1
  br label %if.end.292

if.end.292:                                       ; preds = %if.then.290, %land.lhs.true.285, %land.lhs.true.280, %if.end.276
  %175 = load i8*, i8** %s, align 8
  %176 = load i8*, i8** %base, align 8
  %sub.ptr.lhs.cast293 = ptrtoint i8* %175 to i64
  %sub.ptr.rhs.cast294 = ptrtoint i8* %176 to i64
  %sub.ptr.sub295 = sub i64 %sub.ptr.lhs.cast293, %sub.ptr.rhs.cast294
  %conv296 = trunc i64 %sub.ptr.sub295 to i32
  %177 = load i32*, i32** %fpc, align 8
  %incdec.ptr297 = getelementptr inbounds i32, i32* %177, i32 1
  store i32* %incdec.ptr297, i32** %fpc, align 8
  store i32 %conv296, i32* %177, align 4
  %178 = load i8, i8* %ischop, align 1
  %conv298 = sext i8 %178 to i32
  %tobool299 = icmp ne i32 %conv298, 0
  %cond300 = select i1 %tobool299, i32 6, i32 5
  %179 = load i32*, i32** %fpc, align 8
  %incdec.ptr301 = getelementptr inbounds i32, i32* %179, i32 1
  store i32* %incdec.ptr301, i32** %fpc, align 8
  store i32 %cond300, i32* %179, align 4
  %180 = load i32, i32* %prespace, align 4
  %tobool302 = icmp ne i32 %180, 0
  br i1 %tobool302, label %if.then.303, label %if.end.307

if.then.303:                                      ; preds = %if.end.292
  %181 = load i32, i32* %prespace, align 4
  %conv304 = trunc i32 %181 to i16
  %conv305 = zext i16 %conv304 to i32
  %182 = load i32*, i32** %fpc, align 8
  %incdec.ptr306 = getelementptr inbounds i32, i32* %182, i32 1
  store i32* %incdec.ptr306, i32** %fpc, align 8
  store i32 %conv305, i32* %182, align 4
  br label %if.end.307

if.end.307:                                       ; preds = %if.then.303, %if.end.292
  %183 = load i32*, i32** %fpc, align 8
  %incdec.ptr308 = getelementptr inbounds i32, i32* %183, i32 1
  store i32* %incdec.ptr308, i32** %fpc, align 8
  store i32 9, i32* %183, align 4
  %184 = load i8, i8* %ismore, align 1
  %tobool309 = icmp ne i8 %184, 0
  br i1 %tobool309, label %if.then.310, label %if.end.312

if.then.310:                                      ; preds = %if.end.307
  %185 = load i32*, i32** %fpc, align 8
  %incdec.ptr311 = getelementptr inbounds i32, i32* %185, i32 1
  store i32* %incdec.ptr311, i32** %fpc, align 8
  store i32 15, i32* %185, align 4
  br label %if.end.312

if.end.312:                                       ; preds = %if.then.310, %if.end.307
  %186 = load i8, i8* %ischop, align 1
  %tobool313 = icmp ne i8 %186, 0
  br i1 %tobool313, label %if.then.314, label %if.end.316

if.then.314:                                      ; preds = %if.end.312
  %187 = load i32*, i32** %fpc, align 8
  %incdec.ptr315 = getelementptr inbounds i32, i32* %187, i32 1
  store i32* %incdec.ptr315, i32** %fpc, align 8
  store i32 10, i32* %187, align 4
  br label %if.end.316

if.end.316:                                       ; preds = %if.then.314, %if.end.312
  br label %if.end.317

if.end.317:                                       ; preds = %if.end.316, %if.end.222
  br label %if.end.318

if.end.318:                                       ; preds = %if.end.317, %if.end.166
  br label %if.end.319

if.end.319:                                       ; preds = %if.end.318, %if.end.124
  %188 = load i8*, i8** %s, align 8
  store i8* %188, i8** %base, align 8
  store i32 0, i32* %skipspaces, align 4
  br label %while.cond

while.end.320:                                    ; preds = %while.cond
  %189 = load i32*, i32** %fpc, align 8
  %incdec.ptr321 = getelementptr inbounds i32, i32* %189, i32 1
  store i32* %incdec.ptr321, i32** %fpc, align 8
  store i32 0, i32* %189, align 4
  %190 = load i32*, i32** %fpc, align 8
  %191 = load i32*, i32** %fops, align 8
  %sub.ptr.lhs.cast322 = ptrtoint i32* %190 to i64
  %sub.ptr.rhs.cast323 = ptrtoint i32* %191 to i64
  %sub.ptr.sub324 = sub i64 %sub.ptr.lhs.cast322, %sub.ptr.rhs.cast323
  %sub.ptr.div325 = sdiv exact i64 %sub.ptr.sub324, 4
  %conv326 = trunc i64 %sub.ptr.div325 to i32
  store i32 %conv326, i32* %arg, align 4
  %192 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any327 = getelementptr inbounds %struct.sv, %struct.sv* %192, i32 0, i32 0
  %193 = load i8*, i8** %sv_any327, align 8
  %194 = bitcast i8* %193 to %struct.xpv*
  %xpv_cur328 = getelementptr inbounds %struct.xpv, %struct.xpv* %194, i32 0, i32 1
  %195 = load i64, i64* %xpv_cur328, align 8
  %rem = urem i64 %195, 4
  %sub329 = sub i64 4, %rem
  %conv330 = trunc i64 %sub329 to i32
  store i32 %conv330, i32* %z, align 4
  %196 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any331 = getelementptr inbounds %struct.sv, %struct.sv* %196, i32 0, i32 0
  %197 = load i8*, i8** %sv_any331, align 8
  %198 = bitcast i8* %197 to %struct.xpv*
  %xpv_len = getelementptr inbounds %struct.xpv, %struct.xpv* %198, i32 0, i32 2
  %199 = load i64, i64* %xpv_len, align 8
  %200 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any332 = getelementptr inbounds %struct.sv, %struct.sv* %200, i32 0, i32 0
  %201 = load i8*, i8** %sv_any332, align 8
  %202 = bitcast i8* %201 to %struct.xpv*
  %xpv_cur333 = getelementptr inbounds %struct.xpv, %struct.xpv* %202, i32 0, i32 1
  %203 = load i64, i64* %xpv_cur333, align 8
  %204 = load i32, i32* %z, align 4
  %conv334 = sext i32 %204 to i64
  %add335 = add i64 %203, %conv334
  %205 = load i32, i32* %arg, align 4
  %conv336 = sext i32 %205 to i64
  %mul337 = mul i64 %conv336, 4
  %add338 = add i64 %add335, %mul337
  %add339 = add i64 %add338, 4
  %cmp340 = icmp ult i64 %199, %add339
  br i1 %cmp340, label %cond.true.342, label %cond.false.352

cond.true.342:                                    ; preds = %while.end.320
  %206 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %207 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any343 = getelementptr inbounds %struct.sv, %struct.sv* %207, i32 0, i32 0
  %208 = load i8*, i8** %sv_any343, align 8
  %209 = bitcast i8* %208 to %struct.xpv*
  %xpv_cur344 = getelementptr inbounds %struct.xpv, %struct.xpv* %209, i32 0, i32 1
  %210 = load i64, i64* %xpv_cur344, align 8
  %211 = load i32, i32* %z, align 4
  %conv345 = sext i32 %211 to i64
  %add346 = add i64 %210, %conv345
  %212 = load i32, i32* %arg, align 4
  %conv347 = sext i32 %212 to i64
  %mul348 = mul i64 %conv347, 4
  %add349 = add i64 %add346, %mul348
  %add350 = add i64 %add349, 4
  %call351 = call i8* @Perl_sv_grow(%struct.sv* %206, i64 %add350)
  br label %cond.end.355

cond.false.352:                                   ; preds = %while.end.320
  %213 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any353 = getelementptr inbounds %struct.sv, %struct.sv* %213, i32 0, i32 0
  %214 = load i8*, i8** %sv_any353, align 8
  %215 = bitcast i8* %214 to %struct.xpv*
  %xpv_pv354 = getelementptr inbounds %struct.xpv, %struct.xpv* %215, i32 0, i32 0
  %216 = load i8*, i8** %xpv_pv354, align 8
  br label %cond.end.355

cond.end.355:                                     ; preds = %cond.false.352, %cond.true.342
  %cond356 = phi i8* [ %call351, %cond.true.342 ], [ %216, %cond.false.352 ]
  %217 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any357 = getelementptr inbounds %struct.sv, %struct.sv* %217, i32 0, i32 0
  %218 = load i8*, i8** %sv_any357, align 8
  %219 = bitcast i8* %218 to %struct.xpv*
  %xpv_pv358 = getelementptr inbounds %struct.xpv, %struct.xpv* %219, i32 0, i32 0
  %220 = load i8*, i8** %xpv_pv358, align 8
  %221 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any359 = getelementptr inbounds %struct.sv, %struct.sv* %221, i32 0, i32 0
  %222 = load i8*, i8** %sv_any359, align 8
  %223 = bitcast i8* %222 to %struct.xpv*
  %xpv_cur360 = getelementptr inbounds %struct.xpv, %struct.xpv* %223, i32 0, i32 1
  %224 = load i64, i64* %xpv_cur360, align 8
  %add.ptr361 = getelementptr inbounds i8, i8* %220, i64 %224
  %225 = load i32, i32* %z, align 4
  %idx.ext = sext i32 %225 to i64
  %add.ptr362 = getelementptr inbounds i8, i8* %add.ptr361, i64 %idx.ext
  store i8* %add.ptr362, i8** %s, align 8
  %226 = load i8*, i8** %s, align 8
  %227 = load i32*, i32** %fops, align 8
  %228 = bitcast i32* %227 to i8*
  %229 = load i32, i32* %arg, align 4
  %conv363 = sext i32 %229 to i64
  %mul364 = mul i64 %conv363, 4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %226, i8* %228, i64 %mul364, i32 1, i1 false)
  %230 = load i32*, i32** %fops, align 8
  %231 = bitcast i32* %230 to i8*
  call void @Perl_safesysfree(i8* %231)
  %232 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_magic(%struct.sv* %232, %struct.sv* null, i32 102, i8* null, i32 0)
  %233 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags365 = getelementptr inbounds %struct.sv, %struct.sv* %233, i32 0, i32 2
  %234 = load i32, i32* %sv_flags365, align 4
  %or366 = or i32 %234, -2147483648
  store i32 %or366, i32* %sv_flags365, align 4
  %235 = load i8, i8* %unchopnum, align 1
  %conv367 = sext i8 %235 to i32
  %tobool368 = icmp ne i32 %conv367, 0
  br i1 %tobool368, label %land.lhs.true.369, label %if.end.374

land.lhs.true.369:                                ; preds = %cond.end.355
  %236 = load i8, i8* %repeat, align 1
  %conv370 = sext i8 %236 to i32
  %tobool371 = icmp ne i32 %conv370, 0
  br i1 %tobool371, label %if.then.372, label %if.end.374

if.then.372:                                      ; preds = %land.lhs.true.369
  %call373 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.86, i32 0, i32 0))
  store %struct.op* %call373, %struct.op** %retval
  br label %return

if.end.374:                                       ; preds = %land.lhs.true.369, %cond.end.355
  store %struct.op* null, %struct.op** %retval
  br label %return

return:                                           ; preds = %if.end.374, %if.then.372
  %237 = load %struct.op*, %struct.op** %retval
  ret %struct.op* %237
}

declare i8* @Perl_sv_pvn_force_flags(%struct.sv*, i64*, i32) #1

declare i8* @Perl_sv_grow(%struct.sv*, i64) #1

declare void @Perl_warner(i32, i8*, ...) #1

declare i64 @Perl_sv_len_utf8(%struct.sv*) #1

declare void @Perl_sv_pos_u2b(%struct.sv*, i32*, i32*) #1

; Function Attrs: nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #2

declare void @Perl_sv_chop(%struct.sv*, i8*) #1

declare double @Perl_sv_2nv(%struct.sv*) #1

; Function Attrs: nounwind uwtable
define internal signext i8 @S_num_overflow(double %value, i32 %fldsize, i32 %frcsize) #0 {
entry:
  %value.addr = alloca double, align 8
  %fldsize.addr = alloca i32, align 4
  %frcsize.addr = alloca i32, align 4
  %pwr = alloca double, align 8
  %eps = alloca double, align 8
  %res = alloca i8, align 1
  %intsize = alloca i32, align 4
  store double %value, double* %value.addr, align 8
  store i32 %fldsize, i32* %fldsize.addr, align 4
  store i32 %frcsize, i32* %frcsize.addr, align 4
  store double 1.000000e+00, double* %pwr, align 8
  store double 5.000000e-01, double* %eps, align 8
  store i8 0, i8* %res, align 1
  %0 = load i32, i32* %fldsize.addr, align 4
  %1 = load double, double* %value.addr, align 8
  %cmp = fcmp olt double %1, 0.000000e+00
  %cond = select i1 %cmp, i32 1, i32 0
  %sub = sub nsw i32 %0, %cond
  store i32 %sub, i32* %intsize, align 4
  %2 = load i32, i32* %frcsize.addr, align 4
  %and = and i32 %2, 256
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %intsize, align 4
  %dec = add nsw i32 %3, -1
  store i32 %dec, i32* %intsize, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* %frcsize.addr, align 4
  %and1 = and i32 %4, 255
  store i32 %and1, i32* %frcsize.addr, align 4
  %5 = load i32, i32* %frcsize.addr, align 4
  %6 = load i32, i32* %intsize, align 4
  %sub2 = sub nsw i32 %6, %5
  store i32 %sub2, i32* %intsize, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %7 = load i32, i32* %intsize, align 4
  %dec3 = add nsw i32 %7, -1
  store i32 %dec3, i32* %intsize, align 4
  %tobool4 = icmp ne i32 %7, 0
  br i1 %tobool4, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %8 = load double, double* %pwr, align 8
  %mul = fmul double %8, 1.000000e+01
  store double %mul, double* %pwr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %while.cond.5

while.cond.5:                                     ; preds = %while.body.8, %while.end
  %9 = load i32, i32* %frcsize.addr, align 4
  %dec6 = add nsw i32 %9, -1
  store i32 %dec6, i32* %frcsize.addr, align 4
  %tobool7 = icmp ne i32 %9, 0
  br i1 %tobool7, label %while.body.8, label %while.end.9

while.body.8:                                     ; preds = %while.cond.5
  %10 = load double, double* %eps, align 8
  %div = fdiv double %10, 1.000000e+01
  store double %div, double* %eps, align 8
  br label %while.cond.5

while.end.9:                                      ; preds = %while.cond.5
  %11 = load double, double* %value.addr, align 8
  %cmp10 = fcmp oge double %11, 0.000000e+00
  br i1 %cmp10, label %if.then.11, label %if.else

if.then.11:                                       ; preds = %while.end.9
  %12 = load double, double* %value.addr, align 8
  %13 = load double, double* %eps, align 8
  %add = fadd double %12, %13
  %14 = load double, double* %pwr, align 8
  %cmp12 = fcmp oge double %add, %14
  br i1 %cmp12, label %if.then.13, label %if.end.14

if.then.13:                                       ; preds = %if.then.11
  store i8 1, i8* %res, align 1
  br label %if.end.14

if.end.14:                                        ; preds = %if.then.13, %if.then.11
  br label %if.end.20

if.else:                                          ; preds = %while.end.9
  %15 = load double, double* %value.addr, align 8
  %16 = load double, double* %eps, align 8
  %sub15 = fsub double %15, %16
  %17 = load double, double* %pwr, align 8
  %sub16 = fsub double -0.000000e+00, %17
  %cmp17 = fcmp ole double %sub15, %sub16
  br i1 %cmp17, label %if.then.18, label %if.end.19

if.then.18:                                       ; preds = %if.else
  store i8 1, i8* %res, align 1
  br label %if.end.19

if.end.19:                                        ; preds = %if.then.18, %if.else
  br label %if.end.20

if.end.20:                                        ; preds = %if.end.19, %if.end.14
  %18 = load i8, i8* %res, align 1
  ret i8 %18
}

declare i32 @sprintf(i8*, i8*, ...) #1

declare i32 @strncmp(i8*, i8*, i64) #1

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_grepstart() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %src = alloca %struct.sv*, align 8
  %tmp = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %2 = load i32*, i32** @PL_markstack_ptr, align 8
  %3 = load i32, i32* %2, align 4
  %idx.ext = sext i32 %3 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %idx.ext
  %4 = load %struct.sv**, %struct.sv*** %sp, align 8
  %cmp = icmp eq %struct.sv** %add.ptr, %4
  br i1 %cmp, label %if.then, label %if.end.33

if.then:                                          ; preds = %entry
  %5 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %5, i32 -1
  store i32* %incdec.ptr, i32** @PL_markstack_ptr, align 8
  %6 = load i32, i32* %5, align 4
  %7 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 6
  %8 = load i8, i8* %op_flags, align 1
  %conv = zext i8 %8 to i32
  %and = and i32 %conv, 3
  %cmp1 = icmp eq i32 %and, 1
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  br label %cond.end.19

cond.false:                                       ; preds = %if.then
  %9 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags3 = getelementptr inbounds %struct.op, %struct.op* %9, i32 0, i32 6
  %10 = load i8, i8* %op_flags3, align 1
  %conv4 = zext i8 %10 to i32
  %and5 = and i32 %conv4, 3
  %cmp6 = icmp eq i32 %and5, 2
  br i1 %cmp6, label %cond.true.8, label %cond.false.9

cond.true.8:                                      ; preds = %cond.false
  br label %cond.end.17

cond.false.9:                                     ; preds = %cond.false
  %11 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags10 = getelementptr inbounds %struct.op, %struct.op* %11, i32 0, i32 6
  %12 = load i8, i8* %op_flags10, align 1
  %conv11 = zext i8 %12 to i32
  %and12 = and i32 %conv11, 3
  %cmp13 = icmp eq i32 %and12, 3
  br i1 %cmp13, label %cond.true.15, label %cond.false.16

cond.true.15:                                     ; preds = %cond.false.9
  br label %cond.end

cond.false.16:                                    ; preds = %cond.false.9
  %call = call i32 @Perl_block_gimme()
  br label %cond.end

cond.end:                                         ; preds = %cond.false.16, %cond.true.15
  %cond = phi i32 [ 1, %cond.true.15 ], [ %call, %cond.false.16 ]
  br label %cond.end.17

cond.end.17:                                      ; preds = %cond.end, %cond.true.8
  %cond18 = phi i32 [ 0, %cond.true.8 ], [ %cond, %cond.end ]
  br label %cond.end.19

cond.end.19:                                      ; preds = %cond.end.17, %cond.true
  %cond20 = phi i32 [ 128, %cond.true ], [ %cond18, %cond.end.17 ]
  %cmp21 = icmp eq i32 %cond20, 0
  br i1 %cmp21, label %if.then.23, label %if.end.31

if.then.23:                                       ; preds = %cond.end.19
  %13 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %14 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %13 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %14 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp24 = icmp slt i64 %sub.ptr.div, 1
  br i1 %cmp24, label %if.then.26, label %if.end

if.then.26:                                       ; preds = %if.then.23
  %15 = load %struct.sv**, %struct.sv*** %sp, align 8
  %16 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call27 = call %struct.sv** @Perl_stack_grow(%struct.sv** %15, %struct.sv** %16, i32 1)
  store %struct.sv** %call27, %struct.sv*** %sp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.26, %if.then.23
  %call28 = call %struct.sv* @Perl_newSViv(i64 0)
  %call29 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call28)
  %17 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr30 = getelementptr inbounds %struct.sv*, %struct.sv** %17, i32 1
  store %struct.sv** %incdec.ptr30, %struct.sv*** %sp, align 8
  store %struct.sv* %call29, %struct.sv** %incdec.ptr30, align 8
  store %struct.sv* %call29, %struct.sv** %tmp
  %18 = load %struct.sv*, %struct.sv** %tmp
  br label %if.end.31

if.end.31:                                        ; preds = %if.end, %cond.end.19
  %19 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %19, %struct.sv*** @PL_stack_sp, align 8
  %20 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %20, i32 0, i32 0
  %21 = load %struct.op*, %struct.op** %op_next, align 8
  %op_next32 = getelementptr inbounds %struct.op, %struct.op* %21, i32 0, i32 0
  %22 = load %struct.op*, %struct.op** %op_next32, align 8
  store %struct.op* %22, %struct.op** %retval
  br label %return

if.end.33:                                        ; preds = %entry
  %23 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %24 = load i32*, i32** @PL_markstack_ptr, align 8
  %25 = load i32, i32* %24, align 4
  %idx.ext34 = sext i32 %25 to i64
  %add.ptr35 = getelementptr inbounds %struct.sv*, %struct.sv** %23, i64 %idx.ext34
  %add.ptr36 = getelementptr inbounds %struct.sv*, %struct.sv** %add.ptr35, i64 1
  store %struct.sv** %add.ptr36, %struct.sv*** @PL_stack_sp, align 8
  %call37 = call %struct.op* @Perl_pp_pushmark()
  %call38 = call %struct.op* @Perl_pp_pushmark()
  call void @Perl_push_scope()
  call void @Perl_save_int(i32* @PL_tmps_floor)
  %26 = load i32, i32* @PL_tmps_ix, align 4
  store i32 %26, i32* @PL_tmps_floor, align 4
  %27 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %sv_any = getelementptr inbounds %struct.gv, %struct.gv* %27, i32 0, i32 0
  %28 = load %struct.xpvgv*, %struct.xpvgv** %sv_any, align 8
  %xgv_gp = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %28, i32 0, i32 7
  %29 = load %struct.gp*, %struct.gp** %xgv_gp, align 8
  %gp_sv = getelementptr inbounds %struct.gp, %struct.gp* %29, i32 0, i32 0
  call void @Perl_save_sptr(%struct.sv** %gp_sv)
  call void @Perl_push_scope()
  call void @Perl_save_vptr(i8* bitcast (%struct.pmop** @PL_curpm to i8*))
  %30 = load i32*, i32** @PL_markstack_ptr, align 8
  %31 = load i32, i32* %30, align 4
  %idxprom = sext i32 %31 to i64
  %32 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %32, i64 %idxprom
  %33 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %33, %struct.sv** %src, align 8
  %34 = load %struct.sv*, %struct.sv** %src, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %34, i32 0, i32 2
  %35 = load i32, i32* %sv_flags, align 4
  %and39 = and i32 %35, -2049
  store i32 %and39, i32* %sv_flags, align 4
  %36 = load %struct.sv*, %struct.sv** %src, align 8
  %37 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %sv_any40 = getelementptr inbounds %struct.gv, %struct.gv* %37, i32 0, i32 0
  %38 = load %struct.xpvgv*, %struct.xpvgv** %sv_any40, align 8
  %xgv_gp41 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %38, i32 0, i32 7
  %39 = load %struct.gp*, %struct.gp** %xgv_gp41, align 8
  %gp_sv42 = getelementptr inbounds %struct.gp, %struct.gp* %39, i32 0, i32 0
  store %struct.sv* %36, %struct.sv** %gp_sv42, align 8
  %40 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %40, %struct.sv*** @PL_stack_sp, align 8
  %41 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %41, i32 0, i32 4
  %42 = load i16, i16* %op_type, align 2
  %conv43 = zext i16 %42 to i32
  %cmp44 = icmp eq i32 %conv43, 154
  br i1 %cmp44, label %if.then.46, label %if.end.48

if.then.46:                                       ; preds = %if.end.33
  %call47 = call %struct.op* @Perl_pp_pushmark()
  br label %if.end.48

if.end.48:                                        ; preds = %if.then.46, %if.end.33
  %43 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next49 = getelementptr inbounds %struct.op, %struct.op* %43, i32 0, i32 0
  %44 = load %struct.op*, %struct.op** %op_next49, align 8
  %45 = bitcast %struct.op* %44 to %struct.logop*
  %op_other = getelementptr inbounds %struct.logop, %struct.logop* %45, i32 0, i32 9
  %46 = load %struct.op*, %struct.op** %op_other, align 8
  store %struct.op* %46, %struct.op** %retval
  br label %return

return:                                           ; preds = %if.end.48, %if.end.31
  %47 = load %struct.op*, %struct.op** %retval
  ret %struct.op* %47
}

; Function Attrs: nounwind uwtable
define i32 @Perl_block_gimme() #0 {
entry:
  %retval = alloca i32, align 4
  %cxix = alloca i32, align 4
  %0 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %0, i32 0, i32 2
  %1 = load i32, i32* %si_cxix, align 4
  %call = call i32 @S_dopoptosub(i32 %1)
  store i32 %call, i32* %cxix, align 4
  %2 = load i32, i32* %cxix, align 4
  %cmp = icmp slt i32 %2, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 128, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i32, i32* %cxix, align 4
  %idxprom = sext i32 %3 to i64
  %4 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxstack = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %4, i32 0, i32 1
  %5 = load %struct.context*, %struct.context** %si_cxstack, align 8
  %arrayidx = getelementptr inbounds %struct.context, %struct.context* %5, i64 %idxprom
  %cx_u = getelementptr inbounds %struct.context, %struct.context* %arrayidx, i32 0, i32 1
  %cx_blk = bitcast %union.anon* %cx_u to %struct.block*
  %blku_gimme = getelementptr inbounds %struct.block, %struct.block* %cx_blk, i32 0, i32 6
  %6 = load i8, i8* %blku_gimme, align 1
  %conv = zext i8 %6 to i32
  switch i32 %conv, label %sw.default [
    i32 128, label %sw.bb
    i32 0, label %sw.bb.1
    i32 1, label %sw.bb.2
  ]

sw.bb:                                            ; preds = %if.end
  store i32 128, i32* %retval
  br label %return

sw.bb.1:                                          ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

sw.bb.2:                                          ; preds = %if.end
  store i32 1, i32* %retval
  br label %return

sw.default:                                       ; preds = %if.end
  %7 = load i32, i32* %cxix, align 4
  %idxprom3 = sext i32 %7 to i64
  %8 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxstack4 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %8, i32 0, i32 1
  %9 = load %struct.context*, %struct.context** %si_cxstack4, align 8
  %arrayidx5 = getelementptr inbounds %struct.context, %struct.context* %9, i64 %idxprom3
  %cx_u6 = getelementptr inbounds %struct.context, %struct.context* %arrayidx5, i32 0, i32 1
  %cx_blk7 = bitcast %union.anon* %cx_u6 to %struct.block*
  %blku_gimme8 = getelementptr inbounds %struct.block, %struct.block* %cx_blk7, i32 0, i32 6
  %10 = load i8, i8* %blku_gimme8, align 1
  %conv9 = zext i8 %10 to i32
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.14, i32 0, i32 0), i32 %conv9)
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %sw.default, %sw.bb.2, %sw.bb.1, %sw.bb, %if.then
  %11 = load i32, i32* %retval
  ret i32 %11
}

declare %struct.op* @Perl_pp_pushmark() #1

declare void @Perl_push_scope() #1

declare void @Perl_save_int(i32*) #1

declare void @Perl_save_sptr(%struct.sv**) #1

declare void @Perl_save_vptr(i8*) #1

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_mapstart() #0 {
entry:
  %call = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.9, i32 0, i32 0))
  ret %struct.op* %call
}

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_mapwhile() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %gimme = alloca i32, align 4
  %items = alloca i32, align 4
  %count = alloca i32, align 4
  %shift = alloca i32, align 4
  %src = alloca %struct.sv**, align 8
  %dst = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %tmp = alloca %struct.sv*, align 8
  %src139 = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 6
  %2 = load i8, i8* %op_flags, align 1
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 3
  %cmp = icmp eq i32 %and, 1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end.18

cond.false:                                       ; preds = %entry
  %3 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags2 = getelementptr inbounds %struct.op, %struct.op* %3, i32 0, i32 6
  %4 = load i8, i8* %op_flags2, align 1
  %conv3 = zext i8 %4 to i32
  %and4 = and i32 %conv3, 3
  %cmp5 = icmp eq i32 %and4, 2
  br i1 %cmp5, label %cond.true.7, label %cond.false.8

cond.true.7:                                      ; preds = %cond.false
  br label %cond.end.16

cond.false.8:                                     ; preds = %cond.false
  %5 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags9 = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 6
  %6 = load i8, i8* %op_flags9, align 1
  %conv10 = zext i8 %6 to i32
  %and11 = and i32 %conv10, 3
  %cmp12 = icmp eq i32 %and11, 3
  br i1 %cmp12, label %cond.true.14, label %cond.false.15

cond.true.14:                                     ; preds = %cond.false.8
  br label %cond.end

cond.false.15:                                    ; preds = %cond.false.8
  %call = call i32 @Perl_block_gimme()
  br label %cond.end

cond.end:                                         ; preds = %cond.false.15, %cond.true.14
  %cond = phi i32 [ 1, %cond.true.14 ], [ %call, %cond.false.15 ]
  br label %cond.end.16

cond.end.16:                                      ; preds = %cond.end, %cond.true.7
  %cond17 = phi i32 [ 0, %cond.true.7 ], [ %cond, %cond.end ]
  br label %cond.end.18

cond.end.18:                                      ; preds = %cond.end.16, %cond.true
  %cond19 = phi i32 [ 128, %cond.true ], [ %cond17, %cond.end.16 ]
  store i32 %cond19, i32* %gimme, align 4
  %7 = load %struct.sv**, %struct.sv*** %sp, align 8
  %8 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %7 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %8 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %9 = load i32*, i32** @PL_markstack_ptr, align 8
  %10 = load i32, i32* %9, align 4
  %conv20 = sext i32 %10 to i64
  %sub = sub nsw i64 %sub.ptr.div, %conv20
  %conv21 = trunc i64 %sub to i32
  store i32 %conv21, i32* %items, align 4
  %11 = load i32*, i32** @PL_markstack_ptr, align 8
  %arrayidx = getelementptr inbounds i32, i32* %11, i64 -1
  %12 = load i32, i32* %arrayidx, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %arrayidx, align 4
  %13 = load i32, i32* %items, align 4
  %tobool = icmp ne i32 %13, 0
  br i1 %tobool, label %land.lhs.true, label %if.end.94

land.lhs.true:                                    ; preds = %cond.end.18
  %14 = load i32, i32* %gimme, align 4
  %cmp22 = icmp ne i32 %14, 128
  br i1 %cmp22, label %if.then, label %if.end.94

if.then:                                          ; preds = %land.lhs.true
  %15 = load i32, i32* %items, align 4
  %16 = load i32*, i32** @PL_markstack_ptr, align 8
  %arrayidx24 = getelementptr inbounds i32, i32* %16, i64 -1
  %17 = load i32, i32* %arrayidx24, align 4
  %18 = load i32*, i32** @PL_markstack_ptr, align 8
  %arrayidx25 = getelementptr inbounds i32, i32* %18, i64 -2
  %19 = load i32, i32* %arrayidx25, align 4
  %sub26 = sub nsw i32 %17, %19
  %cmp27 = icmp sgt i32 %15, %sub26
  br i1 %cmp27, label %if.then.29, label %if.end.60

if.then.29:                                       ; preds = %if.then
  %20 = load i32, i32* %items, align 4
  %21 = load i32*, i32** @PL_markstack_ptr, align 8
  %arrayidx30 = getelementptr inbounds i32, i32* %21, i64 -1
  %22 = load i32, i32* %arrayidx30, align 4
  %23 = load i32*, i32** @PL_markstack_ptr, align 8
  %arrayidx31 = getelementptr inbounds i32, i32* %23, i64 -2
  %24 = load i32, i32* %arrayidx31, align 4
  %sub32 = sub nsw i32 %22, %24
  %sub33 = sub nsw i32 %20, %sub32
  store i32 %sub33, i32* %shift, align 4
  %25 = load %struct.sv**, %struct.sv*** %sp, align 8
  %26 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast34 = ptrtoint %struct.sv** %25 to i64
  %sub.ptr.rhs.cast35 = ptrtoint %struct.sv** %26 to i64
  %sub.ptr.sub36 = sub i64 %sub.ptr.lhs.cast34, %sub.ptr.rhs.cast35
  %sub.ptr.div37 = sdiv exact i64 %sub.ptr.sub36, 8
  %27 = load i32*, i32** @PL_markstack_ptr, align 8
  %arrayidx38 = getelementptr inbounds i32, i32* %27, i64 -1
  %28 = load i32, i32* %arrayidx38, align 4
  %sub39 = sub nsw i32 %28, 1
  %conv40 = sext i32 %sub39 to i64
  %sub41 = sub nsw i64 %sub.ptr.div37, %conv40
  %conv42 = trunc i64 %sub41 to i32
  store i32 %conv42, i32* %count, align 4
  %29 = load i32, i32* %shift, align 4
  %30 = load i32, i32* %count, align 4
  %cmp43 = icmp slt i32 %29, %30
  br i1 %cmp43, label %if.then.45, label %if.end

if.then.45:                                       ; preds = %if.then.29
  %31 = load i32, i32* %count, align 4
  store i32 %31, i32* %shift, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.45, %if.then.29
  %32 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %33 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast46 = ptrtoint %struct.sv** %32 to i64
  %sub.ptr.rhs.cast47 = ptrtoint %struct.sv** %33 to i64
  %sub.ptr.sub48 = sub i64 %sub.ptr.lhs.cast46, %sub.ptr.rhs.cast47
  %sub.ptr.div49 = sdiv exact i64 %sub.ptr.sub48, 8
  %34 = load i32, i32* %shift, align 4
  %conv50 = sext i32 %34 to i64
  %cmp51 = icmp slt i64 %sub.ptr.div49, %conv50
  br i1 %cmp51, label %if.then.53, label %if.end.55

if.then.53:                                       ; preds = %if.end
  %35 = load %struct.sv**, %struct.sv*** %sp, align 8
  %36 = load %struct.sv**, %struct.sv*** %sp, align 8
  %37 = load i32, i32* %shift, align 4
  %call54 = call %struct.sv** @Perl_stack_grow(%struct.sv** %35, %struct.sv** %36, i32 %37)
  store %struct.sv** %call54, %struct.sv*** %sp, align 8
  br label %if.end.55

if.end.55:                                        ; preds = %if.then.53, %if.end
  %38 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %38, %struct.sv*** %src, align 8
  %39 = load i32, i32* %shift, align 4
  %40 = load %struct.sv**, %struct.sv*** %sp, align 8
  %idx.ext = sext i32 %39 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %40, i64 %idx.ext
  store %struct.sv** %add.ptr, %struct.sv*** %sp, align 8
  store %struct.sv** %add.ptr, %struct.sv*** %dst, align 8
  %41 = load i32, i32* %shift, align 4
  %42 = load i32*, i32** @PL_markstack_ptr, align 8
  %arrayidx56 = getelementptr inbounds i32, i32* %42, i64 -1
  %43 = load i32, i32* %arrayidx56, align 4
  %add = add nsw i32 %43, %41
  store i32 %add, i32* %arrayidx56, align 4
  %44 = load i32, i32* %shift, align 4
  %45 = load i32*, i32** @PL_markstack_ptr, align 8
  %46 = load i32, i32* %45, align 4
  %add57 = add nsw i32 %46, %44
  store i32 %add57, i32* %45, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end.55
  %47 = load i32, i32* %count, align 4
  %dec = add nsw i32 %47, -1
  store i32 %dec, i32* %count, align 4
  %tobool58 = icmp ne i32 %47, 0
  br i1 %tobool58, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %48 = load %struct.sv**, %struct.sv*** %src, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %48, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %src, align 8
  %49 = load %struct.sv*, %struct.sv** %48, align 8
  %50 = load %struct.sv**, %struct.sv*** %dst, align 8
  %incdec.ptr59 = getelementptr inbounds %struct.sv*, %struct.sv** %50, i32 -1
  store %struct.sv** %incdec.ptr59, %struct.sv*** %dst, align 8
  store %struct.sv* %49, %struct.sv** %50, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end.60

if.end.60:                                        ; preds = %while.end, %if.then
  %51 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %52 = load i32, i32* %items, align 4
  %53 = load i32*, i32** @PL_markstack_ptr, align 8
  %arrayidx61 = getelementptr inbounds i32, i32* %53, i64 -2
  %54 = load i32, i32* %arrayidx61, align 4
  %add62 = add nsw i32 %54, %52
  store i32 %add62, i32* %arrayidx61, align 4
  %idx.ext63 = sext i32 %add62 to i64
  %add.ptr64 = getelementptr inbounds %struct.sv*, %struct.sv** %51, i64 %idx.ext63
  %add.ptr65 = getelementptr inbounds %struct.sv*, %struct.sv** %add.ptr64, i64 -1
  store %struct.sv** %add.ptr65, %struct.sv*** %dst, align 8
  %55 = load i32, i32* %gimme, align 4
  %cmp66 = icmp eq i32 %55, 1
  br i1 %cmp66, label %if.then.68, label %if.else

if.then.68:                                       ; preds = %if.end.60
  br label %while.cond.69

while.cond.69:                                    ; preds = %cond.end.81, %if.then.68
  %56 = load i32, i32* %items, align 4
  %dec70 = add nsw i32 %56, -1
  store i32 %dec70, i32* %items, align 4
  %cmp71 = icmp sgt i32 %56, 0
  br i1 %cmp71, label %while.body.73, label %while.end.84

while.body.73:                                    ; preds = %while.cond.69
  %57 = load %struct.sv**, %struct.sv*** %sp, align 8
  %58 = load %struct.sv*, %struct.sv** %57, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %58, i32 0, i32 2
  %59 = load i32, i32* %sv_flags, align 4
  %and74 = and i32 %59, 2048
  %tobool75 = icmp ne i32 %and74, 0
  br i1 %tobool75, label %cond.true.76, label %cond.false.78

cond.true.76:                                     ; preds = %while.body.73
  %60 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr77 = getelementptr inbounds %struct.sv*, %struct.sv** %60, i32 -1
  store %struct.sv** %incdec.ptr77, %struct.sv*** %sp, align 8
  %61 = load %struct.sv*, %struct.sv** %60, align 8
  br label %cond.end.81

cond.false.78:                                    ; preds = %while.body.73
  %62 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr79 = getelementptr inbounds %struct.sv*, %struct.sv** %62, i32 -1
  store %struct.sv** %incdec.ptr79, %struct.sv*** %sp, align 8
  %63 = load %struct.sv*, %struct.sv** %62, align 8
  %call80 = call %struct.sv* @Perl_sv_mortalcopy(%struct.sv* %63)
  br label %cond.end.81

cond.end.81:                                      ; preds = %cond.false.78, %cond.true.76
  %cond82 = phi %struct.sv* [ %61, %cond.true.76 ], [ %call80, %cond.false.78 ]
  %64 = load %struct.sv**, %struct.sv*** %dst, align 8
  %incdec.ptr83 = getelementptr inbounds %struct.sv*, %struct.sv** %64, i32 -1
  store %struct.sv** %incdec.ptr83, %struct.sv*** %dst, align 8
  store %struct.sv* %cond82, %struct.sv** %64, align 8
  br label %while.cond.69

while.end.84:                                     ; preds = %while.cond.69
  br label %if.end.93

if.else:                                          ; preds = %if.end.60
  br label %while.cond.85

while.cond.85:                                    ; preds = %while.body.89, %if.else
  %65 = load i32, i32* %items, align 4
  %dec86 = add nsw i32 %65, -1
  store i32 %dec86, i32* %items, align 4
  %cmp87 = icmp sgt i32 %65, 0
  br i1 %cmp87, label %while.body.89, label %while.end.92

while.body.89:                                    ; preds = %while.cond.85
  %66 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr90 = getelementptr inbounds %struct.sv*, %struct.sv** %66, i32 -1
  store %struct.sv** %incdec.ptr90, %struct.sv*** %sp, align 8
  %67 = load %struct.sv*, %struct.sv** %66, align 8
  %68 = load %struct.sv**, %struct.sv*** %dst, align 8
  %incdec.ptr91 = getelementptr inbounds %struct.sv*, %struct.sv** %68, i32 -1
  store %struct.sv** %incdec.ptr91, %struct.sv*** %dst, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %68, align 8
  br label %while.cond.85

while.end.92:                                     ; preds = %while.cond.85
  br label %if.end.93

if.end.93:                                        ; preds = %while.end.92, %while.end.84
  br label %if.end.94

if.end.94:                                        ; preds = %if.end.93, %land.lhs.true, %cond.end.18
  call void @Perl_pop_scope()
  %69 = load i32*, i32** @PL_markstack_ptr, align 8
  %arrayidx95 = getelementptr inbounds i32, i32* %69, i64 -1
  %70 = load i32, i32* %arrayidx95, align 4
  %71 = load i32*, i32** @PL_markstack_ptr, align 8
  %72 = load i32, i32* %71, align 4
  %cmp96 = icmp sgt i32 %70, %72
  br i1 %cmp96, label %if.then.98, label %if.else.137

if.then.98:                                       ; preds = %if.end.94
  %73 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr99 = getelementptr inbounds i32, i32* %73, i32 -1
  store i32* %incdec.ptr99, i32** @PL_markstack_ptr, align 8
  %74 = load i32, i32* %73, align 4
  call void @Perl_pop_scope()
  %75 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr100 = getelementptr inbounds i32, i32* %75, i32 -1
  store i32* %incdec.ptr100, i32** @PL_markstack_ptr, align 8
  %76 = load i32, i32* %75, align 4
  %77 = load i32*, i32** @PL_markstack_ptr, align 8
  %78 = load i32, i32* %77, align 4
  %dec101 = add nsw i32 %78, -1
  store i32 %dec101, i32* %77, align 4
  %79 = load i32*, i32** @PL_markstack_ptr, align 8
  %arrayidx102 = getelementptr inbounds i32, i32* %79, i64 -1
  %80 = load i32, i32* %arrayidx102, align 4
  %sub103 = sub nsw i32 %dec101, %80
  store i32 %sub103, i32* %items, align 4
  %81 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr104 = getelementptr inbounds i32, i32* %81, i32 -1
  store i32* %incdec.ptr104, i32** @PL_markstack_ptr, align 8
  %82 = load i32, i32* %81, align 4
  %83 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %84 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr105 = getelementptr inbounds i32, i32* %84, i32 -1
  store i32* %incdec.ptr105, i32** @PL_markstack_ptr, align 8
  %85 = load i32, i32* %84, align 4
  %idx.ext106 = sext i32 %85 to i64
  %add.ptr107 = getelementptr inbounds %struct.sv*, %struct.sv** %83, i64 %idx.ext106
  store %struct.sv** %add.ptr107, %struct.sv*** %sp, align 8
  %86 = load i32, i32* %gimme, align 4
  %cmp108 = icmp eq i32 %86, 0
  br i1 %cmp108, label %if.then.110, label %if.else.129

if.then.110:                                      ; preds = %if.then.98
  %87 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %87, i32 0, i32 3
  %88 = load i64, i64* %op_targ, align 8
  %89 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %arrayidx111 = getelementptr inbounds %struct.sv*, %struct.sv** %89, i64 %88
  %90 = load %struct.sv*, %struct.sv** %arrayidx111, align 8
  store %struct.sv* %90, %struct.sv** %targ, align 8
  %91 = load %struct.sv*, %struct.sv** %targ, align 8
  %92 = load i32, i32* %items, align 4
  %conv112 = sext i32 %92 to i64
  call void @Perl_sv_setiv(%struct.sv* %91, i64 %conv112)
  %93 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags113 = getelementptr inbounds %struct.sv, %struct.sv* %93, i32 0, i32 2
  %94 = load i32, i32* %sv_flags113, align 4
  %and114 = and i32 %94, 16384
  %tobool115 = icmp ne i32 %and114, 0
  br i1 %tobool115, label %if.then.116, label %if.end.118

if.then.116:                                      ; preds = %if.then.110
  %95 = load %struct.sv*, %struct.sv** %targ, align 8
  %call117 = call i32 @Perl_mg_set(%struct.sv* %95)
  br label %if.end.118

if.end.118:                                       ; preds = %if.then.116, %if.then.110
  %96 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %97 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast119 = ptrtoint %struct.sv** %96 to i64
  %sub.ptr.rhs.cast120 = ptrtoint %struct.sv** %97 to i64
  %sub.ptr.sub121 = sub i64 %sub.ptr.lhs.cast119, %sub.ptr.rhs.cast120
  %sub.ptr.div122 = sdiv exact i64 %sub.ptr.sub121, 8
  %cmp123 = icmp slt i64 %sub.ptr.div122, 1
  br i1 %cmp123, label %if.then.125, label %if.end.127

if.then.125:                                      ; preds = %if.end.118
  %98 = load %struct.sv**, %struct.sv*** %sp, align 8
  %99 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call126 = call %struct.sv** @Perl_stack_grow(%struct.sv** %98, %struct.sv** %99, i32 1)
  store %struct.sv** %call126, %struct.sv*** %sp, align 8
  br label %if.end.127

if.end.127:                                       ; preds = %if.then.125, %if.end.118
  %100 = load %struct.sv*, %struct.sv** %targ, align 8
  %101 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr128 = getelementptr inbounds %struct.sv*, %struct.sv** %101, i32 1
  store %struct.sv** %incdec.ptr128, %struct.sv*** %sp, align 8
  store %struct.sv* %100, %struct.sv** %incdec.ptr128, align 8
  store %struct.sv* %100, %struct.sv** %tmp
  %102 = load %struct.sv*, %struct.sv** %tmp
  br label %if.end.136

if.else.129:                                      ; preds = %if.then.98
  %103 = load i32, i32* %gimme, align 4
  %cmp130 = icmp eq i32 %103, 1
  br i1 %cmp130, label %if.then.132, label %if.end.135

if.then.132:                                      ; preds = %if.else.129
  %104 = load i32, i32* %items, align 4
  %105 = load %struct.sv**, %struct.sv*** %sp, align 8
  %idx.ext133 = sext i32 %104 to i64
  %add.ptr134 = getelementptr inbounds %struct.sv*, %struct.sv** %105, i64 %idx.ext133
  store %struct.sv** %add.ptr134, %struct.sv*** %sp, align 8
  br label %if.end.135

if.end.135:                                       ; preds = %if.then.132, %if.else.129
  br label %if.end.136

if.end.136:                                       ; preds = %if.end.135, %if.end.127
  %106 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %106, %struct.sv*** @PL_stack_sp, align 8
  %107 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %107, i32 0, i32 0
  %108 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %108, %struct.op** %retval
  br label %return

if.else.137:                                      ; preds = %if.end.94
  call void @Perl_push_scope()
  call void @Perl_save_vptr(i8* bitcast (%struct.pmop** @PL_curpm to i8*))
  %109 = load i32*, i32** @PL_markstack_ptr, align 8
  %arrayidx140 = getelementptr inbounds i32, i32* %109, i64 -1
  %110 = load i32, i32* %arrayidx140, align 4
  %idxprom = sext i32 %110 to i64
  %111 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %arrayidx141 = getelementptr inbounds %struct.sv*, %struct.sv** %111, i64 %idxprom
  %112 = load %struct.sv*, %struct.sv** %arrayidx141, align 8
  store %struct.sv* %112, %struct.sv** %src139, align 8
  %113 = load %struct.sv*, %struct.sv** %src139, align 8
  %sv_flags142 = getelementptr inbounds %struct.sv, %struct.sv* %113, i32 0, i32 2
  %114 = load i32, i32* %sv_flags142, align 4
  %and143 = and i32 %114, -2049
  store i32 %and143, i32* %sv_flags142, align 4
  %115 = load %struct.sv*, %struct.sv** %src139, align 8
  %116 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %sv_any = getelementptr inbounds %struct.gv, %struct.gv* %116, i32 0, i32 0
  %117 = load %struct.xpvgv*, %struct.xpvgv** %sv_any, align 8
  %xgv_gp = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %117, i32 0, i32 7
  %118 = load %struct.gp*, %struct.gp** %xgv_gp, align 8
  %gp_sv = getelementptr inbounds %struct.gp, %struct.gp* %118, i32 0, i32 0
  store %struct.sv* %115, %struct.sv** %gp_sv, align 8
  %119 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %119, %struct.sv*** @PL_stack_sp, align 8
  %120 = load %struct.op*, %struct.op** @PL_op, align 8
  %121 = bitcast %struct.op* %120 to %struct.logop*
  %op_other = getelementptr inbounds %struct.logop, %struct.logop* %121, i32 0, i32 9
  %122 = load %struct.op*, %struct.op** %op_other, align 8
  store %struct.op* %122, %struct.op** %retval
  br label %return

return:                                           ; preds = %if.else.137, %if.end.136
  %123 = load %struct.op*, %struct.op** %retval
  ret %struct.op* %123
}

declare %struct.sv* @Perl_sv_mortalcopy(%struct.sv*) #1

declare void @Perl_pop_scope() #1

declare void @Perl_sv_setiv(%struct.sv*, i64) #1

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_range() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %0 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 6
  %1 = load i8, i8* %op_flags, align 1
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, 3
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags1 = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 6
  %3 = load i8, i8* %op_flags1, align 1
  %conv2 = zext i8 %3 to i32
  %and3 = and i32 %conv2, 3
  %cmp = icmp eq i32 %and3, 3
  %cond = select i1 %cmp, i32 1, i32 0
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call = call i32 @Perl_dowantarray()
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond5 = phi i32 [ %cond, %cond.true ], [ %call, %cond.false ]
  %cmp6 = icmp eq i32 %cond5, 1
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  %4 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %4, i32 0, i32 0
  %5 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %5, %struct.op** %retval
  br label %return

if.end:                                           ; preds = %cond.end
  %6 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 3
  %7 = load i64, i64* %op_targ, align 8
  %8 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %8, i64 %7
  %9 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %9, %struct.sv** @PL_Sv, align 8
  %10 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %tobool8 = icmp ne %struct.sv* %10, null
  br i1 %tobool8, label %cond.false.10, label %cond.true.9

cond.true.9:                                      ; preds = %if.end
  br label %cond.end.50

cond.false.10:                                    ; preds = %if.end
  %11 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 2
  %12 = load i32, i32* %sv_flags, align 4
  %and11 = and i32 %12, 262144
  %tobool12 = icmp ne i32 %and11, 0
  br i1 %tobool12, label %cond.true.13, label %cond.false.25

cond.true.13:                                     ; preds = %cond.false.10
  %13 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 0
  %14 = load i8*, i8** %sv_any, align 8
  %15 = bitcast i8* %14 to %struct.xpv*
  store %struct.xpv* %15, %struct.xpv** @PL_Xpv, align 8
  %tobool14 = icmp ne %struct.xpv* %15, null
  br i1 %tobool14, label %land.rhs, label %land.end.23

land.rhs:                                         ; preds = %cond.true.13
  %16 = load %struct.xpv*, %struct.xpv** @PL_Xpv, align 8
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %16, i32 0, i32 1
  %17 = load i64, i64* %xpv_cur, align 8
  %cmp15 = icmp ugt i64 %17, 1
  br i1 %cmp15, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs
  %18 = load %struct.xpv*, %struct.xpv** @PL_Xpv, align 8
  %xpv_cur17 = getelementptr inbounds %struct.xpv, %struct.xpv* %18, i32 0, i32 1
  %19 = load i64, i64* %xpv_cur17, align 8
  %tobool18 = icmp ne i64 %19, 0
  br i1 %tobool18, label %land.rhs.19, label %land.end

land.rhs.19:                                      ; preds = %lor.rhs
  %20 = load %struct.xpv*, %struct.xpv** @PL_Xpv, align 8
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %20, i32 0, i32 0
  %21 = load i8*, i8** %xpv_pv, align 8
  %22 = load i8, i8* %21, align 1
  %conv20 = sext i8 %22 to i32
  %cmp21 = icmp ne i32 %conv20, 48
  br label %land.end

land.end:                                         ; preds = %land.rhs.19, %lor.rhs
  %23 = phi i1 [ false, %lor.rhs ], [ %cmp21, %land.rhs.19 ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %land.rhs
  %24 = phi i1 [ true, %land.rhs ], [ %23, %land.end ]
  br label %land.end.23

land.end.23:                                      ; preds = %lor.end, %cond.true.13
  %25 = phi i1 [ false, %cond.true.13 ], [ %24, %lor.end ]
  %cond24 = select i1 %25, i32 1, i32 0
  br label %cond.end.48

cond.false.25:                                    ; preds = %cond.false.10
  %26 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags26 = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 2
  %27 = load i32, i32* %sv_flags26, align 4
  %and27 = and i32 %27, 65536
  %tobool28 = icmp ne i32 %and27, 0
  br i1 %tobool28, label %cond.true.29, label %cond.false.33

cond.true.29:                                     ; preds = %cond.false.25
  %28 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any30 = getelementptr inbounds %struct.sv, %struct.sv* %28, i32 0, i32 0
  %29 = load i8*, i8** %sv_any30, align 8
  %30 = bitcast i8* %29 to %struct.xpviv*
  %xiv_iv = getelementptr inbounds %struct.xpviv, %struct.xpviv* %30, i32 0, i32 3
  %31 = load i64, i64* %xiv_iv, align 8
  %cmp31 = icmp ne i64 %31, 0
  %conv32 = zext i1 %cmp31 to i32
  br label %cond.end.46

cond.false.33:                                    ; preds = %cond.false.25
  %32 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags34 = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 2
  %33 = load i32, i32* %sv_flags34, align 4
  %and35 = and i32 %33, 131072
  %tobool36 = icmp ne i32 %and35, 0
  br i1 %tobool36, label %cond.true.37, label %cond.false.41

cond.true.37:                                     ; preds = %cond.false.33
  %34 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any38 = getelementptr inbounds %struct.sv, %struct.sv* %34, i32 0, i32 0
  %35 = load i8*, i8** %sv_any38, align 8
  %36 = bitcast i8* %35 to %struct.xpvnv*
  %xnv_nv = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %36, i32 0, i32 4
  %37 = load double, double* %xnv_nv, align 8
  %cmp39 = fcmp une double %37, 0.000000e+00
  %conv40 = zext i1 %cmp39 to i32
  br label %cond.end.44

cond.false.41:                                    ; preds = %cond.false.33
  %38 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %call42 = call signext i8 @Perl_sv_2bool(%struct.sv* %38)
  %conv43 = sext i8 %call42 to i32
  br label %cond.end.44

cond.end.44:                                      ; preds = %cond.false.41, %cond.true.37
  %cond45 = phi i32 [ %conv40, %cond.true.37 ], [ %conv43, %cond.false.41 ]
  br label %cond.end.46

cond.end.46:                                      ; preds = %cond.end.44, %cond.true.29
  %cond47 = phi i32 [ %conv32, %cond.true.29 ], [ %cond45, %cond.end.44 ]
  br label %cond.end.48

cond.end.48:                                      ; preds = %cond.end.46, %land.end.23
  %cond49 = phi i32 [ %cond24, %land.end.23 ], [ %cond47, %cond.end.46 ]
  br label %cond.end.50

cond.end.50:                                      ; preds = %cond.end.48, %cond.true.9
  %cond51 = phi i32 [ 0, %cond.true.9 ], [ %cond49, %cond.end.48 ]
  %tobool52 = icmp ne i32 %cond51, 0
  br i1 %tobool52, label %if.then.53, label %if.else

if.then.53:                                       ; preds = %cond.end.50
  %39 = load %struct.op*, %struct.op** @PL_op, align 8
  %40 = bitcast %struct.op* %39 to %struct.logop*
  %op_other = getelementptr inbounds %struct.logop, %struct.logop* %40, i32 0, i32 9
  %41 = load %struct.op*, %struct.op** %op_other, align 8
  store %struct.op* %41, %struct.op** %retval
  br label %return

if.else:                                          ; preds = %cond.end.50
  %42 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next54 = getelementptr inbounds %struct.op, %struct.op* %42, i32 0, i32 0
  %43 = load %struct.op*, %struct.op** %op_next54, align 8
  store %struct.op* %43, %struct.op** %retval
  br label %return

return:                                           ; preds = %if.else, %if.then.53, %if.then
  %44 = load %struct.op*, %struct.op** %retval
  ret %struct.op* %44
}

; Function Attrs: nounwind uwtable
define i32 @Perl_dowantarray() #0 {
entry:
  %gimme = alloca i32, align 4
  %call = call i32 @Perl_block_gimme()
  store i32 %call, i32* %gimme, align 4
  %0 = load i32, i32* %gimme, align 4
  %cmp = icmp eq i32 %0, 128
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %1 = load i32, i32* %gimme, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %1, %cond.false ]
  ret i32 %cond
}

declare signext i8 @Perl_sv_2bool(%struct.sv*) #1

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_flip() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %sv = alloca %struct.sv*, align 8
  %targ = alloca %struct.sv*, align 8
  %flip = alloca i32, align 4
  %gv = alloca %struct.gv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 6
  %2 = load i8, i8* %op_flags, align 1
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 3
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags1 = getelementptr inbounds %struct.op, %struct.op* %3, i32 0, i32 6
  %4 = load i8, i8* %op_flags1, align 1
  %conv2 = zext i8 %4 to i32
  %and3 = and i32 %conv2, 3
  %cmp = icmp eq i32 %and3, 3
  %cond = select i1 %cmp, i32 1, i32 0
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call = call i32 @Perl_dowantarray()
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond5 = phi i32 [ %cond, %cond.true ], [ %call, %cond.false ]
  %cmp6 = icmp eq i32 %cond5, 1
  br i1 %cmp6, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end
  %5 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %5, %struct.sv*** @PL_stack_sp, align 8
  %6 = load %struct.op*, %struct.op** @PL_op, align 8
  %7 = bitcast %struct.op* %6 to %struct.unop*
  %op_first = getelementptr inbounds %struct.unop, %struct.unop* %7, i32 0, i32 8
  %8 = load %struct.op*, %struct.op** %op_first, align 8
  %9 = bitcast %struct.op* %8 to %struct.logop*
  %op_other = getelementptr inbounds %struct.logop, %struct.logop* %9, i32 0, i32 9
  %10 = load %struct.op*, %struct.op** %op_other, align 8
  store %struct.op* %10, %struct.op** %retval
  br label %return

if.else:                                          ; preds = %cond.end
  %11 = load %struct.sv**, %struct.sv*** %sp, align 8
  %12 = load %struct.sv*, %struct.sv** %11, align 8
  store %struct.sv* %12, %struct.sv** %sv, align 8
  %13 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %13, i32 0, i32 3
  %14 = load i64, i64* %op_targ, align 8
  %15 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %15, i64 %14
  %16 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %16, %struct.sv** %targ, align 8
  store i32 0, i32* %flip, align 4
  %17 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %17, i32 0, i32 7
  %18 = load i8, i8* %op_private, align 1
  %conv8 = zext i8 %18 to i32
  %and9 = and i32 %conv8, 64
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %if.then.11, label %if.else.79

if.then.11:                                       ; preds = %if.else
  %19 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  %tobool12 = icmp ne %struct.gv* %19, null
  br i1 %tobool12, label %land.lhs.true, label %cond.false.22

land.lhs.true:                                    ; preds = %if.then.11
  %20 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  %21 = bitcast %struct.gv* %20 to %struct.sv*
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 2
  %22 = load i32, i32* %sv_flags, align 4
  %and13 = and i32 %22, 255
  %cmp14 = icmp eq i32 %and13, 13
  br i1 %cmp14, label %land.lhs.true.16, label %cond.false.22

land.lhs.true.16:                                 ; preds = %land.lhs.true
  %23 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  %sv_any = getelementptr inbounds %struct.gv, %struct.gv* %23, i32 0, i32 0
  %24 = load %struct.xpvgv*, %struct.xpvgv** %sv_any, align 8
  %xgv_gp = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %24, i32 0, i32 7
  %25 = load %struct.gp*, %struct.gp** %xgv_gp, align 8
  %tobool17 = icmp ne %struct.gp* %25, null
  br i1 %tobool17, label %cond.true.18, label %cond.false.22

cond.true.18:                                     ; preds = %land.lhs.true.16
  %26 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  %sv_any19 = getelementptr inbounds %struct.gv, %struct.gv* %26, i32 0, i32 0
  %27 = load %struct.xpvgv*, %struct.xpvgv** %sv_any19, align 8
  %xgv_gp20 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %27, i32 0, i32 7
  %28 = load %struct.gp*, %struct.gp** %xgv_gp20, align 8
  %gp_io = getelementptr inbounds %struct.gp, %struct.gp* %28, i32 0, i32 2
  %29 = load %struct.io*, %struct.io** %gp_io, align 8
  %tobool21 = icmp ne %struct.io* %29, null
  br i1 %tobool21, label %if.then.23, label %if.else.39

cond.false.22:                                    ; preds = %land.lhs.true.16, %land.lhs.true, %if.then.11
  br i1 false, label %if.then.23, label %if.else.39

if.then.23:                                       ; preds = %cond.false.22, %cond.true.18
  %30 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags24 = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 2
  %31 = load i32, i32* %sv_flags24, align 4
  %and25 = and i32 %31, 65536
  %tobool26 = icmp ne i32 %and25, 0
  br i1 %tobool26, label %cond.true.27, label %cond.false.29

cond.true.27:                                     ; preds = %if.then.23
  %32 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any28 = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 0
  %33 = load i8*, i8** %sv_any28, align 8
  %34 = bitcast i8* %33 to %struct.xpviv*
  %xiv_iv = getelementptr inbounds %struct.xpviv, %struct.xpviv* %34, i32 0, i32 3
  %35 = load i64, i64* %xiv_iv, align 8
  br label %cond.end.31

cond.false.29:                                    ; preds = %if.then.23
  %36 = load %struct.sv*, %struct.sv** %sv, align 8
  %call30 = call i64 @Perl_sv_2iv(%struct.sv* %36)
  br label %cond.end.31

cond.end.31:                                      ; preds = %cond.false.29, %cond.true.27
  %cond32 = phi i64 [ %35, %cond.true.27 ], [ %call30, %cond.false.29 ]
  %37 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  %sv_any33 = getelementptr inbounds %struct.gv, %struct.gv* %37, i32 0, i32 0
  %38 = load %struct.xpvgv*, %struct.xpvgv** %sv_any33, align 8
  %xgv_gp34 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %38, i32 0, i32 7
  %39 = load %struct.gp*, %struct.gp** %xgv_gp34, align 8
  %gp_io35 = getelementptr inbounds %struct.gp, %struct.gp* %39, i32 0, i32 2
  %40 = load %struct.io*, %struct.io** %gp_io35, align 8
  %sv_any36 = getelementptr inbounds %struct.io, %struct.io* %40, i32 0, i32 0
  %41 = load %struct.xpvio*, %struct.xpvio** %sv_any36, align 8
  %xio_lines = getelementptr inbounds %struct.xpvio, %struct.xpvio* %41, i32 0, i32 10
  %42 = load i64, i64* %xio_lines, align 8
  %cmp37 = icmp eq i64 %cond32, %42
  %conv38 = zext i1 %cmp37 to i32
  store i32 %conv38, i32* %flip, align 4
  br label %if.end.78

if.else.39:                                       ; preds = %cond.false.22, %cond.true.18
  %call40 = call %struct.gv* @Perl_gv_fetchpv(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i32 0, i32 0), i32 1, i32 4)
  store %struct.gv* %call40, %struct.gv** %gv, align 8
  %43 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool41 = icmp ne %struct.gv* %43, null
  br i1 %tobool41, label %land.lhs.true.42, label %if.end

land.lhs.true.42:                                 ; preds = %if.else.39
  %44 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any43 = getelementptr inbounds %struct.gv, %struct.gv* %44, i32 0, i32 0
  %45 = load %struct.xpvgv*, %struct.xpvgv** %sv_any43, align 8
  %xgv_gp44 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %45, i32 0, i32 7
  %46 = load %struct.gp*, %struct.gp** %xgv_gp44, align 8
  %gp_sv = getelementptr inbounds %struct.gp, %struct.gp* %46, i32 0, i32 0
  %47 = load %struct.sv*, %struct.sv** %gp_sv, align 8
  %tobool45 = icmp ne %struct.sv* %47, null
  br i1 %tobool45, label %if.then.46, label %if.end

if.then.46:                                       ; preds = %land.lhs.true.42
  %48 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags47 = getelementptr inbounds %struct.sv, %struct.sv* %48, i32 0, i32 2
  %49 = load i32, i32* %sv_flags47, align 4
  %and48 = and i32 %49, 65536
  %tobool49 = icmp ne i32 %and48, 0
  br i1 %tobool49, label %cond.true.50, label %cond.false.53

cond.true.50:                                     ; preds = %if.then.46
  %50 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any51 = getelementptr inbounds %struct.sv, %struct.sv* %50, i32 0, i32 0
  %51 = load i8*, i8** %sv_any51, align 8
  %52 = bitcast i8* %51 to %struct.xpviv*
  %xiv_iv52 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %52, i32 0, i32 3
  %53 = load i64, i64* %xiv_iv52, align 8
  br label %cond.end.55

cond.false.53:                                    ; preds = %if.then.46
  %54 = load %struct.sv*, %struct.sv** %sv, align 8
  %call54 = call i64 @Perl_sv_2iv(%struct.sv* %54)
  br label %cond.end.55

cond.end.55:                                      ; preds = %cond.false.53, %cond.true.50
  %cond56 = phi i64 [ %53, %cond.true.50 ], [ %call54, %cond.false.53 ]
  %55 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any57 = getelementptr inbounds %struct.gv, %struct.gv* %55, i32 0, i32 0
  %56 = load %struct.xpvgv*, %struct.xpvgv** %sv_any57, align 8
  %xgv_gp58 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %56, i32 0, i32 7
  %57 = load %struct.gp*, %struct.gp** %xgv_gp58, align 8
  %gp_sv59 = getelementptr inbounds %struct.gp, %struct.gp* %57, i32 0, i32 0
  %58 = load %struct.sv*, %struct.sv** %gp_sv59, align 8
  %sv_flags60 = getelementptr inbounds %struct.sv, %struct.sv* %58, i32 0, i32 2
  %59 = load i32, i32* %sv_flags60, align 4
  %and61 = and i32 %59, 65536
  %tobool62 = icmp ne i32 %and61, 0
  br i1 %tobool62, label %cond.true.63, label %cond.false.69

cond.true.63:                                     ; preds = %cond.end.55
  %60 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any64 = getelementptr inbounds %struct.gv, %struct.gv* %60, i32 0, i32 0
  %61 = load %struct.xpvgv*, %struct.xpvgv** %sv_any64, align 8
  %xgv_gp65 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %61, i32 0, i32 7
  %62 = load %struct.gp*, %struct.gp** %xgv_gp65, align 8
  %gp_sv66 = getelementptr inbounds %struct.gp, %struct.gp* %62, i32 0, i32 0
  %63 = load %struct.sv*, %struct.sv** %gp_sv66, align 8
  %sv_any67 = getelementptr inbounds %struct.sv, %struct.sv* %63, i32 0, i32 0
  %64 = load i8*, i8** %sv_any67, align 8
  %65 = bitcast i8* %64 to %struct.xpviv*
  %xiv_iv68 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %65, i32 0, i32 3
  %66 = load i64, i64* %xiv_iv68, align 8
  br label %cond.end.74

cond.false.69:                                    ; preds = %cond.end.55
  %67 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any70 = getelementptr inbounds %struct.gv, %struct.gv* %67, i32 0, i32 0
  %68 = load %struct.xpvgv*, %struct.xpvgv** %sv_any70, align 8
  %xgv_gp71 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %68, i32 0, i32 7
  %69 = load %struct.gp*, %struct.gp** %xgv_gp71, align 8
  %gp_sv72 = getelementptr inbounds %struct.gp, %struct.gp* %69, i32 0, i32 0
  %70 = load %struct.sv*, %struct.sv** %gp_sv72, align 8
  %call73 = call i64 @Perl_sv_2iv(%struct.sv* %70)
  br label %cond.end.74

cond.end.74:                                      ; preds = %cond.false.69, %cond.true.63
  %cond75 = phi i64 [ %66, %cond.true.63 ], [ %call73, %cond.false.69 ]
  %cmp76 = icmp eq i64 %cond56, %cond75
  %conv77 = zext i1 %cmp76 to i32
  store i32 %conv77, i32* %flip, align 4
  br label %if.end

if.end:                                           ; preds = %cond.end.74, %land.lhs.true.42, %if.else.39
  br label %if.end.78

if.end.78:                                        ; preds = %if.end, %cond.end.31
  br label %if.end.127

if.else.79:                                       ; preds = %if.else
  %71 = load %struct.sv*, %struct.sv** %sv, align 8
  %tobool80 = icmp ne %struct.sv* %71, null
  br i1 %tobool80, label %cond.false.82, label %cond.true.81

cond.true.81:                                     ; preds = %if.else.79
  br label %cond.end.125

cond.false.82:                                    ; preds = %if.else.79
  %72 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags83 = getelementptr inbounds %struct.sv, %struct.sv* %72, i32 0, i32 2
  %73 = load i32, i32* %sv_flags83, align 4
  %and84 = and i32 %73, 262144
  %tobool85 = icmp ne i32 %and84, 0
  br i1 %tobool85, label %cond.true.86, label %cond.false.99

cond.true.86:                                     ; preds = %cond.false.82
  %74 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any87 = getelementptr inbounds %struct.sv, %struct.sv* %74, i32 0, i32 0
  %75 = load i8*, i8** %sv_any87, align 8
  %76 = bitcast i8* %75 to %struct.xpv*
  store %struct.xpv* %76, %struct.xpv** @PL_Xpv, align 8
  %tobool88 = icmp ne %struct.xpv* %76, null
  br i1 %tobool88, label %land.rhs, label %land.end.97

land.rhs:                                         ; preds = %cond.true.86
  %77 = load %struct.xpv*, %struct.xpv** @PL_Xpv, align 8
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %77, i32 0, i32 1
  %78 = load i64, i64* %xpv_cur, align 8
  %cmp89 = icmp ugt i64 %78, 1
  br i1 %cmp89, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs
  %79 = load %struct.xpv*, %struct.xpv** @PL_Xpv, align 8
  %xpv_cur91 = getelementptr inbounds %struct.xpv, %struct.xpv* %79, i32 0, i32 1
  %80 = load i64, i64* %xpv_cur91, align 8
  %tobool92 = icmp ne i64 %80, 0
  br i1 %tobool92, label %land.rhs.93, label %land.end

land.rhs.93:                                      ; preds = %lor.rhs
  %81 = load %struct.xpv*, %struct.xpv** @PL_Xpv, align 8
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %81, i32 0, i32 0
  %82 = load i8*, i8** %xpv_pv, align 8
  %83 = load i8, i8* %82, align 1
  %conv94 = sext i8 %83 to i32
  %cmp95 = icmp ne i32 %conv94, 48
  br label %land.end

land.end:                                         ; preds = %land.rhs.93, %lor.rhs
  %84 = phi i1 [ false, %lor.rhs ], [ %cmp95, %land.rhs.93 ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %land.rhs
  %85 = phi i1 [ true, %land.rhs ], [ %84, %land.end ]
  br label %land.end.97

land.end.97:                                      ; preds = %lor.end, %cond.true.86
  %86 = phi i1 [ false, %cond.true.86 ], [ %85, %lor.end ]
  %cond98 = select i1 %86, i32 1, i32 0
  br label %cond.end.123

cond.false.99:                                    ; preds = %cond.false.82
  %87 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags100 = getelementptr inbounds %struct.sv, %struct.sv* %87, i32 0, i32 2
  %88 = load i32, i32* %sv_flags100, align 4
  %and101 = and i32 %88, 65536
  %tobool102 = icmp ne i32 %and101, 0
  br i1 %tobool102, label %cond.true.103, label %cond.false.108

cond.true.103:                                    ; preds = %cond.false.99
  %89 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any104 = getelementptr inbounds %struct.sv, %struct.sv* %89, i32 0, i32 0
  %90 = load i8*, i8** %sv_any104, align 8
  %91 = bitcast i8* %90 to %struct.xpviv*
  %xiv_iv105 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %91, i32 0, i32 3
  %92 = load i64, i64* %xiv_iv105, align 8
  %cmp106 = icmp ne i64 %92, 0
  %conv107 = zext i1 %cmp106 to i32
  br label %cond.end.121

cond.false.108:                                   ; preds = %cond.false.99
  %93 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags109 = getelementptr inbounds %struct.sv, %struct.sv* %93, i32 0, i32 2
  %94 = load i32, i32* %sv_flags109, align 4
  %and110 = and i32 %94, 131072
  %tobool111 = icmp ne i32 %and110, 0
  br i1 %tobool111, label %cond.true.112, label %cond.false.116

cond.true.112:                                    ; preds = %cond.false.108
  %95 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any113 = getelementptr inbounds %struct.sv, %struct.sv* %95, i32 0, i32 0
  %96 = load i8*, i8** %sv_any113, align 8
  %97 = bitcast i8* %96 to %struct.xpvnv*
  %xnv_nv = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %97, i32 0, i32 4
  %98 = load double, double* %xnv_nv, align 8
  %cmp114 = fcmp une double %98, 0.000000e+00
  %conv115 = zext i1 %cmp114 to i32
  br label %cond.end.119

cond.false.116:                                   ; preds = %cond.false.108
  %99 = load %struct.sv*, %struct.sv** %sv, align 8
  %call117 = call signext i8 @Perl_sv_2bool(%struct.sv* %99)
  %conv118 = sext i8 %call117 to i32
  br label %cond.end.119

cond.end.119:                                     ; preds = %cond.false.116, %cond.true.112
  %cond120 = phi i32 [ %conv115, %cond.true.112 ], [ %conv118, %cond.false.116 ]
  br label %cond.end.121

cond.end.121:                                     ; preds = %cond.end.119, %cond.true.103
  %cond122 = phi i32 [ %conv107, %cond.true.103 ], [ %cond120, %cond.end.119 ]
  br label %cond.end.123

cond.end.123:                                     ; preds = %cond.end.121, %land.end.97
  %cond124 = phi i32 [ %cond98, %land.end.97 ], [ %cond122, %cond.end.121 ]
  br label %cond.end.125

cond.end.125:                                     ; preds = %cond.end.123, %cond.true.81
  %cond126 = phi i32 [ 0, %cond.true.81 ], [ %cond124, %cond.end.123 ]
  store i32 %cond126, i32* %flip, align 4
  br label %if.end.127

if.end.127:                                       ; preds = %cond.end.125, %if.end.78
  %100 = load i32, i32* %flip, align 4
  %tobool128 = icmp ne i32 %100, 0
  br i1 %tobool128, label %if.then.129, label %if.end.141

if.then.129:                                      ; preds = %if.end.127
  %101 = load %struct.op*, %struct.op** @PL_op, align 8
  %102 = bitcast %struct.op* %101 to %struct.unop*
  %op_first130 = getelementptr inbounds %struct.unop, %struct.unop* %102, i32 0, i32 8
  %103 = load %struct.op*, %struct.op** %op_first130, align 8
  %op_targ131 = getelementptr inbounds %struct.op, %struct.op* %103, i32 0, i32 3
  %104 = load i64, i64* %op_targ131, align 8
  %105 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %arrayidx132 = getelementptr inbounds %struct.sv*, %struct.sv** %105, i64 %104
  %106 = load %struct.sv*, %struct.sv** %arrayidx132, align 8
  call void @Perl_sv_setiv(%struct.sv* %106, i64 1)
  %107 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags133 = getelementptr inbounds %struct.op, %struct.op* %107, i32 0, i32 6
  %108 = load i8, i8* %op_flags133, align 1
  %conv134 = zext i8 %108 to i32
  %and135 = and i32 %conv134, 128
  %tobool136 = icmp ne i32 %and135, 0
  br i1 %tobool136, label %if.then.137, label %if.else.138

if.then.137:                                      ; preds = %if.then.129
  %109 = load %struct.sv*, %struct.sv** %targ, align 8
  call void @Perl_sv_setiv(%struct.sv* %109, i64 1)
  %110 = load %struct.sv*, %struct.sv** %targ, align 8
  %111 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %110, %struct.sv** %111, align 8
  %112 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %112, %struct.sv*** @PL_stack_sp, align 8
  %113 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %113, i32 0, i32 0
  %114 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %114, %struct.op** %retval
  br label %return

if.else.138:                                      ; preds = %if.then.129
  %115 = load %struct.sv*, %struct.sv** %targ, align 8
  call void @Perl_sv_setiv(%struct.sv* %115, i64 0)
  %116 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %116, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %117 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %117, %struct.sv*** @PL_stack_sp, align 8
  %118 = load %struct.op*, %struct.op** @PL_op, align 8
  %119 = bitcast %struct.op* %118 to %struct.unop*
  %op_first139 = getelementptr inbounds %struct.unop, %struct.unop* %119, i32 0, i32 8
  %120 = load %struct.op*, %struct.op** %op_first139, align 8
  %121 = bitcast %struct.op* %120 to %struct.logop*
  %op_other140 = getelementptr inbounds %struct.logop, %struct.logop* %121, i32 0, i32 9
  %122 = load %struct.op*, %struct.op** %op_other140, align 8
  store %struct.op* %122, %struct.op** %retval
  br label %return

if.end.141:                                       ; preds = %if.end.127
  %123 = load %struct.sv*, %struct.sv** %targ, align 8
  call void @Perl_sv_setpv(%struct.sv* %123, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.11, i32 0, i32 0))
  %124 = load %struct.sv*, %struct.sv** %targ, align 8
  %125 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %124, %struct.sv** %125, align 8
  %126 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %126, %struct.sv*** @PL_stack_sp, align 8
  %127 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next142 = getelementptr inbounds %struct.op, %struct.op* %127, i32 0, i32 0
  %128 = load %struct.op*, %struct.op** %op_next142, align 8
  store %struct.op* %128, %struct.op** %retval
  br label %return

return:                                           ; preds = %if.end.141, %if.else.138, %if.then.137, %if.then
  %129 = load %struct.op*, %struct.op** %retval
  ret %struct.op* %129
}

declare i64 @Perl_sv_2iv(%struct.sv*) #1

declare %struct.gv* @Perl_gv_fetchpv(i8*, i32, i32) #1

declare void @Perl_sv_setpv(%struct.sv*, i8*) #1

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_flop() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %right = alloca %struct.sv*, align 8
  %left = alloca %struct.sv*, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %sv = alloca %struct.sv*, align 8
  %max = alloca i64, align 8
  %final = alloca %struct.sv*, align 8
  %len = alloca i64, align 8
  %n_a = alloca i64, align 8
  %tmps = alloca i8*, align 8
  %tmp = alloca %struct.sv*, align 8
  %sv208 = alloca %struct.sv*, align 8
  %targ = alloca %struct.sv*, align 8
  %flop = alloca i32, align 4
  %gv = alloca %struct.gv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 6
  %2 = load i8, i8* %op_flags, align 1
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 3
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags1 = getelementptr inbounds %struct.op, %struct.op* %3, i32 0, i32 6
  %4 = load i8, i8* %op_flags1, align 1
  %conv2 = zext i8 %4 to i32
  %and3 = and i32 %conv2, 3
  %cmp = icmp eq i32 %and3, 3
  %cond = select i1 %cmp, i32 1, i32 0
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call = call i32 @Perl_dowantarray()
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond5 = phi i32 [ %cond, %cond.true ], [ %call, %cond.false ]
  %cmp6 = icmp eq i32 %cond5, 1
  br i1 %cmp6, label %if.then, label %if.else.206

if.then:                                          ; preds = %cond.end
  %5 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %5, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %6 = load %struct.sv*, %struct.sv** %5, align 8
  store %struct.sv* %6, %struct.sv** %right, align 8
  %7 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr8 = getelementptr inbounds %struct.sv*, %struct.sv** %7, i32 -1
  store %struct.sv** %incdec.ptr8, %struct.sv*** %sp, align 8
  %8 = load %struct.sv*, %struct.sv** %7, align 8
  store %struct.sv* %8, %struct.sv** %left, align 8
  %9 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 2
  %10 = load i32, i32* %sv_flags, align 4
  %and9 = and i32 %10, 8192
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %if.then.11, label %if.end

if.then.11:                                       ; preds = %if.then
  %11 = load %struct.sv*, %struct.sv** %left, align 8
  %call12 = call i32 @Perl_mg_get(%struct.sv* %11)
  br label %if.end

if.end:                                           ; preds = %if.then.11, %if.then
  %12 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_flags13 = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 2
  %13 = load i32, i32* %sv_flags13, align 4
  %and14 = and i32 %13, 8192
  %tobool15 = icmp ne i32 %and14, 0
  br i1 %tobool15, label %if.then.16, label %if.end.18

if.then.16:                                       ; preds = %if.end
  %14 = load %struct.sv*, %struct.sv** %right, align 8
  %call17 = call i32 @Perl_mg_get(%struct.sv* %14)
  br label %if.end.18

if.end.18:                                        ; preds = %if.then.16, %if.end
  %15 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags19 = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 2
  %16 = load i32, i32* %sv_flags19, align 4
  %and20 = and i32 %16, 50331648
  %tobool21 = icmp ne i32 %and20, 0
  br i1 %tobool21, label %if.then.70, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.18
  %17 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags22 = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 2
  %18 = load i32, i32* %sv_flags22, align 4
  %and23 = and i32 %18, 118423552
  %tobool24 = icmp ne i32 %and23, 0
  br i1 %tobool24, label %land.lhs.true, label %lor.lhs.false.28

land.lhs.true:                                    ; preds = %lor.lhs.false
  %19 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags25 = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 2
  %20 = load i32, i32* %sv_flags25, align 4
  %and26 = and i32 %20, 67108864
  %tobool27 = icmp ne i32 %and26, 0
  br i1 %tobool27, label %lor.lhs.false.28, label %if.then.70

lor.lhs.false.28:                                 ; preds = %land.lhs.true, %lor.lhs.false
  %21 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_flags29 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 2
  %22 = load i32, i32* %sv_flags29, align 4
  %and30 = and i32 %22, 50331648
  %tobool31 = icmp ne i32 %and30, 0
  br i1 %tobool31, label %if.then.70, label %lor.lhs.false.32

lor.lhs.false.32:                                 ; preds = %lor.lhs.false.28
  %23 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_flags33 = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 2
  %24 = load i32, i32* %sv_flags33, align 4
  %and34 = and i32 %24, 118423552
  %tobool35 = icmp ne i32 %and34, 0
  br i1 %tobool35, label %land.lhs.true.36, label %lor.lhs.false.40

land.lhs.true.36:                                 ; preds = %lor.lhs.false.32
  %25 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_flags37 = getelementptr inbounds %struct.sv, %struct.sv* %25, i32 0, i32 2
  %26 = load i32, i32* %sv_flags37, align 4
  %and38 = and i32 %26, 67108864
  %tobool39 = icmp ne i32 %and38, 0
  br i1 %tobool39, label %lor.lhs.false.40, label %if.then.70

lor.lhs.false.40:                                 ; preds = %land.lhs.true.36, %lor.lhs.false.32
  %27 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags41 = getelementptr inbounds %struct.sv, %struct.sv* %27, i32 0, i32 2
  %28 = load i32, i32* %sv_flags41, align 4
  %and42 = and i32 %28, 118423552
  %tobool43 = icmp ne i32 %and42, 0
  br i1 %tobool43, label %lor.lhs.false.48, label %land.lhs.true.44

land.lhs.true.44:                                 ; preds = %lor.lhs.false.40
  %29 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_flags45 = getelementptr inbounds %struct.sv, %struct.sv* %29, i32 0, i32 2
  %30 = load i32, i32* %sv_flags45, align 4
  %and46 = and i32 %30, 118423552
  %tobool47 = icmp ne i32 %and46, 0
  br i1 %tobool47, label %land.lhs.true.63, label %lor.lhs.false.48

lor.lhs.false.48:                                 ; preds = %land.lhs.true.44, %lor.lhs.false.40
  %31 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags49 = getelementptr inbounds %struct.sv, %struct.sv* %31, i32 0, i32 2
  %32 = load i32, i32* %sv_flags49, align 4
  %and50 = and i32 %32, 118423552
  %tobool51 = icmp ne i32 %and50, 0
  br i1 %tobool51, label %lor.lhs.false.52, label %land.lhs.true.55

lor.lhs.false.52:                                 ; preds = %lor.lhs.false.48
  %33 = load %struct.sv*, %struct.sv** %left, align 8
  %call53 = call i32 @Perl_looks_like_number(%struct.sv* %33)
  %tobool54 = icmp ne i32 %call53, 0
  br i1 %tobool54, label %land.lhs.true.55, label %if.else.149

land.lhs.true.55:                                 ; preds = %lor.lhs.false.52, %lor.lhs.false.48
  %34 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags56 = getelementptr inbounds %struct.sv, %struct.sv* %34, i32 0, i32 2
  %35 = load i32, i32* %sv_flags56, align 4
  %and57 = and i32 %35, 67108864
  %tobool58 = icmp ne i32 %and57, 0
  br i1 %tobool58, label %land.lhs.true.59, label %if.else.149

land.lhs.true.59:                                 ; preds = %land.lhs.true.55
  %36 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %36, i32 0, i32 0
  %37 = load i8*, i8** %sv_any, align 8
  %38 = bitcast i8* %37 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %38, i32 0, i32 0
  %39 = load i8*, i8** %xpv_pv, align 8
  %40 = load i8, i8* %39, align 1
  %conv60 = sext i8 %40 to i32
  %cmp61 = icmp ne i32 %conv60, 48
  br i1 %cmp61, label %land.lhs.true.63, label %if.else.149

land.lhs.true.63:                                 ; preds = %land.lhs.true.59, %land.lhs.true.44
  %41 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_flags64 = getelementptr inbounds %struct.sv, %struct.sv* %41, i32 0, i32 2
  %42 = load i32, i32* %sv_flags64, align 4
  %and65 = and i32 %42, 118423552
  %tobool66 = icmp ne i32 %and65, 0
  br i1 %tobool66, label %lor.lhs.false.67, label %if.then.70

lor.lhs.false.67:                                 ; preds = %land.lhs.true.63
  %43 = load %struct.sv*, %struct.sv** %right, align 8
  %call68 = call i32 @Perl_looks_like_number(%struct.sv* %43)
  %tobool69 = icmp ne i32 %call68, 0
  br i1 %tobool69, label %if.then.70, label %if.else.149

if.then.70:                                       ; preds = %lor.lhs.false.67, %land.lhs.true.63, %land.lhs.true.36, %lor.lhs.false.28, %land.lhs.true, %if.end.18
  %44 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags71 = getelementptr inbounds %struct.sv, %struct.sv* %44, i32 0, i32 2
  %45 = load i32, i32* %sv_flags71, align 4
  %and72 = and i32 %45, 118423552
  %tobool73 = icmp ne i32 %and72, 0
  br i1 %tobool73, label %land.lhs.true.74, label %lor.lhs.false.86

land.lhs.true.74:                                 ; preds = %if.then.70
  %46 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags75 = getelementptr inbounds %struct.sv, %struct.sv* %46, i32 0, i32 2
  %47 = load i32, i32* %sv_flags75, align 4
  %and76 = and i32 %47, 131072
  %tobool77 = icmp ne i32 %and76, 0
  br i1 %tobool77, label %cond.true.78, label %cond.false.80

cond.true.78:                                     ; preds = %land.lhs.true.74
  %48 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_any79 = getelementptr inbounds %struct.sv, %struct.sv* %48, i32 0, i32 0
  %49 = load i8*, i8** %sv_any79, align 8
  %50 = bitcast i8* %49 to %struct.xpvnv*
  %xnv_nv = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %50, i32 0, i32 4
  %51 = load double, double* %xnv_nv, align 8
  br label %cond.end.82

cond.false.80:                                    ; preds = %land.lhs.true.74
  %52 = load %struct.sv*, %struct.sv** %left, align 8
  %call81 = call double @Perl_sv_2nv(%struct.sv* %52)
  br label %cond.end.82

cond.end.82:                                      ; preds = %cond.false.80, %cond.true.78
  %cond83 = phi double [ %51, %cond.true.78 ], [ %call81, %cond.false.80 ]
  %cmp84 = fcmp olt double %cond83, 0xC3E0000000000000
  br i1 %cmp84, label %if.then.103, label %lor.lhs.false.86

lor.lhs.false.86:                                 ; preds = %cond.end.82, %if.then.70
  %53 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_flags87 = getelementptr inbounds %struct.sv, %struct.sv* %53, i32 0, i32 2
  %54 = load i32, i32* %sv_flags87, align 4
  %and88 = and i32 %54, 118423552
  %tobool89 = icmp ne i32 %and88, 0
  br i1 %tobool89, label %land.lhs.true.90, label %if.end.105

land.lhs.true.90:                                 ; preds = %lor.lhs.false.86
  %55 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_flags91 = getelementptr inbounds %struct.sv, %struct.sv* %55, i32 0, i32 2
  %56 = load i32, i32* %sv_flags91, align 4
  %and92 = and i32 %56, 131072
  %tobool93 = icmp ne i32 %and92, 0
  br i1 %tobool93, label %cond.true.94, label %cond.false.97

cond.true.94:                                     ; preds = %land.lhs.true.90
  %57 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_any95 = getelementptr inbounds %struct.sv, %struct.sv* %57, i32 0, i32 0
  %58 = load i8*, i8** %sv_any95, align 8
  %59 = bitcast i8* %58 to %struct.xpvnv*
  %xnv_nv96 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %59, i32 0, i32 4
  %60 = load double, double* %xnv_nv96, align 8
  br label %cond.end.99

cond.false.97:                                    ; preds = %land.lhs.true.90
  %61 = load %struct.sv*, %struct.sv** %right, align 8
  %call98 = call double @Perl_sv_2nv(%struct.sv* %61)
  br label %cond.end.99

cond.end.99:                                      ; preds = %cond.false.97, %cond.true.94
  %cond100 = phi double [ %60, %cond.true.94 ], [ %call98, %cond.false.97 ]
  %cmp101 = fcmp ogt double %cond100, 0x43E0000000000000
  br i1 %cmp101, label %if.then.103, label %if.end.105

if.then.103:                                      ; preds = %cond.end.99, %cond.end.82
  %call104 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.12, i32 0, i32 0))
  store %struct.op* %call104, %struct.op** %retval
  br label %return

if.end.105:                                       ; preds = %cond.end.99, %lor.lhs.false.86
  %62 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags106 = getelementptr inbounds %struct.sv, %struct.sv* %62, i32 0, i32 2
  %63 = load i32, i32* %sv_flags106, align 4
  %and107 = and i32 %63, 65536
  %tobool108 = icmp ne i32 %and107, 0
  br i1 %tobool108, label %cond.true.109, label %cond.false.111

cond.true.109:                                    ; preds = %if.end.105
  %64 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_any110 = getelementptr inbounds %struct.sv, %struct.sv* %64, i32 0, i32 0
  %65 = load i8*, i8** %sv_any110, align 8
  %66 = bitcast i8* %65 to %struct.xpviv*
  %xiv_iv = getelementptr inbounds %struct.xpviv, %struct.xpviv* %66, i32 0, i32 3
  %67 = load i64, i64* %xiv_iv, align 8
  br label %cond.end.113

cond.false.111:                                   ; preds = %if.end.105
  %68 = load %struct.sv*, %struct.sv** %left, align 8
  %call112 = call i64 @Perl_sv_2iv(%struct.sv* %68)
  br label %cond.end.113

cond.end.113:                                     ; preds = %cond.false.111, %cond.true.109
  %cond114 = phi i64 [ %67, %cond.true.109 ], [ %call112, %cond.false.111 ]
  store i64 %cond114, i64* %i, align 8
  %69 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_flags115 = getelementptr inbounds %struct.sv, %struct.sv* %69, i32 0, i32 2
  %70 = load i32, i32* %sv_flags115, align 4
  %and116 = and i32 %70, 65536
  %tobool117 = icmp ne i32 %and116, 0
  br i1 %tobool117, label %cond.true.118, label %cond.false.121

cond.true.118:                                    ; preds = %cond.end.113
  %71 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_any119 = getelementptr inbounds %struct.sv, %struct.sv* %71, i32 0, i32 0
  %72 = load i8*, i8** %sv_any119, align 8
  %73 = bitcast i8* %72 to %struct.xpviv*
  %xiv_iv120 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %73, i32 0, i32 3
  %74 = load i64, i64* %xiv_iv120, align 8
  br label %cond.end.123

cond.false.121:                                   ; preds = %cond.end.113
  %75 = load %struct.sv*, %struct.sv** %right, align 8
  %call122 = call i64 @Perl_sv_2iv(%struct.sv* %75)
  br label %cond.end.123

cond.end.123:                                     ; preds = %cond.false.121, %cond.true.118
  %cond124 = phi i64 [ %74, %cond.true.118 ], [ %call122, %cond.false.121 ]
  store i64 %cond124, i64* %max, align 8
  %76 = load i64, i64* %max, align 8
  %77 = load i64, i64* %i, align 8
  %cmp125 = icmp sge i64 %76, %77
  br i1 %cmp125, label %if.then.127, label %if.else

if.then.127:                                      ; preds = %cond.end.123
  %78 = load i64, i64* %max, align 8
  %79 = load i64, i64* %i, align 8
  %sub = sub nsw i64 %78, %79
  %add = add nsw i64 %sub, 1
  store i64 %add, i64* %j, align 8
  %80 = load i32, i32* @PL_tmps_ix, align 4
  %conv128 = sext i32 %80 to i64
  %81 = load i64, i64* %j, align 8
  %add129 = add nsw i64 %conv128, %81
  %82 = load i32, i32* @PL_tmps_max, align 4
  %conv130 = sext i32 %82 to i64
  %cmp131 = icmp sge i64 %add129, %conv130
  br i1 %cmp131, label %if.then.133, label %if.end.135

if.then.133:                                      ; preds = %if.then.127
  %83 = load i64, i64* %j, align 8
  %conv134 = trunc i64 %83 to i32
  call void @Perl_tmps_grow(i32 %conv134)
  br label %if.end.135

if.end.135:                                       ; preds = %if.then.133, %if.then.127
  %84 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %85 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %84 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %85 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %86 = load i64, i64* %j, align 8
  %conv136 = trunc i64 %86 to i32
  %conv137 = sext i32 %conv136 to i64
  %cmp138 = icmp slt i64 %sub.ptr.div, %conv137
  br i1 %cmp138, label %if.then.140, label %if.end.143

if.then.140:                                      ; preds = %if.end.135
  %87 = load %struct.sv**, %struct.sv*** %sp, align 8
  %88 = load %struct.sv**, %struct.sv*** %sp, align 8
  %89 = load i64, i64* %j, align 8
  %conv141 = trunc i64 %89 to i32
  %call142 = call %struct.sv** @Perl_stack_grow(%struct.sv** %87, %struct.sv** %88, i32 %conv141)
  store %struct.sv** %call142, %struct.sv*** %sp, align 8
  br label %if.end.143

if.end.143:                                       ; preds = %if.then.140, %if.end.135
  br label %if.end.144

if.else:                                          ; preds = %cond.end.123
  store i64 0, i64* %j, align 8
  br label %if.end.144

if.end.144:                                       ; preds = %if.else, %if.end.143
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end.144
  %90 = load i64, i64* %j, align 8
  %dec = add nsw i64 %90, -1
  store i64 %dec, i64* %j, align 8
  %tobool145 = icmp ne i64 %90, 0
  br i1 %tobool145, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %91 = load i64, i64* %i, align 8
  %inc = add nsw i64 %91, 1
  store i64 %inc, i64* %i, align 8
  %call146 = call %struct.sv* @Perl_newSViv(i64 %91)
  %call147 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call146)
  store %struct.sv* %call147, %struct.sv** %sv, align 8
  %92 = load %struct.sv*, %struct.sv** %sv, align 8
  %93 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr148 = getelementptr inbounds %struct.sv*, %struct.sv** %93, i32 1
  store %struct.sv** %incdec.ptr148, %struct.sv*** %sp, align 8
  store %struct.sv* %92, %struct.sv** %incdec.ptr148, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end.205

if.else.149:                                      ; preds = %lor.lhs.false.67, %land.lhs.true.59, %land.lhs.true.55, %lor.lhs.false.52
  %94 = load %struct.sv*, %struct.sv** %right, align 8
  %call150 = call %struct.sv* @Perl_sv_mortalcopy(%struct.sv* %94)
  store %struct.sv* %call150, %struct.sv** %final, align 8
  %95 = load %struct.sv*, %struct.sv** %final, align 8
  %sv_flags151 = getelementptr inbounds %struct.sv, %struct.sv* %95, i32 0, i32 2
  %96 = load i32, i32* %sv_flags151, align 4
  %and152 = and i32 %96, 262144
  %cmp153 = icmp eq i32 %and152, 262144
  br i1 %cmp153, label %cond.true.155, label %cond.false.159

cond.true.155:                                    ; preds = %if.else.149
  %97 = load %struct.sv*, %struct.sv** %final, align 8
  %sv_any156 = getelementptr inbounds %struct.sv, %struct.sv* %97, i32 0, i32 0
  %98 = load i8*, i8** %sv_any156, align 8
  %99 = bitcast i8* %98 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %99, i32 0, i32 1
  %100 = load i64, i64* %xpv_cur, align 8
  store i64 %100, i64* %len, align 8
  %101 = load %struct.sv*, %struct.sv** %final, align 8
  %sv_any157 = getelementptr inbounds %struct.sv, %struct.sv* %101, i32 0, i32 0
  %102 = load i8*, i8** %sv_any157, align 8
  %103 = bitcast i8* %102 to %struct.xpv*
  %xpv_pv158 = getelementptr inbounds %struct.xpv, %struct.xpv* %103, i32 0, i32 0
  %104 = load i8*, i8** %xpv_pv158, align 8
  br label %cond.end.161

cond.false.159:                                   ; preds = %if.else.149
  %105 = load %struct.sv*, %struct.sv** %final, align 8
  %call160 = call i8* @Perl_sv_2pv_flags(%struct.sv* %105, i64* %len, i32 2)
  br label %cond.end.161

cond.end.161:                                     ; preds = %cond.false.159, %cond.true.155
  %cond162 = phi i8* [ %104, %cond.true.155 ], [ %call160, %cond.false.159 ]
  store i8* %cond162, i8** %tmps, align 8
  %106 = load %struct.sv*, %struct.sv** %left, align 8
  %call163 = call %struct.sv* @Perl_sv_mortalcopy(%struct.sv* %106)
  store %struct.sv* %call163, %struct.sv** %sv, align 8
  %107 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags164 = getelementptr inbounds %struct.sv, %struct.sv* %107, i32 0, i32 2
  %108 = load i32, i32* %sv_flags164, align 4
  %and165 = and i32 %108, 10223616
  %cmp166 = icmp eq i32 %and165, 262144
  br i1 %cmp166, label %cond.true.168, label %cond.false.173

cond.true.168:                                    ; preds = %cond.end.161
  %109 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any169 = getelementptr inbounds %struct.sv, %struct.sv* %109, i32 0, i32 0
  %110 = load i8*, i8** %sv_any169, align 8
  %111 = bitcast i8* %110 to %struct.xpv*
  %xpv_cur170 = getelementptr inbounds %struct.xpv, %struct.xpv* %111, i32 0, i32 1
  %112 = load i64, i64* %xpv_cur170, align 8
  store i64 %112, i64* %n_a, align 8
  %113 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any171 = getelementptr inbounds %struct.sv, %struct.sv* %113, i32 0, i32 0
  %114 = load i8*, i8** %sv_any171, align 8
  %115 = bitcast i8* %114 to %struct.xpv*
  %xpv_pv172 = getelementptr inbounds %struct.xpv, %struct.xpv* %115, i32 0, i32 0
  %116 = load i8*, i8** %xpv_pv172, align 8
  br label %cond.end.175

cond.false.173:                                   ; preds = %cond.end.161
  %117 = load %struct.sv*, %struct.sv** %sv, align 8
  %call174 = call i8* @Perl_sv_pvn_force_flags(%struct.sv* %117, i64* %n_a, i32 2)
  br label %cond.end.175

cond.end.175:                                     ; preds = %cond.false.173, %cond.true.168
  %cond176 = phi i8* [ %116, %cond.true.168 ], [ %call174, %cond.false.173 ]
  br label %while.cond.177

while.cond.177:                                   ; preds = %if.end.201, %cond.end.175
  %118 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags178 = getelementptr inbounds %struct.sv, %struct.sv* %118, i32 0, i32 2
  %119 = load i32, i32* %sv_flags178, align 4
  %and179 = and i32 %119, 50331648
  %tobool180 = icmp ne i32 %and179, 0
  br i1 %tobool180, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %while.cond.177
  %120 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any181 = getelementptr inbounds %struct.sv, %struct.sv* %120, i32 0, i32 0
  %121 = load i8*, i8** %sv_any181, align 8
  %122 = bitcast i8* %121 to %struct.xpv*
  %xpv_cur182 = getelementptr inbounds %struct.xpv, %struct.xpv* %122, i32 0, i32 1
  %123 = load i64, i64* %xpv_cur182, align 8
  %124 = load i64, i64* %len, align 8
  %cmp183 = icmp ule i64 %123, %124
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond.177
  %125 = phi i1 [ false, %while.cond.177 ], [ %cmp183, %land.rhs ]
  br i1 %125, label %while.body.185, label %while.end.204

while.body.185:                                   ; preds = %land.end
  %126 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %127 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast186 = ptrtoint %struct.sv** %126 to i64
  %sub.ptr.rhs.cast187 = ptrtoint %struct.sv** %127 to i64
  %sub.ptr.sub188 = sub i64 %sub.ptr.lhs.cast186, %sub.ptr.rhs.cast187
  %sub.ptr.div189 = sdiv exact i64 %sub.ptr.sub188, 8
  %cmp190 = icmp slt i64 %sub.ptr.div189, 1
  br i1 %cmp190, label %if.then.192, label %if.end.194

if.then.192:                                      ; preds = %while.body.185
  %128 = load %struct.sv**, %struct.sv*** %sp, align 8
  %129 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call193 = call %struct.sv** @Perl_stack_grow(%struct.sv** %128, %struct.sv** %129, i32 1)
  store %struct.sv** %call193, %struct.sv*** %sp, align 8
  br label %if.end.194

if.end.194:                                       ; preds = %if.then.192, %while.body.185
  %130 = load %struct.sv*, %struct.sv** %sv, align 8
  %131 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr195 = getelementptr inbounds %struct.sv*, %struct.sv** %131, i32 1
  store %struct.sv** %incdec.ptr195, %struct.sv*** %sp, align 8
  store %struct.sv* %130, %struct.sv** %incdec.ptr195, align 8
  store %struct.sv* %130, %struct.sv** %tmp
  %132 = load %struct.sv*, %struct.sv** %tmp
  %133 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any196 = getelementptr inbounds %struct.sv, %struct.sv* %133, i32 0, i32 0
  %134 = load i8*, i8** %sv_any196, align 8
  %135 = bitcast i8* %134 to %struct.xpv*
  %xpv_pv197 = getelementptr inbounds %struct.xpv, %struct.xpv* %135, i32 0, i32 0
  %136 = load i8*, i8** %xpv_pv197, align 8
  %137 = load i8*, i8** %tmps, align 8
  %call198 = call i32 @strcmp(i8* %136, i8* %137)
  %tobool199 = icmp ne i32 %call198, 0
  br i1 %tobool199, label %if.end.201, label %if.then.200

if.then.200:                                      ; preds = %if.end.194
  br label %while.end.204

if.end.201:                                       ; preds = %if.end.194
  %138 = load %struct.sv*, %struct.sv** %sv, align 8
  %call202 = call %struct.sv* @Perl_newSVsv(%struct.sv* %138)
  %call203 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call202)
  store %struct.sv* %call203, %struct.sv** %sv, align 8
  %139 = load %struct.sv*, %struct.sv** %sv, align 8
  call void @Perl_sv_inc(%struct.sv* %139)
  br label %while.cond.177

while.end.204:                                    ; preds = %if.then.200, %land.end
  br label %if.end.205

if.end.205:                                       ; preds = %while.end.204, %while.end
  br label %if.end.349

if.else.206:                                      ; preds = %cond.end
  %140 = load %struct.sv**, %struct.sv*** %sp, align 8
  %141 = load %struct.sv*, %struct.sv** %140, align 8
  store %struct.sv* %141, %struct.sv** %sv208, align 8
  %142 = load %struct.op*, %struct.op** @PL_op, align 8
  %143 = bitcast %struct.op* %142 to %struct.unop*
  %op_first = getelementptr inbounds %struct.unop, %struct.unop* %143, i32 0, i32 8
  %144 = load %struct.op*, %struct.op** %op_first, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %144, i32 0, i32 3
  %145 = load i64, i64* %op_targ, align 8
  %146 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %146, i64 %145
  %147 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %147, %struct.sv** %targ, align 8
  store i32 0, i32* %flop, align 4
  %148 = load %struct.sv*, %struct.sv** %targ, align 8
  call void @Perl_sv_inc(%struct.sv* %148)
  %149 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %149, i32 0, i32 7
  %150 = load i8, i8* %op_private, align 1
  %conv211 = zext i8 %150 to i32
  %and212 = and i32 %conv211, 64
  %tobool213 = icmp ne i32 %and212, 0
  br i1 %tobool213, label %if.then.214, label %if.else.288

if.then.214:                                      ; preds = %if.else.206
  %151 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  %tobool215 = icmp ne %struct.gv* %151, null
  br i1 %tobool215, label %land.lhs.true.216, label %cond.false.228

land.lhs.true.216:                                ; preds = %if.then.214
  %152 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  %153 = bitcast %struct.gv* %152 to %struct.sv*
  %sv_flags217 = getelementptr inbounds %struct.sv, %struct.sv* %153, i32 0, i32 2
  %154 = load i32, i32* %sv_flags217, align 4
  %and218 = and i32 %154, 255
  %cmp219 = icmp eq i32 %and218, 13
  br i1 %cmp219, label %land.lhs.true.221, label %cond.false.228

land.lhs.true.221:                                ; preds = %land.lhs.true.216
  %155 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  %sv_any222 = getelementptr inbounds %struct.gv, %struct.gv* %155, i32 0, i32 0
  %156 = load %struct.xpvgv*, %struct.xpvgv** %sv_any222, align 8
  %xgv_gp = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %156, i32 0, i32 7
  %157 = load %struct.gp*, %struct.gp** %xgv_gp, align 8
  %tobool223 = icmp ne %struct.gp* %157, null
  br i1 %tobool223, label %cond.true.224, label %cond.false.228

cond.true.224:                                    ; preds = %land.lhs.true.221
  %158 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  %sv_any225 = getelementptr inbounds %struct.gv, %struct.gv* %158, i32 0, i32 0
  %159 = load %struct.xpvgv*, %struct.xpvgv** %sv_any225, align 8
  %xgv_gp226 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %159, i32 0, i32 7
  %160 = load %struct.gp*, %struct.gp** %xgv_gp226, align 8
  %gp_io = getelementptr inbounds %struct.gp, %struct.gp* %160, i32 0, i32 2
  %161 = load %struct.io*, %struct.io** %gp_io, align 8
  %tobool227 = icmp ne %struct.io* %161, null
  br i1 %tobool227, label %if.then.229, label %if.else.246

cond.false.228:                                   ; preds = %land.lhs.true.221, %land.lhs.true.216, %if.then.214
  br i1 false, label %if.then.229, label %if.else.246

if.then.229:                                      ; preds = %cond.false.228, %cond.true.224
  %162 = load %struct.sv*, %struct.sv** %sv208, align 8
  %sv_flags230 = getelementptr inbounds %struct.sv, %struct.sv* %162, i32 0, i32 2
  %163 = load i32, i32* %sv_flags230, align 4
  %and231 = and i32 %163, 65536
  %tobool232 = icmp ne i32 %and231, 0
  br i1 %tobool232, label %cond.true.233, label %cond.false.236

cond.true.233:                                    ; preds = %if.then.229
  %164 = load %struct.sv*, %struct.sv** %sv208, align 8
  %sv_any234 = getelementptr inbounds %struct.sv, %struct.sv* %164, i32 0, i32 0
  %165 = load i8*, i8** %sv_any234, align 8
  %166 = bitcast i8* %165 to %struct.xpviv*
  %xiv_iv235 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %166, i32 0, i32 3
  %167 = load i64, i64* %xiv_iv235, align 8
  br label %cond.end.238

cond.false.236:                                   ; preds = %if.then.229
  %168 = load %struct.sv*, %struct.sv** %sv208, align 8
  %call237 = call i64 @Perl_sv_2iv(%struct.sv* %168)
  br label %cond.end.238

cond.end.238:                                     ; preds = %cond.false.236, %cond.true.233
  %cond239 = phi i64 [ %167, %cond.true.233 ], [ %call237, %cond.false.236 ]
  %169 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  %sv_any240 = getelementptr inbounds %struct.gv, %struct.gv* %169, i32 0, i32 0
  %170 = load %struct.xpvgv*, %struct.xpvgv** %sv_any240, align 8
  %xgv_gp241 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %170, i32 0, i32 7
  %171 = load %struct.gp*, %struct.gp** %xgv_gp241, align 8
  %gp_io242 = getelementptr inbounds %struct.gp, %struct.gp* %171, i32 0, i32 2
  %172 = load %struct.io*, %struct.io** %gp_io242, align 8
  %sv_any243 = getelementptr inbounds %struct.io, %struct.io* %172, i32 0, i32 0
  %173 = load %struct.xpvio*, %struct.xpvio** %sv_any243, align 8
  %xio_lines = getelementptr inbounds %struct.xpvio, %struct.xpvio* %173, i32 0, i32 10
  %174 = load i64, i64* %xio_lines, align 8
  %cmp244 = icmp eq i64 %cond239, %174
  %conv245 = zext i1 %cmp244 to i32
  store i32 %conv245, i32* %flop, align 4
  br label %if.end.287

if.else.246:                                      ; preds = %cond.false.228, %cond.true.224
  %call248 = call %struct.gv* @Perl_gv_fetchpv(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i32 0, i32 0), i32 1, i32 4)
  store %struct.gv* %call248, %struct.gv** %gv, align 8
  %175 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool249 = icmp ne %struct.gv* %175, null
  br i1 %tobool249, label %land.lhs.true.250, label %if.end.286

land.lhs.true.250:                                ; preds = %if.else.246
  %176 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any251 = getelementptr inbounds %struct.gv, %struct.gv* %176, i32 0, i32 0
  %177 = load %struct.xpvgv*, %struct.xpvgv** %sv_any251, align 8
  %xgv_gp252 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %177, i32 0, i32 7
  %178 = load %struct.gp*, %struct.gp** %xgv_gp252, align 8
  %gp_sv = getelementptr inbounds %struct.gp, %struct.gp* %178, i32 0, i32 0
  %179 = load %struct.sv*, %struct.sv** %gp_sv, align 8
  %tobool253 = icmp ne %struct.sv* %179, null
  br i1 %tobool253, label %if.then.254, label %if.end.286

if.then.254:                                      ; preds = %land.lhs.true.250
  %180 = load %struct.sv*, %struct.sv** %sv208, align 8
  %sv_flags255 = getelementptr inbounds %struct.sv, %struct.sv* %180, i32 0, i32 2
  %181 = load i32, i32* %sv_flags255, align 4
  %and256 = and i32 %181, 65536
  %tobool257 = icmp ne i32 %and256, 0
  br i1 %tobool257, label %cond.true.258, label %cond.false.261

cond.true.258:                                    ; preds = %if.then.254
  %182 = load %struct.sv*, %struct.sv** %sv208, align 8
  %sv_any259 = getelementptr inbounds %struct.sv, %struct.sv* %182, i32 0, i32 0
  %183 = load i8*, i8** %sv_any259, align 8
  %184 = bitcast i8* %183 to %struct.xpviv*
  %xiv_iv260 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %184, i32 0, i32 3
  %185 = load i64, i64* %xiv_iv260, align 8
  br label %cond.end.263

cond.false.261:                                   ; preds = %if.then.254
  %186 = load %struct.sv*, %struct.sv** %sv208, align 8
  %call262 = call i64 @Perl_sv_2iv(%struct.sv* %186)
  br label %cond.end.263

cond.end.263:                                     ; preds = %cond.false.261, %cond.true.258
  %cond264 = phi i64 [ %185, %cond.true.258 ], [ %call262, %cond.false.261 ]
  %187 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any265 = getelementptr inbounds %struct.gv, %struct.gv* %187, i32 0, i32 0
  %188 = load %struct.xpvgv*, %struct.xpvgv** %sv_any265, align 8
  %xgv_gp266 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %188, i32 0, i32 7
  %189 = load %struct.gp*, %struct.gp** %xgv_gp266, align 8
  %gp_sv267 = getelementptr inbounds %struct.gp, %struct.gp* %189, i32 0, i32 0
  %190 = load %struct.sv*, %struct.sv** %gp_sv267, align 8
  %sv_flags268 = getelementptr inbounds %struct.sv, %struct.sv* %190, i32 0, i32 2
  %191 = load i32, i32* %sv_flags268, align 4
  %and269 = and i32 %191, 65536
  %tobool270 = icmp ne i32 %and269, 0
  br i1 %tobool270, label %cond.true.271, label %cond.false.277

cond.true.271:                                    ; preds = %cond.end.263
  %192 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any272 = getelementptr inbounds %struct.gv, %struct.gv* %192, i32 0, i32 0
  %193 = load %struct.xpvgv*, %struct.xpvgv** %sv_any272, align 8
  %xgv_gp273 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %193, i32 0, i32 7
  %194 = load %struct.gp*, %struct.gp** %xgv_gp273, align 8
  %gp_sv274 = getelementptr inbounds %struct.gp, %struct.gp* %194, i32 0, i32 0
  %195 = load %struct.sv*, %struct.sv** %gp_sv274, align 8
  %sv_any275 = getelementptr inbounds %struct.sv, %struct.sv* %195, i32 0, i32 0
  %196 = load i8*, i8** %sv_any275, align 8
  %197 = bitcast i8* %196 to %struct.xpviv*
  %xiv_iv276 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %197, i32 0, i32 3
  %198 = load i64, i64* %xiv_iv276, align 8
  br label %cond.end.282

cond.false.277:                                   ; preds = %cond.end.263
  %199 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any278 = getelementptr inbounds %struct.gv, %struct.gv* %199, i32 0, i32 0
  %200 = load %struct.xpvgv*, %struct.xpvgv** %sv_any278, align 8
  %xgv_gp279 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %200, i32 0, i32 7
  %201 = load %struct.gp*, %struct.gp** %xgv_gp279, align 8
  %gp_sv280 = getelementptr inbounds %struct.gp, %struct.gp* %201, i32 0, i32 0
  %202 = load %struct.sv*, %struct.sv** %gp_sv280, align 8
  %call281 = call i64 @Perl_sv_2iv(%struct.sv* %202)
  br label %cond.end.282

cond.end.282:                                     ; preds = %cond.false.277, %cond.true.271
  %cond283 = phi i64 [ %198, %cond.true.271 ], [ %call281, %cond.false.277 ]
  %cmp284 = icmp eq i64 %cond264, %cond283
  %conv285 = zext i1 %cmp284 to i32
  store i32 %conv285, i32* %flop, align 4
  br label %if.end.286

if.end.286:                                       ; preds = %cond.end.282, %land.lhs.true.250, %if.else.246
  br label %if.end.287

if.end.287:                                       ; preds = %if.end.286, %cond.end.238
  br label %if.end.341

if.else.288:                                      ; preds = %if.else.206
  %203 = load %struct.sv*, %struct.sv** %sv208, align 8
  %tobool289 = icmp ne %struct.sv* %203, null
  br i1 %tobool289, label %cond.false.291, label %cond.true.290

cond.true.290:                                    ; preds = %if.else.288
  br label %cond.end.339

cond.false.291:                                   ; preds = %if.else.288
  %204 = load %struct.sv*, %struct.sv** %sv208, align 8
  %sv_flags292 = getelementptr inbounds %struct.sv, %struct.sv* %204, i32 0, i32 2
  %205 = load i32, i32* %sv_flags292, align 4
  %and293 = and i32 %205, 262144
  %tobool294 = icmp ne i32 %and293, 0
  br i1 %tobool294, label %cond.true.295, label %cond.false.312

cond.true.295:                                    ; preds = %cond.false.291
  %206 = load %struct.sv*, %struct.sv** %sv208, align 8
  %sv_any296 = getelementptr inbounds %struct.sv, %struct.sv* %206, i32 0, i32 0
  %207 = load i8*, i8** %sv_any296, align 8
  %208 = bitcast i8* %207 to %struct.xpv*
  store %struct.xpv* %208, %struct.xpv** @PL_Xpv, align 8
  %tobool297 = icmp ne %struct.xpv* %208, null
  br i1 %tobool297, label %land.rhs.298, label %land.end.310

land.rhs.298:                                     ; preds = %cond.true.295
  %209 = load %struct.xpv*, %struct.xpv** @PL_Xpv, align 8
  %xpv_cur299 = getelementptr inbounds %struct.xpv, %struct.xpv* %209, i32 0, i32 1
  %210 = load i64, i64* %xpv_cur299, align 8
  %cmp300 = icmp ugt i64 %210, 1
  br i1 %cmp300, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs.298
  %211 = load %struct.xpv*, %struct.xpv** @PL_Xpv, align 8
  %xpv_cur302 = getelementptr inbounds %struct.xpv, %struct.xpv* %211, i32 0, i32 1
  %212 = load i64, i64* %xpv_cur302, align 8
  %tobool303 = icmp ne i64 %212, 0
  br i1 %tobool303, label %land.rhs.304, label %land.end.309

land.rhs.304:                                     ; preds = %lor.rhs
  %213 = load %struct.xpv*, %struct.xpv** @PL_Xpv, align 8
  %xpv_pv305 = getelementptr inbounds %struct.xpv, %struct.xpv* %213, i32 0, i32 0
  %214 = load i8*, i8** %xpv_pv305, align 8
  %215 = load i8, i8* %214, align 1
  %conv306 = sext i8 %215 to i32
  %cmp307 = icmp ne i32 %conv306, 48
  br label %land.end.309

land.end.309:                                     ; preds = %land.rhs.304, %lor.rhs
  %216 = phi i1 [ false, %lor.rhs ], [ %cmp307, %land.rhs.304 ]
  br label %lor.end

lor.end:                                          ; preds = %land.end.309, %land.rhs.298
  %217 = phi i1 [ true, %land.rhs.298 ], [ %216, %land.end.309 ]
  br label %land.end.310

land.end.310:                                     ; preds = %lor.end, %cond.true.295
  %218 = phi i1 [ false, %cond.true.295 ], [ %217, %lor.end ]
  %cond311 = select i1 %218, i32 1, i32 0
  br label %cond.end.337

cond.false.312:                                   ; preds = %cond.false.291
  %219 = load %struct.sv*, %struct.sv** %sv208, align 8
  %sv_flags313 = getelementptr inbounds %struct.sv, %struct.sv* %219, i32 0, i32 2
  %220 = load i32, i32* %sv_flags313, align 4
  %and314 = and i32 %220, 65536
  %tobool315 = icmp ne i32 %and314, 0
  br i1 %tobool315, label %cond.true.316, label %cond.false.321

cond.true.316:                                    ; preds = %cond.false.312
  %221 = load %struct.sv*, %struct.sv** %sv208, align 8
  %sv_any317 = getelementptr inbounds %struct.sv, %struct.sv* %221, i32 0, i32 0
  %222 = load i8*, i8** %sv_any317, align 8
  %223 = bitcast i8* %222 to %struct.xpviv*
  %xiv_iv318 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %223, i32 0, i32 3
  %224 = load i64, i64* %xiv_iv318, align 8
  %cmp319 = icmp ne i64 %224, 0
  %conv320 = zext i1 %cmp319 to i32
  br label %cond.end.335

cond.false.321:                                   ; preds = %cond.false.312
  %225 = load %struct.sv*, %struct.sv** %sv208, align 8
  %sv_flags322 = getelementptr inbounds %struct.sv, %struct.sv* %225, i32 0, i32 2
  %226 = load i32, i32* %sv_flags322, align 4
  %and323 = and i32 %226, 131072
  %tobool324 = icmp ne i32 %and323, 0
  br i1 %tobool324, label %cond.true.325, label %cond.false.330

cond.true.325:                                    ; preds = %cond.false.321
  %227 = load %struct.sv*, %struct.sv** %sv208, align 8
  %sv_any326 = getelementptr inbounds %struct.sv, %struct.sv* %227, i32 0, i32 0
  %228 = load i8*, i8** %sv_any326, align 8
  %229 = bitcast i8* %228 to %struct.xpvnv*
  %xnv_nv327 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %229, i32 0, i32 4
  %230 = load double, double* %xnv_nv327, align 8
  %cmp328 = fcmp une double %230, 0.000000e+00
  %conv329 = zext i1 %cmp328 to i32
  br label %cond.end.333

cond.false.330:                                   ; preds = %cond.false.321
  %231 = load %struct.sv*, %struct.sv** %sv208, align 8
  %call331 = call signext i8 @Perl_sv_2bool(%struct.sv* %231)
  %conv332 = sext i8 %call331 to i32
  br label %cond.end.333

cond.end.333:                                     ; preds = %cond.false.330, %cond.true.325
  %cond334 = phi i32 [ %conv329, %cond.true.325 ], [ %conv332, %cond.false.330 ]
  br label %cond.end.335

cond.end.335:                                     ; preds = %cond.end.333, %cond.true.316
  %cond336 = phi i32 [ %conv320, %cond.true.316 ], [ %cond334, %cond.end.333 ]
  br label %cond.end.337

cond.end.337:                                     ; preds = %cond.end.335, %land.end.310
  %cond338 = phi i32 [ %cond311, %land.end.310 ], [ %cond336, %cond.end.335 ]
  br label %cond.end.339

cond.end.339:                                     ; preds = %cond.end.337, %cond.true.290
  %cond340 = phi i32 [ 0, %cond.true.290 ], [ %cond338, %cond.end.337 ]
  store i32 %cond340, i32* %flop, align 4
  br label %if.end.341

if.end.341:                                       ; preds = %cond.end.339, %if.end.287
  %232 = load i32, i32* %flop, align 4
  %tobool342 = icmp ne i32 %232, 0
  br i1 %tobool342, label %if.then.343, label %if.end.348

if.then.343:                                      ; preds = %if.end.341
  %233 = load %struct.op*, %struct.op** @PL_op, align 8
  %234 = bitcast %struct.op* %233 to %struct.unop*
  %op_first344 = getelementptr inbounds %struct.unop, %struct.unop* %234, i32 0, i32 8
  %235 = load %struct.op*, %struct.op** %op_first344, align 8
  %236 = bitcast %struct.op* %235 to %struct.unop*
  %op_first345 = getelementptr inbounds %struct.unop, %struct.unop* %236, i32 0, i32 8
  %237 = load %struct.op*, %struct.op** %op_first345, align 8
  %op_targ346 = getelementptr inbounds %struct.op, %struct.op* %237, i32 0, i32 3
  %238 = load i64, i64* %op_targ346, align 8
  %239 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %arrayidx347 = getelementptr inbounds %struct.sv*, %struct.sv** %239, i64 %238
  %240 = load %struct.sv*, %struct.sv** %arrayidx347, align 8
  call void @Perl_sv_setiv(%struct.sv* %240, i64 0)
  %241 = load %struct.sv*, %struct.sv** %targ, align 8
  call void @Perl_sv_catpv(%struct.sv* %241, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.13, i32 0, i32 0))
  br label %if.end.348

if.end.348:                                       ; preds = %if.then.343, %if.end.341
  %242 = load %struct.sv*, %struct.sv** %targ, align 8
  %243 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %242, %struct.sv** %243, align 8
  br label %if.end.349

if.end.349:                                       ; preds = %if.end.348, %if.end.205
  %244 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %244, %struct.sv*** @PL_stack_sp, align 8
  %245 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %245, i32 0, i32 0
  %246 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %246, %struct.op** %retval
  br label %return

return:                                           ; preds = %if.end.349, %if.then.103
  %247 = load %struct.op*, %struct.op** %retval
  ret %struct.op* %247
}

declare i32 @Perl_mg_get(%struct.sv*) #1

declare i32 @Perl_looks_like_number(%struct.sv*) #1

declare void @Perl_tmps_grow(i32) #1

declare %struct.sv* @Perl_newSVsv(%struct.sv*) #1

declare void @Perl_sv_inc(%struct.sv*) #1

declare void @Perl_sv_catpv(%struct.sv*, i8*) #1

declare void @Perl_croak(i8*, ...) #1

; Function Attrs: nounwind uwtable
define i32 @Perl_is_lvalue_sub() #0 {
entry:
  %retval = alloca i32, align 4
  %cxix = alloca i32, align 4
  %0 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %0, i32 0, i32 2
  %1 = load i32, i32* %si_cxix, align 4
  %call = call i32 @S_dopoptosub(i32 %1)
  store i32 %call, i32* %cxix, align 4
  %2 = load i32, i32* %cxix, align 4
  %idxprom = sext i32 %2 to i64
  %3 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxstack = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %3, i32 0, i32 1
  %4 = load %struct.context*, %struct.context** %si_cxstack, align 8
  %arrayidx = getelementptr inbounds %struct.context, %struct.context* %4, i64 %idxprom
  %cx_u = getelementptr inbounds %struct.context, %struct.context* %arrayidx, i32 0, i32 1
  %cx_blk = bitcast %union.anon* %cx_u to %struct.block*
  %blk_u = getelementptr inbounds %struct.block, %struct.block* %cx_blk, i32 0, i32 7
  %blku_sub = bitcast %union.anon.1* %blk_u to %struct.block_sub*
  %lval = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub, i32 0, i32 7
  %5 = load i8, i8* %lval, align 1
  %conv = zext i8 %5 to i32
  %tobool = icmp ne i32 %conv, 0
  br i1 %tobool, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %6 = load i32, i32* %cxix, align 4
  %idxprom1 = sext i32 %6 to i64
  %7 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxstack2 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %7, i32 0, i32 1
  %8 = load %struct.context*, %struct.context** %si_cxstack2, align 8
  %arrayidx3 = getelementptr inbounds %struct.context, %struct.context* %8, i64 %idxprom1
  %cx_u4 = getelementptr inbounds %struct.context, %struct.context* %arrayidx3, i32 0, i32 1
  %cx_blk5 = bitcast %union.anon* %cx_u4 to %struct.block*
  %blk_u6 = getelementptr inbounds %struct.block, %struct.block* %cx_blk5, i32 0, i32 7
  %blku_sub7 = bitcast %union.anon.1* %blk_u6 to %struct.block_sub*
  %cv = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub7, i32 0, i32 0
  %9 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any = getelementptr inbounds %struct.cv, %struct.cv* %9, i32 0, i32 0
  %10 = load %struct.xpvcv*, %struct.xpvcv** %sv_any, align 8
  %xcv_flags = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %10, i32 0, i32 17
  %11 = load i16, i16* %xcv_flags, align 2
  %conv8 = zext i16 %11 to i32
  %and = and i32 %conv8, 256
  %tobool9 = icmp ne i32 %and, 0
  br i1 %tobool9, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %12 = load i32, i32* %cxix, align 4
  %idxprom10 = sext i32 %12 to i64
  %13 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxstack11 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %13, i32 0, i32 1
  %14 = load %struct.context*, %struct.context** %si_cxstack11, align 8
  %arrayidx12 = getelementptr inbounds %struct.context, %struct.context* %14, i64 %idxprom10
  %cx_u13 = getelementptr inbounds %struct.context, %struct.context* %arrayidx12, i32 0, i32 1
  %cx_blk14 = bitcast %union.anon* %cx_u13 to %struct.block*
  %blk_u15 = getelementptr inbounds %struct.block, %struct.block* %cx_blk14, i32 0, i32 7
  %blku_sub16 = bitcast %union.anon.1* %blk_u15 to %struct.block_sub*
  %lval17 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub16, i32 0, i32 7
  %15 = load i8, i8* %lval17, align 1
  %conv18 = zext i8 %15 to i32
  store i32 %conv18, i32* %retval
  br label %return

if.else:                                          ; preds = %land.lhs.true, %entry
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.else, %if.then
  %16 = load i32, i32* %retval
  ret i32 %16
}

; Function Attrs: nounwind uwtable
define void @Perl_dounwind(i32 %cxix) #0 {
entry:
  %cxix.addr = alloca i32, align 4
  %cx = alloca %struct.context*, align 8
  %optype = alloca i32, align 4
  %sv = alloca %struct.sv*, align 8
  %tmp = alloca %struct.av*, align 8
  %fill = alloca i64, align 8
  %tmp96 = alloca i64, align 8
  %s_v_p = alloca %struct.sv**, align 8
  store i32 %cxix, i32* %cxix.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog, %sw.bb, %entry
  %0 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %0, i32 0, i32 2
  %1 = load i32, i32* %si_cxix, align 4
  %2 = load i32, i32* %cxix.addr, align 4
  %cmp = icmp sgt i32 %1, %2
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix1 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %3, i32 0, i32 2
  %4 = load i32, i32* %si_cxix1, align 4
  %idxprom = sext i32 %4 to i64
  %5 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxstack = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %5, i32 0, i32 1
  %6 = load %struct.context*, %struct.context** %si_cxstack, align 8
  %arrayidx = getelementptr inbounds %struct.context, %struct.context* %6, i64 %idxprom
  store %struct.context* %arrayidx, %struct.context** %cx, align 8
  %7 = load %struct.context*, %struct.context** %cx, align 8
  %cx_type = getelementptr inbounds %struct.context, %struct.context* %7, i32 0, i32 0
  %8 = load i32, i32* %cx_type, align 4
  %and = and i32 %8, 255
  switch i32 %and, label %sw.epilog [
    i32 4, label %sw.bb
    i32 1, label %sw.bb.6
    i32 2, label %sw.bb.121
    i32 3, label %sw.bb.146
    i32 0, label %sw.bb.188
    i32 6, label %sw.bb.189
  ]

sw.bb:                                            ; preds = %while.body
  %9 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix2 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %9, i32 0, i32 2
  %10 = load i32, i32* %si_cxix2, align 4
  %dec = add nsw i32 %10, -1
  store i32 %dec, i32* %si_cxix2, align 4
  %idxprom3 = sext i32 %10 to i64
  %11 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxstack4 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %11, i32 0, i32 1
  %12 = load %struct.context*, %struct.context** %si_cxstack4, align 8
  %arrayidx5 = getelementptr inbounds %struct.context, %struct.context* %12, i64 %idxprom3
  store %struct.context* %arrayidx5, %struct.context** %cx, align 8
  %13 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u = getelementptr inbounds %struct.context, %struct.context* %13, i32 0, i32 1
  %cx_subst = bitcast %union.anon* %cx_u to %struct.subst*
  %sbu_rxres = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst, i32 0, i32 12
  call void @Perl_rxres_free(i8** %sbu_rxres)
  br label %while.cond

sw.bb.6:                                          ; preds = %while.body
  %14 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u7 = getelementptr inbounds %struct.context, %struct.context* %14, i32 0, i32 1
  %cx_blk = bitcast %union.anon* %cx_u7 to %struct.block*
  %blk_u = getelementptr inbounds %struct.block, %struct.block* %cx_blk, i32 0, i32 7
  %blku_sub = bitcast %union.anon.1* %blk_u to %struct.block_sub*
  %hasargs = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub, i32 0, i32 6
  %15 = load i8, i8* %hasargs, align 1
  %tobool = icmp ne i8 %15, 0
  br i1 %tobool, label %if.then, label %if.end.104

if.then:                                          ; preds = %sw.bb.6
  %16 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %sv_any = getelementptr inbounds %struct.gv, %struct.gv* %16, i32 0, i32 0
  %17 = load %struct.xpvgv*, %struct.xpvgv** %sv_any, align 8
  %xgv_gp = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %17, i32 0, i32 7
  %18 = load %struct.gp*, %struct.gp** %xgv_gp, align 8
  %gp_av = getelementptr inbounds %struct.gp, %struct.gp* %18, i32 0, i32 4
  %19 = load %struct.av*, %struct.av** %gp_av, align 8
  %20 = bitcast %struct.av* %19 to %struct.sv*
  call void @Perl_sv_free(%struct.sv* %20)
  %21 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u8 = getelementptr inbounds %struct.context, %struct.context* %21, i32 0, i32 1
  %cx_blk9 = bitcast %union.anon* %cx_u8 to %struct.block*
  %blk_u10 = getelementptr inbounds %struct.block, %struct.block* %cx_blk9, i32 0, i32 7
  %blku_sub11 = bitcast %union.anon.1* %blk_u10 to %struct.block_sub*
  %savearray = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub11, i32 0, i32 3
  %22 = load %struct.av*, %struct.av** %savearray, align 8
  %23 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %sv_any12 = getelementptr inbounds %struct.gv, %struct.gv* %23, i32 0, i32 0
  %24 = load %struct.xpvgv*, %struct.xpvgv** %sv_any12, align 8
  %xgv_gp13 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %24, i32 0, i32 7
  %25 = load %struct.gp*, %struct.gp** %xgv_gp13, align 8
  %gp_av14 = getelementptr inbounds %struct.gp, %struct.gp* %25, i32 0, i32 4
  store %struct.av* %22, %struct.av** %gp_av14, align 8
  store %struct.av* %22, %struct.av** %tmp
  %26 = load %struct.av*, %struct.av** %tmp
  %27 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u15 = getelementptr inbounds %struct.context, %struct.context* %27, i32 0, i32 1
  %cx_blk16 = bitcast %union.anon* %cx_u15 to %struct.block*
  %blk_u17 = getelementptr inbounds %struct.block, %struct.block* %cx_blk16, i32 0, i32 7
  %blku_sub18 = bitcast %union.anon.1* %blk_u17 to %struct.block_sub*
  %argarray = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub18, i32 0, i32 4
  %28 = load %struct.av*, %struct.av** %argarray, align 8
  %sv_any19 = getelementptr inbounds %struct.av, %struct.av* %28, i32 0, i32 0
  %29 = load %struct.xpvav*, %struct.xpvav** %sv_any19, align 8
  %xav_flags = getelementptr inbounds %struct.xpvav, %struct.xpvav* %29, i32 0, i32 9
  %30 = load i8, i8* %xav_flags, align 1
  %conv = zext i8 %30 to i32
  %and20 = and i32 %conv, 1
  %tobool21 = icmp ne i32 %and20, 0
  br i1 %tobool21, label %if.then.22, label %if.else

if.then.22:                                       ; preds = %if.then
  %31 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u24 = getelementptr inbounds %struct.context, %struct.context* %31, i32 0, i32 1
  %cx_blk25 = bitcast %union.anon* %cx_u24 to %struct.block*
  %blk_u26 = getelementptr inbounds %struct.block, %struct.block* %cx_blk25, i32 0, i32 7
  %blku_sub27 = bitcast %union.anon.1* %blk_u26 to %struct.block_sub*
  %argarray28 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub27, i32 0, i32 4
  %32 = load %struct.av*, %struct.av** %argarray28, align 8
  %sv_any29 = getelementptr inbounds %struct.av, %struct.av* %32, i32 0, i32 0
  %33 = load %struct.xpvav*, %struct.xpvav** %sv_any29, align 8
  %xav_fill = getelementptr inbounds %struct.xpvav, %struct.xpvav* %33, i32 0, i32 1
  %34 = load i64, i64* %xav_fill, align 8
  store i64 %34, i64* %fill, align 8
  %35 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u30 = getelementptr inbounds %struct.context, %struct.context* %35, i32 0, i32 1
  %cx_blk31 = bitcast %union.anon* %cx_u30 to %struct.block*
  %blk_u32 = getelementptr inbounds %struct.block, %struct.block* %cx_blk31, i32 0, i32 7
  %blku_sub33 = bitcast %union.anon.1* %blk_u32 to %struct.block_sub*
  %argarray34 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub33, i32 0, i32 4
  %36 = load %struct.av*, %struct.av** %argarray34, align 8
  %37 = bitcast %struct.av* %36 to %struct.sv*
  call void @Perl_sv_free(%struct.sv* %37)
  %call = call %struct.av* @Perl_newAV()
  %38 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u35 = getelementptr inbounds %struct.context, %struct.context* %38, i32 0, i32 1
  %cx_blk36 = bitcast %union.anon* %cx_u35 to %struct.block*
  %blk_u37 = getelementptr inbounds %struct.block, %struct.block* %cx_blk36, i32 0, i32 7
  %blku_sub38 = bitcast %union.anon.1* %blk_u37 to %struct.block_sub*
  %argarray39 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub38, i32 0, i32 4
  store %struct.av* %call, %struct.av** %argarray39, align 8
  %39 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u40 = getelementptr inbounds %struct.context, %struct.context* %39, i32 0, i32 1
  %cx_blk41 = bitcast %union.anon* %cx_u40 to %struct.block*
  %blk_u42 = getelementptr inbounds %struct.block, %struct.block* %cx_blk41, i32 0, i32 7
  %blku_sub43 = bitcast %union.anon.1* %blk_u42 to %struct.block_sub*
  %argarray44 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub43, i32 0, i32 4
  %40 = load %struct.av*, %struct.av** %argarray44, align 8
  %41 = load i64, i64* %fill, align 8
  %conv45 = trunc i64 %41 to i32
  call void @Perl_av_extend(%struct.av* %40, i32 %conv45)
  %42 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u46 = getelementptr inbounds %struct.context, %struct.context* %42, i32 0, i32 1
  %cx_blk47 = bitcast %union.anon* %cx_u46 to %struct.block*
  %blk_u48 = getelementptr inbounds %struct.block, %struct.block* %cx_blk47, i32 0, i32 7
  %blku_sub49 = bitcast %union.anon.1* %blk_u48 to %struct.block_sub*
  %argarray50 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub49, i32 0, i32 4
  %43 = load %struct.av*, %struct.av** %argarray50, align 8
  %sv_any51 = getelementptr inbounds %struct.av, %struct.av* %43, i32 0, i32 0
  %44 = load %struct.xpvav*, %struct.xpvav** %sv_any51, align 8
  %xav_flags52 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %44, i32 0, i32 9
  store i8 2, i8* %xav_flags52, align 1
  %45 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u53 = getelementptr inbounds %struct.context, %struct.context* %45, i32 0, i32 1
  %cx_blk54 = bitcast %union.anon* %cx_u53 to %struct.block*
  %blk_u55 = getelementptr inbounds %struct.block, %struct.block* %cx_blk54, i32 0, i32 7
  %blku_sub56 = bitcast %union.anon.1* %blk_u55 to %struct.block_sub*
  %argarray57 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub56, i32 0, i32 4
  %46 = load %struct.av*, %struct.av** %argarray57, align 8
  %47 = bitcast %struct.av* %46 to %struct.sv*
  %48 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u58 = getelementptr inbounds %struct.context, %struct.context* %48, i32 0, i32 1
  %cx_blk59 = bitcast %union.anon* %cx_u58 to %struct.block*
  %blk_u60 = getelementptr inbounds %struct.block, %struct.block* %cx_blk59, i32 0, i32 7
  %blku_sub61 = bitcast %union.anon.1* %blk_u60 to %struct.block_sub*
  %oldcomppad = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub61, i32 0, i32 8
  %49 = load %struct.av*, %struct.av** %oldcomppad, align 8
  %sv_any62 = getelementptr inbounds %struct.av, %struct.av* %49, i32 0, i32 0
  %50 = load %struct.xpvav*, %struct.xpvav** %sv_any62, align 8
  %xav_array = getelementptr inbounds %struct.xpvav, %struct.xpvav* %50, i32 0, i32 0
  %51 = load i8*, i8** %xav_array, align 8
  %52 = bitcast i8* %51 to %struct.sv**
  %arrayidx63 = getelementptr inbounds %struct.sv*, %struct.sv** %52, i64 0
  store %struct.sv* %47, %struct.sv** %arrayidx63, align 8
  br label %if.end

if.else:                                          ; preds = %if.then
  %53 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u64 = getelementptr inbounds %struct.context, %struct.context* %53, i32 0, i32 1
  %cx_blk65 = bitcast %union.anon* %cx_u64 to %struct.block*
  %blk_u66 = getelementptr inbounds %struct.block, %struct.block* %cx_blk65, i32 0, i32 7
  %blku_sub67 = bitcast %union.anon.1* %blk_u66 to %struct.block_sub*
  %argarray68 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub67, i32 0, i32 4
  %54 = load %struct.av*, %struct.av** %argarray68, align 8
  %sv_any69 = getelementptr inbounds %struct.av, %struct.av* %54, i32 0, i32 0
  %55 = load %struct.xpvav*, %struct.xpvav** %sv_any69, align 8
  %xav_array70 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %55, i32 0, i32 0
  %56 = load i8*, i8** %xav_array70, align 8
  %57 = bitcast i8* %56 to %struct.sv**
  %58 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u71 = getelementptr inbounds %struct.context, %struct.context* %58, i32 0, i32 1
  %cx_blk72 = bitcast %union.anon* %cx_u71 to %struct.block*
  %blk_u73 = getelementptr inbounds %struct.block, %struct.block* %cx_blk72, i32 0, i32 7
  %blku_sub74 = bitcast %union.anon.1* %blk_u73 to %struct.block_sub*
  %argarray75 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub74, i32 0, i32 4
  %59 = load %struct.av*, %struct.av** %argarray75, align 8
  %sv_any76 = getelementptr inbounds %struct.av, %struct.av* %59, i32 0, i32 0
  %60 = load %struct.xpvav*, %struct.xpvav** %sv_any76, align 8
  %xav_alloc = getelementptr inbounds %struct.xpvav, %struct.xpvav* %60, i32 0, i32 7
  %61 = load %struct.sv**, %struct.sv*** %xav_alloc, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %57 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %61 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %62 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u77 = getelementptr inbounds %struct.context, %struct.context* %62, i32 0, i32 1
  %cx_blk78 = bitcast %union.anon* %cx_u77 to %struct.block*
  %blk_u79 = getelementptr inbounds %struct.block, %struct.block* %cx_blk78, i32 0, i32 7
  %blku_sub80 = bitcast %union.anon.1* %blk_u79 to %struct.block_sub*
  %argarray81 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub80, i32 0, i32 4
  %63 = load %struct.av*, %struct.av** %argarray81, align 8
  %sv_any82 = getelementptr inbounds %struct.av, %struct.av* %63, i32 0, i32 0
  %64 = load %struct.xpvav*, %struct.xpvav** %sv_any82, align 8
  %xav_max = getelementptr inbounds %struct.xpvav, %struct.xpvav* %64, i32 0, i32 2
  %65 = load i64, i64* %xav_max, align 8
  %add = add nsw i64 %65, %sub.ptr.div
  store i64 %add, i64* %xav_max, align 8
  %66 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u83 = getelementptr inbounds %struct.context, %struct.context* %66, i32 0, i32 1
  %cx_blk84 = bitcast %union.anon* %cx_u83 to %struct.block*
  %blk_u85 = getelementptr inbounds %struct.block, %struct.block* %cx_blk84, i32 0, i32 7
  %blku_sub86 = bitcast %union.anon.1* %blk_u85 to %struct.block_sub*
  %argarray87 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub86, i32 0, i32 4
  %67 = load %struct.av*, %struct.av** %argarray87, align 8
  %sv_any88 = getelementptr inbounds %struct.av, %struct.av* %67, i32 0, i32 0
  %68 = load %struct.xpvav*, %struct.xpvav** %sv_any88, align 8
  %xav_alloc89 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %68, i32 0, i32 7
  %69 = load %struct.sv**, %struct.sv*** %xav_alloc89, align 8
  %70 = bitcast %struct.sv** %69 to i8*
  %71 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u90 = getelementptr inbounds %struct.context, %struct.context* %71, i32 0, i32 1
  %cx_blk91 = bitcast %union.anon* %cx_u90 to %struct.block*
  %blk_u92 = getelementptr inbounds %struct.block, %struct.block* %cx_blk91, i32 0, i32 7
  %blku_sub93 = bitcast %union.anon.1* %blk_u92 to %struct.block_sub*
  %argarray94 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub93, i32 0, i32 4
  %72 = load %struct.av*, %struct.av** %argarray94, align 8
  %sv_any95 = getelementptr inbounds %struct.av, %struct.av* %72, i32 0, i32 0
  %73 = load %struct.xpvav*, %struct.xpvav** %sv_any95, align 8
  %74 = bitcast %struct.xpvav* %73 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %74, i32 0, i32 0
  store i8* %70, i8** %xpv_pv, align 8
  %75 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u97 = getelementptr inbounds %struct.context, %struct.context* %75, i32 0, i32 1
  %cx_blk98 = bitcast %union.anon* %cx_u97 to %struct.block*
  %blk_u99 = getelementptr inbounds %struct.block, %struct.block* %cx_blk98, i32 0, i32 7
  %blku_sub100 = bitcast %union.anon.1* %blk_u99 to %struct.block_sub*
  %argarray101 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub100, i32 0, i32 4
  %76 = load %struct.av*, %struct.av** %argarray101, align 8
  %sv_any102 = getelementptr inbounds %struct.av, %struct.av* %76, i32 0, i32 0
  %77 = load %struct.xpvav*, %struct.xpvav** %sv_any102, align 8
  %xav_fill103 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %77, i32 0, i32 1
  store i64 -1, i64* %xav_fill103, align 8
  store i64 -1, i64* %tmp96
  %78 = load i64, i64* %tmp96
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.22
  br label %if.end.104

if.end.104:                                       ; preds = %if.end, %sw.bb.6
  %79 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u105 = getelementptr inbounds %struct.context, %struct.context* %79, i32 0, i32 1
  %cx_blk106 = bitcast %union.anon* %cx_u105 to %struct.block*
  %blk_u107 = getelementptr inbounds %struct.block, %struct.block* %cx_blk106, i32 0, i32 7
  %blku_sub108 = bitcast %union.anon.1* %blk_u107 to %struct.block_sub*
  %cv = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub108, i32 0, i32 0
  %80 = load %struct.cv*, %struct.cv** %cv, align 8
  %81 = bitcast %struct.cv* %80 to %struct.sv*
  store %struct.sv* %81, %struct.sv** %sv, align 8
  %82 = load %struct.sv*, %struct.sv** %sv, align 8
  %tobool109 = icmp ne %struct.sv* %82, null
  br i1 %tobool109, label %land.lhs.true, label %if.end.117

land.lhs.true:                                    ; preds = %if.end.104
  %83 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u110 = getelementptr inbounds %struct.context, %struct.context* %83, i32 0, i32 1
  %cx_blk111 = bitcast %union.anon* %cx_u110 to %struct.block*
  %blk_u112 = getelementptr inbounds %struct.block, %struct.block* %cx_blk111, i32 0, i32 7
  %blku_sub113 = bitcast %union.anon.1* %blk_u112 to %struct.block_sub*
  %olddepth = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub113, i32 0, i32 5
  %84 = load i64, i64* %olddepth, align 8
  %85 = load %struct.sv*, %struct.sv** %sv, align 8
  %86 = bitcast %struct.sv* %85 to %struct.cv*
  %sv_any114 = getelementptr inbounds %struct.cv, %struct.cv* %86, i32 0, i32 0
  %87 = load %struct.xpvcv*, %struct.xpvcv** %sv_any114, align 8
  %xcv_depth = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %87, i32 0, i32 14
  store i64 %84, i64* %xcv_depth, align 8
  %tobool115 = icmp ne i64 %84, 0
  br i1 %tobool115, label %if.then.116, label %if.end.117

if.then.116:                                      ; preds = %land.lhs.true
  store %struct.sv* null, %struct.sv** %sv, align 8
  br label %if.end.117

if.end.117:                                       ; preds = %if.then.116, %land.lhs.true, %if.end.104
  %88 = load %struct.sv*, %struct.sv** %sv, align 8
  %tobool118 = icmp ne %struct.sv* %88, null
  br i1 %tobool118, label %if.then.119, label %if.end.120

if.then.119:                                      ; preds = %if.end.117
  %89 = load %struct.sv*, %struct.sv** %sv, align 8
  call void @Perl_sv_free(%struct.sv* %89)
  br label %if.end.120

if.end.120:                                       ; preds = %if.then.119, %if.end.117
  br label %sw.epilog

sw.bb.121:                                        ; preds = %while.body
  %90 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u122 = getelementptr inbounds %struct.context, %struct.context* %90, i32 0, i32 1
  %cx_blk123 = bitcast %union.anon* %cx_u122 to %struct.block*
  %blk_u124 = getelementptr inbounds %struct.block, %struct.block* %cx_blk123, i32 0, i32 7
  %blku_eval = bitcast %union.anon.1* %blk_u124 to %struct.block_eval*
  %old_in_eval = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval, i32 0, i32 0
  %91 = load i32, i32* %old_in_eval, align 4
  store volatile i32 %91, i32* @PL_in_eval, align 4
  %92 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u125 = getelementptr inbounds %struct.context, %struct.context* %92, i32 0, i32 1
  %cx_blk126 = bitcast %union.anon* %cx_u125 to %struct.block*
  %blk_u127 = getelementptr inbounds %struct.block, %struct.block* %cx_blk126, i32 0, i32 7
  %blku_eval128 = bitcast %union.anon.1* %blk_u127 to %struct.block_eval*
  %old_op_type = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval128, i32 0, i32 1
  %93 = load i32, i32* %old_op_type, align 4
  store i32 %93, i32* %optype, align 4
  %94 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u129 = getelementptr inbounds %struct.context, %struct.context* %94, i32 0, i32 1
  %cx_blk130 = bitcast %union.anon* %cx_u129 to %struct.block*
  %blk_u131 = getelementptr inbounds %struct.block, %struct.block* %cx_blk130, i32 0, i32 7
  %blku_eval132 = bitcast %union.anon.1* %blk_u131 to %struct.block_eval*
  %old_eval_root = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval132, i32 0, i32 3
  %95 = load %struct.op*, %struct.op** %old_eval_root, align 8
  store %struct.op* %95, %struct.op** @PL_eval_root, align 8
  %96 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u133 = getelementptr inbounds %struct.context, %struct.context* %96, i32 0, i32 1
  %cx_blk134 = bitcast %union.anon* %cx_u133 to %struct.block*
  %blk_u135 = getelementptr inbounds %struct.block, %struct.block* %cx_blk134, i32 0, i32 7
  %blku_eval136 = bitcast %union.anon.1* %blk_u135 to %struct.block_eval*
  %old_namesv = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval136, i32 0, i32 2
  %97 = load %struct.sv*, %struct.sv** %old_namesv, align 8
  %tobool137 = icmp ne %struct.sv* %97, null
  br i1 %tobool137, label %if.then.138, label %if.end.145

if.then.138:                                      ; preds = %sw.bb.121
  %98 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u139 = getelementptr inbounds %struct.context, %struct.context* %98, i32 0, i32 1
  %cx_blk140 = bitcast %union.anon* %cx_u139 to %struct.block*
  %blk_u141 = getelementptr inbounds %struct.block, %struct.block* %cx_blk140, i32 0, i32 7
  %blku_eval142 = bitcast %union.anon.1* %blk_u141 to %struct.block_eval*
  %old_namesv143 = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval142, i32 0, i32 2
  %99 = load %struct.sv*, %struct.sv** %old_namesv143, align 8
  %call144 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %99)
  br label %if.end.145

if.end.145:                                       ; preds = %if.then.138, %sw.bb.121
  br label %sw.epilog

sw.bb.146:                                        ; preds = %while.body
  %100 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u147 = getelementptr inbounds %struct.context, %struct.context* %100, i32 0, i32 1
  %cx_blk148 = bitcast %union.anon* %cx_u147 to %struct.block*
  %blk_u149 = getelementptr inbounds %struct.block, %struct.block* %cx_blk148, i32 0, i32 7
  %blku_loop = bitcast %union.anon.1* %blk_u149 to %struct.block_loop*
  %iterlval = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop, i32 0, i32 7
  %101 = load %struct.sv*, %struct.sv** %iterlval, align 8
  call void @Perl_sv_free(%struct.sv* %101)
  %102 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u150 = getelementptr inbounds %struct.context, %struct.context* %102, i32 0, i32 1
  %cx_blk151 = bitcast %union.anon* %cx_u150 to %struct.block*
  %blk_u152 = getelementptr inbounds %struct.block, %struct.block* %cx_blk151, i32 0, i32 7
  %blku_loop153 = bitcast %union.anon.1* %blk_u152 to %struct.block_loop*
  %itervar = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop153, i32 0, i32 5
  %103 = load %struct.sv**, %struct.sv*** %itervar, align 8
  %tobool154 = icmp ne %struct.sv** %103, null
  br i1 %tobool154, label %if.then.155, label %if.end.167

if.then.155:                                      ; preds = %sw.bb.146
  %104 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u157 = getelementptr inbounds %struct.context, %struct.context* %104, i32 0, i32 1
  %cx_blk158 = bitcast %union.anon* %cx_u157 to %struct.block*
  %blk_u159 = getelementptr inbounds %struct.block, %struct.block* %cx_blk158, i32 0, i32 7
  %blku_loop160 = bitcast %union.anon.1* %blk_u159 to %struct.block_loop*
  %itervar161 = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop160, i32 0, i32 5
  %105 = load %struct.sv**, %struct.sv*** %itervar161, align 8
  store %struct.sv** %105, %struct.sv*** %s_v_p, align 8
  %106 = load %struct.sv**, %struct.sv*** %s_v_p, align 8
  %107 = load %struct.sv*, %struct.sv** %106, align 8
  %call162 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %107)
  %108 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u163 = getelementptr inbounds %struct.context, %struct.context* %108, i32 0, i32 1
  %cx_blk164 = bitcast %union.anon* %cx_u163 to %struct.block*
  %blk_u165 = getelementptr inbounds %struct.block, %struct.block* %cx_blk164, i32 0, i32 7
  %blku_loop166 = bitcast %union.anon.1* %blk_u165 to %struct.block_loop*
  %itersave = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop166, i32 0, i32 6
  %109 = load %struct.sv*, %struct.sv** %itersave, align 8
  %110 = load %struct.sv**, %struct.sv*** %s_v_p, align 8
  store %struct.sv* %109, %struct.sv** %110, align 8
  br label %if.end.167

if.end.167:                                       ; preds = %if.then.155, %sw.bb.146
  %111 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u168 = getelementptr inbounds %struct.context, %struct.context* %111, i32 0, i32 1
  %cx_blk169 = bitcast %union.anon* %cx_u168 to %struct.block*
  %blk_u170 = getelementptr inbounds %struct.block, %struct.block* %cx_blk169, i32 0, i32 7
  %blku_loop171 = bitcast %union.anon.1* %blk_u170 to %struct.block_loop*
  %iterary = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop171, i32 0, i32 8
  %112 = load %struct.av*, %struct.av** %iterary, align 8
  %tobool172 = icmp ne %struct.av* %112, null
  br i1 %tobool172, label %land.lhs.true.173, label %if.end.187

land.lhs.true.173:                                ; preds = %if.end.167
  %113 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u174 = getelementptr inbounds %struct.context, %struct.context* %113, i32 0, i32 1
  %cx_blk175 = bitcast %union.anon* %cx_u174 to %struct.block*
  %blk_u176 = getelementptr inbounds %struct.block, %struct.block* %cx_blk175, i32 0, i32 7
  %blku_loop177 = bitcast %union.anon.1* %blk_u176 to %struct.block_loop*
  %iterary178 = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop177, i32 0, i32 8
  %114 = load %struct.av*, %struct.av** %iterary178, align 8
  %115 = load %struct.av*, %struct.av** @PL_curstack, align 8
  %cmp179 = icmp ne %struct.av* %114, %115
  br i1 %cmp179, label %if.then.181, label %if.end.187

if.then.181:                                      ; preds = %land.lhs.true.173
  %116 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u182 = getelementptr inbounds %struct.context, %struct.context* %116, i32 0, i32 1
  %cx_blk183 = bitcast %union.anon* %cx_u182 to %struct.block*
  %blk_u184 = getelementptr inbounds %struct.block, %struct.block* %cx_blk183, i32 0, i32 7
  %blku_loop185 = bitcast %union.anon.1* %blk_u184 to %struct.block_loop*
  %iterary186 = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop185, i32 0, i32 8
  %117 = load %struct.av*, %struct.av** %iterary186, align 8
  %118 = bitcast %struct.av* %117 to %struct.sv*
  call void @Perl_sv_free(%struct.sv* %118)
  br label %if.end.187

if.end.187:                                       ; preds = %if.then.181, %land.lhs.true.173, %if.end.167
  br label %sw.epilog

sw.bb.188:                                        ; preds = %while.body
  br label %sw.epilog

sw.bb.189:                                        ; preds = %while.body
  %119 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u190 = getelementptr inbounds %struct.context, %struct.context* %119, i32 0, i32 1
  %cx_blk191 = bitcast %union.anon* %cx_u190 to %struct.block*
  %blk_u192 = getelementptr inbounds %struct.block, %struct.block* %cx_blk191, i32 0, i32 7
  %blku_sub193 = bitcast %union.anon.1* %blk_u192 to %struct.block_sub*
  %dfoutgv = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub193, i32 0, i32 2
  %120 = load %struct.gv*, %struct.gv** %dfoutgv, align 8
  call void @Perl_setdefout(%struct.gv* %120)
  %121 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u194 = getelementptr inbounds %struct.context, %struct.context* %121, i32 0, i32 1
  %cx_blk195 = bitcast %union.anon* %cx_u194 to %struct.block*
  %blk_u196 = getelementptr inbounds %struct.block, %struct.block* %cx_blk195, i32 0, i32 7
  %blku_sub197 = bitcast %union.anon.1* %blk_u196 to %struct.block_sub*
  %dfoutgv198 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub197, i32 0, i32 2
  %122 = load %struct.gv*, %struct.gv** %dfoutgv198, align 8
  %123 = bitcast %struct.gv* %122 to %struct.sv*
  call void @Perl_sv_free(%struct.sv* %123)
  br label %sw.epilog

sw.epilog:                                        ; preds = %while.body, %sw.bb.189, %sw.bb.188, %if.end.187, %if.end.145, %if.end.120
  %124 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix199 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %124, i32 0, i32 2
  %125 = load i32, i32* %si_cxix199, align 4
  %dec200 = add nsw i32 %125, -1
  store i32 %dec200, i32* %si_cxix199, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

declare %struct.av* @Perl_newAV() #1

declare void @Perl_av_extend(%struct.av*, i32) #1

declare void @Perl_setdefout(%struct.gv*) #1

; Function Attrs: nounwind uwtable
define void @Perl_qerror(%struct.sv* %err) #0 {
entry:
  %err.addr = alloca %struct.sv*, align 8
  store %struct.sv* %err, %struct.sv** %err.addr, align 8
  %0 = load volatile i32, i32* @PL_in_eval, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct.gv*, %struct.gv** @PL_errgv, align 8
  %sv_any = getelementptr inbounds %struct.gv, %struct.gv* %1, i32 0, i32 0
  %2 = load %struct.xpvgv*, %struct.xpvgv** %sv_any, align 8
  %xgv_gp = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %2, i32 0, i32 7
  %3 = load %struct.gp*, %struct.gp** %xgv_gp, align 8
  %gp_sv = getelementptr inbounds %struct.gp, %struct.gp* %3, i32 0, i32 0
  %4 = load %struct.sv*, %struct.sv** %gp_sv, align 8
  %5 = load %struct.sv*, %struct.sv** %err.addr, align 8
  call void @Perl_sv_catsv_flags(%struct.sv* %4, %struct.sv* %5, i32 2)
  br label %if.end.4

if.else:                                          ; preds = %entry
  %6 = load %struct.sv*, %struct.sv** @PL_errors, align 8
  %tobool1 = icmp ne %struct.sv* %6, null
  br i1 %tobool1, label %if.then.2, label %if.else.3

if.then.2:                                        ; preds = %if.else
  %7 = load %struct.sv*, %struct.sv** @PL_errors, align 8
  %8 = load %struct.sv*, %struct.sv** %err.addr, align 8
  call void @Perl_sv_catsv_flags(%struct.sv* %7, %struct.sv* %8, i32 2)
  br label %if.end

if.else.3:                                        ; preds = %if.else
  %9 = load %struct.sv*, %struct.sv** %err.addr, align 8
  call void (i8*, ...) @Perl_warn(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.15, i32 0, i32 0), %struct.sv* %9)
  br label %if.end

if.end:                                           ; preds = %if.else.3, %if.then.2
  br label %if.end.4

if.end.4:                                         ; preds = %if.end, %if.then
  %10 = load i32, i32* @PL_error_count, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* @PL_error_count, align 4
  ret void
}

declare void @Perl_warn(i8*, ...) #1

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_die_where(i8* %message, i64 %msglen) #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %message.addr = alloca i8*, align 8
  %msglen.addr = alloca i64, align 8
  %n_a = alloca i64, align 8
  %cxix = alloca i32, align 4
  %cx = alloca %struct.context*, align 8
  %gimme = alloca i32, align 4
  %newsp = alloca %struct.sv**, align 8
  %err = alloca %struct.sv*, align 8
  %e = alloca i8*, align 8
  %start = alloca i64, align 8
  %sp = alloca %struct.sv**, align 8
  %prev = alloca %struct.stackinfo*, align 8
  %tmp = alloca %struct.av*, align 8
  %tmp131 = alloca %struct.stackinfo*, align 8
  %optype = alloca i32, align 4
  %msg = alloca i8*, align 8
  store i8* %message, i8** %message.addr, align 8
  store i64 %msglen, i64* %msglen.addr, align 8
  %0 = load volatile i32, i32* @PL_in_eval, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %if.end.301

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** %message.addr, align 8
  %tobool1 = icmp ne i8* %1, null
  br i1 %tobool1, label %if.then.2, label %if.end.85

if.then.2:                                        ; preds = %if.then
  %2 = load volatile i32, i32* @PL_in_eval, align 4
  %and = and i32 %2, 4
  %tobool3 = icmp ne i32 %and, 0
  br i1 %tobool3, label %if.then.4, label %if.else.80

if.then.4:                                        ; preds = %if.then.2
  %3 = load %struct.gv*, %struct.gv** @PL_errgv, align 8
  %sv_any = getelementptr inbounds %struct.gv, %struct.gv* %3, i32 0, i32 0
  %4 = load %struct.xpvgv*, %struct.xpvgv** %sv_any, align 8
  %xgv_gp = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %4, i32 0, i32 7
  %5 = load %struct.gp*, %struct.gp** %xgv_gp, align 8
  %gp_sv = getelementptr inbounds %struct.gp, %struct.gp* %5, i32 0, i32 0
  %6 = load %struct.sv*, %struct.sv** %gp_sv, align 8
  store %struct.sv* %6, %struct.sv** %err, align 8
  store i8* null, i8** %e, align 8
  %7 = load %struct.sv*, %struct.sv** %err, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 2
  %8 = load i32, i32* %sv_flags, align 4
  %and5 = and i32 %8, 262144
  %tobool6 = icmp ne i32 %and5, 0
  br i1 %tobool6, label %if.else, label %if.then.7

if.then.7:                                        ; preds = %if.then.4
  %9 = load %struct.sv*, %struct.sv** %err, align 8
  call void @Perl_sv_setpv(%struct.sv* %9, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.11, i32 0, i32 0))
  br label %if.end.24

if.else:                                          ; preds = %if.then.4
  %10 = load %struct.sv*, %struct.sv** %err, align 8
  %sv_any8 = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 0
  %11 = load i8*, i8** %sv_any8, align 8
  %12 = bitcast i8* %11 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %12, i32 0, i32 1
  %13 = load i64, i64* %xpv_cur, align 8
  %14 = load i64, i64* %msglen.addr, align 8
  %add = add i64 15, %14
  %sub = sub i64 %add, 1
  %cmp = icmp uge i64 %13, %sub
  br i1 %cmp, label %if.then.9, label %if.end.23

if.then.9:                                        ; preds = %if.else
  %15 = load %struct.sv*, %struct.sv** %err, align 8
  %sv_flags10 = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 2
  %16 = load i32, i32* %sv_flags10, align 4
  %and11 = and i32 %16, 262144
  %cmp12 = icmp eq i32 %and11, 262144
  br i1 %cmp12, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.9
  %17 = load %struct.sv*, %struct.sv** %err, align 8
  %sv_any13 = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 0
  %18 = load i8*, i8** %sv_any13, align 8
  %19 = bitcast i8* %18 to %struct.xpv*
  %xpv_cur14 = getelementptr inbounds %struct.xpv, %struct.xpv* %19, i32 0, i32 1
  %20 = load i64, i64* %xpv_cur14, align 8
  store i64 %20, i64* %n_a, align 8
  %21 = load %struct.sv*, %struct.sv** %err, align 8
  %sv_any15 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 0
  %22 = load i8*, i8** %sv_any15, align 8
  %23 = bitcast i8* %22 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %23, i32 0, i32 0
  %24 = load i8*, i8** %xpv_pv, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then.9
  %25 = load %struct.sv*, %struct.sv** %err, align 8
  %call = call i8* @Perl_sv_2pv_flags(%struct.sv* %25, i64* %n_a, i32 2)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %24, %cond.true ], [ %call, %cond.false ]
  store i8* %cond, i8** %e, align 8
  %26 = load i64, i64* %n_a, align 8
  %27 = load i64, i64* %msglen.addr, align 8
  %sub16 = sub i64 %26, %27
  %28 = load i8*, i8** %e, align 8
  %add.ptr = getelementptr inbounds i8, i8* %28, i64 %sub16
  store i8* %add.ptr, i8** %e, align 8
  %29 = load i8*, i8** %e, align 8
  %30 = load i8, i8* %29, align 1
  %conv = sext i8 %30 to i32
  %31 = load i8*, i8** %message.addr, align 8
  %32 = load i8, i8* %31, align 1
  %conv17 = sext i8 %32 to i32
  %cmp18 = icmp ne i32 %conv, %conv17
  br i1 %cmp18, label %if.then.22, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end
  %33 = load i8*, i8** %e, align 8
  %34 = load i8*, i8** %message.addr, align 8
  %call20 = call i32 @strcmp(i8* %33, i8* %34)
  %tobool21 = icmp ne i32 %call20, 0
  br i1 %tobool21, label %if.then.22, label %if.end

if.then.22:                                       ; preds = %lor.lhs.false, %cond.end
  store i8* null, i8** %e, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.22, %lor.lhs.false
  br label %if.end.23

if.end.23:                                        ; preds = %if.end, %if.else
  br label %if.end.24

if.end.24:                                        ; preds = %if.end.23, %if.then.7
  %35 = load i8*, i8** %e, align 8
  %tobool25 = icmp ne i8* %35, null
  br i1 %tobool25, label %if.end.79, label %if.then.26

if.then.26:                                       ; preds = %if.end.24
  %36 = load %struct.sv*, %struct.sv** %err, align 8
  %sv_any27 = getelementptr inbounds %struct.sv, %struct.sv* %36, i32 0, i32 0
  %37 = load i8*, i8** %sv_any27, align 8
  %38 = bitcast i8* %37 to %struct.xpv*
  %xpv_len = getelementptr inbounds %struct.xpv, %struct.xpv* %38, i32 0, i32 2
  %39 = load i64, i64* %xpv_len, align 8
  %40 = load %struct.sv*, %struct.sv** %err, align 8
  %sv_any28 = getelementptr inbounds %struct.sv, %struct.sv* %40, i32 0, i32 0
  %41 = load i8*, i8** %sv_any28, align 8
  %42 = bitcast i8* %41 to %struct.xpv*
  %xpv_cur29 = getelementptr inbounds %struct.xpv, %struct.xpv* %42, i32 0, i32 1
  %43 = load i64, i64* %xpv_cur29, align 8
  %add30 = add i64 %43, 15
  %44 = load i64, i64* %msglen.addr, align 8
  %add31 = add i64 %add30, %44
  %cmp32 = icmp ult i64 %39, %add31
  br i1 %cmp32, label %cond.true.34, label %cond.false.40

cond.true.34:                                     ; preds = %if.then.26
  %45 = load %struct.sv*, %struct.sv** %err, align 8
  %46 = load %struct.sv*, %struct.sv** %err, align 8
  %sv_any35 = getelementptr inbounds %struct.sv, %struct.sv* %46, i32 0, i32 0
  %47 = load i8*, i8** %sv_any35, align 8
  %48 = bitcast i8* %47 to %struct.xpv*
  %xpv_cur36 = getelementptr inbounds %struct.xpv, %struct.xpv* %48, i32 0, i32 1
  %49 = load i64, i64* %xpv_cur36, align 8
  %add37 = add i64 %49, 15
  %50 = load i64, i64* %msglen.addr, align 8
  %add38 = add i64 %add37, %50
  %call39 = call i8* @Perl_sv_grow(%struct.sv* %45, i64 %add38)
  br label %cond.end.43

cond.false.40:                                    ; preds = %if.then.26
  %51 = load %struct.sv*, %struct.sv** %err, align 8
  %sv_any41 = getelementptr inbounds %struct.sv, %struct.sv* %51, i32 0, i32 0
  %52 = load i8*, i8** %sv_any41, align 8
  %53 = bitcast i8* %52 to %struct.xpv*
  %xpv_pv42 = getelementptr inbounds %struct.xpv, %struct.xpv* %53, i32 0, i32 0
  %54 = load i8*, i8** %xpv_pv42, align 8
  br label %cond.end.43

cond.end.43:                                      ; preds = %cond.false.40, %cond.true.34
  %cond44 = phi i8* [ %call39, %cond.true.34 ], [ %54, %cond.false.40 ]
  %55 = load %struct.sv*, %struct.sv** %err, align 8
  call void @Perl_sv_catpvn_flags(%struct.sv* %55, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @Perl_die_where.prefix, i32 0, i32 0), i64 14, i32 2)
  %56 = load %struct.sv*, %struct.sv** %err, align 8
  %57 = load i8*, i8** %message.addr, align 8
  %58 = load i64, i64* %msglen.addr, align 8
  call void @Perl_sv_catpvn_flags(%struct.sv* %56, i8* %57, i64 %58, i32 2)
  %59 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings = getelementptr inbounds %struct.cop, %struct.cop* %59, i32 0, i32 14
  %60 = load %struct.sv*, %struct.sv** %cop_warnings, align 8
  %cmp45 = icmp ne %struct.sv* %60, null
  br i1 %cmp45, label %land.lhs.true, label %lor.lhs.false.61

land.lhs.true:                                    ; preds = %cond.end.43
  %61 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings47 = getelementptr inbounds %struct.cop, %struct.cop* %61, i32 0, i32 14
  %62 = load %struct.sv*, %struct.sv** %cop_warnings47, align 8
  %cmp48 = icmp ne %struct.sv* %62, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 2)
  br i1 %cmp48, label %land.lhs.true.50, label %lor.lhs.false.61

land.lhs.true.50:                                 ; preds = %land.lhs.true
  %63 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings51 = getelementptr inbounds %struct.cop, %struct.cop* %63, i32 0, i32 14
  %64 = load %struct.sv*, %struct.sv** %cop_warnings51, align 8
  %cmp52 = icmp eq %struct.sv* %64, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 1)
  br i1 %cmp52, label %if.then.69, label %lor.lhs.false.54

lor.lhs.false.54:                                 ; preds = %land.lhs.true.50
  %65 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings55 = getelementptr inbounds %struct.cop, %struct.cop* %65, i32 0, i32 14
  %66 = load %struct.sv*, %struct.sv** %cop_warnings55, align 8
  %sv_any56 = getelementptr inbounds %struct.sv, %struct.sv* %66, i32 0, i32 0
  %67 = load i8*, i8** %sv_any56, align 8
  %68 = bitcast i8* %67 to %struct.xpv*
  %xpv_pv57 = getelementptr inbounds %struct.xpv, %struct.xpv* %68, i32 0, i32 0
  %69 = load i8*, i8** %xpv_pv57, align 8
  %arrayidx = getelementptr inbounds i8, i8* %69, i64 3
  %70 = load i8, i8* %arrayidx, align 1
  %conv58 = sext i8 %70 to i32
  %and59 = and i32 %conv58, 1
  %tobool60 = icmp ne i32 %and59, 0
  br i1 %tobool60, label %if.then.69, label %lor.lhs.false.61

lor.lhs.false.61:                                 ; preds = %lor.lhs.false.54, %land.lhs.true, %cond.end.43
  %71 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings62 = getelementptr inbounds %struct.cop, %struct.cop* %71, i32 0, i32 14
  %72 = load %struct.sv*, %struct.sv** %cop_warnings62, align 8
  %cmp63 = icmp eq %struct.sv* %72, null
  br i1 %cmp63, label %land.lhs.true.65, label %if.end.78

land.lhs.true.65:                                 ; preds = %lor.lhs.false.61
  %73 = load i8, i8* @PL_dowarn, align 1
  %conv66 = zext i8 %73 to i32
  %and67 = and i32 %conv66, 1
  %tobool68 = icmp ne i32 %and67, 0
  br i1 %tobool68, label %if.then.69, label %if.end.78

if.then.69:                                       ; preds = %land.lhs.true.65, %lor.lhs.false.54, %land.lhs.true.50
  %74 = load %struct.sv*, %struct.sv** %err, align 8
  %sv_any70 = getelementptr inbounds %struct.sv, %struct.sv* %74, i32 0, i32 0
  %75 = load i8*, i8** %sv_any70, align 8
  %76 = bitcast i8* %75 to %struct.xpv*
  %xpv_cur71 = getelementptr inbounds %struct.xpv, %struct.xpv* %76, i32 0, i32 1
  %77 = load i64, i64* %xpv_cur71, align 8
  %78 = load i64, i64* %msglen.addr, align 8
  %sub72 = sub i64 %77, %78
  %sub73 = sub i64 %sub72, 15
  %add74 = add i64 %sub73, 1
  store i64 %add74, i64* %start, align 8
  %79 = load %struct.sv*, %struct.sv** %err, align 8
  %sv_any75 = getelementptr inbounds %struct.sv, %struct.sv* %79, i32 0, i32 0
  %80 = load i8*, i8** %sv_any75, align 8
  %81 = bitcast i8* %80 to %struct.xpv*
  %xpv_pv76 = getelementptr inbounds %struct.xpv, %struct.xpv* %81, i32 0, i32 0
  %82 = load i8*, i8** %xpv_pv76, align 8
  %83 = load i64, i64* %start, align 8
  %add.ptr77 = getelementptr inbounds i8, i8* %82, i64 %83
  call void (i32, i8*, ...) @Perl_warner(i32 12, i8* %add.ptr77)
  br label %if.end.78

if.end.78:                                        ; preds = %if.then.69, %land.lhs.true.65, %lor.lhs.false.61
  br label %if.end.79

if.end.79:                                        ; preds = %if.end.78, %if.end.24
  br label %if.end.84

if.else.80:                                       ; preds = %if.then.2
  %84 = load %struct.gv*, %struct.gv** @PL_errgv, align 8
  %sv_any81 = getelementptr inbounds %struct.gv, %struct.gv* %84, i32 0, i32 0
  %85 = load %struct.xpvgv*, %struct.xpvgv** %sv_any81, align 8
  %xgv_gp82 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %85, i32 0, i32 7
  %86 = load %struct.gp*, %struct.gp** %xgv_gp82, align 8
  %gp_sv83 = getelementptr inbounds %struct.gp, %struct.gp* %86, i32 0, i32 0
  %87 = load %struct.sv*, %struct.sv** %gp_sv83, align 8
  %88 = load i8*, i8** %message.addr, align 8
  %89 = load i64, i64* %msglen.addr, align 8
  call void @Perl_sv_setpvn(%struct.sv* %87, i8* %88, i64 %89)
  br label %if.end.84

if.end.84:                                        ; preds = %if.else.80, %if.end.79
  br label %if.end.85

if.end.85:                                        ; preds = %if.end.84, %if.then
  br label %while.cond

while.cond:                                       ; preds = %if.end.120, %if.end.85
  %90 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %90, i32 0, i32 2
  %91 = load i32, i32* %si_cxix, align 4
  %call86 = call i32 @S_dopoptoeval(i32 %91)
  store i32 %call86, i32* %cxix, align 4
  %cmp87 = icmp slt i32 %call86, 0
  br i1 %cmp87, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %92 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_prev = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %92, i32 0, i32 5
  %93 = load %struct.stackinfo*, %struct.stackinfo** %si_prev, align 8
  %tobool89 = icmp ne %struct.stackinfo* %93, null
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %94 = phi i1 [ false, %while.cond ], [ %tobool89, %land.rhs ]
  br i1 %94, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  call void @Perl_dounwind(i32 -1)
  %95 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %95, %struct.sv*** %sp, align 8
  %96 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_prev90 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %96, i32 0, i32 5
  %97 = load %struct.stackinfo*, %struct.stackinfo** %si_prev90, align 8
  store %struct.stackinfo* %97, %struct.stackinfo** %prev, align 8
  %98 = load %struct.stackinfo*, %struct.stackinfo** %prev, align 8
  %tobool91 = icmp ne %struct.stackinfo* %98, null
  br i1 %tobool91, label %if.end.120, label %if.then.92

if.then.92:                                       ; preds = %while.body
  %99 = load %struct.gv*, %struct.gv** @PL_stderrgv, align 8
  %tobool93 = icmp ne %struct.gv* %99, null
  br i1 %tobool93, label %land.lhs.true.94, label %cond.false.115

land.lhs.true.94:                                 ; preds = %if.then.92
  %100 = load %struct.gv*, %struct.gv** @PL_stderrgv, align 8
  %sv_flags95 = getelementptr inbounds %struct.gv, %struct.gv* %100, i32 0, i32 2
  %101 = load i32, i32* %sv_flags95, align 4
  %and96 = and i32 %101, 255
  %cmp97 = icmp eq i32 %and96, 13
  br i1 %cmp97, label %land.lhs.true.99, label %cond.false.115

land.lhs.true.99:                                 ; preds = %land.lhs.true.94
  %102 = load %struct.gv*, %struct.gv** @PL_stderrgv, align 8
  %sv_any100 = getelementptr inbounds %struct.gv, %struct.gv* %102, i32 0, i32 0
  %103 = load %struct.xpvgv*, %struct.xpvgv** %sv_any100, align 8
  %xgv_gp101 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %103, i32 0, i32 7
  %104 = load %struct.gp*, %struct.gp** %xgv_gp101, align 8
  %gp_io = getelementptr inbounds %struct.gp, %struct.gp* %104, i32 0, i32 2
  %105 = load %struct.io*, %struct.io** %gp_io, align 8
  %tobool102 = icmp ne %struct.io* %105, null
  br i1 %tobool102, label %land.lhs.true.103, label %cond.false.115

land.lhs.true.103:                                ; preds = %land.lhs.true.99
  %106 = load %struct.gv*, %struct.gv** @PL_stderrgv, align 8
  %sv_any104 = getelementptr inbounds %struct.gv, %struct.gv* %106, i32 0, i32 0
  %107 = load %struct.xpvgv*, %struct.xpvgv** %sv_any104, align 8
  %xgv_gp105 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %107, i32 0, i32 7
  %108 = load %struct.gp*, %struct.gp** %xgv_gp105, align 8
  %gp_io106 = getelementptr inbounds %struct.gp, %struct.gp* %108, i32 0, i32 2
  %109 = load %struct.io*, %struct.io** %gp_io106, align 8
  %sv_any107 = getelementptr inbounds %struct.io, %struct.io* %109, i32 0, i32 0
  %110 = load %struct.xpvio*, %struct.xpvio** %sv_any107, align 8
  %xio_ofp = getelementptr inbounds %struct.xpvio, %struct.xpvio* %110, i32 0, i32 8
  %111 = load %struct._PerlIO**, %struct._PerlIO*** %xio_ofp, align 8
  %tobool108 = icmp ne %struct._PerlIO** %111, null
  br i1 %tobool108, label %cond.true.109, label %cond.false.115

cond.true.109:                                    ; preds = %land.lhs.true.103
  %112 = load %struct.gv*, %struct.gv** @PL_stderrgv, align 8
  %sv_any110 = getelementptr inbounds %struct.gv, %struct.gv* %112, i32 0, i32 0
  %113 = load %struct.xpvgv*, %struct.xpvgv** %sv_any110, align 8
  %xgv_gp111 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %113, i32 0, i32 7
  %114 = load %struct.gp*, %struct.gp** %xgv_gp111, align 8
  %gp_io112 = getelementptr inbounds %struct.gp, %struct.gp* %114, i32 0, i32 2
  %115 = load %struct.io*, %struct.io** %gp_io112, align 8
  %sv_any113 = getelementptr inbounds %struct.io, %struct.io* %115, i32 0, i32 0
  %116 = load %struct.xpvio*, %struct.xpvio** %sv_any113, align 8
  %xio_ofp114 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %116, i32 0, i32 8
  %117 = load %struct._PerlIO**, %struct._PerlIO*** %xio_ofp114, align 8
  br label %cond.end.117

cond.false.115:                                   ; preds = %land.lhs.true.103, %land.lhs.true.99, %land.lhs.true.94, %if.then.92
  %call116 = call %struct._PerlIO** @Perl_PerlIO_stderr()
  br label %cond.end.117

cond.end.117:                                     ; preds = %cond.false.115, %cond.true.109
  %cond118 = phi %struct._PerlIO** [ %117, %cond.true.109 ], [ %call116, %cond.false.115 ]
  %call119 = call i32 (%struct._PerlIO**, i8*, ...) @PerlIO_printf(%struct._PerlIO** %cond118, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.16, i32 0, i32 0))
  call void @Perl_my_exit(i32 1)
  br label %if.end.120

if.end.120:                                       ; preds = %cond.end.117, %while.body
  %118 = load %struct.sv**, %struct.sv*** %sp, align 8
  %119 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %118 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %119 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %120 = load %struct.av*, %struct.av** @PL_curstack, align 8
  %sv_any121 = getelementptr inbounds %struct.av, %struct.av* %120, i32 0, i32 0
  %121 = load %struct.xpvav*, %struct.xpvav** %sv_any121, align 8
  %xav_fill = getelementptr inbounds %struct.xpvav, %struct.xpvav* %121, i32 0, i32 1
  store i64 %sub.ptr.div, i64* %xav_fill, align 8
  %122 = load %struct.stackinfo*, %struct.stackinfo** %prev, align 8
  %si_stack = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %122, i32 0, i32 0
  %123 = load %struct.av*, %struct.av** %si_stack, align 8
  %sv_any122 = getelementptr inbounds %struct.av, %struct.av* %123, i32 0, i32 0
  %124 = load %struct.xpvav*, %struct.xpvav** %sv_any122, align 8
  %xav_array = getelementptr inbounds %struct.xpvav, %struct.xpvav* %124, i32 0, i32 0
  %125 = load i8*, i8** %xav_array, align 8
  %126 = bitcast i8* %125 to %struct.sv**
  store %struct.sv** %126, %struct.sv*** @PL_stack_base, align 8
  %127 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %128 = load %struct.stackinfo*, %struct.stackinfo** %prev, align 8
  %si_stack123 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %128, i32 0, i32 0
  %129 = load %struct.av*, %struct.av** %si_stack123, align 8
  %sv_any124 = getelementptr inbounds %struct.av, %struct.av* %129, i32 0, i32 0
  %130 = load %struct.xpvav*, %struct.xpvav** %sv_any124, align 8
  %xav_max = getelementptr inbounds %struct.xpvav, %struct.xpvav* %130, i32 0, i32 2
  %131 = load i64, i64* %xav_max, align 8
  %add.ptr125 = getelementptr inbounds %struct.sv*, %struct.sv** %127, i64 %131
  store %struct.sv** %add.ptr125, %struct.sv*** @PL_stack_max, align 8
  %132 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %133 = load %struct.stackinfo*, %struct.stackinfo** %prev, align 8
  %si_stack126 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %133, i32 0, i32 0
  %134 = load %struct.av*, %struct.av** %si_stack126, align 8
  %sv_any127 = getelementptr inbounds %struct.av, %struct.av* %134, i32 0, i32 0
  %135 = load %struct.xpvav*, %struct.xpvav** %sv_any127, align 8
  %xav_fill128 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %135, i32 0, i32 1
  %136 = load i64, i64* %xav_fill128, align 8
  %add.ptr129 = getelementptr inbounds %struct.sv*, %struct.sv** %132, i64 %136
  store %struct.sv** %add.ptr129, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %add.ptr129, %struct.sv*** %sp, align 8
  %137 = load %struct.stackinfo*, %struct.stackinfo** %prev, align 8
  %si_stack130 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %137, i32 0, i32 0
  %138 = load %struct.av*, %struct.av** %si_stack130, align 8
  store %struct.av* %138, %struct.av** @PL_curstack, align 8
  store %struct.av* %138, %struct.av** %tmp
  %139 = load %struct.av*, %struct.av** %tmp
  %140 = load %struct.stackinfo*, %struct.stackinfo** %prev, align 8
  store %struct.stackinfo* %140, %struct.stackinfo** @PL_curstackinfo, align 8
  store %struct.stackinfo* %140, %struct.stackinfo** %tmp131
  %141 = load %struct.stackinfo*, %struct.stackinfo** %tmp131
  br label %while.cond

while.end:                                        ; preds = %land.end
  %142 = load i32, i32* %cxix, align 4
  %cmp132 = icmp sge i32 %142, 0
  br i1 %cmp132, label %if.then.134, label %if.end.300

if.then.134:                                      ; preds = %while.end
  %143 = load i32, i32* %cxix, align 4
  %144 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix136 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %144, i32 0, i32 2
  %145 = load i32, i32* %si_cxix136, align 4
  %cmp137 = icmp slt i32 %143, %145
  br i1 %cmp137, label %if.then.139, label %if.end.140

if.then.139:                                      ; preds = %if.then.134
  %146 = load i32, i32* %cxix, align 4
  call void @Perl_dounwind(i32 %146)
  br label %if.end.140

if.end.140:                                       ; preds = %if.then.139, %if.then.134
  %147 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix141 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %147, i32 0, i32 2
  %148 = load i32, i32* %si_cxix141, align 4
  %dec = add nsw i32 %148, -1
  store i32 %dec, i32* %si_cxix141, align 4
  %idxprom = sext i32 %148 to i64
  %149 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxstack = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %149, i32 0, i32 1
  %150 = load %struct.context*, %struct.context** %si_cxstack, align 8
  %arrayidx142 = getelementptr inbounds %struct.context, %struct.context* %150, i64 %idxprom
  store %struct.context* %arrayidx142, %struct.context** %cx, align 8
  %151 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %152 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u = getelementptr inbounds %struct.context, %struct.context* %152, i32 0, i32 1
  %cx_blk = bitcast %union.anon* %cx_u to %struct.block*
  %blku_oldsp = getelementptr inbounds %struct.block, %struct.block* %cx_blk, i32 0, i32 0
  %153 = load i32, i32* %blku_oldsp, align 4
  %idx.ext = sext i32 %153 to i64
  %add.ptr143 = getelementptr inbounds %struct.sv*, %struct.sv** %151, i64 %idx.ext
  store %struct.sv** %add.ptr143, %struct.sv*** %newsp, align 8
  %154 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u144 = getelementptr inbounds %struct.context, %struct.context* %154, i32 0, i32 1
  %cx_blk145 = bitcast %union.anon* %cx_u144 to %struct.block*
  %blku_oldcop = getelementptr inbounds %struct.block, %struct.block* %cx_blk145, i32 0, i32 1
  %155 = load %struct.cop*, %struct.cop** %blku_oldcop, align 8
  store volatile %struct.cop* %155, %struct.cop** @PL_curcop, align 8
  %156 = load i32*, i32** @PL_markstack, align 8
  %157 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u146 = getelementptr inbounds %struct.context, %struct.context* %157, i32 0, i32 1
  %cx_blk147 = bitcast %union.anon* %cx_u146 to %struct.block*
  %blku_oldmarksp = getelementptr inbounds %struct.block, %struct.block* %cx_blk147, i32 0, i32 3
  %158 = load i32, i32* %blku_oldmarksp, align 4
  %idx.ext148 = sext i32 %158 to i64
  %add.ptr149 = getelementptr inbounds i32, i32* %156, i64 %idx.ext148
  store i32* %add.ptr149, i32** @PL_markstack_ptr, align 8
  %159 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u150 = getelementptr inbounds %struct.context, %struct.context* %159, i32 0, i32 1
  %cx_blk151 = bitcast %union.anon* %cx_u150 to %struct.block*
  %blku_oldscopesp = getelementptr inbounds %struct.block, %struct.block* %cx_blk151, i32 0, i32 4
  %160 = load i32, i32* %blku_oldscopesp, align 4
  store i32 %160, i32* @PL_scopestack_ix, align 4
  %161 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u152 = getelementptr inbounds %struct.context, %struct.context* %161, i32 0, i32 1
  %cx_blk153 = bitcast %union.anon* %cx_u152 to %struct.block*
  %blku_oldretsp = getelementptr inbounds %struct.block, %struct.block* %cx_blk153, i32 0, i32 2
  %162 = load i32, i32* %blku_oldretsp, align 4
  store i32 %162, i32* @PL_retstack_ix, align 4
  %163 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u154 = getelementptr inbounds %struct.context, %struct.context* %163, i32 0, i32 1
  %cx_blk155 = bitcast %union.anon* %cx_u154 to %struct.block*
  %blku_oldpm = getelementptr inbounds %struct.block, %struct.block* %cx_blk155, i32 0, i32 5
  %164 = load %struct.pmop*, %struct.pmop** %blku_oldpm, align 8
  store %struct.pmop* %164, %struct.pmop** @PL_curpm, align 8
  %165 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u156 = getelementptr inbounds %struct.context, %struct.context* %165, i32 0, i32 1
  %cx_blk157 = bitcast %union.anon* %cx_u156 to %struct.block*
  %blku_gimme = getelementptr inbounds %struct.block, %struct.block* %cx_blk157, i32 0, i32 6
  %166 = load i8, i8* %blku_gimme, align 1
  %conv158 = zext i8 %166 to i32
  store i32 %conv158, i32* %gimme, align 4
  %167 = load %struct.context*, %struct.context** %cx, align 8
  %cx_type = getelementptr inbounds %struct.context, %struct.context* %167, i32 0, i32 0
  %168 = load i32, i32* %cx_type, align 4
  %and159 = and i32 %168, 255
  %cmp160 = icmp ne i32 %and159, 2
  br i1 %cmp160, label %if.then.162, label %if.end.240

if.then.162:                                      ; preds = %if.end.140
  %169 = load i8*, i8** %message.addr, align 8
  %tobool163 = icmp ne i8* %169, null
  br i1 %tobool163, label %if.end.181, label %if.then.164

if.then.164:                                      ; preds = %if.then.162
  %170 = load %struct.gv*, %struct.gv** @PL_errgv, align 8
  %sv_any165 = getelementptr inbounds %struct.gv, %struct.gv* %170, i32 0, i32 0
  %171 = load %struct.xpvgv*, %struct.xpvgv** %sv_any165, align 8
  %xgv_gp166 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %171, i32 0, i32 7
  %172 = load %struct.gp*, %struct.gp** %xgv_gp166, align 8
  %gp_sv167 = getelementptr inbounds %struct.gp, %struct.gp* %172, i32 0, i32 0
  %173 = load %struct.sv*, %struct.sv** %gp_sv167, align 8
  store %struct.sv* %173, %struct.sv** @PL_Sv, align 8
  %174 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags168 = getelementptr inbounds %struct.sv, %struct.sv* %174, i32 0, i32 2
  %175 = load i32, i32* %sv_flags168, align 4
  %and169 = and i32 %175, 262144
  %cmp170 = icmp eq i32 %and169, 262144
  br i1 %cmp170, label %cond.true.172, label %cond.false.177

cond.true.172:                                    ; preds = %if.then.164
  %176 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any173 = getelementptr inbounds %struct.sv, %struct.sv* %176, i32 0, i32 0
  %177 = load i8*, i8** %sv_any173, align 8
  %178 = bitcast i8* %177 to %struct.xpv*
  %xpv_cur174 = getelementptr inbounds %struct.xpv, %struct.xpv* %178, i32 0, i32 1
  %179 = load i64, i64* %xpv_cur174, align 8
  store i64 %179, i64* %msglen.addr, align 8
  %180 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any175 = getelementptr inbounds %struct.sv, %struct.sv* %180, i32 0, i32 0
  %181 = load i8*, i8** %sv_any175, align 8
  %182 = bitcast i8* %181 to %struct.xpv*
  %xpv_pv176 = getelementptr inbounds %struct.xpv, %struct.xpv* %182, i32 0, i32 0
  %183 = load i8*, i8** %xpv_pv176, align 8
  br label %cond.end.179

cond.false.177:                                   ; preds = %if.then.164
  %184 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %call178 = call i8* @Perl_sv_2pv_flags(%struct.sv* %184, i64* %msglen.addr, i32 2)
  br label %cond.end.179

cond.end.179:                                     ; preds = %cond.false.177, %cond.true.172
  %cond180 = phi i8* [ %183, %cond.true.172 ], [ %call178, %cond.false.177 ]
  store i8* %cond180, i8** %message.addr, align 8
  br label %if.end.181

if.end.181:                                       ; preds = %cond.end.179, %if.then.162
  %185 = load %struct.gv*, %struct.gv** @PL_stderrgv, align 8
  %tobool182 = icmp ne %struct.gv* %185, null
  br i1 %tobool182, label %land.lhs.true.183, label %cond.false.206

land.lhs.true.183:                                ; preds = %if.end.181
  %186 = load %struct.gv*, %struct.gv** @PL_stderrgv, align 8
  %sv_flags184 = getelementptr inbounds %struct.gv, %struct.gv* %186, i32 0, i32 2
  %187 = load i32, i32* %sv_flags184, align 4
  %and185 = and i32 %187, 255
  %cmp186 = icmp eq i32 %and185, 13
  br i1 %cmp186, label %land.lhs.true.188, label %cond.false.206

land.lhs.true.188:                                ; preds = %land.lhs.true.183
  %188 = load %struct.gv*, %struct.gv** @PL_stderrgv, align 8
  %sv_any189 = getelementptr inbounds %struct.gv, %struct.gv* %188, i32 0, i32 0
  %189 = load %struct.xpvgv*, %struct.xpvgv** %sv_any189, align 8
  %xgv_gp190 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %189, i32 0, i32 7
  %190 = load %struct.gp*, %struct.gp** %xgv_gp190, align 8
  %gp_io191 = getelementptr inbounds %struct.gp, %struct.gp* %190, i32 0, i32 2
  %191 = load %struct.io*, %struct.io** %gp_io191, align 8
  %tobool192 = icmp ne %struct.io* %191, null
  br i1 %tobool192, label %land.lhs.true.193, label %cond.false.206

land.lhs.true.193:                                ; preds = %land.lhs.true.188
  %192 = load %struct.gv*, %struct.gv** @PL_stderrgv, align 8
  %sv_any194 = getelementptr inbounds %struct.gv, %struct.gv* %192, i32 0, i32 0
  %193 = load %struct.xpvgv*, %struct.xpvgv** %sv_any194, align 8
  %xgv_gp195 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %193, i32 0, i32 7
  %194 = load %struct.gp*, %struct.gp** %xgv_gp195, align 8
  %gp_io196 = getelementptr inbounds %struct.gp, %struct.gp* %194, i32 0, i32 2
  %195 = load %struct.io*, %struct.io** %gp_io196, align 8
  %sv_any197 = getelementptr inbounds %struct.io, %struct.io* %195, i32 0, i32 0
  %196 = load %struct.xpvio*, %struct.xpvio** %sv_any197, align 8
  %xio_ofp198 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %196, i32 0, i32 8
  %197 = load %struct._PerlIO**, %struct._PerlIO*** %xio_ofp198, align 8
  %tobool199 = icmp ne %struct._PerlIO** %197, null
  br i1 %tobool199, label %cond.true.200, label %cond.false.206

cond.true.200:                                    ; preds = %land.lhs.true.193
  %198 = load %struct.gv*, %struct.gv** @PL_stderrgv, align 8
  %sv_any201 = getelementptr inbounds %struct.gv, %struct.gv* %198, i32 0, i32 0
  %199 = load %struct.xpvgv*, %struct.xpvgv** %sv_any201, align 8
  %xgv_gp202 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %199, i32 0, i32 7
  %200 = load %struct.gp*, %struct.gp** %xgv_gp202, align 8
  %gp_io203 = getelementptr inbounds %struct.gp, %struct.gp* %200, i32 0, i32 2
  %201 = load %struct.io*, %struct.io** %gp_io203, align 8
  %sv_any204 = getelementptr inbounds %struct.io, %struct.io* %201, i32 0, i32 0
  %202 = load %struct.xpvio*, %struct.xpvio** %sv_any204, align 8
  %xio_ofp205 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %202, i32 0, i32 8
  %203 = load %struct._PerlIO**, %struct._PerlIO*** %xio_ofp205, align 8
  br label %cond.end.208

cond.false.206:                                   ; preds = %land.lhs.true.193, %land.lhs.true.188, %land.lhs.true.183, %if.end.181
  %call207 = call %struct._PerlIO** @Perl_PerlIO_stderr()
  br label %cond.end.208

cond.end.208:                                     ; preds = %cond.false.206, %cond.true.200
  %cond209 = phi %struct._PerlIO** [ %203, %cond.true.200 ], [ %call207, %cond.false.206 ]
  %call210 = call i64 @Perl_PerlIO_write(%struct._PerlIO** %cond209, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.17, i32 0, i32 0), i64 11)
  %204 = load %struct.gv*, %struct.gv** @PL_stderrgv, align 8
  %tobool211 = icmp ne %struct.gv* %204, null
  br i1 %tobool211, label %land.lhs.true.212, label %cond.false.235

land.lhs.true.212:                                ; preds = %cond.end.208
  %205 = load %struct.gv*, %struct.gv** @PL_stderrgv, align 8
  %sv_flags213 = getelementptr inbounds %struct.gv, %struct.gv* %205, i32 0, i32 2
  %206 = load i32, i32* %sv_flags213, align 4
  %and214 = and i32 %206, 255
  %cmp215 = icmp eq i32 %and214, 13
  br i1 %cmp215, label %land.lhs.true.217, label %cond.false.235

land.lhs.true.217:                                ; preds = %land.lhs.true.212
  %207 = load %struct.gv*, %struct.gv** @PL_stderrgv, align 8
  %sv_any218 = getelementptr inbounds %struct.gv, %struct.gv* %207, i32 0, i32 0
  %208 = load %struct.xpvgv*, %struct.xpvgv** %sv_any218, align 8
  %xgv_gp219 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %208, i32 0, i32 7
  %209 = load %struct.gp*, %struct.gp** %xgv_gp219, align 8
  %gp_io220 = getelementptr inbounds %struct.gp, %struct.gp* %209, i32 0, i32 2
  %210 = load %struct.io*, %struct.io** %gp_io220, align 8
  %tobool221 = icmp ne %struct.io* %210, null
  br i1 %tobool221, label %land.lhs.true.222, label %cond.false.235

land.lhs.true.222:                                ; preds = %land.lhs.true.217
  %211 = load %struct.gv*, %struct.gv** @PL_stderrgv, align 8
  %sv_any223 = getelementptr inbounds %struct.gv, %struct.gv* %211, i32 0, i32 0
  %212 = load %struct.xpvgv*, %struct.xpvgv** %sv_any223, align 8
  %xgv_gp224 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %212, i32 0, i32 7
  %213 = load %struct.gp*, %struct.gp** %xgv_gp224, align 8
  %gp_io225 = getelementptr inbounds %struct.gp, %struct.gp* %213, i32 0, i32 2
  %214 = load %struct.io*, %struct.io** %gp_io225, align 8
  %sv_any226 = getelementptr inbounds %struct.io, %struct.io* %214, i32 0, i32 0
  %215 = load %struct.xpvio*, %struct.xpvio** %sv_any226, align 8
  %xio_ofp227 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %215, i32 0, i32 8
  %216 = load %struct._PerlIO**, %struct._PerlIO*** %xio_ofp227, align 8
  %tobool228 = icmp ne %struct._PerlIO** %216, null
  br i1 %tobool228, label %cond.true.229, label %cond.false.235

cond.true.229:                                    ; preds = %land.lhs.true.222
  %217 = load %struct.gv*, %struct.gv** @PL_stderrgv, align 8
  %sv_any230 = getelementptr inbounds %struct.gv, %struct.gv* %217, i32 0, i32 0
  %218 = load %struct.xpvgv*, %struct.xpvgv** %sv_any230, align 8
  %xgv_gp231 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %218, i32 0, i32 7
  %219 = load %struct.gp*, %struct.gp** %xgv_gp231, align 8
  %gp_io232 = getelementptr inbounds %struct.gp, %struct.gp* %219, i32 0, i32 2
  %220 = load %struct.io*, %struct.io** %gp_io232, align 8
  %sv_any233 = getelementptr inbounds %struct.io, %struct.io* %220, i32 0, i32 0
  %221 = load %struct.xpvio*, %struct.xpvio** %sv_any233, align 8
  %xio_ofp234 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %221, i32 0, i32 8
  %222 = load %struct._PerlIO**, %struct._PerlIO*** %xio_ofp234, align 8
  br label %cond.end.237

cond.false.235:                                   ; preds = %land.lhs.true.222, %land.lhs.true.217, %land.lhs.true.212, %cond.end.208
  %call236 = call %struct._PerlIO** @Perl_PerlIO_stderr()
  br label %cond.end.237

cond.end.237:                                     ; preds = %cond.false.235, %cond.true.229
  %cond238 = phi %struct._PerlIO** [ %222, %cond.true.229 ], [ %call236, %cond.false.235 ]
  %223 = load i8*, i8** %message.addr, align 8
  %224 = load i64, i64* %msglen.addr, align 8
  %call239 = call i64 @Perl_PerlIO_write(%struct._PerlIO** %cond238, i8* %223, i64 %224)
  call void @Perl_my_exit(i32 1)
  br label %if.end.240

if.end.240:                                       ; preds = %cond.end.237, %if.end.140
  %225 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u241 = getelementptr inbounds %struct.context, %struct.context* %225, i32 0, i32 1
  %cx_blk242 = bitcast %union.anon* %cx_u241 to %struct.block*
  %blk_u = getelementptr inbounds %struct.block, %struct.block* %cx_blk242, i32 0, i32 7
  %blku_eval = bitcast %union.anon.1* %blk_u to %struct.block_eval*
  %old_in_eval = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval, i32 0, i32 0
  %226 = load i32, i32* %old_in_eval, align 4
  store volatile i32 %226, i32* @PL_in_eval, align 4
  %227 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u243 = getelementptr inbounds %struct.context, %struct.context* %227, i32 0, i32 1
  %cx_blk244 = bitcast %union.anon* %cx_u243 to %struct.block*
  %blk_u245 = getelementptr inbounds %struct.block, %struct.block* %cx_blk244, i32 0, i32 7
  %blku_eval246 = bitcast %union.anon.1* %blk_u245 to %struct.block_eval*
  %old_op_type = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval246, i32 0, i32 1
  %228 = load i32, i32* %old_op_type, align 4
  store i32 %228, i32* %optype, align 4
  %229 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u247 = getelementptr inbounds %struct.context, %struct.context* %229, i32 0, i32 1
  %cx_blk248 = bitcast %union.anon* %cx_u247 to %struct.block*
  %blk_u249 = getelementptr inbounds %struct.block, %struct.block* %cx_blk248, i32 0, i32 7
  %blku_eval250 = bitcast %union.anon.1* %blk_u249 to %struct.block_eval*
  %old_eval_root = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval250, i32 0, i32 3
  %230 = load %struct.op*, %struct.op** %old_eval_root, align 8
  store %struct.op* %230, %struct.op** @PL_eval_root, align 8
  %231 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u251 = getelementptr inbounds %struct.context, %struct.context* %231, i32 0, i32 1
  %cx_blk252 = bitcast %union.anon* %cx_u251 to %struct.block*
  %blk_u253 = getelementptr inbounds %struct.block, %struct.block* %cx_blk252, i32 0, i32 7
  %blku_eval254 = bitcast %union.anon.1* %blk_u253 to %struct.block_eval*
  %old_namesv = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval254, i32 0, i32 2
  %232 = load %struct.sv*, %struct.sv** %old_namesv, align 8
  %tobool255 = icmp ne %struct.sv* %232, null
  br i1 %tobool255, label %if.then.256, label %if.end.263

if.then.256:                                      ; preds = %if.end.240
  %233 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u257 = getelementptr inbounds %struct.context, %struct.context* %233, i32 0, i32 1
  %cx_blk258 = bitcast %union.anon* %cx_u257 to %struct.block*
  %blk_u259 = getelementptr inbounds %struct.block, %struct.block* %cx_blk258, i32 0, i32 7
  %blku_eval260 = bitcast %union.anon.1* %blk_u259 to %struct.block_eval*
  %old_namesv261 = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval260, i32 0, i32 2
  %234 = load %struct.sv*, %struct.sv** %old_namesv261, align 8
  %call262 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %234)
  br label %if.end.263

if.end.263:                                       ; preds = %if.then.256, %if.end.240
  %235 = load i32, i32* %gimme, align 4
  %cmp264 = icmp eq i32 %235, 0
  br i1 %cmp264, label %if.then.266, label %if.end.267

if.then.266:                                      ; preds = %if.end.263
  %236 = load %struct.sv**, %struct.sv*** %newsp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %236, i32 1
  store %struct.sv** %incdec.ptr, %struct.sv*** %newsp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %incdec.ptr, align 8
  br label %if.end.267

if.end.267:                                       ; preds = %if.then.266, %if.end.263
  %237 = load %struct.sv**, %struct.sv*** %newsp, align 8
  store %struct.sv** %237, %struct.sv*** @PL_stack_sp, align 8
  call void @Perl_pop_scope()
  %238 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u268 = getelementptr inbounds %struct.context, %struct.context* %238, i32 0, i32 1
  %cx_blk269 = bitcast %union.anon* %cx_u268 to %struct.block*
  %blku_oldcop270 = getelementptr inbounds %struct.block, %struct.block* %cx_blk269, i32 0, i32 1
  %239 = load %struct.cop*, %struct.cop** %blku_oldcop270, align 8
  store volatile %struct.cop* %239, %struct.cop** @PL_curcop, align 8
  %240 = load i32, i32* %optype, align 4
  %cmp271 = icmp eq i32 %240, 309
  br i1 %cmp271, label %if.then.273, label %if.end.298

if.then.273:                                      ; preds = %if.end.267
  %241 = load %struct.gv*, %struct.gv** @PL_errgv, align 8
  %sv_any275 = getelementptr inbounds %struct.gv, %struct.gv* %241, i32 0, i32 0
  %242 = load %struct.xpvgv*, %struct.xpvgv** %sv_any275, align 8
  %xgv_gp276 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %242, i32 0, i32 7
  %243 = load %struct.gp*, %struct.gp** %xgv_gp276, align 8
  %gp_sv277 = getelementptr inbounds %struct.gp, %struct.gp* %243, i32 0, i32 0
  %244 = load %struct.sv*, %struct.sv** %gp_sv277, align 8
  store %struct.sv* %244, %struct.sv** @PL_Sv, align 8
  %245 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags278 = getelementptr inbounds %struct.sv, %struct.sv* %245, i32 0, i32 2
  %246 = load i32, i32* %sv_flags278, align 4
  %and279 = and i32 %246, 262144
  %cmp280 = icmp eq i32 %and279, 262144
  br i1 %cmp280, label %cond.true.282, label %cond.false.287

cond.true.282:                                    ; preds = %if.then.273
  %247 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any283 = getelementptr inbounds %struct.sv, %struct.sv* %247, i32 0, i32 0
  %248 = load i8*, i8** %sv_any283, align 8
  %249 = bitcast i8* %248 to %struct.xpv*
  %xpv_cur284 = getelementptr inbounds %struct.xpv, %struct.xpv* %249, i32 0, i32 1
  %250 = load i64, i64* %xpv_cur284, align 8
  store i64 %250, i64* %n_a, align 8
  %251 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any285 = getelementptr inbounds %struct.sv, %struct.sv* %251, i32 0, i32 0
  %252 = load i8*, i8** %sv_any285, align 8
  %253 = bitcast i8* %252 to %struct.xpv*
  %xpv_pv286 = getelementptr inbounds %struct.xpv, %struct.xpv* %253, i32 0, i32 0
  %254 = load i8*, i8** %xpv_pv286, align 8
  br label %cond.end.289

cond.false.287:                                   ; preds = %if.then.273
  %255 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %call288 = call i8* @Perl_sv_2pv_flags(%struct.sv* %255, i64* %n_a, i32 2)
  br label %cond.end.289

cond.end.289:                                     ; preds = %cond.false.287, %cond.true.282
  %cond290 = phi i8* [ %254, %cond.true.282 ], [ %call288, %cond.false.287 ]
  store i8* %cond290, i8** %msg, align 8
  %256 = load i8*, i8** %msg, align 8
  %257 = load i8, i8* %256, align 1
  %conv291 = sext i8 %257 to i32
  %tobool292 = icmp ne i32 %conv291, 0
  br i1 %tobool292, label %cond.true.293, label %cond.false.294

cond.true.293:                                    ; preds = %cond.end.289
  %258 = load i8*, i8** %msg, align 8
  br label %cond.end.295

cond.false.294:                                   ; preds = %cond.end.289
  br label %cond.end.295

cond.end.295:                                     ; preds = %cond.false.294, %cond.true.293
  %cond296 = phi i8* [ %258, %cond.true.293 ], [ getelementptr inbounds ([15 x i8], [15 x i8]* @.str.19, i32 0, i32 0), %cond.false.294 ]
  %call297 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.18, i32 0, i32 0), i8* %cond296)
  store %struct.op* %call297, %struct.op** %retval
  br label %return

if.end.298:                                       ; preds = %if.end.267
  %call299 = call %struct.op* @Perl_pop_return()
  store %struct.op* %call299, %struct.op** %retval
  br label %return

if.end.300:                                       ; preds = %while.end
  br label %if.end.301

if.end.301:                                       ; preds = %if.end.300, %entry
  %259 = load i8*, i8** %message.addr, align 8
  %tobool302 = icmp ne i8* %259, null
  br i1 %tobool302, label %if.end.320, label %if.then.303

if.then.303:                                      ; preds = %if.end.301
  %260 = load %struct.gv*, %struct.gv** @PL_errgv, align 8
  %sv_any304 = getelementptr inbounds %struct.gv, %struct.gv* %260, i32 0, i32 0
  %261 = load %struct.xpvgv*, %struct.xpvgv** %sv_any304, align 8
  %xgv_gp305 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %261, i32 0, i32 7
  %262 = load %struct.gp*, %struct.gp** %xgv_gp305, align 8
  %gp_sv306 = getelementptr inbounds %struct.gp, %struct.gp* %262, i32 0, i32 0
  %263 = load %struct.sv*, %struct.sv** %gp_sv306, align 8
  store %struct.sv* %263, %struct.sv** @PL_Sv, align 8
  %264 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags307 = getelementptr inbounds %struct.sv, %struct.sv* %264, i32 0, i32 2
  %265 = load i32, i32* %sv_flags307, align 4
  %and308 = and i32 %265, 262144
  %cmp309 = icmp eq i32 %and308, 262144
  br i1 %cmp309, label %cond.true.311, label %cond.false.316

cond.true.311:                                    ; preds = %if.then.303
  %266 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any312 = getelementptr inbounds %struct.sv, %struct.sv* %266, i32 0, i32 0
  %267 = load i8*, i8** %sv_any312, align 8
  %268 = bitcast i8* %267 to %struct.xpv*
  %xpv_cur313 = getelementptr inbounds %struct.xpv, %struct.xpv* %268, i32 0, i32 1
  %269 = load i64, i64* %xpv_cur313, align 8
  store i64 %269, i64* %msglen.addr, align 8
  %270 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any314 = getelementptr inbounds %struct.sv, %struct.sv* %270, i32 0, i32 0
  %271 = load i8*, i8** %sv_any314, align 8
  %272 = bitcast i8* %271 to %struct.xpv*
  %xpv_pv315 = getelementptr inbounds %struct.xpv, %struct.xpv* %272, i32 0, i32 0
  %273 = load i8*, i8** %xpv_pv315, align 8
  br label %cond.end.318

cond.false.316:                                   ; preds = %if.then.303
  %274 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %call317 = call i8* @Perl_sv_2pv_flags(%struct.sv* %274, i64* %msglen.addr, i32 2)
  br label %cond.end.318

cond.end.318:                                     ; preds = %cond.false.316, %cond.true.311
  %cond319 = phi i8* [ %273, %cond.true.311 ], [ %call317, %cond.false.316 ]
  store i8* %cond319, i8** %message.addr, align 8
  br label %if.end.320

if.end.320:                                       ; preds = %cond.end.318, %if.end.301
  %275 = load i8*, i8** %message.addr, align 8
  %276 = load i64, i64* %msglen.addr, align 8
  %conv321 = trunc i64 %276 to i32
  call void @Perl_write_to_stderr(i8* %275, i32 %conv321)
  call void @Perl_my_failure_exit()
  store %struct.op* null, %struct.op** %retval
  br label %return

return:                                           ; preds = %if.end.320, %if.end.298, %cond.end.295
  %277 = load %struct.op*, %struct.op** %retval
  ret %struct.op* %277
}

; Function Attrs: nounwind uwtable
define internal i32 @S_dopoptoeval(i32 %startingblock) #0 {
entry:
  %retval = alloca i32, align 4
  %startingblock.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %cx = alloca %struct.context*, align 8
  store i32 %startingblock, i32* %startingblock.addr, align 4
  %0 = load i32, i32* %startingblock.addr, align 4
  store i32 %0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp sge i32 %1, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %idxprom = sext i32 %2 to i64
  %3 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxstack = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %3, i32 0, i32 1
  %4 = load %struct.context*, %struct.context** %si_cxstack, align 8
  %arrayidx = getelementptr inbounds %struct.context, %struct.context* %4, i64 %idxprom
  store %struct.context* %arrayidx, %struct.context** %cx, align 8
  %5 = load %struct.context*, %struct.context** %cx, align 8
  %cx_type = getelementptr inbounds %struct.context, %struct.context* %5, i32 0, i32 0
  %6 = load i32, i32* %cx_type, align 4
  %and = and i32 %6, 255
  switch i32 %and, label %sw.default [
    i32 2, label %sw.bb
  ]

sw.default:                                       ; preds = %for.body
  br label %for.inc

sw.bb:                                            ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  store i32 %7, i32* %retval
  br label %return

for.inc:                                          ; preds = %sw.default
  %8 = load i32, i32* %i, align 4
  %dec = add nsw i32 %8, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %9 = load i32, i32* %i, align 4
  store i32 %9, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %sw.bb
  %10 = load i32, i32* %retval
  ret i32 %10
}

declare i32 @PerlIO_printf(%struct._PerlIO**, i8*, ...) #1

declare %struct._PerlIO** @Perl_PerlIO_stderr() #1

declare void @Perl_my_exit(i32) #1

declare i64 @Perl_PerlIO_write(%struct._PerlIO**, i8*, i64) #1

declare %struct.op* @Perl_pop_return() #1

declare void @Perl_write_to_stderr(i8*, i32) #1

declare void @Perl_my_failure_exit() #1

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_xor() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %right = alloca %struct.sv*, align 8
  %left = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %2 = load %struct.sv*, %struct.sv** %1, align 8
  store %struct.sv* %2, %struct.sv** %right, align 8
  %3 = load %struct.sv**, %struct.sv*** %sp, align 8
  %4 = load %struct.sv*, %struct.sv** %3, align 8
  store %struct.sv* %4, %struct.sv** %left, align 8
  %5 = load %struct.sv*, %struct.sv** %left, align 8
  %tobool = icmp ne %struct.sv* %5, null
  br i1 %tobool, label %cond.false, label %cond.true

cond.true:                                        ; preds = %entry
  br label %cond.end.33

cond.false:                                       ; preds = %entry
  %6 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 2
  %7 = load i32, i32* %sv_flags, align 4
  %and = and i32 %7, 262144
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %cond.true.2, label %cond.false.10

cond.true.2:                                      ; preds = %cond.false
  %8 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 0
  %9 = load i8*, i8** %sv_any, align 8
  %10 = bitcast i8* %9 to %struct.xpv*
  store %struct.xpv* %10, %struct.xpv** @PL_Xpv, align 8
  %tobool3 = icmp ne %struct.xpv* %10, null
  br i1 %tobool3, label %land.rhs, label %land.end.9

land.rhs:                                         ; preds = %cond.true.2
  %11 = load %struct.xpv*, %struct.xpv** @PL_Xpv, align 8
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %11, i32 0, i32 1
  %12 = load i64, i64* %xpv_cur, align 8
  %cmp = icmp ugt i64 %12, 1
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs
  %13 = load %struct.xpv*, %struct.xpv** @PL_Xpv, align 8
  %xpv_cur4 = getelementptr inbounds %struct.xpv, %struct.xpv* %13, i32 0, i32 1
  %14 = load i64, i64* %xpv_cur4, align 8
  %tobool5 = icmp ne i64 %14, 0
  br i1 %tobool5, label %land.rhs.6, label %land.end

land.rhs.6:                                       ; preds = %lor.rhs
  %15 = load %struct.xpv*, %struct.xpv** @PL_Xpv, align 8
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %15, i32 0, i32 0
  %16 = load i8*, i8** %xpv_pv, align 8
  %17 = load i8, i8* %16, align 1
  %conv = sext i8 %17 to i32
  %cmp7 = icmp ne i32 %conv, 48
  br label %land.end

land.end:                                         ; preds = %land.rhs.6, %lor.rhs
  %18 = phi i1 [ false, %lor.rhs ], [ %cmp7, %land.rhs.6 ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %land.rhs
  %19 = phi i1 [ true, %land.rhs ], [ %18, %land.end ]
  br label %land.end.9

land.end.9:                                       ; preds = %lor.end, %cond.true.2
  %20 = phi i1 [ false, %cond.true.2 ], [ %19, %lor.end ]
  %cond = select i1 %20, i32 1, i32 0
  br label %cond.end.31

cond.false.10:                                    ; preds = %cond.false
  %21 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags11 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 2
  %22 = load i32, i32* %sv_flags11, align 4
  %and12 = and i32 %22, 65536
  %tobool13 = icmp ne i32 %and12, 0
  br i1 %tobool13, label %cond.true.14, label %cond.false.18

cond.true.14:                                     ; preds = %cond.false.10
  %23 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_any15 = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 0
  %24 = load i8*, i8** %sv_any15, align 8
  %25 = bitcast i8* %24 to %struct.xpviv*
  %xiv_iv = getelementptr inbounds %struct.xpviv, %struct.xpviv* %25, i32 0, i32 3
  %26 = load i64, i64* %xiv_iv, align 8
  %cmp16 = icmp ne i64 %26, 0
  %conv17 = zext i1 %cmp16 to i32
  br label %cond.end.29

cond.false.18:                                    ; preds = %cond.false.10
  %27 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags19 = getelementptr inbounds %struct.sv, %struct.sv* %27, i32 0, i32 2
  %28 = load i32, i32* %sv_flags19, align 4
  %and20 = and i32 %28, 131072
  %tobool21 = icmp ne i32 %and20, 0
  br i1 %tobool21, label %cond.true.22, label %cond.false.26

cond.true.22:                                     ; preds = %cond.false.18
  %29 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_any23 = getelementptr inbounds %struct.sv, %struct.sv* %29, i32 0, i32 0
  %30 = load i8*, i8** %sv_any23, align 8
  %31 = bitcast i8* %30 to %struct.xpvnv*
  %xnv_nv = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %31, i32 0, i32 4
  %32 = load double, double* %xnv_nv, align 8
  %cmp24 = fcmp une double %32, 0.000000e+00
  %conv25 = zext i1 %cmp24 to i32
  br label %cond.end

cond.false.26:                                    ; preds = %cond.false.18
  %33 = load %struct.sv*, %struct.sv** %left, align 8
  %call = call signext i8 @Perl_sv_2bool(%struct.sv* %33)
  %conv27 = sext i8 %call to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false.26, %cond.true.22
  %cond28 = phi i32 [ %conv25, %cond.true.22 ], [ %conv27, %cond.false.26 ]
  br label %cond.end.29

cond.end.29:                                      ; preds = %cond.end, %cond.true.14
  %cond30 = phi i32 [ %conv17, %cond.true.14 ], [ %cond28, %cond.end ]
  br label %cond.end.31

cond.end.31:                                      ; preds = %cond.end.29, %land.end.9
  %cond32 = phi i32 [ %cond, %land.end.9 ], [ %cond30, %cond.end.29 ]
  br label %cond.end.33

cond.end.33:                                      ; preds = %cond.end.31, %cond.true
  %cond34 = phi i32 [ 0, %cond.true ], [ %cond32, %cond.end.31 ]
  %34 = load %struct.sv*, %struct.sv** %right, align 8
  %tobool35 = icmp ne %struct.sv* %34, null
  br i1 %tobool35, label %cond.false.37, label %cond.true.36

cond.true.36:                                     ; preds = %cond.end.33
  br label %cond.end.87

cond.false.37:                                    ; preds = %cond.end.33
  %35 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_flags38 = getelementptr inbounds %struct.sv, %struct.sv* %35, i32 0, i32 2
  %36 = load i32, i32* %sv_flags38, align 4
  %and39 = and i32 %36, 262144
  %tobool40 = icmp ne i32 %and39, 0
  br i1 %tobool40, label %cond.true.41, label %cond.false.60

cond.true.41:                                     ; preds = %cond.false.37
  %37 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_any42 = getelementptr inbounds %struct.sv, %struct.sv* %37, i32 0, i32 0
  %38 = load i8*, i8** %sv_any42, align 8
  %39 = bitcast i8* %38 to %struct.xpv*
  store %struct.xpv* %39, %struct.xpv** @PL_Xpv, align 8
  %tobool43 = icmp ne %struct.xpv* %39, null
  br i1 %tobool43, label %land.rhs.44, label %land.end.58

land.rhs.44:                                      ; preds = %cond.true.41
  %40 = load %struct.xpv*, %struct.xpv** @PL_Xpv, align 8
  %xpv_cur45 = getelementptr inbounds %struct.xpv, %struct.xpv* %40, i32 0, i32 1
  %41 = load i64, i64* %xpv_cur45, align 8
  %cmp46 = icmp ugt i64 %41, 1
  br i1 %cmp46, label %lor.end.57, label %lor.rhs.48

lor.rhs.48:                                       ; preds = %land.rhs.44
  %42 = load %struct.xpv*, %struct.xpv** @PL_Xpv, align 8
  %xpv_cur49 = getelementptr inbounds %struct.xpv, %struct.xpv* %42, i32 0, i32 1
  %43 = load i64, i64* %xpv_cur49, align 8
  %tobool50 = icmp ne i64 %43, 0
  br i1 %tobool50, label %land.rhs.51, label %land.end.56

land.rhs.51:                                      ; preds = %lor.rhs.48
  %44 = load %struct.xpv*, %struct.xpv** @PL_Xpv, align 8
  %xpv_pv52 = getelementptr inbounds %struct.xpv, %struct.xpv* %44, i32 0, i32 0
  %45 = load i8*, i8** %xpv_pv52, align 8
  %46 = load i8, i8* %45, align 1
  %conv53 = sext i8 %46 to i32
  %cmp54 = icmp ne i32 %conv53, 48
  br label %land.end.56

land.end.56:                                      ; preds = %land.rhs.51, %lor.rhs.48
  %47 = phi i1 [ false, %lor.rhs.48 ], [ %cmp54, %land.rhs.51 ]
  br label %lor.end.57

lor.end.57:                                       ; preds = %land.end.56, %land.rhs.44
  %48 = phi i1 [ true, %land.rhs.44 ], [ %47, %land.end.56 ]
  br label %land.end.58

land.end.58:                                      ; preds = %lor.end.57, %cond.true.41
  %49 = phi i1 [ false, %cond.true.41 ], [ %48, %lor.end.57 ]
  %cond59 = select i1 %49, i32 1, i32 0
  br label %cond.end.85

cond.false.60:                                    ; preds = %cond.false.37
  %50 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_flags61 = getelementptr inbounds %struct.sv, %struct.sv* %50, i32 0, i32 2
  %51 = load i32, i32* %sv_flags61, align 4
  %and62 = and i32 %51, 65536
  %tobool63 = icmp ne i32 %and62, 0
  br i1 %tobool63, label %cond.true.64, label %cond.false.69

cond.true.64:                                     ; preds = %cond.false.60
  %52 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_any65 = getelementptr inbounds %struct.sv, %struct.sv* %52, i32 0, i32 0
  %53 = load i8*, i8** %sv_any65, align 8
  %54 = bitcast i8* %53 to %struct.xpviv*
  %xiv_iv66 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %54, i32 0, i32 3
  %55 = load i64, i64* %xiv_iv66, align 8
  %cmp67 = icmp ne i64 %55, 0
  %conv68 = zext i1 %cmp67 to i32
  br label %cond.end.83

cond.false.69:                                    ; preds = %cond.false.60
  %56 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_flags70 = getelementptr inbounds %struct.sv, %struct.sv* %56, i32 0, i32 2
  %57 = load i32, i32* %sv_flags70, align 4
  %and71 = and i32 %57, 131072
  %tobool72 = icmp ne i32 %and71, 0
  br i1 %tobool72, label %cond.true.73, label %cond.false.78

cond.true.73:                                     ; preds = %cond.false.69
  %58 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_any74 = getelementptr inbounds %struct.sv, %struct.sv* %58, i32 0, i32 0
  %59 = load i8*, i8** %sv_any74, align 8
  %60 = bitcast i8* %59 to %struct.xpvnv*
  %xnv_nv75 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %60, i32 0, i32 4
  %61 = load double, double* %xnv_nv75, align 8
  %cmp76 = fcmp une double %61, 0.000000e+00
  %conv77 = zext i1 %cmp76 to i32
  br label %cond.end.81

cond.false.78:                                    ; preds = %cond.false.69
  %62 = load %struct.sv*, %struct.sv** %right, align 8
  %call79 = call signext i8 @Perl_sv_2bool(%struct.sv* %62)
  %conv80 = sext i8 %call79 to i32
  br label %cond.end.81

cond.end.81:                                      ; preds = %cond.false.78, %cond.true.73
  %cond82 = phi i32 [ %conv77, %cond.true.73 ], [ %conv80, %cond.false.78 ]
  br label %cond.end.83

cond.end.83:                                      ; preds = %cond.end.81, %cond.true.64
  %cond84 = phi i32 [ %conv68, %cond.true.64 ], [ %cond82, %cond.end.81 ]
  br label %cond.end.85

cond.end.85:                                      ; preds = %cond.end.83, %land.end.58
  %cond86 = phi i32 [ %cond59, %land.end.58 ], [ %cond84, %cond.end.83 ]
  br label %cond.end.87

cond.end.87:                                      ; preds = %cond.end.85, %cond.true.36
  %cond88 = phi i32 [ 0, %cond.true.36 ], [ %cond86, %cond.end.85 ]
  %cmp89 = icmp ne i32 %cond34, %cond88
  br i1 %cmp89, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end.87
  %63 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_yes, %struct.sv** %63, align 8
  %64 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %64, %struct.sv*** @PL_stack_sp, align 8
  %65 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %65, i32 0, i32 0
  %66 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %66, %struct.op** %retval
  br label %return

if.else:                                          ; preds = %cond.end.87
  %67 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_no, %struct.sv** %67, align 8
  %68 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %68, %struct.sv*** @PL_stack_sp, align 8
  %69 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next91 = getelementptr inbounds %struct.op, %struct.op* %69, i32 0, i32 0
  %70 = load %struct.op*, %struct.op** %op_next91, align 8
  store %struct.op* %70, %struct.op** %retval
  br label %return

return:                                           ; preds = %if.else, %if.then
  %71 = load %struct.op*, %struct.op** %retval
  ret %struct.op* %71
}

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_andassign() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %2 = load %struct.sv*, %struct.sv** %1, align 8
  %tobool = icmp ne %struct.sv* %2, null
  br i1 %tobool, label %cond.false, label %cond.true

cond.true:                                        ; preds = %entry
  br i1 false, label %if.else, label %if.then

cond.false:                                       ; preds = %entry
  %3 = load %struct.sv**, %struct.sv*** %sp, align 8
  %4 = load %struct.sv*, %struct.sv** %3, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 2
  %5 = load i32, i32* %sv_flags, align 4
  %and = and i32 %5, 262144
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %cond.true.2, label %cond.false.11

cond.true.2:                                      ; preds = %cond.false
  %6 = load %struct.sv**, %struct.sv*** %sp, align 8
  %7 = load %struct.sv*, %struct.sv** %6, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 0
  %8 = load i8*, i8** %sv_any, align 8
  %9 = bitcast i8* %8 to %struct.xpv*
  store %struct.xpv* %9, %struct.xpv** @PL_Xpv, align 8
  %tobool3 = icmp ne %struct.xpv* %9, null
  br i1 %tobool3, label %land.lhs.true, label %cond.false.10

land.lhs.true:                                    ; preds = %cond.true.2
  %10 = load %struct.xpv*, %struct.xpv** @PL_Xpv, align 8
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %10, i32 0, i32 1
  %11 = load i64, i64* %xpv_cur, align 8
  %cmp = icmp ugt i64 %11, 1
  br i1 %cmp, label %cond.true.9, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %12 = load %struct.xpv*, %struct.xpv** @PL_Xpv, align 8
  %xpv_cur4 = getelementptr inbounds %struct.xpv, %struct.xpv* %12, i32 0, i32 1
  %13 = load i64, i64* %xpv_cur4, align 8
  %tobool5 = icmp ne i64 %13, 0
  br i1 %tobool5, label %land.lhs.true.6, label %cond.false.10

land.lhs.true.6:                                  ; preds = %lor.lhs.false
  %14 = load %struct.xpv*, %struct.xpv** @PL_Xpv, align 8
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %14, i32 0, i32 0
  %15 = load i8*, i8** %xpv_pv, align 8
  %16 = load i8, i8* %15, align 1
  %conv = sext i8 %16 to i32
  %cmp7 = icmp ne i32 %conv, 48
  br i1 %cmp7, label %cond.true.9, label %cond.false.10

cond.true.9:                                      ; preds = %land.lhs.true.6, %land.lhs.true
  br i1 true, label %if.else, label %if.then

cond.false.10:                                    ; preds = %land.lhs.true.6, %lor.lhs.false, %cond.true.2
  br i1 false, label %if.else, label %if.then

cond.false.11:                                    ; preds = %cond.false
  %17 = load %struct.sv**, %struct.sv*** %sp, align 8
  %18 = load %struct.sv*, %struct.sv** %17, align 8
  %sv_flags12 = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 2
  %19 = load i32, i32* %sv_flags12, align 4
  %and13 = and i32 %19, 65536
  %tobool14 = icmp ne i32 %and13, 0
  br i1 %tobool14, label %cond.true.15, label %cond.false.19

cond.true.15:                                     ; preds = %cond.false.11
  %20 = load %struct.sv**, %struct.sv*** %sp, align 8
  %21 = load %struct.sv*, %struct.sv** %20, align 8
  %sv_any16 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 0
  %22 = load i8*, i8** %sv_any16, align 8
  %23 = bitcast i8* %22 to %struct.xpviv*
  %xiv_iv = getelementptr inbounds %struct.xpviv, %struct.xpviv* %23, i32 0, i32 3
  %24 = load i64, i64* %xiv_iv, align 8
  %cmp17 = icmp ne i64 %24, 0
  br i1 %cmp17, label %if.else, label %if.then

cond.false.19:                                    ; preds = %cond.false.11
  %25 = load %struct.sv**, %struct.sv*** %sp, align 8
  %26 = load %struct.sv*, %struct.sv** %25, align 8
  %sv_flags20 = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 2
  %27 = load i32, i32* %sv_flags20, align 4
  %and21 = and i32 %27, 131072
  %tobool22 = icmp ne i32 %and21, 0
  br i1 %tobool22, label %cond.true.23, label %cond.false.27

cond.true.23:                                     ; preds = %cond.false.19
  %28 = load %struct.sv**, %struct.sv*** %sp, align 8
  %29 = load %struct.sv*, %struct.sv** %28, align 8
  %sv_any24 = getelementptr inbounds %struct.sv, %struct.sv* %29, i32 0, i32 0
  %30 = load i8*, i8** %sv_any24, align 8
  %31 = bitcast i8* %30 to %struct.xpvnv*
  %xnv_nv = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %31, i32 0, i32 4
  %32 = load double, double* %xnv_nv, align 8
  %cmp25 = fcmp une double %32, 0.000000e+00
  br i1 %cmp25, label %if.else, label %if.then

cond.false.27:                                    ; preds = %cond.false.19
  %33 = load %struct.sv**, %struct.sv*** %sp, align 8
  %34 = load %struct.sv*, %struct.sv** %33, align 8
  %call = call signext i8 @Perl_sv_2bool(%struct.sv* %34)
  %conv28 = sext i8 %call to i32
  %tobool29 = icmp ne i32 %conv28, 0
  br i1 %tobool29, label %if.else, label %if.then

if.then:                                          ; preds = %cond.false.27, %cond.true.23, %cond.true.15, %cond.false.10, %cond.true.9, %cond.true
  %35 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %35, %struct.sv*** @PL_stack_sp, align 8
  %36 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %36, i32 0, i32 0
  %37 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %37, %struct.op** %retval
  br label %return

if.else:                                          ; preds = %cond.false.27, %cond.true.23, %cond.true.15, %cond.false.10, %cond.true.9, %cond.true
  %38 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %38, %struct.sv*** @PL_stack_sp, align 8
  %39 = load %struct.op*, %struct.op** @PL_op, align 8
  %40 = bitcast %struct.op* %39 to %struct.logop*
  %op_other = getelementptr inbounds %struct.logop, %struct.logop* %40, i32 0, i32 9
  %41 = load %struct.op*, %struct.op** %op_other, align 8
  store %struct.op* %41, %struct.op** %retval
  br label %return

return:                                           ; preds = %if.else, %if.then
  %42 = load %struct.op*, %struct.op** %retval
  ret %struct.op* %42
}

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_orassign() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %2 = load %struct.sv*, %struct.sv** %1, align 8
  %tobool = icmp ne %struct.sv* %2, null
  br i1 %tobool, label %cond.false, label %cond.true

cond.true:                                        ; preds = %entry
  br i1 false, label %if.then, label %if.else

cond.false:                                       ; preds = %entry
  %3 = load %struct.sv**, %struct.sv*** %sp, align 8
  %4 = load %struct.sv*, %struct.sv** %3, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 2
  %5 = load i32, i32* %sv_flags, align 4
  %and = and i32 %5, 262144
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %cond.true.2, label %cond.false.11

cond.true.2:                                      ; preds = %cond.false
  %6 = load %struct.sv**, %struct.sv*** %sp, align 8
  %7 = load %struct.sv*, %struct.sv** %6, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 0
  %8 = load i8*, i8** %sv_any, align 8
  %9 = bitcast i8* %8 to %struct.xpv*
  store %struct.xpv* %9, %struct.xpv** @PL_Xpv, align 8
  %tobool3 = icmp ne %struct.xpv* %9, null
  br i1 %tobool3, label %land.lhs.true, label %cond.false.10

land.lhs.true:                                    ; preds = %cond.true.2
  %10 = load %struct.xpv*, %struct.xpv** @PL_Xpv, align 8
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %10, i32 0, i32 1
  %11 = load i64, i64* %xpv_cur, align 8
  %cmp = icmp ugt i64 %11, 1
  br i1 %cmp, label %cond.true.9, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %12 = load %struct.xpv*, %struct.xpv** @PL_Xpv, align 8
  %xpv_cur4 = getelementptr inbounds %struct.xpv, %struct.xpv* %12, i32 0, i32 1
  %13 = load i64, i64* %xpv_cur4, align 8
  %tobool5 = icmp ne i64 %13, 0
  br i1 %tobool5, label %land.lhs.true.6, label %cond.false.10

land.lhs.true.6:                                  ; preds = %lor.lhs.false
  %14 = load %struct.xpv*, %struct.xpv** @PL_Xpv, align 8
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %14, i32 0, i32 0
  %15 = load i8*, i8** %xpv_pv, align 8
  %16 = load i8, i8* %15, align 1
  %conv = sext i8 %16 to i32
  %cmp7 = icmp ne i32 %conv, 48
  br i1 %cmp7, label %cond.true.9, label %cond.false.10

cond.true.9:                                      ; preds = %land.lhs.true.6, %land.lhs.true
  br i1 true, label %if.then, label %if.else

cond.false.10:                                    ; preds = %land.lhs.true.6, %lor.lhs.false, %cond.true.2
  br i1 false, label %if.then, label %if.else

cond.false.11:                                    ; preds = %cond.false
  %17 = load %struct.sv**, %struct.sv*** %sp, align 8
  %18 = load %struct.sv*, %struct.sv** %17, align 8
  %sv_flags12 = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 2
  %19 = load i32, i32* %sv_flags12, align 4
  %and13 = and i32 %19, 65536
  %tobool14 = icmp ne i32 %and13, 0
  br i1 %tobool14, label %cond.true.15, label %cond.false.19

cond.true.15:                                     ; preds = %cond.false.11
  %20 = load %struct.sv**, %struct.sv*** %sp, align 8
  %21 = load %struct.sv*, %struct.sv** %20, align 8
  %sv_any16 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 0
  %22 = load i8*, i8** %sv_any16, align 8
  %23 = bitcast i8* %22 to %struct.xpviv*
  %xiv_iv = getelementptr inbounds %struct.xpviv, %struct.xpviv* %23, i32 0, i32 3
  %24 = load i64, i64* %xiv_iv, align 8
  %cmp17 = icmp ne i64 %24, 0
  br i1 %cmp17, label %if.then, label %if.else

cond.false.19:                                    ; preds = %cond.false.11
  %25 = load %struct.sv**, %struct.sv*** %sp, align 8
  %26 = load %struct.sv*, %struct.sv** %25, align 8
  %sv_flags20 = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 2
  %27 = load i32, i32* %sv_flags20, align 4
  %and21 = and i32 %27, 131072
  %tobool22 = icmp ne i32 %and21, 0
  br i1 %tobool22, label %cond.true.23, label %cond.false.27

cond.true.23:                                     ; preds = %cond.false.19
  %28 = load %struct.sv**, %struct.sv*** %sp, align 8
  %29 = load %struct.sv*, %struct.sv** %28, align 8
  %sv_any24 = getelementptr inbounds %struct.sv, %struct.sv* %29, i32 0, i32 0
  %30 = load i8*, i8** %sv_any24, align 8
  %31 = bitcast i8* %30 to %struct.xpvnv*
  %xnv_nv = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %31, i32 0, i32 4
  %32 = load double, double* %xnv_nv, align 8
  %cmp25 = fcmp une double %32, 0.000000e+00
  br i1 %cmp25, label %if.then, label %if.else

cond.false.27:                                    ; preds = %cond.false.19
  %33 = load %struct.sv**, %struct.sv*** %sp, align 8
  %34 = load %struct.sv*, %struct.sv** %33, align 8
  %call = call signext i8 @Perl_sv_2bool(%struct.sv* %34)
  %conv28 = sext i8 %call to i32
  %tobool29 = icmp ne i32 %conv28, 0
  br i1 %tobool29, label %if.then, label %if.else

if.then:                                          ; preds = %cond.false.27, %cond.true.23, %cond.true.15, %cond.false.10, %cond.true.9, %cond.true
  %35 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %35, %struct.sv*** @PL_stack_sp, align 8
  %36 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %36, i32 0, i32 0
  %37 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %37, %struct.op** %retval
  br label %return

if.else:                                          ; preds = %cond.false.27, %cond.true.23, %cond.true.15, %cond.false.10, %cond.true.9, %cond.true
  %38 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %38, %struct.sv*** @PL_stack_sp, align 8
  %39 = load %struct.op*, %struct.op** @PL_op, align 8
  %40 = bitcast %struct.op* %39 to %struct.logop*
  %op_other = getelementptr inbounds %struct.logop, %struct.logop* %40, i32 0, i32 9
  %41 = load %struct.op*, %struct.op** %op_other, align 8
  store %struct.op* %41, %struct.op** %retval
  br label %return

return:                                           ; preds = %if.else, %if.then
  %42 = load %struct.op*, %struct.op** %retval
  ret %struct.op* %42
}

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_caller() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %cxix = alloca i32, align 4
  %cx = alloca %struct.context*, align 8
  %ccstack = alloca %struct.context*, align 8
  %top_si = alloca %struct.stackinfo*, align 8
  %dbcxix = alloca i32, align 4
  %gimme = alloca i32, align 4
  %stashname = alloca i8*, align 8
  %sv = alloca %struct.sv*, align 8
  %count = alloca i32, align 4
  %targ = alloca %struct.sv*, align 8
  %cvgv = alloca %struct.gv*, align 8
  %ary = alloca %struct.av*, align 8
  %off = alloca i32, align 4
  %tmpgv = alloca %struct.gv*, align 8
  %mask = alloca %struct.sv*, align 8
  %old_warnings = alloca %struct.sv*, align 8
  %bits_all = alloca %struct.sv**, align 8
  %bits = alloca %struct.hv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %1, i32 0, i32 2
  %2 = load i32, i32* %si_cxix, align 4
  %call = call i32 @S_dopoptosub(i32 %2)
  store i32 %call, i32* %cxix, align 4
  %3 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxstack = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %3, i32 0, i32 1
  %4 = load %struct.context*, %struct.context** %si_cxstack, align 8
  store %struct.context* %4, %struct.context** %ccstack, align 8
  %5 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  store %struct.stackinfo* %5, %struct.stackinfo** %top_si, align 8
  store i32 0, i32* %count, align 4
  %6 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 7
  %7 = load i8, i8* %op_private, align 1
  %conv = zext i8 %7 to i32
  %and = and i32 %conv, 15
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %8 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %8, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %9 = load %struct.sv*, %struct.sv** %8, align 8
  store %struct.sv* %9, %struct.sv** @PL_Sv, align 8
  %10 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags, align 4
  %and1 = and i32 %11, 65536
  %tobool2 = icmp ne i32 %and1, 0
  br i1 %tobool2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %12 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 0
  %13 = load i8*, i8** %sv_any, align 8
  %14 = bitcast i8* %13 to %struct.xpviv*
  %xiv_iv = getelementptr inbounds %struct.xpviv, %struct.xpviv* %14, i32 0, i32 3
  %15 = load i64, i64* %xiv_iv, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %16 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %call3 = call i64 @Perl_sv_2iv(%struct.sv* %16)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %15, %cond.true ], [ %call3, %cond.false ]
  %conv4 = trunc i64 %cond to i32
  store i32 %conv4, i32* %count, align 4
  br label %if.end

if.end:                                           ; preds = %cond.end, %entry
  br label %for.cond

for.cond:                                         ; preds = %if.end.56, %if.end
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.cond
  %17 = load i32, i32* %cxix, align 4
  %cmp = icmp slt i32 %17, 0
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %18 = load %struct.stackinfo*, %struct.stackinfo** %top_si, align 8
  %si_type = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %18, i32 0, i32 4
  %19 = load i32, i32* %si_type, align 4
  %cmp6 = icmp ne i32 %19, 1
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %20 = phi i1 [ false, %while.cond ], [ %cmp6, %land.rhs ]
  br i1 %20, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %21 = load %struct.stackinfo*, %struct.stackinfo** %top_si, align 8
  %si_prev = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %21, i32 0, i32 5
  %22 = load %struct.stackinfo*, %struct.stackinfo** %si_prev, align 8
  store %struct.stackinfo* %22, %struct.stackinfo** %top_si, align 8
  %23 = load %struct.stackinfo*, %struct.stackinfo** %top_si, align 8
  %si_cxstack8 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %23, i32 0, i32 1
  %24 = load %struct.context*, %struct.context** %si_cxstack8, align 8
  store %struct.context* %24, %struct.context** %ccstack, align 8
  %25 = load %struct.context*, %struct.context** %ccstack, align 8
  %26 = load %struct.stackinfo*, %struct.stackinfo** %top_si, align 8
  %si_cxix9 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %26, i32 0, i32 2
  %27 = load i32, i32* %si_cxix9, align 4
  %call10 = call i32 @S_dopoptosub_at(%struct.context* %25, i32 %27)
  store i32 %call10, i32* %cxix, align 4
  br label %while.cond

while.end:                                        ; preds = %land.end
  %28 = load i32, i32* %cxix, align 4
  %cmp11 = icmp slt i32 %28, 0
  br i1 %cmp11, label %if.then.13, label %if.end.39

if.then.13:                                       ; preds = %while.end
  %29 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %29, i32 0, i32 6
  %30 = load i8, i8* %op_flags, align 1
  %conv14 = zext i8 %30 to i32
  %and15 = and i32 %conv14, 3
  %tobool16 = icmp ne i32 %and15, 0
  br i1 %tobool16, label %cond.true.17, label %cond.false.24

cond.true.17:                                     ; preds = %if.then.13
  %31 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags18 = getelementptr inbounds %struct.op, %struct.op* %31, i32 0, i32 6
  %32 = load i8, i8* %op_flags18, align 1
  %conv19 = zext i8 %32 to i32
  %and20 = and i32 %conv19, 3
  %cmp21 = icmp eq i32 %and20, 3
  %cond23 = select i1 %cmp21, i32 1, i32 0
  br label %cond.end.26

cond.false.24:                                    ; preds = %if.then.13
  %call25 = call i32 @Perl_dowantarray()
  br label %cond.end.26

cond.end.26:                                      ; preds = %cond.false.24, %cond.true.17
  %cond27 = phi i32 [ %cond23, %cond.true.17 ], [ %call25, %cond.false.24 ]
  %cmp28 = icmp ne i32 %cond27, 1
  br i1 %cmp28, label %if.then.30, label %if.end.37

if.then.30:                                       ; preds = %cond.end.26
  %33 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %34 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %33 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %34 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp31 = icmp slt i64 %sub.ptr.div, 1
  br i1 %cmp31, label %if.then.33, label %if.end.35

if.then.33:                                       ; preds = %if.then.30
  %35 = load %struct.sv**, %struct.sv*** %sp, align 8
  %36 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call34 = call %struct.sv** @Perl_stack_grow(%struct.sv** %35, %struct.sv** %36, i32 1)
  store %struct.sv** %call34, %struct.sv*** %sp, align 8
  br label %if.end.35

if.end.35:                                        ; preds = %if.then.33, %if.then.30
  %37 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr36 = getelementptr inbounds %struct.sv*, %struct.sv** %37, i32 1
  store %struct.sv** %incdec.ptr36, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %incdec.ptr36, align 8
  %38 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %38, %struct.sv*** @PL_stack_sp, align 8
  %39 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %39, i32 0, i32 0
  %40 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %40, %struct.op** %retval
  br label %return

if.end.37:                                        ; preds = %cond.end.26
  %41 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %41, %struct.sv*** @PL_stack_sp, align 8
  %42 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next38 = getelementptr inbounds %struct.op, %struct.op* %42, i32 0, i32 0
  %43 = load %struct.op*, %struct.op** %op_next38, align 8
  store %struct.op* %43, %struct.op** %retval
  br label %return

if.end.39:                                        ; preds = %while.end
  %44 = load %struct.gv*, %struct.gv** @PL_DBsub, align 8
  %tobool40 = icmp ne %struct.gv* %44, null
  br i1 %tobool40, label %land.lhs.true, label %if.end.53

land.lhs.true:                                    ; preds = %if.end.39
  %45 = load %struct.gv*, %struct.gv** @PL_DBsub, align 8
  %sv_any41 = getelementptr inbounds %struct.gv, %struct.gv* %45, i32 0, i32 0
  %46 = load %struct.xpvgv*, %struct.xpvgv** %sv_any41, align 8
  %xgv_gp = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %46, i32 0, i32 7
  %47 = load %struct.gp*, %struct.gp** %xgv_gp, align 8
  %gp_cv = getelementptr inbounds %struct.gp, %struct.gp* %47, i32 0, i32 7
  %48 = load %struct.cv*, %struct.cv** %gp_cv, align 8
  %tobool42 = icmp ne %struct.cv* %48, null
  br i1 %tobool42, label %land.lhs.true.43, label %if.end.53

land.lhs.true.43:                                 ; preds = %land.lhs.true
  %49 = load i32, i32* %cxix, align 4
  %cmp44 = icmp sge i32 %49, 0
  br i1 %cmp44, label %land.lhs.true.46, label %if.end.53

land.lhs.true.46:                                 ; preds = %land.lhs.true.43
  %50 = load i32, i32* %cxix, align 4
  %idxprom = sext i32 %50 to i64
  %51 = load %struct.context*, %struct.context** %ccstack, align 8
  %arrayidx = getelementptr inbounds %struct.context, %struct.context* %51, i64 %idxprom
  %cx_u = getelementptr inbounds %struct.context, %struct.context* %arrayidx, i32 0, i32 1
  %cx_blk = bitcast %union.anon* %cx_u to %struct.block*
  %blk_u = getelementptr inbounds %struct.block, %struct.block* %cx_blk, i32 0, i32 7
  %blku_sub = bitcast %union.anon.1* %blk_u to %struct.block_sub*
  %cv = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub, i32 0, i32 0
  %52 = load %struct.cv*, %struct.cv** %cv, align 8
  %53 = load %struct.gv*, %struct.gv** @PL_DBsub, align 8
  %sv_any47 = getelementptr inbounds %struct.gv, %struct.gv* %53, i32 0, i32 0
  %54 = load %struct.xpvgv*, %struct.xpvgv** %sv_any47, align 8
  %xgv_gp48 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %54, i32 0, i32 7
  %55 = load %struct.gp*, %struct.gp** %xgv_gp48, align 8
  %gp_cv49 = getelementptr inbounds %struct.gp, %struct.gp* %55, i32 0, i32 7
  %56 = load %struct.cv*, %struct.cv** %gp_cv49, align 8
  %cmp50 = icmp eq %struct.cv* %52, %56
  br i1 %cmp50, label %if.then.52, label %if.end.53

if.then.52:                                       ; preds = %land.lhs.true.46
  %57 = load i32, i32* %count, align 4
  %inc = add nsw i32 %57, 1
  store i32 %inc, i32* %count, align 4
  br label %if.end.53

if.end.53:                                        ; preds = %if.then.52, %land.lhs.true.46, %land.lhs.true.43, %land.lhs.true, %if.end.39
  %58 = load i32, i32* %count, align 4
  %dec = add nsw i32 %58, -1
  store i32 %dec, i32* %count, align 4
  %tobool54 = icmp ne i32 %58, 0
  br i1 %tobool54, label %if.end.56, label %if.then.55

if.then.55:                                       ; preds = %if.end.53
  br label %for.end

if.end.56:                                        ; preds = %if.end.53
  %59 = load %struct.context*, %struct.context** %ccstack, align 8
  %60 = load i32, i32* %cxix, align 4
  %sub = sub nsw i32 %60, 1
  %call57 = call i32 @S_dopoptosub_at(%struct.context* %59, i32 %sub)
  store i32 %call57, i32* %cxix, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then.55
  %61 = load i32, i32* %cxix, align 4
  %idxprom58 = sext i32 %61 to i64
  %62 = load %struct.context*, %struct.context** %ccstack, align 8
  %arrayidx59 = getelementptr inbounds %struct.context, %struct.context* %62, i64 %idxprom58
  store %struct.context* %arrayidx59, %struct.context** %cx, align 8
  %63 = load %struct.context*, %struct.context** %cx, align 8
  %cx_type = getelementptr inbounds %struct.context, %struct.context* %63, i32 0, i32 0
  %64 = load i32, i32* %cx_type, align 4
  %and60 = and i32 %64, 255
  %cmp61 = icmp eq i32 %and60, 1
  br i1 %cmp61, label %if.then.67, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.end
  %65 = load %struct.context*, %struct.context** %cx, align 8
  %cx_type63 = getelementptr inbounds %struct.context, %struct.context* %65, i32 0, i32 0
  %66 = load i32, i32* %cx_type63, align 4
  %and64 = and i32 %66, 255
  %cmp65 = icmp eq i32 %and64, 6
  br i1 %cmp65, label %if.then.67, label %if.end.96

if.then.67:                                       ; preds = %lor.lhs.false, %for.end
  %67 = load %struct.context*, %struct.context** %ccstack, align 8
  %68 = load i32, i32* %cxix, align 4
  %sub68 = sub nsw i32 %68, 1
  %call69 = call i32 @S_dopoptosub_at(%struct.context* %67, i32 %sub68)
  store i32 %call69, i32* %dbcxix, align 4
  %69 = load %struct.gv*, %struct.gv** @PL_DBsub, align 8
  %tobool70 = icmp ne %struct.gv* %69, null
  br i1 %tobool70, label %land.lhs.true.71, label %if.end.95

land.lhs.true.71:                                 ; preds = %if.then.67
  %70 = load %struct.gv*, %struct.gv** @PL_DBsub, align 8
  %sv_any72 = getelementptr inbounds %struct.gv, %struct.gv* %70, i32 0, i32 0
  %71 = load %struct.xpvgv*, %struct.xpvgv** %sv_any72, align 8
  %xgv_gp73 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %71, i32 0, i32 7
  %72 = load %struct.gp*, %struct.gp** %xgv_gp73, align 8
  %gp_cv74 = getelementptr inbounds %struct.gp, %struct.gp* %72, i32 0, i32 7
  %73 = load %struct.cv*, %struct.cv** %gp_cv74, align 8
  %tobool75 = icmp ne %struct.cv* %73, null
  br i1 %tobool75, label %land.lhs.true.76, label %if.end.95

land.lhs.true.76:                                 ; preds = %land.lhs.true.71
  %74 = load i32, i32* %dbcxix, align 4
  %cmp77 = icmp sge i32 %74, 0
  br i1 %cmp77, label %land.lhs.true.79, label %if.end.95

land.lhs.true.79:                                 ; preds = %land.lhs.true.76
  %75 = load i32, i32* %dbcxix, align 4
  %idxprom80 = sext i32 %75 to i64
  %76 = load %struct.context*, %struct.context** %ccstack, align 8
  %arrayidx81 = getelementptr inbounds %struct.context, %struct.context* %76, i64 %idxprom80
  %cx_u82 = getelementptr inbounds %struct.context, %struct.context* %arrayidx81, i32 0, i32 1
  %cx_blk83 = bitcast %union.anon* %cx_u82 to %struct.block*
  %blk_u84 = getelementptr inbounds %struct.block, %struct.block* %cx_blk83, i32 0, i32 7
  %blku_sub85 = bitcast %union.anon.1* %blk_u84 to %struct.block_sub*
  %cv86 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub85, i32 0, i32 0
  %77 = load %struct.cv*, %struct.cv** %cv86, align 8
  %78 = load %struct.gv*, %struct.gv** @PL_DBsub, align 8
  %sv_any87 = getelementptr inbounds %struct.gv, %struct.gv* %78, i32 0, i32 0
  %79 = load %struct.xpvgv*, %struct.xpvgv** %sv_any87, align 8
  %xgv_gp88 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %79, i32 0, i32 7
  %80 = load %struct.gp*, %struct.gp** %xgv_gp88, align 8
  %gp_cv89 = getelementptr inbounds %struct.gp, %struct.gp* %80, i32 0, i32 7
  %81 = load %struct.cv*, %struct.cv** %gp_cv89, align 8
  %cmp90 = icmp eq %struct.cv* %77, %81
  br i1 %cmp90, label %if.then.92, label %if.end.95

if.then.92:                                       ; preds = %land.lhs.true.79
  %82 = load i32, i32* %dbcxix, align 4
  %idxprom93 = sext i32 %82 to i64
  %83 = load %struct.context*, %struct.context** %ccstack, align 8
  %arrayidx94 = getelementptr inbounds %struct.context, %struct.context* %83, i64 %idxprom93
  store %struct.context* %arrayidx94, %struct.context** %cx, align 8
  br label %if.end.95

if.end.95:                                        ; preds = %if.then.92, %land.lhs.true.79, %land.lhs.true.76, %land.lhs.true.71, %if.then.67
  br label %if.end.96

if.end.96:                                        ; preds = %if.end.95, %lor.lhs.false
  %84 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u97 = getelementptr inbounds %struct.context, %struct.context* %84, i32 0, i32 1
  %cx_blk98 = bitcast %union.anon* %cx_u97 to %struct.block*
  %blku_oldcop = getelementptr inbounds %struct.block, %struct.block* %cx_blk98, i32 0, i32 1
  %85 = load %struct.cop*, %struct.cop** %blku_oldcop, align 8
  %cop_stash = getelementptr inbounds %struct.cop, %struct.cop* %85, i32 0, i32 9
  %86 = load %struct.hv*, %struct.hv** %cop_stash, align 8
  %tobool99 = icmp ne %struct.hv* %86, null
  br i1 %tobool99, label %cond.true.100, label %cond.false.106

cond.true.100:                                    ; preds = %if.end.96
  %87 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u101 = getelementptr inbounds %struct.context, %struct.context* %87, i32 0, i32 1
  %cx_blk102 = bitcast %union.anon* %cx_u101 to %struct.block*
  %blku_oldcop103 = getelementptr inbounds %struct.block, %struct.block* %cx_blk102, i32 0, i32 1
  %88 = load %struct.cop*, %struct.cop** %blku_oldcop103, align 8
  %cop_stash104 = getelementptr inbounds %struct.cop, %struct.cop* %88, i32 0, i32 9
  %89 = load %struct.hv*, %struct.hv** %cop_stash104, align 8
  %sv_any105 = getelementptr inbounds %struct.hv, %struct.hv* %89, i32 0, i32 0
  %90 = load %struct.xpvhv*, %struct.xpvhv** %sv_any105, align 8
  %xhv_name = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %90, i32 0, i32 10
  %91 = load i8*, i8** %xhv_name, align 8
  br label %cond.end.107

cond.false.106:                                   ; preds = %if.end.96
  br label %cond.end.107

cond.end.107:                                     ; preds = %cond.false.106, %cond.true.100
  %cond108 = phi i8* [ %91, %cond.true.100 ], [ null, %cond.false.106 ]
  store i8* %cond108, i8** %stashname, align 8
  %92 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags109 = getelementptr inbounds %struct.op, %struct.op* %92, i32 0, i32 6
  %93 = load i8, i8* %op_flags109, align 1
  %conv110 = zext i8 %93 to i32
  %and111 = and i32 %conv110, 3
  %tobool112 = icmp ne i32 %and111, 0
  br i1 %tobool112, label %cond.true.113, label %cond.false.120

cond.true.113:                                    ; preds = %cond.end.107
  %94 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags114 = getelementptr inbounds %struct.op, %struct.op* %94, i32 0, i32 6
  %95 = load i8, i8* %op_flags114, align 1
  %conv115 = zext i8 %95 to i32
  %and116 = and i32 %conv115, 3
  %cmp117 = icmp eq i32 %and116, 3
  %cond119 = select i1 %cmp117, i32 1, i32 0
  br label %cond.end.122

cond.false.120:                                   ; preds = %cond.end.107
  %call121 = call i32 @Perl_dowantarray()
  br label %cond.end.122

cond.end.122:                                     ; preds = %cond.false.120, %cond.true.113
  %cond123 = phi i32 [ %cond119, %cond.true.113 ], [ %call121, %cond.false.120 ]
  %cmp124 = icmp ne i32 %cond123, 1
  br i1 %cmp124, label %if.then.126, label %if.end.143

if.then.126:                                      ; preds = %cond.end.122
  %96 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %97 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast127 = ptrtoint %struct.sv** %96 to i64
  %sub.ptr.rhs.cast128 = ptrtoint %struct.sv** %97 to i64
  %sub.ptr.sub129 = sub i64 %sub.ptr.lhs.cast127, %sub.ptr.rhs.cast128
  %sub.ptr.div130 = sdiv exact i64 %sub.ptr.sub129, 8
  %cmp131 = icmp slt i64 %sub.ptr.div130, 1
  br i1 %cmp131, label %if.then.133, label %if.end.135

if.then.133:                                      ; preds = %if.then.126
  %98 = load %struct.sv**, %struct.sv*** %sp, align 8
  %99 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call134 = call %struct.sv** @Perl_stack_grow(%struct.sv** %98, %struct.sv** %99, i32 1)
  store %struct.sv** %call134, %struct.sv*** %sp, align 8
  br label %if.end.135

if.end.135:                                       ; preds = %if.then.133, %if.then.126
  %100 = load i8*, i8** %stashname, align 8
  %tobool136 = icmp ne i8* %100, null
  br i1 %tobool136, label %if.else, label %if.then.137

if.then.137:                                      ; preds = %if.end.135
  %101 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr138 = getelementptr inbounds %struct.sv*, %struct.sv** %101, i32 1
  store %struct.sv** %incdec.ptr138, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %incdec.ptr138, align 8
  br label %if.end.141

if.else:                                          ; preds = %if.end.135
  %102 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %102, i32 0, i32 3
  %103 = load i64, i64* %op_targ, align 8
  %104 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %arrayidx139 = getelementptr inbounds %struct.sv*, %struct.sv** %104, i64 %103
  %105 = load %struct.sv*, %struct.sv** %arrayidx139, align 8
  store %struct.sv* %105, %struct.sv** %targ, align 8
  %106 = load %struct.sv*, %struct.sv** %targ, align 8
  %107 = load i8*, i8** %stashname, align 8
  call void @Perl_sv_setpv(%struct.sv* %106, i8* %107)
  %108 = load %struct.sv*, %struct.sv** %targ, align 8
  %109 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr140 = getelementptr inbounds %struct.sv*, %struct.sv** %109, i32 1
  store %struct.sv** %incdec.ptr140, %struct.sv*** %sp, align 8
  store %struct.sv* %108, %struct.sv** %incdec.ptr140, align 8
  br label %if.end.141

if.end.141:                                       ; preds = %if.else, %if.then.137
  %110 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %110, %struct.sv*** @PL_stack_sp, align 8
  %111 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next142 = getelementptr inbounds %struct.op, %struct.op* %111, i32 0, i32 0
  %112 = load %struct.op*, %struct.op** %op_next142, align 8
  store %struct.op* %112, %struct.op** %retval
  br label %return

if.end.143:                                       ; preds = %cond.end.122
  %113 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %114 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast144 = ptrtoint %struct.sv** %113 to i64
  %sub.ptr.rhs.cast145 = ptrtoint %struct.sv** %114 to i64
  %sub.ptr.sub146 = sub i64 %sub.ptr.lhs.cast144, %sub.ptr.rhs.cast145
  %sub.ptr.div147 = sdiv exact i64 %sub.ptr.sub146, 8
  %cmp148 = icmp slt i64 %sub.ptr.div147, 10
  br i1 %cmp148, label %if.then.150, label %if.end.152

if.then.150:                                      ; preds = %if.end.143
  %115 = load %struct.sv**, %struct.sv*** %sp, align 8
  %116 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call151 = call %struct.sv** @Perl_stack_grow(%struct.sv** %115, %struct.sv** %116, i32 10)
  store %struct.sv** %call151, %struct.sv*** %sp, align 8
  br label %if.end.152

if.end.152:                                       ; preds = %if.then.150, %if.end.143
  %117 = load i8*, i8** %stashname, align 8
  %tobool153 = icmp ne i8* %117, null
  br i1 %tobool153, label %if.else.156, label %if.then.154

if.then.154:                                      ; preds = %if.end.152
  %118 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr155 = getelementptr inbounds %struct.sv*, %struct.sv** %118, i32 1
  store %struct.sv** %incdec.ptr155, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %incdec.ptr155, align 8
  br label %if.end.160

if.else.156:                                      ; preds = %if.end.152
  %119 = load i8*, i8** %stashname, align 8
  %call157 = call %struct.sv* @Perl_newSVpv(i8* %119, i64 0)
  %call158 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call157)
  %120 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr159 = getelementptr inbounds %struct.sv*, %struct.sv** %120, i32 1
  store %struct.sv** %incdec.ptr159, %struct.sv*** %sp, align 8
  store %struct.sv* %call158, %struct.sv** %incdec.ptr159, align 8
  br label %if.end.160

if.end.160:                                       ; preds = %if.else.156, %if.then.154
  %121 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u161 = getelementptr inbounds %struct.context, %struct.context* %121, i32 0, i32 1
  %cx_blk162 = bitcast %union.anon* %cx_u161 to %struct.block*
  %blku_oldcop163 = getelementptr inbounds %struct.block, %struct.block* %cx_blk162, i32 0, i32 1
  %122 = load %struct.cop*, %struct.cop** %blku_oldcop163, align 8
  %cop_filegv = getelementptr inbounds %struct.cop, %struct.cop* %122, i32 0, i32 10
  %123 = load %struct.gv*, %struct.gv** %cop_filegv, align 8
  %tobool164 = icmp ne %struct.gv* %123, null
  br i1 %tobool164, label %cond.true.165, label %cond.false.173

cond.true.165:                                    ; preds = %if.end.160
  %124 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u166 = getelementptr inbounds %struct.context, %struct.context* %124, i32 0, i32 1
  %cx_blk167 = bitcast %union.anon* %cx_u166 to %struct.block*
  %blku_oldcop168 = getelementptr inbounds %struct.block, %struct.block* %cx_blk167, i32 0, i32 1
  %125 = load %struct.cop*, %struct.cop** %blku_oldcop168, align 8
  %cop_filegv169 = getelementptr inbounds %struct.cop, %struct.cop* %125, i32 0, i32 10
  %126 = load %struct.gv*, %struct.gv** %cop_filegv169, align 8
  %sv_any170 = getelementptr inbounds %struct.gv, %struct.gv* %126, i32 0, i32 0
  %127 = load %struct.xpvgv*, %struct.xpvgv** %sv_any170, align 8
  %xgv_gp171 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %127, i32 0, i32 7
  %128 = load %struct.gp*, %struct.gp** %xgv_gp171, align 8
  %gp_sv = getelementptr inbounds %struct.gp, %struct.gp* %128, i32 0, i32 0
  %129 = load %struct.sv*, %struct.sv** %gp_sv, align 8
  %tobool172 = icmp ne %struct.sv* %129, null
  br i1 %tobool172, label %cond.true.174, label %cond.false.192

cond.false.173:                                   ; preds = %if.end.160
  br i1 false, label %cond.true.174, label %cond.false.192

cond.true.174:                                    ; preds = %cond.false.173, %cond.true.165
  %130 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u175 = getelementptr inbounds %struct.context, %struct.context* %130, i32 0, i32 1
  %cx_blk176 = bitcast %union.anon* %cx_u175 to %struct.block*
  %blku_oldcop177 = getelementptr inbounds %struct.block, %struct.block* %cx_blk176, i32 0, i32 1
  %131 = load %struct.cop*, %struct.cop** %blku_oldcop177, align 8
  %cop_filegv178 = getelementptr inbounds %struct.cop, %struct.cop* %131, i32 0, i32 10
  %132 = load %struct.gv*, %struct.gv** %cop_filegv178, align 8
  %tobool179 = icmp ne %struct.gv* %132, null
  br i1 %tobool179, label %cond.true.180, label %cond.false.188

cond.true.180:                                    ; preds = %cond.true.174
  %133 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u181 = getelementptr inbounds %struct.context, %struct.context* %133, i32 0, i32 1
  %cx_blk182 = bitcast %union.anon* %cx_u181 to %struct.block*
  %blku_oldcop183 = getelementptr inbounds %struct.block, %struct.block* %cx_blk182, i32 0, i32 1
  %134 = load %struct.cop*, %struct.cop** %blku_oldcop183, align 8
  %cop_filegv184 = getelementptr inbounds %struct.cop, %struct.cop* %134, i32 0, i32 10
  %135 = load %struct.gv*, %struct.gv** %cop_filegv184, align 8
  %sv_any185 = getelementptr inbounds %struct.gv, %struct.gv* %135, i32 0, i32 0
  %136 = load %struct.xpvgv*, %struct.xpvgv** %sv_any185, align 8
  %xgv_gp186 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %136, i32 0, i32 7
  %137 = load %struct.gp*, %struct.gp** %xgv_gp186, align 8
  %gp_sv187 = getelementptr inbounds %struct.gp, %struct.gp* %137, i32 0, i32 0
  %138 = load %struct.sv*, %struct.sv** %gp_sv187, align 8
  br label %cond.end.189

cond.false.188:                                   ; preds = %cond.true.174
  br label %cond.end.189

cond.end.189:                                     ; preds = %cond.false.188, %cond.true.180
  %cond190 = phi %struct.sv* [ %138, %cond.true.180 ], [ null, %cond.false.188 ]
  %sv_any191 = getelementptr inbounds %struct.sv, %struct.sv* %cond190, i32 0, i32 0
  %139 = load i8*, i8** %sv_any191, align 8
  %140 = bitcast i8* %139 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %140, i32 0, i32 0
  %141 = load i8*, i8** %xpv_pv, align 8
  br label %cond.end.193

cond.false.192:                                   ; preds = %cond.false.173, %cond.true.165
  br label %cond.end.193

cond.end.193:                                     ; preds = %cond.false.192, %cond.end.189
  %cond194 = phi i8* [ %141, %cond.end.189 ], [ null, %cond.false.192 ]
  %call195 = call %struct.sv* @Perl_newSVpv(i8* %cond194, i64 0)
  %call196 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call195)
  %142 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr197 = getelementptr inbounds %struct.sv*, %struct.sv** %142, i32 1
  store %struct.sv** %incdec.ptr197, %struct.sv*** %sp, align 8
  store %struct.sv* %call196, %struct.sv** %incdec.ptr197, align 8
  %143 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u198 = getelementptr inbounds %struct.context, %struct.context* %143, i32 0, i32 1
  %cx_blk199 = bitcast %union.anon* %cx_u198 to %struct.block*
  %blku_oldcop200 = getelementptr inbounds %struct.block, %struct.block* %cx_blk199, i32 0, i32 1
  %144 = load %struct.cop*, %struct.cop** %blku_oldcop200, align 8
  %cop_line = getelementptr inbounds %struct.cop, %struct.cop* %144, i32 0, i32 13
  %145 = load i32, i32* %cop_line, align 4
  %conv201 = sext i32 %145 to i64
  %call202 = call %struct.sv* @Perl_newSViv(i64 %conv201)
  %call203 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call202)
  %146 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr204 = getelementptr inbounds %struct.sv*, %struct.sv** %146, i32 1
  store %struct.sv** %incdec.ptr204, %struct.sv*** %sp, align 8
  store %struct.sv* %call203, %struct.sv** %incdec.ptr204, align 8
  %147 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private205 = getelementptr inbounds %struct.op, %struct.op* %147, i32 0, i32 7
  %148 = load i8, i8* %op_private205, align 1
  %conv206 = zext i8 %148 to i32
  %and207 = and i32 %conv206, 15
  %tobool208 = icmp ne i32 %and207, 0
  br i1 %tobool208, label %if.end.211, label %if.then.209

if.then.209:                                      ; preds = %cond.end.193
  %149 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %149, %struct.sv*** @PL_stack_sp, align 8
  %150 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next210 = getelementptr inbounds %struct.op, %struct.op* %150, i32 0, i32 0
  %151 = load %struct.op*, %struct.op** %op_next210, align 8
  store %struct.op* %151, %struct.op** %retval
  br label %return

if.end.211:                                       ; preds = %cond.end.193
  %152 = load %struct.context*, %struct.context** %cx, align 8
  %cx_type212 = getelementptr inbounds %struct.context, %struct.context* %152, i32 0, i32 0
  %153 = load i32, i32* %cx_type212, align 4
  %and213 = and i32 %153, 255
  %cmp214 = icmp eq i32 %and213, 1
  br i1 %cmp214, label %if.then.221, label %lor.lhs.false.216

lor.lhs.false.216:                                ; preds = %if.end.211
  %154 = load %struct.context*, %struct.context** %cx, align 8
  %cx_type217 = getelementptr inbounds %struct.context, %struct.context* %154, i32 0, i32 0
  %155 = load i32, i32* %cx_type217, align 4
  %and218 = and i32 %155, 255
  %cmp219 = icmp eq i32 %and218, 6
  br i1 %cmp219, label %if.then.221, label %if.else.262

if.then.221:                                      ; preds = %lor.lhs.false.216, %if.end.211
  %156 = load i32, i32* %cxix, align 4
  %idxprom222 = sext i32 %156 to i64
  %157 = load %struct.context*, %struct.context** %ccstack, align 8
  %arrayidx223 = getelementptr inbounds %struct.context, %struct.context* %157, i64 %idxprom222
  %cx_u224 = getelementptr inbounds %struct.context, %struct.context* %arrayidx223, i32 0, i32 1
  %cx_blk225 = bitcast %union.anon* %cx_u224 to %struct.block*
  %blk_u226 = getelementptr inbounds %struct.block, %struct.block* %cx_blk225, i32 0, i32 7
  %blku_sub227 = bitcast %union.anon.1* %blk_u226 to %struct.block_sub*
  %cv228 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub227, i32 0, i32 0
  %158 = load %struct.cv*, %struct.cv** %cv228, align 8
  %sv_any229 = getelementptr inbounds %struct.cv, %struct.cv* %158, i32 0, i32 0
  %159 = load %struct.xpvcv*, %struct.xpvcv** %sv_any229, align 8
  %xcv_gv = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %159, i32 0, i32 12
  %160 = load %struct.gv*, %struct.gv** %xcv_gv, align 8
  store %struct.gv* %160, %struct.gv** %cvgv, align 8
  %161 = load %struct.gv*, %struct.gv** %cvgv, align 8
  %sv_flags230 = getelementptr inbounds %struct.gv, %struct.gv* %161, i32 0, i32 2
  %162 = load i32, i32* %sv_flags230, align 4
  %and231 = and i32 %162, 255
  %cmp232 = icmp eq i32 %and231, 13
  br i1 %cmp232, label %if.then.234, label %if.else.247

if.then.234:                                      ; preds = %if.then.221
  %call235 = call %struct.sv* @Perl_newSV(i64 0)
  store %struct.sv* %call235, %struct.sv** %sv, align 8
  %163 = load %struct.sv*, %struct.sv** %sv, align 8
  %164 = load %struct.gv*, %struct.gv** %cvgv, align 8
  call void @Perl_gv_efullname4(%struct.sv* %163, %struct.gv* %164, i8* null, i8 signext 1)
  %165 = load %struct.sv*, %struct.sv** %sv, align 8
  %call236 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %165)
  %166 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr237 = getelementptr inbounds %struct.sv*, %struct.sv** %166, i32 1
  store %struct.sv** %incdec.ptr237, %struct.sv*** %sp, align 8
  store %struct.sv* %call236, %struct.sv** %incdec.ptr237, align 8
  %167 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u238 = getelementptr inbounds %struct.context, %struct.context* %167, i32 0, i32 1
  %cx_blk239 = bitcast %union.anon* %cx_u238 to %struct.block*
  %blk_u240 = getelementptr inbounds %struct.block, %struct.block* %cx_blk239, i32 0, i32 7
  %blku_sub241 = bitcast %union.anon.1* %blk_u240 to %struct.block_sub*
  %hasargs = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub241, i32 0, i32 6
  %168 = load i8, i8* %hasargs, align 1
  %conv242 = zext i8 %168 to i32
  %conv243 = sext i32 %conv242 to i64
  %call244 = call %struct.sv* @Perl_newSViv(i64 %conv243)
  %call245 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call244)
  %169 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr246 = getelementptr inbounds %struct.sv*, %struct.sv** %169, i32 1
  store %struct.sv** %incdec.ptr246, %struct.sv*** %sp, align 8
  store %struct.sv* %call245, %struct.sv** %incdec.ptr246, align 8
  br label %if.end.261

if.else.247:                                      ; preds = %if.then.221
  %call248 = call %struct.sv* @Perl_newSVpvn(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.20, i32 0, i32 0), i64 9)
  %call249 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call248)
  %170 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr250 = getelementptr inbounds %struct.sv*, %struct.sv** %170, i32 1
  store %struct.sv** %incdec.ptr250, %struct.sv*** %sp, align 8
  store %struct.sv* %call249, %struct.sv** %incdec.ptr250, align 8
  %171 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u251 = getelementptr inbounds %struct.context, %struct.context* %171, i32 0, i32 1
  %cx_blk252 = bitcast %union.anon* %cx_u251 to %struct.block*
  %blk_u253 = getelementptr inbounds %struct.block, %struct.block* %cx_blk252, i32 0, i32 7
  %blku_sub254 = bitcast %union.anon.1* %blk_u253 to %struct.block_sub*
  %hasargs255 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub254, i32 0, i32 6
  %172 = load i8, i8* %hasargs255, align 1
  %conv256 = zext i8 %172 to i32
  %conv257 = sext i32 %conv256 to i64
  %call258 = call %struct.sv* @Perl_newSViv(i64 %conv257)
  %call259 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call258)
  %173 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr260 = getelementptr inbounds %struct.sv*, %struct.sv** %173, i32 1
  store %struct.sv** %incdec.ptr260, %struct.sv*** %sp, align 8
  store %struct.sv* %call259, %struct.sv** %incdec.ptr260, align 8
  br label %if.end.261

if.end.261:                                       ; preds = %if.else.247, %if.then.234
  br label %if.end.269

if.else.262:                                      ; preds = %lor.lhs.false.216
  %call263 = call %struct.sv* @Perl_newSVpvn(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.21, i32 0, i32 0), i64 6)
  %call264 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call263)
  %174 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr265 = getelementptr inbounds %struct.sv*, %struct.sv** %174, i32 1
  store %struct.sv** %incdec.ptr265, %struct.sv*** %sp, align 8
  store %struct.sv* %call264, %struct.sv** %incdec.ptr265, align 8
  %call266 = call %struct.sv* @Perl_newSViv(i64 0)
  %call267 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call266)
  %175 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr268 = getelementptr inbounds %struct.sv*, %struct.sv** %175, i32 1
  store %struct.sv** %incdec.ptr268, %struct.sv*** %sp, align 8
  store %struct.sv* %call267, %struct.sv** %incdec.ptr268, align 8
  br label %if.end.269

if.end.269:                                       ; preds = %if.else.262, %if.end.261
  %176 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u270 = getelementptr inbounds %struct.context, %struct.context* %176, i32 0, i32 1
  %cx_blk271 = bitcast %union.anon* %cx_u270 to %struct.block*
  %blku_gimme = getelementptr inbounds %struct.block, %struct.block* %cx_blk271, i32 0, i32 6
  %177 = load i8, i8* %blku_gimme, align 1
  %conv272 = zext i8 %177 to i32
  store i32 %conv272, i32* %gimme, align 4
  %178 = load i32, i32* %gimme, align 4
  %cmp273 = icmp eq i32 %178, 128
  br i1 %cmp273, label %if.then.275, label %if.else.277

if.then.275:                                      ; preds = %if.end.269
  %179 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr276 = getelementptr inbounds %struct.sv*, %struct.sv** %179, i32 1
  store %struct.sv** %incdec.ptr276, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %incdec.ptr276, align 8
  br label %if.end.283

if.else.277:                                      ; preds = %if.end.269
  %180 = load i32, i32* %gimme, align 4
  %and278 = and i32 %180, 1
  %conv279 = sext i32 %and278 to i64
  %call280 = call %struct.sv* @Perl_newSViv(i64 %conv279)
  %call281 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call280)
  %181 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr282 = getelementptr inbounds %struct.sv*, %struct.sv** %181, i32 1
  store %struct.sv** %incdec.ptr282, %struct.sv*** %sp, align 8
  store %struct.sv* %call281, %struct.sv** %incdec.ptr282, align 8
  br label %if.end.283

if.end.283:                                       ; preds = %if.else.277, %if.then.275
  %182 = load %struct.context*, %struct.context** %cx, align 8
  %cx_type284 = getelementptr inbounds %struct.context, %struct.context* %182, i32 0, i32 0
  %183 = load i32, i32* %cx_type284, align 4
  %and285 = and i32 %183, 255
  %cmp286 = icmp eq i32 %and285, 2
  br i1 %cmp286, label %if.then.288, label %if.else.322

if.then.288:                                      ; preds = %if.end.283
  %184 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u289 = getelementptr inbounds %struct.context, %struct.context* %184, i32 0, i32 1
  %cx_blk290 = bitcast %union.anon* %cx_u289 to %struct.block*
  %blk_u291 = getelementptr inbounds %struct.block, %struct.block* %cx_blk290, i32 0, i32 7
  %blku_eval = bitcast %union.anon.1* %blk_u291 to %struct.block_eval*
  %old_op_type = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval, i32 0, i32 1
  %185 = load i32, i32* %old_op_type, align 4
  %cmp292 = icmp eq i32 %185, 311
  br i1 %cmp292, label %if.then.294, label %if.else.301

if.then.294:                                      ; preds = %if.then.288
  %186 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u295 = getelementptr inbounds %struct.context, %struct.context* %186, i32 0, i32 1
  %cx_blk296 = bitcast %union.anon* %cx_u295 to %struct.block*
  %blk_u297 = getelementptr inbounds %struct.block, %struct.block* %cx_blk296, i32 0, i32 7
  %blku_eval298 = bitcast %union.anon.1* %blk_u297 to %struct.block_eval*
  %cur_text = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval298, i32 0, i32 4
  %187 = load %struct.sv*, %struct.sv** %cur_text, align 8
  %188 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr299 = getelementptr inbounds %struct.sv*, %struct.sv** %188, i32 1
  store %struct.sv** %incdec.ptr299, %struct.sv*** %sp, align 8
  store %struct.sv* %187, %struct.sv** %incdec.ptr299, align 8
  %189 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr300 = getelementptr inbounds %struct.sv*, %struct.sv** %189, i32 1
  store %struct.sv** %incdec.ptr300, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_no, %struct.sv** %incdec.ptr300, align 8
  br label %if.end.321

if.else.301:                                      ; preds = %if.then.288
  %190 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u302 = getelementptr inbounds %struct.context, %struct.context* %190, i32 0, i32 1
  %cx_blk303 = bitcast %union.anon* %cx_u302 to %struct.block*
  %blk_u304 = getelementptr inbounds %struct.block, %struct.block* %cx_blk303, i32 0, i32 7
  %blku_eval305 = bitcast %union.anon.1* %blk_u304 to %struct.block_eval*
  %old_namesv = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval305, i32 0, i32 2
  %191 = load %struct.sv*, %struct.sv** %old_namesv, align 8
  %tobool306 = icmp ne %struct.sv* %191, null
  br i1 %tobool306, label %if.then.307, label %if.else.317

if.then.307:                                      ; preds = %if.else.301
  %192 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u308 = getelementptr inbounds %struct.context, %struct.context* %192, i32 0, i32 1
  %cx_blk309 = bitcast %union.anon* %cx_u308 to %struct.block*
  %blk_u310 = getelementptr inbounds %struct.block, %struct.block* %cx_blk309, i32 0, i32 7
  %blku_eval311 = bitcast %union.anon.1* %blk_u310 to %struct.block_eval*
  %old_namesv312 = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval311, i32 0, i32 2
  %193 = load %struct.sv*, %struct.sv** %old_namesv312, align 8
  %call313 = call %struct.sv* @Perl_newSVsv(%struct.sv* %193)
  %call314 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call313)
  %194 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr315 = getelementptr inbounds %struct.sv*, %struct.sv** %194, i32 1
  store %struct.sv** %incdec.ptr315, %struct.sv*** %sp, align 8
  store %struct.sv* %call314, %struct.sv** %incdec.ptr315, align 8
  %195 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr316 = getelementptr inbounds %struct.sv*, %struct.sv** %195, i32 1
  store %struct.sv** %incdec.ptr316, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_yes, %struct.sv** %incdec.ptr316, align 8
  br label %if.end.320

if.else.317:                                      ; preds = %if.else.301
  %196 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr318 = getelementptr inbounds %struct.sv*, %struct.sv** %196, i32 1
  store %struct.sv** %incdec.ptr318, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %incdec.ptr318, align 8
  %197 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr319 = getelementptr inbounds %struct.sv*, %struct.sv** %197, i32 1
  store %struct.sv** %incdec.ptr319, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %incdec.ptr319, align 8
  br label %if.end.320

if.end.320:                                       ; preds = %if.else.317, %if.then.307
  br label %if.end.321

if.end.321:                                       ; preds = %if.end.320, %if.then.294
  br label %if.end.325

if.else.322:                                      ; preds = %if.end.283
  %198 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr323 = getelementptr inbounds %struct.sv*, %struct.sv** %198, i32 1
  store %struct.sv** %incdec.ptr323, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %incdec.ptr323, align 8
  %199 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr324 = getelementptr inbounds %struct.sv*, %struct.sv** %199, i32 1
  store %struct.sv** %incdec.ptr324, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %incdec.ptr324, align 8
  br label %if.end.325

if.end.325:                                       ; preds = %if.else.322, %if.end.321
  %200 = load %struct.context*, %struct.context** %cx, align 8
  %cx_type326 = getelementptr inbounds %struct.context, %struct.context* %200, i32 0, i32 0
  %201 = load i32, i32* %cx_type326, align 4
  %and327 = and i32 %201, 255
  %cmp328 = icmp eq i32 %and327, 1
  br i1 %cmp328, label %land.lhs.true.330, label %if.end.395

land.lhs.true.330:                                ; preds = %if.end.325
  %202 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u331 = getelementptr inbounds %struct.context, %struct.context* %202, i32 0, i32 1
  %cx_blk332 = bitcast %union.anon* %cx_u331 to %struct.block*
  %blk_u333 = getelementptr inbounds %struct.block, %struct.block* %cx_blk332, i32 0, i32 7
  %blku_sub334 = bitcast %union.anon.1* %blk_u333 to %struct.block_sub*
  %hasargs335 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub334, i32 0, i32 6
  %203 = load i8, i8* %hasargs335, align 1
  %conv336 = zext i8 %203 to i32
  %tobool337 = icmp ne i32 %conv336, 0
  br i1 %tobool337, label %land.lhs.true.338, label %if.end.395

land.lhs.true.338:                                ; preds = %land.lhs.true.330
  %204 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_stash339 = getelementptr inbounds %struct.cop, %struct.cop* %204, i32 0, i32 9
  %205 = load %struct.hv*, %struct.hv** %cop_stash339, align 8
  %206 = load %struct.hv*, %struct.hv** @PL_debstash, align 8
  %cmp340 = icmp eq %struct.hv* %205, %206
  br i1 %cmp340, label %if.then.342, label %if.end.395

if.then.342:                                      ; preds = %land.lhs.true.338
  %207 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u343 = getelementptr inbounds %struct.context, %struct.context* %207, i32 0, i32 1
  %cx_blk344 = bitcast %union.anon* %cx_u343 to %struct.block*
  %blk_u345 = getelementptr inbounds %struct.block, %struct.block* %cx_blk344, i32 0, i32 7
  %blku_sub346 = bitcast %union.anon.1* %blk_u345 to %struct.block_sub*
  %argarray = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub346, i32 0, i32 4
  %208 = load %struct.av*, %struct.av** %argarray, align 8
  store %struct.av* %208, %struct.av** %ary, align 8
  %209 = load %struct.av*, %struct.av** %ary, align 8
  %sv_any347 = getelementptr inbounds %struct.av, %struct.av* %209, i32 0, i32 0
  %210 = load %struct.xpvav*, %struct.xpvav** %sv_any347, align 8
  %xav_array = getelementptr inbounds %struct.xpvav, %struct.xpvav* %210, i32 0, i32 0
  %211 = load i8*, i8** %xav_array, align 8
  %212 = bitcast i8* %211 to %struct.sv**
  %213 = load %struct.av*, %struct.av** %ary, align 8
  %sv_any348 = getelementptr inbounds %struct.av, %struct.av* %213, i32 0, i32 0
  %214 = load %struct.xpvav*, %struct.xpvav** %sv_any348, align 8
  %xav_alloc = getelementptr inbounds %struct.xpvav, %struct.xpvav* %214, i32 0, i32 7
  %215 = load %struct.sv**, %struct.sv*** %xav_alloc, align 8
  %sub.ptr.lhs.cast349 = ptrtoint %struct.sv** %212 to i64
  %sub.ptr.rhs.cast350 = ptrtoint %struct.sv** %215 to i64
  %sub.ptr.sub351 = sub i64 %sub.ptr.lhs.cast349, %sub.ptr.rhs.cast350
  %sub.ptr.div352 = sdiv exact i64 %sub.ptr.sub351, 8
  %conv353 = trunc i64 %sub.ptr.div352 to i32
  store i32 %conv353, i32* %off, align 4
  %216 = load %struct.av*, %struct.av** @PL_dbargs, align 8
  %tobool354 = icmp ne %struct.av* %216, null
  br i1 %tobool354, label %if.end.367, label %if.then.355

if.then.355:                                      ; preds = %if.then.342
  %call356 = call %struct.gv* @Perl_gv_fetchpv(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.22, i32 0, i32 0), i32 1, i32 10)
  store %struct.gv* %call356, %struct.gv** %tmpgv, align 8
  %call357 = call %struct.gv* @Perl_gv_AVadd(%struct.gv* %call356)
  %sv_any358 = getelementptr inbounds %struct.gv, %struct.gv* %call357, i32 0, i32 0
  %217 = load %struct.xpvgv*, %struct.xpvgv** %sv_any358, align 8
  %xgv_gp359 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %217, i32 0, i32 7
  %218 = load %struct.gp*, %struct.gp** %xgv_gp359, align 8
  %gp_av = getelementptr inbounds %struct.gp, %struct.gp* %218, i32 0, i32 4
  %219 = load %struct.av*, %struct.av** %gp_av, align 8
  store %struct.av* %219, %struct.av** @PL_dbargs, align 8
  %220 = load %struct.gv*, %struct.gv** %tmpgv, align 8
  %sv_any360 = getelementptr inbounds %struct.gv, %struct.gv* %220, i32 0, i32 0
  %221 = load %struct.xpvgv*, %struct.xpvgv** %sv_any360, align 8
  %xgv_flags = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %221, i32 0, i32 11
  %222 = load i8, i8* %xgv_flags, align 1
  %conv361 = zext i8 %222 to i32
  %or = or i32 %conv361, 2
  %conv362 = trunc i32 %or to i8
  store i8 %conv362, i8* %xgv_flags, align 1
  %223 = load %struct.av*, %struct.av** @PL_dbargs, align 8
  %sv_any363 = getelementptr inbounds %struct.av, %struct.av* %223, i32 0, i32 0
  %224 = load %struct.xpvav*, %struct.xpvav** %sv_any363, align 8
  %xav_flags = getelementptr inbounds %struct.xpvav, %struct.xpvav* %224, i32 0, i32 9
  %225 = load i8, i8* %xav_flags, align 1
  %conv364 = zext i8 %225 to i32
  %and365 = and i32 %conv364, -2
  %conv366 = trunc i32 %and365 to i8
  store i8 %conv366, i8* %xav_flags, align 1
  br label %if.end.367

if.end.367:                                       ; preds = %if.then.355, %if.then.342
  %226 = load %struct.av*, %struct.av** @PL_dbargs, align 8
  %sv_any368 = getelementptr inbounds %struct.av, %struct.av* %226, i32 0, i32 0
  %227 = load %struct.xpvav*, %struct.xpvav** %sv_any368, align 8
  %xav_max = getelementptr inbounds %struct.xpvav, %struct.xpvav* %227, i32 0, i32 2
  %228 = load i64, i64* %xav_max, align 8
  %229 = load %struct.av*, %struct.av** %ary, align 8
  %sv_any369 = getelementptr inbounds %struct.av, %struct.av* %229, i32 0, i32 0
  %230 = load %struct.xpvav*, %struct.xpvav** %sv_any369, align 8
  %xav_fill = getelementptr inbounds %struct.xpvav, %struct.xpvav* %230, i32 0, i32 1
  %231 = load i64, i64* %xav_fill, align 8
  %232 = load i32, i32* %off, align 4
  %conv370 = sext i32 %232 to i64
  %add = add nsw i64 %231, %conv370
  %cmp371 = icmp slt i64 %228, %add
  br i1 %cmp371, label %if.then.373, label %if.end.379

if.then.373:                                      ; preds = %if.end.367
  %233 = load %struct.av*, %struct.av** @PL_dbargs, align 8
  %234 = load %struct.av*, %struct.av** %ary, align 8
  %sv_any374 = getelementptr inbounds %struct.av, %struct.av* %234, i32 0, i32 0
  %235 = load %struct.xpvav*, %struct.xpvav** %sv_any374, align 8
  %xav_fill375 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %235, i32 0, i32 1
  %236 = load i64, i64* %xav_fill375, align 8
  %237 = load i32, i32* %off, align 4
  %conv376 = sext i32 %237 to i64
  %add377 = add nsw i64 %236, %conv376
  %conv378 = trunc i64 %add377 to i32
  call void @Perl_av_extend(%struct.av* %233, i32 %conv378)
  br label %if.end.379

if.end.379:                                       ; preds = %if.then.373, %if.end.367
  %238 = load %struct.av*, %struct.av** @PL_dbargs, align 8
  %sv_any380 = getelementptr inbounds %struct.av, %struct.av* %238, i32 0, i32 0
  %239 = load %struct.xpvav*, %struct.xpvav** %sv_any380, align 8
  %xav_array381 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %239, i32 0, i32 0
  %240 = load i8*, i8** %xav_array381, align 8
  %241 = bitcast i8* %240 to %struct.sv**
  %242 = bitcast %struct.sv** %241 to i8*
  %243 = load %struct.av*, %struct.av** %ary, align 8
  %sv_any382 = getelementptr inbounds %struct.av, %struct.av* %243, i32 0, i32 0
  %244 = load %struct.xpvav*, %struct.xpvav** %sv_any382, align 8
  %xav_alloc383 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %244, i32 0, i32 7
  %245 = load %struct.sv**, %struct.sv*** %xav_alloc383, align 8
  %246 = bitcast %struct.sv** %245 to i8*
  %247 = load %struct.av*, %struct.av** %ary, align 8
  %sv_any384 = getelementptr inbounds %struct.av, %struct.av* %247, i32 0, i32 0
  %248 = load %struct.xpvav*, %struct.xpvav** %sv_any384, align 8
  %xav_fill385 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %248, i32 0, i32 1
  %249 = load i64, i64* %xav_fill385, align 8
  %add386 = add nsw i64 %249, 1
  %250 = load i32, i32* %off, align 4
  %conv387 = sext i32 %250 to i64
  %add388 = add nsw i64 %add386, %conv387
  %mul = mul i64 %add388, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %242, i8* %246, i64 %mul, i32 1, i1 false)
  %251 = load %struct.av*, %struct.av** %ary, align 8
  %sv_any389 = getelementptr inbounds %struct.av, %struct.av* %251, i32 0, i32 0
  %252 = load %struct.xpvav*, %struct.xpvav** %sv_any389, align 8
  %xav_fill390 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %252, i32 0, i32 1
  %253 = load i64, i64* %xav_fill390, align 8
  %254 = load i32, i32* %off, align 4
  %conv391 = sext i32 %254 to i64
  %add392 = add nsw i64 %253, %conv391
  %255 = load %struct.av*, %struct.av** @PL_dbargs, align 8
  %sv_any393 = getelementptr inbounds %struct.av, %struct.av* %255, i32 0, i32 0
  %256 = load %struct.xpvav*, %struct.xpvav** %sv_any393, align 8
  %xav_fill394 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %256, i32 0, i32 1
  store i64 %add392, i64* %xav_fill394, align 8
  br label %if.end.395

if.end.395:                                       ; preds = %if.end.379, %land.lhs.true.338, %land.lhs.true.330, %if.end.325
  %257 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u396 = getelementptr inbounds %struct.context, %struct.context* %257, i32 0, i32 1
  %cx_blk397 = bitcast %union.anon* %cx_u396 to %struct.block*
  %blku_oldcop398 = getelementptr inbounds %struct.block, %struct.block* %cx_blk397, i32 0, i32 1
  %258 = load %struct.cop*, %struct.cop** %blku_oldcop398, align 8
  %op_private399 = getelementptr inbounds %struct.cop, %struct.cop* %258, i32 0, i32 7
  %259 = load i8, i8* %op_private399, align 1
  %conv400 = zext i8 %259 to i32
  %and401 = and i32 %conv400, 255
  %conv402 = sext i32 %and401 to i64
  %call403 = call %struct.sv* @Perl_newSViv(i64 %conv402)
  %call404 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call403)
  %260 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr405 = getelementptr inbounds %struct.sv*, %struct.sv** %260, i32 1
  store %struct.sv** %incdec.ptr405, %struct.sv*** %sp, align 8
  store %struct.sv* %call404, %struct.sv** %incdec.ptr405, align 8
  %261 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u406 = getelementptr inbounds %struct.context, %struct.context* %261, i32 0, i32 1
  %cx_blk407 = bitcast %union.anon* %cx_u406 to %struct.block*
  %blku_oldcop408 = getelementptr inbounds %struct.block, %struct.block* %cx_blk407, i32 0, i32 1
  %262 = load %struct.cop*, %struct.cop** %blku_oldcop408, align 8
  %cop_warnings = getelementptr inbounds %struct.cop, %struct.cop* %262, i32 0, i32 14
  %263 = load %struct.sv*, %struct.sv** %cop_warnings, align 8
  store %struct.sv* %263, %struct.sv** %old_warnings, align 8
  %264 = load %struct.sv*, %struct.sv** %old_warnings, align 8
  %cmp409 = icmp eq %struct.sv* %264, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 2)
  br i1 %cmp409, label %if.then.419, label %lor.lhs.false.411

lor.lhs.false.411:                                ; preds = %if.end.395
  %265 = load %struct.sv*, %struct.sv** %old_warnings, align 8
  %cmp412 = icmp eq %struct.sv* %265, null
  br i1 %cmp412, label %land.lhs.true.414, label %if.else.421

land.lhs.true.414:                                ; preds = %lor.lhs.false.411
  %266 = load i8, i8* @PL_dowarn, align 1
  %conv415 = zext i8 %266 to i32
  %and416 = and i32 %conv415, 1
  %cmp417 = icmp eq i32 %and416, 0
  br i1 %cmp417, label %if.then.419, label %if.else.421

if.then.419:                                      ; preds = %land.lhs.true.414, %if.end.395
  %call420 = call %struct.sv* @Perl_newSVpvn(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.23, i32 0, i32 0), i64 12)
  store %struct.sv* %call420, %struct.sv** %mask, align 8
  br label %if.end.445

if.else.421:                                      ; preds = %land.lhs.true.414, %lor.lhs.false.411
  %267 = load %struct.sv*, %struct.sv** %old_warnings, align 8
  %cmp422 = icmp eq %struct.sv* %267, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 1)
  br i1 %cmp422, label %if.then.431, label %lor.lhs.false.424

lor.lhs.false.424:                                ; preds = %if.else.421
  %268 = load %struct.sv*, %struct.sv** %old_warnings, align 8
  %cmp425 = icmp eq %struct.sv* %268, null
  br i1 %cmp425, label %land.lhs.true.427, label %if.else.442

land.lhs.true.427:                                ; preds = %lor.lhs.false.424
  %269 = load i8, i8* @PL_dowarn, align 1
  %conv428 = zext i8 %269 to i32
  %and429 = and i32 %conv428, 1
  %tobool430 = icmp ne i32 %and429, 0
  br i1 %tobool430, label %if.then.431, label %if.else.442

if.then.431:                                      ; preds = %land.lhs.true.427, %if.else.421
  %call432 = call %struct.hv* @Perl_get_hv(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.24, i32 0, i32 0), i32 0)
  store %struct.hv* %call432, %struct.hv** %bits, align 8
  %270 = load %struct.hv*, %struct.hv** %bits, align 8
  %tobool433 = icmp ne %struct.hv* %270, null
  br i1 %tobool433, label %land.lhs.true.434, label %if.else.439

land.lhs.true.434:                                ; preds = %if.then.431
  %271 = load %struct.hv*, %struct.hv** %bits, align 8
  %call435 = call %struct.sv** @Perl_hv_fetch(%struct.hv* %271, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.25, i32 0, i32 0), i32 3, i32 0)
  store %struct.sv** %call435, %struct.sv*** %bits_all, align 8
  %tobool436 = icmp ne %struct.sv** %call435, null
  br i1 %tobool436, label %if.then.437, label %if.else.439

if.then.437:                                      ; preds = %land.lhs.true.434
  %272 = load %struct.sv**, %struct.sv*** %bits_all, align 8
  %273 = load %struct.sv*, %struct.sv** %272, align 8
  %call438 = call %struct.sv* @Perl_newSVsv(%struct.sv* %273)
  store %struct.sv* %call438, %struct.sv** %mask, align 8
  br label %if.end.441

if.else.439:                                      ; preds = %land.lhs.true.434, %if.then.431
  %call440 = call %struct.sv* @Perl_newSVpvn(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.26, i32 0, i32 0), i64 12)
  store %struct.sv* %call440, %struct.sv** %mask, align 8
  br label %if.end.441

if.end.441:                                       ; preds = %if.else.439, %if.then.437
  br label %if.end.444

if.else.442:                                      ; preds = %land.lhs.true.427, %lor.lhs.false.424
  %274 = load %struct.sv*, %struct.sv** %old_warnings, align 8
  %call443 = call %struct.sv* @Perl_newSVsv(%struct.sv* %274)
  store %struct.sv* %call443, %struct.sv** %mask, align 8
  br label %if.end.444

if.end.444:                                       ; preds = %if.else.442, %if.end.441
  br label %if.end.445

if.end.445:                                       ; preds = %if.end.444, %if.then.419
  %275 = load %struct.sv*, %struct.sv** %mask, align 8
  %call446 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %275)
  %276 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr447 = getelementptr inbounds %struct.sv*, %struct.sv** %276, i32 1
  store %struct.sv** %incdec.ptr447, %struct.sv*** %sp, align 8
  store %struct.sv* %call446, %struct.sv** %incdec.ptr447, align 8
  %277 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %277, %struct.sv*** @PL_stack_sp, align 8
  %278 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next448 = getelementptr inbounds %struct.op, %struct.op* %278, i32 0, i32 0
  %279 = load %struct.op*, %struct.op** %op_next448, align 8
  store %struct.op* %279, %struct.op** %retval
  br label %return

return:                                           ; preds = %if.end.445, %if.then.209, %if.end.141, %if.end.37, %if.end.35
  %280 = load %struct.op*, %struct.op** %retval
  ret %struct.op* %280
}

; Function Attrs: nounwind uwtable
define internal i32 @S_dopoptosub_at(%struct.context* %cxstk, i32 %startingblock) #0 {
entry:
  %retval = alloca i32, align 4
  %cxstk.addr = alloca %struct.context*, align 8
  %startingblock.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %cx = alloca %struct.context*, align 8
  store %struct.context* %cxstk, %struct.context** %cxstk.addr, align 8
  store i32 %startingblock, i32* %startingblock.addr, align 4
  %0 = load i32, i32* %startingblock.addr, align 4
  store i32 %0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp sge i32 %1, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %idxprom = sext i32 %2 to i64
  %3 = load %struct.context*, %struct.context** %cxstk.addr, align 8
  %arrayidx = getelementptr inbounds %struct.context, %struct.context* %3, i64 %idxprom
  store %struct.context* %arrayidx, %struct.context** %cx, align 8
  %4 = load %struct.context*, %struct.context** %cx, align 8
  %cx_type = getelementptr inbounds %struct.context, %struct.context* %4, i32 0, i32 0
  %5 = load i32, i32* %cx_type, align 4
  %and = and i32 %5, 255
  switch i32 %and, label %sw.default [
    i32 2, label %sw.bb
    i32 1, label %sw.bb
    i32 6, label %sw.bb
  ]

sw.default:                                       ; preds = %for.body
  br label %for.inc

sw.bb:                                            ; preds = %for.body, %for.body, %for.body
  %6 = load i32, i32* %i, align 4
  store i32 %6, i32* %retval
  br label %return

for.inc:                                          ; preds = %sw.default
  %7 = load i32, i32* %i, align 4
  %dec = add nsw i32 %7, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %8 = load i32, i32* %i, align 4
  store i32 %8, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %sw.bb
  %9 = load i32, i32* %retval
  ret i32 %9
}

declare %struct.sv* @Perl_newSVpv(i8*, i64) #1

declare %struct.sv* @Perl_newSV(i64) #1

declare void @Perl_gv_efullname4(%struct.sv*, %struct.gv*, i8*, i8 signext) #1

declare %struct.gv* @Perl_gv_AVadd(%struct.gv*) #1

; Function Attrs: nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #2

declare %struct.hv* @Perl_get_hv(i8*, i32) #1

declare %struct.sv** @Perl_hv_fetch(%struct.hv*, i8*, i32, i32) #1

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_reset() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %tmps = alloca i8*, align 8
  %n_a = alloca i64, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 7
  %2 = load i8, i8* %op_private, align 1
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 15
  %cmp = icmp slt i32 %and, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.11, i32 0, i32 0), i8** %tmps, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  %3 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %3, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %4 = load %struct.sv*, %struct.sv** %3, align 8
  store %struct.sv* %4, %struct.sv** @PL_Sv, align 8
  %5 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 2
  %6 = load i32, i32* %sv_flags, align 4
  %and2 = and i32 %6, 262144
  %cmp3 = icmp eq i32 %and2, 262144
  br i1 %cmp3, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else
  %7 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 0
  %8 = load i8*, i8** %sv_any, align 8
  %9 = bitcast i8* %8 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %9, i32 0, i32 1
  %10 = load i64, i64* %xpv_cur, align 8
  store i64 %10, i64* %n_a, align 8
  %11 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any5 = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 0
  %12 = load i8*, i8** %sv_any5, align 8
  %13 = bitcast i8* %12 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %13, i32 0, i32 0
  %14 = load i8*, i8** %xpv_pv, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.else
  %15 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %call = call i8* @Perl_sv_2pv_flags(%struct.sv* %15, i64* %n_a, i32 2)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %14, %cond.true ], [ %call, %cond.false ]
  store i8* %cond, i8** %tmps, align 8
  br label %if.end

if.end:                                           ; preds = %cond.end, %if.then
  %16 = load i8*, i8** %tmps, align 8
  %17 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_stash = getelementptr inbounds %struct.cop, %struct.cop* %17, i32 0, i32 9
  %18 = load %struct.hv*, %struct.hv** %cop_stash, align 8
  call void @Perl_sv_reset(i8* %16, %struct.hv* %18)
  %19 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr6 = getelementptr inbounds %struct.sv*, %struct.sv** %19, i32 1
  store %struct.sv** %incdec.ptr6, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_yes, %struct.sv** %incdec.ptr6, align 8
  %20 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %20, %struct.sv*** @PL_stack_sp, align 8
  %21 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %21, i32 0, i32 0
  %22 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %22
}

declare void @Perl_sv_reset(i8*, %struct.hv*) #1

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_lineseq() #0 {
entry:
  %0 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 0
  %1 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %1
}

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_dbstate() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %cv = alloca %struct.cv*, align 8
  %cx = alloca %struct.context*, align 8
  %gimme = alloca i32, align 4
  %hasargs = alloca i8, align 1
  %gv = alloca %struct.gv*, align 8
  %tmp = alloca i32, align 4
  %tmp135 = alloca i32, align 4
  %0 = load %struct.op*, %struct.op** @PL_op, align 8
  %1 = bitcast %struct.op* %0 to %struct.cop*
  store volatile %struct.cop* %1, %struct.cop** @PL_curcop, align 8
  store i8 0, i8* @PL_tainted, align 1
  %2 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %3 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %3, i32 0, i32 2
  %4 = load i32, i32* %si_cxix, align 4
  %idxprom = sext i32 %4 to i64
  %5 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxstack = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %5, i32 0, i32 1
  %6 = load %struct.context*, %struct.context** %si_cxstack, align 8
  %arrayidx = getelementptr inbounds %struct.context, %struct.context* %6, i64 %idxprom
  %cx_u = getelementptr inbounds %struct.context, %struct.context* %arrayidx, i32 0, i32 1
  %cx_blk = bitcast %union.anon* %cx_u to %struct.block*
  %blku_oldsp = getelementptr inbounds %struct.block, %struct.block* %cx_blk, i32 0, i32 0
  %7 = load i32, i32* %blku_oldsp, align 4
  %idx.ext = sext i32 %7 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %2, i64 %idx.ext
  store %struct.sv** %add.ptr, %struct.sv*** @PL_stack_sp, align 8
  %8 = load i32, i32* @PL_tmps_ix, align 4
  %9 = load i32, i32* @PL_tmps_floor, align 4
  %cmp = icmp sgt i32 %8, %9
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @Perl_free_tmps()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %10 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %10, i32 0, i32 6
  %11 = load i8, i8* %op_flags, align 1
  %conv = zext i8 %11 to i32
  %and = and i32 %conv, 128
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then.27, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %12 = load %struct.sv*, %struct.sv** @PL_DBsingle, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 2
  %13 = load i32, i32* %sv_flags, align 4
  %and1 = and i32 %13, 65536
  %tobool2 = icmp ne i32 %and1, 0
  br i1 %tobool2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false
  %14 = load %struct.sv*, %struct.sv** @PL_DBsingle, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 0
  %15 = load i8*, i8** %sv_any, align 8
  %16 = bitcast i8* %15 to %struct.xpviv*
  %xiv_iv = getelementptr inbounds %struct.xpviv, %struct.xpviv* %16, i32 0, i32 3
  %17 = load i64, i64* %xiv_iv, align 8
  %tobool3 = icmp ne i64 %17, 0
  br i1 %tobool3, label %if.then.27, label %lor.lhs.false.5

cond.false:                                       ; preds = %lor.lhs.false
  %18 = load %struct.sv*, %struct.sv** @PL_DBsingle, align 8
  %call = call i64 @Perl_sv_2iv(%struct.sv* %18)
  %tobool4 = icmp ne i64 %call, 0
  br i1 %tobool4, label %if.then.27, label %lor.lhs.false.5

lor.lhs.false.5:                                  ; preds = %cond.false, %cond.true
  %19 = load %struct.sv*, %struct.sv** @PL_DBsignal, align 8
  %sv_flags6 = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 2
  %20 = load i32, i32* %sv_flags6, align 4
  %and7 = and i32 %20, 65536
  %tobool8 = icmp ne i32 %and7, 0
  br i1 %tobool8, label %cond.true.9, label %cond.false.13

cond.true.9:                                      ; preds = %lor.lhs.false.5
  %21 = load %struct.sv*, %struct.sv** @PL_DBsignal, align 8
  %sv_any10 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 0
  %22 = load i8*, i8** %sv_any10, align 8
  %23 = bitcast i8* %22 to %struct.xpviv*
  %xiv_iv11 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %23, i32 0, i32 3
  %24 = load i64, i64* %xiv_iv11, align 8
  %tobool12 = icmp ne i64 %24, 0
  br i1 %tobool12, label %if.then.27, label %lor.lhs.false.16

cond.false.13:                                    ; preds = %lor.lhs.false.5
  %25 = load %struct.sv*, %struct.sv** @PL_DBsignal, align 8
  %call14 = call i64 @Perl_sv_2iv(%struct.sv* %25)
  %tobool15 = icmp ne i64 %call14, 0
  br i1 %tobool15, label %if.then.27, label %lor.lhs.false.16

lor.lhs.false.16:                                 ; preds = %cond.false.13, %cond.true.9
  %26 = load %struct.sv*, %struct.sv** @PL_DBtrace, align 8
  %sv_flags17 = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 2
  %27 = load i32, i32* %sv_flags17, align 4
  %and18 = and i32 %27, 65536
  %tobool19 = icmp ne i32 %and18, 0
  br i1 %tobool19, label %cond.true.20, label %cond.false.24

cond.true.20:                                     ; preds = %lor.lhs.false.16
  %28 = load %struct.sv*, %struct.sv** @PL_DBtrace, align 8
  %sv_any21 = getelementptr inbounds %struct.sv, %struct.sv* %28, i32 0, i32 0
  %29 = load i8*, i8** %sv_any21, align 8
  %30 = bitcast i8* %29 to %struct.xpviv*
  %xiv_iv22 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %30, i32 0, i32 3
  %31 = load i64, i64* %xiv_iv22, align 8
  %tobool23 = icmp ne i64 %31, 0
  br i1 %tobool23, label %if.then.27, label %if.else

cond.false.24:                                    ; preds = %lor.lhs.false.16
  %32 = load %struct.sv*, %struct.sv** @PL_DBtrace, align 8
  %call25 = call i64 @Perl_sv_2iv(%struct.sv* %32)
  %tobool26 = icmp ne i64 %call25, 0
  br i1 %tobool26, label %if.then.27, label %if.else

if.then.27:                                       ; preds = %cond.false.24, %cond.true.20, %cond.false.13, %cond.true.9, %cond.false, %cond.true, %if.end
  %33 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %33, %struct.sv*** %sp, align 8
  store i32 1, i32* %gimme, align 4
  %34 = load %struct.gv*, %struct.gv** @PL_DBgv, align 8
  store %struct.gv* %34, %struct.gv** %gv, align 8
  %35 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any28 = getelementptr inbounds %struct.gv, %struct.gv* %35, i32 0, i32 0
  %36 = load %struct.xpvgv*, %struct.xpvgv** %sv_any28, align 8
  %xgv_gp = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %36, i32 0, i32 7
  %37 = load %struct.gp*, %struct.gp** %xgv_gp, align 8
  %gp_cv = getelementptr inbounds %struct.gp, %struct.gp* %37, i32 0, i32 7
  %38 = load %struct.cv*, %struct.cv** %gp_cv, align 8
  store %struct.cv* %38, %struct.cv** %cv, align 8
  %39 = load %struct.cv*, %struct.cv** %cv, align 8
  %tobool29 = icmp ne %struct.cv* %39, null
  br i1 %tobool29, label %if.end.32, label %if.then.30

if.then.30:                                       ; preds = %if.then.27
  %call31 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.27, i32 0, i32 0))
  store %struct.op* %call31, %struct.op** %retval
  br label %return

if.end.32:                                        ; preds = %if.then.27
  %40 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any33 = getelementptr inbounds %struct.cv, %struct.cv* %40, i32 0, i32 0
  %41 = load %struct.xpvcv*, %struct.xpvcv** %sv_any33, align 8
  %xcv_depth = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %41, i32 0, i32 14
  %42 = load i64, i64* %xcv_depth, align 8
  %cmp34 = icmp sge i64 %42, 1
  br i1 %cmp34, label %land.lhs.true, label %if.end.39

land.lhs.true:                                    ; preds = %if.end.32
  %43 = load volatile i32, i32* @PL_debug, align 4
  %and36 = and i32 %43, 1073741824
  %tobool37 = icmp ne i32 %and36, 0
  br i1 %tobool37, label %if.end.39, label %if.then.38

if.then.38:                                       ; preds = %land.lhs.true
  %44 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %44, i32 0, i32 0
  %45 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %45, %struct.op** %retval
  br label %return

if.end.39:                                        ; preds = %land.lhs.true, %if.end.32
  call void @Perl_push_scope()
  call void @Perl_save_int(i32* @PL_tmps_floor)
  %46 = load i32, i32* @PL_tmps_ix, align 4
  store i32 %46, i32* @PL_tmps_floor, align 4
  call void @Perl_save_I32(i32* @PL_debug)
  %47 = load i32, i32* @PL_savestack_ix, align 4
  %add = add nsw i32 %47, 2
  %48 = load i32, i32* @PL_savestack_max, align 4
  %cmp40 = icmp sgt i32 %add, %48
  br i1 %cmp40, label %if.then.42, label %if.end.43

if.then.42:                                       ; preds = %if.end.39
  call void @Perl_savestack_grow()
  br label %if.end.43

if.end.43:                                        ; preds = %if.then.42, %if.end.39
  %49 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  %50 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %49 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %50 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %conv44 = trunc i64 %sub.ptr.div to i32
  %51 = load i32, i32* @PL_savestack_ix, align 4
  %inc = add nsw i32 %51, 1
  store i32 %inc, i32* @PL_savestack_ix, align 4
  %idxprom45 = sext i32 %51 to i64
  %52 = load %union.any*, %union.any** @PL_savestack, align 8
  %arrayidx46 = getelementptr inbounds %union.any, %union.any* %52, i64 %idxprom45
  %any_i32 = bitcast %union.any* %arrayidx46 to i32*
  store i32 %conv44, i32* %any_i32, align 4
  %53 = load i32, i32* @PL_savestack_ix, align 4
  %inc47 = add nsw i32 %53, 1
  store i32 %inc47, i32* @PL_savestack_ix, align 4
  %idxprom48 = sext i32 %53 to i64
  %54 = load %union.any*, %union.any** @PL_savestack, align 8
  %arrayidx49 = getelementptr inbounds %union.any, %union.any* %54, i64 %idxprom48
  %any_i3250 = bitcast %union.any* %arrayidx49 to i32*
  store i32 22, i32* %any_i3250, align 4
  store i32 22, i32* %tmp
  %55 = load i32, i32* %tmp
  store volatile i32 0, i32* @PL_debug, align 4
  store i8 0, i8* %hasargs, align 1
  %56 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %56, %struct.sv*** %sp, align 8
  %57 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next51 = getelementptr inbounds %struct.op, %struct.op* %57, i32 0, i32 0
  %58 = load %struct.op*, %struct.op** %op_next51, align 8
  call void @Perl_push_return(%struct.op* %58)
  %59 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix52 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %59, i32 0, i32 2
  %60 = load i32, i32* %si_cxix52, align 4
  %61 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxmax = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %61, i32 0, i32 3
  %62 = load i32, i32* %si_cxmax, align 4
  %cmp53 = icmp slt i32 %60, %62
  br i1 %cmp53, label %cond.true.55, label %cond.false.58

cond.true.55:                                     ; preds = %if.end.43
  %63 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix56 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %63, i32 0, i32 2
  %64 = load i32, i32* %si_cxix56, align 4
  %inc57 = add nsw i32 %64, 1
  store i32 %inc57, i32* %si_cxix56, align 4
  br label %cond.end

cond.false.58:                                    ; preds = %if.end.43
  %call59 = call i32 @Perl_cxinc()
  %65 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix60 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %65, i32 0, i32 2
  store i32 %call59, i32* %si_cxix60, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false.58, %cond.true.55
  %cond = phi i32 [ %inc57, %cond.true.55 ], [ %call59, %cond.false.58 ]
  %66 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix61 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %66, i32 0, i32 2
  %67 = load i32, i32* %si_cxix61, align 4
  %idxprom62 = sext i32 %67 to i64
  %68 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxstack63 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %68, i32 0, i32 1
  %69 = load %struct.context*, %struct.context** %si_cxstack63, align 8
  %arrayidx64 = getelementptr inbounds %struct.context, %struct.context* %69, i64 %idxprom62
  store %struct.context* %arrayidx64, %struct.context** %cx, align 8
  %70 = load %struct.context*, %struct.context** %cx, align 8
  %cx_type = getelementptr inbounds %struct.context, %struct.context* %70, i32 0, i32 0
  store i32 1, i32* %cx_type, align 4
  %71 = load %struct.sv**, %struct.sv*** %sp, align 8
  %72 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast65 = ptrtoint %struct.sv** %71 to i64
  %sub.ptr.rhs.cast66 = ptrtoint %struct.sv** %72 to i64
  %sub.ptr.sub67 = sub i64 %sub.ptr.lhs.cast65, %sub.ptr.rhs.cast66
  %sub.ptr.div68 = sdiv exact i64 %sub.ptr.sub67, 8
  %conv69 = trunc i64 %sub.ptr.div68 to i32
  %73 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u70 = getelementptr inbounds %struct.context, %struct.context* %73, i32 0, i32 1
  %cx_blk71 = bitcast %union.anon* %cx_u70 to %struct.block*
  %blku_oldsp72 = getelementptr inbounds %struct.block, %struct.block* %cx_blk71, i32 0, i32 0
  store i32 %conv69, i32* %blku_oldsp72, align 4
  %74 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %75 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u73 = getelementptr inbounds %struct.context, %struct.context* %75, i32 0, i32 1
  %cx_blk74 = bitcast %union.anon* %cx_u73 to %struct.block*
  %blku_oldcop = getelementptr inbounds %struct.block, %struct.block* %cx_blk74, i32 0, i32 1
  store %struct.cop* %74, %struct.cop** %blku_oldcop, align 8
  %76 = load i32*, i32** @PL_markstack_ptr, align 8
  %77 = load i32*, i32** @PL_markstack, align 8
  %sub.ptr.lhs.cast75 = ptrtoint i32* %76 to i64
  %sub.ptr.rhs.cast76 = ptrtoint i32* %77 to i64
  %sub.ptr.sub77 = sub i64 %sub.ptr.lhs.cast75, %sub.ptr.rhs.cast76
  %sub.ptr.div78 = sdiv exact i64 %sub.ptr.sub77, 4
  %conv79 = trunc i64 %sub.ptr.div78 to i32
  %78 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u80 = getelementptr inbounds %struct.context, %struct.context* %78, i32 0, i32 1
  %cx_blk81 = bitcast %union.anon* %cx_u80 to %struct.block*
  %blku_oldmarksp = getelementptr inbounds %struct.block, %struct.block* %cx_blk81, i32 0, i32 3
  store i32 %conv79, i32* %blku_oldmarksp, align 4
  %79 = load i32, i32* @PL_scopestack_ix, align 4
  %80 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u82 = getelementptr inbounds %struct.context, %struct.context* %80, i32 0, i32 1
  %cx_blk83 = bitcast %union.anon* %cx_u82 to %struct.block*
  %blku_oldscopesp = getelementptr inbounds %struct.block, %struct.block* %cx_blk83, i32 0, i32 4
  store i32 %79, i32* %blku_oldscopesp, align 4
  %81 = load i32, i32* @PL_retstack_ix, align 4
  %82 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u84 = getelementptr inbounds %struct.context, %struct.context* %82, i32 0, i32 1
  %cx_blk85 = bitcast %union.anon* %cx_u84 to %struct.block*
  %blku_oldretsp = getelementptr inbounds %struct.block, %struct.block* %cx_blk85, i32 0, i32 2
  store i32 %81, i32* %blku_oldretsp, align 4
  %83 = load %struct.pmop*, %struct.pmop** @PL_curpm, align 8
  %84 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u86 = getelementptr inbounds %struct.context, %struct.context* %84, i32 0, i32 1
  %cx_blk87 = bitcast %union.anon* %cx_u86 to %struct.block*
  %blku_oldpm = getelementptr inbounds %struct.block, %struct.block* %cx_blk87, i32 0, i32 5
  store %struct.pmop* %83, %struct.pmop** %blku_oldpm, align 8
  %85 = load i32, i32* %gimme, align 4
  %conv88 = trunc i32 %85 to i8
  %86 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u89 = getelementptr inbounds %struct.context, %struct.context* %86, i32 0, i32 1
  %cx_blk90 = bitcast %union.anon* %cx_u89 to %struct.block*
  %blku_gimme = getelementptr inbounds %struct.block, %struct.block* %cx_blk90, i32 0, i32 6
  store i8 %conv88, i8* %blku_gimme, align 1
  %87 = load %struct.cv*, %struct.cv** %cv, align 8
  %88 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u91 = getelementptr inbounds %struct.context, %struct.context* %88, i32 0, i32 1
  %cx_blk92 = bitcast %union.anon* %cx_u91 to %struct.block*
  %blk_u = getelementptr inbounds %struct.block, %struct.block* %cx_blk92, i32 0, i32 7
  %blku_sub = bitcast %union.anon.1* %blk_u to %struct.block_sub*
  %cv93 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub, i32 0, i32 0
  store %struct.cv* %87, %struct.cv** %cv93, align 8
  %89 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any94 = getelementptr inbounds %struct.cv, %struct.cv* %89, i32 0, i32 0
  %90 = load %struct.xpvcv*, %struct.xpvcv** %sv_any94, align 8
  %xcv_depth95 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %90, i32 0, i32 14
  %91 = load i64, i64* %xcv_depth95, align 8
  %92 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u96 = getelementptr inbounds %struct.context, %struct.context* %92, i32 0, i32 1
  %cx_blk97 = bitcast %union.anon* %cx_u96 to %struct.block*
  %blk_u98 = getelementptr inbounds %struct.block, %struct.block* %cx_blk97, i32 0, i32 7
  %blku_sub99 = bitcast %union.anon.1* %blk_u98 to %struct.block_sub*
  %olddepth = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub99, i32 0, i32 5
  store i64 %91, i64* %olddepth, align 8
  %93 = load i8, i8* %hasargs, align 1
  %94 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u100 = getelementptr inbounds %struct.context, %struct.context* %94, i32 0, i32 1
  %cx_blk101 = bitcast %union.anon* %cx_u100 to %struct.block*
  %blk_u102 = getelementptr inbounds %struct.block, %struct.block* %cx_blk101, i32 0, i32 7
  %blku_sub103 = bitcast %union.anon.1* %blk_u102 to %struct.block_sub*
  %hasargs104 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub103, i32 0, i32 6
  store i8 %93, i8* %hasargs104, align 1
  %95 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any105 = getelementptr inbounds %struct.cv, %struct.cv* %95, i32 0, i32 0
  %96 = load %struct.xpvcv*, %struct.xpvcv** %sv_any105, align 8
  %xcv_depth106 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %96, i32 0, i32 14
  %97 = load i64, i64* %xcv_depth106, align 8
  %tobool107 = icmp ne i64 %97, 0
  br i1 %tobool107, label %if.end.119, label %if.then.108

if.then.108:                                      ; preds = %cond.end
  %98 = load %struct.cv*, %struct.cv** %cv, align 8
  %99 = bitcast %struct.cv* %98 to %struct.sv*
  store %struct.sv* %99, %struct.sv** @PL_Sv, align 8
  %100 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %tobool109 = icmp ne %struct.sv* %100, null
  br i1 %tobool109, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then.108
  %101 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %101, i32 0, i32 1
  %102 = load i32, i32* %sv_refcnt, align 4
  %inc110 = add i32 %102, 1
  store i32 %inc110, i32* %sv_refcnt, align 4
  %tobool111 = icmp ne i32 %inc110, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then.108
  %103 = phi i1 [ false, %if.then.108 ], [ %tobool111, %land.rhs ]
  %land.ext = zext i1 %103 to i32
  %104 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %105 = load %struct.cv*, %struct.cv** %cv, align 8
  %106 = bitcast %struct.cv* %105 to %struct.sv*
  store %struct.sv* %106, %struct.sv** @PL_Sv, align 8
  %107 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %tobool112 = icmp ne %struct.sv* %107, null
  br i1 %tobool112, label %land.rhs.113, label %land.end.117

land.rhs.113:                                     ; preds = %land.end
  %108 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_refcnt114 = getelementptr inbounds %struct.sv, %struct.sv* %108, i32 0, i32 1
  %109 = load i32, i32* %sv_refcnt114, align 4
  %inc115 = add i32 %109, 1
  store i32 %inc115, i32* %sv_refcnt114, align 4
  %tobool116 = icmp ne i32 %inc115, 0
  br label %land.end.117

land.end.117:                                     ; preds = %land.rhs.113, %land.end
  %110 = phi i1 [ false, %land.end ], [ %tobool116, %land.rhs.113 ]
  %land.ext118 = zext i1 %110 to i32
  %111 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %112 = load %struct.cv*, %struct.cv** %cv, align 8
  %113 = bitcast %struct.cv* %112 to %struct.sv*
  call void @Perl_save_freesv(%struct.sv* %113)
  br label %if.end.119

if.end.119:                                       ; preds = %land.end.117, %cond.end
  %114 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u120 = getelementptr inbounds %struct.context, %struct.context* %114, i32 0, i32 1
  %cx_blk121 = bitcast %union.anon* %cx_u120 to %struct.block*
  %blk_u122 = getelementptr inbounds %struct.block, %struct.block* %cx_blk121, i32 0, i32 7
  %blku_sub123 = bitcast %union.anon.1* %blk_u122 to %struct.block_sub*
  %lval = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub123, i32 0, i32 7
  store i8 0, i8* %lval, align 1
  %115 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any124 = getelementptr inbounds %struct.cv, %struct.cv* %115, i32 0, i32 0
  %116 = load %struct.xpvcv*, %struct.xpvcv** %sv_any124, align 8
  %xcv_depth125 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %116, i32 0, i32 14
  %117 = load i64, i64* %xcv_depth125, align 8
  %inc126 = add nsw i64 %117, 1
  store i64 %inc126, i64* %xcv_depth125, align 8
  %118 = load i32, i32* @PL_savestack_ix, align 4
  %add127 = add nsw i32 %118, 2
  %119 = load i32, i32* @PL_savestack_max, align 4
  %cmp128 = icmp sgt i32 %add127, %119
  br i1 %cmp128, label %if.then.130, label %if.end.131

if.then.130:                                      ; preds = %if.end.119
  call void @Perl_savestack_grow()
  br label %if.end.131

if.end.131:                                       ; preds = %if.then.130, %if.end.119
  %120 = load %struct.av*, %struct.av** @PL_comppad, align 8
  %121 = bitcast %struct.av* %120 to %struct.sv*
  %122 = bitcast %struct.sv* %121 to i8*
  %123 = load i32, i32* @PL_savestack_ix, align 4
  %inc132 = add nsw i32 %123, 1
  store i32 %inc132, i32* @PL_savestack_ix, align 4
  %idxprom133 = sext i32 %123 to i64
  %124 = load %union.any*, %union.any** @PL_savestack, align 8
  %arrayidx134 = getelementptr inbounds %union.any, %union.any* %124, i64 %idxprom133
  %any_ptr = bitcast %union.any* %arrayidx134 to i8**
  store i8* %122, i8** %any_ptr, align 8
  %125 = load i32, i32* @PL_savestack_ix, align 4
  %inc136 = add nsw i32 %125, 1
  store i32 %inc136, i32* @PL_savestack_ix, align 4
  %idxprom137 = sext i32 %125 to i64
  %126 = load %union.any*, %union.any** @PL_savestack, align 8
  %arrayidx138 = getelementptr inbounds %union.any, %union.any* %126, i64 %idxprom137
  %any_i32139 = bitcast %union.any* %arrayidx138 to i32*
  store i32 33, i32* %any_i32139, align 4
  store i32 33, i32* %tmp135
  %127 = load i32, i32* %tmp135
  %128 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any140 = getelementptr inbounds %struct.cv, %struct.cv* %128, i32 0, i32 0
  %129 = load %struct.xpvcv*, %struct.xpvcv** %sv_any140, align 8
  %xcv_padlist = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %129, i32 0, i32 15
  %130 = load %struct.av*, %struct.av** %xcv_padlist, align 8
  %sv_any141 = getelementptr inbounds %struct.av, %struct.av* %130, i32 0, i32 0
  %131 = load %struct.xpvav*, %struct.xpvav** %sv_any141, align 8
  %xav_array = getelementptr inbounds %struct.xpvav, %struct.xpvav* %131, i32 0, i32 0
  %132 = load i8*, i8** %xav_array, align 8
  %133 = bitcast i8* %132 to %struct.sv**
  %arrayidx142 = getelementptr inbounds %struct.sv*, %struct.sv** %133, i64 1
  %134 = load %struct.sv*, %struct.sv** %arrayidx142, align 8
  %135 = bitcast %struct.sv* %134 to %struct.av*
  store %struct.av* %135, %struct.av** @PL_comppad, align 8
  %136 = load %struct.av*, %struct.av** @PL_comppad, align 8
  %sv_any143 = getelementptr inbounds %struct.av, %struct.av* %136, i32 0, i32 0
  %137 = load %struct.xpvav*, %struct.xpvav** %sv_any143, align 8
  %xav_array144 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %137, i32 0, i32 0
  %138 = load i8*, i8** %xav_array144, align 8
  %139 = bitcast i8* %138 to %struct.sv**
  store %struct.sv** %139, %struct.sv*** @PL_curpad, align 8
  %140 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %140, %struct.sv*** @PL_stack_sp, align 8
  %141 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any145 = getelementptr inbounds %struct.cv, %struct.cv* %141, i32 0, i32 0
  %142 = load %struct.xpvcv*, %struct.xpvcv** %sv_any145, align 8
  %xcv_start = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %142, i32 0, i32 8
  %143 = load %struct.op*, %struct.op** %xcv_start, align 8
  store %struct.op* %143, %struct.op** %retval
  br label %return

if.else:                                          ; preds = %cond.false.24, %cond.true.20
  %144 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next146 = getelementptr inbounds %struct.op, %struct.op* %144, i32 0, i32 0
  %145 = load %struct.op*, %struct.op** %op_next146, align 8
  store %struct.op* %145, %struct.op** %retval
  br label %return

return:                                           ; preds = %if.else, %if.end.131, %if.then.38, %if.then.30
  %146 = load %struct.op*, %struct.op** %retval
  ret %struct.op* %146
}

declare void @Perl_free_tmps() #1

declare void @Perl_save_I32(i32*) #1

declare void @Perl_savestack_grow() #1

declare void @Perl_push_return(%struct.op*) #1

declare i32 @Perl_cxinc() #1

declare void @Perl_save_freesv(%struct.sv*) #1

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_scope() #0 {
entry:
  %0 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 0
  %1 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %1
}

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_enteriter() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %mark = alloca %struct.sv**, align 8
  %cx = alloca %struct.context*, align 8
  %gimme = alloca i32, align 4
  %svp = alloca %struct.sv**, align 8
  %cxtype = alloca i32, align 4
  %gv = alloca %struct.gv*, align 8
  %sv = alloca %struct.sv*, align 8
  %right = alloca %struct.sv*, align 8
  %n_a = alloca i64, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %2 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %2, i32 -1
  store i32* %incdec.ptr, i32** @PL_markstack_ptr, align 8
  %3 = load i32, i32* %2, align 4
  %idx.ext = sext i32 %3 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %idx.ext
  store %struct.sv** %add.ptr, %struct.sv*** %mark, align 8
  %4 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %4, i32 0, i32 6
  %5 = load i8, i8* %op_flags, align 1
  %conv = zext i8 %5 to i32
  %and = and i32 %conv, 3
  %cmp = icmp eq i32 %and, 1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end.18

cond.false:                                       ; preds = %entry
  %6 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags2 = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 6
  %7 = load i8, i8* %op_flags2, align 1
  %conv3 = zext i8 %7 to i32
  %and4 = and i32 %conv3, 3
  %cmp5 = icmp eq i32 %and4, 2
  br i1 %cmp5, label %cond.true.7, label %cond.false.8

cond.true.7:                                      ; preds = %cond.false
  br label %cond.end.16

cond.false.8:                                     ; preds = %cond.false
  %8 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags9 = getelementptr inbounds %struct.op, %struct.op* %8, i32 0, i32 6
  %9 = load i8, i8* %op_flags9, align 1
  %conv10 = zext i8 %9 to i32
  %and11 = and i32 %conv10, 3
  %cmp12 = icmp eq i32 %and11, 3
  br i1 %cmp12, label %cond.true.14, label %cond.false.15

cond.true.14:                                     ; preds = %cond.false.8
  br label %cond.end

cond.false.15:                                    ; preds = %cond.false.8
  %call = call i32 @Perl_block_gimme()
  br label %cond.end

cond.end:                                         ; preds = %cond.false.15, %cond.true.14
  %cond = phi i32 [ 1, %cond.true.14 ], [ %call, %cond.false.15 ]
  br label %cond.end.16

cond.end.16:                                      ; preds = %cond.end, %cond.true.7
  %cond17 = phi i32 [ 0, %cond.true.7 ], [ %cond, %cond.end ]
  br label %cond.end.18

cond.end.18:                                      ; preds = %cond.end.16, %cond.true
  %cond19 = phi i32 [ 128, %cond.true ], [ %cond17, %cond.end.16 ]
  store i32 %cond19, i32* %gimme, align 4
  store i32 3, i32* %cxtype, align 4
  call void @Perl_push_scope()
  call void @Perl_save_int(i32* @PL_tmps_floor)
  %10 = load i32, i32* @PL_tmps_ix, align 4
  store i32 %10, i32* @PL_tmps_floor, align 4
  %11 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %11, i32 0, i32 3
  %12 = load i64, i64* %op_targ, align 8
  %tobool = icmp ne i64 %12, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end.18
  %13 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ20 = getelementptr inbounds %struct.op, %struct.op* %13, i32 0, i32 3
  %14 = load i64, i64* %op_targ20, align 8
  %15 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %15, i64 %14
  store %struct.sv** %arrayidx, %struct.sv*** %svp, align 8
  %16 = load %struct.sv**, %struct.sv*** %svp, align 8
  call void @Perl_save_sptr(%struct.sv** %16)
  br label %if.end

if.else:                                          ; preds = %cond.end.18
  %17 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr21 = getelementptr inbounds %struct.sv*, %struct.sv** %17, i32 -1
  store %struct.sv** %incdec.ptr21, %struct.sv*** %sp, align 8
  %18 = load %struct.sv*, %struct.sv** %17, align 8
  %19 = bitcast %struct.sv* %18 to %struct.gv*
  store %struct.gv* %19, %struct.gv** %gv, align 8
  %20 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any = getelementptr inbounds %struct.gv, %struct.gv* %20, i32 0, i32 0
  %21 = load %struct.xpvgv*, %struct.xpvgv** %sv_any, align 8
  %xgv_gp = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %21, i32 0, i32 7
  %22 = load %struct.gp*, %struct.gp** %xgv_gp, align 8
  %gp_sv = getelementptr inbounds %struct.gp, %struct.gp* %22, i32 0, i32 0
  store %struct.sv** %gp_sv, %struct.sv*** %svp, align 8
  %23 = load %struct.sv**, %struct.sv*** %svp, align 8
  call void @Perl_save_generic_svref(%struct.sv** %23)
  %call22 = call %struct.sv* @Perl_newSV(i64 0)
  %24 = load %struct.sv**, %struct.sv*** %svp, align 8
  store %struct.sv* %call22, %struct.sv** %24, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  call void @Perl_push_scope()
  %25 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %25, i32 0, i32 2
  %26 = load i32, i32* %si_cxix, align 4
  %27 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxmax = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %27, i32 0, i32 3
  %28 = load i32, i32* %si_cxmax, align 4
  %cmp23 = icmp slt i32 %26, %28
  br i1 %cmp23, label %cond.true.25, label %cond.false.27

cond.true.25:                                     ; preds = %if.end
  %29 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix26 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %29, i32 0, i32 2
  %30 = load i32, i32* %si_cxix26, align 4
  %inc = add nsw i32 %30, 1
  store i32 %inc, i32* %si_cxix26, align 4
  br label %cond.end.30

cond.false.27:                                    ; preds = %if.end
  %call28 = call i32 @Perl_cxinc()
  %31 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix29 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %31, i32 0, i32 2
  store i32 %call28, i32* %si_cxix29, align 4
  br label %cond.end.30

cond.end.30:                                      ; preds = %cond.false.27, %cond.true.25
  %cond31 = phi i32 [ %inc, %cond.true.25 ], [ %call28, %cond.false.27 ]
  %32 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix32 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %32, i32 0, i32 2
  %33 = load i32, i32* %si_cxix32, align 4
  %idxprom = sext i32 %33 to i64
  %34 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxstack = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %34, i32 0, i32 1
  %35 = load %struct.context*, %struct.context** %si_cxstack, align 8
  %arrayidx33 = getelementptr inbounds %struct.context, %struct.context* %35, i64 %idxprom
  store %struct.context* %arrayidx33, %struct.context** %cx, align 8
  %36 = load i32, i32* %cxtype, align 4
  %37 = load %struct.context*, %struct.context** %cx, align 8
  %cx_type = getelementptr inbounds %struct.context, %struct.context* %37, i32 0, i32 0
  store i32 %36, i32* %cx_type, align 4
  %38 = load %struct.sv**, %struct.sv*** %sp, align 8
  %39 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %38 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %39 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %conv34 = trunc i64 %sub.ptr.div to i32
  %40 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u = getelementptr inbounds %struct.context, %struct.context* %40, i32 0, i32 1
  %cx_blk = bitcast %union.anon* %cx_u to %struct.block*
  %blku_oldsp = getelementptr inbounds %struct.block, %struct.block* %cx_blk, i32 0, i32 0
  store i32 %conv34, i32* %blku_oldsp, align 4
  %41 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %42 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u35 = getelementptr inbounds %struct.context, %struct.context* %42, i32 0, i32 1
  %cx_blk36 = bitcast %union.anon* %cx_u35 to %struct.block*
  %blku_oldcop = getelementptr inbounds %struct.block, %struct.block* %cx_blk36, i32 0, i32 1
  store %struct.cop* %41, %struct.cop** %blku_oldcop, align 8
  %43 = load i32*, i32** @PL_markstack_ptr, align 8
  %44 = load i32*, i32** @PL_markstack, align 8
  %sub.ptr.lhs.cast37 = ptrtoint i32* %43 to i64
  %sub.ptr.rhs.cast38 = ptrtoint i32* %44 to i64
  %sub.ptr.sub39 = sub i64 %sub.ptr.lhs.cast37, %sub.ptr.rhs.cast38
  %sub.ptr.div40 = sdiv exact i64 %sub.ptr.sub39, 4
  %conv41 = trunc i64 %sub.ptr.div40 to i32
  %45 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u42 = getelementptr inbounds %struct.context, %struct.context* %45, i32 0, i32 1
  %cx_blk43 = bitcast %union.anon* %cx_u42 to %struct.block*
  %blku_oldmarksp = getelementptr inbounds %struct.block, %struct.block* %cx_blk43, i32 0, i32 3
  store i32 %conv41, i32* %blku_oldmarksp, align 4
  %46 = load i32, i32* @PL_scopestack_ix, align 4
  %47 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u44 = getelementptr inbounds %struct.context, %struct.context* %47, i32 0, i32 1
  %cx_blk45 = bitcast %union.anon* %cx_u44 to %struct.block*
  %blku_oldscopesp = getelementptr inbounds %struct.block, %struct.block* %cx_blk45, i32 0, i32 4
  store i32 %46, i32* %blku_oldscopesp, align 4
  %48 = load i32, i32* @PL_retstack_ix, align 4
  %49 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u46 = getelementptr inbounds %struct.context, %struct.context* %49, i32 0, i32 1
  %cx_blk47 = bitcast %union.anon* %cx_u46 to %struct.block*
  %blku_oldretsp = getelementptr inbounds %struct.block, %struct.block* %cx_blk47, i32 0, i32 2
  store i32 %48, i32* %blku_oldretsp, align 4
  %50 = load %struct.pmop*, %struct.pmop** @PL_curpm, align 8
  %51 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u48 = getelementptr inbounds %struct.context, %struct.context* %51, i32 0, i32 1
  %cx_blk49 = bitcast %union.anon* %cx_u48 to %struct.block*
  %blku_oldpm = getelementptr inbounds %struct.block, %struct.block* %cx_blk49, i32 0, i32 5
  store %struct.pmop* %50, %struct.pmop** %blku_oldpm, align 8
  %52 = load i32, i32* %gimme, align 4
  %conv50 = trunc i32 %52 to i8
  %53 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u51 = getelementptr inbounds %struct.context, %struct.context* %53, i32 0, i32 1
  %cx_blk52 = bitcast %union.anon* %cx_u51 to %struct.block*
  %blku_gimme = getelementptr inbounds %struct.block, %struct.block* %cx_blk52, i32 0, i32 6
  store i8 %conv50, i8* %blku_gimme, align 1
  %54 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_label = getelementptr inbounds %struct.cop, %struct.cop* %54, i32 0, i32 8
  %55 = load i8*, i8** %cop_label, align 8
  %56 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u53 = getelementptr inbounds %struct.context, %struct.context* %56, i32 0, i32 1
  %cx_blk54 = bitcast %union.anon* %cx_u53 to %struct.block*
  %blk_u = getelementptr inbounds %struct.block, %struct.block* %cx_blk54, i32 0, i32 7
  %blku_loop = bitcast %union.anon.1* %blk_u to %struct.block_loop*
  %label = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop, i32 0, i32 0
  store i8* %55, i8** %label, align 8
  %57 = load %struct.sv**, %struct.sv*** %mark, align 8
  %58 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast55 = ptrtoint %struct.sv** %57 to i64
  %sub.ptr.rhs.cast56 = ptrtoint %struct.sv** %58 to i64
  %sub.ptr.sub57 = sub i64 %sub.ptr.lhs.cast55, %sub.ptr.rhs.cast56
  %sub.ptr.div58 = sdiv exact i64 %sub.ptr.sub57, 8
  %conv59 = trunc i64 %sub.ptr.div58 to i32
  %59 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u60 = getelementptr inbounds %struct.context, %struct.context* %59, i32 0, i32 1
  %cx_blk61 = bitcast %union.anon* %cx_u60 to %struct.block*
  %blk_u62 = getelementptr inbounds %struct.block, %struct.block* %cx_blk61, i32 0, i32 7
  %blku_loop63 = bitcast %union.anon.1* %blk_u62 to %struct.block_loop*
  %resetsp = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop63, i32 0, i32 1
  store i32 %conv59, i32* %resetsp, align 4
  %60 = load %struct.op*, %struct.op** @PL_op, align 8
  %61 = bitcast %struct.op* %60 to %struct.loop*
  %op_redoop = getelementptr inbounds %struct.loop, %struct.loop* %61, i32 0, i32 10
  %62 = load %struct.op*, %struct.op** %op_redoop, align 8
  %63 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u64 = getelementptr inbounds %struct.context, %struct.context* %63, i32 0, i32 1
  %cx_blk65 = bitcast %union.anon* %cx_u64 to %struct.block*
  %blk_u66 = getelementptr inbounds %struct.block, %struct.block* %cx_blk65, i32 0, i32 7
  %blku_loop67 = bitcast %union.anon.1* %blk_u66 to %struct.block_loop*
  %redo_op = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop67, i32 0, i32 2
  store %struct.op* %62, %struct.op** %redo_op, align 8
  %64 = load %struct.op*, %struct.op** @PL_op, align 8
  %65 = bitcast %struct.op* %64 to %struct.loop*
  %op_nextop = getelementptr inbounds %struct.loop, %struct.loop* %65, i32 0, i32 11
  %66 = load %struct.op*, %struct.op** %op_nextop, align 8
  %67 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u68 = getelementptr inbounds %struct.context, %struct.context* %67, i32 0, i32 1
  %cx_blk69 = bitcast %union.anon* %cx_u68 to %struct.block*
  %blk_u70 = getelementptr inbounds %struct.block, %struct.block* %cx_blk69, i32 0, i32 7
  %blku_loop71 = bitcast %union.anon.1* %blk_u70 to %struct.block_loop*
  %next_op = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop71, i32 0, i32 3
  store %struct.op* %66, %struct.op** %next_op, align 8
  %68 = load %struct.op*, %struct.op** @PL_op, align 8
  %69 = bitcast %struct.op* %68 to %struct.loop*
  %op_lastop = getelementptr inbounds %struct.loop, %struct.loop* %69, i32 0, i32 12
  %70 = load %struct.op*, %struct.op** %op_lastop, align 8
  %71 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u72 = getelementptr inbounds %struct.context, %struct.context* %71, i32 0, i32 1
  %cx_blk73 = bitcast %union.anon* %cx_u72 to %struct.block*
  %blk_u74 = getelementptr inbounds %struct.block, %struct.block* %cx_blk73, i32 0, i32 7
  %blku_loop75 = bitcast %union.anon.1* %blk_u74 to %struct.block_loop*
  %last_op = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop75, i32 0, i32 4
  store %struct.op* %70, %struct.op** %last_op, align 8
  %72 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u76 = getelementptr inbounds %struct.context, %struct.context* %72, i32 0, i32 1
  %cx_blk77 = bitcast %union.anon* %cx_u76 to %struct.block*
  %blk_u78 = getelementptr inbounds %struct.block, %struct.block* %cx_blk77, i32 0, i32 7
  %blku_loop79 = bitcast %union.anon.1* %blk_u78 to %struct.block_loop*
  %iterlval = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop79, i32 0, i32 7
  store %struct.sv* null, %struct.sv** %iterlval, align 8
  %73 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u80 = getelementptr inbounds %struct.context, %struct.context* %73, i32 0, i32 1
  %cx_blk81 = bitcast %union.anon* %cx_u80 to %struct.block*
  %blk_u82 = getelementptr inbounds %struct.block, %struct.block* %cx_blk81, i32 0, i32 7
  %blku_loop83 = bitcast %union.anon.1* %blk_u82 to %struct.block_loop*
  %iterary = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop83, i32 0, i32 8
  store %struct.av* null, %struct.av** %iterary, align 8
  %74 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u84 = getelementptr inbounds %struct.context, %struct.context* %74, i32 0, i32 1
  %cx_blk85 = bitcast %union.anon* %cx_u84 to %struct.block*
  %blk_u86 = getelementptr inbounds %struct.block, %struct.block* %cx_blk85, i32 0, i32 7
  %blku_loop87 = bitcast %union.anon.1* %blk_u86 to %struct.block_loop*
  %iterix = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop87, i32 0, i32 9
  store i64 -1, i64* %iterix, align 8
  %75 = load %struct.sv**, %struct.sv*** %svp, align 8
  %76 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u88 = getelementptr inbounds %struct.context, %struct.context* %76, i32 0, i32 1
  %cx_blk89 = bitcast %union.anon* %cx_u88 to %struct.block*
  %blk_u90 = getelementptr inbounds %struct.block, %struct.block* %cx_blk89, i32 0, i32 7
  %blku_loop91 = bitcast %union.anon.1* %blk_u90 to %struct.block_loop*
  %itervar = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop91, i32 0, i32 5
  store %struct.sv** %75, %struct.sv*** %itervar, align 8
  %tobool92 = icmp ne %struct.sv** %75, null
  br i1 %tobool92, label %if.then.93, label %if.else.106

if.then.93:                                       ; preds = %cond.end.30
  %77 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u94 = getelementptr inbounds %struct.context, %struct.context* %77, i32 0, i32 1
  %cx_blk95 = bitcast %union.anon* %cx_u94 to %struct.block*
  %blk_u96 = getelementptr inbounds %struct.block, %struct.block* %cx_blk95, i32 0, i32 7
  %blku_loop97 = bitcast %union.anon.1* %blk_u96 to %struct.block_loop*
  %itervar98 = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop97, i32 0, i32 5
  %78 = load %struct.sv**, %struct.sv*** %itervar98, align 8
  %79 = load %struct.sv*, %struct.sv** %78, align 8
  store %struct.sv* %79, %struct.sv** @PL_Sv, align 8
  %80 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %tobool99 = icmp ne %struct.sv* %80, null
  br i1 %tobool99, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then.93
  %81 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %81, i32 0, i32 1
  %82 = load i32, i32* %sv_refcnt, align 4
  %inc100 = add i32 %82, 1
  store i32 %inc100, i32* %sv_refcnt, align 4
  %tobool101 = icmp ne i32 %inc100, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then.93
  %83 = phi i1 [ false, %if.then.93 ], [ %tobool101, %land.rhs ]
  %land.ext = zext i1 %83 to i32
  %84 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %85 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u102 = getelementptr inbounds %struct.context, %struct.context* %85, i32 0, i32 1
  %cx_blk103 = bitcast %union.anon* %cx_u102 to %struct.block*
  %blk_u104 = getelementptr inbounds %struct.block, %struct.block* %cx_blk103, i32 0, i32 7
  %blku_loop105 = bitcast %union.anon.1* %blk_u104 to %struct.block_loop*
  %itersave = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop105, i32 0, i32 6
  store %struct.sv* %84, %struct.sv** %itersave, align 8
  br label %if.end.112

if.else.106:                                      ; preds = %cond.end.30
  %86 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u107 = getelementptr inbounds %struct.context, %struct.context* %86, i32 0, i32 1
  %cx_blk108 = bitcast %union.anon* %cx_u107 to %struct.block*
  %blk_u109 = getelementptr inbounds %struct.block, %struct.block* %cx_blk108, i32 0, i32 7
  %blku_loop110 = bitcast %union.anon.1* %blk_u109 to %struct.block_loop*
  %itersave111 = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop110, i32 0, i32 6
  store %struct.sv* null, %struct.sv** %itersave111, align 8
  br label %if.end.112

if.end.112:                                       ; preds = %if.else.106, %land.end
  %87 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags113 = getelementptr inbounds %struct.op, %struct.op* %87, i32 0, i32 6
  %88 = load i8, i8* %op_flags113, align 1
  %conv114 = zext i8 %88 to i32
  %and115 = and i32 %conv114, 64
  %tobool116 = icmp ne i32 %and115, 0
  br i1 %tobool116, label %if.then.117, label %if.else.357

if.then.117:                                      ; preds = %if.end.112
  %89 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr118 = getelementptr inbounds %struct.sv*, %struct.sv** %89, i32 -1
  store %struct.sv** %incdec.ptr118, %struct.sv*** %sp, align 8
  %90 = load %struct.sv*, %struct.sv** %89, align 8
  store %struct.sv* %90, %struct.sv** @PL_Sv, align 8
  %91 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %tobool119 = icmp ne %struct.sv* %91, null
  br i1 %tobool119, label %land.rhs.120, label %land.end.124

land.rhs.120:                                     ; preds = %if.then.117
  %92 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_refcnt121 = getelementptr inbounds %struct.sv, %struct.sv* %92, i32 0, i32 1
  %93 = load i32, i32* %sv_refcnt121, align 4
  %inc122 = add i32 %93, 1
  store i32 %inc122, i32* %sv_refcnt121, align 4
  %tobool123 = icmp ne i32 %inc122, 0
  br label %land.end.124

land.end.124:                                     ; preds = %land.rhs.120, %if.then.117
  %94 = phi i1 [ false, %if.then.117 ], [ %tobool123, %land.rhs.120 ]
  %land.ext125 = zext i1 %94 to i32
  %95 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %96 = bitcast %struct.sv* %95 to %struct.av*
  %97 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u126 = getelementptr inbounds %struct.context, %struct.context* %97, i32 0, i32 1
  %cx_blk127 = bitcast %union.anon* %cx_u126 to %struct.block*
  %blk_u128 = getelementptr inbounds %struct.block, %struct.block* %cx_blk127, i32 0, i32 7
  %blku_loop129 = bitcast %union.anon.1* %blk_u128 to %struct.block_loop*
  %iterary130 = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop129, i32 0, i32 8
  store %struct.av* %96, %struct.av** %iterary130, align 8
  %98 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u131 = getelementptr inbounds %struct.context, %struct.context* %98, i32 0, i32 1
  %cx_blk132 = bitcast %union.anon* %cx_u131 to %struct.block*
  %blk_u133 = getelementptr inbounds %struct.block, %struct.block* %cx_blk132, i32 0, i32 7
  %blku_loop134 = bitcast %union.anon.1* %blk_u133 to %struct.block_loop*
  %iterary135 = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop134, i32 0, i32 8
  %99 = load %struct.av*, %struct.av** %iterary135, align 8
  %sv_flags = getelementptr inbounds %struct.av, %struct.av* %99, i32 0, i32 2
  %100 = load i32, i32* %sv_flags, align 4
  %and136 = and i32 %100, 255
  %cmp137 = icmp ne i32 %and136, 10
  br i1 %cmp137, label %if.then.139, label %if.else.315

if.then.139:                                      ; preds = %land.end.124
  %101 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr140 = getelementptr inbounds %struct.sv*, %struct.sv** %101, i32 -1
  store %struct.sv** %incdec.ptr140, %struct.sv*** %sp, align 8
  %102 = load %struct.sv*, %struct.sv** %101, align 8
  store %struct.sv* %102, %struct.sv** %sv, align 8
  %103 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u141 = getelementptr inbounds %struct.context, %struct.context* %103, i32 0, i32 1
  %cx_blk142 = bitcast %union.anon* %cx_u141 to %struct.block*
  %blk_u143 = getelementptr inbounds %struct.block, %struct.block* %cx_blk142, i32 0, i32 7
  %blku_loop144 = bitcast %union.anon.1* %blk_u143 to %struct.block_loop*
  %iterary145 = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop144, i32 0, i32 8
  %104 = load %struct.av*, %struct.av** %iterary145, align 8
  %105 = bitcast %struct.av* %104 to %struct.sv*
  store %struct.sv* %105, %struct.sv** %right, align 8
  %106 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags146 = getelementptr inbounds %struct.sv, %struct.sv* %106, i32 0, i32 2
  %107 = load i32, i32* %sv_flags146, align 4
  %and147 = and i32 %107, 50331648
  %tobool148 = icmp ne i32 %and147, 0
  br i1 %tobool148, label %if.then.198, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then.139
  %108 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags149 = getelementptr inbounds %struct.sv, %struct.sv* %108, i32 0, i32 2
  %109 = load i32, i32* %sv_flags149, align 4
  %and150 = and i32 %109, 118423552
  %tobool151 = icmp ne i32 %and150, 0
  br i1 %tobool151, label %land.lhs.true, label %lor.lhs.false.155

land.lhs.true:                                    ; preds = %lor.lhs.false
  %110 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags152 = getelementptr inbounds %struct.sv, %struct.sv* %110, i32 0, i32 2
  %111 = load i32, i32* %sv_flags152, align 4
  %and153 = and i32 %111, 67108864
  %tobool154 = icmp ne i32 %and153, 0
  br i1 %tobool154, label %lor.lhs.false.155, label %if.then.198

lor.lhs.false.155:                                ; preds = %land.lhs.true, %lor.lhs.false
  %112 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_flags156 = getelementptr inbounds %struct.sv, %struct.sv* %112, i32 0, i32 2
  %113 = load i32, i32* %sv_flags156, align 4
  %and157 = and i32 %113, 50331648
  %tobool158 = icmp ne i32 %and157, 0
  br i1 %tobool158, label %if.then.198, label %lor.lhs.false.159

lor.lhs.false.159:                                ; preds = %lor.lhs.false.155
  %114 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_flags160 = getelementptr inbounds %struct.sv, %struct.sv* %114, i32 0, i32 2
  %115 = load i32, i32* %sv_flags160, align 4
  %and161 = and i32 %115, 118423552
  %tobool162 = icmp ne i32 %and161, 0
  br i1 %tobool162, label %land.lhs.true.163, label %lor.lhs.false.167

land.lhs.true.163:                                ; preds = %lor.lhs.false.159
  %116 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_flags164 = getelementptr inbounds %struct.sv, %struct.sv* %116, i32 0, i32 2
  %117 = load i32, i32* %sv_flags164, align 4
  %and165 = and i32 %117, 67108864
  %tobool166 = icmp ne i32 %and165, 0
  br i1 %tobool166, label %lor.lhs.false.167, label %if.then.198

lor.lhs.false.167:                                ; preds = %land.lhs.true.163, %lor.lhs.false.159
  %118 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags168 = getelementptr inbounds %struct.sv, %struct.sv* %118, i32 0, i32 2
  %119 = load i32, i32* %sv_flags168, align 4
  %and169 = and i32 %119, 118423552
  %tobool170 = icmp ne i32 %and169, 0
  br i1 %tobool170, label %lor.lhs.false.175, label %land.lhs.true.171

land.lhs.true.171:                                ; preds = %lor.lhs.false.167
  %120 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_flags172 = getelementptr inbounds %struct.sv, %struct.sv* %120, i32 0, i32 2
  %121 = load i32, i32* %sv_flags172, align 4
  %and173 = and i32 %121, 118423552
  %tobool174 = icmp ne i32 %and173, 0
  br i1 %tobool174, label %land.lhs.true.191, label %lor.lhs.false.175

lor.lhs.false.175:                                ; preds = %land.lhs.true.171, %lor.lhs.false.167
  %122 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags176 = getelementptr inbounds %struct.sv, %struct.sv* %122, i32 0, i32 2
  %123 = load i32, i32* %sv_flags176, align 4
  %and177 = and i32 %123, 118423552
  %tobool178 = icmp ne i32 %and177, 0
  br i1 %tobool178, label %lor.lhs.false.179, label %land.lhs.true.182

lor.lhs.false.179:                                ; preds = %lor.lhs.false.175
  %124 = load %struct.sv*, %struct.sv** %sv, align 8
  %call180 = call i32 @Perl_looks_like_number(%struct.sv* %124)
  %tobool181 = icmp ne i32 %call180, 0
  br i1 %tobool181, label %land.lhs.true.182, label %if.else.262

land.lhs.true.182:                                ; preds = %lor.lhs.false.179, %lor.lhs.false.175
  %125 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags183 = getelementptr inbounds %struct.sv, %struct.sv* %125, i32 0, i32 2
  %126 = load i32, i32* %sv_flags183, align 4
  %and184 = and i32 %126, 67108864
  %tobool185 = icmp ne i32 %and184, 0
  br i1 %tobool185, label %land.lhs.true.186, label %if.else.262

land.lhs.true.186:                                ; preds = %land.lhs.true.182
  %127 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any187 = getelementptr inbounds %struct.sv, %struct.sv* %127, i32 0, i32 0
  %128 = load i8*, i8** %sv_any187, align 8
  %129 = bitcast i8* %128 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %129, i32 0, i32 0
  %130 = load i8*, i8** %xpv_pv, align 8
  %131 = load i8, i8* %130, align 1
  %conv188 = sext i8 %131 to i32
  %cmp189 = icmp ne i32 %conv188, 48
  br i1 %cmp189, label %land.lhs.true.191, label %if.else.262

land.lhs.true.191:                                ; preds = %land.lhs.true.186, %land.lhs.true.171
  %132 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_flags192 = getelementptr inbounds %struct.sv, %struct.sv* %132, i32 0, i32 2
  %133 = load i32, i32* %sv_flags192, align 4
  %and193 = and i32 %133, 118423552
  %tobool194 = icmp ne i32 %and193, 0
  br i1 %tobool194, label %lor.lhs.false.195, label %if.then.198

lor.lhs.false.195:                                ; preds = %land.lhs.true.191
  %134 = load %struct.sv*, %struct.sv** %right, align 8
  %call196 = call i32 @Perl_looks_like_number(%struct.sv* %134)
  %tobool197 = icmp ne i32 %call196, 0
  br i1 %tobool197, label %if.then.198, label %if.else.262

if.then.198:                                      ; preds = %lor.lhs.false.195, %land.lhs.true.191, %land.lhs.true.163, %lor.lhs.false.155, %land.lhs.true, %if.then.139
  %135 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags199 = getelementptr inbounds %struct.sv, %struct.sv* %135, i32 0, i32 2
  %136 = load i32, i32* %sv_flags199, align 4
  %and200 = and i32 %136, 118423552
  %tobool201 = icmp ne i32 %and200, 0
  br i1 %tobool201, label %land.lhs.true.202, label %lor.lhs.false.214

land.lhs.true.202:                                ; preds = %if.then.198
  %137 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags203 = getelementptr inbounds %struct.sv, %struct.sv* %137, i32 0, i32 2
  %138 = load i32, i32* %sv_flags203, align 4
  %and204 = and i32 %138, 131072
  %tobool205 = icmp ne i32 %and204, 0
  br i1 %tobool205, label %cond.true.206, label %cond.false.208

cond.true.206:                                    ; preds = %land.lhs.true.202
  %139 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any207 = getelementptr inbounds %struct.sv, %struct.sv* %139, i32 0, i32 0
  %140 = load i8*, i8** %sv_any207, align 8
  %141 = bitcast i8* %140 to %struct.xpvnv*
  %xnv_nv = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %141, i32 0, i32 4
  %142 = load double, double* %xnv_nv, align 8
  br label %cond.end.210

cond.false.208:                                   ; preds = %land.lhs.true.202
  %143 = load %struct.sv*, %struct.sv** %sv, align 8
  %call209 = call double @Perl_sv_2nv(%struct.sv* %143)
  br label %cond.end.210

cond.end.210:                                     ; preds = %cond.false.208, %cond.true.206
  %cond211 = phi double [ %142, %cond.true.206 ], [ %call209, %cond.false.208 ]
  %cmp212 = fcmp olt double %cond211, 0xC3E0000000000000
  br i1 %cmp212, label %if.then.231, label %lor.lhs.false.214

lor.lhs.false.214:                                ; preds = %cond.end.210, %if.then.198
  %144 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_flags215 = getelementptr inbounds %struct.sv, %struct.sv* %144, i32 0, i32 2
  %145 = load i32, i32* %sv_flags215, align 4
  %and216 = and i32 %145, 118423552
  %tobool217 = icmp ne i32 %and216, 0
  br i1 %tobool217, label %land.lhs.true.218, label %if.end.233

land.lhs.true.218:                                ; preds = %lor.lhs.false.214
  %146 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_flags219 = getelementptr inbounds %struct.sv, %struct.sv* %146, i32 0, i32 2
  %147 = load i32, i32* %sv_flags219, align 4
  %and220 = and i32 %147, 131072
  %tobool221 = icmp ne i32 %and220, 0
  br i1 %tobool221, label %cond.true.222, label %cond.false.225

cond.true.222:                                    ; preds = %land.lhs.true.218
  %148 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_any223 = getelementptr inbounds %struct.sv, %struct.sv* %148, i32 0, i32 0
  %149 = load i8*, i8** %sv_any223, align 8
  %150 = bitcast i8* %149 to %struct.xpvnv*
  %xnv_nv224 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %150, i32 0, i32 4
  %151 = load double, double* %xnv_nv224, align 8
  br label %cond.end.227

cond.false.225:                                   ; preds = %land.lhs.true.218
  %152 = load %struct.sv*, %struct.sv** %right, align 8
  %call226 = call double @Perl_sv_2nv(%struct.sv* %152)
  br label %cond.end.227

cond.end.227:                                     ; preds = %cond.false.225, %cond.true.222
  %cond228 = phi double [ %151, %cond.true.222 ], [ %call226, %cond.false.225 ]
  %cmp229 = fcmp oge double %cond228, 0x43E0000000000000
  br i1 %cmp229, label %if.then.231, label %if.end.233

if.then.231:                                      ; preds = %cond.end.227, %cond.end.210
  %call232 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.12, i32 0, i32 0))
  store %struct.op* %call232, %struct.op** %retval
  br label %return

if.end.233:                                       ; preds = %cond.end.227, %lor.lhs.false.214
  %153 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags234 = getelementptr inbounds %struct.sv, %struct.sv* %153, i32 0, i32 2
  %154 = load i32, i32* %sv_flags234, align 4
  %and235 = and i32 %154, 65536
  %tobool236 = icmp ne i32 %and235, 0
  br i1 %tobool236, label %cond.true.237, label %cond.false.239

cond.true.237:                                    ; preds = %if.end.233
  %155 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any238 = getelementptr inbounds %struct.sv, %struct.sv* %155, i32 0, i32 0
  %156 = load i8*, i8** %sv_any238, align 8
  %157 = bitcast i8* %156 to %struct.xpviv*
  %xiv_iv = getelementptr inbounds %struct.xpviv, %struct.xpviv* %157, i32 0, i32 3
  %158 = load i64, i64* %xiv_iv, align 8
  br label %cond.end.241

cond.false.239:                                   ; preds = %if.end.233
  %159 = load %struct.sv*, %struct.sv** %sv, align 8
  %call240 = call i64 @Perl_sv_2iv(%struct.sv* %159)
  br label %cond.end.241

cond.end.241:                                     ; preds = %cond.false.239, %cond.true.237
  %cond242 = phi i64 [ %158, %cond.true.237 ], [ %call240, %cond.false.239 ]
  %160 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u243 = getelementptr inbounds %struct.context, %struct.context* %160, i32 0, i32 1
  %cx_blk244 = bitcast %union.anon* %cx_u243 to %struct.block*
  %blk_u245 = getelementptr inbounds %struct.block, %struct.block* %cx_blk244, i32 0, i32 7
  %blku_loop246 = bitcast %union.anon.1* %blk_u245 to %struct.block_loop*
  %iterix247 = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop246, i32 0, i32 9
  store i64 %cond242, i64* %iterix247, align 8
  %161 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_flags248 = getelementptr inbounds %struct.sv, %struct.sv* %161, i32 0, i32 2
  %162 = load i32, i32* %sv_flags248, align 4
  %and249 = and i32 %162, 65536
  %tobool250 = icmp ne i32 %and249, 0
  br i1 %tobool250, label %cond.true.251, label %cond.false.254

cond.true.251:                                    ; preds = %cond.end.241
  %163 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_any252 = getelementptr inbounds %struct.sv, %struct.sv* %163, i32 0, i32 0
  %164 = load i8*, i8** %sv_any252, align 8
  %165 = bitcast i8* %164 to %struct.xpviv*
  %xiv_iv253 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %165, i32 0, i32 3
  %166 = load i64, i64* %xiv_iv253, align 8
  br label %cond.end.256

cond.false.254:                                   ; preds = %cond.end.241
  %167 = load %struct.sv*, %struct.sv** %right, align 8
  %call255 = call i64 @Perl_sv_2iv(%struct.sv* %167)
  br label %cond.end.256

cond.end.256:                                     ; preds = %cond.false.254, %cond.true.251
  %cond257 = phi i64 [ %166, %cond.true.251 ], [ %call255, %cond.false.254 ]
  %168 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u258 = getelementptr inbounds %struct.context, %struct.context* %168, i32 0, i32 1
  %cx_blk259 = bitcast %union.anon* %cx_u258 to %struct.block*
  %blk_u260 = getelementptr inbounds %struct.block, %struct.block* %cx_blk259, i32 0, i32 7
  %blku_loop261 = bitcast %union.anon.1* %blk_u260 to %struct.block_loop*
  %itermax = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop261, i32 0, i32 10
  store i64 %cond257, i64* %itermax, align 8
  br label %if.end.314

if.else.262:                                      ; preds = %lor.lhs.false.195, %land.lhs.true.186, %land.lhs.true.182, %lor.lhs.false.179
  %169 = load %struct.sv*, %struct.sv** %sv, align 8
  %call263 = call %struct.sv* @Perl_newSVsv(%struct.sv* %169)
  %170 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u264 = getelementptr inbounds %struct.context, %struct.context* %170, i32 0, i32 1
  %cx_blk265 = bitcast %union.anon* %cx_u264 to %struct.block*
  %blk_u266 = getelementptr inbounds %struct.block, %struct.block* %cx_blk265, i32 0, i32 7
  %blku_loop267 = bitcast %union.anon.1* %blk_u266 to %struct.block_loop*
  %iterlval268 = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop267, i32 0, i32 7
  store %struct.sv* %call263, %struct.sv** %iterlval268, align 8
  %171 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u269 = getelementptr inbounds %struct.context, %struct.context* %171, i32 0, i32 1
  %cx_blk270 = bitcast %union.anon* %cx_u269 to %struct.block*
  %blk_u271 = getelementptr inbounds %struct.block, %struct.block* %cx_blk270, i32 0, i32 7
  %blku_loop272 = bitcast %union.anon.1* %blk_u271 to %struct.block_loop*
  %iterlval273 = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop272, i32 0, i32 7
  %172 = load %struct.sv*, %struct.sv** %iterlval273, align 8
  %sv_flags274 = getelementptr inbounds %struct.sv, %struct.sv* %172, i32 0, i32 2
  %173 = load i32, i32* %sv_flags274, align 4
  %and275 = and i32 %173, 10223616
  %cmp276 = icmp eq i32 %and275, 262144
  br i1 %cmp276, label %cond.true.278, label %cond.false.292

cond.true.278:                                    ; preds = %if.else.262
  %174 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u279 = getelementptr inbounds %struct.context, %struct.context* %174, i32 0, i32 1
  %cx_blk280 = bitcast %union.anon* %cx_u279 to %struct.block*
  %blk_u281 = getelementptr inbounds %struct.block, %struct.block* %cx_blk280, i32 0, i32 7
  %blku_loop282 = bitcast %union.anon.1* %blk_u281 to %struct.block_loop*
  %iterlval283 = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop282, i32 0, i32 7
  %175 = load %struct.sv*, %struct.sv** %iterlval283, align 8
  %sv_any284 = getelementptr inbounds %struct.sv, %struct.sv* %175, i32 0, i32 0
  %176 = load i8*, i8** %sv_any284, align 8
  %177 = bitcast i8* %176 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %177, i32 0, i32 1
  %178 = load i64, i64* %xpv_cur, align 8
  store i64 %178, i64* %n_a, align 8
  %179 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u285 = getelementptr inbounds %struct.context, %struct.context* %179, i32 0, i32 1
  %cx_blk286 = bitcast %union.anon* %cx_u285 to %struct.block*
  %blk_u287 = getelementptr inbounds %struct.block, %struct.block* %cx_blk286, i32 0, i32 7
  %blku_loop288 = bitcast %union.anon.1* %blk_u287 to %struct.block_loop*
  %iterlval289 = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop288, i32 0, i32 7
  %180 = load %struct.sv*, %struct.sv** %iterlval289, align 8
  %sv_any290 = getelementptr inbounds %struct.sv, %struct.sv* %180, i32 0, i32 0
  %181 = load i8*, i8** %sv_any290, align 8
  %182 = bitcast i8* %181 to %struct.xpv*
  %xpv_pv291 = getelementptr inbounds %struct.xpv, %struct.xpv* %182, i32 0, i32 0
  %183 = load i8*, i8** %xpv_pv291, align 8
  br label %cond.end.299

cond.false.292:                                   ; preds = %if.else.262
  %184 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u293 = getelementptr inbounds %struct.context, %struct.context* %184, i32 0, i32 1
  %cx_blk294 = bitcast %union.anon* %cx_u293 to %struct.block*
  %blk_u295 = getelementptr inbounds %struct.block, %struct.block* %cx_blk294, i32 0, i32 7
  %blku_loop296 = bitcast %union.anon.1* %blk_u295 to %struct.block_loop*
  %iterlval297 = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop296, i32 0, i32 7
  %185 = load %struct.sv*, %struct.sv** %iterlval297, align 8
  %call298 = call i8* @Perl_sv_pvn_force_flags(%struct.sv* %185, i64* %n_a, i32 2)
  br label %cond.end.299

cond.end.299:                                     ; preds = %cond.false.292, %cond.true.278
  %cond300 = phi i8* [ %183, %cond.true.278 ], [ %call298, %cond.false.292 ]
  %186 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_flags301 = getelementptr inbounds %struct.sv, %struct.sv* %186, i32 0, i32 2
  %187 = load i32, i32* %sv_flags301, align 4
  %and302 = and i32 %187, 262144
  %cmp303 = icmp eq i32 %and302, 262144
  br i1 %cmp303, label %cond.true.305, label %cond.false.310

cond.true.305:                                    ; preds = %cond.end.299
  %188 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_any306 = getelementptr inbounds %struct.sv, %struct.sv* %188, i32 0, i32 0
  %189 = load i8*, i8** %sv_any306, align 8
  %190 = bitcast i8* %189 to %struct.xpv*
  %xpv_cur307 = getelementptr inbounds %struct.xpv, %struct.xpv* %190, i32 0, i32 1
  %191 = load i64, i64* %xpv_cur307, align 8
  store i64 %191, i64* %n_a, align 8
  %192 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_any308 = getelementptr inbounds %struct.sv, %struct.sv* %192, i32 0, i32 0
  %193 = load i8*, i8** %sv_any308, align 8
  %194 = bitcast i8* %193 to %struct.xpv*
  %xpv_pv309 = getelementptr inbounds %struct.xpv, %struct.xpv* %194, i32 0, i32 0
  %195 = load i8*, i8** %xpv_pv309, align 8
  br label %cond.end.312

cond.false.310:                                   ; preds = %cond.end.299
  %196 = load %struct.sv*, %struct.sv** %right, align 8
  %call311 = call i8* @Perl_sv_2pv_flags(%struct.sv* %196, i64* %n_a, i32 2)
  br label %cond.end.312

cond.end.312:                                     ; preds = %cond.false.310, %cond.true.305
  %cond313 = phi i8* [ %195, %cond.true.305 ], [ %call311, %cond.false.310 ]
  br label %if.end.314

if.end.314:                                       ; preds = %cond.end.312, %cond.end.256
  br label %if.end.356

if.else.315:                                      ; preds = %land.end.124
  %197 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %197, i32 0, i32 7
  %198 = load i8, i8* %op_private, align 1
  %conv316 = zext i8 %198 to i32
  %and317 = and i32 %conv316, 4
  %tobool318 = icmp ne i32 %and317, 0
  br i1 %tobool318, label %if.then.319, label %if.end.355

if.then.319:                                      ; preds = %if.else.315
  %199 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u320 = getelementptr inbounds %struct.context, %struct.context* %199, i32 0, i32 1
  %cx_blk321 = bitcast %union.anon* %cx_u320 to %struct.block*
  %blk_u322 = getelementptr inbounds %struct.block, %struct.block* %cx_blk321, i32 0, i32 7
  %blku_loop323 = bitcast %union.anon.1* %blk_u322 to %struct.block_loop*
  %itermax324 = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop323, i32 0, i32 10
  store i64 -1, i64* %itermax324, align 8
  %200 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u325 = getelementptr inbounds %struct.context, %struct.context* %200, i32 0, i32 1
  %cx_blk326 = bitcast %union.anon* %cx_u325 to %struct.block*
  %blk_u327 = getelementptr inbounds %struct.block, %struct.block* %cx_blk326, i32 0, i32 7
  %blku_loop328 = bitcast %union.anon.1* %blk_u327 to %struct.block_loop*
  %iterary329 = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop328, i32 0, i32 8
  %201 = load %struct.av*, %struct.av** %iterary329, align 8
  %202 = bitcast %struct.av* %201 to %struct.sv*
  %sv_flags330 = getelementptr inbounds %struct.sv, %struct.sv* %202, i32 0, i32 2
  %203 = load i32, i32* %sv_flags330, align 4
  %and331 = and i32 %203, 32768
  %tobool332 = icmp ne i32 %and331, 0
  br i1 %tobool332, label %cond.true.333, label %cond.false.341

cond.true.333:                                    ; preds = %if.then.319
  %204 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u334 = getelementptr inbounds %struct.context, %struct.context* %204, i32 0, i32 1
  %cx_blk335 = bitcast %union.anon* %cx_u334 to %struct.block*
  %blk_u336 = getelementptr inbounds %struct.block, %struct.block* %cx_blk335, i32 0, i32 7
  %blku_loop337 = bitcast %union.anon.1* %blk_u336 to %struct.block_loop*
  %iterary338 = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop337, i32 0, i32 8
  %205 = load %struct.av*, %struct.av** %iterary338, align 8
  %206 = bitcast %struct.av* %205 to %struct.sv*
  %call339 = call i32 @Perl_mg_size(%struct.sv* %206)
  %conv340 = sext i32 %call339 to i64
  br label %cond.end.348

cond.false.341:                                   ; preds = %if.then.319
  %207 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u342 = getelementptr inbounds %struct.context, %struct.context* %207, i32 0, i32 1
  %cx_blk343 = bitcast %union.anon* %cx_u342 to %struct.block*
  %blk_u344 = getelementptr inbounds %struct.block, %struct.block* %cx_blk343, i32 0, i32 7
  %blku_loop345 = bitcast %union.anon.1* %blk_u344 to %struct.block_loop*
  %iterary346 = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop345, i32 0, i32 8
  %208 = load %struct.av*, %struct.av** %iterary346, align 8
  %sv_any347 = getelementptr inbounds %struct.av, %struct.av* %208, i32 0, i32 0
  %209 = load %struct.xpvav*, %struct.xpvav** %sv_any347, align 8
  %xav_fill = getelementptr inbounds %struct.xpvav, %struct.xpvav* %209, i32 0, i32 1
  %210 = load i64, i64* %xav_fill, align 8
  br label %cond.end.348

cond.end.348:                                     ; preds = %cond.false.341, %cond.true.333
  %cond349 = phi i64 [ %conv340, %cond.true.333 ], [ %210, %cond.false.341 ]
  %211 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u350 = getelementptr inbounds %struct.context, %struct.context* %211, i32 0, i32 1
  %cx_blk351 = bitcast %union.anon* %cx_u350 to %struct.block*
  %blk_u352 = getelementptr inbounds %struct.block, %struct.block* %cx_blk351, i32 0, i32 7
  %blku_loop353 = bitcast %union.anon.1* %blk_u352 to %struct.block_loop*
  %iterix354 = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop353, i32 0, i32 9
  store i64 %cond349, i64* %iterix354, align 8
  br label %if.end.355

if.end.355:                                       ; preds = %cond.end.348, %if.else.315
  br label %if.end.356

if.end.356:                                       ; preds = %if.end.355, %if.end.314
  br label %if.end.403

if.else.357:                                      ; preds = %if.end.112
  %212 = load %struct.av*, %struct.av** @PL_curstack, align 8
  %213 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u358 = getelementptr inbounds %struct.context, %struct.context* %213, i32 0, i32 1
  %cx_blk359 = bitcast %union.anon* %cx_u358 to %struct.block*
  %blk_u360 = getelementptr inbounds %struct.block, %struct.block* %cx_blk359, i32 0, i32 7
  %blku_loop361 = bitcast %union.anon.1* %blk_u360 to %struct.block_loop*
  %iterary362 = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop361, i32 0, i32 8
  store %struct.av* %212, %struct.av** %iterary362, align 8
  %214 = load %struct.sv**, %struct.sv*** %sp, align 8
  %215 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast363 = ptrtoint %struct.sv** %214 to i64
  %sub.ptr.rhs.cast364 = ptrtoint %struct.sv** %215 to i64
  %sub.ptr.sub365 = sub i64 %sub.ptr.lhs.cast363, %sub.ptr.rhs.cast364
  %sub.ptr.div366 = sdiv exact i64 %sub.ptr.sub365, 8
  %216 = load %struct.av*, %struct.av** @PL_curstack, align 8
  %sv_any367 = getelementptr inbounds %struct.av, %struct.av* %216, i32 0, i32 0
  %217 = load %struct.xpvav*, %struct.xpvav** %sv_any367, align 8
  %xav_fill368 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %217, i32 0, i32 1
  store i64 %sub.ptr.div366, i64* %xav_fill368, align 8
  %218 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private369 = getelementptr inbounds %struct.op, %struct.op* %218, i32 0, i32 7
  %219 = load i8, i8* %op_private369, align 1
  %conv370 = zext i8 %219 to i32
  %and371 = and i32 %conv370, 4
  %tobool372 = icmp ne i32 %and371, 0
  br i1 %tobool372, label %if.then.373, label %if.else.392

if.then.373:                                      ; preds = %if.else.357
  %220 = load %struct.sv**, %struct.sv*** %mark, align 8
  %221 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast374 = ptrtoint %struct.sv** %220 to i64
  %sub.ptr.rhs.cast375 = ptrtoint %struct.sv** %221 to i64
  %sub.ptr.sub376 = sub i64 %sub.ptr.lhs.cast374, %sub.ptr.rhs.cast375
  %sub.ptr.div377 = sdiv exact i64 %sub.ptr.sub376, 8
  %222 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u378 = getelementptr inbounds %struct.context, %struct.context* %222, i32 0, i32 1
  %cx_blk379 = bitcast %union.anon* %cx_u378 to %struct.block*
  %blk_u380 = getelementptr inbounds %struct.block, %struct.block* %cx_blk379, i32 0, i32 7
  %blku_loop381 = bitcast %union.anon.1* %blk_u380 to %struct.block_loop*
  %itermax382 = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop381, i32 0, i32 10
  store i64 %sub.ptr.div377, i64* %itermax382, align 8
  %223 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u383 = getelementptr inbounds %struct.context, %struct.context* %223, i32 0, i32 1
  %cx_blk384 = bitcast %union.anon* %cx_u383 to %struct.block*
  %blku_oldsp385 = getelementptr inbounds %struct.block, %struct.block* %cx_blk384, i32 0, i32 0
  %224 = load i32, i32* %blku_oldsp385, align 4
  %conv386 = sext i32 %224 to i64
  %225 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u387 = getelementptr inbounds %struct.context, %struct.context* %225, i32 0, i32 1
  %cx_blk388 = bitcast %union.anon* %cx_u387 to %struct.block*
  %blk_u389 = getelementptr inbounds %struct.block, %struct.block* %cx_blk388, i32 0, i32 7
  %blku_loop390 = bitcast %union.anon.1* %blk_u389 to %struct.block_loop*
  %iterix391 = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop390, i32 0, i32 9
  store i64 %conv386, i64* %iterix391, align 8
  br label %if.end.402

if.else.392:                                      ; preds = %if.else.357
  %226 = load %struct.sv**, %struct.sv*** %mark, align 8
  %227 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast393 = ptrtoint %struct.sv** %226 to i64
  %sub.ptr.rhs.cast394 = ptrtoint %struct.sv** %227 to i64
  %sub.ptr.sub395 = sub i64 %sub.ptr.lhs.cast393, %sub.ptr.rhs.cast394
  %sub.ptr.div396 = sdiv exact i64 %sub.ptr.sub395, 8
  %228 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u397 = getelementptr inbounds %struct.context, %struct.context* %228, i32 0, i32 1
  %cx_blk398 = bitcast %union.anon* %cx_u397 to %struct.block*
  %blk_u399 = getelementptr inbounds %struct.block, %struct.block* %cx_blk398, i32 0, i32 7
  %blku_loop400 = bitcast %union.anon.1* %blk_u399 to %struct.block_loop*
  %iterix401 = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop400, i32 0, i32 9
  store i64 %sub.ptr.div396, i64* %iterix401, align 8
  br label %if.end.402

if.end.402:                                       ; preds = %if.else.392, %if.then.373
  br label %if.end.403

if.end.403:                                       ; preds = %if.end.402, %if.end.356
  %229 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %229, %struct.sv*** @PL_stack_sp, align 8
  %230 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %230, i32 0, i32 0
  %231 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %231, %struct.op** %retval
  br label %return

return:                                           ; preds = %if.end.403, %if.then.231
  %232 = load %struct.op*, %struct.op** %retval
  ret %struct.op* %232
}

declare void @Perl_save_generic_svref(%struct.sv**) #1

declare i32 @Perl_mg_size(%struct.sv*) #1

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_enterloop() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %cx = alloca %struct.context*, align 8
  %gimme = alloca i32, align 4
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 6
  %2 = load i8, i8* %op_flags, align 1
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 3
  %cmp = icmp eq i32 %and, 1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end.18

cond.false:                                       ; preds = %entry
  %3 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags2 = getelementptr inbounds %struct.op, %struct.op* %3, i32 0, i32 6
  %4 = load i8, i8* %op_flags2, align 1
  %conv3 = zext i8 %4 to i32
  %and4 = and i32 %conv3, 3
  %cmp5 = icmp eq i32 %and4, 2
  br i1 %cmp5, label %cond.true.7, label %cond.false.8

cond.true.7:                                      ; preds = %cond.false
  br label %cond.end.16

cond.false.8:                                     ; preds = %cond.false
  %5 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags9 = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 6
  %6 = load i8, i8* %op_flags9, align 1
  %conv10 = zext i8 %6 to i32
  %and11 = and i32 %conv10, 3
  %cmp12 = icmp eq i32 %and11, 3
  br i1 %cmp12, label %cond.true.14, label %cond.false.15

cond.true.14:                                     ; preds = %cond.false.8
  br label %cond.end

cond.false.15:                                    ; preds = %cond.false.8
  %call = call i32 @Perl_block_gimme()
  br label %cond.end

cond.end:                                         ; preds = %cond.false.15, %cond.true.14
  %cond = phi i32 [ 1, %cond.true.14 ], [ %call, %cond.false.15 ]
  br label %cond.end.16

cond.end.16:                                      ; preds = %cond.end, %cond.true.7
  %cond17 = phi i32 [ 0, %cond.true.7 ], [ %cond, %cond.end ]
  br label %cond.end.18

cond.end.18:                                      ; preds = %cond.end.16, %cond.true
  %cond19 = phi i32 [ 128, %cond.true ], [ %cond17, %cond.end.16 ]
  store i32 %cond19, i32* %gimme, align 4
  call void @Perl_push_scope()
  call void @Perl_save_int(i32* @PL_tmps_floor)
  %7 = load i32, i32* @PL_tmps_ix, align 4
  store i32 %7, i32* @PL_tmps_floor, align 4
  call void @Perl_push_scope()
  %8 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %8, i32 0, i32 2
  %9 = load i32, i32* %si_cxix, align 4
  %10 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxmax = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %10, i32 0, i32 3
  %11 = load i32, i32* %si_cxmax, align 4
  %cmp20 = icmp slt i32 %9, %11
  br i1 %cmp20, label %cond.true.22, label %cond.false.24

cond.true.22:                                     ; preds = %cond.end.18
  %12 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix23 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %12, i32 0, i32 2
  %13 = load i32, i32* %si_cxix23, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %si_cxix23, align 4
  br label %cond.end.27

cond.false.24:                                    ; preds = %cond.end.18
  %call25 = call i32 @Perl_cxinc()
  %14 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix26 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %14, i32 0, i32 2
  store i32 %call25, i32* %si_cxix26, align 4
  br label %cond.end.27

cond.end.27:                                      ; preds = %cond.false.24, %cond.true.22
  %cond28 = phi i32 [ %inc, %cond.true.22 ], [ %call25, %cond.false.24 ]
  %15 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix29 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %15, i32 0, i32 2
  %16 = load i32, i32* %si_cxix29, align 4
  %idxprom = sext i32 %16 to i64
  %17 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxstack = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %17, i32 0, i32 1
  %18 = load %struct.context*, %struct.context** %si_cxstack, align 8
  %arrayidx = getelementptr inbounds %struct.context, %struct.context* %18, i64 %idxprom
  store %struct.context* %arrayidx, %struct.context** %cx, align 8
  %19 = load %struct.context*, %struct.context** %cx, align 8
  %cx_type = getelementptr inbounds %struct.context, %struct.context* %19, i32 0, i32 0
  store i32 3, i32* %cx_type, align 4
  %20 = load %struct.sv**, %struct.sv*** %sp, align 8
  %21 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %20 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %21 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %conv30 = trunc i64 %sub.ptr.div to i32
  %22 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u = getelementptr inbounds %struct.context, %struct.context* %22, i32 0, i32 1
  %cx_blk = bitcast %union.anon* %cx_u to %struct.block*
  %blku_oldsp = getelementptr inbounds %struct.block, %struct.block* %cx_blk, i32 0, i32 0
  store i32 %conv30, i32* %blku_oldsp, align 4
  %23 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %24 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u31 = getelementptr inbounds %struct.context, %struct.context* %24, i32 0, i32 1
  %cx_blk32 = bitcast %union.anon* %cx_u31 to %struct.block*
  %blku_oldcop = getelementptr inbounds %struct.block, %struct.block* %cx_blk32, i32 0, i32 1
  store %struct.cop* %23, %struct.cop** %blku_oldcop, align 8
  %25 = load i32*, i32** @PL_markstack_ptr, align 8
  %26 = load i32*, i32** @PL_markstack, align 8
  %sub.ptr.lhs.cast33 = ptrtoint i32* %25 to i64
  %sub.ptr.rhs.cast34 = ptrtoint i32* %26 to i64
  %sub.ptr.sub35 = sub i64 %sub.ptr.lhs.cast33, %sub.ptr.rhs.cast34
  %sub.ptr.div36 = sdiv exact i64 %sub.ptr.sub35, 4
  %conv37 = trunc i64 %sub.ptr.div36 to i32
  %27 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u38 = getelementptr inbounds %struct.context, %struct.context* %27, i32 0, i32 1
  %cx_blk39 = bitcast %union.anon* %cx_u38 to %struct.block*
  %blku_oldmarksp = getelementptr inbounds %struct.block, %struct.block* %cx_blk39, i32 0, i32 3
  store i32 %conv37, i32* %blku_oldmarksp, align 4
  %28 = load i32, i32* @PL_scopestack_ix, align 4
  %29 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u40 = getelementptr inbounds %struct.context, %struct.context* %29, i32 0, i32 1
  %cx_blk41 = bitcast %union.anon* %cx_u40 to %struct.block*
  %blku_oldscopesp = getelementptr inbounds %struct.block, %struct.block* %cx_blk41, i32 0, i32 4
  store i32 %28, i32* %blku_oldscopesp, align 4
  %30 = load i32, i32* @PL_retstack_ix, align 4
  %31 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u42 = getelementptr inbounds %struct.context, %struct.context* %31, i32 0, i32 1
  %cx_blk43 = bitcast %union.anon* %cx_u42 to %struct.block*
  %blku_oldretsp = getelementptr inbounds %struct.block, %struct.block* %cx_blk43, i32 0, i32 2
  store i32 %30, i32* %blku_oldretsp, align 4
  %32 = load %struct.pmop*, %struct.pmop** @PL_curpm, align 8
  %33 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u44 = getelementptr inbounds %struct.context, %struct.context* %33, i32 0, i32 1
  %cx_blk45 = bitcast %union.anon* %cx_u44 to %struct.block*
  %blku_oldpm = getelementptr inbounds %struct.block, %struct.block* %cx_blk45, i32 0, i32 5
  store %struct.pmop* %32, %struct.pmop** %blku_oldpm, align 8
  %34 = load i32, i32* %gimme, align 4
  %conv46 = trunc i32 %34 to i8
  %35 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u47 = getelementptr inbounds %struct.context, %struct.context* %35, i32 0, i32 1
  %cx_blk48 = bitcast %union.anon* %cx_u47 to %struct.block*
  %blku_gimme = getelementptr inbounds %struct.block, %struct.block* %cx_blk48, i32 0, i32 6
  store i8 %conv46, i8* %blku_gimme, align 1
  %36 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_label = getelementptr inbounds %struct.cop, %struct.cop* %36, i32 0, i32 8
  %37 = load i8*, i8** %cop_label, align 8
  %38 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u49 = getelementptr inbounds %struct.context, %struct.context* %38, i32 0, i32 1
  %cx_blk50 = bitcast %union.anon* %cx_u49 to %struct.block*
  %blk_u = getelementptr inbounds %struct.block, %struct.block* %cx_blk50, i32 0, i32 7
  %blku_loop = bitcast %union.anon.1* %blk_u to %struct.block_loop*
  %label = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop, i32 0, i32 0
  store i8* %37, i8** %label, align 8
  %39 = load %struct.sv**, %struct.sv*** %sp, align 8
  %40 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast51 = ptrtoint %struct.sv** %39 to i64
  %sub.ptr.rhs.cast52 = ptrtoint %struct.sv** %40 to i64
  %sub.ptr.sub53 = sub i64 %sub.ptr.lhs.cast51, %sub.ptr.rhs.cast52
  %sub.ptr.div54 = sdiv exact i64 %sub.ptr.sub53, 8
  %conv55 = trunc i64 %sub.ptr.div54 to i32
  %41 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u56 = getelementptr inbounds %struct.context, %struct.context* %41, i32 0, i32 1
  %cx_blk57 = bitcast %union.anon* %cx_u56 to %struct.block*
  %blk_u58 = getelementptr inbounds %struct.block, %struct.block* %cx_blk57, i32 0, i32 7
  %blku_loop59 = bitcast %union.anon.1* %blk_u58 to %struct.block_loop*
  %resetsp = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop59, i32 0, i32 1
  store i32 %conv55, i32* %resetsp, align 4
  %42 = load %struct.op*, %struct.op** @PL_op, align 8
  %43 = bitcast %struct.op* %42 to %struct.loop*
  %op_redoop = getelementptr inbounds %struct.loop, %struct.loop* %43, i32 0, i32 10
  %44 = load %struct.op*, %struct.op** %op_redoop, align 8
  %45 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u60 = getelementptr inbounds %struct.context, %struct.context* %45, i32 0, i32 1
  %cx_blk61 = bitcast %union.anon* %cx_u60 to %struct.block*
  %blk_u62 = getelementptr inbounds %struct.block, %struct.block* %cx_blk61, i32 0, i32 7
  %blku_loop63 = bitcast %union.anon.1* %blk_u62 to %struct.block_loop*
  %redo_op = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop63, i32 0, i32 2
  store %struct.op* %44, %struct.op** %redo_op, align 8
  %46 = load %struct.op*, %struct.op** @PL_op, align 8
  %47 = bitcast %struct.op* %46 to %struct.loop*
  %op_nextop = getelementptr inbounds %struct.loop, %struct.loop* %47, i32 0, i32 11
  %48 = load %struct.op*, %struct.op** %op_nextop, align 8
  %49 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u64 = getelementptr inbounds %struct.context, %struct.context* %49, i32 0, i32 1
  %cx_blk65 = bitcast %union.anon* %cx_u64 to %struct.block*
  %blk_u66 = getelementptr inbounds %struct.block, %struct.block* %cx_blk65, i32 0, i32 7
  %blku_loop67 = bitcast %union.anon.1* %blk_u66 to %struct.block_loop*
  %next_op = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop67, i32 0, i32 3
  store %struct.op* %48, %struct.op** %next_op, align 8
  %50 = load %struct.op*, %struct.op** @PL_op, align 8
  %51 = bitcast %struct.op* %50 to %struct.loop*
  %op_lastop = getelementptr inbounds %struct.loop, %struct.loop* %51, i32 0, i32 12
  %52 = load %struct.op*, %struct.op** %op_lastop, align 8
  %53 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u68 = getelementptr inbounds %struct.context, %struct.context* %53, i32 0, i32 1
  %cx_blk69 = bitcast %union.anon* %cx_u68 to %struct.block*
  %blk_u70 = getelementptr inbounds %struct.block, %struct.block* %cx_blk69, i32 0, i32 7
  %blku_loop71 = bitcast %union.anon.1* %blk_u70 to %struct.block_loop*
  %last_op = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop71, i32 0, i32 4
  store %struct.op* %52, %struct.op** %last_op, align 8
  %54 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u72 = getelementptr inbounds %struct.context, %struct.context* %54, i32 0, i32 1
  %cx_blk73 = bitcast %union.anon* %cx_u72 to %struct.block*
  %blk_u74 = getelementptr inbounds %struct.block, %struct.block* %cx_blk73, i32 0, i32 7
  %blku_loop75 = bitcast %union.anon.1* %blk_u74 to %struct.block_loop*
  %iterlval = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop75, i32 0, i32 7
  store %struct.sv* null, %struct.sv** %iterlval, align 8
  %55 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u76 = getelementptr inbounds %struct.context, %struct.context* %55, i32 0, i32 1
  %cx_blk77 = bitcast %union.anon* %cx_u76 to %struct.block*
  %blk_u78 = getelementptr inbounds %struct.block, %struct.block* %cx_blk77, i32 0, i32 7
  %blku_loop79 = bitcast %union.anon.1* %blk_u78 to %struct.block_loop*
  %iterary = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop79, i32 0, i32 8
  store %struct.av* null, %struct.av** %iterary, align 8
  %56 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u80 = getelementptr inbounds %struct.context, %struct.context* %56, i32 0, i32 1
  %cx_blk81 = bitcast %union.anon* %cx_u80 to %struct.block*
  %blk_u82 = getelementptr inbounds %struct.block, %struct.block* %cx_blk81, i32 0, i32 7
  %blku_loop83 = bitcast %union.anon.1* %blk_u82 to %struct.block_loop*
  %iterix = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop83, i32 0, i32 9
  store i64 -1, i64* %iterix, align 8
  %57 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u84 = getelementptr inbounds %struct.context, %struct.context* %57, i32 0, i32 1
  %cx_blk85 = bitcast %union.anon* %cx_u84 to %struct.block*
  %blk_u86 = getelementptr inbounds %struct.block, %struct.block* %cx_blk85, i32 0, i32 7
  %blku_loop87 = bitcast %union.anon.1* %blk_u86 to %struct.block_loop*
  %itervar = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop87, i32 0, i32 5
  store %struct.sv** null, %struct.sv*** %itervar, align 8
  br i1 false, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end.27
  %58 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u88 = getelementptr inbounds %struct.context, %struct.context* %58, i32 0, i32 1
  %cx_blk89 = bitcast %union.anon* %cx_u88 to %struct.block*
  %blk_u90 = getelementptr inbounds %struct.block, %struct.block* %cx_blk89, i32 0, i32 7
  %blku_loop91 = bitcast %union.anon.1* %blk_u90 to %struct.block_loop*
  %itervar92 = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop91, i32 0, i32 5
  %59 = load %struct.sv**, %struct.sv*** %itervar92, align 8
  %60 = load %struct.sv*, %struct.sv** %59, align 8
  store %struct.sv* %60, %struct.sv** @PL_Sv, align 8
  %61 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %tobool = icmp ne %struct.sv* %61, null
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then
  %62 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %62, i32 0, i32 1
  %63 = load i32, i32* %sv_refcnt, align 4
  %inc93 = add i32 %63, 1
  store i32 %inc93, i32* %sv_refcnt, align 4
  %tobool94 = icmp ne i32 %inc93, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then
  %64 = phi i1 [ false, %if.then ], [ %tobool94, %land.rhs ]
  %land.ext = zext i1 %64 to i32
  %65 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %66 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u95 = getelementptr inbounds %struct.context, %struct.context* %66, i32 0, i32 1
  %cx_blk96 = bitcast %union.anon* %cx_u95 to %struct.block*
  %blk_u97 = getelementptr inbounds %struct.block, %struct.block* %cx_blk96, i32 0, i32 7
  %blku_loop98 = bitcast %union.anon.1* %blk_u97 to %struct.block_loop*
  %itersave = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop98, i32 0, i32 6
  store %struct.sv* %65, %struct.sv** %itersave, align 8
  br label %if.end

if.else:                                          ; preds = %cond.end.27
  %67 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u99 = getelementptr inbounds %struct.context, %struct.context* %67, i32 0, i32 1
  %cx_blk100 = bitcast %union.anon* %cx_u99 to %struct.block*
  %blk_u101 = getelementptr inbounds %struct.block, %struct.block* %cx_blk100, i32 0, i32 7
  %blku_loop102 = bitcast %union.anon.1* %blk_u101 to %struct.block_loop*
  %itersave103 = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop102, i32 0, i32 6
  store %struct.sv* null, %struct.sv** %itersave103, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %land.end
  %68 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %68, %struct.sv*** @PL_stack_sp, align 8
  %69 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %69, i32 0, i32 0
  %70 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %70
}

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_leaveloop() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %cx = alloca %struct.context*, align 8
  %gimme = alloca i32, align 4
  %newsp = alloca %struct.sv**, align 8
  %newpm = alloca %struct.pmop*, align 8
  %mark = alloca %struct.sv**, align 8
  %s_v_p = alloca %struct.sv**, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %1, i32 0, i32 2
  %2 = load i32, i32* %si_cxix, align 4
  %dec = add nsw i32 %2, -1
  store i32 %dec, i32* %si_cxix, align 4
  %idxprom = sext i32 %2 to i64
  %3 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxstack = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %3, i32 0, i32 1
  %4 = load %struct.context*, %struct.context** %si_cxstack, align 8
  %arrayidx = getelementptr inbounds %struct.context, %struct.context* %4, i64 %idxprom
  store %struct.context* %arrayidx, %struct.context** %cx, align 8
  %5 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %6 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u = getelementptr inbounds %struct.context, %struct.context* %6, i32 0, i32 1
  %cx_blk = bitcast %union.anon* %cx_u to %struct.block*
  %blku_oldsp = getelementptr inbounds %struct.block, %struct.block* %cx_blk, i32 0, i32 0
  %7 = load i32, i32* %blku_oldsp, align 4
  %idx.ext = sext i32 %7 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %5, i64 %idx.ext
  store %struct.sv** %add.ptr, %struct.sv*** %newsp, align 8
  %8 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u1 = getelementptr inbounds %struct.context, %struct.context* %8, i32 0, i32 1
  %cx_blk2 = bitcast %union.anon* %cx_u1 to %struct.block*
  %blku_oldcop = getelementptr inbounds %struct.block, %struct.block* %cx_blk2, i32 0, i32 1
  %9 = load %struct.cop*, %struct.cop** %blku_oldcop, align 8
  store volatile %struct.cop* %9, %struct.cop** @PL_curcop, align 8
  %10 = load i32*, i32** @PL_markstack, align 8
  %11 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u3 = getelementptr inbounds %struct.context, %struct.context* %11, i32 0, i32 1
  %cx_blk4 = bitcast %union.anon* %cx_u3 to %struct.block*
  %blku_oldmarksp = getelementptr inbounds %struct.block, %struct.block* %cx_blk4, i32 0, i32 3
  %12 = load i32, i32* %blku_oldmarksp, align 4
  %idx.ext5 = sext i32 %12 to i64
  %add.ptr6 = getelementptr inbounds i32, i32* %10, i64 %idx.ext5
  store i32* %add.ptr6, i32** @PL_markstack_ptr, align 8
  %13 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u7 = getelementptr inbounds %struct.context, %struct.context* %13, i32 0, i32 1
  %cx_blk8 = bitcast %union.anon* %cx_u7 to %struct.block*
  %blku_oldscopesp = getelementptr inbounds %struct.block, %struct.block* %cx_blk8, i32 0, i32 4
  %14 = load i32, i32* %blku_oldscopesp, align 4
  store i32 %14, i32* @PL_scopestack_ix, align 4
  %15 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u9 = getelementptr inbounds %struct.context, %struct.context* %15, i32 0, i32 1
  %cx_blk10 = bitcast %union.anon* %cx_u9 to %struct.block*
  %blku_oldretsp = getelementptr inbounds %struct.block, %struct.block* %cx_blk10, i32 0, i32 2
  %16 = load i32, i32* %blku_oldretsp, align 4
  store i32 %16, i32* @PL_retstack_ix, align 4
  %17 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u11 = getelementptr inbounds %struct.context, %struct.context* %17, i32 0, i32 1
  %cx_blk12 = bitcast %union.anon* %cx_u11 to %struct.block*
  %blku_oldpm = getelementptr inbounds %struct.block, %struct.block* %cx_blk12, i32 0, i32 5
  %18 = load %struct.pmop*, %struct.pmop** %blku_oldpm, align 8
  store %struct.pmop* %18, %struct.pmop** %newpm, align 8
  %19 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u13 = getelementptr inbounds %struct.context, %struct.context* %19, i32 0, i32 1
  %cx_blk14 = bitcast %union.anon* %cx_u13 to %struct.block*
  %blku_gimme = getelementptr inbounds %struct.block, %struct.block* %cx_blk14, i32 0, i32 6
  %20 = load i8, i8* %blku_gimme, align 1
  %conv = zext i8 %20 to i32
  store i32 %conv, i32* %gimme, align 4
  %21 = load %struct.sv**, %struct.sv*** %newsp, align 8
  store %struct.sv** %21, %struct.sv*** %mark, align 8
  %22 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %23 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u15 = getelementptr inbounds %struct.context, %struct.context* %23, i32 0, i32 1
  %cx_blk16 = bitcast %union.anon* %cx_u15 to %struct.block*
  %blk_u = getelementptr inbounds %struct.block, %struct.block* %cx_blk16, i32 0, i32 7
  %blku_loop = bitcast %union.anon.1* %blk_u to %struct.block_loop*
  %resetsp = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop, i32 0, i32 1
  %24 = load i32, i32* %resetsp, align 4
  %idx.ext17 = sext i32 %24 to i64
  %add.ptr18 = getelementptr inbounds %struct.sv*, %struct.sv** %22, i64 %idx.ext17
  store %struct.sv** %add.ptr18, %struct.sv*** %newsp, align 8
  store i8 0, i8* @PL_tainted, align 1
  %25 = load i32, i32* %gimme, align 4
  %cmp = icmp eq i32 %25, 128
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  br label %if.end.35

if.else:                                          ; preds = %entry
  %26 = load i32, i32* %gimme, align 4
  %cmp20 = icmp eq i32 %26, 0
  br i1 %cmp20, label %if.then.22, label %if.else.28

if.then.22:                                       ; preds = %if.else
  %27 = load %struct.sv**, %struct.sv*** %mark, align 8
  %28 = load %struct.sv**, %struct.sv*** %sp, align 8
  %cmp23 = icmp ult %struct.sv** %27, %28
  br i1 %cmp23, label %if.then.25, label %if.else.26

if.then.25:                                       ; preds = %if.then.22
  %29 = load %struct.sv**, %struct.sv*** %sp, align 8
  %30 = load %struct.sv*, %struct.sv** %29, align 8
  %call = call %struct.sv* @Perl_sv_mortalcopy(%struct.sv* %30)
  %31 = load %struct.sv**, %struct.sv*** %newsp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %31, i32 1
  store %struct.sv** %incdec.ptr, %struct.sv*** %newsp, align 8
  store %struct.sv* %call, %struct.sv** %incdec.ptr, align 8
  br label %if.end

if.else.26:                                       ; preds = %if.then.22
  %32 = load %struct.sv**, %struct.sv*** %newsp, align 8
  %incdec.ptr27 = getelementptr inbounds %struct.sv*, %struct.sv** %32, i32 1
  store %struct.sv** %incdec.ptr27, %struct.sv*** %newsp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %incdec.ptr27, align 8
  br label %if.end

if.end:                                           ; preds = %if.else.26, %if.then.25
  br label %if.end.34

if.else.28:                                       ; preds = %if.else
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.else.28
  %33 = load %struct.sv**, %struct.sv*** %mark, align 8
  %34 = load %struct.sv**, %struct.sv*** %sp, align 8
  %cmp29 = icmp ult %struct.sv** %33, %34
  br i1 %cmp29, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %35 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr31 = getelementptr inbounds %struct.sv*, %struct.sv** %35, i32 1
  store %struct.sv** %incdec.ptr31, %struct.sv*** %mark, align 8
  %36 = load %struct.sv*, %struct.sv** %incdec.ptr31, align 8
  %call32 = call %struct.sv* @Perl_sv_mortalcopy(%struct.sv* %36)
  %37 = load %struct.sv**, %struct.sv*** %newsp, align 8
  %incdec.ptr33 = getelementptr inbounds %struct.sv*, %struct.sv** %37, i32 1
  store %struct.sv** %incdec.ptr33, %struct.sv*** %newsp, align 8
  store %struct.sv* %call32, %struct.sv** %incdec.ptr33, align 8
  store i8 0, i8* @PL_tainted, align 1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end.34

if.end.34:                                        ; preds = %while.end, %if.end
  br label %if.end.35

if.end.35:                                        ; preds = %if.end.34, %if.then
  %38 = load %struct.sv**, %struct.sv*** %newsp, align 8
  store %struct.sv** %38, %struct.sv*** %sp, align 8
  %39 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %39, %struct.sv*** @PL_stack_sp, align 8
  %40 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u36 = getelementptr inbounds %struct.context, %struct.context* %40, i32 0, i32 1
  %cx_blk37 = bitcast %union.anon* %cx_u36 to %struct.block*
  %blk_u38 = getelementptr inbounds %struct.block, %struct.block* %cx_blk37, i32 0, i32 7
  %blku_loop39 = bitcast %union.anon.1* %blk_u38 to %struct.block_loop*
  %iterlval = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop39, i32 0, i32 7
  %41 = load %struct.sv*, %struct.sv** %iterlval, align 8
  call void @Perl_sv_free(%struct.sv* %41)
  %42 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u40 = getelementptr inbounds %struct.context, %struct.context* %42, i32 0, i32 1
  %cx_blk41 = bitcast %union.anon* %cx_u40 to %struct.block*
  %blk_u42 = getelementptr inbounds %struct.block, %struct.block* %cx_blk41, i32 0, i32 7
  %blku_loop43 = bitcast %union.anon.1* %blk_u42 to %struct.block_loop*
  %itervar = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop43, i32 0, i32 5
  %43 = load %struct.sv**, %struct.sv*** %itervar, align 8
  %tobool = icmp ne %struct.sv** %43, null
  br i1 %tobool, label %if.then.44, label %if.end.55

if.then.44:                                       ; preds = %if.end.35
  %44 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u45 = getelementptr inbounds %struct.context, %struct.context* %44, i32 0, i32 1
  %cx_blk46 = bitcast %union.anon* %cx_u45 to %struct.block*
  %blk_u47 = getelementptr inbounds %struct.block, %struct.block* %cx_blk46, i32 0, i32 7
  %blku_loop48 = bitcast %union.anon.1* %blk_u47 to %struct.block_loop*
  %itervar49 = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop48, i32 0, i32 5
  %45 = load %struct.sv**, %struct.sv*** %itervar49, align 8
  store %struct.sv** %45, %struct.sv*** %s_v_p, align 8
  %46 = load %struct.sv**, %struct.sv*** %s_v_p, align 8
  %47 = load %struct.sv*, %struct.sv** %46, align 8
  %call50 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %47)
  %48 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u51 = getelementptr inbounds %struct.context, %struct.context* %48, i32 0, i32 1
  %cx_blk52 = bitcast %union.anon* %cx_u51 to %struct.block*
  %blk_u53 = getelementptr inbounds %struct.block, %struct.block* %cx_blk52, i32 0, i32 7
  %blku_loop54 = bitcast %union.anon.1* %blk_u53 to %struct.block_loop*
  %itersave = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop54, i32 0, i32 6
  %49 = load %struct.sv*, %struct.sv** %itersave, align 8
  %50 = load %struct.sv**, %struct.sv*** %s_v_p, align 8
  store %struct.sv* %49, %struct.sv** %50, align 8
  br label %if.end.55

if.end.55:                                        ; preds = %if.then.44, %if.end.35
  %51 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u56 = getelementptr inbounds %struct.context, %struct.context* %51, i32 0, i32 1
  %cx_blk57 = bitcast %union.anon* %cx_u56 to %struct.block*
  %blk_u58 = getelementptr inbounds %struct.block, %struct.block* %cx_blk57, i32 0, i32 7
  %blku_loop59 = bitcast %union.anon.1* %blk_u58 to %struct.block_loop*
  %iterary = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop59, i32 0, i32 8
  %52 = load %struct.av*, %struct.av** %iterary, align 8
  %tobool60 = icmp ne %struct.av* %52, null
  br i1 %tobool60, label %land.lhs.true, label %if.end.74

land.lhs.true:                                    ; preds = %if.end.55
  %53 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u61 = getelementptr inbounds %struct.context, %struct.context* %53, i32 0, i32 1
  %cx_blk62 = bitcast %union.anon* %cx_u61 to %struct.block*
  %blk_u63 = getelementptr inbounds %struct.block, %struct.block* %cx_blk62, i32 0, i32 7
  %blku_loop64 = bitcast %union.anon.1* %blk_u63 to %struct.block_loop*
  %iterary65 = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop64, i32 0, i32 8
  %54 = load %struct.av*, %struct.av** %iterary65, align 8
  %55 = load %struct.av*, %struct.av** @PL_curstack, align 8
  %cmp66 = icmp ne %struct.av* %54, %55
  br i1 %cmp66, label %if.then.68, label %if.end.74

if.then.68:                                       ; preds = %land.lhs.true
  %56 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u69 = getelementptr inbounds %struct.context, %struct.context* %56, i32 0, i32 1
  %cx_blk70 = bitcast %union.anon* %cx_u69 to %struct.block*
  %blk_u71 = getelementptr inbounds %struct.block, %struct.block* %cx_blk70, i32 0, i32 7
  %blku_loop72 = bitcast %union.anon.1* %blk_u71 to %struct.block_loop*
  %iterary73 = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop72, i32 0, i32 8
  %57 = load %struct.av*, %struct.av** %iterary73, align 8
  %58 = bitcast %struct.av* %57 to %struct.sv*
  call void @Perl_sv_free(%struct.sv* %58)
  br label %if.end.74

if.end.74:                                        ; preds = %if.then.68, %land.lhs.true, %if.end.55
  %59 = load %struct.pmop*, %struct.pmop** %newpm, align 8
  store %struct.pmop* %59, %struct.pmop** @PL_curpm, align 8
  call void @Perl_pop_scope()
  call void @Perl_pop_scope()
  %60 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %60, i32 0, i32 0
  %61 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %61
}

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_return() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %mark = alloca %struct.sv**, align 8
  %cxix = alloca i32, align 4
  %cx = alloca %struct.context*, align 8
  %popsub2 = alloca i8, align 1
  %clear_errsv = alloca i8, align 1
  %gimme = alloca i32, align 4
  %newsp = alloca %struct.sv**, align 8
  %newpm = alloca %struct.pmop*, align 8
  %optype = alloca i32, align 4
  %sv = alloca %struct.sv*, align 8
  %nsv = alloca %struct.sv*, align 8
  %tmp = alloca %struct.av*, align 8
  %fill = alloca i64, align 8
  %tmp348 = alloca i64, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %2 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %2, i32 -1
  store i32* %incdec.ptr, i32** @PL_markstack_ptr, align 8
  %3 = load i32, i32* %2, align 4
  %idx.ext = sext i32 %3 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %idx.ext
  store %struct.sv** %add.ptr, %struct.sv*** %mark, align 8
  store i8 0, i8* %popsub2, align 1
  store i8 0, i8* %clear_errsv, align 1
  store i32 0, i32* %optype, align 4
  %4 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_type = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %4, i32 0, i32 4
  %5 = load i32, i32* %si_type, align 4
  %cmp = icmp eq i32 %5, 3
  br i1 %cmp, label %if.then, label %if.end.10

if.then:                                          ; preds = %entry
  %6 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %6, i32 0, i32 2
  %7 = load i32, i32* %si_cxix, align 4
  %8 = load i32, i32* @PL_sortcxix, align 4
  %cmp1 = icmp eq i32 %7, %8
  br i1 %cmp1, label %if.then.4, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then
  %9 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix2 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %9, i32 0, i32 2
  %10 = load i32, i32* %si_cxix2, align 4
  %call = call i32 @S_dopoptosub(i32 %10)
  %11 = load i32, i32* @PL_sortcxix, align 4
  %cmp3 = icmp sle i32 %call, %11
  br i1 %cmp3, label %if.then.4, label %if.end.9

if.then.4:                                        ; preds = %lor.lhs.false, %if.then
  %12 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix5 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %12, i32 0, i32 2
  %13 = load i32, i32* %si_cxix5, align 4
  %14 = load i32, i32* @PL_sortcxix, align 4
  %cmp6 = icmp sgt i32 %13, %14
  br i1 %cmp6, label %if.then.7, label %if.end

if.then.7:                                        ; preds = %if.then.4
  %15 = load i32, i32* @PL_sortcxix, align 4
  call void @Perl_dounwind(i32 %15)
  br label %if.end

if.end:                                           ; preds = %if.then.7, %if.then.4
  %16 = load %struct.sv**, %struct.sv*** %sp, align 8
  %17 = load %struct.sv*, %struct.sv** %16, align 8
  %18 = load %struct.av*, %struct.av** @PL_curstack, align 8
  %sv_any = getelementptr inbounds %struct.av, %struct.av* %18, i32 0, i32 0
  %19 = load %struct.xpvav*, %struct.xpvav** %sv_any, align 8
  %xav_array = getelementptr inbounds %struct.xpvav, %struct.xpvav* %19, i32 0, i32 0
  %20 = load i8*, i8** %xav_array, align 8
  %21 = bitcast i8* %20 to %struct.sv**
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %21, i64 1
  store %struct.sv* %17, %struct.sv** %arrayidx, align 8
  %22 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %add.ptr8 = getelementptr inbounds %struct.sv*, %struct.sv** %22, i64 1
  store %struct.sv** %add.ptr8, %struct.sv*** @PL_stack_sp, align 8
  store %struct.op* null, %struct.op** %retval
  br label %return

if.end.9:                                         ; preds = %lor.lhs.false
  br label %if.end.10

if.end.10:                                        ; preds = %if.end.9, %entry
  %23 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix11 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %23, i32 0, i32 2
  %24 = load i32, i32* %si_cxix11, align 4
  %call12 = call i32 @S_dopoptosub(i32 %24)
  store i32 %call12, i32* %cxix, align 4
  %25 = load i32, i32* %cxix, align 4
  %cmp13 = icmp slt i32 %25, 0
  br i1 %cmp13, label %if.then.14, label %if.end.16

if.then.14:                                       ; preds = %if.end.10
  %call15 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.28, i32 0, i32 0))
  store %struct.op* %call15, %struct.op** %retval
  br label %return

if.end.16:                                        ; preds = %if.end.10
  %26 = load i32, i32* %cxix, align 4
  %27 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix17 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %27, i32 0, i32 2
  %28 = load i32, i32* %si_cxix17, align 4
  %cmp18 = icmp slt i32 %26, %28
  br i1 %cmp18, label %if.then.19, label %if.end.20

if.then.19:                                       ; preds = %if.end.16
  %29 = load i32, i32* %cxix, align 4
  call void @Perl_dounwind(i32 %29)
  br label %if.end.20

if.end.20:                                        ; preds = %if.then.19, %if.end.16
  %30 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix21 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %30, i32 0, i32 2
  %31 = load i32, i32* %si_cxix21, align 4
  %dec = add nsw i32 %31, -1
  store i32 %dec, i32* %si_cxix21, align 4
  %idxprom = sext i32 %31 to i64
  %32 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxstack = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %32, i32 0, i32 1
  %33 = load %struct.context*, %struct.context** %si_cxstack, align 8
  %arrayidx22 = getelementptr inbounds %struct.context, %struct.context* %33, i64 %idxprom
  store %struct.context* %arrayidx22, %struct.context** %cx, align 8
  %34 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %35 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u = getelementptr inbounds %struct.context, %struct.context* %35, i32 0, i32 1
  %cx_blk = bitcast %union.anon* %cx_u to %struct.block*
  %blku_oldsp = getelementptr inbounds %struct.block, %struct.block* %cx_blk, i32 0, i32 0
  %36 = load i32, i32* %blku_oldsp, align 4
  %idx.ext23 = sext i32 %36 to i64
  %add.ptr24 = getelementptr inbounds %struct.sv*, %struct.sv** %34, i64 %idx.ext23
  store %struct.sv** %add.ptr24, %struct.sv*** %newsp, align 8
  %37 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u25 = getelementptr inbounds %struct.context, %struct.context* %37, i32 0, i32 1
  %cx_blk26 = bitcast %union.anon* %cx_u25 to %struct.block*
  %blku_oldcop = getelementptr inbounds %struct.block, %struct.block* %cx_blk26, i32 0, i32 1
  %38 = load %struct.cop*, %struct.cop** %blku_oldcop, align 8
  store volatile %struct.cop* %38, %struct.cop** @PL_curcop, align 8
  %39 = load i32*, i32** @PL_markstack, align 8
  %40 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u27 = getelementptr inbounds %struct.context, %struct.context* %40, i32 0, i32 1
  %cx_blk28 = bitcast %union.anon* %cx_u27 to %struct.block*
  %blku_oldmarksp = getelementptr inbounds %struct.block, %struct.block* %cx_blk28, i32 0, i32 3
  %41 = load i32, i32* %blku_oldmarksp, align 4
  %idx.ext29 = sext i32 %41 to i64
  %add.ptr30 = getelementptr inbounds i32, i32* %39, i64 %idx.ext29
  store i32* %add.ptr30, i32** @PL_markstack_ptr, align 8
  %42 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u31 = getelementptr inbounds %struct.context, %struct.context* %42, i32 0, i32 1
  %cx_blk32 = bitcast %union.anon* %cx_u31 to %struct.block*
  %blku_oldscopesp = getelementptr inbounds %struct.block, %struct.block* %cx_blk32, i32 0, i32 4
  %43 = load i32, i32* %blku_oldscopesp, align 4
  store i32 %43, i32* @PL_scopestack_ix, align 4
  %44 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u33 = getelementptr inbounds %struct.context, %struct.context* %44, i32 0, i32 1
  %cx_blk34 = bitcast %union.anon* %cx_u33 to %struct.block*
  %blku_oldretsp = getelementptr inbounds %struct.block, %struct.block* %cx_blk34, i32 0, i32 2
  %45 = load i32, i32* %blku_oldretsp, align 4
  store i32 %45, i32* @PL_retstack_ix, align 4
  %46 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u35 = getelementptr inbounds %struct.context, %struct.context* %46, i32 0, i32 1
  %cx_blk36 = bitcast %union.anon* %cx_u35 to %struct.block*
  %blku_oldpm = getelementptr inbounds %struct.block, %struct.block* %cx_blk36, i32 0, i32 5
  %47 = load %struct.pmop*, %struct.pmop** %blku_oldpm, align 8
  store %struct.pmop* %47, %struct.pmop** %newpm, align 8
  %48 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u37 = getelementptr inbounds %struct.context, %struct.context* %48, i32 0, i32 1
  %cx_blk38 = bitcast %union.anon* %cx_u37 to %struct.block*
  %blku_gimme = getelementptr inbounds %struct.block, %struct.block* %cx_blk38, i32 0, i32 6
  %49 = load i8, i8* %blku_gimme, align 1
  %conv = zext i8 %49 to i32
  store i32 %conv, i32* %gimme, align 4
  %50 = load %struct.context*, %struct.context** %cx, align 8
  %cx_type = getelementptr inbounds %struct.context, %struct.context* %50, i32 0, i32 0
  %51 = load i32, i32* %cx_type, align 4
  %and = and i32 %51, 255
  switch i32 %and, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb.40
    i32 6, label %sw.bb.144
  ]

sw.bb:                                            ; preds = %if.end.20
  store i8 1, i8* %popsub2, align 1
  %52 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix39 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %52, i32 0, i32 2
  %53 = load i32, i32* %si_cxix39, align 4
  %inc = add nsw i32 %53, 1
  store i32 %inc, i32* %si_cxix39, align 4
  br label %sw.epilog

sw.bb.40:                                         ; preds = %if.end.20
  %54 = load volatile i32, i32* @PL_in_eval, align 4
  %and41 = and i32 %54, 4
  %tobool = icmp ne i32 %and41, 0
  br i1 %tobool, label %if.end.43, label %if.then.42

if.then.42:                                       ; preds = %sw.bb.40
  store i8 1, i8* %clear_errsv, align 1
  br label %if.end.43

if.end.43:                                        ; preds = %if.then.42, %sw.bb.40
  %55 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u44 = getelementptr inbounds %struct.context, %struct.context* %55, i32 0, i32 1
  %cx_blk45 = bitcast %union.anon* %cx_u44 to %struct.block*
  %blk_u = getelementptr inbounds %struct.block, %struct.block* %cx_blk45, i32 0, i32 7
  %blku_eval = bitcast %union.anon.1* %blk_u to %struct.block_eval*
  %old_in_eval = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval, i32 0, i32 0
  %56 = load i32, i32* %old_in_eval, align 4
  store volatile i32 %56, i32* @PL_in_eval, align 4
  %57 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u46 = getelementptr inbounds %struct.context, %struct.context* %57, i32 0, i32 1
  %cx_blk47 = bitcast %union.anon* %cx_u46 to %struct.block*
  %blk_u48 = getelementptr inbounds %struct.block, %struct.block* %cx_blk47, i32 0, i32 7
  %blku_eval49 = bitcast %union.anon.1* %blk_u48 to %struct.block_eval*
  %old_op_type = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval49, i32 0, i32 1
  %58 = load i32, i32* %old_op_type, align 4
  store i32 %58, i32* %optype, align 4
  %59 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u50 = getelementptr inbounds %struct.context, %struct.context* %59, i32 0, i32 1
  %cx_blk51 = bitcast %union.anon* %cx_u50 to %struct.block*
  %blk_u52 = getelementptr inbounds %struct.block, %struct.block* %cx_blk51, i32 0, i32 7
  %blku_eval53 = bitcast %union.anon.1* %blk_u52 to %struct.block_eval*
  %old_eval_root = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval53, i32 0, i32 3
  %60 = load %struct.op*, %struct.op** %old_eval_root, align 8
  store %struct.op* %60, %struct.op** @PL_eval_root, align 8
  %61 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u54 = getelementptr inbounds %struct.context, %struct.context* %61, i32 0, i32 1
  %cx_blk55 = bitcast %union.anon* %cx_u54 to %struct.block*
  %blk_u56 = getelementptr inbounds %struct.block, %struct.block* %cx_blk55, i32 0, i32 7
  %blku_eval57 = bitcast %union.anon.1* %blk_u56 to %struct.block_eval*
  %old_namesv = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval57, i32 0, i32 2
  %62 = load %struct.sv*, %struct.sv** %old_namesv, align 8
  %tobool58 = icmp ne %struct.sv* %62, null
  br i1 %tobool58, label %if.then.59, label %if.end.66

if.then.59:                                       ; preds = %if.end.43
  %63 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u60 = getelementptr inbounds %struct.context, %struct.context* %63, i32 0, i32 1
  %cx_blk61 = bitcast %union.anon* %cx_u60 to %struct.block*
  %blk_u62 = getelementptr inbounds %struct.block, %struct.block* %cx_blk61, i32 0, i32 7
  %blku_eval63 = bitcast %union.anon.1* %blk_u62 to %struct.block_eval*
  %old_namesv64 = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval63, i32 0, i32 2
  %64 = load %struct.sv*, %struct.sv** %old_namesv64, align 8
  %call65 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %64)
  br label %if.end.66

if.end.66:                                        ; preds = %if.then.59, %if.end.43
  %65 = load %struct.context*, %struct.context** %cx, align 8
  %cx_type67 = getelementptr inbounds %struct.context, %struct.context* %65, i32 0, i32 0
  %66 = load i32, i32* %cx_type67, align 4
  %and68 = and i32 %66, 514
  %cmp69 = icmp eq i32 %and68, 514
  br i1 %cmp69, label %if.then.71, label %if.end.72

if.then.71:                                       ; preds = %if.end.66
  br label %sw.epilog

if.end.72:                                        ; preds = %if.end.66
  call void @Perl_lex_end()
  %67 = load i32, i32* %optype, align 4
  %cmp73 = icmp eq i32 %67, 309
  br i1 %cmp73, label %land.lhs.true, label %if.end.143

land.lhs.true:                                    ; preds = %if.end.72
  %68 = load %struct.sv**, %struct.sv*** %mark, align 8
  %69 = load %struct.sv**, %struct.sv*** %sp, align 8
  %cmp75 = icmp eq %struct.sv** %68, %69
  br i1 %cmp75, label %if.then.119, label %lor.lhs.false.77

lor.lhs.false.77:                                 ; preds = %land.lhs.true
  %70 = load i32, i32* %gimme, align 4
  %cmp78 = icmp eq i32 %70, 0
  br i1 %cmp78, label %land.lhs.true.80, label %if.end.143

land.lhs.true.80:                                 ; preds = %lor.lhs.false.77
  %71 = load %struct.sv**, %struct.sv*** %sp, align 8
  %72 = load %struct.sv*, %struct.sv** %71, align 8
  %tobool81 = icmp ne %struct.sv* %72, null
  br i1 %tobool81, label %cond.false, label %cond.true

cond.true:                                        ; preds = %land.lhs.true.80
  br i1 false, label %if.end.143, label %if.then.119

cond.false:                                       ; preds = %land.lhs.true.80
  %73 = load %struct.sv**, %struct.sv*** %sp, align 8
  %74 = load %struct.sv*, %struct.sv** %73, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %74, i32 0, i32 2
  %75 = load i32, i32* %sv_flags, align 4
  %and82 = and i32 %75, 262144
  %tobool83 = icmp ne i32 %and82, 0
  br i1 %tobool83, label %cond.true.84, label %cond.false.99

cond.true.84:                                     ; preds = %cond.false
  %76 = load %struct.sv**, %struct.sv*** %sp, align 8
  %77 = load %struct.sv*, %struct.sv** %76, align 8
  %sv_any85 = getelementptr inbounds %struct.sv, %struct.sv* %77, i32 0, i32 0
  %78 = load i8*, i8** %sv_any85, align 8
  %79 = bitcast i8* %78 to %struct.xpv*
  store %struct.xpv* %79, %struct.xpv** @PL_Xpv, align 8
  %tobool86 = icmp ne %struct.xpv* %79, null
  br i1 %tobool86, label %land.lhs.true.87, label %cond.false.98

land.lhs.true.87:                                 ; preds = %cond.true.84
  %80 = load %struct.xpv*, %struct.xpv** @PL_Xpv, align 8
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %80, i32 0, i32 1
  %81 = load i64, i64* %xpv_cur, align 8
  %cmp88 = icmp ugt i64 %81, 1
  br i1 %cmp88, label %cond.true.97, label %lor.lhs.false.90

lor.lhs.false.90:                                 ; preds = %land.lhs.true.87
  %82 = load %struct.xpv*, %struct.xpv** @PL_Xpv, align 8
  %xpv_cur91 = getelementptr inbounds %struct.xpv, %struct.xpv* %82, i32 0, i32 1
  %83 = load i64, i64* %xpv_cur91, align 8
  %tobool92 = icmp ne i64 %83, 0
  br i1 %tobool92, label %land.lhs.true.93, label %cond.false.98

land.lhs.true.93:                                 ; preds = %lor.lhs.false.90
  %84 = load %struct.xpv*, %struct.xpv** @PL_Xpv, align 8
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %84, i32 0, i32 0
  %85 = load i8*, i8** %xpv_pv, align 8
  %86 = load i8, i8* %85, align 1
  %conv94 = sext i8 %86 to i32
  %cmp95 = icmp ne i32 %conv94, 48
  br i1 %cmp95, label %cond.true.97, label %cond.false.98

cond.true.97:                                     ; preds = %land.lhs.true.93, %land.lhs.true.87
  br i1 true, label %if.end.143, label %if.then.119

cond.false.98:                                    ; preds = %land.lhs.true.93, %lor.lhs.false.90, %cond.true.84
  br i1 false, label %if.end.143, label %if.then.119

cond.false.99:                                    ; preds = %cond.false
  %87 = load %struct.sv**, %struct.sv*** %sp, align 8
  %88 = load %struct.sv*, %struct.sv** %87, align 8
  %sv_flags100 = getelementptr inbounds %struct.sv, %struct.sv* %88, i32 0, i32 2
  %89 = load i32, i32* %sv_flags100, align 4
  %and101 = and i32 %89, 65536
  %tobool102 = icmp ne i32 %and101, 0
  br i1 %tobool102, label %cond.true.103, label %cond.false.107

cond.true.103:                                    ; preds = %cond.false.99
  %90 = load %struct.sv**, %struct.sv*** %sp, align 8
  %91 = load %struct.sv*, %struct.sv** %90, align 8
  %sv_any104 = getelementptr inbounds %struct.sv, %struct.sv* %91, i32 0, i32 0
  %92 = load i8*, i8** %sv_any104, align 8
  %93 = bitcast i8* %92 to %struct.xpviv*
  %xiv_iv = getelementptr inbounds %struct.xpviv, %struct.xpviv* %93, i32 0, i32 3
  %94 = load i64, i64* %xiv_iv, align 8
  %cmp105 = icmp ne i64 %94, 0
  br i1 %cmp105, label %if.end.143, label %if.then.119

cond.false.107:                                   ; preds = %cond.false.99
  %95 = load %struct.sv**, %struct.sv*** %sp, align 8
  %96 = load %struct.sv*, %struct.sv** %95, align 8
  %sv_flags108 = getelementptr inbounds %struct.sv, %struct.sv* %96, i32 0, i32 2
  %97 = load i32, i32* %sv_flags108, align 4
  %and109 = and i32 %97, 131072
  %tobool110 = icmp ne i32 %and109, 0
  br i1 %tobool110, label %cond.true.111, label %cond.false.115

cond.true.111:                                    ; preds = %cond.false.107
  %98 = load %struct.sv**, %struct.sv*** %sp, align 8
  %99 = load %struct.sv*, %struct.sv** %98, align 8
  %sv_any112 = getelementptr inbounds %struct.sv, %struct.sv* %99, i32 0, i32 0
  %100 = load i8*, i8** %sv_any112, align 8
  %101 = bitcast i8* %100 to %struct.xpvnv*
  %xnv_nv = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %101, i32 0, i32 4
  %102 = load double, double* %xnv_nv, align 8
  %cmp113 = fcmp une double %102, 0.000000e+00
  br i1 %cmp113, label %if.end.143, label %if.then.119

cond.false.115:                                   ; preds = %cond.false.107
  %103 = load %struct.sv**, %struct.sv*** %sp, align 8
  %104 = load %struct.sv*, %struct.sv** %103, align 8
  %call116 = call signext i8 @Perl_sv_2bool(%struct.sv* %104)
  %conv117 = sext i8 %call116 to i32
  %tobool118 = icmp ne i32 %conv117, 0
  br i1 %tobool118, label %if.end.143, label %if.then.119

if.then.119:                                      ; preds = %cond.false.115, %cond.true.111, %cond.true.103, %cond.false.98, %cond.true.97, %cond.true, %land.lhs.true
  %105 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u120 = getelementptr inbounds %struct.context, %struct.context* %105, i32 0, i32 1
  %cx_blk121 = bitcast %union.anon* %cx_u120 to %struct.block*
  %blk_u122 = getelementptr inbounds %struct.block, %struct.block* %cx_blk121, i32 0, i32 7
  %blku_eval123 = bitcast %union.anon.1* %blk_u122 to %struct.block_eval*
  %old_namesv124 = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval123, i32 0, i32 2
  %106 = load %struct.sv*, %struct.sv** %old_namesv124, align 8
  store %struct.sv* %106, %struct.sv** %nsv, align 8
  %107 = load %struct.gv*, %struct.gv** @PL_incgv, align 8
  %sv_any125 = getelementptr inbounds %struct.gv, %struct.gv* %107, i32 0, i32 0
  %108 = load %struct.xpvgv*, %struct.xpvgv** %sv_any125, align 8
  %xgv_gp = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %108, i32 0, i32 7
  %109 = load %struct.gp*, %struct.gp** %xgv_gp, align 8
  %gp_hv = getelementptr inbounds %struct.gp, %struct.gp* %109, i32 0, i32 5
  %110 = load %struct.hv*, %struct.hv** %gp_hv, align 8
  %tobool126 = icmp ne %struct.hv* %110, null
  br i1 %tobool126, label %cond.true.127, label %cond.false.131

cond.true.127:                                    ; preds = %if.then.119
  %111 = load %struct.gv*, %struct.gv** @PL_incgv, align 8
  %sv_any128 = getelementptr inbounds %struct.gv, %struct.gv* %111, i32 0, i32 0
  %112 = load %struct.xpvgv*, %struct.xpvgv** %sv_any128, align 8
  %xgv_gp129 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %112, i32 0, i32 7
  %113 = load %struct.gp*, %struct.gp** %xgv_gp129, align 8
  %gp_hv130 = getelementptr inbounds %struct.gp, %struct.gp* %113, i32 0, i32 5
  %114 = load %struct.hv*, %struct.hv** %gp_hv130, align 8
  br label %cond.end

cond.false.131:                                   ; preds = %if.then.119
  %115 = load %struct.gv*, %struct.gv** @PL_incgv, align 8
  %call132 = call %struct.gv* @Perl_gv_HVadd(%struct.gv* %115)
  %sv_any133 = getelementptr inbounds %struct.gv, %struct.gv* %call132, i32 0, i32 0
  %116 = load %struct.xpvgv*, %struct.xpvgv** %sv_any133, align 8
  %xgv_gp134 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %116, i32 0, i32 7
  %117 = load %struct.gp*, %struct.gp** %xgv_gp134, align 8
  %gp_hv135 = getelementptr inbounds %struct.gp, %struct.gp* %117, i32 0, i32 5
  %118 = load %struct.hv*, %struct.hv** %gp_hv135, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false.131, %cond.true.127
  %cond = phi %struct.hv* [ %114, %cond.true.127 ], [ %118, %cond.false.131 ]
  %119 = load %struct.sv*, %struct.sv** %nsv, align 8
  %sv_any136 = getelementptr inbounds %struct.sv, %struct.sv* %119, i32 0, i32 0
  %120 = load i8*, i8** %sv_any136, align 8
  %121 = bitcast i8* %120 to %struct.xpv*
  %xpv_pv137 = getelementptr inbounds %struct.xpv, %struct.xpv* %121, i32 0, i32 0
  %122 = load i8*, i8** %xpv_pv137, align 8
  %123 = load %struct.sv*, %struct.sv** %nsv, align 8
  %sv_any138 = getelementptr inbounds %struct.sv, %struct.sv* %123, i32 0, i32 0
  %124 = load i8*, i8** %sv_any138, align 8
  %125 = bitcast i8* %124 to %struct.xpv*
  %xpv_cur139 = getelementptr inbounds %struct.xpv, %struct.xpv* %125, i32 0, i32 1
  %126 = load i64, i64* %xpv_cur139, align 8
  %conv140 = trunc i64 %126 to i32
  %call141 = call %struct.sv* @Perl_hv_delete(%struct.hv* %cond, i8* %122, i32 %conv140, i32 2)
  %127 = load %struct.sv*, %struct.sv** %nsv, align 8
  %call142 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.29, i32 0, i32 0), %struct.sv* %127)
  store %struct.op* %call142, %struct.op** %retval
  br label %return

if.end.143:                                       ; preds = %cond.false.115, %cond.true.111, %cond.true.103, %cond.false.98, %cond.true.97, %cond.true, %lor.lhs.false.77, %if.end.72
  br label %sw.epilog

sw.bb.144:                                        ; preds = %if.end.20
  %128 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u145 = getelementptr inbounds %struct.context, %struct.context* %128, i32 0, i32 1
  %cx_blk146 = bitcast %union.anon* %cx_u145 to %struct.block*
  %blk_u147 = getelementptr inbounds %struct.block, %struct.block* %cx_blk146, i32 0, i32 7
  %blku_sub = bitcast %union.anon.1* %blk_u147 to %struct.block_sub*
  %dfoutgv = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub, i32 0, i32 2
  %129 = load %struct.gv*, %struct.gv** %dfoutgv, align 8
  call void @Perl_setdefout(%struct.gv* %129)
  %130 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u148 = getelementptr inbounds %struct.context, %struct.context* %130, i32 0, i32 1
  %cx_blk149 = bitcast %union.anon* %cx_u148 to %struct.block*
  %blk_u150 = getelementptr inbounds %struct.block, %struct.block* %cx_blk149, i32 0, i32 7
  %blku_sub151 = bitcast %union.anon.1* %blk_u150 to %struct.block_sub*
  %dfoutgv152 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub151, i32 0, i32 2
  %131 = load %struct.gv*, %struct.gv** %dfoutgv152, align 8
  %132 = bitcast %struct.gv* %131 to %struct.sv*
  call void @Perl_sv_free(%struct.sv* %132)
  br label %sw.epilog

sw.default:                                       ; preds = %if.end.20
  %call153 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.30, i32 0, i32 0))
  store %struct.op* %call153, %struct.op** %retval
  br label %return

sw.epilog:                                        ; preds = %sw.bb.144, %if.end.143, %if.then.71, %sw.bb
  store i8 0, i8* @PL_tainted, align 1
  %133 = load i32, i32* %gimme, align 4
  %cmp154 = icmp eq i32 %133, 0
  br i1 %cmp154, label %if.then.156, label %if.else.222

if.then.156:                                      ; preds = %sw.epilog
  %134 = load %struct.sv**, %struct.sv*** %mark, align 8
  %135 = load %struct.sv**, %struct.sv*** %sp, align 8
  %cmp157 = icmp ult %struct.sv** %134, %135
  br i1 %cmp157, label %if.then.159, label %if.else.219

if.then.159:                                      ; preds = %if.then.156
  %136 = load i8, i8* %popsub2, align 1
  %tobool160 = icmp ne i8 %136, 0
  br i1 %tobool160, label %if.then.161, label %if.else.215

if.then.161:                                      ; preds = %if.then.159
  %137 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u162 = getelementptr inbounds %struct.context, %struct.context* %137, i32 0, i32 1
  %cx_blk163 = bitcast %union.anon* %cx_u162 to %struct.block*
  %blk_u164 = getelementptr inbounds %struct.block, %struct.block* %cx_blk163, i32 0, i32 7
  %blku_sub165 = bitcast %union.anon.1* %blk_u164 to %struct.block_sub*
  %cv = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub165, i32 0, i32 0
  %138 = load %struct.cv*, %struct.cv** %cv, align 8
  %tobool166 = icmp ne %struct.cv* %138, null
  br i1 %tobool166, label %land.lhs.true.167, label %if.else.204

land.lhs.true.167:                                ; preds = %if.then.161
  %139 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u168 = getelementptr inbounds %struct.context, %struct.context* %139, i32 0, i32 1
  %cx_blk169 = bitcast %union.anon* %cx_u168 to %struct.block*
  %blk_u170 = getelementptr inbounds %struct.block, %struct.block* %cx_blk169, i32 0, i32 7
  %blku_sub171 = bitcast %union.anon.1* %blk_u170 to %struct.block_sub*
  %cv172 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub171, i32 0, i32 0
  %140 = load %struct.cv*, %struct.cv** %cv172, align 8
  %sv_any173 = getelementptr inbounds %struct.cv, %struct.cv* %140, i32 0, i32 0
  %141 = load %struct.xpvcv*, %struct.xpvcv** %sv_any173, align 8
  %xcv_depth = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %141, i32 0, i32 14
  %142 = load i64, i64* %xcv_depth, align 8
  %cmp174 = icmp sgt i64 %142, 1
  br i1 %cmp174, label %if.then.176, label %if.else.204

if.then.176:                                      ; preds = %land.lhs.true.167
  %143 = load %struct.sv**, %struct.sv*** %sp, align 8
  %144 = load %struct.sv*, %struct.sv** %143, align 8
  %sv_flags177 = getelementptr inbounds %struct.sv, %struct.sv* %144, i32 0, i32 2
  %145 = load i32, i32* %sv_flags177, align 4
  %and178 = and i32 %145, 2048
  %tobool179 = icmp ne i32 %and178, 0
  br i1 %tobool179, label %if.then.180, label %if.else

if.then.180:                                      ; preds = %if.then.176
  %146 = load %struct.sv**, %struct.sv*** %sp, align 8
  %147 = load %struct.sv*, %struct.sv** %146, align 8
  store %struct.sv* %147, %struct.sv** @PL_Sv, align 8
  %148 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %tobool181 = icmp ne %struct.sv* %148, null
  br i1 %tobool181, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then.180
  %149 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %149, i32 0, i32 1
  %150 = load i32, i32* %sv_refcnt, align 4
  %inc182 = add i32 %150, 1
  store i32 %inc182, i32* %sv_refcnt, align 4
  %tobool183 = icmp ne i32 %inc182, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then.180
  %151 = phi i1 [ false, %if.then.180 ], [ %tobool183, %land.rhs ]
  %land.ext = zext i1 %151 to i32
  %152 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %153 = load %struct.sv**, %struct.sv*** %newsp, align 8
  %incdec.ptr184 = getelementptr inbounds %struct.sv*, %struct.sv** %153, i32 1
  store %struct.sv** %incdec.ptr184, %struct.sv*** %newsp, align 8
  store %struct.sv* %152, %struct.sv** %incdec.ptr184, align 8
  %154 = load i32, i32* @PL_tmps_ix, align 4
  %155 = load i32, i32* @PL_tmps_floor, align 4
  %cmp185 = icmp sgt i32 %154, %155
  br i1 %cmp185, label %if.then.187, label %if.end.188

if.then.187:                                      ; preds = %land.end
  call void @Perl_free_tmps()
  br label %if.end.188

if.end.188:                                       ; preds = %if.then.187, %land.end
  %156 = load %struct.sv**, %struct.sv*** %newsp, align 8
  %157 = load %struct.sv*, %struct.sv** %156, align 8
  %call189 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %157)
  br label %if.end.203

if.else:                                          ; preds = %if.then.176
  %158 = load %struct.sv**, %struct.sv*** %sp, align 8
  %159 = load %struct.sv*, %struct.sv** %158, align 8
  store %struct.sv* %159, %struct.sv** @PL_Sv, align 8
  %160 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %tobool190 = icmp ne %struct.sv* %160, null
  br i1 %tobool190, label %land.rhs.191, label %land.end.195

land.rhs.191:                                     ; preds = %if.else
  %161 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_refcnt192 = getelementptr inbounds %struct.sv, %struct.sv* %161, i32 0, i32 1
  %162 = load i32, i32* %sv_refcnt192, align 4
  %inc193 = add i32 %162, 1
  store i32 %inc193, i32* %sv_refcnt192, align 4
  %tobool194 = icmp ne i32 %inc193, 0
  br label %land.end.195

land.end.195:                                     ; preds = %land.rhs.191, %if.else
  %163 = phi i1 [ false, %if.else ], [ %tobool194, %land.rhs.191 ]
  %land.ext196 = zext i1 %163 to i32
  %164 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  store %struct.sv* %164, %struct.sv** %sv, align 8
  %165 = load i32, i32* @PL_tmps_ix, align 4
  %166 = load i32, i32* @PL_tmps_floor, align 4
  %cmp197 = icmp sgt i32 %165, %166
  br i1 %cmp197, label %if.then.199, label %if.end.200

if.then.199:                                      ; preds = %land.end.195
  call void @Perl_free_tmps()
  br label %if.end.200

if.end.200:                                       ; preds = %if.then.199, %land.end.195
  %167 = load %struct.sv*, %struct.sv** %sv, align 8
  %call201 = call %struct.sv* @Perl_sv_mortalcopy(%struct.sv* %167)
  %168 = load %struct.sv**, %struct.sv*** %newsp, align 8
  %incdec.ptr202 = getelementptr inbounds %struct.sv*, %struct.sv** %168, i32 1
  store %struct.sv** %incdec.ptr202, %struct.sv*** %newsp, align 8
  store %struct.sv* %call201, %struct.sv** %incdec.ptr202, align 8
  %169 = load %struct.sv*, %struct.sv** %sv, align 8
  call void @Perl_sv_free(%struct.sv* %169)
  br label %if.end.203

if.end.203:                                       ; preds = %if.end.200, %if.end.188
  br label %if.end.214

if.else.204:                                      ; preds = %land.lhs.true.167, %if.then.161
  %170 = load %struct.sv**, %struct.sv*** %sp, align 8
  %171 = load %struct.sv*, %struct.sv** %170, align 8
  %sv_flags205 = getelementptr inbounds %struct.sv, %struct.sv* %171, i32 0, i32 2
  %172 = load i32, i32* %sv_flags205, align 4
  %and206 = and i32 %172, 2048
  %tobool207 = icmp ne i32 %and206, 0
  br i1 %tobool207, label %cond.true.208, label %cond.false.209

cond.true.208:                                    ; preds = %if.else.204
  %173 = load %struct.sv**, %struct.sv*** %sp, align 8
  %174 = load %struct.sv*, %struct.sv** %173, align 8
  br label %cond.end.211

cond.false.209:                                   ; preds = %if.else.204
  %175 = load %struct.sv**, %struct.sv*** %sp, align 8
  %176 = load %struct.sv*, %struct.sv** %175, align 8
  %call210 = call %struct.sv* @Perl_sv_mortalcopy(%struct.sv* %176)
  br label %cond.end.211

cond.end.211:                                     ; preds = %cond.false.209, %cond.true.208
  %cond212 = phi %struct.sv* [ %174, %cond.true.208 ], [ %call210, %cond.false.209 ]
  %177 = load %struct.sv**, %struct.sv*** %newsp, align 8
  %incdec.ptr213 = getelementptr inbounds %struct.sv*, %struct.sv** %177, i32 1
  store %struct.sv** %incdec.ptr213, %struct.sv*** %newsp, align 8
  store %struct.sv* %cond212, %struct.sv** %incdec.ptr213, align 8
  br label %if.end.214

if.end.214:                                       ; preds = %cond.end.211, %if.end.203
  br label %if.end.218

if.else.215:                                      ; preds = %if.then.159
  %178 = load %struct.sv**, %struct.sv*** %sp, align 8
  %179 = load %struct.sv*, %struct.sv** %178, align 8
  %call216 = call %struct.sv* @Perl_sv_mortalcopy(%struct.sv* %179)
  %180 = load %struct.sv**, %struct.sv*** %newsp, align 8
  %incdec.ptr217 = getelementptr inbounds %struct.sv*, %struct.sv** %180, i32 1
  store %struct.sv** %incdec.ptr217, %struct.sv*** %newsp, align 8
  store %struct.sv* %call216, %struct.sv** %incdec.ptr217, align 8
  br label %if.end.218

if.end.218:                                       ; preds = %if.else.215, %if.end.214
  br label %if.end.221

if.else.219:                                      ; preds = %if.then.156
  %181 = load %struct.sv**, %struct.sv*** %newsp, align 8
  %incdec.ptr220 = getelementptr inbounds %struct.sv*, %struct.sv** %181, i32 1
  store %struct.sv** %incdec.ptr220, %struct.sv*** %newsp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %incdec.ptr220, align 8
  br label %if.end.221

if.end.221:                                       ; preds = %if.else.219, %if.end.218
  br label %if.end.242

if.else.222:                                      ; preds = %sw.epilog
  %182 = load i32, i32* %gimme, align 4
  %cmp223 = icmp eq i32 %182, 1
  br i1 %cmp223, label %if.then.225, label %if.end.241

if.then.225:                                      ; preds = %if.else.222
  br label %while.cond

while.cond:                                       ; preds = %cond.end.238, %if.then.225
  %183 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr226 = getelementptr inbounds %struct.sv*, %struct.sv** %183, i32 1
  store %struct.sv** %incdec.ptr226, %struct.sv*** %mark, align 8
  %184 = load %struct.sv**, %struct.sv*** %sp, align 8
  %cmp227 = icmp ule %struct.sv** %incdec.ptr226, %184
  br i1 %cmp227, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %185 = load i8, i8* %popsub2, align 1
  %conv229 = sext i8 %185 to i32
  %tobool230 = icmp ne i32 %conv229, 0
  br i1 %tobool230, label %land.lhs.true.231, label %cond.false.236

land.lhs.true.231:                                ; preds = %while.body
  %186 = load %struct.sv**, %struct.sv*** %mark, align 8
  %187 = load %struct.sv*, %struct.sv** %186, align 8
  %sv_flags232 = getelementptr inbounds %struct.sv, %struct.sv* %187, i32 0, i32 2
  %188 = load i32, i32* %sv_flags232, align 4
  %and233 = and i32 %188, 2048
  %tobool234 = icmp ne i32 %and233, 0
  br i1 %tobool234, label %cond.true.235, label %cond.false.236

cond.true.235:                                    ; preds = %land.lhs.true.231
  %189 = load %struct.sv**, %struct.sv*** %mark, align 8
  %190 = load %struct.sv*, %struct.sv** %189, align 8
  br label %cond.end.238

cond.false.236:                                   ; preds = %land.lhs.true.231, %while.body
  %191 = load %struct.sv**, %struct.sv*** %mark, align 8
  %192 = load %struct.sv*, %struct.sv** %191, align 8
  %call237 = call %struct.sv* @Perl_sv_mortalcopy(%struct.sv* %192)
  br label %cond.end.238

cond.end.238:                                     ; preds = %cond.false.236, %cond.true.235
  %cond239 = phi %struct.sv* [ %190, %cond.true.235 ], [ %call237, %cond.false.236 ]
  %193 = load %struct.sv**, %struct.sv*** %newsp, align 8
  %incdec.ptr240 = getelementptr inbounds %struct.sv*, %struct.sv** %193, i32 1
  store %struct.sv** %incdec.ptr240, %struct.sv*** %newsp, align 8
  store %struct.sv* %cond239, %struct.sv** %incdec.ptr240, align 8
  store i8 0, i8* @PL_tainted, align 1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end.241

if.end.241:                                       ; preds = %while.end, %if.else.222
  br label %if.end.242

if.end.242:                                       ; preds = %if.end.241, %if.end.221
  %194 = load %struct.sv**, %struct.sv*** %newsp, align 8
  store %struct.sv** %194, %struct.sv*** @PL_stack_sp, align 8
  call void @Perl_pop_scope()
  %195 = load i8, i8* %popsub2, align 1
  %tobool243 = icmp ne i8 %195, 0
  br i1 %tobool243, label %if.then.244, label %if.else.374

if.then.244:                                      ; preds = %if.end.242
  %196 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix245 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %196, i32 0, i32 2
  %197 = load i32, i32* %si_cxix245, align 4
  %dec246 = add nsw i32 %197, -1
  store i32 %dec246, i32* %si_cxix245, align 4
  %198 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u247 = getelementptr inbounds %struct.context, %struct.context* %198, i32 0, i32 1
  %cx_blk248 = bitcast %union.anon* %cx_u247 to %struct.block*
  %blk_u249 = getelementptr inbounds %struct.block, %struct.block* %cx_blk248, i32 0, i32 7
  %blku_sub250 = bitcast %union.anon.1* %blk_u249 to %struct.block_sub*
  %hasargs = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub250, i32 0, i32 6
  %199 = load i8, i8* %hasargs, align 1
  %tobool251 = icmp ne i8 %199, 0
  br i1 %tobool251, label %if.then.252, label %if.end.357

if.then.252:                                      ; preds = %if.then.244
  %200 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %sv_any253 = getelementptr inbounds %struct.gv, %struct.gv* %200, i32 0, i32 0
  %201 = load %struct.xpvgv*, %struct.xpvgv** %sv_any253, align 8
  %xgv_gp254 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %201, i32 0, i32 7
  %202 = load %struct.gp*, %struct.gp** %xgv_gp254, align 8
  %gp_av = getelementptr inbounds %struct.gp, %struct.gp* %202, i32 0, i32 4
  %203 = load %struct.av*, %struct.av** %gp_av, align 8
  %204 = bitcast %struct.av* %203 to %struct.sv*
  call void @Perl_sv_free(%struct.sv* %204)
  %205 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u255 = getelementptr inbounds %struct.context, %struct.context* %205, i32 0, i32 1
  %cx_blk256 = bitcast %union.anon* %cx_u255 to %struct.block*
  %blk_u257 = getelementptr inbounds %struct.block, %struct.block* %cx_blk256, i32 0, i32 7
  %blku_sub258 = bitcast %union.anon.1* %blk_u257 to %struct.block_sub*
  %savearray = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub258, i32 0, i32 3
  %206 = load %struct.av*, %struct.av** %savearray, align 8
  %207 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %sv_any259 = getelementptr inbounds %struct.gv, %struct.gv* %207, i32 0, i32 0
  %208 = load %struct.xpvgv*, %struct.xpvgv** %sv_any259, align 8
  %xgv_gp260 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %208, i32 0, i32 7
  %209 = load %struct.gp*, %struct.gp** %xgv_gp260, align 8
  %gp_av261 = getelementptr inbounds %struct.gp, %struct.gp* %209, i32 0, i32 4
  store %struct.av* %206, %struct.av** %gp_av261, align 8
  store %struct.av* %206, %struct.av** %tmp
  %210 = load %struct.av*, %struct.av** %tmp
  %211 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u262 = getelementptr inbounds %struct.context, %struct.context* %211, i32 0, i32 1
  %cx_blk263 = bitcast %union.anon* %cx_u262 to %struct.block*
  %blk_u264 = getelementptr inbounds %struct.block, %struct.block* %cx_blk263, i32 0, i32 7
  %blku_sub265 = bitcast %union.anon.1* %blk_u264 to %struct.block_sub*
  %argarray = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub265, i32 0, i32 4
  %212 = load %struct.av*, %struct.av** %argarray, align 8
  %sv_any266 = getelementptr inbounds %struct.av, %struct.av* %212, i32 0, i32 0
  %213 = load %struct.xpvav*, %struct.xpvav** %sv_any266, align 8
  %xav_flags = getelementptr inbounds %struct.xpvav, %struct.xpvav* %213, i32 0, i32 9
  %214 = load i8, i8* %xav_flags, align 1
  %conv267 = zext i8 %214 to i32
  %and268 = and i32 %conv267, 1
  %tobool269 = icmp ne i32 %and268, 0
  br i1 %tobool269, label %if.then.270, label %if.else.314

if.then.270:                                      ; preds = %if.then.252
  %215 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u272 = getelementptr inbounds %struct.context, %struct.context* %215, i32 0, i32 1
  %cx_blk273 = bitcast %union.anon* %cx_u272 to %struct.block*
  %blk_u274 = getelementptr inbounds %struct.block, %struct.block* %cx_blk273, i32 0, i32 7
  %blku_sub275 = bitcast %union.anon.1* %blk_u274 to %struct.block_sub*
  %argarray276 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub275, i32 0, i32 4
  %216 = load %struct.av*, %struct.av** %argarray276, align 8
  %sv_any277 = getelementptr inbounds %struct.av, %struct.av* %216, i32 0, i32 0
  %217 = load %struct.xpvav*, %struct.xpvav** %sv_any277, align 8
  %xav_fill = getelementptr inbounds %struct.xpvav, %struct.xpvav* %217, i32 0, i32 1
  %218 = load i64, i64* %xav_fill, align 8
  store i64 %218, i64* %fill, align 8
  %219 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u278 = getelementptr inbounds %struct.context, %struct.context* %219, i32 0, i32 1
  %cx_blk279 = bitcast %union.anon* %cx_u278 to %struct.block*
  %blk_u280 = getelementptr inbounds %struct.block, %struct.block* %cx_blk279, i32 0, i32 7
  %blku_sub281 = bitcast %union.anon.1* %blk_u280 to %struct.block_sub*
  %argarray282 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub281, i32 0, i32 4
  %220 = load %struct.av*, %struct.av** %argarray282, align 8
  %221 = bitcast %struct.av* %220 to %struct.sv*
  call void @Perl_sv_free(%struct.sv* %221)
  %call283 = call %struct.av* @Perl_newAV()
  %222 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u284 = getelementptr inbounds %struct.context, %struct.context* %222, i32 0, i32 1
  %cx_blk285 = bitcast %union.anon* %cx_u284 to %struct.block*
  %blk_u286 = getelementptr inbounds %struct.block, %struct.block* %cx_blk285, i32 0, i32 7
  %blku_sub287 = bitcast %union.anon.1* %blk_u286 to %struct.block_sub*
  %argarray288 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub287, i32 0, i32 4
  store %struct.av* %call283, %struct.av** %argarray288, align 8
  %223 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u289 = getelementptr inbounds %struct.context, %struct.context* %223, i32 0, i32 1
  %cx_blk290 = bitcast %union.anon* %cx_u289 to %struct.block*
  %blk_u291 = getelementptr inbounds %struct.block, %struct.block* %cx_blk290, i32 0, i32 7
  %blku_sub292 = bitcast %union.anon.1* %blk_u291 to %struct.block_sub*
  %argarray293 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub292, i32 0, i32 4
  %224 = load %struct.av*, %struct.av** %argarray293, align 8
  %225 = load i64, i64* %fill, align 8
  %conv294 = trunc i64 %225 to i32
  call void @Perl_av_extend(%struct.av* %224, i32 %conv294)
  %226 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u295 = getelementptr inbounds %struct.context, %struct.context* %226, i32 0, i32 1
  %cx_blk296 = bitcast %union.anon* %cx_u295 to %struct.block*
  %blk_u297 = getelementptr inbounds %struct.block, %struct.block* %cx_blk296, i32 0, i32 7
  %blku_sub298 = bitcast %union.anon.1* %blk_u297 to %struct.block_sub*
  %argarray299 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub298, i32 0, i32 4
  %227 = load %struct.av*, %struct.av** %argarray299, align 8
  %sv_any300 = getelementptr inbounds %struct.av, %struct.av* %227, i32 0, i32 0
  %228 = load %struct.xpvav*, %struct.xpvav** %sv_any300, align 8
  %xav_flags301 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %228, i32 0, i32 9
  store i8 2, i8* %xav_flags301, align 1
  %229 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u302 = getelementptr inbounds %struct.context, %struct.context* %229, i32 0, i32 1
  %cx_blk303 = bitcast %union.anon* %cx_u302 to %struct.block*
  %blk_u304 = getelementptr inbounds %struct.block, %struct.block* %cx_blk303, i32 0, i32 7
  %blku_sub305 = bitcast %union.anon.1* %blk_u304 to %struct.block_sub*
  %argarray306 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub305, i32 0, i32 4
  %230 = load %struct.av*, %struct.av** %argarray306, align 8
  %231 = bitcast %struct.av* %230 to %struct.sv*
  %232 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u307 = getelementptr inbounds %struct.context, %struct.context* %232, i32 0, i32 1
  %cx_blk308 = bitcast %union.anon* %cx_u307 to %struct.block*
  %blk_u309 = getelementptr inbounds %struct.block, %struct.block* %cx_blk308, i32 0, i32 7
  %blku_sub310 = bitcast %union.anon.1* %blk_u309 to %struct.block_sub*
  %oldcomppad = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub310, i32 0, i32 8
  %233 = load %struct.av*, %struct.av** %oldcomppad, align 8
  %sv_any311 = getelementptr inbounds %struct.av, %struct.av* %233, i32 0, i32 0
  %234 = load %struct.xpvav*, %struct.xpvav** %sv_any311, align 8
  %xav_array312 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %234, i32 0, i32 0
  %235 = load i8*, i8** %xav_array312, align 8
  %236 = bitcast i8* %235 to %struct.sv**
  %arrayidx313 = getelementptr inbounds %struct.sv*, %struct.sv** %236, i64 0
  store %struct.sv* %231, %struct.sv** %arrayidx313, align 8
  br label %if.end.356

if.else.314:                                      ; preds = %if.then.252
  %237 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u315 = getelementptr inbounds %struct.context, %struct.context* %237, i32 0, i32 1
  %cx_blk316 = bitcast %union.anon* %cx_u315 to %struct.block*
  %blk_u317 = getelementptr inbounds %struct.block, %struct.block* %cx_blk316, i32 0, i32 7
  %blku_sub318 = bitcast %union.anon.1* %blk_u317 to %struct.block_sub*
  %argarray319 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub318, i32 0, i32 4
  %238 = load %struct.av*, %struct.av** %argarray319, align 8
  %sv_any320 = getelementptr inbounds %struct.av, %struct.av* %238, i32 0, i32 0
  %239 = load %struct.xpvav*, %struct.xpvav** %sv_any320, align 8
  %xav_array321 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %239, i32 0, i32 0
  %240 = load i8*, i8** %xav_array321, align 8
  %241 = bitcast i8* %240 to %struct.sv**
  %242 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u322 = getelementptr inbounds %struct.context, %struct.context* %242, i32 0, i32 1
  %cx_blk323 = bitcast %union.anon* %cx_u322 to %struct.block*
  %blk_u324 = getelementptr inbounds %struct.block, %struct.block* %cx_blk323, i32 0, i32 7
  %blku_sub325 = bitcast %union.anon.1* %blk_u324 to %struct.block_sub*
  %argarray326 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub325, i32 0, i32 4
  %243 = load %struct.av*, %struct.av** %argarray326, align 8
  %sv_any327 = getelementptr inbounds %struct.av, %struct.av* %243, i32 0, i32 0
  %244 = load %struct.xpvav*, %struct.xpvav** %sv_any327, align 8
  %xav_alloc = getelementptr inbounds %struct.xpvav, %struct.xpvav* %244, i32 0, i32 7
  %245 = load %struct.sv**, %struct.sv*** %xav_alloc, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %241 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %245 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %246 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u328 = getelementptr inbounds %struct.context, %struct.context* %246, i32 0, i32 1
  %cx_blk329 = bitcast %union.anon* %cx_u328 to %struct.block*
  %blk_u330 = getelementptr inbounds %struct.block, %struct.block* %cx_blk329, i32 0, i32 7
  %blku_sub331 = bitcast %union.anon.1* %blk_u330 to %struct.block_sub*
  %argarray332 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub331, i32 0, i32 4
  %247 = load %struct.av*, %struct.av** %argarray332, align 8
  %sv_any333 = getelementptr inbounds %struct.av, %struct.av* %247, i32 0, i32 0
  %248 = load %struct.xpvav*, %struct.xpvav** %sv_any333, align 8
  %xav_max = getelementptr inbounds %struct.xpvav, %struct.xpvav* %248, i32 0, i32 2
  %249 = load i64, i64* %xav_max, align 8
  %add = add nsw i64 %249, %sub.ptr.div
  store i64 %add, i64* %xav_max, align 8
  %250 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u334 = getelementptr inbounds %struct.context, %struct.context* %250, i32 0, i32 1
  %cx_blk335 = bitcast %union.anon* %cx_u334 to %struct.block*
  %blk_u336 = getelementptr inbounds %struct.block, %struct.block* %cx_blk335, i32 0, i32 7
  %blku_sub337 = bitcast %union.anon.1* %blk_u336 to %struct.block_sub*
  %argarray338 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub337, i32 0, i32 4
  %251 = load %struct.av*, %struct.av** %argarray338, align 8
  %sv_any339 = getelementptr inbounds %struct.av, %struct.av* %251, i32 0, i32 0
  %252 = load %struct.xpvav*, %struct.xpvav** %sv_any339, align 8
  %xav_alloc340 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %252, i32 0, i32 7
  %253 = load %struct.sv**, %struct.sv*** %xav_alloc340, align 8
  %254 = bitcast %struct.sv** %253 to i8*
  %255 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u341 = getelementptr inbounds %struct.context, %struct.context* %255, i32 0, i32 1
  %cx_blk342 = bitcast %union.anon* %cx_u341 to %struct.block*
  %blk_u343 = getelementptr inbounds %struct.block, %struct.block* %cx_blk342, i32 0, i32 7
  %blku_sub344 = bitcast %union.anon.1* %blk_u343 to %struct.block_sub*
  %argarray345 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub344, i32 0, i32 4
  %256 = load %struct.av*, %struct.av** %argarray345, align 8
  %sv_any346 = getelementptr inbounds %struct.av, %struct.av* %256, i32 0, i32 0
  %257 = load %struct.xpvav*, %struct.xpvav** %sv_any346, align 8
  %258 = bitcast %struct.xpvav* %257 to %struct.xpv*
  %xpv_pv347 = getelementptr inbounds %struct.xpv, %struct.xpv* %258, i32 0, i32 0
  store i8* %254, i8** %xpv_pv347, align 8
  %259 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u349 = getelementptr inbounds %struct.context, %struct.context* %259, i32 0, i32 1
  %cx_blk350 = bitcast %union.anon* %cx_u349 to %struct.block*
  %blk_u351 = getelementptr inbounds %struct.block, %struct.block* %cx_blk350, i32 0, i32 7
  %blku_sub352 = bitcast %union.anon.1* %blk_u351 to %struct.block_sub*
  %argarray353 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub352, i32 0, i32 4
  %260 = load %struct.av*, %struct.av** %argarray353, align 8
  %sv_any354 = getelementptr inbounds %struct.av, %struct.av* %260, i32 0, i32 0
  %261 = load %struct.xpvav*, %struct.xpvav** %sv_any354, align 8
  %xav_fill355 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %261, i32 0, i32 1
  store i64 -1, i64* %xav_fill355, align 8
  store i64 -1, i64* %tmp348
  %262 = load i64, i64* %tmp348
  br label %if.end.356

if.end.356:                                       ; preds = %if.else.314, %if.then.270
  br label %if.end.357

if.end.357:                                       ; preds = %if.end.356, %if.then.244
  %263 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u358 = getelementptr inbounds %struct.context, %struct.context* %263, i32 0, i32 1
  %cx_blk359 = bitcast %union.anon* %cx_u358 to %struct.block*
  %blk_u360 = getelementptr inbounds %struct.block, %struct.block* %cx_blk359, i32 0, i32 7
  %blku_sub361 = bitcast %union.anon.1* %blk_u360 to %struct.block_sub*
  %cv362 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub361, i32 0, i32 0
  %264 = load %struct.cv*, %struct.cv** %cv362, align 8
  %265 = bitcast %struct.cv* %264 to %struct.sv*
  store %struct.sv* %265, %struct.sv** %sv, align 8
  %266 = load %struct.sv*, %struct.sv** %sv, align 8
  %tobool363 = icmp ne %struct.sv* %266, null
  br i1 %tobool363, label %land.lhs.true.364, label %if.end.373

land.lhs.true.364:                                ; preds = %if.end.357
  %267 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u365 = getelementptr inbounds %struct.context, %struct.context* %267, i32 0, i32 1
  %cx_blk366 = bitcast %union.anon* %cx_u365 to %struct.block*
  %blk_u367 = getelementptr inbounds %struct.block, %struct.block* %cx_blk366, i32 0, i32 7
  %blku_sub368 = bitcast %union.anon.1* %blk_u367 to %struct.block_sub*
  %olddepth = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub368, i32 0, i32 5
  %268 = load i64, i64* %olddepth, align 8
  %269 = load %struct.sv*, %struct.sv** %sv, align 8
  %270 = bitcast %struct.sv* %269 to %struct.cv*
  %sv_any369 = getelementptr inbounds %struct.cv, %struct.cv* %270, i32 0, i32 0
  %271 = load %struct.xpvcv*, %struct.xpvcv** %sv_any369, align 8
  %xcv_depth370 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %271, i32 0, i32 14
  store i64 %268, i64* %xcv_depth370, align 8
  %tobool371 = icmp ne i64 %268, 0
  br i1 %tobool371, label %if.then.372, label %if.end.373

if.then.372:                                      ; preds = %land.lhs.true.364
  store %struct.sv* null, %struct.sv** %sv, align 8
  br label %if.end.373

if.end.373:                                       ; preds = %if.then.372, %land.lhs.true.364, %if.end.357
  br label %if.end.375

if.else.374:                                      ; preds = %if.end.242
  store %struct.sv* null, %struct.sv** %sv, align 8
  br label %if.end.375

if.end.375:                                       ; preds = %if.else.374, %if.end.373
  %272 = load %struct.pmop*, %struct.pmop** %newpm, align 8
  store %struct.pmop* %272, %struct.pmop** @PL_curpm, align 8
  %273 = load %struct.sv*, %struct.sv** %sv, align 8
  %tobool376 = icmp ne %struct.sv* %273, null
  br i1 %tobool376, label %if.then.377, label %if.end.378

if.then.377:                                      ; preds = %if.end.375
  %274 = load %struct.sv*, %struct.sv** %sv, align 8
  call void @Perl_sv_free(%struct.sv* %274)
  br label %if.end.378

if.end.378:                                       ; preds = %if.then.377, %if.end.375
  %275 = load i8, i8* %clear_errsv, align 1
  %tobool379 = icmp ne i8 %275, 0
  br i1 %tobool379, label %if.then.380, label %if.end.383

if.then.380:                                      ; preds = %if.end.378
  %276 = load %struct.gv*, %struct.gv** @PL_errgv, align 8
  %sv_any381 = getelementptr inbounds %struct.gv, %struct.gv* %276, i32 0, i32 0
  %277 = load %struct.xpvgv*, %struct.xpvgv** %sv_any381, align 8
  %xgv_gp382 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %277, i32 0, i32 7
  %278 = load %struct.gp*, %struct.gp** %xgv_gp382, align 8
  %gp_sv = getelementptr inbounds %struct.gp, %struct.gp* %278, i32 0, i32 0
  %279 = load %struct.sv*, %struct.sv** %gp_sv, align 8
  call void @Perl_sv_setpv(%struct.sv* %279, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.11, i32 0, i32 0))
  br label %if.end.383

if.end.383:                                       ; preds = %if.then.380, %if.end.378
  %call384 = call %struct.op* @Perl_pop_return()
  store %struct.op* %call384, %struct.op** %retval
  br label %return

return:                                           ; preds = %if.end.383, %sw.default, %cond.end, %if.then.14, %if.end
  %280 = load %struct.op*, %struct.op** %retval
  ret %struct.op* %280
}

declare void @Perl_lex_end() #1

declare %struct.sv* @Perl_hv_delete(%struct.hv*, i8*, i32, i32) #1

declare %struct.gv* @Perl_gv_HVadd(%struct.gv*) #1

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_last() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %cxix = alloca i32, align 4
  %cx = alloca %struct.context*, align 8
  %pop2 = alloca i32, align 4
  %gimme = alloca i32, align 4
  %optype = alloca i32, align 4
  %nextop = alloca %struct.op*, align 8
  %newsp = alloca %struct.sv**, align 8
  %newpm = alloca %struct.pmop*, align 8
  %mark = alloca %struct.sv**, align 8
  %sv = alloca %struct.sv*, align 8
  %s_v_p = alloca %struct.sv**, align 8
  %tmp = alloca %struct.av*, align 8
  %fill = alloca i64, align 8
  %tmp259 = alloca i64, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  store i32 0, i32* %pop2, align 4
  store %struct.sv* null, %struct.sv** %sv, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 6
  %2 = load i8, i8* %op_flags, align 1
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 128
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %3, i32 0, i32 2
  %4 = load i32, i32* %si_cxix, align 4
  %call = call i32 @S_dopoptoloop(i32 %4)
  store i32 %call, i32* %cxix, align 4
  %5 = load i32, i32* %cxix, align 4
  %cmp = icmp slt i32 %5, 0
  br i1 %cmp, label %if.then.2, label %if.end

if.then.2:                                        ; preds = %if.then
  %call3 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.31, i32 0, i32 0))
  store %struct.op* %call3, %struct.op** %retval
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end.11

if.else:                                          ; preds = %entry
  %6 = load %struct.op*, %struct.op** @PL_op, align 8
  %7 = bitcast %struct.op* %6 to %struct.pvop*
  %op_pv = getelementptr inbounds %struct.pvop, %struct.pvop* %7, i32 0, i32 8
  %8 = load i8*, i8** %op_pv, align 8
  %call4 = call i32 @S_dopoptolabel(i8* %8)
  store i32 %call4, i32* %cxix, align 4
  %9 = load i32, i32* %cxix, align 4
  %cmp5 = icmp slt i32 %9, 0
  br i1 %cmp5, label %if.then.7, label %if.end.10

if.then.7:                                        ; preds = %if.else
  %10 = load %struct.op*, %struct.op** @PL_op, align 8
  %11 = bitcast %struct.op* %10 to %struct.pvop*
  %op_pv8 = getelementptr inbounds %struct.pvop, %struct.pvop* %11, i32 0, i32 8
  %12 = load i8*, i8** %op_pv8, align 8
  %call9 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.32, i32 0, i32 0), i8* %12)
  store %struct.op* %call9, %struct.op** %retval
  br label %return

if.end.10:                                        ; preds = %if.else
  br label %if.end.11

if.end.11:                                        ; preds = %if.end.10, %if.end
  %13 = load i32, i32* %cxix, align 4
  %14 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix12 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %14, i32 0, i32 2
  %15 = load i32, i32* %si_cxix12, align 4
  %cmp13 = icmp slt i32 %13, %15
  br i1 %cmp13, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %if.end.11
  %16 = load i32, i32* %cxix, align 4
  call void @Perl_dounwind(i32 %16)
  br label %if.end.16

if.end.16:                                        ; preds = %if.then.15, %if.end.11
  %17 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix17 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %17, i32 0, i32 2
  %18 = load i32, i32* %si_cxix17, align 4
  %dec = add nsw i32 %18, -1
  store i32 %dec, i32* %si_cxix17, align 4
  %idxprom = sext i32 %18 to i64
  %19 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxstack = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %19, i32 0, i32 1
  %20 = load %struct.context*, %struct.context** %si_cxstack, align 8
  %arrayidx = getelementptr inbounds %struct.context, %struct.context* %20, i64 %idxprom
  store %struct.context* %arrayidx, %struct.context** %cx, align 8
  %21 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %22 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u = getelementptr inbounds %struct.context, %struct.context* %22, i32 0, i32 1
  %cx_blk = bitcast %union.anon* %cx_u to %struct.block*
  %blku_oldsp = getelementptr inbounds %struct.block, %struct.block* %cx_blk, i32 0, i32 0
  %23 = load i32, i32* %blku_oldsp, align 4
  %idx.ext = sext i32 %23 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %21, i64 %idx.ext
  store %struct.sv** %add.ptr, %struct.sv*** %newsp, align 8
  %24 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u18 = getelementptr inbounds %struct.context, %struct.context* %24, i32 0, i32 1
  %cx_blk19 = bitcast %union.anon* %cx_u18 to %struct.block*
  %blku_oldcop = getelementptr inbounds %struct.block, %struct.block* %cx_blk19, i32 0, i32 1
  %25 = load %struct.cop*, %struct.cop** %blku_oldcop, align 8
  store volatile %struct.cop* %25, %struct.cop** @PL_curcop, align 8
  %26 = load i32*, i32** @PL_markstack, align 8
  %27 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u20 = getelementptr inbounds %struct.context, %struct.context* %27, i32 0, i32 1
  %cx_blk21 = bitcast %union.anon* %cx_u20 to %struct.block*
  %blku_oldmarksp = getelementptr inbounds %struct.block, %struct.block* %cx_blk21, i32 0, i32 3
  %28 = load i32, i32* %blku_oldmarksp, align 4
  %idx.ext22 = sext i32 %28 to i64
  %add.ptr23 = getelementptr inbounds i32, i32* %26, i64 %idx.ext22
  store i32* %add.ptr23, i32** @PL_markstack_ptr, align 8
  %29 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u24 = getelementptr inbounds %struct.context, %struct.context* %29, i32 0, i32 1
  %cx_blk25 = bitcast %union.anon* %cx_u24 to %struct.block*
  %blku_oldscopesp = getelementptr inbounds %struct.block, %struct.block* %cx_blk25, i32 0, i32 4
  %30 = load i32, i32* %blku_oldscopesp, align 4
  store i32 %30, i32* @PL_scopestack_ix, align 4
  %31 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u26 = getelementptr inbounds %struct.context, %struct.context* %31, i32 0, i32 1
  %cx_blk27 = bitcast %union.anon* %cx_u26 to %struct.block*
  %blku_oldretsp = getelementptr inbounds %struct.block, %struct.block* %cx_blk27, i32 0, i32 2
  %32 = load i32, i32* %blku_oldretsp, align 4
  store i32 %32, i32* @PL_retstack_ix, align 4
  %33 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u28 = getelementptr inbounds %struct.context, %struct.context* %33, i32 0, i32 1
  %cx_blk29 = bitcast %union.anon* %cx_u28 to %struct.block*
  %blku_oldpm = getelementptr inbounds %struct.block, %struct.block* %cx_blk29, i32 0, i32 5
  %34 = load %struct.pmop*, %struct.pmop** %blku_oldpm, align 8
  store %struct.pmop* %34, %struct.pmop** %newpm, align 8
  %35 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u30 = getelementptr inbounds %struct.context, %struct.context* %35, i32 0, i32 1
  %cx_blk31 = bitcast %union.anon* %cx_u30 to %struct.block*
  %blku_gimme = getelementptr inbounds %struct.block, %struct.block* %cx_blk31, i32 0, i32 6
  %36 = load i8, i8* %blku_gimme, align 1
  %conv32 = zext i8 %36 to i32
  store i32 %conv32, i32* %gimme, align 4
  %37 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix33 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %37, i32 0, i32 2
  %38 = load i32, i32* %si_cxix33, align 4
  %inc = add nsw i32 %38, 1
  store i32 %inc, i32* %si_cxix33, align 4
  %39 = load %struct.sv**, %struct.sv*** %newsp, align 8
  store %struct.sv** %39, %struct.sv*** %mark, align 8
  %40 = load %struct.context*, %struct.context** %cx, align 8
  %cx_type = getelementptr inbounds %struct.context, %struct.context* %40, i32 0, i32 0
  %41 = load i32, i32* %cx_type, align 4
  %and34 = and i32 %41, 255
  switch i32 %and34, label %sw.default [
    i32 3, label %sw.bb
    i32 1, label %sw.bb.43
    i32 2, label %sw.bb.45
    i32 6, label %sw.bb.71
  ]

sw.bb:                                            ; preds = %if.end.16
  store i32 3, i32* %pop2, align 4
  %42 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %43 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u35 = getelementptr inbounds %struct.context, %struct.context* %43, i32 0, i32 1
  %cx_blk36 = bitcast %union.anon* %cx_u35 to %struct.block*
  %blk_u = getelementptr inbounds %struct.block, %struct.block* %cx_blk36, i32 0, i32 7
  %blku_loop = bitcast %union.anon.1* %blk_u to %struct.block_loop*
  %resetsp = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop, i32 0, i32 1
  %44 = load i32, i32* %resetsp, align 4
  %idx.ext37 = sext i32 %44 to i64
  %add.ptr38 = getelementptr inbounds %struct.sv*, %struct.sv** %42, i64 %idx.ext37
  store %struct.sv** %add.ptr38, %struct.sv*** %newsp, align 8
  %45 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u39 = getelementptr inbounds %struct.context, %struct.context* %45, i32 0, i32 1
  %cx_blk40 = bitcast %union.anon* %cx_u39 to %struct.block*
  %blk_u41 = getelementptr inbounds %struct.block, %struct.block* %cx_blk40, i32 0, i32 7
  %blku_loop42 = bitcast %union.anon.1* %blk_u41 to %struct.block_loop*
  %last_op = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop42, i32 0, i32 4
  %46 = load %struct.op*, %struct.op** %last_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %46, i32 0, i32 0
  %47 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %47, %struct.op** %nextop, align 8
  br label %sw.epilog

sw.bb.43:                                         ; preds = %if.end.16
  store i32 1, i32* %pop2, align 4
  %call44 = call %struct.op* @Perl_pop_return()
  store %struct.op* %call44, %struct.op** %nextop, align 8
  br label %sw.epilog

sw.bb.45:                                         ; preds = %if.end.16
  %48 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u46 = getelementptr inbounds %struct.context, %struct.context* %48, i32 0, i32 1
  %cx_blk47 = bitcast %union.anon* %cx_u46 to %struct.block*
  %blk_u48 = getelementptr inbounds %struct.block, %struct.block* %cx_blk47, i32 0, i32 7
  %blku_eval = bitcast %union.anon.1* %blk_u48 to %struct.block_eval*
  %old_in_eval = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval, i32 0, i32 0
  %49 = load i32, i32* %old_in_eval, align 4
  store volatile i32 %49, i32* @PL_in_eval, align 4
  %50 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u49 = getelementptr inbounds %struct.context, %struct.context* %50, i32 0, i32 1
  %cx_blk50 = bitcast %union.anon* %cx_u49 to %struct.block*
  %blk_u51 = getelementptr inbounds %struct.block, %struct.block* %cx_blk50, i32 0, i32 7
  %blku_eval52 = bitcast %union.anon.1* %blk_u51 to %struct.block_eval*
  %old_op_type = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval52, i32 0, i32 1
  %51 = load i32, i32* %old_op_type, align 4
  store i32 %51, i32* %optype, align 4
  %52 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u53 = getelementptr inbounds %struct.context, %struct.context* %52, i32 0, i32 1
  %cx_blk54 = bitcast %union.anon* %cx_u53 to %struct.block*
  %blk_u55 = getelementptr inbounds %struct.block, %struct.block* %cx_blk54, i32 0, i32 7
  %blku_eval56 = bitcast %union.anon.1* %blk_u55 to %struct.block_eval*
  %old_eval_root = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval56, i32 0, i32 3
  %53 = load %struct.op*, %struct.op** %old_eval_root, align 8
  store %struct.op* %53, %struct.op** @PL_eval_root, align 8
  %54 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u57 = getelementptr inbounds %struct.context, %struct.context* %54, i32 0, i32 1
  %cx_blk58 = bitcast %union.anon* %cx_u57 to %struct.block*
  %blk_u59 = getelementptr inbounds %struct.block, %struct.block* %cx_blk58, i32 0, i32 7
  %blku_eval60 = bitcast %union.anon.1* %blk_u59 to %struct.block_eval*
  %old_namesv = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval60, i32 0, i32 2
  %55 = load %struct.sv*, %struct.sv** %old_namesv, align 8
  %tobool61 = icmp ne %struct.sv* %55, null
  br i1 %tobool61, label %if.then.62, label %if.end.69

if.then.62:                                       ; preds = %sw.bb.45
  %56 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u63 = getelementptr inbounds %struct.context, %struct.context* %56, i32 0, i32 1
  %cx_blk64 = bitcast %union.anon* %cx_u63 to %struct.block*
  %blk_u65 = getelementptr inbounds %struct.block, %struct.block* %cx_blk64, i32 0, i32 7
  %blku_eval66 = bitcast %union.anon.1* %blk_u65 to %struct.block_eval*
  %old_namesv67 = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval66, i32 0, i32 2
  %57 = load %struct.sv*, %struct.sv** %old_namesv67, align 8
  %call68 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %57)
  br label %if.end.69

if.end.69:                                        ; preds = %if.then.62, %sw.bb.45
  %call70 = call %struct.op* @Perl_pop_return()
  store %struct.op* %call70, %struct.op** %nextop, align 8
  br label %sw.epilog

sw.bb.71:                                         ; preds = %if.end.16
  %58 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u72 = getelementptr inbounds %struct.context, %struct.context* %58, i32 0, i32 1
  %cx_blk73 = bitcast %union.anon* %cx_u72 to %struct.block*
  %blk_u74 = getelementptr inbounds %struct.block, %struct.block* %cx_blk73, i32 0, i32 7
  %blku_sub = bitcast %union.anon.1* %blk_u74 to %struct.block_sub*
  %dfoutgv = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub, i32 0, i32 2
  %59 = load %struct.gv*, %struct.gv** %dfoutgv, align 8
  call void @Perl_setdefout(%struct.gv* %59)
  %60 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u75 = getelementptr inbounds %struct.context, %struct.context* %60, i32 0, i32 1
  %cx_blk76 = bitcast %union.anon* %cx_u75 to %struct.block*
  %blk_u77 = getelementptr inbounds %struct.block, %struct.block* %cx_blk76, i32 0, i32 7
  %blku_sub78 = bitcast %union.anon.1* %blk_u77 to %struct.block_sub*
  %dfoutgv79 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub78, i32 0, i32 2
  %61 = load %struct.gv*, %struct.gv** %dfoutgv79, align 8
  %62 = bitcast %struct.gv* %61 to %struct.sv*
  call void @Perl_sv_free(%struct.sv* %62)
  %call80 = call %struct.op* @Perl_pop_return()
  store %struct.op* %call80, %struct.op** %nextop, align 8
  br label %sw.epilog

sw.default:                                       ; preds = %if.end.16
  %call81 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.33, i32 0, i32 0))
  store %struct.op* %call81, %struct.op** %retval
  br label %return

sw.epilog:                                        ; preds = %sw.bb.71, %if.end.69, %sw.bb.43, %sw.bb
  store i8 0, i8* @PL_tainted, align 1
  %63 = load i32, i32* %gimme, align 4
  %cmp82 = icmp eq i32 %63, 0
  br i1 %cmp82, label %if.then.84, label %if.else.96

if.then.84:                                       ; preds = %sw.epilog
  %64 = load %struct.sv**, %struct.sv*** %mark, align 8
  %65 = load %struct.sv**, %struct.sv*** %sp, align 8
  %cmp85 = icmp ult %struct.sv** %64, %65
  br i1 %cmp85, label %if.then.87, label %if.else.93

if.then.87:                                       ; preds = %if.then.84
  %66 = load i32, i32* %pop2, align 4
  %cmp88 = icmp eq i32 %66, 1
  br i1 %cmp88, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %if.then.87
  %67 = load %struct.sv**, %struct.sv*** %sp, align 8
  %68 = load %struct.sv*, %struct.sv** %67, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %68, i32 0, i32 2
  %69 = load i32, i32* %sv_flags, align 4
  %and90 = and i32 %69, 2048
  %tobool91 = icmp ne i32 %and90, 0
  br i1 %tobool91, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %70 = load %struct.sv**, %struct.sv*** %sp, align 8
  %71 = load %struct.sv*, %struct.sv** %70, align 8
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %if.then.87
  %72 = load %struct.sv**, %struct.sv*** %sp, align 8
  %73 = load %struct.sv*, %struct.sv** %72, align 8
  %call92 = call %struct.sv* @Perl_sv_mortalcopy(%struct.sv* %73)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.sv* [ %71, %cond.true ], [ %call92, %cond.false ]
  %74 = load %struct.sv**, %struct.sv*** %newsp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %74, i32 1
  store %struct.sv** %incdec.ptr, %struct.sv*** %newsp, align 8
  store %struct.sv* %cond, %struct.sv** %incdec.ptr, align 8
  br label %if.end.95

if.else.93:                                       ; preds = %if.then.84
  %75 = load %struct.sv**, %struct.sv*** %newsp, align 8
  %incdec.ptr94 = getelementptr inbounds %struct.sv*, %struct.sv** %75, i32 1
  store %struct.sv** %incdec.ptr94, %struct.sv*** %newsp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %incdec.ptr94, align 8
  br label %if.end.95

if.end.95:                                        ; preds = %if.else.93, %cond.end
  br label %if.end.116

if.else.96:                                       ; preds = %sw.epilog
  %76 = load i32, i32* %gimme, align 4
  %cmp97 = icmp eq i32 %76, 1
  br i1 %cmp97, label %if.then.99, label %if.end.115

if.then.99:                                       ; preds = %if.else.96
  br label %while.cond

while.cond:                                       ; preds = %cond.end.112, %if.then.99
  %77 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr100 = getelementptr inbounds %struct.sv*, %struct.sv** %77, i32 1
  store %struct.sv** %incdec.ptr100, %struct.sv*** %mark, align 8
  %78 = load %struct.sv**, %struct.sv*** %sp, align 8
  %cmp101 = icmp ule %struct.sv** %incdec.ptr100, %78
  br i1 %cmp101, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %79 = load i32, i32* %pop2, align 4
  %cmp103 = icmp eq i32 %79, 1
  br i1 %cmp103, label %land.lhs.true.105, label %cond.false.110

land.lhs.true.105:                                ; preds = %while.body
  %80 = load %struct.sv**, %struct.sv*** %mark, align 8
  %81 = load %struct.sv*, %struct.sv** %80, align 8
  %sv_flags106 = getelementptr inbounds %struct.sv, %struct.sv* %81, i32 0, i32 2
  %82 = load i32, i32* %sv_flags106, align 4
  %and107 = and i32 %82, 2048
  %tobool108 = icmp ne i32 %and107, 0
  br i1 %tobool108, label %cond.true.109, label %cond.false.110

cond.true.109:                                    ; preds = %land.lhs.true.105
  %83 = load %struct.sv**, %struct.sv*** %mark, align 8
  %84 = load %struct.sv*, %struct.sv** %83, align 8
  br label %cond.end.112

cond.false.110:                                   ; preds = %land.lhs.true.105, %while.body
  %85 = load %struct.sv**, %struct.sv*** %mark, align 8
  %86 = load %struct.sv*, %struct.sv** %85, align 8
  %call111 = call %struct.sv* @Perl_sv_mortalcopy(%struct.sv* %86)
  br label %cond.end.112

cond.end.112:                                     ; preds = %cond.false.110, %cond.true.109
  %cond113 = phi %struct.sv* [ %84, %cond.true.109 ], [ %call111, %cond.false.110 ]
  %87 = load %struct.sv**, %struct.sv*** %newsp, align 8
  %incdec.ptr114 = getelementptr inbounds %struct.sv*, %struct.sv** %87, i32 1
  store %struct.sv** %incdec.ptr114, %struct.sv*** %newsp, align 8
  store %struct.sv* %cond113, %struct.sv** %incdec.ptr114, align 8
  store i8 0, i8* @PL_tainted, align 1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end.115

if.end.115:                                       ; preds = %while.end, %if.else.96
  br label %if.end.116

if.end.116:                                       ; preds = %if.end.115, %if.end.95
  %88 = load %struct.sv**, %struct.sv*** %newsp, align 8
  store %struct.sv** %88, %struct.sv*** %sp, align 8
  %89 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %89, %struct.sv*** @PL_stack_sp, align 8
  call void @Perl_pop_scope()
  %90 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix117 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %90, i32 0, i32 2
  %91 = load i32, i32* %si_cxix117, align 4
  %dec118 = add nsw i32 %91, -1
  store i32 %dec118, i32* %si_cxix117, align 4
  %92 = load i32, i32* %pop2, align 4
  switch i32 %92, label %sw.epilog.283 [
    i32 3, label %sw.bb.119
    i32 1, label %sw.bb.161
  ]

sw.bb.119:                                        ; preds = %if.end.116
  %93 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u120 = getelementptr inbounds %struct.context, %struct.context* %93, i32 0, i32 1
  %cx_blk121 = bitcast %union.anon* %cx_u120 to %struct.block*
  %blk_u122 = getelementptr inbounds %struct.block, %struct.block* %cx_blk121, i32 0, i32 7
  %blku_loop123 = bitcast %union.anon.1* %blk_u122 to %struct.block_loop*
  %iterlval = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop123, i32 0, i32 7
  %94 = load %struct.sv*, %struct.sv** %iterlval, align 8
  call void @Perl_sv_free(%struct.sv* %94)
  %95 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u124 = getelementptr inbounds %struct.context, %struct.context* %95, i32 0, i32 1
  %cx_blk125 = bitcast %union.anon* %cx_u124 to %struct.block*
  %blk_u126 = getelementptr inbounds %struct.block, %struct.block* %cx_blk125, i32 0, i32 7
  %blku_loop127 = bitcast %union.anon.1* %blk_u126 to %struct.block_loop*
  %itervar = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop127, i32 0, i32 5
  %96 = load %struct.sv**, %struct.sv*** %itervar, align 8
  %tobool128 = icmp ne %struct.sv** %96, null
  br i1 %tobool128, label %if.then.129, label %if.end.140

if.then.129:                                      ; preds = %sw.bb.119
  %97 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u130 = getelementptr inbounds %struct.context, %struct.context* %97, i32 0, i32 1
  %cx_blk131 = bitcast %union.anon* %cx_u130 to %struct.block*
  %blk_u132 = getelementptr inbounds %struct.block, %struct.block* %cx_blk131, i32 0, i32 7
  %blku_loop133 = bitcast %union.anon.1* %blk_u132 to %struct.block_loop*
  %itervar134 = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop133, i32 0, i32 5
  %98 = load %struct.sv**, %struct.sv*** %itervar134, align 8
  store %struct.sv** %98, %struct.sv*** %s_v_p, align 8
  %99 = load %struct.sv**, %struct.sv*** %s_v_p, align 8
  %100 = load %struct.sv*, %struct.sv** %99, align 8
  %call135 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %100)
  %101 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u136 = getelementptr inbounds %struct.context, %struct.context* %101, i32 0, i32 1
  %cx_blk137 = bitcast %union.anon* %cx_u136 to %struct.block*
  %blk_u138 = getelementptr inbounds %struct.block, %struct.block* %cx_blk137, i32 0, i32 7
  %blku_loop139 = bitcast %union.anon.1* %blk_u138 to %struct.block_loop*
  %itersave = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop139, i32 0, i32 6
  %102 = load %struct.sv*, %struct.sv** %itersave, align 8
  %103 = load %struct.sv**, %struct.sv*** %s_v_p, align 8
  store %struct.sv* %102, %struct.sv** %103, align 8
  br label %if.end.140

if.end.140:                                       ; preds = %if.then.129, %sw.bb.119
  %104 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u141 = getelementptr inbounds %struct.context, %struct.context* %104, i32 0, i32 1
  %cx_blk142 = bitcast %union.anon* %cx_u141 to %struct.block*
  %blk_u143 = getelementptr inbounds %struct.block, %struct.block* %cx_blk142, i32 0, i32 7
  %blku_loop144 = bitcast %union.anon.1* %blk_u143 to %struct.block_loop*
  %iterary = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop144, i32 0, i32 8
  %105 = load %struct.av*, %struct.av** %iterary, align 8
  %tobool145 = icmp ne %struct.av* %105, null
  br i1 %tobool145, label %land.lhs.true.146, label %if.end.160

land.lhs.true.146:                                ; preds = %if.end.140
  %106 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u147 = getelementptr inbounds %struct.context, %struct.context* %106, i32 0, i32 1
  %cx_blk148 = bitcast %union.anon* %cx_u147 to %struct.block*
  %blk_u149 = getelementptr inbounds %struct.block, %struct.block* %cx_blk148, i32 0, i32 7
  %blku_loop150 = bitcast %union.anon.1* %blk_u149 to %struct.block_loop*
  %iterary151 = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop150, i32 0, i32 8
  %107 = load %struct.av*, %struct.av** %iterary151, align 8
  %108 = load %struct.av*, %struct.av** @PL_curstack, align 8
  %cmp152 = icmp ne %struct.av* %107, %108
  br i1 %cmp152, label %if.then.154, label %if.end.160

if.then.154:                                      ; preds = %land.lhs.true.146
  %109 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u155 = getelementptr inbounds %struct.context, %struct.context* %109, i32 0, i32 1
  %cx_blk156 = bitcast %union.anon* %cx_u155 to %struct.block*
  %blk_u157 = getelementptr inbounds %struct.block, %struct.block* %cx_blk156, i32 0, i32 7
  %blku_loop158 = bitcast %union.anon.1* %blk_u157 to %struct.block_loop*
  %iterary159 = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop158, i32 0, i32 8
  %110 = load %struct.av*, %struct.av** %iterary159, align 8
  %111 = bitcast %struct.av* %110 to %struct.sv*
  call void @Perl_sv_free(%struct.sv* %111)
  br label %if.end.160

if.end.160:                                       ; preds = %if.then.154, %land.lhs.true.146, %if.end.140
  call void @Perl_pop_scope()
  br label %sw.epilog.283

sw.bb.161:                                        ; preds = %if.end.116
  %112 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u162 = getelementptr inbounds %struct.context, %struct.context* %112, i32 0, i32 1
  %cx_blk163 = bitcast %union.anon* %cx_u162 to %struct.block*
  %blk_u164 = getelementptr inbounds %struct.block, %struct.block* %cx_blk163, i32 0, i32 7
  %blku_sub165 = bitcast %union.anon.1* %blk_u164 to %struct.block_sub*
  %hasargs = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub165, i32 0, i32 6
  %113 = load i8, i8* %hasargs, align 1
  %tobool166 = icmp ne i8 %113, 0
  br i1 %tobool166, label %if.then.167, label %if.end.268

if.then.167:                                      ; preds = %sw.bb.161
  %114 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %sv_any = getelementptr inbounds %struct.gv, %struct.gv* %114, i32 0, i32 0
  %115 = load %struct.xpvgv*, %struct.xpvgv** %sv_any, align 8
  %xgv_gp = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %115, i32 0, i32 7
  %116 = load %struct.gp*, %struct.gp** %xgv_gp, align 8
  %gp_av = getelementptr inbounds %struct.gp, %struct.gp* %116, i32 0, i32 4
  %117 = load %struct.av*, %struct.av** %gp_av, align 8
  %118 = bitcast %struct.av* %117 to %struct.sv*
  call void @Perl_sv_free(%struct.sv* %118)
  %119 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u168 = getelementptr inbounds %struct.context, %struct.context* %119, i32 0, i32 1
  %cx_blk169 = bitcast %union.anon* %cx_u168 to %struct.block*
  %blk_u170 = getelementptr inbounds %struct.block, %struct.block* %cx_blk169, i32 0, i32 7
  %blku_sub171 = bitcast %union.anon.1* %blk_u170 to %struct.block_sub*
  %savearray = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub171, i32 0, i32 3
  %120 = load %struct.av*, %struct.av** %savearray, align 8
  %121 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %sv_any172 = getelementptr inbounds %struct.gv, %struct.gv* %121, i32 0, i32 0
  %122 = load %struct.xpvgv*, %struct.xpvgv** %sv_any172, align 8
  %xgv_gp173 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %122, i32 0, i32 7
  %123 = load %struct.gp*, %struct.gp** %xgv_gp173, align 8
  %gp_av174 = getelementptr inbounds %struct.gp, %struct.gp* %123, i32 0, i32 4
  store %struct.av* %120, %struct.av** %gp_av174, align 8
  store %struct.av* %120, %struct.av** %tmp
  %124 = load %struct.av*, %struct.av** %tmp
  %125 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u175 = getelementptr inbounds %struct.context, %struct.context* %125, i32 0, i32 1
  %cx_blk176 = bitcast %union.anon* %cx_u175 to %struct.block*
  %blk_u177 = getelementptr inbounds %struct.block, %struct.block* %cx_blk176, i32 0, i32 7
  %blku_sub178 = bitcast %union.anon.1* %blk_u177 to %struct.block_sub*
  %argarray = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub178, i32 0, i32 4
  %126 = load %struct.av*, %struct.av** %argarray, align 8
  %sv_any179 = getelementptr inbounds %struct.av, %struct.av* %126, i32 0, i32 0
  %127 = load %struct.xpvav*, %struct.xpvav** %sv_any179, align 8
  %xav_flags = getelementptr inbounds %struct.xpvav, %struct.xpvav* %127, i32 0, i32 9
  %128 = load i8, i8* %xav_flags, align 1
  %conv180 = zext i8 %128 to i32
  %and181 = and i32 %conv180, 1
  %tobool182 = icmp ne i32 %and181, 0
  br i1 %tobool182, label %if.then.183, label %if.else.226

if.then.183:                                      ; preds = %if.then.167
  %129 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u185 = getelementptr inbounds %struct.context, %struct.context* %129, i32 0, i32 1
  %cx_blk186 = bitcast %union.anon* %cx_u185 to %struct.block*
  %blk_u187 = getelementptr inbounds %struct.block, %struct.block* %cx_blk186, i32 0, i32 7
  %blku_sub188 = bitcast %union.anon.1* %blk_u187 to %struct.block_sub*
  %argarray189 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub188, i32 0, i32 4
  %130 = load %struct.av*, %struct.av** %argarray189, align 8
  %sv_any190 = getelementptr inbounds %struct.av, %struct.av* %130, i32 0, i32 0
  %131 = load %struct.xpvav*, %struct.xpvav** %sv_any190, align 8
  %xav_fill = getelementptr inbounds %struct.xpvav, %struct.xpvav* %131, i32 0, i32 1
  %132 = load i64, i64* %xav_fill, align 8
  store i64 %132, i64* %fill, align 8
  %133 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u191 = getelementptr inbounds %struct.context, %struct.context* %133, i32 0, i32 1
  %cx_blk192 = bitcast %union.anon* %cx_u191 to %struct.block*
  %blk_u193 = getelementptr inbounds %struct.block, %struct.block* %cx_blk192, i32 0, i32 7
  %blku_sub194 = bitcast %union.anon.1* %blk_u193 to %struct.block_sub*
  %argarray195 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub194, i32 0, i32 4
  %134 = load %struct.av*, %struct.av** %argarray195, align 8
  %135 = bitcast %struct.av* %134 to %struct.sv*
  call void @Perl_sv_free(%struct.sv* %135)
  %call196 = call %struct.av* @Perl_newAV()
  %136 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u197 = getelementptr inbounds %struct.context, %struct.context* %136, i32 0, i32 1
  %cx_blk198 = bitcast %union.anon* %cx_u197 to %struct.block*
  %blk_u199 = getelementptr inbounds %struct.block, %struct.block* %cx_blk198, i32 0, i32 7
  %blku_sub200 = bitcast %union.anon.1* %blk_u199 to %struct.block_sub*
  %argarray201 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub200, i32 0, i32 4
  store %struct.av* %call196, %struct.av** %argarray201, align 8
  %137 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u202 = getelementptr inbounds %struct.context, %struct.context* %137, i32 0, i32 1
  %cx_blk203 = bitcast %union.anon* %cx_u202 to %struct.block*
  %blk_u204 = getelementptr inbounds %struct.block, %struct.block* %cx_blk203, i32 0, i32 7
  %blku_sub205 = bitcast %union.anon.1* %blk_u204 to %struct.block_sub*
  %argarray206 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub205, i32 0, i32 4
  %138 = load %struct.av*, %struct.av** %argarray206, align 8
  %139 = load i64, i64* %fill, align 8
  %conv207 = trunc i64 %139 to i32
  call void @Perl_av_extend(%struct.av* %138, i32 %conv207)
  %140 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u208 = getelementptr inbounds %struct.context, %struct.context* %140, i32 0, i32 1
  %cx_blk209 = bitcast %union.anon* %cx_u208 to %struct.block*
  %blk_u210 = getelementptr inbounds %struct.block, %struct.block* %cx_blk209, i32 0, i32 7
  %blku_sub211 = bitcast %union.anon.1* %blk_u210 to %struct.block_sub*
  %argarray212 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub211, i32 0, i32 4
  %141 = load %struct.av*, %struct.av** %argarray212, align 8
  %sv_any213 = getelementptr inbounds %struct.av, %struct.av* %141, i32 0, i32 0
  %142 = load %struct.xpvav*, %struct.xpvav** %sv_any213, align 8
  %xav_flags214 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %142, i32 0, i32 9
  store i8 2, i8* %xav_flags214, align 1
  %143 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u215 = getelementptr inbounds %struct.context, %struct.context* %143, i32 0, i32 1
  %cx_blk216 = bitcast %union.anon* %cx_u215 to %struct.block*
  %blk_u217 = getelementptr inbounds %struct.block, %struct.block* %cx_blk216, i32 0, i32 7
  %blku_sub218 = bitcast %union.anon.1* %blk_u217 to %struct.block_sub*
  %argarray219 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub218, i32 0, i32 4
  %144 = load %struct.av*, %struct.av** %argarray219, align 8
  %145 = bitcast %struct.av* %144 to %struct.sv*
  %146 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u220 = getelementptr inbounds %struct.context, %struct.context* %146, i32 0, i32 1
  %cx_blk221 = bitcast %union.anon* %cx_u220 to %struct.block*
  %blk_u222 = getelementptr inbounds %struct.block, %struct.block* %cx_blk221, i32 0, i32 7
  %blku_sub223 = bitcast %union.anon.1* %blk_u222 to %struct.block_sub*
  %oldcomppad = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub223, i32 0, i32 8
  %147 = load %struct.av*, %struct.av** %oldcomppad, align 8
  %sv_any224 = getelementptr inbounds %struct.av, %struct.av* %147, i32 0, i32 0
  %148 = load %struct.xpvav*, %struct.xpvav** %sv_any224, align 8
  %xav_array = getelementptr inbounds %struct.xpvav, %struct.xpvav* %148, i32 0, i32 0
  %149 = load i8*, i8** %xav_array, align 8
  %150 = bitcast i8* %149 to %struct.sv**
  %arrayidx225 = getelementptr inbounds %struct.sv*, %struct.sv** %150, i64 0
  store %struct.sv* %145, %struct.sv** %arrayidx225, align 8
  br label %if.end.267

if.else.226:                                      ; preds = %if.then.167
  %151 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u227 = getelementptr inbounds %struct.context, %struct.context* %151, i32 0, i32 1
  %cx_blk228 = bitcast %union.anon* %cx_u227 to %struct.block*
  %blk_u229 = getelementptr inbounds %struct.block, %struct.block* %cx_blk228, i32 0, i32 7
  %blku_sub230 = bitcast %union.anon.1* %blk_u229 to %struct.block_sub*
  %argarray231 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub230, i32 0, i32 4
  %152 = load %struct.av*, %struct.av** %argarray231, align 8
  %sv_any232 = getelementptr inbounds %struct.av, %struct.av* %152, i32 0, i32 0
  %153 = load %struct.xpvav*, %struct.xpvav** %sv_any232, align 8
  %xav_array233 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %153, i32 0, i32 0
  %154 = load i8*, i8** %xav_array233, align 8
  %155 = bitcast i8* %154 to %struct.sv**
  %156 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u234 = getelementptr inbounds %struct.context, %struct.context* %156, i32 0, i32 1
  %cx_blk235 = bitcast %union.anon* %cx_u234 to %struct.block*
  %blk_u236 = getelementptr inbounds %struct.block, %struct.block* %cx_blk235, i32 0, i32 7
  %blku_sub237 = bitcast %union.anon.1* %blk_u236 to %struct.block_sub*
  %argarray238 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub237, i32 0, i32 4
  %157 = load %struct.av*, %struct.av** %argarray238, align 8
  %sv_any239 = getelementptr inbounds %struct.av, %struct.av* %157, i32 0, i32 0
  %158 = load %struct.xpvav*, %struct.xpvav** %sv_any239, align 8
  %xav_alloc = getelementptr inbounds %struct.xpvav, %struct.xpvav* %158, i32 0, i32 7
  %159 = load %struct.sv**, %struct.sv*** %xav_alloc, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %155 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %159 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %160 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u240 = getelementptr inbounds %struct.context, %struct.context* %160, i32 0, i32 1
  %cx_blk241 = bitcast %union.anon* %cx_u240 to %struct.block*
  %blk_u242 = getelementptr inbounds %struct.block, %struct.block* %cx_blk241, i32 0, i32 7
  %blku_sub243 = bitcast %union.anon.1* %blk_u242 to %struct.block_sub*
  %argarray244 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub243, i32 0, i32 4
  %161 = load %struct.av*, %struct.av** %argarray244, align 8
  %sv_any245 = getelementptr inbounds %struct.av, %struct.av* %161, i32 0, i32 0
  %162 = load %struct.xpvav*, %struct.xpvav** %sv_any245, align 8
  %xav_max = getelementptr inbounds %struct.xpvav, %struct.xpvav* %162, i32 0, i32 2
  %163 = load i64, i64* %xav_max, align 8
  %add = add nsw i64 %163, %sub.ptr.div
  store i64 %add, i64* %xav_max, align 8
  %164 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u246 = getelementptr inbounds %struct.context, %struct.context* %164, i32 0, i32 1
  %cx_blk247 = bitcast %union.anon* %cx_u246 to %struct.block*
  %blk_u248 = getelementptr inbounds %struct.block, %struct.block* %cx_blk247, i32 0, i32 7
  %blku_sub249 = bitcast %union.anon.1* %blk_u248 to %struct.block_sub*
  %argarray250 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub249, i32 0, i32 4
  %165 = load %struct.av*, %struct.av** %argarray250, align 8
  %sv_any251 = getelementptr inbounds %struct.av, %struct.av* %165, i32 0, i32 0
  %166 = load %struct.xpvav*, %struct.xpvav** %sv_any251, align 8
  %xav_alloc252 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %166, i32 0, i32 7
  %167 = load %struct.sv**, %struct.sv*** %xav_alloc252, align 8
  %168 = bitcast %struct.sv** %167 to i8*
  %169 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u253 = getelementptr inbounds %struct.context, %struct.context* %169, i32 0, i32 1
  %cx_blk254 = bitcast %union.anon* %cx_u253 to %struct.block*
  %blk_u255 = getelementptr inbounds %struct.block, %struct.block* %cx_blk254, i32 0, i32 7
  %blku_sub256 = bitcast %union.anon.1* %blk_u255 to %struct.block_sub*
  %argarray257 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub256, i32 0, i32 4
  %170 = load %struct.av*, %struct.av** %argarray257, align 8
  %sv_any258 = getelementptr inbounds %struct.av, %struct.av* %170, i32 0, i32 0
  %171 = load %struct.xpvav*, %struct.xpvav** %sv_any258, align 8
  %172 = bitcast %struct.xpvav* %171 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %172, i32 0, i32 0
  store i8* %168, i8** %xpv_pv, align 8
  %173 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u260 = getelementptr inbounds %struct.context, %struct.context* %173, i32 0, i32 1
  %cx_blk261 = bitcast %union.anon* %cx_u260 to %struct.block*
  %blk_u262 = getelementptr inbounds %struct.block, %struct.block* %cx_blk261, i32 0, i32 7
  %blku_sub263 = bitcast %union.anon.1* %blk_u262 to %struct.block_sub*
  %argarray264 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub263, i32 0, i32 4
  %174 = load %struct.av*, %struct.av** %argarray264, align 8
  %sv_any265 = getelementptr inbounds %struct.av, %struct.av* %174, i32 0, i32 0
  %175 = load %struct.xpvav*, %struct.xpvav** %sv_any265, align 8
  %xav_fill266 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %175, i32 0, i32 1
  store i64 -1, i64* %xav_fill266, align 8
  store i64 -1, i64* %tmp259
  %176 = load i64, i64* %tmp259
  br label %if.end.267

if.end.267:                                       ; preds = %if.else.226, %if.then.183
  br label %if.end.268

if.end.268:                                       ; preds = %if.end.267, %sw.bb.161
  %177 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u269 = getelementptr inbounds %struct.context, %struct.context* %177, i32 0, i32 1
  %cx_blk270 = bitcast %union.anon* %cx_u269 to %struct.block*
  %blk_u271 = getelementptr inbounds %struct.block, %struct.block* %cx_blk270, i32 0, i32 7
  %blku_sub272 = bitcast %union.anon.1* %blk_u271 to %struct.block_sub*
  %cv = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub272, i32 0, i32 0
  %178 = load %struct.cv*, %struct.cv** %cv, align 8
  %179 = bitcast %struct.cv* %178 to %struct.sv*
  store %struct.sv* %179, %struct.sv** %sv, align 8
  %180 = load %struct.sv*, %struct.sv** %sv, align 8
  %tobool273 = icmp ne %struct.sv* %180, null
  br i1 %tobool273, label %land.lhs.true.274, label %if.end.282

land.lhs.true.274:                                ; preds = %if.end.268
  %181 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u275 = getelementptr inbounds %struct.context, %struct.context* %181, i32 0, i32 1
  %cx_blk276 = bitcast %union.anon* %cx_u275 to %struct.block*
  %blk_u277 = getelementptr inbounds %struct.block, %struct.block* %cx_blk276, i32 0, i32 7
  %blku_sub278 = bitcast %union.anon.1* %blk_u277 to %struct.block_sub*
  %olddepth = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub278, i32 0, i32 5
  %182 = load i64, i64* %olddepth, align 8
  %183 = load %struct.sv*, %struct.sv** %sv, align 8
  %184 = bitcast %struct.sv* %183 to %struct.cv*
  %sv_any279 = getelementptr inbounds %struct.cv, %struct.cv* %184, i32 0, i32 0
  %185 = load %struct.xpvcv*, %struct.xpvcv** %sv_any279, align 8
  %xcv_depth = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %185, i32 0, i32 14
  store i64 %182, i64* %xcv_depth, align 8
  %tobool280 = icmp ne i64 %182, 0
  br i1 %tobool280, label %if.then.281, label %if.end.282

if.then.281:                                      ; preds = %land.lhs.true.274
  store %struct.sv* null, %struct.sv** %sv, align 8
  br label %if.end.282

if.end.282:                                       ; preds = %if.then.281, %land.lhs.true.274, %if.end.268
  br label %sw.epilog.283

sw.epilog.283:                                    ; preds = %if.end.116, %if.end.282, %if.end.160
  %186 = load %struct.pmop*, %struct.pmop** %newpm, align 8
  store %struct.pmop* %186, %struct.pmop** @PL_curpm, align 8
  %187 = load %struct.sv*, %struct.sv** %sv, align 8
  %tobool284 = icmp ne %struct.sv* %187, null
  br i1 %tobool284, label %if.then.285, label %if.end.286

if.then.285:                                      ; preds = %sw.epilog.283
  %188 = load %struct.sv*, %struct.sv** %sv, align 8
  call void @Perl_sv_free(%struct.sv* %188)
  br label %if.end.286

if.end.286:                                       ; preds = %if.then.285, %sw.epilog.283
  %189 = load %struct.op*, %struct.op** %nextop, align 8
  store %struct.op* %189, %struct.op** %retval
  br label %return

return:                                           ; preds = %if.end.286, %sw.default, %if.then.7, %if.then.2
  %190 = load %struct.op*, %struct.op** %retval
  ret %struct.op* %190
}

; Function Attrs: nounwind uwtable
define internal i32 @S_dopoptoloop(i32 %startingblock) #0 {
entry:
  %retval = alloca i32, align 4
  %startingblock.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %cx = alloca %struct.context*, align 8
  store i32 %startingblock, i32* %startingblock.addr, align 4
  %0 = load i32, i32* %startingblock.addr, align 4
  store i32 %0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp sge i32 %1, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %idxprom = sext i32 %2 to i64
  %3 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxstack = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %3, i32 0, i32 1
  %4 = load %struct.context*, %struct.context** %si_cxstack, align 8
  %arrayidx = getelementptr inbounds %struct.context, %struct.context* %4, i64 %idxprom
  store %struct.context* %arrayidx, %struct.context** %cx, align 8
  %5 = load %struct.context*, %struct.context** %cx, align 8
  %cx_type = getelementptr inbounds %struct.context, %struct.context* %5, i32 0, i32 0
  %6 = load i32, i32* %cx_type, align 4
  %and = and i32 %6, 255
  switch i32 %and, label %sw.epilog [
    i32 4, label %sw.bb
    i32 1, label %sw.bb
    i32 6, label %sw.bb
    i32 2, label %sw.bb
    i32 0, label %sw.bb
    i32 3, label %sw.bb.34
  ]

sw.bb:                                            ; preds = %for.body, %for.body, %for.body, %for.body, %for.body
  %7 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings = getelementptr inbounds %struct.cop, %struct.cop* %7, i32 0, i32 14
  %8 = load %struct.sv*, %struct.sv** %cop_warnings, align 8
  %cmp1 = icmp ne %struct.sv* %8, null
  br i1 %cmp1, label %land.lhs.true, label %lor.lhs.false.10

land.lhs.true:                                    ; preds = %sw.bb
  %9 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings2 = getelementptr inbounds %struct.cop, %struct.cop* %9, i32 0, i32 14
  %10 = load %struct.sv*, %struct.sv** %cop_warnings2, align 8
  %cmp3 = icmp ne %struct.sv* %10, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 2)
  br i1 %cmp3, label %land.lhs.true.4, label %lor.lhs.false.10

land.lhs.true.4:                                  ; preds = %land.lhs.true
  %11 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings5 = getelementptr inbounds %struct.cop, %struct.cop* %11, i32 0, i32 14
  %12 = load %struct.sv*, %struct.sv** %cop_warnings5, align 8
  %cmp6 = icmp eq %struct.sv* %12, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 1)
  br i1 %cmp6, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.4
  %13 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings7 = getelementptr inbounds %struct.cop, %struct.cop* %13, i32 0, i32 14
  %14 = load %struct.sv*, %struct.sv** %cop_warnings7, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 0
  %15 = load i8*, i8** %sv_any, align 8
  %16 = bitcast i8* %15 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %16, i32 0, i32 0
  %17 = load i8*, i8** %xpv_pv, align 8
  %arrayidx8 = getelementptr inbounds i8, i8* %17, i64 0
  %18 = load i8, i8* %arrayidx8, align 1
  %conv = sext i8 %18 to i32
  %and9 = and i32 %conv, 64
  %tobool = icmp ne i32 %and9, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false.10

lor.lhs.false.10:                                 ; preds = %lor.lhs.false, %land.lhs.true, %sw.bb
  %19 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings11 = getelementptr inbounds %struct.cop, %struct.cop* %19, i32 0, i32 14
  %20 = load %struct.sv*, %struct.sv** %cop_warnings11, align 8
  %cmp12 = icmp eq %struct.sv* %20, null
  br i1 %cmp12, label %land.lhs.true.14, label %if.end

land.lhs.true.14:                                 ; preds = %lor.lhs.false.10
  %21 = load i8, i8* @PL_dowarn, align 1
  %conv15 = zext i8 %21 to i32
  %and16 = and i32 %conv15, 1
  %tobool17 = icmp ne i32 %and16, 0
  br i1 %tobool17, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true.14, %lor.lhs.false, %land.lhs.true.4
  %22 = load %struct.context*, %struct.context** %cx, align 8
  %cx_type18 = getelementptr inbounds %struct.context, %struct.context* %22, i32 0, i32 0
  %23 = load i32, i32* %cx_type18, align 4
  %and19 = and i32 %23, 255
  %idxprom20 = zext i32 %and19 to i64
  %arrayidx21 = getelementptr inbounds [7 x i8*], [7 x i8*]* @context_name, i32 0, i64 %idxprom20
  %24 = load i8*, i8** %arrayidx21, align 8
  %25 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %25, i32 0, i32 4
  %26 = load i16, i16* %op_type, align 2
  %conv22 = zext i16 %26 to i32
  %cmp23 = icmp eq i32 %conv22, 351
  br i1 %cmp23, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %27 = load %struct.op*, %struct.op** @PL_op, align 8
  %call = call i8* @Perl_custom_op_name(%struct.op* %27)
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %28 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type25 = getelementptr inbounds %struct.op, %struct.op* %28, i32 0, i32 4
  %29 = load i16, i16* %op_type25, align 2
  %idxprom26 = zext i16 %29 to i64
  %arrayidx27 = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_name, i32 0, i64 %idxprom26
  %30 = load i8*, i8** %arrayidx27, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %call, %cond.true ], [ %30, %cond.false ]
  call void (i32, i8*, ...) @Perl_warner(i32 3, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.72, i32 0, i32 0), i8* %24, i8* %cond)
  br label %if.end

if.end:                                           ; preds = %cond.end, %land.lhs.true.14, %lor.lhs.false.10
  %31 = load %struct.context*, %struct.context** %cx, align 8
  %cx_type28 = getelementptr inbounds %struct.context, %struct.context* %31, i32 0, i32 0
  %32 = load i32, i32* %cx_type28, align 4
  %and29 = and i32 %32, 255
  %cmp30 = icmp eq i32 %and29, 0
  br i1 %cmp30, label %if.then.32, label %if.end.33

if.then.32:                                       ; preds = %if.end
  store i32 -1, i32* %retval
  br label %return

if.end.33:                                        ; preds = %if.end
  br label %sw.epilog

sw.bb.34:                                         ; preds = %for.body
  %33 = load i32, i32* %i, align 4
  store i32 %33, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %for.body, %if.end.33
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog
  %34 = load i32, i32* %i, align 4
  %dec = add nsw i32 %34, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %35 = load i32, i32* %i, align 4
  store i32 %35, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %sw.bb.34, %if.then.32
  %36 = load i32, i32* %retval
  ret i32 %36
}

; Function Attrs: nounwind uwtable
define internal i32 @S_dopoptolabel(i8* %label) #0 {
entry:
  %retval = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %cx = alloca %struct.context*, align 8
  store i8* %label, i8** %label.addr, align 8
  %0 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %0, i32 0, i32 2
  %1 = load i32, i32* %si_cxix, align 4
  store i32 %1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %cmp = icmp sge i32 %2, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %idxprom = sext i32 %3 to i64
  %4 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxstack = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %4, i32 0, i32 1
  %5 = load %struct.context*, %struct.context** %si_cxstack, align 8
  %arrayidx = getelementptr inbounds %struct.context, %struct.context* %5, i64 %idxprom
  store %struct.context* %arrayidx, %struct.context** %cx, align 8
  %6 = load %struct.context*, %struct.context** %cx, align 8
  %cx_type = getelementptr inbounds %struct.context, %struct.context* %6, i32 0, i32 0
  %7 = load i32, i32* %cx_type, align 4
  %and = and i32 %7, 255
  switch i32 %and, label %sw.epilog [
    i32 4, label %sw.bb
    i32 1, label %sw.bb
    i32 6, label %sw.bb
    i32 2, label %sw.bb
    i32 0, label %sw.bb
    i32 3, label %sw.bb.34
  ]

sw.bb:                                            ; preds = %for.body, %for.body, %for.body, %for.body, %for.body
  %8 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings = getelementptr inbounds %struct.cop, %struct.cop* %8, i32 0, i32 14
  %9 = load %struct.sv*, %struct.sv** %cop_warnings, align 8
  %cmp1 = icmp ne %struct.sv* %9, null
  br i1 %cmp1, label %land.lhs.true, label %lor.lhs.false.10

land.lhs.true:                                    ; preds = %sw.bb
  %10 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings2 = getelementptr inbounds %struct.cop, %struct.cop* %10, i32 0, i32 14
  %11 = load %struct.sv*, %struct.sv** %cop_warnings2, align 8
  %cmp3 = icmp ne %struct.sv* %11, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 2)
  br i1 %cmp3, label %land.lhs.true.4, label %lor.lhs.false.10

land.lhs.true.4:                                  ; preds = %land.lhs.true
  %12 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings5 = getelementptr inbounds %struct.cop, %struct.cop* %12, i32 0, i32 14
  %13 = load %struct.sv*, %struct.sv** %cop_warnings5, align 8
  %cmp6 = icmp eq %struct.sv* %13, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 1)
  br i1 %cmp6, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.4
  %14 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings7 = getelementptr inbounds %struct.cop, %struct.cop* %14, i32 0, i32 14
  %15 = load %struct.sv*, %struct.sv** %cop_warnings7, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 0
  %16 = load i8*, i8** %sv_any, align 8
  %17 = bitcast i8* %16 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %17, i32 0, i32 0
  %18 = load i8*, i8** %xpv_pv, align 8
  %arrayidx8 = getelementptr inbounds i8, i8* %18, i64 0
  %19 = load i8, i8* %arrayidx8, align 1
  %conv = sext i8 %19 to i32
  %and9 = and i32 %conv, 64
  %tobool = icmp ne i32 %and9, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false.10

lor.lhs.false.10:                                 ; preds = %lor.lhs.false, %land.lhs.true, %sw.bb
  %20 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings11 = getelementptr inbounds %struct.cop, %struct.cop* %20, i32 0, i32 14
  %21 = load %struct.sv*, %struct.sv** %cop_warnings11, align 8
  %cmp12 = icmp eq %struct.sv* %21, null
  br i1 %cmp12, label %land.lhs.true.14, label %if.end

land.lhs.true.14:                                 ; preds = %lor.lhs.false.10
  %22 = load i8, i8* @PL_dowarn, align 1
  %conv15 = zext i8 %22 to i32
  %and16 = and i32 %conv15, 1
  %tobool17 = icmp ne i32 %and16, 0
  br i1 %tobool17, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true.14, %lor.lhs.false, %land.lhs.true.4
  %23 = load %struct.context*, %struct.context** %cx, align 8
  %cx_type18 = getelementptr inbounds %struct.context, %struct.context* %23, i32 0, i32 0
  %24 = load i32, i32* %cx_type18, align 4
  %and19 = and i32 %24, 255
  %idxprom20 = zext i32 %and19 to i64
  %arrayidx21 = getelementptr inbounds [7 x i8*], [7 x i8*]* @context_name, i32 0, i64 %idxprom20
  %25 = load i8*, i8** %arrayidx21, align 8
  %26 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %26, i32 0, i32 4
  %27 = load i16, i16* %op_type, align 2
  %conv22 = zext i16 %27 to i32
  %cmp23 = icmp eq i32 %conv22, 351
  br i1 %cmp23, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %28 = load %struct.op*, %struct.op** @PL_op, align 8
  %call = call i8* @Perl_custom_op_name(%struct.op* %28)
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %29 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type25 = getelementptr inbounds %struct.op, %struct.op* %29, i32 0, i32 4
  %30 = load i16, i16* %op_type25, align 2
  %idxprom26 = zext i16 %30 to i64
  %arrayidx27 = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_name, i32 0, i64 %idxprom26
  %31 = load i8*, i8** %arrayidx27, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %call, %cond.true ], [ %31, %cond.false ]
  call void (i32, i8*, ...) @Perl_warner(i32 3, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.72, i32 0, i32 0), i8* %25, i8* %cond)
  br label %if.end

if.end:                                           ; preds = %cond.end, %land.lhs.true.14, %lor.lhs.false.10
  %32 = load %struct.context*, %struct.context** %cx, align 8
  %cx_type28 = getelementptr inbounds %struct.context, %struct.context* %32, i32 0, i32 0
  %33 = load i32, i32* %cx_type28, align 4
  %and29 = and i32 %33, 255
  %cmp30 = icmp eq i32 %and29, 0
  br i1 %cmp30, label %if.then.32, label %if.end.33

if.then.32:                                       ; preds = %if.end
  store i32 -1, i32* %retval
  br label %return

if.end.33:                                        ; preds = %if.end
  br label %sw.epilog

sw.bb.34:                                         ; preds = %for.body
  %34 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u = getelementptr inbounds %struct.context, %struct.context* %34, i32 0, i32 1
  %cx_blk = bitcast %union.anon* %cx_u to %struct.block*
  %blk_u = getelementptr inbounds %struct.block, %struct.block* %cx_blk, i32 0, i32 7
  %blku_loop = bitcast %union.anon.1* %blk_u to %struct.block_loop*
  %label35 = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop, i32 0, i32 0
  %35 = load i8*, i8** %label35, align 8
  %tobool36 = icmp ne i8* %35, null
  br i1 %tobool36, label %lor.lhs.false.37, label %if.then.45

lor.lhs.false.37:                                 ; preds = %sw.bb.34
  %36 = load i8*, i8** %label.addr, align 8
  %37 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u38 = getelementptr inbounds %struct.context, %struct.context* %37, i32 0, i32 1
  %cx_blk39 = bitcast %union.anon* %cx_u38 to %struct.block*
  %blk_u40 = getelementptr inbounds %struct.block, %struct.block* %cx_blk39, i32 0, i32 7
  %blku_loop41 = bitcast %union.anon.1* %blk_u40 to %struct.block_loop*
  %label42 = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop41, i32 0, i32 0
  %38 = load i8*, i8** %label42, align 8
  %call43 = call i32 @strcmp(i8* %36, i8* %38)
  %tobool44 = icmp ne i32 %call43, 0
  br i1 %tobool44, label %if.then.45, label %if.end.46

if.then.45:                                       ; preds = %lor.lhs.false.37, %sw.bb.34
  br label %for.inc

if.end.46:                                        ; preds = %lor.lhs.false.37
  %39 = load i32, i32* %i, align 4
  store i32 %39, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %for.body, %if.end.33
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog, %if.then.45
  %40 = load i32, i32* %i, align 4
  %dec = add nsw i32 %40, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %41 = load i32, i32* %i, align 4
  store i32 %41, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %if.end.46, %if.then.32
  %42 = load i32, i32* %retval
  ret i32 %42
}

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_next() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %cxix = alloca i32, align 4
  %cx = alloca %struct.context*, align 8
  %inner = alloca i32, align 4
  %0 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 6
  %1 = load i8, i8* %op_flags, align 1
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, 128
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %2, i32 0, i32 2
  %3 = load i32, i32* %si_cxix, align 4
  %call = call i32 @S_dopoptoloop(i32 %3)
  store i32 %call, i32* %cxix, align 4
  %4 = load i32, i32* %cxix, align 4
  %cmp = icmp slt i32 %4, 0
  br i1 %cmp, label %if.then.2, label %if.end

if.then.2:                                        ; preds = %if.then
  %call3 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.34, i32 0, i32 0))
  store %struct.op* %call3, %struct.op** %retval
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end.11

if.else:                                          ; preds = %entry
  %5 = load %struct.op*, %struct.op** @PL_op, align 8
  %6 = bitcast %struct.op* %5 to %struct.pvop*
  %op_pv = getelementptr inbounds %struct.pvop, %struct.pvop* %6, i32 0, i32 8
  %7 = load i8*, i8** %op_pv, align 8
  %call4 = call i32 @S_dopoptolabel(i8* %7)
  store i32 %call4, i32* %cxix, align 4
  %8 = load i32, i32* %cxix, align 4
  %cmp5 = icmp slt i32 %8, 0
  br i1 %cmp5, label %if.then.7, label %if.end.10

if.then.7:                                        ; preds = %if.else
  %9 = load %struct.op*, %struct.op** @PL_op, align 8
  %10 = bitcast %struct.op* %9 to %struct.pvop*
  %op_pv8 = getelementptr inbounds %struct.pvop, %struct.pvop* %10, i32 0, i32 8
  %11 = load i8*, i8** %op_pv8, align 8
  %call9 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.35, i32 0, i32 0), i8* %11)
  store %struct.op* %call9, %struct.op** %retval
  br label %return

if.end.10:                                        ; preds = %if.else
  br label %if.end.11

if.end.11:                                        ; preds = %if.end.10, %if.end
  %12 = load i32, i32* %cxix, align 4
  %13 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix12 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %13, i32 0, i32 2
  %14 = load i32, i32* %si_cxix12, align 4
  %cmp13 = icmp slt i32 %12, %14
  br i1 %cmp13, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %if.end.11
  %15 = load i32, i32* %cxix, align 4
  call void @Perl_dounwind(i32 %15)
  br label %if.end.16

if.end.16:                                        ; preds = %if.then.15, %if.end.11
  %16 = load i32, i32* @PL_scopestack_ix, align 4
  store i32 %16, i32* %inner, align 4
  %17 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix17 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %17, i32 0, i32 2
  %18 = load i32, i32* %si_cxix17, align 4
  %idxprom = sext i32 %18 to i64
  %19 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxstack = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %19, i32 0, i32 1
  %20 = load %struct.context*, %struct.context** %si_cxstack, align 8
  %arrayidx = getelementptr inbounds %struct.context, %struct.context* %20, i64 %idxprom
  store %struct.context* %arrayidx, %struct.context** %cx, align 8
  %21 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %22 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u = getelementptr inbounds %struct.context, %struct.context* %22, i32 0, i32 1
  %cx_blk = bitcast %union.anon* %cx_u to %struct.block*
  %blku_oldsp = getelementptr inbounds %struct.block, %struct.block* %cx_blk, i32 0, i32 0
  %23 = load i32, i32* %blku_oldsp, align 4
  %idx.ext = sext i32 %23 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %21, i64 %idx.ext
  store %struct.sv** %add.ptr, %struct.sv*** @PL_stack_sp, align 8
  %24 = load i32*, i32** @PL_markstack, align 8
  %25 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u18 = getelementptr inbounds %struct.context, %struct.context* %25, i32 0, i32 1
  %cx_blk19 = bitcast %union.anon* %cx_u18 to %struct.block*
  %blku_oldmarksp = getelementptr inbounds %struct.block, %struct.block* %cx_blk19, i32 0, i32 3
  %26 = load i32, i32* %blku_oldmarksp, align 4
  %idx.ext20 = sext i32 %26 to i64
  %add.ptr21 = getelementptr inbounds i32, i32* %24, i64 %idx.ext20
  store i32* %add.ptr21, i32** @PL_markstack_ptr, align 8
  %27 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u22 = getelementptr inbounds %struct.context, %struct.context* %27, i32 0, i32 1
  %cx_blk23 = bitcast %union.anon* %cx_u22 to %struct.block*
  %blku_oldscopesp = getelementptr inbounds %struct.block, %struct.block* %cx_blk23, i32 0, i32 4
  %28 = load i32, i32* %blku_oldscopesp, align 4
  store i32 %28, i32* @PL_scopestack_ix, align 4
  %29 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u24 = getelementptr inbounds %struct.context, %struct.context* %29, i32 0, i32 1
  %cx_blk25 = bitcast %union.anon* %cx_u24 to %struct.block*
  %blku_oldretsp = getelementptr inbounds %struct.block, %struct.block* %cx_blk25, i32 0, i32 2
  %30 = load i32, i32* %blku_oldretsp, align 4
  store i32 %30, i32* @PL_retstack_ix, align 4
  %31 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u26 = getelementptr inbounds %struct.context, %struct.context* %31, i32 0, i32 1
  %cx_blk27 = bitcast %union.anon* %cx_u26 to %struct.block*
  %blku_oldpm = getelementptr inbounds %struct.block, %struct.block* %cx_blk27, i32 0, i32 5
  %32 = load %struct.pmop*, %struct.pmop** %blku_oldpm, align 8
  store %struct.pmop* %32, %struct.pmop** @PL_curpm, align 8
  %33 = load i32, i32* @PL_scopestack_ix, align 4
  %34 = load i32, i32* %inner, align 4
  %cmp28 = icmp slt i32 %33, %34
  br i1 %cmp28, label %if.then.30, label %if.end.33

if.then.30:                                       ; preds = %if.end.16
  %35 = load i32, i32* @PL_scopestack_ix, align 4
  %idxprom31 = sext i32 %35 to i64
  %36 = load i32*, i32** @PL_scopestack, align 8
  %arrayidx32 = getelementptr inbounds i32, i32* %36, i64 %idxprom31
  %37 = load i32, i32* %arrayidx32, align 4
  call void @Perl_leave_scope(i32 %37)
  br label %if.end.33

if.end.33:                                        ; preds = %if.then.30, %if.end.16
  %38 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u34 = getelementptr inbounds %struct.context, %struct.context* %38, i32 0, i32 1
  %cx_blk35 = bitcast %union.anon* %cx_u34 to %struct.block*
  %blk_u = getelementptr inbounds %struct.block, %struct.block* %cx_blk35, i32 0, i32 7
  %blku_loop = bitcast %union.anon.1* %blk_u to %struct.block_loop*
  %next_op = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop, i32 0, i32 3
  %39 = load %struct.op*, %struct.op** %next_op, align 8
  store %struct.op* %39, %struct.op** %retval
  br label %return

return:                                           ; preds = %if.end.33, %if.then.7, %if.then.2
  %40 = load %struct.op*, %struct.op** %retval
  ret %struct.op* %40
}

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_redo() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %cxix = alloca i32, align 4
  %cx = alloca %struct.context*, align 8
  %oldsave = alloca i32, align 4
  %0 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 6
  %1 = load i8, i8* %op_flags, align 1
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, 128
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %2, i32 0, i32 2
  %3 = load i32, i32* %si_cxix, align 4
  %call = call i32 @S_dopoptoloop(i32 %3)
  store i32 %call, i32* %cxix, align 4
  %4 = load i32, i32* %cxix, align 4
  %cmp = icmp slt i32 %4, 0
  br i1 %cmp, label %if.then.2, label %if.end

if.then.2:                                        ; preds = %if.then
  %call3 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.36, i32 0, i32 0))
  store %struct.op* %call3, %struct.op** %retval
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end.11

if.else:                                          ; preds = %entry
  %5 = load %struct.op*, %struct.op** @PL_op, align 8
  %6 = bitcast %struct.op* %5 to %struct.pvop*
  %op_pv = getelementptr inbounds %struct.pvop, %struct.pvop* %6, i32 0, i32 8
  %7 = load i8*, i8** %op_pv, align 8
  %call4 = call i32 @S_dopoptolabel(i8* %7)
  store i32 %call4, i32* %cxix, align 4
  %8 = load i32, i32* %cxix, align 4
  %cmp5 = icmp slt i32 %8, 0
  br i1 %cmp5, label %if.then.7, label %if.end.10

if.then.7:                                        ; preds = %if.else
  %9 = load %struct.op*, %struct.op** @PL_op, align 8
  %10 = bitcast %struct.op* %9 to %struct.pvop*
  %op_pv8 = getelementptr inbounds %struct.pvop, %struct.pvop* %10, i32 0, i32 8
  %11 = load i8*, i8** %op_pv8, align 8
  %call9 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.37, i32 0, i32 0), i8* %11)
  store %struct.op* %call9, %struct.op** %retval
  br label %return

if.end.10:                                        ; preds = %if.else
  br label %if.end.11

if.end.11:                                        ; preds = %if.end.10, %if.end
  %12 = load i32, i32* %cxix, align 4
  %13 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix12 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %13, i32 0, i32 2
  %14 = load i32, i32* %si_cxix12, align 4
  %cmp13 = icmp slt i32 %12, %14
  br i1 %cmp13, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %if.end.11
  %15 = load i32, i32* %cxix, align 4
  call void @Perl_dounwind(i32 %15)
  br label %if.end.16

if.end.16:                                        ; preds = %if.then.15, %if.end.11
  %16 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix17 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %16, i32 0, i32 2
  %17 = load i32, i32* %si_cxix17, align 4
  %idxprom = sext i32 %17 to i64
  %18 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxstack = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %18, i32 0, i32 1
  %19 = load %struct.context*, %struct.context** %si_cxstack, align 8
  %arrayidx = getelementptr inbounds %struct.context, %struct.context* %19, i64 %idxprom
  store %struct.context* %arrayidx, %struct.context** %cx, align 8
  %20 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %21 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u = getelementptr inbounds %struct.context, %struct.context* %21, i32 0, i32 1
  %cx_blk = bitcast %union.anon* %cx_u to %struct.block*
  %blku_oldsp = getelementptr inbounds %struct.block, %struct.block* %cx_blk, i32 0, i32 0
  %22 = load i32, i32* %blku_oldsp, align 4
  %idx.ext = sext i32 %22 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %20, i64 %idx.ext
  store %struct.sv** %add.ptr, %struct.sv*** @PL_stack_sp, align 8
  %23 = load i32*, i32** @PL_markstack, align 8
  %24 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u18 = getelementptr inbounds %struct.context, %struct.context* %24, i32 0, i32 1
  %cx_blk19 = bitcast %union.anon* %cx_u18 to %struct.block*
  %blku_oldmarksp = getelementptr inbounds %struct.block, %struct.block* %cx_blk19, i32 0, i32 3
  %25 = load i32, i32* %blku_oldmarksp, align 4
  %idx.ext20 = sext i32 %25 to i64
  %add.ptr21 = getelementptr inbounds i32, i32* %23, i64 %idx.ext20
  store i32* %add.ptr21, i32** @PL_markstack_ptr, align 8
  %26 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u22 = getelementptr inbounds %struct.context, %struct.context* %26, i32 0, i32 1
  %cx_blk23 = bitcast %union.anon* %cx_u22 to %struct.block*
  %blku_oldscopesp = getelementptr inbounds %struct.block, %struct.block* %cx_blk23, i32 0, i32 4
  %27 = load i32, i32* %blku_oldscopesp, align 4
  store i32 %27, i32* @PL_scopestack_ix, align 4
  %28 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u24 = getelementptr inbounds %struct.context, %struct.context* %28, i32 0, i32 1
  %cx_blk25 = bitcast %union.anon* %cx_u24 to %struct.block*
  %blku_oldretsp = getelementptr inbounds %struct.block, %struct.block* %cx_blk25, i32 0, i32 2
  %29 = load i32, i32* %blku_oldretsp, align 4
  store i32 %29, i32* @PL_retstack_ix, align 4
  %30 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u26 = getelementptr inbounds %struct.context, %struct.context* %30, i32 0, i32 1
  %cx_blk27 = bitcast %union.anon* %cx_u26 to %struct.block*
  %blku_oldpm = getelementptr inbounds %struct.block, %struct.block* %cx_blk27, i32 0, i32 5
  %31 = load %struct.pmop*, %struct.pmop** %blku_oldpm, align 8
  store %struct.pmop* %31, %struct.pmop** @PL_curpm, align 8
  %32 = load i32, i32* @PL_scopestack_ix, align 4
  %sub = sub nsw i32 %32, 1
  %idxprom28 = sext i32 %sub to i64
  %33 = load i32*, i32** @PL_scopestack, align 8
  %arrayidx29 = getelementptr inbounds i32, i32* %33, i64 %idxprom28
  %34 = load i32, i32* %arrayidx29, align 4
  store i32 %34, i32* %oldsave, align 4
  %35 = load i32, i32* @PL_savestack_ix, align 4
  %36 = load i32, i32* %oldsave, align 4
  %cmp30 = icmp sgt i32 %35, %36
  br i1 %cmp30, label %if.then.32, label %if.end.33

if.then.32:                                       ; preds = %if.end.16
  %37 = load i32, i32* %oldsave, align 4
  call void @Perl_leave_scope(i32 %37)
  br label %if.end.33

if.end.33:                                        ; preds = %if.then.32, %if.end.16
  %38 = load i32, i32* @PL_tmps_ix, align 4
  %39 = load i32, i32* @PL_tmps_floor, align 4
  %cmp34 = icmp sgt i32 %38, %39
  br i1 %cmp34, label %if.then.36, label %if.end.37

if.then.36:                                       ; preds = %if.end.33
  call void @Perl_free_tmps()
  br label %if.end.37

if.end.37:                                        ; preds = %if.then.36, %if.end.33
  %40 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u38 = getelementptr inbounds %struct.context, %struct.context* %40, i32 0, i32 1
  %cx_blk39 = bitcast %union.anon* %cx_u38 to %struct.block*
  %blk_u = getelementptr inbounds %struct.block, %struct.block* %cx_blk39, i32 0, i32 7
  %blku_loop = bitcast %union.anon.1* %blk_u to %struct.block_loop*
  %redo_op = getelementptr inbounds %struct.block_loop, %struct.block_loop* %blku_loop, i32 0, i32 2
  %41 = load %struct.op*, %struct.op** %redo_op, align 8
  store %struct.op* %41, %struct.op** %retval
  br label %return

return:                                           ; preds = %if.end.37, %if.then.7, %if.then.2
  %42 = load %struct.op*, %struct.op** %retval
  ret %struct.op* %42
}

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_dump() #0 {
entry:
  %call = call %struct.op* @Perl_pp_goto()
  ret %struct.op* %call
}

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_goto() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %retop = alloca %struct.op*, align 8
  %ix = alloca i32, align 4
  %cx = alloca %struct.context*, align 8
  %enterops = alloca [64 x %struct.op*], align 16
  %label = alloca i8*, align 8
  %do_dump = alloca i32, align 4
  %sv = alloca %struct.sv*, align 8
  %n_a = alloca i64, align 8
  %cxix = alloca i32, align 4
  %cx10 = alloca %struct.context*, align 8
  %cv = alloca %struct.cv*, align 8
  %mark = alloca %struct.sv**, align 8
  %items = alloca i32, align 4
  %oldsave = alloca i32, align 4
  %reified = alloca i8, align 1
  %gv = alloca %struct.gv*, align 8
  %autogv = alloca %struct.gv*, align 8
  %tmpstr = alloca %struct.sv*, align 8
  %av = alloca %struct.av*, align 8
  %tmp = alloca i64, align 8
  %av151 = alloca %struct.av*, align 8
  %index = alloca i32, align 4
  %newsp = alloca %struct.sv**, align 8
  %gimme = alloca i32, align 4
  %tmp232 = alloca i32, align 4
  %padlist = alloca %struct.av*, align 8
  %tmp365 = alloca i32, align 4
  %av384 = alloca %struct.av*, align 8
  %ary = alloca %struct.sv**, align 8
  %sv499 = alloca %struct.sv*, align 8
  %gotocv = alloca %struct.cv*, align 8
  %tmp545 = alloca i32, align 4
  %gotoprobe = alloca %struct.op*, align 8
  %leaving_eval = alloca i8, align 1
  %in_block = alloca i8, align 1
  %last_eval_cx = alloca %struct.context*, align 8
  %i = alloca i32, align 4
  %oldsave709 = alloca i32, align 4
  %oldop = alloca %struct.op*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  store %struct.op* null, %struct.op** %retop, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 4
  %2 = load i16, i16* %op_type, align 2
  %conv = zext i16 %2 to i32
  %cmp = icmp eq i32 %conv, 188
  %conv1 = zext i1 %cmp to i32
  store i32 %conv1, i32* %do_dump, align 4
  store i8* null, i8** %label, align 8
  %3 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %3, i32 0, i32 6
  %4 = load i8, i8* %op_flags, align 1
  %conv2 = zext i8 %4 to i32
  %and = and i32 %conv2, 64
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.else.573

if.then:                                          ; preds = %entry
  %5 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %5, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %6 = load %struct.sv*, %struct.sv** %5, align 8
  store %struct.sv* %6, %struct.sv** %sv, align 8
  %7 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 2
  %8 = load i32, i32* %sv_flags, align 4
  %and3 = and i32 %8, 524288
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %land.lhs.true, label %if.else.556

land.lhs.true:                                    ; preds = %if.then
  %9 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 0
  %10 = load i8*, i8** %sv_any, align 8
  %11 = bitcast i8* %10 to %struct.xrv*
  %xrv_rv = getelementptr inbounds %struct.xrv, %struct.xrv* %11, i32 0, i32 0
  %12 = load %struct.sv*, %struct.sv** %xrv_rv, align 8
  %sv_flags5 = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 2
  %13 = load i32, i32* %sv_flags5, align 4
  %and6 = and i32 %13, 255
  %cmp7 = icmp eq i32 %and6, 12
  br i1 %cmp7, label %if.then.9, label %if.else.556

if.then.9:                                        ; preds = %land.lhs.true
  %14 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any11 = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 0
  %15 = load i8*, i8** %sv_any11, align 8
  %16 = bitcast i8* %15 to %struct.xrv*
  %xrv_rv12 = getelementptr inbounds %struct.xrv, %struct.xrv* %16, i32 0, i32 0
  %17 = load %struct.sv*, %struct.sv** %xrv_rv12, align 8
  %18 = bitcast %struct.sv* %17 to %struct.cv*
  store %struct.cv* %18, %struct.cv** %cv, align 8
  store i32 0, i32* %items, align 4
  store i8 0, i8* %reified, align 1
  br label %retry

retry:                                            ; preds = %if.then.40, %if.then.30, %if.then.9
  %19 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any13 = getelementptr inbounds %struct.cv, %struct.cv* %19, i32 0, i32 0
  %20 = load %struct.xpvcv*, %struct.xpvcv** %sv_any13, align 8
  %xcv_root = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %20, i32 0, i32 9
  %21 = load %struct.op*, %struct.op** %xcv_root, align 8
  %tobool14 = icmp ne %struct.op* %21, null
  br i1 %tobool14, label %if.end.46, label %land.lhs.true.15

land.lhs.true.15:                                 ; preds = %retry
  %22 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any16 = getelementptr inbounds %struct.cv, %struct.cv* %22, i32 0, i32 0
  %23 = load %struct.xpvcv*, %struct.xpvcv** %sv_any16, align 8
  %xcv_xsub = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %23, i32 0, i32 10
  %24 = load void (%struct.cv*)*, void (%struct.cv*)** %xcv_xsub, align 8
  %tobool17 = icmp ne void (%struct.cv*)* %24, null
  br i1 %tobool17, label %if.end.46, label %if.then.18

if.then.18:                                       ; preds = %land.lhs.true.15
  %25 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any19 = getelementptr inbounds %struct.cv, %struct.cv* %25, i32 0, i32 0
  %26 = load %struct.xpvcv*, %struct.xpvcv** %sv_any19, align 8
  %xcv_gv = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %26, i32 0, i32 12
  %27 = load %struct.gv*, %struct.gv** %xcv_gv, align 8
  store %struct.gv* %27, %struct.gv** %gv, align 8
  %28 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool20 = icmp ne %struct.gv* %28, null
  br i1 %tobool20, label %if.then.21, label %if.end.44

if.then.21:                                       ; preds = %if.then.18
  %29 = load %struct.cv*, %struct.cv** %cv, align 8
  %30 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any22 = getelementptr inbounds %struct.gv, %struct.gv* %30, i32 0, i32 0
  %31 = load %struct.xpvgv*, %struct.xpvgv** %sv_any22, align 8
  %xgv_gp = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %31, i32 0, i32 7
  %32 = load %struct.gp*, %struct.gp** %xgv_gp, align 8
  %gp_cv = getelementptr inbounds %struct.gp, %struct.gp* %32, i32 0, i32 7
  %33 = load %struct.cv*, %struct.cv** %gp_cv, align 8
  %cmp23 = icmp ne %struct.cv* %29, %33
  br i1 %cmp23, label %land.lhs.true.25, label %if.end

land.lhs.true.25:                                 ; preds = %if.then.21
  %34 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any26 = getelementptr inbounds %struct.gv, %struct.gv* %34, i32 0, i32 0
  %35 = load %struct.xpvgv*, %struct.xpvgv** %sv_any26, align 8
  %xgv_gp27 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %35, i32 0, i32 7
  %36 = load %struct.gp*, %struct.gp** %xgv_gp27, align 8
  %gp_cv28 = getelementptr inbounds %struct.gp, %struct.gp* %36, i32 0, i32 7
  %37 = load %struct.cv*, %struct.cv** %gp_cv28, align 8
  store %struct.cv* %37, %struct.cv** %cv, align 8
  %tobool29 = icmp ne %struct.cv* %37, null
  br i1 %tobool29, label %if.then.30, label %if.end

if.then.30:                                       ; preds = %land.lhs.true.25
  br label %retry

if.end:                                           ; preds = %land.lhs.true.25, %if.then.21
  %38 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any31 = getelementptr inbounds %struct.gv, %struct.gv* %38, i32 0, i32 0
  %39 = load %struct.xpvgv*, %struct.xpvgv** %sv_any31, align 8
  %xgv_stash = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %39, i32 0, i32 10
  %40 = load %struct.hv*, %struct.hv** %xgv_stash, align 8
  %41 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any32 = getelementptr inbounds %struct.gv, %struct.gv* %41, i32 0, i32 0
  %42 = load %struct.xpvgv*, %struct.xpvgv** %sv_any32, align 8
  %xgv_name = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %42, i32 0, i32 8
  %43 = load i8*, i8** %xgv_name, align 8
  %44 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any33 = getelementptr inbounds %struct.gv, %struct.gv* %44, i32 0, i32 0
  %45 = load %struct.xpvgv*, %struct.xpvgv** %sv_any33, align 8
  %xgv_namelen = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %45, i32 0, i32 9
  %46 = load i64, i64* %xgv_namelen, align 8
  %call = call %struct.gv* @Perl_gv_autoload4(%struct.hv* %40, i8* %43, i64 %46, i32 0)
  store %struct.gv* %call, %struct.gv** %autogv, align 8
  %47 = load %struct.gv*, %struct.gv** %autogv, align 8
  %tobool34 = icmp ne %struct.gv* %47, null
  br i1 %tobool34, label %land.lhs.true.35, label %if.end.41

land.lhs.true.35:                                 ; preds = %if.end
  %48 = load %struct.gv*, %struct.gv** %autogv, align 8
  %sv_any36 = getelementptr inbounds %struct.gv, %struct.gv* %48, i32 0, i32 0
  %49 = load %struct.xpvgv*, %struct.xpvgv** %sv_any36, align 8
  %xgv_gp37 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %49, i32 0, i32 7
  %50 = load %struct.gp*, %struct.gp** %xgv_gp37, align 8
  %gp_cv38 = getelementptr inbounds %struct.gp, %struct.gp* %50, i32 0, i32 7
  %51 = load %struct.cv*, %struct.cv** %gp_cv38, align 8
  store %struct.cv* %51, %struct.cv** %cv, align 8
  %tobool39 = icmp ne %struct.cv* %51, null
  br i1 %tobool39, label %if.then.40, label %if.end.41

if.then.40:                                       ; preds = %land.lhs.true.35
  br label %retry

if.end.41:                                        ; preds = %land.lhs.true.35, %if.end
  %call42 = call %struct.sv* @Perl_sv_newmortal()
  store %struct.sv* %call42, %struct.sv** %tmpstr, align 8
  %52 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %53 = load %struct.gv*, %struct.gv** %gv, align 8
  call void @Perl_gv_efullname4(%struct.sv* %52, %struct.gv* %53, i8* null, i8 signext 1)
  %54 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %call43 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.38, i32 0, i32 0), %struct.sv* %54)
  store %struct.op* %call43, %struct.op** %retval
  br label %return

if.end.44:                                        ; preds = %if.then.18
  %call45 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.39, i32 0, i32 0))
  store %struct.op* %call45, %struct.op** %retval
  br label %return

if.end.46:                                        ; preds = %land.lhs.true.15, %retry
  %55 = load %struct.cv*, %struct.cv** %cv, align 8
  %56 = bitcast %struct.cv* %55 to %struct.sv*
  store %struct.sv* %56, %struct.sv** @PL_Sv, align 8
  %57 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %tobool47 = icmp ne %struct.sv* %57, null
  br i1 %tobool47, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.end.46
  %58 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %58, i32 0, i32 1
  %59 = load i32, i32* %sv_refcnt, align 4
  %inc = add i32 %59, 1
  store i32 %inc, i32* %sv_refcnt, align 4
  %tobool48 = icmp ne i32 %inc, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end.46
  %60 = phi i1 [ false, %if.end.46 ], [ %tobool48, %land.rhs ]
  %land.ext = zext i1 %60 to i32
  %61 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %62 = load i32, i32* @PL_tmps_ix, align 4
  %63 = load i32, i32* @PL_tmps_floor, align 4
  %cmp49 = icmp sgt i32 %62, %63
  br i1 %cmp49, label %if.then.51, label %if.end.52

if.then.51:                                       ; preds = %land.end
  call void @Perl_free_tmps()
  br label %if.end.52

if.end.52:                                        ; preds = %if.then.51, %land.end
  %64 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %64, i32 0, i32 2
  %65 = load i32, i32* %si_cxix, align 4
  %call53 = call i32 @S_dopoptosub(i32 %65)
  store i32 %call53, i32* %cxix, align 4
  %66 = load i32, i32* %cxix, align 4
  %cmp54 = icmp slt i32 %66, 0
  br i1 %cmp54, label %if.then.56, label %if.end.58

if.then.56:                                       ; preds = %if.end.52
  %call57 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.40, i32 0, i32 0))
  store %struct.op* %call57, %struct.op** %retval
  br label %return

if.end.58:                                        ; preds = %if.end.52
  %67 = load i32, i32* %cxix, align 4
  %68 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix59 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %68, i32 0, i32 2
  %69 = load i32, i32* %si_cxix59, align 4
  %cmp60 = icmp slt i32 %67, %69
  br i1 %cmp60, label %if.then.62, label %if.end.63

if.then.62:                                       ; preds = %if.end.58
  %70 = load i32, i32* %cxix, align 4
  call void @Perl_dounwind(i32 %70)
  br label %if.end.63

if.end.63:                                        ; preds = %if.then.62, %if.end.58
  %71 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix64 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %71, i32 0, i32 2
  %72 = load i32, i32* %si_cxix64, align 4
  %idxprom = sext i32 %72 to i64
  %73 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxstack = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %73, i32 0, i32 1
  %74 = load %struct.context*, %struct.context** %si_cxstack, align 8
  %arrayidx = getelementptr inbounds %struct.context, %struct.context* %74, i64 %idxprom
  store %struct.context* %arrayidx, %struct.context** %cx10, align 8
  %75 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %76 = load %struct.context*, %struct.context** %cx10, align 8
  %cx_u = getelementptr inbounds %struct.context, %struct.context* %76, i32 0, i32 1
  %cx_blk = bitcast %union.anon* %cx_u to %struct.block*
  %blku_oldsp = getelementptr inbounds %struct.block, %struct.block* %cx_blk, i32 0, i32 0
  %77 = load i32, i32* %blku_oldsp, align 4
  %idx.ext = sext i32 %77 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %75, i64 %idx.ext
  store %struct.sv** %add.ptr, %struct.sv*** @PL_stack_sp, align 8
  %78 = load i32*, i32** @PL_markstack, align 8
  %79 = load %struct.context*, %struct.context** %cx10, align 8
  %cx_u65 = getelementptr inbounds %struct.context, %struct.context* %79, i32 0, i32 1
  %cx_blk66 = bitcast %union.anon* %cx_u65 to %struct.block*
  %blku_oldmarksp = getelementptr inbounds %struct.block, %struct.block* %cx_blk66, i32 0, i32 3
  %80 = load i32, i32* %blku_oldmarksp, align 4
  %idx.ext67 = sext i32 %80 to i64
  %add.ptr68 = getelementptr inbounds i32, i32* %78, i64 %idx.ext67
  store i32* %add.ptr68, i32** @PL_markstack_ptr, align 8
  %81 = load %struct.context*, %struct.context** %cx10, align 8
  %cx_u69 = getelementptr inbounds %struct.context, %struct.context* %81, i32 0, i32 1
  %cx_blk70 = bitcast %union.anon* %cx_u69 to %struct.block*
  %blku_oldscopesp = getelementptr inbounds %struct.block, %struct.block* %cx_blk70, i32 0, i32 4
  %82 = load i32, i32* %blku_oldscopesp, align 4
  store i32 %82, i32* @PL_scopestack_ix, align 4
  %83 = load %struct.context*, %struct.context** %cx10, align 8
  %cx_u71 = getelementptr inbounds %struct.context, %struct.context* %83, i32 0, i32 1
  %cx_blk72 = bitcast %union.anon* %cx_u71 to %struct.block*
  %blku_oldretsp = getelementptr inbounds %struct.block, %struct.block* %cx_blk72, i32 0, i32 2
  %84 = load i32, i32* %blku_oldretsp, align 4
  store i32 %84, i32* @PL_retstack_ix, align 4
  %85 = load %struct.context*, %struct.context** %cx10, align 8
  %cx_u73 = getelementptr inbounds %struct.context, %struct.context* %85, i32 0, i32 1
  %cx_blk74 = bitcast %union.anon* %cx_u73 to %struct.block*
  %blku_oldpm = getelementptr inbounds %struct.block, %struct.block* %cx_blk74, i32 0, i32 5
  %86 = load %struct.pmop*, %struct.pmop** %blku_oldpm, align 8
  store %struct.pmop* %86, %struct.pmop** @PL_curpm, align 8
  %87 = load %struct.context*, %struct.context** %cx10, align 8
  %cx_type = getelementptr inbounds %struct.context, %struct.context* %87, i32 0, i32 0
  %88 = load i32, i32* %cx_type, align 4
  %and75 = and i32 %88, 258
  %cmp76 = icmp eq i32 %and75, 258
  br i1 %cmp76, label %if.then.78, label %if.end.80

if.then.78:                                       ; preds = %if.end.63
  %call79 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.41, i32 0, i32 0))
  store %struct.op* %call79, %struct.op** %retval
  br label %return

if.end.80:                                        ; preds = %if.end.63
  %89 = load %struct.context*, %struct.context** %cx10, align 8
  %cx_type81 = getelementptr inbounds %struct.context, %struct.context* %89, i32 0, i32 0
  %90 = load i32, i32* %cx_type81, align 4
  %and82 = and i32 %90, 255
  %cmp83 = icmp eq i32 %and82, 1
  br i1 %cmp83, label %land.lhs.true.85, label %if.else

land.lhs.true.85:                                 ; preds = %if.end.80
  %91 = load %struct.context*, %struct.context** %cx10, align 8
  %cx_u86 = getelementptr inbounds %struct.context, %struct.context* %91, i32 0, i32 1
  %cx_blk87 = bitcast %union.anon* %cx_u86 to %struct.block*
  %blk_u = getelementptr inbounds %struct.block, %struct.block* %cx_blk87, i32 0, i32 7
  %blku_sub = bitcast %union.anon.1* %blk_u to %struct.block_sub*
  %hasargs = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub, i32 0, i32 6
  %92 = load i8, i8* %hasargs, align 1
  %conv88 = zext i8 %92 to i32
  %tobool89 = icmp ne i32 %conv88, 0
  br i1 %tobool89, label %if.then.90, label %if.else

if.then.90:                                       ; preds = %land.lhs.true.85
  %93 = load %struct.context*, %struct.context** %cx10, align 8
  %cx_u91 = getelementptr inbounds %struct.context, %struct.context* %93, i32 0, i32 1
  %cx_blk92 = bitcast %union.anon* %cx_u91 to %struct.block*
  %blk_u93 = getelementptr inbounds %struct.block, %struct.block* %cx_blk92, i32 0, i32 7
  %blku_sub94 = bitcast %union.anon.1* %blk_u93 to %struct.block_sub*
  %argarray = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub94, i32 0, i32 4
  %94 = load %struct.av*, %struct.av** %argarray, align 8
  store %struct.av* %94, %struct.av** %av, align 8
  %95 = load %struct.av*, %struct.av** %av, align 8
  %sv_any95 = getelementptr inbounds %struct.av, %struct.av* %95, i32 0, i32 0
  %96 = load %struct.xpvav*, %struct.xpvav** %sv_any95, align 8
  %xav_fill = getelementptr inbounds %struct.xpvav, %struct.xpvav* %96, i32 0, i32 1
  %97 = load i64, i64* %xav_fill, align 8
  %add = add nsw i64 %97, 1
  %conv96 = trunc i64 %add to i32
  store i32 %conv96, i32* %items, align 4
  %98 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %99 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %98 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %99 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %100 = load i32, i32* %items, align 4
  %add97 = add nsw i32 %100, 1
  %conv98 = sext i32 %add97 to i64
  %cmp99 = icmp slt i64 %sub.ptr.div, %conv98
  br i1 %cmp99, label %if.then.101, label %if.end.104

if.then.101:                                      ; preds = %if.then.90
  %101 = load %struct.sv**, %struct.sv*** %sp, align 8
  %102 = load %struct.sv**, %struct.sv*** %sp, align 8
  %103 = load i32, i32* %items, align 4
  %add102 = add nsw i32 %103, 1
  %call103 = call %struct.sv** @Perl_stack_grow(%struct.sv** %101, %struct.sv** %102, i32 %add102)
  store %struct.sv** %call103, %struct.sv*** %sp, align 8
  br label %if.end.104

if.end.104:                                       ; preds = %if.then.101, %if.then.90
  %104 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr105 = getelementptr inbounds %struct.sv*, %struct.sv** %104, i64 1
  %105 = bitcast %struct.sv** %add.ptr105 to i8*
  %106 = load %struct.av*, %struct.av** %av, align 8
  %sv_any106 = getelementptr inbounds %struct.av, %struct.av* %106, i32 0, i32 0
  %107 = load %struct.xpvav*, %struct.xpvav** %sv_any106, align 8
  %xav_array = getelementptr inbounds %struct.xpvav, %struct.xpvav* %107, i32 0, i32 0
  %108 = load i8*, i8** %xav_array, align 8
  %109 = bitcast i8* %108 to %struct.sv**
  %110 = bitcast %struct.sv** %109 to i8*
  %111 = load i32, i32* %items, align 4
  %conv107 = sext i32 %111 to i64
  %mul = mul i64 %conv107, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %105, i8* %110, i64 %mul, i32 1, i1 false)
  %112 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %sv_any108 = getelementptr inbounds %struct.gv, %struct.gv* %112, i32 0, i32 0
  %113 = load %struct.xpvgv*, %struct.xpvgv** %sv_any108, align 8
  %xgv_gp109 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %113, i32 0, i32 7
  %114 = load %struct.gp*, %struct.gp** %xgv_gp109, align 8
  %gp_av = getelementptr inbounds %struct.gp, %struct.gp* %114, i32 0, i32 4
  %115 = load %struct.av*, %struct.av** %gp_av, align 8
  %116 = bitcast %struct.av* %115 to %struct.sv*
  call void @Perl_sv_free(%struct.sv* %116)
  %117 = load %struct.context*, %struct.context** %cx10, align 8
  %cx_u110 = getelementptr inbounds %struct.context, %struct.context* %117, i32 0, i32 1
  %cx_blk111 = bitcast %union.anon* %cx_u110 to %struct.block*
  %blk_u112 = getelementptr inbounds %struct.block, %struct.block* %cx_blk111, i32 0, i32 7
  %blku_sub113 = bitcast %union.anon.1* %blk_u112 to %struct.block_sub*
  %savearray = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub113, i32 0, i32 3
  %118 = load %struct.av*, %struct.av** %savearray, align 8
  %119 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %sv_any114 = getelementptr inbounds %struct.gv, %struct.gv* %119, i32 0, i32 0
  %120 = load %struct.xpvgv*, %struct.xpvgv** %sv_any114, align 8
  %xgv_gp115 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %120, i32 0, i32 7
  %121 = load %struct.gp*, %struct.gp** %xgv_gp115, align 8
  %gp_av116 = getelementptr inbounds %struct.gp, %struct.gp* %121, i32 0, i32 4
  store %struct.av* %118, %struct.av** %gp_av116, align 8
  %122 = load %struct.av*, %struct.av** %av, align 8
  %sv_any117 = getelementptr inbounds %struct.av, %struct.av* %122, i32 0, i32 0
  %123 = load %struct.xpvav*, %struct.xpvav** %sv_any117, align 8
  %xav_array118 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %123, i32 0, i32 0
  %124 = load i8*, i8** %xav_array118, align 8
  %125 = bitcast i8* %124 to %struct.sv**
  %126 = load %struct.av*, %struct.av** %av, align 8
  %sv_any119 = getelementptr inbounds %struct.av, %struct.av* %126, i32 0, i32 0
  %127 = load %struct.xpvav*, %struct.xpvav** %sv_any119, align 8
  %xav_alloc = getelementptr inbounds %struct.xpvav, %struct.xpvav* %127, i32 0, i32 7
  %128 = load %struct.sv**, %struct.sv*** %xav_alloc, align 8
  %sub.ptr.lhs.cast120 = ptrtoint %struct.sv** %125 to i64
  %sub.ptr.rhs.cast121 = ptrtoint %struct.sv** %128 to i64
  %sub.ptr.sub122 = sub i64 %sub.ptr.lhs.cast120, %sub.ptr.rhs.cast121
  %sub.ptr.div123 = sdiv exact i64 %sub.ptr.sub122, 8
  %129 = load %struct.av*, %struct.av** %av, align 8
  %sv_any124 = getelementptr inbounds %struct.av, %struct.av* %129, i32 0, i32 0
  %130 = load %struct.xpvav*, %struct.xpvav** %sv_any124, align 8
  %xav_max = getelementptr inbounds %struct.xpvav, %struct.xpvav* %130, i32 0, i32 2
  %131 = load i64, i64* %xav_max, align 8
  %add125 = add nsw i64 %131, %sub.ptr.div123
  store i64 %add125, i64* %xav_max, align 8
  %132 = load %struct.av*, %struct.av** %av, align 8
  %sv_any126 = getelementptr inbounds %struct.av, %struct.av* %132, i32 0, i32 0
  %133 = load %struct.xpvav*, %struct.xpvav** %sv_any126, align 8
  %xav_alloc127 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %133, i32 0, i32 7
  %134 = load %struct.sv**, %struct.sv*** %xav_alloc127, align 8
  %135 = bitcast %struct.sv** %134 to i8*
  %136 = load %struct.av*, %struct.av** %av, align 8
  %sv_any128 = getelementptr inbounds %struct.av, %struct.av* %136, i32 0, i32 0
  %137 = load %struct.xpvav*, %struct.xpvav** %sv_any128, align 8
  %138 = bitcast %struct.xpvav* %137 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %138, i32 0, i32 0
  store i8* %135, i8** %xpv_pv, align 8
  %139 = load %struct.av*, %struct.av** %av, align 8
  %sv_any129 = getelementptr inbounds %struct.av, %struct.av* %139, i32 0, i32 0
  %140 = load %struct.xpvav*, %struct.xpvav** %sv_any129, align 8
  %xav_fill130 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %140, i32 0, i32 1
  store i64 -1, i64* %xav_fill130, align 8
  store i64 -1, i64* %tmp
  %141 = load i64, i64* %tmp
  %142 = load %struct.av*, %struct.av** %av, align 8
  %sv_any131 = getelementptr inbounds %struct.av, %struct.av* %142, i32 0, i32 0
  %143 = load %struct.xpvav*, %struct.xpvav** %sv_any131, align 8
  %xav_flags = getelementptr inbounds %struct.xpvav, %struct.xpvav* %143, i32 0, i32 9
  %144 = load i8, i8* %xav_flags, align 1
  %conv132 = zext i8 %144 to i32
  %and133 = and i32 %conv132, 1
  %tobool134 = icmp ne i32 %and133, 0
  br i1 %tobool134, label %if.then.135, label %if.end.145

if.then.135:                                      ; preds = %if.end.104
  store i8 1, i8* %reified, align 1
  %145 = load %struct.av*, %struct.av** %av, align 8
  %146 = bitcast %struct.av* %145 to %struct.sv*
  call void @Perl_sv_free(%struct.sv* %146)
  %call136 = call %struct.av* @Perl_newAV()
  store %struct.av* %call136, %struct.av** %av, align 8
  %147 = load %struct.av*, %struct.av** %av, align 8
  %148 = load i32, i32* %items, align 4
  %sub = sub nsw i32 %148, 1
  call void @Perl_av_extend(%struct.av* %147, i32 %sub)
  %149 = load %struct.av*, %struct.av** %av, align 8
  %sv_any137 = getelementptr inbounds %struct.av, %struct.av* %149, i32 0, i32 0
  %150 = load %struct.xpvav*, %struct.xpvav** %sv_any137, align 8
  %xav_flags138 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %150, i32 0, i32 9
  store i8 2, i8* %xav_flags138, align 1
  %151 = load %struct.av*, %struct.av** %av, align 8
  %152 = load %struct.context*, %struct.context** %cx10, align 8
  %cx_u139 = getelementptr inbounds %struct.context, %struct.context* %152, i32 0, i32 1
  %cx_blk140 = bitcast %union.anon* %cx_u139 to %struct.block*
  %blk_u141 = getelementptr inbounds %struct.block, %struct.block* %cx_blk140, i32 0, i32 7
  %blku_sub142 = bitcast %union.anon.1* %blk_u141 to %struct.block_sub*
  %argarray143 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub142, i32 0, i32 4
  store %struct.av* %151, %struct.av** %argarray143, align 8
  %153 = bitcast %struct.av* %151 to %struct.sv*
  %154 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %arrayidx144 = getelementptr inbounds %struct.sv*, %struct.sv** %154, i64 0
  store %struct.sv* %153, %struct.sv** %arrayidx144, align 8
  br label %if.end.145

if.end.145:                                       ; preds = %if.then.135, %if.end.104
  br label %if.end.177

if.else:                                          ; preds = %land.lhs.true.85, %if.end.80
  %155 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any146 = getelementptr inbounds %struct.cv, %struct.cv* %155, i32 0, i32 0
  %156 = load %struct.xpvcv*, %struct.xpvcv** %sv_any146, align 8
  %xcv_xsub147 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %156, i32 0, i32 10
  %157 = load void (%struct.cv*)*, void (%struct.cv*)** %xcv_xsub147, align 8
  %tobool148 = icmp ne void (%struct.cv*)* %157, null
  br i1 %tobool148, label %if.then.149, label %if.end.176

if.then.149:                                      ; preds = %if.else
  %158 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %sv_any152 = getelementptr inbounds %struct.gv, %struct.gv* %158, i32 0, i32 0
  %159 = load %struct.xpvgv*, %struct.xpvgv** %sv_any152, align 8
  %xgv_gp153 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %159, i32 0, i32 7
  %160 = load %struct.gp*, %struct.gp** %xgv_gp153, align 8
  %gp_av154 = getelementptr inbounds %struct.gp, %struct.gp* %160, i32 0, i32 4
  %161 = load %struct.av*, %struct.av** %gp_av154, align 8
  store %struct.av* %161, %struct.av** %av151, align 8
  %162 = load %struct.av*, %struct.av** %av151, align 8
  %sv_any155 = getelementptr inbounds %struct.av, %struct.av* %162, i32 0, i32 0
  %163 = load %struct.xpvav*, %struct.xpvav** %sv_any155, align 8
  %xav_fill156 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %163, i32 0, i32 1
  %164 = load i64, i64* %xav_fill156, align 8
  %add157 = add nsw i64 %164, 1
  %conv158 = trunc i64 %add157 to i32
  store i32 %conv158, i32* %items, align 4
  %165 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %166 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast159 = ptrtoint %struct.sv** %165 to i64
  %sub.ptr.rhs.cast160 = ptrtoint %struct.sv** %166 to i64
  %sub.ptr.sub161 = sub i64 %sub.ptr.lhs.cast159, %sub.ptr.rhs.cast160
  %sub.ptr.div162 = sdiv exact i64 %sub.ptr.sub161, 8
  %167 = load i32, i32* %items, align 4
  %add163 = add nsw i32 %167, 1
  %conv164 = sext i32 %add163 to i64
  %cmp165 = icmp slt i64 %sub.ptr.div162, %conv164
  br i1 %cmp165, label %if.then.167, label %if.end.170

if.then.167:                                      ; preds = %if.then.149
  %168 = load %struct.sv**, %struct.sv*** %sp, align 8
  %169 = load %struct.sv**, %struct.sv*** %sp, align 8
  %170 = load i32, i32* %items, align 4
  %add168 = add nsw i32 %170, 1
  %call169 = call %struct.sv** @Perl_stack_grow(%struct.sv** %168, %struct.sv** %169, i32 %add168)
  store %struct.sv** %call169, %struct.sv*** %sp, align 8
  br label %if.end.170

if.end.170:                                       ; preds = %if.then.167, %if.then.149
  %171 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr171 = getelementptr inbounds %struct.sv*, %struct.sv** %171, i64 1
  %172 = bitcast %struct.sv** %add.ptr171 to i8*
  %173 = load %struct.av*, %struct.av** %av151, align 8
  %sv_any172 = getelementptr inbounds %struct.av, %struct.av* %173, i32 0, i32 0
  %174 = load %struct.xpvav*, %struct.xpvav** %sv_any172, align 8
  %xav_array173 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %174, i32 0, i32 0
  %175 = load i8*, i8** %xav_array173, align 8
  %176 = bitcast i8* %175 to %struct.sv**
  %177 = bitcast %struct.sv** %176 to i8*
  %178 = load i32, i32* %items, align 4
  %conv174 = sext i32 %178 to i64
  %mul175 = mul i64 %conv174, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %172, i8* %177, i64 %mul175, i32 1, i1 false)
  br label %if.end.176

if.end.176:                                       ; preds = %if.end.170, %if.else
  br label %if.end.177

if.end.177:                                       ; preds = %if.end.176, %if.end.145
  %179 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %179, %struct.sv*** %mark, align 8
  %180 = load i32, i32* %items, align 4
  %181 = load %struct.sv**, %struct.sv*** %sp, align 8
  %idx.ext178 = sext i32 %180 to i64
  %add.ptr179 = getelementptr inbounds %struct.sv*, %struct.sv** %181, i64 %idx.ext178
  store %struct.sv** %add.ptr179, %struct.sv*** %sp, align 8
  %182 = load %struct.context*, %struct.context** %cx10, align 8
  %cx_type180 = getelementptr inbounds %struct.context, %struct.context* %182, i32 0, i32 0
  %183 = load i32, i32* %cx_type180, align 4
  %and181 = and i32 %183, 255
  %cmp182 = icmp eq i32 %and181, 1
  br i1 %cmp182, label %land.lhs.true.184, label %if.end.202

land.lhs.true.184:                                ; preds = %if.end.177
  %184 = load %struct.context*, %struct.context** %cx10, align 8
  %cx_u185 = getelementptr inbounds %struct.context, %struct.context* %184, i32 0, i32 1
  %cx_blk186 = bitcast %union.anon* %cx_u185 to %struct.block*
  %blk_u187 = getelementptr inbounds %struct.block, %struct.block* %cx_blk186, i32 0, i32 7
  %blku_sub188 = bitcast %union.anon.1* %blk_u187 to %struct.block_sub*
  %olddepth = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub188, i32 0, i32 5
  %185 = load i64, i64* %olddepth, align 8
  %186 = load %struct.context*, %struct.context** %cx10, align 8
  %cx_u189 = getelementptr inbounds %struct.context, %struct.context* %186, i32 0, i32 1
  %cx_blk190 = bitcast %union.anon* %cx_u189 to %struct.block*
  %blk_u191 = getelementptr inbounds %struct.block, %struct.block* %cx_blk190, i32 0, i32 7
  %blku_sub192 = bitcast %union.anon.1* %blk_u191 to %struct.block_sub*
  %cv193 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub192, i32 0, i32 0
  %187 = load %struct.cv*, %struct.cv** %cv193, align 8
  %sv_any194 = getelementptr inbounds %struct.cv, %struct.cv* %187, i32 0, i32 0
  %188 = load %struct.xpvcv*, %struct.xpvcv** %sv_any194, align 8
  %xcv_depth = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %188, i32 0, i32 14
  store i64 %185, i64* %xcv_depth, align 8
  %tobool195 = icmp ne i64 %185, 0
  br i1 %tobool195, label %if.end.202, label %if.then.196

if.then.196:                                      ; preds = %land.lhs.true.184
  %189 = load %struct.context*, %struct.context** %cx10, align 8
  %cx_u197 = getelementptr inbounds %struct.context, %struct.context* %189, i32 0, i32 1
  %cx_blk198 = bitcast %union.anon* %cx_u197 to %struct.block*
  %blk_u199 = getelementptr inbounds %struct.block, %struct.block* %cx_blk198, i32 0, i32 7
  %blku_sub200 = bitcast %union.anon.1* %blk_u199 to %struct.block_sub*
  %cv201 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub200, i32 0, i32 0
  %190 = load %struct.cv*, %struct.cv** %cv201, align 8
  %191 = bitcast %struct.cv* %190 to %struct.sv*
  call void @Perl_sv_free(%struct.sv* %191)
  br label %if.end.202

if.end.202:                                       ; preds = %if.then.196, %land.lhs.true.184, %if.end.177
  %192 = load i32, i32* @PL_scopestack_ix, align 4
  %sub203 = sub nsw i32 %192, 1
  %idxprom204 = sext i32 %sub203 to i64
  %193 = load i32*, i32** @PL_scopestack, align 8
  %arrayidx205 = getelementptr inbounds i32, i32* %193, i64 %idxprom204
  %194 = load i32, i32* %arrayidx205, align 4
  store i32 %194, i32* %oldsave, align 4
  %195 = load i32, i32* @PL_savestack_ix, align 4
  %196 = load i32, i32* %oldsave, align 4
  %cmp206 = icmp sgt i32 %195, %196
  br i1 %cmp206, label %if.then.208, label %if.end.209

if.then.208:                                      ; preds = %if.end.202
  %197 = load i32, i32* %oldsave, align 4
  call void @Perl_leave_scope(i32 %197)
  br label %if.end.209

if.end.209:                                       ; preds = %if.then.208, %if.end.202
  call void @Perl_save_int(i32* @PL_tmps_floor)
  %198 = load i32, i32* @PL_tmps_ix, align 4
  store i32 %198, i32* @PL_tmps_floor, align 4
  %199 = load %struct.cv*, %struct.cv** %cv, align 8
  %200 = bitcast %struct.cv* %199 to %struct.sv*
  call void @Perl_save_freesv(%struct.sv* %200)
  %201 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any210 = getelementptr inbounds %struct.cv, %struct.cv* %201, i32 0, i32 0
  %202 = load %struct.xpvcv*, %struct.xpvcv** %sv_any210, align 8
  %xcv_xsub211 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %202, i32 0, i32 10
  %203 = load void (%struct.cv*)*, void (%struct.cv*)** %xcv_xsub211, align 8
  %tobool212 = icmp ne void (%struct.cv*)* %203, null
  br i1 %tobool212, label %if.then.213, label %if.else.269

if.then.213:                                      ; preds = %if.end.209
  %204 = load i8, i8* %reified, align 1
  %tobool214 = icmp ne i8 %204, 0
  br i1 %tobool214, label %if.then.215, label %if.end.224

if.then.215:                                      ; preds = %if.then.213
  store i32 0, i32* %index, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.215
  %205 = load i32, i32* %index, align 4
  %206 = load i32, i32* %items, align 4
  %cmp217 = icmp slt i32 %205, %206
  br i1 %cmp217, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %207 = load i32, i32* %index, align 4
  %sub219 = sub nsw i32 0, %207
  %idxprom220 = sext i32 %sub219 to i64
  %208 = load %struct.sv**, %struct.sv*** %sp, align 8
  %arrayidx221 = getelementptr inbounds %struct.sv*, %struct.sv** %208, i64 %idxprom220
  %209 = load %struct.sv*, %struct.sv** %arrayidx221, align 8
  %call222 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %209)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %210 = load i32, i32* %index, align 4
  %inc223 = add nsw i32 %210, 1
  store i32 %inc223, i32* %index, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.224

if.end.224:                                       ; preds = %for.end, %if.then.213
  %211 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr227 = getelementptr inbounds i32, i32* %211, i32 1
  store i32* %incdec.ptr227, i32** @PL_markstack_ptr, align 8
  %212 = load i32*, i32** @PL_markstack_max, align 8
  %cmp228 = icmp eq i32* %incdec.ptr227, %212
  br i1 %cmp228, label %if.then.230, label %if.end.231

if.then.230:                                      ; preds = %if.end.224
  call void @Perl_markstack_grow()
  br label %if.end.231

if.end.231:                                       ; preds = %if.then.230, %if.end.224
  %213 = load %struct.sv**, %struct.sv*** %mark, align 8
  %214 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast233 = ptrtoint %struct.sv** %213 to i64
  %sub.ptr.rhs.cast234 = ptrtoint %struct.sv** %214 to i64
  %sub.ptr.sub235 = sub i64 %sub.ptr.lhs.cast233, %sub.ptr.rhs.cast234
  %sub.ptr.div236 = sdiv exact i64 %sub.ptr.sub235, 8
  %conv237 = trunc i64 %sub.ptr.div236 to i32
  %215 = load i32*, i32** @PL_markstack_ptr, align 8
  store i32 %conv237, i32* %215, align 4
  store i32 %conv237, i32* %tmp232
  %216 = load i32, i32* %tmp232
  %217 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %217, %struct.sv*** @PL_stack_sp, align 8
  %218 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any238 = getelementptr inbounds %struct.cv, %struct.cv* %218, i32 0, i32 0
  %219 = load %struct.xpvcv*, %struct.xpvcv** %sv_any238, align 8
  %xcv_xsub239 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %219, i32 0, i32 10
  %220 = load void (%struct.cv*)*, void (%struct.cv*)** %xcv_xsub239, align 8
  %221 = load %struct.cv*, %struct.cv** %cv, align 8
  call void %220(%struct.cv* %221)
  %222 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix240 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %222, i32 0, i32 2
  %223 = load i32, i32* %si_cxix240, align 4
  %dec = add nsw i32 %223, -1
  store i32 %dec, i32* %si_cxix240, align 4
  %idxprom241 = sext i32 %223 to i64
  %224 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxstack242 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %224, i32 0, i32 1
  %225 = load %struct.context*, %struct.context** %si_cxstack242, align 8
  %arrayidx243 = getelementptr inbounds %struct.context, %struct.context* %225, i64 %idxprom241
  store %struct.context* %arrayidx243, %struct.context** %cx10, align 8
  %226 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %227 = load %struct.context*, %struct.context** %cx10, align 8
  %cx_u244 = getelementptr inbounds %struct.context, %struct.context* %227, i32 0, i32 1
  %cx_blk245 = bitcast %union.anon* %cx_u244 to %struct.block*
  %blku_oldsp246 = getelementptr inbounds %struct.block, %struct.block* %cx_blk245, i32 0, i32 0
  %228 = load i32, i32* %blku_oldsp246, align 4
  %idx.ext247 = sext i32 %228 to i64
  %add.ptr248 = getelementptr inbounds %struct.sv*, %struct.sv** %226, i64 %idx.ext247
  store %struct.sv** %add.ptr248, %struct.sv*** %newsp, align 8
  %229 = load %struct.context*, %struct.context** %cx10, align 8
  %cx_u249 = getelementptr inbounds %struct.context, %struct.context* %229, i32 0, i32 1
  %cx_blk250 = bitcast %union.anon* %cx_u249 to %struct.block*
  %blku_oldcop = getelementptr inbounds %struct.block, %struct.block* %cx_blk250, i32 0, i32 1
  %230 = load %struct.cop*, %struct.cop** %blku_oldcop, align 8
  store volatile %struct.cop* %230, %struct.cop** @PL_curcop, align 8
  %231 = load i32*, i32** @PL_markstack, align 8
  %232 = load %struct.context*, %struct.context** %cx10, align 8
  %cx_u251 = getelementptr inbounds %struct.context, %struct.context* %232, i32 0, i32 1
  %cx_blk252 = bitcast %union.anon* %cx_u251 to %struct.block*
  %blku_oldmarksp253 = getelementptr inbounds %struct.block, %struct.block* %cx_blk252, i32 0, i32 3
  %233 = load i32, i32* %blku_oldmarksp253, align 4
  %idx.ext254 = sext i32 %233 to i64
  %add.ptr255 = getelementptr inbounds i32, i32* %231, i64 %idx.ext254
  store i32* %add.ptr255, i32** @PL_markstack_ptr, align 8
  %234 = load %struct.context*, %struct.context** %cx10, align 8
  %cx_u256 = getelementptr inbounds %struct.context, %struct.context* %234, i32 0, i32 1
  %cx_blk257 = bitcast %union.anon* %cx_u256 to %struct.block*
  %blku_oldscopesp258 = getelementptr inbounds %struct.block, %struct.block* %cx_blk257, i32 0, i32 4
  %235 = load i32, i32* %blku_oldscopesp258, align 4
  store i32 %235, i32* @PL_scopestack_ix, align 4
  %236 = load %struct.context*, %struct.context** %cx10, align 8
  %cx_u259 = getelementptr inbounds %struct.context, %struct.context* %236, i32 0, i32 1
  %cx_blk260 = bitcast %union.anon* %cx_u259 to %struct.block*
  %blku_oldretsp261 = getelementptr inbounds %struct.block, %struct.block* %cx_blk260, i32 0, i32 2
  %237 = load i32, i32* %blku_oldretsp261, align 4
  store i32 %237, i32* @PL_retstack_ix, align 4
  %238 = load %struct.context*, %struct.context** %cx10, align 8
  %cx_u262 = getelementptr inbounds %struct.context, %struct.context* %238, i32 0, i32 1
  %cx_blk263 = bitcast %union.anon* %cx_u262 to %struct.block*
  %blku_oldpm264 = getelementptr inbounds %struct.block, %struct.block* %cx_blk263, i32 0, i32 5
  %239 = load %struct.pmop*, %struct.pmop** %blku_oldpm264, align 8
  store %struct.pmop* %239, %struct.pmop** @PL_curpm, align 8
  %240 = load %struct.context*, %struct.context** %cx10, align 8
  %cx_u265 = getelementptr inbounds %struct.context, %struct.context* %240, i32 0, i32 1
  %cx_blk266 = bitcast %union.anon* %cx_u265 to %struct.block*
  %blku_gimme = getelementptr inbounds %struct.block, %struct.block* %cx_blk266, i32 0, i32 6
  %241 = load i8, i8* %blku_gimme, align 1
  %conv267 = zext i8 %241 to i32
  store i32 %conv267, i32* %gimme, align 4
  call void @Perl_pop_scope()
  %call268 = call %struct.op* @Perl_pop_return()
  store %struct.op* %call268, %struct.op** %retval
  br label %return

if.else.269:                                      ; preds = %if.end.209
  %242 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any271 = getelementptr inbounds %struct.cv, %struct.cv* %242, i32 0, i32 0
  %243 = load %struct.xpvcv*, %struct.xpvcv** %sv_any271, align 8
  %xcv_padlist = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %243, i32 0, i32 15
  %244 = load %struct.av*, %struct.av** %xcv_padlist, align 8
  store %struct.av* %244, %struct.av** %padlist, align 8
  %245 = load %struct.context*, %struct.context** %cx10, align 8
  %cx_type272 = getelementptr inbounds %struct.context, %struct.context* %245, i32 0, i32 0
  %246 = load i32, i32* %cx_type272, align 4
  %and273 = and i32 %246, 255
  %cmp274 = icmp eq i32 %and273, 2
  br i1 %cmp274, label %if.then.276, label %if.end.290

if.then.276:                                      ; preds = %if.else.269
  %247 = load %struct.context*, %struct.context** %cx10, align 8
  %cx_u277 = getelementptr inbounds %struct.context, %struct.context* %247, i32 0, i32 1
  %cx_blk278 = bitcast %union.anon* %cx_u277 to %struct.block*
  %blk_u279 = getelementptr inbounds %struct.block, %struct.block* %cx_blk278, i32 0, i32 7
  %blku_eval = bitcast %union.anon.1* %blk_u279 to %struct.block_eval*
  %old_in_eval = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval, i32 0, i32 0
  %248 = load i32, i32* %old_in_eval, align 4
  store volatile i32 %248, i32* @PL_in_eval, align 4
  %249 = load %struct.context*, %struct.context** %cx10, align 8
  %cx_u280 = getelementptr inbounds %struct.context, %struct.context* %249, i32 0, i32 1
  %cx_blk281 = bitcast %union.anon* %cx_u280 to %struct.block*
  %blk_u282 = getelementptr inbounds %struct.block, %struct.block* %cx_blk281, i32 0, i32 7
  %blku_eval283 = bitcast %union.anon.1* %blk_u282 to %struct.block_eval*
  %old_eval_root = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval283, i32 0, i32 3
  %250 = load %struct.op*, %struct.op** %old_eval_root, align 8
  store %struct.op* %250, %struct.op** @PL_eval_root, align 8
  %251 = load %struct.context*, %struct.context** %cx10, align 8
  %cx_type284 = getelementptr inbounds %struct.context, %struct.context* %251, i32 0, i32 0
  store i32 1, i32* %cx_type284, align 4
  %252 = load %struct.context*, %struct.context** %cx10, align 8
  %cx_u285 = getelementptr inbounds %struct.context, %struct.context* %252, i32 0, i32 1
  %cx_blk286 = bitcast %union.anon* %cx_u285 to %struct.block*
  %blk_u287 = getelementptr inbounds %struct.block, %struct.block* %cx_blk286, i32 0, i32 7
  %blku_sub288 = bitcast %union.anon.1* %blk_u287 to %struct.block_sub*
  %hasargs289 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub288, i32 0, i32 6
  store i8 0, i8* %hasargs289, align 1
  br label %if.end.290

if.end.290:                                       ; preds = %if.then.276, %if.else.269
  %253 = load %struct.cv*, %struct.cv** %cv, align 8
  %254 = load %struct.context*, %struct.context** %cx10, align 8
  %cx_u291 = getelementptr inbounds %struct.context, %struct.context* %254, i32 0, i32 1
  %cx_blk292 = bitcast %union.anon* %cx_u291 to %struct.block*
  %blk_u293 = getelementptr inbounds %struct.block, %struct.block* %cx_blk292, i32 0, i32 7
  %blku_sub294 = bitcast %union.anon.1* %blk_u293 to %struct.block_sub*
  %cv295 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub294, i32 0, i32 0
  store %struct.cv* %253, %struct.cv** %cv295, align 8
  %255 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any296 = getelementptr inbounds %struct.cv, %struct.cv* %255, i32 0, i32 0
  %256 = load %struct.xpvcv*, %struct.xpvcv** %sv_any296, align 8
  %xcv_depth297 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %256, i32 0, i32 14
  %257 = load i64, i64* %xcv_depth297, align 8
  %conv298 = trunc i64 %257 to i16
  %conv299 = zext i16 %conv298 to i64
  %258 = load %struct.context*, %struct.context** %cx10, align 8
  %cx_u300 = getelementptr inbounds %struct.context, %struct.context* %258, i32 0, i32 1
  %cx_blk301 = bitcast %union.anon* %cx_u300 to %struct.block*
  %blk_u302 = getelementptr inbounds %struct.block, %struct.block* %cx_blk301, i32 0, i32 7
  %blku_sub303 = bitcast %union.anon.1* %blk_u302 to %struct.block_sub*
  %olddepth304 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub303, i32 0, i32 5
  store i64 %conv299, i64* %olddepth304, align 8
  %259 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any305 = getelementptr inbounds %struct.cv, %struct.cv* %259, i32 0, i32 0
  %260 = load %struct.xpvcv*, %struct.xpvcv** %sv_any305, align 8
  %xcv_depth306 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %260, i32 0, i32 14
  %261 = load i64, i64* %xcv_depth306, align 8
  %inc307 = add nsw i64 %261, 1
  store i64 %inc307, i64* %xcv_depth306, align 8
  %262 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any308 = getelementptr inbounds %struct.cv, %struct.cv* %262, i32 0, i32 0
  %263 = load %struct.xpvcv*, %struct.xpvcv** %sv_any308, align 8
  %xcv_depth309 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %263, i32 0, i32 14
  %264 = load i64, i64* %xcv_depth309, align 8
  %cmp310 = icmp slt i64 %264, 2
  br i1 %cmp310, label %if.then.312, label %if.else.320

if.then.312:                                      ; preds = %if.end.290
  %265 = load %struct.cv*, %struct.cv** %cv, align 8
  %266 = bitcast %struct.cv* %265 to %struct.sv*
  store %struct.sv* %266, %struct.sv** @PL_Sv, align 8
  %267 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %tobool313 = icmp ne %struct.sv* %267, null
  br i1 %tobool313, label %land.rhs.314, label %land.end.318

land.rhs.314:                                     ; preds = %if.then.312
  %268 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_refcnt315 = getelementptr inbounds %struct.sv, %struct.sv* %268, i32 0, i32 1
  %269 = load i32, i32* %sv_refcnt315, align 4
  %inc316 = add i32 %269, 1
  store i32 %inc316, i32* %sv_refcnt315, align 4
  %tobool317 = icmp ne i32 %inc316, 0
  br label %land.end.318

land.end.318:                                     ; preds = %land.rhs.314, %if.then.312
  %270 = phi i1 [ false, %if.then.312 ], [ %tobool317, %land.rhs.314 ]
  %land.ext319 = zext i1 %270 to i32
  %271 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  br label %if.end.356

if.else.320:                                      ; preds = %if.end.290
  %272 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any321 = getelementptr inbounds %struct.cv, %struct.cv* %272, i32 0, i32 0
  %273 = load %struct.xpvcv*, %struct.xpvcv** %sv_any321, align 8
  %xcv_depth322 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %273, i32 0, i32 14
  %274 = load i64, i64* %xcv_depth322, align 8
  %cmp323 = icmp eq i64 %274, 100
  br i1 %cmp323, label %land.lhs.true.325, label %if.end.352

land.lhs.true.325:                                ; preds = %if.else.320
  %275 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings = getelementptr inbounds %struct.cop, %struct.cop* %275, i32 0, i32 14
  %276 = load %struct.sv*, %struct.sv** %cop_warnings, align 8
  %cmp326 = icmp ne %struct.sv* %276, null
  br i1 %cmp326, label %land.lhs.true.328, label %lor.lhs.false.343

land.lhs.true.328:                                ; preds = %land.lhs.true.325
  %277 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings329 = getelementptr inbounds %struct.cop, %struct.cop* %277, i32 0, i32 14
  %278 = load %struct.sv*, %struct.sv** %cop_warnings329, align 8
  %cmp330 = icmp ne %struct.sv* %278, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 2)
  br i1 %cmp330, label %land.lhs.true.332, label %lor.lhs.false.343

land.lhs.true.332:                                ; preds = %land.lhs.true.328
  %279 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings333 = getelementptr inbounds %struct.cop, %struct.cop* %279, i32 0, i32 14
  %280 = load %struct.sv*, %struct.sv** %cop_warnings333, align 8
  %cmp334 = icmp eq %struct.sv* %280, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 1)
  br i1 %cmp334, label %if.then.351, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.332
  %281 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings336 = getelementptr inbounds %struct.cop, %struct.cop* %281, i32 0, i32 14
  %282 = load %struct.sv*, %struct.sv** %cop_warnings336, align 8
  %sv_any337 = getelementptr inbounds %struct.sv, %struct.sv* %282, i32 0, i32 0
  %283 = load i8*, i8** %sv_any337, align 8
  %284 = bitcast i8* %283 to %struct.xpv*
  %xpv_pv338 = getelementptr inbounds %struct.xpv, %struct.xpv* %284, i32 0, i32 0
  %285 = load i8*, i8** %xpv_pv338, align 8
  %arrayidx339 = getelementptr inbounds i8, i8* %285, i64 4
  %286 = load i8, i8* %arrayidx339, align 1
  %conv340 = sext i8 %286 to i32
  %and341 = and i32 %conv340, 16
  %tobool342 = icmp ne i32 %and341, 0
  br i1 %tobool342, label %if.then.351, label %lor.lhs.false.343

lor.lhs.false.343:                                ; preds = %lor.lhs.false, %land.lhs.true.328, %land.lhs.true.325
  %287 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings344 = getelementptr inbounds %struct.cop, %struct.cop* %287, i32 0, i32 14
  %288 = load %struct.sv*, %struct.sv** %cop_warnings344, align 8
  %cmp345 = icmp eq %struct.sv* %288, null
  br i1 %cmp345, label %land.lhs.true.347, label %if.end.352

land.lhs.true.347:                                ; preds = %lor.lhs.false.343
  %289 = load i8, i8* @PL_dowarn, align 1
  %conv348 = zext i8 %289 to i32
  %and349 = and i32 %conv348, 1
  %tobool350 = icmp ne i32 %and349, 0
  br i1 %tobool350, label %if.then.351, label %if.end.352

if.then.351:                                      ; preds = %land.lhs.true.347, %lor.lhs.false, %land.lhs.true.332
  %290 = load %struct.cv*, %struct.cv** %cv, align 8
  call void @Perl_sub_crush_depth(%struct.cv* %290)
  br label %if.end.352

if.end.352:                                       ; preds = %if.then.351, %land.lhs.true.347, %lor.lhs.false.343, %if.else.320
  %291 = load %struct.av*, %struct.av** %padlist, align 8
  %292 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any353 = getelementptr inbounds %struct.cv, %struct.cv* %292, i32 0, i32 0
  %293 = load %struct.xpvcv*, %struct.xpvcv** %sv_any353, align 8
  %xcv_depth354 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %293, i32 0, i32 14
  %294 = load i64, i64* %xcv_depth354, align 8
  %conv355 = trunc i64 %294 to i32
  call void @Perl_pad_push(%struct.av* %291, i32 %conv355, i32 1)
  br label %if.end.356

if.end.356:                                       ; preds = %if.end.352, %land.end.318
  %295 = load i32, i32* @PL_savestack_ix, align 4
  %add357 = add nsw i32 %295, 2
  %296 = load i32, i32* @PL_savestack_max, align 4
  %cmp358 = icmp sgt i32 %add357, %296
  br i1 %cmp358, label %if.then.360, label %if.end.361

if.then.360:                                      ; preds = %if.end.356
  call void @Perl_savestack_grow()
  br label %if.end.361

if.end.361:                                       ; preds = %if.then.360, %if.end.356
  %297 = load %struct.av*, %struct.av** @PL_comppad, align 8
  %298 = bitcast %struct.av* %297 to %struct.sv*
  %299 = bitcast %struct.sv* %298 to i8*
  %300 = load i32, i32* @PL_savestack_ix, align 4
  %inc362 = add nsw i32 %300, 1
  store i32 %inc362, i32* @PL_savestack_ix, align 4
  %idxprom363 = sext i32 %300 to i64
  %301 = load %union.any*, %union.any** @PL_savestack, align 8
  %arrayidx364 = getelementptr inbounds %union.any, %union.any* %301, i64 %idxprom363
  %any_ptr = bitcast %union.any* %arrayidx364 to i8**
  store i8* %299, i8** %any_ptr, align 8
  %302 = load i32, i32* @PL_savestack_ix, align 4
  %inc366 = add nsw i32 %302, 1
  store i32 %inc366, i32* @PL_savestack_ix, align 4
  %idxprom367 = sext i32 %302 to i64
  %303 = load %union.any*, %union.any** @PL_savestack, align 8
  %arrayidx368 = getelementptr inbounds %union.any, %union.any* %303, i64 %idxprom367
  %any_i32 = bitcast %union.any* %arrayidx368 to i32*
  store i32 33, i32* %any_i32, align 4
  store i32 33, i32* %tmp365
  %304 = load i32, i32* %tmp365
  %305 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any369 = getelementptr inbounds %struct.cv, %struct.cv* %305, i32 0, i32 0
  %306 = load %struct.xpvcv*, %struct.xpvcv** %sv_any369, align 8
  %xcv_depth370 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %306, i32 0, i32 14
  %307 = load i64, i64* %xcv_depth370, align 8
  %308 = load %struct.av*, %struct.av** %padlist, align 8
  %sv_any371 = getelementptr inbounds %struct.av, %struct.av* %308, i32 0, i32 0
  %309 = load %struct.xpvav*, %struct.xpvav** %sv_any371, align 8
  %xav_array372 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %309, i32 0, i32 0
  %310 = load i8*, i8** %xav_array372, align 8
  %311 = bitcast i8* %310 to %struct.sv**
  %arrayidx373 = getelementptr inbounds %struct.sv*, %struct.sv** %311, i64 %307
  %312 = load %struct.sv*, %struct.sv** %arrayidx373, align 8
  %313 = bitcast %struct.sv* %312 to %struct.av*
  store %struct.av* %313, %struct.av** @PL_comppad, align 8
  %314 = load %struct.av*, %struct.av** @PL_comppad, align 8
  %sv_any374 = getelementptr inbounds %struct.av, %struct.av* %314, i32 0, i32 0
  %315 = load %struct.xpvav*, %struct.xpvav** %sv_any374, align 8
  %xav_array375 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %315, i32 0, i32 0
  %316 = load i8*, i8** %xav_array375, align 8
  %317 = bitcast i8* %316 to %struct.sv**
  store %struct.sv** %317, %struct.sv*** @PL_curpad, align 8
  %318 = load %struct.context*, %struct.context** %cx10, align 8
  %cx_u376 = getelementptr inbounds %struct.context, %struct.context* %318, i32 0, i32 1
  %cx_blk377 = bitcast %union.anon* %cx_u376 to %struct.block*
  %blk_u378 = getelementptr inbounds %struct.block, %struct.block* %cx_blk377, i32 0, i32 7
  %blku_sub379 = bitcast %union.anon.1* %blk_u378 to %struct.block_sub*
  %hasargs380 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub379, i32 0, i32 6
  %319 = load i8, i8* %hasargs380, align 1
  %tobool381 = icmp ne i8 %319, 0
  br i1 %tobool381, label %if.then.382, label %if.end.492

if.then.382:                                      ; preds = %if.end.361
  %320 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %arrayidx385 = getelementptr inbounds %struct.sv*, %struct.sv** %320, i64 0
  %321 = load %struct.sv*, %struct.sv** %arrayidx385, align 8
  %322 = bitcast %struct.sv* %321 to %struct.av*
  store %struct.av* %322, %struct.av** %av384, align 8
  %323 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %sv_any387 = getelementptr inbounds %struct.gv, %struct.gv* %323, i32 0, i32 0
  %324 = load %struct.xpvgv*, %struct.xpvgv** %sv_any387, align 8
  %xgv_gp388 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %324, i32 0, i32 7
  %325 = load %struct.gp*, %struct.gp** %xgv_gp388, align 8
  %gp_av389 = getelementptr inbounds %struct.gp, %struct.gp* %325, i32 0, i32 4
  %326 = load %struct.av*, %struct.av** %gp_av389, align 8
  %327 = load %struct.context*, %struct.context** %cx10, align 8
  %cx_u390 = getelementptr inbounds %struct.context, %struct.context* %327, i32 0, i32 1
  %cx_blk391 = bitcast %union.anon* %cx_u390 to %struct.block*
  %blk_u392 = getelementptr inbounds %struct.block, %struct.block* %cx_blk391, i32 0, i32 7
  %blku_sub393 = bitcast %union.anon.1* %blk_u392 to %struct.block_sub*
  %savearray394 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub393, i32 0, i32 3
  store %struct.av* %326, %struct.av** %savearray394, align 8
  %328 = load %struct.av*, %struct.av** %av384, align 8
  %329 = bitcast %struct.av* %328 to %struct.sv*
  store %struct.sv* %329, %struct.sv** @PL_Sv, align 8
  %330 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %tobool395 = icmp ne %struct.sv* %330, null
  br i1 %tobool395, label %land.rhs.396, label %land.end.400

land.rhs.396:                                     ; preds = %if.then.382
  %331 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_refcnt397 = getelementptr inbounds %struct.sv, %struct.sv* %331, i32 0, i32 1
  %332 = load i32, i32* %sv_refcnt397, align 4
  %inc398 = add i32 %332, 1
  store i32 %inc398, i32* %sv_refcnt397, align 4
  %tobool399 = icmp ne i32 %inc398, 0
  br label %land.end.400

land.end.400:                                     ; preds = %land.rhs.396, %if.then.382
  %333 = phi i1 [ false, %if.then.382 ], [ %tobool399, %land.rhs.396 ]
  %land.ext401 = zext i1 %333 to i32
  %334 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %335 = bitcast %struct.sv* %334 to %struct.av*
  %336 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %sv_any402 = getelementptr inbounds %struct.gv, %struct.gv* %336, i32 0, i32 0
  %337 = load %struct.xpvgv*, %struct.xpvgv** %sv_any402, align 8
  %xgv_gp403 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %337, i32 0, i32 7
  %338 = load %struct.gp*, %struct.gp** %xgv_gp403, align 8
  %gp_av404 = getelementptr inbounds %struct.gp, %struct.gp* %338, i32 0, i32 4
  store %struct.av* %335, %struct.av** %gp_av404, align 8
  %339 = load %struct.av*, %struct.av** @PL_comppad, align 8
  %340 = load %struct.context*, %struct.context** %cx10, align 8
  %cx_u405 = getelementptr inbounds %struct.context, %struct.context* %340, i32 0, i32 1
  %cx_blk406 = bitcast %union.anon* %cx_u405 to %struct.block*
  %blk_u407 = getelementptr inbounds %struct.block, %struct.block* %cx_blk406, i32 0, i32 7
  %blku_sub408 = bitcast %union.anon.1* %blk_u407 to %struct.block_sub*
  %oldcomppad = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub408, i32 0, i32 8
  store %struct.av* %339, %struct.av** %oldcomppad, align 8
  %341 = load %struct.av*, %struct.av** %av384, align 8
  %342 = load %struct.context*, %struct.context** %cx10, align 8
  %cx_u409 = getelementptr inbounds %struct.context, %struct.context* %342, i32 0, i32 1
  %cx_blk410 = bitcast %union.anon* %cx_u409 to %struct.block*
  %blk_u411 = getelementptr inbounds %struct.block, %struct.block* %cx_blk410, i32 0, i32 7
  %blku_sub412 = bitcast %union.anon.1* %blk_u411 to %struct.block_sub*
  %argarray413 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub412, i32 0, i32 4
  store %struct.av* %341, %struct.av** %argarray413, align 8
  %343 = load i32, i32* %items, align 4
  %conv414 = sext i32 %343 to i64
  %344 = load %struct.av*, %struct.av** %av384, align 8
  %sv_any415 = getelementptr inbounds %struct.av, %struct.av* %344, i32 0, i32 0
  %345 = load %struct.xpvav*, %struct.xpvav** %sv_any415, align 8
  %xav_max416 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %345, i32 0, i32 2
  %346 = load i64, i64* %xav_max416, align 8
  %add417 = add nsw i64 %346, 1
  %cmp418 = icmp sge i64 %conv414, %add417
  br i1 %cmp418, label %if.then.420, label %if.end.462

if.then.420:                                      ; preds = %land.end.400
  %347 = load %struct.av*, %struct.av** %av384, align 8
  %sv_any421 = getelementptr inbounds %struct.av, %struct.av* %347, i32 0, i32 0
  %348 = load %struct.xpvav*, %struct.xpvav** %sv_any421, align 8
  %xav_alloc422 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %348, i32 0, i32 7
  %349 = load %struct.sv**, %struct.sv*** %xav_alloc422, align 8
  store %struct.sv** %349, %struct.sv*** %ary, align 8
  %350 = load %struct.av*, %struct.av** %av384, align 8
  %sv_any423 = getelementptr inbounds %struct.av, %struct.av* %350, i32 0, i32 0
  %351 = load %struct.xpvav*, %struct.xpvav** %sv_any423, align 8
  %xav_array424 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %351, i32 0, i32 0
  %352 = load i8*, i8** %xav_array424, align 8
  %353 = bitcast i8* %352 to %struct.sv**
  %354 = load %struct.sv**, %struct.sv*** %ary, align 8
  %cmp425 = icmp ne %struct.sv** %353, %354
  br i1 %cmp425, label %if.then.427, label %if.end.441

if.then.427:                                      ; preds = %if.then.420
  %355 = load %struct.av*, %struct.av** %av384, align 8
  %sv_any428 = getelementptr inbounds %struct.av, %struct.av* %355, i32 0, i32 0
  %356 = load %struct.xpvav*, %struct.xpvav** %sv_any428, align 8
  %xav_array429 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %356, i32 0, i32 0
  %357 = load i8*, i8** %xav_array429, align 8
  %358 = bitcast i8* %357 to %struct.sv**
  %359 = load %struct.av*, %struct.av** %av384, align 8
  %sv_any430 = getelementptr inbounds %struct.av, %struct.av* %359, i32 0, i32 0
  %360 = load %struct.xpvav*, %struct.xpvav** %sv_any430, align 8
  %xav_alloc431 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %360, i32 0, i32 7
  %361 = load %struct.sv**, %struct.sv*** %xav_alloc431, align 8
  %sub.ptr.lhs.cast432 = ptrtoint %struct.sv** %358 to i64
  %sub.ptr.rhs.cast433 = ptrtoint %struct.sv** %361 to i64
  %sub.ptr.sub434 = sub i64 %sub.ptr.lhs.cast432, %sub.ptr.rhs.cast433
  %sub.ptr.div435 = sdiv exact i64 %sub.ptr.sub434, 8
  %362 = load %struct.av*, %struct.av** %av384, align 8
  %sv_any436 = getelementptr inbounds %struct.av, %struct.av* %362, i32 0, i32 0
  %363 = load %struct.xpvav*, %struct.xpvav** %sv_any436, align 8
  %xav_max437 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %363, i32 0, i32 2
  %364 = load i64, i64* %xav_max437, align 8
  %add438 = add nsw i64 %364, %sub.ptr.div435
  store i64 %add438, i64* %xav_max437, align 8
  %365 = load %struct.sv**, %struct.sv*** %ary, align 8
  %366 = bitcast %struct.sv** %365 to i8*
  %367 = load %struct.av*, %struct.av** %av384, align 8
  %sv_any439 = getelementptr inbounds %struct.av, %struct.av* %367, i32 0, i32 0
  %368 = load %struct.xpvav*, %struct.xpvav** %sv_any439, align 8
  %369 = bitcast %struct.xpvav* %368 to %struct.xpv*
  %xpv_pv440 = getelementptr inbounds %struct.xpv, %struct.xpv* %369, i32 0, i32 0
  store i8* %366, i8** %xpv_pv440, align 8
  br label %if.end.441

if.end.441:                                       ; preds = %if.then.427, %if.then.420
  %370 = load i32, i32* %items, align 4
  %conv442 = sext i32 %370 to i64
  %371 = load %struct.av*, %struct.av** %av384, align 8
  %sv_any443 = getelementptr inbounds %struct.av, %struct.av* %371, i32 0, i32 0
  %372 = load %struct.xpvav*, %struct.xpvav** %sv_any443, align 8
  %xav_max444 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %372, i32 0, i32 2
  %373 = load i64, i64* %xav_max444, align 8
  %add445 = add nsw i64 %373, 1
  %cmp446 = icmp sge i64 %conv442, %add445
  br i1 %cmp446, label %if.then.448, label %if.end.461

if.then.448:                                      ; preds = %if.end.441
  %374 = load i32, i32* %items, align 4
  %sub449 = sub nsw i32 %374, 1
  %conv450 = sext i32 %sub449 to i64
  %375 = load %struct.av*, %struct.av** %av384, align 8
  %sv_any451 = getelementptr inbounds %struct.av, %struct.av* %375, i32 0, i32 0
  %376 = load %struct.xpvav*, %struct.xpvav** %sv_any451, align 8
  %xav_max452 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %376, i32 0, i32 2
  store i64 %conv450, i64* %xav_max452, align 8
  %377 = load %struct.sv**, %struct.sv*** %ary, align 8
  %378 = bitcast %struct.sv** %377 to i8*
  %379 = load i32, i32* %items, align 4
  %add453 = add nsw i32 %379, 1
  %conv454 = sext i32 %add453 to i64
  %mul455 = mul i64 %conv454, 8
  %call456 = call i8* @Perl_safesysrealloc(i8* %378, i64 %mul455)
  %380 = bitcast i8* %call456 to %struct.sv**
  store %struct.sv** %380, %struct.sv*** %ary, align 8
  %381 = load %struct.sv**, %struct.sv*** %ary, align 8
  %382 = load %struct.av*, %struct.av** %av384, align 8
  %sv_any457 = getelementptr inbounds %struct.av, %struct.av* %382, i32 0, i32 0
  %383 = load %struct.xpvav*, %struct.xpvav** %sv_any457, align 8
  %xav_alloc458 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %383, i32 0, i32 7
  store %struct.sv** %381, %struct.sv*** %xav_alloc458, align 8
  %384 = load %struct.sv**, %struct.sv*** %ary, align 8
  %385 = bitcast %struct.sv** %384 to i8*
  %386 = load %struct.av*, %struct.av** %av384, align 8
  %sv_any459 = getelementptr inbounds %struct.av, %struct.av* %386, i32 0, i32 0
  %387 = load %struct.xpvav*, %struct.xpvav** %sv_any459, align 8
  %388 = bitcast %struct.xpvav* %387 to %struct.xpv*
  %xpv_pv460 = getelementptr inbounds %struct.xpv, %struct.xpv* %388, i32 0, i32 0
  store i8* %385, i8** %xpv_pv460, align 8
  br label %if.end.461

if.end.461:                                       ; preds = %if.then.448, %if.end.441
  br label %if.end.462

if.end.462:                                       ; preds = %if.end.461, %land.end.400
  %389 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr463 = getelementptr inbounds %struct.sv*, %struct.sv** %389, i32 1
  store %struct.sv** %incdec.ptr463, %struct.sv*** %mark, align 8
  %390 = load %struct.av*, %struct.av** %av384, align 8
  %sv_any464 = getelementptr inbounds %struct.av, %struct.av* %390, i32 0, i32 0
  %391 = load %struct.xpvav*, %struct.xpvav** %sv_any464, align 8
  %xav_array465 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %391, i32 0, i32 0
  %392 = load i8*, i8** %xav_array465, align 8
  %393 = bitcast i8* %392 to %struct.sv**
  %394 = bitcast %struct.sv** %393 to i8*
  %395 = load %struct.sv**, %struct.sv*** %mark, align 8
  %396 = bitcast %struct.sv** %395 to i8*
  %397 = load i32, i32* %items, align 4
  %conv466 = sext i32 %397 to i64
  %mul467 = mul i64 %conv466, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %394, i8* %396, i64 %mul467, i32 1, i1 false)
  %398 = load i32, i32* %items, align 4
  %sub468 = sub nsw i32 %398, 1
  %conv469 = sext i32 %sub468 to i64
  %399 = load %struct.av*, %struct.av** %av384, align 8
  %sv_any470 = getelementptr inbounds %struct.av, %struct.av* %399, i32 0, i32 0
  %400 = load %struct.xpvav*, %struct.xpvav** %sv_any470, align 8
  %xav_fill471 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %400, i32 0, i32 1
  store i64 %conv469, i64* %xav_fill471, align 8
  %401 = load i8, i8* %reified, align 1
  %tobool472 = icmp ne i8 %401, 0
  br i1 %tobool472, label %if.then.473, label %if.end.483

if.then.473:                                      ; preds = %if.end.462
  %402 = load %struct.av*, %struct.av** %av384, align 8
  %sv_any474 = getelementptr inbounds %struct.av, %struct.av* %402, i32 0, i32 0
  %403 = load %struct.xpvav*, %struct.xpvav** %sv_any474, align 8
  %xav_flags475 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %403, i32 0, i32 9
  %404 = load i8, i8* %xav_flags475, align 1
  %conv476 = zext i8 %404 to i32
  %or = or i32 %conv476, 1
  %conv477 = trunc i32 %or to i8
  store i8 %conv477, i8* %xav_flags475, align 1
  %405 = load %struct.av*, %struct.av** %av384, align 8
  %sv_any478 = getelementptr inbounds %struct.av, %struct.av* %405, i32 0, i32 0
  %406 = load %struct.xpvav*, %struct.xpvav** %sv_any478, align 8
  %xav_flags479 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %406, i32 0, i32 9
  %407 = load i8, i8* %xav_flags479, align 1
  %conv480 = zext i8 %407 to i32
  %and481 = and i32 %conv480, -3
  %conv482 = trunc i32 %and481 to i8
  store i8 %conv482, i8* %xav_flags479, align 1
  br label %if.end.483

if.end.483:                                       ; preds = %if.then.473, %if.end.462
  br label %while.cond

while.cond:                                       ; preds = %if.end.490, %if.end.483
  %408 = load i32, i32* %items, align 4
  %dec484 = add nsw i32 %408, -1
  store i32 %dec484, i32* %items, align 4
  %tobool485 = icmp ne i32 %408, 0
  br i1 %tobool485, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %409 = load %struct.sv**, %struct.sv*** %mark, align 8
  %410 = load %struct.sv*, %struct.sv** %409, align 8
  %tobool486 = icmp ne %struct.sv* %410, null
  br i1 %tobool486, label %if.then.487, label %if.end.490

if.then.487:                                      ; preds = %while.body
  %411 = load %struct.sv**, %struct.sv*** %mark, align 8
  %412 = load %struct.sv*, %struct.sv** %411, align 8
  %sv_flags488 = getelementptr inbounds %struct.sv, %struct.sv* %412, i32 0, i32 2
  %413 = load i32, i32* %sv_flags488, align 4
  %and489 = and i32 %413, -2049
  store i32 %and489, i32* %sv_flags488, align 4
  br label %if.end.490

if.end.490:                                       ; preds = %if.then.487, %while.body
  %414 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr491 = getelementptr inbounds %struct.sv*, %struct.sv** %414, i32 1
  store %struct.sv** %incdec.ptr491, %struct.sv*** %mark, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end.492

if.end.492:                                       ; preds = %while.end, %if.end.361
  %415 = load i32, i32* @PL_perldb, align 4
  %tobool493 = icmp ne i32 %415, 0
  br i1 %tobool493, label %land.lhs.true.494, label %if.end.554

land.lhs.true.494:                                ; preds = %if.end.492
  %416 = load i32, i32* @PL_perldb, align 4
  %and495 = and i32 %416, 1
  %tobool496 = icmp ne i32 %and495, 0
  br i1 %tobool496, label %if.then.497, label %if.end.554

if.then.497:                                      ; preds = %land.lhs.true.494
  %417 = load %struct.gv*, %struct.gv** @PL_DBsub, align 8
  %sv_any500 = getelementptr inbounds %struct.gv, %struct.gv* %417, i32 0, i32 0
  %418 = load %struct.xpvgv*, %struct.xpvgv** %sv_any500, align 8
  %xgv_gp501 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %418, i32 0, i32 7
  %419 = load %struct.gp*, %struct.gp** %xgv_gp501, align 8
  %gp_sv = getelementptr inbounds %struct.gp, %struct.gp* %419, i32 0, i32 0
  %420 = load %struct.sv*, %struct.sv** %gp_sv, align 8
  store %struct.sv* %420, %struct.sv** %sv499, align 8
  %421 = load i32, i32* @PL_perldb, align 4
  %tobool503 = icmp ne i32 %421, 0
  br i1 %tobool503, label %land.lhs.true.504, label %if.else.528

land.lhs.true.504:                                ; preds = %if.then.497
  %422 = load i32, i32* @PL_perldb, align 4
  %and505 = and i32 %422, 64
  %tobool506 = icmp ne i32 %and505, 0
  br i1 %tobool506, label %if.then.507, label %if.else.528

if.then.507:                                      ; preds = %land.lhs.true.504
  %423 = load %struct.sv*, %struct.sv** %sv499, align 8
  %sv_flags508 = getelementptr inbounds %struct.sv, %struct.sv* %423, i32 0, i32 2
  %424 = load i32, i32* %sv_flags508, align 4
  %and509 = and i32 %424, 255
  %cmp510 = icmp uge i32 %and509, 5
  br i1 %cmp510, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.then.507
  %425 = load %struct.sv*, %struct.sv** %sv499, align 8
  %call512 = call signext i8 @Perl_sv_upgrade(%struct.sv* %425, i32 5)
  %conv513 = sext i8 %call512 to i32
  %tobool514 = icmp ne i32 %conv513, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.then.507
  %426 = phi i1 [ true, %if.then.507 ], [ %tobool514, %lor.rhs ]
  %lor.ext = zext i1 %426 to i32
  %427 = load %struct.sv*, %struct.sv** %sv499, align 8
  %sv_flags515 = getelementptr inbounds %struct.sv, %struct.sv* %427, i32 0, i32 2
  %428 = load i32, i32* %sv_flags515, align 4
  %and516 = and i32 %428, 2097152
  %tobool517 = icmp ne i32 %and516, 0
  br i1 %tobool517, label %land.rhs.518, label %land.end.521

land.rhs.518:                                     ; preds = %lor.end
  %429 = load %struct.sv*, %struct.sv** %sv499, align 8
  %call519 = call i32 @Perl_sv_backoff(%struct.sv* %429)
  %tobool520 = icmp ne i32 %call519, 0
  br label %land.end.521

land.end.521:                                     ; preds = %land.rhs.518, %lor.end
  %430 = phi i1 [ false, %lor.end ], [ %tobool520, %land.rhs.518 ]
  %land.ext522 = zext i1 %430 to i32
  %431 = load %struct.sv*, %struct.sv** %sv499, align 8
  %sv_flags523 = getelementptr inbounds %struct.sv, %struct.sv* %431, i32 0, i32 2
  %432 = load i32, i32* %sv_flags523, align 4
  %or524 = or i32 %432, 16842752
  store i32 %or524, i32* %sv_flags523, align 4
  %433 = load %struct.sv*, %struct.sv** %sv499, align 8
  %sv_any525 = getelementptr inbounds %struct.sv, %struct.sv* %433, i32 0, i32 0
  %434 = load i8*, i8** %sv_any525, align 8
  %435 = bitcast i8* %434 to %struct.xpviv*
  %xiv_iv = getelementptr inbounds %struct.xpviv, %struct.xpviv* %435, i32 0, i32 3
  call void @Perl_save_iv(i64* %xiv_iv)
  %436 = load %struct.cv*, %struct.cv** %cv, align 8
  %437 = ptrtoint %struct.cv* %436 to i64
  %438 = load %struct.sv*, %struct.sv** %sv499, align 8
  %sv_any526 = getelementptr inbounds %struct.sv, %struct.sv* %438, i32 0, i32 0
  %439 = load i8*, i8** %sv_any526, align 8
  %440 = bitcast i8* %439 to %struct.xpviv*
  %xiv_iv527 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %440, i32 0, i32 3
  store i64 %437, i64* %xiv_iv527, align 8
  br label %if.end.531

if.else.528:                                      ; preds = %land.lhs.true.504, %if.then.497
  %441 = load %struct.sv*, %struct.sv** %sv499, align 8
  call void @Perl_save_item(%struct.sv* %441)
  %442 = load %struct.sv*, %struct.sv** %sv499, align 8
  %443 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any529 = getelementptr inbounds %struct.cv, %struct.cv* %443, i32 0, i32 0
  %444 = load %struct.xpvcv*, %struct.xpvcv** %sv_any529, align 8
  %xcv_gv530 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %444, i32 0, i32 12
  %445 = load %struct.gv*, %struct.gv** %xcv_gv530, align 8
  call void @Perl_gv_efullname4(%struct.sv* %442, %struct.gv* %445, i8* null, i8 signext 1)
  br label %if.end.531

if.end.531:                                       ; preds = %if.else.528, %land.end.521
  %446 = load i32, i32* @PL_perldb, align 4
  %tobool532 = icmp ne i32 %446, 0
  br i1 %tobool532, label %land.lhs.true.533, label %if.end.553

land.lhs.true.533:                                ; preds = %if.end.531
  %447 = load i32, i32* @PL_perldb, align 4
  %and534 = and i32 %447, 128
  %tobool535 = icmp ne i32 %and534, 0
  br i1 %tobool535, label %land.lhs.true.536, label %if.end.553

land.lhs.true.536:                                ; preds = %land.lhs.true.533
  %call537 = call %struct.cv* @Perl_get_cv(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.42, i32 0, i32 0), i32 0)
  store %struct.cv* %call537, %struct.cv** %gotocv, align 8
  %tobool538 = icmp ne %struct.cv* %call537, null
  br i1 %tobool538, label %if.then.539, label %if.end.553

if.then.539:                                      ; preds = %land.lhs.true.536
  %448 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr540 = getelementptr inbounds i32, i32* %448, i32 1
  store i32* %incdec.ptr540, i32** @PL_markstack_ptr, align 8
  %449 = load i32*, i32** @PL_markstack_max, align 8
  %cmp541 = icmp eq i32* %incdec.ptr540, %449
  br i1 %cmp541, label %if.then.543, label %if.end.544

if.then.543:                                      ; preds = %if.then.539
  call void @Perl_markstack_grow()
  br label %if.end.544

if.end.544:                                       ; preds = %if.then.543, %if.then.539
  %450 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  %451 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast546 = ptrtoint %struct.sv** %450 to i64
  %sub.ptr.rhs.cast547 = ptrtoint %struct.sv** %451 to i64
  %sub.ptr.sub548 = sub i64 %sub.ptr.lhs.cast546, %sub.ptr.rhs.cast547
  %sub.ptr.div549 = sdiv exact i64 %sub.ptr.sub548, 8
  %conv550 = trunc i64 %sub.ptr.div549 to i32
  %452 = load i32*, i32** @PL_markstack_ptr, align 8
  store i32 %conv550, i32* %452, align 4
  store i32 %conv550, i32* %tmp545
  %453 = load i32, i32* %tmp545
  %454 = load %struct.cv*, %struct.cv** %gotocv, align 8
  %455 = bitcast %struct.cv* %454 to %struct.sv*
  %call551 = call i32 @Perl_call_sv(%struct.sv* %455, i32 32)
  %456 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  %incdec.ptr552 = getelementptr inbounds %struct.sv*, %struct.sv** %456, i32 -1
  store %struct.sv** %incdec.ptr552, %struct.sv*** @PL_stack_sp, align 8
  br label %if.end.553

if.end.553:                                       ; preds = %if.end.544, %land.lhs.true.536, %land.lhs.true.533, %if.end.531
  br label %if.end.554

if.end.554:                                       ; preds = %if.end.553, %land.lhs.true.494, %if.end.492
  %457 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %457, %struct.sv*** @PL_stack_sp, align 8
  %458 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any555 = getelementptr inbounds %struct.cv, %struct.cv* %458, i32 0, i32 0
  %459 = load %struct.xpvcv*, %struct.xpvcv** %sv_any555, align 8
  %xcv_start = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %459, i32 0, i32 8
  %460 = load %struct.op*, %struct.op** %xcv_start, align 8
  store %struct.op* %460, %struct.op** %retval
  br label %return

if.else.556:                                      ; preds = %land.lhs.true, %if.then
  %461 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags557 = getelementptr inbounds %struct.sv, %struct.sv* %461, i32 0, i32 2
  %462 = load i32, i32* %sv_flags557, align 4
  %and558 = and i32 %462, 262144
  %cmp559 = icmp eq i32 %and558, 262144
  br i1 %cmp559, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else.556
  %463 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any561 = getelementptr inbounds %struct.sv, %struct.sv* %463, i32 0, i32 0
  %464 = load i8*, i8** %sv_any561, align 8
  %465 = bitcast i8* %464 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %465, i32 0, i32 1
  %466 = load i64, i64* %xpv_cur, align 8
  store i64 %466, i64* %n_a, align 8
  %467 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any562 = getelementptr inbounds %struct.sv, %struct.sv* %467, i32 0, i32 0
  %468 = load i8*, i8** %sv_any562, align 8
  %469 = bitcast i8* %468 to %struct.xpv*
  %xpv_pv563 = getelementptr inbounds %struct.xpv, %struct.xpv* %469, i32 0, i32 0
  %470 = load i8*, i8** %xpv_pv563, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.else.556
  %471 = load %struct.sv*, %struct.sv** %sv, align 8
  %call564 = call i8* @Perl_sv_2pv_flags(%struct.sv* %471, i64* %n_a, i32 2)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %470, %cond.true ], [ %call564, %cond.false ]
  store i8* %cond, i8** %label, align 8
  %472 = load i32, i32* %do_dump, align 4
  %tobool565 = icmp ne i32 %472, 0
  br i1 %tobool565, label %if.end.571, label %lor.lhs.false.566

lor.lhs.false.566:                                ; preds = %cond.end
  %473 = load i8*, i8** %label, align 8
  %474 = load i8, i8* %473, align 1
  %conv567 = sext i8 %474 to i32
  %tobool568 = icmp ne i32 %conv567, 0
  br i1 %tobool568, label %if.end.571, label %if.then.569

if.then.569:                                      ; preds = %lor.lhs.false.566
  %call570 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @Perl_pp_goto.must_have_label, i32 0, i32 0))
  store %struct.op* %call570, %struct.op** %retval
  br label %return

if.end.571:                                       ; preds = %lor.lhs.false.566, %cond.end
  br label %if.end.572

if.end.572:                                       ; preds = %if.end.571
  br label %if.end.585

if.else.573:                                      ; preds = %entry
  %475 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags574 = getelementptr inbounds %struct.op, %struct.op* %475, i32 0, i32 6
  %476 = load i8, i8* %op_flags574, align 1
  %conv575 = zext i8 %476 to i32
  %and576 = and i32 %conv575, 128
  %tobool577 = icmp ne i32 %and576, 0
  br i1 %tobool577, label %if.then.578, label %if.else.583

if.then.578:                                      ; preds = %if.else.573
  %477 = load i32, i32* %do_dump, align 4
  %tobool579 = icmp ne i32 %477, 0
  br i1 %tobool579, label %if.end.582, label %if.then.580

if.then.580:                                      ; preds = %if.then.578
  %call581 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @Perl_pp_goto.must_have_label, i32 0, i32 0))
  store %struct.op* %call581, %struct.op** %retval
  br label %return

if.end.582:                                       ; preds = %if.then.578
  br label %if.end.584

if.else.583:                                      ; preds = %if.else.573
  %478 = load %struct.op*, %struct.op** @PL_op, align 8
  %479 = bitcast %struct.op* %478 to %struct.pvop*
  %op_pv = getelementptr inbounds %struct.pvop, %struct.pvop* %479, i32 0, i32 8
  %480 = load i8*, i8** %op_pv, align 8
  store i8* %480, i8** %label, align 8
  br label %if.end.584

if.end.584:                                       ; preds = %if.else.583, %if.end.582
  br label %if.end.585

if.end.585:                                       ; preds = %if.end.584, %if.end.572
  %481 = load i8*, i8** %label, align 8
  %tobool586 = icmp ne i8* %481, null
  br i1 %tobool586, label %land.lhs.true.587, label %if.end.782

land.lhs.true.587:                                ; preds = %if.end.585
  %482 = load i8*, i8** %label, align 8
  %483 = load i8, i8* %482, align 1
  %conv588 = sext i8 %483 to i32
  %tobool589 = icmp ne i32 %conv588, 0
  br i1 %tobool589, label %if.then.590, label %if.end.782

if.then.590:                                      ; preds = %land.lhs.true.587
  store %struct.op* null, %struct.op** %gotoprobe, align 8
  store i8 0, i8* %leaving_eval, align 1
  store i8 0, i8* %in_block, align 1
  store %struct.context* null, %struct.context** %last_eval_cx, align 8
  store %struct.op* null, %struct.op** @PL_lastgotoprobe, align 8
  %arraydecay = getelementptr inbounds [64 x %struct.op*], [64 x %struct.op*]* %enterops, i32 0, i32 0
  store %struct.op* null, %struct.op** %arraydecay, align 8
  %484 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix595 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %484, i32 0, i32 2
  %485 = load i32, i32* %si_cxix595, align 4
  store i32 %485, i32* %ix, align 4
  br label %for.cond.596

for.cond.596:                                     ; preds = %for.inc.669, %if.then.590
  %486 = load i32, i32* %ix, align 4
  %cmp597 = icmp sge i32 %486, 0
  br i1 %cmp597, label %for.body.599, label %for.end.671

for.body.599:                                     ; preds = %for.cond.596
  %487 = load i32, i32* %ix, align 4
  %idxprom600 = sext i32 %487 to i64
  %488 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxstack601 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %488, i32 0, i32 1
  %489 = load %struct.context*, %struct.context** %si_cxstack601, align 8
  %arrayidx602 = getelementptr inbounds %struct.context, %struct.context* %489, i64 %idxprom600
  store %struct.context* %arrayidx602, %struct.context** %cx, align 8
  %490 = load %struct.context*, %struct.context** %cx, align 8
  %cx_type603 = getelementptr inbounds %struct.context, %struct.context* %490, i32 0, i32 0
  %491 = load i32, i32* %cx_type603, align 4
  %and604 = and i32 %491, 255
  switch i32 %and604, label %sw.default [
    i32 2, label %sw.bb
    i32 3, label %sw.bb.621
    i32 4, label %sw.bb.625
    i32 5, label %sw.bb.626
    i32 1, label %sw.bb.635
    i32 6, label %sw.bb.653
    i32 0, label %sw.bb.653
  ]

sw.bb:                                            ; preds = %for.body.599
  store i8 1, i8* %leaving_eval, align 1
  %492 = load %struct.context*, %struct.context** %cx, align 8
  %cx_type605 = getelementptr inbounds %struct.context, %struct.context* %492, i32 0, i32 0
  %493 = load i32, i32* %cx_type605, align 4
  %and606 = and i32 %493, 514
  %cmp607 = icmp eq i32 %and606, 514
  br i1 %cmp607, label %if.end.620, label %if.then.609

if.then.609:                                      ; preds = %sw.bb
  %494 = load %struct.context*, %struct.context** %last_eval_cx, align 8
  %tobool610 = icmp ne %struct.context* %494, null
  br i1 %tobool610, label %cond.true.611, label %cond.false.617

cond.true.611:                                    ; preds = %if.then.609
  %495 = load %struct.context*, %struct.context** %last_eval_cx, align 8
  %cx_u612 = getelementptr inbounds %struct.context, %struct.context* %495, i32 0, i32 1
  %cx_blk613 = bitcast %union.anon* %cx_u612 to %struct.block*
  %blk_u614 = getelementptr inbounds %struct.block, %struct.block* %cx_blk613, i32 0, i32 7
  %blku_eval615 = bitcast %union.anon.1* %blk_u614 to %struct.block_eval*
  %old_eval_root616 = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval615, i32 0, i32 3
  %496 = load %struct.op*, %struct.op** %old_eval_root616, align 8
  br label %cond.end.618

cond.false.617:                                   ; preds = %if.then.609
  %497 = load %struct.op*, %struct.op** @PL_eval_root, align 8
  br label %cond.end.618

cond.end.618:                                     ; preds = %cond.false.617, %cond.true.611
  %cond619 = phi %struct.op* [ %496, %cond.true.611 ], [ %497, %cond.false.617 ]
  store %struct.op* %cond619, %struct.op** %gotoprobe, align 8
  %498 = load %struct.context*, %struct.context** %cx, align 8
  store %struct.context* %498, %struct.context** %last_eval_cx, align 8
  br label %sw.epilog

if.end.620:                                       ; preds = %sw.bb
  br label %sw.bb.621

sw.bb.621:                                        ; preds = %for.body.599, %if.end.620
  %499 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u622 = getelementptr inbounds %struct.context, %struct.context* %499, i32 0, i32 1
  %cx_blk623 = bitcast %union.anon* %cx_u622 to %struct.block*
  %blku_oldcop624 = getelementptr inbounds %struct.block, %struct.block* %cx_blk623, i32 0, i32 1
  %500 = load %struct.cop*, %struct.cop** %blku_oldcop624, align 8
  %op_sibling = getelementptr inbounds %struct.cop, %struct.cop* %500, i32 0, i32 1
  %501 = load %struct.op*, %struct.op** %op_sibling, align 8
  store %struct.op* %501, %struct.op** %gotoprobe, align 8
  br label %sw.epilog

sw.bb.625:                                        ; preds = %for.body.599
  br label %for.inc.669

sw.bb.626:                                        ; preds = %for.body.599
  %502 = load i32, i32* %ix, align 4
  %tobool627 = icmp ne i32 %502, 0
  br i1 %tobool627, label %if.then.628, label %if.else.633

if.then.628:                                      ; preds = %sw.bb.626
  %503 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u629 = getelementptr inbounds %struct.context, %struct.context* %503, i32 0, i32 1
  %cx_blk630 = bitcast %union.anon* %cx_u629 to %struct.block*
  %blku_oldcop631 = getelementptr inbounds %struct.block, %struct.block* %cx_blk630, i32 0, i32 1
  %504 = load %struct.cop*, %struct.cop** %blku_oldcop631, align 8
  %op_sibling632 = getelementptr inbounds %struct.cop, %struct.cop* %504, i32 0, i32 1
  %505 = load %struct.op*, %struct.op** %op_sibling632, align 8
  store %struct.op* %505, %struct.op** %gotoprobe, align 8
  store i8 1, i8* %in_block, align 1
  br label %if.end.634

if.else.633:                                      ; preds = %sw.bb.626
  %506 = load %struct.op*, %struct.op** @PL_main_root, align 8
  store %struct.op* %506, %struct.op** %gotoprobe, align 8
  br label %if.end.634

if.end.634:                                       ; preds = %if.else.633, %if.then.628
  br label %sw.epilog

sw.bb.635:                                        ; preds = %for.body.599
  %507 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u636 = getelementptr inbounds %struct.context, %struct.context* %507, i32 0, i32 1
  %cx_blk637 = bitcast %union.anon* %cx_u636 to %struct.block*
  %blk_u638 = getelementptr inbounds %struct.block, %struct.block* %cx_blk637, i32 0, i32 7
  %blku_sub639 = bitcast %union.anon.1* %blk_u638 to %struct.block_sub*
  %cv640 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub639, i32 0, i32 0
  %508 = load %struct.cv*, %struct.cv** %cv640, align 8
  %sv_any641 = getelementptr inbounds %struct.cv, %struct.cv* %508, i32 0, i32 0
  %509 = load %struct.xpvcv*, %struct.xpvcv** %sv_any641, align 8
  %xcv_depth642 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %509, i32 0, i32 14
  %510 = load i64, i64* %xcv_depth642, align 8
  %tobool643 = icmp ne i64 %510, 0
  br i1 %tobool643, label %if.then.644, label %if.end.652

if.then.644:                                      ; preds = %sw.bb.635
  %511 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u645 = getelementptr inbounds %struct.context, %struct.context* %511, i32 0, i32 1
  %cx_blk646 = bitcast %union.anon* %cx_u645 to %struct.block*
  %blk_u647 = getelementptr inbounds %struct.block, %struct.block* %cx_blk646, i32 0, i32 7
  %blku_sub648 = bitcast %union.anon.1* %blk_u647 to %struct.block_sub*
  %cv649 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub648, i32 0, i32 0
  %512 = load %struct.cv*, %struct.cv** %cv649, align 8
  %sv_any650 = getelementptr inbounds %struct.cv, %struct.cv* %512, i32 0, i32 0
  %513 = load %struct.xpvcv*, %struct.xpvcv** %sv_any650, align 8
  %xcv_root651 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %513, i32 0, i32 9
  %514 = load %struct.op*, %struct.op** %xcv_root651, align 8
  store %struct.op* %514, %struct.op** %gotoprobe, align 8
  br label %sw.epilog

if.end.652:                                       ; preds = %sw.bb.635
  br label %sw.bb.653

sw.bb.653:                                        ; preds = %for.body.599, %for.body.599, %if.end.652
  %call654 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.43, i32 0, i32 0))
  store %struct.op* %call654, %struct.op** %retval
  br label %return

sw.default:                                       ; preds = %for.body.599
  %515 = load i32, i32* %ix, align 4
  %tobool655 = icmp ne i32 %515, 0
  br i1 %tobool655, label %if.then.656, label %if.end.658

if.then.656:                                      ; preds = %sw.default
  %call657 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.44, i32 0, i32 0))
  store %struct.op* %call657, %struct.op** %retval
  br label %return

if.end.658:                                       ; preds = %sw.default
  %516 = load %struct.op*, %struct.op** @PL_main_root, align 8
  store %struct.op* %516, %struct.op** %gotoprobe, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end.658, %if.then.644, %if.end.634, %sw.bb.621, %cond.end.618
  %517 = load %struct.op*, %struct.op** %gotoprobe, align 8
  %tobool659 = icmp ne %struct.op* %517, null
  br i1 %tobool659, label %if.then.660, label %if.end.668

if.then.660:                                      ; preds = %sw.epilog
  %518 = load %struct.op*, %struct.op** %gotoprobe, align 8
  %519 = load i8*, i8** %label, align 8
  %arraydecay661 = getelementptr inbounds [64 x %struct.op*], [64 x %struct.op*]* %enterops, i32 0, i32 0
  %arraydecay662 = getelementptr inbounds [64 x %struct.op*], [64 x %struct.op*]* %enterops, i32 0, i32 0
  %add.ptr663 = getelementptr inbounds %struct.op*, %struct.op** %arraydecay662, i64 64
  %call664 = call %struct.op* @S_dofindlabel(%struct.op* %518, i8* %519, %struct.op** %arraydecay661, %struct.op** %add.ptr663)
  store %struct.op* %call664, %struct.op** %retop, align 8
  %520 = load %struct.op*, %struct.op** %retop, align 8
  %tobool665 = icmp ne %struct.op* %520, null
  br i1 %tobool665, label %if.then.666, label %if.end.667

if.then.666:                                      ; preds = %if.then.660
  br label %for.end.671

if.end.667:                                       ; preds = %if.then.660
  br label %if.end.668

if.end.668:                                       ; preds = %if.end.667, %sw.epilog
  %521 = load %struct.op*, %struct.op** %gotoprobe, align 8
  store %struct.op* %521, %struct.op** @PL_lastgotoprobe, align 8
  br label %for.inc.669

for.inc.669:                                      ; preds = %if.end.668, %sw.bb.625
  %522 = load i32, i32* %ix, align 4
  %dec670 = add nsw i32 %522, -1
  store i32 %dec670, i32* %ix, align 4
  br label %for.cond.596

for.end.671:                                      ; preds = %if.then.666, %for.cond.596
  %523 = load %struct.op*, %struct.op** %retop, align 8
  %tobool672 = icmp ne %struct.op* %523, null
  br i1 %tobool672, label %if.end.675, label %if.then.673

if.then.673:                                      ; preds = %for.end.671
  %524 = load i8*, i8** %label, align 8
  %call674 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.45, i32 0, i32 0), i8* %524)
  store %struct.op* %call674, %struct.op** %retval
  br label %return

if.end.675:                                       ; preds = %for.end.671
  %525 = load i8, i8* %leaving_eval, align 1
  %conv676 = sext i8 %525 to i32
  %tobool677 = icmp ne i32 %conv676, 0
  br i1 %tobool677, label %land.lhs.true.678, label %if.end.703

land.lhs.true.678:                                ; preds = %if.end.675
  %arraydecay679 = getelementptr inbounds [64 x %struct.op*], [64 x %struct.op*]* %enterops, i32 0, i32 0
  %526 = load %struct.op*, %struct.op** %arraydecay679, align 8
  %tobool680 = icmp ne %struct.op* %526, null
  br i1 %tobool680, label %land.lhs.true.681, label %if.end.703

land.lhs.true.681:                                ; preds = %land.lhs.true.678
  %arrayidx682 = getelementptr inbounds [64 x %struct.op*], [64 x %struct.op*]* %enterops, i32 0, i64 1
  %527 = load %struct.op*, %struct.op** %arrayidx682, align 8
  %tobool683 = icmp ne %struct.op* %527, null
  br i1 %tobool683, label %if.then.684, label %if.end.703

if.then.684:                                      ; preds = %land.lhs.true.681
  store i32 1, i32* %i, align 4
  br label %for.cond.686

for.cond.686:                                     ; preds = %for.inc.700, %if.then.684
  %528 = load i32, i32* %i, align 4
  %idxprom687 = sext i32 %528 to i64
  %arrayidx688 = getelementptr inbounds [64 x %struct.op*], [64 x %struct.op*]* %enterops, i32 0, i64 %idxprom687
  %529 = load %struct.op*, %struct.op** %arrayidx688, align 8
  %tobool689 = icmp ne %struct.op* %529, null
  br i1 %tobool689, label %for.body.690, label %for.end.702

for.body.690:                                     ; preds = %for.cond.686
  %530 = load i32, i32* %i, align 4
  %idxprom691 = sext i32 %530 to i64
  %arrayidx692 = getelementptr inbounds [64 x %struct.op*], [64 x %struct.op*]* %enterops, i32 0, i64 %idxprom691
  %531 = load %struct.op*, %struct.op** %arrayidx692, align 8
  %op_type693 = getelementptr inbounds %struct.op, %struct.op* %531, i32 0, i32 4
  %532 = load i16, i16* %op_type693, align 2
  %conv694 = zext i16 %532 to i32
  %cmp695 = icmp eq i32 %conv694, 180
  br i1 %cmp695, label %if.then.697, label %if.end.699

if.then.697:                                      ; preds = %for.body.690
  %call698 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.46, i32 0, i32 0))
  store %struct.op* %call698, %struct.op** %retval
  br label %return

if.end.699:                                       ; preds = %for.body.690
  br label %for.inc.700

for.inc.700:                                      ; preds = %if.end.699
  %533 = load i32, i32* %i, align 4
  %inc701 = add nsw i32 %533, 1
  store i32 %inc701, i32* %i, align 4
  br label %for.cond.686

for.end.702:                                      ; preds = %for.cond.686
  br label %if.end.703

if.end.703:                                       ; preds = %for.end.702, %land.lhs.true.681, %land.lhs.true.678, %if.end.675
  %534 = load i32, i32* %ix, align 4
  %535 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix704 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %535, i32 0, i32 2
  %536 = load i32, i32* %si_cxix704, align 4
  %cmp705 = icmp slt i32 %534, %536
  br i1 %cmp705, label %if.then.707, label %if.end.743

if.then.707:                                      ; preds = %if.end.703
  %537 = load i32, i32* %ix, align 4
  %cmp710 = icmp slt i32 %537, 0
  br i1 %cmp710, label %if.then.712, label %if.end.713

if.then.712:                                      ; preds = %if.then.707
  store i32 0, i32* %ix, align 4
  br label %if.end.713

if.end.713:                                       ; preds = %if.then.712, %if.then.707
  %538 = load i32, i32* %ix, align 4
  call void @Perl_dounwind(i32 %538)
  %539 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix714 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %539, i32 0, i32 2
  %540 = load i32, i32* %si_cxix714, align 4
  %idxprom715 = sext i32 %540 to i64
  %541 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxstack716 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %541, i32 0, i32 1
  %542 = load %struct.context*, %struct.context** %si_cxstack716, align 8
  %arrayidx717 = getelementptr inbounds %struct.context, %struct.context* %542, i64 %idxprom715
  store %struct.context* %arrayidx717, %struct.context** %cx, align 8
  %543 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %544 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u718 = getelementptr inbounds %struct.context, %struct.context* %544, i32 0, i32 1
  %cx_blk719 = bitcast %union.anon* %cx_u718 to %struct.block*
  %blku_oldsp720 = getelementptr inbounds %struct.block, %struct.block* %cx_blk719, i32 0, i32 0
  %545 = load i32, i32* %blku_oldsp720, align 4
  %idx.ext721 = sext i32 %545 to i64
  %add.ptr722 = getelementptr inbounds %struct.sv*, %struct.sv** %543, i64 %idx.ext721
  store %struct.sv** %add.ptr722, %struct.sv*** @PL_stack_sp, align 8
  %546 = load i32*, i32** @PL_markstack, align 8
  %547 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u723 = getelementptr inbounds %struct.context, %struct.context* %547, i32 0, i32 1
  %cx_blk724 = bitcast %union.anon* %cx_u723 to %struct.block*
  %blku_oldmarksp725 = getelementptr inbounds %struct.block, %struct.block* %cx_blk724, i32 0, i32 3
  %548 = load i32, i32* %blku_oldmarksp725, align 4
  %idx.ext726 = sext i32 %548 to i64
  %add.ptr727 = getelementptr inbounds i32, i32* %546, i64 %idx.ext726
  store i32* %add.ptr727, i32** @PL_markstack_ptr, align 8
  %549 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u728 = getelementptr inbounds %struct.context, %struct.context* %549, i32 0, i32 1
  %cx_blk729 = bitcast %union.anon* %cx_u728 to %struct.block*
  %blku_oldscopesp730 = getelementptr inbounds %struct.block, %struct.block* %cx_blk729, i32 0, i32 4
  %550 = load i32, i32* %blku_oldscopesp730, align 4
  store i32 %550, i32* @PL_scopestack_ix, align 4
  %551 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u731 = getelementptr inbounds %struct.context, %struct.context* %551, i32 0, i32 1
  %cx_blk732 = bitcast %union.anon* %cx_u731 to %struct.block*
  %blku_oldretsp733 = getelementptr inbounds %struct.block, %struct.block* %cx_blk732, i32 0, i32 2
  %552 = load i32, i32* %blku_oldretsp733, align 4
  store i32 %552, i32* @PL_retstack_ix, align 4
  %553 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u734 = getelementptr inbounds %struct.context, %struct.context* %553, i32 0, i32 1
  %cx_blk735 = bitcast %union.anon* %cx_u734 to %struct.block*
  %blku_oldpm736 = getelementptr inbounds %struct.block, %struct.block* %cx_blk735, i32 0, i32 5
  %554 = load %struct.pmop*, %struct.pmop** %blku_oldpm736, align 8
  store %struct.pmop* %554, %struct.pmop** @PL_curpm, align 8
  %555 = load i32, i32* @PL_scopestack_ix, align 4
  %idxprom737 = sext i32 %555 to i64
  %556 = load i32*, i32** @PL_scopestack, align 8
  %arrayidx738 = getelementptr inbounds i32, i32* %556, i64 %idxprom737
  %557 = load i32, i32* %arrayidx738, align 4
  store i32 %557, i32* %oldsave709, align 4
  %558 = load i32, i32* @PL_savestack_ix, align 4
  %559 = load i32, i32* %oldsave709, align 4
  %cmp739 = icmp sgt i32 %558, %559
  br i1 %cmp739, label %if.then.741, label %if.end.742

if.then.741:                                      ; preds = %if.end.713
  %560 = load i32, i32* %oldsave709, align 4
  call void @Perl_leave_scope(i32 %560)
  br label %if.end.742

if.end.742:                                       ; preds = %if.then.741, %if.end.713
  br label %if.end.743

if.end.743:                                       ; preds = %if.end.742, %if.end.703
  %arraydecay744 = getelementptr inbounds [64 x %struct.op*], [64 x %struct.op*]* %enterops, i32 0, i32 0
  %561 = load %struct.op*, %struct.op** %arraydecay744, align 8
  %tobool745 = icmp ne %struct.op* %561, null
  br i1 %tobool745, label %land.lhs.true.746, label %if.end.781

land.lhs.true.746:                                ; preds = %if.end.743
  %arrayidx747 = getelementptr inbounds [64 x %struct.op*], [64 x %struct.op*]* %enterops, i32 0, i64 1
  %562 = load %struct.op*, %struct.op** %arrayidx747, align 8
  %tobool748 = icmp ne %struct.op* %562, null
  br i1 %tobool748, label %if.then.749, label %if.end.781

if.then.749:                                      ; preds = %land.lhs.true.746
  %563 = load %struct.op*, %struct.op** @PL_op, align 8
  store %struct.op* %563, %struct.op** %oldop, align 8
  %arrayidx751 = getelementptr inbounds [64 x %struct.op*], [64 x %struct.op*]* %enterops, i32 0, i64 1
  %564 = load %struct.op*, %struct.op** %arrayidx751, align 8
  %op_type752 = getelementptr inbounds %struct.op, %struct.op* %564, i32 0, i32 4
  %565 = load i16, i16* %op_type752, align 2
  %conv753 = zext i16 %565 to i32
  %cmp754 = icmp eq i32 %conv753, 177
  br i1 %cmp754, label %land.rhs.756, label %land.end.759

land.rhs.756:                                     ; preds = %if.then.749
  %566 = load i8, i8* %in_block, align 1
  %conv757 = sext i8 %566 to i32
  %tobool758 = icmp ne i32 %conv757, 0
  br label %land.end.759

land.end.759:                                     ; preds = %land.rhs.756, %if.then.749
  %567 = phi i1 [ false, %if.then.749 ], [ %tobool758, %land.rhs.756 ]
  %cond761 = select i1 %567, i32 2, i32 1
  store i32 %cond761, i32* %ix, align 4
  br label %for.cond.762

for.cond.762:                                     ; preds = %for.inc.778, %land.end.759
  %568 = load i32, i32* %ix, align 4
  %idxprom763 = sext i32 %568 to i64
  %arrayidx764 = getelementptr inbounds [64 x %struct.op*], [64 x %struct.op*]* %enterops, i32 0, i64 %idxprom763
  %569 = load %struct.op*, %struct.op** %arrayidx764, align 8
  %tobool765 = icmp ne %struct.op* %569, null
  br i1 %tobool765, label %for.body.766, label %for.end.780

for.body.766:                                     ; preds = %for.cond.762
  %570 = load i32, i32* %ix, align 4
  %idxprom767 = sext i32 %570 to i64
  %arrayidx768 = getelementptr inbounds [64 x %struct.op*], [64 x %struct.op*]* %enterops, i32 0, i64 %idxprom767
  %571 = load %struct.op*, %struct.op** %arrayidx768, align 8
  store %struct.op* %571, %struct.op** @PL_op, align 8
  %572 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type769 = getelementptr inbounds %struct.op, %struct.op* %572, i32 0, i32 4
  %573 = load i16, i16* %op_type769, align 2
  %conv770 = zext i16 %573 to i32
  %cmp771 = icmp eq i32 %conv770, 180
  br i1 %cmp771, label %if.then.773, label %if.end.775

if.then.773:                                      ; preds = %for.body.766
  %call774 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.46, i32 0, i32 0))
  store %struct.op* %call774, %struct.op** %retval
  br label %return

if.end.775:                                       ; preds = %for.body.766
  %574 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_ppaddr = getelementptr inbounds %struct.op, %struct.op* %574, i32 0, i32 2
  %op_ppaddr776 = bitcast {}** %op_ppaddr to %struct.op* ()**
  %575 = load %struct.op* ()*, %struct.op* ()** %op_ppaddr776, align 8
  %call777 = call %struct.op* %575()
  br label %for.inc.778

for.inc.778:                                      ; preds = %if.end.775
  %576 = load i32, i32* %ix, align 4
  %inc779 = add nsw i32 %576, 1
  store i32 %inc779, i32* %ix, align 4
  br label %for.cond.762

for.end.780:                                      ; preds = %for.cond.762
  %577 = load %struct.op*, %struct.op** %oldop, align 8
  store %struct.op* %577, %struct.op** @PL_op, align 8
  br label %if.end.781

if.end.781:                                       ; preds = %for.end.780, %land.lhs.true.746, %if.end.743
  br label %if.end.782

if.end.782:                                       ; preds = %if.end.781, %land.lhs.true.587, %if.end.585
  %578 = load i32, i32* %do_dump, align 4
  %tobool783 = icmp ne i32 %578, 0
  br i1 %tobool783, label %if.then.784, label %if.end.785

if.then.784:                                      ; preds = %if.end.782
  %579 = load %struct.op*, %struct.op** %retop, align 8
  store %struct.op* %579, %struct.op** @PL_restartop, align 8
  store i8 1, i8* @PL_do_undump, align 1
  call void @Perl_my_unexec()
  store %struct.op* null, %struct.op** @PL_restartop, align 8
  store i8 0, i8* @PL_do_undump, align 1
  br label %if.end.785

if.end.785:                                       ; preds = %if.then.784, %if.end.782
  %580 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %580, %struct.sv*** @PL_stack_sp, align 8
  %581 = load %struct.op*, %struct.op** %retop, align 8
  store %struct.op* %581, %struct.op** %retval
  br label %return

return:                                           ; preds = %if.end.785, %if.then.773, %if.then.697, %if.then.673, %if.then.656, %sw.bb.653, %if.then.580, %if.then.569, %if.end.554, %if.end.231, %if.then.78, %if.then.56, %if.end.44, %if.end.41
  %582 = load %struct.op*, %struct.op** %retval
  ret %struct.op* %582
}

declare %struct.gv* @Perl_gv_autoload4(%struct.hv*, i8*, i64, i32) #1

declare %struct.sv* @Perl_sv_newmortal() #1

declare void @Perl_markstack_grow() #1

declare void @Perl_sub_crush_depth(%struct.cv*) #1

declare void @Perl_pad_push(%struct.av*, i32, i32) #1

declare void @Perl_save_iv(i64*) #1

declare void @Perl_save_item(%struct.sv*) #1

declare %struct.cv* @Perl_get_cv(i8*, i32) #1

declare i32 @Perl_call_sv(%struct.sv*, i32) #1

; Function Attrs: nounwind uwtable
define internal %struct.op* @S_dofindlabel(%struct.op* %o, i8* %label, %struct.op** %opstack, %struct.op** %oplimit) #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %o.addr = alloca %struct.op*, align 8
  %label.addr = alloca i8*, align 8
  %opstack.addr = alloca %struct.op**, align 8
  %oplimit.addr = alloca %struct.op**, align 8
  %kid = alloca %struct.op*, align 8
  %ops = alloca %struct.op**, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  store i8* %label, i8** %label.addr, align 8
  store %struct.op** %opstack, %struct.op*** %opstack.addr, align 8
  store %struct.op** %oplimit, %struct.op*** %oplimit.addr, align 8
  store %struct.op* null, %struct.op** %kid, align 8
  %0 = load %struct.op**, %struct.op*** %opstack.addr, align 8
  store %struct.op** %0, %struct.op*** %ops, align 8
  %1 = load %struct.op**, %struct.op*** %ops, align 8
  %2 = load %struct.op**, %struct.op*** %oplimit.addr, align 8
  %cmp = icmp uge %struct.op** %1, %2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @S_dofindlabel.too_deep, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %3, i32 0, i32 4
  %4 = load i16, i16* %op_type, align 2
  %conv = zext i16 %4 to i32
  %cmp1 = icmp eq i32 %conv, 178
  br i1 %cmp1, label %if.then.22, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %5 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type3 = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 4
  %6 = load i16, i16* %op_type3, align 2
  %conv4 = zext i16 %6 to i32
  %cmp5 = icmp eq i32 %conv4, 179
  br i1 %cmp5, label %if.then.22, label %lor.lhs.false.7

lor.lhs.false.7:                                  ; preds = %lor.lhs.false
  %7 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type8 = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 4
  %8 = load i16, i16* %op_type8, align 2
  %conv9 = zext i16 %8 to i32
  %cmp10 = icmp eq i32 %conv9, 183
  br i1 %cmp10, label %if.then.22, label %lor.lhs.false.12

lor.lhs.false.12:                                 ; preds = %lor.lhs.false.7
  %9 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type13 = getelementptr inbounds %struct.op, %struct.op* %9, i32 0, i32 4
  %10 = load i16, i16* %op_type13, align 2
  %conv14 = zext i16 %10 to i32
  %cmp15 = icmp eq i32 %conv14, 167
  br i1 %cmp15, label %if.then.22, label %lor.lhs.false.17

lor.lhs.false.17:                                 ; preds = %lor.lhs.false.12
  %11 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type18 = getelementptr inbounds %struct.op, %struct.op* %11, i32 0, i32 4
  %12 = load i16, i16* %op_type18, align 2
  %conv19 = zext i16 %12 to i32
  %cmp20 = icmp eq i32 %conv19, 314
  br i1 %cmp20, label %if.then.22, label %if.end.27

if.then.22:                                       ; preds = %lor.lhs.false.17, %lor.lhs.false.12, %lor.lhs.false.7, %lor.lhs.false, %if.end
  %13 = load %struct.op*, %struct.op** %o.addr, align 8
  %14 = bitcast %struct.op* %13 to %struct.unop*
  %op_first = getelementptr inbounds %struct.unop, %struct.unop* %14, i32 0, i32 8
  %15 = load %struct.op*, %struct.op** %op_first, align 8
  %16 = load %struct.op**, %struct.op*** %ops, align 8
  %incdec.ptr = getelementptr inbounds %struct.op*, %struct.op** %16, i32 1
  store %struct.op** %incdec.ptr, %struct.op*** %ops, align 8
  store %struct.op* %15, %struct.op** %16, align 8
  %17 = load %struct.op**, %struct.op*** %ops, align 8
  %18 = load %struct.op**, %struct.op*** %oplimit.addr, align 8
  %cmp23 = icmp uge %struct.op** %17, %18
  br i1 %cmp23, label %if.then.25, label %if.end.26

if.then.25:                                       ; preds = %if.then.22
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @S_dofindlabel.too_deep, i32 0, i32 0))
  br label %if.end.26

if.end.26:                                        ; preds = %if.then.25, %if.then.22
  br label %if.end.27

if.end.27:                                        ; preds = %if.end.26, %lor.lhs.false.17
  %19 = load %struct.op**, %struct.op*** %ops, align 8
  store %struct.op* null, %struct.op** %19, align 8
  %20 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %20, i32 0, i32 6
  %21 = load i8, i8* %op_flags, align 1
  %conv28 = zext i8 %21 to i32
  %and = and i32 %conv28, 4
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then.29, label %if.end.93

if.then.29:                                       ; preds = %if.end.27
  %22 = load %struct.op*, %struct.op** %o.addr, align 8
  %23 = bitcast %struct.op* %22 to %struct.unop*
  %op_first30 = getelementptr inbounds %struct.unop, %struct.unop* %23, i32 0, i32 8
  %24 = load %struct.op*, %struct.op** %op_first30, align 8
  store %struct.op* %24, %struct.op** %kid, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.29
  %25 = load %struct.op*, %struct.op** %kid, align 8
  %tobool31 = icmp ne %struct.op* %25, null
  br i1 %tobool31, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %26 = load %struct.op*, %struct.op** %kid, align 8
  %op_type32 = getelementptr inbounds %struct.op, %struct.op* %26, i32 0, i32 4
  %27 = load i16, i16* %op_type32, align 2
  %conv33 = zext i16 %27 to i32
  %cmp34 = icmp eq i32 %conv33, 174
  br i1 %cmp34, label %land.lhs.true, label %lor.lhs.false.36

lor.lhs.false.36:                                 ; preds = %for.body
  %28 = load %struct.op*, %struct.op** %kid, align 8
  %op_type37 = getelementptr inbounds %struct.op, %struct.op* %28, i32 0, i32 4
  %29 = load i16, i16* %op_type37, align 2
  %conv38 = zext i16 %29 to i32
  %cmp39 = icmp eq i32 %conv38, 175
  br i1 %cmp39, label %land.lhs.true, label %if.end.46

land.lhs.true:                                    ; preds = %lor.lhs.false.36, %for.body
  %30 = load %struct.op*, %struct.op** %kid, align 8
  %31 = bitcast %struct.op* %30 to %struct.cop*
  %cop_label = getelementptr inbounds %struct.cop, %struct.cop* %31, i32 0, i32 8
  %32 = load i8*, i8** %cop_label, align 8
  %tobool41 = icmp ne i8* %32, null
  br i1 %tobool41, label %land.lhs.true.42, label %if.end.46

land.lhs.true.42:                                 ; preds = %land.lhs.true
  %33 = load %struct.op*, %struct.op** %kid, align 8
  %34 = bitcast %struct.op* %33 to %struct.cop*
  %cop_label43 = getelementptr inbounds %struct.cop, %struct.cop* %34, i32 0, i32 8
  %35 = load i8*, i8** %cop_label43, align 8
  %36 = load i8*, i8** %label.addr, align 8
  %call = call i32 @strcmp(i8* %35, i8* %36)
  %tobool44 = icmp ne i32 %call, 0
  br i1 %tobool44, label %if.end.46, label %if.then.45

if.then.45:                                       ; preds = %land.lhs.true.42
  %37 = load %struct.op*, %struct.op** %kid, align 8
  store %struct.op* %37, %struct.op** %retval
  br label %return

if.end.46:                                        ; preds = %land.lhs.true.42, %land.lhs.true, %lor.lhs.false.36
  br label %for.inc

for.inc:                                          ; preds = %if.end.46
  %38 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %38, i32 0, i32 1
  %39 = load %struct.op*, %struct.op** %op_sibling, align 8
  store %struct.op* %39, %struct.op** %kid, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %40 = load %struct.op*, %struct.op** %o.addr, align 8
  %41 = bitcast %struct.op* %40 to %struct.unop*
  %op_first47 = getelementptr inbounds %struct.unop, %struct.unop* %41, i32 0, i32 8
  %42 = load %struct.op*, %struct.op** %op_first47, align 8
  store %struct.op* %42, %struct.op** %kid, align 8
  br label %for.cond.48

for.cond.48:                                      ; preds = %for.inc.90, %for.end
  %43 = load %struct.op*, %struct.op** %kid, align 8
  %tobool49 = icmp ne %struct.op* %43, null
  br i1 %tobool49, label %for.body.50, label %for.end.92

for.body.50:                                      ; preds = %for.cond.48
  %44 = load %struct.op*, %struct.op** %kid, align 8
  %45 = load %struct.op*, %struct.op** @PL_lastgotoprobe, align 8
  %cmp51 = icmp eq %struct.op* %44, %45
  br i1 %cmp51, label %if.then.53, label %if.end.54

if.then.53:                                       ; preds = %for.body.50
  br label %for.inc.90

if.end.54:                                        ; preds = %for.body.50
  %46 = load %struct.op*, %struct.op** %kid, align 8
  %op_type55 = getelementptr inbounds %struct.op, %struct.op* %46, i32 0, i32 4
  %47 = load i16, i16* %op_type55, align 2
  %conv56 = zext i16 %47 to i32
  %cmp57 = icmp eq i32 %conv56, 174
  br i1 %cmp57, label %if.then.64, label %lor.lhs.false.59

lor.lhs.false.59:                                 ; preds = %if.end.54
  %48 = load %struct.op*, %struct.op** %kid, align 8
  %op_type60 = getelementptr inbounds %struct.op, %struct.op* %48, i32 0, i32 4
  %49 = load i16, i16* %op_type60, align 2
  %conv61 = zext i16 %49 to i32
  %cmp62 = icmp eq i32 %conv61, 175
  br i1 %cmp62, label %if.then.64, label %if.end.85

if.then.64:                                       ; preds = %lor.lhs.false.59, %if.end.54
  %50 = load %struct.op**, %struct.op*** %ops, align 8
  %51 = load %struct.op**, %struct.op*** %opstack.addr, align 8
  %cmp65 = icmp eq %struct.op** %50, %51
  br i1 %cmp65, label %if.then.67, label %if.else

if.then.67:                                       ; preds = %if.then.64
  %52 = load %struct.op*, %struct.op** %kid, align 8
  %53 = load %struct.op**, %struct.op*** %ops, align 8
  %incdec.ptr68 = getelementptr inbounds %struct.op*, %struct.op** %53, i32 1
  store %struct.op** %incdec.ptr68, %struct.op*** %ops, align 8
  store %struct.op* %52, %struct.op** %53, align 8
  br label %if.end.84

if.else:                                          ; preds = %if.then.64
  %54 = load %struct.op**, %struct.op*** %ops, align 8
  %arrayidx = getelementptr inbounds %struct.op*, %struct.op** %54, i64 -1
  %55 = load %struct.op*, %struct.op** %arrayidx, align 8
  %op_type69 = getelementptr inbounds %struct.op, %struct.op* %55, i32 0, i32 4
  %56 = load i16, i16* %op_type69, align 2
  %conv70 = zext i16 %56 to i32
  %cmp71 = icmp eq i32 %conv70, 174
  br i1 %cmp71, label %if.then.79, label %lor.lhs.false.73

lor.lhs.false.73:                                 ; preds = %if.else
  %57 = load %struct.op**, %struct.op*** %ops, align 8
  %arrayidx74 = getelementptr inbounds %struct.op*, %struct.op** %57, i64 -1
  %58 = load %struct.op*, %struct.op** %arrayidx74, align 8
  %op_type75 = getelementptr inbounds %struct.op, %struct.op* %58, i32 0, i32 4
  %59 = load i16, i16* %op_type75, align 2
  %conv76 = zext i16 %59 to i32
  %cmp77 = icmp eq i32 %conv76, 175
  br i1 %cmp77, label %if.then.79, label %if.else.81

if.then.79:                                       ; preds = %lor.lhs.false.73, %if.else
  %60 = load %struct.op*, %struct.op** %kid, align 8
  %61 = load %struct.op**, %struct.op*** %ops, align 8
  %arrayidx80 = getelementptr inbounds %struct.op*, %struct.op** %61, i64 -1
  store %struct.op* %60, %struct.op** %arrayidx80, align 8
  br label %if.end.83

if.else.81:                                       ; preds = %lor.lhs.false.73
  %62 = load %struct.op*, %struct.op** %kid, align 8
  %63 = load %struct.op**, %struct.op*** %ops, align 8
  %incdec.ptr82 = getelementptr inbounds %struct.op*, %struct.op** %63, i32 1
  store %struct.op** %incdec.ptr82, %struct.op*** %ops, align 8
  store %struct.op* %62, %struct.op** %63, align 8
  br label %if.end.83

if.end.83:                                        ; preds = %if.else.81, %if.then.79
  br label %if.end.84

if.end.84:                                        ; preds = %if.end.83, %if.then.67
  br label %if.end.85

if.end.85:                                        ; preds = %if.end.84, %lor.lhs.false.59
  %64 = load %struct.op*, %struct.op** %kid, align 8
  %65 = load i8*, i8** %label.addr, align 8
  %66 = load %struct.op**, %struct.op*** %ops, align 8
  %67 = load %struct.op**, %struct.op*** %oplimit.addr, align 8
  %call86 = call %struct.op* @S_dofindlabel(%struct.op* %64, i8* %65, %struct.op** %66, %struct.op** %67)
  store %struct.op* %call86, %struct.op** %o.addr, align 8
  %tobool87 = icmp ne %struct.op* %call86, null
  br i1 %tobool87, label %if.then.88, label %if.end.89

if.then.88:                                       ; preds = %if.end.85
  %68 = load %struct.op*, %struct.op** %o.addr, align 8
  store %struct.op* %68, %struct.op** %retval
  br label %return

if.end.89:                                        ; preds = %if.end.85
  br label %for.inc.90

for.inc.90:                                       ; preds = %if.end.89, %if.then.53
  %69 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling91 = getelementptr inbounds %struct.op, %struct.op* %69, i32 0, i32 1
  %70 = load %struct.op*, %struct.op** %op_sibling91, align 8
  store %struct.op* %70, %struct.op** %kid, align 8
  br label %for.cond.48

for.end.92:                                       ; preds = %for.cond.48
  br label %if.end.93

if.end.93:                                        ; preds = %for.end.92, %if.end.27
  %71 = load %struct.op**, %struct.op*** %ops, align 8
  store %struct.op* null, %struct.op** %71, align 8
  store %struct.op* null, %struct.op** %retval
  br label %return

return:                                           ; preds = %if.end.93, %if.then.88, %if.then.45
  %72 = load %struct.op*, %struct.op** %retval
  ret %struct.op* %72
}

declare void @Perl_my_unexec() #1

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_exit() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %anum = alloca i32, align 4
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 7
  %2 = load i8, i8* %op_private, align 1
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 15
  %cmp = icmp slt i32 %and, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 0, i32* %anum, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %3 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %3, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %4 = load %struct.sv*, %struct.sv** %3, align 8
  store %struct.sv* %4, %struct.sv** @PL_Sv, align 8
  %5 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 2
  %6 = load i32, i32* %sv_flags, align 4
  %and2 = and i32 %6, 65536
  %tobool = icmp ne i32 %and2, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else
  %7 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 0
  %8 = load i8*, i8** %sv_any, align 8
  %9 = bitcast i8* %8 to %struct.xpviv*
  %xiv_iv = getelementptr inbounds %struct.xpviv, %struct.xpviv* %9, i32 0, i32 3
  %10 = load i64, i64* %xiv_iv, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.else
  %11 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %call = call i64 @Perl_sv_2iv(%struct.sv* %11)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %10, %cond.true ], [ %call, %cond.false ]
  %conv3 = trunc i64 %cond to i32
  store i32 %conv3, i32* %anum, align 4
  br label %if.end

if.end:                                           ; preds = %cond.end, %if.then
  %12 = load i8, i8* @PL_exit_flags, align 1
  %conv4 = zext i8 %12 to i32
  %or = or i32 %conv4, 1
  %conv5 = trunc i32 %or to i8
  store i8 %conv5, i8* @PL_exit_flags, align 1
  %13 = load i32, i32* %anum, align 4
  call void @Perl_my_exit(i32 %13)
  %14 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr6 = getelementptr inbounds %struct.sv*, %struct.sv** %14, i32 1
  store %struct.sv** %incdec.ptr6, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %incdec.ptr6, align 8
  %15 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %15, %struct.sv*** @PL_stack_sp, align 8
  %16 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %16, i32 0, i32 0
  %17 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %17
}

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_sv_compile_2op(%struct.sv* %sv, %struct.op** %startop, i8* %code, %struct.av** %padp) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %startop.addr = alloca %struct.op**, align 8
  %code.addr = alloca i8*, align 8
  %padp.addr = alloca %struct.av**, align 8
  %sp = alloca %struct.sv**, align 8
  %cx = alloca %struct.context*, align 8
  %newsp = alloca %struct.sv**, align 8
  %gimme = alloca i32, align 4
  %optype = alloca i32, align 4
  %dummy = alloca %struct.op, align 8
  %rop = alloca %struct.op*, align 8
  %tbuf = alloca [42 x i8], align 16
  %tmpbuf = alloca i8*, align 8
  %safestr = alloca i8*, align 8
  %runtime = alloca i32, align 4
  %runcv = alloca %struct.cv*, align 8
  %sv5 = alloca %struct.sv*, align 8
  %tmp = alloca i32, align 4
  %tmp123 = alloca %struct.cv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store %struct.op** %startop, %struct.op*** %startop.addr, align 8
  store i8* %code, i8** %code.addr, align 8
  store %struct.av** %padp, %struct.av*** %padp.addr, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  store i32 0, i32* %gimme, align 4
  %arraydecay = getelementptr inbounds [42 x i8], [42 x i8]* %tbuf, i32 0, i32 0
  store i8* %arraydecay, i8** %tmpbuf, align 8
  store %struct.cv* null, %struct.cv** %runcv, align 8
  call void @Perl_push_scope()
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_lex_start(%struct.sv* %1)
  call void @Perl_save_int(i32* @PL_tmps_floor)
  %2 = load i32, i32* @PL_tmps_ix, align 4
  store i32 %2, i32* @PL_tmps_floor, align 4
  %3 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cmp = icmp eq %struct.cop* %3, @PL_compiling
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @Perl_save_sptr(%struct.sv** bitcast (%struct.hv** getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 9) to %struct.sv**))
  %4 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  store %struct.hv* %4, %struct.hv** getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 9), align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load i32, i32* @PL_perldb, align 4
  %tobool = icmp ne i32 %5, 0
  br i1 %tobool, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.end
  %6 = load i32, i32* @PL_perldb, align 4
  %and = and i32 %6, 256
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %land.lhs.true.2, label %if.else

land.lhs.true.2:                                  ; preds = %land.lhs.true
  %7 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_line = getelementptr inbounds %struct.cop, %struct.cop* %7, i32 0, i32 13
  %8 = load i32, i32* %cop_line, align 4
  %tobool3 = icmp ne i32 %8, 0
  br i1 %tobool3, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %land.lhs.true.2
  %call = call %struct.sv* @Perl_sv_newmortal()
  store %struct.sv* %call, %struct.sv** %sv5, align 8
  %9 = load %struct.sv*, %struct.sv** %sv5, align 8
  %10 = load i8*, i8** %code.addr, align 8
  %11 = load i32, i32* @PL_evalseq, align 4
  %inc = add i32 %11, 1
  store i32 %inc, i32* @PL_evalseq, align 4
  %conv = zext i32 %inc to i64
  %12 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_filegv = getelementptr inbounds %struct.cop, %struct.cop* %12, i32 0, i32 10
  %13 = load %struct.gv*, %struct.gv** %cop_filegv, align 8
  %tobool6 = icmp ne %struct.gv* %13, null
  br i1 %tobool6, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.4
  %14 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_filegv7 = getelementptr inbounds %struct.cop, %struct.cop* %14, i32 0, i32 10
  %15 = load %struct.gv*, %struct.gv** %cop_filegv7, align 8
  %sv_any = getelementptr inbounds %struct.gv, %struct.gv* %15, i32 0, i32 0
  %16 = load %struct.xpvgv*, %struct.xpvgv** %sv_any, align 8
  %xgv_gp = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %16, i32 0, i32 7
  %17 = load %struct.gp*, %struct.gp** %xgv_gp, align 8
  %gp_sv = getelementptr inbounds %struct.gp, %struct.gp* %17, i32 0, i32 0
  %18 = load %struct.sv*, %struct.sv** %gp_sv, align 8
  %tobool8 = icmp ne %struct.sv* %18, null
  br i1 %tobool8, label %cond.true.9, label %cond.false.19

cond.false:                                       ; preds = %if.then.4
  br i1 false, label %cond.true.9, label %cond.false.19

cond.true.9:                                      ; preds = %cond.false, %cond.true
  %19 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_filegv10 = getelementptr inbounds %struct.cop, %struct.cop* %19, i32 0, i32 10
  %20 = load %struct.gv*, %struct.gv** %cop_filegv10, align 8
  %tobool11 = icmp ne %struct.gv* %20, null
  br i1 %tobool11, label %cond.true.12, label %cond.false.17

cond.true.12:                                     ; preds = %cond.true.9
  %21 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_filegv13 = getelementptr inbounds %struct.cop, %struct.cop* %21, i32 0, i32 10
  %22 = load %struct.gv*, %struct.gv** %cop_filegv13, align 8
  %sv_any14 = getelementptr inbounds %struct.gv, %struct.gv* %22, i32 0, i32 0
  %23 = load %struct.xpvgv*, %struct.xpvgv** %sv_any14, align 8
  %xgv_gp15 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %23, i32 0, i32 7
  %24 = load %struct.gp*, %struct.gp** %xgv_gp15, align 8
  %gp_sv16 = getelementptr inbounds %struct.gp, %struct.gp* %24, i32 0, i32 0
  %25 = load %struct.sv*, %struct.sv** %gp_sv16, align 8
  br label %cond.end

cond.false.17:                                    ; preds = %cond.true.9
  br label %cond.end

cond.end:                                         ; preds = %cond.false.17, %cond.true.12
  %cond = phi %struct.sv* [ %25, %cond.true.12 ], [ null, %cond.false.17 ]
  %sv_any18 = getelementptr inbounds %struct.sv, %struct.sv* %cond, i32 0, i32 0
  %26 = load i8*, i8** %sv_any18, align 8
  %27 = bitcast i8* %26 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %27, i32 0, i32 0
  %28 = load i8*, i8** %xpv_pv, align 8
  br label %cond.end.20

cond.false.19:                                    ; preds = %cond.false, %cond.true
  br label %cond.end.20

cond.end.20:                                      ; preds = %cond.false.19, %cond.end
  %cond21 = phi i8* [ %28, %cond.end ], [ null, %cond.false.19 ]
  %29 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_line22 = getelementptr inbounds %struct.cop, %struct.cop* %29, i32 0, i32 13
  %30 = load i32, i32* %cop_line22, align 4
  %conv23 = zext i32 %30 to i64
  call void (%struct.sv*, i8*, ...) @Perl_sv_setpvf(%struct.sv* %9, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.47, i32 0, i32 0), i8* %10, i64 %conv, i8* %cond21, i64 %conv23)
  %31 = load %struct.sv*, %struct.sv** %sv5, align 8
  %sv_any24 = getelementptr inbounds %struct.sv, %struct.sv* %31, i32 0, i32 0
  %32 = load i8*, i8** %sv_any24, align 8
  %33 = bitcast i8* %32 to %struct.xpv*
  %xpv_pv25 = getelementptr inbounds %struct.xpv, %struct.xpv* %33, i32 0, i32 0
  %34 = load i8*, i8** %xpv_pv25, align 8
  store i8* %34, i8** %tmpbuf, align 8
  br label %if.end.29

if.else:                                          ; preds = %land.lhs.true.2, %land.lhs.true, %if.end
  %35 = load i8*, i8** %tmpbuf, align 8
  %36 = load i8*, i8** %code.addr, align 8
  %37 = load i32, i32* @PL_evalseq, align 4
  %inc26 = add i32 %37, 1
  store i32 %inc26, i32* @PL_evalseq, align 4
  %conv27 = zext i32 %inc26 to i64
  %call28 = call i32 (i8*, i8*, ...) @sprintf(i8* %35, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.48, i32 0, i32 0), i8* %36, i64 %conv27)
  br label %if.end.29

if.end.29:                                        ; preds = %if.else, %cond.end.20
  call void @Perl_save_generic_svref(%struct.sv** bitcast (%struct.gv** getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10) to %struct.sv**))
  %38 = load i8*, i8** %tmpbuf, align 8
  %add.ptr = getelementptr inbounds i8, i8* %38, i64 2
  %call30 = call %struct.gv* @Perl_gv_fetchfile(i8* %add.ptr)
  %39 = bitcast %struct.gv* %call30 to %struct.sv*
  store %struct.sv* %39, %struct.sv** @PL_Sv, align 8
  %40 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %tobool31 = icmp ne %struct.sv* %40, null
  br i1 %tobool31, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.end.29
  %41 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %41, i32 0, i32 1
  %42 = load i32, i32* %sv_refcnt, align 4
  %inc32 = add i32 %42, 1
  store i32 %inc32, i32* %sv_refcnt, align 4
  %tobool33 = icmp ne i32 %inc32, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end.29
  %43 = phi i1 [ false, %if.end.29 ], [ %tobool33, %land.rhs ]
  %land.ext = zext i1 %43 to i32
  %44 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %45 = bitcast %struct.sv* %44 to %struct.gv*
  store %struct.gv* %45, %struct.gv** getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  call void @Perl_save_I32(i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 13))
  store i32 1, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 13), align 4
  %46 = load i8*, i8** %tmpbuf, align 8
  %call34 = call i8* @Perl_savepv(i8* %46)
  store i8* %call34, i8** %safestr, align 8
  %47 = load %struct.hv*, %struct.hv** @PL_defstash, align 8
  %48 = load i8*, i8** %safestr, align 8
  %49 = load i8*, i8** %safestr, align 8
  %call35 = call i64 @strlen(i8* %49)
  %conv36 = trunc i64 %call35 to i32
  call void @Perl_save_delete(%struct.hv* %47, i8* %48, i32 %conv36)
  %50 = load i32, i32* @PL_savestack_ix, align 4
  %add = add nsw i32 %50, 3
  %51 = load i32, i32* @PL_savestack_max, align 4
  %cmp37 = icmp sgt i32 %add, %51
  br i1 %cmp37, label %if.then.39, label %if.end.40

if.then.39:                                       ; preds = %land.end
  call void @Perl_savestack_grow()
  br label %if.end.40

if.end.40:                                        ; preds = %if.then.39, %land.end
  %52 = load i32, i32* @PL_hints, align 4
  %and41 = and i32 %52, 131072
  %tobool42 = icmp ne i32 %and41, 0
  br i1 %tobool42, label %if.then.43, label %if.end.54

if.then.43:                                       ; preds = %if.end.40
  %53 = load %struct.gv*, %struct.gv** @PL_hintgv, align 8
  %sv_any44 = getelementptr inbounds %struct.gv, %struct.gv* %53, i32 0, i32 0
  %54 = load %struct.xpvgv*, %struct.xpvgv** %sv_any44, align 8
  %xgv_gp45 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %54, i32 0, i32 7
  %55 = load %struct.gp*, %struct.gp** %xgv_gp45, align 8
  %gp_hv = getelementptr inbounds %struct.gp, %struct.gp* %55, i32 0, i32 5
  %56 = load %struct.hv*, %struct.hv** %gp_hv, align 8
  %57 = bitcast %struct.hv* %56 to i8*
  %58 = load i32, i32* @PL_savestack_ix, align 4
  %inc46 = add nsw i32 %58, 1
  store i32 %inc46, i32* @PL_savestack_ix, align 4
  %idxprom = sext i32 %58 to i64
  %59 = load %union.any*, %union.any** @PL_savestack, align 8
  %arrayidx = getelementptr inbounds %union.any, %union.any* %59, i64 %idxprom
  %any_ptr = bitcast %union.any* %arrayidx to i8**
  store i8* %57, i8** %any_ptr, align 8
  %60 = load %struct.gv*, %struct.gv** @PL_hintgv, align 8
  %sv_any47 = getelementptr inbounds %struct.gv, %struct.gv* %60, i32 0, i32 0
  %61 = load %struct.xpvgv*, %struct.xpvgv** %sv_any47, align 8
  %xgv_gp48 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %61, i32 0, i32 7
  %62 = load %struct.gp*, %struct.gp** %xgv_gp48, align 8
  %gp_hv49 = getelementptr inbounds %struct.gp, %struct.gp* %62, i32 0, i32 5
  %63 = load %struct.hv*, %struct.hv** %gp_hv49, align 8
  %call50 = call %struct.hv* @Perl_newHVhv(%struct.hv* %63)
  %64 = load %struct.gv*, %struct.gv** @PL_hintgv, align 8
  %sv_any51 = getelementptr inbounds %struct.gv, %struct.gv* %64, i32 0, i32 0
  %65 = load %struct.xpvgv*, %struct.xpvgv** %sv_any51, align 8
  %xgv_gp52 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %65, i32 0, i32 7
  %66 = load %struct.gp*, %struct.gp** %xgv_gp52, align 8
  %gp_hv53 = getelementptr inbounds %struct.gp, %struct.gp* %66, i32 0, i32 5
  store %struct.hv* %call50, %struct.hv** %gp_hv53, align 8
  br label %if.end.54

if.end.54:                                        ; preds = %if.then.43, %if.end.40
  %67 = load i32, i32* @PL_hints, align 4
  %68 = load i32, i32* @PL_savestack_ix, align 4
  %inc55 = add nsw i32 %68, 1
  store i32 %inc55, i32* @PL_savestack_ix, align 4
  %idxprom56 = sext i32 %68 to i64
  %69 = load %union.any*, %union.any** @PL_savestack, align 8
  %arrayidx57 = getelementptr inbounds %union.any, %union.any* %69, i64 %idxprom56
  %any_i32 = bitcast %union.any* %arrayidx57 to i32*
  store i32 %67, i32* %any_i32, align 4
  %70 = load i32, i32* @PL_savestack_ix, align 4
  %inc58 = add nsw i32 %70, 1
  store i32 %inc58, i32* @PL_savestack_ix, align 4
  %idxprom59 = sext i32 %70 to i64
  %71 = load %union.any*, %union.any** @PL_savestack, align 8
  %arrayidx60 = getelementptr inbounds %union.any, %union.any* %71, i64 %idxprom59
  %any_i3261 = bitcast %union.any* %arrayidx60 to i32*
  store i32 27, i32* %any_i3261, align 4
  store i32 27, i32* %tmp
  %72 = load i32, i32* %tmp
  call void @Perl_save_vptr(i8* bitcast (%struct.op** @PL_op to i8*))
  %73 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cmp62 = icmp ne %struct.cop* %73, @PL_compiling
  %conv63 = zext i1 %cmp62 to i32
  store i32 %conv63, i32* %runtime, align 4
  %74 = load i32, i32* %runtime, align 4
  %tobool64 = icmp ne i32 %74, 0
  br i1 %tobool64, label %if.then.65, label %if.end.67

if.then.65:                                       ; preds = %if.end.54
  %call66 = call %struct.cv* @Perl_find_runcv(i32* null)
  store %struct.cv* %call66, %struct.cv** %runcv, align 8
  br label %if.end.67

if.end.67:                                        ; preds = %if.then.65, %if.end.54
  store %struct.op* %dummy, %struct.op** @PL_op, align 8
  %75 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %75, i32 0, i32 4
  store i16 311, i16* %op_type, align 2
  %76 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %76, i32 0, i32 6
  store i8 0, i8* %op_flags, align 1
  %77 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %77, i32 0, i32 2
  %78 = load i32, i32* %si_cxix, align 4
  %79 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxmax = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %79, i32 0, i32 3
  %80 = load i32, i32* %si_cxmax, align 4
  %cmp68 = icmp slt i32 %78, %80
  br i1 %cmp68, label %cond.true.70, label %cond.false.73

cond.true.70:                                     ; preds = %if.end.67
  %81 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix71 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %81, i32 0, i32 2
  %82 = load i32, i32* %si_cxix71, align 4
  %inc72 = add nsw i32 %82, 1
  store i32 %inc72, i32* %si_cxix71, align 4
  br label %cond.end.76

cond.false.73:                                    ; preds = %if.end.67
  %call74 = call i32 @Perl_cxinc()
  %83 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix75 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %83, i32 0, i32 2
  store i32 %call74, i32* %si_cxix75, align 4
  br label %cond.end.76

cond.end.76:                                      ; preds = %cond.false.73, %cond.true.70
  %cond77 = phi i32 [ %inc72, %cond.true.70 ], [ %call74, %cond.false.73 ]
  %84 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix78 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %84, i32 0, i32 2
  %85 = load i32, i32* %si_cxix78, align 4
  %idxprom79 = sext i32 %85 to i64
  %86 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxstack = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %86, i32 0, i32 1
  %87 = load %struct.context*, %struct.context** %si_cxstack, align 8
  %arrayidx80 = getelementptr inbounds %struct.context, %struct.context* %87, i64 %idxprom79
  store %struct.context* %arrayidx80, %struct.context** %cx, align 8
  %88 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cmp81 = icmp eq %struct.cop* %88, @PL_compiling
  %cond83 = select i1 %cmp81, i32 0, i32 256
  %or = or i32 2, %cond83
  %89 = load %struct.context*, %struct.context** %cx, align 8
  %cx_type = getelementptr inbounds %struct.context, %struct.context* %89, i32 0, i32 0
  store i32 %or, i32* %cx_type, align 4
  %90 = load %struct.sv**, %struct.sv*** %sp, align 8
  %91 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %90 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %91 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %conv84 = trunc i64 %sub.ptr.div to i32
  %92 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u = getelementptr inbounds %struct.context, %struct.context* %92, i32 0, i32 1
  %cx_blk = bitcast %union.anon* %cx_u to %struct.block*
  %blku_oldsp = getelementptr inbounds %struct.block, %struct.block* %cx_blk, i32 0, i32 0
  store i32 %conv84, i32* %blku_oldsp, align 4
  %93 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %94 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u85 = getelementptr inbounds %struct.context, %struct.context* %94, i32 0, i32 1
  %cx_blk86 = bitcast %union.anon* %cx_u85 to %struct.block*
  %blku_oldcop = getelementptr inbounds %struct.block, %struct.block* %cx_blk86, i32 0, i32 1
  store %struct.cop* %93, %struct.cop** %blku_oldcop, align 8
  %95 = load i32*, i32** @PL_markstack_ptr, align 8
  %96 = load i32*, i32** @PL_markstack, align 8
  %sub.ptr.lhs.cast87 = ptrtoint i32* %95 to i64
  %sub.ptr.rhs.cast88 = ptrtoint i32* %96 to i64
  %sub.ptr.sub89 = sub i64 %sub.ptr.lhs.cast87, %sub.ptr.rhs.cast88
  %sub.ptr.div90 = sdiv exact i64 %sub.ptr.sub89, 4
  %conv91 = trunc i64 %sub.ptr.div90 to i32
  %97 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u92 = getelementptr inbounds %struct.context, %struct.context* %97, i32 0, i32 1
  %cx_blk93 = bitcast %union.anon* %cx_u92 to %struct.block*
  %blku_oldmarksp = getelementptr inbounds %struct.block, %struct.block* %cx_blk93, i32 0, i32 3
  store i32 %conv91, i32* %blku_oldmarksp, align 4
  %98 = load i32, i32* @PL_scopestack_ix, align 4
  %99 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u94 = getelementptr inbounds %struct.context, %struct.context* %99, i32 0, i32 1
  %cx_blk95 = bitcast %union.anon* %cx_u94 to %struct.block*
  %blku_oldscopesp = getelementptr inbounds %struct.block, %struct.block* %cx_blk95, i32 0, i32 4
  store i32 %98, i32* %blku_oldscopesp, align 4
  %100 = load i32, i32* @PL_retstack_ix, align 4
  %101 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u96 = getelementptr inbounds %struct.context, %struct.context* %101, i32 0, i32 1
  %cx_blk97 = bitcast %union.anon* %cx_u96 to %struct.block*
  %blku_oldretsp = getelementptr inbounds %struct.block, %struct.block* %cx_blk97, i32 0, i32 2
  store i32 %100, i32* %blku_oldretsp, align 4
  %102 = load %struct.pmop*, %struct.pmop** @PL_curpm, align 8
  %103 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u98 = getelementptr inbounds %struct.context, %struct.context* %103, i32 0, i32 1
  %cx_blk99 = bitcast %union.anon* %cx_u98 to %struct.block*
  %blku_oldpm = getelementptr inbounds %struct.block, %struct.block* %cx_blk99, i32 0, i32 5
  store %struct.pmop* %102, %struct.pmop** %blku_oldpm, align 8
  %104 = load i32, i32* %gimme, align 4
  %conv100 = trunc i32 %104 to i8
  %105 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u101 = getelementptr inbounds %struct.context, %struct.context* %105, i32 0, i32 1
  %cx_blk102 = bitcast %union.anon* %cx_u101 to %struct.block*
  %blku_gimme = getelementptr inbounds %struct.block, %struct.block* %cx_blk102, i32 0, i32 6
  store i8 %conv100, i8* %blku_gimme, align 1
  %106 = load volatile i32, i32* @PL_in_eval, align 4
  %107 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u103 = getelementptr inbounds %struct.context, %struct.context* %107, i32 0, i32 1
  %cx_blk104 = bitcast %union.anon* %cx_u103 to %struct.block*
  %blk_u = getelementptr inbounds %struct.block, %struct.block* %cx_blk104, i32 0, i32 7
  %blku_eval = bitcast %union.anon.1* %blk_u to %struct.block_eval*
  %old_in_eval = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval, i32 0, i32 0
  store i32 %106, i32* %old_in_eval, align 4
  %108 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type105 = getelementptr inbounds %struct.op, %struct.op* %108, i32 0, i32 4
  %109 = load i16, i16* %op_type105, align 2
  %conv106 = zext i16 %109 to i32
  %110 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u107 = getelementptr inbounds %struct.context, %struct.context* %110, i32 0, i32 1
  %cx_blk108 = bitcast %union.anon* %cx_u107 to %struct.block*
  %blk_u109 = getelementptr inbounds %struct.block, %struct.block* %cx_blk108, i32 0, i32 7
  %blku_eval110 = bitcast %union.anon.1* %blk_u109 to %struct.block_eval*
  %old_op_type = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval110, i32 0, i32 1
  store i32 %conv106, i32* %old_op_type, align 4
  %111 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u111 = getelementptr inbounds %struct.context, %struct.context* %111, i32 0, i32 1
  %cx_blk112 = bitcast %union.anon* %cx_u111 to %struct.block*
  %blk_u113 = getelementptr inbounds %struct.block, %struct.block* %cx_blk112, i32 0, i32 7
  %blku_eval114 = bitcast %union.anon.1* %blk_u113 to %struct.block_eval*
  %old_namesv = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval114, i32 0, i32 2
  store %struct.sv* null, %struct.sv** %old_namesv, align 8
  %112 = load %struct.op*, %struct.op** @PL_eval_root, align 8
  %113 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u115 = getelementptr inbounds %struct.context, %struct.context* %113, i32 0, i32 1
  %cx_blk116 = bitcast %union.anon* %cx_u115 to %struct.block*
  %blk_u117 = getelementptr inbounds %struct.block, %struct.block* %cx_blk116, i32 0, i32 7
  %blku_eval118 = bitcast %union.anon.1* %blk_u117 to %struct.block_eval*
  %old_eval_root = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval118, i32 0, i32 3
  store %struct.op* %112, %struct.op** %old_eval_root, align 8
  %114 = load %struct.sv*, %struct.sv** @PL_linestr, align 8
  %115 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u119 = getelementptr inbounds %struct.context, %struct.context* %115, i32 0, i32 1
  %cx_blk120 = bitcast %union.anon* %cx_u119 to %struct.block*
  %blk_u121 = getelementptr inbounds %struct.block, %struct.block* %cx_blk120, i32 0, i32 7
  %blku_eval122 = bitcast %union.anon.1* %blk_u121 to %struct.block_eval*
  %cur_text = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval122, i32 0, i32 4
  store %struct.sv* %114, %struct.sv** %cur_text, align 8
  %116 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u124 = getelementptr inbounds %struct.context, %struct.context* %116, i32 0, i32 1
  %cx_blk125 = bitcast %union.anon* %cx_u124 to %struct.block*
  %blk_u126 = getelementptr inbounds %struct.block, %struct.block* %cx_blk125, i32 0, i32 7
  %blku_eval127 = bitcast %union.anon.1* %blk_u126 to %struct.block_eval*
  %cv = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval127, i32 0, i32 5
  store %struct.cv* null, %struct.cv** %cv, align 8
  store %struct.cv* null, %struct.cv** %tmp123
  %117 = load %struct.cv*, %struct.cv** %tmp123
  %118 = load i32, i32* %runtime, align 4
  %tobool128 = icmp ne i32 %118, 0
  br i1 %tobool128, label %if.then.129, label %if.else.131

if.then.129:                                      ; preds = %cond.end.76
  %119 = load %struct.op**, %struct.op*** %startop.addr, align 8
  %120 = load %struct.cv*, %struct.cv** %runcv, align 8
  %121 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_seq = getelementptr inbounds %struct.cop, %struct.cop* %121, i32 0, i32 11
  %122 = load i32, i32* %cop_seq, align 4
  %call130 = call %struct.op* @S_doeval(i32 0, %struct.op** %119, %struct.cv* %120, i32 %122)
  store %struct.op* %call130, %struct.op** %rop, align 8
  br label %if.end.133

if.else.131:                                      ; preds = %cond.end.76
  %123 = load %struct.op**, %struct.op*** %startop.addr, align 8
  %124 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %125 = load i32, i32* @PL_cop_seqmax, align 4
  %call132 = call %struct.op* @S_doeval(i32 0, %struct.op** %123, %struct.cv* %124, i32 %125)
  store %struct.op* %call132, %struct.op** %rop, align 8
  br label %if.end.133

if.end.133:                                       ; preds = %if.else.131, %if.then.129
  %126 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix134 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %126, i32 0, i32 2
  %127 = load i32, i32* %si_cxix134, align 4
  %dec = add nsw i32 %127, -1
  store i32 %dec, i32* %si_cxix134, align 4
  %idxprom135 = sext i32 %127 to i64
  %128 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxstack136 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %128, i32 0, i32 1
  %129 = load %struct.context*, %struct.context** %si_cxstack136, align 8
  %arrayidx137 = getelementptr inbounds %struct.context, %struct.context* %129, i64 %idxprom135
  store %struct.context* %arrayidx137, %struct.context** %cx, align 8
  %130 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %131 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u138 = getelementptr inbounds %struct.context, %struct.context* %131, i32 0, i32 1
  %cx_blk139 = bitcast %union.anon* %cx_u138 to %struct.block*
  %blku_oldsp140 = getelementptr inbounds %struct.block, %struct.block* %cx_blk139, i32 0, i32 0
  %132 = load i32, i32* %blku_oldsp140, align 4
  %idx.ext = sext i32 %132 to i64
  %add.ptr141 = getelementptr inbounds %struct.sv*, %struct.sv** %130, i64 %idx.ext
  store %struct.sv** %add.ptr141, %struct.sv*** %newsp, align 8
  %133 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u142 = getelementptr inbounds %struct.context, %struct.context* %133, i32 0, i32 1
  %cx_blk143 = bitcast %union.anon* %cx_u142 to %struct.block*
  %blku_oldcop144 = getelementptr inbounds %struct.block, %struct.block* %cx_blk143, i32 0, i32 1
  %134 = load %struct.cop*, %struct.cop** %blku_oldcop144, align 8
  store volatile %struct.cop* %134, %struct.cop** @PL_curcop, align 8
  %135 = load i32*, i32** @PL_markstack, align 8
  %136 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u145 = getelementptr inbounds %struct.context, %struct.context* %136, i32 0, i32 1
  %cx_blk146 = bitcast %union.anon* %cx_u145 to %struct.block*
  %blku_oldmarksp147 = getelementptr inbounds %struct.block, %struct.block* %cx_blk146, i32 0, i32 3
  %137 = load i32, i32* %blku_oldmarksp147, align 4
  %idx.ext148 = sext i32 %137 to i64
  %add.ptr149 = getelementptr inbounds i32, i32* %135, i64 %idx.ext148
  store i32* %add.ptr149, i32** @PL_markstack_ptr, align 8
  %138 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u150 = getelementptr inbounds %struct.context, %struct.context* %138, i32 0, i32 1
  %cx_blk151 = bitcast %union.anon* %cx_u150 to %struct.block*
  %blku_oldscopesp152 = getelementptr inbounds %struct.block, %struct.block* %cx_blk151, i32 0, i32 4
  %139 = load i32, i32* %blku_oldscopesp152, align 4
  store i32 %139, i32* @PL_scopestack_ix, align 4
  %140 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u153 = getelementptr inbounds %struct.context, %struct.context* %140, i32 0, i32 1
  %cx_blk154 = bitcast %union.anon* %cx_u153 to %struct.block*
  %blku_oldretsp155 = getelementptr inbounds %struct.block, %struct.block* %cx_blk154, i32 0, i32 2
  %141 = load i32, i32* %blku_oldretsp155, align 4
  store i32 %141, i32* @PL_retstack_ix, align 4
  %142 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u156 = getelementptr inbounds %struct.context, %struct.context* %142, i32 0, i32 1
  %cx_blk157 = bitcast %union.anon* %cx_u156 to %struct.block*
  %blku_oldpm158 = getelementptr inbounds %struct.block, %struct.block* %cx_blk157, i32 0, i32 5
  %143 = load %struct.pmop*, %struct.pmop** %blku_oldpm158, align 8
  store %struct.pmop* %143, %struct.pmop** @PL_curpm, align 8
  %144 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u159 = getelementptr inbounds %struct.context, %struct.context* %144, i32 0, i32 1
  %cx_blk160 = bitcast %union.anon* %cx_u159 to %struct.block*
  %blku_gimme161 = getelementptr inbounds %struct.block, %struct.block* %cx_blk160, i32 0, i32 6
  %145 = load i8, i8* %blku_gimme161, align 1
  %conv162 = zext i8 %145 to i32
  store i32 %conv162, i32* %gimme, align 4
  %146 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u163 = getelementptr inbounds %struct.context, %struct.context* %146, i32 0, i32 1
  %cx_blk164 = bitcast %union.anon* %cx_u163 to %struct.block*
  %blk_u165 = getelementptr inbounds %struct.block, %struct.block* %cx_blk164, i32 0, i32 7
  %blku_eval166 = bitcast %union.anon.1* %blk_u165 to %struct.block_eval*
  %old_in_eval167 = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval166, i32 0, i32 0
  %147 = load i32, i32* %old_in_eval167, align 4
  store volatile i32 %147, i32* @PL_in_eval, align 4
  %148 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u168 = getelementptr inbounds %struct.context, %struct.context* %148, i32 0, i32 1
  %cx_blk169 = bitcast %union.anon* %cx_u168 to %struct.block*
  %blk_u170 = getelementptr inbounds %struct.block, %struct.block* %cx_blk169, i32 0, i32 7
  %blku_eval171 = bitcast %union.anon.1* %blk_u170 to %struct.block_eval*
  %old_op_type172 = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval171, i32 0, i32 1
  %149 = load i32, i32* %old_op_type172, align 4
  store i32 %149, i32* %optype, align 4
  %150 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u173 = getelementptr inbounds %struct.context, %struct.context* %150, i32 0, i32 1
  %cx_blk174 = bitcast %union.anon* %cx_u173 to %struct.block*
  %blk_u175 = getelementptr inbounds %struct.block, %struct.block* %cx_blk174, i32 0, i32 7
  %blku_eval176 = bitcast %union.anon.1* %blk_u175 to %struct.block_eval*
  %old_eval_root177 = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval176, i32 0, i32 3
  %151 = load %struct.op*, %struct.op** %old_eval_root177, align 8
  store %struct.op* %151, %struct.op** @PL_eval_root, align 8
  %152 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u178 = getelementptr inbounds %struct.context, %struct.context* %152, i32 0, i32 1
  %cx_blk179 = bitcast %union.anon* %cx_u178 to %struct.block*
  %blk_u180 = getelementptr inbounds %struct.block, %struct.block* %cx_blk179, i32 0, i32 7
  %blku_eval181 = bitcast %union.anon.1* %blk_u180 to %struct.block_eval*
  %old_namesv182 = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval181, i32 0, i32 2
  %153 = load %struct.sv*, %struct.sv** %old_namesv182, align 8
  %tobool183 = icmp ne %struct.sv* %153, null
  br i1 %tobool183, label %if.then.184, label %if.end.191

if.then.184:                                      ; preds = %if.end.133
  %154 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u185 = getelementptr inbounds %struct.context, %struct.context* %154, i32 0, i32 1
  %cx_blk186 = bitcast %union.anon* %cx_u185 to %struct.block*
  %blk_u187 = getelementptr inbounds %struct.block, %struct.block* %cx_blk186, i32 0, i32 7
  %blku_eval188 = bitcast %union.anon.1* %blk_u187 to %struct.block_eval*
  %old_namesv189 = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval188, i32 0, i32 2
  %155 = load %struct.sv*, %struct.sv** %old_namesv189, align 8
  %call190 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %155)
  br label %if.end.191

if.end.191:                                       ; preds = %if.then.184, %if.end.133
  %156 = load %struct.op**, %struct.op*** %startop.addr, align 8
  %157 = load %struct.op*, %struct.op** %156, align 8
  %op_type192 = getelementptr inbounds %struct.op, %struct.op* %157, i32 0, i32 4
  store i16 0, i16* %op_type192, align 2
  %158 = load %struct.op* ()*, %struct.op* ()** getelementptr inbounds ([0 x %struct.op* ()*], [0 x %struct.op* ()*]* @PL_ppaddr, i32 0, i64 0), align 8
  %159 = load %struct.op**, %struct.op*** %startop.addr, align 8
  %160 = load %struct.op*, %struct.op** %159, align 8
  %op_ppaddr = getelementptr inbounds %struct.op, %struct.op* %160, i32 0, i32 2
  %op_ppaddr193 = bitcast {}** %op_ppaddr to %struct.op* ()**
  store %struct.op* ()* %158, %struct.op* ()** %op_ppaddr193, align 8
  call void @Perl_lex_end()
  %161 = load %struct.av*, %struct.av** @PL_comppad, align 8
  %162 = bitcast %struct.av* %161 to %struct.sv*
  store %struct.sv* %162, %struct.sv** @PL_Sv, align 8
  %163 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %tobool194 = icmp ne %struct.sv* %163, null
  br i1 %tobool194, label %land.rhs.195, label %land.end.199

land.rhs.195:                                     ; preds = %if.end.191
  %164 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_refcnt196 = getelementptr inbounds %struct.sv, %struct.sv* %164, i32 0, i32 1
  %165 = load i32, i32* %sv_refcnt196, align 4
  %inc197 = add i32 %165, 1
  store i32 %inc197, i32* %sv_refcnt196, align 4
  %tobool198 = icmp ne i32 %inc197, 0
  br label %land.end.199

land.end.199:                                     ; preds = %land.rhs.195, %if.end.191
  %166 = phi i1 [ false, %if.end.191 ], [ %tobool198, %land.rhs.195 ]
  %land.ext200 = zext i1 %166 to i32
  %167 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %168 = bitcast %struct.sv* %167 to %struct.av*
  %169 = load %struct.av**, %struct.av*** %padp.addr, align 8
  store %struct.av* %168, %struct.av** %169, align 8
  call void @Perl_pop_scope()
  %170 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cmp201 = icmp eq %struct.cop* %170, @PL_compiling
  br i1 %cmp201, label %if.then.203, label %if.end.206

if.then.203:                                      ; preds = %land.end.199
  %171 = load i32, i32* @PL_hints, align 4
  %and204 = and i32 %171, 255
  %conv205 = trunc i32 %and204 to i8
  store i8 %conv205, i8* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 7), align 1
  br label %if.end.206

if.end.206:                                       ; preds = %if.then.203, %land.end.199
  %172 = load %struct.op*, %struct.op** %rop, align 8
  ret %struct.op* %172
}

declare void @Perl_lex_start(%struct.sv*) #1

declare void @Perl_sv_setpvf(%struct.sv*, i8*, ...) #1

declare %struct.gv* @Perl_gv_fetchfile(i8*) #1

declare i8* @Perl_savepv(i8*) #1

declare void @Perl_save_delete(%struct.hv*, i8*, i32) #1

declare i64 @strlen(i8*) #1

declare %struct.hv* @Perl_newHVhv(%struct.hv*) #1

; Function Attrs: nounwind uwtable
define %struct.cv* @Perl_find_runcv(i32* %db_seqp) #0 {
entry:
  %retval = alloca %struct.cv*, align 8
  %db_seqp.addr = alloca i32*, align 8
  %ix = alloca i32, align 4
  %si = alloca %struct.stackinfo*, align 8
  %cx = alloca %struct.context*, align 8
  %cv = alloca %struct.cv*, align 8
  store i32* %db_seqp, i32** %db_seqp.addr, align 8
  %0 = load i32*, i32** %db_seqp.addr, align 8
  %tobool = icmp ne i32* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_seq = getelementptr inbounds %struct.cop, %struct.cop* %1, i32 0, i32 11
  %2 = load i32, i32* %cop_seq, align 4
  %3 = load i32*, i32** %db_seqp.addr, align 8
  store i32 %2, i32* %3, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  store %struct.stackinfo* %4, %struct.stackinfo** %si, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc.29, %if.end
  %5 = load %struct.stackinfo*, %struct.stackinfo** %si, align 8
  %tobool1 = icmp ne %struct.stackinfo* %5, null
  br i1 %tobool1, label %for.body, label %for.end.30

for.body:                                         ; preds = %for.cond
  %6 = load %struct.stackinfo*, %struct.stackinfo** %si, align 8
  %si_cxix = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %6, i32 0, i32 2
  %7 = load i32, i32* %si_cxix, align 4
  store i32 %7, i32* %ix, align 4
  br label %for.cond.2

for.cond.2:                                       ; preds = %for.inc, %for.body
  %8 = load i32, i32* %ix, align 4
  %cmp = icmp sge i32 %8, 0
  br i1 %cmp, label %for.body.3, label %for.end

for.body.3:                                       ; preds = %for.cond.2
  %9 = load i32, i32* %ix, align 4
  %idxprom = sext i32 %9 to i64
  %10 = load %struct.stackinfo*, %struct.stackinfo** %si, align 8
  %si_cxstack = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %10, i32 0, i32 1
  %11 = load %struct.context*, %struct.context** %si_cxstack, align 8
  %arrayidx = getelementptr inbounds %struct.context, %struct.context* %11, i64 %idxprom
  store %struct.context* %arrayidx, %struct.context** %cx, align 8
  %12 = load %struct.context*, %struct.context** %cx, align 8
  %cx_type = getelementptr inbounds %struct.context, %struct.context* %12, i32 0, i32 0
  %13 = load i32, i32* %cx_type, align 4
  %and = and i32 %13, 255
  %cmp4 = icmp eq i32 %and, 1
  br i1 %cmp4, label %if.then.8, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body.3
  %14 = load %struct.context*, %struct.context** %cx, align 8
  %cx_type5 = getelementptr inbounds %struct.context, %struct.context* %14, i32 0, i32 0
  %15 = load i32, i32* %cx_type5, align 4
  %and6 = and i32 %15, 255
  %cmp7 = icmp eq i32 %and6, 6
  br i1 %cmp7, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %lor.lhs.false, %for.body.3
  %16 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u = getelementptr inbounds %struct.context, %struct.context* %16, i32 0, i32 1
  %cx_blk = bitcast %union.anon* %cx_u to %struct.block*
  %blk_u = getelementptr inbounds %struct.block, %struct.block* %cx_blk, i32 0, i32 7
  %blku_sub = bitcast %union.anon.1* %blk_u to %struct.block_sub*
  %cv9 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub, i32 0, i32 0
  %17 = load %struct.cv*, %struct.cv** %cv9, align 8
  store %struct.cv* %17, %struct.cv** %cv, align 8
  %18 = load i32*, i32** %db_seqp.addr, align 8
  %tobool10 = icmp ne i32* %18, null
  br i1 %tobool10, label %land.lhs.true, label %if.end.18

land.lhs.true:                                    ; preds = %if.then.8
  %19 = load %struct.hv*, %struct.hv** @PL_debstash, align 8
  %tobool11 = icmp ne %struct.hv* %19, null
  br i1 %tobool11, label %land.lhs.true.12, label %if.end.18

land.lhs.true.12:                                 ; preds = %land.lhs.true
  %20 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any = getelementptr inbounds %struct.cv, %struct.cv* %20, i32 0, i32 0
  %21 = load %struct.xpvcv*, %struct.xpvcv** %sv_any, align 8
  %xcv_stash = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %21, i32 0, i32 7
  %22 = load %struct.hv*, %struct.hv** %xcv_stash, align 8
  %23 = load %struct.hv*, %struct.hv** @PL_debstash, align 8
  %cmp13 = icmp eq %struct.hv* %22, %23
  br i1 %cmp13, label %if.then.14, label %if.end.18

if.then.14:                                       ; preds = %land.lhs.true.12
  %24 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u15 = getelementptr inbounds %struct.context, %struct.context* %24, i32 0, i32 1
  %cx_blk16 = bitcast %union.anon* %cx_u15 to %struct.block*
  %blku_oldcop = getelementptr inbounds %struct.block, %struct.block* %cx_blk16, i32 0, i32 1
  %25 = load %struct.cop*, %struct.cop** %blku_oldcop, align 8
  %cop_seq17 = getelementptr inbounds %struct.cop, %struct.cop* %25, i32 0, i32 11
  %26 = load i32, i32* %cop_seq17, align 4
  %27 = load i32*, i32** %db_seqp.addr, align 8
  store i32 %26, i32* %27, align 4
  br label %for.inc

if.end.18:                                        ; preds = %land.lhs.true.12, %land.lhs.true, %if.then.8
  %28 = load %struct.cv*, %struct.cv** %cv, align 8
  store %struct.cv* %28, %struct.cv** %retval
  br label %return

if.else:                                          ; preds = %lor.lhs.false
  %29 = load %struct.context*, %struct.context** %cx, align 8
  %cx_type19 = getelementptr inbounds %struct.context, %struct.context* %29, i32 0, i32 0
  %30 = load i32, i32* %cx_type19, align 4
  %and20 = and i32 %30, 255
  %cmp21 = icmp eq i32 %and20, 2
  br i1 %cmp21, label %land.lhs.true.22, label %if.end.27

land.lhs.true.22:                                 ; preds = %if.else
  %31 = load %struct.context*, %struct.context** %cx, align 8
  %cx_type23 = getelementptr inbounds %struct.context, %struct.context* %31, i32 0, i32 0
  %32 = load i32, i32* %cx_type23, align 4
  %and24 = and i32 %32, 514
  %cmp25 = icmp eq i32 %and24, 514
  br i1 %cmp25, label %if.end.27, label %if.then.26

if.then.26:                                       ; preds = %land.lhs.true.22
  %33 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  store %struct.cv* %33, %struct.cv** %retval
  br label %return

if.end.27:                                        ; preds = %land.lhs.true.22, %if.else
  br label %if.end.28

if.end.28:                                        ; preds = %if.end.27
  br label %for.inc

for.inc:                                          ; preds = %if.end.28, %if.then.14
  %34 = load i32, i32* %ix, align 4
  %dec = add nsw i32 %34, -1
  store i32 %dec, i32* %ix, align 4
  br label %for.cond.2

for.end:                                          ; preds = %for.cond.2
  br label %for.inc.29

for.inc.29:                                       ; preds = %for.end
  %35 = load %struct.stackinfo*, %struct.stackinfo** %si, align 8
  %si_prev = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %35, i32 0, i32 5
  %36 = load %struct.stackinfo*, %struct.stackinfo** %si_prev, align 8
  store %struct.stackinfo* %36, %struct.stackinfo** %si, align 8
  br label %for.cond

for.end.30:                                       ; preds = %for.cond
  %37 = load %struct.cv*, %struct.cv** @PL_main_cv, align 8
  store %struct.cv* %37, %struct.cv** %retval
  br label %return

return:                                           ; preds = %for.end.30, %if.then.26, %if.end.18
  %38 = load %struct.cv*, %struct.cv** %retval
  ret %struct.cv* %38
}

; Function Attrs: nounwind uwtable
define internal %struct.op* @S_doeval(i32 %gimme, %struct.op** %startop, %struct.cv* %outside, i32 %seq) #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %gimme.addr = alloca i32, align 4
  %startop.addr = alloca %struct.op**, align 8
  %outside.addr = alloca %struct.cv*, align 8
  %seq.addr = alloca i32, align 4
  %sp = alloca %struct.sv**, align 8
  %saveop = alloca %struct.op*, align 8
  %tmp = alloca i32, align 4
  %newsp = alloca %struct.sv**, align 8
  %cx = alloca %struct.context*, align 8
  %optype = alloca i32, align 4
  %n_a = alloca i64, align 8
  %msg = alloca i8*, align 8
  %msg126 = alloca i8*, align 8
  %msg211 = alloca i8*, align 8
  %cv285 = alloca %struct.cv*, align 8
  %sp290 = alloca %struct.sv**, align 8
  %tmp296 = alloca i32, align 4
  %tmp311 = alloca %struct.sv*, align 8
  store i32 %gimme, i32* %gimme.addr, align 4
  store %struct.op** %startop, %struct.op*** %startop.addr, align 8
  store %struct.cv* %outside, %struct.cv** %outside.addr, align 8
  store i32 %seq, i32* %seq.addr, align 4
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  store %struct.op* %1, %struct.op** %saveop, align 8
  %2 = load %struct.op*, %struct.op** %saveop, align 8
  %tobool = icmp ne %struct.op* %2, null
  br i1 %tobool, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.op*, %struct.op** %saveop, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %3, i32 0, i32 4
  %4 = load i16, i16* %op_type, align 2
  %conv = zext i16 %4 to i32
  %cmp = icmp eq i32 %conv, 309
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %5 = load volatile i32, i32* @PL_in_eval, align 4
  %and = and i32 %5, 1
  %or = or i32 8, %and
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %or, %cond.true ], [ 1, %cond.false ]
  store volatile i32 %cond, i32* @PL_in_eval, align 4
  %6 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %6, i32 1
  store i32* %incdec.ptr, i32** @PL_markstack_ptr, align 8
  %7 = load i32*, i32** @PL_markstack_max, align 8
  %cmp2 = icmp eq i32* %incdec.ptr, %7
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  call void @Perl_markstack_grow()
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end
  %8 = load %struct.sv**, %struct.sv*** %sp, align 8
  %9 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %8 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %9 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %conv4 = trunc i64 %sub.ptr.div to i32
  %10 = load i32*, i32** @PL_markstack_ptr, align 8
  store i32 %conv4, i32* %10, align 4
  store i32 %conv4, i32* %tmp
  %11 = load i32, i32* %tmp
  call void @Perl_save_sptr(%struct.sv** bitcast (%struct.cv** @PL_compcv to %struct.sv**))
  %call = call %struct.sv* @Perl_newSV(i64 0)
  %12 = bitcast %struct.sv* %call to %struct.cv*
  store %struct.cv* %12, %struct.cv** @PL_compcv, align 8
  %13 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %14 = bitcast %struct.cv* %13 to %struct.sv*
  %call5 = call signext i8 @Perl_sv_upgrade(%struct.sv* %14, i32 12)
  %15 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %sv_any = getelementptr inbounds %struct.cv, %struct.cv* %15, i32 0, i32 0
  %16 = load %struct.xpvcv*, %struct.xpvcv** %sv_any, align 8
  %xcv_flags = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %16, i32 0, i32 17
  %17 = load i16, i16* %xcv_flags, align 2
  %conv6 = zext i16 %17 to i32
  %or7 = or i32 %conv6, 16
  %conv8 = trunc i32 %or7 to i16
  store i16 %conv8, i16* %xcv_flags, align 2
  %18 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %sv_flags = getelementptr inbounds %struct.cv, %struct.cv* %18, i32 0, i32 2
  %19 = load i32, i32* %sv_flags, align 4
  %and9 = and i32 %19, -1048577
  store i32 %and9, i32* %sv_flags, align 4
  %20 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %21 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %21, i32 0, i32 2
  %22 = load i32, i32* %si_cxix, align 4
  %idxprom = sext i32 %22 to i64
  %23 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxstack = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %23, i32 0, i32 1
  %24 = load %struct.context*, %struct.context** %si_cxstack, align 8
  %arrayidx = getelementptr inbounds %struct.context, %struct.context* %24, i64 %idxprom
  %cx_u = getelementptr inbounds %struct.context, %struct.context* %arrayidx, i32 0, i32 1
  %cx_blk = bitcast %union.anon* %cx_u to %struct.block*
  %blk_u = getelementptr inbounds %struct.block, %struct.block* %cx_blk, i32 0, i32 7
  %blku_eval = bitcast %union.anon.1* %blk_u to %struct.block_eval*
  %cv = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval, i32 0, i32 5
  store %struct.cv* %20, %struct.cv** %cv, align 8
  %25 = load i32, i32* %seq.addr, align 4
  %26 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %sv_any10 = getelementptr inbounds %struct.cv, %struct.cv* %26, i32 0, i32 0
  %27 = load %struct.xpvcv*, %struct.xpvcv** %sv_any10, align 8
  %xcv_outside_seq = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %27, i32 0, i32 18
  store i32 %25, i32* %xcv_outside_seq, align 4
  %28 = load %struct.cv*, %struct.cv** %outside.addr, align 8
  %29 = bitcast %struct.cv* %28 to %struct.sv*
  store %struct.sv* %29, %struct.sv** @PL_Sv, align 8
  %30 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %tobool11 = icmp ne %struct.sv* %30, null
  br i1 %tobool11, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.end
  %31 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %31, i32 0, i32 1
  %32 = load i32, i32* %sv_refcnt, align 4
  %inc = add i32 %32, 1
  store i32 %inc, i32* %sv_refcnt, align 4
  %tobool12 = icmp ne i32 %inc, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end
  %33 = phi i1 [ false, %if.end ], [ %tobool12, %land.rhs ]
  %land.ext = zext i1 %33 to i32
  %34 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %35 = bitcast %struct.sv* %34 to %struct.cv*
  %36 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %sv_any13 = getelementptr inbounds %struct.cv, %struct.cv* %36, i32 0, i32 0
  %37 = load %struct.xpvcv*, %struct.xpvcv** %sv_any13, align 8
  %xcv_outside = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %37, i32 0, i32 16
  store %struct.cv* %35, %struct.cv** %xcv_outside, align 8
  %call14 = call %struct.av* @Perl_pad_new(i32 2)
  %38 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %sv_any15 = getelementptr inbounds %struct.cv, %struct.cv* %38, i32 0, i32 0
  %39 = load %struct.xpvcv*, %struct.xpvcv** %sv_any15, align 8
  %xcv_padlist = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %39, i32 0, i32 15
  store %struct.av* %call14, %struct.av** %xcv_padlist, align 8
  %40 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %41 = bitcast %struct.cv* %40 to %struct.sv*
  call void @Perl_save_mortalizesv(%struct.sv* %41)
  %42 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_stash = getelementptr inbounds %struct.cop, %struct.cop* %42, i32 0, i32 9
  %43 = load %struct.hv*, %struct.hv** %cop_stash, align 8
  %44 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %cmp16 = icmp eq %struct.hv* %43, %44
  br i1 %cmp16, label %if.end.20, label %if.then.18

if.then.18:                                       ; preds = %land.end
  call void @Perl_save_sptr(%struct.sv** bitcast (%struct.hv** @PL_curstash to %struct.sv**))
  %45 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_stash19 = getelementptr inbounds %struct.cop, %struct.cop* %45, i32 0, i32 9
  %46 = load %struct.hv*, %struct.hv** %cop_stash19, align 8
  store %struct.hv* %46, %struct.hv** @PL_curstash, align 8
  br label %if.end.20

if.end.20:                                        ; preds = %if.then.18, %land.end
  call void @Perl_save_sptr(%struct.sv** bitcast (%struct.av** @PL_beginav to %struct.sv**))
  %call21 = call %struct.av* @Perl_newAV()
  store %struct.av* %call21, %struct.av** @PL_beginav, align 8
  %47 = load %struct.av*, %struct.av** @PL_beginav, align 8
  %48 = bitcast %struct.av* %47 to %struct.sv*
  call void @Perl_save_freesv(%struct.sv* %48)
  call void @Perl_save_I32(i32* @PL_error_count)
  store %struct.op* null, %struct.op** @PL_eval_root, align 8
  store i32 0, i32* @PL_error_count, align 4
  store volatile %struct.cop* @PL_compiling, %struct.cop** @PL_curcop, align 8
  %49 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_arybase = getelementptr inbounds %struct.cop, %struct.cop* %49, i32 0, i32 12
  store i32 0, i32* %cop_arybase, align 4
  %50 = load %struct.op*, %struct.op** %saveop, align 8
  %tobool22 = icmp ne %struct.op* %50, null
  br i1 %tobool22, label %land.lhs.true.23, label %if.else

land.lhs.true.23:                                 ; preds = %if.end.20
  %51 = load %struct.op*, %struct.op** %saveop, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %51, i32 0, i32 6
  %52 = load i8, i8* %op_flags, align 1
  %conv24 = zext i8 %52 to i32
  %and25 = and i32 %conv24, 128
  %tobool26 = icmp ne i32 %and25, 0
  br i1 %tobool26, label %if.then.27, label %if.else

if.then.27:                                       ; preds = %land.lhs.true.23
  %53 = load volatile i32, i32* @PL_in_eval, align 4
  %or28 = or i32 %53, 4
  store volatile i32 %or28, i32* @PL_in_eval, align 4
  br label %if.end.30

if.else:                                          ; preds = %land.lhs.true.23, %if.end.20
  %54 = load %struct.gv*, %struct.gv** @PL_errgv, align 8
  %sv_any29 = getelementptr inbounds %struct.gv, %struct.gv* %54, i32 0, i32 0
  %55 = load %struct.xpvgv*, %struct.xpvgv** %sv_any29, align 8
  %xgv_gp = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %55, i32 0, i32 7
  %56 = load %struct.gp*, %struct.gp** %xgv_gp, align 8
  %gp_sv = getelementptr inbounds %struct.gp, %struct.gp* %56, i32 0, i32 0
  %57 = load %struct.sv*, %struct.sv** %gp_sv, align 8
  call void @Perl_sv_setpv(%struct.sv* %57, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.11, i32 0, i32 0))
  br label %if.end.30

if.end.30:                                        ; preds = %if.else, %if.then.27
  %call31 = call i32 @Perl_yyparse()
  %tobool32 = icmp ne i32 %call31, 0
  br i1 %tobool32, label %if.then.36, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.30
  %58 = load i32, i32* @PL_error_count, align 4
  %tobool33 = icmp ne i32 %58, 0
  br i1 %tobool33, label %if.then.36, label %lor.lhs.false.34

lor.lhs.false.34:                                 ; preds = %lor.lhs.false
  %59 = load %struct.op*, %struct.op** @PL_eval_root, align 8
  %tobool35 = icmp ne %struct.op* %59, null
  br i1 %tobool35, label %if.end.237, label %if.then.36

if.then.36:                                       ; preds = %lor.lhs.false.34, %lor.lhs.false, %if.end.30
  store i32 0, i32* %optype, align 4
  %60 = load %struct.op*, %struct.op** %saveop, align 8
  store %struct.op* %60, %struct.op** @PL_op, align 8
  %61 = load %struct.op*, %struct.op** @PL_eval_root, align 8
  %tobool41 = icmp ne %struct.op* %61, null
  br i1 %tobool41, label %if.then.42, label %if.end.43

if.then.42:                                       ; preds = %if.then.36
  %62 = load %struct.op*, %struct.op** @PL_eval_root, align 8
  call void @Perl_op_free(%struct.op* %62)
  store %struct.op* null, %struct.op** @PL_eval_root, align 8
  br label %if.end.43

if.end.43:                                        ; preds = %if.then.42, %if.then.36
  %63 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %64 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr44 = getelementptr inbounds i32, i32* %64, i32 -1
  store i32* %incdec.ptr44, i32** @PL_markstack_ptr, align 8
  %65 = load i32, i32* %64, align 4
  %idx.ext = sext i32 %65 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %63, i64 %idx.ext
  store %struct.sv** %add.ptr, %struct.sv*** %sp, align 8
  %66 = load %struct.op**, %struct.op*** %startop.addr, align 8
  %tobool45 = icmp ne %struct.op** %66, null
  br i1 %tobool45, label %if.end.96, label %if.then.46

if.then.46:                                       ; preds = %if.end.43
  %67 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix47 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %67, i32 0, i32 2
  %68 = load i32, i32* %si_cxix47, align 4
  %dec = add nsw i32 %68, -1
  store i32 %dec, i32* %si_cxix47, align 4
  %idxprom48 = sext i32 %68 to i64
  %69 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxstack49 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %69, i32 0, i32 1
  %70 = load %struct.context*, %struct.context** %si_cxstack49, align 8
  %arrayidx50 = getelementptr inbounds %struct.context, %struct.context* %70, i64 %idxprom48
  store %struct.context* %arrayidx50, %struct.context** %cx, align 8
  %71 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %72 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u51 = getelementptr inbounds %struct.context, %struct.context* %72, i32 0, i32 1
  %cx_blk52 = bitcast %union.anon* %cx_u51 to %struct.block*
  %blku_oldsp = getelementptr inbounds %struct.block, %struct.block* %cx_blk52, i32 0, i32 0
  %73 = load i32, i32* %blku_oldsp, align 4
  %idx.ext53 = sext i32 %73 to i64
  %add.ptr54 = getelementptr inbounds %struct.sv*, %struct.sv** %71, i64 %idx.ext53
  store %struct.sv** %add.ptr54, %struct.sv*** %newsp, align 8
  %74 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u55 = getelementptr inbounds %struct.context, %struct.context* %74, i32 0, i32 1
  %cx_blk56 = bitcast %union.anon* %cx_u55 to %struct.block*
  %blku_oldcop = getelementptr inbounds %struct.block, %struct.block* %cx_blk56, i32 0, i32 1
  %75 = load %struct.cop*, %struct.cop** %blku_oldcop, align 8
  store volatile %struct.cop* %75, %struct.cop** @PL_curcop, align 8
  %76 = load i32*, i32** @PL_markstack, align 8
  %77 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u57 = getelementptr inbounds %struct.context, %struct.context* %77, i32 0, i32 1
  %cx_blk58 = bitcast %union.anon* %cx_u57 to %struct.block*
  %blku_oldmarksp = getelementptr inbounds %struct.block, %struct.block* %cx_blk58, i32 0, i32 3
  %78 = load i32, i32* %blku_oldmarksp, align 4
  %idx.ext59 = sext i32 %78 to i64
  %add.ptr60 = getelementptr inbounds i32, i32* %76, i64 %idx.ext59
  store i32* %add.ptr60, i32** @PL_markstack_ptr, align 8
  %79 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u61 = getelementptr inbounds %struct.context, %struct.context* %79, i32 0, i32 1
  %cx_blk62 = bitcast %union.anon* %cx_u61 to %struct.block*
  %blku_oldscopesp = getelementptr inbounds %struct.block, %struct.block* %cx_blk62, i32 0, i32 4
  %80 = load i32, i32* %blku_oldscopesp, align 4
  store i32 %80, i32* @PL_scopestack_ix, align 4
  %81 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u63 = getelementptr inbounds %struct.context, %struct.context* %81, i32 0, i32 1
  %cx_blk64 = bitcast %union.anon* %cx_u63 to %struct.block*
  %blku_oldretsp = getelementptr inbounds %struct.block, %struct.block* %cx_blk64, i32 0, i32 2
  %82 = load i32, i32* %blku_oldretsp, align 4
  store i32 %82, i32* @PL_retstack_ix, align 4
  %83 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u65 = getelementptr inbounds %struct.context, %struct.context* %83, i32 0, i32 1
  %cx_blk66 = bitcast %union.anon* %cx_u65 to %struct.block*
  %blku_oldpm = getelementptr inbounds %struct.block, %struct.block* %cx_blk66, i32 0, i32 5
  %84 = load %struct.pmop*, %struct.pmop** %blku_oldpm, align 8
  store %struct.pmop* %84, %struct.pmop** @PL_curpm, align 8
  %85 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u67 = getelementptr inbounds %struct.context, %struct.context* %85, i32 0, i32 1
  %cx_blk68 = bitcast %union.anon* %cx_u67 to %struct.block*
  %blku_gimme = getelementptr inbounds %struct.block, %struct.block* %cx_blk68, i32 0, i32 6
  %86 = load i8, i8* %blku_gimme, align 1
  %conv69 = zext i8 %86 to i32
  store i32 %conv69, i32* %gimme.addr, align 4
  %87 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u70 = getelementptr inbounds %struct.context, %struct.context* %87, i32 0, i32 1
  %cx_blk71 = bitcast %union.anon* %cx_u70 to %struct.block*
  %blk_u72 = getelementptr inbounds %struct.block, %struct.block* %cx_blk71, i32 0, i32 7
  %blku_eval73 = bitcast %union.anon.1* %blk_u72 to %struct.block_eval*
  %old_in_eval = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval73, i32 0, i32 0
  %88 = load i32, i32* %old_in_eval, align 4
  store volatile i32 %88, i32* @PL_in_eval, align 4
  %89 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u74 = getelementptr inbounds %struct.context, %struct.context* %89, i32 0, i32 1
  %cx_blk75 = bitcast %union.anon* %cx_u74 to %struct.block*
  %blk_u76 = getelementptr inbounds %struct.block, %struct.block* %cx_blk75, i32 0, i32 7
  %blku_eval77 = bitcast %union.anon.1* %blk_u76 to %struct.block_eval*
  %old_op_type = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval77, i32 0, i32 1
  %90 = load i32, i32* %old_op_type, align 4
  store i32 %90, i32* %optype, align 4
  %91 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u78 = getelementptr inbounds %struct.context, %struct.context* %91, i32 0, i32 1
  %cx_blk79 = bitcast %union.anon* %cx_u78 to %struct.block*
  %blk_u80 = getelementptr inbounds %struct.block, %struct.block* %cx_blk79, i32 0, i32 7
  %blku_eval81 = bitcast %union.anon.1* %blk_u80 to %struct.block_eval*
  %old_eval_root = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval81, i32 0, i32 3
  %92 = load %struct.op*, %struct.op** %old_eval_root, align 8
  store %struct.op* %92, %struct.op** @PL_eval_root, align 8
  %93 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u82 = getelementptr inbounds %struct.context, %struct.context* %93, i32 0, i32 1
  %cx_blk83 = bitcast %union.anon* %cx_u82 to %struct.block*
  %blk_u84 = getelementptr inbounds %struct.block, %struct.block* %cx_blk83, i32 0, i32 7
  %blku_eval85 = bitcast %union.anon.1* %blk_u84 to %struct.block_eval*
  %old_namesv = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval85, i32 0, i32 2
  %94 = load %struct.sv*, %struct.sv** %old_namesv, align 8
  %tobool86 = icmp ne %struct.sv* %94, null
  br i1 %tobool86, label %if.then.87, label %if.end.94

if.then.87:                                       ; preds = %if.then.46
  %95 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u88 = getelementptr inbounds %struct.context, %struct.context* %95, i32 0, i32 1
  %cx_blk89 = bitcast %union.anon* %cx_u88 to %struct.block*
  %blk_u90 = getelementptr inbounds %struct.block, %struct.block* %cx_blk89, i32 0, i32 7
  %blku_eval91 = bitcast %union.anon.1* %blk_u90 to %struct.block_eval*
  %old_namesv92 = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval91, i32 0, i32 2
  %96 = load %struct.sv*, %struct.sv** %old_namesv92, align 8
  %call93 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %96)
  br label %if.end.94

if.end.94:                                        ; preds = %if.then.87, %if.then.46
  %call95 = call %struct.op* @Perl_pop_return()
  br label %if.end.96

if.end.96:                                        ; preds = %if.end.94, %if.end.43
  call void @Perl_lex_end()
  call void @Perl_pop_scope()
  %97 = load i32, i32* %optype, align 4
  %cmp97 = icmp eq i32 %97, 309
  br i1 %cmp97, label %if.then.99, label %if.else.122

if.then.99:                                       ; preds = %if.end.96
  %98 = load %struct.gv*, %struct.gv** @PL_errgv, align 8
  %sv_any101 = getelementptr inbounds %struct.gv, %struct.gv* %98, i32 0, i32 0
  %99 = load %struct.xpvgv*, %struct.xpvgv** %sv_any101, align 8
  %xgv_gp102 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %99, i32 0, i32 7
  %100 = load %struct.gp*, %struct.gp** %xgv_gp102, align 8
  %gp_sv103 = getelementptr inbounds %struct.gp, %struct.gp* %100, i32 0, i32 0
  %101 = load %struct.sv*, %struct.sv** %gp_sv103, align 8
  store %struct.sv* %101, %struct.sv** @PL_Sv, align 8
  %102 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags104 = getelementptr inbounds %struct.sv, %struct.sv* %102, i32 0, i32 2
  %103 = load i32, i32* %sv_flags104, align 4
  %and105 = and i32 %103, 262144
  %cmp106 = icmp eq i32 %and105, 262144
  br i1 %cmp106, label %cond.true.108, label %cond.false.111

cond.true.108:                                    ; preds = %if.then.99
  %104 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any109 = getelementptr inbounds %struct.sv, %struct.sv* %104, i32 0, i32 0
  %105 = load i8*, i8** %sv_any109, align 8
  %106 = bitcast i8* %105 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %106, i32 0, i32 1
  %107 = load i64, i64* %xpv_cur, align 8
  store i64 %107, i64* %n_a, align 8
  %108 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any110 = getelementptr inbounds %struct.sv, %struct.sv* %108, i32 0, i32 0
  %109 = load i8*, i8** %sv_any110, align 8
  %110 = bitcast i8* %109 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %110, i32 0, i32 0
  %111 = load i8*, i8** %xpv_pv, align 8
  br label %cond.end.113

cond.false.111:                                   ; preds = %if.then.99
  %112 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %call112 = call i8* @Perl_sv_2pv_flags(%struct.sv* %112, i64* %n_a, i32 2)
  br label %cond.end.113

cond.end.113:                                     ; preds = %cond.false.111, %cond.true.108
  %cond114 = phi i8* [ %111, %cond.true.108 ], [ %call112, %cond.false.111 ]
  store i8* %cond114, i8** %msg, align 8
  %113 = load i8*, i8** %msg, align 8
  %114 = load i8, i8* %113, align 1
  %conv115 = sext i8 %114 to i32
  %tobool116 = icmp ne i32 %conv115, 0
  br i1 %tobool116, label %cond.true.117, label %cond.false.118

cond.true.117:                                    ; preds = %cond.end.113
  %115 = load i8*, i8** %msg, align 8
  br label %cond.end.119

cond.false.118:                                   ; preds = %cond.end.113
  br label %cond.end.119

cond.end.119:                                     ; preds = %cond.false.118, %cond.true.117
  %cond120 = phi i8* [ %115, %cond.true.117 ], [ getelementptr inbounds ([15 x i8], [15 x i8]* @.str.19, i32 0, i32 0), %cond.false.118 ]
  %call121 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.18, i32 0, i32 0), i8* %cond120)
  store %struct.op* %call121, %struct.op** %retval
  br label %return

if.else.122:                                      ; preds = %if.end.96
  %116 = load %struct.op**, %struct.op*** %startop.addr, align 8
  %tobool123 = icmp ne %struct.op** %116, null
  br i1 %tobool123, label %if.then.124, label %if.else.209

if.then.124:                                      ; preds = %if.else.122
  %117 = load %struct.gv*, %struct.gv** @PL_errgv, align 8
  %sv_any127 = getelementptr inbounds %struct.gv, %struct.gv* %117, i32 0, i32 0
  %118 = load %struct.xpvgv*, %struct.xpvgv** %sv_any127, align 8
  %xgv_gp128 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %118, i32 0, i32 7
  %119 = load %struct.gp*, %struct.gp** %xgv_gp128, align 8
  %gp_sv129 = getelementptr inbounds %struct.gp, %struct.gp* %119, i32 0, i32 0
  %120 = load %struct.sv*, %struct.sv** %gp_sv129, align 8
  store %struct.sv* %120, %struct.sv** @PL_Sv, align 8
  %121 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags130 = getelementptr inbounds %struct.sv, %struct.sv* %121, i32 0, i32 2
  %122 = load i32, i32* %sv_flags130, align 4
  %and131 = and i32 %122, 262144
  %cmp132 = icmp eq i32 %and131, 262144
  br i1 %cmp132, label %cond.true.134, label %cond.false.139

cond.true.134:                                    ; preds = %if.then.124
  %123 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any135 = getelementptr inbounds %struct.sv, %struct.sv* %123, i32 0, i32 0
  %124 = load i8*, i8** %sv_any135, align 8
  %125 = bitcast i8* %124 to %struct.xpv*
  %xpv_cur136 = getelementptr inbounds %struct.xpv, %struct.xpv* %125, i32 0, i32 1
  %126 = load i64, i64* %xpv_cur136, align 8
  store i64 %126, i64* %n_a, align 8
  %127 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any137 = getelementptr inbounds %struct.sv, %struct.sv* %127, i32 0, i32 0
  %128 = load i8*, i8** %sv_any137, align 8
  %129 = bitcast i8* %128 to %struct.xpv*
  %xpv_pv138 = getelementptr inbounds %struct.xpv, %struct.xpv* %129, i32 0, i32 0
  %130 = load i8*, i8** %xpv_pv138, align 8
  br label %cond.end.141

cond.false.139:                                   ; preds = %if.then.124
  %131 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %call140 = call i8* @Perl_sv_2pv_flags(%struct.sv* %131, i64* %n_a, i32 2)
  br label %cond.end.141

cond.end.141:                                     ; preds = %cond.false.139, %cond.true.134
  %cond142 = phi i8* [ %130, %cond.true.134 ], [ %call140, %cond.false.139 ]
  store i8* %cond142, i8** %msg126, align 8
  %132 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix143 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %132, i32 0, i32 2
  %133 = load i32, i32* %si_cxix143, align 4
  %dec144 = add nsw i32 %133, -1
  store i32 %dec144, i32* %si_cxix143, align 4
  %idxprom145 = sext i32 %133 to i64
  %134 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxstack146 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %134, i32 0, i32 1
  %135 = load %struct.context*, %struct.context** %si_cxstack146, align 8
  %arrayidx147 = getelementptr inbounds %struct.context, %struct.context* %135, i64 %idxprom145
  store %struct.context* %arrayidx147, %struct.context** %cx, align 8
  %136 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %137 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u148 = getelementptr inbounds %struct.context, %struct.context* %137, i32 0, i32 1
  %cx_blk149 = bitcast %union.anon* %cx_u148 to %struct.block*
  %blku_oldsp150 = getelementptr inbounds %struct.block, %struct.block* %cx_blk149, i32 0, i32 0
  %138 = load i32, i32* %blku_oldsp150, align 4
  %idx.ext151 = sext i32 %138 to i64
  %add.ptr152 = getelementptr inbounds %struct.sv*, %struct.sv** %136, i64 %idx.ext151
  store %struct.sv** %add.ptr152, %struct.sv*** %newsp, align 8
  %139 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u153 = getelementptr inbounds %struct.context, %struct.context* %139, i32 0, i32 1
  %cx_blk154 = bitcast %union.anon* %cx_u153 to %struct.block*
  %blku_oldcop155 = getelementptr inbounds %struct.block, %struct.block* %cx_blk154, i32 0, i32 1
  %140 = load %struct.cop*, %struct.cop** %blku_oldcop155, align 8
  store volatile %struct.cop* %140, %struct.cop** @PL_curcop, align 8
  %141 = load i32*, i32** @PL_markstack, align 8
  %142 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u156 = getelementptr inbounds %struct.context, %struct.context* %142, i32 0, i32 1
  %cx_blk157 = bitcast %union.anon* %cx_u156 to %struct.block*
  %blku_oldmarksp158 = getelementptr inbounds %struct.block, %struct.block* %cx_blk157, i32 0, i32 3
  %143 = load i32, i32* %blku_oldmarksp158, align 4
  %idx.ext159 = sext i32 %143 to i64
  %add.ptr160 = getelementptr inbounds i32, i32* %141, i64 %idx.ext159
  store i32* %add.ptr160, i32** @PL_markstack_ptr, align 8
  %144 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u161 = getelementptr inbounds %struct.context, %struct.context* %144, i32 0, i32 1
  %cx_blk162 = bitcast %union.anon* %cx_u161 to %struct.block*
  %blku_oldscopesp163 = getelementptr inbounds %struct.block, %struct.block* %cx_blk162, i32 0, i32 4
  %145 = load i32, i32* %blku_oldscopesp163, align 4
  store i32 %145, i32* @PL_scopestack_ix, align 4
  %146 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u164 = getelementptr inbounds %struct.context, %struct.context* %146, i32 0, i32 1
  %cx_blk165 = bitcast %union.anon* %cx_u164 to %struct.block*
  %blku_oldretsp166 = getelementptr inbounds %struct.block, %struct.block* %cx_blk165, i32 0, i32 2
  %147 = load i32, i32* %blku_oldretsp166, align 4
  store i32 %147, i32* @PL_retstack_ix, align 4
  %148 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u167 = getelementptr inbounds %struct.context, %struct.context* %148, i32 0, i32 1
  %cx_blk168 = bitcast %union.anon* %cx_u167 to %struct.block*
  %blku_oldpm169 = getelementptr inbounds %struct.block, %struct.block* %cx_blk168, i32 0, i32 5
  %149 = load %struct.pmop*, %struct.pmop** %blku_oldpm169, align 8
  store %struct.pmop* %149, %struct.pmop** @PL_curpm, align 8
  %150 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u170 = getelementptr inbounds %struct.context, %struct.context* %150, i32 0, i32 1
  %cx_blk171 = bitcast %union.anon* %cx_u170 to %struct.block*
  %blku_gimme172 = getelementptr inbounds %struct.block, %struct.block* %cx_blk171, i32 0, i32 6
  %151 = load i8, i8* %blku_gimme172, align 1
  %conv173 = zext i8 %151 to i32
  store i32 %conv173, i32* %gimme.addr, align 4
  %152 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u174 = getelementptr inbounds %struct.context, %struct.context* %152, i32 0, i32 1
  %cx_blk175 = bitcast %union.anon* %cx_u174 to %struct.block*
  %blk_u176 = getelementptr inbounds %struct.block, %struct.block* %cx_blk175, i32 0, i32 7
  %blku_eval177 = bitcast %union.anon.1* %blk_u176 to %struct.block_eval*
  %old_in_eval178 = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval177, i32 0, i32 0
  %153 = load i32, i32* %old_in_eval178, align 4
  store volatile i32 %153, i32* @PL_in_eval, align 4
  %154 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u179 = getelementptr inbounds %struct.context, %struct.context* %154, i32 0, i32 1
  %cx_blk180 = bitcast %union.anon* %cx_u179 to %struct.block*
  %blk_u181 = getelementptr inbounds %struct.block, %struct.block* %cx_blk180, i32 0, i32 7
  %blku_eval182 = bitcast %union.anon.1* %blk_u181 to %struct.block_eval*
  %old_op_type183 = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval182, i32 0, i32 1
  %155 = load i32, i32* %old_op_type183, align 4
  store i32 %155, i32* %optype, align 4
  %156 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u184 = getelementptr inbounds %struct.context, %struct.context* %156, i32 0, i32 1
  %cx_blk185 = bitcast %union.anon* %cx_u184 to %struct.block*
  %blk_u186 = getelementptr inbounds %struct.block, %struct.block* %cx_blk185, i32 0, i32 7
  %blku_eval187 = bitcast %union.anon.1* %blk_u186 to %struct.block_eval*
  %old_eval_root188 = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval187, i32 0, i32 3
  %157 = load %struct.op*, %struct.op** %old_eval_root188, align 8
  store %struct.op* %157, %struct.op** @PL_eval_root, align 8
  %158 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u189 = getelementptr inbounds %struct.context, %struct.context* %158, i32 0, i32 1
  %cx_blk190 = bitcast %union.anon* %cx_u189 to %struct.block*
  %blk_u191 = getelementptr inbounds %struct.block, %struct.block* %cx_blk190, i32 0, i32 7
  %blku_eval192 = bitcast %union.anon.1* %blk_u191 to %struct.block_eval*
  %old_namesv193 = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval192, i32 0, i32 2
  %159 = load %struct.sv*, %struct.sv** %old_namesv193, align 8
  %tobool194 = icmp ne %struct.sv* %159, null
  br i1 %tobool194, label %if.then.195, label %if.end.202

if.then.195:                                      ; preds = %cond.end.141
  %160 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u196 = getelementptr inbounds %struct.context, %struct.context* %160, i32 0, i32 1
  %cx_blk197 = bitcast %union.anon* %cx_u196 to %struct.block*
  %blk_u198 = getelementptr inbounds %struct.block, %struct.block* %cx_blk197, i32 0, i32 7
  %blku_eval199 = bitcast %union.anon.1* %blk_u198 to %struct.block_eval*
  %old_namesv200 = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval199, i32 0, i32 2
  %161 = load %struct.sv*, %struct.sv** %old_namesv200, align 8
  %call201 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %161)
  br label %if.end.202

if.end.202:                                       ; preds = %if.then.195, %cond.end.141
  %162 = load i8*, i8** %msg126, align 8
  %163 = load i8, i8* %162, align 1
  %conv203 = sext i8 %163 to i32
  %tobool204 = icmp ne i32 %conv203, 0
  br i1 %tobool204, label %cond.true.205, label %cond.false.206

cond.true.205:                                    ; preds = %if.end.202
  %164 = load i8*, i8** %msg126, align 8
  br label %cond.end.207

cond.false.206:                                   ; preds = %if.end.202
  br label %cond.end.207

cond.end.207:                                     ; preds = %cond.false.206, %cond.true.205
  %cond208 = phi i8* [ %164, %cond.true.205 ], [ getelementptr inbounds ([15 x i8], [15 x i8]* @.str.19, i32 0, i32 0), %cond.false.206 ]
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.79, i32 0, i32 0), i8* %cond208)
  br label %if.end.234

if.else.209:                                      ; preds = %if.else.122
  %165 = load %struct.gv*, %struct.gv** @PL_errgv, align 8
  %sv_any212 = getelementptr inbounds %struct.gv, %struct.gv* %165, i32 0, i32 0
  %166 = load %struct.xpvgv*, %struct.xpvgv** %sv_any212, align 8
  %xgv_gp213 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %166, i32 0, i32 7
  %167 = load %struct.gp*, %struct.gp** %xgv_gp213, align 8
  %gp_sv214 = getelementptr inbounds %struct.gp, %struct.gp* %167, i32 0, i32 0
  %168 = load %struct.sv*, %struct.sv** %gp_sv214, align 8
  store %struct.sv* %168, %struct.sv** @PL_Sv, align 8
  %169 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags215 = getelementptr inbounds %struct.sv, %struct.sv* %169, i32 0, i32 2
  %170 = load i32, i32* %sv_flags215, align 4
  %and216 = and i32 %170, 262144
  %cmp217 = icmp eq i32 %and216, 262144
  br i1 %cmp217, label %cond.true.219, label %cond.false.224

cond.true.219:                                    ; preds = %if.else.209
  %171 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any220 = getelementptr inbounds %struct.sv, %struct.sv* %171, i32 0, i32 0
  %172 = load i8*, i8** %sv_any220, align 8
  %173 = bitcast i8* %172 to %struct.xpv*
  %xpv_cur221 = getelementptr inbounds %struct.xpv, %struct.xpv* %173, i32 0, i32 1
  %174 = load i64, i64* %xpv_cur221, align 8
  store i64 %174, i64* %n_a, align 8
  %175 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any222 = getelementptr inbounds %struct.sv, %struct.sv* %175, i32 0, i32 0
  %176 = load i8*, i8** %sv_any222, align 8
  %177 = bitcast i8* %176 to %struct.xpv*
  %xpv_pv223 = getelementptr inbounds %struct.xpv, %struct.xpv* %177, i32 0, i32 0
  %178 = load i8*, i8** %xpv_pv223, align 8
  br label %cond.end.226

cond.false.224:                                   ; preds = %if.else.209
  %179 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %call225 = call i8* @Perl_sv_2pv_flags(%struct.sv* %179, i64* %n_a, i32 2)
  br label %cond.end.226

cond.end.226:                                     ; preds = %cond.false.224, %cond.true.219
  %cond227 = phi i8* [ %178, %cond.true.219 ], [ %call225, %cond.false.224 ]
  store i8* %cond227, i8** %msg211, align 8
  %180 = load i8*, i8** %msg211, align 8
  %181 = load i8, i8* %180, align 1
  %tobool228 = icmp ne i8 %181, 0
  br i1 %tobool228, label %if.end.233, label %if.then.229

if.then.229:                                      ; preds = %cond.end.226
  %182 = load %struct.gv*, %struct.gv** @PL_errgv, align 8
  %sv_any230 = getelementptr inbounds %struct.gv, %struct.gv* %182, i32 0, i32 0
  %183 = load %struct.xpvgv*, %struct.xpvgv** %sv_any230, align 8
  %xgv_gp231 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %183, i32 0, i32 7
  %184 = load %struct.gp*, %struct.gp** %xgv_gp231, align 8
  %gp_sv232 = getelementptr inbounds %struct.gp, %struct.gp* %184, i32 0, i32 0
  %185 = load %struct.sv*, %struct.sv** %gp_sv232, align 8
  call void @Perl_sv_setpv(%struct.sv* %185, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.80, i32 0, i32 0))
  br label %if.end.233

if.end.233:                                       ; preds = %if.then.229, %cond.end.226
  br label %if.end.234

if.end.234:                                       ; preds = %if.end.233, %cond.end.207
  br label %if.end.235

if.end.235:                                       ; preds = %if.end.234
  %186 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr236 = getelementptr inbounds %struct.sv*, %struct.sv** %186, i32 1
  store %struct.sv** %incdec.ptr236, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %incdec.ptr236, align 8
  %187 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %187, %struct.sv*** @PL_stack_sp, align 8
  %188 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %188, i32 0, i32 0
  %189 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %189, %struct.op** %retval
  br label %return

if.end.237:                                       ; preds = %lor.lhs.false.34
  store i32 0, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 13), align 4
  %190 = load %struct.op**, %struct.op*** %startop.addr, align 8
  %tobool238 = icmp ne %struct.op** %190, null
  br i1 %tobool238, label %if.then.239, label %if.else.240

if.then.239:                                      ; preds = %if.end.237
  %191 = load %struct.op*, %struct.op** @PL_eval_root, align 8
  %192 = load %struct.op**, %struct.op*** %startop.addr, align 8
  store %struct.op* %191, %struct.op** %192, align 8
  br label %if.end.241

if.else.240:                                      ; preds = %if.end.237
  %193 = load %struct.op*, %struct.op** @PL_eval_root, align 8
  call void @Perl_save_freeop(%struct.op* %193)
  br label %if.end.241

if.end.241:                                       ; preds = %if.else.240, %if.then.239
  %194 = load %struct.op*, %struct.op** @PL_eval_root, align 8
  %op_type242 = getelementptr inbounds %struct.op, %struct.op* %194, i32 0, i32 4
  %195 = load i16, i16* %op_type242, align 2
  %conv243 = zext i16 %195 to i32
  %cmp244 = icmp eq i32 %conv243, 312
  br i1 %cmp244, label %land.lhs.true.246, label %if.else.259

land.lhs.true.246:                                ; preds = %if.end.241
  %196 = load %struct.op*, %struct.op** @PL_eval_root, align 8
  %197 = bitcast %struct.op* %196 to %struct.unop*
  %op_first = getelementptr inbounds %struct.unop, %struct.unop* %197, i32 0, i32 8
  %198 = load %struct.op*, %struct.op** %op_first, align 8
  %op_type247 = getelementptr inbounds %struct.op, %struct.op* %198, i32 0, i32 4
  %199 = load i16, i16* %op_type247, align 2
  %conv248 = zext i16 %199 to i32
  %cmp249 = icmp eq i32 %conv248, 173
  br i1 %cmp249, label %land.lhs.true.251, label %if.else.259

land.lhs.true.251:                                ; preds = %land.lhs.true.246
  %200 = load %struct.op*, %struct.op** @PL_eval_root, align 8
  %201 = bitcast %struct.op* %200 to %struct.unop*
  %op_first252 = getelementptr inbounds %struct.unop, %struct.unop* %201, i32 0, i32 8
  %202 = load %struct.op*, %struct.op** %op_first252, align 8
  %203 = bitcast %struct.op* %202 to %struct.listop*
  %op_last = getelementptr inbounds %struct.listop, %struct.listop* %203, i32 0, i32 9
  %204 = load %struct.op*, %struct.op** %op_last, align 8
  %op_type253 = getelementptr inbounds %struct.op, %struct.op* %204, i32 0, i32 4
  %205 = load i16, i16* %op_type253, align 2
  %conv254 = zext i16 %205 to i32
  %cmp255 = icmp eq i32 %conv254, 309
  br i1 %cmp255, label %if.then.257, label %if.else.259

if.then.257:                                      ; preds = %land.lhs.true.251
  %206 = load %struct.op*, %struct.op** @PL_eval_root, align 8
  %call258 = call %struct.op* @Perl_scalar(%struct.op* %206)
  br label %if.end.273

if.else.259:                                      ; preds = %land.lhs.true.251, %land.lhs.true.246, %if.end.241
  %207 = load i32, i32* %gimme.addr, align 4
  %and260 = and i32 %207, 128
  %tobool261 = icmp ne i32 %and260, 0
  br i1 %tobool261, label %if.then.262, label %if.else.264

if.then.262:                                      ; preds = %if.else.259
  %208 = load %struct.op*, %struct.op** @PL_eval_root, align 8
  %call263 = call %struct.op* @Perl_scalarvoid(%struct.op* %208)
  br label %if.end.272

if.else.264:                                      ; preds = %if.else.259
  %209 = load i32, i32* %gimme.addr, align 4
  %and265 = and i32 %209, 1
  %tobool266 = icmp ne i32 %and265, 0
  br i1 %tobool266, label %if.then.267, label %if.else.269

if.then.267:                                      ; preds = %if.else.264
  %210 = load %struct.op*, %struct.op** @PL_eval_root, align 8
  %call268 = call %struct.op* @Perl_list(%struct.op* %210)
  br label %if.end.271

if.else.269:                                      ; preds = %if.else.264
  %211 = load %struct.op*, %struct.op** @PL_eval_root, align 8
  %call270 = call %struct.op* @Perl_scalar(%struct.op* %211)
  br label %if.end.271

if.end.271:                                       ; preds = %if.else.269, %if.then.267
  br label %if.end.272

if.end.272:                                       ; preds = %if.end.271, %if.then.262
  br label %if.end.273

if.end.273:                                       ; preds = %if.end.272, %if.then.257
  %212 = load i32, i32* @PL_perldb, align 4
  %tobool274 = icmp ne i32 %212, 0
  br i1 %tobool274, label %land.lhs.true.275, label %if.end.315

land.lhs.true.275:                                ; preds = %if.end.273
  %213 = load i32, i32* @PL_perldb, align 4
  %and276 = and i32 %213, 8
  %tobool277 = icmp ne i32 %and276, 0
  br i1 %tobool277, label %land.lhs.true.278, label %if.end.315

land.lhs.true.278:                                ; preds = %land.lhs.true.275
  %214 = load %struct.op*, %struct.op** %saveop, align 8
  %op_type279 = getelementptr inbounds %struct.op, %struct.op* %214, i32 0, i32 4
  %215 = load i16, i16* %op_type279, align 2
  %conv280 = zext i16 %215 to i32
  %cmp281 = icmp eq i32 %conv280, 309
  br i1 %cmp281, label %if.then.283, label %if.end.315

if.then.283:                                      ; preds = %land.lhs.true.278
  %call286 = call %struct.cv* @Perl_get_cv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.81, i32 0, i32 0), i32 0)
  store %struct.cv* %call286, %struct.cv** %cv285, align 8
  %216 = load %struct.cv*, %struct.cv** %cv285, align 8
  %tobool287 = icmp ne %struct.cv* %216, null
  br i1 %tobool287, label %if.then.288, label %if.end.314

if.then.288:                                      ; preds = %if.then.283
  %217 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %217, %struct.sv*** %sp290, align 8
  %218 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr291 = getelementptr inbounds i32, i32* %218, i32 1
  store i32* %incdec.ptr291, i32** @PL_markstack_ptr, align 8
  %219 = load i32*, i32** @PL_markstack_max, align 8
  %cmp292 = icmp eq i32* %incdec.ptr291, %219
  br i1 %cmp292, label %if.then.294, label %if.end.295

if.then.294:                                      ; preds = %if.then.288
  call void @Perl_markstack_grow()
  br label %if.end.295

if.end.295:                                       ; preds = %if.then.294, %if.then.288
  %220 = load %struct.sv**, %struct.sv*** %sp290, align 8
  %221 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast297 = ptrtoint %struct.sv** %220 to i64
  %sub.ptr.rhs.cast298 = ptrtoint %struct.sv** %221 to i64
  %sub.ptr.sub299 = sub i64 %sub.ptr.lhs.cast297, %sub.ptr.rhs.cast298
  %sub.ptr.div300 = sdiv exact i64 %sub.ptr.sub299, 8
  %conv301 = trunc i64 %sub.ptr.div300 to i32
  %222 = load i32*, i32** @PL_markstack_ptr, align 8
  store i32 %conv301, i32* %222, align 4
  store i32 %conv301, i32* %tmp296
  %223 = load i32, i32* %tmp296
  %224 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %225 = load %struct.sv**, %struct.sv*** %sp290, align 8
  %sub.ptr.lhs.cast302 = ptrtoint %struct.sv** %224 to i64
  %sub.ptr.rhs.cast303 = ptrtoint %struct.sv** %225 to i64
  %sub.ptr.sub304 = sub i64 %sub.ptr.lhs.cast302, %sub.ptr.rhs.cast303
  %sub.ptr.div305 = sdiv exact i64 %sub.ptr.sub304, 8
  %cmp306 = icmp slt i64 %sub.ptr.div305, 1
  br i1 %cmp306, label %if.then.308, label %if.end.310

if.then.308:                                      ; preds = %if.end.295
  %226 = load %struct.sv**, %struct.sv*** %sp290, align 8
  %227 = load %struct.sv**, %struct.sv*** %sp290, align 8
  %call309 = call %struct.sv** @Perl_stack_grow(%struct.sv** %226, %struct.sv** %227, i32 1)
  store %struct.sv** %call309, %struct.sv*** %sp290, align 8
  br label %if.end.310

if.end.310:                                       ; preds = %if.then.308, %if.end.295
  %228 = load %struct.gv*, %struct.gv** getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %229 = bitcast %struct.gv* %228 to %struct.sv*
  %230 = load %struct.sv**, %struct.sv*** %sp290, align 8
  %incdec.ptr312 = getelementptr inbounds %struct.sv*, %struct.sv** %230, i32 1
  store %struct.sv** %incdec.ptr312, %struct.sv*** %sp290, align 8
  store %struct.sv* %229, %struct.sv** %incdec.ptr312, align 8
  store %struct.sv* %229, %struct.sv** %tmp311
  %231 = load %struct.sv*, %struct.sv** %tmp311
  %232 = load %struct.sv**, %struct.sv*** %sp290, align 8
  store %struct.sv** %232, %struct.sv*** @PL_stack_sp, align 8
  %233 = load %struct.cv*, %struct.cv** %cv285, align 8
  %234 = bitcast %struct.cv* %233 to %struct.sv*
  %call313 = call i32 @Perl_call_sv(%struct.sv* %234, i32 2)
  br label %if.end.314

if.end.314:                                       ; preds = %if.end.310, %if.then.283
  br label %if.end.315

if.end.315:                                       ; preds = %if.end.314, %land.lhs.true.278, %land.lhs.true.275, %if.end.273
  %235 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %sv_any316 = getelementptr inbounds %struct.cv, %struct.cv* %235, i32 0, i32 0
  %236 = load %struct.xpvcv*, %struct.xpvcv** %sv_any316, align 8
  %xcv_depth = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %236, i32 0, i32 14
  store i64 1, i64* %xcv_depth, align 8
  %237 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %238 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr317 = getelementptr inbounds i32, i32* %238, i32 -1
  store i32* %incdec.ptr317, i32** @PL_markstack_ptr, align 8
  %239 = load i32, i32* %238, align 4
  %idx.ext318 = sext i32 %239 to i64
  %add.ptr319 = getelementptr inbounds %struct.sv*, %struct.sv** %237, i64 %idx.ext318
  store %struct.sv** %add.ptr319, %struct.sv*** %sp, align 8
  %240 = load %struct.op*, %struct.op** %saveop, align 8
  store %struct.op* %240, %struct.op** @PL_op, align 8
  store i32 11, i32* @PL_lex_state, align 4
  %241 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %241, %struct.sv*** @PL_stack_sp, align 8
  %242 = load %struct.op*, %struct.op** @PL_eval_start, align 8
  store %struct.op* %242, %struct.op** %retval
  br label %return

return:                                           ; preds = %if.end.315, %if.end.235, %cond.end.119
  %243 = load %struct.op*, %struct.op** %retval
  ret %struct.op* %243
}

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_require() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %cx = alloca %struct.context*, align 8
  %sv = alloca %struct.sv*, align 8
  %name = alloca i8*, align 8
  %len = alloca i64, align 8
  %tryname = alloca i8*, align 8
  %namesv = alloca %struct.sv*, align 8
  %svp = alloca %struct.sv**, align 8
  %gimme = alloca i32, align 4
  %tryrsfp = alloca %struct._PerlIO**, align 8
  %n_a = alloca i64, align 8
  %filter_has_file = alloca i32, align 4
  %filter_child_proc = alloca %struct.gv*, align 8
  %filter_state = alloca %struct.sv*, align 8
  %filter_sub = alloca %struct.sv*, align 8
  %hook_sv = alloca %struct.sv*, align 8
  %encoding = alloca %struct.sv*, align 8
  %op = alloca %struct.op*, align 8
  %rev = alloca i64, align 8
  %ver = alloca i64, align 8
  %sver = alloca i64, align 8
  %len41 = alloca i64, align 8
  %s = alloca i8*, align 8
  %end = alloca i8*, align 8
  %nrev = alloca double, align 8
  %rev112 = alloca i64, align 8
  %nver = alloca double, align 8
  %ver115 = alloca i64, align 8
  %nsver = alloca double, align 8
  %sver120 = alloca i64, align 8
  %ar = alloca %struct.av*, align 8
  %i = alloca i32, align 4
  %dirsv = alloca %struct.sv*, align 8
  %count = alloca i32, align 4
  %loader = alloca %struct.sv*, align 8
  %tmp = alloca i32, align 4
  %i286 = alloca i32, align 4
  %arg = alloca %struct.sv*, align 8
  %io = alloca %struct.io*, align 8
  %dir = alloca i8*, align 8
  %msgstr = alloca i8*, align 8
  %msg = alloca %struct.sv*, align 8
  %dirmsgsv = alloca %struct.sv*, align 8
  %ar494 = alloca %struct.av*, align 8
  %i511 = alloca i32, align 4
  %dir541 = alloca i8*, align 8
  %tmp678 = alloca i32, align 4
  %datasv = alloca %struct.sv*, align 8
  %tmp775 = alloca %struct.cv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  store i8* null, i8** %tryname, align 8
  store %struct.sv* null, %struct.sv** %namesv, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 6
  %2 = load i8, i8* %op_flags, align 1
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 3
  %cmp = icmp eq i32 %and, 1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end.18

cond.false:                                       ; preds = %entry
  %3 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags2 = getelementptr inbounds %struct.op, %struct.op* %3, i32 0, i32 6
  %4 = load i8, i8* %op_flags2, align 1
  %conv3 = zext i8 %4 to i32
  %and4 = and i32 %conv3, 3
  %cmp5 = icmp eq i32 %and4, 2
  br i1 %cmp5, label %cond.true.7, label %cond.false.8

cond.true.7:                                      ; preds = %cond.false
  br label %cond.end.16

cond.false.8:                                     ; preds = %cond.false
  %5 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags9 = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 6
  %6 = load i8, i8* %op_flags9, align 1
  %conv10 = zext i8 %6 to i32
  %and11 = and i32 %conv10, 3
  %cmp12 = icmp eq i32 %and11, 3
  br i1 %cmp12, label %cond.true.14, label %cond.false.15

cond.true.14:                                     ; preds = %cond.false.8
  br label %cond.end

cond.false.15:                                    ; preds = %cond.false.8
  %call = call i32 @Perl_block_gimme()
  br label %cond.end

cond.end:                                         ; preds = %cond.false.15, %cond.true.14
  %cond = phi i32 [ 1, %cond.true.14 ], [ %call, %cond.false.15 ]
  br label %cond.end.16

cond.end.16:                                      ; preds = %cond.end, %cond.true.7
  %cond17 = phi i32 [ 0, %cond.true.7 ], [ %cond, %cond.end ]
  br label %cond.end.18

cond.end.18:                                      ; preds = %cond.end.16, %cond.true
  %cond19 = phi i32 [ 128, %cond.true ], [ %cond17, %cond.end.16 ]
  store i32 %cond19, i32* %gimme, align 4
  store %struct._PerlIO** null, %struct._PerlIO*** %tryrsfp, align 8
  store i32 0, i32* %filter_has_file, align 4
  store %struct.gv* null, %struct.gv** %filter_child_proc, align 8
  store %struct.sv* null, %struct.sv** %filter_state, align 8
  store %struct.sv* null, %struct.sv** %filter_sub, align 8
  store %struct.sv* null, %struct.sv** %hook_sv, align 8
  %7 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %7, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %8 = load %struct.sv*, %struct.sv** %7, align 8
  store %struct.sv* %8, %struct.sv** %sv, align 8
  %9 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 2
  %10 = load i32, i32* %sv_flags, align 4
  %and20 = and i32 %10, 50331648
  %tobool = icmp ne i32 %and20, 0
  br i1 %tobool, label %land.lhs.true, label %if.end.143

land.lhs.true:                                    ; preds = %cond.end.18
  %11 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %11, i32 0, i32 4
  %12 = load i16, i16* %op_type, align 2
  %conv21 = zext i16 %12 to i32
  %cmp22 = icmp ne i32 %conv21, 310
  br i1 %cmp22, label %if.then, label %if.end.143

if.then:                                          ; preds = %land.lhs.true
  %13 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags24 = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 2
  %14 = load i32, i32* %sv_flags24, align 4
  %and25 = and i32 %14, 262144
  %tobool26 = icmp ne i32 %and25, 0
  br i1 %tobool26, label %land.lhs.true.27, label %if.else

land.lhs.true.27:                                 ; preds = %if.then
  %15 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags28 = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 2
  %16 = load i32, i32* %sv_flags28, align 4
  %and29 = and i32 %16, 131072
  %tobool30 = icmp ne i32 %and29, 0
  br i1 %tobool30, label %land.lhs.true.31, label %if.else

land.lhs.true.31:                                 ; preds = %land.lhs.true.27
  %17 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags32 = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 2
  %18 = load i32, i32* %sv_flags32, align 4
  %and33 = and i32 %18, 131072
  %tobool34 = icmp ne i32 %and33, 0
  br i1 %tobool34, label %cond.true.35, label %cond.false.37

cond.true.35:                                     ; preds = %land.lhs.true.31
  %19 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 0
  %20 = load i8*, i8** %sv_any, align 8
  %21 = bitcast i8* %20 to %struct.xpvnv*
  %xnv_nv = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %21, i32 0, i32 4
  %22 = load double, double* %xnv_nv, align 8
  %tobool36 = fcmp une double %22, 0.000000e+00
  br i1 %tobool36, label %if.then.40, label %if.else

cond.false.37:                                    ; preds = %land.lhs.true.31
  %23 = load %struct.sv*, %struct.sv** %sv, align 8
  %call38 = call double @Perl_sv_2nv(%struct.sv* %23)
  %tobool39 = fcmp une double %call38, 0.000000e+00
  br i1 %tobool39, label %if.then.40, label %if.else

if.then.40:                                       ; preds = %cond.false.37, %cond.true.35
  store i64 0, i64* %rev, align 8
  store i64 0, i64* %ver, align 8
  store i64 0, i64* %sver, align 8
  %24 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any42 = getelementptr inbounds %struct.sv, %struct.sv* %24, i32 0, i32 0
  %25 = load i8*, i8** %sv_any42, align 8
  %26 = bitcast i8* %25 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %26, i32 0, i32 0
  %27 = load i8*, i8** %xpv_pv, align 8
  store i8* %27, i8** %s, align 8
  %28 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any43 = getelementptr inbounds %struct.sv, %struct.sv* %28, i32 0, i32 0
  %29 = load i8*, i8** %sv_any43, align 8
  %30 = bitcast i8* %29 to %struct.xpv*
  %xpv_pv44 = getelementptr inbounds %struct.xpv, %struct.xpv* %30, i32 0, i32 0
  %31 = load i8*, i8** %xpv_pv44, align 8
  %32 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any45 = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 0
  %33 = load i8*, i8** %sv_any45, align 8
  %34 = bitcast i8* %33 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %34, i32 0, i32 1
  %35 = load i64, i64* %xpv_cur, align 8
  %add.ptr = getelementptr inbounds i8, i8* %31, i64 %35
  store i8* %add.ptr, i8** %end, align 8
  %36 = load i8*, i8** %s, align 8
  %37 = load i8*, i8** %end, align 8
  %cmp46 = icmp ult i8* %36, %37
  br i1 %cmp46, label %if.then.48, label %if.end.67

if.then.48:                                       ; preds = %if.then.40
  %38 = load i8*, i8** %s, align 8
  %39 = load i8*, i8** %end, align 8
  %40 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %39 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %40 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %call49 = call i64 @Perl_utf8n_to_uvuni(i8* %38, i64 %sub.ptr.sub, i64* %len41, i32 0)
  store i64 %call49, i64* %rev, align 8
  %41 = load i64, i64* %len41, align 8
  %42 = load i8*, i8** %s, align 8
  %add.ptr50 = getelementptr inbounds i8, i8* %42, i64 %41
  store i8* %add.ptr50, i8** %s, align 8
  %43 = load i8*, i8** %s, align 8
  %44 = load i8*, i8** %end, align 8
  %cmp51 = icmp ult i8* %43, %44
  br i1 %cmp51, label %if.then.53, label %if.end.66

if.then.53:                                       ; preds = %if.then.48
  %45 = load i8*, i8** %s, align 8
  %46 = load i8*, i8** %end, align 8
  %47 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast54 = ptrtoint i8* %46 to i64
  %sub.ptr.rhs.cast55 = ptrtoint i8* %47 to i64
  %sub.ptr.sub56 = sub i64 %sub.ptr.lhs.cast54, %sub.ptr.rhs.cast55
  %call57 = call i64 @Perl_utf8n_to_uvuni(i8* %45, i64 %sub.ptr.sub56, i64* %len41, i32 0)
  store i64 %call57, i64* %ver, align 8
  %48 = load i64, i64* %len41, align 8
  %49 = load i8*, i8** %s, align 8
  %add.ptr58 = getelementptr inbounds i8, i8* %49, i64 %48
  store i8* %add.ptr58, i8** %s, align 8
  %50 = load i8*, i8** %s, align 8
  %51 = load i8*, i8** %end, align 8
  %cmp59 = icmp ult i8* %50, %51
  br i1 %cmp59, label %if.then.61, label %if.end

if.then.61:                                       ; preds = %if.then.53
  %52 = load i8*, i8** %s, align 8
  %53 = load i8*, i8** %end, align 8
  %54 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast62 = ptrtoint i8* %53 to i64
  %sub.ptr.rhs.cast63 = ptrtoint i8* %54 to i64
  %sub.ptr.sub64 = sub i64 %sub.ptr.lhs.cast62, %sub.ptr.rhs.cast63
  %call65 = call i64 @Perl_utf8n_to_uvuni(i8* %52, i64 %sub.ptr.sub64, i64* %len41, i32 0)
  store i64 %call65, i64* %sver, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.61, %if.then.53
  br label %if.end.66

if.end.66:                                        ; preds = %if.end, %if.then.48
  br label %if.end.67

if.end.67:                                        ; preds = %if.end.66, %if.then.40
  %55 = load i64, i64* %rev, align 8
  %cmp68 = icmp ult i64 5, %55
  br i1 %cmp68, label %if.then.81, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.67
  %56 = load i64, i64* %rev, align 8
  %cmp70 = icmp eq i64 5, %56
  br i1 %cmp70, label %land.lhs.true.72, label %if.end.83

land.lhs.true.72:                                 ; preds = %lor.lhs.false
  %57 = load i64, i64* %ver, align 8
  %cmp73 = icmp ult i64 8, %57
  br i1 %cmp73, label %if.then.81, label %lor.lhs.false.75

lor.lhs.false.75:                                 ; preds = %land.lhs.true.72
  %58 = load i64, i64* %ver, align 8
  %cmp76 = icmp eq i64 8, %58
  br i1 %cmp76, label %land.lhs.true.78, label %if.end.83

land.lhs.true.78:                                 ; preds = %lor.lhs.false.75
  %59 = load i64, i64* %sver, align 8
  %cmp79 = icmp ult i64 7, %59
  br i1 %cmp79, label %if.then.81, label %if.end.83

if.then.81:                                       ; preds = %land.lhs.true.78, %land.lhs.true.72, %if.end.67
  %60 = load i64, i64* %rev, align 8
  %61 = load i64, i64* %ver, align 8
  %62 = load i64, i64* %sver, align 8
  %call82 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.49, i32 0, i32 0), i64 %60, i64 %61, i64 %62, i32 5, i32 8, i32 7)
  store %struct.op* %call82, %struct.op** %retval
  br label %return

if.end.83:                                        ; preds = %land.lhs.true.78, %lor.lhs.false.75, %lor.lhs.false
  %63 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr84 = getelementptr inbounds %struct.sv*, %struct.sv** %63, i32 1
  store %struct.sv** %incdec.ptr84, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_yes, %struct.sv** %incdec.ptr84, align 8
  %64 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %64, %struct.sv*** @PL_stack_sp, align 8
  %65 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %65, i32 0, i32 0
  %66 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %66, %struct.op** %retval
  br label %return

if.else:                                          ; preds = %cond.false.37, %cond.true.35, %land.lhs.true.27, %if.then
  %67 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags85 = getelementptr inbounds %struct.sv, %struct.sv* %67, i32 0, i32 2
  %68 = load i32, i32* %sv_flags85, align 4
  %and86 = and i32 %68, 67108864
  %tobool87 = icmp ne i32 %and86, 0
  br i1 %tobool87, label %if.end.141, label %if.then.88

if.then.88:                                       ; preds = %if.else
  %69 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags89 = getelementptr inbounds %struct.sv, %struct.sv* %69, i32 0, i32 2
  %70 = load i32, i32* %sv_flags89, align 4
  %and90 = and i32 %70, 131072
  %tobool91 = icmp ne i32 %and90, 0
  br i1 %tobool91, label %cond.true.92, label %cond.false.95

cond.true.92:                                     ; preds = %if.then.88
  %71 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any93 = getelementptr inbounds %struct.sv, %struct.sv* %71, i32 0, i32 0
  %72 = load i8*, i8** %sv_any93, align 8
  %73 = bitcast i8* %72 to %struct.xpvnv*
  %xnv_nv94 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %73, i32 0, i32 4
  %74 = load double, double* %xnv_nv94, align 8
  br label %cond.end.97

cond.false.95:                                    ; preds = %if.then.88
  %75 = load %struct.sv*, %struct.sv** %sv, align 8
  %call96 = call double @Perl_sv_2nv(%struct.sv* %75)
  br label %cond.end.97

cond.end.97:                                      ; preds = %cond.false.95, %cond.true.92
  %cond98 = phi double [ %74, %cond.true.92 ], [ %call96, %cond.false.95 ]
  %cmp99 = fcmp olt double 0x401408333F1CA075, %cond98
  br i1 %cmp99, label %if.then.101, label %if.end.138

if.then.101:                                      ; preds = %cond.end.97
  %76 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags102 = getelementptr inbounds %struct.sv, %struct.sv* %76, i32 0, i32 2
  %77 = load i32, i32* %sv_flags102, align 4
  %and103 = and i32 %77, 131072
  %tobool104 = icmp ne i32 %and103, 0
  br i1 %tobool104, label %cond.true.105, label %cond.false.108

cond.true.105:                                    ; preds = %if.then.101
  %78 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any106 = getelementptr inbounds %struct.sv, %struct.sv* %78, i32 0, i32 0
  %79 = load i8*, i8** %sv_any106, align 8
  %80 = bitcast i8* %79 to %struct.xpvnv*
  %xnv_nv107 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %80, i32 0, i32 4
  %81 = load double, double* %xnv_nv107, align 8
  br label %cond.end.110

cond.false.108:                                   ; preds = %if.then.101
  %82 = load %struct.sv*, %struct.sv** %sv, align 8
  %call109 = call double @Perl_sv_2nv(%struct.sv* %82)
  br label %cond.end.110

cond.end.110:                                     ; preds = %cond.false.108, %cond.true.105
  %cond111 = phi double [ %81, %cond.true.105 ], [ %call109, %cond.false.108 ]
  store double %cond111, double* %nrev, align 8
  %83 = load double, double* %nrev, align 8
  %conv113 = fptoui double %83 to i64
  store i64 %conv113, i64* %rev112, align 8
  %84 = load double, double* %nrev, align 8
  %85 = load i64, i64* %rev112, align 8
  %conv114 = uitofp i64 %85 to double
  %sub = fsub double %84, %conv114
  %mul = fmul double %sub, 1.000000e+03
  store double %mul, double* %nver, align 8
  %86 = load double, double* %nver, align 8
  %add = fadd double %86, 9.000000e-04
  %conv116 = fptoui double %add to i64
  store i64 %conv116, i64* %ver115, align 8
  %87 = load double, double* %nver, align 8
  %88 = load i64, i64* %ver115, align 8
  %conv117 = uitofp i64 %88 to double
  %sub118 = fsub double %87, %conv117
  %mul119 = fmul double %sub118, 1.000000e+03
  store double %mul119, double* %nsver, align 8
  %89 = load double, double* %nsver, align 8
  %add121 = fadd double %89, 9.000000e-04
  %conv122 = fptoui double %add121 to i64
  store i64 %conv122, i64* %sver120, align 8
  %90 = load i64, i64* %sver120, align 8
  %cmp123 = icmp eq i64 %90, 0
  br i1 %cmp123, label %land.lhs.true.125, label %if.else.136

land.lhs.true.125:                                ; preds = %cond.end.110
  %91 = load i64, i64* %rev112, align 8
  %cmp126 = icmp ugt i64 %91, 5
  br i1 %cmp126, label %if.then.134, label %lor.lhs.false.128

lor.lhs.false.128:                                ; preds = %land.lhs.true.125
  %92 = load i64, i64* %rev112, align 8
  %cmp129 = icmp eq i64 %92, 5
  br i1 %cmp129, label %land.lhs.true.131, label %if.else.136

land.lhs.true.131:                                ; preds = %lor.lhs.false.128
  %93 = load i64, i64* %ver115, align 8
  %cmp132 = icmp uge i64 %93, 100
  br i1 %cmp132, label %if.then.134, label %if.else.136

if.then.134:                                      ; preds = %land.lhs.true.131, %land.lhs.true.125
  %94 = load i64, i64* %rev112, align 8
  %95 = load i64, i64* %ver115, align 8
  %96 = load i64, i64* %sver120, align 8
  %97 = load i64, i64* %rev112, align 8
  %98 = load i64, i64* %ver115, align 8
  %div = udiv i64 %98, 100
  %call135 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([87 x i8], [87 x i8]* @.str.50, i32 0, i32 0), i64 %94, i64 %95, i64 %96, i64 %97, i64 %div, i32 5, i32 8, i32 7)
  store %struct.op* %call135, %struct.op** %retval
  br label %return

if.else.136:                                      ; preds = %land.lhs.true.131, %lor.lhs.false.128, %cond.end.110
  %99 = load i64, i64* %rev112, align 8
  %100 = load i64, i64* %ver115, align 8
  %101 = load i64, i64* %sver120, align 8
  %call137 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.49, i32 0, i32 0), i64 %99, i64 %100, i64 %101, i32 5, i32 8, i32 7)
  store %struct.op* %call137, %struct.op** %retval
  br label %return

if.end.138:                                       ; preds = %cond.end.97
  %102 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr139 = getelementptr inbounds %struct.sv*, %struct.sv** %102, i32 1
  store %struct.sv** %incdec.ptr139, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_yes, %struct.sv** %incdec.ptr139, align 8
  %103 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %103, %struct.sv*** @PL_stack_sp, align 8
  %104 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next140 = getelementptr inbounds %struct.op, %struct.op* %104, i32 0, i32 0
  %105 = load %struct.op*, %struct.op** %op_next140, align 8
  store %struct.op* %105, %struct.op** %retval
  br label %return

if.end.141:                                       ; preds = %if.else
  br label %if.end.142

if.end.142:                                       ; preds = %if.end.141
  br label %if.end.143

if.end.143:                                       ; preds = %if.end.142, %land.lhs.true, %cond.end.18
  %106 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags144 = getelementptr inbounds %struct.sv, %struct.sv* %106, i32 0, i32 2
  %107 = load i32, i32* %sv_flags144, align 4
  %and145 = and i32 %107, 262144
  %cmp146 = icmp eq i32 %and145, 262144
  br i1 %cmp146, label %cond.true.148, label %cond.false.153

cond.true.148:                                    ; preds = %if.end.143
  %108 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any149 = getelementptr inbounds %struct.sv, %struct.sv* %108, i32 0, i32 0
  %109 = load i8*, i8** %sv_any149, align 8
  %110 = bitcast i8* %109 to %struct.xpv*
  %xpv_cur150 = getelementptr inbounds %struct.xpv, %struct.xpv* %110, i32 0, i32 1
  %111 = load i64, i64* %xpv_cur150, align 8
  store i64 %111, i64* %len, align 8
  %112 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any151 = getelementptr inbounds %struct.sv, %struct.sv* %112, i32 0, i32 0
  %113 = load i8*, i8** %sv_any151, align 8
  %114 = bitcast i8* %113 to %struct.xpv*
  %xpv_pv152 = getelementptr inbounds %struct.xpv, %struct.xpv* %114, i32 0, i32 0
  %115 = load i8*, i8** %xpv_pv152, align 8
  br label %cond.end.155

cond.false.153:                                   ; preds = %if.end.143
  %116 = load %struct.sv*, %struct.sv** %sv, align 8
  %call154 = call i8* @Perl_sv_2pv_flags(%struct.sv* %116, i64* %len, i32 2)
  br label %cond.end.155

cond.end.155:                                     ; preds = %cond.false.153, %cond.true.148
  %cond156 = phi i8* [ %115, %cond.true.148 ], [ %call154, %cond.false.153 ]
  store i8* %cond156, i8** %name, align 8
  %117 = load i8*, i8** %name, align 8
  %tobool157 = icmp ne i8* %117, null
  br i1 %tobool157, label %land.lhs.true.158, label %if.then.164

land.lhs.true.158:                                ; preds = %cond.end.155
  %118 = load i64, i64* %len, align 8
  %cmp159 = icmp ugt i64 %118, 0
  br i1 %cmp159, label %land.lhs.true.161, label %if.then.164

land.lhs.true.161:                                ; preds = %land.lhs.true.158
  %119 = load i8*, i8** %name, align 8
  %120 = load i8, i8* %119, align 1
  %conv162 = sext i8 %120 to i32
  %tobool163 = icmp ne i32 %conv162, 0
  br i1 %tobool163, label %if.end.166, label %if.then.164

if.then.164:                                      ; preds = %land.lhs.true.161, %land.lhs.true.158, %cond.end.155
  %call165 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.51, i32 0, i32 0))
  store %struct.op* %call165, %struct.op** %retval
  br label %return

if.end.166:                                       ; preds = %land.lhs.true.161
  %121 = load i8, i8* @PL_tainting, align 1
  %tobool167 = icmp ne i8 %121, 0
  br i1 %tobool167, label %if.then.168, label %if.end.169

if.then.168:                                      ; preds = %if.end.166
  call void @Perl_taint_proper(i8* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.52, i32 0, i32 0))
  br label %if.end.169

if.end.169:                                       ; preds = %if.then.168, %if.end.166
  %122 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type170 = getelementptr inbounds %struct.op, %struct.op* %122, i32 0, i32 4
  %123 = load i16, i16* %op_type170, align 2
  %conv171 = zext i16 %123 to i32
  %cmp172 = icmp eq i32 %conv171, 309
  br i1 %cmp172, label %land.lhs.true.174, label %if.end.197

land.lhs.true.174:                                ; preds = %if.end.169
  %124 = load %struct.gv*, %struct.gv** @PL_incgv, align 8
  %sv_any175 = getelementptr inbounds %struct.gv, %struct.gv* %124, i32 0, i32 0
  %125 = load %struct.xpvgv*, %struct.xpvgv** %sv_any175, align 8
  %xgv_gp = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %125, i32 0, i32 7
  %126 = load %struct.gp*, %struct.gp** %xgv_gp, align 8
  %gp_hv = getelementptr inbounds %struct.gp, %struct.gp* %126, i32 0, i32 5
  %127 = load %struct.hv*, %struct.hv** %gp_hv, align 8
  %tobool176 = icmp ne %struct.hv* %127, null
  br i1 %tobool176, label %cond.true.177, label %cond.false.181

cond.true.177:                                    ; preds = %land.lhs.true.174
  %128 = load %struct.gv*, %struct.gv** @PL_incgv, align 8
  %sv_any178 = getelementptr inbounds %struct.gv, %struct.gv* %128, i32 0, i32 0
  %129 = load %struct.xpvgv*, %struct.xpvgv** %sv_any178, align 8
  %xgv_gp179 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %129, i32 0, i32 7
  %130 = load %struct.gp*, %struct.gp** %xgv_gp179, align 8
  %gp_hv180 = getelementptr inbounds %struct.gp, %struct.gp* %130, i32 0, i32 5
  %131 = load %struct.hv*, %struct.hv** %gp_hv180, align 8
  br label %cond.end.186

cond.false.181:                                   ; preds = %land.lhs.true.174
  %132 = load %struct.gv*, %struct.gv** @PL_incgv, align 8
  %call182 = call %struct.gv* @Perl_gv_HVadd(%struct.gv* %132)
  %sv_any183 = getelementptr inbounds %struct.gv, %struct.gv* %call182, i32 0, i32 0
  %133 = load %struct.xpvgv*, %struct.xpvgv** %sv_any183, align 8
  %xgv_gp184 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %133, i32 0, i32 7
  %134 = load %struct.gp*, %struct.gp** %xgv_gp184, align 8
  %gp_hv185 = getelementptr inbounds %struct.gp, %struct.gp* %134, i32 0, i32 5
  %135 = load %struct.hv*, %struct.hv** %gp_hv185, align 8
  br label %cond.end.186

cond.end.186:                                     ; preds = %cond.false.181, %cond.true.177
  %cond187 = phi %struct.hv* [ %131, %cond.true.177 ], [ %135, %cond.false.181 ]
  %136 = load i8*, i8** %name, align 8
  %137 = load i64, i64* %len, align 8
  %conv188 = trunc i64 %137 to i32
  %call189 = call %struct.sv** @Perl_hv_fetch(%struct.hv* %cond187, i8* %136, i32 %conv188, i32 0)
  store %struct.sv** %call189, %struct.sv*** %svp, align 8
  %tobool190 = icmp ne %struct.sv** %call189, null
  br i1 %tobool190, label %land.lhs.true.191, label %if.end.197

land.lhs.true.191:                                ; preds = %cond.end.186
  %138 = load %struct.sv**, %struct.sv*** %svp, align 8
  %139 = load %struct.sv*, %struct.sv** %138, align 8
  %cmp192 = icmp ne %struct.sv* %139, @PL_sv_undef
  br i1 %cmp192, label %if.then.194, label %if.end.197

if.then.194:                                      ; preds = %land.lhs.true.191
  %140 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr195 = getelementptr inbounds %struct.sv*, %struct.sv** %140, i32 1
  store %struct.sv** %incdec.ptr195, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_yes, %struct.sv** %incdec.ptr195, align 8
  %141 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %141, %struct.sv*** @PL_stack_sp, align 8
  %142 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next196 = getelementptr inbounds %struct.op, %struct.op* %142, i32 0, i32 0
  %143 = load %struct.op*, %struct.op** %op_next196, align 8
  store %struct.op* %143, %struct.op** %retval
  br label %return

if.end.197:                                       ; preds = %land.lhs.true.191, %cond.end.186, %if.end.169
  %144 = load i8*, i8** %name, align 8
  %call198 = call signext i8 @S_path_is_absolute(i8* %144)
  %tobool199 = icmp ne i8 %call198, 0
  br i1 %tobool199, label %if.then.200, label %if.end.202

if.then.200:                                      ; preds = %if.end.197
  %145 = load i8*, i8** %name, align 8
  store i8* %145, i8** %tryname, align 8
  %146 = load i8*, i8** %name, align 8
  %call201 = call %struct._PerlIO** @S_doopen_pm(i8* %146, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.53, i32 0, i32 0))
  store %struct._PerlIO** %call201, %struct._PerlIO*** %tryrsfp, align 8
  br label %if.end.202

if.end.202:                                       ; preds = %if.then.200, %if.end.197
  %147 = load %struct._PerlIO**, %struct._PerlIO*** %tryrsfp, align 8
  %tobool203 = icmp ne %struct._PerlIO** %147, null
  br i1 %tobool203, label %if.end.464, label %if.then.204

if.then.204:                                      ; preds = %if.end.202
  %148 = load %struct.gv*, %struct.gv** @PL_incgv, align 8
  %sv_any205 = getelementptr inbounds %struct.gv, %struct.gv* %148, i32 0, i32 0
  %149 = load %struct.xpvgv*, %struct.xpvgv** %sv_any205, align 8
  %xgv_gp206 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %149, i32 0, i32 7
  %150 = load %struct.gp*, %struct.gp** %xgv_gp206, align 8
  %gp_av = getelementptr inbounds %struct.gp, %struct.gp* %150, i32 0, i32 4
  %151 = load %struct.av*, %struct.av** %gp_av, align 8
  %tobool207 = icmp ne %struct.av* %151, null
  br i1 %tobool207, label %cond.true.208, label %cond.false.212

cond.true.208:                                    ; preds = %if.then.204
  %152 = load %struct.gv*, %struct.gv** @PL_incgv, align 8
  %sv_any209 = getelementptr inbounds %struct.gv, %struct.gv* %152, i32 0, i32 0
  %153 = load %struct.xpvgv*, %struct.xpvgv** %sv_any209, align 8
  %xgv_gp210 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %153, i32 0, i32 7
  %154 = load %struct.gp*, %struct.gp** %xgv_gp210, align 8
  %gp_av211 = getelementptr inbounds %struct.gp, %struct.gp* %154, i32 0, i32 4
  %155 = load %struct.av*, %struct.av** %gp_av211, align 8
  br label %cond.end.217

cond.false.212:                                   ; preds = %if.then.204
  %156 = load %struct.gv*, %struct.gv** @PL_incgv, align 8
  %call213 = call %struct.gv* @Perl_gv_AVadd(%struct.gv* %156)
  %sv_any214 = getelementptr inbounds %struct.gv, %struct.gv* %call213, i32 0, i32 0
  %157 = load %struct.xpvgv*, %struct.xpvgv** %sv_any214, align 8
  %xgv_gp215 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %157, i32 0, i32 7
  %158 = load %struct.gp*, %struct.gp** %xgv_gp215, align 8
  %gp_av216 = getelementptr inbounds %struct.gp, %struct.gp* %158, i32 0, i32 4
  %159 = load %struct.av*, %struct.av** %gp_av216, align 8
  br label %cond.end.217

cond.end.217:                                     ; preds = %cond.false.212, %cond.true.208
  %cond218 = phi %struct.av* [ %155, %cond.true.208 ], [ %159, %cond.false.212 ]
  store %struct.av* %cond218, %struct.av** %ar, align 8
  %call219 = call %struct.sv* @Perl_newSV(i64 0)
  store %struct.sv* %call219, %struct.sv** %namesv, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %cond.end.217
  %160 = load i32, i32* %i, align 4
  %conv220 = sext i32 %160 to i64
  %161 = load %struct.av*, %struct.av** %ar, align 8
  %162 = bitcast %struct.av* %161 to %struct.sv*
  %sv_flags221 = getelementptr inbounds %struct.sv, %struct.sv* %162, i32 0, i32 2
  %163 = load i32, i32* %sv_flags221, align 4
  %and222 = and i32 %163, 32768
  %tobool223 = icmp ne i32 %and222, 0
  br i1 %tobool223, label %cond.true.224, label %cond.false.227

cond.true.224:                                    ; preds = %for.cond
  %164 = load %struct.av*, %struct.av** %ar, align 8
  %165 = bitcast %struct.av* %164 to %struct.sv*
  %call225 = call i32 @Perl_mg_size(%struct.sv* %165)
  %conv226 = sext i32 %call225 to i64
  br label %cond.end.229

cond.false.227:                                   ; preds = %for.cond
  %166 = load %struct.av*, %struct.av** %ar, align 8
  %sv_any228 = getelementptr inbounds %struct.av, %struct.av* %166, i32 0, i32 0
  %167 = load %struct.xpvav*, %struct.xpvav** %sv_any228, align 8
  %xav_fill = getelementptr inbounds %struct.xpvav, %struct.xpvav* %167, i32 0, i32 1
  %168 = load i64, i64* %xav_fill, align 8
  br label %cond.end.229

cond.end.229:                                     ; preds = %cond.false.227, %cond.true.224
  %cond230 = phi i64 [ %conv226, %cond.true.224 ], [ %168, %cond.false.227 ]
  %cmp231 = icmp sle i64 %conv220, %cond230
  br i1 %cmp231, label %for.body, label %for.end

for.body:                                         ; preds = %cond.end.229
  %169 = load %struct.av*, %struct.av** %ar, align 8
  %170 = load i32, i32* %i, align 4
  %call233 = call %struct.sv** @Perl_av_fetch(%struct.av* %169, i32 %170, i32 1)
  %171 = load %struct.sv*, %struct.sv** %call233, align 8
  store %struct.sv* %171, %struct.sv** %dirsv, align 8
  %172 = load %struct.sv*, %struct.sv** %dirsv, align 8
  %sv_flags234 = getelementptr inbounds %struct.sv, %struct.sv* %172, i32 0, i32 2
  %173 = load i32, i32* %sv_flags234, align 4
  %and235 = and i32 %173, 524288
  %tobool236 = icmp ne i32 %and235, 0
  br i1 %tobool236, label %if.then.237, label %if.else.422

if.then.237:                                      ; preds = %for.body
  %174 = load %struct.sv*, %struct.sv** %dirsv, align 8
  store %struct.sv* %174, %struct.sv** %loader, align 8
  %175 = load %struct.sv*, %struct.sv** %loader, align 8
  %sv_any238 = getelementptr inbounds %struct.sv, %struct.sv* %175, i32 0, i32 0
  %176 = load i8*, i8** %sv_any238, align 8
  %177 = bitcast i8* %176 to %struct.xrv*
  %xrv_rv = getelementptr inbounds %struct.xrv, %struct.xrv* %177, i32 0, i32 0
  %178 = load %struct.sv*, %struct.sv** %xrv_rv, align 8
  %sv_flags239 = getelementptr inbounds %struct.sv, %struct.sv* %178, i32 0, i32 2
  %179 = load i32, i32* %sv_flags239, align 4
  %and240 = and i32 %179, 255
  %cmp241 = icmp eq i32 %and240, 10
  br i1 %cmp241, label %land.lhs.true.243, label %if.end.250

land.lhs.true.243:                                ; preds = %if.then.237
  %180 = load %struct.sv*, %struct.sv** %loader, align 8
  %call244 = call i32 @Perl_sv_isobject(%struct.sv* %180)
  %tobool245 = icmp ne i32 %call244, 0
  br i1 %tobool245, label %if.end.250, label %if.then.246

if.then.246:                                      ; preds = %land.lhs.true.243
  %181 = load %struct.sv*, %struct.sv** %loader, align 8
  %sv_any247 = getelementptr inbounds %struct.sv, %struct.sv* %181, i32 0, i32 0
  %182 = load i8*, i8** %sv_any247, align 8
  %183 = bitcast i8* %182 to %struct.xrv*
  %xrv_rv248 = getelementptr inbounds %struct.xrv, %struct.xrv* %183, i32 0, i32 0
  %184 = load %struct.sv*, %struct.sv** %xrv_rv248, align 8
  %185 = bitcast %struct.sv* %184 to %struct.av*
  %call249 = call %struct.sv** @Perl_av_fetch(%struct.av* %185, i32 0, i32 1)
  %186 = load %struct.sv*, %struct.sv** %call249, align 8
  store %struct.sv* %186, %struct.sv** %loader, align 8
  br label %if.end.250

if.end.250:                                       ; preds = %if.then.246, %land.lhs.true.243, %if.then.237
  %187 = load %struct.sv*, %struct.sv** %namesv, align 8
  %188 = load %struct.sv*, %struct.sv** %dirsv, align 8
  %sv_any251 = getelementptr inbounds %struct.sv, %struct.sv* %188, i32 0, i32 0
  %189 = load i8*, i8** %sv_any251, align 8
  %190 = bitcast i8* %189 to %struct.xrv*
  %xrv_rv252 = getelementptr inbounds %struct.xrv, %struct.xrv* %190, i32 0, i32 0
  %191 = load %struct.sv*, %struct.sv** %xrv_rv252, align 8
  %192 = ptrtoint %struct.sv* %191 to i64
  %193 = load i8*, i8** %name, align 8
  call void (%struct.sv*, i8*, ...) @Perl_sv_setpvf(%struct.sv* %187, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.54, i32 0, i32 0), i64 %192, i8* %193)
  %194 = load %struct.sv*, %struct.sv** %namesv, align 8
  %sv_any253 = getelementptr inbounds %struct.sv, %struct.sv* %194, i32 0, i32 0
  %195 = load i8*, i8** %sv_any253, align 8
  %196 = bitcast i8* %195 to %struct.xpv*
  %xpv_pv254 = getelementptr inbounds %struct.xpv, %struct.xpv* %196, i32 0, i32 0
  %197 = load i8*, i8** %xpv_pv254, align 8
  store i8* %197, i8** %tryname, align 8
  store %struct._PerlIO** null, %struct._PerlIO*** %tryrsfp, align 8
  call void @Perl_push_scope()
  call void @Perl_save_int(i32* @PL_tmps_floor)
  %198 = load i32, i32* @PL_tmps_ix, align 4
  store i32 %198, i32* @PL_tmps_floor, align 4
  %199 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %200 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast255 = ptrtoint %struct.sv** %199 to i64
  %sub.ptr.rhs.cast256 = ptrtoint %struct.sv** %200 to i64
  %sub.ptr.sub257 = sub i64 %sub.ptr.lhs.cast255, %sub.ptr.rhs.cast256
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub257, 8
  %cmp258 = icmp slt i64 %sub.ptr.div, 2
  br i1 %cmp258, label %if.then.260, label %if.end.262

if.then.260:                                      ; preds = %if.end.250
  %201 = load %struct.sv**, %struct.sv*** %sp, align 8
  %202 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call261 = call %struct.sv** @Perl_stack_grow(%struct.sv** %201, %struct.sv** %202, i32 2)
  store %struct.sv** %call261, %struct.sv*** %sp, align 8
  br label %if.end.262

if.end.262:                                       ; preds = %if.then.260, %if.end.250
  %203 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr263 = getelementptr inbounds i32, i32* %203, i32 1
  store i32* %incdec.ptr263, i32** @PL_markstack_ptr, align 8
  %204 = load i32*, i32** @PL_markstack_max, align 8
  %cmp264 = icmp eq i32* %incdec.ptr263, %204
  br i1 %cmp264, label %if.then.266, label %if.end.267

if.then.266:                                      ; preds = %if.end.262
  call void @Perl_markstack_grow()
  br label %if.end.267

if.end.267:                                       ; preds = %if.then.266, %if.end.262
  %205 = load %struct.sv**, %struct.sv*** %sp, align 8
  %206 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast268 = ptrtoint %struct.sv** %205 to i64
  %sub.ptr.rhs.cast269 = ptrtoint %struct.sv** %206 to i64
  %sub.ptr.sub270 = sub i64 %sub.ptr.lhs.cast268, %sub.ptr.rhs.cast269
  %sub.ptr.div271 = sdiv exact i64 %sub.ptr.sub270, 8
  %conv272 = trunc i64 %sub.ptr.div271 to i32
  %207 = load i32*, i32** @PL_markstack_ptr, align 8
  store i32 %conv272, i32* %207, align 4
  store i32 %conv272, i32* %tmp
  %208 = load i32, i32* %tmp
  %209 = load %struct.sv*, %struct.sv** %dirsv, align 8
  %210 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr273 = getelementptr inbounds %struct.sv*, %struct.sv** %210, i32 1
  store %struct.sv** %incdec.ptr273, %struct.sv*** %sp, align 8
  store %struct.sv* %209, %struct.sv** %incdec.ptr273, align 8
  %211 = load %struct.sv*, %struct.sv** %sv, align 8
  %212 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr274 = getelementptr inbounds %struct.sv*, %struct.sv** %212, i32 1
  store %struct.sv** %incdec.ptr274, %struct.sv*** %sp, align 8
  store %struct.sv* %211, %struct.sv** %incdec.ptr274, align 8
  %213 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %213, %struct.sv*** @PL_stack_sp, align 8
  %214 = load %struct.sv*, %struct.sv** %loader, align 8
  %call275 = call i32 @Perl_sv_isobject(%struct.sv* %214)
  %tobool276 = icmp ne i32 %call275, 0
  br i1 %tobool276, label %if.then.277, label %if.else.279

if.then.277:                                      ; preds = %if.end.267
  %call278 = call i32 @Perl_call_method(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.55, i32 0, i32 0), i32 1)
  store i32 %call278, i32* %count, align 4
  br label %if.end.281

if.else.279:                                      ; preds = %if.end.267
  %215 = load %struct.sv*, %struct.sv** %loader, align 8
  %call280 = call i32 @Perl_call_sv(%struct.sv* %215, i32 1)
  store i32 %call280, i32* %count, align 4
  br label %if.end.281

if.end.281:                                       ; preds = %if.else.279, %if.then.277
  %216 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %216, %struct.sv*** %sp, align 8
  %217 = load i32, i32* %count, align 4
  %cmp282 = icmp sgt i32 %217, 0
  br i1 %cmp282, label %if.then.284, label %if.end.405

if.then.284:                                      ; preds = %if.end.281
  store i32 0, i32* %i286, align 4
  %218 = load i32, i32* %count, align 4
  %sub288 = sub nsw i32 %218, 1
  %219 = load %struct.sv**, %struct.sv*** %sp, align 8
  %idx.ext = sext i32 %sub288 to i64
  %idx.neg = sub i64 0, %idx.ext
  %add.ptr289 = getelementptr inbounds %struct.sv*, %struct.sv** %219, i64 %idx.neg
  store %struct.sv** %add.ptr289, %struct.sv*** %sp, align 8
  %220 = load i32, i32* %i286, align 4
  %inc = add nsw i32 %220, 1
  store i32 %inc, i32* %i286, align 4
  %idxprom = sext i32 %220 to i64
  %221 = load %struct.sv**, %struct.sv*** %sp, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %221, i64 %idxprom
  %222 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %222, %struct.sv** %arg, align 8
  %223 = load %struct.sv*, %struct.sv** %arg, align 8
  %sv_flags290 = getelementptr inbounds %struct.sv, %struct.sv* %223, i32 0, i32 2
  %224 = load i32, i32* %sv_flags290, align 4
  %and291 = and i32 %224, 524288
  %tobool292 = icmp ne i32 %and291, 0
  br i1 %tobool292, label %land.lhs.true.293, label %if.end.303

land.lhs.true.293:                                ; preds = %if.then.284
  %225 = load %struct.sv*, %struct.sv** %arg, align 8
  %sv_any294 = getelementptr inbounds %struct.sv, %struct.sv* %225, i32 0, i32 0
  %226 = load i8*, i8** %sv_any294, align 8
  %227 = bitcast i8* %226 to %struct.xrv*
  %xrv_rv295 = getelementptr inbounds %struct.xrv, %struct.xrv* %227, i32 0, i32 0
  %228 = load %struct.sv*, %struct.sv** %xrv_rv295, align 8
  %sv_flags296 = getelementptr inbounds %struct.sv, %struct.sv* %228, i32 0, i32 2
  %229 = load i32, i32* %sv_flags296, align 4
  %and297 = and i32 %229, 255
  %cmp298 = icmp eq i32 %and297, 13
  br i1 %cmp298, label %if.then.300, label %if.end.303

if.then.300:                                      ; preds = %land.lhs.true.293
  %230 = load %struct.sv*, %struct.sv** %arg, align 8
  %sv_any301 = getelementptr inbounds %struct.sv, %struct.sv* %230, i32 0, i32 0
  %231 = load i8*, i8** %sv_any301, align 8
  %232 = bitcast i8* %231 to %struct.xrv*
  %xrv_rv302 = getelementptr inbounds %struct.xrv, %struct.xrv* %232, i32 0, i32 0
  %233 = load %struct.sv*, %struct.sv** %xrv_rv302, align 8
  store %struct.sv* %233, %struct.sv** %arg, align 8
  br label %if.end.303

if.end.303:                                       ; preds = %if.then.300, %land.lhs.true.293, %if.then.284
  %234 = load %struct.sv*, %struct.sv** %arg, align 8
  %sv_flags304 = getelementptr inbounds %struct.sv, %struct.sv* %234, i32 0, i32 2
  %235 = load i32, i32* %sv_flags304, align 4
  %and305 = and i32 %235, 255
  %cmp306 = icmp eq i32 %and305, 13
  br i1 %cmp306, label %if.then.308, label %if.end.366

if.then.308:                                      ; preds = %if.end.303
  %236 = load %struct.sv*, %struct.sv** %arg, align 8
  %237 = bitcast %struct.sv* %236 to %struct.gv*
  %tobool310 = icmp ne %struct.gv* %237, null
  br i1 %tobool310, label %land.lhs.true.311, label %cond.false.323

land.lhs.true.311:                                ; preds = %if.then.308
  %238 = load %struct.sv*, %struct.sv** %arg, align 8
  %239 = bitcast %struct.sv* %238 to %struct.gv*
  %240 = bitcast %struct.gv* %239 to %struct.sv*
  %sv_flags312 = getelementptr inbounds %struct.sv, %struct.sv* %240, i32 0, i32 2
  %241 = load i32, i32* %sv_flags312, align 4
  %and313 = and i32 %241, 255
  %cmp314 = icmp eq i32 %and313, 13
  br i1 %cmp314, label %land.lhs.true.316, label %cond.false.323

land.lhs.true.316:                                ; preds = %land.lhs.true.311
  %242 = load %struct.sv*, %struct.sv** %arg, align 8
  %243 = bitcast %struct.sv* %242 to %struct.gv*
  %sv_any317 = getelementptr inbounds %struct.gv, %struct.gv* %243, i32 0, i32 0
  %244 = load %struct.xpvgv*, %struct.xpvgv** %sv_any317, align 8
  %xgv_gp318 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %244, i32 0, i32 7
  %245 = load %struct.gp*, %struct.gp** %xgv_gp318, align 8
  %tobool319 = icmp ne %struct.gp* %245, null
  br i1 %tobool319, label %cond.true.320, label %cond.false.323

cond.true.320:                                    ; preds = %land.lhs.true.316
  %246 = load %struct.sv*, %struct.sv** %arg, align 8
  %247 = bitcast %struct.sv* %246 to %struct.gv*
  %sv_any321 = getelementptr inbounds %struct.gv, %struct.gv* %247, i32 0, i32 0
  %248 = load %struct.xpvgv*, %struct.xpvgv** %sv_any321, align 8
  %xgv_gp322 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %248, i32 0, i32 7
  %249 = load %struct.gp*, %struct.gp** %xgv_gp322, align 8
  %gp_io = getelementptr inbounds %struct.gp, %struct.gp* %249, i32 0, i32 2
  %250 = load %struct.io*, %struct.io** %gp_io, align 8
  br label %cond.end.324

cond.false.323:                                   ; preds = %land.lhs.true.316, %land.lhs.true.311, %if.then.308
  br label %cond.end.324

cond.end.324:                                     ; preds = %cond.false.323, %cond.true.320
  %cond325 = phi %struct.io* [ %250, %cond.true.320 ], [ null, %cond.false.323 ]
  store %struct.io* %cond325, %struct.io** %io, align 8
  %251 = load i32, i32* %filter_has_file, align 4
  %inc326 = add nsw i32 %251, 1
  store i32 %inc326, i32* %filter_has_file, align 4
  %252 = load %struct.io*, %struct.io** %io, align 8
  %tobool327 = icmp ne %struct.io* %252, null
  br i1 %tobool327, label %if.then.328, label %if.end.358

if.then.328:                                      ; preds = %cond.end.324
  %253 = load %struct.io*, %struct.io** %io, align 8
  %sv_any329 = getelementptr inbounds %struct.io, %struct.io* %253, i32 0, i32 0
  %254 = load %struct.xpvio*, %struct.xpvio** %sv_any329, align 8
  %xio_ifp = getelementptr inbounds %struct.xpvio, %struct.xpvio* %254, i32 0, i32 7
  %255 = load %struct._PerlIO**, %struct._PerlIO*** %xio_ifp, align 8
  store %struct._PerlIO** %255, %struct._PerlIO*** %tryrsfp, align 8
  %256 = load %struct.io*, %struct.io** %io, align 8
  %sv_any330 = getelementptr inbounds %struct.io, %struct.io* %256, i32 0, i32 0
  %257 = load %struct.xpvio*, %struct.xpvio** %sv_any330, align 8
  %xio_type = getelementptr inbounds %struct.xpvio, %struct.xpvio* %257, i32 0, i32 21
  %258 = load i8, i8* %xio_type, align 1
  %conv331 = sext i8 %258 to i32
  %cmp332 = icmp eq i32 %conv331, 124
  br i1 %cmp332, label %if.then.334, label %if.else.338

if.then.334:                                      ; preds = %if.then.328
  %259 = load %struct.sv*, %struct.sv** %arg, align 8
  %260 = bitcast %struct.sv* %259 to %struct.gv*
  store %struct.gv* %260, %struct.gv** %filter_child_proc, align 8
  %261 = load %struct.gv*, %struct.gv** %filter_child_proc, align 8
  %262 = bitcast %struct.gv* %261 to %struct.sv*
  store %struct.sv* %262, %struct.sv** @PL_Sv, align 8
  %263 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %tobool335 = icmp ne %struct.sv* %263, null
  br i1 %tobool335, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then.334
  %264 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %264, i32 0, i32 1
  %265 = load i32, i32* %sv_refcnt, align 4
  %inc336 = add i32 %265, 1
  store i32 %inc336, i32* %sv_refcnt, align 4
  %tobool337 = icmp ne i32 %inc336, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then.334
  %266 = phi i1 [ false, %if.then.334 ], [ %tobool337, %land.rhs ]
  %land.ext = zext i1 %266 to i32
  %267 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  br label %if.end.357

if.else.338:                                      ; preds = %if.then.328
  %268 = load %struct.io*, %struct.io** %io, align 8
  %sv_any339 = getelementptr inbounds %struct.io, %struct.io* %268, i32 0, i32 0
  %269 = load %struct.xpvio*, %struct.xpvio** %sv_any339, align 8
  %xio_ofp = getelementptr inbounds %struct.xpvio, %struct.xpvio* %269, i32 0, i32 8
  %270 = load %struct._PerlIO**, %struct._PerlIO*** %xio_ofp, align 8
  %tobool340 = icmp ne %struct._PerlIO** %270, null
  br i1 %tobool340, label %land.lhs.true.341, label %if.end.352

land.lhs.true.341:                                ; preds = %if.else.338
  %271 = load %struct.io*, %struct.io** %io, align 8
  %sv_any342 = getelementptr inbounds %struct.io, %struct.io* %271, i32 0, i32 0
  %272 = load %struct.xpvio*, %struct.xpvio** %sv_any342, align 8
  %xio_ofp343 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %272, i32 0, i32 8
  %273 = load %struct._PerlIO**, %struct._PerlIO*** %xio_ofp343, align 8
  %274 = load %struct.io*, %struct.io** %io, align 8
  %sv_any344 = getelementptr inbounds %struct.io, %struct.io* %274, i32 0, i32 0
  %275 = load %struct.xpvio*, %struct.xpvio** %sv_any344, align 8
  %xio_ifp345 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %275, i32 0, i32 7
  %276 = load %struct._PerlIO**, %struct._PerlIO*** %xio_ifp345, align 8
  %cmp346 = icmp ne %struct._PerlIO** %273, %276
  br i1 %cmp346, label %if.then.348, label %if.end.352

if.then.348:                                      ; preds = %land.lhs.true.341
  %277 = load %struct.io*, %struct.io** %io, align 8
  %sv_any349 = getelementptr inbounds %struct.io, %struct.io* %277, i32 0, i32 0
  %278 = load %struct.xpvio*, %struct.xpvio** %sv_any349, align 8
  %xio_ofp350 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %278, i32 0, i32 8
  %279 = load %struct._PerlIO**, %struct._PerlIO*** %xio_ofp350, align 8
  %call351 = call i32 @Perl_PerlIO_close(%struct._PerlIO** %279)
  br label %if.end.352

if.end.352:                                       ; preds = %if.then.348, %land.lhs.true.341, %if.else.338
  %280 = load %struct.io*, %struct.io** %io, align 8
  %sv_any353 = getelementptr inbounds %struct.io, %struct.io* %280, i32 0, i32 0
  %281 = load %struct.xpvio*, %struct.xpvio** %sv_any353, align 8
  %xio_ifp354 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %281, i32 0, i32 7
  store %struct._PerlIO** null, %struct._PerlIO*** %xio_ifp354, align 8
  %282 = load %struct.io*, %struct.io** %io, align 8
  %sv_any355 = getelementptr inbounds %struct.io, %struct.io* %282, i32 0, i32 0
  %283 = load %struct.xpvio*, %struct.xpvio** %sv_any355, align 8
  %xio_ofp356 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %283, i32 0, i32 8
  store %struct._PerlIO** null, %struct._PerlIO*** %xio_ofp356, align 8
  br label %if.end.357

if.end.357:                                       ; preds = %if.end.352, %land.end
  br label %if.end.358

if.end.358:                                       ; preds = %if.end.357, %cond.end.324
  %284 = load i32, i32* %i286, align 4
  %285 = load i32, i32* %count, align 4
  %cmp359 = icmp slt i32 %284, %285
  br i1 %cmp359, label %if.then.361, label %if.end.365

if.then.361:                                      ; preds = %if.end.358
  %286 = load i32, i32* %i286, align 4
  %inc362 = add nsw i32 %286, 1
  store i32 %inc362, i32* %i286, align 4
  %idxprom363 = sext i32 %286 to i64
  %287 = load %struct.sv**, %struct.sv*** %sp, align 8
  %arrayidx364 = getelementptr inbounds %struct.sv*, %struct.sv** %287, i64 %idxprom363
  %288 = load %struct.sv*, %struct.sv** %arrayidx364, align 8
  store %struct.sv* %288, %struct.sv** %arg, align 8
  br label %if.end.365

if.end.365:                                       ; preds = %if.then.361, %if.end.358
  br label %if.end.366

if.end.366:                                       ; preds = %if.end.365, %if.end.303
  %289 = load %struct.sv*, %struct.sv** %arg, align 8
  %sv_flags367 = getelementptr inbounds %struct.sv, %struct.sv* %289, i32 0, i32 2
  %290 = load i32, i32* %sv_flags367, align 4
  %and368 = and i32 %290, 524288
  %tobool369 = icmp ne i32 %and368, 0
  br i1 %tobool369, label %land.lhs.true.370, label %if.end.403

land.lhs.true.370:                                ; preds = %if.end.366
  %291 = load %struct.sv*, %struct.sv** %arg, align 8
  %sv_any371 = getelementptr inbounds %struct.sv, %struct.sv* %291, i32 0, i32 0
  %292 = load i8*, i8** %sv_any371, align 8
  %293 = bitcast i8* %292 to %struct.xrv*
  %xrv_rv372 = getelementptr inbounds %struct.xrv, %struct.xrv* %293, i32 0, i32 0
  %294 = load %struct.sv*, %struct.sv** %xrv_rv372, align 8
  %sv_flags373 = getelementptr inbounds %struct.sv, %struct.sv* %294, i32 0, i32 2
  %295 = load i32, i32* %sv_flags373, align 4
  %and374 = and i32 %295, 255
  %cmp375 = icmp eq i32 %and374, 12
  br i1 %cmp375, label %if.then.377, label %if.end.403

if.then.377:                                      ; preds = %land.lhs.true.370
  %296 = load %struct.sv*, %struct.sv** %arg, align 8
  store %struct.sv* %296, %struct.sv** %filter_sub, align 8
  %297 = load %struct.sv*, %struct.sv** %filter_sub, align 8
  store %struct.sv* %297, %struct.sv** @PL_Sv, align 8
  %298 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %tobool378 = icmp ne %struct.sv* %298, null
  br i1 %tobool378, label %land.rhs.379, label %land.end.383

land.rhs.379:                                     ; preds = %if.then.377
  %299 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_refcnt380 = getelementptr inbounds %struct.sv, %struct.sv* %299, i32 0, i32 1
  %300 = load i32, i32* %sv_refcnt380, align 4
  %inc381 = add i32 %300, 1
  store i32 %inc381, i32* %sv_refcnt380, align 4
  %tobool382 = icmp ne i32 %inc381, 0
  br label %land.end.383

land.end.383:                                     ; preds = %land.rhs.379, %if.then.377
  %301 = phi i1 [ false, %if.then.377 ], [ %tobool382, %land.rhs.379 ]
  %land.ext384 = zext i1 %301 to i32
  %302 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %303 = load i32, i32* %i286, align 4
  %304 = load i32, i32* %count, align 4
  %cmp385 = icmp slt i32 %303, %304
  br i1 %cmp385, label %if.then.387, label %if.end.397

if.then.387:                                      ; preds = %land.end.383
  %305 = load i32, i32* %i286, align 4
  %idxprom388 = sext i32 %305 to i64
  %306 = load %struct.sv**, %struct.sv*** %sp, align 8
  %arrayidx389 = getelementptr inbounds %struct.sv*, %struct.sv** %306, i64 %idxprom388
  %307 = load %struct.sv*, %struct.sv** %arrayidx389, align 8
  store %struct.sv* %307, %struct.sv** %filter_state, align 8
  %308 = load %struct.sv*, %struct.sv** %filter_state, align 8
  store %struct.sv* %308, %struct.sv** @PL_Sv, align 8
  %309 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %tobool390 = icmp ne %struct.sv* %309, null
  br i1 %tobool390, label %land.rhs.391, label %land.end.395

land.rhs.391:                                     ; preds = %if.then.387
  %310 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_refcnt392 = getelementptr inbounds %struct.sv, %struct.sv* %310, i32 0, i32 1
  %311 = load i32, i32* %sv_refcnt392, align 4
  %inc393 = add i32 %311, 1
  store i32 %inc393, i32* %sv_refcnt392, align 4
  %tobool394 = icmp ne i32 %inc393, 0
  br label %land.end.395

land.end.395:                                     ; preds = %land.rhs.391, %if.then.387
  %312 = phi i1 [ false, %if.then.387 ], [ %tobool394, %land.rhs.391 ]
  %land.ext396 = zext i1 %312 to i32
  %313 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  br label %if.end.397

if.end.397:                                       ; preds = %land.end.395, %land.end.383
  %314 = load %struct._PerlIO**, %struct._PerlIO*** %tryrsfp, align 8
  %cmp398 = icmp eq %struct._PerlIO** %314, null
  br i1 %cmp398, label %if.then.400, label %if.end.402

if.then.400:                                      ; preds = %if.end.397
  %call401 = call %struct._PerlIO** @PerlIO_open(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.56, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.53, i32 0, i32 0))
  store %struct._PerlIO** %call401, %struct._PerlIO*** %tryrsfp, align 8
  br label %if.end.402

if.end.402:                                       ; preds = %if.then.400, %if.end.397
  br label %if.end.403

if.end.403:                                       ; preds = %if.end.402, %land.lhs.true.370, %if.end.366
  %315 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr404 = getelementptr inbounds %struct.sv*, %struct.sv** %315, i32 -1
  store %struct.sv** %incdec.ptr404, %struct.sv*** %sp, align 8
  br label %if.end.405

if.end.405:                                       ; preds = %if.end.403, %if.end.281
  %316 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %316, %struct.sv*** @PL_stack_sp, align 8
  %317 = load i32, i32* @PL_tmps_ix, align 4
  %318 = load i32, i32* @PL_tmps_floor, align 4
  %cmp406 = icmp sgt i32 %317, %318
  br i1 %cmp406, label %if.then.408, label %if.end.409

if.then.408:                                      ; preds = %if.end.405
  call void @Perl_free_tmps()
  br label %if.end.409

if.end.409:                                       ; preds = %if.then.408, %if.end.405
  call void @Perl_pop_scope()
  %319 = load %struct._PerlIO**, %struct._PerlIO*** %tryrsfp, align 8
  %tobool410 = icmp ne %struct._PerlIO** %319, null
  br i1 %tobool410, label %if.then.411, label %if.end.412

if.then.411:                                      ; preds = %if.end.409
  %320 = load %struct.sv*, %struct.sv** %dirsv, align 8
  store %struct.sv* %320, %struct.sv** %hook_sv, align 8
  br label %for.end

if.end.412:                                       ; preds = %if.end.409
  store i32 0, i32* %filter_has_file, align 4
  %321 = load %struct.gv*, %struct.gv** %filter_child_proc, align 8
  %tobool413 = icmp ne %struct.gv* %321, null
  br i1 %tobool413, label %if.then.414, label %if.end.415

if.then.414:                                      ; preds = %if.end.412
  %322 = load %struct.gv*, %struct.gv** %filter_child_proc, align 8
  %323 = bitcast %struct.gv* %322 to %struct.sv*
  call void @Perl_sv_free(%struct.sv* %323)
  store %struct.gv* null, %struct.gv** %filter_child_proc, align 8
  br label %if.end.415

if.end.415:                                       ; preds = %if.then.414, %if.end.412
  %324 = load %struct.sv*, %struct.sv** %filter_state, align 8
  %tobool416 = icmp ne %struct.sv* %324, null
  br i1 %tobool416, label %if.then.417, label %if.end.418

if.then.417:                                      ; preds = %if.end.415
  %325 = load %struct.sv*, %struct.sv** %filter_state, align 8
  call void @Perl_sv_free(%struct.sv* %325)
  store %struct.sv* null, %struct.sv** %filter_state, align 8
  br label %if.end.418

if.end.418:                                       ; preds = %if.then.417, %if.end.415
  %326 = load %struct.sv*, %struct.sv** %filter_sub, align 8
  %tobool419 = icmp ne %struct.sv* %326, null
  br i1 %tobool419, label %if.then.420, label %if.end.421

if.then.420:                                      ; preds = %if.end.418
  %327 = load %struct.sv*, %struct.sv** %filter_sub, align 8
  call void @Perl_sv_free(%struct.sv* %327)
  store %struct.sv* null, %struct.sv** %filter_sub, align 8
  br label %if.end.421

if.end.421:                                       ; preds = %if.then.420, %if.end.418
  br label %if.end.462

if.else.422:                                      ; preds = %for.body
  %328 = load i8*, i8** %name, align 8
  %call423 = call signext i8 @S_path_is_absolute(i8* %328)
  %tobool424 = icmp ne i8 %call423, 0
  br i1 %tobool424, label %if.end.461, label %if.then.425

if.then.425:                                      ; preds = %if.else.422
  %329 = load %struct.sv*, %struct.sv** %dirsv, align 8
  store %struct.sv* %329, %struct.sv** @PL_Sv, align 8
  %330 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags427 = getelementptr inbounds %struct.sv, %struct.sv* %330, i32 0, i32 2
  %331 = load i32, i32* %sv_flags427, align 4
  %and428 = and i32 %331, 262144
  %cmp429 = icmp eq i32 %and428, 262144
  br i1 %cmp429, label %cond.true.431, label %cond.false.436

cond.true.431:                                    ; preds = %if.then.425
  %332 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any432 = getelementptr inbounds %struct.sv, %struct.sv* %332, i32 0, i32 0
  %333 = load i8*, i8** %sv_any432, align 8
  %334 = bitcast i8* %333 to %struct.xpv*
  %xpv_cur433 = getelementptr inbounds %struct.xpv, %struct.xpv* %334, i32 0, i32 1
  %335 = load i64, i64* %xpv_cur433, align 8
  store i64 %335, i64* %n_a, align 8
  %336 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any434 = getelementptr inbounds %struct.sv, %struct.sv* %336, i32 0, i32 0
  %337 = load i8*, i8** %sv_any434, align 8
  %338 = bitcast i8* %337 to %struct.xpv*
  %xpv_pv435 = getelementptr inbounds %struct.xpv, %struct.xpv* %338, i32 0, i32 0
  %339 = load i8*, i8** %xpv_pv435, align 8
  br label %cond.end.438

cond.false.436:                                   ; preds = %if.then.425
  %340 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %call437 = call i8* @Perl_sv_2pv_flags(%struct.sv* %340, i64* %n_a, i32 2)
  br label %cond.end.438

cond.end.438:                                     ; preds = %cond.false.436, %cond.true.431
  %cond439 = phi i8* [ %339, %cond.true.431 ], [ %call437, %cond.false.436 ]
  store i8* %cond439, i8** %dir, align 8
  %341 = load %struct.sv*, %struct.sv** %namesv, align 8
  %342 = load i8*, i8** %dir, align 8
  %343 = load i8*, i8** %name, align 8
  call void (%struct.sv*, i8*, ...) @Perl_sv_setpvf(%struct.sv* %341, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.57, i32 0, i32 0), i8* %342, i8* %343)
  %344 = load i8, i8* @PL_tainting, align 1
  %tobool440 = icmp ne i8 %344, 0
  br i1 %tobool440, label %if.then.441, label %if.end.442

if.then.441:                                      ; preds = %cond.end.438
  call void @Perl_taint_proper(i8* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.52, i32 0, i32 0))
  br label %if.end.442

if.end.442:                                       ; preds = %if.then.441, %cond.end.438
  %345 = load %struct.sv*, %struct.sv** %namesv, align 8
  %sv_any443 = getelementptr inbounds %struct.sv, %struct.sv* %345, i32 0, i32 0
  %346 = load i8*, i8** %sv_any443, align 8
  %347 = bitcast i8* %346 to %struct.xpv*
  %xpv_pv444 = getelementptr inbounds %struct.xpv, %struct.xpv* %347, i32 0, i32 0
  %348 = load i8*, i8** %xpv_pv444, align 8
  store i8* %348, i8** %tryname, align 8
  %349 = load i8*, i8** %tryname, align 8
  %call445 = call %struct._PerlIO** @S_doopen_pm(i8* %349, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.53, i32 0, i32 0))
  store %struct._PerlIO** %call445, %struct._PerlIO*** %tryrsfp, align 8
  %350 = load %struct._PerlIO**, %struct._PerlIO*** %tryrsfp, align 8
  %tobool446 = icmp ne %struct._PerlIO** %350, null
  br i1 %tobool446, label %if.then.447, label %if.end.460

if.then.447:                                      ; preds = %if.end.442
  %351 = load i8*, i8** %tryname, align 8
  %arrayidx448 = getelementptr inbounds i8, i8* %351, i64 0
  %352 = load i8, i8* %arrayidx448, align 1
  %conv449 = sext i8 %352 to i32
  %cmp450 = icmp eq i32 %conv449, 46
  br i1 %cmp450, label %land.lhs.true.452, label %if.end.459

land.lhs.true.452:                                ; preds = %if.then.447
  %353 = load i8*, i8** %tryname, align 8
  %arrayidx453 = getelementptr inbounds i8, i8* %353, i64 1
  %354 = load i8, i8* %arrayidx453, align 1
  %conv454 = sext i8 %354 to i32
  %cmp455 = icmp eq i32 %conv454, 47
  br i1 %cmp455, label %if.then.457, label %if.end.459

if.then.457:                                      ; preds = %land.lhs.true.452
  %355 = load i8*, i8** %tryname, align 8
  %add.ptr458 = getelementptr inbounds i8, i8* %355, i64 2
  store i8* %add.ptr458, i8** %tryname, align 8
  br label %if.end.459

if.end.459:                                       ; preds = %if.then.457, %land.lhs.true.452, %if.then.447
  br label %for.end

if.end.460:                                       ; preds = %if.end.442
  br label %if.end.461

if.end.461:                                       ; preds = %if.end.460, %if.else.422
  br label %if.end.462

if.end.462:                                       ; preds = %if.end.461, %if.end.421
  br label %for.inc

for.inc:                                          ; preds = %if.end.462
  %356 = load i32, i32* %i, align 4
  %inc463 = add nsw i32 %356, 1
  store i32 %inc463, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.end.459, %if.then.411, %cond.end.229
  br label %if.end.464

if.end.464:                                       ; preds = %for.end, %if.end.202
  call void @Perl_save_generic_svref(%struct.sv** bitcast (%struct.gv** getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10) to %struct.sv**))
  %357 = load %struct._PerlIO**, %struct._PerlIO*** %tryrsfp, align 8
  %tobool465 = icmp ne %struct._PerlIO** %357, null
  br i1 %tobool465, label %cond.true.466, label %cond.false.467

cond.true.466:                                    ; preds = %if.end.464
  %358 = load i8*, i8** %tryname, align 8
  br label %cond.end.468

cond.false.467:                                   ; preds = %if.end.464
  %359 = load i8*, i8** %name, align 8
  br label %cond.end.468

cond.end.468:                                     ; preds = %cond.false.467, %cond.true.466
  %cond469 = phi i8* [ %358, %cond.true.466 ], [ %359, %cond.false.467 ]
  %call470 = call %struct.gv* @Perl_gv_fetchfile(i8* %cond469)
  %360 = bitcast %struct.gv* %call470 to %struct.sv*
  store %struct.sv* %360, %struct.sv** @PL_Sv, align 8
  %361 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %tobool471 = icmp ne %struct.sv* %361, null
  br i1 %tobool471, label %land.rhs.472, label %land.end.476

land.rhs.472:                                     ; preds = %cond.end.468
  %362 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_refcnt473 = getelementptr inbounds %struct.sv, %struct.sv* %362, i32 0, i32 1
  %363 = load i32, i32* %sv_refcnt473, align 4
  %inc474 = add i32 %363, 1
  store i32 %inc474, i32* %sv_refcnt473, align 4
  %tobool475 = icmp ne i32 %inc474, 0
  br label %land.end.476

land.end.476:                                     ; preds = %land.rhs.472, %cond.end.468
  %364 = phi i1 [ false, %cond.end.468 ], [ %tobool475, %land.rhs.472 ]
  %land.ext477 = zext i1 %364 to i32
  %365 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %366 = bitcast %struct.sv* %365 to %struct.gv*
  store %struct.gv* %366, %struct.gv** getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %367 = load %struct.sv*, %struct.sv** %namesv, align 8
  call void @Perl_sv_free(%struct.sv* %367)
  %368 = load %struct._PerlIO**, %struct._PerlIO*** %tryrsfp, align 8
  %tobool478 = icmp ne %struct._PerlIO** %368, null
  br i1 %tobool478, label %if.else.575, label %if.then.479

if.then.479:                                      ; preds = %land.end.476
  %369 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type480 = getelementptr inbounds %struct.op, %struct.op* %369, i32 0, i32 4
  %370 = load i16, i16* %op_type480, align 2
  %conv481 = zext i16 %370 to i32
  %cmp482 = icmp eq i32 %conv481, 309
  br i1 %cmp482, label %if.then.484, label %if.end.572

if.then.484:                                      ; preds = %if.then.479
  %371 = load i8*, i8** %name, align 8
  store i8* %371, i8** %msgstr, align 8
  %372 = load %struct.sv*, %struct.sv** %namesv, align 8
  %tobool486 = icmp ne %struct.sv* %372, null
  br i1 %tobool486, label %if.then.487, label %if.end.570

if.then.487:                                      ; preds = %if.then.484
  %373 = load i8*, i8** %msgstr, align 8
  %call489 = call %struct.sv* @Perl_newSVpv(i8* %373, i64 0)
  %call490 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call489)
  store %struct.sv* %call490, %struct.sv** %msg, align 8
  %call492 = call %struct.sv* @Perl_newSV(i64 0)
  store %struct.sv* %call492, %struct.sv** %dirmsgsv, align 8
  %374 = load %struct.gv*, %struct.gv** @PL_incgv, align 8
  %sv_any495 = getelementptr inbounds %struct.gv, %struct.gv* %374, i32 0, i32 0
  %375 = load %struct.xpvgv*, %struct.xpvgv** %sv_any495, align 8
  %xgv_gp496 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %375, i32 0, i32 7
  %376 = load %struct.gp*, %struct.gp** %xgv_gp496, align 8
  %gp_av497 = getelementptr inbounds %struct.gp, %struct.gp* %376, i32 0, i32 4
  %377 = load %struct.av*, %struct.av** %gp_av497, align 8
  %tobool498 = icmp ne %struct.av* %377, null
  br i1 %tobool498, label %cond.true.499, label %cond.false.503

cond.true.499:                                    ; preds = %if.then.487
  %378 = load %struct.gv*, %struct.gv** @PL_incgv, align 8
  %sv_any500 = getelementptr inbounds %struct.gv, %struct.gv* %378, i32 0, i32 0
  %379 = load %struct.xpvgv*, %struct.xpvgv** %sv_any500, align 8
  %xgv_gp501 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %379, i32 0, i32 7
  %380 = load %struct.gp*, %struct.gp** %xgv_gp501, align 8
  %gp_av502 = getelementptr inbounds %struct.gp, %struct.gp* %380, i32 0, i32 4
  %381 = load %struct.av*, %struct.av** %gp_av502, align 8
  br label %cond.end.508

cond.false.503:                                   ; preds = %if.then.487
  %382 = load %struct.gv*, %struct.gv** @PL_incgv, align 8
  %call504 = call %struct.gv* @Perl_gv_AVadd(%struct.gv* %382)
  %sv_any505 = getelementptr inbounds %struct.gv, %struct.gv* %call504, i32 0, i32 0
  %383 = load %struct.xpvgv*, %struct.xpvgv** %sv_any505, align 8
  %xgv_gp506 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %383, i32 0, i32 7
  %384 = load %struct.gp*, %struct.gp** %xgv_gp506, align 8
  %gp_av507 = getelementptr inbounds %struct.gp, %struct.gp* %384, i32 0, i32 4
  %385 = load %struct.av*, %struct.av** %gp_av507, align 8
  br label %cond.end.508

cond.end.508:                                     ; preds = %cond.false.503, %cond.true.499
  %cond509 = phi %struct.av* [ %381, %cond.true.499 ], [ %385, %cond.false.503 ]
  store %struct.av* %cond509, %struct.av** %ar494, align 8
  %386 = load %struct.sv*, %struct.sv** %msg, align 8
  call void @Perl_sv_catpvn_flags(%struct.sv* %386, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.58, i32 0, i32 0), i64 8, i32 2)
  %387 = load %struct.sv*, %struct.sv** %msg, align 8
  %sv_any512 = getelementptr inbounds %struct.sv, %struct.sv* %387, i32 0, i32 0
  %388 = load i8*, i8** %sv_any512, align 8
  %389 = bitcast i8* %388 to %struct.xpv*
  %xpv_pv513 = getelementptr inbounds %struct.xpv, %struct.xpv* %389, i32 0, i32 0
  %390 = load i8*, i8** %xpv_pv513, align 8
  %call514 = call i8* @Perl_instr(i8* %390, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.59, i32 0, i32 0))
  %tobool515 = icmp ne i8* %call514, null
  br i1 %tobool515, label %if.then.516, label %if.end.517

if.then.516:                                      ; preds = %cond.end.508
  %391 = load %struct.sv*, %struct.sv** %msg, align 8
  call void @Perl_sv_catpv(%struct.sv* %391, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.60, i32 0, i32 0))
  br label %if.end.517

if.end.517:                                       ; preds = %if.then.516, %cond.end.508
  %392 = load %struct.sv*, %struct.sv** %msg, align 8
  %sv_any518 = getelementptr inbounds %struct.sv, %struct.sv* %392, i32 0, i32 0
  %393 = load i8*, i8** %sv_any518, align 8
  %394 = bitcast i8* %393 to %struct.xpv*
  %xpv_pv519 = getelementptr inbounds %struct.xpv, %struct.xpv* %394, i32 0, i32 0
  %395 = load i8*, i8** %xpv_pv519, align 8
  %call520 = call i8* @Perl_instr(i8* %395, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.61, i32 0, i32 0))
  %tobool521 = icmp ne i8* %call520, null
  br i1 %tobool521, label %if.then.522, label %if.end.523

if.then.522:                                      ; preds = %if.end.517
  %396 = load %struct.sv*, %struct.sv** %msg, align 8
  call void @Perl_sv_catpv(%struct.sv* %396, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.62, i32 0, i32 0))
  br label %if.end.523

if.end.523:                                       ; preds = %if.then.522, %if.end.517
  %397 = load %struct.sv*, %struct.sv** %msg, align 8
  call void @Perl_sv_catpv(%struct.sv* %397, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.63, i32 0, i32 0))
  store i32 0, i32* %i511, align 4
  br label %for.cond.524

for.cond.524:                                     ; preds = %for.inc.556, %if.end.523
  %398 = load i32, i32* %i511, align 4
  %conv525 = sext i32 %398 to i64
  %399 = load %struct.av*, %struct.av** %ar494, align 8
  %400 = bitcast %struct.av* %399 to %struct.sv*
  %sv_flags526 = getelementptr inbounds %struct.sv, %struct.sv* %400, i32 0, i32 2
  %401 = load i32, i32* %sv_flags526, align 4
  %and527 = and i32 %401, 32768
  %tobool528 = icmp ne i32 %and527, 0
  br i1 %tobool528, label %cond.true.529, label %cond.false.532

cond.true.529:                                    ; preds = %for.cond.524
  %402 = load %struct.av*, %struct.av** %ar494, align 8
  %403 = bitcast %struct.av* %402 to %struct.sv*
  %call530 = call i32 @Perl_mg_size(%struct.sv* %403)
  %conv531 = sext i32 %call530 to i64
  br label %cond.end.535

cond.false.532:                                   ; preds = %for.cond.524
  %404 = load %struct.av*, %struct.av** %ar494, align 8
  %sv_any533 = getelementptr inbounds %struct.av, %struct.av* %404, i32 0, i32 0
  %405 = load %struct.xpvav*, %struct.xpvav** %sv_any533, align 8
  %xav_fill534 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %405, i32 0, i32 1
  %406 = load i64, i64* %xav_fill534, align 8
  br label %cond.end.535

cond.end.535:                                     ; preds = %cond.false.532, %cond.true.529
  %cond536 = phi i64 [ %conv531, %cond.true.529 ], [ %406, %cond.false.532 ]
  %cmp537 = icmp sle i64 %conv525, %cond536
  br i1 %cmp537, label %for.body.539, label %for.end.558

for.body.539:                                     ; preds = %cond.end.535
  %407 = load %struct.av*, %struct.av** %ar494, align 8
  %408 = load i32, i32* %i511, align 4
  %call542 = call %struct.sv** @Perl_av_fetch(%struct.av* %407, i32 %408, i32 1)
  %409 = load %struct.sv*, %struct.sv** %call542, align 8
  store %struct.sv* %409, %struct.sv** @PL_Sv, align 8
  %410 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags543 = getelementptr inbounds %struct.sv, %struct.sv* %410, i32 0, i32 2
  %411 = load i32, i32* %sv_flags543, align 4
  %and544 = and i32 %411, 262144
  %cmp545 = icmp eq i32 %and544, 262144
  br i1 %cmp545, label %cond.true.547, label %cond.false.552

cond.true.547:                                    ; preds = %for.body.539
  %412 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any548 = getelementptr inbounds %struct.sv, %struct.sv* %412, i32 0, i32 0
  %413 = load i8*, i8** %sv_any548, align 8
  %414 = bitcast i8* %413 to %struct.xpv*
  %xpv_cur549 = getelementptr inbounds %struct.xpv, %struct.xpv* %414, i32 0, i32 1
  %415 = load i64, i64* %xpv_cur549, align 8
  store i64 %415, i64* %n_a, align 8
  %416 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any550 = getelementptr inbounds %struct.sv, %struct.sv* %416, i32 0, i32 0
  %417 = load i8*, i8** %sv_any550, align 8
  %418 = bitcast i8* %417 to %struct.xpv*
  %xpv_pv551 = getelementptr inbounds %struct.xpv, %struct.xpv* %418, i32 0, i32 0
  %419 = load i8*, i8** %xpv_pv551, align 8
  br label %cond.end.554

cond.false.552:                                   ; preds = %for.body.539
  %420 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %call553 = call i8* @Perl_sv_2pv_flags(%struct.sv* %420, i64* %n_a, i32 2)
  br label %cond.end.554

cond.end.554:                                     ; preds = %cond.false.552, %cond.true.547
  %cond555 = phi i8* [ %419, %cond.true.547 ], [ %call553, %cond.false.552 ]
  store i8* %cond555, i8** %dir541, align 8
  %421 = load %struct.sv*, %struct.sv** %dirmsgsv, align 8
  %422 = load i8*, i8** %dir541, align 8
  call void (%struct.sv*, i8*, ...) @Perl_sv_setpvf(%struct.sv* %421, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.64, i32 0, i32 0), i8* %422)
  %423 = load %struct.sv*, %struct.sv** %msg, align 8
  %424 = load %struct.sv*, %struct.sv** %dirmsgsv, align 8
  call void @Perl_sv_catsv_flags(%struct.sv* %423, %struct.sv* %424, i32 2)
  br label %for.inc.556

for.inc.556:                                      ; preds = %cond.end.554
  %425 = load i32, i32* %i511, align 4
  %inc557 = add nsw i32 %425, 1
  store i32 %inc557, i32* %i511, align 4
  br label %for.cond.524

for.end.558:                                      ; preds = %cond.end.535
  %426 = load %struct.sv*, %struct.sv** %msg, align 8
  call void @Perl_sv_catpvn_flags(%struct.sv* %426, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.65, i32 0, i32 0), i64 1, i32 2)
  %427 = load %struct.sv*, %struct.sv** %dirmsgsv, align 8
  call void @Perl_sv_free(%struct.sv* %427)
  %428 = load %struct.sv*, %struct.sv** %msg, align 8
  %sv_flags559 = getelementptr inbounds %struct.sv, %struct.sv* %428, i32 0, i32 2
  %429 = load i32, i32* %sv_flags559, align 4
  %and560 = and i32 %429, 262144
  %cmp561 = icmp eq i32 %and560, 262144
  br i1 %cmp561, label %cond.true.563, label %cond.false.566

cond.true.563:                                    ; preds = %for.end.558
  %430 = load %struct.sv*, %struct.sv** %msg, align 8
  %sv_any564 = getelementptr inbounds %struct.sv, %struct.sv* %430, i32 0, i32 0
  %431 = load i8*, i8** %sv_any564, align 8
  %432 = bitcast i8* %431 to %struct.xpv*
  %xpv_pv565 = getelementptr inbounds %struct.xpv, %struct.xpv* %432, i32 0, i32 0
  %433 = load i8*, i8** %xpv_pv565, align 8
  br label %cond.end.568

cond.false.566:                                   ; preds = %for.end.558
  %434 = load %struct.sv*, %struct.sv** %msg, align 8
  %call567 = call i8* @Perl_sv_2pv_nolen(%struct.sv* %434)
  br label %cond.end.568

cond.end.568:                                     ; preds = %cond.false.566, %cond.true.563
  %cond569 = phi i8* [ %433, %cond.true.563 ], [ %call567, %cond.false.566 ]
  store i8* %cond569, i8** %msgstr, align 8
  br label %if.end.570

if.end.570:                                       ; preds = %cond.end.568, %if.then.484
  %435 = load i8*, i8** %msgstr, align 8
  %call571 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.66, i32 0, i32 0), i8* %435)
  store %struct.op* %call571, %struct.op** %retval
  br label %return

if.end.572:                                       ; preds = %if.then.479
  %436 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr573 = getelementptr inbounds %struct.sv*, %struct.sv** %436, i32 1
  store %struct.sv** %incdec.ptr573, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %incdec.ptr573, align 8
  %437 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %437, %struct.sv*** @PL_stack_sp, align 8
  %438 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next574 = getelementptr inbounds %struct.op, %struct.op* %438, i32 0, i32 0
  %439 = load %struct.op*, %struct.op** %op_next574, align 8
  store %struct.op* %439, %struct.op** %retval
  br label %return

if.else.575:                                      ; preds = %land.end.476
  %call576 = call i32* @__errno_location()
  store i32 0, i32* %call576, align 4
  br label %if.end.577

if.end.577:                                       ; preds = %if.else.575
  %440 = load i8*, i8** %name, align 8
  %call578 = call i64 @strlen(i8* %440)
  store i64 %call578, i64* %len, align 8
  %441 = load %struct.sv*, %struct.sv** %hook_sv, align 8
  %tobool579 = icmp ne %struct.sv* %441, null
  br i1 %tobool579, label %lor.lhs.false.580, label %if.then.599

lor.lhs.false.580:                                ; preds = %if.end.577
  %442 = load %struct.gv*, %struct.gv** @PL_incgv, align 8
  %sv_any581 = getelementptr inbounds %struct.gv, %struct.gv* %442, i32 0, i32 0
  %443 = load %struct.xpvgv*, %struct.xpvgv** %sv_any581, align 8
  %xgv_gp582 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %443, i32 0, i32 7
  %444 = load %struct.gp*, %struct.gp** %xgv_gp582, align 8
  %gp_hv583 = getelementptr inbounds %struct.gp, %struct.gp* %444, i32 0, i32 5
  %445 = load %struct.hv*, %struct.hv** %gp_hv583, align 8
  %tobool584 = icmp ne %struct.hv* %445, null
  br i1 %tobool584, label %cond.true.585, label %cond.false.589

cond.true.585:                                    ; preds = %lor.lhs.false.580
  %446 = load %struct.gv*, %struct.gv** @PL_incgv, align 8
  %sv_any586 = getelementptr inbounds %struct.gv, %struct.gv* %446, i32 0, i32 0
  %447 = load %struct.xpvgv*, %struct.xpvgv** %sv_any586, align 8
  %xgv_gp587 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %447, i32 0, i32 7
  %448 = load %struct.gp*, %struct.gp** %xgv_gp587, align 8
  %gp_hv588 = getelementptr inbounds %struct.gp, %struct.gp* %448, i32 0, i32 5
  %449 = load %struct.hv*, %struct.hv** %gp_hv588, align 8
  br label %cond.end.594

cond.false.589:                                   ; preds = %lor.lhs.false.580
  %450 = load %struct.gv*, %struct.gv** @PL_incgv, align 8
  %call590 = call %struct.gv* @Perl_gv_HVadd(%struct.gv* %450)
  %sv_any591 = getelementptr inbounds %struct.gv, %struct.gv* %call590, i32 0, i32 0
  %451 = load %struct.xpvgv*, %struct.xpvgv** %sv_any591, align 8
  %xgv_gp592 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %451, i32 0, i32 7
  %452 = load %struct.gp*, %struct.gp** %xgv_gp592, align 8
  %gp_hv593 = getelementptr inbounds %struct.gp, %struct.gp* %452, i32 0, i32 5
  %453 = load %struct.hv*, %struct.hv** %gp_hv593, align 8
  br label %cond.end.594

cond.end.594:                                     ; preds = %cond.false.589, %cond.true.585
  %cond595 = phi %struct.hv* [ %449, %cond.true.585 ], [ %453, %cond.false.589 ]
  %454 = load i8*, i8** %name, align 8
  %455 = load i64, i64* %len, align 8
  %conv596 = trunc i64 %455 to i32
  %call597 = call %struct.sv** @Perl_hv_fetch(%struct.hv* %cond595, i8* %454, i32 %conv596, i32 0)
  store %struct.sv** %call597, %struct.sv*** %svp, align 8
  %tobool598 = icmp ne %struct.sv** %call597, null
  br i1 %tobool598, label %if.end.650, label %if.then.599

if.then.599:                                      ; preds = %cond.end.594, %if.end.577
  %456 = load %struct.gv*, %struct.gv** @PL_incgv, align 8
  %sv_any600 = getelementptr inbounds %struct.gv, %struct.gv* %456, i32 0, i32 0
  %457 = load %struct.xpvgv*, %struct.xpvgv** %sv_any600, align 8
  %xgv_gp601 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %457, i32 0, i32 7
  %458 = load %struct.gp*, %struct.gp** %xgv_gp601, align 8
  %gp_hv602 = getelementptr inbounds %struct.gp, %struct.gp* %458, i32 0, i32 5
  %459 = load %struct.hv*, %struct.hv** %gp_hv602, align 8
  %tobool603 = icmp ne %struct.hv* %459, null
  br i1 %tobool603, label %cond.true.604, label %cond.false.608

cond.true.604:                                    ; preds = %if.then.599
  %460 = load %struct.gv*, %struct.gv** @PL_incgv, align 8
  %sv_any605 = getelementptr inbounds %struct.gv, %struct.gv* %460, i32 0, i32 0
  %461 = load %struct.xpvgv*, %struct.xpvgv** %sv_any605, align 8
  %xgv_gp606 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %461, i32 0, i32 7
  %462 = load %struct.gp*, %struct.gp** %xgv_gp606, align 8
  %gp_hv607 = getelementptr inbounds %struct.gp, %struct.gp* %462, i32 0, i32 5
  %463 = load %struct.hv*, %struct.hv** %gp_hv607, align 8
  br label %cond.end.613

cond.false.608:                                   ; preds = %if.then.599
  %464 = load %struct.gv*, %struct.gv** @PL_incgv, align 8
  %call609 = call %struct.gv* @Perl_gv_HVadd(%struct.gv* %464)
  %sv_any610 = getelementptr inbounds %struct.gv, %struct.gv* %call609, i32 0, i32 0
  %465 = load %struct.xpvgv*, %struct.xpvgv** %sv_any610, align 8
  %xgv_gp611 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %465, i32 0, i32 7
  %466 = load %struct.gp*, %struct.gp** %xgv_gp611, align 8
  %gp_hv612 = getelementptr inbounds %struct.gp, %struct.gp* %466, i32 0, i32 5
  %467 = load %struct.hv*, %struct.hv** %gp_hv612, align 8
  br label %cond.end.613

cond.end.613:                                     ; preds = %cond.false.608, %cond.true.604
  %cond614 = phi %struct.hv* [ %463, %cond.true.604 ], [ %467, %cond.false.608 ]
  %468 = load i8*, i8** %name, align 8
  %469 = load i64, i64* %len, align 8
  %conv615 = trunc i64 %469 to i32
  %470 = load %struct.sv*, %struct.sv** %hook_sv, align 8
  %tobool616 = icmp ne %struct.sv* %470, null
  br i1 %tobool616, label %cond.true.617, label %cond.false.625

cond.true.617:                                    ; preds = %cond.end.613
  %471 = load %struct.sv*, %struct.sv** %hook_sv, align 8
  store %struct.sv* %471, %struct.sv** @PL_Sv, align 8
  %472 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %tobool618 = icmp ne %struct.sv* %472, null
  br i1 %tobool618, label %land.rhs.619, label %land.end.623

land.rhs.619:                                     ; preds = %cond.true.617
  %473 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_refcnt620 = getelementptr inbounds %struct.sv, %struct.sv* %473, i32 0, i32 1
  %474 = load i32, i32* %sv_refcnt620, align 4
  %inc621 = add i32 %474, 1
  store i32 %inc621, i32* %sv_refcnt620, align 4
  %tobool622 = icmp ne i32 %inc621, 0
  br label %land.end.623

land.end.623:                                     ; preds = %land.rhs.619, %cond.true.617
  %475 = phi i1 [ false, %cond.true.617 ], [ %tobool622, %land.rhs.619 ]
  %land.ext624 = zext i1 %475 to i32
  %476 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  br label %cond.end.647

cond.false.625:                                   ; preds = %cond.end.613
  %477 = load %struct.gv*, %struct.gv** getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %tobool626 = icmp ne %struct.gv* %477, null
  br i1 %tobool626, label %cond.true.627, label %cond.false.631

cond.true.627:                                    ; preds = %cond.false.625
  %478 = load %struct.gv*, %struct.gv** getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %sv_any628 = getelementptr inbounds %struct.gv, %struct.gv* %478, i32 0, i32 0
  %479 = load %struct.xpvgv*, %struct.xpvgv** %sv_any628, align 8
  %xgv_gp629 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %479, i32 0, i32 7
  %480 = load %struct.gp*, %struct.gp** %xgv_gp629, align 8
  %gp_sv = getelementptr inbounds %struct.gp, %struct.gp* %480, i32 0, i32 0
  %481 = load %struct.sv*, %struct.sv** %gp_sv, align 8
  %tobool630 = icmp ne %struct.sv* %481, null
  br i1 %tobool630, label %cond.true.632, label %cond.false.643

cond.false.631:                                   ; preds = %cond.false.625
  br i1 false, label %cond.true.632, label %cond.false.643

cond.true.632:                                    ; preds = %cond.false.631, %cond.true.627
  %482 = load %struct.gv*, %struct.gv** getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %tobool633 = icmp ne %struct.gv* %482, null
  br i1 %tobool633, label %cond.true.634, label %cond.false.638

cond.true.634:                                    ; preds = %cond.true.632
  %483 = load %struct.gv*, %struct.gv** getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %sv_any635 = getelementptr inbounds %struct.gv, %struct.gv* %483, i32 0, i32 0
  %484 = load %struct.xpvgv*, %struct.xpvgv** %sv_any635, align 8
  %xgv_gp636 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %484, i32 0, i32 7
  %485 = load %struct.gp*, %struct.gp** %xgv_gp636, align 8
  %gp_sv637 = getelementptr inbounds %struct.gp, %struct.gp* %485, i32 0, i32 0
  %486 = load %struct.sv*, %struct.sv** %gp_sv637, align 8
  br label %cond.end.639

cond.false.638:                                   ; preds = %cond.true.632
  br label %cond.end.639

cond.end.639:                                     ; preds = %cond.false.638, %cond.true.634
  %cond640 = phi %struct.sv* [ %486, %cond.true.634 ], [ null, %cond.false.638 ]
  %sv_any641 = getelementptr inbounds %struct.sv, %struct.sv* %cond640, i32 0, i32 0
  %487 = load i8*, i8** %sv_any641, align 8
  %488 = bitcast i8* %487 to %struct.xpv*
  %xpv_pv642 = getelementptr inbounds %struct.xpv, %struct.xpv* %488, i32 0, i32 0
  %489 = load i8*, i8** %xpv_pv642, align 8
  br label %cond.end.644

cond.false.643:                                   ; preds = %cond.false.631, %cond.true.627
  br label %cond.end.644

cond.end.644:                                     ; preds = %cond.false.643, %cond.end.639
  %cond645 = phi i8* [ %489, %cond.end.639 ], [ null, %cond.false.643 ]
  %call646 = call %struct.sv* @Perl_newSVpv(i8* %cond645, i64 0)
  br label %cond.end.647

cond.end.647:                                     ; preds = %cond.end.644, %land.end.623
  %cond648 = phi %struct.sv* [ %476, %land.end.623 ], [ %call646, %cond.end.644 ]
  %call649 = call %struct.sv** @Perl_hv_store(%struct.hv* %cond614, i8* %468, i32 %conv615, %struct.sv* %cond648, i32 0)
  br label %if.end.650

if.end.650:                                       ; preds = %cond.end.647, %cond.end.594
  call void @Perl_push_scope()
  call void @Perl_save_int(i32* @PL_tmps_floor)
  %490 = load i32, i32* @PL_tmps_ix, align 4
  store i32 %490, i32* @PL_tmps_floor, align 4
  %call651 = call %struct.sv* @Perl_newSVpvn(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.11, i32 0, i32 0), i64 0)
  %call652 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call651)
  call void @Perl_lex_start(%struct.sv* %call652)
  call void @Perl_save_generic_svref(%struct.sv** bitcast (%struct.av** @PL_rsfp_filters to %struct.sv**))
  store %struct.av* null, %struct.av** @PL_rsfp_filters, align 8
  %491 = load %struct._PerlIO**, %struct._PerlIO*** %tryrsfp, align 8
  store volatile %struct._PerlIO** %491, %struct._PerlIO*** @PL_rsfp, align 8
  %492 = load i32, i32* @PL_savestack_ix, align 4
  %add653 = add nsw i32 %492, 3
  %493 = load i32, i32* @PL_savestack_max, align 4
  %cmp654 = icmp sgt i32 %add653, %493
  br i1 %cmp654, label %if.then.656, label %if.end.657

if.then.656:                                      ; preds = %if.end.650
  call void @Perl_savestack_grow()
  br label %if.end.657

if.end.657:                                       ; preds = %if.then.656, %if.end.650
  %494 = load i32, i32* @PL_hints, align 4
  %and658 = and i32 %494, 131072
  %tobool659 = icmp ne i32 %and658, 0
  br i1 %tobool659, label %if.then.660, label %if.end.674

if.then.660:                                      ; preds = %if.end.657
  %495 = load %struct.gv*, %struct.gv** @PL_hintgv, align 8
  %sv_any661 = getelementptr inbounds %struct.gv, %struct.gv* %495, i32 0, i32 0
  %496 = load %struct.xpvgv*, %struct.xpvgv** %sv_any661, align 8
  %xgv_gp662 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %496, i32 0, i32 7
  %497 = load %struct.gp*, %struct.gp** %xgv_gp662, align 8
  %gp_hv663 = getelementptr inbounds %struct.gp, %struct.gp* %497, i32 0, i32 5
  %498 = load %struct.hv*, %struct.hv** %gp_hv663, align 8
  %499 = bitcast %struct.hv* %498 to i8*
  %500 = load i32, i32* @PL_savestack_ix, align 4
  %inc664 = add nsw i32 %500, 1
  store i32 %inc664, i32* @PL_savestack_ix, align 4
  %idxprom665 = sext i32 %500 to i64
  %501 = load %union.any*, %union.any** @PL_savestack, align 8
  %arrayidx666 = getelementptr inbounds %union.any, %union.any* %501, i64 %idxprom665
  %any_ptr = bitcast %union.any* %arrayidx666 to i8**
  store i8* %499, i8** %any_ptr, align 8
  %502 = load %struct.gv*, %struct.gv** @PL_hintgv, align 8
  %sv_any667 = getelementptr inbounds %struct.gv, %struct.gv* %502, i32 0, i32 0
  %503 = load %struct.xpvgv*, %struct.xpvgv** %sv_any667, align 8
  %xgv_gp668 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %503, i32 0, i32 7
  %504 = load %struct.gp*, %struct.gp** %xgv_gp668, align 8
  %gp_hv669 = getelementptr inbounds %struct.gp, %struct.gp* %504, i32 0, i32 5
  %505 = load %struct.hv*, %struct.hv** %gp_hv669, align 8
  %call670 = call %struct.hv* @Perl_newHVhv(%struct.hv* %505)
  %506 = load %struct.gv*, %struct.gv** @PL_hintgv, align 8
  %sv_any671 = getelementptr inbounds %struct.gv, %struct.gv* %506, i32 0, i32 0
  %507 = load %struct.xpvgv*, %struct.xpvgv** %sv_any671, align 8
  %xgv_gp672 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %507, i32 0, i32 7
  %508 = load %struct.gp*, %struct.gp** %xgv_gp672, align 8
  %gp_hv673 = getelementptr inbounds %struct.gp, %struct.gp* %508, i32 0, i32 5
  store %struct.hv* %call670, %struct.hv** %gp_hv673, align 8
  br label %if.end.674

if.end.674:                                       ; preds = %if.then.660, %if.end.657
  %509 = load i32, i32* @PL_hints, align 4
  %510 = load i32, i32* @PL_savestack_ix, align 4
  %inc675 = add nsw i32 %510, 1
  store i32 %inc675, i32* @PL_savestack_ix, align 4
  %idxprom676 = sext i32 %510 to i64
  %511 = load %union.any*, %union.any** @PL_savestack, align 8
  %arrayidx677 = getelementptr inbounds %union.any, %union.any* %511, i64 %idxprom676
  %any_i32 = bitcast %union.any* %arrayidx677 to i32*
  store i32 %509, i32* %any_i32, align 4
  %512 = load i32, i32* @PL_savestack_ix, align 4
  %inc679 = add nsw i32 %512, 1
  store i32 %inc679, i32* @PL_savestack_ix, align 4
  %idxprom680 = sext i32 %512 to i64
  %513 = load %union.any*, %union.any** @PL_savestack, align 8
  %arrayidx681 = getelementptr inbounds %union.any, %union.any* %513, i64 %idxprom680
  %any_i32682 = bitcast %union.any* %arrayidx681 to i32*
  store i32 27, i32* %any_i32682, align 4
  store i32 27, i32* %tmp678
  %514 = load i32, i32* %tmp678
  store i32 0, i32* @PL_hints, align 4
  call void @Perl_save_sptr(%struct.sv** getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 14))
  %515 = load i8, i8* @PL_dowarn, align 1
  %conv683 = zext i8 %515 to i32
  %and684 = and i32 %conv683, 2
  %tobool685 = icmp ne i32 %and684, 0
  br i1 %tobool685, label %if.then.686, label %if.else.687

if.then.686:                                      ; preds = %if.end.674
  store %struct.sv* getelementptr inbounds (%struct.sv, %struct.sv* null, i64 1), %struct.sv** getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 14), align 8
  br label %if.end.699

if.else.687:                                      ; preds = %if.end.674
  %516 = load i8, i8* @PL_dowarn, align 1
  %conv688 = zext i8 %516 to i32
  %and689 = and i32 %conv688, 4
  %tobool690 = icmp ne i32 %and689, 0
  br i1 %tobool690, label %if.then.691, label %if.else.692

if.then.691:                                      ; preds = %if.else.687
  store %struct.sv* getelementptr inbounds (%struct.sv, %struct.sv* null, i64 2), %struct.sv** getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 14), align 8
  br label %if.end.698

if.else.692:                                      ; preds = %if.else.687
  %517 = load i8, i8* @PL_taint_warn, align 1
  %tobool693 = icmp ne i8 %517, 0
  br i1 %tobool693, label %if.then.694, label %if.else.696

if.then.694:                                      ; preds = %if.else.692
  %call695 = call %struct.sv* @Perl_newSVpvn(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.67, i32 0, i32 0), i64 12)
  store %struct.sv* %call695, %struct.sv** getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 14), align 8
  br label %if.end.697

if.else.696:                                      ; preds = %if.else.692
  store %struct.sv* null, %struct.sv** getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 14), align 8
  br label %if.end.697

if.end.697:                                       ; preds = %if.else.696, %if.then.694
  br label %if.end.698

if.end.698:                                       ; preds = %if.end.697, %if.then.691
  br label %if.end.699

if.end.699:                                       ; preds = %if.end.698, %if.then.686
  call void @Perl_save_sptr(%struct.sv** getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 15))
  store %struct.sv* null, %struct.sv** getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 15), align 8
  %518 = load %struct.sv*, %struct.sv** %filter_sub, align 8
  %tobool700 = icmp ne %struct.sv* %518, null
  br i1 %tobool700, label %if.then.703, label %lor.lhs.false.701

lor.lhs.false.701:                                ; preds = %if.end.699
  %519 = load %struct.gv*, %struct.gv** %filter_child_proc, align 8
  %tobool702 = icmp ne %struct.gv* %519, null
  br i1 %tobool702, label %if.then.703, label %if.end.711

if.then.703:                                      ; preds = %lor.lhs.false.701, %if.end.699
  %call705 = call %struct.sv* @Perl_filter_add(i32 (i32, %struct.sv*, i32)* @run_user_filter, %struct.sv* null)
  store %struct.sv* %call705, %struct.sv** %datasv, align 8
  %520 = load i32, i32* %filter_has_file, align 4
  %conv706 = sext i32 %520 to i64
  %521 = load %struct.sv*, %struct.sv** %datasv, align 8
  %sv_any707 = getelementptr inbounds %struct.sv, %struct.sv* %521, i32 0, i32 0
  %522 = load i8*, i8** %sv_any707, align 8
  %523 = bitcast i8* %522 to %struct.xpvio*
  %xio_lines = getelementptr inbounds %struct.xpvio, %struct.xpvio* %523, i32 0, i32 10
  store i64 %conv706, i64* %xio_lines, align 8
  %524 = load %struct.gv*, %struct.gv** %filter_child_proc, align 8
  %525 = load %struct.sv*, %struct.sv** %datasv, align 8
  %sv_any708 = getelementptr inbounds %struct.sv, %struct.sv* %525, i32 0, i32 0
  %526 = load i8*, i8** %sv_any708, align 8
  %527 = bitcast i8* %526 to %struct.xpvio*
  %xio_fmt_gv = getelementptr inbounds %struct.xpvio, %struct.xpvio* %527, i32 0, i32 17
  store %struct.gv* %524, %struct.gv** %xio_fmt_gv, align 8
  %528 = load %struct.sv*, %struct.sv** %filter_state, align 8
  %529 = bitcast %struct.sv* %528 to %struct.gv*
  %530 = load %struct.sv*, %struct.sv** %datasv, align 8
  %sv_any709 = getelementptr inbounds %struct.sv, %struct.sv* %530, i32 0, i32 0
  %531 = load i8*, i8** %sv_any709, align 8
  %532 = bitcast i8* %531 to %struct.xpvio*
  %xio_top_gv = getelementptr inbounds %struct.xpvio, %struct.xpvio* %532, i32 0, i32 15
  store %struct.gv* %529, %struct.gv** %xio_top_gv, align 8
  %533 = load %struct.sv*, %struct.sv** %filter_sub, align 8
  %534 = bitcast %struct.sv* %533 to %struct.gv*
  %535 = load %struct.sv*, %struct.sv** %datasv, align 8
  %sv_any710 = getelementptr inbounds %struct.sv, %struct.sv* %535, i32 0, i32 0
  %536 = load i8*, i8** %sv_any710, align 8
  %537 = bitcast i8* %536 to %struct.xpvio*
  %xio_bottom_gv = getelementptr inbounds %struct.xpvio, %struct.xpvio* %537, i32 0, i32 19
  store %struct.gv* %534, %struct.gv** %xio_bottom_gv, align 8
  br label %if.end.711

if.end.711:                                       ; preds = %if.then.703, %lor.lhs.false.701
  %538 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next712 = getelementptr inbounds %struct.op, %struct.op* %538, i32 0, i32 0
  %539 = load %struct.op*, %struct.op** %op_next712, align 8
  call void @Perl_push_return(%struct.op* %539)
  %540 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %540, i32 0, i32 2
  %541 = load i32, i32* %si_cxix, align 4
  %542 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxmax = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %542, i32 0, i32 3
  %543 = load i32, i32* %si_cxmax, align 4
  %cmp713 = icmp slt i32 %541, %543
  br i1 %cmp713, label %cond.true.715, label %cond.false.718

cond.true.715:                                    ; preds = %if.end.711
  %544 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix716 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %544, i32 0, i32 2
  %545 = load i32, i32* %si_cxix716, align 4
  %inc717 = add nsw i32 %545, 1
  store i32 %inc717, i32* %si_cxix716, align 4
  br label %cond.end.721

cond.false.718:                                   ; preds = %if.end.711
  %call719 = call i32 @Perl_cxinc()
  %546 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix720 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %546, i32 0, i32 2
  store i32 %call719, i32* %si_cxix720, align 4
  br label %cond.end.721

cond.end.721:                                     ; preds = %cond.false.718, %cond.true.715
  %cond722 = phi i32 [ %inc717, %cond.true.715 ], [ %call719, %cond.false.718 ]
  %547 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix723 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %547, i32 0, i32 2
  %548 = load i32, i32* %si_cxix723, align 4
  %idxprom724 = sext i32 %548 to i64
  %549 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxstack = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %549, i32 0, i32 1
  %550 = load %struct.context*, %struct.context** %si_cxstack, align 8
  %arrayidx725 = getelementptr inbounds %struct.context, %struct.context* %550, i64 %idxprom724
  store %struct.context* %arrayidx725, %struct.context** %cx, align 8
  %551 = load %struct.context*, %struct.context** %cx, align 8
  %cx_type = getelementptr inbounds %struct.context, %struct.context* %551, i32 0, i32 0
  store i32 2, i32* %cx_type, align 4
  %552 = load %struct.sv**, %struct.sv*** %sp, align 8
  %553 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast726 = ptrtoint %struct.sv** %552 to i64
  %sub.ptr.rhs.cast727 = ptrtoint %struct.sv** %553 to i64
  %sub.ptr.sub728 = sub i64 %sub.ptr.lhs.cast726, %sub.ptr.rhs.cast727
  %sub.ptr.div729 = sdiv exact i64 %sub.ptr.sub728, 8
  %conv730 = trunc i64 %sub.ptr.div729 to i32
  %554 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u = getelementptr inbounds %struct.context, %struct.context* %554, i32 0, i32 1
  %cx_blk = bitcast %union.anon* %cx_u to %struct.block*
  %blku_oldsp = getelementptr inbounds %struct.block, %struct.block* %cx_blk, i32 0, i32 0
  store i32 %conv730, i32* %blku_oldsp, align 4
  %555 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %556 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u731 = getelementptr inbounds %struct.context, %struct.context* %556, i32 0, i32 1
  %cx_blk732 = bitcast %union.anon* %cx_u731 to %struct.block*
  %blku_oldcop = getelementptr inbounds %struct.block, %struct.block* %cx_blk732, i32 0, i32 1
  store %struct.cop* %555, %struct.cop** %blku_oldcop, align 8
  %557 = load i32*, i32** @PL_markstack_ptr, align 8
  %558 = load i32*, i32** @PL_markstack, align 8
  %sub.ptr.lhs.cast733 = ptrtoint i32* %557 to i64
  %sub.ptr.rhs.cast734 = ptrtoint i32* %558 to i64
  %sub.ptr.sub735 = sub i64 %sub.ptr.lhs.cast733, %sub.ptr.rhs.cast734
  %sub.ptr.div736 = sdiv exact i64 %sub.ptr.sub735, 4
  %conv737 = trunc i64 %sub.ptr.div736 to i32
  %559 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u738 = getelementptr inbounds %struct.context, %struct.context* %559, i32 0, i32 1
  %cx_blk739 = bitcast %union.anon* %cx_u738 to %struct.block*
  %blku_oldmarksp = getelementptr inbounds %struct.block, %struct.block* %cx_blk739, i32 0, i32 3
  store i32 %conv737, i32* %blku_oldmarksp, align 4
  %560 = load i32, i32* @PL_scopestack_ix, align 4
  %561 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u740 = getelementptr inbounds %struct.context, %struct.context* %561, i32 0, i32 1
  %cx_blk741 = bitcast %union.anon* %cx_u740 to %struct.block*
  %blku_oldscopesp = getelementptr inbounds %struct.block, %struct.block* %cx_blk741, i32 0, i32 4
  store i32 %560, i32* %blku_oldscopesp, align 4
  %562 = load i32, i32* @PL_retstack_ix, align 4
  %563 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u742 = getelementptr inbounds %struct.context, %struct.context* %563, i32 0, i32 1
  %cx_blk743 = bitcast %union.anon* %cx_u742 to %struct.block*
  %blku_oldretsp = getelementptr inbounds %struct.block, %struct.block* %cx_blk743, i32 0, i32 2
  store i32 %562, i32* %blku_oldretsp, align 4
  %564 = load %struct.pmop*, %struct.pmop** @PL_curpm, align 8
  %565 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u744 = getelementptr inbounds %struct.context, %struct.context* %565, i32 0, i32 1
  %cx_blk745 = bitcast %union.anon* %cx_u744 to %struct.block*
  %blku_oldpm = getelementptr inbounds %struct.block, %struct.block* %cx_blk745, i32 0, i32 5
  store %struct.pmop* %564, %struct.pmop** %blku_oldpm, align 8
  %566 = load i32, i32* %gimme, align 4
  %conv746 = trunc i32 %566 to i8
  %567 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u747 = getelementptr inbounds %struct.context, %struct.context* %567, i32 0, i32 1
  %cx_blk748 = bitcast %union.anon* %cx_u747 to %struct.block*
  %blku_gimme = getelementptr inbounds %struct.block, %struct.block* %cx_blk748, i32 0, i32 6
  store i8 %conv746, i8* %blku_gimme, align 1
  %568 = load volatile i32, i32* @PL_in_eval, align 4
  %569 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u749 = getelementptr inbounds %struct.context, %struct.context* %569, i32 0, i32 1
  %cx_blk750 = bitcast %union.anon* %cx_u749 to %struct.block*
  %blk_u = getelementptr inbounds %struct.block, %struct.block* %cx_blk750, i32 0, i32 7
  %blku_eval = bitcast %union.anon.1* %blk_u to %struct.block_eval*
  %old_in_eval = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval, i32 0, i32 0
  store i32 %568, i32* %old_in_eval, align 4
  %570 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type751 = getelementptr inbounds %struct.op, %struct.op* %570, i32 0, i32 4
  %571 = load i16, i16* %op_type751, align 2
  %conv752 = zext i16 %571 to i32
  %572 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u753 = getelementptr inbounds %struct.context, %struct.context* %572, i32 0, i32 1
  %cx_blk754 = bitcast %union.anon* %cx_u753 to %struct.block*
  %blk_u755 = getelementptr inbounds %struct.block, %struct.block* %cx_blk754, i32 0, i32 7
  %blku_eval756 = bitcast %union.anon.1* %blk_u755 to %struct.block_eval*
  %old_op_type = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval756, i32 0, i32 1
  store i32 %conv752, i32* %old_op_type, align 4
  %573 = load i8*, i8** %name, align 8
  %tobool757 = icmp ne i8* %573, null
  br i1 %tobool757, label %cond.true.758, label %cond.false.760

cond.true.758:                                    ; preds = %cond.end.721
  %574 = load i8*, i8** %name, align 8
  %call759 = call %struct.sv* @Perl_newSVpv(i8* %574, i64 0)
  br label %cond.end.761

cond.false.760:                                   ; preds = %cond.end.721
  br label %cond.end.761

cond.end.761:                                     ; preds = %cond.false.760, %cond.true.758
  %cond762 = phi %struct.sv* [ %call759, %cond.true.758 ], [ null, %cond.false.760 ]
  %575 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u763 = getelementptr inbounds %struct.context, %struct.context* %575, i32 0, i32 1
  %cx_blk764 = bitcast %union.anon* %cx_u763 to %struct.block*
  %blk_u765 = getelementptr inbounds %struct.block, %struct.block* %cx_blk764, i32 0, i32 7
  %blku_eval766 = bitcast %union.anon.1* %blk_u765 to %struct.block_eval*
  %old_namesv = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval766, i32 0, i32 2
  store %struct.sv* %cond762, %struct.sv** %old_namesv, align 8
  %576 = load %struct.op*, %struct.op** @PL_eval_root, align 8
  %577 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u767 = getelementptr inbounds %struct.context, %struct.context* %577, i32 0, i32 1
  %cx_blk768 = bitcast %union.anon* %cx_u767 to %struct.block*
  %blk_u769 = getelementptr inbounds %struct.block, %struct.block* %cx_blk768, i32 0, i32 7
  %blku_eval770 = bitcast %union.anon.1* %blk_u769 to %struct.block_eval*
  %old_eval_root = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval770, i32 0, i32 3
  store %struct.op* %576, %struct.op** %old_eval_root, align 8
  %578 = load %struct.sv*, %struct.sv** @PL_linestr, align 8
  %579 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u771 = getelementptr inbounds %struct.context, %struct.context* %579, i32 0, i32 1
  %cx_blk772 = bitcast %union.anon* %cx_u771 to %struct.block*
  %blk_u773 = getelementptr inbounds %struct.block, %struct.block* %cx_blk772, i32 0, i32 7
  %blku_eval774 = bitcast %union.anon.1* %blk_u773 to %struct.block_eval*
  %cur_text = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval774, i32 0, i32 4
  store %struct.sv* %578, %struct.sv** %cur_text, align 8
  %580 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u776 = getelementptr inbounds %struct.context, %struct.context* %580, i32 0, i32 1
  %cx_blk777 = bitcast %union.anon* %cx_u776 to %struct.block*
  %blk_u778 = getelementptr inbounds %struct.block, %struct.block* %cx_blk777, i32 0, i32 7
  %blku_eval779 = bitcast %union.anon.1* %blk_u778 to %struct.block_eval*
  %cv = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval779, i32 0, i32 5
  store %struct.cv* null, %struct.cv** %cv, align 8
  store %struct.cv* null, %struct.cv** %tmp775
  %581 = load %struct.cv*, %struct.cv** %tmp775
  call void @Perl_save_I32(i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 13))
  store i32 0, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 13), align 4
  %582 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %582, %struct.sv*** @PL_stack_sp, align 8
  %583 = load %struct.sv*, %struct.sv** @PL_encoding, align 8
  store %struct.sv* %583, %struct.sv** %encoding, align 8
  store %struct.sv* null, %struct.sv** @PL_encoding, align 8
  %584 = load %struct.jmpenv*, %struct.jmpenv** @PL_top_env, align 8
  %je_mustcatch = getelementptr inbounds %struct.jmpenv, %struct.jmpenv* %584, i32 0, i32 3
  %585 = load i8, i8* %je_mustcatch, align 1
  %conv780 = sext i8 %585 to i32
  %cmp781 = icmp eq i32 %conv780, 1
  br i1 %cmp781, label %cond.true.783, label %cond.false.786

cond.true.783:                                    ; preds = %cond.end.761
  %586 = load i32, i32* %gimme, align 4
  %587 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_seq = getelementptr inbounds %struct.cop, %struct.cop* %587, i32 0, i32 11
  %588 = load i32, i32* %cop_seq, align 4
  %call784 = call %struct.op* @S_doeval(i32 %586, %struct.op** null, %struct.cv* null, i32 %588)
  %call785 = call %struct.op* @S_docatch(%struct.op* %call784)
  br label %cond.end.789

cond.false.786:                                   ; preds = %cond.end.761
  %589 = load i32, i32* %gimme, align 4
  %590 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_seq787 = getelementptr inbounds %struct.cop, %struct.cop* %590, i32 0, i32 11
  %591 = load i32, i32* %cop_seq787, align 4
  %call788 = call %struct.op* @S_doeval(i32 %589, %struct.op** null, %struct.cv* null, i32 %591)
  br label %cond.end.789

cond.end.789:                                     ; preds = %cond.false.786, %cond.true.783
  %cond790 = phi %struct.op* [ %call785, %cond.true.783 ], [ %call788, %cond.false.786 ]
  store %struct.op* %cond790, %struct.op** %op, align 8
  %592 = load %struct.sv*, %struct.sv** %encoding, align 8
  store %struct.sv* %592, %struct.sv** @PL_encoding, align 8
  %593 = load %struct.op*, %struct.op** %op, align 8
  store %struct.op* %593, %struct.op** %retval
  br label %return

return:                                           ; preds = %cond.end.789, %if.end.572, %if.end.570, %if.then.194, %if.then.164, %if.end.138, %if.else.136, %if.then.134, %if.end.83, %if.then.81
  %594 = load %struct.op*, %struct.op** %retval
  ret %struct.op* %594
}

declare i64 @Perl_utf8n_to_uvuni(i8*, i64, i64*, i32) #1

declare void @Perl_taint_proper(i8*, i8*) #1

; Function Attrs: nounwind uwtable
define internal signext i8 @S_path_is_absolute(i8* %name) #0 {
entry:
  %retval = alloca i8, align 1
  %name.addr = alloca i8*, align 8
  store i8* %name, i8** %name.addr, align 8
  %0 = load i8*, i8** %name.addr, align 8
  %1 = load i8, i8* %0, align 1
  %conv = sext i8 %1 to i32
  %cmp = icmp eq i32 %conv, 47
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load i8*, i8** %name.addr, align 8
  %3 = load i8, i8* %2, align 1
  %conv2 = sext i8 %3 to i32
  %cmp3 = icmp eq i32 %conv2, 46
  br i1 %cmp3, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %lor.lhs.false
  %4 = load i8*, i8** %name.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 1
  %5 = load i8, i8* %arrayidx, align 1
  %conv5 = sext i8 %5 to i32
  %cmp6 = icmp eq i32 %conv5, 47
  br i1 %cmp6, label %if.then, label %lor.lhs.false.8

lor.lhs.false.8:                                  ; preds = %land.lhs.true
  %6 = load i8*, i8** %name.addr, align 8
  %arrayidx9 = getelementptr inbounds i8, i8* %6, i64 1
  %7 = load i8, i8* %arrayidx9, align 1
  %conv10 = sext i8 %7 to i32
  %cmp11 = icmp eq i32 %conv10, 46
  br i1 %cmp11, label %land.lhs.true.13, label %if.else

land.lhs.true.13:                                 ; preds = %lor.lhs.false.8
  %8 = load i8*, i8** %name.addr, align 8
  %arrayidx14 = getelementptr inbounds i8, i8* %8, i64 2
  %9 = load i8, i8* %arrayidx14, align 1
  %conv15 = sext i8 %9 to i32
  %cmp16 = icmp eq i32 %conv15, 47
  br i1 %cmp16, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true.13, %land.lhs.true, %entry
  store i8 1, i8* %retval
  br label %return

if.else:                                          ; preds = %land.lhs.true.13, %lor.lhs.false.8, %lor.lhs.false
  store i8 0, i8* %retval
  br label %return

return:                                           ; preds = %if.else, %if.then
  %10 = load i8, i8* %retval
  ret i8 %10
}

; Function Attrs: nounwind uwtable
define internal %struct._PerlIO** @S_doopen_pm(i8* %name, i8* %mode) #0 {
entry:
  %name.addr = alloca i8*, align 8
  %mode.addr = alloca i8*, align 8
  %namelen = alloca i64, align 8
  %fp = alloca %struct._PerlIO**, align 8
  %pmcsv = alloca %struct.sv*, align 8
  %pmc = alloca i8*, align 8
  %pmstat = alloca %struct.stat, align 8
  %pmcstat = alloca %struct.stat, align 8
  store i8* %name, i8** %name.addr, align 8
  store i8* %mode, i8** %mode.addr, align 8
  %0 = load i8*, i8** %name.addr, align 8
  %call = call i64 @strlen(i8* %0)
  store i64 %call, i64* %namelen, align 8
  %1 = load i64, i64* %namelen, align 8
  %cmp = icmp ugt i64 %1, 3
  br i1 %cmp, label %land.lhs.true, label %if.else.20

land.lhs.true:                                    ; preds = %entry
  %2 = load i8*, i8** %name.addr, align 8
  %3 = load i64, i64* %namelen, align 8
  %add.ptr = getelementptr inbounds i8, i8* %2, i64 %3
  %add.ptr1 = getelementptr inbounds i8, i8* %add.ptr, i64 -3
  %call2 = call i32 @strcmp(i8* %add.ptr1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.82, i32 0, i32 0))
  %tobool = icmp ne i32 %call2, 0
  br i1 %tobool, label %if.else.20, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %4 = load i8*, i8** %name.addr, align 8
  %call3 = call %struct.sv* (i8*, ...) @Perl_newSVpvf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.83, i32 0, i32 0), i8* %4, i32 99)
  store %struct.sv* %call3, %struct.sv** %pmcsv, align 8
  %5 = load %struct.sv*, %struct.sv** %pmcsv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 2
  %6 = load i32, i32* %sv_flags, align 4
  %and = and i32 %6, 262144
  %cmp4 = icmp eq i32 %and, 262144
  br i1 %cmp4, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %7 = load %struct.sv*, %struct.sv** %pmcsv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 0
  %8 = load i8*, i8** %sv_any, align 8
  %9 = bitcast i8* %8 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %9, i32 0, i32 0
  %10 = load i8*, i8** %xpv_pv, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %11 = load %struct.sv*, %struct.sv** %pmcsv, align 8
  %call5 = call i8* @Perl_sv_2pv_nolen(%struct.sv* %11)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %10, %cond.true ], [ %call5, %cond.false ]
  store i8* %cond, i8** %pmc, align 8
  %12 = load i8*, i8** %pmc, align 8
  %call6 = call i32 @stat(i8* %12, %struct.stat* %pmcstat)
  %cmp7 = icmp slt i32 %call6, 0
  br i1 %cmp7, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %cond.end
  %13 = load i8*, i8** %name.addr, align 8
  %14 = load i8*, i8** %mode.addr, align 8
  %call9 = call %struct._PerlIO** @PerlIO_open(i8* %13, i8* %14)
  store %struct._PerlIO** %call9, %struct._PerlIO*** %fp, align 8
  br label %if.end.19

if.else:                                          ; preds = %cond.end
  %15 = load i8*, i8** %name.addr, align 8
  %call10 = call i32 @stat(i8* %15, %struct.stat* %pmstat)
  %cmp11 = icmp slt i32 %call10, 0
  br i1 %cmp11, label %if.then.15, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %st_mtim = getelementptr inbounds %struct.stat, %struct.stat* %pmstat, i32 0, i32 12
  %tv_sec = getelementptr inbounds %struct.timespec, %struct.timespec* %st_mtim, i32 0, i32 0
  %16 = load i64, i64* %tv_sec, align 8
  %st_mtim12 = getelementptr inbounds %struct.stat, %struct.stat* %pmcstat, i32 0, i32 12
  %tv_sec13 = getelementptr inbounds %struct.timespec, %struct.timespec* %st_mtim12, i32 0, i32 0
  %17 = load i64, i64* %tv_sec13, align 8
  %cmp14 = icmp slt i64 %16, %17
  br i1 %cmp14, label %if.then.15, label %if.else.17

if.then.15:                                       ; preds = %lor.lhs.false, %if.else
  %18 = load i8*, i8** %pmc, align 8
  %19 = load i8*, i8** %mode.addr, align 8
  %call16 = call %struct._PerlIO** @PerlIO_open(i8* %18, i8* %19)
  store %struct._PerlIO** %call16, %struct._PerlIO*** %fp, align 8
  br label %if.end

if.else.17:                                       ; preds = %lor.lhs.false
  %20 = load i8*, i8** %name.addr, align 8
  %21 = load i8*, i8** %mode.addr, align 8
  %call18 = call %struct._PerlIO** @PerlIO_open(i8* %20, i8* %21)
  store %struct._PerlIO** %call18, %struct._PerlIO*** %fp, align 8
  br label %if.end

if.end:                                           ; preds = %if.else.17, %if.then.15
  br label %if.end.19

if.end.19:                                        ; preds = %if.end, %if.then.8
  %22 = load %struct.sv*, %struct.sv** %pmcsv, align 8
  call void @Perl_sv_free(%struct.sv* %22)
  br label %if.end.22

if.else.20:                                       ; preds = %land.lhs.true, %entry
  %23 = load i8*, i8** %name.addr, align 8
  %24 = load i8*, i8** %mode.addr, align 8
  %call21 = call %struct._PerlIO** @PerlIO_open(i8* %23, i8* %24)
  store %struct._PerlIO** %call21, %struct._PerlIO*** %fp, align 8
  br label %if.end.22

if.end.22:                                        ; preds = %if.else.20, %if.end.19
  %25 = load %struct._PerlIO**, %struct._PerlIO*** %fp, align 8
  ret %struct._PerlIO** %25
}

declare %struct.sv** @Perl_av_fetch(%struct.av*, i32, i32) #1

declare i32 @Perl_sv_isobject(%struct.sv*) #1

declare i32 @Perl_call_method(i8*, i32) #1

declare i32 @Perl_PerlIO_close(%struct._PerlIO**) #1

declare %struct._PerlIO** @PerlIO_open(i8*, i8*) #1

declare i8* @Perl_instr(i8*, i8*) #1

declare i8* @Perl_sv_2pv_nolen(%struct.sv*) #1

declare i32* @__errno_location() #1

declare %struct.sv** @Perl_hv_store(%struct.hv*, i8*, i32, %struct.sv*, i32) #1

declare %struct.sv* @Perl_filter_add(i32 (i32, %struct.sv*, i32)*, %struct.sv*) #1

; Function Attrs: nounwind uwtable
define internal i32 @run_user_filter(i32 %idx, %struct.sv* %buf_sv, i32 %maxlen) #0 {
entry:
  %idx.addr = alloca i32, align 4
  %buf_sv.addr = alloca %struct.sv*, align 8
  %maxlen.addr = alloca i32, align 4
  %datasv = alloca %struct.sv*, align 8
  %filter_has_file = alloca i32, align 4
  %filter_child_proc = alloca %struct.gv*, align 8
  %filter_state = alloca %struct.sv*, align 8
  %filter_sub = alloca %struct.sv*, align 8
  %len = alloca i32, align 4
  %sp = alloca %struct.sv**, align 8
  %count = alloca i32, align 4
  %tmp = alloca i32, align 4
  %out = alloca %struct.sv*, align 8
  store i32 %idx, i32* %idx.addr, align 4
  store %struct.sv* %buf_sv, %struct.sv** %buf_sv.addr, align 8
  store i32 %maxlen, i32* %maxlen.addr, align 4
  %0 = load i32, i32* %idx.addr, align 4
  %idxprom = sext i32 %0 to i64
  %1 = load %struct.av*, %struct.av** @PL_rsfp_filters, align 8
  %sv_any = getelementptr inbounds %struct.av, %struct.av* %1, i32 0, i32 0
  %2 = load %struct.xpvav*, %struct.xpvav** %sv_any, align 8
  %xav_array = getelementptr inbounds %struct.xpvav, %struct.xpvav* %2, i32 0, i32 0
  %3 = load i8*, i8** %xav_array, align 8
  %4 = bitcast i8* %3 to %struct.sv**
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %4, i64 %idxprom
  %5 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %5, %struct.sv** %datasv, align 8
  %6 = load %struct.sv*, %struct.sv** %datasv, align 8
  %sv_any1 = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 0
  %7 = load i8*, i8** %sv_any1, align 8
  %8 = bitcast i8* %7 to %struct.xpvio*
  %xio_lines = getelementptr inbounds %struct.xpvio, %struct.xpvio* %8, i32 0, i32 10
  %9 = load i64, i64* %xio_lines, align 8
  %conv = trunc i64 %9 to i32
  store i32 %conv, i32* %filter_has_file, align 4
  %10 = load %struct.sv*, %struct.sv** %datasv, align 8
  %sv_any2 = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 0
  %11 = load i8*, i8** %sv_any2, align 8
  %12 = bitcast i8* %11 to %struct.xpvio*
  %xio_fmt_gv = getelementptr inbounds %struct.xpvio, %struct.xpvio* %12, i32 0, i32 17
  %13 = load %struct.gv*, %struct.gv** %xio_fmt_gv, align 8
  store %struct.gv* %13, %struct.gv** %filter_child_proc, align 8
  %14 = load %struct.sv*, %struct.sv** %datasv, align 8
  %sv_any3 = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 0
  %15 = load i8*, i8** %sv_any3, align 8
  %16 = bitcast i8* %15 to %struct.xpvio*
  %xio_top_gv = getelementptr inbounds %struct.xpvio, %struct.xpvio* %16, i32 0, i32 15
  %17 = load %struct.gv*, %struct.gv** %xio_top_gv, align 8
  %18 = bitcast %struct.gv* %17 to %struct.sv*
  store %struct.sv* %18, %struct.sv** %filter_state, align 8
  %19 = load %struct.sv*, %struct.sv** %datasv, align 8
  %sv_any4 = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 0
  %20 = load i8*, i8** %sv_any4, align 8
  %21 = bitcast i8* %20 to %struct.xpvio*
  %xio_bottom_gv = getelementptr inbounds %struct.xpvio, %struct.xpvio* %21, i32 0, i32 19
  %22 = load %struct.gv*, %struct.gv** %xio_bottom_gv, align 8
  %23 = bitcast %struct.gv* %22 to %struct.sv*
  store %struct.sv* %23, %struct.sv** %filter_sub, align 8
  store i32 0, i32* %len, align 4
  %24 = load i32, i32* %filter_has_file, align 4
  %tobool = icmp ne i32 %24, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %25 = load i32, i32* %idx.addr, align 4
  %add = add nsw i32 %25, 1
  %26 = load %struct.sv*, %struct.sv** %buf_sv.addr, align 8
  %27 = load i32, i32* %maxlen.addr, align 4
  %call = call i32 @Perl_filter_read(i32 %add, %struct.sv* %26, i32 %27)
  store i32 %call, i32* %len, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %28 = load %struct.sv*, %struct.sv** %filter_sub, align 8
  %tobool5 = icmp ne %struct.sv* %28, null
  br i1 %tobool5, label %land.lhs.true, label %if.end.54

land.lhs.true:                                    ; preds = %if.end
  %29 = load i32, i32* %len, align 4
  %cmp = icmp sge i32 %29, 0
  br i1 %cmp, label %if.then.7, label %if.end.54

if.then.7:                                        ; preds = %land.lhs.true
  %30 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %30, %struct.sv*** %sp, align 8
  call void @Perl_push_scope()
  %31 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %sv_any8 = getelementptr inbounds %struct.gv, %struct.gv* %31, i32 0, i32 0
  %32 = load %struct.xpvgv*, %struct.xpvgv** %sv_any8, align 8
  %xgv_gp = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %32, i32 0, i32 7
  %33 = load %struct.gp*, %struct.gp** %xgv_gp, align 8
  %gp_sv = getelementptr inbounds %struct.gp, %struct.gp* %33, i32 0, i32 0
  call void @Perl_save_sptr(%struct.sv** %gp_sv)
  call void @Perl_save_int(i32* @PL_tmps_floor)
  %34 = load i32, i32* @PL_tmps_ix, align 4
  store i32 %34, i32* @PL_tmps_floor, align 4
  %35 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %36 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %35 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %36 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp9 = icmp slt i64 %sub.ptr.div, 2
  br i1 %cmp9, label %if.then.11, label %if.end.13

if.then.11:                                       ; preds = %if.then.7
  %37 = load %struct.sv**, %struct.sv*** %sp, align 8
  %38 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call12 = call %struct.sv** @Perl_stack_grow(%struct.sv** %37, %struct.sv** %38, i32 2)
  store %struct.sv** %call12, %struct.sv*** %sp, align 8
  br label %if.end.13

if.end.13:                                        ; preds = %if.then.11, %if.then.7
  %39 = load %struct.sv*, %struct.sv** %buf_sv.addr, align 8
  %40 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %sv_any14 = getelementptr inbounds %struct.gv, %struct.gv* %40, i32 0, i32 0
  %41 = load %struct.xpvgv*, %struct.xpvgv** %sv_any14, align 8
  %xgv_gp15 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %41, i32 0, i32 7
  %42 = load %struct.gp*, %struct.gp** %xgv_gp15, align 8
  %gp_sv16 = getelementptr inbounds %struct.gp, %struct.gp* %42, i32 0, i32 0
  store %struct.sv* %39, %struct.sv** %gp_sv16, align 8
  %43 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %43, i32 1
  store i32* %incdec.ptr, i32** @PL_markstack_ptr, align 8
  %44 = load i32*, i32** @PL_markstack_max, align 8
  %cmp17 = icmp eq i32* %incdec.ptr, %44
  br i1 %cmp17, label %if.then.19, label %if.end.20

if.then.19:                                       ; preds = %if.end.13
  call void @Perl_markstack_grow()
  br label %if.end.20

if.end.20:                                        ; preds = %if.then.19, %if.end.13
  %45 = load %struct.sv**, %struct.sv*** %sp, align 8
  %46 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast21 = ptrtoint %struct.sv** %45 to i64
  %sub.ptr.rhs.cast22 = ptrtoint %struct.sv** %46 to i64
  %sub.ptr.sub23 = sub i64 %sub.ptr.lhs.cast21, %sub.ptr.rhs.cast22
  %sub.ptr.div24 = sdiv exact i64 %sub.ptr.sub23, 8
  %conv25 = trunc i64 %sub.ptr.div24 to i32
  %47 = load i32*, i32** @PL_markstack_ptr, align 8
  store i32 %conv25, i32* %47, align 4
  store i32 %conv25, i32* %tmp
  %48 = load i32, i32* %tmp
  %49 = load i32, i32* %maxlen.addr, align 4
  %conv26 = sext i32 %49 to i64
  %call27 = call %struct.sv* @Perl_newSViv(i64 %conv26)
  %call28 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call27)
  %50 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr29 = getelementptr inbounds %struct.sv*, %struct.sv** %50, i32 1
  store %struct.sv** %incdec.ptr29, %struct.sv*** %sp, align 8
  store %struct.sv* %call28, %struct.sv** %incdec.ptr29, align 8
  %51 = load %struct.sv*, %struct.sv** %filter_state, align 8
  %tobool30 = icmp ne %struct.sv* %51, null
  br i1 %tobool30, label %if.then.31, label %if.end.33

if.then.31:                                       ; preds = %if.end.20
  %52 = load %struct.sv*, %struct.sv** %filter_state, align 8
  %53 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr32 = getelementptr inbounds %struct.sv*, %struct.sv** %53, i32 1
  store %struct.sv** %incdec.ptr32, %struct.sv*** %sp, align 8
  store %struct.sv* %52, %struct.sv** %incdec.ptr32, align 8
  br label %if.end.33

if.end.33:                                        ; preds = %if.then.31, %if.end.20
  %54 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %54, %struct.sv*** @PL_stack_sp, align 8
  %55 = load %struct.sv*, %struct.sv** %filter_sub, align 8
  %call34 = call i32 @Perl_call_sv(%struct.sv* %55, i32 0)
  store i32 %call34, i32* %count, align 4
  %56 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %56, %struct.sv*** %sp, align 8
  %57 = load i32, i32* %count, align 4
  %cmp35 = icmp sgt i32 %57, 0
  br i1 %cmp35, label %if.then.37, label %if.end.49

if.then.37:                                       ; preds = %if.end.33
  %58 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr39 = getelementptr inbounds %struct.sv*, %struct.sv** %58, i32 -1
  store %struct.sv** %incdec.ptr39, %struct.sv*** %sp, align 8
  %59 = load %struct.sv*, %struct.sv** %58, align 8
  store %struct.sv* %59, %struct.sv** %out, align 8
  %60 = load %struct.sv*, %struct.sv** %out, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %60, i32 0, i32 2
  %61 = load i32, i32* %sv_flags, align 4
  %and = and i32 %61, 118423552
  %tobool40 = icmp ne i32 %and, 0
  br i1 %tobool40, label %if.then.41, label %if.end.48

if.then.41:                                       ; preds = %if.then.37
  %62 = load %struct.sv*, %struct.sv** %out, align 8
  %sv_flags42 = getelementptr inbounds %struct.sv, %struct.sv* %62, i32 0, i32 2
  %63 = load i32, i32* %sv_flags42, align 4
  %and43 = and i32 %63, 65536
  %tobool44 = icmp ne i32 %and43, 0
  br i1 %tobool44, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.41
  %64 = load %struct.sv*, %struct.sv** %out, align 8
  %sv_any45 = getelementptr inbounds %struct.sv, %struct.sv* %64, i32 0, i32 0
  %65 = load i8*, i8** %sv_any45, align 8
  %66 = bitcast i8* %65 to %struct.xpviv*
  %xiv_iv = getelementptr inbounds %struct.xpviv, %struct.xpviv* %66, i32 0, i32 3
  %67 = load i64, i64* %xiv_iv, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then.41
  %68 = load %struct.sv*, %struct.sv** %out, align 8
  %call46 = call i64 @Perl_sv_2iv(%struct.sv* %68)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %67, %cond.true ], [ %call46, %cond.false ]
  %conv47 = trunc i64 %cond to i32
  store i32 %conv47, i32* %len, align 4
  br label %if.end.48

if.end.48:                                        ; preds = %cond.end, %if.then.37
  br label %if.end.49

if.end.49:                                        ; preds = %if.end.48, %if.end.33
  %69 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %69, %struct.sv*** @PL_stack_sp, align 8
  %70 = load i32, i32* @PL_tmps_ix, align 4
  %71 = load i32, i32* @PL_tmps_floor, align 4
  %cmp50 = icmp sgt i32 %70, %71
  br i1 %cmp50, label %if.then.52, label %if.end.53

if.then.52:                                       ; preds = %if.end.49
  call void @Perl_free_tmps()
  br label %if.end.53

if.end.53:                                        ; preds = %if.then.52, %if.end.49
  call void @Perl_pop_scope()
  br label %if.end.54

if.end.54:                                        ; preds = %if.end.53, %land.lhs.true, %if.end
  %72 = load i32, i32* %len, align 4
  %cmp55 = icmp sle i32 %72, 0
  br i1 %cmp55, label %if.then.57, label %if.end.75

if.then.57:                                       ; preds = %if.end.54
  %73 = load %struct.sv*, %struct.sv** %datasv, align 8
  %sv_any58 = getelementptr inbounds %struct.sv, %struct.sv* %73, i32 0, i32 0
  %74 = load i8*, i8** %sv_any58, align 8
  %75 = bitcast i8* %74 to %struct.xpvio*
  %xio_lines59 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %75, i32 0, i32 10
  store i64 0, i64* %xio_lines59, align 8
  %76 = load %struct.gv*, %struct.gv** %filter_child_proc, align 8
  %tobool60 = icmp ne %struct.gv* %76, null
  br i1 %tobool60, label %if.then.61, label %if.end.64

if.then.61:                                       ; preds = %if.then.57
  %77 = load %struct.gv*, %struct.gv** %filter_child_proc, align 8
  %78 = bitcast %struct.gv* %77 to %struct.sv*
  call void @Perl_sv_free(%struct.sv* %78)
  %79 = load %struct.sv*, %struct.sv** %datasv, align 8
  %sv_any62 = getelementptr inbounds %struct.sv, %struct.sv* %79, i32 0, i32 0
  %80 = load i8*, i8** %sv_any62, align 8
  %81 = bitcast i8* %80 to %struct.xpvio*
  %xio_fmt_gv63 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %81, i32 0, i32 17
  store %struct.gv* null, %struct.gv** %xio_fmt_gv63, align 8
  br label %if.end.64

if.end.64:                                        ; preds = %if.then.61, %if.then.57
  %82 = load %struct.sv*, %struct.sv** %filter_state, align 8
  %tobool65 = icmp ne %struct.sv* %82, null
  br i1 %tobool65, label %if.then.66, label %if.end.69

if.then.66:                                       ; preds = %if.end.64
  %83 = load %struct.sv*, %struct.sv** %filter_state, align 8
  call void @Perl_sv_free(%struct.sv* %83)
  %84 = load %struct.sv*, %struct.sv** %datasv, align 8
  %sv_any67 = getelementptr inbounds %struct.sv, %struct.sv* %84, i32 0, i32 0
  %85 = load i8*, i8** %sv_any67, align 8
  %86 = bitcast i8* %85 to %struct.xpvio*
  %xio_top_gv68 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %86, i32 0, i32 15
  store %struct.gv* null, %struct.gv** %xio_top_gv68, align 8
  br label %if.end.69

if.end.69:                                        ; preds = %if.then.66, %if.end.64
  %87 = load %struct.sv*, %struct.sv** %filter_sub, align 8
  %tobool70 = icmp ne %struct.sv* %87, null
  br i1 %tobool70, label %if.then.71, label %if.end.74

if.then.71:                                       ; preds = %if.end.69
  %88 = load %struct.sv*, %struct.sv** %filter_sub, align 8
  call void @Perl_sv_free(%struct.sv* %88)
  %89 = load %struct.sv*, %struct.sv** %datasv, align 8
  %sv_any72 = getelementptr inbounds %struct.sv, %struct.sv* %89, i32 0, i32 0
  %90 = load i8*, i8** %sv_any72, align 8
  %91 = bitcast i8* %90 to %struct.xpvio*
  %xio_bottom_gv73 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %91, i32 0, i32 19
  store %struct.gv* null, %struct.gv** %xio_bottom_gv73, align 8
  br label %if.end.74

if.end.74:                                        ; preds = %if.then.71, %if.end.69
  call void @Perl_filter_del(i32 (i32, %struct.sv*, i32)* @run_user_filter)
  br label %if.end.75

if.end.75:                                        ; preds = %if.end.74, %if.end.54
  %92 = load i32, i32* %len, align 4
  ret i32 %92
}

; Function Attrs: nounwind uwtable
define internal %struct.op* @S_docatch(%struct.op* %o) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  %ret = alloca i32, align 4
  %oldop = alloca %struct.op*, align 8
  %retop = alloca %struct.op*, align 8
  %cursi = alloca %struct.stackinfo*, align 8
  %cur_env = alloca %struct.jmpenv, align 8
  %tmp = alloca i32, align 4
  %tmp8 = alloca %struct.jmpenv*, align 8
  %tmp21 = alloca %struct.jmpenv*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** @PL_op, align 8
  store %struct.op* %0, %struct.op** %oldop, align 8
  %1 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  store %struct.stackinfo* %1, %struct.stackinfo** %cursi, align 8
  %2 = load %struct.op*, %struct.op** %o.addr, align 8
  store %struct.op* %2, %struct.op** @PL_op, align 8
  %call = call %struct.op* @Perl_pop_return()
  store %struct.op* %call, %struct.op** %retop, align 8
  call void @Perl_push_return(%struct.op* null)
  %3 = load %struct.jmpenv*, %struct.jmpenv** @PL_top_env, align 8
  %je_prev = getelementptr inbounds %struct.jmpenv, %struct.jmpenv* %cur_env, i32 0, i32 1
  store %struct.jmpenv* %3, %struct.jmpenv** %je_prev, align 8
  %je_buf = getelementptr inbounds %struct.jmpenv, %struct.jmpenv* %cur_env, i32 0, i32 0
  %arraydecay = getelementptr inbounds [1 x %struct.__jmp_buf_tag], [1 x %struct.__jmp_buf_tag]* %je_buf, i32 0, i32 0
  %call1 = call i32 @__sigsetjmp(%struct.__jmp_buf_tag* %arraydecay, i32 0) #5
  %je_ret = getelementptr inbounds %struct.jmpenv, %struct.jmpenv* %cur_env, i32 0, i32 2
  store i32 %call1, i32* %je_ret, align 4
  store %struct.jmpenv* %cur_env, %struct.jmpenv** @PL_top_env, align 8
  %je_mustcatch = getelementptr inbounds %struct.jmpenv, %struct.jmpenv* %cur_env, i32 0, i32 3
  store i8 0, i8* %je_mustcatch, align 1
  %je_ret2 = getelementptr inbounds %struct.jmpenv, %struct.jmpenv* %cur_env, i32 0, i32 2
  %4 = load i32, i32* %je_ret2, align 4
  store i32 %4, i32* %ret, align 4
  store i32 %4, i32* %tmp
  %5 = load i32, i32* %tmp
  %6 = load i32, i32* %ret, align 4
  switch i32 %6, label %sw.default [
    i32 0, label %sw.bb
    i32 3, label %sw.bb.4
  ]

sw.bb:                                            ; preds = %entry
  br label %redo_body

redo_body:                                        ; preds = %if.then, %sw.bb
  %call3 = call i8* @S_docatch_body()
  br label %sw.epilog

sw.bb.4:                                          ; preds = %entry
  %7 = load %struct.op*, %struct.op** @PL_restartop, align 8
  %tobool = icmp ne %struct.op* %7, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %sw.bb.4
  %8 = load %struct.stackinfo*, %struct.stackinfo** %cursi, align 8
  %9 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %cmp = icmp eq %struct.stackinfo* %8, %9
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %10 = load %struct.op*, %struct.op** @PL_restartop, align 8
  store %struct.op* %10, %struct.op** @PL_op, align 8
  store %struct.op* null, %struct.op** @PL_restartop, align 8
  br label %redo_body

if.end:                                           ; preds = %land.lhs.true, %sw.bb.4
  %11 = load %struct.op*, %struct.op** @PL_restartop, align 8
  %tobool5 = icmp ne %struct.op* %11, null
  br i1 %tobool5, label %if.end.7, label %if.then.6

if.then.6:                                        ; preds = %if.end
  br label %sw.epilog

if.end.7:                                         ; preds = %if.end
  br label %sw.default

sw.default:                                       ; preds = %entry, %if.end.7
  %je_prev9 = getelementptr inbounds %struct.jmpenv, %struct.jmpenv* %cur_env, i32 0, i32 1
  %12 = load %struct.jmpenv*, %struct.jmpenv** %je_prev9, align 8
  store %struct.jmpenv* %12, %struct.jmpenv** @PL_top_env, align 8
  store %struct.jmpenv* %12, %struct.jmpenv** %tmp8
  %13 = load %struct.jmpenv*, %struct.jmpenv** %tmp8
  %14 = load %struct.op*, %struct.op** %oldop, align 8
  store %struct.op* %14, %struct.op** @PL_op, align 8
  %15 = load %struct.jmpenv*, %struct.jmpenv** @PL_top_env, align 8
  %je_prev10 = getelementptr inbounds %struct.jmpenv, %struct.jmpenv* %15, i32 0, i32 1
  %16 = load %struct.jmpenv*, %struct.jmpenv** %je_prev10, align 8
  %tobool11 = icmp ne %struct.jmpenv* %16, null
  br i1 %tobool11, label %if.then.12, label %if.end.15

if.then.12:                                       ; preds = %sw.default
  %17 = load %struct.jmpenv*, %struct.jmpenv** @PL_top_env, align 8
  %je_buf13 = getelementptr inbounds %struct.jmpenv, %struct.jmpenv* %17, i32 0, i32 0
  %arraydecay14 = getelementptr inbounds [1 x %struct.__jmp_buf_tag], [1 x %struct.__jmp_buf_tag]* %je_buf13, i32 0, i32 0
  %18 = load i32, i32* %ret, align 4
  call void @siglongjmp(%struct.__jmp_buf_tag* %arraydecay14, i32 %18) #6
  unreachable

if.end.15:                                        ; preds = %sw.default
  %19 = load i32, i32* %ret, align 4
  %cmp16 = icmp eq i32 %19, 2
  br i1 %cmp16, label %if.then.17, label %if.end.18

if.then.17:                                       ; preds = %if.end.15
  %20 = load i32, i32* @PL_statusvalue, align 4
  call void @exit(i32 %20) #6
  unreachable

if.end.18:                                        ; preds = %if.end.15
  %call19 = call %struct._PerlIO** @Perl_PerlIO_stderr()
  %call20 = call i32 (%struct._PerlIO**, i8*, ...) @PerlIO_printf(%struct._PerlIO** %call19, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.84, i32 0, i32 0))
  call void @exit(i32 1) #6
  unreachable

sw.epilog:                                        ; preds = %if.then.6, %redo_body
  %je_prev22 = getelementptr inbounds %struct.jmpenv, %struct.jmpenv* %cur_env, i32 0, i32 1
  %21 = load %struct.jmpenv*, %struct.jmpenv** %je_prev22, align 8
  store %struct.jmpenv* %21, %struct.jmpenv** @PL_top_env, align 8
  store %struct.jmpenv* %21, %struct.jmpenv** %tmp21
  %22 = load %struct.jmpenv*, %struct.jmpenv** %tmp21
  %23 = load %struct.op*, %struct.op** %oldop, align 8
  store %struct.op* %23, %struct.op** @PL_op, align 8
  %24 = load %struct.op*, %struct.op** %retop, align 8
  ret %struct.op* %24
}

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_dofile() #0 {
entry:
  %call = call %struct.op* @Perl_pp_require()
  ret %struct.op* %call
}

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_entereval() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %cx = alloca %struct.context*, align 8
  %sv = alloca %struct.sv*, align 8
  %gimme = alloca i32, align 4
  %was = alloca i32, align 4
  %tbuf = alloca [32 x i8], align 16
  %tmpbuf = alloca i8*, align 8
  %safestr = alloca i8*, align 8
  %len = alloca i64, align 8
  %ret = alloca %struct.op*, align 8
  %runcv = alloca %struct.cv*, align 8
  %seq = alloca i32, align 4
  %sv38 = alloca %struct.sv*, align 8
  %tmp = alloca i32, align 4
  %tmp180 = alloca %struct.cv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %2 = load %struct.sv*, %struct.sv** %1, align 8
  store %struct.sv* %2, %struct.sv** %sv, align 8
  %3 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %3, i32 0, i32 6
  %4 = load i8, i8* %op_flags, align 1
  %conv = zext i8 %4 to i32
  %and = and i32 %conv, 3
  %cmp = icmp eq i32 %and, 1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end.18

cond.false:                                       ; preds = %entry
  %5 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags2 = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 6
  %6 = load i8, i8* %op_flags2, align 1
  %conv3 = zext i8 %6 to i32
  %and4 = and i32 %conv3, 3
  %cmp5 = icmp eq i32 %and4, 2
  br i1 %cmp5, label %cond.true.7, label %cond.false.8

cond.true.7:                                      ; preds = %cond.false
  br label %cond.end.16

cond.false.8:                                     ; preds = %cond.false
  %7 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags9 = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 6
  %8 = load i8, i8* %op_flags9, align 1
  %conv10 = zext i8 %8 to i32
  %and11 = and i32 %conv10, 3
  %cmp12 = icmp eq i32 %and11, 3
  br i1 %cmp12, label %cond.true.14, label %cond.false.15

cond.true.14:                                     ; preds = %cond.false.8
  br label %cond.end

cond.false.15:                                    ; preds = %cond.false.8
  %call = call i32 @Perl_block_gimme()
  br label %cond.end

cond.end:                                         ; preds = %cond.false.15, %cond.true.14
  %cond = phi i32 [ 1, %cond.true.14 ], [ %call, %cond.false.15 ]
  br label %cond.end.16

cond.end.16:                                      ; preds = %cond.end, %cond.true.7
  %cond17 = phi i32 [ 0, %cond.true.7 ], [ %cond, %cond.end ]
  br label %cond.end.18

cond.end.18:                                      ; preds = %cond.end.16, %cond.true
  %cond19 = phi i32 [ 128, %cond.true ], [ %cond17, %cond.end.16 ]
  store i32 %cond19, i32* %gimme, align 4
  %9 = load i32, i32* @PL_sub_generation, align 4
  store i32 %9, i32* %was, align 4
  %arraydecay = getelementptr inbounds [32 x i8], [32 x i8]* %tbuf, i32 0, i32 0
  store i8* %arraydecay, i8** %tmpbuf, align 8
  %10 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags, align 4
  %and20 = and i32 %11, 262144
  %cmp21 = icmp eq i32 %and20, 262144
  br i1 %cmp21, label %cond.true.23, label %cond.false.25

cond.true.23:                                     ; preds = %cond.end.18
  %12 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 0
  %13 = load i8*, i8** %sv_any, align 8
  %14 = bitcast i8* %13 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %14, i32 0, i32 1
  %15 = load i64, i64* %xpv_cur, align 8
  store i64 %15, i64* %len, align 8
  %16 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any24 = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 0
  %17 = load i8*, i8** %sv_any24, align 8
  %18 = bitcast i8* %17 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %18, i32 0, i32 0
  %19 = load i8*, i8** %xpv_pv, align 8
  %tobool = icmp ne i8* %19, null
  br i1 %tobool, label %if.end, label %if.then

cond.false.25:                                    ; preds = %cond.end.18
  %20 = load %struct.sv*, %struct.sv** %sv, align 8
  %call26 = call i8* @Perl_sv_2pv_flags(%struct.sv* %20, i64* %len, i32 2)
  %tobool27 = icmp ne i8* %call26, null
  br i1 %tobool27, label %if.end, label %if.then

if.then:                                          ; preds = %cond.false.25, %cond.true.23
  %21 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr28 = getelementptr inbounds %struct.sv*, %struct.sv** %21, i32 1
  store %struct.sv** %incdec.ptr28, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %incdec.ptr28, align 8
  %22 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %22, %struct.sv*** @PL_stack_sp, align 8
  %23 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %23, i32 0, i32 0
  %24 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %24, %struct.op** %retval
  br label %return

if.end:                                           ; preds = %cond.false.25, %cond.true.23
  %25 = load i8, i8* @PL_tainting, align 1
  %tobool29 = icmp ne i8 %25, 0
  br i1 %tobool29, label %if.then.30, label %if.end.31

if.then.30:                                       ; preds = %if.end
  call void @Perl_taint_proper(i8* null, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.68, i32 0, i32 0))
  br label %if.end.31

if.end.31:                                        ; preds = %if.then.30, %if.end
  call void @Perl_push_scope()
  %26 = load %struct.sv*, %struct.sv** %sv, align 8
  call void @Perl_lex_start(%struct.sv* %26)
  call void @Perl_save_int(i32* @PL_tmps_floor)
  %27 = load i32, i32* @PL_tmps_ix, align 4
  store i32 %27, i32* @PL_tmps_floor, align 4
  %28 = load i32, i32* @PL_perldb, align 4
  %tobool32 = icmp ne i32 %28, 0
  br i1 %tobool32, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.end.31
  %29 = load i32, i32* @PL_perldb, align 4
  %and33 = and i32 %29, 256
  %tobool34 = icmp ne i32 %and33, 0
  br i1 %tobool34, label %land.lhs.true.35, label %if.else

land.lhs.true.35:                                 ; preds = %land.lhs.true
  %30 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_line = getelementptr inbounds %struct.cop, %struct.cop* %30, i32 0, i32 13
  %31 = load i32, i32* %cop_line, align 4
  %tobool36 = icmp ne i32 %31, 0
  br i1 %tobool36, label %if.then.37, label %if.else

if.then.37:                                       ; preds = %land.lhs.true.35
  %call39 = call %struct.sv* @Perl_sv_newmortal()
  store %struct.sv* %call39, %struct.sv** %sv38, align 8
  %32 = load %struct.sv*, %struct.sv** %sv38, align 8
  %33 = load i32, i32* @PL_evalseq, align 4
  %inc = add i32 %33, 1
  store i32 %inc, i32* @PL_evalseq, align 4
  %conv40 = zext i32 %inc to i64
  %34 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_filegv = getelementptr inbounds %struct.cop, %struct.cop* %34, i32 0, i32 10
  %35 = load %struct.gv*, %struct.gv** %cop_filegv, align 8
  %tobool41 = icmp ne %struct.gv* %35, null
  br i1 %tobool41, label %cond.true.42, label %cond.false.46

cond.true.42:                                     ; preds = %if.then.37
  %36 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_filegv43 = getelementptr inbounds %struct.cop, %struct.cop* %36, i32 0, i32 10
  %37 = load %struct.gv*, %struct.gv** %cop_filegv43, align 8
  %sv_any44 = getelementptr inbounds %struct.gv, %struct.gv* %37, i32 0, i32 0
  %38 = load %struct.xpvgv*, %struct.xpvgv** %sv_any44, align 8
  %xgv_gp = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %38, i32 0, i32 7
  %39 = load %struct.gp*, %struct.gp** %xgv_gp, align 8
  %gp_sv = getelementptr inbounds %struct.gp, %struct.gp* %39, i32 0, i32 0
  %40 = load %struct.sv*, %struct.sv** %gp_sv, align 8
  %tobool45 = icmp ne %struct.sv* %40, null
  br i1 %tobool45, label %cond.true.47, label %cond.false.60

cond.false.46:                                    ; preds = %if.then.37
  br i1 false, label %cond.true.47, label %cond.false.60

cond.true.47:                                     ; preds = %cond.false.46, %cond.true.42
  %41 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_filegv48 = getelementptr inbounds %struct.cop, %struct.cop* %41, i32 0, i32 10
  %42 = load %struct.gv*, %struct.gv** %cop_filegv48, align 8
  %tobool49 = icmp ne %struct.gv* %42, null
  br i1 %tobool49, label %cond.true.50, label %cond.false.55

cond.true.50:                                     ; preds = %cond.true.47
  %43 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_filegv51 = getelementptr inbounds %struct.cop, %struct.cop* %43, i32 0, i32 10
  %44 = load %struct.gv*, %struct.gv** %cop_filegv51, align 8
  %sv_any52 = getelementptr inbounds %struct.gv, %struct.gv* %44, i32 0, i32 0
  %45 = load %struct.xpvgv*, %struct.xpvgv** %sv_any52, align 8
  %xgv_gp53 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %45, i32 0, i32 7
  %46 = load %struct.gp*, %struct.gp** %xgv_gp53, align 8
  %gp_sv54 = getelementptr inbounds %struct.gp, %struct.gp* %46, i32 0, i32 0
  %47 = load %struct.sv*, %struct.sv** %gp_sv54, align 8
  br label %cond.end.56

cond.false.55:                                    ; preds = %cond.true.47
  br label %cond.end.56

cond.end.56:                                      ; preds = %cond.false.55, %cond.true.50
  %cond57 = phi %struct.sv* [ %47, %cond.true.50 ], [ null, %cond.false.55 ]
  %sv_any58 = getelementptr inbounds %struct.sv, %struct.sv* %cond57, i32 0, i32 0
  %48 = load i8*, i8** %sv_any58, align 8
  %49 = bitcast i8* %48 to %struct.xpv*
  %xpv_pv59 = getelementptr inbounds %struct.xpv, %struct.xpv* %49, i32 0, i32 0
  %50 = load i8*, i8** %xpv_pv59, align 8
  br label %cond.end.61

cond.false.60:                                    ; preds = %cond.false.46, %cond.true.42
  br label %cond.end.61

cond.end.61:                                      ; preds = %cond.false.60, %cond.end.56
  %cond62 = phi i8* [ %50, %cond.end.56 ], [ null, %cond.false.60 ]
  %51 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_line63 = getelementptr inbounds %struct.cop, %struct.cop* %51, i32 0, i32 13
  %52 = load i32, i32* %cop_line63, align 4
  %conv64 = zext i32 %52 to i64
  call void (%struct.sv*, i8*, ...) @Perl_sv_setpvf(%struct.sv* %32, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.69, i32 0, i32 0), i64 %conv40, i8* %cond62, i64 %conv64)
  %53 = load %struct.sv*, %struct.sv** %sv38, align 8
  %sv_any65 = getelementptr inbounds %struct.sv, %struct.sv* %53, i32 0, i32 0
  %54 = load i8*, i8** %sv_any65, align 8
  %55 = bitcast i8* %54 to %struct.xpv*
  %xpv_pv66 = getelementptr inbounds %struct.xpv, %struct.xpv* %55, i32 0, i32 0
  %56 = load i8*, i8** %xpv_pv66, align 8
  store i8* %56, i8** %tmpbuf, align 8
  br label %if.end.70

if.else:                                          ; preds = %land.lhs.true.35, %land.lhs.true, %if.end.31
  %57 = load i8*, i8** %tmpbuf, align 8
  %58 = load i32, i32* @PL_evalseq, align 4
  %inc67 = add i32 %58, 1
  store i32 %inc67, i32* @PL_evalseq, align 4
  %conv68 = zext i32 %inc67 to i64
  %call69 = call i32 (i8*, i8*, ...) @sprintf(i8* %57, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.70, i32 0, i32 0), i64 %conv68)
  br label %if.end.70

if.end.70:                                        ; preds = %if.else, %cond.end.61
  call void @Perl_save_generic_svref(%struct.sv** bitcast (%struct.gv** getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10) to %struct.sv**))
  %59 = load i8*, i8** %tmpbuf, align 8
  %add.ptr = getelementptr inbounds i8, i8* %59, i64 2
  %call71 = call %struct.gv* @Perl_gv_fetchfile(i8* %add.ptr)
  %60 = bitcast %struct.gv* %call71 to %struct.sv*
  store %struct.sv* %60, %struct.sv** @PL_Sv, align 8
  %61 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %tobool72 = icmp ne %struct.sv* %61, null
  br i1 %tobool72, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.end.70
  %62 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %62, i32 0, i32 1
  %63 = load i32, i32* %sv_refcnt, align 4
  %inc73 = add i32 %63, 1
  store i32 %inc73, i32* %sv_refcnt, align 4
  %tobool74 = icmp ne i32 %inc73, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end.70
  %64 = phi i1 [ false, %if.end.70 ], [ %tobool74, %land.rhs ]
  %land.ext = zext i1 %64 to i32
  %65 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %66 = bitcast %struct.sv* %65 to %struct.gv*
  store %struct.gv* %66, %struct.gv** getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  call void @Perl_save_I32(i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 13))
  store i32 1, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 13), align 4
  %67 = load i8*, i8** %tmpbuf, align 8
  %call75 = call i8* @Perl_savepv(i8* %67)
  store i8* %call75, i8** %safestr, align 8
  %68 = load %struct.hv*, %struct.hv** @PL_defstash, align 8
  %69 = load i8*, i8** %safestr, align 8
  %70 = load i8*, i8** %safestr, align 8
  %call76 = call i64 @strlen(i8* %70)
  %conv77 = trunc i64 %call76 to i32
  call void @Perl_save_delete(%struct.hv* %68, i8* %69, i32 %conv77)
  %71 = load i32, i32* @PL_savestack_ix, align 4
  %add = add nsw i32 %71, 3
  %72 = load i32, i32* @PL_savestack_max, align 4
  %cmp78 = icmp sgt i32 %add, %72
  br i1 %cmp78, label %if.then.80, label %if.end.81

if.then.80:                                       ; preds = %land.end
  call void @Perl_savestack_grow()
  br label %if.end.81

if.end.81:                                        ; preds = %if.then.80, %land.end
  %73 = load i32, i32* @PL_hints, align 4
  %and82 = and i32 %73, 131072
  %tobool83 = icmp ne i32 %and82, 0
  br i1 %tobool83, label %if.then.84, label %if.end.95

if.then.84:                                       ; preds = %if.end.81
  %74 = load %struct.gv*, %struct.gv** @PL_hintgv, align 8
  %sv_any85 = getelementptr inbounds %struct.gv, %struct.gv* %74, i32 0, i32 0
  %75 = load %struct.xpvgv*, %struct.xpvgv** %sv_any85, align 8
  %xgv_gp86 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %75, i32 0, i32 7
  %76 = load %struct.gp*, %struct.gp** %xgv_gp86, align 8
  %gp_hv = getelementptr inbounds %struct.gp, %struct.gp* %76, i32 0, i32 5
  %77 = load %struct.hv*, %struct.hv** %gp_hv, align 8
  %78 = bitcast %struct.hv* %77 to i8*
  %79 = load i32, i32* @PL_savestack_ix, align 4
  %inc87 = add nsw i32 %79, 1
  store i32 %inc87, i32* @PL_savestack_ix, align 4
  %idxprom = sext i32 %79 to i64
  %80 = load %union.any*, %union.any** @PL_savestack, align 8
  %arrayidx = getelementptr inbounds %union.any, %union.any* %80, i64 %idxprom
  %any_ptr = bitcast %union.any* %arrayidx to i8**
  store i8* %78, i8** %any_ptr, align 8
  %81 = load %struct.gv*, %struct.gv** @PL_hintgv, align 8
  %sv_any88 = getelementptr inbounds %struct.gv, %struct.gv* %81, i32 0, i32 0
  %82 = load %struct.xpvgv*, %struct.xpvgv** %sv_any88, align 8
  %xgv_gp89 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %82, i32 0, i32 7
  %83 = load %struct.gp*, %struct.gp** %xgv_gp89, align 8
  %gp_hv90 = getelementptr inbounds %struct.gp, %struct.gp* %83, i32 0, i32 5
  %84 = load %struct.hv*, %struct.hv** %gp_hv90, align 8
  %call91 = call %struct.hv* @Perl_newHVhv(%struct.hv* %84)
  %85 = load %struct.gv*, %struct.gv** @PL_hintgv, align 8
  %sv_any92 = getelementptr inbounds %struct.gv, %struct.gv* %85, i32 0, i32 0
  %86 = load %struct.xpvgv*, %struct.xpvgv** %sv_any92, align 8
  %xgv_gp93 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %86, i32 0, i32 7
  %87 = load %struct.gp*, %struct.gp** %xgv_gp93, align 8
  %gp_hv94 = getelementptr inbounds %struct.gp, %struct.gp* %87, i32 0, i32 5
  store %struct.hv* %call91, %struct.hv** %gp_hv94, align 8
  br label %if.end.95

if.end.95:                                        ; preds = %if.then.84, %if.end.81
  %88 = load i32, i32* @PL_hints, align 4
  %89 = load i32, i32* @PL_savestack_ix, align 4
  %inc96 = add nsw i32 %89, 1
  store i32 %inc96, i32* @PL_savestack_ix, align 4
  %idxprom97 = sext i32 %89 to i64
  %90 = load %union.any*, %union.any** @PL_savestack, align 8
  %arrayidx98 = getelementptr inbounds %union.any, %union.any* %90, i64 %idxprom97
  %any_i32 = bitcast %union.any* %arrayidx98 to i32*
  store i32 %88, i32* %any_i32, align 4
  %91 = load i32, i32* @PL_savestack_ix, align 4
  %inc99 = add nsw i32 %91, 1
  store i32 %inc99, i32* @PL_savestack_ix, align 4
  %idxprom100 = sext i32 %91 to i64
  %92 = load %union.any*, %union.any** @PL_savestack, align 8
  %arrayidx101 = getelementptr inbounds %union.any, %union.any* %92, i64 %idxprom100
  %any_i32102 = bitcast %union.any* %arrayidx101 to i32*
  store i32 27, i32* %any_i32102, align 4
  store i32 27, i32* %tmp
  %93 = load i32, i32* %tmp
  %94 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %94, i32 0, i32 3
  %95 = load i64, i64* %op_targ, align 8
  %conv103 = trunc i64 %95 to i32
  store i32 %conv103, i32* @PL_hints, align 4
  call void @Perl_save_sptr(%struct.sv** getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 14))
  %96 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings = getelementptr inbounds %struct.cop, %struct.cop* %96, i32 0, i32 14
  %97 = load %struct.sv*, %struct.sv** %cop_warnings, align 8
  %cmp104 = icmp eq %struct.sv* %97, null
  br i1 %cmp104, label %if.then.113, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.95
  %98 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings106 = getelementptr inbounds %struct.cop, %struct.cop* %98, i32 0, i32 14
  %99 = load %struct.sv*, %struct.sv** %cop_warnings106, align 8
  %cmp107 = icmp eq %struct.sv* %99, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 1)
  br i1 %cmp107, label %if.then.113, label %lor.lhs.false.109

lor.lhs.false.109:                                ; preds = %lor.lhs.false
  %100 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings110 = getelementptr inbounds %struct.cop, %struct.cop* %100, i32 0, i32 14
  %101 = load %struct.sv*, %struct.sv** %cop_warnings110, align 8
  %cmp111 = icmp eq %struct.sv* %101, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 2)
  br i1 %cmp111, label %if.then.113, label %if.else.115

if.then.113:                                      ; preds = %lor.lhs.false.109, %lor.lhs.false, %if.end.95
  %102 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings114 = getelementptr inbounds %struct.cop, %struct.cop* %102, i32 0, i32 14
  %103 = load %struct.sv*, %struct.sv** %cop_warnings114, align 8
  store %struct.sv* %103, %struct.sv** getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 14), align 8
  br label %if.end.118

if.else.115:                                      ; preds = %lor.lhs.false.109
  %104 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings116 = getelementptr inbounds %struct.cop, %struct.cop* %104, i32 0, i32 14
  %105 = load %struct.sv*, %struct.sv** %cop_warnings116, align 8
  %call117 = call %struct.sv* @Perl_newSVsv(%struct.sv* %105)
  store %struct.sv* %call117, %struct.sv** getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 14), align 8
  %106 = load %struct.sv*, %struct.sv** getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 14), align 8
  call void @Perl_save_freesv(%struct.sv* %106)
  br label %if.end.118

if.end.118:                                       ; preds = %if.else.115, %if.then.113
  call void @Perl_save_sptr(%struct.sv** getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 15))
  %107 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_io = getelementptr inbounds %struct.cop, %struct.cop* %107, i32 0, i32 15
  %108 = load %struct.sv*, %struct.sv** %cop_io, align 8
  %cmp119 = icmp eq %struct.sv* %108, null
  br i1 %cmp119, label %if.then.121, label %if.else.123

if.then.121:                                      ; preds = %if.end.118
  %109 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_io122 = getelementptr inbounds %struct.cop, %struct.cop* %109, i32 0, i32 15
  %110 = load %struct.sv*, %struct.sv** %cop_io122, align 8
  store %struct.sv* %110, %struct.sv** getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 15), align 8
  br label %if.end.126

if.else.123:                                      ; preds = %if.end.118
  %111 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_io124 = getelementptr inbounds %struct.cop, %struct.cop* %111, i32 0, i32 15
  %112 = load %struct.sv*, %struct.sv** %cop_io124, align 8
  %call125 = call %struct.sv* @Perl_newSVsv(%struct.sv* %112)
  store %struct.sv* %call125, %struct.sv** getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 15), align 8
  %113 = load %struct.sv*, %struct.sv** getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 15), align 8
  call void @Perl_save_freesv(%struct.sv* %113)
  br label %if.end.126

if.end.126:                                       ; preds = %if.else.123, %if.then.121
  %call127 = call %struct.cv* @Perl_find_runcv(i32* %seq)
  store %struct.cv* %call127, %struct.cv** %runcv, align 8
  %114 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next128 = getelementptr inbounds %struct.op, %struct.op* %114, i32 0, i32 0
  %115 = load %struct.op*, %struct.op** %op_next128, align 8
  call void @Perl_push_return(%struct.op* %115)
  %116 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %116, i32 0, i32 2
  %117 = load i32, i32* %si_cxix, align 4
  %118 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxmax = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %118, i32 0, i32 3
  %119 = load i32, i32* %si_cxmax, align 4
  %cmp129 = icmp slt i32 %117, %119
  br i1 %cmp129, label %cond.true.131, label %cond.false.134

cond.true.131:                                    ; preds = %if.end.126
  %120 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix132 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %120, i32 0, i32 2
  %121 = load i32, i32* %si_cxix132, align 4
  %inc133 = add nsw i32 %121, 1
  store i32 %inc133, i32* %si_cxix132, align 4
  br label %cond.end.137

cond.false.134:                                   ; preds = %if.end.126
  %call135 = call i32 @Perl_cxinc()
  %122 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix136 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %122, i32 0, i32 2
  store i32 %call135, i32* %si_cxix136, align 4
  br label %cond.end.137

cond.end.137:                                     ; preds = %cond.false.134, %cond.true.131
  %cond138 = phi i32 [ %inc133, %cond.true.131 ], [ %call135, %cond.false.134 ]
  %123 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix139 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %123, i32 0, i32 2
  %124 = load i32, i32* %si_cxix139, align 4
  %idxprom140 = sext i32 %124 to i64
  %125 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxstack = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %125, i32 0, i32 1
  %126 = load %struct.context*, %struct.context** %si_cxstack, align 8
  %arrayidx141 = getelementptr inbounds %struct.context, %struct.context* %126, i64 %idxprom140
  store %struct.context* %arrayidx141, %struct.context** %cx, align 8
  %127 = load %struct.context*, %struct.context** %cx, align 8
  %cx_type = getelementptr inbounds %struct.context, %struct.context* %127, i32 0, i32 0
  store i32 258, i32* %cx_type, align 4
  %128 = load %struct.sv**, %struct.sv*** %sp, align 8
  %129 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %128 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %129 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %conv142 = trunc i64 %sub.ptr.div to i32
  %130 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u = getelementptr inbounds %struct.context, %struct.context* %130, i32 0, i32 1
  %cx_blk = bitcast %union.anon* %cx_u to %struct.block*
  %blku_oldsp = getelementptr inbounds %struct.block, %struct.block* %cx_blk, i32 0, i32 0
  store i32 %conv142, i32* %blku_oldsp, align 4
  %131 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %132 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u143 = getelementptr inbounds %struct.context, %struct.context* %132, i32 0, i32 1
  %cx_blk144 = bitcast %union.anon* %cx_u143 to %struct.block*
  %blku_oldcop = getelementptr inbounds %struct.block, %struct.block* %cx_blk144, i32 0, i32 1
  store %struct.cop* %131, %struct.cop** %blku_oldcop, align 8
  %133 = load i32*, i32** @PL_markstack_ptr, align 8
  %134 = load i32*, i32** @PL_markstack, align 8
  %sub.ptr.lhs.cast145 = ptrtoint i32* %133 to i64
  %sub.ptr.rhs.cast146 = ptrtoint i32* %134 to i64
  %sub.ptr.sub147 = sub i64 %sub.ptr.lhs.cast145, %sub.ptr.rhs.cast146
  %sub.ptr.div148 = sdiv exact i64 %sub.ptr.sub147, 4
  %conv149 = trunc i64 %sub.ptr.div148 to i32
  %135 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u150 = getelementptr inbounds %struct.context, %struct.context* %135, i32 0, i32 1
  %cx_blk151 = bitcast %union.anon* %cx_u150 to %struct.block*
  %blku_oldmarksp = getelementptr inbounds %struct.block, %struct.block* %cx_blk151, i32 0, i32 3
  store i32 %conv149, i32* %blku_oldmarksp, align 4
  %136 = load i32, i32* @PL_scopestack_ix, align 4
  %137 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u152 = getelementptr inbounds %struct.context, %struct.context* %137, i32 0, i32 1
  %cx_blk153 = bitcast %union.anon* %cx_u152 to %struct.block*
  %blku_oldscopesp = getelementptr inbounds %struct.block, %struct.block* %cx_blk153, i32 0, i32 4
  store i32 %136, i32* %blku_oldscopesp, align 4
  %138 = load i32, i32* @PL_retstack_ix, align 4
  %139 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u154 = getelementptr inbounds %struct.context, %struct.context* %139, i32 0, i32 1
  %cx_blk155 = bitcast %union.anon* %cx_u154 to %struct.block*
  %blku_oldretsp = getelementptr inbounds %struct.block, %struct.block* %cx_blk155, i32 0, i32 2
  store i32 %138, i32* %blku_oldretsp, align 4
  %140 = load %struct.pmop*, %struct.pmop** @PL_curpm, align 8
  %141 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u156 = getelementptr inbounds %struct.context, %struct.context* %141, i32 0, i32 1
  %cx_blk157 = bitcast %union.anon* %cx_u156 to %struct.block*
  %blku_oldpm = getelementptr inbounds %struct.block, %struct.block* %cx_blk157, i32 0, i32 5
  store %struct.pmop* %140, %struct.pmop** %blku_oldpm, align 8
  %142 = load i32, i32* %gimme, align 4
  %conv158 = trunc i32 %142 to i8
  %143 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u159 = getelementptr inbounds %struct.context, %struct.context* %143, i32 0, i32 1
  %cx_blk160 = bitcast %union.anon* %cx_u159 to %struct.block*
  %blku_gimme = getelementptr inbounds %struct.block, %struct.block* %cx_blk160, i32 0, i32 6
  store i8 %conv158, i8* %blku_gimme, align 1
  %144 = load volatile i32, i32* @PL_in_eval, align 4
  %145 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u161 = getelementptr inbounds %struct.context, %struct.context* %145, i32 0, i32 1
  %cx_blk162 = bitcast %union.anon* %cx_u161 to %struct.block*
  %blk_u = getelementptr inbounds %struct.block, %struct.block* %cx_blk162, i32 0, i32 7
  %blku_eval = bitcast %union.anon.1* %blk_u to %struct.block_eval*
  %old_in_eval = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval, i32 0, i32 0
  store i32 %144, i32* %old_in_eval, align 4
  %146 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %146, i32 0, i32 4
  %147 = load i16, i16* %op_type, align 2
  %conv163 = zext i16 %147 to i32
  %148 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u164 = getelementptr inbounds %struct.context, %struct.context* %148, i32 0, i32 1
  %cx_blk165 = bitcast %union.anon* %cx_u164 to %struct.block*
  %blk_u166 = getelementptr inbounds %struct.block, %struct.block* %cx_blk165, i32 0, i32 7
  %blku_eval167 = bitcast %union.anon.1* %blk_u166 to %struct.block_eval*
  %old_op_type = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval167, i32 0, i32 1
  store i32 %conv163, i32* %old_op_type, align 4
  %149 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u168 = getelementptr inbounds %struct.context, %struct.context* %149, i32 0, i32 1
  %cx_blk169 = bitcast %union.anon* %cx_u168 to %struct.block*
  %blk_u170 = getelementptr inbounds %struct.block, %struct.block* %cx_blk169, i32 0, i32 7
  %blku_eval171 = bitcast %union.anon.1* %blk_u170 to %struct.block_eval*
  %old_namesv = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval171, i32 0, i32 2
  store %struct.sv* null, %struct.sv** %old_namesv, align 8
  %150 = load %struct.op*, %struct.op** @PL_eval_root, align 8
  %151 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u172 = getelementptr inbounds %struct.context, %struct.context* %151, i32 0, i32 1
  %cx_blk173 = bitcast %union.anon* %cx_u172 to %struct.block*
  %blk_u174 = getelementptr inbounds %struct.block, %struct.block* %cx_blk173, i32 0, i32 7
  %blku_eval175 = bitcast %union.anon.1* %blk_u174 to %struct.block_eval*
  %old_eval_root = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval175, i32 0, i32 3
  store %struct.op* %150, %struct.op** %old_eval_root, align 8
  %152 = load %struct.sv*, %struct.sv** @PL_linestr, align 8
  %153 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u176 = getelementptr inbounds %struct.context, %struct.context* %153, i32 0, i32 1
  %cx_blk177 = bitcast %union.anon* %cx_u176 to %struct.block*
  %blk_u178 = getelementptr inbounds %struct.block, %struct.block* %cx_blk177, i32 0, i32 7
  %blku_eval179 = bitcast %union.anon.1* %blk_u178 to %struct.block_eval*
  %cur_text = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval179, i32 0, i32 4
  store %struct.sv* %152, %struct.sv** %cur_text, align 8
  %154 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u181 = getelementptr inbounds %struct.context, %struct.context* %154, i32 0, i32 1
  %cx_blk182 = bitcast %union.anon* %cx_u181 to %struct.block*
  %blk_u183 = getelementptr inbounds %struct.block, %struct.block* %cx_blk182, i32 0, i32 7
  %blku_eval184 = bitcast %union.anon.1* %blk_u183 to %struct.block_eval*
  %cv = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval184, i32 0, i32 5
  store %struct.cv* null, %struct.cv** %cv, align 8
  store %struct.cv* null, %struct.cv** %tmp180
  %155 = load %struct.cv*, %struct.cv** %tmp180
  %156 = load i32, i32* @PL_perldb, align 4
  %tobool185 = icmp ne i32 %156, 0
  br i1 %tobool185, label %land.lhs.true.186, label %if.end.200

land.lhs.true.186:                                ; preds = %cond.end.137
  %157 = load i32, i32* @PL_perldb, align 4
  %and187 = and i32 %157, 2
  %tobool188 = icmp ne i32 %and187, 0
  br i1 %tobool188, label %land.lhs.true.189, label %if.end.200

land.lhs.true.189:                                ; preds = %land.lhs.true.186
  %158 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %159 = load %struct.hv*, %struct.hv** @PL_debstash, align 8
  %cmp190 = icmp ne %struct.hv* %158, %159
  br i1 %cmp190, label %if.then.192, label %if.end.200

if.then.192:                                      ; preds = %land.lhs.true.189
  %160 = load %struct.gv*, %struct.gv** getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %tobool193 = icmp ne %struct.gv* %160, null
  br i1 %tobool193, label %cond.true.194, label %cond.false.197

cond.true.194:                                    ; preds = %if.then.192
  %161 = load %struct.gv*, %struct.gv** getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %sv_any195 = getelementptr inbounds %struct.gv, %struct.gv* %161, i32 0, i32 0
  %162 = load %struct.xpvgv*, %struct.xpvgv** %sv_any195, align 8
  %xgv_gp196 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %162, i32 0, i32 7
  %163 = load %struct.gp*, %struct.gp** %xgv_gp196, align 8
  %gp_av = getelementptr inbounds %struct.gp, %struct.gp* %163, i32 0, i32 4
  %164 = load %struct.av*, %struct.av** %gp_av, align 8
  br label %cond.end.198

cond.false.197:                                   ; preds = %if.then.192
  br label %cond.end.198

cond.end.198:                                     ; preds = %cond.false.197, %cond.true.194
  %cond199 = phi %struct.av* [ %164, %cond.true.194 ], [ null, %cond.false.197 ]
  %165 = load %struct.sv*, %struct.sv** @PL_linestr, align 8
  call void @S_save_lines(%struct.av* %cond199, %struct.sv* %165)
  br label %if.end.200

if.end.200:                                       ; preds = %cond.end.198, %land.lhs.true.189, %land.lhs.true.186, %cond.end.137
  %166 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %166, %struct.sv*** @PL_stack_sp, align 8
  %167 = load i32, i32* %gimme, align 4
  %168 = load %struct.cv*, %struct.cv** %runcv, align 8
  %169 = load i32, i32* %seq, align 4
  %call201 = call %struct.op* @S_doeval(i32 %167, %struct.op** null, %struct.cv* %168, i32 %169)
  store %struct.op* %call201, %struct.op** %ret, align 8
  %170 = load i32, i32* @PL_perldb, align 4
  %tobool202 = icmp ne i32 %170, 0
  br i1 %tobool202, label %land.lhs.true.203, label %if.end.215

land.lhs.true.203:                                ; preds = %if.end.200
  %171 = load i32, i32* @PL_perldb, align 4
  %and204 = and i32 %171, 8
  %tobool205 = icmp ne i32 %and204, 0
  br i1 %tobool205, label %land.lhs.true.206, label %if.end.215

land.lhs.true.206:                                ; preds = %land.lhs.true.203
  %172 = load i32, i32* %was, align 4
  %173 = load i32, i32* @PL_sub_generation, align 4
  %cmp207 = icmp ne i32 %172, %173
  br i1 %cmp207, label %land.lhs.true.209, label %if.end.215

land.lhs.true.209:                                ; preds = %land.lhs.true.206
  %174 = load %struct.op*, %struct.op** %ret, align 8
  %175 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next210 = getelementptr inbounds %struct.op, %struct.op* %175, i32 0, i32 0
  %176 = load %struct.op*, %struct.op** %op_next210, align 8
  %cmp211 = icmp ne %struct.op* %174, %176
  br i1 %cmp211, label %if.then.213, label %if.end.215

if.then.213:                                      ; preds = %land.lhs.true.209
  %177 = load i8*, i8** %safestr, align 8
  %call214 = call i8* @strcpy(i8* %177, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.71, i32 0, i32 0))
  br label %if.end.215

if.end.215:                                       ; preds = %if.then.213, %land.lhs.true.209, %land.lhs.true.206, %land.lhs.true.203, %if.end.200
  %178 = load %struct.jmpenv*, %struct.jmpenv** @PL_top_env, align 8
  %je_mustcatch = getelementptr inbounds %struct.jmpenv, %struct.jmpenv* %178, i32 0, i32 3
  %179 = load i8, i8* %je_mustcatch, align 1
  %conv216 = sext i8 %179 to i32
  %cmp217 = icmp eq i32 %conv216, 1
  br i1 %cmp217, label %cond.true.219, label %cond.false.221

cond.true.219:                                    ; preds = %if.end.215
  %180 = load %struct.op*, %struct.op** %ret, align 8
  %call220 = call %struct.op* @S_docatch(%struct.op* %180)
  br label %cond.end.222

cond.false.221:                                   ; preds = %if.end.215
  %181 = load %struct.op*, %struct.op** %ret, align 8
  br label %cond.end.222

cond.end.222:                                     ; preds = %cond.false.221, %cond.true.219
  %cond223 = phi %struct.op* [ %call220, %cond.true.219 ], [ %181, %cond.false.221 ]
  store %struct.op* %cond223, %struct.op** %retval
  br label %return

return:                                           ; preds = %cond.end.222, %if.then
  %182 = load %struct.op*, %struct.op** %retval
  ret %struct.op* %182
}

; Function Attrs: nounwind uwtable
define internal void @S_save_lines(%struct.av* %array, %struct.sv* %sv) #0 {
entry:
  %array.addr = alloca %struct.av*, align 8
  %sv.addr = alloca %struct.sv*, align 8
  %s = alloca i8*, align 8
  %send = alloca i8*, align 8
  %t = alloca i8*, align 8
  %line = alloca i32, align 4
  %tmpstr = alloca %struct.sv*, align 8
  store %struct.av* %array, %struct.av** %array.addr, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 0
  %1 = load i8*, i8** %sv_any, align 8
  %2 = bitcast i8* %1 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %2, i32 0, i32 0
  %3 = load i8*, i8** %xpv_pv, align 8
  store i8* %3, i8** %s, align 8
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any1 = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 0
  %5 = load i8*, i8** %sv_any1, align 8
  %6 = bitcast i8* %5 to %struct.xpv*
  %xpv_pv2 = getelementptr inbounds %struct.xpv, %struct.xpv* %6, i32 0, i32 0
  %7 = load i8*, i8** %xpv_pv2, align 8
  %8 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any3 = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 0
  %9 = load i8*, i8** %sv_any3, align 8
  %10 = bitcast i8* %9 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %10, i32 0, i32 1
  %11 = load i64, i64* %xpv_cur, align 8
  %add.ptr = getelementptr inbounds i8, i8* %7, i64 %11
  store i8* %add.ptr, i8** %send, align 8
  store i32 1, i32* %line, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %12 = load i8*, i8** %s, align 8
  %tobool = icmp ne i8* %12, null
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %13 = load i8*, i8** %s, align 8
  %14 = load i8*, i8** %send, align 8
  %cmp = icmp ult i8* %13, %14
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %15 = phi i1 [ false, %while.cond ], [ %cmp, %land.rhs ]
  br i1 %15, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %call = call %struct.sv* @Perl_newSV(i64 0)
  store %struct.sv* %call, %struct.sv** %tmpstr, align 8
  %16 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %call4 = call signext i8 @Perl_sv_upgrade(%struct.sv* %16, i32 7)
  %17 = load i8*, i8** %s, align 8
  %call5 = call i8* @strchr(i8* %17, i32 10)
  store i8* %call5, i8** %t, align 8
  %18 = load i8*, i8** %t, align 8
  %tobool6 = icmp ne i8* %18, null
  br i1 %tobool6, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %19 = load i8*, i8** %t, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %19, i32 1
  store i8* %incdec.ptr, i8** %t, align 8
  br label %if.end

if.else:                                          ; preds = %while.body
  %20 = load i8*, i8** %send, align 8
  store i8* %20, i8** %t, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %21 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %22 = load i8*, i8** %s, align 8
  %23 = load i8*, i8** %t, align 8
  %24 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %23 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %24 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  call void @Perl_sv_setpvn(%struct.sv* %21, i8* %22, i64 %sub.ptr.sub)
  %25 = load %struct.av*, %struct.av** %array.addr, align 8
  %26 = load i32, i32* %line, align 4
  %inc = add nsw i32 %26, 1
  store i32 %inc, i32* %line, align 4
  %27 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %call7 = call %struct.sv** @Perl_av_store(%struct.av* %25, i32 %26, %struct.sv* %27)
  %28 = load i8*, i8** %t, align 8
  store i8* %28, i8** %s, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end
  ret void
}

declare i8* @strcpy(i8*, i8*) #1

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_leaveeval() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %mark = alloca %struct.sv**, align 8
  %newsp = alloca %struct.sv**, align 8
  %newpm = alloca %struct.pmop*, align 8
  %gimme = alloca i32, align 4
  %cx = alloca %struct.context*, align 8
  %retop = alloca %struct.op*, align 8
  %save_flags = alloca i8, align 1
  %optype = alloca i32, align 4
  %markoff = alloca i32, align 4
  %nsv = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 6
  %2 = load i8, i8* %op_flags, align 1
  store i8 %2, i8* %save_flags, align 1
  %3 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %3, i32 0, i32 2
  %4 = load i32, i32* %si_cxix, align 4
  %dec = add nsw i32 %4, -1
  store i32 %dec, i32* %si_cxix, align 4
  %idxprom = sext i32 %4 to i64
  %5 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxstack = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %5, i32 0, i32 1
  %6 = load %struct.context*, %struct.context** %si_cxstack, align 8
  %arrayidx = getelementptr inbounds %struct.context, %struct.context* %6, i64 %idxprom
  store %struct.context* %arrayidx, %struct.context** %cx, align 8
  %7 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %8 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u = getelementptr inbounds %struct.context, %struct.context* %8, i32 0, i32 1
  %cx_blk = bitcast %union.anon* %cx_u to %struct.block*
  %blku_oldsp = getelementptr inbounds %struct.block, %struct.block* %cx_blk, i32 0, i32 0
  %9 = load i32, i32* %blku_oldsp, align 4
  %idx.ext = sext i32 %9 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %7, i64 %idx.ext
  store %struct.sv** %add.ptr, %struct.sv*** %newsp, align 8
  %10 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u1 = getelementptr inbounds %struct.context, %struct.context* %10, i32 0, i32 1
  %cx_blk2 = bitcast %union.anon* %cx_u1 to %struct.block*
  %blku_oldcop = getelementptr inbounds %struct.block, %struct.block* %cx_blk2, i32 0, i32 1
  %11 = load %struct.cop*, %struct.cop** %blku_oldcop, align 8
  store volatile %struct.cop* %11, %struct.cop** @PL_curcop, align 8
  %12 = load i32*, i32** @PL_markstack, align 8
  %13 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u3 = getelementptr inbounds %struct.context, %struct.context* %13, i32 0, i32 1
  %cx_blk4 = bitcast %union.anon* %cx_u3 to %struct.block*
  %blku_oldmarksp = getelementptr inbounds %struct.block, %struct.block* %cx_blk4, i32 0, i32 3
  %14 = load i32, i32* %blku_oldmarksp, align 4
  %idx.ext5 = sext i32 %14 to i64
  %add.ptr6 = getelementptr inbounds i32, i32* %12, i64 %idx.ext5
  store i32* %add.ptr6, i32** @PL_markstack_ptr, align 8
  %15 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u7 = getelementptr inbounds %struct.context, %struct.context* %15, i32 0, i32 1
  %cx_blk8 = bitcast %union.anon* %cx_u7 to %struct.block*
  %blku_oldscopesp = getelementptr inbounds %struct.block, %struct.block* %cx_blk8, i32 0, i32 4
  %16 = load i32, i32* %blku_oldscopesp, align 4
  store i32 %16, i32* @PL_scopestack_ix, align 4
  %17 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u9 = getelementptr inbounds %struct.context, %struct.context* %17, i32 0, i32 1
  %cx_blk10 = bitcast %union.anon* %cx_u9 to %struct.block*
  %blku_oldretsp = getelementptr inbounds %struct.block, %struct.block* %cx_blk10, i32 0, i32 2
  %18 = load i32, i32* %blku_oldretsp, align 4
  store i32 %18, i32* @PL_retstack_ix, align 4
  %19 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u11 = getelementptr inbounds %struct.context, %struct.context* %19, i32 0, i32 1
  %cx_blk12 = bitcast %union.anon* %cx_u11 to %struct.block*
  %blku_oldpm = getelementptr inbounds %struct.block, %struct.block* %cx_blk12, i32 0, i32 5
  %20 = load %struct.pmop*, %struct.pmop** %blku_oldpm, align 8
  store %struct.pmop* %20, %struct.pmop** %newpm, align 8
  %21 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u13 = getelementptr inbounds %struct.context, %struct.context* %21, i32 0, i32 1
  %cx_blk14 = bitcast %union.anon* %cx_u13 to %struct.block*
  %blku_gimme = getelementptr inbounds %struct.block, %struct.block* %cx_blk14, i32 0, i32 6
  %22 = load i8, i8* %blku_gimme, align 1
  %conv = zext i8 %22 to i32
  store i32 %conv, i32* %gimme, align 4
  %23 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u15 = getelementptr inbounds %struct.context, %struct.context* %23, i32 0, i32 1
  %cx_blk16 = bitcast %union.anon* %cx_u15 to %struct.block*
  %blk_u = getelementptr inbounds %struct.block, %struct.block* %cx_blk16, i32 0, i32 7
  %blku_eval = bitcast %union.anon.1* %blk_u to %struct.block_eval*
  %old_in_eval = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval, i32 0, i32 0
  %24 = load i32, i32* %old_in_eval, align 4
  store volatile i32 %24, i32* @PL_in_eval, align 4
  %25 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u17 = getelementptr inbounds %struct.context, %struct.context* %25, i32 0, i32 1
  %cx_blk18 = bitcast %union.anon* %cx_u17 to %struct.block*
  %blk_u19 = getelementptr inbounds %struct.block, %struct.block* %cx_blk18, i32 0, i32 7
  %blku_eval20 = bitcast %union.anon.1* %blk_u19 to %struct.block_eval*
  %old_op_type = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval20, i32 0, i32 1
  %26 = load i32, i32* %old_op_type, align 4
  store i32 %26, i32* %optype, align 4
  %27 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u21 = getelementptr inbounds %struct.context, %struct.context* %27, i32 0, i32 1
  %cx_blk22 = bitcast %union.anon* %cx_u21 to %struct.block*
  %blk_u23 = getelementptr inbounds %struct.block, %struct.block* %cx_blk22, i32 0, i32 7
  %blku_eval24 = bitcast %union.anon.1* %blk_u23 to %struct.block_eval*
  %old_eval_root = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval24, i32 0, i32 3
  %28 = load %struct.op*, %struct.op** %old_eval_root, align 8
  store %struct.op* %28, %struct.op** @PL_eval_root, align 8
  %29 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u25 = getelementptr inbounds %struct.context, %struct.context* %29, i32 0, i32 1
  %cx_blk26 = bitcast %union.anon* %cx_u25 to %struct.block*
  %blk_u27 = getelementptr inbounds %struct.block, %struct.block* %cx_blk26, i32 0, i32 7
  %blku_eval28 = bitcast %union.anon.1* %blk_u27 to %struct.block_eval*
  %old_namesv = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval28, i32 0, i32 2
  %30 = load %struct.sv*, %struct.sv** %old_namesv, align 8
  %tobool = icmp ne %struct.sv* %30, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %31 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u29 = getelementptr inbounds %struct.context, %struct.context* %31, i32 0, i32 1
  %cx_blk30 = bitcast %union.anon* %cx_u29 to %struct.block*
  %blk_u31 = getelementptr inbounds %struct.block, %struct.block* %cx_blk30, i32 0, i32 7
  %blku_eval32 = bitcast %union.anon.1* %blk_u31 to %struct.block_eval*
  %old_namesv33 = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval32, i32 0, i32 2
  %32 = load %struct.sv*, %struct.sv** %old_namesv33, align 8
  %call = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %32)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %call34 = call %struct.op* @Perl_pop_return()
  store %struct.op* %call34, %struct.op** %retop, align 8
  store i8 0, i8* @PL_tainted, align 1
  %33 = load i32, i32* %gimme, align 4
  %cmp = icmp eq i32 %33, 128
  br i1 %cmp, label %if.then.36, label %if.else

if.then.36:                                       ; preds = %if.end
  %34 = load %struct.sv**, %struct.sv*** %newsp, align 8
  store %struct.sv** %34, %struct.sv*** %mark, align 8
  br label %if.end.74

if.else:                                          ; preds = %if.end
  %35 = load i32, i32* %gimme, align 4
  %cmp37 = icmp eq i32 %35, 0
  br i1 %cmp37, label %if.then.39, label %if.else.63

if.then.39:                                       ; preds = %if.else
  %36 = load %struct.sv**, %struct.sv*** %newsp, align 8
  %add.ptr40 = getelementptr inbounds %struct.sv*, %struct.sv** %36, i64 1
  store %struct.sv** %add.ptr40, %struct.sv*** %mark, align 8
  %37 = load %struct.sv**, %struct.sv*** %mark, align 8
  %38 = load %struct.sv**, %struct.sv*** %sp, align 8
  %cmp41 = icmp ule %struct.sv** %37, %38
  br i1 %cmp41, label %if.then.43, label %if.else.49

if.then.43:                                       ; preds = %if.then.39
  %39 = load %struct.sv**, %struct.sv*** %sp, align 8
  %40 = load %struct.sv*, %struct.sv** %39, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %40, i32 0, i32 2
  %41 = load i32, i32* %sv_flags, align 4
  %and = and i32 %41, 2048
  %tobool44 = icmp ne i32 %and, 0
  br i1 %tobool44, label %if.then.45, label %if.else.46

if.then.45:                                       ; preds = %if.then.43
  %42 = load %struct.sv**, %struct.sv*** %sp, align 8
  %43 = load %struct.sv*, %struct.sv** %42, align 8
  %44 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv* %43, %struct.sv** %44, align 8
  br label %if.end.48

if.else.46:                                       ; preds = %if.then.43
  %45 = load %struct.sv**, %struct.sv*** %sp, align 8
  %46 = load %struct.sv*, %struct.sv** %45, align 8
  %call47 = call %struct.sv* @Perl_sv_mortalcopy(%struct.sv* %46)
  %47 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv* %call47, %struct.sv** %47, align 8
  br label %if.end.48

if.end.48:                                        ; preds = %if.else.46, %if.then.45
  br label %if.end.62

if.else.49:                                       ; preds = %if.then.39
  %48 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %49 = load %struct.sv**, %struct.sv*** %mark, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %48 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %49 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp50 = icmp slt i64 %sub.ptr.div, 0
  br i1 %cmp50, label %if.then.52, label %if.end.61

if.then.52:                                       ; preds = %if.else.49
  %50 = load %struct.sv**, %struct.sv*** %mark, align 8
  %51 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast53 = ptrtoint %struct.sv** %50 to i64
  %sub.ptr.rhs.cast54 = ptrtoint %struct.sv** %51 to i64
  %sub.ptr.sub55 = sub i64 %sub.ptr.lhs.cast53, %sub.ptr.rhs.cast54
  %sub.ptr.div56 = sdiv exact i64 %sub.ptr.sub55, 8
  %conv57 = trunc i64 %sub.ptr.div56 to i32
  store i32 %conv57, i32* %markoff, align 4
  %52 = load %struct.sv**, %struct.sv*** %sp, align 8
  %53 = load %struct.sv**, %struct.sv*** %mark, align 8
  %call58 = call %struct.sv** @Perl_stack_grow(%struct.sv** %52, %struct.sv** %53, i32 0)
  store %struct.sv** %call58, %struct.sv*** %sp, align 8
  %54 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %55 = load i32, i32* %markoff, align 4
  %idx.ext59 = sext i32 %55 to i64
  %add.ptr60 = getelementptr inbounds %struct.sv*, %struct.sv** %54, i64 %idx.ext59
  store %struct.sv** %add.ptr60, %struct.sv*** %mark, align 8
  br label %if.end.61

if.end.61:                                        ; preds = %if.then.52, %if.else.49
  %56 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %56, align 8
  br label %if.end.62

if.end.62:                                        ; preds = %if.end.61, %if.end.48
  %57 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv** %57, %struct.sv*** %sp, align 8
  br label %if.end.73

if.else.63:                                       ; preds = %if.else
  %58 = load %struct.sv**, %struct.sv*** %newsp, align 8
  %add.ptr64 = getelementptr inbounds %struct.sv*, %struct.sv** %58, i64 1
  store %struct.sv** %add.ptr64, %struct.sv*** %mark, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else.63
  %59 = load %struct.sv**, %struct.sv*** %mark, align 8
  %60 = load %struct.sv**, %struct.sv*** %sp, align 8
  %cmp65 = icmp ule %struct.sv** %59, %60
  br i1 %cmp65, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %61 = load %struct.sv**, %struct.sv*** %mark, align 8
  %62 = load %struct.sv*, %struct.sv** %61, align 8
  %sv_flags67 = getelementptr inbounds %struct.sv, %struct.sv* %62, i32 0, i32 2
  %63 = load i32, i32* %sv_flags67, align 4
  %and68 = and i32 %63, 2048
  %tobool69 = icmp ne i32 %and68, 0
  br i1 %tobool69, label %if.end.72, label %if.then.70

if.then.70:                                       ; preds = %for.body
  %64 = load %struct.sv**, %struct.sv*** %mark, align 8
  %65 = load %struct.sv*, %struct.sv** %64, align 8
  %call71 = call %struct.sv* @Perl_sv_mortalcopy(%struct.sv* %65)
  %66 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv* %call71, %struct.sv** %66, align 8
  store i8 0, i8* @PL_tainted, align 1
  br label %if.end.72

if.end.72:                                        ; preds = %if.then.70, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.72
  %67 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %67, i32 1
  store %struct.sv** %incdec.ptr, %struct.sv*** %mark, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.73

if.end.73:                                        ; preds = %for.end, %if.end.62
  br label %if.end.74

if.end.74:                                        ; preds = %if.end.73, %if.then.36
  %68 = load %struct.pmop*, %struct.pmop** %newpm, align 8
  store %struct.pmop* %68, %struct.pmop** @PL_curpm, align 8
  %69 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %sv_any = getelementptr inbounds %struct.cv, %struct.cv* %69, i32 0, i32 0
  %70 = load %struct.xpvcv*, %struct.xpvcv** %sv_any, align 8
  %xcv_depth = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %70, i32 0, i32 14
  store i64 0, i64* %xcv_depth, align 8
  call void @Perl_lex_end()
  %71 = load i32, i32* %optype, align 4
  %cmp75 = icmp eq i32 %71, 309
  br i1 %cmp75, label %land.lhs.true, label %if.else.145

land.lhs.true:                                    ; preds = %if.end.74
  %72 = load i32, i32* %gimme, align 4
  %cmp77 = icmp eq i32 %72, 0
  br i1 %cmp77, label %cond.true, label %cond.false.118

cond.true:                                        ; preds = %land.lhs.true
  %73 = load %struct.sv**, %struct.sv*** %sp, align 8
  %74 = load %struct.sv*, %struct.sv** %73, align 8
  %tobool79 = icmp ne %struct.sv* %74, null
  br i1 %tobool79, label %cond.false, label %cond.true.80

cond.true.80:                                     ; preds = %cond.true
  br i1 false, label %if.else.145, label %if.then.121

cond.false:                                       ; preds = %cond.true
  %75 = load %struct.sv**, %struct.sv*** %sp, align 8
  %76 = load %struct.sv*, %struct.sv** %75, align 8
  %sv_flags81 = getelementptr inbounds %struct.sv, %struct.sv* %76, i32 0, i32 2
  %77 = load i32, i32* %sv_flags81, align 4
  %and82 = and i32 %77, 262144
  %tobool83 = icmp ne i32 %and82, 0
  br i1 %tobool83, label %cond.true.84, label %cond.false.98

cond.true.84:                                     ; preds = %cond.false
  %78 = load %struct.sv**, %struct.sv*** %sp, align 8
  %79 = load %struct.sv*, %struct.sv** %78, align 8
  %sv_any85 = getelementptr inbounds %struct.sv, %struct.sv* %79, i32 0, i32 0
  %80 = load i8*, i8** %sv_any85, align 8
  %81 = bitcast i8* %80 to %struct.xpv*
  store %struct.xpv* %81, %struct.xpv** @PL_Xpv, align 8
  %tobool86 = icmp ne %struct.xpv* %81, null
  br i1 %tobool86, label %land.lhs.true.87, label %cond.false.97

land.lhs.true.87:                                 ; preds = %cond.true.84
  %82 = load %struct.xpv*, %struct.xpv** @PL_Xpv, align 8
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %82, i32 0, i32 1
  %83 = load i64, i64* %xpv_cur, align 8
  %cmp88 = icmp ugt i64 %83, 1
  br i1 %cmp88, label %cond.true.96, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.87
  %84 = load %struct.xpv*, %struct.xpv** @PL_Xpv, align 8
  %xpv_cur90 = getelementptr inbounds %struct.xpv, %struct.xpv* %84, i32 0, i32 1
  %85 = load i64, i64* %xpv_cur90, align 8
  %tobool91 = icmp ne i64 %85, 0
  br i1 %tobool91, label %land.lhs.true.92, label %cond.false.97

land.lhs.true.92:                                 ; preds = %lor.lhs.false
  %86 = load %struct.xpv*, %struct.xpv** @PL_Xpv, align 8
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %86, i32 0, i32 0
  %87 = load i8*, i8** %xpv_pv, align 8
  %88 = load i8, i8* %87, align 1
  %conv93 = sext i8 %88 to i32
  %cmp94 = icmp ne i32 %conv93, 48
  br i1 %cmp94, label %cond.true.96, label %cond.false.97

cond.true.96:                                     ; preds = %land.lhs.true.92, %land.lhs.true.87
  br i1 true, label %if.else.145, label %if.then.121

cond.false.97:                                    ; preds = %land.lhs.true.92, %lor.lhs.false, %cond.true.84
  br i1 false, label %if.else.145, label %if.then.121

cond.false.98:                                    ; preds = %cond.false
  %89 = load %struct.sv**, %struct.sv*** %sp, align 8
  %90 = load %struct.sv*, %struct.sv** %89, align 8
  %sv_flags99 = getelementptr inbounds %struct.sv, %struct.sv* %90, i32 0, i32 2
  %91 = load i32, i32* %sv_flags99, align 4
  %and100 = and i32 %91, 65536
  %tobool101 = icmp ne i32 %and100, 0
  br i1 %tobool101, label %cond.true.102, label %cond.false.106

cond.true.102:                                    ; preds = %cond.false.98
  %92 = load %struct.sv**, %struct.sv*** %sp, align 8
  %93 = load %struct.sv*, %struct.sv** %92, align 8
  %sv_any103 = getelementptr inbounds %struct.sv, %struct.sv* %93, i32 0, i32 0
  %94 = load i8*, i8** %sv_any103, align 8
  %95 = bitcast i8* %94 to %struct.xpviv*
  %xiv_iv = getelementptr inbounds %struct.xpviv, %struct.xpviv* %95, i32 0, i32 3
  %96 = load i64, i64* %xiv_iv, align 8
  %cmp104 = icmp ne i64 %96, 0
  br i1 %cmp104, label %if.else.145, label %if.then.121

cond.false.106:                                   ; preds = %cond.false.98
  %97 = load %struct.sv**, %struct.sv*** %sp, align 8
  %98 = load %struct.sv*, %struct.sv** %97, align 8
  %sv_flags107 = getelementptr inbounds %struct.sv, %struct.sv* %98, i32 0, i32 2
  %99 = load i32, i32* %sv_flags107, align 4
  %and108 = and i32 %99, 131072
  %tobool109 = icmp ne i32 %and108, 0
  br i1 %tobool109, label %cond.true.110, label %cond.false.114

cond.true.110:                                    ; preds = %cond.false.106
  %100 = load %struct.sv**, %struct.sv*** %sp, align 8
  %101 = load %struct.sv*, %struct.sv** %100, align 8
  %sv_any111 = getelementptr inbounds %struct.sv, %struct.sv* %101, i32 0, i32 0
  %102 = load i8*, i8** %sv_any111, align 8
  %103 = bitcast i8* %102 to %struct.xpvnv*
  %xnv_nv = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %103, i32 0, i32 4
  %104 = load double, double* %xnv_nv, align 8
  %cmp112 = fcmp une double %104, 0.000000e+00
  br i1 %cmp112, label %if.else.145, label %if.then.121

cond.false.114:                                   ; preds = %cond.false.106
  %105 = load %struct.sv**, %struct.sv*** %sp, align 8
  %106 = load %struct.sv*, %struct.sv** %105, align 8
  %call115 = call signext i8 @Perl_sv_2bool(%struct.sv* %106)
  %conv116 = sext i8 %call115 to i32
  %tobool117 = icmp ne i32 %conv116, 0
  br i1 %tobool117, label %if.else.145, label %if.then.121

cond.false.118:                                   ; preds = %land.lhs.true
  %107 = load %struct.sv**, %struct.sv*** %sp, align 8
  %108 = load %struct.sv**, %struct.sv*** %newsp, align 8
  %cmp119 = icmp ugt %struct.sv** %107, %108
  br i1 %cmp119, label %if.else.145, label %if.then.121

if.then.121:                                      ; preds = %cond.false.118, %cond.false.114, %cond.true.110, %cond.true.102, %cond.false.97, %cond.true.96, %cond.true.80
  %109 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u122 = getelementptr inbounds %struct.context, %struct.context* %109, i32 0, i32 1
  %cx_blk123 = bitcast %union.anon* %cx_u122 to %struct.block*
  %blk_u124 = getelementptr inbounds %struct.block, %struct.block* %cx_blk123, i32 0, i32 7
  %blku_eval125 = bitcast %union.anon.1* %blk_u124 to %struct.block_eval*
  %old_namesv126 = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval125, i32 0, i32 2
  %110 = load %struct.sv*, %struct.sv** %old_namesv126, align 8
  store %struct.sv* %110, %struct.sv** %nsv, align 8
  %111 = load %struct.gv*, %struct.gv** @PL_incgv, align 8
  %sv_any127 = getelementptr inbounds %struct.gv, %struct.gv* %111, i32 0, i32 0
  %112 = load %struct.xpvgv*, %struct.xpvgv** %sv_any127, align 8
  %xgv_gp = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %112, i32 0, i32 7
  %113 = load %struct.gp*, %struct.gp** %xgv_gp, align 8
  %gp_hv = getelementptr inbounds %struct.gp, %struct.gp* %113, i32 0, i32 5
  %114 = load %struct.hv*, %struct.hv** %gp_hv, align 8
  %tobool128 = icmp ne %struct.hv* %114, null
  br i1 %tobool128, label %cond.true.129, label %cond.false.133

cond.true.129:                                    ; preds = %if.then.121
  %115 = load %struct.gv*, %struct.gv** @PL_incgv, align 8
  %sv_any130 = getelementptr inbounds %struct.gv, %struct.gv* %115, i32 0, i32 0
  %116 = load %struct.xpvgv*, %struct.xpvgv** %sv_any130, align 8
  %xgv_gp131 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %116, i32 0, i32 7
  %117 = load %struct.gp*, %struct.gp** %xgv_gp131, align 8
  %gp_hv132 = getelementptr inbounds %struct.gp, %struct.gp* %117, i32 0, i32 5
  %118 = load %struct.hv*, %struct.hv** %gp_hv132, align 8
  br label %cond.end

cond.false.133:                                   ; preds = %if.then.121
  %119 = load %struct.gv*, %struct.gv** @PL_incgv, align 8
  %call134 = call %struct.gv* @Perl_gv_HVadd(%struct.gv* %119)
  %sv_any135 = getelementptr inbounds %struct.gv, %struct.gv* %call134, i32 0, i32 0
  %120 = load %struct.xpvgv*, %struct.xpvgv** %sv_any135, align 8
  %xgv_gp136 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %120, i32 0, i32 7
  %121 = load %struct.gp*, %struct.gp** %xgv_gp136, align 8
  %gp_hv137 = getelementptr inbounds %struct.gp, %struct.gp* %121, i32 0, i32 5
  %122 = load %struct.hv*, %struct.hv** %gp_hv137, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false.133, %cond.true.129
  %cond = phi %struct.hv* [ %118, %cond.true.129 ], [ %122, %cond.false.133 ]
  %123 = load %struct.sv*, %struct.sv** %nsv, align 8
  %sv_any138 = getelementptr inbounds %struct.sv, %struct.sv* %123, i32 0, i32 0
  %124 = load i8*, i8** %sv_any138, align 8
  %125 = bitcast i8* %124 to %struct.xpv*
  %xpv_pv139 = getelementptr inbounds %struct.xpv, %struct.xpv* %125, i32 0, i32 0
  %126 = load i8*, i8** %xpv_pv139, align 8
  %127 = load %struct.sv*, %struct.sv** %nsv, align 8
  %sv_any140 = getelementptr inbounds %struct.sv, %struct.sv* %127, i32 0, i32 0
  %128 = load i8*, i8** %sv_any140, align 8
  %129 = bitcast i8* %128 to %struct.xpv*
  %xpv_cur141 = getelementptr inbounds %struct.xpv, %struct.xpv* %129, i32 0, i32 1
  %130 = load i64, i64* %xpv_cur141, align 8
  %conv142 = trunc i64 %130 to i32
  %call143 = call %struct.sv* @Perl_hv_delete(%struct.hv* %cond, i8* %126, i32 %conv142, i32 2)
  %131 = load %struct.sv*, %struct.sv** %nsv, align 8
  %call144 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.29, i32 0, i32 0), %struct.sv* %131)
  store %struct.op* %call144, %struct.op** %retop, align 8
  br label %if.end.153

if.else.145:                                      ; preds = %cond.false.118, %cond.false.114, %cond.true.110, %cond.true.102, %cond.false.97, %cond.true.96, %cond.true.80, %if.end.74
  call void @Perl_pop_scope()
  %132 = load i8, i8* %save_flags, align 1
  %conv146 = zext i8 %132 to i32
  %and147 = and i32 %conv146, 128
  %tobool148 = icmp ne i32 %and147, 0
  br i1 %tobool148, label %if.end.152, label %if.then.149

if.then.149:                                      ; preds = %if.else.145
  %133 = load %struct.gv*, %struct.gv** @PL_errgv, align 8
  %sv_any150 = getelementptr inbounds %struct.gv, %struct.gv* %133, i32 0, i32 0
  %134 = load %struct.xpvgv*, %struct.xpvgv** %sv_any150, align 8
  %xgv_gp151 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %134, i32 0, i32 7
  %135 = load %struct.gp*, %struct.gp** %xgv_gp151, align 8
  %gp_sv = getelementptr inbounds %struct.gp, %struct.gp* %135, i32 0, i32 0
  %136 = load %struct.sv*, %struct.sv** %gp_sv, align 8
  call void @Perl_sv_setpv(%struct.sv* %136, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.11, i32 0, i32 0))
  br label %if.end.152

if.end.152:                                       ; preds = %if.then.149, %if.else.145
  br label %if.end.153

if.end.153:                                       ; preds = %if.end.152, %cond.end
  %137 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %137, %struct.sv*** @PL_stack_sp, align 8
  %138 = load %struct.op*, %struct.op** %retop, align 8
  ret %struct.op* %138
}

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_entertry() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %cx = alloca %struct.context*, align 8
  %gimme = alloca i32, align 4
  %tmp = alloca %struct.cv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 6
  %2 = load i8, i8* %op_flags, align 1
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 3
  %cmp = icmp eq i32 %and, 1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end.18

cond.false:                                       ; preds = %entry
  %3 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags2 = getelementptr inbounds %struct.op, %struct.op* %3, i32 0, i32 6
  %4 = load i8, i8* %op_flags2, align 1
  %conv3 = zext i8 %4 to i32
  %and4 = and i32 %conv3, 3
  %cmp5 = icmp eq i32 %and4, 2
  br i1 %cmp5, label %cond.true.7, label %cond.false.8

cond.true.7:                                      ; preds = %cond.false
  br label %cond.end.16

cond.false.8:                                     ; preds = %cond.false
  %5 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags9 = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 6
  %6 = load i8, i8* %op_flags9, align 1
  %conv10 = zext i8 %6 to i32
  %and11 = and i32 %conv10, 3
  %cmp12 = icmp eq i32 %and11, 3
  br i1 %cmp12, label %cond.true.14, label %cond.false.15

cond.true.14:                                     ; preds = %cond.false.8
  br label %cond.end

cond.false.15:                                    ; preds = %cond.false.8
  %call = call i32 @Perl_block_gimme()
  br label %cond.end

cond.end:                                         ; preds = %cond.false.15, %cond.true.14
  %cond = phi i32 [ 1, %cond.true.14 ], [ %call, %cond.false.15 ]
  br label %cond.end.16

cond.end.16:                                      ; preds = %cond.end, %cond.true.7
  %cond17 = phi i32 [ 0, %cond.true.7 ], [ %cond, %cond.end ]
  br label %cond.end.18

cond.end.18:                                      ; preds = %cond.end.16, %cond.true
  %cond19 = phi i32 [ 128, %cond.true ], [ %cond17, %cond.end.16 ]
  store i32 %cond19, i32* %gimme, align 4
  call void @Perl_push_scope()
  call void @Perl_save_int(i32* @PL_tmps_floor)
  %7 = load i32, i32* @PL_tmps_ix, align 4
  store i32 %7, i32* @PL_tmps_floor, align 4
  %8 = load %struct.op*, %struct.op** @PL_op, align 8
  %9 = bitcast %struct.op* %8 to %struct.logop*
  %op_other = getelementptr inbounds %struct.logop, %struct.logop* %9, i32 0, i32 9
  %10 = load %struct.op*, %struct.op** %op_other, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %10, i32 0, i32 0
  %11 = load %struct.op*, %struct.op** %op_next, align 8
  call void @Perl_push_return(%struct.op* %11)
  %12 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %12, i32 0, i32 2
  %13 = load i32, i32* %si_cxix, align 4
  %14 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxmax = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %14, i32 0, i32 3
  %15 = load i32, i32* %si_cxmax, align 4
  %cmp20 = icmp slt i32 %13, %15
  br i1 %cmp20, label %cond.true.22, label %cond.false.24

cond.true.22:                                     ; preds = %cond.end.18
  %16 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix23 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %16, i32 0, i32 2
  %17 = load i32, i32* %si_cxix23, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %si_cxix23, align 4
  br label %cond.end.27

cond.false.24:                                    ; preds = %cond.end.18
  %call25 = call i32 @Perl_cxinc()
  %18 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix26 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %18, i32 0, i32 2
  store i32 %call25, i32* %si_cxix26, align 4
  br label %cond.end.27

cond.end.27:                                      ; preds = %cond.false.24, %cond.true.22
  %cond28 = phi i32 [ %inc, %cond.true.22 ], [ %call25, %cond.false.24 ]
  %19 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix29 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %19, i32 0, i32 2
  %20 = load i32, i32* %si_cxix29, align 4
  %idxprom = sext i32 %20 to i64
  %21 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxstack = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %21, i32 0, i32 1
  %22 = load %struct.context*, %struct.context** %si_cxstack, align 8
  %arrayidx = getelementptr inbounds %struct.context, %struct.context* %22, i64 %idxprom
  store %struct.context* %arrayidx, %struct.context** %cx, align 8
  %23 = load %struct.context*, %struct.context** %cx, align 8
  %cx_type = getelementptr inbounds %struct.context, %struct.context* %23, i32 0, i32 0
  store i32 514, i32* %cx_type, align 4
  %24 = load %struct.sv**, %struct.sv*** %sp, align 8
  %25 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %24 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %25 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %conv30 = trunc i64 %sub.ptr.div to i32
  %26 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u = getelementptr inbounds %struct.context, %struct.context* %26, i32 0, i32 1
  %cx_blk = bitcast %union.anon* %cx_u to %struct.block*
  %blku_oldsp = getelementptr inbounds %struct.block, %struct.block* %cx_blk, i32 0, i32 0
  store i32 %conv30, i32* %blku_oldsp, align 4
  %27 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %28 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u31 = getelementptr inbounds %struct.context, %struct.context* %28, i32 0, i32 1
  %cx_blk32 = bitcast %union.anon* %cx_u31 to %struct.block*
  %blku_oldcop = getelementptr inbounds %struct.block, %struct.block* %cx_blk32, i32 0, i32 1
  store %struct.cop* %27, %struct.cop** %blku_oldcop, align 8
  %29 = load i32*, i32** @PL_markstack_ptr, align 8
  %30 = load i32*, i32** @PL_markstack, align 8
  %sub.ptr.lhs.cast33 = ptrtoint i32* %29 to i64
  %sub.ptr.rhs.cast34 = ptrtoint i32* %30 to i64
  %sub.ptr.sub35 = sub i64 %sub.ptr.lhs.cast33, %sub.ptr.rhs.cast34
  %sub.ptr.div36 = sdiv exact i64 %sub.ptr.sub35, 4
  %conv37 = trunc i64 %sub.ptr.div36 to i32
  %31 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u38 = getelementptr inbounds %struct.context, %struct.context* %31, i32 0, i32 1
  %cx_blk39 = bitcast %union.anon* %cx_u38 to %struct.block*
  %blku_oldmarksp = getelementptr inbounds %struct.block, %struct.block* %cx_blk39, i32 0, i32 3
  store i32 %conv37, i32* %blku_oldmarksp, align 4
  %32 = load i32, i32* @PL_scopestack_ix, align 4
  %33 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u40 = getelementptr inbounds %struct.context, %struct.context* %33, i32 0, i32 1
  %cx_blk41 = bitcast %union.anon* %cx_u40 to %struct.block*
  %blku_oldscopesp = getelementptr inbounds %struct.block, %struct.block* %cx_blk41, i32 0, i32 4
  store i32 %32, i32* %blku_oldscopesp, align 4
  %34 = load i32, i32* @PL_retstack_ix, align 4
  %35 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u42 = getelementptr inbounds %struct.context, %struct.context* %35, i32 0, i32 1
  %cx_blk43 = bitcast %union.anon* %cx_u42 to %struct.block*
  %blku_oldretsp = getelementptr inbounds %struct.block, %struct.block* %cx_blk43, i32 0, i32 2
  store i32 %34, i32* %blku_oldretsp, align 4
  %36 = load %struct.pmop*, %struct.pmop** @PL_curpm, align 8
  %37 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u44 = getelementptr inbounds %struct.context, %struct.context* %37, i32 0, i32 1
  %cx_blk45 = bitcast %union.anon* %cx_u44 to %struct.block*
  %blku_oldpm = getelementptr inbounds %struct.block, %struct.block* %cx_blk45, i32 0, i32 5
  store %struct.pmop* %36, %struct.pmop** %blku_oldpm, align 8
  %38 = load i32, i32* %gimme, align 4
  %conv46 = trunc i32 %38 to i8
  %39 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u47 = getelementptr inbounds %struct.context, %struct.context* %39, i32 0, i32 1
  %cx_blk48 = bitcast %union.anon* %cx_u47 to %struct.block*
  %blku_gimme = getelementptr inbounds %struct.block, %struct.block* %cx_blk48, i32 0, i32 6
  store i8 %conv46, i8* %blku_gimme, align 1
  %40 = load volatile i32, i32* @PL_in_eval, align 4
  %41 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u49 = getelementptr inbounds %struct.context, %struct.context* %41, i32 0, i32 1
  %cx_blk50 = bitcast %union.anon* %cx_u49 to %struct.block*
  %blk_u = getelementptr inbounds %struct.block, %struct.block* %cx_blk50, i32 0, i32 7
  %blku_eval = bitcast %union.anon.1* %blk_u to %struct.block_eval*
  %old_in_eval = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval, i32 0, i32 0
  store i32 %40, i32* %old_in_eval, align 4
  %42 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %42, i32 0, i32 4
  %43 = load i16, i16* %op_type, align 2
  %conv51 = zext i16 %43 to i32
  %44 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u52 = getelementptr inbounds %struct.context, %struct.context* %44, i32 0, i32 1
  %cx_blk53 = bitcast %union.anon* %cx_u52 to %struct.block*
  %blk_u54 = getelementptr inbounds %struct.block, %struct.block* %cx_blk53, i32 0, i32 7
  %blku_eval55 = bitcast %union.anon.1* %blk_u54 to %struct.block_eval*
  %old_op_type = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval55, i32 0, i32 1
  store i32 %conv51, i32* %old_op_type, align 4
  %45 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u56 = getelementptr inbounds %struct.context, %struct.context* %45, i32 0, i32 1
  %cx_blk57 = bitcast %union.anon* %cx_u56 to %struct.block*
  %blk_u58 = getelementptr inbounds %struct.block, %struct.block* %cx_blk57, i32 0, i32 7
  %blku_eval59 = bitcast %union.anon.1* %blk_u58 to %struct.block_eval*
  %old_namesv = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval59, i32 0, i32 2
  store %struct.sv* null, %struct.sv** %old_namesv, align 8
  %46 = load %struct.op*, %struct.op** @PL_eval_root, align 8
  %47 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u60 = getelementptr inbounds %struct.context, %struct.context* %47, i32 0, i32 1
  %cx_blk61 = bitcast %union.anon* %cx_u60 to %struct.block*
  %blk_u62 = getelementptr inbounds %struct.block, %struct.block* %cx_blk61, i32 0, i32 7
  %blku_eval63 = bitcast %union.anon.1* %blk_u62 to %struct.block_eval*
  %old_eval_root = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval63, i32 0, i32 3
  store %struct.op* %46, %struct.op** %old_eval_root, align 8
  %48 = load %struct.sv*, %struct.sv** @PL_linestr, align 8
  %49 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u64 = getelementptr inbounds %struct.context, %struct.context* %49, i32 0, i32 1
  %cx_blk65 = bitcast %union.anon* %cx_u64 to %struct.block*
  %blk_u66 = getelementptr inbounds %struct.block, %struct.block* %cx_blk65, i32 0, i32 7
  %blku_eval67 = bitcast %union.anon.1* %blk_u66 to %struct.block_eval*
  %cur_text = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval67, i32 0, i32 4
  store %struct.sv* %48, %struct.sv** %cur_text, align 8
  %50 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u68 = getelementptr inbounds %struct.context, %struct.context* %50, i32 0, i32 1
  %cx_blk69 = bitcast %union.anon* %cx_u68 to %struct.block*
  %blk_u70 = getelementptr inbounds %struct.block, %struct.block* %cx_blk69, i32 0, i32 7
  %blku_eval71 = bitcast %union.anon.1* %blk_u70 to %struct.block_eval*
  %cv = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval71, i32 0, i32 5
  store %struct.cv* null, %struct.cv** %cv, align 8
  store %struct.cv* null, %struct.cv** %tmp
  %51 = load %struct.cv*, %struct.cv** %tmp
  store volatile i32 1, i32* @PL_in_eval, align 4
  %52 = load %struct.gv*, %struct.gv** @PL_errgv, align 8
  %sv_any = getelementptr inbounds %struct.gv, %struct.gv* %52, i32 0, i32 0
  %53 = load %struct.xpvgv*, %struct.xpvgv** %sv_any, align 8
  %xgv_gp = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %53, i32 0, i32 7
  %54 = load %struct.gp*, %struct.gp** %xgv_gp, align 8
  %gp_sv = getelementptr inbounds %struct.gp, %struct.gp* %54, i32 0, i32 0
  %55 = load %struct.sv*, %struct.sv** %gp_sv, align 8
  call void @Perl_sv_setpv(%struct.sv* %55, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.11, i32 0, i32 0))
  %56 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %56, %struct.sv*** @PL_stack_sp, align 8
  %57 = load %struct.jmpenv*, %struct.jmpenv** @PL_top_env, align 8
  %je_mustcatch = getelementptr inbounds %struct.jmpenv, %struct.jmpenv* %57, i32 0, i32 3
  %58 = load i8, i8* %je_mustcatch, align 1
  %conv72 = sext i8 %58 to i32
  %cmp73 = icmp eq i32 %conv72, 1
  br i1 %cmp73, label %cond.true.75, label %cond.false.78

cond.true.75:                                     ; preds = %cond.end.27
  %59 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next76 = getelementptr inbounds %struct.op, %struct.op* %59, i32 0, i32 0
  %60 = load %struct.op*, %struct.op** %op_next76, align 8
  %call77 = call %struct.op* @S_docatch(%struct.op* %60)
  br label %cond.end.80

cond.false.78:                                    ; preds = %cond.end.27
  %61 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next79 = getelementptr inbounds %struct.op, %struct.op* %61, i32 0, i32 0
  %62 = load %struct.op*, %struct.op** %op_next79, align 8
  br label %cond.end.80

cond.end.80:                                      ; preds = %cond.false.78, %cond.true.75
  %cond81 = phi %struct.op* [ %call77, %cond.true.75 ], [ %62, %cond.false.78 ]
  ret %struct.op* %cond81
}

; Function Attrs: nounwind uwtable
define %struct.op* @Perl_pp_leavetry() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %mark = alloca %struct.sv**, align 8
  %newsp = alloca %struct.sv**, align 8
  %newpm = alloca %struct.pmop*, align 8
  %retop = alloca %struct.op*, align 8
  %gimme = alloca i32, align 4
  %cx = alloca %struct.context*, align 8
  %optype = alloca i32, align 4
  %markoff = alloca i32, align 4
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %1, i32 0, i32 2
  %2 = load i32, i32* %si_cxix, align 4
  %dec = add nsw i32 %2, -1
  store i32 %dec, i32* %si_cxix, align 4
  %idxprom = sext i32 %2 to i64
  %3 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxstack = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %3, i32 0, i32 1
  %4 = load %struct.context*, %struct.context** %si_cxstack, align 8
  %arrayidx = getelementptr inbounds %struct.context, %struct.context* %4, i64 %idxprom
  store %struct.context* %arrayidx, %struct.context** %cx, align 8
  %5 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %6 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u = getelementptr inbounds %struct.context, %struct.context* %6, i32 0, i32 1
  %cx_blk = bitcast %union.anon* %cx_u to %struct.block*
  %blku_oldsp = getelementptr inbounds %struct.block, %struct.block* %cx_blk, i32 0, i32 0
  %7 = load i32, i32* %blku_oldsp, align 4
  %idx.ext = sext i32 %7 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %5, i64 %idx.ext
  store %struct.sv** %add.ptr, %struct.sv*** %newsp, align 8
  %8 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u1 = getelementptr inbounds %struct.context, %struct.context* %8, i32 0, i32 1
  %cx_blk2 = bitcast %union.anon* %cx_u1 to %struct.block*
  %blku_oldcop = getelementptr inbounds %struct.block, %struct.block* %cx_blk2, i32 0, i32 1
  %9 = load %struct.cop*, %struct.cop** %blku_oldcop, align 8
  store volatile %struct.cop* %9, %struct.cop** @PL_curcop, align 8
  %10 = load i32*, i32** @PL_markstack, align 8
  %11 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u3 = getelementptr inbounds %struct.context, %struct.context* %11, i32 0, i32 1
  %cx_blk4 = bitcast %union.anon* %cx_u3 to %struct.block*
  %blku_oldmarksp = getelementptr inbounds %struct.block, %struct.block* %cx_blk4, i32 0, i32 3
  %12 = load i32, i32* %blku_oldmarksp, align 4
  %idx.ext5 = sext i32 %12 to i64
  %add.ptr6 = getelementptr inbounds i32, i32* %10, i64 %idx.ext5
  store i32* %add.ptr6, i32** @PL_markstack_ptr, align 8
  %13 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u7 = getelementptr inbounds %struct.context, %struct.context* %13, i32 0, i32 1
  %cx_blk8 = bitcast %union.anon* %cx_u7 to %struct.block*
  %blku_oldscopesp = getelementptr inbounds %struct.block, %struct.block* %cx_blk8, i32 0, i32 4
  %14 = load i32, i32* %blku_oldscopesp, align 4
  store i32 %14, i32* @PL_scopestack_ix, align 4
  %15 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u9 = getelementptr inbounds %struct.context, %struct.context* %15, i32 0, i32 1
  %cx_blk10 = bitcast %union.anon* %cx_u9 to %struct.block*
  %blku_oldretsp = getelementptr inbounds %struct.block, %struct.block* %cx_blk10, i32 0, i32 2
  %16 = load i32, i32* %blku_oldretsp, align 4
  store i32 %16, i32* @PL_retstack_ix, align 4
  %17 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u11 = getelementptr inbounds %struct.context, %struct.context* %17, i32 0, i32 1
  %cx_blk12 = bitcast %union.anon* %cx_u11 to %struct.block*
  %blku_oldpm = getelementptr inbounds %struct.block, %struct.block* %cx_blk12, i32 0, i32 5
  %18 = load %struct.pmop*, %struct.pmop** %blku_oldpm, align 8
  store %struct.pmop* %18, %struct.pmop** %newpm, align 8
  %19 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u13 = getelementptr inbounds %struct.context, %struct.context* %19, i32 0, i32 1
  %cx_blk14 = bitcast %union.anon* %cx_u13 to %struct.block*
  %blku_gimme = getelementptr inbounds %struct.block, %struct.block* %cx_blk14, i32 0, i32 6
  %20 = load i8, i8* %blku_gimme, align 1
  %conv = zext i8 %20 to i32
  store i32 %conv, i32* %gimme, align 4
  %21 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u15 = getelementptr inbounds %struct.context, %struct.context* %21, i32 0, i32 1
  %cx_blk16 = bitcast %union.anon* %cx_u15 to %struct.block*
  %blk_u = getelementptr inbounds %struct.block, %struct.block* %cx_blk16, i32 0, i32 7
  %blku_eval = bitcast %union.anon.1* %blk_u to %struct.block_eval*
  %old_in_eval = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval, i32 0, i32 0
  %22 = load i32, i32* %old_in_eval, align 4
  store volatile i32 %22, i32* @PL_in_eval, align 4
  %23 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u17 = getelementptr inbounds %struct.context, %struct.context* %23, i32 0, i32 1
  %cx_blk18 = bitcast %union.anon* %cx_u17 to %struct.block*
  %blk_u19 = getelementptr inbounds %struct.block, %struct.block* %cx_blk18, i32 0, i32 7
  %blku_eval20 = bitcast %union.anon.1* %blk_u19 to %struct.block_eval*
  %old_op_type = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval20, i32 0, i32 1
  %24 = load i32, i32* %old_op_type, align 4
  store i32 %24, i32* %optype, align 4
  %25 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u21 = getelementptr inbounds %struct.context, %struct.context* %25, i32 0, i32 1
  %cx_blk22 = bitcast %union.anon* %cx_u21 to %struct.block*
  %blk_u23 = getelementptr inbounds %struct.block, %struct.block* %cx_blk22, i32 0, i32 7
  %blku_eval24 = bitcast %union.anon.1* %blk_u23 to %struct.block_eval*
  %old_eval_root = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval24, i32 0, i32 3
  %26 = load %struct.op*, %struct.op** %old_eval_root, align 8
  store %struct.op* %26, %struct.op** @PL_eval_root, align 8
  %27 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u25 = getelementptr inbounds %struct.context, %struct.context* %27, i32 0, i32 1
  %cx_blk26 = bitcast %union.anon* %cx_u25 to %struct.block*
  %blk_u27 = getelementptr inbounds %struct.block, %struct.block* %cx_blk26, i32 0, i32 7
  %blku_eval28 = bitcast %union.anon.1* %blk_u27 to %struct.block_eval*
  %old_namesv = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval28, i32 0, i32 2
  %28 = load %struct.sv*, %struct.sv** %old_namesv, align 8
  %tobool = icmp ne %struct.sv* %28, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %29 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u29 = getelementptr inbounds %struct.context, %struct.context* %29, i32 0, i32 1
  %cx_blk30 = bitcast %union.anon* %cx_u29 to %struct.block*
  %blk_u31 = getelementptr inbounds %struct.block, %struct.block* %cx_blk30, i32 0, i32 7
  %blku_eval32 = bitcast %union.anon.1* %blk_u31 to %struct.block_eval*
  %old_namesv33 = getelementptr inbounds %struct.block_eval, %struct.block_eval* %blku_eval32, i32 0, i32 2
  %30 = load %struct.sv*, %struct.sv** %old_namesv33, align 8
  %call = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %30)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %call34 = call %struct.op* @Perl_pop_return()
  store %struct.op* %call34, %struct.op** %retop, align 8
  store i8 0, i8* @PL_tainted, align 1
  %31 = load i32, i32* %gimme, align 4
  %cmp = icmp eq i32 %31, 128
  br i1 %cmp, label %if.then.36, label %if.else

if.then.36:                                       ; preds = %if.end
  %32 = load %struct.sv**, %struct.sv*** %newsp, align 8
  store %struct.sv** %32, %struct.sv*** %sp, align 8
  br label %if.end.74

if.else:                                          ; preds = %if.end
  %33 = load i32, i32* %gimme, align 4
  %cmp37 = icmp eq i32 %33, 0
  br i1 %cmp37, label %if.then.39, label %if.else.63

if.then.39:                                       ; preds = %if.else
  %34 = load %struct.sv**, %struct.sv*** %newsp, align 8
  %add.ptr40 = getelementptr inbounds %struct.sv*, %struct.sv** %34, i64 1
  store %struct.sv** %add.ptr40, %struct.sv*** %mark, align 8
  %35 = load %struct.sv**, %struct.sv*** %mark, align 8
  %36 = load %struct.sv**, %struct.sv*** %sp, align 8
  %cmp41 = icmp ule %struct.sv** %35, %36
  br i1 %cmp41, label %if.then.43, label %if.else.49

if.then.43:                                       ; preds = %if.then.39
  %37 = load %struct.sv**, %struct.sv*** %sp, align 8
  %38 = load %struct.sv*, %struct.sv** %37, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %38, i32 0, i32 2
  %39 = load i32, i32* %sv_flags, align 4
  %and = and i32 %39, 2560
  %tobool44 = icmp ne i32 %and, 0
  br i1 %tobool44, label %if.then.45, label %if.else.46

if.then.45:                                       ; preds = %if.then.43
  %40 = load %struct.sv**, %struct.sv*** %sp, align 8
  %41 = load %struct.sv*, %struct.sv** %40, align 8
  %42 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv* %41, %struct.sv** %42, align 8
  br label %if.end.48

if.else.46:                                       ; preds = %if.then.43
  %43 = load %struct.sv**, %struct.sv*** %sp, align 8
  %44 = load %struct.sv*, %struct.sv** %43, align 8
  %call47 = call %struct.sv* @Perl_sv_mortalcopy(%struct.sv* %44)
  %45 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv* %call47, %struct.sv** %45, align 8
  br label %if.end.48

if.end.48:                                        ; preds = %if.else.46, %if.then.45
  br label %if.end.62

if.else.49:                                       ; preds = %if.then.39
  %46 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %47 = load %struct.sv**, %struct.sv*** %mark, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %46 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %47 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp50 = icmp slt i64 %sub.ptr.div, 0
  br i1 %cmp50, label %if.then.52, label %if.end.61

if.then.52:                                       ; preds = %if.else.49
  %48 = load %struct.sv**, %struct.sv*** %mark, align 8
  %49 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast53 = ptrtoint %struct.sv** %48 to i64
  %sub.ptr.rhs.cast54 = ptrtoint %struct.sv** %49 to i64
  %sub.ptr.sub55 = sub i64 %sub.ptr.lhs.cast53, %sub.ptr.rhs.cast54
  %sub.ptr.div56 = sdiv exact i64 %sub.ptr.sub55, 8
  %conv57 = trunc i64 %sub.ptr.div56 to i32
  store i32 %conv57, i32* %markoff, align 4
  %50 = load %struct.sv**, %struct.sv*** %sp, align 8
  %51 = load %struct.sv**, %struct.sv*** %mark, align 8
  %call58 = call %struct.sv** @Perl_stack_grow(%struct.sv** %50, %struct.sv** %51, i32 0)
  store %struct.sv** %call58, %struct.sv*** %sp, align 8
  %52 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %53 = load i32, i32* %markoff, align 4
  %idx.ext59 = sext i32 %53 to i64
  %add.ptr60 = getelementptr inbounds %struct.sv*, %struct.sv** %52, i64 %idx.ext59
  store %struct.sv** %add.ptr60, %struct.sv*** %mark, align 8
  br label %if.end.61

if.end.61:                                        ; preds = %if.then.52, %if.else.49
  %54 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %54, align 8
  br label %if.end.62

if.end.62:                                        ; preds = %if.end.61, %if.end.48
  %55 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv** %55, %struct.sv*** %sp, align 8
  br label %if.end.73

if.else.63:                                       ; preds = %if.else
  %56 = load %struct.sv**, %struct.sv*** %newsp, align 8
  %add.ptr64 = getelementptr inbounds %struct.sv*, %struct.sv** %56, i64 1
  store %struct.sv** %add.ptr64, %struct.sv*** %mark, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else.63
  %57 = load %struct.sv**, %struct.sv*** %mark, align 8
  %58 = load %struct.sv**, %struct.sv*** %sp, align 8
  %cmp65 = icmp ule %struct.sv** %57, %58
  br i1 %cmp65, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %59 = load %struct.sv**, %struct.sv*** %mark, align 8
  %60 = load %struct.sv*, %struct.sv** %59, align 8
  %sv_flags67 = getelementptr inbounds %struct.sv, %struct.sv* %60, i32 0, i32 2
  %61 = load i32, i32* %sv_flags67, align 4
  %and68 = and i32 %61, 2560
  %tobool69 = icmp ne i32 %and68, 0
  br i1 %tobool69, label %if.end.72, label %if.then.70

if.then.70:                                       ; preds = %for.body
  %62 = load %struct.sv**, %struct.sv*** %mark, align 8
  %63 = load %struct.sv*, %struct.sv** %62, align 8
  %call71 = call %struct.sv* @Perl_sv_mortalcopy(%struct.sv* %63)
  %64 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv* %call71, %struct.sv** %64, align 8
  store i8 0, i8* @PL_tainted, align 1
  br label %if.end.72

if.end.72:                                        ; preds = %if.then.70, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.72
  %65 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %65, i32 1
  store %struct.sv** %incdec.ptr, %struct.sv*** %mark, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.73

if.end.73:                                        ; preds = %for.end, %if.end.62
  br label %if.end.74

if.end.74:                                        ; preds = %if.end.73, %if.then.36
  %66 = load %struct.pmop*, %struct.pmop** %newpm, align 8
  store %struct.pmop* %66, %struct.pmop** @PL_curpm, align 8
  call void @Perl_pop_scope()
  %67 = load %struct.gv*, %struct.gv** @PL_errgv, align 8
  %sv_any = getelementptr inbounds %struct.gv, %struct.gv* %67, i32 0, i32 0
  %68 = load %struct.xpvgv*, %struct.xpvgv** %sv_any, align 8
  %xgv_gp = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %68, i32 0, i32 7
  %69 = load %struct.gp*, %struct.gp** %xgv_gp, align 8
  %gp_sv = getelementptr inbounds %struct.gp, %struct.gp* %69, i32 0, i32 0
  %70 = load %struct.sv*, %struct.sv** %gp_sv, align 8
  call void @Perl_sv_setpv(%struct.sv* %70, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.11, i32 0, i32 0))
  %71 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %71, %struct.sv*** @PL_stack_sp, align 8
  %72 = load %struct.op*, %struct.op** %retop, align 8
  ret %struct.op* %72
}

declare i8* @Perl_custom_op_name(%struct.op*) #1

declare %struct.av* @Perl_pad_new(i32) #1

declare void @Perl_save_mortalizesv(%struct.sv*) #1

declare i32 @Perl_yyparse() #1

declare void @Perl_op_free(%struct.op*) #1

declare void @Perl_save_freeop(%struct.op*) #1

declare %struct.op* @Perl_scalar(%struct.op*) #1

declare %struct.op* @Perl_scalarvoid(%struct.op*) #1

declare %struct.op* @Perl_list(%struct.op*) #1

declare %struct.sv* @Perl_newSVpvf(i8*, ...) #1

declare i32 @stat(i8*, %struct.stat*) #1

; Function Attrs: returns_twice
declare i32 @__sigsetjmp(%struct.__jmp_buf_tag*, i32) #3

; Function Attrs: nounwind uwtable
define internal i8* @S_docatch_body() #0 {
entry:
  %0 = load i32 ()*, i32 ()** @PL_runops, align 8
  %call = call i32 %0()
  ret i8* null
}

; Function Attrs: noreturn
declare void @siglongjmp(%struct.__jmp_buf_tag*, i32) #4

; Function Attrs: noreturn
declare void @exit(i32) #4

declare %struct.sv** @Perl_av_store(%struct.av*, i32, %struct.sv*) #1

declare i32 @Perl_filter_read(i32, %struct.sv*, i32) #1

declare void @Perl_filter_del(i32 (i32, %struct.sv*, i32)*) #1

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }
attributes #3 = { returns_twice "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { returns_twice }
attributes #6 = { noreturn }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
