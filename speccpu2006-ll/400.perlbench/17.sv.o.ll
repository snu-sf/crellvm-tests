; ModuleID = 'sv.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sv = type { i8*, i32, i32 }
%struct.xpv = type { i8*, i64, i64 }
%struct.xrv = type { %struct.sv* }
%struct.xpviv = type { i8*, i64, i64, i64 }
%struct.xpvnv = type { i8*, i64, i64, i64, double }
%struct.xpvcv = type { i8*, i64, i64, i64, double, %struct.magic*, %struct.hv*, %struct.hv*, %struct.op*, %struct.op*, void (%struct.cv*)*, %union.any, %struct.gv*, i8*, i64, %struct.av*, %struct.cv*, i16, i32 }
%struct.magic = type { %struct.magic*, %struct.mgvtbl*, i16, i8, i8, %struct.sv*, i8*, i32 }
%struct.mgvtbl = type { i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*, %struct.sv*, i8*, i32)*, i32 (%struct.magic*, %struct.clone_params*)* }
%struct.clone_params = type { %struct.av*, i64, %struct.interpreter* }
%struct.interpreter = type { i8 }
%struct.hv = type { %struct.xpvhv*, i32, i32 }
%struct.xpvhv = type { i8*, i64, i64, i64, double, %struct.magic*, %struct.hv*, i32, %struct.he*, %struct.pmop*, i8* }
%struct.he = type { %struct.he*, %struct.hek*, %struct.sv* }
%struct.hek = type { i32, i32, [1 x i8] }
%struct.pmop = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i16, i8, i8, %struct.op*, %struct.op*, %struct.op*, %struct.op*, %struct.pmop*, %struct.regexp*, i32, i32, i8, %struct.hv* }
%struct.regexp = type { i32*, i32*, %struct.regnode*, %struct.reg_substr_data*, i8*, %struct.reg_data*, i8*, i32*, i32, i32, i32, i32, i32, i32, i32, i32, [1 x %struct.regnode] }
%struct.regnode = type { i8, i8, i16 }
%struct.reg_substr_data = type { [3 x %struct.reg_substr_datum] }
%struct.reg_substr_datum = type { i32, i32, %struct.sv*, %struct.sv* }
%struct.reg_data = type { i32, i8*, [1 x i8*] }
%struct.op = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i16, i8, i8 }
%union.any = type { i8* }
%struct.gv = type { %struct.xpvgv*, i32, i32 }
%struct.xpvgv = type { i8*, i64, i64, i64, double, %struct.magic*, %struct.hv*, %struct.gp*, i8*, i64, %struct.hv*, i8 }
%struct.gp = type { %struct.sv*, i32, %struct.io*, %struct.cv*, %struct.av*, %struct.hv*, %struct.gv*, %struct.cv*, i32, i32, i32, i8* }
%struct.io = type { %struct.xpvio*, i32, i32 }
%struct.xpvio = type { i8*, i64, i64, i64, double, %struct.magic*, %struct.hv*, %struct._PerlIO**, %struct._PerlIO**, %union.anon, i64, i64, i64, i64, i8*, %struct.gv*, i8*, %struct.gv*, i8*, %struct.gv*, i16, i8, i8 }
%struct._PerlIO = type opaque
%union.anon = type { %struct.__dirstream* }
%struct.__dirstream = type opaque
%struct.av = type { %struct.xpvav*, i32, i32 }
%struct.xpvav = type { i8*, i64, i64, i64, double, %struct.magic*, %struct.hv*, %struct.sv**, %struct.sv*, i8 }
%struct.cv = type { %struct.xpvcv*, i32, i32 }
%struct.xpvmg = type { i8*, i64, i64, i64, double, %struct.magic*, %struct.hv* }
%struct.xpvlv = type { i8*, i64, i64, i64, double, %struct.magic*, %struct.hv*, i64, i64, %struct.sv*, i8 }
%struct.xpvbm = type { i8*, i64, i64, i64, double, %struct.magic*, %struct.hv*, i32, i16, i8 }
%struct.cop = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i16, i8, i8, i8*, %struct.hv*, %struct.gv*, i32, i32, i32, %struct.sv*, %struct.sv* }
%struct.stackinfo = type { %struct.av*, %struct.context*, i32, i32, i32, %struct.stackinfo*, %struct.stackinfo*, i32 }
%struct.context = type { i32, %union.anon.0 }
%union.anon.0 = type { %struct.block }
%struct.block = type { i32, %struct.cop*, i32, i32, i32, %struct.pmop*, i8, %union.anon.1 }
%union.anon.1 = type { %struct.block_loop }
%struct.block_loop = type { i8*, i32, %struct.op*, %struct.op*, %struct.op*, %struct.sv**, %struct.sv*, %struct.sv*, %struct.av*, i64, i64 }
%struct.xpvuv = type { i8*, i64, i64, i64 }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.timespec = type { i64, i64 }

@PL_sv_arenaroot = external global %struct.sv*, align 8
@PL_sv_root = external global %struct.sv*, align 8
@PL_in_clean_objs = external global i8, align 1
@PL_in_clean_all = external global i8, align 1
@PL_xiv_arenaroot = external global %struct.xpv*, align 8
@PL_xiv_root = external global i64*, align 8
@PL_xnv_arenaroot = external global %struct.xpv*, align 8
@PL_xnv_root = external global double*, align 8
@PL_xrv_arenaroot = external global %struct.xpv*, align 8
@PL_xrv_root = external global %struct.xrv*, align 8
@PL_xpv_arenaroot = external global %struct.xpv*, align 8
@PL_xpv_root = external global %struct.xpv*, align 8
@PL_xpviv_arenaroot = external global %struct.xpviv*, align 8
@PL_xpviv_root = external global %struct.xpviv*, align 8
@PL_xpvnv_arenaroot = external global %struct.xpvnv*, align 8
@PL_xpvnv_root = external global %struct.xpvnv*, align 8
@PL_xpvcv_arenaroot = external global %struct.xpvcv*, align 8
@PL_xpvcv_root = external global %struct.xpvcv*, align 8
@PL_xpvav_arenaroot = external global %struct.xpvav*, align 8
@PL_xpvav_root = external global %struct.xpvav*, align 8
@PL_xpvhv_arenaroot = external global %struct.xpvhv*, align 8
@PL_xpvhv_root = external global %struct.xpvhv*, align 8
@PL_xpvmg_arenaroot = external global %struct.xpvmg*, align 8
@PL_xpvmg_root = external global %struct.xpvmg*, align 8
@PL_xpvlv_arenaroot = external global %struct.xpvlv*, align 8
@PL_xpvlv_root = external global %struct.xpvlv*, align 8
@PL_xpvbm_arenaroot = external global %struct.xpvbm*, align 8
@PL_xpvbm_root = external global %struct.xpvbm*, align 8
@PL_he_arenaroot = external global %struct.xpv*, align 8
@PL_he_root = external global %struct.he*, align 8
@PL_nice_chunk = external global i8*, align 8
@PL_nice_chunk_size = external global i32, align 4
@PL_op = external global %struct.op*, align 8
@PL_warn_uninit = external constant [0 x i8], align 1
@.str = private unnamed_addr constant [5 x i8] c" in \00", align 1
@PL_op_desc = external global [0 x i8*], align 8
@.str.1 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.2 = private unnamed_addr constant [34 x i8] c"Can't upgrade that kind of scalar\00", align 1
@.str.3 = private unnamed_addr constant [23 x i8] c"Can't upgrade to undef\00", align 1
@.str.4 = private unnamed_addr constant [33 x i8] c"Can't coerce %s to integer in %s\00", align 1
@PL_tainting = external global i8, align 1
@PL_tainted = external global i8, align 1
@.str.5 = private unnamed_addr constant [32 x i8] c"Can't coerce %s to number in %s\00", align 1
@PL_op_name = external global [0 x i8*], align 8
@PL_curcop = external global %struct.cop*, align 8
@PL_dowarn = external global i8, align 1
@PL_localizing = external global i32, align 4
@PL_sv_undef = external global %struct.sv, align 8
@.str.6 = private unnamed_addr constant [107 x i8] c"sv_2iv assumed (U_V(fabs((double)SvNVX(sv))) < (UV)IV_MAX) but SvNVX(sv)=%g U_V is 0x%lx, IV_MAX is 0x%lx\0A\00", align 1
@.str.7 = private unnamed_addr constant [107 x i8] c"sv_2uv assumed (U_V(fabs((double)SvNVX(sv))) < (UV)IV_MAX) but SvNVX(sv)=%g U_V is 0x%lx, IV_MAX is 0x%lx\0A\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"%lu\00", align 1
@.str.9 = private unnamed_addr constant [4 x i8] c"%ld\00", align 1
@.str.10 = private unnamed_addr constant [8 x i8] c"NULLREF\00", align 1
@.str.11 = private unnamed_addr constant [5 x i8] c"msix\00", align 1
@.str.12 = private unnamed_addr constant [3 x i8] c"(?\00", align 1
@.str.13 = private unnamed_addr constant [2 x i8] c":\00", align 1
@PL_reginterp_cnt = external global i32, align 4
@.str.14 = private unnamed_addr constant [4 x i8] c"REF\00", align 1
@.str.15 = private unnamed_addr constant [7 x i8] c"SCALAR\00", align 1
@.str.16 = private unnamed_addr constant [7 x i8] c"LVALUE\00", align 1
@.str.17 = private unnamed_addr constant [6 x i8] c"ARRAY\00", align 1
@.str.18 = private unnamed_addr constant [5 x i8] c"HASH\00", align 1
@.str.19 = private unnamed_addr constant [5 x i8] c"CODE\00", align 1
@.str.20 = private unnamed_addr constant [5 x i8] c"GLOB\00", align 1
@.str.21 = private unnamed_addr constant [7 x i8] c"FORMAT\00", align 1
@.str.22 = private unnamed_addr constant [3 x i8] c"IO\00", align 1
@.str.23 = private unnamed_addr constant [8 x i8] c"UNKNOWN\00", align 1
@.str.24 = private unnamed_addr constant [13 x i8] c"%s=%s(0x%lx)\00", align 1
@.str.25 = private unnamed_addr constant [9 x i8] c"__ANON__\00", align 1
@.str.26 = private unnamed_addr constant [10 x i8] c"%s(0x%lx)\00", align 1
@PL_Xpv = external global %struct.xpv*, align 8
@PL_encoding = external global %struct.sv*, align 8
@.str.27 = private unnamed_addr constant [21 x i8] c"Wide character in %s\00", align 1
@.str.28 = private unnamed_addr constant [15 x i8] c"Wide character\00", align 1
@PL_no_modify = external constant [0 x i8], align 1
@.str.29 = private unnamed_addr constant [25 x i8] c"Bizarre copy of %s in %s\00", align 1
@.str.30 = private unnamed_addr constant [19 x i8] c"Bizarre copy of %s\00", align 1
@PL_Sv = external global %struct.sv*, align 8
@PL_curstackinfo = external global %struct.stackinfo*, align 8
@PL_sortcop = external global %struct.op*, align 8
@.str.31 = private unnamed_addr constant [41 x i8] c"Can't redefine active sort subroutine %s\00", align 1
@PL_sub_generation = external global i32, align 4
@.str.32 = private unnamed_addr constant [37 x i8] c"Constant subroutine %s::%s redefined\00", align 1
@.str.33 = private unnamed_addr constant [28 x i8] c"Subroutine %s::%s redefined\00", align 1
@.str.34 = private unnamed_addr constant [37 x i8] c"Undefined value assigned to typeglob\00", align 1
@.str.35 = private unnamed_addr constant [45 x i8] c"panic: sv_setpvn called with negative strlen\00", align 1
@PL_compiling = external global %struct.cop, align 8
@PL_sv_count = external global i32, align 4
@PL_vtbl_sv = external global %struct.mgvtbl, align 8
@PL_vtbl_amagic = external global %struct.mgvtbl, align 8
@PL_vtbl_amagicelem = external global %struct.mgvtbl, align 8
@PL_vtbl_ovrld = external global %struct.mgvtbl, align 8
@PL_vtbl_bm = external global %struct.mgvtbl, align 8
@PL_vtbl_regdata = external global %struct.mgvtbl, align 8
@PL_vtbl_regdatum = external global %struct.mgvtbl, align 8
@PL_vtbl_env = external global %struct.mgvtbl, align 8
@PL_vtbl_fm = external global %struct.mgvtbl, align 8
@PL_vtbl_envelem = external global %struct.mgvtbl, align 8
@PL_vtbl_mglob = external global %struct.mgvtbl, align 8
@PL_vtbl_isa = external global %struct.mgvtbl, align 8
@PL_vtbl_isaelem = external global %struct.mgvtbl, align 8
@PL_vtbl_nkeys = external global %struct.mgvtbl, align 8
@PL_vtbl_dbline = external global %struct.mgvtbl, align 8
@PL_vtbl_pack = external global %struct.mgvtbl, align 8
@PL_vtbl_packelem = external global %struct.mgvtbl, align 8
@PL_vtbl_regexp = external global %struct.mgvtbl, align 8
@PL_vtbl_sig = external global %struct.mgvtbl, align 8
@PL_vtbl_sigelem = external global %struct.mgvtbl, align 8
@PL_vtbl_taint = external global %struct.mgvtbl, align 8
@PL_vtbl_uvar = external global %struct.mgvtbl, align 8
@PL_vtbl_vec = external global %struct.mgvtbl, align 8
@PL_vtbl_utf8 = external global %struct.mgvtbl, align 8
@PL_vtbl_substr = external global %struct.mgvtbl, align 8
@PL_vtbl_defelem = external global %struct.mgvtbl, align 8
@PL_vtbl_glob = external global %struct.mgvtbl, align 8
@PL_vtbl_arylen = external global %struct.mgvtbl, align 8
@PL_vtbl_pos = external global %struct.mgvtbl, align 8
@PL_vtbl_backref = external global %struct.mgvtbl, align 8
@.str.36 = private unnamed_addr constant [43 x i8] c"Don't know how to handle magic of type \5C%o\00", align 1
@.str.37 = private unnamed_addr constant [28 x i8] c"Can't weaken a nonreference\00", align 1
@.str.38 = private unnamed_addr constant [26 x i8] c"Reference is already weak\00", align 1
@.str.39 = private unnamed_addr constant [36 x i8] c"Can't modify non-existent substring\00", align 1
@.str.40 = private unnamed_addr constant [17 x i8] c"panic: sv_insert\00", align 1
@.str.41 = private unnamed_addr constant [35 x i8] c"Reference miscount in sv_replace()\00", align 1
@PL_defstash = external global %struct.hv*, align 8
@PL_stack_sp = external global %struct.sv**, align 8
@PL_stack_base = external global %struct.sv**, align 8
@PL_curstack = external global %struct.av*, align 8
@PL_stack_max = external global %struct.sv**, align 8
@PL_markstack_ptr = external global i32*, align 8
@PL_markstack_max = external global i32*, align 8
@PL_stderrgv = external global %struct.gv*, align 8
@.str.42 = private unnamed_addr constant [17 x i8] c"panic: POPSTACK\0A\00", align 1
@.str.43 = private unnamed_addr constant [50 x i8] c"DESTROY created new reference to dead object '%s'\00", align 1
@PL_sv_objcount = external global i32, align 4
@PL_hv_fetch_ent_mh = external global %struct.he*, align 8
@PL_sv_yes = external global %struct.sv, align 8
@PL_sv_no = external global %struct.sv, align 8
@PL_sv_placeholder = external global %struct.sv, align 8
@.str.44 = private unnamed_addr constant [46 x i8] c"Attempt to free unreferenced scalar: SV 0x%lx\00", align 1
@PL_utf8skip = external constant [0 x i8], align 1
@.str.45 = private unnamed_addr constant [35 x i8] c"panic: sv_pos_b2u: bad byte offset\00", align 1
@.str.46 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@PL_rs = external global %struct.sv*, align 8
@.str.47 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1
@.str.48 = private unnamed_addr constant [21 x i8] c"Wide character in $/\00", align 1
@PL_tmps_ix = external global i32, align 4
@PL_tmps_max = external global i32, align 4
@PL_tmps_stack = external global %struct.sv**, align 8
@.str.49 = private unnamed_addr constant [40 x i8] c"semi-panic: attempt to dup freed string\00", align 1
@PL_envgv = external global %struct.gv*, align 8
@environ = external global i8**, align 8
@.str.50 = private unnamed_addr constant [19 x i8] c"Bad filehandle: %s\00", align 1
@PL_no_usym = external constant [0 x i8], align 1
@.str.51 = private unnamed_addr constant [11 x i8] c"filehandle\00", align 1
@.str.52 = private unnamed_addr constant [19 x i8] c"Bad filehandle: %_\00", align 1
@PL_amagic_generation = external global i64, align 8
@.str.53 = private unnamed_addr constant [50 x i8] c"Overloaded dereference did not return a reference\00", align 1
@.str.54 = private unnamed_addr constant [27 x i8] c"Not a subroutine reference\00", align 1
@.str.55 = private unnamed_addr constant [32 x i8] c"Unable to create sub named \22%_\22\00", align 1
@.str.56 = private unnamed_addr constant [32 x i8] c"Can't coerce %s to string in %s\00", align 1
@.str.57 = private unnamed_addr constant [32 x i8] c"Can't bless non-reference value\00", align 1
@Perl_sv_vcatpvfn.nullstr = internal global [7 x i8] c"(null)\00", align 1
@.str.58 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.59 = private unnamed_addr constant [17 x i8] c"0123456789ABCDEF\00", align 1
@.str.60 = private unnamed_addr constant [17 x i8] c"0123456789abcdef\00", align 1
@.str.61 = private unnamed_addr constant [13 x i8] c"panic: frexp\00", align 1
@PL_efloatsize = external global i64, align 8
@PL_efloatbuf = external global i8*, align 8
@Perl_sv_vcatpvfn.prifldbl = internal constant [3 x i8] c"Lf\00", align 1
@.str.62 = private unnamed_addr constant [33 x i8] c"Invalid conversion in %sprintf: \00", align 1
@.str.63 = private unnamed_addr constant [2 x i8] c"s\00", align 1
@.str.64 = private unnamed_addr constant [7 x i8] c"\22%%%c\22\00", align 1
@.str.65 = private unnamed_addr constant [11 x i8] c"\22%%\5C%03lo\22\00", align 1
@.str.66 = private unnamed_addr constant [14 x i8] c"end of string\00", align 1
@.str.67 = private unnamed_addr constant [3 x i8] c"%_\00", align 1
@.str.68 = private unnamed_addr constant [46 x i8] c"Newline in left-justified string for %sprintf\00", align 1
@PL_tmps_floor = external global i32, align 4
@.str.69 = private unnamed_addr constant [7 x i8] c"decode\00", align 1
@.str.70 = private unnamed_addr constant [11 x i8] c"cat_decode\00", align 1
@.str.71 = private unnamed_addr constant [34 x i8] c"Invalid argument to sv_cat_decode\00", align 1
@.str.72 = private unnamed_addr constant [34 x i8] c"Argument \22%s\22 isn't numeric in %s\00", align 1
@.str.73 = private unnamed_addr constant [28 x i8] c"Argument \22%s\22 isn't numeric\00", align 1
@.str.74 = private unnamed_addr constant [19 x i8] c"panic: del_backref\00", align 1

; Function Attrs: nounwind uwtable
define void @Perl_sv_add_arena(i8* %ptr, i32 %size, i32 %flags) #0 {
entry:
  %ptr.addr = alloca i8*, align 8
  %size.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  %sva = alloca %struct.sv*, align 8
  %sv = alloca %struct.sv*, align 8
  %svend = alloca %struct.sv*, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i32 %size, i32* %size.addr, align 4
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = bitcast i8* %0 to %struct.sv*
  store %struct.sv* %1, %struct.sv** %sva, align 8
  %2 = load %struct.sv*, %struct.sv** @PL_sv_arenaroot, align 8
  %3 = bitcast %struct.sv* %2 to i8*
  %4 = load %struct.sv*, %struct.sv** %sva, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 0
  store i8* %3, i8** %sv_any, align 8
  %5 = load i32, i32* %size.addr, align 4
  %conv = zext i32 %5 to i64
  %div = udiv i64 %conv, 16
  %conv1 = trunc i64 %div to i32
  %6 = load %struct.sv*, %struct.sv** %sva, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 1
  store i32 %conv1, i32* %sv_refcnt, align 4
  %7 = load i32, i32* %flags.addr, align 4
  %8 = load %struct.sv*, %struct.sv** %sva, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 2
  store i32 %7, i32* %sv_flags, align 4
  %9 = load %struct.sv*, %struct.sv** %sva, align 8
  store %struct.sv* %9, %struct.sv** @PL_sv_arenaroot, align 8
  %10 = load %struct.sv*, %struct.sv** %sva, align 8
  %add.ptr = getelementptr inbounds %struct.sv, %struct.sv* %10, i64 1
  store %struct.sv* %add.ptr, %struct.sv** @PL_sv_root, align 8
  %11 = load %struct.sv*, %struct.sv** %sva, align 8
  %sv_refcnt2 = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 1
  %12 = load i32, i32* %sv_refcnt2, align 4
  %sub = sub i32 %12, 1
  %idxprom = zext i32 %sub to i64
  %13 = load %struct.sv*, %struct.sv** %sva, align 8
  %arrayidx = getelementptr inbounds %struct.sv, %struct.sv* %13, i64 %idxprom
  store %struct.sv* %arrayidx, %struct.sv** %svend, align 8
  %14 = load %struct.sv*, %struct.sv** %sva, align 8
  %add.ptr3 = getelementptr inbounds %struct.sv, %struct.sv* %14, i64 1
  store %struct.sv* %add.ptr3, %struct.sv** %sv, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %15 = load %struct.sv*, %struct.sv** %sv, align 8
  %16 = load %struct.sv*, %struct.sv** %svend, align 8
  %cmp = icmp ult %struct.sv* %15, %16
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %17 = load %struct.sv*, %struct.sv** %sv, align 8
  %add.ptr5 = getelementptr inbounds %struct.sv, %struct.sv* %17, i64 1
  %18 = bitcast %struct.sv* %add.ptr5 to i8*
  %19 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any6 = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 0
  store i8* %18, i8** %sv_any6, align 8
  %20 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_refcnt7 = getelementptr inbounds %struct.sv, %struct.sv* %20, i32 0, i32 1
  store i32 0, i32* %sv_refcnt7, align 4
  %21 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags8 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 2
  store i32 255, i32* %sv_flags8, align 4
  %22 = load %struct.sv*, %struct.sv** %sv, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv, %struct.sv* %22, i32 1
  store %struct.sv* %incdec.ptr, %struct.sv** %sv, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %23 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any9 = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 0
  store i8* null, i8** %sv_any9, align 8
  %24 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags10 = getelementptr inbounds %struct.sv, %struct.sv* %24, i32 0, i32 2
  store i32 255, i32* %sv_flags10, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define void @Perl_sv_report_used() #0 {
entry:
  ret void
}

; Function Attrs: nounwind uwtable
define void @Perl_sv_clean_objs() #0 {
entry:
  store i8 1, i8* @PL_in_clean_objs, align 1
  %call = call i32 @S_visit(void (%struct.sv*)* @do_clean_objs, i32 524288, i32 524288)
  %call1 = call i32 @S_visit(void (%struct.sv*)* @do_clean_named_objs, i32 13, i32 255)
  store i8 0, i8* @PL_in_clean_objs, align 1
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @S_visit(void (%struct.sv*)* %f, i32 %flags, i32 %mask) #0 {
entry:
  %f.addr = alloca void (%struct.sv*)*, align 8
  %flags.addr = alloca i32, align 4
  %mask.addr = alloca i32, align 4
  %sva = alloca %struct.sv*, align 8
  %sv = alloca %struct.sv*, align 8
  %svend = alloca %struct.sv*, align 8
  %visited = alloca i32, align 4
  store void (%struct.sv*)* %f, void (%struct.sv*)** %f.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  store i32 %mask, i32* %mask.addr, align 4
  store i32 0, i32* %visited, align 4
  %0 = load %struct.sv*, %struct.sv** @PL_sv_arenaroot, align 8
  store %struct.sv* %0, %struct.sv** %sva, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc.10, %entry
  %1 = load %struct.sv*, %struct.sv** %sva, align 8
  %tobool = icmp ne %struct.sv* %1, null
  br i1 %tobool, label %for.body, label %for.end.11

for.body:                                         ; preds = %for.cond
  %2 = load %struct.sv*, %struct.sv** %sva, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 1
  %3 = load i32, i32* %sv_refcnt, align 4
  %idxprom = zext i32 %3 to i64
  %4 = load %struct.sv*, %struct.sv** %sva, align 8
  %arrayidx = getelementptr inbounds %struct.sv, %struct.sv* %4, i64 %idxprom
  store %struct.sv* %arrayidx, %struct.sv** %svend, align 8
  %5 = load %struct.sv*, %struct.sv** %sva, align 8
  %add.ptr = getelementptr inbounds %struct.sv, %struct.sv* %5, i64 1
  store %struct.sv* %add.ptr, %struct.sv** %sv, align 8
  br label %for.cond.1

for.cond.1:                                       ; preds = %for.inc, %for.body
  %6 = load %struct.sv*, %struct.sv** %sv, align 8
  %7 = load %struct.sv*, %struct.sv** %svend, align 8
  %cmp = icmp ult %struct.sv* %6, %7
  br i1 %cmp, label %for.body.2, label %for.end

for.body.2:                                       ; preds = %for.cond.1
  %8 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 2
  %9 = load i32, i32* %sv_flags, align 4
  %and = and i32 %9, 255
  %cmp3 = icmp ne i32 %and, 255
  br i1 %cmp3, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body.2
  %10 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags4 = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags4, align 4
  %12 = load i32, i32* %mask.addr, align 4
  %and5 = and i32 %11, %12
  %13 = load i32, i32* %flags.addr, align 4
  %cmp6 = icmp eq i32 %and5, %13
  br i1 %cmp6, label %land.lhs.true.7, label %if.end

land.lhs.true.7:                                  ; preds = %land.lhs.true
  %14 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_refcnt8 = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 1
  %15 = load i32, i32* %sv_refcnt8, align 4
  %tobool9 = icmp ne i32 %15, 0
  br i1 %tobool9, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true.7
  %16 = load void (%struct.sv*)*, void (%struct.sv*)** %f.addr, align 8
  %17 = load %struct.sv*, %struct.sv** %sv, align 8
  call void %16(%struct.sv* %17)
  %18 = load i32, i32* %visited, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %visited, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true.7, %land.lhs.true, %for.body.2
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %19 = load %struct.sv*, %struct.sv** %sv, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 1
  store %struct.sv* %incdec.ptr, %struct.sv** %sv, align 8
  br label %for.cond.1

for.end:                                          ; preds = %for.cond.1
  br label %for.inc.10

for.inc.10:                                       ; preds = %for.end
  %20 = load %struct.sv*, %struct.sv** %sva, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %20, i32 0, i32 0
  %21 = load i8*, i8** %sv_any, align 8
  %22 = bitcast i8* %21 to %struct.sv*
  store %struct.sv* %22, %struct.sv** %sva, align 8
  br label %for.cond

for.end.11:                                       ; preds = %for.cond
  %23 = load i32, i32* %visited, align 4
  ret i32 %23
}

; Function Attrs: nounwind uwtable
define internal void @do_clean_objs(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %rv = alloca %struct.sv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 524288
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.lhs.true, label %if.end.15

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 0
  %3 = load i8*, i8** %sv_any, align 8
  %4 = bitcast i8* %3 to %struct.xrv*
  %xrv_rv = getelementptr inbounds %struct.xrv, %struct.xrv* %4, i32 0, i32 0
  %5 = load %struct.sv*, %struct.sv** %xrv_rv, align 8
  store %struct.sv* %5, %struct.sv** %rv, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 2
  %6 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %6, 4096
  %tobool3 = icmp ne i32 %and2, 0
  br i1 %tobool3, label %if.then, label %if.end.15

if.then:                                          ; preds = %land.lhs.true
  %7 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags4 = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 2
  %8 = load i32, i32* %sv_flags4, align 4
  %and5 = and i32 %8, -2146959360
  %cmp = icmp eq i32 %and5, -2146959360
  br i1 %cmp, label %if.then.6, label %if.else

if.then.6:                                        ; preds = %if.then
  %9 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @S_sv_del_backref(%struct.sv* %9)
  %10 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags7 = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags7, align 4
  %and8 = and i32 %11, 2146959359
  store i32 %and8, i32* %sv_flags7, align 4
  %12 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any9 = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 0
  %13 = load i8*, i8** %sv_any9, align 8
  %14 = bitcast i8* %13 to %struct.xrv*
  %xrv_rv10 = getelementptr inbounds %struct.xrv, %struct.xrv* %14, i32 0, i32 0
  store %struct.sv* null, %struct.sv** %xrv_rv10, align 8
  br label %if.end

if.else:                                          ; preds = %if.then
  %15 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags11 = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 2
  %16 = load i32, i32* %sv_flags11, align 4
  %and12 = and i32 %16, -268959745
  store i32 %and12, i32* %sv_flags11, align 4
  %17 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any13 = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 0
  %18 = load i8*, i8** %sv_any13, align 8
  %19 = bitcast i8* %18 to %struct.xrv*
  %xrv_rv14 = getelementptr inbounds %struct.xrv, %struct.xrv* %19, i32 0, i32 0
  store %struct.sv* null, %struct.sv** %xrv_rv14, align 8
  %20 = load %struct.sv*, %struct.sv** %rv, align 8
  call void @Perl_sv_free(%struct.sv* %20)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.6
  br label %if.end.15

if.end.15:                                        ; preds = %if.end, %land.lhs.true, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @do_clean_named_objs(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 255
  %cmp = icmp eq i32 %and, 13
  br i1 %cmp, label %land.lhs.true, label %if.end.71

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 0
  %3 = load i8*, i8** %sv_any, align 8
  %4 = bitcast i8* %3 to %struct.xpvgv*
  %xgv_gp = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %4, i32 0, i32 7
  %5 = load %struct.gp*, %struct.gp** %xgv_gp, align 8
  %tobool = icmp ne %struct.gp* %5, null
  br i1 %tobool, label %if.then, label %if.end.71

if.then:                                          ; preds = %land.lhs.true
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any1 = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 0
  %7 = load i8*, i8** %sv_any1, align 8
  %8 = bitcast i8* %7 to %struct.xpvgv*
  %xgv_gp2 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %8, i32 0, i32 7
  %9 = load %struct.gp*, %struct.gp** %xgv_gp2, align 8
  %gp_sv = getelementptr inbounds %struct.gp, %struct.gp* %9, i32 0, i32 0
  %10 = load %struct.sv*, %struct.sv** %gp_sv, align 8
  %sv_flags3 = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags3, align 4
  %and4 = and i32 %11, 4096
  %tobool5 = icmp ne i32 %and4, 0
  br i1 %tobool5, label %if.then.69, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then
  %12 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any6 = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 0
  %13 = load i8*, i8** %sv_any6, align 8
  %14 = bitcast i8* %13 to %struct.xpvgv*
  %xgv_gp7 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %14, i32 0, i32 7
  %15 = load %struct.gp*, %struct.gp** %xgv_gp7, align 8
  %gp_av = getelementptr inbounds %struct.gp, %struct.gp* %15, i32 0, i32 4
  %16 = load %struct.av*, %struct.av** %gp_av, align 8
  %tobool8 = icmp ne %struct.av* %16, null
  br i1 %tobool8, label %land.lhs.true.9, label %lor.lhs.false.16

land.lhs.true.9:                                  ; preds = %lor.lhs.false
  %17 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any10 = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 0
  %18 = load i8*, i8** %sv_any10, align 8
  %19 = bitcast i8* %18 to %struct.xpvgv*
  %xgv_gp11 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %19, i32 0, i32 7
  %20 = load %struct.gp*, %struct.gp** %xgv_gp11, align 8
  %gp_av12 = getelementptr inbounds %struct.gp, %struct.gp* %20, i32 0, i32 4
  %21 = load %struct.av*, %struct.av** %gp_av12, align 8
  %sv_flags13 = getelementptr inbounds %struct.av, %struct.av* %21, i32 0, i32 2
  %22 = load i32, i32* %sv_flags13, align 4
  %and14 = and i32 %22, 4096
  %tobool15 = icmp ne i32 %and14, 0
  br i1 %tobool15, label %if.then.69, label %lor.lhs.false.16

lor.lhs.false.16:                                 ; preds = %land.lhs.true.9, %lor.lhs.false
  %23 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any17 = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 0
  %24 = load i8*, i8** %sv_any17, align 8
  %25 = bitcast i8* %24 to %struct.xpvgv*
  %xgv_gp18 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %25, i32 0, i32 7
  %26 = load %struct.gp*, %struct.gp** %xgv_gp18, align 8
  %gp_hv = getelementptr inbounds %struct.gp, %struct.gp* %26, i32 0, i32 5
  %27 = load %struct.hv*, %struct.hv** %gp_hv, align 8
  %tobool19 = icmp ne %struct.hv* %27, null
  br i1 %tobool19, label %land.lhs.true.20, label %lor.lhs.false.27

land.lhs.true.20:                                 ; preds = %lor.lhs.false.16
  %28 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any21 = getelementptr inbounds %struct.sv, %struct.sv* %28, i32 0, i32 0
  %29 = load i8*, i8** %sv_any21, align 8
  %30 = bitcast i8* %29 to %struct.xpvgv*
  %xgv_gp22 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %30, i32 0, i32 7
  %31 = load %struct.gp*, %struct.gp** %xgv_gp22, align 8
  %gp_hv23 = getelementptr inbounds %struct.gp, %struct.gp* %31, i32 0, i32 5
  %32 = load %struct.hv*, %struct.hv** %gp_hv23, align 8
  %sv_flags24 = getelementptr inbounds %struct.hv, %struct.hv* %32, i32 0, i32 2
  %33 = load i32, i32* %sv_flags24, align 4
  %and25 = and i32 %33, 4096
  %tobool26 = icmp ne i32 %and25, 0
  br i1 %tobool26, label %if.then.69, label %lor.lhs.false.27

lor.lhs.false.27:                                 ; preds = %land.lhs.true.20, %lor.lhs.false.16
  %34 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %tobool28 = icmp ne %struct.sv* %34, null
  br i1 %tobool28, label %land.lhs.true.29, label %cond.false

land.lhs.true.29:                                 ; preds = %lor.lhs.false.27
  %35 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags30 = getelementptr inbounds %struct.sv, %struct.sv* %35, i32 0, i32 2
  %36 = load i32, i32* %sv_flags30, align 4
  %and31 = and i32 %36, 255
  %cmp32 = icmp eq i32 %and31, 13
  br i1 %cmp32, label %land.lhs.true.33, label %cond.false

land.lhs.true.33:                                 ; preds = %land.lhs.true.29
  %37 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any34 = getelementptr inbounds %struct.sv, %struct.sv* %37, i32 0, i32 0
  %38 = load i8*, i8** %sv_any34, align 8
  %39 = bitcast i8* %38 to %struct.xpvgv*
  %xgv_gp35 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %39, i32 0, i32 7
  %40 = load %struct.gp*, %struct.gp** %xgv_gp35, align 8
  %tobool36 = icmp ne %struct.gp* %40, null
  br i1 %tobool36, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true.33
  %41 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any37 = getelementptr inbounds %struct.sv, %struct.sv* %41, i32 0, i32 0
  %42 = load i8*, i8** %sv_any37, align 8
  %43 = bitcast i8* %42 to %struct.xpvgv*
  %xgv_gp38 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %43, i32 0, i32 7
  %44 = load %struct.gp*, %struct.gp** %xgv_gp38, align 8
  %gp_io = getelementptr inbounds %struct.gp, %struct.gp* %44, i32 0, i32 2
  %45 = load %struct.io*, %struct.io** %gp_io, align 8
  %tobool39 = icmp ne %struct.io* %45, null
  br i1 %tobool39, label %land.lhs.true.40, label %lor.lhs.false.58

cond.false:                                       ; preds = %land.lhs.true.33, %land.lhs.true.29, %lor.lhs.false.27
  br i1 false, label %land.lhs.true.40, label %lor.lhs.false.58

land.lhs.true.40:                                 ; preds = %cond.false, %cond.true
  %46 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %tobool41 = icmp ne %struct.sv* %46, null
  br i1 %tobool41, label %land.lhs.true.42, label %cond.false.54

land.lhs.true.42:                                 ; preds = %land.lhs.true.40
  %47 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags43 = getelementptr inbounds %struct.sv, %struct.sv* %47, i32 0, i32 2
  %48 = load i32, i32* %sv_flags43, align 4
  %and44 = and i32 %48, 255
  %cmp45 = icmp eq i32 %and44, 13
  br i1 %cmp45, label %land.lhs.true.46, label %cond.false.54

land.lhs.true.46:                                 ; preds = %land.lhs.true.42
  %49 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any47 = getelementptr inbounds %struct.sv, %struct.sv* %49, i32 0, i32 0
  %50 = load i8*, i8** %sv_any47, align 8
  %51 = bitcast i8* %50 to %struct.xpvgv*
  %xgv_gp48 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %51, i32 0, i32 7
  %52 = load %struct.gp*, %struct.gp** %xgv_gp48, align 8
  %tobool49 = icmp ne %struct.gp* %52, null
  br i1 %tobool49, label %cond.true.50, label %cond.false.54

cond.true.50:                                     ; preds = %land.lhs.true.46
  %53 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any51 = getelementptr inbounds %struct.sv, %struct.sv* %53, i32 0, i32 0
  %54 = load i8*, i8** %sv_any51, align 8
  %55 = bitcast i8* %54 to %struct.xpvgv*
  %xgv_gp52 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %55, i32 0, i32 7
  %56 = load %struct.gp*, %struct.gp** %xgv_gp52, align 8
  %gp_io53 = getelementptr inbounds %struct.gp, %struct.gp* %56, i32 0, i32 2
  %57 = load %struct.io*, %struct.io** %gp_io53, align 8
  br label %cond.end

cond.false.54:                                    ; preds = %land.lhs.true.46, %land.lhs.true.42, %land.lhs.true.40
  br label %cond.end

cond.end:                                         ; preds = %cond.false.54, %cond.true.50
  %cond = phi %struct.io* [ %57, %cond.true.50 ], [ null, %cond.false.54 ]
  %sv_flags55 = getelementptr inbounds %struct.io, %struct.io* %cond, i32 0, i32 2
  %58 = load i32, i32* %sv_flags55, align 4
  %and56 = and i32 %58, 4096
  %tobool57 = icmp ne i32 %and56, 0
  br i1 %tobool57, label %if.then.69, label %lor.lhs.false.58

lor.lhs.false.58:                                 ; preds = %cond.end, %cond.false, %cond.true
  %59 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any59 = getelementptr inbounds %struct.sv, %struct.sv* %59, i32 0, i32 0
  %60 = load i8*, i8** %sv_any59, align 8
  %61 = bitcast i8* %60 to %struct.xpvgv*
  %xgv_gp60 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %61, i32 0, i32 7
  %62 = load %struct.gp*, %struct.gp** %xgv_gp60, align 8
  %gp_cv = getelementptr inbounds %struct.gp, %struct.gp* %62, i32 0, i32 7
  %63 = load %struct.cv*, %struct.cv** %gp_cv, align 8
  %tobool61 = icmp ne %struct.cv* %63, null
  br i1 %tobool61, label %land.lhs.true.62, label %if.end

land.lhs.true.62:                                 ; preds = %lor.lhs.false.58
  %64 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any63 = getelementptr inbounds %struct.sv, %struct.sv* %64, i32 0, i32 0
  %65 = load i8*, i8** %sv_any63, align 8
  %66 = bitcast i8* %65 to %struct.xpvgv*
  %xgv_gp64 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %66, i32 0, i32 7
  %67 = load %struct.gp*, %struct.gp** %xgv_gp64, align 8
  %gp_cv65 = getelementptr inbounds %struct.gp, %struct.gp* %67, i32 0, i32 7
  %68 = load %struct.cv*, %struct.cv** %gp_cv65, align 8
  %sv_flags66 = getelementptr inbounds %struct.cv, %struct.cv* %68, i32 0, i32 2
  %69 = load i32, i32* %sv_flags66, align 4
  %and67 = and i32 %69, 4096
  %tobool68 = icmp ne i32 %and67, 0
  br i1 %tobool68, label %if.then.69, label %if.end

if.then.69:                                       ; preds = %land.lhs.true.62, %cond.end, %land.lhs.true.20, %land.lhs.true.9, %if.then
  %70 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags70 = getelementptr inbounds %struct.sv, %struct.sv* %70, i32 0, i32 2
  %71 = load i32, i32* %sv_flags70, align 4
  %or = or i32 %71, 4194304
  store i32 %or, i32* %sv_flags70, align 4
  %72 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_free(%struct.sv* %72)
  br label %if.end

if.end:                                           ; preds = %if.then.69, %land.lhs.true.62, %lor.lhs.false.58
  br label %if.end.71

if.end.71:                                        ; preds = %if.end, %land.lhs.true, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @Perl_sv_clean_all() #0 {
entry:
  %cleaned = alloca i32, align 4
  store i8 1, i8* @PL_in_clean_all, align 1
  %call = call i32 @S_visit(void (%struct.sv*)* @do_clean_all, i32 0, i32 0)
  store i32 %call, i32* %cleaned, align 4
  store i8 0, i8* @PL_in_clean_all, align 1
  %0 = load i32, i32* %cleaned, align 4
  ret i32 %0
}

; Function Attrs: nounwind uwtable
define internal void @do_clean_all(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %or = or i32 %1, 4194304
  store i32 %or, i32* %sv_flags, align 4
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_free(%struct.sv* %2)
  ret void
}

; Function Attrs: nounwind uwtable
define void @Perl_sv_free_arenas() #0 {
entry:
  %sva = alloca %struct.sv*, align 8
  %svanext = alloca %struct.sv*, align 8
  %arena = alloca %struct.xpv*, align 8
  %arenanext = alloca %struct.xpv*, align 8
  %0 = load %struct.sv*, %struct.sv** @PL_sv_arenaroot, align 8
  store %struct.sv* %0, %struct.sv** %sva, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.sv*, %struct.sv** %sva, align 8
  %tobool = icmp ne %struct.sv* %1, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load %struct.sv*, %struct.sv** %sva, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 0
  %3 = load i8*, i8** %sv_any, align 8
  %4 = bitcast i8* %3 to %struct.sv*
  store %struct.sv* %4, %struct.sv** %svanext, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.body
  %5 = load %struct.sv*, %struct.sv** %svanext, align 8
  %tobool1 = icmp ne %struct.sv* %5, null
  br i1 %tobool1, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %6 = load %struct.sv*, %struct.sv** %svanext, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 2
  %7 = load i32, i32* %sv_flags, align 4
  %and = and i32 %7, 1048576
  %tobool2 = icmp ne i32 %and, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %8 = phi i1 [ false, %while.cond ], [ %tobool2, %land.rhs ]
  br i1 %8, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %9 = load %struct.sv*, %struct.sv** %svanext, align 8
  %sv_any3 = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 0
  %10 = load i8*, i8** %sv_any3, align 8
  %11 = bitcast i8* %10 to %struct.sv*
  store %struct.sv* %11, %struct.sv** %svanext, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end
  %12 = load %struct.sv*, %struct.sv** %sva, align 8
  %sv_flags4 = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 2
  %13 = load i32, i32* %sv_flags4, align 4
  %and5 = and i32 %13, 1048576
  %tobool6 = icmp ne i32 %and5, 0
  br i1 %tobool6, label %if.end, label %if.then

if.then:                                          ; preds = %while.end
  %14 = load %struct.sv*, %struct.sv** %sva, align 8
  %15 = bitcast %struct.sv* %14 to i8*
  call void @Perl_safesysfree(i8* %15)
  br label %if.end

if.end:                                           ; preds = %if.then, %while.end
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %16 = load %struct.sv*, %struct.sv** %svanext, align 8
  store %struct.sv* %16, %struct.sv** %sva, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %17 = load %struct.xpv*, %struct.xpv** @PL_xiv_arenaroot, align 8
  store %struct.xpv* %17, %struct.xpv** %arena, align 8
  br label %for.cond.7

for.cond.7:                                       ; preds = %for.inc.10, %for.end
  %18 = load %struct.xpv*, %struct.xpv** %arena, align 8
  %tobool8 = icmp ne %struct.xpv* %18, null
  br i1 %tobool8, label %for.body.9, label %for.end.11

for.body.9:                                       ; preds = %for.cond.7
  %19 = load %struct.xpv*, %struct.xpv** %arena, align 8
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %19, i32 0, i32 0
  %20 = load i8*, i8** %xpv_pv, align 8
  %21 = bitcast i8* %20 to %struct.xpv*
  store %struct.xpv* %21, %struct.xpv** %arenanext, align 8
  %22 = load %struct.xpv*, %struct.xpv** %arena, align 8
  %23 = bitcast %struct.xpv* %22 to i8*
  call void @Perl_safesysfree(i8* %23)
  br label %for.inc.10

for.inc.10:                                       ; preds = %for.body.9
  %24 = load %struct.xpv*, %struct.xpv** %arenanext, align 8
  store %struct.xpv* %24, %struct.xpv** %arena, align 8
  br label %for.cond.7

for.end.11:                                       ; preds = %for.cond.7
  store %struct.xpv* null, %struct.xpv** @PL_xiv_arenaroot, align 8
  store i64* null, i64** @PL_xiv_root, align 8
  %25 = load %struct.xpv*, %struct.xpv** @PL_xnv_arenaroot, align 8
  store %struct.xpv* %25, %struct.xpv** %arena, align 8
  br label %for.cond.12

for.cond.12:                                      ; preds = %for.inc.16, %for.end.11
  %26 = load %struct.xpv*, %struct.xpv** %arena, align 8
  %tobool13 = icmp ne %struct.xpv* %26, null
  br i1 %tobool13, label %for.body.14, label %for.end.17

for.body.14:                                      ; preds = %for.cond.12
  %27 = load %struct.xpv*, %struct.xpv** %arena, align 8
  %xpv_pv15 = getelementptr inbounds %struct.xpv, %struct.xpv* %27, i32 0, i32 0
  %28 = load i8*, i8** %xpv_pv15, align 8
  %29 = bitcast i8* %28 to %struct.xpv*
  store %struct.xpv* %29, %struct.xpv** %arenanext, align 8
  %30 = load %struct.xpv*, %struct.xpv** %arena, align 8
  %31 = bitcast %struct.xpv* %30 to i8*
  call void @Perl_safesysfree(i8* %31)
  br label %for.inc.16

for.inc.16:                                       ; preds = %for.body.14
  %32 = load %struct.xpv*, %struct.xpv** %arenanext, align 8
  store %struct.xpv* %32, %struct.xpv** %arena, align 8
  br label %for.cond.12

for.end.17:                                       ; preds = %for.cond.12
  store %struct.xpv* null, %struct.xpv** @PL_xnv_arenaroot, align 8
  store double* null, double** @PL_xnv_root, align 8
  %33 = load %struct.xpv*, %struct.xpv** @PL_xrv_arenaroot, align 8
  store %struct.xpv* %33, %struct.xpv** %arena, align 8
  br label %for.cond.18

for.cond.18:                                      ; preds = %for.inc.22, %for.end.17
  %34 = load %struct.xpv*, %struct.xpv** %arena, align 8
  %tobool19 = icmp ne %struct.xpv* %34, null
  br i1 %tobool19, label %for.body.20, label %for.end.23

for.body.20:                                      ; preds = %for.cond.18
  %35 = load %struct.xpv*, %struct.xpv** %arena, align 8
  %xpv_pv21 = getelementptr inbounds %struct.xpv, %struct.xpv* %35, i32 0, i32 0
  %36 = load i8*, i8** %xpv_pv21, align 8
  %37 = bitcast i8* %36 to %struct.xpv*
  store %struct.xpv* %37, %struct.xpv** %arenanext, align 8
  %38 = load %struct.xpv*, %struct.xpv** %arena, align 8
  %39 = bitcast %struct.xpv* %38 to i8*
  call void @Perl_safesysfree(i8* %39)
  br label %for.inc.22

for.inc.22:                                       ; preds = %for.body.20
  %40 = load %struct.xpv*, %struct.xpv** %arenanext, align 8
  store %struct.xpv* %40, %struct.xpv** %arena, align 8
  br label %for.cond.18

for.end.23:                                       ; preds = %for.cond.18
  store %struct.xpv* null, %struct.xpv** @PL_xrv_arenaroot, align 8
  store %struct.xrv* null, %struct.xrv** @PL_xrv_root, align 8
  %41 = load %struct.xpv*, %struct.xpv** @PL_xpv_arenaroot, align 8
  store %struct.xpv* %41, %struct.xpv** %arena, align 8
  br label %for.cond.24

for.cond.24:                                      ; preds = %for.inc.28, %for.end.23
  %42 = load %struct.xpv*, %struct.xpv** %arena, align 8
  %tobool25 = icmp ne %struct.xpv* %42, null
  br i1 %tobool25, label %for.body.26, label %for.end.29

for.body.26:                                      ; preds = %for.cond.24
  %43 = load %struct.xpv*, %struct.xpv** %arena, align 8
  %xpv_pv27 = getelementptr inbounds %struct.xpv, %struct.xpv* %43, i32 0, i32 0
  %44 = load i8*, i8** %xpv_pv27, align 8
  %45 = bitcast i8* %44 to %struct.xpv*
  store %struct.xpv* %45, %struct.xpv** %arenanext, align 8
  %46 = load %struct.xpv*, %struct.xpv** %arena, align 8
  %47 = bitcast %struct.xpv* %46 to i8*
  call void @Perl_safesysfree(i8* %47)
  br label %for.inc.28

for.inc.28:                                       ; preds = %for.body.26
  %48 = load %struct.xpv*, %struct.xpv** %arenanext, align 8
  store %struct.xpv* %48, %struct.xpv** %arena, align 8
  br label %for.cond.24

for.end.29:                                       ; preds = %for.cond.24
  store %struct.xpv* null, %struct.xpv** @PL_xpv_arenaroot, align 8
  store %struct.xpv* null, %struct.xpv** @PL_xpv_root, align 8
  %49 = load %struct.xpviv*, %struct.xpviv** @PL_xpviv_arenaroot, align 8
  %50 = bitcast %struct.xpviv* %49 to %struct.xpv*
  store %struct.xpv* %50, %struct.xpv** %arena, align 8
  br label %for.cond.30

for.cond.30:                                      ; preds = %for.inc.34, %for.end.29
  %51 = load %struct.xpv*, %struct.xpv** %arena, align 8
  %tobool31 = icmp ne %struct.xpv* %51, null
  br i1 %tobool31, label %for.body.32, label %for.end.35

for.body.32:                                      ; preds = %for.cond.30
  %52 = load %struct.xpv*, %struct.xpv** %arena, align 8
  %xpv_pv33 = getelementptr inbounds %struct.xpv, %struct.xpv* %52, i32 0, i32 0
  %53 = load i8*, i8** %xpv_pv33, align 8
  %54 = bitcast i8* %53 to %struct.xpv*
  store %struct.xpv* %54, %struct.xpv** %arenanext, align 8
  %55 = load %struct.xpv*, %struct.xpv** %arena, align 8
  %56 = bitcast %struct.xpv* %55 to i8*
  call void @Perl_safesysfree(i8* %56)
  br label %for.inc.34

for.inc.34:                                       ; preds = %for.body.32
  %57 = load %struct.xpv*, %struct.xpv** %arenanext, align 8
  store %struct.xpv* %57, %struct.xpv** %arena, align 8
  br label %for.cond.30

for.end.35:                                       ; preds = %for.cond.30
  store %struct.xpviv* null, %struct.xpviv** @PL_xpviv_arenaroot, align 8
  store %struct.xpviv* null, %struct.xpviv** @PL_xpviv_root, align 8
  %58 = load %struct.xpvnv*, %struct.xpvnv** @PL_xpvnv_arenaroot, align 8
  %59 = bitcast %struct.xpvnv* %58 to %struct.xpv*
  store %struct.xpv* %59, %struct.xpv** %arena, align 8
  br label %for.cond.36

for.cond.36:                                      ; preds = %for.inc.40, %for.end.35
  %60 = load %struct.xpv*, %struct.xpv** %arena, align 8
  %tobool37 = icmp ne %struct.xpv* %60, null
  br i1 %tobool37, label %for.body.38, label %for.end.41

for.body.38:                                      ; preds = %for.cond.36
  %61 = load %struct.xpv*, %struct.xpv** %arena, align 8
  %xpv_pv39 = getelementptr inbounds %struct.xpv, %struct.xpv* %61, i32 0, i32 0
  %62 = load i8*, i8** %xpv_pv39, align 8
  %63 = bitcast i8* %62 to %struct.xpv*
  store %struct.xpv* %63, %struct.xpv** %arenanext, align 8
  %64 = load %struct.xpv*, %struct.xpv** %arena, align 8
  %65 = bitcast %struct.xpv* %64 to i8*
  call void @Perl_safesysfree(i8* %65)
  br label %for.inc.40

for.inc.40:                                       ; preds = %for.body.38
  %66 = load %struct.xpv*, %struct.xpv** %arenanext, align 8
  store %struct.xpv* %66, %struct.xpv** %arena, align 8
  br label %for.cond.36

for.end.41:                                       ; preds = %for.cond.36
  store %struct.xpvnv* null, %struct.xpvnv** @PL_xpvnv_arenaroot, align 8
  store %struct.xpvnv* null, %struct.xpvnv** @PL_xpvnv_root, align 8
  %67 = load %struct.xpvcv*, %struct.xpvcv** @PL_xpvcv_arenaroot, align 8
  %68 = bitcast %struct.xpvcv* %67 to %struct.xpv*
  store %struct.xpv* %68, %struct.xpv** %arena, align 8
  br label %for.cond.42

for.cond.42:                                      ; preds = %for.inc.46, %for.end.41
  %69 = load %struct.xpv*, %struct.xpv** %arena, align 8
  %tobool43 = icmp ne %struct.xpv* %69, null
  br i1 %tobool43, label %for.body.44, label %for.end.47

for.body.44:                                      ; preds = %for.cond.42
  %70 = load %struct.xpv*, %struct.xpv** %arena, align 8
  %xpv_pv45 = getelementptr inbounds %struct.xpv, %struct.xpv* %70, i32 0, i32 0
  %71 = load i8*, i8** %xpv_pv45, align 8
  %72 = bitcast i8* %71 to %struct.xpv*
  store %struct.xpv* %72, %struct.xpv** %arenanext, align 8
  %73 = load %struct.xpv*, %struct.xpv** %arena, align 8
  %74 = bitcast %struct.xpv* %73 to i8*
  call void @Perl_safesysfree(i8* %74)
  br label %for.inc.46

for.inc.46:                                       ; preds = %for.body.44
  %75 = load %struct.xpv*, %struct.xpv** %arenanext, align 8
  store %struct.xpv* %75, %struct.xpv** %arena, align 8
  br label %for.cond.42

for.end.47:                                       ; preds = %for.cond.42
  store %struct.xpvcv* null, %struct.xpvcv** @PL_xpvcv_arenaroot, align 8
  store %struct.xpvcv* null, %struct.xpvcv** @PL_xpvcv_root, align 8
  %76 = load %struct.xpvav*, %struct.xpvav** @PL_xpvav_arenaroot, align 8
  %77 = bitcast %struct.xpvav* %76 to %struct.xpv*
  store %struct.xpv* %77, %struct.xpv** %arena, align 8
  br label %for.cond.48

for.cond.48:                                      ; preds = %for.inc.52, %for.end.47
  %78 = load %struct.xpv*, %struct.xpv** %arena, align 8
  %tobool49 = icmp ne %struct.xpv* %78, null
  br i1 %tobool49, label %for.body.50, label %for.end.53

for.body.50:                                      ; preds = %for.cond.48
  %79 = load %struct.xpv*, %struct.xpv** %arena, align 8
  %xpv_pv51 = getelementptr inbounds %struct.xpv, %struct.xpv* %79, i32 0, i32 0
  %80 = load i8*, i8** %xpv_pv51, align 8
  %81 = bitcast i8* %80 to %struct.xpv*
  store %struct.xpv* %81, %struct.xpv** %arenanext, align 8
  %82 = load %struct.xpv*, %struct.xpv** %arena, align 8
  %83 = bitcast %struct.xpv* %82 to i8*
  call void @Perl_safesysfree(i8* %83)
  br label %for.inc.52

for.inc.52:                                       ; preds = %for.body.50
  %84 = load %struct.xpv*, %struct.xpv** %arenanext, align 8
  store %struct.xpv* %84, %struct.xpv** %arena, align 8
  br label %for.cond.48

for.end.53:                                       ; preds = %for.cond.48
  store %struct.xpvav* null, %struct.xpvav** @PL_xpvav_arenaroot, align 8
  store %struct.xpvav* null, %struct.xpvav** @PL_xpvav_root, align 8
  %85 = load %struct.xpvhv*, %struct.xpvhv** @PL_xpvhv_arenaroot, align 8
  %86 = bitcast %struct.xpvhv* %85 to %struct.xpv*
  store %struct.xpv* %86, %struct.xpv** %arena, align 8
  br label %for.cond.54

for.cond.54:                                      ; preds = %for.inc.58, %for.end.53
  %87 = load %struct.xpv*, %struct.xpv** %arena, align 8
  %tobool55 = icmp ne %struct.xpv* %87, null
  br i1 %tobool55, label %for.body.56, label %for.end.59

for.body.56:                                      ; preds = %for.cond.54
  %88 = load %struct.xpv*, %struct.xpv** %arena, align 8
  %xpv_pv57 = getelementptr inbounds %struct.xpv, %struct.xpv* %88, i32 0, i32 0
  %89 = load i8*, i8** %xpv_pv57, align 8
  %90 = bitcast i8* %89 to %struct.xpv*
  store %struct.xpv* %90, %struct.xpv** %arenanext, align 8
  %91 = load %struct.xpv*, %struct.xpv** %arena, align 8
  %92 = bitcast %struct.xpv* %91 to i8*
  call void @Perl_safesysfree(i8* %92)
  br label %for.inc.58

for.inc.58:                                       ; preds = %for.body.56
  %93 = load %struct.xpv*, %struct.xpv** %arenanext, align 8
  store %struct.xpv* %93, %struct.xpv** %arena, align 8
  br label %for.cond.54

for.end.59:                                       ; preds = %for.cond.54
  store %struct.xpvhv* null, %struct.xpvhv** @PL_xpvhv_arenaroot, align 8
  store %struct.xpvhv* null, %struct.xpvhv** @PL_xpvhv_root, align 8
  %94 = load %struct.xpvmg*, %struct.xpvmg** @PL_xpvmg_arenaroot, align 8
  %95 = bitcast %struct.xpvmg* %94 to %struct.xpv*
  store %struct.xpv* %95, %struct.xpv** %arena, align 8
  br label %for.cond.60

for.cond.60:                                      ; preds = %for.inc.64, %for.end.59
  %96 = load %struct.xpv*, %struct.xpv** %arena, align 8
  %tobool61 = icmp ne %struct.xpv* %96, null
  br i1 %tobool61, label %for.body.62, label %for.end.65

for.body.62:                                      ; preds = %for.cond.60
  %97 = load %struct.xpv*, %struct.xpv** %arena, align 8
  %xpv_pv63 = getelementptr inbounds %struct.xpv, %struct.xpv* %97, i32 0, i32 0
  %98 = load i8*, i8** %xpv_pv63, align 8
  %99 = bitcast i8* %98 to %struct.xpv*
  store %struct.xpv* %99, %struct.xpv** %arenanext, align 8
  %100 = load %struct.xpv*, %struct.xpv** %arena, align 8
  %101 = bitcast %struct.xpv* %100 to i8*
  call void @Perl_safesysfree(i8* %101)
  br label %for.inc.64

for.inc.64:                                       ; preds = %for.body.62
  %102 = load %struct.xpv*, %struct.xpv** %arenanext, align 8
  store %struct.xpv* %102, %struct.xpv** %arena, align 8
  br label %for.cond.60

for.end.65:                                       ; preds = %for.cond.60
  store %struct.xpvmg* null, %struct.xpvmg** @PL_xpvmg_arenaroot, align 8
  store %struct.xpvmg* null, %struct.xpvmg** @PL_xpvmg_root, align 8
  %103 = load %struct.xpvlv*, %struct.xpvlv** @PL_xpvlv_arenaroot, align 8
  %104 = bitcast %struct.xpvlv* %103 to %struct.xpv*
  store %struct.xpv* %104, %struct.xpv** %arena, align 8
  br label %for.cond.66

for.cond.66:                                      ; preds = %for.inc.70, %for.end.65
  %105 = load %struct.xpv*, %struct.xpv** %arena, align 8
  %tobool67 = icmp ne %struct.xpv* %105, null
  br i1 %tobool67, label %for.body.68, label %for.end.71

for.body.68:                                      ; preds = %for.cond.66
  %106 = load %struct.xpv*, %struct.xpv** %arena, align 8
  %xpv_pv69 = getelementptr inbounds %struct.xpv, %struct.xpv* %106, i32 0, i32 0
  %107 = load i8*, i8** %xpv_pv69, align 8
  %108 = bitcast i8* %107 to %struct.xpv*
  store %struct.xpv* %108, %struct.xpv** %arenanext, align 8
  %109 = load %struct.xpv*, %struct.xpv** %arena, align 8
  %110 = bitcast %struct.xpv* %109 to i8*
  call void @Perl_safesysfree(i8* %110)
  br label %for.inc.70

for.inc.70:                                       ; preds = %for.body.68
  %111 = load %struct.xpv*, %struct.xpv** %arenanext, align 8
  store %struct.xpv* %111, %struct.xpv** %arena, align 8
  br label %for.cond.66

for.end.71:                                       ; preds = %for.cond.66
  store %struct.xpvlv* null, %struct.xpvlv** @PL_xpvlv_arenaroot, align 8
  store %struct.xpvlv* null, %struct.xpvlv** @PL_xpvlv_root, align 8
  %112 = load %struct.xpvbm*, %struct.xpvbm** @PL_xpvbm_arenaroot, align 8
  %113 = bitcast %struct.xpvbm* %112 to %struct.xpv*
  store %struct.xpv* %113, %struct.xpv** %arena, align 8
  br label %for.cond.72

for.cond.72:                                      ; preds = %for.inc.76, %for.end.71
  %114 = load %struct.xpv*, %struct.xpv** %arena, align 8
  %tobool73 = icmp ne %struct.xpv* %114, null
  br i1 %tobool73, label %for.body.74, label %for.end.77

for.body.74:                                      ; preds = %for.cond.72
  %115 = load %struct.xpv*, %struct.xpv** %arena, align 8
  %xpv_pv75 = getelementptr inbounds %struct.xpv, %struct.xpv* %115, i32 0, i32 0
  %116 = load i8*, i8** %xpv_pv75, align 8
  %117 = bitcast i8* %116 to %struct.xpv*
  store %struct.xpv* %117, %struct.xpv** %arenanext, align 8
  %118 = load %struct.xpv*, %struct.xpv** %arena, align 8
  %119 = bitcast %struct.xpv* %118 to i8*
  call void @Perl_safesysfree(i8* %119)
  br label %for.inc.76

for.inc.76:                                       ; preds = %for.body.74
  %120 = load %struct.xpv*, %struct.xpv** %arenanext, align 8
  store %struct.xpv* %120, %struct.xpv** %arena, align 8
  br label %for.cond.72

for.end.77:                                       ; preds = %for.cond.72
  store %struct.xpvbm* null, %struct.xpvbm** @PL_xpvbm_arenaroot, align 8
  store %struct.xpvbm* null, %struct.xpvbm** @PL_xpvbm_root, align 8
  %121 = load %struct.xpv*, %struct.xpv** @PL_he_arenaroot, align 8
  store %struct.xpv* %121, %struct.xpv** %arena, align 8
  br label %for.cond.78

for.cond.78:                                      ; preds = %for.inc.82, %for.end.77
  %122 = load %struct.xpv*, %struct.xpv** %arena, align 8
  %tobool79 = icmp ne %struct.xpv* %122, null
  br i1 %tobool79, label %for.body.80, label %for.end.83

for.body.80:                                      ; preds = %for.cond.78
  %123 = load %struct.xpv*, %struct.xpv** %arena, align 8
  %xpv_pv81 = getelementptr inbounds %struct.xpv, %struct.xpv* %123, i32 0, i32 0
  %124 = load i8*, i8** %xpv_pv81, align 8
  %125 = bitcast i8* %124 to %struct.xpv*
  store %struct.xpv* %125, %struct.xpv** %arenanext, align 8
  %126 = load %struct.xpv*, %struct.xpv** %arena, align 8
  %127 = bitcast %struct.xpv* %126 to i8*
  call void @Perl_safesysfree(i8* %127)
  br label %for.inc.82

for.inc.82:                                       ; preds = %for.body.80
  %128 = load %struct.xpv*, %struct.xpv** %arenanext, align 8
  store %struct.xpv* %128, %struct.xpv** %arena, align 8
  br label %for.cond.78

for.end.83:                                       ; preds = %for.cond.78
  store %struct.xpv* null, %struct.xpv** @PL_he_arenaroot, align 8
  store %struct.he* null, %struct.he** @PL_he_root, align 8
  %129 = load i8*, i8** @PL_nice_chunk, align 8
  %tobool84 = icmp ne i8* %129, null
  br i1 %tobool84, label %if.then.85, label %if.end.86

if.then.85:                                       ; preds = %for.end.83
  %130 = load i8*, i8** @PL_nice_chunk, align 8
  call void @Perl_safesysfree(i8* %130)
  br label %if.end.86

if.end.86:                                        ; preds = %if.then.85, %for.end.83
  store i8* null, i8** @PL_nice_chunk, align 8
  store i32 0, i32* @PL_nice_chunk_size, align 4
  store %struct.sv* null, %struct.sv** @PL_sv_arenaroot, align 8
  store %struct.sv* null, %struct.sv** @PL_sv_root, align 8
  ret void
}

declare void @Perl_safesysfree(i8*) #1

; Function Attrs: nounwind uwtable
define void @Perl_report_uninit() #0 {
entry:
  %0 = load %struct.op*, %struct.op** @PL_op, align 8
  %tobool = icmp ne %struct.op* %0, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 4
  %2 = load i16, i16* %op_type, align 2
  %conv = zext i16 %2 to i32
  %cmp = icmp eq i32 %conv, 351
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %3 = load %struct.op*, %struct.op** @PL_op, align 8
  %call = call i8* @Perl_custom_op_desc(%struct.op* %3)
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %4 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type2 = getelementptr inbounds %struct.op, %struct.op* %4, i32 0, i32 4
  %5 = load i16, i16* %op_type2, align 2
  %idxprom = zext i16 %5 to i64
  %arrayidx = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i32 0, i64 %idxprom
  %6 = load i8*, i8** %arrayidx, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %call, %cond.true ], [ %6, %cond.false ]
  call void (i32, i8*, ...) @Perl_warner(i32 41, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_warn_uninit, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i8* %cond)
  br label %if.end

if.else:                                          ; preds = %entry
  call void (i32, i8*, ...) @Perl_warner(i32 41, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_warn_uninit, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else, %cond.end
  ret void
}

declare void @Perl_warner(i32, i8*, ...) #1

declare i8* @Perl_custom_op_desc(%struct.op*) #1

; Function Attrs: nounwind uwtable
define signext i8 @Perl_sv_upgrade(%struct.sv* %sv, i32 %mt) #0 {
entry:
  %retval = alloca i8, align 1
  %sv.addr = alloca %struct.sv*, align 8
  %mt.addr = alloca i32, align 4
  %pv = alloca i8*, align 8
  %cur = alloca i32, align 4
  %len = alloca i32, align 4
  %iv = alloca i64, align 8
  %nv = alloca double, align 8
  %magic = alloca %struct.magic*, align 8
  %stash = alloca %struct.hv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i32 %mt, i32* %mt.addr, align 4
  %0 = load i32, i32* %mt.addr, align 4
  %cmp = icmp ne i32 %0, 4
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and = and i32 %2, 8388608
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.lhs.true.1, label %if.end

land.lhs.true.1:                                  ; preds = %land.lhs.true
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 2
  %4 = load i32, i32* %sv_flags2, align 4
  %and3 = and i32 %4, 1048576
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true.1
  %5 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_force_normal(%struct.sv* %5)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true.1, %land.lhs.true, %entry
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags5 = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 2
  %7 = load i32, i32* %sv_flags5, align 4
  %and6 = and i32 %7, 255
  %8 = load i32, i32* %mt.addr, align 4
  %cmp7 = icmp eq i32 %and6, %8
  br i1 %cmp7, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %if.end
  store i8 1, i8* %retval
  br label %return

if.end.9:                                         ; preds = %if.end
  %9 = load i32, i32* %mt.addr, align 4
  %cmp10 = icmp ult i32 %9, 5
  br i1 %cmp10, label %if.then.11, label %if.end.16

if.then.11:                                       ; preds = %if.end.9
  %10 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags12 = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags12, align 4
  %and13 = and i32 %11, 2097152
  %tobool14 = icmp ne i32 %and13, 0
  br i1 %tobool14, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then.11
  %12 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i32 @Perl_sv_backoff(%struct.sv* %12)
  %tobool15 = icmp ne i32 %call, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then.11
  %13 = phi i1 [ false, %if.then.11 ], [ %tobool15, %land.rhs ]
  %land.ext = zext i1 %13 to i32
  br label %if.end.16

if.end.16:                                        ; preds = %land.end, %if.end.9
  store i8* null, i8** %pv, align 8
  store i32 0, i32* %cur, align 4
  store i32 0, i32* %len, align 4
  store i64 0, i64* %iv, align 8
  store double 0.000000e+00, double* %nv, align 8
  store %struct.magic* null, %struct.magic** %magic, align 8
  store %struct.hv* null, %struct.hv** %stash, align 8
  %14 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags17 = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 2
  %15 = load i32, i32* %sv_flags17, align 4
  %and18 = and i32 %15, 255
  switch i32 %and18, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb.19
    i32 2, label %sw.bb.27
    i32 3, label %sw.bb.33
    i32 4, label %sw.bb.36
    i32 5, label %sw.bb.51
    i32 6, label %sw.bb.63
    i32 7, label %sw.bb.77
  ]

sw.bb:                                            ; preds = %if.end.16
  br label %sw.epilog

sw.bb.19:                                         ; preds = %if.end.16
  %16 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 0
  %17 = load i8*, i8** %sv_any, align 8
  %18 = bitcast i8* %17 to %struct.xpviv*
  %xiv_iv = getelementptr inbounds %struct.xpviv, %struct.xpviv* %18, i32 0, i32 3
  %19 = load i64, i64* %xiv_iv, align 8
  store i64 %19, i64* %iv, align 8
  %20 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any20 = getelementptr inbounds %struct.sv, %struct.sv* %20, i32 0, i32 0
  %21 = load i8*, i8** %sv_any20, align 8
  %22 = bitcast i8* %21 to %struct.xpviv*
  call void @S_del_xiv(%struct.xpviv* %22)
  %23 = load i32, i32* %mt.addr, align 4
  %cmp21 = icmp eq i32 %23, 2
  br i1 %cmp21, label %if.then.22, label %if.else

if.then.22:                                       ; preds = %sw.bb.19
  store i32 6, i32* %mt.addr, align 4
  br label %if.end.26

if.else:                                          ; preds = %sw.bb.19
  %24 = load i32, i32* %mt.addr, align 4
  %cmp23 = icmp ult i32 %24, 5
  br i1 %cmp23, label %if.then.24, label %if.end.25

if.then.24:                                       ; preds = %if.else
  store i32 5, i32* %mt.addr, align 4
  br label %if.end.25

if.end.25:                                        ; preds = %if.then.24, %if.else
  br label %if.end.26

if.end.26:                                        ; preds = %if.end.25, %if.then.22
  br label %sw.epilog

sw.bb.27:                                         ; preds = %if.end.16
  %25 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any28 = getelementptr inbounds %struct.sv, %struct.sv* %25, i32 0, i32 0
  %26 = load i8*, i8** %sv_any28, align 8
  %27 = bitcast i8* %26 to %struct.xpvnv*
  %xnv_nv = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %27, i32 0, i32 4
  %28 = load double, double* %xnv_nv, align 8
  store double %28, double* %nv, align 8
  %29 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any29 = getelementptr inbounds %struct.sv, %struct.sv* %29, i32 0, i32 0
  %30 = load i8*, i8** %sv_any29, align 8
  %31 = bitcast i8* %30 to %struct.xpvnv*
  call void @S_del_xnv(%struct.xpvnv* %31)
  %32 = load i32, i32* %mt.addr, align 4
  %cmp30 = icmp ult i32 %32, 6
  br i1 %cmp30, label %if.then.31, label %if.end.32

if.then.31:                                       ; preds = %sw.bb.27
  store i32 6, i32* %mt.addr, align 4
  br label %if.end.32

if.end.32:                                        ; preds = %if.then.31, %sw.bb.27
  br label %sw.epilog

sw.bb.33:                                         ; preds = %if.end.16
  %33 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any34 = getelementptr inbounds %struct.sv, %struct.sv* %33, i32 0, i32 0
  %34 = load i8*, i8** %sv_any34, align 8
  %35 = bitcast i8* %34 to %struct.xrv*
  %xrv_rv = getelementptr inbounds %struct.xrv, %struct.xrv* %35, i32 0, i32 0
  %36 = load %struct.sv*, %struct.sv** %xrv_rv, align 8
  %37 = bitcast %struct.sv* %36 to i8*
  store i8* %37, i8** %pv, align 8
  %38 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any35 = getelementptr inbounds %struct.sv, %struct.sv* %38, i32 0, i32 0
  %39 = load i8*, i8** %sv_any35, align 8
  %40 = bitcast i8* %39 to %struct.xrv*
  call void @S_del_xrv(%struct.xrv* %40)
  br label %sw.epilog

sw.bb.36:                                         ; preds = %if.end.16
  %41 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any37 = getelementptr inbounds %struct.sv, %struct.sv* %41, i32 0, i32 0
  %42 = load i8*, i8** %sv_any37, align 8
  %43 = bitcast i8* %42 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %43, i32 0, i32 0
  %44 = load i8*, i8** %xpv_pv, align 8
  store i8* %44, i8** %pv, align 8
  %45 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any38 = getelementptr inbounds %struct.sv, %struct.sv* %45, i32 0, i32 0
  %46 = load i8*, i8** %sv_any38, align 8
  %47 = bitcast i8* %46 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %47, i32 0, i32 1
  %48 = load i64, i64* %xpv_cur, align 8
  %conv = trunc i64 %48 to i32
  store i32 %conv, i32* %cur, align 4
  %49 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any39 = getelementptr inbounds %struct.sv, %struct.sv* %49, i32 0, i32 0
  %50 = load i8*, i8** %sv_any39, align 8
  %51 = bitcast i8* %50 to %struct.xpv*
  %xpv_len = getelementptr inbounds %struct.xpv, %struct.xpv* %51, i32 0, i32 2
  %52 = load i64, i64* %xpv_len, align 8
  %conv40 = trunc i64 %52 to i32
  store i32 %conv40, i32* %len, align 4
  %53 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any41 = getelementptr inbounds %struct.sv, %struct.sv* %53, i32 0, i32 0
  %54 = load i8*, i8** %sv_any41, align 8
  %55 = bitcast i8* %54 to %struct.xpv*
  call void @S_del_xpv(%struct.xpv* %55)
  %56 = load i32, i32* %mt.addr, align 4
  %cmp42 = icmp ule i32 %56, 1
  br i1 %cmp42, label %if.then.44, label %if.else.45

if.then.44:                                       ; preds = %sw.bb.36
  store i32 5, i32* %mt.addr, align 4
  br label %if.end.50

if.else.45:                                       ; preds = %sw.bb.36
  %57 = load i32, i32* %mt.addr, align 4
  %cmp46 = icmp eq i32 %57, 2
  br i1 %cmp46, label %if.then.48, label %if.end.49

if.then.48:                                       ; preds = %if.else.45
  store i32 6, i32* %mt.addr, align 4
  br label %if.end.49

if.end.49:                                        ; preds = %if.then.48, %if.else.45
  br label %if.end.50

if.end.50:                                        ; preds = %if.end.49, %if.then.44
  br label %sw.epilog

sw.bb.51:                                         ; preds = %if.end.16
  %58 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any52 = getelementptr inbounds %struct.sv, %struct.sv* %58, i32 0, i32 0
  %59 = load i8*, i8** %sv_any52, align 8
  %60 = bitcast i8* %59 to %struct.xpv*
  %xpv_pv53 = getelementptr inbounds %struct.xpv, %struct.xpv* %60, i32 0, i32 0
  %61 = load i8*, i8** %xpv_pv53, align 8
  store i8* %61, i8** %pv, align 8
  %62 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any54 = getelementptr inbounds %struct.sv, %struct.sv* %62, i32 0, i32 0
  %63 = load i8*, i8** %sv_any54, align 8
  %64 = bitcast i8* %63 to %struct.xpv*
  %xpv_cur55 = getelementptr inbounds %struct.xpv, %struct.xpv* %64, i32 0, i32 1
  %65 = load i64, i64* %xpv_cur55, align 8
  %conv56 = trunc i64 %65 to i32
  store i32 %conv56, i32* %cur, align 4
  %66 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any57 = getelementptr inbounds %struct.sv, %struct.sv* %66, i32 0, i32 0
  %67 = load i8*, i8** %sv_any57, align 8
  %68 = bitcast i8* %67 to %struct.xpv*
  %xpv_len58 = getelementptr inbounds %struct.xpv, %struct.xpv* %68, i32 0, i32 2
  %69 = load i64, i64* %xpv_len58, align 8
  %conv59 = trunc i64 %69 to i32
  store i32 %conv59, i32* %len, align 4
  %70 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any60 = getelementptr inbounds %struct.sv, %struct.sv* %70, i32 0, i32 0
  %71 = load i8*, i8** %sv_any60, align 8
  %72 = bitcast i8* %71 to %struct.xpviv*
  %xiv_iv61 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %72, i32 0, i32 3
  %73 = load i64, i64* %xiv_iv61, align 8
  store i64 %73, i64* %iv, align 8
  %74 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any62 = getelementptr inbounds %struct.sv, %struct.sv* %74, i32 0, i32 0
  %75 = load i8*, i8** %sv_any62, align 8
  %76 = bitcast i8* %75 to %struct.xpviv*
  call void @S_del_xpviv(%struct.xpviv* %76)
  br label %sw.epilog

sw.bb.63:                                         ; preds = %if.end.16
  %77 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any64 = getelementptr inbounds %struct.sv, %struct.sv* %77, i32 0, i32 0
  %78 = load i8*, i8** %sv_any64, align 8
  %79 = bitcast i8* %78 to %struct.xpv*
  %xpv_pv65 = getelementptr inbounds %struct.xpv, %struct.xpv* %79, i32 0, i32 0
  %80 = load i8*, i8** %xpv_pv65, align 8
  store i8* %80, i8** %pv, align 8
  %81 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any66 = getelementptr inbounds %struct.sv, %struct.sv* %81, i32 0, i32 0
  %82 = load i8*, i8** %sv_any66, align 8
  %83 = bitcast i8* %82 to %struct.xpv*
  %xpv_cur67 = getelementptr inbounds %struct.xpv, %struct.xpv* %83, i32 0, i32 1
  %84 = load i64, i64* %xpv_cur67, align 8
  %conv68 = trunc i64 %84 to i32
  store i32 %conv68, i32* %cur, align 4
  %85 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any69 = getelementptr inbounds %struct.sv, %struct.sv* %85, i32 0, i32 0
  %86 = load i8*, i8** %sv_any69, align 8
  %87 = bitcast i8* %86 to %struct.xpv*
  %xpv_len70 = getelementptr inbounds %struct.xpv, %struct.xpv* %87, i32 0, i32 2
  %88 = load i64, i64* %xpv_len70, align 8
  %conv71 = trunc i64 %88 to i32
  store i32 %conv71, i32* %len, align 4
  %89 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any72 = getelementptr inbounds %struct.sv, %struct.sv* %89, i32 0, i32 0
  %90 = load i8*, i8** %sv_any72, align 8
  %91 = bitcast i8* %90 to %struct.xpviv*
  %xiv_iv73 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %91, i32 0, i32 3
  %92 = load i64, i64* %xiv_iv73, align 8
  store i64 %92, i64* %iv, align 8
  %93 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any74 = getelementptr inbounds %struct.sv, %struct.sv* %93, i32 0, i32 0
  %94 = load i8*, i8** %sv_any74, align 8
  %95 = bitcast i8* %94 to %struct.xpvnv*
  %xnv_nv75 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %95, i32 0, i32 4
  %96 = load double, double* %xnv_nv75, align 8
  store double %96, double* %nv, align 8
  %97 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any76 = getelementptr inbounds %struct.sv, %struct.sv* %97, i32 0, i32 0
  %98 = load i8*, i8** %sv_any76, align 8
  %99 = bitcast i8* %98 to %struct.xpvnv*
  call void @S_del_xpvnv(%struct.xpvnv* %99)
  br label %sw.epilog

sw.bb.77:                                         ; preds = %if.end.16
  %100 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any78 = getelementptr inbounds %struct.sv, %struct.sv* %100, i32 0, i32 0
  %101 = load i8*, i8** %sv_any78, align 8
  %102 = bitcast i8* %101 to %struct.xpv*
  %xpv_pv79 = getelementptr inbounds %struct.xpv, %struct.xpv* %102, i32 0, i32 0
  %103 = load i8*, i8** %xpv_pv79, align 8
  store i8* %103, i8** %pv, align 8
  %104 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any80 = getelementptr inbounds %struct.sv, %struct.sv* %104, i32 0, i32 0
  %105 = load i8*, i8** %sv_any80, align 8
  %106 = bitcast i8* %105 to %struct.xpv*
  %xpv_cur81 = getelementptr inbounds %struct.xpv, %struct.xpv* %106, i32 0, i32 1
  %107 = load i64, i64* %xpv_cur81, align 8
  %conv82 = trunc i64 %107 to i32
  store i32 %conv82, i32* %cur, align 4
  %108 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any83 = getelementptr inbounds %struct.sv, %struct.sv* %108, i32 0, i32 0
  %109 = load i8*, i8** %sv_any83, align 8
  %110 = bitcast i8* %109 to %struct.xpv*
  %xpv_len84 = getelementptr inbounds %struct.xpv, %struct.xpv* %110, i32 0, i32 2
  %111 = load i64, i64* %xpv_len84, align 8
  %conv85 = trunc i64 %111 to i32
  store i32 %conv85, i32* %len, align 4
  %112 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any86 = getelementptr inbounds %struct.sv, %struct.sv* %112, i32 0, i32 0
  %113 = load i8*, i8** %sv_any86, align 8
  %114 = bitcast i8* %113 to %struct.xpviv*
  %xiv_iv87 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %114, i32 0, i32 3
  %115 = load i64, i64* %xiv_iv87, align 8
  store i64 %115, i64* %iv, align 8
  %116 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any88 = getelementptr inbounds %struct.sv, %struct.sv* %116, i32 0, i32 0
  %117 = load i8*, i8** %sv_any88, align 8
  %118 = bitcast i8* %117 to %struct.xpvnv*
  %xnv_nv89 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %118, i32 0, i32 4
  %119 = load double, double* %xnv_nv89, align 8
  store double %119, double* %nv, align 8
  %120 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any90 = getelementptr inbounds %struct.sv, %struct.sv* %120, i32 0, i32 0
  %121 = load i8*, i8** %sv_any90, align 8
  %122 = bitcast i8* %121 to %struct.xpvmg*
  %xmg_magic = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %122, i32 0, i32 5
  %123 = load %struct.magic*, %struct.magic** %xmg_magic, align 8
  store %struct.magic* %123, %struct.magic** %magic, align 8
  %124 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any91 = getelementptr inbounds %struct.sv, %struct.sv* %124, i32 0, i32 0
  %125 = load i8*, i8** %sv_any91, align 8
  %126 = bitcast i8* %125 to %struct.xpvmg*
  %xmg_stash = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %126, i32 0, i32 6
  %127 = load %struct.hv*, %struct.hv** %xmg_stash, align 8
  store %struct.hv* %127, %struct.hv** %stash, align 8
  %128 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any92 = getelementptr inbounds %struct.sv, %struct.sv* %128, i32 0, i32 0
  %129 = load i8*, i8** %sv_any92, align 8
  %130 = bitcast i8* %129 to %struct.xpvmg*
  call void @S_del_xpvmg(%struct.xpvmg* %130)
  br label %sw.epilog

sw.default:                                       ; preds = %if.end.16
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.2, i32 0, i32 0))
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb.77, %sw.bb.63, %sw.bb.51, %if.end.50, %sw.bb.33, %if.end.32, %if.end.26, %sw.bb
  %131 = load i32, i32* %mt.addr, align 4
  switch i32 %131, label %sw.epilog.355 [
    i32 0, label %sw.bb.93
    i32 1, label %sw.bb.94
    i32 2, label %sw.bb.99
    i32 3, label %sw.bb.104
    i32 4, label %sw.bb.109
    i32 5, label %sw.bb.120
    i32 6, label %sw.bb.149
    i32 7, label %sw.bb.164
    i32 9, label %sw.bb.183
    i32 10, label %sw.bb.206
    i32 11, label %sw.bb.227
    i32 12, label %sw.bb.248
    i32 13, label %sw.bb.268
    i32 8, label %sw.bb.292
    i32 14, label %sw.bb.314
    i32 15, label %sw.bb.334
  ]

sw.bb.93:                                         ; preds = %sw.epilog
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i32 0, i32 0))
  br label %sw.bb.94

sw.bb.94:                                         ; preds = %sw.epilog, %sw.bb.93
  %call95 = call %struct.xpviv* @S_new_xiv()
  %132 = bitcast %struct.xpviv* %call95 to i8*
  %133 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any96 = getelementptr inbounds %struct.sv, %struct.sv* %133, i32 0, i32 0
  store i8* %132, i8** %sv_any96, align 8
  %134 = load i64, i64* %iv, align 8
  %135 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any97 = getelementptr inbounds %struct.sv, %struct.sv* %135, i32 0, i32 0
  %136 = load i8*, i8** %sv_any97, align 8
  %137 = bitcast i8* %136 to %struct.xpviv*
  %xiv_iv98 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %137, i32 0, i32 3
  store i64 %134, i64* %xiv_iv98, align 8
  br label %sw.epilog.355

sw.bb.99:                                         ; preds = %sw.epilog
  %call100 = call %struct.xpvnv* @S_new_xnv()
  %138 = bitcast %struct.xpvnv* %call100 to i8*
  %139 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any101 = getelementptr inbounds %struct.sv, %struct.sv* %139, i32 0, i32 0
  store i8* %138, i8** %sv_any101, align 8
  %140 = load double, double* %nv, align 8
  %141 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any102 = getelementptr inbounds %struct.sv, %struct.sv* %141, i32 0, i32 0
  %142 = load i8*, i8** %sv_any102, align 8
  %143 = bitcast i8* %142 to %struct.xpvnv*
  %xnv_nv103 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %143, i32 0, i32 4
  store double %140, double* %xnv_nv103, align 8
  br label %sw.epilog.355

sw.bb.104:                                        ; preds = %sw.epilog
  %call105 = call %struct.xrv* @S_new_xrv()
  %144 = bitcast %struct.xrv* %call105 to i8*
  %145 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any106 = getelementptr inbounds %struct.sv, %struct.sv* %145, i32 0, i32 0
  store i8* %144, i8** %sv_any106, align 8
  %146 = load i8*, i8** %pv, align 8
  %147 = bitcast i8* %146 to %struct.sv*
  %148 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any107 = getelementptr inbounds %struct.sv, %struct.sv* %148, i32 0, i32 0
  %149 = load i8*, i8** %sv_any107, align 8
  %150 = bitcast i8* %149 to %struct.xrv*
  %xrv_rv108 = getelementptr inbounds %struct.xrv, %struct.xrv* %150, i32 0, i32 0
  store %struct.sv* %147, %struct.sv** %xrv_rv108, align 8
  br label %sw.epilog.355

sw.bb.109:                                        ; preds = %sw.epilog
  %call110 = call %struct.xpv* @S_new_xpv()
  %151 = bitcast %struct.xpv* %call110 to i8*
  %152 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any111 = getelementptr inbounds %struct.sv, %struct.sv* %152, i32 0, i32 0
  store i8* %151, i8** %sv_any111, align 8
  %153 = load i8*, i8** %pv, align 8
  %154 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any112 = getelementptr inbounds %struct.sv, %struct.sv* %154, i32 0, i32 0
  %155 = load i8*, i8** %sv_any112, align 8
  %156 = bitcast i8* %155 to %struct.xpv*
  %xpv_pv113 = getelementptr inbounds %struct.xpv, %struct.xpv* %156, i32 0, i32 0
  store i8* %153, i8** %xpv_pv113, align 8
  %157 = load i32, i32* %cur, align 4
  %conv114 = zext i32 %157 to i64
  %158 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any115 = getelementptr inbounds %struct.sv, %struct.sv* %158, i32 0, i32 0
  %159 = load i8*, i8** %sv_any115, align 8
  %160 = bitcast i8* %159 to %struct.xpv*
  %xpv_cur116 = getelementptr inbounds %struct.xpv, %struct.xpv* %160, i32 0, i32 1
  store i64 %conv114, i64* %xpv_cur116, align 8
  %161 = load i32, i32* %len, align 4
  %conv117 = zext i32 %161 to i64
  %162 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any118 = getelementptr inbounds %struct.sv, %struct.sv* %162, i32 0, i32 0
  %163 = load i8*, i8** %sv_any118, align 8
  %164 = bitcast i8* %163 to %struct.xpv*
  %xpv_len119 = getelementptr inbounds %struct.xpv, %struct.xpv* %164, i32 0, i32 2
  store i64 %conv117, i64* %xpv_len119, align 8
  br label %sw.epilog.355

sw.bb.120:                                        ; preds = %sw.epilog
  %call121 = call %struct.xpviv* @S_new_xpviv()
  %165 = bitcast %struct.xpviv* %call121 to i8*
  %166 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any122 = getelementptr inbounds %struct.sv, %struct.sv* %166, i32 0, i32 0
  store i8* %165, i8** %sv_any122, align 8
  %167 = load i8*, i8** %pv, align 8
  %168 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any123 = getelementptr inbounds %struct.sv, %struct.sv* %168, i32 0, i32 0
  %169 = load i8*, i8** %sv_any123, align 8
  %170 = bitcast i8* %169 to %struct.xpv*
  %xpv_pv124 = getelementptr inbounds %struct.xpv, %struct.xpv* %170, i32 0, i32 0
  store i8* %167, i8** %xpv_pv124, align 8
  %171 = load i32, i32* %cur, align 4
  %conv125 = zext i32 %171 to i64
  %172 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any126 = getelementptr inbounds %struct.sv, %struct.sv* %172, i32 0, i32 0
  %173 = load i8*, i8** %sv_any126, align 8
  %174 = bitcast i8* %173 to %struct.xpv*
  %xpv_cur127 = getelementptr inbounds %struct.xpv, %struct.xpv* %174, i32 0, i32 1
  store i64 %conv125, i64* %xpv_cur127, align 8
  %175 = load i32, i32* %len, align 4
  %conv128 = zext i32 %175 to i64
  %176 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any129 = getelementptr inbounds %struct.sv, %struct.sv* %176, i32 0, i32 0
  %177 = load i8*, i8** %sv_any129, align 8
  %178 = bitcast i8* %177 to %struct.xpv*
  %xpv_len130 = getelementptr inbounds %struct.xpv, %struct.xpv* %178, i32 0, i32 2
  store i64 %conv128, i64* %xpv_len130, align 8
  %179 = load i64, i64* %iv, align 8
  %180 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any131 = getelementptr inbounds %struct.sv, %struct.sv* %180, i32 0, i32 0
  %181 = load i8*, i8** %sv_any131, align 8
  %182 = bitcast i8* %181 to %struct.xpviv*
  %xiv_iv132 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %182, i32 0, i32 3
  store i64 %179, i64* %xiv_iv132, align 8
  %183 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags133 = getelementptr inbounds %struct.sv, %struct.sv* %183, i32 0, i32 2
  %184 = load i32, i32* %sv_flags133, align 4
  %and134 = and i32 %184, 196608
  %tobool135 = icmp ne i32 %and134, 0
  br i1 %tobool135, label %if.then.136, label %if.end.146

if.then.136:                                      ; preds = %sw.bb.120
  %185 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags137 = getelementptr inbounds %struct.sv, %struct.sv* %185, i32 0, i32 2
  %186 = load i32, i32* %sv_flags137, align 4
  %and138 = and i32 %186, 2097152
  %tobool139 = icmp ne i32 %and138, 0
  br i1 %tobool139, label %land.rhs.140, label %land.end.143

land.rhs.140:                                     ; preds = %if.then.136
  %187 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call141 = call i32 @Perl_sv_backoff(%struct.sv* %187)
  %tobool142 = icmp ne i32 %call141, 0
  br label %land.end.143

land.end.143:                                     ; preds = %land.rhs.140, %if.then.136
  %188 = phi i1 [ false, %if.then.136 ], [ %tobool142, %land.rhs.140 ]
  %land.ext144 = zext i1 %188 to i32
  %189 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags145 = getelementptr inbounds %struct.sv, %struct.sv* %189, i32 0, i32 2
  %190 = load i32, i32* %sv_flags145, align 4
  %or = or i32 %190, 16842752
  store i32 %or, i32* %sv_flags145, align 4
  br label %if.end.146

if.end.146:                                       ; preds = %land.end.143, %sw.bb.120
  %191 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags147 = getelementptr inbounds %struct.sv, %struct.sv* %191, i32 0, i32 2
  %192 = load i32, i32* %sv_flags147, align 4
  %and148 = and i32 %192, -33685505
  store i32 %and148, i32* %sv_flags147, align 4
  br label %sw.epilog.355

sw.bb.149:                                        ; preds = %sw.epilog
  %call150 = call %struct.xpvnv* @S_new_xpvnv()
  %193 = bitcast %struct.xpvnv* %call150 to i8*
  %194 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any151 = getelementptr inbounds %struct.sv, %struct.sv* %194, i32 0, i32 0
  store i8* %193, i8** %sv_any151, align 8
  %195 = load i8*, i8** %pv, align 8
  %196 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any152 = getelementptr inbounds %struct.sv, %struct.sv* %196, i32 0, i32 0
  %197 = load i8*, i8** %sv_any152, align 8
  %198 = bitcast i8* %197 to %struct.xpv*
  %xpv_pv153 = getelementptr inbounds %struct.xpv, %struct.xpv* %198, i32 0, i32 0
  store i8* %195, i8** %xpv_pv153, align 8
  %199 = load i32, i32* %cur, align 4
  %conv154 = zext i32 %199 to i64
  %200 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any155 = getelementptr inbounds %struct.sv, %struct.sv* %200, i32 0, i32 0
  %201 = load i8*, i8** %sv_any155, align 8
  %202 = bitcast i8* %201 to %struct.xpv*
  %xpv_cur156 = getelementptr inbounds %struct.xpv, %struct.xpv* %202, i32 0, i32 1
  store i64 %conv154, i64* %xpv_cur156, align 8
  %203 = load i32, i32* %len, align 4
  %conv157 = zext i32 %203 to i64
  %204 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any158 = getelementptr inbounds %struct.sv, %struct.sv* %204, i32 0, i32 0
  %205 = load i8*, i8** %sv_any158, align 8
  %206 = bitcast i8* %205 to %struct.xpv*
  %xpv_len159 = getelementptr inbounds %struct.xpv, %struct.xpv* %206, i32 0, i32 2
  store i64 %conv157, i64* %xpv_len159, align 8
  %207 = load i64, i64* %iv, align 8
  %208 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any160 = getelementptr inbounds %struct.sv, %struct.sv* %208, i32 0, i32 0
  %209 = load i8*, i8** %sv_any160, align 8
  %210 = bitcast i8* %209 to %struct.xpviv*
  %xiv_iv161 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %210, i32 0, i32 3
  store i64 %207, i64* %xiv_iv161, align 8
  %211 = load double, double* %nv, align 8
  %212 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any162 = getelementptr inbounds %struct.sv, %struct.sv* %212, i32 0, i32 0
  %213 = load i8*, i8** %sv_any162, align 8
  %214 = bitcast i8* %213 to %struct.xpvnv*
  %xnv_nv163 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %214, i32 0, i32 4
  store double %211, double* %xnv_nv163, align 8
  br label %sw.epilog.355

sw.bb.164:                                        ; preds = %sw.epilog
  %call165 = call %struct.xpvmg* @S_new_xpvmg()
  %215 = bitcast %struct.xpvmg* %call165 to i8*
  %216 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any166 = getelementptr inbounds %struct.sv, %struct.sv* %216, i32 0, i32 0
  store i8* %215, i8** %sv_any166, align 8
  %217 = load i8*, i8** %pv, align 8
  %218 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any167 = getelementptr inbounds %struct.sv, %struct.sv* %218, i32 0, i32 0
  %219 = load i8*, i8** %sv_any167, align 8
  %220 = bitcast i8* %219 to %struct.xpv*
  %xpv_pv168 = getelementptr inbounds %struct.xpv, %struct.xpv* %220, i32 0, i32 0
  store i8* %217, i8** %xpv_pv168, align 8
  %221 = load i32, i32* %cur, align 4
  %conv169 = zext i32 %221 to i64
  %222 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any170 = getelementptr inbounds %struct.sv, %struct.sv* %222, i32 0, i32 0
  %223 = load i8*, i8** %sv_any170, align 8
  %224 = bitcast i8* %223 to %struct.xpv*
  %xpv_cur171 = getelementptr inbounds %struct.xpv, %struct.xpv* %224, i32 0, i32 1
  store i64 %conv169, i64* %xpv_cur171, align 8
  %225 = load i32, i32* %len, align 4
  %conv172 = zext i32 %225 to i64
  %226 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any173 = getelementptr inbounds %struct.sv, %struct.sv* %226, i32 0, i32 0
  %227 = load i8*, i8** %sv_any173, align 8
  %228 = bitcast i8* %227 to %struct.xpv*
  %xpv_len174 = getelementptr inbounds %struct.xpv, %struct.xpv* %228, i32 0, i32 2
  store i64 %conv172, i64* %xpv_len174, align 8
  %229 = load i64, i64* %iv, align 8
  %230 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any175 = getelementptr inbounds %struct.sv, %struct.sv* %230, i32 0, i32 0
  %231 = load i8*, i8** %sv_any175, align 8
  %232 = bitcast i8* %231 to %struct.xpviv*
  %xiv_iv176 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %232, i32 0, i32 3
  store i64 %229, i64* %xiv_iv176, align 8
  %233 = load double, double* %nv, align 8
  %234 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any177 = getelementptr inbounds %struct.sv, %struct.sv* %234, i32 0, i32 0
  %235 = load i8*, i8** %sv_any177, align 8
  %236 = bitcast i8* %235 to %struct.xpvnv*
  %xnv_nv178 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %236, i32 0, i32 4
  store double %233, double* %xnv_nv178, align 8
  %237 = load %struct.magic*, %struct.magic** %magic, align 8
  %238 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any179 = getelementptr inbounds %struct.sv, %struct.sv* %238, i32 0, i32 0
  %239 = load i8*, i8** %sv_any179, align 8
  %240 = bitcast i8* %239 to %struct.xpvmg*
  %xmg_magic180 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %240, i32 0, i32 5
  store %struct.magic* %237, %struct.magic** %xmg_magic180, align 8
  %241 = load %struct.hv*, %struct.hv** %stash, align 8
  %242 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any181 = getelementptr inbounds %struct.sv, %struct.sv* %242, i32 0, i32 0
  %243 = load i8*, i8** %sv_any181, align 8
  %244 = bitcast i8* %243 to %struct.xpvmg*
  %xmg_stash182 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %244, i32 0, i32 6
  store %struct.hv* %241, %struct.hv** %xmg_stash182, align 8
  br label %sw.epilog.355

sw.bb.183:                                        ; preds = %sw.epilog
  %call184 = call %struct.xpvlv* @S_new_xpvlv()
  %245 = bitcast %struct.xpvlv* %call184 to i8*
  %246 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any185 = getelementptr inbounds %struct.sv, %struct.sv* %246, i32 0, i32 0
  store i8* %245, i8** %sv_any185, align 8
  %247 = load i8*, i8** %pv, align 8
  %248 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any186 = getelementptr inbounds %struct.sv, %struct.sv* %248, i32 0, i32 0
  %249 = load i8*, i8** %sv_any186, align 8
  %250 = bitcast i8* %249 to %struct.xpv*
  %xpv_pv187 = getelementptr inbounds %struct.xpv, %struct.xpv* %250, i32 0, i32 0
  store i8* %247, i8** %xpv_pv187, align 8
  %251 = load i32, i32* %cur, align 4
  %conv188 = zext i32 %251 to i64
  %252 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any189 = getelementptr inbounds %struct.sv, %struct.sv* %252, i32 0, i32 0
  %253 = load i8*, i8** %sv_any189, align 8
  %254 = bitcast i8* %253 to %struct.xpv*
  %xpv_cur190 = getelementptr inbounds %struct.xpv, %struct.xpv* %254, i32 0, i32 1
  store i64 %conv188, i64* %xpv_cur190, align 8
  %255 = load i32, i32* %len, align 4
  %conv191 = zext i32 %255 to i64
  %256 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any192 = getelementptr inbounds %struct.sv, %struct.sv* %256, i32 0, i32 0
  %257 = load i8*, i8** %sv_any192, align 8
  %258 = bitcast i8* %257 to %struct.xpv*
  %xpv_len193 = getelementptr inbounds %struct.xpv, %struct.xpv* %258, i32 0, i32 2
  store i64 %conv191, i64* %xpv_len193, align 8
  %259 = load i64, i64* %iv, align 8
  %260 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any194 = getelementptr inbounds %struct.sv, %struct.sv* %260, i32 0, i32 0
  %261 = load i8*, i8** %sv_any194, align 8
  %262 = bitcast i8* %261 to %struct.xpviv*
  %xiv_iv195 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %262, i32 0, i32 3
  store i64 %259, i64* %xiv_iv195, align 8
  %263 = load double, double* %nv, align 8
  %264 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any196 = getelementptr inbounds %struct.sv, %struct.sv* %264, i32 0, i32 0
  %265 = load i8*, i8** %sv_any196, align 8
  %266 = bitcast i8* %265 to %struct.xpvnv*
  %xnv_nv197 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %266, i32 0, i32 4
  store double %263, double* %xnv_nv197, align 8
  %267 = load %struct.magic*, %struct.magic** %magic, align 8
  %268 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any198 = getelementptr inbounds %struct.sv, %struct.sv* %268, i32 0, i32 0
  %269 = load i8*, i8** %sv_any198, align 8
  %270 = bitcast i8* %269 to %struct.xpvmg*
  %xmg_magic199 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %270, i32 0, i32 5
  store %struct.magic* %267, %struct.magic** %xmg_magic199, align 8
  %271 = load %struct.hv*, %struct.hv** %stash, align 8
  %272 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any200 = getelementptr inbounds %struct.sv, %struct.sv* %272, i32 0, i32 0
  %273 = load i8*, i8** %sv_any200, align 8
  %274 = bitcast i8* %273 to %struct.xpvmg*
  %xmg_stash201 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %274, i32 0, i32 6
  store %struct.hv* %271, %struct.hv** %xmg_stash201, align 8
  %275 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any202 = getelementptr inbounds %struct.sv, %struct.sv* %275, i32 0, i32 0
  %276 = load i8*, i8** %sv_any202, align 8
  %277 = bitcast i8* %276 to %struct.xpvlv*
  %xlv_targoff = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %277, i32 0, i32 7
  store i64 0, i64* %xlv_targoff, align 8
  %278 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any203 = getelementptr inbounds %struct.sv, %struct.sv* %278, i32 0, i32 0
  %279 = load i8*, i8** %sv_any203, align 8
  %280 = bitcast i8* %279 to %struct.xpvlv*
  %xlv_targlen = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %280, i32 0, i32 8
  store i64 0, i64* %xlv_targlen, align 8
  %281 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any204 = getelementptr inbounds %struct.sv, %struct.sv* %281, i32 0, i32 0
  %282 = load i8*, i8** %sv_any204, align 8
  %283 = bitcast i8* %282 to %struct.xpvlv*
  %xlv_targ = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %283, i32 0, i32 9
  store %struct.sv* null, %struct.sv** %xlv_targ, align 8
  %284 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any205 = getelementptr inbounds %struct.sv, %struct.sv* %284, i32 0, i32 0
  %285 = load i8*, i8** %sv_any205, align 8
  %286 = bitcast i8* %285 to %struct.xpvlv*
  %xlv_type = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %286, i32 0, i32 10
  store i8 0, i8* %xlv_type, align 1
  br label %sw.epilog.355

sw.bb.206:                                        ; preds = %sw.epilog
  %call207 = call %struct.xpvav* @S_new_xpvav()
  %287 = bitcast %struct.xpvav* %call207 to i8*
  %288 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any208 = getelementptr inbounds %struct.sv, %struct.sv* %288, i32 0, i32 0
  store i8* %287, i8** %sv_any208, align 8
  %289 = load i8*, i8** %pv, align 8
  %tobool209 = icmp ne i8* %289, null
  br i1 %tobool209, label %if.then.210, label %if.end.211

if.then.210:                                      ; preds = %sw.bb.206
  %290 = load i8*, i8** %pv, align 8
  call void @Perl_safesysfree(i8* %290)
  br label %if.end.211

if.end.211:                                       ; preds = %if.then.210, %sw.bb.206
  %291 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any212 = getelementptr inbounds %struct.sv, %struct.sv* %291, i32 0, i32 0
  %292 = load i8*, i8** %sv_any212, align 8
  %293 = bitcast i8* %292 to %struct.xpv*
  %xpv_pv213 = getelementptr inbounds %struct.xpv, %struct.xpv* %293, i32 0, i32 0
  store i8* null, i8** %xpv_pv213, align 8
  %294 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any214 = getelementptr inbounds %struct.sv, %struct.sv* %294, i32 0, i32 0
  %295 = load i8*, i8** %sv_any214, align 8
  %296 = bitcast i8* %295 to %struct.xpvav*
  %xav_max = getelementptr inbounds %struct.xpvav, %struct.xpvav* %296, i32 0, i32 2
  store i64 -1, i64* %xav_max, align 8
  %297 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any215 = getelementptr inbounds %struct.sv, %struct.sv* %297, i32 0, i32 0
  %298 = load i8*, i8** %sv_any215, align 8
  %299 = bitcast i8* %298 to %struct.xpvav*
  %xav_fill = getelementptr inbounds %struct.xpvav, %struct.xpvav* %299, i32 0, i32 1
  store i64 -1, i64* %xav_fill, align 8
  %300 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any216 = getelementptr inbounds %struct.sv, %struct.sv* %300, i32 0, i32 0
  %301 = load i8*, i8** %sv_any216, align 8
  %302 = bitcast i8* %301 to %struct.xpviv*
  %xiv_iv217 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %302, i32 0, i32 3
  store i64 0, i64* %xiv_iv217, align 8
  %303 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any218 = getelementptr inbounds %struct.sv, %struct.sv* %303, i32 0, i32 0
  %304 = load i8*, i8** %sv_any218, align 8
  %305 = bitcast i8* %304 to %struct.xpvnv*
  %xnv_nv219 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %305, i32 0, i32 4
  store double 0.000000e+00, double* %xnv_nv219, align 8
  %306 = load %struct.magic*, %struct.magic** %magic, align 8
  %307 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any220 = getelementptr inbounds %struct.sv, %struct.sv* %307, i32 0, i32 0
  %308 = load i8*, i8** %sv_any220, align 8
  %309 = bitcast i8* %308 to %struct.xpvmg*
  %xmg_magic221 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %309, i32 0, i32 5
  store %struct.magic* %306, %struct.magic** %xmg_magic221, align 8
  %310 = load %struct.hv*, %struct.hv** %stash, align 8
  %311 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any222 = getelementptr inbounds %struct.sv, %struct.sv* %311, i32 0, i32 0
  %312 = load i8*, i8** %sv_any222, align 8
  %313 = bitcast i8* %312 to %struct.xpvmg*
  %xmg_stash223 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %313, i32 0, i32 6
  store %struct.hv* %310, %struct.hv** %xmg_stash223, align 8
  %314 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any224 = getelementptr inbounds %struct.sv, %struct.sv* %314, i32 0, i32 0
  %315 = load i8*, i8** %sv_any224, align 8
  %316 = bitcast i8* %315 to %struct.xpvav*
  %xav_alloc = getelementptr inbounds %struct.xpvav, %struct.xpvav* %316, i32 0, i32 7
  store %struct.sv** null, %struct.sv*** %xav_alloc, align 8
  %317 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any225 = getelementptr inbounds %struct.sv, %struct.sv* %317, i32 0, i32 0
  %318 = load i8*, i8** %sv_any225, align 8
  %319 = bitcast i8* %318 to %struct.xpvav*
  %xav_arylen = getelementptr inbounds %struct.xpvav, %struct.xpvav* %319, i32 0, i32 8
  store %struct.sv* null, %struct.sv** %xav_arylen, align 8
  %320 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any226 = getelementptr inbounds %struct.sv, %struct.sv* %320, i32 0, i32 0
  %321 = load i8*, i8** %sv_any226, align 8
  %322 = bitcast i8* %321 to %struct.xpvav*
  %xav_flags = getelementptr inbounds %struct.xpvav, %struct.xpvav* %322, i32 0, i32 9
  store i8 1, i8* %xav_flags, align 1
  br label %sw.epilog.355

sw.bb.227:                                        ; preds = %sw.epilog
  %call228 = call %struct.xpvhv* @S_new_xpvhv()
  %323 = bitcast %struct.xpvhv* %call228 to i8*
  %324 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any229 = getelementptr inbounds %struct.sv, %struct.sv* %324, i32 0, i32 0
  store i8* %323, i8** %sv_any229, align 8
  %325 = load i8*, i8** %pv, align 8
  %tobool230 = icmp ne i8* %325, null
  br i1 %tobool230, label %if.then.231, label %if.end.232

if.then.231:                                      ; preds = %sw.bb.227
  %326 = load i8*, i8** %pv, align 8
  call void @Perl_safesysfree(i8* %326)
  br label %if.end.232

if.end.232:                                       ; preds = %if.then.231, %sw.bb.227
  %327 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any233 = getelementptr inbounds %struct.sv, %struct.sv* %327, i32 0, i32 0
  %328 = load i8*, i8** %sv_any233, align 8
  %329 = bitcast i8* %328 to %struct.xpv*
  %xpv_pv234 = getelementptr inbounds %struct.xpv, %struct.xpv* %329, i32 0, i32 0
  store i8* null, i8** %xpv_pv234, align 8
  %330 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any235 = getelementptr inbounds %struct.sv, %struct.sv* %330, i32 0, i32 0
  %331 = load i8*, i8** %sv_any235, align 8
  %332 = bitcast i8* %331 to %struct.xpvhv*
  %xhv_fill = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %332, i32 0, i32 1
  store i64 0, i64* %xhv_fill, align 8
  %333 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any236 = getelementptr inbounds %struct.sv, %struct.sv* %333, i32 0, i32 0
  %334 = load i8*, i8** %sv_any236, align 8
  %335 = bitcast i8* %334 to %struct.xpvhv*
  %xhv_max = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %335, i32 0, i32 2
  store i64 0, i64* %xhv_max, align 8
  %336 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any237 = getelementptr inbounds %struct.sv, %struct.sv* %336, i32 0, i32 0
  %337 = load i8*, i8** %sv_any237, align 8
  %338 = bitcast i8* %337 to %struct.xpvhv*
  %xhv_keys = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %338, i32 0, i32 3
  store i64 0, i64* %xhv_keys, align 8
  %339 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any238 = getelementptr inbounds %struct.sv, %struct.sv* %339, i32 0, i32 0
  %340 = load i8*, i8** %sv_any238, align 8
  %341 = bitcast i8* %340 to %struct.xpvhv*
  %xnv_nv239 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %341, i32 0, i32 4
  store double 0.000000e+00, double* %xnv_nv239, align 8
  %342 = load %struct.magic*, %struct.magic** %magic, align 8
  %343 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any240 = getelementptr inbounds %struct.sv, %struct.sv* %343, i32 0, i32 0
  %344 = load i8*, i8** %sv_any240, align 8
  %345 = bitcast i8* %344 to %struct.xpvmg*
  %xmg_magic241 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %345, i32 0, i32 5
  store %struct.magic* %342, %struct.magic** %xmg_magic241, align 8
  %346 = load %struct.hv*, %struct.hv** %stash, align 8
  %347 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any242 = getelementptr inbounds %struct.sv, %struct.sv* %347, i32 0, i32 0
  %348 = load i8*, i8** %sv_any242, align 8
  %349 = bitcast i8* %348 to %struct.xpvmg*
  %xmg_stash243 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %349, i32 0, i32 6
  store %struct.hv* %346, %struct.hv** %xmg_stash243, align 8
  %350 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any244 = getelementptr inbounds %struct.sv, %struct.sv* %350, i32 0, i32 0
  %351 = load i8*, i8** %sv_any244, align 8
  %352 = bitcast i8* %351 to %struct.xpvhv*
  %xhv_riter = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %352, i32 0, i32 7
  store i32 0, i32* %xhv_riter, align 4
  %353 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any245 = getelementptr inbounds %struct.sv, %struct.sv* %353, i32 0, i32 0
  %354 = load i8*, i8** %sv_any245, align 8
  %355 = bitcast i8* %354 to %struct.xpvhv*
  %xhv_eiter = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %355, i32 0, i32 8
  store %struct.he* null, %struct.he** %xhv_eiter, align 8
  %356 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any246 = getelementptr inbounds %struct.sv, %struct.sv* %356, i32 0, i32 0
  %357 = load i8*, i8** %sv_any246, align 8
  %358 = bitcast i8* %357 to %struct.xpvhv*
  %xhv_pmroot = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %358, i32 0, i32 9
  store %struct.pmop* null, %struct.pmop** %xhv_pmroot, align 8
  %359 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any247 = getelementptr inbounds %struct.sv, %struct.sv* %359, i32 0, i32 0
  %360 = load i8*, i8** %sv_any247, align 8
  %361 = bitcast i8* %360 to %struct.xpvhv*
  %xhv_name = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %361, i32 0, i32 10
  store i8* null, i8** %xhv_name, align 8
  br label %sw.epilog.355

sw.bb.248:                                        ; preds = %sw.epilog
  %call249 = call %struct.xpvcv* @S_new_xpvcv()
  %362 = bitcast %struct.xpvcv* %call249 to i8*
  %363 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any250 = getelementptr inbounds %struct.sv, %struct.sv* %363, i32 0, i32 0
  store i8* %362, i8** %sv_any250, align 8
  %364 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any251 = getelementptr inbounds %struct.sv, %struct.sv* %364, i32 0, i32 0
  %365 = load i8*, i8** %sv_any251, align 8
  call void @llvm.memset.p0i8.i64(i8* %365, i8 0, i64 144, i32 1, i1 false)
  %366 = load i8*, i8** %pv, align 8
  %367 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any252 = getelementptr inbounds %struct.sv, %struct.sv* %367, i32 0, i32 0
  %368 = load i8*, i8** %sv_any252, align 8
  %369 = bitcast i8* %368 to %struct.xpv*
  %xpv_pv253 = getelementptr inbounds %struct.xpv, %struct.xpv* %369, i32 0, i32 0
  store i8* %366, i8** %xpv_pv253, align 8
  %370 = load i32, i32* %cur, align 4
  %conv254 = zext i32 %370 to i64
  %371 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any255 = getelementptr inbounds %struct.sv, %struct.sv* %371, i32 0, i32 0
  %372 = load i8*, i8** %sv_any255, align 8
  %373 = bitcast i8* %372 to %struct.xpv*
  %xpv_cur256 = getelementptr inbounds %struct.xpv, %struct.xpv* %373, i32 0, i32 1
  store i64 %conv254, i64* %xpv_cur256, align 8
  %374 = load i32, i32* %len, align 4
  %conv257 = zext i32 %374 to i64
  %375 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any258 = getelementptr inbounds %struct.sv, %struct.sv* %375, i32 0, i32 0
  %376 = load i8*, i8** %sv_any258, align 8
  %377 = bitcast i8* %376 to %struct.xpv*
  %xpv_len259 = getelementptr inbounds %struct.xpv, %struct.xpv* %377, i32 0, i32 2
  store i64 %conv257, i64* %xpv_len259, align 8
  %378 = load i64, i64* %iv, align 8
  %379 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any260 = getelementptr inbounds %struct.sv, %struct.sv* %379, i32 0, i32 0
  %380 = load i8*, i8** %sv_any260, align 8
  %381 = bitcast i8* %380 to %struct.xpviv*
  %xiv_iv261 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %381, i32 0, i32 3
  store i64 %378, i64* %xiv_iv261, align 8
  %382 = load double, double* %nv, align 8
  %383 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any262 = getelementptr inbounds %struct.sv, %struct.sv* %383, i32 0, i32 0
  %384 = load i8*, i8** %sv_any262, align 8
  %385 = bitcast i8* %384 to %struct.xpvnv*
  %xnv_nv263 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %385, i32 0, i32 4
  store double %382, double* %xnv_nv263, align 8
  %386 = load %struct.magic*, %struct.magic** %magic, align 8
  %387 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any264 = getelementptr inbounds %struct.sv, %struct.sv* %387, i32 0, i32 0
  %388 = load i8*, i8** %sv_any264, align 8
  %389 = bitcast i8* %388 to %struct.xpvmg*
  %xmg_magic265 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %389, i32 0, i32 5
  store %struct.magic* %386, %struct.magic** %xmg_magic265, align 8
  %390 = load %struct.hv*, %struct.hv** %stash, align 8
  %391 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any266 = getelementptr inbounds %struct.sv, %struct.sv* %391, i32 0, i32 0
  %392 = load i8*, i8** %sv_any266, align 8
  %393 = bitcast i8* %392 to %struct.xpvmg*
  %xmg_stash267 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %393, i32 0, i32 6
  store %struct.hv* %390, %struct.hv** %xmg_stash267, align 8
  br label %sw.epilog.355

sw.bb.268:                                        ; preds = %sw.epilog
  %call269 = call i8* @Perl_safesysmalloc(i64 96)
  %394 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any270 = getelementptr inbounds %struct.sv, %struct.sv* %394, i32 0, i32 0
  store i8* %call269, i8** %sv_any270, align 8
  %395 = load i8*, i8** %pv, align 8
  %396 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any271 = getelementptr inbounds %struct.sv, %struct.sv* %396, i32 0, i32 0
  %397 = load i8*, i8** %sv_any271, align 8
  %398 = bitcast i8* %397 to %struct.xpv*
  %xpv_pv272 = getelementptr inbounds %struct.xpv, %struct.xpv* %398, i32 0, i32 0
  store i8* %395, i8** %xpv_pv272, align 8
  %399 = load i32, i32* %cur, align 4
  %conv273 = zext i32 %399 to i64
  %400 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any274 = getelementptr inbounds %struct.sv, %struct.sv* %400, i32 0, i32 0
  %401 = load i8*, i8** %sv_any274, align 8
  %402 = bitcast i8* %401 to %struct.xpv*
  %xpv_cur275 = getelementptr inbounds %struct.xpv, %struct.xpv* %402, i32 0, i32 1
  store i64 %conv273, i64* %xpv_cur275, align 8
  %403 = load i32, i32* %len, align 4
  %conv276 = zext i32 %403 to i64
  %404 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any277 = getelementptr inbounds %struct.sv, %struct.sv* %404, i32 0, i32 0
  %405 = load i8*, i8** %sv_any277, align 8
  %406 = bitcast i8* %405 to %struct.xpv*
  %xpv_len278 = getelementptr inbounds %struct.xpv, %struct.xpv* %406, i32 0, i32 2
  store i64 %conv276, i64* %xpv_len278, align 8
  %407 = load i64, i64* %iv, align 8
  %408 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any279 = getelementptr inbounds %struct.sv, %struct.sv* %408, i32 0, i32 0
  %409 = load i8*, i8** %sv_any279, align 8
  %410 = bitcast i8* %409 to %struct.xpviv*
  %xiv_iv280 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %410, i32 0, i32 3
  store i64 %407, i64* %xiv_iv280, align 8
  %411 = load double, double* %nv, align 8
  %412 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any281 = getelementptr inbounds %struct.sv, %struct.sv* %412, i32 0, i32 0
  %413 = load i8*, i8** %sv_any281, align 8
  %414 = bitcast i8* %413 to %struct.xpvnv*
  %xnv_nv282 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %414, i32 0, i32 4
  store double %411, double* %xnv_nv282, align 8
  %415 = load %struct.magic*, %struct.magic** %magic, align 8
  %416 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any283 = getelementptr inbounds %struct.sv, %struct.sv* %416, i32 0, i32 0
  %417 = load i8*, i8** %sv_any283, align 8
  %418 = bitcast i8* %417 to %struct.xpvmg*
  %xmg_magic284 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %418, i32 0, i32 5
  store %struct.magic* %415, %struct.magic** %xmg_magic284, align 8
  %419 = load %struct.hv*, %struct.hv** %stash, align 8
  %420 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any285 = getelementptr inbounds %struct.sv, %struct.sv* %420, i32 0, i32 0
  %421 = load i8*, i8** %sv_any285, align 8
  %422 = bitcast i8* %421 to %struct.xpvmg*
  %xmg_stash286 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %422, i32 0, i32 6
  store %struct.hv* %419, %struct.hv** %xmg_stash286, align 8
  %423 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any287 = getelementptr inbounds %struct.sv, %struct.sv* %423, i32 0, i32 0
  %424 = load i8*, i8** %sv_any287, align 8
  %425 = bitcast i8* %424 to %struct.xpvgv*
  %xgv_gp = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %425, i32 0, i32 7
  store %struct.gp* null, %struct.gp** %xgv_gp, align 8
  %426 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any288 = getelementptr inbounds %struct.sv, %struct.sv* %426, i32 0, i32 0
  %427 = load i8*, i8** %sv_any288, align 8
  %428 = bitcast i8* %427 to %struct.xpvgv*
  %xgv_name = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %428, i32 0, i32 8
  store i8* null, i8** %xgv_name, align 8
  %429 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any289 = getelementptr inbounds %struct.sv, %struct.sv* %429, i32 0, i32 0
  %430 = load i8*, i8** %sv_any289, align 8
  %431 = bitcast i8* %430 to %struct.xpvgv*
  %xgv_namelen = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %431, i32 0, i32 9
  store i64 0, i64* %xgv_namelen, align 8
  %432 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any290 = getelementptr inbounds %struct.sv, %struct.sv* %432, i32 0, i32 0
  %433 = load i8*, i8** %sv_any290, align 8
  %434 = bitcast i8* %433 to %struct.xpvgv*
  %xgv_stash = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %434, i32 0, i32 10
  store %struct.hv* null, %struct.hv** %xgv_stash, align 8
  %435 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any291 = getelementptr inbounds %struct.sv, %struct.sv* %435, i32 0, i32 0
  %436 = load i8*, i8** %sv_any291, align 8
  %437 = bitcast i8* %436 to %struct.xpvgv*
  %xgv_flags = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %437, i32 0, i32 11
  store i8 0, i8* %xgv_flags, align 1
  br label %sw.epilog.355

sw.bb.292:                                        ; preds = %sw.epilog
  %call293 = call %struct.xpvbm* @S_new_xpvbm()
  %438 = bitcast %struct.xpvbm* %call293 to i8*
  %439 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any294 = getelementptr inbounds %struct.sv, %struct.sv* %439, i32 0, i32 0
  store i8* %438, i8** %sv_any294, align 8
  %440 = load i8*, i8** %pv, align 8
  %441 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any295 = getelementptr inbounds %struct.sv, %struct.sv* %441, i32 0, i32 0
  %442 = load i8*, i8** %sv_any295, align 8
  %443 = bitcast i8* %442 to %struct.xpv*
  %xpv_pv296 = getelementptr inbounds %struct.xpv, %struct.xpv* %443, i32 0, i32 0
  store i8* %440, i8** %xpv_pv296, align 8
  %444 = load i32, i32* %cur, align 4
  %conv297 = zext i32 %444 to i64
  %445 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any298 = getelementptr inbounds %struct.sv, %struct.sv* %445, i32 0, i32 0
  %446 = load i8*, i8** %sv_any298, align 8
  %447 = bitcast i8* %446 to %struct.xpv*
  %xpv_cur299 = getelementptr inbounds %struct.xpv, %struct.xpv* %447, i32 0, i32 1
  store i64 %conv297, i64* %xpv_cur299, align 8
  %448 = load i32, i32* %len, align 4
  %conv300 = zext i32 %448 to i64
  %449 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any301 = getelementptr inbounds %struct.sv, %struct.sv* %449, i32 0, i32 0
  %450 = load i8*, i8** %sv_any301, align 8
  %451 = bitcast i8* %450 to %struct.xpv*
  %xpv_len302 = getelementptr inbounds %struct.xpv, %struct.xpv* %451, i32 0, i32 2
  store i64 %conv300, i64* %xpv_len302, align 8
  %452 = load i64, i64* %iv, align 8
  %453 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any303 = getelementptr inbounds %struct.sv, %struct.sv* %453, i32 0, i32 0
  %454 = load i8*, i8** %sv_any303, align 8
  %455 = bitcast i8* %454 to %struct.xpviv*
  %xiv_iv304 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %455, i32 0, i32 3
  store i64 %452, i64* %xiv_iv304, align 8
  %456 = load double, double* %nv, align 8
  %457 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any305 = getelementptr inbounds %struct.sv, %struct.sv* %457, i32 0, i32 0
  %458 = load i8*, i8** %sv_any305, align 8
  %459 = bitcast i8* %458 to %struct.xpvnv*
  %xnv_nv306 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %459, i32 0, i32 4
  store double %456, double* %xnv_nv306, align 8
  %460 = load %struct.magic*, %struct.magic** %magic, align 8
  %461 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any307 = getelementptr inbounds %struct.sv, %struct.sv* %461, i32 0, i32 0
  %462 = load i8*, i8** %sv_any307, align 8
  %463 = bitcast i8* %462 to %struct.xpvmg*
  %xmg_magic308 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %463, i32 0, i32 5
  store %struct.magic* %460, %struct.magic** %xmg_magic308, align 8
  %464 = load %struct.hv*, %struct.hv** %stash, align 8
  %465 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any309 = getelementptr inbounds %struct.sv, %struct.sv* %465, i32 0, i32 0
  %466 = load i8*, i8** %sv_any309, align 8
  %467 = bitcast i8* %466 to %struct.xpvmg*
  %xmg_stash310 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %467, i32 0, i32 6
  store %struct.hv* %464, %struct.hv** %xmg_stash310, align 8
  %468 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any311 = getelementptr inbounds %struct.sv, %struct.sv* %468, i32 0, i32 0
  %469 = load i8*, i8** %sv_any311, align 8
  %470 = bitcast i8* %469 to %struct.xpvbm*
  %xbm_rare = getelementptr inbounds %struct.xpvbm, %struct.xpvbm* %470, i32 0, i32 9
  store i8 0, i8* %xbm_rare, align 1
  %471 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any312 = getelementptr inbounds %struct.sv, %struct.sv* %471, i32 0, i32 0
  %472 = load i8*, i8** %sv_any312, align 8
  %473 = bitcast i8* %472 to %struct.xpvbm*
  %xbm_useful = getelementptr inbounds %struct.xpvbm, %struct.xpvbm* %473, i32 0, i32 7
  store i32 0, i32* %xbm_useful, align 4
  %474 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any313 = getelementptr inbounds %struct.sv, %struct.sv* %474, i32 0, i32 0
  %475 = load i8*, i8** %sv_any313, align 8
  %476 = bitcast i8* %475 to %struct.xpvbm*
  %xbm_previous = getelementptr inbounds %struct.xpvbm, %struct.xpvbm* %476, i32 0, i32 8
  store i16 0, i16* %xbm_previous, align 2
  br label %sw.epilog.355

sw.bb.314:                                        ; preds = %sw.epilog
  %call315 = call i8* @Perl_safesysmalloc(i64 152)
  %477 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any316 = getelementptr inbounds %struct.sv, %struct.sv* %477, i32 0, i32 0
  store i8* %call315, i8** %sv_any316, align 8
  %478 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any317 = getelementptr inbounds %struct.sv, %struct.sv* %478, i32 0, i32 0
  %479 = load i8*, i8** %sv_any317, align 8
  call void @llvm.memset.p0i8.i64(i8* %479, i8 0, i64 152, i32 1, i1 false)
  %480 = load i8*, i8** %pv, align 8
  %481 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any318 = getelementptr inbounds %struct.sv, %struct.sv* %481, i32 0, i32 0
  %482 = load i8*, i8** %sv_any318, align 8
  %483 = bitcast i8* %482 to %struct.xpv*
  %xpv_pv319 = getelementptr inbounds %struct.xpv, %struct.xpv* %483, i32 0, i32 0
  store i8* %480, i8** %xpv_pv319, align 8
  %484 = load i32, i32* %cur, align 4
  %conv320 = zext i32 %484 to i64
  %485 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any321 = getelementptr inbounds %struct.sv, %struct.sv* %485, i32 0, i32 0
  %486 = load i8*, i8** %sv_any321, align 8
  %487 = bitcast i8* %486 to %struct.xpv*
  %xpv_cur322 = getelementptr inbounds %struct.xpv, %struct.xpv* %487, i32 0, i32 1
  store i64 %conv320, i64* %xpv_cur322, align 8
  %488 = load i32, i32* %len, align 4
  %conv323 = zext i32 %488 to i64
  %489 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any324 = getelementptr inbounds %struct.sv, %struct.sv* %489, i32 0, i32 0
  %490 = load i8*, i8** %sv_any324, align 8
  %491 = bitcast i8* %490 to %struct.xpv*
  %xpv_len325 = getelementptr inbounds %struct.xpv, %struct.xpv* %491, i32 0, i32 2
  store i64 %conv323, i64* %xpv_len325, align 8
  %492 = load i64, i64* %iv, align 8
  %493 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any326 = getelementptr inbounds %struct.sv, %struct.sv* %493, i32 0, i32 0
  %494 = load i8*, i8** %sv_any326, align 8
  %495 = bitcast i8* %494 to %struct.xpviv*
  %xiv_iv327 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %495, i32 0, i32 3
  store i64 %492, i64* %xiv_iv327, align 8
  %496 = load double, double* %nv, align 8
  %497 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any328 = getelementptr inbounds %struct.sv, %struct.sv* %497, i32 0, i32 0
  %498 = load i8*, i8** %sv_any328, align 8
  %499 = bitcast i8* %498 to %struct.xpvnv*
  %xnv_nv329 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %499, i32 0, i32 4
  store double %496, double* %xnv_nv329, align 8
  %500 = load %struct.magic*, %struct.magic** %magic, align 8
  %501 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any330 = getelementptr inbounds %struct.sv, %struct.sv* %501, i32 0, i32 0
  %502 = load i8*, i8** %sv_any330, align 8
  %503 = bitcast i8* %502 to %struct.xpvmg*
  %xmg_magic331 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %503, i32 0, i32 5
  store %struct.magic* %500, %struct.magic** %xmg_magic331, align 8
  %504 = load %struct.hv*, %struct.hv** %stash, align 8
  %505 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any332 = getelementptr inbounds %struct.sv, %struct.sv* %505, i32 0, i32 0
  %506 = load i8*, i8** %sv_any332, align 8
  %507 = bitcast i8* %506 to %struct.xpvmg*
  %xmg_stash333 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %507, i32 0, i32 6
  store %struct.hv* %504, %struct.hv** %xmg_stash333, align 8
  br label %sw.epilog.355

sw.bb.334:                                        ; preds = %sw.epilog
  %call335 = call i8* @Perl_safesysmalloc(i64 168)
  %508 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any336 = getelementptr inbounds %struct.sv, %struct.sv* %508, i32 0, i32 0
  store i8* %call335, i8** %sv_any336, align 8
  %509 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any337 = getelementptr inbounds %struct.sv, %struct.sv* %509, i32 0, i32 0
  %510 = load i8*, i8** %sv_any337, align 8
  call void @llvm.memset.p0i8.i64(i8* %510, i8 0, i64 168, i32 1, i1 false)
  %511 = load i8*, i8** %pv, align 8
  %512 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any338 = getelementptr inbounds %struct.sv, %struct.sv* %512, i32 0, i32 0
  %513 = load i8*, i8** %sv_any338, align 8
  %514 = bitcast i8* %513 to %struct.xpv*
  %xpv_pv339 = getelementptr inbounds %struct.xpv, %struct.xpv* %514, i32 0, i32 0
  store i8* %511, i8** %xpv_pv339, align 8
  %515 = load i32, i32* %cur, align 4
  %conv340 = zext i32 %515 to i64
  %516 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any341 = getelementptr inbounds %struct.sv, %struct.sv* %516, i32 0, i32 0
  %517 = load i8*, i8** %sv_any341, align 8
  %518 = bitcast i8* %517 to %struct.xpv*
  %xpv_cur342 = getelementptr inbounds %struct.xpv, %struct.xpv* %518, i32 0, i32 1
  store i64 %conv340, i64* %xpv_cur342, align 8
  %519 = load i32, i32* %len, align 4
  %conv343 = zext i32 %519 to i64
  %520 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any344 = getelementptr inbounds %struct.sv, %struct.sv* %520, i32 0, i32 0
  %521 = load i8*, i8** %sv_any344, align 8
  %522 = bitcast i8* %521 to %struct.xpv*
  %xpv_len345 = getelementptr inbounds %struct.xpv, %struct.xpv* %522, i32 0, i32 2
  store i64 %conv343, i64* %xpv_len345, align 8
  %523 = load i64, i64* %iv, align 8
  %524 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any346 = getelementptr inbounds %struct.sv, %struct.sv* %524, i32 0, i32 0
  %525 = load i8*, i8** %sv_any346, align 8
  %526 = bitcast i8* %525 to %struct.xpviv*
  %xiv_iv347 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %526, i32 0, i32 3
  store i64 %523, i64* %xiv_iv347, align 8
  %527 = load double, double* %nv, align 8
  %528 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any348 = getelementptr inbounds %struct.sv, %struct.sv* %528, i32 0, i32 0
  %529 = load i8*, i8** %sv_any348, align 8
  %530 = bitcast i8* %529 to %struct.xpvnv*
  %xnv_nv349 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %530, i32 0, i32 4
  store double %527, double* %xnv_nv349, align 8
  %531 = load %struct.magic*, %struct.magic** %magic, align 8
  %532 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any350 = getelementptr inbounds %struct.sv, %struct.sv* %532, i32 0, i32 0
  %533 = load i8*, i8** %sv_any350, align 8
  %534 = bitcast i8* %533 to %struct.xpvmg*
  %xmg_magic351 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %534, i32 0, i32 5
  store %struct.magic* %531, %struct.magic** %xmg_magic351, align 8
  %535 = load %struct.hv*, %struct.hv** %stash, align 8
  %536 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any352 = getelementptr inbounds %struct.sv, %struct.sv* %536, i32 0, i32 0
  %537 = load i8*, i8** %sv_any352, align 8
  %538 = bitcast i8* %537 to %struct.xpvmg*
  %xmg_stash353 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %538, i32 0, i32 6
  store %struct.hv* %535, %struct.hv** %xmg_stash353, align 8
  %539 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any354 = getelementptr inbounds %struct.sv, %struct.sv* %539, i32 0, i32 0
  %540 = load i8*, i8** %sv_any354, align 8
  %541 = bitcast i8* %540 to %struct.xpvio*
  %xio_page_len = getelementptr inbounds %struct.xpvio, %struct.xpvio* %541, i32 0, i32 12
  store i64 60, i64* %xio_page_len, align 8
  br label %sw.epilog.355

sw.epilog.355:                                    ; preds = %sw.epilog, %sw.bb.334, %sw.bb.314, %sw.bb.292, %sw.bb.268, %sw.bb.248, %if.end.232, %if.end.211, %sw.bb.183, %sw.bb.164, %sw.bb.149, %if.end.146, %sw.bb.109, %sw.bb.104, %sw.bb.99, %sw.bb.94
  %542 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags356 = getelementptr inbounds %struct.sv, %struct.sv* %542, i32 0, i32 2
  %543 = load i32, i32* %sv_flags356, align 4
  %and357 = and i32 %543, -256
  store i32 %and357, i32* %sv_flags356, align 4
  %544 = load i32, i32* %mt.addr, align 4
  %545 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags358 = getelementptr inbounds %struct.sv, %struct.sv* %545, i32 0, i32 2
  %546 = load i32, i32* %sv_flags358, align 4
  %or359 = or i32 %546, %544
  store i32 %or359, i32* %sv_flags358, align 4
  store i8 1, i8* %retval
  br label %return

return:                                           ; preds = %sw.epilog.355, %if.then.8
  %547 = load i8, i8* %retval
  ret i8 %547
}

; Function Attrs: nounwind uwtable
define void @Perl_sv_force_normal(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_force_normal_flags(%struct.sv* %0, i32 0)
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @Perl_sv_backoff(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %s = alloca i8*, align 8
  %tmp = alloca i64, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 0
  %1 = load i8*, i8** %sv_any, align 8
  %2 = bitcast i8* %1 to %struct.xpviv*
  %xiv_iv = getelementptr inbounds %struct.xpviv, %struct.xpviv* %2, i32 0, i32 3
  %3 = load i64, i64* %xiv_iv, align 8
  %tobool = icmp ne i64 %3, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any1 = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 0
  %5 = load i8*, i8** %sv_any1, align 8
  %6 = bitcast i8* %5 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %6, i32 0, i32 0
  %7 = load i8*, i8** %xpv_pv, align 8
  store i8* %7, i8** %s, align 8
  %8 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any2 = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 0
  %9 = load i8*, i8** %sv_any2, align 8
  %10 = bitcast i8* %9 to %struct.xpviv*
  %xiv_iv3 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %10, i32 0, i32 3
  %11 = load i64, i64* %xiv_iv3, align 8
  %12 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any4 = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 0
  %13 = load i8*, i8** %sv_any4, align 8
  %14 = bitcast i8* %13 to %struct.xpv*
  %xpv_len = getelementptr inbounds %struct.xpv, %struct.xpv* %14, i32 0, i32 2
  %15 = load i64, i64* %xpv_len, align 8
  %add = add i64 %15, %11
  store i64 %add, i64* %xpv_len, align 8
  %16 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any5 = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 0
  %17 = load i8*, i8** %sv_any5, align 8
  %18 = bitcast i8* %17 to %struct.xpviv*
  %xiv_iv6 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %18, i32 0, i32 3
  %19 = load i64, i64* %xiv_iv6, align 8
  %20 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any7 = getelementptr inbounds %struct.sv, %struct.sv* %20, i32 0, i32 0
  %21 = load i8*, i8** %sv_any7, align 8
  %22 = bitcast i8* %21 to %struct.xpv*
  %xpv_pv8 = getelementptr inbounds %struct.xpv, %struct.xpv* %22, i32 0, i32 0
  %23 = load i8*, i8** %xpv_pv8, align 8
  %idx.neg = sub i64 0, %19
  %add.ptr = getelementptr inbounds i8, i8* %23, i64 %idx.neg
  store i8* %add.ptr, i8** %xpv_pv8, align 8
  %24 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any9 = getelementptr inbounds %struct.sv, %struct.sv* %24, i32 0, i32 0
  %25 = load i8*, i8** %sv_any9, align 8
  %26 = bitcast i8* %25 to %struct.xpviv*
  %xiv_iv10 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %26, i32 0, i32 3
  store i64 0, i64* %xiv_iv10, align 8
  store i64 0, i64* %tmp
  %27 = load i64, i64* %tmp
  %28 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any11 = getelementptr inbounds %struct.sv, %struct.sv* %28, i32 0, i32 0
  %29 = load i8*, i8** %sv_any11, align 8
  %30 = bitcast i8* %29 to %struct.xpv*
  %xpv_pv12 = getelementptr inbounds %struct.xpv, %struct.xpv* %30, i32 0, i32 0
  %31 = load i8*, i8** %xpv_pv12, align 8
  %32 = load i8*, i8** %s, align 8
  %33 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any13 = getelementptr inbounds %struct.sv, %struct.sv* %33, i32 0, i32 0
  %34 = load i8*, i8** %sv_any13, align 8
  %35 = bitcast i8* %34 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %35, i32 0, i32 1
  %36 = load i64, i64* %xpv_cur, align 8
  %add14 = add i64 %36, 1
  %mul = mul i64 %add14, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %31, i8* %32, i64 %mul, i32 1, i1 false)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %37 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %37, i32 0, i32 2
  %38 = load i32, i32* %sv_flags, align 4
  %and = and i32 %38, -2097153
  store i32 %and, i32* %sv_flags, align 4
  ret i32 0
}

; Function Attrs: nounwind uwtable
define internal void @S_del_xiv(%struct.xpviv* %p) #0 {
entry:
  %p.addr = alloca %struct.xpviv*, align 8
  %xiv = alloca i64*, align 8
  store %struct.xpviv* %p, %struct.xpviv** %p.addr, align 8
  %0 = load %struct.xpviv*, %struct.xpviv** %p.addr, align 8
  %1 = bitcast %struct.xpviv* %0 to i8*
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 ptrtoint (i64* getelementptr inbounds (%struct.xpviv, %struct.xpviv* null, i32 0, i32 3) to i64)
  %2 = bitcast i8* %add.ptr to i64*
  store i64* %2, i64** %xiv, align 8
  %3 = load i64*, i64** @PL_xiv_root, align 8
  %4 = load i64*, i64** %xiv, align 8
  %5 = bitcast i64* %4 to i64**
  store i64* %3, i64** %5, align 8
  %6 = load i64*, i64** %xiv, align 8
  store i64* %6, i64** @PL_xiv_root, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @S_del_xnv(%struct.xpvnv* %p) #0 {
entry:
  %p.addr = alloca %struct.xpvnv*, align 8
  %xnv = alloca double*, align 8
  store %struct.xpvnv* %p, %struct.xpvnv** %p.addr, align 8
  %0 = load %struct.xpvnv*, %struct.xpvnv** %p.addr, align 8
  %1 = bitcast %struct.xpvnv* %0 to i8*
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 ptrtoint (double* getelementptr inbounds (%struct.xpvnv, %struct.xpvnv* null, i32 0, i32 4) to i64)
  %2 = bitcast i8* %add.ptr to double*
  store double* %2, double** %xnv, align 8
  %3 = load double*, double** @PL_xnv_root, align 8
  %4 = load double*, double** %xnv, align 8
  %5 = bitcast double* %4 to double**
  store double* %3, double** %5, align 8
  %6 = load double*, double** %xnv, align 8
  store double* %6, double** @PL_xnv_root, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @S_del_xrv(%struct.xrv* %p) #0 {
entry:
  %p.addr = alloca %struct.xrv*, align 8
  store %struct.xrv* %p, %struct.xrv** %p.addr, align 8
  %0 = load %struct.xrv*, %struct.xrv** @PL_xrv_root, align 8
  %1 = bitcast %struct.xrv* %0 to %struct.sv*
  %2 = load %struct.xrv*, %struct.xrv** %p.addr, align 8
  %xrv_rv = getelementptr inbounds %struct.xrv, %struct.xrv* %2, i32 0, i32 0
  store %struct.sv* %1, %struct.sv** %xrv_rv, align 8
  %3 = load %struct.xrv*, %struct.xrv** %p.addr, align 8
  store %struct.xrv* %3, %struct.xrv** @PL_xrv_root, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @S_del_xpv(%struct.xpv* %p) #0 {
entry:
  %p.addr = alloca %struct.xpv*, align 8
  store %struct.xpv* %p, %struct.xpv** %p.addr, align 8
  %0 = load %struct.xpv*, %struct.xpv** @PL_xpv_root, align 8
  %1 = bitcast %struct.xpv* %0 to i8*
  %2 = load %struct.xpv*, %struct.xpv** %p.addr, align 8
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %2, i32 0, i32 0
  store i8* %1, i8** %xpv_pv, align 8
  %3 = load %struct.xpv*, %struct.xpv** %p.addr, align 8
  store %struct.xpv* %3, %struct.xpv** @PL_xpv_root, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @S_del_xpviv(%struct.xpviv* %p) #0 {
entry:
  %p.addr = alloca %struct.xpviv*, align 8
  store %struct.xpviv* %p, %struct.xpviv** %p.addr, align 8
  %0 = load %struct.xpviv*, %struct.xpviv** @PL_xpviv_root, align 8
  %1 = bitcast %struct.xpviv* %0 to i8*
  %2 = load %struct.xpviv*, %struct.xpviv** %p.addr, align 8
  %xpv_pv = getelementptr inbounds %struct.xpviv, %struct.xpviv* %2, i32 0, i32 0
  store i8* %1, i8** %xpv_pv, align 8
  %3 = load %struct.xpviv*, %struct.xpviv** %p.addr, align 8
  store %struct.xpviv* %3, %struct.xpviv** @PL_xpviv_root, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @S_del_xpvnv(%struct.xpvnv* %p) #0 {
entry:
  %p.addr = alloca %struct.xpvnv*, align 8
  store %struct.xpvnv* %p, %struct.xpvnv** %p.addr, align 8
  %0 = load %struct.xpvnv*, %struct.xpvnv** @PL_xpvnv_root, align 8
  %1 = bitcast %struct.xpvnv* %0 to i8*
  %2 = load %struct.xpvnv*, %struct.xpvnv** %p.addr, align 8
  %xpv_pv = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %2, i32 0, i32 0
  store i8* %1, i8** %xpv_pv, align 8
  %3 = load %struct.xpvnv*, %struct.xpvnv** %p.addr, align 8
  store %struct.xpvnv* %3, %struct.xpvnv** @PL_xpvnv_root, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @S_del_xpvmg(%struct.xpvmg* %p) #0 {
entry:
  %p.addr = alloca %struct.xpvmg*, align 8
  store %struct.xpvmg* %p, %struct.xpvmg** %p.addr, align 8
  %0 = load %struct.xpvmg*, %struct.xpvmg** @PL_xpvmg_root, align 8
  %1 = bitcast %struct.xpvmg* %0 to i8*
  %2 = load %struct.xpvmg*, %struct.xpvmg** %p.addr, align 8
  %xpv_pv = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %2, i32 0, i32 0
  store i8* %1, i8** %xpv_pv, align 8
  %3 = load %struct.xpvmg*, %struct.xpvmg** %p.addr, align 8
  store %struct.xpvmg* %3, %struct.xpvmg** @PL_xpvmg_root, align 8
  ret void
}

declare void @Perl_croak(i8*, ...) #1

; Function Attrs: nounwind uwtable
define internal %struct.xpviv* @S_new_xiv() #0 {
entry:
  %xiv = alloca i64*, align 8
  %0 = load i64*, i64** @PL_xiv_root, align 8
  %tobool = icmp ne i64* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @S_more_xiv()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load i64*, i64** @PL_xiv_root, align 8
  store i64* %1, i64** %xiv, align 8
  %2 = load i64*, i64** %xiv, align 8
  %3 = bitcast i64* %2 to i64**
  %4 = load i64*, i64** %3, align 8
  store i64* %4, i64** @PL_xiv_root, align 8
  %5 = load i64*, i64** %xiv, align 8
  %6 = bitcast i64* %5 to i8*
  %add.ptr = getelementptr inbounds i8, i8* %6, i64 sub (i64 0, i64 ptrtoint (i64* getelementptr inbounds (%struct.xpviv, %struct.xpviv* null, i32 0, i32 3) to i64))
  %7 = bitcast i8* %add.ptr to %struct.xpviv*
  ret %struct.xpviv* %7
}

; Function Attrs: nounwind uwtable
define internal %struct.xpvnv* @S_new_xnv() #0 {
entry:
  %xnv = alloca double*, align 8
  %0 = load double*, double** @PL_xnv_root, align 8
  %tobool = icmp ne double* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @S_more_xnv()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load double*, double** @PL_xnv_root, align 8
  store double* %1, double** %xnv, align 8
  %2 = load double*, double** %xnv, align 8
  %3 = bitcast double* %2 to double**
  %4 = load double*, double** %3, align 8
  store double* %4, double** @PL_xnv_root, align 8
  %5 = load double*, double** %xnv, align 8
  %6 = bitcast double* %5 to i8*
  %add.ptr = getelementptr inbounds i8, i8* %6, i64 sub (i64 0, i64 ptrtoint (double* getelementptr inbounds (%struct.xpvnv, %struct.xpvnv* null, i32 0, i32 4) to i64))
  %7 = bitcast i8* %add.ptr to %struct.xpvnv*
  ret %struct.xpvnv* %7
}

; Function Attrs: nounwind uwtable
define internal %struct.xrv* @S_new_xrv() #0 {
entry:
  %xrv = alloca %struct.xrv*, align 8
  %0 = load %struct.xrv*, %struct.xrv** @PL_xrv_root, align 8
  %tobool = icmp ne %struct.xrv* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @S_more_xrv()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load %struct.xrv*, %struct.xrv** @PL_xrv_root, align 8
  store %struct.xrv* %1, %struct.xrv** %xrv, align 8
  %2 = load %struct.xrv*, %struct.xrv** %xrv, align 8
  %xrv_rv = getelementptr inbounds %struct.xrv, %struct.xrv* %2, i32 0, i32 0
  %3 = load %struct.sv*, %struct.sv** %xrv_rv, align 8
  %4 = bitcast %struct.sv* %3 to %struct.xrv*
  store %struct.xrv* %4, %struct.xrv** @PL_xrv_root, align 8
  %5 = load %struct.xrv*, %struct.xrv** %xrv, align 8
  ret %struct.xrv* %5
}

; Function Attrs: nounwind uwtable
define internal %struct.xpv* @S_new_xpv() #0 {
entry:
  %xpv = alloca %struct.xpv*, align 8
  %0 = load %struct.xpv*, %struct.xpv** @PL_xpv_root, align 8
  %tobool = icmp ne %struct.xpv* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @S_more_xpv()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load %struct.xpv*, %struct.xpv** @PL_xpv_root, align 8
  store %struct.xpv* %1, %struct.xpv** %xpv, align 8
  %2 = load %struct.xpv*, %struct.xpv** %xpv, align 8
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %2, i32 0, i32 0
  %3 = load i8*, i8** %xpv_pv, align 8
  %4 = bitcast i8* %3 to %struct.xpv*
  store %struct.xpv* %4, %struct.xpv** @PL_xpv_root, align 8
  %5 = load %struct.xpv*, %struct.xpv** %xpv, align 8
  ret %struct.xpv* %5
}

; Function Attrs: nounwind uwtable
define internal %struct.xpviv* @S_new_xpviv() #0 {
entry:
  %xpviv = alloca %struct.xpviv*, align 8
  %0 = load %struct.xpviv*, %struct.xpviv** @PL_xpviv_root, align 8
  %tobool = icmp ne %struct.xpviv* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @S_more_xpviv()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load %struct.xpviv*, %struct.xpviv** @PL_xpviv_root, align 8
  store %struct.xpviv* %1, %struct.xpviv** %xpviv, align 8
  %2 = load %struct.xpviv*, %struct.xpviv** %xpviv, align 8
  %xpv_pv = getelementptr inbounds %struct.xpviv, %struct.xpviv* %2, i32 0, i32 0
  %3 = load i8*, i8** %xpv_pv, align 8
  %4 = bitcast i8* %3 to %struct.xpviv*
  store %struct.xpviv* %4, %struct.xpviv** @PL_xpviv_root, align 8
  %5 = load %struct.xpviv*, %struct.xpviv** %xpviv, align 8
  ret %struct.xpviv* %5
}

; Function Attrs: nounwind uwtable
define internal %struct.xpvnv* @S_new_xpvnv() #0 {
entry:
  %xpvnv = alloca %struct.xpvnv*, align 8
  %0 = load %struct.xpvnv*, %struct.xpvnv** @PL_xpvnv_root, align 8
  %tobool = icmp ne %struct.xpvnv* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @S_more_xpvnv()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load %struct.xpvnv*, %struct.xpvnv** @PL_xpvnv_root, align 8
  store %struct.xpvnv* %1, %struct.xpvnv** %xpvnv, align 8
  %2 = load %struct.xpvnv*, %struct.xpvnv** %xpvnv, align 8
  %xpv_pv = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %2, i32 0, i32 0
  %3 = load i8*, i8** %xpv_pv, align 8
  %4 = bitcast i8* %3 to %struct.xpvnv*
  store %struct.xpvnv* %4, %struct.xpvnv** @PL_xpvnv_root, align 8
  %5 = load %struct.xpvnv*, %struct.xpvnv** %xpvnv, align 8
  ret %struct.xpvnv* %5
}

; Function Attrs: nounwind uwtable
define internal %struct.xpvmg* @S_new_xpvmg() #0 {
entry:
  %xpvmg = alloca %struct.xpvmg*, align 8
  %0 = load %struct.xpvmg*, %struct.xpvmg** @PL_xpvmg_root, align 8
  %tobool = icmp ne %struct.xpvmg* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @S_more_xpvmg()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load %struct.xpvmg*, %struct.xpvmg** @PL_xpvmg_root, align 8
  store %struct.xpvmg* %1, %struct.xpvmg** %xpvmg, align 8
  %2 = load %struct.xpvmg*, %struct.xpvmg** %xpvmg, align 8
  %xpv_pv = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %2, i32 0, i32 0
  %3 = load i8*, i8** %xpv_pv, align 8
  %4 = bitcast i8* %3 to %struct.xpvmg*
  store %struct.xpvmg* %4, %struct.xpvmg** @PL_xpvmg_root, align 8
  %5 = load %struct.xpvmg*, %struct.xpvmg** %xpvmg, align 8
  ret %struct.xpvmg* %5
}

; Function Attrs: nounwind uwtable
define internal %struct.xpvlv* @S_new_xpvlv() #0 {
entry:
  %xpvlv = alloca %struct.xpvlv*, align 8
  %0 = load %struct.xpvlv*, %struct.xpvlv** @PL_xpvlv_root, align 8
  %tobool = icmp ne %struct.xpvlv* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @S_more_xpvlv()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load %struct.xpvlv*, %struct.xpvlv** @PL_xpvlv_root, align 8
  store %struct.xpvlv* %1, %struct.xpvlv** %xpvlv, align 8
  %2 = load %struct.xpvlv*, %struct.xpvlv** %xpvlv, align 8
  %xpv_pv = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %2, i32 0, i32 0
  %3 = load i8*, i8** %xpv_pv, align 8
  %4 = bitcast i8* %3 to %struct.xpvlv*
  store %struct.xpvlv* %4, %struct.xpvlv** @PL_xpvlv_root, align 8
  %5 = load %struct.xpvlv*, %struct.xpvlv** %xpvlv, align 8
  ret %struct.xpvlv* %5
}

; Function Attrs: nounwind uwtable
define internal %struct.xpvav* @S_new_xpvav() #0 {
entry:
  %xpvav = alloca %struct.xpvav*, align 8
  %0 = load %struct.xpvav*, %struct.xpvav** @PL_xpvav_root, align 8
  %tobool = icmp ne %struct.xpvav* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @S_more_xpvav()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load %struct.xpvav*, %struct.xpvav** @PL_xpvav_root, align 8
  store %struct.xpvav* %1, %struct.xpvav** %xpvav, align 8
  %2 = load %struct.xpvav*, %struct.xpvav** %xpvav, align 8
  %xav_array = getelementptr inbounds %struct.xpvav, %struct.xpvav* %2, i32 0, i32 0
  %3 = load i8*, i8** %xav_array, align 8
  %4 = bitcast i8* %3 to %struct.xpvav*
  store %struct.xpvav* %4, %struct.xpvav** @PL_xpvav_root, align 8
  %5 = load %struct.xpvav*, %struct.xpvav** %xpvav, align 8
  ret %struct.xpvav* %5
}

; Function Attrs: nounwind uwtable
define internal %struct.xpvhv* @S_new_xpvhv() #0 {
entry:
  %xpvhv = alloca %struct.xpvhv*, align 8
  %0 = load %struct.xpvhv*, %struct.xpvhv** @PL_xpvhv_root, align 8
  %tobool = icmp ne %struct.xpvhv* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @S_more_xpvhv()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load %struct.xpvhv*, %struct.xpvhv** @PL_xpvhv_root, align 8
  store %struct.xpvhv* %1, %struct.xpvhv** %xpvhv, align 8
  %2 = load %struct.xpvhv*, %struct.xpvhv** %xpvhv, align 8
  %xhv_array = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %2, i32 0, i32 0
  %3 = load i8*, i8** %xhv_array, align 8
  %4 = bitcast i8* %3 to %struct.xpvhv*
  store %struct.xpvhv* %4, %struct.xpvhv** @PL_xpvhv_root, align 8
  %5 = load %struct.xpvhv*, %struct.xpvhv** %xpvhv, align 8
  ret %struct.xpvhv* %5
}

; Function Attrs: nounwind uwtable
define internal %struct.xpvcv* @S_new_xpvcv() #0 {
entry:
  %xpvcv = alloca %struct.xpvcv*, align 8
  %0 = load %struct.xpvcv*, %struct.xpvcv** @PL_xpvcv_root, align 8
  %tobool = icmp ne %struct.xpvcv* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @S_more_xpvcv()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load %struct.xpvcv*, %struct.xpvcv** @PL_xpvcv_root, align 8
  store %struct.xpvcv* %1, %struct.xpvcv** %xpvcv, align 8
  %2 = load %struct.xpvcv*, %struct.xpvcv** %xpvcv, align 8
  %xpv_pv = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %2, i32 0, i32 0
  %3 = load i8*, i8** %xpv_pv, align 8
  %4 = bitcast i8* %3 to %struct.xpvcv*
  store %struct.xpvcv* %4, %struct.xpvcv** @PL_xpvcv_root, align 8
  %5 = load %struct.xpvcv*, %struct.xpvcv** %xpvcv, align 8
  ret %struct.xpvcv* %5
}

; Function Attrs: nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #2

declare i8* @Perl_safesysmalloc(i64) #1

; Function Attrs: nounwind uwtable
define internal %struct.xpvbm* @S_new_xpvbm() #0 {
entry:
  %xpvbm = alloca %struct.xpvbm*, align 8
  %0 = load %struct.xpvbm*, %struct.xpvbm** @PL_xpvbm_root, align 8
  %tobool = icmp ne %struct.xpvbm* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @S_more_xpvbm()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load %struct.xpvbm*, %struct.xpvbm** @PL_xpvbm_root, align 8
  store %struct.xpvbm* %1, %struct.xpvbm** %xpvbm, align 8
  %2 = load %struct.xpvbm*, %struct.xpvbm** %xpvbm, align 8
  %xpv_pv = getelementptr inbounds %struct.xpvbm, %struct.xpvbm* %2, i32 0, i32 0
  %3 = load i8*, i8** %xpv_pv, align 8
  %4 = bitcast i8* %3 to %struct.xpvbm*
  store %struct.xpvbm* %4, %struct.xpvbm** @PL_xpvbm_root, align 8
  %5 = load %struct.xpvbm*, %struct.xpvbm** %xpvbm, align 8
  ret %struct.xpvbm* %5
}

; Function Attrs: nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #2

; Function Attrs: nounwind uwtable
define i8* @Perl_sv_grow(%struct.sv* %sv, i64 %newlen) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %newlen.addr = alloca i64, align 8
  %s = alloca i8*, align 8
  %tmp = alloca i8*, align 8
  %tmp68 = alloca i64, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i64 %newlen, i64* %newlen.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 524288
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_unref(%struct.sv* %2)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 2
  %4 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %4, 255
  %cmp = icmp ult i32 %and2, 4
  br i1 %cmp, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %if.end
  %5 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call signext i8 @Perl_sv_upgrade(%struct.sv* %5, i32 4)
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 0
  %7 = load i8*, i8** %sv_any, align 8
  %8 = bitcast i8* %7 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %8, i32 0, i32 0
  %9 = load i8*, i8** %xpv_pv, align 8
  store i8* %9, i8** %s, align 8
  br label %if.end.20

if.else:                                          ; preds = %if.end
  %10 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags4 = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags4, align 4
  %and5 = and i32 %11, 2097152
  %tobool6 = icmp ne i32 %and5, 0
  br i1 %tobool6, label %if.then.7, label %if.else.16

if.then.7:                                        ; preds = %if.else
  %12 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call8 = call i32 @Perl_sv_backoff(%struct.sv* %12)
  %13 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any9 = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 0
  %14 = load i8*, i8** %sv_any9, align 8
  %15 = bitcast i8* %14 to %struct.xpv*
  %xpv_pv10 = getelementptr inbounds %struct.xpv, %struct.xpv* %15, i32 0, i32 0
  %16 = load i8*, i8** %xpv_pv10, align 8
  store i8* %16, i8** %s, align 8
  %17 = load i64, i64* %newlen.addr, align 8
  %18 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any11 = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 0
  %19 = load i8*, i8** %sv_any11, align 8
  %20 = bitcast i8* %19 to %struct.xpv*
  %xpv_len = getelementptr inbounds %struct.xpv, %struct.xpv* %20, i32 0, i32 2
  %21 = load i64, i64* %xpv_len, align 8
  %cmp12 = icmp ugt i64 %17, %21
  br i1 %cmp12, label %if.then.13, label %if.end.15

if.then.13:                                       ; preds = %if.then.7
  %22 = load i64, i64* %newlen.addr, align 8
  %23 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any14 = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 0
  %24 = load i8*, i8** %sv_any14, align 8
  %25 = bitcast i8* %24 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %25, i32 0, i32 1
  %26 = load i64, i64* %xpv_cur, align 8
  %sub = sub i64 %22, %26
  %mul = mul i64 10, %sub
  %27 = load i64, i64* %newlen.addr, align 8
  %add = add i64 %27, %mul
  store i64 %add, i64* %newlen.addr, align 8
  br label %if.end.15

if.end.15:                                        ; preds = %if.then.13, %if.then.7
  br label %if.end.19

if.else.16:                                       ; preds = %if.else
  %28 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any17 = getelementptr inbounds %struct.sv, %struct.sv* %28, i32 0, i32 0
  %29 = load i8*, i8** %sv_any17, align 8
  %30 = bitcast i8* %29 to %struct.xpv*
  %xpv_pv18 = getelementptr inbounds %struct.xpv, %struct.xpv* %30, i32 0, i32 0
  %31 = load i8*, i8** %xpv_pv18, align 8
  store i8* %31, i8** %s, align 8
  br label %if.end.19

if.end.19:                                        ; preds = %if.else.16, %if.end.15
  br label %if.end.20

if.end.20:                                        ; preds = %if.end.19, %if.then.3
  %32 = load i64, i64* %newlen.addr, align 8
  %33 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any21 = getelementptr inbounds %struct.sv, %struct.sv* %33, i32 0, i32 0
  %34 = load i8*, i8** %sv_any21, align 8
  %35 = bitcast i8* %34 to %struct.xpv*
  %xpv_len22 = getelementptr inbounds %struct.xpv, %struct.xpv* %35, i32 0, i32 2
  %36 = load i64, i64* %xpv_len22, align 8
  %cmp23 = icmp ugt i64 %32, %36
  br i1 %cmp23, label %if.then.24, label %if.end.71

if.then.24:                                       ; preds = %if.end.20
  %37 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any25 = getelementptr inbounds %struct.sv, %struct.sv* %37, i32 0, i32 0
  %38 = load i8*, i8** %sv_any25, align 8
  %39 = bitcast i8* %38 to %struct.xpv*
  %xpv_len26 = getelementptr inbounds %struct.xpv, %struct.xpv* %39, i32 0, i32 2
  %40 = load i64, i64* %xpv_len26, align 8
  %tobool27 = icmp ne i64 %40, 0
  br i1 %tobool27, label %land.lhs.true, label %if.else.32

land.lhs.true:                                    ; preds = %if.then.24
  %41 = load i8*, i8** %s, align 8
  %tobool28 = icmp ne i8* %41, null
  br i1 %tobool28, label %if.then.29, label %if.else.32

if.then.29:                                       ; preds = %land.lhs.true
  %42 = load i8*, i8** %s, align 8
  %43 = load i64, i64* %newlen.addr, align 8
  %mul30 = mul i64 %43, 1
  %call31 = call i8* @Perl_safesysrealloc(i8* %42, i64 %mul30)
  store i8* %call31, i8** %s, align 8
  br label %if.end.65

if.else.32:                                       ; preds = %land.lhs.true, %if.then.24
  %44 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags33 = getelementptr inbounds %struct.sv, %struct.sv* %44, i32 0, i32 2
  %45 = load i32, i32* %sv_flags33, align 4
  %and34 = and i32 %45, 8388608
  %tobool35 = icmp ne i32 %and34, 0
  br i1 %tobool35, label %land.lhs.true.36, label %if.end.45

land.lhs.true.36:                                 ; preds = %if.else.32
  %46 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags37 = getelementptr inbounds %struct.sv, %struct.sv* %46, i32 0, i32 2
  %47 = load i32, i32* %sv_flags37, align 4
  %and38 = and i32 %47, 1048576
  %tobool39 = icmp ne i32 %and38, 0
  br i1 %tobool39, label %if.then.40, label %if.end.45

if.then.40:                                       ; preds = %land.lhs.true.36
  %48 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags41 = getelementptr inbounds %struct.sv, %struct.sv* %48, i32 0, i32 2
  %49 = load i32, i32* %sv_flags41, align 4
  %and42 = and i32 %49, -1048577
  store i32 %and42, i32* %sv_flags41, align 4
  %50 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags43 = getelementptr inbounds %struct.sv, %struct.sv* %50, i32 0, i32 2
  %51 = load i32, i32* %sv_flags43, align 4
  %and44 = and i32 %51, -8388609
  store i32 %and44, i32* %sv_flags43, align 4
  br label %if.end.45

if.end.45:                                        ; preds = %if.then.40, %land.lhs.true.36, %if.else.32
  %52 = load i64, i64* %newlen.addr, align 8
  %mul46 = mul i64 %52, 1
  %call47 = call i8* @Perl_safesysmalloc(i64 %mul46)
  store i8* %call47, i8** %s, align 8
  %53 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any48 = getelementptr inbounds %struct.sv, %struct.sv* %53, i32 0, i32 0
  %54 = load i8*, i8** %sv_any48, align 8
  %55 = bitcast i8* %54 to %struct.xpv*
  %xpv_pv49 = getelementptr inbounds %struct.xpv, %struct.xpv* %55, i32 0, i32 0
  %56 = load i8*, i8** %xpv_pv49, align 8
  %tobool50 = icmp ne i8* %56, null
  br i1 %tobool50, label %land.lhs.true.51, label %if.end.64

land.lhs.true.51:                                 ; preds = %if.end.45
  %57 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any52 = getelementptr inbounds %struct.sv, %struct.sv* %57, i32 0, i32 0
  %58 = load i8*, i8** %sv_any52, align 8
  %59 = bitcast i8* %58 to %struct.xpv*
  %xpv_cur53 = getelementptr inbounds %struct.xpv, %struct.xpv* %59, i32 0, i32 1
  %60 = load i64, i64* %xpv_cur53, align 8
  %tobool54 = icmp ne i64 %60, 0
  br i1 %tobool54, label %if.then.55, label %if.end.64

if.then.55:                                       ; preds = %land.lhs.true.51
  %61 = load i8*, i8** %s, align 8
  %62 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any56 = getelementptr inbounds %struct.sv, %struct.sv* %62, i32 0, i32 0
  %63 = load i8*, i8** %sv_any56, align 8
  %64 = bitcast i8* %63 to %struct.xpv*
  %xpv_pv57 = getelementptr inbounds %struct.xpv, %struct.xpv* %64, i32 0, i32 0
  %65 = load i8*, i8** %xpv_pv57, align 8
  %66 = load i64, i64* %newlen.addr, align 8
  %67 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any58 = getelementptr inbounds %struct.sv, %struct.sv* %67, i32 0, i32 0
  %68 = load i8*, i8** %sv_any58, align 8
  %69 = bitcast i8* %68 to %struct.xpv*
  %xpv_cur59 = getelementptr inbounds %struct.xpv, %struct.xpv* %69, i32 0, i32 1
  %70 = load i64, i64* %xpv_cur59, align 8
  %cmp60 = icmp ult i64 %66, %70
  br i1 %cmp60, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.55
  %71 = load i64, i64* %newlen.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then.55
  %72 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any61 = getelementptr inbounds %struct.sv, %struct.sv* %72, i32 0, i32 0
  %73 = load i8*, i8** %sv_any61, align 8
  %74 = bitcast i8* %73 to %struct.xpv*
  %xpv_cur62 = getelementptr inbounds %struct.xpv, %struct.xpv* %74, i32 0, i32 1
  %75 = load i64, i64* %xpv_cur62, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %71, %cond.true ], [ %75, %cond.false ]
  %mul63 = mul i64 %cond, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %61, i8* %65, i64 %mul63, i32 1, i1 false)
  br label %if.end.64

if.end.64:                                        ; preds = %cond.end, %land.lhs.true.51, %if.end.45
  br label %if.end.65

if.end.65:                                        ; preds = %if.end.64, %if.then.29
  %76 = load i8*, i8** %s, align 8
  %77 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any66 = getelementptr inbounds %struct.sv, %struct.sv* %77, i32 0, i32 0
  %78 = load i8*, i8** %sv_any66, align 8
  %79 = bitcast i8* %78 to %struct.xpv*
  %xpv_pv67 = getelementptr inbounds %struct.xpv, %struct.xpv* %79, i32 0, i32 0
  store i8* %76, i8** %xpv_pv67, align 8
  store i8* %76, i8** %tmp
  %80 = load i8*, i8** %tmp
  %81 = load i64, i64* %newlen.addr, align 8
  %82 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any69 = getelementptr inbounds %struct.sv, %struct.sv* %82, i32 0, i32 0
  %83 = load i8*, i8** %sv_any69, align 8
  %84 = bitcast i8* %83 to %struct.xpv*
  %xpv_len70 = getelementptr inbounds %struct.xpv, %struct.xpv* %84, i32 0, i32 2
  store i64 %81, i64* %xpv_len70, align 8
  store i64 %81, i64* %tmp68
  %85 = load i64, i64* %tmp68
  br label %if.end.71

if.end.71:                                        ; preds = %if.end.65, %if.end.20
  %86 = load i8*, i8** %s, align 8
  ret i8* %86
}

; Function Attrs: nounwind uwtable
define void @Perl_sv_unref(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_unref_flags(%struct.sv* %0, i32 0)
  ret void
}

declare i8* @Perl_safesysrealloc(i8*, i64) #1

; Function Attrs: nounwind uwtable
define void @Perl_sv_setiv(%struct.sv* %sv, i64 %i) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %i.addr = alloca i64, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i64 %i, i64* %i.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 9961472
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_force_normal(%struct.sv* %2)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 2
  %4 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %4, 255
  switch i32 %and2, label %sw.epilog [
    i32 0, label %sw.bb
    i32 2, label %sw.bb.3
    i32 3, label %sw.bb.5
    i32 4, label %sw.bb.5
    i32 13, label %sw.bb.7
    i32 10, label %sw.bb.7
    i32 11, label %sw.bb.7
    i32 12, label %sw.bb.7
    i32 14, label %sw.bb.7
    i32 15, label %sw.bb.7
  ]

sw.bb:                                            ; preds = %if.end
  %5 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call signext i8 @Perl_sv_upgrade(%struct.sv* %5, i32 1)
  br label %sw.epilog

sw.bb.3:                                          ; preds = %if.end
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call4 = call signext i8 @Perl_sv_upgrade(%struct.sv* %6, i32 6)
  br label %sw.epilog

sw.bb.5:                                          ; preds = %if.end, %if.end
  %7 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call6 = call signext i8 @Perl_sv_upgrade(%struct.sv* %7, i32 5)
  br label %sw.epilog

sw.bb.7:                                          ; preds = %if.end, %if.end, %if.end, %if.end, %if.end, %if.end
  %8 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call8 = call i8* @Perl_sv_reftype(%struct.sv* %8, i32 0)
  %9 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %9, i32 0, i32 4
  %10 = load i16, i16* %op_type, align 2
  %conv = zext i16 %10 to i32
  %cmp = icmp eq i32 %conv, 351
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %sw.bb.7
  %11 = load %struct.op*, %struct.op** @PL_op, align 8
  %call10 = call i8* @Perl_custom_op_desc(%struct.op* %11)
  br label %cond.end

cond.false:                                       ; preds = %sw.bb.7
  %12 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type11 = getelementptr inbounds %struct.op, %struct.op* %12, i32 0, i32 4
  %13 = load i16, i16* %op_type11, align 2
  %idxprom = zext i16 %13 to i64
  %arrayidx = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i32 0, i64 %idxprom
  %14 = load i8*, i8** %arrayidx, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %call10, %cond.true ], [ %14, %cond.false ]
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.4, i32 0, i32 0), i8* %call8, i8* %cond)
  br label %sw.epilog

sw.epilog:                                        ; preds = %cond.end, %if.end, %sw.bb.5, %sw.bb.3, %sw.bb
  %15 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags12 = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 2
  %16 = load i32, i32* %sv_flags12, align 4
  %and13 = and i32 %16, 1223753727
  store i32 %and13, i32* %sv_flags12, align 4
  %17 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags14 = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 2
  %18 = load i32, i32* %sv_flags14, align 4
  %and15 = and i32 %18, 2097152
  %tobool16 = icmp ne i32 %and15, 0
  br i1 %tobool16, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %sw.epilog
  %19 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call17 = call i32 @Perl_sv_backoff(%struct.sv* %19)
  %tobool18 = icmp ne i32 %call17, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %sw.epilog
  %20 = phi i1 [ false, %sw.epilog ], [ %tobool18, %land.rhs ]
  %land.ext = zext i1 %20 to i32
  %21 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags19 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 2
  %22 = load i32, i32* %sv_flags19, align 4
  %or = or i32 %22, 16842752
  store i32 %or, i32* %sv_flags19, align 4
  %23 = load i64, i64* %i.addr, align 8
  %24 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %24, i32 0, i32 0
  %25 = load i8*, i8** %sv_any, align 8
  %26 = bitcast i8* %25 to %struct.xpviv*
  %xiv_iv = getelementptr inbounds %struct.xpviv, %struct.xpviv* %26, i32 0, i32 3
  store i64 %23, i64* %xiv_iv, align 8
  %27 = load i8, i8* @PL_tainting, align 1
  %tobool20 = icmp ne i8 %27, 0
  br i1 %tobool20, label %if.then.21, label %if.end.28

if.then.21:                                       ; preds = %land.end
  %28 = load i8, i8* @PL_tainted, align 1
  %tobool22 = icmp ne i8 %28, 0
  br i1 %tobool22, label %if.then.23, label %if.end.27

if.then.23:                                       ; preds = %if.then.21
  %29 = load i8, i8* @PL_tainting, align 1
  %tobool24 = icmp ne i8 %29, 0
  br i1 %tobool24, label %if.then.25, label %if.end.26

if.then.25:                                       ; preds = %if.then.23
  %30 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_taint(%struct.sv* %30)
  br label %if.end.26

if.end.26:                                        ; preds = %if.then.25, %if.then.23
  br label %if.end.27

if.end.27:                                        ; preds = %if.end.26, %if.then.21
  br label %if.end.28

if.end.28:                                        ; preds = %if.end.27, %land.end
  ret void
}

; Function Attrs: nounwind uwtable
define i8* @Perl_sv_reftype(%struct.sv* %sv, i32 %ob) #0 {
entry:
  %retval = alloca i8*, align 8
  %sv.addr = alloca %struct.sv*, align 8
  %ob.addr = alloca i32, align 4
  %name = alloca i8*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i32 %ob, i32* %ob.addr, align 4
  %0 = load i32, i32* %ob.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and = and i32 %2, 4096
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 0
  %4 = load i8*, i8** %sv_any, align 8
  %5 = bitcast i8* %4 to %struct.xpvmg*
  %xmg_stash = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %5, i32 0, i32 6
  %6 = load %struct.hv*, %struct.hv** %xmg_stash, align 8
  %sv_any2 = getelementptr inbounds %struct.hv, %struct.hv* %6, i32 0, i32 0
  %7 = load %struct.xpvhv*, %struct.xpvhv** %sv_any2, align 8
  %xhv_name = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %7, i32 0, i32 10
  %8 = load i8*, i8** %xhv_name, align 8
  store i8* %8, i8** %name, align 8
  %9 = load i8*, i8** %name, align 8
  %tobool3 = icmp ne i8* %9, null
  br i1 %tobool3, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %10 = load i8*, i8** %name, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %10, %cond.true ], [ getelementptr inbounds ([9 x i8], [9 x i8]* @.str.25, i32 0, i32 0), %cond.false ]
  store i8* %cond, i8** %retval
  br label %return

if.else:                                          ; preds = %land.lhs.true, %entry
  %11 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags4 = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 2
  %12 = load i32, i32* %sv_flags4, align 4
  %and5 = and i32 %12, 255
  switch i32 %and5, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb
    i32 2, label %sw.bb
    i32 3, label %sw.bb
    i32 4, label %sw.bb
    i32 5, label %sw.bb
    i32 6, label %sw.bb
    i32 7, label %sw.bb
    i32 8, label %sw.bb
    i32 9, label %sw.bb.11
    i32 10, label %sw.bb.27
    i32 11, label %sw.bb.28
    i32 12, label %sw.bb.29
    i32 13, label %sw.bb.30
    i32 14, label %sw.bb.31
    i32 15, label %sw.bb.32
  ]

sw.bb:                                            ; preds = %if.else, %if.else, %if.else, %if.else, %if.else, %if.else, %if.else, %if.else, %if.else
  %13 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags6 = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 2
  %14 = load i32, i32* %sv_flags6, align 4
  %and7 = and i32 %14, 524288
  %tobool8 = icmp ne i32 %and7, 0
  br i1 %tobool8, label %if.then.9, label %if.else.10

if.then.9:                                        ; preds = %sw.bb
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14, i32 0, i32 0), i8** %retval
  br label %return

if.else.10:                                       ; preds = %sw.bb
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.15, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.11:                                         ; preds = %if.else
  %15 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags12 = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 2
  %16 = load i32, i32* %sv_flags12, align 4
  %and13 = and i32 %16, 524288
  %tobool14 = icmp ne i32 %and13, 0
  br i1 %tobool14, label %cond.true.15, label %cond.false.16

cond.true.15:                                     ; preds = %sw.bb.11
  br label %cond.end.25

cond.false.16:                                    ; preds = %sw.bb.11
  %17 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any17 = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 0
  %18 = load i8*, i8** %sv_any17, align 8
  %19 = bitcast i8* %18 to %struct.xpvlv*
  %xlv_type = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %19, i32 0, i32 10
  %20 = load i8, i8* %xlv_type, align 1
  %conv = sext i8 %20 to i32
  %cmp = icmp eq i32 %conv, 116
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %cond.false.16
  %21 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any19 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 0
  %22 = load i8*, i8** %sv_any19, align 8
  %23 = bitcast i8* %22 to %struct.xpvlv*
  %xlv_type20 = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %23, i32 0, i32 10
  %24 = load i8, i8* %xlv_type20, align 1
  %conv21 = sext i8 %24 to i32
  %cmp22 = icmp eq i32 %conv21, 84
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %cond.false.16
  %25 = phi i1 [ true, %cond.false.16 ], [ %cmp22, %lor.rhs ]
  %cond24 = select i1 %25, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.16, i32 0, i32 0)
  br label %cond.end.25

cond.end.25:                                      ; preds = %lor.end, %cond.true.15
  %cond26 = phi i8* [ getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14, i32 0, i32 0), %cond.true.15 ], [ %cond24, %lor.end ]
  store i8* %cond26, i8** %retval
  br label %return

sw.bb.27:                                         ; preds = %if.else
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.17, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.28:                                         ; preds = %if.else
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.18, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.29:                                         ; preds = %if.else
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.30:                                         ; preds = %if.else
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.20, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.31:                                         ; preds = %if.else
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.21, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.32:                                         ; preds = %if.else
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.22, i32 0, i32 0), i8** %retval
  br label %return

sw.default:                                       ; preds = %if.else
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.23, i32 0, i32 0), i8** %retval
  br label %return

return:                                           ; preds = %sw.default, %sw.bb.32, %sw.bb.31, %sw.bb.30, %sw.bb.29, %sw.bb.28, %sw.bb.27, %cond.end.25, %if.else.10, %if.then.9, %cond.end
  %26 = load i8*, i8** %retval
  ret i8* %26
}

; Function Attrs: nounwind uwtable
define void @Perl_sv_taint(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_magic(%struct.sv* %0, %struct.sv* null, i32 116, i8* null, i32 0)
  ret void
}

; Function Attrs: nounwind uwtable
define void @Perl_sv_setiv_mg(%struct.sv* %sv, i64 %i) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %i.addr = alloca i64, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i64 %i, i64* %i.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %1 = load i64, i64* %i.addr, align 8
  call void @Perl_sv_setiv(%struct.sv* %0, i64 %1)
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags, align 4
  %and = and i32 %3, 16384
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i32 @Perl_mg_set(%struct.sv* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare i32 @Perl_mg_set(%struct.sv*) #1

; Function Attrs: nounwind uwtable
define void @Perl_sv_setuv(%struct.sv* %sv, i64 %u) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %u.addr = alloca i64, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i64 %u, i64* %u.addr, align 8
  %0 = load i64, i64* %u.addr, align 8
  %cmp = icmp ule i64 %0, 9223372036854775807
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %2 = load i64, i64* %u.addr, align 8
  call void @Perl_sv_setiv(%struct.sv* %1, i64 %2)
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_setiv(%struct.sv* %3, i64 0)
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 2
  %5 = load i32, i32* %sv_flags, align 4
  %or = or i32 %5, -2147483648
  store i32 %or, i32* %sv_flags, align 4
  %6 = load i64, i64* %u.addr, align 8
  %7 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 0
  %8 = load i8*, i8** %sv_any, align 8
  %9 = bitcast i8* %8 to %struct.xpvuv*
  %xuv_uv = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %9, i32 0, i32 3
  store i64 %6, i64* %xuv_uv, align 8
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define void @Perl_sv_setuv_mg(%struct.sv* %sv, i64 %u) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %u.addr = alloca i64, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i64 %u, i64* %u.addr, align 8
  %0 = load i64, i64* %u.addr, align 8
  %cmp = icmp ule i64 %0, 9223372036854775807
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %2 = load i64, i64* %u.addr, align 8
  call void @Perl_sv_setiv(%struct.sv* %1, i64 %2)
  br label %if.end

if.else:                                          ; preds = %entry
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_setiv(%struct.sv* %3, i64 0)
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 2
  %5 = load i32, i32* %sv_flags, align 4
  %or = or i32 %5, -2147483648
  store i32 %or, i32* %sv_flags, align 4
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %7 = load i64, i64* %u.addr, align 8
  call void @Perl_sv_setuv(%struct.sv* %6, i64 %7)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %8 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 2
  %9 = load i32, i32* %sv_flags1, align 4
  %and = and i32 %9, 16384
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then.2, label %if.end.3

if.then.2:                                        ; preds = %if.end
  %10 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i32 @Perl_mg_set(%struct.sv* %10)
  br label %if.end.3

if.end.3:                                         ; preds = %if.then.2, %if.end
  ret void
}

; Function Attrs: nounwind uwtable
define void @Perl_sv_setnv(%struct.sv* %sv, double %num) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %num.addr = alloca double, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store double %num, double* %num.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 9961472
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_force_normal(%struct.sv* %2)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 2
  %4 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %4, 255
  switch i32 %and2, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb
    i32 3, label %sw.bb.3
    i32 4, label %sw.bb.3
    i32 5, label %sw.bb.3
    i32 13, label %sw.bb.5
    i32 10, label %sw.bb.5
    i32 11, label %sw.bb.5
    i32 12, label %sw.bb.5
    i32 14, label %sw.bb.5
    i32 15, label %sw.bb.5
  ]

sw.bb:                                            ; preds = %if.end, %if.end
  %5 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call signext i8 @Perl_sv_upgrade(%struct.sv* %5, i32 2)
  br label %sw.epilog

sw.bb.3:                                          ; preds = %if.end, %if.end, %if.end
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call4 = call signext i8 @Perl_sv_upgrade(%struct.sv* %6, i32 6)
  br label %sw.epilog

sw.bb.5:                                          ; preds = %if.end, %if.end, %if.end, %if.end, %if.end, %if.end
  %7 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call6 = call i8* @Perl_sv_reftype(%struct.sv* %7, i32 0)
  %8 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %8, i32 0, i32 4
  %9 = load i16, i16* %op_type, align 2
  %conv = zext i16 %9 to i32
  %cmp = icmp eq i32 %conv, 351
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %sw.bb.5
  %10 = load %struct.op*, %struct.op** @PL_op, align 8
  %call8 = call i8* @Perl_custom_op_name(%struct.op* %10)
  br label %cond.end

cond.false:                                       ; preds = %sw.bb.5
  %11 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type9 = getelementptr inbounds %struct.op, %struct.op* %11, i32 0, i32 4
  %12 = load i16, i16* %op_type9, align 2
  %idxprom = zext i16 %12 to i64
  %arrayidx = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_name, i32 0, i64 %idxprom
  %13 = load i8*, i8** %arrayidx, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %call8, %cond.true ], [ %13, %cond.false ]
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.5, i32 0, i32 0), i8* %call6, i8* %cond)
  br label %sw.epilog

sw.epilog:                                        ; preds = %cond.end, %if.end, %sw.bb.3, %sw.bb
  %14 = load double, double* %num.addr, align 8
  %15 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 0
  %16 = load i8*, i8** %sv_any, align 8
  %17 = bitcast i8* %16 to %struct.xpvnv*
  %xnv_nv = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %17, i32 0, i32 4
  store double %14, double* %xnv_nv, align 8
  %18 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags10 = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 2
  %19 = load i32, i32* %sv_flags10, align 4
  %and11 = and i32 %19, 1223753727
  store i32 %and11, i32* %sv_flags10, align 4
  %20 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags12 = getelementptr inbounds %struct.sv, %struct.sv* %20, i32 0, i32 2
  %21 = load i32, i32* %sv_flags12, align 4
  %and13 = and i32 %21, 2097152
  %tobool14 = icmp ne i32 %and13, 0
  br i1 %tobool14, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %sw.epilog
  %22 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call15 = call i32 @Perl_sv_backoff(%struct.sv* %22)
  %tobool16 = icmp ne i32 %call15, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %sw.epilog
  %23 = phi i1 [ false, %sw.epilog ], [ %tobool16, %land.rhs ]
  %land.ext = zext i1 %23 to i32
  %24 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags17 = getelementptr inbounds %struct.sv, %struct.sv* %24, i32 0, i32 2
  %25 = load i32, i32* %sv_flags17, align 4
  %or = or i32 %25, 33685504
  store i32 %or, i32* %sv_flags17, align 4
  %26 = load i8, i8* @PL_tainting, align 1
  %tobool18 = icmp ne i8 %26, 0
  br i1 %tobool18, label %if.then.19, label %if.end.26

if.then.19:                                       ; preds = %land.end
  %27 = load i8, i8* @PL_tainted, align 1
  %tobool20 = icmp ne i8 %27, 0
  br i1 %tobool20, label %if.then.21, label %if.end.25

if.then.21:                                       ; preds = %if.then.19
  %28 = load i8, i8* @PL_tainting, align 1
  %tobool22 = icmp ne i8 %28, 0
  br i1 %tobool22, label %if.then.23, label %if.end.24

if.then.23:                                       ; preds = %if.then.21
  %29 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_taint(%struct.sv* %29)
  br label %if.end.24

if.end.24:                                        ; preds = %if.then.23, %if.then.21
  br label %if.end.25

if.end.25:                                        ; preds = %if.end.24, %if.then.19
  br label %if.end.26

if.end.26:                                        ; preds = %if.end.25, %land.end
  ret void
}

declare i8* @Perl_custom_op_name(%struct.op*) #1

; Function Attrs: nounwind uwtable
define void @Perl_sv_setnv_mg(%struct.sv* %sv, double %num) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %num.addr = alloca double, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store double %num, double* %num.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %1 = load double, double* %num.addr, align 8
  call void @Perl_sv_setnv(%struct.sv* %0, double %1)
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags, align 4
  %and = and i32 %3, 16384
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i32 @Perl_mg_set(%struct.sv* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @Perl_looks_like_number(%struct.sv* %sv) #0 {
entry:
  %retval = alloca i32, align 4
  %sv.addr = alloca %struct.sv*, align 8
  %sbegin = alloca i8*, align 8
  %len = alloca i64, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 262144
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 0
  %3 = load i8*, i8** %sv_any, align 8
  %4 = bitcast i8* %3 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %4, i32 0, i32 0
  %5 = load i8*, i8** %xpv_pv, align 8
  store i8* %5, i8** %sbegin, align 8
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any1 = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 0
  %7 = load i8*, i8** %sv_any1, align 8
  %8 = bitcast i8* %7 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %8, i32 0, i32 1
  %9 = load i64, i64* %xpv_cur, align 8
  store i64 %9, i64* %len, align 8
  br label %if.end.15

if.else:                                          ; preds = %entry
  %10 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags2, align 4
  %and3 = and i32 %11, 67108864
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %if.then.5, label %if.else.12

if.then.5:                                        ; preds = %if.else
  %12 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags6 = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 2
  %13 = load i32, i32* %sv_flags6, align 4
  %and7 = and i32 %13, 262144
  %cmp = icmp eq i32 %and7, 262144
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.5
  %14 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any8 = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 0
  %15 = load i8*, i8** %sv_any8, align 8
  %16 = bitcast i8* %15 to %struct.xpv*
  %xpv_cur9 = getelementptr inbounds %struct.xpv, %struct.xpv* %16, i32 0, i32 1
  %17 = load i64, i64* %xpv_cur9, align 8
  store i64 %17, i64* %len, align 8
  %18 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any10 = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 0
  %19 = load i8*, i8** %sv_any10, align 8
  %20 = bitcast i8* %19 to %struct.xpv*
  %xpv_pv11 = getelementptr inbounds %struct.xpv, %struct.xpv* %20, i32 0, i32 0
  %21 = load i8*, i8** %xpv_pv11, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then.5
  %22 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i8* @Perl_sv_2pv_flags(%struct.sv* %22, i64* %len, i32 2)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %21, %cond.true ], [ %call, %cond.false ]
  store i8* %cond, i8** %sbegin, align 8
  br label %if.end

if.else.12:                                       ; preds = %if.else
  %23 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags13 = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 2
  %24 = load i32, i32* %sv_flags13, align 4
  %and14 = and i32 %24, 50528256
  store i32 %and14, i32* %retval
  br label %return

if.end:                                           ; preds = %cond.end
  br label %if.end.15

if.end.15:                                        ; preds = %if.end, %if.then
  %25 = load i8*, i8** %sbegin, align 8
  %26 = load i64, i64* %len, align 8
  %call16 = call i32 @Perl_grok_number(i8* %25, i64 %26, i64* null)
  store i32 %call16, i32* %retval
  br label %return

return:                                           ; preds = %if.end.15, %if.else.12
  %27 = load i32, i32* %retval
  ret i32 %27
}

; Function Attrs: nounwind uwtable
define i8* @Perl_sv_2pv_flags(%struct.sv* %sv, i64* %lp, i32 %flags) #0 {
entry:
  %retval = alloca i8*, align 8
  %sv.addr = alloca %struct.sv*, align 8
  %lp.addr = alloca i64*, align 8
  %flags.addr = alloca i32, align 4
  %s = alloca i8*, align 8
  %olderrno = alloca i32, align 4
  %tsv = alloca %struct.sv*, align 8
  %origsv = alloca %struct.sv*, align 8
  %tbuf = alloca [64 x i8], align 16
  %tmpbuf = alloca i8*, align 8
  %tmpstr = alloca %struct.sv*, align 8
  %pv = alloca i8*, align 8
  %mg = alloca %struct.magic*, align 8
  %re = alloca %struct.regexp*, align 8
  %fptr = alloca i8*, align 8
  %reflags = alloca [6 x i8], align 1
  %ch = alloca i8, align 1
  %left = alloca i32, align 4
  %right = alloca i32, align 4
  %need_newline = alloca i8, align 1
  %reganch = alloca i16, align 2
  %endptr = alloca i8*, align 8
  %c = alloca i8, align 1
  %name = alloca i8*, align 8
  %isIOK = alloca i32, align 4
  %isUIOK = alloca i32, align 4
  %buf = alloca [22 x i8], align 16
  %ebuf = alloca i8*, align 8
  %ptr = alloca i8*, align 8
  %tmp = alloca i64, align 8
  %tmp498 = alloca i64, align 8
  %len = alloca i64, align 8
  %t = alloca i8*, align 8
  %tmp553 = alloca i64, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i64* %lp, i64** %lp.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %tbuf, i32 0, i32 0
  store i8* %arraydecay, i8** %tmpbuf, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i64*, i64** %lp.addr, align 8
  store i64 0, i64* %1, align 8
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0), i8** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags, align 4
  %and = and i32 %3, 8192
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %if.then.2, label %if.end.66

if.then.2:                                        ; preds = %if.end
  %4 = load i32, i32* %flags.addr, align 4
  %and3 = and i32 %4, 2
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %if.then.2
  %5 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i32 @Perl_mg_get(%struct.sv* %5)
  br label %if.end.6

if.end.6:                                         ; preds = %if.then.5, %if.then.2
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags7 = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 2
  %7 = load i32, i32* %sv_flags7, align 4
  %and8 = and i32 %7, 67108864
  %tobool9 = icmp ne i32 %and8, 0
  br i1 %tobool9, label %if.then.10, label %if.end.12

if.then.10:                                       ; preds = %if.end.6
  %8 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 0
  %9 = load i8*, i8** %sv_any, align 8
  %10 = bitcast i8* %9 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %10, i32 0, i32 1
  %11 = load i64, i64* %xpv_cur, align 8
  %12 = load i64*, i64** %lp.addr, align 8
  store i64 %11, i64* %12, align 8
  %13 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any11 = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 0
  %14 = load i8*, i8** %sv_any11, align 8
  %15 = bitcast i8* %14 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %15, i32 0, i32 0
  %16 = load i8*, i8** %xpv_pv, align 8
  store i8* %16, i8** %retval
  br label %return

if.end.12:                                        ; preds = %if.end.6
  %17 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags13 = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 2
  %18 = load i32, i32* %sv_flags13, align 4
  %and14 = and i32 %18, 16777216
  %tobool15 = icmp ne i32 %and14, 0
  br i1 %tobool15, label %if.then.16, label %if.end.26

if.then.16:                                       ; preds = %if.end.12
  %19 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags17 = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 2
  %20 = load i32, i32* %sv_flags17, align 4
  %and18 = and i32 %20, -2147483648
  %tobool19 = icmp ne i32 %and18, 0
  br i1 %tobool19, label %if.then.20, label %if.else

if.then.20:                                       ; preds = %if.then.16
  %21 = load i8*, i8** %tmpbuf, align 8
  %22 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any21 = getelementptr inbounds %struct.sv, %struct.sv* %22, i32 0, i32 0
  %23 = load i8*, i8** %sv_any21, align 8
  %24 = bitcast i8* %23 to %struct.xpvuv*
  %xuv_uv = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %24, i32 0, i32 3
  %25 = load i64, i64* %xuv_uv, align 8
  %call22 = call i32 (i8*, i8*, ...) @sprintf(i8* %21, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0), i64 %25)
  br label %if.end.25

if.else:                                          ; preds = %if.then.16
  %26 = load i8*, i8** %tmpbuf, align 8
  %27 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any23 = getelementptr inbounds %struct.sv, %struct.sv* %27, i32 0, i32 0
  %28 = load i8*, i8** %sv_any23, align 8
  %29 = bitcast i8* %28 to %struct.xpviv*
  %xiv_iv = getelementptr inbounds %struct.xpviv, %struct.xpviv* %29, i32 0, i32 3
  %30 = load i64, i64* %xiv_iv, align 8
  %call24 = call i32 (i8*, i8*, ...) @sprintf(i8* %26, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0), i64 %30)
  br label %if.end.25

if.end.25:                                        ; preds = %if.else, %if.then.20
  store %struct.sv* null, %struct.sv** %tsv, align 8
  br label %tokensave

if.end.26:                                        ; preds = %if.end.12
  %31 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags27 = getelementptr inbounds %struct.sv, %struct.sv* %31, i32 0, i32 2
  %32 = load i32, i32* %sv_flags27, align 4
  %and28 = and i32 %32, 33554432
  %tobool29 = icmp ne i32 %and28, 0
  br i1 %tobool29, label %if.then.30, label %if.end.33

if.then.30:                                       ; preds = %if.end.26
  %33 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any31 = getelementptr inbounds %struct.sv, %struct.sv* %33, i32 0, i32 0
  %34 = load i8*, i8** %sv_any31, align 8
  %35 = bitcast i8* %34 to %struct.xpvnv*
  %xnv_nv = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %35, i32 0, i32 4
  %36 = load double, double* %xnv_nv, align 8
  %37 = load i8*, i8** %tmpbuf, align 8
  %call32 = call i8* @gcvt(double %36, i32 15, i8* %37)
  store %struct.sv* null, %struct.sv** %tsv, align 8
  br label %tokensave

if.end.33:                                        ; preds = %if.end.26
  %38 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags34 = getelementptr inbounds %struct.sv, %struct.sv* %38, i32 0, i32 2
  %39 = load i32, i32* %sv_flags34, align 4
  %and35 = and i32 %39, 524288
  %tobool36 = icmp ne i32 %and35, 0
  br i1 %tobool36, label %if.end.65, label %if.then.37

if.then.37:                                       ; preds = %if.end.33
  %40 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags38 = getelementptr inbounds %struct.sv, %struct.sv* %40, i32 0, i32 2
  %41 = load i32, i32* %sv_flags38, align 4
  %and39 = and i32 %41, 512
  %tobool40 = icmp ne i32 %and39, 0
  br i1 %tobool40, label %if.end.64, label %if.then.41

if.then.41:                                       ; preds = %if.then.37
  %42 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings = getelementptr inbounds %struct.cop, %struct.cop* %42, i32 0, i32 14
  %43 = load %struct.sv*, %struct.sv** %cop_warnings, align 8
  %cmp = icmp ne %struct.sv* %43, null
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false.52

land.lhs.true:                                    ; preds = %if.then.41
  %44 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings42 = getelementptr inbounds %struct.cop, %struct.cop* %44, i32 0, i32 14
  %45 = load %struct.sv*, %struct.sv** %cop_warnings42, align 8
  %cmp43 = icmp ne %struct.sv* %45, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 2)
  br i1 %cmp43, label %land.lhs.true.44, label %lor.lhs.false.52

land.lhs.true.44:                                 ; preds = %land.lhs.true
  %46 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings45 = getelementptr inbounds %struct.cop, %struct.cop* %46, i32 0, i32 14
  %47 = load %struct.sv*, %struct.sv** %cop_warnings45, align 8
  %cmp46 = icmp eq %struct.sv* %47, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 1)
  br i1 %cmp46, label %land.lhs.true.60, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.44
  %48 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings47 = getelementptr inbounds %struct.cop, %struct.cop* %48, i32 0, i32 14
  %49 = load %struct.sv*, %struct.sv** %cop_warnings47, align 8
  %sv_any48 = getelementptr inbounds %struct.sv, %struct.sv* %49, i32 0, i32 0
  %50 = load i8*, i8** %sv_any48, align 8
  %51 = bitcast i8* %50 to %struct.xpv*
  %xpv_pv49 = getelementptr inbounds %struct.xpv, %struct.xpv* %51, i32 0, i32 0
  %52 = load i8*, i8** %xpv_pv49, align 8
  %arrayidx = getelementptr inbounds i8, i8* %52, i64 10
  %53 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %53 to i32
  %and50 = and i32 %conv, 4
  %tobool51 = icmp ne i32 %and50, 0
  br i1 %tobool51, label %land.lhs.true.60, label %lor.lhs.false.52

lor.lhs.false.52:                                 ; preds = %lor.lhs.false, %land.lhs.true, %if.then.41
  %54 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings53 = getelementptr inbounds %struct.cop, %struct.cop* %54, i32 0, i32 14
  %55 = load %struct.sv*, %struct.sv** %cop_warnings53, align 8
  %cmp54 = icmp eq %struct.sv* %55, null
  br i1 %cmp54, label %land.lhs.true.56, label %if.end.63

land.lhs.true.56:                                 ; preds = %lor.lhs.false.52
  %56 = load i8, i8* @PL_dowarn, align 1
  %conv57 = zext i8 %56 to i32
  %and58 = and i32 %conv57, 1
  %tobool59 = icmp ne i32 %and58, 0
  br i1 %tobool59, label %land.lhs.true.60, label %if.end.63

land.lhs.true.60:                                 ; preds = %land.lhs.true.56, %lor.lhs.false, %land.lhs.true.44
  %57 = load i32, i32* @PL_localizing, align 4
  %tobool61 = icmp ne i32 %57, 0
  br i1 %tobool61, label %if.end.63, label %if.then.62

if.then.62:                                       ; preds = %land.lhs.true.60
  call void @Perl_report_uninit()
  br label %if.end.63

if.end.63:                                        ; preds = %if.then.62, %land.lhs.true.60, %land.lhs.true.56, %lor.lhs.false.52
  br label %if.end.64

if.end.64:                                        ; preds = %if.end.63, %if.then.37
  %58 = load i64*, i64** %lp.addr, align 8
  store i64 0, i64* %58, align 8
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0), i8** %retval
  br label %return

if.end.65:                                        ; preds = %if.end.33
  br label %if.end.66

if.end.66:                                        ; preds = %if.end.65, %if.end
  %59 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags67 = getelementptr inbounds %struct.sv, %struct.sv* %59, i32 0, i32 2
  %60 = load i32, i32* %sv_flags67, align 4
  %and68 = and i32 %60, 9961472
  %tobool69 = icmp ne i32 %and68, 0
  br i1 %tobool69, label %if.then.70, label %if.end.320

if.then.70:                                       ; preds = %if.end.66
  %61 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags71 = getelementptr inbounds %struct.sv, %struct.sv* %61, i32 0, i32 2
  %62 = load i32, i32* %sv_flags71, align 4
  %and72 = and i32 %62, 524288
  %tobool73 = icmp ne i32 %and72, 0
  br i1 %tobool73, label %if.then.74, label %if.end.281

if.then.74:                                       ; preds = %if.then.70
  %63 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags75 = getelementptr inbounds %struct.sv, %struct.sv* %63, i32 0, i32 2
  %64 = load i32, i32* %sv_flags75, align 4
  %and76 = and i32 %64, 268435456
  %tobool77 = icmp ne i32 %and76, 0
  br i1 %tobool77, label %land.lhs.true.78, label %if.end.110

land.lhs.true.78:                                 ; preds = %if.then.74
  %65 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call79 = call %struct.sv* @Perl_amagic_call(%struct.sv* %65, %struct.sv* @PL_sv_undef, i32 4, i32 9)
  store %struct.sv* %call79, %struct.sv** %tmpstr, align 8
  %tobool80 = icmp ne %struct.sv* %call79, null
  br i1 %tobool80, label %land.lhs.true.81, label %if.end.110

land.lhs.true.81:                                 ; preds = %land.lhs.true.78
  %66 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_flags82 = getelementptr inbounds %struct.sv, %struct.sv* %66, i32 0, i32 2
  %67 = load i32, i32* %sv_flags82, align 4
  %and83 = and i32 %67, 524288
  %tobool84 = icmp ne i32 %and83, 0
  br i1 %tobool84, label %lor.lhs.false.85, label %if.then.91

lor.lhs.false.85:                                 ; preds = %land.lhs.true.81
  %68 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_any86 = getelementptr inbounds %struct.sv, %struct.sv* %68, i32 0, i32 0
  %69 = load i8*, i8** %sv_any86, align 8
  %70 = bitcast i8* %69 to %struct.xrv*
  %xrv_rv = getelementptr inbounds %struct.xrv, %struct.xrv* %70, i32 0, i32 0
  %71 = load %struct.sv*, %struct.sv** %xrv_rv, align 8
  %72 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any87 = getelementptr inbounds %struct.sv, %struct.sv* %72, i32 0, i32 0
  %73 = load i8*, i8** %sv_any87, align 8
  %74 = bitcast i8* %73 to %struct.xrv*
  %xrv_rv88 = getelementptr inbounds %struct.xrv, %struct.xrv* %74, i32 0, i32 0
  %75 = load %struct.sv*, %struct.sv** %xrv_rv88, align 8
  %cmp89 = icmp ne %struct.sv* %71, %75
  br i1 %cmp89, label %if.then.91, label %if.end.110

if.then.91:                                       ; preds = %lor.lhs.false.85, %land.lhs.true.81
  %76 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_flags92 = getelementptr inbounds %struct.sv, %struct.sv* %76, i32 0, i32 2
  %77 = load i32, i32* %sv_flags92, align 4
  %and93 = and i32 %77, 262144
  %cmp94 = icmp eq i32 %and93, 262144
  br i1 %cmp94, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.91
  %78 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_any96 = getelementptr inbounds %struct.sv, %struct.sv* %78, i32 0, i32 0
  %79 = load i8*, i8** %sv_any96, align 8
  %80 = bitcast i8* %79 to %struct.xpv*
  %xpv_cur97 = getelementptr inbounds %struct.xpv, %struct.xpv* %80, i32 0, i32 1
  %81 = load i64, i64* %xpv_cur97, align 8
  %82 = load i64*, i64** %lp.addr, align 8
  store i64 %81, i64* %82, align 8
  %83 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_any98 = getelementptr inbounds %struct.sv, %struct.sv* %83, i32 0, i32 0
  %84 = load i8*, i8** %sv_any98, align 8
  %85 = bitcast i8* %84 to %struct.xpv*
  %xpv_pv99 = getelementptr inbounds %struct.xpv, %struct.xpv* %85, i32 0, i32 0
  %86 = load i8*, i8** %xpv_pv99, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then.91
  %87 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %88 = load i64*, i64** %lp.addr, align 8
  %call100 = call i8* @Perl_sv_2pv_flags(%struct.sv* %87, i64* %88, i32 2)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %86, %cond.true ], [ %call100, %cond.false ]
  store i8* %cond, i8** %pv, align 8
  %89 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_flags101 = getelementptr inbounds %struct.sv, %struct.sv* %89, i32 0, i32 2
  %90 = load i32, i32* %sv_flags101, align 4
  %and102 = and i32 %90, 536870912
  %tobool103 = icmp ne i32 %and102, 0
  br i1 %tobool103, label %if.then.104, label %if.else.106

if.then.104:                                      ; preds = %cond.end
  %91 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags105 = getelementptr inbounds %struct.sv, %struct.sv* %91, i32 0, i32 2
  %92 = load i32, i32* %sv_flags105, align 4
  %or = or i32 %92, 536870912
  store i32 %or, i32* %sv_flags105, align 4
  br label %if.end.109

if.else.106:                                      ; preds = %cond.end
  %93 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags107 = getelementptr inbounds %struct.sv, %struct.sv* %93, i32 0, i32 2
  %94 = load i32, i32* %sv_flags107, align 4
  %and108 = and i32 %94, -536870913
  store i32 %and108, i32* %sv_flags107, align 4
  br label %if.end.109

if.end.109:                                       ; preds = %if.else.106, %if.then.104
  %95 = load i8*, i8** %pv, align 8
  store i8* %95, i8** %retval
  br label %return

if.end.110:                                       ; preds = %lor.lhs.false.85, %land.lhs.true.78, %if.then.74
  %96 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  store %struct.sv* %96, %struct.sv** %origsv, align 8
  %97 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any111 = getelementptr inbounds %struct.sv, %struct.sv* %97, i32 0, i32 0
  %98 = load i8*, i8** %sv_any111, align 8
  %99 = bitcast i8* %98 to %struct.xrv*
  %xrv_rv112 = getelementptr inbounds %struct.xrv, %struct.xrv* %99, i32 0, i32 0
  %100 = load %struct.sv*, %struct.sv** %xrv_rv112, align 8
  store %struct.sv* %100, %struct.sv** %sv.addr, align 8
  %101 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %tobool113 = icmp ne %struct.sv* %101, null
  br i1 %tobool113, label %if.else.115, label %if.then.114

if.then.114:                                      ; preds = %if.end.110
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.10, i32 0, i32 0), i8** %s, align 8
  br label %if.end.279

if.else.115:                                      ; preds = %if.end.110
  %102 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags116 = getelementptr inbounds %struct.sv, %struct.sv* %102, i32 0, i32 2
  %103 = load i32, i32* %sv_flags116, align 4
  %and117 = and i32 %103, 255
  switch i32 %and117, label %sw.default [
    i32 7, label %sw.bb
    i32 0, label %sw.bb.234
    i32 1, label %sw.bb.234
    i32 2, label %sw.bb.234
    i32 3, label %sw.bb.234
    i32 4, label %sw.bb.234
    i32 5, label %sw.bb.234
    i32 6, label %sw.bb.234
    i32 8, label %sw.bb.234
    i32 9, label %sw.bb.241
    i32 10, label %sw.bb.259
    i32 11, label %sw.bb.260
    i32 12, label %sw.bb.261
    i32 13, label %sw.bb.262
    i32 14, label %sw.bb.263
    i32 15, label %sw.bb.264
  ]

sw.bb:                                            ; preds = %if.else.115
  %104 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags118 = getelementptr inbounds %struct.sv, %struct.sv* %104, i32 0, i32 2
  %105 = load i32, i32* %sv_flags118, align 4
  %and119 = and i32 %105, 118484992
  %cmp120 = icmp eq i32 %and119, 20480
  br i1 %cmp120, label %land.lhs.true.122, label %if.end.233

land.lhs.true.122:                                ; preds = %sw.bb
  %106 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call123 = call %struct.magic* @Perl_mg_find(%struct.sv* %106, i32 114)
  store %struct.magic* %call123, %struct.magic** %mg, align 8
  %tobool124 = icmp ne %struct.magic* %call123, null
  br i1 %tobool124, label %if.then.125, label %if.end.233

if.then.125:                                      ; preds = %land.lhs.true.122
  %107 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_obj = getelementptr inbounds %struct.magic, %struct.magic* %107, i32 0, i32 5
  %108 = load %struct.sv*, %struct.sv** %mg_obj, align 8
  %109 = bitcast %struct.sv* %108 to %struct.regexp*
  store %struct.regexp* %109, %struct.regexp** %re, align 8
  %110 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_ptr = getelementptr inbounds %struct.magic, %struct.magic* %110, i32 0, i32 6
  %111 = load i8*, i8** %mg_ptr, align 8
  %tobool126 = icmp ne i8* %111, null
  br i1 %tobool126, label %if.end.216, label %if.then.127

if.then.127:                                      ; preds = %if.then.125
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11, i32 0, i32 0), i8** %fptr, align 8
  store i32 0, i32* %left, align 4
  store i32 4, i32* %right, align 4
  store i8 0, i8* %need_newline, align 1
  %112 = load %struct.regexp*, %struct.regexp** %re, align 8
  %reganch128 = getelementptr inbounds %struct.regexp, %struct.regexp* %112, i32 0, i32 15
  %113 = load i32, i32* %reganch128, align 4
  %and129 = and i32 %113, 63488
  %shr = lshr i32 %and129, 12
  %conv130 = trunc i32 %shr to i16
  store i16 %conv130, i16* %reganch, align 2
  br label %while.cond

while.cond:                                       ; preds = %if.end.140, %if.then.127
  %114 = load i8*, i8** %fptr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %114, i32 1
  store i8* %incdec.ptr, i8** %fptr, align 8
  %115 = load i8, i8* %114, align 1
  store i8 %115, i8* %ch, align 1
  %tobool131 = icmp ne i8 %115, 0
  br i1 %tobool131, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %116 = load i16, i16* %reganch, align 2
  %conv132 = zext i16 %116 to i32
  %and133 = and i32 %conv132, 1
  %tobool134 = icmp ne i32 %and133, 0
  br i1 %tobool134, label %if.then.135, label %if.else.137

if.then.135:                                      ; preds = %while.body
  %117 = load i8, i8* %ch, align 1
  %118 = load i32, i32* %left, align 4
  %inc = add nsw i32 %118, 1
  store i32 %inc, i32* %left, align 4
  %idxprom = sext i32 %118 to i64
  %arrayidx136 = getelementptr inbounds [6 x i8], [6 x i8]* %reflags, i32 0, i64 %idxprom
  store i8 %117, i8* %arrayidx136, align 1
  br label %if.end.140

if.else.137:                                      ; preds = %while.body
  %119 = load i8, i8* %ch, align 1
  %120 = load i32, i32* %right, align 4
  %dec = add nsw i32 %120, -1
  store i32 %dec, i32* %right, align 4
  %idxprom138 = sext i32 %120 to i64
  %arrayidx139 = getelementptr inbounds [6 x i8], [6 x i8]* %reflags, i32 0, i64 %idxprom138
  store i8 %119, i8* %arrayidx139, align 1
  br label %if.end.140

if.end.140:                                       ; preds = %if.else.137, %if.then.135
  %121 = load i16, i16* %reganch, align 2
  %conv141 = zext i16 %121 to i32
  %shr142 = ashr i32 %conv141, 1
  %conv143 = trunc i32 %shr142 to i16
  store i16 %conv143, i16* %reganch, align 2
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %122 = load i32, i32* %left, align 4
  %cmp144 = icmp ne i32 %122, 4
  br i1 %cmp144, label %if.then.146, label %if.end.149

if.then.146:                                      ; preds = %while.end
  %123 = load i32, i32* %left, align 4
  %idxprom147 = sext i32 %123 to i64
  %arrayidx148 = getelementptr inbounds [6 x i8], [6 x i8]* %reflags, i32 0, i64 %idxprom147
  store i8 45, i8* %arrayidx148, align 1
  store i32 5, i32* %left, align 4
  br label %if.end.149

if.end.149:                                       ; preds = %if.then.146, %while.end
  %124 = load %struct.regexp*, %struct.regexp** %re, align 8
  %prelen = getelementptr inbounds %struct.regexp, %struct.regexp* %124, i32 0, i32 11
  %125 = load i32, i32* %prelen, align 4
  %add = add nsw i32 %125, 4
  %126 = load i32, i32* %left, align 4
  %add150 = add nsw i32 %add, %126
  %127 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_len = getelementptr inbounds %struct.magic, %struct.magic* %127, i32 0, i32 7
  store i32 %add150, i32* %mg_len, align 4
  %128 = load %struct.regexp*, %struct.regexp** %re, align 8
  %reganch151 = getelementptr inbounds %struct.regexp, %struct.regexp* %128, i32 0, i32 15
  %129 = load i32, i32* %reganch151, align 4
  %and152 = and i32 32768, %129
  %tobool153 = icmp ne i32 %and152, 0
  br i1 %tobool153, label %if.then.154, label %if.end.175

if.then.154:                                      ; preds = %if.end.149
  %130 = load %struct.regexp*, %struct.regexp** %re, align 8
  %precomp = getelementptr inbounds %struct.regexp, %struct.regexp* %130, i32 0, i32 4
  %131 = load i8*, i8** %precomp, align 8
  %132 = load %struct.regexp*, %struct.regexp** %re, align 8
  %prelen155 = getelementptr inbounds %struct.regexp, %struct.regexp* %132, i32 0, i32 11
  %133 = load i32, i32* %prelen155, align 4
  %idx.ext = sext i32 %133 to i64
  %add.ptr = getelementptr inbounds i8, i8* %131, i64 %idx.ext
  store i8* %add.ptr, i8** %endptr, align 8
  br label %while.cond.156

while.cond.156:                                   ; preds = %if.end.173, %if.then.154
  %134 = load i8*, i8** %endptr, align 8
  %135 = load %struct.regexp*, %struct.regexp** %re, align 8
  %precomp157 = getelementptr inbounds %struct.regexp, %struct.regexp* %135, i32 0, i32 4
  %136 = load i8*, i8** %precomp157, align 8
  %cmp158 = icmp uge i8* %134, %136
  br i1 %cmp158, label %while.body.160, label %while.end.174

while.body.160:                                   ; preds = %while.cond.156
  %137 = load i8*, i8** %endptr, align 8
  %incdec.ptr161 = getelementptr inbounds i8, i8* %137, i32 -1
  store i8* %incdec.ptr161, i8** %endptr, align 8
  %138 = load i8, i8* %137, align 1
  store i8 %138, i8* %c, align 1
  %139 = load i8, i8* %c, align 1
  %conv162 = sext i8 %139 to i32
  %cmp163 = icmp eq i32 %conv162, 10
  br i1 %cmp163, label %if.then.165, label %if.end.166

if.then.165:                                      ; preds = %while.body.160
  br label %while.end.174

if.end.166:                                       ; preds = %while.body.160
  %140 = load i8, i8* %c, align 1
  %conv167 = sext i8 %140 to i32
  %cmp168 = icmp eq i32 %conv167, 35
  br i1 %cmp168, label %if.then.170, label %if.end.173

if.then.170:                                      ; preds = %if.end.166
  %141 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_len171 = getelementptr inbounds %struct.magic, %struct.magic* %141, i32 0, i32 7
  %142 = load i32, i32* %mg_len171, align 4
  %inc172 = add nsw i32 %142, 1
  store i32 %inc172, i32* %mg_len171, align 4
  store i8 1, i8* %need_newline, align 1
  br label %while.end.174

if.end.173:                                       ; preds = %if.end.166
  br label %while.cond.156

while.end.174:                                    ; preds = %if.then.170, %if.then.165, %while.cond.156
  br label %if.end.175

if.end.175:                                       ; preds = %while.end.174, %if.end.149
  %143 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_len176 = getelementptr inbounds %struct.magic, %struct.magic* %143, i32 0, i32 7
  %144 = load i32, i32* %mg_len176, align 4
  %add177 = add nsw i32 %144, 1
  %145 = load i32, i32* %left, align 4
  %add178 = add nsw i32 %add177, %145
  %conv179 = sext i32 %add178 to i64
  %mul = mul i64 %conv179, 1
  %call180 = call i8* @Perl_safesysmalloc(i64 %mul)
  %146 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_ptr181 = getelementptr inbounds %struct.magic, %struct.magic* %146, i32 0, i32 6
  store i8* %call180, i8** %mg_ptr181, align 8
  %147 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_ptr182 = getelementptr inbounds %struct.magic, %struct.magic* %147, i32 0, i32 6
  %148 = load i8*, i8** %mg_ptr182, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %148, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i64 2, i32 1, i1 false)
  %149 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_ptr183 = getelementptr inbounds %struct.magic, %struct.magic* %149, i32 0, i32 6
  %150 = load i8*, i8** %mg_ptr183, align 8
  %add.ptr184 = getelementptr inbounds i8, i8* %150, i64 2
  %arraydecay185 = getelementptr inbounds [6 x i8], [6 x i8]* %reflags, i32 0, i32 0
  %151 = load i32, i32* %left, align 4
  %conv186 = sext i32 %151 to i64
  %mul187 = mul i64 %conv186, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %add.ptr184, i8* %arraydecay185, i64 %mul187, i32 1, i1 false)
  %152 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_ptr188 = getelementptr inbounds %struct.magic, %struct.magic* %152, i32 0, i32 6
  %153 = load i8*, i8** %mg_ptr188, align 8
  %154 = load i32, i32* %left, align 4
  %idx.ext189 = sext i32 %154 to i64
  %add.ptr190 = getelementptr inbounds i8, i8* %153, i64 %idx.ext189
  %add.ptr191 = getelementptr inbounds i8, i8* %add.ptr190, i64 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %add.ptr191, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i32 0, i32 0), i64 1, i32 1, i1 false)
  %155 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_ptr192 = getelementptr inbounds %struct.magic, %struct.magic* %155, i32 0, i32 6
  %156 = load i8*, i8** %mg_ptr192, align 8
  %add.ptr193 = getelementptr inbounds i8, i8* %156, i64 3
  %157 = load i32, i32* %left, align 4
  %idx.ext194 = sext i32 %157 to i64
  %add.ptr195 = getelementptr inbounds i8, i8* %add.ptr193, i64 %idx.ext194
  %158 = load %struct.regexp*, %struct.regexp** %re, align 8
  %precomp196 = getelementptr inbounds %struct.regexp, %struct.regexp* %158, i32 0, i32 4
  %159 = load i8*, i8** %precomp196, align 8
  %160 = load %struct.regexp*, %struct.regexp** %re, align 8
  %prelen197 = getelementptr inbounds %struct.regexp, %struct.regexp* %160, i32 0, i32 11
  %161 = load i32, i32* %prelen197, align 4
  %conv198 = sext i32 %161 to i64
  %mul199 = mul i64 %conv198, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %add.ptr195, i8* %159, i64 %mul199, i32 1, i1 false)
  %162 = load i8, i8* %need_newline, align 1
  %tobool200 = icmp ne i8 %162, 0
  br i1 %tobool200, label %if.then.201, label %if.end.206

if.then.201:                                      ; preds = %if.end.175
  %163 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_len202 = getelementptr inbounds %struct.magic, %struct.magic* %163, i32 0, i32 7
  %164 = load i32, i32* %mg_len202, align 4
  %sub = sub nsw i32 %164, 2
  %idxprom203 = sext i32 %sub to i64
  %165 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_ptr204 = getelementptr inbounds %struct.magic, %struct.magic* %165, i32 0, i32 6
  %166 = load i8*, i8** %mg_ptr204, align 8
  %arrayidx205 = getelementptr inbounds i8, i8* %166, i64 %idxprom203
  store i8 10, i8* %arrayidx205, align 1
  br label %if.end.206

if.end.206:                                       ; preds = %if.then.201, %if.end.175
  %167 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_len207 = getelementptr inbounds %struct.magic, %struct.magic* %167, i32 0, i32 7
  %168 = load i32, i32* %mg_len207, align 4
  %sub208 = sub nsw i32 %168, 1
  %idxprom209 = sext i32 %sub208 to i64
  %169 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_ptr210 = getelementptr inbounds %struct.magic, %struct.magic* %169, i32 0, i32 6
  %170 = load i8*, i8** %mg_ptr210, align 8
  %arrayidx211 = getelementptr inbounds i8, i8* %170, i64 %idxprom209
  store i8 41, i8* %arrayidx211, align 1
  %171 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_len212 = getelementptr inbounds %struct.magic, %struct.magic* %171, i32 0, i32 7
  %172 = load i32, i32* %mg_len212, align 4
  %idxprom213 = sext i32 %172 to i64
  %173 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_ptr214 = getelementptr inbounds %struct.magic, %struct.magic* %173, i32 0, i32 6
  %174 = load i8*, i8** %mg_ptr214, align 8
  %arrayidx215 = getelementptr inbounds i8, i8* %174, i64 %idxprom213
  store i8 0, i8* %arrayidx215, align 1
  br label %if.end.216

if.end.216:                                       ; preds = %if.end.206, %if.then.125
  %175 = load %struct.regexp*, %struct.regexp** %re, align 8
  %program = getelementptr inbounds %struct.regexp, %struct.regexp* %175, i32 0, i32 16
  %arrayidx217 = getelementptr inbounds [1 x %struct.regnode], [1 x %struct.regnode]* %program, i32 0, i64 0
  %next_off = getelementptr inbounds %struct.regnode, %struct.regnode* %arrayidx217, i32 0, i32 2
  %176 = load i16, i16* %next_off, align 2
  %conv218 = zext i16 %176 to i32
  %177 = load i32, i32* @PL_reginterp_cnt, align 4
  %add219 = add nsw i32 %177, %conv218
  store i32 %add219, i32* @PL_reginterp_cnt, align 4
  %178 = load %struct.regexp*, %struct.regexp** %re, align 8
  %reganch220 = getelementptr inbounds %struct.regexp, %struct.regexp* %178, i32 0, i32 15
  %179 = load i32, i32* %reganch220, align 4
  %and221 = and i32 %179, 65536
  %tobool222 = icmp ne i32 %and221, 0
  br i1 %tobool222, label %if.then.223, label %if.else.226

if.then.223:                                      ; preds = %if.end.216
  %180 = load %struct.sv*, %struct.sv** %origsv, align 8
  %sv_flags224 = getelementptr inbounds %struct.sv, %struct.sv* %180, i32 0, i32 2
  %181 = load i32, i32* %sv_flags224, align 4
  %or225 = or i32 %181, 536870912
  store i32 %or225, i32* %sv_flags224, align 4
  br label %if.end.229

if.else.226:                                      ; preds = %if.end.216
  %182 = load %struct.sv*, %struct.sv** %origsv, align 8
  %sv_flags227 = getelementptr inbounds %struct.sv, %struct.sv* %182, i32 0, i32 2
  %183 = load i32, i32* %sv_flags227, align 4
  %and228 = and i32 %183, -536870913
  store i32 %and228, i32* %sv_flags227, align 4
  br label %if.end.229

if.end.229:                                       ; preds = %if.else.226, %if.then.223
  %184 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_len230 = getelementptr inbounds %struct.magic, %struct.magic* %184, i32 0, i32 7
  %185 = load i32, i32* %mg_len230, align 4
  %conv231 = sext i32 %185 to i64
  %186 = load i64*, i64** %lp.addr, align 8
  store i64 %conv231, i64* %186, align 8
  %187 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_ptr232 = getelementptr inbounds %struct.magic, %struct.magic* %187, i32 0, i32 6
  %188 = load i8*, i8** %mg_ptr232, align 8
  store i8* %188, i8** %retval
  br label %return

if.end.233:                                       ; preds = %land.lhs.true.122, %sw.bb
  br label %sw.bb.234

sw.bb.234:                                        ; preds = %if.else.115, %if.else.115, %if.else.115, %if.else.115, %if.else.115, %if.else.115, %if.else.115, %if.else.115, %if.end.233
  %189 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags235 = getelementptr inbounds %struct.sv, %struct.sv* %189, i32 0, i32 2
  %190 = load i32, i32* %sv_flags235, align 4
  %and236 = and i32 %190, 524288
  %tobool237 = icmp ne i32 %and236, 0
  br i1 %tobool237, label %if.then.238, label %if.else.239

if.then.238:                                      ; preds = %sw.bb.234
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14, i32 0, i32 0), i8** %s, align 8
  br label %if.end.240

if.else.239:                                      ; preds = %sw.bb.234
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.15, i32 0, i32 0), i8** %s, align 8
  br label %if.end.240

if.end.240:                                       ; preds = %if.else.239, %if.then.238
  br label %sw.epilog

sw.bb.241:                                        ; preds = %if.else.115
  %191 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags242 = getelementptr inbounds %struct.sv, %struct.sv* %191, i32 0, i32 2
  %192 = load i32, i32* %sv_flags242, align 4
  %and243 = and i32 %192, 524288
  %tobool244 = icmp ne i32 %and243, 0
  br i1 %tobool244, label %cond.true.245, label %cond.false.246

cond.true.245:                                    ; preds = %sw.bb.241
  br label %cond.end.257

cond.false.246:                                   ; preds = %sw.bb.241
  %193 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any247 = getelementptr inbounds %struct.sv, %struct.sv* %193, i32 0, i32 0
  %194 = load i8*, i8** %sv_any247, align 8
  %195 = bitcast i8* %194 to %struct.xpvlv*
  %xlv_type = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %195, i32 0, i32 10
  %196 = load i8, i8* %xlv_type, align 1
  %conv248 = sext i8 %196 to i32
  %cmp249 = icmp eq i32 %conv248, 116
  br i1 %cmp249, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %cond.false.246
  %197 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any251 = getelementptr inbounds %struct.sv, %struct.sv* %197, i32 0, i32 0
  %198 = load i8*, i8** %sv_any251, align 8
  %199 = bitcast i8* %198 to %struct.xpvlv*
  %xlv_type252 = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %199, i32 0, i32 10
  %200 = load i8, i8* %xlv_type252, align 1
  %conv253 = sext i8 %200 to i32
  %cmp254 = icmp eq i32 %conv253, 84
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %cond.false.246
  %201 = phi i1 [ true, %cond.false.246 ], [ %cmp254, %lor.rhs ]
  %cond256 = select i1 %201, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.16, i32 0, i32 0)
  br label %cond.end.257

cond.end.257:                                     ; preds = %lor.end, %cond.true.245
  %cond258 = phi i8* [ getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14, i32 0, i32 0), %cond.true.245 ], [ %cond256, %lor.end ]
  store i8* %cond258, i8** %s, align 8
  br label %sw.epilog

sw.bb.259:                                        ; preds = %if.else.115
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.17, i32 0, i32 0), i8** %s, align 8
  br label %sw.epilog

sw.bb.260:                                        ; preds = %if.else.115
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.18, i32 0, i32 0), i8** %s, align 8
  br label %sw.epilog

sw.bb.261:                                        ; preds = %if.else.115
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19, i32 0, i32 0), i8** %s, align 8
  br label %sw.epilog

sw.bb.262:                                        ; preds = %if.else.115
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.20, i32 0, i32 0), i8** %s, align 8
  br label %sw.epilog

sw.bb.263:                                        ; preds = %if.else.115
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.21, i32 0, i32 0), i8** %s, align 8
  br label %sw.epilog

sw.bb.264:                                        ; preds = %if.else.115
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.22, i32 0, i32 0), i8** %s, align 8
  br label %sw.epilog

sw.default:                                       ; preds = %if.else.115
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.23, i32 0, i32 0), i8** %s, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb.264, %sw.bb.263, %sw.bb.262, %sw.bb.261, %sw.bb.260, %sw.bb.259, %cond.end.257, %if.end.240
  %call265 = call %struct.sv* @Perl_newSV(i64 0)
  store %struct.sv* %call265, %struct.sv** %tsv, align 8
  %202 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags266 = getelementptr inbounds %struct.sv, %struct.sv* %202, i32 0, i32 2
  %203 = load i32, i32* %sv_flags266, align 4
  %and267 = and i32 %203, 4096
  %tobool268 = icmp ne i32 %and267, 0
  br i1 %tobool268, label %if.then.269, label %if.else.277

if.then.269:                                      ; preds = %sw.epilog
  %204 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any270 = getelementptr inbounds %struct.sv, %struct.sv* %204, i32 0, i32 0
  %205 = load i8*, i8** %sv_any270, align 8
  %206 = bitcast i8* %205 to %struct.xpvmg*
  %xmg_stash = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %206, i32 0, i32 6
  %207 = load %struct.hv*, %struct.hv** %xmg_stash, align 8
  %sv_any271 = getelementptr inbounds %struct.hv, %struct.hv* %207, i32 0, i32 0
  %208 = load %struct.xpvhv*, %struct.xpvhv** %sv_any271, align 8
  %xhv_name = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %208, i32 0, i32 10
  %209 = load i8*, i8** %xhv_name, align 8
  store i8* %209, i8** %name, align 8
  %210 = load %struct.sv*, %struct.sv** %tsv, align 8
  %211 = load i8*, i8** %name, align 8
  %tobool272 = icmp ne i8* %211, null
  br i1 %tobool272, label %cond.true.273, label %cond.false.274

cond.true.273:                                    ; preds = %if.then.269
  %212 = load i8*, i8** %name, align 8
  br label %cond.end.275

cond.false.274:                                   ; preds = %if.then.269
  br label %cond.end.275

cond.end.275:                                     ; preds = %cond.false.274, %cond.true.273
  %cond276 = phi i8* [ %212, %cond.true.273 ], [ getelementptr inbounds ([9 x i8], [9 x i8]* @.str.25, i32 0, i32 0), %cond.false.274 ]
  %213 = load i8*, i8** %s, align 8
  %214 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %215 = ptrtoint %struct.sv* %214 to i64
  call void (%struct.sv*, i8*, ...) @Perl_sv_setpvf(%struct.sv* %210, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.24, i32 0, i32 0), i8* %cond276, i8* %213, i64 %215)
  br label %if.end.278

if.else.277:                                      ; preds = %sw.epilog
  %216 = load %struct.sv*, %struct.sv** %tsv, align 8
  %217 = load i8*, i8** %s, align 8
  %218 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %219 = ptrtoint %struct.sv* %218 to i64
  call void (%struct.sv*, i8*, ...) @Perl_sv_setpvf(%struct.sv* %216, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.26, i32 0, i32 0), i8* %217, i64 %219)
  br label %if.end.278

if.end.278:                                       ; preds = %if.else.277, %cond.end.275
  br label %tokensaveref

if.end.279:                                       ; preds = %if.then.114
  %220 = load i8*, i8** %s, align 8
  %call280 = call i64 @strlen(i8* %220)
  %221 = load i64*, i64** %lp.addr, align 8
  store i64 %call280, i64* %221, align 8
  %222 = load i8*, i8** %s, align 8
  store i8* %222, i8** %retval
  br label %return

if.end.281:                                       ; preds = %if.then.70
  %223 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags282 = getelementptr inbounds %struct.sv, %struct.sv* %223, i32 0, i32 2
  %224 = load i32, i32* %sv_flags282, align 4
  %and283 = and i32 %224, 8388608
  %tobool284 = icmp ne i32 %and283, 0
  br i1 %tobool284, label %land.lhs.true.285, label %if.end.319

land.lhs.true.285:                                ; preds = %if.end.281
  %225 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags286 = getelementptr inbounds %struct.sv, %struct.sv* %225, i32 0, i32 2
  %226 = load i32, i32* %sv_flags286, align 4
  %and287 = and i32 %226, 118423552
  %tobool288 = icmp ne i32 %and287, 0
  br i1 %tobool288, label %if.end.319, label %if.then.289

if.then.289:                                      ; preds = %land.lhs.true.285
  %227 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings290 = getelementptr inbounds %struct.cop, %struct.cop* %227, i32 0, i32 14
  %228 = load %struct.sv*, %struct.sv** %cop_warnings290, align 8
  %cmp291 = icmp ne %struct.sv* %228, null
  br i1 %cmp291, label %land.lhs.true.293, label %lor.lhs.false.309

land.lhs.true.293:                                ; preds = %if.then.289
  %229 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings294 = getelementptr inbounds %struct.cop, %struct.cop* %229, i32 0, i32 14
  %230 = load %struct.sv*, %struct.sv** %cop_warnings294, align 8
  %cmp295 = icmp ne %struct.sv* %230, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 2)
  br i1 %cmp295, label %land.lhs.true.297, label %lor.lhs.false.309

land.lhs.true.297:                                ; preds = %land.lhs.true.293
  %231 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings298 = getelementptr inbounds %struct.cop, %struct.cop* %231, i32 0, i32 14
  %232 = load %struct.sv*, %struct.sv** %cop_warnings298, align 8
  %cmp299 = icmp eq %struct.sv* %232, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 1)
  br i1 %cmp299, label %if.then.317, label %lor.lhs.false.301

lor.lhs.false.301:                                ; preds = %land.lhs.true.297
  %233 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings302 = getelementptr inbounds %struct.cop, %struct.cop* %233, i32 0, i32 14
  %234 = load %struct.sv*, %struct.sv** %cop_warnings302, align 8
  %sv_any303 = getelementptr inbounds %struct.sv, %struct.sv* %234, i32 0, i32 0
  %235 = load i8*, i8** %sv_any303, align 8
  %236 = bitcast i8* %235 to %struct.xpv*
  %xpv_pv304 = getelementptr inbounds %struct.xpv, %struct.xpv* %236, i32 0, i32 0
  %237 = load i8*, i8** %xpv_pv304, align 8
  %arrayidx305 = getelementptr inbounds i8, i8* %237, i64 10
  %238 = load i8, i8* %arrayidx305, align 1
  %conv306 = sext i8 %238 to i32
  %and307 = and i32 %conv306, 4
  %tobool308 = icmp ne i32 %and307, 0
  br i1 %tobool308, label %if.then.317, label %lor.lhs.false.309

lor.lhs.false.309:                                ; preds = %lor.lhs.false.301, %land.lhs.true.293, %if.then.289
  %239 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings310 = getelementptr inbounds %struct.cop, %struct.cop* %239, i32 0, i32 14
  %240 = load %struct.sv*, %struct.sv** %cop_warnings310, align 8
  %cmp311 = icmp eq %struct.sv* %240, null
  br i1 %cmp311, label %land.lhs.true.313, label %if.end.318

land.lhs.true.313:                                ; preds = %lor.lhs.false.309
  %241 = load i8, i8* @PL_dowarn, align 1
  %conv314 = zext i8 %241 to i32
  %and315 = and i32 %conv314, 1
  %tobool316 = icmp ne i32 %and315, 0
  br i1 %tobool316, label %if.then.317, label %if.end.318

if.then.317:                                      ; preds = %land.lhs.true.313, %lor.lhs.false.301, %land.lhs.true.297
  call void @Perl_report_uninit()
  br label %if.end.318

if.end.318:                                       ; preds = %if.then.317, %land.lhs.true.313, %lor.lhs.false.309
  %242 = load i64*, i64** %lp.addr, align 8
  store i64 0, i64* %242, align 8
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0), i8** %retval
  br label %return

if.end.319:                                       ; preds = %land.lhs.true.285, %if.end.281
  br label %if.end.320

if.end.320:                                       ; preds = %if.end.319, %if.end.66
  %243 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags321 = getelementptr inbounds %struct.sv, %struct.sv* %243, i32 0, i32 2
  %244 = load i32, i32* %sv_flags321, align 4
  %and322 = and i32 %244, 65536
  %tobool323 = icmp ne i32 %and322, 0
  br i1 %tobool323, label %if.then.332, label %lor.lhs.false.324

lor.lhs.false.324:                                ; preds = %if.end.320
  %245 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags325 = getelementptr inbounds %struct.sv, %struct.sv* %245, i32 0, i32 2
  %246 = load i32, i32* %sv_flags325, align 4
  %and326 = and i32 %246, 16777216
  %tobool327 = icmp ne i32 %and326, 0
  br i1 %tobool327, label %land.lhs.true.328, label %if.else.413

land.lhs.true.328:                                ; preds = %lor.lhs.false.324
  %247 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags329 = getelementptr inbounds %struct.sv, %struct.sv* %247, i32 0, i32 2
  %248 = load i32, i32* %sv_flags329, align 4
  %and330 = and i32 %248, 33554432
  %tobool331 = icmp ne i32 %and330, 0
  br i1 %tobool331, label %if.else.413, label %if.then.332

if.then.332:                                      ; preds = %land.lhs.true.328, %if.end.320
  %249 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags333 = getelementptr inbounds %struct.sv, %struct.sv* %249, i32 0, i32 2
  %250 = load i32, i32* %sv_flags333, align 4
  %and334 = and i32 %250, 65536
  store i32 %and334, i32* %isIOK, align 4
  %251 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags335 = getelementptr inbounds %struct.sv, %struct.sv* %251, i32 0, i32 2
  %252 = load i32, i32* %sv_flags335, align 4
  %and336 = and i32 %252, -2147483648
  store i32 %and336, i32* %isUIOK, align 4
  %253 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags337 = getelementptr inbounds %struct.sv, %struct.sv* %253, i32 0, i32 2
  %254 = load i32, i32* %sv_flags337, align 4
  %and338 = and i32 %254, 255
  %cmp339 = icmp ult i32 %and338, 5
  br i1 %cmp339, label %if.then.341, label %if.end.343

if.then.341:                                      ; preds = %if.then.332
  %255 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call342 = call signext i8 @Perl_sv_upgrade(%struct.sv* %255, i32 5)
  br label %if.end.343

if.end.343:                                       ; preds = %if.then.341, %if.then.332
  %256 = load i32, i32* %isUIOK, align 4
  %tobool344 = icmp ne i32 %256, 0
  br i1 %tobool344, label %if.then.345, label %if.else.350

if.then.345:                                      ; preds = %if.end.343
  %arraydecay346 = getelementptr inbounds [22 x i8], [22 x i8]* %buf, i32 0, i32 0
  %257 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any347 = getelementptr inbounds %struct.sv, %struct.sv* %257, i32 0, i32 0
  %258 = load i8*, i8** %sv_any347, align 8
  %259 = bitcast i8* %258 to %struct.xpvuv*
  %xuv_uv348 = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %259, i32 0, i32 3
  %260 = load i64, i64* %xuv_uv348, align 8
  %call349 = call i8* @uiv_2buf(i8* %arraydecay346, i64 0, i64 %260, i32 1, i8** %ebuf)
  store i8* %call349, i8** %ptr, align 8
  br label %if.end.355

if.else.350:                                      ; preds = %if.end.343
  %arraydecay351 = getelementptr inbounds [22 x i8], [22 x i8]* %buf, i32 0, i32 0
  %261 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any352 = getelementptr inbounds %struct.sv, %struct.sv* %261, i32 0, i32 0
  %262 = load i8*, i8** %sv_any352, align 8
  %263 = bitcast i8* %262 to %struct.xpviv*
  %xiv_iv353 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %263, i32 0, i32 3
  %264 = load i64, i64* %xiv_iv353, align 8
  %call354 = call i8* @uiv_2buf(i8* %arraydecay351, i64 %264, i64 0, i32 0, i8** %ebuf)
  store i8* %call354, i8** %ptr, align 8
  br label %if.end.355

if.end.355:                                       ; preds = %if.else.350, %if.then.345
  %265 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any356 = getelementptr inbounds %struct.sv, %struct.sv* %265, i32 0, i32 0
  %266 = load i8*, i8** %sv_any356, align 8
  %267 = bitcast i8* %266 to %struct.xpv*
  %xpv_len = getelementptr inbounds %struct.xpv, %struct.xpv* %267, i32 0, i32 2
  %268 = load i64, i64* %xpv_len, align 8
  %269 = load i8*, i8** %ebuf, align 8
  %270 = load i8*, i8** %ptr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %269 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %270 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %add357 = add nsw i64 %sub.ptr.sub, 1
  %cmp358 = icmp ult i64 %268, %add357
  br i1 %cmp358, label %cond.true.360, label %cond.false.366

cond.true.360:                                    ; preds = %if.end.355
  %271 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %272 = load i8*, i8** %ebuf, align 8
  %273 = load i8*, i8** %ptr, align 8
  %sub.ptr.lhs.cast361 = ptrtoint i8* %272 to i64
  %sub.ptr.rhs.cast362 = ptrtoint i8* %273 to i64
  %sub.ptr.sub363 = sub i64 %sub.ptr.lhs.cast361, %sub.ptr.rhs.cast362
  %add364 = add nsw i64 %sub.ptr.sub363, 1
  %call365 = call i8* @Perl_sv_grow(%struct.sv* %271, i64 %add364)
  br label %cond.end.369

cond.false.366:                                   ; preds = %if.end.355
  %274 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any367 = getelementptr inbounds %struct.sv, %struct.sv* %274, i32 0, i32 0
  %275 = load i8*, i8** %sv_any367, align 8
  %276 = bitcast i8* %275 to %struct.xpv*
  %xpv_pv368 = getelementptr inbounds %struct.xpv, %struct.xpv* %276, i32 0, i32 0
  %277 = load i8*, i8** %xpv_pv368, align 8
  br label %cond.end.369

cond.end.369:                                     ; preds = %cond.false.366, %cond.true.360
  %cond370 = phi i8* [ %call365, %cond.true.360 ], [ %277, %cond.false.366 ]
  %278 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any371 = getelementptr inbounds %struct.sv, %struct.sv* %278, i32 0, i32 0
  %279 = load i8*, i8** %sv_any371, align 8
  %280 = bitcast i8* %279 to %struct.xpv*
  %xpv_pv372 = getelementptr inbounds %struct.xpv, %struct.xpv* %280, i32 0, i32 0
  %281 = load i8*, i8** %xpv_pv372, align 8
  %282 = load i8*, i8** %ptr, align 8
  %283 = load i8*, i8** %ebuf, align 8
  %284 = load i8*, i8** %ptr, align 8
  %sub.ptr.lhs.cast373 = ptrtoint i8* %283 to i64
  %sub.ptr.rhs.cast374 = ptrtoint i8* %284 to i64
  %sub.ptr.sub375 = sub i64 %sub.ptr.lhs.cast373, %sub.ptr.rhs.cast374
  %mul376 = mul i64 %sub.ptr.sub375, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %281, i8* %282, i64 %mul376, i32 1, i1 false)
  %285 = load i8*, i8** %ebuf, align 8
  %286 = load i8*, i8** %ptr, align 8
  %sub.ptr.lhs.cast377 = ptrtoint i8* %285 to i64
  %sub.ptr.rhs.cast378 = ptrtoint i8* %286 to i64
  %sub.ptr.sub379 = sub i64 %sub.ptr.lhs.cast377, %sub.ptr.rhs.cast378
  %287 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any380 = getelementptr inbounds %struct.sv, %struct.sv* %287, i32 0, i32 0
  %288 = load i8*, i8** %sv_any380, align 8
  %289 = bitcast i8* %288 to %struct.xpv*
  %xpv_cur381 = getelementptr inbounds %struct.xpv, %struct.xpv* %289, i32 0, i32 1
  store i64 %sub.ptr.sub379, i64* %xpv_cur381, align 8
  store i64 %sub.ptr.sub379, i64* %tmp
  %290 = load i64, i64* %tmp
  %291 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any382 = getelementptr inbounds %struct.sv, %struct.sv* %291, i32 0, i32 0
  %292 = load i8*, i8** %sv_any382, align 8
  %293 = bitcast i8* %292 to %struct.xpv*
  %xpv_pv383 = getelementptr inbounds %struct.xpv, %struct.xpv* %293, i32 0, i32 0
  %294 = load i8*, i8** %xpv_pv383, align 8
  %295 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any384 = getelementptr inbounds %struct.sv, %struct.sv* %295, i32 0, i32 0
  %296 = load i8*, i8** %sv_any384, align 8
  %297 = bitcast i8* %296 to %struct.xpv*
  %xpv_cur385 = getelementptr inbounds %struct.xpv, %struct.xpv* %297, i32 0, i32 1
  %298 = load i64, i64* %xpv_cur385, align 8
  %add.ptr386 = getelementptr inbounds i8, i8* %294, i64 %298
  store i8* %add.ptr386, i8** %s, align 8
  %299 = load i8*, i8** %s, align 8
  store i8 0, i8* %299, align 1
  %300 = load i32, i32* %isIOK, align 4
  %tobool387 = icmp ne i32 %300, 0
  br i1 %tobool387, label %if.then.388, label %if.else.396

if.then.388:                                      ; preds = %cond.end.369
  %301 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags389 = getelementptr inbounds %struct.sv, %struct.sv* %301, i32 0, i32 2
  %302 = load i32, i32* %sv_flags389, align 4
  %and390 = and i32 %302, 2097152
  %tobool391 = icmp ne i32 %and390, 0
  br i1 %tobool391, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then.388
  %303 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call392 = call i32 @Perl_sv_backoff(%struct.sv* %303)
  %tobool393 = icmp ne i32 %call392, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then.388
  %304 = phi i1 [ false, %if.then.388 ], [ %tobool393, %land.rhs ]
  %land.ext = zext i1 %304 to i32
  %305 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags394 = getelementptr inbounds %struct.sv, %struct.sv* %305, i32 0, i32 2
  %306 = load i32, i32* %sv_flags394, align 4
  %or395 = or i32 %306, 16842752
  store i32 %or395, i32* %sv_flags394, align 4
  br label %if.end.407

if.else.396:                                      ; preds = %cond.end.369
  %307 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags397 = getelementptr inbounds %struct.sv, %struct.sv* %307, i32 0, i32 2
  %308 = load i32, i32* %sv_flags397, align 4
  %and398 = and i32 %308, 2097152
  %tobool399 = icmp ne i32 %and398, 0
  br i1 %tobool399, label %land.rhs.400, label %land.end.403

land.rhs.400:                                     ; preds = %if.else.396
  %309 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call401 = call i32 @Perl_sv_backoff(%struct.sv* %309)
  %tobool402 = icmp ne i32 %call401, 0
  br label %land.end.403

land.end.403:                                     ; preds = %land.rhs.400, %if.else.396
  %310 = phi i1 [ false, %if.else.396 ], [ %tobool402, %land.rhs.400 ]
  %land.ext404 = zext i1 %310 to i32
  %311 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags405 = getelementptr inbounds %struct.sv, %struct.sv* %311, i32 0, i32 2
  %312 = load i32, i32* %sv_flags405, align 4
  %or406 = or i32 %312, 16777216
  store i32 %or406, i32* %sv_flags405, align 4
  br label %if.end.407

if.end.407:                                       ; preds = %land.end.403, %land.end
  %313 = load i32, i32* %isUIOK, align 4
  %tobool408 = icmp ne i32 %313, 0
  br i1 %tobool408, label %if.then.409, label %if.end.412

if.then.409:                                      ; preds = %if.end.407
  %314 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags410 = getelementptr inbounds %struct.sv, %struct.sv* %314, i32 0, i32 2
  %315 = load i32, i32* %sv_flags410, align 4
  %or411 = or i32 %315, -2147483648
  store i32 %or411, i32* %sv_flags410, align 4
  br label %if.end.412

if.end.412:                                       ; preds = %if.then.409, %if.end.407
  br label %if.end.492

if.else.413:                                      ; preds = %land.lhs.true.328, %lor.lhs.false.324
  %316 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags414 = getelementptr inbounds %struct.sv, %struct.sv* %316, i32 0, i32 2
  %317 = load i32, i32* %sv_flags414, align 4
  %and415 = and i32 %317, 33554432
  %tobool416 = icmp ne i32 %and415, 0
  br i1 %tobool416, label %if.then.417, label %if.else.448

if.then.417:                                      ; preds = %if.else.413
  %318 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags418 = getelementptr inbounds %struct.sv, %struct.sv* %318, i32 0, i32 2
  %319 = load i32, i32* %sv_flags418, align 4
  %and419 = and i32 %319, 255
  %cmp420 = icmp ult i32 %and419, 6
  br i1 %cmp420, label %if.then.422, label %if.end.424

if.then.422:                                      ; preds = %if.then.417
  %320 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call423 = call signext i8 @Perl_sv_upgrade(%struct.sv* %320, i32 6)
  br label %if.end.424

if.end.424:                                       ; preds = %if.then.422, %if.then.417
  %321 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any425 = getelementptr inbounds %struct.sv, %struct.sv* %321, i32 0, i32 0
  %322 = load i8*, i8** %sv_any425, align 8
  %323 = bitcast i8* %322 to %struct.xpv*
  %xpv_len426 = getelementptr inbounds %struct.xpv, %struct.xpv* %323, i32 0, i32 2
  %324 = load i64, i64* %xpv_len426, align 8
  %cmp427 = icmp ult i64 %324, 35
  br i1 %cmp427, label %cond.true.429, label %cond.false.431

cond.true.429:                                    ; preds = %if.end.424
  %325 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call430 = call i8* @Perl_sv_grow(%struct.sv* %325, i64 35)
  br label %cond.end.434

cond.false.431:                                   ; preds = %if.end.424
  %326 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any432 = getelementptr inbounds %struct.sv, %struct.sv* %326, i32 0, i32 0
  %327 = load i8*, i8** %sv_any432, align 8
  %328 = bitcast i8* %327 to %struct.xpv*
  %xpv_pv433 = getelementptr inbounds %struct.xpv, %struct.xpv* %328, i32 0, i32 0
  %329 = load i8*, i8** %xpv_pv433, align 8
  br label %cond.end.434

cond.end.434:                                     ; preds = %cond.false.431, %cond.true.429
  %cond435 = phi i8* [ %call430, %cond.true.429 ], [ %329, %cond.false.431 ]
  %330 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any436 = getelementptr inbounds %struct.sv, %struct.sv* %330, i32 0, i32 0
  %331 = load i8*, i8** %sv_any436, align 8
  %332 = bitcast i8* %331 to %struct.xpv*
  %xpv_pv437 = getelementptr inbounds %struct.xpv, %struct.xpv* %332, i32 0, i32 0
  %333 = load i8*, i8** %xpv_pv437, align 8
  store i8* %333, i8** %s, align 8
  %call438 = call i32* @__errno_location()
  %334 = load i32, i32* %call438, align 4
  store i32 %334, i32* %olderrno, align 4
  %335 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any439 = getelementptr inbounds %struct.sv, %struct.sv* %335, i32 0, i32 0
  %336 = load i8*, i8** %sv_any439, align 8
  %337 = bitcast i8* %336 to %struct.xpvnv*
  %xnv_nv440 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %337, i32 0, i32 4
  %338 = load double, double* %xnv_nv440, align 8
  %339 = load i8*, i8** %s, align 8
  %call441 = call i8* @gcvt(double %338, i32 15, i8* %339)
  %340 = load i32, i32* %olderrno, align 4
  %call442 = call i32* @__errno_location()
  store i32 %340, i32* %call442, align 4
  br label %while.cond.443

while.cond.443:                                   ; preds = %while.body.445, %cond.end.434
  %341 = load i8*, i8** %s, align 8
  %342 = load i8, i8* %341, align 1
  %tobool444 = icmp ne i8 %342, 0
  br i1 %tobool444, label %while.body.445, label %while.end.447

while.body.445:                                   ; preds = %while.cond.443
  %343 = load i8*, i8** %s, align 8
  %incdec.ptr446 = getelementptr inbounds i8, i8* %343, i32 1
  store i8* %incdec.ptr446, i8** %s, align 8
  br label %while.cond.443

while.end.447:                                    ; preds = %while.cond.443
  br label %if.end.491

if.else.448:                                      ; preds = %if.else.413
  %344 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings449 = getelementptr inbounds %struct.cop, %struct.cop* %344, i32 0, i32 14
  %345 = load %struct.sv*, %struct.sv** %cop_warnings449, align 8
  %cmp450 = icmp ne %struct.sv* %345, null
  br i1 %cmp450, label %land.lhs.true.452, label %lor.lhs.false.468

land.lhs.true.452:                                ; preds = %if.else.448
  %346 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings453 = getelementptr inbounds %struct.cop, %struct.cop* %346, i32 0, i32 14
  %347 = load %struct.sv*, %struct.sv** %cop_warnings453, align 8
  %cmp454 = icmp ne %struct.sv* %347, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 2)
  br i1 %cmp454, label %land.lhs.true.456, label %lor.lhs.false.468

land.lhs.true.456:                                ; preds = %land.lhs.true.452
  %348 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings457 = getelementptr inbounds %struct.cop, %struct.cop* %348, i32 0, i32 14
  %349 = load %struct.sv*, %struct.sv** %cop_warnings457, align 8
  %cmp458 = icmp eq %struct.sv* %349, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 1)
  br i1 %cmp458, label %land.lhs.true.476, label %lor.lhs.false.460

lor.lhs.false.460:                                ; preds = %land.lhs.true.456
  %350 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings461 = getelementptr inbounds %struct.cop, %struct.cop* %350, i32 0, i32 14
  %351 = load %struct.sv*, %struct.sv** %cop_warnings461, align 8
  %sv_any462 = getelementptr inbounds %struct.sv, %struct.sv* %351, i32 0, i32 0
  %352 = load i8*, i8** %sv_any462, align 8
  %353 = bitcast i8* %352 to %struct.xpv*
  %xpv_pv463 = getelementptr inbounds %struct.xpv, %struct.xpv* %353, i32 0, i32 0
  %354 = load i8*, i8** %xpv_pv463, align 8
  %arrayidx464 = getelementptr inbounds i8, i8* %354, i64 10
  %355 = load i8, i8* %arrayidx464, align 1
  %conv465 = sext i8 %355 to i32
  %and466 = and i32 %conv465, 4
  %tobool467 = icmp ne i32 %and466, 0
  br i1 %tobool467, label %land.lhs.true.476, label %lor.lhs.false.468

lor.lhs.false.468:                                ; preds = %lor.lhs.false.460, %land.lhs.true.452, %if.else.448
  %356 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings469 = getelementptr inbounds %struct.cop, %struct.cop* %356, i32 0, i32 14
  %357 = load %struct.sv*, %struct.sv** %cop_warnings469, align 8
  %cmp470 = icmp eq %struct.sv* %357, null
  br i1 %cmp470, label %land.lhs.true.472, label %if.end.483

land.lhs.true.472:                                ; preds = %lor.lhs.false.468
  %358 = load i8, i8* @PL_dowarn, align 1
  %conv473 = zext i8 %358 to i32
  %and474 = and i32 %conv473, 1
  %tobool475 = icmp ne i32 %and474, 0
  br i1 %tobool475, label %land.lhs.true.476, label %if.end.483

land.lhs.true.476:                                ; preds = %land.lhs.true.472, %lor.lhs.false.460, %land.lhs.true.456
  %359 = load i32, i32* @PL_localizing, align 4
  %tobool477 = icmp ne i32 %359, 0
  br i1 %tobool477, label %if.end.483, label %land.lhs.true.478

land.lhs.true.478:                                ; preds = %land.lhs.true.476
  %360 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags479 = getelementptr inbounds %struct.sv, %struct.sv* %360, i32 0, i32 2
  %361 = load i32, i32* %sv_flags479, align 4
  %and480 = and i32 %361, 512
  %tobool481 = icmp ne i32 %and480, 0
  br i1 %tobool481, label %if.end.483, label %if.then.482

if.then.482:                                      ; preds = %land.lhs.true.478
  call void @Perl_report_uninit()
  br label %if.end.483

if.end.483:                                       ; preds = %if.then.482, %land.lhs.true.478, %land.lhs.true.476, %land.lhs.true.472, %lor.lhs.false.468
  %362 = load i64*, i64** %lp.addr, align 8
  store i64 0, i64* %362, align 8
  %363 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags484 = getelementptr inbounds %struct.sv, %struct.sv* %363, i32 0, i32 2
  %364 = load i32, i32* %sv_flags484, align 4
  %and485 = and i32 %364, 255
  %cmp486 = icmp ult i32 %and485, 4
  br i1 %cmp486, label %if.then.488, label %if.end.490

if.then.488:                                      ; preds = %if.end.483
  %365 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call489 = call signext i8 @Perl_sv_upgrade(%struct.sv* %365, i32 4)
  br label %if.end.490

if.end.490:                                       ; preds = %if.then.488, %if.end.483
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0), i8** %retval
  br label %return

if.end.491:                                       ; preds = %while.end.447
  br label %if.end.492

if.end.492:                                       ; preds = %if.end.491, %if.end.412
  %366 = load i8*, i8** %s, align 8
  %367 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any493 = getelementptr inbounds %struct.sv, %struct.sv* %367, i32 0, i32 0
  %368 = load i8*, i8** %sv_any493, align 8
  %369 = bitcast i8* %368 to %struct.xpv*
  %xpv_pv494 = getelementptr inbounds %struct.xpv, %struct.xpv* %369, i32 0, i32 0
  %370 = load i8*, i8** %xpv_pv494, align 8
  %sub.ptr.lhs.cast495 = ptrtoint i8* %366 to i64
  %sub.ptr.rhs.cast496 = ptrtoint i8* %370 to i64
  %sub.ptr.sub497 = sub i64 %sub.ptr.lhs.cast495, %sub.ptr.rhs.cast496
  %371 = load i64*, i64** %lp.addr, align 8
  store i64 %sub.ptr.sub497, i64* %371, align 8
  %372 = load i64*, i64** %lp.addr, align 8
  %373 = load i64, i64* %372, align 8
  %374 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any499 = getelementptr inbounds %struct.sv, %struct.sv* %374, i32 0, i32 0
  %375 = load i8*, i8** %sv_any499, align 8
  %376 = bitcast i8* %375 to %struct.xpv*
  %xpv_cur500 = getelementptr inbounds %struct.xpv, %struct.xpv* %376, i32 0, i32 1
  store i64 %373, i64* %xpv_cur500, align 8
  store i64 %373, i64* %tmp498
  %377 = load i64, i64* %tmp498
  %378 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags501 = getelementptr inbounds %struct.sv, %struct.sv* %378, i32 0, i32 2
  %379 = load i32, i32* %sv_flags501, align 4
  %or502 = or i32 %379, 67371008
  store i32 %or502, i32* %sv_flags501, align 4
  %380 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any503 = getelementptr inbounds %struct.sv, %struct.sv* %380, i32 0, i32 0
  %381 = load i8*, i8** %sv_any503, align 8
  %382 = bitcast i8* %381 to %struct.xpv*
  %xpv_pv504 = getelementptr inbounds %struct.xpv, %struct.xpv* %382, i32 0, i32 0
  %383 = load i8*, i8** %xpv_pv504, align 8
  store i8* %383, i8** %retval
  br label %return

tokensave:                                        ; preds = %if.then.30, %if.end.25
  %384 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags505 = getelementptr inbounds %struct.sv, %struct.sv* %384, i32 0, i32 2
  %385 = load i32, i32* %sv_flags505, align 4
  %and506 = and i32 %385, 524288
  %tobool507 = icmp ne i32 %and506, 0
  br i1 %tobool507, label %if.then.508, label %if.else.518

if.then.508:                                      ; preds = %tokensave
  br label %tokensaveref

tokensaveref:                                     ; preds = %if.then.508, %if.end.278
  %386 = load %struct.sv*, %struct.sv** %tsv, align 8
  %tobool509 = icmp ne %struct.sv* %386, null
  br i1 %tobool509, label %if.end.512, label %if.then.510

if.then.510:                                      ; preds = %tokensaveref
  %387 = load i8*, i8** %tmpbuf, align 8
  %call511 = call %struct.sv* @Perl_newSVpv(i8* %387, i64 0)
  store %struct.sv* %call511, %struct.sv** %tsv, align 8
  br label %if.end.512

if.end.512:                                       ; preds = %if.then.510, %tokensaveref
  %388 = load %struct.sv*, %struct.sv** %tsv, align 8
  %call513 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %388)
  %389 = load %struct.sv*, %struct.sv** %tsv, align 8
  %sv_any514 = getelementptr inbounds %struct.sv, %struct.sv* %389, i32 0, i32 0
  %390 = load i8*, i8** %sv_any514, align 8
  %391 = bitcast i8* %390 to %struct.xpv*
  %xpv_cur515 = getelementptr inbounds %struct.xpv, %struct.xpv* %391, i32 0, i32 1
  %392 = load i64, i64* %xpv_cur515, align 8
  %393 = load i64*, i64** %lp.addr, align 8
  store i64 %392, i64* %393, align 8
  %394 = load %struct.sv*, %struct.sv** %tsv, align 8
  %sv_any516 = getelementptr inbounds %struct.sv, %struct.sv* %394, i32 0, i32 0
  %395 = load i8*, i8** %sv_any516, align 8
  %396 = bitcast i8* %395 to %struct.xpv*
  %xpv_pv517 = getelementptr inbounds %struct.xpv, %struct.xpv* %396, i32 0, i32 0
  %397 = load i8*, i8** %xpv_pv517, align 8
  store i8* %397, i8** %retval
  br label %return

if.else.518:                                      ; preds = %tokensave
  %398 = load %struct.sv*, %struct.sv** %tsv, align 8
  %tobool521 = icmp ne %struct.sv* %398, null
  br i1 %tobool521, label %if.then.522, label %if.else.528

if.then.522:                                      ; preds = %if.else.518
  %399 = load %struct.sv*, %struct.sv** %tsv, align 8
  %call523 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %399)
  %400 = load %struct.sv*, %struct.sv** %tsv, align 8
  %sv_any524 = getelementptr inbounds %struct.sv, %struct.sv* %400, i32 0, i32 0
  %401 = load i8*, i8** %sv_any524, align 8
  %402 = bitcast i8* %401 to %struct.xpv*
  %xpv_pv525 = getelementptr inbounds %struct.xpv, %struct.xpv* %402, i32 0, i32 0
  %403 = load i8*, i8** %xpv_pv525, align 8
  store i8* %403, i8** %t, align 8
  %404 = load %struct.sv*, %struct.sv** %tsv, align 8
  %sv_any526 = getelementptr inbounds %struct.sv, %struct.sv* %404, i32 0, i32 0
  %405 = load i8*, i8** %sv_any526, align 8
  %406 = bitcast i8* %405 to %struct.xpv*
  %xpv_cur527 = getelementptr inbounds %struct.xpv, %struct.xpv* %406, i32 0, i32 1
  %407 = load i64, i64* %xpv_cur527, align 8
  store i64 %407, i64* %len, align 8
  br label %if.end.530

if.else.528:                                      ; preds = %if.else.518
  %408 = load i8*, i8** %tmpbuf, align 8
  store i8* %408, i8** %t, align 8
  %409 = load i8*, i8** %tmpbuf, align 8
  %call529 = call i64 @strlen(i8* %409)
  store i64 %call529, i64* %len, align 8
  br label %if.end.530

if.end.530:                                       ; preds = %if.else.528, %if.then.522
  %410 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags531 = getelementptr inbounds %struct.sv, %struct.sv* %410, i32 0, i32 2
  %411 = load i32, i32* %sv_flags531, align 4
  %and532 = and i32 %411, 255
  %cmp533 = icmp uge i32 %and532, 4
  br i1 %cmp533, label %lor.end.539, label %lor.rhs.535

lor.rhs.535:                                      ; preds = %if.end.530
  %412 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call536 = call signext i8 @Perl_sv_upgrade(%struct.sv* %412, i32 4)
  %conv537 = sext i8 %call536 to i32
  %tobool538 = icmp ne i32 %conv537, 0
  br label %lor.end.539

lor.end.539:                                      ; preds = %lor.rhs.535, %if.end.530
  %413 = phi i1 [ true, %if.end.530 ], [ %tobool538, %lor.rhs.535 ]
  %lor.ext = zext i1 %413 to i32
  %414 = load i64, i64* %len, align 8
  %415 = load i64*, i64** %lp.addr, align 8
  store i64 %414, i64* %415, align 8
  %416 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any540 = getelementptr inbounds %struct.sv, %struct.sv* %416, i32 0, i32 0
  %417 = load i8*, i8** %sv_any540, align 8
  %418 = bitcast i8* %417 to %struct.xpv*
  %xpv_len541 = getelementptr inbounds %struct.xpv, %struct.xpv* %418, i32 0, i32 2
  %419 = load i64, i64* %xpv_len541, align 8
  %420 = load i64, i64* %len, align 8
  %add542 = add i64 %420, 1
  %cmp543 = icmp ult i64 %419, %add542
  br i1 %cmp543, label %cond.true.545, label %cond.false.548

cond.true.545:                                    ; preds = %lor.end.539
  %421 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %422 = load i64, i64* %len, align 8
  %add546 = add i64 %422, 1
  %call547 = call i8* @Perl_sv_grow(%struct.sv* %421, i64 %add546)
  br label %cond.end.551

cond.false.548:                                   ; preds = %lor.end.539
  %423 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any549 = getelementptr inbounds %struct.sv, %struct.sv* %423, i32 0, i32 0
  %424 = load i8*, i8** %sv_any549, align 8
  %425 = bitcast i8* %424 to %struct.xpv*
  %xpv_pv550 = getelementptr inbounds %struct.xpv, %struct.xpv* %425, i32 0, i32 0
  %426 = load i8*, i8** %xpv_pv550, align 8
  br label %cond.end.551

cond.end.551:                                     ; preds = %cond.false.548, %cond.true.545
  %cond552 = phi i8* [ %call547, %cond.true.545 ], [ %426, %cond.false.548 ]
  store i8* %cond552, i8** %s, align 8
  %427 = load i64, i64* %len, align 8
  %428 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any554 = getelementptr inbounds %struct.sv, %struct.sv* %428, i32 0, i32 0
  %429 = load i8*, i8** %sv_any554, align 8
  %430 = bitcast i8* %429 to %struct.xpv*
  %xpv_cur555 = getelementptr inbounds %struct.xpv, %struct.xpv* %430, i32 0, i32 1
  store i64 %427, i64* %xpv_cur555, align 8
  store i64 %427, i64* %tmp553
  %431 = load i64, i64* %tmp553
  %432 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags556 = getelementptr inbounds %struct.sv, %struct.sv* %432, i32 0, i32 2
  %433 = load i32, i32* %sv_flags556, align 4
  %or557 = or i32 %433, 67108864
  store i32 %or557, i32* %sv_flags556, align 4
  %434 = load i8*, i8** %s, align 8
  %435 = load i8*, i8** %t, align 8
  %call558 = call i8* @strcpy(i8* %434, i8* %435)
  store i8* %call558, i8** %retval
  br label %return

return:                                           ; preds = %cond.end.551, %if.end.512, %if.end.492, %if.end.490, %if.end.318, %if.end.279, %if.end.229, %if.end.109, %if.end.64, %if.then.10, %if.then
  %436 = load i8*, i8** %retval
  ret i8* %436
}

declare i32 @Perl_grok_number(i8*, i64, i64*) #1

; Function Attrs: nounwind uwtable
define i64 @Perl_sv_2iv(%struct.sv* %sv) #0 {
entry:
  %retval = alloca i64, align 8
  %sv.addr = alloca %struct.sv*, align 8
  %tmpstr = alloca %struct.sv*, align 8
  %value = alloca i64, align 8
  %numtype = alloca i32, align 4
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i64 0, i64* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and = and i32 %2, 8192
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %if.then.2, label %if.end.55

if.then.2:                                        ; preds = %if.end
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i32 @Perl_mg_get(%struct.sv* %3)
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags3 = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 2
  %5 = load i32, i32* %sv_flags3, align 4
  %and4 = and i32 %5, 16777216
  %tobool5 = icmp ne i32 %and4, 0
  br i1 %tobool5, label %if.then.6, label %if.end.7

if.then.6:                                        ; preds = %if.then.2
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 0
  %7 = load i8*, i8** %sv_any, align 8
  %8 = bitcast i8* %7 to %struct.xpviv*
  %xiv_iv = getelementptr inbounds %struct.xpviv, %struct.xpviv* %8, i32 0, i32 3
  %9 = load i64, i64* %xiv_iv, align 8
  store i64 %9, i64* %retval
  br label %return

if.end.7:                                         ; preds = %if.then.2
  %10 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags8 = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags8, align 4
  %and9 = and i32 %11, 33554432
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %if.then.11, label %if.end.14

if.then.11:                                       ; preds = %if.end.7
  %12 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any12 = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 0
  %13 = load i8*, i8** %sv_any12, align 8
  %14 = bitcast i8* %13 to %struct.xpvnv*
  %xnv_nv = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %14, i32 0, i32 4
  %15 = load double, double* %xnv_nv, align 8
  %call13 = call i64 @Perl_cast_iv(double %15)
  store i64 %call13, i64* %retval
  br label %return

if.end.14:                                        ; preds = %if.end.7
  %16 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags15 = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 2
  %17 = load i32, i32* %sv_flags15, align 4
  %and16 = and i32 %17, 67108864
  %tobool17 = icmp ne i32 %and16, 0
  br i1 %tobool17, label %land.lhs.true, label %if.end.22

land.lhs.true:                                    ; preds = %if.end.14
  %18 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any18 = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 0
  %19 = load i8*, i8** %sv_any18, align 8
  %20 = bitcast i8* %19 to %struct.xpv*
  %xpv_len = getelementptr inbounds %struct.xpv, %struct.xpv* %20, i32 0, i32 2
  %21 = load i64, i64* %xpv_len, align 8
  %tobool19 = icmp ne i64 %21, 0
  br i1 %tobool19, label %if.then.20, label %if.end.22

if.then.20:                                       ; preds = %land.lhs.true
  %22 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call21 = call i64 @S_asIV(%struct.sv* %22)
  store i64 %call21, i64* %retval
  br label %return

if.end.22:                                        ; preds = %land.lhs.true, %if.end.14
  %23 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags23 = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 2
  %24 = load i32, i32* %sv_flags23, align 4
  %and24 = and i32 %24, 524288
  %tobool25 = icmp ne i32 %and24, 0
  br i1 %tobool25, label %if.end.54, label %if.then.26

if.then.26:                                       ; preds = %if.end.22
  %25 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags27 = getelementptr inbounds %struct.sv, %struct.sv* %25, i32 0, i32 2
  %26 = load i32, i32* %sv_flags27, align 4
  %and28 = and i32 %26, 512
  %tobool29 = icmp ne i32 %and28, 0
  br i1 %tobool29, label %if.end.53, label %if.then.30

if.then.30:                                       ; preds = %if.then.26
  %27 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings = getelementptr inbounds %struct.cop, %struct.cop* %27, i32 0, i32 14
  %28 = load %struct.sv*, %struct.sv** %cop_warnings, align 8
  %cmp = icmp ne %struct.sv* %28, null
  br i1 %cmp, label %land.lhs.true.31, label %lor.lhs.false.41

land.lhs.true.31:                                 ; preds = %if.then.30
  %29 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings32 = getelementptr inbounds %struct.cop, %struct.cop* %29, i32 0, i32 14
  %30 = load %struct.sv*, %struct.sv** %cop_warnings32, align 8
  %cmp33 = icmp ne %struct.sv* %30, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 2)
  br i1 %cmp33, label %land.lhs.true.34, label %lor.lhs.false.41

land.lhs.true.34:                                 ; preds = %land.lhs.true.31
  %31 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings35 = getelementptr inbounds %struct.cop, %struct.cop* %31, i32 0, i32 14
  %32 = load %struct.sv*, %struct.sv** %cop_warnings35, align 8
  %cmp36 = icmp eq %struct.sv* %32, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 1)
  br i1 %cmp36, label %land.lhs.true.49, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.34
  %33 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings37 = getelementptr inbounds %struct.cop, %struct.cop* %33, i32 0, i32 14
  %34 = load %struct.sv*, %struct.sv** %cop_warnings37, align 8
  %sv_any38 = getelementptr inbounds %struct.sv, %struct.sv* %34, i32 0, i32 0
  %35 = load i8*, i8** %sv_any38, align 8
  %36 = bitcast i8* %35 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %36, i32 0, i32 0
  %37 = load i8*, i8** %xpv_pv, align 8
  %arrayidx = getelementptr inbounds i8, i8* %37, i64 10
  %38 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %38 to i32
  %and39 = and i32 %conv, 4
  %tobool40 = icmp ne i32 %and39, 0
  br i1 %tobool40, label %land.lhs.true.49, label %lor.lhs.false.41

lor.lhs.false.41:                                 ; preds = %lor.lhs.false, %land.lhs.true.31, %if.then.30
  %39 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings42 = getelementptr inbounds %struct.cop, %struct.cop* %39, i32 0, i32 14
  %40 = load %struct.sv*, %struct.sv** %cop_warnings42, align 8
  %cmp43 = icmp eq %struct.sv* %40, null
  br i1 %cmp43, label %land.lhs.true.45, label %if.end.52

land.lhs.true.45:                                 ; preds = %lor.lhs.false.41
  %41 = load i8, i8* @PL_dowarn, align 1
  %conv46 = zext i8 %41 to i32
  %and47 = and i32 %conv46, 1
  %tobool48 = icmp ne i32 %and47, 0
  br i1 %tobool48, label %land.lhs.true.49, label %if.end.52

land.lhs.true.49:                                 ; preds = %land.lhs.true.45, %lor.lhs.false, %land.lhs.true.34
  %42 = load i32, i32* @PL_localizing, align 4
  %tobool50 = icmp ne i32 %42, 0
  br i1 %tobool50, label %if.end.52, label %if.then.51

if.then.51:                                       ; preds = %land.lhs.true.49
  call void @Perl_report_uninit()
  br label %if.end.52

if.end.52:                                        ; preds = %if.then.51, %land.lhs.true.49, %land.lhs.true.45, %lor.lhs.false.41
  br label %if.end.53

if.end.53:                                        ; preds = %if.end.52, %if.then.26
  store i64 0, i64* %retval
  br label %return

if.end.54:                                        ; preds = %if.end.22
  br label %if.end.55

if.end.55:                                        ; preds = %if.end.54, %if.end
  %43 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags56 = getelementptr inbounds %struct.sv, %struct.sv* %43, i32 0, i32 2
  %44 = load i32, i32* %sv_flags56, align 4
  %and57 = and i32 %44, 9961472
  %tobool58 = icmp ne i32 %and57, 0
  br i1 %tobool58, label %if.then.59, label %if.end.138

if.then.59:                                       ; preds = %if.end.55
  %45 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags60 = getelementptr inbounds %struct.sv, %struct.sv* %45, i32 0, i32 2
  %46 = load i32, i32* %sv_flags60, align 4
  %and61 = and i32 %46, 524288
  %tobool62 = icmp ne i32 %and61, 0
  br i1 %tobool62, label %if.then.63, label %if.end.90

if.then.63:                                       ; preds = %if.then.59
  %47 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags64 = getelementptr inbounds %struct.sv, %struct.sv* %47, i32 0, i32 2
  %48 = load i32, i32* %sv_flags64, align 4
  %and65 = and i32 %48, 268435456
  %tobool66 = icmp ne i32 %and65, 0
  br i1 %tobool66, label %land.lhs.true.67, label %if.end.87

land.lhs.true.67:                                 ; preds = %if.then.63
  %49 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call68 = call %struct.sv* @Perl_amagic_call(%struct.sv* %49, %struct.sv* @PL_sv_undef, i32 5, i32 9)
  store %struct.sv* %call68, %struct.sv** %tmpstr, align 8
  %tobool69 = icmp ne %struct.sv* %call68, null
  br i1 %tobool69, label %land.lhs.true.70, label %if.end.87

land.lhs.true.70:                                 ; preds = %land.lhs.true.67
  %50 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_flags71 = getelementptr inbounds %struct.sv, %struct.sv* %50, i32 0, i32 2
  %51 = load i32, i32* %sv_flags71, align 4
  %and72 = and i32 %51, 524288
  %tobool73 = icmp ne i32 %and72, 0
  br i1 %tobool73, label %lor.lhs.false.74, label %if.then.80

lor.lhs.false.74:                                 ; preds = %land.lhs.true.70
  %52 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_any75 = getelementptr inbounds %struct.sv, %struct.sv* %52, i32 0, i32 0
  %53 = load i8*, i8** %sv_any75, align 8
  %54 = bitcast i8* %53 to %struct.xrv*
  %xrv_rv = getelementptr inbounds %struct.xrv, %struct.xrv* %54, i32 0, i32 0
  %55 = load %struct.sv*, %struct.sv** %xrv_rv, align 8
  %56 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any76 = getelementptr inbounds %struct.sv, %struct.sv* %56, i32 0, i32 0
  %57 = load i8*, i8** %sv_any76, align 8
  %58 = bitcast i8* %57 to %struct.xrv*
  %xrv_rv77 = getelementptr inbounds %struct.xrv, %struct.xrv* %58, i32 0, i32 0
  %59 = load %struct.sv*, %struct.sv** %xrv_rv77, align 8
  %cmp78 = icmp ne %struct.sv* %55, %59
  br i1 %cmp78, label %if.then.80, label %if.end.87

if.then.80:                                       ; preds = %lor.lhs.false.74, %land.lhs.true.70
  %60 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_flags81 = getelementptr inbounds %struct.sv, %struct.sv* %60, i32 0, i32 2
  %61 = load i32, i32* %sv_flags81, align 4
  %and82 = and i32 %61, 65536
  %tobool83 = icmp ne i32 %and82, 0
  br i1 %tobool83, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.80
  %62 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_any84 = getelementptr inbounds %struct.sv, %struct.sv* %62, i32 0, i32 0
  %63 = load i8*, i8** %sv_any84, align 8
  %64 = bitcast i8* %63 to %struct.xpviv*
  %xiv_iv85 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %64, i32 0, i32 3
  %65 = load i64, i64* %xiv_iv85, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then.80
  %66 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %call86 = call i64 @Perl_sv_2iv(%struct.sv* %66)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %65, %cond.true ], [ %call86, %cond.false ]
  store i64 %cond, i64* %retval
  br label %return

if.end.87:                                        ; preds = %lor.lhs.false.74, %land.lhs.true.67, %if.then.63
  %67 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any88 = getelementptr inbounds %struct.sv, %struct.sv* %67, i32 0, i32 0
  %68 = load i8*, i8** %sv_any88, align 8
  %69 = bitcast i8* %68 to %struct.xrv*
  %xrv_rv89 = getelementptr inbounds %struct.xrv, %struct.xrv* %69, i32 0, i32 0
  %70 = load %struct.sv*, %struct.sv** %xrv_rv89, align 8
  %71 = ptrtoint %struct.sv* %70 to i64
  store i64 %71, i64* %retval
  br label %return

if.end.90:                                        ; preds = %if.then.59
  %72 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags91 = getelementptr inbounds %struct.sv, %struct.sv* %72, i32 0, i32 2
  %73 = load i32, i32* %sv_flags91, align 4
  %and92 = and i32 %73, 8388608
  %tobool93 = icmp ne i32 %and92, 0
  br i1 %tobool93, label %land.lhs.true.94, label %if.end.99

land.lhs.true.94:                                 ; preds = %if.end.90
  %74 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags95 = getelementptr inbounds %struct.sv, %struct.sv* %74, i32 0, i32 2
  %75 = load i32, i32* %sv_flags95, align 4
  %and96 = and i32 %75, 1048576
  %tobool97 = icmp ne i32 %and96, 0
  br i1 %tobool97, label %if.then.98, label %if.end.99

if.then.98:                                       ; preds = %land.lhs.true.94
  %76 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_force_normal(%struct.sv* %76)
  br label %if.end.99

if.end.99:                                        ; preds = %if.then.98, %land.lhs.true.94, %if.end.90
  %77 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags100 = getelementptr inbounds %struct.sv, %struct.sv* %77, i32 0, i32 2
  %78 = load i32, i32* %sv_flags100, align 4
  %and101 = and i32 %78, 8388608
  %tobool102 = icmp ne i32 %and101, 0
  br i1 %tobool102, label %land.lhs.true.103, label %if.end.137

land.lhs.true.103:                                ; preds = %if.end.99
  %79 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags104 = getelementptr inbounds %struct.sv, %struct.sv* %79, i32 0, i32 2
  %80 = load i32, i32* %sv_flags104, align 4
  %and105 = and i32 %80, 118423552
  %tobool106 = icmp ne i32 %and105, 0
  br i1 %tobool106, label %if.end.137, label %if.then.107

if.then.107:                                      ; preds = %land.lhs.true.103
  %81 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings108 = getelementptr inbounds %struct.cop, %struct.cop* %81, i32 0, i32 14
  %82 = load %struct.sv*, %struct.sv** %cop_warnings108, align 8
  %cmp109 = icmp ne %struct.sv* %82, null
  br i1 %cmp109, label %land.lhs.true.111, label %lor.lhs.false.127

land.lhs.true.111:                                ; preds = %if.then.107
  %83 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings112 = getelementptr inbounds %struct.cop, %struct.cop* %83, i32 0, i32 14
  %84 = load %struct.sv*, %struct.sv** %cop_warnings112, align 8
  %cmp113 = icmp ne %struct.sv* %84, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 2)
  br i1 %cmp113, label %land.lhs.true.115, label %lor.lhs.false.127

land.lhs.true.115:                                ; preds = %land.lhs.true.111
  %85 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings116 = getelementptr inbounds %struct.cop, %struct.cop* %85, i32 0, i32 14
  %86 = load %struct.sv*, %struct.sv** %cop_warnings116, align 8
  %cmp117 = icmp eq %struct.sv* %86, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 1)
  br i1 %cmp117, label %if.then.135, label %lor.lhs.false.119

lor.lhs.false.119:                                ; preds = %land.lhs.true.115
  %87 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings120 = getelementptr inbounds %struct.cop, %struct.cop* %87, i32 0, i32 14
  %88 = load %struct.sv*, %struct.sv** %cop_warnings120, align 8
  %sv_any121 = getelementptr inbounds %struct.sv, %struct.sv* %88, i32 0, i32 0
  %89 = load i8*, i8** %sv_any121, align 8
  %90 = bitcast i8* %89 to %struct.xpv*
  %xpv_pv122 = getelementptr inbounds %struct.xpv, %struct.xpv* %90, i32 0, i32 0
  %91 = load i8*, i8** %xpv_pv122, align 8
  %arrayidx123 = getelementptr inbounds i8, i8* %91, i64 10
  %92 = load i8, i8* %arrayidx123, align 1
  %conv124 = sext i8 %92 to i32
  %and125 = and i32 %conv124, 4
  %tobool126 = icmp ne i32 %and125, 0
  br i1 %tobool126, label %if.then.135, label %lor.lhs.false.127

lor.lhs.false.127:                                ; preds = %lor.lhs.false.119, %land.lhs.true.111, %if.then.107
  %93 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings128 = getelementptr inbounds %struct.cop, %struct.cop* %93, i32 0, i32 14
  %94 = load %struct.sv*, %struct.sv** %cop_warnings128, align 8
  %cmp129 = icmp eq %struct.sv* %94, null
  br i1 %cmp129, label %land.lhs.true.131, label %if.end.136

land.lhs.true.131:                                ; preds = %lor.lhs.false.127
  %95 = load i8, i8* @PL_dowarn, align 1
  %conv132 = zext i8 %95 to i32
  %and133 = and i32 %conv132, 1
  %tobool134 = icmp ne i32 %and133, 0
  br i1 %tobool134, label %if.then.135, label %if.end.136

if.then.135:                                      ; preds = %land.lhs.true.131, %lor.lhs.false.119, %land.lhs.true.115
  call void @Perl_report_uninit()
  br label %if.end.136

if.end.136:                                       ; preds = %if.then.135, %land.lhs.true.131, %lor.lhs.false.127
  store i64 0, i64* %retval
  br label %return

if.end.137:                                       ; preds = %land.lhs.true.103, %if.end.99
  br label %if.end.138

if.end.138:                                       ; preds = %if.end.137, %if.end.55
  %96 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags139 = getelementptr inbounds %struct.sv, %struct.sv* %96, i32 0, i32 2
  %97 = load i32, i32* %sv_flags139, align 4
  %and140 = and i32 %97, 16777216
  %tobool141 = icmp ne i32 %and140, 0
  br i1 %tobool141, label %if.then.142, label %if.end.150

if.then.142:                                      ; preds = %if.end.138
  %98 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags143 = getelementptr inbounds %struct.sv, %struct.sv* %98, i32 0, i32 2
  %99 = load i32, i32* %sv_flags143, align 4
  %and144 = and i32 %99, -2147483648
  %tobool145 = icmp ne i32 %and144, 0
  br i1 %tobool145, label %if.then.146, label %if.else

if.then.146:                                      ; preds = %if.then.142
  %100 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any147 = getelementptr inbounds %struct.sv, %struct.sv* %100, i32 0, i32 0
  %101 = load i8*, i8** %sv_any147, align 8
  %102 = bitcast i8* %101 to %struct.xpvuv*
  %xuv_uv = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %102, i32 0, i32 3
  %103 = load i64, i64* %xuv_uv, align 8
  store i64 %103, i64* %retval
  br label %return

if.else:                                          ; preds = %if.then.142
  %104 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any148 = getelementptr inbounds %struct.sv, %struct.sv* %104, i32 0, i32 0
  %105 = load i8*, i8** %sv_any148, align 8
  %106 = bitcast i8* %105 to %struct.xpviv*
  %xiv_iv149 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %106, i32 0, i32 3
  %107 = load i64, i64* %xiv_iv149, align 8
  store i64 %107, i64* %retval
  br label %return

if.end.150:                                       ; preds = %if.end.138
  %108 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags151 = getelementptr inbounds %struct.sv, %struct.sv* %108, i32 0, i32 2
  %109 = load i32, i32* %sv_flags151, align 4
  %and152 = and i32 %109, 33554432
  %tobool153 = icmp ne i32 %and152, 0
  br i1 %tobool153, label %if.then.154, label %if.else.248

if.then.154:                                      ; preds = %if.end.150
  %110 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags155 = getelementptr inbounds %struct.sv, %struct.sv* %110, i32 0, i32 2
  %111 = load i32, i32* %sv_flags155, align 4
  %and156 = and i32 %111, 255
  %cmp157 = icmp eq i32 %and156, 2
  br i1 %cmp157, label %if.then.159, label %if.end.161

if.then.159:                                      ; preds = %if.then.154
  %112 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call160 = call signext i8 @Perl_sv_upgrade(%struct.sv* %112, i32 6)
  br label %if.end.161

if.end.161:                                       ; preds = %if.then.159, %if.then.154
  %113 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags162 = getelementptr inbounds %struct.sv, %struct.sv* %113, i32 0, i32 2
  %114 = load i32, i32* %sv_flags162, align 4
  %and163 = and i32 %114, 2097152
  %tobool164 = icmp ne i32 %and163, 0
  br i1 %tobool164, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.end.161
  %115 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call165 = call i32 @Perl_sv_backoff(%struct.sv* %115)
  %tobool166 = icmp ne i32 %call165, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end.161
  %116 = phi i1 [ false, %if.end.161 ], [ %tobool166, %land.rhs ]
  %land.ext = zext i1 %116 to i32
  %117 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags167 = getelementptr inbounds %struct.sv, %struct.sv* %117, i32 0, i32 2
  %118 = load i32, i32* %sv_flags167, align 4
  %or = or i32 %118, 16777216
  store i32 %or, i32* %sv_flags167, align 4
  %119 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any168 = getelementptr inbounds %struct.sv, %struct.sv* %119, i32 0, i32 0
  %120 = load i8*, i8** %sv_any168, align 8
  %121 = bitcast i8* %120 to %struct.xpvnv*
  %xnv_nv169 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %121, i32 0, i32 4
  %122 = load double, double* %xnv_nv169, align 8
  %cmp170 = fcmp olt double %122, 0x43E0000000000000
  br i1 %cmp170, label %if.then.172, label %if.else.213

if.then.172:                                      ; preds = %land.end
  %123 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any173 = getelementptr inbounds %struct.sv, %struct.sv* %123, i32 0, i32 0
  %124 = load i8*, i8** %sv_any173, align 8
  %125 = bitcast i8* %124 to %struct.xpvnv*
  %xnv_nv174 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %125, i32 0, i32 4
  %126 = load double, double* %xnv_nv174, align 8
  %call175 = call i64 @Perl_cast_iv(double %126)
  %127 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any176 = getelementptr inbounds %struct.sv, %struct.sv* %127, i32 0, i32 0
  %128 = load i8*, i8** %sv_any176, align 8
  %129 = bitcast i8* %128 to %struct.xpviv*
  %xiv_iv177 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %129, i32 0, i32 3
  store i64 %call175, i64* %xiv_iv177, align 8
  %130 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any178 = getelementptr inbounds %struct.sv, %struct.sv* %130, i32 0, i32 0
  %131 = load i8*, i8** %sv_any178, align 8
  %132 = bitcast i8* %131 to %struct.xpvnv*
  %xnv_nv179 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %132, i32 0, i32 4
  %133 = load double, double* %xnv_nv179, align 8
  %134 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any180 = getelementptr inbounds %struct.sv, %struct.sv* %134, i32 0, i32 0
  %135 = load i8*, i8** %sv_any180, align 8
  %136 = bitcast i8* %135 to %struct.xpviv*
  %xiv_iv181 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %136, i32 0, i32 3
  %137 = load i64, i64* %xiv_iv181, align 8
  %conv182 = sitofp i64 %137 to double
  %cmp183 = fcmp oeq double %133, %conv182
  br i1 %cmp183, label %land.lhs.true.185, label %if.else.211

land.lhs.true.185:                                ; preds = %if.then.172
  %138 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any186 = getelementptr inbounds %struct.sv, %struct.sv* %138, i32 0, i32 0
  %139 = load i8*, i8** %sv_any186, align 8
  %140 = bitcast i8* %139 to %struct.xpviv*
  %xiv_iv187 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %140, i32 0, i32 3
  %141 = load i64, i64* %xiv_iv187, align 8
  %cmp188 = icmp sgt i64 %141, 0
  br i1 %cmp188, label %cond.true.190, label %cond.false.193

cond.true.190:                                    ; preds = %land.lhs.true.185
  %142 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any191 = getelementptr inbounds %struct.sv, %struct.sv* %142, i32 0, i32 0
  %143 = load i8*, i8** %sv_any191, align 8
  %144 = bitcast i8* %143 to %struct.xpviv*
  %xiv_iv192 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %144, i32 0, i32 3
  %145 = load i64, i64* %xiv_iv192, align 8
  br label %cond.end.196

cond.false.193:                                   ; preds = %land.lhs.true.185
  %146 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any194 = getelementptr inbounds %struct.sv, %struct.sv* %146, i32 0, i32 0
  %147 = load i8*, i8** %sv_any194, align 8
  %148 = bitcast i8* %147 to %struct.xpviv*
  %xiv_iv195 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %148, i32 0, i32 3
  %149 = load i64, i64* %xiv_iv195, align 8
  %sub = sub nsw i64 0, %149
  br label %cond.end.196

cond.end.196:                                     ; preds = %cond.false.193, %cond.true.190
  %cond197 = phi i64 [ %145, %cond.true.190 ], [ %sub, %cond.false.193 ]
  %cmp198 = icmp ugt i64 4294967296, %cond197
  br i1 %cmp198, label %if.then.200, label %if.else.211

if.then.200:                                      ; preds = %cond.end.196
  %150 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags201 = getelementptr inbounds %struct.sv, %struct.sv* %150, i32 0, i32 2
  %151 = load i32, i32* %sv_flags201, align 4
  %and202 = and i32 %151, 2097152
  %tobool203 = icmp ne i32 %and202, 0
  br i1 %tobool203, label %land.rhs.204, label %land.end.207

land.rhs.204:                                     ; preds = %if.then.200
  %152 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call205 = call i32 @Perl_sv_backoff(%struct.sv* %152)
  %tobool206 = icmp ne i32 %call205, 0
  br label %land.end.207

land.end.207:                                     ; preds = %land.rhs.204, %if.then.200
  %153 = phi i1 [ false, %if.then.200 ], [ %tobool206, %land.rhs.204 ]
  %land.ext208 = zext i1 %153 to i32
  %154 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags209 = getelementptr inbounds %struct.sv, %struct.sv* %154, i32 0, i32 2
  %155 = load i32, i32* %sv_flags209, align 4
  %or210 = or i32 %155, 16842752
  store i32 %or210, i32* %sv_flags209, align 4
  br label %if.end.212

if.else.211:                                      ; preds = %cond.end.196, %if.then.172
  br label %if.end.212

if.end.212:                                       ; preds = %if.else.211, %land.end.207
  br label %if.end.247

if.else.213:                                      ; preds = %land.end
  %156 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any214 = getelementptr inbounds %struct.sv, %struct.sv* %156, i32 0, i32 0
  %157 = load i8*, i8** %sv_any214, align 8
  %158 = bitcast i8* %157 to %struct.xpvnv*
  %xnv_nv215 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %158, i32 0, i32 4
  %159 = load double, double* %xnv_nv215, align 8
  %call216 = call i64 @Perl_cast_uv(double %159)
  %160 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any217 = getelementptr inbounds %struct.sv, %struct.sv* %160, i32 0, i32 0
  %161 = load i8*, i8** %sv_any217, align 8
  %162 = bitcast i8* %161 to %struct.xpvuv*
  %xuv_uv218 = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %162, i32 0, i32 3
  store i64 %call216, i64* %xuv_uv218, align 8
  %163 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any219 = getelementptr inbounds %struct.sv, %struct.sv* %163, i32 0, i32 0
  %164 = load i8*, i8** %sv_any219, align 8
  %165 = bitcast i8* %164 to %struct.xpvnv*
  %xnv_nv220 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %165, i32 0, i32 4
  %166 = load double, double* %xnv_nv220, align 8
  %167 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any221 = getelementptr inbounds %struct.sv, %struct.sv* %167, i32 0, i32 0
  %168 = load i8*, i8** %sv_any221, align 8
  %169 = bitcast i8* %168 to %struct.xpvuv*
  %xuv_uv222 = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %169, i32 0, i32 3
  %170 = load i64, i64* %xuv_uv222, align 8
  %conv223 = uitofp i64 %170 to double
  %cmp224 = fcmp oeq double %166, %conv223
  br i1 %cmp224, label %land.lhs.true.226, label %if.end.242

land.lhs.true.226:                                ; preds = %if.else.213
  %171 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any227 = getelementptr inbounds %struct.sv, %struct.sv* %171, i32 0, i32 0
  %172 = load i8*, i8** %sv_any227, align 8
  %173 = bitcast i8* %172 to %struct.xpvuv*
  %xuv_uv228 = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %173, i32 0, i32 3
  %174 = load i64, i64* %xuv_uv228, align 8
  %cmp229 = icmp ugt i64 4294967296, %174
  br i1 %cmp229, label %if.then.231, label %if.end.242

if.then.231:                                      ; preds = %land.lhs.true.226
  %175 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags232 = getelementptr inbounds %struct.sv, %struct.sv* %175, i32 0, i32 2
  %176 = load i32, i32* %sv_flags232, align 4
  %and233 = and i32 %176, 2097152
  %tobool234 = icmp ne i32 %and233, 0
  br i1 %tobool234, label %land.rhs.235, label %land.end.238

land.rhs.235:                                     ; preds = %if.then.231
  %177 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call236 = call i32 @Perl_sv_backoff(%struct.sv* %177)
  %tobool237 = icmp ne i32 %call236, 0
  br label %land.end.238

land.end.238:                                     ; preds = %land.rhs.235, %if.then.231
  %178 = phi i1 [ false, %if.then.231 ], [ %tobool237, %land.rhs.235 ]
  %land.ext239 = zext i1 %178 to i32
  %179 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags240 = getelementptr inbounds %struct.sv, %struct.sv* %179, i32 0, i32 2
  %180 = load i32, i32* %sv_flags240, align 4
  %or241 = or i32 %180, 16842752
  store i32 %or241, i32* %sv_flags240, align 4
  br label %if.end.242

if.end.242:                                       ; preds = %land.end.238, %land.lhs.true.226, %if.else.213
  %181 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags243 = getelementptr inbounds %struct.sv, %struct.sv* %181, i32 0, i32 2
  %182 = load i32, i32* %sv_flags243, align 4
  %or244 = or i32 %182, -2147483648
  store i32 %or244, i32* %sv_flags243, align 4
  br label %ret_iv_max

ret_iv_max:                                       ; preds = %if.then.484, %if.end.242
  %183 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any245 = getelementptr inbounds %struct.sv, %struct.sv* %183, i32 0, i32 0
  %184 = load i8*, i8** %sv_any245, align 8
  %185 = bitcast i8* %184 to %struct.xpvuv*
  %xuv_uv246 = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %185, i32 0, i32 3
  %186 = load i64, i64* %xuv_uv246, align 8
  store i64 %186, i64* %retval
  br label %return

if.end.247:                                       ; preds = %if.end.212
  br label %if.end.533

if.else.248:                                      ; preds = %if.end.150
  %187 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags249 = getelementptr inbounds %struct.sv, %struct.sv* %187, i32 0, i32 2
  %188 = load i32, i32* %sv_flags249, align 4
  %and250 = and i32 %188, 67108864
  %tobool251 = icmp ne i32 %and250, 0
  br i1 %tobool251, label %land.lhs.true.252, label %if.else.489

land.lhs.true.252:                                ; preds = %if.else.248
  %189 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any253 = getelementptr inbounds %struct.sv, %struct.sv* %189, i32 0, i32 0
  %190 = load i8*, i8** %sv_any253, align 8
  %191 = bitcast i8* %190 to %struct.xpv*
  %xpv_len254 = getelementptr inbounds %struct.xpv, %struct.xpv* %191, i32 0, i32 2
  %192 = load i64, i64* %xpv_len254, align 8
  %tobool255 = icmp ne i64 %192, 0
  br i1 %tobool255, label %if.then.256, label %if.else.489

if.then.256:                                      ; preds = %land.lhs.true.252
  %193 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any257 = getelementptr inbounds %struct.sv, %struct.sv* %193, i32 0, i32 0
  %194 = load i8*, i8** %sv_any257, align 8
  %195 = bitcast i8* %194 to %struct.xpv*
  %xpv_pv258 = getelementptr inbounds %struct.xpv, %struct.xpv* %195, i32 0, i32 0
  %196 = load i8*, i8** %xpv_pv258, align 8
  %197 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any259 = getelementptr inbounds %struct.sv, %struct.sv* %197, i32 0, i32 0
  %198 = load i8*, i8** %sv_any259, align 8
  %199 = bitcast i8* %198 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %199, i32 0, i32 1
  %200 = load i64, i64* %xpv_cur, align 8
  %call260 = call i32 @Perl_grok_number(i8* %196, i64 %200, i64* %value)
  store i32 %call260, i32* %numtype, align 4
  %201 = load i32, i32* %numtype, align 4
  %and261 = and i32 %201, 5
  %cmp262 = icmp eq i32 %and261, 1
  br i1 %cmp262, label %if.then.264, label %if.else.282

if.then.264:                                      ; preds = %if.then.256
  %202 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags265 = getelementptr inbounds %struct.sv, %struct.sv* %202, i32 0, i32 2
  %203 = load i32, i32* %sv_flags265, align 4
  %and266 = and i32 %203, 255
  %cmp267 = icmp ult i32 %and266, 5
  br i1 %cmp267, label %if.then.269, label %if.end.271

if.then.269:                                      ; preds = %if.then.264
  %204 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call270 = call signext i8 @Perl_sv_upgrade(%struct.sv* %204, i32 5)
  br label %if.end.271

if.end.271:                                       ; preds = %if.then.269, %if.then.264
  %205 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags272 = getelementptr inbounds %struct.sv, %struct.sv* %205, i32 0, i32 2
  %206 = load i32, i32* %sv_flags272, align 4
  %and273 = and i32 %206, 2097152
  %tobool274 = icmp ne i32 %and273, 0
  br i1 %tobool274, label %land.rhs.275, label %land.end.278

land.rhs.275:                                     ; preds = %if.end.271
  %207 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call276 = call i32 @Perl_sv_backoff(%struct.sv* %207)
  %tobool277 = icmp ne i32 %call276, 0
  br label %land.end.278

land.end.278:                                     ; preds = %land.rhs.275, %if.end.271
  %208 = phi i1 [ false, %if.end.271 ], [ %tobool277, %land.rhs.275 ]
  %land.ext279 = zext i1 %208 to i32
  %209 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags280 = getelementptr inbounds %struct.sv, %struct.sv* %209, i32 0, i32 2
  %210 = load i32, i32* %sv_flags280, align 4
  %or281 = or i32 %210, 16842752
  store i32 %or281, i32* %sv_flags280, align 4
  br label %if.end.290

if.else.282:                                      ; preds = %if.then.256
  %211 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags283 = getelementptr inbounds %struct.sv, %struct.sv* %211, i32 0, i32 2
  %212 = load i32, i32* %sv_flags283, align 4
  %and284 = and i32 %212, 255
  %cmp285 = icmp ult i32 %and284, 6
  br i1 %cmp285, label %if.then.287, label %if.end.289

if.then.287:                                      ; preds = %if.else.282
  %213 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call288 = call signext i8 @Perl_sv_upgrade(%struct.sv* %213, i32 6)
  br label %if.end.289

if.end.289:                                       ; preds = %if.then.287, %if.else.282
  br label %if.end.290

if.end.290:                                       ; preds = %if.end.289, %land.end.278
  %214 = load i32, i32* %numtype, align 4
  %and291 = and i32 %214, 1
  %cmp292 = icmp eq i32 %and291, 1
  br i1 %cmp292, label %if.then.294, label %if.end.356

if.then.294:                                      ; preds = %if.end.290
  %215 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags295 = getelementptr inbounds %struct.sv, %struct.sv* %215, i32 0, i32 2
  %216 = load i32, i32* %sv_flags295, align 4
  %and296 = and i32 %216, 2097152
  %tobool297 = icmp ne i32 %and296, 0
  br i1 %tobool297, label %land.rhs.298, label %land.end.301

land.rhs.298:                                     ; preds = %if.then.294
  %217 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call299 = call i32 @Perl_sv_backoff(%struct.sv* %217)
  %tobool300 = icmp ne i32 %call299, 0
  br label %land.end.301

land.end.301:                                     ; preds = %land.rhs.298, %if.then.294
  %218 = phi i1 [ false, %if.then.294 ], [ %tobool300, %land.rhs.298 ]
  %land.ext302 = zext i1 %218 to i32
  %219 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags303 = getelementptr inbounds %struct.sv, %struct.sv* %219, i32 0, i32 2
  %220 = load i32, i32* %sv_flags303, align 4
  %or304 = or i32 %220, 16777216
  store i32 %or304, i32* %sv_flags303, align 4
  %221 = load i32, i32* %numtype, align 4
  %and305 = and i32 %221, 8
  %tobool306 = icmp ne i32 %and305, 0
  br i1 %tobool306, label %if.else.319, label %if.then.307

if.then.307:                                      ; preds = %land.end.301
  %222 = load i64, i64* %value, align 8
  %cmp308 = icmp ule i64 %222, 9223372036854775807
  br i1 %cmp308, label %if.then.310, label %if.else.313

if.then.310:                                      ; preds = %if.then.307
  %223 = load i64, i64* %value, align 8
  %224 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any311 = getelementptr inbounds %struct.sv, %struct.sv* %224, i32 0, i32 0
  %225 = load i8*, i8** %sv_any311, align 8
  %226 = bitcast i8* %225 to %struct.xpviv*
  %xiv_iv312 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %226, i32 0, i32 3
  store i64 %223, i64* %xiv_iv312, align 8
  br label %if.end.318

if.else.313:                                      ; preds = %if.then.307
  %227 = load i64, i64* %value, align 8
  %228 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any314 = getelementptr inbounds %struct.sv, %struct.sv* %228, i32 0, i32 0
  %229 = load i8*, i8** %sv_any314, align 8
  %230 = bitcast i8* %229 to %struct.xpvuv*
  %xuv_uv315 = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %230, i32 0, i32 3
  store i64 %227, i64* %xuv_uv315, align 8
  %231 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags316 = getelementptr inbounds %struct.sv, %struct.sv* %231, i32 0, i32 2
  %232 = load i32, i32* %sv_flags316, align 4
  %or317 = or i32 %232, -2147483648
  store i32 %or317, i32* %sv_flags316, align 4
  br label %if.end.318

if.end.318:                                       ; preds = %if.else.313, %if.then.310
  br label %if.end.355

if.else.319:                                      ; preds = %land.end.301
  %233 = load i64, i64* %value, align 8
  %cmp320 = icmp ule i64 %233, -9223372036854775808
  br i1 %cmp320, label %if.then.322, label %if.else.326

if.then.322:                                      ; preds = %if.else.319
  %234 = load i64, i64* %value, align 8
  %sub323 = sub nsw i64 0, %234
  %235 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any324 = getelementptr inbounds %struct.sv, %struct.sv* %235, i32 0, i32 0
  %236 = load i8*, i8** %sv_any324, align 8
  %237 = bitcast i8* %236 to %struct.xpviv*
  %xiv_iv325 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %237, i32 0, i32 3
  store i64 %sub323, i64* %xiv_iv325, align 8
  br label %if.end.354

if.else.326:                                      ; preds = %if.else.319
  %238 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags327 = getelementptr inbounds %struct.sv, %struct.sv* %238, i32 0, i32 2
  %239 = load i32, i32* %sv_flags327, align 4
  %and328 = and i32 %239, 255
  %cmp329 = icmp ult i32 %and328, 6
  br i1 %cmp329, label %if.then.331, label %if.end.333

if.then.331:                                      ; preds = %if.else.326
  %240 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call332 = call signext i8 @Perl_sv_upgrade(%struct.sv* %240, i32 6)
  br label %if.end.333

if.end.333:                                       ; preds = %if.then.331, %if.else.326
  %241 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags334 = getelementptr inbounds %struct.sv, %struct.sv* %241, i32 0, i32 2
  %242 = load i32, i32* %sv_flags334, align 4
  %or335 = or i32 %242, 33685504
  store i32 %or335, i32* %sv_flags334, align 4
  %243 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags336 = getelementptr inbounds %struct.sv, %struct.sv* %243, i32 0, i32 2
  %244 = load i32, i32* %sv_flags336, align 4
  %and337 = and i32 %244, 2130640895
  store i32 %and337, i32* %sv_flags336, align 4
  %245 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags338 = getelementptr inbounds %struct.sv, %struct.sv* %245, i32 0, i32 2
  %246 = load i32, i32* %sv_flags338, align 4
  %and339 = and i32 %246, 2097152
  %tobool340 = icmp ne i32 %and339, 0
  br i1 %tobool340, label %land.rhs.341, label %land.end.344

land.rhs.341:                                     ; preds = %if.end.333
  %247 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call342 = call i32 @Perl_sv_backoff(%struct.sv* %247)
  %tobool343 = icmp ne i32 %call342, 0
  br label %land.end.344

land.end.344:                                     ; preds = %land.rhs.341, %if.end.333
  %248 = phi i1 [ false, %if.end.333 ], [ %tobool343, %land.rhs.341 ]
  %land.ext345 = zext i1 %248 to i32
  %249 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags346 = getelementptr inbounds %struct.sv, %struct.sv* %249, i32 0, i32 2
  %250 = load i32, i32* %sv_flags346, align 4
  %or347 = or i32 %250, 16777216
  store i32 %or347, i32* %sv_flags346, align 4
  %251 = load i64, i64* %value, align 8
  %conv348 = uitofp i64 %251 to double
  %sub349 = fsub double -0.000000e+00, %conv348
  %252 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any350 = getelementptr inbounds %struct.sv, %struct.sv* %252, i32 0, i32 0
  %253 = load i8*, i8** %sv_any350, align 8
  %254 = bitcast i8* %253 to %struct.xpvnv*
  %xnv_nv351 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %254, i32 0, i32 4
  store double %sub349, double* %xnv_nv351, align 8
  %255 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any352 = getelementptr inbounds %struct.sv, %struct.sv* %255, i32 0, i32 0
  %256 = load i8*, i8** %sv_any352, align 8
  %257 = bitcast i8* %256 to %struct.xpviv*
  %xiv_iv353 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %257, i32 0, i32 3
  store i64 -9223372036854775808, i64* %xiv_iv353, align 8
  br label %if.end.354

if.end.354:                                       ; preds = %land.end.344, %if.then.322
  br label %if.end.355

if.end.355:                                       ; preds = %if.end.354, %if.end.318
  br label %if.end.356

if.end.356:                                       ; preds = %if.end.355, %if.end.290
  %258 = load i32, i32* %numtype, align 4
  %and357 = and i32 %258, 5
  %cmp358 = icmp ne i32 %and357, 1
  br i1 %cmp358, label %if.then.360, label %if.end.488

if.then.360:                                      ; preds = %if.end.356
  %259 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any361 = getelementptr inbounds %struct.sv, %struct.sv* %259, i32 0, i32 0
  %260 = load i8*, i8** %sv_any361, align 8
  %261 = bitcast i8* %260 to %struct.xpv*
  %xpv_pv362 = getelementptr inbounds %struct.xpv, %struct.xpv* %261, i32 0, i32 0
  %262 = load i8*, i8** %xpv_pv362, align 8
  %call363 = call double @Perl_my_atof(i8* %262)
  %263 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any364 = getelementptr inbounds %struct.sv, %struct.sv* %263, i32 0, i32 0
  %264 = load i8*, i8** %sv_any364, align 8
  %265 = bitcast i8* %264 to %struct.xpvnv*
  %xnv_nv365 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %265, i32 0, i32 4
  store double %call363, double* %xnv_nv365, align 8
  %266 = load i32, i32* %numtype, align 4
  %tobool366 = icmp ne i32 %266, 0
  br i1 %tobool366, label %if.end.396, label %land.lhs.true.367

land.lhs.true.367:                                ; preds = %if.then.360
  %267 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings368 = getelementptr inbounds %struct.cop, %struct.cop* %267, i32 0, i32 14
  %268 = load %struct.sv*, %struct.sv** %cop_warnings368, align 8
  %cmp369 = icmp ne %struct.sv* %268, null
  br i1 %cmp369, label %land.lhs.true.371, label %lor.lhs.false.387

land.lhs.true.371:                                ; preds = %land.lhs.true.367
  %269 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings372 = getelementptr inbounds %struct.cop, %struct.cop* %269, i32 0, i32 14
  %270 = load %struct.sv*, %struct.sv** %cop_warnings372, align 8
  %cmp373 = icmp ne %struct.sv* %270, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 2)
  br i1 %cmp373, label %land.lhs.true.375, label %lor.lhs.false.387

land.lhs.true.375:                                ; preds = %land.lhs.true.371
  %271 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings376 = getelementptr inbounds %struct.cop, %struct.cop* %271, i32 0, i32 14
  %272 = load %struct.sv*, %struct.sv** %cop_warnings376, align 8
  %cmp377 = icmp eq %struct.sv* %272, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 1)
  br i1 %cmp377, label %if.then.395, label %lor.lhs.false.379

lor.lhs.false.379:                                ; preds = %land.lhs.true.375
  %273 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings380 = getelementptr inbounds %struct.cop, %struct.cop* %273, i32 0, i32 14
  %274 = load %struct.sv*, %struct.sv** %cop_warnings380, align 8
  %sv_any381 = getelementptr inbounds %struct.sv, %struct.sv* %274, i32 0, i32 0
  %275 = load i8*, i8** %sv_any381, align 8
  %276 = bitcast i8* %275 to %struct.xpv*
  %xpv_pv382 = getelementptr inbounds %struct.xpv, %struct.xpv* %276, i32 0, i32 0
  %277 = load i8*, i8** %xpv_pv382, align 8
  %arrayidx383 = getelementptr inbounds i8, i8* %277, i64 3
  %278 = load i8, i8* %arrayidx383, align 1
  %conv384 = sext i8 %278 to i32
  %and385 = and i32 %conv384, 4
  %tobool386 = icmp ne i32 %and385, 0
  br i1 %tobool386, label %if.then.395, label %lor.lhs.false.387

lor.lhs.false.387:                                ; preds = %lor.lhs.false.379, %land.lhs.true.371, %land.lhs.true.367
  %279 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings388 = getelementptr inbounds %struct.cop, %struct.cop* %279, i32 0, i32 14
  %280 = load %struct.sv*, %struct.sv** %cop_warnings388, align 8
  %cmp389 = icmp eq %struct.sv* %280, null
  br i1 %cmp389, label %land.lhs.true.391, label %if.end.396

land.lhs.true.391:                                ; preds = %lor.lhs.false.387
  %281 = load i8, i8* @PL_dowarn, align 1
  %conv392 = zext i8 %281 to i32
  %and393 = and i32 %conv392, 1
  %tobool394 = icmp ne i32 %and393, 0
  br i1 %tobool394, label %if.then.395, label %if.end.396

if.then.395:                                      ; preds = %land.lhs.true.391, %lor.lhs.false.379, %land.lhs.true.375
  %282 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @S_not_a_number(%struct.sv* %282)
  br label %if.end.396

if.end.396:                                       ; preds = %if.then.395, %land.lhs.true.391, %lor.lhs.false.387, %if.then.360
  %283 = load i32, i32* %numtype, align 4
  %and397 = and i32 %283, 5
  %cmp398 = icmp eq i32 %and397, 5
  br i1 %cmp398, label %if.then.400, label %if.else.403

if.then.400:                                      ; preds = %if.end.396
  %284 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags401 = getelementptr inbounds %struct.sv, %struct.sv* %284, i32 0, i32 2
  %285 = load i32, i32* %sv_flags401, align 4
  %or402 = or i32 %285, 33685504
  store i32 %or402, i32* %sv_flags401, align 4
  br label %if.end.487

if.else.403:                                      ; preds = %if.end.396
  %286 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any404 = getelementptr inbounds %struct.sv, %struct.sv* %286, i32 0, i32 0
  %287 = load i8*, i8** %sv_any404, align 8
  %288 = bitcast i8* %287 to %struct.xpvnv*
  %xnv_nv405 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %288, i32 0, i32 4
  %289 = load double, double* %xnv_nv405, align 8
  %cmp406 = fcmp ogt double %289, 0.000000e+00
  br i1 %cmp406, label %cond.true.408, label %cond.false.411

cond.true.408:                                    ; preds = %if.else.403
  %290 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any409 = getelementptr inbounds %struct.sv, %struct.sv* %290, i32 0, i32 0
  %291 = load i8*, i8** %sv_any409, align 8
  %292 = bitcast i8* %291 to %struct.xpvnv*
  %xnv_nv410 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %292, i32 0, i32 4
  %293 = load double, double* %xnv_nv410, align 8
  br label %cond.end.415

cond.false.411:                                   ; preds = %if.else.403
  %294 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any412 = getelementptr inbounds %struct.sv, %struct.sv* %294, i32 0, i32 0
  %295 = load i8*, i8** %sv_any412, align 8
  %296 = bitcast i8* %295 to %struct.xpvnv*
  %xnv_nv413 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %296, i32 0, i32 4
  %297 = load double, double* %xnv_nv413, align 8
  %sub414 = fsub double -0.000000e+00, %297
  br label %cond.end.415

cond.end.415:                                     ; preds = %cond.false.411, %cond.true.408
  %cond416 = phi double [ %293, %cond.true.408 ], [ %sub414, %cond.false.411 ]
  %call417 = call i64 @Perl_cast_uv(double %cond416)
  %cmp418 = icmp ugt i64 4294967296, %call417
  br i1 %cmp418, label %if.then.420, label %if.else.480

if.then.420:                                      ; preds = %cond.end.415
  %298 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags421 = getelementptr inbounds %struct.sv, %struct.sv* %298, i32 0, i32 2
  %299 = load i32, i32* %sv_flags421, align 4
  %and422 = and i32 %299, 2097152
  %tobool423 = icmp ne i32 %and422, 0
  br i1 %tobool423, label %land.rhs.424, label %land.end.427

land.rhs.424:                                     ; preds = %if.then.420
  %300 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call425 = call i32 @Perl_sv_backoff(%struct.sv* %300)
  %tobool426 = icmp ne i32 %call425, 0
  br label %land.end.427

land.end.427:                                     ; preds = %land.rhs.424, %if.then.420
  %301 = phi i1 [ false, %if.then.420 ], [ %tobool426, %land.rhs.424 ]
  %land.ext428 = zext i1 %301 to i32
  %302 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags429 = getelementptr inbounds %struct.sv, %struct.sv* %302, i32 0, i32 2
  %303 = load i32, i32* %sv_flags429, align 4
  %or430 = or i32 %303, 16777216
  store i32 %or430, i32* %sv_flags429, align 4
  %304 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags431 = getelementptr inbounds %struct.sv, %struct.sv* %304, i32 0, i32 2
  %305 = load i32, i32* %sv_flags431, align 4
  %or432 = or i32 %305, 33685504
  store i32 %or432, i32* %sv_flags431, align 4
  %306 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any433 = getelementptr inbounds %struct.sv, %struct.sv* %306, i32 0, i32 0
  %307 = load i8*, i8** %sv_any433, align 8
  %308 = bitcast i8* %307 to %struct.xpvnv*
  %xnv_nv434 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %308, i32 0, i32 4
  %309 = load double, double* %xnv_nv434, align 8
  %call435 = call i64 @Perl_cast_iv(double %309)
  %310 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any436 = getelementptr inbounds %struct.sv, %struct.sv* %310, i32 0, i32 0
  %311 = load i8*, i8** %sv_any436, align 8
  %312 = bitcast i8* %311 to %struct.xpviv*
  %xiv_iv437 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %312, i32 0, i32 3
  store i64 %call435, i64* %xiv_iv437, align 8
  %313 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any438 = getelementptr inbounds %struct.sv, %struct.sv* %313, i32 0, i32 0
  %314 = load i8*, i8** %sv_any438, align 8
  %315 = bitcast i8* %314 to %struct.xpviv*
  %xiv_iv439 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %315, i32 0, i32 3
  %316 = load i64, i64* %xiv_iv439, align 8
  %conv440 = sitofp i64 %316 to double
  %317 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any441 = getelementptr inbounds %struct.sv, %struct.sv* %317, i32 0, i32 0
  %318 = load i8*, i8** %sv_any441, align 8
  %319 = bitcast i8* %318 to %struct.xpvnv*
  %xnv_nv442 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %319, i32 0, i32 4
  %320 = load double, double* %xnv_nv442, align 8
  %cmp443 = fcmp oeq double %conv440, %320
  br i1 %cmp443, label %if.then.445, label %if.end.456

if.then.445:                                      ; preds = %land.end.427
  %321 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags446 = getelementptr inbounds %struct.sv, %struct.sv* %321, i32 0, i32 2
  %322 = load i32, i32* %sv_flags446, align 4
  %and447 = and i32 %322, 2097152
  %tobool448 = icmp ne i32 %and447, 0
  br i1 %tobool448, label %land.rhs.449, label %land.end.452

land.rhs.449:                                     ; preds = %if.then.445
  %323 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call450 = call i32 @Perl_sv_backoff(%struct.sv* %323)
  %tobool451 = icmp ne i32 %call450, 0
  br label %land.end.452

land.end.452:                                     ; preds = %land.rhs.449, %if.then.445
  %324 = phi i1 [ false, %if.then.445 ], [ %tobool451, %land.rhs.449 ]
  %land.ext453 = zext i1 %324 to i32
  %325 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags454 = getelementptr inbounds %struct.sv, %struct.sv* %325, i32 0, i32 2
  %326 = load i32, i32* %sv_flags454, align 4
  %or455 = or i32 %326, 16842752
  store i32 %or455, i32* %sv_flags454, align 4
  br label %if.end.456

if.end.456:                                       ; preds = %land.end.452, %land.end.427
  %327 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any457 = getelementptr inbounds %struct.sv, %struct.sv* %327, i32 0, i32 0
  %328 = load i8*, i8** %sv_any457, align 8
  %329 = bitcast i8* %328 to %struct.xpvnv*
  %xnv_nv458 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %329, i32 0, i32 4
  %330 = load double, double* %xnv_nv458, align 8
  %cmp459 = fcmp ogt double %330, 0.000000e+00
  br i1 %cmp459, label %cond.true.461, label %cond.false.464

cond.true.461:                                    ; preds = %if.end.456
  %331 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any462 = getelementptr inbounds %struct.sv, %struct.sv* %331, i32 0, i32 0
  %332 = load i8*, i8** %sv_any462, align 8
  %333 = bitcast i8* %332 to %struct.xpvnv*
  %xnv_nv463 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %333, i32 0, i32 4
  %334 = load double, double* %xnv_nv463, align 8
  br label %cond.end.468

cond.false.464:                                   ; preds = %if.end.456
  %335 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any465 = getelementptr inbounds %struct.sv, %struct.sv* %335, i32 0, i32 0
  %336 = load i8*, i8** %sv_any465, align 8
  %337 = bitcast i8* %336 to %struct.xpvnv*
  %xnv_nv466 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %337, i32 0, i32 4
  %338 = load double, double* %xnv_nv466, align 8
  %sub467 = fsub double -0.000000e+00, %338
  br label %cond.end.468

cond.end.468:                                     ; preds = %cond.false.464, %cond.true.461
  %cond469 = phi double [ %334, %cond.true.461 ], [ %sub467, %cond.false.464 ]
  %call470 = call i64 @Perl_cast_uv(double %cond469)
  %cmp471 = icmp ult i64 %call470, 9223372036854775807
  br i1 %cmp471, label %if.end.479, label %if.then.473

if.then.473:                                      ; preds = %cond.end.468
  %339 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any474 = getelementptr inbounds %struct.sv, %struct.sv* %339, i32 0, i32 0
  %340 = load i8*, i8** %sv_any474, align 8
  %341 = bitcast i8* %340 to %struct.xpvnv*
  %xnv_nv475 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %341, i32 0, i32 4
  %342 = load double, double* %xnv_nv475, align 8
  %343 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any476 = getelementptr inbounds %struct.sv, %struct.sv* %343, i32 0, i32 0
  %344 = load i8*, i8** %sv_any476, align 8
  %345 = bitcast i8* %344 to %struct.xpvnv*
  %xnv_nv477 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %345, i32 0, i32 4
  %346 = load double, double* %xnv_nv477, align 8
  %call478 = call i64 @Perl_cast_uv(double %346)
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.6, i32 0, i32 0), double %342, i64 %call478, i64 9223372036854775807)
  br label %if.end.479

if.end.479:                                       ; preds = %if.then.473, %cond.end.468
  br label %if.end.486

if.else.480:                                      ; preds = %cond.end.415
  %347 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %348 = load i32, i32* %numtype, align 4
  %call481 = call i32 @S_sv_2iuv_non_preserve(%struct.sv* %347, i32 %348)
  %cmp482 = icmp sge i32 %call481, 4
  br i1 %cmp482, label %if.then.484, label %if.end.485

if.then.484:                                      ; preds = %if.else.480
  br label %ret_iv_max

if.end.485:                                       ; preds = %if.else.480
  br label %if.end.486

if.end.486:                                       ; preds = %if.end.485, %if.end.479
  br label %if.end.487

if.end.487:                                       ; preds = %if.end.486, %if.then.400
  br label %if.end.488

if.end.488:                                       ; preds = %if.end.487, %if.end.356
  br label %if.end.532

if.else.489:                                      ; preds = %land.lhs.true.252, %if.else.248
  %349 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings490 = getelementptr inbounds %struct.cop, %struct.cop* %349, i32 0, i32 14
  %350 = load %struct.sv*, %struct.sv** %cop_warnings490, align 8
  %cmp491 = icmp ne %struct.sv* %350, null
  br i1 %cmp491, label %land.lhs.true.493, label %lor.lhs.false.509

land.lhs.true.493:                                ; preds = %if.else.489
  %351 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings494 = getelementptr inbounds %struct.cop, %struct.cop* %351, i32 0, i32 14
  %352 = load %struct.sv*, %struct.sv** %cop_warnings494, align 8
  %cmp495 = icmp ne %struct.sv* %352, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 2)
  br i1 %cmp495, label %land.lhs.true.497, label %lor.lhs.false.509

land.lhs.true.497:                                ; preds = %land.lhs.true.493
  %353 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings498 = getelementptr inbounds %struct.cop, %struct.cop* %353, i32 0, i32 14
  %354 = load %struct.sv*, %struct.sv** %cop_warnings498, align 8
  %cmp499 = icmp eq %struct.sv* %354, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 1)
  br i1 %cmp499, label %land.lhs.true.517, label %lor.lhs.false.501

lor.lhs.false.501:                                ; preds = %land.lhs.true.497
  %355 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings502 = getelementptr inbounds %struct.cop, %struct.cop* %355, i32 0, i32 14
  %356 = load %struct.sv*, %struct.sv** %cop_warnings502, align 8
  %sv_any503 = getelementptr inbounds %struct.sv, %struct.sv* %356, i32 0, i32 0
  %357 = load i8*, i8** %sv_any503, align 8
  %358 = bitcast i8* %357 to %struct.xpv*
  %xpv_pv504 = getelementptr inbounds %struct.xpv, %struct.xpv* %358, i32 0, i32 0
  %359 = load i8*, i8** %xpv_pv504, align 8
  %arrayidx505 = getelementptr inbounds i8, i8* %359, i64 10
  %360 = load i8, i8* %arrayidx505, align 1
  %conv506 = sext i8 %360 to i32
  %and507 = and i32 %conv506, 4
  %tobool508 = icmp ne i32 %and507, 0
  br i1 %tobool508, label %land.lhs.true.517, label %lor.lhs.false.509

lor.lhs.false.509:                                ; preds = %lor.lhs.false.501, %land.lhs.true.493, %if.else.489
  %361 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings510 = getelementptr inbounds %struct.cop, %struct.cop* %361, i32 0, i32 14
  %362 = load %struct.sv*, %struct.sv** %cop_warnings510, align 8
  %cmp511 = icmp eq %struct.sv* %362, null
  br i1 %cmp511, label %land.lhs.true.513, label %if.end.524

land.lhs.true.513:                                ; preds = %lor.lhs.false.509
  %363 = load i8, i8* @PL_dowarn, align 1
  %conv514 = zext i8 %363 to i32
  %and515 = and i32 %conv514, 1
  %tobool516 = icmp ne i32 %and515, 0
  br i1 %tobool516, label %land.lhs.true.517, label %if.end.524

land.lhs.true.517:                                ; preds = %land.lhs.true.513, %lor.lhs.false.501, %land.lhs.true.497
  %364 = load i32, i32* @PL_localizing, align 4
  %tobool518 = icmp ne i32 %364, 0
  br i1 %tobool518, label %if.end.524, label %land.lhs.true.519

land.lhs.true.519:                                ; preds = %land.lhs.true.517
  %365 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags520 = getelementptr inbounds %struct.sv, %struct.sv* %365, i32 0, i32 2
  %366 = load i32, i32* %sv_flags520, align 4
  %and521 = and i32 %366, 512
  %tobool522 = icmp ne i32 %and521, 0
  br i1 %tobool522, label %if.end.524, label %if.then.523

if.then.523:                                      ; preds = %land.lhs.true.519
  call void @Perl_report_uninit()
  br label %if.end.524

if.end.524:                                       ; preds = %if.then.523, %land.lhs.true.519, %land.lhs.true.517, %land.lhs.true.513, %lor.lhs.false.509
  %367 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags525 = getelementptr inbounds %struct.sv, %struct.sv* %367, i32 0, i32 2
  %368 = load i32, i32* %sv_flags525, align 4
  %and526 = and i32 %368, 255
  %cmp527 = icmp ult i32 %and526, 1
  br i1 %cmp527, label %if.then.529, label %if.end.531

if.then.529:                                      ; preds = %if.end.524
  %369 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call530 = call signext i8 @Perl_sv_upgrade(%struct.sv* %369, i32 1)
  br label %if.end.531

if.end.531:                                       ; preds = %if.then.529, %if.end.524
  store i64 0, i64* %retval
  br label %return

if.end.532:                                       ; preds = %if.end.488
  br label %if.end.533

if.end.533:                                       ; preds = %if.end.532, %if.end.247
  %370 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags534 = getelementptr inbounds %struct.sv, %struct.sv* %370, i32 0, i32 2
  %371 = load i32, i32* %sv_flags534, align 4
  %and535 = and i32 %371, -2147483648
  %tobool536 = icmp ne i32 %and535, 0
  br i1 %tobool536, label %cond.true.537, label %cond.false.540

cond.true.537:                                    ; preds = %if.end.533
  %372 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any538 = getelementptr inbounds %struct.sv, %struct.sv* %372, i32 0, i32 0
  %373 = load i8*, i8** %sv_any538, align 8
  %374 = bitcast i8* %373 to %struct.xpvuv*
  %xuv_uv539 = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %374, i32 0, i32 3
  %375 = load i64, i64* %xuv_uv539, align 8
  br label %cond.end.543

cond.false.540:                                   ; preds = %if.end.533
  %376 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any541 = getelementptr inbounds %struct.sv, %struct.sv* %376, i32 0, i32 0
  %377 = load i8*, i8** %sv_any541, align 8
  %378 = bitcast i8* %377 to %struct.xpviv*
  %xiv_iv542 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %378, i32 0, i32 3
  %379 = load i64, i64* %xiv_iv542, align 8
  br label %cond.end.543

cond.end.543:                                     ; preds = %cond.false.540, %cond.true.537
  %cond544 = phi i64 [ %375, %cond.true.537 ], [ %379, %cond.false.540 ]
  store i64 %cond544, i64* %retval
  br label %return

return:                                           ; preds = %cond.end.543, %if.end.531, %ret_iv_max, %if.else, %if.then.146, %if.end.136, %if.end.87, %cond.end, %if.end.53, %if.then.20, %if.then.11, %if.then.6, %if.then
  %380 = load i64, i64* %retval
  ret i64 %380
}

declare i32 @Perl_mg_get(%struct.sv*) #1

declare i64 @Perl_cast_iv(double) #1

; Function Attrs: nounwind uwtable
define internal i64 @S_asIV(%struct.sv* %sv) #0 {
entry:
  %retval = alloca i64, align 8
  %sv.addr = alloca %struct.sv*, align 8
  %value = alloca i64, align 8
  %numtype = alloca i32, align 4
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 0
  %1 = load i8*, i8** %sv_any, align 8
  %2 = bitcast i8* %1 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %2, i32 0, i32 0
  %3 = load i8*, i8** %xpv_pv, align 8
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any1 = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 0
  %5 = load i8*, i8** %sv_any1, align 8
  %6 = bitcast i8* %5 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %6, i32 0, i32 1
  %7 = load i64, i64* %xpv_cur, align 8
  %call = call i32 @Perl_grok_number(i8* %3, i64 %7, i64* %value)
  store i32 %call, i32* %numtype, align 4
  %8 = load i32, i32* %numtype, align 4
  %and = and i32 %8, 5
  %cmp = icmp eq i32 %and, 1
  br i1 %cmp, label %if.then, label %if.end.10

if.then:                                          ; preds = %entry
  %9 = load i32, i32* %numtype, align 4
  %and2 = and i32 %9, 8
  %tobool = icmp ne i32 %and2, 0
  br i1 %tobool, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %if.then
  %10 = load i64, i64* %value, align 8
  %cmp4 = icmp ult i64 %10, -9223372036854775808
  br i1 %cmp4, label %if.then.5, label %if.end

if.then.5:                                        ; preds = %if.then.3
  %11 = load i64, i64* %value, align 8
  %sub = sub nsw i64 0, %11
  store i64 %sub, i64* %retval
  br label %return

if.end:                                           ; preds = %if.then.3
  br label %if.end.9

if.else:                                          ; preds = %if.then
  %12 = load i64, i64* %value, align 8
  %cmp6 = icmp ult i64 %12, 9223372036854775807
  br i1 %cmp6, label %if.then.7, label %if.end.8

if.then.7:                                        ; preds = %if.else
  %13 = load i64, i64* %value, align 8
  store i64 %13, i64* %retval
  br label %return

if.end.8:                                         ; preds = %if.else
  br label %if.end.9

if.end.9:                                         ; preds = %if.end.8, %if.end
  br label %if.end.10

if.end.10:                                        ; preds = %if.end.9, %entry
  %14 = load i32, i32* %numtype, align 4
  %tobool11 = icmp ne i32 %14, 0
  br i1 %tobool11, label %if.end.34, label %if.then.12

if.then.12:                                       ; preds = %if.end.10
  %15 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings = getelementptr inbounds %struct.cop, %struct.cop* %15, i32 0, i32 14
  %16 = load %struct.sv*, %struct.sv** %cop_warnings, align 8
  %cmp13 = icmp ne %struct.sv* %16, null
  br i1 %cmp13, label %land.lhs.true, label %lor.lhs.false.24

land.lhs.true:                                    ; preds = %if.then.12
  %17 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings14 = getelementptr inbounds %struct.cop, %struct.cop* %17, i32 0, i32 14
  %18 = load %struct.sv*, %struct.sv** %cop_warnings14, align 8
  %cmp15 = icmp ne %struct.sv* %18, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 2)
  br i1 %cmp15, label %land.lhs.true.16, label %lor.lhs.false.24

land.lhs.true.16:                                 ; preds = %land.lhs.true
  %19 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings17 = getelementptr inbounds %struct.cop, %struct.cop* %19, i32 0, i32 14
  %20 = load %struct.sv*, %struct.sv** %cop_warnings17, align 8
  %cmp18 = icmp eq %struct.sv* %20, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 1)
  br i1 %cmp18, label %if.then.32, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.16
  %21 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings19 = getelementptr inbounds %struct.cop, %struct.cop* %21, i32 0, i32 14
  %22 = load %struct.sv*, %struct.sv** %cop_warnings19, align 8
  %sv_any20 = getelementptr inbounds %struct.sv, %struct.sv* %22, i32 0, i32 0
  %23 = load i8*, i8** %sv_any20, align 8
  %24 = bitcast i8* %23 to %struct.xpv*
  %xpv_pv21 = getelementptr inbounds %struct.xpv, %struct.xpv* %24, i32 0, i32 0
  %25 = load i8*, i8** %xpv_pv21, align 8
  %arrayidx = getelementptr inbounds i8, i8* %25, i64 3
  %26 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %26 to i32
  %and22 = and i32 %conv, 4
  %tobool23 = icmp ne i32 %and22, 0
  br i1 %tobool23, label %if.then.32, label %lor.lhs.false.24

lor.lhs.false.24:                                 ; preds = %lor.lhs.false, %land.lhs.true, %if.then.12
  %27 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings25 = getelementptr inbounds %struct.cop, %struct.cop* %27, i32 0, i32 14
  %28 = load %struct.sv*, %struct.sv** %cop_warnings25, align 8
  %cmp26 = icmp eq %struct.sv* %28, null
  br i1 %cmp26, label %land.lhs.true.28, label %if.end.33

land.lhs.true.28:                                 ; preds = %lor.lhs.false.24
  %29 = load i8, i8* @PL_dowarn, align 1
  %conv29 = zext i8 %29 to i32
  %and30 = and i32 %conv29, 1
  %tobool31 = icmp ne i32 %and30, 0
  br i1 %tobool31, label %if.then.32, label %if.end.33

if.then.32:                                       ; preds = %land.lhs.true.28, %lor.lhs.false, %land.lhs.true.16
  %30 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @S_not_a_number(%struct.sv* %30)
  br label %if.end.33

if.end.33:                                        ; preds = %if.then.32, %land.lhs.true.28, %lor.lhs.false.24
  br label %if.end.34

if.end.34:                                        ; preds = %if.end.33, %if.end.10
  %31 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any35 = getelementptr inbounds %struct.sv, %struct.sv* %31, i32 0, i32 0
  %32 = load i8*, i8** %sv_any35, align 8
  %33 = bitcast i8* %32 to %struct.xpv*
  %xpv_pv36 = getelementptr inbounds %struct.xpv, %struct.xpv* %33, i32 0, i32 0
  %34 = load i8*, i8** %xpv_pv36, align 8
  %call37 = call double @Perl_my_atof(i8* %34)
  %call38 = call i64 @Perl_cast_iv(double %call37)
  store i64 %call38, i64* %retval
  br label %return

return:                                           ; preds = %if.end.34, %if.then.7, %if.then.5
  %35 = load i64, i64* %retval
  ret i64 %35
}

declare %struct.sv* @Perl_amagic_call(%struct.sv*, %struct.sv*, i32, i32) #1

declare i64 @Perl_cast_uv(double) #1

declare double @Perl_my_atof(i8*) #1

; Function Attrs: nounwind uwtable
define internal void @S_not_a_number(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %dsv = alloca %struct.sv*, align 8
  %tmpbuf = alloca [64 x i8], align 16
  %pv = alloca i8*, align 8
  %d = alloca i8*, align 8
  %limit = alloca i8*, align 8
  %s = alloca i8*, align 8
  %end = alloca i8*, align 8
  %ch = alloca i32, align 4
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 536870912
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %2 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %op_private = getelementptr inbounds %struct.cop, %struct.cop* %2, i32 0, i32 7
  %3 = load i8, i8* %op_private, align 1
  %conv = zext i8 %3 to i32
  %and1 = and i32 %conv, 8
  %tobool2 = icmp ne i32 %and1, 0
  br i1 %tobool2, label %if.else, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %call = call %struct.sv* @Perl_newSVpv(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0), i64 0)
  %call3 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call)
  store %struct.sv* %call3, %struct.sv** %dsv, align 8
  %4 = load %struct.sv*, %struct.sv** %dsv, align 8
  %5 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call4 = call i8* @Perl_sv_uni_display(%struct.sv* %4, %struct.sv* %5, i64 10, i64 0)
  store i8* %call4, i8** %pv, align 8
  br label %if.end.95

if.else:                                          ; preds = %land.lhs.true, %entry
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %tmpbuf, i32 0, i32 0
  store i8* %arraydecay, i8** %d, align 8
  %arraydecay5 = getelementptr inbounds [64 x i8], [64 x i8]* %tmpbuf, i32 0, i32 0
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay5, i64 64
  %add.ptr6 = getelementptr inbounds i8, i8* %add.ptr, i64 -8
  store i8* %add.ptr6, i8** %limit, align 8
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 0
  %7 = load i8*, i8** %sv_any, align 8
  %8 = bitcast i8* %7 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %8, i32 0, i32 0
  %9 = load i8*, i8** %xpv_pv, align 8
  store i8* %9, i8** %s, align 8
  %10 = load i8*, i8** %s, align 8
  %11 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any7 = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 0
  %12 = load i8*, i8** %sv_any7, align 8
  %13 = bitcast i8* %12 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %13, i32 0, i32 1
  %14 = load i64, i64* %xpv_cur, align 8
  %add.ptr8 = getelementptr inbounds i8, i8* %10, i64 %14
  store i8* %add.ptr8, i8** %end, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else
  %15 = load i8*, i8** %s, align 8
  %16 = load i8*, i8** %end, align 8
  %cmp = icmp ult i8* %15, %16
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %17 = load i8*, i8** %d, align 8
  %18 = load i8*, i8** %limit, align 8
  %cmp10 = icmp ult i8* %17, %18
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %19 = phi i1 [ false, %for.cond ], [ %cmp10, %land.rhs ]
  br i1 %19, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %20 = load i8*, i8** %s, align 8
  %21 = load i8, i8* %20, align 1
  %conv12 = sext i8 %21 to i32
  %and13 = and i32 %conv12, 255
  store i32 %and13, i32* %ch, align 4
  %22 = load i32, i32* %ch, align 4
  %and14 = and i32 %22, 128
  %tobool15 = icmp ne i32 %and14, 0
  br i1 %tobool15, label %land.lhs.true.16, label %if.end

land.lhs.true.16:                                 ; preds = %for.body
  %23 = load i32, i32* %ch, align 4
  %and17 = and i32 %23, -128
  %cmp18 = icmp eq i32 %and17, 0
  br i1 %cmp18, label %land.lhs.true.20, label %if.then.25

land.lhs.true.20:                                 ; preds = %land.lhs.true.16
  %24 = load i32, i32* %ch, align 4
  %idxprom = sext i32 %24 to i64
  %call21 = call i16** @__ctype_b_loc()
  %25 = load i16*, i16** %call21, align 8
  %arrayidx = getelementptr inbounds i16, i16* %25, i64 %idxprom
  %26 = load i16, i16* %arrayidx, align 2
  %conv22 = zext i16 %26 to i32
  %and23 = and i32 %conv22, 16384
  %tobool24 = icmp ne i32 %and23, 0
  br i1 %tobool24, label %if.end, label %if.then.25

if.then.25:                                       ; preds = %land.lhs.true.20, %land.lhs.true.16
  %27 = load i8*, i8** %d, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %27, i32 1
  store i8* %incdec.ptr, i8** %d, align 8
  store i8 77, i8* %27, align 1
  %28 = load i8*, i8** %d, align 8
  %incdec.ptr26 = getelementptr inbounds i8, i8* %28, i32 1
  store i8* %incdec.ptr26, i8** %d, align 8
  store i8 45, i8* %28, align 1
  %29 = load i32, i32* %ch, align 4
  %and27 = and i32 %29, 127
  store i32 %and27, i32* %ch, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.25, %land.lhs.true.20, %for.body
  %30 = load i32, i32* %ch, align 4
  %cmp28 = icmp eq i32 %30, 10
  br i1 %cmp28, label %if.then.30, label %if.else.33

if.then.30:                                       ; preds = %if.end
  %31 = load i8*, i8** %d, align 8
  %incdec.ptr31 = getelementptr inbounds i8, i8* %31, i32 1
  store i8* %incdec.ptr31, i8** %d, align 8
  store i8 92, i8* %31, align 1
  %32 = load i8*, i8** %d, align 8
  %incdec.ptr32 = getelementptr inbounds i8, i8* %32, i32 1
  store i8* %incdec.ptr32, i8** %d, align 8
  store i8 110, i8* %32, align 1
  br label %if.end.85

if.else.33:                                       ; preds = %if.end
  %33 = load i32, i32* %ch, align 4
  %cmp34 = icmp eq i32 %33, 13
  br i1 %cmp34, label %if.then.36, label %if.else.39

if.then.36:                                       ; preds = %if.else.33
  %34 = load i8*, i8** %d, align 8
  %incdec.ptr37 = getelementptr inbounds i8, i8* %34, i32 1
  store i8* %incdec.ptr37, i8** %d, align 8
  store i8 92, i8* %34, align 1
  %35 = load i8*, i8** %d, align 8
  %incdec.ptr38 = getelementptr inbounds i8, i8* %35, i32 1
  store i8* %incdec.ptr38, i8** %d, align 8
  store i8 114, i8* %35, align 1
  br label %if.end.84

if.else.39:                                       ; preds = %if.else.33
  %36 = load i32, i32* %ch, align 4
  %cmp40 = icmp eq i32 %36, 12
  br i1 %cmp40, label %if.then.42, label %if.else.45

if.then.42:                                       ; preds = %if.else.39
  %37 = load i8*, i8** %d, align 8
  %incdec.ptr43 = getelementptr inbounds i8, i8* %37, i32 1
  store i8* %incdec.ptr43, i8** %d, align 8
  store i8 92, i8* %37, align 1
  %38 = load i8*, i8** %d, align 8
  %incdec.ptr44 = getelementptr inbounds i8, i8* %38, i32 1
  store i8* %incdec.ptr44, i8** %d, align 8
  store i8 102, i8* %38, align 1
  br label %if.end.83

if.else.45:                                       ; preds = %if.else.39
  %39 = load i32, i32* %ch, align 4
  %cmp46 = icmp eq i32 %39, 92
  br i1 %cmp46, label %if.then.48, label %if.else.51

if.then.48:                                       ; preds = %if.else.45
  %40 = load i8*, i8** %d, align 8
  %incdec.ptr49 = getelementptr inbounds i8, i8* %40, i32 1
  store i8* %incdec.ptr49, i8** %d, align 8
  store i8 92, i8* %40, align 1
  %41 = load i8*, i8** %d, align 8
  %incdec.ptr50 = getelementptr inbounds i8, i8* %41, i32 1
  store i8* %incdec.ptr50, i8** %d, align 8
  store i8 92, i8* %41, align 1
  br label %if.end.82

if.else.51:                                       ; preds = %if.else.45
  %42 = load i32, i32* %ch, align 4
  %cmp52 = icmp eq i32 %42, 0
  br i1 %cmp52, label %if.then.54, label %if.else.57

if.then.54:                                       ; preds = %if.else.51
  %43 = load i8*, i8** %d, align 8
  %incdec.ptr55 = getelementptr inbounds i8, i8* %43, i32 1
  store i8* %incdec.ptr55, i8** %d, align 8
  store i8 92, i8* %43, align 1
  %44 = load i8*, i8** %d, align 8
  %incdec.ptr56 = getelementptr inbounds i8, i8* %44, i32 1
  store i8* %incdec.ptr56, i8** %d, align 8
  store i8 48, i8* %44, align 1
  br label %if.end.81

if.else.57:                                       ; preds = %if.else.51
  %45 = load i32, i32* %ch, align 4
  %and58 = and i32 %45, -128
  %cmp59 = icmp eq i32 %and58, 0
  br i1 %cmp59, label %land.lhs.true.61, label %if.else.71

land.lhs.true.61:                                 ; preds = %if.else.57
  %46 = load i32, i32* %ch, align 4
  %idxprom62 = sext i32 %46 to i64
  %call63 = call i16** @__ctype_b_loc()
  %47 = load i16*, i16** %call63, align 8
  %arrayidx64 = getelementptr inbounds i16, i16* %47, i64 %idxprom62
  %48 = load i16, i16* %arrayidx64, align 2
  %conv65 = zext i16 %48 to i32
  %and66 = and i32 %conv65, 16384
  %tobool67 = icmp ne i32 %and66, 0
  br i1 %tobool67, label %if.then.68, label %if.else.71

if.then.68:                                       ; preds = %land.lhs.true.61
  %49 = load i32, i32* %ch, align 4
  %conv69 = trunc i32 %49 to i8
  %50 = load i8*, i8** %d, align 8
  %incdec.ptr70 = getelementptr inbounds i8, i8* %50, i32 1
  store i8* %incdec.ptr70, i8** %d, align 8
  store i8 %conv69, i8* %50, align 1
  br label %if.end.80

if.else.71:                                       ; preds = %land.lhs.true.61, %if.else.57
  %51 = load i8*, i8** %d, align 8
  %incdec.ptr72 = getelementptr inbounds i8, i8* %51, i32 1
  store i8* %incdec.ptr72, i8** %d, align 8
  store i8 94, i8* %51, align 1
  %52 = load i32, i32* %ch, align 4
  %cmp73 = icmp sge i32 %52, 97
  br i1 %cmp73, label %land.lhs.true.75, label %cond.false

land.lhs.true.75:                                 ; preds = %if.else.71
  %53 = load i32, i32* %ch, align 4
  %cmp76 = icmp sle i32 %53, 122
  br i1 %cmp76, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true.75
  %54 = load i32, i32* %ch, align 4
  %sub = sub nsw i32 %54, 32
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true.75, %if.else.71
  %55 = load i32, i32* %ch, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub, %cond.true ], [ %55, %cond.false ]
  %xor = xor i32 %cond, 64
  %conv78 = trunc i32 %xor to i8
  %56 = load i8*, i8** %d, align 8
  %incdec.ptr79 = getelementptr inbounds i8, i8* %56, i32 1
  store i8* %incdec.ptr79, i8** %d, align 8
  store i8 %conv78, i8* %56, align 1
  br label %if.end.80

if.end.80:                                        ; preds = %cond.end, %if.then.68
  br label %if.end.81

if.end.81:                                        ; preds = %if.end.80, %if.then.54
  br label %if.end.82

if.end.82:                                        ; preds = %if.end.81, %if.then.48
  br label %if.end.83

if.end.83:                                        ; preds = %if.end.82, %if.then.42
  br label %if.end.84

if.end.84:                                        ; preds = %if.end.83, %if.then.36
  br label %if.end.85

if.end.85:                                        ; preds = %if.end.84, %if.then.30
  br label %for.inc

for.inc:                                          ; preds = %if.end.85
  %57 = load i8*, i8** %s, align 8
  %incdec.ptr86 = getelementptr inbounds i8, i8* %57, i32 1
  store i8* %incdec.ptr86, i8** %s, align 8
  br label %for.cond

for.end:                                          ; preds = %land.end
  %58 = load i8*, i8** %s, align 8
  %59 = load i8*, i8** %end, align 8
  %cmp87 = icmp ult i8* %58, %59
  br i1 %cmp87, label %if.then.89, label %if.end.93

if.then.89:                                       ; preds = %for.end
  %60 = load i8*, i8** %d, align 8
  %incdec.ptr90 = getelementptr inbounds i8, i8* %60, i32 1
  store i8* %incdec.ptr90, i8** %d, align 8
  store i8 46, i8* %60, align 1
  %61 = load i8*, i8** %d, align 8
  %incdec.ptr91 = getelementptr inbounds i8, i8* %61, i32 1
  store i8* %incdec.ptr91, i8** %d, align 8
  store i8 46, i8* %61, align 1
  %62 = load i8*, i8** %d, align 8
  %incdec.ptr92 = getelementptr inbounds i8, i8* %62, i32 1
  store i8* %incdec.ptr92, i8** %d, align 8
  store i8 46, i8* %62, align 1
  br label %if.end.93

if.end.93:                                        ; preds = %if.then.89, %for.end
  %63 = load i8*, i8** %d, align 8
  store i8 0, i8* %63, align 1
  %arraydecay94 = getelementptr inbounds [64 x i8], [64 x i8]* %tmpbuf, i32 0, i32 0
  store i8* %arraydecay94, i8** %pv, align 8
  br label %if.end.95

if.end.95:                                        ; preds = %if.end.93, %if.then
  %64 = load %struct.op*, %struct.op** @PL_op, align 8
  %tobool96 = icmp ne %struct.op* %64, null
  br i1 %tobool96, label %if.then.97, label %if.else.109

if.then.97:                                       ; preds = %if.end.95
  %65 = load i8*, i8** %pv, align 8
  %66 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %66, i32 0, i32 4
  %67 = load i16, i16* %op_type, align 2
  %conv98 = zext i16 %67 to i32
  %cmp99 = icmp eq i32 %conv98, 351
  br i1 %cmp99, label %cond.true.101, label %cond.false.103

cond.true.101:                                    ; preds = %if.then.97
  %68 = load %struct.op*, %struct.op** @PL_op, align 8
  %call102 = call i8* @Perl_custom_op_desc(%struct.op* %68)
  br label %cond.end.107

cond.false.103:                                   ; preds = %if.then.97
  %69 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type104 = getelementptr inbounds %struct.op, %struct.op* %69, i32 0, i32 4
  %70 = load i16, i16* %op_type104, align 2
  %idxprom105 = zext i16 %70 to i64
  %arrayidx106 = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i32 0, i64 %idxprom105
  %71 = load i8*, i8** %arrayidx106, align 8
  br label %cond.end.107

cond.end.107:                                     ; preds = %cond.false.103, %cond.true.101
  %cond108 = phi i8* [ %call102, %cond.true.101 ], [ %71, %cond.false.103 ]
  call void (i32, i8*, ...) @Perl_warner(i32 13, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.72, i32 0, i32 0), i8* %65, i8* %cond108)
  br label %if.end.110

if.else.109:                                      ; preds = %if.end.95
  %72 = load i8*, i8** %pv, align 8
  call void (i32, i8*, ...) @Perl_warner(i32 13, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.73, i32 0, i32 0), i8* %72)
  br label %if.end.110

if.end.110:                                       ; preds = %if.else.109, %cond.end.107
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @S_sv_2iuv_non_preserve(%struct.sv* %sv, i32 %numtype) #0 {
entry:
  %retval = alloca i32, align 4
  %sv.addr = alloca %struct.sv*, align 8
  %numtype.addr = alloca i32, align 4
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i32 %numtype, i32* %numtype.addr, align 4
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 0
  %1 = load i8*, i8** %sv_any, align 8
  %2 = bitcast i8* %1 to %struct.xpvnv*
  %xnv_nv = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %2, i32 0, i32 4
  %3 = load double, double* %xnv_nv, align 8
  %cmp = fcmp olt double %3, 0xC3E0000000000000
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 2
  %5 = load i32, i32* %sv_flags, align 4
  %and = and i32 %5, 2097152
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i32 @Perl_sv_backoff(%struct.sv* %6)
  %tobool1 = icmp ne i32 %call, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then
  %7 = phi i1 [ false, %if.then ], [ %tobool1, %land.rhs ]
  %land.ext = zext i1 %7 to i32
  %8 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 2
  %9 = load i32, i32* %sv_flags2, align 4
  %or = or i32 %9, 16777216
  store i32 %or, i32* %sv_flags2, align 4
  %10 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags3 = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags3, align 4
  %or4 = or i32 %11, 33685504
  store i32 %or4, i32* %sv_flags3, align 4
  %12 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any5 = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 0
  %13 = load i8*, i8** %sv_any5, align 8
  %14 = bitcast i8* %13 to %struct.xpviv*
  %xiv_iv = getelementptr inbounds %struct.xpviv, %struct.xpviv* %14, i32 0, i32 3
  store i64 -9223372036854775808, i64* %xiv_iv, align 8
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %15 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any6 = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 0
  %16 = load i8*, i8** %sv_any6, align 8
  %17 = bitcast i8* %16 to %struct.xpvnv*
  %xnv_nv7 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %17, i32 0, i32 4
  %18 = load double, double* %xnv_nv7, align 8
  %cmp8 = fcmp ogt double %18, 0x43F0000000000000
  br i1 %cmp8, label %if.then.9, label %if.end.25

if.then.9:                                        ; preds = %if.end
  %19 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags10 = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 2
  %20 = load i32, i32* %sv_flags10, align 4
  %and11 = and i32 %20, 2097152
  %tobool12 = icmp ne i32 %and11, 0
  br i1 %tobool12, label %land.rhs.13, label %land.end.16

land.rhs.13:                                      ; preds = %if.then.9
  %21 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call14 = call i32 @Perl_sv_backoff(%struct.sv* %21)
  %tobool15 = icmp ne i32 %call14, 0
  br label %land.end.16

land.end.16:                                      ; preds = %land.rhs.13, %if.then.9
  %22 = phi i1 [ false, %if.then.9 ], [ %tobool15, %land.rhs.13 ]
  %land.ext17 = zext i1 %22 to i32
  %23 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags18 = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 2
  %24 = load i32, i32* %sv_flags18, align 4
  %or19 = or i32 %24, 16777216
  store i32 %or19, i32* %sv_flags18, align 4
  %25 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags20 = getelementptr inbounds %struct.sv, %struct.sv* %25, i32 0, i32 2
  %26 = load i32, i32* %sv_flags20, align 4
  %or21 = or i32 %26, 33685504
  store i32 %or21, i32* %sv_flags20, align 4
  %27 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags22 = getelementptr inbounds %struct.sv, %struct.sv* %27, i32 0, i32 2
  %28 = load i32, i32* %sv_flags22, align 4
  %or23 = or i32 %28, -2147483648
  store i32 %or23, i32* %sv_flags22, align 4
  %29 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any24 = getelementptr inbounds %struct.sv, %struct.sv* %29, i32 0, i32 0
  %30 = load i8*, i8** %sv_any24, align 8
  %31 = bitcast i8* %30 to %struct.xpvuv*
  %xuv_uv = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %31, i32 0, i32 3
  store i64 -1, i64* %xuv_uv, align 8
  store i32 5, i32* %retval
  br label %return

if.end.25:                                        ; preds = %if.end
  %32 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags26 = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 2
  %33 = load i32, i32* %sv_flags26, align 4
  %and27 = and i32 %33, 2097152
  %tobool28 = icmp ne i32 %and27, 0
  br i1 %tobool28, label %land.rhs.29, label %land.end.32

land.rhs.29:                                      ; preds = %if.end.25
  %34 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call30 = call i32 @Perl_sv_backoff(%struct.sv* %34)
  %tobool31 = icmp ne i32 %call30, 0
  br label %land.end.32

land.end.32:                                      ; preds = %land.rhs.29, %if.end.25
  %35 = phi i1 [ false, %if.end.25 ], [ %tobool31, %land.rhs.29 ]
  %land.ext33 = zext i1 %35 to i32
  %36 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags34 = getelementptr inbounds %struct.sv, %struct.sv* %36, i32 0, i32 2
  %37 = load i32, i32* %sv_flags34, align 4
  %or35 = or i32 %37, 16777216
  store i32 %or35, i32* %sv_flags34, align 4
  %38 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags36 = getelementptr inbounds %struct.sv, %struct.sv* %38, i32 0, i32 2
  %39 = load i32, i32* %sv_flags36, align 4
  %or37 = or i32 %39, 33685504
  store i32 %or37, i32* %sv_flags36, align 4
  %40 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any38 = getelementptr inbounds %struct.sv, %struct.sv* %40, i32 0, i32 0
  %41 = load i8*, i8** %sv_any38, align 8
  %42 = bitcast i8* %41 to %struct.xpvnv*
  %xnv_nv39 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %42, i32 0, i32 4
  %43 = load double, double* %xnv_nv39, align 8
  %cmp40 = fcmp ole double %43, 0x43E0000000000000
  br i1 %cmp40, label %if.then.41, label %if.end.69

if.then.41:                                       ; preds = %land.end.32
  %44 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any42 = getelementptr inbounds %struct.sv, %struct.sv* %44, i32 0, i32 0
  %45 = load i8*, i8** %sv_any42, align 8
  %46 = bitcast i8* %45 to %struct.xpvnv*
  %xnv_nv43 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %46, i32 0, i32 4
  %47 = load double, double* %xnv_nv43, align 8
  %call44 = call i64 @Perl_cast_iv(double %47)
  %48 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any45 = getelementptr inbounds %struct.sv, %struct.sv* %48, i32 0, i32 0
  %49 = load i8*, i8** %sv_any45, align 8
  %50 = bitcast i8* %49 to %struct.xpviv*
  %xiv_iv46 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %50, i32 0, i32 3
  store i64 %call44, i64* %xiv_iv46, align 8
  %51 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any47 = getelementptr inbounds %struct.sv, %struct.sv* %51, i32 0, i32 0
  %52 = load i8*, i8** %sv_any47, align 8
  %53 = bitcast i8* %52 to %struct.xpviv*
  %xiv_iv48 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %53, i32 0, i32 3
  %54 = load i64, i64* %xiv_iv48, align 8
  %conv = sitofp i64 %54 to double
  %55 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any49 = getelementptr inbounds %struct.sv, %struct.sv* %55, i32 0, i32 0
  %56 = load i8*, i8** %sv_any49, align 8
  %57 = bitcast i8* %56 to %struct.xpvnv*
  %xnv_nv50 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %57, i32 0, i32 4
  %58 = load double, double* %xnv_nv50, align 8
  %cmp51 = fcmp oeq double %conv, %58
  br i1 %cmp51, label %if.then.53, label %if.else

if.then.53:                                       ; preds = %if.then.41
  %59 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags54 = getelementptr inbounds %struct.sv, %struct.sv* %59, i32 0, i32 2
  %60 = load i32, i32* %sv_flags54, align 4
  %and55 = and i32 %60, 2097152
  %tobool56 = icmp ne i32 %and55, 0
  br i1 %tobool56, label %land.rhs.57, label %land.end.60

land.rhs.57:                                      ; preds = %if.then.53
  %61 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call58 = call i32 @Perl_sv_backoff(%struct.sv* %61)
  %tobool59 = icmp ne i32 %call58, 0
  br label %land.end.60

land.end.60:                                      ; preds = %land.rhs.57, %if.then.53
  %62 = phi i1 [ false, %if.then.53 ], [ %tobool59, %land.rhs.57 ]
  %land.ext61 = zext i1 %62 to i32
  %63 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags62 = getelementptr inbounds %struct.sv, %struct.sv* %63, i32 0, i32 2
  %64 = load i32, i32* %sv_flags62, align 4
  %or63 = or i32 %64, 16842752
  store i32 %or63, i32* %sv_flags62, align 4
  br label %if.end.64

if.else:                                          ; preds = %if.then.41
  br label %if.end.64

if.end.64:                                        ; preds = %if.else, %land.end.60
  %65 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any65 = getelementptr inbounds %struct.sv, %struct.sv* %65, i32 0, i32 0
  %66 = load i8*, i8** %sv_any65, align 8
  %67 = bitcast i8* %66 to %struct.xpvnv*
  %xnv_nv66 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %67, i32 0, i32 4
  %68 = load double, double* %xnv_nv66, align 8
  %cmp67 = fcmp olt double %68, 0.000000e+00
  %cond = select i1 %cmp67, i32 2, i32 2
  store i32 %cond, i32* %retval
  br label %return

if.end.69:                                        ; preds = %land.end.32
  %69 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags70 = getelementptr inbounds %struct.sv, %struct.sv* %69, i32 0, i32 2
  %70 = load i32, i32* %sv_flags70, align 4
  %or71 = or i32 %70, -2147483648
  store i32 %or71, i32* %sv_flags70, align 4
  %71 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any72 = getelementptr inbounds %struct.sv, %struct.sv* %71, i32 0, i32 0
  %72 = load i8*, i8** %sv_any72, align 8
  %73 = bitcast i8* %72 to %struct.xpvnv*
  %xnv_nv73 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %73, i32 0, i32 4
  %74 = load double, double* %xnv_nv73, align 8
  %call74 = call i64 @Perl_cast_uv(double %74)
  %75 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any75 = getelementptr inbounds %struct.sv, %struct.sv* %75, i32 0, i32 0
  %76 = load i8*, i8** %sv_any75, align 8
  %77 = bitcast i8* %76 to %struct.xpvuv*
  %xuv_uv76 = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %77, i32 0, i32 3
  store i64 %call74, i64* %xuv_uv76, align 8
  %78 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any77 = getelementptr inbounds %struct.sv, %struct.sv* %78, i32 0, i32 0
  %79 = load i8*, i8** %sv_any77, align 8
  %80 = bitcast i8* %79 to %struct.xpvuv*
  %xuv_uv78 = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %80, i32 0, i32 3
  %81 = load i64, i64* %xuv_uv78, align 8
  %conv79 = uitofp i64 %81 to double
  %82 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any80 = getelementptr inbounds %struct.sv, %struct.sv* %82, i32 0, i32 0
  %83 = load i8*, i8** %sv_any80, align 8
  %84 = bitcast i8* %83 to %struct.xpvnv*
  %xnv_nv81 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %84, i32 0, i32 4
  %85 = load double, double* %xnv_nv81, align 8
  %cmp82 = fcmp oeq double %conv79, %85
  br i1 %cmp82, label %if.then.84, label %if.else.101

if.then.84:                                       ; preds = %if.end.69
  %86 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any85 = getelementptr inbounds %struct.sv, %struct.sv* %86, i32 0, i32 0
  %87 = load i8*, i8** %sv_any85, align 8
  %88 = bitcast i8* %87 to %struct.xpvuv*
  %xuv_uv86 = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %88, i32 0, i32 3
  %89 = load i64, i64* %xuv_uv86, align 8
  %cmp87 = icmp eq i64 %89, -1
  br i1 %cmp87, label %if.then.89, label %if.end.90

if.then.89:                                       ; preds = %if.then.84
  store i32 5, i32* %retval
  br label %return

if.end.90:                                        ; preds = %if.then.84
  %90 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags91 = getelementptr inbounds %struct.sv, %struct.sv* %90, i32 0, i32 2
  %91 = load i32, i32* %sv_flags91, align 4
  %and92 = and i32 %91, 2097152
  %tobool93 = icmp ne i32 %and92, 0
  br i1 %tobool93, label %land.rhs.94, label %land.end.97

land.rhs.94:                                      ; preds = %if.end.90
  %92 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call95 = call i32 @Perl_sv_backoff(%struct.sv* %92)
  %tobool96 = icmp ne i32 %call95, 0
  br label %land.end.97

land.end.97:                                      ; preds = %land.rhs.94, %if.end.90
  %93 = phi i1 [ false, %if.end.90 ], [ %tobool96, %land.rhs.94 ]
  %land.ext98 = zext i1 %93 to i32
  %94 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags99 = getelementptr inbounds %struct.sv, %struct.sv* %94, i32 0, i32 2
  %95 = load i32, i32* %sv_flags99, align 4
  %or100 = or i32 %95, 16842752
  store i32 %or100, i32* %sv_flags99, align 4
  br label %if.end.102

if.else.101:                                      ; preds = %if.end.69
  br label %if.end.102

if.end.102:                                       ; preds = %if.else.101, %land.end.97
  store i32 4, i32* %retval
  br label %return

return:                                           ; preds = %if.end.102, %if.then.89, %if.end.64, %land.end.16, %land.end
  %96 = load i32, i32* %retval
  ret i32 %96
}

; Function Attrs: nounwind uwtable
define i64 @Perl_sv_2uv(%struct.sv* %sv) #0 {
entry:
  %retval = alloca i64, align 8
  %sv.addr = alloca %struct.sv*, align 8
  %tmpstr = alloca %struct.sv*, align 8
  %value = alloca i64, align 8
  %numtype = alloca i32, align 4
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i64 0, i64* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and = and i32 %2, 8192
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %if.then.2, label %if.end.55

if.then.2:                                        ; preds = %if.end
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i32 @Perl_mg_get(%struct.sv* %3)
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags3 = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 2
  %5 = load i32, i32* %sv_flags3, align 4
  %and4 = and i32 %5, 16777216
  %tobool5 = icmp ne i32 %and4, 0
  br i1 %tobool5, label %if.then.6, label %if.end.7

if.then.6:                                        ; preds = %if.then.2
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 0
  %7 = load i8*, i8** %sv_any, align 8
  %8 = bitcast i8* %7 to %struct.xpvuv*
  %xuv_uv = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %8, i32 0, i32 3
  %9 = load i64, i64* %xuv_uv, align 8
  store i64 %9, i64* %retval
  br label %return

if.end.7:                                         ; preds = %if.then.2
  %10 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags8 = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags8, align 4
  %and9 = and i32 %11, 33554432
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %if.then.11, label %if.end.14

if.then.11:                                       ; preds = %if.end.7
  %12 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any12 = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 0
  %13 = load i8*, i8** %sv_any12, align 8
  %14 = bitcast i8* %13 to %struct.xpvnv*
  %xnv_nv = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %14, i32 0, i32 4
  %15 = load double, double* %xnv_nv, align 8
  %call13 = call i64 @Perl_cast_uv(double %15)
  store i64 %call13, i64* %retval
  br label %return

if.end.14:                                        ; preds = %if.end.7
  %16 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags15 = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 2
  %17 = load i32, i32* %sv_flags15, align 4
  %and16 = and i32 %17, 67108864
  %tobool17 = icmp ne i32 %and16, 0
  br i1 %tobool17, label %land.lhs.true, label %if.end.22

land.lhs.true:                                    ; preds = %if.end.14
  %18 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any18 = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 0
  %19 = load i8*, i8** %sv_any18, align 8
  %20 = bitcast i8* %19 to %struct.xpv*
  %xpv_len = getelementptr inbounds %struct.xpv, %struct.xpv* %20, i32 0, i32 2
  %21 = load i64, i64* %xpv_len, align 8
  %tobool19 = icmp ne i64 %21, 0
  br i1 %tobool19, label %if.then.20, label %if.end.22

if.then.20:                                       ; preds = %land.lhs.true
  %22 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call21 = call i64 @S_asUV(%struct.sv* %22)
  store i64 %call21, i64* %retval
  br label %return

if.end.22:                                        ; preds = %land.lhs.true, %if.end.14
  %23 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags23 = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 2
  %24 = load i32, i32* %sv_flags23, align 4
  %and24 = and i32 %24, 524288
  %tobool25 = icmp ne i32 %and24, 0
  br i1 %tobool25, label %if.end.54, label %if.then.26

if.then.26:                                       ; preds = %if.end.22
  %25 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags27 = getelementptr inbounds %struct.sv, %struct.sv* %25, i32 0, i32 2
  %26 = load i32, i32* %sv_flags27, align 4
  %and28 = and i32 %26, 512
  %tobool29 = icmp ne i32 %and28, 0
  br i1 %tobool29, label %if.end.53, label %if.then.30

if.then.30:                                       ; preds = %if.then.26
  %27 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings = getelementptr inbounds %struct.cop, %struct.cop* %27, i32 0, i32 14
  %28 = load %struct.sv*, %struct.sv** %cop_warnings, align 8
  %cmp = icmp ne %struct.sv* %28, null
  br i1 %cmp, label %land.lhs.true.31, label %lor.lhs.false.41

land.lhs.true.31:                                 ; preds = %if.then.30
  %29 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings32 = getelementptr inbounds %struct.cop, %struct.cop* %29, i32 0, i32 14
  %30 = load %struct.sv*, %struct.sv** %cop_warnings32, align 8
  %cmp33 = icmp ne %struct.sv* %30, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 2)
  br i1 %cmp33, label %land.lhs.true.34, label %lor.lhs.false.41

land.lhs.true.34:                                 ; preds = %land.lhs.true.31
  %31 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings35 = getelementptr inbounds %struct.cop, %struct.cop* %31, i32 0, i32 14
  %32 = load %struct.sv*, %struct.sv** %cop_warnings35, align 8
  %cmp36 = icmp eq %struct.sv* %32, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 1)
  br i1 %cmp36, label %land.lhs.true.49, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.34
  %33 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings37 = getelementptr inbounds %struct.cop, %struct.cop* %33, i32 0, i32 14
  %34 = load %struct.sv*, %struct.sv** %cop_warnings37, align 8
  %sv_any38 = getelementptr inbounds %struct.sv, %struct.sv* %34, i32 0, i32 0
  %35 = load i8*, i8** %sv_any38, align 8
  %36 = bitcast i8* %35 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %36, i32 0, i32 0
  %37 = load i8*, i8** %xpv_pv, align 8
  %arrayidx = getelementptr inbounds i8, i8* %37, i64 10
  %38 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %38 to i32
  %and39 = and i32 %conv, 4
  %tobool40 = icmp ne i32 %and39, 0
  br i1 %tobool40, label %land.lhs.true.49, label %lor.lhs.false.41

lor.lhs.false.41:                                 ; preds = %lor.lhs.false, %land.lhs.true.31, %if.then.30
  %39 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings42 = getelementptr inbounds %struct.cop, %struct.cop* %39, i32 0, i32 14
  %40 = load %struct.sv*, %struct.sv** %cop_warnings42, align 8
  %cmp43 = icmp eq %struct.sv* %40, null
  br i1 %cmp43, label %land.lhs.true.45, label %if.end.52

land.lhs.true.45:                                 ; preds = %lor.lhs.false.41
  %41 = load i8, i8* @PL_dowarn, align 1
  %conv46 = zext i8 %41 to i32
  %and47 = and i32 %conv46, 1
  %tobool48 = icmp ne i32 %and47, 0
  br i1 %tobool48, label %land.lhs.true.49, label %if.end.52

land.lhs.true.49:                                 ; preds = %land.lhs.true.45, %lor.lhs.false, %land.lhs.true.34
  %42 = load i32, i32* @PL_localizing, align 4
  %tobool50 = icmp ne i32 %42, 0
  br i1 %tobool50, label %if.end.52, label %if.then.51

if.then.51:                                       ; preds = %land.lhs.true.49
  call void @Perl_report_uninit()
  br label %if.end.52

if.end.52:                                        ; preds = %if.then.51, %land.lhs.true.49, %land.lhs.true.45, %lor.lhs.false.41
  br label %if.end.53

if.end.53:                                        ; preds = %if.end.52, %if.then.26
  store i64 0, i64* %retval
  br label %return

if.end.54:                                        ; preds = %if.end.22
  br label %if.end.55

if.end.55:                                        ; preds = %if.end.54, %if.end
  %43 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags56 = getelementptr inbounds %struct.sv, %struct.sv* %43, i32 0, i32 2
  %44 = load i32, i32* %sv_flags56, align 4
  %and57 = and i32 %44, 9961472
  %tobool58 = icmp ne i32 %and57, 0
  br i1 %tobool58, label %if.then.59, label %if.end.138

if.then.59:                                       ; preds = %if.end.55
  %45 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags60 = getelementptr inbounds %struct.sv, %struct.sv* %45, i32 0, i32 2
  %46 = load i32, i32* %sv_flags60, align 4
  %and61 = and i32 %46, 524288
  %tobool62 = icmp ne i32 %and61, 0
  br i1 %tobool62, label %if.then.63, label %if.end.90

if.then.63:                                       ; preds = %if.then.59
  %47 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags64 = getelementptr inbounds %struct.sv, %struct.sv* %47, i32 0, i32 2
  %48 = load i32, i32* %sv_flags64, align 4
  %and65 = and i32 %48, 268435456
  %tobool66 = icmp ne i32 %and65, 0
  br i1 %tobool66, label %land.lhs.true.67, label %if.end.87

land.lhs.true.67:                                 ; preds = %if.then.63
  %49 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call68 = call %struct.sv* @Perl_amagic_call(%struct.sv* %49, %struct.sv* @PL_sv_undef, i32 5, i32 9)
  store %struct.sv* %call68, %struct.sv** %tmpstr, align 8
  %tobool69 = icmp ne %struct.sv* %call68, null
  br i1 %tobool69, label %land.lhs.true.70, label %if.end.87

land.lhs.true.70:                                 ; preds = %land.lhs.true.67
  %50 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_flags71 = getelementptr inbounds %struct.sv, %struct.sv* %50, i32 0, i32 2
  %51 = load i32, i32* %sv_flags71, align 4
  %and72 = and i32 %51, 524288
  %tobool73 = icmp ne i32 %and72, 0
  br i1 %tobool73, label %lor.lhs.false.74, label %if.then.80

lor.lhs.false.74:                                 ; preds = %land.lhs.true.70
  %52 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_any75 = getelementptr inbounds %struct.sv, %struct.sv* %52, i32 0, i32 0
  %53 = load i8*, i8** %sv_any75, align 8
  %54 = bitcast i8* %53 to %struct.xrv*
  %xrv_rv = getelementptr inbounds %struct.xrv, %struct.xrv* %54, i32 0, i32 0
  %55 = load %struct.sv*, %struct.sv** %xrv_rv, align 8
  %56 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any76 = getelementptr inbounds %struct.sv, %struct.sv* %56, i32 0, i32 0
  %57 = load i8*, i8** %sv_any76, align 8
  %58 = bitcast i8* %57 to %struct.xrv*
  %xrv_rv77 = getelementptr inbounds %struct.xrv, %struct.xrv* %58, i32 0, i32 0
  %59 = load %struct.sv*, %struct.sv** %xrv_rv77, align 8
  %cmp78 = icmp ne %struct.sv* %55, %59
  br i1 %cmp78, label %if.then.80, label %if.end.87

if.then.80:                                       ; preds = %lor.lhs.false.74, %land.lhs.true.70
  %60 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_flags81 = getelementptr inbounds %struct.sv, %struct.sv* %60, i32 0, i32 2
  %61 = load i32, i32* %sv_flags81, align 4
  %and82 = and i32 %61, 65536
  %tobool83 = icmp ne i32 %and82, 0
  br i1 %tobool83, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.80
  %62 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_any84 = getelementptr inbounds %struct.sv, %struct.sv* %62, i32 0, i32 0
  %63 = load i8*, i8** %sv_any84, align 8
  %64 = bitcast i8* %63 to %struct.xpvuv*
  %xuv_uv85 = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %64, i32 0, i32 3
  %65 = load i64, i64* %xuv_uv85, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then.80
  %66 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %call86 = call i64 @Perl_sv_2uv(%struct.sv* %66)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %65, %cond.true ], [ %call86, %cond.false ]
  store i64 %cond, i64* %retval
  br label %return

if.end.87:                                        ; preds = %lor.lhs.false.74, %land.lhs.true.67, %if.then.63
  %67 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any88 = getelementptr inbounds %struct.sv, %struct.sv* %67, i32 0, i32 0
  %68 = load i8*, i8** %sv_any88, align 8
  %69 = bitcast i8* %68 to %struct.xrv*
  %xrv_rv89 = getelementptr inbounds %struct.xrv, %struct.xrv* %69, i32 0, i32 0
  %70 = load %struct.sv*, %struct.sv** %xrv_rv89, align 8
  %71 = ptrtoint %struct.sv* %70 to i64
  store i64 %71, i64* %retval
  br label %return

if.end.90:                                        ; preds = %if.then.59
  %72 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags91 = getelementptr inbounds %struct.sv, %struct.sv* %72, i32 0, i32 2
  %73 = load i32, i32* %sv_flags91, align 4
  %and92 = and i32 %73, 8388608
  %tobool93 = icmp ne i32 %and92, 0
  br i1 %tobool93, label %land.lhs.true.94, label %if.end.99

land.lhs.true.94:                                 ; preds = %if.end.90
  %74 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags95 = getelementptr inbounds %struct.sv, %struct.sv* %74, i32 0, i32 2
  %75 = load i32, i32* %sv_flags95, align 4
  %and96 = and i32 %75, 1048576
  %tobool97 = icmp ne i32 %and96, 0
  br i1 %tobool97, label %if.then.98, label %if.end.99

if.then.98:                                       ; preds = %land.lhs.true.94
  %76 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_force_normal(%struct.sv* %76)
  br label %if.end.99

if.end.99:                                        ; preds = %if.then.98, %land.lhs.true.94, %if.end.90
  %77 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags100 = getelementptr inbounds %struct.sv, %struct.sv* %77, i32 0, i32 2
  %78 = load i32, i32* %sv_flags100, align 4
  %and101 = and i32 %78, 8388608
  %tobool102 = icmp ne i32 %and101, 0
  br i1 %tobool102, label %land.lhs.true.103, label %if.end.137

land.lhs.true.103:                                ; preds = %if.end.99
  %79 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags104 = getelementptr inbounds %struct.sv, %struct.sv* %79, i32 0, i32 2
  %80 = load i32, i32* %sv_flags104, align 4
  %and105 = and i32 %80, 118423552
  %tobool106 = icmp ne i32 %and105, 0
  br i1 %tobool106, label %if.end.137, label %if.then.107

if.then.107:                                      ; preds = %land.lhs.true.103
  %81 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings108 = getelementptr inbounds %struct.cop, %struct.cop* %81, i32 0, i32 14
  %82 = load %struct.sv*, %struct.sv** %cop_warnings108, align 8
  %cmp109 = icmp ne %struct.sv* %82, null
  br i1 %cmp109, label %land.lhs.true.111, label %lor.lhs.false.127

land.lhs.true.111:                                ; preds = %if.then.107
  %83 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings112 = getelementptr inbounds %struct.cop, %struct.cop* %83, i32 0, i32 14
  %84 = load %struct.sv*, %struct.sv** %cop_warnings112, align 8
  %cmp113 = icmp ne %struct.sv* %84, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 2)
  br i1 %cmp113, label %land.lhs.true.115, label %lor.lhs.false.127

land.lhs.true.115:                                ; preds = %land.lhs.true.111
  %85 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings116 = getelementptr inbounds %struct.cop, %struct.cop* %85, i32 0, i32 14
  %86 = load %struct.sv*, %struct.sv** %cop_warnings116, align 8
  %cmp117 = icmp eq %struct.sv* %86, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 1)
  br i1 %cmp117, label %if.then.135, label %lor.lhs.false.119

lor.lhs.false.119:                                ; preds = %land.lhs.true.115
  %87 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings120 = getelementptr inbounds %struct.cop, %struct.cop* %87, i32 0, i32 14
  %88 = load %struct.sv*, %struct.sv** %cop_warnings120, align 8
  %sv_any121 = getelementptr inbounds %struct.sv, %struct.sv* %88, i32 0, i32 0
  %89 = load i8*, i8** %sv_any121, align 8
  %90 = bitcast i8* %89 to %struct.xpv*
  %xpv_pv122 = getelementptr inbounds %struct.xpv, %struct.xpv* %90, i32 0, i32 0
  %91 = load i8*, i8** %xpv_pv122, align 8
  %arrayidx123 = getelementptr inbounds i8, i8* %91, i64 10
  %92 = load i8, i8* %arrayidx123, align 1
  %conv124 = sext i8 %92 to i32
  %and125 = and i32 %conv124, 4
  %tobool126 = icmp ne i32 %and125, 0
  br i1 %tobool126, label %if.then.135, label %lor.lhs.false.127

lor.lhs.false.127:                                ; preds = %lor.lhs.false.119, %land.lhs.true.111, %if.then.107
  %93 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings128 = getelementptr inbounds %struct.cop, %struct.cop* %93, i32 0, i32 14
  %94 = load %struct.sv*, %struct.sv** %cop_warnings128, align 8
  %cmp129 = icmp eq %struct.sv* %94, null
  br i1 %cmp129, label %land.lhs.true.131, label %if.end.136

land.lhs.true.131:                                ; preds = %lor.lhs.false.127
  %95 = load i8, i8* @PL_dowarn, align 1
  %conv132 = zext i8 %95 to i32
  %and133 = and i32 %conv132, 1
  %tobool134 = icmp ne i32 %and133, 0
  br i1 %tobool134, label %if.then.135, label %if.end.136

if.then.135:                                      ; preds = %land.lhs.true.131, %lor.lhs.false.119, %land.lhs.true.115
  call void @Perl_report_uninit()
  br label %if.end.136

if.end.136:                                       ; preds = %if.then.135, %land.lhs.true.131, %lor.lhs.false.127
  store i64 0, i64* %retval
  br label %return

if.end.137:                                       ; preds = %land.lhs.true.103, %if.end.99
  br label %if.end.138

if.end.138:                                       ; preds = %if.end.137, %if.end.55
  %96 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags139 = getelementptr inbounds %struct.sv, %struct.sv* %96, i32 0, i32 2
  %97 = load i32, i32* %sv_flags139, align 4
  %and140 = and i32 %97, 16777216
  %tobool141 = icmp ne i32 %and140, 0
  br i1 %tobool141, label %if.then.142, label %if.end.150

if.then.142:                                      ; preds = %if.end.138
  %98 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags143 = getelementptr inbounds %struct.sv, %struct.sv* %98, i32 0, i32 2
  %99 = load i32, i32* %sv_flags143, align 4
  %and144 = and i32 %99, -2147483648
  %tobool145 = icmp ne i32 %and144, 0
  br i1 %tobool145, label %if.then.146, label %if.else

if.then.146:                                      ; preds = %if.then.142
  %100 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any147 = getelementptr inbounds %struct.sv, %struct.sv* %100, i32 0, i32 0
  %101 = load i8*, i8** %sv_any147, align 8
  %102 = bitcast i8* %101 to %struct.xpvuv*
  %xuv_uv148 = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %102, i32 0, i32 3
  %103 = load i64, i64* %xuv_uv148, align 8
  store i64 %103, i64* %retval
  br label %return

if.else:                                          ; preds = %if.then.142
  %104 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any149 = getelementptr inbounds %struct.sv, %struct.sv* %104, i32 0, i32 0
  %105 = load i8*, i8** %sv_any149, align 8
  %106 = bitcast i8* %105 to %struct.xpviv*
  %xiv_iv = getelementptr inbounds %struct.xpviv, %struct.xpviv* %106, i32 0, i32 3
  %107 = load i64, i64* %xiv_iv, align 8
  store i64 %107, i64* %retval
  br label %return

if.end.150:                                       ; preds = %if.end.138
  %108 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags151 = getelementptr inbounds %struct.sv, %struct.sv* %108, i32 0, i32 2
  %109 = load i32, i32* %sv_flags151, align 4
  %and152 = and i32 %109, 33554432
  %tobool153 = icmp ne i32 %and152, 0
  br i1 %tobool153, label %if.then.154, label %if.else.246

if.then.154:                                      ; preds = %if.end.150
  %110 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags155 = getelementptr inbounds %struct.sv, %struct.sv* %110, i32 0, i32 2
  %111 = load i32, i32* %sv_flags155, align 4
  %and156 = and i32 %111, 255
  %cmp157 = icmp eq i32 %and156, 2
  br i1 %cmp157, label %if.then.159, label %if.end.161

if.then.159:                                      ; preds = %if.then.154
  %112 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call160 = call signext i8 @Perl_sv_upgrade(%struct.sv* %112, i32 6)
  br label %if.end.161

if.end.161:                                       ; preds = %if.then.159, %if.then.154
  %113 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags162 = getelementptr inbounds %struct.sv, %struct.sv* %113, i32 0, i32 2
  %114 = load i32, i32* %sv_flags162, align 4
  %and163 = and i32 %114, 2097152
  %tobool164 = icmp ne i32 %and163, 0
  br i1 %tobool164, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.end.161
  %115 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call165 = call i32 @Perl_sv_backoff(%struct.sv* %115)
  %tobool166 = icmp ne i32 %call165, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end.161
  %116 = phi i1 [ false, %if.end.161 ], [ %tobool166, %land.rhs ]
  %land.ext = zext i1 %116 to i32
  %117 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags167 = getelementptr inbounds %struct.sv, %struct.sv* %117, i32 0, i32 2
  %118 = load i32, i32* %sv_flags167, align 4
  %or = or i32 %118, 16777216
  store i32 %or, i32* %sv_flags167, align 4
  %119 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any168 = getelementptr inbounds %struct.sv, %struct.sv* %119, i32 0, i32 0
  %120 = load i8*, i8** %sv_any168, align 8
  %121 = bitcast i8* %120 to %struct.xpvnv*
  %xnv_nv169 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %121, i32 0, i32 4
  %122 = load double, double* %xnv_nv169, align 8
  %cmp170 = fcmp olt double %122, 0x43E0000000000000
  br i1 %cmp170, label %if.then.172, label %if.else.213

if.then.172:                                      ; preds = %land.end
  %123 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any173 = getelementptr inbounds %struct.sv, %struct.sv* %123, i32 0, i32 0
  %124 = load i8*, i8** %sv_any173, align 8
  %125 = bitcast i8* %124 to %struct.xpvnv*
  %xnv_nv174 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %125, i32 0, i32 4
  %126 = load double, double* %xnv_nv174, align 8
  %call175 = call i64 @Perl_cast_iv(double %126)
  %127 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any176 = getelementptr inbounds %struct.sv, %struct.sv* %127, i32 0, i32 0
  %128 = load i8*, i8** %sv_any176, align 8
  %129 = bitcast i8* %128 to %struct.xpviv*
  %xiv_iv177 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %129, i32 0, i32 3
  store i64 %call175, i64* %xiv_iv177, align 8
  %130 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any178 = getelementptr inbounds %struct.sv, %struct.sv* %130, i32 0, i32 0
  %131 = load i8*, i8** %sv_any178, align 8
  %132 = bitcast i8* %131 to %struct.xpvnv*
  %xnv_nv179 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %132, i32 0, i32 4
  %133 = load double, double* %xnv_nv179, align 8
  %134 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any180 = getelementptr inbounds %struct.sv, %struct.sv* %134, i32 0, i32 0
  %135 = load i8*, i8** %sv_any180, align 8
  %136 = bitcast i8* %135 to %struct.xpviv*
  %xiv_iv181 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %136, i32 0, i32 3
  %137 = load i64, i64* %xiv_iv181, align 8
  %conv182 = sitofp i64 %137 to double
  %cmp183 = fcmp oeq double %133, %conv182
  br i1 %cmp183, label %land.lhs.true.185, label %if.else.211

land.lhs.true.185:                                ; preds = %if.then.172
  %138 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any186 = getelementptr inbounds %struct.sv, %struct.sv* %138, i32 0, i32 0
  %139 = load i8*, i8** %sv_any186, align 8
  %140 = bitcast i8* %139 to %struct.xpviv*
  %xiv_iv187 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %140, i32 0, i32 3
  %141 = load i64, i64* %xiv_iv187, align 8
  %cmp188 = icmp sgt i64 %141, 0
  br i1 %cmp188, label %cond.true.190, label %cond.false.193

cond.true.190:                                    ; preds = %land.lhs.true.185
  %142 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any191 = getelementptr inbounds %struct.sv, %struct.sv* %142, i32 0, i32 0
  %143 = load i8*, i8** %sv_any191, align 8
  %144 = bitcast i8* %143 to %struct.xpviv*
  %xiv_iv192 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %144, i32 0, i32 3
  %145 = load i64, i64* %xiv_iv192, align 8
  br label %cond.end.196

cond.false.193:                                   ; preds = %land.lhs.true.185
  %146 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any194 = getelementptr inbounds %struct.sv, %struct.sv* %146, i32 0, i32 0
  %147 = load i8*, i8** %sv_any194, align 8
  %148 = bitcast i8* %147 to %struct.xpviv*
  %xiv_iv195 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %148, i32 0, i32 3
  %149 = load i64, i64* %xiv_iv195, align 8
  %sub = sub nsw i64 0, %149
  br label %cond.end.196

cond.end.196:                                     ; preds = %cond.false.193, %cond.true.190
  %cond197 = phi i64 [ %145, %cond.true.190 ], [ %sub, %cond.false.193 ]
  %cmp198 = icmp ugt i64 4294967296, %cond197
  br i1 %cmp198, label %if.then.200, label %if.else.211

if.then.200:                                      ; preds = %cond.end.196
  %150 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags201 = getelementptr inbounds %struct.sv, %struct.sv* %150, i32 0, i32 2
  %151 = load i32, i32* %sv_flags201, align 4
  %and202 = and i32 %151, 2097152
  %tobool203 = icmp ne i32 %and202, 0
  br i1 %tobool203, label %land.rhs.204, label %land.end.207

land.rhs.204:                                     ; preds = %if.then.200
  %152 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call205 = call i32 @Perl_sv_backoff(%struct.sv* %152)
  %tobool206 = icmp ne i32 %call205, 0
  br label %land.end.207

land.end.207:                                     ; preds = %land.rhs.204, %if.then.200
  %153 = phi i1 [ false, %if.then.200 ], [ %tobool206, %land.rhs.204 ]
  %land.ext208 = zext i1 %153 to i32
  %154 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags209 = getelementptr inbounds %struct.sv, %struct.sv* %154, i32 0, i32 2
  %155 = load i32, i32* %sv_flags209, align 4
  %or210 = or i32 %155, 16842752
  store i32 %or210, i32* %sv_flags209, align 4
  br label %if.end.212

if.else.211:                                      ; preds = %cond.end.196, %if.then.172
  br label %if.end.212

if.end.212:                                       ; preds = %if.else.211, %land.end.207
  br label %if.end.245

if.else.213:                                      ; preds = %land.end
  %156 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any214 = getelementptr inbounds %struct.sv, %struct.sv* %156, i32 0, i32 0
  %157 = load i8*, i8** %sv_any214, align 8
  %158 = bitcast i8* %157 to %struct.xpvnv*
  %xnv_nv215 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %158, i32 0, i32 4
  %159 = load double, double* %xnv_nv215, align 8
  %call216 = call i64 @Perl_cast_uv(double %159)
  %160 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any217 = getelementptr inbounds %struct.sv, %struct.sv* %160, i32 0, i32 0
  %161 = load i8*, i8** %sv_any217, align 8
  %162 = bitcast i8* %161 to %struct.xpvuv*
  %xuv_uv218 = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %162, i32 0, i32 3
  store i64 %call216, i64* %xuv_uv218, align 8
  %163 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any219 = getelementptr inbounds %struct.sv, %struct.sv* %163, i32 0, i32 0
  %164 = load i8*, i8** %sv_any219, align 8
  %165 = bitcast i8* %164 to %struct.xpvnv*
  %xnv_nv220 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %165, i32 0, i32 4
  %166 = load double, double* %xnv_nv220, align 8
  %167 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any221 = getelementptr inbounds %struct.sv, %struct.sv* %167, i32 0, i32 0
  %168 = load i8*, i8** %sv_any221, align 8
  %169 = bitcast i8* %168 to %struct.xpvuv*
  %xuv_uv222 = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %169, i32 0, i32 3
  %170 = load i64, i64* %xuv_uv222, align 8
  %conv223 = uitofp i64 %170 to double
  %cmp224 = fcmp oeq double %166, %conv223
  br i1 %cmp224, label %land.lhs.true.226, label %if.end.242

land.lhs.true.226:                                ; preds = %if.else.213
  %171 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any227 = getelementptr inbounds %struct.sv, %struct.sv* %171, i32 0, i32 0
  %172 = load i8*, i8** %sv_any227, align 8
  %173 = bitcast i8* %172 to %struct.xpvuv*
  %xuv_uv228 = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %173, i32 0, i32 3
  %174 = load i64, i64* %xuv_uv228, align 8
  %cmp229 = icmp ugt i64 4294967296, %174
  br i1 %cmp229, label %if.then.231, label %if.end.242

if.then.231:                                      ; preds = %land.lhs.true.226
  %175 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags232 = getelementptr inbounds %struct.sv, %struct.sv* %175, i32 0, i32 2
  %176 = load i32, i32* %sv_flags232, align 4
  %and233 = and i32 %176, 2097152
  %tobool234 = icmp ne i32 %and233, 0
  br i1 %tobool234, label %land.rhs.235, label %land.end.238

land.rhs.235:                                     ; preds = %if.then.231
  %177 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call236 = call i32 @Perl_sv_backoff(%struct.sv* %177)
  %tobool237 = icmp ne i32 %call236, 0
  br label %land.end.238

land.end.238:                                     ; preds = %land.rhs.235, %if.then.231
  %178 = phi i1 [ false, %if.then.231 ], [ %tobool237, %land.rhs.235 ]
  %land.ext239 = zext i1 %178 to i32
  %179 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags240 = getelementptr inbounds %struct.sv, %struct.sv* %179, i32 0, i32 2
  %180 = load i32, i32* %sv_flags240, align 4
  %or241 = or i32 %180, 16842752
  store i32 %or241, i32* %sv_flags240, align 4
  br label %if.end.242

if.end.242:                                       ; preds = %land.end.238, %land.lhs.true.226, %if.else.213
  %181 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags243 = getelementptr inbounds %struct.sv, %struct.sv* %181, i32 0, i32 2
  %182 = load i32, i32* %sv_flags243, align 4
  %or244 = or i32 %182, -2147483648
  store i32 %or244, i32* %sv_flags243, align 4
  br label %if.end.245

if.end.245:                                       ; preds = %if.end.242, %if.end.212
  br label %if.end.528

if.else.246:                                      ; preds = %if.end.150
  %183 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags247 = getelementptr inbounds %struct.sv, %struct.sv* %183, i32 0, i32 2
  %184 = load i32, i32* %sv_flags247, align 4
  %and248 = and i32 %184, 67108864
  %tobool249 = icmp ne i32 %and248, 0
  br i1 %tobool249, label %land.lhs.true.250, label %if.else.483

land.lhs.true.250:                                ; preds = %if.else.246
  %185 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any251 = getelementptr inbounds %struct.sv, %struct.sv* %185, i32 0, i32 0
  %186 = load i8*, i8** %sv_any251, align 8
  %187 = bitcast i8* %186 to %struct.xpv*
  %xpv_len252 = getelementptr inbounds %struct.xpv, %struct.xpv* %187, i32 0, i32 2
  %188 = load i64, i64* %xpv_len252, align 8
  %tobool253 = icmp ne i64 %188, 0
  br i1 %tobool253, label %if.then.254, label %if.else.483

if.then.254:                                      ; preds = %land.lhs.true.250
  %189 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any255 = getelementptr inbounds %struct.sv, %struct.sv* %189, i32 0, i32 0
  %190 = load i8*, i8** %sv_any255, align 8
  %191 = bitcast i8* %190 to %struct.xpv*
  %xpv_pv256 = getelementptr inbounds %struct.xpv, %struct.xpv* %191, i32 0, i32 0
  %192 = load i8*, i8** %xpv_pv256, align 8
  %193 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any257 = getelementptr inbounds %struct.sv, %struct.sv* %193, i32 0, i32 0
  %194 = load i8*, i8** %sv_any257, align 8
  %195 = bitcast i8* %194 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %195, i32 0, i32 1
  %196 = load i64, i64* %xpv_cur, align 8
  %call258 = call i32 @Perl_grok_number(i8* %192, i64 %196, i64* %value)
  store i32 %call258, i32* %numtype, align 4
  %197 = load i32, i32* %numtype, align 4
  %and259 = and i32 %197, 5
  %cmp260 = icmp eq i32 %and259, 1
  br i1 %cmp260, label %if.then.262, label %if.else.280

if.then.262:                                      ; preds = %if.then.254
  %198 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags263 = getelementptr inbounds %struct.sv, %struct.sv* %198, i32 0, i32 2
  %199 = load i32, i32* %sv_flags263, align 4
  %and264 = and i32 %199, 255
  %cmp265 = icmp ult i32 %and264, 5
  br i1 %cmp265, label %if.then.267, label %if.end.269

if.then.267:                                      ; preds = %if.then.262
  %200 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call268 = call signext i8 @Perl_sv_upgrade(%struct.sv* %200, i32 5)
  br label %if.end.269

if.end.269:                                       ; preds = %if.then.267, %if.then.262
  %201 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags270 = getelementptr inbounds %struct.sv, %struct.sv* %201, i32 0, i32 2
  %202 = load i32, i32* %sv_flags270, align 4
  %and271 = and i32 %202, 2097152
  %tobool272 = icmp ne i32 %and271, 0
  br i1 %tobool272, label %land.rhs.273, label %land.end.276

land.rhs.273:                                     ; preds = %if.end.269
  %203 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call274 = call i32 @Perl_sv_backoff(%struct.sv* %203)
  %tobool275 = icmp ne i32 %call274, 0
  br label %land.end.276

land.end.276:                                     ; preds = %land.rhs.273, %if.end.269
  %204 = phi i1 [ false, %if.end.269 ], [ %tobool275, %land.rhs.273 ]
  %land.ext277 = zext i1 %204 to i32
  %205 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags278 = getelementptr inbounds %struct.sv, %struct.sv* %205, i32 0, i32 2
  %206 = load i32, i32* %sv_flags278, align 4
  %or279 = or i32 %206, 16842752
  store i32 %or279, i32* %sv_flags278, align 4
  br label %if.end.288

if.else.280:                                      ; preds = %if.then.254
  %207 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags281 = getelementptr inbounds %struct.sv, %struct.sv* %207, i32 0, i32 2
  %208 = load i32, i32* %sv_flags281, align 4
  %and282 = and i32 %208, 255
  %cmp283 = icmp ult i32 %and282, 6
  br i1 %cmp283, label %if.then.285, label %if.end.287

if.then.285:                                      ; preds = %if.else.280
  %209 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call286 = call signext i8 @Perl_sv_upgrade(%struct.sv* %209, i32 6)
  br label %if.end.287

if.end.287:                                       ; preds = %if.then.285, %if.else.280
  br label %if.end.288

if.end.288:                                       ; preds = %if.end.287, %land.end.276
  %210 = load i32, i32* %numtype, align 4
  %and289 = and i32 %210, 1
  %cmp290 = icmp eq i32 %and289, 1
  br i1 %cmp290, label %if.then.292, label %if.end.354

if.then.292:                                      ; preds = %if.end.288
  %211 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags293 = getelementptr inbounds %struct.sv, %struct.sv* %211, i32 0, i32 2
  %212 = load i32, i32* %sv_flags293, align 4
  %and294 = and i32 %212, 2097152
  %tobool295 = icmp ne i32 %and294, 0
  br i1 %tobool295, label %land.rhs.296, label %land.end.299

land.rhs.296:                                     ; preds = %if.then.292
  %213 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call297 = call i32 @Perl_sv_backoff(%struct.sv* %213)
  %tobool298 = icmp ne i32 %call297, 0
  br label %land.end.299

land.end.299:                                     ; preds = %land.rhs.296, %if.then.292
  %214 = phi i1 [ false, %if.then.292 ], [ %tobool298, %land.rhs.296 ]
  %land.ext300 = zext i1 %214 to i32
  %215 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags301 = getelementptr inbounds %struct.sv, %struct.sv* %215, i32 0, i32 2
  %216 = load i32, i32* %sv_flags301, align 4
  %or302 = or i32 %216, 16777216
  store i32 %or302, i32* %sv_flags301, align 4
  %217 = load i32, i32* %numtype, align 4
  %and303 = and i32 %217, 8
  %tobool304 = icmp ne i32 %and303, 0
  br i1 %tobool304, label %if.else.317, label %if.then.305

if.then.305:                                      ; preds = %land.end.299
  %218 = load i64, i64* %value, align 8
  %cmp306 = icmp ule i64 %218, 9223372036854775807
  br i1 %cmp306, label %if.then.308, label %if.else.311

if.then.308:                                      ; preds = %if.then.305
  %219 = load i64, i64* %value, align 8
  %220 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any309 = getelementptr inbounds %struct.sv, %struct.sv* %220, i32 0, i32 0
  %221 = load i8*, i8** %sv_any309, align 8
  %222 = bitcast i8* %221 to %struct.xpviv*
  %xiv_iv310 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %222, i32 0, i32 3
  store i64 %219, i64* %xiv_iv310, align 8
  br label %if.end.316

if.else.311:                                      ; preds = %if.then.305
  %223 = load i64, i64* %value, align 8
  %224 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any312 = getelementptr inbounds %struct.sv, %struct.sv* %224, i32 0, i32 0
  %225 = load i8*, i8** %sv_any312, align 8
  %226 = bitcast i8* %225 to %struct.xpvuv*
  %xuv_uv313 = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %226, i32 0, i32 3
  store i64 %223, i64* %xuv_uv313, align 8
  %227 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags314 = getelementptr inbounds %struct.sv, %struct.sv* %227, i32 0, i32 2
  %228 = load i32, i32* %sv_flags314, align 4
  %or315 = or i32 %228, -2147483648
  store i32 %or315, i32* %sv_flags314, align 4
  br label %if.end.316

if.end.316:                                       ; preds = %if.else.311, %if.then.308
  br label %if.end.353

if.else.317:                                      ; preds = %land.end.299
  %229 = load i64, i64* %value, align 8
  %cmp318 = icmp ule i64 %229, -9223372036854775808
  br i1 %cmp318, label %if.then.320, label %if.else.324

if.then.320:                                      ; preds = %if.else.317
  %230 = load i64, i64* %value, align 8
  %sub321 = sub nsw i64 0, %230
  %231 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any322 = getelementptr inbounds %struct.sv, %struct.sv* %231, i32 0, i32 0
  %232 = load i8*, i8** %sv_any322, align 8
  %233 = bitcast i8* %232 to %struct.xpviv*
  %xiv_iv323 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %233, i32 0, i32 3
  store i64 %sub321, i64* %xiv_iv323, align 8
  br label %if.end.352

if.else.324:                                      ; preds = %if.else.317
  %234 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags325 = getelementptr inbounds %struct.sv, %struct.sv* %234, i32 0, i32 2
  %235 = load i32, i32* %sv_flags325, align 4
  %and326 = and i32 %235, 255
  %cmp327 = icmp ult i32 %and326, 6
  br i1 %cmp327, label %if.then.329, label %if.end.331

if.then.329:                                      ; preds = %if.else.324
  %236 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call330 = call signext i8 @Perl_sv_upgrade(%struct.sv* %236, i32 6)
  br label %if.end.331

if.end.331:                                       ; preds = %if.then.329, %if.else.324
  %237 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags332 = getelementptr inbounds %struct.sv, %struct.sv* %237, i32 0, i32 2
  %238 = load i32, i32* %sv_flags332, align 4
  %or333 = or i32 %238, 33685504
  store i32 %or333, i32* %sv_flags332, align 4
  %239 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags334 = getelementptr inbounds %struct.sv, %struct.sv* %239, i32 0, i32 2
  %240 = load i32, i32* %sv_flags334, align 4
  %and335 = and i32 %240, 2130640895
  store i32 %and335, i32* %sv_flags334, align 4
  %241 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags336 = getelementptr inbounds %struct.sv, %struct.sv* %241, i32 0, i32 2
  %242 = load i32, i32* %sv_flags336, align 4
  %and337 = and i32 %242, 2097152
  %tobool338 = icmp ne i32 %and337, 0
  br i1 %tobool338, label %land.rhs.339, label %land.end.342

land.rhs.339:                                     ; preds = %if.end.331
  %243 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call340 = call i32 @Perl_sv_backoff(%struct.sv* %243)
  %tobool341 = icmp ne i32 %call340, 0
  br label %land.end.342

land.end.342:                                     ; preds = %land.rhs.339, %if.end.331
  %244 = phi i1 [ false, %if.end.331 ], [ %tobool341, %land.rhs.339 ]
  %land.ext343 = zext i1 %244 to i32
  %245 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags344 = getelementptr inbounds %struct.sv, %struct.sv* %245, i32 0, i32 2
  %246 = load i32, i32* %sv_flags344, align 4
  %or345 = or i32 %246, 16777216
  store i32 %or345, i32* %sv_flags344, align 4
  %247 = load i64, i64* %value, align 8
  %conv346 = uitofp i64 %247 to double
  %sub347 = fsub double -0.000000e+00, %conv346
  %248 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any348 = getelementptr inbounds %struct.sv, %struct.sv* %248, i32 0, i32 0
  %249 = load i8*, i8** %sv_any348, align 8
  %250 = bitcast i8* %249 to %struct.xpvnv*
  %xnv_nv349 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %250, i32 0, i32 4
  store double %sub347, double* %xnv_nv349, align 8
  %251 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any350 = getelementptr inbounds %struct.sv, %struct.sv* %251, i32 0, i32 0
  %252 = load i8*, i8** %sv_any350, align 8
  %253 = bitcast i8* %252 to %struct.xpviv*
  %xiv_iv351 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %253, i32 0, i32 3
  store i64 -9223372036854775808, i64* %xiv_iv351, align 8
  br label %if.end.352

if.end.352:                                       ; preds = %land.end.342, %if.then.320
  br label %if.end.353

if.end.353:                                       ; preds = %if.end.352, %if.end.316
  br label %if.end.354

if.end.354:                                       ; preds = %if.end.353, %if.end.288
  %254 = load i32, i32* %numtype, align 4
  %and355 = and i32 %254, 5
  %cmp356 = icmp ne i32 %and355, 1
  br i1 %cmp356, label %if.then.358, label %if.end.482

if.then.358:                                      ; preds = %if.end.354
  %255 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any359 = getelementptr inbounds %struct.sv, %struct.sv* %255, i32 0, i32 0
  %256 = load i8*, i8** %sv_any359, align 8
  %257 = bitcast i8* %256 to %struct.xpv*
  %xpv_pv360 = getelementptr inbounds %struct.xpv, %struct.xpv* %257, i32 0, i32 0
  %258 = load i8*, i8** %xpv_pv360, align 8
  %call361 = call double @Perl_my_atof(i8* %258)
  %259 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any362 = getelementptr inbounds %struct.sv, %struct.sv* %259, i32 0, i32 0
  %260 = load i8*, i8** %sv_any362, align 8
  %261 = bitcast i8* %260 to %struct.xpvnv*
  %xnv_nv363 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %261, i32 0, i32 4
  store double %call361, double* %xnv_nv363, align 8
  %262 = load i32, i32* %numtype, align 4
  %tobool364 = icmp ne i32 %262, 0
  br i1 %tobool364, label %if.end.394, label %land.lhs.true.365

land.lhs.true.365:                                ; preds = %if.then.358
  %263 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings366 = getelementptr inbounds %struct.cop, %struct.cop* %263, i32 0, i32 14
  %264 = load %struct.sv*, %struct.sv** %cop_warnings366, align 8
  %cmp367 = icmp ne %struct.sv* %264, null
  br i1 %cmp367, label %land.lhs.true.369, label %lor.lhs.false.385

land.lhs.true.369:                                ; preds = %land.lhs.true.365
  %265 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings370 = getelementptr inbounds %struct.cop, %struct.cop* %265, i32 0, i32 14
  %266 = load %struct.sv*, %struct.sv** %cop_warnings370, align 8
  %cmp371 = icmp ne %struct.sv* %266, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 2)
  br i1 %cmp371, label %land.lhs.true.373, label %lor.lhs.false.385

land.lhs.true.373:                                ; preds = %land.lhs.true.369
  %267 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings374 = getelementptr inbounds %struct.cop, %struct.cop* %267, i32 0, i32 14
  %268 = load %struct.sv*, %struct.sv** %cop_warnings374, align 8
  %cmp375 = icmp eq %struct.sv* %268, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 1)
  br i1 %cmp375, label %if.then.393, label %lor.lhs.false.377

lor.lhs.false.377:                                ; preds = %land.lhs.true.373
  %269 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings378 = getelementptr inbounds %struct.cop, %struct.cop* %269, i32 0, i32 14
  %270 = load %struct.sv*, %struct.sv** %cop_warnings378, align 8
  %sv_any379 = getelementptr inbounds %struct.sv, %struct.sv* %270, i32 0, i32 0
  %271 = load i8*, i8** %sv_any379, align 8
  %272 = bitcast i8* %271 to %struct.xpv*
  %xpv_pv380 = getelementptr inbounds %struct.xpv, %struct.xpv* %272, i32 0, i32 0
  %273 = load i8*, i8** %xpv_pv380, align 8
  %arrayidx381 = getelementptr inbounds i8, i8* %273, i64 3
  %274 = load i8, i8* %arrayidx381, align 1
  %conv382 = sext i8 %274 to i32
  %and383 = and i32 %conv382, 4
  %tobool384 = icmp ne i32 %and383, 0
  br i1 %tobool384, label %if.then.393, label %lor.lhs.false.385

lor.lhs.false.385:                                ; preds = %lor.lhs.false.377, %land.lhs.true.369, %land.lhs.true.365
  %275 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings386 = getelementptr inbounds %struct.cop, %struct.cop* %275, i32 0, i32 14
  %276 = load %struct.sv*, %struct.sv** %cop_warnings386, align 8
  %cmp387 = icmp eq %struct.sv* %276, null
  br i1 %cmp387, label %land.lhs.true.389, label %if.end.394

land.lhs.true.389:                                ; preds = %lor.lhs.false.385
  %277 = load i8, i8* @PL_dowarn, align 1
  %conv390 = zext i8 %277 to i32
  %and391 = and i32 %conv390, 1
  %tobool392 = icmp ne i32 %and391, 0
  br i1 %tobool392, label %if.then.393, label %if.end.394

if.then.393:                                      ; preds = %land.lhs.true.389, %lor.lhs.false.377, %land.lhs.true.373
  %278 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @S_not_a_number(%struct.sv* %278)
  br label %if.end.394

if.end.394:                                       ; preds = %if.then.393, %land.lhs.true.389, %lor.lhs.false.385, %if.then.358
  %279 = load i32, i32* %numtype, align 4
  %and395 = and i32 %279, 5
  %cmp396 = icmp eq i32 %and395, 5
  br i1 %cmp396, label %if.then.398, label %if.else.401

if.then.398:                                      ; preds = %if.end.394
  %280 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags399 = getelementptr inbounds %struct.sv, %struct.sv* %280, i32 0, i32 2
  %281 = load i32, i32* %sv_flags399, align 4
  %or400 = or i32 %281, 33685504
  store i32 %or400, i32* %sv_flags399, align 4
  br label %if.end.481

if.else.401:                                      ; preds = %if.end.394
  %282 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any402 = getelementptr inbounds %struct.sv, %struct.sv* %282, i32 0, i32 0
  %283 = load i8*, i8** %sv_any402, align 8
  %284 = bitcast i8* %283 to %struct.xpvnv*
  %xnv_nv403 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %284, i32 0, i32 4
  %285 = load double, double* %xnv_nv403, align 8
  %cmp404 = fcmp ogt double %285, 0.000000e+00
  br i1 %cmp404, label %cond.true.406, label %cond.false.409

cond.true.406:                                    ; preds = %if.else.401
  %286 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any407 = getelementptr inbounds %struct.sv, %struct.sv* %286, i32 0, i32 0
  %287 = load i8*, i8** %sv_any407, align 8
  %288 = bitcast i8* %287 to %struct.xpvnv*
  %xnv_nv408 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %288, i32 0, i32 4
  %289 = load double, double* %xnv_nv408, align 8
  br label %cond.end.413

cond.false.409:                                   ; preds = %if.else.401
  %290 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any410 = getelementptr inbounds %struct.sv, %struct.sv* %290, i32 0, i32 0
  %291 = load i8*, i8** %sv_any410, align 8
  %292 = bitcast i8* %291 to %struct.xpvnv*
  %xnv_nv411 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %292, i32 0, i32 4
  %293 = load double, double* %xnv_nv411, align 8
  %sub412 = fsub double -0.000000e+00, %293
  br label %cond.end.413

cond.end.413:                                     ; preds = %cond.false.409, %cond.true.406
  %cond414 = phi double [ %289, %cond.true.406 ], [ %sub412, %cond.false.409 ]
  %call415 = call i64 @Perl_cast_uv(double %cond414)
  %cmp416 = icmp ugt i64 4294967296, %call415
  br i1 %cmp416, label %if.then.418, label %if.else.478

if.then.418:                                      ; preds = %cond.end.413
  %294 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags419 = getelementptr inbounds %struct.sv, %struct.sv* %294, i32 0, i32 2
  %295 = load i32, i32* %sv_flags419, align 4
  %and420 = and i32 %295, 2097152
  %tobool421 = icmp ne i32 %and420, 0
  br i1 %tobool421, label %land.rhs.422, label %land.end.425

land.rhs.422:                                     ; preds = %if.then.418
  %296 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call423 = call i32 @Perl_sv_backoff(%struct.sv* %296)
  %tobool424 = icmp ne i32 %call423, 0
  br label %land.end.425

land.end.425:                                     ; preds = %land.rhs.422, %if.then.418
  %297 = phi i1 [ false, %if.then.418 ], [ %tobool424, %land.rhs.422 ]
  %land.ext426 = zext i1 %297 to i32
  %298 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags427 = getelementptr inbounds %struct.sv, %struct.sv* %298, i32 0, i32 2
  %299 = load i32, i32* %sv_flags427, align 4
  %or428 = or i32 %299, 16777216
  store i32 %or428, i32* %sv_flags427, align 4
  %300 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags429 = getelementptr inbounds %struct.sv, %struct.sv* %300, i32 0, i32 2
  %301 = load i32, i32* %sv_flags429, align 4
  %or430 = or i32 %301, 33685504
  store i32 %or430, i32* %sv_flags429, align 4
  %302 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any431 = getelementptr inbounds %struct.sv, %struct.sv* %302, i32 0, i32 0
  %303 = load i8*, i8** %sv_any431, align 8
  %304 = bitcast i8* %303 to %struct.xpvnv*
  %xnv_nv432 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %304, i32 0, i32 4
  %305 = load double, double* %xnv_nv432, align 8
  %call433 = call i64 @Perl_cast_iv(double %305)
  %306 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any434 = getelementptr inbounds %struct.sv, %struct.sv* %306, i32 0, i32 0
  %307 = load i8*, i8** %sv_any434, align 8
  %308 = bitcast i8* %307 to %struct.xpviv*
  %xiv_iv435 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %308, i32 0, i32 3
  store i64 %call433, i64* %xiv_iv435, align 8
  %309 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any436 = getelementptr inbounds %struct.sv, %struct.sv* %309, i32 0, i32 0
  %310 = load i8*, i8** %sv_any436, align 8
  %311 = bitcast i8* %310 to %struct.xpviv*
  %xiv_iv437 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %311, i32 0, i32 3
  %312 = load i64, i64* %xiv_iv437, align 8
  %conv438 = sitofp i64 %312 to double
  %313 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any439 = getelementptr inbounds %struct.sv, %struct.sv* %313, i32 0, i32 0
  %314 = load i8*, i8** %sv_any439, align 8
  %315 = bitcast i8* %314 to %struct.xpvnv*
  %xnv_nv440 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %315, i32 0, i32 4
  %316 = load double, double* %xnv_nv440, align 8
  %cmp441 = fcmp oeq double %conv438, %316
  br i1 %cmp441, label %if.then.443, label %if.end.454

if.then.443:                                      ; preds = %land.end.425
  %317 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags444 = getelementptr inbounds %struct.sv, %struct.sv* %317, i32 0, i32 2
  %318 = load i32, i32* %sv_flags444, align 4
  %and445 = and i32 %318, 2097152
  %tobool446 = icmp ne i32 %and445, 0
  br i1 %tobool446, label %land.rhs.447, label %land.end.450

land.rhs.447:                                     ; preds = %if.then.443
  %319 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call448 = call i32 @Perl_sv_backoff(%struct.sv* %319)
  %tobool449 = icmp ne i32 %call448, 0
  br label %land.end.450

land.end.450:                                     ; preds = %land.rhs.447, %if.then.443
  %320 = phi i1 [ false, %if.then.443 ], [ %tobool449, %land.rhs.447 ]
  %land.ext451 = zext i1 %320 to i32
  %321 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags452 = getelementptr inbounds %struct.sv, %struct.sv* %321, i32 0, i32 2
  %322 = load i32, i32* %sv_flags452, align 4
  %or453 = or i32 %322, 16842752
  store i32 %or453, i32* %sv_flags452, align 4
  br label %if.end.454

if.end.454:                                       ; preds = %land.end.450, %land.end.425
  %323 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any455 = getelementptr inbounds %struct.sv, %struct.sv* %323, i32 0, i32 0
  %324 = load i8*, i8** %sv_any455, align 8
  %325 = bitcast i8* %324 to %struct.xpvnv*
  %xnv_nv456 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %325, i32 0, i32 4
  %326 = load double, double* %xnv_nv456, align 8
  %cmp457 = fcmp ogt double %326, 0.000000e+00
  br i1 %cmp457, label %cond.true.459, label %cond.false.462

cond.true.459:                                    ; preds = %if.end.454
  %327 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any460 = getelementptr inbounds %struct.sv, %struct.sv* %327, i32 0, i32 0
  %328 = load i8*, i8** %sv_any460, align 8
  %329 = bitcast i8* %328 to %struct.xpvnv*
  %xnv_nv461 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %329, i32 0, i32 4
  %330 = load double, double* %xnv_nv461, align 8
  br label %cond.end.466

cond.false.462:                                   ; preds = %if.end.454
  %331 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any463 = getelementptr inbounds %struct.sv, %struct.sv* %331, i32 0, i32 0
  %332 = load i8*, i8** %sv_any463, align 8
  %333 = bitcast i8* %332 to %struct.xpvnv*
  %xnv_nv464 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %333, i32 0, i32 4
  %334 = load double, double* %xnv_nv464, align 8
  %sub465 = fsub double -0.000000e+00, %334
  br label %cond.end.466

cond.end.466:                                     ; preds = %cond.false.462, %cond.true.459
  %cond467 = phi double [ %330, %cond.true.459 ], [ %sub465, %cond.false.462 ]
  %call468 = call i64 @Perl_cast_uv(double %cond467)
  %cmp469 = icmp ult i64 %call468, 9223372036854775807
  br i1 %cmp469, label %if.end.477, label %if.then.471

if.then.471:                                      ; preds = %cond.end.466
  %335 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any472 = getelementptr inbounds %struct.sv, %struct.sv* %335, i32 0, i32 0
  %336 = load i8*, i8** %sv_any472, align 8
  %337 = bitcast i8* %336 to %struct.xpvnv*
  %xnv_nv473 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %337, i32 0, i32 4
  %338 = load double, double* %xnv_nv473, align 8
  %339 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any474 = getelementptr inbounds %struct.sv, %struct.sv* %339, i32 0, i32 0
  %340 = load i8*, i8** %sv_any474, align 8
  %341 = bitcast i8* %340 to %struct.xpvnv*
  %xnv_nv475 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %341, i32 0, i32 4
  %342 = load double, double* %xnv_nv475, align 8
  %call476 = call i64 @Perl_cast_uv(double %342)
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.7, i32 0, i32 0), double %338, i64 %call476, i64 9223372036854775807)
  br label %if.end.477

if.end.477:                                       ; preds = %if.then.471, %cond.end.466
  br label %if.end.480

if.else.478:                                      ; preds = %cond.end.413
  %343 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %344 = load i32, i32* %numtype, align 4
  %call479 = call i32 @S_sv_2iuv_non_preserve(%struct.sv* %343, i32 %344)
  br label %if.end.480

if.end.480:                                       ; preds = %if.else.478, %if.end.477
  br label %if.end.481

if.end.481:                                       ; preds = %if.end.480, %if.then.398
  br label %if.end.482

if.end.482:                                       ; preds = %if.end.481, %if.end.354
  br label %if.end.527

if.else.483:                                      ; preds = %land.lhs.true.250, %if.else.246
  %345 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags484 = getelementptr inbounds %struct.sv, %struct.sv* %345, i32 0, i32 2
  %346 = load i32, i32* %sv_flags484, align 4
  %and485 = and i32 %346, 512
  %tobool486 = icmp ne i32 %and485, 0
  br i1 %tobool486, label %if.end.519, label %if.then.487

if.then.487:                                      ; preds = %if.else.483
  %347 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings488 = getelementptr inbounds %struct.cop, %struct.cop* %347, i32 0, i32 14
  %348 = load %struct.sv*, %struct.sv** %cop_warnings488, align 8
  %cmp489 = icmp ne %struct.sv* %348, null
  br i1 %cmp489, label %land.lhs.true.491, label %lor.lhs.false.507

land.lhs.true.491:                                ; preds = %if.then.487
  %349 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings492 = getelementptr inbounds %struct.cop, %struct.cop* %349, i32 0, i32 14
  %350 = load %struct.sv*, %struct.sv** %cop_warnings492, align 8
  %cmp493 = icmp ne %struct.sv* %350, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 2)
  br i1 %cmp493, label %land.lhs.true.495, label %lor.lhs.false.507

land.lhs.true.495:                                ; preds = %land.lhs.true.491
  %351 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings496 = getelementptr inbounds %struct.cop, %struct.cop* %351, i32 0, i32 14
  %352 = load %struct.sv*, %struct.sv** %cop_warnings496, align 8
  %cmp497 = icmp eq %struct.sv* %352, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 1)
  br i1 %cmp497, label %land.lhs.true.515, label %lor.lhs.false.499

lor.lhs.false.499:                                ; preds = %land.lhs.true.495
  %353 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings500 = getelementptr inbounds %struct.cop, %struct.cop* %353, i32 0, i32 14
  %354 = load %struct.sv*, %struct.sv** %cop_warnings500, align 8
  %sv_any501 = getelementptr inbounds %struct.sv, %struct.sv* %354, i32 0, i32 0
  %355 = load i8*, i8** %sv_any501, align 8
  %356 = bitcast i8* %355 to %struct.xpv*
  %xpv_pv502 = getelementptr inbounds %struct.xpv, %struct.xpv* %356, i32 0, i32 0
  %357 = load i8*, i8** %xpv_pv502, align 8
  %arrayidx503 = getelementptr inbounds i8, i8* %357, i64 10
  %358 = load i8, i8* %arrayidx503, align 1
  %conv504 = sext i8 %358 to i32
  %and505 = and i32 %conv504, 4
  %tobool506 = icmp ne i32 %and505, 0
  br i1 %tobool506, label %land.lhs.true.515, label %lor.lhs.false.507

lor.lhs.false.507:                                ; preds = %lor.lhs.false.499, %land.lhs.true.491, %if.then.487
  %359 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings508 = getelementptr inbounds %struct.cop, %struct.cop* %359, i32 0, i32 14
  %360 = load %struct.sv*, %struct.sv** %cop_warnings508, align 8
  %cmp509 = icmp eq %struct.sv* %360, null
  br i1 %cmp509, label %land.lhs.true.511, label %if.end.518

land.lhs.true.511:                                ; preds = %lor.lhs.false.507
  %361 = load i8, i8* @PL_dowarn, align 1
  %conv512 = zext i8 %361 to i32
  %and513 = and i32 %conv512, 1
  %tobool514 = icmp ne i32 %and513, 0
  br i1 %tobool514, label %land.lhs.true.515, label %if.end.518

land.lhs.true.515:                                ; preds = %land.lhs.true.511, %lor.lhs.false.499, %land.lhs.true.495
  %362 = load i32, i32* @PL_localizing, align 4
  %tobool516 = icmp ne i32 %362, 0
  br i1 %tobool516, label %if.end.518, label %if.then.517

if.then.517:                                      ; preds = %land.lhs.true.515
  call void @Perl_report_uninit()
  br label %if.end.518

if.end.518:                                       ; preds = %if.then.517, %land.lhs.true.515, %land.lhs.true.511, %lor.lhs.false.507
  br label %if.end.519

if.end.519:                                       ; preds = %if.end.518, %if.else.483
  %363 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags520 = getelementptr inbounds %struct.sv, %struct.sv* %363, i32 0, i32 2
  %364 = load i32, i32* %sv_flags520, align 4
  %and521 = and i32 %364, 255
  %cmp522 = icmp ult i32 %and521, 1
  br i1 %cmp522, label %if.then.524, label %if.end.526

if.then.524:                                      ; preds = %if.end.519
  %365 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call525 = call signext i8 @Perl_sv_upgrade(%struct.sv* %365, i32 1)
  br label %if.end.526

if.end.526:                                       ; preds = %if.then.524, %if.end.519
  store i64 0, i64* %retval
  br label %return

if.end.527:                                       ; preds = %if.end.482
  br label %if.end.528

if.end.528:                                       ; preds = %if.end.527, %if.end.245
  %366 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags529 = getelementptr inbounds %struct.sv, %struct.sv* %366, i32 0, i32 2
  %367 = load i32, i32* %sv_flags529, align 4
  %and530 = and i32 %367, -2147483648
  %tobool531 = icmp ne i32 %and530, 0
  br i1 %tobool531, label %cond.true.532, label %cond.false.535

cond.true.532:                                    ; preds = %if.end.528
  %368 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any533 = getelementptr inbounds %struct.sv, %struct.sv* %368, i32 0, i32 0
  %369 = load i8*, i8** %sv_any533, align 8
  %370 = bitcast i8* %369 to %struct.xpvuv*
  %xuv_uv534 = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %370, i32 0, i32 3
  %371 = load i64, i64* %xuv_uv534, align 8
  br label %cond.end.538

cond.false.535:                                   ; preds = %if.end.528
  %372 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any536 = getelementptr inbounds %struct.sv, %struct.sv* %372, i32 0, i32 0
  %373 = load i8*, i8** %sv_any536, align 8
  %374 = bitcast i8* %373 to %struct.xpviv*
  %xiv_iv537 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %374, i32 0, i32 3
  %375 = load i64, i64* %xiv_iv537, align 8
  br label %cond.end.538

cond.end.538:                                     ; preds = %cond.false.535, %cond.true.532
  %cond539 = phi i64 [ %371, %cond.true.532 ], [ %375, %cond.false.535 ]
  store i64 %cond539, i64* %retval
  br label %return

return:                                           ; preds = %cond.end.538, %if.end.526, %if.else, %if.then.146, %if.end.136, %if.end.87, %cond.end, %if.end.53, %if.then.20, %if.then.11, %if.then.6, %if.then
  %376 = load i64, i64* %retval
  ret i64 %376
}

; Function Attrs: nounwind uwtable
define internal i64 @S_asUV(%struct.sv* %sv) #0 {
entry:
  %retval = alloca i64, align 8
  %sv.addr = alloca %struct.sv*, align 8
  %value = alloca i64, align 8
  %numtype = alloca i32, align 4
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 0
  %1 = load i8*, i8** %sv_any, align 8
  %2 = bitcast i8* %1 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %2, i32 0, i32 0
  %3 = load i8*, i8** %xpv_pv, align 8
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any1 = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 0
  %5 = load i8*, i8** %sv_any1, align 8
  %6 = bitcast i8* %5 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %6, i32 0, i32 1
  %7 = load i64, i64* %xpv_cur, align 8
  %call = call i32 @Perl_grok_number(i8* %3, i64 %7, i64* %value)
  store i32 %call, i32* %numtype, align 4
  %8 = load i32, i32* %numtype, align 4
  %and = and i32 %8, 5
  %cmp = icmp eq i32 %and, 1
  br i1 %cmp, label %if.then, label %if.end.4

if.then:                                          ; preds = %entry
  %9 = load i32, i32* %numtype, align 4
  %and2 = and i32 %9, 8
  %tobool = icmp ne i32 %and2, 0
  br i1 %tobool, label %if.end, label %if.then.3

if.then.3:                                        ; preds = %if.then
  %10 = load i64, i64* %value, align 8
  store i64 %10, i64* %retval
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end.4

if.end.4:                                         ; preds = %if.end, %entry
  %11 = load i32, i32* %numtype, align 4
  %tobool5 = icmp ne i32 %11, 0
  br i1 %tobool5, label %if.end.28, label %if.then.6

if.then.6:                                        ; preds = %if.end.4
  %12 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings = getelementptr inbounds %struct.cop, %struct.cop* %12, i32 0, i32 14
  %13 = load %struct.sv*, %struct.sv** %cop_warnings, align 8
  %cmp7 = icmp ne %struct.sv* %13, null
  br i1 %cmp7, label %land.lhs.true, label %lor.lhs.false.18

land.lhs.true:                                    ; preds = %if.then.6
  %14 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings8 = getelementptr inbounds %struct.cop, %struct.cop* %14, i32 0, i32 14
  %15 = load %struct.sv*, %struct.sv** %cop_warnings8, align 8
  %cmp9 = icmp ne %struct.sv* %15, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 2)
  br i1 %cmp9, label %land.lhs.true.10, label %lor.lhs.false.18

land.lhs.true.10:                                 ; preds = %land.lhs.true
  %16 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings11 = getelementptr inbounds %struct.cop, %struct.cop* %16, i32 0, i32 14
  %17 = load %struct.sv*, %struct.sv** %cop_warnings11, align 8
  %cmp12 = icmp eq %struct.sv* %17, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 1)
  br i1 %cmp12, label %if.then.26, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.10
  %18 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings13 = getelementptr inbounds %struct.cop, %struct.cop* %18, i32 0, i32 14
  %19 = load %struct.sv*, %struct.sv** %cop_warnings13, align 8
  %sv_any14 = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 0
  %20 = load i8*, i8** %sv_any14, align 8
  %21 = bitcast i8* %20 to %struct.xpv*
  %xpv_pv15 = getelementptr inbounds %struct.xpv, %struct.xpv* %21, i32 0, i32 0
  %22 = load i8*, i8** %xpv_pv15, align 8
  %arrayidx = getelementptr inbounds i8, i8* %22, i64 3
  %23 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %23 to i32
  %and16 = and i32 %conv, 4
  %tobool17 = icmp ne i32 %and16, 0
  br i1 %tobool17, label %if.then.26, label %lor.lhs.false.18

lor.lhs.false.18:                                 ; preds = %lor.lhs.false, %land.lhs.true, %if.then.6
  %24 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings19 = getelementptr inbounds %struct.cop, %struct.cop* %24, i32 0, i32 14
  %25 = load %struct.sv*, %struct.sv** %cop_warnings19, align 8
  %cmp20 = icmp eq %struct.sv* %25, null
  br i1 %cmp20, label %land.lhs.true.22, label %if.end.27

land.lhs.true.22:                                 ; preds = %lor.lhs.false.18
  %26 = load i8, i8* @PL_dowarn, align 1
  %conv23 = zext i8 %26 to i32
  %and24 = and i32 %conv23, 1
  %tobool25 = icmp ne i32 %and24, 0
  br i1 %tobool25, label %if.then.26, label %if.end.27

if.then.26:                                       ; preds = %land.lhs.true.22, %lor.lhs.false, %land.lhs.true.10
  %27 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @S_not_a_number(%struct.sv* %27)
  br label %if.end.27

if.end.27:                                        ; preds = %if.then.26, %land.lhs.true.22, %lor.lhs.false.18
  br label %if.end.28

if.end.28:                                        ; preds = %if.end.27, %if.end.4
  %28 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any29 = getelementptr inbounds %struct.sv, %struct.sv* %28, i32 0, i32 0
  %29 = load i8*, i8** %sv_any29, align 8
  %30 = bitcast i8* %29 to %struct.xpv*
  %xpv_pv30 = getelementptr inbounds %struct.xpv, %struct.xpv* %30, i32 0, i32 0
  %31 = load i8*, i8** %xpv_pv30, align 8
  %call31 = call double @Perl_my_atof(i8* %31)
  %call32 = call i64 @Perl_cast_uv(double %call31)
  store i64 %call32, i64* %retval
  br label %return

return:                                           ; preds = %if.end.28, %if.then.3
  %32 = load i64, i64* %retval
  ret i64 %32
}

; Function Attrs: nounwind uwtable
define double @Perl_sv_2nv(%struct.sv* %sv) #0 {
entry:
  %retval = alloca double, align 8
  %sv.addr = alloca %struct.sv*, align 8
  %tmpstr = alloca %struct.sv*, align 8
  %value = alloca i64, align 8
  %numtype = alloca i32, align 4
  %nv = alloca double, align 8
  %nv_as_uv = alloca i64, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store double 0.000000e+00, double* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and = and i32 %2, 8192
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %if.then.2, label %if.end.102

if.then.2:                                        ; preds = %if.end
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i32 @Perl_mg_get(%struct.sv* %3)
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags3 = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 2
  %5 = load i32, i32* %sv_flags3, align 4
  %and4 = and i32 %5, 33554432
  %tobool5 = icmp ne i32 %and4, 0
  br i1 %tobool5, label %if.then.6, label %if.end.7

if.then.6:                                        ; preds = %if.then.2
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 0
  %7 = load i8*, i8** %sv_any, align 8
  %8 = bitcast i8* %7 to %struct.xpvnv*
  %xnv_nv = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %8, i32 0, i32 4
  %9 = load double, double* %xnv_nv, align 8
  store double %9, double* %retval
  br label %return

if.end.7:                                         ; preds = %if.then.2
  %10 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags8 = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags8, align 4
  %and9 = and i32 %11, 67108864
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %land.lhs.true, label %if.end.47

land.lhs.true:                                    ; preds = %if.end.7
  %12 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any11 = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 0
  %13 = load i8*, i8** %sv_any11, align 8
  %14 = bitcast i8* %13 to %struct.xpv*
  %xpv_len = getelementptr inbounds %struct.xpv, %struct.xpv* %14, i32 0, i32 2
  %15 = load i64, i64* %xpv_len, align 8
  %tobool12 = icmp ne i64 %15, 0
  br i1 %tobool12, label %if.then.13, label %if.end.47

if.then.13:                                       ; preds = %land.lhs.true
  %16 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings = getelementptr inbounds %struct.cop, %struct.cop* %16, i32 0, i32 14
  %17 = load %struct.sv*, %struct.sv** %cop_warnings, align 8
  %cmp = icmp ne %struct.sv* %17, null
  br i1 %cmp, label %land.lhs.true.14, label %lor.lhs.false.24

land.lhs.true.14:                                 ; preds = %if.then.13
  %18 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings15 = getelementptr inbounds %struct.cop, %struct.cop* %18, i32 0, i32 14
  %19 = load %struct.sv*, %struct.sv** %cop_warnings15, align 8
  %cmp16 = icmp ne %struct.sv* %19, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 2)
  br i1 %cmp16, label %land.lhs.true.17, label %lor.lhs.false.24

land.lhs.true.17:                                 ; preds = %land.lhs.true.14
  %20 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings18 = getelementptr inbounds %struct.cop, %struct.cop* %20, i32 0, i32 14
  %21 = load %struct.sv*, %struct.sv** %cop_warnings18, align 8
  %cmp19 = icmp eq %struct.sv* %21, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 1)
  br i1 %cmp19, label %land.lhs.true.32, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.17
  %22 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings20 = getelementptr inbounds %struct.cop, %struct.cop* %22, i32 0, i32 14
  %23 = load %struct.sv*, %struct.sv** %cop_warnings20, align 8
  %sv_any21 = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 0
  %24 = load i8*, i8** %sv_any21, align 8
  %25 = bitcast i8* %24 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %25, i32 0, i32 0
  %26 = load i8*, i8** %xpv_pv, align 8
  %arrayidx = getelementptr inbounds i8, i8* %26, i64 3
  %27 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %27 to i32
  %and22 = and i32 %conv, 4
  %tobool23 = icmp ne i32 %and22, 0
  br i1 %tobool23, label %land.lhs.true.32, label %lor.lhs.false.24

lor.lhs.false.24:                                 ; preds = %lor.lhs.false, %land.lhs.true.14, %if.then.13
  %28 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings25 = getelementptr inbounds %struct.cop, %struct.cop* %28, i32 0, i32 14
  %29 = load %struct.sv*, %struct.sv** %cop_warnings25, align 8
  %cmp26 = icmp eq %struct.sv* %29, null
  br i1 %cmp26, label %land.lhs.true.28, label %if.end.43

land.lhs.true.28:                                 ; preds = %lor.lhs.false.24
  %30 = load i8, i8* @PL_dowarn, align 1
  %conv29 = zext i8 %30 to i32
  %and30 = and i32 %conv29, 1
  %tobool31 = icmp ne i32 %and30, 0
  br i1 %tobool31, label %land.lhs.true.32, label %if.end.43

land.lhs.true.32:                                 ; preds = %land.lhs.true.28, %lor.lhs.false, %land.lhs.true.17
  %31 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags33 = getelementptr inbounds %struct.sv, %struct.sv* %31, i32 0, i32 2
  %32 = load i32, i32* %sv_flags33, align 4
  %and34 = and i32 %32, 16777216
  %tobool35 = icmp ne i32 %and34, 0
  br i1 %tobool35, label %if.end.43, label %land.lhs.true.36

land.lhs.true.36:                                 ; preds = %land.lhs.true.32
  %33 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any37 = getelementptr inbounds %struct.sv, %struct.sv* %33, i32 0, i32 0
  %34 = load i8*, i8** %sv_any37, align 8
  %35 = bitcast i8* %34 to %struct.xpv*
  %xpv_pv38 = getelementptr inbounds %struct.xpv, %struct.xpv* %35, i32 0, i32 0
  %36 = load i8*, i8** %xpv_pv38, align 8
  %37 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any39 = getelementptr inbounds %struct.sv, %struct.sv* %37, i32 0, i32 0
  %38 = load i8*, i8** %sv_any39, align 8
  %39 = bitcast i8* %38 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %39, i32 0, i32 1
  %40 = load i64, i64* %xpv_cur, align 8
  %call40 = call i32 @Perl_grok_number(i8* %36, i64 %40, i64* null)
  %tobool41 = icmp ne i32 %call40, 0
  br i1 %tobool41, label %if.end.43, label %if.then.42

if.then.42:                                       ; preds = %land.lhs.true.36
  %41 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @S_not_a_number(%struct.sv* %41)
  br label %if.end.43

if.end.43:                                        ; preds = %if.then.42, %land.lhs.true.36, %land.lhs.true.32, %land.lhs.true.28, %lor.lhs.false.24
  %42 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any44 = getelementptr inbounds %struct.sv, %struct.sv* %42, i32 0, i32 0
  %43 = load i8*, i8** %sv_any44, align 8
  %44 = bitcast i8* %43 to %struct.xpv*
  %xpv_pv45 = getelementptr inbounds %struct.xpv, %struct.xpv* %44, i32 0, i32 0
  %45 = load i8*, i8** %xpv_pv45, align 8
  %call46 = call double @Perl_my_atof(i8* %45)
  store double %call46, double* %retval
  br label %return

if.end.47:                                        ; preds = %land.lhs.true, %if.end.7
  %46 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags48 = getelementptr inbounds %struct.sv, %struct.sv* %46, i32 0, i32 2
  %47 = load i32, i32* %sv_flags48, align 4
  %and49 = and i32 %47, 16777216
  %tobool50 = icmp ne i32 %and49, 0
  br i1 %tobool50, label %if.then.51, label %if.end.60

if.then.51:                                       ; preds = %if.end.47
  %48 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags52 = getelementptr inbounds %struct.sv, %struct.sv* %48, i32 0, i32 2
  %49 = load i32, i32* %sv_flags52, align 4
  %and53 = and i32 %49, -2147483648
  %tobool54 = icmp ne i32 %and53, 0
  br i1 %tobool54, label %if.then.55, label %if.else

if.then.55:                                       ; preds = %if.then.51
  %50 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any56 = getelementptr inbounds %struct.sv, %struct.sv* %50, i32 0, i32 0
  %51 = load i8*, i8** %sv_any56, align 8
  %52 = bitcast i8* %51 to %struct.xpvuv*
  %xuv_uv = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %52, i32 0, i32 3
  %53 = load i64, i64* %xuv_uv, align 8
  %conv57 = uitofp i64 %53 to double
  store double %conv57, double* %retval
  br label %return

if.else:                                          ; preds = %if.then.51
  %54 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any58 = getelementptr inbounds %struct.sv, %struct.sv* %54, i32 0, i32 0
  %55 = load i8*, i8** %sv_any58, align 8
  %56 = bitcast i8* %55 to %struct.xpviv*
  %xiv_iv = getelementptr inbounds %struct.xpviv, %struct.xpviv* %56, i32 0, i32 3
  %57 = load i64, i64* %xiv_iv, align 8
  %conv59 = sitofp i64 %57 to double
  store double %conv59, double* %retval
  br label %return

if.end.60:                                        ; preds = %if.end.47
  %58 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags61 = getelementptr inbounds %struct.sv, %struct.sv* %58, i32 0, i32 2
  %59 = load i32, i32* %sv_flags61, align 4
  %and62 = and i32 %59, 524288
  %tobool63 = icmp ne i32 %and62, 0
  br i1 %tobool63, label %if.end.101, label %if.then.64

if.then.64:                                       ; preds = %if.end.60
  %60 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags65 = getelementptr inbounds %struct.sv, %struct.sv* %60, i32 0, i32 2
  %61 = load i32, i32* %sv_flags65, align 4
  %and66 = and i32 %61, 512
  %tobool67 = icmp ne i32 %and66, 0
  br i1 %tobool67, label %if.end.100, label %if.then.68

if.then.68:                                       ; preds = %if.then.64
  %62 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings69 = getelementptr inbounds %struct.cop, %struct.cop* %62, i32 0, i32 14
  %63 = load %struct.sv*, %struct.sv** %cop_warnings69, align 8
  %cmp70 = icmp ne %struct.sv* %63, null
  br i1 %cmp70, label %land.lhs.true.72, label %lor.lhs.false.88

land.lhs.true.72:                                 ; preds = %if.then.68
  %64 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings73 = getelementptr inbounds %struct.cop, %struct.cop* %64, i32 0, i32 14
  %65 = load %struct.sv*, %struct.sv** %cop_warnings73, align 8
  %cmp74 = icmp ne %struct.sv* %65, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 2)
  br i1 %cmp74, label %land.lhs.true.76, label %lor.lhs.false.88

land.lhs.true.76:                                 ; preds = %land.lhs.true.72
  %66 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings77 = getelementptr inbounds %struct.cop, %struct.cop* %66, i32 0, i32 14
  %67 = load %struct.sv*, %struct.sv** %cop_warnings77, align 8
  %cmp78 = icmp eq %struct.sv* %67, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 1)
  br i1 %cmp78, label %land.lhs.true.96, label %lor.lhs.false.80

lor.lhs.false.80:                                 ; preds = %land.lhs.true.76
  %68 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings81 = getelementptr inbounds %struct.cop, %struct.cop* %68, i32 0, i32 14
  %69 = load %struct.sv*, %struct.sv** %cop_warnings81, align 8
  %sv_any82 = getelementptr inbounds %struct.sv, %struct.sv* %69, i32 0, i32 0
  %70 = load i8*, i8** %sv_any82, align 8
  %71 = bitcast i8* %70 to %struct.xpv*
  %xpv_pv83 = getelementptr inbounds %struct.xpv, %struct.xpv* %71, i32 0, i32 0
  %72 = load i8*, i8** %xpv_pv83, align 8
  %arrayidx84 = getelementptr inbounds i8, i8* %72, i64 10
  %73 = load i8, i8* %arrayidx84, align 1
  %conv85 = sext i8 %73 to i32
  %and86 = and i32 %conv85, 4
  %tobool87 = icmp ne i32 %and86, 0
  br i1 %tobool87, label %land.lhs.true.96, label %lor.lhs.false.88

lor.lhs.false.88:                                 ; preds = %lor.lhs.false.80, %land.lhs.true.72, %if.then.68
  %74 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings89 = getelementptr inbounds %struct.cop, %struct.cop* %74, i32 0, i32 14
  %75 = load %struct.sv*, %struct.sv** %cop_warnings89, align 8
  %cmp90 = icmp eq %struct.sv* %75, null
  br i1 %cmp90, label %land.lhs.true.92, label %if.end.99

land.lhs.true.92:                                 ; preds = %lor.lhs.false.88
  %76 = load i8, i8* @PL_dowarn, align 1
  %conv93 = zext i8 %76 to i32
  %and94 = and i32 %conv93, 1
  %tobool95 = icmp ne i32 %and94, 0
  br i1 %tobool95, label %land.lhs.true.96, label %if.end.99

land.lhs.true.96:                                 ; preds = %land.lhs.true.92, %lor.lhs.false.80, %land.lhs.true.76
  %77 = load i32, i32* @PL_localizing, align 4
  %tobool97 = icmp ne i32 %77, 0
  br i1 %tobool97, label %if.end.99, label %if.then.98

if.then.98:                                       ; preds = %land.lhs.true.96
  call void @Perl_report_uninit()
  br label %if.end.99

if.end.99:                                        ; preds = %if.then.98, %land.lhs.true.96, %land.lhs.true.92, %lor.lhs.false.88
  br label %if.end.100

if.end.100:                                       ; preds = %if.end.99, %if.then.64
  store double 0.000000e+00, double* %retval
  br label %return

if.end.101:                                       ; preds = %if.end.60
  br label %if.end.102

if.end.102:                                       ; preds = %if.end.101, %if.end
  %78 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags103 = getelementptr inbounds %struct.sv, %struct.sv* %78, i32 0, i32 2
  %79 = load i32, i32* %sv_flags103, align 4
  %and104 = and i32 %79, 9961472
  %tobool105 = icmp ne i32 %and104, 0
  br i1 %tobool105, label %if.then.106, label %if.end.186

if.then.106:                                      ; preds = %if.end.102
  %80 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags107 = getelementptr inbounds %struct.sv, %struct.sv* %80, i32 0, i32 2
  %81 = load i32, i32* %sv_flags107, align 4
  %and108 = and i32 %81, 524288
  %tobool109 = icmp ne i32 %and108, 0
  br i1 %tobool109, label %if.then.110, label %if.end.138

if.then.110:                                      ; preds = %if.then.106
  %82 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags111 = getelementptr inbounds %struct.sv, %struct.sv* %82, i32 0, i32 2
  %83 = load i32, i32* %sv_flags111, align 4
  %and112 = and i32 %83, 268435456
  %tobool113 = icmp ne i32 %and112, 0
  br i1 %tobool113, label %land.lhs.true.114, label %if.end.134

land.lhs.true.114:                                ; preds = %if.then.110
  %84 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call115 = call %struct.sv* @Perl_amagic_call(%struct.sv* %84, %struct.sv* @PL_sv_undef, i32 5, i32 9)
  store %struct.sv* %call115, %struct.sv** %tmpstr, align 8
  %tobool116 = icmp ne %struct.sv* %call115, null
  br i1 %tobool116, label %land.lhs.true.117, label %if.end.134

land.lhs.true.117:                                ; preds = %land.lhs.true.114
  %85 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_flags118 = getelementptr inbounds %struct.sv, %struct.sv* %85, i32 0, i32 2
  %86 = load i32, i32* %sv_flags118, align 4
  %and119 = and i32 %86, 524288
  %tobool120 = icmp ne i32 %and119, 0
  br i1 %tobool120, label %lor.lhs.false.121, label %if.then.127

lor.lhs.false.121:                                ; preds = %land.lhs.true.117
  %87 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_any122 = getelementptr inbounds %struct.sv, %struct.sv* %87, i32 0, i32 0
  %88 = load i8*, i8** %sv_any122, align 8
  %89 = bitcast i8* %88 to %struct.xrv*
  %xrv_rv = getelementptr inbounds %struct.xrv, %struct.xrv* %89, i32 0, i32 0
  %90 = load %struct.sv*, %struct.sv** %xrv_rv, align 8
  %91 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any123 = getelementptr inbounds %struct.sv, %struct.sv* %91, i32 0, i32 0
  %92 = load i8*, i8** %sv_any123, align 8
  %93 = bitcast i8* %92 to %struct.xrv*
  %xrv_rv124 = getelementptr inbounds %struct.xrv, %struct.xrv* %93, i32 0, i32 0
  %94 = load %struct.sv*, %struct.sv** %xrv_rv124, align 8
  %cmp125 = icmp ne %struct.sv* %90, %94
  br i1 %cmp125, label %if.then.127, label %if.end.134

if.then.127:                                      ; preds = %lor.lhs.false.121, %land.lhs.true.117
  %95 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_flags128 = getelementptr inbounds %struct.sv, %struct.sv* %95, i32 0, i32 2
  %96 = load i32, i32* %sv_flags128, align 4
  %and129 = and i32 %96, 131072
  %tobool130 = icmp ne i32 %and129, 0
  br i1 %tobool130, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.127
  %97 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_any131 = getelementptr inbounds %struct.sv, %struct.sv* %97, i32 0, i32 0
  %98 = load i8*, i8** %sv_any131, align 8
  %99 = bitcast i8* %98 to %struct.xpvnv*
  %xnv_nv132 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %99, i32 0, i32 4
  %100 = load double, double* %xnv_nv132, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then.127
  %101 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %call133 = call double @Perl_sv_2nv(%struct.sv* %101)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ %100, %cond.true ], [ %call133, %cond.false ]
  store double %cond, double* %retval
  br label %return

if.end.134:                                       ; preds = %lor.lhs.false.121, %land.lhs.true.114, %if.then.110
  %102 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any135 = getelementptr inbounds %struct.sv, %struct.sv* %102, i32 0, i32 0
  %103 = load i8*, i8** %sv_any135, align 8
  %104 = bitcast i8* %103 to %struct.xrv*
  %xrv_rv136 = getelementptr inbounds %struct.xrv, %struct.xrv* %104, i32 0, i32 0
  %105 = load %struct.sv*, %struct.sv** %xrv_rv136, align 8
  %106 = ptrtoint %struct.sv* %105 to i64
  %conv137 = uitofp i64 %106 to double
  store double %conv137, double* %retval
  br label %return

if.end.138:                                       ; preds = %if.then.106
  %107 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags139 = getelementptr inbounds %struct.sv, %struct.sv* %107, i32 0, i32 2
  %108 = load i32, i32* %sv_flags139, align 4
  %and140 = and i32 %108, 8388608
  %tobool141 = icmp ne i32 %and140, 0
  br i1 %tobool141, label %land.lhs.true.142, label %if.end.147

land.lhs.true.142:                                ; preds = %if.end.138
  %109 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags143 = getelementptr inbounds %struct.sv, %struct.sv* %109, i32 0, i32 2
  %110 = load i32, i32* %sv_flags143, align 4
  %and144 = and i32 %110, 1048576
  %tobool145 = icmp ne i32 %and144, 0
  br i1 %tobool145, label %if.then.146, label %if.end.147

if.then.146:                                      ; preds = %land.lhs.true.142
  %111 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_force_normal(%struct.sv* %111)
  br label %if.end.147

if.end.147:                                       ; preds = %if.then.146, %land.lhs.true.142, %if.end.138
  %112 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags148 = getelementptr inbounds %struct.sv, %struct.sv* %112, i32 0, i32 2
  %113 = load i32, i32* %sv_flags148, align 4
  %and149 = and i32 %113, 8388608
  %tobool150 = icmp ne i32 %and149, 0
  br i1 %tobool150, label %land.lhs.true.151, label %if.end.185

land.lhs.true.151:                                ; preds = %if.end.147
  %114 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags152 = getelementptr inbounds %struct.sv, %struct.sv* %114, i32 0, i32 2
  %115 = load i32, i32* %sv_flags152, align 4
  %and153 = and i32 %115, 118423552
  %tobool154 = icmp ne i32 %and153, 0
  br i1 %tobool154, label %if.end.185, label %if.then.155

if.then.155:                                      ; preds = %land.lhs.true.151
  %116 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings156 = getelementptr inbounds %struct.cop, %struct.cop* %116, i32 0, i32 14
  %117 = load %struct.sv*, %struct.sv** %cop_warnings156, align 8
  %cmp157 = icmp ne %struct.sv* %117, null
  br i1 %cmp157, label %land.lhs.true.159, label %lor.lhs.false.175

land.lhs.true.159:                                ; preds = %if.then.155
  %118 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings160 = getelementptr inbounds %struct.cop, %struct.cop* %118, i32 0, i32 14
  %119 = load %struct.sv*, %struct.sv** %cop_warnings160, align 8
  %cmp161 = icmp ne %struct.sv* %119, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 2)
  br i1 %cmp161, label %land.lhs.true.163, label %lor.lhs.false.175

land.lhs.true.163:                                ; preds = %land.lhs.true.159
  %120 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings164 = getelementptr inbounds %struct.cop, %struct.cop* %120, i32 0, i32 14
  %121 = load %struct.sv*, %struct.sv** %cop_warnings164, align 8
  %cmp165 = icmp eq %struct.sv* %121, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 1)
  br i1 %cmp165, label %if.then.183, label %lor.lhs.false.167

lor.lhs.false.167:                                ; preds = %land.lhs.true.163
  %122 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings168 = getelementptr inbounds %struct.cop, %struct.cop* %122, i32 0, i32 14
  %123 = load %struct.sv*, %struct.sv** %cop_warnings168, align 8
  %sv_any169 = getelementptr inbounds %struct.sv, %struct.sv* %123, i32 0, i32 0
  %124 = load i8*, i8** %sv_any169, align 8
  %125 = bitcast i8* %124 to %struct.xpv*
  %xpv_pv170 = getelementptr inbounds %struct.xpv, %struct.xpv* %125, i32 0, i32 0
  %126 = load i8*, i8** %xpv_pv170, align 8
  %arrayidx171 = getelementptr inbounds i8, i8* %126, i64 10
  %127 = load i8, i8* %arrayidx171, align 1
  %conv172 = sext i8 %127 to i32
  %and173 = and i32 %conv172, 4
  %tobool174 = icmp ne i32 %and173, 0
  br i1 %tobool174, label %if.then.183, label %lor.lhs.false.175

lor.lhs.false.175:                                ; preds = %lor.lhs.false.167, %land.lhs.true.159, %if.then.155
  %128 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings176 = getelementptr inbounds %struct.cop, %struct.cop* %128, i32 0, i32 14
  %129 = load %struct.sv*, %struct.sv** %cop_warnings176, align 8
  %cmp177 = icmp eq %struct.sv* %129, null
  br i1 %cmp177, label %land.lhs.true.179, label %if.end.184

land.lhs.true.179:                                ; preds = %lor.lhs.false.175
  %130 = load i8, i8* @PL_dowarn, align 1
  %conv180 = zext i8 %130 to i32
  %and181 = and i32 %conv180, 1
  %tobool182 = icmp ne i32 %and181, 0
  br i1 %tobool182, label %if.then.183, label %if.end.184

if.then.183:                                      ; preds = %land.lhs.true.179, %lor.lhs.false.167, %land.lhs.true.163
  call void @Perl_report_uninit()
  br label %if.end.184

if.end.184:                                       ; preds = %if.then.183, %land.lhs.true.179, %lor.lhs.false.175
  store double 0.000000e+00, double* %retval
  br label %return

if.end.185:                                       ; preds = %land.lhs.true.151, %if.end.147
  br label %if.end.186

if.end.186:                                       ; preds = %if.end.185, %if.end.102
  %131 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags187 = getelementptr inbounds %struct.sv, %struct.sv* %131, i32 0, i32 2
  %132 = load i32, i32* %sv_flags187, align 4
  %and188 = and i32 %132, 255
  %cmp189 = icmp ult i32 %and188, 2
  br i1 %cmp189, label %if.then.191, label %if.else.201

if.then.191:                                      ; preds = %if.end.186
  %133 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags192 = getelementptr inbounds %struct.sv, %struct.sv* %133, i32 0, i32 2
  %134 = load i32, i32* %sv_flags192, align 4
  %and193 = and i32 %134, 255
  %cmp194 = icmp eq i32 %and193, 1
  br i1 %cmp194, label %if.then.196, label %if.else.198

if.then.196:                                      ; preds = %if.then.191
  %135 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call197 = call signext i8 @Perl_sv_upgrade(%struct.sv* %135, i32 6)
  br label %if.end.200

if.else.198:                                      ; preds = %if.then.191
  %136 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call199 = call signext i8 @Perl_sv_upgrade(%struct.sv* %136, i32 2)
  br label %if.end.200

if.end.200:                                       ; preds = %if.else.198, %if.then.196
  br label %if.end.209

if.else.201:                                      ; preds = %if.end.186
  %137 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags202 = getelementptr inbounds %struct.sv, %struct.sv* %137, i32 0, i32 2
  %138 = load i32, i32* %sv_flags202, align 4
  %and203 = and i32 %138, 255
  %cmp204 = icmp ult i32 %and203, 6
  br i1 %cmp204, label %if.then.206, label %if.end.208

if.then.206:                                      ; preds = %if.else.201
  %139 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call207 = call signext i8 @Perl_sv_upgrade(%struct.sv* %139, i32 6)
  br label %if.end.208

if.end.208:                                       ; preds = %if.then.206, %if.else.201
  br label %if.end.209

if.end.209:                                       ; preds = %if.end.208, %if.end.200
  %140 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags210 = getelementptr inbounds %struct.sv, %struct.sv* %140, i32 0, i32 2
  %141 = load i32, i32* %sv_flags210, align 4
  %and211 = and i32 %141, 33554432
  %tobool212 = icmp ne i32 %and211, 0
  br i1 %tobool212, label %if.then.213, label %if.end.216

if.then.213:                                      ; preds = %if.end.209
  %142 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any214 = getelementptr inbounds %struct.sv, %struct.sv* %142, i32 0, i32 0
  %143 = load i8*, i8** %sv_any214, align 8
  %144 = bitcast i8* %143 to %struct.xpvnv*
  %xnv_nv215 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %144, i32 0, i32 4
  %145 = load double, double* %xnv_nv215, align 8
  store double %145, double* %retval
  br label %return

if.end.216:                                       ; preds = %if.end.209
  %146 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags217 = getelementptr inbounds %struct.sv, %struct.sv* %146, i32 0, i32 2
  %147 = load i32, i32* %sv_flags217, align 4
  %and218 = and i32 %147, 16777216
  %tobool219 = icmp ne i32 %and218, 0
  br i1 %tobool219, label %if.then.220, label %if.else.266

if.then.220:                                      ; preds = %if.end.216
  %148 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags221 = getelementptr inbounds %struct.sv, %struct.sv* %148, i32 0, i32 2
  %149 = load i32, i32* %sv_flags221, align 4
  %and222 = and i32 %149, -2147483648
  %tobool223 = icmp ne i32 %and222, 0
  br i1 %tobool223, label %cond.true.224, label %cond.false.228

cond.true.224:                                    ; preds = %if.then.220
  %150 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any225 = getelementptr inbounds %struct.sv, %struct.sv* %150, i32 0, i32 0
  %151 = load i8*, i8** %sv_any225, align 8
  %152 = bitcast i8* %151 to %struct.xpvuv*
  %xuv_uv226 = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %152, i32 0, i32 3
  %153 = load i64, i64* %xuv_uv226, align 8
  %conv227 = uitofp i64 %153 to double
  br label %cond.end.232

cond.false.228:                                   ; preds = %if.then.220
  %154 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any229 = getelementptr inbounds %struct.sv, %struct.sv* %154, i32 0, i32 0
  %155 = load i8*, i8** %sv_any229, align 8
  %156 = bitcast i8* %155 to %struct.xpviv*
  %xiv_iv230 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %156, i32 0, i32 3
  %157 = load i64, i64* %xiv_iv230, align 8
  %conv231 = sitofp i64 %157 to double
  br label %cond.end.232

cond.end.232:                                     ; preds = %cond.false.228, %cond.true.224
  %cond233 = phi double [ %conv227, %cond.true.224 ], [ %conv231, %cond.false.228 ]
  %158 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any234 = getelementptr inbounds %struct.sv, %struct.sv* %158, i32 0, i32 0
  %159 = load i8*, i8** %sv_any234, align 8
  %160 = bitcast i8* %159 to %struct.xpvnv*
  %xnv_nv235 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %160, i32 0, i32 4
  store double %cond233, double* %xnv_nv235, align 8
  %161 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags236 = getelementptr inbounds %struct.sv, %struct.sv* %161, i32 0, i32 2
  %162 = load i32, i32* %sv_flags236, align 4
  %and237 = and i32 %162, -2147483648
  %tobool238 = icmp ne i32 %and237, 0
  br i1 %tobool238, label %cond.true.239, label %cond.false.252

cond.true.239:                                    ; preds = %cond.end.232
  %163 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any240 = getelementptr inbounds %struct.sv, %struct.sv* %163, i32 0, i32 0
  %164 = load i8*, i8** %sv_any240, align 8
  %165 = bitcast i8* %164 to %struct.xpvuv*
  %xuv_uv241 = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %165, i32 0, i32 3
  %166 = load i64, i64* %xuv_uv241, align 8
  %cmp242 = icmp ne i64 %166, -1
  br i1 %cmp242, label %land.lhs.true.244, label %if.else.262

land.lhs.true.244:                                ; preds = %cond.true.239
  %167 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any245 = getelementptr inbounds %struct.sv, %struct.sv* %167, i32 0, i32 0
  %168 = load i8*, i8** %sv_any245, align 8
  %169 = bitcast i8* %168 to %struct.xpvuv*
  %xuv_uv246 = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %169, i32 0, i32 3
  %170 = load i64, i64* %xuv_uv246, align 8
  %171 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any247 = getelementptr inbounds %struct.sv, %struct.sv* %171, i32 0, i32 0
  %172 = load i8*, i8** %sv_any247, align 8
  %173 = bitcast i8* %172 to %struct.xpvnv*
  %xnv_nv248 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %173, i32 0, i32 4
  %174 = load double, double* %xnv_nv248, align 8
  %call249 = call i64 @Perl_cast_uv(double %174)
  %cmp250 = icmp eq i64 %170, %call249
  br i1 %cmp250, label %if.then.260, label %if.else.262

cond.false.252:                                   ; preds = %cond.end.232
  %175 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any253 = getelementptr inbounds %struct.sv, %struct.sv* %175, i32 0, i32 0
  %176 = load i8*, i8** %sv_any253, align 8
  %177 = bitcast i8* %176 to %struct.xpviv*
  %xiv_iv254 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %177, i32 0, i32 3
  %178 = load i64, i64* %xiv_iv254, align 8
  %179 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any255 = getelementptr inbounds %struct.sv, %struct.sv* %179, i32 0, i32 0
  %180 = load i8*, i8** %sv_any255, align 8
  %181 = bitcast i8* %180 to %struct.xpvnv*
  %xnv_nv256 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %181, i32 0, i32 4
  %182 = load double, double* %xnv_nv256, align 8
  %call257 = call i64 @Perl_cast_iv(double %182)
  %cmp258 = icmp eq i64 %178, %call257
  br i1 %cmp258, label %if.then.260, label %if.else.262

if.then.260:                                      ; preds = %cond.false.252, %land.lhs.true.244
  %183 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags261 = getelementptr inbounds %struct.sv, %struct.sv* %183, i32 0, i32 2
  %184 = load i32, i32* %sv_flags261, align 4
  %or = or i32 %184, 33685504
  store i32 %or, i32* %sv_flags261, align 4
  br label %if.end.265

if.else.262:                                      ; preds = %cond.false.252, %land.lhs.true.244, %cond.true.239
  %185 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags263 = getelementptr inbounds %struct.sv, %struct.sv* %185, i32 0, i32 2
  %186 = load i32, i32* %sv_flags263, align 4
  %or264 = or i32 %186, 33554432
  store i32 %or264, i32* %sv_flags263, align 4
  br label %if.end.265

if.end.265:                                       ; preds = %if.else.262, %if.then.260
  br label %if.end.511

if.else.266:                                      ; preds = %if.end.216
  %187 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags267 = getelementptr inbounds %struct.sv, %struct.sv* %187, i32 0, i32 2
  %188 = load i32, i32* %sv_flags267, align 4
  %and268 = and i32 %188, 67108864
  %tobool269 = icmp ne i32 %and268, 0
  br i1 %tobool269, label %land.lhs.true.270, label %if.else.467

land.lhs.true.270:                                ; preds = %if.else.266
  %189 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any271 = getelementptr inbounds %struct.sv, %struct.sv* %189, i32 0, i32 0
  %190 = load i8*, i8** %sv_any271, align 8
  %191 = bitcast i8* %190 to %struct.xpv*
  %xpv_len272 = getelementptr inbounds %struct.xpv, %struct.xpv* %191, i32 0, i32 2
  %192 = load i64, i64* %xpv_len272, align 8
  %tobool273 = icmp ne i64 %192, 0
  br i1 %tobool273, label %if.then.274, label %if.else.467

if.then.274:                                      ; preds = %land.lhs.true.270
  %193 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any275 = getelementptr inbounds %struct.sv, %struct.sv* %193, i32 0, i32 0
  %194 = load i8*, i8** %sv_any275, align 8
  %195 = bitcast i8* %194 to %struct.xpv*
  %xpv_pv276 = getelementptr inbounds %struct.xpv, %struct.xpv* %195, i32 0, i32 0
  %196 = load i8*, i8** %xpv_pv276, align 8
  %197 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any277 = getelementptr inbounds %struct.sv, %struct.sv* %197, i32 0, i32 0
  %198 = load i8*, i8** %sv_any277, align 8
  %199 = bitcast i8* %198 to %struct.xpv*
  %xpv_cur278 = getelementptr inbounds %struct.xpv, %struct.xpv* %199, i32 0, i32 1
  %200 = load i64, i64* %xpv_cur278, align 8
  %call279 = call i32 @Perl_grok_number(i8* %196, i64 %200, i64* %value)
  store i32 %call279, i32* %numtype, align 4
  %201 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings280 = getelementptr inbounds %struct.cop, %struct.cop* %201, i32 0, i32 14
  %202 = load %struct.sv*, %struct.sv** %cop_warnings280, align 8
  %cmp281 = icmp ne %struct.sv* %202, null
  br i1 %cmp281, label %land.lhs.true.283, label %lor.lhs.false.299

land.lhs.true.283:                                ; preds = %if.then.274
  %203 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings284 = getelementptr inbounds %struct.cop, %struct.cop* %203, i32 0, i32 14
  %204 = load %struct.sv*, %struct.sv** %cop_warnings284, align 8
  %cmp285 = icmp ne %struct.sv* %204, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 2)
  br i1 %cmp285, label %land.lhs.true.287, label %lor.lhs.false.299

land.lhs.true.287:                                ; preds = %land.lhs.true.283
  %205 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings288 = getelementptr inbounds %struct.cop, %struct.cop* %205, i32 0, i32 14
  %206 = load %struct.sv*, %struct.sv** %cop_warnings288, align 8
  %cmp289 = icmp eq %struct.sv* %206, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 1)
  br i1 %cmp289, label %land.lhs.true.307, label %lor.lhs.false.291

lor.lhs.false.291:                                ; preds = %land.lhs.true.287
  %207 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings292 = getelementptr inbounds %struct.cop, %struct.cop* %207, i32 0, i32 14
  %208 = load %struct.sv*, %struct.sv** %cop_warnings292, align 8
  %sv_any293 = getelementptr inbounds %struct.sv, %struct.sv* %208, i32 0, i32 0
  %209 = load i8*, i8** %sv_any293, align 8
  %210 = bitcast i8* %209 to %struct.xpv*
  %xpv_pv294 = getelementptr inbounds %struct.xpv, %struct.xpv* %210, i32 0, i32 0
  %211 = load i8*, i8** %xpv_pv294, align 8
  %arrayidx295 = getelementptr inbounds i8, i8* %211, i64 3
  %212 = load i8, i8* %arrayidx295, align 1
  %conv296 = sext i8 %212 to i32
  %and297 = and i32 %conv296, 4
  %tobool298 = icmp ne i32 %and297, 0
  br i1 %tobool298, label %land.lhs.true.307, label %lor.lhs.false.299

lor.lhs.false.299:                                ; preds = %lor.lhs.false.291, %land.lhs.true.283, %if.then.274
  %213 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings300 = getelementptr inbounds %struct.cop, %struct.cop* %213, i32 0, i32 14
  %214 = load %struct.sv*, %struct.sv** %cop_warnings300, align 8
  %cmp301 = icmp eq %struct.sv* %214, null
  br i1 %cmp301, label %land.lhs.true.303, label %if.end.314

land.lhs.true.303:                                ; preds = %lor.lhs.false.299
  %215 = load i8, i8* @PL_dowarn, align 1
  %conv304 = zext i8 %215 to i32
  %and305 = and i32 %conv304, 1
  %tobool306 = icmp ne i32 %and305, 0
  br i1 %tobool306, label %land.lhs.true.307, label %if.end.314

land.lhs.true.307:                                ; preds = %land.lhs.true.303, %lor.lhs.false.291, %land.lhs.true.287
  %216 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags308 = getelementptr inbounds %struct.sv, %struct.sv* %216, i32 0, i32 2
  %217 = load i32, i32* %sv_flags308, align 4
  %and309 = and i32 %217, 16777216
  %tobool310 = icmp ne i32 %and309, 0
  br i1 %tobool310, label %if.end.314, label %land.lhs.true.311

land.lhs.true.311:                                ; preds = %land.lhs.true.307
  %218 = load i32, i32* %numtype, align 4
  %tobool312 = icmp ne i32 %218, 0
  br i1 %tobool312, label %if.end.314, label %if.then.313

if.then.313:                                      ; preds = %land.lhs.true.311
  %219 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @S_not_a_number(%struct.sv* %219)
  br label %if.end.314

if.end.314:                                       ; preds = %if.then.313, %land.lhs.true.311, %land.lhs.true.307, %land.lhs.true.303, %lor.lhs.false.299
  %220 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any315 = getelementptr inbounds %struct.sv, %struct.sv* %220, i32 0, i32 0
  %221 = load i8*, i8** %sv_any315, align 8
  %222 = bitcast i8* %221 to %struct.xpv*
  %xpv_pv316 = getelementptr inbounds %struct.xpv, %struct.xpv* %222, i32 0, i32 0
  %223 = load i8*, i8** %xpv_pv316, align 8
  %call317 = call double @Perl_my_atof(i8* %223)
  %224 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any318 = getelementptr inbounds %struct.sv, %struct.sv* %224, i32 0, i32 0
  %225 = load i8*, i8** %sv_any318, align 8
  %226 = bitcast i8* %225 to %struct.xpvnv*
  %xnv_nv319 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %226, i32 0, i32 4
  store double %call317, double* %xnv_nv319, align 8
  %227 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any320 = getelementptr inbounds %struct.sv, %struct.sv* %227, i32 0, i32 0
  %228 = load i8*, i8** %sv_any320, align 8
  %229 = bitcast i8* %228 to %struct.xpvnv*
  %xnv_nv321 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %229, i32 0, i32 4
  %230 = load double, double* %xnv_nv321, align 8
  %cmp322 = fcmp ogt double %230, 0.000000e+00
  br i1 %cmp322, label %cond.true.324, label %cond.false.327

cond.true.324:                                    ; preds = %if.end.314
  %231 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any325 = getelementptr inbounds %struct.sv, %struct.sv* %231, i32 0, i32 0
  %232 = load i8*, i8** %sv_any325, align 8
  %233 = bitcast i8* %232 to %struct.xpvnv*
  %xnv_nv326 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %233, i32 0, i32 4
  %234 = load double, double* %xnv_nv326, align 8
  br label %cond.end.330

cond.false.327:                                   ; preds = %if.end.314
  %235 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any328 = getelementptr inbounds %struct.sv, %struct.sv* %235, i32 0, i32 0
  %236 = load i8*, i8** %sv_any328, align 8
  %237 = bitcast i8* %236 to %struct.xpvnv*
  %xnv_nv329 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %237, i32 0, i32 4
  %238 = load double, double* %xnv_nv329, align 8
  %sub = fsub double -0.000000e+00, %238
  br label %cond.end.330

cond.end.330:                                     ; preds = %cond.false.327, %cond.true.324
  %cond331 = phi double [ %234, %cond.true.324 ], [ %sub, %cond.false.327 ]
  %call332 = call i64 @Perl_cast_uv(double %cond331)
  %cmp333 = icmp ugt i64 4294967296, %call332
  br i1 %cmp333, label %if.then.335, label %if.else.338

if.then.335:                                      ; preds = %cond.end.330
  %239 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags336 = getelementptr inbounds %struct.sv, %struct.sv* %239, i32 0, i32 2
  %240 = load i32, i32* %sv_flags336, align 4
  %or337 = or i32 %240, 33685504
  store i32 %or337, i32* %sv_flags336, align 4
  br label %if.end.466

if.else.338:                                      ; preds = %cond.end.330
  %241 = load i32, i32* %numtype, align 4
  %and339 = and i32 %241, 1
  %tobool340 = icmp ne i32 %and339, 0
  br i1 %tobool340, label %if.else.344, label %if.then.341

if.then.341:                                      ; preds = %if.else.338
  %242 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags342 = getelementptr inbounds %struct.sv, %struct.sv* %242, i32 0, i32 2
  %243 = load i32, i32* %sv_flags342, align 4
  %or343 = or i32 %243, 33685504
  store i32 %or343, i32* %sv_flags342, align 4
  br label %if.end.465

if.else.344:                                      ; preds = %if.else.338
  %244 = load i32, i32* %numtype, align 4
  %and345 = and i32 %244, 8
  %tobool346 = icmp ne i32 %and345, 0
  br i1 %tobool346, label %land.lhs.true.347, label %if.else.353

land.lhs.true.347:                                ; preds = %if.else.344
  %245 = load i64, i64* %value, align 8
  %cmp348 = icmp ugt i64 %245, -9223372036854775808
  br i1 %cmp348, label %if.then.350, label %if.else.353

if.then.350:                                      ; preds = %land.lhs.true.347
  %246 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags351 = getelementptr inbounds %struct.sv, %struct.sv* %246, i32 0, i32 2
  %247 = load i32, i32* %sv_flags351, align 4
  %or352 = or i32 %247, 33685504
  store i32 %or352, i32* %sv_flags351, align 4
  br label %if.end.464

if.else.353:                                      ; preds = %land.lhs.true.347, %if.else.344
  %248 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags354 = getelementptr inbounds %struct.sv, %struct.sv* %248, i32 0, i32 2
  %249 = load i32, i32* %sv_flags354, align 4
  %or355 = or i32 %249, 33554432
  store i32 %or355, i32* %sv_flags354, align 4
  %250 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags356 = getelementptr inbounds %struct.sv, %struct.sv* %250, i32 0, i32 2
  %251 = load i32, i32* %sv_flags356, align 4
  %and357 = and i32 %251, 2097152
  %tobool358 = icmp ne i32 %and357, 0
  br i1 %tobool358, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.else.353
  %252 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call359 = call i32 @Perl_sv_backoff(%struct.sv* %252)
  %tobool360 = icmp ne i32 %call359, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.else.353
  %253 = phi i1 [ false, %if.else.353 ], [ %tobool360, %land.rhs ]
  %land.ext = zext i1 %253 to i32
  %254 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags361 = getelementptr inbounds %struct.sv, %struct.sv* %254, i32 0, i32 2
  %255 = load i32, i32* %sv_flags361, align 4
  %or362 = or i32 %255, 16777216
  store i32 %or362, i32* %sv_flags361, align 4
  %256 = load i32, i32* %numtype, align 4
  %and363 = and i32 %256, 8
  %tobool364 = icmp ne i32 %and363, 0
  br i1 %tobool364, label %if.then.365, label %if.else.369

if.then.365:                                      ; preds = %land.end
  %257 = load i64, i64* %value, align 8
  %sub366 = sub nsw i64 0, %257
  %258 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any367 = getelementptr inbounds %struct.sv, %struct.sv* %258, i32 0, i32 0
  %259 = load i8*, i8** %sv_any367, align 8
  %260 = bitcast i8* %259 to %struct.xpviv*
  %xiv_iv368 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %260, i32 0, i32 3
  store i64 %sub366, i64* %xiv_iv368, align 8
  br label %if.end.381

if.else.369:                                      ; preds = %land.end
  %261 = load i64, i64* %value, align 8
  %cmp370 = icmp ule i64 %261, 9223372036854775807
  br i1 %cmp370, label %if.then.372, label %if.else.375

if.then.372:                                      ; preds = %if.else.369
  %262 = load i64, i64* %value, align 8
  %263 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any373 = getelementptr inbounds %struct.sv, %struct.sv* %263, i32 0, i32 0
  %264 = load i8*, i8** %sv_any373, align 8
  %265 = bitcast i8* %264 to %struct.xpviv*
  %xiv_iv374 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %265, i32 0, i32 3
  store i64 %262, i64* %xiv_iv374, align 8
  br label %if.end.380

if.else.375:                                      ; preds = %if.else.369
  %266 = load i64, i64* %value, align 8
  %267 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any376 = getelementptr inbounds %struct.sv, %struct.sv* %267, i32 0, i32 0
  %268 = load i8*, i8** %sv_any376, align 8
  %269 = bitcast i8* %268 to %struct.xpvuv*
  %xuv_uv377 = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %269, i32 0, i32 3
  store i64 %266, i64* %xuv_uv377, align 8
  %270 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags378 = getelementptr inbounds %struct.sv, %struct.sv* %270, i32 0, i32 2
  %271 = load i32, i32* %sv_flags378, align 4
  %or379 = or i32 %271, -2147483648
  store i32 %or379, i32* %sv_flags378, align 4
  br label %if.end.380

if.end.380:                                       ; preds = %if.else.375, %if.then.372
  br label %if.end.381

if.end.381:                                       ; preds = %if.end.380, %if.then.365
  %272 = load i32, i32* %numtype, align 4
  %and382 = and i32 %272, 4
  %tobool383 = icmp ne i32 %and382, 0
  br i1 %tobool383, label %if.then.384, label %if.else.385

if.then.384:                                      ; preds = %if.end.381
  br label %if.end.463

if.else.385:                                      ; preds = %if.end.381
  %273 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any386 = getelementptr inbounds %struct.sv, %struct.sv* %273, i32 0, i32 0
  %274 = load i8*, i8** %sv_any386, align 8
  %275 = bitcast i8* %274 to %struct.xpvnv*
  %xnv_nv387 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %275, i32 0, i32 4
  %276 = load double, double* %xnv_nv387, align 8
  store double %276, double* %nv, align 8
  %277 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any388 = getelementptr inbounds %struct.sv, %struct.sv* %277, i32 0, i32 0
  %278 = load i8*, i8** %sv_any388, align 8
  %279 = bitcast i8* %278 to %struct.xpvnv*
  %xnv_nv389 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %279, i32 0, i32 4
  %280 = load double, double* %xnv_nv389, align 8
  %cmp390 = fcmp olt double %280, 0x43E0000000000000
  br i1 %cmp390, label %if.then.392, label %if.else.423

if.then.392:                                      ; preds = %if.else.385
  %281 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any393 = getelementptr inbounds %struct.sv, %struct.sv* %281, i32 0, i32 0
  %282 = load i8*, i8** %sv_any393, align 8
  %283 = bitcast i8* %282 to %struct.xpviv*
  %xiv_iv394 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %283, i32 0, i32 3
  %284 = load i64, i64* %xiv_iv394, align 8
  %285 = load double, double* %nv, align 8
  %call395 = call i64 @Perl_cast_iv(double %285)
  %cmp396 = icmp eq i64 %284, %call395
  br i1 %cmp396, label %if.then.398, label %if.else.411

if.then.398:                                      ; preds = %if.then.392
  %286 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags399 = getelementptr inbounds %struct.sv, %struct.sv* %286, i32 0, i32 2
  %287 = load i32, i32* %sv_flags399, align 4
  %or400 = or i32 %287, 33685504
  store i32 %or400, i32* %sv_flags399, align 4
  %288 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags401 = getelementptr inbounds %struct.sv, %struct.sv* %288, i32 0, i32 2
  %289 = load i32, i32* %sv_flags401, align 4
  %and402 = and i32 %289, 2097152
  %tobool403 = icmp ne i32 %and402, 0
  br i1 %tobool403, label %land.rhs.404, label %land.end.407

land.rhs.404:                                     ; preds = %if.then.398
  %290 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call405 = call i32 @Perl_sv_backoff(%struct.sv* %290)
  %tobool406 = icmp ne i32 %call405, 0
  br label %land.end.407

land.end.407:                                     ; preds = %land.rhs.404, %if.then.398
  %291 = phi i1 [ false, %if.then.398 ], [ %tobool406, %land.rhs.404 ]
  %land.ext408 = zext i1 %291 to i32
  %292 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags409 = getelementptr inbounds %struct.sv, %struct.sv* %292, i32 0, i32 2
  %293 = load i32, i32* %sv_flags409, align 4
  %or410 = or i32 %293, 16842752
  store i32 %or410, i32* %sv_flags409, align 4
  br label %if.end.422

if.else.411:                                      ; preds = %if.then.392
  %294 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags412 = getelementptr inbounds %struct.sv, %struct.sv* %294, i32 0, i32 2
  %295 = load i32, i32* %sv_flags412, align 4
  %and413 = and i32 %295, 2097152
  %tobool414 = icmp ne i32 %and413, 0
  br i1 %tobool414, label %land.rhs.415, label %land.end.418

land.rhs.415:                                     ; preds = %if.else.411
  %296 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call416 = call i32 @Perl_sv_backoff(%struct.sv* %296)
  %tobool417 = icmp ne i32 %call416, 0
  br label %land.end.418

land.end.418:                                     ; preds = %land.rhs.415, %if.else.411
  %297 = phi i1 [ false, %if.else.411 ], [ %tobool417, %land.rhs.415 ]
  %land.ext419 = zext i1 %297 to i32
  %298 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags420 = getelementptr inbounds %struct.sv, %struct.sv* %298, i32 0, i32 2
  %299 = load i32, i32* %sv_flags420, align 4
  %or421 = or i32 %299, 16842752
  store i32 %or421, i32* %sv_flags420, align 4
  br label %if.end.422

if.end.422:                                       ; preds = %land.end.418, %land.end.407
  br label %if.end.462

if.else.423:                                      ; preds = %if.else.385
  %300 = load i32, i32* %numtype, align 4
  %and424 = and i32 %300, 4
  %tobool425 = icmp ne i32 %and424, 0
  br i1 %tobool425, label %if.then.426, label %if.else.427

if.then.426:                                      ; preds = %if.else.423
  br label %if.end.461

if.else.427:                                      ; preds = %if.else.423
  %301 = load double, double* %nv, align 8
  %call428 = call i64 @Perl_cast_uv(double %301)
  store i64 %call428, i64* %nv_as_uv, align 8
  %302 = load i64, i64* %value, align 8
  %303 = load i64, i64* %nv_as_uv, align 8
  %cmp429 = icmp eq i64 %302, %303
  br i1 %cmp429, label %land.lhs.true.431, label %if.else.449

land.lhs.true.431:                                ; preds = %if.else.427
  %304 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any432 = getelementptr inbounds %struct.sv, %struct.sv* %304, i32 0, i32 0
  %305 = load i8*, i8** %sv_any432, align 8
  %306 = bitcast i8* %305 to %struct.xpvuv*
  %xuv_uv433 = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %306, i32 0, i32 3
  %307 = load i64, i64* %xuv_uv433, align 8
  %cmp434 = icmp ne i64 %307, -1
  br i1 %cmp434, label %if.then.436, label %if.else.449

if.then.436:                                      ; preds = %land.lhs.true.431
  %308 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags437 = getelementptr inbounds %struct.sv, %struct.sv* %308, i32 0, i32 2
  %309 = load i32, i32* %sv_flags437, align 4
  %or438 = or i32 %309, 33685504
  store i32 %or438, i32* %sv_flags437, align 4
  %310 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags439 = getelementptr inbounds %struct.sv, %struct.sv* %310, i32 0, i32 2
  %311 = load i32, i32* %sv_flags439, align 4
  %and440 = and i32 %311, 2097152
  %tobool441 = icmp ne i32 %and440, 0
  br i1 %tobool441, label %land.rhs.442, label %land.end.445

land.rhs.442:                                     ; preds = %if.then.436
  %312 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call443 = call i32 @Perl_sv_backoff(%struct.sv* %312)
  %tobool444 = icmp ne i32 %call443, 0
  br label %land.end.445

land.end.445:                                     ; preds = %land.rhs.442, %if.then.436
  %313 = phi i1 [ false, %if.then.436 ], [ %tobool444, %land.rhs.442 ]
  %land.ext446 = zext i1 %313 to i32
  %314 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags447 = getelementptr inbounds %struct.sv, %struct.sv* %314, i32 0, i32 2
  %315 = load i32, i32* %sv_flags447, align 4
  %or448 = or i32 %315, 16842752
  store i32 %or448, i32* %sv_flags447, align 4
  br label %if.end.460

if.else.449:                                      ; preds = %land.lhs.true.431, %if.else.427
  %316 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags450 = getelementptr inbounds %struct.sv, %struct.sv* %316, i32 0, i32 2
  %317 = load i32, i32* %sv_flags450, align 4
  %and451 = and i32 %317, 2097152
  %tobool452 = icmp ne i32 %and451, 0
  br i1 %tobool452, label %land.rhs.453, label %land.end.456

land.rhs.453:                                     ; preds = %if.else.449
  %318 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call454 = call i32 @Perl_sv_backoff(%struct.sv* %318)
  %tobool455 = icmp ne i32 %call454, 0
  br label %land.end.456

land.end.456:                                     ; preds = %land.rhs.453, %if.else.449
  %319 = phi i1 [ false, %if.else.449 ], [ %tobool455, %land.rhs.453 ]
  %land.ext457 = zext i1 %319 to i32
  %320 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags458 = getelementptr inbounds %struct.sv, %struct.sv* %320, i32 0, i32 2
  %321 = load i32, i32* %sv_flags458, align 4
  %or459 = or i32 %321, 16842752
  store i32 %or459, i32* %sv_flags458, align 4
  br label %if.end.460

if.end.460:                                       ; preds = %land.end.456, %land.end.445
  br label %if.end.461

if.end.461:                                       ; preds = %if.end.460, %if.then.426
  br label %if.end.462

if.end.462:                                       ; preds = %if.end.461, %if.end.422
  br label %if.end.463

if.end.463:                                       ; preds = %if.end.462, %if.then.384
  br label %if.end.464

if.end.464:                                       ; preds = %if.end.463, %if.then.350
  br label %if.end.465

if.end.465:                                       ; preds = %if.end.464, %if.then.341
  br label %if.end.466

if.end.466:                                       ; preds = %if.end.465, %if.then.335
  br label %if.end.510

if.else.467:                                      ; preds = %land.lhs.true.270, %if.else.266
  %322 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings468 = getelementptr inbounds %struct.cop, %struct.cop* %322, i32 0, i32 14
  %323 = load %struct.sv*, %struct.sv** %cop_warnings468, align 8
  %cmp469 = icmp ne %struct.sv* %323, null
  br i1 %cmp469, label %land.lhs.true.471, label %lor.lhs.false.487

land.lhs.true.471:                                ; preds = %if.else.467
  %324 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings472 = getelementptr inbounds %struct.cop, %struct.cop* %324, i32 0, i32 14
  %325 = load %struct.sv*, %struct.sv** %cop_warnings472, align 8
  %cmp473 = icmp ne %struct.sv* %325, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 2)
  br i1 %cmp473, label %land.lhs.true.475, label %lor.lhs.false.487

land.lhs.true.475:                                ; preds = %land.lhs.true.471
  %326 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings476 = getelementptr inbounds %struct.cop, %struct.cop* %326, i32 0, i32 14
  %327 = load %struct.sv*, %struct.sv** %cop_warnings476, align 8
  %cmp477 = icmp eq %struct.sv* %327, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 1)
  br i1 %cmp477, label %land.lhs.true.495, label %lor.lhs.false.479

lor.lhs.false.479:                                ; preds = %land.lhs.true.475
  %328 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings480 = getelementptr inbounds %struct.cop, %struct.cop* %328, i32 0, i32 14
  %329 = load %struct.sv*, %struct.sv** %cop_warnings480, align 8
  %sv_any481 = getelementptr inbounds %struct.sv, %struct.sv* %329, i32 0, i32 0
  %330 = load i8*, i8** %sv_any481, align 8
  %331 = bitcast i8* %330 to %struct.xpv*
  %xpv_pv482 = getelementptr inbounds %struct.xpv, %struct.xpv* %331, i32 0, i32 0
  %332 = load i8*, i8** %xpv_pv482, align 8
  %arrayidx483 = getelementptr inbounds i8, i8* %332, i64 10
  %333 = load i8, i8* %arrayidx483, align 1
  %conv484 = sext i8 %333 to i32
  %and485 = and i32 %conv484, 4
  %tobool486 = icmp ne i32 %and485, 0
  br i1 %tobool486, label %land.lhs.true.495, label %lor.lhs.false.487

lor.lhs.false.487:                                ; preds = %lor.lhs.false.479, %land.lhs.true.471, %if.else.467
  %334 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings488 = getelementptr inbounds %struct.cop, %struct.cop* %334, i32 0, i32 14
  %335 = load %struct.sv*, %struct.sv** %cop_warnings488, align 8
  %cmp489 = icmp eq %struct.sv* %335, null
  br i1 %cmp489, label %land.lhs.true.491, label %if.end.502

land.lhs.true.491:                                ; preds = %lor.lhs.false.487
  %336 = load i8, i8* @PL_dowarn, align 1
  %conv492 = zext i8 %336 to i32
  %and493 = and i32 %conv492, 1
  %tobool494 = icmp ne i32 %and493, 0
  br i1 %tobool494, label %land.lhs.true.495, label %if.end.502

land.lhs.true.495:                                ; preds = %land.lhs.true.491, %lor.lhs.false.479, %land.lhs.true.475
  %337 = load i32, i32* @PL_localizing, align 4
  %tobool496 = icmp ne i32 %337, 0
  br i1 %tobool496, label %if.end.502, label %land.lhs.true.497

land.lhs.true.497:                                ; preds = %land.lhs.true.495
  %338 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags498 = getelementptr inbounds %struct.sv, %struct.sv* %338, i32 0, i32 2
  %339 = load i32, i32* %sv_flags498, align 4
  %and499 = and i32 %339, 512
  %tobool500 = icmp ne i32 %and499, 0
  br i1 %tobool500, label %if.end.502, label %if.then.501

if.then.501:                                      ; preds = %land.lhs.true.497
  call void @Perl_report_uninit()
  br label %if.end.502

if.end.502:                                       ; preds = %if.then.501, %land.lhs.true.497, %land.lhs.true.495, %land.lhs.true.491, %lor.lhs.false.487
  %340 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags503 = getelementptr inbounds %struct.sv, %struct.sv* %340, i32 0, i32 2
  %341 = load i32, i32* %sv_flags503, align 4
  %and504 = and i32 %341, 255
  %cmp505 = icmp ult i32 %and504, 2
  br i1 %cmp505, label %if.then.507, label %if.end.509

if.then.507:                                      ; preds = %if.end.502
  %342 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call508 = call signext i8 @Perl_sv_upgrade(%struct.sv* %342, i32 2)
  br label %if.end.509

if.end.509:                                       ; preds = %if.then.507, %if.end.502
  store double 0.000000e+00, double* %retval
  br label %return

if.end.510:                                       ; preds = %if.end.466
  br label %if.end.511

if.end.511:                                       ; preds = %if.end.510, %if.end.265
  %343 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any512 = getelementptr inbounds %struct.sv, %struct.sv* %343, i32 0, i32 0
  %344 = load i8*, i8** %sv_any512, align 8
  %345 = bitcast i8* %344 to %struct.xpvnv*
  %xnv_nv513 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %345, i32 0, i32 4
  %346 = load double, double* %xnv_nv513, align 8
  store double %346, double* %retval
  br label %return

return:                                           ; preds = %if.end.511, %if.end.509, %if.then.213, %if.end.184, %if.end.134, %cond.end, %if.end.100, %if.else, %if.then.55, %if.end.43, %if.then.6, %if.then
  %347 = load double, double* %retval
  ret double %347
}

; Function Attrs: nounwind uwtable
define i8* @Perl_sv_2pv_nolen(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %n_a = alloca i64, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i8* @Perl_sv_2pv_flags(%struct.sv* %0, i64* %n_a, i32 2)
  ret i8* %call
}

; Function Attrs: nounwind uwtable
define i8* @Perl_sv_2pv(%struct.sv* %sv, i64* %lp) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %lp.addr = alloca i64*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i64* %lp, i64** %lp.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %1 = load i64*, i64** %lp.addr, align 8
  %call = call i8* @Perl_sv_2pv_flags(%struct.sv* %0, i64* %1, i32 2)
  ret i8* %call
}

declare i32 @sprintf(i8*, i8*, ...) #1

declare i8* @gcvt(double, i32, i8*) #1

declare %struct.magic* @Perl_mg_find(%struct.sv*, i32) #1

; Function Attrs: nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #2

; Function Attrs: nounwind uwtable
define %struct.sv* @Perl_newSV(i64 %len) #0 {
entry:
  %len.addr = alloca i64, align 8
  %sv = alloca %struct.sv*, align 8
  %tmp = alloca i32, align 4
  %tmp2 = alloca i32, align 4
  store i64 %len, i64* %len.addr, align 8
  %0 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  store %struct.sv* %1, %struct.sv** %sv, align 8
  %2 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 0
  %3 = load i8*, i8** %sv_any, align 8
  %4 = bitcast i8* %3 to %struct.sv*
  store %struct.sv* %4, %struct.sv** @PL_sv_root, align 8
  %5 = load i32, i32* @PL_sv_count, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* @PL_sv_count, align 4
  store i32 %inc, i32* %tmp
  %6 = load i32, i32* %tmp
  br label %if.end

if.else:                                          ; preds = %entry
  %call = call %struct.sv* @S_more_sv()
  store %struct.sv* %call, %struct.sv** %sv, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %7 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any1 = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 0
  store i8* null, i8** %sv_any1, align 8
  %8 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 1
  store i32 1, i32* %sv_refcnt, align 4
  %9 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 2
  store i32 0, i32* %sv_flags, align 4
  store i32 0, i32* %tmp2
  %10 = load i32, i32* %tmp2
  %11 = load i64, i64* %len.addr, align 8
  %tobool3 = icmp ne i64 %11, 0
  br i1 %tobool3, label %if.then.4, label %if.end.10

if.then.4:                                        ; preds = %if.end
  %12 = load %struct.sv*, %struct.sv** %sv, align 8
  %call5 = call signext i8 @Perl_sv_upgrade(%struct.sv* %12, i32 4)
  %13 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any6 = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 0
  %14 = load i8*, i8** %sv_any6, align 8
  %15 = bitcast i8* %14 to %struct.xpv*
  %xpv_len = getelementptr inbounds %struct.xpv, %struct.xpv* %15, i32 0, i32 2
  %16 = load i64, i64* %xpv_len, align 8
  %17 = load i64, i64* %len.addr, align 8
  %add = add i64 %17, 1
  %cmp = icmp ult i64 %16, %add
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.4
  %18 = load %struct.sv*, %struct.sv** %sv, align 8
  %19 = load i64, i64* %len.addr, align 8
  %add7 = add i64 %19, 1
  %call8 = call i8* @Perl_sv_grow(%struct.sv* %18, i64 %add7)
  br label %cond.end

cond.false:                                       ; preds = %if.then.4
  %20 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any9 = getelementptr inbounds %struct.sv, %struct.sv* %20, i32 0, i32 0
  %21 = load i8*, i8** %sv_any9, align 8
  %22 = bitcast i8* %21 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %22, i32 0, i32 0
  %23 = load i8*, i8** %xpv_pv, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %call8, %cond.true ], [ %23, %cond.false ]
  br label %if.end.10

if.end.10:                                        ; preds = %cond.end, %if.end
  %24 = load %struct.sv*, %struct.sv** %sv, align 8
  ret %struct.sv* %24
}

; Function Attrs: nounwind uwtable
define void @Perl_sv_setpvf(%struct.sv* %sv, i8* %pat, ...) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %pat.addr = alloca i8*, align 8
  %args = alloca [1 x %struct.__va_list_tag], align 16
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i8* %pat, i8** %pat.addr, align 8
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %args, i32 0, i32 0
  %arraydecay1 = bitcast %struct.__va_list_tag* %arraydecay to i8*
  call void @llvm.va_start(i8* %arraydecay1)
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %1 = load i8*, i8** %pat.addr, align 8
  call void @Perl_sv_vsetpvf(%struct.sv* %0, i8* %1, [1 x %struct.__va_list_tag]* %args)
  %arraydecay2 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %args, i32 0, i32 0
  %arraydecay23 = bitcast %struct.__va_list_tag* %arraydecay2 to i8*
  call void @llvm.va_end(i8* %arraydecay23)
  ret void
}

declare i64 @strlen(i8*) #1

; Function Attrs: nounwind uwtable
define internal i8* @uiv_2buf(i8* %buf, i64 %iv, i64 %uv, i32 %is_uv, i8** %peob) #0 {
entry:
  %buf.addr = alloca i8*, align 8
  %iv.addr = alloca i64, align 8
  %uv.addr = alloca i64, align 8
  %is_uv.addr = alloca i32, align 4
  %peob.addr = alloca i8**, align 8
  %ptr = alloca i8*, align 8
  %ebuf = alloca i8*, align 8
  %sign = alloca i32, align 4
  store i8* %buf, i8** %buf.addr, align 8
  store i64 %iv, i64* %iv.addr, align 8
  store i64 %uv, i64* %uv.addr, align 8
  store i32 %is_uv, i32* %is_uv.addr, align 4
  store i8** %peob, i8*** %peob.addr, align 8
  %0 = load i8*, i8** %buf.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 22
  store i8* %add.ptr, i8** %ptr, align 8
  %1 = load i8*, i8** %ptr, align 8
  store i8* %1, i8** %ebuf, align 8
  %2 = load i32, i32* %is_uv.addr, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 0, i32* %sign, align 4
  br label %if.end.3

if.else:                                          ; preds = %entry
  %3 = load i64, i64* %iv.addr, align 8
  %cmp = icmp sge i64 %3, 0
  br i1 %cmp, label %if.then.1, label %if.else.2

if.then.1:                                        ; preds = %if.else
  %4 = load i64, i64* %iv.addr, align 8
  store i64 %4, i64* %uv.addr, align 8
  store i32 0, i32* %sign, align 4
  br label %if.end

if.else.2:                                        ; preds = %if.else
  %5 = load i64, i64* %iv.addr, align 8
  %sub = sub nsw i64 0, %5
  store i64 %sub, i64* %uv.addr, align 8
  store i32 1, i32* %sign, align 4
  br label %if.end

if.end:                                           ; preds = %if.else.2, %if.then.1
  br label %if.end.3

if.end.3:                                         ; preds = %if.end, %if.then
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end.3
  %6 = load i64, i64* %uv.addr, align 8
  %rem = urem i64 %6, 10
  %conv = trunc i64 %rem to i8
  %conv4 = sext i8 %conv to i32
  %add = add nsw i32 48, %conv4
  %conv5 = trunc i32 %add to i8
  %7 = load i8*, i8** %ptr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %7, i32 -1
  store i8* %incdec.ptr, i8** %ptr, align 8
  store i8 %conv5, i8* %incdec.ptr, align 1
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %8 = load i64, i64* %uv.addr, align 8
  %div = udiv i64 %8, 10
  store i64 %div, i64* %uv.addr, align 8
  %tobool6 = icmp ne i64 %div, 0
  br i1 %tobool6, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %9 = load i32, i32* %sign, align 4
  %tobool7 = icmp ne i32 %9, 0
  br i1 %tobool7, label %if.then.8, label %if.end.10

if.then.8:                                        ; preds = %do.end
  %10 = load i8*, i8** %ptr, align 8
  %incdec.ptr9 = getelementptr inbounds i8, i8* %10, i32 -1
  store i8* %incdec.ptr9, i8** %ptr, align 8
  store i8 45, i8* %incdec.ptr9, align 1
  br label %if.end.10

if.end.10:                                        ; preds = %if.then.8, %do.end
  %11 = load i8*, i8** %ebuf, align 8
  %12 = load i8**, i8*** %peob.addr, align 8
  store i8* %11, i8** %12, align 8
  %13 = load i8*, i8** %ptr, align 8
  ret i8* %13
}

declare i32* @__errno_location() #1

; Function Attrs: nounwind uwtable
define %struct.sv* @Perl_newSVpv(i8* %s, i64 %len) #0 {
entry:
  %s.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %sv = alloca %struct.sv*, align 8
  %tmp = alloca i32, align 4
  %tmp2 = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  %0 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  store %struct.sv* %1, %struct.sv** %sv, align 8
  %2 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 0
  %3 = load i8*, i8** %sv_any, align 8
  %4 = bitcast i8* %3 to %struct.sv*
  store %struct.sv* %4, %struct.sv** @PL_sv_root, align 8
  %5 = load i32, i32* @PL_sv_count, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* @PL_sv_count, align 4
  store i32 %inc, i32* %tmp
  %6 = load i32, i32* %tmp
  br label %if.end

if.else:                                          ; preds = %entry
  %call = call %struct.sv* @S_more_sv()
  store %struct.sv* %call, %struct.sv** %sv, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %7 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any1 = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 0
  store i8* null, i8** %sv_any1, align 8
  %8 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 1
  store i32 1, i32* %sv_refcnt, align 4
  %9 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 2
  store i32 0, i32* %sv_flags, align 4
  store i32 0, i32* %tmp2
  %10 = load i32, i32* %tmp2
  %11 = load i64, i64* %len.addr, align 8
  %tobool3 = icmp ne i64 %11, 0
  br i1 %tobool3, label %if.end.6, label %if.then.4

if.then.4:                                        ; preds = %if.end
  %12 = load i8*, i8** %s.addr, align 8
  %call5 = call i64 @strlen(i8* %12)
  store i64 %call5, i64* %len.addr, align 8
  br label %if.end.6

if.end.6:                                         ; preds = %if.then.4, %if.end
  %13 = load %struct.sv*, %struct.sv** %sv, align 8
  %14 = load i8*, i8** %s.addr, align 8
  %15 = load i64, i64* %len.addr, align 8
  call void @Perl_sv_setpvn(%struct.sv* %13, i8* %14, i64 %15)
  %16 = load %struct.sv*, %struct.sv** %sv, align 8
  ret %struct.sv* %16
}

; Function Attrs: nounwind uwtable
define %struct.sv* @Perl_sv_2mortal(%struct.sv* %sv) #0 {
entry:
  %retval = alloca %struct.sv*, align 8
  %sv.addr = alloca %struct.sv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  store %struct.sv* %1, %struct.sv** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags, align 4
  %and = and i32 %3, 8388608
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %land.lhs.true, label %if.end.8

land.lhs.true:                                    ; preds = %if.end
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %cmp = icmp eq %struct.sv* %4, @PL_sv_undef
  br i1 %cmp, label %if.then.7, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %5 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %cmp2 = icmp eq %struct.sv* %5, @PL_sv_yes
  br i1 %cmp2, label %if.then.7, label %lor.lhs.false.3

lor.lhs.false.3:                                  ; preds = %lor.lhs.false
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %cmp4 = icmp eq %struct.sv* %6, @PL_sv_no
  br i1 %cmp4, label %if.then.7, label %lor.lhs.false.5

lor.lhs.false.5:                                  ; preds = %lor.lhs.false.3
  %7 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %cmp6 = icmp eq %struct.sv* %7, @PL_sv_placeholder
  br i1 %cmp6, label %if.then.7, label %if.end.8

if.then.7:                                        ; preds = %lor.lhs.false.5, %lor.lhs.false.3, %lor.lhs.false, %land.lhs.true
  %8 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  store %struct.sv* %8, %struct.sv** %retval
  br label %return

if.end.8:                                         ; preds = %lor.lhs.false.5, %if.end
  %9 = load i32, i32* @PL_tmps_ix, align 4
  %add = add nsw i32 %9, 1
  %10 = load i32, i32* @PL_tmps_max, align 4
  %cmp9 = icmp sge i32 %add, %10
  br i1 %cmp9, label %if.then.10, label %if.end.11

if.then.10:                                       ; preds = %if.end.8
  call void @Perl_tmps_grow(i32 1)
  br label %if.end.11

if.end.11:                                        ; preds = %if.then.10, %if.end.8
  %11 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %12 = load i32, i32* @PL_tmps_ix, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* @PL_tmps_ix, align 4
  %idxprom = sext i32 %inc to i64
  %13 = load %struct.sv**, %struct.sv*** @PL_tmps_stack, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %13, i64 %idxprom
  store %struct.sv* %11, %struct.sv** %arrayidx, align 8
  %14 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags12 = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 2
  %15 = load i32, i32* %sv_flags12, align 4
  %or = or i32 %15, 2048
  store i32 %or, i32* %sv_flags12, align 4
  %16 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  store %struct.sv* %16, %struct.sv** %retval
  br label %return

return:                                           ; preds = %if.end.11, %if.then.7, %if.then
  %17 = load %struct.sv*, %struct.sv** %retval
  ret %struct.sv* %17
}

declare i8* @strcpy(i8*, i8*) #1

; Function Attrs: nounwind uwtable
define void @Perl_sv_copypv(%struct.sv* %dsv, %struct.sv* %ssv) #0 {
entry:
  %dsv.addr = alloca %struct.sv*, align 8
  %ssv.addr = alloca %struct.sv*, align 8
  %len = alloca i64, align 8
  %s = alloca i8*, align 8
  store %struct.sv* %dsv, %struct.sv** %dsv.addr, align 8
  store %struct.sv* %ssv, %struct.sv** %ssv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %ssv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 262144
  %cmp = icmp eq i32 %and, 262144
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %ssv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 0
  %3 = load i8*, i8** %sv_any, align 8
  %4 = bitcast i8* %3 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %4, i32 0, i32 1
  %5 = load i64, i64* %xpv_cur, align 8
  store i64 %5, i64* %len, align 8
  %6 = load %struct.sv*, %struct.sv** %ssv.addr, align 8
  %sv_any1 = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 0
  %7 = load i8*, i8** %sv_any1, align 8
  %8 = bitcast i8* %7 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %8, i32 0, i32 0
  %9 = load i8*, i8** %xpv_pv, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %10 = load %struct.sv*, %struct.sv** %ssv.addr, align 8
  %call = call i8* @Perl_sv_2pv_flags(%struct.sv* %10, i64* %len, i32 2)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %9, %cond.true ], [ %call, %cond.false ]
  store i8* %cond, i8** %s, align 8
  %11 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  %12 = load i8*, i8** %s, align 8
  %13 = load i64, i64* %len, align 8
  call void @Perl_sv_setpvn(%struct.sv* %11, i8* %12, i64 %13)
  %14 = load %struct.sv*, %struct.sv** %ssv.addr, align 8
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 2
  %15 = load i32, i32* %sv_flags2, align 4
  %and3 = and i32 %15, 536870912
  %tobool = icmp ne i32 %and3, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end
  %16 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  %sv_flags4 = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 2
  %17 = load i32, i32* %sv_flags4, align 4
  %or = or i32 %17, 536870912
  store i32 %or, i32* %sv_flags4, align 4
  br label %if.end

if.else:                                          ; preds = %cond.end
  %18 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  %sv_flags5 = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 2
  %19 = load i32, i32* %sv_flags5, align 4
  %and6 = and i32 %19, -536870913
  store i32 %and6, i32* %sv_flags5, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define void @Perl_sv_setpvn(%struct.sv* %sv, i8* %ptr, i64 %len) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %ptr.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %dptr = alloca i8*, align 8
  %iv = alloca i64, align 8
  %tmp = alloca i64, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 9961472
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_force_normal(%struct.sv* %2)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load i8*, i8** %ptr.addr, align 8
  %tobool1 = icmp ne i8* %3, null
  br i1 %tobool1, label %if.else, label %if.then.2

if.then.2:                                        ; preds = %if.end
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags3 = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 2
  %5 = load i32, i32* %sv_flags3, align 4
  %and4 = and i32 %5, 1223753727
  store i32 %and4, i32* %sv_flags3, align 4
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags5 = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 2
  %7 = load i32, i32* %sv_flags5, align 4
  %and6 = and i32 %7, 2097152
  %tobool7 = icmp ne i32 %and6, 0
  br i1 %tobool7, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then.2
  %8 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i32 @Perl_sv_backoff(%struct.sv* %8)
  %tobool8 = icmp ne i32 %call, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then.2
  %9 = phi i1 [ false, %if.then.2 ], [ %tobool8, %land.rhs ]
  %land.ext = zext i1 %9 to i32
  br label %if.end.36

if.else:                                          ; preds = %if.end
  %10 = load i64, i64* %len.addr, align 8
  store i64 %10, i64* %iv, align 8
  %11 = load i64, i64* %iv, align 8
  %cmp = icmp slt i64 %11, 0
  br i1 %cmp, label %if.then.9, label %if.end.10

if.then.9:                                        ; preds = %if.else
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.35, i32 0, i32 0))
  br label %if.end.10

if.end.10:                                        ; preds = %if.then.9, %if.else
  br label %if.end.11

if.end.11:                                        ; preds = %if.end.10
  %12 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags12 = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 2
  %13 = load i32, i32* %sv_flags12, align 4
  %and13 = and i32 %13, 255
  %cmp14 = icmp uge i32 %and13, 4
  br i1 %cmp14, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.end.11
  %14 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call15 = call signext i8 @Perl_sv_upgrade(%struct.sv* %14, i32 4)
  %conv = sext i8 %call15 to i32
  %tobool16 = icmp ne i32 %conv, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.end.11
  %15 = phi i1 [ true, %if.end.11 ], [ %tobool16, %lor.rhs ]
  %lor.ext = zext i1 %15 to i32
  %16 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 0
  %17 = load i8*, i8** %sv_any, align 8
  %18 = bitcast i8* %17 to %struct.xpv*
  %xpv_len = getelementptr inbounds %struct.xpv, %struct.xpv* %18, i32 0, i32 2
  %19 = load i64, i64* %xpv_len, align 8
  %20 = load i64, i64* %len.addr, align 8
  %add = add i64 %20, 1
  %cmp17 = icmp ult i64 %19, %add
  br i1 %cmp17, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.end
  %21 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %22 = load i64, i64* %len.addr, align 8
  %add19 = add i64 %22, 1
  %call20 = call i8* @Perl_sv_grow(%struct.sv* %21, i64 %add19)
  br label %cond.end

cond.false:                                       ; preds = %lor.end
  %23 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any21 = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 0
  %24 = load i8*, i8** %sv_any21, align 8
  %25 = bitcast i8* %24 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %25, i32 0, i32 0
  %26 = load i8*, i8** %xpv_pv, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %call20, %cond.true ], [ %26, %cond.false ]
  %27 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any22 = getelementptr inbounds %struct.sv, %struct.sv* %27, i32 0, i32 0
  %28 = load i8*, i8** %sv_any22, align 8
  %29 = bitcast i8* %28 to %struct.xpv*
  %xpv_pv23 = getelementptr inbounds %struct.xpv, %struct.xpv* %29, i32 0, i32 0
  %30 = load i8*, i8** %xpv_pv23, align 8
  store i8* %30, i8** %dptr, align 8
  %31 = load i8*, i8** %dptr, align 8
  %32 = load i8*, i8** %ptr.addr, align 8
  %33 = load i64, i64* %len.addr, align 8
  %mul = mul i64 %33, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %31, i8* %32, i64 %mul, i32 1, i1 false)
  %34 = load i64, i64* %len.addr, align 8
  %35 = load i8*, i8** %dptr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %35, i64 %34
  store i8 0, i8* %arrayidx, align 1
  %36 = load i64, i64* %len.addr, align 8
  %37 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any24 = getelementptr inbounds %struct.sv, %struct.sv* %37, i32 0, i32 0
  %38 = load i8*, i8** %sv_any24, align 8
  %39 = bitcast i8* %38 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %39, i32 0, i32 1
  store i64 %36, i64* %xpv_cur, align 8
  store i64 %36, i64* %tmp
  %40 = load i64, i64* %tmp
  %41 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags25 = getelementptr inbounds %struct.sv, %struct.sv* %41, i32 0, i32 2
  %42 = load i32, i32* %sv_flags25, align 4
  %and26 = and i32 %42, 1760624639
  store i32 %and26, i32* %sv_flags25, align 4
  %43 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags27 = getelementptr inbounds %struct.sv, %struct.sv* %43, i32 0, i32 2
  %44 = load i32, i32* %sv_flags27, align 4
  %or = or i32 %44, 67371008
  store i32 %or, i32* %sv_flags27, align 4
  %45 = load i8, i8* @PL_tainting, align 1
  %tobool28 = icmp ne i8 %45, 0
  br i1 %tobool28, label %if.then.29, label %if.end.36

if.then.29:                                       ; preds = %cond.end
  %46 = load i8, i8* @PL_tainted, align 1
  %tobool30 = icmp ne i8 %46, 0
  br i1 %tobool30, label %if.then.31, label %if.end.35

if.then.31:                                       ; preds = %if.then.29
  %47 = load i8, i8* @PL_tainting, align 1
  %tobool32 = icmp ne i8 %47, 0
  br i1 %tobool32, label %if.then.33, label %if.end.34

if.then.33:                                       ; preds = %if.then.31
  %48 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_taint(%struct.sv* %48)
  br label %if.end.34

if.end.34:                                        ; preds = %if.then.33, %if.then.31
  br label %if.end.35

if.end.35:                                        ; preds = %if.end.34, %if.then.29
  br label %if.end.36

if.end.36:                                        ; preds = %land.end, %if.end.35, %cond.end
  ret void
}

; Function Attrs: nounwind uwtable
define i8* @Perl_sv_2pvbyte_nolen(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %n_a = alloca i64, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i8* @Perl_sv_2pvbyte(%struct.sv* %0, i64* %n_a)
  ret i8* %call
}

; Function Attrs: nounwind uwtable
define i8* @Perl_sv_2pvbyte(%struct.sv* %sv, i64* %lp) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %lp.addr = alloca i64*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i64* %lp, i64** %lp.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call signext i8 @Perl_sv_utf8_downgrade(%struct.sv* %0, i8 signext 0)
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and = and i32 %2, 262144
  %cmp = icmp eq i32 %and, 262144
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 0
  %4 = load i8*, i8** %sv_any, align 8
  %5 = bitcast i8* %4 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %5, i32 0, i32 1
  %6 = load i64, i64* %xpv_cur, align 8
  %7 = load i64*, i64** %lp.addr, align 8
  store i64 %6, i64* %7, align 8
  %8 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any1 = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 0
  %9 = load i8*, i8** %sv_any1, align 8
  %10 = bitcast i8* %9 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %10, i32 0, i32 0
  %11 = load i8*, i8** %xpv_pv, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %12 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %13 = load i64*, i64** %lp.addr, align 8
  %call2 = call i8* @Perl_sv_2pv_flags(%struct.sv* %12, i64* %13, i32 2)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %11, %cond.true ], [ %call2, %cond.false ]
  ret i8* %cond
}

; Function Attrs: nounwind uwtable
define signext i8 @Perl_sv_utf8_downgrade(%struct.sv* %sv, i8 signext %fail_ok) #0 {
entry:
  %retval = alloca i8, align 1
  %sv.addr = alloca %struct.sv*, align 8
  %fail_ok.addr = alloca i8, align 1
  %s = alloca i8*, align 8
  %len = alloca i64, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i8 %fail_ok, i8* %fail_ok.addr, align 1
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 67108864
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.lhs.true, label %if.end.41

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %3, 536870912
  %tobool3 = icmp ne i32 %and2, 0
  br i1 %tobool3, label %if.then, label %if.end.41

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 0
  %5 = load i8*, i8** %sv_any, align 8
  %6 = bitcast i8* %5 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %6, i32 0, i32 1
  %7 = load i64, i64* %xpv_cur, align 8
  %tobool4 = icmp ne i64 %7, 0
  br i1 %tobool4, label %if.then.5, label %if.end.40

if.then.5:                                        ; preds = %if.then
  %8 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags6 = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 2
  %9 = load i32, i32* %sv_flags6, align 4
  %and7 = and i32 %9, 8388608
  %tobool8 = icmp ne i32 %and7, 0
  br i1 %tobool8, label %land.lhs.true.9, label %if.end

land.lhs.true.9:                                  ; preds = %if.then.5
  %10 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags10 = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags10, align 4
  %and11 = and i32 %11, 1048576
  %tobool12 = icmp ne i32 %and11, 0
  br i1 %tobool12, label %if.then.13, label %if.end

if.then.13:                                       ; preds = %land.lhs.true.9
  %12 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_force_normal(%struct.sv* %12)
  br label %if.end

if.end:                                           ; preds = %if.then.13, %land.lhs.true.9, %if.then.5
  %13 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags14 = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 2
  %14 = load i32, i32* %sv_flags14, align 4
  %and15 = and i32 %14, 262144
  %cmp = icmp eq i32 %and15, 262144
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %15 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any16 = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 0
  %16 = load i8*, i8** %sv_any16, align 8
  %17 = bitcast i8* %16 to %struct.xpv*
  %xpv_cur17 = getelementptr inbounds %struct.xpv, %struct.xpv* %17, i32 0, i32 1
  %18 = load i64, i64* %xpv_cur17, align 8
  store i64 %18, i64* %len, align 8
  %19 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any18 = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 0
  %20 = load i8*, i8** %sv_any18, align 8
  %21 = bitcast i8* %20 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %21, i32 0, i32 0
  %22 = load i8*, i8** %xpv_pv, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %23 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i8* @Perl_sv_2pv_flags(%struct.sv* %23, i64* %len, i32 2)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %22, %cond.true ], [ %call, %cond.false ]
  store i8* %cond, i8** %s, align 8
  %24 = load i8*, i8** %s, align 8
  %call19 = call i8* @Perl_utf8_to_bytes(i8* %24, i64* %len)
  %tobool20 = icmp ne i8* %call19, null
  br i1 %tobool20, label %if.end.37, label %if.then.21

if.then.21:                                       ; preds = %cond.end
  %25 = load i8, i8* %fail_ok.addr, align 1
  %tobool22 = icmp ne i8 %25, 0
  br i1 %tobool22, label %if.then.23, label %if.else

if.then.23:                                       ; preds = %if.then.21
  store i8 0, i8* %retval
  br label %return

if.else:                                          ; preds = %if.then.21
  %26 = load %struct.op*, %struct.op** @PL_op, align 8
  %tobool24 = icmp ne %struct.op* %26, null
  br i1 %tobool24, label %if.then.25, label %if.else.34

if.then.25:                                       ; preds = %if.else
  %27 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %27, i32 0, i32 4
  %28 = load i16, i16* %op_type, align 2
  %conv = zext i16 %28 to i32
  %cmp26 = icmp eq i32 %conv, 351
  br i1 %cmp26, label %cond.true.28, label %cond.false.30

cond.true.28:                                     ; preds = %if.then.25
  %29 = load %struct.op*, %struct.op** @PL_op, align 8
  %call29 = call i8* @Perl_custom_op_desc(%struct.op* %29)
  br label %cond.end.32

cond.false.30:                                    ; preds = %if.then.25
  %30 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type31 = getelementptr inbounds %struct.op, %struct.op* %30, i32 0, i32 4
  %31 = load i16, i16* %op_type31, align 2
  %idxprom = zext i16 %31 to i64
  %arrayidx = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i32 0, i64 %idxprom
  %32 = load i8*, i8** %arrayidx, align 8
  br label %cond.end.32

cond.end.32:                                      ; preds = %cond.false.30, %cond.true.28
  %cond33 = phi i8* [ %call29, %cond.true.28 ], [ %32, %cond.false.30 ]
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.27, i32 0, i32 0), i8* %cond33)
  br label %if.end.35

if.else.34:                                       ; preds = %if.else
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.28, i32 0, i32 0))
  br label %if.end.35

if.end.35:                                        ; preds = %if.else.34, %cond.end.32
  br label %if.end.36

if.end.36:                                        ; preds = %if.end.35
  br label %if.end.37

if.end.37:                                        ; preds = %if.end.36, %cond.end
  %33 = load i64, i64* %len, align 8
  %34 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any38 = getelementptr inbounds %struct.sv, %struct.sv* %34, i32 0, i32 0
  %35 = load i8*, i8** %sv_any38, align 8
  %36 = bitcast i8* %35 to %struct.xpv*
  %xpv_cur39 = getelementptr inbounds %struct.xpv, %struct.xpv* %36, i32 0, i32 1
  store i64 %33, i64* %xpv_cur39, align 8
  br label %if.end.40

if.end.40:                                        ; preds = %if.end.37, %if.then
  br label %if.end.41

if.end.41:                                        ; preds = %if.end.40, %land.lhs.true, %entry
  %37 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags42 = getelementptr inbounds %struct.sv, %struct.sv* %37, i32 0, i32 2
  %38 = load i32, i32* %sv_flags42, align 4
  %and43 = and i32 %38, -536870913
  store i32 %and43, i32* %sv_flags42, align 4
  store i8 1, i8* %retval
  br label %return

return:                                           ; preds = %if.end.41, %if.then.23
  %39 = load i8, i8* %retval
  ret i8 %39
}

; Function Attrs: nounwind uwtable
define i8* @Perl_sv_2pvutf8_nolen(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %n_a = alloca i64, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i8* @Perl_sv_2pvutf8(%struct.sv* %0, i64* %n_a)
  ret i8* %call
}

; Function Attrs: nounwind uwtable
define i8* @Perl_sv_2pvutf8(%struct.sv* %sv, i64* %lp) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %lp.addr = alloca i64*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i64* %lp, i64** %lp.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i64 @Perl_sv_utf8_upgrade_flags(%struct.sv* %0, i32 2)
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and = and i32 %2, 262144
  %cmp = icmp eq i32 %and, 262144
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 0
  %4 = load i8*, i8** %sv_any, align 8
  %5 = bitcast i8* %4 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %5, i32 0, i32 1
  %6 = load i64, i64* %xpv_cur, align 8
  %7 = load i64*, i64** %lp.addr, align 8
  store i64 %6, i64* %7, align 8
  %8 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any1 = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 0
  %9 = load i8*, i8** %sv_any1, align 8
  %10 = bitcast i8* %9 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %10, i32 0, i32 0
  %11 = load i8*, i8** %xpv_pv, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %12 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %13 = load i64*, i64** %lp.addr, align 8
  %call2 = call i8* @Perl_sv_2pv_flags(%struct.sv* %12, i64* %13, i32 2)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %11, %cond.true ], [ %call2, %cond.false ]
  ret i8* %cond
}

; Function Attrs: nounwind uwtable
define i64 @Perl_sv_utf8_upgrade_flags(%struct.sv* %sv, i32 %flags) #0 {
entry:
  %retval = alloca i64, align 8
  %sv.addr = alloca %struct.sv*, align 8
  %flags.addr = alloca i32, align 4
  %s = alloca i8*, align 8
  %t = alloca i8*, align 8
  %e = alloca i8*, align 8
  %hibit = alloca i32, align 4
  %len = alloca i64, align 8
  %ch = alloca i8, align 1
  %len64 = alloca i64, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  store i32 0, i32* %hibit, align 4
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %cmp = icmp eq %struct.sv* %0, @PL_sv_undef
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i64 0, i64* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and = and i32 %2, 262144
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end.27, label %if.then.1

if.then.1:                                        ; preds = %if.end
  store i64 0, i64* %len, align 8
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 2
  %4 = load i32, i32* %sv_flags2, align 4
  %and3 = and i32 %4, 8388608
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.then.1
  %5 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags5 = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 2
  %6 = load i32, i32* %sv_flags5, align 4
  %and6 = and i32 %6, 67108864
  %tobool7 = icmp ne i32 %and6, 0
  br i1 %tobool7, label %if.then.15, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %7 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags8 = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 2
  %8 = load i32, i32* %sv_flags8, align 4
  %and9 = and i32 %8, 16777216
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %if.then.15, label %lor.lhs.false.11

lor.lhs.false.11:                                 ; preds = %lor.lhs.false
  %9 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags12 = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 2
  %10 = load i32, i32* %sv_flags12, align 4
  %and13 = and i32 %10, 33554432
  %tobool14 = icmp ne i32 %and13, 0
  br i1 %tobool14, label %if.then.15, label %if.else

if.then.15:                                       ; preds = %lor.lhs.false.11, %lor.lhs.false, %land.lhs.true
  %11 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %12 = load i32, i32* %flags.addr, align 4
  %call = call i8* @Perl_sv_2pv_flags(%struct.sv* %11, i64* %len, i32 %12)
  %13 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags16 = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 2
  %14 = load i32, i32* %sv_flags16, align 4
  %and17 = and i32 %14, 536870912
  %tobool18 = icmp ne i32 %and17, 0
  br i1 %tobool18, label %if.then.19, label %if.end.20

if.then.19:                                       ; preds = %if.then.15
  %15 = load i64, i64* %len, align 8
  store i64 %15, i64* %retval
  br label %return

if.end.20:                                        ; preds = %if.then.15
  br label %if.end.26

if.else:                                          ; preds = %lor.lhs.false.11, %if.then.1
  %16 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags21 = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 2
  %17 = load i32, i32* %sv_flags21, align 4
  %and22 = and i32 %17, 10223616
  %cmp23 = icmp eq i32 %and22, 262144
  br i1 %cmp23, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else
  %18 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 0
  %19 = load i8*, i8** %sv_any, align 8
  %20 = bitcast i8* %19 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %20, i32 0, i32 1
  %21 = load i64, i64* %xpv_cur, align 8
  store i64 %21, i64* %len, align 8
  %22 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any24 = getelementptr inbounds %struct.sv, %struct.sv* %22, i32 0, i32 0
  %23 = load i8*, i8** %sv_any24, align 8
  %24 = bitcast i8* %23 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %24, i32 0, i32 0
  %25 = load i8*, i8** %xpv_pv, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.else
  %26 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call25 = call i8* @Perl_sv_pvn_force_flags(%struct.sv* %26, i64* %len, i32 2)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %25, %cond.true ], [ %call25, %cond.false ]
  br label %if.end.26

if.end.26:                                        ; preds = %cond.end, %if.end.20
  br label %if.end.27

if.end.27:                                        ; preds = %if.end.26, %if.end
  %27 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags28 = getelementptr inbounds %struct.sv, %struct.sv* %27, i32 0, i32 2
  %28 = load i32, i32* %sv_flags28, align 4
  %and29 = and i32 %28, 536870912
  %tobool30 = icmp ne i32 %and29, 0
  br i1 %tobool30, label %if.then.31, label %if.end.34

if.then.31:                                       ; preds = %if.end.27
  %29 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any32 = getelementptr inbounds %struct.sv, %struct.sv* %29, i32 0, i32 0
  %30 = load i8*, i8** %sv_any32, align 8
  %31 = bitcast i8* %30 to %struct.xpv*
  %xpv_cur33 = getelementptr inbounds %struct.xpv, %struct.xpv* %31, i32 0, i32 1
  %32 = load i64, i64* %xpv_cur33, align 8
  store i64 %32, i64* %retval
  br label %return

if.end.34:                                        ; preds = %if.end.27
  %33 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags35 = getelementptr inbounds %struct.sv, %struct.sv* %33, i32 0, i32 2
  %34 = load i32, i32* %sv_flags35, align 4
  %and36 = and i32 %34, 8388608
  %tobool37 = icmp ne i32 %and36, 0
  br i1 %tobool37, label %land.lhs.true.38, label %if.end.43

land.lhs.true.38:                                 ; preds = %if.end.34
  %35 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags39 = getelementptr inbounds %struct.sv, %struct.sv* %35, i32 0, i32 2
  %36 = load i32, i32* %sv_flags39, align 4
  %and40 = and i32 %36, 1048576
  %tobool41 = icmp ne i32 %and40, 0
  br i1 %tobool41, label %if.then.42, label %if.end.43

if.then.42:                                       ; preds = %land.lhs.true.38
  %37 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_force_normal(%struct.sv* %37)
  br label %if.end.43

if.end.43:                                        ; preds = %if.then.42, %land.lhs.true.38, %if.end.34
  %38 = load %struct.sv*, %struct.sv** @PL_encoding, align 8
  %tobool44 = icmp ne %struct.sv* %38, null
  br i1 %tobool44, label %land.lhs.true.45, label %if.else.50

land.lhs.true.45:                                 ; preds = %if.end.43
  %39 = load i32, i32* %flags.addr, align 4
  %and46 = and i32 %39, 8
  %tobool47 = icmp ne i32 %and46, 0
  br i1 %tobool47, label %if.else.50, label %if.then.48

if.then.48:                                       ; preds = %land.lhs.true.45
  %40 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %41 = load %struct.sv*, %struct.sv** @PL_encoding, align 8
  %call49 = call i8* @Perl_sv_recode_to_utf8(%struct.sv* %40, %struct.sv* %41)
  br label %if.end.88

if.else.50:                                       ; preds = %land.lhs.true.45, %if.end.43
  %42 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any51 = getelementptr inbounds %struct.sv, %struct.sv* %42, i32 0, i32 0
  %43 = load i8*, i8** %sv_any51, align 8
  %44 = bitcast i8* %43 to %struct.xpv*
  %xpv_pv52 = getelementptr inbounds %struct.xpv, %struct.xpv* %44, i32 0, i32 0
  %45 = load i8*, i8** %xpv_pv52, align 8
  store i8* %45, i8** %s, align 8
  %46 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any53 = getelementptr inbounds %struct.sv, %struct.sv* %46, i32 0, i32 0
  %47 = load i8*, i8** %sv_any53, align 8
  %48 = bitcast i8* %47 to %struct.xpv*
  %xpv_pv54 = getelementptr inbounds %struct.xpv, %struct.xpv* %48, i32 0, i32 0
  %49 = load i8*, i8** %xpv_pv54, align 8
  %50 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any55 = getelementptr inbounds %struct.sv, %struct.sv* %50, i32 0, i32 0
  %51 = load i8*, i8** %sv_any55, align 8
  %52 = bitcast i8* %51 to %struct.xpv*
  %xpv_cur56 = getelementptr inbounds %struct.xpv, %struct.xpv* %52, i32 0, i32 1
  %53 = load i64, i64* %xpv_cur56, align 8
  %add.ptr = getelementptr inbounds i8, i8* %49, i64 %53
  store i8* %add.ptr, i8** %e, align 8
  %54 = load i8*, i8** %s, align 8
  store i8* %54, i8** %t, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end.61, %if.else.50
  %55 = load i8*, i8** %t, align 8
  %56 = load i8*, i8** %e, align 8
  %cmp57 = icmp ult i8* %55, %56
  br i1 %cmp57, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %57 = load i8*, i8** %t, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %57, i32 1
  store i8* %incdec.ptr, i8** %t, align 8
  %58 = load i8, i8* %57, align 1
  store i8 %58, i8* %ch, align 1
  %59 = load i8, i8* %ch, align 1
  %conv = zext i8 %59 to i64
  %cmp58 = icmp ult i64 %conv, 128
  %lnot = xor i1 %cmp58, true
  %lnot.ext = zext i1 %lnot to i32
  store i32 %lnot.ext, i32* %hibit, align 4
  br i1 %lnot, label %if.then.60, label %if.end.61

if.then.60:                                       ; preds = %while.body
  br label %while.end

if.end.61:                                        ; preds = %while.body
  br label %while.cond

while.end:                                        ; preds = %if.then.60, %while.cond
  %60 = load i32, i32* %hibit, align 4
  %tobool62 = icmp ne i32 %60, 0
  br i1 %tobool62, label %if.then.63, label %if.end.86

if.then.63:                                       ; preds = %while.end
  %61 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags65 = getelementptr inbounds %struct.sv, %struct.sv* %61, i32 0, i32 2
  %62 = load i32, i32* %sv_flags65, align 4
  %and66 = and i32 %62, 2097152
  %tobool67 = icmp ne i32 %and66, 0
  br i1 %tobool67, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then.63
  %63 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call68 = call i32 @Perl_sv_backoff(%struct.sv* %63)
  %tobool69 = icmp ne i32 %call68, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then.63
  %64 = phi i1 [ false, %if.then.63 ], [ %tobool69, %land.rhs ]
  %land.ext = zext i1 %64 to i32
  %65 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any70 = getelementptr inbounds %struct.sv, %struct.sv* %65, i32 0, i32 0
  %66 = load i8*, i8** %sv_any70, align 8
  %67 = bitcast i8* %66 to %struct.xpv*
  %xpv_pv71 = getelementptr inbounds %struct.xpv, %struct.xpv* %67, i32 0, i32 0
  %68 = load i8*, i8** %xpv_pv71, align 8
  store i8* %68, i8** %s, align 8
  %69 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any72 = getelementptr inbounds %struct.sv, %struct.sv* %69, i32 0, i32 0
  %70 = load i8*, i8** %sv_any72, align 8
  %71 = bitcast i8* %70 to %struct.xpv*
  %xpv_cur73 = getelementptr inbounds %struct.xpv, %struct.xpv* %71, i32 0, i32 1
  %72 = load i64, i64* %xpv_cur73, align 8
  %add = add i64 %72, 1
  store i64 %add, i64* %len64, align 8
  %73 = load i8*, i8** %s, align 8
  %call74 = call i8* @Perl_bytes_to_utf8(i8* %73, i64* %len64)
  %74 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any75 = getelementptr inbounds %struct.sv, %struct.sv* %74, i32 0, i32 0
  %75 = load i8*, i8** %sv_any75, align 8
  %76 = bitcast i8* %75 to %struct.xpv*
  %xpv_pv76 = getelementptr inbounds %struct.xpv, %struct.xpv* %76, i32 0, i32 0
  store i8* %call74, i8** %xpv_pv76, align 8
  %77 = load i64, i64* %len64, align 8
  %sub = sub i64 %77, 1
  %78 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any77 = getelementptr inbounds %struct.sv, %struct.sv* %78, i32 0, i32 0
  %79 = load i8*, i8** %sv_any77, align 8
  %80 = bitcast i8* %79 to %struct.xpv*
  %xpv_cur78 = getelementptr inbounds %struct.xpv, %struct.xpv* %80, i32 0, i32 1
  store i64 %sub, i64* %xpv_cur78, align 8
  %81 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any79 = getelementptr inbounds %struct.sv, %struct.sv* %81, i32 0, i32 0
  %82 = load i8*, i8** %sv_any79, align 8
  %83 = bitcast i8* %82 to %struct.xpv*
  %xpv_len = getelementptr inbounds %struct.xpv, %struct.xpv* %83, i32 0, i32 2
  %84 = load i64, i64* %xpv_len, align 8
  %cmp80 = icmp ne i64 %84, 0
  br i1 %cmp80, label %if.then.82, label %if.end.83

if.then.82:                                       ; preds = %land.end
  %85 = load i8*, i8** %s, align 8
  call void @Perl_safesysfree(i8* %85)
  br label %if.end.83

if.end.83:                                        ; preds = %if.then.82, %land.end
  %86 = load i64, i64* %len64, align 8
  %87 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any84 = getelementptr inbounds %struct.sv, %struct.sv* %87, i32 0, i32 0
  %88 = load i8*, i8** %sv_any84, align 8
  %89 = bitcast i8* %88 to %struct.xpv*
  %xpv_len85 = getelementptr inbounds %struct.xpv, %struct.xpv* %89, i32 0, i32 2
  store i64 %86, i64* %xpv_len85, align 8
  br label %if.end.86

if.end.86:                                        ; preds = %if.end.83, %while.end
  %90 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags87 = getelementptr inbounds %struct.sv, %struct.sv* %90, i32 0, i32 2
  %91 = load i32, i32* %sv_flags87, align 4
  %or = or i32 %91, 536870912
  store i32 %or, i32* %sv_flags87, align 4
  br label %if.end.88

if.end.88:                                        ; preds = %if.end.86, %if.then.48
  %92 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any89 = getelementptr inbounds %struct.sv, %struct.sv* %92, i32 0, i32 0
  %93 = load i8*, i8** %sv_any89, align 8
  %94 = bitcast i8* %93 to %struct.xpv*
  %xpv_cur90 = getelementptr inbounds %struct.xpv, %struct.xpv* %94, i32 0, i32 1
  %95 = load i64, i64* %xpv_cur90, align 8
  store i64 %95, i64* %retval
  br label %return

return:                                           ; preds = %if.end.88, %if.then.31, %if.then.19, %if.then
  %96 = load i64, i64* %retval
  ret i64 %96
}

; Function Attrs: nounwind uwtable
define signext i8 @Perl_sv_2bool(%struct.sv* %sv) #0 {
entry:
  %retval = alloca i8, align 1
  %sv.addr = alloca %struct.sv*, align 8
  %tmpsv = alloca %struct.sv*, align 8
  %Xpvtmp = alloca %struct.xpv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 8192
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i32 @Perl_mg_get(%struct.sv* %2)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 2
  %4 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %4, 118423552
  %tobool3 = icmp ne i32 %and2, 0
  br i1 %tobool3, label %if.end.5, label %if.then.4

if.then.4:                                        ; preds = %if.end
  store i8 0, i8* %retval
  br label %return

if.end.5:                                         ; preds = %if.end
  %5 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags6 = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 2
  %6 = load i32, i32* %sv_flags6, align 4
  %and7 = and i32 %6, 524288
  %tobool8 = icmp ne i32 %and7, 0
  br i1 %tobool8, label %if.then.9, label %if.end.69

if.then.9:                                        ; preds = %if.end.5
  %7 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags10 = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 2
  %8 = load i32, i32* %sv_flags10, align 4
  %and11 = and i32 %8, 268435456
  %tobool12 = icmp ne i32 %and11, 0
  br i1 %tobool12, label %land.lhs.true, label %if.end.63

land.lhs.true:                                    ; preds = %if.then.9
  %9 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call13 = call %struct.sv* @Perl_amagic_call(%struct.sv* %9, %struct.sv* @PL_sv_undef, i32 2, i32 9)
  store %struct.sv* %call13, %struct.sv** %tmpsv, align 8
  %tobool14 = icmp ne %struct.sv* %call13, null
  br i1 %tobool14, label %land.lhs.true.15, label %if.end.63

land.lhs.true.15:                                 ; preds = %land.lhs.true
  %10 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %sv_flags16 = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags16, align 4
  %and17 = and i32 %11, 524288
  %tobool18 = icmp ne i32 %and17, 0
  br i1 %tobool18, label %lor.lhs.false, label %if.then.21

lor.lhs.false:                                    ; preds = %land.lhs.true.15
  %12 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 0
  %13 = load i8*, i8** %sv_any, align 8
  %14 = bitcast i8* %13 to %struct.xrv*
  %xrv_rv = getelementptr inbounds %struct.xrv, %struct.xrv* %14, i32 0, i32 0
  %15 = load %struct.sv*, %struct.sv** %xrv_rv, align 8
  %16 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any19 = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 0
  %17 = load i8*, i8** %sv_any19, align 8
  %18 = bitcast i8* %17 to %struct.xrv*
  %xrv_rv20 = getelementptr inbounds %struct.xrv, %struct.xrv* %18, i32 0, i32 0
  %19 = load %struct.sv*, %struct.sv** %xrv_rv20, align 8
  %cmp = icmp ne %struct.sv* %15, %19
  br i1 %cmp, label %if.then.21, label %if.end.63

if.then.21:                                       ; preds = %lor.lhs.false, %land.lhs.true.15
  %20 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %tobool22 = icmp ne %struct.sv* %20, null
  br i1 %tobool22, label %cond.false, label %cond.true

cond.true:                                        ; preds = %if.then.21
  br label %cond.end.60

cond.false:                                       ; preds = %if.then.21
  %21 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %sv_flags23 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 2
  %22 = load i32, i32* %sv_flags23, align 4
  %and24 = and i32 %22, 262144
  %tobool25 = icmp ne i32 %and24, 0
  br i1 %tobool25, label %cond.true.26, label %cond.false.36

cond.true.26:                                     ; preds = %cond.false
  %23 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %sv_any27 = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 0
  %24 = load i8*, i8** %sv_any27, align 8
  %25 = bitcast i8* %24 to %struct.xpv*
  store %struct.xpv* %25, %struct.xpv** @PL_Xpv, align 8
  %tobool28 = icmp ne %struct.xpv* %25, null
  br i1 %tobool28, label %land.rhs, label %land.end.35

land.rhs:                                         ; preds = %cond.true.26
  %26 = load %struct.xpv*, %struct.xpv** @PL_Xpv, align 8
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %26, i32 0, i32 1
  %27 = load i64, i64* %xpv_cur, align 8
  %cmp29 = icmp ugt i64 %27, 1
  br i1 %cmp29, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs
  %28 = load %struct.xpv*, %struct.xpv** @PL_Xpv, align 8
  %xpv_cur30 = getelementptr inbounds %struct.xpv, %struct.xpv* %28, i32 0, i32 1
  %29 = load i64, i64* %xpv_cur30, align 8
  %tobool31 = icmp ne i64 %29, 0
  br i1 %tobool31, label %land.rhs.32, label %land.end

land.rhs.32:                                      ; preds = %lor.rhs
  %30 = load %struct.xpv*, %struct.xpv** @PL_Xpv, align 8
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %30, i32 0, i32 0
  %31 = load i8*, i8** %xpv_pv, align 8
  %32 = load i8, i8* %31, align 1
  %conv = sext i8 %32 to i32
  %cmp33 = icmp ne i32 %conv, 48
  br label %land.end

land.end:                                         ; preds = %land.rhs.32, %lor.rhs
  %33 = phi i1 [ false, %lor.rhs ], [ %cmp33, %land.rhs.32 ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %land.rhs
  %34 = phi i1 [ true, %land.rhs ], [ %33, %land.end ]
  br label %land.end.35

land.end.35:                                      ; preds = %lor.end, %cond.true.26
  %35 = phi i1 [ false, %cond.true.26 ], [ %34, %lor.end ]
  %cond = select i1 %35, i32 1, i32 0
  br label %cond.end.58

cond.false.36:                                    ; preds = %cond.false
  %36 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %sv_flags37 = getelementptr inbounds %struct.sv, %struct.sv* %36, i32 0, i32 2
  %37 = load i32, i32* %sv_flags37, align 4
  %and38 = and i32 %37, 65536
  %tobool39 = icmp ne i32 %and38, 0
  br i1 %tobool39, label %cond.true.40, label %cond.false.44

cond.true.40:                                     ; preds = %cond.false.36
  %38 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %sv_any41 = getelementptr inbounds %struct.sv, %struct.sv* %38, i32 0, i32 0
  %39 = load i8*, i8** %sv_any41, align 8
  %40 = bitcast i8* %39 to %struct.xpviv*
  %xiv_iv = getelementptr inbounds %struct.xpviv, %struct.xpviv* %40, i32 0, i32 3
  %41 = load i64, i64* %xiv_iv, align 8
  %cmp42 = icmp ne i64 %41, 0
  %conv43 = zext i1 %cmp42 to i32
  br label %cond.end.56

cond.false.44:                                    ; preds = %cond.false.36
  %42 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %sv_flags45 = getelementptr inbounds %struct.sv, %struct.sv* %42, i32 0, i32 2
  %43 = load i32, i32* %sv_flags45, align 4
  %and46 = and i32 %43, 131072
  %tobool47 = icmp ne i32 %and46, 0
  br i1 %tobool47, label %cond.true.48, label %cond.false.52

cond.true.48:                                     ; preds = %cond.false.44
  %44 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %sv_any49 = getelementptr inbounds %struct.sv, %struct.sv* %44, i32 0, i32 0
  %45 = load i8*, i8** %sv_any49, align 8
  %46 = bitcast i8* %45 to %struct.xpvnv*
  %xnv_nv = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %46, i32 0, i32 4
  %47 = load double, double* %xnv_nv, align 8
  %cmp50 = fcmp une double %47, 0.000000e+00
  %conv51 = zext i1 %cmp50 to i32
  br label %cond.end

cond.false.52:                                    ; preds = %cond.false.44
  %48 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %call53 = call signext i8 @Perl_sv_2bool(%struct.sv* %48)
  %conv54 = sext i8 %call53 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false.52, %cond.true.48
  %cond55 = phi i32 [ %conv51, %cond.true.48 ], [ %conv54, %cond.false.52 ]
  br label %cond.end.56

cond.end.56:                                      ; preds = %cond.end, %cond.true.40
  %cond57 = phi i32 [ %conv43, %cond.true.40 ], [ %cond55, %cond.end ]
  br label %cond.end.58

cond.end.58:                                      ; preds = %cond.end.56, %land.end.35
  %cond59 = phi i32 [ %cond, %land.end.35 ], [ %cond57, %cond.end.56 ]
  br label %cond.end.60

cond.end.60:                                      ; preds = %cond.end.58, %cond.true
  %cond61 = phi i32 [ 0, %cond.true ], [ %cond59, %cond.end.58 ]
  %conv62 = trunc i32 %cond61 to i8
  store i8 %conv62, i8* %retval
  br label %return

if.end.63:                                        ; preds = %lor.lhs.false, %land.lhs.true, %if.then.9
  %49 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any64 = getelementptr inbounds %struct.sv, %struct.sv* %49, i32 0, i32 0
  %50 = load i8*, i8** %sv_any64, align 8
  %51 = bitcast i8* %50 to %struct.xrv*
  %xrv_rv65 = getelementptr inbounds %struct.xrv, %struct.xrv* %51, i32 0, i32 0
  %52 = load %struct.sv*, %struct.sv** %xrv_rv65, align 8
  %cmp66 = icmp ne %struct.sv* %52, null
  %conv67 = zext i1 %cmp66 to i32
  %conv68 = trunc i32 %conv67 to i8
  store i8 %conv68, i8* %retval
  br label %return

if.end.69:                                        ; preds = %if.end.5
  %53 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags70 = getelementptr inbounds %struct.sv, %struct.sv* %53, i32 0, i32 2
  %54 = load i32, i32* %sv_flags70, align 4
  %and71 = and i32 %54, 67108864
  %tobool72 = icmp ne i32 %and71, 0
  br i1 %tobool72, label %if.then.73, label %if.else.94

if.then.73:                                       ; preds = %if.end.69
  %55 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any74 = getelementptr inbounds %struct.sv, %struct.sv* %55, i32 0, i32 0
  %56 = load i8*, i8** %sv_any74, align 8
  %57 = bitcast i8* %56 to %struct.xpv*
  store %struct.xpv* %57, %struct.xpv** %Xpvtmp, align 8
  %tobool75 = icmp ne %struct.xpv* %57, null
  br i1 %tobool75, label %land.lhs.true.76, label %if.else

land.lhs.true.76:                                 ; preds = %if.then.73
  %58 = load %struct.xpv*, %struct.xpv** %Xpvtmp, align 8
  %xpv_pv77 = getelementptr inbounds %struct.xpv, %struct.xpv* %58, i32 0, i32 0
  %59 = load i8*, i8** %xpv_pv77, align 8
  %60 = load i8, i8* %59, align 1
  %conv78 = sext i8 %60 to i32
  %cmp79 = icmp sgt i32 %conv78, 48
  br i1 %cmp79, label %if.then.93, label %lor.lhs.false.81

lor.lhs.false.81:                                 ; preds = %land.lhs.true.76
  %61 = load %struct.xpv*, %struct.xpv** %Xpvtmp, align 8
  %xpv_cur82 = getelementptr inbounds %struct.xpv, %struct.xpv* %61, i32 0, i32 1
  %62 = load i64, i64* %xpv_cur82, align 8
  %cmp83 = icmp ugt i64 %62, 1
  br i1 %cmp83, label %if.then.93, label %lor.lhs.false.85

lor.lhs.false.85:                                 ; preds = %lor.lhs.false.81
  %63 = load %struct.xpv*, %struct.xpv** %Xpvtmp, align 8
  %xpv_cur86 = getelementptr inbounds %struct.xpv, %struct.xpv* %63, i32 0, i32 1
  %64 = load i64, i64* %xpv_cur86, align 8
  %tobool87 = icmp ne i64 %64, 0
  br i1 %tobool87, label %land.lhs.true.88, label %if.else

land.lhs.true.88:                                 ; preds = %lor.lhs.false.85
  %65 = load %struct.xpv*, %struct.xpv** %Xpvtmp, align 8
  %xpv_pv89 = getelementptr inbounds %struct.xpv, %struct.xpv* %65, i32 0, i32 0
  %66 = load i8*, i8** %xpv_pv89, align 8
  %67 = load i8, i8* %66, align 1
  %conv90 = sext i8 %67 to i32
  %cmp91 = icmp ne i32 %conv90, 48
  br i1 %cmp91, label %if.then.93, label %if.else

if.then.93:                                       ; preds = %land.lhs.true.88, %lor.lhs.false.81, %land.lhs.true.76
  store i8 1, i8* %retval
  br label %return

if.else:                                          ; preds = %land.lhs.true.88, %lor.lhs.false.85, %if.then.73
  store i8 0, i8* %retval
  br label %return

if.else.94:                                       ; preds = %if.end.69
  %68 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags95 = getelementptr inbounds %struct.sv, %struct.sv* %68, i32 0, i32 2
  %69 = load i32, i32* %sv_flags95, align 4
  %and96 = and i32 %69, 16777216
  %tobool97 = icmp ne i32 %and96, 0
  br i1 %tobool97, label %if.then.98, label %if.else.104

if.then.98:                                       ; preds = %if.else.94
  %70 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any99 = getelementptr inbounds %struct.sv, %struct.sv* %70, i32 0, i32 0
  %71 = load i8*, i8** %sv_any99, align 8
  %72 = bitcast i8* %71 to %struct.xpviv*
  %xiv_iv100 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %72, i32 0, i32 3
  %73 = load i64, i64* %xiv_iv100, align 8
  %cmp101 = icmp ne i64 %73, 0
  %conv102 = zext i1 %cmp101 to i32
  %conv103 = trunc i32 %conv102 to i8
  store i8 %conv103, i8* %retval
  br label %return

if.else.104:                                      ; preds = %if.else.94
  %74 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags105 = getelementptr inbounds %struct.sv, %struct.sv* %74, i32 0, i32 2
  %75 = load i32, i32* %sv_flags105, align 4
  %and106 = and i32 %75, 33554432
  %tobool107 = icmp ne i32 %and106, 0
  br i1 %tobool107, label %if.then.108, label %if.else.114

if.then.108:                                      ; preds = %if.else.104
  %76 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any109 = getelementptr inbounds %struct.sv, %struct.sv* %76, i32 0, i32 0
  %77 = load i8*, i8** %sv_any109, align 8
  %78 = bitcast i8* %77 to %struct.xpvnv*
  %xnv_nv110 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %78, i32 0, i32 4
  %79 = load double, double* %xnv_nv110, align 8
  %cmp111 = fcmp une double %79, 0.000000e+00
  %conv112 = zext i1 %cmp111 to i32
  %conv113 = trunc i32 %conv112 to i8
  store i8 %conv113, i8* %retval
  br label %return

if.else.114:                                      ; preds = %if.else.104
  store i8 0, i8* %retval
  br label %return

return:                                           ; preds = %if.else.114, %if.then.108, %if.then.98, %if.else, %if.then.93, %if.end.63, %cond.end.60, %if.then.4
  %80 = load i8, i8* %retval
  ret i8 %80
}

; Function Attrs: nounwind uwtable
define i64 @Perl_sv_utf8_upgrade(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i64 @Perl_sv_utf8_upgrade_flags(%struct.sv* %0, i32 2)
  ret i64 %call
}

; Function Attrs: nounwind uwtable
define i8* @Perl_sv_pvn_force_flags(%struct.sv* %sv, i64* %lp, i32 %flags) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %lp.addr = alloca i64*, align 8
  %flags.addr = alloca i32, align 4
  %s = alloca i8*, align 8
  %len = alloca i64, align 8
  %tmp = alloca i64, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i64* %lp, i64** %lp.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  store i8* null, i8** %s, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 9961472
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %3, 524288
  %tobool3 = icmp ne i32 %and2, 0
  br i1 %tobool3, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_force_normal(%struct.sv* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %5 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags4 = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 2
  %6 = load i32, i32* %sv_flags4, align 4
  %and5 = and i32 %6, 262144
  %tobool6 = icmp ne i32 %and5, 0
  br i1 %tobool6, label %if.then.7, label %if.else

if.then.7:                                        ; preds = %if.end
  %7 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 0
  %8 = load i8*, i8** %sv_any, align 8
  %9 = bitcast i8* %8 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %9, i32 0, i32 1
  %10 = load i64, i64* %xpv_cur, align 8
  %11 = load i64*, i64** %lp.addr, align 8
  store i64 %10, i64* %11, align 8
  br label %if.end.73

if.else:                                          ; preds = %if.end
  %12 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags8 = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 2
  %13 = load i32, i32* %sv_flags8, align 4
  %and9 = and i32 %13, 255
  %cmp = icmp ugt i32 %and9, 9
  br i1 %cmp, label %land.lhs.true.10, label %if.else.19

land.lhs.true.10:                                 ; preds = %if.else
  %14 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags11 = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 2
  %15 = load i32, i32* %sv_flags11, align 4
  %and12 = and i32 %15, 255
  %cmp13 = icmp ne i32 %and12, 14
  br i1 %cmp13, label %if.then.14, label %if.else.19

if.then.14:                                       ; preds = %land.lhs.true.10
  %16 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i8* @Perl_sv_reftype(%struct.sv* %16, i32 0)
  %17 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %17, i32 0, i32 4
  %18 = load i16, i16* %op_type, align 2
  %conv = zext i16 %18 to i32
  %cmp15 = icmp eq i32 %conv, 351
  br i1 %cmp15, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.14
  %19 = load %struct.op*, %struct.op** @PL_op, align 8
  %call17 = call i8* @Perl_custom_op_name(%struct.op* %19)
  br label %cond.end

cond.false:                                       ; preds = %if.then.14
  %20 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type18 = getelementptr inbounds %struct.op, %struct.op* %20, i32 0, i32 4
  %21 = load i16, i16* %op_type18, align 2
  %idxprom = zext i16 %21 to i64
  %arrayidx = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_name, i32 0, i64 %idxprom
  %22 = load i8*, i8** %arrayidx, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %call17, %cond.true ], [ %22, %cond.false ]
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.56, i32 0, i32 0), i8* %call, i8* %cond)
  br label %if.end.21

if.else.19:                                       ; preds = %land.lhs.true.10, %if.else
  %23 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %24 = load i64*, i64** %lp.addr, align 8
  %25 = load i32, i32* %flags.addr, align 4
  %call20 = call i8* @Perl_sv_2pv_flags(%struct.sv* %23, i64* %24, i32 %25)
  store i8* %call20, i8** %s, align 8
  br label %if.end.21

if.end.21:                                        ; preds = %if.else.19, %cond.end
  %26 = load i8*, i8** %s, align 8
  %27 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any22 = getelementptr inbounds %struct.sv, %struct.sv* %27, i32 0, i32 0
  %28 = load i8*, i8** %sv_any22, align 8
  %29 = bitcast i8* %28 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %29, i32 0, i32 0
  %30 = load i8*, i8** %xpv_pv, align 8
  %cmp23 = icmp ne i8* %26, %30
  br i1 %cmp23, label %if.then.25, label %if.end.57

if.then.25:                                       ; preds = %if.end.21
  %31 = load i64*, i64** %lp.addr, align 8
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %len, align 8
  %33 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags26 = getelementptr inbounds %struct.sv, %struct.sv* %33, i32 0, i32 2
  %34 = load i32, i32* %sv_flags26, align 4
  %and27 = and i32 %34, 524288
  %tobool28 = icmp ne i32 %and27, 0
  br i1 %tobool28, label %if.then.29, label %if.end.30

if.then.29:                                       ; preds = %if.then.25
  %35 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_unref(%struct.sv* %35)
  br label %if.end.30

if.end.30:                                        ; preds = %if.then.29, %if.then.25
  %36 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags31 = getelementptr inbounds %struct.sv, %struct.sv* %36, i32 0, i32 2
  %37 = load i32, i32* %sv_flags31, align 4
  %and32 = and i32 %37, 255
  %cmp33 = icmp uge i32 %and32, 4
  br i1 %cmp33, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.end.30
  %38 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call35 = call signext i8 @Perl_sv_upgrade(%struct.sv* %38, i32 4)
  %conv36 = sext i8 %call35 to i32
  %tobool37 = icmp ne i32 %conv36, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.end.30
  %39 = phi i1 [ true, %if.end.30 ], [ %tobool37, %lor.rhs ]
  %lor.ext = zext i1 %39 to i32
  %40 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any38 = getelementptr inbounds %struct.sv, %struct.sv* %40, i32 0, i32 0
  %41 = load i8*, i8** %sv_any38, align 8
  %42 = bitcast i8* %41 to %struct.xpv*
  %xpv_len = getelementptr inbounds %struct.xpv, %struct.xpv* %42, i32 0, i32 2
  %43 = load i64, i64* %xpv_len, align 8
  %44 = load i64, i64* %len, align 8
  %add = add i64 %44, 1
  %cmp39 = icmp ult i64 %43, %add
  br i1 %cmp39, label %cond.true.41, label %cond.false.44

cond.true.41:                                     ; preds = %lor.end
  %45 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %46 = load i64, i64* %len, align 8
  %add42 = add i64 %46, 1
  %call43 = call i8* @Perl_sv_grow(%struct.sv* %45, i64 %add42)
  br label %cond.end.47

cond.false.44:                                    ; preds = %lor.end
  %47 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any45 = getelementptr inbounds %struct.sv, %struct.sv* %47, i32 0, i32 0
  %48 = load i8*, i8** %sv_any45, align 8
  %49 = bitcast i8* %48 to %struct.xpv*
  %xpv_pv46 = getelementptr inbounds %struct.xpv, %struct.xpv* %49, i32 0, i32 0
  %50 = load i8*, i8** %xpv_pv46, align 8
  br label %cond.end.47

cond.end.47:                                      ; preds = %cond.false.44, %cond.true.41
  %cond48 = phi i8* [ %call43, %cond.true.41 ], [ %50, %cond.false.44 ]
  %51 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any49 = getelementptr inbounds %struct.sv, %struct.sv* %51, i32 0, i32 0
  %52 = load i8*, i8** %sv_any49, align 8
  %53 = bitcast i8* %52 to %struct.xpv*
  %xpv_pv50 = getelementptr inbounds %struct.xpv, %struct.xpv* %53, i32 0, i32 0
  %54 = load i8*, i8** %xpv_pv50, align 8
  %55 = load i8*, i8** %s, align 8
  %56 = load i64, i64* %len, align 8
  %mul = mul i64 %56, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %54, i8* %55, i64 %mul, i32 1, i1 false)
  %57 = load i64, i64* %len, align 8
  %58 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any51 = getelementptr inbounds %struct.sv, %struct.sv* %58, i32 0, i32 0
  %59 = load i8*, i8** %sv_any51, align 8
  %60 = bitcast i8* %59 to %struct.xpv*
  %xpv_cur52 = getelementptr inbounds %struct.xpv, %struct.xpv* %60, i32 0, i32 1
  store i64 %57, i64* %xpv_cur52, align 8
  store i64 %57, i64* %tmp
  %61 = load i64, i64* %tmp
  %62 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any53 = getelementptr inbounds %struct.sv, %struct.sv* %62, i32 0, i32 0
  %63 = load i8*, i8** %sv_any53, align 8
  %64 = bitcast i8* %63 to %struct.xpv*
  %xpv_pv54 = getelementptr inbounds %struct.xpv, %struct.xpv* %64, i32 0, i32 0
  %65 = load i8*, i8** %xpv_pv54, align 8
  %66 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any55 = getelementptr inbounds %struct.sv, %struct.sv* %66, i32 0, i32 0
  %67 = load i8*, i8** %sv_any55, align 8
  %68 = bitcast i8* %67 to %struct.xpv*
  %xpv_cur56 = getelementptr inbounds %struct.xpv, %struct.xpv* %68, i32 0, i32 1
  %69 = load i64, i64* %xpv_cur56, align 8
  %add.ptr = getelementptr inbounds i8, i8* %65, i64 %69
  store i8 0, i8* %add.ptr, align 1
  br label %if.end.57

if.end.57:                                        ; preds = %cond.end.47, %if.end.21
  %70 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags58 = getelementptr inbounds %struct.sv, %struct.sv* %70, i32 0, i32 2
  %71 = load i32, i32* %sv_flags58, align 4
  %and59 = and i32 %71, 262144
  %tobool60 = icmp ne i32 %and59, 0
  br i1 %tobool60, label %if.end.72, label %if.then.61

if.then.61:                                       ; preds = %if.end.57
  %72 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags62 = getelementptr inbounds %struct.sv, %struct.sv* %72, i32 0, i32 2
  %73 = load i32, i32* %sv_flags62, align 4
  %or = or i32 %73, 67371008
  store i32 %or, i32* %sv_flags62, align 4
  %74 = load i8, i8* @PL_tainting, align 1
  %tobool63 = icmp ne i8 %74, 0
  br i1 %tobool63, label %if.then.64, label %if.end.71

if.then.64:                                       ; preds = %if.then.61
  %75 = load i8, i8* @PL_tainted, align 1
  %tobool65 = icmp ne i8 %75, 0
  br i1 %tobool65, label %if.then.66, label %if.end.70

if.then.66:                                       ; preds = %if.then.64
  %76 = load i8, i8* @PL_tainting, align 1
  %tobool67 = icmp ne i8 %76, 0
  br i1 %tobool67, label %if.then.68, label %if.end.69

if.then.68:                                       ; preds = %if.then.66
  %77 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_taint(%struct.sv* %77)
  br label %if.end.69

if.end.69:                                        ; preds = %if.then.68, %if.then.66
  br label %if.end.70

if.end.70:                                        ; preds = %if.end.69, %if.then.64
  br label %if.end.71

if.end.71:                                        ; preds = %if.end.70, %if.then.61
  br label %if.end.72

if.end.72:                                        ; preds = %if.end.71, %if.end.57
  br label %if.end.73

if.end.73:                                        ; preds = %if.end.72, %if.then.7
  %78 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any74 = getelementptr inbounds %struct.sv, %struct.sv* %78, i32 0, i32 0
  %79 = load i8*, i8** %sv_any74, align 8
  %80 = bitcast i8* %79 to %struct.xpv*
  %xpv_pv75 = getelementptr inbounds %struct.xpv, %struct.xpv* %80, i32 0, i32 0
  %81 = load i8*, i8** %xpv_pv75, align 8
  ret i8* %81
}

; Function Attrs: nounwind uwtable
define i8* @Perl_sv_recode_to_utf8(%struct.sv* %sv, %struct.sv* %encoding) #0 {
entry:
  %retval = alloca i8*, align 8
  %sv.addr = alloca %struct.sv*, align 8
  %encoding.addr = alloca %struct.sv*, align 8
  %uni = alloca %struct.sv*, align 8
  %len = alloca i64, align 8
  %s = alloca i8*, align 8
  %sp = alloca %struct.sv**, align 8
  %tmp = alloca i32, align 4
  %tmp31 = alloca %struct.sv*, align 8
  %tmp42 = alloca %struct.sv*, align 8
  %tmp70 = alloca i64, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store %struct.sv* %encoding, %struct.sv** %encoding.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 262144
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.lhs.true, label %if.end.83

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %3, 536870912
  %tobool3 = icmp ne i32 %and2, 0
  br i1 %tobool3, label %if.end.83, label %land.lhs.true.4

land.lhs.true.4:                                  ; preds = %land.lhs.true
  %4 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %op_private = getelementptr inbounds %struct.cop, %struct.cop* %4, i32 0, i32 7
  %5 = load i8, i8* %op_private, align 1
  %conv = zext i8 %5 to i32
  %and5 = and i32 %conv, 8
  %tobool6 = icmp ne i32 %and5, 0
  br i1 %tobool6, label %if.end.83, label %land.lhs.true.7

land.lhs.true.7:                                  ; preds = %land.lhs.true.4
  %6 = load %struct.sv*, %struct.sv** %encoding.addr, align 8
  %sv_flags8 = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 2
  %7 = load i32, i32* %sv_flags8, align 4
  %and9 = and i32 %7, 524288
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %if.then, label %if.end.83

if.then:                                          ; preds = %land.lhs.true.7
  %8 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %8, %struct.sv*** %sp, align 8
  call void @Perl_push_scope()
  call void @Perl_save_int(i32* @PL_tmps_floor)
  %9 = load i32, i32* @PL_tmps_ix, align 4
  store i32 %9, i32* @PL_tmps_floor, align 4
  call void @Perl_save_re_context()
  %10 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %10, i32 1
  store i32* %incdec.ptr, i32** @PL_markstack_ptr, align 8
  %11 = load i32*, i32** @PL_markstack_max, align 8
  %cmp = icmp eq i32* %incdec.ptr, %11
  br i1 %cmp, label %if.then.12, label %if.end

if.then.12:                                       ; preds = %if.then
  call void @Perl_markstack_grow()
  br label %if.end

if.end:                                           ; preds = %if.then.12, %if.then
  %12 = load %struct.sv**, %struct.sv*** %sp, align 8
  %13 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %12 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %13 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %conv13 = trunc i64 %sub.ptr.div to i32
  %14 = load i32*, i32** @PL_markstack_ptr, align 8
  store i32 %conv13, i32* %14, align 4
  store i32 %conv13, i32* %tmp
  %15 = load i32, i32* %tmp
  %16 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %17 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast14 = ptrtoint %struct.sv** %16 to i64
  %sub.ptr.rhs.cast15 = ptrtoint %struct.sv** %17 to i64
  %sub.ptr.sub16 = sub i64 %sub.ptr.lhs.cast14, %sub.ptr.rhs.cast15
  %sub.ptr.div17 = sdiv exact i64 %sub.ptr.sub16, 8
  %cmp18 = icmp slt i64 %sub.ptr.div17, 3
  br i1 %cmp18, label %if.then.20, label %if.end.21

if.then.20:                                       ; preds = %if.end
  %18 = load %struct.sv**, %struct.sv*** %sp, align 8
  %19 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call = call %struct.sv** @Perl_stack_grow(%struct.sv** %18, %struct.sv** %19, i32 3)
  store %struct.sv** %call, %struct.sv*** %sp, align 8
  br label %if.end.21

if.end.21:                                        ; preds = %if.then.20, %if.end
  %20 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %21 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast22 = ptrtoint %struct.sv** %20 to i64
  %sub.ptr.rhs.cast23 = ptrtoint %struct.sv** %21 to i64
  %sub.ptr.sub24 = sub i64 %sub.ptr.lhs.cast22, %sub.ptr.rhs.cast23
  %sub.ptr.div25 = sdiv exact i64 %sub.ptr.sub24, 8
  %cmp26 = icmp slt i64 %sub.ptr.div25, 1
  br i1 %cmp26, label %if.then.28, label %if.end.30

if.then.28:                                       ; preds = %if.end.21
  %22 = load %struct.sv**, %struct.sv*** %sp, align 8
  %23 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call29 = call %struct.sv** @Perl_stack_grow(%struct.sv** %22, %struct.sv** %23, i32 1)
  store %struct.sv** %call29, %struct.sv*** %sp, align 8
  br label %if.end.30

if.end.30:                                        ; preds = %if.then.28, %if.end.21
  %24 = load %struct.sv*, %struct.sv** %encoding.addr, align 8
  %25 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr32 = getelementptr inbounds %struct.sv*, %struct.sv** %25, i32 1
  store %struct.sv** %incdec.ptr32, %struct.sv*** %sp, align 8
  store %struct.sv* %24, %struct.sv** %incdec.ptr32, align 8
  store %struct.sv* %24, %struct.sv** %tmp31
  %26 = load %struct.sv*, %struct.sv** %tmp31
  %27 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %28 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast33 = ptrtoint %struct.sv** %27 to i64
  %sub.ptr.rhs.cast34 = ptrtoint %struct.sv** %28 to i64
  %sub.ptr.sub35 = sub i64 %sub.ptr.lhs.cast33, %sub.ptr.rhs.cast34
  %sub.ptr.div36 = sdiv exact i64 %sub.ptr.sub35, 8
  %cmp37 = icmp slt i64 %sub.ptr.div36, 1
  br i1 %cmp37, label %if.then.39, label %if.end.41

if.then.39:                                       ; preds = %if.end.30
  %29 = load %struct.sv**, %struct.sv*** %sp, align 8
  %30 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call40 = call %struct.sv** @Perl_stack_grow(%struct.sv** %29, %struct.sv** %30, i32 1)
  store %struct.sv** %call40, %struct.sv*** %sp, align 8
  br label %if.end.41

if.end.41:                                        ; preds = %if.then.39, %if.end.30
  %31 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %32 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr43 = getelementptr inbounds %struct.sv*, %struct.sv** %32, i32 1
  store %struct.sv** %incdec.ptr43, %struct.sv*** %sp, align 8
  store %struct.sv* %31, %struct.sv** %incdec.ptr43, align 8
  store %struct.sv* %31, %struct.sv** %tmp42
  %33 = load %struct.sv*, %struct.sv** %tmp42
  %34 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %34, %struct.sv*** @PL_stack_sp, align 8
  %call44 = call i32 @Perl_call_method(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.69, i32 0, i32 0), i32 0)
  %35 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %35, %struct.sv*** %sp, align 8
  %36 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr45 = getelementptr inbounds %struct.sv*, %struct.sv** %36, i32 -1
  store %struct.sv** %incdec.ptr45, %struct.sv*** %sp, align 8
  %37 = load %struct.sv*, %struct.sv** %36, align 8
  store %struct.sv* %37, %struct.sv** %uni, align 8
  %38 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %38, %struct.sv*** @PL_stack_sp, align 8
  %39 = load %struct.sv*, %struct.sv** %uni, align 8
  %sv_flags46 = getelementptr inbounds %struct.sv, %struct.sv* %39, i32 0, i32 2
  %40 = load i32, i32* %sv_flags46, align 4
  %and47 = and i32 %40, 262144
  %cmp48 = icmp eq i32 %and47, 262144
  br i1 %cmp48, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.41
  %41 = load %struct.sv*, %struct.sv** %uni, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %41, i32 0, i32 0
  %42 = load i8*, i8** %sv_any, align 8
  %43 = bitcast i8* %42 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %43, i32 0, i32 1
  %44 = load i64, i64* %xpv_cur, align 8
  store i64 %44, i64* %len, align 8
  %45 = load %struct.sv*, %struct.sv** %uni, align 8
  %sv_any50 = getelementptr inbounds %struct.sv, %struct.sv* %45, i32 0, i32 0
  %46 = load i8*, i8** %sv_any50, align 8
  %47 = bitcast i8* %46 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %47, i32 0, i32 0
  %48 = load i8*, i8** %xpv_pv, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end.41
  %49 = load %struct.sv*, %struct.sv** %uni, align 8
  %call51 = call i8* @Perl_sv_2pv_flags(%struct.sv* %49, i64* %len, i32 2)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %48, %cond.true ], [ %call51, %cond.false ]
  store i8* %cond, i8** %s, align 8
  %50 = load i8*, i8** %s, align 8
  %51 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any52 = getelementptr inbounds %struct.sv, %struct.sv* %51, i32 0, i32 0
  %52 = load i8*, i8** %sv_any52, align 8
  %53 = bitcast i8* %52 to %struct.xpv*
  %xpv_pv53 = getelementptr inbounds %struct.xpv, %struct.xpv* %53, i32 0, i32 0
  %54 = load i8*, i8** %xpv_pv53, align 8
  %cmp54 = icmp ne i8* %50, %54
  br i1 %cmp54, label %if.then.56, label %if.end.75

if.then.56:                                       ; preds = %cond.end
  %55 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any57 = getelementptr inbounds %struct.sv, %struct.sv* %55, i32 0, i32 0
  %56 = load i8*, i8** %sv_any57, align 8
  %57 = bitcast i8* %56 to %struct.xpv*
  %xpv_len = getelementptr inbounds %struct.xpv, %struct.xpv* %57, i32 0, i32 2
  %58 = load i64, i64* %xpv_len, align 8
  %59 = load i64, i64* %len, align 8
  %add = add i64 %59, 1
  %cmp58 = icmp ult i64 %58, %add
  br i1 %cmp58, label %cond.true.60, label %cond.false.63

cond.true.60:                                     ; preds = %if.then.56
  %60 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %61 = load i64, i64* %len, align 8
  %add61 = add i64 %61, 1
  %call62 = call i8* @Perl_sv_grow(%struct.sv* %60, i64 %add61)
  br label %cond.end.66

cond.false.63:                                    ; preds = %if.then.56
  %62 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any64 = getelementptr inbounds %struct.sv, %struct.sv* %62, i32 0, i32 0
  %63 = load i8*, i8** %sv_any64, align 8
  %64 = bitcast i8* %63 to %struct.xpv*
  %xpv_pv65 = getelementptr inbounds %struct.xpv, %struct.xpv* %64, i32 0, i32 0
  %65 = load i8*, i8** %xpv_pv65, align 8
  br label %cond.end.66

cond.end.66:                                      ; preds = %cond.false.63, %cond.true.60
  %cond67 = phi i8* [ %call62, %cond.true.60 ], [ %65, %cond.false.63 ]
  %66 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any68 = getelementptr inbounds %struct.sv, %struct.sv* %66, i32 0, i32 0
  %67 = load i8*, i8** %sv_any68, align 8
  %68 = bitcast i8* %67 to %struct.xpv*
  %xpv_pv69 = getelementptr inbounds %struct.xpv, %struct.xpv* %68, i32 0, i32 0
  %69 = load i8*, i8** %xpv_pv69, align 8
  %70 = load i8*, i8** %s, align 8
  %71 = load i64, i64* %len, align 8
  %mul = mul i64 %71, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %69, i8* %70, i64 %mul, i32 1, i1 false)
  %72 = load i64, i64* %len, align 8
  %73 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any71 = getelementptr inbounds %struct.sv, %struct.sv* %73, i32 0, i32 0
  %74 = load i8*, i8** %sv_any71, align 8
  %75 = bitcast i8* %74 to %struct.xpv*
  %xpv_cur72 = getelementptr inbounds %struct.xpv, %struct.xpv* %75, i32 0, i32 1
  store i64 %72, i64* %xpv_cur72, align 8
  store i64 %72, i64* %tmp70
  %76 = load i64, i64* %tmp70
  %77 = load i64, i64* %len, align 8
  %78 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any73 = getelementptr inbounds %struct.sv, %struct.sv* %78, i32 0, i32 0
  %79 = load i8*, i8** %sv_any73, align 8
  %80 = bitcast i8* %79 to %struct.xpv*
  %xpv_pv74 = getelementptr inbounds %struct.xpv, %struct.xpv* %80, i32 0, i32 0
  %81 = load i8*, i8** %xpv_pv74, align 8
  %arrayidx = getelementptr inbounds i8, i8* %81, i64 %77
  store i8 0, i8* %arrayidx, align 1
  br label %if.end.75

if.end.75:                                        ; preds = %cond.end.66, %cond.end
  %82 = load i32, i32* @PL_tmps_ix, align 4
  %83 = load i32, i32* @PL_tmps_floor, align 4
  %cmp76 = icmp sgt i32 %82, %83
  br i1 %cmp76, label %if.then.78, label %if.end.79

if.then.78:                                       ; preds = %if.end.75
  call void @Perl_free_tmps()
  br label %if.end.79

if.end.79:                                        ; preds = %if.then.78, %if.end.75
  call void @Perl_pop_scope()
  %84 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags80 = getelementptr inbounds %struct.sv, %struct.sv* %84, i32 0, i32 2
  %85 = load i32, i32* %sv_flags80, align 4
  %or = or i32 %85, 536870912
  store i32 %or, i32* %sv_flags80, align 4
  %86 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any81 = getelementptr inbounds %struct.sv, %struct.sv* %86, i32 0, i32 0
  %87 = load i8*, i8** %sv_any81, align 8
  %88 = bitcast i8* %87 to %struct.xpv*
  %xpv_pv82 = getelementptr inbounds %struct.xpv, %struct.xpv* %88, i32 0, i32 0
  %89 = load i8*, i8** %xpv_pv82, align 8
  store i8* %89, i8** %retval
  br label %return

if.end.83:                                        ; preds = %land.lhs.true.7, %land.lhs.true.4, %land.lhs.true, %entry
  %90 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags84 = getelementptr inbounds %struct.sv, %struct.sv* %90, i32 0, i32 2
  %91 = load i32, i32* %sv_flags84, align 4
  %and85 = and i32 %91, 67108864
  %tobool86 = icmp ne i32 %and85, 0
  br i1 %tobool86, label %cond.true.87, label %cond.false.90

cond.true.87:                                     ; preds = %if.end.83
  %92 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any88 = getelementptr inbounds %struct.sv, %struct.sv* %92, i32 0, i32 0
  %93 = load i8*, i8** %sv_any88, align 8
  %94 = bitcast i8* %93 to %struct.xpv*
  %xpv_pv89 = getelementptr inbounds %struct.xpv, %struct.xpv* %94, i32 0, i32 0
  %95 = load i8*, i8** %xpv_pv89, align 8
  br label %cond.end.91

cond.false.90:                                    ; preds = %if.end.83
  br label %cond.end.91

cond.end.91:                                      ; preds = %cond.false.90, %cond.true.87
  %cond92 = phi i8* [ %95, %cond.true.87 ], [ null, %cond.false.90 ]
  store i8* %cond92, i8** %retval
  br label %return

return:                                           ; preds = %cond.end.91, %if.end.79
  %96 = load i8*, i8** %retval
  ret i8* %96
}

declare i8* @Perl_bytes_to_utf8(i8*, i64*) #1

declare i8* @Perl_utf8_to_bytes(i8*, i64*) #1

; Function Attrs: nounwind uwtable
define void @Perl_sv_utf8_encode(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i64 @Perl_sv_utf8_upgrade_flags(%struct.sv* %0, i32 2)
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and = and i32 %2, 9437184
  %cmp = icmp eq i32 %and, 9437184
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_force_normal_flags(%struct.sv* %3, i32 0)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 2
  %5 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %5, 8388608
  %tobool = icmp ne i32 %and2, 0
  br i1 %tobool, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_modify, i32 0, i32 0))
  br label %if.end.4

if.end.4:                                         ; preds = %if.then.3, %if.end
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags5 = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 2
  %7 = load i32, i32* %sv_flags5, align 4
  %and6 = and i32 %7, -536870913
  store i32 %and6, i32* %sv_flags5, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define void @Perl_sv_force_normal_flags(%struct.sv* %sv, i32 %flags) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %flags.addr = alloca i32, align 4
  %pvx = alloca i8*, align 8
  %len = alloca i64, align 8
  %hash = alloca i32, align 4
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 8388608
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end.36

if.then:                                          ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %3, 1048576
  %tobool3 = icmp ne i32 %and2, 0
  br i1 %tobool3, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %if.then
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 0
  %5 = load i8*, i8** %sv_any, align 8
  %6 = bitcast i8* %5 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %6, i32 0, i32 0
  %7 = load i8*, i8** %xpv_pv, align 8
  store i8* %7, i8** %pvx, align 8
  %8 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any5 = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 0
  %9 = load i8*, i8** %sv_any5, align 8
  %10 = bitcast i8* %9 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %10, i32 0, i32 1
  %11 = load i64, i64* %xpv_cur, align 8
  store i64 %11, i64* %len, align 8
  %12 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any6 = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 0
  %13 = load i8*, i8** %sv_any6, align 8
  %14 = bitcast i8* %13 to %struct.xpvuv*
  %xuv_uv = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %14, i32 0, i32 3
  %15 = load i64, i64* %xuv_uv, align 8
  %conv = trunc i64 %15 to i32
  store i32 %conv, i32* %hash, align 4
  %16 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags7 = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 2
  %17 = load i32, i32* %sv_flags7, align 4
  %and8 = and i32 %17, -1048577
  store i32 %and8, i32* %sv_flags7, align 4
  %18 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags9 = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 2
  %19 = load i32, i32* %sv_flags9, align 4
  %and10 = and i32 %19, -8388609
  store i32 %and10, i32* %sv_flags9, align 4
  %20 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any11 = getelementptr inbounds %struct.sv, %struct.sv* %20, i32 0, i32 0
  %21 = load i8*, i8** %sv_any11, align 8
  %22 = bitcast i8* %21 to %struct.xpv*
  %xpv_len = getelementptr inbounds %struct.xpv, %struct.xpv* %22, i32 0, i32 2
  %23 = load i64, i64* %xpv_len, align 8
  %24 = load i64, i64* %len, align 8
  %add = add i64 %24, 1
  %cmp = icmp ult i64 %23, %add
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.4
  %25 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %26 = load i64, i64* %len, align 8
  %add13 = add i64 %26, 1
  %call = call i8* @Perl_sv_grow(%struct.sv* %25, i64 %add13)
  br label %cond.end

cond.false:                                       ; preds = %if.then.4
  %27 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any14 = getelementptr inbounds %struct.sv, %struct.sv* %27, i32 0, i32 0
  %28 = load i8*, i8** %sv_any14, align 8
  %29 = bitcast i8* %28 to %struct.xpv*
  %xpv_pv15 = getelementptr inbounds %struct.xpv, %struct.xpv* %29, i32 0, i32 0
  %30 = load i8*, i8** %xpv_pv15, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %call, %cond.true ], [ %30, %cond.false ]
  %31 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any16 = getelementptr inbounds %struct.sv, %struct.sv* %31, i32 0, i32 0
  %32 = load i8*, i8** %sv_any16, align 8
  %33 = bitcast i8* %32 to %struct.xpv*
  %xpv_pv17 = getelementptr inbounds %struct.xpv, %struct.xpv* %33, i32 0, i32 0
  %34 = load i8*, i8** %xpv_pv17, align 8
  %35 = load i8*, i8** %pvx, align 8
  %36 = load i64, i64* %len, align 8
  %mul = mul i64 %36, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %34, i8* %35, i64 %mul, i32 1, i1 false)
  %37 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any18 = getelementptr inbounds %struct.sv, %struct.sv* %37, i32 0, i32 0
  %38 = load i8*, i8** %sv_any18, align 8
  %39 = bitcast i8* %38 to %struct.xpv*
  %xpv_pv19 = getelementptr inbounds %struct.xpv, %struct.xpv* %39, i32 0, i32 0
  %40 = load i8*, i8** %xpv_pv19, align 8
  %41 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any20 = getelementptr inbounds %struct.sv, %struct.sv* %41, i32 0, i32 0
  %42 = load i8*, i8** %sv_any20, align 8
  %43 = bitcast i8* %42 to %struct.xpv*
  %xpv_cur21 = getelementptr inbounds %struct.xpv, %struct.xpv* %43, i32 0, i32 1
  %44 = load i64, i64* %xpv_cur21, align 8
  %add.ptr = getelementptr inbounds i8, i8* %40, i64 %44
  store i8 0, i8* %add.ptr, align 1
  %45 = load i8*, i8** %pvx, align 8
  %46 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags22 = getelementptr inbounds %struct.sv, %struct.sv* %46, i32 0, i32 2
  %47 = load i32, i32* %sv_flags22, align 4
  %and23 = and i32 %47, 536870912
  %tobool24 = icmp ne i32 %and23, 0
  br i1 %tobool24, label %cond.true.25, label %cond.false.28

cond.true.25:                                     ; preds = %cond.end
  %48 = load i64, i64* %len, align 8
  %conv26 = trunc i64 %48 to i32
  %sub = sub nsw i32 0, %conv26
  %conv27 = sext i32 %sub to i64
  br label %cond.end.29

cond.false.28:                                    ; preds = %cond.end
  %49 = load i64, i64* %len, align 8
  br label %cond.end.29

cond.end.29:                                      ; preds = %cond.false.28, %cond.true.25
  %cond30 = phi i64 [ %conv27, %cond.true.25 ], [ %49, %cond.false.28 ]
  %conv31 = trunc i64 %cond30 to i32
  %50 = load i32, i32* %hash, align 4
  call void @Perl_unsharepvn(i8* %45, i32 %conv31, i32 %50)
  br label %if.end.35

if.else:                                          ; preds = %if.then
  %51 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cmp32 = icmp ne %struct.cop* %51, @PL_compiling
  br i1 %cmp32, label %if.then.34, label %if.end

if.then.34:                                       ; preds = %if.else
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_modify, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then.34, %if.else
  br label %if.end.35

if.end.35:                                        ; preds = %if.end, %cond.end.29
  br label %if.end.36

if.end.36:                                        ; preds = %if.end.35, %entry
  %52 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags37 = getelementptr inbounds %struct.sv, %struct.sv* %52, i32 0, i32 2
  %53 = load i32, i32* %sv_flags37, align 4
  %and38 = and i32 %53, 524288
  %tobool39 = icmp ne i32 %and38, 0
  br i1 %tobool39, label %if.then.40, label %if.else.41

if.then.40:                                       ; preds = %if.end.36
  %54 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %55 = load i32, i32* %flags.addr, align 4
  call void @Perl_sv_unref_flags(%struct.sv* %54, i32 %55)
  br label %if.end.51

if.else.41:                                       ; preds = %if.end.36
  %56 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags42 = getelementptr inbounds %struct.sv, %struct.sv* %56, i32 0, i32 2
  %57 = load i32, i32* %sv_flags42, align 4
  %and43 = and i32 %57, 1048576
  %tobool44 = icmp ne i32 %and43, 0
  br i1 %tobool44, label %land.lhs.true, label %if.end.50

land.lhs.true:                                    ; preds = %if.else.41
  %58 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags45 = getelementptr inbounds %struct.sv, %struct.sv* %58, i32 0, i32 2
  %59 = load i32, i32* %sv_flags45, align 4
  %and46 = and i32 %59, 255
  %cmp47 = icmp eq i32 %and46, 13
  br i1 %cmp47, label %if.then.49, label %if.end.50

if.then.49:                                       ; preds = %land.lhs.true
  %60 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @S_sv_unglob(%struct.sv* %60)
  br label %if.end.50

if.end.50:                                        ; preds = %if.then.49, %land.lhs.true, %if.else.41
  br label %if.end.51

if.end.51:                                        ; preds = %if.end.50, %if.then.40
  ret void
}

; Function Attrs: nounwind uwtable
define signext i8 @Perl_sv_utf8_decode(%struct.sv* %sv) #0 {
entry:
  %retval = alloca i8, align 1
  %sv.addr = alloca %struct.sv*, align 8
  %c = alloca i8*, align 8
  %e = alloca i8*, align 8
  %ch = alloca i8, align 1
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 67108864
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end.17

if.then:                                          ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call signext i8 @Perl_sv_utf8_downgrade(%struct.sv* %2, i8 signext 1)
  %tobool1 = icmp ne i8 %call, 0
  br i1 %tobool1, label %if.end, label %if.then.2

if.then.2:                                        ; preds = %if.then
  store i8 0, i8* %retval
  br label %return

if.end:                                           ; preds = %if.then
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 0
  %4 = load i8*, i8** %sv_any, align 8
  %5 = bitcast i8* %4 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %5, i32 0, i32 0
  %6 = load i8*, i8** %xpv_pv, align 8
  store i8* %6, i8** %c, align 8
  %7 = load i8*, i8** %c, align 8
  %8 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any3 = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 0
  %9 = load i8*, i8** %sv_any3, align 8
  %10 = bitcast i8* %9 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %10, i32 0, i32 1
  %11 = load i64, i64* %xpv_cur, align 8
  %add = add i64 %11, 1
  %call4 = call signext i8 @Perl_is_utf8_string(i8* %7, i64 %add)
  %tobool5 = icmp ne i8 %call4, 0
  br i1 %tobool5, label %if.end.7, label %if.then.6

if.then.6:                                        ; preds = %if.end
  store i8 0, i8* %retval
  br label %return

if.end.7:                                         ; preds = %if.end
  %12 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any8 = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 0
  %13 = load i8*, i8** %sv_any8, align 8
  %14 = bitcast i8* %13 to %struct.xpv*
  %xpv_pv9 = getelementptr inbounds %struct.xpv, %struct.xpv* %14, i32 0, i32 0
  %15 = load i8*, i8** %xpv_pv9, align 8
  %16 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any10 = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 0
  %17 = load i8*, i8** %sv_any10, align 8
  %18 = bitcast i8* %17 to %struct.xpv*
  %xpv_cur11 = getelementptr inbounds %struct.xpv, %struct.xpv* %18, i32 0, i32 1
  %19 = load i64, i64* %xpv_cur11, align 8
  %add.ptr = getelementptr inbounds i8, i8* %15, i64 %19
  store i8* %add.ptr, i8** %e, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end.16, %if.end.7
  %20 = load i8*, i8** %c, align 8
  %21 = load i8*, i8** %e, align 8
  %cmp = icmp ult i8* %20, %21
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %22 = load i8*, i8** %c, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %22, i32 1
  store i8* %incdec.ptr, i8** %c, align 8
  %23 = load i8, i8* %22, align 1
  store i8 %23, i8* %ch, align 1
  %24 = load i8, i8* %ch, align 1
  %conv = zext i8 %24 to i64
  %cmp12 = icmp ult i64 %conv, 128
  br i1 %cmp12, label %if.end.16, label %if.then.14

if.then.14:                                       ; preds = %while.body
  %25 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags15 = getelementptr inbounds %struct.sv, %struct.sv* %25, i32 0, i32 2
  %26 = load i32, i32* %sv_flags15, align 4
  %or = or i32 %26, 536870912
  store i32 %or, i32* %sv_flags15, align 4
  br label %while.end

if.end.16:                                        ; preds = %while.body
  br label %while.cond

while.end:                                        ; preds = %if.then.14, %while.cond
  br label %if.end.17

if.end.17:                                        ; preds = %while.end, %entry
  store i8 1, i8* %retval
  br label %return

return:                                           ; preds = %if.end.17, %if.then.6, %if.then.2
  %27 = load i8, i8* %retval
  ret i8 %27
}

declare signext i8 @Perl_is_utf8_string(i8*, i64) #1

; Function Attrs: nounwind uwtable
define void @Perl_sv_setsv(%struct.sv* %dstr, %struct.sv* %sstr) #0 {
entry:
  %dstr.addr = alloca %struct.sv*, align 8
  %sstr.addr = alloca %struct.sv*, align 8
  store %struct.sv* %dstr, %struct.sv** %dstr.addr, align 8
  store %struct.sv* %sstr, %struct.sv** %sstr.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %1 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  call void @Perl_sv_setsv_flags(%struct.sv* %0, %struct.sv* %1, i32 2)
  ret void
}

; Function Attrs: nounwind uwtable
define void @Perl_sv_setsv_flags(%struct.sv* %dstr, %struct.sv* %sstr, i32 %flags) #0 {
entry:
  %dstr.addr = alloca %struct.sv*, align 8
  %sstr.addr = alloca %struct.sv*, align 8
  %flags.addr = alloca i32, align 4
  %sflags = alloca i32, align 4
  %dtype = alloca i32, align 4
  %stype = alloca i32, align 4
  %name = alloca i8*, align 8
  %len = alloca i64, align 8
  %sref = alloca %struct.sv*, align 8
  %dref = alloca %struct.sv*, align 8
  %intro = alloca i32, align 4
  %cv = alloca %struct.cv*, align 8
  %tmp = alloca i8*, align 8
  %tmp886 = alloca i64, align 8
  %tmp891 = alloca i64, align 8
  %tmp908 = alloca i8*, align 8
  %tmp911 = alloca i64, align 8
  %tmp914 = alloca i64, align 8
  %len921 = alloca i64, align 8
  %tmp940 = alloca i64, align 8
  %smg = alloca %struct.magic*, align 8
  store %struct.sv* %dstr, %struct.sv** %dstr.addr, align 8
  store %struct.sv* %sstr, %struct.sv** %sstr.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %1 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %cmp = icmp eq %struct.sv* %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %if.end.1188

if.end:                                           ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags, align 4
  %and = and i32 %3, 9961472
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then.1, label %if.end.2

if.then.1:                                        ; preds = %if.end
  %4 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  call void @Perl_sv_force_normal(%struct.sv* %4)
  br label %if.end.2

if.end.2:                                         ; preds = %if.then.1, %if.end
  %5 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %tobool3 = icmp ne %struct.sv* %5, null
  br i1 %tobool3, label %if.end.5, label %if.then.4

if.then.4:                                        ; preds = %if.end.2
  store %struct.sv* @PL_sv_undef, %struct.sv** %sstr.addr, align 8
  br label %if.end.5

if.end.5:                                         ; preds = %if.then.4, %if.end.2
  %6 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_flags6 = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 2
  %7 = load i32, i32* %sv_flags6, align 4
  %and7 = and i32 %7, 255
  store i32 %and7, i32* %stype, align 4
  %8 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags8 = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 2
  %9 = load i32, i32* %sv_flags8, align 4
  %and9 = and i32 %9, 255
  store i32 %and9, i32* %dtype, align 4
  %10 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags10 = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags10, align 4
  %and11 = and i32 %11, -268435457
  store i32 %and11, i32* %sv_flags10, align 4
  %12 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags12 = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 2
  %13 = load i32, i32* %sv_flags12, align 4
  %and13 = and i32 %13, 57344
  %tobool14 = icmp ne i32 %and13, 0
  br i1 %tobool14, label %land.lhs.true, label %if.end.20

land.lhs.true:                                    ; preds = %if.end.5
  %14 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %call = call %struct.magic* @Perl_mg_find(%struct.sv* %14, i32 86)
  %tobool15 = icmp ne %struct.magic* %call, null
  br i1 %tobool15, label %if.then.16, label %if.end.20

if.then.16:                                       ; preds = %land.lhs.true
  %15 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %call17 = call i32 @Perl_mg_free(%struct.sv* %15)
  %16 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags18 = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 2
  %17 = load i32, i32* %sv_flags18, align 4
  %and19 = and i32 %17, -32769
  store i32 %and19, i32* %sv_flags18, align 4
  br label %if.end.20

if.end.20:                                        ; preds = %if.then.16, %land.lhs.true, %if.end.5
  %18 = load i32, i32* %stype, align 4
  switch i32 %18, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb.31
    i32 2, label %sw.bb.80
    i32 3, label %sw.bb.124
    i32 4, label %sw.bb.171
    i32 14, label %sw.bb.171
    i32 5, label %sw.bb.177
    i32 6, label %sw.bb.183
    i32 10, label %sw.bb.189
    i32 11, label %sw.bb.189
    i32 12, label %sw.bb.189
    i32 15, label %sw.bb.189
    i32 13, label %sw.bb.201
  ]

sw.bb:                                            ; preds = %if.end.20
  br label %undef_sstr

undef_sstr:                                       ; preds = %if.end.123, %if.end.79, %sw.bb
  %19 = load i32, i32* %dtype, align 4
  %cmp21 = icmp ne i32 %19, 13
  br i1 %cmp21, label %if.then.22, label %if.end.30

if.then.22:                                       ; preds = %undef_sstr
  %20 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags23 = getelementptr inbounds %struct.sv, %struct.sv* %20, i32 0, i32 2
  %21 = load i32, i32* %sv_flags23, align 4
  %and24 = and i32 %21, 1223753727
  store i32 %and24, i32* %sv_flags23, align 4
  %22 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags25 = getelementptr inbounds %struct.sv, %struct.sv* %22, i32 0, i32 2
  %23 = load i32, i32* %sv_flags25, align 4
  %and26 = and i32 %23, 2097152
  %tobool27 = icmp ne i32 %and26, 0
  br i1 %tobool27, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then.22
  %24 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %call28 = call i32 @Perl_sv_backoff(%struct.sv* %24)
  %tobool29 = icmp ne i32 %call28, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then.22
  %25 = phi i1 [ false, %if.then.22 ], [ %tobool29, %land.rhs ]
  %land.ext = zext i1 %25 to i32
  br label %if.end.1188

if.end.30:                                        ; preds = %undef_sstr
  br label %sw.epilog.355

sw.bb.31:                                         ; preds = %if.end.20
  %26 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_flags32 = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 2
  %27 = load i32, i32* %sv_flags32, align 4
  %and33 = and i32 %27, 65536
  %tobool34 = icmp ne i32 %and33, 0
  br i1 %tobool34, label %if.then.35, label %if.end.79

if.then.35:                                       ; preds = %sw.bb.31
  %28 = load i32, i32* %dtype, align 4
  switch i32 %28, label %sw.epilog [
    i32 0, label %sw.bb.36
    i32 2, label %sw.bb.38
    i32 3, label %sw.bb.40
    i32 4, label %sw.bb.40
  ]

sw.bb.36:                                         ; preds = %if.then.35
  %29 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %call37 = call signext i8 @Perl_sv_upgrade(%struct.sv* %29, i32 1)
  br label %sw.epilog

sw.bb.38:                                         ; preds = %if.then.35
  %30 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %call39 = call signext i8 @Perl_sv_upgrade(%struct.sv* %30, i32 6)
  br label %sw.epilog

sw.bb.40:                                         ; preds = %if.then.35, %if.then.35
  %31 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %call41 = call signext i8 @Perl_sv_upgrade(%struct.sv* %31, i32 5)
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.then.35, %sw.bb.40, %sw.bb.38, %sw.bb.36
  %32 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags42 = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 2
  %33 = load i32, i32* %sv_flags42, align 4
  %and43 = and i32 %33, 1223753727
  store i32 %and43, i32* %sv_flags42, align 4
  %34 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags44 = getelementptr inbounds %struct.sv, %struct.sv* %34, i32 0, i32 2
  %35 = load i32, i32* %sv_flags44, align 4
  %and45 = and i32 %35, 2097152
  %tobool46 = icmp ne i32 %and45, 0
  br i1 %tobool46, label %land.rhs.47, label %land.end.50

land.rhs.47:                                      ; preds = %sw.epilog
  %36 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %call48 = call i32 @Perl_sv_backoff(%struct.sv* %36)
  %tobool49 = icmp ne i32 %call48, 0
  br label %land.end.50

land.end.50:                                      ; preds = %land.rhs.47, %sw.epilog
  %37 = phi i1 [ false, %sw.epilog ], [ %tobool49, %land.rhs.47 ]
  %land.ext51 = zext i1 %37 to i32
  %38 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags52 = getelementptr inbounds %struct.sv, %struct.sv* %38, i32 0, i32 2
  %39 = load i32, i32* %sv_flags52, align 4
  %or = or i32 %39, 16842752
  store i32 %or, i32* %sv_flags52, align 4
  %40 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %40, i32 0, i32 0
  %41 = load i8*, i8** %sv_any, align 8
  %42 = bitcast i8* %41 to %struct.xpviv*
  %xiv_iv = getelementptr inbounds %struct.xpviv, %struct.xpviv* %42, i32 0, i32 3
  %43 = load i64, i64* %xiv_iv, align 8
  %44 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any53 = getelementptr inbounds %struct.sv, %struct.sv* %44, i32 0, i32 0
  %45 = load i8*, i8** %sv_any53, align 8
  %46 = bitcast i8* %45 to %struct.xpviv*
  %xiv_iv54 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %46, i32 0, i32 3
  store i64 %43, i64* %xiv_iv54, align 8
  %47 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_flags55 = getelementptr inbounds %struct.sv, %struct.sv* %47, i32 0, i32 2
  %48 = load i32, i32* %sv_flags55, align 4
  %and56 = and i32 %48, -2147483648
  %tobool57 = icmp ne i32 %and56, 0
  br i1 %tobool57, label %if.then.58, label %if.end.61

if.then.58:                                       ; preds = %land.end.50
  %49 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags59 = getelementptr inbounds %struct.sv, %struct.sv* %49, i32 0, i32 2
  %50 = load i32, i32* %sv_flags59, align 4
  %or60 = or i32 %50, -2147483648
  store i32 %or60, i32* %sv_flags59, align 4
  br label %if.end.61

if.end.61:                                        ; preds = %if.then.58, %land.end.50
  %51 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_flags62 = getelementptr inbounds %struct.sv, %struct.sv* %51, i32 0, i32 2
  %52 = load i32, i32* %sv_flags62, align 4
  %and63 = and i32 %52, 57344
  %tobool64 = icmp ne i32 %and63, 0
  br i1 %tobool64, label %land.lhs.true.65, label %if.end.78

land.lhs.true.65:                                 ; preds = %if.end.61
  %53 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %call66 = call signext i8 @Perl_sv_tainted(%struct.sv* %53)
  %conv = sext i8 %call66 to i32
  %tobool67 = icmp ne i32 %conv, 0
  br i1 %tobool67, label %if.then.68, label %if.end.78

if.then.68:                                       ; preds = %land.lhs.true.65
  %54 = load i8, i8* @PL_tainting, align 1
  %tobool69 = icmp ne i8 %54, 0
  br i1 %tobool69, label %if.then.70, label %if.end.77

if.then.70:                                       ; preds = %if.then.68
  %55 = load i8, i8* @PL_tainted, align 1
  %tobool71 = icmp ne i8 %55, 0
  br i1 %tobool71, label %if.then.72, label %if.end.76

if.then.72:                                       ; preds = %if.then.70
  %56 = load i8, i8* @PL_tainting, align 1
  %tobool73 = icmp ne i8 %56, 0
  br i1 %tobool73, label %if.then.74, label %if.end.75

if.then.74:                                       ; preds = %if.then.72
  %57 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  call void @Perl_sv_taint(%struct.sv* %57)
  br label %if.end.75

if.end.75:                                        ; preds = %if.then.74, %if.then.72
  br label %if.end.76

if.end.76:                                        ; preds = %if.end.75, %if.then.70
  br label %if.end.77

if.end.77:                                        ; preds = %if.end.76, %if.then.68
  br label %if.end.78

if.end.78:                                        ; preds = %if.end.77, %land.lhs.true.65, %if.end.61
  br label %if.end.1188

if.end.79:                                        ; preds = %sw.bb.31
  br label %undef_sstr

sw.bb.80:                                         ; preds = %if.end.20
  %58 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_flags81 = getelementptr inbounds %struct.sv, %struct.sv* %58, i32 0, i32 2
  %59 = load i32, i32* %sv_flags81, align 4
  %and82 = and i32 %59, 131072
  %tobool83 = icmp ne i32 %and82, 0
  br i1 %tobool83, label %if.then.84, label %if.end.123

if.then.84:                                       ; preds = %sw.bb.80
  %60 = load i32, i32* %dtype, align 4
  switch i32 %60, label %sw.epilog.89 [
    i32 0, label %sw.bb.85
    i32 1, label %sw.bb.85
    i32 3, label %sw.bb.87
    i32 4, label %sw.bb.87
    i32 5, label %sw.bb.87
  ]

sw.bb.85:                                         ; preds = %if.then.84, %if.then.84
  %61 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %call86 = call signext i8 @Perl_sv_upgrade(%struct.sv* %61, i32 2)
  br label %sw.epilog.89

sw.bb.87:                                         ; preds = %if.then.84, %if.then.84, %if.then.84
  %62 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %call88 = call signext i8 @Perl_sv_upgrade(%struct.sv* %62, i32 6)
  br label %sw.epilog.89

sw.epilog.89:                                     ; preds = %if.then.84, %sw.bb.87, %sw.bb.85
  %63 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_any90 = getelementptr inbounds %struct.sv, %struct.sv* %63, i32 0, i32 0
  %64 = load i8*, i8** %sv_any90, align 8
  %65 = bitcast i8* %64 to %struct.xpvnv*
  %xnv_nv = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %65, i32 0, i32 4
  %66 = load double, double* %xnv_nv, align 8
  %67 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any91 = getelementptr inbounds %struct.sv, %struct.sv* %67, i32 0, i32 0
  %68 = load i8*, i8** %sv_any91, align 8
  %69 = bitcast i8* %68 to %struct.xpvnv*
  %xnv_nv92 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %69, i32 0, i32 4
  store double %66, double* %xnv_nv92, align 8
  %70 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags93 = getelementptr inbounds %struct.sv, %struct.sv* %70, i32 0, i32 2
  %71 = load i32, i32* %sv_flags93, align 4
  %and94 = and i32 %71, 1223753727
  store i32 %and94, i32* %sv_flags93, align 4
  %72 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags95 = getelementptr inbounds %struct.sv, %struct.sv* %72, i32 0, i32 2
  %73 = load i32, i32* %sv_flags95, align 4
  %and96 = and i32 %73, 2097152
  %tobool97 = icmp ne i32 %and96, 0
  br i1 %tobool97, label %land.rhs.98, label %land.end.101

land.rhs.98:                                      ; preds = %sw.epilog.89
  %74 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %call99 = call i32 @Perl_sv_backoff(%struct.sv* %74)
  %tobool100 = icmp ne i32 %call99, 0
  br label %land.end.101

land.end.101:                                     ; preds = %land.rhs.98, %sw.epilog.89
  %75 = phi i1 [ false, %sw.epilog.89 ], [ %tobool100, %land.rhs.98 ]
  %land.ext102 = zext i1 %75 to i32
  %76 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags103 = getelementptr inbounds %struct.sv, %struct.sv* %76, i32 0, i32 2
  %77 = load i32, i32* %sv_flags103, align 4
  %or104 = or i32 %77, 33685504
  store i32 %or104, i32* %sv_flags103, align 4
  %78 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_flags105 = getelementptr inbounds %struct.sv, %struct.sv* %78, i32 0, i32 2
  %79 = load i32, i32* %sv_flags105, align 4
  %and106 = and i32 %79, 57344
  %tobool107 = icmp ne i32 %and106, 0
  br i1 %tobool107, label %land.lhs.true.108, label %if.end.122

land.lhs.true.108:                                ; preds = %land.end.101
  %80 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %call109 = call signext i8 @Perl_sv_tainted(%struct.sv* %80)
  %conv110 = sext i8 %call109 to i32
  %tobool111 = icmp ne i32 %conv110, 0
  br i1 %tobool111, label %if.then.112, label %if.end.122

if.then.112:                                      ; preds = %land.lhs.true.108
  %81 = load i8, i8* @PL_tainting, align 1
  %tobool113 = icmp ne i8 %81, 0
  br i1 %tobool113, label %if.then.114, label %if.end.121

if.then.114:                                      ; preds = %if.then.112
  %82 = load i8, i8* @PL_tainted, align 1
  %tobool115 = icmp ne i8 %82, 0
  br i1 %tobool115, label %if.then.116, label %if.end.120

if.then.116:                                      ; preds = %if.then.114
  %83 = load i8, i8* @PL_tainting, align 1
  %tobool117 = icmp ne i8 %83, 0
  br i1 %tobool117, label %if.then.118, label %if.end.119

if.then.118:                                      ; preds = %if.then.116
  %84 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  call void @Perl_sv_taint(%struct.sv* %84)
  br label %if.end.119

if.end.119:                                       ; preds = %if.then.118, %if.then.116
  br label %if.end.120

if.end.120:                                       ; preds = %if.end.119, %if.then.114
  br label %if.end.121

if.end.121:                                       ; preds = %if.end.120, %if.then.112
  br label %if.end.122

if.end.122:                                       ; preds = %if.end.121, %land.lhs.true.108, %land.end.101
  br label %if.end.1188

if.end.123:                                       ; preds = %sw.bb.80
  br label %undef_sstr

sw.bb.124:                                        ; preds = %if.end.20
  %85 = load i32, i32* %dtype, align 4
  %cmp125 = icmp slt i32 %85, 3
  br i1 %cmp125, label %if.then.127, label %if.else

if.then.127:                                      ; preds = %sw.bb.124
  %86 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %call128 = call signext i8 @Perl_sv_upgrade(%struct.sv* %86, i32 3)
  br label %if.end.170

if.else:                                          ; preds = %sw.bb.124
  %87 = load i32, i32* %dtype, align 4
  %cmp129 = icmp eq i32 %87, 13
  br i1 %cmp129, label %land.lhs.true.131, label %if.end.169

land.lhs.true.131:                                ; preds = %if.else
  %88 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_flags132 = getelementptr inbounds %struct.sv, %struct.sv* %88, i32 0, i32 2
  %89 = load i32, i32* %sv_flags132, align 4
  %and133 = and i32 %89, 524288
  %tobool134 = icmp ne i32 %and133, 0
  br i1 %tobool134, label %land.lhs.true.135, label %if.end.169

land.lhs.true.135:                                ; preds = %land.lhs.true.131
  %90 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_any136 = getelementptr inbounds %struct.sv, %struct.sv* %90, i32 0, i32 0
  %91 = load i8*, i8** %sv_any136, align 8
  %92 = bitcast i8* %91 to %struct.xrv*
  %xrv_rv = getelementptr inbounds %struct.xrv, %struct.xrv* %92, i32 0, i32 0
  %93 = load %struct.sv*, %struct.sv** %xrv_rv, align 8
  %sv_flags137 = getelementptr inbounds %struct.sv, %struct.sv* %93, i32 0, i32 2
  %94 = load i32, i32* %sv_flags137, align 4
  %and138 = and i32 %94, 255
  %cmp139 = icmp eq i32 %and138, 13
  br i1 %cmp139, label %if.then.141, label %if.end.169

if.then.141:                                      ; preds = %land.lhs.true.135
  %95 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_any142 = getelementptr inbounds %struct.sv, %struct.sv* %95, i32 0, i32 0
  %96 = load i8*, i8** %sv_any142, align 8
  %97 = bitcast i8* %96 to %struct.xrv*
  %xrv_rv143 = getelementptr inbounds %struct.xrv, %struct.xrv* %97, i32 0, i32 0
  %98 = load %struct.sv*, %struct.sv** %xrv_rv143, align 8
  store %struct.sv* %98, %struct.sv** %sstr.addr, align 8
  %99 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %100 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %cmp144 = icmp eq %struct.sv* %99, %100
  br i1 %cmp144, label %if.then.146, label %if.end.168

if.then.146:                                      ; preds = %if.then.141
  %101 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any147 = getelementptr inbounds %struct.sv, %struct.sv* %101, i32 0, i32 0
  %102 = load i8*, i8** %sv_any147, align 8
  %103 = bitcast i8* %102 to %struct.xpvgv*
  %xgv_flags = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %103, i32 0, i32 11
  %104 = load i8, i8* %xgv_flags, align 1
  %conv148 = zext i8 %104 to i32
  %and149 = and i32 %conv148, 240
  %cmp150 = icmp ne i32 %and149, 240
  br i1 %cmp150, label %land.lhs.true.152, label %if.end.162

land.lhs.true.152:                                ; preds = %if.then.146
  %105 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_stash = getelementptr inbounds %struct.cop, %struct.cop* %105, i32 0, i32 9
  %106 = load %struct.hv*, %struct.hv** %cop_stash, align 8
  %107 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any153 = getelementptr inbounds %struct.sv, %struct.sv* %107, i32 0, i32 0
  %108 = load i8*, i8** %sv_any153, align 8
  %109 = bitcast i8* %108 to %struct.xpvgv*
  %xgv_stash = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %109, i32 0, i32 10
  %110 = load %struct.hv*, %struct.hv** %xgv_stash, align 8
  %cmp154 = icmp eq %struct.hv* %106, %110
  br i1 %cmp154, label %if.end.162, label %if.then.156

if.then.156:                                      ; preds = %land.lhs.true.152
  %111 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any157 = getelementptr inbounds %struct.sv, %struct.sv* %111, i32 0, i32 0
  %112 = load i8*, i8** %sv_any157, align 8
  %113 = bitcast i8* %112 to %struct.xpvgv*
  %xgv_flags158 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %113, i32 0, i32 11
  %114 = load i8, i8* %xgv_flags158, align 1
  %conv159 = zext i8 %114 to i32
  %or160 = or i32 %conv159, 240
  %conv161 = trunc i32 %or160 to i8
  store i8 %conv161, i8* %xgv_flags158, align 1
  br label %if.end.162

if.end.162:                                       ; preds = %if.then.156, %land.lhs.true.152, %if.then.146
  %115 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any163 = getelementptr inbounds %struct.sv, %struct.sv* %115, i32 0, i32 0
  %116 = load i8*, i8** %sv_any163, align 8
  %117 = bitcast i8* %116 to %struct.xpvgv*
  %xgv_flags164 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %117, i32 0, i32 11
  %118 = load i8, i8* %xgv_flags164, align 1
  %conv165 = zext i8 %118 to i32
  %or166 = or i32 %conv165, 2
  %conv167 = trunc i32 %or166 to i8
  store i8 %conv167, i8* %xgv_flags164, align 1
  br label %if.end.1188

if.end.168:                                       ; preds = %if.then.141
  br label %glob_assign

if.end.169:                                       ; preds = %land.lhs.true.135, %land.lhs.true.131, %if.else
  br label %if.end.170

if.end.170:                                       ; preds = %if.end.169, %if.then.127
  br label %sw.epilog.355

sw.bb.171:                                        ; preds = %if.end.20, %if.end.20
  %119 = load i32, i32* %dtype, align 4
  %cmp172 = icmp slt i32 %119, 4
  br i1 %cmp172, label %if.then.174, label %if.end.176

if.then.174:                                      ; preds = %sw.bb.171
  %120 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %call175 = call signext i8 @Perl_sv_upgrade(%struct.sv* %120, i32 4)
  br label %if.end.176

if.end.176:                                       ; preds = %if.then.174, %sw.bb.171
  br label %sw.epilog.355

sw.bb.177:                                        ; preds = %if.end.20
  %121 = load i32, i32* %dtype, align 4
  %cmp178 = icmp slt i32 %121, 5
  br i1 %cmp178, label %if.then.180, label %if.end.182

if.then.180:                                      ; preds = %sw.bb.177
  %122 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %call181 = call signext i8 @Perl_sv_upgrade(%struct.sv* %122, i32 5)
  br label %if.end.182

if.end.182:                                       ; preds = %if.then.180, %sw.bb.177
  br label %sw.epilog.355

sw.bb.183:                                        ; preds = %if.end.20
  %123 = load i32, i32* %dtype, align 4
  %cmp184 = icmp slt i32 %123, 6
  br i1 %cmp184, label %if.then.186, label %if.end.188

if.then.186:                                      ; preds = %sw.bb.183
  %124 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %call187 = call signext i8 @Perl_sv_upgrade(%struct.sv* %124, i32 6)
  br label %if.end.188

if.end.188:                                       ; preds = %if.then.186, %sw.bb.183
  br label %sw.epilog.355

sw.bb.189:                                        ; preds = %if.end.20, %if.end.20, %if.end.20, %if.end.20
  %125 = load %struct.op*, %struct.op** @PL_op, align 8
  %tobool190 = icmp ne %struct.op* %125, null
  br i1 %tobool190, label %if.then.191, label %if.else.198

if.then.191:                                      ; preds = %sw.bb.189
  %126 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %call192 = call i8* @Perl_sv_reftype(%struct.sv* %126, i32 0)
  %127 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %127, i32 0, i32 4
  %128 = load i16, i16* %op_type, align 2
  %conv193 = zext i16 %128 to i32
  %cmp194 = icmp eq i32 %conv193, 351
  br i1 %cmp194, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.191
  %129 = load %struct.op*, %struct.op** @PL_op, align 8
  %call196 = call i8* @Perl_custom_op_name(%struct.op* %129)
  br label %cond.end

cond.false:                                       ; preds = %if.then.191
  %130 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type197 = getelementptr inbounds %struct.op, %struct.op* %130, i32 0, i32 4
  %131 = load i16, i16* %op_type197, align 2
  %idxprom = zext i16 %131 to i64
  %arrayidx = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_name, i32 0, i64 %idxprom
  %132 = load i8*, i8** %arrayidx, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %call196, %cond.true ], [ %132, %cond.false ]
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.29, i32 0, i32 0), i8* %call192, i8* %cond)
  br label %if.end.200

if.else.198:                                      ; preds = %sw.bb.189
  %133 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %call199 = call i8* @Perl_sv_reftype(%struct.sv* %133, i32 0)
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.30, i32 0, i32 0), i8* %call199)
  br label %if.end.200

if.end.200:                                       ; preds = %if.else.198, %cond.end
  br label %sw.epilog.355

sw.bb.201:                                        ; preds = %if.end.20
  %134 = load i32, i32* %dtype, align 4
  %cmp202 = icmp sle i32 %134, 13
  br i1 %cmp202, label %if.then.204, label %if.end.308

if.then.204:                                      ; preds = %sw.bb.201
  br label %glob_assign

glob_assign:                                      ; preds = %if.then.329, %if.then.204, %if.end.168
  %135 = load i32, i32* %dtype, align 4
  %cmp205 = icmp ne i32 %135, 13
  br i1 %cmp205, label %if.then.207, label %if.else.228

if.then.207:                                      ; preds = %glob_assign
  %136 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_any208 = getelementptr inbounds %struct.sv, %struct.sv* %136, i32 0, i32 0
  %137 = load i8*, i8** %sv_any208, align 8
  %138 = bitcast i8* %137 to %struct.xpvgv*
  %xgv_name = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %138, i32 0, i32 8
  %139 = load i8*, i8** %xgv_name, align 8
  store i8* %139, i8** %name, align 8
  %140 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_any209 = getelementptr inbounds %struct.sv, %struct.sv* %140, i32 0, i32 0
  %141 = load i8*, i8** %sv_any209, align 8
  %142 = bitcast i8* %141 to %struct.xpvgv*
  %xgv_namelen = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %142, i32 0, i32 9
  %143 = load i64, i64* %xgv_namelen, align 8
  store i64 %143, i64* %len, align 8
  %144 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %call210 = call signext i8 @Perl_sv_upgrade(%struct.sv* %144, i32 13)
  %145 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %146 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  call void @Perl_sv_magic(%struct.sv* %145, %struct.sv* %146, i32 42, i8* null, i32 0)
  %147 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_any211 = getelementptr inbounds %struct.sv, %struct.sv* %147, i32 0, i32 0
  %148 = load i8*, i8** %sv_any211, align 8
  %149 = bitcast i8* %148 to %struct.xpvgv*
  %xgv_stash212 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %149, i32 0, i32 10
  %150 = load %struct.hv*, %struct.hv** %xgv_stash212, align 8
  %151 = bitcast %struct.hv* %150 to %struct.sv*
  store %struct.sv* %151, %struct.sv** @PL_Sv, align 8
  %152 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %tobool213 = icmp ne %struct.sv* %152, null
  br i1 %tobool213, label %land.rhs.214, label %land.end.216

land.rhs.214:                                     ; preds = %if.then.207
  %153 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %153, i32 0, i32 1
  %154 = load i32, i32* %sv_refcnt, align 4
  %inc = add i32 %154, 1
  store i32 %inc, i32* %sv_refcnt, align 4
  %tobool215 = icmp ne i32 %inc, 0
  br label %land.end.216

land.end.216:                                     ; preds = %land.rhs.214, %if.then.207
  %155 = phi i1 [ false, %if.then.207 ], [ %tobool215, %land.rhs.214 ]
  %land.ext217 = zext i1 %155 to i32
  %156 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %157 = bitcast %struct.sv* %156 to %struct.hv*
  %158 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any218 = getelementptr inbounds %struct.sv, %struct.sv* %158, i32 0, i32 0
  %159 = load i8*, i8** %sv_any218, align 8
  %160 = bitcast i8* %159 to %struct.xpvgv*
  %xgv_stash219 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %160, i32 0, i32 10
  store %struct.hv* %157, %struct.hv** %xgv_stash219, align 8
  %161 = load i8*, i8** %name, align 8
  %162 = load i64, i64* %len, align 8
  %conv220 = trunc i64 %162 to i32
  %call221 = call i8* @Perl_savepvn(i8* %161, i32 %conv220)
  %163 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any222 = getelementptr inbounds %struct.sv, %struct.sv* %163, i32 0, i32 0
  %164 = load i8*, i8** %sv_any222, align 8
  %165 = bitcast i8* %164 to %struct.xpvgv*
  %xgv_name223 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %165, i32 0, i32 8
  store i8* %call221, i8** %xgv_name223, align 8
  %166 = load i64, i64* %len, align 8
  %167 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any224 = getelementptr inbounds %struct.sv, %struct.sv* %167, i32 0, i32 0
  %168 = load i8*, i8** %sv_any224, align 8
  %169 = bitcast i8* %168 to %struct.xpvgv*
  %xgv_namelen225 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %169, i32 0, i32 9
  store i64 %166, i64* %xgv_namelen225, align 8
  %170 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags226 = getelementptr inbounds %struct.sv, %struct.sv* %170, i32 0, i32 2
  %171 = load i32, i32* %sv_flags226, align 4
  %or227 = or i32 %171, 1048576
  store i32 %or227, i32* %sv_flags226, align 4
  br label %if.end.245

if.else.228:                                      ; preds = %glob_assign
  %172 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_type = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %172, i32 0, i32 4
  %173 = load i32, i32* %si_type, align 4
  %cmp229 = icmp eq i32 %173, 3
  br i1 %cmp229, label %land.lhs.true.231, label %if.end.244

land.lhs.true.231:                                ; preds = %if.else.228
  %174 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any232 = getelementptr inbounds %struct.sv, %struct.sv* %174, i32 0, i32 0
  %175 = load i8*, i8** %sv_any232, align 8
  %176 = bitcast i8* %175 to %struct.xpvgv*
  %xgv_gp = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %176, i32 0, i32 7
  %177 = load %struct.gp*, %struct.gp** %xgv_gp, align 8
  %gp_cv = getelementptr inbounds %struct.gp, %struct.gp* %177, i32 0, i32 7
  %178 = load %struct.cv*, %struct.cv** %gp_cv, align 8
  %tobool233 = icmp ne %struct.cv* %178, null
  br i1 %tobool233, label %land.lhs.true.234, label %if.end.244

land.lhs.true.234:                                ; preds = %land.lhs.true.231
  %179 = load %struct.op*, %struct.op** @PL_sortcop, align 8
  %180 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any235 = getelementptr inbounds %struct.sv, %struct.sv* %180, i32 0, i32 0
  %181 = load i8*, i8** %sv_any235, align 8
  %182 = bitcast i8* %181 to %struct.xpvgv*
  %xgv_gp236 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %182, i32 0, i32 7
  %183 = load %struct.gp*, %struct.gp** %xgv_gp236, align 8
  %gp_cv237 = getelementptr inbounds %struct.gp, %struct.gp* %183, i32 0, i32 7
  %184 = load %struct.cv*, %struct.cv** %gp_cv237, align 8
  %sv_any238 = getelementptr inbounds %struct.cv, %struct.cv* %184, i32 0, i32 0
  %185 = load %struct.xpvcv*, %struct.xpvcv** %sv_any238, align 8
  %xcv_start = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %185, i32 0, i32 8
  %186 = load %struct.op*, %struct.op** %xcv_start, align 8
  %cmp239 = icmp eq %struct.op* %179, %186
  br i1 %cmp239, label %if.then.241, label %if.end.244

if.then.241:                                      ; preds = %land.lhs.true.234
  %187 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any242 = getelementptr inbounds %struct.sv, %struct.sv* %187, i32 0, i32 0
  %188 = load i8*, i8** %sv_any242, align 8
  %189 = bitcast i8* %188 to %struct.xpvgv*
  %xgv_name243 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %189, i32 0, i32 8
  %190 = load i8*, i8** %xgv_name243, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.31, i32 0, i32 0), i8* %190)
  br label %if.end.244

if.end.244:                                       ; preds = %if.then.241, %land.lhs.true.234, %land.lhs.true.231, %if.else.228
  br label %if.end.245

if.end.245:                                       ; preds = %if.end.244, %land.end.216
  %191 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags246 = getelementptr inbounds %struct.sv, %struct.sv* %191, i32 0, i32 2
  %192 = load i32, i32* %sv_flags246, align 4
  %and247 = and i32 %192, 1223753727
  store i32 %and247, i32* %sv_flags246, align 4
  %193 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags248 = getelementptr inbounds %struct.sv, %struct.sv* %193, i32 0, i32 2
  %194 = load i32, i32* %sv_flags248, align 4
  %and249 = and i32 %194, 2097152
  %tobool250 = icmp ne i32 %and249, 0
  br i1 %tobool250, label %land.rhs.251, label %land.end.254

land.rhs.251:                                     ; preds = %if.end.245
  %195 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %call252 = call i32 @Perl_sv_backoff(%struct.sv* %195)
  %tobool253 = icmp ne i32 %call252, 0
  br label %land.end.254

land.end.254:                                     ; preds = %land.rhs.251, %if.end.245
  %196 = phi i1 [ false, %if.end.245 ], [ %tobool253, %land.rhs.251 ]
  %land.ext255 = zext i1 %196 to i32
  %197 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any256 = getelementptr inbounds %struct.sv, %struct.sv* %197, i32 0, i32 0
  %198 = load i8*, i8** %sv_any256, align 8
  %199 = bitcast i8* %198 to %struct.xpvgv*
  %xgv_flags257 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %199, i32 0, i32 11
  %200 = load i8, i8* %xgv_flags257, align 1
  %conv258 = zext i8 %200 to i32
  %and259 = and i32 %conv258, -2
  %conv260 = trunc i32 %and259 to i8
  store i8 %conv260, i8* %xgv_flags257, align 1
  %201 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %202 = bitcast %struct.sv* %201 to %struct.gv*
  call void @Perl_gp_free(%struct.gv* %202)
  %203 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_any261 = getelementptr inbounds %struct.sv, %struct.sv* %203, i32 0, i32 0
  %204 = load i8*, i8** %sv_any261, align 8
  %205 = bitcast i8* %204 to %struct.xpvgv*
  %xgv_gp262 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %205, i32 0, i32 7
  %206 = load %struct.gp*, %struct.gp** %xgv_gp262, align 8
  %call263 = call %struct.gp* @Perl_gp_ref(%struct.gp* %206)
  %207 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any264 = getelementptr inbounds %struct.sv, %struct.sv* %207, i32 0, i32 0
  %208 = load i8*, i8** %sv_any264, align 8
  %209 = bitcast i8* %208 to %struct.xpvgv*
  %xgv_gp265 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %209, i32 0, i32 7
  store %struct.gp* %call263, %struct.gp** %xgv_gp265, align 8
  %210 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_flags266 = getelementptr inbounds %struct.sv, %struct.sv* %210, i32 0, i32 2
  %211 = load i32, i32* %sv_flags266, align 4
  %and267 = and i32 %211, 57344
  %tobool268 = icmp ne i32 %and267, 0
  br i1 %tobool268, label %land.lhs.true.269, label %if.end.283

land.lhs.true.269:                                ; preds = %land.end.254
  %212 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %call270 = call signext i8 @Perl_sv_tainted(%struct.sv* %212)
  %conv271 = sext i8 %call270 to i32
  %tobool272 = icmp ne i32 %conv271, 0
  br i1 %tobool272, label %if.then.273, label %if.end.283

if.then.273:                                      ; preds = %land.lhs.true.269
  %213 = load i8, i8* @PL_tainting, align 1
  %tobool274 = icmp ne i8 %213, 0
  br i1 %tobool274, label %if.then.275, label %if.end.282

if.then.275:                                      ; preds = %if.then.273
  %214 = load i8, i8* @PL_tainted, align 1
  %tobool276 = icmp ne i8 %214, 0
  br i1 %tobool276, label %if.then.277, label %if.end.281

if.then.277:                                      ; preds = %if.then.275
  %215 = load i8, i8* @PL_tainting, align 1
  %tobool278 = icmp ne i8 %215, 0
  br i1 %tobool278, label %if.then.279, label %if.end.280

if.then.279:                                      ; preds = %if.then.277
  %216 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  call void @Perl_sv_taint(%struct.sv* %216)
  br label %if.end.280

if.end.280:                                       ; preds = %if.then.279, %if.then.277
  br label %if.end.281

if.end.281:                                       ; preds = %if.end.280, %if.then.275
  br label %if.end.282

if.end.282:                                       ; preds = %if.end.281, %if.then.273
  br label %if.end.283

if.end.283:                                       ; preds = %if.end.282, %land.lhs.true.269, %land.end.254
  %217 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any284 = getelementptr inbounds %struct.sv, %struct.sv* %217, i32 0, i32 0
  %218 = load i8*, i8** %sv_any284, align 8
  %219 = bitcast i8* %218 to %struct.xpvgv*
  %xgv_flags285 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %219, i32 0, i32 11
  %220 = load i8, i8* %xgv_flags285, align 1
  %conv286 = zext i8 %220 to i32
  %and287 = and i32 %conv286, 240
  %cmp288 = icmp ne i32 %and287, 240
  br i1 %cmp288, label %land.lhs.true.290, label %if.end.302

land.lhs.true.290:                                ; preds = %if.end.283
  %221 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_stash291 = getelementptr inbounds %struct.cop, %struct.cop* %221, i32 0, i32 9
  %222 = load %struct.hv*, %struct.hv** %cop_stash291, align 8
  %223 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any292 = getelementptr inbounds %struct.sv, %struct.sv* %223, i32 0, i32 0
  %224 = load i8*, i8** %sv_any292, align 8
  %225 = bitcast i8* %224 to %struct.xpvgv*
  %xgv_stash293 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %225, i32 0, i32 10
  %226 = load %struct.hv*, %struct.hv** %xgv_stash293, align 8
  %cmp294 = icmp eq %struct.hv* %222, %226
  br i1 %cmp294, label %if.end.302, label %if.then.296

if.then.296:                                      ; preds = %land.lhs.true.290
  %227 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any297 = getelementptr inbounds %struct.sv, %struct.sv* %227, i32 0, i32 0
  %228 = load i8*, i8** %sv_any297, align 8
  %229 = bitcast i8* %228 to %struct.xpvgv*
  %xgv_flags298 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %229, i32 0, i32 11
  %230 = load i8, i8* %xgv_flags298, align 1
  %conv299 = zext i8 %230 to i32
  %or300 = or i32 %conv299, 240
  %conv301 = trunc i32 %or300 to i8
  store i8 %conv301, i8* %xgv_flags298, align 1
  br label %if.end.302

if.end.302:                                       ; preds = %if.then.296, %land.lhs.true.290, %if.end.283
  %231 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any303 = getelementptr inbounds %struct.sv, %struct.sv* %231, i32 0, i32 0
  %232 = load i8*, i8** %sv_any303, align 8
  %233 = bitcast i8* %232 to %struct.xpvgv*
  %xgv_flags304 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %233, i32 0, i32 11
  %234 = load i8, i8* %xgv_flags304, align 1
  %conv305 = zext i8 %234 to i32
  %or306 = or i32 %conv305, 2
  %conv307 = trunc i32 %or306 to i8
  store i8 %conv307, i8* %xgv_flags304, align 1
  br label %if.end.1188

if.end.308:                                       ; preds = %sw.bb.201
  br label %sw.default

sw.default:                                       ; preds = %if.end.20, %if.end.308
  %235 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_flags309 = getelementptr inbounds %struct.sv, %struct.sv* %235, i32 0, i32 2
  %236 = load i32, i32* %sv_flags309, align 4
  %and310 = and i32 %236, 8192
  %tobool311 = icmp ne i32 %and310, 0
  br i1 %tobool311, label %land.lhs.true.312, label %if.end.332

land.lhs.true.312:                                ; preds = %sw.default
  %237 = load i32, i32* %flags.addr, align 4
  %and313 = and i32 %237, 2
  %tobool314 = icmp ne i32 %and313, 0
  br i1 %tobool314, label %if.then.315, label %if.end.332

if.then.315:                                      ; preds = %land.lhs.true.312
  %238 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %call316 = call i32 @Perl_mg_get(%struct.sv* %238)
  %239 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_flags317 = getelementptr inbounds %struct.sv, %struct.sv* %239, i32 0, i32 2
  %240 = load i32, i32* %sv_flags317, align 4
  %and318 = and i32 %240, 255
  %241 = load i32, i32* %stype, align 4
  %cmp319 = icmp ne i32 %and318, %241
  br i1 %cmp319, label %if.then.321, label %if.end.331

if.then.321:                                      ; preds = %if.then.315
  %242 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_flags322 = getelementptr inbounds %struct.sv, %struct.sv* %242, i32 0, i32 2
  %243 = load i32, i32* %sv_flags322, align 4
  %and323 = and i32 %243, 255
  store i32 %and323, i32* %stype, align 4
  %244 = load i32, i32* %stype, align 4
  %cmp324 = icmp eq i32 %244, 13
  br i1 %cmp324, label %land.lhs.true.326, label %if.end.330

land.lhs.true.326:                                ; preds = %if.then.321
  %245 = load i32, i32* %dtype, align 4
  %cmp327 = icmp sle i32 %245, 13
  br i1 %cmp327, label %if.then.329, label %if.end.330

if.then.329:                                      ; preds = %land.lhs.true.326
  br label %glob_assign

if.end.330:                                       ; preds = %land.lhs.true.326, %if.then.321
  br label %if.end.331

if.end.331:                                       ; preds = %if.end.330, %if.then.315
  br label %if.end.332

if.end.332:                                       ; preds = %if.end.331, %land.lhs.true.312, %sw.default
  %246 = load i32, i32* %stype, align 4
  %cmp333 = icmp eq i32 %246, 9
  br i1 %cmp333, label %if.then.335, label %if.else.343

if.then.335:                                      ; preds = %if.end.332
  %247 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags336 = getelementptr inbounds %struct.sv, %struct.sv* %247, i32 0, i32 2
  %248 = load i32, i32* %sv_flags336, align 4
  %and337 = and i32 %248, 255
  %cmp338 = icmp uge i32 %and337, 6
  br i1 %cmp338, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.then.335
  %249 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %call340 = call signext i8 @Perl_sv_upgrade(%struct.sv* %249, i32 6)
  %conv341 = sext i8 %call340 to i32
  %tobool342 = icmp ne i32 %conv341, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.then.335
  %250 = phi i1 [ true, %if.then.335 ], [ %tobool342, %lor.rhs ]
  %lor.ext = zext i1 %250 to i32
  br label %if.end.354

if.else.343:                                      ; preds = %if.end.332
  %251 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags344 = getelementptr inbounds %struct.sv, %struct.sv* %251, i32 0, i32 2
  %252 = load i32, i32* %sv_flags344, align 4
  %and345 = and i32 %252, 255
  %253 = load i32, i32* %stype, align 4
  %cmp346 = icmp uge i32 %and345, %253
  br i1 %cmp346, label %lor.end.352, label %lor.rhs.348

lor.rhs.348:                                      ; preds = %if.else.343
  %254 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %255 = load i32, i32* %stype, align 4
  %call349 = call signext i8 @Perl_sv_upgrade(%struct.sv* %254, i32 %255)
  %conv350 = sext i8 %call349 to i32
  %tobool351 = icmp ne i32 %conv350, 0
  br label %lor.end.352

lor.end.352:                                      ; preds = %lor.rhs.348, %if.else.343
  %256 = phi i1 [ true, %if.else.343 ], [ %tobool351, %lor.rhs.348 ]
  %lor.ext353 = zext i1 %256 to i32
  br label %if.end.354

if.end.354:                                       ; preds = %lor.end.352, %lor.end
  br label %sw.epilog.355

sw.epilog.355:                                    ; preds = %if.end.354, %if.end.200, %if.end.188, %if.end.182, %if.end.176, %if.end.170, %if.end.30
  %257 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_flags356 = getelementptr inbounds %struct.sv, %struct.sv* %257, i32 0, i32 2
  %258 = load i32, i32* %sv_flags356, align 4
  store i32 %258, i32* %sflags, align 4
  %259 = load i32, i32* %sflags, align 4
  %and357 = and i32 %259, 524288
  %tobool358 = icmp ne i32 %and357, 0
  br i1 %tobool358, label %if.then.359, label %if.else.825

if.then.359:                                      ; preds = %sw.epilog.355
  %260 = load i32, i32* %dtype, align 4
  %cmp360 = icmp sge i32 %260, 4
  br i1 %cmp360, label %if.then.362, label %if.end.748

if.then.362:                                      ; preds = %if.then.359
  %261 = load i32, i32* %dtype, align 4
  %cmp363 = icmp eq i32 %261, 13
  br i1 %cmp363, label %if.then.365, label %if.end.725

if.then.365:                                      ; preds = %if.then.362
  %262 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_any366 = getelementptr inbounds %struct.sv, %struct.sv* %262, i32 0, i32 0
  %263 = load i8*, i8** %sv_any366, align 8
  %264 = bitcast i8* %263 to %struct.xrv*
  %xrv_rv367 = getelementptr inbounds %struct.xrv, %struct.xrv* %264, i32 0, i32 0
  %265 = load %struct.sv*, %struct.sv** %xrv_rv367, align 8
  store %struct.sv* %265, %struct.sv** @PL_Sv, align 8
  %266 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %tobool368 = icmp ne %struct.sv* %266, null
  br i1 %tobool368, label %land.rhs.369, label %land.end.373

land.rhs.369:                                     ; preds = %if.then.365
  %267 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_refcnt370 = getelementptr inbounds %struct.sv, %struct.sv* %267, i32 0, i32 1
  %268 = load i32, i32* %sv_refcnt370, align 4
  %inc371 = add i32 %268, 1
  store i32 %inc371, i32* %sv_refcnt370, align 4
  %tobool372 = icmp ne i32 %inc371, 0
  br label %land.end.373

land.end.373:                                     ; preds = %land.rhs.369, %if.then.365
  %269 = phi i1 [ false, %if.then.365 ], [ %tobool372, %land.rhs.369 ]
  %land.ext374 = zext i1 %269 to i32
  %270 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  store %struct.sv* %270, %struct.sv** %sref, align 8
  store %struct.sv* null, %struct.sv** %dref, align 8
  %271 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any375 = getelementptr inbounds %struct.sv, %struct.sv* %271, i32 0, i32 0
  %272 = load i8*, i8** %sv_any375, align 8
  %273 = bitcast i8* %272 to %struct.xpvgv*
  %xgv_flags376 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %273, i32 0, i32 11
  %274 = load i8, i8* %xgv_flags376, align 1
  %conv377 = zext i8 %274 to i32
  %and378 = and i32 %conv377, 1
  store i32 %and378, i32* %intro, align 4
  %275 = load i32, i32* %intro, align 4
  %tobool379 = icmp ne i32 %275, 0
  br i1 %tobool379, label %if.then.380, label %if.end.390

if.then.380:                                      ; preds = %land.end.373
  %276 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any381 = getelementptr inbounds %struct.sv, %struct.sv* %276, i32 0, i32 0
  %277 = load i8*, i8** %sv_any381, align 8
  %278 = bitcast i8* %277 to %struct.xpvgv*
  %xgv_flags382 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %278, i32 0, i32 11
  %279 = load i8, i8* %xgv_flags382, align 1
  %conv383 = zext i8 %279 to i32
  %and384 = and i32 %conv383, -2
  %conv385 = trunc i32 %and384 to i8
  store i8 %conv385, i8* %xgv_flags382, align 1
  %280 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_line = getelementptr inbounds %struct.cop, %struct.cop* %280, i32 0, i32 13
  %281 = load i32, i32* %cop_line, align 4
  %282 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any386 = getelementptr inbounds %struct.sv, %struct.sv* %282, i32 0, i32 0
  %283 = load i8*, i8** %sv_any386, align 8
  %284 = bitcast i8* %283 to %struct.xpvgv*
  %xgv_gp387 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %284, i32 0, i32 7
  %285 = load %struct.gp*, %struct.gp** %xgv_gp387, align 8
  %gp_line = getelementptr inbounds %struct.gp, %struct.gp* %285, i32 0, i32 10
  store i32 %281, i32* %gp_line, align 4
  %286 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %287 = bitcast %struct.sv* %286 to %struct.gv*
  %288 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any388 = getelementptr inbounds %struct.sv, %struct.sv* %288, i32 0, i32 0
  %289 = load i8*, i8** %sv_any388, align 8
  %290 = bitcast i8* %289 to %struct.xpvgv*
  %xgv_gp389 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %290, i32 0, i32 7
  %291 = load %struct.gp*, %struct.gp** %xgv_gp389, align 8
  %gp_egv = getelementptr inbounds %struct.gp, %struct.gp* %291, i32 0, i32 6
  store %struct.gv* %287, %struct.gv** %gp_egv, align 8
  br label %if.end.390

if.end.390:                                       ; preds = %if.then.380, %land.end.373
  %292 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any391 = getelementptr inbounds %struct.sv, %struct.sv* %292, i32 0, i32 0
  %293 = load i8*, i8** %sv_any391, align 8
  %294 = bitcast i8* %293 to %struct.xpvgv*
  %xgv_flags392 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %294, i32 0, i32 11
  %295 = load i8, i8* %xgv_flags392, align 1
  %conv393 = zext i8 %295 to i32
  %or394 = or i32 %conv393, 2
  %conv395 = trunc i32 %or394 to i8
  store i8 %conv395, i8* %xgv_flags392, align 1
  %296 = load %struct.sv*, %struct.sv** %sref, align 8
  %sv_flags396 = getelementptr inbounds %struct.sv, %struct.sv* %296, i32 0, i32 2
  %297 = load i32, i32* %sv_flags396, align 4
  %and397 = and i32 %297, 255
  switch i32 %and397, label %sw.default.672 [
    i32 10, label %sw.bb.398
    i32 11, label %sw.bb.429
    i32 12, label %sw.bb.460
    i32 15, label %sw.bb.646
    i32 14, label %sw.bb.659
  ]

sw.bb.398:                                        ; preds = %if.end.390
  %298 = load i32, i32* %intro, align 4
  %tobool399 = icmp ne i32 %298, 0
  br i1 %tobool399, label %if.then.400, label %if.else.403

if.then.400:                                      ; preds = %sw.bb.398
  %299 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any401 = getelementptr inbounds %struct.sv, %struct.sv* %299, i32 0, i32 0
  %300 = load i8*, i8** %sv_any401, align 8
  %301 = bitcast i8* %300 to %struct.xpvgv*
  %xgv_gp402 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %301, i32 0, i32 7
  %302 = load %struct.gp*, %struct.gp** %xgv_gp402, align 8
  %gp_av = getelementptr inbounds %struct.gp, %struct.gp* %302, i32 0, i32 4
  %303 = bitcast %struct.av** %gp_av to %struct.sv**
  call void @Perl_save_generic_svref(%struct.sv** %303)
  br label %if.end.407

if.else.403:                                      ; preds = %sw.bb.398
  %304 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any404 = getelementptr inbounds %struct.sv, %struct.sv* %304, i32 0, i32 0
  %305 = load i8*, i8** %sv_any404, align 8
  %306 = bitcast i8* %305 to %struct.xpvgv*
  %xgv_gp405 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %306, i32 0, i32 7
  %307 = load %struct.gp*, %struct.gp** %xgv_gp405, align 8
  %gp_av406 = getelementptr inbounds %struct.gp, %struct.gp* %307, i32 0, i32 4
  %308 = load %struct.av*, %struct.av** %gp_av406, align 8
  %309 = bitcast %struct.av* %308 to %struct.sv*
  store %struct.sv* %309, %struct.sv** %dref, align 8
  br label %if.end.407

if.end.407:                                       ; preds = %if.else.403, %if.then.400
  %310 = load %struct.sv*, %struct.sv** %sref, align 8
  %311 = bitcast %struct.sv* %310 to %struct.av*
  %312 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any408 = getelementptr inbounds %struct.sv, %struct.sv* %312, i32 0, i32 0
  %313 = load i8*, i8** %sv_any408, align 8
  %314 = bitcast i8* %313 to %struct.xpvgv*
  %xgv_gp409 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %314, i32 0, i32 7
  %315 = load %struct.gp*, %struct.gp** %xgv_gp409, align 8
  %gp_av410 = getelementptr inbounds %struct.gp, %struct.gp* %315, i32 0, i32 4
  store %struct.av* %311, %struct.av** %gp_av410, align 8
  %316 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any411 = getelementptr inbounds %struct.sv, %struct.sv* %316, i32 0, i32 0
  %317 = load i8*, i8** %sv_any411, align 8
  %318 = bitcast i8* %317 to %struct.xpvgv*
  %xgv_flags412 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %318, i32 0, i32 11
  %319 = load i8, i8* %xgv_flags412, align 1
  %conv413 = zext i8 %319 to i32
  %and414 = and i32 %conv413, 32
  %tobool415 = icmp ne i32 %and414, 0
  br i1 %tobool415, label %if.end.428, label %land.lhs.true.416

land.lhs.true.416:                                ; preds = %if.end.407
  %320 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_stash417 = getelementptr inbounds %struct.cop, %struct.cop* %320, i32 0, i32 9
  %321 = load %struct.hv*, %struct.hv** %cop_stash417, align 8
  %322 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any418 = getelementptr inbounds %struct.sv, %struct.sv* %322, i32 0, i32 0
  %323 = load i8*, i8** %sv_any418, align 8
  %324 = bitcast i8* %323 to %struct.xpvgv*
  %xgv_stash419 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %324, i32 0, i32 10
  %325 = load %struct.hv*, %struct.hv** %xgv_stash419, align 8
  %cmp420 = icmp eq %struct.hv* %321, %325
  br i1 %cmp420, label %if.end.428, label %if.then.422

if.then.422:                                      ; preds = %land.lhs.true.416
  %326 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any423 = getelementptr inbounds %struct.sv, %struct.sv* %326, i32 0, i32 0
  %327 = load i8*, i8** %sv_any423, align 8
  %328 = bitcast i8* %327 to %struct.xpvgv*
  %xgv_flags424 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %328, i32 0, i32 11
  %329 = load i8, i8* %xgv_flags424, align 1
  %conv425 = zext i8 %329 to i32
  %or426 = or i32 %conv425, 32
  %conv427 = trunc i32 %or426 to i8
  store i8 %conv427, i8* %xgv_flags424, align 1
  br label %if.end.428

if.end.428:                                       ; preds = %if.then.422, %land.lhs.true.416, %if.end.407
  br label %sw.epilog.703

sw.bb.429:                                        ; preds = %if.end.390
  %330 = load i32, i32* %intro, align 4
  %tobool430 = icmp ne i32 %330, 0
  br i1 %tobool430, label %if.then.431, label %if.else.434

if.then.431:                                      ; preds = %sw.bb.429
  %331 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any432 = getelementptr inbounds %struct.sv, %struct.sv* %331, i32 0, i32 0
  %332 = load i8*, i8** %sv_any432, align 8
  %333 = bitcast i8* %332 to %struct.xpvgv*
  %xgv_gp433 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %333, i32 0, i32 7
  %334 = load %struct.gp*, %struct.gp** %xgv_gp433, align 8
  %gp_hv = getelementptr inbounds %struct.gp, %struct.gp* %334, i32 0, i32 5
  %335 = bitcast %struct.hv** %gp_hv to %struct.sv**
  call void @Perl_save_generic_svref(%struct.sv** %335)
  br label %if.end.438

if.else.434:                                      ; preds = %sw.bb.429
  %336 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any435 = getelementptr inbounds %struct.sv, %struct.sv* %336, i32 0, i32 0
  %337 = load i8*, i8** %sv_any435, align 8
  %338 = bitcast i8* %337 to %struct.xpvgv*
  %xgv_gp436 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %338, i32 0, i32 7
  %339 = load %struct.gp*, %struct.gp** %xgv_gp436, align 8
  %gp_hv437 = getelementptr inbounds %struct.gp, %struct.gp* %339, i32 0, i32 5
  %340 = load %struct.hv*, %struct.hv** %gp_hv437, align 8
  %341 = bitcast %struct.hv* %340 to %struct.sv*
  store %struct.sv* %341, %struct.sv** %dref, align 8
  br label %if.end.438

if.end.438:                                       ; preds = %if.else.434, %if.then.431
  %342 = load %struct.sv*, %struct.sv** %sref, align 8
  %343 = bitcast %struct.sv* %342 to %struct.hv*
  %344 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any439 = getelementptr inbounds %struct.sv, %struct.sv* %344, i32 0, i32 0
  %345 = load i8*, i8** %sv_any439, align 8
  %346 = bitcast i8* %345 to %struct.xpvgv*
  %xgv_gp440 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %346, i32 0, i32 7
  %347 = load %struct.gp*, %struct.gp** %xgv_gp440, align 8
  %gp_hv441 = getelementptr inbounds %struct.gp, %struct.gp* %347, i32 0, i32 5
  store %struct.hv* %343, %struct.hv** %gp_hv441, align 8
  %348 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any442 = getelementptr inbounds %struct.sv, %struct.sv* %348, i32 0, i32 0
  %349 = load i8*, i8** %sv_any442, align 8
  %350 = bitcast i8* %349 to %struct.xpvgv*
  %xgv_flags443 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %350, i32 0, i32 11
  %351 = load i8, i8* %xgv_flags443, align 1
  %conv444 = zext i8 %351 to i32
  %and445 = and i32 %conv444, 64
  %tobool446 = icmp ne i32 %and445, 0
  br i1 %tobool446, label %if.end.459, label %land.lhs.true.447

land.lhs.true.447:                                ; preds = %if.end.438
  %352 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_stash448 = getelementptr inbounds %struct.cop, %struct.cop* %352, i32 0, i32 9
  %353 = load %struct.hv*, %struct.hv** %cop_stash448, align 8
  %354 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any449 = getelementptr inbounds %struct.sv, %struct.sv* %354, i32 0, i32 0
  %355 = load i8*, i8** %sv_any449, align 8
  %356 = bitcast i8* %355 to %struct.xpvgv*
  %xgv_stash450 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %356, i32 0, i32 10
  %357 = load %struct.hv*, %struct.hv** %xgv_stash450, align 8
  %cmp451 = icmp eq %struct.hv* %353, %357
  br i1 %cmp451, label %if.end.459, label %if.then.453

if.then.453:                                      ; preds = %land.lhs.true.447
  %358 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any454 = getelementptr inbounds %struct.sv, %struct.sv* %358, i32 0, i32 0
  %359 = load i8*, i8** %sv_any454, align 8
  %360 = bitcast i8* %359 to %struct.xpvgv*
  %xgv_flags455 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %360, i32 0, i32 11
  %361 = load i8, i8* %xgv_flags455, align 1
  %conv456 = zext i8 %361 to i32
  %or457 = or i32 %conv456, 64
  %conv458 = trunc i32 %or457 to i8
  store i8 %conv458, i8* %xgv_flags455, align 1
  br label %if.end.459

if.end.459:                                       ; preds = %if.then.453, %land.lhs.true.447, %if.end.438
  br label %sw.epilog.703

sw.bb.460:                                        ; preds = %if.end.390
  %362 = load i32, i32* %intro, align 4
  %tobool461 = icmp ne i32 %362, 0
  br i1 %tobool461, label %if.then.462, label %if.else.487

if.then.462:                                      ; preds = %sw.bb.460
  %363 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any463 = getelementptr inbounds %struct.sv, %struct.sv* %363, i32 0, i32 0
  %364 = load i8*, i8** %sv_any463, align 8
  %365 = bitcast i8* %364 to %struct.xpvgv*
  %xgv_gp464 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %365, i32 0, i32 7
  %366 = load %struct.gp*, %struct.gp** %xgv_gp464, align 8
  %gp_cvgen = getelementptr inbounds %struct.gp, %struct.gp* %366, i32 0, i32 8
  %367 = load i32, i32* %gp_cvgen, align 4
  %tobool465 = icmp ne i32 %367, 0
  br i1 %tobool465, label %land.lhs.true.466, label %if.end.483

land.lhs.true.466:                                ; preds = %if.then.462
  %368 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any467 = getelementptr inbounds %struct.sv, %struct.sv* %368, i32 0, i32 0
  %369 = load i8*, i8** %sv_any467, align 8
  %370 = bitcast i8* %369 to %struct.xpvgv*
  %xgv_gp468 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %370, i32 0, i32 7
  %371 = load %struct.gp*, %struct.gp** %xgv_gp468, align 8
  %gp_cv469 = getelementptr inbounds %struct.gp, %struct.gp* %371, i32 0, i32 7
  %372 = load %struct.cv*, %struct.cv** %gp_cv469, align 8
  %373 = load %struct.sv*, %struct.sv** %sref, align 8
  %374 = bitcast %struct.sv* %373 to %struct.cv*
  %cmp470 = icmp ne %struct.cv* %372, %374
  br i1 %cmp470, label %if.then.472, label %if.end.483

if.then.472:                                      ; preds = %land.lhs.true.466
  %375 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any473 = getelementptr inbounds %struct.sv, %struct.sv* %375, i32 0, i32 0
  %376 = load i8*, i8** %sv_any473, align 8
  %377 = bitcast i8* %376 to %struct.xpvgv*
  %xgv_gp474 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %377, i32 0, i32 7
  %378 = load %struct.gp*, %struct.gp** %xgv_gp474, align 8
  %gp_cv475 = getelementptr inbounds %struct.gp, %struct.gp* %378, i32 0, i32 7
  %379 = load %struct.cv*, %struct.cv** %gp_cv475, align 8
  %380 = bitcast %struct.cv* %379 to %struct.sv*
  call void @Perl_sv_free(%struct.sv* %380)
  %381 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any476 = getelementptr inbounds %struct.sv, %struct.sv* %381, i32 0, i32 0
  %382 = load i8*, i8** %sv_any476, align 8
  %383 = bitcast i8* %382 to %struct.xpvgv*
  %xgv_gp477 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %383, i32 0, i32 7
  %384 = load %struct.gp*, %struct.gp** %xgv_gp477, align 8
  %gp_cv478 = getelementptr inbounds %struct.gp, %struct.gp* %384, i32 0, i32 7
  store %struct.cv* null, %struct.cv** %gp_cv478, align 8
  %385 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any479 = getelementptr inbounds %struct.sv, %struct.sv* %385, i32 0, i32 0
  %386 = load i8*, i8** %sv_any479, align 8
  %387 = bitcast i8* %386 to %struct.xpvgv*
  %xgv_gp480 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %387, i32 0, i32 7
  %388 = load %struct.gp*, %struct.gp** %xgv_gp480, align 8
  %gp_cvgen481 = getelementptr inbounds %struct.gp, %struct.gp* %388, i32 0, i32 8
  store i32 0, i32* %gp_cvgen481, align 4
  %389 = load i32, i32* @PL_sub_generation, align 4
  %inc482 = add i32 %389, 1
  store i32 %inc482, i32* @PL_sub_generation, align 4
  br label %if.end.483

if.end.483:                                       ; preds = %if.then.472, %land.lhs.true.466, %if.then.462
  %390 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any484 = getelementptr inbounds %struct.sv, %struct.sv* %390, i32 0, i32 0
  %391 = load i8*, i8** %sv_any484, align 8
  %392 = bitcast i8* %391 to %struct.xpvgv*
  %xgv_gp485 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %392, i32 0, i32 7
  %393 = load %struct.gp*, %struct.gp** %xgv_gp485, align 8
  %gp_cv486 = getelementptr inbounds %struct.gp, %struct.gp* %393, i32 0, i32 7
  %394 = bitcast %struct.cv** %gp_cv486 to %struct.sv**
  call void @Perl_save_generic_svref(%struct.sv** %394)
  br label %if.end.491

if.else.487:                                      ; preds = %sw.bb.460
  %395 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any488 = getelementptr inbounds %struct.sv, %struct.sv* %395, i32 0, i32 0
  %396 = load i8*, i8** %sv_any488, align 8
  %397 = bitcast i8* %396 to %struct.xpvgv*
  %xgv_gp489 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %397, i32 0, i32 7
  %398 = load %struct.gp*, %struct.gp** %xgv_gp489, align 8
  %gp_cv490 = getelementptr inbounds %struct.gp, %struct.gp* %398, i32 0, i32 7
  %399 = load %struct.cv*, %struct.cv** %gp_cv490, align 8
  %400 = bitcast %struct.cv* %399 to %struct.sv*
  store %struct.sv* %400, %struct.sv** %dref, align 8
  br label %if.end.491

if.end.491:                                       ; preds = %if.else.487, %if.end.483
  %401 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any492 = getelementptr inbounds %struct.sv, %struct.sv* %401, i32 0, i32 0
  %402 = load i8*, i8** %sv_any492, align 8
  %403 = bitcast i8* %402 to %struct.xpvgv*
  %xgv_gp493 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %403, i32 0, i32 7
  %404 = load %struct.gp*, %struct.gp** %xgv_gp493, align 8
  %gp_cv494 = getelementptr inbounds %struct.gp, %struct.gp* %404, i32 0, i32 7
  %405 = load %struct.cv*, %struct.cv** %gp_cv494, align 8
  %406 = load %struct.sv*, %struct.sv** %sref, align 8
  %407 = bitcast %struct.sv* %406 to %struct.cv*
  %cmp495 = icmp ne %struct.cv* %405, %407
  br i1 %cmp495, label %if.then.497, label %if.end.627

if.then.497:                                      ; preds = %if.end.491
  %408 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any498 = getelementptr inbounds %struct.sv, %struct.sv* %408, i32 0, i32 0
  %409 = load i8*, i8** %sv_any498, align 8
  %410 = bitcast i8* %409 to %struct.xpvgv*
  %xgv_gp499 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %410, i32 0, i32 7
  %411 = load %struct.gp*, %struct.gp** %xgv_gp499, align 8
  %gp_cv500 = getelementptr inbounds %struct.gp, %struct.gp* %411, i32 0, i32 7
  %412 = load %struct.cv*, %struct.cv** %gp_cv500, align 8
  store %struct.cv* %412, %struct.cv** %cv, align 8
  %413 = load %struct.cv*, %struct.cv** %cv, align 8
  %tobool501 = icmp ne %struct.cv* %413, null
  br i1 %tobool501, label %if.then.502, label %if.end.614

if.then.502:                                      ; preds = %if.then.497
  %414 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %415 = bitcast %struct.sv* %414 to %struct.gv*
  %sv_any503 = getelementptr inbounds %struct.gv, %struct.gv* %415, i32 0, i32 0
  %416 = load %struct.xpvgv*, %struct.xpvgv** %sv_any503, align 8
  %xgv_gp504 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %416, i32 0, i32 7
  %417 = load %struct.gp*, %struct.gp** %xgv_gp504, align 8
  %gp_cvgen505 = getelementptr inbounds %struct.gp, %struct.gp* %417, i32 0, i32 8
  %418 = load i32, i32* %gp_cvgen505, align 4
  %tobool506 = icmp ne i32 %418, 0
  br i1 %tobool506, label %if.end.601, label %land.lhs.true.507

land.lhs.true.507:                                ; preds = %if.then.502
  %419 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any508 = getelementptr inbounds %struct.cv, %struct.cv* %419, i32 0, i32 0
  %420 = load %struct.xpvcv*, %struct.xpvcv** %sv_any508, align 8
  %xcv_root = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %420, i32 0, i32 9
  %421 = load %struct.op*, %struct.op** %xcv_root, align 8
  %tobool509 = icmp ne %struct.op* %421, null
  br i1 %tobool509, label %if.then.512, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.507
  %422 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any510 = getelementptr inbounds %struct.cv, %struct.cv* %422, i32 0, i32 0
  %423 = load %struct.xpvcv*, %struct.xpvcv** %sv_any510, align 8
  %xcv_xsub = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %423, i32 0, i32 10
  %424 = load void (%struct.cv*)*, void (%struct.cv*)** %xcv_xsub, align 8
  %tobool511 = icmp ne void (%struct.cv*)* %424, null
  br i1 %tobool511, label %if.then.512, label %if.end.601

if.then.512:                                      ; preds = %lor.lhs.false, %land.lhs.true.507
  %425 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_type513 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %425, i32 0, i32 4
  %426 = load i32, i32* %si_type513, align 4
  %cmp514 = icmp eq i32 %426, 3
  br i1 %cmp514, label %land.lhs.true.516, label %if.end.535

land.lhs.true.516:                                ; preds = %if.then.512
  %427 = load %struct.op*, %struct.op** @PL_sortcop, align 8
  %428 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any517 = getelementptr inbounds %struct.cv, %struct.cv* %428, i32 0, i32 0
  %429 = load %struct.xpvcv*, %struct.xpvcv** %sv_any517, align 8
  %xcv_start518 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %429, i32 0, i32 8
  %430 = load %struct.op*, %struct.op** %xcv_start518, align 8
  %cmp519 = icmp eq %struct.op* %427, %430
  br i1 %cmp519, label %if.then.521, label %if.end.535

if.then.521:                                      ; preds = %land.lhs.true.516
  %431 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %432 = bitcast %struct.sv* %431 to %struct.gv*
  %sv_any522 = getelementptr inbounds %struct.gv, %struct.gv* %432, i32 0, i32 0
  %433 = load %struct.xpvgv*, %struct.xpvgv** %sv_any522, align 8
  %xgv_gp523 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %433, i32 0, i32 7
  %434 = load %struct.gp*, %struct.gp** %xgv_gp523, align 8
  %gp_egv524 = getelementptr inbounds %struct.gp, %struct.gp* %434, i32 0, i32 6
  %435 = load %struct.gv*, %struct.gv** %gp_egv524, align 8
  %tobool525 = icmp ne %struct.gv* %435, null
  br i1 %tobool525, label %cond.true.526, label %cond.false.530

cond.true.526:                                    ; preds = %if.then.521
  %436 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %437 = bitcast %struct.sv* %436 to %struct.gv*
  %sv_any527 = getelementptr inbounds %struct.gv, %struct.gv* %437, i32 0, i32 0
  %438 = load %struct.xpvgv*, %struct.xpvgv** %sv_any527, align 8
  %xgv_gp528 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %438, i32 0, i32 7
  %439 = load %struct.gp*, %struct.gp** %xgv_gp528, align 8
  %gp_egv529 = getelementptr inbounds %struct.gp, %struct.gp* %439, i32 0, i32 6
  %440 = load %struct.gv*, %struct.gv** %gp_egv529, align 8
  br label %cond.end.531

cond.false.530:                                   ; preds = %if.then.521
  %441 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %442 = bitcast %struct.sv* %441 to %struct.gv*
  br label %cond.end.531

cond.end.531:                                     ; preds = %cond.false.530, %cond.true.526
  %cond532 = phi %struct.gv* [ %440, %cond.true.526 ], [ %442, %cond.false.530 ]
  %sv_any533 = getelementptr inbounds %struct.gv, %struct.gv* %cond532, i32 0, i32 0
  %443 = load %struct.xpvgv*, %struct.xpvgv** %sv_any533, align 8
  %xgv_name534 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %443, i32 0, i32 8
  %444 = load i8*, i8** %xgv_name534, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.31, i32 0, i32 0), i8* %444)
  br label %if.end.535

if.end.535:                                       ; preds = %cond.end.531, %land.lhs.true.516, %if.then.512
  %445 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings = getelementptr inbounds %struct.cop, %struct.cop* %445, i32 0, i32 14
  %446 = load %struct.sv*, %struct.sv** %cop_warnings, align 8
  %cmp536 = icmp ne %struct.sv* %446, null
  br i1 %cmp536, label %land.lhs.true.538, label %lor.lhs.false.553

land.lhs.true.538:                                ; preds = %if.end.535
  %447 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings539 = getelementptr inbounds %struct.cop, %struct.cop* %447, i32 0, i32 14
  %448 = load %struct.sv*, %struct.sv** %cop_warnings539, align 8
  %cmp540 = icmp ne %struct.sv* %448, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 2)
  br i1 %cmp540, label %land.lhs.true.542, label %lor.lhs.false.553

land.lhs.true.542:                                ; preds = %land.lhs.true.538
  %449 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings543 = getelementptr inbounds %struct.cop, %struct.cop* %449, i32 0, i32 14
  %450 = load %struct.sv*, %struct.sv** %cop_warnings543, align 8
  %cmp544 = icmp eq %struct.sv* %450, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 1)
  br i1 %cmp544, label %if.then.577, label %lor.lhs.false.546

lor.lhs.false.546:                                ; preds = %land.lhs.true.542
  %451 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings547 = getelementptr inbounds %struct.cop, %struct.cop* %451, i32 0, i32 14
  %452 = load %struct.sv*, %struct.sv** %cop_warnings547, align 8
  %sv_any548 = getelementptr inbounds %struct.sv, %struct.sv* %452, i32 0, i32 0
  %453 = load i8*, i8** %sv_any548, align 8
  %454 = bitcast i8* %453 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %454, i32 0, i32 0
  %455 = load i8*, i8** %xpv_pv, align 8
  %arrayidx549 = getelementptr inbounds i8, i8* %455, i64 4
  %456 = load i8, i8* %arrayidx549, align 1
  %conv550 = sext i8 %456 to i32
  %and551 = and i32 %conv550, 64
  %tobool552 = icmp ne i32 %and551, 0
  br i1 %tobool552, label %if.then.577, label %lor.lhs.false.553

lor.lhs.false.553:                                ; preds = %lor.lhs.false.546, %land.lhs.true.538, %if.end.535
  %457 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings554 = getelementptr inbounds %struct.cop, %struct.cop* %457, i32 0, i32 14
  %458 = load %struct.sv*, %struct.sv** %cop_warnings554, align 8
  %cmp555 = icmp eq %struct.sv* %458, null
  br i1 %cmp555, label %land.lhs.true.557, label %lor.lhs.false.561

land.lhs.true.557:                                ; preds = %lor.lhs.false.553
  %459 = load i8, i8* @PL_dowarn, align 1
  %conv558 = zext i8 %459 to i32
  %and559 = and i32 %conv558, 1
  %tobool560 = icmp ne i32 %and559, 0
  br i1 %tobool560, label %if.then.577, label %lor.lhs.false.561

lor.lhs.false.561:                                ; preds = %land.lhs.true.557, %lor.lhs.false.553
  %460 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any562 = getelementptr inbounds %struct.cv, %struct.cv* %460, i32 0, i32 0
  %461 = load %struct.xpvcv*, %struct.xpvcv** %sv_any562, align 8
  %xcv_flags = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %461, i32 0, i32 17
  %462 = load i16, i16* %xcv_flags, align 2
  %conv563 = zext i16 %462 to i32
  %and564 = and i32 %conv563, 512
  %tobool565 = icmp ne i32 %and564, 0
  br i1 %tobool565, label %land.lhs.true.566, label %if.end.600

land.lhs.true.566:                                ; preds = %lor.lhs.false.561
  %463 = load %struct.sv*, %struct.sv** %sref, align 8
  %464 = bitcast %struct.sv* %463 to %struct.cv*
  %sv_any567 = getelementptr inbounds %struct.cv, %struct.cv* %464, i32 0, i32 0
  %465 = load %struct.xpvcv*, %struct.xpvcv** %sv_any567, align 8
  %xcv_flags568 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %465, i32 0, i32 17
  %466 = load i16, i16* %xcv_flags568, align 2
  %conv569 = zext i16 %466 to i32
  %and570 = and i32 %conv569, 512
  %tobool571 = icmp ne i32 %and570, 0
  br i1 %tobool571, label %lor.lhs.false.572, label %if.then.577

lor.lhs.false.572:                                ; preds = %land.lhs.true.566
  %467 = load %struct.cv*, %struct.cv** %cv, align 8
  %call573 = call %struct.sv* @Perl_cv_const_sv(%struct.cv* %467)
  %468 = load %struct.sv*, %struct.sv** %sref, align 8
  %469 = bitcast %struct.sv* %468 to %struct.cv*
  %call574 = call %struct.sv* @Perl_cv_const_sv(%struct.cv* %469)
  %call575 = call i32 @Perl_sv_cmp(%struct.sv* %call573, %struct.sv* %call574)
  %tobool576 = icmp ne i32 %call575, 0
  br i1 %tobool576, label %if.then.577, label %if.end.600

if.then.577:                                      ; preds = %lor.lhs.false.572, %land.lhs.true.566, %land.lhs.true.557, %lor.lhs.false.546, %land.lhs.true.542
  %470 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any578 = getelementptr inbounds %struct.cv, %struct.cv* %470, i32 0, i32 0
  %471 = load %struct.xpvcv*, %struct.xpvcv** %sv_any578, align 8
  %xcv_flags579 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %471, i32 0, i32 17
  %472 = load i16, i16* %xcv_flags579, align 2
  %conv580 = zext i16 %472 to i32
  %and581 = and i32 %conv580, 512
  %tobool582 = icmp ne i32 %and581, 0
  %cond583 = select i1 %tobool582, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.32, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.33, i32 0, i32 0)
  %473 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %474 = bitcast %struct.sv* %473 to %struct.gv*
  %sv_any584 = getelementptr inbounds %struct.gv, %struct.gv* %474, i32 0, i32 0
  %475 = load %struct.xpvgv*, %struct.xpvgv** %sv_any584, align 8
  %xgv_stash585 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %475, i32 0, i32 10
  %476 = load %struct.hv*, %struct.hv** %xgv_stash585, align 8
  %sv_any586 = getelementptr inbounds %struct.hv, %struct.hv* %476, i32 0, i32 0
  %477 = load %struct.xpvhv*, %struct.xpvhv** %sv_any586, align 8
  %xhv_name = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %477, i32 0, i32 10
  %478 = load i8*, i8** %xhv_name, align 8
  %479 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %480 = bitcast %struct.sv* %479 to %struct.gv*
  %sv_any587 = getelementptr inbounds %struct.gv, %struct.gv* %480, i32 0, i32 0
  %481 = load %struct.xpvgv*, %struct.xpvgv** %sv_any587, align 8
  %xgv_gp588 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %481, i32 0, i32 7
  %482 = load %struct.gp*, %struct.gp** %xgv_gp588, align 8
  %gp_egv589 = getelementptr inbounds %struct.gp, %struct.gp* %482, i32 0, i32 6
  %483 = load %struct.gv*, %struct.gv** %gp_egv589, align 8
  %tobool590 = icmp ne %struct.gv* %483, null
  br i1 %tobool590, label %cond.true.591, label %cond.false.595

cond.true.591:                                    ; preds = %if.then.577
  %484 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %485 = bitcast %struct.sv* %484 to %struct.gv*
  %sv_any592 = getelementptr inbounds %struct.gv, %struct.gv* %485, i32 0, i32 0
  %486 = load %struct.xpvgv*, %struct.xpvgv** %sv_any592, align 8
  %xgv_gp593 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %486, i32 0, i32 7
  %487 = load %struct.gp*, %struct.gp** %xgv_gp593, align 8
  %gp_egv594 = getelementptr inbounds %struct.gp, %struct.gp* %487, i32 0, i32 6
  %488 = load %struct.gv*, %struct.gv** %gp_egv594, align 8
  br label %cond.end.596

cond.false.595:                                   ; preds = %if.then.577
  %489 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %490 = bitcast %struct.sv* %489 to %struct.gv*
  br label %cond.end.596

cond.end.596:                                     ; preds = %cond.false.595, %cond.true.591
  %cond597 = phi %struct.gv* [ %488, %cond.true.591 ], [ %490, %cond.false.595 ]
  %sv_any598 = getelementptr inbounds %struct.gv, %struct.gv* %cond597, i32 0, i32 0
  %491 = load %struct.xpvgv*, %struct.xpvgv** %sv_any598, align 8
  %xgv_name599 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %491, i32 0, i32 8
  %492 = load i8*, i8** %xgv_name599, align 8
  call void (i32, i8*, ...) @Perl_warner(i32 19, i8* %cond583, i8* %478, i8* %492)
  br label %if.end.600

if.end.600:                                       ; preds = %cond.end.596, %lor.lhs.false.572, %lor.lhs.false.561
  br label %if.end.601

if.end.601:                                       ; preds = %if.end.600, %lor.lhs.false, %if.then.502
  %493 = load i32, i32* %intro, align 4
  %tobool602 = icmp ne i32 %493, 0
  br i1 %tobool602, label %if.end.613, label %if.then.603

if.then.603:                                      ; preds = %if.end.601
  %494 = load %struct.cv*, %struct.cv** %cv, align 8
  %495 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %496 = bitcast %struct.sv* %495 to %struct.gv*
  %497 = load %struct.sv*, %struct.sv** %sref, align 8
  %sv_flags604 = getelementptr inbounds %struct.sv, %struct.sv* %497, i32 0, i32 2
  %498 = load i32, i32* %sv_flags604, align 4
  %and605 = and i32 %498, 262144
  %tobool606 = icmp ne i32 %and605, 0
  br i1 %tobool606, label %cond.true.607, label %cond.false.610

cond.true.607:                                    ; preds = %if.then.603
  %499 = load %struct.sv*, %struct.sv** %sref, align 8
  %sv_any608 = getelementptr inbounds %struct.sv, %struct.sv* %499, i32 0, i32 0
  %500 = load i8*, i8** %sv_any608, align 8
  %501 = bitcast i8* %500 to %struct.xpv*
  %xpv_pv609 = getelementptr inbounds %struct.xpv, %struct.xpv* %501, i32 0, i32 0
  %502 = load i8*, i8** %xpv_pv609, align 8
  br label %cond.end.611

cond.false.610:                                   ; preds = %if.then.603
  br label %cond.end.611

cond.end.611:                                     ; preds = %cond.false.610, %cond.true.607
  %cond612 = phi i8* [ %502, %cond.true.607 ], [ null, %cond.false.610 ]
  call void @Perl_cv_ckproto(%struct.cv* %494, %struct.gv* %496, i8* %cond612)
  br label %if.end.613

if.end.613:                                       ; preds = %cond.end.611, %if.end.601
  br label %if.end.614

if.end.614:                                       ; preds = %if.end.613, %if.then.497
  %503 = load %struct.sv*, %struct.sv** %sref, align 8
  %504 = bitcast %struct.sv* %503 to %struct.cv*
  %505 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any615 = getelementptr inbounds %struct.sv, %struct.sv* %505, i32 0, i32 0
  %506 = load i8*, i8** %sv_any615, align 8
  %507 = bitcast i8* %506 to %struct.xpvgv*
  %xgv_gp616 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %507, i32 0, i32 7
  %508 = load %struct.gp*, %struct.gp** %xgv_gp616, align 8
  %gp_cv617 = getelementptr inbounds %struct.gp, %struct.gp* %508, i32 0, i32 7
  store %struct.cv* %504, %struct.cv** %gp_cv617, align 8
  %509 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any618 = getelementptr inbounds %struct.sv, %struct.sv* %509, i32 0, i32 0
  %510 = load i8*, i8** %sv_any618, align 8
  %511 = bitcast i8* %510 to %struct.xpvgv*
  %xgv_gp619 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %511, i32 0, i32 7
  %512 = load %struct.gp*, %struct.gp** %xgv_gp619, align 8
  %gp_cvgen620 = getelementptr inbounds %struct.gp, %struct.gp* %512, i32 0, i32 8
  store i32 0, i32* %gp_cvgen620, align 4
  %513 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any621 = getelementptr inbounds %struct.sv, %struct.sv* %513, i32 0, i32 0
  %514 = load i8*, i8** %sv_any621, align 8
  %515 = bitcast i8* %514 to %struct.xpvgv*
  %xgv_flags622 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %515, i32 0, i32 11
  %516 = load i8, i8* %xgv_flags622, align 1
  %conv623 = zext i8 %516 to i32
  %or624 = or i32 %conv623, 4
  %conv625 = trunc i32 %or624 to i8
  store i8 %conv625, i8* %xgv_flags622, align 1
  %517 = load i32, i32* @PL_sub_generation, align 4
  %inc626 = add i32 %517, 1
  store i32 %inc626, i32* @PL_sub_generation, align 4
  br label %if.end.627

if.end.627:                                       ; preds = %if.end.614, %if.end.491
  %518 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any628 = getelementptr inbounds %struct.sv, %struct.sv* %518, i32 0, i32 0
  %519 = load i8*, i8** %sv_any628, align 8
  %520 = bitcast i8* %519 to %struct.xpvgv*
  %xgv_flags629 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %520, i32 0, i32 11
  %521 = load i8, i8* %xgv_flags629, align 1
  %conv630 = zext i8 %521 to i32
  %and631 = and i32 %conv630, 128
  %tobool632 = icmp ne i32 %and631, 0
  br i1 %tobool632, label %if.end.645, label %land.lhs.true.633

land.lhs.true.633:                                ; preds = %if.end.627
  %522 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_stash634 = getelementptr inbounds %struct.cop, %struct.cop* %522, i32 0, i32 9
  %523 = load %struct.hv*, %struct.hv** %cop_stash634, align 8
  %524 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any635 = getelementptr inbounds %struct.sv, %struct.sv* %524, i32 0, i32 0
  %525 = load i8*, i8** %sv_any635, align 8
  %526 = bitcast i8* %525 to %struct.xpvgv*
  %xgv_stash636 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %526, i32 0, i32 10
  %527 = load %struct.hv*, %struct.hv** %xgv_stash636, align 8
  %cmp637 = icmp eq %struct.hv* %523, %527
  br i1 %cmp637, label %if.end.645, label %if.then.639

if.then.639:                                      ; preds = %land.lhs.true.633
  %528 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any640 = getelementptr inbounds %struct.sv, %struct.sv* %528, i32 0, i32 0
  %529 = load i8*, i8** %sv_any640, align 8
  %530 = bitcast i8* %529 to %struct.xpvgv*
  %xgv_flags641 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %530, i32 0, i32 11
  %531 = load i8, i8* %xgv_flags641, align 1
  %conv642 = zext i8 %531 to i32
  %or643 = or i32 %conv642, 128
  %conv644 = trunc i32 %or643 to i8
  store i8 %conv644, i8* %xgv_flags641, align 1
  br label %if.end.645

if.end.645:                                       ; preds = %if.then.639, %land.lhs.true.633, %if.end.627
  br label %sw.epilog.703

sw.bb.646:                                        ; preds = %if.end.390
  %532 = load i32, i32* %intro, align 4
  %tobool647 = icmp ne i32 %532, 0
  br i1 %tobool647, label %if.then.648, label %if.else.651

if.then.648:                                      ; preds = %sw.bb.646
  %533 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any649 = getelementptr inbounds %struct.sv, %struct.sv* %533, i32 0, i32 0
  %534 = load i8*, i8** %sv_any649, align 8
  %535 = bitcast i8* %534 to %struct.xpvgv*
  %xgv_gp650 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %535, i32 0, i32 7
  %536 = load %struct.gp*, %struct.gp** %xgv_gp650, align 8
  %gp_io = getelementptr inbounds %struct.gp, %struct.gp* %536, i32 0, i32 2
  %537 = bitcast %struct.io** %gp_io to %struct.sv**
  call void @Perl_save_generic_svref(%struct.sv** %537)
  br label %if.end.655

if.else.651:                                      ; preds = %sw.bb.646
  %538 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any652 = getelementptr inbounds %struct.sv, %struct.sv* %538, i32 0, i32 0
  %539 = load i8*, i8** %sv_any652, align 8
  %540 = bitcast i8* %539 to %struct.xpvgv*
  %xgv_gp653 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %540, i32 0, i32 7
  %541 = load %struct.gp*, %struct.gp** %xgv_gp653, align 8
  %gp_io654 = getelementptr inbounds %struct.gp, %struct.gp* %541, i32 0, i32 2
  %542 = load %struct.io*, %struct.io** %gp_io654, align 8
  %543 = bitcast %struct.io* %542 to %struct.sv*
  store %struct.sv* %543, %struct.sv** %dref, align 8
  br label %if.end.655

if.end.655:                                       ; preds = %if.else.651, %if.then.648
  %544 = load %struct.sv*, %struct.sv** %sref, align 8
  %545 = bitcast %struct.sv* %544 to %struct.io*
  %546 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any656 = getelementptr inbounds %struct.sv, %struct.sv* %546, i32 0, i32 0
  %547 = load i8*, i8** %sv_any656, align 8
  %548 = bitcast i8* %547 to %struct.xpvgv*
  %xgv_gp657 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %548, i32 0, i32 7
  %549 = load %struct.gp*, %struct.gp** %xgv_gp657, align 8
  %gp_io658 = getelementptr inbounds %struct.gp, %struct.gp* %549, i32 0, i32 2
  store %struct.io* %545, %struct.io** %gp_io658, align 8
  br label %sw.epilog.703

sw.bb.659:                                        ; preds = %if.end.390
  %550 = load i32, i32* %intro, align 4
  %tobool660 = icmp ne i32 %550, 0
  br i1 %tobool660, label %if.then.661, label %if.else.664

if.then.661:                                      ; preds = %sw.bb.659
  %551 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any662 = getelementptr inbounds %struct.sv, %struct.sv* %551, i32 0, i32 0
  %552 = load i8*, i8** %sv_any662, align 8
  %553 = bitcast i8* %552 to %struct.xpvgv*
  %xgv_gp663 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %553, i32 0, i32 7
  %554 = load %struct.gp*, %struct.gp** %xgv_gp663, align 8
  %gp_form = getelementptr inbounds %struct.gp, %struct.gp* %554, i32 0, i32 3
  %555 = bitcast %struct.cv** %gp_form to %struct.sv**
  call void @Perl_save_generic_svref(%struct.sv** %555)
  br label %if.end.668

if.else.664:                                      ; preds = %sw.bb.659
  %556 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any665 = getelementptr inbounds %struct.sv, %struct.sv* %556, i32 0, i32 0
  %557 = load i8*, i8** %sv_any665, align 8
  %558 = bitcast i8* %557 to %struct.xpvgv*
  %xgv_gp666 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %558, i32 0, i32 7
  %559 = load %struct.gp*, %struct.gp** %xgv_gp666, align 8
  %gp_form667 = getelementptr inbounds %struct.gp, %struct.gp* %559, i32 0, i32 3
  %560 = load %struct.cv*, %struct.cv** %gp_form667, align 8
  %561 = bitcast %struct.cv* %560 to %struct.sv*
  store %struct.sv* %561, %struct.sv** %dref, align 8
  br label %if.end.668

if.end.668:                                       ; preds = %if.else.664, %if.then.661
  %562 = load %struct.sv*, %struct.sv** %sref, align 8
  %563 = bitcast %struct.sv* %562 to %struct.cv*
  %564 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any669 = getelementptr inbounds %struct.sv, %struct.sv* %564, i32 0, i32 0
  %565 = load i8*, i8** %sv_any669, align 8
  %566 = bitcast i8* %565 to %struct.xpvgv*
  %xgv_gp670 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %566, i32 0, i32 7
  %567 = load %struct.gp*, %struct.gp** %xgv_gp670, align 8
  %gp_form671 = getelementptr inbounds %struct.gp, %struct.gp* %567, i32 0, i32 3
  store %struct.cv* %563, %struct.cv** %gp_form671, align 8
  br label %sw.epilog.703

sw.default.672:                                   ; preds = %if.end.390
  %568 = load i32, i32* %intro, align 4
  %tobool673 = icmp ne i32 %568, 0
  br i1 %tobool673, label %if.then.674, label %if.else.677

if.then.674:                                      ; preds = %sw.default.672
  %569 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any675 = getelementptr inbounds %struct.sv, %struct.sv* %569, i32 0, i32 0
  %570 = load i8*, i8** %sv_any675, align 8
  %571 = bitcast i8* %570 to %struct.xpvgv*
  %xgv_gp676 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %571, i32 0, i32 7
  %572 = load %struct.gp*, %struct.gp** %xgv_gp676, align 8
  %gp_sv = getelementptr inbounds %struct.gp, %struct.gp* %572, i32 0, i32 0
  call void @Perl_save_generic_svref(%struct.sv** %gp_sv)
  br label %if.end.681

if.else.677:                                      ; preds = %sw.default.672
  %573 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any678 = getelementptr inbounds %struct.sv, %struct.sv* %573, i32 0, i32 0
  %574 = load i8*, i8** %sv_any678, align 8
  %575 = bitcast i8* %574 to %struct.xpvgv*
  %xgv_gp679 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %575, i32 0, i32 7
  %576 = load %struct.gp*, %struct.gp** %xgv_gp679, align 8
  %gp_sv680 = getelementptr inbounds %struct.gp, %struct.gp* %576, i32 0, i32 0
  %577 = load %struct.sv*, %struct.sv** %gp_sv680, align 8
  store %struct.sv* %577, %struct.sv** %dref, align 8
  br label %if.end.681

if.end.681:                                       ; preds = %if.else.677, %if.then.674
  %578 = load %struct.sv*, %struct.sv** %sref, align 8
  %579 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any682 = getelementptr inbounds %struct.sv, %struct.sv* %579, i32 0, i32 0
  %580 = load i8*, i8** %sv_any682, align 8
  %581 = bitcast i8* %580 to %struct.xpvgv*
  %xgv_gp683 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %581, i32 0, i32 7
  %582 = load %struct.gp*, %struct.gp** %xgv_gp683, align 8
  %gp_sv684 = getelementptr inbounds %struct.gp, %struct.gp* %582, i32 0, i32 0
  store %struct.sv* %578, %struct.sv** %gp_sv684, align 8
  %583 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any685 = getelementptr inbounds %struct.sv, %struct.sv* %583, i32 0, i32 0
  %584 = load i8*, i8** %sv_any685, align 8
  %585 = bitcast i8* %584 to %struct.xpvgv*
  %xgv_flags686 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %585, i32 0, i32 11
  %586 = load i8, i8* %xgv_flags686, align 1
  %conv687 = zext i8 %586 to i32
  %and688 = and i32 %conv687, 16
  %tobool689 = icmp ne i32 %and688, 0
  br i1 %tobool689, label %if.end.702, label %land.lhs.true.690

land.lhs.true.690:                                ; preds = %if.end.681
  %587 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_stash691 = getelementptr inbounds %struct.cop, %struct.cop* %587, i32 0, i32 9
  %588 = load %struct.hv*, %struct.hv** %cop_stash691, align 8
  %589 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any692 = getelementptr inbounds %struct.sv, %struct.sv* %589, i32 0, i32 0
  %590 = load i8*, i8** %sv_any692, align 8
  %591 = bitcast i8* %590 to %struct.xpvgv*
  %xgv_stash693 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %591, i32 0, i32 10
  %592 = load %struct.hv*, %struct.hv** %xgv_stash693, align 8
  %cmp694 = icmp eq %struct.hv* %588, %592
  br i1 %cmp694, label %if.end.702, label %if.then.696

if.then.696:                                      ; preds = %land.lhs.true.690
  %593 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any697 = getelementptr inbounds %struct.sv, %struct.sv* %593, i32 0, i32 0
  %594 = load i8*, i8** %sv_any697, align 8
  %595 = bitcast i8* %594 to %struct.xpvgv*
  %xgv_flags698 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %595, i32 0, i32 11
  %596 = load i8, i8* %xgv_flags698, align 1
  %conv699 = zext i8 %596 to i32
  %or700 = or i32 %conv699, 16
  %conv701 = trunc i32 %or700 to i8
  store i8 %conv701, i8* %xgv_flags698, align 1
  br label %if.end.702

if.end.702:                                       ; preds = %if.then.696, %land.lhs.true.690, %if.end.681
  br label %sw.epilog.703

sw.epilog.703:                                    ; preds = %if.end.702, %if.end.668, %if.end.655, %if.end.645, %if.end.459, %if.end.428
  %597 = load %struct.sv*, %struct.sv** %dref, align 8
  %tobool704 = icmp ne %struct.sv* %597, null
  br i1 %tobool704, label %if.then.705, label %if.end.706

if.then.705:                                      ; preds = %sw.epilog.703
  %598 = load %struct.sv*, %struct.sv** %dref, align 8
  call void @Perl_sv_free(%struct.sv* %598)
  br label %if.end.706

if.end.706:                                       ; preds = %if.then.705, %sw.epilog.703
  %599 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_flags707 = getelementptr inbounds %struct.sv, %struct.sv* %599, i32 0, i32 2
  %600 = load i32, i32* %sv_flags707, align 4
  %and708 = and i32 %600, 57344
  %tobool709 = icmp ne i32 %and708, 0
  br i1 %tobool709, label %land.lhs.true.710, label %if.end.724

land.lhs.true.710:                                ; preds = %if.end.706
  %601 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %call711 = call signext i8 @Perl_sv_tainted(%struct.sv* %601)
  %conv712 = sext i8 %call711 to i32
  %tobool713 = icmp ne i32 %conv712, 0
  br i1 %tobool713, label %if.then.714, label %if.end.724

if.then.714:                                      ; preds = %land.lhs.true.710
  %602 = load i8, i8* @PL_tainting, align 1
  %tobool715 = icmp ne i8 %602, 0
  br i1 %tobool715, label %if.then.716, label %if.end.723

if.then.716:                                      ; preds = %if.then.714
  %603 = load i8, i8* @PL_tainted, align 1
  %tobool717 = icmp ne i8 %603, 0
  br i1 %tobool717, label %if.then.718, label %if.end.722

if.then.718:                                      ; preds = %if.then.716
  %604 = load i8, i8* @PL_tainting, align 1
  %tobool719 = icmp ne i8 %604, 0
  br i1 %tobool719, label %if.then.720, label %if.end.721

if.then.720:                                      ; preds = %if.then.718
  %605 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  call void @Perl_sv_taint(%struct.sv* %605)
  br label %if.end.721

if.end.721:                                       ; preds = %if.then.720, %if.then.718
  br label %if.end.722

if.end.722:                                       ; preds = %if.end.721, %if.then.716
  br label %if.end.723

if.end.723:                                       ; preds = %if.end.722, %if.then.714
  br label %if.end.724

if.end.724:                                       ; preds = %if.end.723, %land.lhs.true.710, %if.end.706
  br label %if.end.1188

if.end.725:                                       ; preds = %if.then.362
  %606 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any726 = getelementptr inbounds %struct.sv, %struct.sv* %606, i32 0, i32 0
  %607 = load i8*, i8** %sv_any726, align 8
  %608 = bitcast i8* %607 to %struct.xpv*
  %xpv_pv727 = getelementptr inbounds %struct.xpv, %struct.xpv* %608, i32 0, i32 0
  %609 = load i8*, i8** %xpv_pv727, align 8
  %tobool728 = icmp ne i8* %609, null
  br i1 %tobool728, label %if.then.729, label %if.end.747

if.then.729:                                      ; preds = %if.end.725
  %610 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags730 = getelementptr inbounds %struct.sv, %struct.sv* %610, i32 0, i32 2
  %611 = load i32, i32* %sv_flags730, align 4
  %and731 = and i32 %611, 2097152
  %tobool732 = icmp ne i32 %and731, 0
  br i1 %tobool732, label %land.rhs.733, label %land.end.736

land.rhs.733:                                     ; preds = %if.then.729
  %612 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %call734 = call i32 @Perl_sv_backoff(%struct.sv* %612)
  %tobool735 = icmp ne i32 %call734, 0
  br label %land.end.736

land.end.736:                                     ; preds = %land.rhs.733, %if.then.729
  %613 = phi i1 [ false, %if.then.729 ], [ %tobool735, %land.rhs.733 ]
  %land.ext737 = zext i1 %613 to i32
  %614 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any738 = getelementptr inbounds %struct.sv, %struct.sv* %614, i32 0, i32 0
  %615 = load i8*, i8** %sv_any738, align 8
  %616 = bitcast i8* %615 to %struct.xpv*
  %xpv_len = getelementptr inbounds %struct.xpv, %struct.xpv* %616, i32 0, i32 2
  %617 = load i64, i64* %xpv_len, align 8
  %tobool739 = icmp ne i64 %617, 0
  br i1 %tobool739, label %if.then.740, label %if.end.743

if.then.740:                                      ; preds = %land.end.736
  %618 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any741 = getelementptr inbounds %struct.sv, %struct.sv* %618, i32 0, i32 0
  %619 = load i8*, i8** %sv_any741, align 8
  %620 = bitcast i8* %619 to %struct.xpv*
  %xpv_pv742 = getelementptr inbounds %struct.xpv, %struct.xpv* %620, i32 0, i32 0
  %621 = load i8*, i8** %xpv_pv742, align 8
  call void @Perl_safesysfree(i8* %621)
  br label %if.end.743

if.end.743:                                       ; preds = %if.then.740, %land.end.736
  %622 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any744 = getelementptr inbounds %struct.sv, %struct.sv* %622, i32 0, i32 0
  %623 = load i8*, i8** %sv_any744, align 8
  %624 = bitcast i8* %623 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %624, i32 0, i32 1
  store i64 0, i64* %xpv_cur, align 8
  %625 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any745 = getelementptr inbounds %struct.sv, %struct.sv* %625, i32 0, i32 0
  %626 = load i8*, i8** %sv_any745, align 8
  %627 = bitcast i8* %626 to %struct.xpv*
  %xpv_len746 = getelementptr inbounds %struct.xpv, %struct.xpv* %627, i32 0, i32 2
  store i64 0, i64* %xpv_len746, align 8
  br label %if.end.747

if.end.747:                                       ; preds = %if.end.743, %if.end.725
  br label %if.end.748

if.end.748:                                       ; preds = %if.end.747, %if.then.359
  %628 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags749 = getelementptr inbounds %struct.sv, %struct.sv* %628, i32 0, i32 2
  %629 = load i32, i32* %sv_flags749, align 4
  %and750 = and i32 %629, 1223753727
  store i32 %and750, i32* %sv_flags749, align 4
  %630 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags751 = getelementptr inbounds %struct.sv, %struct.sv* %630, i32 0, i32 2
  %631 = load i32, i32* %sv_flags751, align 4
  %and752 = and i32 %631, 2097152
  %tobool753 = icmp ne i32 %and752, 0
  br i1 %tobool753, label %land.rhs.754, label %land.end.757

land.rhs.754:                                     ; preds = %if.end.748
  %632 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %call755 = call i32 @Perl_sv_backoff(%struct.sv* %632)
  %tobool756 = icmp ne i32 %call755, 0
  br label %land.end.757

land.end.757:                                     ; preds = %land.rhs.754, %if.end.748
  %633 = phi i1 [ false, %if.end.748 ], [ %tobool756, %land.rhs.754 ]
  %land.ext758 = zext i1 %633 to i32
  %634 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_any759 = getelementptr inbounds %struct.sv, %struct.sv* %634, i32 0, i32 0
  %635 = load i8*, i8** %sv_any759, align 8
  %636 = bitcast i8* %635 to %struct.xrv*
  %xrv_rv760 = getelementptr inbounds %struct.xrv, %struct.xrv* %636, i32 0, i32 0
  %637 = load %struct.sv*, %struct.sv** %xrv_rv760, align 8
  store %struct.sv* %637, %struct.sv** @PL_Sv, align 8
  %638 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %tobool761 = icmp ne %struct.sv* %638, null
  br i1 %tobool761, label %land.rhs.762, label %land.end.766

land.rhs.762:                                     ; preds = %land.end.757
  %639 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_refcnt763 = getelementptr inbounds %struct.sv, %struct.sv* %639, i32 0, i32 1
  %640 = load i32, i32* %sv_refcnt763, align 4
  %inc764 = add i32 %640, 1
  store i32 %inc764, i32* %sv_refcnt763, align 4
  %tobool765 = icmp ne i32 %inc764, 0
  br label %land.end.766

land.end.766:                                     ; preds = %land.rhs.762, %land.end.757
  %641 = phi i1 [ false, %land.end.757 ], [ %tobool765, %land.rhs.762 ]
  %land.ext767 = zext i1 %641 to i32
  %642 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %643 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any768 = getelementptr inbounds %struct.sv, %struct.sv* %643, i32 0, i32 0
  %644 = load i8*, i8** %sv_any768, align 8
  %645 = bitcast i8* %644 to %struct.xrv*
  %xrv_rv769 = getelementptr inbounds %struct.xrv, %struct.xrv* %645, i32 0, i32 0
  store %struct.sv* %642, %struct.sv** %xrv_rv769, align 8
  %646 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags770 = getelementptr inbounds %struct.sv, %struct.sv* %646, i32 0, i32 2
  %647 = load i32, i32* %sv_flags770, align 4
  %or771 = or i32 %647, 524288
  store i32 %or771, i32* %sv_flags770, align 4
  %648 = load i32, i32* %sflags, align 4
  %and772 = and i32 %648, 33554432
  %tobool773 = icmp ne i32 %and772, 0
  br i1 %tobool773, label %if.then.774, label %if.end.787

if.then.774:                                      ; preds = %land.end.766
  %649 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags775 = getelementptr inbounds %struct.sv, %struct.sv* %649, i32 0, i32 2
  %650 = load i32, i32* %sv_flags775, align 4
  %or776 = or i32 %650, 33554432
  store i32 %or776, i32* %sv_flags775, align 4
  %651 = load i32, i32* %sflags, align 4
  %and777 = and i32 %651, 131072
  %tobool778 = icmp ne i32 %and777, 0
  br i1 %tobool778, label %if.then.779, label %if.end.782

if.then.779:                                      ; preds = %if.then.774
  %652 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags780 = getelementptr inbounds %struct.sv, %struct.sv* %652, i32 0, i32 2
  %653 = load i32, i32* %sv_flags780, align 4
  %or781 = or i32 %653, 131072
  store i32 %or781, i32* %sv_flags780, align 4
  br label %if.end.782

if.end.782:                                       ; preds = %if.then.779, %if.then.774
  %654 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_any783 = getelementptr inbounds %struct.sv, %struct.sv* %654, i32 0, i32 0
  %655 = load i8*, i8** %sv_any783, align 8
  %656 = bitcast i8* %655 to %struct.xpvnv*
  %xnv_nv784 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %656, i32 0, i32 4
  %657 = load double, double* %xnv_nv784, align 8
  %658 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any785 = getelementptr inbounds %struct.sv, %struct.sv* %658, i32 0, i32 0
  %659 = load i8*, i8** %sv_any785, align 8
  %660 = bitcast i8* %659 to %struct.xpvnv*
  %xnv_nv786 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %660, i32 0, i32 4
  store double %657, double* %xnv_nv786, align 8
  br label %if.end.787

if.end.787:                                       ; preds = %if.end.782, %land.end.766
  %661 = load i32, i32* %sflags, align 4
  %and788 = and i32 %661, 16777216
  %tobool789 = icmp ne i32 %and788, 0
  br i1 %tobool789, label %if.then.790, label %if.end.817

if.then.790:                                      ; preds = %if.end.787
  %662 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags791 = getelementptr inbounds %struct.sv, %struct.sv* %662, i32 0, i32 2
  %663 = load i32, i32* %sv_flags791, align 4
  %and792 = and i32 %663, 2097152
  %tobool793 = icmp ne i32 %and792, 0
  br i1 %tobool793, label %land.rhs.794, label %land.end.797

land.rhs.794:                                     ; preds = %if.then.790
  %664 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %call795 = call i32 @Perl_sv_backoff(%struct.sv* %664)
  %tobool796 = icmp ne i32 %call795, 0
  br label %land.end.797

land.end.797:                                     ; preds = %land.rhs.794, %if.then.790
  %665 = phi i1 [ false, %if.then.790 ], [ %tobool796, %land.rhs.794 ]
  %land.ext798 = zext i1 %665 to i32
  %666 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags799 = getelementptr inbounds %struct.sv, %struct.sv* %666, i32 0, i32 2
  %667 = load i32, i32* %sv_flags799, align 4
  %or800 = or i32 %667, 16777216
  store i32 %or800, i32* %sv_flags799, align 4
  %668 = load i32, i32* %sflags, align 4
  %and801 = and i32 %668, 65536
  %tobool802 = icmp ne i32 %and801, 0
  br i1 %tobool802, label %if.then.803, label %if.end.806

if.then.803:                                      ; preds = %land.end.797
  %669 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags804 = getelementptr inbounds %struct.sv, %struct.sv* %669, i32 0, i32 2
  %670 = load i32, i32* %sv_flags804, align 4
  %or805 = or i32 %670, 65536
  store i32 %or805, i32* %sv_flags804, align 4
  br label %if.end.806

if.end.806:                                       ; preds = %if.then.803, %land.end.797
  %671 = load i32, i32* %sflags, align 4
  %and807 = and i32 %671, -2147483648
  %tobool808 = icmp ne i32 %and807, 0
  br i1 %tobool808, label %if.then.809, label %if.end.812

if.then.809:                                      ; preds = %if.end.806
  %672 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags810 = getelementptr inbounds %struct.sv, %struct.sv* %672, i32 0, i32 2
  %673 = load i32, i32* %sv_flags810, align 4
  %or811 = or i32 %673, -2147483648
  store i32 %or811, i32* %sv_flags810, align 4
  br label %if.end.812

if.end.812:                                       ; preds = %if.then.809, %if.end.806
  %674 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_any813 = getelementptr inbounds %struct.sv, %struct.sv* %674, i32 0, i32 0
  %675 = load i8*, i8** %sv_any813, align 8
  %676 = bitcast i8* %675 to %struct.xpviv*
  %xiv_iv814 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %676, i32 0, i32 3
  %677 = load i64, i64* %xiv_iv814, align 8
  %678 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any815 = getelementptr inbounds %struct.sv, %struct.sv* %678, i32 0, i32 0
  %679 = load i8*, i8** %sv_any815, align 8
  %680 = bitcast i8* %679 to %struct.xpviv*
  %xiv_iv816 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %680, i32 0, i32 3
  store i64 %677, i64* %xiv_iv816, align 8
  br label %if.end.817

if.end.817:                                       ; preds = %if.end.812, %if.end.787
  %681 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_flags818 = getelementptr inbounds %struct.sv, %struct.sv* %681, i32 0, i32 2
  %682 = load i32, i32* %sv_flags818, align 4
  %and819 = and i32 %682, 268435456
  %tobool820 = icmp ne i32 %and819, 0
  br i1 %tobool820, label %if.then.821, label %if.end.824

if.then.821:                                      ; preds = %if.end.817
  %683 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags822 = getelementptr inbounds %struct.sv, %struct.sv* %683, i32 0, i32 2
  %684 = load i32, i32* %sv_flags822, align 4
  %or823 = or i32 %684, 268435456
  store i32 %or823, i32* %sv_flags822, align 4
  br label %if.end.824

if.end.824:                                       ; preds = %if.then.821, %if.end.817
  br label %if.end.1170

if.else.825:                                      ; preds = %sw.epilog.355
  %685 = load i32, i32* %sflags, align 4
  %and826 = and i32 %685, 67108864
  %tobool827 = icmp ne i32 %and826, 0
  br i1 %tobool827, label %if.then.828, label %if.else.1017

if.then.828:                                      ; preds = %if.else.825
  %686 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_flags829 = getelementptr inbounds %struct.sv, %struct.sv* %686, i32 0, i32 2
  %687 = load i32, i32* %sv_flags829, align 4
  %and830 = and i32 %687, 2048
  %tobool831 = icmp ne i32 %and830, 0
  br i1 %tobool831, label %land.lhs.true.832, label %if.else.919

land.lhs.true.832:                                ; preds = %if.then.828
  %688 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_refcnt833 = getelementptr inbounds %struct.sv, %struct.sv* %688, i32 0, i32 1
  %689 = load i32, i32* %sv_refcnt833, align 4
  %cmp834 = icmp eq i32 %689, 1
  br i1 %cmp834, label %land.lhs.true.836, label %if.else.919

land.lhs.true.836:                                ; preds = %land.lhs.true.832
  %690 = load i32, i32* %flags.addr, align 4
  %and837 = and i32 %690, 16
  %tobool838 = icmp ne i32 %and837, 0
  br i1 %tobool838, label %if.else.919, label %land.lhs.true.839

land.lhs.true.839:                                ; preds = %land.lhs.true.836
  %691 = load i32, i32* %sflags, align 4
  %and840 = and i32 %691, 2097152
  %tobool841 = icmp ne i32 %and840, 0
  br i1 %tobool841, label %if.else.919, label %land.lhs.true.842

land.lhs.true.842:                                ; preds = %land.lhs.true.839
  %692 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_any843 = getelementptr inbounds %struct.sv, %struct.sv* %692, i32 0, i32 0
  %693 = load i8*, i8** %sv_any843, align 8
  %694 = bitcast i8* %693 to %struct.xpv*
  %xpv_len844 = getelementptr inbounds %struct.xpv, %struct.xpv* %694, i32 0, i32 2
  %695 = load i64, i64* %xpv_len844, align 8
  %tobool845 = icmp ne i64 %695, 0
  br i1 %tobool845, label %land.lhs.true.846, label %if.else.919

land.lhs.true.846:                                ; preds = %land.lhs.true.842
  %696 = load %struct.op*, %struct.op** @PL_op, align 8
  %tobool847 = icmp ne %struct.op* %696, null
  br i1 %tobool847, label %land.lhs.true.848, label %if.then.853

land.lhs.true.848:                                ; preds = %land.lhs.true.846
  %697 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type849 = getelementptr inbounds %struct.op, %struct.op* %697, i32 0, i32 4
  %698 = load i16, i16* %op_type849, align 2
  %conv850 = zext i16 %698 to i32
  %cmp851 = icmp eq i32 %conv850, 37
  br i1 %cmp851, label %if.else.919, label %if.then.853

if.then.853:                                      ; preds = %land.lhs.true.848, %land.lhs.true.846
  %699 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any854 = getelementptr inbounds %struct.sv, %struct.sv* %699, i32 0, i32 0
  %700 = load i8*, i8** %sv_any854, align 8
  %701 = bitcast i8* %700 to %struct.xpv*
  %xpv_pv855 = getelementptr inbounds %struct.xpv, %struct.xpv* %701, i32 0, i32 0
  %702 = load i8*, i8** %xpv_pv855, align 8
  %tobool856 = icmp ne i8* %702, null
  br i1 %tobool856, label %if.then.857, label %if.end.877

if.then.857:                                      ; preds = %if.then.853
  %703 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags858 = getelementptr inbounds %struct.sv, %struct.sv* %703, i32 0, i32 2
  %704 = load i32, i32* %sv_flags858, align 4
  %and859 = and i32 %704, 2097152
  %tobool860 = icmp ne i32 %and859, 0
  br i1 %tobool860, label %if.then.861, label %if.else.868

if.then.861:                                      ; preds = %if.then.857
  %705 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags862 = getelementptr inbounds %struct.sv, %struct.sv* %705, i32 0, i32 2
  %706 = load i32, i32* %sv_flags862, align 4
  %and863 = and i32 %706, -2097153
  store i32 %and863, i32* %sv_flags862, align 4
  %707 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any864 = getelementptr inbounds %struct.sv, %struct.sv* %707, i32 0, i32 0
  %708 = load i8*, i8** %sv_any864, align 8
  %709 = bitcast i8* %708 to %struct.xpv*
  %xpv_pv865 = getelementptr inbounds %struct.xpv, %struct.xpv* %709, i32 0, i32 0
  %710 = load i8*, i8** %xpv_pv865, align 8
  %711 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any866 = getelementptr inbounds %struct.sv, %struct.sv* %711, i32 0, i32 0
  %712 = load i8*, i8** %sv_any866, align 8
  %713 = bitcast i8* %712 to %struct.xpviv*
  %xiv_iv867 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %713, i32 0, i32 3
  %714 = load i64, i64* %xiv_iv867, align 8
  %idx.neg = sub i64 0, %714
  %add.ptr = getelementptr inbounds i8, i8* %710, i64 %idx.neg
  call void @Perl_safesysfree(i8* %add.ptr)
  br label %if.end.876

if.else.868:                                      ; preds = %if.then.857
  %715 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any869 = getelementptr inbounds %struct.sv, %struct.sv* %715, i32 0, i32 0
  %716 = load i8*, i8** %sv_any869, align 8
  %717 = bitcast i8* %716 to %struct.xpv*
  %xpv_len870 = getelementptr inbounds %struct.xpv, %struct.xpv* %717, i32 0, i32 2
  %718 = load i64, i64* %xpv_len870, align 8
  %tobool871 = icmp ne i64 %718, 0
  br i1 %tobool871, label %if.then.872, label %if.end.875

if.then.872:                                      ; preds = %if.else.868
  %719 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any873 = getelementptr inbounds %struct.sv, %struct.sv* %719, i32 0, i32 0
  %720 = load i8*, i8** %sv_any873, align 8
  %721 = bitcast i8* %720 to %struct.xpv*
  %xpv_pv874 = getelementptr inbounds %struct.xpv, %struct.xpv* %721, i32 0, i32 0
  %722 = load i8*, i8** %xpv_pv874, align 8
  call void @Perl_safesysfree(i8* %722)
  br label %if.end.875

if.end.875:                                       ; preds = %if.then.872, %if.else.868
  br label %if.end.876

if.end.876:                                       ; preds = %if.end.875, %if.then.861
  br label %if.end.877

if.end.877:                                       ; preds = %if.end.876, %if.then.853
  %723 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags878 = getelementptr inbounds %struct.sv, %struct.sv* %723, i32 0, i32 2
  %724 = load i32, i32* %sv_flags878, align 4
  %and879 = and i32 %724, 1223753727
  store i32 %and879, i32* %sv_flags878, align 4
  %725 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags880 = getelementptr inbounds %struct.sv, %struct.sv* %725, i32 0, i32 2
  %726 = load i32, i32* %sv_flags880, align 4
  %or881 = or i32 %726, 67371008
  store i32 %or881, i32* %sv_flags880, align 4
  %727 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_any882 = getelementptr inbounds %struct.sv, %struct.sv* %727, i32 0, i32 0
  %728 = load i8*, i8** %sv_any882, align 8
  %729 = bitcast i8* %728 to %struct.xpv*
  %xpv_pv883 = getelementptr inbounds %struct.xpv, %struct.xpv* %729, i32 0, i32 0
  %730 = load i8*, i8** %xpv_pv883, align 8
  %731 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any884 = getelementptr inbounds %struct.sv, %struct.sv* %731, i32 0, i32 0
  %732 = load i8*, i8** %sv_any884, align 8
  %733 = bitcast i8* %732 to %struct.xpv*
  %xpv_pv885 = getelementptr inbounds %struct.xpv, %struct.xpv* %733, i32 0, i32 0
  store i8* %730, i8** %xpv_pv885, align 8
  store i8* %730, i8** %tmp
  %734 = load i8*, i8** %tmp
  %735 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_any887 = getelementptr inbounds %struct.sv, %struct.sv* %735, i32 0, i32 0
  %736 = load i8*, i8** %sv_any887, align 8
  %737 = bitcast i8* %736 to %struct.xpv*
  %xpv_len888 = getelementptr inbounds %struct.xpv, %struct.xpv* %737, i32 0, i32 2
  %738 = load i64, i64* %xpv_len888, align 8
  %739 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any889 = getelementptr inbounds %struct.sv, %struct.sv* %739, i32 0, i32 0
  %740 = load i8*, i8** %sv_any889, align 8
  %741 = bitcast i8* %740 to %struct.xpv*
  %xpv_len890 = getelementptr inbounds %struct.xpv, %struct.xpv* %741, i32 0, i32 2
  store i64 %738, i64* %xpv_len890, align 8
  store i64 %738, i64* %tmp886
  %742 = load i64, i64* %tmp886
  %743 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_any892 = getelementptr inbounds %struct.sv, %struct.sv* %743, i32 0, i32 0
  %744 = load i8*, i8** %sv_any892, align 8
  %745 = bitcast i8* %744 to %struct.xpv*
  %xpv_cur893 = getelementptr inbounds %struct.xpv, %struct.xpv* %745, i32 0, i32 1
  %746 = load i64, i64* %xpv_cur893, align 8
  %747 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any894 = getelementptr inbounds %struct.sv, %struct.sv* %747, i32 0, i32 0
  %748 = load i8*, i8** %sv_any894, align 8
  %749 = bitcast i8* %748 to %struct.xpv*
  %xpv_cur895 = getelementptr inbounds %struct.xpv, %struct.xpv* %749, i32 0, i32 1
  store i64 %746, i64* %xpv_cur895, align 8
  store i64 %746, i64* %tmp891
  %750 = load i64, i64* %tmp891
  %751 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags896 = getelementptr inbounds %struct.sv, %struct.sv* %751, i32 0, i32 2
  %752 = load i32, i32* %sv_flags896, align 4
  %and897 = and i32 %752, -2049
  store i32 %and897, i32* %sv_flags896, align 4
  %753 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_flags898 = getelementptr inbounds %struct.sv, %struct.sv* %753, i32 0, i32 2
  %754 = load i32, i32* %sv_flags898, align 4
  %and899 = and i32 %754, 1223753727
  store i32 %and899, i32* %sv_flags898, align 4
  %755 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_flags900 = getelementptr inbounds %struct.sv, %struct.sv* %755, i32 0, i32 2
  %756 = load i32, i32* %sv_flags900, align 4
  %and901 = and i32 %756, 2097152
  %tobool902 = icmp ne i32 %and901, 0
  br i1 %tobool902, label %land.rhs.903, label %land.end.906

land.rhs.903:                                     ; preds = %if.end.877
  %757 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %call904 = call i32 @Perl_sv_backoff(%struct.sv* %757)
  %tobool905 = icmp ne i32 %call904, 0
  br label %land.end.906

land.end.906:                                     ; preds = %land.rhs.903, %if.end.877
  %758 = phi i1 [ false, %if.end.877 ], [ %tobool905, %land.rhs.903 ]
  %land.ext907 = zext i1 %758 to i32
  %759 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_any909 = getelementptr inbounds %struct.sv, %struct.sv* %759, i32 0, i32 0
  %760 = load i8*, i8** %sv_any909, align 8
  %761 = bitcast i8* %760 to %struct.xpv*
  %xpv_pv910 = getelementptr inbounds %struct.xpv, %struct.xpv* %761, i32 0, i32 0
  store i8* null, i8** %xpv_pv910, align 8
  store i8* null, i8** %tmp908
  %762 = load i8*, i8** %tmp908
  %763 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_any912 = getelementptr inbounds %struct.sv, %struct.sv* %763, i32 0, i32 0
  %764 = load i8*, i8** %sv_any912, align 8
  %765 = bitcast i8* %764 to %struct.xpv*
  %xpv_len913 = getelementptr inbounds %struct.xpv, %struct.xpv* %765, i32 0, i32 2
  store i64 0, i64* %xpv_len913, align 8
  store i64 0, i64* %tmp911
  %766 = load i64, i64* %tmp911
  %767 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_any915 = getelementptr inbounds %struct.sv, %struct.sv* %767, i32 0, i32 0
  %768 = load i8*, i8** %sv_any915, align 8
  %769 = bitcast i8* %768 to %struct.xpv*
  %xpv_cur916 = getelementptr inbounds %struct.xpv, %struct.xpv* %769, i32 0, i32 1
  store i64 0, i64* %xpv_cur916, align 8
  store i64 0, i64* %tmp914
  %770 = load i64, i64* %tmp914
  %771 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_flags917 = getelementptr inbounds %struct.sv, %struct.sv* %771, i32 0, i32 2
  %772 = load i32, i32* %sv_flags917, align 4
  %and918 = and i32 %772, -2049
  store i32 %and918, i32* %sv_flags917, align 4
  br label %if.end.952

if.else.919:                                      ; preds = %land.lhs.true.848, %land.lhs.true.842, %land.lhs.true.839, %land.lhs.true.836, %land.lhs.true.832, %if.then.828
  %773 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_any922 = getelementptr inbounds %struct.sv, %struct.sv* %773, i32 0, i32 0
  %774 = load i8*, i8** %sv_any922, align 8
  %775 = bitcast i8* %774 to %struct.xpv*
  %xpv_cur923 = getelementptr inbounds %struct.xpv, %struct.xpv* %775, i32 0, i32 1
  %776 = load i64, i64* %xpv_cur923, align 8
  store i64 %776, i64* %len921, align 8
  %777 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any924 = getelementptr inbounds %struct.sv, %struct.sv* %777, i32 0, i32 0
  %778 = load i8*, i8** %sv_any924, align 8
  %779 = bitcast i8* %778 to %struct.xpv*
  %xpv_len925 = getelementptr inbounds %struct.xpv, %struct.xpv* %779, i32 0, i32 2
  %780 = load i64, i64* %xpv_len925, align 8
  %781 = load i64, i64* %len921, align 8
  %add = add i64 %781, 1
  %cmp926 = icmp ult i64 %780, %add
  br i1 %cmp926, label %cond.true.928, label %cond.false.931

cond.true.928:                                    ; preds = %if.else.919
  %782 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %783 = load i64, i64* %len921, align 8
  %add929 = add i64 %783, 1
  %call930 = call i8* @Perl_sv_grow(%struct.sv* %782, i64 %add929)
  br label %cond.end.934

cond.false.931:                                   ; preds = %if.else.919
  %784 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any932 = getelementptr inbounds %struct.sv, %struct.sv* %784, i32 0, i32 0
  %785 = load i8*, i8** %sv_any932, align 8
  %786 = bitcast i8* %785 to %struct.xpv*
  %xpv_pv933 = getelementptr inbounds %struct.xpv, %struct.xpv* %786, i32 0, i32 0
  %787 = load i8*, i8** %xpv_pv933, align 8
  br label %cond.end.934

cond.end.934:                                     ; preds = %cond.false.931, %cond.true.928
  %cond935 = phi i8* [ %call930, %cond.true.928 ], [ %787, %cond.false.931 ]
  %788 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any936 = getelementptr inbounds %struct.sv, %struct.sv* %788, i32 0, i32 0
  %789 = load i8*, i8** %sv_any936, align 8
  %790 = bitcast i8* %789 to %struct.xpv*
  %xpv_pv937 = getelementptr inbounds %struct.xpv, %struct.xpv* %790, i32 0, i32 0
  %791 = load i8*, i8** %xpv_pv937, align 8
  %792 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_any938 = getelementptr inbounds %struct.sv, %struct.sv* %792, i32 0, i32 0
  %793 = load i8*, i8** %sv_any938, align 8
  %794 = bitcast i8* %793 to %struct.xpv*
  %xpv_pv939 = getelementptr inbounds %struct.xpv, %struct.xpv* %794, i32 0, i32 0
  %795 = load i8*, i8** %xpv_pv939, align 8
  %796 = load i64, i64* %len921, align 8
  %mul = mul i64 %796, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %791, i8* %795, i64 %mul, i32 1, i1 false)
  %797 = load i64, i64* %len921, align 8
  %798 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any941 = getelementptr inbounds %struct.sv, %struct.sv* %798, i32 0, i32 0
  %799 = load i8*, i8** %sv_any941, align 8
  %800 = bitcast i8* %799 to %struct.xpv*
  %xpv_cur942 = getelementptr inbounds %struct.xpv, %struct.xpv* %800, i32 0, i32 1
  store i64 %797, i64* %xpv_cur942, align 8
  store i64 %797, i64* %tmp940
  %801 = load i64, i64* %tmp940
  %802 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any943 = getelementptr inbounds %struct.sv, %struct.sv* %802, i32 0, i32 0
  %803 = load i8*, i8** %sv_any943, align 8
  %804 = bitcast i8* %803 to %struct.xpv*
  %xpv_pv944 = getelementptr inbounds %struct.xpv, %struct.xpv* %804, i32 0, i32 0
  %805 = load i8*, i8** %xpv_pv944, align 8
  %806 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any945 = getelementptr inbounds %struct.sv, %struct.sv* %806, i32 0, i32 0
  %807 = load i8*, i8** %sv_any945, align 8
  %808 = bitcast i8* %807 to %struct.xpv*
  %xpv_cur946 = getelementptr inbounds %struct.xpv, %struct.xpv* %808, i32 0, i32 1
  %809 = load i64, i64* %xpv_cur946, align 8
  %add.ptr947 = getelementptr inbounds i8, i8* %805, i64 %809
  store i8 0, i8* %add.ptr947, align 1
  %810 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags948 = getelementptr inbounds %struct.sv, %struct.sv* %810, i32 0, i32 2
  %811 = load i32, i32* %sv_flags948, align 4
  %and949 = and i32 %811, 1223753727
  store i32 %and949, i32* %sv_flags948, align 4
  %812 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags950 = getelementptr inbounds %struct.sv, %struct.sv* %812, i32 0, i32 2
  %813 = load i32, i32* %sv_flags950, align 4
  %or951 = or i32 %813, 67371008
  store i32 %or951, i32* %sv_flags950, align 4
  br label %if.end.952

if.end.952:                                       ; preds = %cond.end.934, %land.end.906
  %814 = load i32, i32* %sflags, align 4
  %and953 = and i32 %814, 536870912
  %tobool954 = icmp ne i32 %and953, 0
  br i1 %tobool954, label %if.then.955, label %if.end.958

if.then.955:                                      ; preds = %if.end.952
  %815 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags956 = getelementptr inbounds %struct.sv, %struct.sv* %815, i32 0, i32 2
  %816 = load i32, i32* %sv_flags956, align 4
  %or957 = or i32 %816, 536870912
  store i32 %or957, i32* %sv_flags956, align 4
  br label %if.end.958

if.end.958:                                       ; preds = %if.then.955, %if.end.952
  %817 = load i32, i32* %sflags, align 4
  %and959 = and i32 %817, 33554432
  %tobool960 = icmp ne i32 %and959, 0
  br i1 %tobool960, label %if.then.961, label %if.end.974

if.then.961:                                      ; preds = %if.end.958
  %818 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags962 = getelementptr inbounds %struct.sv, %struct.sv* %818, i32 0, i32 2
  %819 = load i32, i32* %sv_flags962, align 4
  %or963 = or i32 %819, 33554432
  store i32 %or963, i32* %sv_flags962, align 4
  %820 = load i32, i32* %sflags, align 4
  %and964 = and i32 %820, 131072
  %tobool965 = icmp ne i32 %and964, 0
  br i1 %tobool965, label %if.then.966, label %if.end.969

if.then.966:                                      ; preds = %if.then.961
  %821 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags967 = getelementptr inbounds %struct.sv, %struct.sv* %821, i32 0, i32 2
  %822 = load i32, i32* %sv_flags967, align 4
  %or968 = or i32 %822, 131072
  store i32 %or968, i32* %sv_flags967, align 4
  br label %if.end.969

if.end.969:                                       ; preds = %if.then.966, %if.then.961
  %823 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_any970 = getelementptr inbounds %struct.sv, %struct.sv* %823, i32 0, i32 0
  %824 = load i8*, i8** %sv_any970, align 8
  %825 = bitcast i8* %824 to %struct.xpvnv*
  %xnv_nv971 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %825, i32 0, i32 4
  %826 = load double, double* %xnv_nv971, align 8
  %827 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any972 = getelementptr inbounds %struct.sv, %struct.sv* %827, i32 0, i32 0
  %828 = load i8*, i8** %sv_any972, align 8
  %829 = bitcast i8* %828 to %struct.xpvnv*
  %xnv_nv973 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %829, i32 0, i32 4
  store double %826, double* %xnv_nv973, align 8
  br label %if.end.974

if.end.974:                                       ; preds = %if.end.969, %if.end.958
  %830 = load i32, i32* %sflags, align 4
  %and975 = and i32 %830, 16777216
  %tobool976 = icmp ne i32 %and975, 0
  br i1 %tobool976, label %if.then.977, label %if.end.1004

if.then.977:                                      ; preds = %if.end.974
  %831 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags978 = getelementptr inbounds %struct.sv, %struct.sv* %831, i32 0, i32 2
  %832 = load i32, i32* %sv_flags978, align 4
  %and979 = and i32 %832, 2097152
  %tobool980 = icmp ne i32 %and979, 0
  br i1 %tobool980, label %land.rhs.981, label %land.end.984

land.rhs.981:                                     ; preds = %if.then.977
  %833 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %call982 = call i32 @Perl_sv_backoff(%struct.sv* %833)
  %tobool983 = icmp ne i32 %call982, 0
  br label %land.end.984

land.end.984:                                     ; preds = %land.rhs.981, %if.then.977
  %834 = phi i1 [ false, %if.then.977 ], [ %tobool983, %land.rhs.981 ]
  %land.ext985 = zext i1 %834 to i32
  %835 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags986 = getelementptr inbounds %struct.sv, %struct.sv* %835, i32 0, i32 2
  %836 = load i32, i32* %sv_flags986, align 4
  %or987 = or i32 %836, 16777216
  store i32 %or987, i32* %sv_flags986, align 4
  %837 = load i32, i32* %sflags, align 4
  %and988 = and i32 %837, 65536
  %tobool989 = icmp ne i32 %and988, 0
  br i1 %tobool989, label %if.then.990, label %if.end.993

if.then.990:                                      ; preds = %land.end.984
  %838 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags991 = getelementptr inbounds %struct.sv, %struct.sv* %838, i32 0, i32 2
  %839 = load i32, i32* %sv_flags991, align 4
  %or992 = or i32 %839, 65536
  store i32 %or992, i32* %sv_flags991, align 4
  br label %if.end.993

if.end.993:                                       ; preds = %if.then.990, %land.end.984
  %840 = load i32, i32* %sflags, align 4
  %and994 = and i32 %840, -2147483648
  %tobool995 = icmp ne i32 %and994, 0
  br i1 %tobool995, label %if.then.996, label %if.end.999

if.then.996:                                      ; preds = %if.end.993
  %841 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags997 = getelementptr inbounds %struct.sv, %struct.sv* %841, i32 0, i32 2
  %842 = load i32, i32* %sv_flags997, align 4
  %or998 = or i32 %842, -2147483648
  store i32 %or998, i32* %sv_flags997, align 4
  br label %if.end.999

if.end.999:                                       ; preds = %if.then.996, %if.end.993
  %843 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_any1000 = getelementptr inbounds %struct.sv, %struct.sv* %843, i32 0, i32 0
  %844 = load i8*, i8** %sv_any1000, align 8
  %845 = bitcast i8* %844 to %struct.xpviv*
  %xiv_iv1001 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %845, i32 0, i32 3
  %846 = load i64, i64* %xiv_iv1001, align 8
  %847 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any1002 = getelementptr inbounds %struct.sv, %struct.sv* %847, i32 0, i32 0
  %848 = load i8*, i8** %sv_any1002, align 8
  %849 = bitcast i8* %848 to %struct.xpviv*
  %xiv_iv1003 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %849, i32 0, i32 3
  store i64 %846, i64* %xiv_iv1003, align 8
  br label %if.end.1004

if.end.1004:                                      ; preds = %if.end.999, %if.end.974
  %850 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_flags1005 = getelementptr inbounds %struct.sv, %struct.sv* %850, i32 0, i32 2
  %851 = load i32, i32* %sv_flags1005, align 4
  %and1006 = and i32 %851, 57344
  %tobool1007 = icmp ne i32 %and1006, 0
  br i1 %tobool1007, label %land.lhs.true.1008, label %if.end.1016

land.lhs.true.1008:                               ; preds = %if.end.1004
  %852 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %call1009 = call %struct.magic* @Perl_mg_find(%struct.sv* %852, i32 86)
  %tobool1010 = icmp ne %struct.magic* %call1009, null
  br i1 %tobool1010, label %if.then.1011, label %if.end.1016

if.then.1011:                                     ; preds = %land.lhs.true.1008
  %853 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %call1013 = call %struct.magic* @Perl_mg_find(%struct.sv* %853, i32 86)
  store %struct.magic* %call1013, %struct.magic** %smg, align 8
  %854 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %855 = load %struct.magic*, %struct.magic** %smg, align 8
  %mg_ptr = getelementptr inbounds %struct.magic, %struct.magic* %855, i32 0, i32 6
  %856 = load i8*, i8** %mg_ptr, align 8
  %857 = load %struct.magic*, %struct.magic** %smg, align 8
  %mg_len = getelementptr inbounds %struct.magic, %struct.magic* %857, i32 0, i32 7
  %858 = load i32, i32* %mg_len, align 4
  call void @Perl_sv_magic(%struct.sv* %854, %struct.sv* null, i32 86, i8* %856, i32 %858)
  %859 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags1014 = getelementptr inbounds %struct.sv, %struct.sv* %859, i32 0, i32 2
  %860 = load i32, i32* %sv_flags1014, align 4
  %or1015 = or i32 %860, 32768
  store i32 %or1015, i32* %sv_flags1014, align 4
  br label %if.end.1016

if.end.1016:                                      ; preds = %if.then.1011, %land.lhs.true.1008, %if.end.1004
  br label %if.end.1169

if.else.1017:                                     ; preds = %if.else.825
  %861 = load i32, i32* %sflags, align 4
  %and1018 = and i32 %861, 16777216
  %tobool1019 = icmp ne i32 %and1018, 0
  br i1 %tobool1019, label %if.then.1020, label %if.else.1085

if.then.1020:                                     ; preds = %if.else.1017
  %862 = load i32, i32* %sflags, align 4
  %and1021 = and i32 %862, 65536
  %tobool1022 = icmp ne i32 %and1021, 0
  br i1 %tobool1022, label %if.then.1023, label %if.else.1036

if.then.1023:                                     ; preds = %if.then.1020
  %863 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags1024 = getelementptr inbounds %struct.sv, %struct.sv* %863, i32 0, i32 2
  %864 = load i32, i32* %sv_flags1024, align 4
  %and1025 = and i32 %864, 1223753727
  store i32 %and1025, i32* %sv_flags1024, align 4
  %865 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags1026 = getelementptr inbounds %struct.sv, %struct.sv* %865, i32 0, i32 2
  %866 = load i32, i32* %sv_flags1026, align 4
  %and1027 = and i32 %866, 2097152
  %tobool1028 = icmp ne i32 %and1027, 0
  br i1 %tobool1028, label %land.rhs.1029, label %land.end.1032

land.rhs.1029:                                    ; preds = %if.then.1023
  %867 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %call1030 = call i32 @Perl_sv_backoff(%struct.sv* %867)
  %tobool1031 = icmp ne i32 %call1030, 0
  br label %land.end.1032

land.end.1032:                                    ; preds = %land.rhs.1029, %if.then.1023
  %868 = phi i1 [ false, %if.then.1023 ], [ %tobool1031, %land.rhs.1029 ]
  %land.ext1033 = zext i1 %868 to i32
  %869 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags1034 = getelementptr inbounds %struct.sv, %struct.sv* %869, i32 0, i32 2
  %870 = load i32, i32* %sv_flags1034, align 4
  %or1035 = or i32 %870, 16842752
  store i32 %or1035, i32* %sv_flags1034, align 4
  br label %if.end.1057

if.else.1036:                                     ; preds = %if.then.1020
  %871 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags1037 = getelementptr inbounds %struct.sv, %struct.sv* %871, i32 0, i32 2
  %872 = load i32, i32* %sv_flags1037, align 4
  %and1038 = and i32 %872, 1223753727
  store i32 %and1038, i32* %sv_flags1037, align 4
  %873 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags1039 = getelementptr inbounds %struct.sv, %struct.sv* %873, i32 0, i32 2
  %874 = load i32, i32* %sv_flags1039, align 4
  %and1040 = and i32 %874, 2097152
  %tobool1041 = icmp ne i32 %and1040, 0
  br i1 %tobool1041, label %land.rhs.1042, label %land.end.1045

land.rhs.1042:                                    ; preds = %if.else.1036
  %875 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %call1043 = call i32 @Perl_sv_backoff(%struct.sv* %875)
  %tobool1044 = icmp ne i32 %call1043, 0
  br label %land.end.1045

land.end.1045:                                    ; preds = %land.rhs.1042, %if.else.1036
  %876 = phi i1 [ false, %if.else.1036 ], [ %tobool1044, %land.rhs.1042 ]
  %land.ext1046 = zext i1 %876 to i32
  %877 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags1047 = getelementptr inbounds %struct.sv, %struct.sv* %877, i32 0, i32 2
  %878 = load i32, i32* %sv_flags1047, align 4
  %and1048 = and i32 %878, 2097152
  %tobool1049 = icmp ne i32 %and1048, 0
  br i1 %tobool1049, label %land.rhs.1050, label %land.end.1053

land.rhs.1050:                                    ; preds = %land.end.1045
  %879 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %call1051 = call i32 @Perl_sv_backoff(%struct.sv* %879)
  %tobool1052 = icmp ne i32 %call1051, 0
  br label %land.end.1053

land.end.1053:                                    ; preds = %land.rhs.1050, %land.end.1045
  %880 = phi i1 [ false, %land.end.1045 ], [ %tobool1052, %land.rhs.1050 ]
  %land.ext1054 = zext i1 %880 to i32
  %881 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags1055 = getelementptr inbounds %struct.sv, %struct.sv* %881, i32 0, i32 2
  %882 = load i32, i32* %sv_flags1055, align 4
  %or1056 = or i32 %882, 16777216
  store i32 %or1056, i32* %sv_flags1055, align 4
  br label %if.end.1057

if.end.1057:                                      ; preds = %land.end.1053, %land.end.1032
  %883 = load i32, i32* %sflags, align 4
  %and1058 = and i32 %883, -2147483648
  %tobool1059 = icmp ne i32 %and1058, 0
  br i1 %tobool1059, label %if.then.1060, label %if.end.1063

if.then.1060:                                     ; preds = %if.end.1057
  %884 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags1061 = getelementptr inbounds %struct.sv, %struct.sv* %884, i32 0, i32 2
  %885 = load i32, i32* %sv_flags1061, align 4
  %or1062 = or i32 %885, -2147483648
  store i32 %or1062, i32* %sv_flags1061, align 4
  br label %if.end.1063

if.end.1063:                                      ; preds = %if.then.1060, %if.end.1057
  %886 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_any1064 = getelementptr inbounds %struct.sv, %struct.sv* %886, i32 0, i32 0
  %887 = load i8*, i8** %sv_any1064, align 8
  %888 = bitcast i8* %887 to %struct.xpviv*
  %xiv_iv1065 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %888, i32 0, i32 3
  %889 = load i64, i64* %xiv_iv1065, align 8
  %890 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any1066 = getelementptr inbounds %struct.sv, %struct.sv* %890, i32 0, i32 0
  %891 = load i8*, i8** %sv_any1066, align 8
  %892 = bitcast i8* %891 to %struct.xpviv*
  %xiv_iv1067 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %892, i32 0, i32 3
  store i64 %889, i64* %xiv_iv1067, align 8
  %893 = load i32, i32* %sflags, align 4
  %and1068 = and i32 %893, 33554432
  %tobool1069 = icmp ne i32 %and1068, 0
  br i1 %tobool1069, label %if.then.1070, label %if.end.1084

if.then.1070:                                     ; preds = %if.end.1063
  %894 = load i32, i32* %sflags, align 4
  %and1071 = and i32 %894, 131072
  %tobool1072 = icmp ne i32 %and1071, 0
  br i1 %tobool1072, label %if.then.1073, label %if.else.1076

if.then.1073:                                     ; preds = %if.then.1070
  %895 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags1074 = getelementptr inbounds %struct.sv, %struct.sv* %895, i32 0, i32 2
  %896 = load i32, i32* %sv_flags1074, align 4
  %or1075 = or i32 %896, 33685504
  store i32 %or1075, i32* %sv_flags1074, align 4
  br label %if.end.1079

if.else.1076:                                     ; preds = %if.then.1070
  %897 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags1077 = getelementptr inbounds %struct.sv, %struct.sv* %897, i32 0, i32 2
  %898 = load i32, i32* %sv_flags1077, align 4
  %or1078 = or i32 %898, 33554432
  store i32 %or1078, i32* %sv_flags1077, align 4
  br label %if.end.1079

if.end.1079:                                      ; preds = %if.else.1076, %if.then.1073
  %899 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_any1080 = getelementptr inbounds %struct.sv, %struct.sv* %899, i32 0, i32 0
  %900 = load i8*, i8** %sv_any1080, align 8
  %901 = bitcast i8* %900 to %struct.xpvnv*
  %xnv_nv1081 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %901, i32 0, i32 4
  %902 = load double, double* %xnv_nv1081, align 8
  %903 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any1082 = getelementptr inbounds %struct.sv, %struct.sv* %903, i32 0, i32 0
  %904 = load i8*, i8** %sv_any1082, align 8
  %905 = bitcast i8* %904 to %struct.xpvnv*
  %xnv_nv1083 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %905, i32 0, i32 4
  store double %902, double* %xnv_nv1083, align 8
  br label %if.end.1084

if.end.1084:                                      ; preds = %if.end.1079, %if.end.1063
  br label %if.end.1168

if.else.1085:                                     ; preds = %if.else.1017
  %906 = load i32, i32* %sflags, align 4
  %and1086 = and i32 %906, 33554432
  %tobool1087 = icmp ne i32 %and1086, 0
  br i1 %tobool1087, label %if.then.1088, label %if.else.1122

if.then.1088:                                     ; preds = %if.else.1085
  %907 = load i32, i32* %sflags, align 4
  %and1089 = and i32 %907, 131072
  %tobool1090 = icmp ne i32 %and1089, 0
  br i1 %tobool1090, label %if.then.1091, label %if.else.1104

if.then.1091:                                     ; preds = %if.then.1088
  %908 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags1092 = getelementptr inbounds %struct.sv, %struct.sv* %908, i32 0, i32 2
  %909 = load i32, i32* %sv_flags1092, align 4
  %and1093 = and i32 %909, 1223753727
  store i32 %and1093, i32* %sv_flags1092, align 4
  %910 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags1094 = getelementptr inbounds %struct.sv, %struct.sv* %910, i32 0, i32 2
  %911 = load i32, i32* %sv_flags1094, align 4
  %and1095 = and i32 %911, 2097152
  %tobool1096 = icmp ne i32 %and1095, 0
  br i1 %tobool1096, label %land.rhs.1097, label %land.end.1100

land.rhs.1097:                                    ; preds = %if.then.1091
  %912 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %call1098 = call i32 @Perl_sv_backoff(%struct.sv* %912)
  %tobool1099 = icmp ne i32 %call1098, 0
  br label %land.end.1100

land.end.1100:                                    ; preds = %land.rhs.1097, %if.then.1091
  %913 = phi i1 [ false, %if.then.1091 ], [ %tobool1099, %land.rhs.1097 ]
  %land.ext1101 = zext i1 %913 to i32
  %914 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags1102 = getelementptr inbounds %struct.sv, %struct.sv* %914, i32 0, i32 2
  %915 = load i32, i32* %sv_flags1102, align 4
  %or1103 = or i32 %915, 33685504
  store i32 %or1103, i32* %sv_flags1102, align 4
  br label %if.end.1117

if.else.1104:                                     ; preds = %if.then.1088
  %916 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags1105 = getelementptr inbounds %struct.sv, %struct.sv* %916, i32 0, i32 2
  %917 = load i32, i32* %sv_flags1105, align 4
  %and1106 = and i32 %917, 1223753727
  store i32 %and1106, i32* %sv_flags1105, align 4
  %918 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags1107 = getelementptr inbounds %struct.sv, %struct.sv* %918, i32 0, i32 2
  %919 = load i32, i32* %sv_flags1107, align 4
  %and1108 = and i32 %919, 2097152
  %tobool1109 = icmp ne i32 %and1108, 0
  br i1 %tobool1109, label %land.rhs.1110, label %land.end.1113

land.rhs.1110:                                    ; preds = %if.else.1104
  %920 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %call1111 = call i32 @Perl_sv_backoff(%struct.sv* %920)
  %tobool1112 = icmp ne i32 %call1111, 0
  br label %land.end.1113

land.end.1113:                                    ; preds = %land.rhs.1110, %if.else.1104
  %921 = phi i1 [ false, %if.else.1104 ], [ %tobool1112, %land.rhs.1110 ]
  %land.ext1114 = zext i1 %921 to i32
  %922 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags1115 = getelementptr inbounds %struct.sv, %struct.sv* %922, i32 0, i32 2
  %923 = load i32, i32* %sv_flags1115, align 4
  %or1116 = or i32 %923, 33554432
  store i32 %or1116, i32* %sv_flags1115, align 4
  br label %if.end.1117

if.end.1117:                                      ; preds = %land.end.1113, %land.end.1100
  %924 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_any1118 = getelementptr inbounds %struct.sv, %struct.sv* %924, i32 0, i32 0
  %925 = load i8*, i8** %sv_any1118, align 8
  %926 = bitcast i8* %925 to %struct.xpvnv*
  %xnv_nv1119 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %926, i32 0, i32 4
  %927 = load double, double* %xnv_nv1119, align 8
  %928 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any1120 = getelementptr inbounds %struct.sv, %struct.sv* %928, i32 0, i32 0
  %929 = load i8*, i8** %sv_any1120, align 8
  %930 = bitcast i8* %929 to %struct.xpvnv*
  %xnv_nv1121 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %930, i32 0, i32 4
  store double %927, double* %xnv_nv1121, align 8
  br label %if.end.1167

if.else.1122:                                     ; preds = %if.else.1085
  %931 = load i32, i32* %dtype, align 4
  %cmp1123 = icmp eq i32 %931, 13
  br i1 %cmp1123, label %if.then.1125, label %if.else.1155

if.then.1125:                                     ; preds = %if.else.1122
  %932 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings1126 = getelementptr inbounds %struct.cop, %struct.cop* %932, i32 0, i32 14
  %933 = load %struct.sv*, %struct.sv** %cop_warnings1126, align 8
  %cmp1127 = icmp ne %struct.sv* %933, null
  br i1 %cmp1127, label %land.lhs.true.1129, label %lor.lhs.false.1145

land.lhs.true.1129:                               ; preds = %if.then.1125
  %934 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings1130 = getelementptr inbounds %struct.cop, %struct.cop* %934, i32 0, i32 14
  %935 = load %struct.sv*, %struct.sv** %cop_warnings1130, align 8
  %cmp1131 = icmp ne %struct.sv* %935, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 2)
  br i1 %cmp1131, label %land.lhs.true.1133, label %lor.lhs.false.1145

land.lhs.true.1133:                               ; preds = %land.lhs.true.1129
  %936 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings1134 = getelementptr inbounds %struct.cop, %struct.cop* %936, i32 0, i32 14
  %937 = load %struct.sv*, %struct.sv** %cop_warnings1134, align 8
  %cmp1135 = icmp eq %struct.sv* %937, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 1)
  br i1 %cmp1135, label %if.then.1153, label %lor.lhs.false.1137

lor.lhs.false.1137:                               ; preds = %land.lhs.true.1133
  %938 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings1138 = getelementptr inbounds %struct.cop, %struct.cop* %938, i32 0, i32 14
  %939 = load %struct.sv*, %struct.sv** %cop_warnings1138, align 8
  %sv_any1139 = getelementptr inbounds %struct.sv, %struct.sv* %939, i32 0, i32 0
  %940 = load i8*, i8** %sv_any1139, align 8
  %941 = bitcast i8* %940 to %struct.xpv*
  %xpv_pv1140 = getelementptr inbounds %struct.xpv, %struct.xpv* %941, i32 0, i32 0
  %942 = load i8*, i8** %xpv_pv1140, align 8
  %arrayidx1141 = getelementptr inbounds i8, i8* %942, i64 3
  %943 = load i8, i8* %arrayidx1141, align 1
  %conv1142 = sext i8 %943 to i32
  %and1143 = and i32 %conv1142, 1
  %tobool1144 = icmp ne i32 %and1143, 0
  br i1 %tobool1144, label %if.then.1153, label %lor.lhs.false.1145

lor.lhs.false.1145:                               ; preds = %lor.lhs.false.1137, %land.lhs.true.1129, %if.then.1125
  %944 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings1146 = getelementptr inbounds %struct.cop, %struct.cop* %944, i32 0, i32 14
  %945 = load %struct.sv*, %struct.sv** %cop_warnings1146, align 8
  %cmp1147 = icmp eq %struct.sv* %945, null
  br i1 %cmp1147, label %land.lhs.true.1149, label %if.end.1154

land.lhs.true.1149:                               ; preds = %lor.lhs.false.1145
  %946 = load i8, i8* @PL_dowarn, align 1
  %conv1150 = zext i8 %946 to i32
  %and1151 = and i32 %conv1150, 1
  %tobool1152 = icmp ne i32 %and1151, 0
  br i1 %tobool1152, label %if.then.1153, label %if.end.1154

if.then.1153:                                     ; preds = %land.lhs.true.1149, %lor.lhs.false.1137, %land.lhs.true.1133
  call void (i32, i8*, ...) @Perl_warner(i32 12, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.34, i32 0, i32 0))
  br label %if.end.1154

if.end.1154:                                      ; preds = %if.then.1153, %land.lhs.true.1149, %lor.lhs.false.1145
  br label %if.end.1166

if.else.1155:                                     ; preds = %if.else.1122
  %947 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags1156 = getelementptr inbounds %struct.sv, %struct.sv* %947, i32 0, i32 2
  %948 = load i32, i32* %sv_flags1156, align 4
  %and1157 = and i32 %948, 1223753727
  store i32 %and1157, i32* %sv_flags1156, align 4
  %949 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags1158 = getelementptr inbounds %struct.sv, %struct.sv* %949, i32 0, i32 2
  %950 = load i32, i32* %sv_flags1158, align 4
  %and1159 = and i32 %950, 2097152
  %tobool1160 = icmp ne i32 %and1159, 0
  br i1 %tobool1160, label %land.rhs.1161, label %land.end.1164

land.rhs.1161:                                    ; preds = %if.else.1155
  %951 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %call1162 = call i32 @Perl_sv_backoff(%struct.sv* %951)
  %tobool1163 = icmp ne i32 %call1162, 0
  br label %land.end.1164

land.end.1164:                                    ; preds = %land.rhs.1161, %if.else.1155
  %952 = phi i1 [ false, %if.else.1155 ], [ %tobool1163, %land.rhs.1161 ]
  %land.ext1165 = zext i1 %952 to i32
  br label %if.end.1166

if.end.1166:                                      ; preds = %land.end.1164, %if.end.1154
  br label %if.end.1167

if.end.1167:                                      ; preds = %if.end.1166, %if.end.1117
  br label %if.end.1168

if.end.1168:                                      ; preds = %if.end.1167, %if.end.1084
  br label %if.end.1169

if.end.1169:                                      ; preds = %if.end.1168, %if.end.1016
  br label %if.end.1170

if.end.1170:                                      ; preds = %if.end.1169, %if.end.824
  %953 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_flags1171 = getelementptr inbounds %struct.sv, %struct.sv* %953, i32 0, i32 2
  %954 = load i32, i32* %sv_flags1171, align 4
  %and1172 = and i32 %954, 57344
  %tobool1173 = icmp ne i32 %and1172, 0
  br i1 %tobool1173, label %land.lhs.true.1174, label %if.end.1188

land.lhs.true.1174:                               ; preds = %if.end.1170
  %955 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %call1175 = call signext i8 @Perl_sv_tainted(%struct.sv* %955)
  %conv1176 = sext i8 %call1175 to i32
  %tobool1177 = icmp ne i32 %conv1176, 0
  br i1 %tobool1177, label %if.then.1178, label %if.end.1188

if.then.1178:                                     ; preds = %land.lhs.true.1174
  %956 = load i8, i8* @PL_tainting, align 1
  %tobool1179 = icmp ne i8 %956, 0
  br i1 %tobool1179, label %if.then.1180, label %if.end.1187

if.then.1180:                                     ; preds = %if.then.1178
  %957 = load i8, i8* @PL_tainted, align 1
  %tobool1181 = icmp ne i8 %957, 0
  br i1 %tobool1181, label %if.then.1182, label %if.end.1186

if.then.1182:                                     ; preds = %if.then.1180
  %958 = load i8, i8* @PL_tainting, align 1
  %tobool1183 = icmp ne i8 %958, 0
  br i1 %tobool1183, label %if.then.1184, label %if.end.1185

if.then.1184:                                     ; preds = %if.then.1182
  %959 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  call void @Perl_sv_taint(%struct.sv* %959)
  br label %if.end.1185

if.end.1185:                                      ; preds = %if.then.1184, %if.then.1182
  br label %if.end.1186

if.end.1186:                                      ; preds = %if.end.1185, %if.then.1180
  br label %if.end.1187

if.end.1187:                                      ; preds = %if.end.1186, %if.then.1178
  br label %if.end.1188

if.end.1188:                                      ; preds = %if.then, %land.end, %if.end.78, %if.end.122, %if.end.162, %if.end.302, %if.end.724, %if.end.1187, %land.lhs.true.1174, %if.end.1170
  ret void
}

declare i32 @Perl_mg_free(%struct.sv*) #1

; Function Attrs: nounwind uwtable
define signext i8 @Perl_sv_tainted(%struct.sv* %sv) #0 {
entry:
  %retval = alloca i8, align 1
  %sv.addr = alloca %struct.sv*, align 8
  %mg = alloca %struct.magic*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 255
  %cmp = icmp uge i32 %and, 7
  br i1 %cmp, label %land.lhs.true, label %if.end.11

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 0
  %3 = load i8*, i8** %sv_any, align 8
  %4 = bitcast i8* %3 to %struct.xpvmg*
  %xmg_magic = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %4, i32 0, i32 5
  %5 = load %struct.magic*, %struct.magic** %xmg_magic, align 8
  %tobool = icmp ne %struct.magic* %5, null
  br i1 %tobool, label %if.then, label %if.end.11

if.then:                                          ; preds = %land.lhs.true
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call %struct.magic* @Perl_mg_find(%struct.sv* %6, i32 116)
  store %struct.magic* %call, %struct.magic** %mg, align 8
  %7 = load %struct.magic*, %struct.magic** %mg, align 8
  %tobool1 = icmp ne %struct.magic* %7, null
  br i1 %tobool1, label %land.lhs.true.2, label %if.end

land.lhs.true.2:                                  ; preds = %if.then
  %8 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_len = getelementptr inbounds %struct.magic, %struct.magic* %8, i32 0, i32 7
  %9 = load i32, i32* %mg_len, align 4
  %and3 = and i32 %9, 1
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %if.then.10, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.2
  %10 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_len5 = getelementptr inbounds %struct.magic, %struct.magic* %10, i32 0, i32 7
  %11 = load i32, i32* %mg_len5, align 4
  %and6 = and i32 %11, 2
  %tobool7 = icmp ne i32 %and6, 0
  br i1 %tobool7, label %land.lhs.true.8, label %if.end

land.lhs.true.8:                                  ; preds = %lor.lhs.false
  %12 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_obj = getelementptr inbounds %struct.magic, %struct.magic* %12, i32 0, i32 5
  %13 = load %struct.sv*, %struct.sv** %mg_obj, align 8
  %14 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %cmp9 = icmp eq %struct.sv* %13, %14
  br i1 %cmp9, label %if.then.10, label %if.end

if.then.10:                                       ; preds = %land.lhs.true.8, %land.lhs.true.2
  store i8 1, i8* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true.8, %lor.lhs.false, %if.then
  br label %if.end.11

if.end.11:                                        ; preds = %if.end, %land.lhs.true, %entry
  store i8 0, i8* %retval
  br label %return

return:                                           ; preds = %if.end.11, %if.then.10
  %15 = load i8, i8* %retval
  ret i8 %15
}

; Function Attrs: nounwind uwtable
define void @Perl_sv_magic(%struct.sv* %sv, %struct.sv* %obj, i32 %how, i8* %name, i32 %namlen) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %obj.addr = alloca %struct.sv*, align 8
  %how.addr = alloca i32, align 4
  %name.addr = alloca i8*, align 8
  %namlen.addr = alloca i32, align 4
  %mg = alloca %struct.magic*, align 8
  %vtable = alloca %struct.mgvtbl*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store %struct.sv* %obj, %struct.sv** %obj.addr, align 8
  store i32 %how, i32* %how.addr, align 4
  store i8* %name, i8** %name.addr, align 8
  store i32 %namlen, i32* %namlen.addr, align 4
  store %struct.mgvtbl* null, %struct.mgvtbl** %vtable, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 8388608
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end.11

if.then:                                          ; preds = %entry
  %2 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cmp = icmp ne %struct.cop* %2, @PL_compiling
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then
  %3 = load i32, i32* %how.addr, align 4
  %cmp1 = icmp ne i32 %3, 103
  br i1 %cmp1, label %land.lhs.true.2, label %if.end

land.lhs.true.2:                                  ; preds = %land.lhs.true
  %4 = load i32, i32* %how.addr, align 4
  %cmp3 = icmp ne i32 %4, 66
  br i1 %cmp3, label %land.lhs.true.4, label %if.end

land.lhs.true.4:                                  ; preds = %land.lhs.true.2
  %5 = load i32, i32* %how.addr, align 4
  %cmp5 = icmp ne i32 %5, 102
  br i1 %cmp5, label %land.lhs.true.6, label %if.end

land.lhs.true.6:                                  ; preds = %land.lhs.true.4
  %6 = load i32, i32* %how.addr, align 4
  %cmp7 = icmp ne i32 %6, 0
  br i1 %cmp7, label %land.lhs.true.8, label %if.end

land.lhs.true.8:                                  ; preds = %land.lhs.true.6
  %7 = load i32, i32* %how.addr, align 4
  %cmp9 = icmp ne i32 %7, 60
  br i1 %cmp9, label %if.then.10, label %if.end

if.then.10:                                       ; preds = %land.lhs.true.8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_modify, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then.10, %land.lhs.true.8, %land.lhs.true.6, %land.lhs.true.4, %land.lhs.true.2, %land.lhs.true, %if.then
  br label %if.end.11

if.end.11:                                        ; preds = %if.end, %entry
  %8 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags12 = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 2
  %9 = load i32, i32* %sv_flags12, align 4
  %and13 = and i32 %9, 57344
  %tobool14 = icmp ne i32 %and13, 0
  br i1 %tobool14, label %if.then.20, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.11
  %10 = load i32, i32* %how.addr, align 4
  %cmp15 = icmp eq i32 %10, 116
  br i1 %cmp15, label %land.lhs.true.16, label %if.end.29

land.lhs.true.16:                                 ; preds = %lor.lhs.false
  %11 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags17 = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 2
  %12 = load i32, i32* %sv_flags17, align 4
  %and18 = and i32 %12, 255
  %cmp19 = icmp uge i32 %and18, 7
  br i1 %cmp19, label %if.then.20, label %if.end.29

if.then.20:                                       ; preds = %land.lhs.true.16, %if.end.11
  %13 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 0
  %14 = load i8*, i8** %sv_any, align 8
  %15 = bitcast i8* %14 to %struct.xpvmg*
  %xmg_magic = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %15, i32 0, i32 5
  %16 = load %struct.magic*, %struct.magic** %xmg_magic, align 8
  %tobool21 = icmp ne %struct.magic* %16, null
  br i1 %tobool21, label %land.lhs.true.22, label %if.end.28

land.lhs.true.22:                                 ; preds = %if.then.20
  %17 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %18 = load i32, i32* %how.addr, align 4
  %call = call %struct.magic* @Perl_mg_find(%struct.sv* %17, i32 %18)
  store %struct.magic* %call, %struct.magic** %mg, align 8
  %tobool23 = icmp ne %struct.magic* %call, null
  br i1 %tobool23, label %if.then.24, label %if.end.28

if.then.24:                                       ; preds = %land.lhs.true.22
  %19 = load i32, i32* %how.addr, align 4
  %cmp25 = icmp eq i32 %19, 116
  br i1 %cmp25, label %if.then.26, label %if.end.27

if.then.26:                                       ; preds = %if.then.24
  %20 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_len = getelementptr inbounds %struct.magic, %struct.magic* %20, i32 0, i32 7
  %21 = load i32, i32* %mg_len, align 4
  %or = or i32 %21, 1
  store i32 %or, i32* %mg_len, align 4
  br label %if.end.27

if.end.27:                                        ; preds = %if.then.26, %if.then.24
  br label %sw.epilog.68

if.end.28:                                        ; preds = %land.lhs.true.22, %if.then.20
  br label %if.end.29

if.end.29:                                        ; preds = %if.end.28, %land.lhs.true.16, %lor.lhs.false
  %22 = load i32, i32* %how.addr, align 4
  switch i32 %22, label %sw.default [
    i32 0, label %sw.bb
    i32 65, label %sw.bb.30
    i32 97, label %sw.bb.31
    i32 99, label %sw.bb.32
    i32 66, label %sw.bb.33
    i32 68, label %sw.bb.34
    i32 100, label %sw.bb.35
    i32 69, label %sw.bb.36
    i32 102, label %sw.bb.37
    i32 101, label %sw.bb.38
    i32 103, label %sw.bb.39
    i32 73, label %sw.bb.40
    i32 105, label %sw.bb.41
    i32 107, label %sw.bb.42
    i32 76, label %sw.bb.43
    i32 108, label %sw.bb.44
    i32 80, label %sw.bb.45
    i32 112, label %sw.bb.46
    i32 113, label %sw.bb.46
    i32 114, label %sw.bb.47
    i32 83, label %sw.bb.48
    i32 115, label %sw.bb.49
    i32 116, label %sw.bb.50
    i32 85, label %sw.bb.51
    i32 118, label %sw.bb.52
    i32 86, label %sw.bb.53
    i32 119, label %sw.bb.54
    i32 120, label %sw.bb.55
    i32 121, label %sw.bb.56
    i32 42, label %sw.bb.57
    i32 35, label %sw.bb.58
    i32 46, label %sw.bb.59
    i32 60, label %sw.bb.60
    i32 126, label %sw.bb.61
  ]

sw.bb:                                            ; preds = %if.end.29
  store %struct.mgvtbl* @PL_vtbl_sv, %struct.mgvtbl** %vtable, align 8
  br label %sw.epilog

sw.bb.30:                                         ; preds = %if.end.29
  store %struct.mgvtbl* @PL_vtbl_amagic, %struct.mgvtbl** %vtable, align 8
  br label %sw.epilog

sw.bb.31:                                         ; preds = %if.end.29
  store %struct.mgvtbl* @PL_vtbl_amagicelem, %struct.mgvtbl** %vtable, align 8
  br label %sw.epilog

sw.bb.32:                                         ; preds = %if.end.29
  store %struct.mgvtbl* @PL_vtbl_ovrld, %struct.mgvtbl** %vtable, align 8
  br label %sw.epilog

sw.bb.33:                                         ; preds = %if.end.29
  store %struct.mgvtbl* @PL_vtbl_bm, %struct.mgvtbl** %vtable, align 8
  br label %sw.epilog

sw.bb.34:                                         ; preds = %if.end.29
  store %struct.mgvtbl* @PL_vtbl_regdata, %struct.mgvtbl** %vtable, align 8
  br label %sw.epilog

sw.bb.35:                                         ; preds = %if.end.29
  store %struct.mgvtbl* @PL_vtbl_regdatum, %struct.mgvtbl** %vtable, align 8
  br label %sw.epilog

sw.bb.36:                                         ; preds = %if.end.29
  store %struct.mgvtbl* @PL_vtbl_env, %struct.mgvtbl** %vtable, align 8
  br label %sw.epilog

sw.bb.37:                                         ; preds = %if.end.29
  store %struct.mgvtbl* @PL_vtbl_fm, %struct.mgvtbl** %vtable, align 8
  br label %sw.epilog

sw.bb.38:                                         ; preds = %if.end.29
  store %struct.mgvtbl* @PL_vtbl_envelem, %struct.mgvtbl** %vtable, align 8
  br label %sw.epilog

sw.bb.39:                                         ; preds = %if.end.29
  store %struct.mgvtbl* @PL_vtbl_mglob, %struct.mgvtbl** %vtable, align 8
  br label %sw.epilog

sw.bb.40:                                         ; preds = %if.end.29
  store %struct.mgvtbl* @PL_vtbl_isa, %struct.mgvtbl** %vtable, align 8
  br label %sw.epilog

sw.bb.41:                                         ; preds = %if.end.29
  store %struct.mgvtbl* @PL_vtbl_isaelem, %struct.mgvtbl** %vtable, align 8
  br label %sw.epilog

sw.bb.42:                                         ; preds = %if.end.29
  store %struct.mgvtbl* @PL_vtbl_nkeys, %struct.mgvtbl** %vtable, align 8
  br label %sw.epilog

sw.bb.43:                                         ; preds = %if.end.29
  store %struct.mgvtbl* null, %struct.mgvtbl** %vtable, align 8
  br label %sw.epilog

sw.bb.44:                                         ; preds = %if.end.29
  store %struct.mgvtbl* @PL_vtbl_dbline, %struct.mgvtbl** %vtable, align 8
  br label %sw.epilog

sw.bb.45:                                         ; preds = %if.end.29
  store %struct.mgvtbl* @PL_vtbl_pack, %struct.mgvtbl** %vtable, align 8
  br label %sw.epilog

sw.bb.46:                                         ; preds = %if.end.29, %if.end.29
  store %struct.mgvtbl* @PL_vtbl_packelem, %struct.mgvtbl** %vtable, align 8
  br label %sw.epilog

sw.bb.47:                                         ; preds = %if.end.29
  store %struct.mgvtbl* @PL_vtbl_regexp, %struct.mgvtbl** %vtable, align 8
  br label %sw.epilog

sw.bb.48:                                         ; preds = %if.end.29
  store %struct.mgvtbl* @PL_vtbl_sig, %struct.mgvtbl** %vtable, align 8
  br label %sw.epilog

sw.bb.49:                                         ; preds = %if.end.29
  store %struct.mgvtbl* @PL_vtbl_sigelem, %struct.mgvtbl** %vtable, align 8
  br label %sw.epilog

sw.bb.50:                                         ; preds = %if.end.29
  store %struct.mgvtbl* @PL_vtbl_taint, %struct.mgvtbl** %vtable, align 8
  br label %sw.epilog

sw.bb.51:                                         ; preds = %if.end.29
  store %struct.mgvtbl* @PL_vtbl_uvar, %struct.mgvtbl** %vtable, align 8
  br label %sw.epilog

sw.bb.52:                                         ; preds = %if.end.29
  store %struct.mgvtbl* @PL_vtbl_vec, %struct.mgvtbl** %vtable, align 8
  br label %sw.epilog

sw.bb.53:                                         ; preds = %if.end.29
  store %struct.mgvtbl* null, %struct.mgvtbl** %vtable, align 8
  br label %sw.epilog

sw.bb.54:                                         ; preds = %if.end.29
  store %struct.mgvtbl* @PL_vtbl_utf8, %struct.mgvtbl** %vtable, align 8
  br label %sw.epilog

sw.bb.55:                                         ; preds = %if.end.29
  store %struct.mgvtbl* @PL_vtbl_substr, %struct.mgvtbl** %vtable, align 8
  br label %sw.epilog

sw.bb.56:                                         ; preds = %if.end.29
  store %struct.mgvtbl* @PL_vtbl_defelem, %struct.mgvtbl** %vtable, align 8
  br label %sw.epilog

sw.bb.57:                                         ; preds = %if.end.29
  store %struct.mgvtbl* @PL_vtbl_glob, %struct.mgvtbl** %vtable, align 8
  br label %sw.epilog

sw.bb.58:                                         ; preds = %if.end.29
  store %struct.mgvtbl* @PL_vtbl_arylen, %struct.mgvtbl** %vtable, align 8
  br label %sw.epilog

sw.bb.59:                                         ; preds = %if.end.29
  store %struct.mgvtbl* @PL_vtbl_pos, %struct.mgvtbl** %vtable, align 8
  br label %sw.epilog

sw.bb.60:                                         ; preds = %if.end.29
  store %struct.mgvtbl* @PL_vtbl_backref, %struct.mgvtbl** %vtable, align 8
  br label %sw.epilog

sw.bb.61:                                         ; preds = %if.end.29
  br label %sw.epilog

sw.default:                                       ; preds = %if.end.29
  %23 = load i32, i32* %how.addr, align 4
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.36, i32 0, i32 0), i32 %23)
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb.61, %sw.bb.60, %sw.bb.59, %sw.bb.58, %sw.bb.57, %sw.bb.56, %sw.bb.55, %sw.bb.54, %sw.bb.53, %sw.bb.52, %sw.bb.51, %sw.bb.50, %sw.bb.49, %sw.bb.48, %sw.bb.47, %sw.bb.46, %sw.bb.45, %sw.bb.44, %sw.bb.43, %sw.bb.42, %sw.bb.41, %sw.bb.40, %sw.bb.39, %sw.bb.38, %sw.bb.37, %sw.bb.36, %sw.bb.35, %sw.bb.34, %sw.bb.33, %sw.bb.32, %sw.bb.31, %sw.bb.30, %sw.bb
  %24 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %25 = load %struct.sv*, %struct.sv** %obj.addr, align 8
  %26 = load i32, i32* %how.addr, align 4
  %27 = load %struct.mgvtbl*, %struct.mgvtbl** %vtable, align 8
  %28 = load i8*, i8** %name.addr, align 8
  %29 = load i32, i32* %namlen.addr, align 4
  %call62 = call %struct.magic* @Perl_sv_magicext(%struct.sv* %24, %struct.sv* %25, i32 %26, %struct.mgvtbl* %27, i8* %28, i32 %29)
  store %struct.magic* %call62, %struct.magic** %mg, align 8
  %30 = load i32, i32* %how.addr, align 4
  switch i32 %30, label %sw.epilog.68 [
    i32 116, label %sw.bb.63
    i32 126, label %sw.bb.65
    i32 76, label %sw.bb.65
  ]

sw.bb.63:                                         ; preds = %sw.epilog
  %31 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_len64 = getelementptr inbounds %struct.magic, %struct.magic* %31, i32 0, i32 7
  store i32 1, i32* %mg_len64, align 4
  br label %sw.epilog.68

sw.bb.65:                                         ; preds = %sw.epilog, %sw.epilog
  %32 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags66 = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 2
  %33 = load i32, i32* %sv_flags66, align 4
  %or67 = or i32 %33, 32768
  store i32 %or67, i32* %sv_flags66, align 4
  br label %sw.epilog.68

sw.epilog.68:                                     ; preds = %if.end.27, %sw.epilog, %sw.bb.65, %sw.bb.63
  ret void
}

declare i8* @Perl_savepvn(i8*, i32) #1

declare void @Perl_gp_free(%struct.gv*) #1

declare %struct.gp* @Perl_gp_ref(%struct.gp*) #1

declare void @Perl_save_generic_svref(%struct.sv**) #1

; Function Attrs: nounwind uwtable
define void @Perl_sv_free(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %refcount_is_zero = alloca i32, align 4
  %tmp = alloca i32, align 4
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %if.end.64

if.end:                                           ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 1
  %2 = load i32, i32* %sv_refcnt, align 4
  %cmp = icmp eq i32 %2, 0
  br i1 %cmp, label %if.then.1, label %if.end.33

if.then.1:                                        ; preds = %if.end
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 2
  %4 = load i32, i32* %sv_flags, align 4
  %and = and i32 %4, 4194304
  %tobool2 = icmp ne i32 %and, 0
  br i1 %tobool2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.then.1
  br label %if.end.64

if.end.4:                                         ; preds = %if.then.1
  %5 = load i8, i8* @PL_in_clean_all, align 1
  %tobool5 = icmp ne i8 %5, 0
  br i1 %tobool5, label %if.then.6, label %if.end.7

if.then.6:                                        ; preds = %if.end.4
  br label %if.end.64

if.end.7:                                         ; preds = %if.end.4
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags8 = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 2
  %7 = load i32, i32* %sv_flags8, align 4
  %and9 = and i32 %7, 8388608
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %land.lhs.true, label %if.end.19

land.lhs.true:                                    ; preds = %if.end.7
  %8 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %cmp11 = icmp eq %struct.sv* %8, @PL_sv_undef
  br i1 %cmp11, label %if.then.17, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %9 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %cmp12 = icmp eq %struct.sv* %9, @PL_sv_yes
  br i1 %cmp12, label %if.then.17, label %lor.lhs.false.13

lor.lhs.false.13:                                 ; preds = %lor.lhs.false
  %10 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %cmp14 = icmp eq %struct.sv* %10, @PL_sv_no
  br i1 %cmp14, label %if.then.17, label %lor.lhs.false.15

lor.lhs.false.15:                                 ; preds = %lor.lhs.false.13
  %11 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %cmp16 = icmp eq %struct.sv* %11, @PL_sv_placeholder
  br i1 %cmp16, label %if.then.17, label %if.end.19

if.then.17:                                       ; preds = %lor.lhs.false.15, %lor.lhs.false.13, %lor.lhs.false, %land.lhs.true
  %12 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_refcnt18 = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 1
  store i32 2147483647, i32* %sv_refcnt18, align 4
  br label %if.end.64

if.end.19:                                        ; preds = %lor.lhs.false.15, %if.end.7
  %13 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings = getelementptr inbounds %struct.cop, %struct.cop* %13, i32 0, i32 14
  %14 = load %struct.sv*, %struct.sv** %cop_warnings, align 8
  %cmp20 = icmp eq %struct.sv* %14, null
  br i1 %cmp20, label %if.then.31, label %lor.lhs.false.21

lor.lhs.false.21:                                 ; preds = %if.end.19
  %15 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings22 = getelementptr inbounds %struct.cop, %struct.cop* %15, i32 0, i32 14
  %16 = load %struct.sv*, %struct.sv** %cop_warnings22, align 8
  %cmp23 = icmp eq %struct.sv* %16, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 1)
  br i1 %cmp23, label %if.then.31, label %lor.lhs.false.24

lor.lhs.false.24:                                 ; preds = %lor.lhs.false.21
  %17 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings25 = getelementptr inbounds %struct.cop, %struct.cop* %17, i32 0, i32 14
  %18 = load %struct.sv*, %struct.sv** %cop_warnings25, align 8
  %cmp26 = icmp ne %struct.sv* %18, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 2)
  br i1 %cmp26, label %land.lhs.true.27, label %if.end.32

land.lhs.true.27:                                 ; preds = %lor.lhs.false.24
  %19 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings28 = getelementptr inbounds %struct.cop, %struct.cop* %19, i32 0, i32 14
  %20 = load %struct.sv*, %struct.sv** %cop_warnings28, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %20, i32 0, i32 0
  %21 = load i8*, i8** %sv_any, align 8
  %22 = bitcast i8* %21 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %22, i32 0, i32 0
  %23 = load i8*, i8** %xpv_pv, align 8
  %arrayidx = getelementptr inbounds i8, i8* %23, i64 6
  %24 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %24 to i32
  %and29 = and i32 %conv, 1
  %tobool30 = icmp ne i32 %and29, 0
  br i1 %tobool30, label %if.then.31, label %if.end.32

if.then.31:                                       ; preds = %land.lhs.true.27, %lor.lhs.false.21, %if.end.19
  %25 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %26 = ptrtoint %struct.sv* %25 to i64
  call void (i32, i8*, ...) @Perl_warner(i32 24, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.44, i32 0, i32 0), i64 %26)
  br label %if.end.32

if.end.32:                                        ; preds = %if.then.31, %land.lhs.true.27, %lor.lhs.false.24
  br label %if.end.64

if.end.33:                                        ; preds = %if.end
  %27 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_refcnt34 = getelementptr inbounds %struct.sv, %struct.sv* %27, i32 0, i32 1
  %28 = load i32, i32* %sv_refcnt34, align 4
  %dec = add i32 %28, -1
  store i32 %dec, i32* %sv_refcnt34, align 4
  %cmp35 = icmp eq i32 %dec, 0
  %conv36 = zext i1 %cmp35 to i32
  store i32 %conv36, i32* %refcount_is_zero, align 4
  %29 = load i32, i32* %refcount_is_zero, align 4
  %tobool37 = icmp ne i32 %29, 0
  br i1 %tobool37, label %if.end.39, label %if.then.38

if.then.38:                                       ; preds = %if.end.33
  br label %if.end.64

if.end.39:                                        ; preds = %if.end.33
  %30 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags40 = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 2
  %31 = load i32, i32* %sv_flags40, align 4
  %and41 = and i32 %31, 8388608
  %tobool42 = icmp ne i32 %and41, 0
  br i1 %tobool42, label %land.lhs.true.43, label %if.end.57

land.lhs.true.43:                                 ; preds = %if.end.39
  %32 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %cmp44 = icmp eq %struct.sv* %32, @PL_sv_undef
  br i1 %cmp44, label %if.then.55, label %lor.lhs.false.46

lor.lhs.false.46:                                 ; preds = %land.lhs.true.43
  %33 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %cmp47 = icmp eq %struct.sv* %33, @PL_sv_yes
  br i1 %cmp47, label %if.then.55, label %lor.lhs.false.49

lor.lhs.false.49:                                 ; preds = %lor.lhs.false.46
  %34 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %cmp50 = icmp eq %struct.sv* %34, @PL_sv_no
  br i1 %cmp50, label %if.then.55, label %lor.lhs.false.52

lor.lhs.false.52:                                 ; preds = %lor.lhs.false.49
  %35 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %cmp53 = icmp eq %struct.sv* %35, @PL_sv_placeholder
  br i1 %cmp53, label %if.then.55, label %if.end.57

if.then.55:                                       ; preds = %lor.lhs.false.52, %lor.lhs.false.49, %lor.lhs.false.46, %land.lhs.true.43
  %36 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_refcnt56 = getelementptr inbounds %struct.sv, %struct.sv* %36, i32 0, i32 1
  store i32 2147483647, i32* %sv_refcnt56, align 4
  br label %if.end.64

if.end.57:                                        ; preds = %lor.lhs.false.52, %if.end.39
  %37 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_clear(%struct.sv* %37)
  %38 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_refcnt58 = getelementptr inbounds %struct.sv, %struct.sv* %38, i32 0, i32 1
  %39 = load i32, i32* %sv_refcnt58, align 4
  %tobool59 = icmp ne i32 %39, 0
  br i1 %tobool59, label %if.end.64, label %if.then.60

if.then.60:                                       ; preds = %if.end.57
  %40 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  %41 = bitcast %struct.sv* %40 to i8*
  %42 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any61 = getelementptr inbounds %struct.sv, %struct.sv* %42, i32 0, i32 0
  store i8* %41, i8** %sv_any61, align 8
  %43 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags62 = getelementptr inbounds %struct.sv, %struct.sv* %43, i32 0, i32 2
  store i32 255, i32* %sv_flags62, align 4
  %44 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  store %struct.sv* %44, %struct.sv** @PL_sv_root, align 8
  %45 = load i32, i32* @PL_sv_count, align 4
  %dec63 = add nsw i32 %45, -1
  store i32 %dec63, i32* @PL_sv_count, align 4
  store i32 %dec63, i32* %tmp
  %46 = load i32, i32* %tmp
  br label %if.end.64

if.end.64:                                        ; preds = %if.then, %if.then.3, %if.then.6, %if.then.17, %if.end.32, %if.then.38, %if.then.55, %if.then.60, %if.end.57
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @Perl_sv_cmp(%struct.sv* %sv1, %struct.sv* %sv2) #0 {
entry:
  %sv1.addr = alloca %struct.sv*, align 8
  %sv2.addr = alloca %struct.sv*, align 8
  %cur1 = alloca i64, align 8
  %cur2 = alloca i64, align 8
  %pv1 = alloca i8*, align 8
  %pv2 = alloca i8*, align 8
  %tpv = alloca i8*, align 8
  %cmp = alloca i32, align 4
  %svrecode = alloca %struct.sv*, align 8
  %retval86 = alloca i32, align 4
  store %struct.sv* %sv1, %struct.sv** %sv1.addr, align 8
  store %struct.sv* %sv2, %struct.sv** %sv2.addr, align 8
  store i8* null, i8** %tpv, align 8
  store %struct.sv* null, %struct.sv** %svrecode, align 8
  %0 = load %struct.sv*, %struct.sv** %sv1.addr, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0), i8** %pv1, align 8
  store i64 0, i64* %cur1, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** %sv1.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and = and i32 %2, 262144
  %cmp1 = icmp eq i32 %and, 262144
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else
  %3 = load %struct.sv*, %struct.sv** %sv1.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 0
  %4 = load i8*, i8** %sv_any, align 8
  %5 = bitcast i8* %4 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %5, i32 0, i32 1
  %6 = load i64, i64* %xpv_cur, align 8
  store i64 %6, i64* %cur1, align 8
  %7 = load %struct.sv*, %struct.sv** %sv1.addr, align 8
  %sv_any2 = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 0
  %8 = load i8*, i8** %sv_any2, align 8
  %9 = bitcast i8* %8 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %9, i32 0, i32 0
  %10 = load i8*, i8** %xpv_pv, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.else
  %11 = load %struct.sv*, %struct.sv** %sv1.addr, align 8
  %call = call i8* @Perl_sv_2pv_flags(%struct.sv* %11, i64* %cur1, i32 2)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %10, %cond.true ], [ %call, %cond.false ]
  store i8* %cond, i8** %pv1, align 8
  br label %if.end

if.end:                                           ; preds = %cond.end, %if.then
  %12 = load %struct.sv*, %struct.sv** %sv2.addr, align 8
  %tobool3 = icmp ne %struct.sv* %12, null
  br i1 %tobool3, label %if.else.5, label %if.then.4

if.then.4:                                        ; preds = %if.end
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0), i8** %pv2, align 8
  store i64 0, i64* %cur2, align 8
  br label %if.end.18

if.else.5:                                        ; preds = %if.end
  %13 = load %struct.sv*, %struct.sv** %sv2.addr, align 8
  %sv_flags6 = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 2
  %14 = load i32, i32* %sv_flags6, align 4
  %and7 = and i32 %14, 262144
  %cmp8 = icmp eq i32 %and7, 262144
  br i1 %cmp8, label %cond.true.9, label %cond.false.14

cond.true.9:                                      ; preds = %if.else.5
  %15 = load %struct.sv*, %struct.sv** %sv2.addr, align 8
  %sv_any10 = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 0
  %16 = load i8*, i8** %sv_any10, align 8
  %17 = bitcast i8* %16 to %struct.xpv*
  %xpv_cur11 = getelementptr inbounds %struct.xpv, %struct.xpv* %17, i32 0, i32 1
  %18 = load i64, i64* %xpv_cur11, align 8
  store i64 %18, i64* %cur2, align 8
  %19 = load %struct.sv*, %struct.sv** %sv2.addr, align 8
  %sv_any12 = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 0
  %20 = load i8*, i8** %sv_any12, align 8
  %21 = bitcast i8* %20 to %struct.xpv*
  %xpv_pv13 = getelementptr inbounds %struct.xpv, %struct.xpv* %21, i32 0, i32 0
  %22 = load i8*, i8** %xpv_pv13, align 8
  br label %cond.end.16

cond.false.14:                                    ; preds = %if.else.5
  %23 = load %struct.sv*, %struct.sv** %sv2.addr, align 8
  %call15 = call i8* @Perl_sv_2pv_flags(%struct.sv* %23, i64* %cur2, i32 2)
  br label %cond.end.16

cond.end.16:                                      ; preds = %cond.false.14, %cond.true.9
  %cond17 = phi i8* [ %22, %cond.true.9 ], [ %call15, %cond.false.14 ]
  store i8* %cond17, i8** %pv2, align 8
  br label %if.end.18

if.end.18:                                        ; preds = %cond.end.16, %if.then.4
  %24 = load i64, i64* %cur1, align 8
  %tobool19 = icmp ne i64 %24, 0
  br i1 %tobool19, label %land.lhs.true, label %if.end.77

land.lhs.true:                                    ; preds = %if.end.18
  %25 = load i64, i64* %cur2, align 8
  %tobool20 = icmp ne i64 %25, 0
  br i1 %tobool20, label %land.lhs.true.21, label %if.end.77

land.lhs.true.21:                                 ; preds = %land.lhs.true
  %26 = load %struct.sv*, %struct.sv** %sv1.addr, align 8
  %sv_flags22 = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 2
  %27 = load i32, i32* %sv_flags22, align 4
  %and23 = and i32 %27, 536870912
  %28 = load %struct.sv*, %struct.sv** %sv2.addr, align 8
  %sv_flags24 = getelementptr inbounds %struct.sv, %struct.sv* %28, i32 0, i32 2
  %29 = load i32, i32* %sv_flags24, align 4
  %and25 = and i32 %29, 536870912
  %cmp26 = icmp ne i32 %and23, %and25
  br i1 %cmp26, label %land.lhs.true.27, label %if.end.77

land.lhs.true.27:                                 ; preds = %land.lhs.true.21
  %30 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %op_private = getelementptr inbounds %struct.cop, %struct.cop* %30, i32 0, i32 7
  %31 = load i8, i8* %op_private, align 1
  %conv = zext i8 %31 to i32
  %and28 = and i32 %conv, 8
  %tobool29 = icmp ne i32 %and28, 0
  br i1 %tobool29, label %if.end.77, label %if.then.30

if.then.30:                                       ; preds = %land.lhs.true.27
  %32 = load %struct.sv*, %struct.sv** %sv1.addr, align 8
  %sv_flags31 = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 2
  %33 = load i32, i32* %sv_flags31, align 4
  %and32 = and i32 %33, 536870912
  %tobool33 = icmp ne i32 %and32, 0
  br i1 %tobool33, label %if.then.34, label %if.else.55

if.then.34:                                       ; preds = %if.then.30
  %34 = load %struct.sv*, %struct.sv** @PL_encoding, align 8
  %tobool35 = icmp ne %struct.sv* %34, null
  br i1 %tobool35, label %if.then.36, label %if.else.52

if.then.36:                                       ; preds = %if.then.34
  %35 = load i8*, i8** %pv2, align 8
  %36 = load i64, i64* %cur2, align 8
  %call37 = call %struct.sv* @Perl_newSVpvn(i8* %35, i64 %36)
  store %struct.sv* %call37, %struct.sv** %svrecode, align 8
  %37 = load %struct.sv*, %struct.sv** %svrecode, align 8
  %38 = load %struct.sv*, %struct.sv** @PL_encoding, align 8
  %call38 = call i8* @Perl_sv_recode_to_utf8(%struct.sv* %37, %struct.sv* %38)
  %39 = load %struct.sv*, %struct.sv** %svrecode, align 8
  %sv_flags39 = getelementptr inbounds %struct.sv, %struct.sv* %39, i32 0, i32 2
  %40 = load i32, i32* %sv_flags39, align 4
  %and40 = and i32 %40, 262144
  %cmp41 = icmp eq i32 %and40, 262144
  br i1 %cmp41, label %cond.true.43, label %cond.false.48

cond.true.43:                                     ; preds = %if.then.36
  %41 = load %struct.sv*, %struct.sv** %svrecode, align 8
  %sv_any44 = getelementptr inbounds %struct.sv, %struct.sv* %41, i32 0, i32 0
  %42 = load i8*, i8** %sv_any44, align 8
  %43 = bitcast i8* %42 to %struct.xpv*
  %xpv_cur45 = getelementptr inbounds %struct.xpv, %struct.xpv* %43, i32 0, i32 1
  %44 = load i64, i64* %xpv_cur45, align 8
  store i64 %44, i64* %cur2, align 8
  %45 = load %struct.sv*, %struct.sv** %svrecode, align 8
  %sv_any46 = getelementptr inbounds %struct.sv, %struct.sv* %45, i32 0, i32 0
  %46 = load i8*, i8** %sv_any46, align 8
  %47 = bitcast i8* %46 to %struct.xpv*
  %xpv_pv47 = getelementptr inbounds %struct.xpv, %struct.xpv* %47, i32 0, i32 0
  %48 = load i8*, i8** %xpv_pv47, align 8
  br label %cond.end.50

cond.false.48:                                    ; preds = %if.then.36
  %49 = load %struct.sv*, %struct.sv** %svrecode, align 8
  %call49 = call i8* @Perl_sv_2pv_flags(%struct.sv* %49, i64* %cur2, i32 2)
  br label %cond.end.50

cond.end.50:                                      ; preds = %cond.false.48, %cond.true.43
  %cond51 = phi i8* [ %48, %cond.true.43 ], [ %call49, %cond.false.48 ]
  store i8* %cond51, i8** %pv2, align 8
  br label %if.end.54

if.else.52:                                       ; preds = %if.then.34
  %50 = load i8*, i8** %pv2, align 8
  %call53 = call i8* @Perl_bytes_to_utf8(i8* %50, i64* %cur2)
  store i8* %call53, i8** %tpv, align 8
  store i8* %call53, i8** %pv2, align 8
  br label %if.end.54

if.end.54:                                        ; preds = %if.else.52, %cond.end.50
  br label %if.end.76

if.else.55:                                       ; preds = %if.then.30
  %51 = load %struct.sv*, %struct.sv** @PL_encoding, align 8
  %tobool56 = icmp ne %struct.sv* %51, null
  br i1 %tobool56, label %if.then.57, label %if.else.73

if.then.57:                                       ; preds = %if.else.55
  %52 = load i8*, i8** %pv1, align 8
  %53 = load i64, i64* %cur1, align 8
  %call58 = call %struct.sv* @Perl_newSVpvn(i8* %52, i64 %53)
  store %struct.sv* %call58, %struct.sv** %svrecode, align 8
  %54 = load %struct.sv*, %struct.sv** %svrecode, align 8
  %55 = load %struct.sv*, %struct.sv** @PL_encoding, align 8
  %call59 = call i8* @Perl_sv_recode_to_utf8(%struct.sv* %54, %struct.sv* %55)
  %56 = load %struct.sv*, %struct.sv** %svrecode, align 8
  %sv_flags60 = getelementptr inbounds %struct.sv, %struct.sv* %56, i32 0, i32 2
  %57 = load i32, i32* %sv_flags60, align 4
  %and61 = and i32 %57, 262144
  %cmp62 = icmp eq i32 %and61, 262144
  br i1 %cmp62, label %cond.true.64, label %cond.false.69

cond.true.64:                                     ; preds = %if.then.57
  %58 = load %struct.sv*, %struct.sv** %svrecode, align 8
  %sv_any65 = getelementptr inbounds %struct.sv, %struct.sv* %58, i32 0, i32 0
  %59 = load i8*, i8** %sv_any65, align 8
  %60 = bitcast i8* %59 to %struct.xpv*
  %xpv_cur66 = getelementptr inbounds %struct.xpv, %struct.xpv* %60, i32 0, i32 1
  %61 = load i64, i64* %xpv_cur66, align 8
  store i64 %61, i64* %cur1, align 8
  %62 = load %struct.sv*, %struct.sv** %svrecode, align 8
  %sv_any67 = getelementptr inbounds %struct.sv, %struct.sv* %62, i32 0, i32 0
  %63 = load i8*, i8** %sv_any67, align 8
  %64 = bitcast i8* %63 to %struct.xpv*
  %xpv_pv68 = getelementptr inbounds %struct.xpv, %struct.xpv* %64, i32 0, i32 0
  %65 = load i8*, i8** %xpv_pv68, align 8
  br label %cond.end.71

cond.false.69:                                    ; preds = %if.then.57
  %66 = load %struct.sv*, %struct.sv** %svrecode, align 8
  %call70 = call i8* @Perl_sv_2pv_flags(%struct.sv* %66, i64* %cur1, i32 2)
  br label %cond.end.71

cond.end.71:                                      ; preds = %cond.false.69, %cond.true.64
  %cond72 = phi i8* [ %65, %cond.true.64 ], [ %call70, %cond.false.69 ]
  store i8* %cond72, i8** %pv1, align 8
  br label %if.end.75

if.else.73:                                       ; preds = %if.else.55
  %67 = load i8*, i8** %pv1, align 8
  %call74 = call i8* @Perl_bytes_to_utf8(i8* %67, i64* %cur1)
  store i8* %call74, i8** %tpv, align 8
  store i8* %call74, i8** %pv1, align 8
  br label %if.end.75

if.end.75:                                        ; preds = %if.else.73, %cond.end.71
  br label %if.end.76

if.end.76:                                        ; preds = %if.end.75, %if.end.54
  br label %if.end.77

if.end.77:                                        ; preds = %if.end.76, %land.lhs.true.27, %land.lhs.true.21, %land.lhs.true, %if.end.18
  %68 = load i64, i64* %cur1, align 8
  %tobool78 = icmp ne i64 %68, 0
  br i1 %tobool78, label %if.else.82, label %if.then.79

if.then.79:                                       ; preds = %if.end.77
  %69 = load i64, i64* %cur2, align 8
  %tobool80 = icmp ne i64 %69, 0
  %cond81 = select i1 %tobool80, i32 -1, i32 0
  store i32 %cond81, i32* %cmp, align 4
  br label %if.end.110

if.else.82:                                       ; preds = %if.end.77
  %70 = load i64, i64* %cur2, align 8
  %tobool83 = icmp ne i64 %70, 0
  br i1 %tobool83, label %if.else.85, label %if.then.84

if.then.84:                                       ; preds = %if.else.82
  store i32 1, i32* %cmp, align 4
  br label %if.end.109

if.else.85:                                       ; preds = %if.else.82
  %71 = load i8*, i8** %pv1, align 8
  %72 = load i8*, i8** %pv2, align 8
  %73 = load i64, i64* %cur1, align 8
  %74 = load i64, i64* %cur2, align 8
  %cmp87 = icmp ult i64 %73, %74
  br i1 %cmp87, label %cond.true.89, label %cond.false.90

cond.true.89:                                     ; preds = %if.else.85
  %75 = load i64, i64* %cur1, align 8
  br label %cond.end.91

cond.false.90:                                    ; preds = %if.else.85
  %76 = load i64, i64* %cur2, align 8
  br label %cond.end.91

cond.end.91:                                      ; preds = %cond.false.90, %cond.true.89
  %cond92 = phi i64 [ %75, %cond.true.89 ], [ %76, %cond.false.90 ]
  %call93 = call i32 @memcmp(i8* %71, i8* %72, i64 %cond92)
  store i32 %call93, i32* %retval86, align 4
  %77 = load i32, i32* %retval86, align 4
  %tobool94 = icmp ne i32 %77, 0
  br i1 %tobool94, label %if.then.95, label %if.else.99

if.then.95:                                       ; preds = %cond.end.91
  %78 = load i32, i32* %retval86, align 4
  %cmp96 = icmp slt i32 %78, 0
  %cond98 = select i1 %cmp96, i32 -1, i32 1
  store i32 %cond98, i32* %cmp, align 4
  br label %if.end.108

if.else.99:                                       ; preds = %cond.end.91
  %79 = load i64, i64* %cur1, align 8
  %80 = load i64, i64* %cur2, align 8
  %cmp100 = icmp eq i64 %79, %80
  br i1 %cmp100, label %if.then.102, label %if.else.103

if.then.102:                                      ; preds = %if.else.99
  store i32 0, i32* %cmp, align 4
  br label %if.end.107

if.else.103:                                      ; preds = %if.else.99
  %81 = load i64, i64* %cur1, align 8
  %82 = load i64, i64* %cur2, align 8
  %cmp104 = icmp ult i64 %81, %82
  %cond106 = select i1 %cmp104, i32 -1, i32 1
  store i32 %cond106, i32* %cmp, align 4
  br label %if.end.107

if.end.107:                                       ; preds = %if.else.103, %if.then.102
  br label %if.end.108

if.end.108:                                       ; preds = %if.end.107, %if.then.95
  br label %if.end.109

if.end.109:                                       ; preds = %if.end.108, %if.then.84
  br label %if.end.110

if.end.110:                                       ; preds = %if.end.109, %if.then.79
  %83 = load %struct.sv*, %struct.sv** %svrecode, align 8
  %tobool111 = icmp ne %struct.sv* %83, null
  br i1 %tobool111, label %if.then.112, label %if.end.113

if.then.112:                                      ; preds = %if.end.110
  %84 = load %struct.sv*, %struct.sv** %svrecode, align 8
  call void @Perl_sv_free(%struct.sv* %84)
  br label %if.end.113

if.end.113:                                       ; preds = %if.then.112, %if.end.110
  %85 = load i8*, i8** %tpv, align 8
  %tobool114 = icmp ne i8* %85, null
  br i1 %tobool114, label %if.then.115, label %if.end.116

if.then.115:                                      ; preds = %if.end.113
  %86 = load i8*, i8** %tpv, align 8
  call void @Perl_safesysfree(i8* %86)
  br label %if.end.116

if.end.116:                                       ; preds = %if.then.115, %if.end.113
  %87 = load i32, i32* %cmp, align 4
  ret i32 %87
}

declare %struct.sv* @Perl_cv_const_sv(%struct.cv*) #1

declare void @Perl_cv_ckproto(%struct.cv*, %struct.gv*, i8*) #1

; Function Attrs: nounwind uwtable
define void @Perl_sv_setsv_mg(%struct.sv* %dstr, %struct.sv* %sstr) #0 {
entry:
  %dstr.addr = alloca %struct.sv*, align 8
  %sstr.addr = alloca %struct.sv*, align 8
  store %struct.sv* %dstr, %struct.sv** %dstr.addr, align 8
  store %struct.sv* %sstr, %struct.sv** %sstr.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %1 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  call void @Perl_sv_setsv_flags(%struct.sv* %0, %struct.sv* %1, i32 2)
  %2 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags, align 4
  %and = and i32 %3, 16384
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %call = call i32 @Perl_mg_set(%struct.sv* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define void @Perl_sv_setpvn_mg(%struct.sv* %sv, i8* %ptr, i64 %len) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %ptr.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %1 = load i8*, i8** %ptr.addr, align 8
  %2 = load i64, i64* %len.addr, align 8
  call void @Perl_sv_setpvn(%struct.sv* %0, i8* %1, i64 %2)
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 2
  %4 = load i32, i32* %sv_flags, align 4
  %and = and i32 %4, 16384
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i32 @Perl_mg_set(%struct.sv* %5)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define void @Perl_sv_setpv(%struct.sv* %sv, i8* %ptr) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %ptr.addr = alloca i8*, align 8
  %len = alloca i64, align 8
  %tmp = alloca i64, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 9961472
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_force_normal(%struct.sv* %2)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load i8*, i8** %ptr.addr, align 8
  %tobool1 = icmp ne i8* %3, null
  br i1 %tobool1, label %if.end.9, label %if.then.2

if.then.2:                                        ; preds = %if.end
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags3 = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 2
  %5 = load i32, i32* %sv_flags3, align 4
  %and4 = and i32 %5, 1223753727
  store i32 %and4, i32* %sv_flags3, align 4
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags5 = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 2
  %7 = load i32, i32* %sv_flags5, align 4
  %and6 = and i32 %7, 2097152
  %tobool7 = icmp ne i32 %and6, 0
  br i1 %tobool7, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then.2
  %8 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i32 @Perl_sv_backoff(%struct.sv* %8)
  %tobool8 = icmp ne i32 %call, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then.2
  %9 = phi i1 [ false, %if.then.2 ], [ %tobool8, %land.rhs ]
  %land.ext = zext i1 %9 to i32
  br label %if.end.35

if.end.9:                                         ; preds = %if.end
  %10 = load i8*, i8** %ptr.addr, align 8
  %call10 = call i64 @strlen(i8* %10)
  store i64 %call10, i64* %len, align 8
  %11 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags11 = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 2
  %12 = load i32, i32* %sv_flags11, align 4
  %and12 = and i32 %12, 255
  %cmp = icmp uge i32 %and12, 4
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.end.9
  %13 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call13 = call signext i8 @Perl_sv_upgrade(%struct.sv* %13, i32 4)
  %conv = sext i8 %call13 to i32
  %tobool14 = icmp ne i32 %conv, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.end.9
  %14 = phi i1 [ true, %if.end.9 ], [ %tobool14, %lor.rhs ]
  %lor.ext = zext i1 %14 to i32
  %15 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 0
  %16 = load i8*, i8** %sv_any, align 8
  %17 = bitcast i8* %16 to %struct.xpv*
  %xpv_len = getelementptr inbounds %struct.xpv, %struct.xpv* %17, i32 0, i32 2
  %18 = load i64, i64* %xpv_len, align 8
  %19 = load i64, i64* %len, align 8
  %add = add i64 %19, 1
  %cmp15 = icmp ult i64 %18, %add
  br i1 %cmp15, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.end
  %20 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %21 = load i64, i64* %len, align 8
  %add17 = add i64 %21, 1
  %call18 = call i8* @Perl_sv_grow(%struct.sv* %20, i64 %add17)
  br label %cond.end

cond.false:                                       ; preds = %lor.end
  %22 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any19 = getelementptr inbounds %struct.sv, %struct.sv* %22, i32 0, i32 0
  %23 = load i8*, i8** %sv_any19, align 8
  %24 = bitcast i8* %23 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %24, i32 0, i32 0
  %25 = load i8*, i8** %xpv_pv, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %call18, %cond.true ], [ %25, %cond.false ]
  %26 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any20 = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 0
  %27 = load i8*, i8** %sv_any20, align 8
  %28 = bitcast i8* %27 to %struct.xpv*
  %xpv_pv21 = getelementptr inbounds %struct.xpv, %struct.xpv* %28, i32 0, i32 0
  %29 = load i8*, i8** %xpv_pv21, align 8
  %30 = load i8*, i8** %ptr.addr, align 8
  %31 = load i64, i64* %len, align 8
  %add22 = add i64 %31, 1
  %mul = mul i64 %add22, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %29, i8* %30, i64 %mul, i32 1, i1 false)
  %32 = load i64, i64* %len, align 8
  %33 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any23 = getelementptr inbounds %struct.sv, %struct.sv* %33, i32 0, i32 0
  %34 = load i8*, i8** %sv_any23, align 8
  %35 = bitcast i8* %34 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %35, i32 0, i32 1
  store i64 %32, i64* %xpv_cur, align 8
  store i64 %32, i64* %tmp
  %36 = load i64, i64* %tmp
  %37 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags24 = getelementptr inbounds %struct.sv, %struct.sv* %37, i32 0, i32 2
  %38 = load i32, i32* %sv_flags24, align 4
  %and25 = and i32 %38, 1760624639
  store i32 %and25, i32* %sv_flags24, align 4
  %39 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags26 = getelementptr inbounds %struct.sv, %struct.sv* %39, i32 0, i32 2
  %40 = load i32, i32* %sv_flags26, align 4
  %or = or i32 %40, 67371008
  store i32 %or, i32* %sv_flags26, align 4
  %41 = load i8, i8* @PL_tainting, align 1
  %tobool27 = icmp ne i8 %41, 0
  br i1 %tobool27, label %if.then.28, label %if.end.35

if.then.28:                                       ; preds = %cond.end
  %42 = load i8, i8* @PL_tainted, align 1
  %tobool29 = icmp ne i8 %42, 0
  br i1 %tobool29, label %if.then.30, label %if.end.34

if.then.30:                                       ; preds = %if.then.28
  %43 = load i8, i8* @PL_tainting, align 1
  %tobool31 = icmp ne i8 %43, 0
  br i1 %tobool31, label %if.then.32, label %if.end.33

if.then.32:                                       ; preds = %if.then.30
  %44 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_taint(%struct.sv* %44)
  br label %if.end.33

if.end.33:                                        ; preds = %if.then.32, %if.then.30
  br label %if.end.34

if.end.34:                                        ; preds = %if.end.33, %if.then.28
  br label %if.end.35

if.end.35:                                        ; preds = %land.end, %if.end.34, %cond.end
  ret void
}

; Function Attrs: nounwind uwtable
define void @Perl_sv_setpv_mg(%struct.sv* %sv, i8* %ptr) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %ptr.addr = alloca i8*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %1 = load i8*, i8** %ptr.addr, align 8
  call void @Perl_sv_setpv(%struct.sv* %0, i8* %1)
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags, align 4
  %and = and i32 %3, 16384
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i32 @Perl_mg_set(%struct.sv* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define void @Perl_sv_usepvn(%struct.sv* %sv, i8* %ptr, i64 %len) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %ptr.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %tmp = alloca i64, align 8
  %tmp33 = alloca i64, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 9961472
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_force_normal(%struct.sv* %2)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 2
  %4 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %4, 255
  %cmp = icmp uge i32 %and2, 4
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.end
  %5 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call signext i8 @Perl_sv_upgrade(%struct.sv* %5, i32 4)
  %conv = sext i8 %call to i32
  %tobool3 = icmp ne i32 %conv, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.end
  %6 = phi i1 [ true, %if.end ], [ %tobool3, %lor.rhs ]
  %lor.ext = zext i1 %6 to i32
  %7 = load i8*, i8** %ptr.addr, align 8
  %tobool4 = icmp ne i8* %7, null
  br i1 %tobool4, label %if.end.13, label %if.then.5

if.then.5:                                        ; preds = %lor.end
  %8 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags6 = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 2
  %9 = load i32, i32* %sv_flags6, align 4
  %and7 = and i32 %9, 1223753727
  store i32 %and7, i32* %sv_flags6, align 4
  %10 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags8 = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags8, align 4
  %and9 = and i32 %11, 2097152
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then.5
  %12 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call11 = call i32 @Perl_sv_backoff(%struct.sv* %12)
  %tobool12 = icmp ne i32 %call11, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then.5
  %13 = phi i1 [ false, %if.then.5 ], [ %tobool12, %land.rhs ]
  %land.ext = zext i1 %13 to i32
  br label %if.end.52

if.end.13:                                        ; preds = %lor.end
  %14 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags14 = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 2
  %15 = load i32, i32* %sv_flags14, align 4
  %and15 = and i32 %15, 2097152
  %tobool16 = icmp ne i32 %and15, 0
  br i1 %tobool16, label %land.rhs.17, label %land.end.20

land.rhs.17:                                      ; preds = %if.end.13
  %16 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call18 = call i32 @Perl_sv_backoff(%struct.sv* %16)
  %tobool19 = icmp ne i32 %call18, 0
  br label %land.end.20

land.end.20:                                      ; preds = %land.rhs.17, %if.end.13
  %17 = phi i1 [ false, %if.end.13 ], [ %tobool19, %land.rhs.17 ]
  %land.ext21 = zext i1 %17 to i32
  %18 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 0
  %19 = load i8*, i8** %sv_any, align 8
  %20 = bitcast i8* %19 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %20, i32 0, i32 0
  %21 = load i8*, i8** %xpv_pv, align 8
  %tobool22 = icmp ne i8* %21, null
  br i1 %tobool22, label %land.lhs.true, label %if.end.28

land.lhs.true:                                    ; preds = %land.end.20
  %22 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any23 = getelementptr inbounds %struct.sv, %struct.sv* %22, i32 0, i32 0
  %23 = load i8*, i8** %sv_any23, align 8
  %24 = bitcast i8* %23 to %struct.xpv*
  %xpv_len = getelementptr inbounds %struct.xpv, %struct.xpv* %24, i32 0, i32 2
  %25 = load i64, i64* %xpv_len, align 8
  %tobool24 = icmp ne i64 %25, 0
  br i1 %tobool24, label %if.then.25, label %if.end.28

if.then.25:                                       ; preds = %land.lhs.true
  %26 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any26 = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 0
  %27 = load i8*, i8** %sv_any26, align 8
  %28 = bitcast i8* %27 to %struct.xpv*
  %xpv_pv27 = getelementptr inbounds %struct.xpv, %struct.xpv* %28, i32 0, i32 0
  %29 = load i8*, i8** %xpv_pv27, align 8
  call void @Perl_safesysfree(i8* %29)
  br label %if.end.28

if.end.28:                                        ; preds = %if.then.25, %land.lhs.true, %land.end.20
  %30 = load i8*, i8** %ptr.addr, align 8
  %31 = load i64, i64* %len.addr, align 8
  %add = add i64 %31, 1
  %mul = mul i64 %add, 1
  %call29 = call i8* @Perl_safesysrealloc(i8* %30, i64 %mul)
  store i8* %call29, i8** %ptr.addr, align 8
  %32 = load i8*, i8** %ptr.addr, align 8
  %33 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any30 = getelementptr inbounds %struct.sv, %struct.sv* %33, i32 0, i32 0
  %34 = load i8*, i8** %sv_any30, align 8
  %35 = bitcast i8* %34 to %struct.xpv*
  %xpv_pv31 = getelementptr inbounds %struct.xpv, %struct.xpv* %35, i32 0, i32 0
  store i8* %32, i8** %xpv_pv31, align 8
  %36 = load i64, i64* %len.addr, align 8
  %37 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any32 = getelementptr inbounds %struct.sv, %struct.sv* %37, i32 0, i32 0
  %38 = load i8*, i8** %sv_any32, align 8
  %39 = bitcast i8* %38 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %39, i32 0, i32 1
  store i64 %36, i64* %xpv_cur, align 8
  store i64 %36, i64* %tmp
  %40 = load i64, i64* %tmp
  %41 = load i64, i64* %len.addr, align 8
  %add34 = add i64 %41, 1
  %42 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any35 = getelementptr inbounds %struct.sv, %struct.sv* %42, i32 0, i32 0
  %43 = load i8*, i8** %sv_any35, align 8
  %44 = bitcast i8* %43 to %struct.xpv*
  %xpv_len36 = getelementptr inbounds %struct.xpv, %struct.xpv* %44, i32 0, i32 2
  store i64 %add34, i64* %xpv_len36, align 8
  store i64 %add34, i64* %tmp33
  %45 = load i64, i64* %tmp33
  %46 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any37 = getelementptr inbounds %struct.sv, %struct.sv* %46, i32 0, i32 0
  %47 = load i8*, i8** %sv_any37, align 8
  %48 = bitcast i8* %47 to %struct.xpv*
  %xpv_pv38 = getelementptr inbounds %struct.xpv, %struct.xpv* %48, i32 0, i32 0
  %49 = load i8*, i8** %xpv_pv38, align 8
  %50 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any39 = getelementptr inbounds %struct.sv, %struct.sv* %50, i32 0, i32 0
  %51 = load i8*, i8** %sv_any39, align 8
  %52 = bitcast i8* %51 to %struct.xpv*
  %xpv_cur40 = getelementptr inbounds %struct.xpv, %struct.xpv* %52, i32 0, i32 1
  %53 = load i64, i64* %xpv_cur40, align 8
  %add.ptr = getelementptr inbounds i8, i8* %49, i64 %53
  store i8 0, i8* %add.ptr, align 1
  %54 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags41 = getelementptr inbounds %struct.sv, %struct.sv* %54, i32 0, i32 2
  %55 = load i32, i32* %sv_flags41, align 4
  %and42 = and i32 %55, 1760624639
  store i32 %and42, i32* %sv_flags41, align 4
  %56 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags43 = getelementptr inbounds %struct.sv, %struct.sv* %56, i32 0, i32 2
  %57 = load i32, i32* %sv_flags43, align 4
  %or = or i32 %57, 67371008
  store i32 %or, i32* %sv_flags43, align 4
  %58 = load i8, i8* @PL_tainting, align 1
  %tobool44 = icmp ne i8 %58, 0
  br i1 %tobool44, label %if.then.45, label %if.end.52

if.then.45:                                       ; preds = %if.end.28
  %59 = load i8, i8* @PL_tainted, align 1
  %tobool46 = icmp ne i8 %59, 0
  br i1 %tobool46, label %if.then.47, label %if.end.51

if.then.47:                                       ; preds = %if.then.45
  %60 = load i8, i8* @PL_tainting, align 1
  %tobool48 = icmp ne i8 %60, 0
  br i1 %tobool48, label %if.then.49, label %if.end.50

if.then.49:                                       ; preds = %if.then.47
  %61 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_taint(%struct.sv* %61)
  br label %if.end.50

if.end.50:                                        ; preds = %if.then.49, %if.then.47
  br label %if.end.51

if.end.51:                                        ; preds = %if.end.50, %if.then.45
  br label %if.end.52

if.end.52:                                        ; preds = %land.end, %if.end.51, %if.end.28
  ret void
}

; Function Attrs: nounwind uwtable
define void @Perl_sv_usepvn_mg(%struct.sv* %sv, i8* %ptr, i64 %len) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %ptr.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %1 = load i8*, i8** %ptr.addr, align 8
  %2 = load i64, i64* %len.addr, align 8
  call void @Perl_sv_usepvn(%struct.sv* %0, i8* %1, i64 %2)
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 2
  %4 = load i32, i32* %sv_flags, align 4
  %and = and i32 %4, 16384
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i32 @Perl_mg_set(%struct.sv* %5)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare void @Perl_unsharepvn(i8*, i32, i32) #1

; Function Attrs: nounwind uwtable
define void @Perl_sv_unref_flags(%struct.sv* %sv, i32 %flags) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %flags.addr = alloca i32, align 4
  %rv = alloca %struct.sv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 0
  %1 = load i8*, i8** %sv_any, align 8
  %2 = bitcast i8* %1 to %struct.xrv*
  %xrv_rv = getelementptr inbounds %struct.xrv, %struct.xrv* %2, i32 0, i32 0
  %3 = load %struct.sv*, %struct.sv** %xrv_rv, align 8
  store %struct.sv* %3, %struct.sv** %rv, align 8
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 2
  %5 = load i32, i32* %sv_flags, align 4
  %and = and i32 %5, -2146959360
  %cmp = icmp eq i32 %and, -2146959360
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @S_sv_del_backref(%struct.sv* %6)
  %7 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 2
  %8 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %8, 2146959359
  store i32 %and2, i32* %sv_flags1, align 4
  %9 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any3 = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 0
  %10 = load i8*, i8** %sv_any3, align 8
  %11 = bitcast i8* %10 to %struct.xrv*
  %xrv_rv4 = getelementptr inbounds %struct.xrv, %struct.xrv* %11, i32 0, i32 0
  store %struct.sv* null, %struct.sv** %xrv_rv4, align 8
  br label %if.end.12

if.end:                                           ; preds = %entry
  %12 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any5 = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 0
  %13 = load i8*, i8** %sv_any5, align 8
  %14 = bitcast i8* %13 to %struct.xrv*
  %xrv_rv6 = getelementptr inbounds %struct.xrv, %struct.xrv* %14, i32 0, i32 0
  store %struct.sv* null, %struct.sv** %xrv_rv6, align 8
  %15 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags7 = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 2
  %16 = load i32, i32* %sv_flags7, align 4
  %and8 = and i32 %16, -268959745
  store i32 %and8, i32* %sv_flags7, align 4
  %17 = load %struct.sv*, %struct.sv** %rv, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 1
  %18 = load i32, i32* %sv_refcnt, align 4
  %cmp9 = icmp ne i32 %18, 1
  br i1 %cmp9, label %if.then.11, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %19 = load i32, i32* %flags.addr, align 4
  %and10 = and i32 %19, 1
  %tobool = icmp ne i32 %and10, 0
  br i1 %tobool, label %if.then.11, label %if.else

if.then.11:                                       ; preds = %lor.lhs.false, %if.end
  %20 = load %struct.sv*, %struct.sv** %rv, align 8
  call void @Perl_sv_free(%struct.sv* %20)
  br label %if.end.12

if.else:                                          ; preds = %lor.lhs.false
  %21 = load %struct.sv*, %struct.sv** %rv, align 8
  %call = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %21)
  br label %if.end.12

if.end.12:                                        ; preds = %if.then, %if.else, %if.then.11
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @S_sv_unglob(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %xpvmg = alloca i8*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, -1048577
  store i32 %and, i32* %sv_flags, align 4
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 0
  %3 = load i8*, i8** %sv_any, align 8
  %4 = bitcast i8* %3 to %struct.xpvgv*
  %xgv_gp = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %4, i32 0, i32 7
  %5 = load %struct.gp*, %struct.gp** %xgv_gp, align 8
  %tobool = icmp ne %struct.gp* %5, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %7 = bitcast %struct.sv* %6 to %struct.gv*
  call void @Perl_gp_free(%struct.gv* %7)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %8 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any1 = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 0
  %9 = load i8*, i8** %sv_any1, align 8
  %10 = bitcast i8* %9 to %struct.xpvgv*
  %xgv_stash = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %10, i32 0, i32 10
  %11 = load %struct.hv*, %struct.hv** %xgv_stash, align 8
  %tobool2 = icmp ne %struct.hv* %11, null
  br i1 %tobool2, label %if.then.3, label %if.end.8

if.then.3:                                        ; preds = %if.end
  %12 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any4 = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 0
  %13 = load i8*, i8** %sv_any4, align 8
  %14 = bitcast i8* %13 to %struct.xpvgv*
  %xgv_stash5 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %14, i32 0, i32 10
  %15 = load %struct.hv*, %struct.hv** %xgv_stash5, align 8
  %16 = bitcast %struct.hv* %15 to %struct.sv*
  call void @Perl_sv_free(%struct.sv* %16)
  %17 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any6 = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 0
  %18 = load i8*, i8** %sv_any6, align 8
  %19 = bitcast i8* %18 to %struct.xpvgv*
  %xgv_stash7 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %19, i32 0, i32 10
  store %struct.hv* null, %struct.hv** %xgv_stash7, align 8
  br label %if.end.8

if.end.8:                                         ; preds = %if.then.3, %if.end
  %20 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i32 @Perl_sv_unmagic(%struct.sv* %20, i32 42)
  %21 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any9 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 0
  %22 = load i8*, i8** %sv_any9, align 8
  %23 = bitcast i8* %22 to %struct.xpvgv*
  %xgv_name = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %23, i32 0, i32 8
  %24 = load i8*, i8** %xgv_name, align 8
  call void @Perl_safesysfree(i8* %24)
  %25 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any10 = getelementptr inbounds %struct.sv, %struct.sv* %25, i32 0, i32 0
  %26 = load i8*, i8** %sv_any10, align 8
  %27 = bitcast i8* %26 to %struct.xpvgv*
  %xgv_flags = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %27, i32 0, i32 11
  %28 = load i8, i8* %xgv_flags, align 1
  %conv = zext i8 %28 to i32
  %and11 = and i32 %conv, -3
  %conv12 = trunc i32 %and11 to i8
  store i8 %conv12, i8* %xgv_flags, align 1
  %call13 = call %struct.xpvmg* @S_new_xpvmg()
  %29 = bitcast %struct.xpvmg* %call13 to i8*
  store i8* %29, i8** %xpvmg, align 8
  %30 = load i8*, i8** %xpvmg, align 8
  %31 = bitcast i8* %30 to %struct.xpvmg*
  %32 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any14 = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 0
  %33 = load i8*, i8** %sv_any14, align 8
  %34 = bitcast i8* %33 to %struct.xpvmg*
  %35 = bitcast %struct.xpvmg* %31 to i8*
  %36 = bitcast %struct.xpvmg* %34 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %35, i8* %36, i64 56, i32 8, i1 false)
  %37 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any15 = getelementptr inbounds %struct.sv, %struct.sv* %37, i32 0, i32 0
  %38 = load i8*, i8** %sv_any15, align 8
  call void @Perl_safesysfree(i8* %38)
  %39 = load i8*, i8** %xpvmg, align 8
  %40 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any16 = getelementptr inbounds %struct.sv, %struct.sv* %40, i32 0, i32 0
  store i8* %39, i8** %sv_any16, align 8
  %41 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags17 = getelementptr inbounds %struct.sv, %struct.sv* %41, i32 0, i32 2
  %42 = load i32, i32* %sv_flags17, align 4
  %and18 = and i32 %42, -256
  store i32 %and18, i32* %sv_flags17, align 4
  %43 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags19 = getelementptr inbounds %struct.sv, %struct.sv* %43, i32 0, i32 2
  %44 = load i32, i32* %sv_flags19, align 4
  %or = or i32 %44, 7
  store i32 %or, i32* %sv_flags19, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define void @Perl_sv_chop(%struct.sv* %sv, i8* %ptr) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %ptr.addr = alloca i8*, align 8
  %delta = alloca i64, align 8
  %pvx = alloca i8*, align 8
  %len = alloca i64, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and = and i32 %2, 67108864
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %3 = load i8*, i8** %ptr.addr, align 8
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 0
  %5 = load i8*, i8** %sv_any, align 8
  %6 = bitcast i8* %5 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %6, i32 0, i32 0
  %7 = load i8*, i8** %xpv_pv, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %3 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %7 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, i64* %delta, align 8
  %8 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 2
  %9 = load i32, i32* %sv_flags2, align 4
  %and3 = and i32 %9, 9961472
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %if.end
  %10 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_force_normal(%struct.sv* %10)
  br label %if.end.6

if.end.6:                                         ; preds = %if.then.5, %if.end
  %11 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags7 = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 2
  %12 = load i32, i32* %sv_flags7, align 4
  %and8 = and i32 %12, 255
  %cmp = icmp ult i32 %and8, 5
  br i1 %cmp, label %if.then.9, label %if.end.10

if.then.9:                                        ; preds = %if.end.6
  %13 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call signext i8 @Perl_sv_upgrade(%struct.sv* %13, i32 5)
  br label %if.end.10

if.end.10:                                        ; preds = %if.then.9, %if.end.6
  %14 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags11 = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 2
  %15 = load i32, i32* %sv_flags11, align 4
  %and12 = and i32 %15, 2097152
  %tobool13 = icmp ne i32 %and12, 0
  br i1 %tobool13, label %if.end.37, label %if.then.14

if.then.14:                                       ; preds = %if.end.10
  %16 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any15 = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 0
  %17 = load i8*, i8** %sv_any15, align 8
  %18 = bitcast i8* %17 to %struct.xpv*
  %xpv_len = getelementptr inbounds %struct.xpv, %struct.xpv* %18, i32 0, i32 2
  %19 = load i64, i64* %xpv_len, align 8
  %tobool16 = icmp ne i64 %19, 0
  br i1 %tobool16, label %if.end.34, label %if.then.17

if.then.17:                                       ; preds = %if.then.14
  %20 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any18 = getelementptr inbounds %struct.sv, %struct.sv* %20, i32 0, i32 0
  %21 = load i8*, i8** %sv_any18, align 8
  %22 = bitcast i8* %21 to %struct.xpv*
  %xpv_pv19 = getelementptr inbounds %struct.xpv, %struct.xpv* %22, i32 0, i32 0
  %23 = load i8*, i8** %xpv_pv19, align 8
  store i8* %23, i8** %pvx, align 8
  %24 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any20 = getelementptr inbounds %struct.sv, %struct.sv* %24, i32 0, i32 0
  %25 = load i8*, i8** %sv_any20, align 8
  %26 = bitcast i8* %25 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %26, i32 0, i32 1
  %27 = load i64, i64* %xpv_cur, align 8
  store i64 %27, i64* %len, align 8
  %28 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any21 = getelementptr inbounds %struct.sv, %struct.sv* %28, i32 0, i32 0
  %29 = load i8*, i8** %sv_any21, align 8
  %30 = bitcast i8* %29 to %struct.xpv*
  %xpv_len22 = getelementptr inbounds %struct.xpv, %struct.xpv* %30, i32 0, i32 2
  %31 = load i64, i64* %xpv_len22, align 8
  %32 = load i64, i64* %len, align 8
  %add = add i64 %32, 1
  %cmp23 = icmp ult i64 %31, %add
  br i1 %cmp23, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.17
  %33 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %34 = load i64, i64* %len, align 8
  %add24 = add i64 %34, 1
  %call25 = call i8* @Perl_sv_grow(%struct.sv* %33, i64 %add24)
  br label %cond.end

cond.false:                                       ; preds = %if.then.17
  %35 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any26 = getelementptr inbounds %struct.sv, %struct.sv* %35, i32 0, i32 0
  %36 = load i8*, i8** %sv_any26, align 8
  %37 = bitcast i8* %36 to %struct.xpv*
  %xpv_pv27 = getelementptr inbounds %struct.xpv, %struct.xpv* %37, i32 0, i32 0
  %38 = load i8*, i8** %xpv_pv27, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %call25, %cond.true ], [ %38, %cond.false ]
  %39 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any28 = getelementptr inbounds %struct.sv, %struct.sv* %39, i32 0, i32 0
  %40 = load i8*, i8** %sv_any28, align 8
  %41 = bitcast i8* %40 to %struct.xpv*
  %xpv_pv29 = getelementptr inbounds %struct.xpv, %struct.xpv* %41, i32 0, i32 0
  %42 = load i8*, i8** %xpv_pv29, align 8
  %43 = load i8*, i8** %pvx, align 8
  %44 = load i64, i64* %len, align 8
  %mul = mul i64 %44, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %42, i8* %43, i64 %mul, i32 1, i1 false)
  %45 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any30 = getelementptr inbounds %struct.sv, %struct.sv* %45, i32 0, i32 0
  %46 = load i8*, i8** %sv_any30, align 8
  %47 = bitcast i8* %46 to %struct.xpv*
  %xpv_pv31 = getelementptr inbounds %struct.xpv, %struct.xpv* %47, i32 0, i32 0
  %48 = load i8*, i8** %xpv_pv31, align 8
  %49 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any32 = getelementptr inbounds %struct.sv, %struct.sv* %49, i32 0, i32 0
  %50 = load i8*, i8** %sv_any32, align 8
  %51 = bitcast i8* %50 to %struct.xpv*
  %xpv_cur33 = getelementptr inbounds %struct.xpv, %struct.xpv* %51, i32 0, i32 1
  %52 = load i64, i64* %xpv_cur33, align 8
  %add.ptr = getelementptr inbounds i8, i8* %48, i64 %52
  store i8 0, i8* %add.ptr, align 1
  br label %if.end.34

if.end.34:                                        ; preds = %cond.end, %if.then.14
  %53 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any35 = getelementptr inbounds %struct.sv, %struct.sv* %53, i32 0, i32 0
  %54 = load i8*, i8** %sv_any35, align 8
  %55 = bitcast i8* %54 to %struct.xpviv*
  %xiv_iv = getelementptr inbounds %struct.xpviv, %struct.xpviv* %55, i32 0, i32 3
  store i64 0, i64* %xiv_iv, align 8
  %56 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags36 = getelementptr inbounds %struct.sv, %struct.sv* %56, i32 0, i32 2
  %57 = load i32, i32* %sv_flags36, align 4
  %or = or i32 %57, 2097152
  store i32 %or, i32* %sv_flags36, align 4
  br label %if.end.37

if.end.37:                                        ; preds = %if.end.34, %if.end.10
  %58 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags38 = getelementptr inbounds %struct.sv, %struct.sv* %58, i32 0, i32 2
  %59 = load i32, i32* %sv_flags38, align 4
  %and39 = and i32 %59, 2096955391
  store i32 %and39, i32* %sv_flags38, align 4
  %60 = load i64, i64* %delta, align 8
  %61 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any40 = getelementptr inbounds %struct.sv, %struct.sv* %61, i32 0, i32 0
  %62 = load i8*, i8** %sv_any40, align 8
  %63 = bitcast i8* %62 to %struct.xpv*
  %xpv_len41 = getelementptr inbounds %struct.xpv, %struct.xpv* %63, i32 0, i32 2
  %64 = load i64, i64* %xpv_len41, align 8
  %sub = sub i64 %64, %60
  store i64 %sub, i64* %xpv_len41, align 8
  %65 = load i64, i64* %delta, align 8
  %66 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any42 = getelementptr inbounds %struct.sv, %struct.sv* %66, i32 0, i32 0
  %67 = load i8*, i8** %sv_any42, align 8
  %68 = bitcast i8* %67 to %struct.xpv*
  %xpv_cur43 = getelementptr inbounds %struct.xpv, %struct.xpv* %68, i32 0, i32 1
  %69 = load i64, i64* %xpv_cur43, align 8
  %sub44 = sub i64 %69, %65
  store i64 %sub44, i64* %xpv_cur43, align 8
  %70 = load i64, i64* %delta, align 8
  %71 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any45 = getelementptr inbounds %struct.sv, %struct.sv* %71, i32 0, i32 0
  %72 = load i8*, i8** %sv_any45, align 8
  %73 = bitcast i8* %72 to %struct.xpv*
  %xpv_pv46 = getelementptr inbounds %struct.xpv, %struct.xpv* %73, i32 0, i32 0
  %74 = load i8*, i8** %xpv_pv46, align 8
  %add.ptr47 = getelementptr inbounds i8, i8* %74, i64 %70
  store i8* %add.ptr47, i8** %xpv_pv46, align 8
  %75 = load i64, i64* %delta, align 8
  %76 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any48 = getelementptr inbounds %struct.sv, %struct.sv* %76, i32 0, i32 0
  %77 = load i8*, i8** %sv_any48, align 8
  %78 = bitcast i8* %77 to %struct.xpviv*
  %xiv_iv49 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %78, i32 0, i32 3
  %79 = load i64, i64* %xiv_iv49, align 8
  %add50 = add i64 %79, %75
  store i64 %add50, i64* %xiv_iv49, align 8
  br label %return

return:                                           ; preds = %if.end.37, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define void @Perl_sv_catpvn(%struct.sv* %dsv, i8* %sstr, i64 %slen) #0 {
entry:
  %dsv.addr = alloca %struct.sv*, align 8
  %sstr.addr = alloca i8*, align 8
  %slen.addr = alloca i64, align 8
  store %struct.sv* %dsv, %struct.sv** %dsv.addr, align 8
  store i8* %sstr, i8** %sstr.addr, align 8
  store i64 %slen, i64* %slen.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  %1 = load i8*, i8** %sstr.addr, align 8
  %2 = load i64, i64* %slen.addr, align 8
  call void @Perl_sv_catpvn_flags(%struct.sv* %0, i8* %1, i64 %2, i32 2)
  ret void
}

; Function Attrs: nounwind uwtable
define void @Perl_sv_catpvn_flags(%struct.sv* %dsv, i8* %sstr, i64 %slen, i32 %flags) #0 {
entry:
  %dsv.addr = alloca %struct.sv*, align 8
  %sstr.addr = alloca i8*, align 8
  %slen.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  %dlen = alloca i64, align 8
  %dstr = alloca i8*, align 8
  store %struct.sv* %dsv, %struct.sv** %dsv.addr, align 8
  store i8* %sstr, i8** %sstr.addr, align 8
  store i64 %slen, i64* %slen.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 10223616
  %cmp = icmp eq i32 %and, 262144
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 0
  %3 = load i8*, i8** %sv_any, align 8
  %4 = bitcast i8* %3 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %4, i32 0, i32 1
  %5 = load i64, i64* %xpv_cur, align 8
  store i64 %5, i64* %dlen, align 8
  %6 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  %sv_any1 = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 0
  %7 = load i8*, i8** %sv_any1, align 8
  %8 = bitcast i8* %7 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %8, i32 0, i32 0
  %9 = load i8*, i8** %xpv_pv, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %10 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  %11 = load i32, i32* %flags.addr, align 4
  %call = call i8* @Perl_sv_pvn_force_flags(%struct.sv* %10, i64* %dlen, i32 %11)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %9, %cond.true ], [ %call, %cond.false ]
  store i8* %cond, i8** %dstr, align 8
  %12 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  %sv_any2 = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 0
  %13 = load i8*, i8** %sv_any2, align 8
  %14 = bitcast i8* %13 to %struct.xpv*
  %xpv_len = getelementptr inbounds %struct.xpv, %struct.xpv* %14, i32 0, i32 2
  %15 = load i64, i64* %xpv_len, align 8
  %16 = load i64, i64* %dlen, align 8
  %17 = load i64, i64* %slen.addr, align 8
  %add = add i64 %16, %17
  %add3 = add i64 %add, 1
  %cmp4 = icmp ult i64 %15, %add3
  br i1 %cmp4, label %cond.true.5, label %cond.false.9

cond.true.5:                                      ; preds = %cond.end
  %18 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  %19 = load i64, i64* %dlen, align 8
  %20 = load i64, i64* %slen.addr, align 8
  %add6 = add i64 %19, %20
  %add7 = add i64 %add6, 1
  %call8 = call i8* @Perl_sv_grow(%struct.sv* %18, i64 %add7)
  br label %cond.end.12

cond.false.9:                                     ; preds = %cond.end
  %21 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  %sv_any10 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 0
  %22 = load i8*, i8** %sv_any10, align 8
  %23 = bitcast i8* %22 to %struct.xpv*
  %xpv_pv11 = getelementptr inbounds %struct.xpv, %struct.xpv* %23, i32 0, i32 0
  %24 = load i8*, i8** %xpv_pv11, align 8
  br label %cond.end.12

cond.end.12:                                      ; preds = %cond.false.9, %cond.true.5
  %cond13 = phi i8* [ %call8, %cond.true.5 ], [ %24, %cond.false.9 ]
  %25 = load i8*, i8** %sstr.addr, align 8
  %26 = load i8*, i8** %dstr, align 8
  %cmp14 = icmp eq i8* %25, %26
  br i1 %cmp14, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end.12
  %27 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  %sv_any15 = getelementptr inbounds %struct.sv, %struct.sv* %27, i32 0, i32 0
  %28 = load i8*, i8** %sv_any15, align 8
  %29 = bitcast i8* %28 to %struct.xpv*
  %xpv_pv16 = getelementptr inbounds %struct.xpv, %struct.xpv* %29, i32 0, i32 0
  %30 = load i8*, i8** %xpv_pv16, align 8
  store i8* %30, i8** %sstr.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end.12
  %31 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  %sv_any17 = getelementptr inbounds %struct.sv, %struct.sv* %31, i32 0, i32 0
  %32 = load i8*, i8** %sv_any17, align 8
  %33 = bitcast i8* %32 to %struct.xpv*
  %xpv_pv18 = getelementptr inbounds %struct.xpv, %struct.xpv* %33, i32 0, i32 0
  %34 = load i8*, i8** %xpv_pv18, align 8
  %35 = load i64, i64* %dlen, align 8
  %add.ptr = getelementptr inbounds i8, i8* %34, i64 %35
  %36 = load i8*, i8** %sstr.addr, align 8
  %37 = load i64, i64* %slen.addr, align 8
  %mul = mul i64 %37, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %add.ptr, i8* %36, i64 %mul, i32 1, i1 false)
  %38 = load i64, i64* %slen.addr, align 8
  %39 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  %sv_any19 = getelementptr inbounds %struct.sv, %struct.sv* %39, i32 0, i32 0
  %40 = load i8*, i8** %sv_any19, align 8
  %41 = bitcast i8* %40 to %struct.xpv*
  %xpv_cur20 = getelementptr inbounds %struct.xpv, %struct.xpv* %41, i32 0, i32 1
  %42 = load i64, i64* %xpv_cur20, align 8
  %add21 = add i64 %42, %38
  store i64 %add21, i64* %xpv_cur20, align 8
  %43 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  %sv_any22 = getelementptr inbounds %struct.sv, %struct.sv* %43, i32 0, i32 0
  %44 = load i8*, i8** %sv_any22, align 8
  %45 = bitcast i8* %44 to %struct.xpv*
  %xpv_pv23 = getelementptr inbounds %struct.xpv, %struct.xpv* %45, i32 0, i32 0
  %46 = load i8*, i8** %xpv_pv23, align 8
  %47 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  %sv_any24 = getelementptr inbounds %struct.sv, %struct.sv* %47, i32 0, i32 0
  %48 = load i8*, i8** %sv_any24, align 8
  %49 = bitcast i8* %48 to %struct.xpv*
  %xpv_cur25 = getelementptr inbounds %struct.xpv, %struct.xpv* %49, i32 0, i32 1
  %50 = load i64, i64* %xpv_cur25, align 8
  %add.ptr26 = getelementptr inbounds i8, i8* %46, i64 %50
  store i8 0, i8* %add.ptr26, align 1
  %51 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  %sv_flags27 = getelementptr inbounds %struct.sv, %struct.sv* %51, i32 0, i32 2
  %52 = load i32, i32* %sv_flags27, align 4
  %and28 = and i32 %52, 1760624639
  store i32 %and28, i32* %sv_flags27, align 4
  %53 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  %sv_flags29 = getelementptr inbounds %struct.sv, %struct.sv* %53, i32 0, i32 2
  %54 = load i32, i32* %sv_flags29, align 4
  %or = or i32 %54, 67371008
  store i32 %or, i32* %sv_flags29, align 4
  %55 = load i8, i8* @PL_tainting, align 1
  %tobool = icmp ne i8 %55, 0
  br i1 %tobool, label %if.then.30, label %if.end.37

if.then.30:                                       ; preds = %if.end
  %56 = load i8, i8* @PL_tainted, align 1
  %tobool31 = icmp ne i8 %56, 0
  br i1 %tobool31, label %if.then.32, label %if.end.36

if.then.32:                                       ; preds = %if.then.30
  %57 = load i8, i8* @PL_tainting, align 1
  %tobool33 = icmp ne i8 %57, 0
  br i1 %tobool33, label %if.then.34, label %if.end.35

if.then.34:                                       ; preds = %if.then.32
  %58 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  call void @Perl_sv_taint(%struct.sv* %58)
  br label %if.end.35

if.end.35:                                        ; preds = %if.then.34, %if.then.32
  br label %if.end.36

if.end.36:                                        ; preds = %if.end.35, %if.then.30
  br label %if.end.37

if.end.37:                                        ; preds = %if.end.36, %if.end
  ret void
}

; Function Attrs: nounwind uwtable
define void @Perl_sv_catpvn_mg(%struct.sv* %sv, i8* %ptr, i64 %len) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %ptr.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %1 = load i8*, i8** %ptr.addr, align 8
  %2 = load i64, i64* %len.addr, align 8
  call void @Perl_sv_catpvn_flags(%struct.sv* %0, i8* %1, i64 %2, i32 2)
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 2
  %4 = load i32, i32* %sv_flags, align 4
  %and = and i32 %4, 16384
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i32 @Perl_mg_set(%struct.sv* %5)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define void @Perl_sv_catsv(%struct.sv* %dstr, %struct.sv* %sstr) #0 {
entry:
  %dstr.addr = alloca %struct.sv*, align 8
  %sstr.addr = alloca %struct.sv*, align 8
  store %struct.sv* %dstr, %struct.sv** %dstr.addr, align 8
  store %struct.sv* %sstr, %struct.sv** %sstr.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %1 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  call void @Perl_sv_catsv_flags(%struct.sv* %0, %struct.sv* %1, i32 2)
  ret void
}

; Function Attrs: nounwind uwtable
define void @Perl_sv_catsv_flags(%struct.sv* %dsv, %struct.sv* %ssv, i32 %flags) #0 {
entry:
  %dsv.addr = alloca %struct.sv*, align 8
  %ssv.addr = alloca %struct.sv*, align 8
  %flags.addr = alloca i32, align 4
  %spv = alloca i8*, align 8
  %slen = alloca i64, align 8
  %sutf8 = alloca i32, align 4
  %dutf8 = alloca i32, align 4
  %csv = alloca %struct.sv*, align 8
  store %struct.sv* %dsv, %struct.sv** %dsv.addr, align 8
  store %struct.sv* %ssv, %struct.sv** %ssv.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.sv*, %struct.sv** %ssv.addr, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %if.end.52

if.end:                                           ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** %ssv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and = and i32 %2, 262144
  %cmp = icmp eq i32 %and, 262144
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %3 = load %struct.sv*, %struct.sv** %ssv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 0
  %4 = load i8*, i8** %sv_any, align 8
  %5 = bitcast i8* %4 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %5, i32 0, i32 1
  %6 = load i64, i64* %xpv_cur, align 8
  store i64 %6, i64* %slen, align 8
  %7 = load %struct.sv*, %struct.sv** %ssv.addr, align 8
  %sv_any1 = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 0
  %8 = load i8*, i8** %sv_any1, align 8
  %9 = bitcast i8* %8 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %9, i32 0, i32 0
  %10 = load i8*, i8** %xpv_pv, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %11 = load %struct.sv*, %struct.sv** %ssv.addr, align 8
  %call = call i8* @Perl_sv_2pv_flags(%struct.sv* %11, i64* %slen, i32 2)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %10, %cond.true ], [ %call, %cond.false ]
  store i8* %cond, i8** %spv, align 8
  %tobool2 = icmp ne i8* %cond, null
  br i1 %tobool2, label %if.then.3, label %if.end.52

if.then.3:                                        ; preds = %cond.end
  %12 = load %struct.sv*, %struct.sv** %ssv.addr, align 8
  %sv_flags4 = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 2
  %13 = load i32, i32* %sv_flags4, align 4
  %and5 = and i32 %13, 536870912
  %tobool6 = icmp ne i32 %and5, 0
  br i1 %tobool6, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then.3
  %14 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %op_private = getelementptr inbounds %struct.cop, %struct.cop* %14, i32 0, i32 7
  %15 = load i8, i8* %op_private, align 1
  %conv = zext i8 %15 to i32
  %and7 = and i32 %conv, 8
  %tobool8 = icmp ne i32 %and7, 0
  %lnot = xor i1 %tobool8, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then.3
  %16 = phi i1 [ false, %if.then.3 ], [ %lnot, %land.rhs ]
  %land.ext = zext i1 %16 to i32
  store i32 %land.ext, i32* %sutf8, align 4
  %17 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  %sv_flags9 = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 2
  %18 = load i32, i32* %sv_flags9, align 4
  %and10 = and i32 %18, 8192
  %tobool11 = icmp ne i32 %and10, 0
  br i1 %tobool11, label %land.lhs.true, label %if.end.16

land.lhs.true:                                    ; preds = %land.end
  %19 = load i32, i32* %flags.addr, align 4
  %and12 = and i32 %19, 2
  %tobool13 = icmp ne i32 %and12, 0
  br i1 %tobool13, label %if.then.14, label %if.end.16

if.then.14:                                       ; preds = %land.lhs.true
  %20 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  %call15 = call i32 @Perl_mg_get(%struct.sv* %20)
  br label %if.end.16

if.end.16:                                        ; preds = %if.then.14, %land.lhs.true, %land.end
  %21 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  %sv_flags17 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 2
  %22 = load i32, i32* %sv_flags17, align 4
  %and18 = and i32 %22, 536870912
  %tobool19 = icmp ne i32 %and18, 0
  br i1 %tobool19, label %land.rhs.20, label %land.end.26

land.rhs.20:                                      ; preds = %if.end.16
  %23 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %op_private21 = getelementptr inbounds %struct.cop, %struct.cop* %23, i32 0, i32 7
  %24 = load i8, i8* %op_private21, align 1
  %conv22 = zext i8 %24 to i32
  %and23 = and i32 %conv22, 8
  %tobool24 = icmp ne i32 %and23, 0
  %lnot25 = xor i1 %tobool24, true
  br label %land.end.26

land.end.26:                                      ; preds = %land.rhs.20, %if.end.16
  %25 = phi i1 [ false, %if.end.16 ], [ %lnot25, %land.rhs.20 ]
  %land.ext27 = zext i1 %25 to i32
  store i32 %land.ext27, i32* %dutf8, align 4
  %26 = load i32, i32* %dutf8, align 4
  %27 = load i32, i32* %sutf8, align 4
  %cmp28 = icmp ne i32 %26, %27
  br i1 %cmp28, label %if.then.30, label %if.end.51

if.then.30:                                       ; preds = %land.end.26
  %28 = load i32, i32* %dutf8, align 4
  %tobool31 = icmp ne i32 %28, 0
  br i1 %tobool31, label %if.then.32, label %if.else

if.then.32:                                       ; preds = %if.then.30
  %29 = load i8*, i8** %spv, align 8
  %30 = load i64, i64* %slen, align 8
  %call33 = call %struct.sv* @Perl_newSVpvn(i8* %29, i64 %30)
  %call34 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call33)
  store %struct.sv* %call34, %struct.sv** %csv, align 8
  %31 = load %struct.sv*, %struct.sv** %csv, align 8
  %call35 = call i64 @Perl_sv_utf8_upgrade_flags(%struct.sv* %31, i32 2)
  %32 = load %struct.sv*, %struct.sv** %csv, align 8
  %sv_flags36 = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 2
  %33 = load i32, i32* %sv_flags36, align 4
  %and37 = and i32 %33, 262144
  %cmp38 = icmp eq i32 %and37, 262144
  br i1 %cmp38, label %cond.true.40, label %cond.false.45

cond.true.40:                                     ; preds = %if.then.32
  %34 = load %struct.sv*, %struct.sv** %csv, align 8
  %sv_any41 = getelementptr inbounds %struct.sv, %struct.sv* %34, i32 0, i32 0
  %35 = load i8*, i8** %sv_any41, align 8
  %36 = bitcast i8* %35 to %struct.xpv*
  %xpv_cur42 = getelementptr inbounds %struct.xpv, %struct.xpv* %36, i32 0, i32 1
  %37 = load i64, i64* %xpv_cur42, align 8
  store i64 %37, i64* %slen, align 8
  %38 = load %struct.sv*, %struct.sv** %csv, align 8
  %sv_any43 = getelementptr inbounds %struct.sv, %struct.sv* %38, i32 0, i32 0
  %39 = load i8*, i8** %sv_any43, align 8
  %40 = bitcast i8* %39 to %struct.xpv*
  %xpv_pv44 = getelementptr inbounds %struct.xpv, %struct.xpv* %40, i32 0, i32 0
  %41 = load i8*, i8** %xpv_pv44, align 8
  br label %cond.end.47

cond.false.45:                                    ; preds = %if.then.32
  %42 = load %struct.sv*, %struct.sv** %csv, align 8
  %call46 = call i8* @Perl_sv_2pv_flags(%struct.sv* %42, i64* %slen, i32 2)
  br label %cond.end.47

cond.end.47:                                      ; preds = %cond.false.45, %cond.true.40
  %cond48 = phi i8* [ %41, %cond.true.40 ], [ %call46, %cond.false.45 ]
  store i8* %cond48, i8** %spv, align 8
  br label %if.end.50

if.else:                                          ; preds = %if.then.30
  %43 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  %call49 = call i64 @Perl_sv_utf8_upgrade_flags(%struct.sv* %43, i32 0)
  br label %if.end.50

if.end.50:                                        ; preds = %if.else, %cond.end.47
  br label %if.end.51

if.end.51:                                        ; preds = %if.end.50, %land.end.26
  %44 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  %45 = load i8*, i8** %spv, align 8
  %46 = load i64, i64* %slen, align 8
  call void @Perl_sv_catpvn_flags(%struct.sv* %44, i8* %45, i64 %46, i32 0)
  br label %if.end.52

if.end.52:                                        ; preds = %if.then, %if.end.51, %cond.end
  ret void
}

; Function Attrs: nounwind uwtable
define %struct.sv* @Perl_newSVpvn(i8* %s, i64 %len) #0 {
entry:
  %s.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %sv = alloca %struct.sv*, align 8
  %tmp = alloca i32, align 4
  %tmp2 = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  %0 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  store %struct.sv* %1, %struct.sv** %sv, align 8
  %2 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 0
  %3 = load i8*, i8** %sv_any, align 8
  %4 = bitcast i8* %3 to %struct.sv*
  store %struct.sv* %4, %struct.sv** @PL_sv_root, align 8
  %5 = load i32, i32* @PL_sv_count, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* @PL_sv_count, align 4
  store i32 %inc, i32* %tmp
  %6 = load i32, i32* %tmp
  br label %if.end

if.else:                                          ; preds = %entry
  %call = call %struct.sv* @S_more_sv()
  store %struct.sv* %call, %struct.sv** %sv, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %7 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any1 = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 0
  store i8* null, i8** %sv_any1, align 8
  %8 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 1
  store i32 1, i32* %sv_refcnt, align 4
  %9 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 2
  store i32 0, i32* %sv_flags, align 4
  store i32 0, i32* %tmp2
  %10 = load i32, i32* %tmp2
  %11 = load %struct.sv*, %struct.sv** %sv, align 8
  %12 = load i8*, i8** %s.addr, align 8
  %13 = load i64, i64* %len.addr, align 8
  call void @Perl_sv_setpvn(%struct.sv* %11, i8* %12, i64 %13)
  %14 = load %struct.sv*, %struct.sv** %sv, align 8
  ret %struct.sv* %14
}

; Function Attrs: nounwind uwtable
define void @Perl_sv_catsv_mg(%struct.sv* %dsv, %struct.sv* %ssv) #0 {
entry:
  %dsv.addr = alloca %struct.sv*, align 8
  %ssv.addr = alloca %struct.sv*, align 8
  store %struct.sv* %dsv, %struct.sv** %dsv.addr, align 8
  store %struct.sv* %ssv, %struct.sv** %ssv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  %1 = load %struct.sv*, %struct.sv** %ssv.addr, align 8
  call void @Perl_sv_catsv_flags(%struct.sv* %0, %struct.sv* %1, i32 2)
  %2 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags, align 4
  %and = and i32 %3, 16384
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  %call = call i32 @Perl_mg_set(%struct.sv* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define void @Perl_sv_catpv(%struct.sv* %sv, i8* %ptr) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %ptr.addr = alloca i8*, align 8
  %len = alloca i64, align 8
  %tlen = alloca i64, align 8
  %junk = alloca i8*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %if.end.37

if.end:                                           ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and = and i32 %2, 10223616
  %cmp = icmp eq i32 %and, 262144
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 0
  %4 = load i8*, i8** %sv_any, align 8
  %5 = bitcast i8* %4 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %5, i32 0, i32 1
  %6 = load i64, i64* %xpv_cur, align 8
  store i64 %6, i64* %tlen, align 8
  %7 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any1 = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 0
  %8 = load i8*, i8** %sv_any1, align 8
  %9 = bitcast i8* %8 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %9, i32 0, i32 0
  %10 = load i8*, i8** %xpv_pv, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %11 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i8* @Perl_sv_pvn_force_flags(%struct.sv* %11, i64* %tlen, i32 2)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %10, %cond.true ], [ %call, %cond.false ]
  store i8* %cond, i8** %junk, align 8
  %12 = load i8*, i8** %ptr.addr, align 8
  %call2 = call i64 @strlen(i8* %12)
  store i64 %call2, i64* %len, align 8
  %13 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any3 = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 0
  %14 = load i8*, i8** %sv_any3, align 8
  %15 = bitcast i8* %14 to %struct.xpv*
  %xpv_len = getelementptr inbounds %struct.xpv, %struct.xpv* %15, i32 0, i32 2
  %16 = load i64, i64* %xpv_len, align 8
  %17 = load i64, i64* %tlen, align 8
  %18 = load i64, i64* %len, align 8
  %add = add i64 %17, %18
  %add4 = add i64 %add, 1
  %cmp5 = icmp ult i64 %16, %add4
  br i1 %cmp5, label %cond.true.6, label %cond.false.10

cond.true.6:                                      ; preds = %cond.end
  %19 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %20 = load i64, i64* %tlen, align 8
  %21 = load i64, i64* %len, align 8
  %add7 = add i64 %20, %21
  %add8 = add i64 %add7, 1
  %call9 = call i8* @Perl_sv_grow(%struct.sv* %19, i64 %add8)
  br label %cond.end.13

cond.false.10:                                    ; preds = %cond.end
  %22 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any11 = getelementptr inbounds %struct.sv, %struct.sv* %22, i32 0, i32 0
  %23 = load i8*, i8** %sv_any11, align 8
  %24 = bitcast i8* %23 to %struct.xpv*
  %xpv_pv12 = getelementptr inbounds %struct.xpv, %struct.xpv* %24, i32 0, i32 0
  %25 = load i8*, i8** %xpv_pv12, align 8
  br label %cond.end.13

cond.end.13:                                      ; preds = %cond.false.10, %cond.true.6
  %cond14 = phi i8* [ %call9, %cond.true.6 ], [ %25, %cond.false.10 ]
  %26 = load i8*, i8** %ptr.addr, align 8
  %27 = load i8*, i8** %junk, align 8
  %cmp15 = icmp eq i8* %26, %27
  br i1 %cmp15, label %if.then.16, label %if.end.19

if.then.16:                                       ; preds = %cond.end.13
  %28 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any17 = getelementptr inbounds %struct.sv, %struct.sv* %28, i32 0, i32 0
  %29 = load i8*, i8** %sv_any17, align 8
  %30 = bitcast i8* %29 to %struct.xpv*
  %xpv_pv18 = getelementptr inbounds %struct.xpv, %struct.xpv* %30, i32 0, i32 0
  %31 = load i8*, i8** %xpv_pv18, align 8
  store i8* %31, i8** %ptr.addr, align 8
  br label %if.end.19

if.end.19:                                        ; preds = %if.then.16, %cond.end.13
  %32 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any20 = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 0
  %33 = load i8*, i8** %sv_any20, align 8
  %34 = bitcast i8* %33 to %struct.xpv*
  %xpv_pv21 = getelementptr inbounds %struct.xpv, %struct.xpv* %34, i32 0, i32 0
  %35 = load i8*, i8** %xpv_pv21, align 8
  %36 = load i64, i64* %tlen, align 8
  %add.ptr = getelementptr inbounds i8, i8* %35, i64 %36
  %37 = load i8*, i8** %ptr.addr, align 8
  %38 = load i64, i64* %len, align 8
  %add22 = add i64 %38, 1
  %mul = mul i64 %add22, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %add.ptr, i8* %37, i64 %mul, i32 1, i1 false)
  %39 = load i64, i64* %len, align 8
  %40 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any23 = getelementptr inbounds %struct.sv, %struct.sv* %40, i32 0, i32 0
  %41 = load i8*, i8** %sv_any23, align 8
  %42 = bitcast i8* %41 to %struct.xpv*
  %xpv_cur24 = getelementptr inbounds %struct.xpv, %struct.xpv* %42, i32 0, i32 1
  %43 = load i64, i64* %xpv_cur24, align 8
  %add25 = add i64 %43, %39
  store i64 %add25, i64* %xpv_cur24, align 8
  %44 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags26 = getelementptr inbounds %struct.sv, %struct.sv* %44, i32 0, i32 2
  %45 = load i32, i32* %sv_flags26, align 4
  %and27 = and i32 %45, 1760624639
  store i32 %and27, i32* %sv_flags26, align 4
  %46 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags28 = getelementptr inbounds %struct.sv, %struct.sv* %46, i32 0, i32 2
  %47 = load i32, i32* %sv_flags28, align 4
  %or = or i32 %47, 67371008
  store i32 %or, i32* %sv_flags28, align 4
  %48 = load i8, i8* @PL_tainting, align 1
  %tobool29 = icmp ne i8 %48, 0
  br i1 %tobool29, label %if.then.30, label %if.end.37

if.then.30:                                       ; preds = %if.end.19
  %49 = load i8, i8* @PL_tainted, align 1
  %tobool31 = icmp ne i8 %49, 0
  br i1 %tobool31, label %if.then.32, label %if.end.36

if.then.32:                                       ; preds = %if.then.30
  %50 = load i8, i8* @PL_tainting, align 1
  %tobool33 = icmp ne i8 %50, 0
  br i1 %tobool33, label %if.then.34, label %if.end.35

if.then.34:                                       ; preds = %if.then.32
  %51 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_taint(%struct.sv* %51)
  br label %if.end.35

if.end.35:                                        ; preds = %if.then.34, %if.then.32
  br label %if.end.36

if.end.36:                                        ; preds = %if.end.35, %if.then.30
  br label %if.end.37

if.end.37:                                        ; preds = %if.then, %if.end.36, %if.end.19
  ret void
}

; Function Attrs: nounwind uwtable
define void @Perl_sv_catpv_mg(%struct.sv* %sv, i8* %ptr) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %ptr.addr = alloca i8*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %1 = load i8*, i8** %ptr.addr, align 8
  call void @Perl_sv_catpv(%struct.sv* %0, i8* %1)
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags, align 4
  %and = and i32 %3, 16384
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i32 @Perl_mg_set(%struct.sv* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal %struct.sv* @S_more_sv() #0 {
entry:
  %sv = alloca %struct.sv*, align 8
  %chunk = alloca i8*, align 8
  %tmp = alloca i32, align 4
  %0 = load i8*, i8** @PL_nice_chunk, align 8
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** @PL_nice_chunk, align 8
  %2 = load i32, i32* @PL_nice_chunk_size, align 4
  call void @Perl_sv_add_arena(i8* %1, i32 %2, i32 0)
  store i8* null, i8** @PL_nice_chunk, align 8
  store i32 0, i32* @PL_nice_chunk_size, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %call = call i8* @Perl_safesysmalloc(i64 4080)
  store i8* %call, i8** %chunk, align 8
  %3 = load i8*, i8** %chunk, align 8
  call void @Perl_sv_add_arena(i8* %3, i32 4080, i32 0)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %4 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  store %struct.sv* %4, %struct.sv** %sv, align 8
  %5 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 0
  %6 = load i8*, i8** %sv_any, align 8
  %7 = bitcast i8* %6 to %struct.sv*
  store %struct.sv* %7, %struct.sv** @PL_sv_root, align 8
  %8 = load i32, i32* @PL_sv_count, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* @PL_sv_count, align 4
  store i32 %inc, i32* %tmp
  %9 = load i32, i32* %tmp
  %10 = load %struct.sv*, %struct.sv** %sv, align 8
  ret %struct.sv* %10
}

; Function Attrs: nounwind uwtable
define %struct.magic* @Perl_sv_magicext(%struct.sv* %sv, %struct.sv* %obj, i32 %how, %struct.mgvtbl* %vtable, i8* %name, i32 %namlen) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %obj.addr = alloca %struct.sv*, align 8
  %how.addr = alloca i32, align 4
  %vtable.addr = alloca %struct.mgvtbl*, align 8
  %name.addr = alloca i8*, align 8
  %namlen.addr = alloca i32, align 4
  %mg = alloca %struct.magic*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store %struct.sv* %obj, %struct.sv** %obj.addr, align 8
  store i32 %how, i32* %how.addr, align 4
  store %struct.mgvtbl* %vtable, %struct.mgvtbl** %vtable.addr, align 8
  store i8* %name, i8** %name.addr, align 8
  store i32 %namlen, i32* %namlen.addr, align 4
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 255
  %cmp = icmp ult i32 %and, 7
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %3, 255
  %cmp3 = icmp uge i32 %and2, 7
  br i1 %cmp3, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.then
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call signext i8 @Perl_sv_upgrade(%struct.sv* %4, i32 7)
  %conv = sext i8 %call to i32
  %tobool = icmp ne i32 %conv, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.then
  %5 = phi i1 [ true, %if.then ], [ %tobool, %lor.rhs ]
  %lor.ext = zext i1 %5 to i32
  br label %if.end

if.end:                                           ; preds = %lor.end, %entry
  %call4 = call i8* @Perl_safesysmalloc(i64 48)
  %6 = bitcast i8* %call4 to %struct.magic*
  store %struct.magic* %6, %struct.magic** %mg, align 8
  %7 = load %struct.magic*, %struct.magic** %mg, align 8
  %8 = bitcast %struct.magic* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* %8, i8 0, i64 48, i32 1, i1 false)
  %9 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 0
  %10 = load i8*, i8** %sv_any, align 8
  %11 = bitcast i8* %10 to %struct.xpvmg*
  %xmg_magic = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %11, i32 0, i32 5
  %12 = load %struct.magic*, %struct.magic** %xmg_magic, align 8
  %13 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_moremagic = getelementptr inbounds %struct.magic, %struct.magic* %13, i32 0, i32 0
  store %struct.magic* %12, %struct.magic** %mg_moremagic, align 8
  %14 = load %struct.magic*, %struct.magic** %mg, align 8
  %15 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any5 = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 0
  %16 = load i8*, i8** %sv_any5, align 8
  %17 = bitcast i8* %16 to %struct.xpvmg*
  %xmg_magic6 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %17, i32 0, i32 5
  store %struct.magic* %14, %struct.magic** %xmg_magic6, align 8
  %18 = load %struct.sv*, %struct.sv** %obj.addr, align 8
  %tobool7 = icmp ne %struct.sv* %18, null
  br i1 %tobool7, label %lor.lhs.false, label %if.then.49

lor.lhs.false:                                    ; preds = %if.end
  %19 = load %struct.sv*, %struct.sv** %obj.addr, align 8
  %20 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %cmp8 = icmp eq %struct.sv* %19, %20
  br i1 %cmp8, label %if.then.49, label %lor.lhs.false.10

lor.lhs.false.10:                                 ; preds = %lor.lhs.false
  %21 = load i32, i32* %how.addr, align 4
  %cmp11 = icmp eq i32 %21, 35
  br i1 %cmp11, label %if.then.49, label %lor.lhs.false.13

lor.lhs.false.13:                                 ; preds = %lor.lhs.false.10
  %22 = load i32, i32* %how.addr, align 4
  %cmp14 = icmp eq i32 %22, 114
  br i1 %cmp14, label %if.then.49, label %lor.lhs.false.16

lor.lhs.false.16:                                 ; preds = %lor.lhs.false.13
  %23 = load %struct.sv*, %struct.sv** %obj.addr, align 8
  %sv_flags17 = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 2
  %24 = load i32, i32* %sv_flags17, align 4
  %and18 = and i32 %24, 255
  %cmp19 = icmp eq i32 %and18, 13
  br i1 %cmp19, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %lor.lhs.false.16
  %25 = load %struct.sv*, %struct.sv** %obj.addr, align 8
  %sv_any21 = getelementptr inbounds %struct.sv, %struct.sv* %25, i32 0, i32 0
  %26 = load i8*, i8** %sv_any21, align 8
  %27 = bitcast i8* %26 to %struct.xpvgv*
  %xgv_gp = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %27, i32 0, i32 7
  %28 = load %struct.gp*, %struct.gp** %xgv_gp, align 8
  %gp_sv = getelementptr inbounds %struct.gp, %struct.gp* %28, i32 0, i32 0
  %29 = load %struct.sv*, %struct.sv** %gp_sv, align 8
  %30 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %cmp22 = icmp eq %struct.sv* %29, %30
  br i1 %cmp22, label %if.then.49, label %lor.lhs.false.24

lor.lhs.false.24:                                 ; preds = %land.lhs.true
  %31 = load %struct.sv*, %struct.sv** %obj.addr, align 8
  %sv_any25 = getelementptr inbounds %struct.sv, %struct.sv* %31, i32 0, i32 0
  %32 = load i8*, i8** %sv_any25, align 8
  %33 = bitcast i8* %32 to %struct.xpvgv*
  %xgv_gp26 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %33, i32 0, i32 7
  %34 = load %struct.gp*, %struct.gp** %xgv_gp26, align 8
  %gp_hv = getelementptr inbounds %struct.gp, %struct.gp* %34, i32 0, i32 5
  %35 = load %struct.hv*, %struct.hv** %gp_hv, align 8
  %36 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %37 = bitcast %struct.sv* %36 to %struct.hv*
  %cmp27 = icmp eq %struct.hv* %35, %37
  br i1 %cmp27, label %if.then.49, label %lor.lhs.false.29

lor.lhs.false.29:                                 ; preds = %lor.lhs.false.24
  %38 = load %struct.sv*, %struct.sv** %obj.addr, align 8
  %sv_any30 = getelementptr inbounds %struct.sv, %struct.sv* %38, i32 0, i32 0
  %39 = load i8*, i8** %sv_any30, align 8
  %40 = bitcast i8* %39 to %struct.xpvgv*
  %xgv_gp31 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %40, i32 0, i32 7
  %41 = load %struct.gp*, %struct.gp** %xgv_gp31, align 8
  %gp_av = getelementptr inbounds %struct.gp, %struct.gp* %41, i32 0, i32 4
  %42 = load %struct.av*, %struct.av** %gp_av, align 8
  %43 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %44 = bitcast %struct.sv* %43 to %struct.av*
  %cmp32 = icmp eq %struct.av* %42, %44
  br i1 %cmp32, label %if.then.49, label %lor.lhs.false.34

lor.lhs.false.34:                                 ; preds = %lor.lhs.false.29
  %45 = load %struct.sv*, %struct.sv** %obj.addr, align 8
  %sv_any35 = getelementptr inbounds %struct.sv, %struct.sv* %45, i32 0, i32 0
  %46 = load i8*, i8** %sv_any35, align 8
  %47 = bitcast i8* %46 to %struct.xpvgv*
  %xgv_gp36 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %47, i32 0, i32 7
  %48 = load %struct.gp*, %struct.gp** %xgv_gp36, align 8
  %gp_cv = getelementptr inbounds %struct.gp, %struct.gp* %48, i32 0, i32 7
  %49 = load %struct.cv*, %struct.cv** %gp_cv, align 8
  %50 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %51 = bitcast %struct.sv* %50 to %struct.cv*
  %cmp37 = icmp eq %struct.cv* %49, %51
  br i1 %cmp37, label %if.then.49, label %lor.lhs.false.39

lor.lhs.false.39:                                 ; preds = %lor.lhs.false.34
  %52 = load %struct.sv*, %struct.sv** %obj.addr, align 8
  %sv_any40 = getelementptr inbounds %struct.sv, %struct.sv* %52, i32 0, i32 0
  %53 = load i8*, i8** %sv_any40, align 8
  %54 = bitcast i8* %53 to %struct.xpvgv*
  %xgv_gp41 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %54, i32 0, i32 7
  %55 = load %struct.gp*, %struct.gp** %xgv_gp41, align 8
  %gp_io = getelementptr inbounds %struct.gp, %struct.gp* %55, i32 0, i32 2
  %56 = load %struct.io*, %struct.io** %gp_io, align 8
  %57 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %58 = bitcast %struct.sv* %57 to %struct.io*
  %cmp42 = icmp eq %struct.io* %56, %58
  br i1 %cmp42, label %if.then.49, label %lor.lhs.false.44

lor.lhs.false.44:                                 ; preds = %lor.lhs.false.39
  %59 = load %struct.sv*, %struct.sv** %obj.addr, align 8
  %sv_any45 = getelementptr inbounds %struct.sv, %struct.sv* %59, i32 0, i32 0
  %60 = load i8*, i8** %sv_any45, align 8
  %61 = bitcast i8* %60 to %struct.xpvgv*
  %xgv_gp46 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %61, i32 0, i32 7
  %62 = load %struct.gp*, %struct.gp** %xgv_gp46, align 8
  %gp_form = getelementptr inbounds %struct.gp, %struct.gp* %62, i32 0, i32 3
  %63 = load %struct.cv*, %struct.cv** %gp_form, align 8
  %64 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %65 = bitcast %struct.sv* %64 to %struct.cv*
  %cmp47 = icmp eq %struct.cv* %63, %65
  br i1 %cmp47, label %if.then.49, label %if.else

if.then.49:                                       ; preds = %lor.lhs.false.44, %lor.lhs.false.39, %lor.lhs.false.34, %lor.lhs.false.29, %lor.lhs.false.24, %land.lhs.true, %lor.lhs.false.13, %lor.lhs.false.10, %lor.lhs.false, %if.end
  %66 = load %struct.sv*, %struct.sv** %obj.addr, align 8
  %67 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_obj = getelementptr inbounds %struct.magic, %struct.magic* %67, i32 0, i32 5
  store %struct.sv* %66, %struct.sv** %mg_obj, align 8
  br label %if.end.55

if.else:                                          ; preds = %lor.lhs.false.44, %lor.lhs.false.16
  %68 = load %struct.sv*, %struct.sv** %obj.addr, align 8
  store %struct.sv* %68, %struct.sv** @PL_Sv, align 8
  %69 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %tobool50 = icmp ne %struct.sv* %69, null
  br i1 %tobool50, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.else
  %70 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %70, i32 0, i32 1
  %71 = load i32, i32* %sv_refcnt, align 4
  %inc = add i32 %71, 1
  store i32 %inc, i32* %sv_refcnt, align 4
  %tobool51 = icmp ne i32 %inc, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.else
  %72 = phi i1 [ false, %if.else ], [ %tobool51, %land.rhs ]
  %land.ext = zext i1 %72 to i32
  %73 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %74 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_obj52 = getelementptr inbounds %struct.magic, %struct.magic* %74, i32 0, i32 5
  store %struct.sv* %73, %struct.sv** %mg_obj52, align 8
  %75 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_flags = getelementptr inbounds %struct.magic, %struct.magic* %75, i32 0, i32 4
  %76 = load i8, i8* %mg_flags, align 1
  %conv53 = zext i8 %76 to i32
  %or = or i32 %conv53, 2
  %conv54 = trunc i32 %or to i8
  store i8 %conv54, i8* %mg_flags, align 1
  br label %if.end.55

if.end.55:                                        ; preds = %land.end, %if.then.49
  %77 = load i32, i32* %how.addr, align 4
  %cmp56 = icmp eq i32 %77, 113
  br i1 %cmp56, label %land.lhs.true.58, label %if.end.94

land.lhs.true.58:                                 ; preds = %if.end.55
  %78 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags59 = getelementptr inbounds %struct.sv, %struct.sv* %78, i32 0, i32 2
  %79 = load i32, i32* %sv_flags59, align 4
  %and60 = and i32 %79, 255
  %cmp61 = icmp eq i32 %and60, 15
  br i1 %cmp61, label %land.lhs.true.63, label %if.end.94

land.lhs.true.63:                                 ; preds = %land.lhs.true.58
  %80 = load %struct.sv*, %struct.sv** %obj.addr, align 8
  %tobool64 = icmp ne %struct.sv* %80, null
  br i1 %tobool64, label %land.lhs.true.65, label %if.end.94

land.lhs.true.65:                                 ; preds = %land.lhs.true.63
  %81 = load %struct.sv*, %struct.sv** %obj.addr, align 8
  %sv_flags66 = getelementptr inbounds %struct.sv, %struct.sv* %81, i32 0, i32 2
  %82 = load i32, i32* %sv_flags66, align 4
  %and67 = and i32 %82, 524288
  %tobool68 = icmp ne i32 %and67, 0
  br i1 %tobool68, label %land.lhs.true.69, label %if.end.94

land.lhs.true.69:                                 ; preds = %land.lhs.true.65
  %83 = load %struct.sv*, %struct.sv** %obj.addr, align 8
  %sv_any70 = getelementptr inbounds %struct.sv, %struct.sv* %83, i32 0, i32 0
  %84 = load i8*, i8** %sv_any70, align 8
  %85 = bitcast i8* %84 to %struct.xrv*
  %xrv_rv = getelementptr inbounds %struct.xrv, %struct.xrv* %85, i32 0, i32 0
  %86 = load %struct.sv*, %struct.sv** %xrv_rv, align 8
  %tobool71 = icmp ne %struct.sv* %86, null
  br i1 %tobool71, label %land.lhs.true.72, label %cond.false

land.lhs.true.72:                                 ; preds = %land.lhs.true.69
  %87 = load %struct.sv*, %struct.sv** %obj.addr, align 8
  %sv_any73 = getelementptr inbounds %struct.sv, %struct.sv* %87, i32 0, i32 0
  %88 = load i8*, i8** %sv_any73, align 8
  %89 = bitcast i8* %88 to %struct.xrv*
  %xrv_rv74 = getelementptr inbounds %struct.xrv, %struct.xrv* %89, i32 0, i32 0
  %90 = load %struct.sv*, %struct.sv** %xrv_rv74, align 8
  %sv_flags75 = getelementptr inbounds %struct.sv, %struct.sv* %90, i32 0, i32 2
  %91 = load i32, i32* %sv_flags75, align 4
  %and76 = and i32 %91, 255
  %cmp77 = icmp eq i32 %and76, 13
  br i1 %cmp77, label %land.lhs.true.79, label %cond.false

land.lhs.true.79:                                 ; preds = %land.lhs.true.72
  %92 = load %struct.sv*, %struct.sv** %obj.addr, align 8
  %sv_any80 = getelementptr inbounds %struct.sv, %struct.sv* %92, i32 0, i32 0
  %93 = load i8*, i8** %sv_any80, align 8
  %94 = bitcast i8* %93 to %struct.xrv*
  %xrv_rv81 = getelementptr inbounds %struct.xrv, %struct.xrv* %94, i32 0, i32 0
  %95 = load %struct.sv*, %struct.sv** %xrv_rv81, align 8
  %sv_any82 = getelementptr inbounds %struct.sv, %struct.sv* %95, i32 0, i32 0
  %96 = load i8*, i8** %sv_any82, align 8
  %97 = bitcast i8* %96 to %struct.xpvgv*
  %xgv_gp83 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %97, i32 0, i32 7
  %98 = load %struct.gp*, %struct.gp** %xgv_gp83, align 8
  %tobool84 = icmp ne %struct.gp* %98, null
  br i1 %tobool84, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true.79
  %99 = load %struct.sv*, %struct.sv** %obj.addr, align 8
  %sv_any85 = getelementptr inbounds %struct.sv, %struct.sv* %99, i32 0, i32 0
  %100 = load i8*, i8** %sv_any85, align 8
  %101 = bitcast i8* %100 to %struct.xrv*
  %xrv_rv86 = getelementptr inbounds %struct.xrv, %struct.xrv* %101, i32 0, i32 0
  %102 = load %struct.sv*, %struct.sv** %xrv_rv86, align 8
  %sv_any87 = getelementptr inbounds %struct.sv, %struct.sv* %102, i32 0, i32 0
  %103 = load i8*, i8** %sv_any87, align 8
  %104 = bitcast i8* %103 to %struct.xpvgv*
  %xgv_gp88 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %104, i32 0, i32 7
  %105 = load %struct.gp*, %struct.gp** %xgv_gp88, align 8
  %gp_io89 = getelementptr inbounds %struct.gp, %struct.gp* %105, i32 0, i32 2
  %106 = load %struct.io*, %struct.io** %gp_io89, align 8
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true.79, %land.lhs.true.72, %land.lhs.true.69
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.io* [ %106, %cond.true ], [ null, %cond.false ]
  %107 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %108 = bitcast %struct.sv* %107 to %struct.io*
  %cmp90 = icmp eq %struct.io* %cond, %108
  br i1 %cmp90, label %if.then.92, label %if.end.94

if.then.92:                                       ; preds = %cond.end
  %109 = load %struct.sv*, %struct.sv** %obj.addr, align 8
  %call93 = call %struct.sv* @Perl_sv_rvweaken(%struct.sv* %109)
  br label %if.end.94

if.end.94:                                        ; preds = %if.then.92, %cond.end, %land.lhs.true.65, %land.lhs.true.63, %land.lhs.true.58, %if.end.55
  %110 = load i32, i32* %how.addr, align 4
  %conv95 = trunc i32 %110 to i8
  %111 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_type = getelementptr inbounds %struct.magic, %struct.magic* %111, i32 0, i32 3
  store i8 %conv95, i8* %mg_type, align 1
  %112 = load i32, i32* %namlen.addr, align 4
  %113 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_len = getelementptr inbounds %struct.magic, %struct.magic* %113, i32 0, i32 7
  store i32 %112, i32* %mg_len, align 4
  %114 = load i8*, i8** %name.addr, align 8
  %tobool96 = icmp ne i8* %114, null
  br i1 %tobool96, label %if.then.97, label %if.end.118

if.then.97:                                       ; preds = %if.end.94
  %115 = load i32, i32* %namlen.addr, align 4
  %cmp98 = icmp sgt i32 %115, 0
  br i1 %cmp98, label %if.then.100, label %if.else.102

if.then.100:                                      ; preds = %if.then.97
  %116 = load i8*, i8** %name.addr, align 8
  %117 = load i32, i32* %namlen.addr, align 4
  %call101 = call i8* @Perl_savepvn(i8* %116, i32 %117)
  %118 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_ptr = getelementptr inbounds %struct.magic, %struct.magic* %118, i32 0, i32 6
  store i8* %call101, i8** %mg_ptr, align 8
  br label %if.end.117

if.else.102:                                      ; preds = %if.then.97
  %119 = load i32, i32* %namlen.addr, align 4
  %cmp103 = icmp eq i32 %119, -2
  br i1 %cmp103, label %if.then.105, label %if.else.114

if.then.105:                                      ; preds = %if.else.102
  %120 = load i8*, i8** %name.addr, align 8
  %121 = bitcast i8* %120 to %struct.sv*
  store %struct.sv* %121, %struct.sv** @PL_Sv, align 8
  %122 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %tobool106 = icmp ne %struct.sv* %122, null
  br i1 %tobool106, label %land.rhs.107, label %land.end.111

land.rhs.107:                                     ; preds = %if.then.105
  %123 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_refcnt108 = getelementptr inbounds %struct.sv, %struct.sv* %123, i32 0, i32 1
  %124 = load i32, i32* %sv_refcnt108, align 4
  %inc109 = add i32 %124, 1
  store i32 %inc109, i32* %sv_refcnt108, align 4
  %tobool110 = icmp ne i32 %inc109, 0
  br label %land.end.111

land.end.111:                                     ; preds = %land.rhs.107, %if.then.105
  %125 = phi i1 [ false, %if.then.105 ], [ %tobool110, %land.rhs.107 ]
  %land.ext112 = zext i1 %125 to i32
  %126 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %127 = bitcast %struct.sv* %126 to i8*
  %128 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_ptr113 = getelementptr inbounds %struct.magic, %struct.magic* %128, i32 0, i32 6
  store i8* %127, i8** %mg_ptr113, align 8
  br label %if.end.116

if.else.114:                                      ; preds = %if.else.102
  %129 = load i8*, i8** %name.addr, align 8
  %130 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_ptr115 = getelementptr inbounds %struct.magic, %struct.magic* %130, i32 0, i32 6
  store i8* %129, i8** %mg_ptr115, align 8
  br label %if.end.116

if.end.116:                                       ; preds = %if.else.114, %land.end.111
  br label %if.end.117

if.end.117:                                       ; preds = %if.end.116, %if.then.100
  br label %if.end.118

if.end.118:                                       ; preds = %if.end.117, %if.end.94
  %131 = load %struct.mgvtbl*, %struct.mgvtbl** %vtable.addr, align 8
  %132 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_virtual = getelementptr inbounds %struct.magic, %struct.magic* %132, i32 0, i32 1
  store %struct.mgvtbl* %131, %struct.mgvtbl** %mg_virtual, align 8
  %133 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_mg_magical(%struct.sv* %133)
  %134 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags119 = getelementptr inbounds %struct.sv, %struct.sv* %134, i32 0, i32 2
  %135 = load i32, i32* %sv_flags119, align 4
  %and120 = and i32 %135, 8192
  %tobool121 = icmp ne i32 %and120, 0
  br i1 %tobool121, label %if.then.122, label %if.end.125

if.then.122:                                      ; preds = %if.end.118
  %136 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags123 = getelementptr inbounds %struct.sv, %struct.sv* %136, i32 0, i32 2
  %137 = load i32, i32* %sv_flags123, align 4
  %and124 = and i32 %137, -458753
  store i32 %and124, i32* %sv_flags123, align 4
  br label %if.end.125

if.end.125:                                       ; preds = %if.then.122, %if.end.118
  %138 = load %struct.magic*, %struct.magic** %mg, align 8
  ret %struct.magic* %138
}

; Function Attrs: nounwind uwtable
define %struct.sv* @Perl_sv_rvweaken(%struct.sv* %sv) #0 {
entry:
  %retval = alloca %struct.sv*, align 8
  %sv.addr = alloca %struct.sv*, align 8
  %tsv = alloca %struct.sv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 118423552
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  store %struct.sv* %2, %struct.sv** %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 2
  %4 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %4, 524288
  %tobool3 = icmp ne i32 %and2, 0
  br i1 %tobool3, label %if.else, label %if.then.4

if.then.4:                                        ; preds = %if.end
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.37, i32 0, i32 0))
  br label %if.end.28

if.else:                                          ; preds = %if.end
  %5 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags5 = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 2
  %6 = load i32, i32* %sv_flags5, align 4
  %and6 = and i32 %6, -2146959360
  %cmp = icmp eq i32 %and6, -2146959360
  br i1 %cmp, label %if.then.7, label %if.end.27

if.then.7:                                        ; preds = %if.else
  %7 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings = getelementptr inbounds %struct.cop, %struct.cop* %7, i32 0, i32 14
  %8 = load %struct.sv*, %struct.sv** %cop_warnings, align 8
  %cmp8 = icmp ne %struct.sv* %8, null
  br i1 %cmp8, label %land.lhs.true, label %lor.lhs.false.17

land.lhs.true:                                    ; preds = %if.then.7
  %9 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings9 = getelementptr inbounds %struct.cop, %struct.cop* %9, i32 0, i32 14
  %10 = load %struct.sv*, %struct.sv** %cop_warnings9, align 8
  %cmp10 = icmp ne %struct.sv* %10, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 2)
  br i1 %cmp10, label %land.lhs.true.11, label %lor.lhs.false.17

land.lhs.true.11:                                 ; preds = %land.lhs.true
  %11 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings12 = getelementptr inbounds %struct.cop, %struct.cop* %11, i32 0, i32 14
  %12 = load %struct.sv*, %struct.sv** %cop_warnings12, align 8
  %cmp13 = icmp eq %struct.sv* %12, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 1)
  br i1 %cmp13, label %if.then.25, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.11
  %13 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings14 = getelementptr inbounds %struct.cop, %struct.cop* %13, i32 0, i32 14
  %14 = load %struct.sv*, %struct.sv** %cop_warnings14, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 0
  %15 = load i8*, i8** %sv_any, align 8
  %16 = bitcast i8* %15 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %16, i32 0, i32 0
  %17 = load i8*, i8** %xpv_pv, align 8
  %arrayidx = getelementptr inbounds i8, i8* %17, i64 3
  %18 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %18 to i32
  %and15 = and i32 %conv, 1
  %tobool16 = icmp ne i32 %and15, 0
  br i1 %tobool16, label %if.then.25, label %lor.lhs.false.17

lor.lhs.false.17:                                 ; preds = %lor.lhs.false, %land.lhs.true, %if.then.7
  %19 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings18 = getelementptr inbounds %struct.cop, %struct.cop* %19, i32 0, i32 14
  %20 = load %struct.sv*, %struct.sv** %cop_warnings18, align 8
  %cmp19 = icmp eq %struct.sv* %20, null
  br i1 %cmp19, label %land.lhs.true.21, label %if.end.26

land.lhs.true.21:                                 ; preds = %lor.lhs.false.17
  %21 = load i8, i8* @PL_dowarn, align 1
  %conv22 = zext i8 %21 to i32
  %and23 = and i32 %conv22, 1
  %tobool24 = icmp ne i32 %and23, 0
  br i1 %tobool24, label %if.then.25, label %if.end.26

if.then.25:                                       ; preds = %land.lhs.true.21, %lor.lhs.false, %land.lhs.true.11
  call void (i32, i8*, ...) @Perl_warner(i32 12, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.38, i32 0, i32 0))
  br label %if.end.26

if.end.26:                                        ; preds = %if.then.25, %land.lhs.true.21, %lor.lhs.false.17
  %22 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  store %struct.sv* %22, %struct.sv** %retval
  br label %return

if.end.27:                                        ; preds = %if.else
  br label %if.end.28

if.end.28:                                        ; preds = %if.end.27, %if.then.4
  %23 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any29 = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 0
  %24 = load i8*, i8** %sv_any29, align 8
  %25 = bitcast i8* %24 to %struct.xrv*
  %xrv_rv = getelementptr inbounds %struct.xrv, %struct.xrv* %25, i32 0, i32 0
  %26 = load %struct.sv*, %struct.sv** %xrv_rv, align 8
  store %struct.sv* %26, %struct.sv** %tsv, align 8
  %27 = load %struct.sv*, %struct.sv** %tsv, align 8
  %28 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @S_sv_add_backref(%struct.sv* %27, %struct.sv* %28)
  %29 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags30 = getelementptr inbounds %struct.sv, %struct.sv* %29, i32 0, i32 2
  %30 = load i32, i32* %sv_flags30, align 4
  %or = or i32 %30, -2146959360
  store i32 %or, i32* %sv_flags30, align 4
  %31 = load %struct.sv*, %struct.sv** %tsv, align 8
  call void @Perl_sv_free(%struct.sv* %31)
  %32 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  store %struct.sv* %32, %struct.sv** %retval
  br label %return

return:                                           ; preds = %if.end.28, %if.end.26, %if.then
  %33 = load %struct.sv*, %struct.sv** %retval
  ret %struct.sv* %33
}

declare void @Perl_mg_magical(%struct.sv*) #1

; Function Attrs: nounwind uwtable
define i32 @Perl_sv_unmagic(%struct.sv* %sv, i32 %type) #0 {
entry:
  %retval = alloca i32, align 4
  %sv.addr = alloca %struct.sv*, align 8
  %type.addr = alloca i32, align 4
  %mg = alloca %struct.magic*, align 8
  %mgp = alloca %struct.magic**, align 8
  %vtbl = alloca %struct.mgvtbl*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i32 %type, i32* %type.addr, align 4
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 255
  %cmp = icmp ult i32 %and, 7
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 0
  %3 = load i8*, i8** %sv_any, align 8
  %4 = bitcast i8* %3 to %struct.xpvmg*
  %xmg_magic = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %4, i32 0, i32 5
  %5 = load %struct.magic*, %struct.magic** %xmg_magic, align 8
  %tobool = icmp ne %struct.magic* %5, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any1 = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 0
  %7 = load i8*, i8** %sv_any1, align 8
  %8 = bitcast i8* %7 to %struct.xpvmg*
  %xmg_magic2 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %8, i32 0, i32 5
  store %struct.magic** %xmg_magic2, %struct.magic*** %mgp, align 8
  %9 = load %struct.magic**, %struct.magic*** %mgp, align 8
  %10 = load %struct.magic*, %struct.magic** %9, align 8
  store %struct.magic* %10, %struct.magic** %mg, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %11 = load %struct.magic*, %struct.magic** %mg, align 8
  %tobool3 = icmp ne %struct.magic* %11, null
  br i1 %tobool3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_type = getelementptr inbounds %struct.magic, %struct.magic* %12, i32 0, i32 3
  %13 = load i8, i8* %mg_type, align 1
  %conv = sext i8 %13 to i32
  %14 = load i32, i32* %type.addr, align 4
  %cmp4 = icmp eq i32 %conv, %14
  br i1 %cmp4, label %if.then.6, label %if.else.47

if.then.6:                                        ; preds = %for.body
  %15 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_virtual = getelementptr inbounds %struct.magic, %struct.magic* %15, i32 0, i32 1
  %16 = load %struct.mgvtbl*, %struct.mgvtbl** %mg_virtual, align 8
  store %struct.mgvtbl* %16, %struct.mgvtbl** %vtbl, align 8
  %17 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_moremagic = getelementptr inbounds %struct.magic, %struct.magic* %17, i32 0, i32 0
  %18 = load %struct.magic*, %struct.magic** %mg_moremagic, align 8
  %19 = load %struct.magic**, %struct.magic*** %mgp, align 8
  store %struct.magic* %18, %struct.magic** %19, align 8
  %20 = load %struct.mgvtbl*, %struct.mgvtbl** %vtbl, align 8
  %tobool7 = icmp ne %struct.mgvtbl* %20, null
  br i1 %tobool7, label %land.lhs.true, label %if.end.11

land.lhs.true:                                    ; preds = %if.then.6
  %21 = load %struct.mgvtbl*, %struct.mgvtbl** %vtbl, align 8
  %svt_free = getelementptr inbounds %struct.mgvtbl, %struct.mgvtbl* %21, i32 0, i32 4
  %22 = load i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*)** %svt_free, align 8
  %tobool8 = icmp ne i32 (%struct.sv*, %struct.magic*)* %22, null
  br i1 %tobool8, label %if.then.9, label %if.end.11

if.then.9:                                        ; preds = %land.lhs.true
  %23 = load %struct.mgvtbl*, %struct.mgvtbl** %vtbl, align 8
  %svt_free10 = getelementptr inbounds %struct.mgvtbl, %struct.mgvtbl* %23, i32 0, i32 4
  %24 = load i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*)** %svt_free10, align 8
  %25 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %26 = load %struct.magic*, %struct.magic** %mg, align 8
  %call = call i32 %24(%struct.sv* %25, %struct.magic* %26)
  br label %if.end.11

if.end.11:                                        ; preds = %if.then.9, %land.lhs.true, %if.then.6
  %27 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_ptr = getelementptr inbounds %struct.magic, %struct.magic* %27, i32 0, i32 6
  %28 = load i8*, i8** %mg_ptr, align 8
  %tobool12 = icmp ne i8* %28, null
  br i1 %tobool12, label %land.lhs.true.13, label %if.end.41

land.lhs.true.13:                                 ; preds = %if.end.11
  %29 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_type14 = getelementptr inbounds %struct.magic, %struct.magic* %29, i32 0, i32 3
  %30 = load i8, i8* %mg_type14, align 1
  %conv15 = sext i8 %30 to i32
  %cmp16 = icmp ne i32 %conv15, 103
  br i1 %cmp16, label %if.then.18, label %if.end.41

if.then.18:                                       ; preds = %land.lhs.true.13
  %31 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_len = getelementptr inbounds %struct.magic, %struct.magic* %31, i32 0, i32 7
  %32 = load i32, i32* %mg_len, align 4
  %cmp19 = icmp sgt i32 %32, 0
  br i1 %cmp19, label %if.then.21, label %if.else

if.then.21:                                       ; preds = %if.then.18
  %33 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_ptr22 = getelementptr inbounds %struct.magic, %struct.magic* %33, i32 0, i32 6
  %34 = load i8*, i8** %mg_ptr22, align 8
  call void @Perl_safesysfree(i8* %34)
  br label %if.end.40

if.else:                                          ; preds = %if.then.18
  %35 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_len23 = getelementptr inbounds %struct.magic, %struct.magic* %35, i32 0, i32 7
  %36 = load i32, i32* %mg_len23, align 4
  %cmp24 = icmp eq i32 %36, -2
  br i1 %cmp24, label %if.then.26, label %if.else.28

if.then.26:                                       ; preds = %if.else
  %37 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_ptr27 = getelementptr inbounds %struct.magic, %struct.magic* %37, i32 0, i32 6
  %38 = load i8*, i8** %mg_ptr27, align 8
  %39 = bitcast i8* %38 to %struct.sv*
  call void @Perl_sv_free(%struct.sv* %39)
  br label %if.end.39

if.else.28:                                       ; preds = %if.else
  %40 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_type29 = getelementptr inbounds %struct.magic, %struct.magic* %40, i32 0, i32 3
  %41 = load i8, i8* %mg_type29, align 1
  %conv30 = sext i8 %41 to i32
  %cmp31 = icmp eq i32 %conv30, 119
  br i1 %cmp31, label %land.lhs.true.33, label %if.end.38

land.lhs.true.33:                                 ; preds = %if.else.28
  %42 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_ptr34 = getelementptr inbounds %struct.magic, %struct.magic* %42, i32 0, i32 6
  %43 = load i8*, i8** %mg_ptr34, align 8
  %tobool35 = icmp ne i8* %43, null
  br i1 %tobool35, label %if.then.36, label %if.end.38

if.then.36:                                       ; preds = %land.lhs.true.33
  %44 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_ptr37 = getelementptr inbounds %struct.magic, %struct.magic* %44, i32 0, i32 6
  %45 = load i8*, i8** %mg_ptr37, align 8
  call void @Perl_safesysfree(i8* %45)
  br label %if.end.38

if.end.38:                                        ; preds = %if.then.36, %land.lhs.true.33, %if.else.28
  br label %if.end.39

if.end.39:                                        ; preds = %if.end.38, %if.then.26
  br label %if.end.40

if.end.40:                                        ; preds = %if.end.39, %if.then.21
  br label %if.end.41

if.end.41:                                        ; preds = %if.end.40, %land.lhs.true.13, %if.end.11
  %46 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_flags = getelementptr inbounds %struct.magic, %struct.magic* %46, i32 0, i32 4
  %47 = load i8, i8* %mg_flags, align 1
  %conv42 = zext i8 %47 to i32
  %and43 = and i32 %conv42, 2
  %tobool44 = icmp ne i32 %and43, 0
  br i1 %tobool44, label %if.then.45, label %if.end.46

if.then.45:                                       ; preds = %if.end.41
  %48 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_obj = getelementptr inbounds %struct.magic, %struct.magic* %48, i32 0, i32 5
  %49 = load %struct.sv*, %struct.sv** %mg_obj, align 8
  call void @Perl_sv_free(%struct.sv* %49)
  br label %if.end.46

if.end.46:                                        ; preds = %if.then.45, %if.end.41
  %50 = load %struct.magic*, %struct.magic** %mg, align 8
  %51 = bitcast %struct.magic* %50 to i8*
  call void @Perl_safesysfree(i8* %51)
  br label %if.end.49

if.else.47:                                       ; preds = %for.body
  %52 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_moremagic48 = getelementptr inbounds %struct.magic, %struct.magic* %52, i32 0, i32 0
  store %struct.magic** %mg_moremagic48, %struct.magic*** %mgp, align 8
  br label %if.end.49

if.end.49:                                        ; preds = %if.else.47, %if.end.46
  br label %for.inc

for.inc:                                          ; preds = %if.end.49
  %53 = load %struct.magic**, %struct.magic*** %mgp, align 8
  %54 = load %struct.magic*, %struct.magic** %53, align 8
  store %struct.magic* %54, %struct.magic** %mg, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %55 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any50 = getelementptr inbounds %struct.sv, %struct.sv* %55, i32 0, i32 0
  %56 = load i8*, i8** %sv_any50, align 8
  %57 = bitcast i8* %56 to %struct.xpvmg*
  %xmg_magic51 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %57, i32 0, i32 5
  %58 = load %struct.magic*, %struct.magic** %xmg_magic51, align 8
  %tobool52 = icmp ne %struct.magic* %58, null
  br i1 %tobool52, label %if.end.59, label %if.then.53

if.then.53:                                       ; preds = %for.end
  %59 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags54 = getelementptr inbounds %struct.sv, %struct.sv* %59, i32 0, i32 2
  %60 = load i32, i32* %sv_flags54, align 4
  %and55 = and i32 %60, -57345
  store i32 %and55, i32* %sv_flags54, align 4
  %61 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags56 = getelementptr inbounds %struct.sv, %struct.sv* %61, i32 0, i32 2
  %62 = load i32, i32* %sv_flags56, align 4
  %and57 = and i32 %62, 100663296
  %shr = lshr i32 %and57, 8
  %63 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags58 = getelementptr inbounds %struct.sv, %struct.sv* %63, i32 0, i32 2
  %64 = load i32, i32* %sv_flags58, align 4
  %or = or i32 %64, %shr
  store i32 %or, i32* %sv_flags58, align 4
  br label %if.end.59

if.end.59:                                        ; preds = %if.then.53, %for.end
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.59, %if.then
  %65 = load i32, i32* %retval
  ret i32 %65
}

; Function Attrs: nounwind uwtable
define internal void @S_sv_add_backref(%struct.sv* %tsv, %struct.sv* %sv) #0 {
entry:
  %tsv.addr = alloca %struct.sv*, align 8
  %sv.addr = alloca %struct.sv*, align 8
  %av = alloca %struct.av*, align 8
  %mg = alloca %struct.magic*, align 8
  %i = alloca i32, align 4
  %svp = alloca %struct.sv**, align 8
  store %struct.sv* %tsv, %struct.sv** %tsv.addr, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %tsv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 57344
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %tsv.addr, align 8
  %call = call %struct.magic* @Perl_mg_find(%struct.sv* %2, i32 60)
  store %struct.magic* %call, %struct.magic** %mg, align 8
  %tobool1 = icmp ne %struct.magic* %call, null
  br i1 %tobool1, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %3 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_obj = getelementptr inbounds %struct.magic, %struct.magic* %3, i32 0, i32 5
  %4 = load %struct.sv*, %struct.sv** %mg_obj, align 8
  %5 = bitcast %struct.sv* %4 to %struct.av*
  store %struct.av* %5, %struct.av** %av, align 8
  br label %if.end

if.else:                                          ; preds = %land.lhs.true, %entry
  %call2 = call %struct.av* @Perl_newAV()
  store %struct.av* %call2, %struct.av** %av, align 8
  %6 = load %struct.sv*, %struct.sv** %tsv.addr, align 8
  %7 = load %struct.av*, %struct.av** %av, align 8
  %8 = bitcast %struct.av* %7 to %struct.sv*
  call void @Perl_sv_magic(%struct.sv* %6, %struct.sv* %8, i32 60, i8* null, i32 0)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %9 = load %struct.av*, %struct.av** %av, align 8
  %sv_any = getelementptr inbounds %struct.av, %struct.av* %9, i32 0, i32 0
  %10 = load %struct.xpvav*, %struct.xpvav** %sv_any, align 8
  %xav_fill = getelementptr inbounds %struct.xpvav, %struct.xpvav* %10, i32 0, i32 1
  %11 = load i64, i64* %xav_fill, align 8
  %12 = load %struct.av*, %struct.av** %av, align 8
  %sv_any3 = getelementptr inbounds %struct.av, %struct.av* %12, i32 0, i32 0
  %13 = load %struct.xpvav*, %struct.xpvav** %sv_any3, align 8
  %xav_max = getelementptr inbounds %struct.xpvav, %struct.xpvav* %13, i32 0, i32 2
  %14 = load i64, i64* %xav_max, align 8
  %cmp = icmp sge i64 %11, %14
  br i1 %cmp, label %if.then.4, label %if.end.18

if.then.4:                                        ; preds = %if.end
  %15 = load %struct.av*, %struct.av** %av, align 8
  %sv_any5 = getelementptr inbounds %struct.av, %struct.av* %15, i32 0, i32 0
  %16 = load %struct.xpvav*, %struct.xpvav** %sv_any5, align 8
  %xav_array = getelementptr inbounds %struct.xpvav, %struct.xpvav* %16, i32 0, i32 0
  %17 = load i8*, i8** %xav_array, align 8
  %18 = bitcast i8* %17 to %struct.sv**
  store %struct.sv** %18, %struct.sv*** %svp, align 8
  %19 = load %struct.av*, %struct.av** %av, align 8
  %sv_any6 = getelementptr inbounds %struct.av, %struct.av* %19, i32 0, i32 0
  %20 = load %struct.xpvav*, %struct.xpvav** %sv_any6, align 8
  %xav_fill7 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %20, i32 0, i32 1
  %21 = load i64, i64* %xav_fill7, align 8
  %conv = trunc i64 %21 to i32
  store i32 %conv, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.4
  %22 = load i32, i32* %i, align 4
  %cmp8 = icmp sge i32 %22, 0
  br i1 %cmp8, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %23 = load i32, i32* %i, align 4
  %idxprom = sext i32 %23 to i64
  %24 = load %struct.sv**, %struct.sv*** %svp, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %24, i64 %idxprom
  %25 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  %tobool10 = icmp ne %struct.sv* %25, null
  br i1 %tobool10, label %if.end.14, label %if.then.11

if.then.11:                                       ; preds = %for.body
  %26 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %27 = load i32, i32* %i, align 4
  %idxprom12 = sext i32 %27 to i64
  %28 = load %struct.sv**, %struct.sv*** %svp, align 8
  %arrayidx13 = getelementptr inbounds %struct.sv*, %struct.sv** %28, i64 %idxprom12
  store %struct.sv* %26, %struct.sv** %arrayidx13, align 8
  br label %return

if.end.14:                                        ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.14
  %29 = load i32, i32* %i, align 4
  %dec = add nsw i32 %29, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %30 = load %struct.av*, %struct.av** %av, align 8
  %31 = load %struct.av*, %struct.av** %av, align 8
  %sv_any15 = getelementptr inbounds %struct.av, %struct.av* %31, i32 0, i32 0
  %32 = load %struct.xpvav*, %struct.xpvav** %sv_any15, align 8
  %xav_fill16 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %32, i32 0, i32 1
  %33 = load i64, i64* %xav_fill16, align 8
  %add = add nsw i64 %33, 1
  %conv17 = trunc i64 %add to i32
  call void @Perl_av_extend(%struct.av* %30, i32 %conv17)
  br label %if.end.18

if.end.18:                                        ; preds = %for.end, %if.end
  %34 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %35 = load %struct.av*, %struct.av** %av, align 8
  %sv_any19 = getelementptr inbounds %struct.av, %struct.av* %35, i32 0, i32 0
  %36 = load %struct.xpvav*, %struct.xpvav** %sv_any19, align 8
  %xav_fill20 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %36, i32 0, i32 1
  %37 = load i64, i64* %xav_fill20, align 8
  %inc = add nsw i64 %37, 1
  store i64 %inc, i64* %xav_fill20, align 8
  %38 = load %struct.av*, %struct.av** %av, align 8
  %sv_any21 = getelementptr inbounds %struct.av, %struct.av* %38, i32 0, i32 0
  %39 = load %struct.xpvav*, %struct.xpvav** %sv_any21, align 8
  %xav_array22 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %39, i32 0, i32 0
  %40 = load i8*, i8** %xav_array22, align 8
  %41 = bitcast i8* %40 to %struct.sv**
  %arrayidx23 = getelementptr inbounds %struct.sv*, %struct.sv** %41, i64 %inc
  store %struct.sv* %34, %struct.sv** %arrayidx23, align 8
  br label %return

return:                                           ; preds = %if.end.18, %if.then.11
  ret void
}

; Function Attrs: nounwind uwtable
define void @Perl_sv_insert(%struct.sv* %bigstr, i64 %offset, i64 %len, i8* %little, i64 %littlelen) #0 {
entry:
  %bigstr.addr = alloca %struct.sv*, align 8
  %offset.addr = alloca i64, align 8
  %len.addr = alloca i64, align 8
  %little.addr = alloca i8*, align 8
  %littlelen.addr = alloca i64, align 8
  %big = alloca i8*, align 8
  %mid = alloca i8*, align 8
  %midend = alloca i8*, align 8
  %bigend = alloca i8*, align 8
  %i = alloca i32, align 4
  %curlen = alloca i64, align 8
  %tmp = alloca i64, align 8
  %tmp131 = alloca i64, align 8
  store %struct.sv* %bigstr, %struct.sv** %bigstr.addr, align 8
  store i64 %offset, i64* %offset.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  store i8* %little, i8** %little.addr, align 8
  store i64 %littlelen, i64* %littlelen.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.39, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and = and i32 %2, 10223616
  %cmp = icmp eq i32 %and, 262144
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %3 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 0
  %4 = load i8*, i8** %sv_any, align 8
  %5 = bitcast i8* %4 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %5, i32 0, i32 1
  %6 = load i64, i64* %xpv_cur, align 8
  store i64 %6, i64* %curlen, align 8
  %7 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  %sv_any1 = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 0
  %8 = load i8*, i8** %sv_any1, align 8
  %9 = bitcast i8* %8 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %9, i32 0, i32 0
  %10 = load i8*, i8** %xpv_pv, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %11 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  %call = call i8* @Perl_sv_pvn_force_flags(%struct.sv* %11, i64* %curlen, i32 2)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %10, %cond.true ], [ %call, %cond.false ]
  %12 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 2
  %13 = load i32, i32* %sv_flags2, align 4
  %and3 = and i32 %13, 1760624639
  store i32 %and3, i32* %sv_flags2, align 4
  %14 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  %sv_flags4 = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 2
  %15 = load i32, i32* %sv_flags4, align 4
  %or = or i32 %15, 67371008
  store i32 %or, i32* %sv_flags4, align 4
  %16 = load i64, i64* %offset.addr, align 8
  %17 = load i64, i64* %len.addr, align 8
  %add = add i64 %16, %17
  %18 = load i64, i64* %curlen, align 8
  %cmp5 = icmp ugt i64 %add, %18
  br i1 %cmp5, label %if.then.6, label %if.end.26

if.then.6:                                        ; preds = %cond.end
  %19 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  %sv_any7 = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 0
  %20 = load i8*, i8** %sv_any7, align 8
  %21 = bitcast i8* %20 to %struct.xpv*
  %xpv_len = getelementptr inbounds %struct.xpv, %struct.xpv* %21, i32 0, i32 2
  %22 = load i64, i64* %xpv_len, align 8
  %23 = load i64, i64* %offset.addr, align 8
  %24 = load i64, i64* %len.addr, align 8
  %add8 = add i64 %23, %24
  %add9 = add i64 %add8, 1
  %cmp10 = icmp ult i64 %22, %add9
  br i1 %cmp10, label %cond.true.11, label %cond.false.15

cond.true.11:                                     ; preds = %if.then.6
  %25 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  %26 = load i64, i64* %offset.addr, align 8
  %27 = load i64, i64* %len.addr, align 8
  %add12 = add i64 %26, %27
  %add13 = add i64 %add12, 1
  %call14 = call i8* @Perl_sv_grow(%struct.sv* %25, i64 %add13)
  br label %cond.end.18

cond.false.15:                                    ; preds = %if.then.6
  %28 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  %sv_any16 = getelementptr inbounds %struct.sv, %struct.sv* %28, i32 0, i32 0
  %29 = load i8*, i8** %sv_any16, align 8
  %30 = bitcast i8* %29 to %struct.xpv*
  %xpv_pv17 = getelementptr inbounds %struct.xpv, %struct.xpv* %30, i32 0, i32 0
  %31 = load i8*, i8** %xpv_pv17, align 8
  br label %cond.end.18

cond.end.18:                                      ; preds = %cond.false.15, %cond.true.11
  %cond19 = phi i8* [ %call14, %cond.true.11 ], [ %31, %cond.false.15 ]
  %32 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  %sv_any20 = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 0
  %33 = load i8*, i8** %sv_any20, align 8
  %34 = bitcast i8* %33 to %struct.xpv*
  %xpv_pv21 = getelementptr inbounds %struct.xpv, %struct.xpv* %34, i32 0, i32 0
  %35 = load i8*, i8** %xpv_pv21, align 8
  %36 = load i64, i64* %curlen, align 8
  %add.ptr = getelementptr inbounds i8, i8* %35, i64 %36
  %37 = load i64, i64* %offset.addr, align 8
  %38 = load i64, i64* %len.addr, align 8
  %add22 = add i64 %37, %38
  %39 = load i64, i64* %curlen, align 8
  %sub = sub i64 %add22, %39
  %mul = mul i64 %sub, 1
  call void @llvm.memset.p0i8.i64(i8* %add.ptr, i8 0, i64 %mul, i32 1, i1 false)
  %40 = load i64, i64* %offset.addr, align 8
  %41 = load i64, i64* %len.addr, align 8
  %add23 = add i64 %40, %41
  %42 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  %sv_any24 = getelementptr inbounds %struct.sv, %struct.sv* %42, i32 0, i32 0
  %43 = load i8*, i8** %sv_any24, align 8
  %44 = bitcast i8* %43 to %struct.xpv*
  %xpv_cur25 = getelementptr inbounds %struct.xpv, %struct.xpv* %44, i32 0, i32 1
  store i64 %add23, i64* %xpv_cur25, align 8
  store i64 %add23, i64* %tmp
  %45 = load i64, i64* %tmp
  br label %if.end.26

if.end.26:                                        ; preds = %cond.end.18, %cond.end
  %46 = load i8, i8* @PL_tainting, align 1
  %tobool27 = icmp ne i8 %46, 0
  br i1 %tobool27, label %if.then.28, label %if.end.35

if.then.28:                                       ; preds = %if.end.26
  %47 = load i8, i8* @PL_tainted, align 1
  %tobool29 = icmp ne i8 %47, 0
  br i1 %tobool29, label %if.then.30, label %if.end.34

if.then.30:                                       ; preds = %if.then.28
  %48 = load i8, i8* @PL_tainting, align 1
  %tobool31 = icmp ne i8 %48, 0
  br i1 %tobool31, label %if.then.32, label %if.end.33

if.then.32:                                       ; preds = %if.then.30
  %49 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  call void @Perl_sv_taint(%struct.sv* %49)
  br label %if.end.33

if.end.33:                                        ; preds = %if.then.32, %if.then.30
  br label %if.end.34

if.end.34:                                        ; preds = %if.end.33, %if.then.28
  br label %if.end.35

if.end.35:                                        ; preds = %if.end.34, %if.end.26
  %50 = load i64, i64* %littlelen.addr, align 8
  %51 = load i64, i64* %len.addr, align 8
  %sub36 = sub i64 %50, %51
  %conv = trunc i64 %sub36 to i32
  store i32 %conv, i32* %i, align 4
  %52 = load i32, i32* %i, align 4
  %cmp37 = icmp sgt i32 %52, 0
  br i1 %cmp37, label %if.then.39, label %if.else

if.then.39:                                       ; preds = %if.end.35
  %53 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  %sv_any40 = getelementptr inbounds %struct.sv, %struct.sv* %53, i32 0, i32 0
  %54 = load i8*, i8** %sv_any40, align 8
  %55 = bitcast i8* %54 to %struct.xpv*
  %xpv_len41 = getelementptr inbounds %struct.xpv, %struct.xpv* %55, i32 0, i32 2
  %56 = load i64, i64* %xpv_len41, align 8
  %57 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  %sv_any42 = getelementptr inbounds %struct.sv, %struct.sv* %57, i32 0, i32 0
  %58 = load i8*, i8** %sv_any42, align 8
  %59 = bitcast i8* %58 to %struct.xpv*
  %xpv_cur43 = getelementptr inbounds %struct.xpv, %struct.xpv* %59, i32 0, i32 1
  %60 = load i64, i64* %xpv_cur43, align 8
  %61 = load i32, i32* %i, align 4
  %conv44 = sext i32 %61 to i64
  %add45 = add i64 %60, %conv44
  %add46 = add i64 %add45, 1
  %cmp47 = icmp ult i64 %56, %add46
  br i1 %cmp47, label %cond.true.49, label %cond.false.56

cond.true.49:                                     ; preds = %if.then.39
  %62 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  %63 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  %sv_any50 = getelementptr inbounds %struct.sv, %struct.sv* %63, i32 0, i32 0
  %64 = load i8*, i8** %sv_any50, align 8
  %65 = bitcast i8* %64 to %struct.xpv*
  %xpv_cur51 = getelementptr inbounds %struct.xpv, %struct.xpv* %65, i32 0, i32 1
  %66 = load i64, i64* %xpv_cur51, align 8
  %67 = load i32, i32* %i, align 4
  %conv52 = sext i32 %67 to i64
  %add53 = add i64 %66, %conv52
  %add54 = add i64 %add53, 1
  %call55 = call i8* @Perl_sv_grow(%struct.sv* %62, i64 %add54)
  br label %cond.end.59

cond.false.56:                                    ; preds = %if.then.39
  %68 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  %sv_any57 = getelementptr inbounds %struct.sv, %struct.sv* %68, i32 0, i32 0
  %69 = load i8*, i8** %sv_any57, align 8
  %70 = bitcast i8* %69 to %struct.xpv*
  %xpv_pv58 = getelementptr inbounds %struct.xpv, %struct.xpv* %70, i32 0, i32 0
  %71 = load i8*, i8** %xpv_pv58, align 8
  br label %cond.end.59

cond.end.59:                                      ; preds = %cond.false.56, %cond.true.49
  %cond60 = phi i8* [ %call55, %cond.true.49 ], [ %71, %cond.false.56 ]
  store i8* %cond60, i8** %big, align 8
  %72 = load i8*, i8** %big, align 8
  %73 = load i64, i64* %offset.addr, align 8
  %add.ptr61 = getelementptr inbounds i8, i8* %72, i64 %73
  %74 = load i64, i64* %len.addr, align 8
  %add.ptr62 = getelementptr inbounds i8, i8* %add.ptr61, i64 %74
  store i8* %add.ptr62, i8** %mid, align 8
  %75 = load i8*, i8** %big, align 8
  %76 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  %sv_any63 = getelementptr inbounds %struct.sv, %struct.sv* %76, i32 0, i32 0
  %77 = load i8*, i8** %sv_any63, align 8
  %78 = bitcast i8* %77 to %struct.xpv*
  %xpv_cur64 = getelementptr inbounds %struct.xpv, %struct.xpv* %78, i32 0, i32 1
  %79 = load i64, i64* %xpv_cur64, align 8
  %add.ptr65 = getelementptr inbounds i8, i8* %75, i64 %79
  store i8* %add.ptr65, i8** %bigend, align 8
  store i8* %add.ptr65, i8** %midend, align 8
  %80 = load i32, i32* %i, align 4
  %81 = load i8*, i8** %bigend, align 8
  %idx.ext = sext i32 %80 to i64
  %add.ptr66 = getelementptr inbounds i8, i8* %81, i64 %idx.ext
  store i8* %add.ptr66, i8** %bigend, align 8
  %82 = load i8*, i8** %bigend, align 8
  store i8 0, i8* %82, align 1
  br label %while.cond

while.cond:                                       ; preds = %while.body, %cond.end.59
  %83 = load i8*, i8** %midend, align 8
  %84 = load i8*, i8** %mid, align 8
  %cmp67 = icmp ugt i8* %83, %84
  br i1 %cmp67, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %85 = load i8*, i8** %midend, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %85, i32 -1
  store i8* %incdec.ptr, i8** %midend, align 8
  %86 = load i8, i8* %incdec.ptr, align 1
  %87 = load i8*, i8** %bigend, align 8
  %incdec.ptr69 = getelementptr inbounds i8, i8* %87, i32 -1
  store i8* %incdec.ptr69, i8** %bigend, align 8
  store i8 %86, i8* %incdec.ptr69, align 1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %88 = load i8*, i8** %big, align 8
  %89 = load i64, i64* %offset.addr, align 8
  %add.ptr70 = getelementptr inbounds i8, i8* %88, i64 %89
  %90 = load i8*, i8** %little.addr, align 8
  %91 = load i64, i64* %littlelen.addr, align 8
  %mul71 = mul i64 %91, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %add.ptr70, i8* %90, i64 %mul71, i32 1, i1 false)
  %92 = load i32, i32* %i, align 4
  %conv72 = sext i32 %92 to i64
  %93 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  %sv_any73 = getelementptr inbounds %struct.sv, %struct.sv* %93, i32 0, i32 0
  %94 = load i8*, i8** %sv_any73, align 8
  %95 = bitcast i8* %94 to %struct.xpv*
  %xpv_cur74 = getelementptr inbounds %struct.xpv, %struct.xpv* %95, i32 0, i32 1
  %96 = load i64, i64* %xpv_cur74, align 8
  %add75 = add i64 %96, %conv72
  store i64 %add75, i64* %xpv_cur74, align 8
  %97 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  %sv_flags76 = getelementptr inbounds %struct.sv, %struct.sv* %97, i32 0, i32 2
  %98 = load i32, i32* %sv_flags76, align 4
  %and77 = and i32 %98, 16384
  %tobool78 = icmp ne i32 %and77, 0
  br i1 %tobool78, label %if.then.79, label %if.end.81

if.then.79:                                       ; preds = %while.end
  %99 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  %call80 = call i32 @Perl_mg_set(%struct.sv* %99)
  br label %if.end.81

if.end.81:                                        ; preds = %if.then.79, %while.end
  br label %if.end.175

if.else:                                          ; preds = %if.end.35
  %100 = load i32, i32* %i, align 4
  %cmp82 = icmp eq i32 %100, 0
  br i1 %cmp82, label %if.then.84, label %if.end.95

if.then.84:                                       ; preds = %if.else
  %101 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  %sv_any85 = getelementptr inbounds %struct.sv, %struct.sv* %101, i32 0, i32 0
  %102 = load i8*, i8** %sv_any85, align 8
  %103 = bitcast i8* %102 to %struct.xpv*
  %xpv_pv86 = getelementptr inbounds %struct.xpv, %struct.xpv* %103, i32 0, i32 0
  %104 = load i8*, i8** %xpv_pv86, align 8
  %105 = load i64, i64* %offset.addr, align 8
  %add.ptr87 = getelementptr inbounds i8, i8* %104, i64 %105
  %106 = load i8*, i8** %little.addr, align 8
  %107 = load i64, i64* %len.addr, align 8
  %mul88 = mul i64 %107, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %add.ptr87, i8* %106, i64 %mul88, i32 1, i1 false)
  %108 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  %sv_flags89 = getelementptr inbounds %struct.sv, %struct.sv* %108, i32 0, i32 2
  %109 = load i32, i32* %sv_flags89, align 4
  %and90 = and i32 %109, 16384
  %tobool91 = icmp ne i32 %and90, 0
  br i1 %tobool91, label %if.then.92, label %if.end.94

if.then.92:                                       ; preds = %if.then.84
  %110 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  %call93 = call i32 @Perl_mg_set(%struct.sv* %110)
  br label %if.end.94

if.end.94:                                        ; preds = %if.then.92, %if.then.84
  br label %if.end.175

if.end.95:                                        ; preds = %if.else
  br label %if.end.96

if.end.96:                                        ; preds = %if.end.95
  %111 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  %sv_any97 = getelementptr inbounds %struct.sv, %struct.sv* %111, i32 0, i32 0
  %112 = load i8*, i8** %sv_any97, align 8
  %113 = bitcast i8* %112 to %struct.xpv*
  %xpv_pv98 = getelementptr inbounds %struct.xpv, %struct.xpv* %113, i32 0, i32 0
  %114 = load i8*, i8** %xpv_pv98, align 8
  store i8* %114, i8** %big, align 8
  %115 = load i8*, i8** %big, align 8
  %116 = load i64, i64* %offset.addr, align 8
  %add.ptr99 = getelementptr inbounds i8, i8* %115, i64 %116
  store i8* %add.ptr99, i8** %mid, align 8
  %117 = load i8*, i8** %mid, align 8
  %118 = load i64, i64* %len.addr, align 8
  %add.ptr100 = getelementptr inbounds i8, i8* %117, i64 %118
  store i8* %add.ptr100, i8** %midend, align 8
  %119 = load i8*, i8** %big, align 8
  %120 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  %sv_any101 = getelementptr inbounds %struct.sv, %struct.sv* %120, i32 0, i32 0
  %121 = load i8*, i8** %sv_any101, align 8
  %122 = bitcast i8* %121 to %struct.xpv*
  %xpv_cur102 = getelementptr inbounds %struct.xpv, %struct.xpv* %122, i32 0, i32 1
  %123 = load i64, i64* %xpv_cur102, align 8
  %add.ptr103 = getelementptr inbounds i8, i8* %119, i64 %123
  store i8* %add.ptr103, i8** %bigend, align 8
  %124 = load i8*, i8** %midend, align 8
  %125 = load i8*, i8** %bigend, align 8
  %cmp104 = icmp ugt i8* %124, %125
  br i1 %cmp104, label %if.then.106, label %if.end.107

if.then.106:                                      ; preds = %if.end.96
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.40, i32 0, i32 0))
  br label %if.end.107

if.end.107:                                       ; preds = %if.then.106, %if.end.96
  %126 = load i8*, i8** %mid, align 8
  %127 = load i8*, i8** %big, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %126 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %127 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %128 = load i8*, i8** %bigend, align 8
  %129 = load i8*, i8** %midend, align 8
  %sub.ptr.lhs.cast108 = ptrtoint i8* %128 to i64
  %sub.ptr.rhs.cast109 = ptrtoint i8* %129 to i64
  %sub.ptr.sub110 = sub i64 %sub.ptr.lhs.cast108, %sub.ptr.rhs.cast109
  %cmp111 = icmp sgt i64 %sub.ptr.sub, %sub.ptr.sub110
  br i1 %cmp111, label %if.then.113, label %if.else.137

if.then.113:                                      ; preds = %if.end.107
  %130 = load i64, i64* %littlelen.addr, align 8
  %tobool114 = icmp ne i64 %130, 0
  br i1 %tobool114, label %if.then.115, label %if.end.118

if.then.115:                                      ; preds = %if.then.113
  %131 = load i8*, i8** %mid, align 8
  %132 = load i8*, i8** %little.addr, align 8
  %133 = load i64, i64* %littlelen.addr, align 8
  %mul116 = mul i64 %133, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %131, i8* %132, i64 %mul116, i32 1, i1 false)
  %134 = load i64, i64* %littlelen.addr, align 8
  %135 = load i8*, i8** %mid, align 8
  %add.ptr117 = getelementptr inbounds i8, i8* %135, i64 %134
  store i8* %add.ptr117, i8** %mid, align 8
  br label %if.end.118

if.end.118:                                       ; preds = %if.then.115, %if.then.113
  %136 = load i8*, i8** %bigend, align 8
  %137 = load i8*, i8** %midend, align 8
  %sub.ptr.lhs.cast119 = ptrtoint i8* %136 to i64
  %sub.ptr.rhs.cast120 = ptrtoint i8* %137 to i64
  %sub.ptr.sub121 = sub i64 %sub.ptr.lhs.cast119, %sub.ptr.rhs.cast120
  %conv122 = trunc i64 %sub.ptr.sub121 to i32
  store i32 %conv122, i32* %i, align 4
  %138 = load i32, i32* %i, align 4
  %cmp123 = icmp sgt i32 %138, 0
  br i1 %cmp123, label %if.then.125, label %if.end.130

if.then.125:                                      ; preds = %if.end.118
  %139 = load i8*, i8** %mid, align 8
  %140 = load i8*, i8** %midend, align 8
  %141 = load i32, i32* %i, align 4
  %conv126 = sext i32 %141 to i64
  %mul127 = mul i64 %conv126, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %139, i8* %140, i64 %mul127, i32 1, i1 false)
  %142 = load i32, i32* %i, align 4
  %143 = load i8*, i8** %mid, align 8
  %idx.ext128 = sext i32 %142 to i64
  %add.ptr129 = getelementptr inbounds i8, i8* %143, i64 %idx.ext128
  store i8* %add.ptr129, i8** %mid, align 8
  br label %if.end.130

if.end.130:                                       ; preds = %if.then.125, %if.end.118
  %144 = load i8*, i8** %mid, align 8
  store i8 0, i8* %144, align 1
  %145 = load i8*, i8** %mid, align 8
  %146 = load i8*, i8** %big, align 8
  %sub.ptr.lhs.cast132 = ptrtoint i8* %145 to i64
  %sub.ptr.rhs.cast133 = ptrtoint i8* %146 to i64
  %sub.ptr.sub134 = sub i64 %sub.ptr.lhs.cast132, %sub.ptr.rhs.cast133
  %147 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  %sv_any135 = getelementptr inbounds %struct.sv, %struct.sv* %147, i32 0, i32 0
  %148 = load i8*, i8** %sv_any135, align 8
  %149 = bitcast i8* %148 to %struct.xpv*
  %xpv_cur136 = getelementptr inbounds %struct.xpv, %struct.xpv* %149, i32 0, i32 1
  store i64 %sub.ptr.sub134, i64* %xpv_cur136, align 8
  store i64 %sub.ptr.sub134, i64* %tmp131
  %150 = load i64, i64* %tmp131
  br label %if.end.169

if.else.137:                                      ; preds = %if.end.107
  %151 = load i8*, i8** %mid, align 8
  %152 = load i8*, i8** %big, align 8
  %sub.ptr.lhs.cast138 = ptrtoint i8* %151 to i64
  %sub.ptr.rhs.cast139 = ptrtoint i8* %152 to i64
  %sub.ptr.sub140 = sub i64 %sub.ptr.lhs.cast138, %sub.ptr.rhs.cast139
  %conv141 = trunc i64 %sub.ptr.sub140 to i32
  store i32 %conv141, i32* %i, align 4
  %tobool142 = icmp ne i32 %conv141, 0
  br i1 %tobool142, label %if.then.143, label %if.else.160

if.then.143:                                      ; preds = %if.else.137
  %153 = load i64, i64* %littlelen.addr, align 8
  %154 = load i8*, i8** %midend, align 8
  %idx.neg = sub i64 0, %153
  %add.ptr144 = getelementptr inbounds i8, i8* %154, i64 %idx.neg
  store i8* %add.ptr144, i8** %midend, align 8
  %155 = load i8*, i8** %midend, align 8
  store i8* %155, i8** %mid, align 8
  %156 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  %157 = load i8*, i8** %midend, align 8
  %158 = load i32, i32* %i, align 4
  %idx.ext145 = sext i32 %158 to i64
  %idx.neg146 = sub i64 0, %idx.ext145
  %add.ptr147 = getelementptr inbounds i8, i8* %157, i64 %idx.neg146
  call void @Perl_sv_chop(%struct.sv* %156, i8* %add.ptr147)
  %159 = load i32, i32* %i, align 4
  %160 = load i8*, i8** %big, align 8
  %idx.ext148 = sext i32 %159 to i64
  %add.ptr149 = getelementptr inbounds i8, i8* %160, i64 %idx.ext148
  store i8* %add.ptr149, i8** %big, align 8
  br label %while.cond.150

while.cond.150:                                   ; preds = %while.body.152, %if.then.143
  %161 = load i32, i32* %i, align 4
  %dec = add nsw i32 %161, -1
  store i32 %dec, i32* %i, align 4
  %tobool151 = icmp ne i32 %161, 0
  br i1 %tobool151, label %while.body.152, label %while.end.155

while.body.152:                                   ; preds = %while.cond.150
  %162 = load i8*, i8** %big, align 8
  %incdec.ptr153 = getelementptr inbounds i8, i8* %162, i32 -1
  store i8* %incdec.ptr153, i8** %big, align 8
  %163 = load i8, i8* %incdec.ptr153, align 1
  %164 = load i8*, i8** %midend, align 8
  %incdec.ptr154 = getelementptr inbounds i8, i8* %164, i32 -1
  store i8* %incdec.ptr154, i8** %midend, align 8
  store i8 %163, i8* %incdec.ptr154, align 1
  br label %while.cond.150

while.end.155:                                    ; preds = %while.cond.150
  %165 = load i64, i64* %littlelen.addr, align 8
  %tobool156 = icmp ne i64 %165, 0
  br i1 %tobool156, label %if.then.157, label %if.end.159

if.then.157:                                      ; preds = %while.end.155
  %166 = load i8*, i8** %mid, align 8
  %167 = load i8*, i8** %little.addr, align 8
  %168 = load i64, i64* %littlelen.addr, align 8
  %mul158 = mul i64 %168, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %166, i8* %167, i64 %mul158, i32 1, i1 false)
  br label %if.end.159

if.end.159:                                       ; preds = %if.then.157, %while.end.155
  br label %if.end.168

if.else.160:                                      ; preds = %if.else.137
  %169 = load i64, i64* %littlelen.addr, align 8
  %tobool161 = icmp ne i64 %169, 0
  br i1 %tobool161, label %if.then.162, label %if.else.166

if.then.162:                                      ; preds = %if.else.160
  %170 = load i64, i64* %littlelen.addr, align 8
  %171 = load i8*, i8** %midend, align 8
  %idx.neg163 = sub i64 0, %170
  %add.ptr164 = getelementptr inbounds i8, i8* %171, i64 %idx.neg163
  store i8* %add.ptr164, i8** %midend, align 8
  %172 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  %173 = load i8*, i8** %midend, align 8
  call void @Perl_sv_chop(%struct.sv* %172, i8* %173)
  %174 = load i8*, i8** %midend, align 8
  %175 = load i8*, i8** %little.addr, align 8
  %176 = load i64, i64* %littlelen.addr, align 8
  %mul165 = mul i64 %176, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %174, i8* %175, i64 %mul165, i32 1, i1 false)
  br label %if.end.167

if.else.166:                                      ; preds = %if.else.160
  %177 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  %178 = load i8*, i8** %midend, align 8
  call void @Perl_sv_chop(%struct.sv* %177, i8* %178)
  br label %if.end.167

if.end.167:                                       ; preds = %if.else.166, %if.then.162
  br label %if.end.168

if.end.168:                                       ; preds = %if.end.167, %if.end.159
  br label %if.end.169

if.end.169:                                       ; preds = %if.end.168, %if.end.130
  %179 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  %sv_flags170 = getelementptr inbounds %struct.sv, %struct.sv* %179, i32 0, i32 2
  %180 = load i32, i32* %sv_flags170, align 4
  %and171 = and i32 %180, 16384
  %tobool172 = icmp ne i32 %and171, 0
  br i1 %tobool172, label %if.then.173, label %if.end.175

if.then.173:                                      ; preds = %if.end.169
  %181 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  %call174 = call i32 @Perl_mg_set(%struct.sv* %181)
  br label %if.end.175

if.end.175:                                       ; preds = %if.end.81, %if.end.94, %if.then.173, %if.end.169
  ret void
}

; Function Attrs: nounwind uwtable
define void @Perl_sv_replace(%struct.sv* %sv, %struct.sv* %nsv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %nsv.addr = alloca %struct.sv*, align 8
  %refcnt = alloca i32, align 4
  %tmp = alloca i32, align 4
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store %struct.sv* %nsv, %struct.sv** %nsv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 1
  %1 = load i32, i32* %sv_refcnt, align 4
  store i32 %1, i32* %refcnt, align 4
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags, align 4
  %and = and i32 %3, 9961472
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_force_normal(%struct.sv* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.sv*, %struct.sv** %nsv.addr, align 8
  %sv_refcnt1 = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 1
  %6 = load i32, i32* %sv_refcnt1, align 4
  %cmp = icmp ne i32 %6, 1
  br i1 %cmp, label %land.lhs.true, label %if.end.13

land.lhs.true:                                    ; preds = %if.end
  %7 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings = getelementptr inbounds %struct.cop, %struct.cop* %7, i32 0, i32 14
  %8 = load %struct.sv*, %struct.sv** %cop_warnings, align 8
  %cmp2 = icmp eq %struct.sv* %8, null
  br i1 %cmp2, label %if.then.12, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %9 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings3 = getelementptr inbounds %struct.cop, %struct.cop* %9, i32 0, i32 14
  %10 = load %struct.sv*, %struct.sv** %cop_warnings3, align 8
  %cmp4 = icmp eq %struct.sv* %10, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 1)
  br i1 %cmp4, label %if.then.12, label %lor.lhs.false.5

lor.lhs.false.5:                                  ; preds = %lor.lhs.false
  %11 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings6 = getelementptr inbounds %struct.cop, %struct.cop* %11, i32 0, i32 14
  %12 = load %struct.sv*, %struct.sv** %cop_warnings6, align 8
  %cmp7 = icmp ne %struct.sv* %12, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 2)
  br i1 %cmp7, label %land.lhs.true.8, label %if.end.13

land.lhs.true.8:                                  ; preds = %lor.lhs.false.5
  %13 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings9 = getelementptr inbounds %struct.cop, %struct.cop* %13, i32 0, i32 14
  %14 = load %struct.sv*, %struct.sv** %cop_warnings9, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 0
  %15 = load i8*, i8** %sv_any, align 8
  %16 = bitcast i8* %15 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %16, i32 0, i32 0
  %17 = load i8*, i8** %xpv_pv, align 8
  %arrayidx = getelementptr inbounds i8, i8* %17, i64 6
  %18 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %18 to i32
  %and10 = and i32 %conv, 1
  %tobool11 = icmp ne i32 %and10, 0
  br i1 %tobool11, label %if.then.12, label %if.end.13

if.then.12:                                       ; preds = %land.lhs.true.8, %lor.lhs.false, %land.lhs.true
  call void (i32, i8*, ...) @Perl_warner(i32 24, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.41, i32 0, i32 0))
  br label %if.end.13

if.end.13:                                        ; preds = %if.then.12, %land.lhs.true.8, %lor.lhs.false.5, %if.end
  %19 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags14 = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 2
  %20 = load i32, i32* %sv_flags14, align 4
  %and15 = and i32 %20, 57344
  %tobool16 = icmp ne i32 %and15, 0
  br i1 %tobool16, label %if.then.17, label %if.end.34

if.then.17:                                       ; preds = %if.end.13
  %21 = load %struct.sv*, %struct.sv** %nsv.addr, align 8
  %sv_flags18 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 2
  %22 = load i32, i32* %sv_flags18, align 4
  %and19 = and i32 %22, 57344
  %tobool20 = icmp ne i32 %and19, 0
  br i1 %tobool20, label %if.then.21, label %if.else

if.then.21:                                       ; preds = %if.then.17
  %23 = load %struct.sv*, %struct.sv** %nsv.addr, align 8
  %call = call i32 @Perl_mg_free(%struct.sv* %23)
  br label %if.end.23

if.else:                                          ; preds = %if.then.17
  %24 = load %struct.sv*, %struct.sv** %nsv.addr, align 8
  %call22 = call signext i8 @Perl_sv_upgrade(%struct.sv* %24, i32 7)
  br label %if.end.23

if.end.23:                                        ; preds = %if.else, %if.then.21
  %25 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any24 = getelementptr inbounds %struct.sv, %struct.sv* %25, i32 0, i32 0
  %26 = load i8*, i8** %sv_any24, align 8
  %27 = bitcast i8* %26 to %struct.xpvmg*
  %xmg_magic = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %27, i32 0, i32 5
  %28 = load %struct.magic*, %struct.magic** %xmg_magic, align 8
  %29 = load %struct.sv*, %struct.sv** %nsv.addr, align 8
  %sv_any25 = getelementptr inbounds %struct.sv, %struct.sv* %29, i32 0, i32 0
  %30 = load i8*, i8** %sv_any25, align 8
  %31 = bitcast i8* %30 to %struct.xpvmg*
  %xmg_magic26 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %31, i32 0, i32 5
  store %struct.magic* %28, %struct.magic** %xmg_magic26, align 8
  %32 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags27 = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 2
  %33 = load i32, i32* %sv_flags27, align 4
  %and28 = and i32 %33, 57344
  %34 = load %struct.sv*, %struct.sv** %nsv.addr, align 8
  %sv_flags29 = getelementptr inbounds %struct.sv, %struct.sv* %34, i32 0, i32 2
  %35 = load i32, i32* %sv_flags29, align 4
  %or = or i32 %35, %and28
  store i32 %or, i32* %sv_flags29, align 4
  %36 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags30 = getelementptr inbounds %struct.sv, %struct.sv* %36, i32 0, i32 2
  %37 = load i32, i32* %sv_flags30, align 4
  %and31 = and i32 %37, -57345
  store i32 %and31, i32* %sv_flags30, align 4
  %38 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any32 = getelementptr inbounds %struct.sv, %struct.sv* %38, i32 0, i32 0
  %39 = load i8*, i8** %sv_any32, align 8
  %40 = bitcast i8* %39 to %struct.xpvmg*
  %xmg_magic33 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %40, i32 0, i32 5
  store %struct.magic* null, %struct.magic** %xmg_magic33, align 8
  br label %if.end.34

if.end.34:                                        ; preds = %if.end.23, %if.end.13
  %41 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_refcnt35 = getelementptr inbounds %struct.sv, %struct.sv* %41, i32 0, i32 1
  store i32 0, i32* %sv_refcnt35, align 4
  %42 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_clear(%struct.sv* %42)
  %43 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %44 = load %struct.sv*, %struct.sv** %nsv.addr, align 8
  %45 = bitcast %struct.sv* %43 to i8*
  %46 = bitcast %struct.sv* %44 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %45, i8* %46, i64 16, i32 8, i1 false)
  %47 = load i32, i32* %refcnt, align 4
  %48 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_refcnt36 = getelementptr inbounds %struct.sv, %struct.sv* %48, i32 0, i32 1
  store i32 %47, i32* %sv_refcnt36, align 4
  %49 = load %struct.sv*, %struct.sv** %nsv.addr, align 8
  %sv_flags37 = getelementptr inbounds %struct.sv, %struct.sv* %49, i32 0, i32 2
  %50 = load i32, i32* %sv_flags37, align 4
  %or38 = or i32 %50, 255
  store i32 %or38, i32* %sv_flags37, align 4
  %51 = load %struct.sv*, %struct.sv** %nsv.addr, align 8
  %sv_refcnt39 = getelementptr inbounds %struct.sv, %struct.sv* %51, i32 0, i32 1
  store i32 0, i32* %sv_refcnt39, align 4
  %52 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  %53 = bitcast %struct.sv* %52 to i8*
  %54 = load %struct.sv*, %struct.sv** %nsv.addr, align 8
  %sv_any40 = getelementptr inbounds %struct.sv, %struct.sv* %54, i32 0, i32 0
  store i8* %53, i8** %sv_any40, align 8
  %55 = load %struct.sv*, %struct.sv** %nsv.addr, align 8
  %sv_flags41 = getelementptr inbounds %struct.sv, %struct.sv* %55, i32 0, i32 2
  store i32 255, i32* %sv_flags41, align 4
  %56 = load %struct.sv*, %struct.sv** %nsv.addr, align 8
  store %struct.sv* %56, %struct.sv** @PL_sv_root, align 8
  %57 = load i32, i32* @PL_sv_count, align 4
  %dec = add nsw i32 %57, -1
  store i32 %dec, i32* @PL_sv_count, align 4
  store i32 %dec, i32* %tmp
  %58 = load i32, i32* %tmp
  ret void
}

; Function Attrs: nounwind uwtable
define void @Perl_sv_clear(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %stash = alloca %struct.hv*, align 8
  %sp = alloca %struct.sv**, align 8
  %destructor = alloca %struct.cv*, align 8
  %tmpref = alloca %struct.sv*, align 8
  %next = alloca %struct.stackinfo*, align 8
  %tmp = alloca %struct.av*, align 8
  %tmp33 = alloca i32, align 4
  %sp41 = alloca %struct.sv**, align 8
  %prev = alloca %struct.stackinfo*, align 8
  %tmp85 = alloca %struct.av*, align 8
  %tmp87 = alloca %struct.stackinfo*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 4096
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end.129

if.then:                                          ; preds = %entry
  %2 = load %struct.hv*, %struct.hv** @PL_defstash, align 8
  %tobool1 = icmp ne %struct.hv* %2, null
  br i1 %tobool1, label %if.then.2, label %if.end.112

if.then.2:                                        ; preds = %if.then
  %3 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %3, %struct.sv*** %sp, align 8
  br label %do.body

do.body:                                          ; preds = %land.end, %if.then.2
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 0
  %5 = load i8*, i8** %sv_any, align 8
  %6 = bitcast i8* %5 to %struct.xpvmg*
  %xmg_stash = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %6, i32 0, i32 6
  %7 = load %struct.hv*, %struct.hv** %xmg_stash, align 8
  store %struct.hv* %7, %struct.hv** %stash, align 8
  %8 = load %struct.hv*, %struct.hv** %stash, align 8
  %call = call %struct.cv* @Perl_gv_handler(%struct.hv* %8, i32 65)
  store %struct.cv* %call, %struct.cv** %destructor, align 8
  %9 = load %struct.cv*, %struct.cv** %destructor, align 8
  %tobool3 = icmp ne %struct.cv* %9, null
  br i1 %tobool3, label %if.then.4, label %if.end.96

if.then.4:                                        ; preds = %do.body
  %10 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call5 = call %struct.sv* @Perl_newRV(%struct.sv* %10)
  store %struct.sv* %call5, %struct.sv** %tmpref, align 8
  %11 = load %struct.sv*, %struct.sv** %tmpref, align 8
  %sv_flags6 = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 2
  %12 = load i32, i32* %sv_flags6, align 4
  %or = or i32 %12, 8388608
  store i32 %or, i32* %sv_flags6, align 4
  call void @Perl_push_scope()
  %13 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_next = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %13, i32 0, i32 6
  %14 = load %struct.stackinfo*, %struct.stackinfo** %si_next, align 8
  store %struct.stackinfo* %14, %struct.stackinfo** %next, align 8
  %15 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %tobool7 = icmp ne %struct.stackinfo* %15, null
  br i1 %tobool7, label %if.end, label %if.then.8

if.then.8:                                        ; preds = %if.then.4
  %call9 = call %struct.stackinfo* @Perl_new_stackinfo(i32 32, i32 13)
  store %struct.stackinfo* %call9, %struct.stackinfo** %next, align 8
  %16 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %17 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %si_prev = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %17, i32 0, i32 5
  store %struct.stackinfo* %16, %struct.stackinfo** %si_prev, align 8
  %18 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %19 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_next10 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %19, i32 0, i32 6
  store %struct.stackinfo* %18, %struct.stackinfo** %si_next10, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.8, %if.then.4
  %20 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %si_type = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %20, i32 0, i32 4
  store i32 6, i32* %si_type, align 4
  %21 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %si_cxix = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %21, i32 0, i32 2
  store i32 -1, i32* %si_cxix, align 4
  %22 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %si_stack = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %22, i32 0, i32 0
  %23 = load %struct.av*, %struct.av** %si_stack, align 8
  %sv_any11 = getelementptr inbounds %struct.av, %struct.av* %23, i32 0, i32 0
  %24 = load %struct.xpvav*, %struct.xpvav** %sv_any11, align 8
  %xav_fill = getelementptr inbounds %struct.xpvav, %struct.xpvav* %24, i32 0, i32 1
  store i64 0, i64* %xav_fill, align 8
  %25 = load %struct.sv**, %struct.sv*** %sp, align 8
  %26 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %25 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %26 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %27 = load %struct.av*, %struct.av** @PL_curstack, align 8
  %sv_any12 = getelementptr inbounds %struct.av, %struct.av* %27, i32 0, i32 0
  %28 = load %struct.xpvav*, %struct.xpvav** %sv_any12, align 8
  %xav_fill13 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %28, i32 0, i32 1
  store i64 %sub.ptr.div, i64* %xav_fill13, align 8
  %29 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %si_stack14 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %29, i32 0, i32 0
  %30 = load %struct.av*, %struct.av** %si_stack14, align 8
  %sv_any15 = getelementptr inbounds %struct.av, %struct.av* %30, i32 0, i32 0
  %31 = load %struct.xpvav*, %struct.xpvav** %sv_any15, align 8
  %xav_array = getelementptr inbounds %struct.xpvav, %struct.xpvav* %31, i32 0, i32 0
  %32 = load i8*, i8** %xav_array, align 8
  %33 = bitcast i8* %32 to %struct.sv**
  store %struct.sv** %33, %struct.sv*** @PL_stack_base, align 8
  %34 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %35 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %si_stack16 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %35, i32 0, i32 0
  %36 = load %struct.av*, %struct.av** %si_stack16, align 8
  %sv_any17 = getelementptr inbounds %struct.av, %struct.av* %36, i32 0, i32 0
  %37 = load %struct.xpvav*, %struct.xpvav** %sv_any17, align 8
  %xav_max = getelementptr inbounds %struct.xpvav, %struct.xpvav* %37, i32 0, i32 2
  %38 = load i64, i64* %xav_max, align 8
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %34, i64 %38
  store %struct.sv** %add.ptr, %struct.sv*** @PL_stack_max, align 8
  %39 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %40 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %si_stack18 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %40, i32 0, i32 0
  %41 = load %struct.av*, %struct.av** %si_stack18, align 8
  %sv_any19 = getelementptr inbounds %struct.av, %struct.av* %41, i32 0, i32 0
  %42 = load %struct.xpvav*, %struct.xpvav** %sv_any19, align 8
  %xav_fill20 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %42, i32 0, i32 1
  %43 = load i64, i64* %xav_fill20, align 8
  %add.ptr21 = getelementptr inbounds %struct.sv*, %struct.sv** %39, i64 %43
  store %struct.sv** %add.ptr21, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %add.ptr21, %struct.sv*** %sp, align 8
  %44 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %si_stack22 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %44, i32 0, i32 0
  %45 = load %struct.av*, %struct.av** %si_stack22, align 8
  store %struct.av* %45, %struct.av** @PL_curstack, align 8
  store %struct.av* %45, %struct.av** %tmp
  %46 = load %struct.av*, %struct.av** %tmp
  %47 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  store %struct.stackinfo* %47, %struct.stackinfo** @PL_curstackinfo, align 8
  %48 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %49 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast23 = ptrtoint %struct.sv** %48 to i64
  %sub.ptr.rhs.cast24 = ptrtoint %struct.sv** %49 to i64
  %sub.ptr.sub25 = sub i64 %sub.ptr.lhs.cast23, %sub.ptr.rhs.cast24
  %sub.ptr.div26 = sdiv exact i64 %sub.ptr.sub25, 8
  %cmp = icmp slt i64 %sub.ptr.div26, 2
  br i1 %cmp, label %if.then.27, label %if.end.29

if.then.27:                                       ; preds = %if.end
  %50 = load %struct.sv**, %struct.sv*** %sp, align 8
  %51 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call28 = call %struct.sv** @Perl_stack_grow(%struct.sv** %50, %struct.sv** %51, i32 2)
  store %struct.sv** %call28, %struct.sv*** %sp, align 8
  br label %if.end.29

if.end.29:                                        ; preds = %if.then.27, %if.end
  %52 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %52, i32 1
  store i32* %incdec.ptr, i32** @PL_markstack_ptr, align 8
  %53 = load i32*, i32** @PL_markstack_max, align 8
  %cmp30 = icmp eq i32* %incdec.ptr, %53
  br i1 %cmp30, label %if.then.31, label %if.end.32

if.then.31:                                       ; preds = %if.end.29
  call void @Perl_markstack_grow()
  br label %if.end.32

if.end.32:                                        ; preds = %if.then.31, %if.end.29
  %54 = load %struct.sv**, %struct.sv*** %sp, align 8
  %55 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast34 = ptrtoint %struct.sv** %54 to i64
  %sub.ptr.rhs.cast35 = ptrtoint %struct.sv** %55 to i64
  %sub.ptr.sub36 = sub i64 %sub.ptr.lhs.cast34, %sub.ptr.rhs.cast35
  %sub.ptr.div37 = sdiv exact i64 %sub.ptr.sub36, 8
  %conv = trunc i64 %sub.ptr.div37 to i32
  %56 = load i32*, i32** @PL_markstack_ptr, align 8
  store i32 %conv, i32* %56, align 4
  store i32 %conv, i32* %tmp33
  %57 = load i32, i32* %tmp33
  %58 = load %struct.sv*, %struct.sv** %tmpref, align 8
  %59 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr38 = getelementptr inbounds %struct.sv*, %struct.sv** %59, i32 1
  store %struct.sv** %incdec.ptr38, %struct.sv*** %sp, align 8
  store %struct.sv* %58, %struct.sv** %incdec.ptr38, align 8
  %60 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %60, %struct.sv*** @PL_stack_sp, align 8
  %61 = load %struct.cv*, %struct.cv** %destructor, align 8
  %62 = bitcast %struct.cv* %61 to %struct.sv*
  %call39 = call i32 @Perl_call_sv(%struct.sv* %62, i32 150)
  %63 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %63, %struct.sv*** %sp41, align 8
  %64 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_prev43 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %64, i32 0, i32 5
  %65 = load %struct.stackinfo*, %struct.stackinfo** %si_prev43, align 8
  store %struct.stackinfo* %65, %struct.stackinfo** %prev, align 8
  %66 = load %struct.stackinfo*, %struct.stackinfo** %prev, align 8
  %tobool44 = icmp ne %struct.stackinfo* %66, null
  br i1 %tobool44, label %if.end.67, label %if.then.45

if.then.45:                                       ; preds = %if.end.32
  %67 = load %struct.gv*, %struct.gv** @PL_stderrgv, align 8
  %tobool46 = icmp ne %struct.gv* %67, null
  br i1 %tobool46, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %if.then.45
  %68 = load %struct.gv*, %struct.gv** @PL_stderrgv, align 8
  %sv_flags47 = getelementptr inbounds %struct.gv, %struct.gv* %68, i32 0, i32 2
  %69 = load i32, i32* %sv_flags47, align 4
  %and48 = and i32 %69, 255
  %cmp49 = icmp eq i32 %and48, 13
  br i1 %cmp49, label %land.lhs.true.51, label %cond.false

land.lhs.true.51:                                 ; preds = %land.lhs.true
  %70 = load %struct.gv*, %struct.gv** @PL_stderrgv, align 8
  %sv_any52 = getelementptr inbounds %struct.gv, %struct.gv* %70, i32 0, i32 0
  %71 = load %struct.xpvgv*, %struct.xpvgv** %sv_any52, align 8
  %xgv_gp = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %71, i32 0, i32 7
  %72 = load %struct.gp*, %struct.gp** %xgv_gp, align 8
  %gp_io = getelementptr inbounds %struct.gp, %struct.gp* %72, i32 0, i32 2
  %73 = load %struct.io*, %struct.io** %gp_io, align 8
  %tobool53 = icmp ne %struct.io* %73, null
  br i1 %tobool53, label %land.lhs.true.54, label %cond.false

land.lhs.true.54:                                 ; preds = %land.lhs.true.51
  %74 = load %struct.gv*, %struct.gv** @PL_stderrgv, align 8
  %sv_any55 = getelementptr inbounds %struct.gv, %struct.gv* %74, i32 0, i32 0
  %75 = load %struct.xpvgv*, %struct.xpvgv** %sv_any55, align 8
  %xgv_gp56 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %75, i32 0, i32 7
  %76 = load %struct.gp*, %struct.gp** %xgv_gp56, align 8
  %gp_io57 = getelementptr inbounds %struct.gp, %struct.gp* %76, i32 0, i32 2
  %77 = load %struct.io*, %struct.io** %gp_io57, align 8
  %sv_any58 = getelementptr inbounds %struct.io, %struct.io* %77, i32 0, i32 0
  %78 = load %struct.xpvio*, %struct.xpvio** %sv_any58, align 8
  %xio_ofp = getelementptr inbounds %struct.xpvio, %struct.xpvio* %78, i32 0, i32 8
  %79 = load %struct._PerlIO**, %struct._PerlIO*** %xio_ofp, align 8
  %tobool59 = icmp ne %struct._PerlIO** %79, null
  br i1 %tobool59, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true.54
  %80 = load %struct.gv*, %struct.gv** @PL_stderrgv, align 8
  %sv_any60 = getelementptr inbounds %struct.gv, %struct.gv* %80, i32 0, i32 0
  %81 = load %struct.xpvgv*, %struct.xpvgv** %sv_any60, align 8
  %xgv_gp61 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %81, i32 0, i32 7
  %82 = load %struct.gp*, %struct.gp** %xgv_gp61, align 8
  %gp_io62 = getelementptr inbounds %struct.gp, %struct.gp* %82, i32 0, i32 2
  %83 = load %struct.io*, %struct.io** %gp_io62, align 8
  %sv_any63 = getelementptr inbounds %struct.io, %struct.io* %83, i32 0, i32 0
  %84 = load %struct.xpvio*, %struct.xpvio** %sv_any63, align 8
  %xio_ofp64 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %84, i32 0, i32 8
  %85 = load %struct._PerlIO**, %struct._PerlIO*** %xio_ofp64, align 8
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true.54, %land.lhs.true.51, %land.lhs.true, %if.then.45
  %call65 = call %struct._PerlIO** @Perl_PerlIO_stderr()
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._PerlIO** [ %85, %cond.true ], [ %call65, %cond.false ]
  %call66 = call i32 (%struct._PerlIO**, i8*, ...) @PerlIO_printf(%struct._PerlIO** %cond, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.42, i32 0, i32 0))
  call void @Perl_my_exit(i32 1)
  br label %if.end.67

if.end.67:                                        ; preds = %cond.end, %if.end.32
  %86 = load %struct.sv**, %struct.sv*** %sp41, align 8
  %87 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast68 = ptrtoint %struct.sv** %86 to i64
  %sub.ptr.rhs.cast69 = ptrtoint %struct.sv** %87 to i64
  %sub.ptr.sub70 = sub i64 %sub.ptr.lhs.cast68, %sub.ptr.rhs.cast69
  %sub.ptr.div71 = sdiv exact i64 %sub.ptr.sub70, 8
  %88 = load %struct.av*, %struct.av** @PL_curstack, align 8
  %sv_any72 = getelementptr inbounds %struct.av, %struct.av* %88, i32 0, i32 0
  %89 = load %struct.xpvav*, %struct.xpvav** %sv_any72, align 8
  %xav_fill73 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %89, i32 0, i32 1
  store i64 %sub.ptr.div71, i64* %xav_fill73, align 8
  %90 = load %struct.stackinfo*, %struct.stackinfo** %prev, align 8
  %si_stack74 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %90, i32 0, i32 0
  %91 = load %struct.av*, %struct.av** %si_stack74, align 8
  %sv_any75 = getelementptr inbounds %struct.av, %struct.av* %91, i32 0, i32 0
  %92 = load %struct.xpvav*, %struct.xpvav** %sv_any75, align 8
  %xav_array76 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %92, i32 0, i32 0
  %93 = load i8*, i8** %xav_array76, align 8
  %94 = bitcast i8* %93 to %struct.sv**
  store %struct.sv** %94, %struct.sv*** @PL_stack_base, align 8
  %95 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %96 = load %struct.stackinfo*, %struct.stackinfo** %prev, align 8
  %si_stack77 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %96, i32 0, i32 0
  %97 = load %struct.av*, %struct.av** %si_stack77, align 8
  %sv_any78 = getelementptr inbounds %struct.av, %struct.av* %97, i32 0, i32 0
  %98 = load %struct.xpvav*, %struct.xpvav** %sv_any78, align 8
  %xav_max79 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %98, i32 0, i32 2
  %99 = load i64, i64* %xav_max79, align 8
  %add.ptr80 = getelementptr inbounds %struct.sv*, %struct.sv** %95, i64 %99
  store %struct.sv** %add.ptr80, %struct.sv*** @PL_stack_max, align 8
  %100 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %101 = load %struct.stackinfo*, %struct.stackinfo** %prev, align 8
  %si_stack81 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %101, i32 0, i32 0
  %102 = load %struct.av*, %struct.av** %si_stack81, align 8
  %sv_any82 = getelementptr inbounds %struct.av, %struct.av* %102, i32 0, i32 0
  %103 = load %struct.xpvav*, %struct.xpvav** %sv_any82, align 8
  %xav_fill83 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %103, i32 0, i32 1
  %104 = load i64, i64* %xav_fill83, align 8
  %add.ptr84 = getelementptr inbounds %struct.sv*, %struct.sv** %100, i64 %104
  store %struct.sv** %add.ptr84, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %add.ptr84, %struct.sv*** %sp41, align 8
  %105 = load %struct.stackinfo*, %struct.stackinfo** %prev, align 8
  %si_stack86 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %105, i32 0, i32 0
  %106 = load %struct.av*, %struct.av** %si_stack86, align 8
  store %struct.av* %106, %struct.av** @PL_curstack, align 8
  store %struct.av* %106, %struct.av** %tmp85
  %107 = load %struct.av*, %struct.av** %tmp85
  %108 = load %struct.stackinfo*, %struct.stackinfo** %prev, align 8
  store %struct.stackinfo* %108, %struct.stackinfo** @PL_curstackinfo, align 8
  store %struct.stackinfo* %108, %struct.stackinfo** %tmp87
  %109 = load %struct.stackinfo*, %struct.stackinfo** %tmp87
  %110 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %110, %struct.sv*** %sp, align 8
  call void @Perl_pop_scope()
  %111 = load %struct.sv*, %struct.sv** %tmpref, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %111, i32 0, i32 1
  %112 = load i32, i32* %sv_refcnt, align 4
  %cmp88 = icmp ult i32 %112, 2
  br i1 %cmp88, label %if.then.90, label %if.end.95

if.then.90:                                       ; preds = %if.end.67
  %113 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_refcnt91 = getelementptr inbounds %struct.sv, %struct.sv* %113, i32 0, i32 1
  %114 = load i32, i32* %sv_refcnt91, align 4
  %dec = add i32 %114, -1
  store i32 %dec, i32* %sv_refcnt91, align 4
  %115 = load %struct.sv*, %struct.sv** %tmpref, align 8
  %sv_any92 = getelementptr inbounds %struct.sv, %struct.sv* %115, i32 0, i32 0
  %116 = load i8*, i8** %sv_any92, align 8
  %117 = bitcast i8* %116 to %struct.xrv*
  %xrv_rv = getelementptr inbounds %struct.xrv, %struct.xrv* %117, i32 0, i32 0
  store %struct.sv* null, %struct.sv** %xrv_rv, align 8
  %118 = load %struct.sv*, %struct.sv** %tmpref, align 8
  %sv_flags93 = getelementptr inbounds %struct.sv, %struct.sv* %118, i32 0, i32 2
  %119 = load i32, i32* %sv_flags93, align 4
  %and94 = and i32 %119, -268959745
  store i32 %and94, i32* %sv_flags93, align 4
  br label %if.end.95

if.end.95:                                        ; preds = %if.then.90, %if.end.67
  %120 = load %struct.sv*, %struct.sv** %tmpref, align 8
  call void @Perl_sv_free(%struct.sv* %120)
  br label %if.end.96

if.end.96:                                        ; preds = %if.end.95, %do.body
  br label %do.cond

do.cond:                                          ; preds = %if.end.96
  %121 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags97 = getelementptr inbounds %struct.sv, %struct.sv* %121, i32 0, i32 2
  %122 = load i32, i32* %sv_flags97, align 4
  %and98 = and i32 %122, 4096
  %tobool99 = icmp ne i32 %and98, 0
  br i1 %tobool99, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %do.cond
  %123 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any100 = getelementptr inbounds %struct.sv, %struct.sv* %123, i32 0, i32 0
  %124 = load i8*, i8** %sv_any100, align 8
  %125 = bitcast i8* %124 to %struct.xpvmg*
  %xmg_stash101 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %125, i32 0, i32 6
  %126 = load %struct.hv*, %struct.hv** %xmg_stash101, align 8
  %127 = load %struct.hv*, %struct.hv** %stash, align 8
  %cmp102 = icmp ne %struct.hv* %126, %127
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.cond
  %128 = phi i1 [ false, %do.cond ], [ %cmp102, %land.rhs ]
  br i1 %128, label %do.body, label %do.end

do.end:                                           ; preds = %land.end
  %129 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_refcnt104 = getelementptr inbounds %struct.sv, %struct.sv* %129, i32 0, i32 1
  %130 = load i32, i32* %sv_refcnt104, align 4
  %tobool105 = icmp ne i32 %130, 0
  br i1 %tobool105, label %if.then.106, label %if.end.111

if.then.106:                                      ; preds = %do.end
  %131 = load i8, i8* @PL_in_clean_objs, align 1
  %tobool107 = icmp ne i8 %131, 0
  br i1 %tobool107, label %if.then.108, label %if.end.110

if.then.108:                                      ; preds = %if.then.106
  %132 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any109 = getelementptr inbounds %struct.hv, %struct.hv* %132, i32 0, i32 0
  %133 = load %struct.xpvhv*, %struct.xpvhv** %sv_any109, align 8
  %xhv_name = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %133, i32 0, i32 10
  %134 = load i8*, i8** %xhv_name, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.43, i32 0, i32 0), i8* %134)
  br label %if.end.110

if.end.110:                                       ; preds = %if.then.108, %if.then.106
  br label %return

if.end.111:                                       ; preds = %do.end
  br label %if.end.112

if.end.112:                                       ; preds = %if.end.111, %if.then
  %135 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags113 = getelementptr inbounds %struct.sv, %struct.sv* %135, i32 0, i32 2
  %136 = load i32, i32* %sv_flags113, align 4
  %and114 = and i32 %136, 4096
  %tobool115 = icmp ne i32 %and114, 0
  br i1 %tobool115, label %if.then.116, label %if.end.128

if.then.116:                                      ; preds = %if.end.112
  %137 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any117 = getelementptr inbounds %struct.sv, %struct.sv* %137, i32 0, i32 0
  %138 = load i8*, i8** %sv_any117, align 8
  %139 = bitcast i8* %138 to %struct.xpvmg*
  %xmg_stash118 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %139, i32 0, i32 6
  %140 = load %struct.hv*, %struct.hv** %xmg_stash118, align 8
  %141 = bitcast %struct.hv* %140 to %struct.sv*
  call void @Perl_sv_free(%struct.sv* %141)
  %142 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags119 = getelementptr inbounds %struct.sv, %struct.sv* %142, i32 0, i32 2
  %143 = load i32, i32* %sv_flags119, align 4
  %and120 = and i32 %143, -4097
  store i32 %and120, i32* %sv_flags119, align 4
  %144 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags121 = getelementptr inbounds %struct.sv, %struct.sv* %144, i32 0, i32 2
  %145 = load i32, i32* %sv_flags121, align 4
  %and122 = and i32 %145, 255
  %cmp123 = icmp ne i32 %and122, 15
  br i1 %cmp123, label %if.then.125, label %if.end.127

if.then.125:                                      ; preds = %if.then.116
  %146 = load i32, i32* @PL_sv_objcount, align 4
  %dec126 = add nsw i32 %146, -1
  store i32 %dec126, i32* @PL_sv_objcount, align 4
  br label %if.end.127

if.end.127:                                       ; preds = %if.then.125, %if.then.116
  br label %if.end.128

if.end.128:                                       ; preds = %if.end.127, %if.end.112
  br label %if.end.129

if.end.129:                                       ; preds = %if.end.128, %entry
  %147 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags130 = getelementptr inbounds %struct.sv, %struct.sv* %147, i32 0, i32 2
  %148 = load i32, i32* %sv_flags130, align 4
  %and131 = and i32 %148, 255
  %cmp132 = icmp uge i32 %and131, 7
  br i1 %cmp132, label %if.then.134, label %if.end.147

if.then.134:                                      ; preds = %if.end.129
  %149 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any135 = getelementptr inbounds %struct.sv, %struct.sv* %149, i32 0, i32 0
  %150 = load i8*, i8** %sv_any135, align 8
  %151 = bitcast i8* %150 to %struct.xpvmg*
  %xmg_magic = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %151, i32 0, i32 5
  %152 = load %struct.magic*, %struct.magic** %xmg_magic, align 8
  %tobool136 = icmp ne %struct.magic* %152, null
  br i1 %tobool136, label %if.then.137, label %if.end.139

if.then.137:                                      ; preds = %if.then.134
  %153 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call138 = call i32 @Perl_mg_free(%struct.sv* %153)
  br label %if.end.139

if.end.139:                                       ; preds = %if.then.137, %if.then.134
  %154 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags140 = getelementptr inbounds %struct.sv, %struct.sv* %154, i32 0, i32 2
  %155 = load i32, i32* %sv_flags140, align 4
  %and141 = and i32 %155, 1073741824
  %tobool142 = icmp ne i32 %and141, 0
  br i1 %tobool142, label %if.then.143, label %if.end.146

if.then.143:                                      ; preds = %if.end.139
  %156 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any144 = getelementptr inbounds %struct.sv, %struct.sv* %156, i32 0, i32 0
  %157 = load i8*, i8** %sv_any144, align 8
  %158 = bitcast i8* %157 to %struct.xpvmg*
  %xmg_stash145 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %158, i32 0, i32 6
  %159 = load %struct.hv*, %struct.hv** %xmg_stash145, align 8
  %160 = bitcast %struct.hv* %159 to %struct.sv*
  call void @Perl_sv_free(%struct.sv* %160)
  br label %if.end.146

if.end.146:                                       ; preds = %if.then.143, %if.end.139
  br label %if.end.147

if.end.147:                                       ; preds = %if.end.146, %if.end.129
  store %struct.hv* null, %struct.hv** %stash, align 8
  %161 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags148 = getelementptr inbounds %struct.sv, %struct.sv* %161, i32 0, i32 2
  %162 = load i32, i32* %sv_flags148, align 4
  %and149 = and i32 %162, 255
  switch i32 %and149, label %sw.epilog [
    i32 15, label %sw.bb
    i32 8, label %sw.bb.192
    i32 12, label %sw.bb.193
    i32 14, label %sw.bb.193
    i32 11, label %sw.bb.194
    i32 10, label %sw.bb.195
    i32 9, label %sw.bb.196
    i32 13, label %sw.bb.217
    i32 7, label %sw.bb.220
    i32 6, label %sw.bb.220
    i32 5, label %sw.bb.220
    i32 4, label %sw.bb.228
    i32 3, label %sw.bb.228
  ]

sw.bb:                                            ; preds = %if.end.147
  %163 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any150 = getelementptr inbounds %struct.sv, %struct.sv* %163, i32 0, i32 0
  %164 = load i8*, i8** %sv_any150, align 8
  %165 = bitcast i8* %164 to %struct.xpvio*
  %xio_ifp = getelementptr inbounds %struct.xpvio, %struct.xpvio* %165, i32 0, i32 7
  %166 = load %struct._PerlIO**, %struct._PerlIO*** %xio_ifp, align 8
  %tobool151 = icmp ne %struct._PerlIO** %166, null
  br i1 %tobool151, label %land.lhs.true.152, label %if.end.172

land.lhs.true.152:                                ; preds = %sw.bb
  %167 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any153 = getelementptr inbounds %struct.sv, %struct.sv* %167, i32 0, i32 0
  %168 = load i8*, i8** %sv_any153, align 8
  %169 = bitcast i8* %168 to %struct.xpvio*
  %xio_ifp154 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %169, i32 0, i32 7
  %170 = load %struct._PerlIO**, %struct._PerlIO*** %xio_ifp154, align 8
  %call155 = call %struct._PerlIO** @Perl_PerlIO_stdin()
  %cmp156 = icmp ne %struct._PerlIO** %170, %call155
  br i1 %cmp156, label %land.lhs.true.158, label %if.end.172

land.lhs.true.158:                                ; preds = %land.lhs.true.152
  %171 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any159 = getelementptr inbounds %struct.sv, %struct.sv* %171, i32 0, i32 0
  %172 = load i8*, i8** %sv_any159, align 8
  %173 = bitcast i8* %172 to %struct.xpvio*
  %xio_ifp160 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %173, i32 0, i32 7
  %174 = load %struct._PerlIO**, %struct._PerlIO*** %xio_ifp160, align 8
  %call161 = call %struct._PerlIO** @Perl_PerlIO_stdout()
  %cmp162 = icmp ne %struct._PerlIO** %174, %call161
  br i1 %cmp162, label %land.lhs.true.164, label %if.end.172

land.lhs.true.164:                                ; preds = %land.lhs.true.158
  %175 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any165 = getelementptr inbounds %struct.sv, %struct.sv* %175, i32 0, i32 0
  %176 = load i8*, i8** %sv_any165, align 8
  %177 = bitcast i8* %176 to %struct.xpvio*
  %xio_ifp166 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %177, i32 0, i32 7
  %178 = load %struct._PerlIO**, %struct._PerlIO*** %xio_ifp166, align 8
  %call167 = call %struct._PerlIO** @Perl_PerlIO_stderr()
  %cmp168 = icmp ne %struct._PerlIO** %178, %call167
  br i1 %cmp168, label %if.then.170, label %if.end.172

if.then.170:                                      ; preds = %land.lhs.true.164
  %179 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %180 = bitcast %struct.sv* %179 to %struct.io*
  %call171 = call signext i8 @Perl_io_close(%struct.io* %180, i8 signext 0)
  br label %if.end.172

if.end.172:                                       ; preds = %if.then.170, %land.lhs.true.164, %land.lhs.true.158, %land.lhs.true.152, %sw.bb
  %181 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any173 = getelementptr inbounds %struct.sv, %struct.sv* %181, i32 0, i32 0
  %182 = load i8*, i8** %sv_any173, align 8
  %183 = bitcast i8* %182 to %struct.xpvio*
  %xio_dirpu = getelementptr inbounds %struct.xpvio, %struct.xpvio* %183, i32 0, i32 9
  %xiou_dirp = bitcast %union.anon* %xio_dirpu to %struct.__dirstream**
  %184 = load %struct.__dirstream*, %struct.__dirstream** %xiou_dirp, align 8
  %tobool174 = icmp ne %struct.__dirstream* %184, null
  br i1 %tobool174, label %land.lhs.true.175, label %if.end.185

land.lhs.true.175:                                ; preds = %if.end.172
  %185 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any176 = getelementptr inbounds %struct.sv, %struct.sv* %185, i32 0, i32 0
  %186 = load i8*, i8** %sv_any176, align 8
  %187 = bitcast i8* %186 to %struct.xpvio*
  %xio_flags = getelementptr inbounds %struct.xpvio, %struct.xpvio* %187, i32 0, i32 22
  %188 = load i8, i8* %xio_flags, align 1
  %conv177 = sext i8 %188 to i32
  %and178 = and i32 %conv177, 64
  %tobool179 = icmp ne i32 %and178, 0
  br i1 %tobool179, label %if.end.185, label %if.then.180

if.then.180:                                      ; preds = %land.lhs.true.175
  %189 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any181 = getelementptr inbounds %struct.sv, %struct.sv* %189, i32 0, i32 0
  %190 = load i8*, i8** %sv_any181, align 8
  %191 = bitcast i8* %190 to %struct.xpvio*
  %xio_dirpu182 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %191, i32 0, i32 9
  %xiou_dirp183 = bitcast %union.anon* %xio_dirpu182 to %struct.__dirstream**
  %192 = load %struct.__dirstream*, %struct.__dirstream** %xiou_dirp183, align 8
  %call184 = call i32 @closedir(%struct.__dirstream* %192)
  br label %if.end.185

if.end.185:                                       ; preds = %if.then.180, %land.lhs.true.175, %if.end.172
  %193 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any186 = getelementptr inbounds %struct.sv, %struct.sv* %193, i32 0, i32 0
  %194 = load i8*, i8** %sv_any186, align 8
  %195 = bitcast i8* %194 to %struct.xpvio*
  %xio_dirpu187 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %195, i32 0, i32 9
  %xiou_dirp188 = bitcast %union.anon* %xio_dirpu187 to %struct.__dirstream**
  store %struct.__dirstream* null, %struct.__dirstream** %xiou_dirp188, align 8
  %196 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any189 = getelementptr inbounds %struct.sv, %struct.sv* %196, i32 0, i32 0
  %197 = load i8*, i8** %sv_any189, align 8
  %198 = bitcast i8* %197 to %struct.xpvio*
  %xio_top_name = getelementptr inbounds %struct.xpvio, %struct.xpvio* %198, i32 0, i32 14
  %199 = load i8*, i8** %xio_top_name, align 8
  call void @Perl_safesysfree(i8* %199)
  %200 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any190 = getelementptr inbounds %struct.sv, %struct.sv* %200, i32 0, i32 0
  %201 = load i8*, i8** %sv_any190, align 8
  %202 = bitcast i8* %201 to %struct.xpvio*
  %xio_fmt_name = getelementptr inbounds %struct.xpvio, %struct.xpvio* %202, i32 0, i32 16
  %203 = load i8*, i8** %xio_fmt_name, align 8
  call void @Perl_safesysfree(i8* %203)
  %204 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any191 = getelementptr inbounds %struct.sv, %struct.sv* %204, i32 0, i32 0
  %205 = load i8*, i8** %sv_any191, align 8
  %206 = bitcast i8* %205 to %struct.xpvio*
  %xio_bottom_name = getelementptr inbounds %struct.xpvio, %struct.xpvio* %206, i32 0, i32 18
  %207 = load i8*, i8** %xio_bottom_name, align 8
  call void @Perl_safesysfree(i8* %207)
  br label %sw.bb.192

sw.bb.192:                                        ; preds = %if.end.147, %if.end.185
  br label %freescalar

sw.bb.193:                                        ; preds = %if.end.147, %if.end.147
  %208 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %209 = bitcast %struct.sv* %208 to %struct.cv*
  call void @Perl_cv_undef(%struct.cv* %209)
  br label %freescalar

sw.bb.194:                                        ; preds = %if.end.147
  %210 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %211 = bitcast %struct.sv* %210 to %struct.hv*
  call void @Perl_hv_undef(%struct.hv* %211)
  br label %sw.epilog

sw.bb.195:                                        ; preds = %if.end.147
  %212 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %213 = bitcast %struct.sv* %212 to %struct.av*
  call void @Perl_av_undef(%struct.av* %213)
  br label %sw.epilog

sw.bb.196:                                        ; preds = %if.end.147
  %214 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any197 = getelementptr inbounds %struct.sv, %struct.sv* %214, i32 0, i32 0
  %215 = load i8*, i8** %sv_any197, align 8
  %216 = bitcast i8* %215 to %struct.xpvlv*
  %xlv_type = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %216, i32 0, i32 10
  %217 = load i8, i8* %xlv_type, align 1
  %conv198 = sext i8 %217 to i32
  %cmp199 = icmp eq i32 %conv198, 84
  br i1 %cmp199, label %if.then.201, label %if.else

if.then.201:                                      ; preds = %sw.bb.196
  %218 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any202 = getelementptr inbounds %struct.sv, %struct.sv* %218, i32 0, i32 0
  %219 = load i8*, i8** %sv_any202, align 8
  %220 = bitcast i8* %219 to %struct.xpvlv*
  %xlv_targ = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %220, i32 0, i32 9
  %221 = load %struct.sv*, %struct.sv** %xlv_targ, align 8
  %222 = bitcast %struct.sv* %221 to %struct.he*
  %hent_hek = getelementptr inbounds %struct.he, %struct.he* %222, i32 0, i32 1
  %223 = load %struct.hek*, %struct.hek** %hent_hek, align 8
  %hek_key = getelementptr inbounds %struct.hek, %struct.hek* %223, i32 0, i32 2
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key, i32 0, i32 0
  %224 = bitcast i8* %arraydecay to %struct.sv**
  %225 = load %struct.sv*, %struct.sv** %224, align 8
  call void @Perl_sv_free(%struct.sv* %225)
  %226 = load %struct.he*, %struct.he** @PL_hv_fetch_ent_mh, align 8
  %227 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any203 = getelementptr inbounds %struct.sv, %struct.sv* %227, i32 0, i32 0
  %228 = load i8*, i8** %sv_any203, align 8
  %229 = bitcast i8* %228 to %struct.xpvlv*
  %xlv_targ204 = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %229, i32 0, i32 9
  %230 = load %struct.sv*, %struct.sv** %xlv_targ204, align 8
  %231 = bitcast %struct.sv* %230 to %struct.he*
  %hent_next = getelementptr inbounds %struct.he, %struct.he* %231, i32 0, i32 0
  store %struct.he* %226, %struct.he** %hent_next, align 8
  %232 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any205 = getelementptr inbounds %struct.sv, %struct.sv* %232, i32 0, i32 0
  %233 = load i8*, i8** %sv_any205, align 8
  %234 = bitcast i8* %233 to %struct.xpvlv*
  %xlv_targ206 = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %234, i32 0, i32 9
  %235 = load %struct.sv*, %struct.sv** %xlv_targ206, align 8
  %236 = bitcast %struct.sv* %235 to %struct.he*
  store %struct.he* %236, %struct.he** @PL_hv_fetch_ent_mh, align 8
  br label %if.end.216

if.else:                                          ; preds = %sw.bb.196
  %237 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any207 = getelementptr inbounds %struct.sv, %struct.sv* %237, i32 0, i32 0
  %238 = load i8*, i8** %sv_any207, align 8
  %239 = bitcast i8* %238 to %struct.xpvlv*
  %xlv_type208 = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %239, i32 0, i32 10
  %240 = load i8, i8* %xlv_type208, align 1
  %conv209 = sext i8 %240 to i32
  %cmp210 = icmp ne i32 %conv209, 116
  br i1 %cmp210, label %if.then.212, label %if.end.215

if.then.212:                                      ; preds = %if.else
  %241 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any213 = getelementptr inbounds %struct.sv, %struct.sv* %241, i32 0, i32 0
  %242 = load i8*, i8** %sv_any213, align 8
  %243 = bitcast i8* %242 to %struct.xpvlv*
  %xlv_targ214 = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %243, i32 0, i32 9
  %244 = load %struct.sv*, %struct.sv** %xlv_targ214, align 8
  call void @Perl_sv_free(%struct.sv* %244)
  br label %if.end.215

if.end.215:                                       ; preds = %if.then.212, %if.else
  br label %if.end.216

if.end.216:                                       ; preds = %if.end.215, %if.then.201
  br label %freescalar

sw.bb.217:                                        ; preds = %if.end.147
  %245 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %246 = bitcast %struct.sv* %245 to %struct.gv*
  call void @Perl_gp_free(%struct.gv* %246)
  %247 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any218 = getelementptr inbounds %struct.sv, %struct.sv* %247, i32 0, i32 0
  %248 = load i8*, i8** %sv_any218, align 8
  %249 = bitcast i8* %248 to %struct.xpvgv*
  %xgv_name = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %249, i32 0, i32 8
  %250 = load i8*, i8** %xgv_name, align 8
  call void @Perl_safesysfree(i8* %250)
  %251 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any219 = getelementptr inbounds %struct.sv, %struct.sv* %251, i32 0, i32 0
  %252 = load i8*, i8** %sv_any219, align 8
  %253 = bitcast i8* %252 to %struct.xpvgv*
  %xgv_stash = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %253, i32 0, i32 10
  %254 = load %struct.hv*, %struct.hv** %xgv_stash, align 8
  store %struct.hv* %254, %struct.hv** %stash, align 8
  br label %sw.bb.220

sw.bb.220:                                        ; preds = %if.end.147, %if.end.147, %if.end.147, %sw.bb.217
  br label %freescalar

freescalar:                                       ; preds = %sw.bb.220, %if.end.216, %sw.bb.193, %sw.bb.192
  %255 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags221 = getelementptr inbounds %struct.sv, %struct.sv* %255, i32 0, i32 2
  %256 = load i32, i32* %sv_flags221, align 4
  %and222 = and i32 %256, 2097152
  %tobool223 = icmp ne i32 %and222, 0
  br i1 %tobool223, label %land.rhs.224, label %land.end.227

land.rhs.224:                                     ; preds = %freescalar
  %257 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call225 = call i32 @Perl_sv_backoff(%struct.sv* %257)
  %tobool226 = icmp ne i32 %call225, 0
  br label %land.end.227

land.end.227:                                     ; preds = %land.rhs.224, %freescalar
  %258 = phi i1 [ false, %freescalar ], [ %tobool226, %land.rhs.224 ]
  %land.ext = zext i1 %258 to i32
  br label %sw.bb.228

sw.bb.228:                                        ; preds = %if.end.147, %if.end.147, %land.end.227
  %259 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags229 = getelementptr inbounds %struct.sv, %struct.sv* %259, i32 0, i32 2
  %260 = load i32, i32* %sv_flags229, align 4
  %and230 = and i32 %260, 524288
  %tobool231 = icmp ne i32 %and230, 0
  br i1 %tobool231, label %if.then.232, label %if.else.242

if.then.232:                                      ; preds = %sw.bb.228
  %261 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags233 = getelementptr inbounds %struct.sv, %struct.sv* %261, i32 0, i32 2
  %262 = load i32, i32* %sv_flags233, align 4
  %and234 = and i32 %262, -2146959360
  %cmp235 = icmp eq i32 %and234, -2146959360
  br i1 %cmp235, label %if.then.237, label %if.else.238

if.then.237:                                      ; preds = %if.then.232
  %263 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @S_sv_del_backref(%struct.sv* %263)
  br label %if.end.241

if.else.238:                                      ; preds = %if.then.232
  %264 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any239 = getelementptr inbounds %struct.sv, %struct.sv* %264, i32 0, i32 0
  %265 = load i8*, i8** %sv_any239, align 8
  %266 = bitcast i8* %265 to %struct.xrv*
  %xrv_rv240 = getelementptr inbounds %struct.xrv, %struct.xrv* %266, i32 0, i32 0
  %267 = load %struct.sv*, %struct.sv** %xrv_rv240, align 8
  call void @Perl_sv_free(%struct.sv* %267)
  br label %if.end.241

if.end.241:                                       ; preds = %if.else.238, %if.then.237
  br label %if.end.285

if.else.242:                                      ; preds = %sw.bb.228
  %268 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any243 = getelementptr inbounds %struct.sv, %struct.sv* %268, i32 0, i32 0
  %269 = load i8*, i8** %sv_any243, align 8
  %270 = bitcast i8* %269 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %270, i32 0, i32 0
  %271 = load i8*, i8** %xpv_pv, align 8
  %tobool244 = icmp ne i8* %271, null
  br i1 %tobool244, label %land.lhs.true.245, label %if.else.251

land.lhs.true.245:                                ; preds = %if.else.242
  %272 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any246 = getelementptr inbounds %struct.sv, %struct.sv* %272, i32 0, i32 0
  %273 = load i8*, i8** %sv_any246, align 8
  %274 = bitcast i8* %273 to %struct.xpv*
  %xpv_len = getelementptr inbounds %struct.xpv, %struct.xpv* %274, i32 0, i32 2
  %275 = load i64, i64* %xpv_len, align 8
  %tobool247 = icmp ne i64 %275, 0
  br i1 %tobool247, label %if.then.248, label %if.else.251

if.then.248:                                      ; preds = %land.lhs.true.245
  %276 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any249 = getelementptr inbounds %struct.sv, %struct.sv* %276, i32 0, i32 0
  %277 = load i8*, i8** %sv_any249, align 8
  %278 = bitcast i8* %277 to %struct.xpv*
  %xpv_pv250 = getelementptr inbounds %struct.xpv, %struct.xpv* %278, i32 0, i32 0
  %279 = load i8*, i8** %xpv_pv250, align 8
  call void @Perl_safesysfree(i8* %279)
  br label %if.end.284

if.else.251:                                      ; preds = %land.lhs.true.245, %if.else.242
  %280 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any252 = getelementptr inbounds %struct.sv, %struct.sv* %280, i32 0, i32 0
  %281 = load i8*, i8** %sv_any252, align 8
  %282 = bitcast i8* %281 to %struct.xpv*
  %xpv_pv253 = getelementptr inbounds %struct.xpv, %struct.xpv* %282, i32 0, i32 0
  %283 = load i8*, i8** %xpv_pv253, align 8
  %tobool254 = icmp ne i8* %283, null
  br i1 %tobool254, label %land.lhs.true.255, label %if.end.283

land.lhs.true.255:                                ; preds = %if.else.251
  %284 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags256 = getelementptr inbounds %struct.sv, %struct.sv* %284, i32 0, i32 2
  %285 = load i32, i32* %sv_flags256, align 4
  %and257 = and i32 %285, 8388608
  %tobool258 = icmp ne i32 %and257, 0
  br i1 %tobool258, label %land.lhs.true.259, label %if.end.283

land.lhs.true.259:                                ; preds = %land.lhs.true.255
  %286 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags260 = getelementptr inbounds %struct.sv, %struct.sv* %286, i32 0, i32 2
  %287 = load i32, i32* %sv_flags260, align 4
  %and261 = and i32 %287, 1048576
  %tobool262 = icmp ne i32 %and261, 0
  br i1 %tobool262, label %if.then.263, label %if.end.283

if.then.263:                                      ; preds = %land.lhs.true.259
  %288 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any264 = getelementptr inbounds %struct.sv, %struct.sv* %288, i32 0, i32 0
  %289 = load i8*, i8** %sv_any264, align 8
  %290 = bitcast i8* %289 to %struct.xpv*
  %xpv_pv265 = getelementptr inbounds %struct.xpv, %struct.xpv* %290, i32 0, i32 0
  %291 = load i8*, i8** %xpv_pv265, align 8
  %292 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags266 = getelementptr inbounds %struct.sv, %struct.sv* %292, i32 0, i32 2
  %293 = load i32, i32* %sv_flags266, align 4
  %and267 = and i32 %293, 536870912
  %tobool268 = icmp ne i32 %and267, 0
  br i1 %tobool268, label %cond.true.269, label %cond.false.273

cond.true.269:                                    ; preds = %if.then.263
  %294 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any270 = getelementptr inbounds %struct.sv, %struct.sv* %294, i32 0, i32 0
  %295 = load i8*, i8** %sv_any270, align 8
  %296 = bitcast i8* %295 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %296, i32 0, i32 1
  %297 = load i64, i64* %xpv_cur, align 8
  %conv271 = trunc i64 %297 to i32
  %sub = sub nsw i32 0, %conv271
  %conv272 = sext i32 %sub to i64
  br label %cond.end.276

cond.false.273:                                   ; preds = %if.then.263
  %298 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any274 = getelementptr inbounds %struct.sv, %struct.sv* %298, i32 0, i32 0
  %299 = load i8*, i8** %sv_any274, align 8
  %300 = bitcast i8* %299 to %struct.xpv*
  %xpv_cur275 = getelementptr inbounds %struct.xpv, %struct.xpv* %300, i32 0, i32 1
  %301 = load i64, i64* %xpv_cur275, align 8
  br label %cond.end.276

cond.end.276:                                     ; preds = %cond.false.273, %cond.true.269
  %cond277 = phi i64 [ %conv272, %cond.true.269 ], [ %301, %cond.false.273 ]
  %conv278 = trunc i64 %cond277 to i32
  %302 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any279 = getelementptr inbounds %struct.sv, %struct.sv* %302, i32 0, i32 0
  %303 = load i8*, i8** %sv_any279, align 8
  %304 = bitcast i8* %303 to %struct.xpvuv*
  %xuv_uv = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %304, i32 0, i32 3
  %305 = load i64, i64* %xuv_uv, align 8
  %conv280 = trunc i64 %305 to i32
  call void @Perl_unsharepvn(i8* %291, i32 %conv278, i32 %conv280)
  %306 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags281 = getelementptr inbounds %struct.sv, %struct.sv* %306, i32 0, i32 2
  %307 = load i32, i32* %sv_flags281, align 4
  %and282 = and i32 %307, -1048577
  store i32 %and282, i32* %sv_flags281, align 4
  br label %if.end.283

if.end.283:                                       ; preds = %cond.end.276, %land.lhs.true.259, %land.lhs.true.255, %if.else.251
  br label %if.end.284

if.end.284:                                       ; preds = %if.end.283, %if.then.248
  br label %if.end.285

if.end.285:                                       ; preds = %if.end.284, %if.end.241
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end.147, %if.end.285, %sw.bb.195, %sw.bb.194
  %308 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags286 = getelementptr inbounds %struct.sv, %struct.sv* %308, i32 0, i32 2
  %309 = load i32, i32* %sv_flags286, align 4
  %and287 = and i32 %309, 255
  switch i32 %and287, label %sw.epilog.326 [
    i32 0, label %sw.bb.288
    i32 1, label %sw.bb.289
    i32 2, label %sw.bb.291
    i32 3, label %sw.bb.293
    i32 4, label %sw.bb.295
    i32 5, label %sw.bb.297
    i32 6, label %sw.bb.299
    i32 7, label %sw.bb.301
    i32 9, label %sw.bb.303
    i32 10, label %sw.bb.305
    i32 11, label %sw.bb.307
    i32 12, label %sw.bb.309
    i32 13, label %sw.bb.311
    i32 8, label %sw.bb.320
    i32 14, label %sw.bb.322
    i32 15, label %sw.bb.324
  ]

sw.bb.288:                                        ; preds = %sw.epilog
  br label %sw.epilog.326

sw.bb.289:                                        ; preds = %sw.epilog
  %310 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any290 = getelementptr inbounds %struct.sv, %struct.sv* %310, i32 0, i32 0
  %311 = load i8*, i8** %sv_any290, align 8
  %312 = bitcast i8* %311 to %struct.xpviv*
  call void @S_del_xiv(%struct.xpviv* %312)
  br label %sw.epilog.326

sw.bb.291:                                        ; preds = %sw.epilog
  %313 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any292 = getelementptr inbounds %struct.sv, %struct.sv* %313, i32 0, i32 0
  %314 = load i8*, i8** %sv_any292, align 8
  %315 = bitcast i8* %314 to %struct.xpvnv*
  call void @S_del_xnv(%struct.xpvnv* %315)
  br label %sw.epilog.326

sw.bb.293:                                        ; preds = %sw.epilog
  %316 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any294 = getelementptr inbounds %struct.sv, %struct.sv* %316, i32 0, i32 0
  %317 = load i8*, i8** %sv_any294, align 8
  %318 = bitcast i8* %317 to %struct.xrv*
  call void @S_del_xrv(%struct.xrv* %318)
  br label %sw.epilog.326

sw.bb.295:                                        ; preds = %sw.epilog
  %319 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any296 = getelementptr inbounds %struct.sv, %struct.sv* %319, i32 0, i32 0
  %320 = load i8*, i8** %sv_any296, align 8
  %321 = bitcast i8* %320 to %struct.xpv*
  call void @S_del_xpv(%struct.xpv* %321)
  br label %sw.epilog.326

sw.bb.297:                                        ; preds = %sw.epilog
  %322 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any298 = getelementptr inbounds %struct.sv, %struct.sv* %322, i32 0, i32 0
  %323 = load i8*, i8** %sv_any298, align 8
  %324 = bitcast i8* %323 to %struct.xpviv*
  call void @S_del_xpviv(%struct.xpviv* %324)
  br label %sw.epilog.326

sw.bb.299:                                        ; preds = %sw.epilog
  %325 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any300 = getelementptr inbounds %struct.sv, %struct.sv* %325, i32 0, i32 0
  %326 = load i8*, i8** %sv_any300, align 8
  %327 = bitcast i8* %326 to %struct.xpvnv*
  call void @S_del_xpvnv(%struct.xpvnv* %327)
  br label %sw.epilog.326

sw.bb.301:                                        ; preds = %sw.epilog
  %328 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any302 = getelementptr inbounds %struct.sv, %struct.sv* %328, i32 0, i32 0
  %329 = load i8*, i8** %sv_any302, align 8
  %330 = bitcast i8* %329 to %struct.xpvmg*
  call void @S_del_xpvmg(%struct.xpvmg* %330)
  br label %sw.epilog.326

sw.bb.303:                                        ; preds = %sw.epilog
  %331 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any304 = getelementptr inbounds %struct.sv, %struct.sv* %331, i32 0, i32 0
  %332 = load i8*, i8** %sv_any304, align 8
  %333 = bitcast i8* %332 to %struct.xpvlv*
  call void @S_del_xpvlv(%struct.xpvlv* %333)
  br label %sw.epilog.326

sw.bb.305:                                        ; preds = %sw.epilog
  %334 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any306 = getelementptr inbounds %struct.sv, %struct.sv* %334, i32 0, i32 0
  %335 = load i8*, i8** %sv_any306, align 8
  %336 = bitcast i8* %335 to %struct.xpvav*
  call void @S_del_xpvav(%struct.xpvav* %336)
  br label %sw.epilog.326

sw.bb.307:                                        ; preds = %sw.epilog
  %337 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any308 = getelementptr inbounds %struct.sv, %struct.sv* %337, i32 0, i32 0
  %338 = load i8*, i8** %sv_any308, align 8
  %339 = bitcast i8* %338 to %struct.xpvhv*
  call void @S_del_xpvhv(%struct.xpvhv* %339)
  br label %sw.epilog.326

sw.bb.309:                                        ; preds = %sw.epilog
  %340 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any310 = getelementptr inbounds %struct.sv, %struct.sv* %340, i32 0, i32 0
  %341 = load i8*, i8** %sv_any310, align 8
  %342 = bitcast i8* %341 to %struct.xpvcv*
  call void @S_del_xpvcv(%struct.xpvcv* %342)
  br label %sw.epilog.326

sw.bb.311:                                        ; preds = %sw.epilog
  %343 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any312 = getelementptr inbounds %struct.sv, %struct.sv* %343, i32 0, i32 0
  %344 = load i8*, i8** %sv_any312, align 8
  call void @Perl_safesysfree(i8* %344)
  %345 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags313 = getelementptr inbounds %struct.sv, %struct.sv* %345, i32 0, i32 2
  %346 = load i32, i32* %sv_flags313, align 4
  %and314 = and i32 %346, 4194304
  store i32 %and314, i32* %sv_flags313, align 4
  %347 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags315 = getelementptr inbounds %struct.sv, %struct.sv* %347, i32 0, i32 2
  %348 = load i32, i32* %sv_flags315, align 4
  %or316 = or i32 %348, 255
  store i32 %or316, i32* %sv_flags315, align 4
  %349 = load %struct.hv*, %struct.hv** %stash, align 8
  %tobool317 = icmp ne %struct.hv* %349, null
  br i1 %tobool317, label %if.then.318, label %if.end.319

if.then.318:                                      ; preds = %sw.bb.311
  %350 = load %struct.hv*, %struct.hv** %stash, align 8
  %351 = bitcast %struct.hv* %350 to %struct.sv*
  call void @Perl_sv_free(%struct.sv* %351)
  br label %if.end.319

if.end.319:                                       ; preds = %if.then.318, %sw.bb.311
  br label %return

sw.bb.320:                                        ; preds = %sw.epilog
  %352 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any321 = getelementptr inbounds %struct.sv, %struct.sv* %352, i32 0, i32 0
  %353 = load i8*, i8** %sv_any321, align 8
  %354 = bitcast i8* %353 to %struct.xpvbm*
  call void @S_del_xpvbm(%struct.xpvbm* %354)
  br label %sw.epilog.326

sw.bb.322:                                        ; preds = %sw.epilog
  %355 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any323 = getelementptr inbounds %struct.sv, %struct.sv* %355, i32 0, i32 0
  %356 = load i8*, i8** %sv_any323, align 8
  call void @Perl_safesysfree(i8* %356)
  br label %sw.epilog.326

sw.bb.324:                                        ; preds = %sw.epilog
  %357 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any325 = getelementptr inbounds %struct.sv, %struct.sv* %357, i32 0, i32 0
  %358 = load i8*, i8** %sv_any325, align 8
  call void @Perl_safesysfree(i8* %358)
  br label %sw.epilog.326

sw.epilog.326:                                    ; preds = %sw.epilog, %sw.bb.324, %sw.bb.322, %sw.bb.320, %sw.bb.309, %sw.bb.307, %sw.bb.305, %sw.bb.303, %sw.bb.301, %sw.bb.299, %sw.bb.297, %sw.bb.295, %sw.bb.293, %sw.bb.291, %sw.bb.289, %sw.bb.288
  %359 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags327 = getelementptr inbounds %struct.sv, %struct.sv* %359, i32 0, i32 2
  %360 = load i32, i32* %sv_flags327, align 4
  %and328 = and i32 %360, 4194304
  store i32 %and328, i32* %sv_flags327, align 4
  %361 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags329 = getelementptr inbounds %struct.sv, %struct.sv* %361, i32 0, i32 2
  %362 = load i32, i32* %sv_flags329, align 4
  %or330 = or i32 %362, 255
  store i32 %or330, i32* %sv_flags329, align 4
  br label %return

return:                                           ; preds = %sw.epilog.326, %if.end.319, %if.end.110
  ret void
}

declare %struct.cv* @Perl_gv_handler(%struct.hv*, i32) #1

; Function Attrs: nounwind uwtable
define %struct.sv* @Perl_newRV(%struct.sv* %tmpRef) #0 {
entry:
  %tmpRef.addr = alloca %struct.sv*, align 8
  store %struct.sv* %tmpRef, %struct.sv** %tmpRef.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %tmpRef.addr, align 8
  store %struct.sv* %0, %struct.sv** @PL_Sv, align 8
  %1 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %tobool = icmp ne %struct.sv* %1, null
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 1
  %3 = load i32, i32* %sv_refcnt, align 4
  %inc = add i32 %3, 1
  store i32 %inc, i32* %sv_refcnt, align 4
  %tobool1 = icmp ne i32 %inc, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %tobool1, %land.rhs ]
  %land.ext = zext i1 %4 to i32
  %5 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %call = call %struct.sv* @Perl_newRV_noinc(%struct.sv* %5)
  ret %struct.sv* %call
}

declare void @Perl_push_scope() #1

declare %struct.stackinfo* @Perl_new_stackinfo(i32, i32) #1

declare %struct.sv** @Perl_stack_grow(%struct.sv**, %struct.sv**, i32) #1

declare void @Perl_markstack_grow() #1

declare i32 @Perl_call_sv(%struct.sv*, i32) #1

declare i32 @PerlIO_printf(%struct._PerlIO**, i8*, ...) #1

declare %struct._PerlIO** @Perl_PerlIO_stderr() #1

declare void @Perl_my_exit(i32) #1

declare void @Perl_pop_scope() #1

declare %struct._PerlIO** @Perl_PerlIO_stdin() #1

declare %struct._PerlIO** @Perl_PerlIO_stdout() #1

declare signext i8 @Perl_io_close(%struct.io*, i8 signext) #1

declare i32 @closedir(%struct.__dirstream*) #1

declare void @Perl_cv_undef(%struct.cv*) #1

declare void @Perl_hv_undef(%struct.hv*) #1

declare void @Perl_av_undef(%struct.av*) #1

; Function Attrs: nounwind uwtable
define internal void @S_sv_del_backref(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %av = alloca %struct.av*, align 8
  %svp = alloca %struct.sv**, align 8
  %i = alloca i32, align 4
  %tsv = alloca %struct.sv*, align 8
  %mg = alloca %struct.magic*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 0
  %1 = load i8*, i8** %sv_any, align 8
  %2 = bitcast i8* %1 to %struct.xrv*
  %xrv_rv = getelementptr inbounds %struct.xrv, %struct.xrv* %2, i32 0, i32 0
  %3 = load %struct.sv*, %struct.sv** %xrv_rv, align 8
  store %struct.sv* %3, %struct.sv** %tsv, align 8
  store %struct.magic* null, %struct.magic** %mg, align 8
  %4 = load %struct.sv*, %struct.sv** %tsv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 2
  %5 = load i32, i32* %sv_flags, align 4
  %and = and i32 %5, 57344
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %6 = load %struct.sv*, %struct.sv** %tsv, align 8
  %call = call %struct.magic* @Perl_mg_find(%struct.sv* %6, i32 60)
  store %struct.magic* %call, %struct.magic** %mg, align 8
  %tobool1 = icmp ne %struct.magic* %call, null
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.74, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %7 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_obj = getelementptr inbounds %struct.magic, %struct.magic* %7, i32 0, i32 5
  %8 = load %struct.sv*, %struct.sv** %mg_obj, align 8
  %9 = bitcast %struct.sv* %8 to %struct.av*
  store %struct.av* %9, %struct.av** %av, align 8
  %10 = load %struct.av*, %struct.av** %av, align 8
  %sv_any2 = getelementptr inbounds %struct.av, %struct.av* %10, i32 0, i32 0
  %11 = load %struct.xpvav*, %struct.xpvav** %sv_any2, align 8
  %xav_array = getelementptr inbounds %struct.xpvav, %struct.xpvav* %11, i32 0, i32 0
  %12 = load i8*, i8** %xav_array, align 8
  %13 = bitcast i8* %12 to %struct.sv**
  store %struct.sv** %13, %struct.sv*** %svp, align 8
  %14 = load %struct.av*, %struct.av** %av, align 8
  %sv_any3 = getelementptr inbounds %struct.av, %struct.av* %14, i32 0, i32 0
  %15 = load %struct.xpvav*, %struct.xpvav** %sv_any3, align 8
  %xav_fill = getelementptr inbounds %struct.xpvav, %struct.xpvav* %15, i32 0, i32 1
  %16 = load i64, i64* %xav_fill, align 8
  %conv = trunc i64 %16 to i32
  store i32 %conv, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %17 = load i32, i32* %i, align 4
  %cmp = icmp sge i32 %17, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %18 = load i32, i32* %i, align 4
  %idxprom = sext i32 %18 to i64
  %19 = load %struct.sv**, %struct.sv*** %svp, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %19, i64 %idxprom
  %20 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  %21 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %cmp5 = icmp eq %struct.sv* %20, %21
  br i1 %cmp5, label %if.then.7, label %if.end.10

if.then.7:                                        ; preds = %for.body
  %22 = load i32, i32* %i, align 4
  %idxprom8 = sext i32 %22 to i64
  %23 = load %struct.sv**, %struct.sv*** %svp, align 8
  %arrayidx9 = getelementptr inbounds %struct.sv*, %struct.sv** %23, i64 %idxprom8
  store %struct.sv* null, %struct.sv** %arrayidx9, align 8
  br label %if.end.10

if.end.10:                                        ; preds = %if.then.7, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.10
  %24 = load i32, i32* %i, align 4
  %dec = add nsw i32 %24, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @S_del_xpvlv(%struct.xpvlv* %p) #0 {
entry:
  %p.addr = alloca %struct.xpvlv*, align 8
  store %struct.xpvlv* %p, %struct.xpvlv** %p.addr, align 8
  %0 = load %struct.xpvlv*, %struct.xpvlv** @PL_xpvlv_root, align 8
  %1 = bitcast %struct.xpvlv* %0 to i8*
  %2 = load %struct.xpvlv*, %struct.xpvlv** %p.addr, align 8
  %xpv_pv = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %2, i32 0, i32 0
  store i8* %1, i8** %xpv_pv, align 8
  %3 = load %struct.xpvlv*, %struct.xpvlv** %p.addr, align 8
  store %struct.xpvlv* %3, %struct.xpvlv** @PL_xpvlv_root, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @S_del_xpvav(%struct.xpvav* %p) #0 {
entry:
  %p.addr = alloca %struct.xpvav*, align 8
  store %struct.xpvav* %p, %struct.xpvav** %p.addr, align 8
  %0 = load %struct.xpvav*, %struct.xpvav** @PL_xpvav_root, align 8
  %1 = bitcast %struct.xpvav* %0 to i8*
  %2 = load %struct.xpvav*, %struct.xpvav** %p.addr, align 8
  %xav_array = getelementptr inbounds %struct.xpvav, %struct.xpvav* %2, i32 0, i32 0
  store i8* %1, i8** %xav_array, align 8
  %3 = load %struct.xpvav*, %struct.xpvav** %p.addr, align 8
  store %struct.xpvav* %3, %struct.xpvav** @PL_xpvav_root, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @S_del_xpvhv(%struct.xpvhv* %p) #0 {
entry:
  %p.addr = alloca %struct.xpvhv*, align 8
  store %struct.xpvhv* %p, %struct.xpvhv** %p.addr, align 8
  %0 = load %struct.xpvhv*, %struct.xpvhv** @PL_xpvhv_root, align 8
  %1 = bitcast %struct.xpvhv* %0 to i8*
  %2 = load %struct.xpvhv*, %struct.xpvhv** %p.addr, align 8
  %xhv_array = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %2, i32 0, i32 0
  store i8* %1, i8** %xhv_array, align 8
  %3 = load %struct.xpvhv*, %struct.xpvhv** %p.addr, align 8
  store %struct.xpvhv* %3, %struct.xpvhv** @PL_xpvhv_root, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @S_del_xpvcv(%struct.xpvcv* %p) #0 {
entry:
  %p.addr = alloca %struct.xpvcv*, align 8
  store %struct.xpvcv* %p, %struct.xpvcv** %p.addr, align 8
  %0 = load %struct.xpvcv*, %struct.xpvcv** @PL_xpvcv_root, align 8
  %1 = bitcast %struct.xpvcv* %0 to i8*
  %2 = load %struct.xpvcv*, %struct.xpvcv** %p.addr, align 8
  %xpv_pv = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %2, i32 0, i32 0
  store i8* %1, i8** %xpv_pv, align 8
  %3 = load %struct.xpvcv*, %struct.xpvcv** %p.addr, align 8
  store %struct.xpvcv* %3, %struct.xpvcv** @PL_xpvcv_root, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @S_del_xpvbm(%struct.xpvbm* %p) #0 {
entry:
  %p.addr = alloca %struct.xpvbm*, align 8
  store %struct.xpvbm* %p, %struct.xpvbm** %p.addr, align 8
  %0 = load %struct.xpvbm*, %struct.xpvbm** @PL_xpvbm_root, align 8
  %1 = bitcast %struct.xpvbm* %0 to i8*
  %2 = load %struct.xpvbm*, %struct.xpvbm** %p.addr, align 8
  %xpv_pv = getelementptr inbounds %struct.xpvbm, %struct.xpvbm* %2, i32 0, i32 0
  store i8* %1, i8** %xpv_pv, align 8
  %3 = load %struct.xpvbm*, %struct.xpvbm** %p.addr, align 8
  store %struct.xpvbm* %3, %struct.xpvbm** @PL_xpvbm_root, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define %struct.sv* @Perl_sv_newref(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 1
  %2 = load i32, i32* %sv_refcnt, align 4
  %inc = add i32 %2, 1
  store i32 %inc, i32* %sv_refcnt, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  ret %struct.sv* %3
}

; Function Attrs: nounwind uwtable
define i64 @Perl_sv_len(%struct.sv* %sv) #0 {
entry:
  %retval = alloca i64, align 8
  %sv.addr = alloca %struct.sv*, align 8
  %len = alloca i64, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i64 0, i64* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and = and i32 %2, 8192
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %if.then.2, label %if.else

if.then.2:                                        ; preds = %if.end
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i32 @Perl_mg_length(%struct.sv* %3)
  %conv = zext i32 %call to i64
  store i64 %conv, i64* %len, align 8
  br label %if.end.8

if.else:                                          ; preds = %if.end
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags3 = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 2
  %5 = load i32, i32* %sv_flags3, align 4
  %and4 = and i32 %5, 262144
  %cmp = icmp eq i32 %and4, 262144
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 0
  %7 = load i8*, i8** %sv_any, align 8
  %8 = bitcast i8* %7 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %8, i32 0, i32 1
  %9 = load i64, i64* %xpv_cur, align 8
  store i64 %9, i64* %len, align 8
  %10 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any6 = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 0
  %11 = load i8*, i8** %sv_any6, align 8
  %12 = bitcast i8* %11 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %12, i32 0, i32 0
  %13 = load i8*, i8** %xpv_pv, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.else
  %14 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call7 = call i8* @Perl_sv_2pv_flags(%struct.sv* %14, i64* %len, i32 2)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %13, %cond.true ], [ %call7, %cond.false ]
  br label %if.end.8

if.end.8:                                         ; preds = %cond.end, %if.then.2
  %15 = load i64, i64* %len, align 8
  store i64 %15, i64* %retval
  br label %return

return:                                           ; preds = %if.end.8, %if.then
  %16 = load i64, i64* %retval
  ret i64 %16
}

declare i32 @Perl_mg_length(%struct.sv*) #1

; Function Attrs: nounwind uwtable
define i64 @Perl_sv_len_utf8(%struct.sv* %sv) #0 {
entry:
  %retval = alloca i64, align 8
  %sv.addr = alloca %struct.sv*, align 8
  %len = alloca i64, align 8
  %ulen = alloca i64, align 8
  %s = alloca i8*, align 8
  %mg = alloca %struct.magic*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i64 0, i64* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and = and i32 %2, 8192
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %if.then.2, label %if.else

if.then.2:                                        ; preds = %if.end
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i32 @Perl_mg_length(%struct.sv* %3)
  %conv = zext i32 %call to i64
  store i64 %conv, i64* %retval
  br label %return

if.else:                                          ; preds = %if.end
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags3 = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 2
  %5 = load i32, i32* %sv_flags3, align 4
  %and4 = and i32 %5, 262144
  %cmp = icmp eq i32 %and4, 262144
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 0
  %7 = load i8*, i8** %sv_any, align 8
  %8 = bitcast i8* %7 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %8, i32 0, i32 1
  %9 = load i64, i64* %xpv_cur, align 8
  store i64 %9, i64* %len, align 8
  %10 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any6 = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 0
  %11 = load i8*, i8** %sv_any6, align 8
  %12 = bitcast i8* %11 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %12, i32 0, i32 0
  %13 = load i8*, i8** %xpv_pv, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.else
  %14 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call7 = call i8* @Perl_sv_2pv_flags(%struct.sv* %14, i64* %len, i32 2)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %13, %cond.true ], [ %call7, %cond.false ]
  store i8* %cond, i8** %s, align 8
  %15 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags8 = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 2
  %16 = load i32, i32* %sv_flags8, align 4
  %and9 = and i32 %16, 57344
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %cond.true.11, label %cond.false.13

cond.true.11:                                     ; preds = %cond.end
  %17 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call12 = call %struct.magic* @Perl_mg_find(%struct.sv* %17, i32 119)
  br label %cond.end.14

cond.false.13:                                    ; preds = %cond.end
  br label %cond.end.14

cond.end.14:                                      ; preds = %cond.false.13, %cond.true.11
  %cond15 = phi %struct.magic* [ %call12, %cond.true.11 ], [ null, %cond.false.13 ]
  store %struct.magic* %cond15, %struct.magic** %mg, align 8
  %18 = load %struct.magic*, %struct.magic** %mg, align 8
  %tobool16 = icmp ne %struct.magic* %18, null
  br i1 %tobool16, label %land.lhs.true, label %if.else.28

land.lhs.true:                                    ; preds = %cond.end.14
  %19 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_len = getelementptr inbounds %struct.magic, %struct.magic* %19, i32 0, i32 7
  %20 = load i32, i32* %mg_len, align 4
  %cmp17 = icmp ne i32 %20, -1
  br i1 %cmp17, label %land.lhs.true.19, label %if.else.28

land.lhs.true.19:                                 ; preds = %land.lhs.true
  %21 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_len20 = getelementptr inbounds %struct.magic, %struct.magic* %21, i32 0, i32 7
  %22 = load i32, i32* %mg_len20, align 4
  %cmp21 = icmp sgt i32 %22, 0
  br i1 %cmp21, label %if.then.25, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.19
  %23 = load i64, i64* %len, align 8
  %cmp23 = icmp eq i64 %23, 0
  br i1 %cmp23, label %if.then.25, label %if.else.28

if.then.25:                                       ; preds = %lor.lhs.false, %land.lhs.true.19
  %24 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_len26 = getelementptr inbounds %struct.magic, %struct.magic* %24, i32 0, i32 7
  %25 = load i32, i32* %mg_len26, align 4
  %conv27 = sext i32 %25 to i64
  store i64 %conv27, i64* %ulen, align 8
  br label %if.end.43

if.else.28:                                       ; preds = %lor.lhs.false, %land.lhs.true, %cond.end.14
  %26 = load i8*, i8** %s, align 8
  %27 = load i8*, i8** %s, align 8
  %28 = load i64, i64* %len, align 8
  %add.ptr = getelementptr inbounds i8, i8* %27, i64 %28
  %call29 = call i64 @Perl_utf8_length(i8* %26, i8* %add.ptr)
  store i64 %call29, i64* %ulen, align 8
  %29 = load %struct.magic*, %struct.magic** %mg, align 8
  %tobool30 = icmp ne %struct.magic* %29, null
  br i1 %tobool30, label %if.end.37, label %land.lhs.true.31

land.lhs.true.31:                                 ; preds = %if.else.28
  %30 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags32 = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 2
  %31 = load i32, i32* %sv_flags32, align 4
  %and33 = and i32 %31, 8388608
  %tobool34 = icmp ne i32 %and33, 0
  br i1 %tobool34, label %if.end.37, label %if.then.35

if.then.35:                                       ; preds = %land.lhs.true.31
  %32 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_magic(%struct.sv* %32, %struct.sv* null, i32 119, i8* null, i32 0)
  %33 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call36 = call %struct.magic* @Perl_mg_find(%struct.sv* %33, i32 119)
  store %struct.magic* %call36, %struct.magic** %mg, align 8
  br label %if.end.37

if.end.37:                                        ; preds = %if.then.35, %land.lhs.true.31, %if.else.28
  %34 = load %struct.magic*, %struct.magic** %mg, align 8
  %tobool38 = icmp ne %struct.magic* %34, null
  br i1 %tobool38, label %if.then.39, label %if.end.42

if.then.39:                                       ; preds = %if.end.37
  %35 = load i64, i64* %ulen, align 8
  %conv40 = trunc i64 %35 to i32
  %36 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_len41 = getelementptr inbounds %struct.magic, %struct.magic* %36, i32 0, i32 7
  store i32 %conv40, i32* %mg_len41, align 4
  br label %if.end.42

if.end.42:                                        ; preds = %if.then.39, %if.end.37
  br label %if.end.43

if.end.43:                                        ; preds = %if.end.42, %if.then.25
  %37 = load i64, i64* %ulen, align 8
  store i64 %37, i64* %retval
  br label %return

return:                                           ; preds = %if.end.43, %if.then.2, %if.then
  %38 = load i64, i64* %retval
  ret i64 %38
}

declare i64 @Perl_utf8_length(i8*, i8*) #1

; Function Attrs: nounwind uwtable
define void @Perl_sv_pos_u2b(%struct.sv* %sv, i32* %offsetp, i32* %lenp) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %offsetp.addr = alloca i32*, align 8
  %lenp.addr = alloca i32*, align 8
  %start = alloca i8*, align 8
  %s = alloca i8*, align 8
  %len = alloca i64, align 8
  %cache = alloca i64*, align 8
  %boffset = alloca i64, align 8
  %uoffset = alloca i32, align 4
  %send = alloca i8*, align 8
  %mg = alloca %struct.magic*, align 8
  %found = alloca i8, align 1
  %ulen = alloca i32, align 4
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i32* %offsetp, i32** %offsetp.addr, align 8
  store i32* %lenp, i32** %lenp.addr, align 8
  store i64* null, i64** %cache, align 8
  store i64 0, i64* %boffset, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and = and i32 %2, 262144
  %cmp = icmp eq i32 %and, 262144
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 0
  %4 = load i8*, i8** %sv_any, align 8
  %5 = bitcast i8* %4 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %5, i32 0, i32 1
  %6 = load i64, i64* %xpv_cur, align 8
  store i64 %6, i64* %len, align 8
  %7 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any1 = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 0
  %8 = load i8*, i8** %sv_any1, align 8
  %9 = bitcast i8* %8 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %9, i32 0, i32 0
  %10 = load i8*, i8** %xpv_pv, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %11 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i8* @Perl_sv_2pv_flags(%struct.sv* %11, i64* %len, i32 2)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %10, %cond.true ], [ %call, %cond.false ]
  store i8* %cond, i8** %s, align 8
  store i8* %cond, i8** %start, align 8
  %12 = load i64, i64* %len, align 8
  %tobool2 = icmp ne i64 %12, 0
  br i1 %tobool2, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %cond.end
  %13 = load i32*, i32** %offsetp.addr, align 8
  %14 = load i32, i32* %13, align 4
  store i32 %14, i32* %uoffset, align 4
  %15 = load i8*, i8** %s, align 8
  %16 = load i64, i64* %len, align 8
  %add.ptr = getelementptr inbounds i8, i8* %15, i64 %16
  store i8* %add.ptr, i8** %send, align 8
  store %struct.magic* null, %struct.magic** %mg, align 8
  store i8 0, i8* %found, align 1
  %17 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %18 = load i32*, i32** %offsetp.addr, align 8
  %19 = load i32*, i32** %offsetp.addr, align 8
  %20 = load i32, i32* %19, align 4
  %21 = load i8*, i8** %start, align 8
  %22 = load i8*, i8** %send, align 8
  %call4 = call signext i8 @S_utf8_mg_pos(%struct.sv* %17, %struct.magic** %mg, i64** %cache, i32 0, i32* %18, i32 %20, i8** %s, i8* %21, i8* %22)
  %tobool5 = icmp ne i8 %call4, 0
  br i1 %tobool5, label %if.then.6, label %if.end.7

if.then.6:                                        ; preds = %if.then.3
  store i8 1, i8* %found, align 1
  br label %if.end.7

if.end.7:                                         ; preds = %if.then.6, %if.then.3
  %23 = load i8, i8* %found, align 1
  %tobool8 = icmp ne i8 %23, 0
  br i1 %tobool8, label %if.end.24, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end.7
  %24 = load i32, i32* %uoffset, align 4
  %cmp9 = icmp sgt i32 %24, 0
  br i1 %cmp9, label %if.then.10, label %if.end.24

if.then.10:                                       ; preds = %land.lhs.true
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then.10
  %25 = load i8*, i8** %s, align 8
  %26 = load i8*, i8** %send, align 8
  %cmp11 = icmp ult i8* %25, %26
  br i1 %cmp11, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %27 = load i32, i32* %uoffset, align 4
  %dec = add nsw i32 %27, -1
  store i32 %dec, i32* %uoffset, align 4
  %tobool12 = icmp ne i32 %27, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %28 = phi i1 [ false, %while.cond ], [ %tobool12, %land.rhs ]
  br i1 %28, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %29 = load i8*, i8** %s, align 8
  %30 = load i8, i8* %29, align 1
  %idxprom = zext i8 %30 to i64
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* @PL_utf8skip, i32 0, i64 %idxprom
  %31 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %31 to i32
  %32 = load i8*, i8** %s, align 8
  %idx.ext = sext i32 %conv to i64
  %add.ptr13 = getelementptr inbounds i8, i8* %32, i64 %idx.ext
  store i8* %add.ptr13, i8** %s, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end
  %33 = load i8*, i8** %s, align 8
  %34 = load i8*, i8** %send, align 8
  %cmp14 = icmp uge i8* %33, %34
  br i1 %cmp14, label %if.then.16, label %if.end.17

if.then.16:                                       ; preds = %while.end
  %35 = load i8*, i8** %send, align 8
  store i8* %35, i8** %s, align 8
  br label %if.end.17

if.end.17:                                        ; preds = %if.then.16, %while.end
  %36 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %37 = load i32*, i32** %offsetp.addr, align 8
  %38 = load i8*, i8** %s, align 8
  %39 = load i8*, i8** %start, align 8
  %call18 = call signext i8 @S_utf8_mg_pos_init(%struct.sv* %36, %struct.magic** %mg, i64** %cache, i32 0, i32* %37, i8* %38, i8* %39)
  %tobool19 = icmp ne i8 %call18, 0
  br i1 %tobool19, label %if.then.20, label %if.end.22

if.then.20:                                       ; preds = %if.end.17
  %40 = load i64*, i64** %cache, align 8
  %arrayidx21 = getelementptr inbounds i64, i64* %40, i64 1
  %41 = load i64, i64* %arrayidx21, align 8
  store i64 %41, i64* %boffset, align 8
  br label %if.end.22

if.end.22:                                        ; preds = %if.then.20, %if.end.17
  %42 = load i8*, i8** %s, align 8
  %43 = load i8*, i8** %start, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %42 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %43 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %conv23 = trunc i64 %sub.ptr.sub to i32
  %44 = load i32*, i32** %offsetp.addr, align 8
  store i32 %conv23, i32* %44, align 4
  br label %if.end.24

if.end.24:                                        ; preds = %if.end.22, %land.lhs.true, %if.end.7
  %45 = load i32*, i32** %lenp.addr, align 8
  %tobool25 = icmp ne i32* %45, null
  br i1 %tobool25, label %if.then.26, label %if.end.66

if.then.26:                                       ; preds = %if.end.24
  store i8 0, i8* %found, align 1
  %46 = load i8*, i8** %s, align 8
  store i8* %46, i8** %start, align 8
  %47 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %48 = load i32*, i32** %lenp.addr, align 8
  %49 = load i32*, i32** %lenp.addr, align 8
  %50 = load i32, i32* %49, align 4
  %51 = load i8*, i8** %start, align 8
  %52 = load i8*, i8** %send, align 8
  %call27 = call signext i8 @S_utf8_mg_pos(%struct.sv* %47, %struct.magic** %mg, i64** %cache, i32 2, i32* %48, i32 %50, i8** %s, i8* %51, i8* %52)
  %tobool28 = icmp ne i8 %call27, 0
  br i1 %tobool28, label %if.then.29, label %if.end.32

if.then.29:                                       ; preds = %if.then.26
  %53 = load i64, i64* %boffset, align 8
  %54 = load i32*, i32** %lenp.addr, align 8
  %55 = load i32, i32* %54, align 4
  %conv30 = sext i32 %55 to i64
  %sub = sub i64 %conv30, %53
  %conv31 = trunc i64 %sub to i32
  store i32 %conv31, i32* %54, align 4
  store i8 1, i8* %found, align 1
  br label %if.end.32

if.end.32:                                        ; preds = %if.then.29, %if.then.26
  %56 = load i8, i8* %found, align 1
  %tobool33 = icmp ne i8 %56, 0
  br i1 %tobool33, label %if.end.61, label %land.lhs.true.34

land.lhs.true.34:                                 ; preds = %if.end.32
  %57 = load i32*, i32** %lenp.addr, align 8
  %58 = load i32, i32* %57, align 4
  %cmp35 = icmp sgt i32 %58, 0
  br i1 %cmp35, label %if.then.37, label %if.end.61

if.then.37:                                       ; preds = %land.lhs.true.34
  %59 = load i32*, i32** %lenp.addr, align 8
  %60 = load i32, i32* %59, align 4
  store i32 %60, i32* %ulen, align 4
  %61 = load i32, i32* %ulen, align 4
  %cmp38 = icmp sgt i32 %61, 0
  br i1 %cmp38, label %if.then.40, label %if.end.55

if.then.40:                                       ; preds = %if.then.37
  br label %while.cond.41

while.cond.41:                                    ; preds = %while.body.48, %if.then.40
  %62 = load i8*, i8** %s, align 8
  %63 = load i8*, i8** %send, align 8
  %cmp42 = icmp ult i8* %62, %63
  br i1 %cmp42, label %land.rhs.44, label %land.end.47

land.rhs.44:                                      ; preds = %while.cond.41
  %64 = load i32, i32* %ulen, align 4
  %dec45 = add nsw i32 %64, -1
  store i32 %dec45, i32* %ulen, align 4
  %tobool46 = icmp ne i32 %64, 0
  br label %land.end.47

land.end.47:                                      ; preds = %land.rhs.44, %while.cond.41
  %65 = phi i1 [ false, %while.cond.41 ], [ %tobool46, %land.rhs.44 ]
  br i1 %65, label %while.body.48, label %while.end.54

while.body.48:                                    ; preds = %land.end.47
  %66 = load i8*, i8** %s, align 8
  %67 = load i8, i8* %66, align 1
  %idxprom49 = zext i8 %67 to i64
  %arrayidx50 = getelementptr inbounds [0 x i8], [0 x i8]* @PL_utf8skip, i32 0, i64 %idxprom49
  %68 = load i8, i8* %arrayidx50, align 1
  %conv51 = zext i8 %68 to i32
  %69 = load i8*, i8** %s, align 8
  %idx.ext52 = sext i32 %conv51 to i64
  %add.ptr53 = getelementptr inbounds i8, i8* %69, i64 %idx.ext52
  store i8* %add.ptr53, i8** %s, align 8
  br label %while.cond.41

while.end.54:                                     ; preds = %land.end.47
  br label %if.end.55

if.end.55:                                        ; preds = %while.end.54, %if.then.37
  %70 = load i8*, i8** %s, align 8
  %71 = load i8*, i8** %send, align 8
  %cmp56 = icmp uge i8* %70, %71
  br i1 %cmp56, label %if.then.58, label %if.end.59

if.then.58:                                       ; preds = %if.end.55
  %72 = load i8*, i8** %send, align 8
  store i8* %72, i8** %s, align 8
  br label %if.end.59

if.end.59:                                        ; preds = %if.then.58, %if.end.55
  %73 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %74 = load i32*, i32** %lenp.addr, align 8
  %75 = load i8*, i8** %s, align 8
  %76 = load i8*, i8** %start, align 8
  %call60 = call signext i8 @S_utf8_mg_pos_init(%struct.sv* %73, %struct.magic** %mg, i64** %cache, i32 2, i32* %74, i8* %75, i8* %76)
  br label %if.end.61

if.end.61:                                        ; preds = %if.end.59, %land.lhs.true.34, %if.end.32
  %77 = load i8*, i8** %s, align 8
  %78 = load i8*, i8** %start, align 8
  %sub.ptr.lhs.cast62 = ptrtoint i8* %77 to i64
  %sub.ptr.rhs.cast63 = ptrtoint i8* %78 to i64
  %sub.ptr.sub64 = sub i64 %sub.ptr.lhs.cast62, %sub.ptr.rhs.cast63
  %conv65 = trunc i64 %sub.ptr.sub64 to i32
  %79 = load i32*, i32** %lenp.addr, align 8
  store i32 %conv65, i32* %79, align 4
  br label %if.end.66

if.end.66:                                        ; preds = %if.end.61, %if.end.24
  br label %if.end.70

if.else:                                          ; preds = %cond.end
  %80 = load i32*, i32** %offsetp.addr, align 8
  store i32 0, i32* %80, align 4
  %81 = load i32*, i32** %lenp.addr, align 8
  %tobool67 = icmp ne i32* %81, null
  br i1 %tobool67, label %if.then.68, label %if.end.69

if.then.68:                                       ; preds = %if.else
  %82 = load i32*, i32** %lenp.addr, align 8
  store i32 0, i32* %82, align 4
  br label %if.end.69

if.end.69:                                        ; preds = %if.then.68, %if.else
  br label %if.end.70

if.end.70:                                        ; preds = %if.end.69, %if.end.66
  br label %return

return:                                           ; preds = %if.end.70, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal signext i8 @S_utf8_mg_pos(%struct.sv* %sv, %struct.magic** %mgp, i64** %cachep, i32 %i, i32* %offsetp, i32 %uoff, i8** %sp, i8* %start, i8* %send) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %mgp.addr = alloca %struct.magic**, align 8
  %cachep.addr = alloca i64**, align 8
  %i.addr = alloca i32, align 4
  %offsetp.addr = alloca i32*, align 8
  %uoff.addr = alloca i32, align 4
  %sp.addr = alloca i8**, align 8
  %start.addr = alloca i8*, align 8
  %send.addr = alloca i8*, align 8
  %found = alloca i8, align 1
  %forw = alloca i64, align 8
  %backw = alloca i64, align 8
  %p = alloca i8*, align 8
  %ulen = alloca i64, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store %struct.magic** %mgp, %struct.magic*** %mgp.addr, align 8
  store i64** %cachep, i64*** %cachep.addr, align 8
  store i32 %i, i32* %i.addr, align 4
  store i32* %offsetp, i32** %offsetp.addr, align 8
  store i32 %uoff, i32* %uoff.addr, align 4
  store i8** %sp, i8*** %sp.addr, align 8
  store i8* %start, i8** %start.addr, align 8
  store i8* %send, i8** %send.addr, align 8
  store i8 0, i8* %found, align 1
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 57344
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.lhs.true, label %if.end.123

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %3, 8388608
  %tobool3 = icmp ne i32 %and2, 0
  br i1 %tobool3, label %if.end.123, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.magic**, %struct.magic*** %mgp.addr, align 8
  %5 = load %struct.magic*, %struct.magic** %4, align 8
  %tobool4 = icmp ne %struct.magic* %5, null
  br i1 %tobool4, label %if.end, label %if.then.5

if.then.5:                                        ; preds = %if.then
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call %struct.magic* @Perl_mg_find(%struct.sv* %6, i32 119)
  %7 = load %struct.magic**, %struct.magic*** %mgp.addr, align 8
  store %struct.magic* %call, %struct.magic** %7, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.5, %if.then
  %8 = load %struct.magic**, %struct.magic*** %mgp.addr, align 8
  %9 = load %struct.magic*, %struct.magic** %8, align 8
  %tobool6 = icmp ne %struct.magic* %9, null
  br i1 %tobool6, label %land.lhs.true.7, label %if.end.122

land.lhs.true.7:                                  ; preds = %if.end
  %10 = load %struct.magic**, %struct.magic*** %mgp.addr, align 8
  %11 = load %struct.magic*, %struct.magic** %10, align 8
  %mg_ptr = getelementptr inbounds %struct.magic, %struct.magic* %11, i32 0, i32 6
  %12 = load i8*, i8** %mg_ptr, align 8
  %tobool8 = icmp ne i8* %12, null
  br i1 %tobool8, label %if.then.9, label %if.end.122

if.then.9:                                        ; preds = %land.lhs.true.7
  %13 = load %struct.magic**, %struct.magic*** %mgp.addr, align 8
  %14 = load %struct.magic*, %struct.magic** %13, align 8
  %mg_ptr10 = getelementptr inbounds %struct.magic, %struct.magic* %14, i32 0, i32 6
  %15 = load i8*, i8** %mg_ptr10, align 8
  %16 = bitcast i8* %15 to i64*
  %17 = load i64**, i64*** %cachep.addr, align 8
  store i64* %16, i64** %17, align 8
  %18 = load i32, i32* %i.addr, align 4
  %idxprom = sext i32 %18 to i64
  %19 = load i64**, i64*** %cachep.addr, align 8
  %20 = load i64*, i64** %19, align 8
  %arrayidx = getelementptr inbounds i64, i64* %20, i64 %idxprom
  %21 = load i64, i64* %arrayidx, align 8
  %22 = load i32, i32* %uoff.addr, align 4
  %conv = sext i32 %22 to i64
  %cmp = icmp eq i64 %21, %conv
  br i1 %cmp, label %if.then.12, label %if.else

if.then.12:                                       ; preds = %if.then.9
  store i8 1, i8* %found, align 1
  br label %if.end.99

if.else:                                          ; preds = %if.then.9
  store i64 0, i64* %forw, align 8
  store i64 0, i64* %backw, align 8
  store i8* null, i8** %p, align 8
  %23 = load i32, i32* %i.addr, align 4
  %idxprom13 = sext i32 %23 to i64
  %24 = load i64**, i64*** %cachep.addr, align 8
  %25 = load i64*, i64** %24, align 8
  %arrayidx14 = getelementptr inbounds i64, i64* %25, i64 %idxprom13
  %26 = load i64, i64* %arrayidx14, align 8
  %27 = load i32, i32* %uoff.addr, align 4
  %conv15 = sext i32 %27 to i64
  %cmp16 = icmp ugt i64 %26, %conv15
  br i1 %cmp16, label %if.then.18, label %if.else.30

if.then.18:                                       ; preds = %if.else
  %28 = load i32, i32* %uoff.addr, align 4
  %conv19 = sext i32 %28 to i64
  store i64 %conv19, i64* %forw, align 8
  %29 = load i32, i32* %i.addr, align 4
  %idxprom20 = sext i32 %29 to i64
  %30 = load i64**, i64*** %cachep.addr, align 8
  %31 = load i64*, i64** %30, align 8
  %arrayidx21 = getelementptr inbounds i64, i64* %31, i64 %idxprom20
  %32 = load i64, i64* %arrayidx21, align 8
  %33 = load i32, i32* %uoff.addr, align 4
  %conv22 = sext i32 %33 to i64
  %sub = sub i64 %32, %conv22
  store i64 %sub, i64* %backw, align 8
  %34 = load i64, i64* %forw, align 8
  %35 = load i64, i64* %backw, align 8
  %mul = mul i64 2, %35
  %cmp23 = icmp ult i64 %34, %mul
  br i1 %cmp23, label %if.then.25, label %if.else.26

if.then.25:                                       ; preds = %if.then.18
  %36 = load i8*, i8** %start.addr, align 8
  store i8* %36, i8** %p, align 8
  br label %if.end.29

if.else.26:                                       ; preds = %if.then.18
  %37 = load i8*, i8** %start.addr, align 8
  %38 = load i32, i32* %i.addr, align 4
  %add = add nsw i32 %38, 1
  %idxprom27 = sext i32 %add to i64
  %39 = load i64**, i64*** %cachep.addr, align 8
  %40 = load i64*, i64** %39, align 8
  %arrayidx28 = getelementptr inbounds i64, i64* %40, i64 %idxprom27
  %41 = load i64, i64* %arrayidx28, align 8
  %add.ptr = getelementptr inbounds i8, i8* %37, i64 %41
  store i8* %add.ptr, i8** %p, align 8
  br label %if.end.29

if.end.29:                                        ; preds = %if.else.26, %if.then.25
  br label %if.end.57

if.else.30:                                       ; preds = %if.else
  %42 = load i32, i32* %i.addr, align 4
  %cmp31 = icmp eq i32 %42, 0
  br i1 %cmp31, label %if.then.33, label %if.end.56

if.then.33:                                       ; preds = %if.else.30
  %43 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call34 = call i64 @Perl_sv_len_utf8(%struct.sv* %43)
  store i64 %call34, i64* %ulen, align 8
  %44 = load i32, i32* %uoff.addr, align 4
  %conv35 = sext i32 %44 to i64
  %45 = load i64, i64* %ulen, align 8
  %cmp36 = icmp ult i64 %conv35, %45
  br i1 %cmp36, label %if.then.38, label %if.end.55

if.then.38:                                       ; preds = %if.then.33
  %46 = load i32, i32* %uoff.addr, align 4
  %conv39 = sext i32 %46 to i64
  %47 = load i32, i32* %i.addr, align 4
  %idxprom40 = sext i32 %47 to i64
  %48 = load i64**, i64*** %cachep.addr, align 8
  %49 = load i64*, i64** %48, align 8
  %arrayidx41 = getelementptr inbounds i64, i64* %49, i64 %idxprom40
  %50 = load i64, i64* %arrayidx41, align 8
  %sub42 = sub i64 %conv39, %50
  store i64 %sub42, i64* %forw, align 8
  %51 = load i64, i64* %ulen, align 8
  %52 = load i32, i32* %uoff.addr, align 4
  %conv43 = sext i32 %52 to i64
  %sub44 = sub i64 %51, %conv43
  store i64 %sub44, i64* %backw, align 8
  %53 = load i64, i64* %forw, align 8
  %54 = load i64, i64* %backw, align 8
  %mul45 = mul i64 2, %54
  %cmp46 = icmp ult i64 %53, %mul45
  br i1 %cmp46, label %if.then.48, label %if.else.53

if.then.48:                                       ; preds = %if.then.38
  %55 = load i8*, i8** %start.addr, align 8
  %56 = load i32, i32* %i.addr, align 4
  %add49 = add nsw i32 %56, 1
  %idxprom50 = sext i32 %add49 to i64
  %57 = load i64**, i64*** %cachep.addr, align 8
  %58 = load i64*, i64** %57, align 8
  %arrayidx51 = getelementptr inbounds i64, i64* %58, i64 %idxprom50
  %59 = load i64, i64* %arrayidx51, align 8
  %add.ptr52 = getelementptr inbounds i8, i8* %55, i64 %59
  store i8* %add.ptr52, i8** %p, align 8
  br label %if.end.54

if.else.53:                                       ; preds = %if.then.38
  %60 = load i8*, i8** %send.addr, align 8
  store i8* %60, i8** %p, align 8
  br label %if.end.54

if.end.54:                                        ; preds = %if.else.53, %if.then.48
  br label %if.end.55

if.end.55:                                        ; preds = %if.end.54, %if.then.33
  br label %if.end.56

if.end.56:                                        ; preds = %if.end.55, %if.else.30
  br label %if.end.57

if.end.57:                                        ; preds = %if.end.56, %if.end.29
  %61 = load i8*, i8** %p, align 8
  %tobool58 = icmp ne i8* %61, null
  br i1 %tobool58, label %if.then.59, label %if.end.98

if.then.59:                                       ; preds = %if.end.57
  %62 = load i64, i64* %forw, align 8
  %63 = load i64, i64* %backw, align 8
  %mul60 = mul i64 2, %63
  %cmp61 = icmp ult i64 %62, %mul60
  br i1 %cmp61, label %if.then.63, label %if.else.69

if.then.63:                                       ; preds = %if.then.59
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then.63
  %64 = load i64, i64* %forw, align 8
  %dec = add i64 %64, -1
  store i64 %dec, i64* %forw, align 8
  %tobool64 = icmp ne i64 %64, 0
  br i1 %tobool64, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %65 = load i8*, i8** %p, align 8
  %66 = load i8, i8* %65, align 1
  %idxprom65 = zext i8 %66 to i64
  %arrayidx66 = getelementptr inbounds [0 x i8], [0 x i8]* @PL_utf8skip, i32 0, i64 %idxprom65
  %67 = load i8, i8* %arrayidx66, align 1
  %conv67 = zext i8 %67 to i32
  %68 = load i8*, i8** %p, align 8
  %idx.ext = sext i32 %conv67 to i64
  %add.ptr68 = getelementptr inbounds i8, i8* %68, i64 %idx.ext
  store i8* %add.ptr68, i8** %p, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end.85

if.else.69:                                       ; preds = %if.then.59
  br label %while.cond.70

while.cond.70:                                    ; preds = %while.end.83, %if.else.69
  %69 = load i64, i64* %backw, align 8
  %dec71 = add i64 %69, -1
  store i64 %dec71, i64* %backw, align 8
  %tobool72 = icmp ne i64 %69, 0
  br i1 %tobool72, label %while.body.73, label %while.end.84

while.body.73:                                    ; preds = %while.cond.70
  %70 = load i8*, i8** %p, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %70, i32 -1
  store i8* %incdec.ptr, i8** %p, align 8
  br label %while.cond.74

while.cond.74:                                    ; preds = %while.body.81, %while.body.73
  %71 = load i8*, i8** %p, align 8
  %72 = load i8, i8* %71, align 1
  %conv75 = zext i8 %72 to i32
  %cmp76 = icmp sge i32 %conv75, 128
  br i1 %cmp76, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond.74
  %73 = load i8*, i8** %p, align 8
  %74 = load i8, i8* %73, align 1
  %conv78 = zext i8 %74 to i32
  %cmp79 = icmp sle i32 %conv78, 191
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond.74
  %75 = phi i1 [ false, %while.cond.74 ], [ %cmp79, %land.rhs ]
  br i1 %75, label %while.body.81, label %while.end.83

while.body.81:                                    ; preds = %land.end
  %76 = load i8*, i8** %p, align 8
  %incdec.ptr82 = getelementptr inbounds i8, i8* %76, i32 -1
  store i8* %incdec.ptr82, i8** %p, align 8
  br label %while.cond.74

while.end.83:                                     ; preds = %land.end
  br label %while.cond.70

while.end.84:                                     ; preds = %while.cond.70
  br label %if.end.85

if.end.85:                                        ; preds = %while.end.84, %while.end
  %77 = load i32, i32* %uoff.addr, align 4
  %conv86 = sext i32 %77 to i64
  %78 = load i32, i32* %i.addr, align 4
  %idxprom87 = sext i32 %78 to i64
  %79 = load i64**, i64*** %cachep.addr, align 8
  %80 = load i64*, i64** %79, align 8
  %arrayidx88 = getelementptr inbounds i64, i64* %80, i64 %idxprom87
  store i64 %conv86, i64* %arrayidx88, align 8
  %81 = load i8*, i8** %p, align 8
  %82 = load i8*, i8** %start.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %81 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %82 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %83 = load i32, i32* %i.addr, align 4
  %add89 = add nsw i32 %83, 1
  %idxprom90 = sext i32 %add89 to i64
  %84 = load i64**, i64*** %cachep.addr, align 8
  %85 = load i64*, i64** %84, align 8
  %arrayidx91 = getelementptr inbounds i64, i64* %85, i64 %idxprom90
  store i64 %sub.ptr.sub, i64* %arrayidx91, align 8
  %86 = load i32, i32* %i.addr, align 4
  %cmp92 = icmp eq i32 %86, 0
  br i1 %cmp92, label %if.then.94, label %if.end.97

if.then.94:                                       ; preds = %if.end.85
  %87 = load i64**, i64*** %cachep.addr, align 8
  %88 = load i64*, i64** %87, align 8
  %arrayidx95 = getelementptr inbounds i64, i64* %88, i64 2
  store i64 0, i64* %arrayidx95, align 8
  %89 = load i64**, i64*** %cachep.addr, align 8
  %90 = load i64*, i64** %89, align 8
  %arrayidx96 = getelementptr inbounds i64, i64* %90, i64 3
  store i64 0, i64* %arrayidx96, align 8
  br label %if.end.97

if.end.97:                                        ; preds = %if.then.94, %if.end.85
  store i8 1, i8* %found, align 1
  br label %if.end.98

if.end.98:                                        ; preds = %if.end.97, %if.end.57
  br label %if.end.99

if.end.99:                                        ; preds = %if.end.98, %if.then.12
  %91 = load i8, i8* %found, align 1
  %tobool100 = icmp ne i8 %91, 0
  br i1 %tobool100, label %if.then.101, label %if.end.121

if.then.101:                                      ; preds = %if.end.99
  %92 = load i32, i32* %i.addr, align 4
  %add102 = add nsw i32 %92, 1
  %idxprom103 = sext i32 %add102 to i64
  %93 = load i64**, i64*** %cachep.addr, align 8
  %94 = load i64*, i64** %93, align 8
  %arrayidx104 = getelementptr inbounds i64, i64* %94, i64 %idxprom103
  %95 = load i64, i64* %arrayidx104, align 8
  %conv105 = trunc i64 %95 to i32
  %96 = load i32*, i32** %offsetp.addr, align 8
  store i32 %conv105, i32* %96, align 4
  %97 = load i8*, i8** %start.addr, align 8
  %98 = load i32*, i32** %offsetp.addr, align 8
  %99 = load i32, i32* %98, align 4
  %idx.ext106 = sext i32 %99 to i64
  %add.ptr107 = getelementptr inbounds i8, i8* %97, i64 %idx.ext106
  %100 = load i8**, i8*** %sp.addr, align 8
  store i8* %add.ptr107, i8** %100, align 8
  %101 = load i8**, i8*** %sp.addr, align 8
  %102 = load i8*, i8** %101, align 8
  %103 = load i8*, i8** %send.addr, align 8
  %cmp108 = icmp uge i8* %102, %103
  br i1 %cmp108, label %if.then.110, label %if.else.115

if.then.110:                                      ; preds = %if.then.101
  %104 = load i8*, i8** %send.addr, align 8
  %105 = load i8**, i8*** %sp.addr, align 8
  store i8* %104, i8** %105, align 8
  %106 = load i8*, i8** %send.addr, align 8
  %107 = load i8*, i8** %start.addr, align 8
  %sub.ptr.lhs.cast111 = ptrtoint i8* %106 to i64
  %sub.ptr.rhs.cast112 = ptrtoint i8* %107 to i64
  %sub.ptr.sub113 = sub i64 %sub.ptr.lhs.cast111, %sub.ptr.rhs.cast112
  %conv114 = trunc i64 %sub.ptr.sub113 to i32
  %108 = load i32*, i32** %offsetp.addr, align 8
  store i32 %conv114, i32* %108, align 4
  br label %if.end.120

if.else.115:                                      ; preds = %if.then.101
  %109 = load i8**, i8*** %sp.addr, align 8
  %110 = load i8*, i8** %109, align 8
  %111 = load i8*, i8** %start.addr, align 8
  %cmp116 = icmp ult i8* %110, %111
  br i1 %cmp116, label %if.then.118, label %if.end.119

if.then.118:                                      ; preds = %if.else.115
  %112 = load i8*, i8** %start.addr, align 8
  %113 = load i8**, i8*** %sp.addr, align 8
  store i8* %112, i8** %113, align 8
  %114 = load i32*, i32** %offsetp.addr, align 8
  store i32 0, i32* %114, align 4
  br label %if.end.119

if.end.119:                                       ; preds = %if.then.118, %if.else.115
  br label %if.end.120

if.end.120:                                       ; preds = %if.end.119, %if.then.110
  br label %if.end.121

if.end.121:                                       ; preds = %if.end.120, %if.end.99
  br label %if.end.122

if.end.122:                                       ; preds = %if.end.121, %land.lhs.true.7, %if.end
  br label %if.end.123

if.end.123:                                       ; preds = %if.end.122, %land.lhs.true, %entry
  %115 = load i8, i8* %found, align 1
  ret i8 %115
}

; Function Attrs: nounwind uwtable
define internal signext i8 @S_utf8_mg_pos_init(%struct.sv* %sv, %struct.magic** %mgp, i64** %cachep, i32 %i, i32* %offsetp, i8* %s, i8* %start) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %mgp.addr = alloca %struct.magic**, align 8
  %cachep.addr = alloca i64**, align 8
  %i.addr = alloca i32, align 4
  %offsetp.addr = alloca i32*, align 8
  %s.addr = alloca i8*, align 8
  %start.addr = alloca i8*, align 8
  %found = alloca i8, align 1
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store %struct.magic** %mgp, %struct.magic*** %mgp.addr, align 8
  store i64** %cachep, i64*** %cachep.addr, align 8
  store i32 %i, i32* %i.addr, align 4
  store i32* %offsetp, i32** %offsetp.addr, align 8
  store i8* %s, i8** %s.addr, align 8
  store i8* %start, i8** %start.addr, align 8
  store i8 0, i8* %found, align 1
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 57344
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.lhs.true, label %if.end.14

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %3, 8388608
  %tobool3 = icmp ne i32 %and2, 0
  br i1 %tobool3, label %if.end.14, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.magic**, %struct.magic*** %mgp.addr, align 8
  %5 = load %struct.magic*, %struct.magic** %4, align 8
  %tobool4 = icmp ne %struct.magic* %5, null
  br i1 %tobool4, label %if.end, label %if.then.5

if.then.5:                                        ; preds = %if.then
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call %struct.magic* @Perl_sv_magicext(%struct.sv* %6, %struct.sv* null, i32 119, %struct.mgvtbl* @PL_vtbl_utf8, i8* null, i32 0)
  %7 = load %struct.magic**, %struct.magic*** %mgp.addr, align 8
  store %struct.magic* %call, %struct.magic** %7, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.5, %if.then
  %8 = load %struct.magic**, %struct.magic*** %mgp.addr, align 8
  %9 = load %struct.magic*, %struct.magic** %8, align 8
  %mg_ptr = getelementptr inbounds %struct.magic, %struct.magic* %9, i32 0, i32 6
  %10 = load i8*, i8** %mg_ptr, align 8
  %tobool6 = icmp ne i8* %10, null
  br i1 %tobool6, label %if.then.7, label %if.else

if.then.7:                                        ; preds = %if.end
  %11 = load %struct.magic**, %struct.magic*** %mgp.addr, align 8
  %12 = load %struct.magic*, %struct.magic** %11, align 8
  %mg_ptr8 = getelementptr inbounds %struct.magic, %struct.magic* %12, i32 0, i32 6
  %13 = load i8*, i8** %mg_ptr8, align 8
  %14 = bitcast i8* %13 to i64*
  %15 = load i64**, i64*** %cachep.addr, align 8
  store i64* %14, i64** %15, align 8
  br label %if.end.11

if.else:                                          ; preds = %if.end
  %call9 = call i8* @Perl_safesysmalloc(i64 32)
  %16 = bitcast i8* %call9 to i64*
  %17 = load i64**, i64*** %cachep.addr, align 8
  store i64* %16, i64** %17, align 8
  %18 = load i64**, i64*** %cachep.addr, align 8
  %19 = load i64*, i64** %18, align 8
  %20 = bitcast i64* %19 to i8*
  call void @llvm.memset.p0i8.i64(i8* %20, i8 0, i64 32, i32 1, i1 false)
  %21 = load i64**, i64*** %cachep.addr, align 8
  %22 = load i64*, i64** %21, align 8
  %23 = bitcast i64* %22 to i8*
  %24 = load %struct.magic**, %struct.magic*** %mgp.addr, align 8
  %25 = load %struct.magic*, %struct.magic** %24, align 8
  %mg_ptr10 = getelementptr inbounds %struct.magic, %struct.magic* %25, i32 0, i32 6
  store i8* %23, i8** %mg_ptr10, align 8
  br label %if.end.11

if.end.11:                                        ; preds = %if.else, %if.then.7
  %26 = load i32*, i32** %offsetp.addr, align 8
  %27 = load i32, i32* %26, align 4
  %conv = sext i32 %27 to i64
  %28 = load i32, i32* %i.addr, align 4
  %idxprom = sext i32 %28 to i64
  %29 = load i64**, i64*** %cachep.addr, align 8
  %30 = load i64*, i64** %29, align 8
  %arrayidx = getelementptr inbounds i64, i64* %30, i64 %idxprom
  store i64 %conv, i64* %arrayidx, align 8
  %31 = load i8*, i8** %s.addr, align 8
  %32 = load i8*, i8** %start.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %31 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %32 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %33 = load i32, i32* %i.addr, align 4
  %add = add nsw i32 %33, 1
  %idxprom12 = sext i32 %add to i64
  %34 = load i64**, i64*** %cachep.addr, align 8
  %35 = load i64*, i64** %34, align 8
  %arrayidx13 = getelementptr inbounds i64, i64* %35, i64 %idxprom12
  store i64 %sub.ptr.sub, i64* %arrayidx13, align 8
  store i8 1, i8* %found, align 1
  br label %if.end.14

if.end.14:                                        ; preds = %if.end.11, %land.lhs.true, %entry
  %36 = load i8, i8* %found, align 1
  ret i8 %36
}

; Function Attrs: nounwind uwtable
define void @Perl_sv_pos_b2u(%struct.sv* %sv, i32* %offsetp) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %offsetp.addr = alloca i32*, align 8
  %s = alloca i8*, align 8
  %len = alloca i64, align 8
  %send = alloca i8*, align 8
  %mg = alloca %struct.magic*, align 8
  %cache = alloca i64*, align 8
  %forw = alloca i64, align 8
  %backw = alloca i64, align 8
  %p = alloca i8*, align 8
  %ubackw = alloca i64, align 8
  %n = alloca i64, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i32* %offsetp, i32** %offsetp.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and = and i32 %2, 262144
  %cmp = icmp eq i32 %and, 262144
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 0
  %4 = load i8*, i8** %sv_any, align 8
  %5 = bitcast i8* %4 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %5, i32 0, i32 1
  %6 = load i64, i64* %xpv_cur, align 8
  store i64 %6, i64* %len, align 8
  %7 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any1 = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 0
  %8 = load i8*, i8** %sv_any1, align 8
  %9 = bitcast i8* %8 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %9, i32 0, i32 0
  %10 = load i8*, i8** %xpv_pv, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %11 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i8* @Perl_sv_2pv_flags(%struct.sv* %11, i64* %len, i32 2)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %10, %cond.true ], [ %call, %cond.false ]
  store i8* %cond, i8** %s, align 8
  %12 = load i64, i64* %len, align 8
  %conv = trunc i64 %12 to i32
  %13 = load i32*, i32** %offsetp.addr, align 8
  %14 = load i32, i32* %13, align 4
  %cmp2 = icmp slt i32 %conv, %14
  br i1 %cmp2, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %cond.end
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.45, i32 0, i32 0))
  br label %if.end.108

if.else:                                          ; preds = %cond.end
  %15 = load i8*, i8** %s, align 8
  %16 = load i32*, i32** %offsetp.addr, align 8
  %17 = load i32, i32* %16, align 4
  %idx.ext = sext i32 %17 to i64
  %add.ptr = getelementptr inbounds i8, i8* %15, i64 %idx.ext
  store i8* %add.ptr, i8** %send, align 8
  store %struct.magic* null, %struct.magic** %mg, align 8
  store i64* null, i64** %cache, align 8
  store i64 0, i64* %len, align 8
  %18 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags5 = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 2
  %19 = load i32, i32* %sv_flags5, align 4
  %and6 = and i32 %19, 57344
  %tobool7 = icmp ne i32 %and6, 0
  br i1 %tobool7, label %land.lhs.true, label %if.end.66

land.lhs.true:                                    ; preds = %if.else
  %20 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags8 = getelementptr inbounds %struct.sv, %struct.sv* %20, i32 0, i32 2
  %21 = load i32, i32* %sv_flags8, align 4
  %and9 = and i32 %21, 8388608
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %if.end.66, label %if.then.11

if.then.11:                                       ; preds = %land.lhs.true
  %22 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call12 = call %struct.magic* @Perl_mg_find(%struct.sv* %22, i32 119)
  store %struct.magic* %call12, %struct.magic** %mg, align 8
  %23 = load %struct.magic*, %struct.magic** %mg, align 8
  %tobool13 = icmp ne %struct.magic* %23, null
  br i1 %tobool13, label %land.lhs.true.14, label %if.end.65

land.lhs.true.14:                                 ; preds = %if.then.11
  %24 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_ptr = getelementptr inbounds %struct.magic, %struct.magic* %24, i32 0, i32 6
  %25 = load i8*, i8** %mg_ptr, align 8
  %tobool15 = icmp ne i8* %25, null
  br i1 %tobool15, label %if.then.16, label %if.end.65

if.then.16:                                       ; preds = %land.lhs.true.14
  %26 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_ptr17 = getelementptr inbounds %struct.magic, %struct.magic* %26, i32 0, i32 6
  %27 = load i8*, i8** %mg_ptr17, align 8
  %28 = bitcast i8* %27 to i64*
  store i64* %28, i64** %cache, align 8
  %29 = load i64*, i64** %cache, align 8
  %arrayidx = getelementptr inbounds i64, i64* %29, i64 1
  %30 = load i64, i64* %arrayidx, align 8
  %31 = load i32*, i32** %offsetp.addr, align 8
  %32 = load i32, i32* %31, align 4
  %conv18 = sext i32 %32 to i64
  %cmp19 = icmp eq i64 %30, %conv18
  br i1 %cmp19, label %if.then.21, label %if.else.24

if.then.21:                                       ; preds = %if.then.16
  %33 = load i64*, i64** %cache, align 8
  %arrayidx22 = getelementptr inbounds i64, i64* %33, i64 0
  %34 = load i64, i64* %arrayidx22, align 8
  %conv23 = trunc i64 %34 to i32
  %35 = load i32*, i32** %offsetp.addr, align 8
  store i32 %conv23, i32* %35, align 4
  br label %return

if.else.24:                                       ; preds = %if.then.16
  %36 = load i64*, i64** %cache, align 8
  %arrayidx25 = getelementptr inbounds i64, i64* %36, i64 1
  %37 = load i64, i64* %arrayidx25, align 8
  %38 = load i32*, i32** %offsetp.addr, align 8
  %39 = load i32, i32* %38, align 4
  %conv26 = sext i32 %39 to i64
  %cmp27 = icmp ult i64 %37, %conv26
  br i1 %cmp27, label %if.then.29, label %if.else.33

if.then.29:                                       ; preds = %if.else.24
  %40 = load i64*, i64** %cache, align 8
  %arrayidx30 = getelementptr inbounds i64, i64* %40, i64 0
  %41 = load i64, i64* %arrayidx30, align 8
  store i64 %41, i64* %len, align 8
  %42 = load i64*, i64** %cache, align 8
  %arrayidx31 = getelementptr inbounds i64, i64* %42, i64 1
  %43 = load i64, i64* %arrayidx31, align 8
  %44 = load i8*, i8** %s, align 8
  %add.ptr32 = getelementptr inbounds i8, i8* %44, i64 %43
  store i8* %add.ptr32, i8** %s, align 8
  br label %if.end.63

if.else.33:                                       ; preds = %if.else.24
  %45 = load i32*, i32** %offsetp.addr, align 8
  %46 = load i32, i32* %45, align 4
  %conv34 = sext i32 %46 to i64
  store i64 %conv34, i64* %forw, align 8
  %47 = load i64*, i64** %cache, align 8
  %arrayidx35 = getelementptr inbounds i64, i64* %47, i64 1
  %48 = load i64, i64* %arrayidx35, align 8
  %49 = load i32*, i32** %offsetp.addr, align 8
  %50 = load i32, i32* %49, align 4
  %conv36 = sext i32 %50 to i64
  %sub = sub i64 %48, %conv36
  store i64 %sub, i64* %backw, align 8
  %51 = load i64, i64* %forw, align 8
  %52 = load i64, i64* %backw, align 8
  %mul = mul i64 2, %52
  %cmp37 = icmp ult i64 %51, %mul
  br i1 %cmp37, label %if.end.62, label %if.then.39

if.then.39:                                       ; preds = %if.else.33
  %53 = load i8*, i8** %s, align 8
  %54 = load i64*, i64** %cache, align 8
  %arrayidx40 = getelementptr inbounds i64, i64* %54, i64 1
  %55 = load i64, i64* %arrayidx40, align 8
  %add.ptr41 = getelementptr inbounds i8, i8* %53, i64 %55
  store i8* %add.ptr41, i8** %p, align 8
  store i64 0, i64* %ubackw, align 8
  %56 = load i64, i64* %backw, align 8
  %57 = load i64*, i64** %cache, align 8
  %arrayidx42 = getelementptr inbounds i64, i64* %57, i64 1
  %58 = load i64, i64* %arrayidx42, align 8
  %sub43 = sub i64 %58, %56
  store i64 %sub43, i64* %arrayidx42, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.end, %if.then.39
  %59 = load i64, i64* %backw, align 8
  %dec = add i64 %59, -1
  store i64 %dec, i64* %backw, align 8
  %tobool44 = icmp ne i64 %59, 0
  br i1 %tobool44, label %while.body, label %while.end.55

while.body:                                       ; preds = %while.cond
  %60 = load i8*, i8** %p, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %60, i32 -1
  store i8* %incdec.ptr, i8** %p, align 8
  br label %while.cond.45

while.cond.45:                                    ; preds = %while.body.52, %while.body
  %61 = load i8*, i8** %p, align 8
  %62 = load i8, i8* %61, align 1
  %conv46 = zext i8 %62 to i32
  %cmp47 = icmp sge i32 %conv46, 128
  br i1 %cmp47, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond.45
  %63 = load i8*, i8** %p, align 8
  %64 = load i8, i8* %63, align 1
  %conv49 = zext i8 %64 to i32
  %cmp50 = icmp sle i32 %conv49, 191
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond.45
  %65 = phi i1 [ false, %while.cond.45 ], [ %cmp50, %land.rhs ]
  br i1 %65, label %while.body.52, label %while.end

while.body.52:                                    ; preds = %land.end
  %66 = load i8*, i8** %p, align 8
  %incdec.ptr53 = getelementptr inbounds i8, i8* %66, i32 -1
  store i8* %incdec.ptr53, i8** %p, align 8
  %67 = load i64, i64* %backw, align 8
  %dec54 = add i64 %67, -1
  store i64 %dec54, i64* %backw, align 8
  br label %while.cond.45

while.end:                                        ; preds = %land.end
  %68 = load i64, i64* %ubackw, align 8
  %inc = add i64 %68, 1
  store i64 %inc, i64* %ubackw, align 8
  br label %while.cond

while.end.55:                                     ; preds = %while.cond
  %69 = load i64, i64* %ubackw, align 8
  %70 = load i64*, i64** %cache, align 8
  %arrayidx56 = getelementptr inbounds i64, i64* %70, i64 0
  %71 = load i64, i64* %arrayidx56, align 8
  %sub57 = sub i64 %71, %69
  store i64 %sub57, i64* %arrayidx56, align 8
  %72 = load i64*, i64** %cache, align 8
  %arrayidx58 = getelementptr inbounds i64, i64* %72, i64 0
  %73 = load i64, i64* %arrayidx58, align 8
  %conv59 = trunc i64 %73 to i32
  %74 = load i32*, i32** %offsetp.addr, align 8
  store i32 %conv59, i32* %74, align 4
  %75 = load i64*, i64** %cache, align 8
  %arrayidx60 = getelementptr inbounds i64, i64* %75, i64 2
  store i64 0, i64* %arrayidx60, align 8
  %76 = load i64*, i64** %cache, align 8
  %arrayidx61 = getelementptr inbounds i64, i64* %76, i64 3
  store i64 0, i64* %arrayidx61, align 8
  br label %return

if.end.62:                                        ; preds = %if.else.33
  br label %if.end.63

if.end.63:                                        ; preds = %if.end.62, %if.then.29
  br label %if.end.64

if.end.64:                                        ; preds = %if.end.63
  br label %if.end.65

if.end.65:                                        ; preds = %if.end.64, %land.lhs.true.14, %if.then.11
  br label %if.end.66

if.end.66:                                        ; preds = %if.end.65, %land.lhs.true, %if.else
  br label %while.cond.67

while.cond.67:                                    ; preds = %if.end.85, %if.end.66
  %77 = load i8*, i8** %s, align 8
  %78 = load i8*, i8** %send, align 8
  %cmp68 = icmp ult i8* %77, %78
  br i1 %cmp68, label %while.body.70, label %while.end.86

while.body.70:                                    ; preds = %while.cond.67
  store i64 1, i64* %n, align 8
  %79 = load i8*, i8** %s, align 8
  %80 = load i8, i8* %79, align 1
  %conv71 = zext i8 %80 to i64
  %cmp72 = icmp ult i64 %conv71, 128
  br i1 %cmp72, label %if.end.78, label %if.then.74

if.then.74:                                       ; preds = %while.body.70
  %81 = load i8*, i8** %s, align 8
  %82 = load i8*, i8** %s, align 8
  %83 = load i8, i8* %82, align 1
  %idxprom = zext i8 %83 to i64
  %arrayidx75 = getelementptr inbounds [0 x i8], [0 x i8]* @PL_utf8skip, i32 0, i64 %idxprom
  %84 = load i8, i8* %arrayidx75, align 1
  %conv76 = zext i8 %84 to i64
  %call77 = call i64 @Perl_utf8n_to_uvuni(i8* %81, i64 %conv76, i64* %n, i32 0)
  br label %if.end.78

if.end.78:                                        ; preds = %if.then.74, %while.body.70
  %85 = load i64, i64* %n, align 8
  %cmp79 = icmp ugt i64 %85, 0
  br i1 %cmp79, label %if.then.81, label %if.else.84

if.then.81:                                       ; preds = %if.end.78
  %86 = load i64, i64* %n, align 8
  %87 = load i8*, i8** %s, align 8
  %add.ptr82 = getelementptr inbounds i8, i8* %87, i64 %86
  store i8* %add.ptr82, i8** %s, align 8
  %88 = load i64, i64* %len, align 8
  %inc83 = add i64 %88, 1
  store i64 %inc83, i64* %len, align 8
  br label %if.end.85

if.else.84:                                       ; preds = %if.end.78
  br label %while.end.86

if.end.85:                                        ; preds = %if.then.81
  br label %while.cond.67

while.end.86:                                     ; preds = %if.else.84, %while.cond.67
  %89 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags87 = getelementptr inbounds %struct.sv, %struct.sv* %89, i32 0, i32 2
  %90 = load i32, i32* %sv_flags87, align 4
  %and88 = and i32 %90, 8388608
  %tobool89 = icmp ne i32 %and88, 0
  br i1 %tobool89, label %if.end.106, label %if.then.90

if.then.90:                                       ; preds = %while.end.86
  %91 = load %struct.magic*, %struct.magic** %mg, align 8
  %tobool91 = icmp ne %struct.magic* %91, null
  br i1 %tobool91, label %if.end.94, label %if.then.92

if.then.92:                                       ; preds = %if.then.90
  %92 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_magic(%struct.sv* %92, %struct.sv* null, i32 119, i8* null, i32 0)
  %93 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call93 = call %struct.magic* @Perl_mg_find(%struct.sv* %93, i32 119)
  store %struct.magic* %call93, %struct.magic** %mg, align 8
  br label %if.end.94

if.end.94:                                        ; preds = %if.then.92, %if.then.90
  %94 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_ptr95 = getelementptr inbounds %struct.magic, %struct.magic* %94, i32 0, i32 6
  %95 = load i8*, i8** %mg_ptr95, align 8
  %tobool96 = icmp ne i8* %95, null
  br i1 %tobool96, label %if.end.100, label %if.then.97

if.then.97:                                       ; preds = %if.end.94
  %call98 = call i8* @Perl_safesysmalloc(i64 32)
  %96 = bitcast i8* %call98 to i64*
  store i64* %96, i64** %cache, align 8
  %97 = load i64*, i64** %cache, align 8
  %98 = bitcast i64* %97 to i8*
  call void @llvm.memset.p0i8.i64(i8* %98, i8 0, i64 32, i32 1, i1 false)
  %99 = load i64*, i64** %cache, align 8
  %100 = bitcast i64* %99 to i8*
  %101 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_ptr99 = getelementptr inbounds %struct.magic, %struct.magic* %101, i32 0, i32 6
  store i8* %100, i8** %mg_ptr99, align 8
  br label %if.end.100

if.end.100:                                       ; preds = %if.then.97, %if.end.94
  %102 = load i64, i64* %len, align 8
  %103 = load i64*, i64** %cache, align 8
  %arrayidx101 = getelementptr inbounds i64, i64* %103, i64 0
  store i64 %102, i64* %arrayidx101, align 8
  %104 = load i32*, i32** %offsetp.addr, align 8
  %105 = load i32, i32* %104, align 4
  %conv102 = sext i32 %105 to i64
  %106 = load i64*, i64** %cache, align 8
  %arrayidx103 = getelementptr inbounds i64, i64* %106, i64 1
  store i64 %conv102, i64* %arrayidx103, align 8
  %107 = load i64*, i64** %cache, align 8
  %arrayidx104 = getelementptr inbounds i64, i64* %107, i64 2
  store i64 0, i64* %arrayidx104, align 8
  %108 = load i64*, i64** %cache, align 8
  %arrayidx105 = getelementptr inbounds i64, i64* %108, i64 3
  store i64 0, i64* %arrayidx105, align 8
  br label %if.end.106

if.end.106:                                       ; preds = %if.end.100, %while.end.86
  %109 = load i64, i64* %len, align 8
  %conv107 = trunc i64 %109 to i32
  %110 = load i32*, i32** %offsetp.addr, align 8
  store i32 %conv107, i32* %110, align 4
  br label %if.end.108

if.end.108:                                       ; preds = %if.end.106, %if.then.4
  br label %return

return:                                           ; preds = %if.end.108, %while.end.55, %if.then.21, %if.then
  ret void
}

declare i64 @Perl_utf8n_to_uvuni(i8*, i64, i64*, i32) #1

; Function Attrs: nounwind uwtable
define i32 @Perl_sv_eq(%struct.sv* %sv1, %struct.sv* %sv2) #0 {
entry:
  %retval = alloca i32, align 4
  %sv1.addr = alloca %struct.sv*, align 8
  %sv2.addr = alloca %struct.sv*, align 8
  %pv1 = alloca i8*, align 8
  %cur1 = alloca i64, align 8
  %pv2 = alloca i8*, align 8
  %cur2 = alloca i64, align 8
  %eq = alloca i32, align 4
  %tpv = alloca i8*, align 8
  %svrecode = alloca %struct.sv*, align 8
  %is_utf8 = alloca i8, align 1
  %pv = alloca i8*, align 8
  %pv83 = alloca i8*, align 8
  store %struct.sv* %sv1, %struct.sv** %sv1.addr, align 8
  store %struct.sv* %sv2, %struct.sv** %sv2.addr, align 8
  store i32 0, i32* %eq, align 4
  store i8* null, i8** %tpv, align 8
  store %struct.sv* null, %struct.sv** %svrecode, align 8
  %0 = load %struct.sv*, %struct.sv** %sv1.addr, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0), i8** %pv1, align 8
  store i64 0, i64* %cur1, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** %sv1.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and = and i32 %2, 262144
  %cmp = icmp eq i32 %and, 262144
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else
  %3 = load %struct.sv*, %struct.sv** %sv1.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 0
  %4 = load i8*, i8** %sv_any, align 8
  %5 = bitcast i8* %4 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %5, i32 0, i32 1
  %6 = load i64, i64* %xpv_cur, align 8
  store i64 %6, i64* %cur1, align 8
  %7 = load %struct.sv*, %struct.sv** %sv1.addr, align 8
  %sv_any1 = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 0
  %8 = load i8*, i8** %sv_any1, align 8
  %9 = bitcast i8* %8 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %9, i32 0, i32 0
  %10 = load i8*, i8** %xpv_pv, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.else
  %11 = load %struct.sv*, %struct.sv** %sv1.addr, align 8
  %call = call i8* @Perl_sv_2pv_flags(%struct.sv* %11, i64* %cur1, i32 2)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %10, %cond.true ], [ %call, %cond.false ]
  store i8* %cond, i8** %pv1, align 8
  br label %if.end

if.end:                                           ; preds = %cond.end, %if.then
  %12 = load %struct.sv*, %struct.sv** %sv2.addr, align 8
  %tobool2 = icmp ne %struct.sv* %12, null
  br i1 %tobool2, label %if.else.4, label %if.then.3

if.then.3:                                        ; preds = %if.end
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0), i8** %pv2, align 8
  store i64 0, i64* %cur2, align 8
  br label %if.end.17

if.else.4:                                        ; preds = %if.end
  %13 = load %struct.sv*, %struct.sv** %sv2.addr, align 8
  %sv_flags5 = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 2
  %14 = load i32, i32* %sv_flags5, align 4
  %and6 = and i32 %14, 262144
  %cmp7 = icmp eq i32 %and6, 262144
  br i1 %cmp7, label %cond.true.8, label %cond.false.13

cond.true.8:                                      ; preds = %if.else.4
  %15 = load %struct.sv*, %struct.sv** %sv2.addr, align 8
  %sv_any9 = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 0
  %16 = load i8*, i8** %sv_any9, align 8
  %17 = bitcast i8* %16 to %struct.xpv*
  %xpv_cur10 = getelementptr inbounds %struct.xpv, %struct.xpv* %17, i32 0, i32 1
  %18 = load i64, i64* %xpv_cur10, align 8
  store i64 %18, i64* %cur2, align 8
  %19 = load %struct.sv*, %struct.sv** %sv2.addr, align 8
  %sv_any11 = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 0
  %20 = load i8*, i8** %sv_any11, align 8
  %21 = bitcast i8* %20 to %struct.xpv*
  %xpv_pv12 = getelementptr inbounds %struct.xpv, %struct.xpv* %21, i32 0, i32 0
  %22 = load i8*, i8** %xpv_pv12, align 8
  br label %cond.end.15

cond.false.13:                                    ; preds = %if.else.4
  %23 = load %struct.sv*, %struct.sv** %sv2.addr, align 8
  %call14 = call i8* @Perl_sv_2pv_flags(%struct.sv* %23, i64* %cur2, i32 2)
  br label %cond.end.15

cond.end.15:                                      ; preds = %cond.false.13, %cond.true.8
  %cond16 = phi i8* [ %22, %cond.true.8 ], [ %call14, %cond.false.13 ]
  store i8* %cond16, i8** %pv2, align 8
  br label %if.end.17

if.end.17:                                        ; preds = %cond.end.15, %if.then.3
  %24 = load i64, i64* %cur1, align 8
  %tobool18 = icmp ne i64 %24, 0
  br i1 %tobool18, label %land.lhs.true, label %if.end.94

land.lhs.true:                                    ; preds = %if.end.17
  %25 = load i64, i64* %cur2, align 8
  %tobool19 = icmp ne i64 %25, 0
  br i1 %tobool19, label %land.lhs.true.20, label %if.end.94

land.lhs.true.20:                                 ; preds = %land.lhs.true
  %26 = load %struct.sv*, %struct.sv** %sv1.addr, align 8
  %sv_flags21 = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 2
  %27 = load i32, i32* %sv_flags21, align 4
  %and22 = and i32 %27, 536870912
  %28 = load %struct.sv*, %struct.sv** %sv2.addr, align 8
  %sv_flags23 = getelementptr inbounds %struct.sv, %struct.sv* %28, i32 0, i32 2
  %29 = load i32, i32* %sv_flags23, align 4
  %and24 = and i32 %29, 536870912
  %cmp25 = icmp ne i32 %and22, %and24
  br i1 %cmp25, label %land.lhs.true.26, label %if.end.94

land.lhs.true.26:                                 ; preds = %land.lhs.true.20
  %30 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %op_private = getelementptr inbounds %struct.cop, %struct.cop* %30, i32 0, i32 7
  %31 = load i8, i8* %op_private, align 1
  %conv = zext i8 %31 to i32
  %and27 = and i32 %conv, 8
  %tobool28 = icmp ne i32 %and27, 0
  br i1 %tobool28, label %if.end.94, label %if.then.29

if.then.29:                                       ; preds = %land.lhs.true.26
  %32 = load %struct.sv*, %struct.sv** @PL_encoding, align 8
  %tobool30 = icmp ne %struct.sv* %32, null
  br i1 %tobool30, label %if.then.31, label %if.else.72

if.then.31:                                       ; preds = %if.then.29
  %33 = load %struct.sv*, %struct.sv** %sv1.addr, align 8
  %sv_flags32 = getelementptr inbounds %struct.sv, %struct.sv* %33, i32 0, i32 2
  %34 = load i32, i32* %sv_flags32, align 4
  %and33 = and i32 %34, 536870912
  %tobool34 = icmp ne i32 %and33, 0
  br i1 %tobool34, label %if.then.35, label %if.else.51

if.then.35:                                       ; preds = %if.then.31
  %35 = load i8*, i8** %pv2, align 8
  %36 = load i64, i64* %cur2, align 8
  %call36 = call %struct.sv* @Perl_newSVpvn(i8* %35, i64 %36)
  store %struct.sv* %call36, %struct.sv** %svrecode, align 8
  %37 = load %struct.sv*, %struct.sv** %svrecode, align 8
  %38 = load %struct.sv*, %struct.sv** @PL_encoding, align 8
  %call37 = call i8* @Perl_sv_recode_to_utf8(%struct.sv* %37, %struct.sv* %38)
  %39 = load %struct.sv*, %struct.sv** %svrecode, align 8
  %sv_flags38 = getelementptr inbounds %struct.sv, %struct.sv* %39, i32 0, i32 2
  %40 = load i32, i32* %sv_flags38, align 4
  %and39 = and i32 %40, 262144
  %cmp40 = icmp eq i32 %and39, 262144
  br i1 %cmp40, label %cond.true.42, label %cond.false.47

cond.true.42:                                     ; preds = %if.then.35
  %41 = load %struct.sv*, %struct.sv** %svrecode, align 8
  %sv_any43 = getelementptr inbounds %struct.sv, %struct.sv* %41, i32 0, i32 0
  %42 = load i8*, i8** %sv_any43, align 8
  %43 = bitcast i8* %42 to %struct.xpv*
  %xpv_cur44 = getelementptr inbounds %struct.xpv, %struct.xpv* %43, i32 0, i32 1
  %44 = load i64, i64* %xpv_cur44, align 8
  store i64 %44, i64* %cur2, align 8
  %45 = load %struct.sv*, %struct.sv** %svrecode, align 8
  %sv_any45 = getelementptr inbounds %struct.sv, %struct.sv* %45, i32 0, i32 0
  %46 = load i8*, i8** %sv_any45, align 8
  %47 = bitcast i8* %46 to %struct.xpv*
  %xpv_pv46 = getelementptr inbounds %struct.xpv, %struct.xpv* %47, i32 0, i32 0
  %48 = load i8*, i8** %xpv_pv46, align 8
  br label %cond.end.49

cond.false.47:                                    ; preds = %if.then.35
  %49 = load %struct.sv*, %struct.sv** %svrecode, align 8
  %call48 = call i8* @Perl_sv_2pv_flags(%struct.sv* %49, i64* %cur2, i32 2)
  br label %cond.end.49

cond.end.49:                                      ; preds = %cond.false.47, %cond.true.42
  %cond50 = phi i8* [ %48, %cond.true.42 ], [ %call48, %cond.false.47 ]
  store i8* %cond50, i8** %pv2, align 8
  br label %if.end.67

if.else.51:                                       ; preds = %if.then.31
  %50 = load i8*, i8** %pv1, align 8
  %51 = load i64, i64* %cur1, align 8
  %call52 = call %struct.sv* @Perl_newSVpvn(i8* %50, i64 %51)
  store %struct.sv* %call52, %struct.sv** %svrecode, align 8
  %52 = load %struct.sv*, %struct.sv** %svrecode, align 8
  %53 = load %struct.sv*, %struct.sv** @PL_encoding, align 8
  %call53 = call i8* @Perl_sv_recode_to_utf8(%struct.sv* %52, %struct.sv* %53)
  %54 = load %struct.sv*, %struct.sv** %svrecode, align 8
  %sv_flags54 = getelementptr inbounds %struct.sv, %struct.sv* %54, i32 0, i32 2
  %55 = load i32, i32* %sv_flags54, align 4
  %and55 = and i32 %55, 262144
  %cmp56 = icmp eq i32 %and55, 262144
  br i1 %cmp56, label %cond.true.58, label %cond.false.63

cond.true.58:                                     ; preds = %if.else.51
  %56 = load %struct.sv*, %struct.sv** %svrecode, align 8
  %sv_any59 = getelementptr inbounds %struct.sv, %struct.sv* %56, i32 0, i32 0
  %57 = load i8*, i8** %sv_any59, align 8
  %58 = bitcast i8* %57 to %struct.xpv*
  %xpv_cur60 = getelementptr inbounds %struct.xpv, %struct.xpv* %58, i32 0, i32 1
  %59 = load i64, i64* %xpv_cur60, align 8
  store i64 %59, i64* %cur1, align 8
  %60 = load %struct.sv*, %struct.sv** %svrecode, align 8
  %sv_any61 = getelementptr inbounds %struct.sv, %struct.sv* %60, i32 0, i32 0
  %61 = load i8*, i8** %sv_any61, align 8
  %62 = bitcast i8* %61 to %struct.xpv*
  %xpv_pv62 = getelementptr inbounds %struct.xpv, %struct.xpv* %62, i32 0, i32 0
  %63 = load i8*, i8** %xpv_pv62, align 8
  br label %cond.end.65

cond.false.63:                                    ; preds = %if.else.51
  %64 = load %struct.sv*, %struct.sv** %svrecode, align 8
  %call64 = call i8* @Perl_sv_2pv_flags(%struct.sv* %64, i64* %cur1, i32 2)
  br label %cond.end.65

cond.end.65:                                      ; preds = %cond.false.63, %cond.true.58
  %cond66 = phi i8* [ %63, %cond.true.58 ], [ %call64, %cond.false.63 ]
  store i8* %cond66, i8** %pv1, align 8
  br label %if.end.67

if.end.67:                                        ; preds = %cond.end.65, %cond.end.49
  %65 = load i64, i64* %cur1, align 8
  %66 = load i64, i64* %cur2, align 8
  %cmp68 = icmp ne i64 %65, %66
  br i1 %cmp68, label %if.then.70, label %if.end.71

if.then.70:                                       ; preds = %if.end.67
  %67 = load %struct.sv*, %struct.sv** %svrecode, align 8
  call void @Perl_sv_free(%struct.sv* %67)
  store i32 0, i32* %retval
  br label %return

if.end.71:                                        ; preds = %if.end.67
  br label %if.end.93

if.else.72:                                       ; preds = %if.then.29
  store i8 1, i8* %is_utf8, align 1
  %68 = load %struct.sv*, %struct.sv** %sv1.addr, align 8
  %sv_flags73 = getelementptr inbounds %struct.sv, %struct.sv* %68, i32 0, i32 2
  %69 = load i32, i32* %sv_flags73, align 4
  %and74 = and i32 %69, 536870912
  %tobool75 = icmp ne i32 %and74, 0
  br i1 %tobool75, label %if.then.76, label %if.else.82

if.then.76:                                       ; preds = %if.else.72
  %70 = load i8*, i8** %pv1, align 8
  %call77 = call i8* @Perl_bytes_from_utf8(i8* %70, i64* %cur1, i8* %is_utf8)
  store i8* %call77, i8** %pv, align 8
  %71 = load i8*, i8** %pv, align 8
  %72 = load i8*, i8** %pv1, align 8
  %cmp78 = icmp ne i8* %71, %72
  br i1 %cmp78, label %if.then.80, label %if.end.81

if.then.80:                                       ; preds = %if.then.76
  %73 = load i8*, i8** %pv, align 8
  store i8* %73, i8** %tpv, align 8
  store i8* %73, i8** %pv1, align 8
  br label %if.end.81

if.end.81:                                        ; preds = %if.then.80, %if.then.76
  br label %if.end.89

if.else.82:                                       ; preds = %if.else.72
  %74 = load i8*, i8** %pv2, align 8
  %call84 = call i8* @Perl_bytes_from_utf8(i8* %74, i64* %cur2, i8* %is_utf8)
  store i8* %call84, i8** %pv83, align 8
  %75 = load i8*, i8** %pv83, align 8
  %76 = load i8*, i8** %pv2, align 8
  %cmp85 = icmp ne i8* %75, %76
  br i1 %cmp85, label %if.then.87, label %if.end.88

if.then.87:                                       ; preds = %if.else.82
  %77 = load i8*, i8** %pv83, align 8
  store i8* %77, i8** %tpv, align 8
  store i8* %77, i8** %pv2, align 8
  br label %if.end.88

if.end.88:                                        ; preds = %if.then.87, %if.else.82
  br label %if.end.89

if.end.89:                                        ; preds = %if.end.88, %if.end.81
  %78 = load i8, i8* %is_utf8, align 1
  %tobool90 = icmp ne i8 %78, 0
  br i1 %tobool90, label %if.then.91, label %if.end.92

if.then.91:                                       ; preds = %if.end.89
  store i32 0, i32* %retval
  br label %return

if.end.92:                                        ; preds = %if.end.89
  br label %if.end.93

if.end.93:                                        ; preds = %if.end.92, %if.end.71
  br label %if.end.94

if.end.94:                                        ; preds = %if.end.93, %land.lhs.true.26, %land.lhs.true.20, %land.lhs.true, %if.end.17
  %79 = load i64, i64* %cur1, align 8
  %80 = load i64, i64* %cur2, align 8
  %cmp95 = icmp eq i64 %79, %80
  br i1 %cmp95, label %if.then.97, label %if.end.100

if.then.97:                                       ; preds = %if.end.94
  %81 = load i8*, i8** %pv1, align 8
  %82 = load i8*, i8** %pv2, align 8
  %83 = load i64, i64* %cur1, align 8
  %call98 = call i32 @memcmp(i8* %81, i8* %82, i64 %83)
  %tobool99 = icmp ne i32 %call98, 0
  %lnot = xor i1 %tobool99, true
  %lnot.ext = zext i1 %lnot to i32
  store i32 %lnot.ext, i32* %eq, align 4
  br label %if.end.100

if.end.100:                                       ; preds = %if.then.97, %if.end.94
  %84 = load %struct.sv*, %struct.sv** %svrecode, align 8
  %tobool101 = icmp ne %struct.sv* %84, null
  br i1 %tobool101, label %if.then.102, label %if.end.103

if.then.102:                                      ; preds = %if.end.100
  %85 = load %struct.sv*, %struct.sv** %svrecode, align 8
  call void @Perl_sv_free(%struct.sv* %85)
  br label %if.end.103

if.end.103:                                       ; preds = %if.then.102, %if.end.100
  %86 = load i8*, i8** %tpv, align 8
  %tobool104 = icmp ne i8* %86, null
  br i1 %tobool104, label %if.then.105, label %if.end.106

if.then.105:                                      ; preds = %if.end.103
  %87 = load i8*, i8** %tpv, align 8
  call void @Perl_safesysfree(i8* %87)
  br label %if.end.106

if.end.106:                                       ; preds = %if.then.105, %if.end.103
  %88 = load i32, i32* %eq, align 4
  store i32 %88, i32* %retval
  br label %return

return:                                           ; preds = %if.end.106, %if.then.91, %if.then.70
  %89 = load i32, i32* %retval
  ret i32 %89
}

declare i8* @Perl_bytes_from_utf8(i8*, i64*, i8*) #1

declare i32 @memcmp(i8*, i8*, i64) #1

; Function Attrs: nounwind uwtable
define i32 @Perl_sv_cmp_locale(%struct.sv* %sv1, %struct.sv* %sv2) #0 {
entry:
  %sv1.addr = alloca %struct.sv*, align 8
  %sv2.addr = alloca %struct.sv*, align 8
  store %struct.sv* %sv1, %struct.sv** %sv1.addr, align 8
  store %struct.sv* %sv2, %struct.sv** %sv2.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv1.addr, align 8
  %1 = load %struct.sv*, %struct.sv** %sv2.addr, align 8
  %call = call i32 @Perl_sv_cmp(%struct.sv* %0, %struct.sv* %1)
  ret i32 %call
}

; Function Attrs: nounwind uwtable
define i8* @Perl_sv_gets(%struct.sv* %sv, %struct._PerlIO** %fp, i32 %append) #0 {
entry:
  %retval = alloca i8*, align 8
  %sv.addr = alloca %struct.sv*, align 8
  %fp.addr = alloca %struct._PerlIO**, align 8
  %append.addr = alloca i32, align 4
  %rsptr = alloca i8*, align 8
  %rslen = alloca i64, align 8
  %rslast = alloca i8, align 1
  %bp = alloca i8*, align 8
  %cnt = alloca i32, align 4
  %i = alloca i32, align 4
  %rspara = alloca i32, align 4
  %recsize = alloca i32, align 4
  %tsv = alloca %struct.sv*, align 8
  %tmp = alloca i64, align 8
  %st = alloca %struct.stat, align 8
  %offset = alloca i64, align 8
  %bytesread = alloca i32, align 4
  %buffer = alloca i8*, align 8
  %tmp145 = alloca i64, align 8
  %ptr = alloca i8*, align 8
  %bpx = alloca i64, align 8
  %shortbuffered = alloca i32, align 4
  %tmp332 = alloca i64, align 8
  %tmp376 = alloca i64, align 8
  %tmp429 = alloca i64, align 8
  %buf = alloca [8192 x i8], align 16
  %bpe = alloca i8*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store %struct._PerlIO** %fp, %struct._PerlIO*** %fp.addr, align 8
  store i32 %append, i32* %append.addr, align 4
  store i32 0, i32* %i, align 4
  store i32 0, i32* %rspara, align 4
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 9961472
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %3 = load i32, i32* %append.addr, align 4
  %tobool1 = icmp ne i32 %3, 0
  %cond = select i1 %tobool1, i32 0, i32 4
  call void @Perl_sv_force_normal_flags(%struct.sv* %2, i32 %cond)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 2
  %5 = load i32, i32* %sv_flags2, align 4
  %and3 = and i32 %5, 255
  %cmp = icmp uge i32 %and3, 4
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.end
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call signext i8 @Perl_sv_upgrade(%struct.sv* %6, i32 4)
  %conv = sext i8 %call to i32
  %tobool4 = icmp ne i32 %conv, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.end
  %7 = phi i1 [ true, %if.end ], [ %tobool4, %lor.rhs ]
  %lor.ext = zext i1 %7 to i32
  %8 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags5 = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 2
  %9 = load i32, i32* %sv_flags5, align 4
  %and6 = and i32 %9, -134217729
  store i32 %and6, i32* %sv_flags5, align 4
  %10 = load i32, i32* %append.addr, align 4
  %tobool7 = icmp ne i32 %10, 0
  br i1 %tobool7, label %if.then.8, label %if.end.28

if.then.8:                                        ; preds = %lor.end
  %11 = load %struct._PerlIO**, %struct._PerlIO*** %fp.addr, align 8
  %call9 = call i32 @PerlIO_isutf8(%struct._PerlIO** %11)
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %if.then.11, label %if.else

if.then.11:                                       ; preds = %if.then.8
  %12 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags12 = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 2
  %13 = load i32, i32* %sv_flags12, align 4
  %and13 = and i32 %13, 536870912
  %tobool14 = icmp ne i32 %and13, 0
  br i1 %tobool14, label %if.end.17, label %if.then.15

if.then.15:                                       ; preds = %if.then.11
  %14 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call16 = call i64 @Perl_sv_utf8_upgrade_flags(%struct.sv* %14, i32 0)
  %15 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_pos_u2b(%struct.sv* %15, i32* %append.addr, i32* null)
  br label %if.end.17

if.end.17:                                        ; preds = %if.then.15, %if.then.11
  br label %if.end.27

if.else:                                          ; preds = %if.then.8
  %16 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags18 = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 2
  %17 = load i32, i32* %sv_flags18, align 4
  %and19 = and i32 %17, 536870912
  %tobool20 = icmp ne i32 %and19, 0
  br i1 %tobool20, label %if.then.21, label %if.end.26

if.then.21:                                       ; preds = %if.else
  %call22 = call %struct.sv* @Perl_newSV(i64 0)
  store %struct.sv* %call22, %struct.sv** %tsv, align 8
  %18 = load %struct.sv*, %struct.sv** %tsv, align 8
  %19 = load %struct._PerlIO**, %struct._PerlIO*** %fp.addr, align 8
  %call23 = call i8* @Perl_sv_gets(%struct.sv* %18, %struct._PerlIO** %19, i32 0)
  %20 = load %struct.sv*, %struct.sv** %tsv, align 8
  %call24 = call i64 @Perl_sv_utf8_upgrade_flags(%struct.sv* %20, i32 0)
  %21 = load i32, i32* %append.addr, align 4
  %conv25 = sext i32 %21 to i64
  %22 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %22, i32 0, i32 0
  %23 = load i8*, i8** %sv_any, align 8
  %24 = bitcast i8* %23 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %24, i32 0, i32 1
  store i64 %conv25, i64* %xpv_cur, align 8
  store i64 %conv25, i64* %tmp
  %25 = load i64, i64* %tmp
  %26 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %27 = load %struct.sv*, %struct.sv** %tsv, align 8
  call void @Perl_sv_catsv_flags(%struct.sv* %26, %struct.sv* %27, i32 2)
  %28 = load %struct.sv*, %struct.sv** %tsv, align 8
  call void @Perl_sv_free(%struct.sv* %28)
  br label %return_string_or_null

if.end.26:                                        ; preds = %if.else
  br label %if.end.27

if.end.27:                                        ; preds = %if.end.26, %if.end.17
  br label %if.end.28

if.end.28:                                        ; preds = %if.end.27, %lor.end
  %29 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags29 = getelementptr inbounds %struct.sv, %struct.sv* %29, i32 0, i32 2
  %30 = load i32, i32* %sv_flags29, align 4
  %and30 = and i32 %30, 1223753727
  store i32 %and30, i32* %sv_flags29, align 4
  %31 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags31 = getelementptr inbounds %struct.sv, %struct.sv* %31, i32 0, i32 2
  %32 = load i32, i32* %sv_flags31, align 4
  %or = or i32 %32, 67371008
  store i32 %or, i32* %sv_flags31, align 4
  %33 = load %struct._PerlIO**, %struct._PerlIO*** %fp.addr, align 8
  %call32 = call i32 @PerlIO_isutf8(%struct._PerlIO** %33)
  %tobool33 = icmp ne i32 %call32, 0
  br i1 %tobool33, label %if.then.34, label %if.end.37

if.then.34:                                       ; preds = %if.end.28
  %34 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags35 = getelementptr inbounds %struct.sv, %struct.sv* %34, i32 0, i32 2
  %35 = load i32, i32* %sv_flags35, align 4
  %or36 = or i32 %35, 536870912
  store i32 %or36, i32* %sv_flags35, align 4
  br label %if.end.37

if.end.37:                                        ; preds = %if.then.34, %if.end.28
  %36 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cmp38 = icmp eq %struct.cop* %36, @PL_compiling
  br i1 %cmp38, label %if.then.40, label %if.else.41

if.then.40:                                       ; preds = %if.end.37
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.46, i32 0, i32 0), i8** %rsptr, align 8
  store i64 1, i64* %rslen, align 8
  br label %if.end.203

if.else.41:                                       ; preds = %if.end.37
  %37 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_flags42 = getelementptr inbounds %struct.sv, %struct.sv* %37, i32 0, i32 2
  %38 = load i32, i32* %sv_flags42, align 4
  %and43 = and i32 %38, 118423552
  %tobool44 = icmp ne i32 %and43, 0
  br i1 %tobool44, label %if.else.80, label %if.then.45

if.then.45:                                       ; preds = %if.else.41
  %39 = load %struct._PerlIO**, %struct._PerlIO*** %fp.addr, align 8
  %call47 = call i32 @Perl_PerlIO_fileno(%struct._PerlIO** %39)
  %call48 = call i32 @fstat(i32 %call47, %struct.stat* %st)
  %tobool49 = icmp ne i32 %call48, 0
  br i1 %tobool49, label %if.end.79, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.then.45
  %st_mode = getelementptr inbounds %struct.stat, %struct.stat* %st, i32 0, i32 3
  %40 = load i32, i32* %st_mode, align 4
  %and50 = and i32 %40, 61440
  %cmp51 = icmp eq i32 %and50, 32768
  br i1 %cmp51, label %if.then.53, label %if.end.79

if.then.53:                                       ; preds = %land.lhs.true
  %41 = load %struct._PerlIO**, %struct._PerlIO*** %fp.addr, align 8
  %call55 = call i64 @Perl_PerlIO_tell(%struct._PerlIO** %41)
  store i64 %call55, i64* %offset, align 8
  %42 = load i64, i64* %offset, align 8
  %cmp56 = icmp ne i64 %42, -1
  br i1 %cmp56, label %land.lhs.true.58, label %if.end.78

land.lhs.true.58:                                 ; preds = %if.then.53
  %st_size = getelementptr inbounds %struct.stat, %struct.stat* %st, i32 0, i32 8
  %43 = load i64, i64* %st_size, align 8
  %44 = load i32, i32* %append.addr, align 4
  %conv59 = sext i32 %44 to i64
  %add = add nsw i64 %43, %conv59
  %45 = load i64, i64* %offset, align 8
  %cmp60 = icmp sgt i64 %add, %45
  br i1 %cmp60, label %if.then.62, label %if.end.78

if.then.62:                                       ; preds = %land.lhs.true.58
  %46 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any63 = getelementptr inbounds %struct.sv, %struct.sv* %46, i32 0, i32 0
  %47 = load i8*, i8** %sv_any63, align 8
  %48 = bitcast i8* %47 to %struct.xpv*
  %xpv_len = getelementptr inbounds %struct.xpv, %struct.xpv* %48, i32 0, i32 2
  %49 = load i64, i64* %xpv_len, align 8
  %st_size64 = getelementptr inbounds %struct.stat, %struct.stat* %st, i32 0, i32 8
  %50 = load i64, i64* %st_size64, align 8
  %51 = load i64, i64* %offset, align 8
  %sub = sub nsw i64 %50, %51
  %52 = load i32, i32* %append.addr, align 4
  %conv65 = sext i32 %52 to i64
  %add66 = add nsw i64 %sub, %conv65
  %add67 = add nsw i64 %add66, 1
  %cmp68 = icmp ult i64 %49, %add67
  br i1 %cmp68, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.62
  %53 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %st_size70 = getelementptr inbounds %struct.stat, %struct.stat* %st, i32 0, i32 8
  %54 = load i64, i64* %st_size70, align 8
  %55 = load i64, i64* %offset, align 8
  %sub71 = sub nsw i64 %54, %55
  %56 = load i32, i32* %append.addr, align 4
  %conv72 = sext i32 %56 to i64
  %add73 = add nsw i64 %sub71, %conv72
  %add74 = add nsw i64 %add73, 1
  %call75 = call i8* @Perl_sv_grow(%struct.sv* %53, i64 %add74)
  br label %cond.end

cond.false:                                       ; preds = %if.then.62
  %57 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any76 = getelementptr inbounds %struct.sv, %struct.sv* %57, i32 0, i32 0
  %58 = load i8*, i8** %sv_any76, align 8
  %59 = bitcast i8* %58 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %59, i32 0, i32 0
  %60 = load i8*, i8** %xpv_pv, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond77 = phi i8* [ %call75, %cond.true ], [ %60, %cond.false ]
  br label %if.end.78

if.end.78:                                        ; preds = %cond.end, %land.lhs.true.58, %if.then.53
  br label %if.end.79

if.end.79:                                        ; preds = %if.end.78, %land.lhs.true, %if.then.45
  store i8* null, i8** %rsptr, align 8
  store i64 0, i64* %rslen, align 8
  br label %if.end.202

if.else.80:                                       ; preds = %if.else.41
  %61 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_flags81 = getelementptr inbounds %struct.sv, %struct.sv* %61, i32 0, i32 2
  %62 = load i32, i32* %sv_flags81, align 4
  %and82 = and i32 %62, 524288
  %tobool83 = icmp ne i32 %and82, 0
  br i1 %tobool83, label %land.lhs.true.84, label %if.else.150

land.lhs.true.84:                                 ; preds = %if.else.80
  %63 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_any85 = getelementptr inbounds %struct.sv, %struct.sv* %63, i32 0, i32 0
  %64 = load i8*, i8** %sv_any85, align 8
  %65 = bitcast i8* %64 to %struct.xrv*
  %xrv_rv = getelementptr inbounds %struct.xrv, %struct.xrv* %65, i32 0, i32 0
  %66 = load %struct.sv*, %struct.sv** %xrv_rv, align 8
  %sv_flags86 = getelementptr inbounds %struct.sv, %struct.sv* %66, i32 0, i32 2
  %67 = load i32, i32* %sv_flags86, align 4
  %and87 = and i32 %67, 65536
  %tobool88 = icmp ne i32 %and87, 0
  br i1 %tobool88, label %cond.true.89, label %cond.false.93

cond.true.89:                                     ; preds = %land.lhs.true.84
  %68 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_any90 = getelementptr inbounds %struct.sv, %struct.sv* %68, i32 0, i32 0
  %69 = load i8*, i8** %sv_any90, align 8
  %70 = bitcast i8* %69 to %struct.xrv*
  %xrv_rv91 = getelementptr inbounds %struct.xrv, %struct.xrv* %70, i32 0, i32 0
  %71 = load %struct.sv*, %struct.sv** %xrv_rv91, align 8
  %sv_any92 = getelementptr inbounds %struct.sv, %struct.sv* %71, i32 0, i32 0
  %72 = load i8*, i8** %sv_any92, align 8
  %73 = bitcast i8* %72 to %struct.xpviv*
  %xiv_iv = getelementptr inbounds %struct.xpviv, %struct.xpviv* %73, i32 0, i32 3
  %74 = load i64, i64* %xiv_iv, align 8
  br label %cond.end.97

cond.false.93:                                    ; preds = %land.lhs.true.84
  %75 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_any94 = getelementptr inbounds %struct.sv, %struct.sv* %75, i32 0, i32 0
  %76 = load i8*, i8** %sv_any94, align 8
  %77 = bitcast i8* %76 to %struct.xrv*
  %xrv_rv95 = getelementptr inbounds %struct.xrv, %struct.xrv* %77, i32 0, i32 0
  %78 = load %struct.sv*, %struct.sv** %xrv_rv95, align 8
  %call96 = call i64 @Perl_sv_2iv(%struct.sv* %78)
  br label %cond.end.97

cond.end.97:                                      ; preds = %cond.false.93, %cond.true.89
  %cond98 = phi i64 [ %74, %cond.true.89 ], [ %call96, %cond.false.93 ]
  %cmp99 = icmp sgt i64 %cond98, 0
  br i1 %cmp99, label %if.then.101, label %if.else.150

if.then.101:                                      ; preds = %cond.end.97
  %79 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_any104 = getelementptr inbounds %struct.sv, %struct.sv* %79, i32 0, i32 0
  %80 = load i8*, i8** %sv_any104, align 8
  %81 = bitcast i8* %80 to %struct.xrv*
  %xrv_rv105 = getelementptr inbounds %struct.xrv, %struct.xrv* %81, i32 0, i32 0
  %82 = load %struct.sv*, %struct.sv** %xrv_rv105, align 8
  %sv_flags106 = getelementptr inbounds %struct.sv, %struct.sv* %82, i32 0, i32 2
  %83 = load i32, i32* %sv_flags106, align 4
  %and107 = and i32 %83, 65536
  %tobool108 = icmp ne i32 %and107, 0
  br i1 %tobool108, label %cond.true.109, label %cond.false.114

cond.true.109:                                    ; preds = %if.then.101
  %84 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_any110 = getelementptr inbounds %struct.sv, %struct.sv* %84, i32 0, i32 0
  %85 = load i8*, i8** %sv_any110, align 8
  %86 = bitcast i8* %85 to %struct.xrv*
  %xrv_rv111 = getelementptr inbounds %struct.xrv, %struct.xrv* %86, i32 0, i32 0
  %87 = load %struct.sv*, %struct.sv** %xrv_rv111, align 8
  %sv_any112 = getelementptr inbounds %struct.sv, %struct.sv* %87, i32 0, i32 0
  %88 = load i8*, i8** %sv_any112, align 8
  %89 = bitcast i8* %88 to %struct.xpviv*
  %xiv_iv113 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %89, i32 0, i32 3
  %90 = load i64, i64* %xiv_iv113, align 8
  br label %cond.end.118

cond.false.114:                                   ; preds = %if.then.101
  %91 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_any115 = getelementptr inbounds %struct.sv, %struct.sv* %91, i32 0, i32 0
  %92 = load i8*, i8** %sv_any115, align 8
  %93 = bitcast i8* %92 to %struct.xrv*
  %xrv_rv116 = getelementptr inbounds %struct.xrv, %struct.xrv* %93, i32 0, i32 0
  %94 = load %struct.sv*, %struct.sv** %xrv_rv116, align 8
  %call117 = call i64 @Perl_sv_2iv(%struct.sv* %94)
  br label %cond.end.118

cond.end.118:                                     ; preds = %cond.false.114, %cond.true.109
  %cond119 = phi i64 [ %90, %cond.true.109 ], [ %call117, %cond.false.114 ]
  %conv120 = trunc i64 %cond119 to i32
  store i32 %conv120, i32* %recsize, align 4
  %95 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any121 = getelementptr inbounds %struct.sv, %struct.sv* %95, i32 0, i32 0
  %96 = load i8*, i8** %sv_any121, align 8
  %97 = bitcast i8* %96 to %struct.xpv*
  %xpv_len122 = getelementptr inbounds %struct.xpv, %struct.xpv* %97, i32 0, i32 2
  %98 = load i64, i64* %xpv_len122, align 8
  %99 = load i32, i32* %recsize, align 4
  %100 = load i32, i32* %append.addr, align 4
  %add123 = add nsw i32 %99, %100
  %add124 = add nsw i32 %add123, 1
  %conv125 = sext i32 %add124 to i64
  %cmp126 = icmp ult i64 %98, %conv125
  br i1 %cmp126, label %cond.true.128, label %cond.false.133

cond.true.128:                                    ; preds = %cond.end.118
  %101 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %102 = load i32, i32* %recsize, align 4
  %103 = load i32, i32* %append.addr, align 4
  %add129 = add nsw i32 %102, %103
  %add130 = add nsw i32 %add129, 1
  %conv131 = sext i32 %add130 to i64
  %call132 = call i8* @Perl_sv_grow(%struct.sv* %101, i64 %conv131)
  br label %cond.end.136

cond.false.133:                                   ; preds = %cond.end.118
  %104 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any134 = getelementptr inbounds %struct.sv, %struct.sv* %104, i32 0, i32 0
  %105 = load i8*, i8** %sv_any134, align 8
  %106 = bitcast i8* %105 to %struct.xpv*
  %xpv_pv135 = getelementptr inbounds %struct.xpv, %struct.xpv* %106, i32 0, i32 0
  %107 = load i8*, i8** %xpv_pv135, align 8
  br label %cond.end.136

cond.end.136:                                     ; preds = %cond.false.133, %cond.true.128
  %cond137 = phi i8* [ %call132, %cond.true.128 ], [ %107, %cond.false.133 ]
  %108 = load i32, i32* %append.addr, align 4
  %idx.ext = sext i32 %108 to i64
  %add.ptr = getelementptr inbounds i8, i8* %cond137, i64 %idx.ext
  store i8* %add.ptr, i8** %buffer, align 8
  %109 = load %struct._PerlIO**, %struct._PerlIO*** %fp.addr, align 8
  %110 = load i8*, i8** %buffer, align 8
  %111 = load i32, i32* %recsize, align 4
  %conv138 = sext i32 %111 to i64
  %call139 = call i64 @Perl_PerlIO_read(%struct._PerlIO** %109, i8* %110, i64 %conv138)
  %conv140 = trunc i64 %call139 to i32
  store i32 %conv140, i32* %bytesread, align 4
  %112 = load i32, i32* %bytesread, align 4
  %cmp141 = icmp slt i32 %112, 0
  br i1 %cmp141, label %if.then.143, label %if.end.144

if.then.143:                                      ; preds = %cond.end.136
  store i32 0, i32* %bytesread, align 4
  br label %if.end.144

if.end.144:                                       ; preds = %if.then.143, %cond.end.136
  %113 = load i32, i32* %append.addr, align 4
  %114 = load i32, i32* %bytesread, align 4
  %add146 = add nsw i32 %114, %113
  store i32 %add146, i32* %bytesread, align 4
  %conv147 = sext i32 %add146 to i64
  %115 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any148 = getelementptr inbounds %struct.sv, %struct.sv* %115, i32 0, i32 0
  %116 = load i8*, i8** %sv_any148, align 8
  %117 = bitcast i8* %116 to %struct.xpv*
  %xpv_cur149 = getelementptr inbounds %struct.xpv, %struct.xpv* %117, i32 0, i32 1
  store i64 %conv147, i64* %xpv_cur149, align 8
  store i64 %conv147, i64* %tmp145
  %118 = load i64, i64* %tmp145
  %119 = load i32, i32* %bytesread, align 4
  %idxprom = sext i32 %119 to i64
  %120 = load i8*, i8** %buffer, align 8
  %arrayidx = getelementptr inbounds i8, i8* %120, i64 %idxprom
  store i8 0, i8* %arrayidx, align 1
  br label %return_string_or_null

if.else.150:                                      ; preds = %cond.end.97, %if.else.80
  %121 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_flags151 = getelementptr inbounds %struct.sv, %struct.sv* %121, i32 0, i32 2
  %122 = load i32, i32* %sv_flags151, align 4
  %and152 = and i32 %122, 262144
  %tobool153 = icmp ne i32 %and152, 0
  br i1 %tobool153, label %land.lhs.true.154, label %if.else.159

land.lhs.true.154:                                ; preds = %if.else.150
  %123 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_any155 = getelementptr inbounds %struct.sv, %struct.sv* %123, i32 0, i32 0
  %124 = load i8*, i8** %sv_any155, align 8
  %125 = bitcast i8* %124 to %struct.xpv*
  %xpv_cur156 = getelementptr inbounds %struct.xpv, %struct.xpv* %125, i32 0, i32 1
  %126 = load i64, i64* %xpv_cur156, align 8
  %tobool157 = icmp ne i64 %126, 0
  br i1 %tobool157, label %if.else.159, label %if.then.158

if.then.158:                                      ; preds = %land.lhs.true.154
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.47, i32 0, i32 0), i8** %rsptr, align 8
  store i64 2, i64* %rslen, align 8
  store i32 1, i32* %rspara, align 4
  br label %if.end.200

if.else.159:                                      ; preds = %land.lhs.true.154, %if.else.150
  %127 = load %struct._PerlIO**, %struct._PerlIO*** %fp.addr, align 8
  %call160 = call i32 @PerlIO_isutf8(%struct._PerlIO** %127)
  %tobool161 = icmp ne i32 %call160, 0
  br i1 %tobool161, label %if.then.162, label %if.else.176

if.then.162:                                      ; preds = %if.else.159
  %128 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_flags163 = getelementptr inbounds %struct.sv, %struct.sv* %128, i32 0, i32 2
  %129 = load i32, i32* %sv_flags163, align 4
  %and164 = and i32 %129, 537133056
  %cmp165 = icmp eq i32 %and164, 537133056
  br i1 %cmp165, label %cond.true.167, label %cond.false.172

cond.true.167:                                    ; preds = %if.then.162
  %130 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_any168 = getelementptr inbounds %struct.sv, %struct.sv* %130, i32 0, i32 0
  %131 = load i8*, i8** %sv_any168, align 8
  %132 = bitcast i8* %131 to %struct.xpv*
  %xpv_cur169 = getelementptr inbounds %struct.xpv, %struct.xpv* %132, i32 0, i32 1
  %133 = load i64, i64* %xpv_cur169, align 8
  store i64 %133, i64* %rslen, align 8
  %134 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_any170 = getelementptr inbounds %struct.sv, %struct.sv* %134, i32 0, i32 0
  %135 = load i8*, i8** %sv_any170, align 8
  %136 = bitcast i8* %135 to %struct.xpv*
  %xpv_pv171 = getelementptr inbounds %struct.xpv, %struct.xpv* %136, i32 0, i32 0
  %137 = load i8*, i8** %xpv_pv171, align 8
  br label %cond.end.174

cond.false.172:                                   ; preds = %if.then.162
  %138 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %call173 = call i8* @Perl_sv_2pvutf8(%struct.sv* %138, i64* %rslen)
  br label %cond.end.174

cond.end.174:                                     ; preds = %cond.false.172, %cond.true.167
  %cond175 = phi i8* [ %137, %cond.true.167 ], [ %call173, %cond.false.172 ]
  store i8* %cond175, i8** %rsptr, align 8
  br label %if.end.199

if.else.176:                                      ; preds = %if.else.159
  %139 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_flags177 = getelementptr inbounds %struct.sv, %struct.sv* %139, i32 0, i32 2
  %140 = load i32, i32* %sv_flags177, align 4
  %and178 = and i32 %140, 536870912
  %tobool179 = icmp ne i32 %and178, 0
  br i1 %tobool179, label %if.then.180, label %if.end.185

if.then.180:                                      ; preds = %if.else.176
  %141 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %call181 = call signext i8 @Perl_sv_utf8_downgrade(%struct.sv* %141, i8 signext 1)
  %tobool182 = icmp ne i8 %call181, 0
  br i1 %tobool182, label %if.end.184, label %if.then.183

if.then.183:                                      ; preds = %if.then.180
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.48, i32 0, i32 0))
  br label %if.end.184

if.end.184:                                       ; preds = %if.then.183, %if.then.180
  br label %if.end.185

if.end.185:                                       ; preds = %if.end.184, %if.else.176
  %142 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_flags186 = getelementptr inbounds %struct.sv, %struct.sv* %142, i32 0, i32 2
  %143 = load i32, i32* %sv_flags186, align 4
  %and187 = and i32 %143, 262144
  %cmp188 = icmp eq i32 %and187, 262144
  br i1 %cmp188, label %cond.true.190, label %cond.false.195

cond.true.190:                                    ; preds = %if.end.185
  %144 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_any191 = getelementptr inbounds %struct.sv, %struct.sv* %144, i32 0, i32 0
  %145 = load i8*, i8** %sv_any191, align 8
  %146 = bitcast i8* %145 to %struct.xpv*
  %xpv_cur192 = getelementptr inbounds %struct.xpv, %struct.xpv* %146, i32 0, i32 1
  %147 = load i64, i64* %xpv_cur192, align 8
  store i64 %147, i64* %rslen, align 8
  %148 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_any193 = getelementptr inbounds %struct.sv, %struct.sv* %148, i32 0, i32 0
  %149 = load i8*, i8** %sv_any193, align 8
  %150 = bitcast i8* %149 to %struct.xpv*
  %xpv_pv194 = getelementptr inbounds %struct.xpv, %struct.xpv* %150, i32 0, i32 0
  %151 = load i8*, i8** %xpv_pv194, align 8
  br label %cond.end.197

cond.false.195:                                   ; preds = %if.end.185
  %152 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %call196 = call i8* @Perl_sv_2pv_flags(%struct.sv* %152, i64* %rslen, i32 2)
  br label %cond.end.197

cond.end.197:                                     ; preds = %cond.false.195, %cond.true.190
  %cond198 = phi i8* [ %151, %cond.true.190 ], [ %call196, %cond.false.195 ]
  store i8* %cond198, i8** %rsptr, align 8
  br label %if.end.199

if.end.199:                                       ; preds = %cond.end.197, %cond.end.174
  br label %if.end.200

if.end.200:                                       ; preds = %if.end.199, %if.then.158
  br label %if.end.201

if.end.201:                                       ; preds = %if.end.200
  br label %if.end.202

if.end.202:                                       ; preds = %if.end.201, %if.end.79
  br label %if.end.203

if.end.203:                                       ; preds = %if.end.202, %if.then.40
  %153 = load i64, i64* %rslen, align 8
  %tobool204 = icmp ne i64 %153, 0
  br i1 %tobool204, label %cond.true.205, label %cond.false.209

cond.true.205:                                    ; preds = %if.end.203
  %154 = load i64, i64* %rslen, align 8
  %sub206 = sub i64 %154, 1
  %155 = load i8*, i8** %rsptr, align 8
  %arrayidx207 = getelementptr inbounds i8, i8* %155, i64 %sub206
  %156 = load i8, i8* %arrayidx207, align 1
  %conv208 = sext i8 %156 to i32
  br label %cond.end.210

cond.false.209:                                   ; preds = %if.end.203
  br label %cond.end.210

cond.end.210:                                     ; preds = %cond.false.209, %cond.true.205
  %cond211 = phi i32 [ %conv208, %cond.true.205 ], [ 0, %cond.false.209 ]
  %conv212 = trunc i32 %cond211 to i8
  store i8 %conv212, i8* %rslast, align 1
  %157 = load i32, i32* %rspara, align 4
  %tobool213 = icmp ne i32 %157, 0
  br i1 %tobool213, label %if.then.214, label %if.end.231

if.then.214:                                      ; preds = %cond.end.210
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.then.214
  %158 = load %struct._PerlIO**, %struct._PerlIO*** %fp.addr, align 8
  %call215 = call i32 @Perl_PerlIO_eof(%struct._PerlIO** %158)
  %tobool216 = icmp ne i32 %call215, 0
  br i1 %tobool216, label %if.then.217, label %if.end.218

if.then.217:                                      ; preds = %do.body
  store i8* null, i8** %retval
  br label %return

if.end.218:                                       ; preds = %do.body
  %159 = load %struct._PerlIO**, %struct._PerlIO*** %fp.addr, align 8
  %call219 = call i32 @PerlIO_getc(%struct._PerlIO** %159)
  store i32 %call219, i32* %i, align 4
  %160 = load i32, i32* %i, align 4
  %cmp220 = icmp ne i32 %160, 10
  br i1 %cmp220, label %if.then.222, label %if.end.228

if.then.222:                                      ; preds = %if.end.218
  %161 = load i32, i32* %i, align 4
  %cmp223 = icmp eq i32 %161, -1
  br i1 %cmp223, label %if.then.225, label %if.end.226

if.then.225:                                      ; preds = %if.then.222
  store i8* null, i8** %retval
  br label %return

if.end.226:                                       ; preds = %if.then.222
  %162 = load %struct._PerlIO**, %struct._PerlIO*** %fp.addr, align 8
  %163 = load i32, i32* %i, align 4
  %call227 = call i32 @PerlIO_ungetc(%struct._PerlIO** %162, i32 %163)
  br label %do.end

if.end.228:                                       ; preds = %if.end.218
  br label %do.cond

do.cond:                                          ; preds = %if.end.228
  %164 = load i32, i32* %i, align 4
  %cmp229 = icmp ne i32 %164, -1
  br i1 %cmp229, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond, %if.end.226
  br label %if.end.231

if.end.231:                                       ; preds = %do.end, %cond.end.210
  %165 = load %struct._PerlIO**, %struct._PerlIO*** %fp.addr, align 8
  %call232 = call i32 @PerlIO_fast_gets(%struct._PerlIO** %165)
  %tobool233 = icmp ne i32 %call232, 0
  br i1 %tobool233, label %if.then.234, label %if.else.437

if.then.234:                                      ; preds = %if.end.231
  %166 = load %struct._PerlIO**, %struct._PerlIO*** %fp.addr, align 8
  %call238 = call i32 @Perl_PerlIO_get_cnt(%struct._PerlIO** %166)
  store i32 %call238, i32* %cnt, align 4
  %167 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any239 = getelementptr inbounds %struct.sv, %struct.sv* %167, i32 0, i32 0
  %168 = load i8*, i8** %sv_any239, align 8
  %169 = bitcast i8* %168 to %struct.xpv*
  %xpv_len240 = getelementptr inbounds %struct.xpv, %struct.xpv* %169, i32 0, i32 2
  %170 = load i64, i64* %xpv_len240, align 8
  %171 = load i32, i32* %append.addr, align 4
  %conv241 = sext i32 %171 to i64
  %sub242 = sub i64 %170, %conv241
  %conv243 = trunc i64 %sub242 to i32
  %172 = load i32, i32* %cnt, align 4
  %add244 = add nsw i32 %172, 1
  %cmp245 = icmp sle i32 %conv243, %add244
  br i1 %cmp245, label %if.then.247, label %if.else.299

if.then.247:                                      ; preds = %if.then.234
  %173 = load i64, i64* %rslen, align 8
  %tobool248 = icmp ne i64 %173, 0
  br i1 %tobool248, label %land.lhs.true.249, label %if.else.268

land.lhs.true.249:                                ; preds = %if.then.247
  %174 = load i32, i32* %cnt, align 4
  %cmp250 = icmp sgt i32 %174, 80
  br i1 %cmp250, label %land.lhs.true.252, label %if.else.268

land.lhs.true.252:                                ; preds = %land.lhs.true.249
  %175 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any253 = getelementptr inbounds %struct.sv, %struct.sv* %175, i32 0, i32 0
  %176 = load i8*, i8** %sv_any253, align 8
  %177 = bitcast i8* %176 to %struct.xpv*
  %xpv_len254 = getelementptr inbounds %struct.xpv, %struct.xpv* %177, i32 0, i32 2
  %178 = load i64, i64* %xpv_len254, align 8
  %conv255 = trunc i64 %178 to i32
  %179 = load i32, i32* %append.addr, align 4
  %cmp256 = icmp sgt i32 %conv255, %179
  br i1 %cmp256, label %if.then.258, label %if.else.268

if.then.258:                                      ; preds = %land.lhs.true.252
  %180 = load i32, i32* %cnt, align 4
  %conv259 = sext i32 %180 to i64
  %181 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any260 = getelementptr inbounds %struct.sv, %struct.sv* %181, i32 0, i32 0
  %182 = load i8*, i8** %sv_any260, align 8
  %183 = bitcast i8* %182 to %struct.xpv*
  %xpv_len261 = getelementptr inbounds %struct.xpv, %struct.xpv* %183, i32 0, i32 2
  %184 = load i64, i64* %xpv_len261, align 8
  %sub262 = sub i64 %conv259, %184
  %185 = load i32, i32* %append.addr, align 4
  %conv263 = sext i32 %185 to i64
  %add264 = add i64 %sub262, %conv263
  %add265 = add i64 %add264, 1
  %conv266 = trunc i64 %add265 to i32
  store i32 %conv266, i32* %shortbuffered, align 4
  %186 = load i32, i32* %shortbuffered, align 4
  %187 = load i32, i32* %cnt, align 4
  %sub267 = sub nsw i32 %187, %186
  store i32 %sub267, i32* %cnt, align 4
  br label %if.end.298

if.else.268:                                      ; preds = %land.lhs.true.252, %land.lhs.true.249, %if.then.247
  store i32 0, i32* %shortbuffered, align 4
  %188 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any269 = getelementptr inbounds %struct.sv, %struct.sv* %188, i32 0, i32 0
  %189 = load i8*, i8** %sv_any269, align 8
  %190 = bitcast i8* %189 to %struct.xpv*
  %xpv_len270 = getelementptr inbounds %struct.xpv, %struct.xpv* %190, i32 0, i32 2
  %191 = load i64, i64* %xpv_len270, align 8
  %192 = load i32, i32* %append.addr, align 4
  %193 = load i32, i32* %cnt, align 4
  %cmp271 = icmp sle i32 %193, 0
  br i1 %cmp271, label %cond.true.273, label %cond.false.274

cond.true.273:                                    ; preds = %if.else.268
  br label %cond.end.276

cond.false.274:                                   ; preds = %if.else.268
  %194 = load i32, i32* %cnt, align 4
  %add275 = add nsw i32 %194, 1
  br label %cond.end.276

cond.end.276:                                     ; preds = %cond.false.274, %cond.true.273
  %cond277 = phi i32 [ 2, %cond.true.273 ], [ %add275, %cond.false.274 ]
  %add278 = add nsw i32 %192, %cond277
  %conv279 = sext i32 %add278 to i64
  %cmp280 = icmp ult i64 %191, %conv279
  br i1 %cmp280, label %cond.true.282, label %cond.false.293

cond.true.282:                                    ; preds = %cond.end.276
  %195 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %196 = load i32, i32* %append.addr, align 4
  %197 = load i32, i32* %cnt, align 4
  %cmp283 = icmp sle i32 %197, 0
  br i1 %cmp283, label %cond.true.285, label %cond.false.286

cond.true.285:                                    ; preds = %cond.true.282
  br label %cond.end.288

cond.false.286:                                   ; preds = %cond.true.282
  %198 = load i32, i32* %cnt, align 4
  %add287 = add nsw i32 %198, 1
  br label %cond.end.288

cond.end.288:                                     ; preds = %cond.false.286, %cond.true.285
  %cond289 = phi i32 [ 2, %cond.true.285 ], [ %add287, %cond.false.286 ]
  %add290 = add nsw i32 %196, %cond289
  %conv291 = sext i32 %add290 to i64
  %call292 = call i8* @Perl_sv_grow(%struct.sv* %195, i64 %conv291)
  br label %cond.end.296

cond.false.293:                                   ; preds = %cond.end.276
  %199 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any294 = getelementptr inbounds %struct.sv, %struct.sv* %199, i32 0, i32 0
  %200 = load i8*, i8** %sv_any294, align 8
  %201 = bitcast i8* %200 to %struct.xpv*
  %xpv_pv295 = getelementptr inbounds %struct.xpv, %struct.xpv* %201, i32 0, i32 0
  %202 = load i8*, i8** %xpv_pv295, align 8
  br label %cond.end.296

cond.end.296:                                     ; preds = %cond.false.293, %cond.end.288
  %cond297 = phi i8* [ %call292, %cond.end.288 ], [ %202, %cond.false.293 ]
  br label %if.end.298

if.end.298:                                       ; preds = %cond.end.296, %if.then.258
  br label %if.end.300

if.else.299:                                      ; preds = %if.then.234
  store i32 0, i32* %shortbuffered, align 4
  br label %if.end.300

if.end.300:                                       ; preds = %if.else.299, %if.end.298
  %203 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any301 = getelementptr inbounds %struct.sv, %struct.sv* %203, i32 0, i32 0
  %204 = load i8*, i8** %sv_any301, align 8
  %205 = bitcast i8* %204 to %struct.xpv*
  %xpv_pv302 = getelementptr inbounds %struct.xpv, %struct.xpv* %205, i32 0, i32 0
  %206 = load i8*, i8** %xpv_pv302, align 8
  %207 = load i32, i32* %append.addr, align 4
  %idx.ext303 = sext i32 %207 to i64
  %add.ptr304 = getelementptr inbounds i8, i8* %206, i64 %idx.ext303
  store i8* %add.ptr304, i8** %bp, align 8
  %208 = load %struct._PerlIO**, %struct._PerlIO*** %fp.addr, align 8
  %call305 = call i8* @Perl_PerlIO_get_ptr(%struct._PerlIO** %208)
  store i8* %call305, i8** %ptr, align 8
  br label %for.cond

for.cond:                                         ; preds = %if.end.409, %cond.end.358, %if.end.300
  br label %screamer

screamer:                                         ; preds = %if.then.423, %for.cond
  %209 = load i32, i32* %cnt, align 4
  %cmp306 = icmp sgt i32 %209, 0
  br i1 %cmp306, label %if.then.308, label %if.end.327

if.then.308:                                      ; preds = %screamer
  %210 = load i64, i64* %rslen, align 8
  %tobool309 = icmp ne i64 %210, 0
  br i1 %tobool309, label %if.then.310, label %if.else.320

if.then.310:                                      ; preds = %if.then.308
  br label %while.cond

while.cond:                                       ; preds = %if.end.319, %if.then.310
  %211 = load i32, i32* %cnt, align 4
  %cmp311 = icmp sgt i32 %211, 0
  br i1 %cmp311, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %212 = load i32, i32* %cnt, align 4
  %dec = add nsw i32 %212, -1
  store i32 %dec, i32* %cnt, align 4
  %213 = load i8*, i8** %ptr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %213, i32 1
  store i8* %incdec.ptr, i8** %ptr, align 8
  %214 = load i8, i8* %213, align 1
  %215 = load i8*, i8** %bp, align 8
  %incdec.ptr313 = getelementptr inbounds i8, i8* %215, i32 1
  store i8* %incdec.ptr313, i8** %bp, align 8
  store i8 %214, i8* %215, align 1
  %conv314 = sext i8 %214 to i32
  %216 = load i8, i8* %rslast, align 1
  %conv315 = sext i8 %216 to i32
  %cmp316 = icmp eq i32 %conv314, %conv315
  br i1 %cmp316, label %if.then.318, label %if.end.319

if.then.318:                                      ; preds = %while.body
  br label %thats_all_folks

if.end.319:                                       ; preds = %while.body
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end.326

if.else.320:                                      ; preds = %if.then.308
  %217 = load i8*, i8** %bp, align 8
  %218 = load i8*, i8** %ptr, align 8
  %219 = load i32, i32* %cnt, align 4
  %conv321 = sext i32 %219 to i64
  %mul = mul i64 %conv321, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %217, i8* %218, i64 %mul, i32 1, i1 false)
  %220 = load i32, i32* %cnt, align 4
  %221 = load i8*, i8** %bp, align 8
  %idx.ext322 = sext i32 %220 to i64
  %add.ptr323 = getelementptr inbounds i8, i8* %221, i64 %idx.ext322
  store i8* %add.ptr323, i8** %bp, align 8
  %222 = load i32, i32* %cnt, align 4
  %223 = load i8*, i8** %ptr, align 8
  %idx.ext324 = sext i32 %222 to i64
  %add.ptr325 = getelementptr inbounds i8, i8* %223, i64 %idx.ext324
  store i8* %add.ptr325, i8** %ptr, align 8
  store i32 0, i32* %cnt, align 4
  br label %if.end.326

if.end.326:                                       ; preds = %if.else.320, %while.end
  br label %if.end.327

if.end.327:                                       ; preds = %if.end.326, %screamer
  %224 = load i32, i32* %shortbuffered, align 4
  %tobool328 = icmp ne i32 %224, 0
  br i1 %tobool328, label %if.then.329, label %if.end.363

if.then.329:                                      ; preds = %if.end.327
  %225 = load i32, i32* %shortbuffered, align 4
  store i32 %225, i32* %cnt, align 4
  store i32 0, i32* %shortbuffered, align 4
  %226 = load i8*, i8** %bp, align 8
  %227 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any330 = getelementptr inbounds %struct.sv, %struct.sv* %227, i32 0, i32 0
  %228 = load i8*, i8** %sv_any330, align 8
  %229 = bitcast i8* %228 to %struct.xpv*
  %xpv_pv331 = getelementptr inbounds %struct.xpv, %struct.xpv* %229, i32 0, i32 0
  %230 = load i8*, i8** %xpv_pv331, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %226 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %230 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, i64* %bpx, align 8
  %231 = load i64, i64* %bpx, align 8
  %232 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any333 = getelementptr inbounds %struct.sv, %struct.sv* %232, i32 0, i32 0
  %233 = load i8*, i8** %sv_any333, align 8
  %234 = bitcast i8* %233 to %struct.xpv*
  %xpv_cur334 = getelementptr inbounds %struct.xpv, %struct.xpv* %234, i32 0, i32 1
  store i64 %231, i64* %xpv_cur334, align 8
  store i64 %231, i64* %tmp332
  %235 = load i64, i64* %tmp332
  %236 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any335 = getelementptr inbounds %struct.sv, %struct.sv* %236, i32 0, i32 0
  %237 = load i8*, i8** %sv_any335, align 8
  %238 = bitcast i8* %237 to %struct.xpv*
  %xpv_len336 = getelementptr inbounds %struct.xpv, %struct.xpv* %238, i32 0, i32 2
  %239 = load i64, i64* %xpv_len336, align 8
  %240 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any337 = getelementptr inbounds %struct.sv, %struct.sv* %240, i32 0, i32 0
  %241 = load i8*, i8** %sv_any337, align 8
  %242 = bitcast i8* %241 to %struct.xpv*
  %xpv_len338 = getelementptr inbounds %struct.xpv, %struct.xpv* %242, i32 0, i32 2
  %243 = load i64, i64* %xpv_len338, align 8
  %244 = load i32, i32* %append.addr, align 4
  %conv339 = sext i32 %244 to i64
  %add340 = add i64 %243, %conv339
  %245 = load i32, i32* %cnt, align 4
  %conv341 = sext i32 %245 to i64
  %add342 = add i64 %add340, %conv341
  %add343 = add i64 %add342, 2
  %cmp344 = icmp ult i64 %239, %add343
  br i1 %cmp344, label %cond.true.346, label %cond.false.355

cond.true.346:                                    ; preds = %if.then.329
  %246 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %247 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any347 = getelementptr inbounds %struct.sv, %struct.sv* %247, i32 0, i32 0
  %248 = load i8*, i8** %sv_any347, align 8
  %249 = bitcast i8* %248 to %struct.xpv*
  %xpv_len348 = getelementptr inbounds %struct.xpv, %struct.xpv* %249, i32 0, i32 2
  %250 = load i64, i64* %xpv_len348, align 8
  %251 = load i32, i32* %append.addr, align 4
  %conv349 = sext i32 %251 to i64
  %add350 = add i64 %250, %conv349
  %252 = load i32, i32* %cnt, align 4
  %conv351 = sext i32 %252 to i64
  %add352 = add i64 %add350, %conv351
  %add353 = add i64 %add352, 2
  %call354 = call i8* @Perl_sv_grow(%struct.sv* %246, i64 %add353)
  br label %cond.end.358

cond.false.355:                                   ; preds = %if.then.329
  %253 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any356 = getelementptr inbounds %struct.sv, %struct.sv* %253, i32 0, i32 0
  %254 = load i8*, i8** %sv_any356, align 8
  %255 = bitcast i8* %254 to %struct.xpv*
  %xpv_pv357 = getelementptr inbounds %struct.xpv, %struct.xpv* %255, i32 0, i32 0
  %256 = load i8*, i8** %xpv_pv357, align 8
  br label %cond.end.358

cond.end.358:                                     ; preds = %cond.false.355, %cond.true.346
  %cond359 = phi i8* [ %call354, %cond.true.346 ], [ %256, %cond.false.355 ]
  %257 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any360 = getelementptr inbounds %struct.sv, %struct.sv* %257, i32 0, i32 0
  %258 = load i8*, i8** %sv_any360, align 8
  %259 = bitcast i8* %258 to %struct.xpv*
  %xpv_pv361 = getelementptr inbounds %struct.xpv, %struct.xpv* %259, i32 0, i32 0
  %260 = load i8*, i8** %xpv_pv361, align 8
  %261 = load i64, i64* %bpx, align 8
  %add.ptr362 = getelementptr inbounds i8, i8* %260, i64 %261
  store i8* %add.ptr362, i8** %bp, align 8
  br label %for.cond

if.end.363:                                       ; preds = %if.end.327
  %262 = load %struct._PerlIO**, %struct._PerlIO*** %fp.addr, align 8
  %263 = load i8*, i8** %ptr, align 8
  %264 = load i32, i32* %cnt, align 4
  call void @Perl_PerlIO_set_ptrcnt(%struct._PerlIO** %262, i8* %263, i32 %264)
  %265 = load %struct._PerlIO**, %struct._PerlIO*** %fp.addr, align 8
  %call364 = call i32 @PerlIO_getc(%struct._PerlIO** %265)
  store i32 %call364, i32* %i, align 4
  %266 = load %struct._PerlIO**, %struct._PerlIO*** %fp.addr, align 8
  %call365 = call i32 @Perl_PerlIO_get_cnt(%struct._PerlIO** %266)
  store i32 %call365, i32* %cnt, align 4
  %267 = load %struct._PerlIO**, %struct._PerlIO*** %fp.addr, align 8
  %call366 = call i8* @Perl_PerlIO_get_ptr(%struct._PerlIO** %267)
  store i8* %call366, i8** %ptr, align 8
  %268 = load i32, i32* %i, align 4
  %cmp367 = icmp eq i32 %268, -1
  br i1 %cmp367, label %if.then.369, label %if.end.370

if.then.369:                                      ; preds = %if.end.363
  br label %thats_really_all_folks

if.end.370:                                       ; preds = %if.end.363
  %269 = load i8*, i8** %bp, align 8
  %270 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any371 = getelementptr inbounds %struct.sv, %struct.sv* %270, i32 0, i32 0
  %271 = load i8*, i8** %sv_any371, align 8
  %272 = bitcast i8* %271 to %struct.xpv*
  %xpv_pv372 = getelementptr inbounds %struct.xpv, %struct.xpv* %272, i32 0, i32 0
  %273 = load i8*, i8** %xpv_pv372, align 8
  %sub.ptr.lhs.cast373 = ptrtoint i8* %269 to i64
  %sub.ptr.rhs.cast374 = ptrtoint i8* %273 to i64
  %sub.ptr.sub375 = sub i64 %sub.ptr.lhs.cast373, %sub.ptr.rhs.cast374
  store i64 %sub.ptr.sub375, i64* %bpx, align 8
  %274 = load i64, i64* %bpx, align 8
  %275 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any377 = getelementptr inbounds %struct.sv, %struct.sv* %275, i32 0, i32 0
  %276 = load i8*, i8** %sv_any377, align 8
  %277 = bitcast i8* %276 to %struct.xpv*
  %xpv_cur378 = getelementptr inbounds %struct.xpv, %struct.xpv* %277, i32 0, i32 1
  store i64 %274, i64* %xpv_cur378, align 8
  store i64 %274, i64* %tmp376
  %278 = load i64, i64* %tmp376
  %279 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any379 = getelementptr inbounds %struct.sv, %struct.sv* %279, i32 0, i32 0
  %280 = load i8*, i8** %sv_any379, align 8
  %281 = bitcast i8* %280 to %struct.xpv*
  %xpv_len380 = getelementptr inbounds %struct.xpv, %struct.xpv* %281, i32 0, i32 2
  %282 = load i64, i64* %xpv_len380, align 8
  %283 = load i64, i64* %bpx, align 8
  %284 = load i32, i32* %cnt, align 4
  %conv381 = sext i32 %284 to i64
  %add382 = add i64 %283, %conv381
  %add383 = add i64 %add382, 2
  %cmp384 = icmp ult i64 %282, %add383
  br i1 %cmp384, label %cond.true.386, label %cond.false.391

cond.true.386:                                    ; preds = %if.end.370
  %285 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %286 = load i64, i64* %bpx, align 8
  %287 = load i32, i32* %cnt, align 4
  %conv387 = sext i32 %287 to i64
  %add388 = add i64 %286, %conv387
  %add389 = add i64 %add388, 2
  %call390 = call i8* @Perl_sv_grow(%struct.sv* %285, i64 %add389)
  br label %cond.end.394

cond.false.391:                                   ; preds = %if.end.370
  %288 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any392 = getelementptr inbounds %struct.sv, %struct.sv* %288, i32 0, i32 0
  %289 = load i8*, i8** %sv_any392, align 8
  %290 = bitcast i8* %289 to %struct.xpv*
  %xpv_pv393 = getelementptr inbounds %struct.xpv, %struct.xpv* %290, i32 0, i32 0
  %291 = load i8*, i8** %xpv_pv393, align 8
  br label %cond.end.394

cond.end.394:                                     ; preds = %cond.false.391, %cond.true.386
  %cond395 = phi i8* [ %call390, %cond.true.386 ], [ %291, %cond.false.391 ]
  %292 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any396 = getelementptr inbounds %struct.sv, %struct.sv* %292, i32 0, i32 0
  %293 = load i8*, i8** %sv_any396, align 8
  %294 = bitcast i8* %293 to %struct.xpv*
  %xpv_pv397 = getelementptr inbounds %struct.xpv, %struct.xpv* %294, i32 0, i32 0
  %295 = load i8*, i8** %xpv_pv397, align 8
  %296 = load i64, i64* %bpx, align 8
  %add.ptr398 = getelementptr inbounds i8, i8* %295, i64 %296
  store i8* %add.ptr398, i8** %bp, align 8
  %297 = load i32, i32* %i, align 4
  %conv399 = trunc i32 %297 to i8
  %298 = load i8*, i8** %bp, align 8
  %incdec.ptr400 = getelementptr inbounds i8, i8* %298, i32 1
  store i8* %incdec.ptr400, i8** %bp, align 8
  store i8 %conv399, i8* %298, align 1
  %299 = load i64, i64* %rslen, align 8
  %tobool401 = icmp ne i64 %299, 0
  br i1 %tobool401, label %land.lhs.true.402, label %if.end.409

land.lhs.true.402:                                ; preds = %cond.end.394
  %300 = load i32, i32* %i, align 4
  %conv403 = trunc i32 %300 to i8
  %conv404 = sext i8 %conv403 to i32
  %301 = load i8, i8* %rslast, align 1
  %conv405 = sext i8 %301 to i32
  %cmp406 = icmp eq i32 %conv404, %conv405
  br i1 %cmp406, label %if.then.408, label %if.end.409

if.then.408:                                      ; preds = %land.lhs.true.402
  br label %thats_all_folks

if.end.409:                                       ; preds = %land.lhs.true.402, %cond.end.394
  br label %for.cond

thats_all_folks:                                  ; preds = %if.then.408, %if.then.318
  %302 = load i64, i64* %rslen, align 8
  %cmp410 = icmp ugt i64 %302, 1
  br i1 %cmp410, label %land.lhs.true.412, label %lor.lhs.false

land.lhs.true.412:                                ; preds = %thats_all_folks
  %303 = load i8*, i8** %bp, align 8
  %304 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any413 = getelementptr inbounds %struct.sv, %struct.sv* %304, i32 0, i32 0
  %305 = load i8*, i8** %sv_any413, align 8
  %306 = bitcast i8* %305 to %struct.xpv*
  %xpv_pv414 = getelementptr inbounds %struct.xpv, %struct.xpv* %306, i32 0, i32 0
  %307 = load i8*, i8** %xpv_pv414, align 8
  %sub.ptr.lhs.cast415 = ptrtoint i8* %303 to i64
  %sub.ptr.rhs.cast416 = ptrtoint i8* %307 to i64
  %sub.ptr.sub417 = sub i64 %sub.ptr.lhs.cast415, %sub.ptr.rhs.cast416
  %308 = load i64, i64* %rslen, align 8
  %cmp418 = icmp ult i64 %sub.ptr.sub417, %308
  br i1 %cmp418, label %if.then.423, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.412, %thats_all_folks
  %309 = load i8*, i8** %bp, align 8
  %310 = load i64, i64* %rslen, align 8
  %idx.neg = sub i64 0, %310
  %add.ptr420 = getelementptr inbounds i8, i8* %309, i64 %idx.neg
  %311 = load i8*, i8** %rsptr, align 8
  %312 = load i64, i64* %rslen, align 8
  %call421 = call i32 @memcmp(i8* %add.ptr420, i8* %311, i64 %312)
  %tobool422 = icmp ne i32 %call421, 0
  br i1 %tobool422, label %if.then.423, label %if.end.424

if.then.423:                                      ; preds = %lor.lhs.false, %land.lhs.true.412
  br label %screamer

if.end.424:                                       ; preds = %lor.lhs.false
  br label %thats_really_all_folks

thats_really_all_folks:                           ; preds = %if.end.424, %if.then.369
  %313 = load i32, i32* %shortbuffered, align 4
  %tobool425 = icmp ne i32 %313, 0
  br i1 %tobool425, label %if.then.426, label %if.end.428

if.then.426:                                      ; preds = %thats_really_all_folks
  %314 = load i32, i32* %shortbuffered, align 4
  %315 = load i32, i32* %cnt, align 4
  %add427 = add nsw i32 %315, %314
  store i32 %add427, i32* %cnt, align 4
  br label %if.end.428

if.end.428:                                       ; preds = %if.then.426, %thats_really_all_folks
  %316 = load %struct._PerlIO**, %struct._PerlIO*** %fp.addr, align 8
  %317 = load i8*, i8** %ptr, align 8
  %318 = load i32, i32* %cnt, align 4
  call void @Perl_PerlIO_set_ptrcnt(%struct._PerlIO** %316, i8* %317, i32 %318)
  %319 = load i8*, i8** %bp, align 8
  store i8 0, i8* %319, align 1
  %320 = load i8*, i8** %bp, align 8
  %321 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any430 = getelementptr inbounds %struct.sv, %struct.sv* %321, i32 0, i32 0
  %322 = load i8*, i8** %sv_any430, align 8
  %323 = bitcast i8* %322 to %struct.xpv*
  %xpv_pv431 = getelementptr inbounds %struct.xpv, %struct.xpv* %323, i32 0, i32 0
  %324 = load i8*, i8** %xpv_pv431, align 8
  %sub.ptr.lhs.cast432 = ptrtoint i8* %320 to i64
  %sub.ptr.rhs.cast433 = ptrtoint i8* %324 to i64
  %sub.ptr.sub434 = sub i64 %sub.ptr.lhs.cast432, %sub.ptr.rhs.cast433
  %325 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any435 = getelementptr inbounds %struct.sv, %struct.sv* %325, i32 0, i32 0
  %326 = load i8*, i8** %sv_any435, align 8
  %327 = bitcast i8* %326 to %struct.xpv*
  %xpv_cur436 = getelementptr inbounds %struct.xpv, %struct.xpv* %327, i32 0, i32 1
  store i64 %sub.ptr.sub434, i64* %xpv_cur436, align 8
  store i64 %sub.ptr.sub434, i64* %tmp429
  %328 = load i64, i64* %tmp429
  br label %if.end.519

if.else.437:                                      ; preds = %if.end.231
  br label %screamer2

screamer2:                                        ; preds = %if.then.516, %if.else.437
  %329 = load i64, i64* %rslen, align 8
  %tobool439 = icmp ne i64 %329, 0
  br i1 %tobool439, label %if.then.440, label %if.else.464

if.then.440:                                      ; preds = %screamer2
  %arraydecay = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0
  %add.ptr442 = getelementptr inbounds i8, i8* %arraydecay, i64 8192
  store i8* %add.ptr442, i8** %bpe, align 8
  %arraydecay443 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0
  store i8* %arraydecay443, i8** %bp, align 8
  br label %while.cond.444

while.cond.444:                                   ; preds = %while.body.457, %if.then.440
  %330 = load %struct._PerlIO**, %struct._PerlIO*** %fp.addr, align 8
  %call445 = call i32 @PerlIO_getc(%struct._PerlIO** %330)
  store i32 %call445, i32* %i, align 4
  %cmp446 = icmp ne i32 %call445, -1
  br i1 %cmp446, label %land.lhs.true.448, label %land.end

land.lhs.true.448:                                ; preds = %while.cond.444
  %331 = load i32, i32* %i, align 4
  %conv449 = trunc i32 %331 to i8
  %332 = load i8*, i8** %bp, align 8
  %incdec.ptr450 = getelementptr inbounds i8, i8* %332, i32 1
  store i8* %incdec.ptr450, i8** %bp, align 8
  store i8 %conv449, i8* %332, align 1
  %conv451 = sext i8 %conv449 to i32
  %333 = load i8, i8* %rslast, align 1
  %conv452 = sext i8 %333 to i32
  %cmp453 = icmp ne i32 %conv451, %conv452
  br i1 %cmp453, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true.448
  %334 = load i8*, i8** %bp, align 8
  %335 = load i8*, i8** %bpe, align 8
  %cmp455 = icmp ult i8* %334, %335
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true.448, %while.cond.444
  %336 = phi i1 [ false, %land.lhs.true.448 ], [ false, %while.cond.444 ], [ %cmp455, %land.rhs ]
  br i1 %336, label %while.body.457, label %while.end.458

while.body.457:                                   ; preds = %land.end
  br label %while.cond.444

while.end.458:                                    ; preds = %land.end
  %337 = load i8*, i8** %bp, align 8
  %arraydecay459 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0
  %sub.ptr.lhs.cast460 = ptrtoint i8* %337 to i64
  %sub.ptr.rhs.cast461 = ptrtoint i8* %arraydecay459 to i64
  %sub.ptr.sub462 = sub i64 %sub.ptr.lhs.cast460, %sub.ptr.rhs.cast461
  %conv463 = trunc i64 %sub.ptr.sub462 to i32
  store i32 %conv463, i32* %cnt, align 4
  br label %if.end.477

if.else.464:                                      ; preds = %screamer2
  %338 = load %struct._PerlIO**, %struct._PerlIO*** %fp.addr, align 8
  %arraydecay465 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0
  %call466 = call i64 @Perl_PerlIO_read(%struct._PerlIO** %338, i8* %arraydecay465, i64 8192)
  %conv467 = trunc i64 %call466 to i32
  store i32 %conv467, i32* %cnt, align 4
  %339 = load i32, i32* %cnt, align 4
  %cmp468 = icmp sgt i32 %339, 0
  br i1 %cmp468, label %if.then.470, label %if.else.475

if.then.470:                                      ; preds = %if.else.464
  %340 = load i32, i32* %cnt, align 4
  %sub471 = sub nsw i32 %340, 1
  %idxprom472 = sext i32 %sub471 to i64
  %arrayidx473 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i64 %idxprom472
  %341 = load i8, i8* %arrayidx473, align 1
  %conv474 = zext i8 %341 to i32
  store i32 %conv474, i32* %i, align 4
  br label %if.end.476

if.else.475:                                      ; preds = %if.else.464
  store i32 -1, i32* %i, align 4
  br label %if.end.476

if.end.476:                                       ; preds = %if.else.475, %if.then.470
  br label %if.end.477

if.end.477:                                       ; preds = %if.end.476, %while.end.458
  %342 = load i32, i32* %cnt, align 4
  %cmp478 = icmp slt i32 %342, 0
  br i1 %cmp478, label %if.then.480, label %if.end.481

if.then.480:                                      ; preds = %if.end.477
  store i32 0, i32* %cnt, align 4
  br label %if.end.481

if.end.481:                                       ; preds = %if.then.480, %if.end.477
  %343 = load i32, i32* %append.addr, align 4
  %tobool482 = icmp ne i32 %343, 0
  br i1 %tobool482, label %if.then.483, label %if.else.486

if.then.483:                                      ; preds = %if.end.481
  %344 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %arraydecay484 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0
  %345 = load i32, i32* %cnt, align 4
  %conv485 = sext i32 %345 to i64
  call void @Perl_sv_catpvn_flags(%struct.sv* %344, i8* %arraydecay484, i64 %conv485, i32 2)
  br label %if.end.489

if.else.486:                                      ; preds = %if.end.481
  %346 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %arraydecay487 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0
  %347 = load i32, i32* %cnt, align 4
  %conv488 = sext i32 %347 to i64
  call void @Perl_sv_setpvn(%struct.sv* %346, i8* %arraydecay487, i64 %conv488)
  br label %if.end.489

if.end.489:                                       ; preds = %if.else.486, %if.then.483
  %348 = load i32, i32* %i, align 4
  %cmp490 = icmp ne i32 %348, -1
  br i1 %cmp490, label %land.lhs.true.492, label %if.end.518

land.lhs.true.492:                                ; preds = %if.end.489
  %349 = load i64, i64* %rslen, align 8
  %tobool493 = icmp ne i64 %349, 0
  br i1 %tobool493, label %lor.lhs.false.494, label %if.then.509

lor.lhs.false.494:                                ; preds = %land.lhs.true.492
  %350 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any495 = getelementptr inbounds %struct.sv, %struct.sv* %350, i32 0, i32 0
  %351 = load i8*, i8** %sv_any495, align 8
  %352 = bitcast i8* %351 to %struct.xpv*
  %xpv_cur496 = getelementptr inbounds %struct.xpv, %struct.xpv* %352, i32 0, i32 1
  %353 = load i64, i64* %xpv_cur496, align 8
  %354 = load i64, i64* %rslen, align 8
  %cmp497 = icmp ult i64 %353, %354
  br i1 %cmp497, label %if.then.509, label %lor.lhs.false.499

lor.lhs.false.499:                                ; preds = %lor.lhs.false.494
  %355 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any500 = getelementptr inbounds %struct.sv, %struct.sv* %355, i32 0, i32 0
  %356 = load i8*, i8** %sv_any500, align 8
  %357 = bitcast i8* %356 to %struct.xpv*
  %xpv_pv501 = getelementptr inbounds %struct.xpv, %struct.xpv* %357, i32 0, i32 0
  %358 = load i8*, i8** %xpv_pv501, align 8
  %359 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any502 = getelementptr inbounds %struct.sv, %struct.sv* %359, i32 0, i32 0
  %360 = load i8*, i8** %sv_any502, align 8
  %361 = bitcast i8* %360 to %struct.xpv*
  %xpv_cur503 = getelementptr inbounds %struct.xpv, %struct.xpv* %361, i32 0, i32 1
  %362 = load i64, i64* %xpv_cur503, align 8
  %add.ptr504 = getelementptr inbounds i8, i8* %358, i64 %362
  %363 = load i64, i64* %rslen, align 8
  %idx.neg505 = sub i64 0, %363
  %add.ptr506 = getelementptr inbounds i8, i8* %add.ptr504, i64 %idx.neg505
  %364 = load i8*, i8** %rsptr, align 8
  %365 = load i64, i64* %rslen, align 8
  %call507 = call i32 @memcmp(i8* %add.ptr506, i8* %364, i64 %365)
  %tobool508 = icmp ne i32 %call507, 0
  br i1 %tobool508, label %if.then.509, label %if.end.518

if.then.509:                                      ; preds = %lor.lhs.false.499, %lor.lhs.false.494, %land.lhs.true.492
  store i32 -1, i32* %append.addr, align 4
  %366 = load i32, i32* %cnt, align 4
  %conv510 = sext i32 %366 to i64
  %cmp511 = icmp ult i64 %conv510, 8192
  br i1 %cmp511, label %land.lhs.true.513, label %if.then.516

land.lhs.true.513:                                ; preds = %if.then.509
  %367 = load %struct._PerlIO**, %struct._PerlIO*** %fp.addr, align 8
  %call514 = call i32 @Perl_PerlIO_eof(%struct._PerlIO** %367)
  %tobool515 = icmp ne i32 %call514, 0
  br i1 %tobool515, label %if.end.517, label %if.then.516

if.then.516:                                      ; preds = %land.lhs.true.513, %if.then.509
  br label %screamer2

if.end.517:                                       ; preds = %land.lhs.true.513
  br label %if.end.518

if.end.518:                                       ; preds = %if.end.517, %lor.lhs.false.499, %if.end.489
  br label %if.end.519

if.end.519:                                       ; preds = %if.end.518, %if.end.428
  %368 = load i32, i32* %rspara, align 4
  %tobool520 = icmp ne i32 %368, 0
  br i1 %tobool520, label %if.then.521, label %if.end.533

if.then.521:                                      ; preds = %if.end.519
  br label %while.cond.522

while.cond.522:                                   ; preds = %if.end.531, %if.then.521
  %369 = load i32, i32* %i, align 4
  %cmp523 = icmp ne i32 %369, -1
  br i1 %cmp523, label %while.body.525, label %while.end.532

while.body.525:                                   ; preds = %while.cond.522
  %370 = load %struct._PerlIO**, %struct._PerlIO*** %fp.addr, align 8
  %call526 = call i32 @PerlIO_getc(%struct._PerlIO** %370)
  store i32 %call526, i32* %i, align 4
  %371 = load i32, i32* %i, align 4
  %cmp527 = icmp ne i32 %371, 10
  br i1 %cmp527, label %if.then.529, label %if.end.531

if.then.529:                                      ; preds = %while.body.525
  %372 = load %struct._PerlIO**, %struct._PerlIO*** %fp.addr, align 8
  %373 = load i32, i32* %i, align 4
  %call530 = call i32 @PerlIO_ungetc(%struct._PerlIO** %372, i32 %373)
  br label %while.end.532

if.end.531:                                       ; preds = %while.body.525
  br label %while.cond.522

while.end.532:                                    ; preds = %if.then.529, %while.cond.522
  br label %if.end.533

if.end.533:                                       ; preds = %while.end.532, %if.end.519
  br label %return_string_or_null

return_string_or_null:                            ; preds = %if.end.533, %if.end.144, %if.then.21
  %374 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any534 = getelementptr inbounds %struct.sv, %struct.sv* %374, i32 0, i32 0
  %375 = load i8*, i8** %sv_any534, align 8
  %376 = bitcast i8* %375 to %struct.xpv*
  %xpv_cur535 = getelementptr inbounds %struct.xpv, %struct.xpv* %376, i32 0, i32 1
  %377 = load i64, i64* %xpv_cur535, align 8
  %378 = load i32, i32* %append.addr, align 4
  %conv536 = sext i32 %378 to i64
  %sub537 = sub i64 %377, %conv536
  %tobool538 = icmp ne i64 %sub537, 0
  br i1 %tobool538, label %cond.true.539, label %cond.false.542

cond.true.539:                                    ; preds = %return_string_or_null
  %379 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any540 = getelementptr inbounds %struct.sv, %struct.sv* %379, i32 0, i32 0
  %380 = load i8*, i8** %sv_any540, align 8
  %381 = bitcast i8* %380 to %struct.xpv*
  %xpv_pv541 = getelementptr inbounds %struct.xpv, %struct.xpv* %381, i32 0, i32 0
  %382 = load i8*, i8** %xpv_pv541, align 8
  br label %cond.end.543

cond.false.542:                                   ; preds = %return_string_or_null
  br label %cond.end.543

cond.end.543:                                     ; preds = %cond.false.542, %cond.true.539
  %cond544 = phi i8* [ %382, %cond.true.539 ], [ null, %cond.false.542 ]
  store i8* %cond544, i8** %retval
  br label %return

return:                                           ; preds = %cond.end.543, %if.then.225, %if.then.217
  %383 = load i8*, i8** %retval
  ret i8* %383
}

declare i32 @PerlIO_isutf8(%struct._PerlIO**) #1

declare i32 @fstat(i32, %struct.stat*) #1

declare i32 @Perl_PerlIO_fileno(%struct._PerlIO**) #1

declare i64 @Perl_PerlIO_tell(%struct._PerlIO**) #1

declare i64 @Perl_PerlIO_read(%struct._PerlIO**, i8*, i64) #1

declare i32 @Perl_PerlIO_eof(%struct._PerlIO**) #1

declare i32 @PerlIO_getc(%struct._PerlIO**) #1

declare i32 @PerlIO_ungetc(%struct._PerlIO**, i32) #1

declare i32 @PerlIO_fast_gets(%struct._PerlIO**) #1

declare i32 @Perl_PerlIO_get_cnt(%struct._PerlIO**) #1

declare i8* @Perl_PerlIO_get_ptr(%struct._PerlIO**) #1

declare void @Perl_PerlIO_set_ptrcnt(%struct._PerlIO**, i8*, i32) #1

; Function Attrs: nounwind uwtable
define void @Perl_sv_inc(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %d = alloca i8*, align 8
  %flags = alloca i32, align 4
  %i = alloca i64, align 8
  %numtype = alloca i32, align 4
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %if.end.296

if.end:                                           ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and = and i32 %2, 8192
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %if.then.2, label %if.end.3

if.then.2:                                        ; preds = %if.end
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i32 @Perl_mg_get(%struct.sv* %3)
  br label %if.end.3

if.end.3:                                         ; preds = %if.then.2, %if.end
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags4 = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 2
  %5 = load i32, i32* %sv_flags4, align 4
  %and5 = and i32 %5, 9961472
  %tobool6 = icmp ne i32 %and5, 0
  br i1 %tobool6, label %if.then.7, label %if.end.36

if.then.7:                                        ; preds = %if.end.3
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags8 = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 2
  %7 = load i32, i32* %sv_flags8, align 4
  %and9 = and i32 %7, 8388608
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %land.lhs.true, label %if.end.15

land.lhs.true:                                    ; preds = %if.then.7
  %8 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags11 = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 2
  %9 = load i32, i32* %sv_flags11, align 4
  %and12 = and i32 %9, 1048576
  %tobool13 = icmp ne i32 %and12, 0
  br i1 %tobool13, label %if.then.14, label %if.end.15

if.then.14:                                       ; preds = %land.lhs.true
  %10 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_force_normal(%struct.sv* %10)
  br label %if.end.15

if.end.15:                                        ; preds = %if.then.14, %land.lhs.true, %if.then.7
  %11 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags16 = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 2
  %12 = load i32, i32* %sv_flags16, align 4
  %and17 = and i32 %12, 8388608
  %tobool18 = icmp ne i32 %and17, 0
  br i1 %tobool18, label %if.then.19, label %if.end.22

if.then.19:                                       ; preds = %if.end.15
  %13 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cmp = icmp ne %struct.cop* %13, @PL_compiling
  br i1 %cmp, label %if.then.20, label %if.end.21

if.then.20:                                       ; preds = %if.then.19
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_modify, i32 0, i32 0))
  br label %if.end.21

if.end.21:                                        ; preds = %if.then.20, %if.then.19
  br label %if.end.22

if.end.22:                                        ; preds = %if.end.21, %if.end.15
  %14 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags23 = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 2
  %15 = load i32, i32* %sv_flags23, align 4
  %and24 = and i32 %15, 524288
  %tobool25 = icmp ne i32 %and24, 0
  br i1 %tobool25, label %if.then.26, label %if.end.35

if.then.26:                                       ; preds = %if.end.22
  %16 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags27 = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 2
  %17 = load i32, i32* %sv_flags27, align 4
  %and28 = and i32 %17, 268435456
  %tobool29 = icmp ne i32 %and28, 0
  br i1 %tobool29, label %land.lhs.true.30, label %if.end.34

land.lhs.true.30:                                 ; preds = %if.then.26
  %18 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call31 = call %struct.sv* @Perl_amagic_call(%struct.sv* %18, %struct.sv* @PL_sv_undef, i32 44, i32 9)
  %tobool32 = icmp ne %struct.sv* %call31, null
  br i1 %tobool32, label %if.then.33, label %if.end.34

if.then.33:                                       ; preds = %land.lhs.true.30
  br label %if.end.296

if.end.34:                                        ; preds = %land.lhs.true.30, %if.then.26
  %19 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 0
  %20 = load i8*, i8** %sv_any, align 8
  %21 = bitcast i8* %20 to %struct.xrv*
  %xrv_rv = getelementptr inbounds %struct.xrv, %struct.xrv* %21, i32 0, i32 0
  %22 = load %struct.sv*, %struct.sv** %xrv_rv, align 8
  %23 = ptrtoint %struct.sv* %22 to i64
  store i64 %23, i64* %i, align 8
  %24 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_unref(%struct.sv* %24)
  %25 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %26 = load i64, i64* %i, align 8
  call void @Perl_sv_setiv(%struct.sv* %25, i64 %26)
  br label %if.end.35

if.end.35:                                        ; preds = %if.end.34, %if.end.22
  br label %if.end.36

if.end.36:                                        ; preds = %if.end.35, %if.end.3
  %27 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags37 = getelementptr inbounds %struct.sv, %struct.sv* %27, i32 0, i32 2
  %28 = load i32, i32* %sv_flags37, align 4
  store i32 %28, i32* %flags, align 4
  %29 = load i32, i32* %flags, align 4
  %and38 = and i32 %29, 50331648
  %cmp39 = icmp eq i32 %and38, 33554432
  br i1 %cmp39, label %if.then.40, label %if.end.47

if.then.40:                                       ; preds = %if.end.36
  %30 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags41 = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 2
  %31 = load i32, i32* %sv_flags41, align 4
  %and42 = and i32 %31, 65536
  %tobool43 = icmp ne i32 %and42, 0
  br i1 %tobool43, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.40
  %32 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any44 = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 0
  %33 = load i8*, i8** %sv_any44, align 8
  %34 = bitcast i8* %33 to %struct.xpviv*
  %xiv_iv = getelementptr inbounds %struct.xpviv, %struct.xpviv* %34, i32 0, i32 3
  %35 = load i64, i64* %xiv_iv, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then.40
  %36 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call45 = call i64 @Perl_sv_2iv(%struct.sv* %36)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %35, %cond.true ], [ %call45, %cond.false ]
  %37 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags46 = getelementptr inbounds %struct.sv, %struct.sv* %37, i32 0, i32 2
  %38 = load i32, i32* %sv_flags46, align 4
  store i32 %38, i32* %flags, align 4
  br label %if.end.47

if.end.47:                                        ; preds = %cond.end, %if.end.36
  %39 = load i32, i32* %flags, align 4
  %and48 = and i32 %39, 65536
  %tobool49 = icmp ne i32 %and48, 0
  br i1 %tobool49, label %if.then.52, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.47
  %40 = load i32, i32* %flags, align 4
  %and50 = and i32 %40, 50331648
  %cmp51 = icmp eq i32 %and50, 16777216
  br i1 %cmp51, label %if.then.52, label %if.end.94

if.then.52:                                       ; preds = %lor.lhs.false, %if.end.47
  br label %oops_its_int

oops_its_int:                                     ; preds = %if.then.183, %if.then.52
  %41 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags53 = getelementptr inbounds %struct.sv, %struct.sv* %41, i32 0, i32 2
  %42 = load i32, i32* %sv_flags53, align 4
  %and54 = and i32 %42, -2147483648
  %tobool55 = icmp ne i32 %and54, 0
  br i1 %tobool55, label %if.then.56, label %if.else.71

if.then.56:                                       ; preds = %oops_its_int
  %43 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any57 = getelementptr inbounds %struct.sv, %struct.sv* %43, i32 0, i32 0
  %44 = load i8*, i8** %sv_any57, align 8
  %45 = bitcast i8* %44 to %struct.xpvuv*
  %xuv_uv = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %45, i32 0, i32 3
  %46 = load i64, i64* %xuv_uv, align 8
  %cmp58 = icmp eq i64 %46, -1
  br i1 %cmp58, label %if.then.59, label %if.else

if.then.59:                                       ; preds = %if.then.56
  %47 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_setnv(%struct.sv* %47, double 0x43F0000000000000)
  br label %if.end.68

if.else:                                          ; preds = %if.then.56
  %48 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags60 = getelementptr inbounds %struct.sv, %struct.sv* %48, i32 0, i32 2
  %49 = load i32, i32* %sv_flags60, align 4
  %and61 = and i32 %49, -923729921
  store i32 %and61, i32* %sv_flags60, align 4
  %50 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags62 = getelementptr inbounds %struct.sv, %struct.sv* %50, i32 0, i32 2
  %51 = load i32, i32* %sv_flags62, align 4
  %and63 = and i32 %51, 2097152
  %tobool64 = icmp ne i32 %and63, 0
  br i1 %tobool64, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.else
  %52 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call65 = call i32 @Perl_sv_backoff(%struct.sv* %52)
  %tobool66 = icmp ne i32 %call65, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.else
  %53 = phi i1 [ false, %if.else ], [ %tobool66, %land.rhs ]
  %land.ext = zext i1 %53 to i32
  %54 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags67 = getelementptr inbounds %struct.sv, %struct.sv* %54, i32 0, i32 2
  %55 = load i32, i32* %sv_flags67, align 4
  %or = or i32 %55, 16842752
  store i32 %or, i32* %sv_flags67, align 4
  br label %if.end.68

if.end.68:                                        ; preds = %land.end, %if.then.59
  %56 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any69 = getelementptr inbounds %struct.sv, %struct.sv* %56, i32 0, i32 0
  %57 = load i8*, i8** %sv_any69, align 8
  %58 = bitcast i8* %57 to %struct.xpvuv*
  %xuv_uv70 = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %58, i32 0, i32 3
  %59 = load i64, i64* %xuv_uv70, align 8
  %inc = add i64 %59, 1
  store i64 %inc, i64* %xuv_uv70, align 8
  br label %if.end.93

if.else.71:                                       ; preds = %oops_its_int
  %60 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any72 = getelementptr inbounds %struct.sv, %struct.sv* %60, i32 0, i32 0
  %61 = load i8*, i8** %sv_any72, align 8
  %62 = bitcast i8* %61 to %struct.xpviv*
  %xiv_iv73 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %62, i32 0, i32 3
  %63 = load i64, i64* %xiv_iv73, align 8
  %cmp74 = icmp eq i64 %63, 9223372036854775807
  br i1 %cmp74, label %if.then.75, label %if.else.76

if.then.75:                                       ; preds = %if.else.71
  %64 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_setuv(%struct.sv* %64, i64 -9223372036854775808)
  br label %if.end.92

if.else.76:                                       ; preds = %if.else.71
  %65 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags77 = getelementptr inbounds %struct.sv, %struct.sv* %65, i32 0, i32 2
  %66 = load i32, i32* %sv_flags77, align 4
  %and78 = and i32 %66, 1223753727
  store i32 %and78, i32* %sv_flags77, align 4
  %67 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags79 = getelementptr inbounds %struct.sv, %struct.sv* %67, i32 0, i32 2
  %68 = load i32, i32* %sv_flags79, align 4
  %and80 = and i32 %68, 2097152
  %tobool81 = icmp ne i32 %and80, 0
  br i1 %tobool81, label %land.rhs.82, label %land.end.85

land.rhs.82:                                      ; preds = %if.else.76
  %69 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call83 = call i32 @Perl_sv_backoff(%struct.sv* %69)
  %tobool84 = icmp ne i32 %call83, 0
  br label %land.end.85

land.end.85:                                      ; preds = %land.rhs.82, %if.else.76
  %70 = phi i1 [ false, %if.else.76 ], [ %tobool84, %land.rhs.82 ]
  %land.ext86 = zext i1 %70 to i32
  %71 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags87 = getelementptr inbounds %struct.sv, %struct.sv* %71, i32 0, i32 2
  %72 = load i32, i32* %sv_flags87, align 4
  %or88 = or i32 %72, 16842752
  store i32 %or88, i32* %sv_flags87, align 4
  %73 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any89 = getelementptr inbounds %struct.sv, %struct.sv* %73, i32 0, i32 0
  %74 = load i8*, i8** %sv_any89, align 8
  %75 = bitcast i8* %74 to %struct.xpviv*
  %xiv_iv90 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %75, i32 0, i32 3
  %76 = load i64, i64* %xiv_iv90, align 8
  %inc91 = add nsw i64 %76, 1
  store i64 %inc91, i64* %xiv_iv90, align 8
  br label %if.end.92

if.end.92:                                        ; preds = %land.end.85, %if.then.75
  br label %if.end.93

if.end.93:                                        ; preds = %if.end.92, %if.end.68
  br label %if.end.296

if.end.94:                                        ; preds = %lor.lhs.false
  %77 = load i32, i32* %flags, align 4
  %and95 = and i32 %77, 33554432
  %tobool96 = icmp ne i32 %and95, 0
  br i1 %tobool96, label %if.then.97, label %if.end.111

if.then.97:                                       ; preds = %if.end.94
  %78 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags98 = getelementptr inbounds %struct.sv, %struct.sv* %78, i32 0, i32 2
  %79 = load i32, i32* %sv_flags98, align 4
  %and99 = and i32 %79, 1223753727
  store i32 %and99, i32* %sv_flags98, align 4
  %80 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags100 = getelementptr inbounds %struct.sv, %struct.sv* %80, i32 0, i32 2
  %81 = load i32, i32* %sv_flags100, align 4
  %and101 = and i32 %81, 2097152
  %tobool102 = icmp ne i32 %and101, 0
  br i1 %tobool102, label %land.rhs.103, label %land.end.106

land.rhs.103:                                     ; preds = %if.then.97
  %82 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call104 = call i32 @Perl_sv_backoff(%struct.sv* %82)
  %tobool105 = icmp ne i32 %call104, 0
  br label %land.end.106

land.end.106:                                     ; preds = %land.rhs.103, %if.then.97
  %83 = phi i1 [ false, %if.then.97 ], [ %tobool105, %land.rhs.103 ]
  %land.ext107 = zext i1 %83 to i32
  %84 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags108 = getelementptr inbounds %struct.sv, %struct.sv* %84, i32 0, i32 2
  %85 = load i32, i32* %sv_flags108, align 4
  %or109 = or i32 %85, 33685504
  store i32 %or109, i32* %sv_flags108, align 4
  %86 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any110 = getelementptr inbounds %struct.sv, %struct.sv* %86, i32 0, i32 0
  %87 = load i8*, i8** %sv_any110, align 8
  %88 = bitcast i8* %87 to %struct.xpvnv*
  %xnv_nv = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %88, i32 0, i32 4
  %89 = load double, double* %xnv_nv, align 8
  %add = fadd double %89, 1.000000e+00
  store double %add, double* %xnv_nv, align 8
  br label %if.end.296

if.end.111:                                       ; preds = %if.end.94
  %90 = load i32, i32* %flags, align 4
  %and112 = and i32 %90, 67108864
  %tobool113 = icmp ne i32 %and112, 0
  br i1 %tobool113, label %lor.lhs.false.114, label %if.then.117

lor.lhs.false.114:                                ; preds = %if.end.111
  %91 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any115 = getelementptr inbounds %struct.sv, %struct.sv* %91, i32 0, i32 0
  %92 = load i8*, i8** %sv_any115, align 8
  %93 = bitcast i8* %92 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %93, i32 0, i32 0
  %94 = load i8*, i8** %xpv_pv, align 8
  %95 = load i8, i8* %94, align 1
  %tobool116 = icmp ne i8 %95, 0
  br i1 %tobool116, label %if.end.137, label %if.then.117

if.then.117:                                      ; preds = %lor.lhs.false.114, %if.end.111
  %96 = load i32, i32* %flags, align 4
  %and118 = and i32 %96, 255
  %cmp119 = icmp slt i32 %and118, 5
  br i1 %cmp119, label %if.then.120, label %if.end.122

if.then.120:                                      ; preds = %if.then.117
  %97 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call121 = call signext i8 @Perl_sv_upgrade(%struct.sv* %97, i32 1)
  br label %if.end.122

if.end.122:                                       ; preds = %if.then.120, %if.then.117
  %98 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags123 = getelementptr inbounds %struct.sv, %struct.sv* %98, i32 0, i32 2
  %99 = load i32, i32* %sv_flags123, align 4
  %and124 = and i32 %99, 1223753727
  store i32 %and124, i32* %sv_flags123, align 4
  %100 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags125 = getelementptr inbounds %struct.sv, %struct.sv* %100, i32 0, i32 2
  %101 = load i32, i32* %sv_flags125, align 4
  %and126 = and i32 %101, 2097152
  %tobool127 = icmp ne i32 %and126, 0
  br i1 %tobool127, label %land.rhs.128, label %land.end.131

land.rhs.128:                                     ; preds = %if.end.122
  %102 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call129 = call i32 @Perl_sv_backoff(%struct.sv* %102)
  %tobool130 = icmp ne i32 %call129, 0
  br label %land.end.131

land.end.131:                                     ; preds = %land.rhs.128, %if.end.122
  %103 = phi i1 [ false, %if.end.122 ], [ %tobool130, %land.rhs.128 ]
  %land.ext132 = zext i1 %103 to i32
  %104 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags133 = getelementptr inbounds %struct.sv, %struct.sv* %104, i32 0, i32 2
  %105 = load i32, i32* %sv_flags133, align 4
  %or134 = or i32 %105, 16842752
  store i32 %or134, i32* %sv_flags133, align 4
  %106 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any135 = getelementptr inbounds %struct.sv, %struct.sv* %106, i32 0, i32 0
  %107 = load i8*, i8** %sv_any135, align 8
  %108 = bitcast i8* %107 to %struct.xpviv*
  %xiv_iv136 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %108, i32 0, i32 3
  store i64 1, i64* %xiv_iv136, align 8
  br label %if.end.296

if.end.137:                                       ; preds = %lor.lhs.false.114
  %109 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any138 = getelementptr inbounds %struct.sv, %struct.sv* %109, i32 0, i32 0
  %110 = load i8*, i8** %sv_any138, align 8
  %111 = bitcast i8* %110 to %struct.xpv*
  %xpv_pv139 = getelementptr inbounds %struct.xpv, %struct.xpv* %111, i32 0, i32 0
  %112 = load i8*, i8** %xpv_pv139, align 8
  store i8* %112, i8** %d, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end.137
  %113 = load i8*, i8** %d, align 8
  %114 = load i8, i8* %113, align 1
  %conv = sext i8 %114 to i32
  %cmp140 = icmp sge i32 %conv, 65
  br i1 %cmp140, label %land.lhs.true.142, label %lor.rhs

land.lhs.true.142:                                ; preds = %while.cond
  %115 = load i8*, i8** %d, align 8
  %116 = load i8, i8* %115, align 1
  %conv143 = sext i8 %116 to i32
  %cmp144 = icmp sle i32 %conv143, 90
  br i1 %cmp144, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.lhs.true.142, %while.cond
  %117 = load i8*, i8** %d, align 8
  %118 = load i8, i8* %117, align 1
  %conv146 = sext i8 %118 to i32
  %cmp147 = icmp sge i32 %conv146, 97
  br i1 %cmp147, label %land.rhs.149, label %land.end.153

land.rhs.149:                                     ; preds = %lor.rhs
  %119 = load i8*, i8** %d, align 8
  %120 = load i8, i8* %119, align 1
  %conv150 = sext i8 %120 to i32
  %cmp151 = icmp sle i32 %conv150, 122
  br label %land.end.153

land.end.153:                                     ; preds = %land.rhs.149, %lor.rhs
  %121 = phi i1 [ false, %lor.rhs ], [ %cmp151, %land.rhs.149 ]
  br label %lor.end

lor.end:                                          ; preds = %land.end.153, %land.lhs.true.142
  %122 = phi i1 [ true, %land.lhs.true.142 ], [ %121, %land.end.153 ]
  br i1 %122, label %while.body, label %while.end

while.body:                                       ; preds = %lor.end
  %123 = load i8*, i8** %d, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %123, i32 1
  store i8* %incdec.ptr, i8** %d, align 8
  br label %while.cond

while.end:                                        ; preds = %lor.end
  br label %while.cond.155

while.cond.155:                                   ; preds = %while.body.165, %while.end
  %124 = load i8*, i8** %d, align 8
  %125 = load i8, i8* %124, align 1
  %conv156 = sext i8 %125 to i32
  %cmp157 = icmp sge i32 %conv156, 48
  br i1 %cmp157, label %land.rhs.159, label %land.end.163

land.rhs.159:                                     ; preds = %while.cond.155
  %126 = load i8*, i8** %d, align 8
  %127 = load i8, i8* %126, align 1
  %conv160 = sext i8 %127 to i32
  %cmp161 = icmp sle i32 %conv160, 57
  br label %land.end.163

land.end.163:                                     ; preds = %land.rhs.159, %while.cond.155
  %128 = phi i1 [ false, %while.cond.155 ], [ %cmp161, %land.rhs.159 ]
  br i1 %128, label %while.body.165, label %while.end.167

while.body.165:                                   ; preds = %land.end.163
  %129 = load i8*, i8** %d, align 8
  %incdec.ptr166 = getelementptr inbounds i8, i8* %129, i32 1
  store i8* %incdec.ptr166, i8** %d, align 8
  br label %while.cond.155

while.end.167:                                    ; preds = %land.end.163
  %130 = load i8*, i8** %d, align 8
  %131 = load i8, i8* %130, align 1
  %tobool168 = icmp ne i8 %131, 0
  br i1 %tobool168, label %if.then.169, label %if.end.209

if.then.169:                                      ; preds = %while.end.167
  %132 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any170 = getelementptr inbounds %struct.sv, %struct.sv* %132, i32 0, i32 0
  %133 = load i8*, i8** %sv_any170, align 8
  %134 = bitcast i8* %133 to %struct.xpv*
  %xpv_pv171 = getelementptr inbounds %struct.xpv, %struct.xpv* %134, i32 0, i32 0
  %135 = load i8*, i8** %xpv_pv171, align 8
  %136 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any172 = getelementptr inbounds %struct.sv, %struct.sv* %136, i32 0, i32 0
  %137 = load i8*, i8** %sv_any172, align 8
  %138 = bitcast i8* %137 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %138, i32 0, i32 1
  %139 = load i64, i64* %xpv_cur, align 8
  %call173 = call i32 @Perl_grok_number(i8* %135, i64 %139, i64* null)
  store i32 %call173, i32* %numtype, align 4
  %140 = load i32, i32* %numtype, align 4
  %tobool174 = icmp ne i32 %140, 0
  br i1 %tobool174, label %land.lhs.true.175, label %if.end.204

land.lhs.true.175:                                ; preds = %if.then.169
  %141 = load i32, i32* %numtype, align 4
  %and176 = and i32 %141, 16
  %tobool177 = icmp ne i32 %and176, 0
  br i1 %tobool177, label %if.end.204, label %if.then.178

if.then.178:                                      ; preds = %land.lhs.true.175
  %142 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call179 = call i64 @Perl_sv_2iv(%struct.sv* %142)
  %143 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags180 = getelementptr inbounds %struct.sv, %struct.sv* %143, i32 0, i32 2
  %144 = load i32, i32* %sv_flags180, align 4
  %and181 = and i32 %144, 65536
  %tobool182 = icmp ne i32 %and181, 0
  br i1 %tobool182, label %if.then.183, label %if.end.184

if.then.183:                                      ; preds = %if.then.178
  br label %oops_its_int

if.end.184:                                       ; preds = %if.then.178
  %145 = load i32, i32* %flags, align 4
  %and185 = and i32 %145, 33554432
  %tobool186 = icmp ne i32 %and185, 0
  br i1 %tobool186, label %if.then.187, label %if.end.203

if.then.187:                                      ; preds = %if.end.184
  %146 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags188 = getelementptr inbounds %struct.sv, %struct.sv* %146, i32 0, i32 2
  %147 = load i32, i32* %sv_flags188, align 4
  %and189 = and i32 %147, 1223753727
  store i32 %and189, i32* %sv_flags188, align 4
  %148 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags190 = getelementptr inbounds %struct.sv, %struct.sv* %148, i32 0, i32 2
  %149 = load i32, i32* %sv_flags190, align 4
  %and191 = and i32 %149, 2097152
  %tobool192 = icmp ne i32 %and191, 0
  br i1 %tobool192, label %land.rhs.193, label %land.end.196

land.rhs.193:                                     ; preds = %if.then.187
  %150 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call194 = call i32 @Perl_sv_backoff(%struct.sv* %150)
  %tobool195 = icmp ne i32 %call194, 0
  br label %land.end.196

land.end.196:                                     ; preds = %land.rhs.193, %if.then.187
  %151 = phi i1 [ false, %if.then.187 ], [ %tobool195, %land.rhs.193 ]
  %land.ext197 = zext i1 %151 to i32
  %152 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags198 = getelementptr inbounds %struct.sv, %struct.sv* %152, i32 0, i32 2
  %153 = load i32, i32* %sv_flags198, align 4
  %or199 = or i32 %153, 33685504
  store i32 %or199, i32* %sv_flags198, align 4
  %154 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any200 = getelementptr inbounds %struct.sv, %struct.sv* %154, i32 0, i32 0
  %155 = load i8*, i8** %sv_any200, align 8
  %156 = bitcast i8* %155 to %struct.xpvnv*
  %xnv_nv201 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %156, i32 0, i32 4
  %157 = load double, double* %xnv_nv201, align 8
  %add202 = fadd double %157, 1.000000e+00
  store double %add202, double* %xnv_nv201, align 8
  br label %if.end.296

if.end.203:                                       ; preds = %if.end.184
  br label %if.end.204

if.end.204:                                       ; preds = %if.end.203, %land.lhs.true.175, %if.then.169
  %158 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %159 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any205 = getelementptr inbounds %struct.sv, %struct.sv* %159, i32 0, i32 0
  %160 = load i8*, i8** %sv_any205, align 8
  %161 = bitcast i8* %160 to %struct.xpv*
  %xpv_pv206 = getelementptr inbounds %struct.xpv, %struct.xpv* %161, i32 0, i32 0
  %162 = load i8*, i8** %xpv_pv206, align 8
  %call207 = call double @Perl_my_atof(i8* %162)
  %add208 = fadd double %call207, 1.000000e+00
  call void @Perl_sv_setnv(%struct.sv* %158, double %add208)
  br label %if.end.296

if.end.209:                                       ; preds = %while.end.167
  %163 = load i8*, i8** %d, align 8
  %incdec.ptr210 = getelementptr inbounds i8, i8* %163, i32 -1
  store i8* %incdec.ptr210, i8** %d, align 8
  br label %while.cond.211

while.cond.211:                                   ; preds = %if.end.254, %if.end.209
  %164 = load i8*, i8** %d, align 8
  %165 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any212 = getelementptr inbounds %struct.sv, %struct.sv* %165, i32 0, i32 0
  %166 = load i8*, i8** %sv_any212, align 8
  %167 = bitcast i8* %166 to %struct.xpv*
  %xpv_pv213 = getelementptr inbounds %struct.xpv, %struct.xpv* %167, i32 0, i32 0
  %168 = load i8*, i8** %xpv_pv213, align 8
  %cmp214 = icmp uge i8* %164, %168
  br i1 %cmp214, label %while.body.216, label %while.end.255

while.body.216:                                   ; preds = %while.cond.211
  %169 = load i8*, i8** %d, align 8
  %170 = load i8, i8* %169, align 1
  %conv217 = sext i8 %170 to i32
  %cmp218 = icmp sge i32 %conv217, 48
  br i1 %cmp218, label %land.lhs.true.220, label %if.else.232

land.lhs.true.220:                                ; preds = %while.body.216
  %171 = load i8*, i8** %d, align 8
  %172 = load i8, i8* %171, align 1
  %conv221 = sext i8 %172 to i32
  %cmp222 = icmp sle i32 %conv221, 57
  br i1 %cmp222, label %if.then.224, label %if.else.232

if.then.224:                                      ; preds = %land.lhs.true.220
  %173 = load i8*, i8** %d, align 8
  %174 = load i8, i8* %173, align 1
  %inc225 = add i8 %174, 1
  store i8 %inc225, i8* %173, align 1
  %conv226 = sext i8 %inc225 to i32
  %cmp227 = icmp sle i32 %conv226, 57
  br i1 %cmp227, label %if.then.229, label %if.end.230

if.then.229:                                      ; preds = %if.then.224
  br label %if.end.296

if.end.230:                                       ; preds = %if.then.224
  %175 = load i8*, i8** %d, align 8
  %incdec.ptr231 = getelementptr inbounds i8, i8* %175, i32 -1
  store i8* %incdec.ptr231, i8** %d, align 8
  store i8 48, i8* %175, align 1
  br label %if.end.254

if.else.232:                                      ; preds = %land.lhs.true.220, %while.body.216
  %176 = load i8*, i8** %d, align 8
  %177 = load i8, i8* %176, align 1
  %inc233 = add i8 %177, 1
  store i8 %inc233, i8* %176, align 1
  %178 = load i8*, i8** %d, align 8
  %179 = load i8, i8* %178, align 1
  %conv234 = sext i8 %179 to i32
  %cmp235 = icmp sge i32 %conv234, 65
  br i1 %cmp235, label %land.lhs.true.237, label %lor.lhs.false.241

land.lhs.true.237:                                ; preds = %if.else.232
  %180 = load i8*, i8** %d, align 8
  %181 = load i8, i8* %180, align 1
  %conv238 = sext i8 %181 to i32
  %cmp239 = icmp sle i32 %conv238, 90
  br i1 %cmp239, label %if.then.249, label %lor.lhs.false.241

lor.lhs.false.241:                                ; preds = %land.lhs.true.237, %if.else.232
  %182 = load i8*, i8** %d, align 8
  %183 = load i8, i8* %182, align 1
  %conv242 = sext i8 %183 to i32
  %cmp243 = icmp sge i32 %conv242, 97
  br i1 %cmp243, label %land.lhs.true.245, label %if.end.250

land.lhs.true.245:                                ; preds = %lor.lhs.false.241
  %184 = load i8*, i8** %d, align 8
  %185 = load i8, i8* %184, align 1
  %conv246 = sext i8 %185 to i32
  %cmp247 = icmp sle i32 %conv246, 122
  br i1 %cmp247, label %if.then.249, label %if.end.250

if.then.249:                                      ; preds = %land.lhs.true.245, %land.lhs.true.237
  br label %if.end.296

if.end.250:                                       ; preds = %land.lhs.true.245, %lor.lhs.false.241
  %186 = load i8*, i8** %d, align 8
  %incdec.ptr251 = getelementptr inbounds i8, i8* %186, i32 -1
  store i8* %incdec.ptr251, i8** %d, align 8
  %187 = load i8, i8* %186, align 1
  %conv252 = sext i8 %187 to i32
  %sub = sub nsw i32 %conv252, 26
  %conv253 = trunc i32 %sub to i8
  store i8 %conv253, i8* %186, align 1
  br label %if.end.254

if.end.254:                                       ; preds = %if.end.250, %if.end.230
  br label %while.cond.211

while.end.255:                                    ; preds = %while.cond.211
  %188 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any256 = getelementptr inbounds %struct.sv, %struct.sv* %188, i32 0, i32 0
  %189 = load i8*, i8** %sv_any256, align 8
  %190 = bitcast i8* %189 to %struct.xpv*
  %xpv_len = getelementptr inbounds %struct.xpv, %struct.xpv* %190, i32 0, i32 2
  %191 = load i64, i64* %xpv_len, align 8
  %192 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any257 = getelementptr inbounds %struct.sv, %struct.sv* %192, i32 0, i32 0
  %193 = load i8*, i8** %sv_any257, align 8
  %194 = bitcast i8* %193 to %struct.xpv*
  %xpv_cur258 = getelementptr inbounds %struct.xpv, %struct.xpv* %194, i32 0, i32 1
  %195 = load i64, i64* %xpv_cur258, align 8
  %add259 = add i64 %195, 2
  %cmp260 = icmp ult i64 %191, %add259
  br i1 %cmp260, label %cond.true.262, label %cond.false.267

cond.true.262:                                    ; preds = %while.end.255
  %196 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %197 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any263 = getelementptr inbounds %struct.sv, %struct.sv* %197, i32 0, i32 0
  %198 = load i8*, i8** %sv_any263, align 8
  %199 = bitcast i8* %198 to %struct.xpv*
  %xpv_cur264 = getelementptr inbounds %struct.xpv, %struct.xpv* %199, i32 0, i32 1
  %200 = load i64, i64* %xpv_cur264, align 8
  %add265 = add i64 %200, 2
  %call266 = call i8* @Perl_sv_grow(%struct.sv* %196, i64 %add265)
  br label %cond.end.270

cond.false.267:                                   ; preds = %while.end.255
  %201 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any268 = getelementptr inbounds %struct.sv, %struct.sv* %201, i32 0, i32 0
  %202 = load i8*, i8** %sv_any268, align 8
  %203 = bitcast i8* %202 to %struct.xpv*
  %xpv_pv269 = getelementptr inbounds %struct.xpv, %struct.xpv* %203, i32 0, i32 0
  %204 = load i8*, i8** %xpv_pv269, align 8
  br label %cond.end.270

cond.end.270:                                     ; preds = %cond.false.267, %cond.true.262
  %cond271 = phi i8* [ %call266, %cond.true.262 ], [ %204, %cond.false.267 ]
  %205 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any272 = getelementptr inbounds %struct.sv, %struct.sv* %205, i32 0, i32 0
  %206 = load i8*, i8** %sv_any272, align 8
  %207 = bitcast i8* %206 to %struct.xpv*
  %xpv_cur273 = getelementptr inbounds %struct.xpv, %struct.xpv* %207, i32 0, i32 1
  %208 = load i64, i64* %xpv_cur273, align 8
  %inc274 = add i64 %208, 1
  store i64 %inc274, i64* %xpv_cur273, align 8
  %209 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any275 = getelementptr inbounds %struct.sv, %struct.sv* %209, i32 0, i32 0
  %210 = load i8*, i8** %sv_any275, align 8
  %211 = bitcast i8* %210 to %struct.xpv*
  %xpv_pv276 = getelementptr inbounds %struct.xpv, %struct.xpv* %211, i32 0, i32 0
  %212 = load i8*, i8** %xpv_pv276, align 8
  %213 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any277 = getelementptr inbounds %struct.sv, %struct.sv* %213, i32 0, i32 0
  %214 = load i8*, i8** %sv_any277, align 8
  %215 = bitcast i8* %214 to %struct.xpv*
  %xpv_cur278 = getelementptr inbounds %struct.xpv, %struct.xpv* %215, i32 0, i32 1
  %216 = load i64, i64* %xpv_cur278, align 8
  %add.ptr = getelementptr inbounds i8, i8* %212, i64 %216
  store i8* %add.ptr, i8** %d, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %cond.end.270
  %217 = load i8*, i8** %d, align 8
  %218 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any279 = getelementptr inbounds %struct.sv, %struct.sv* %218, i32 0, i32 0
  %219 = load i8*, i8** %sv_any279, align 8
  %220 = bitcast i8* %219 to %struct.xpv*
  %xpv_pv280 = getelementptr inbounds %struct.xpv, %struct.xpv* %220, i32 0, i32 0
  %221 = load i8*, i8** %xpv_pv280, align 8
  %cmp281 = icmp ugt i8* %217, %221
  br i1 %cmp281, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %222 = load i8*, i8** %d, align 8
  %arrayidx = getelementptr inbounds i8, i8* %222, i64 -1
  %223 = load i8, i8* %arrayidx, align 1
  %224 = load i8*, i8** %d, align 8
  store i8 %223, i8* %224, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %225 = load i8*, i8** %d, align 8
  %incdec.ptr283 = getelementptr inbounds i8, i8* %225, i32 -1
  store i8* %incdec.ptr283, i8** %d, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %226 = load i8*, i8** %d, align 8
  %arrayidx284 = getelementptr inbounds i8, i8* %226, i64 1
  %227 = load i8, i8* %arrayidx284, align 1
  %conv285 = sext i8 %227 to i32
  %cmp286 = icmp sge i32 %conv285, 48
  br i1 %cmp286, label %land.lhs.true.288, label %if.else.294

land.lhs.true.288:                                ; preds = %for.end
  %228 = load i8*, i8** %d, align 8
  %arrayidx289 = getelementptr inbounds i8, i8* %228, i64 1
  %229 = load i8, i8* %arrayidx289, align 1
  %conv290 = sext i8 %229 to i32
  %cmp291 = icmp sle i32 %conv290, 57
  br i1 %cmp291, label %if.then.293, label %if.else.294

if.then.293:                                      ; preds = %land.lhs.true.288
  %230 = load i8*, i8** %d, align 8
  store i8 49, i8* %230, align 1
  br label %if.end.296

if.else.294:                                      ; preds = %land.lhs.true.288, %for.end
  %231 = load i8*, i8** %d, align 8
  %arrayidx295 = getelementptr inbounds i8, i8* %231, i64 1
  %232 = load i8, i8* %arrayidx295, align 1
  %233 = load i8*, i8** %d, align 8
  store i8 %232, i8* %233, align 1
  br label %if.end.296

if.end.296:                                       ; preds = %if.then, %if.then.33, %if.end.93, %land.end.106, %land.end.131, %land.end.196, %if.end.204, %if.then.229, %if.then.249, %if.else.294, %if.then.293
  ret void
}

; Function Attrs: nounwind uwtable
define void @Perl_sv_dec(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %flags = alloca i32, align 4
  %i = alloca i64, align 8
  %numtype = alloca i32, align 4
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and = and i32 %2, 8192
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %if.then.2, label %if.end.3

if.then.2:                                        ; preds = %if.end
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i32 @Perl_mg_get(%struct.sv* %3)
  br label %if.end.3

if.end.3:                                         ; preds = %if.then.2, %if.end
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags4 = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 2
  %5 = load i32, i32* %sv_flags4, align 4
  %and5 = and i32 %5, 9961472
  %tobool6 = icmp ne i32 %and5, 0
  br i1 %tobool6, label %if.then.7, label %if.end.36

if.then.7:                                        ; preds = %if.end.3
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags8 = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 2
  %7 = load i32, i32* %sv_flags8, align 4
  %and9 = and i32 %7, 8388608
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %land.lhs.true, label %if.end.15

land.lhs.true:                                    ; preds = %if.then.7
  %8 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags11 = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 2
  %9 = load i32, i32* %sv_flags11, align 4
  %and12 = and i32 %9, 1048576
  %tobool13 = icmp ne i32 %and12, 0
  br i1 %tobool13, label %if.then.14, label %if.end.15

if.then.14:                                       ; preds = %land.lhs.true
  %10 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_force_normal(%struct.sv* %10)
  br label %if.end.15

if.end.15:                                        ; preds = %if.then.14, %land.lhs.true, %if.then.7
  %11 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags16 = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 2
  %12 = load i32, i32* %sv_flags16, align 4
  %and17 = and i32 %12, 8388608
  %tobool18 = icmp ne i32 %and17, 0
  br i1 %tobool18, label %if.then.19, label %if.end.22

if.then.19:                                       ; preds = %if.end.15
  %13 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cmp = icmp ne %struct.cop* %13, @PL_compiling
  br i1 %cmp, label %if.then.20, label %if.end.21

if.then.20:                                       ; preds = %if.then.19
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_modify, i32 0, i32 0))
  br label %if.end.21

if.end.21:                                        ; preds = %if.then.20, %if.then.19
  br label %if.end.22

if.end.22:                                        ; preds = %if.end.21, %if.end.15
  %14 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags23 = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 2
  %15 = load i32, i32* %sv_flags23, align 4
  %and24 = and i32 %15, 524288
  %tobool25 = icmp ne i32 %and24, 0
  br i1 %tobool25, label %if.then.26, label %if.end.35

if.then.26:                                       ; preds = %if.end.22
  %16 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags27 = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 2
  %17 = load i32, i32* %sv_flags27, align 4
  %and28 = and i32 %17, 268435456
  %tobool29 = icmp ne i32 %and28, 0
  br i1 %tobool29, label %land.lhs.true.30, label %if.end.34

land.lhs.true.30:                                 ; preds = %if.then.26
  %18 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call31 = call %struct.sv* @Perl_amagic_call(%struct.sv* %18, %struct.sv* @PL_sv_undef, i32 45, i32 9)
  %tobool32 = icmp ne %struct.sv* %call31, null
  br i1 %tobool32, label %if.then.33, label %if.end.34

if.then.33:                                       ; preds = %land.lhs.true.30
  br label %return

if.end.34:                                        ; preds = %land.lhs.true.30, %if.then.26
  %19 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 0
  %20 = load i8*, i8** %sv_any, align 8
  %21 = bitcast i8* %20 to %struct.xrv*
  %xrv_rv = getelementptr inbounds %struct.xrv, %struct.xrv* %21, i32 0, i32 0
  %22 = load %struct.sv*, %struct.sv** %xrv_rv, align 8
  %23 = ptrtoint %struct.sv* %22 to i64
  store i64 %23, i64* %i, align 8
  %24 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_unref(%struct.sv* %24)
  %25 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %26 = load i64, i64* %i, align 8
  call void @Perl_sv_setiv(%struct.sv* %25, i64 %26)
  br label %if.end.35

if.end.35:                                        ; preds = %if.end.34, %if.end.22
  br label %if.end.36

if.end.36:                                        ; preds = %if.end.35, %if.end.3
  %27 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags37 = getelementptr inbounds %struct.sv, %struct.sv* %27, i32 0, i32 2
  %28 = load i32, i32* %sv_flags37, align 4
  store i32 %28, i32* %flags, align 4
  %29 = load i32, i32* %flags, align 4
  %and38 = and i32 %29, 65536
  %tobool39 = icmp ne i32 %and38, 0
  br i1 %tobool39, label %if.then.42, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.36
  %30 = load i32, i32* %flags, align 4
  %and40 = and i32 %30, 50331648
  %cmp41 = icmp eq i32 %and40, 16777216
  br i1 %cmp41, label %if.then.42, label %if.end.97

if.then.42:                                       ; preds = %lor.lhs.false, %if.end.36
  br label %oops_its_int

oops_its_int:                                     ; preds = %if.then.150, %if.then.42
  %31 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags43 = getelementptr inbounds %struct.sv, %struct.sv* %31, i32 0, i32 2
  %32 = load i32, i32* %sv_flags43, align 4
  %and44 = and i32 %32, -2147483648
  %tobool45 = icmp ne i32 %and44, 0
  br i1 %tobool45, label %if.then.46, label %if.else.74

if.then.46:                                       ; preds = %oops_its_int
  %33 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any47 = getelementptr inbounds %struct.sv, %struct.sv* %33, i32 0, i32 0
  %34 = load i8*, i8** %sv_any47, align 8
  %35 = bitcast i8* %34 to %struct.xpvuv*
  %xuv_uv = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %35, i32 0, i32 3
  %36 = load i64, i64* %xuv_uv, align 8
  %cmp48 = icmp eq i64 %36, 0
  br i1 %cmp48, label %if.then.49, label %if.else

if.then.49:                                       ; preds = %if.then.46
  %37 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags50 = getelementptr inbounds %struct.sv, %struct.sv* %37, i32 0, i32 2
  %38 = load i32, i32* %sv_flags50, align 4
  %and51 = and i32 %38, 1223753727
  store i32 %and51, i32* %sv_flags50, align 4
  %39 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags52 = getelementptr inbounds %struct.sv, %struct.sv* %39, i32 0, i32 2
  %40 = load i32, i32* %sv_flags52, align 4
  %and53 = and i32 %40, 2097152
  %tobool54 = icmp ne i32 %and53, 0
  br i1 %tobool54, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then.49
  %41 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call55 = call i32 @Perl_sv_backoff(%struct.sv* %41)
  %tobool56 = icmp ne i32 %call55, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then.49
  %42 = phi i1 [ false, %if.then.49 ], [ %tobool56, %land.rhs ]
  %land.ext = zext i1 %42 to i32
  %43 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags57 = getelementptr inbounds %struct.sv, %struct.sv* %43, i32 0, i32 2
  %44 = load i32, i32* %sv_flags57, align 4
  %or = or i32 %44, 16842752
  store i32 %or, i32* %sv_flags57, align 4
  %45 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any58 = getelementptr inbounds %struct.sv, %struct.sv* %45, i32 0, i32 0
  %46 = load i8*, i8** %sv_any58, align 8
  %47 = bitcast i8* %46 to %struct.xpviv*
  %xiv_iv = getelementptr inbounds %struct.xpviv, %struct.xpviv* %47, i32 0, i32 3
  store i64 -1, i64* %xiv_iv, align 8
  br label %if.end.73

if.else:                                          ; preds = %if.then.46
  %48 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags59 = getelementptr inbounds %struct.sv, %struct.sv* %48, i32 0, i32 2
  %49 = load i32, i32* %sv_flags59, align 4
  %and60 = and i32 %49, -923729921
  store i32 %and60, i32* %sv_flags59, align 4
  %50 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags61 = getelementptr inbounds %struct.sv, %struct.sv* %50, i32 0, i32 2
  %51 = load i32, i32* %sv_flags61, align 4
  %and62 = and i32 %51, 2097152
  %tobool63 = icmp ne i32 %and62, 0
  br i1 %tobool63, label %land.rhs.64, label %land.end.67

land.rhs.64:                                      ; preds = %if.else
  %52 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call65 = call i32 @Perl_sv_backoff(%struct.sv* %52)
  %tobool66 = icmp ne i32 %call65, 0
  br label %land.end.67

land.end.67:                                      ; preds = %land.rhs.64, %if.else
  %53 = phi i1 [ false, %if.else ], [ %tobool66, %land.rhs.64 ]
  %land.ext68 = zext i1 %53 to i32
  %54 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags69 = getelementptr inbounds %struct.sv, %struct.sv* %54, i32 0, i32 2
  %55 = load i32, i32* %sv_flags69, align 4
  %or70 = or i32 %55, 16842752
  store i32 %or70, i32* %sv_flags69, align 4
  %56 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any71 = getelementptr inbounds %struct.sv, %struct.sv* %56, i32 0, i32 0
  %57 = load i8*, i8** %sv_any71, align 8
  %58 = bitcast i8* %57 to %struct.xpvuv*
  %xuv_uv72 = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %58, i32 0, i32 3
  %59 = load i64, i64* %xuv_uv72, align 8
  %dec = add i64 %59, -1
  store i64 %dec, i64* %xuv_uv72, align 8
  br label %if.end.73

if.end.73:                                        ; preds = %land.end.67, %land.end
  br label %if.end.96

if.else.74:                                       ; preds = %oops_its_int
  %60 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any75 = getelementptr inbounds %struct.sv, %struct.sv* %60, i32 0, i32 0
  %61 = load i8*, i8** %sv_any75, align 8
  %62 = bitcast i8* %61 to %struct.xpviv*
  %xiv_iv76 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %62, i32 0, i32 3
  %63 = load i64, i64* %xiv_iv76, align 8
  %cmp77 = icmp eq i64 %63, -9223372036854775808
  br i1 %cmp77, label %if.then.78, label %if.else.79

if.then.78:                                       ; preds = %if.else.74
  %64 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_setnv(%struct.sv* %64, double 0xC3E0000000000000)
  br label %if.end.95

if.else.79:                                       ; preds = %if.else.74
  %65 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags80 = getelementptr inbounds %struct.sv, %struct.sv* %65, i32 0, i32 2
  %66 = load i32, i32* %sv_flags80, align 4
  %and81 = and i32 %66, 1223753727
  store i32 %and81, i32* %sv_flags80, align 4
  %67 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags82 = getelementptr inbounds %struct.sv, %struct.sv* %67, i32 0, i32 2
  %68 = load i32, i32* %sv_flags82, align 4
  %and83 = and i32 %68, 2097152
  %tobool84 = icmp ne i32 %and83, 0
  br i1 %tobool84, label %land.rhs.85, label %land.end.88

land.rhs.85:                                      ; preds = %if.else.79
  %69 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call86 = call i32 @Perl_sv_backoff(%struct.sv* %69)
  %tobool87 = icmp ne i32 %call86, 0
  br label %land.end.88

land.end.88:                                      ; preds = %land.rhs.85, %if.else.79
  %70 = phi i1 [ false, %if.else.79 ], [ %tobool87, %land.rhs.85 ]
  %land.ext89 = zext i1 %70 to i32
  %71 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags90 = getelementptr inbounds %struct.sv, %struct.sv* %71, i32 0, i32 2
  %72 = load i32, i32* %sv_flags90, align 4
  %or91 = or i32 %72, 16842752
  store i32 %or91, i32* %sv_flags90, align 4
  %73 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any92 = getelementptr inbounds %struct.sv, %struct.sv* %73, i32 0, i32 0
  %74 = load i8*, i8** %sv_any92, align 8
  %75 = bitcast i8* %74 to %struct.xpviv*
  %xiv_iv93 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %75, i32 0, i32 3
  %76 = load i64, i64* %xiv_iv93, align 8
  %dec94 = add nsw i64 %76, -1
  store i64 %dec94, i64* %xiv_iv93, align 8
  br label %if.end.95

if.end.95:                                        ; preds = %land.end.88, %if.then.78
  br label %if.end.96

if.end.96:                                        ; preds = %if.end.95, %if.end.73
  br label %return

if.end.97:                                        ; preds = %lor.lhs.false
  %77 = load i32, i32* %flags, align 4
  %and98 = and i32 %77, 33554432
  %tobool99 = icmp ne i32 %and98, 0
  br i1 %tobool99, label %if.then.100, label %if.end.114

if.then.100:                                      ; preds = %if.end.97
  %78 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any101 = getelementptr inbounds %struct.sv, %struct.sv* %78, i32 0, i32 0
  %79 = load i8*, i8** %sv_any101, align 8
  %80 = bitcast i8* %79 to %struct.xpvnv*
  %xnv_nv = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %80, i32 0, i32 4
  %81 = load double, double* %xnv_nv, align 8
  %sub = fsub double %81, 1.000000e+00
  store double %sub, double* %xnv_nv, align 8
  %82 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags102 = getelementptr inbounds %struct.sv, %struct.sv* %82, i32 0, i32 2
  %83 = load i32, i32* %sv_flags102, align 4
  %and103 = and i32 %83, 1223753727
  store i32 %and103, i32* %sv_flags102, align 4
  %84 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags104 = getelementptr inbounds %struct.sv, %struct.sv* %84, i32 0, i32 2
  %85 = load i32, i32* %sv_flags104, align 4
  %and105 = and i32 %85, 2097152
  %tobool106 = icmp ne i32 %and105, 0
  br i1 %tobool106, label %land.rhs.107, label %land.end.110

land.rhs.107:                                     ; preds = %if.then.100
  %86 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call108 = call i32 @Perl_sv_backoff(%struct.sv* %86)
  %tobool109 = icmp ne i32 %call108, 0
  br label %land.end.110

land.end.110:                                     ; preds = %land.rhs.107, %if.then.100
  %87 = phi i1 [ false, %if.then.100 ], [ %tobool109, %land.rhs.107 ]
  %land.ext111 = zext i1 %87 to i32
  %88 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags112 = getelementptr inbounds %struct.sv, %struct.sv* %88, i32 0, i32 2
  %89 = load i32, i32* %sv_flags112, align 4
  %or113 = or i32 %89, 33685504
  store i32 %or113, i32* %sv_flags112, align 4
  br label %return

if.end.114:                                       ; preds = %if.end.97
  %90 = load i32, i32* %flags, align 4
  %and115 = and i32 %90, 67108864
  %tobool116 = icmp ne i32 %and115, 0
  br i1 %tobool116, label %if.end.137, label %if.then.117

if.then.117:                                      ; preds = %if.end.114
  %91 = load i32, i32* %flags, align 4
  %and118 = and i32 %91, 255
  %cmp119 = icmp slt i32 %and118, 6
  br i1 %cmp119, label %if.then.120, label %if.end.122

if.then.120:                                      ; preds = %if.then.117
  %92 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call121 = call signext i8 @Perl_sv_upgrade(%struct.sv* %92, i32 2)
  br label %if.end.122

if.end.122:                                       ; preds = %if.then.120, %if.then.117
  %93 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any123 = getelementptr inbounds %struct.sv, %struct.sv* %93, i32 0, i32 0
  %94 = load i8*, i8** %sv_any123, align 8
  %95 = bitcast i8* %94 to %struct.xpvnv*
  %xnv_nv124 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %95, i32 0, i32 4
  store double -1.000000e+00, double* %xnv_nv124, align 8
  %96 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags125 = getelementptr inbounds %struct.sv, %struct.sv* %96, i32 0, i32 2
  %97 = load i32, i32* %sv_flags125, align 4
  %and126 = and i32 %97, 1223753727
  store i32 %and126, i32* %sv_flags125, align 4
  %98 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags127 = getelementptr inbounds %struct.sv, %struct.sv* %98, i32 0, i32 2
  %99 = load i32, i32* %sv_flags127, align 4
  %and128 = and i32 %99, 2097152
  %tobool129 = icmp ne i32 %and128, 0
  br i1 %tobool129, label %land.rhs.130, label %land.end.133

land.rhs.130:                                     ; preds = %if.end.122
  %100 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call131 = call i32 @Perl_sv_backoff(%struct.sv* %100)
  %tobool132 = icmp ne i32 %call131, 0
  br label %land.end.133

land.end.133:                                     ; preds = %land.rhs.130, %if.end.122
  %101 = phi i1 [ false, %if.end.122 ], [ %tobool132, %land.rhs.130 ]
  %land.ext134 = zext i1 %101 to i32
  %102 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags135 = getelementptr inbounds %struct.sv, %struct.sv* %102, i32 0, i32 2
  %103 = load i32, i32* %sv_flags135, align 4
  %or136 = or i32 %103, 33685504
  store i32 %or136, i32* %sv_flags135, align 4
  br label %return

if.end.137:                                       ; preds = %if.end.114
  %104 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any138 = getelementptr inbounds %struct.sv, %struct.sv* %104, i32 0, i32 0
  %105 = load i8*, i8** %sv_any138, align 8
  %106 = bitcast i8* %105 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %106, i32 0, i32 0
  %107 = load i8*, i8** %xpv_pv, align 8
  %108 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any139 = getelementptr inbounds %struct.sv, %struct.sv* %108, i32 0, i32 0
  %109 = load i8*, i8** %sv_any139, align 8
  %110 = bitcast i8* %109 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %110, i32 0, i32 1
  %111 = load i64, i64* %xpv_cur, align 8
  %call140 = call i32 @Perl_grok_number(i8* %107, i64 %111, i64* null)
  store i32 %call140, i32* %numtype, align 4
  %112 = load i32, i32* %numtype, align 4
  %tobool141 = icmp ne i32 %112, 0
  br i1 %tobool141, label %land.lhs.true.142, label %if.end.171

land.lhs.true.142:                                ; preds = %if.end.137
  %113 = load i32, i32* %numtype, align 4
  %and143 = and i32 %113, 16
  %tobool144 = icmp ne i32 %and143, 0
  br i1 %tobool144, label %if.end.171, label %if.then.145

if.then.145:                                      ; preds = %land.lhs.true.142
  %114 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call146 = call i64 @Perl_sv_2iv(%struct.sv* %114)
  %115 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags147 = getelementptr inbounds %struct.sv, %struct.sv* %115, i32 0, i32 2
  %116 = load i32, i32* %sv_flags147, align 4
  %and148 = and i32 %116, 65536
  %tobool149 = icmp ne i32 %and148, 0
  br i1 %tobool149, label %if.then.150, label %if.end.151

if.then.150:                                      ; preds = %if.then.145
  br label %oops_its_int

if.end.151:                                       ; preds = %if.then.145
  %117 = load i32, i32* %flags, align 4
  %and152 = and i32 %117, 33554432
  %tobool153 = icmp ne i32 %and152, 0
  br i1 %tobool153, label %if.then.154, label %if.end.170

if.then.154:                                      ; preds = %if.end.151
  %118 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags155 = getelementptr inbounds %struct.sv, %struct.sv* %118, i32 0, i32 2
  %119 = load i32, i32* %sv_flags155, align 4
  %and156 = and i32 %119, 1223753727
  store i32 %and156, i32* %sv_flags155, align 4
  %120 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags157 = getelementptr inbounds %struct.sv, %struct.sv* %120, i32 0, i32 2
  %121 = load i32, i32* %sv_flags157, align 4
  %and158 = and i32 %121, 2097152
  %tobool159 = icmp ne i32 %and158, 0
  br i1 %tobool159, label %land.rhs.160, label %land.end.163

land.rhs.160:                                     ; preds = %if.then.154
  %122 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call161 = call i32 @Perl_sv_backoff(%struct.sv* %122)
  %tobool162 = icmp ne i32 %call161, 0
  br label %land.end.163

land.end.163:                                     ; preds = %land.rhs.160, %if.then.154
  %123 = phi i1 [ false, %if.then.154 ], [ %tobool162, %land.rhs.160 ]
  %land.ext164 = zext i1 %123 to i32
  %124 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags165 = getelementptr inbounds %struct.sv, %struct.sv* %124, i32 0, i32 2
  %125 = load i32, i32* %sv_flags165, align 4
  %or166 = or i32 %125, 33685504
  store i32 %or166, i32* %sv_flags165, align 4
  %126 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any167 = getelementptr inbounds %struct.sv, %struct.sv* %126, i32 0, i32 0
  %127 = load i8*, i8** %sv_any167, align 8
  %128 = bitcast i8* %127 to %struct.xpvnv*
  %xnv_nv168 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %128, i32 0, i32 4
  %129 = load double, double* %xnv_nv168, align 8
  %sub169 = fsub double %129, 1.000000e+00
  store double %sub169, double* %xnv_nv168, align 8
  br label %return

if.end.170:                                       ; preds = %if.end.151
  br label %if.end.171

if.end.171:                                       ; preds = %if.end.170, %land.lhs.true.142, %if.end.137
  %130 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %131 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any172 = getelementptr inbounds %struct.sv, %struct.sv* %131, i32 0, i32 0
  %132 = load i8*, i8** %sv_any172, align 8
  %133 = bitcast i8* %132 to %struct.xpv*
  %xpv_pv173 = getelementptr inbounds %struct.xpv, %struct.xpv* %133, i32 0, i32 0
  %134 = load i8*, i8** %xpv_pv173, align 8
  %call174 = call double @Perl_my_atof(i8* %134)
  %sub175 = fsub double %call174, 1.000000e+00
  call void @Perl_sv_setnv(%struct.sv* %130, double %sub175)
  br label %return

return:                                           ; preds = %if.end.171, %land.end.163, %land.end.133, %land.end.110, %if.end.96, %if.then.33, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define %struct.sv* @Perl_sv_mortalcopy(%struct.sv* %oldstr) #0 {
entry:
  %oldstr.addr = alloca %struct.sv*, align 8
  %sv = alloca %struct.sv*, align 8
  %tmp = alloca i32, align 4
  %tmp2 = alloca i32, align 4
  store %struct.sv* %oldstr, %struct.sv** %oldstr.addr, align 8
  %0 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  store %struct.sv* %1, %struct.sv** %sv, align 8
  %2 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 0
  %3 = load i8*, i8** %sv_any, align 8
  %4 = bitcast i8* %3 to %struct.sv*
  store %struct.sv* %4, %struct.sv** @PL_sv_root, align 8
  %5 = load i32, i32* @PL_sv_count, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* @PL_sv_count, align 4
  store i32 %inc, i32* %tmp
  %6 = load i32, i32* %tmp
  br label %if.end

if.else:                                          ; preds = %entry
  %call = call %struct.sv* @S_more_sv()
  store %struct.sv* %call, %struct.sv** %sv, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %7 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any1 = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 0
  store i8* null, i8** %sv_any1, align 8
  %8 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 1
  store i32 1, i32* %sv_refcnt, align 4
  %9 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 2
  store i32 0, i32* %sv_flags, align 4
  store i32 0, i32* %tmp2
  %10 = load i32, i32* %tmp2
  %11 = load %struct.sv*, %struct.sv** %sv, align 8
  %12 = load %struct.sv*, %struct.sv** %oldstr.addr, align 8
  call void @Perl_sv_setsv_flags(%struct.sv* %11, %struct.sv* %12, i32 2)
  %13 = load i32, i32* @PL_tmps_ix, align 4
  %add = add nsw i32 %13, 1
  %14 = load i32, i32* @PL_tmps_max, align 4
  %cmp = icmp sge i32 %add, %14
  br i1 %cmp, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  call void @Perl_tmps_grow(i32 1)
  br label %if.end.4

if.end.4:                                         ; preds = %if.then.3, %if.end
  %15 = load %struct.sv*, %struct.sv** %sv, align 8
  %16 = load i32, i32* @PL_tmps_ix, align 4
  %inc5 = add nsw i32 %16, 1
  store i32 %inc5, i32* @PL_tmps_ix, align 4
  %idxprom = sext i32 %inc5 to i64
  %17 = load %struct.sv**, %struct.sv*** @PL_tmps_stack, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %17, i64 %idxprom
  store %struct.sv* %15, %struct.sv** %arrayidx, align 8
  %18 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags6 = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 2
  %19 = load i32, i32* %sv_flags6, align 4
  %or = or i32 %19, 2048
  store i32 %or, i32* %sv_flags6, align 4
  %20 = load %struct.sv*, %struct.sv** %sv, align 8
  ret %struct.sv* %20
}

declare void @Perl_tmps_grow(i32) #1

; Function Attrs: nounwind uwtable
define %struct.sv* @Perl_sv_newmortal() #0 {
entry:
  %sv = alloca %struct.sv*, align 8
  %tmp = alloca i32, align 4
  %tmp2 = alloca i32, align 4
  %0 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  store %struct.sv* %1, %struct.sv** %sv, align 8
  %2 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 0
  %3 = load i8*, i8** %sv_any, align 8
  %4 = bitcast i8* %3 to %struct.sv*
  store %struct.sv* %4, %struct.sv** @PL_sv_root, align 8
  %5 = load i32, i32* @PL_sv_count, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* @PL_sv_count, align 4
  store i32 %inc, i32* %tmp
  %6 = load i32, i32* %tmp
  br label %if.end

if.else:                                          ; preds = %entry
  %call = call %struct.sv* @S_more_sv()
  store %struct.sv* %call, %struct.sv** %sv, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %7 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any1 = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 0
  store i8* null, i8** %sv_any1, align 8
  %8 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 1
  store i32 1, i32* %sv_refcnt, align 4
  %9 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 2
  store i32 0, i32* %sv_flags, align 4
  store i32 0, i32* %tmp2
  %10 = load i32, i32* %tmp2
  %11 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags3 = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 2
  store i32 2048, i32* %sv_flags3, align 4
  %12 = load i32, i32* @PL_tmps_ix, align 4
  %add = add nsw i32 %12, 1
  %13 = load i32, i32* @PL_tmps_max, align 4
  %cmp = icmp sge i32 %add, %13
  br i1 %cmp, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.end
  call void @Perl_tmps_grow(i32 1)
  br label %if.end.5

if.end.5:                                         ; preds = %if.then.4, %if.end
  %14 = load %struct.sv*, %struct.sv** %sv, align 8
  %15 = load i32, i32* @PL_tmps_ix, align 4
  %inc6 = add nsw i32 %15, 1
  store i32 %inc6, i32* @PL_tmps_ix, align 4
  %idxprom = sext i32 %inc6 to i64
  %16 = load %struct.sv**, %struct.sv*** @PL_tmps_stack, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %16, i64 %idxprom
  store %struct.sv* %14, %struct.sv** %arrayidx, align 8
  %17 = load %struct.sv*, %struct.sv** %sv, align 8
  ret %struct.sv* %17
}

; Function Attrs: nounwind uwtable
define %struct.sv* @Perl_newSVpvn_share(i8* %src, i32 %len, i32 %hash) #0 {
entry:
  %src.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %hash.addr = alloca i32, align 4
  %sv = alloca %struct.sv*, align 8
  %is_utf8 = alloca i8, align 1
  %tmplen = alloca i64, align 8
  %s_PeRlHaSh_tmp = alloca i8*, align 8
  %s_PeRlHaSh = alloca i8*, align 8
  %i_PeRlHaSh = alloca i32, align 4
  %hash_PeRlHaSh = alloca i32, align 4
  %tmp = alloca i32, align 4
  %tmp15 = alloca i32, align 4
  %tmp19 = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  store i32 %hash, i32* %hash.addr, align 4
  store i8 0, i8* %is_utf8, align 1
  %0 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %len.addr, align 4
  %sub = sub nsw i32 0, %1
  %conv = sext i32 %sub to i64
  store i64 %conv, i64* %tmplen, align 8
  store i8 1, i8* %is_utf8, align 1
  %2 = load i8*, i8** %src.addr, align 8
  %call = call i8* @Perl_bytes_from_utf8(i8* %2, i64* %tmplen, i8* %is_utf8)
  store i8* %call, i8** %src.addr, align 8
  %3 = load i64, i64* %tmplen, align 8
  %conv1 = trunc i64 %3 to i32
  store i32 %conv1, i32* %len.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* %hash.addr, align 4
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %if.end.12, label %if.then.2

if.then.2:                                        ; preds = %if.end
  %5 = load i8*, i8** %src.addr, align 8
  store i8* %5, i8** %s_PeRlHaSh_tmp, align 8
  %6 = load i8*, i8** %s_PeRlHaSh_tmp, align 8
  store i8* %6, i8** %s_PeRlHaSh, align 8
  %7 = load i32, i32* %len.addr, align 4
  store i32 %7, i32* %i_PeRlHaSh, align 4
  store i32 0, i32* %hash_PeRlHaSh, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then.2
  %8 = load i32, i32* %i_PeRlHaSh, align 4
  %dec = add nsw i32 %8, -1
  store i32 %dec, i32* %i_PeRlHaSh, align 4
  %tobool3 = icmp ne i32 %8, 0
  br i1 %tobool3, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %9 = load i8*, i8** %s_PeRlHaSh, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr, i8** %s_PeRlHaSh, align 8
  %10 = load i8, i8* %9, align 1
  %conv4 = zext i8 %10 to i32
  %11 = load i32, i32* %hash_PeRlHaSh, align 4
  %add = add i32 %11, %conv4
  store i32 %add, i32* %hash_PeRlHaSh, align 4
  %12 = load i32, i32* %hash_PeRlHaSh, align 4
  %shl = shl i32 %12, 10
  %13 = load i32, i32* %hash_PeRlHaSh, align 4
  %add5 = add i32 %13, %shl
  store i32 %add5, i32* %hash_PeRlHaSh, align 4
  %14 = load i32, i32* %hash_PeRlHaSh, align 4
  %shr = lshr i32 %14, 6
  %15 = load i32, i32* %hash_PeRlHaSh, align 4
  %xor = xor i32 %15, %shr
  store i32 %xor, i32* %hash_PeRlHaSh, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %16 = load i32, i32* %hash_PeRlHaSh, align 4
  %shl6 = shl i32 %16, 3
  %17 = load i32, i32* %hash_PeRlHaSh, align 4
  %add7 = add i32 %17, %shl6
  store i32 %add7, i32* %hash_PeRlHaSh, align 4
  %18 = load i32, i32* %hash_PeRlHaSh, align 4
  %shr8 = lshr i32 %18, 11
  %19 = load i32, i32* %hash_PeRlHaSh, align 4
  %xor9 = xor i32 %19, %shr8
  store i32 %xor9, i32* %hash_PeRlHaSh, align 4
  %20 = load i32, i32* %hash_PeRlHaSh, align 4
  %21 = load i32, i32* %hash_PeRlHaSh, align 4
  %shl10 = shl i32 %21, 15
  %add11 = add i32 %20, %shl10
  store i32 %add11, i32* %hash.addr, align 4
  store i32 %add11, i32* %tmp
  %22 = load i32, i32* %tmp
  br label %if.end.12

if.end.12:                                        ; preds = %while.end, %if.end
  %23 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  %tobool13 = icmp ne %struct.sv* %23, null
  br i1 %tobool13, label %if.then.14, label %if.else

if.then.14:                                       ; preds = %if.end.12
  %24 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  store %struct.sv* %24, %struct.sv** %sv, align 8
  %25 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %25, i32 0, i32 0
  %26 = load i8*, i8** %sv_any, align 8
  %27 = bitcast i8* %26 to %struct.sv*
  store %struct.sv* %27, %struct.sv** @PL_sv_root, align 8
  %28 = load i32, i32* @PL_sv_count, align 4
  %inc = add nsw i32 %28, 1
  store i32 %inc, i32* @PL_sv_count, align 4
  store i32 %inc, i32* %tmp15
  %29 = load i32, i32* %tmp15
  br label %if.end.17

if.else:                                          ; preds = %if.end.12
  %call16 = call %struct.sv* @S_more_sv()
  store %struct.sv* %call16, %struct.sv** %sv, align 8
  br label %if.end.17

if.end.17:                                        ; preds = %if.else, %if.then.14
  %30 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any18 = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 0
  store i8* null, i8** %sv_any18, align 8
  %31 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %31, i32 0, i32 1
  store i32 1, i32* %sv_refcnt, align 4
  %32 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 2
  store i32 0, i32* %sv_flags, align 4
  store i32 0, i32* %tmp19
  %33 = load i32, i32* %tmp19
  %34 = load %struct.sv*, %struct.sv** %sv, align 8
  %call20 = call signext i8 @Perl_sv_upgrade(%struct.sv* %34, i32 5)
  %35 = load i8*, i8** %src.addr, align 8
  %36 = load i8, i8* %is_utf8, align 1
  %conv21 = sext i8 %36 to i32
  %tobool22 = icmp ne i32 %conv21, 0
  br i1 %tobool22, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.17
  %37 = load i32, i32* %len.addr, align 4
  %sub23 = sub nsw i32 0, %37
  br label %cond.end

cond.false:                                       ; preds = %if.end.17
  %38 = load i32, i32* %len.addr, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub23, %cond.true ], [ %38, %cond.false ]
  %39 = load i32, i32* %hash.addr, align 4
  %call24 = call %struct.hek* @Perl_share_hek(i8* %35, i32 %cond, i32 %39)
  %hek_key = getelementptr inbounds %struct.hek, %struct.hek* %call24, i32 0, i32 2
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key, i32 0, i32 0
  %40 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any25 = getelementptr inbounds %struct.sv, %struct.sv* %40, i32 0, i32 0
  %41 = load i8*, i8** %sv_any25, align 8
  %42 = bitcast i8* %41 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %42, i32 0, i32 0
  store i8* %arraydecay, i8** %xpv_pv, align 8
  %43 = load i32, i32* %len.addr, align 4
  %conv26 = sext i32 %43 to i64
  %44 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any27 = getelementptr inbounds %struct.sv, %struct.sv* %44, i32 0, i32 0
  %45 = load i8*, i8** %sv_any27, align 8
  %46 = bitcast i8* %45 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %46, i32 0, i32 1
  store i64 %conv26, i64* %xpv_cur, align 8
  %47 = load i32, i32* %hash.addr, align 4
  %conv28 = zext i32 %47 to i64
  %48 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any29 = getelementptr inbounds %struct.sv, %struct.sv* %48, i32 0, i32 0
  %49 = load i8*, i8** %sv_any29, align 8
  %50 = bitcast i8* %49 to %struct.xpvuv*
  %xuv_uv = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %50, i32 0, i32 3
  store i64 %conv28, i64* %xuv_uv, align 8
  %51 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any30 = getelementptr inbounds %struct.sv, %struct.sv* %51, i32 0, i32 0
  %52 = load i8*, i8** %sv_any30, align 8
  %53 = bitcast i8* %52 to %struct.xpv*
  %xpv_len = getelementptr inbounds %struct.xpv, %struct.xpv* %53, i32 0, i32 2
  store i64 0, i64* %xpv_len, align 8
  %54 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags31 = getelementptr inbounds %struct.sv, %struct.sv* %54, i32 0, i32 2
  %55 = load i32, i32* %sv_flags31, align 4
  %or = or i32 %55, 8388608
  store i32 %or, i32* %sv_flags31, align 4
  %56 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags32 = getelementptr inbounds %struct.sv, %struct.sv* %56, i32 0, i32 2
  %57 = load i32, i32* %sv_flags32, align 4
  %or33 = or i32 %57, 1048576
  store i32 %or33, i32* %sv_flags32, align 4
  %58 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags34 = getelementptr inbounds %struct.sv, %struct.sv* %58, i32 0, i32 2
  %59 = load i32, i32* %sv_flags34, align 4
  %or35 = or i32 %59, 67371008
  store i32 %or35, i32* %sv_flags34, align 4
  %60 = load i8, i8* %is_utf8, align 1
  %tobool36 = icmp ne i8 %60, 0
  br i1 %tobool36, label %if.then.37, label %if.end.40

if.then.37:                                       ; preds = %cond.end
  %61 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags38 = getelementptr inbounds %struct.sv, %struct.sv* %61, i32 0, i32 2
  %62 = load i32, i32* %sv_flags38, align 4
  %or39 = or i32 %62, 536870912
  store i32 %or39, i32* %sv_flags38, align 4
  br label %if.end.40

if.end.40:                                        ; preds = %if.then.37, %cond.end
  %63 = load %struct.sv*, %struct.sv** %sv, align 8
  ret %struct.sv* %63
}

declare %struct.hek* @Perl_share_hek(i8*, i32, i32) #1

; Function Attrs: nounwind uwtable
define %struct.sv* @Perl_newSVpvf(i8* %pat, ...) #0 {
entry:
  %pat.addr = alloca i8*, align 8
  %sv = alloca %struct.sv*, align 8
  %args = alloca [1 x %struct.__va_list_tag], align 16
  store i8* %pat, i8** %pat.addr, align 8
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %args, i32 0, i32 0
  %arraydecay1 = bitcast %struct.__va_list_tag* %arraydecay to i8*
  call void @llvm.va_start(i8* %arraydecay1)
  %0 = load i8*, i8** %pat.addr, align 8
  %call = call %struct.sv* @Perl_vnewSVpvf(i8* %0, [1 x %struct.__va_list_tag]* %args)
  store %struct.sv* %call, %struct.sv** %sv, align 8
  %arraydecay2 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %args, i32 0, i32 0
  %arraydecay23 = bitcast %struct.__va_list_tag* %arraydecay2 to i8*
  call void @llvm.va_end(i8* %arraydecay23)
  %1 = load %struct.sv*, %struct.sv** %sv, align 8
  ret %struct.sv* %1
}

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #2

; Function Attrs: nounwind uwtable
define %struct.sv* @Perl_vnewSVpvf(i8* %pat, [1 x %struct.__va_list_tag]* %args) #0 {
entry:
  %pat.addr = alloca i8*, align 8
  %args.addr = alloca [1 x %struct.__va_list_tag]*, align 8
  %sv = alloca %struct.sv*, align 8
  %tmp = alloca i32, align 4
  %tmp2 = alloca i32, align 4
  store i8* %pat, i8** %pat.addr, align 8
  store [1 x %struct.__va_list_tag]* %args, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %0 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  store %struct.sv* %1, %struct.sv** %sv, align 8
  %2 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 0
  %3 = load i8*, i8** %sv_any, align 8
  %4 = bitcast i8* %3 to %struct.sv*
  store %struct.sv* %4, %struct.sv** @PL_sv_root, align 8
  %5 = load i32, i32* @PL_sv_count, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* @PL_sv_count, align 4
  store i32 %inc, i32* %tmp
  %6 = load i32, i32* %tmp
  br label %if.end

if.else:                                          ; preds = %entry
  %call = call %struct.sv* @S_more_sv()
  store %struct.sv* %call, %struct.sv** %sv, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %7 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any1 = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 0
  store i8* null, i8** %sv_any1, align 8
  %8 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 1
  store i32 1, i32* %sv_refcnt, align 4
  %9 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 2
  store i32 0, i32* %sv_flags, align 4
  store i32 0, i32* %tmp2
  %10 = load i32, i32* %tmp2
  %11 = load %struct.sv*, %struct.sv** %sv, align 8
  %12 = load i8*, i8** %pat.addr, align 8
  %13 = load i8*, i8** %pat.addr, align 8
  %call3 = call i64 @strlen(i8* %13)
  %14 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  call void @Perl_sv_vsetpvfn(%struct.sv* %11, i8* %12, i64 %call3, [1 x %struct.__va_list_tag]* %14, %struct.sv** null, i32 0, i8* null)
  %15 = load %struct.sv*, %struct.sv** %sv, align 8
  ret %struct.sv* %15
}

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #2

; Function Attrs: nounwind uwtable
define void @Perl_sv_vsetpvfn(%struct.sv* %sv, i8* %pat, i64 %patlen, [1 x %struct.__va_list_tag]* %args, %struct.sv** %svargs, i32 %svmax, i8* %maybe_tainted) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %pat.addr = alloca i8*, align 8
  %patlen.addr = alloca i64, align 8
  %args.addr = alloca [1 x %struct.__va_list_tag]*, align 8
  %svargs.addr = alloca %struct.sv**, align 8
  %svmax.addr = alloca i32, align 4
  %maybe_tainted.addr = alloca i8*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i8* %pat, i8** %pat.addr, align 8
  store i64 %patlen, i64* %patlen.addr, align 8
  store [1 x %struct.__va_list_tag]* %args, [1 x %struct.__va_list_tag]** %args.addr, align 8
  store %struct.sv** %svargs, %struct.sv*** %svargs.addr, align 8
  store i32 %svmax, i32* %svmax.addr, align 4
  store i8* %maybe_tainted, i8** %maybe_tainted.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_setpvn(%struct.sv* %0, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0), i64 0)
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %2 = load i8*, i8** %pat.addr, align 8
  %3 = load i64, i64* %patlen.addr, align 8
  %4 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %5 = load %struct.sv**, %struct.sv*** %svargs.addr, align 8
  %6 = load i32, i32* %svmax.addr, align 4
  %7 = load i8*, i8** %maybe_tainted.addr, align 8
  call void @Perl_sv_vcatpvfn(%struct.sv* %1, i8* %2, i64 %3, [1 x %struct.__va_list_tag]* %4, %struct.sv** %5, i32 %6, i8* %7)
  ret void
}

; Function Attrs: nounwind uwtable
define %struct.sv* @Perl_newSVnv(double %n) #0 {
entry:
  %n.addr = alloca double, align 8
  %sv = alloca %struct.sv*, align 8
  %tmp = alloca i32, align 4
  %tmp2 = alloca i32, align 4
  store double %n, double* %n.addr, align 8
  %0 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  store %struct.sv* %1, %struct.sv** %sv, align 8
  %2 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 0
  %3 = load i8*, i8** %sv_any, align 8
  %4 = bitcast i8* %3 to %struct.sv*
  store %struct.sv* %4, %struct.sv** @PL_sv_root, align 8
  %5 = load i32, i32* @PL_sv_count, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* @PL_sv_count, align 4
  store i32 %inc, i32* %tmp
  %6 = load i32, i32* %tmp
  br label %if.end

if.else:                                          ; preds = %entry
  %call = call %struct.sv* @S_more_sv()
  store %struct.sv* %call, %struct.sv** %sv, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %7 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any1 = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 0
  store i8* null, i8** %sv_any1, align 8
  %8 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 1
  store i32 1, i32* %sv_refcnt, align 4
  %9 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 2
  store i32 0, i32* %sv_flags, align 4
  store i32 0, i32* %tmp2
  %10 = load i32, i32* %tmp2
  %11 = load %struct.sv*, %struct.sv** %sv, align 8
  %12 = load double, double* %n.addr, align 8
  call void @Perl_sv_setnv(%struct.sv* %11, double %12)
  %13 = load %struct.sv*, %struct.sv** %sv, align 8
  ret %struct.sv* %13
}

; Function Attrs: nounwind uwtable
define %struct.sv* @Perl_newSViv(i64 %i) #0 {
entry:
  %i.addr = alloca i64, align 8
  %sv = alloca %struct.sv*, align 8
  %tmp = alloca i32, align 4
  %tmp2 = alloca i32, align 4
  store i64 %i, i64* %i.addr, align 8
  %0 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  store %struct.sv* %1, %struct.sv** %sv, align 8
  %2 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 0
  %3 = load i8*, i8** %sv_any, align 8
  %4 = bitcast i8* %3 to %struct.sv*
  store %struct.sv* %4, %struct.sv** @PL_sv_root, align 8
  %5 = load i32, i32* @PL_sv_count, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* @PL_sv_count, align 4
  store i32 %inc, i32* %tmp
  %6 = load i32, i32* %tmp
  br label %if.end

if.else:                                          ; preds = %entry
  %call = call %struct.sv* @S_more_sv()
  store %struct.sv* %call, %struct.sv** %sv, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %7 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any1 = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 0
  store i8* null, i8** %sv_any1, align 8
  %8 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 1
  store i32 1, i32* %sv_refcnt, align 4
  %9 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 2
  store i32 0, i32* %sv_flags, align 4
  store i32 0, i32* %tmp2
  %10 = load i32, i32* %tmp2
  %11 = load %struct.sv*, %struct.sv** %sv, align 8
  %12 = load i64, i64* %i.addr, align 8
  call void @Perl_sv_setiv(%struct.sv* %11, i64 %12)
  %13 = load %struct.sv*, %struct.sv** %sv, align 8
  ret %struct.sv* %13
}

; Function Attrs: nounwind uwtable
define %struct.sv* @Perl_newSVuv(i64 %u) #0 {
entry:
  %u.addr = alloca i64, align 8
  %sv = alloca %struct.sv*, align 8
  %tmp = alloca i32, align 4
  %tmp2 = alloca i32, align 4
  store i64 %u, i64* %u.addr, align 8
  %0 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  store %struct.sv* %1, %struct.sv** %sv, align 8
  %2 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 0
  %3 = load i8*, i8** %sv_any, align 8
  %4 = bitcast i8* %3 to %struct.sv*
  store %struct.sv* %4, %struct.sv** @PL_sv_root, align 8
  %5 = load i32, i32* @PL_sv_count, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* @PL_sv_count, align 4
  store i32 %inc, i32* %tmp
  %6 = load i32, i32* %tmp
  br label %if.end

if.else:                                          ; preds = %entry
  %call = call %struct.sv* @S_more_sv()
  store %struct.sv* %call, %struct.sv** %sv, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %7 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any1 = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 0
  store i8* null, i8** %sv_any1, align 8
  %8 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 1
  store i32 1, i32* %sv_refcnt, align 4
  %9 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 2
  store i32 0, i32* %sv_flags, align 4
  store i32 0, i32* %tmp2
  %10 = load i32, i32* %tmp2
  %11 = load %struct.sv*, %struct.sv** %sv, align 8
  %12 = load i64, i64* %u.addr, align 8
  call void @Perl_sv_setuv(%struct.sv* %11, i64 %12)
  %13 = load %struct.sv*, %struct.sv** %sv, align 8
  ret %struct.sv* %13
}

; Function Attrs: nounwind uwtable
define %struct.sv* @Perl_newRV_noinc(%struct.sv* %tmpRef) #0 {
entry:
  %tmpRef.addr = alloca %struct.sv*, align 8
  %sv = alloca %struct.sv*, align 8
  %tmp = alloca i32, align 4
  %tmp2 = alloca i32, align 4
  store %struct.sv* %tmpRef, %struct.sv** %tmpRef.addr, align 8
  %0 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  store %struct.sv* %1, %struct.sv** %sv, align 8
  %2 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 0
  %3 = load i8*, i8** %sv_any, align 8
  %4 = bitcast i8* %3 to %struct.sv*
  store %struct.sv* %4, %struct.sv** @PL_sv_root, align 8
  %5 = load i32, i32* @PL_sv_count, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* @PL_sv_count, align 4
  store i32 %inc, i32* %tmp
  %6 = load i32, i32* %tmp
  br label %if.end

if.else:                                          ; preds = %entry
  %call = call %struct.sv* @S_more_sv()
  store %struct.sv* %call, %struct.sv** %sv, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %7 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any1 = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 0
  store i8* null, i8** %sv_any1, align 8
  %8 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 1
  store i32 1, i32* %sv_refcnt, align 4
  %9 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 2
  store i32 0, i32* %sv_flags, align 4
  store i32 0, i32* %tmp2
  %10 = load i32, i32* %tmp2
  %11 = load %struct.sv*, %struct.sv** %sv, align 8
  %call3 = call signext i8 @Perl_sv_upgrade(%struct.sv* %11, i32 3)
  %12 = load %struct.sv*, %struct.sv** %tmpRef.addr, align 8
  %sv_flags4 = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 2
  %13 = load i32, i32* %sv_flags4, align 4
  %and = and i32 %13, -2049
  store i32 %and, i32* %sv_flags4, align 4
  %14 = load %struct.sv*, %struct.sv** %tmpRef.addr, align 8
  %15 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any5 = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 0
  %16 = load i8*, i8** %sv_any5, align 8
  %17 = bitcast i8* %16 to %struct.xrv*
  %xrv_rv = getelementptr inbounds %struct.xrv, %struct.xrv* %17, i32 0, i32 0
  store %struct.sv* %14, %struct.sv** %xrv_rv, align 8
  %18 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags6 = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 2
  %19 = load i32, i32* %sv_flags6, align 4
  %or = or i32 %19, 524288
  store i32 %or, i32* %sv_flags6, align 4
  %20 = load %struct.sv*, %struct.sv** %sv, align 8
  ret %struct.sv* %20
}

; Function Attrs: nounwind uwtable
define %struct.sv* @Perl_newSVsv(%struct.sv* %old) #0 {
entry:
  %retval = alloca %struct.sv*, align 8
  %old.addr = alloca %struct.sv*, align 8
  %sv = alloca %struct.sv*, align 8
  %tmp = alloca i32, align 4
  %tmp19 = alloca i32, align 4
  store %struct.sv* %old, %struct.sv** %old.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %old.addr, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct.sv* null, %struct.sv** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** %old.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and = and i32 %2, 255
  %cmp = icmp eq i32 %and, 255
  br i1 %cmp, label %if.then.1, label %if.end.13

if.then.1:                                        ; preds = %if.end
  %3 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings = getelementptr inbounds %struct.cop, %struct.cop* %3, i32 0, i32 14
  %4 = load %struct.sv*, %struct.sv** %cop_warnings, align 8
  %cmp2 = icmp eq %struct.sv* %4, null
  br i1 %cmp2, label %if.then.11, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then.1
  %5 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings3 = getelementptr inbounds %struct.cop, %struct.cop* %5, i32 0, i32 14
  %6 = load %struct.sv*, %struct.sv** %cop_warnings3, align 8
  %cmp4 = icmp eq %struct.sv* %6, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 1)
  br i1 %cmp4, label %if.then.11, label %lor.lhs.false.5

lor.lhs.false.5:                                  ; preds = %lor.lhs.false
  %7 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings6 = getelementptr inbounds %struct.cop, %struct.cop* %7, i32 0, i32 14
  %8 = load %struct.sv*, %struct.sv** %cop_warnings6, align 8
  %cmp7 = icmp ne %struct.sv* %8, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 2)
  br i1 %cmp7, label %land.lhs.true, label %if.end.12

land.lhs.true:                                    ; preds = %lor.lhs.false.5
  %9 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings8 = getelementptr inbounds %struct.cop, %struct.cop* %9, i32 0, i32 14
  %10 = load %struct.sv*, %struct.sv** %cop_warnings8, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 0
  %11 = load i8*, i8** %sv_any, align 8
  %12 = bitcast i8* %11 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %12, i32 0, i32 0
  %13 = load i8*, i8** %xpv_pv, align 8
  %arrayidx = getelementptr inbounds i8, i8* %13, i64 6
  %14 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %14 to i32
  %and9 = and i32 %conv, 1
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %land.lhs.true, %lor.lhs.false, %if.then.1
  call void (i32, i8*, ...) @Perl_warner(i32 24, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.49, i32 0, i32 0))
  br label %if.end.12

if.end.12:                                        ; preds = %if.then.11, %land.lhs.true, %lor.lhs.false.5
  store %struct.sv* null, %struct.sv** %retval
  br label %return

if.end.13:                                        ; preds = %if.end
  %15 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  %tobool14 = icmp ne %struct.sv* %15, null
  br i1 %tobool14, label %if.then.15, label %if.else

if.then.15:                                       ; preds = %if.end.13
  %16 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  store %struct.sv* %16, %struct.sv** %sv, align 8
  %17 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any16 = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 0
  %18 = load i8*, i8** %sv_any16, align 8
  %19 = bitcast i8* %18 to %struct.sv*
  store %struct.sv* %19, %struct.sv** @PL_sv_root, align 8
  %20 = load i32, i32* @PL_sv_count, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* @PL_sv_count, align 4
  store i32 %inc, i32* %tmp
  %21 = load i32, i32* %tmp
  br label %if.end.17

if.else:                                          ; preds = %if.end.13
  %call = call %struct.sv* @S_more_sv()
  store %struct.sv* %call, %struct.sv** %sv, align 8
  br label %if.end.17

if.end.17:                                        ; preds = %if.else, %if.then.15
  %22 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any18 = getelementptr inbounds %struct.sv, %struct.sv* %22, i32 0, i32 0
  store i8* null, i8** %sv_any18, align 8
  %23 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 1
  store i32 1, i32* %sv_refcnt, align 4
  %24 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags20 = getelementptr inbounds %struct.sv, %struct.sv* %24, i32 0, i32 2
  store i32 0, i32* %sv_flags20, align 4
  store i32 0, i32* %tmp19
  %25 = load i32, i32* %tmp19
  %26 = load %struct.sv*, %struct.sv** %sv, align 8
  %27 = load %struct.sv*, %struct.sv** %old.addr, align 8
  call void @Perl_sv_setsv_flags(%struct.sv* %26, %struct.sv* %27, i32 18)
  %28 = load %struct.sv*, %struct.sv** %sv, align 8
  store %struct.sv* %28, %struct.sv** %retval
  br label %return

return:                                           ; preds = %if.end.17, %if.end.12, %if.then
  %29 = load %struct.sv*, %struct.sv** %retval
  ret %struct.sv* %29
}

; Function Attrs: nounwind uwtable
define void @Perl_sv_reset(i8* %s, %struct.hv* %stash) #0 {
entry:
  %s.addr = alloca i8*, align 8
  %stash.addr = alloca %struct.hv*, align 8
  %entry1 = alloca %struct.he*, align 8
  %gv = alloca %struct.gv*, align 8
  %sv = alloca %struct.sv*, align 8
  %i = alloca i32, align 4
  %pm = alloca %struct.pmop*, align 8
  %max = alloca i32, align 4
  %todo = alloca [256 x i8], align 16
  %tmp = alloca i64, align 8
  store i8* %s, i8** %s.addr, align 8
  store %struct.hv* %stash, %struct.hv** %stash.addr, align 8
  %0 = load %struct.hv*, %struct.hv** %stash.addr, align 8
  %tobool = icmp ne %struct.hv* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %while.end

if.end:                                           ; preds = %entry
  %1 = load i8*, i8** %s.addr, align 8
  %2 = load i8, i8* %1, align 1
  %tobool2 = icmp ne i8 %2, 0
  br i1 %tobool2, label %if.end.6, label %if.then.3

if.then.3:                                        ; preds = %if.end
  %3 = load %struct.hv*, %struct.hv** %stash.addr, align 8
  %sv_any = getelementptr inbounds %struct.hv, %struct.hv* %3, i32 0, i32 0
  %4 = load %struct.xpvhv*, %struct.xpvhv** %sv_any, align 8
  %xhv_pmroot = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %4, i32 0, i32 9
  %5 = load %struct.pmop*, %struct.pmop** %xhv_pmroot, align 8
  store %struct.pmop* %5, %struct.pmop** %pm, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.3
  %6 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %tobool4 = icmp ne %struct.pmop* %6, null
  br i1 %tobool4, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmdynflags = getelementptr inbounds %struct.pmop, %struct.pmop* %7, i32 0, i32 16
  %8 = load i8, i8* %op_pmdynflags, align 1
  %conv = zext i8 %8 to i32
  %and = and i32 %conv, -2
  %conv5 = trunc i32 %and to i8
  store i8 %conv5, i8* %op_pmdynflags, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmnext = getelementptr inbounds %struct.pmop, %struct.pmop* %9, i32 0, i32 12
  %10 = load %struct.pmop*, %struct.pmop** %op_pmnext, align 8
  store %struct.pmop* %10, %struct.pmop** %pm, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %while.end

if.end.6:                                         ; preds = %if.end
  %11 = load %struct.hv*, %struct.hv** %stash.addr, align 8
  %sv_any7 = getelementptr inbounds %struct.hv, %struct.hv* %11, i32 0, i32 0
  %12 = load %struct.xpvhv*, %struct.xpvhv** %sv_any7, align 8
  %xhv_array = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %12, i32 0, i32 0
  %13 = bitcast i8** %xhv_array to %struct.he***
  %14 = load %struct.he**, %struct.he*** %13, align 8
  %tobool8 = icmp ne %struct.he** %14, null
  br i1 %tobool8, label %if.end.10, label %if.then.9

if.then.9:                                        ; preds = %if.end.6
  br label %while.end

if.end.10:                                        ; preds = %if.end.6
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %todo, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* %arraydecay, i8 0, i64 256, i32 1, i1 false)
  br label %while.cond

while.cond:                                       ; preds = %for.end.117, %if.end.10
  %15 = load i8*, i8** %s.addr, align 8
  %16 = load i8, i8* %15, align 1
  %tobool11 = icmp ne i8 %16, 0
  br i1 %tobool11, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %17 = load i8*, i8** %s.addr, align 8
  %18 = load i8, i8* %17, align 1
  %conv12 = zext i8 %18 to i32
  store i32 %conv12, i32* %i, align 4
  %19 = load i8*, i8** %s.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %19, i64 1
  %20 = load i8, i8* %arrayidx, align 1
  %conv13 = sext i8 %20 to i32
  %cmp = icmp eq i32 %conv13, 45
  br i1 %cmp, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %while.body
  %21 = load i8*, i8** %s.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %21, i64 2
  store i8* %add.ptr, i8** %s.addr, align 8
  br label %if.end.16

if.end.16:                                        ; preds = %if.then.15, %while.body
  %22 = load i8*, i8** %s.addr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %22, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 8
  %23 = load i8, i8* %22, align 1
  %conv17 = zext i8 %23 to i32
  store i32 %conv17, i32* %max, align 4
  br label %for.cond.18

for.cond.18:                                      ; preds = %for.inc.23, %if.end.16
  %24 = load i32, i32* %i, align 4
  %25 = load i32, i32* %max, align 4
  %cmp19 = icmp sle i32 %24, %25
  br i1 %cmp19, label %for.body.21, label %for.end.24

for.body.21:                                      ; preds = %for.cond.18
  %26 = load i32, i32* %i, align 4
  %idxprom = sext i32 %26 to i64
  %arrayidx22 = getelementptr inbounds [256 x i8], [256 x i8]* %todo, i32 0, i64 %idxprom
  store i8 1, i8* %arrayidx22, align 1
  br label %for.inc.23

for.inc.23:                                       ; preds = %for.body.21
  %27 = load i32, i32* %i, align 4
  %inc = add nsw i32 %27, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond.18

for.end.24:                                       ; preds = %for.cond.18
  store i32 0, i32* %i, align 4
  br label %for.cond.25

for.cond.25:                                      ; preds = %for.inc.115, %for.end.24
  %28 = load i32, i32* %i, align 4
  %29 = load %struct.hv*, %struct.hv** %stash.addr, align 8
  %sv_any26 = getelementptr inbounds %struct.hv, %struct.hv* %29, i32 0, i32 0
  %30 = load %struct.xpvhv*, %struct.xpvhv** %sv_any26, align 8
  %xhv_max = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %30, i32 0, i32 2
  %31 = load i64, i64* %xhv_max, align 8
  %conv27 = trunc i64 %31 to i32
  %cmp28 = icmp sle i32 %28, %conv27
  br i1 %cmp28, label %for.body.30, label %for.end.117

for.body.30:                                      ; preds = %for.cond.25
  %32 = load i32, i32* %i, align 4
  %idxprom31 = sext i32 %32 to i64
  %33 = load %struct.hv*, %struct.hv** %stash.addr, align 8
  %sv_any32 = getelementptr inbounds %struct.hv, %struct.hv* %33, i32 0, i32 0
  %34 = load %struct.xpvhv*, %struct.xpvhv** %sv_any32, align 8
  %xhv_array33 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %34, i32 0, i32 0
  %35 = bitcast i8** %xhv_array33 to %struct.he***
  %36 = load %struct.he**, %struct.he*** %35, align 8
  %arrayidx34 = getelementptr inbounds %struct.he*, %struct.he** %36, i64 %idxprom31
  %37 = load %struct.he*, %struct.he** %arrayidx34, align 8
  store %struct.he* %37, %struct.he** %entry1, align 8
  br label %for.cond.35

for.cond.35:                                      ; preds = %for.inc.113, %for.body.30
  %38 = load %struct.he*, %struct.he** %entry1, align 8
  %tobool36 = icmp ne %struct.he* %38, null
  br i1 %tobool36, label %for.body.37, label %for.end.114

for.body.37:                                      ; preds = %for.cond.35
  %39 = load %struct.he*, %struct.he** %entry1, align 8
  %hent_hek = getelementptr inbounds %struct.he, %struct.he* %39, i32 0, i32 1
  %40 = load %struct.hek*, %struct.hek** %hent_hek, align 8
  %hek_key = getelementptr inbounds %struct.hek, %struct.hek* %40, i32 0, i32 2
  %arraydecay38 = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key, i32 0, i32 0
  %41 = load i8, i8* %arraydecay38, align 1
  %idxprom39 = zext i8 %41 to i64
  %arrayidx40 = getelementptr inbounds [256 x i8], [256 x i8]* %todo, i32 0, i64 %idxprom39
  %42 = load i8, i8* %arrayidx40, align 1
  %tobool41 = icmp ne i8 %42, 0
  br i1 %tobool41, label %if.end.43, label %if.then.42

if.then.42:                                       ; preds = %for.body.37
  br label %for.inc.113

if.end.43:                                        ; preds = %for.body.37
  %43 = load %struct.he*, %struct.he** %entry1, align 8
  %hent_val = getelementptr inbounds %struct.he, %struct.he* %43, i32 0, i32 2
  %44 = load %struct.sv*, %struct.sv** %hent_val, align 8
  %45 = bitcast %struct.sv* %44 to %struct.gv*
  store %struct.gv* %45, %struct.gv** %gv, align 8
  %46 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any44 = getelementptr inbounds %struct.gv, %struct.gv* %46, i32 0, i32 0
  %47 = load %struct.xpvgv*, %struct.xpvgv** %sv_any44, align 8
  %xgv_gp = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %47, i32 0, i32 7
  %48 = load %struct.gp*, %struct.gp** %xgv_gp, align 8
  %gp_sv = getelementptr inbounds %struct.gp, %struct.gp* %48, i32 0, i32 0
  %49 = load %struct.sv*, %struct.sv** %gp_sv, align 8
  store %struct.sv* %49, %struct.sv** %sv, align 8
  %50 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %50, i32 0, i32 2
  %51 = load i32, i32* %sv_flags, align 4
  %and45 = and i32 %51, 9961472
  %tobool46 = icmp ne i32 %and45, 0
  br i1 %tobool46, label %if.then.47, label %if.end.56

if.then.47:                                       ; preds = %if.end.43
  %52 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags48 = getelementptr inbounds %struct.sv, %struct.sv* %52, i32 0, i32 2
  %53 = load i32, i32* %sv_flags48, align 4
  %and49 = and i32 %53, 8388608
  %tobool50 = icmp ne i32 %and49, 0
  br i1 %tobool50, label %if.end.55, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.then.47
  %54 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags51 = getelementptr inbounds %struct.sv, %struct.sv* %54, i32 0, i32 2
  %55 = load i32, i32* %sv_flags51, align 4
  %and52 = and i32 %55, 524288
  %tobool53 = icmp ne i32 %and52, 0
  br i1 %tobool53, label %if.then.54, label %if.end.55

if.then.54:                                       ; preds = %land.lhs.true
  %56 = load %struct.sv*, %struct.sv** %sv, align 8
  call void @Perl_sv_unref(%struct.sv* %56)
  br label %if.end.55

if.end.55:                                        ; preds = %if.then.54, %land.lhs.true, %if.then.47
  br label %for.inc.113

if.end.56:                                        ; preds = %if.end.43
  %57 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags57 = getelementptr inbounds %struct.sv, %struct.sv* %57, i32 0, i32 2
  %58 = load i32, i32* %sv_flags57, align 4
  %and58 = and i32 %58, 1223753727
  store i32 %and58, i32* %sv_flags57, align 4
  %59 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags59 = getelementptr inbounds %struct.sv, %struct.sv* %59, i32 0, i32 2
  %60 = load i32, i32* %sv_flags59, align 4
  %and60 = and i32 %60, 2097152
  %tobool61 = icmp ne i32 %and60, 0
  br i1 %tobool61, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.end.56
  %61 = load %struct.sv*, %struct.sv** %sv, align 8
  %call = call i32 @Perl_sv_backoff(%struct.sv* %61)
  %tobool62 = icmp ne i32 %call, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end.56
  %62 = phi i1 [ false, %if.end.56 ], [ %tobool62, %land.rhs ]
  %land.ext = zext i1 %62 to i32
  %63 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags63 = getelementptr inbounds %struct.sv, %struct.sv* %63, i32 0, i32 2
  %64 = load i32, i32* %sv_flags63, align 4
  %and64 = and i32 %64, 255
  %cmp65 = icmp uge i32 %and64, 4
  br i1 %cmp65, label %if.then.67, label %if.end.85

if.then.67:                                       ; preds = %land.end
  %65 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any68 = getelementptr inbounds %struct.sv, %struct.sv* %65, i32 0, i32 0
  %66 = load i8*, i8** %sv_any68, align 8
  %67 = bitcast i8* %66 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %67, i32 0, i32 1
  store i64 0, i64* %xpv_cur, align 8
  store i64 0, i64* %tmp
  %68 = load i64, i64* %tmp
  %69 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any69 = getelementptr inbounds %struct.sv, %struct.sv* %69, i32 0, i32 0
  %70 = load i8*, i8** %sv_any69, align 8
  %71 = bitcast i8* %70 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %71, i32 0, i32 0
  %72 = load i8*, i8** %xpv_pv, align 8
  %cmp70 = icmp ne i8* %72, null
  br i1 %cmp70, label %if.then.72, label %if.end.75

if.then.72:                                       ; preds = %if.then.67
  %73 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any73 = getelementptr inbounds %struct.sv, %struct.sv* %73, i32 0, i32 0
  %74 = load i8*, i8** %sv_any73, align 8
  %75 = bitcast i8* %74 to %struct.xpv*
  %xpv_pv74 = getelementptr inbounds %struct.xpv, %struct.xpv* %75, i32 0, i32 0
  %76 = load i8*, i8** %xpv_pv74, align 8
  store i8 0, i8* %76, align 1
  br label %if.end.75

if.end.75:                                        ; preds = %if.then.72, %if.then.67
  %77 = load i8, i8* @PL_tainting, align 1
  %tobool76 = icmp ne i8 %77, 0
  br i1 %tobool76, label %if.then.77, label %if.end.84

if.then.77:                                       ; preds = %if.end.75
  %78 = load i8, i8* @PL_tainted, align 1
  %tobool78 = icmp ne i8 %78, 0
  br i1 %tobool78, label %if.then.79, label %if.end.83

if.then.79:                                       ; preds = %if.then.77
  %79 = load i8, i8* @PL_tainting, align 1
  %tobool80 = icmp ne i8 %79, 0
  br i1 %tobool80, label %if.then.81, label %if.end.82

if.then.81:                                       ; preds = %if.then.79
  %80 = load %struct.sv*, %struct.sv** %sv, align 8
  call void @Perl_sv_taint(%struct.sv* %80)
  br label %if.end.82

if.end.82:                                        ; preds = %if.then.81, %if.then.79
  br label %if.end.83

if.end.83:                                        ; preds = %if.end.82, %if.then.77
  br label %if.end.84

if.end.84:                                        ; preds = %if.end.83, %if.end.75
  br label %if.end.85

if.end.85:                                        ; preds = %if.end.84, %land.end
  %81 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any86 = getelementptr inbounds %struct.gv, %struct.gv* %81, i32 0, i32 0
  %82 = load %struct.xpvgv*, %struct.xpvgv** %sv_any86, align 8
  %xgv_gp87 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %82, i32 0, i32 7
  %83 = load %struct.gp*, %struct.gp** %xgv_gp87, align 8
  %gp_av = getelementptr inbounds %struct.gp, %struct.gp* %83, i32 0, i32 4
  %84 = load %struct.av*, %struct.av** %gp_av, align 8
  %tobool88 = icmp ne %struct.av* %84, null
  br i1 %tobool88, label %if.then.89, label %if.end.93

if.then.89:                                       ; preds = %if.end.85
  %85 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any90 = getelementptr inbounds %struct.gv, %struct.gv* %85, i32 0, i32 0
  %86 = load %struct.xpvgv*, %struct.xpvgv** %sv_any90, align 8
  %xgv_gp91 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %86, i32 0, i32 7
  %87 = load %struct.gp*, %struct.gp** %xgv_gp91, align 8
  %gp_av92 = getelementptr inbounds %struct.gp, %struct.gp* %87, i32 0, i32 4
  %88 = load %struct.av*, %struct.av** %gp_av92, align 8
  call void @Perl_av_clear(%struct.av* %88)
  br label %if.end.93

if.end.93:                                        ; preds = %if.then.89, %if.end.85
  %89 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any94 = getelementptr inbounds %struct.gv, %struct.gv* %89, i32 0, i32 0
  %90 = load %struct.xpvgv*, %struct.xpvgv** %sv_any94, align 8
  %xgv_gp95 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %90, i32 0, i32 7
  %91 = load %struct.gp*, %struct.gp** %xgv_gp95, align 8
  %gp_hv = getelementptr inbounds %struct.gp, %struct.gp* %91, i32 0, i32 5
  %92 = load %struct.hv*, %struct.hv** %gp_hv, align 8
  %tobool96 = icmp ne %struct.hv* %92, null
  br i1 %tobool96, label %land.lhs.true.97, label %if.end.112

land.lhs.true.97:                                 ; preds = %if.end.93
  %93 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any98 = getelementptr inbounds %struct.gv, %struct.gv* %93, i32 0, i32 0
  %94 = load %struct.xpvgv*, %struct.xpvgv** %sv_any98, align 8
  %xgv_gp99 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %94, i32 0, i32 7
  %95 = load %struct.gp*, %struct.gp** %xgv_gp99, align 8
  %gp_hv100 = getelementptr inbounds %struct.gp, %struct.gp* %95, i32 0, i32 5
  %96 = load %struct.hv*, %struct.hv** %gp_hv100, align 8
  %sv_any101 = getelementptr inbounds %struct.hv, %struct.hv* %96, i32 0, i32 0
  %97 = load %struct.xpvhv*, %struct.xpvhv** %sv_any101, align 8
  %xhv_name = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %97, i32 0, i32 10
  %98 = load i8*, i8** %xhv_name, align 8
  %tobool102 = icmp ne i8* %98, null
  br i1 %tobool102, label %if.end.112, label %if.then.103

if.then.103:                                      ; preds = %land.lhs.true.97
  %99 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any104 = getelementptr inbounds %struct.gv, %struct.gv* %99, i32 0, i32 0
  %100 = load %struct.xpvgv*, %struct.xpvgv** %sv_any104, align 8
  %xgv_gp105 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %100, i32 0, i32 7
  %101 = load %struct.gp*, %struct.gp** %xgv_gp105, align 8
  %gp_hv106 = getelementptr inbounds %struct.gp, %struct.gp* %101, i32 0, i32 5
  %102 = load %struct.hv*, %struct.hv** %gp_hv106, align 8
  call void @Perl_hv_clear(%struct.hv* %102)
  %103 = load %struct.gv*, %struct.gv** %gv, align 8
  %104 = load %struct.gv*, %struct.gv** @PL_envgv, align 8
  %cmp107 = icmp eq %struct.gv* %103, %104
  br i1 %cmp107, label %if.then.109, label %if.end.111

if.then.109:                                      ; preds = %if.then.103
  %105 = load i8**, i8*** @environ, align 8
  %arrayidx110 = getelementptr inbounds i8*, i8** %105, i64 0
  store i8* null, i8** %arrayidx110, align 8
  br label %if.end.111

if.end.111:                                       ; preds = %if.then.109, %if.then.103
  br label %if.end.112

if.end.112:                                       ; preds = %if.end.111, %land.lhs.true.97, %if.end.93
  br label %for.inc.113

for.inc.113:                                      ; preds = %if.end.112, %if.end.55, %if.then.42
  %106 = load %struct.he*, %struct.he** %entry1, align 8
  %hent_next = getelementptr inbounds %struct.he, %struct.he* %106, i32 0, i32 0
  %107 = load %struct.he*, %struct.he** %hent_next, align 8
  store %struct.he* %107, %struct.he** %entry1, align 8
  br label %for.cond.35

for.end.114:                                      ; preds = %for.cond.35
  br label %for.inc.115

for.inc.115:                                      ; preds = %for.end.114
  %108 = load i32, i32* %i, align 4
  %inc116 = add nsw i32 %108, 1
  store i32 %inc116, i32* %i, align 4
  br label %for.cond.25

for.end.117:                                      ; preds = %for.cond.25
  br label %while.cond

while.end:                                        ; preds = %if.then, %for.end, %if.then.9, %while.cond
  ret void
}

declare void @Perl_av_clear(%struct.av*) #1

declare void @Perl_hv_clear(%struct.hv*) #1

; Function Attrs: nounwind uwtable
define %struct.io* @Perl_sv_2io(%struct.sv* %sv) #0 {
entry:
  %retval = alloca %struct.io*, align 8
  %sv.addr = alloca %struct.sv*, align 8
  %io = alloca %struct.io*, align 8
  %gv = alloca %struct.gv*, align 8
  %n_a = alloca i64, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 255
  switch i32 %and, label %sw.default [
    i32 15, label %sw.bb
    i32 13, label %sw.bb.1
  ]

sw.bb:                                            ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %3 = bitcast %struct.sv* %2 to %struct.io*
  store %struct.io* %3, %struct.io** %io, align 8
  br label %sw.epilog

sw.bb.1:                                          ; preds = %entry
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %5 = bitcast %struct.sv* %4 to %struct.gv*
  store %struct.gv* %5, %struct.gv** %gv, align 8
  %6 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool = icmp ne %struct.gv* %6, null
  br i1 %tobool, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %sw.bb.1
  %7 = load %struct.gv*, %struct.gv** %gv, align 8
  %8 = bitcast %struct.gv* %7 to %struct.sv*
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 2
  %9 = load i32, i32* %sv_flags2, align 4
  %and3 = and i32 %9, 255
  %cmp = icmp eq i32 %and3, 13
  br i1 %cmp, label %land.lhs.true.4, label %cond.false

land.lhs.true.4:                                  ; preds = %land.lhs.true
  %10 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any = getelementptr inbounds %struct.gv, %struct.gv* %10, i32 0, i32 0
  %11 = load %struct.xpvgv*, %struct.xpvgv** %sv_any, align 8
  %xgv_gp = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %11, i32 0, i32 7
  %12 = load %struct.gp*, %struct.gp** %xgv_gp, align 8
  %tobool5 = icmp ne %struct.gp* %12, null
  br i1 %tobool5, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true.4
  %13 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any6 = getelementptr inbounds %struct.gv, %struct.gv* %13, i32 0, i32 0
  %14 = load %struct.xpvgv*, %struct.xpvgv** %sv_any6, align 8
  %xgv_gp7 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %14, i32 0, i32 7
  %15 = load %struct.gp*, %struct.gp** %xgv_gp7, align 8
  %gp_io = getelementptr inbounds %struct.gp, %struct.gp* %15, i32 0, i32 2
  %16 = load %struct.io*, %struct.io** %gp_io, align 8
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true.4, %land.lhs.true, %sw.bb.1
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.io* [ %16, %cond.true ], [ null, %cond.false ]
  store %struct.io* %cond, %struct.io** %io, align 8
  %17 = load %struct.io*, %struct.io** %io, align 8
  %tobool8 = icmp ne %struct.io* %17, null
  br i1 %tobool8, label %if.end, label %if.then

if.then:                                          ; preds = %cond.end
  %18 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any9 = getelementptr inbounds %struct.gv, %struct.gv* %18, i32 0, i32 0
  %19 = load %struct.xpvgv*, %struct.xpvgv** %sv_any9, align 8
  %xgv_name = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %19, i32 0, i32 8
  %20 = load i8*, i8** %xgv_name, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.50, i32 0, i32 0), i8* %20)
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  %21 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags10 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 2
  %22 = load i32, i32* %sv_flags10, align 4
  %and11 = and i32 %22, 118423552
  %tobool12 = icmp ne i32 %and11, 0
  br i1 %tobool12, label %if.end.14, label %if.then.13

if.then.13:                                       ; preds = %sw.default
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_usym, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.51, i32 0, i32 0))
  br label %if.end.14

if.end.14:                                        ; preds = %if.then.13, %sw.default
  %23 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags15 = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 2
  %24 = load i32, i32* %sv_flags15, align 4
  %and16 = and i32 %24, 524288
  %tobool17 = icmp ne i32 %and16, 0
  br i1 %tobool17, label %if.then.18, label %if.end.20

if.then.18:                                       ; preds = %if.end.14
  %25 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any19 = getelementptr inbounds %struct.sv, %struct.sv* %25, i32 0, i32 0
  %26 = load i8*, i8** %sv_any19, align 8
  %27 = bitcast i8* %26 to %struct.xrv*
  %xrv_rv = getelementptr inbounds %struct.xrv, %struct.xrv* %27, i32 0, i32 0
  %28 = load %struct.sv*, %struct.sv** %xrv_rv, align 8
  %call = call %struct.io* @Perl_sv_2io(%struct.sv* %28)
  store %struct.io* %call, %struct.io** %retval
  br label %return

if.end.20:                                        ; preds = %if.end.14
  %29 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags21 = getelementptr inbounds %struct.sv, %struct.sv* %29, i32 0, i32 2
  %30 = load i32, i32* %sv_flags21, align 4
  %and22 = and i32 %30, 262144
  %cmp23 = icmp eq i32 %and22, 262144
  br i1 %cmp23, label %cond.true.24, label %cond.false.27

cond.true.24:                                     ; preds = %if.end.20
  %31 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any25 = getelementptr inbounds %struct.sv, %struct.sv* %31, i32 0, i32 0
  %32 = load i8*, i8** %sv_any25, align 8
  %33 = bitcast i8* %32 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %33, i32 0, i32 1
  %34 = load i64, i64* %xpv_cur, align 8
  store i64 %34, i64* %n_a, align 8
  %35 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any26 = getelementptr inbounds %struct.sv, %struct.sv* %35, i32 0, i32 0
  %36 = load i8*, i8** %sv_any26, align 8
  %37 = bitcast i8* %36 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %37, i32 0, i32 0
  %38 = load i8*, i8** %xpv_pv, align 8
  br label %cond.end.29

cond.false.27:                                    ; preds = %if.end.20
  %39 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call28 = call i8* @Perl_sv_2pv_flags(%struct.sv* %39, i64* %n_a, i32 2)
  br label %cond.end.29

cond.end.29:                                      ; preds = %cond.false.27, %cond.true.24
  %cond30 = phi i8* [ %38, %cond.true.24 ], [ %call28, %cond.false.27 ]
  %call31 = call %struct.gv* @Perl_gv_fetchpv(i8* %cond30, i32 0, i32 15)
  store %struct.gv* %call31, %struct.gv** %gv, align 8
  %40 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool32 = icmp ne %struct.gv* %40, null
  br i1 %tobool32, label %if.then.33, label %if.else

if.then.33:                                       ; preds = %cond.end.29
  %41 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool34 = icmp ne %struct.gv* %41, null
  br i1 %tobool34, label %land.lhs.true.35, label %cond.false.47

land.lhs.true.35:                                 ; preds = %if.then.33
  %42 = load %struct.gv*, %struct.gv** %gv, align 8
  %43 = bitcast %struct.gv* %42 to %struct.sv*
  %sv_flags36 = getelementptr inbounds %struct.sv, %struct.sv* %43, i32 0, i32 2
  %44 = load i32, i32* %sv_flags36, align 4
  %and37 = and i32 %44, 255
  %cmp38 = icmp eq i32 %and37, 13
  br i1 %cmp38, label %land.lhs.true.39, label %cond.false.47

land.lhs.true.39:                                 ; preds = %land.lhs.true.35
  %45 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any40 = getelementptr inbounds %struct.gv, %struct.gv* %45, i32 0, i32 0
  %46 = load %struct.xpvgv*, %struct.xpvgv** %sv_any40, align 8
  %xgv_gp41 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %46, i32 0, i32 7
  %47 = load %struct.gp*, %struct.gp** %xgv_gp41, align 8
  %tobool42 = icmp ne %struct.gp* %47, null
  br i1 %tobool42, label %cond.true.43, label %cond.false.47

cond.true.43:                                     ; preds = %land.lhs.true.39
  %48 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any44 = getelementptr inbounds %struct.gv, %struct.gv* %48, i32 0, i32 0
  %49 = load %struct.xpvgv*, %struct.xpvgv** %sv_any44, align 8
  %xgv_gp45 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %49, i32 0, i32 7
  %50 = load %struct.gp*, %struct.gp** %xgv_gp45, align 8
  %gp_io46 = getelementptr inbounds %struct.gp, %struct.gp* %50, i32 0, i32 2
  %51 = load %struct.io*, %struct.io** %gp_io46, align 8
  br label %cond.end.48

cond.false.47:                                    ; preds = %land.lhs.true.39, %land.lhs.true.35, %if.then.33
  br label %cond.end.48

cond.end.48:                                      ; preds = %cond.false.47, %cond.true.43
  %cond49 = phi %struct.io* [ %51, %cond.true.43 ], [ null, %cond.false.47 ]
  store %struct.io* %cond49, %struct.io** %io, align 8
  br label %if.end.50

if.else:                                          ; preds = %cond.end.29
  store %struct.io* null, %struct.io** %io, align 8
  br label %if.end.50

if.end.50:                                        ; preds = %if.else, %cond.end.48
  %52 = load %struct.io*, %struct.io** %io, align 8
  %tobool51 = icmp ne %struct.io* %52, null
  br i1 %tobool51, label %if.end.53, label %if.then.52

if.then.52:                                       ; preds = %if.end.50
  %53 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.52, i32 0, i32 0), %struct.sv* %53)
  br label %if.end.53

if.end.53:                                        ; preds = %if.then.52, %if.end.50
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end.53, %if.end, %sw.bb
  %54 = load %struct.io*, %struct.io** %io, align 8
  store %struct.io* %54, %struct.io** %retval
  br label %return

return:                                           ; preds = %sw.epilog, %if.then.18
  %55 = load %struct.io*, %struct.io** %retval
  ret %struct.io* %55
}

declare %struct.gv* @Perl_gv_fetchpv(i8*, i32, i32) #1

; Function Attrs: nounwind uwtable
define %struct.cv* @Perl_sv_2cv(%struct.sv* %sv, %struct.hv** %st, %struct.gv** %gvp, i32 %lref) #0 {
entry:
  %retval = alloca %struct.cv*, align 8
  %sv.addr = alloca %struct.sv*, align 8
  %st.addr = alloca %struct.hv**, align 8
  %gvp.addr = alloca %struct.gv**, align 8
  %lref.addr = alloca i32, align 4
  %gv = alloca %struct.gv*, align 8
  %cv = alloca %struct.cv*, align 8
  %n_a = alloca i64, align 8
  %sp = alloca %struct.sv**, align 8
  %tmpsv = alloca %struct.sv*, align 8
  %arg = alloca %struct.sv*, align 8
  %tmpsv101 = alloca %struct.sv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store %struct.hv** %st, %struct.hv*** %st.addr, align 8
  store %struct.gv** %gvp, %struct.gv*** %gvp.addr, align 8
  store i32 %lref, i32* %lref.addr, align 4
  store %struct.gv* null, %struct.gv** %gv, align 8
  store %struct.cv* null, %struct.cv** %cv, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct.gv**, %struct.gv*** %gvp.addr, align 8
  store %struct.gv* null, %struct.gv** %1, align 8
  store %struct.cv* null, %struct.cv** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags, align 4
  %and = and i32 %3, 255
  switch i32 %and, label %sw.default [
    i32 12, label %sw.bb
    i32 11, label %sw.bb.1
    i32 10, label %sw.bb.1
    i32 13, label %sw.bb.2
  ]

sw.bb:                                            ; preds = %if.end
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 0
  %5 = load i8*, i8** %sv_any, align 8
  %6 = bitcast i8* %5 to %struct.xpvcv*
  %xcv_stash = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %6, i32 0, i32 7
  %7 = load %struct.hv*, %struct.hv** %xcv_stash, align 8
  %8 = load %struct.hv**, %struct.hv*** %st.addr, align 8
  store %struct.hv* %7, %struct.hv** %8, align 8
  %9 = load %struct.gv**, %struct.gv*** %gvp.addr, align 8
  store %struct.gv* null, %struct.gv** %9, align 8
  %10 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %11 = bitcast %struct.sv* %10 to %struct.cv*
  store %struct.cv* %11, %struct.cv** %retval
  br label %return

sw.bb.1:                                          ; preds = %if.end, %if.end
  %12 = load %struct.gv**, %struct.gv*** %gvp.addr, align 8
  store %struct.gv* null, %struct.gv** %12, align 8
  store %struct.cv* null, %struct.cv** %retval
  br label %return

sw.bb.2:                                          ; preds = %if.end
  %13 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %14 = bitcast %struct.sv* %13 to %struct.gv*
  store %struct.gv* %14, %struct.gv** %gv, align 8
  %15 = load %struct.gv*, %struct.gv** %gv, align 8
  %16 = load %struct.gv**, %struct.gv*** %gvp.addr, align 8
  store %struct.gv* %15, %struct.gv** %16, align 8
  %17 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any3 = getelementptr inbounds %struct.gv, %struct.gv* %17, i32 0, i32 0
  %18 = load %struct.xpvgv*, %struct.xpvgv** %sv_any3, align 8
  %xgv_gp = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %18, i32 0, i32 7
  %19 = load %struct.gp*, %struct.gp** %xgv_gp, align 8
  %gp_egv = getelementptr inbounds %struct.gp, %struct.gp* %19, i32 0, i32 6
  %20 = load %struct.gv*, %struct.gv** %gp_egv, align 8
  %tobool4 = icmp ne %struct.gv* %20, null
  br i1 %tobool4, label %cond.true, label %cond.false

cond.true:                                        ; preds = %sw.bb.2
  %21 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any5 = getelementptr inbounds %struct.gv, %struct.gv* %21, i32 0, i32 0
  %22 = load %struct.xpvgv*, %struct.xpvgv** %sv_any5, align 8
  %xgv_gp6 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %22, i32 0, i32 7
  %23 = load %struct.gp*, %struct.gp** %xgv_gp6, align 8
  %gp_egv7 = getelementptr inbounds %struct.gp, %struct.gp* %23, i32 0, i32 6
  %24 = load %struct.gv*, %struct.gv** %gp_egv7, align 8
  br label %cond.end

cond.false:                                       ; preds = %sw.bb.2
  %25 = load %struct.gv*, %struct.gv** %gv, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gv* [ %24, %cond.true ], [ %25, %cond.false ]
  %sv_any8 = getelementptr inbounds %struct.gv, %struct.gv* %cond, i32 0, i32 0
  %26 = load %struct.xpvgv*, %struct.xpvgv** %sv_any8, align 8
  %xgv_stash = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %26, i32 0, i32 10
  %27 = load %struct.hv*, %struct.hv** %xgv_stash, align 8
  %28 = load %struct.hv**, %struct.hv*** %st.addr, align 8
  store %struct.hv* %27, %struct.hv** %28, align 8
  br label %fix_gv

sw.default:                                       ; preds = %if.end
  %29 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags9 = getelementptr inbounds %struct.sv, %struct.sv* %29, i32 0, i32 2
  %30 = load i32, i32* %sv_flags9, align 4
  %and10 = and i32 %30, 8192
  %tobool11 = icmp ne i32 %and10, 0
  br i1 %tobool11, label %if.then.12, label %if.end.13

if.then.12:                                       ; preds = %sw.default
  %31 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i32 @Perl_mg_get(%struct.sv* %31)
  br label %if.end.13

if.end.13:                                        ; preds = %if.then.12, %sw.default
  %32 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags14 = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 2
  %33 = load i32, i32* %sv_flags14, align 4
  %and15 = and i32 %33, 524288
  %tobool16 = icmp ne i32 %and15, 0
  br i1 %tobool16, label %if.then.17, label %if.else.55

if.then.17:                                       ; preds = %if.end.13
  store %struct.sv** %sv.addr, %struct.sv*** %sp, align 8
  %34 = load i64, i64* @PL_amagic_generation, align 8
  %tobool18 = icmp ne i64 %34, 0
  br i1 %tobool18, label %if.then.19, label %if.end.39

if.then.19:                                       ; preds = %if.then.17
  %35 = load %struct.sv**, %struct.sv*** %sp, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %35, i64 0
  %36 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %36, %struct.sv** %arg, align 8
  br label %am_again

am_again:                                         ; preds = %if.then.36, %if.then.19
  %37 = load %struct.sv*, %struct.sv** %arg, align 8
  %sv_flags20 = getelementptr inbounds %struct.sv, %struct.sv* %37, i32 0, i32 2
  %38 = load i32, i32* %sv_flags20, align 4
  %and21 = and i32 %38, 268435456
  %tobool22 = icmp ne i32 %and21, 0
  br i1 %tobool22, label %land.lhs.true, label %if.end.38

land.lhs.true:                                    ; preds = %am_again
  %39 = load %struct.sv*, %struct.sv** %arg, align 8
  %call23 = call %struct.sv* @Perl_amagic_call(%struct.sv* %39, %struct.sv* @PL_sv_undef, i32 62, i32 9)
  store %struct.sv* %call23, %struct.sv** %tmpsv, align 8
  %tobool24 = icmp ne %struct.sv* %call23, null
  br i1 %tobool24, label %if.then.25, label %if.end.38

if.then.25:                                       ; preds = %land.lhs.true
  %40 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %40, %struct.sv*** %sp, align 8
  %41 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  store %struct.sv* %41, %struct.sv** %sv.addr, align 8
  %42 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %sv_flags26 = getelementptr inbounds %struct.sv, %struct.sv* %42, i32 0, i32 2
  %43 = load i32, i32* %sv_flags26, align 4
  %and27 = and i32 %43, 524288
  %tobool28 = icmp ne i32 %and27, 0
  br i1 %tobool28, label %if.end.30, label %if.then.29

if.then.29:                                       ; preds = %if.then.25
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.53, i32 0, i32 0))
  br label %if.end.30

if.end.30:                                        ; preds = %if.then.29, %if.then.25
  %44 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %45 = load %struct.sv*, %struct.sv** %arg, align 8
  %cmp = icmp ne %struct.sv* %44, %45
  br i1 %cmp, label %land.lhs.true.31, label %if.end.37

land.lhs.true.31:                                 ; preds = %if.end.30
  %46 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %sv_any32 = getelementptr inbounds %struct.sv, %struct.sv* %46, i32 0, i32 0
  %47 = load i8*, i8** %sv_any32, align 8
  %48 = bitcast i8* %47 to %struct.xrv*
  %xrv_rv = getelementptr inbounds %struct.xrv, %struct.xrv* %48, i32 0, i32 0
  %49 = load %struct.sv*, %struct.sv** %xrv_rv, align 8
  %50 = load %struct.sv*, %struct.sv** %arg, align 8
  %sv_any33 = getelementptr inbounds %struct.sv, %struct.sv* %50, i32 0, i32 0
  %51 = load i8*, i8** %sv_any33, align 8
  %52 = bitcast i8* %51 to %struct.xrv*
  %xrv_rv34 = getelementptr inbounds %struct.xrv, %struct.xrv* %52, i32 0, i32 0
  %53 = load %struct.sv*, %struct.sv** %xrv_rv34, align 8
  %cmp35 = icmp ne %struct.sv* %49, %53
  br i1 %cmp35, label %if.then.36, label %if.end.37

if.then.36:                                       ; preds = %land.lhs.true.31
  %54 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  store %struct.sv* %54, %struct.sv** %arg, align 8
  br label %am_again

if.end.37:                                        ; preds = %land.lhs.true.31, %if.end.30
  br label %if.end.38

if.end.38:                                        ; preds = %if.end.37, %land.lhs.true, %am_again
  br label %if.end.39

if.end.39:                                        ; preds = %if.end.38, %if.then.17
  %55 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any40 = getelementptr inbounds %struct.sv, %struct.sv* %55, i32 0, i32 0
  %56 = load i8*, i8** %sv_any40, align 8
  %57 = bitcast i8* %56 to %struct.xrv*
  %xrv_rv41 = getelementptr inbounds %struct.xrv, %struct.xrv* %57, i32 0, i32 0
  %58 = load %struct.sv*, %struct.sv** %xrv_rv41, align 8
  store %struct.sv* %58, %struct.sv** %sv.addr, align 8
  %59 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags42 = getelementptr inbounds %struct.sv, %struct.sv* %59, i32 0, i32 2
  %60 = load i32, i32* %sv_flags42, align 4
  %and43 = and i32 %60, 255
  %cmp44 = icmp eq i32 %and43, 12
  br i1 %cmp44, label %if.then.45, label %if.else

if.then.45:                                       ; preds = %if.end.39
  %61 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %62 = bitcast %struct.sv* %61 to %struct.cv*
  store %struct.cv* %62, %struct.cv** %cv, align 8
  %63 = load %struct.gv**, %struct.gv*** %gvp.addr, align 8
  store %struct.gv* null, %struct.gv** %63, align 8
  %64 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any46 = getelementptr inbounds %struct.cv, %struct.cv* %64, i32 0, i32 0
  %65 = load %struct.xpvcv*, %struct.xpvcv** %sv_any46, align 8
  %xcv_stash47 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %65, i32 0, i32 7
  %66 = load %struct.hv*, %struct.hv** %xcv_stash47, align 8
  %67 = load %struct.hv**, %struct.hv*** %st.addr, align 8
  store %struct.hv* %66, %struct.hv** %67, align 8
  %68 = load %struct.cv*, %struct.cv** %cv, align 8
  store %struct.cv* %68, %struct.cv** %retval
  br label %return

if.else:                                          ; preds = %if.end.39
  %69 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags48 = getelementptr inbounds %struct.sv, %struct.sv* %69, i32 0, i32 2
  %70 = load i32, i32* %sv_flags48, align 4
  %and49 = and i32 %70, 255
  %cmp50 = icmp eq i32 %and49, 13
  br i1 %cmp50, label %if.then.51, label %if.else.52

if.then.51:                                       ; preds = %if.else
  %71 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %72 = bitcast %struct.sv* %71 to %struct.gv*
  store %struct.gv* %72, %struct.gv** %gv, align 8
  br label %if.end.53

if.else.52:                                       ; preds = %if.else
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.54, i32 0, i32 0))
  br label %if.end.53

if.end.53:                                        ; preds = %if.else.52, %if.then.51
  br label %if.end.54

if.end.54:                                        ; preds = %if.end.53
  br label %if.end.73

if.else.55:                                       ; preds = %if.end.13
  %73 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags56 = getelementptr inbounds %struct.sv, %struct.sv* %73, i32 0, i32 2
  %74 = load i32, i32* %sv_flags56, align 4
  %and57 = and i32 %74, 255
  %cmp58 = icmp eq i32 %and57, 13
  br i1 %cmp58, label %if.then.59, label %if.else.60

if.then.59:                                       ; preds = %if.else.55
  %75 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %76 = bitcast %struct.sv* %75 to %struct.gv*
  store %struct.gv* %76, %struct.gv** %gv, align 8
  br label %if.end.72

if.else.60:                                       ; preds = %if.else.55
  %77 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags61 = getelementptr inbounds %struct.sv, %struct.sv* %77, i32 0, i32 2
  %78 = load i32, i32* %sv_flags61, align 4
  %and62 = and i32 %78, 262144
  %cmp63 = icmp eq i32 %and62, 262144
  br i1 %cmp63, label %cond.true.64, label %cond.false.67

cond.true.64:                                     ; preds = %if.else.60
  %79 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any65 = getelementptr inbounds %struct.sv, %struct.sv* %79, i32 0, i32 0
  %80 = load i8*, i8** %sv_any65, align 8
  %81 = bitcast i8* %80 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %81, i32 0, i32 1
  %82 = load i64, i64* %xpv_cur, align 8
  store i64 %82, i64* %n_a, align 8
  %83 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any66 = getelementptr inbounds %struct.sv, %struct.sv* %83, i32 0, i32 0
  %84 = load i8*, i8** %sv_any66, align 8
  %85 = bitcast i8* %84 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %85, i32 0, i32 0
  %86 = load i8*, i8** %xpv_pv, align 8
  br label %cond.end.69

cond.false.67:                                    ; preds = %if.else.60
  %87 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call68 = call i8* @Perl_sv_2pv_flags(%struct.sv* %87, i64* %n_a, i32 2)
  br label %cond.end.69

cond.end.69:                                      ; preds = %cond.false.67, %cond.true.64
  %cond70 = phi i8* [ %86, %cond.true.64 ], [ %call68, %cond.false.67 ]
  %88 = load i32, i32* %lref.addr, align 4
  %call71 = call %struct.gv* @Perl_gv_fetchpv(i8* %cond70, i32 %88, i32 12)
  store %struct.gv* %call71, %struct.gv** %gv, align 8
  br label %if.end.72

if.end.72:                                        ; preds = %cond.end.69, %if.then.59
  br label %if.end.73

if.end.73:                                        ; preds = %if.end.72, %if.end.54
  %89 = load %struct.gv*, %struct.gv** %gv, align 8
  %90 = load %struct.gv**, %struct.gv*** %gvp.addr, align 8
  store %struct.gv* %89, %struct.gv** %90, align 8
  %91 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool74 = icmp ne %struct.gv* %91, null
  br i1 %tobool74, label %if.end.76, label %if.then.75

if.then.75:                                       ; preds = %if.end.73
  store %struct.cv* null, %struct.cv** %retval
  br label %return

if.end.76:                                        ; preds = %if.end.73
  %92 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any77 = getelementptr inbounds %struct.gv, %struct.gv* %92, i32 0, i32 0
  %93 = load %struct.xpvgv*, %struct.xpvgv** %sv_any77, align 8
  %xgv_gp78 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %93, i32 0, i32 7
  %94 = load %struct.gp*, %struct.gp** %xgv_gp78, align 8
  %gp_egv79 = getelementptr inbounds %struct.gp, %struct.gp* %94, i32 0, i32 6
  %95 = load %struct.gv*, %struct.gv** %gp_egv79, align 8
  %tobool80 = icmp ne %struct.gv* %95, null
  br i1 %tobool80, label %cond.true.81, label %cond.false.85

cond.true.81:                                     ; preds = %if.end.76
  %96 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any82 = getelementptr inbounds %struct.gv, %struct.gv* %96, i32 0, i32 0
  %97 = load %struct.xpvgv*, %struct.xpvgv** %sv_any82, align 8
  %xgv_gp83 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %97, i32 0, i32 7
  %98 = load %struct.gp*, %struct.gp** %xgv_gp83, align 8
  %gp_egv84 = getelementptr inbounds %struct.gp, %struct.gp* %98, i32 0, i32 6
  %99 = load %struct.gv*, %struct.gv** %gp_egv84, align 8
  br label %cond.end.86

cond.false.85:                                    ; preds = %if.end.76
  %100 = load %struct.gv*, %struct.gv** %gv, align 8
  br label %cond.end.86

cond.end.86:                                      ; preds = %cond.false.85, %cond.true.81
  %cond87 = phi %struct.gv* [ %99, %cond.true.81 ], [ %100, %cond.false.85 ]
  %sv_any88 = getelementptr inbounds %struct.gv, %struct.gv* %cond87, i32 0, i32 0
  %101 = load %struct.xpvgv*, %struct.xpvgv** %sv_any88, align 8
  %xgv_stash89 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %101, i32 0, i32 10
  %102 = load %struct.hv*, %struct.hv** %xgv_stash89, align 8
  %103 = load %struct.hv**, %struct.hv*** %st.addr, align 8
  store %struct.hv* %102, %struct.hv** %103, align 8
  br label %fix_gv

fix_gv:                                           ; preds = %cond.end.86, %cond.end
  %104 = load i32, i32* %lref.addr, align 4
  %tobool90 = icmp ne i32 %104, 0
  br i1 %tobool90, label %land.lhs.true.91, label %if.end.118

land.lhs.true.91:                                 ; preds = %fix_gv
  %105 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any92 = getelementptr inbounds %struct.gv, %struct.gv* %105, i32 0, i32 0
  %106 = load %struct.xpvgv*, %struct.xpvgv** %sv_any92, align 8
  %xgv_gp93 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %106, i32 0, i32 7
  %107 = load %struct.gp*, %struct.gp** %xgv_gp93, align 8
  %gp_cvgen = getelementptr inbounds %struct.gp, %struct.gp* %107, i32 0, i32 8
  %108 = load i32, i32* %gp_cvgen, align 4
  %tobool94 = icmp ne i32 %108, 0
  br i1 %tobool94, label %cond.true.95, label %cond.false.96

cond.true.95:                                     ; preds = %land.lhs.true.91
  br i1 false, label %if.end.118, label %if.then.100

cond.false.96:                                    ; preds = %land.lhs.true.91
  %109 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any97 = getelementptr inbounds %struct.gv, %struct.gv* %109, i32 0, i32 0
  %110 = load %struct.xpvgv*, %struct.xpvgv** %sv_any97, align 8
  %xgv_gp98 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %110, i32 0, i32 7
  %111 = load %struct.gp*, %struct.gp** %xgv_gp98, align 8
  %gp_cv = getelementptr inbounds %struct.gp, %struct.gp* %111, i32 0, i32 7
  %112 = load %struct.cv*, %struct.cv** %gp_cv, align 8
  %tobool99 = icmp ne %struct.cv* %112, null
  br i1 %tobool99, label %if.end.118, label %if.then.100

if.then.100:                                      ; preds = %cond.false.96, %cond.true.95
  call void @Perl_push_scope()
  %call102 = call %struct.sv* @Perl_newSV(i64 0)
  store %struct.sv* %call102, %struct.sv** %tmpsv101, align 8
  %113 = load %struct.sv*, %struct.sv** %tmpsv101, align 8
  %114 = load %struct.gv*, %struct.gv** %gv, align 8
  call void @Perl_gv_efullname4(%struct.sv* %113, %struct.gv* %114, i8* null, i8 signext 1)
  %call103 = call i32 @Perl_start_subparse(i32 0, i32 0)
  %115 = load %struct.sv*, %struct.sv** %tmpsv101, align 8
  %call104 = call %struct.op* @Perl_newSVOP(i32 5, i32 0, %struct.sv* %115)
  %call105 = call %struct.cv* @Perl_newSUB(i32 %call103, %struct.op* %call104, %struct.op* null, %struct.op* null)
  call void @Perl_pop_scope()
  %116 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any106 = getelementptr inbounds %struct.gv, %struct.gv* %116, i32 0, i32 0
  %117 = load %struct.xpvgv*, %struct.xpvgv** %sv_any106, align 8
  %xgv_gp107 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %117, i32 0, i32 7
  %118 = load %struct.gp*, %struct.gp** %xgv_gp107, align 8
  %gp_cvgen108 = getelementptr inbounds %struct.gp, %struct.gp* %118, i32 0, i32 8
  %119 = load i32, i32* %gp_cvgen108, align 4
  %tobool109 = icmp ne i32 %119, 0
  br i1 %tobool109, label %cond.true.110, label %cond.false.111

cond.true.110:                                    ; preds = %if.then.100
  br i1 false, label %if.end.117, label %if.then.116

cond.false.111:                                   ; preds = %if.then.100
  %120 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any112 = getelementptr inbounds %struct.gv, %struct.gv* %120, i32 0, i32 0
  %121 = load %struct.xpvgv*, %struct.xpvgv** %sv_any112, align 8
  %xgv_gp113 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %121, i32 0, i32 7
  %122 = load %struct.gp*, %struct.gp** %xgv_gp113, align 8
  %gp_cv114 = getelementptr inbounds %struct.gp, %struct.gp* %122, i32 0, i32 7
  %123 = load %struct.cv*, %struct.cv** %gp_cv114, align 8
  %tobool115 = icmp ne %struct.cv* %123, null
  br i1 %tobool115, label %if.end.117, label %if.then.116

if.then.116:                                      ; preds = %cond.false.111, %cond.true.110
  %124 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.55, i32 0, i32 0), %struct.sv* %124)
  br label %if.end.117

if.end.117:                                       ; preds = %if.then.116, %cond.false.111, %cond.true.110
  br label %if.end.118

if.end.118:                                       ; preds = %if.end.117, %cond.false.96, %cond.true.95, %fix_gv
  %125 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any119 = getelementptr inbounds %struct.gv, %struct.gv* %125, i32 0, i32 0
  %126 = load %struct.xpvgv*, %struct.xpvgv** %sv_any119, align 8
  %xgv_gp120 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %126, i32 0, i32 7
  %127 = load %struct.gp*, %struct.gp** %xgv_gp120, align 8
  %gp_cvgen121 = getelementptr inbounds %struct.gp, %struct.gp* %127, i32 0, i32 8
  %128 = load i32, i32* %gp_cvgen121, align 4
  %tobool122 = icmp ne i32 %128, 0
  br i1 %tobool122, label %cond.true.123, label %cond.false.124

cond.true.123:                                    ; preds = %if.end.118
  br label %cond.end.128

cond.false.124:                                   ; preds = %if.end.118
  %129 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any125 = getelementptr inbounds %struct.gv, %struct.gv* %129, i32 0, i32 0
  %130 = load %struct.xpvgv*, %struct.xpvgv** %sv_any125, align 8
  %xgv_gp126 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %130, i32 0, i32 7
  %131 = load %struct.gp*, %struct.gp** %xgv_gp126, align 8
  %gp_cv127 = getelementptr inbounds %struct.gp, %struct.gp* %131, i32 0, i32 7
  %132 = load %struct.cv*, %struct.cv** %gp_cv127, align 8
  br label %cond.end.128

cond.end.128:                                     ; preds = %cond.false.124, %cond.true.123
  %cond129 = phi %struct.cv* [ null, %cond.true.123 ], [ %132, %cond.false.124 ]
  store %struct.cv* %cond129, %struct.cv** %retval
  br label %return

return:                                           ; preds = %cond.end.128, %if.then.75, %if.then.45, %sw.bb.1, %sw.bb, %if.then
  %133 = load %struct.cv*, %struct.cv** %retval
  ret %struct.cv* %133
}

declare void @Perl_gv_efullname4(%struct.sv*, %struct.gv*, i8*, i8 signext) #1

declare %struct.cv* @Perl_newSUB(i32, %struct.op*, %struct.op*, %struct.op*) #1

declare i32 @Perl_start_subparse(i32, i32) #1

declare %struct.op* @Perl_newSVOP(i32, i32, %struct.sv*) #1

; Function Attrs: nounwind uwtable
define i32 @Perl_sv_true(%struct.sv* %sv) #0 {
entry:
  %retval = alloca i32, align 4
  %sv.addr = alloca %struct.sv*, align 8
  %tXpv = alloca %struct.xpv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and = and i32 %2, 262144
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %if.then.2, label %if.else.10

if.then.2:                                        ; preds = %if.end
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 0
  %4 = load i8*, i8** %sv_any, align 8
  %5 = bitcast i8* %4 to %struct.xpv*
  store %struct.xpv* %5, %struct.xpv** %tXpv, align 8
  %tobool3 = icmp ne %struct.xpv* %5, null
  br i1 %tobool3, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.then.2
  %6 = load %struct.xpv*, %struct.xpv** %tXpv, align 8
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %6, i32 0, i32 1
  %7 = load i64, i64* %xpv_cur, align 8
  %cmp = icmp ugt i64 %7, 1
  br i1 %cmp, label %if.then.9, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %8 = load %struct.xpv*, %struct.xpv** %tXpv, align 8
  %xpv_cur4 = getelementptr inbounds %struct.xpv, %struct.xpv* %8, i32 0, i32 1
  %9 = load i64, i64* %xpv_cur4, align 8
  %tobool5 = icmp ne i64 %9, 0
  br i1 %tobool5, label %land.lhs.true.6, label %if.else

land.lhs.true.6:                                  ; preds = %lor.lhs.false
  %10 = load %struct.xpv*, %struct.xpv** %tXpv, align 8
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %10, i32 0, i32 0
  %11 = load i8*, i8** %xpv_pv, align 8
  %12 = load i8, i8* %11, align 1
  %conv = sext i8 %12 to i32
  %cmp7 = icmp ne i32 %conv, 48
  br i1 %cmp7, label %if.then.9, label %if.else

if.then.9:                                        ; preds = %land.lhs.true.6, %land.lhs.true
  store i32 1, i32* %retval
  br label %return

if.else:                                          ; preds = %land.lhs.true.6, %lor.lhs.false, %if.then.2
  store i32 0, i32* %retval
  br label %return

if.else.10:                                       ; preds = %if.end
  %13 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags11 = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 2
  %14 = load i32, i32* %sv_flags11, align 4
  %and12 = and i32 %14, 65536
  %tobool13 = icmp ne i32 %and12, 0
  br i1 %tobool13, label %if.then.14, label %if.else.18

if.then.14:                                       ; preds = %if.else.10
  %15 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any15 = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 0
  %16 = load i8*, i8** %sv_any15, align 8
  %17 = bitcast i8* %16 to %struct.xpviv*
  %xiv_iv = getelementptr inbounds %struct.xpviv, %struct.xpviv* %17, i32 0, i32 3
  %18 = load i64, i64* %xiv_iv, align 8
  %cmp16 = icmp ne i64 %18, 0
  %conv17 = zext i1 %cmp16 to i32
  store i32 %conv17, i32* %retval
  br label %return

if.else.18:                                       ; preds = %if.else.10
  %19 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags19 = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 2
  %20 = load i32, i32* %sv_flags19, align 4
  %and20 = and i32 %20, 131072
  %tobool21 = icmp ne i32 %and20, 0
  br i1 %tobool21, label %if.then.22, label %if.else.26

if.then.22:                                       ; preds = %if.else.18
  %21 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any23 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 0
  %22 = load i8*, i8** %sv_any23, align 8
  %23 = bitcast i8* %22 to %struct.xpvnv*
  %xnv_nv = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %23, i32 0, i32 4
  %24 = load double, double* %xnv_nv, align 8
  %cmp24 = fcmp une double %24, 0.000000e+00
  %conv25 = zext i1 %cmp24 to i32
  store i32 %conv25, i32* %retval
  br label %return

if.else.26:                                       ; preds = %if.else.18
  %25 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call signext i8 @Perl_sv_2bool(%struct.sv* %25)
  %conv27 = sext i8 %call to i32
  store i32 %conv27, i32* %retval
  br label %return

return:                                           ; preds = %if.else.26, %if.then.22, %if.then.14, %if.else, %if.then.9, %if.then
  %26 = load i32, i32* %retval
  ret i32 %26
}

; Function Attrs: nounwind uwtable
define i64 @Perl_sv_iv(%struct.sv* %sv) #0 {
entry:
  %retval = alloca i64, align 8
  %sv.addr = alloca %struct.sv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 65536
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end.6

if.then:                                          ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %3, -2147483648
  %tobool3 = icmp ne i32 %and2, 0
  br i1 %tobool3, label %if.then.4, label %if.end

if.then.4:                                        ; preds = %if.then
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 0
  %5 = load i8*, i8** %sv_any, align 8
  %6 = bitcast i8* %5 to %struct.xpvuv*
  %xuv_uv = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %6, i32 0, i32 3
  %7 = load i64, i64* %xuv_uv, align 8
  store i64 %7, i64* %retval
  br label %return

if.end:                                           ; preds = %if.then
  %8 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any5 = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 0
  %9 = load i8*, i8** %sv_any5, align 8
  %10 = bitcast i8* %9 to %struct.xpviv*
  %xiv_iv = getelementptr inbounds %struct.xpviv, %struct.xpviv* %10, i32 0, i32 3
  %11 = load i64, i64* %xiv_iv, align 8
  store i64 %11, i64* %retval
  br label %return

if.end.6:                                         ; preds = %entry
  %12 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i64 @Perl_sv_2iv(%struct.sv* %12)
  store i64 %call, i64* %retval
  br label %return

return:                                           ; preds = %if.end.6, %if.end, %if.then.4
  %13 = load i64, i64* %retval
  ret i64 %13
}

; Function Attrs: nounwind uwtable
define i64 @Perl_sv_uv(%struct.sv* %sv) #0 {
entry:
  %retval = alloca i64, align 8
  %sv.addr = alloca %struct.sv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 65536
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end.6

if.then:                                          ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %3, -2147483648
  %tobool3 = icmp ne i32 %and2, 0
  br i1 %tobool3, label %if.then.4, label %if.end

if.then.4:                                        ; preds = %if.then
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 0
  %5 = load i8*, i8** %sv_any, align 8
  %6 = bitcast i8* %5 to %struct.xpvuv*
  %xuv_uv = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %6, i32 0, i32 3
  %7 = load i64, i64* %xuv_uv, align 8
  store i64 %7, i64* %retval
  br label %return

if.end:                                           ; preds = %if.then
  %8 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any5 = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 0
  %9 = load i8*, i8** %sv_any5, align 8
  %10 = bitcast i8* %9 to %struct.xpviv*
  %xiv_iv = getelementptr inbounds %struct.xpviv, %struct.xpviv* %10, i32 0, i32 3
  %11 = load i64, i64* %xiv_iv, align 8
  store i64 %11, i64* %retval
  br label %return

if.end.6:                                         ; preds = %entry
  %12 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i64 @Perl_sv_2uv(%struct.sv* %12)
  store i64 %call, i64* %retval
  br label %return

return:                                           ; preds = %if.end.6, %if.end, %if.then.4
  %13 = load i64, i64* %retval
  ret i64 %13
}

; Function Attrs: nounwind uwtable
define double @Perl_sv_nv(%struct.sv* %sv) #0 {
entry:
  %retval = alloca double, align 8
  %sv.addr = alloca %struct.sv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 131072
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 0
  %3 = load i8*, i8** %sv_any, align 8
  %4 = bitcast i8* %3 to %struct.xpvnv*
  %xnv_nv = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %4, i32 0, i32 4
  %5 = load double, double* %xnv_nv, align 8
  store double %5, double* %retval
  br label %return

if.end:                                           ; preds = %entry
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call double @Perl_sv_2nv(%struct.sv* %6)
  store double %call, double* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %7 = load double, double* %retval
  ret double %7
}

; Function Attrs: nounwind uwtable
define i8* @Perl_sv_pv(%struct.sv* %sv) #0 {
entry:
  %retval = alloca i8*, align 8
  %sv.addr = alloca %struct.sv*, align 8
  %n_a = alloca i64, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 262144
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 0
  %3 = load i8*, i8** %sv_any, align 8
  %4 = bitcast i8* %3 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %4, i32 0, i32 0
  %5 = load i8*, i8** %xpv_pv, align 8
  store i8* %5, i8** %retval
  br label %return

if.end:                                           ; preds = %entry
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i8* @Perl_sv_2pv_flags(%struct.sv* %6, i64* %n_a, i32 2)
  store i8* %call, i8** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %7 = load i8*, i8** %retval
  ret i8* %7
}

; Function Attrs: nounwind uwtable
define i8* @Perl_sv_pvn(%struct.sv* %sv, i64* %lp) #0 {
entry:
  %retval = alloca i8*, align 8
  %sv.addr = alloca %struct.sv*, align 8
  %lp.addr = alloca i64*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i64* %lp, i64** %lp.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 262144
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 0
  %3 = load i8*, i8** %sv_any, align 8
  %4 = bitcast i8* %3 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %4, i32 0, i32 1
  %5 = load i64, i64* %xpv_cur, align 8
  %6 = load i64*, i64** %lp.addr, align 8
  store i64 %5, i64* %6, align 8
  %7 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any1 = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 0
  %8 = load i8*, i8** %sv_any1, align 8
  %9 = bitcast i8* %8 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %9, i32 0, i32 0
  %10 = load i8*, i8** %xpv_pv, align 8
  store i8* %10, i8** %retval
  br label %return

if.end:                                           ; preds = %entry
  %11 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %12 = load i64*, i64** %lp.addr, align 8
  %call = call i8* @Perl_sv_2pv_flags(%struct.sv* %11, i64* %12, i32 2)
  store i8* %call, i8** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %13 = load i8*, i8** %retval
  ret i8* %13
}

; Function Attrs: nounwind uwtable
define i8* @Perl_sv_pvn_nomg(%struct.sv* %sv, i64* %lp) #0 {
entry:
  %retval = alloca i8*, align 8
  %sv.addr = alloca %struct.sv*, align 8
  %lp.addr = alloca i64*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i64* %lp, i64** %lp.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 262144
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 0
  %3 = load i8*, i8** %sv_any, align 8
  %4 = bitcast i8* %3 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %4, i32 0, i32 1
  %5 = load i64, i64* %xpv_cur, align 8
  %6 = load i64*, i64** %lp.addr, align 8
  store i64 %5, i64* %6, align 8
  %7 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any1 = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 0
  %8 = load i8*, i8** %sv_any1, align 8
  %9 = bitcast i8* %8 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %9, i32 0, i32 0
  %10 = load i8*, i8** %xpv_pv, align 8
  store i8* %10, i8** %retval
  br label %return

if.end:                                           ; preds = %entry
  %11 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %12 = load i64*, i64** %lp.addr, align 8
  %call = call i8* @Perl_sv_2pv_flags(%struct.sv* %11, i64* %12, i32 0)
  store i8* %call, i8** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %13 = load i8*, i8** %retval
  ret i8* %13
}

; Function Attrs: nounwind uwtable
define i8* @Perl_sv_pvn_force(%struct.sv* %sv, i64* %lp) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %lp.addr = alloca i64*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i64* %lp, i64** %lp.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %1 = load i64*, i64** %lp.addr, align 8
  %call = call i8* @Perl_sv_pvn_force_flags(%struct.sv* %0, i64* %1, i32 2)
  ret i8* %call
}

; Function Attrs: nounwind uwtable
define i8* @Perl_sv_pvbyte(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call signext i8 @Perl_sv_utf8_downgrade(%struct.sv* %0, i8 signext 0)
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and = and i32 %2, 262144
  %cmp = icmp eq i32 %and, 262144
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 0
  %4 = load i8*, i8** %sv_any, align 8
  %5 = bitcast i8* %4 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %5, i32 0, i32 0
  %6 = load i8*, i8** %xpv_pv, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %7 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call1 = call i8* @Perl_sv_2pv_nolen(%struct.sv* %7)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %6, %cond.true ], [ %call1, %cond.false ]
  ret i8* %cond
}

; Function Attrs: nounwind uwtable
define i8* @Perl_sv_pvbyten(%struct.sv* %sv, i64* %lp) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %lp.addr = alloca i64*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i64* %lp, i64** %lp.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call signext i8 @Perl_sv_utf8_downgrade(%struct.sv* %0, i8 signext 0)
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %2 = load i64*, i64** %lp.addr, align 8
  %call1 = call i8* @Perl_sv_pvn(%struct.sv* %1, i64* %2)
  ret i8* %call1
}

; Function Attrs: nounwind uwtable
define i8* @Perl_sv_pvbyten_force(%struct.sv* %sv, i64* %lp) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %lp.addr = alloca i64*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i64* %lp, i64** %lp.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %1 = load i64*, i64** %lp.addr, align 8
  %call = call i8* @Perl_sv_pvn_force_flags(%struct.sv* %0, i64* %1, i32 2)
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call1 = call signext i8 @Perl_sv_utf8_downgrade(%struct.sv* %2, i8 signext 0)
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 0
  %4 = load i8*, i8** %sv_any, align 8
  %5 = bitcast i8* %4 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %5, i32 0, i32 1
  %6 = load i64, i64* %xpv_cur, align 8
  %7 = load i64*, i64** %lp.addr, align 8
  store i64 %6, i64* %7, align 8
  %8 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any2 = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 0
  %9 = load i8*, i8** %sv_any2, align 8
  %10 = bitcast i8* %9 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %10, i32 0, i32 0
  %11 = load i8*, i8** %xpv_pv, align 8
  ret i8* %11
}

; Function Attrs: nounwind uwtable
define i8* @Perl_sv_pvutf8(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i64 @Perl_sv_utf8_upgrade_flags(%struct.sv* %0, i32 2)
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and = and i32 %2, 262144
  %cmp = icmp eq i32 %and, 262144
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 0
  %4 = load i8*, i8** %sv_any, align 8
  %5 = bitcast i8* %4 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %5, i32 0, i32 0
  %6 = load i8*, i8** %xpv_pv, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %7 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call1 = call i8* @Perl_sv_2pv_nolen(%struct.sv* %7)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %6, %cond.true ], [ %call1, %cond.false ]
  ret i8* %cond
}

; Function Attrs: nounwind uwtable
define i8* @Perl_sv_pvutf8n(%struct.sv* %sv, i64* %lp) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %lp.addr = alloca i64*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i64* %lp, i64** %lp.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i64 @Perl_sv_utf8_upgrade_flags(%struct.sv* %0, i32 2)
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %2 = load i64*, i64** %lp.addr, align 8
  %call1 = call i8* @Perl_sv_pvn(%struct.sv* %1, i64* %2)
  ret i8* %call1
}

; Function Attrs: nounwind uwtable
define i8* @Perl_sv_pvutf8n_force(%struct.sv* %sv, i64* %lp) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %lp.addr = alloca i64*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i64* %lp, i64** %lp.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %1 = load i64*, i64** %lp.addr, align 8
  %call = call i8* @Perl_sv_pvn_force_flags(%struct.sv* %0, i64* %1, i32 2)
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call1 = call i64 @Perl_sv_utf8_upgrade_flags(%struct.sv* %2, i32 2)
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 0
  %4 = load i8*, i8** %sv_any, align 8
  %5 = bitcast i8* %4 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %5, i32 0, i32 1
  %6 = load i64, i64* %xpv_cur, align 8
  %7 = load i64*, i64** %lp.addr, align 8
  store i64 %6, i64* %7, align 8
  %8 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any2 = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 0
  %9 = load i8*, i8** %sv_any2, align 8
  %10 = bitcast i8* %9 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %10, i32 0, i32 0
  %11 = load i8*, i8** %xpv_pv, align 8
  ret i8* %11
}

; Function Attrs: nounwind uwtable
define i32 @Perl_sv_isobject(%struct.sv* %sv) #0 {
entry:
  %retval = alloca i32, align 4
  %sv.addr = alloca %struct.sv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and = and i32 %2, 8192
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %if.then.2, label %if.end.3

if.then.2:                                        ; preds = %if.end
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i32 @Perl_mg_get(%struct.sv* %3)
  br label %if.end.3

if.end.3:                                         ; preds = %if.then.2, %if.end
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags4 = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 2
  %5 = load i32, i32* %sv_flags4, align 4
  %and5 = and i32 %5, 524288
  %tobool6 = icmp ne i32 %and5, 0
  br i1 %tobool6, label %if.end.8, label %if.then.7

if.then.7:                                        ; preds = %if.end.3
  store i32 0, i32* %retval
  br label %return

if.end.8:                                         ; preds = %if.end.3
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 0
  %7 = load i8*, i8** %sv_any, align 8
  %8 = bitcast i8* %7 to %struct.xrv*
  %xrv_rv = getelementptr inbounds %struct.xrv, %struct.xrv* %8, i32 0, i32 0
  %9 = load %struct.sv*, %struct.sv** %xrv_rv, align 8
  store %struct.sv* %9, %struct.sv** %sv.addr, align 8
  %10 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags9 = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags9, align 4
  %and10 = and i32 %11, 4096
  %tobool11 = icmp ne i32 %and10, 0
  br i1 %tobool11, label %if.end.13, label %if.then.12

if.then.12:                                       ; preds = %if.end.8
  store i32 0, i32* %retval
  br label %return

if.end.13:                                        ; preds = %if.end.8
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.13, %if.then.12, %if.then.7, %if.then
  %12 = load i32, i32* %retval
  ret i32 %12
}

; Function Attrs: nounwind uwtable
define i32 @Perl_sv_isa(%struct.sv* %sv, i8* %name) #0 {
entry:
  %retval = alloca i32, align 4
  %sv.addr = alloca %struct.sv*, align 8
  %name.addr = alloca i8*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i8* %name, i8** %name.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and = and i32 %2, 8192
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %if.then.2, label %if.end.3

if.then.2:                                        ; preds = %if.end
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i32 @Perl_mg_get(%struct.sv* %3)
  br label %if.end.3

if.end.3:                                         ; preds = %if.then.2, %if.end
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags4 = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 2
  %5 = load i32, i32* %sv_flags4, align 4
  %and5 = and i32 %5, 524288
  %tobool6 = icmp ne i32 %and5, 0
  br i1 %tobool6, label %if.end.8, label %if.then.7

if.then.7:                                        ; preds = %if.end.3
  store i32 0, i32* %retval
  br label %return

if.end.8:                                         ; preds = %if.end.3
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 0
  %7 = load i8*, i8** %sv_any, align 8
  %8 = bitcast i8* %7 to %struct.xrv*
  %xrv_rv = getelementptr inbounds %struct.xrv, %struct.xrv* %8, i32 0, i32 0
  %9 = load %struct.sv*, %struct.sv** %xrv_rv, align 8
  store %struct.sv* %9, %struct.sv** %sv.addr, align 8
  %10 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags9 = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags9, align 4
  %and10 = and i32 %11, 4096
  %tobool11 = icmp ne i32 %and10, 0
  br i1 %tobool11, label %if.end.13, label %if.then.12

if.then.12:                                       ; preds = %if.end.8
  store i32 0, i32* %retval
  br label %return

if.end.13:                                        ; preds = %if.end.8
  %12 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any14 = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 0
  %13 = load i8*, i8** %sv_any14, align 8
  %14 = bitcast i8* %13 to %struct.xpvmg*
  %xmg_stash = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %14, i32 0, i32 6
  %15 = load %struct.hv*, %struct.hv** %xmg_stash, align 8
  %sv_any15 = getelementptr inbounds %struct.hv, %struct.hv* %15, i32 0, i32 0
  %16 = load %struct.xpvhv*, %struct.xpvhv** %sv_any15, align 8
  %xhv_name = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %16, i32 0, i32 10
  %17 = load i8*, i8** %xhv_name, align 8
  %tobool16 = icmp ne i8* %17, null
  br i1 %tobool16, label %if.end.18, label %if.then.17

if.then.17:                                       ; preds = %if.end.13
  store i32 0, i32* %retval
  br label %return

if.end.18:                                        ; preds = %if.end.13
  %18 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any19 = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 0
  %19 = load i8*, i8** %sv_any19, align 8
  %20 = bitcast i8* %19 to %struct.xpvmg*
  %xmg_stash20 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %20, i32 0, i32 6
  %21 = load %struct.hv*, %struct.hv** %xmg_stash20, align 8
  %sv_any21 = getelementptr inbounds %struct.hv, %struct.hv* %21, i32 0, i32 0
  %22 = load %struct.xpvhv*, %struct.xpvhv** %sv_any21, align 8
  %xhv_name22 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %22, i32 0, i32 10
  %23 = load i8*, i8** %xhv_name22, align 8
  %24 = load i8*, i8** %name.addr, align 8
  %call23 = call i32 @strcmp(i8* %23, i8* %24)
  %tobool24 = icmp ne i32 %call23, 0
  %lnot = xor i1 %tobool24, true
  %lnot.ext = zext i1 %lnot to i32
  store i32 %lnot.ext, i32* %retval
  br label %return

return:                                           ; preds = %if.end.18, %if.then.17, %if.then.12, %if.then.7, %if.then
  %25 = load i32, i32* %retval
  ret i32 %25
}

declare i32 @strcmp(i8*, i8*) #1

; Function Attrs: nounwind uwtable
define %struct.sv* @Perl_newSVrv(%struct.sv* %rv, i8* %classname) #0 {
entry:
  %rv.addr = alloca %struct.sv*, align 8
  %classname.addr = alloca i8*, align 8
  %sv = alloca %struct.sv*, align 8
  %tmp = alloca i32, align 4
  %tmp2 = alloca i32, align 4
  %refcnt = alloca i32, align 4
  %tmp41 = alloca i64, align 8
  %tmp43 = alloca i64, align 8
  %stash = alloca %struct.hv*, align 8
  store %struct.sv* %rv, %struct.sv** %rv.addr, align 8
  store i8* %classname, i8** %classname.addr, align 8
  %0 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  store %struct.sv* %1, %struct.sv** %sv, align 8
  %2 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 0
  %3 = load i8*, i8** %sv_any, align 8
  %4 = bitcast i8* %3 to %struct.sv*
  store %struct.sv* %4, %struct.sv** @PL_sv_root, align 8
  %5 = load i32, i32* @PL_sv_count, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* @PL_sv_count, align 4
  store i32 %inc, i32* %tmp
  %6 = load i32, i32* %tmp
  br label %if.end

if.else:                                          ; preds = %entry
  %call = call %struct.sv* @S_more_sv()
  store %struct.sv* %call, %struct.sv** %sv, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %7 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any1 = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 0
  store i8* null, i8** %sv_any1, align 8
  %8 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 1
  store i32 1, i32* %sv_refcnt, align 4
  %9 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 2
  store i32 0, i32* %sv_flags, align 4
  store i32 0, i32* %tmp2
  %10 = load i32, i32* %tmp2
  %11 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  %sv_flags3 = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 2
  %12 = load i32, i32* %sv_flags3, align 4
  %and = and i32 %12, 9961472
  %tobool4 = icmp ne i32 %and, 0
  br i1 %tobool4, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %if.end
  %13 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  call void @Perl_sv_force_normal(%struct.sv* %13)
  br label %if.end.6

if.end.6:                                         ; preds = %if.then.5, %if.end
  %14 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  %sv_flags7 = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 2
  %15 = load i32, i32* %sv_flags7, align 4
  %and8 = and i32 %15, -268435457
  store i32 %and8, i32* %sv_flags7, align 4
  %16 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  %sv_flags9 = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 2
  %17 = load i32, i32* %sv_flags9, align 4
  %and10 = and i32 %17, 255
  %cmp = icmp uge i32 %and10, 7
  br i1 %cmp, label %if.then.11, label %if.end.17

if.then.11:                                       ; preds = %if.end.6
  %18 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  %sv_refcnt13 = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 1
  %19 = load i32, i32* %sv_refcnt13, align 4
  store i32 %19, i32* %refcnt, align 4
  %20 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  %sv_refcnt14 = getelementptr inbounds %struct.sv, %struct.sv* %20, i32 0, i32 1
  store i32 0, i32* %sv_refcnt14, align 4
  %21 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  call void @Perl_sv_clear(%struct.sv* %21)
  %22 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  %sv_flags15 = getelementptr inbounds %struct.sv, %struct.sv* %22, i32 0, i32 2
  store i32 0, i32* %sv_flags15, align 4
  %23 = load i32, i32* %refcnt, align 4
  %24 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  %sv_refcnt16 = getelementptr inbounds %struct.sv, %struct.sv* %24, i32 0, i32 1
  store i32 %23, i32* %sv_refcnt16, align 4
  br label %if.end.17

if.end.17:                                        ; preds = %if.then.11, %if.end.6
  %25 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  %sv_flags18 = getelementptr inbounds %struct.sv, %struct.sv* %25, i32 0, i32 2
  %26 = load i32, i32* %sv_flags18, align 4
  %and19 = and i32 %26, 255
  %cmp20 = icmp ult i32 %and19, 3
  br i1 %cmp20, label %if.then.21, label %if.else.23

if.then.21:                                       ; preds = %if.end.17
  %27 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  %call22 = call signext i8 @Perl_sv_upgrade(%struct.sv* %27, i32 3)
  br label %if.end.47

if.else.23:                                       ; preds = %if.end.17
  %28 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  %sv_flags24 = getelementptr inbounds %struct.sv, %struct.sv* %28, i32 0, i32 2
  %29 = load i32, i32* %sv_flags24, align 4
  %and25 = and i32 %29, 255
  %cmp26 = icmp ugt i32 %and25, 3
  br i1 %cmp26, label %if.then.27, label %if.end.46

if.then.27:                                       ; preds = %if.else.23
  %30 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  %sv_flags28 = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 2
  %31 = load i32, i32* %sv_flags28, align 4
  %and29 = and i32 %31, 2097152
  %tobool30 = icmp ne i32 %and29, 0
  br i1 %tobool30, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then.27
  %32 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  %call31 = call i32 @Perl_sv_backoff(%struct.sv* %32)
  %tobool32 = icmp ne i32 %call31, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then.27
  %33 = phi i1 [ false, %if.then.27 ], [ %tobool32, %land.rhs ]
  %land.ext = zext i1 %33 to i32
  %34 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  %sv_any33 = getelementptr inbounds %struct.sv, %struct.sv* %34, i32 0, i32 0
  %35 = load i8*, i8** %sv_any33, align 8
  %36 = bitcast i8* %35 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %36, i32 0, i32 0
  %37 = load i8*, i8** %xpv_pv, align 8
  %tobool34 = icmp ne i8* %37, null
  br i1 %tobool34, label %land.lhs.true, label %if.end.40

land.lhs.true:                                    ; preds = %land.end
  %38 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  %sv_any35 = getelementptr inbounds %struct.sv, %struct.sv* %38, i32 0, i32 0
  %39 = load i8*, i8** %sv_any35, align 8
  %40 = bitcast i8* %39 to %struct.xpv*
  %xpv_len = getelementptr inbounds %struct.xpv, %struct.xpv* %40, i32 0, i32 2
  %41 = load i64, i64* %xpv_len, align 8
  %tobool36 = icmp ne i64 %41, 0
  br i1 %tobool36, label %if.then.37, label %if.end.40

if.then.37:                                       ; preds = %land.lhs.true
  %42 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  %sv_any38 = getelementptr inbounds %struct.sv, %struct.sv* %42, i32 0, i32 0
  %43 = load i8*, i8** %sv_any38, align 8
  %44 = bitcast i8* %43 to %struct.xpv*
  %xpv_pv39 = getelementptr inbounds %struct.xpv, %struct.xpv* %44, i32 0, i32 0
  %45 = load i8*, i8** %xpv_pv39, align 8
  call void @Perl_safesysfree(i8* %45)
  br label %if.end.40

if.end.40:                                        ; preds = %if.then.37, %land.lhs.true, %land.end
  %46 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  %sv_any42 = getelementptr inbounds %struct.sv, %struct.sv* %46, i32 0, i32 0
  %47 = load i8*, i8** %sv_any42, align 8
  %48 = bitcast i8* %47 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %48, i32 0, i32 1
  store i64 0, i64* %xpv_cur, align 8
  store i64 0, i64* %tmp41
  %49 = load i64, i64* %tmp41
  %50 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  %sv_any44 = getelementptr inbounds %struct.sv, %struct.sv* %50, i32 0, i32 0
  %51 = load i8*, i8** %sv_any44, align 8
  %52 = bitcast i8* %51 to %struct.xpv*
  %xpv_len45 = getelementptr inbounds %struct.xpv, %struct.xpv* %52, i32 0, i32 2
  store i64 0, i64* %xpv_len45, align 8
  store i64 0, i64* %tmp43
  %53 = load i64, i64* %tmp43
  br label %if.end.46

if.end.46:                                        ; preds = %if.end.40, %if.else.23
  br label %if.end.47

if.end.47:                                        ; preds = %if.end.46, %if.then.21
  %54 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  %sv_flags48 = getelementptr inbounds %struct.sv, %struct.sv* %54, i32 0, i32 2
  %55 = load i32, i32* %sv_flags48, align 4
  %and49 = and i32 %55, 1223753727
  store i32 %and49, i32* %sv_flags48, align 4
  %56 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  %sv_flags50 = getelementptr inbounds %struct.sv, %struct.sv* %56, i32 0, i32 2
  %57 = load i32, i32* %sv_flags50, align 4
  %and51 = and i32 %57, 2097152
  %tobool52 = icmp ne i32 %and51, 0
  br i1 %tobool52, label %land.rhs.53, label %land.end.56

land.rhs.53:                                      ; preds = %if.end.47
  %58 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  %call54 = call i32 @Perl_sv_backoff(%struct.sv* %58)
  %tobool55 = icmp ne i32 %call54, 0
  br label %land.end.56

land.end.56:                                      ; preds = %land.rhs.53, %if.end.47
  %59 = phi i1 [ false, %if.end.47 ], [ %tobool55, %land.rhs.53 ]
  %land.ext57 = zext i1 %59 to i32
  %60 = load %struct.sv*, %struct.sv** %sv, align 8
  %61 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  %sv_any58 = getelementptr inbounds %struct.sv, %struct.sv* %61, i32 0, i32 0
  %62 = load i8*, i8** %sv_any58, align 8
  %63 = bitcast i8* %62 to %struct.xrv*
  %xrv_rv = getelementptr inbounds %struct.xrv, %struct.xrv* %63, i32 0, i32 0
  store %struct.sv* %60, %struct.sv** %xrv_rv, align 8
  %64 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  %sv_flags59 = getelementptr inbounds %struct.sv, %struct.sv* %64, i32 0, i32 2
  %65 = load i32, i32* %sv_flags59, align 4
  %or = or i32 %65, 524288
  store i32 %or, i32* %sv_flags59, align 4
  %66 = load i8*, i8** %classname.addr, align 8
  %tobool60 = icmp ne i8* %66, null
  br i1 %tobool60, label %if.then.61, label %if.end.65

if.then.61:                                       ; preds = %land.end.56
  %67 = load i8*, i8** %classname.addr, align 8
  %call63 = call %struct.hv* @Perl_gv_stashpv(i8* %67, i32 1)
  store %struct.hv* %call63, %struct.hv** %stash, align 8
  %68 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  %69 = load %struct.hv*, %struct.hv** %stash, align 8
  %call64 = call %struct.sv* @Perl_sv_bless(%struct.sv* %68, %struct.hv* %69)
  br label %if.end.65

if.end.65:                                        ; preds = %if.then.61, %land.end.56
  %70 = load %struct.sv*, %struct.sv** %sv, align 8
  ret %struct.sv* %70
}

declare %struct.hv* @Perl_gv_stashpv(i8*, i32) #1

; Function Attrs: nounwind uwtable
define %struct.sv* @Perl_sv_bless(%struct.sv* %sv, %struct.hv* %stash) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %stash.addr = alloca %struct.hv*, align 8
  %tmpRef = alloca %struct.sv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store %struct.hv* %stash, %struct.hv** %stash.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 524288
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.57, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 0
  %3 = load i8*, i8** %sv_any, align 8
  %4 = bitcast i8* %3 to %struct.xrv*
  %xrv_rv = getelementptr inbounds %struct.xrv, %struct.xrv* %4, i32 0, i32 0
  %5 = load %struct.sv*, %struct.sv** %xrv_rv, align 8
  store %struct.sv* %5, %struct.sv** %tmpRef, align 8
  %6 = load %struct.sv*, %struct.sv** %tmpRef, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 2
  %7 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %7, 8392704
  %tobool3 = icmp ne i32 %and2, 0
  br i1 %tobool3, label %if.then.4, label %if.end.20

if.then.4:                                        ; preds = %if.end
  %8 = load %struct.sv*, %struct.sv** %tmpRef, align 8
  %sv_flags5 = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 2
  %9 = load i32, i32* %sv_flags5, align 4
  %and6 = and i32 %9, 8388608
  %tobool7 = icmp ne i32 %and6, 0
  br i1 %tobool7, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %if.then.4
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_modify, i32 0, i32 0))
  br label %if.end.9

if.end.9:                                         ; preds = %if.then.8, %if.then.4
  %10 = load %struct.sv*, %struct.sv** %tmpRef, align 8
  %sv_flags10 = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags10, align 4
  %and11 = and i32 %11, 4096
  %tobool12 = icmp ne i32 %and11, 0
  br i1 %tobool12, label %if.then.13, label %if.end.19

if.then.13:                                       ; preds = %if.end.9
  %12 = load %struct.sv*, %struct.sv** %tmpRef, align 8
  %sv_flags14 = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 2
  %13 = load i32, i32* %sv_flags14, align 4
  %and15 = and i32 %13, 255
  %cmp = icmp ne i32 %and15, 15
  br i1 %cmp, label %if.then.16, label %if.end.17

if.then.16:                                       ; preds = %if.then.13
  %14 = load i32, i32* @PL_sv_objcount, align 4
  %dec = add nsw i32 %14, -1
  store i32 %dec, i32* @PL_sv_objcount, align 4
  br label %if.end.17

if.end.17:                                        ; preds = %if.then.16, %if.then.13
  %15 = load %struct.sv*, %struct.sv** %tmpRef, align 8
  %sv_any18 = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 0
  %16 = load i8*, i8** %sv_any18, align 8
  %17 = bitcast i8* %16 to %struct.xpvmg*
  %xmg_stash = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %17, i32 0, i32 6
  %18 = load %struct.hv*, %struct.hv** %xmg_stash, align 8
  %19 = bitcast %struct.hv* %18 to %struct.sv*
  call void @Perl_sv_free(%struct.sv* %19)
  br label %if.end.19

if.end.19:                                        ; preds = %if.end.17, %if.end.9
  br label %if.end.20

if.end.20:                                        ; preds = %if.end.19, %if.end
  %20 = load %struct.sv*, %struct.sv** %tmpRef, align 8
  %sv_flags21 = getelementptr inbounds %struct.sv, %struct.sv* %20, i32 0, i32 2
  %21 = load i32, i32* %sv_flags21, align 4
  %or = or i32 %21, 4096
  store i32 %or, i32* %sv_flags21, align 4
  %22 = load %struct.sv*, %struct.sv** %tmpRef, align 8
  %sv_flags22 = getelementptr inbounds %struct.sv, %struct.sv* %22, i32 0, i32 2
  %23 = load i32, i32* %sv_flags22, align 4
  %and23 = and i32 %23, 255
  %cmp24 = icmp ne i32 %and23, 15
  br i1 %cmp24, label %if.then.25, label %if.end.26

if.then.25:                                       ; preds = %if.end.20
  %24 = load i32, i32* @PL_sv_objcount, align 4
  %inc = add nsw i32 %24, 1
  store i32 %inc, i32* @PL_sv_objcount, align 4
  br label %if.end.26

if.end.26:                                        ; preds = %if.then.25, %if.end.20
  %25 = load %struct.sv*, %struct.sv** %tmpRef, align 8
  %sv_flags27 = getelementptr inbounds %struct.sv, %struct.sv* %25, i32 0, i32 2
  %26 = load i32, i32* %sv_flags27, align 4
  %and28 = and i32 %26, 255
  %cmp29 = icmp uge i32 %and28, 7
  br i1 %cmp29, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.end.26
  %27 = load %struct.sv*, %struct.sv** %tmpRef, align 8
  %call = call signext i8 @Perl_sv_upgrade(%struct.sv* %27, i32 7)
  %conv = sext i8 %call to i32
  %tobool30 = icmp ne i32 %conv, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.end.26
  %28 = phi i1 [ true, %if.end.26 ], [ %tobool30, %lor.rhs ]
  %lor.ext = zext i1 %28 to i32
  %29 = load %struct.hv*, %struct.hv** %stash.addr, align 8
  %30 = bitcast %struct.hv* %29 to %struct.sv*
  store %struct.sv* %30, %struct.sv** @PL_Sv, align 8
  %31 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %tobool31 = icmp ne %struct.sv* %31, null
  br i1 %tobool31, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %lor.end
  %32 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 1
  %33 = load i32, i32* %sv_refcnt, align 4
  %inc32 = add i32 %33, 1
  store i32 %inc32, i32* %sv_refcnt, align 4
  %tobool33 = icmp ne i32 %inc32, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.end
  %34 = phi i1 [ false, %lor.end ], [ %tobool33, %land.rhs ]
  %land.ext = zext i1 %34 to i32
  %35 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %36 = bitcast %struct.sv* %35 to %struct.hv*
  %37 = load %struct.sv*, %struct.sv** %tmpRef, align 8
  %sv_any34 = getelementptr inbounds %struct.sv, %struct.sv* %37, i32 0, i32 0
  %38 = load i8*, i8** %sv_any34, align 8
  %39 = bitcast i8* %38 to %struct.xpvmg*
  %xmg_stash35 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %39, i32 0, i32 6
  store %struct.hv* %36, %struct.hv** %xmg_stash35, align 8
  %40 = load i64, i64* @PL_amagic_generation, align 8
  %tobool36 = icmp ne i64 %40, 0
  br i1 %tobool36, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %land.end
  %41 = load %struct.hv*, %struct.hv** %stash.addr, align 8
  %call37 = call signext i8 @Perl_Gv_AMupdate(%struct.hv* %41)
  %conv38 = sext i8 %call37 to i32
  %tobool39 = icmp ne i32 %conv38, 0
  br i1 %tobool39, label %if.then.40, label %if.else

if.then.40:                                       ; preds = %land.lhs.true
  %42 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags41 = getelementptr inbounds %struct.sv, %struct.sv* %42, i32 0, i32 2
  %43 = load i32, i32* %sv_flags41, align 4
  %or42 = or i32 %43, 268435456
  store i32 %or42, i32* %sv_flags41, align 4
  br label %if.end.45

if.else:                                          ; preds = %land.lhs.true, %land.end
  %44 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags43 = getelementptr inbounds %struct.sv, %struct.sv* %44, i32 0, i32 2
  %45 = load i32, i32* %sv_flags43, align 4
  %and44 = and i32 %45, -268435457
  store i32 %and44, i32* %sv_flags43, align 4
  br label %if.end.45

if.end.45:                                        ; preds = %if.else, %if.then.40
  %46 = load %struct.sv*, %struct.sv** %tmpRef, align 8
  %sv_flags46 = getelementptr inbounds %struct.sv, %struct.sv* %46, i32 0, i32 2
  %47 = load i32, i32* %sv_flags46, align 4
  %and47 = and i32 %47, 16384
  %tobool48 = icmp ne i32 %and47, 0
  br i1 %tobool48, label %if.then.49, label %if.end.57

if.then.49:                                       ; preds = %if.end.45
  %48 = load %struct.sv*, %struct.sv** %tmpRef, align 8
  %call50 = call %struct.magic* @Perl_mg_find(%struct.sv* %48, i32 126)
  %tobool51 = icmp ne %struct.magic* %call50, null
  br i1 %tobool51, label %if.then.54, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then.49
  %49 = load %struct.sv*, %struct.sv** %tmpRef, align 8
  %call52 = call %struct.magic* @Perl_mg_find(%struct.sv* %49, i32 85)
  %tobool53 = icmp ne %struct.magic* %call52, null
  br i1 %tobool53, label %if.then.54, label %if.end.56

if.then.54:                                       ; preds = %lor.lhs.false, %if.then.49
  %50 = load %struct.sv*, %struct.sv** %tmpRef, align 8
  %call55 = call i32 @Perl_mg_set(%struct.sv* %50)
  br label %if.end.56

if.end.56:                                        ; preds = %if.then.54, %lor.lhs.false
  br label %if.end.57

if.end.57:                                        ; preds = %if.end.56, %if.end.45
  %51 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  ret %struct.sv* %51
}

; Function Attrs: nounwind uwtable
define %struct.sv* @Perl_sv_setref_pv(%struct.sv* %rv, i8* %classname, i8* %pv) #0 {
entry:
  %rv.addr = alloca %struct.sv*, align 8
  %classname.addr = alloca i8*, align 8
  %pv.addr = alloca i8*, align 8
  store %struct.sv* %rv, %struct.sv** %rv.addr, align 8
  store i8* %classname, i8** %classname.addr, align 8
  store i8* %pv, i8** %pv.addr, align 8
  %0 = load i8*, i8** %pv.addr, align 8
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  call void @Perl_sv_setsv_flags(%struct.sv* %1, %struct.sv* @PL_sv_undef, i32 2)
  %2 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags, align 4
  %and = and i32 %3, 16384
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %if.then.2, label %if.end

if.then.2:                                        ; preds = %if.then
  %4 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  %call = call i32 @Perl_mg_set(%struct.sv* %4)
  br label %if.end

if.end:                                           ; preds = %if.then.2, %if.then
  br label %if.end.4

if.else:                                          ; preds = %entry
  %5 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  %6 = load i8*, i8** %classname.addr, align 8
  %call3 = call %struct.sv* @Perl_newSVrv(%struct.sv* %5, i8* %6)
  %7 = load i8*, i8** %pv.addr, align 8
  %8 = ptrtoint i8* %7 to i64
  call void @Perl_sv_setiv(%struct.sv* %call3, i64 %8)
  br label %if.end.4

if.end.4:                                         ; preds = %if.else, %if.end
  %9 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  ret %struct.sv* %9
}

; Function Attrs: nounwind uwtable
define %struct.sv* @Perl_sv_setref_iv(%struct.sv* %rv, i8* %classname, i64 %iv) #0 {
entry:
  %rv.addr = alloca %struct.sv*, align 8
  %classname.addr = alloca i8*, align 8
  %iv.addr = alloca i64, align 8
  store %struct.sv* %rv, %struct.sv** %rv.addr, align 8
  store i8* %classname, i8** %classname.addr, align 8
  store i64 %iv, i64* %iv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  %1 = load i8*, i8** %classname.addr, align 8
  %call = call %struct.sv* @Perl_newSVrv(%struct.sv* %0, i8* %1)
  %2 = load i64, i64* %iv.addr, align 8
  call void @Perl_sv_setiv(%struct.sv* %call, i64 %2)
  %3 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  ret %struct.sv* %3
}

; Function Attrs: nounwind uwtable
define %struct.sv* @Perl_sv_setref_uv(%struct.sv* %rv, i8* %classname, i64 %uv) #0 {
entry:
  %rv.addr = alloca %struct.sv*, align 8
  %classname.addr = alloca i8*, align 8
  %uv.addr = alloca i64, align 8
  store %struct.sv* %rv, %struct.sv** %rv.addr, align 8
  store i8* %classname, i8** %classname.addr, align 8
  store i64 %uv, i64* %uv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  %1 = load i8*, i8** %classname.addr, align 8
  %call = call %struct.sv* @Perl_newSVrv(%struct.sv* %0, i8* %1)
  %2 = load i64, i64* %uv.addr, align 8
  call void @Perl_sv_setuv(%struct.sv* %call, i64 %2)
  %3 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  ret %struct.sv* %3
}

; Function Attrs: nounwind uwtable
define %struct.sv* @Perl_sv_setref_nv(%struct.sv* %rv, i8* %classname, double %nv) #0 {
entry:
  %rv.addr = alloca %struct.sv*, align 8
  %classname.addr = alloca i8*, align 8
  %nv.addr = alloca double, align 8
  store %struct.sv* %rv, %struct.sv** %rv.addr, align 8
  store i8* %classname, i8** %classname.addr, align 8
  store double %nv, double* %nv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  %1 = load i8*, i8** %classname.addr, align 8
  %call = call %struct.sv* @Perl_newSVrv(%struct.sv* %0, i8* %1)
  %2 = load double, double* %nv.addr, align 8
  call void @Perl_sv_setnv(%struct.sv* %call, double %2)
  %3 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  ret %struct.sv* %3
}

; Function Attrs: nounwind uwtable
define %struct.sv* @Perl_sv_setref_pvn(%struct.sv* %rv, i8* %classname, i8* %pv, i64 %n) #0 {
entry:
  %rv.addr = alloca %struct.sv*, align 8
  %classname.addr = alloca i8*, align 8
  %pv.addr = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  store %struct.sv* %rv, %struct.sv** %rv.addr, align 8
  store i8* %classname, i8** %classname.addr, align 8
  store i8* %pv, i8** %pv.addr, align 8
  store i64 %n, i64* %n.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  %1 = load i8*, i8** %classname.addr, align 8
  %call = call %struct.sv* @Perl_newSVrv(%struct.sv* %0, i8* %1)
  %2 = load i8*, i8** %pv.addr, align 8
  %3 = load i64, i64* %n.addr, align 8
  call void @Perl_sv_setpvn(%struct.sv* %call, i8* %2, i64 %3)
  %4 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  ret %struct.sv* %4
}

declare signext i8 @Perl_Gv_AMupdate(%struct.hv*) #1

; Function Attrs: nounwind uwtable
define void @Perl_sv_untaint(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %mg = alloca %struct.magic*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 255
  %cmp = icmp uge i32 %and, 7
  br i1 %cmp, label %land.lhs.true, label %if.end.4

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 0
  %3 = load i8*, i8** %sv_any, align 8
  %4 = bitcast i8* %3 to %struct.xpvmg*
  %xmg_magic = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %4, i32 0, i32 5
  %5 = load %struct.magic*, %struct.magic** %xmg_magic, align 8
  %tobool = icmp ne %struct.magic* %5, null
  br i1 %tobool, label %if.then, label %if.end.4

if.then:                                          ; preds = %land.lhs.true
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call %struct.magic* @Perl_mg_find(%struct.sv* %6, i32 116)
  store %struct.magic* %call, %struct.magic** %mg, align 8
  %7 = load %struct.magic*, %struct.magic** %mg, align 8
  %tobool1 = icmp ne %struct.magic* %7, null
  br i1 %tobool1, label %if.then.2, label %if.end

if.then.2:                                        ; preds = %if.then
  %8 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_len = getelementptr inbounds %struct.magic, %struct.magic* %8, i32 0, i32 7
  %9 = load i32, i32* %mg_len, align 4
  %and3 = and i32 %9, -2
  store i32 %and3, i32* %mg_len, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.2, %if.then
  br label %if.end.4

if.end.4:                                         ; preds = %if.end, %land.lhs.true, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define void @Perl_sv_setpviv(%struct.sv* %sv, i64 %iv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %iv.addr = alloca i64, align 8
  %buf = alloca [22 x i8], align 16
  %ebuf = alloca i8*, align 8
  %ptr = alloca i8*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i64 %iv, i64* %iv.addr, align 8
  %arraydecay = getelementptr inbounds [22 x i8], [22 x i8]* %buf, i32 0, i32 0
  %0 = load i64, i64* %iv.addr, align 8
  %call = call i8* @uiv_2buf(i8* %arraydecay, i64 %0, i64 0, i32 0, i8** %ebuf)
  store i8* %call, i8** %ptr, align 8
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %2 = load i8*, i8** %ptr, align 8
  %3 = load i8*, i8** %ebuf, align 8
  %4 = load i8*, i8** %ptr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %3 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %4 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  call void @Perl_sv_setpvn(%struct.sv* %1, i8* %2, i64 %sub.ptr.sub)
  ret void
}

; Function Attrs: nounwind uwtable
define void @Perl_sv_setpviv_mg(%struct.sv* %sv, i64 %iv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %iv.addr = alloca i64, align 8
  %buf = alloca [22 x i8], align 16
  %ebuf = alloca i8*, align 8
  %ptr = alloca i8*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i64 %iv, i64* %iv.addr, align 8
  %arraydecay = getelementptr inbounds [22 x i8], [22 x i8]* %buf, i32 0, i32 0
  %0 = load i64, i64* %iv.addr, align 8
  %call = call i8* @uiv_2buf(i8* %arraydecay, i64 %0, i64 0, i32 0, i8** %ebuf)
  store i8* %call, i8** %ptr, align 8
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %2 = load i8*, i8** %ptr, align 8
  %3 = load i8*, i8** %ebuf, align 8
  %4 = load i8*, i8** %ptr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %3 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %4 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  call void @Perl_sv_setpvn(%struct.sv* %1, i8* %2, i64 %sub.ptr.sub)
  %5 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 2
  %6 = load i32, i32* %sv_flags, align 4
  %and = and i32 %6, 16384
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %7 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call1 = call i32 @Perl_mg_set(%struct.sv* %7)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define void @Perl_sv_vsetpvf(%struct.sv* %sv, i8* %pat, [1 x %struct.__va_list_tag]* %args) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %pat.addr = alloca i8*, align 8
  %args.addr = alloca [1 x %struct.__va_list_tag]*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i8* %pat, i8** %pat.addr, align 8
  store [1 x %struct.__va_list_tag]* %args, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %1 = load i8*, i8** %pat.addr, align 8
  %2 = load i8*, i8** %pat.addr, align 8
  %call = call i64 @strlen(i8* %2)
  %3 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  call void @Perl_sv_vsetpvfn(%struct.sv* %0, i8* %1, i64 %call, [1 x %struct.__va_list_tag]* %3, %struct.sv** null, i32 0, i8* null)
  ret void
}

; Function Attrs: nounwind uwtable
define void @Perl_sv_setpvf_mg(%struct.sv* %sv, i8* %pat, ...) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %pat.addr = alloca i8*, align 8
  %args = alloca [1 x %struct.__va_list_tag], align 16
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i8* %pat, i8** %pat.addr, align 8
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %args, i32 0, i32 0
  %arraydecay1 = bitcast %struct.__va_list_tag* %arraydecay to i8*
  call void @llvm.va_start(i8* %arraydecay1)
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %1 = load i8*, i8** %pat.addr, align 8
  call void @Perl_sv_vsetpvf_mg(%struct.sv* %0, i8* %1, [1 x %struct.__va_list_tag]* %args)
  %arraydecay2 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %args, i32 0, i32 0
  %arraydecay23 = bitcast %struct.__va_list_tag* %arraydecay2 to i8*
  call void @llvm.va_end(i8* %arraydecay23)
  ret void
}

; Function Attrs: nounwind uwtable
define void @Perl_sv_vsetpvf_mg(%struct.sv* %sv, i8* %pat, [1 x %struct.__va_list_tag]* %args) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %pat.addr = alloca i8*, align 8
  %args.addr = alloca [1 x %struct.__va_list_tag]*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i8* %pat, i8** %pat.addr, align 8
  store [1 x %struct.__va_list_tag]* %args, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %1 = load i8*, i8** %pat.addr, align 8
  %2 = load i8*, i8** %pat.addr, align 8
  %call = call i64 @strlen(i8* %2)
  %3 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  call void @Perl_sv_vsetpvfn(%struct.sv* %0, i8* %1, i64 %call, [1 x %struct.__va_list_tag]* %3, %struct.sv** null, i32 0, i8* null)
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 2
  %5 = load i32, i32* %sv_flags, align 4
  %and = and i32 %5, 16384
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call1 = call i32 @Perl_mg_set(%struct.sv* %6)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define void @Perl_sv_catpvf(%struct.sv* %sv, i8* %pat, ...) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %pat.addr = alloca i8*, align 8
  %args = alloca [1 x %struct.__va_list_tag], align 16
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i8* %pat, i8** %pat.addr, align 8
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %args, i32 0, i32 0
  %arraydecay1 = bitcast %struct.__va_list_tag* %arraydecay to i8*
  call void @llvm.va_start(i8* %arraydecay1)
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %1 = load i8*, i8** %pat.addr, align 8
  call void @Perl_sv_vcatpvf(%struct.sv* %0, i8* %1, [1 x %struct.__va_list_tag]* %args)
  %arraydecay2 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %args, i32 0, i32 0
  %arraydecay23 = bitcast %struct.__va_list_tag* %arraydecay2 to i8*
  call void @llvm.va_end(i8* %arraydecay23)
  ret void
}

; Function Attrs: nounwind uwtable
define void @Perl_sv_vcatpvf(%struct.sv* %sv, i8* %pat, [1 x %struct.__va_list_tag]* %args) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %pat.addr = alloca i8*, align 8
  %args.addr = alloca [1 x %struct.__va_list_tag]*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i8* %pat, i8** %pat.addr, align 8
  store [1 x %struct.__va_list_tag]* %args, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %1 = load i8*, i8** %pat.addr, align 8
  %2 = load i8*, i8** %pat.addr, align 8
  %call = call i64 @strlen(i8* %2)
  %3 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  call void @Perl_sv_vcatpvfn(%struct.sv* %0, i8* %1, i64 %call, [1 x %struct.__va_list_tag]* %3, %struct.sv** null, i32 0, i8* null)
  ret void
}

; Function Attrs: nounwind uwtable
define void @Perl_sv_vcatpvfn(%struct.sv* %sv, i8* %pat, i64 %patlen, [1 x %struct.__va_list_tag]* %args, %struct.sv** %svargs, i32 %svmax, i8* %maybe_tainted) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %pat.addr = alloca i8*, align 8
  %patlen.addr = alloca i64, align 8
  %args.addr = alloca [1 x %struct.__va_list_tag]*, align 8
  %svargs.addr = alloca %struct.sv**, align 8
  %svmax.addr = alloca i32, align 4
  %maybe_tainted.addr = alloca i8*, align 8
  %p = alloca i8*, align 8
  %q = alloca i8*, align 8
  %patend = alloca i8*, align 8
  %origlen = alloca i64, align 8
  %svix = alloca i32, align 4
  %argsv = alloca %struct.sv*, align 8
  %has_utf8 = alloca i8, align 1
  %pat_utf8 = alloca i8, align 1
  %nsv = alloca %struct.sv*, align 8
  %ebuf = alloca [127 x i8], align 16
  %s = alloca i8*, align 8
  %digits = alloca i32, align 4
  %pp = alloca i8*, align 8
  %nv = alloca double, align 8
  %l = alloca i64, align 8
  %alt = alloca i8, align 1
  %left = alloca i8, align 1
  %vectorize = alloca i8, align 1
  %vectorarg = alloca i8, align 1
  %vec_utf8 = alloca i8, align 1
  %fill = alloca i8, align 1
  %plus = alloca i8, align 1
  %intsize = alloca i8, align 1
  %width = alloca i64, align 8
  %zeros = alloca i64, align 8
  %has_precis = alloca i8, align 1
  %precis = alloca i64, align 8
  %osvix = alloca i32, align 4
  %is_utf8 = alloca i8, align 1
  %esignbuf = alloca [4 x i8], align 1
  %utf8buf = alloca [14 x i8], align 1
  %esignlen = alloca i64, align 8
  %eptr = alloca i8*, align 8
  %elen = alloca i64, align 8
  %vecsv = alloca %struct.sv*, align 8
  %vecstr = alloca i8*, align 8
  %veclen = alloca i64, align 8
  %c = alloca i8, align 1
  %i = alloca i32, align 4
  %base = alloca i32, align 4
  %iv = alloca i64, align 8
  %uv = alloca i64, align 8
  %nv186 = alloca x86_fp80, align 16
  %have = alloca i64, align 8
  %need = alloca i64, align 8
  %gap = alloca i64, align 8
  %dotstr = alloca i8*, align 8
  %dotstrlen = alloca i64, align 8
  %efix = alloca i32, align 4
  %ewix = alloca i32, align 4
  %epix = alloca i32, align 4
  %evix = alloca i32, align 4
  %asterisk = alloca i8, align 1
  %p760 = alloca i32, align 4
  %ulen = alloca i64, align 8
  %tiv = alloca i64, align 8
  %ulen985 = alloca i64, align 8
  %tuv = alloca i64, align 8
  %dig = alloca i32, align 4
  %p1343 = alloca i8*, align 8
  %msg = alloca %struct.sv*, align 8
  %nsv1617 = alloca %struct.sv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i8* %pat, i8** %pat.addr, align 8
  store i64 %patlen, i64* %patlen.addr, align 8
  store [1 x %struct.__va_list_tag]* %args, [1 x %struct.__va_list_tag]** %args.addr, align 8
  store %struct.sv** %svargs, %struct.sv*** %svargs.addr, align 8
  store i32 %svmax, i32* %svmax.addr, align 4
  store i8* %maybe_tainted, i8** %maybe_tainted.addr, align 8
  store i32 0, i32* %svix, align 4
  store %struct.sv* null, %struct.sv** %argsv, align 8
  store %struct.sv* null, %struct.sv** %nsv, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 536870912
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %2 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %op_private = getelementptr inbounds %struct.cop, %struct.cop* %2, i32 0, i32 7
  %3 = load i8, i8* %op_private, align 1
  %conv = zext i8 %3 to i32
  %and1 = and i32 %conv, 8
  %tobool2 = icmp ne i32 %and1, 0
  %lnot = xor i1 %tobool2, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %lnot, %land.rhs ]
  %land.ext = zext i1 %4 to i32
  %conv3 = trunc i32 %land.ext to i8
  store i8 %conv3, i8* %pat_utf8, align 1
  store i8 %conv3, i8* %has_utf8, align 1
  %5 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags4 = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 2
  %6 = load i32, i32* %sv_flags4, align 4
  %and5 = and i32 %6, 10223616
  %cmp = icmp eq i32 %and5, 262144
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.end
  %7 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 0
  %8 = load i8*, i8** %sv_any, align 8
  %9 = bitcast i8* %8 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %9, i32 0, i32 1
  %10 = load i64, i64* %xpv_cur, align 8
  store i64 %10, i64* %origlen, align 8
  %11 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any7 = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 0
  %12 = load i8*, i8** %sv_any7, align 8
  %13 = bitcast i8* %12 to %struct.xpv*
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %13, i32 0, i32 0
  %14 = load i8*, i8** %xpv_pv, align 8
  br label %cond.end

cond.false:                                       ; preds = %land.end
  %15 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i8* @Perl_sv_pvn_force_flags(%struct.sv* %15, i64* %origlen, i32 2)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %14, %cond.true ], [ %call, %cond.false ]
  %16 = load i64, i64* %patlen.addr, align 8
  %cmp8 = icmp eq i64 %16, 0
  br i1 %cmp8, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  br label %for.end.1827

if.end:                                           ; preds = %cond.end
  %17 = load i64, i64* %patlen.addr, align 8
  %cmp10 = icmp eq i64 %17, 2
  br i1 %cmp10, label %land.lhs.true, label %if.end.69

land.lhs.true:                                    ; preds = %if.end
  %18 = load i8*, i8** %pat.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %18, i64 0
  %19 = load i8, i8* %arrayidx, align 1
  %conv12 = sext i8 %19 to i32
  %cmp13 = icmp eq i32 %conv12, 37
  br i1 %cmp13, label %if.then.15, label %if.end.69

if.then.15:                                       ; preds = %land.lhs.true
  %20 = load i8*, i8** %pat.addr, align 8
  %arrayidx16 = getelementptr inbounds i8, i8* %20, i64 1
  %21 = load i8, i8* %arrayidx16, align 1
  %conv17 = sext i8 %21 to i32
  switch i32 %conv17, label %sw.epilog [
    i32 115, label %sw.bb
    i32 95, label %sw.bb.41
  ]

sw.bb:                                            ; preds = %if.then.15
  %22 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %tobool18 = icmp ne [1 x %struct.__va_list_tag]* %22, null
  br i1 %tobool18, label %if.then.19, label %if.else

if.then.19:                                       ; preds = %sw.bb
  %23 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %23, i32 0, i32 0
  %gp_offset_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay, i32 0, i32 0
  %gp_offset = load i32, i32* %gp_offset_p
  %fits_in_gp = icmp ule i32 %gp_offset, 40
  br i1 %fits_in_gp, label %vaarg.in_reg, label %vaarg.in_mem

vaarg.in_reg:                                     ; preds = %if.then.19
  %24 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay, i32 0, i32 3
  %reg_save_area = load i8*, i8** %24
  %25 = getelementptr i8, i8* %reg_save_area, i32 %gp_offset
  %26 = bitcast i8* %25 to i8**
  %27 = add i32 %gp_offset, 8
  store i32 %27, i32* %gp_offset_p
  br label %vaarg.end

vaarg.in_mem:                                     ; preds = %if.then.19
  %overflow_arg_area_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay, i32 0, i32 2
  %overflow_arg_area = load i8*, i8** %overflow_arg_area_p
  %28 = bitcast i8* %overflow_arg_area to i8**
  %overflow_arg_area.next = getelementptr i8, i8* %overflow_arg_area, i32 8
  store i8* %overflow_arg_area.next, i8** %overflow_arg_area_p
  br label %vaarg.end

vaarg.end:                                        ; preds = %vaarg.in_mem, %vaarg.in_reg
  %vaarg.addr = phi i8** [ %26, %vaarg.in_reg ], [ %28, %vaarg.in_mem ]
  %29 = load i8*, i8** %vaarg.addr
  store i8* %29, i8** %s, align 8
  %30 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %31 = load i8*, i8** %s, align 8
  %tobool20 = icmp ne i8* %31, null
  br i1 %tobool20, label %cond.true.21, label %cond.false.22

cond.true.21:                                     ; preds = %vaarg.end
  %32 = load i8*, i8** %s, align 8
  br label %cond.end.23

cond.false.22:                                    ; preds = %vaarg.end
  br label %cond.end.23

cond.end.23:                                      ; preds = %cond.false.22, %cond.true.21
  %cond24 = phi i8* [ %32, %cond.true.21 ], [ getelementptr inbounds ([7 x i8], [7 x i8]* @Perl_sv_vcatpvfn.nullstr, i32 0, i32 0), %cond.false.22 ]
  call void @Perl_sv_catpv(%struct.sv* %30, i8* %cond24)
  br label %if.end.40

if.else:                                          ; preds = %sw.bb
  %33 = load i32, i32* %svix, align 4
  %34 = load i32, i32* %svmax.addr, align 4
  %cmp25 = icmp slt i32 %33, %34
  br i1 %cmp25, label %if.then.27, label %if.end.39

if.then.27:                                       ; preds = %if.else
  %35 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %36 = load %struct.sv**, %struct.sv*** %svargs.addr, align 8
  %37 = load %struct.sv*, %struct.sv** %36, align 8
  call void @Perl_sv_catsv_flags(%struct.sv* %35, %struct.sv* %37, i32 2)
  %38 = load %struct.sv**, %struct.sv*** %svargs.addr, align 8
  %39 = load %struct.sv*, %struct.sv** %38, align 8
  %sv_flags28 = getelementptr inbounds %struct.sv, %struct.sv* %39, i32 0, i32 2
  %40 = load i32, i32* %sv_flags28, align 4
  %and29 = and i32 %40, 536870912
  %tobool30 = icmp ne i32 %and29, 0
  br i1 %tobool30, label %land.lhs.true.31, label %if.end.38

land.lhs.true.31:                                 ; preds = %if.then.27
  %41 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %op_private32 = getelementptr inbounds %struct.cop, %struct.cop* %41, i32 0, i32 7
  %42 = load i8, i8* %op_private32, align 1
  %conv33 = zext i8 %42 to i32
  %and34 = and i32 %conv33, 8
  %tobool35 = icmp ne i32 %and34, 0
  br i1 %tobool35, label %if.end.38, label %if.then.36

if.then.36:                                       ; preds = %land.lhs.true.31
  %43 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags37 = getelementptr inbounds %struct.sv, %struct.sv* %43, i32 0, i32 2
  %44 = load i32, i32* %sv_flags37, align 4
  %or = or i32 %44, 536870912
  store i32 %or, i32* %sv_flags37, align 4
  br label %if.end.38

if.end.38:                                        ; preds = %if.then.36, %land.lhs.true.31, %if.then.27
  br label %if.end.39

if.end.39:                                        ; preds = %if.end.38, %if.else
  br label %if.end.40

if.end.40:                                        ; preds = %if.end.39, %cond.end.23
  br label %for.end.1827

sw.bb.41:                                         ; preds = %if.then.15
  %45 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %tobool42 = icmp ne [1 x %struct.__va_list_tag]* %45, null
  br i1 %tobool42, label %if.then.43, label %if.end.68

if.then.43:                                       ; preds = %sw.bb.41
  %46 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay44 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %46, i32 0, i32 0
  %gp_offset_p45 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay44, i32 0, i32 0
  %gp_offset46 = load i32, i32* %gp_offset_p45
  %fits_in_gp47 = icmp ule i32 %gp_offset46, 40
  br i1 %fits_in_gp47, label %vaarg.in_reg.48, label %vaarg.in_mem.50

vaarg.in_reg.48:                                  ; preds = %if.then.43
  %47 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay44, i32 0, i32 3
  %reg_save_area49 = load i8*, i8** %47
  %48 = getelementptr i8, i8* %reg_save_area49, i32 %gp_offset46
  %49 = bitcast i8* %48 to %struct.sv**
  %50 = add i32 %gp_offset46, 8
  store i32 %50, i32* %gp_offset_p45
  br label %vaarg.end.54

vaarg.in_mem.50:                                  ; preds = %if.then.43
  %overflow_arg_area_p51 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay44, i32 0, i32 2
  %overflow_arg_area52 = load i8*, i8** %overflow_arg_area_p51
  %51 = bitcast i8* %overflow_arg_area52 to %struct.sv**
  %overflow_arg_area.next53 = getelementptr i8, i8* %overflow_arg_area52, i32 8
  store i8* %overflow_arg_area.next53, i8** %overflow_arg_area_p51
  br label %vaarg.end.54

vaarg.end.54:                                     ; preds = %vaarg.in_mem.50, %vaarg.in_reg.48
  %vaarg.addr55 = phi %struct.sv** [ %49, %vaarg.in_reg.48 ], [ %51, %vaarg.in_mem.50 ]
  %52 = load %struct.sv*, %struct.sv** %vaarg.addr55
  store %struct.sv* %52, %struct.sv** %argsv, align 8
  %53 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %54 = load %struct.sv*, %struct.sv** %argsv, align 8
  call void @Perl_sv_catsv_flags(%struct.sv* %53, %struct.sv* %54, i32 2)
  %55 = load %struct.sv*, %struct.sv** %argsv, align 8
  %sv_flags56 = getelementptr inbounds %struct.sv, %struct.sv* %55, i32 0, i32 2
  %56 = load i32, i32* %sv_flags56, align 4
  %and57 = and i32 %56, 536870912
  %tobool58 = icmp ne i32 %and57, 0
  br i1 %tobool58, label %land.lhs.true.59, label %if.end.67

land.lhs.true.59:                                 ; preds = %vaarg.end.54
  %57 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %op_private60 = getelementptr inbounds %struct.cop, %struct.cop* %57, i32 0, i32 7
  %58 = load i8, i8* %op_private60, align 1
  %conv61 = zext i8 %58 to i32
  %and62 = and i32 %conv61, 8
  %tobool63 = icmp ne i32 %and62, 0
  br i1 %tobool63, label %if.end.67, label %if.then.64

if.then.64:                                       ; preds = %land.lhs.true.59
  %59 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags65 = getelementptr inbounds %struct.sv, %struct.sv* %59, i32 0, i32 2
  %60 = load i32, i32* %sv_flags65, align 4
  %or66 = or i32 %60, 536870912
  store i32 %or66, i32* %sv_flags65, align 4
  br label %if.end.67

if.end.67:                                        ; preds = %if.then.64, %land.lhs.true.59, %vaarg.end.54
  br label %for.end.1827

if.end.68:                                        ; preds = %sw.bb.41
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.then.15, %if.end.68
  br label %if.end.69

if.end.69:                                        ; preds = %sw.epilog, %land.lhs.true, %if.end
  %61 = load i64, i64* %patlen.addr, align 8
  %cmp70 = icmp ule i64 %61, 5
  br i1 %cmp70, label %land.lhs.true.72, label %if.end.167

land.lhs.true.72:                                 ; preds = %if.end.69
  %62 = load i8*, i8** %pat.addr, align 8
  %arrayidx73 = getelementptr inbounds i8, i8* %62, i64 0
  %63 = load i8, i8* %arrayidx73, align 1
  %conv74 = sext i8 %63 to i32
  %cmp75 = icmp eq i32 %conv74, 37
  br i1 %cmp75, label %land.lhs.true.77, label %if.end.167

land.lhs.true.77:                                 ; preds = %land.lhs.true.72
  %64 = load i8*, i8** %pat.addr, align 8
  %arrayidx78 = getelementptr inbounds i8, i8* %64, i64 1
  %65 = load i8, i8* %arrayidx78, align 1
  %conv79 = sext i8 %65 to i32
  %cmp80 = icmp eq i32 %conv79, 46
  br i1 %cmp80, label %land.lhs.true.82, label %if.end.167

land.lhs.true.82:                                 ; preds = %land.lhs.true.77
  %66 = load i64, i64* %patlen.addr, align 8
  %sub = sub i64 %66, 1
  %67 = load i8*, i8** %pat.addr, align 8
  %arrayidx83 = getelementptr inbounds i8, i8* %67, i64 %sub
  %68 = load i8, i8* %arrayidx83, align 1
  %conv84 = sext i8 %68 to i32
  %cmp85 = icmp eq i32 %conv84, 103
  br i1 %cmp85, label %if.then.92, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.82
  %69 = load i64, i64* %patlen.addr, align 8
  %sub87 = sub i64 %69, 1
  %70 = load i8*, i8** %pat.addr, align 8
  %arrayidx88 = getelementptr inbounds i8, i8* %70, i64 %sub87
  %71 = load i8, i8* %arrayidx88, align 1
  %conv89 = sext i8 %71 to i32
  %cmp90 = icmp eq i32 %conv89, 102
  br i1 %cmp90, label %if.then.92, label %if.end.167

if.then.92:                                       ; preds = %lor.lhs.false, %land.lhs.true.82
  store i32 0, i32* %digits, align 4
  %72 = load i8*, i8** %pat.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %72, i64 2
  store i8* %add.ptr, i8** %pp, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then.92
  %73 = load i8*, i8** %pp, align 8
  %74 = load i8, i8* %73, align 1
  %conv93 = sext i8 %74 to i32
  %cmp94 = icmp sge i32 %conv93, 48
  br i1 %cmp94, label %land.rhs.96, label %land.end.100

land.rhs.96:                                      ; preds = %while.cond
  %75 = load i8*, i8** %pp, align 8
  %76 = load i8, i8* %75, align 1
  %conv97 = sext i8 %76 to i32
  %cmp98 = icmp sle i32 %conv97, 57
  br label %land.end.100

land.end.100:                                     ; preds = %land.rhs.96, %while.cond
  %77 = phi i1 [ false, %while.cond ], [ %cmp98, %land.rhs.96 ]
  br i1 %77, label %while.body, label %while.end

while.body:                                       ; preds = %land.end.100
  %78 = load i32, i32* %digits, align 4
  %mul = mul i32 10, %78
  %79 = load i8*, i8** %pp, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %79, i32 1
  store i8* %incdec.ptr, i8** %pp, align 8
  %80 = load i8, i8* %79, align 1
  %conv102 = sext i8 %80 to i32
  %sub103 = sub nsw i32 %conv102, 48
  %add = add i32 %mul, %sub103
  store i32 %add, i32* %digits, align 4
  br label %while.cond

while.end:                                        ; preds = %land.end.100
  %81 = load i8*, i8** %pp, align 8
  %82 = load i8*, i8** %pat.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %81 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %82 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %83 = load i64, i64* %patlen.addr, align 8
  %conv104 = trunc i64 %83 to i32
  %sub105 = sub nsw i32 %conv104, 1
  %conv106 = sext i32 %sub105 to i64
  %cmp107 = icmp eq i64 %sub.ptr.sub, %conv106
  br i1 %cmp107, label %if.then.109, label %if.end.166

if.then.109:                                      ; preds = %while.end
  %84 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %tobool110 = icmp ne [1 x %struct.__va_list_tag]* %84, null
  br i1 %tobool110, label %if.then.111, label %if.else.121

if.then.111:                                      ; preds = %if.then.109
  %85 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay112 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %85, i32 0, i32 0
  %fp_offset_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay112, i32 0, i32 1
  %fp_offset = load i32, i32* %fp_offset_p
  %fits_in_fp = icmp ule i32 %fp_offset, 160
  br i1 %fits_in_fp, label %vaarg.in_reg.113, label %vaarg.in_mem.115

vaarg.in_reg.113:                                 ; preds = %if.then.111
  %86 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay112, i32 0, i32 3
  %reg_save_area114 = load i8*, i8** %86
  %87 = getelementptr i8, i8* %reg_save_area114, i32 %fp_offset
  %88 = bitcast i8* %87 to double*
  %89 = add i32 %fp_offset, 16
  store i32 %89, i32* %fp_offset_p
  br label %vaarg.end.119

vaarg.in_mem.115:                                 ; preds = %if.then.111
  %overflow_arg_area_p116 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay112, i32 0, i32 2
  %overflow_arg_area117 = load i8*, i8** %overflow_arg_area_p116
  %90 = bitcast i8* %overflow_arg_area117 to double*
  %overflow_arg_area.next118 = getelementptr i8, i8* %overflow_arg_area117, i32 8
  store i8* %overflow_arg_area.next118, i8** %overflow_arg_area_p116
  br label %vaarg.end.119

vaarg.end.119:                                    ; preds = %vaarg.in_mem.115, %vaarg.in_reg.113
  %vaarg.addr120 = phi double* [ %88, %vaarg.in_reg.113 ], [ %90, %vaarg.in_mem.115 ]
  %91 = load double, double* %vaarg.addr120
  store double %91, double* %nv, align 8
  br label %if.end.136

if.else.121:                                      ; preds = %if.then.109
  %92 = load i32, i32* %svix, align 4
  %93 = load i32, i32* %svmax.addr, align 4
  %cmp122 = icmp slt i32 %92, %93
  br i1 %cmp122, label %if.then.124, label %if.else.134

if.then.124:                                      ; preds = %if.else.121
  %94 = load %struct.sv**, %struct.sv*** %svargs.addr, align 8
  %95 = load %struct.sv*, %struct.sv** %94, align 8
  %sv_flags125 = getelementptr inbounds %struct.sv, %struct.sv* %95, i32 0, i32 2
  %96 = load i32, i32* %sv_flags125, align 4
  %and126 = and i32 %96, 131072
  %tobool127 = icmp ne i32 %and126, 0
  br i1 %tobool127, label %cond.true.128, label %cond.false.130

cond.true.128:                                    ; preds = %if.then.124
  %97 = load %struct.sv**, %struct.sv*** %svargs.addr, align 8
  %98 = load %struct.sv*, %struct.sv** %97, align 8
  %sv_any129 = getelementptr inbounds %struct.sv, %struct.sv* %98, i32 0, i32 0
  %99 = load i8*, i8** %sv_any129, align 8
  %100 = bitcast i8* %99 to %struct.xpvnv*
  %xnv_nv = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %100, i32 0, i32 4
  %101 = load double, double* %xnv_nv, align 8
  br label %cond.end.132

cond.false.130:                                   ; preds = %if.then.124
  %102 = load %struct.sv**, %struct.sv*** %svargs.addr, align 8
  %103 = load %struct.sv*, %struct.sv** %102, align 8
  %call131 = call double @Perl_sv_2nv(%struct.sv* %103)
  br label %cond.end.132

cond.end.132:                                     ; preds = %cond.false.130, %cond.true.128
  %cond133 = phi double [ %101, %cond.true.128 ], [ %call131, %cond.false.130 ]
  store double %cond133, double* %nv, align 8
  br label %if.end.135

if.else.134:                                      ; preds = %if.else.121
  br label %for.end.1827

if.end.135:                                       ; preds = %cond.end.132
  br label %if.end.136

if.end.136:                                       ; preds = %if.end.135, %vaarg.end.119
  %104 = load i8*, i8** %pp, align 8
  %105 = load i8, i8* %104, align 1
  %conv137 = sext i8 %105 to i32
  %cmp138 = icmp eq i32 %conv137, 103
  br i1 %cmp138, label %if.then.140, label %if.else.155

if.then.140:                                      ; preds = %if.end.136
  %106 = load i32, i32* %digits, align 4
  %tobool141 = icmp ne i32 %106, 0
  br i1 %tobool141, label %land.lhs.true.142, label %if.end.154

land.lhs.true.142:                                ; preds = %if.then.140
  %107 = load i32, i32* %digits, align 4
  %conv143 = zext i32 %107 to i64
  %cmp144 = icmp ult i64 %conv143, 102
  br i1 %cmp144, label %if.then.146, label %if.end.154

if.then.146:                                      ; preds = %land.lhs.true.142
  %108 = load double, double* %nv, align 8
  %109 = load i32, i32* %digits, align 4
  %arraydecay147 = getelementptr inbounds [127 x i8], [127 x i8]* %ebuf, i32 0, i32 0
  %call148 = call i8* @gcvt(double %108, i32 %109, i8* %arraydecay147)
  %110 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %arraydecay149 = getelementptr inbounds [127 x i8], [127 x i8]* %ebuf, i32 0, i32 0
  call void @Perl_sv_catpv(%struct.sv* %110, i8* %arraydecay149)
  %arraydecay150 = getelementptr inbounds [127 x i8], [127 x i8]* %ebuf, i32 0, i32 0
  %111 = load i8, i8* %arraydecay150, align 1
  %tobool151 = icmp ne i8 %111, 0
  br i1 %tobool151, label %if.then.152, label %if.end.153

if.then.152:                                      ; preds = %if.then.146
  br label %for.end.1827

if.end.153:                                       ; preds = %if.then.146
  br label %if.end.154

if.end.154:                                       ; preds = %if.end.153, %land.lhs.true.142, %if.then.140
  br label %if.end.165

if.else.155:                                      ; preds = %if.end.136
  %112 = load i32, i32* %digits, align 4
  %tobool156 = icmp ne i32 %112, 0
  br i1 %tobool156, label %if.end.164, label %if.then.157

if.then.157:                                      ; preds = %if.else.155
  %113 = load double, double* %nv, align 8
  %arraydecay158 = getelementptr inbounds [127 x i8], [127 x i8]* %ebuf, i32 0, i32 0
  %add.ptr159 = getelementptr inbounds i8, i8* %arraydecay158, i64 127
  %call160 = call i8* @F0convert(double %113, i8* %add.ptr159, i64* %l)
  store i8* %call160, i8** %p, align 8
  %tobool161 = icmp ne i8* %call160, null
  br i1 %tobool161, label %if.then.162, label %if.end.163

if.then.162:                                      ; preds = %if.then.157
  %114 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %115 = load i8*, i8** %p, align 8
  %116 = load i64, i64* %l, align 8
  call void @Perl_sv_catpvn_flags(%struct.sv* %114, i8* %115, i64 %116, i32 2)
  br label %for.end.1827

if.end.163:                                       ; preds = %if.then.157
  br label %if.end.164

if.end.164:                                       ; preds = %if.end.163, %if.else.155
  br label %if.end.165

if.end.165:                                       ; preds = %if.end.164, %if.end.154
  br label %if.end.166

if.end.166:                                       ; preds = %if.end.165, %while.end
  br label %if.end.167

if.end.167:                                       ; preds = %if.end.166, %lor.lhs.false, %land.lhs.true.77, %land.lhs.true.72, %if.end.69
  %117 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %tobool168 = icmp ne [1 x %struct.__va_list_tag]* %117, null
  br i1 %tobool168, label %if.end.182, label %land.lhs.true.169

land.lhs.true.169:                                ; preds = %if.end.167
  %118 = load i32, i32* %svix, align 4
  %119 = load i32, i32* %svmax.addr, align 4
  %cmp170 = icmp slt i32 %118, %119
  br i1 %cmp170, label %land.lhs.true.172, label %if.end.182

land.lhs.true.172:                                ; preds = %land.lhs.true.169
  %120 = load %struct.sv**, %struct.sv*** %svargs.addr, align 8
  %121 = load %struct.sv*, %struct.sv** %120, align 8
  %sv_flags173 = getelementptr inbounds %struct.sv, %struct.sv* %121, i32 0, i32 2
  %122 = load i32, i32* %sv_flags173, align 4
  %and174 = and i32 %122, 536870912
  %tobool175 = icmp ne i32 %and174, 0
  br i1 %tobool175, label %land.lhs.true.176, label %if.end.182

land.lhs.true.176:                                ; preds = %land.lhs.true.172
  %123 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %op_private177 = getelementptr inbounds %struct.cop, %struct.cop* %123, i32 0, i32 7
  %124 = load i8, i8* %op_private177, align 1
  %conv178 = zext i8 %124 to i32
  %and179 = and i32 %conv178, 8
  %tobool180 = icmp ne i32 %and179, 0
  br i1 %tobool180, label %if.end.182, label %if.then.181

if.then.181:                                      ; preds = %land.lhs.true.176
  store i8 1, i8* %has_utf8, align 1
  br label %if.end.182

if.end.182:                                       ; preds = %if.then.181, %land.lhs.true.176, %land.lhs.true.172, %land.lhs.true.169, %if.end.167
  %125 = load i8*, i8** %pat.addr, align 8
  %126 = load i64, i64* %patlen.addr, align 8
  %add.ptr183 = getelementptr inbounds i8, i8* %125, i64 %126
  store i8* %add.ptr183, i8** %patend, align 8
  %127 = load i8*, i8** %pat.addr, align 8
  store i8* %127, i8** %p, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc.1826, %if.end.182
  %128 = load i8*, i8** %p, align 8
  %129 = load i8*, i8** %patend, align 8
  %cmp184 = icmp ult i8* %128, %129
  br i1 %cmp184, label %for.body, label %for.end.1827

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %alt, align 1
  store i8 0, i8* %left, align 1
  store i8 0, i8* %vectorize, align 1
  store i8 0, i8* %vectorarg, align 1
  store i8 0, i8* %vec_utf8, align 1
  store i8 32, i8* %fill, align 1
  store i8 0, i8* %plus, align 1
  store i8 0, i8* %intsize, align 1
  store i64 0, i64* %width, align 8
  store i64 0, i64* %zeros, align 8
  store i8 0, i8* %has_precis, align 1
  store i64 0, i64* %precis, align 8
  %130 = load i32, i32* %svix, align 4
  store i32 %130, i32* %osvix, align 4
  store i8 0, i8* %is_utf8, align 1
  store i64 0, i64* %esignlen, align 8
  store i8* null, i8** %eptr, align 8
  store i64 0, i64* %elen, align 8
  store %struct.sv* null, %struct.sv** %vecsv, align 8
  store i8* null, i8** %vecstr, align 8
  store i64 0, i64* %veclen, align 8
  store i8 0, i8* %c, align 1
  store i32 0, i32* %base, align 4
  store i64 0, i64* %iv, align 8
  store i64 0, i64* %uv, align 8
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.58, i32 0, i32 0), i8** %dotstr, align 8
  store i64 1, i64* %dotstrlen, align 8
  store i32 0, i32* %efix, align 4
  store i32 0, i32* %ewix, align 4
  store i32 0, i32* %epix, align 4
  store i32 0, i32* %evix, align 4
  store i8 0, i8* %asterisk, align 1
  %131 = load i8*, i8** %p, align 8
  store i8* %131, i8** %q, align 8
  br label %for.cond.187

for.cond.187:                                     ; preds = %for.inc, %for.body
  %132 = load i8*, i8** %q, align 8
  %133 = load i8*, i8** %patend, align 8
  %cmp188 = icmp ult i8* %132, %133
  br i1 %cmp188, label %land.rhs.190, label %land.end.194

land.rhs.190:                                     ; preds = %for.cond.187
  %134 = load i8*, i8** %q, align 8
  %135 = load i8, i8* %134, align 1
  %conv191 = sext i8 %135 to i32
  %cmp192 = icmp ne i32 %conv191, 37
  br label %land.end.194

land.end.194:                                     ; preds = %land.rhs.190, %for.cond.187
  %136 = phi i1 [ false, %for.cond.187 ], [ %cmp192, %land.rhs.190 ]
  br i1 %136, label %for.body.196, label %for.end

for.body.196:                                     ; preds = %land.end.194
  br label %for.inc

for.inc:                                          ; preds = %for.body.196
  %137 = load i8*, i8** %q, align 8
  %incdec.ptr197 = getelementptr inbounds i8, i8* %137, i32 1
  store i8* %incdec.ptr197, i8** %q, align 8
  br label %for.cond.187

for.end:                                          ; preds = %land.end.194
  %138 = load i8*, i8** %q, align 8
  %139 = load i8*, i8** %p, align 8
  %cmp198 = icmp ugt i8* %138, %139
  br i1 %cmp198, label %if.then.200, label %if.end.226

if.then.200:                                      ; preds = %for.end
  %140 = load i8, i8* %has_utf8, align 1
  %conv201 = sext i8 %140 to i32
  %tobool202 = icmp ne i32 %conv201, 0
  br i1 %tobool202, label %land.lhs.true.203, label %if.else.221

land.lhs.true.203:                                ; preds = %if.then.200
  %141 = load i8, i8* %pat_utf8, align 1
  %tobool204 = icmp ne i8 %141, 0
  br i1 %tobool204, label %if.else.221, label %if.then.205

if.then.205:                                      ; preds = %land.lhs.true.203
  %142 = load %struct.sv*, %struct.sv** %nsv, align 8
  %tobool206 = icmp ne %struct.sv* %142, null
  br i1 %tobool206, label %if.else.213, label %if.then.207

if.then.207:                                      ; preds = %if.then.205
  %143 = load i8*, i8** %p, align 8
  %144 = load i8*, i8** %q, align 8
  %145 = load i8*, i8** %p, align 8
  %sub.ptr.lhs.cast208 = ptrtoint i8* %144 to i64
  %sub.ptr.rhs.cast209 = ptrtoint i8* %145 to i64
  %sub.ptr.sub210 = sub i64 %sub.ptr.lhs.cast208, %sub.ptr.rhs.cast209
  %call211 = call %struct.sv* @Perl_newSVpvn(i8* %143, i64 %sub.ptr.sub210)
  %call212 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call211)
  store %struct.sv* %call212, %struct.sv** %nsv, align 8
  br label %if.end.217

if.else.213:                                      ; preds = %if.then.205
  %146 = load %struct.sv*, %struct.sv** %nsv, align 8
  %147 = load i8*, i8** %p, align 8
  %148 = load i8*, i8** %q, align 8
  %149 = load i8*, i8** %p, align 8
  %sub.ptr.lhs.cast214 = ptrtoint i8* %148 to i64
  %sub.ptr.rhs.cast215 = ptrtoint i8* %149 to i64
  %sub.ptr.sub216 = sub i64 %sub.ptr.lhs.cast214, %sub.ptr.rhs.cast215
  call void @Perl_sv_setpvn(%struct.sv* %146, i8* %147, i64 %sub.ptr.sub216)
  br label %if.end.217

if.end.217:                                       ; preds = %if.else.213, %if.then.207
  %150 = load %struct.sv*, %struct.sv** %nsv, align 8
  %sv_flags218 = getelementptr inbounds %struct.sv, %struct.sv* %150, i32 0, i32 2
  %151 = load i32, i32* %sv_flags218, align 4
  %and219 = and i32 %151, -536870913
  store i32 %and219, i32* %sv_flags218, align 4
  %152 = load %struct.sv*, %struct.sv** %nsv, align 8
  %call220 = call i64 @Perl_sv_utf8_upgrade_flags(%struct.sv* %152, i32 2)
  %153 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %154 = load %struct.sv*, %struct.sv** %nsv, align 8
  call void @Perl_sv_catsv_flags(%struct.sv* %153, %struct.sv* %154, i32 2)
  br label %if.end.225

if.else.221:                                      ; preds = %land.lhs.true.203, %if.then.200
  %155 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %156 = load i8*, i8** %p, align 8
  %157 = load i8*, i8** %q, align 8
  %158 = load i8*, i8** %p, align 8
  %sub.ptr.lhs.cast222 = ptrtoint i8* %157 to i64
  %sub.ptr.rhs.cast223 = ptrtoint i8* %158 to i64
  %sub.ptr.sub224 = sub i64 %sub.ptr.lhs.cast222, %sub.ptr.rhs.cast223
  call void @Perl_sv_catpvn_flags(%struct.sv* %155, i8* %156, i64 %sub.ptr.sub224, i32 2)
  br label %if.end.225

if.end.225:                                       ; preds = %if.else.221, %if.end.217
  %159 = load i8*, i8** %q, align 8
  store i8* %159, i8** %p, align 8
  br label %if.end.226

if.end.226:                                       ; preds = %if.end.225, %for.end
  %160 = load i8*, i8** %q, align 8
  %incdec.ptr227 = getelementptr inbounds i8, i8* %160, i32 1
  store i8* %incdec.ptr227, i8** %q, align 8
  %161 = load i8*, i8** %patend, align 8
  %cmp228 = icmp uge i8* %160, %161
  br i1 %cmp228, label %if.then.230, label %if.end.231

if.then.230:                                      ; preds = %if.end.226
  br label %for.end.1827

if.end.231:                                       ; preds = %if.end.226
  %call232 = call i32 @S_expect_number(i8** %q)
  %conv233 = sext i32 %call232 to i64
  store i64 %conv233, i64* %width, align 8
  %tobool234 = icmp ne i64 %conv233, 0
  br i1 %tobool234, label %if.then.235, label %if.end.244

if.then.235:                                      ; preds = %if.end.231
  %162 = load i8*, i8** %q, align 8
  %163 = load i8, i8* %162, align 1
  %conv236 = sext i8 %163 to i32
  %cmp237 = icmp eq i32 %conv236, 36
  br i1 %cmp237, label %if.then.239, label %if.else.242

if.then.239:                                      ; preds = %if.then.235
  %164 = load i8*, i8** %q, align 8
  %incdec.ptr240 = getelementptr inbounds i8, i8* %164, i32 1
  store i8* %incdec.ptr240, i8** %q, align 8
  %165 = load i64, i64* %width, align 8
  %conv241 = trunc i64 %165 to i32
  store i32 %conv241, i32* %efix, align 4
  br label %if.end.243

if.else.242:                                      ; preds = %if.then.235
  br label %gotwidth

if.end.243:                                       ; preds = %if.then.239
  br label %if.end.244

if.end.244:                                       ; preds = %if.end.243, %if.end.231
  br label %while.cond.245

while.cond.245:                                   ; preds = %sw.bb.255, %sw.bb.253, %sw.bb.251, %sw.bb.249, %if.end.244
  %166 = load i8*, i8** %q, align 8
  %167 = load i8, i8* %166, align 1
  %tobool246 = icmp ne i8 %167, 0
  br i1 %tobool246, label %while.body.247, label %while.end.258

while.body.247:                                   ; preds = %while.cond.245
  %168 = load i8*, i8** %q, align 8
  %169 = load i8, i8* %168, align 1
  %conv248 = sext i8 %169 to i32
  switch i32 %conv248, label %sw.default [
    i32 32, label %sw.bb.249
    i32 43, label %sw.bb.249
    i32 45, label %sw.bb.251
    i32 48, label %sw.bb.253
    i32 35, label %sw.bb.255
  ]

sw.bb.249:                                        ; preds = %while.body.247, %while.body.247
  %170 = load i8*, i8** %q, align 8
  %incdec.ptr250 = getelementptr inbounds i8, i8* %170, i32 1
  store i8* %incdec.ptr250, i8** %q, align 8
  %171 = load i8, i8* %170, align 1
  store i8 %171, i8* %plus, align 1
  br label %while.cond.245

sw.bb.251:                                        ; preds = %while.body.247
  store i8 1, i8* %left, align 1
  %172 = load i8*, i8** %q, align 8
  %incdec.ptr252 = getelementptr inbounds i8, i8* %172, i32 1
  store i8* %incdec.ptr252, i8** %q, align 8
  br label %while.cond.245

sw.bb.253:                                        ; preds = %while.body.247
  %173 = load i8*, i8** %q, align 8
  %incdec.ptr254 = getelementptr inbounds i8, i8* %173, i32 1
  store i8* %incdec.ptr254, i8** %q, align 8
  %174 = load i8, i8* %173, align 1
  store i8 %174, i8* %fill, align 1
  br label %while.cond.245

sw.bb.255:                                        ; preds = %while.body.247
  store i8 1, i8* %alt, align 1
  %175 = load i8*, i8** %q, align 8
  %incdec.ptr256 = getelementptr inbounds i8, i8* %175, i32 1
  store i8* %incdec.ptr256, i8** %q, align 8
  br label %while.cond.245

sw.default:                                       ; preds = %while.body.247
  br label %sw.epilog.257

sw.epilog.257:                                    ; preds = %sw.default
  br label %while.end.258

while.end.258:                                    ; preds = %sw.epilog.257, %while.cond.245
  br label %tryasterisk

tryasterisk:                                      ; preds = %if.end.285, %while.end.258
  %176 = load i8*, i8** %q, align 8
  %177 = load i8, i8* %176, align 1
  %conv259 = sext i8 %177 to i32
  %cmp260 = icmp eq i32 %conv259, 42
  br i1 %cmp260, label %if.then.262, label %if.end.274

if.then.262:                                      ; preds = %tryasterisk
  %178 = load i8*, i8** %q, align 8
  %incdec.ptr263 = getelementptr inbounds i8, i8* %178, i32 1
  store i8* %incdec.ptr263, i8** %q, align 8
  %call264 = call i32 @S_expect_number(i8** %q)
  store i32 %call264, i32* %ewix, align 4
  %tobool265 = icmp ne i32 %call264, 0
  br i1 %tobool265, label %if.then.266, label %if.end.273

if.then.266:                                      ; preds = %if.then.262
  %179 = load i8*, i8** %q, align 8
  %incdec.ptr267 = getelementptr inbounds i8, i8* %179, i32 1
  store i8* %incdec.ptr267, i8** %q, align 8
  %180 = load i8, i8* %179, align 1
  %conv268 = sext i8 %180 to i32
  %cmp269 = icmp ne i32 %conv268, 36
  br i1 %cmp269, label %if.then.271, label %if.end.272

if.then.271:                                      ; preds = %if.then.266
  br label %unknown

if.end.272:                                       ; preds = %if.then.266
  br label %if.end.273

if.end.273:                                       ; preds = %if.end.272, %if.then.262
  store i8 1, i8* %asterisk, align 1
  br label %if.end.274

if.end.274:                                       ; preds = %if.end.273, %tryasterisk
  %181 = load i8*, i8** %q, align 8
  %182 = load i8, i8* %181, align 1
  %conv275 = sext i8 %182 to i32
  %cmp276 = icmp eq i32 %conv275, 118
  br i1 %cmp276, label %if.then.278, label %if.end.286

if.then.278:                                      ; preds = %if.end.274
  %183 = load i8*, i8** %q, align 8
  %incdec.ptr279 = getelementptr inbounds i8, i8* %183, i32 1
  store i8* %incdec.ptr279, i8** %q, align 8
  %184 = load i8, i8* %vectorize, align 1
  %tobool280 = icmp ne i8 %184, 0
  br i1 %tobool280, label %if.then.281, label %if.end.282

if.then.281:                                      ; preds = %if.then.278
  br label %unknown

if.end.282:                                       ; preds = %if.then.278
  %185 = load i8, i8* %asterisk, align 1
  store i8 %185, i8* %vectorarg, align 1
  %tobool283 = icmp ne i8 %185, 0
  br i1 %tobool283, label %if.then.284, label %if.end.285

if.then.284:                                      ; preds = %if.end.282
  %186 = load i32, i32* %ewix, align 4
  store i32 %186, i32* %evix, align 4
  store i32 0, i32* %ewix, align 4
  store i8 0, i8* %asterisk, align 1
  br label %if.end.285

if.end.285:                                       ; preds = %if.then.284, %if.end.282
  store i8 1, i8* %vectorize, align 1
  br label %tryasterisk

if.end.286:                                       ; preds = %if.end.274
  %187 = load i8, i8* %asterisk, align 1
  %tobool287 = icmp ne i8 %187, 0
  br i1 %tobool287, label %if.end.295, label %if.then.288

if.then.288:                                      ; preds = %if.end.286
  %188 = load i8*, i8** %q, align 8
  %189 = load i8, i8* %188, align 1
  %conv289 = sext i8 %189 to i32
  %cmp290 = icmp eq i32 %conv289, 48
  br i1 %cmp290, label %if.then.292, label %if.end.294

if.then.292:                                      ; preds = %if.then.288
  %190 = load i8*, i8** %q, align 8
  %incdec.ptr293 = getelementptr inbounds i8, i8* %190, i32 1
  store i8* %incdec.ptr293, i8** %q, align 8
  %191 = load i8, i8* %190, align 1
  store i8 %191, i8* %fill, align 1
  br label %if.end.294

if.end.294:                                       ; preds = %if.then.292, %if.then.288
  br label %if.end.295

if.end.295:                                       ; preds = %if.end.294, %if.end.286
  %call296 = call i32 @S_expect_number(i8** %q)
  %conv297 = sext i32 %call296 to i64
  store i64 %conv297, i64* %width, align 8
  %192 = load i8, i8* %vectorize, align 1
  %tobool298 = icmp ne i8 %192, 0
  br i1 %tobool298, label %if.then.299, label %if.end.445

if.then.299:                                      ; preds = %if.end.295
  %193 = load i8, i8* %vectorarg, align 1
  %tobool300 = icmp ne i8 %193, 0
  br i1 %tobool300, label %if.then.301, label %if.end.359

if.then.301:                                      ; preds = %if.then.299
  %194 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %tobool302 = icmp ne [1 x %struct.__va_list_tag]* %194, null
  br i1 %tobool302, label %if.then.303, label %if.else.316

if.then.303:                                      ; preds = %if.then.301
  %195 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay304 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %195, i32 0, i32 0
  %gp_offset_p305 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay304, i32 0, i32 0
  %gp_offset306 = load i32, i32* %gp_offset_p305
  %fits_in_gp307 = icmp ule i32 %gp_offset306, 40
  br i1 %fits_in_gp307, label %vaarg.in_reg.308, label %vaarg.in_mem.310

vaarg.in_reg.308:                                 ; preds = %if.then.303
  %196 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay304, i32 0, i32 3
  %reg_save_area309 = load i8*, i8** %196
  %197 = getelementptr i8, i8* %reg_save_area309, i32 %gp_offset306
  %198 = bitcast i8* %197 to %struct.sv**
  %199 = add i32 %gp_offset306, 8
  store i32 %199, i32* %gp_offset_p305
  br label %vaarg.end.314

vaarg.in_mem.310:                                 ; preds = %if.then.303
  %overflow_arg_area_p311 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay304, i32 0, i32 2
  %overflow_arg_area312 = load i8*, i8** %overflow_arg_area_p311
  %200 = bitcast i8* %overflow_arg_area312 to %struct.sv**
  %overflow_arg_area.next313 = getelementptr i8, i8* %overflow_arg_area312, i32 8
  store i8* %overflow_arg_area.next313, i8** %overflow_arg_area_p311
  br label %vaarg.end.314

vaarg.end.314:                                    ; preds = %vaarg.in_mem.310, %vaarg.in_reg.308
  %vaarg.addr315 = phi %struct.sv** [ %198, %vaarg.in_reg.308 ], [ %200, %vaarg.in_mem.310 ]
  %201 = load %struct.sv*, %struct.sv** %vaarg.addr315
  store %struct.sv* %201, %struct.sv** %vecsv, align 8
  br label %if.end.335

if.else.316:                                      ; preds = %if.then.301
  %202 = load i32, i32* %evix, align 4
  %tobool317 = icmp ne i32 %202, 0
  br i1 %tobool317, label %cond.true.318, label %cond.false.321

cond.true.318:                                    ; preds = %if.else.316
  %203 = load i32, i32* %evix, align 4
  %204 = load i32, i32* %svmax.addr, align 4
  %cmp319 = icmp sle i32 %203, %204
  br i1 %cmp319, label %cond.true.324, label %cond.false.332

cond.false.321:                                   ; preds = %if.else.316
  %205 = load i32, i32* %svix, align 4
  %206 = load i32, i32* %svmax.addr, align 4
  %cmp322 = icmp slt i32 %205, %206
  br i1 %cmp322, label %cond.true.324, label %cond.false.332

cond.true.324:                                    ; preds = %cond.false.321, %cond.true.318
  %207 = load i32, i32* %evix, align 4
  %tobool325 = icmp ne i32 %207, 0
  br i1 %tobool325, label %cond.true.326, label %cond.false.328

cond.true.326:                                    ; preds = %cond.true.324
  %208 = load i32, i32* %evix, align 4
  %sub327 = sub nsw i32 %208, 1
  br label %cond.end.329

cond.false.328:                                   ; preds = %cond.true.324
  %209 = load i32, i32* %svix, align 4
  %inc = add nsw i32 %209, 1
  store i32 %inc, i32* %svix, align 4
  br label %cond.end.329

cond.end.329:                                     ; preds = %cond.false.328, %cond.true.326
  %cond330 = phi i32 [ %sub327, %cond.true.326 ], [ %209, %cond.false.328 ]
  %idxprom = sext i32 %cond330 to i64
  %210 = load %struct.sv**, %struct.sv*** %svargs.addr, align 8
  %arrayidx331 = getelementptr inbounds %struct.sv*, %struct.sv** %210, i64 %idxprom
  %211 = load %struct.sv*, %struct.sv** %arrayidx331, align 8
  br label %cond.end.333

cond.false.332:                                   ; preds = %cond.false.321, %cond.true.318
  br label %cond.end.333

cond.end.333:                                     ; preds = %cond.false.332, %cond.end.329
  %cond334 = phi %struct.sv* [ %211, %cond.end.329 ], [ @PL_sv_undef, %cond.false.332 ]
  store %struct.sv* %cond334, %struct.sv** %vecsv, align 8
  br label %if.end.335

if.end.335:                                       ; preds = %cond.end.333, %vaarg.end.314
  %212 = load %struct.sv*, %struct.sv** %vecsv, align 8
  store %struct.sv* %212, %struct.sv** @PL_Sv, align 8
  %213 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags336 = getelementptr inbounds %struct.sv, %struct.sv* %213, i32 0, i32 2
  %214 = load i32, i32* %sv_flags336, align 4
  %and337 = and i32 %214, 262144
  %cmp338 = icmp eq i32 %and337, 262144
  br i1 %cmp338, label %cond.true.340, label %cond.false.345

cond.true.340:                                    ; preds = %if.end.335
  %215 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any341 = getelementptr inbounds %struct.sv, %struct.sv* %215, i32 0, i32 0
  %216 = load i8*, i8** %sv_any341, align 8
  %217 = bitcast i8* %216 to %struct.xpv*
  %xpv_cur342 = getelementptr inbounds %struct.xpv, %struct.xpv* %217, i32 0, i32 1
  %218 = load i64, i64* %xpv_cur342, align 8
  store i64 %218, i64* %dotstrlen, align 8
  %219 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any343 = getelementptr inbounds %struct.sv, %struct.sv* %219, i32 0, i32 0
  %220 = load i8*, i8** %sv_any343, align 8
  %221 = bitcast i8* %220 to %struct.xpv*
  %xpv_pv344 = getelementptr inbounds %struct.xpv, %struct.xpv* %221, i32 0, i32 0
  %222 = load i8*, i8** %xpv_pv344, align 8
  br label %cond.end.347

cond.false.345:                                   ; preds = %if.end.335
  %223 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %call346 = call i8* @Perl_sv_2pv_flags(%struct.sv* %223, i64* %dotstrlen, i32 2)
  br label %cond.end.347

cond.end.347:                                     ; preds = %cond.false.345, %cond.true.340
  %cond348 = phi i8* [ %222, %cond.true.340 ], [ %call346, %cond.false.345 ]
  store i8* %cond348, i8** %dotstr, align 8
  %224 = load %struct.sv*, %struct.sv** %vecsv, align 8
  %sv_flags349 = getelementptr inbounds %struct.sv, %struct.sv* %224, i32 0, i32 2
  %225 = load i32, i32* %sv_flags349, align 4
  %and350 = and i32 %225, 536870912
  %tobool351 = icmp ne i32 %and350, 0
  br i1 %tobool351, label %land.lhs.true.352, label %if.end.358

land.lhs.true.352:                                ; preds = %cond.end.347
  %226 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %op_private353 = getelementptr inbounds %struct.cop, %struct.cop* %226, i32 0, i32 7
  %227 = load i8, i8* %op_private353, align 1
  %conv354 = zext i8 %227 to i32
  %and355 = and i32 %conv354, 8
  %tobool356 = icmp ne i32 %and355, 0
  br i1 %tobool356, label %if.end.358, label %if.then.357

if.then.357:                                      ; preds = %land.lhs.true.352
  store i8 1, i8* %is_utf8, align 1
  br label %if.end.358

if.end.358:                                       ; preds = %if.then.357, %land.lhs.true.352, %cond.end.347
  br label %if.end.359

if.end.359:                                       ; preds = %if.end.358, %if.then.299
  %228 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %tobool360 = icmp ne [1 x %struct.__va_list_tag]* %228, null
  br i1 %tobool360, label %if.then.361, label %if.else.399

if.then.361:                                      ; preds = %if.end.359
  %229 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay362 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %229, i32 0, i32 0
  %gp_offset_p363 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay362, i32 0, i32 0
  %gp_offset364 = load i32, i32* %gp_offset_p363
  %fits_in_gp365 = icmp ule i32 %gp_offset364, 40
  br i1 %fits_in_gp365, label %vaarg.in_reg.366, label %vaarg.in_mem.368

vaarg.in_reg.366:                                 ; preds = %if.then.361
  %230 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay362, i32 0, i32 3
  %reg_save_area367 = load i8*, i8** %230
  %231 = getelementptr i8, i8* %reg_save_area367, i32 %gp_offset364
  %232 = bitcast i8* %231 to %struct.sv**
  %233 = add i32 %gp_offset364, 8
  store i32 %233, i32* %gp_offset_p363
  br label %vaarg.end.372

vaarg.in_mem.368:                                 ; preds = %if.then.361
  %overflow_arg_area_p369 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay362, i32 0, i32 2
  %overflow_arg_area370 = load i8*, i8** %overflow_arg_area_p369
  %234 = bitcast i8* %overflow_arg_area370 to %struct.sv**
  %overflow_arg_area.next371 = getelementptr i8, i8* %overflow_arg_area370, i32 8
  store i8* %overflow_arg_area.next371, i8** %overflow_arg_area_p369
  br label %vaarg.end.372

vaarg.end.372:                                    ; preds = %vaarg.in_mem.368, %vaarg.in_reg.366
  %vaarg.addr373 = phi %struct.sv** [ %232, %vaarg.in_reg.366 ], [ %234, %vaarg.in_mem.368 ]
  %235 = load %struct.sv*, %struct.sv** %vaarg.addr373
  store %struct.sv* %235, %struct.sv** %vecsv, align 8
  %236 = load %struct.sv*, %struct.sv** %vecsv, align 8
  store %struct.sv* %236, %struct.sv** @PL_Sv, align 8
  %237 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags374 = getelementptr inbounds %struct.sv, %struct.sv* %237, i32 0, i32 2
  %238 = load i32, i32* %sv_flags374, align 4
  %and375 = and i32 %238, 262144
  %cmp376 = icmp eq i32 %and375, 262144
  br i1 %cmp376, label %cond.true.378, label %cond.false.383

cond.true.378:                                    ; preds = %vaarg.end.372
  %239 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any379 = getelementptr inbounds %struct.sv, %struct.sv* %239, i32 0, i32 0
  %240 = load i8*, i8** %sv_any379, align 8
  %241 = bitcast i8* %240 to %struct.xpv*
  %xpv_cur380 = getelementptr inbounds %struct.xpv, %struct.xpv* %241, i32 0, i32 1
  %242 = load i64, i64* %xpv_cur380, align 8
  store i64 %242, i64* %veclen, align 8
  %243 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any381 = getelementptr inbounds %struct.sv, %struct.sv* %243, i32 0, i32 0
  %244 = load i8*, i8** %sv_any381, align 8
  %245 = bitcast i8* %244 to %struct.xpv*
  %xpv_pv382 = getelementptr inbounds %struct.xpv, %struct.xpv* %245, i32 0, i32 0
  %246 = load i8*, i8** %xpv_pv382, align 8
  br label %cond.end.385

cond.false.383:                                   ; preds = %vaarg.end.372
  %247 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %call384 = call i8* @Perl_sv_2pv_flags(%struct.sv* %247, i64* %veclen, i32 2)
  br label %cond.end.385

cond.end.385:                                     ; preds = %cond.false.383, %cond.true.378
  %cond386 = phi i8* [ %246, %cond.true.378 ], [ %call384, %cond.false.383 ]
  store i8* %cond386, i8** %vecstr, align 8
  %248 = load %struct.sv*, %struct.sv** %vecsv, align 8
  %sv_flags387 = getelementptr inbounds %struct.sv, %struct.sv* %248, i32 0, i32 2
  %249 = load i32, i32* %sv_flags387, align 4
  %and388 = and i32 %249, 536870912
  %tobool389 = icmp ne i32 %and388, 0
  br i1 %tobool389, label %land.rhs.390, label %land.end.396

land.rhs.390:                                     ; preds = %cond.end.385
  %250 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %op_private391 = getelementptr inbounds %struct.cop, %struct.cop* %250, i32 0, i32 7
  %251 = load i8, i8* %op_private391, align 1
  %conv392 = zext i8 %251 to i32
  %and393 = and i32 %conv392, 8
  %tobool394 = icmp ne i32 %and393, 0
  %lnot395 = xor i1 %tobool394, true
  br label %land.end.396

land.end.396:                                     ; preds = %land.rhs.390, %cond.end.385
  %252 = phi i1 [ false, %cond.end.385 ], [ %lnot395, %land.rhs.390 ]
  %land.ext397 = zext i1 %252 to i32
  %conv398 = trunc i32 %land.ext397 to i8
  store i8 %conv398, i8* %vec_utf8, align 1
  br label %if.end.444

if.else.399:                                      ; preds = %if.end.359
  %253 = load i32, i32* %efix, align 4
  %tobool400 = icmp ne i32 %253, 0
  br i1 %tobool400, label %cond.true.401, label %cond.false.404

cond.true.401:                                    ; preds = %if.else.399
  %254 = load i32, i32* %efix, align 4
  %255 = load i32, i32* %svmax.addr, align 4
  %cmp402 = icmp sle i32 %254, %255
  br i1 %cmp402, label %if.then.407, label %if.else.442

cond.false.404:                                   ; preds = %if.else.399
  %256 = load i32, i32* %svix, align 4
  %257 = load i32, i32* %svmax.addr, align 4
  %cmp405 = icmp slt i32 %256, %257
  br i1 %cmp405, label %if.then.407, label %if.else.442

if.then.407:                                      ; preds = %cond.false.404, %cond.true.401
  %258 = load i32, i32* %efix, align 4
  %tobool408 = icmp ne i32 %258, 0
  br i1 %tobool408, label %cond.true.409, label %cond.false.411

cond.true.409:                                    ; preds = %if.then.407
  %259 = load i32, i32* %efix, align 4
  %sub410 = sub nsw i32 %259, 1
  br label %cond.end.413

cond.false.411:                                   ; preds = %if.then.407
  %260 = load i32, i32* %svix, align 4
  %inc412 = add nsw i32 %260, 1
  store i32 %inc412, i32* %svix, align 4
  br label %cond.end.413

cond.end.413:                                     ; preds = %cond.false.411, %cond.true.409
  %cond414 = phi i32 [ %sub410, %cond.true.409 ], [ %260, %cond.false.411 ]
  %idxprom415 = sext i32 %cond414 to i64
  %261 = load %struct.sv**, %struct.sv*** %svargs.addr, align 8
  %arrayidx416 = getelementptr inbounds %struct.sv*, %struct.sv** %261, i64 %idxprom415
  %262 = load %struct.sv*, %struct.sv** %arrayidx416, align 8
  store %struct.sv* %262, %struct.sv** %vecsv, align 8
  %263 = load %struct.sv*, %struct.sv** %vecsv, align 8
  store %struct.sv* %263, %struct.sv** @PL_Sv, align 8
  %264 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags417 = getelementptr inbounds %struct.sv, %struct.sv* %264, i32 0, i32 2
  %265 = load i32, i32* %sv_flags417, align 4
  %and418 = and i32 %265, 262144
  %cmp419 = icmp eq i32 %and418, 262144
  br i1 %cmp419, label %cond.true.421, label %cond.false.426

cond.true.421:                                    ; preds = %cond.end.413
  %266 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any422 = getelementptr inbounds %struct.sv, %struct.sv* %266, i32 0, i32 0
  %267 = load i8*, i8** %sv_any422, align 8
  %268 = bitcast i8* %267 to %struct.xpv*
  %xpv_cur423 = getelementptr inbounds %struct.xpv, %struct.xpv* %268, i32 0, i32 1
  %269 = load i64, i64* %xpv_cur423, align 8
  store i64 %269, i64* %veclen, align 8
  %270 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any424 = getelementptr inbounds %struct.sv, %struct.sv* %270, i32 0, i32 0
  %271 = load i8*, i8** %sv_any424, align 8
  %272 = bitcast i8* %271 to %struct.xpv*
  %xpv_pv425 = getelementptr inbounds %struct.xpv, %struct.xpv* %272, i32 0, i32 0
  %273 = load i8*, i8** %xpv_pv425, align 8
  br label %cond.end.428

cond.false.426:                                   ; preds = %cond.end.413
  %274 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %call427 = call i8* @Perl_sv_2pv_flags(%struct.sv* %274, i64* %veclen, i32 2)
  br label %cond.end.428

cond.end.428:                                     ; preds = %cond.false.426, %cond.true.421
  %cond429 = phi i8* [ %273, %cond.true.421 ], [ %call427, %cond.false.426 ]
  store i8* %cond429, i8** %vecstr, align 8
  %275 = load %struct.sv*, %struct.sv** %vecsv, align 8
  %sv_flags430 = getelementptr inbounds %struct.sv, %struct.sv* %275, i32 0, i32 2
  %276 = load i32, i32* %sv_flags430, align 4
  %and431 = and i32 %276, 536870912
  %tobool432 = icmp ne i32 %and431, 0
  br i1 %tobool432, label %land.rhs.433, label %land.end.439

land.rhs.433:                                     ; preds = %cond.end.428
  %277 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %op_private434 = getelementptr inbounds %struct.cop, %struct.cop* %277, i32 0, i32 7
  %278 = load i8, i8* %op_private434, align 1
  %conv435 = zext i8 %278 to i32
  %and436 = and i32 %conv435, 8
  %tobool437 = icmp ne i32 %and436, 0
  %lnot438 = xor i1 %tobool437, true
  br label %land.end.439

land.end.439:                                     ; preds = %land.rhs.433, %cond.end.428
  %279 = phi i1 [ false, %cond.end.428 ], [ %lnot438, %land.rhs.433 ]
  %land.ext440 = zext i1 %279 to i32
  %conv441 = trunc i32 %land.ext440 to i8
  store i8 %conv441, i8* %vec_utf8, align 1
  br label %if.end.443

if.else.442:                                      ; preds = %cond.false.404, %cond.true.401
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0), i8** %vecstr, align 8
  store i64 0, i64* %veclen, align 8
  br label %if.end.443

if.end.443:                                       ; preds = %if.else.442, %land.end.439
  br label %if.end.444

if.end.444:                                       ; preds = %if.end.443, %land.end.396
  br label %if.end.445

if.end.445:                                       ; preds = %if.end.444, %if.end.295
  %280 = load i8, i8* %asterisk, align 1
  %tobool446 = icmp ne i8 %280, 0
  br i1 %tobool446, label %if.then.447, label %if.end.507

if.then.447:                                      ; preds = %if.end.445
  %281 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %tobool448 = icmp ne [1 x %struct.__va_list_tag]* %281, null
  br i1 %tobool448, label %if.then.449, label %if.else.462

if.then.449:                                      ; preds = %if.then.447
  %282 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay450 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %282, i32 0, i32 0
  %gp_offset_p451 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay450, i32 0, i32 0
  %gp_offset452 = load i32, i32* %gp_offset_p451
  %fits_in_gp453 = icmp ule i32 %gp_offset452, 40
  br i1 %fits_in_gp453, label %vaarg.in_reg.454, label %vaarg.in_mem.456

vaarg.in_reg.454:                                 ; preds = %if.then.449
  %283 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay450, i32 0, i32 3
  %reg_save_area455 = load i8*, i8** %283
  %284 = getelementptr i8, i8* %reg_save_area455, i32 %gp_offset452
  %285 = bitcast i8* %284 to i32*
  %286 = add i32 %gp_offset452, 8
  store i32 %286, i32* %gp_offset_p451
  br label %vaarg.end.460

vaarg.in_mem.456:                                 ; preds = %if.then.449
  %overflow_arg_area_p457 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay450, i32 0, i32 2
  %overflow_arg_area458 = load i8*, i8** %overflow_arg_area_p457
  %287 = bitcast i8* %overflow_arg_area458 to i32*
  %overflow_arg_area.next459 = getelementptr i8, i8* %overflow_arg_area458, i32 8
  store i8* %overflow_arg_area.next459, i8** %overflow_arg_area_p457
  br label %vaarg.end.460

vaarg.end.460:                                    ; preds = %vaarg.in_mem.456, %vaarg.in_reg.454
  %vaarg.addr461 = phi i32* [ %285, %vaarg.in_reg.454 ], [ %287, %vaarg.in_mem.456 ]
  %288 = load i32, i32* %vaarg.addr461
  store i32 %288, i32* %i, align 4
  br label %if.end.493

if.else.462:                                      ; preds = %if.then.447
  %289 = load i32, i32* %ewix, align 4
  %tobool463 = icmp ne i32 %289, 0
  br i1 %tobool463, label %cond.true.464, label %cond.false.467

cond.true.464:                                    ; preds = %if.else.462
  %290 = load i32, i32* %ewix, align 4
  %291 = load i32, i32* %svmax.addr, align 4
  %cmp465 = icmp sle i32 %290, %291
  br i1 %cmp465, label %cond.true.470, label %cond.false.489

cond.false.467:                                   ; preds = %if.else.462
  %292 = load i32, i32* %svix, align 4
  %293 = load i32, i32* %svmax.addr, align 4
  %cmp468 = icmp slt i32 %292, %293
  br i1 %cmp468, label %cond.true.470, label %cond.false.489

cond.true.470:                                    ; preds = %cond.false.467, %cond.true.464
  %294 = load i32, i32* %ewix, align 4
  %tobool471 = icmp ne i32 %294, 0
  br i1 %tobool471, label %cond.true.472, label %cond.false.474

cond.true.472:                                    ; preds = %cond.true.470
  %295 = load i32, i32* %ewix, align 4
  %sub473 = sub nsw i32 %295, 1
  br label %cond.end.476

cond.false.474:                                   ; preds = %cond.true.470
  %296 = load i32, i32* %svix, align 4
  %inc475 = add nsw i32 %296, 1
  store i32 %inc475, i32* %svix, align 4
  br label %cond.end.476

cond.end.476:                                     ; preds = %cond.false.474, %cond.true.472
  %cond477 = phi i32 [ %sub473, %cond.true.472 ], [ %296, %cond.false.474 ]
  %idxprom478 = sext i32 %cond477 to i64
  %297 = load %struct.sv**, %struct.sv*** %svargs.addr, align 8
  %arrayidx479 = getelementptr inbounds %struct.sv*, %struct.sv** %297, i64 %idxprom478
  %298 = load %struct.sv*, %struct.sv** %arrayidx479, align 8
  store %struct.sv* %298, %struct.sv** @PL_Sv, align 8
  %299 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags480 = getelementptr inbounds %struct.sv, %struct.sv* %299, i32 0, i32 2
  %300 = load i32, i32* %sv_flags480, align 4
  %and481 = and i32 %300, 65536
  %tobool482 = icmp ne i32 %and481, 0
  br i1 %tobool482, label %cond.true.483, label %cond.false.485

cond.true.483:                                    ; preds = %cond.end.476
  %301 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any484 = getelementptr inbounds %struct.sv, %struct.sv* %301, i32 0, i32 0
  %302 = load i8*, i8** %sv_any484, align 8
  %303 = bitcast i8* %302 to %struct.xpviv*
  %xiv_iv = getelementptr inbounds %struct.xpviv, %struct.xpviv* %303, i32 0, i32 3
  %304 = load i64, i64* %xiv_iv, align 8
  br label %cond.end.487

cond.false.485:                                   ; preds = %cond.end.476
  %305 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %call486 = call i64 @Perl_sv_2iv(%struct.sv* %305)
  br label %cond.end.487

cond.end.487:                                     ; preds = %cond.false.485, %cond.true.483
  %cond488 = phi i64 [ %304, %cond.true.483 ], [ %call486, %cond.false.485 ]
  br label %cond.end.490

cond.false.489:                                   ; preds = %cond.false.467, %cond.true.464
  br label %cond.end.490

cond.end.490:                                     ; preds = %cond.false.489, %cond.end.487
  %cond491 = phi i64 [ %cond488, %cond.end.487 ], [ 0, %cond.false.489 ]
  %conv492 = trunc i64 %cond491 to i32
  store i32 %conv492, i32* %i, align 4
  br label %if.end.493

if.end.493:                                       ; preds = %cond.end.490, %vaarg.end.460
  %306 = load i32, i32* %i, align 4
  %cmp494 = icmp slt i32 %306, 0
  %conv495 = zext i1 %cmp494 to i32
  %307 = load i8, i8* %left, align 1
  %conv496 = sext i8 %307 to i32
  %or497 = or i32 %conv496, %conv495
  %conv498 = trunc i32 %or497 to i8
  store i8 %conv498, i8* %left, align 1
  %308 = load i32, i32* %i, align 4
  %cmp499 = icmp slt i32 %308, 0
  br i1 %cmp499, label %cond.true.501, label %cond.false.503

cond.true.501:                                    ; preds = %if.end.493
  %309 = load i32, i32* %i, align 4
  %sub502 = sub nsw i32 0, %309
  br label %cond.end.504

cond.false.503:                                   ; preds = %if.end.493
  %310 = load i32, i32* %i, align 4
  br label %cond.end.504

cond.end.504:                                     ; preds = %cond.false.503, %cond.true.501
  %cond505 = phi i32 [ %sub502, %cond.true.501 ], [ %310, %cond.false.503 ]
  %conv506 = sext i32 %cond505 to i64
  store i64 %conv506, i64* %width, align 8
  br label %if.end.507

if.end.507:                                       ; preds = %cond.end.504, %if.end.445
  br label %gotwidth

gotwidth:                                         ; preds = %if.end.507, %if.else.242
  %311 = load i8*, i8** %q, align 8
  %312 = load i8, i8* %311, align 1
  %conv508 = sext i8 %312 to i32
  %cmp509 = icmp eq i32 %conv508, 46
  br i1 %cmp509, label %if.then.511, label %if.end.604

if.then.511:                                      ; preds = %gotwidth
  %313 = load i8*, i8** %q, align 8
  %incdec.ptr512 = getelementptr inbounds i8, i8* %313, i32 1
  store i8* %incdec.ptr512, i8** %q, align 8
  %314 = load i8*, i8** %q, align 8
  %315 = load i8, i8* %314, align 1
  %conv513 = sext i8 %315 to i32
  %cmp514 = icmp eq i32 %conv513, 42
  br i1 %cmp514, label %if.then.516, label %if.else.584

if.then.516:                                      ; preds = %if.then.511
  %316 = load i8*, i8** %q, align 8
  %incdec.ptr517 = getelementptr inbounds i8, i8* %316, i32 1
  store i8* %incdec.ptr517, i8** %q, align 8
  %call518 = call i32 @S_expect_number(i8** %q)
  store i32 %call518, i32* %epix, align 4
  %tobool519 = icmp ne i32 %call518, 0
  br i1 %tobool519, label %land.lhs.true.520, label %if.end.526

land.lhs.true.520:                                ; preds = %if.then.516
  %317 = load i8*, i8** %q, align 8
  %incdec.ptr521 = getelementptr inbounds i8, i8* %317, i32 1
  store i8* %incdec.ptr521, i8** %q, align 8
  %318 = load i8, i8* %317, align 1
  %conv522 = sext i8 %318 to i32
  %cmp523 = icmp ne i32 %conv522, 36
  br i1 %cmp523, label %if.then.525, label %if.end.526

if.then.525:                                      ; preds = %land.lhs.true.520
  br label %unknown

if.end.526:                                       ; preds = %land.lhs.true.520, %if.then.516
  %319 = load i32, i32* %epix, align 4
  %tobool527 = icmp ne i32 %319, 0
  br i1 %tobool527, label %if.then.528, label %if.end.529

if.then.528:                                      ; preds = %if.end.526
  br label %unknown

if.end.529:                                       ; preds = %if.end.526
  %320 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %tobool530 = icmp ne [1 x %struct.__va_list_tag]* %320, null
  br i1 %tobool530, label %if.then.531, label %if.else.544

if.then.531:                                      ; preds = %if.end.529
  %321 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay532 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %321, i32 0, i32 0
  %gp_offset_p533 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay532, i32 0, i32 0
  %gp_offset534 = load i32, i32* %gp_offset_p533
  %fits_in_gp535 = icmp ule i32 %gp_offset534, 40
  br i1 %fits_in_gp535, label %vaarg.in_reg.536, label %vaarg.in_mem.538

vaarg.in_reg.536:                                 ; preds = %if.then.531
  %322 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay532, i32 0, i32 3
  %reg_save_area537 = load i8*, i8** %322
  %323 = getelementptr i8, i8* %reg_save_area537, i32 %gp_offset534
  %324 = bitcast i8* %323 to i32*
  %325 = add i32 %gp_offset534, 8
  store i32 %325, i32* %gp_offset_p533
  br label %vaarg.end.542

vaarg.in_mem.538:                                 ; preds = %if.then.531
  %overflow_arg_area_p539 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay532, i32 0, i32 2
  %overflow_arg_area540 = load i8*, i8** %overflow_arg_area_p539
  %326 = bitcast i8* %overflow_arg_area540 to i32*
  %overflow_arg_area.next541 = getelementptr i8, i8* %overflow_arg_area540, i32 8
  store i8* %overflow_arg_area.next541, i8** %overflow_arg_area_p539
  br label %vaarg.end.542

vaarg.end.542:                                    ; preds = %vaarg.in_mem.538, %vaarg.in_reg.536
  %vaarg.addr543 = phi i32* [ %324, %vaarg.in_reg.536 ], [ %326, %vaarg.in_mem.538 ]
  %327 = load i32, i32* %vaarg.addr543
  store i32 %327, i32* %i, align 4
  br label %if.end.576

if.else.544:                                      ; preds = %if.end.529
  %328 = load i32, i32* %ewix, align 4
  %tobool545 = icmp ne i32 %328, 0
  br i1 %tobool545, label %cond.true.546, label %cond.false.549

cond.true.546:                                    ; preds = %if.else.544
  %329 = load i32, i32* %ewix, align 4
  %330 = load i32, i32* %svmax.addr, align 4
  %cmp547 = icmp sle i32 %329, %330
  br i1 %cmp547, label %cond.true.552, label %cond.false.572

cond.false.549:                                   ; preds = %if.else.544
  %331 = load i32, i32* %svix, align 4
  %332 = load i32, i32* %svmax.addr, align 4
  %cmp550 = icmp slt i32 %331, %332
  br i1 %cmp550, label %cond.true.552, label %cond.false.572

cond.true.552:                                    ; preds = %cond.false.549, %cond.true.546
  %333 = load i32, i32* %ewix, align 4
  %tobool553 = icmp ne i32 %333, 0
  br i1 %tobool553, label %cond.true.554, label %cond.false.556

cond.true.554:                                    ; preds = %cond.true.552
  %334 = load i32, i32* %ewix, align 4
  %sub555 = sub nsw i32 %334, 1
  br label %cond.end.558

cond.false.556:                                   ; preds = %cond.true.552
  %335 = load i32, i32* %svix, align 4
  %inc557 = add nsw i32 %335, 1
  store i32 %inc557, i32* %svix, align 4
  br label %cond.end.558

cond.end.558:                                     ; preds = %cond.false.556, %cond.true.554
  %cond559 = phi i32 [ %sub555, %cond.true.554 ], [ %335, %cond.false.556 ]
  %idxprom560 = sext i32 %cond559 to i64
  %336 = load %struct.sv**, %struct.sv*** %svargs.addr, align 8
  %arrayidx561 = getelementptr inbounds %struct.sv*, %struct.sv** %336, i64 %idxprom560
  %337 = load %struct.sv*, %struct.sv** %arrayidx561, align 8
  store %struct.sv* %337, %struct.sv** @PL_Sv, align 8
  %338 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags562 = getelementptr inbounds %struct.sv, %struct.sv* %338, i32 0, i32 2
  %339 = load i32, i32* %sv_flags562, align 4
  %and563 = and i32 %339, 65536
  %tobool564 = icmp ne i32 %and563, 0
  br i1 %tobool564, label %cond.true.565, label %cond.false.568

cond.true.565:                                    ; preds = %cond.end.558
  %340 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any566 = getelementptr inbounds %struct.sv, %struct.sv* %340, i32 0, i32 0
  %341 = load i8*, i8** %sv_any566, align 8
  %342 = bitcast i8* %341 to %struct.xpviv*
  %xiv_iv567 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %342, i32 0, i32 3
  %343 = load i64, i64* %xiv_iv567, align 8
  br label %cond.end.570

cond.false.568:                                   ; preds = %cond.end.558
  %344 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %call569 = call i64 @Perl_sv_2iv(%struct.sv* %344)
  br label %cond.end.570

cond.end.570:                                     ; preds = %cond.false.568, %cond.true.565
  %cond571 = phi i64 [ %343, %cond.true.565 ], [ %call569, %cond.false.568 ]
  br label %cond.end.573

cond.false.572:                                   ; preds = %cond.false.549, %cond.true.546
  br label %cond.end.573

cond.end.573:                                     ; preds = %cond.false.572, %cond.end.570
  %cond574 = phi i64 [ %cond571, %cond.end.570 ], [ 0, %cond.false.572 ]
  %conv575 = trunc i64 %cond574 to i32
  store i32 %conv575, i32* %i, align 4
  br label %if.end.576

if.end.576:                                       ; preds = %cond.end.573, %vaarg.end.542
  %345 = load i32, i32* %i, align 4
  %cmp577 = icmp slt i32 %345, 0
  br i1 %cmp577, label %cond.true.579, label %cond.false.580

cond.true.579:                                    ; preds = %if.end.576
  br label %cond.end.581

cond.false.580:                                   ; preds = %if.end.576
  %346 = load i32, i32* %i, align 4
  br label %cond.end.581

cond.end.581:                                     ; preds = %cond.false.580, %cond.true.579
  %cond582 = phi i32 [ 0, %cond.true.579 ], [ %346, %cond.false.580 ]
  %conv583 = sext i32 %cond582 to i64
  store i64 %conv583, i64* %precis, align 8
  br label %if.end.603

if.else.584:                                      ; preds = %if.then.511
  store i64 0, i64* %precis, align 8
  br label %while.cond.585

while.cond.585:                                   ; preds = %while.body.595, %if.else.584
  %347 = load i8*, i8** %q, align 8
  %348 = load i8, i8* %347, align 1
  %conv586 = sext i8 %348 to i32
  %cmp587 = icmp sge i32 %conv586, 48
  br i1 %cmp587, label %land.rhs.589, label %land.end.593

land.rhs.589:                                     ; preds = %while.cond.585
  %349 = load i8*, i8** %q, align 8
  %350 = load i8, i8* %349, align 1
  %conv590 = sext i8 %350 to i32
  %cmp591 = icmp sle i32 %conv590, 57
  br label %land.end.593

land.end.593:                                     ; preds = %land.rhs.589, %while.cond.585
  %351 = phi i1 [ false, %while.cond.585 ], [ %cmp591, %land.rhs.589 ]
  br i1 %351, label %while.body.595, label %while.end.602

while.body.595:                                   ; preds = %land.end.593
  %352 = load i64, i64* %precis, align 8
  %mul596 = mul i64 %352, 10
  %353 = load i8*, i8** %q, align 8
  %incdec.ptr597 = getelementptr inbounds i8, i8* %353, i32 1
  store i8* %incdec.ptr597, i8** %q, align 8
  %354 = load i8, i8* %353, align 1
  %conv598 = sext i8 %354 to i32
  %sub599 = sub nsw i32 %conv598, 48
  %conv600 = sext i32 %sub599 to i64
  %add601 = add i64 %mul596, %conv600
  store i64 %add601, i64* %precis, align 8
  br label %while.cond.585

while.end.602:                                    ; preds = %land.end.593
  br label %if.end.603

if.end.603:                                       ; preds = %while.end.602, %cond.end.581
  store i8 1, i8* %has_precis, align 1
  br label %if.end.604

if.end.604:                                       ; preds = %if.end.603, %gotwidth
  %355 = load i8*, i8** %q, align 8
  %356 = load i8, i8* %355, align 1
  %conv605 = sext i8 %356 to i32
  switch i32 %conv605, label %sw.epilog.618 [
    i32 76, label %sw.bb.606
    i32 113, label %sw.bb.606
    i32 108, label %sw.bb.608
    i32 104, label %sw.bb.616
    i32 86, label %sw.bb.616
  ]

sw.bb.606:                                        ; preds = %if.end.604, %if.end.604
  store i8 113, i8* %intsize, align 1
  %357 = load i8*, i8** %q, align 8
  %incdec.ptr607 = getelementptr inbounds i8, i8* %357, i32 1
  store i8* %incdec.ptr607, i8** %q, align 8
  br label %sw.epilog.618

sw.bb.608:                                        ; preds = %if.end.604
  %358 = load i8*, i8** %q, align 8
  %add.ptr609 = getelementptr inbounds i8, i8* %358, i64 1
  %359 = load i8, i8* %add.ptr609, align 1
  %conv610 = sext i8 %359 to i32
  %cmp611 = icmp eq i32 %conv610, 108
  br i1 %cmp611, label %if.then.613, label %if.end.615

if.then.613:                                      ; preds = %sw.bb.608
  store i8 113, i8* %intsize, align 1
  %360 = load i8*, i8** %q, align 8
  %add.ptr614 = getelementptr inbounds i8, i8* %360, i64 2
  store i8* %add.ptr614, i8** %q, align 8
  br label %sw.epilog.618

if.end.615:                                       ; preds = %sw.bb.608
  br label %sw.bb.616

sw.bb.616:                                        ; preds = %if.end.604, %if.end.604, %if.end.615
  %361 = load i8*, i8** %q, align 8
  %incdec.ptr617 = getelementptr inbounds i8, i8* %361, i32 1
  store i8* %incdec.ptr617, i8** %q, align 8
  %362 = load i8, i8* %361, align 1
  store i8 %362, i8* %intsize, align 1
  br label %sw.epilog.618

sw.epilog.618:                                    ; preds = %if.end.604, %sw.bb.616, %if.then.613, %sw.bb.606
  %363 = load i8*, i8** %q, align 8
  %364 = load i8, i8* %363, align 1
  %conv619 = sext i8 %364 to i32
  %cmp620 = icmp eq i32 %conv619, 37
  br i1 %cmp620, label %if.then.622, label %if.end.624

if.then.622:                                      ; preds = %sw.epilog.618
  %365 = load i8*, i8** %q, align 8
  %incdec.ptr623 = getelementptr inbounds i8, i8* %365, i32 1
  store i8* %incdec.ptr623, i8** %q, align 8
  store i8* %365, i8** %eptr, align 8
  store i64 1, i64* %elen, align 8
  br label %string

if.end.624:                                       ; preds = %sw.epilog.618
  %366 = load i8, i8* %vectorize, align 1
  %tobool625 = icmp ne i8 %366, 0
  br i1 %tobool625, label %if.then.626, label %if.else.627

if.then.626:                                      ; preds = %if.end.624
  %367 = load %struct.sv*, %struct.sv** %vecsv, align 8
  store %struct.sv* %367, %struct.sv** %argsv, align 8
  br label %if.end.651

if.else.627:                                      ; preds = %if.end.624
  %368 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %tobool628 = icmp ne [1 x %struct.__va_list_tag]* %368, null
  br i1 %tobool628, label %if.end.650, label %if.then.629

if.then.629:                                      ; preds = %if.else.627
  %369 = load i32, i32* %efix, align 4
  %tobool630 = icmp ne i32 %369, 0
  br i1 %tobool630, label %cond.true.631, label %cond.false.634

cond.true.631:                                    ; preds = %if.then.629
  %370 = load i32, i32* %efix, align 4
  %371 = load i32, i32* %svmax.addr, align 4
  %cmp632 = icmp sle i32 %370, %371
  br i1 %cmp632, label %cond.true.637, label %cond.false.647

cond.false.634:                                   ; preds = %if.then.629
  %372 = load i32, i32* %svix, align 4
  %373 = load i32, i32* %svmax.addr, align 4
  %cmp635 = icmp slt i32 %372, %373
  br i1 %cmp635, label %cond.true.637, label %cond.false.647

cond.true.637:                                    ; preds = %cond.false.634, %cond.true.631
  %374 = load i32, i32* %efix, align 4
  %tobool638 = icmp ne i32 %374, 0
  br i1 %tobool638, label %cond.true.639, label %cond.false.641

cond.true.639:                                    ; preds = %cond.true.637
  %375 = load i32, i32* %efix, align 4
  %sub640 = sub nsw i32 %375, 1
  br label %cond.end.643

cond.false.641:                                   ; preds = %cond.true.637
  %376 = load i32, i32* %svix, align 4
  %inc642 = add nsw i32 %376, 1
  store i32 %inc642, i32* %svix, align 4
  br label %cond.end.643

cond.end.643:                                     ; preds = %cond.false.641, %cond.true.639
  %cond644 = phi i32 [ %sub640, %cond.true.639 ], [ %376, %cond.false.641 ]
  %idxprom645 = sext i32 %cond644 to i64
  %377 = load %struct.sv**, %struct.sv*** %svargs.addr, align 8
  %arrayidx646 = getelementptr inbounds %struct.sv*, %struct.sv** %377, i64 %idxprom645
  %378 = load %struct.sv*, %struct.sv** %arrayidx646, align 8
  br label %cond.end.648

cond.false.647:                                   ; preds = %cond.false.634, %cond.true.631
  br label %cond.end.648

cond.end.648:                                     ; preds = %cond.false.647, %cond.end.643
  %cond649 = phi %struct.sv* [ %378, %cond.end.643 ], [ @PL_sv_undef, %cond.false.647 ]
  store %struct.sv* %cond649, %struct.sv** %argsv, align 8
  br label %if.end.650

if.end.650:                                       ; preds = %cond.end.648, %if.else.627
  br label %if.end.651

if.end.651:                                       ; preds = %if.end.650, %if.then.626
  %379 = load i8*, i8** %q, align 8
  %incdec.ptr652 = getelementptr inbounds i8, i8* %379, i32 1
  store i8* %incdec.ptr652, i8** %q, align 8
  %380 = load i8, i8* %379, align 1
  store i8 %380, i8* %c, align 1
  %conv653 = sext i8 %380 to i32
  switch i32 %conv653, label %sw.default.1491 [
    i32 99, label %sw.bb.654
    i32 115, label %sw.bb.709
    i32 95, label %sw.bb.772
    i32 112, label %sw.bb.821
    i32 68, label %sw.bb.846
    i32 100, label %sw.bb.847
    i32 105, label %sw.bb.847
    i32 85, label %sw.bb.977
    i32 117, label %sw.bb.978
    i32 98, label %sw.bb.979
    i32 79, label %sw.bb.980
    i32 111, label %sw.bb.981
    i32 88, label %sw.bb.982
    i32 120, label %sw.bb.982
    i32 70, label %sw.bb.1189
    i32 101, label %sw.bb.1190
    i32 69, label %sw.bb.1190
    i32 102, label %sw.bb.1190
    i32 103, label %sw.bb.1190
    i32 71, label %sw.bb.1190
    i32 110, label %sw.bb.1408
  ]

sw.bb.654:                                        ; preds = %if.end.651
  %381 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %tobool655 = icmp ne [1 x %struct.__va_list_tag]* %381, null
  br i1 %tobool655, label %land.lhs.true.656, label %cond.false.672

land.lhs.true.656:                                ; preds = %sw.bb.654
  %382 = load i8, i8* %vectorize, align 1
  %tobool657 = icmp ne i8 %382, 0
  br i1 %tobool657, label %cond.false.672, label %cond.true.658

cond.true.658:                                    ; preds = %land.lhs.true.656
  %383 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay659 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %383, i32 0, i32 0
  %gp_offset_p660 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay659, i32 0, i32 0
  %gp_offset661 = load i32, i32* %gp_offset_p660
  %fits_in_gp662 = icmp ule i32 %gp_offset661, 40
  br i1 %fits_in_gp662, label %vaarg.in_reg.663, label %vaarg.in_mem.665

vaarg.in_reg.663:                                 ; preds = %cond.true.658
  %384 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay659, i32 0, i32 3
  %reg_save_area664 = load i8*, i8** %384
  %385 = getelementptr i8, i8* %reg_save_area664, i32 %gp_offset661
  %386 = bitcast i8* %385 to i32*
  %387 = add i32 %gp_offset661, 8
  store i32 %387, i32* %gp_offset_p660
  br label %vaarg.end.669

vaarg.in_mem.665:                                 ; preds = %cond.true.658
  %overflow_arg_area_p666 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay659, i32 0, i32 2
  %overflow_arg_area667 = load i8*, i8** %overflow_arg_area_p666
  %388 = bitcast i8* %overflow_arg_area667 to i32*
  %overflow_arg_area.next668 = getelementptr i8, i8* %overflow_arg_area667, i32 8
  store i8* %overflow_arg_area.next668, i8** %overflow_arg_area_p666
  br label %vaarg.end.669

vaarg.end.669:                                    ; preds = %vaarg.in_mem.665, %vaarg.in_reg.663
  %vaarg.addr670 = phi i32* [ %386, %vaarg.in_reg.663 ], [ %388, %vaarg.in_mem.665 ]
  %389 = load i32, i32* %vaarg.addr670
  %conv671 = sext i32 %389 to i64
  br label %cond.end.683

cond.false.672:                                   ; preds = %land.lhs.true.656, %sw.bb.654
  %390 = load %struct.sv*, %struct.sv** %argsv, align 8
  store %struct.sv* %390, %struct.sv** @PL_Sv, align 8
  %391 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags673 = getelementptr inbounds %struct.sv, %struct.sv* %391, i32 0, i32 2
  %392 = load i32, i32* %sv_flags673, align 4
  %and674 = and i32 %392, 65536
  %tobool675 = icmp ne i32 %and674, 0
  br i1 %tobool675, label %cond.true.676, label %cond.false.679

cond.true.676:                                    ; preds = %cond.false.672
  %393 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any677 = getelementptr inbounds %struct.sv, %struct.sv* %393, i32 0, i32 0
  %394 = load i8*, i8** %sv_any677, align 8
  %395 = bitcast i8* %394 to %struct.xpviv*
  %xiv_iv678 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %395, i32 0, i32 3
  %396 = load i64, i64* %xiv_iv678, align 8
  br label %cond.end.681

cond.false.679:                                   ; preds = %cond.false.672
  %397 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %call680 = call i64 @Perl_sv_2iv(%struct.sv* %397)
  br label %cond.end.681

cond.end.681:                                     ; preds = %cond.false.679, %cond.true.676
  %cond682 = phi i64 [ %396, %cond.true.676 ], [ %call680, %cond.false.679 ]
  br label %cond.end.683

cond.end.683:                                     ; preds = %cond.end.681, %vaarg.end.669
  %cond684 = phi i64 [ %conv671, %vaarg.end.669 ], [ %cond682, %cond.end.681 ]
  store i64 %cond684, i64* %uv, align 8
  %398 = load i64, i64* %uv, align 8
  %cmp685 = icmp ugt i64 %398, 255
  br i1 %cmp685, label %land.lhs.true.694, label %lor.lhs.false.687

lor.lhs.false.687:                                ; preds = %cond.end.683
  %399 = load i64, i64* %uv, align 8
  %cmp688 = icmp ult i64 %399, 128
  br i1 %cmp688, label %if.else.706, label %land.lhs.true.690

land.lhs.true.690:                                ; preds = %lor.lhs.false.687
  %400 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags691 = getelementptr inbounds %struct.sv, %struct.sv* %400, i32 0, i32 2
  %401 = load i32, i32* %sv_flags691, align 4
  %and692 = and i32 %401, 536870912
  %tobool693 = icmp ne i32 %and692, 0
  br i1 %tobool693, label %land.lhs.true.694, label %if.else.706

land.lhs.true.694:                                ; preds = %land.lhs.true.690, %cond.end.683
  %402 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %op_private695 = getelementptr inbounds %struct.cop, %struct.cop* %402, i32 0, i32 7
  %403 = load i8, i8* %op_private695, align 1
  %conv696 = zext i8 %403 to i32
  %and697 = and i32 %conv696, 8
  %tobool698 = icmp ne i32 %and697, 0
  br i1 %tobool698, label %if.else.706, label %if.then.699

if.then.699:                                      ; preds = %land.lhs.true.694
  %arraydecay700 = getelementptr inbounds [14 x i8], [14 x i8]* %utf8buf, i32 0, i32 0
  store i8* %arraydecay700, i8** %eptr, align 8
  %404 = load i8*, i8** %eptr, align 8
  %405 = load i64, i64* %uv, align 8
  %call701 = call i8* @Perl_uvuni_to_utf8(i8* %404, i64 %405)
  %arraydecay702 = getelementptr inbounds [14 x i8], [14 x i8]* %utf8buf, i32 0, i32 0
  %sub.ptr.lhs.cast703 = ptrtoint i8* %call701 to i64
  %sub.ptr.rhs.cast704 = ptrtoint i8* %arraydecay702 to i64
  %sub.ptr.sub705 = sub i64 %sub.ptr.lhs.cast703, %sub.ptr.rhs.cast704
  store i64 %sub.ptr.sub705, i64* %elen, align 8
  store i8 1, i8* %is_utf8, align 1
  br label %if.end.708

if.else.706:                                      ; preds = %land.lhs.true.694, %land.lhs.true.690, %lor.lhs.false.687
  %406 = load i64, i64* %uv, align 8
  %conv707 = trunc i64 %406 to i8
  store i8 %conv707, i8* %c, align 1
  store i8* %c, i8** %eptr, align 8
  store i64 1, i64* %elen, align 8
  br label %if.end.708

if.end.708:                                       ; preds = %if.else.706, %if.then.699
  br label %string

sw.bb.709:                                        ; preds = %if.end.651
  %407 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %tobool710 = icmp ne [1 x %struct.__va_list_tag]* %407, null
  br i1 %tobool710, label %land.lhs.true.711, label %if.else.731

land.lhs.true.711:                                ; preds = %sw.bb.709
  %408 = load i8, i8* %vectorize, align 1
  %tobool712 = icmp ne i8 %408, 0
  br i1 %tobool712, label %if.else.731, label %if.then.713

if.then.713:                                      ; preds = %land.lhs.true.711
  %409 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay714 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %409, i32 0, i32 0
  %gp_offset_p715 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay714, i32 0, i32 0
  %gp_offset716 = load i32, i32* %gp_offset_p715
  %fits_in_gp717 = icmp ule i32 %gp_offset716, 40
  br i1 %fits_in_gp717, label %vaarg.in_reg.718, label %vaarg.in_mem.720

vaarg.in_reg.718:                                 ; preds = %if.then.713
  %410 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay714, i32 0, i32 3
  %reg_save_area719 = load i8*, i8** %410
  %411 = getelementptr i8, i8* %reg_save_area719, i32 %gp_offset716
  %412 = bitcast i8* %411 to i8**
  %413 = add i32 %gp_offset716, 8
  store i32 %413, i32* %gp_offset_p715
  br label %vaarg.end.724

vaarg.in_mem.720:                                 ; preds = %if.then.713
  %overflow_arg_area_p721 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay714, i32 0, i32 2
  %overflow_arg_area722 = load i8*, i8** %overflow_arg_area_p721
  %414 = bitcast i8* %overflow_arg_area722 to i8**
  %overflow_arg_area.next723 = getelementptr i8, i8* %overflow_arg_area722, i32 8
  store i8* %overflow_arg_area.next723, i8** %overflow_arg_area_p721
  br label %vaarg.end.724

vaarg.end.724:                                    ; preds = %vaarg.in_mem.720, %vaarg.in_reg.718
  %vaarg.addr725 = phi i8** [ %412, %vaarg.in_reg.718 ], [ %414, %vaarg.in_mem.720 ]
  %415 = load i8*, i8** %vaarg.addr725
  store i8* %415, i8** %eptr, align 8
  %416 = load i8*, i8** %eptr, align 8
  %tobool726 = icmp ne i8* %416, null
  br i1 %tobool726, label %if.then.727, label %if.else.729

if.then.727:                                      ; preds = %vaarg.end.724
  %417 = load i8*, i8** %eptr, align 8
  %call728 = call i64 @strlen(i8* %417)
  store i64 %call728, i64* %elen, align 8
  br label %if.end.730

if.else.729:                                      ; preds = %vaarg.end.724
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @Perl_sv_vcatpvfn.nullstr, i32 0, i32 0), i8** %eptr, align 8
  store i64 6, i64* %elen, align 8
  br label %if.end.730

if.end.730:                                       ; preds = %if.else.729, %if.then.727
  br label %if.end.771

if.else.731:                                      ; preds = %land.lhs.true.711, %sw.bb.709
  %418 = load %struct.sv*, %struct.sv** %argsv, align 8
  store %struct.sv* %418, %struct.sv** @PL_Sv, align 8
  %419 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags732 = getelementptr inbounds %struct.sv, %struct.sv* %419, i32 0, i32 2
  %420 = load i32, i32* %sv_flags732, align 4
  %and733 = and i32 %420, 262144
  %cmp734 = icmp eq i32 %and733, 262144
  br i1 %cmp734, label %cond.true.736, label %cond.false.741

cond.true.736:                                    ; preds = %if.else.731
  %421 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any737 = getelementptr inbounds %struct.sv, %struct.sv* %421, i32 0, i32 0
  %422 = load i8*, i8** %sv_any737, align 8
  %423 = bitcast i8* %422 to %struct.xpv*
  %xpv_cur738 = getelementptr inbounds %struct.xpv, %struct.xpv* %423, i32 0, i32 1
  %424 = load i64, i64* %xpv_cur738, align 8
  store i64 %424, i64* %elen, align 8
  %425 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any739 = getelementptr inbounds %struct.sv, %struct.sv* %425, i32 0, i32 0
  %426 = load i8*, i8** %sv_any739, align 8
  %427 = bitcast i8* %426 to %struct.xpv*
  %xpv_pv740 = getelementptr inbounds %struct.xpv, %struct.xpv* %427, i32 0, i32 0
  %428 = load i8*, i8** %xpv_pv740, align 8
  br label %cond.end.743

cond.false.741:                                   ; preds = %if.else.731
  %429 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %call742 = call i8* @Perl_sv_2pv_flags(%struct.sv* %429, i64* %elen, i32 2)
  br label %cond.end.743

cond.end.743:                                     ; preds = %cond.false.741, %cond.true.736
  %cond744 = phi i8* [ %428, %cond.true.736 ], [ %call742, %cond.false.741 ]
  store i8* %cond744, i8** %eptr, align 8
  %430 = load %struct.sv*, %struct.sv** %argsv, align 8
  %sv_flags745 = getelementptr inbounds %struct.sv, %struct.sv* %430, i32 0, i32 2
  %431 = load i32, i32* %sv_flags745, align 4
  %and746 = and i32 %431, 536870912
  %tobool747 = icmp ne i32 %and746, 0
  br i1 %tobool747, label %land.lhs.true.748, label %if.end.770

land.lhs.true.748:                                ; preds = %cond.end.743
  %432 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %op_private749 = getelementptr inbounds %struct.cop, %struct.cop* %432, i32 0, i32 7
  %433 = load i8, i8* %op_private749, align 1
  %conv750 = zext i8 %433 to i32
  %and751 = and i32 %conv750, 8
  %tobool752 = icmp ne i32 %and751, 0
  br i1 %tobool752, label %if.end.770, label %if.then.753

if.then.753:                                      ; preds = %land.lhs.true.748
  %434 = load i8, i8* %has_precis, align 1
  %conv754 = sext i8 %434 to i32
  %tobool755 = icmp ne i32 %conv754, 0
  br i1 %tobool755, label %land.lhs.true.756, label %if.end.763

land.lhs.true.756:                                ; preds = %if.then.753
  %435 = load i64, i64* %precis, align 8
  %436 = load i64, i64* %elen, align 8
  %cmp757 = icmp ult i64 %435, %436
  br i1 %cmp757, label %if.then.759, label %if.end.763

if.then.759:                                      ; preds = %land.lhs.true.756
  %437 = load i64, i64* %precis, align 8
  %conv761 = trunc i64 %437 to i32
  store i32 %conv761, i32* %p760, align 4
  %438 = load %struct.sv*, %struct.sv** %argsv, align 8
  call void @Perl_sv_pos_u2b(%struct.sv* %438, i32* %p760, i32* null)
  %439 = load i32, i32* %p760, align 4
  %conv762 = sext i32 %439 to i64
  store i64 %conv762, i64* %precis, align 8
  br label %if.end.763

if.end.763:                                       ; preds = %if.then.759, %land.lhs.true.756, %if.then.753
  %440 = load i64, i64* %width, align 8
  %tobool764 = icmp ne i64 %440, 0
  br i1 %tobool764, label %if.then.765, label %if.end.769

if.then.765:                                      ; preds = %if.end.763
  %441 = load i64, i64* %elen, align 8
  %442 = load %struct.sv*, %struct.sv** %argsv, align 8
  %call766 = call i64 @Perl_sv_len_utf8(%struct.sv* %442)
  %sub767 = sub i64 %441, %call766
  %443 = load i64, i64* %width, align 8
  %add768 = add i64 %443, %sub767
  store i64 %add768, i64* %width, align 8
  br label %if.end.769

if.end.769:                                       ; preds = %if.then.765, %if.end.763
  store i8 1, i8* %is_utf8, align 1
  br label %if.end.770

if.end.770:                                       ; preds = %if.end.769, %land.lhs.true.748, %cond.end.743
  br label %if.end.771

if.end.771:                                       ; preds = %if.end.770, %if.end.730
  br label %string

sw.bb.772:                                        ; preds = %if.end.651
  %444 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %tobool773 = icmp ne [1 x %struct.__va_list_tag]* %444, null
  br i1 %tobool773, label %lor.lhs.false.774, label %if.then.777

lor.lhs.false.774:                                ; preds = %sw.bb.772
  %445 = load i8, i8* %vectorize, align 1
  %conv775 = sext i8 %445 to i32
  %tobool776 = icmp ne i32 %conv775, 0
  br i1 %tobool776, label %if.then.777, label %if.end.778

if.then.777:                                      ; preds = %lor.lhs.false.774, %sw.bb.772
  br label %unknown

if.end.778:                                       ; preds = %lor.lhs.false.774
  %446 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay779 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %446, i32 0, i32 0
  %gp_offset_p780 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay779, i32 0, i32 0
  %gp_offset781 = load i32, i32* %gp_offset_p780
  %fits_in_gp782 = icmp ule i32 %gp_offset781, 40
  br i1 %fits_in_gp782, label %vaarg.in_reg.783, label %vaarg.in_mem.785

vaarg.in_reg.783:                                 ; preds = %if.end.778
  %447 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay779, i32 0, i32 3
  %reg_save_area784 = load i8*, i8** %447
  %448 = getelementptr i8, i8* %reg_save_area784, i32 %gp_offset781
  %449 = bitcast i8* %448 to %struct.sv**
  %450 = add i32 %gp_offset781, 8
  store i32 %450, i32* %gp_offset_p780
  br label %vaarg.end.789

vaarg.in_mem.785:                                 ; preds = %if.end.778
  %overflow_arg_area_p786 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay779, i32 0, i32 2
  %overflow_arg_area787 = load i8*, i8** %overflow_arg_area_p786
  %451 = bitcast i8* %overflow_arg_area787 to %struct.sv**
  %overflow_arg_area.next788 = getelementptr i8, i8* %overflow_arg_area787, i32 8
  store i8* %overflow_arg_area.next788, i8** %overflow_arg_area_p786
  br label %vaarg.end.789

vaarg.end.789:                                    ; preds = %vaarg.in_mem.785, %vaarg.in_reg.783
  %vaarg.addr790 = phi %struct.sv** [ %449, %vaarg.in_reg.783 ], [ %451, %vaarg.in_mem.785 ]
  %452 = load %struct.sv*, %struct.sv** %vaarg.addr790
  store %struct.sv* %452, %struct.sv** %argsv, align 8
  %453 = load %struct.sv*, %struct.sv** %argsv, align 8
  store %struct.sv* %453, %struct.sv** @PL_Sv, align 8
  %454 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags791 = getelementptr inbounds %struct.sv, %struct.sv* %454, i32 0, i32 2
  %455 = load i32, i32* %sv_flags791, align 4
  %and792 = and i32 %455, 262144
  %cmp793 = icmp eq i32 %and792, 262144
  br i1 %cmp793, label %cond.true.795, label %cond.false.800

cond.true.795:                                    ; preds = %vaarg.end.789
  %456 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any796 = getelementptr inbounds %struct.sv, %struct.sv* %456, i32 0, i32 0
  %457 = load i8*, i8** %sv_any796, align 8
  %458 = bitcast i8* %457 to %struct.xpv*
  %xpv_cur797 = getelementptr inbounds %struct.xpv, %struct.xpv* %458, i32 0, i32 1
  %459 = load i64, i64* %xpv_cur797, align 8
  store i64 %459, i64* %elen, align 8
  %460 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any798 = getelementptr inbounds %struct.sv, %struct.sv* %460, i32 0, i32 0
  %461 = load i8*, i8** %sv_any798, align 8
  %462 = bitcast i8* %461 to %struct.xpv*
  %xpv_pv799 = getelementptr inbounds %struct.xpv, %struct.xpv* %462, i32 0, i32 0
  %463 = load i8*, i8** %xpv_pv799, align 8
  br label %cond.end.802

cond.false.800:                                   ; preds = %vaarg.end.789
  %464 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %call801 = call i8* @Perl_sv_2pv_flags(%struct.sv* %464, i64* %elen, i32 2)
  br label %cond.end.802

cond.end.802:                                     ; preds = %cond.false.800, %cond.true.795
  %cond803 = phi i8* [ %463, %cond.true.795 ], [ %call801, %cond.false.800 ]
  store i8* %cond803, i8** %eptr, align 8
  %465 = load %struct.sv*, %struct.sv** %argsv, align 8
  %sv_flags804 = getelementptr inbounds %struct.sv, %struct.sv* %465, i32 0, i32 2
  %466 = load i32, i32* %sv_flags804, align 4
  %and805 = and i32 %466, 536870912
  %tobool806 = icmp ne i32 %and805, 0
  br i1 %tobool806, label %land.lhs.true.807, label %if.end.813

land.lhs.true.807:                                ; preds = %cond.end.802
  %467 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %op_private808 = getelementptr inbounds %struct.cop, %struct.cop* %467, i32 0, i32 7
  %468 = load i8, i8* %op_private808, align 1
  %conv809 = zext i8 %468 to i32
  %and810 = and i32 %conv809, 8
  %tobool811 = icmp ne i32 %and810, 0
  br i1 %tobool811, label %if.end.813, label %if.then.812

if.then.812:                                      ; preds = %land.lhs.true.807
  store i8 1, i8* %is_utf8, align 1
  br label %if.end.813

if.end.813:                                       ; preds = %if.then.812, %land.lhs.true.807, %cond.end.802
  br label %string

string:                                           ; preds = %if.end.813, %if.end.771, %if.end.708, %if.then.622
  store i8 0, i8* %vectorize, align 1
  %469 = load i8, i8* %has_precis, align 1
  %conv814 = sext i8 %469 to i32
  %tobool815 = icmp ne i32 %conv814, 0
  br i1 %tobool815, label %land.lhs.true.816, label %if.end.820

land.lhs.true.816:                                ; preds = %string
  %470 = load i64, i64* %elen, align 8
  %471 = load i64, i64* %precis, align 8
  %cmp817 = icmp ugt i64 %470, %471
  br i1 %cmp817, label %if.then.819, label %if.end.820

if.then.819:                                      ; preds = %land.lhs.true.816
  %472 = load i64, i64* %precis, align 8
  store i64 %472, i64* %elen, align 8
  br label %if.end.820

if.end.820:                                       ; preds = %if.then.819, %land.lhs.true.816, %string
  br label %sw.epilog.1600

sw.bb.821:                                        ; preds = %if.end.651
  %473 = load i8, i8* %alt, align 1
  %conv822 = sext i8 %473 to i32
  %tobool823 = icmp ne i32 %conv822, 0
  br i1 %tobool823, label %if.then.827, label %lor.lhs.false.824

lor.lhs.false.824:                                ; preds = %sw.bb.821
  %474 = load i8, i8* %vectorize, align 1
  %conv825 = sext i8 %474 to i32
  %tobool826 = icmp ne i32 %conv825, 0
  br i1 %tobool826, label %if.then.827, label %if.end.828

if.then.827:                                      ; preds = %lor.lhs.false.824, %sw.bb.821
  br label %unknown

if.end.828:                                       ; preds = %lor.lhs.false.824
  %475 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %tobool829 = icmp ne [1 x %struct.__va_list_tag]* %475, null
  br i1 %tobool829, label %cond.true.830, label %cond.false.843

cond.true.830:                                    ; preds = %if.end.828
  %476 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay831 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %476, i32 0, i32 0
  %gp_offset_p832 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay831, i32 0, i32 0
  %gp_offset833 = load i32, i32* %gp_offset_p832
  %fits_in_gp834 = icmp ule i32 %gp_offset833, 40
  br i1 %fits_in_gp834, label %vaarg.in_reg.835, label %vaarg.in_mem.837

vaarg.in_reg.835:                                 ; preds = %cond.true.830
  %477 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay831, i32 0, i32 3
  %reg_save_area836 = load i8*, i8** %477
  %478 = getelementptr i8, i8* %reg_save_area836, i32 %gp_offset833
  %479 = bitcast i8* %478 to i8**
  %480 = add i32 %gp_offset833, 8
  store i32 %480, i32* %gp_offset_p832
  br label %vaarg.end.841

vaarg.in_mem.837:                                 ; preds = %cond.true.830
  %overflow_arg_area_p838 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay831, i32 0, i32 2
  %overflow_arg_area839 = load i8*, i8** %overflow_arg_area_p838
  %481 = bitcast i8* %overflow_arg_area839 to i8**
  %overflow_arg_area.next840 = getelementptr i8, i8* %overflow_arg_area839, i32 8
  store i8* %overflow_arg_area.next840, i8** %overflow_arg_area_p838
  br label %vaarg.end.841

vaarg.end.841:                                    ; preds = %vaarg.in_mem.837, %vaarg.in_reg.835
  %vaarg.addr842 = phi i8** [ %479, %vaarg.in_reg.835 ], [ %481, %vaarg.in_mem.837 ]
  %482 = load i8*, i8** %vaarg.addr842
  br label %cond.end.844

cond.false.843:                                   ; preds = %if.end.828
  %483 = load %struct.sv*, %struct.sv** %argsv, align 8
  %484 = bitcast %struct.sv* %483 to i8*
  br label %cond.end.844

cond.end.844:                                     ; preds = %cond.false.843, %vaarg.end.841
  %cond845 = phi i8* [ %482, %vaarg.end.841 ], [ %484, %cond.false.843 ]
  %485 = ptrtoint i8* %cond845 to i64
  store i64 %485, i64* %uv, align 8
  store i32 16, i32* %base, align 4
  br label %integer

sw.bb.846:                                        ; preds = %if.end.651
  store i8 113, i8* %intsize, align 1
  br label %sw.bb.847

sw.bb.847:                                        ; preds = %if.end.651, %if.end.651, %sw.bb.846
  %486 = load i8, i8* %vectorize, align 1
  %tobool848 = icmp ne i8 %486, 0
  br i1 %tobool848, label %if.then.849, label %if.else.866

if.then.849:                                      ; preds = %sw.bb.847
  %487 = load i64, i64* %veclen, align 8
  %tobool850 = icmp ne i64 %487, 0
  br i1 %tobool850, label %if.end.852, label %if.then.851

if.then.851:                                      ; preds = %if.then.849
  br label %for.inc.1826

if.end.852:                                       ; preds = %if.then.849
  %488 = load i8, i8* %vec_utf8, align 1
  %tobool853 = icmp ne i8 %488, 0
  br i1 %tobool853, label %if.then.854, label %if.else.856

if.then.854:                                      ; preds = %if.end.852
  %489 = load i8*, i8** %vecstr, align 8
  %490 = load i64, i64* %veclen, align 8
  %call855 = call i64 @Perl_utf8n_to_uvuni(i8* %489, i64 %490, i64* %ulen, i32 105)
  store i64 %call855, i64* %uv, align 8
  br label %if.end.858

if.else.856:                                      ; preds = %if.end.852
  %491 = load i8*, i8** %vecstr, align 8
  %492 = load i8, i8* %491, align 1
  %conv857 = zext i8 %492 to i64
  store i64 %conv857, i64* %uv, align 8
  store i64 1, i64* %ulen, align 8
  br label %if.end.858

if.end.858:                                       ; preds = %if.else.856, %if.then.854
  %493 = load i64, i64* %ulen, align 8
  %494 = load i8*, i8** %vecstr, align 8
  %add.ptr859 = getelementptr inbounds i8, i8* %494, i64 %493
  store i8* %add.ptr859, i8** %vecstr, align 8
  %495 = load i64, i64* %ulen, align 8
  %496 = load i64, i64* %veclen, align 8
  %sub860 = sub i64 %496, %495
  store i64 %sub860, i64* %veclen, align 8
  %497 = load i8, i8* %plus, align 1
  %tobool861 = icmp ne i8 %497, 0
  br i1 %tobool861, label %if.then.862, label %if.end.865

if.then.862:                                      ; preds = %if.end.858
  %498 = load i8, i8* %plus, align 1
  %499 = load i64, i64* %esignlen, align 8
  %inc863 = add i64 %499, 1
  store i64 %inc863, i64* %esignlen, align 8
  %arrayidx864 = getelementptr inbounds [4 x i8], [4 x i8]* %esignbuf, i32 0, i64 %499
  store i8 %498, i8* %arrayidx864, align 1
  br label %if.end.865

if.end.865:                                       ; preds = %if.then.862, %if.end.858
  br label %if.end.960

if.else.866:                                      ; preds = %sw.bb.847
  %500 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %tobool867 = icmp ne [1 x %struct.__va_list_tag]* %500, null
  br i1 %tobool867, label %if.then.868, label %if.else.939

if.then.868:                                      ; preds = %if.else.866
  %501 = load i8, i8* %intsize, align 1
  %conv869 = sext i8 %501 to i32
  switch i32 %conv869, label %sw.default.911 [
    i32 104, label %sw.bb.870
    i32 108, label %sw.bb.885
    i32 86, label %sw.bb.898
    i32 113, label %sw.bb.925
  ]

sw.bb.870:                                        ; preds = %if.then.868
  %502 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay871 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %502, i32 0, i32 0
  %gp_offset_p872 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay871, i32 0, i32 0
  %gp_offset873 = load i32, i32* %gp_offset_p872
  %fits_in_gp874 = icmp ule i32 %gp_offset873, 40
  br i1 %fits_in_gp874, label %vaarg.in_reg.875, label %vaarg.in_mem.877

vaarg.in_reg.875:                                 ; preds = %sw.bb.870
  %503 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay871, i32 0, i32 3
  %reg_save_area876 = load i8*, i8** %503
  %504 = getelementptr i8, i8* %reg_save_area876, i32 %gp_offset873
  %505 = bitcast i8* %504 to i32*
  %506 = add i32 %gp_offset873, 8
  store i32 %506, i32* %gp_offset_p872
  br label %vaarg.end.881

vaarg.in_mem.877:                                 ; preds = %sw.bb.870
  %overflow_arg_area_p878 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay871, i32 0, i32 2
  %overflow_arg_area879 = load i8*, i8** %overflow_arg_area_p878
  %507 = bitcast i8* %overflow_arg_area879 to i32*
  %overflow_arg_area.next880 = getelementptr i8, i8* %overflow_arg_area879, i32 8
  store i8* %overflow_arg_area.next880, i8** %overflow_arg_area_p878
  br label %vaarg.end.881

vaarg.end.881:                                    ; preds = %vaarg.in_mem.877, %vaarg.in_reg.875
  %vaarg.addr882 = phi i32* [ %505, %vaarg.in_reg.875 ], [ %507, %vaarg.in_mem.877 ]
  %508 = load i32, i32* %vaarg.addr882
  %conv883 = trunc i32 %508 to i16
  %conv884 = sext i16 %conv883 to i64
  store i64 %conv884, i64* %iv, align 8
  br label %sw.epilog.938

sw.bb.885:                                        ; preds = %if.then.868
  %509 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay886 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %509, i32 0, i32 0
  %gp_offset_p887 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay886, i32 0, i32 0
  %gp_offset888 = load i32, i32* %gp_offset_p887
  %fits_in_gp889 = icmp ule i32 %gp_offset888, 40
  br i1 %fits_in_gp889, label %vaarg.in_reg.890, label %vaarg.in_mem.892

vaarg.in_reg.890:                                 ; preds = %sw.bb.885
  %510 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay886, i32 0, i32 3
  %reg_save_area891 = load i8*, i8** %510
  %511 = getelementptr i8, i8* %reg_save_area891, i32 %gp_offset888
  %512 = bitcast i8* %511 to i64*
  %513 = add i32 %gp_offset888, 8
  store i32 %513, i32* %gp_offset_p887
  br label %vaarg.end.896

vaarg.in_mem.892:                                 ; preds = %sw.bb.885
  %overflow_arg_area_p893 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay886, i32 0, i32 2
  %overflow_arg_area894 = load i8*, i8** %overflow_arg_area_p893
  %514 = bitcast i8* %overflow_arg_area894 to i64*
  %overflow_arg_area.next895 = getelementptr i8, i8* %overflow_arg_area894, i32 8
  store i8* %overflow_arg_area.next895, i8** %overflow_arg_area_p893
  br label %vaarg.end.896

vaarg.end.896:                                    ; preds = %vaarg.in_mem.892, %vaarg.in_reg.890
  %vaarg.addr897 = phi i64* [ %512, %vaarg.in_reg.890 ], [ %514, %vaarg.in_mem.892 ]
  %515 = load i64, i64* %vaarg.addr897
  store i64 %515, i64* %iv, align 8
  br label %sw.epilog.938

sw.bb.898:                                        ; preds = %if.then.868
  %516 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay899 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %516, i32 0, i32 0
  %gp_offset_p900 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay899, i32 0, i32 0
  %gp_offset901 = load i32, i32* %gp_offset_p900
  %fits_in_gp902 = icmp ule i32 %gp_offset901, 40
  br i1 %fits_in_gp902, label %vaarg.in_reg.903, label %vaarg.in_mem.905

vaarg.in_reg.903:                                 ; preds = %sw.bb.898
  %517 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay899, i32 0, i32 3
  %reg_save_area904 = load i8*, i8** %517
  %518 = getelementptr i8, i8* %reg_save_area904, i32 %gp_offset901
  %519 = bitcast i8* %518 to i64*
  %520 = add i32 %gp_offset901, 8
  store i32 %520, i32* %gp_offset_p900
  br label %vaarg.end.909

vaarg.in_mem.905:                                 ; preds = %sw.bb.898
  %overflow_arg_area_p906 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay899, i32 0, i32 2
  %overflow_arg_area907 = load i8*, i8** %overflow_arg_area_p906
  %521 = bitcast i8* %overflow_arg_area907 to i64*
  %overflow_arg_area.next908 = getelementptr i8, i8* %overflow_arg_area907, i32 8
  store i8* %overflow_arg_area.next908, i8** %overflow_arg_area_p906
  br label %vaarg.end.909

vaarg.end.909:                                    ; preds = %vaarg.in_mem.905, %vaarg.in_reg.903
  %vaarg.addr910 = phi i64* [ %519, %vaarg.in_reg.903 ], [ %521, %vaarg.in_mem.905 ]
  %522 = load i64, i64* %vaarg.addr910
  store i64 %522, i64* %iv, align 8
  br label %sw.epilog.938

sw.default.911:                                   ; preds = %if.then.868
  %523 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay912 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %523, i32 0, i32 0
  %gp_offset_p913 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay912, i32 0, i32 0
  %gp_offset914 = load i32, i32* %gp_offset_p913
  %fits_in_gp915 = icmp ule i32 %gp_offset914, 40
  br i1 %fits_in_gp915, label %vaarg.in_reg.916, label %vaarg.in_mem.918

vaarg.in_reg.916:                                 ; preds = %sw.default.911
  %524 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay912, i32 0, i32 3
  %reg_save_area917 = load i8*, i8** %524
  %525 = getelementptr i8, i8* %reg_save_area917, i32 %gp_offset914
  %526 = bitcast i8* %525 to i32*
  %527 = add i32 %gp_offset914, 8
  store i32 %527, i32* %gp_offset_p913
  br label %vaarg.end.922

vaarg.in_mem.918:                                 ; preds = %sw.default.911
  %overflow_arg_area_p919 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay912, i32 0, i32 2
  %overflow_arg_area920 = load i8*, i8** %overflow_arg_area_p919
  %528 = bitcast i8* %overflow_arg_area920 to i32*
  %overflow_arg_area.next921 = getelementptr i8, i8* %overflow_arg_area920, i32 8
  store i8* %overflow_arg_area.next921, i8** %overflow_arg_area_p919
  br label %vaarg.end.922

vaarg.end.922:                                    ; preds = %vaarg.in_mem.918, %vaarg.in_reg.916
  %vaarg.addr923 = phi i32* [ %526, %vaarg.in_reg.916 ], [ %528, %vaarg.in_mem.918 ]
  %529 = load i32, i32* %vaarg.addr923
  %conv924 = sext i32 %529 to i64
  store i64 %conv924, i64* %iv, align 8
  br label %sw.epilog.938

sw.bb.925:                                        ; preds = %if.then.868
  %530 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay926 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %530, i32 0, i32 0
  %gp_offset_p927 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay926, i32 0, i32 0
  %gp_offset928 = load i32, i32* %gp_offset_p927
  %fits_in_gp929 = icmp ule i32 %gp_offset928, 40
  br i1 %fits_in_gp929, label %vaarg.in_reg.930, label %vaarg.in_mem.932

vaarg.in_reg.930:                                 ; preds = %sw.bb.925
  %531 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay926, i32 0, i32 3
  %reg_save_area931 = load i8*, i8** %531
  %532 = getelementptr i8, i8* %reg_save_area931, i32 %gp_offset928
  %533 = bitcast i8* %532 to i64*
  %534 = add i32 %gp_offset928, 8
  store i32 %534, i32* %gp_offset_p927
  br label %vaarg.end.936

vaarg.in_mem.932:                                 ; preds = %sw.bb.925
  %overflow_arg_area_p933 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay926, i32 0, i32 2
  %overflow_arg_area934 = load i8*, i8** %overflow_arg_area_p933
  %535 = bitcast i8* %overflow_arg_area934 to i64*
  %overflow_arg_area.next935 = getelementptr i8, i8* %overflow_arg_area934, i32 8
  store i8* %overflow_arg_area.next935, i8** %overflow_arg_area_p933
  br label %vaarg.end.936

vaarg.end.936:                                    ; preds = %vaarg.in_mem.932, %vaarg.in_reg.930
  %vaarg.addr937 = phi i64* [ %533, %vaarg.in_reg.930 ], [ %535, %vaarg.in_mem.932 ]
  %536 = load i64, i64* %vaarg.addr937
  store i64 %536, i64* %iv, align 8
  br label %sw.epilog.938

sw.epilog.938:                                    ; preds = %vaarg.end.936, %vaarg.end.922, %vaarg.end.909, %vaarg.end.896, %vaarg.end.881
  br label %if.end.959

if.else.939:                                      ; preds = %if.else.866
  %537 = load %struct.sv*, %struct.sv** %argsv, align 8
  store %struct.sv* %537, %struct.sv** @PL_Sv, align 8
  %538 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags940 = getelementptr inbounds %struct.sv, %struct.sv* %538, i32 0, i32 2
  %539 = load i32, i32* %sv_flags940, align 4
  %and941 = and i32 %539, 65536
  %tobool942 = icmp ne i32 %and941, 0
  br i1 %tobool942, label %cond.true.943, label %cond.false.946

cond.true.943:                                    ; preds = %if.else.939
  %540 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any944 = getelementptr inbounds %struct.sv, %struct.sv* %540, i32 0, i32 0
  %541 = load i8*, i8** %sv_any944, align 8
  %542 = bitcast i8* %541 to %struct.xpviv*
  %xiv_iv945 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %542, i32 0, i32 3
  %543 = load i64, i64* %xiv_iv945, align 8
  br label %cond.end.948

cond.false.946:                                   ; preds = %if.else.939
  %544 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %call947 = call i64 @Perl_sv_2iv(%struct.sv* %544)
  br label %cond.end.948

cond.end.948:                                     ; preds = %cond.false.946, %cond.true.943
  %cond949 = phi i64 [ %543, %cond.true.943 ], [ %call947, %cond.false.946 ]
  store i64 %cond949, i64* %tiv, align 8
  %545 = load i8, i8* %intsize, align 1
  %conv950 = sext i8 %545 to i32
  switch i32 %conv950, label %sw.default.956 [
    i32 104, label %sw.bb.951
    i32 108, label %sw.bb.954
    i32 86, label %sw.bb.955
    i32 113, label %sw.bb.957
  ]

sw.bb.951:                                        ; preds = %cond.end.948
  %546 = load i64, i64* %tiv, align 8
  %conv952 = trunc i64 %546 to i16
  %conv953 = sext i16 %conv952 to i64
  store i64 %conv953, i64* %iv, align 8
  br label %sw.epilog.958

sw.bb.954:                                        ; preds = %cond.end.948
  %547 = load i64, i64* %tiv, align 8
  store i64 %547, i64* %iv, align 8
  br label %sw.epilog.958

sw.bb.955:                                        ; preds = %cond.end.948
  br label %sw.default.956

sw.default.956:                                   ; preds = %cond.end.948, %sw.bb.955
  %548 = load i64, i64* %tiv, align 8
  store i64 %548, i64* %iv, align 8
  br label %sw.epilog.958

sw.bb.957:                                        ; preds = %cond.end.948
  %549 = load i64, i64* %tiv, align 8
  store i64 %549, i64* %iv, align 8
  br label %sw.epilog.958

sw.epilog.958:                                    ; preds = %sw.bb.957, %sw.default.956, %sw.bb.954, %sw.bb.951
  br label %if.end.959

if.end.959:                                       ; preds = %sw.epilog.958, %sw.epilog.938
  br label %if.end.960

if.end.960:                                       ; preds = %if.end.959, %if.end.865
  %550 = load i8, i8* %vectorize, align 1
  %tobool961 = icmp ne i8 %550, 0
  br i1 %tobool961, label %if.end.976, label %if.then.962

if.then.962:                                      ; preds = %if.end.960
  %551 = load i64, i64* %iv, align 8
  %cmp963 = icmp sge i64 %551, 0
  br i1 %cmp963, label %if.then.965, label %if.else.971

if.then.965:                                      ; preds = %if.then.962
  %552 = load i64, i64* %iv, align 8
  store i64 %552, i64* %uv, align 8
  %553 = load i8, i8* %plus, align 1
  %tobool966 = icmp ne i8 %553, 0
  br i1 %tobool966, label %if.then.967, label %if.end.970

if.then.967:                                      ; preds = %if.then.965
  %554 = load i8, i8* %plus, align 1
  %555 = load i64, i64* %esignlen, align 8
  %inc968 = add i64 %555, 1
  store i64 %inc968, i64* %esignlen, align 8
  %arrayidx969 = getelementptr inbounds [4 x i8], [4 x i8]* %esignbuf, i32 0, i64 %555
  store i8 %554, i8* %arrayidx969, align 1
  br label %if.end.970

if.end.970:                                       ; preds = %if.then.967, %if.then.965
  br label %if.end.975

if.else.971:                                      ; preds = %if.then.962
  %556 = load i64, i64* %iv, align 8
  %sub972 = sub nsw i64 0, %556
  store i64 %sub972, i64* %uv, align 8
  %557 = load i64, i64* %esignlen, align 8
  %inc973 = add i64 %557, 1
  store i64 %inc973, i64* %esignlen, align 8
  %arrayidx974 = getelementptr inbounds [4 x i8], [4 x i8]* %esignbuf, i32 0, i64 %557
  store i8 45, i8* %arrayidx974, align 1
  br label %if.end.975

if.end.975:                                       ; preds = %if.else.971, %if.end.970
  br label %if.end.976

if.end.976:                                       ; preds = %if.end.975, %if.end.960
  store i32 10, i32* %base, align 4
  br label %integer

sw.bb.977:                                        ; preds = %if.end.651
  store i8 113, i8* %intsize, align 1
  br label %sw.bb.978

sw.bb.978:                                        ; preds = %if.end.651, %sw.bb.977
  store i32 10, i32* %base, align 4
  br label %uns_integer

sw.bb.979:                                        ; preds = %if.end.651
  store i32 2, i32* %base, align 4
  br label %uns_integer

sw.bb.980:                                        ; preds = %if.end.651
  store i8 113, i8* %intsize, align 1
  br label %sw.bb.981

sw.bb.981:                                        ; preds = %if.end.651, %sw.bb.980
  store i32 8, i32* %base, align 4
  br label %uns_integer

sw.bb.982:                                        ; preds = %if.end.651, %if.end.651
  store i32 16, i32* %base, align 4
  br label %uns_integer

uns_integer:                                      ; preds = %sw.bb.982, %sw.bb.981, %sw.bb.979, %sw.bb.978
  %558 = load i8, i8* %vectorize, align 1
  %tobool983 = icmp ne i8 %558, 0
  br i1 %tobool983, label %if.then.984, label %if.else.997

if.then.984:                                      ; preds = %uns_integer
  br label %vector

vector:                                           ; preds = %if.then.1824, %if.then.984
  %559 = load i64, i64* %veclen, align 8
  %tobool986 = icmp ne i64 %559, 0
  br i1 %tobool986, label %if.end.988, label %if.then.987

if.then.987:                                      ; preds = %vector
  br label %for.inc.1826

if.end.988:                                       ; preds = %vector
  %560 = load i8, i8* %vec_utf8, align 1
  %tobool989 = icmp ne i8 %560, 0
  br i1 %tobool989, label %if.then.990, label %if.else.992

if.then.990:                                      ; preds = %if.end.988
  %561 = load i8*, i8** %vecstr, align 8
  %562 = load i64, i64* %veclen, align 8
  %call991 = call i64 @Perl_utf8n_to_uvuni(i8* %561, i64 %562, i64* %ulen985, i32 105)
  store i64 %call991, i64* %uv, align 8
  br label %if.end.994

if.else.992:                                      ; preds = %if.end.988
  %563 = load i8*, i8** %vecstr, align 8
  %564 = load i8, i8* %563, align 1
  %conv993 = zext i8 %564 to i64
  store i64 %conv993, i64* %uv, align 8
  store i64 1, i64* %ulen985, align 8
  br label %if.end.994

if.end.994:                                       ; preds = %if.else.992, %if.then.990
  %565 = load i64, i64* %ulen985, align 8
  %566 = load i8*, i8** %vecstr, align 8
  %add.ptr995 = getelementptr inbounds i8, i8* %566, i64 %565
  store i8* %add.ptr995, i8** %vecstr, align 8
  %567 = load i64, i64* %ulen985, align 8
  %568 = load i64, i64* %veclen, align 8
  %sub996 = sub i64 %568, %567
  store i64 %sub996, i64* %veclen, align 8
  br label %if.end.1090

if.else.997:                                      ; preds = %uns_integer
  %569 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %tobool998 = icmp ne [1 x %struct.__va_list_tag]* %569, null
  br i1 %tobool998, label %if.then.999, label %if.else.1070

if.then.999:                                      ; preds = %if.else.997
  %570 = load i8, i8* %intsize, align 1
  %conv1000 = sext i8 %570 to i32
  switch i32 %conv1000, label %sw.default.1042 [
    i32 104, label %sw.bb.1001
    i32 108, label %sw.bb.1016
    i32 86, label %sw.bb.1029
    i32 113, label %sw.bb.1056
  ]

sw.bb.1001:                                       ; preds = %if.then.999
  %571 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay1002 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %571, i32 0, i32 0
  %gp_offset_p1003 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1002, i32 0, i32 0
  %gp_offset1004 = load i32, i32* %gp_offset_p1003
  %fits_in_gp1005 = icmp ule i32 %gp_offset1004, 40
  br i1 %fits_in_gp1005, label %vaarg.in_reg.1006, label %vaarg.in_mem.1008

vaarg.in_reg.1006:                                ; preds = %sw.bb.1001
  %572 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1002, i32 0, i32 3
  %reg_save_area1007 = load i8*, i8** %572
  %573 = getelementptr i8, i8* %reg_save_area1007, i32 %gp_offset1004
  %574 = bitcast i8* %573 to i32*
  %575 = add i32 %gp_offset1004, 8
  store i32 %575, i32* %gp_offset_p1003
  br label %vaarg.end.1012

vaarg.in_mem.1008:                                ; preds = %sw.bb.1001
  %overflow_arg_area_p1009 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1002, i32 0, i32 2
  %overflow_arg_area1010 = load i8*, i8** %overflow_arg_area_p1009
  %576 = bitcast i8* %overflow_arg_area1010 to i32*
  %overflow_arg_area.next1011 = getelementptr i8, i8* %overflow_arg_area1010, i32 8
  store i8* %overflow_arg_area.next1011, i8** %overflow_arg_area_p1009
  br label %vaarg.end.1012

vaarg.end.1012:                                   ; preds = %vaarg.in_mem.1008, %vaarg.in_reg.1006
  %vaarg.addr1013 = phi i32* [ %574, %vaarg.in_reg.1006 ], [ %576, %vaarg.in_mem.1008 ]
  %577 = load i32, i32* %vaarg.addr1013
  %conv1014 = trunc i32 %577 to i16
  %conv1015 = zext i16 %conv1014 to i64
  store i64 %conv1015, i64* %uv, align 8
  br label %sw.epilog.1069

sw.bb.1016:                                       ; preds = %if.then.999
  %578 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay1017 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %578, i32 0, i32 0
  %gp_offset_p1018 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1017, i32 0, i32 0
  %gp_offset1019 = load i32, i32* %gp_offset_p1018
  %fits_in_gp1020 = icmp ule i32 %gp_offset1019, 40
  br i1 %fits_in_gp1020, label %vaarg.in_reg.1021, label %vaarg.in_mem.1023

vaarg.in_reg.1021:                                ; preds = %sw.bb.1016
  %579 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1017, i32 0, i32 3
  %reg_save_area1022 = load i8*, i8** %579
  %580 = getelementptr i8, i8* %reg_save_area1022, i32 %gp_offset1019
  %581 = bitcast i8* %580 to i64*
  %582 = add i32 %gp_offset1019, 8
  store i32 %582, i32* %gp_offset_p1018
  br label %vaarg.end.1027

vaarg.in_mem.1023:                                ; preds = %sw.bb.1016
  %overflow_arg_area_p1024 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1017, i32 0, i32 2
  %overflow_arg_area1025 = load i8*, i8** %overflow_arg_area_p1024
  %583 = bitcast i8* %overflow_arg_area1025 to i64*
  %overflow_arg_area.next1026 = getelementptr i8, i8* %overflow_arg_area1025, i32 8
  store i8* %overflow_arg_area.next1026, i8** %overflow_arg_area_p1024
  br label %vaarg.end.1027

vaarg.end.1027:                                   ; preds = %vaarg.in_mem.1023, %vaarg.in_reg.1021
  %vaarg.addr1028 = phi i64* [ %581, %vaarg.in_reg.1021 ], [ %583, %vaarg.in_mem.1023 ]
  %584 = load i64, i64* %vaarg.addr1028
  store i64 %584, i64* %uv, align 8
  br label %sw.epilog.1069

sw.bb.1029:                                       ; preds = %if.then.999
  %585 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay1030 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %585, i32 0, i32 0
  %gp_offset_p1031 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1030, i32 0, i32 0
  %gp_offset1032 = load i32, i32* %gp_offset_p1031
  %fits_in_gp1033 = icmp ule i32 %gp_offset1032, 40
  br i1 %fits_in_gp1033, label %vaarg.in_reg.1034, label %vaarg.in_mem.1036

vaarg.in_reg.1034:                                ; preds = %sw.bb.1029
  %586 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1030, i32 0, i32 3
  %reg_save_area1035 = load i8*, i8** %586
  %587 = getelementptr i8, i8* %reg_save_area1035, i32 %gp_offset1032
  %588 = bitcast i8* %587 to i64*
  %589 = add i32 %gp_offset1032, 8
  store i32 %589, i32* %gp_offset_p1031
  br label %vaarg.end.1040

vaarg.in_mem.1036:                                ; preds = %sw.bb.1029
  %overflow_arg_area_p1037 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1030, i32 0, i32 2
  %overflow_arg_area1038 = load i8*, i8** %overflow_arg_area_p1037
  %590 = bitcast i8* %overflow_arg_area1038 to i64*
  %overflow_arg_area.next1039 = getelementptr i8, i8* %overflow_arg_area1038, i32 8
  store i8* %overflow_arg_area.next1039, i8** %overflow_arg_area_p1037
  br label %vaarg.end.1040

vaarg.end.1040:                                   ; preds = %vaarg.in_mem.1036, %vaarg.in_reg.1034
  %vaarg.addr1041 = phi i64* [ %588, %vaarg.in_reg.1034 ], [ %590, %vaarg.in_mem.1036 ]
  %591 = load i64, i64* %vaarg.addr1041
  store i64 %591, i64* %uv, align 8
  br label %sw.epilog.1069

sw.default.1042:                                  ; preds = %if.then.999
  %592 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay1043 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %592, i32 0, i32 0
  %gp_offset_p1044 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1043, i32 0, i32 0
  %gp_offset1045 = load i32, i32* %gp_offset_p1044
  %fits_in_gp1046 = icmp ule i32 %gp_offset1045, 40
  br i1 %fits_in_gp1046, label %vaarg.in_reg.1047, label %vaarg.in_mem.1049

vaarg.in_reg.1047:                                ; preds = %sw.default.1042
  %593 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1043, i32 0, i32 3
  %reg_save_area1048 = load i8*, i8** %593
  %594 = getelementptr i8, i8* %reg_save_area1048, i32 %gp_offset1045
  %595 = bitcast i8* %594 to i32*
  %596 = add i32 %gp_offset1045, 8
  store i32 %596, i32* %gp_offset_p1044
  br label %vaarg.end.1053

vaarg.in_mem.1049:                                ; preds = %sw.default.1042
  %overflow_arg_area_p1050 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1043, i32 0, i32 2
  %overflow_arg_area1051 = load i8*, i8** %overflow_arg_area_p1050
  %597 = bitcast i8* %overflow_arg_area1051 to i32*
  %overflow_arg_area.next1052 = getelementptr i8, i8* %overflow_arg_area1051, i32 8
  store i8* %overflow_arg_area.next1052, i8** %overflow_arg_area_p1050
  br label %vaarg.end.1053

vaarg.end.1053:                                   ; preds = %vaarg.in_mem.1049, %vaarg.in_reg.1047
  %vaarg.addr1054 = phi i32* [ %595, %vaarg.in_reg.1047 ], [ %597, %vaarg.in_mem.1049 ]
  %598 = load i32, i32* %vaarg.addr1054
  %conv1055 = zext i32 %598 to i64
  store i64 %conv1055, i64* %uv, align 8
  br label %sw.epilog.1069

sw.bb.1056:                                       ; preds = %if.then.999
  %599 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay1057 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %599, i32 0, i32 0
  %gp_offset_p1058 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1057, i32 0, i32 0
  %gp_offset1059 = load i32, i32* %gp_offset_p1058
  %fits_in_gp1060 = icmp ule i32 %gp_offset1059, 40
  br i1 %fits_in_gp1060, label %vaarg.in_reg.1061, label %vaarg.in_mem.1063

vaarg.in_reg.1061:                                ; preds = %sw.bb.1056
  %600 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1057, i32 0, i32 3
  %reg_save_area1062 = load i8*, i8** %600
  %601 = getelementptr i8, i8* %reg_save_area1062, i32 %gp_offset1059
  %602 = bitcast i8* %601 to i64*
  %603 = add i32 %gp_offset1059, 8
  store i32 %603, i32* %gp_offset_p1058
  br label %vaarg.end.1067

vaarg.in_mem.1063:                                ; preds = %sw.bb.1056
  %overflow_arg_area_p1064 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1057, i32 0, i32 2
  %overflow_arg_area1065 = load i8*, i8** %overflow_arg_area_p1064
  %604 = bitcast i8* %overflow_arg_area1065 to i64*
  %overflow_arg_area.next1066 = getelementptr i8, i8* %overflow_arg_area1065, i32 8
  store i8* %overflow_arg_area.next1066, i8** %overflow_arg_area_p1064
  br label %vaarg.end.1067

vaarg.end.1067:                                   ; preds = %vaarg.in_mem.1063, %vaarg.in_reg.1061
  %vaarg.addr1068 = phi i64* [ %602, %vaarg.in_reg.1061 ], [ %604, %vaarg.in_mem.1063 ]
  %605 = load i64, i64* %vaarg.addr1068
  store i64 %605, i64* %uv, align 8
  br label %sw.epilog.1069

sw.epilog.1069:                                   ; preds = %vaarg.end.1067, %vaarg.end.1053, %vaarg.end.1040, %vaarg.end.1027, %vaarg.end.1012
  br label %if.end.1089

if.else.1070:                                     ; preds = %if.else.997
  %606 = load %struct.sv*, %struct.sv** %argsv, align 8
  store %struct.sv* %606, %struct.sv** @PL_Sv, align 8
  %607 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags1071 = getelementptr inbounds %struct.sv, %struct.sv* %607, i32 0, i32 2
  %608 = load i32, i32* %sv_flags1071, align 4
  %and1072 = and i32 %608, 65536
  %tobool1073 = icmp ne i32 %and1072, 0
  br i1 %tobool1073, label %cond.true.1074, label %cond.false.1076

cond.true.1074:                                   ; preds = %if.else.1070
  %609 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any1075 = getelementptr inbounds %struct.sv, %struct.sv* %609, i32 0, i32 0
  %610 = load i8*, i8** %sv_any1075, align 8
  %611 = bitcast i8* %610 to %struct.xpvuv*
  %xuv_uv = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %611, i32 0, i32 3
  %612 = load i64, i64* %xuv_uv, align 8
  br label %cond.end.1078

cond.false.1076:                                  ; preds = %if.else.1070
  %613 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %call1077 = call i64 @Perl_sv_2uv(%struct.sv* %613)
  br label %cond.end.1078

cond.end.1078:                                    ; preds = %cond.false.1076, %cond.true.1074
  %cond1079 = phi i64 [ %612, %cond.true.1074 ], [ %call1077, %cond.false.1076 ]
  store i64 %cond1079, i64* %tuv, align 8
  %614 = load i8, i8* %intsize, align 1
  %conv1080 = sext i8 %614 to i32
  switch i32 %conv1080, label %sw.default.1086 [
    i32 104, label %sw.bb.1081
    i32 108, label %sw.bb.1084
    i32 86, label %sw.bb.1085
    i32 113, label %sw.bb.1087
  ]

sw.bb.1081:                                       ; preds = %cond.end.1078
  %615 = load i64, i64* %tuv, align 8
  %conv1082 = trunc i64 %615 to i16
  %conv1083 = zext i16 %conv1082 to i64
  store i64 %conv1083, i64* %uv, align 8
  br label %sw.epilog.1088

sw.bb.1084:                                       ; preds = %cond.end.1078
  %616 = load i64, i64* %tuv, align 8
  store i64 %616, i64* %uv, align 8
  br label %sw.epilog.1088

sw.bb.1085:                                       ; preds = %cond.end.1078
  br label %sw.default.1086

sw.default.1086:                                  ; preds = %cond.end.1078, %sw.bb.1085
  %617 = load i64, i64* %tuv, align 8
  store i64 %617, i64* %uv, align 8
  br label %sw.epilog.1088

sw.bb.1087:                                       ; preds = %cond.end.1078
  %618 = load i64, i64* %tuv, align 8
  store i64 %618, i64* %uv, align 8
  br label %sw.epilog.1088

sw.epilog.1088:                                   ; preds = %sw.bb.1087, %sw.default.1086, %sw.bb.1084, %sw.bb.1081
  br label %if.end.1089

if.end.1089:                                      ; preds = %sw.epilog.1088, %sw.epilog.1069
  br label %if.end.1090

if.end.1090:                                      ; preds = %if.end.1089, %if.end.994
  br label %integer

integer:                                          ; preds = %if.end.1090, %if.end.976, %cond.end.844
  %arraydecay1091 = getelementptr inbounds [127 x i8], [127 x i8]* %ebuf, i32 0, i32 0
  %add.ptr1092 = getelementptr inbounds i8, i8* %arraydecay1091, i64 127
  store i8* %add.ptr1092, i8** %eptr, align 8
  %619 = load i32, i32* %base, align 4
  switch i32 %619, label %sw.default.1152 [
    i32 16, label %sw.bb.1093
    i32 8, label %sw.bb.1114
    i32 2, label %sw.bb.1134
  ]

sw.bb.1093:                                       ; preds = %integer
  %620 = load i64, i64* %uv, align 8
  %tobool1094 = icmp ne i64 %620, 0
  br i1 %tobool1094, label %if.end.1096, label %if.then.1095

if.then.1095:                                     ; preds = %sw.bb.1093
  store i8 0, i8* %alt, align 1
  br label %if.end.1096

if.end.1096:                                      ; preds = %if.then.1095, %sw.bb.1093
  %621 = load i8, i8* %c, align 1
  %conv1097 = sext i8 %621 to i32
  %cmp1098 = icmp eq i32 %conv1097, 88
  %cond1100 = select i1 %cmp1098, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.59, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.60, i32 0, i32 0)
  store i8* %cond1100, i8** %p, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end.1096
  %622 = load i64, i64* %uv, align 8
  %and1101 = and i64 %622, 15
  %conv1102 = trunc i64 %and1101 to i32
  store i32 %conv1102, i32* %dig, align 4
  %623 = load i32, i32* %dig, align 4
  %idxprom1103 = zext i32 %623 to i64
  %624 = load i8*, i8** %p, align 8
  %arrayidx1104 = getelementptr inbounds i8, i8* %624, i64 %idxprom1103
  %625 = load i8, i8* %arrayidx1104, align 1
  %626 = load i8*, i8** %eptr, align 8
  %incdec.ptr1105 = getelementptr inbounds i8, i8* %626, i32 -1
  store i8* %incdec.ptr1105, i8** %eptr, align 8
  store i8 %625, i8* %incdec.ptr1105, align 1
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %627 = load i64, i64* %uv, align 8
  %shr = lshr i64 %627, 4
  store i64 %shr, i64* %uv, align 8
  %tobool1106 = icmp ne i64 %shr, 0
  br i1 %tobool1106, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %628 = load i8, i8* %alt, align 1
  %tobool1107 = icmp ne i8 %628, 0
  br i1 %tobool1107, label %if.then.1108, label %if.end.1113

if.then.1108:                                     ; preds = %do.end
  %629 = load i64, i64* %esignlen, align 8
  %inc1109 = add i64 %629, 1
  store i64 %inc1109, i64* %esignlen, align 8
  %arrayidx1110 = getelementptr inbounds [4 x i8], [4 x i8]* %esignbuf, i32 0, i64 %629
  store i8 48, i8* %arrayidx1110, align 1
  %630 = load i8, i8* %c, align 1
  %631 = load i64, i64* %esignlen, align 8
  %inc1111 = add i64 %631, 1
  store i64 %inc1111, i64* %esignlen, align 8
  %arrayidx1112 = getelementptr inbounds [4 x i8], [4 x i8]* %esignbuf, i32 0, i64 %631
  store i8 %630, i8* %arrayidx1112, align 1
  br label %if.end.1113

if.end.1113:                                      ; preds = %if.then.1108, %do.end
  br label %sw.epilog.1163

sw.bb.1114:                                       ; preds = %integer
  br label %do.body.1115

do.body.1115:                                     ; preds = %do.cond.1121, %sw.bb.1114
  %632 = load i64, i64* %uv, align 8
  %and1116 = and i64 %632, 7
  %conv1117 = trunc i64 %and1116 to i32
  store i32 %conv1117, i32* %dig, align 4
  %633 = load i32, i32* %dig, align 4
  %add1118 = add i32 48, %633
  %conv1119 = trunc i32 %add1118 to i8
  %634 = load i8*, i8** %eptr, align 8
  %incdec.ptr1120 = getelementptr inbounds i8, i8* %634, i32 -1
  store i8* %incdec.ptr1120, i8** %eptr, align 8
  store i8 %conv1119, i8* %incdec.ptr1120, align 1
  br label %do.cond.1121

do.cond.1121:                                     ; preds = %do.body.1115
  %635 = load i64, i64* %uv, align 8
  %shr1122 = lshr i64 %635, 3
  store i64 %shr1122, i64* %uv, align 8
  %tobool1123 = icmp ne i64 %shr1122, 0
  br i1 %tobool1123, label %do.body.1115, label %do.end.1124

do.end.1124:                                      ; preds = %do.cond.1121
  %636 = load i8, i8* %alt, align 1
  %conv1125 = sext i8 %636 to i32
  %tobool1126 = icmp ne i32 %conv1125, 0
  br i1 %tobool1126, label %land.lhs.true.1127, label %if.end.1133

land.lhs.true.1127:                               ; preds = %do.end.1124
  %637 = load i8*, i8** %eptr, align 8
  %638 = load i8, i8* %637, align 1
  %conv1128 = sext i8 %638 to i32
  %cmp1129 = icmp ne i32 %conv1128, 48
  br i1 %cmp1129, label %if.then.1131, label %if.end.1133

if.then.1131:                                     ; preds = %land.lhs.true.1127
  %639 = load i8*, i8** %eptr, align 8
  %incdec.ptr1132 = getelementptr inbounds i8, i8* %639, i32 -1
  store i8* %incdec.ptr1132, i8** %eptr, align 8
  store i8 48, i8* %incdec.ptr1132, align 1
  br label %if.end.1133

if.end.1133:                                      ; preds = %if.then.1131, %land.lhs.true.1127, %do.end.1124
  br label %sw.epilog.1163

sw.bb.1134:                                       ; preds = %integer
  br label %do.body.1135

do.body.1135:                                     ; preds = %do.cond.1141, %sw.bb.1134
  %640 = load i64, i64* %uv, align 8
  %and1136 = and i64 %640, 1
  %conv1137 = trunc i64 %and1136 to i32
  store i32 %conv1137, i32* %dig, align 4
  %641 = load i32, i32* %dig, align 4
  %add1138 = add i32 48, %641
  %conv1139 = trunc i32 %add1138 to i8
  %642 = load i8*, i8** %eptr, align 8
  %incdec.ptr1140 = getelementptr inbounds i8, i8* %642, i32 -1
  store i8* %incdec.ptr1140, i8** %eptr, align 8
  store i8 %conv1139, i8* %incdec.ptr1140, align 1
  br label %do.cond.1141

do.cond.1141:                                     ; preds = %do.body.1135
  %643 = load i64, i64* %uv, align 8
  %shr1142 = lshr i64 %643, 1
  store i64 %shr1142, i64* %uv, align 8
  %tobool1143 = icmp ne i64 %shr1142, 0
  br i1 %tobool1143, label %do.body.1135, label %do.end.1144

do.end.1144:                                      ; preds = %do.cond.1141
  %644 = load i8, i8* %alt, align 1
  %tobool1145 = icmp ne i8 %644, 0
  br i1 %tobool1145, label %if.then.1146, label %if.end.1151

if.then.1146:                                     ; preds = %do.end.1144
  %645 = load i64, i64* %esignlen, align 8
  %inc1147 = add i64 %645, 1
  store i64 %inc1147, i64* %esignlen, align 8
  %arrayidx1148 = getelementptr inbounds [4 x i8], [4 x i8]* %esignbuf, i32 0, i64 %645
  store i8 48, i8* %arrayidx1148, align 1
  %646 = load i64, i64* %esignlen, align 8
  %inc1149 = add i64 %646, 1
  store i64 %inc1149, i64* %esignlen, align 8
  %arrayidx1150 = getelementptr inbounds [4 x i8], [4 x i8]* %esignbuf, i32 0, i64 %646
  store i8 98, i8* %arrayidx1150, align 1
  br label %if.end.1151

if.end.1151:                                      ; preds = %if.then.1146, %do.end.1144
  br label %sw.epilog.1163

sw.default.1152:                                  ; preds = %integer
  br label %do.body.1153

do.body.1153:                                     ; preds = %do.cond.1159, %sw.default.1152
  %647 = load i64, i64* %uv, align 8
  %648 = load i32, i32* %base, align 4
  %conv1154 = zext i32 %648 to i64
  %rem = urem i64 %647, %conv1154
  %conv1155 = trunc i64 %rem to i32
  store i32 %conv1155, i32* %dig, align 4
  %649 = load i32, i32* %dig, align 4
  %add1156 = add i32 48, %649
  %conv1157 = trunc i32 %add1156 to i8
  %650 = load i8*, i8** %eptr, align 8
  %incdec.ptr1158 = getelementptr inbounds i8, i8* %650, i32 -1
  store i8* %incdec.ptr1158, i8** %eptr, align 8
  store i8 %conv1157, i8* %incdec.ptr1158, align 1
  br label %do.cond.1159

do.cond.1159:                                     ; preds = %do.body.1153
  %651 = load i32, i32* %base, align 4
  %conv1160 = zext i32 %651 to i64
  %652 = load i64, i64* %uv, align 8
  %div = udiv i64 %652, %conv1160
  store i64 %div, i64* %uv, align 8
  %tobool1161 = icmp ne i64 %div, 0
  br i1 %tobool1161, label %do.body.1153, label %do.end.1162

do.end.1162:                                      ; preds = %do.cond.1159
  br label %sw.epilog.1163

sw.epilog.1163:                                   ; preds = %do.end.1162, %if.end.1151, %if.end.1133, %if.end.1113
  %arraydecay1164 = getelementptr inbounds [127 x i8], [127 x i8]* %ebuf, i32 0, i32 0
  %add.ptr1165 = getelementptr inbounds i8, i8* %arraydecay1164, i64 127
  %653 = load i8*, i8** %eptr, align 8
  %sub.ptr.lhs.cast1166 = ptrtoint i8* %add.ptr1165 to i64
  %sub.ptr.rhs.cast1167 = ptrtoint i8* %653 to i64
  %sub.ptr.sub1168 = sub i64 %sub.ptr.lhs.cast1166, %sub.ptr.rhs.cast1167
  store i64 %sub.ptr.sub1168, i64* %elen, align 8
  %654 = load i8, i8* %has_precis, align 1
  %tobool1169 = icmp ne i8 %654, 0
  br i1 %tobool1169, label %if.then.1170, label %if.end.1188

if.then.1170:                                     ; preds = %sw.epilog.1163
  %655 = load i64, i64* %precis, align 8
  %656 = load i64, i64* %elen, align 8
  %cmp1171 = icmp ugt i64 %655, %656
  br i1 %cmp1171, label %if.then.1173, label %if.else.1175

if.then.1173:                                     ; preds = %if.then.1170
  %657 = load i64, i64* %precis, align 8
  %658 = load i64, i64* %elen, align 8
  %sub1174 = sub i64 %657, %658
  store i64 %sub1174, i64* %zeros, align 8
  br label %if.end.1187

if.else.1175:                                     ; preds = %if.then.1170
  %659 = load i64, i64* %precis, align 8
  %cmp1176 = icmp eq i64 %659, 0
  br i1 %cmp1176, label %land.lhs.true.1178, label %if.end.1186

land.lhs.true.1178:                               ; preds = %if.else.1175
  %660 = load i64, i64* %elen, align 8
  %cmp1179 = icmp eq i64 %660, 1
  br i1 %cmp1179, label %land.lhs.true.1181, label %if.end.1186

land.lhs.true.1181:                               ; preds = %land.lhs.true.1178
  %661 = load i8*, i8** %eptr, align 8
  %662 = load i8, i8* %661, align 1
  %conv1182 = sext i8 %662 to i32
  %cmp1183 = icmp eq i32 %conv1182, 48
  br i1 %cmp1183, label %if.then.1185, label %if.end.1186

if.then.1185:                                     ; preds = %land.lhs.true.1181
  store i64 0, i64* %elen, align 8
  br label %if.end.1186

if.end.1186:                                      ; preds = %if.then.1185, %land.lhs.true.1181, %land.lhs.true.1178, %if.else.1175
  br label %if.end.1187

if.end.1187:                                      ; preds = %if.end.1186, %if.then.1173
  br label %if.end.1188

if.end.1188:                                      ; preds = %if.end.1187, %sw.epilog.1163
  br label %sw.epilog.1600

sw.bb.1189:                                       ; preds = %if.end.651
  store i8 102, i8* %c, align 1
  br label %sw.bb.1190

sw.bb.1190:                                       ; preds = %if.end.651, %if.end.651, %if.end.651, %if.end.651, %if.end.651, %sw.bb.1189
  %663 = load i8, i8* %intsize, align 1
  %conv1191 = sext i8 %663 to i32
  switch i32 %conv1191, label %sw.default.1194 [
    i32 86, label %sw.bb.1192
    i32 108, label %sw.bb.1193
    i32 113, label %sw.bb.1195
    i32 104, label %sw.bb.1196
  ]

sw.bb.1192:                                       ; preds = %sw.bb.1190
  br label %sw.epilog.1197

sw.bb.1193:                                       ; preds = %sw.bb.1190
  br label %sw.default.1194

sw.default.1194:                                  ; preds = %sw.bb.1190, %sw.bb.1193
  br label %sw.epilog.1197

sw.bb.1195:                                       ; preds = %sw.bb.1190
  br label %sw.epilog.1197

sw.bb.1196:                                       ; preds = %sw.bb.1190
  br label %unknown

sw.epilog.1197:                                   ; preds = %sw.bb.1195, %sw.default.1194, %sw.bb.1192
  %664 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %tobool1198 = icmp ne [1 x %struct.__va_list_tag]* %664, null
  br i1 %tobool1198, label %land.lhs.true.1199, label %cond.false.1226

land.lhs.true.1199:                               ; preds = %sw.epilog.1197
  %665 = load i8, i8* %vectorize, align 1
  %tobool1200 = icmp ne i8 %665, 0
  br i1 %tobool1200, label %cond.false.1226, label %cond.true.1201

cond.true.1201:                                   ; preds = %land.lhs.true.1199
  %666 = load i8, i8* %intsize, align 1
  %conv1202 = sext i8 %666 to i32
  %cmp1203 = icmp eq i32 %conv1202, 113
  br i1 %cmp1203, label %cond.true.1205, label %cond.false.1210

cond.true.1205:                                   ; preds = %cond.true.1201
  %667 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay1206 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %667, i32 0, i32 0
  %overflow_arg_area_p1207 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1206, i32 0, i32 2
  %overflow_arg_area1208 = load i8*, i8** %overflow_arg_area_p1207
  %668 = getelementptr i8, i8* %overflow_arg_area1208, i64 15
  %669 = ptrtoint i8* %668 to i64
  %670 = and i64 %669, -16
  %overflow_arg_area.align = inttoptr i64 %670 to i8*
  %671 = bitcast i8* %overflow_arg_area.align to x86_fp80*
  %overflow_arg_area.next1209 = getelementptr i8, i8* %overflow_arg_area.align, i32 16
  store i8* %overflow_arg_area.next1209, i8** %overflow_arg_area_p1207
  %672 = load x86_fp80, x86_fp80* %671
  br label %cond.end.1224

cond.false.1210:                                  ; preds = %cond.true.1201
  %673 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay1211 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %673, i32 0, i32 0
  %fp_offset_p1212 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1211, i32 0, i32 1
  %fp_offset1213 = load i32, i32* %fp_offset_p1212
  %fits_in_fp1214 = icmp ule i32 %fp_offset1213, 160
  br i1 %fits_in_fp1214, label %vaarg.in_reg.1215, label %vaarg.in_mem.1217

vaarg.in_reg.1215:                                ; preds = %cond.false.1210
  %674 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1211, i32 0, i32 3
  %reg_save_area1216 = load i8*, i8** %674
  %675 = getelementptr i8, i8* %reg_save_area1216, i32 %fp_offset1213
  %676 = bitcast i8* %675 to double*
  %677 = add i32 %fp_offset1213, 16
  store i32 %677, i32* %fp_offset_p1212
  br label %vaarg.end.1221

vaarg.in_mem.1217:                                ; preds = %cond.false.1210
  %overflow_arg_area_p1218 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1211, i32 0, i32 2
  %overflow_arg_area1219 = load i8*, i8** %overflow_arg_area_p1218
  %678 = bitcast i8* %overflow_arg_area1219 to double*
  %overflow_arg_area.next1220 = getelementptr i8, i8* %overflow_arg_area1219, i32 8
  store i8* %overflow_arg_area.next1220, i8** %overflow_arg_area_p1218
  br label %vaarg.end.1221

vaarg.end.1221:                                   ; preds = %vaarg.in_mem.1217, %vaarg.in_reg.1215
  %vaarg.addr1222 = phi double* [ %676, %vaarg.in_reg.1215 ], [ %678, %vaarg.in_mem.1217 ]
  %679 = load double, double* %vaarg.addr1222
  %conv1223 = fpext double %679 to x86_fp80
  br label %cond.end.1224

cond.end.1224:                                    ; preds = %vaarg.end.1221, %cond.true.1205
  %cond1225 = phi x86_fp80 [ %672, %cond.true.1205 ], [ %conv1223, %vaarg.end.1221 ]
  br label %cond.end.1238

cond.false.1226:                                  ; preds = %land.lhs.true.1199, %sw.epilog.1197
  %680 = load %struct.sv*, %struct.sv** %argsv, align 8
  store %struct.sv* %680, %struct.sv** @PL_Sv, align 8
  %681 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags1227 = getelementptr inbounds %struct.sv, %struct.sv* %681, i32 0, i32 2
  %682 = load i32, i32* %sv_flags1227, align 4
  %and1228 = and i32 %682, 131072
  %tobool1229 = icmp ne i32 %and1228, 0
  br i1 %tobool1229, label %cond.true.1230, label %cond.false.1233

cond.true.1230:                                   ; preds = %cond.false.1226
  %683 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any1231 = getelementptr inbounds %struct.sv, %struct.sv* %683, i32 0, i32 0
  %684 = load i8*, i8** %sv_any1231, align 8
  %685 = bitcast i8* %684 to %struct.xpvnv*
  %xnv_nv1232 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %685, i32 0, i32 4
  %686 = load double, double* %xnv_nv1232, align 8
  br label %cond.end.1235

cond.false.1233:                                  ; preds = %cond.false.1226
  %687 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %call1234 = call double @Perl_sv_2nv(%struct.sv* %687)
  br label %cond.end.1235

cond.end.1235:                                    ; preds = %cond.false.1233, %cond.true.1230
  %cond1236 = phi double [ %686, %cond.true.1230 ], [ %call1234, %cond.false.1233 ]
  %conv1237 = fpext double %cond1236 to x86_fp80
  br label %cond.end.1238

cond.end.1238:                                    ; preds = %cond.end.1235, %cond.end.1224
  %cond1239 = phi x86_fp80 [ %cond1225, %cond.end.1224 ], [ %conv1237, %cond.end.1235 ]
  store x86_fp80 %cond1239, x86_fp80* %nv186, align 16
  store i64 0, i64* %need, align 8
  store i8 0, i8* %vectorize, align 1
  %688 = load i8, i8* %c, align 1
  %conv1240 = sext i8 %688 to i32
  %cmp1241 = icmp ne i32 %conv1240, 101
  br i1 %cmp1241, label %land.lhs.true.1243, label %if.end.1263

land.lhs.true.1243:                               ; preds = %cond.end.1238
  %689 = load i8, i8* %c, align 1
  %conv1244 = sext i8 %689 to i32
  %cmp1245 = icmp ne i32 %conv1244, 69
  br i1 %cmp1245, label %if.then.1247, label %if.end.1263

if.then.1247:                                     ; preds = %land.lhs.true.1243
  store i32 -2147483648, i32* %i, align 4
  %690 = load x86_fp80, x86_fp80* %nv186, align 16
  %conv1248 = fptrunc x86_fp80 %690 to double
  %call1249 = call double @frexp(double %conv1248, i32* %i) #2
  %691 = load i32, i32* %i, align 4
  %cmp1250 = icmp eq i32 %691, -2147483648
  br i1 %cmp1250, label %if.then.1252, label %if.end.1254

if.then.1252:                                     ; preds = %if.then.1247
  %call1253 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.61, i32 0, i32 0))
  br label %if.end.1254

if.end.1254:                                      ; preds = %if.then.1252, %if.then.1247
  %692 = load i32, i32* %i, align 4
  %cmp1255 = icmp sgt i32 %692, 0
  br i1 %cmp1255, label %if.then.1257, label %if.end.1262

if.then.1257:                                     ; preds = %if.end.1254
  %693 = load i32, i32* %i, align 4
  %mul1258 = mul nsw i32 %693, 146
  %div1259 = sdiv i32 %mul1258, 485
  %add1260 = add nsw i32 %div1259, 1
  %conv1261 = sext i32 %add1260 to i64
  store i64 %conv1261, i64* %need, align 8
  br label %if.end.1262

if.end.1262:                                      ; preds = %if.then.1257, %if.end.1254
  br label %if.end.1263

if.end.1263:                                      ; preds = %if.end.1262, %land.lhs.true.1243, %cond.end.1238
  %694 = load i8, i8* %has_precis, align 1
  %conv1264 = sext i8 %694 to i32
  %tobool1265 = icmp ne i32 %conv1264, 0
  br i1 %tobool1265, label %cond.true.1266, label %cond.false.1267

cond.true.1266:                                   ; preds = %if.end.1263
  %695 = load i64, i64* %precis, align 8
  br label %cond.end.1268

cond.false.1267:                                  ; preds = %if.end.1263
  br label %cond.end.1268

cond.end.1268:                                    ; preds = %cond.false.1267, %cond.true.1266
  %cond1269 = phi i64 [ %695, %cond.true.1266 ], [ 6, %cond.false.1267 ]
  %696 = load i64, i64* %need, align 8
  %add1270 = add i64 %696, %cond1269
  store i64 %add1270, i64* %need, align 8
  %697 = load i64, i64* %need, align 8
  %698 = load i64, i64* %width, align 8
  %cmp1271 = icmp ult i64 %697, %698
  br i1 %cmp1271, label %if.then.1273, label %if.end.1274

if.then.1273:                                     ; preds = %cond.end.1268
  %699 = load i64, i64* %width, align 8
  store i64 %699, i64* %need, align 8
  br label %if.end.1274

if.end.1274:                                      ; preds = %if.then.1273, %cond.end.1268
  %700 = load i64, i64* %need, align 8
  %add1275 = add i64 %700, 20
  store i64 %add1275, i64* %need, align 8
  %701 = load i64, i64* @PL_efloatsize, align 8
  %702 = load i64, i64* %need, align 8
  %cmp1276 = icmp ult i64 %701, %702
  br i1 %cmp1276, label %if.then.1278, label %if.end.1283

if.then.1278:                                     ; preds = %if.end.1274
  %703 = load i8*, i8** @PL_efloatbuf, align 8
  call void @Perl_safesysfree(i8* %703)
  %704 = load i64, i64* %need, align 8
  %add1279 = add i64 %704, 20
  store i64 %add1279, i64* @PL_efloatsize, align 8
  %705 = load i64, i64* @PL_efloatsize, align 8
  %mul1280 = mul i64 %705, 1
  %call1281 = call i8* @Perl_safesysmalloc(i64 %mul1280)
  store i8* %call1281, i8** @PL_efloatbuf, align 8
  %706 = load i8*, i8** @PL_efloatbuf, align 8
  %arrayidx1282 = getelementptr inbounds i8, i8* %706, i64 0
  store i8 0, i8* %arrayidx1282, align 1
  br label %if.end.1283

if.end.1283:                                      ; preds = %if.then.1278, %if.end.1274
  %707 = load i64, i64* %width, align 8
  %tobool1284 = icmp ne i64 %707, 0
  br i1 %tobool1284, label %if.end.1334, label %lor.lhs.false.1285

lor.lhs.false.1285:                               ; preds = %if.end.1283
  %708 = load i8, i8* %left, align 1
  %conv1286 = sext i8 %708 to i32
  %tobool1287 = icmp ne i32 %conv1286, 0
  br i1 %tobool1287, label %if.end.1334, label %lor.lhs.false.1288

lor.lhs.false.1288:                               ; preds = %lor.lhs.false.1285
  %709 = load i8, i8* %plus, align 1
  %conv1289 = sext i8 %709 to i32
  %tobool1290 = icmp ne i32 %conv1289, 0
  br i1 %tobool1290, label %if.end.1334, label %lor.lhs.false.1291

lor.lhs.false.1291:                               ; preds = %lor.lhs.false.1288
  %710 = load i8, i8* %alt, align 1
  %conv1292 = sext i8 %710 to i32
  %tobool1293 = icmp ne i32 %conv1292, 0
  br i1 %tobool1293, label %if.end.1334, label %land.lhs.true.1294

land.lhs.true.1294:                               ; preds = %lor.lhs.false.1291
  %711 = load i8, i8* %fill, align 1
  %conv1295 = sext i8 %711 to i32
  %cmp1296 = icmp ne i32 %conv1295, 48
  br i1 %cmp1296, label %land.lhs.true.1298, label %if.end.1334

land.lhs.true.1298:                               ; preds = %land.lhs.true.1294
  %712 = load i8, i8* %has_precis, align 1
  %conv1299 = sext i8 %712 to i32
  %tobool1300 = icmp ne i32 %conv1299, 0
  br i1 %tobool1300, label %land.lhs.true.1301, label %if.end.1334

land.lhs.true.1301:                               ; preds = %land.lhs.true.1298
  %713 = load i8, i8* %intsize, align 1
  %conv1302 = sext i8 %713 to i32
  %cmp1303 = icmp ne i32 %conv1302, 113
  br i1 %cmp1303, label %if.then.1305, label %if.end.1334

if.then.1305:                                     ; preds = %land.lhs.true.1301
  %714 = load i8, i8* %c, align 1
  %conv1306 = sext i8 %714 to i32
  %cmp1307 = icmp eq i32 %conv1306, 103
  br i1 %cmp1307, label %land.lhs.true.1309, label %if.else.1318

land.lhs.true.1309:                               ; preds = %if.then.1305
  %715 = load i64, i64* %precis, align 8
  %tobool1310 = icmp ne i64 %715, 0
  br i1 %tobool1310, label %if.then.1311, label %if.else.1318

if.then.1311:                                     ; preds = %land.lhs.true.1309
  %716 = load x86_fp80, x86_fp80* %nv186, align 16
  %conv1312 = fptrunc x86_fp80 %716 to double
  %717 = load i64, i64* %precis, align 8
  %conv1313 = trunc i64 %717 to i32
  %718 = load i8*, i8** @PL_efloatbuf, align 8
  %call1314 = call i8* @gcvt(double %conv1312, i32 %conv1313, i8* %718)
  %719 = load i8*, i8** @PL_efloatbuf, align 8
  %720 = load i8, i8* %719, align 1
  %tobool1315 = icmp ne i8 %720, 0
  br i1 %tobool1315, label %if.then.1316, label %if.end.1317

if.then.1316:                                     ; preds = %if.then.1311
  br label %float_converted

if.end.1317:                                      ; preds = %if.then.1311
  br label %if.end.1333

if.else.1318:                                     ; preds = %land.lhs.true.1309, %if.then.1305
  %721 = load i8, i8* %c, align 1
  %conv1319 = sext i8 %721 to i32
  %cmp1320 = icmp eq i32 %conv1319, 102
  br i1 %cmp1320, label %land.lhs.true.1322, label %if.end.1332

land.lhs.true.1322:                               ; preds = %if.else.1318
  %722 = load i64, i64* %precis, align 8
  %tobool1323 = icmp ne i64 %722, 0
  br i1 %tobool1323, label %if.end.1332, label %if.then.1324

if.then.1324:                                     ; preds = %land.lhs.true.1322
  %723 = load x86_fp80, x86_fp80* %nv186, align 16
  %conv1325 = fptrunc x86_fp80 %723 to double
  %arraydecay1326 = getelementptr inbounds [127 x i8], [127 x i8]* %ebuf, i32 0, i32 0
  %add.ptr1327 = getelementptr inbounds i8, i8* %arraydecay1326, i64 127
  %call1328 = call i8* @F0convert(double %conv1325, i8* %add.ptr1327, i64* %elen)
  store i8* %call1328, i8** %eptr, align 8
  %tobool1329 = icmp ne i8* %call1328, null
  br i1 %tobool1329, label %if.then.1330, label %if.end.1331

if.then.1330:                                     ; preds = %if.then.1324
  br label %sw.epilog.1600

if.end.1331:                                      ; preds = %if.then.1324
  br label %if.end.1332

if.end.1332:                                      ; preds = %if.end.1331, %land.lhs.true.1322, %if.else.1318
  br label %if.end.1333

if.end.1333:                                      ; preds = %if.end.1332, %if.end.1317
  br label %if.end.1334

if.end.1334:                                      ; preds = %if.end.1333, %land.lhs.true.1301, %land.lhs.true.1298, %land.lhs.true.1294, %lor.lhs.false.1291, %lor.lhs.false.1288, %lor.lhs.false.1285, %if.end.1283
  %arraydecay1335 = getelementptr inbounds [127 x i8], [127 x i8]* %ebuf, i32 0, i32 0
  %add.ptr1336 = getelementptr inbounds i8, i8* %arraydecay1335, i64 127
  store i8* %add.ptr1336, i8** %eptr, align 8
  %724 = load i8*, i8** %eptr, align 8
  %incdec.ptr1337 = getelementptr inbounds i8, i8* %724, i32 -1
  store i8* %incdec.ptr1337, i8** %eptr, align 8
  store i8 0, i8* %incdec.ptr1337, align 1
  %725 = load i8, i8* %c, align 1
  %726 = load i8*, i8** %eptr, align 8
  %incdec.ptr1338 = getelementptr inbounds i8, i8* %726, i32 -1
  store i8* %incdec.ptr1338, i8** %eptr, align 8
  store i8 %725, i8* %incdec.ptr1338, align 1
  %727 = load i8, i8* %intsize, align 1
  %conv1339 = sext i8 %727 to i32
  %cmp1340 = icmp eq i32 %conv1339, 113
  br i1 %cmp1340, label %if.then.1342, label %if.end.1351

if.then.1342:                                     ; preds = %if.end.1334
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @Perl_sv_vcatpvfn.prifldbl, i32 0, i32 0), i8** %p1343, align 8
  br label %while.cond.1344

while.cond.1344:                                  ; preds = %while.body.1347, %if.then.1342
  %728 = load i8*, i8** %p1343, align 8
  %cmp1345 = icmp uge i8* %728, getelementptr inbounds ([3 x i8], [3 x i8]* @Perl_sv_vcatpvfn.prifldbl, i32 0, i32 0)
  br i1 %cmp1345, label %while.body.1347, label %while.end.1350

while.body.1347:                                  ; preds = %while.cond.1344
  %729 = load i8*, i8** %p1343, align 8
  %incdec.ptr1348 = getelementptr inbounds i8, i8* %729, i32 -1
  store i8* %incdec.ptr1348, i8** %p1343, align 8
  %730 = load i8, i8* %729, align 1
  %731 = load i8*, i8** %eptr, align 8
  %incdec.ptr1349 = getelementptr inbounds i8, i8* %731, i32 -1
  store i8* %incdec.ptr1349, i8** %eptr, align 8
  store i8 %730, i8* %incdec.ptr1349, align 1
  br label %while.cond.1344

while.end.1350:                                   ; preds = %while.cond.1344
  br label %if.end.1351

if.end.1351:                                      ; preds = %while.end.1350, %if.end.1334
  %732 = load i8, i8* %has_precis, align 1
  %tobool1352 = icmp ne i8 %732, 0
  br i1 %tobool1352, label %if.then.1353, label %if.end.1365

if.then.1353:                                     ; preds = %if.end.1351
  %733 = load i64, i64* %precis, align 8
  %conv1354 = trunc i64 %733 to i32
  store i32 %conv1354, i32* %base, align 4
  br label %do.body.1355

do.body.1355:                                     ; preds = %do.cond.1360, %if.then.1353
  %734 = load i32, i32* %base, align 4
  %rem1356 = urem i32 %734, 10
  %add1357 = add i32 48, %rem1356
  %conv1358 = trunc i32 %add1357 to i8
  %735 = load i8*, i8** %eptr, align 8
  %incdec.ptr1359 = getelementptr inbounds i8, i8* %735, i32 -1
  store i8* %incdec.ptr1359, i8** %eptr, align 8
  store i8 %conv1358, i8* %incdec.ptr1359, align 1
  br label %do.cond.1360

do.cond.1360:                                     ; preds = %do.body.1355
  %736 = load i32, i32* %base, align 4
  %div1361 = udiv i32 %736, 10
  store i32 %div1361, i32* %base, align 4
  %tobool1362 = icmp ne i32 %div1361, 0
  br i1 %tobool1362, label %do.body.1355, label %do.end.1363

do.end.1363:                                      ; preds = %do.cond.1360
  %737 = load i8*, i8** %eptr, align 8
  %incdec.ptr1364 = getelementptr inbounds i8, i8* %737, i32 -1
  store i8* %incdec.ptr1364, i8** %eptr, align 8
  store i8 46, i8* %incdec.ptr1364, align 1
  br label %if.end.1365

if.end.1365:                                      ; preds = %do.end.1363, %if.end.1351
  %738 = load i64, i64* %width, align 8
  %tobool1366 = icmp ne i64 %738, 0
  br i1 %tobool1366, label %if.then.1367, label %if.end.1378

if.then.1367:                                     ; preds = %if.end.1365
  %739 = load i64, i64* %width, align 8
  %conv1368 = trunc i64 %739 to i32
  store i32 %conv1368, i32* %base, align 4
  br label %do.body.1369

do.body.1369:                                     ; preds = %do.cond.1374, %if.then.1367
  %740 = load i32, i32* %base, align 4
  %rem1370 = urem i32 %740, 10
  %add1371 = add i32 48, %rem1370
  %conv1372 = trunc i32 %add1371 to i8
  %741 = load i8*, i8** %eptr, align 8
  %incdec.ptr1373 = getelementptr inbounds i8, i8* %741, i32 -1
  store i8* %incdec.ptr1373, i8** %eptr, align 8
  store i8 %conv1372, i8* %incdec.ptr1373, align 1
  br label %do.cond.1374

do.cond.1374:                                     ; preds = %do.body.1369
  %742 = load i32, i32* %base, align 4
  %div1375 = udiv i32 %742, 10
  store i32 %div1375, i32* %base, align 4
  %tobool1376 = icmp ne i32 %div1375, 0
  br i1 %tobool1376, label %do.body.1369, label %do.end.1377

do.end.1377:                                      ; preds = %do.cond.1374
  br label %if.end.1378

if.end.1378:                                      ; preds = %do.end.1377, %if.end.1365
  %743 = load i8, i8* %fill, align 1
  %conv1379 = sext i8 %743 to i32
  %cmp1380 = icmp eq i32 %conv1379, 48
  br i1 %cmp1380, label %if.then.1382, label %if.end.1384

if.then.1382:                                     ; preds = %if.end.1378
  %744 = load i8, i8* %fill, align 1
  %745 = load i8*, i8** %eptr, align 8
  %incdec.ptr1383 = getelementptr inbounds i8, i8* %745, i32 -1
  store i8* %incdec.ptr1383, i8** %eptr, align 8
  store i8 %744, i8* %incdec.ptr1383, align 1
  br label %if.end.1384

if.end.1384:                                      ; preds = %if.then.1382, %if.end.1378
  %746 = load i8, i8* %left, align 1
  %tobool1385 = icmp ne i8 %746, 0
  br i1 %tobool1385, label %if.then.1386, label %if.end.1388

if.then.1386:                                     ; preds = %if.end.1384
  %747 = load i8*, i8** %eptr, align 8
  %incdec.ptr1387 = getelementptr inbounds i8, i8* %747, i32 -1
  store i8* %incdec.ptr1387, i8** %eptr, align 8
  store i8 45, i8* %incdec.ptr1387, align 1
  br label %if.end.1388

if.end.1388:                                      ; preds = %if.then.1386, %if.end.1384
  %748 = load i8, i8* %plus, align 1
  %tobool1389 = icmp ne i8 %748, 0
  br i1 %tobool1389, label %if.then.1390, label %if.end.1392

if.then.1390:                                     ; preds = %if.end.1388
  %749 = load i8, i8* %plus, align 1
  %750 = load i8*, i8** %eptr, align 8
  %incdec.ptr1391 = getelementptr inbounds i8, i8* %750, i32 -1
  store i8* %incdec.ptr1391, i8** %eptr, align 8
  store i8 %749, i8* %incdec.ptr1391, align 1
  br label %if.end.1392

if.end.1392:                                      ; preds = %if.then.1390, %if.end.1388
  %751 = load i8, i8* %alt, align 1
  %tobool1393 = icmp ne i8 %751, 0
  br i1 %tobool1393, label %if.then.1394, label %if.end.1396

if.then.1394:                                     ; preds = %if.end.1392
  %752 = load i8*, i8** %eptr, align 8
  %incdec.ptr1395 = getelementptr inbounds i8, i8* %752, i32 -1
  store i8* %incdec.ptr1395, i8** %eptr, align 8
  store i8 35, i8* %incdec.ptr1395, align 1
  br label %if.end.1396

if.end.1396:                                      ; preds = %if.then.1394, %if.end.1392
  %753 = load i8*, i8** %eptr, align 8
  %incdec.ptr1397 = getelementptr inbounds i8, i8* %753, i32 -1
  store i8* %incdec.ptr1397, i8** %eptr, align 8
  store i8 37, i8* %incdec.ptr1397, align 1
  %754 = load i8, i8* %intsize, align 1
  %conv1398 = sext i8 %754 to i32
  %cmp1399 = icmp eq i32 %conv1398, 113
  br i1 %cmp1399, label %if.then.1401, label %if.else.1403

if.then.1401:                                     ; preds = %if.end.1396
  %755 = load i8*, i8** @PL_efloatbuf, align 8
  %756 = load i8*, i8** %eptr, align 8
  %757 = load x86_fp80, x86_fp80* %nv186, align 16
  %call1402 = call i32 (i8*, i8*, ...) @sprintf(i8* %755, i8* %756, x86_fp80 %757)
  br label %if.end.1406

if.else.1403:                                     ; preds = %if.end.1396
  %758 = load i8*, i8** @PL_efloatbuf, align 8
  %759 = load i8*, i8** %eptr, align 8
  %760 = load x86_fp80, x86_fp80* %nv186, align 16
  %conv1404 = fptrunc x86_fp80 %760 to double
  %call1405 = call i32 (i8*, i8*, ...) @sprintf(i8* %758, i8* %759, double %conv1404)
  br label %if.end.1406

if.end.1406:                                      ; preds = %if.else.1403, %if.then.1401
  br label %float_converted

float_converted:                                  ; preds = %if.end.1406, %if.then.1316
  %761 = load i8*, i8** @PL_efloatbuf, align 8
  store i8* %761, i8** %eptr, align 8
  %762 = load i8*, i8** @PL_efloatbuf, align 8
  %call1407 = call i64 @strlen(i8* %762)
  store i64 %call1407, i64* %elen, align 8
  br label %sw.epilog.1600

sw.bb.1408:                                       ; preds = %if.end.651
  %763 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any1409 = getelementptr inbounds %struct.sv, %struct.sv* %763, i32 0, i32 0
  %764 = load i8*, i8** %sv_any1409, align 8
  %765 = bitcast i8* %764 to %struct.xpv*
  %xpv_cur1410 = getelementptr inbounds %struct.xpv, %struct.xpv* %765, i32 0, i32 1
  %766 = load i64, i64* %xpv_cur1410, align 8
  %767 = load i64, i64* %origlen, align 8
  %sub1411 = sub i64 %766, %767
  %conv1412 = trunc i64 %sub1411 to i32
  store i32 %conv1412, i32* %i, align 4
  %768 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %tobool1413 = icmp ne [1 x %struct.__va_list_tag]* %768, null
  br i1 %tobool1413, label %land.lhs.true.1414, label %if.else.1488

land.lhs.true.1414:                               ; preds = %sw.bb.1408
  %769 = load i8, i8* %vectorize, align 1
  %tobool1415 = icmp ne i8 %769, 0
  br i1 %tobool1415, label %if.else.1488, label %if.then.1416

if.then.1416:                                     ; preds = %land.lhs.true.1414
  %770 = load i8, i8* %intsize, align 1
  %conv1417 = sext i8 %770 to i32
  switch i32 %conv1417, label %sw.default.1432 [
    i32 104, label %sw.bb.1418
    i32 108, label %sw.bb.1445
    i32 86, label %sw.bb.1459
    i32 113, label %sw.bb.1473
  ]

sw.bb.1418:                                       ; preds = %if.then.1416
  %771 = load i32, i32* %i, align 4
  %conv1419 = trunc i32 %771 to i16
  %772 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay1420 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %772, i32 0, i32 0
  %gp_offset_p1421 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1420, i32 0, i32 0
  %gp_offset1422 = load i32, i32* %gp_offset_p1421
  %fits_in_gp1423 = icmp ule i32 %gp_offset1422, 40
  br i1 %fits_in_gp1423, label %vaarg.in_reg.1424, label %vaarg.in_mem.1426

vaarg.in_reg.1424:                                ; preds = %sw.bb.1418
  %773 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1420, i32 0, i32 3
  %reg_save_area1425 = load i8*, i8** %773
  %774 = getelementptr i8, i8* %reg_save_area1425, i32 %gp_offset1422
  %775 = bitcast i8* %774 to i16**
  %776 = add i32 %gp_offset1422, 8
  store i32 %776, i32* %gp_offset_p1421
  br label %vaarg.end.1430

vaarg.in_mem.1426:                                ; preds = %sw.bb.1418
  %overflow_arg_area_p1427 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1420, i32 0, i32 2
  %overflow_arg_area1428 = load i8*, i8** %overflow_arg_area_p1427
  %777 = bitcast i8* %overflow_arg_area1428 to i16**
  %overflow_arg_area.next1429 = getelementptr i8, i8* %overflow_arg_area1428, i32 8
  store i8* %overflow_arg_area.next1429, i8** %overflow_arg_area_p1427
  br label %vaarg.end.1430

vaarg.end.1430:                                   ; preds = %vaarg.in_mem.1426, %vaarg.in_reg.1424
  %vaarg.addr1431 = phi i16** [ %775, %vaarg.in_reg.1424 ], [ %777, %vaarg.in_mem.1426 ]
  %778 = load i16*, i16** %vaarg.addr1431
  store i16 %conv1419, i16* %778, align 2
  br label %sw.epilog.1487

sw.default.1432:                                  ; preds = %if.then.1416
  %779 = load i32, i32* %i, align 4
  %780 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay1433 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %780, i32 0, i32 0
  %gp_offset_p1434 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1433, i32 0, i32 0
  %gp_offset1435 = load i32, i32* %gp_offset_p1434
  %fits_in_gp1436 = icmp ule i32 %gp_offset1435, 40
  br i1 %fits_in_gp1436, label %vaarg.in_reg.1437, label %vaarg.in_mem.1439

vaarg.in_reg.1437:                                ; preds = %sw.default.1432
  %781 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1433, i32 0, i32 3
  %reg_save_area1438 = load i8*, i8** %781
  %782 = getelementptr i8, i8* %reg_save_area1438, i32 %gp_offset1435
  %783 = bitcast i8* %782 to i32**
  %784 = add i32 %gp_offset1435, 8
  store i32 %784, i32* %gp_offset_p1434
  br label %vaarg.end.1443

vaarg.in_mem.1439:                                ; preds = %sw.default.1432
  %overflow_arg_area_p1440 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1433, i32 0, i32 2
  %overflow_arg_area1441 = load i8*, i8** %overflow_arg_area_p1440
  %785 = bitcast i8* %overflow_arg_area1441 to i32**
  %overflow_arg_area.next1442 = getelementptr i8, i8* %overflow_arg_area1441, i32 8
  store i8* %overflow_arg_area.next1442, i8** %overflow_arg_area_p1440
  br label %vaarg.end.1443

vaarg.end.1443:                                   ; preds = %vaarg.in_mem.1439, %vaarg.in_reg.1437
  %vaarg.addr1444 = phi i32** [ %783, %vaarg.in_reg.1437 ], [ %785, %vaarg.in_mem.1439 ]
  %786 = load i32*, i32** %vaarg.addr1444
  store i32 %779, i32* %786, align 4
  br label %sw.epilog.1487

sw.bb.1445:                                       ; preds = %if.then.1416
  %787 = load i32, i32* %i, align 4
  %conv1446 = sext i32 %787 to i64
  %788 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay1447 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %788, i32 0, i32 0
  %gp_offset_p1448 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1447, i32 0, i32 0
  %gp_offset1449 = load i32, i32* %gp_offset_p1448
  %fits_in_gp1450 = icmp ule i32 %gp_offset1449, 40
  br i1 %fits_in_gp1450, label %vaarg.in_reg.1451, label %vaarg.in_mem.1453

vaarg.in_reg.1451:                                ; preds = %sw.bb.1445
  %789 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1447, i32 0, i32 3
  %reg_save_area1452 = load i8*, i8** %789
  %790 = getelementptr i8, i8* %reg_save_area1452, i32 %gp_offset1449
  %791 = bitcast i8* %790 to i64**
  %792 = add i32 %gp_offset1449, 8
  store i32 %792, i32* %gp_offset_p1448
  br label %vaarg.end.1457

vaarg.in_mem.1453:                                ; preds = %sw.bb.1445
  %overflow_arg_area_p1454 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1447, i32 0, i32 2
  %overflow_arg_area1455 = load i8*, i8** %overflow_arg_area_p1454
  %793 = bitcast i8* %overflow_arg_area1455 to i64**
  %overflow_arg_area.next1456 = getelementptr i8, i8* %overflow_arg_area1455, i32 8
  store i8* %overflow_arg_area.next1456, i8** %overflow_arg_area_p1454
  br label %vaarg.end.1457

vaarg.end.1457:                                   ; preds = %vaarg.in_mem.1453, %vaarg.in_reg.1451
  %vaarg.addr1458 = phi i64** [ %791, %vaarg.in_reg.1451 ], [ %793, %vaarg.in_mem.1453 ]
  %794 = load i64*, i64** %vaarg.addr1458
  store i64 %conv1446, i64* %794, align 8
  br label %sw.epilog.1487

sw.bb.1459:                                       ; preds = %if.then.1416
  %795 = load i32, i32* %i, align 4
  %conv1460 = sext i32 %795 to i64
  %796 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay1461 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %796, i32 0, i32 0
  %gp_offset_p1462 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1461, i32 0, i32 0
  %gp_offset1463 = load i32, i32* %gp_offset_p1462
  %fits_in_gp1464 = icmp ule i32 %gp_offset1463, 40
  br i1 %fits_in_gp1464, label %vaarg.in_reg.1465, label %vaarg.in_mem.1467

vaarg.in_reg.1465:                                ; preds = %sw.bb.1459
  %797 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1461, i32 0, i32 3
  %reg_save_area1466 = load i8*, i8** %797
  %798 = getelementptr i8, i8* %reg_save_area1466, i32 %gp_offset1463
  %799 = bitcast i8* %798 to i64**
  %800 = add i32 %gp_offset1463, 8
  store i32 %800, i32* %gp_offset_p1462
  br label %vaarg.end.1471

vaarg.in_mem.1467:                                ; preds = %sw.bb.1459
  %overflow_arg_area_p1468 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1461, i32 0, i32 2
  %overflow_arg_area1469 = load i8*, i8** %overflow_arg_area_p1468
  %801 = bitcast i8* %overflow_arg_area1469 to i64**
  %overflow_arg_area.next1470 = getelementptr i8, i8* %overflow_arg_area1469, i32 8
  store i8* %overflow_arg_area.next1470, i8** %overflow_arg_area_p1468
  br label %vaarg.end.1471

vaarg.end.1471:                                   ; preds = %vaarg.in_mem.1467, %vaarg.in_reg.1465
  %vaarg.addr1472 = phi i64** [ %799, %vaarg.in_reg.1465 ], [ %801, %vaarg.in_mem.1467 ]
  %802 = load i64*, i64** %vaarg.addr1472
  store i64 %conv1460, i64* %802, align 8
  br label %sw.epilog.1487

sw.bb.1473:                                       ; preds = %if.then.1416
  %803 = load i32, i32* %i, align 4
  %conv1474 = sext i32 %803 to i64
  %804 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay1475 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %804, i32 0, i32 0
  %gp_offset_p1476 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1475, i32 0, i32 0
  %gp_offset1477 = load i32, i32* %gp_offset_p1476
  %fits_in_gp1478 = icmp ule i32 %gp_offset1477, 40
  br i1 %fits_in_gp1478, label %vaarg.in_reg.1479, label %vaarg.in_mem.1481

vaarg.in_reg.1479:                                ; preds = %sw.bb.1473
  %805 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1475, i32 0, i32 3
  %reg_save_area1480 = load i8*, i8** %805
  %806 = getelementptr i8, i8* %reg_save_area1480, i32 %gp_offset1477
  %807 = bitcast i8* %806 to i64**
  %808 = add i32 %gp_offset1477, 8
  store i32 %808, i32* %gp_offset_p1476
  br label %vaarg.end.1485

vaarg.in_mem.1481:                                ; preds = %sw.bb.1473
  %overflow_arg_area_p1482 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1475, i32 0, i32 2
  %overflow_arg_area1483 = load i8*, i8** %overflow_arg_area_p1482
  %809 = bitcast i8* %overflow_arg_area1483 to i64**
  %overflow_arg_area.next1484 = getelementptr i8, i8* %overflow_arg_area1483, i32 8
  store i8* %overflow_arg_area.next1484, i8** %overflow_arg_area_p1482
  br label %vaarg.end.1485

vaarg.end.1485:                                   ; preds = %vaarg.in_mem.1481, %vaarg.in_reg.1479
  %vaarg.addr1486 = phi i64** [ %807, %vaarg.in_reg.1479 ], [ %809, %vaarg.in_mem.1481 ]
  %810 = load i64*, i64** %vaarg.addr1486
  store i64 %conv1474, i64* %810, align 8
  br label %sw.epilog.1487

sw.epilog.1487:                                   ; preds = %vaarg.end.1485, %vaarg.end.1471, %vaarg.end.1457, %vaarg.end.1443, %vaarg.end.1430
  br label %if.end.1490

if.else.1488:                                     ; preds = %land.lhs.true.1414, %sw.bb.1408
  %811 = load %struct.sv*, %struct.sv** %argsv, align 8
  %812 = load i32, i32* %i, align 4
  %conv1489 = sext i32 %812 to i64
  call void @Perl_sv_setuv_mg(%struct.sv* %811, i64 %conv1489)
  br label %if.end.1490

if.end.1490:                                      ; preds = %if.else.1488, %sw.epilog.1487
  store i8 0, i8* %vectorize, align 1
  br label %for.inc.1826

sw.default.1491:                                  ; preds = %if.end.651
  br label %unknown

unknown:                                          ; preds = %sw.default.1491, %sw.bb.1196, %if.then.827, %if.then.777, %if.then.528, %if.then.525, %if.then.281, %if.then.271
  %813 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %tobool1492 = icmp ne [1 x %struct.__va_list_tag]* %813, null
  br i1 %tobool1492, label %if.end.1558, label %land.lhs.true.1493

land.lhs.true.1493:                               ; preds = %unknown
  %814 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings = getelementptr inbounds %struct.cop, %struct.cop* %814, i32 0, i32 14
  %815 = load %struct.sv*, %struct.sv** %cop_warnings, align 8
  %cmp1494 = icmp ne %struct.sv* %815, null
  br i1 %cmp1494, label %land.lhs.true.1496, label %lor.lhs.false.1512

land.lhs.true.1496:                               ; preds = %land.lhs.true.1493
  %816 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings1497 = getelementptr inbounds %struct.cop, %struct.cop* %816, i32 0, i32 14
  %817 = load %struct.sv*, %struct.sv** %cop_warnings1497, align 8
  %cmp1498 = icmp ne %struct.sv* %817, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 2)
  br i1 %cmp1498, label %land.lhs.true.1500, label %lor.lhs.false.1512

land.lhs.true.1500:                               ; preds = %land.lhs.true.1496
  %818 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings1501 = getelementptr inbounds %struct.cop, %struct.cop* %818, i32 0, i32 14
  %819 = load %struct.sv*, %struct.sv** %cop_warnings1501, align 8
  %cmp1502 = icmp eq %struct.sv* %819, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 1)
  br i1 %cmp1502, label %land.lhs.true.1520, label %lor.lhs.false.1504

lor.lhs.false.1504:                               ; preds = %land.lhs.true.1500
  %820 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings1505 = getelementptr inbounds %struct.cop, %struct.cop* %820, i32 0, i32 14
  %821 = load %struct.sv*, %struct.sv** %cop_warnings1505, align 8
  %sv_any1506 = getelementptr inbounds %struct.sv, %struct.sv* %821, i32 0, i32 0
  %822 = load i8*, i8** %sv_any1506, align 8
  %823 = bitcast i8* %822 to %struct.xpv*
  %xpv_pv1507 = getelementptr inbounds %struct.xpv, %struct.xpv* %823, i32 0, i32 0
  %824 = load i8*, i8** %xpv_pv1507, align 8
  %arrayidx1508 = getelementptr inbounds i8, i8* %824, i64 8
  %825 = load i8, i8* %arrayidx1508, align 1
  %conv1509 = sext i8 %825 to i32
  %and1510 = and i32 %conv1509, 16
  %tobool1511 = icmp ne i32 %and1510, 0
  br i1 %tobool1511, label %land.lhs.true.1520, label %lor.lhs.false.1512

lor.lhs.false.1512:                               ; preds = %lor.lhs.false.1504, %land.lhs.true.1496, %land.lhs.true.1493
  %826 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings1513 = getelementptr inbounds %struct.cop, %struct.cop* %826, i32 0, i32 14
  %827 = load %struct.sv*, %struct.sv** %cop_warnings1513, align 8
  %cmp1514 = icmp eq %struct.sv* %827, null
  br i1 %cmp1514, label %land.lhs.true.1516, label %if.end.1558

land.lhs.true.1516:                               ; preds = %lor.lhs.false.1512
  %828 = load i8, i8* @PL_dowarn, align 1
  %conv1517 = zext i8 %828 to i32
  %and1518 = and i32 %conv1517, 1
  %tobool1519 = icmp ne i32 %and1518, 0
  br i1 %tobool1519, label %land.lhs.true.1520, label %if.end.1558

land.lhs.true.1520:                               ; preds = %land.lhs.true.1516, %lor.lhs.false.1504, %land.lhs.true.1500
  %829 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %829, i32 0, i32 4
  %830 = load i16, i16* %op_type, align 2
  %conv1521 = zext i16 %830 to i32
  %cmp1522 = icmp eq i32 %conv1521, 208
  br i1 %cmp1522, label %if.then.1529, label %lor.lhs.false.1524

lor.lhs.false.1524:                               ; preds = %land.lhs.true.1520
  %831 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type1525 = getelementptr inbounds %struct.op, %struct.op* %831, i32 0, i32 4
  %832 = load i16, i16* %op_type1525, align 2
  %conv1526 = zext i16 %832 to i32
  %cmp1527 = icmp eq i32 %conv1526, 115
  br i1 %cmp1527, label %if.then.1529, label %if.end.1558

if.then.1529:                                     ; preds = %lor.lhs.false.1524, %land.lhs.true.1520
  %call1530 = call %struct.sv* @Perl_sv_newmortal()
  store %struct.sv* %call1530, %struct.sv** %msg, align 8
  %833 = load %struct.sv*, %struct.sv** %msg, align 8
  %834 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type1531 = getelementptr inbounds %struct.op, %struct.op* %834, i32 0, i32 4
  %835 = load i16, i16* %op_type1531, align 2
  %conv1532 = zext i16 %835 to i32
  %cmp1533 = icmp eq i32 %conv1532, 208
  %cond1535 = select i1 %cmp1533, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.63, i32 0, i32 0)
  call void (%struct.sv*, i8*, ...) @Perl_sv_setpvf(%struct.sv* %833, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.62, i32 0, i32 0), i8* %cond1535)
  %836 = load i8, i8* %c, align 1
  %tobool1536 = icmp ne i8 %836, 0
  br i1 %tobool1536, label %if.then.1537, label %if.else.1556

if.then.1537:                                     ; preds = %if.then.1529
  %837 = load i8, i8* %c, align 1
  %conv1538 = sext i8 %837 to i32
  %cmp1539 = icmp sgt i32 %conv1538, 32
  br i1 %cmp1539, label %land.lhs.true.1541, label %lor.lhs.false.1545

land.lhs.true.1541:                               ; preds = %if.then.1537
  %838 = load i8, i8* %c, align 1
  %conv1542 = sext i8 %838 to i32
  %cmp1543 = icmp slt i32 %conv1542, 127
  br i1 %cmp1543, label %if.then.1549, label %lor.lhs.false.1545

lor.lhs.false.1545:                               ; preds = %land.lhs.true.1541, %if.then.1537
  %839 = load i8, i8* %c, align 1
  %conv1546 = sext i8 %839 to i32
  %cmp1547 = icmp eq i32 %conv1546, 32
  br i1 %cmp1547, label %if.then.1549, label %if.else.1552

if.then.1549:                                     ; preds = %lor.lhs.false.1545, %land.lhs.true.1541
  %840 = load %struct.sv*, %struct.sv** %msg, align 8
  %841 = load i8, i8* %c, align 1
  %conv1550 = sext i8 %841 to i32
  %and1551 = and i32 %conv1550, 255
  call void (%struct.sv*, i8*, ...) @Perl_sv_catpvf(%struct.sv* %840, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.64, i32 0, i32 0), i32 %and1551)
  br label %if.end.1555

if.else.1552:                                     ; preds = %lor.lhs.false.1545
  %842 = load %struct.sv*, %struct.sv** %msg, align 8
  %843 = load i8, i8* %c, align 1
  %conv1553 = sext i8 %843 to i64
  %and1554 = and i64 %conv1553, 255
  call void (%struct.sv*, i8*, ...) @Perl_sv_catpvf(%struct.sv* %842, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.65, i32 0, i32 0), i64 %and1554)
  br label %if.end.1555

if.end.1555:                                      ; preds = %if.else.1552, %if.then.1549
  br label %if.end.1557

if.else.1556:                                     ; preds = %if.then.1529
  %844 = load %struct.sv*, %struct.sv** %msg, align 8
  call void @Perl_sv_catpv(%struct.sv* %844, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.66, i32 0, i32 0))
  br label %if.end.1557

if.end.1557:                                      ; preds = %if.else.1556, %if.end.1555
  %845 = load %struct.sv*, %struct.sv** %msg, align 8
  call void (i32, i8*, ...) @Perl_warner(i32 34, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.67, i32 0, i32 0), %struct.sv* %845)
  br label %if.end.1558

if.end.1558:                                      ; preds = %if.end.1557, %lor.lhs.false.1524, %land.lhs.true.1516, %lor.lhs.false.1512, %unknown
  %846 = load i8, i8* %c, align 1
  %conv1559 = sext i8 %846 to i32
  %cmp1560 = icmp eq i32 %conv1559, 0
  br i1 %cmp1560, label %if.then.1562, label %if.end.1564

if.then.1562:                                     ; preds = %if.end.1558
  %847 = load i8*, i8** %q, align 8
  %incdec.ptr1563 = getelementptr inbounds i8, i8* %847, i32 -1
  store i8* %incdec.ptr1563, i8** %q, align 8
  br label %if.end.1564

if.end.1564:                                      ; preds = %if.then.1562, %if.end.1558
  %848 = load i8*, i8** %p, align 8
  store i8* %848, i8** %eptr, align 8
  %849 = load i8*, i8** %q, align 8
  %850 = load i8*, i8** %p, align 8
  %sub.ptr.lhs.cast1565 = ptrtoint i8* %849 to i64
  %sub.ptr.rhs.cast1566 = ptrtoint i8* %850 to i64
  %sub.ptr.sub1567 = sub i64 %sub.ptr.lhs.cast1565, %sub.ptr.rhs.cast1566
  store i64 %sub.ptr.sub1567, i64* %elen, align 8
  %851 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any1568 = getelementptr inbounds %struct.sv, %struct.sv* %851, i32 0, i32 0
  %852 = load i8*, i8** %sv_any1568, align 8
  %853 = bitcast i8* %852 to %struct.xpv*
  %xpv_len = getelementptr inbounds %struct.xpv, %struct.xpv* %853, i32 0, i32 2
  %854 = load i64, i64* %xpv_len, align 8
  %855 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any1569 = getelementptr inbounds %struct.sv, %struct.sv* %855, i32 0, i32 0
  %856 = load i8*, i8** %sv_any1569, align 8
  %857 = bitcast i8* %856 to %struct.xpv*
  %xpv_cur1570 = getelementptr inbounds %struct.xpv, %struct.xpv* %857, i32 0, i32 1
  %858 = load i64, i64* %xpv_cur1570, align 8
  %859 = load i64, i64* %elen, align 8
  %add1571 = add i64 %858, %859
  %add1572 = add i64 %add1571, 1
  %cmp1573 = icmp ult i64 %854, %add1572
  br i1 %cmp1573, label %cond.true.1575, label %cond.false.1581

cond.true.1575:                                   ; preds = %if.end.1564
  %860 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %861 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any1576 = getelementptr inbounds %struct.sv, %struct.sv* %861, i32 0, i32 0
  %862 = load i8*, i8** %sv_any1576, align 8
  %863 = bitcast i8* %862 to %struct.xpv*
  %xpv_cur1577 = getelementptr inbounds %struct.xpv, %struct.xpv* %863, i32 0, i32 1
  %864 = load i64, i64* %xpv_cur1577, align 8
  %865 = load i64, i64* %elen, align 8
  %add1578 = add i64 %864, %865
  %add1579 = add i64 %add1578, 1
  %call1580 = call i8* @Perl_sv_grow(%struct.sv* %860, i64 %add1579)
  br label %cond.end.1584

cond.false.1581:                                  ; preds = %if.end.1564
  %866 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any1582 = getelementptr inbounds %struct.sv, %struct.sv* %866, i32 0, i32 0
  %867 = load i8*, i8** %sv_any1582, align 8
  %868 = bitcast i8* %867 to %struct.xpv*
  %xpv_pv1583 = getelementptr inbounds %struct.xpv, %struct.xpv* %868, i32 0, i32 0
  %869 = load i8*, i8** %xpv_pv1583, align 8
  br label %cond.end.1584

cond.end.1584:                                    ; preds = %cond.false.1581, %cond.true.1575
  %cond1585 = phi i8* [ %call1580, %cond.true.1575 ], [ %869, %cond.false.1581 ]
  %870 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any1586 = getelementptr inbounds %struct.sv, %struct.sv* %870, i32 0, i32 0
  %871 = load i8*, i8** %sv_any1586, align 8
  %872 = bitcast i8* %871 to %struct.xpv*
  %xpv_pv1587 = getelementptr inbounds %struct.xpv, %struct.xpv* %872, i32 0, i32 0
  %873 = load i8*, i8** %xpv_pv1587, align 8
  %874 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any1588 = getelementptr inbounds %struct.sv, %struct.sv* %874, i32 0, i32 0
  %875 = load i8*, i8** %sv_any1588, align 8
  %876 = bitcast i8* %875 to %struct.xpv*
  %xpv_cur1589 = getelementptr inbounds %struct.xpv, %struct.xpv* %876, i32 0, i32 1
  %877 = load i64, i64* %xpv_cur1589, align 8
  %add.ptr1590 = getelementptr inbounds i8, i8* %873, i64 %877
  store i8* %add.ptr1590, i8** %p, align 8
  %878 = load i8*, i8** %p, align 8
  %879 = load i8*, i8** %eptr, align 8
  %880 = load i64, i64* %elen, align 8
  %mul1591 = mul i64 %880, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %878, i8* %879, i64 %mul1591, i32 1, i1 false)
  %881 = load i64, i64* %elen, align 8
  %882 = load i8*, i8** %p, align 8
  %add.ptr1592 = getelementptr inbounds i8, i8* %882, i64 %881
  store i8* %add.ptr1592, i8** %p, align 8
  %883 = load i8*, i8** %p, align 8
  store i8 0, i8* %883, align 1
  %884 = load i8*, i8** %p, align 8
  %885 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any1593 = getelementptr inbounds %struct.sv, %struct.sv* %885, i32 0, i32 0
  %886 = load i8*, i8** %sv_any1593, align 8
  %887 = bitcast i8* %886 to %struct.xpv*
  %xpv_pv1594 = getelementptr inbounds %struct.xpv, %struct.xpv* %887, i32 0, i32 0
  %888 = load i8*, i8** %xpv_pv1594, align 8
  %sub.ptr.lhs.cast1595 = ptrtoint i8* %884 to i64
  %sub.ptr.rhs.cast1596 = ptrtoint i8* %888 to i64
  %sub.ptr.sub1597 = sub i64 %sub.ptr.lhs.cast1595, %sub.ptr.rhs.cast1596
  %889 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any1598 = getelementptr inbounds %struct.sv, %struct.sv* %889, i32 0, i32 0
  %890 = load i8*, i8** %sv_any1598, align 8
  %891 = bitcast i8* %890 to %struct.xpv*
  %xpv_cur1599 = getelementptr inbounds %struct.xpv, %struct.xpv* %891, i32 0, i32 1
  store i64 %sub.ptr.sub1597, i64* %xpv_cur1599, align 8
  %892 = load i32, i32* %osvix, align 4
  store i32 %892, i32* %svix, align 4
  br label %for.inc.1826

sw.epilog.1600:                                   ; preds = %float_converted, %if.then.1330, %if.end.1188, %if.end.820
  %893 = load i64, i64* %esignlen, align 8
  %894 = load i64, i64* %zeros, align 8
  %add1601 = add i64 %893, %894
  %895 = load i64, i64* %elen, align 8
  %add1602 = add i64 %add1601, %895
  store i64 %add1602, i64* %have, align 8
  %896 = load i8, i8* %is_utf8, align 1
  %conv1603 = sext i8 %896 to i32
  %897 = load i8, i8* %has_utf8, align 1
  %conv1604 = sext i8 %897 to i32
  %cmp1605 = icmp ne i32 %conv1603, %conv1604
  br i1 %cmp1605, label %if.then.1607, label %if.end.1650

if.then.1607:                                     ; preds = %sw.epilog.1600
  %898 = load i8, i8* %is_utf8, align 1
  %tobool1608 = icmp ne i8 %898, 0
  br i1 %tobool1608, label %if.then.1609, label %if.else.1616

if.then.1609:                                     ; preds = %if.then.1607
  %899 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any1610 = getelementptr inbounds %struct.sv, %struct.sv* %899, i32 0, i32 0
  %900 = load i8*, i8** %sv_any1610, align 8
  %901 = bitcast i8* %900 to %struct.xpv*
  %xpv_cur1611 = getelementptr inbounds %struct.xpv, %struct.xpv* %901, i32 0, i32 1
  %902 = load i64, i64* %xpv_cur1611, align 8
  %tobool1612 = icmp ne i64 %902, 0
  br i1 %tobool1612, label %if.then.1613, label %if.end.1615

if.then.1613:                                     ; preds = %if.then.1609
  %903 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call1614 = call i64 @Perl_sv_utf8_upgrade_flags(%struct.sv* %903, i32 2)
  br label %if.end.1615

if.end.1615:                                      ; preds = %if.then.1613, %if.then.1609
  br label %if.end.1625

if.else.1616:                                     ; preds = %if.then.1607
  %904 = load i8*, i8** %eptr, align 8
  %905 = load i64, i64* %elen, align 8
  %call1618 = call %struct.sv* @Perl_newSVpvn(i8* %904, i64 %905)
  %call1619 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call1618)
  store %struct.sv* %call1619, %struct.sv** %nsv1617, align 8
  %906 = load %struct.sv*, %struct.sv** %nsv1617, align 8
  %call1620 = call i64 @Perl_sv_utf8_upgrade_flags(%struct.sv* %906, i32 2)
  %907 = load %struct.sv*, %struct.sv** %nsv1617, align 8
  %sv_any1621 = getelementptr inbounds %struct.sv, %struct.sv* %907, i32 0, i32 0
  %908 = load i8*, i8** %sv_any1621, align 8
  %909 = bitcast i8* %908 to %struct.xpv*
  %xpv_pv1622 = getelementptr inbounds %struct.xpv, %struct.xpv* %909, i32 0, i32 0
  %910 = load i8*, i8** %xpv_pv1622, align 8
  store i8* %910, i8** %eptr, align 8
  %911 = load %struct.sv*, %struct.sv** %nsv1617, align 8
  %sv_any1623 = getelementptr inbounds %struct.sv, %struct.sv* %911, i32 0, i32 0
  %912 = load i8*, i8** %sv_any1623, align 8
  %913 = bitcast i8* %912 to %struct.xpv*
  %xpv_cur1624 = getelementptr inbounds %struct.xpv, %struct.xpv* %913, i32 0, i32 1
  %914 = load i64, i64* %xpv_cur1624, align 8
  store i64 %914, i64* %elen, align 8
  br label %if.end.1625

if.end.1625:                                      ; preds = %if.else.1616, %if.end.1615
  %915 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any1626 = getelementptr inbounds %struct.sv, %struct.sv* %915, i32 0, i32 0
  %916 = load i8*, i8** %sv_any1626, align 8
  %917 = bitcast i8* %916 to %struct.xpv*
  %xpv_len1627 = getelementptr inbounds %struct.xpv, %struct.xpv* %917, i32 0, i32 2
  %918 = load i64, i64* %xpv_len1627, align 8
  %919 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any1628 = getelementptr inbounds %struct.sv, %struct.sv* %919, i32 0, i32 0
  %920 = load i8*, i8** %sv_any1628, align 8
  %921 = bitcast i8* %920 to %struct.xpv*
  %xpv_cur1629 = getelementptr inbounds %struct.xpv, %struct.xpv* %921, i32 0, i32 1
  %922 = load i64, i64* %xpv_cur1629, align 8
  %923 = load i64, i64* %elen, align 8
  %add1630 = add i64 %922, %923
  %add1631 = add i64 %add1630, 1
  %cmp1632 = icmp ult i64 %918, %add1631
  br i1 %cmp1632, label %cond.true.1634, label %cond.false.1640

cond.true.1634:                                   ; preds = %if.end.1625
  %924 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %925 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any1635 = getelementptr inbounds %struct.sv, %struct.sv* %925, i32 0, i32 0
  %926 = load i8*, i8** %sv_any1635, align 8
  %927 = bitcast i8* %926 to %struct.xpv*
  %xpv_cur1636 = getelementptr inbounds %struct.xpv, %struct.xpv* %927, i32 0, i32 1
  %928 = load i64, i64* %xpv_cur1636, align 8
  %929 = load i64, i64* %elen, align 8
  %add1637 = add i64 %928, %929
  %add1638 = add i64 %add1637, 1
  %call1639 = call i8* @Perl_sv_grow(%struct.sv* %924, i64 %add1638)
  br label %cond.end.1643

cond.false.1640:                                  ; preds = %if.end.1625
  %930 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any1641 = getelementptr inbounds %struct.sv, %struct.sv* %930, i32 0, i32 0
  %931 = load i8*, i8** %sv_any1641, align 8
  %932 = bitcast i8* %931 to %struct.xpv*
  %xpv_pv1642 = getelementptr inbounds %struct.xpv, %struct.xpv* %932, i32 0, i32 0
  %933 = load i8*, i8** %xpv_pv1642, align 8
  br label %cond.end.1643

cond.end.1643:                                    ; preds = %cond.false.1640, %cond.true.1634
  %cond1644 = phi i8* [ %call1639, %cond.true.1634 ], [ %933, %cond.false.1640 ]
  %934 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any1645 = getelementptr inbounds %struct.sv, %struct.sv* %934, i32 0, i32 0
  %935 = load i8*, i8** %sv_any1645, align 8
  %936 = bitcast i8* %935 to %struct.xpv*
  %xpv_pv1646 = getelementptr inbounds %struct.xpv, %struct.xpv* %936, i32 0, i32 0
  %937 = load i8*, i8** %xpv_pv1646, align 8
  %938 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any1647 = getelementptr inbounds %struct.sv, %struct.sv* %938, i32 0, i32 0
  %939 = load i8*, i8** %sv_any1647, align 8
  %940 = bitcast i8* %939 to %struct.xpv*
  %xpv_cur1648 = getelementptr inbounds %struct.xpv, %struct.xpv* %940, i32 0, i32 1
  %941 = load i64, i64* %xpv_cur1648, align 8
  %add.ptr1649 = getelementptr inbounds i8, i8* %937, i64 %941
  store i8* %add.ptr1649, i8** %p, align 8
  %942 = load i8*, i8** %p, align 8
  store i8 0, i8* %942, align 1
  br label %if.end.1650

if.end.1650:                                      ; preds = %cond.end.1643, %sw.epilog.1600
  %943 = load i8, i8* %left, align 1
  %conv1651 = sext i8 %943 to i32
  %tobool1652 = icmp ne i32 %conv1651, 0
  br i1 %tobool1652, label %land.lhs.true.1653, label %if.end.1700

land.lhs.true.1653:                               ; preds = %if.end.1650
  %944 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings1654 = getelementptr inbounds %struct.cop, %struct.cop* %944, i32 0, i32 14
  %945 = load %struct.sv*, %struct.sv** %cop_warnings1654, align 8
  %cmp1655 = icmp ne %struct.sv* %945, null
  br i1 %cmp1655, label %land.lhs.true.1657, label %lor.lhs.false.1673

land.lhs.true.1657:                               ; preds = %land.lhs.true.1653
  %946 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings1658 = getelementptr inbounds %struct.cop, %struct.cop* %946, i32 0, i32 14
  %947 = load %struct.sv*, %struct.sv** %cop_warnings1658, align 8
  %cmp1659 = icmp ne %struct.sv* %947, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 2)
  br i1 %cmp1659, label %land.lhs.true.1661, label %lor.lhs.false.1673

land.lhs.true.1661:                               ; preds = %land.lhs.true.1657
  %948 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings1662 = getelementptr inbounds %struct.cop, %struct.cop* %948, i32 0, i32 14
  %949 = load %struct.sv*, %struct.sv** %cop_warnings1662, align 8
  %cmp1663 = icmp eq %struct.sv* %949, getelementptr inbounds (%struct.sv, %struct.sv* null, i64 1)
  br i1 %cmp1663, label %land.lhs.true.1681, label %lor.lhs.false.1665

lor.lhs.false.1665:                               ; preds = %land.lhs.true.1661
  %950 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings1666 = getelementptr inbounds %struct.cop, %struct.cop* %950, i32 0, i32 14
  %951 = load %struct.sv*, %struct.sv** %cop_warnings1666, align 8
  %sv_any1667 = getelementptr inbounds %struct.sv, %struct.sv* %951, i32 0, i32 0
  %952 = load i8*, i8** %sv_any1667, align 8
  %953 = bitcast i8* %952 to %struct.xpv*
  %xpv_pv1668 = getelementptr inbounds %struct.xpv, %struct.xpv* %953, i32 0, i32 0
  %954 = load i8*, i8** %xpv_pv1668, align 8
  %arrayidx1669 = getelementptr inbounds i8, i8* %954, i64 8
  %955 = load i8, i8* %arrayidx1669, align 1
  %conv1670 = sext i8 %955 to i32
  %and1671 = and i32 %conv1670, 16
  %tobool1672 = icmp ne i32 %and1671, 0
  br i1 %tobool1672, label %land.lhs.true.1681, label %lor.lhs.false.1673

lor.lhs.false.1673:                               ; preds = %lor.lhs.false.1665, %land.lhs.true.1657, %land.lhs.true.1653
  %956 = load volatile %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings1674 = getelementptr inbounds %struct.cop, %struct.cop* %956, i32 0, i32 14
  %957 = load %struct.sv*, %struct.sv** %cop_warnings1674, align 8
  %cmp1675 = icmp eq %struct.sv* %957, null
  br i1 %cmp1675, label %land.lhs.true.1677, label %if.end.1700

land.lhs.true.1677:                               ; preds = %lor.lhs.false.1673
  %958 = load i8, i8* @PL_dowarn, align 1
  %conv1678 = zext i8 %958 to i32
  %and1679 = and i32 %conv1678, 1
  %tobool1680 = icmp ne i32 %and1679, 0
  br i1 %tobool1680, label %land.lhs.true.1681, label %if.end.1700

land.lhs.true.1681:                               ; preds = %land.lhs.true.1677, %lor.lhs.false.1665, %land.lhs.true.1661
  %959 = load i8*, i8** %eptr, align 8
  %960 = load i64, i64* %elen, align 8
  %call1682 = call i8* @memchr(i8* %959, i32 10, i64 %960)
  %tobool1683 = icmp ne i8* %call1682, null
  br i1 %tobool1683, label %land.lhs.true.1684, label %if.end.1700

land.lhs.true.1684:                               ; preds = %land.lhs.true.1681
  %961 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type1685 = getelementptr inbounds %struct.op, %struct.op* %961, i32 0, i32 4
  %962 = load i16, i16* %op_type1685, align 2
  %conv1686 = zext i16 %962 to i32
  %cmp1687 = icmp eq i32 %conv1686, 208
  br i1 %cmp1687, label %if.then.1694, label %lor.lhs.false.1689

lor.lhs.false.1689:                               ; preds = %land.lhs.true.1684
  %963 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type1690 = getelementptr inbounds %struct.op, %struct.op* %963, i32 0, i32 4
  %964 = load i16, i16* %op_type1690, align 2
  %conv1691 = zext i16 %964 to i32
  %cmp1692 = icmp eq i32 %conv1691, 115
  br i1 %cmp1692, label %if.then.1694, label %if.end.1700

if.then.1694:                                     ; preds = %lor.lhs.false.1689, %land.lhs.true.1684
  %965 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type1695 = getelementptr inbounds %struct.op, %struct.op* %965, i32 0, i32 4
  %966 = load i16, i16* %op_type1695, align 2
  %conv1696 = zext i16 %966 to i32
  %cmp1697 = icmp eq i32 %conv1696, 208
  %cond1699 = select i1 %cmp1697, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.63, i32 0, i32 0)
  call void (i32, i8*, ...) @Perl_warner(i32 34, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.68, i32 0, i32 0), i8* %cond1699)
  br label %if.end.1700

if.end.1700:                                      ; preds = %if.then.1694, %lor.lhs.false.1689, %land.lhs.true.1681, %land.lhs.true.1677, %lor.lhs.false.1673, %if.end.1650
  %967 = load i64, i64* %have, align 8
  %968 = load i64, i64* %width, align 8
  %cmp1701 = icmp ugt i64 %967, %968
  br i1 %cmp1701, label %cond.true.1703, label %cond.false.1704

cond.true.1703:                                   ; preds = %if.end.1700
  %969 = load i64, i64* %have, align 8
  br label %cond.end.1705

cond.false.1704:                                  ; preds = %if.end.1700
  %970 = load i64, i64* %width, align 8
  br label %cond.end.1705

cond.end.1705:                                    ; preds = %cond.false.1704, %cond.true.1703
  %cond1706 = phi i64 [ %969, %cond.true.1703 ], [ %970, %cond.false.1704 ]
  store i64 %cond1706, i64* %need, align 8
  %971 = load i64, i64* %need, align 8
  %972 = load i64, i64* %have, align 8
  %sub1707 = sub i64 %971, %972
  store i64 %sub1707, i64* %gap, align 8
  %973 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any1708 = getelementptr inbounds %struct.sv, %struct.sv* %973, i32 0, i32 0
  %974 = load i8*, i8** %sv_any1708, align 8
  %975 = bitcast i8* %974 to %struct.xpv*
  %xpv_len1709 = getelementptr inbounds %struct.xpv, %struct.xpv* %975, i32 0, i32 2
  %976 = load i64, i64* %xpv_len1709, align 8
  %977 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any1710 = getelementptr inbounds %struct.sv, %struct.sv* %977, i32 0, i32 0
  %978 = load i8*, i8** %sv_any1710, align 8
  %979 = bitcast i8* %978 to %struct.xpv*
  %xpv_cur1711 = getelementptr inbounds %struct.xpv, %struct.xpv* %979, i32 0, i32 1
  %980 = load i64, i64* %xpv_cur1711, align 8
  %981 = load i64, i64* %need, align 8
  %add1712 = add i64 %980, %981
  %982 = load i64, i64* %dotstrlen, align 8
  %add1713 = add i64 %add1712, %982
  %add1714 = add i64 %add1713, 1
  %cmp1715 = icmp ult i64 %976, %add1714
  br i1 %cmp1715, label %cond.true.1717, label %cond.false.1724

cond.true.1717:                                   ; preds = %cond.end.1705
  %983 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %984 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any1718 = getelementptr inbounds %struct.sv, %struct.sv* %984, i32 0, i32 0
  %985 = load i8*, i8** %sv_any1718, align 8
  %986 = bitcast i8* %985 to %struct.xpv*
  %xpv_cur1719 = getelementptr inbounds %struct.xpv, %struct.xpv* %986, i32 0, i32 1
  %987 = load i64, i64* %xpv_cur1719, align 8
  %988 = load i64, i64* %need, align 8
  %add1720 = add i64 %987, %988
  %989 = load i64, i64* %dotstrlen, align 8
  %add1721 = add i64 %add1720, %989
  %add1722 = add i64 %add1721, 1
  %call1723 = call i8* @Perl_sv_grow(%struct.sv* %983, i64 %add1722)
  br label %cond.end.1727

cond.false.1724:                                  ; preds = %cond.end.1705
  %990 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any1725 = getelementptr inbounds %struct.sv, %struct.sv* %990, i32 0, i32 0
  %991 = load i8*, i8** %sv_any1725, align 8
  %992 = bitcast i8* %991 to %struct.xpv*
  %xpv_pv1726 = getelementptr inbounds %struct.xpv, %struct.xpv* %992, i32 0, i32 0
  %993 = load i8*, i8** %xpv_pv1726, align 8
  br label %cond.end.1727

cond.end.1727:                                    ; preds = %cond.false.1724, %cond.true.1717
  %cond1728 = phi i8* [ %call1723, %cond.true.1717 ], [ %993, %cond.false.1724 ]
  %994 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any1729 = getelementptr inbounds %struct.sv, %struct.sv* %994, i32 0, i32 0
  %995 = load i8*, i8** %sv_any1729, align 8
  %996 = bitcast i8* %995 to %struct.xpv*
  %xpv_pv1730 = getelementptr inbounds %struct.xpv, %struct.xpv* %996, i32 0, i32 0
  %997 = load i8*, i8** %xpv_pv1730, align 8
  %998 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any1731 = getelementptr inbounds %struct.sv, %struct.sv* %998, i32 0, i32 0
  %999 = load i8*, i8** %sv_any1731, align 8
  %1000 = bitcast i8* %999 to %struct.xpv*
  %xpv_cur1732 = getelementptr inbounds %struct.xpv, %struct.xpv* %1000, i32 0, i32 1
  %1001 = load i64, i64* %xpv_cur1732, align 8
  %add.ptr1733 = getelementptr inbounds i8, i8* %997, i64 %1001
  store i8* %add.ptr1733, i8** %p, align 8
  %1002 = load i64, i64* %esignlen, align 8
  %tobool1734 = icmp ne i64 %1002, 0
  br i1 %tobool1734, label %land.lhs.true.1735, label %if.end.1751

land.lhs.true.1735:                               ; preds = %cond.end.1727
  %1003 = load i8, i8* %fill, align 1
  %conv1736 = sext i8 %1003 to i32
  %cmp1737 = icmp eq i32 %conv1736, 48
  br i1 %cmp1737, label %if.then.1739, label %if.end.1751

if.then.1739:                                     ; preds = %land.lhs.true.1735
  store i32 0, i32* %i, align 4
  br label %for.cond.1740

for.cond.1740:                                    ; preds = %for.inc.1748, %if.then.1739
  %1004 = load i32, i32* %i, align 4
  %1005 = load i64, i64* %esignlen, align 8
  %conv1741 = trunc i64 %1005 to i32
  %cmp1742 = icmp slt i32 %1004, %conv1741
  br i1 %cmp1742, label %for.body.1744, label %for.end.1750

for.body.1744:                                    ; preds = %for.cond.1740
  %1006 = load i32, i32* %i, align 4
  %idxprom1745 = sext i32 %1006 to i64
  %arrayidx1746 = getelementptr inbounds [4 x i8], [4 x i8]* %esignbuf, i32 0, i64 %idxprom1745
  %1007 = load i8, i8* %arrayidx1746, align 1
  %1008 = load i8*, i8** %p, align 8
  %incdec.ptr1747 = getelementptr inbounds i8, i8* %1008, i32 1
  store i8* %incdec.ptr1747, i8** %p, align 8
  store i8 %1007, i8* %1008, align 1
  br label %for.inc.1748

for.inc.1748:                                     ; preds = %for.body.1744
  %1009 = load i32, i32* %i, align 4
  %inc1749 = add nsw i32 %1009, 1
  store i32 %inc1749, i32* %i, align 4
  br label %for.cond.1740

for.end.1750:                                     ; preds = %for.cond.1740
  br label %if.end.1751

if.end.1751:                                      ; preds = %for.end.1750, %land.lhs.true.1735, %cond.end.1727
  %1010 = load i64, i64* %gap, align 8
  %tobool1752 = icmp ne i64 %1010, 0
  br i1 %tobool1752, label %land.lhs.true.1753, label %if.end.1758

land.lhs.true.1753:                               ; preds = %if.end.1751
  %1011 = load i8, i8* %left, align 1
  %tobool1754 = icmp ne i8 %1011, 0
  br i1 %tobool1754, label %if.end.1758, label %if.then.1755

if.then.1755:                                     ; preds = %land.lhs.true.1753
  %1012 = load i8*, i8** %p, align 8
  %1013 = load i8, i8* %fill, align 1
  %conv1756 = sext i8 %1013 to i32
  %1014 = trunc i32 %conv1756 to i8
  %1015 = load i64, i64* %gap, align 8
  call void @llvm.memset.p0i8.i64(i8* %1012, i8 %1014, i64 %1015, i32 1, i1 false)
  %1016 = load i64, i64* %gap, align 8
  %1017 = load i8*, i8** %p, align 8
  %add.ptr1757 = getelementptr inbounds i8, i8* %1017, i64 %1016
  store i8* %add.ptr1757, i8** %p, align 8
  br label %if.end.1758

if.end.1758:                                      ; preds = %if.then.1755, %land.lhs.true.1753, %if.end.1751
  %1018 = load i64, i64* %esignlen, align 8
  %tobool1759 = icmp ne i64 %1018, 0
  br i1 %tobool1759, label %land.lhs.true.1760, label %if.end.1776

land.lhs.true.1760:                               ; preds = %if.end.1758
  %1019 = load i8, i8* %fill, align 1
  %conv1761 = sext i8 %1019 to i32
  %cmp1762 = icmp ne i32 %conv1761, 48
  br i1 %cmp1762, label %if.then.1764, label %if.end.1776

if.then.1764:                                     ; preds = %land.lhs.true.1760
  store i32 0, i32* %i, align 4
  br label %for.cond.1765

for.cond.1765:                                    ; preds = %for.inc.1773, %if.then.1764
  %1020 = load i32, i32* %i, align 4
  %1021 = load i64, i64* %esignlen, align 8
  %conv1766 = trunc i64 %1021 to i32
  %cmp1767 = icmp slt i32 %1020, %conv1766
  br i1 %cmp1767, label %for.body.1769, label %for.end.1775

for.body.1769:                                    ; preds = %for.cond.1765
  %1022 = load i32, i32* %i, align 4
  %idxprom1770 = sext i32 %1022 to i64
  %arrayidx1771 = getelementptr inbounds [4 x i8], [4 x i8]* %esignbuf, i32 0, i64 %idxprom1770
  %1023 = load i8, i8* %arrayidx1771, align 1
  %1024 = load i8*, i8** %p, align 8
  %incdec.ptr1772 = getelementptr inbounds i8, i8* %1024, i32 1
  store i8* %incdec.ptr1772, i8** %p, align 8
  store i8 %1023, i8* %1024, align 1
  br label %for.inc.1773

for.inc.1773:                                     ; preds = %for.body.1769
  %1025 = load i32, i32* %i, align 4
  %inc1774 = add nsw i32 %1025, 1
  store i32 %inc1774, i32* %i, align 4
  br label %for.cond.1765

for.end.1775:                                     ; preds = %for.cond.1765
  br label %if.end.1776

if.end.1776:                                      ; preds = %for.end.1775, %land.lhs.true.1760, %if.end.1758
  %1026 = load i64, i64* %zeros, align 8
  %tobool1777 = icmp ne i64 %1026, 0
  br i1 %tobool1777, label %if.then.1778, label %if.end.1786

if.then.1778:                                     ; preds = %if.end.1776
  %1027 = load i64, i64* %zeros, align 8
  %conv1779 = trunc i64 %1027 to i32
  store i32 %conv1779, i32* %i, align 4
  br label %for.cond.1780

for.cond.1780:                                    ; preds = %for.inc.1784, %if.then.1778
  %1028 = load i32, i32* %i, align 4
  %tobool1781 = icmp ne i32 %1028, 0
  br i1 %tobool1781, label %for.body.1782, label %for.end.1785

for.body.1782:                                    ; preds = %for.cond.1780
  %1029 = load i8*, i8** %p, align 8
  %incdec.ptr1783 = getelementptr inbounds i8, i8* %1029, i32 1
  store i8* %incdec.ptr1783, i8** %p, align 8
  store i8 48, i8* %1029, align 1
  br label %for.inc.1784

for.inc.1784:                                     ; preds = %for.body.1782
  %1030 = load i32, i32* %i, align 4
  %dec = add nsw i32 %1030, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond.1780

for.end.1785:                                     ; preds = %for.cond.1780
  br label %if.end.1786

if.end.1786:                                      ; preds = %for.end.1785, %if.end.1776
  %1031 = load i64, i64* %elen, align 8
  %tobool1787 = icmp ne i64 %1031, 0
  br i1 %tobool1787, label %if.then.1788, label %if.end.1791

if.then.1788:                                     ; preds = %if.end.1786
  %1032 = load i8*, i8** %p, align 8
  %1033 = load i8*, i8** %eptr, align 8
  %1034 = load i64, i64* %elen, align 8
  %mul1789 = mul i64 %1034, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %1032, i8* %1033, i64 %mul1789, i32 1, i1 false)
  %1035 = load i64, i64* %elen, align 8
  %1036 = load i8*, i8** %p, align 8
  %add.ptr1790 = getelementptr inbounds i8, i8* %1036, i64 %1035
  store i8* %add.ptr1790, i8** %p, align 8
  br label %if.end.1791

if.end.1791:                                      ; preds = %if.then.1788, %if.end.1786
  %1037 = load i64, i64* %gap, align 8
  %tobool1792 = icmp ne i64 %1037, 0
  br i1 %tobool1792, label %land.lhs.true.1793, label %if.end.1798

land.lhs.true.1793:                               ; preds = %if.end.1791
  %1038 = load i8, i8* %left, align 1
  %conv1794 = sext i8 %1038 to i32
  %tobool1795 = icmp ne i32 %conv1794, 0
  br i1 %tobool1795, label %if.then.1796, label %if.end.1798

if.then.1796:                                     ; preds = %land.lhs.true.1793
  %1039 = load i8*, i8** %p, align 8
  %1040 = load i64, i64* %gap, align 8
  call void @llvm.memset.p0i8.i64(i8* %1039, i8 32, i64 %1040, i32 1, i1 false)
  %1041 = load i64, i64* %gap, align 8
  %1042 = load i8*, i8** %p, align 8
  %add.ptr1797 = getelementptr inbounds i8, i8* %1042, i64 %1041
  store i8* %add.ptr1797, i8** %p, align 8
  br label %if.end.1798

if.end.1798:                                      ; preds = %if.then.1796, %land.lhs.true.1793, %if.end.1791
  %1043 = load i8, i8* %vectorize, align 1
  %tobool1799 = icmp ne i8 %1043, 0
  br i1 %tobool1799, label %if.then.1800, label %if.end.1807

if.then.1800:                                     ; preds = %if.end.1798
  %1044 = load i64, i64* %veclen, align 8
  %tobool1801 = icmp ne i64 %1044, 0
  br i1 %tobool1801, label %if.then.1802, label %if.else.1805

if.then.1802:                                     ; preds = %if.then.1800
  %1045 = load i8*, i8** %p, align 8
  %1046 = load i8*, i8** %dotstr, align 8
  %1047 = load i64, i64* %dotstrlen, align 8
  %mul1803 = mul i64 %1047, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %1045, i8* %1046, i64 %mul1803, i32 1, i1 false)
  %1048 = load i64, i64* %dotstrlen, align 8
  %1049 = load i8*, i8** %p, align 8
  %add.ptr1804 = getelementptr inbounds i8, i8* %1049, i64 %1048
  store i8* %add.ptr1804, i8** %p, align 8
  br label %if.end.1806

if.else.1805:                                     ; preds = %if.then.1800
  store i8 0, i8* %vectorize, align 1
  br label %if.end.1806

if.end.1806:                                      ; preds = %if.else.1805, %if.then.1802
  br label %if.end.1807

if.end.1807:                                      ; preds = %if.end.1806, %if.end.1798
  %1050 = load i8, i8* %is_utf8, align 1
  %tobool1808 = icmp ne i8 %1050, 0
  br i1 %tobool1808, label %if.then.1809, label %if.end.1810

if.then.1809:                                     ; preds = %if.end.1807
  store i8 1, i8* %has_utf8, align 1
  br label %if.end.1810

if.end.1810:                                      ; preds = %if.then.1809, %if.end.1807
  %1051 = load i8, i8* %has_utf8, align 1
  %tobool1811 = icmp ne i8 %1051, 0
  br i1 %tobool1811, label %if.then.1812, label %if.end.1815

if.then.1812:                                     ; preds = %if.end.1810
  %1052 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags1813 = getelementptr inbounds %struct.sv, %struct.sv* %1052, i32 0, i32 2
  %1053 = load i32, i32* %sv_flags1813, align 4
  %or1814 = or i32 %1053, 536870912
  store i32 %or1814, i32* %sv_flags1813, align 4
  br label %if.end.1815

if.end.1815:                                      ; preds = %if.then.1812, %if.end.1810
  %1054 = load i8*, i8** %p, align 8
  store i8 0, i8* %1054, align 1
  %1055 = load i8*, i8** %p, align 8
  %1056 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any1816 = getelementptr inbounds %struct.sv, %struct.sv* %1056, i32 0, i32 0
  %1057 = load i8*, i8** %sv_any1816, align 8
  %1058 = bitcast i8* %1057 to %struct.xpv*
  %xpv_pv1817 = getelementptr inbounds %struct.xpv, %struct.xpv* %1058, i32 0, i32 0
  %1059 = load i8*, i8** %xpv_pv1817, align 8
  %sub.ptr.lhs.cast1818 = ptrtoint i8* %1055 to i64
  %sub.ptr.rhs.cast1819 = ptrtoint i8* %1059 to i64
  %sub.ptr.sub1820 = sub i64 %sub.ptr.lhs.cast1818, %sub.ptr.rhs.cast1819
  %1060 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any1821 = getelementptr inbounds %struct.sv, %struct.sv* %1060, i32 0, i32 0
  %1061 = load i8*, i8** %sv_any1821, align 8
  %1062 = bitcast i8* %1061 to %struct.xpv*
  %xpv_cur1822 = getelementptr inbounds %struct.xpv, %struct.xpv* %1062, i32 0, i32 1
  store i64 %sub.ptr.sub1820, i64* %xpv_cur1822, align 8
  %1063 = load i8, i8* %vectorize, align 1
  %tobool1823 = icmp ne i8 %1063, 0
  br i1 %tobool1823, label %if.then.1824, label %if.end.1825

if.then.1824:                                     ; preds = %if.end.1815
  store i64 0, i64* %esignlen, align 8
  br label %vector

if.end.1825:                                      ; preds = %if.end.1815
  br label %for.inc.1826

for.inc.1826:                                     ; preds = %if.end.1825, %cond.end.1584, %if.end.1490, %if.then.987, %if.then.851
  %1064 = load i8*, i8** %q, align 8
  store i8* %1064, i8** %p, align 8
  br label %for.cond

for.end.1827:                                     ; preds = %if.then, %if.end.40, %if.end.67, %if.else.134, %if.then.152, %if.then.162, %if.then.230, %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define void @Perl_sv_catpvf_mg(%struct.sv* %sv, i8* %pat, ...) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %pat.addr = alloca i8*, align 8
  %args = alloca [1 x %struct.__va_list_tag], align 16
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i8* %pat, i8** %pat.addr, align 8
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %args, i32 0, i32 0
  %arraydecay1 = bitcast %struct.__va_list_tag* %arraydecay to i8*
  call void @llvm.va_start(i8* %arraydecay1)
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %1 = load i8*, i8** %pat.addr, align 8
  call void @Perl_sv_vcatpvf_mg(%struct.sv* %0, i8* %1, [1 x %struct.__va_list_tag]* %args)
  %arraydecay2 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %args, i32 0, i32 0
  %arraydecay23 = bitcast %struct.__va_list_tag* %arraydecay2 to i8*
  call void @llvm.va_end(i8* %arraydecay23)
  ret void
}

; Function Attrs: nounwind uwtable
define void @Perl_sv_vcatpvf_mg(%struct.sv* %sv, i8* %pat, [1 x %struct.__va_list_tag]* %args) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %pat.addr = alloca i8*, align 8
  %args.addr = alloca [1 x %struct.__va_list_tag]*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i8* %pat, i8** %pat.addr, align 8
  store [1 x %struct.__va_list_tag]* %args, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %1 = load i8*, i8** %pat.addr, align 8
  %2 = load i8*, i8** %pat.addr, align 8
  %call = call i64 @strlen(i8* %2)
  %3 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  call void @Perl_sv_vcatpvfn(%struct.sv* %0, i8* %1, i64 %call, [1 x %struct.__va_list_tag]* %3, %struct.sv** null, i32 0, i8* null)
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 2
  %5 = load i32, i32* %sv_flags, align 4
  %and = and i32 %5, 16384
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call1 = call i32 @Perl_mg_set(%struct.sv* %6)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal i8* @F0convert(double %nv, i8* %endbuf, i64* %len) #0 {
entry:
  %retval = alloca i8*, align 8
  %nv.addr = alloca double, align 8
  %endbuf.addr = alloca i8*, align 8
  %len.addr = alloca i64*, align 8
  %neg = alloca i32, align 4
  %uv = alloca i64, align 8
  %p = alloca i8*, align 8
  %dig = alloca i32, align 4
  store double %nv, double* %nv.addr, align 8
  store i8* %endbuf, i8** %endbuf.addr, align 8
  store i64* %len, i64** %len.addr, align 8
  %0 = load double, double* %nv.addr, align 8
  %cmp = fcmp olt double %0, 0.000000e+00
  %conv = zext i1 %cmp to i32
  store i32 %conv, i32* %neg, align 4
  %1 = load i8*, i8** %endbuf.addr, align 8
  store i8* %1, i8** %p, align 8
  %2 = load i32, i32* %neg, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load double, double* %nv.addr, align 8
  %sub = fsub double -0.000000e+00, %3
  store double %sub, double* %nv.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load double, double* %nv.addr, align 8
  %cmp1 = fcmp olt double %4, 0x43F0000000000000
  br i1 %cmp1, label %if.then.3, label %if.end.19

if.then.3:                                        ; preds = %if.end
  %5 = load double, double* %nv.addr, align 8
  %add = fadd double %5, 5.000000e-01
  store double %add, double* %nv.addr, align 8
  %6 = load double, double* %nv.addr, align 8
  %conv4 = fptoui double %6 to i64
  store i64 %conv4, i64* %uv, align 8
  %7 = load i64, i64* %uv, align 8
  %and = and i64 %7, 1
  %tobool5 = icmp ne i64 %and, 0
  br i1 %tobool5, label %land.lhs.true, label %if.end.10

land.lhs.true:                                    ; preds = %if.then.3
  %8 = load i64, i64* %uv, align 8
  %conv6 = uitofp i64 %8 to double
  %9 = load double, double* %nv.addr, align 8
  %cmp7 = fcmp oeq double %conv6, %9
  br i1 %cmp7, label %if.then.9, label %if.end.10

if.then.9:                                        ; preds = %land.lhs.true
  %10 = load i64, i64* %uv, align 8
  %dec = add i64 %10, -1
  store i64 %dec, i64* %uv, align 8
  br label %if.end.10

if.end.10:                                        ; preds = %if.then.9, %land.lhs.true, %if.then.3
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end.10
  %11 = load i64, i64* %uv, align 8
  %rem = urem i64 %11, 10
  %conv11 = trunc i64 %rem to i32
  store i32 %conv11, i32* %dig, align 4
  %12 = load i32, i32* %dig, align 4
  %add12 = add i32 48, %12
  %conv13 = trunc i32 %add12 to i8
  %13 = load i8*, i8** %p, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %13, i32 -1
  store i8* %incdec.ptr, i8** %p, align 8
  store i8 %conv13, i8* %incdec.ptr, align 1
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %14 = load i64, i64* %uv, align 8
  %div = udiv i64 %14, 10
  store i64 %div, i64* %uv, align 8
  %tobool14 = icmp ne i64 %div, 0
  br i1 %tobool14, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %15 = load i32, i32* %neg, align 4
  %tobool15 = icmp ne i32 %15, 0
  br i1 %tobool15, label %if.then.16, label %if.end.18

if.then.16:                                       ; preds = %do.end
  %16 = load i8*, i8** %p, align 8
  %incdec.ptr17 = getelementptr inbounds i8, i8* %16, i32 -1
  store i8* %incdec.ptr17, i8** %p, align 8
  store i8 45, i8* %incdec.ptr17, align 1
  br label %if.end.18

if.end.18:                                        ; preds = %if.then.16, %do.end
  %17 = load i8*, i8** %endbuf.addr, align 8
  %18 = load i8*, i8** %p, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %17 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %18 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %19 = load i64*, i64** %len.addr, align 8
  store i64 %sub.ptr.sub, i64* %19, align 8
  %20 = load i8*, i8** %p, align 8
  store i8* %20, i8** %retval
  br label %return

if.end.19:                                        ; preds = %if.end
  store i8* null, i8** %retval
  br label %return

return:                                           ; preds = %if.end.19, %if.end.18
  %21 = load i8*, i8** %retval
  ret i8* %21
}

; Function Attrs: nounwind uwtable
define internal i32 @S_expect_number(i8** %pattern) #0 {
entry:
  %pattern.addr = alloca i8**, align 8
  %var = alloca i32, align 4
  store i8** %pattern, i8*** %pattern.addr, align 8
  store i32 0, i32* %var, align 4
  %0 = load i8**, i8*** %pattern.addr, align 8
  %1 = load i8*, i8** %0, align 8
  %2 = load i8, i8* %1, align 1
  %conv = sext i8 %2 to i32
  switch i32 %conv, label %sw.epilog [
    i32 49, label %sw.bb
    i32 50, label %sw.bb
    i32 51, label %sw.bb
    i32 52, label %sw.bb
    i32 53, label %sw.bb
    i32 54, label %sw.bb
    i32 55, label %sw.bb
    i32 56, label %sw.bb
    i32 57, label %sw.bb
  ]

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %sw.bb
  %3 = load i8**, i8*** %pattern.addr, align 8
  %4 = load i8*, i8** %3, align 8
  %5 = load i8, i8* %4, align 1
  %conv1 = sext i8 %5 to i32
  %cmp = icmp sge i32 %conv1, 48
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %6 = load i8**, i8*** %pattern.addr, align 8
  %7 = load i8*, i8** %6, align 8
  %8 = load i8, i8* %7, align 1
  %conv3 = sext i8 %8 to i32
  %cmp4 = icmp sle i32 %conv3, 57
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %9 = phi i1 [ false, %while.cond ], [ %cmp4, %land.rhs ]
  br i1 %9, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %10 = load i32, i32* %var, align 4
  %mul = mul nsw i32 %10, 10
  %11 = load i8**, i8*** %pattern.addr, align 8
  %12 = load i8*, i8** %11, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %12, i32 1
  store i8* %incdec.ptr, i8** %11, align 8
  %13 = load i8, i8* %12, align 1
  %conv6 = sext i8 %13 to i32
  %sub = sub nsw i32 %conv6, 48
  %add = add nsw i32 %mul, %sub
  store i32 %add, i32* %var, align 4
  br label %while.cond

while.end:                                        ; preds = %land.end
  br label %sw.epilog

sw.epilog:                                        ; preds = %while.end, %entry
  %14 = load i32, i32* %var, align 4
  ret i32 %14
}

declare i8* @Perl_uvuni_to_utf8(i8*, i64) #1

; Function Attrs: nounwind
declare double @frexp(double, i32*) #3

declare %struct.op* @Perl_die(i8*, ...) #1

declare i8* @memchr(i8*, i32, i64) #1

declare void @Perl_save_int(i32*) #1

declare void @Perl_save_re_context() #1

declare i32 @Perl_call_method(i8*, i32) #1

declare void @Perl_free_tmps() #1

; Function Attrs: nounwind uwtable
define signext i8 @Perl_sv_cat_decode(%struct.sv* %dsv, %struct.sv* %encoding, %struct.sv* %ssv, i32* %offset, i8* %tstr, i32 %tlen) #0 {
entry:
  %dsv.addr = alloca %struct.sv*, align 8
  %encoding.addr = alloca %struct.sv*, align 8
  %ssv.addr = alloca %struct.sv*, align 8
  %offset.addr = alloca i32*, align 8
  %tstr.addr = alloca i8*, align 8
  %tlen.addr = alloca i32, align 4
  %ret = alloca i8, align 1
  %offsv = alloca %struct.sv*, align 8
  %sp = alloca %struct.sv**, align 8
  %tmp = alloca i32, align 4
  %tmp28 = alloca %struct.sv*, align 8
  %tmp39 = alloca %struct.sv*, align 8
  %tmp50 = alloca %struct.sv*, align 8
  %tmp61 = alloca %struct.sv*, align 8
  %tmp75 = alloca %struct.sv*, align 8
  store %struct.sv* %dsv, %struct.sv** %dsv.addr, align 8
  store %struct.sv* %encoding, %struct.sv** %encoding.addr, align 8
  store %struct.sv* %ssv, %struct.sv** %ssv.addr, align 8
  store i32* %offset, i32** %offset.addr, align 8
  store i8* %tstr, i8** %tstr.addr, align 8
  store i32 %tlen, i32* %tlen.addr, align 4
  store i8 0, i8* %ret, align 1
  %0 = load %struct.sv*, %struct.sv** %ssv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 262144
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %3, 262144
  %tobool3 = icmp ne i32 %and2, 0
  br i1 %tobool3, label %land.lhs.true.4, label %if.else

land.lhs.true.4:                                  ; preds = %land.lhs.true
  %4 = load %struct.sv*, %struct.sv** %encoding.addr, align 8
  %sv_flags5 = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 2
  %5 = load i32, i32* %sv_flags5, align 4
  %and6 = and i32 %5, 524288
  %tobool7 = icmp ne i32 %and6, 0
  br i1 %tobool7, label %land.lhs.true.8, label %if.else

land.lhs.true.8:                                  ; preds = %land.lhs.true.4
  %6 = load i32*, i32** %offset.addr, align 8
  %tobool9 = icmp ne i32* %6, null
  br i1 %tobool9, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true.8
  %7 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %7, %struct.sv*** %sp, align 8
  call void @Perl_push_scope()
  call void @Perl_save_int(i32* @PL_tmps_floor)
  %8 = load i32, i32* @PL_tmps_ix, align 4
  store i32 %8, i32* @PL_tmps_floor, align 4
  call void @Perl_save_re_context()
  %9 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %9, i32 1
  store i32* %incdec.ptr, i32** @PL_markstack_ptr, align 8
  %10 = load i32*, i32** @PL_markstack_max, align 8
  %cmp = icmp eq i32* %incdec.ptr, %10
  br i1 %cmp, label %if.then.10, label %if.end

if.then.10:                                       ; preds = %if.then
  call void @Perl_markstack_grow()
  br label %if.end

if.end:                                           ; preds = %if.then.10, %if.then
  %11 = load %struct.sv**, %struct.sv*** %sp, align 8
  %12 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %11 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %12 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %conv = trunc i64 %sub.ptr.div to i32
  %13 = load i32*, i32** @PL_markstack_ptr, align 8
  store i32 %conv, i32* %13, align 4
  store i32 %conv, i32* %tmp
  %14 = load i32, i32* %tmp
  %15 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %16 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast11 = ptrtoint %struct.sv** %15 to i64
  %sub.ptr.rhs.cast12 = ptrtoint %struct.sv** %16 to i64
  %sub.ptr.sub13 = sub i64 %sub.ptr.lhs.cast11, %sub.ptr.rhs.cast12
  %sub.ptr.div14 = sdiv exact i64 %sub.ptr.sub13, 8
  %cmp15 = icmp slt i64 %sub.ptr.div14, 6
  br i1 %cmp15, label %if.then.17, label %if.end.18

if.then.17:                                       ; preds = %if.end
  %17 = load %struct.sv**, %struct.sv*** %sp, align 8
  %18 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call = call %struct.sv** @Perl_stack_grow(%struct.sv** %17, %struct.sv** %18, i32 6)
  store %struct.sv** %call, %struct.sv*** %sp, align 8
  br label %if.end.18

if.end.18:                                        ; preds = %if.then.17, %if.end
  %19 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %20 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast19 = ptrtoint %struct.sv** %19 to i64
  %sub.ptr.rhs.cast20 = ptrtoint %struct.sv** %20 to i64
  %sub.ptr.sub21 = sub i64 %sub.ptr.lhs.cast19, %sub.ptr.rhs.cast20
  %sub.ptr.div22 = sdiv exact i64 %sub.ptr.sub21, 8
  %cmp23 = icmp slt i64 %sub.ptr.div22, 1
  br i1 %cmp23, label %if.then.25, label %if.end.27

if.then.25:                                       ; preds = %if.end.18
  %21 = load %struct.sv**, %struct.sv*** %sp, align 8
  %22 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call26 = call %struct.sv** @Perl_stack_grow(%struct.sv** %21, %struct.sv** %22, i32 1)
  store %struct.sv** %call26, %struct.sv*** %sp, align 8
  br label %if.end.27

if.end.27:                                        ; preds = %if.then.25, %if.end.18
  %23 = load %struct.sv*, %struct.sv** %encoding.addr, align 8
  %24 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr29 = getelementptr inbounds %struct.sv*, %struct.sv** %24, i32 1
  store %struct.sv** %incdec.ptr29, %struct.sv*** %sp, align 8
  store %struct.sv* %23, %struct.sv** %incdec.ptr29, align 8
  store %struct.sv* %23, %struct.sv** %tmp28
  %25 = load %struct.sv*, %struct.sv** %tmp28
  %26 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %27 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast30 = ptrtoint %struct.sv** %26 to i64
  %sub.ptr.rhs.cast31 = ptrtoint %struct.sv** %27 to i64
  %sub.ptr.sub32 = sub i64 %sub.ptr.lhs.cast30, %sub.ptr.rhs.cast31
  %sub.ptr.div33 = sdiv exact i64 %sub.ptr.sub32, 8
  %cmp34 = icmp slt i64 %sub.ptr.div33, 1
  br i1 %cmp34, label %if.then.36, label %if.end.38

if.then.36:                                       ; preds = %if.end.27
  %28 = load %struct.sv**, %struct.sv*** %sp, align 8
  %29 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call37 = call %struct.sv** @Perl_stack_grow(%struct.sv** %28, %struct.sv** %29, i32 1)
  store %struct.sv** %call37, %struct.sv*** %sp, align 8
  br label %if.end.38

if.end.38:                                        ; preds = %if.then.36, %if.end.27
  %30 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  %31 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr40 = getelementptr inbounds %struct.sv*, %struct.sv** %31, i32 1
  store %struct.sv** %incdec.ptr40, %struct.sv*** %sp, align 8
  store %struct.sv* %30, %struct.sv** %incdec.ptr40, align 8
  store %struct.sv* %30, %struct.sv** %tmp39
  %32 = load %struct.sv*, %struct.sv** %tmp39
  %33 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %34 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast41 = ptrtoint %struct.sv** %33 to i64
  %sub.ptr.rhs.cast42 = ptrtoint %struct.sv** %34 to i64
  %sub.ptr.sub43 = sub i64 %sub.ptr.lhs.cast41, %sub.ptr.rhs.cast42
  %sub.ptr.div44 = sdiv exact i64 %sub.ptr.sub43, 8
  %cmp45 = icmp slt i64 %sub.ptr.div44, 1
  br i1 %cmp45, label %if.then.47, label %if.end.49

if.then.47:                                       ; preds = %if.end.38
  %35 = load %struct.sv**, %struct.sv*** %sp, align 8
  %36 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call48 = call %struct.sv** @Perl_stack_grow(%struct.sv** %35, %struct.sv** %36, i32 1)
  store %struct.sv** %call48, %struct.sv*** %sp, align 8
  br label %if.end.49

if.end.49:                                        ; preds = %if.then.47, %if.end.38
  %37 = load %struct.sv*, %struct.sv** %ssv.addr, align 8
  %38 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr51 = getelementptr inbounds %struct.sv*, %struct.sv** %38, i32 1
  store %struct.sv** %incdec.ptr51, %struct.sv*** %sp, align 8
  store %struct.sv* %37, %struct.sv** %incdec.ptr51, align 8
  store %struct.sv* %37, %struct.sv** %tmp50
  %39 = load %struct.sv*, %struct.sv** %tmp50
  %40 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %41 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast52 = ptrtoint %struct.sv** %40 to i64
  %sub.ptr.rhs.cast53 = ptrtoint %struct.sv** %41 to i64
  %sub.ptr.sub54 = sub i64 %sub.ptr.lhs.cast52, %sub.ptr.rhs.cast53
  %sub.ptr.div55 = sdiv exact i64 %sub.ptr.sub54, 8
  %cmp56 = icmp slt i64 %sub.ptr.div55, 1
  br i1 %cmp56, label %if.then.58, label %if.end.60

if.then.58:                                       ; preds = %if.end.49
  %42 = load %struct.sv**, %struct.sv*** %sp, align 8
  %43 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call59 = call %struct.sv** @Perl_stack_grow(%struct.sv** %42, %struct.sv** %43, i32 1)
  store %struct.sv** %call59, %struct.sv*** %sp, align 8
  br label %if.end.60

if.end.60:                                        ; preds = %if.then.58, %if.end.49
  %44 = load i32*, i32** %offset.addr, align 8
  %45 = load i32, i32* %44, align 4
  %conv62 = sext i32 %45 to i64
  %call63 = call %struct.sv* @Perl_newSViv(i64 %conv62)
  %call64 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call63)
  store %struct.sv* %call64, %struct.sv** %offsv, align 8
  %46 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr65 = getelementptr inbounds %struct.sv*, %struct.sv** %46, i32 1
  store %struct.sv** %incdec.ptr65, %struct.sv*** %sp, align 8
  store %struct.sv* %call64, %struct.sv** %incdec.ptr65, align 8
  store %struct.sv* %call64, %struct.sv** %tmp61
  %47 = load %struct.sv*, %struct.sv** %tmp61
  %48 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %49 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast66 = ptrtoint %struct.sv** %48 to i64
  %sub.ptr.rhs.cast67 = ptrtoint %struct.sv** %49 to i64
  %sub.ptr.sub68 = sub i64 %sub.ptr.lhs.cast66, %sub.ptr.rhs.cast67
  %sub.ptr.div69 = sdiv exact i64 %sub.ptr.sub68, 8
  %cmp70 = icmp slt i64 %sub.ptr.div69, 1
  br i1 %cmp70, label %if.then.72, label %if.end.74

if.then.72:                                       ; preds = %if.end.60
  %50 = load %struct.sv**, %struct.sv*** %sp, align 8
  %51 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call73 = call %struct.sv** @Perl_stack_grow(%struct.sv** %50, %struct.sv** %51, i32 1)
  store %struct.sv** %call73, %struct.sv*** %sp, align 8
  br label %if.end.74

if.end.74:                                        ; preds = %if.then.72, %if.end.60
  %52 = load i8*, i8** %tstr.addr, align 8
  %53 = load i32, i32* %tlen.addr, align 4
  %conv76 = sext i32 %53 to i64
  %call77 = call %struct.sv* @Perl_newSVpvn(i8* %52, i64 %conv76)
  %call78 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call77)
  %54 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr79 = getelementptr inbounds %struct.sv*, %struct.sv** %54, i32 1
  store %struct.sv** %incdec.ptr79, %struct.sv*** %sp, align 8
  store %struct.sv* %call78, %struct.sv** %incdec.ptr79, align 8
  store %struct.sv* %call78, %struct.sv** %tmp75
  %55 = load %struct.sv*, %struct.sv** %tmp75
  %56 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %56, %struct.sv*** @PL_stack_sp, align 8
  %call80 = call i32 @Perl_call_method(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.70, i32 0, i32 0), i32 0)
  %57 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %57, %struct.sv*** %sp, align 8
  %58 = load %struct.sv**, %struct.sv*** %sp, align 8
  %59 = load %struct.sv*, %struct.sv** %58, align 8
  %tobool81 = icmp ne %struct.sv* %59, null
  br i1 %tobool81, label %cond.false, label %cond.true

cond.true:                                        ; preds = %if.end.74
  br label %cond.end.120

cond.false:                                       ; preds = %if.end.74
  %60 = load %struct.sv**, %struct.sv*** %sp, align 8
  %61 = load %struct.sv*, %struct.sv** %60, align 8
  %sv_flags82 = getelementptr inbounds %struct.sv, %struct.sv* %61, i32 0, i32 2
  %62 = load i32, i32* %sv_flags82, align 4
  %and83 = and i32 %62, 262144
  %tobool84 = icmp ne i32 %and83, 0
  br i1 %tobool84, label %cond.true.85, label %cond.false.96

cond.true.85:                                     ; preds = %cond.false
  %63 = load %struct.sv**, %struct.sv*** %sp, align 8
  %64 = load %struct.sv*, %struct.sv** %63, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %64, i32 0, i32 0
  %65 = load i8*, i8** %sv_any, align 8
  %66 = bitcast i8* %65 to %struct.xpv*
  store %struct.xpv* %66, %struct.xpv** @PL_Xpv, align 8
  %tobool86 = icmp ne %struct.xpv* %66, null
  br i1 %tobool86, label %land.rhs, label %land.end.95

land.rhs:                                         ; preds = %cond.true.85
  %67 = load %struct.xpv*, %struct.xpv** @PL_Xpv, align 8
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %67, i32 0, i32 1
  %68 = load i64, i64* %xpv_cur, align 8
  %cmp87 = icmp ugt i64 %68, 1
  br i1 %cmp87, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs
  %69 = load %struct.xpv*, %struct.xpv** @PL_Xpv, align 8
  %xpv_cur89 = getelementptr inbounds %struct.xpv, %struct.xpv* %69, i32 0, i32 1
  %70 = load i64, i64* %xpv_cur89, align 8
  %tobool90 = icmp ne i64 %70, 0
  br i1 %tobool90, label %land.rhs.91, label %land.end

land.rhs.91:                                      ; preds = %lor.rhs
  %71 = load %struct.xpv*, %struct.xpv** @PL_Xpv, align 8
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %71, i32 0, i32 0
  %72 = load i8*, i8** %xpv_pv, align 8
  %73 = load i8, i8* %72, align 1
  %conv92 = sext i8 %73 to i32
  %cmp93 = icmp ne i32 %conv92, 48
  br label %land.end

land.end:                                         ; preds = %land.rhs.91, %lor.rhs
  %74 = phi i1 [ false, %lor.rhs ], [ %cmp93, %land.rhs.91 ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %land.rhs
  %75 = phi i1 [ true, %land.rhs ], [ %74, %land.end ]
  br label %land.end.95

land.end.95:                                      ; preds = %lor.end, %cond.true.85
  %76 = phi i1 [ false, %cond.true.85 ], [ %75, %lor.end ]
  %cond = select i1 %76, i32 1, i32 0
  br label %cond.end.118

cond.false.96:                                    ; preds = %cond.false
  %77 = load %struct.sv**, %struct.sv*** %sp, align 8
  %78 = load %struct.sv*, %struct.sv** %77, align 8
  %sv_flags97 = getelementptr inbounds %struct.sv, %struct.sv* %78, i32 0, i32 2
  %79 = load i32, i32* %sv_flags97, align 4
  %and98 = and i32 %79, 65536
  %tobool99 = icmp ne i32 %and98, 0
  br i1 %tobool99, label %cond.true.100, label %cond.false.104

cond.true.100:                                    ; preds = %cond.false.96
  %80 = load %struct.sv**, %struct.sv*** %sp, align 8
  %81 = load %struct.sv*, %struct.sv** %80, align 8
  %sv_any101 = getelementptr inbounds %struct.sv, %struct.sv* %81, i32 0, i32 0
  %82 = load i8*, i8** %sv_any101, align 8
  %83 = bitcast i8* %82 to %struct.xpviv*
  %xiv_iv = getelementptr inbounds %struct.xpviv, %struct.xpviv* %83, i32 0, i32 3
  %84 = load i64, i64* %xiv_iv, align 8
  %cmp102 = icmp ne i64 %84, 0
  %conv103 = zext i1 %cmp102 to i32
  br label %cond.end.116

cond.false.104:                                   ; preds = %cond.false.96
  %85 = load %struct.sv**, %struct.sv*** %sp, align 8
  %86 = load %struct.sv*, %struct.sv** %85, align 8
  %sv_flags105 = getelementptr inbounds %struct.sv, %struct.sv* %86, i32 0, i32 2
  %87 = load i32, i32* %sv_flags105, align 4
  %and106 = and i32 %87, 131072
  %tobool107 = icmp ne i32 %and106, 0
  br i1 %tobool107, label %cond.true.108, label %cond.false.112

cond.true.108:                                    ; preds = %cond.false.104
  %88 = load %struct.sv**, %struct.sv*** %sp, align 8
  %89 = load %struct.sv*, %struct.sv** %88, align 8
  %sv_any109 = getelementptr inbounds %struct.sv, %struct.sv* %89, i32 0, i32 0
  %90 = load i8*, i8** %sv_any109, align 8
  %91 = bitcast i8* %90 to %struct.xpvnv*
  %xnv_nv = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %91, i32 0, i32 4
  %92 = load double, double* %xnv_nv, align 8
  %cmp110 = fcmp une double %92, 0.000000e+00
  %conv111 = zext i1 %cmp110 to i32
  br label %cond.end

cond.false.112:                                   ; preds = %cond.false.104
  %93 = load %struct.sv**, %struct.sv*** %sp, align 8
  %94 = load %struct.sv*, %struct.sv** %93, align 8
  %call113 = call signext i8 @Perl_sv_2bool(%struct.sv* %94)
  %conv114 = sext i8 %call113 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false.112, %cond.true.108
  %cond115 = phi i32 [ %conv111, %cond.true.108 ], [ %conv114, %cond.false.112 ]
  br label %cond.end.116

cond.end.116:                                     ; preds = %cond.end, %cond.true.100
  %cond117 = phi i32 [ %conv103, %cond.true.100 ], [ %cond115, %cond.end ]
  br label %cond.end.118

cond.end.118:                                     ; preds = %cond.end.116, %land.end.95
  %cond119 = phi i32 [ %cond, %land.end.95 ], [ %cond117, %cond.end.116 ]
  br label %cond.end.120

cond.end.120:                                     ; preds = %cond.end.118, %cond.true
  %cond121 = phi i32 [ 0, %cond.true ], [ %cond119, %cond.end.118 ]
  %conv122 = trunc i32 %cond121 to i8
  store i8 %conv122, i8* %ret, align 1
  %95 = load %struct.sv*, %struct.sv** %offsv, align 8
  %sv_flags123 = getelementptr inbounds %struct.sv, %struct.sv* %95, i32 0, i32 2
  %96 = load i32, i32* %sv_flags123, align 4
  %and124 = and i32 %96, 65536
  %tobool125 = icmp ne i32 %and124, 0
  br i1 %tobool125, label %cond.true.126, label %cond.false.129

cond.true.126:                                    ; preds = %cond.end.120
  %97 = load %struct.sv*, %struct.sv** %offsv, align 8
  %sv_any127 = getelementptr inbounds %struct.sv, %struct.sv* %97, i32 0, i32 0
  %98 = load i8*, i8** %sv_any127, align 8
  %99 = bitcast i8* %98 to %struct.xpviv*
  %xiv_iv128 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %99, i32 0, i32 3
  %100 = load i64, i64* %xiv_iv128, align 8
  br label %cond.end.131

cond.false.129:                                   ; preds = %cond.end.120
  %101 = load %struct.sv*, %struct.sv** %offsv, align 8
  %call130 = call i64 @Perl_sv_2iv(%struct.sv* %101)
  br label %cond.end.131

cond.end.131:                                     ; preds = %cond.false.129, %cond.true.126
  %cond132 = phi i64 [ %100, %cond.true.126 ], [ %call130, %cond.false.129 ]
  %conv133 = trunc i64 %cond132 to i32
  %102 = load i32*, i32** %offset.addr, align 8
  store i32 %conv133, i32* %102, align 4
  %103 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %103, %struct.sv*** @PL_stack_sp, align 8
  %104 = load i32, i32* @PL_tmps_ix, align 4
  %105 = load i32, i32* @PL_tmps_floor, align 4
  %cmp134 = icmp sgt i32 %104, %105
  br i1 %cmp134, label %if.then.136, label %if.end.137

if.then.136:                                      ; preds = %cond.end.131
  call void @Perl_free_tmps()
  br label %if.end.137

if.end.137:                                       ; preds = %if.then.136, %cond.end.131
  call void @Perl_pop_scope()
  br label %if.end.138

if.else:                                          ; preds = %land.lhs.true.8, %land.lhs.true.4, %land.lhs.true, %entry
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.71, i32 0, i32 0))
  br label %if.end.138

if.end.138:                                       ; preds = %if.else, %if.end.137
  %106 = load i8, i8* %ret, align 1
  ret i8 %106
}

; Function Attrs: nounwind uwtable
define internal void @S_more_xiv() #0 {
entry:
  %xiv = alloca i64*, align 8
  %xivend = alloca i64*, align 8
  %ptr = alloca %struct.xpv*, align 8
  %call = call i8* @Perl_safesysmalloc(i64 4080)
  %0 = bitcast i8* %call to %struct.xpv*
  store %struct.xpv* %0, %struct.xpv** %ptr, align 8
  %1 = load %struct.xpv*, %struct.xpv** @PL_xiv_arenaroot, align 8
  %2 = bitcast %struct.xpv* %1 to i8*
  %3 = load %struct.xpv*, %struct.xpv** %ptr, align 8
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %3, i32 0, i32 0
  store i8* %2, i8** %xpv_pv, align 8
  %4 = load %struct.xpv*, %struct.xpv** %ptr, align 8
  store %struct.xpv* %4, %struct.xpv** @PL_xiv_arenaroot, align 8
  %5 = load %struct.xpv*, %struct.xpv** %ptr, align 8
  %6 = bitcast %struct.xpv* %5 to i64*
  store i64* %6, i64** %xiv, align 8
  %7 = load i64*, i64** %xiv, align 8
  %arrayidx = getelementptr inbounds i64, i64* %7, i64 509
  store i64* %arrayidx, i64** %xivend, align 8
  %8 = load i64*, i64** %xiv, align 8
  %add.ptr = getelementptr inbounds i64, i64* %8, i64 3
  store i64* %add.ptr, i64** %xiv, align 8
  %9 = load i64*, i64** %xiv, align 8
  store i64* %9, i64** @PL_xiv_root, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %10 = load i64*, i64** %xiv, align 8
  %11 = load i64*, i64** %xivend, align 8
  %cmp = icmp ult i64* %10, %11
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %12 = load i64*, i64** %xiv, align 8
  %add.ptr1 = getelementptr inbounds i64, i64* %12, i64 1
  %13 = load i64*, i64** %xiv, align 8
  %14 = bitcast i64* %13 to i64**
  store i64* %add.ptr1, i64** %14, align 8
  %15 = load i64*, i64** %xiv, align 8
  %incdec.ptr = getelementptr inbounds i64, i64* %15, i32 1
  store i64* %incdec.ptr, i64** %xiv, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %16 = load i64*, i64** %xiv, align 8
  %17 = bitcast i64* %16 to i64**
  store i64* null, i64** %17, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @S_more_xnv() #0 {
entry:
  %xnv = alloca double*, align 8
  %xnvend = alloca double*, align 8
  %ptr = alloca %struct.xpv*, align 8
  %call = call i8* @Perl_safesysmalloc(i64 4080)
  %0 = bitcast i8* %call to %struct.xpv*
  store %struct.xpv* %0, %struct.xpv** %ptr, align 8
  %1 = load %struct.xpv*, %struct.xpv** @PL_xnv_arenaroot, align 8
  %2 = bitcast %struct.xpv* %1 to i8*
  %3 = load %struct.xpv*, %struct.xpv** %ptr, align 8
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %3, i32 0, i32 0
  store i8* %2, i8** %xpv_pv, align 8
  %4 = load %struct.xpv*, %struct.xpv** %ptr, align 8
  store %struct.xpv* %4, %struct.xpv** @PL_xnv_arenaroot, align 8
  %5 = load %struct.xpv*, %struct.xpv** %ptr, align 8
  %6 = bitcast %struct.xpv* %5 to double*
  store double* %6, double** %xnv, align 8
  %7 = load double*, double** %xnv, align 8
  %arrayidx = getelementptr inbounds double, double* %7, i64 509
  store double* %arrayidx, double** %xnvend, align 8
  %8 = load double*, double** %xnv, align 8
  %add.ptr = getelementptr inbounds double, double* %8, i64 4
  store double* %add.ptr, double** %xnv, align 8
  %9 = load double*, double** %xnv, align 8
  store double* %9, double** @PL_xnv_root, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %10 = load double*, double** %xnv, align 8
  %11 = load double*, double** %xnvend, align 8
  %cmp = icmp ult double* %10, %11
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %12 = load double*, double** %xnv, align 8
  %add.ptr1 = getelementptr inbounds double, double* %12, i64 1
  %13 = load double*, double** %xnv, align 8
  %14 = bitcast double* %13 to double**
  store double* %add.ptr1, double** %14, align 8
  %15 = load double*, double** %xnv, align 8
  %incdec.ptr = getelementptr inbounds double, double* %15, i32 1
  store double* %incdec.ptr, double** %xnv, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %16 = load double*, double** %xnv, align 8
  %17 = bitcast double* %16 to double**
  store double* null, double** %17, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @S_more_xrv() #0 {
entry:
  %xrv = alloca %struct.xrv*, align 8
  %xrvend = alloca %struct.xrv*, align 8
  %ptr = alloca %struct.xpv*, align 8
  %call = call i8* @Perl_safesysmalloc(i64 4080)
  %0 = bitcast i8* %call to %struct.xpv*
  store %struct.xpv* %0, %struct.xpv** %ptr, align 8
  %1 = load %struct.xpv*, %struct.xpv** @PL_xrv_arenaroot, align 8
  %2 = bitcast %struct.xpv* %1 to i8*
  %3 = load %struct.xpv*, %struct.xpv** %ptr, align 8
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %3, i32 0, i32 0
  store i8* %2, i8** %xpv_pv, align 8
  %4 = load %struct.xpv*, %struct.xpv** %ptr, align 8
  store %struct.xpv* %4, %struct.xpv** @PL_xrv_arenaroot, align 8
  %5 = load %struct.xpv*, %struct.xpv** %ptr, align 8
  %6 = bitcast %struct.xpv* %5 to %struct.xrv*
  store %struct.xrv* %6, %struct.xrv** %xrv, align 8
  %7 = load %struct.xrv*, %struct.xrv** %xrv, align 8
  %arrayidx = getelementptr inbounds %struct.xrv, %struct.xrv* %7, i64 509
  store %struct.xrv* %arrayidx, %struct.xrv** %xrvend, align 8
  %8 = load %struct.xrv*, %struct.xrv** %xrv, align 8
  %add.ptr = getelementptr inbounds %struct.xrv, %struct.xrv* %8, i64 3
  store %struct.xrv* %add.ptr, %struct.xrv** %xrv, align 8
  %9 = load %struct.xrv*, %struct.xrv** %xrv, align 8
  store %struct.xrv* %9, %struct.xrv** @PL_xrv_root, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %10 = load %struct.xrv*, %struct.xrv** %xrv, align 8
  %11 = load %struct.xrv*, %struct.xrv** %xrvend, align 8
  %cmp = icmp ult %struct.xrv* %10, %11
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %12 = load %struct.xrv*, %struct.xrv** %xrv, align 8
  %add.ptr1 = getelementptr inbounds %struct.xrv, %struct.xrv* %12, i64 1
  %13 = bitcast %struct.xrv* %add.ptr1 to %struct.sv*
  %14 = load %struct.xrv*, %struct.xrv** %xrv, align 8
  %xrv_rv = getelementptr inbounds %struct.xrv, %struct.xrv* %14, i32 0, i32 0
  store %struct.sv* %13, %struct.sv** %xrv_rv, align 8
  %15 = load %struct.xrv*, %struct.xrv** %xrv, align 8
  %incdec.ptr = getelementptr inbounds %struct.xrv, %struct.xrv* %15, i32 1
  store %struct.xrv* %incdec.ptr, %struct.xrv** %xrv, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %16 = load %struct.xrv*, %struct.xrv** %xrv, align 8
  %xrv_rv2 = getelementptr inbounds %struct.xrv, %struct.xrv* %16, i32 0, i32 0
  store %struct.sv* null, %struct.sv** %xrv_rv2, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @S_more_xpv() #0 {
entry:
  %xpv = alloca %struct.xpv*, align 8
  %xpvend = alloca %struct.xpv*, align 8
  %call = call i8* @Perl_safesysmalloc(i64 4080)
  %0 = bitcast i8* %call to %struct.xpv*
  store %struct.xpv* %0, %struct.xpv** %xpv, align 8
  %1 = load %struct.xpv*, %struct.xpv** @PL_xpv_arenaroot, align 8
  %2 = bitcast %struct.xpv* %1 to i8*
  %3 = load %struct.xpv*, %struct.xpv** %xpv, align 8
  %xpv_pv = getelementptr inbounds %struct.xpv, %struct.xpv* %3, i32 0, i32 0
  store i8* %2, i8** %xpv_pv, align 8
  %4 = load %struct.xpv*, %struct.xpv** %xpv, align 8
  store %struct.xpv* %4, %struct.xpv** @PL_xpv_arenaroot, align 8
  %5 = load %struct.xpv*, %struct.xpv** %xpv, align 8
  %arrayidx = getelementptr inbounds %struct.xpv, %struct.xpv* %5, i64 169
  store %struct.xpv* %arrayidx, %struct.xpv** %xpvend, align 8
  %6 = load %struct.xpv*, %struct.xpv** %xpv, align 8
  %incdec.ptr = getelementptr inbounds %struct.xpv, %struct.xpv* %6, i32 1
  store %struct.xpv* %incdec.ptr, %struct.xpv** %xpv, align 8
  store %struct.xpv* %incdec.ptr, %struct.xpv** @PL_xpv_root, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %7 = load %struct.xpv*, %struct.xpv** %xpv, align 8
  %8 = load %struct.xpv*, %struct.xpv** %xpvend, align 8
  %cmp = icmp ult %struct.xpv* %7, %8
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %9 = load %struct.xpv*, %struct.xpv** %xpv, align 8
  %add.ptr = getelementptr inbounds %struct.xpv, %struct.xpv* %9, i64 1
  %10 = bitcast %struct.xpv* %add.ptr to i8*
  %11 = load %struct.xpv*, %struct.xpv** %xpv, align 8
  %xpv_pv1 = getelementptr inbounds %struct.xpv, %struct.xpv* %11, i32 0, i32 0
  store i8* %10, i8** %xpv_pv1, align 8
  %12 = load %struct.xpv*, %struct.xpv** %xpv, align 8
  %incdec.ptr2 = getelementptr inbounds %struct.xpv, %struct.xpv* %12, i32 1
  store %struct.xpv* %incdec.ptr2, %struct.xpv** %xpv, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %13 = load %struct.xpv*, %struct.xpv** %xpv, align 8
  %xpv_pv3 = getelementptr inbounds %struct.xpv, %struct.xpv* %13, i32 0, i32 0
  store i8* null, i8** %xpv_pv3, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @S_more_xpviv() #0 {
entry:
  %xpviv = alloca %struct.xpviv*, align 8
  %xpvivend = alloca %struct.xpviv*, align 8
  %call = call i8* @Perl_safesysmalloc(i64 4064)
  %0 = bitcast i8* %call to %struct.xpviv*
  store %struct.xpviv* %0, %struct.xpviv** %xpviv, align 8
  %1 = load %struct.xpviv*, %struct.xpviv** @PL_xpviv_arenaroot, align 8
  %2 = bitcast %struct.xpviv* %1 to i8*
  %3 = load %struct.xpviv*, %struct.xpviv** %xpviv, align 8
  %xpv_pv = getelementptr inbounds %struct.xpviv, %struct.xpviv* %3, i32 0, i32 0
  store i8* %2, i8** %xpv_pv, align 8
  %4 = load %struct.xpviv*, %struct.xpviv** %xpviv, align 8
  store %struct.xpviv* %4, %struct.xpviv** @PL_xpviv_arenaroot, align 8
  %5 = load %struct.xpviv*, %struct.xpviv** %xpviv, align 8
  %arrayidx = getelementptr inbounds %struct.xpviv, %struct.xpviv* %5, i64 126
  store %struct.xpviv* %arrayidx, %struct.xpviv** %xpvivend, align 8
  %6 = load %struct.xpviv*, %struct.xpviv** %xpviv, align 8
  %incdec.ptr = getelementptr inbounds %struct.xpviv, %struct.xpviv* %6, i32 1
  store %struct.xpviv* %incdec.ptr, %struct.xpviv** %xpviv, align 8
  store %struct.xpviv* %incdec.ptr, %struct.xpviv** @PL_xpviv_root, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %7 = load %struct.xpviv*, %struct.xpviv** %xpviv, align 8
  %8 = load %struct.xpviv*, %struct.xpviv** %xpvivend, align 8
  %cmp = icmp ult %struct.xpviv* %7, %8
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %9 = load %struct.xpviv*, %struct.xpviv** %xpviv, align 8
  %add.ptr = getelementptr inbounds %struct.xpviv, %struct.xpviv* %9, i64 1
  %10 = bitcast %struct.xpviv* %add.ptr to i8*
  %11 = load %struct.xpviv*, %struct.xpviv** %xpviv, align 8
  %xpv_pv1 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %11, i32 0, i32 0
  store i8* %10, i8** %xpv_pv1, align 8
  %12 = load %struct.xpviv*, %struct.xpviv** %xpviv, align 8
  %incdec.ptr2 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %12, i32 1
  store %struct.xpviv* %incdec.ptr2, %struct.xpviv** %xpviv, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %13 = load %struct.xpviv*, %struct.xpviv** %xpviv, align 8
  %xpv_pv3 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %13, i32 0, i32 0
  store i8* null, i8** %xpv_pv3, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @S_more_xpvnv() #0 {
entry:
  %xpvnv = alloca %struct.xpvnv*, align 8
  %xpvnvend = alloca %struct.xpvnv*, align 8
  %call = call i8* @Perl_safesysmalloc(i64 4080)
  %0 = bitcast i8* %call to %struct.xpvnv*
  store %struct.xpvnv* %0, %struct.xpvnv** %xpvnv, align 8
  %1 = load %struct.xpvnv*, %struct.xpvnv** @PL_xpvnv_arenaroot, align 8
  %2 = bitcast %struct.xpvnv* %1 to i8*
  %3 = load %struct.xpvnv*, %struct.xpvnv** %xpvnv, align 8
  %xpv_pv = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %3, i32 0, i32 0
  store i8* %2, i8** %xpv_pv, align 8
  %4 = load %struct.xpvnv*, %struct.xpvnv** %xpvnv, align 8
  store %struct.xpvnv* %4, %struct.xpvnv** @PL_xpvnv_arenaroot, align 8
  %5 = load %struct.xpvnv*, %struct.xpvnv** %xpvnv, align 8
  %arrayidx = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %5, i64 101
  store %struct.xpvnv* %arrayidx, %struct.xpvnv** %xpvnvend, align 8
  %6 = load %struct.xpvnv*, %struct.xpvnv** %xpvnv, align 8
  %incdec.ptr = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %6, i32 1
  store %struct.xpvnv* %incdec.ptr, %struct.xpvnv** %xpvnv, align 8
  store %struct.xpvnv* %incdec.ptr, %struct.xpvnv** @PL_xpvnv_root, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %7 = load %struct.xpvnv*, %struct.xpvnv** %xpvnv, align 8
  %8 = load %struct.xpvnv*, %struct.xpvnv** %xpvnvend, align 8
  %cmp = icmp ult %struct.xpvnv* %7, %8
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %9 = load %struct.xpvnv*, %struct.xpvnv** %xpvnv, align 8
  %add.ptr = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %9, i64 1
  %10 = bitcast %struct.xpvnv* %add.ptr to i8*
  %11 = load %struct.xpvnv*, %struct.xpvnv** %xpvnv, align 8
  %xpv_pv1 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %11, i32 0, i32 0
  store i8* %10, i8** %xpv_pv1, align 8
  %12 = load %struct.xpvnv*, %struct.xpvnv** %xpvnv, align 8
  %incdec.ptr2 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %12, i32 1
  store %struct.xpvnv* %incdec.ptr2, %struct.xpvnv** %xpvnv, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %13 = load %struct.xpvnv*, %struct.xpvnv** %xpvnv, align 8
  %xpv_pv3 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %13, i32 0, i32 0
  store i8* null, i8** %xpv_pv3, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @S_more_xpvmg() #0 {
entry:
  %xpvmg = alloca %struct.xpvmg*, align 8
  %xpvmgend = alloca %struct.xpvmg*, align 8
  %call = call i8* @Perl_safesysmalloc(i64 4032)
  %0 = bitcast i8* %call to %struct.xpvmg*
  store %struct.xpvmg* %0, %struct.xpvmg** %xpvmg, align 8
  %1 = load %struct.xpvmg*, %struct.xpvmg** @PL_xpvmg_arenaroot, align 8
  %2 = bitcast %struct.xpvmg* %1 to i8*
  %3 = load %struct.xpvmg*, %struct.xpvmg** %xpvmg, align 8
  %xpv_pv = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %3, i32 0, i32 0
  store i8* %2, i8** %xpv_pv, align 8
  %4 = load %struct.xpvmg*, %struct.xpvmg** %xpvmg, align 8
  store %struct.xpvmg* %4, %struct.xpvmg** @PL_xpvmg_arenaroot, align 8
  %5 = load %struct.xpvmg*, %struct.xpvmg** %xpvmg, align 8
  %arrayidx = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %5, i64 71
  store %struct.xpvmg* %arrayidx, %struct.xpvmg** %xpvmgend, align 8
  %6 = load %struct.xpvmg*, %struct.xpvmg** %xpvmg, align 8
  %incdec.ptr = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %6, i32 1
  store %struct.xpvmg* %incdec.ptr, %struct.xpvmg** %xpvmg, align 8
  store %struct.xpvmg* %incdec.ptr, %struct.xpvmg** @PL_xpvmg_root, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %7 = load %struct.xpvmg*, %struct.xpvmg** %xpvmg, align 8
  %8 = load %struct.xpvmg*, %struct.xpvmg** %xpvmgend, align 8
  %cmp = icmp ult %struct.xpvmg* %7, %8
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %9 = load %struct.xpvmg*, %struct.xpvmg** %xpvmg, align 8
  %add.ptr = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %9, i64 1
  %10 = bitcast %struct.xpvmg* %add.ptr to i8*
  %11 = load %struct.xpvmg*, %struct.xpvmg** %xpvmg, align 8
  %xpv_pv1 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %11, i32 0, i32 0
  store i8* %10, i8** %xpv_pv1, align 8
  %12 = load %struct.xpvmg*, %struct.xpvmg** %xpvmg, align 8
  %incdec.ptr2 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %12, i32 1
  store %struct.xpvmg* %incdec.ptr2, %struct.xpvmg** %xpvmg, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %13 = load %struct.xpvmg*, %struct.xpvmg** %xpvmg, align 8
  %xpv_pv3 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %13, i32 0, i32 0
  store i8* null, i8** %xpv_pv3, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @S_more_xpvlv() #0 {
entry:
  %xpvlv = alloca %struct.xpvlv*, align 8
  %xpvlvend = alloca %struct.xpvlv*, align 8
  %call = call i8* @Perl_safesysmalloc(i64 4048)
  %0 = bitcast i8* %call to %struct.xpvlv*
  store %struct.xpvlv* %0, %struct.xpvlv** %xpvlv, align 8
  %1 = load %struct.xpvlv*, %struct.xpvlv** @PL_xpvlv_arenaroot, align 8
  %2 = bitcast %struct.xpvlv* %1 to i8*
  %3 = load %struct.xpvlv*, %struct.xpvlv** %xpvlv, align 8
  %xpv_pv = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %3, i32 0, i32 0
  store i8* %2, i8** %xpv_pv, align 8
  %4 = load %struct.xpvlv*, %struct.xpvlv** %xpvlv, align 8
  store %struct.xpvlv* %4, %struct.xpvlv** @PL_xpvlv_arenaroot, align 8
  %5 = load %struct.xpvlv*, %struct.xpvlv** %xpvlv, align 8
  %arrayidx = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %5, i64 45
  store %struct.xpvlv* %arrayidx, %struct.xpvlv** %xpvlvend, align 8
  %6 = load %struct.xpvlv*, %struct.xpvlv** %xpvlv, align 8
  %incdec.ptr = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %6, i32 1
  store %struct.xpvlv* %incdec.ptr, %struct.xpvlv** %xpvlv, align 8
  store %struct.xpvlv* %incdec.ptr, %struct.xpvlv** @PL_xpvlv_root, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %7 = load %struct.xpvlv*, %struct.xpvlv** %xpvlv, align 8
  %8 = load %struct.xpvlv*, %struct.xpvlv** %xpvlvend, align 8
  %cmp = icmp ult %struct.xpvlv* %7, %8
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %9 = load %struct.xpvlv*, %struct.xpvlv** %xpvlv, align 8
  %add.ptr = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %9, i64 1
  %10 = bitcast %struct.xpvlv* %add.ptr to i8*
  %11 = load %struct.xpvlv*, %struct.xpvlv** %xpvlv, align 8
  %xpv_pv1 = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %11, i32 0, i32 0
  store i8* %10, i8** %xpv_pv1, align 8
  %12 = load %struct.xpvlv*, %struct.xpvlv** %xpvlv, align 8
  %incdec.ptr2 = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %12, i32 1
  store %struct.xpvlv* %incdec.ptr2, %struct.xpvlv** %xpvlv, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %13 = load %struct.xpvlv*, %struct.xpvlv** %xpvlv, align 8
  %xpv_pv3 = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %13, i32 0, i32 0
  store i8* null, i8** %xpv_pv3, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @S_more_xpvav() #0 {
entry:
  %xpvav = alloca %struct.xpvav*, align 8
  %xpvavend = alloca %struct.xpvav*, align 8
  %call = call i8* @Perl_safesysmalloc(i64 4080)
  %0 = bitcast i8* %call to %struct.xpvav*
  store %struct.xpvav* %0, %struct.xpvav** %xpvav, align 8
  %1 = load %struct.xpvav*, %struct.xpvav** @PL_xpvav_arenaroot, align 8
  %2 = bitcast %struct.xpvav* %1 to i8*
  %3 = load %struct.xpvav*, %struct.xpvav** %xpvav, align 8
  %xav_array = getelementptr inbounds %struct.xpvav, %struct.xpvav* %3, i32 0, i32 0
  store i8* %2, i8** %xav_array, align 8
  %4 = load %struct.xpvav*, %struct.xpvav** %xpvav, align 8
  store %struct.xpvav* %4, %struct.xpvav** @PL_xpvav_arenaroot, align 8
  %5 = load %struct.xpvav*, %struct.xpvav** %xpvav, align 8
  %arrayidx = getelementptr inbounds %struct.xpvav, %struct.xpvav* %5, i64 50
  store %struct.xpvav* %arrayidx, %struct.xpvav** %xpvavend, align 8
  %6 = load %struct.xpvav*, %struct.xpvav** %xpvav, align 8
  %incdec.ptr = getelementptr inbounds %struct.xpvav, %struct.xpvav* %6, i32 1
  store %struct.xpvav* %incdec.ptr, %struct.xpvav** %xpvav, align 8
  store %struct.xpvav* %incdec.ptr, %struct.xpvav** @PL_xpvav_root, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %7 = load %struct.xpvav*, %struct.xpvav** %xpvav, align 8
  %8 = load %struct.xpvav*, %struct.xpvav** %xpvavend, align 8
  %cmp = icmp ult %struct.xpvav* %7, %8
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %9 = load %struct.xpvav*, %struct.xpvav** %xpvav, align 8
  %add.ptr = getelementptr inbounds %struct.xpvav, %struct.xpvav* %9, i64 1
  %10 = bitcast %struct.xpvav* %add.ptr to i8*
  %11 = load %struct.xpvav*, %struct.xpvav** %xpvav, align 8
  %xav_array1 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %11, i32 0, i32 0
  store i8* %10, i8** %xav_array1, align 8
  %12 = load %struct.xpvav*, %struct.xpvav** %xpvav, align 8
  %incdec.ptr2 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %12, i32 1
  store %struct.xpvav* %incdec.ptr2, %struct.xpvav** %xpvav, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %13 = load %struct.xpvav*, %struct.xpvav** %xpvav, align 8
  %xav_array3 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %13, i32 0, i32 0
  store i8* null, i8** %xav_array3, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @S_more_xpvhv() #0 {
entry:
  %xpvhv = alloca %struct.xpvhv*, align 8
  %xpvhvend = alloca %struct.xpvhv*, align 8
  %call = call i8* @Perl_safesysmalloc(i64 4048)
  %0 = bitcast i8* %call to %struct.xpvhv*
  store %struct.xpvhv* %0, %struct.xpvhv** %xpvhv, align 8
  %1 = load %struct.xpvhv*, %struct.xpvhv** @PL_xpvhv_arenaroot, align 8
  %2 = bitcast %struct.xpvhv* %1 to i8*
  %3 = load %struct.xpvhv*, %struct.xpvhv** %xpvhv, align 8
  %xhv_array = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %3, i32 0, i32 0
  store i8* %2, i8** %xhv_array, align 8
  %4 = load %struct.xpvhv*, %struct.xpvhv** %xpvhv, align 8
  store %struct.xpvhv* %4, %struct.xpvhv** @PL_xpvhv_arenaroot, align 8
  %5 = load %struct.xpvhv*, %struct.xpvhv** %xpvhv, align 8
  %arrayidx = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %5, i64 45
  store %struct.xpvhv* %arrayidx, %struct.xpvhv** %xpvhvend, align 8
  %6 = load %struct.xpvhv*, %struct.xpvhv** %xpvhv, align 8
  %incdec.ptr = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %6, i32 1
  store %struct.xpvhv* %incdec.ptr, %struct.xpvhv** %xpvhv, align 8
  store %struct.xpvhv* %incdec.ptr, %struct.xpvhv** @PL_xpvhv_root, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %7 = load %struct.xpvhv*, %struct.xpvhv** %xpvhv, align 8
  %8 = load %struct.xpvhv*, %struct.xpvhv** %xpvhvend, align 8
  %cmp = icmp ult %struct.xpvhv* %7, %8
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %9 = load %struct.xpvhv*, %struct.xpvhv** %xpvhv, align 8
  %add.ptr = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %9, i64 1
  %10 = bitcast %struct.xpvhv* %add.ptr to i8*
  %11 = load %struct.xpvhv*, %struct.xpvhv** %xpvhv, align 8
  %xhv_array1 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %11, i32 0, i32 0
  store i8* %10, i8** %xhv_array1, align 8
  %12 = load %struct.xpvhv*, %struct.xpvhv** %xpvhv, align 8
  %incdec.ptr2 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %12, i32 1
  store %struct.xpvhv* %incdec.ptr2, %struct.xpvhv** %xpvhv, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %13 = load %struct.xpvhv*, %struct.xpvhv** %xpvhv, align 8
  %xhv_array3 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %13, i32 0, i32 0
  store i8* null, i8** %xhv_array3, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @S_more_xpvcv() #0 {
entry:
  %xpvcv = alloca %struct.xpvcv*, align 8
  %xpvcvend = alloca %struct.xpvcv*, align 8
  %call = call i8* @Perl_safesysmalloc(i64 4032)
  %0 = bitcast i8* %call to %struct.xpvcv*
  store %struct.xpvcv* %0, %struct.xpvcv** %xpvcv, align 8
  %1 = load %struct.xpvcv*, %struct.xpvcv** @PL_xpvcv_arenaroot, align 8
  %2 = bitcast %struct.xpvcv* %1 to i8*
  %3 = load %struct.xpvcv*, %struct.xpvcv** %xpvcv, align 8
  %xpv_pv = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %3, i32 0, i32 0
  store i8* %2, i8** %xpv_pv, align 8
  %4 = load %struct.xpvcv*, %struct.xpvcv** %xpvcv, align 8
  store %struct.xpvcv* %4, %struct.xpvcv** @PL_xpvcv_arenaroot, align 8
  %5 = load %struct.xpvcv*, %struct.xpvcv** %xpvcv, align 8
  %arrayidx = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %5, i64 27
  store %struct.xpvcv* %arrayidx, %struct.xpvcv** %xpvcvend, align 8
  %6 = load %struct.xpvcv*, %struct.xpvcv** %xpvcv, align 8
  %incdec.ptr = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %6, i32 1
  store %struct.xpvcv* %incdec.ptr, %struct.xpvcv** %xpvcv, align 8
  store %struct.xpvcv* %incdec.ptr, %struct.xpvcv** @PL_xpvcv_root, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %7 = load %struct.xpvcv*, %struct.xpvcv** %xpvcv, align 8
  %8 = load %struct.xpvcv*, %struct.xpvcv** %xpvcvend, align 8
  %cmp = icmp ult %struct.xpvcv* %7, %8
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %9 = load %struct.xpvcv*, %struct.xpvcv** %xpvcv, align 8
  %add.ptr = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %9, i64 1
  %10 = bitcast %struct.xpvcv* %add.ptr to i8*
  %11 = load %struct.xpvcv*, %struct.xpvcv** %xpvcv, align 8
  %xpv_pv1 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %11, i32 0, i32 0
  store i8* %10, i8** %xpv_pv1, align 8
  %12 = load %struct.xpvcv*, %struct.xpvcv** %xpvcv, align 8
  %incdec.ptr2 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %12, i32 1
  store %struct.xpvcv* %incdec.ptr2, %struct.xpvcv** %xpvcv, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %13 = load %struct.xpvcv*, %struct.xpvcv** %xpvcv, align 8
  %xpv_pv3 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %13, i32 0, i32 0
  store i8* null, i8** %xpv_pv3, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @S_more_xpvbm() #0 {
entry:
  %xpvbm = alloca %struct.xpvbm*, align 8
  %xpvbmend = alloca %struct.xpvbm*, align 8
  %call = call i8* @Perl_safesysmalloc(i64 4032)
  %0 = bitcast i8* %call to %struct.xpvbm*
  store %struct.xpvbm* %0, %struct.xpvbm** %xpvbm, align 8
  %1 = load %struct.xpvbm*, %struct.xpvbm** @PL_xpvbm_arenaroot, align 8
  %2 = bitcast %struct.xpvbm* %1 to i8*
  %3 = load %struct.xpvbm*, %struct.xpvbm** %xpvbm, align 8
  %xpv_pv = getelementptr inbounds %struct.xpvbm, %struct.xpvbm* %3, i32 0, i32 0
  store i8* %2, i8** %xpv_pv, align 8
  %4 = load %struct.xpvbm*, %struct.xpvbm** %xpvbm, align 8
  store %struct.xpvbm* %4, %struct.xpvbm** @PL_xpvbm_arenaroot, align 8
  %5 = load %struct.xpvbm*, %struct.xpvbm** %xpvbm, align 8
  %arrayidx = getelementptr inbounds %struct.xpvbm, %struct.xpvbm* %5, i64 62
  store %struct.xpvbm* %arrayidx, %struct.xpvbm** %xpvbmend, align 8
  %6 = load %struct.xpvbm*, %struct.xpvbm** %xpvbm, align 8
  %incdec.ptr = getelementptr inbounds %struct.xpvbm, %struct.xpvbm* %6, i32 1
  store %struct.xpvbm* %incdec.ptr, %struct.xpvbm** %xpvbm, align 8
  store %struct.xpvbm* %incdec.ptr, %struct.xpvbm** @PL_xpvbm_root, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %7 = load %struct.xpvbm*, %struct.xpvbm** %xpvbm, align 8
  %8 = load %struct.xpvbm*, %struct.xpvbm** %xpvbmend, align 8
  %cmp = icmp ult %struct.xpvbm* %7, %8
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %9 = load %struct.xpvbm*, %struct.xpvbm** %xpvbm, align 8
  %add.ptr = getelementptr inbounds %struct.xpvbm, %struct.xpvbm* %9, i64 1
  %10 = bitcast %struct.xpvbm* %add.ptr to i8*
  %11 = load %struct.xpvbm*, %struct.xpvbm** %xpvbm, align 8
  %xpv_pv1 = getelementptr inbounds %struct.xpvbm, %struct.xpvbm* %11, i32 0, i32 0
  store i8* %10, i8** %xpv_pv1, align 8
  %12 = load %struct.xpvbm*, %struct.xpvbm** %xpvbm, align 8
  %incdec.ptr2 = getelementptr inbounds %struct.xpvbm, %struct.xpvbm* %12, i32 1
  store %struct.xpvbm* %incdec.ptr2, %struct.xpvbm** %xpvbm, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %13 = load %struct.xpvbm*, %struct.xpvbm** %xpvbm, align 8
  %xpv_pv3 = getelementptr inbounds %struct.xpvbm, %struct.xpvbm* %13, i32 0, i32 0
  store i8* null, i8** %xpv_pv3, align 8
  ret void
}

declare i8* @Perl_sv_uni_display(%struct.sv*, %struct.sv*, i64, i64) #1

declare i16** @__ctype_b_loc() #1

declare %struct.av* @Perl_newAV() #1

declare void @Perl_av_extend(%struct.av*, i32) #1

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }
attributes #3 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
