; ModuleID = 'dwarf2out.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%union.tree_node = type { %struct.tree_decl }
%struct.tree_decl = type { %struct.tree_common, i8*, i32, i32, %union.tree_node*, i48, %union.anon, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %union.anon.1, %union.tree_node*, %union.tree_node*, %union.tree_node*, i64, %struct.lang_decl* }
%struct.tree_common = type { %union.tree_node*, %union.tree_node*, i32 }
%union.anon = type { i64 }
%struct.rtx_def = type { i32, [1 x %union.rtunion_def] }
%union.rtunion_def = type { i64 }
%union.anon.1 = type { %struct.function* }
%struct.function = type { %struct.eh_status*, %struct.stmt_status*, %struct.expr_status*, %struct.emit_status*, %struct.varasm_status*, i8*, %union.tree_node*, %struct.function*, i32, i32, i32, i32, %struct.rtx_def*, %struct.ix86_args, %struct.rtx_def*, %struct.rtx_def*, i8*, %struct.initial_value_struct*, i32, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i64, %union.tree_node*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, %struct.rtx_def**, %struct.temp_slot*, i32, i32, i32, %struct.var_refs_queue*, i32, i32, i8*, %union.tree_node*, %struct.rtx_def*, i32, i32, %struct.machine_function*, i32, i32, %struct.language_function*, %struct.rtx_def*, i24 }
%struct.eh_status = type opaque
%struct.stmt_status = type opaque
%struct.expr_status = type { i32, i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def* }
%struct.emit_status = type { i32, i32, %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %struct.sequence_stack*, i32, i32, i8*, i32, i8*, %union.tree_node**, %struct.rtx_def** }
%struct.sequence_stack = type { %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %struct.sequence_stack* }
%struct.varasm_status = type opaque
%struct.ix86_args = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.initial_value_struct = type opaque
%struct.temp_slot = type opaque
%struct.var_refs_queue = type { %struct.rtx_def*, i32, i32, %struct.var_refs_queue* }
%struct.machine_function = type opaque
%struct.language_function = type opaque
%struct.lang_decl = type opaque
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.cfa_loc = type { i64, i64, i64, i32 }
%struct.dw_fde_struct = type { i8*, i8*, i8*, %struct.dw_cfi_struct*, i32, i8 }
%struct.dw_cfi_struct = type { %struct.dw_cfi_struct*, i32, %union.dw_cfi_oprnd_struct, %union.dw_cfi_oprnd_struct }
%union.dw_cfi_oprnd_struct = type { i64 }
%struct.gcc_debug_hooks = type { void (i8*)*, void (i8*)*, void (i32, i8*)*, void (i32, i8*)*, void (i32, i8*)*, void (i32)*, void (i32, i32)*, void (i32, i32)*, i1 (%union.tree_node*)*, void (i32, i8*)*, void (i32, i8*)*, void (i32)*, void ()*, void (%union.tree_node*)*, void (i32)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void (%struct.rtx_def*)* }
%struct.die_struct = type { i32, i8*, %struct.dw_attr_struct*, %struct.die_struct*, %struct.die_struct*, %struct.die_struct*, i64, i64, i32 }
%struct.dw_attr_struct = type { i32, %struct.dw_attr_struct*, %struct.dw_val_struct }
%struct.dw_val_struct = type { i32, %union.anon.3 }
%union.anon.3 = type { %struct.dw_long_long_struct }
%struct.dw_long_long_struct = type { i64, i64 }
%struct.ht = type { %struct.obstack, %struct.ht_identifier**, %struct.ht_identifier* (%struct.ht*)*, i32, i32, %struct.cpp_reader*, i32, i32 }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.ht_identifier = type { i32, i8* }
%struct.cpp_reader = type opaque
%struct.varray_head_tag = type { i64, i64, i64, i8*, %union.varray_data_tag }
%union.varray_data_tag = type { [1 x %struct.const_equiv_data] }
%struct.const_equiv_data = type { %struct.rtx_def*, i32 }
%struct.queued_reg_save = type { %struct.queued_reg_save*, %struct.rtx_def*, i64 }
%struct.gcc_target = type { %struct.asm_out, %struct.sched, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %struct.attribute_spec*, i32 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*, %union.tree_node**)*, i1 (%union.tree_node*)*, i1 (%union.tree_node*)*, void ()*, %struct.rtx_def* (%union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, i32)*, i32 (%union.tree_node*, i8*, i32)*, i8, i8, i1 ()* }
%struct.asm_out = type { i8*, i8*, i8*, %struct.asm_int_op, %struct.asm_int_op, i1 (%struct.rtx_def*, i32, i32)*, void (%struct._IO_FILE*, i64)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, i64)*, void (i8*, i32)*, void ()*, void ()*, void (%struct.rtx_def*, i32)*, void (%struct.rtx_def*, i32)* }
%struct.asm_int_op = type { i8*, i8*, i8*, i8* }
%struct.sched = type { i32 (%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)*, i32 ()*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, %struct.rtx_def* (i32, %struct.rtx_def*)* }
%struct.attribute_spec = type { i8*, i32, i32, i8, i8, i8, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* }
%struct.diagnostic_context = type { %struct.output_buffer, i8*, [1 x %struct.__va_list_tag]*, i8*, i32, i32, void (%struct.output_buffer*, %struct.diagnostic_context*)*, void (%struct.output_buffer*, %struct.diagnostic_context*)*, i8* }
%struct.output_buffer = type { %struct.output_state, %struct._IO_FILE*, %struct.obstack, i32, [128 x i8], i32 (%struct.output_buffer*)* }
%struct.output_state = type { i8*, i32, i32, i32, i8, i8, i32, i8*, [1 x %struct.__va_list_tag]*, [7 x i32] }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.dw_ranges_struct = type { i32 }
%struct.limbo_die_struct = type { %struct.die_struct*, %union.tree_node*, %struct.limbo_die_struct* }
%struct.pubname_struct = type { %struct.die_struct*, i8* }
%struct.file_table = type { i8**, i32, i32, i32 }
%struct.dw_line_info_struct = type { i64, i64 }
%struct.lang_hooks = type { i8*, i64, void ()*, i32 (i32, i8**)*, void ()*, i8* (i8*)*, void ()*, void ()*, i64 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i32 (%struct.rtx_def*, %union.tree_node*)*, i32 (%union.tree_node*)*, i8, void ()*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (i32)*, %struct.lang_hooks_for_tree_inlining, %struct.lang_hooks_for_tree_dump }
%struct.lang_hooks_for_tree_inlining = type { %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, i8*)*, i32 (%union.tree_node**)*, i32 (%union.tree_node*)*, %union.tree_node* (i8*, %union.tree_node*)*, i32 (%union.tree_node*)*, i32 (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*, i8*, i32*, i8*)*, i32 (%union.tree_node*)*, i32 (%union.tree_node*)*, void (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)* }
%struct.lang_hooks_for_tree_dump = type { i32 (i8*, %union.tree_node*)*, i32 (%union.tree_node*)* }
%struct.tree_type = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32, i32, i32, %union.tree_node*, %union.tree_node*, %union.anon.2, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i64, %struct.lang_type* }
%union.anon.2 = type { i8* }
%struct.lang_type = type opaque
%struct.dw_loc_descr_struct = type { %struct.dw_loc_descr_struct*, i32, %struct.dw_val_struct, %struct.dw_val_struct, i32 }
%struct.rtvec_def = type { i32, [1 x %struct.rtx_def*] }
%struct.tree_exp = type { %struct.tree_common, i32, [1 x %union.tree_node*] }
%struct.tree_block = type { %struct.tree_common, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.dw_loc_list_struct = type { %struct.dw_loc_list_struct*, i8*, i8*, i8*, i8*, %struct.dw_loc_descr_struct* }
%struct.anon.4 = type { %struct.die_struct*, i32 }
%struct.indirect_string_node = type { %struct.ht_identifier, i32, i32, i8* }
%struct.tree_list = type { %struct.tree_common, %union.tree_node*, %union.tree_node* }
%struct.tree_identifier = type { %struct.tree_common, %struct.ht_identifier }
%struct.tree_string = type { %struct.tree_common, %struct.rtx_def*, i32, i8* }
%struct.realvaluetype = type { [3 x i64] }
%union.real_extract = type { %struct.realvaluetype }
%struct.dw_fp_struct = type { i64*, i32 }
%struct.tree_vec = type { %struct.tree_common, i32, [1 x %union.tree_node*] }
%struct.anon.0 = type { i32 }
%struct.tree_int_cst = type { %struct.tree_common, %struct.rtx_def*, %struct.anon }
%struct.anon = type { i64, i64 }
%struct.md5_ctx = type { i32, i32, i32, i32, [2 x i32], i32, [128 x i8] }

@write_symbols = external global i32, align 4
@flag_unwind_tables = external global i32, align 4
@flag_exceptions = external global i32, align 4
@current_funcdef_number = global i32 0, align 4
@.str = private unnamed_addr constant [10 x i8] c".eh_frame\00", align 1
@target_flags = external global i32, align 4
@dbx64_register_map = external constant [53 x i32], align 16
@svr4_dbx_register_map = external constant [53 x i32], align 16
@integer_types = external global [11 x %union.tree_node*], align 16
@mode_size = external constant [59 x i8], align 16
@reg_raw_mode = external global [53 x i32], align 16
@dwarf2out_cfi_label.label = internal global [20 x i8] zeroinitializer, align 16
@dwarf2out_cfi_label.label_num = internal global i64 0, align 8
@.str.1 = private unnamed_addr constant [7 x i8] c"*.%s%u\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"LCFI\00", align 1
@asm_out_file = external global %struct._IO_FILE*, align 8
@.str.3 = private unnamed_addr constant [3 x i8] c":\0A\00", align 1
@old_args_size = internal global i64 0, align 8
@cfa = internal global %struct.cfa_loc zeroinitializer, align 8
@.str.4 = private unnamed_addr constant [12 x i8] c"dwarf2out.c\00", align 1
@__FUNCTION__.dwarf2out_frame_debug = private unnamed_addr constant [22 x i8] c"dwarf2out_frame_debug\00", align 1
@cfa_store = internal global %struct.cfa_loc zeroinitializer, align 8
@cfa_temp = internal global %struct.cfa_loc zeroinitializer, align 8
@current_function_func_begin_label = external global %union.tree_node*, align 8
@current_function_decl = external global %union.tree_node*, align 8
@.str.5 = private unnamed_addr constant [4 x i8] c"LFB\00", align 1
@.str.6 = private unnamed_addr constant [8 x i8] c".%s%u:\0A\00", align 1
@fde_table_in_use = internal global i32 0, align 4
@fde_table_allocated = internal global i32 0, align 4
@fde_table = internal global %struct.dw_fde_struct* null, align 8
@current_funcdef_fde = internal global i32 0, align 4
@current_function_nothrow = external global i32, align 4
@cfun = external global %struct.function*, align 8
@args_size = internal global i64 0, align 8
@.str.7 = private unnamed_addr constant [4 x i8] c"LFE\00", align 1
@dwarf2_debug_hooks = global %struct.gcc_debug_hooks { void (i8*)* @dwarf2out_init, void (i8*)* @dwarf2out_finish, void (i32, i8*)* @dwarf2out_define, void (i32, i8*)* @dwarf2out_undef, void (i32, i8*)* @dwarf2out_start_source_file, void (i32)* @dwarf2out_end_source_file, void (i32, i32)* @dwarf2out_begin_block, void (i32, i32)* @dwarf2out_end_block, i1 (%union.tree_node*)* @dwarf2out_ignore_block, void (i32, i8*)* @dwarf2out_source_line, void (i32, i8*)* @dwarf2out_begin_prologue, void (i32)* @debug_nothing_int, void ()* @dwarf2out_end_epilogue, void (%union.tree_node*)* @debug_nothing_tree, void (i32)* @debug_nothing_int, void (%union.tree_node*)* @dwarf2out_decl, void (%union.tree_node*)* @dwarf2out_global_decl, void (%union.tree_node*)* @debug_nothing_tree, void (%union.tree_node*)* @dwarf2out_abstract_function, void (%struct.rtx_def*)* @debug_nothing_rtx }, align 8
@demangle_name_func = internal global i8* (i8*)* null, align 8
@stderr = external global %struct._IO_FILE*, align 8
@print_indent = internal global i32 0, align 4
@comp_unit_die = internal global %struct.die_struct* null, align 8
@global_trees = external global [51 x %union.tree_node*], align 16
@debug_info_level = external global i32, align 4
@debug_str_hash = common global %struct.ht* null, align 8
@decl_scope_table = common global %struct.varray_head_tag* null, align 8
@incomplete_types = common global %struct.varray_head_tag* null, align 8
@__FUNCTION__.build_cfa_loc = private unnamed_addr constant [14 x i8] c"build_cfa_loc\00", align 1
@cie_cfi_head = internal global %struct.dw_cfi_struct* null, align 8
@queued_reg_saves = internal global %struct.queued_reg_save* null, align 8
@last_reg_save_label = internal global i8* null, align 8
@.str.8 = private unnamed_addr constant [30 x i8] c"DW_LOC_OP %s not implemented\0A\00", align 1
@.str.9 = private unnamed_addr constant [11 x i8] c"DW_OP_addr\00", align 1
@.str.10 = private unnamed_addr constant [12 x i8] c"DW_OP_deref\00", align 1
@.str.11 = private unnamed_addr constant [14 x i8] c"DW_OP_const1u\00", align 1
@.str.12 = private unnamed_addr constant [14 x i8] c"DW_OP_const1s\00", align 1
@.str.13 = private unnamed_addr constant [14 x i8] c"DW_OP_const2u\00", align 1
@.str.14 = private unnamed_addr constant [14 x i8] c"DW_OP_const2s\00", align 1
@.str.15 = private unnamed_addr constant [14 x i8] c"DW_OP_const4u\00", align 1
@.str.16 = private unnamed_addr constant [14 x i8] c"DW_OP_const4s\00", align 1
@.str.17 = private unnamed_addr constant [14 x i8] c"DW_OP_const8u\00", align 1
@.str.18 = private unnamed_addr constant [14 x i8] c"DW_OP_const8s\00", align 1
@.str.19 = private unnamed_addr constant [13 x i8] c"DW_OP_constu\00", align 1
@.str.20 = private unnamed_addr constant [13 x i8] c"DW_OP_consts\00", align 1
@.str.21 = private unnamed_addr constant [10 x i8] c"DW_OP_dup\00", align 1
@.str.22 = private unnamed_addr constant [11 x i8] c"DW_OP_drop\00", align 1
@.str.23 = private unnamed_addr constant [11 x i8] c"DW_OP_over\00", align 1
@.str.24 = private unnamed_addr constant [11 x i8] c"DW_OP_pick\00", align 1
@.str.25 = private unnamed_addr constant [11 x i8] c"DW_OP_swap\00", align 1
@.str.26 = private unnamed_addr constant [10 x i8] c"DW_OP_rot\00", align 1
@.str.27 = private unnamed_addr constant [13 x i8] c"DW_OP_xderef\00", align 1
@.str.28 = private unnamed_addr constant [10 x i8] c"DW_OP_abs\00", align 1
@.str.29 = private unnamed_addr constant [10 x i8] c"DW_OP_and\00", align 1
@.str.30 = private unnamed_addr constant [10 x i8] c"DW_OP_div\00", align 1
@.str.31 = private unnamed_addr constant [12 x i8] c"DW_OP_minus\00", align 1
@.str.32 = private unnamed_addr constant [10 x i8] c"DW_OP_mod\00", align 1
@.str.33 = private unnamed_addr constant [10 x i8] c"DW_OP_mul\00", align 1
@.str.34 = private unnamed_addr constant [10 x i8] c"DW_OP_neg\00", align 1
@.str.35 = private unnamed_addr constant [10 x i8] c"DW_OP_not\00", align 1
@.str.36 = private unnamed_addr constant [9 x i8] c"DW_OP_or\00", align 1
@.str.37 = private unnamed_addr constant [11 x i8] c"DW_OP_plus\00", align 1
@.str.38 = private unnamed_addr constant [18 x i8] c"DW_OP_plus_uconst\00", align 1
@.str.39 = private unnamed_addr constant [10 x i8] c"DW_OP_shl\00", align 1
@.str.40 = private unnamed_addr constant [10 x i8] c"DW_OP_shr\00", align 1
@.str.41 = private unnamed_addr constant [11 x i8] c"DW_OP_shra\00", align 1
@.str.42 = private unnamed_addr constant [10 x i8] c"DW_OP_xor\00", align 1
@.str.43 = private unnamed_addr constant [10 x i8] c"DW_OP_bra\00", align 1
@.str.44 = private unnamed_addr constant [9 x i8] c"DW_OP_eq\00", align 1
@.str.45 = private unnamed_addr constant [9 x i8] c"DW_OP_ge\00", align 1
@.str.46 = private unnamed_addr constant [9 x i8] c"DW_OP_gt\00", align 1
@.str.47 = private unnamed_addr constant [9 x i8] c"DW_OP_le\00", align 1
@.str.48 = private unnamed_addr constant [9 x i8] c"DW_OP_lt\00", align 1
@.str.49 = private unnamed_addr constant [9 x i8] c"DW_OP_ne\00", align 1
@.str.50 = private unnamed_addr constant [11 x i8] c"DW_OP_skip\00", align 1
@.str.51 = private unnamed_addr constant [11 x i8] c"DW_OP_lit0\00", align 1
@.str.52 = private unnamed_addr constant [11 x i8] c"DW_OP_lit1\00", align 1
@.str.53 = private unnamed_addr constant [11 x i8] c"DW_OP_lit2\00", align 1
@.str.54 = private unnamed_addr constant [11 x i8] c"DW_OP_lit3\00", align 1
@.str.55 = private unnamed_addr constant [11 x i8] c"DW_OP_lit4\00", align 1
@.str.56 = private unnamed_addr constant [11 x i8] c"DW_OP_lit5\00", align 1
@.str.57 = private unnamed_addr constant [11 x i8] c"DW_OP_lit6\00", align 1
@.str.58 = private unnamed_addr constant [11 x i8] c"DW_OP_lit7\00", align 1
@.str.59 = private unnamed_addr constant [11 x i8] c"DW_OP_lit8\00", align 1
@.str.60 = private unnamed_addr constant [11 x i8] c"DW_OP_lit9\00", align 1
@.str.61 = private unnamed_addr constant [12 x i8] c"DW_OP_lit10\00", align 1
@.str.62 = private unnamed_addr constant [12 x i8] c"DW_OP_lit11\00", align 1
@.str.63 = private unnamed_addr constant [12 x i8] c"DW_OP_lit12\00", align 1
@.str.64 = private unnamed_addr constant [12 x i8] c"DW_OP_lit13\00", align 1
@.str.65 = private unnamed_addr constant [12 x i8] c"DW_OP_lit14\00", align 1
@.str.66 = private unnamed_addr constant [12 x i8] c"DW_OP_lit15\00", align 1
@.str.67 = private unnamed_addr constant [12 x i8] c"DW_OP_lit16\00", align 1
@.str.68 = private unnamed_addr constant [12 x i8] c"DW_OP_lit17\00", align 1
@.str.69 = private unnamed_addr constant [12 x i8] c"DW_OP_lit18\00", align 1
@.str.70 = private unnamed_addr constant [12 x i8] c"DW_OP_lit19\00", align 1
@.str.71 = private unnamed_addr constant [12 x i8] c"DW_OP_lit20\00", align 1
@.str.72 = private unnamed_addr constant [12 x i8] c"DW_OP_lit21\00", align 1
@.str.73 = private unnamed_addr constant [12 x i8] c"DW_OP_lit22\00", align 1
@.str.74 = private unnamed_addr constant [12 x i8] c"DW_OP_lit23\00", align 1
@.str.75 = private unnamed_addr constant [12 x i8] c"DW_OP_lit24\00", align 1
@.str.76 = private unnamed_addr constant [12 x i8] c"DW_OP_lit25\00", align 1
@.str.77 = private unnamed_addr constant [12 x i8] c"DW_OP_lit26\00", align 1
@.str.78 = private unnamed_addr constant [12 x i8] c"DW_OP_lit27\00", align 1
@.str.79 = private unnamed_addr constant [12 x i8] c"DW_OP_lit28\00", align 1
@.str.80 = private unnamed_addr constant [12 x i8] c"DW_OP_lit29\00", align 1
@.str.81 = private unnamed_addr constant [12 x i8] c"DW_OP_lit30\00", align 1
@.str.82 = private unnamed_addr constant [12 x i8] c"DW_OP_lit31\00", align 1
@.str.83 = private unnamed_addr constant [11 x i8] c"DW_OP_reg0\00", align 1
@.str.84 = private unnamed_addr constant [11 x i8] c"DW_OP_reg1\00", align 1
@.str.85 = private unnamed_addr constant [11 x i8] c"DW_OP_reg2\00", align 1
@.str.86 = private unnamed_addr constant [11 x i8] c"DW_OP_reg3\00", align 1
@.str.87 = private unnamed_addr constant [11 x i8] c"DW_OP_reg4\00", align 1
@.str.88 = private unnamed_addr constant [11 x i8] c"DW_OP_reg5\00", align 1
@.str.89 = private unnamed_addr constant [11 x i8] c"DW_OP_reg6\00", align 1
@.str.90 = private unnamed_addr constant [11 x i8] c"DW_OP_reg7\00", align 1
@.str.91 = private unnamed_addr constant [11 x i8] c"DW_OP_reg8\00", align 1
@.str.92 = private unnamed_addr constant [11 x i8] c"DW_OP_reg9\00", align 1
@.str.93 = private unnamed_addr constant [12 x i8] c"DW_OP_reg10\00", align 1
@.str.94 = private unnamed_addr constant [12 x i8] c"DW_OP_reg11\00", align 1
@.str.95 = private unnamed_addr constant [12 x i8] c"DW_OP_reg12\00", align 1
@.str.96 = private unnamed_addr constant [12 x i8] c"DW_OP_reg13\00", align 1
@.str.97 = private unnamed_addr constant [12 x i8] c"DW_OP_reg14\00", align 1
@.str.98 = private unnamed_addr constant [12 x i8] c"DW_OP_reg15\00", align 1
@.str.99 = private unnamed_addr constant [12 x i8] c"DW_OP_reg16\00", align 1
@.str.100 = private unnamed_addr constant [12 x i8] c"DW_OP_reg17\00", align 1
@.str.101 = private unnamed_addr constant [12 x i8] c"DW_OP_reg18\00", align 1
@.str.102 = private unnamed_addr constant [12 x i8] c"DW_OP_reg19\00", align 1
@.str.103 = private unnamed_addr constant [12 x i8] c"DW_OP_reg20\00", align 1
@.str.104 = private unnamed_addr constant [12 x i8] c"DW_OP_reg21\00", align 1
@.str.105 = private unnamed_addr constant [12 x i8] c"DW_OP_reg22\00", align 1
@.str.106 = private unnamed_addr constant [12 x i8] c"DW_OP_reg23\00", align 1
@.str.107 = private unnamed_addr constant [12 x i8] c"DW_OP_reg24\00", align 1
@.str.108 = private unnamed_addr constant [12 x i8] c"DW_OP_reg25\00", align 1
@.str.109 = private unnamed_addr constant [12 x i8] c"DW_OP_reg26\00", align 1
@.str.110 = private unnamed_addr constant [12 x i8] c"DW_OP_reg27\00", align 1
@.str.111 = private unnamed_addr constant [12 x i8] c"DW_OP_reg28\00", align 1
@.str.112 = private unnamed_addr constant [12 x i8] c"DW_OP_reg29\00", align 1
@.str.113 = private unnamed_addr constant [12 x i8] c"DW_OP_reg30\00", align 1
@.str.114 = private unnamed_addr constant [12 x i8] c"DW_OP_reg31\00", align 1
@.str.115 = private unnamed_addr constant [12 x i8] c"DW_OP_breg0\00", align 1
@.str.116 = private unnamed_addr constant [12 x i8] c"DW_OP_breg1\00", align 1
@.str.117 = private unnamed_addr constant [12 x i8] c"DW_OP_breg2\00", align 1
@.str.118 = private unnamed_addr constant [12 x i8] c"DW_OP_breg3\00", align 1
@.str.119 = private unnamed_addr constant [12 x i8] c"DW_OP_breg4\00", align 1
@.str.120 = private unnamed_addr constant [12 x i8] c"DW_OP_breg5\00", align 1
@.str.121 = private unnamed_addr constant [12 x i8] c"DW_OP_breg6\00", align 1
@.str.122 = private unnamed_addr constant [12 x i8] c"DW_OP_breg7\00", align 1
@.str.123 = private unnamed_addr constant [12 x i8] c"DW_OP_breg8\00", align 1
@.str.124 = private unnamed_addr constant [12 x i8] c"DW_OP_breg9\00", align 1
@.str.125 = private unnamed_addr constant [13 x i8] c"DW_OP_breg10\00", align 1
@.str.126 = private unnamed_addr constant [13 x i8] c"DW_OP_breg11\00", align 1
@.str.127 = private unnamed_addr constant [13 x i8] c"DW_OP_breg12\00", align 1
@.str.128 = private unnamed_addr constant [13 x i8] c"DW_OP_breg13\00", align 1
@.str.129 = private unnamed_addr constant [13 x i8] c"DW_OP_breg14\00", align 1
@.str.130 = private unnamed_addr constant [13 x i8] c"DW_OP_breg15\00", align 1
@.str.131 = private unnamed_addr constant [13 x i8] c"DW_OP_breg16\00", align 1
@.str.132 = private unnamed_addr constant [13 x i8] c"DW_OP_breg17\00", align 1
@.str.133 = private unnamed_addr constant [13 x i8] c"DW_OP_breg18\00", align 1
@.str.134 = private unnamed_addr constant [13 x i8] c"DW_OP_breg19\00", align 1
@.str.135 = private unnamed_addr constant [13 x i8] c"DW_OP_breg20\00", align 1
@.str.136 = private unnamed_addr constant [13 x i8] c"DW_OP_breg21\00", align 1
@.str.137 = private unnamed_addr constant [13 x i8] c"DW_OP_breg22\00", align 1
@.str.138 = private unnamed_addr constant [13 x i8] c"DW_OP_breg23\00", align 1
@.str.139 = private unnamed_addr constant [13 x i8] c"DW_OP_breg24\00", align 1
@.str.140 = private unnamed_addr constant [13 x i8] c"DW_OP_breg25\00", align 1
@.str.141 = private unnamed_addr constant [13 x i8] c"DW_OP_breg26\00", align 1
@.str.142 = private unnamed_addr constant [13 x i8] c"DW_OP_breg27\00", align 1
@.str.143 = private unnamed_addr constant [13 x i8] c"DW_OP_breg28\00", align 1
@.str.144 = private unnamed_addr constant [13 x i8] c"DW_OP_breg29\00", align 1
@.str.145 = private unnamed_addr constant [13 x i8] c"DW_OP_breg30\00", align 1
@.str.146 = private unnamed_addr constant [13 x i8] c"DW_OP_breg31\00", align 1
@.str.147 = private unnamed_addr constant [11 x i8] c"DW_OP_regx\00", align 1
@.str.148 = private unnamed_addr constant [12 x i8] c"DW_OP_fbreg\00", align 1
@.str.149 = private unnamed_addr constant [12 x i8] c"DW_OP_bregx\00", align 1
@.str.150 = private unnamed_addr constant [12 x i8] c"DW_OP_piece\00", align 1
@.str.151 = private unnamed_addr constant [17 x i8] c"DW_OP_deref_size\00", align 1
@.str.152 = private unnamed_addr constant [18 x i8] c"DW_OP_xderef_size\00", align 1
@.str.153 = private unnamed_addr constant [10 x i8] c"DW_OP_nop\00", align 1
@.str.154 = private unnamed_addr constant [13 x i8] c"OP_<unknown>\00", align 1
@flag_asynchronous_unwind_tables = external global i32, align 4
@__FUNCTION__.dwarf2out_stack_adjust = private unnamed_addr constant [23 x i8] c"dwarf2out_stack_adjust\00", align 1
@.str.155 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@global_rtl = external global [11 x %struct.rtx_def*], align 16
@__FUNCTION__.stack_adjust_offset = private unnamed_addr constant [20 x i8] c"stack_adjust_offset\00", align 1
@__FUNCTION__.dwarf2out_frame_debug_expr = private unnamed_addr constant [27 x i8] c"dwarf2out_frame_debug_expr\00", align 1
@frame_pointer_needed = external global i32, align 4
@__FUNCTION__.initial_return_save = private unnamed_addr constant [20 x i8] c"initial_return_save\00", align 1
@flag_debug_asm = external global i32, align 4
@targetm = external global %struct.gcc_target, align 8
@.str.156 = private unnamed_addr constant [13 x i8] c".debug_frame\00", align 1
@.str.157 = private unnamed_addr constant [7 x i8] c"Lframe\00", align 1
@.str.158 = private unnamed_addr constant [6 x i8] c"LSCIE\00", align 1
@.str.159 = private unnamed_addr constant [6 x i8] c"LECIE\00", align 1
@.str.160 = private unnamed_addr constant [35 x i8] c"Length of Common Information Entry\00", align 1
@.str.161 = private unnamed_addr constant [19 x i8] c"CIE Identifier Tag\00", align 1
@.str.162 = private unnamed_addr constant [12 x i8] c"CIE Version\00", align 1
@flag_pic = external global i32, align 4
@libfunc_table = external global [97 x %struct.rtx_def*], align 16
@__FUNCTION__.output_call_frame_info = private unnamed_addr constant [23 x i8] c"output_call_frame_info\00", align 1
@.str.163 = private unnamed_addr constant [17 x i8] c"CIE Augmentation\00", align 1
@.str.164 = private unnamed_addr constant [26 x i8] c"CIE Code Alignment Factor\00", align 1
@.str.165 = private unnamed_addr constant [26 x i8] c"CIE Data Alignment Factor\00", align 1
@.str.166 = private unnamed_addr constant [14 x i8] c"CIE RA Column\00", align 1
@.str.167 = private unnamed_addr constant [18 x i8] c"Augmentation size\00", align 1
@.str.168 = private unnamed_addr constant [17 x i8] c"Personality (%s)\00", align 1
@.str.169 = private unnamed_addr constant [19 x i8] c"LSDA Encoding (%s)\00", align 1
@.str.170 = private unnamed_addr constant [18 x i8] c"FDE Encoding (%s)\00", align 1
@.str.171 = private unnamed_addr constant [12 x i8] c"\09.align %d\0A\00", align 1
@.str.172 = private unnamed_addr constant [6 x i8] c"LSFDE\00", align 1
@.str.173 = private unnamed_addr constant [7 x i8] c"LASFDE\00", align 1
@.str.174 = private unnamed_addr constant [6 x i8] c"LEFDE\00", align 1
@.str.175 = private unnamed_addr constant [11 x i8] c"FDE Length\00", align 1
@.str.176 = private unnamed_addr constant [15 x i8] c"FDE CIE offset\00", align 1
@.str.177 = private unnamed_addr constant [21 x i8] c"FDE initial location\00", align 1
@.str.178 = private unnamed_addr constant [18 x i8] c"FDE address range\00", align 1
@.str.179 = private unnamed_addr constant [6 x i8] c"LLSDA\00", align 1
@.str.180 = private unnamed_addr constant [28 x i8] c"Language Specific Data Area\00", align 1
@.str.181 = private unnamed_addr constant [35 x i8] c"Language Specific Data Area (none)\00", align 1
@.str.182 = private unnamed_addr constant [25 x i8] c"DW_CFA_advance_loc 0x%lx\00", align 1
@.str.183 = private unnamed_addr constant [28 x i8] c"DW_CFA_offset, column 0x%lx\00", align 1
@.str.184 = private unnamed_addr constant [29 x i8] c"DW_CFA_restore, column 0x%lx\00", align 1
@.str.185 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@__FUNCTION__.output_cfi = private unnamed_addr constant [11 x i8] c"output_cfi\00", align 1
@.str.186 = private unnamed_addr constant [19 x i8] c"DW_CFA_advance_loc\00", align 1
@.str.187 = private unnamed_addr constant [14 x i8] c"DW_CFA_offset\00", align 1
@.str.188 = private unnamed_addr constant [15 x i8] c"DW_CFA_restore\00", align 1
@.str.189 = private unnamed_addr constant [11 x i8] c"DW_CFA_nop\00", align 1
@.str.190 = private unnamed_addr constant [15 x i8] c"DW_CFA_set_loc\00", align 1
@.str.191 = private unnamed_addr constant [20 x i8] c"DW_CFA_advance_loc1\00", align 1
@.str.192 = private unnamed_addr constant [20 x i8] c"DW_CFA_advance_loc2\00", align 1
@.str.193 = private unnamed_addr constant [20 x i8] c"DW_CFA_advance_loc4\00", align 1
@.str.194 = private unnamed_addr constant [23 x i8] c"DW_CFA_offset_extended\00", align 1
@.str.195 = private unnamed_addr constant [24 x i8] c"DW_CFA_restore_extended\00", align 1
@.str.196 = private unnamed_addr constant [17 x i8] c"DW_CFA_undefined\00", align 1
@.str.197 = private unnamed_addr constant [18 x i8] c"DW_CFA_same_value\00", align 1
@.str.198 = private unnamed_addr constant [16 x i8] c"DW_CFA_register\00", align 1
@.str.199 = private unnamed_addr constant [22 x i8] c"DW_CFA_remember_state\00", align 1
@.str.200 = private unnamed_addr constant [21 x i8] c"DW_CFA_restore_state\00", align 1
@.str.201 = private unnamed_addr constant [15 x i8] c"DW_CFA_def_cfa\00", align 1
@.str.202 = private unnamed_addr constant [24 x i8] c"DW_CFA_def_cfa_register\00", align 1
@.str.203 = private unnamed_addr constant [22 x i8] c"DW_CFA_def_cfa_offset\00", align 1
@.str.204 = private unnamed_addr constant [26 x i8] c"DW_CFA_def_cfa_expression\00", align 1
@.str.205 = private unnamed_addr constant [18 x i8] c"DW_CFA_expression\00", align 1
@.str.206 = private unnamed_addr constant [26 x i8] c"DW_CFA_offset_extended_sf\00", align 1
@.str.207 = private unnamed_addr constant [18 x i8] c"DW_CFA_def_cfa_sf\00", align 1
@.str.208 = private unnamed_addr constant [25 x i8] c"DW_CFA_def_cfa_offset_sf\00", align 1
@.str.209 = private unnamed_addr constant [25 x i8] c"DW_CFA_MIPS_advance_loc8\00", align 1
@.str.210 = private unnamed_addr constant [23 x i8] c"DW_CFA_GNU_window_save\00", align 1
@.str.211 = private unnamed_addr constant [21 x i8] c"DW_CFA_GNU_args_size\00", align 1
@.str.212 = private unnamed_addr constant [36 x i8] c"DW_CFA_GNU_negative_offset_extended\00", align 1
@.str.213 = private unnamed_addr constant [17 x i8] c"DW_CFA_<unknown>\00", align 1
@__FUNCTION__.output_loc_operands = private unnamed_addr constant [20 x i8] c"output_loc_operands\00", align 1
@.str.214 = private unnamed_addr constant [14 x i8] c"DIE %4lu: %s\0A\00", align 1
@.str.215 = private unnamed_addr constant [17 x i8] c"  abbrev id: %lu\00", align 1
@.str.216 = private unnamed_addr constant [14 x i8] c" offset: %lu\0A\00", align 1
@.str.217 = private unnamed_addr constant [7 x i8] c"  %s: \00", align 1
@.str.218 = private unnamed_addr constant [8 x i8] c"address\00", align 1
@.str.219 = private unnamed_addr constant [7 x i8] c"offset\00", align 1
@.str.220 = private unnamed_addr constant [20 x i8] c"location descriptor\00", align 1
@.str.221 = private unnamed_addr constant [26 x i8] c"location list -> label:%s\00", align 1
@.str.222 = private unnamed_addr constant [11 x i8] c"range list\00", align 1
@.str.223 = private unnamed_addr constant [4 x i8] c"%ld\00", align 1
@.str.224 = private unnamed_addr constant [4 x i8] c"%lu\00", align 1
@.str.225 = private unnamed_addr constant [19 x i8] c"constant (%lu,%lu)\00", align 1
@.str.226 = private unnamed_addr constant [24 x i8] c"floating-point constant\00", align 1
@.str.227 = private unnamed_addr constant [3 x i8] c"%u\00", align 1
@.str.228 = private unnamed_addr constant [17 x i8] c"die -> label: %s\00", align 1
@.str.229 = private unnamed_addr constant [11 x i8] c"die -> %lu\00", align 1
@.str.230 = private unnamed_addr constant [14 x i8] c"die -> <null>\00", align 1
@.str.231 = private unnamed_addr constant [10 x i8] c"label: %s\00", align 1
@.str.232 = private unnamed_addr constant [5 x i8] c"\22%s\22\00", align 1
@.str.233 = private unnamed_addr constant [7 x i8] c"<null>\00", align 1
@.str.234 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.235 = private unnamed_addr constant [4 x i8] c"%*s\00", align 1
@.str.236 = private unnamed_addr constant [15 x i8] c"DW_TAG_padding\00", align 1
@.str.237 = private unnamed_addr constant [18 x i8] c"DW_TAG_array_type\00", align 1
@.str.238 = private unnamed_addr constant [18 x i8] c"DW_TAG_class_type\00", align 1
@.str.239 = private unnamed_addr constant [19 x i8] c"DW_TAG_entry_point\00", align 1
@.str.240 = private unnamed_addr constant [24 x i8] c"DW_TAG_enumeration_type\00", align 1
@.str.241 = private unnamed_addr constant [24 x i8] c"DW_TAG_formal_parameter\00", align 1
@.str.242 = private unnamed_addr constant [28 x i8] c"DW_TAG_imported_declaration\00", align 1
@.str.243 = private unnamed_addr constant [13 x i8] c"DW_TAG_label\00", align 1
@.str.244 = private unnamed_addr constant [21 x i8] c"DW_TAG_lexical_block\00", align 1
@.str.245 = private unnamed_addr constant [14 x i8] c"DW_TAG_member\00", align 1
@.str.246 = private unnamed_addr constant [20 x i8] c"DW_TAG_pointer_type\00", align 1
@.str.247 = private unnamed_addr constant [22 x i8] c"DW_TAG_reference_type\00", align 1
@.str.248 = private unnamed_addr constant [20 x i8] c"DW_TAG_compile_unit\00", align 1
@.str.249 = private unnamed_addr constant [19 x i8] c"DW_TAG_string_type\00", align 1
@.str.250 = private unnamed_addr constant [22 x i8] c"DW_TAG_structure_type\00", align 1
@.str.251 = private unnamed_addr constant [23 x i8] c"DW_TAG_subroutine_type\00", align 1
@.str.252 = private unnamed_addr constant [15 x i8] c"DW_TAG_typedef\00", align 1
@.str.253 = private unnamed_addr constant [18 x i8] c"DW_TAG_union_type\00", align 1
@.str.254 = private unnamed_addr constant [30 x i8] c"DW_TAG_unspecified_parameters\00", align 1
@.str.255 = private unnamed_addr constant [15 x i8] c"DW_TAG_variant\00", align 1
@.str.256 = private unnamed_addr constant [20 x i8] c"DW_TAG_common_block\00", align 1
@.str.257 = private unnamed_addr constant [24 x i8] c"DW_TAG_common_inclusion\00", align 1
@.str.258 = private unnamed_addr constant [19 x i8] c"DW_TAG_inheritance\00", align 1
@.str.259 = private unnamed_addr constant [26 x i8] c"DW_TAG_inlined_subroutine\00", align 1
@.str.260 = private unnamed_addr constant [14 x i8] c"DW_TAG_module\00", align 1
@.str.261 = private unnamed_addr constant [26 x i8] c"DW_TAG_ptr_to_member_type\00", align 1
@.str.262 = private unnamed_addr constant [16 x i8] c"DW_TAG_set_type\00", align 1
@.str.263 = private unnamed_addr constant [21 x i8] c"DW_TAG_subrange_type\00", align 1
@.str.264 = private unnamed_addr constant [17 x i8] c"DW_TAG_with_stmt\00", align 1
@.str.265 = private unnamed_addr constant [26 x i8] c"DW_TAG_access_declaration\00", align 1
@.str.266 = private unnamed_addr constant [17 x i8] c"DW_TAG_base_type\00", align 1
@.str.267 = private unnamed_addr constant [19 x i8] c"DW_TAG_catch_block\00", align 1
@.str.268 = private unnamed_addr constant [18 x i8] c"DW_TAG_const_type\00", align 1
@.str.269 = private unnamed_addr constant [16 x i8] c"DW_TAG_constant\00", align 1
@.str.270 = private unnamed_addr constant [18 x i8] c"DW_TAG_enumerator\00", align 1
@.str.271 = private unnamed_addr constant [17 x i8] c"DW_TAG_file_type\00", align 1
@.str.272 = private unnamed_addr constant [14 x i8] c"DW_TAG_friend\00", align 1
@.str.273 = private unnamed_addr constant [16 x i8] c"DW_TAG_namelist\00", align 1
@.str.274 = private unnamed_addr constant [21 x i8] c"DW_TAG_namelist_item\00", align 1
@.str.275 = private unnamed_addr constant [19 x i8] c"DW_TAG_packed_type\00", align 1
@.str.276 = private unnamed_addr constant [18 x i8] c"DW_TAG_subprogram\00", align 1
@.str.277 = private unnamed_addr constant [27 x i8] c"DW_TAG_template_type_param\00", align 1
@.str.278 = private unnamed_addr constant [28 x i8] c"DW_TAG_template_value_param\00", align 1
@.str.279 = private unnamed_addr constant [19 x i8] c"DW_TAG_thrown_type\00", align 1
@.str.280 = private unnamed_addr constant [17 x i8] c"DW_TAG_try_block\00", align 1
@.str.281 = private unnamed_addr constant [20 x i8] c"DW_TAG_variant_part\00", align 1
@.str.282 = private unnamed_addr constant [16 x i8] c"DW_TAG_variable\00", align 1
@.str.283 = private unnamed_addr constant [21 x i8] c"DW_TAG_volatile_type\00", align 1
@.str.284 = private unnamed_addr constant [17 x i8] c"DW_TAG_MIPS_loop\00", align 1
@.str.285 = private unnamed_addr constant [20 x i8] c"DW_TAG_format_label\00", align 1
@.str.286 = private unnamed_addr constant [25 x i8] c"DW_TAG_function_template\00", align 1
@.str.287 = private unnamed_addr constant [22 x i8] c"DW_TAG_class_template\00", align 1
@.str.288 = private unnamed_addr constant [17 x i8] c"DW_TAG_GNU_BINCL\00", align 1
@.str.289 = private unnamed_addr constant [17 x i8] c"DW_TAG_GNU_EINCL\00", align 1
@.str.290 = private unnamed_addr constant [17 x i8] c"DW_TAG_<unknown>\00", align 1
@.str.291 = private unnamed_addr constant [14 x i8] c"DW_AT_sibling\00", align 1
@.str.292 = private unnamed_addr constant [15 x i8] c"DW_AT_location\00", align 1
@.str.293 = private unnamed_addr constant [11 x i8] c"DW_AT_name\00", align 1
@.str.294 = private unnamed_addr constant [15 x i8] c"DW_AT_ordering\00", align 1
@.str.295 = private unnamed_addr constant [18 x i8] c"DW_AT_subscr_data\00", align 1
@.str.296 = private unnamed_addr constant [16 x i8] c"DW_AT_byte_size\00", align 1
@.str.297 = private unnamed_addr constant [17 x i8] c"DW_AT_bit_offset\00", align 1
@.str.298 = private unnamed_addr constant [15 x i8] c"DW_AT_bit_size\00", align 1
@.str.299 = private unnamed_addr constant [19 x i8] c"DW_AT_element_list\00", align 1
@.str.300 = private unnamed_addr constant [16 x i8] c"DW_AT_stmt_list\00", align 1
@.str.301 = private unnamed_addr constant [13 x i8] c"DW_AT_low_pc\00", align 1
@.str.302 = private unnamed_addr constant [14 x i8] c"DW_AT_high_pc\00", align 1
@.str.303 = private unnamed_addr constant [15 x i8] c"DW_AT_language\00", align 1
@.str.304 = private unnamed_addr constant [13 x i8] c"DW_AT_member\00", align 1
@.str.305 = private unnamed_addr constant [12 x i8] c"DW_AT_discr\00", align 1
@.str.306 = private unnamed_addr constant [18 x i8] c"DW_AT_discr_value\00", align 1
@.str.307 = private unnamed_addr constant [17 x i8] c"DW_AT_visibility\00", align 1
@.str.308 = private unnamed_addr constant [13 x i8] c"DW_AT_import\00", align 1
@.str.309 = private unnamed_addr constant [20 x i8] c"DW_AT_string_length\00", align 1
@.str.310 = private unnamed_addr constant [23 x i8] c"DW_AT_common_reference\00", align 1
@.str.311 = private unnamed_addr constant [15 x i8] c"DW_AT_comp_dir\00", align 1
@.str.312 = private unnamed_addr constant [18 x i8] c"DW_AT_const_value\00", align 1
@.str.313 = private unnamed_addr constant [22 x i8] c"DW_AT_containing_type\00", align 1
@.str.314 = private unnamed_addr constant [20 x i8] c"DW_AT_default_value\00", align 1
@.str.315 = private unnamed_addr constant [13 x i8] c"DW_AT_inline\00", align 1
@.str.316 = private unnamed_addr constant [18 x i8] c"DW_AT_is_optional\00", align 1
@.str.317 = private unnamed_addr constant [18 x i8] c"DW_AT_lower_bound\00", align 1
@.str.318 = private unnamed_addr constant [15 x i8] c"DW_AT_producer\00", align 1
@.str.319 = private unnamed_addr constant [17 x i8] c"DW_AT_prototyped\00", align 1
@.str.320 = private unnamed_addr constant [18 x i8] c"DW_AT_return_addr\00", align 1
@.str.321 = private unnamed_addr constant [18 x i8] c"DW_AT_start_scope\00", align 1
@.str.322 = private unnamed_addr constant [18 x i8] c"DW_AT_stride_size\00", align 1
@.str.323 = private unnamed_addr constant [18 x i8] c"DW_AT_upper_bound\00", align 1
@.str.324 = private unnamed_addr constant [22 x i8] c"DW_AT_abstract_origin\00", align 1
@.str.325 = private unnamed_addr constant [20 x i8] c"DW_AT_accessibility\00", align 1
@.str.326 = private unnamed_addr constant [20 x i8] c"DW_AT_address_class\00", align 1
@.str.327 = private unnamed_addr constant [17 x i8] c"DW_AT_artificial\00", align 1
@.str.328 = private unnamed_addr constant [17 x i8] c"DW_AT_base_types\00", align 1
@.str.329 = private unnamed_addr constant [25 x i8] c"DW_AT_calling_convention\00", align 1
@.str.330 = private unnamed_addr constant [12 x i8] c"DW_AT_count\00", align 1
@.str.331 = private unnamed_addr constant [27 x i8] c"DW_AT_data_member_location\00", align 1
@.str.332 = private unnamed_addr constant [18 x i8] c"DW_AT_decl_column\00", align 1
@.str.333 = private unnamed_addr constant [16 x i8] c"DW_AT_decl_file\00", align 1
@.str.334 = private unnamed_addr constant [16 x i8] c"DW_AT_decl_line\00", align 1
@.str.335 = private unnamed_addr constant [18 x i8] c"DW_AT_declaration\00", align 1
@.str.336 = private unnamed_addr constant [17 x i8] c"DW_AT_discr_list\00", align 1
@.str.337 = private unnamed_addr constant [15 x i8] c"DW_AT_encoding\00", align 1
@.str.338 = private unnamed_addr constant [15 x i8] c"DW_AT_external\00", align 1
@.str.339 = private unnamed_addr constant [17 x i8] c"DW_AT_frame_base\00", align 1
@.str.340 = private unnamed_addr constant [13 x i8] c"DW_AT_friend\00", align 1
@.str.341 = private unnamed_addr constant [22 x i8] c"DW_AT_identifier_case\00", align 1
@.str.342 = private unnamed_addr constant [17 x i8] c"DW_AT_macro_info\00", align 1
@.str.343 = private unnamed_addr constant [21 x i8] c"DW_AT_namelist_items\00", align 1
@.str.344 = private unnamed_addr constant [15 x i8] c"DW_AT_priority\00", align 1
@.str.345 = private unnamed_addr constant [14 x i8] c"DW_AT_segment\00", align 1
@.str.346 = private unnamed_addr constant [20 x i8] c"DW_AT_specification\00", align 1
@.str.347 = private unnamed_addr constant [18 x i8] c"DW_AT_static_link\00", align 1
@.str.348 = private unnamed_addr constant [11 x i8] c"DW_AT_type\00", align 1
@.str.349 = private unnamed_addr constant [19 x i8] c"DW_AT_use_location\00", align 1
@.str.350 = private unnamed_addr constant [25 x i8] c"DW_AT_variable_parameter\00", align 1
@.str.351 = private unnamed_addr constant [17 x i8] c"DW_AT_virtuality\00", align 1
@.str.352 = private unnamed_addr constant [27 x i8] c"DW_AT_vtable_elem_location\00", align 1
@.str.353 = private unnamed_addr constant [16 x i8] c"DW_AT_allocated\00", align 1
@.str.354 = private unnamed_addr constant [17 x i8] c"DW_AT_associated\00", align 1
@.str.355 = private unnamed_addr constant [20 x i8] c"DW_AT_data_location\00", align 1
@.str.356 = private unnamed_addr constant [13 x i8] c"DW_AT_stride\00", align 1
@.str.357 = private unnamed_addr constant [15 x i8] c"DW_AT_entry_pc\00", align 1
@.str.358 = private unnamed_addr constant [15 x i8] c"DW_AT_use_UTF8\00", align 1
@.str.359 = private unnamed_addr constant [16 x i8] c"DW_AT_extension\00", align 1
@.str.360 = private unnamed_addr constant [13 x i8] c"DW_AT_ranges\00", align 1
@.str.361 = private unnamed_addr constant [17 x i8] c"DW_AT_trampoline\00", align 1
@.str.362 = private unnamed_addr constant [18 x i8] c"DW_AT_call_column\00", align 1
@.str.363 = private unnamed_addr constant [16 x i8] c"DW_AT_call_file\00", align 1
@.str.364 = private unnamed_addr constant [16 x i8] c"DW_AT_call_line\00", align 1
@.str.365 = private unnamed_addr constant [15 x i8] c"DW_AT_MIPS_fde\00", align 1
@.str.366 = private unnamed_addr constant [22 x i8] c"DW_AT_MIPS_loop_begin\00", align 1
@.str.367 = private unnamed_addr constant [27 x i8] c"DW_AT_MIPS_tail_loop_begin\00", align 1
@.str.368 = private unnamed_addr constant [24 x i8] c"DW_AT_MIPS_epilog_begin\00", align 1
@.str.369 = private unnamed_addr constant [30 x i8] c"DW_AT_MIPS_loop_unroll_factor\00", align 1
@.str.370 = private unnamed_addr constant [35 x i8] c"DW_AT_MIPS_software_pipeline_depth\00", align 1
@.str.371 = private unnamed_addr constant [24 x i8] c"DW_AT_MIPS_linkage_name\00", align 1
@.str.372 = private unnamed_addr constant [18 x i8] c"DW_AT_MIPS_stride\00", align 1
@.str.373 = private unnamed_addr constant [25 x i8] c"DW_AT_MIPS_abstract_name\00", align 1
@.str.374 = private unnamed_addr constant [24 x i8] c"DW_AT_MIPS_clone_origin\00", align 1
@.str.375 = private unnamed_addr constant [23 x i8] c"DW_AT_MIPS_has_inlines\00", align 1
@.str.376 = private unnamed_addr constant [15 x i8] c"DW_AT_sf_names\00", align 1
@.str.377 = private unnamed_addr constant [15 x i8] c"DW_AT_src_info\00", align 1
@.str.378 = private unnamed_addr constant [15 x i8] c"DW_AT_mac_info\00", align 1
@.str.379 = private unnamed_addr constant [17 x i8] c"DW_AT_src_coords\00", align 1
@.str.380 = private unnamed_addr constant [17 x i8] c"DW_AT_body_begin\00", align 1
@.str.381 = private unnamed_addr constant [15 x i8] c"DW_AT_body_end\00", align 1
@.str.382 = private unnamed_addr constant [17 x i8] c"DW_AT_GNU_vector\00", align 1
@.str.383 = private unnamed_addr constant [28 x i8] c"DW_AT_VMS_rtnbeg_pd_address\00", align 1
@.str.384 = private unnamed_addr constant [16 x i8] c"DW_AT_<unknown>\00", align 1
@__FUNCTION__.AT_loc_list = private unnamed_addr constant [12 x i8] c"AT_loc_list\00", align 1
@__FUNCTION__.AT_int = private unnamed_addr constant [7 x i8] c"AT_int\00", align 1
@__FUNCTION__.AT_unsigned = private unnamed_addr constant [12 x i8] c"AT_unsigned\00", align 1
@__FUNCTION__.AT_flag = private unnamed_addr constant [8 x i8] c"AT_flag\00", align 1
@__FUNCTION__.AT_ref = private unnamed_addr constant [7 x i8] c"AT_ref\00", align 1
@__FUNCTION__.AT_lbl = private unnamed_addr constant [7 x i8] c"AT_lbl\00", align 1
@__FUNCTION__.AT_string = private unnamed_addr constant [10 x i8] c"AT_string\00", align 1
@decl_die_table_in_use = internal global i32 0, align 4
@decl_die_table = internal global %struct.die_struct** null, align 8
@tree_code_type = external global [256 x i8], align 16
@__FUNCTION__.gen_type_die_for_member = private unnamed_addr constant [24 x i8] c"gen_type_die_for_member\00", align 1
@__FUNCTION__.gen_type_die = private unnamed_addr constant [13 x i8] c"gen_type_die\00", align 1
@__FUNCTION__.scope_die_for = private unnamed_addr constant [14 x i8] c"scope_die_for\00", align 1
@__FUNCTION__.gen_formal_parameter_die = private unnamed_addr constant [25 x i8] c"gen_formal_parameter_die\00", align 1
@__FUNCTION__.add_abstract_origin_attribute = private unnamed_addr constant [30 x i8] c"add_abstract_origin_attribute\00", align 1
@lang_set_decl_assembler_name = external global void (%union.tree_node*)*, align 8
@decl_printable_name = external global i8* (%union.tree_node*, i32)*, align 8
@decl_die_table_allocated = internal global i32 0, align 4
@__FUNCTION__.add_location_or_const_value_attribute = private unnamed_addr constant [38 x i8] c"add_location_or_const_value_attribute\00", align 1
@reload_completed = external global i32, align 4
@const_int_rtx = external global [129 x %struct.rtx_def*], align 16
@mode_class = external constant [59 x i32], align 16
@__FUNCTION__.rtl_for_decl_location = private unnamed_addr constant [22 x i8] c"rtl_for_decl_location\00", align 1
@__FUNCTION__.add_const_value_attribute = private unnamed_addr constant [26 x i8] c"add_const_value_attribute\00", align 1
@used_rtx_varray = internal global %struct.varray_head_tag* null, align 8
@__FUNCTION__.loc_descriptor = private unnamed_addr constant [15 x i8] c"loc_descriptor\00", align 1
@__FUNCTION__.reg_number = private unnamed_addr constant [11 x i8] c"reg_number\00", align 1
@word_mode = external global i32, align 4
@mode_unit_size = external constant [59 x i8], align 16
@__FUNCTION__.mem_loc_descriptor = private unnamed_addr constant [19 x i8] c"mem_loc_descriptor\00", align 1
@optimize = external global i32, align 4
@__FUNCTION__.loc_descriptor_from_tree = private unnamed_addr constant [25 x i8] c"loc_descriptor_from_tree\00", align 1
@__FUNCTION__.add_byte_size_attribute = private unnamed_addr constant [24 x i8] c"add_byte_size_attribute\00", align 1
@__FUNCTION__.add_child_die = private unnamed_addr constant [14 x i8] c"add_child_die\00", align 1
@__FUNCTION__.add_data_member_location_attribute = private unnamed_addr constant [35 x i8] c"add_data_member_location_attribute\00", align 1
@__FUNCTION__.field_byte_offset = private unnamed_addr constant [18 x i8] c"field_byte_offset\00", align 1
@__FUNCTION__.splice_child_die = private unnamed_addr constant [17 x i8] c"splice_child_die\00", align 1
@__FUNCTION__.gen_subprogram_die = private unnamed_addr constant [19 x i8] c"gen_subprogram_die\00", align 1
@global_dc = external global %struct.diagnostic_context*, align 8
@flag_no_inline = external global i32, align 4
@.str.385 = private unnamed_addr constant [19 x i8] c"__builtin_va_alist\00", align 1
@current_function_has_inlines = internal global i32 0, align 4
@arange_table_in_use = internal global i32 0, align 4
@arange_table_allocated = internal global i32 0, align 4
@arange_table = internal global %struct.die_struct** null, align 8
@.str.386 = private unnamed_addr constant [4 x i8] c"LBB\00", align 1
@.str.387 = private unnamed_addr constant [4 x i8] c"LBE\00", align 1
@ranges_table_in_use = internal global i32 0, align 4
@ranges_table_allocated = internal global i32 0, align 4
@ranges_table = internal global %struct.dw_ranges_struct* null, align 8
@__FUNCTION__.pop_decl_scope = private unnamed_addr constant [15 x i8] c"pop_decl_scope\00", align 1
@limbo_die_list = internal global %struct.limbo_die_struct* null, align 8
@pubname_table_in_use = internal global i32 0, align 4
@pubname_table_allocated = internal global i32 0, align 4
@pubname_table = internal global %struct.pubname_struct* null, align 8
@__FUNCTION__.modified_type_die = private unnamed_addr constant [18 x i8] c"modified_type_die\00", align 1
@__FUNCTION__.is_base_type = private unnamed_addr constant [13 x i8] c"is_base_type\00", align 1
@.str.388 = private unnamed_addr constant [12 x i8] c"__unknown__\00", align 1
@.str.389 = private unnamed_addr constant [12 x i8] c"signed char\00", align 1
@.str.390 = private unnamed_addr constant [14 x i8] c"unsigned char\00", align 1
@__FUNCTION__.base_type_die = private unnamed_addr constant [14 x i8] c"base_type_die\00", align 1
@__FUNCTION__.gen_decl_die = private unnamed_addr constant [13 x i8] c"gen_decl_die\00", align 1
@__FUNCTION__.gen_tagged_type_instantiation_die = private unnamed_addr constant [34 x i8] c"gen_tagged_type_instantiation_die\00", align 1
@__FUNCTION__.gen_typedef_die = private unnamed_addr constant [16 x i8] c"gen_typedef_die\00", align 1
@__FUNCTION__.gen_label_die = private unnamed_addr constant [14 x i8] c"gen_label_die\00", align 1
@.str.391 = private unnamed_addr constant [2 x i8] c"L\00", align 1
@__FUNCTION__.add_bit_size_attribute = private unnamed_addr constant [23 x i8] c"add_bit_size_attribute\00", align 1
@__FUNCTION__.add_bit_offset_attribute = private unnamed_addr constant [25 x i8] c"add_bit_offset_attribute\00", align 1
@.str.392 = private unnamed_addr constant [11 x i8] c"<internal>\00", align 1
@.str.393 = private unnamed_addr constant [11 x i8] c"<built-in>\00", align 1
@file_table = internal global %struct.file_table zeroinitializer, align 8
@.str.394 = private unnamed_addr constant [16 x i8] c"\09.file %u \22%s\22\0A\00", align 1
@.str.395 = private unnamed_addr constant [11 x i8] c"\09%s %s:%d\0A\00", align 1
@.str.396 = private unnamed_addr constant [2 x i8] c"#\00", align 1
@.str.397 = private unnamed_addr constant [15 x i8] c"\09.loc %d %d 0\0A\00", align 1
@line_info_table_in_use = internal global i32 0, align 4
@separate_line_info_table_in_use = internal global i32 0, align 4
@flag_eliminate_dwarf2_dups = external global i32, align 4
@.str.398 = private unnamed_addr constant [15 x i8] c".debug_macinfo\00", align 1
@.str.399 = private unnamed_addr constant [15 x i8] c"Start new file\00", align 1
@.str.400 = private unnamed_addr constant [29 x i8] c"Included from line number %d\00", align 1
@.str.401 = private unnamed_addr constant [25 x i8] c"Filename we just started\00", align 1
@.str.402 = private unnamed_addr constant [9 x i8] c"End file\00", align 1
@.str.403 = private unnamed_addr constant [13 x i8] c"Define macro\00", align 1
@.str.404 = private unnamed_addr constant [18 x i8] c"At line number %d\00", align 1
@.str.405 = private unnamed_addr constant [10 x i8] c"The macro\00", align 1
@.str.406 = private unnamed_addr constant [15 x i8] c"Undefine macro\00", align 1
@primary_filename = internal global i8* null, align 8
@.str.407 = private unnamed_addr constant [17 x i8] c"decl_scope_table\00", align 1
@abbrev_die_table = internal global %struct.die_struct** null, align 8
@abbrev_die_table_allocated = internal global i32 0, align 4
@abbrev_die_table_in_use = internal global i32 0, align 4
@line_info_table = internal global %struct.dw_line_info_struct* null, align 8
@line_info_table_allocated = internal global i32 0, align 4
@.str.408 = private unnamed_addr constant [17 x i8] c"incomplete_types\00", align 1
@.str.409 = private unnamed_addr constant [16 x i8] c"used_rtx_varray\00", align 1
@text_end_label = internal global [30 x i8] zeroinitializer, align 16
@.str.410 = private unnamed_addr constant [7 x i8] c"Letext\00", align 1
@abbrev_section_label = internal global [30 x i8] zeroinitializer, align 16
@.str.411 = private unnamed_addr constant [14 x i8] c"Ldebug_abbrev\00", align 1
@text_section_label = internal global [30 x i8] zeroinitializer, align 16
@.str.412 = private unnamed_addr constant [6 x i8] c"Ltext\00", align 1
@debug_info_section_label = internal global [30 x i8] zeroinitializer, align 16
@.str.413 = private unnamed_addr constant [12 x i8] c"Ldebug_info\00", align 1
@debug_line_section_label = internal global [30 x i8] zeroinitializer, align 16
@.str.414 = private unnamed_addr constant [12 x i8] c"Ldebug_line\00", align 1
@ranges_section_label = internal global [60 x i8] zeroinitializer, align 16
@.str.415 = private unnamed_addr constant [14 x i8] c"Ldebug_ranges\00", align 1
@.str.416 = private unnamed_addr constant [14 x i8] c".debug_abbrev\00", align 1
@.str.417 = private unnamed_addr constant [12 x i8] c".debug_info\00", align 1
@.str.418 = private unnamed_addr constant [12 x i8] c".debug_line\00", align 1
@macinfo_section_label = internal global [30 x i8] zeroinitializer, align 16
@.str.419 = private unnamed_addr constant [15 x i8] c"Ldebug_macinfo\00", align 1
@lang_hooks = external constant %struct.lang_hooks, align 8
@.str.420 = private unnamed_addr constant [6 x i8] c"%s %s\00", align 1
@version_string = external constant i8*, align 8
@.str.421 = private unnamed_addr constant [8 x i8] c"GNU C++\00", align 1
@.str.422 = private unnamed_addr constant [8 x i8] c"GNU Ada\00", align 1
@.str.423 = private unnamed_addr constant [8 x i8] c"GNU F77\00", align 1
@.str.424 = private unnamed_addr constant [11 x i8] c"GNU Pascal\00", align 1
@.str.425 = private unnamed_addr constant [9 x i8] c"GNU Java\00", align 1
@flag_traditional = external global i32, align 4
@ggc_pending_trees = external global %struct.varray_head_tag*, align 8
@__FUNCTION__.dwarf2out_finish = private unnamed_addr constant [17 x i8] c"dwarf2out_finish\00", align 1
@have_location_lists = internal global i32 0, align 4
@.str.426 = private unnamed_addr constant [11 x i8] c".debug_loc\00", align 1
@loc_section_label = internal global [30 x i8] zeroinitializer, align 16
@.str.427 = private unnamed_addr constant [11 x i8] c"Ldebug_loc\00", align 1
@.str.428 = private unnamed_addr constant [16 x i8] c".debug_pubnames\00", align 1
@.str.429 = private unnamed_addr constant [15 x i8] c".debug_aranges\00", align 1
@.str.430 = private unnamed_addr constant [14 x i8] c".debug_ranges\00", align 1
@comdat_symbol_id = internal global i8* null, align 8
@.str.431 = private unnamed_addr constant [9 x i8] c"%s.%s.%x\00", align 1
@.str.432 = private unnamed_addr constant [3 x i8] c"DW\00", align 1
@comdat_symbol_number = internal global i32 0, align 4
@.str.433 = private unnamed_addr constant [5 x i8] c"LDIE\00", align 1
@gen_internal_sym.label_num = internal global i32 0, align 4
@.str.434 = private unnamed_addr constant [4 x i8] c"%s.\00", align 1
@.str.435 = private unnamed_addr constant [5 x i8] c"%.2x\00", align 1
@__FUNCTION__.attr_checksum = private unnamed_addr constant [14 x i8] c"attr_checksum\00", align 1
@__FUNCTION__.AT_addr = private unnamed_addr constant [8 x i8] c"AT_addr\00", align 1
@__FUNCTION__.AT_loc = private unnamed_addr constant [7 x i8] c"AT_loc\00", align 1
@.str.436 = private unnamed_addr constant [6 x i8] c".text\00", align 1
@.str.437 = private unnamed_addr constant [48 x i8] c"Location list base address specifier fake entry\00", align 1
@.str.438 = private unnamed_addr constant [42 x i8] c"Location list base address specifier base\00", align 1
@.str.439 = private unnamed_addr constant [33 x i8] c"Location list begin address (%s)\00", align 1
@.str.440 = private unnamed_addr constant [31 x i8] c"Location list end address (%s)\00", align 1
@__FUNCTION__.output_loc_list = private unnamed_addr constant [16 x i8] c"output_loc_list\00", align 1
@.str.441 = private unnamed_addr constant [25 x i8] c"Location expression size\00", align 1
@.str.442 = private unnamed_addr constant [36 x i8] c"Location list terminator begin (%s)\00", align 1
@.str.443 = private unnamed_addr constant [34 x i8] c"Location list terminator end (%s)\00", align 1
@next_die_offset = internal global i64 0, align 8
@.str.444 = private unnamed_addr constant [20 x i8] c".gnu.linkonce.wi.%s\00", align 1
@__FUNCTION__.build_abbrev_table = private unnamed_addr constant [19 x i8] c"build_abbrev_table\00", align 1
@__FUNCTION__.set_AT_ref_external = private unnamed_addr constant [20 x i8] c"set_AT_ref_external\00", align 1
@__FUNCTION__.value_format = private unnamed_addr constant [13 x i8] c"value_format\00", align 1
@.str.445 = private unnamed_addr constant [3 x i8] c"LC\00", align 1
@const_labelno = external global i32, align 4
@__FUNCTION__.AT_string_form = private unnamed_addr constant [15 x i8] c"AT_string_form\00", align 1
@__FUNCTION__.size_of_die = private unnamed_addr constant [12 x i8] c"size_of_die\00", align 1
@.str.446 = private unnamed_addr constant [32 x i8] c"Length of Compilation Unit Info\00", align 1
@.str.447 = private unnamed_addr constant [21 x i8] c"DWARF version number\00", align 1
@.str.448 = private unnamed_addr constant [28 x i8] c"Offset Into Abbrev. Section\00", align 1
@.str.449 = private unnamed_addr constant [24 x i8] c"Pointer Size (in bytes)\00", align 1
@.str.450 = private unnamed_addr constant [17 x i8] c"(DIE (0x%lx) %s)\00", align 1
@.str.451 = private unnamed_addr constant [7 x i8] c"+0x%lx\00", align 1
@.str.452 = private unnamed_addr constant [19 x i8] c"long long constant\00", align 1
@.str.453 = private unnamed_addr constant [20 x i8] c"fp constant word %u\00", align 1
@__FUNCTION__.output_die = private unnamed_addr constant [11 x i8] c"output_die\00", align 1
@.str.454 = private unnamed_addr constant [9 x i8] c"%s: \22%s\22\00", align 1
@.str.455 = private unnamed_addr constant [29 x i8] c"end of children of DIE 0x%lx\00", align 1
@.str.456 = private unnamed_addr constant [8 x i8] c".globl \00", align 1
@.str.457 = private unnamed_addr constant [14 x i8] c"(abbrev code)\00", align 1
@.str.458 = private unnamed_addr constant [10 x i8] c"(TAG: %s)\00", align 1
@.str.459 = private unnamed_addr constant [16 x i8] c"DW_children_yes\00", align 1
@.str.460 = private unnamed_addr constant [15 x i8] c"DW_children_no\00", align 1
@.str.461 = private unnamed_addr constant [5 x i8] c"(%s)\00", align 1
@.str.462 = private unnamed_addr constant [13 x i8] c"DW_FORM_addr\00", align 1
@.str.463 = private unnamed_addr constant [15 x i8] c"DW_FORM_block2\00", align 1
@.str.464 = private unnamed_addr constant [15 x i8] c"DW_FORM_block4\00", align 1
@.str.465 = private unnamed_addr constant [14 x i8] c"DW_FORM_data2\00", align 1
@.str.466 = private unnamed_addr constant [14 x i8] c"DW_FORM_data4\00", align 1
@.str.467 = private unnamed_addr constant [14 x i8] c"DW_FORM_data8\00", align 1
@.str.468 = private unnamed_addr constant [15 x i8] c"DW_FORM_string\00", align 1
@.str.469 = private unnamed_addr constant [14 x i8] c"DW_FORM_block\00", align 1
@.str.470 = private unnamed_addr constant [15 x i8] c"DW_FORM_block1\00", align 1
@.str.471 = private unnamed_addr constant [14 x i8] c"DW_FORM_data1\00", align 1
@.str.472 = private unnamed_addr constant [13 x i8] c"DW_FORM_flag\00", align 1
@.str.473 = private unnamed_addr constant [14 x i8] c"DW_FORM_sdata\00", align 1
@.str.474 = private unnamed_addr constant [13 x i8] c"DW_FORM_strp\00", align 1
@.str.475 = private unnamed_addr constant [14 x i8] c"DW_FORM_udata\00", align 1
@.str.476 = private unnamed_addr constant [17 x i8] c"DW_FORM_ref_addr\00", align 1
@.str.477 = private unnamed_addr constant [13 x i8] c"DW_FORM_ref1\00", align 1
@.str.478 = private unnamed_addr constant [13 x i8] c"DW_FORM_ref2\00", align 1
@.str.479 = private unnamed_addr constant [13 x i8] c"DW_FORM_ref4\00", align 1
@.str.480 = private unnamed_addr constant [13 x i8] c"DW_FORM_ref8\00", align 1
@.str.481 = private unnamed_addr constant [18 x i8] c"DW_FORM_ref_udata\00", align 1
@.str.482 = private unnamed_addr constant [17 x i8] c"DW_FORM_indirect\00", align 1
@.str.483 = private unnamed_addr constant [18 x i8] c"DW_FORM_<unknown>\00", align 1
@.str.484 = private unnamed_addr constant [28 x i8] c"Length of Public Names Info\00", align 1
@.str.485 = private unnamed_addr constant [14 x i8] c"DWARF Version\00", align 1
@.str.486 = private unnamed_addr constant [32 x i8] c"Offset of Compilation Unit Info\00", align 1
@.str.487 = private unnamed_addr constant [24 x i8] c"Compilation Unit Length\00", align 1
@__FUNCTION__.output_pubnames = private unnamed_addr constant [16 x i8] c"output_pubnames\00", align 1
@.str.488 = private unnamed_addr constant [11 x i8] c"DIE offset\00", align 1
@.str.489 = private unnamed_addr constant [14 x i8] c"external name\00", align 1
@.str.490 = private unnamed_addr constant [30 x i8] c"Length of Address Ranges Info\00", align 1
@.str.491 = private unnamed_addr constant [16 x i8] c"Size of Address\00", align 1
@.str.492 = private unnamed_addr constant [27 x i8] c"Size of Segment Descriptor\00", align 1
@.str.493 = private unnamed_addr constant [24 x i8] c"Pad to %d byte boundary\00", align 1
@.str.494 = private unnamed_addr constant [8 x i8] c"Address\00", align 1
@.str.495 = private unnamed_addr constant [7 x i8] c"Length\00", align 1
@__FUNCTION__.output_aranges = private unnamed_addr constant [15 x i8] c"output_aranges\00", align 1
@output_ranges.start_fmt = internal constant i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.496, i32 0, i32 0), align 8
@.str.496 = private unnamed_addr constant [12 x i8] c"Offset 0x%x\00", align 1
@.str.497 = private unnamed_addr constant [11 x i8] c".debug_str\00", align 1

; Function Attrs: nounwind uwtable
define i32 @dwarf2out_do_frame() #0 {
entry:
  %0 = load i32, i32* @write_symbols, align 4
  %cmp = icmp eq i32 %0, 4
  br i1 %cmp, label %lor.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* @write_symbols, align 4
  %cmp1 = icmp eq i32 %1, 7
  br i1 %cmp1, label %lor.end, label %lor.lhs.false.2

lor.lhs.false.2:                                  ; preds = %lor.lhs.false
  %2 = load i32, i32* @flag_unwind_tables, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false.2
  %3 = load i32, i32* @flag_exceptions, align 4
  %tobool3 = icmp ne i32 %3, 0
  br i1 %tobool3, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %lor.rhs
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %4 = phi i1 [ false, %lor.rhs ], [ true, %land.rhs ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %lor.lhs.false.2, %lor.lhs.false, %entry
  %5 = phi i1 [ true, %lor.lhs.false.2 ], [ true, %lor.lhs.false ], [ true, %entry ], [ %4, %land.end ]
  %lor.ext = zext i1 %5 to i32
  ret i32 %lor.ext
}

; Function Attrs: nounwind uwtable
define void @default_eh_frame_section() #0 {
entry:
  call void @named_section_flags(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i32 0, i32 0), i32 512)
  ret void
}

declare void @named_section_flags(i8*, i32) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @expand_builtin_dwarf_fp_regnum() #0 {
entry:
  %0 = load i32, i32* @target_flags, align 4
  %and = and i32 %0, 33554432
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i32, i32* getelementptr inbounds ([53 x i32], [53 x i32]* @dbx64_register_map, i32 0, i64 6), align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  %2 = load i32, i32* getelementptr inbounds ([53 x i32], [53 x i32]* @svr4_dbx_register_map, i32 0, i64 6), align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %1, %cond.true ], [ %2, %cond.false ]
  %conv = sext i32 %cond to i64
  %call = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv)
  ret %struct.rtx_def* %call
}

declare %struct.rtx_def* @gen_rtx_CONST_INT(i32, i64) #1

; Function Attrs: nounwind uwtable
define void @expand_builtin_init_dwarf_reg_sizes(%union.tree_node* %address) #0 {
entry:
  %address.addr = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %mode = alloca i32, align 4
  %addr = alloca %struct.rtx_def*, align 8
  %mem = alloca %struct.rtx_def*, align 8
  %offset = alloca i64, align 8
  %size = alloca i64, align 8
  store %union.tree_node* %address, %union.tree_node** %address.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i32 0, i64 0), align 8
  %type = bitcast %union.tree_node* %0 to %struct.tree_type*
  %mode1 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type, i32 0, i32 6
  %bf.load = load i32, i32* %mode1, align 4
  %bf.lshr = lshr i32 %bf.load, 9
  %bf.clear = and i32 %bf.lshr, 127
  store i32 %bf.clear, i32* %mode, align 4
  %1 = load %union.tree_node*, %union.tree_node** %address.addr, align 8
  %call = call %struct.rtx_def* @expand_expr(%union.tree_node* %1, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call, %struct.rtx_def** %addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %call2 = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %2)
  store %struct.rtx_def* %call2, %struct.rtx_def** %mem, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %3, 53
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* @target_flags, align 4
  %and = and i32 %4, 33554432
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds [53 x i32], [53 x i32]* @dbx64_register_map, i32 0, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  br label %cond.end

cond.false:                                       ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %idxprom3 = sext i32 %7 to i64
  %arrayidx4 = getelementptr inbounds [53 x i32], [53 x i32]* @svr4_dbx_register_map, i32 0, i64 %idxprom3
  %8 = load i32, i32* %arrayidx4, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %6, %cond.true ], [ %8, %cond.false ]
  %cmp5 = icmp slt i32 %cond, 17
  br i1 %cmp5, label %if.then, label %if.end.30

if.then:                                          ; preds = %cond.end
  %9 = load i32, i32* @target_flags, align 4
  %and6 = and i32 %9, 33554432
  %tobool7 = icmp ne i32 %and6, 0
  br i1 %tobool7, label %cond.true.8, label %cond.false.11

cond.true.8:                                      ; preds = %if.then
  %10 = load i32, i32* %i, align 4
  %idxprom9 = sext i32 %10 to i64
  %arrayidx10 = getelementptr inbounds [53 x i32], [53 x i32]* @dbx64_register_map, i32 0, i64 %idxprom9
  %11 = load i32, i32* %arrayidx10, align 4
  br label %cond.end.14

cond.false.11:                                    ; preds = %if.then
  %12 = load i32, i32* %i, align 4
  %idxprom12 = sext i32 %12 to i64
  %arrayidx13 = getelementptr inbounds [53 x i32], [53 x i32]* @svr4_dbx_register_map, i32 0, i64 %idxprom12
  %13 = load i32, i32* %arrayidx13, align 4
  br label %cond.end.14

cond.end.14:                                      ; preds = %cond.false.11, %cond.true.8
  %cond15 = phi i32 [ %11, %cond.true.8 ], [ %13, %cond.false.11 ]
  %14 = load i32, i32* %mode, align 4
  %idxprom16 = sext i32 %14 to i64
  %arrayidx17 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom16
  %15 = load i8, i8* %arrayidx17, align 1
  %conv = zext i8 %15 to i32
  %mul = mul nsw i32 %cond15, %conv
  %conv18 = sext i32 %mul to i64
  store i64 %conv18, i64* %offset, align 8
  %16 = load i32, i32* %i, align 4
  %idxprom19 = sext i32 %16 to i64
  %arrayidx20 = getelementptr inbounds [53 x i32], [53 x i32]* @reg_raw_mode, i32 0, i64 %idxprom19
  %17 = load i32, i32* %arrayidx20, align 4
  %idxprom21 = sext i32 %17 to i64
  %arrayidx22 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom21
  %18 = load i8, i8* %arrayidx22, align 1
  %conv23 = zext i8 %18 to i64
  store i64 %conv23, i64* %size, align 8
  %19 = load i64, i64* %offset, align 8
  %cmp24 = icmp slt i64 %19, 0
  br i1 %cmp24, label %if.then.26, label %if.end

if.then.26:                                       ; preds = %cond.end.14
  br label %for.inc

if.end:                                           ; preds = %cond.end.14
  %20 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8
  %21 = load i32, i32* %mode, align 4
  %22 = load i64, i64* %offset, align 8
  %call27 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %20, i32 %21, i64 %22, i32 1, i32 1)
  %23 = load i64, i64* %size, align 8
  %call28 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %23)
  %call29 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call27, %struct.rtx_def* %call28)
  br label %if.end.30

if.end.30:                                        ; preds = %if.end, %cond.end
  br label %for.inc

for.inc:                                          ; preds = %if.end.30, %if.then.26
  %24 = load i32, i32* %i, align 4
  %inc = add nsw i32 %24, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare %struct.rtx_def* @expand_expr(%union.tree_node*, %struct.rtx_def*, i32, i32) #1

declare %struct.rtx_def* @gen_rtx_MEM(i32, %struct.rtx_def*) #1

declare %struct.rtx_def* @emit_move_insn(%struct.rtx_def*, %struct.rtx_def*) #1

declare %struct.rtx_def* @adjust_address_1(%struct.rtx_def*, i32, i64, i32, i32) #1

; Function Attrs: nounwind uwtable
define i8* @dwarf2out_cfi_label() #0 {
entry:
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load i64, i64* @dwarf2out_cfi_label.label_num, align 8
  %inc = add i64 %0, 1
  store i64 %inc, i64* @dwarf2out_cfi_label.label_num, align 8
  %conv = trunc i64 %0 to i32
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @dwarf2out_cfi_label.label, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0), i32 %conv) #5
  br label %do.end

do.end:                                           ; preds = %do.body
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8
  call void @assemble_name(%struct._IO_FILE* %1, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @dwarf2out_cfi_label.label, i32 0, i32 0))
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8
  %call1 = call i32 @fputs(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), %struct._IO_FILE* %2)
  ret i8* getelementptr inbounds ([20 x i8], [20 x i8]* @dwarf2out_cfi_label.label, i32 0, i32 0)
}

; Function Attrs: nounwind
declare i32 @sprintf(i8*, i8*, ...) #2

declare void @assemble_name(%struct._IO_FILE*, i8*) #1

declare i32 @fputs(i8*, %struct._IO_FILE*) #1

; Function Attrs: nounwind uwtable
define void @dwarf2out_def_cfa(i8* %label, i32 %reg, i64 %offset) #0 {
entry:
  %label.addr = alloca i8*, align 8
  %reg.addr = alloca i32, align 4
  %offset.addr = alloca i64, align 8
  %loc = alloca %struct.cfa_loc, align 8
  store i8* %label, i8** %label.addr, align 8
  store i32 %reg, i32* %reg.addr, align 4
  store i64 %offset, i64* %offset.addr, align 8
  %indirect = getelementptr inbounds %struct.cfa_loc, %struct.cfa_loc* %loc, i32 0, i32 3
  store i32 0, i32* %indirect, align 4
  %base_offset = getelementptr inbounds %struct.cfa_loc, %struct.cfa_loc* %loc, i32 0, i32 2
  store i64 0, i64* %base_offset, align 8
  %0 = load i32, i32* %reg.addr, align 4
  %conv = zext i32 %0 to i64
  %reg1 = getelementptr inbounds %struct.cfa_loc, %struct.cfa_loc* %loc, i32 0, i32 0
  store i64 %conv, i64* %reg1, align 8
  %1 = load i64, i64* %offset.addr, align 8
  %offset2 = getelementptr inbounds %struct.cfa_loc, %struct.cfa_loc* %loc, i32 0, i32 1
  store i64 %1, i64* %offset2, align 8
  %2 = load i8*, i8** %label.addr, align 8
  call void @def_cfa_1(i8* %2, %struct.cfa_loc* %loc)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @def_cfa_1(i8* %label, %struct.cfa_loc* %loc_p) #0 {
entry:
  %label.addr = alloca i8*, align 8
  %loc_p.addr = alloca %struct.cfa_loc*, align 8
  %cfi = alloca %struct.dw_cfi_struct*, align 8
  %old_cfa = alloca %struct.cfa_loc, align 8
  %loc = alloca %struct.cfa_loc, align 8
  %loc_list = alloca %struct.dw_loc_descr_struct*, align 8
  store i8* %label, i8** %label.addr, align 8
  store %struct.cfa_loc* %loc_p, %struct.cfa_loc** %loc_p.addr, align 8
  %0 = load %struct.cfa_loc*, %struct.cfa_loc** %loc_p.addr, align 8
  %1 = bitcast %struct.cfa_loc* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* bitcast (%struct.cfa_loc* @cfa to i8*), i8* %1, i64 32, i32 8, i1 false)
  %2 = load %struct.cfa_loc*, %struct.cfa_loc** %loc_p.addr, align 8
  %3 = bitcast %struct.cfa_loc* %loc to i8*
  %4 = bitcast %struct.cfa_loc* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %3, i8* %4, i64 32, i32 8, i1 false)
  %5 = load i64, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa_store, i32 0, i32 0), align 8
  %reg = getelementptr inbounds %struct.cfa_loc, %struct.cfa_loc* %loc, i32 0, i32 0
  %6 = load i64, i64* %reg, align 8
  %cmp = icmp eq i64 %5, %6
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %indirect = getelementptr inbounds %struct.cfa_loc, %struct.cfa_loc* %loc, i32 0, i32 3
  %7 = load i32, i32* %indirect, align 4
  %cmp1 = icmp eq i32 %7, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %offset = getelementptr inbounds %struct.cfa_loc, %struct.cfa_loc* %loc, i32 0, i32 1
  %8 = load i64, i64* %offset, align 8
  store i64 %8, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa_store, i32 0, i32 1), align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %9 = load i32, i32* @target_flags, align 4
  %and = and i32 %9, 33554432
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %reg2 = getelementptr inbounds %struct.cfa_loc, %struct.cfa_loc* %loc, i32 0, i32 0
  %10 = load i64, i64* %reg2, align 8
  %arrayidx = getelementptr inbounds [53 x i32], [53 x i32]* @dbx64_register_map, i32 0, i64 %10
  %11 = load i32, i32* %arrayidx, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %reg3 = getelementptr inbounds %struct.cfa_loc, %struct.cfa_loc* %loc, i32 0, i32 0
  %12 = load i64, i64* %reg3, align 8
  %arrayidx4 = getelementptr inbounds [53 x i32], [53 x i32]* @svr4_dbx_register_map, i32 0, i64 %12
  %13 = load i32, i32* %arrayidx4, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %11, %cond.true ], [ %13, %cond.false ]
  %conv = sext i32 %cond to i64
  %reg5 = getelementptr inbounds %struct.cfa_loc, %struct.cfa_loc* %loc, i32 0, i32 0
  store i64 %conv, i64* %reg5, align 8
  call void @lookup_cfa(%struct.cfa_loc* %old_cfa)
  %reg6 = getelementptr inbounds %struct.cfa_loc, %struct.cfa_loc* %loc, i32 0, i32 0
  %14 = load i64, i64* %reg6, align 8
  %reg7 = getelementptr inbounds %struct.cfa_loc, %struct.cfa_loc* %old_cfa, i32 0, i32 0
  %15 = load i64, i64* %reg7, align 8
  %cmp8 = icmp eq i64 %14, %15
  br i1 %cmp8, label %land.lhs.true.10, label %if.end.28

land.lhs.true.10:                                 ; preds = %cond.end
  %offset11 = getelementptr inbounds %struct.cfa_loc, %struct.cfa_loc* %loc, i32 0, i32 1
  %16 = load i64, i64* %offset11, align 8
  %offset12 = getelementptr inbounds %struct.cfa_loc, %struct.cfa_loc* %old_cfa, i32 0, i32 1
  %17 = load i64, i64* %offset12, align 8
  %cmp13 = icmp eq i64 %16, %17
  br i1 %cmp13, label %land.lhs.true.15, label %if.end.28

land.lhs.true.15:                                 ; preds = %land.lhs.true.10
  %indirect16 = getelementptr inbounds %struct.cfa_loc, %struct.cfa_loc* %loc, i32 0, i32 3
  %18 = load i32, i32* %indirect16, align 4
  %indirect17 = getelementptr inbounds %struct.cfa_loc, %struct.cfa_loc* %old_cfa, i32 0, i32 3
  %19 = load i32, i32* %indirect17, align 4
  %cmp18 = icmp eq i32 %18, %19
  br i1 %cmp18, label %land.lhs.true.20, label %if.end.28

land.lhs.true.20:                                 ; preds = %land.lhs.true.15
  %indirect21 = getelementptr inbounds %struct.cfa_loc, %struct.cfa_loc* %loc, i32 0, i32 3
  %20 = load i32, i32* %indirect21, align 4
  %cmp22 = icmp eq i32 %20, 0
  br i1 %cmp22, label %if.then.27, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.20
  %base_offset = getelementptr inbounds %struct.cfa_loc, %struct.cfa_loc* %loc, i32 0, i32 2
  %21 = load i64, i64* %base_offset, align 8
  %base_offset24 = getelementptr inbounds %struct.cfa_loc, %struct.cfa_loc* %old_cfa, i32 0, i32 2
  %22 = load i64, i64* %base_offset24, align 8
  %cmp25 = icmp eq i64 %21, %22
  br i1 %cmp25, label %if.then.27, label %if.end.28

if.then.27:                                       ; preds = %lor.lhs.false, %land.lhs.true.20
  br label %return

if.end.28:                                        ; preds = %lor.lhs.false, %land.lhs.true.15, %land.lhs.true.10, %cond.end
  %call = call %struct.dw_cfi_struct* @new_cfi()
  store %struct.dw_cfi_struct* %call, %struct.dw_cfi_struct** %cfi, align 8
  %reg29 = getelementptr inbounds %struct.cfa_loc, %struct.cfa_loc* %loc, i32 0, i32 0
  %23 = load i64, i64* %reg29, align 8
  %reg30 = getelementptr inbounds %struct.cfa_loc, %struct.cfa_loc* %old_cfa, i32 0, i32 0
  %24 = load i64, i64* %reg30, align 8
  %cmp31 = icmp eq i64 %23, %24
  br i1 %cmp31, label %land.lhs.true.33, label %if.else

land.lhs.true.33:                                 ; preds = %if.end.28
  %indirect34 = getelementptr inbounds %struct.cfa_loc, %struct.cfa_loc* %loc, i32 0, i32 3
  %25 = load i32, i32* %indirect34, align 4
  %tobool35 = icmp ne i32 %25, 0
  br i1 %tobool35, label %if.else, label %if.then.36

if.then.36:                                       ; preds = %land.lhs.true.33
  %26 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi, align 8
  %dw_cfi_opc = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %26, i32 0, i32 1
  store i32 14, i32* %dw_cfi_opc, align 4
  %offset37 = getelementptr inbounds %struct.cfa_loc, %struct.cfa_loc* %loc, i32 0, i32 1
  %27 = load i64, i64* %offset37, align 8
  %28 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi, align 8
  %dw_cfi_oprnd1 = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %28, i32 0, i32 2
  %dw_cfi_offset = bitcast %union.dw_cfi_oprnd_struct* %dw_cfi_oprnd1 to i64*
  store i64 %27, i64* %dw_cfi_offset, align 8
  br label %if.end.70

if.else:                                          ; preds = %land.lhs.true.33, %if.end.28
  %offset38 = getelementptr inbounds %struct.cfa_loc, %struct.cfa_loc* %loc, i32 0, i32 1
  %29 = load i64, i64* %offset38, align 8
  %offset39 = getelementptr inbounds %struct.cfa_loc, %struct.cfa_loc* %old_cfa, i32 0, i32 1
  %30 = load i64, i64* %offset39, align 8
  %cmp40 = icmp eq i64 %29, %30
  br i1 %cmp40, label %land.lhs.true.42, label %if.else.53

land.lhs.true.42:                                 ; preds = %if.else
  %reg43 = getelementptr inbounds %struct.cfa_loc, %struct.cfa_loc* %old_cfa, i32 0, i32 0
  %31 = load i64, i64* %reg43, align 8
  %cmp44 = icmp ne i64 %31, -1
  br i1 %cmp44, label %land.lhs.true.46, label %if.else.53

land.lhs.true.46:                                 ; preds = %land.lhs.true.42
  %indirect47 = getelementptr inbounds %struct.cfa_loc, %struct.cfa_loc* %loc, i32 0, i32 3
  %32 = load i32, i32* %indirect47, align 4
  %tobool48 = icmp ne i32 %32, 0
  br i1 %tobool48, label %if.else.53, label %if.then.49

if.then.49:                                       ; preds = %land.lhs.true.46
  %33 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi, align 8
  %dw_cfi_opc50 = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %33, i32 0, i32 1
  store i32 13, i32* %dw_cfi_opc50, align 4
  %reg51 = getelementptr inbounds %struct.cfa_loc, %struct.cfa_loc* %loc, i32 0, i32 0
  %34 = load i64, i64* %reg51, align 8
  %35 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi, align 8
  %dw_cfi_oprnd152 = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %35, i32 0, i32 2
  %dw_cfi_reg_num = bitcast %union.dw_cfi_oprnd_struct* %dw_cfi_oprnd152 to i64*
  store i64 %34, i64* %dw_cfi_reg_num, align 8
  br label %if.end.69

if.else.53:                                       ; preds = %land.lhs.true.46, %land.lhs.true.42, %if.else
  %indirect54 = getelementptr inbounds %struct.cfa_loc, %struct.cfa_loc* %loc, i32 0, i32 3
  %36 = load i32, i32* %indirect54, align 4
  %cmp55 = icmp eq i32 %36, 0
  br i1 %cmp55, label %if.then.57, label %if.else.64

if.then.57:                                       ; preds = %if.else.53
  %37 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi, align 8
  %dw_cfi_opc58 = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %37, i32 0, i32 1
  store i32 12, i32* %dw_cfi_opc58, align 4
  %reg59 = getelementptr inbounds %struct.cfa_loc, %struct.cfa_loc* %loc, i32 0, i32 0
  %38 = load i64, i64* %reg59, align 8
  %39 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi, align 8
  %dw_cfi_oprnd160 = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %39, i32 0, i32 2
  %dw_cfi_reg_num61 = bitcast %union.dw_cfi_oprnd_struct* %dw_cfi_oprnd160 to i64*
  store i64 %38, i64* %dw_cfi_reg_num61, align 8
  %offset62 = getelementptr inbounds %struct.cfa_loc, %struct.cfa_loc* %loc, i32 0, i32 1
  %40 = load i64, i64* %offset62, align 8
  %41 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi, align 8
  %dw_cfi_oprnd2 = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %41, i32 0, i32 3
  %dw_cfi_offset63 = bitcast %union.dw_cfi_oprnd_struct* %dw_cfi_oprnd2 to i64*
  store i64 %40, i64* %dw_cfi_offset63, align 8
  br label %if.end.68

if.else.64:                                       ; preds = %if.else.53
  %42 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi, align 8
  %dw_cfi_opc65 = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %42, i32 0, i32 1
  store i32 15, i32* %dw_cfi_opc65, align 4
  %call66 = call %struct.dw_loc_descr_struct* @build_cfa_loc(%struct.cfa_loc* %loc)
  store %struct.dw_loc_descr_struct* %call66, %struct.dw_loc_descr_struct** %loc_list, align 8
  %43 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %loc_list, align 8
  %44 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi, align 8
  %dw_cfi_oprnd167 = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %44, i32 0, i32 2
  %dw_cfi_loc = bitcast %union.dw_cfi_oprnd_struct* %dw_cfi_oprnd167 to %struct.dw_loc_descr_struct**
  store %struct.dw_loc_descr_struct* %43, %struct.dw_loc_descr_struct** %dw_cfi_loc, align 8
  br label %if.end.68

if.end.68:                                        ; preds = %if.else.64, %if.then.57
  br label %if.end.69

if.end.69:                                        ; preds = %if.end.68, %if.then.49
  br label %if.end.70

if.end.70:                                        ; preds = %if.end.69, %if.then.36
  %45 = load i8*, i8** %label.addr, align 8
  %46 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi, align 8
  call void @add_fde_cfi(i8* %45, %struct.dw_cfi_struct* %46)
  br label %return

return:                                           ; preds = %if.end.70, %if.then.27
  ret void
}

; Function Attrs: nounwind uwtable
define void @dwarf2out_window_save(i8* %label) #0 {
entry:
  %label.addr = alloca i8*, align 8
  %cfi = alloca %struct.dw_cfi_struct*, align 8
  store i8* %label, i8** %label.addr, align 8
  %call = call %struct.dw_cfi_struct* @new_cfi()
  store %struct.dw_cfi_struct* %call, %struct.dw_cfi_struct** %cfi, align 8
  %0 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi, align 8
  %dw_cfi_opc = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %0, i32 0, i32 1
  store i32 45, i32* %dw_cfi_opc, align 4
  %1 = load i8*, i8** %label.addr, align 8
  %2 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi, align 8
  call void @add_fde_cfi(i8* %1, %struct.dw_cfi_struct* %2)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal %struct.dw_cfi_struct* @new_cfi() #3 {
entry:
  %cfi = alloca %struct.dw_cfi_struct*, align 8
  %call = call noalias i8* @xmalloc(i64 32)
  %0 = bitcast i8* %call to %struct.dw_cfi_struct*
  store %struct.dw_cfi_struct* %0, %struct.dw_cfi_struct** %cfi, align 8
  %1 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi, align 8
  %dw_cfi_next = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %1, i32 0, i32 0
  store %struct.dw_cfi_struct* null, %struct.dw_cfi_struct** %dw_cfi_next, align 8
  %2 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi, align 8
  %dw_cfi_oprnd1 = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %2, i32 0, i32 2
  %dw_cfi_reg_num = bitcast %union.dw_cfi_oprnd_struct* %dw_cfi_oprnd1 to i64*
  store i64 0, i64* %dw_cfi_reg_num, align 8
  %3 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi, align 8
  %dw_cfi_oprnd2 = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %3, i32 0, i32 3
  %dw_cfi_reg_num1 = bitcast %union.dw_cfi_oprnd_struct* %dw_cfi_oprnd2 to i64*
  store i64 0, i64* %dw_cfi_reg_num1, align 8
  %4 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi, align 8
  ret %struct.dw_cfi_struct* %4
}

; Function Attrs: nounwind uwtable
define internal void @add_fde_cfi(i8* %label, %struct.dw_cfi_struct* %cfi) #0 {
entry:
  %label.addr = alloca i8*, align 8
  %cfi.addr = alloca %struct.dw_cfi_struct*, align 8
  %fde = alloca %struct.dw_fde_struct*, align 8
  %xcfi = alloca %struct.dw_cfi_struct*, align 8
  store i8* %label, i8** %label.addr, align 8
  store %struct.dw_cfi_struct* %cfi, %struct.dw_cfi_struct** %cfi.addr, align 8
  %0 = load i8*, i8** %label.addr, align 8
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @fde_table_in_use, align 4
  %sub = sub i32 %1, 1
  %idxprom = zext i32 %sub to i64
  %2 = load %struct.dw_fde_struct*, %struct.dw_fde_struct** @fde_table, align 8
  %arrayidx = getelementptr inbounds %struct.dw_fde_struct, %struct.dw_fde_struct* %2, i64 %idxprom
  store %struct.dw_fde_struct* %arrayidx, %struct.dw_fde_struct** %fde, align 8
  %3 = load i8*, i8** %label.addr, align 8
  %4 = load i8, i8* %3, align 1
  %conv = sext i8 %4 to i32
  %cmp = icmp eq i32 %conv, 0
  br i1 %cmp, label %if.then.2, label %if.end

if.then.2:                                        ; preds = %if.then
  %call = call i8* @dwarf2out_cfi_label()
  store i8* %call, i8** %label.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.2, %if.then
  %5 = load %struct.dw_fde_struct*, %struct.dw_fde_struct** %fde, align 8
  %dw_fde_current_label = getelementptr inbounds %struct.dw_fde_struct, %struct.dw_fde_struct* %5, i32 0, i32 1
  %6 = load i8*, i8** %dw_fde_current_label, align 8
  %cmp3 = icmp eq i8* %6, null
  br i1 %cmp3, label %if.then.9, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %7 = load i8*, i8** %label.addr, align 8
  %8 = load %struct.dw_fde_struct*, %struct.dw_fde_struct** %fde, align 8
  %dw_fde_current_label5 = getelementptr inbounds %struct.dw_fde_struct, %struct.dw_fde_struct* %8, i32 0, i32 1
  %9 = load i8*, i8** %dw_fde_current_label5, align 8
  %call6 = call i32 @strcmp(i8* %7, i8* %9) #7
  %cmp7 = icmp ne i32 %call6, 0
  br i1 %cmp7, label %if.then.9, label %if.end.13

if.then.9:                                        ; preds = %lor.lhs.false, %if.end
  %10 = load i8*, i8** %label.addr, align 8
  %call10 = call noalias i8* @xstrdup(i8* %10)
  store i8* %call10, i8** %label.addr, align 8
  %11 = load %struct.dw_fde_struct*, %struct.dw_fde_struct** %fde, align 8
  %dw_fde_current_label11 = getelementptr inbounds %struct.dw_fde_struct, %struct.dw_fde_struct* %11, i32 0, i32 1
  store i8* %call10, i8** %dw_fde_current_label11, align 8
  %call12 = call %struct.dw_cfi_struct* @new_cfi()
  store %struct.dw_cfi_struct* %call12, %struct.dw_cfi_struct** %xcfi, align 8
  %12 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %xcfi, align 8
  %dw_cfi_opc = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %12, i32 0, i32 1
  store i32 4, i32* %dw_cfi_opc, align 4
  %13 = load i8*, i8** %label.addr, align 8
  %14 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %xcfi, align 8
  %dw_cfi_oprnd1 = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %14, i32 0, i32 2
  %dw_cfi_addr = bitcast %union.dw_cfi_oprnd_struct* %dw_cfi_oprnd1 to i8**
  store i8* %13, i8** %dw_cfi_addr, align 8
  %15 = load %struct.dw_fde_struct*, %struct.dw_fde_struct** %fde, align 8
  %dw_fde_cfi = getelementptr inbounds %struct.dw_fde_struct, %struct.dw_fde_struct* %15, i32 0, i32 3
  %16 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %xcfi, align 8
  call void @add_cfi(%struct.dw_cfi_struct** %dw_fde_cfi, %struct.dw_cfi_struct* %16)
  br label %if.end.13

if.end.13:                                        ; preds = %if.then.9, %lor.lhs.false
  %17 = load %struct.dw_fde_struct*, %struct.dw_fde_struct** %fde, align 8
  %dw_fde_cfi14 = getelementptr inbounds %struct.dw_fde_struct, %struct.dw_fde_struct* %17, i32 0, i32 3
  %18 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi.addr, align 8
  call void @add_cfi(%struct.dw_cfi_struct** %dw_fde_cfi14, %struct.dw_cfi_struct* %18)
  br label %if.end.15

if.else:                                          ; preds = %entry
  %19 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi.addr, align 8
  call void @add_cfi(%struct.dw_cfi_struct** @cie_cfi_head, %struct.dw_cfi_struct* %19)
  br label %if.end.15

if.end.15:                                        ; preds = %if.else, %if.end.13
  ret void
}

; Function Attrs: nounwind uwtable
define void @dwarf2out_args_size(i8* %label, i64 %size) #0 {
entry:
  %label.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %cfi = alloca %struct.dw_cfi_struct*, align 8
  store i8* %label, i8** %label.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  %0 = load i64, i64* %size.addr, align 8
  %1 = load i64, i64* @old_args_size, align 8
  %cmp = icmp eq i64 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i64, i64* %size.addr, align 8
  store i64 %2, i64* @old_args_size, align 8
  %call = call %struct.dw_cfi_struct* @new_cfi()
  store %struct.dw_cfi_struct* %call, %struct.dw_cfi_struct** %cfi, align 8
  %3 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi, align 8
  %dw_cfi_opc = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %3, i32 0, i32 1
  store i32 46, i32* %dw_cfi_opc, align 4
  %4 = load i64, i64* %size.addr, align 8
  %5 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi, align 8
  %dw_cfi_oprnd1 = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %5, i32 0, i32 2
  %dw_cfi_offset = bitcast %union.dw_cfi_oprnd_struct* %dw_cfi_oprnd1 to i64*
  store i64 %4, i64* %dw_cfi_offset, align 8
  %6 = load i8*, i8** %label.addr, align 8
  %7 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi, align 8
  call void @add_fde_cfi(i8* %6, %struct.dw_cfi_struct* %7)
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define void @dwarf2out_reg_save(i8* %label, i32 %reg, i64 %offset) #0 {
entry:
  %label.addr = alloca i8*, align 8
  %reg.addr = alloca i32, align 4
  %offset.addr = alloca i64, align 8
  store i8* %label, i8** %label.addr, align 8
  store i32 %reg, i32* %reg.addr, align 4
  store i64 %offset, i64* %offset.addr, align 8
  %0 = load i8*, i8** %label.addr, align 8
  %1 = load i32, i32* @target_flags, align 4
  %and = and i32 %1, 33554432
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load i32, i32* %reg.addr, align 4
  %idxprom = zext i32 %2 to i64
  %arrayidx = getelementptr inbounds [53 x i32], [53 x i32]* @dbx64_register_map, i32 0, i64 %idxprom
  %3 = load i32, i32* %arrayidx, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  %4 = load i32, i32* %reg.addr, align 4
  %idxprom1 = zext i32 %4 to i64
  %arrayidx2 = getelementptr inbounds [53 x i32], [53 x i32]* @svr4_dbx_register_map, i32 0, i64 %idxprom1
  %5 = load i32, i32* %arrayidx2, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %3, %cond.true ], [ %5, %cond.false ]
  %6 = load i64, i64* %offset.addr, align 8
  call void @reg_save(i8* %0, i32 %cond, i32 -1, i64 %6)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @reg_save(i8* %label, i32 %reg, i32 %sreg, i64 %offset) #0 {
entry:
  %label.addr = alloca i8*, align 8
  %reg.addr = alloca i32, align 4
  %sreg.addr = alloca i32, align 4
  %offset.addr = alloca i64, align 8
  %cfi = alloca %struct.dw_cfi_struct*, align 8
  store i8* %label, i8** %label.addr, align 8
  store i32 %reg, i32* %reg.addr, align 4
  store i32 %sreg, i32* %sreg.addr, align 4
  store i64 %offset, i64* %offset.addr, align 8
  %call = call %struct.dw_cfi_struct* @new_cfi()
  store %struct.dw_cfi_struct* %call, %struct.dw_cfi_struct** %cfi, align 8
  %0 = load i32, i32* %reg.addr, align 4
  %conv = zext i32 %0 to i64
  %1 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi, align 8
  %dw_cfi_oprnd1 = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %1, i32 0, i32 2
  %dw_cfi_reg_num = bitcast %union.dw_cfi_oprnd_struct* %dw_cfi_oprnd1 to i64*
  store i64 %conv, i64* %dw_cfi_reg_num, align 8
  %2 = load i32, i32* %sreg.addr, align 4
  %cmp = icmp eq i32 %2, -1
  br i1 %cmp, label %if.then, label %if.else.12

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %reg.addr, align 4
  %and = and i32 %3, -64
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then.2, label %if.else

if.then.2:                                        ; preds = %if.then
  %4 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi, align 8
  %dw_cfi_opc = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %4, i32 0, i32 1
  store i32 5, i32* %dw_cfi_opc, align 4
  br label %if.end

if.else:                                          ; preds = %if.then
  %5 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi, align 8
  %dw_cfi_opc3 = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %5, i32 0, i32 1
  store i32 128, i32* %dw_cfi_opc3, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.2
  %6 = load i32, i32* @target_flags, align 4
  %and4 = and i32 %6, 33554432
  %tobool5 = icmp ne i32 %and4, 0
  %cond = select i1 %tobool5, i32 8, i32 4
  %sub = sub nsw i32 0, %cond
  %conv6 = sext i32 %sub to i64
  %7 = load i64, i64* %offset.addr, align 8
  %div = sdiv i64 %7, %conv6
  store i64 %div, i64* %offset.addr, align 8
  %8 = load i64, i64* %offset.addr, align 8
  %cmp7 = icmp slt i64 %8, 0
  br i1 %cmp7, label %if.then.9, label %if.end.11

if.then.9:                                        ; preds = %if.end
  %9 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi, align 8
  %dw_cfi_opc10 = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %9, i32 0, i32 1
  store i32 17, i32* %dw_cfi_opc10, align 4
  br label %if.end.11

if.end.11:                                        ; preds = %if.then.9, %if.end
  %10 = load i64, i64* %offset.addr, align 8
  %11 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi, align 8
  %dw_cfi_oprnd2 = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %11, i32 0, i32 3
  %dw_cfi_offset = bitcast %union.dw_cfi_oprnd_struct* %dw_cfi_oprnd2 to i64*
  store i64 %10, i64* %dw_cfi_offset, align 8
  br label %if.end.22

if.else.12:                                       ; preds = %entry
  %12 = load i32, i32* %sreg.addr, align 4
  %13 = load i32, i32* %reg.addr, align 4
  %cmp13 = icmp eq i32 %12, %13
  br i1 %cmp13, label %if.then.15, label %if.else.16

if.then.15:                                       ; preds = %if.else.12
  br label %return

if.else.16:                                       ; preds = %if.else.12
  %14 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi, align 8
  %dw_cfi_opc17 = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %14, i32 0, i32 1
  store i32 9, i32* %dw_cfi_opc17, align 4
  %15 = load i32, i32* %sreg.addr, align 4
  %conv18 = zext i32 %15 to i64
  %16 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi, align 8
  %dw_cfi_oprnd219 = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %16, i32 0, i32 3
  %dw_cfi_reg_num20 = bitcast %union.dw_cfi_oprnd_struct* %dw_cfi_oprnd219 to i64*
  store i64 %conv18, i64* %dw_cfi_reg_num20, align 8
  br label %if.end.21

if.end.21:                                        ; preds = %if.else.16
  br label %if.end.22

if.end.22:                                        ; preds = %if.end.21, %if.end.11
  %17 = load i8*, i8** %label.addr, align 8
  %18 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi, align 8
  call void @add_fde_cfi(i8* %17, %struct.dw_cfi_struct* %18)
  br label %return

return:                                           ; preds = %if.end.22, %if.then.15
  ret void
}

; Function Attrs: nounwind uwtable
define void @dwarf2out_return_save(i8* %label, i64 %offset) #0 {
entry:
  %label.addr = alloca i8*, align 8
  %offset.addr = alloca i64, align 8
  store i8* %label, i8** %label.addr, align 8
  store i64 %offset, i64* %offset.addr, align 8
  %0 = load i8*, i8** %label.addr, align 8
  %1 = load i32, i32* @target_flags, align 4
  %and = and i32 %1, 33554432
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, i32 16, i32 8
  %2 = load i64, i64* %offset.addr, align 8
  call void @reg_save(i8* %0, i32 %cond, i32 -1, i64 %2)
  ret void
}

; Function Attrs: nounwind uwtable
define void @dwarf2out_return_reg(i8* %label, i32 %sreg) #0 {
entry:
  %label.addr = alloca i8*, align 8
  %sreg.addr = alloca i32, align 4
  store i8* %label, i8** %label.addr, align 8
  store i32 %sreg, i32* %sreg.addr, align 4
  %0 = load i8*, i8** %label.addr, align 8
  %1 = load i32, i32* @target_flags, align 4
  %and = and i32 %1, 33554432
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, i32 16, i32 8
  %2 = load i32, i32* %sreg.addr, align 4
  call void @reg_save(i8* %0, i32 %cond, i32 %2, i64 0)
  ret void
}

; Function Attrs: nounwind uwtable
define void @dwarf2out_frame_debug(%struct.rtx_def* %insn) #0 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %label = alloca i8*, align 8
  %src = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %cmp = icmp eq %struct.rtx_def* %0, null
  br i1 %cmp, label %if.then, label %if.end.4

if.then:                                          ; preds = %entry
  call void @flush_queued_reg_saves()
  call void @lookup_cfa(%struct.cfa_loc* @cfa)
  %1 = load i64, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa, i32 0, i32 0), align 8
  %2 = load i32, i32* @target_flags, align 4
  %and = and i32 %2, 33554432
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %3 = load i32, i32* getelementptr inbounds ([53 x i32], [53 x i32]* @dbx64_register_map, i32 0, i64 7), align 4
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %4 = load i32, i32* getelementptr inbounds ([53 x i32], [53 x i32]* @svr4_dbx_register_map, i32 0, i64 7), align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %3, %cond.true ], [ %4, %cond.false ]
  %conv = sext i32 %cond to i64
  %cmp1 = icmp ne i64 %1, %conv
  br i1 %cmp1, label %if.then.3, label %if.end

if.then.3:                                        ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 1626, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @__FUNCTION__.dwarf2out_frame_debug, i32 0, i32 0)) #8
  unreachable

if.end:                                           ; preds = %cond.end
  store i64 7, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa, i32 0, i32 0), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* bitcast (%struct.cfa_loc* @cfa_store to i8*), i8* bitcast (%struct.cfa_loc* @cfa to i8*), i64 32, i32 8, i1 false)
  store i64 -1, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa_temp, i32 0, i32 0), align 8
  store i64 0, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa_temp, i32 0, i32 1), align 8
  br label %return

if.end.4:                                         ; preds = %entry
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %6 = bitcast %struct.rtx_def* %5 to i32*
  %bf.load = load i32, i32* %6, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp5 = icmp ne i32 %bf.clear, 32
  br i1 %cmp5, label %if.then.8, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.4
  %7 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call = call zeroext i1 @clobbers_queued_reg_save(%struct.rtx_def* %7)
  br i1 %call, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %lor.lhs.false, %if.end.4
  call void @flush_queued_reg_saves()
  br label %if.end.9

if.end.9:                                         ; preds = %if.then.8, %lor.lhs.false
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %9 = bitcast %struct.rtx_def* %8 to i32*
  %bf.load10 = load i32, i32* %9, align 8
  %bf.lshr = lshr i32 %bf.load10, 31
  %tobool11 = icmp ne i32 %bf.lshr, 0
  br i1 %tobool11, label %if.end.17, label %if.then.12

if.then.12:                                       ; preds = %if.end.9
  %10 = load i32, i32* @target_flags, align 4
  %and13 = and i32 %10, 4096
  %tobool14 = icmp ne i32 %and13, 0
  br i1 %tobool14, label %if.end.16, label %if.then.15

if.then.15:                                       ; preds = %if.then.12
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  call void @dwarf2out_stack_adjust(%struct.rtx_def* %11)
  br label %if.end.16

if.end.16:                                        ; preds = %if.then.15, %if.then.12
  br label %return

if.end.17:                                        ; preds = %if.end.9
  %call18 = call i8* @dwarf2out_cfi_label()
  store i8* %call18, i8** %label, align 8
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call19 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %12, i32 21, %struct.rtx_def* null)
  store %struct.rtx_def* %call19, %struct.rtx_def** %src, align 8
  %13 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %tobool20 = icmp ne %struct.rtx_def* %13, null
  br i1 %tobool20, label %if.then.21, label %if.else

if.then.21:                                       ; preds = %if.end.17
  %14 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %15, %struct.rtx_def** %insn.addr, align 8
  br label %if.end.25

if.else:                                          ; preds = %if.end.17
  %16 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld22 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1
  %arrayidx23 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld22, i32 0, i64 3
  %rtx24 = bitcast %union.rtunion_def* %arrayidx23 to %struct.rtx_def**
  %17 = load %struct.rtx_def*, %struct.rtx_def** %rtx24, align 8
  store %struct.rtx_def* %17, %struct.rtx_def** %insn.addr, align 8
  br label %if.end.25

if.end.25:                                        ; preds = %if.else, %if.then.21
  %18 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %19 = load i8*, i8** %label, align 8
  call void @dwarf2out_frame_debug_expr(%struct.rtx_def* %18, i8* %19)
  br label %return

return:                                           ; preds = %if.end.25, %if.end.16, %if.end
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @flush_queued_reg_saves() #0 {
entry:
  %q = alloca %struct.queued_reg_save*, align 8
  %next = alloca %struct.queued_reg_save*, align 8
  %0 = load %struct.queued_reg_save*, %struct.queued_reg_save** @queued_reg_saves, align 8
  store %struct.queued_reg_save* %0, %struct.queued_reg_save** %q, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.queued_reg_save*, %struct.queued_reg_save** %q, align 8
  %tobool = icmp ne %struct.queued_reg_save* %1, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8*, i8** @last_reg_save_label, align 8
  %3 = load %struct.queued_reg_save*, %struct.queued_reg_save** %q, align 8
  %reg = getelementptr inbounds %struct.queued_reg_save, %struct.queued_reg_save* %3, i32 0, i32 1
  %4 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx to i32*
  %5 = load i32, i32* %rtuint, align 4
  %6 = load %struct.queued_reg_save*, %struct.queued_reg_save** %q, align 8
  %cfa_offset = getelementptr inbounds %struct.queued_reg_save, %struct.queued_reg_save* %6, i32 0, i32 2
  %7 = load i64, i64* %cfa_offset, align 8
  call void @dwarf2out_reg_save(i8* %2, i32 %5, i64 %7)
  %8 = load %struct.queued_reg_save*, %struct.queued_reg_save** %q, align 8
  %next1 = getelementptr inbounds %struct.queued_reg_save, %struct.queued_reg_save* %8, i32 0, i32 0
  %9 = load %struct.queued_reg_save*, %struct.queued_reg_save** %next1, align 8
  store %struct.queued_reg_save* %9, %struct.queued_reg_save** %next, align 8
  %10 = load %struct.queued_reg_save*, %struct.queued_reg_save** %q, align 8
  %11 = bitcast %struct.queued_reg_save* %10 to i8*
  call void @free(i8* %11) #5
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %12 = load %struct.queued_reg_save*, %struct.queued_reg_save** %next, align 8
  store %struct.queued_reg_save* %12, %struct.queued_reg_save** %q, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store %struct.queued_reg_save* null, %struct.queued_reg_save** @queued_reg_saves, align 8
  store i8* null, i8** @last_reg_save_label, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @lookup_cfa(%struct.cfa_loc* %loc) #0 {
entry:
  %loc.addr = alloca %struct.cfa_loc*, align 8
  %cfi = alloca %struct.dw_cfi_struct*, align 8
  %fde = alloca %struct.dw_fde_struct*, align 8
  store %struct.cfa_loc* %loc, %struct.cfa_loc** %loc.addr, align 8
  %0 = load %struct.cfa_loc*, %struct.cfa_loc** %loc.addr, align 8
  %reg = getelementptr inbounds %struct.cfa_loc, %struct.cfa_loc* %0, i32 0, i32 0
  store i64 -1, i64* %reg, align 8
  %1 = load %struct.cfa_loc*, %struct.cfa_loc** %loc.addr, align 8
  %offset = getelementptr inbounds %struct.cfa_loc, %struct.cfa_loc* %1, i32 0, i32 1
  store i64 0, i64* %offset, align 8
  %2 = load %struct.cfa_loc*, %struct.cfa_loc** %loc.addr, align 8
  %indirect = getelementptr inbounds %struct.cfa_loc, %struct.cfa_loc* %2, i32 0, i32 3
  store i32 0, i32* %indirect, align 4
  %3 = load %struct.cfa_loc*, %struct.cfa_loc** %loc.addr, align 8
  %base_offset = getelementptr inbounds %struct.cfa_loc, %struct.cfa_loc* %3, i32 0, i32 2
  store i64 0, i64* %base_offset, align 8
  %4 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** @cie_cfi_head, align 8
  store %struct.dw_cfi_struct* %4, %struct.dw_cfi_struct** %cfi, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi, align 8
  %tobool = icmp ne %struct.dw_cfi_struct* %5, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi, align 8
  %7 = load %struct.cfa_loc*, %struct.cfa_loc** %loc.addr, align 8
  call void @lookup_cfa_1(%struct.dw_cfi_struct* %6, %struct.cfa_loc* %7)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi, align 8
  %dw_cfi_next = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %8, i32 0, i32 0
  %9 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %dw_cfi_next, align 8
  store %struct.dw_cfi_struct* %9, %struct.dw_cfi_struct** %cfi, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load i32, i32* @fde_table_in_use, align 4
  %tobool1 = icmp ne i32 %10, 0
  br i1 %tobool1, label %if.then, label %if.end

if.then:                                          ; preds = %for.end
  %11 = load i32, i32* @fde_table_in_use, align 4
  %sub = sub i32 %11, 1
  %idxprom = zext i32 %sub to i64
  %12 = load %struct.dw_fde_struct*, %struct.dw_fde_struct** @fde_table, align 8
  %arrayidx = getelementptr inbounds %struct.dw_fde_struct, %struct.dw_fde_struct* %12, i64 %idxprom
  store %struct.dw_fde_struct* %arrayidx, %struct.dw_fde_struct** %fde, align 8
  %13 = load %struct.dw_fde_struct*, %struct.dw_fde_struct** %fde, align 8
  %dw_fde_cfi = getelementptr inbounds %struct.dw_fde_struct, %struct.dw_fde_struct* %13, i32 0, i32 3
  %14 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %dw_fde_cfi, align 8
  store %struct.dw_cfi_struct* %14, %struct.dw_cfi_struct** %cfi, align 8
  br label %for.cond.2

for.cond.2:                                       ; preds = %for.inc.5, %if.then
  %15 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi, align 8
  %tobool3 = icmp ne %struct.dw_cfi_struct* %15, null
  br i1 %tobool3, label %for.body.4, label %for.end.7

for.body.4:                                       ; preds = %for.cond.2
  %16 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi, align 8
  %17 = load %struct.cfa_loc*, %struct.cfa_loc** %loc.addr, align 8
  call void @lookup_cfa_1(%struct.dw_cfi_struct* %16, %struct.cfa_loc* %17)
  br label %for.inc.5

for.inc.5:                                        ; preds = %for.body.4
  %18 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi, align 8
  %dw_cfi_next6 = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %18, i32 0, i32 0
  %19 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %dw_cfi_next6, align 8
  store %struct.dw_cfi_struct* %19, %struct.dw_cfi_struct** %cfi, align 8
  br label %for.cond.2

for.end.7:                                        ; preds = %for.cond.2
  br label %if.end

if.end:                                           ; preds = %for.end.7, %for.end
  ret void
}

; Function Attrs: noreturn
declare void @fancy_abort(i8*, i32, i8*) #4

; Function Attrs: nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #5

; Function Attrs: nounwind uwtable
define internal zeroext i1 @clobbers_queued_reg_save(%struct.rtx_def* %insn) #0 {
entry:
  %retval = alloca i1, align 1
  %insn.addr = alloca %struct.rtx_def*, align 8
  %q = alloca %struct.queued_reg_save*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  %0 = load %struct.queued_reg_save*, %struct.queued_reg_save** @queued_reg_saves, align 8
  store %struct.queued_reg_save* %0, %struct.queued_reg_save** %q, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.queued_reg_save*, %struct.queued_reg_save** %q, align 8
  %tobool = icmp ne %struct.queued_reg_save* %1, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load %struct.queued_reg_save*, %struct.queued_reg_save** %q, align 8
  %reg = getelementptr inbounds %struct.queued_reg_save, %struct.queued_reg_save* %2, i32 0, i32 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call = call i32 @modified_in_p(%struct.rtx_def* %3, %struct.rtx_def* %4)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i1 true, i1* %retval
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %5 = load %struct.queued_reg_save*, %struct.queued_reg_save** %q, align 8
  %next = getelementptr inbounds %struct.queued_reg_save, %struct.queued_reg_save* %5, i32 0, i32 0
  %6 = load %struct.queued_reg_save*, %struct.queued_reg_save** %next, align 8
  store %struct.queued_reg_save* %6, %struct.queued_reg_save** %q, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i1 false, i1* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then
  %7 = load i1, i1* %retval
  ret i1 %7
}

; Function Attrs: nounwind uwtable
define internal void @dwarf2out_stack_adjust(%struct.rtx_def* %insn) #0 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %offset = alloca i64, align 8
  %label = alloca i8*, align 8
  %i = alloca i32, align 4
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  %0 = load i32, i32* @flag_asynchronous_unwind_tables, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.else, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load = load i32, i32* %2, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 34
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %4 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %insn.addr, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %6 = bitcast %struct.rtx_def* %5 to i32*
  %bf.load1 = load i32, i32* %6, align 8
  %bf.clear2 = and i32 %bf.load1, 65535
  %cmp3 = icmp eq i32 %bf.clear2, 39
  br i1 %cmp3, label %if.then.4, label %if.end

if.then.4:                                        ; preds = %if.then
  %7 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld5 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1
  %arrayidx6 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld5, i32 0, i64 0
  %rtvec = bitcast %union.rtunion_def* %arrayidx6 to %struct.rtvec_def**
  %8 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec, align 8
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %8, i32 0, i32 1
  %arrayidx7 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i32 0, i64 0
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx7, align 8
  store %struct.rtx_def* %9, %struct.rtx_def** %insn.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.4, %if.then
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %11 = bitcast %struct.rtx_def* %10 to i32*
  %bf.load8 = load i32, i32* %11, align 8
  %bf.clear9 = and i32 %bf.load8, 65535
  %cmp10 = icmp eq i32 %bf.clear9, 47
  br i1 %cmp10, label %if.then.11, label %if.end.15

if.then.11:                                       ; preds = %if.end
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld12 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1
  %arrayidx13 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld12, i32 0, i64 1
  %rtx14 = bitcast %union.rtunion_def* %arrayidx13 to %struct.rtx_def**
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rtx14, align 8
  store %struct.rtx_def* %13, %struct.rtx_def** %insn.addr, align 8
  br label %if.end.15

if.end.15:                                        ; preds = %if.then.11, %if.end
  %14 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %15 = bitcast %struct.rtx_def* %14 to i32*
  %bf.load16 = load i32, i32* %15, align 8
  %bf.clear17 = and i32 %bf.load16, 65535
  %cmp18 = icmp ne i32 %bf.clear17, 50
  br i1 %cmp18, label %if.then.19, label %if.end.20

if.then.19:                                       ; preds = %if.end.15
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 1009, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @__FUNCTION__.dwarf2out_stack_adjust, i32 0, i32 0)) #8
  unreachable

if.end.20:                                        ; preds = %if.end.15
  %16 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld21 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1
  %arrayidx22 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld21, i32 0, i64 1
  %rtx23 = bitcast %union.rtunion_def* %arrayidx22 to %struct.rtx_def**
  %17 = load %struct.rtx_def*, %struct.rtx_def** %rtx23, align 8
  %fld24 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1
  %arrayidx25 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld24, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx25 to i64*
  %18 = load i64, i64* %rtwint, align 8
  call void @dwarf2out_args_size(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.155, i32 0, i32 0), i64 %18)
  br label %return

if.else:                                          ; preds = %land.lhs.true, %entry
  %19 = load i32, i32* @flag_asynchronous_unwind_tables, align 4
  %tobool26 = icmp ne i32 %19, 0
  br i1 %tobool26, label %if.end.30, label %land.lhs.true.27

land.lhs.true.27:                                 ; preds = %if.else
  %20 = load i64, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa, i32 0, i32 0), align 8
  %cmp28 = icmp ne i64 %20, 7
  br i1 %cmp28, label %if.then.29, label %if.end.30

if.then.29:                                       ; preds = %land.lhs.true.27
  br label %return

if.end.30:                                        ; preds = %land.lhs.true.27, %if.else
  br label %if.end.31

if.end.31:                                        ; preds = %if.end.30
  %21 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %22 = bitcast %struct.rtx_def* %21 to i32*
  %bf.load32 = load i32, i32* %22, align 8
  %bf.clear33 = and i32 %bf.load32, 65535
  %cmp34 = icmp eq i32 %bf.clear33, 35
  br i1 %cmp34, label %if.then.35, label %if.else.36

if.then.35:                                       ; preds = %if.end.31
  %23 = load i64, i64* @args_size, align 8
  %sub = sub nsw i64 0, %23
  store i64 %sub, i64* %offset, align 8
  br label %if.end.95

if.else.36:                                       ; preds = %if.end.31
  %24 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld37 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1
  %arrayidx38 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld37, i32 0, i64 3
  %rtx39 = bitcast %union.rtunion_def* %arrayidx38 to %struct.rtx_def**
  %25 = load %struct.rtx_def*, %struct.rtx_def** %rtx39, align 8
  %26 = bitcast %struct.rtx_def* %25 to i32*
  %bf.load40 = load i32, i32* %26, align 8
  %bf.clear41 = and i32 %bf.load40, 65535
  %cmp42 = icmp eq i32 %bf.clear41, 47
  br i1 %cmp42, label %if.then.43, label %if.else.47

if.then.43:                                       ; preds = %if.else.36
  %27 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld44 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1
  %arrayidx45 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld44, i32 0, i64 3
  %rtx46 = bitcast %union.rtunion_def* %arrayidx45 to %struct.rtx_def**
  %28 = load %struct.rtx_def*, %struct.rtx_def** %rtx46, align 8
  %call = call i64 @stack_adjust_offset(%struct.rtx_def* %28)
  store i64 %call, i64* %offset, align 8
  br label %if.end.94

if.else.47:                                       ; preds = %if.else.36
  %29 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld48 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %29, i32 0, i32 1
  %arrayidx49 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld48, i32 0, i64 3
  %rtx50 = bitcast %union.rtunion_def* %arrayidx49 to %struct.rtx_def**
  %30 = load %struct.rtx_def*, %struct.rtx_def** %rtx50, align 8
  %31 = bitcast %struct.rtx_def* %30 to i32*
  %bf.load51 = load i32, i32* %31, align 8
  %bf.clear52 = and i32 %bf.load51, 65535
  %cmp53 = icmp eq i32 %bf.clear52, 39
  br i1 %cmp53, label %if.then.60, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else.47
  %32 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld54 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %32, i32 0, i32 1
  %arrayidx55 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld54, i32 0, i64 3
  %rtx56 = bitcast %union.rtunion_def* %arrayidx55 to %struct.rtx_def**
  %33 = load %struct.rtx_def*, %struct.rtx_def** %rtx56, align 8
  %34 = bitcast %struct.rtx_def* %33 to i32*
  %bf.load57 = load i32, i32* %34, align 8
  %bf.clear58 = and i32 %bf.load57, 65535
  %cmp59 = icmp eq i32 %bf.clear58, 24
  br i1 %cmp59, label %if.then.60, label %if.else.92

if.then.60:                                       ; preds = %lor.lhs.false, %if.else.47
  store i64 0, i64* %offset, align 8
  %35 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld61 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %35, i32 0, i32 1
  %arrayidx62 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld61, i32 0, i64 3
  %rtx63 = bitcast %union.rtunion_def* %arrayidx62 to %struct.rtx_def**
  %36 = load %struct.rtx_def*, %struct.rtx_def** %rtx63, align 8
  %fld64 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %36, i32 0, i32 1
  %arrayidx65 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld64, i32 0, i64 0
  %rtvec66 = bitcast %union.rtunion_def* %arrayidx65 to %struct.rtvec_def**
  %37 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec66, align 8
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %37, i32 0, i32 0
  %38 = load i32, i32* %num_elem, align 4
  %sub67 = sub nsw i32 %38, 1
  store i32 %sub67, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.60
  %39 = load i32, i32* %i, align 4
  %cmp68 = icmp sge i32 %39, 0
  br i1 %cmp68, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %40 = load i32, i32* %i, align 4
  %idxprom = sext i32 %40 to i64
  %41 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld69 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %41, i32 0, i32 1
  %arrayidx70 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld69, i32 0, i64 3
  %rtx71 = bitcast %union.rtunion_def* %arrayidx70 to %struct.rtx_def**
  %42 = load %struct.rtx_def*, %struct.rtx_def** %rtx71, align 8
  %fld72 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %42, i32 0, i32 1
  %arrayidx73 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld72, i32 0, i64 0
  %rtvec74 = bitcast %union.rtunion_def* %arrayidx73 to %struct.rtvec_def**
  %43 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec74, align 8
  %elem75 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %43, i32 0, i32 1
  %arrayidx76 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem75, i32 0, i64 %idxprom
  %44 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx76, align 8
  %45 = bitcast %struct.rtx_def* %44 to i32*
  %bf.load77 = load i32, i32* %45, align 8
  %bf.clear78 = and i32 %bf.load77, 65535
  %cmp79 = icmp eq i32 %bf.clear78, 47
  br i1 %cmp79, label %if.then.80, label %if.end.91

if.then.80:                                       ; preds = %for.body
  %46 = load i32, i32* %i, align 4
  %idxprom81 = sext i32 %46 to i64
  %47 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld82 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %47, i32 0, i32 1
  %arrayidx83 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld82, i32 0, i64 3
  %rtx84 = bitcast %union.rtunion_def* %arrayidx83 to %struct.rtx_def**
  %48 = load %struct.rtx_def*, %struct.rtx_def** %rtx84, align 8
  %fld85 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %48, i32 0, i32 1
  %arrayidx86 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld85, i32 0, i64 0
  %rtvec87 = bitcast %union.rtunion_def* %arrayidx86 to %struct.rtvec_def**
  %49 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec87, align 8
  %elem88 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %49, i32 0, i32 1
  %arrayidx89 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem88, i32 0, i64 %idxprom81
  %50 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx89, align 8
  %call90 = call i64 @stack_adjust_offset(%struct.rtx_def* %50)
  %51 = load i64, i64* %offset, align 8
  %add = add nsw i64 %51, %call90
  store i64 %add, i64* %offset, align 8
  br label %if.end.91

if.end.91:                                        ; preds = %if.then.80, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.91
  %52 = load i32, i32* %i, align 4
  %dec = add nsw i32 %52, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.93

if.else.92:                                       ; preds = %lor.lhs.false
  br label %return

if.end.93:                                        ; preds = %for.end
  br label %if.end.94

if.end.94:                                        ; preds = %if.end.93, %if.then.43
  br label %if.end.95

if.end.95:                                        ; preds = %if.end.94, %if.then.35
  %53 = load i64, i64* %offset, align 8
  %cmp96 = icmp eq i64 %53, 0
  br i1 %cmp96, label %if.then.97, label %if.end.98

if.then.97:                                       ; preds = %if.end.95
  br label %return

if.end.98:                                        ; preds = %if.end.95
  %54 = load i64, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa, i32 0, i32 0), align 8
  %cmp99 = icmp eq i64 %54, 7
  br i1 %cmp99, label %if.then.100, label %if.end.102

if.then.100:                                      ; preds = %if.end.98
  %55 = load i64, i64* %offset, align 8
  %56 = load i64, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa, i32 0, i32 1), align 8
  %add101 = add nsw i64 %56, %55
  store i64 %add101, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa, i32 0, i32 1), align 8
  br label %if.end.102

if.end.102:                                       ; preds = %if.then.100, %if.end.98
  %57 = load i64, i64* %offset, align 8
  %58 = load i64, i64* @args_size, align 8
  %add103 = add nsw i64 %58, %57
  store i64 %add103, i64* @args_size, align 8
  %59 = load i64, i64* @args_size, align 8
  %cmp104 = icmp slt i64 %59, 0
  br i1 %cmp104, label %if.then.105, label %if.end.106

if.then.105:                                      ; preds = %if.end.102
  store i64 0, i64* @args_size, align 8
  br label %if.end.106

if.end.106:                                       ; preds = %if.then.105, %if.end.102
  %call107 = call i8* @dwarf2out_cfi_label()
  store i8* %call107, i8** %label, align 8
  %60 = load i8*, i8** %label, align 8
  call void @def_cfa_1(i8* %60, %struct.cfa_loc* @cfa)
  %61 = load i8*, i8** %label, align 8
  %62 = load i64, i64* @args_size, align 8
  call void @dwarf2out_args_size(i8* %61, i64 %62)
  br label %return

return:                                           ; preds = %if.end.106, %if.then.97, %if.else.92, %if.then.29, %if.end.20
  ret void
}

declare %struct.rtx_def* @find_reg_note(%struct.rtx_def*, i32, %struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define internal void @dwarf2out_frame_debug_expr(%struct.rtx_def* %expr, i8* %label) #0 {
entry:
  %expr.addr = alloca %struct.rtx_def*, align 8
  %label.addr = alloca i8*, align 8
  %src = alloca %struct.rtx_def*, align 8
  %dest = alloca %struct.rtx_def*, align 8
  %offset = alloca i64, align 8
  %par_index = alloca i32, align 4
  %limit = alloca i32, align 4
  %x = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %expr, %struct.rtx_def** %expr.addr, align 8
  store i8* %label, i8** %label.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %expr.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 39
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %expr.addr, align 8
  %3 = bitcast %struct.rtx_def* %2 to i32*
  %bf.load1 = load i32, i32* %3, align 8
  %bf.clear2 = and i32 %bf.load1, 65535
  %cmp3 = icmp eq i32 %bf.clear2, 24
  br i1 %cmp3, label %if.then, label %if.end.28

if.then:                                          ; preds = %lor.lhs.false, %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %expr.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtvec = bitcast %union.rtunion_def* %arrayidx to %struct.rtvec_def**
  %5 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec, align 8
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %5, i32 0, i32 0
  %6 = load i32, i32* %num_elem, align 4
  store i32 %6, i32* %limit, align 4
  store i32 0, i32* %par_index, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %7 = load i32, i32* %par_index, align 4
  %8 = load i32, i32* %limit, align 4
  %cmp4 = icmp slt i32 %7, %8
  br i1 %cmp4, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i32, i32* %par_index, align 4
  %idxprom = sext i32 %9 to i64
  %10 = load %struct.rtx_def*, %struct.rtx_def** %expr.addr, align 8
  %fld5 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1
  %arrayidx6 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld5, i32 0, i64 0
  %rtvec7 = bitcast %union.rtunion_def* %arrayidx6 to %struct.rtvec_def**
  %11 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec7, align 8
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %11, i32 0, i32 1
  %arrayidx8 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i32 0, i64 %idxprom
  %12 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx8, align 8
  %13 = bitcast %struct.rtx_def* %12 to i32*
  %bf.load9 = load i32, i32* %13, align 8
  %bf.clear10 = and i32 %bf.load9, 65535
  %cmp11 = icmp eq i32 %bf.clear10, 47
  br i1 %cmp11, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %14 = load i32, i32* %par_index, align 4
  %idxprom12 = sext i32 %14 to i64
  %15 = load %struct.rtx_def*, %struct.rtx_def** %expr.addr, align 8
  %fld13 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1
  %arrayidx14 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld13, i32 0, i64 0
  %rtvec15 = bitcast %union.rtunion_def* %arrayidx14 to %struct.rtvec_def**
  %16 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec15, align 8
  %elem16 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %16, i32 0, i32 1
  %arrayidx17 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem16, i32 0, i64 %idxprom12
  %17 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx17, align 8
  %18 = bitcast %struct.rtx_def* %17 to i32*
  %bf.load18 = load i32, i32* %18, align 8
  %bf.lshr = lshr i32 %bf.load18, 31
  %tobool = icmp ne i32 %bf.lshr, 0
  br i1 %tobool, label %if.then.21, label %lor.lhs.false.19

lor.lhs.false.19:                                 ; preds = %land.lhs.true
  %19 = load i32, i32* %par_index, align 4
  %cmp20 = icmp eq i32 %19, 0
  br i1 %cmp20, label %if.then.21, label %if.end

if.then.21:                                       ; preds = %lor.lhs.false.19, %land.lhs.true
  %20 = load i32, i32* %par_index, align 4
  %idxprom22 = sext i32 %20 to i64
  %21 = load %struct.rtx_def*, %struct.rtx_def** %expr.addr, align 8
  %fld23 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1
  %arrayidx24 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld23, i32 0, i64 0
  %rtvec25 = bitcast %union.rtunion_def* %arrayidx24 to %struct.rtvec_def**
  %22 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec25, align 8
  %elem26 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %22, i32 0, i32 1
  %arrayidx27 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem26, i32 0, i64 %idxprom22
  %23 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx27, align 8
  %24 = load i8*, i8** %label.addr, align 8
  call void @dwarf2out_frame_debug_expr(%struct.rtx_def* %23, i8* %24)
  br label %if.end

if.end:                                           ; preds = %if.then.21, %lor.lhs.false.19, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %25 = load i32, i32* %par_index, align 4
  %inc = add nsw i32 %25, 1
  store i32 %inc, i32* %par_index, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %sw.epilog.602

if.end.28:                                        ; preds = %lor.lhs.false
  %26 = load %struct.rtx_def*, %struct.rtx_def** %expr.addr, align 8
  %27 = bitcast %struct.rtx_def* %26 to i32*
  %bf.load29 = load i32, i32* %27, align 8
  %bf.clear30 = and i32 %bf.load29, 65535
  %cmp31 = icmp ne i32 %bf.clear30, 47
  br i1 %cmp31, label %if.then.32, label %if.end.33

if.then.32:                                       ; preds = %if.end.28
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 1309, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @__FUNCTION__.dwarf2out_frame_debug_expr, i32 0, i32 0)) #8
  unreachable

if.end.33:                                        ; preds = %if.end.28
  %28 = load %struct.rtx_def*, %struct.rtx_def** %expr.addr, align 8
  %fld34 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1
  %arrayidx35 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld34, i32 0, i64 1
  %rtx = bitcast %union.rtunion_def* %arrayidx35 to %struct.rtx_def**
  %29 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %29, %struct.rtx_def** %src, align 8
  %30 = load %struct.rtx_def*, %struct.rtx_def** %expr.addr, align 8
  %fld36 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %30, i32 0, i32 1
  %arrayidx37 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld36, i32 0, i64 0
  %rtx38 = bitcast %union.rtunion_def* %arrayidx37 to %struct.rtx_def**
  %31 = load %struct.rtx_def*, %struct.rtx_def** %rtx38, align 8
  store %struct.rtx_def* %31, %struct.rtx_def** %dest, align 8
  %32 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %33 = bitcast %struct.rtx_def* %32 to i32*
  %bf.load39 = load i32, i32* %33, align 8
  %bf.clear40 = and i32 %bf.load39, 65535
  switch i32 %bf.clear40, label %sw.default.601 [
    i32 61, label %sw.bb
    i32 66, label %sw.bb.337
  ]

sw.bb:                                            ; preds = %if.end.33
  %34 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %35 = bitcast %struct.rtx_def* %34 to i32*
  %bf.load41 = load i32, i32* %35, align 8
  %bf.clear42 = and i32 %bf.load41, 65535
  switch i32 %bf.clear42, label %sw.default.335 [
    i32 61, label %sw.bb.43
    i32 75, label %sw.bb.54
    i32 76, label %sw.bb.54
    i32 135, label %sw.bb.54
    i32 54, label %sw.bb.280
    i32 84, label %sw.bb.288
    i32 134, label %sw.bb.334
  ]

sw.bb.43:                                         ; preds = %sw.bb
  %36 = load i64, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa, i32 0, i32 0), align 8
  %37 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %fld44 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %37, i32 0, i32 1
  %arrayidx45 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld44, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx45 to i32*
  %38 = load i32, i32* %rtuint, align 4
  %conv = zext i32 %38 to i64
  %cmp46 = icmp eq i64 %36, %conv
  br i1 %cmp46, label %if.then.48, label %if.else

if.then.48:                                       ; preds = %sw.bb.43
  br label %if.end.49

if.else:                                          ; preds = %sw.bb.43
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 1328, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @__FUNCTION__.dwarf2out_frame_debug_expr, i32 0, i32 0)) #8
  unreachable

if.end.49:                                        ; preds = %if.then.48
  %39 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %fld50 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1
  %arrayidx51 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld50, i32 0, i64 0
  %rtuint52 = bitcast %union.rtunion_def* %arrayidx51 to i32*
  %40 = load i32, i32* %rtuint52, align 4
  %conv53 = zext i32 %40 to i64
  store i64 %conv53, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa, i32 0, i32 0), align 8
  %41 = load i64, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa, i32 0, i32 0), align 8
  store i64 %41, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa_temp, i32 0, i32 0), align 8
  %42 = load i64, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa, i32 0, i32 1), align 8
  store i64 %42, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa_temp, i32 0, i32 1), align 8
  br label %sw.epilog.336

sw.bb.54:                                         ; preds = %sw.bb, %sw.bb, %sw.bb
  %43 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %44 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %cmp55 = icmp eq %struct.rtx_def* %43, %44
  br i1 %cmp55, label %if.then.57, label %if.else.122

if.then.57:                                       ; preds = %sw.bb.54
  %45 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %fld58 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %45, i32 0, i32 1
  %arrayidx59 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld58, i32 0, i64 1
  %rtx60 = bitcast %union.rtunion_def* %arrayidx59 to %struct.rtx_def**
  %46 = load %struct.rtx_def*, %struct.rtx_def** %rtx60, align 8
  %47 = bitcast %struct.rtx_def* %46 to i32*
  %bf.load61 = load i32, i32* %47, align 8
  %bf.clear62 = and i32 %bf.load61, 65535
  switch i32 %bf.clear62, label %sw.default [
    i32 54, label %sw.bb.63
    i32 61, label %sw.bb.69
  ]

sw.bb.63:                                         ; preds = %if.then.57
  %48 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %fld64 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %48, i32 0, i32 1
  %arrayidx65 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld64, i32 0, i64 1
  %rtx66 = bitcast %union.rtunion_def* %arrayidx65 to %struct.rtx_def**
  %49 = load %struct.rtx_def*, %struct.rtx_def** %rtx66, align 8
  %fld67 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %49, i32 0, i32 1
  %arrayidx68 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld67, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx68 to i64*
  %50 = load i64, i64* %rtwint, align 8
  store i64 %50, i64* %offset, align 8
  br label %sw.epilog

sw.bb.69:                                         ; preds = %if.then.57
  %51 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %fld70 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %51, i32 0, i32 1
  %arrayidx71 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld70, i32 0, i64 1
  %rtx72 = bitcast %union.rtunion_def* %arrayidx71 to %struct.rtx_def**
  %52 = load %struct.rtx_def*, %struct.rtx_def** %rtx72, align 8
  %fld73 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %52, i32 0, i32 1
  %arrayidx74 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld73, i32 0, i64 0
  %rtuint75 = bitcast %union.rtunion_def* %arrayidx74 to i32*
  %53 = load i32, i32* %rtuint75, align 4
  %conv76 = zext i32 %53 to i64
  %54 = load i64, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa_temp, i32 0, i32 0), align 8
  %cmp77 = icmp ne i64 %conv76, %54
  br i1 %cmp77, label %if.then.79, label %if.end.80

if.then.79:                                       ; preds = %sw.bb.69
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 1353, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @__FUNCTION__.dwarf2out_frame_debug_expr, i32 0, i32 0)) #8
  unreachable

if.end.80:                                        ; preds = %sw.bb.69
  %55 = load i64, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa_temp, i32 0, i32 1), align 8
  store i64 %55, i64* %offset, align 8
  br label %sw.epilog

sw.default:                                       ; preds = %if.then.57
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 1357, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @__FUNCTION__.dwarf2out_frame_debug_expr, i32 0, i32 0)) #8
  unreachable

sw.epilog:                                        ; preds = %if.end.80, %sw.bb.63
  %56 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %fld81 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %56, i32 0, i32 1
  %arrayidx82 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld81, i32 0, i64 0
  %rtx83 = bitcast %union.rtunion_def* %arrayidx82 to %struct.rtx_def**
  %57 = load %struct.rtx_def*, %struct.rtx_def** %rtx83, align 8
  %58 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 4), align 8
  %cmp84 = icmp eq %struct.rtx_def* %57, %58
  br i1 %cmp84, label %if.then.86, label %if.else.91

if.then.86:                                       ; preds = %sw.epilog
  %59 = load i64, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa, i32 0, i32 0), align 8
  %cmp87 = icmp ne i64 %59, 6
  br i1 %cmp87, label %if.then.89, label %if.end.90

if.then.89:                                       ; preds = %if.then.86
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 1364, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @__FUNCTION__.dwarf2out_frame_debug_expr, i32 0, i32 0)) #8
  unreachable

if.end.90:                                        ; preds = %if.then.86
  store i64 7, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa, i32 0, i32 0), align 8
  br label %if.end.106

if.else.91:                                       ; preds = %sw.epilog
  %60 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %61 = bitcast %struct.rtx_def* %60 to i32*
  %bf.load92 = load i32, i32* %61, align 8
  %bf.clear93 = and i32 %bf.load92, 65535
  %cmp94 = icmp eq i32 %bf.clear93, 135
  br i1 %cmp94, label %if.then.96, label %if.else.97

if.then.96:                                       ; preds = %if.else.91
  br label %if.end.105

if.else.97:                                       ; preds = %if.else.91
  %62 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %fld98 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %62, i32 0, i32 1
  %arrayidx99 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld98, i32 0, i64 0
  %rtx100 = bitcast %union.rtunion_def* %arrayidx99 to %struct.rtx_def**
  %63 = load %struct.rtx_def*, %struct.rtx_def** %rtx100, align 8
  %64 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %cmp101 = icmp ne %struct.rtx_def* %63, %64
  br i1 %cmp101, label %if.then.103, label %if.end.104

if.then.103:                                      ; preds = %if.else.97
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 1371, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @__FUNCTION__.dwarf2out_frame_debug_expr, i32 0, i32 0)) #8
  unreachable

if.end.104:                                       ; preds = %if.else.97
  br label %if.end.105

if.end.105:                                       ; preds = %if.end.104, %if.then.96
  br label %if.end.106

if.end.106:                                       ; preds = %if.end.105, %if.end.90
  %65 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %66 = bitcast %struct.rtx_def* %65 to i32*
  %bf.load107 = load i32, i32* %66, align 8
  %bf.clear108 = and i32 %bf.load107, 65535
  %cmp109 = icmp ne i32 %bf.clear108, 76
  br i1 %cmp109, label %if.then.111, label %if.end.112

if.then.111:                                      ; preds = %if.end.106
  %67 = load i64, i64* %offset, align 8
  %sub = sub nsw i64 0, %67
  store i64 %sub, i64* %offset, align 8
  br label %if.end.112

if.end.112:                                       ; preds = %if.then.111, %if.end.106
  %68 = load i64, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa, i32 0, i32 0), align 8
  %cmp113 = icmp eq i64 %68, 7
  br i1 %cmp113, label %if.then.115, label %if.end.116

if.then.115:                                      ; preds = %if.end.112
  %69 = load i64, i64* %offset, align 8
  %70 = load i64, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa, i32 0, i32 1), align 8
  %add = add nsw i64 %70, %69
  store i64 %add, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa, i32 0, i32 1), align 8
  br label %if.end.116

if.end.116:                                       ; preds = %if.then.115, %if.end.112
  %71 = load i64, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa_store, i32 0, i32 0), align 8
  %cmp117 = icmp eq i64 %71, 7
  br i1 %cmp117, label %if.then.119, label %if.end.121

if.then.119:                                      ; preds = %if.end.116
  %72 = load i64, i64* %offset, align 8
  %73 = load i64, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa_store, i32 0, i32 1), align 8
  %add120 = add nsw i64 %73, %72
  store i64 %add120, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa_store, i32 0, i32 1), align 8
  br label %if.end.121

if.end.121:                                       ; preds = %if.then.119, %if.end.116
  br label %if.end.279

if.else.122:                                      ; preds = %sw.bb.54
  %74 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %75 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 4), align 8
  %cmp123 = icmp eq %struct.rtx_def* %74, %75
  br i1 %cmp123, label %if.then.125, label %if.else.171

if.then.125:                                      ; preds = %if.else.122
  %76 = load i32, i32* @frame_pointer_needed, align 4
  %tobool126 = icmp ne i32 %76, 0
  br i1 %tobool126, label %if.end.128, label %if.then.127

if.then.127:                                      ; preds = %if.then.125
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 1386, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @__FUNCTION__.dwarf2out_frame_debug_expr, i32 0, i32 0)) #8
  unreachable

if.end.128:                                       ; preds = %if.then.125
  %77 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %fld129 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %77, i32 0, i32 1
  %arrayidx130 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld129, i32 0, i64 0
  %rtx131 = bitcast %union.rtunion_def* %arrayidx130 to %struct.rtx_def**
  %78 = load %struct.rtx_def*, %struct.rtx_def** %rtx131, align 8
  %79 = bitcast %struct.rtx_def* %78 to i32*
  %bf.load132 = load i32, i32* %79, align 8
  %bf.clear133 = and i32 %bf.load132, 65535
  %cmp134 = icmp eq i32 %bf.clear133, 61
  br i1 %cmp134, label %land.lhs.true.136, label %if.else.169

land.lhs.true.136:                                ; preds = %if.end.128
  %80 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %fld137 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %80, i32 0, i32 1
  %arrayidx138 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld137, i32 0, i64 0
  %rtx139 = bitcast %union.rtunion_def* %arrayidx138 to %struct.rtx_def**
  %81 = load %struct.rtx_def*, %struct.rtx_def** %rtx139, align 8
  %fld140 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %81, i32 0, i32 1
  %arrayidx141 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld140, i32 0, i64 0
  %rtuint142 = bitcast %union.rtunion_def* %arrayidx141 to i32*
  %82 = load i32, i32* %rtuint142, align 4
  %conv143 = zext i32 %82 to i64
  %83 = load i64, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa, i32 0, i32 0), align 8
  %cmp144 = icmp eq i64 %conv143, %83
  br i1 %cmp144, label %land.lhs.true.146, label %if.else.169

land.lhs.true.146:                                ; preds = %land.lhs.true.136
  %84 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %fld147 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %84, i32 0, i32 1
  %arrayidx148 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld147, i32 0, i64 1
  %rtx149 = bitcast %union.rtunion_def* %arrayidx148 to %struct.rtx_def**
  %85 = load %struct.rtx_def*, %struct.rtx_def** %rtx149, align 8
  %86 = bitcast %struct.rtx_def* %85 to i32*
  %bf.load150 = load i32, i32* %86, align 8
  %bf.clear151 = and i32 %bf.load150, 65535
  %cmp152 = icmp eq i32 %bf.clear151, 54
  br i1 %cmp152, label %if.then.154, label %if.else.169

if.then.154:                                      ; preds = %land.lhs.true.146
  %87 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %fld155 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %87, i32 0, i32 1
  %arrayidx156 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld155, i32 0, i64 1
  %rtx157 = bitcast %union.rtunion_def* %arrayidx156 to %struct.rtx_def**
  %88 = load %struct.rtx_def*, %struct.rtx_def** %rtx157, align 8
  %fld158 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %88, i32 0, i32 1
  %arrayidx159 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld158, i32 0, i64 0
  %rtwint160 = bitcast %union.rtunion_def* %arrayidx159 to i64*
  %89 = load i64, i64* %rtwint160, align 8
  store i64 %89, i64* %offset, align 8
  %90 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %91 = bitcast %struct.rtx_def* %90 to i32*
  %bf.load161 = load i32, i32* %91, align 8
  %bf.clear162 = and i32 %bf.load161, 65535
  %cmp163 = icmp ne i32 %bf.clear162, 76
  br i1 %cmp163, label %if.then.165, label %if.end.167

if.then.165:                                      ; preds = %if.then.154
  %92 = load i64, i64* %offset, align 8
  %sub166 = sub nsw i64 0, %92
  store i64 %sub166, i64* %offset, align 8
  br label %if.end.167

if.end.167:                                       ; preds = %if.then.165, %if.then.154
  %93 = load i64, i64* %offset, align 8
  %94 = load i64, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa, i32 0, i32 1), align 8
  %add168 = add nsw i64 %94, %93
  store i64 %add168, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa, i32 0, i32 1), align 8
  store i64 6, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa, i32 0, i32 0), align 8
  br label %if.end.170

if.else.169:                                      ; preds = %land.lhs.true.146, %land.lhs.true.136, %if.end.128
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 1399, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @__FUNCTION__.dwarf2out_frame_debug_expr, i32 0, i32 0)) #8
  unreachable

if.end.170:                                       ; preds = %if.end.167
  br label %if.end.278

if.else.171:                                      ; preds = %if.else.122
  %95 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %96 = bitcast %struct.rtx_def* %95 to i32*
  %bf.load172 = load i32, i32* %96, align 8
  %bf.clear173 = and i32 %bf.load172, 65535
  %cmp174 = icmp eq i32 %bf.clear173, 76
  br i1 %cmp174, label %if.then.176, label %if.end.177

if.then.176:                                      ; preds = %if.else.171
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 1404, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @__FUNCTION__.dwarf2out_frame_debug_expr, i32 0, i32 0)) #8
  unreachable

if.end.177:                                       ; preds = %if.else.171
  %97 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %fld178 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %97, i32 0, i32 1
  %arrayidx179 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld178, i32 0, i64 0
  %rtx180 = bitcast %union.rtunion_def* %arrayidx179 to %struct.rtx_def**
  %98 = load %struct.rtx_def*, %struct.rtx_def** %rtx180, align 8
  %99 = bitcast %struct.rtx_def* %98 to i32*
  %bf.load181 = load i32, i32* %99, align 8
  %bf.clear182 = and i32 %bf.load181, 65535
  %cmp183 = icmp eq i32 %bf.clear182, 61
  br i1 %cmp183, label %land.lhs.true.185, label %if.else.216

land.lhs.true.185:                                ; preds = %if.end.177
  %100 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %fld186 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %100, i32 0, i32 1
  %arrayidx187 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld186, i32 0, i64 0
  %rtx188 = bitcast %union.rtunion_def* %arrayidx187 to %struct.rtx_def**
  %101 = load %struct.rtx_def*, %struct.rtx_def** %rtx188, align 8
  %fld189 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %101, i32 0, i32 1
  %arrayidx190 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld189, i32 0, i64 0
  %rtuint191 = bitcast %union.rtunion_def* %arrayidx190 to i32*
  %102 = load i32, i32* %rtuint191, align 4
  %conv192 = zext i32 %102 to i64
  %103 = load i64, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa, i32 0, i32 0), align 8
  %cmp193 = icmp eq i64 %conv192, %103
  br i1 %cmp193, label %land.lhs.true.195, label %if.else.216

land.lhs.true.195:                                ; preds = %land.lhs.true.185
  %104 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %fld196 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %104, i32 0, i32 1
  %arrayidx197 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld196, i32 0, i64 1
  %rtx198 = bitcast %union.rtunion_def* %arrayidx197 to %struct.rtx_def**
  %105 = load %struct.rtx_def*, %struct.rtx_def** %rtx198, align 8
  %106 = bitcast %struct.rtx_def* %105 to i32*
  %bf.load199 = load i32, i32* %106, align 8
  %bf.clear200 = and i32 %bf.load199, 65535
  %cmp201 = icmp eq i32 %bf.clear200, 54
  br i1 %cmp201, label %if.then.203, label %if.else.216

if.then.203:                                      ; preds = %land.lhs.true.195
  %107 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %fld204 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %107, i32 0, i32 1
  %arrayidx205 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld204, i32 0, i64 1
  %rtx206 = bitcast %union.rtunion_def* %arrayidx205 to %struct.rtx_def**
  %108 = load %struct.rtx_def*, %struct.rtx_def** %rtx206, align 8
  %fld207 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %108, i32 0, i32 1
  %arrayidx208 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld207, i32 0, i64 0
  %rtwint209 = bitcast %union.rtunion_def* %arrayidx208 to i64*
  %109 = load i64, i64* %rtwint209, align 8
  %sub210 = sub nsw i64 0, %109
  store i64 %sub210, i64* %offset, align 8
  %110 = load i64, i64* %offset, align 8
  %111 = load i64, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa, i32 0, i32 1), align 8
  %add211 = add nsw i64 %111, %110
  store i64 %add211, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa, i32 0, i32 1), align 8
  %112 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %fld212 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %112, i32 0, i32 1
  %arrayidx213 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld212, i32 0, i64 0
  %rtuint214 = bitcast %union.rtunion_def* %arrayidx213 to i32*
  %113 = load i32, i32* %rtuint214, align 4
  %conv215 = zext i32 %113 to i64
  store i64 %conv215, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa, i32 0, i32 0), align 8
  %114 = load i64, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa, i32 0, i32 0), align 8
  store i64 %114, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa_temp, i32 0, i32 0), align 8
  %115 = load i64, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa, i32 0, i32 1), align 8
  store i64 %115, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa_temp, i32 0, i32 1), align 8
  br label %if.end.277

if.else.216:                                      ; preds = %land.lhs.true.195, %land.lhs.true.185, %if.end.177
  %116 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %fld217 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %116, i32 0, i32 1
  %arrayidx218 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld217, i32 0, i64 0
  %rtx219 = bitcast %union.rtunion_def* %arrayidx218 to %struct.rtx_def**
  %117 = load %struct.rtx_def*, %struct.rtx_def** %rtx219, align 8
  %118 = bitcast %struct.rtx_def* %117 to i32*
  %bf.load220 = load i32, i32* %118, align 8
  %bf.clear221 = and i32 %bf.load220, 65535
  %cmp222 = icmp eq i32 %bf.clear221, 61
  br i1 %cmp222, label %land.lhs.true.224, label %if.else.250

land.lhs.true.224:                                ; preds = %if.else.216
  %119 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %fld225 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %119, i32 0, i32 1
  %arrayidx226 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld225, i32 0, i64 0
  %rtx227 = bitcast %union.rtunion_def* %arrayidx226 to %struct.rtx_def**
  %120 = load %struct.rtx_def*, %struct.rtx_def** %rtx227, align 8
  %fld228 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %120, i32 0, i32 1
  %arrayidx229 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld228, i32 0, i64 0
  %rtuint230 = bitcast %union.rtunion_def* %arrayidx229 to i32*
  %121 = load i32, i32* %rtuint230, align 4
  %conv231 = zext i32 %121 to i64
  %122 = load i64, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa_temp, i32 0, i32 0), align 8
  %cmp232 = icmp eq i64 %conv231, %122
  br i1 %cmp232, label %land.lhs.true.234, label %if.else.250

land.lhs.true.234:                                ; preds = %land.lhs.true.224
  %123 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %fld235 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %123, i32 0, i32 1
  %arrayidx236 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld235, i32 0, i64 1
  %rtx237 = bitcast %union.rtunion_def* %arrayidx236 to %struct.rtx_def**
  %124 = load %struct.rtx_def*, %struct.rtx_def** %rtx237, align 8
  %125 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %cmp238 = icmp eq %struct.rtx_def* %124, %125
  br i1 %cmp238, label %if.then.240, label %if.else.250

if.then.240:                                      ; preds = %land.lhs.true.234
  %126 = load i64, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa, i32 0, i32 0), align 8
  %cmp241 = icmp ne i64 %126, 7
  br i1 %cmp241, label %if.then.243, label %if.end.244

if.then.243:                                      ; preds = %if.then.240
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 1429, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @__FUNCTION__.dwarf2out_frame_debug_expr, i32 0, i32 0)) #8
  unreachable

if.end.244:                                       ; preds = %if.then.240
  %127 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %fld245 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %127, i32 0, i32 1
  %arrayidx246 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld245, i32 0, i64 0
  %rtuint247 = bitcast %union.rtunion_def* %arrayidx246 to i32*
  %128 = load i32, i32* %rtuint247, align 4
  %conv248 = zext i32 %128 to i64
  store i64 %conv248, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa_store, i32 0, i32 0), align 8
  %129 = load i64, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa, i32 0, i32 1), align 8
  %130 = load i64, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa_temp, i32 0, i32 1), align 8
  %sub249 = sub nsw i64 %129, %130
  store i64 %sub249, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa_store, i32 0, i32 1), align 8
  br label %if.end.276

if.else.250:                                      ; preds = %land.lhs.true.234, %land.lhs.true.224, %if.else.216
  %131 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %132 = bitcast %struct.rtx_def* %131 to i32*
  %bf.load251 = load i32, i32* %132, align 8
  %bf.clear252 = and i32 %bf.load251, 65535
  %cmp253 = icmp eq i32 %bf.clear252, 135
  br i1 %cmp253, label %land.lhs.true.255, label %if.else.274

land.lhs.true.255:                                ; preds = %if.else.250
  %133 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %fld256 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %133, i32 0, i32 1
  %arrayidx257 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld256, i32 0, i64 1
  %rtx258 = bitcast %union.rtunion_def* %arrayidx257 to %struct.rtx_def**
  %134 = load %struct.rtx_def*, %struct.rtx_def** %rtx258, align 8
  %135 = bitcast %struct.rtx_def* %134 to i32*
  %bf.load259 = load i32, i32* %135, align 8
  %bf.clear260 = and i32 %bf.load259, 65535
  %cmp261 = icmp eq i32 %bf.clear260, 54
  br i1 %cmp261, label %if.then.263, label %if.else.274

if.then.263:                                      ; preds = %land.lhs.true.255
  %136 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %fld264 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %136, i32 0, i32 1
  %arrayidx265 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld264, i32 0, i64 0
  %rtuint266 = bitcast %union.rtunion_def* %arrayidx265 to i32*
  %137 = load i32, i32* %rtuint266, align 4
  %conv267 = zext i32 %137 to i64
  store i64 %conv267, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa_temp, i32 0, i32 0), align 8
  %138 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %fld268 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %138, i32 0, i32 1
  %arrayidx269 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld268, i32 0, i64 1
  %rtx270 = bitcast %union.rtunion_def* %arrayidx269 to %struct.rtx_def**
  %139 = load %struct.rtx_def*, %struct.rtx_def** %rtx270, align 8
  %fld271 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %139, i32 0, i32 1
  %arrayidx272 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld271, i32 0, i64 0
  %rtwint273 = bitcast %union.rtunion_def* %arrayidx272 to i64*
  %140 = load i64, i64* %rtwint273, align 8
  store i64 %140, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa_temp, i32 0, i32 1), align 8
  br label %if.end.275

if.else.274:                                      ; preds = %land.lhs.true.255, %if.else.250
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 1442, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @__FUNCTION__.dwarf2out_frame_debug_expr, i32 0, i32 0)) #8
  unreachable

if.end.275:                                       ; preds = %if.then.263
  br label %if.end.276

if.end.276:                                       ; preds = %if.end.275, %if.end.244
  br label %if.end.277

if.end.277:                                       ; preds = %if.end.276, %if.then.203
  br label %if.end.278

if.end.278:                                       ; preds = %if.end.277, %if.end.170
  br label %if.end.279

if.end.279:                                       ; preds = %if.end.278, %if.end.121
  br label %sw.epilog.336

sw.bb.280:                                        ; preds = %sw.bb
  %141 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %fld281 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %141, i32 0, i32 1
  %arrayidx282 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld281, i32 0, i64 0
  %rtuint283 = bitcast %union.rtunion_def* %arrayidx282 to i32*
  %142 = load i32, i32* %rtuint283, align 4
  %conv284 = zext i32 %142 to i64
  store i64 %conv284, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa_temp, i32 0, i32 0), align 8
  %143 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %fld285 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %143, i32 0, i32 1
  %arrayidx286 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld285, i32 0, i64 0
  %rtwint287 = bitcast %union.rtunion_def* %arrayidx286 to i64*
  %144 = load i64, i64* %rtwint287, align 8
  store i64 %144, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa_temp, i32 0, i32 1), align 8
  br label %sw.epilog.336

sw.bb.288:                                        ; preds = %sw.bb
  %145 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %fld289 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %145, i32 0, i32 1
  %arrayidx290 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld289, i32 0, i64 0
  %rtx291 = bitcast %union.rtunion_def* %arrayidx290 to %struct.rtx_def**
  %146 = load %struct.rtx_def*, %struct.rtx_def** %rtx291, align 8
  %147 = bitcast %struct.rtx_def* %146 to i32*
  %bf.load292 = load i32, i32* %147, align 8
  %bf.clear293 = and i32 %bf.load292, 65535
  %cmp294 = icmp ne i32 %bf.clear293, 61
  br i1 %cmp294, label %if.then.314, label %lor.lhs.false.296

lor.lhs.false.296:                                ; preds = %sw.bb.288
  %148 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %fld297 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %148, i32 0, i32 1
  %arrayidx298 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld297, i32 0, i64 0
  %rtx299 = bitcast %union.rtunion_def* %arrayidx298 to %struct.rtx_def**
  %149 = load %struct.rtx_def*, %struct.rtx_def** %rtx299, align 8
  %fld300 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %149, i32 0, i32 1
  %arrayidx301 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld300, i32 0, i64 0
  %rtuint302 = bitcast %union.rtunion_def* %arrayidx301 to i32*
  %150 = load i32, i32* %rtuint302, align 4
  %conv303 = zext i32 %150 to i64
  %151 = load i64, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa_temp, i32 0, i32 0), align 8
  %cmp304 = icmp ne i64 %conv303, %151
  br i1 %cmp304, label %if.then.314, label %lor.lhs.false.306

lor.lhs.false.306:                                ; preds = %lor.lhs.false.296
  %152 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %fld307 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %152, i32 0, i32 1
  %arrayidx308 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld307, i32 0, i64 1
  %rtx309 = bitcast %union.rtunion_def* %arrayidx308 to %struct.rtx_def**
  %153 = load %struct.rtx_def*, %struct.rtx_def** %rtx309, align 8
  %154 = bitcast %struct.rtx_def* %153 to i32*
  %bf.load310 = load i32, i32* %154, align 8
  %bf.clear311 = and i32 %bf.load310, 65535
  %cmp312 = icmp ne i32 %bf.clear311, 54
  br i1 %cmp312, label %if.then.314, label %if.end.315

if.then.314:                                      ; preds = %lor.lhs.false.306, %lor.lhs.false.296, %sw.bb.288
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 1457, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @__FUNCTION__.dwarf2out_frame_debug_expr, i32 0, i32 0)) #8
  unreachable

if.end.315:                                       ; preds = %lor.lhs.false.306
  %155 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %fld316 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %155, i32 0, i32 1
  %arrayidx317 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld316, i32 0, i64 0
  %rtuint318 = bitcast %union.rtunion_def* %arrayidx317 to i32*
  %156 = load i32, i32* %rtuint318, align 4
  %conv319 = zext i32 %156 to i64
  %157 = load i64, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa_temp, i32 0, i32 0), align 8
  %cmp320 = icmp ne i64 %conv319, %157
  br i1 %cmp320, label %if.then.322, label %if.end.327

if.then.322:                                      ; preds = %if.end.315
  %158 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %fld323 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %158, i32 0, i32 1
  %arrayidx324 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld323, i32 0, i64 0
  %rtuint325 = bitcast %union.rtunion_def* %arrayidx324 to i32*
  %159 = load i32, i32* %rtuint325, align 4
  %conv326 = zext i32 %159 to i64
  store i64 %conv326, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa_temp, i32 0, i32 0), align 8
  br label %if.end.327

if.end.327:                                       ; preds = %if.then.322, %if.end.315
  %160 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %fld328 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %160, i32 0, i32 1
  %arrayidx329 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld328, i32 0, i64 1
  %rtx330 = bitcast %union.rtunion_def* %arrayidx329 to %struct.rtx_def**
  %161 = load %struct.rtx_def*, %struct.rtx_def** %rtx330, align 8
  %fld331 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %161, i32 0, i32 1
  %arrayidx332 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld331, i32 0, i64 0
  %rtwint333 = bitcast %union.rtunion_def* %arrayidx332 to i64*
  %162 = load i64, i64* %rtwint333, align 8
  %163 = load i64, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa_temp, i32 0, i32 1), align 8
  %or = or i64 %163, %162
  store i64 %or, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa_temp, i32 0, i32 1), align 8
  br label %sw.epilog.336

sw.bb.334:                                        ; preds = %sw.bb
  br label %sw.epilog.336

sw.default.335:                                   ; preds = %sw.bb
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 1471, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @__FUNCTION__.dwarf2out_frame_debug_expr, i32 0, i32 0)) #8
  unreachable

sw.epilog.336:                                    ; preds = %sw.bb.334, %if.end.327, %sw.bb.280, %if.end.279, %if.end.49
  %164 = load i8*, i8** %label.addr, align 8
  call void @def_cfa_1(i8* %164, %struct.cfa_loc* @cfa)
  br label %sw.epilog.602

sw.bb.337:                                        ; preds = %if.end.33
  %165 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %166 = bitcast %struct.rtx_def* %165 to i32*
  %bf.load338 = load i32, i32* %166, align 8
  %bf.clear339 = and i32 %bf.load338, 65535
  %cmp340 = icmp ne i32 %bf.clear339, 61
  br i1 %cmp340, label %if.then.342, label %if.end.343

if.then.342:                                      ; preds = %sw.bb.337
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 1479, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @__FUNCTION__.dwarf2out_frame_debug_expr, i32 0, i32 0)) #8
  unreachable

if.end.343:                                       ; preds = %sw.bb.337
  %167 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %fld344 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %167, i32 0, i32 1
  %arrayidx345 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld344, i32 0, i64 0
  %rtx346 = bitcast %union.rtunion_def* %arrayidx345 to %struct.rtx_def**
  %168 = load %struct.rtx_def*, %struct.rtx_def** %rtx346, align 8
  %169 = bitcast %struct.rtx_def* %168 to i32*
  %bf.load347 = load i32, i32* %169, align 8
  %bf.clear348 = and i32 %bf.load347, 65535
  switch i32 %bf.clear348, label %sw.default.553 [
    i32 100, label %sw.bb.349
    i32 97, label %sw.bb.400
    i32 96, label %sw.bb.400
    i32 75, label %sw.bb.439
    i32 76, label %sw.bb.439
    i32 135, label %sw.bb.439
    i32 61, label %sw.bb.503
    i32 99, label %sw.bb.530
  ]

sw.bb.349:                                        ; preds = %if.end.343
  %170 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %fld350 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %170, i32 0, i32 1
  %arrayidx351 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld350, i32 0, i64 0
  %rtx352 = bitcast %union.rtunion_def* %arrayidx351 to %struct.rtx_def**
  %171 = load %struct.rtx_def*, %struct.rtx_def** %rtx352, align 8
  %fld353 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %171, i32 0, i32 1
  %arrayidx354 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld353, i32 0, i64 1
  %rtx355 = bitcast %union.rtunion_def* %arrayidx354 to %struct.rtx_def**
  %172 = load %struct.rtx_def*, %struct.rtx_def** %rtx355, align 8
  %fld356 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %172, i32 0, i32 1
  %arrayidx357 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld356, i32 0, i64 1
  %rtx358 = bitcast %union.rtunion_def* %arrayidx357 to %struct.rtx_def**
  %173 = load %struct.rtx_def*, %struct.rtx_def** %rtx358, align 8
  %174 = bitcast %struct.rtx_def* %173 to i32*
  %bf.load359 = load i32, i32* %174, align 8
  %bf.clear360 = and i32 %bf.load359, 65535
  %cmp361 = icmp ne i32 %bf.clear360, 54
  br i1 %cmp361, label %if.then.363, label %if.end.364

if.then.363:                                      ; preds = %sw.bb.349
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 1490, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @__FUNCTION__.dwarf2out_frame_debug_expr, i32 0, i32 0)) #8
  unreachable

if.end.364:                                       ; preds = %sw.bb.349
  %175 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %fld365 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %175, i32 0, i32 1
  %arrayidx366 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld365, i32 0, i64 0
  %rtx367 = bitcast %union.rtunion_def* %arrayidx366 to %struct.rtx_def**
  %176 = load %struct.rtx_def*, %struct.rtx_def** %rtx367, align 8
  %fld368 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %176, i32 0, i32 1
  %arrayidx369 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld368, i32 0, i64 1
  %rtx370 = bitcast %union.rtunion_def* %arrayidx369 to %struct.rtx_def**
  %177 = load %struct.rtx_def*, %struct.rtx_def** %rtx370, align 8
  %fld371 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %177, i32 0, i32 1
  %arrayidx372 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld371, i32 0, i64 1
  %rtx373 = bitcast %union.rtunion_def* %arrayidx372 to %struct.rtx_def**
  %178 = load %struct.rtx_def*, %struct.rtx_def** %rtx373, align 8
  %fld374 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %178, i32 0, i32 1
  %arrayidx375 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld374, i32 0, i64 0
  %rtwint376 = bitcast %union.rtunion_def* %arrayidx375 to i64*
  %179 = load i64, i64* %rtwint376, align 8
  %sub377 = sub nsw i64 0, %179
  store i64 %sub377, i64* %offset, align 8
  %180 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %fld378 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %180, i32 0, i32 1
  %arrayidx379 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld378, i32 0, i64 0
  %rtx380 = bitcast %union.rtunion_def* %arrayidx379 to %struct.rtx_def**
  %181 = load %struct.rtx_def*, %struct.rtx_def** %rtx380, align 8
  %fld381 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %181, i32 0, i32 1
  %arrayidx382 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld381, i32 0, i64 0
  %rtx383 = bitcast %union.rtunion_def* %arrayidx382 to %struct.rtx_def**
  %182 = load %struct.rtx_def*, %struct.rtx_def** %rtx383, align 8
  %fld384 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %182, i32 0, i32 1
  %arrayidx385 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld384, i32 0, i64 0
  %rtuint386 = bitcast %union.rtunion_def* %arrayidx385 to i32*
  %183 = load i32, i32* %rtuint386, align 4
  %cmp387 = icmp ne i32 %183, 7
  br i1 %cmp387, label %if.then.392, label %lor.lhs.false.389

lor.lhs.false.389:                                ; preds = %if.end.364
  %184 = load i64, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa_store, i32 0, i32 0), align 8
  %cmp390 = icmp ne i64 %184, 7
  br i1 %cmp390, label %if.then.392, label %if.end.393

if.then.392:                                      ; preds = %lor.lhs.false.389, %if.end.364
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 1495, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @__FUNCTION__.dwarf2out_frame_debug_expr, i32 0, i32 0)) #8
  unreachable

if.end.393:                                       ; preds = %lor.lhs.false.389
  %185 = load i64, i64* %offset, align 8
  %186 = load i64, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa_store, i32 0, i32 1), align 8
  %add394 = add nsw i64 %186, %185
  store i64 %add394, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa_store, i32 0, i32 1), align 8
  %187 = load i64, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa, i32 0, i32 0), align 8
  %cmp395 = icmp eq i64 %187, 7
  br i1 %cmp395, label %if.then.397, label %if.end.398

if.then.397:                                      ; preds = %if.end.393
  %188 = load i64, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa_store, i32 0, i32 1), align 8
  store i64 %188, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa, i32 0, i32 1), align 8
  br label %if.end.398

if.end.398:                                       ; preds = %if.then.397, %if.end.393
  %189 = load i64, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa_store, i32 0, i32 1), align 8
  %sub399 = sub nsw i64 0, %189
  store i64 %sub399, i64* %offset, align 8
  br label %sw.epilog.554

sw.bb.400:                                        ; preds = %if.end.343, %if.end.343
  %190 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %191 = bitcast %struct.rtx_def* %190 to i32*
  %bf.load401 = load i32, i32* %191, align 8
  %bf.lshr402 = lshr i32 %bf.load401, 16
  %bf.clear403 = and i32 %bf.lshr402, 255
  %idxprom404 = sext i32 %bf.clear403 to i64
  %arrayidx405 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom404
  %192 = load i8, i8* %arrayidx405, align 1
  %conv406 = zext i8 %192 to i64
  store i64 %conv406, i64* %offset, align 8
  %193 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %fld407 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %193, i32 0, i32 1
  %arrayidx408 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld407, i32 0, i64 0
  %rtx409 = bitcast %union.rtunion_def* %arrayidx408 to %struct.rtx_def**
  %194 = load %struct.rtx_def*, %struct.rtx_def** %rtx409, align 8
  %195 = bitcast %struct.rtx_def* %194 to i32*
  %bf.load410 = load i32, i32* %195, align 8
  %bf.clear411 = and i32 %bf.load410, 65535
  %cmp412 = icmp eq i32 %bf.clear411, 97
  br i1 %cmp412, label %if.then.414, label %if.end.416

if.then.414:                                      ; preds = %sw.bb.400
  %196 = load i64, i64* %offset, align 8
  %sub415 = sub nsw i64 0, %196
  store i64 %sub415, i64* %offset, align 8
  br label %if.end.416

if.end.416:                                       ; preds = %if.then.414, %sw.bb.400
  %197 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %fld417 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %197, i32 0, i32 1
  %arrayidx418 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld417, i32 0, i64 0
  %rtx419 = bitcast %union.rtunion_def* %arrayidx418 to %struct.rtx_def**
  %198 = load %struct.rtx_def*, %struct.rtx_def** %rtx419, align 8
  %fld420 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %198, i32 0, i32 1
  %arrayidx421 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld420, i32 0, i64 0
  %rtx422 = bitcast %union.rtunion_def* %arrayidx421 to %struct.rtx_def**
  %199 = load %struct.rtx_def*, %struct.rtx_def** %rtx422, align 8
  %fld423 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %199, i32 0, i32 1
  %arrayidx424 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld423, i32 0, i64 0
  %rtuint425 = bitcast %union.rtunion_def* %arrayidx424 to i32*
  %200 = load i32, i32* %rtuint425, align 4
  %cmp426 = icmp ne i32 %200, 7
  br i1 %cmp426, label %if.then.431, label %lor.lhs.false.428

lor.lhs.false.428:                                ; preds = %if.end.416
  %201 = load i64, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa_store, i32 0, i32 0), align 8
  %cmp429 = icmp ne i64 %201, 7
  br i1 %cmp429, label %if.then.431, label %if.end.432

if.then.431:                                      ; preds = %lor.lhs.false.428, %if.end.416
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 1513, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @__FUNCTION__.dwarf2out_frame_debug_expr, i32 0, i32 0)) #8
  unreachable

if.end.432:                                       ; preds = %lor.lhs.false.428
  %202 = load i64, i64* %offset, align 8
  %203 = load i64, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa_store, i32 0, i32 1), align 8
  %add433 = add nsw i64 %203, %202
  store i64 %add433, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa_store, i32 0, i32 1), align 8
  %204 = load i64, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa, i32 0, i32 0), align 8
  %cmp434 = icmp eq i64 %204, 7
  br i1 %cmp434, label %if.then.436, label %if.end.437

if.then.436:                                      ; preds = %if.end.432
  %205 = load i64, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa_store, i32 0, i32 1), align 8
  store i64 %205, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa, i32 0, i32 1), align 8
  br label %if.end.437

if.end.437:                                       ; preds = %if.then.436, %if.end.432
  %206 = load i64, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa_store, i32 0, i32 1), align 8
  %sub438 = sub nsw i64 0, %206
  store i64 %sub438, i64* %offset, align 8
  br label %sw.epilog.554

sw.bb.439:                                        ; preds = %if.end.343, %if.end.343, %if.end.343
  %207 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %fld440 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %207, i32 0, i32 1
  %arrayidx441 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld440, i32 0, i64 0
  %rtx442 = bitcast %union.rtunion_def* %arrayidx441 to %struct.rtx_def**
  %208 = load %struct.rtx_def*, %struct.rtx_def** %rtx442, align 8
  %fld443 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %208, i32 0, i32 1
  %arrayidx444 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld443, i32 0, i64 1
  %rtx445 = bitcast %union.rtunion_def* %arrayidx444 to %struct.rtx_def**
  %209 = load %struct.rtx_def*, %struct.rtx_def** %rtx445, align 8
  %210 = bitcast %struct.rtx_def* %209 to i32*
  %bf.load446 = load i32, i32* %210, align 8
  %bf.clear447 = and i32 %bf.load446, 65535
  %cmp448 = icmp ne i32 %bf.clear447, 54
  br i1 %cmp448, label %if.then.450, label %if.end.451

if.then.450:                                      ; preds = %sw.bb.439
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 1528, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @__FUNCTION__.dwarf2out_frame_debug_expr, i32 0, i32 0)) #8
  unreachable

if.end.451:                                       ; preds = %sw.bb.439
  %211 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %fld452 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %211, i32 0, i32 1
  %arrayidx453 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld452, i32 0, i64 0
  %rtx454 = bitcast %union.rtunion_def* %arrayidx453 to %struct.rtx_def**
  %212 = load %struct.rtx_def*, %struct.rtx_def** %rtx454, align 8
  %fld455 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %212, i32 0, i32 1
  %arrayidx456 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld455, i32 0, i64 1
  %rtx457 = bitcast %union.rtunion_def* %arrayidx456 to %struct.rtx_def**
  %213 = load %struct.rtx_def*, %struct.rtx_def** %rtx457, align 8
  %fld458 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %213, i32 0, i32 1
  %arrayidx459 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld458, i32 0, i64 0
  %rtwint460 = bitcast %union.rtunion_def* %arrayidx459 to i64*
  %214 = load i64, i64* %rtwint460, align 8
  store i64 %214, i64* %offset, align 8
  %215 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %fld461 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %215, i32 0, i32 1
  %arrayidx462 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld461, i32 0, i64 0
  %rtx463 = bitcast %union.rtunion_def* %arrayidx462 to %struct.rtx_def**
  %216 = load %struct.rtx_def*, %struct.rtx_def** %rtx463, align 8
  %217 = bitcast %struct.rtx_def* %216 to i32*
  %bf.load464 = load i32, i32* %217, align 8
  %bf.clear465 = and i32 %bf.load464, 65535
  %cmp466 = icmp eq i32 %bf.clear465, 76
  br i1 %cmp466, label %if.then.468, label %if.end.470

if.then.468:                                      ; preds = %if.end.451
  %218 = load i64, i64* %offset, align 8
  %sub469 = sub nsw i64 0, %218
  store i64 %sub469, i64* %offset, align 8
  br label %if.end.470

if.end.470:                                       ; preds = %if.then.468, %if.end.451
  %219 = load i64, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa_store, i32 0, i32 0), align 8
  %220 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %fld471 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %220, i32 0, i32 1
  %arrayidx472 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld471, i32 0, i64 0
  %rtx473 = bitcast %union.rtunion_def* %arrayidx472 to %struct.rtx_def**
  %221 = load %struct.rtx_def*, %struct.rtx_def** %rtx473, align 8
  %fld474 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %221, i32 0, i32 1
  %arrayidx475 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld474, i32 0, i64 0
  %rtx476 = bitcast %union.rtunion_def* %arrayidx475 to %struct.rtx_def**
  %222 = load %struct.rtx_def*, %struct.rtx_def** %rtx476, align 8
  %fld477 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %222, i32 0, i32 1
  %arrayidx478 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld477, i32 0, i64 0
  %rtuint479 = bitcast %union.rtunion_def* %arrayidx478 to i32*
  %223 = load i32, i32* %rtuint479, align 4
  %conv480 = zext i32 %223 to i64
  %cmp481 = icmp eq i64 %219, %conv480
  br i1 %cmp481, label %if.then.483, label %if.else.485

if.then.483:                                      ; preds = %if.end.470
  %224 = load i64, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa_store, i32 0, i32 1), align 8
  %225 = load i64, i64* %offset, align 8
  %sub484 = sub nsw i64 %225, %224
  store i64 %sub484, i64* %offset, align 8
  br label %if.end.502

if.else.485:                                      ; preds = %if.end.470
  %226 = load i64, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa_temp, i32 0, i32 0), align 8
  %227 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %fld486 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %227, i32 0, i32 1
  %arrayidx487 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld486, i32 0, i64 0
  %rtx488 = bitcast %union.rtunion_def* %arrayidx487 to %struct.rtx_def**
  %228 = load %struct.rtx_def*, %struct.rtx_def** %rtx488, align 8
  %fld489 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %228, i32 0, i32 1
  %arrayidx490 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld489, i32 0, i64 0
  %rtx491 = bitcast %union.rtunion_def* %arrayidx490 to %struct.rtx_def**
  %229 = load %struct.rtx_def*, %struct.rtx_def** %rtx491, align 8
  %fld492 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %229, i32 0, i32 1
  %arrayidx493 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld492, i32 0, i64 0
  %rtuint494 = bitcast %union.rtunion_def* %arrayidx493 to i32*
  %230 = load i32, i32* %rtuint494, align 4
  %conv495 = zext i32 %230 to i64
  %cmp496 = icmp eq i64 %226, %conv495
  br i1 %cmp496, label %if.then.498, label %if.else.500

if.then.498:                                      ; preds = %if.else.485
  %231 = load i64, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa_temp, i32 0, i32 1), align 8
  %232 = load i64, i64* %offset, align 8
  %sub499 = sub nsw i64 %232, %231
  store i64 %sub499, i64* %offset, align 8
  br label %if.end.501

if.else.500:                                      ; preds = %if.else.485
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 1538, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @__FUNCTION__.dwarf2out_frame_debug_expr, i32 0, i32 0)) #8
  unreachable

if.end.501:                                       ; preds = %if.then.498
  br label %if.end.502

if.end.502:                                       ; preds = %if.end.501, %if.then.483
  br label %sw.epilog.554

sw.bb.503:                                        ; preds = %if.end.343
  %233 = load i64, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa_store, i32 0, i32 0), align 8
  %234 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %fld504 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %234, i32 0, i32 1
  %arrayidx505 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld504, i32 0, i64 0
  %rtx506 = bitcast %union.rtunion_def* %arrayidx505 to %struct.rtx_def**
  %235 = load %struct.rtx_def*, %struct.rtx_def** %rtx506, align 8
  %fld507 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %235, i32 0, i32 1
  %arrayidx508 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld507, i32 0, i64 0
  %rtuint509 = bitcast %union.rtunion_def* %arrayidx508 to i32*
  %236 = load i32, i32* %rtuint509, align 4
  %conv510 = zext i32 %236 to i64
  %cmp511 = icmp eq i64 %233, %conv510
  br i1 %cmp511, label %if.then.513, label %if.else.515

if.then.513:                                      ; preds = %sw.bb.503
  %237 = load i64, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa_store, i32 0, i32 1), align 8
  %sub514 = sub nsw i64 0, %237
  store i64 %sub514, i64* %offset, align 8
  br label %if.end.529

if.else.515:                                      ; preds = %sw.bb.503
  %238 = load i64, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa_temp, i32 0, i32 0), align 8
  %239 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %fld516 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %239, i32 0, i32 1
  %arrayidx517 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld516, i32 0, i64 0
  %rtx518 = bitcast %union.rtunion_def* %arrayidx517 to %struct.rtx_def**
  %240 = load %struct.rtx_def*, %struct.rtx_def** %rtx518, align 8
  %fld519 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %240, i32 0, i32 1
  %arrayidx520 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld519, i32 0, i64 0
  %rtuint521 = bitcast %union.rtunion_def* %arrayidx520 to i32*
  %241 = load i32, i32* %rtuint521, align 4
  %conv522 = zext i32 %241 to i64
  %cmp523 = icmp eq i64 %238, %conv522
  br i1 %cmp523, label %if.then.525, label %if.else.527

if.then.525:                                      ; preds = %if.else.515
  %242 = load i64, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa_temp, i32 0, i32 1), align 8
  %sub526 = sub nsw i64 0, %242
  store i64 %sub526, i64* %offset, align 8
  br label %if.end.528

if.else.527:                                      ; preds = %if.else.515
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 1549, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @__FUNCTION__.dwarf2out_frame_debug_expr, i32 0, i32 0)) #8
  unreachable

if.end.528:                                       ; preds = %if.then.525
  br label %if.end.529

if.end.529:                                       ; preds = %if.end.528, %if.then.513
  br label %sw.epilog.554

sw.bb.530:                                        ; preds = %if.end.343
  %243 = load i64, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa_temp, i32 0, i32 0), align 8
  %244 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %fld531 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %244, i32 0, i32 1
  %arrayidx532 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld531, i32 0, i64 0
  %rtx533 = bitcast %union.rtunion_def* %arrayidx532 to %struct.rtx_def**
  %245 = load %struct.rtx_def*, %struct.rtx_def** %rtx533, align 8
  %fld534 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %245, i32 0, i32 1
  %arrayidx535 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld534, i32 0, i64 0
  %rtx536 = bitcast %union.rtunion_def* %arrayidx535 to %struct.rtx_def**
  %246 = load %struct.rtx_def*, %struct.rtx_def** %rtx536, align 8
  %fld537 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %246, i32 0, i32 1
  %arrayidx538 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld537, i32 0, i64 0
  %rtuint539 = bitcast %union.rtunion_def* %arrayidx538 to i32*
  %247 = load i32, i32* %rtuint539, align 4
  %conv540 = zext i32 %247 to i64
  %cmp541 = icmp ne i64 %243, %conv540
  br i1 %cmp541, label %if.then.543, label %if.end.544

if.then.543:                                      ; preds = %sw.bb.530
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 1555, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @__FUNCTION__.dwarf2out_frame_debug_expr, i32 0, i32 0)) #8
  unreachable

if.end.544:                                       ; preds = %sw.bb.530
  %248 = load i64, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa_temp, i32 0, i32 1), align 8
  %sub545 = sub nsw i64 0, %248
  store i64 %sub545, i64* %offset, align 8
  %249 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %250 = bitcast %struct.rtx_def* %249 to i32*
  %bf.load546 = load i32, i32* %250, align 8
  %bf.lshr547 = lshr i32 %bf.load546, 16
  %bf.clear548 = and i32 %bf.lshr547, 255
  %idxprom549 = sext i32 %bf.clear548 to i64
  %arrayidx550 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom549
  %251 = load i8, i8* %arrayidx550, align 1
  %conv551 = zext i8 %251 to i64
  %252 = load i64, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa_temp, i32 0, i32 1), align 8
  %sub552 = sub nsw i64 %252, %conv551
  store i64 %sub552, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa_temp, i32 0, i32 1), align 8
  br label %sw.epilog.554

sw.default.553:                                   ; preds = %if.end.343
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 1561, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @__FUNCTION__.dwarf2out_frame_debug_expr, i32 0, i32 0)) #8
  unreachable

sw.epilog.554:                                    ; preds = %if.end.544, %if.end.529, %if.end.502, %if.end.437, %if.end.398
  %253 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %fld555 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %253, i32 0, i32 1
  %arrayidx556 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld555, i32 0, i64 0
  %rtuint557 = bitcast %union.rtunion_def* %arrayidx556 to i32*
  %254 = load i32, i32* %rtuint557, align 4
  %cmp558 = icmp ne i32 %254, 7
  br i1 %cmp558, label %land.lhs.true.560, label %if.end.600

land.lhs.true.560:                                ; preds = %sw.epilog.554
  %255 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %fld561 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %255, i32 0, i32 1
  %arrayidx562 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld561, i32 0, i64 0
  %rtuint563 = bitcast %union.rtunion_def* %arrayidx562 to i32*
  %256 = load i32, i32* %rtuint563, align 4
  %cmp564 = icmp ne i32 %256, 6
  br i1 %cmp564, label %land.lhs.true.566, label %if.end.600

land.lhs.true.566:                                ; preds = %land.lhs.true.560
  %257 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %fld567 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %257, i32 0, i32 1
  %arrayidx568 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld567, i32 0, i64 0
  %rtuint569 = bitcast %union.rtunion_def* %arrayidx568 to i32*
  %258 = load i32, i32* %rtuint569, align 4
  %conv570 = zext i32 %258 to i64
  %259 = load i64, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa, i32 0, i32 0), align 8
  %cmp571 = icmp eq i64 %conv570, %259
  br i1 %cmp571, label %if.then.573, label %if.end.600

if.then.573:                                      ; preds = %land.lhs.true.566
  %260 = load i64, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa, i32 0, i32 1), align 8
  %cmp574 = icmp eq i64 %260, 0
  br i1 %cmp574, label %if.then.576, label %if.else.577

if.then.576:                                      ; preds = %if.then.573
  %261 = load i8*, i8** %label.addr, align 8
  call void @def_cfa_1(i8* %261, %struct.cfa_loc* @cfa)
  %262 = load i8*, i8** %label.addr, align 8
  %263 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %264 = load i64, i64* %offset, align 8
  call void @queue_reg_save(i8* %262, %struct.rtx_def* %263, i64 %264)
  br label %sw.epilog.602

if.else.577:                                      ; preds = %if.then.573
  %265 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %fld578 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %265, i32 0, i32 1
  %arrayidx579 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld578, i32 0, i64 0
  %rtx580 = bitcast %union.rtunion_def* %arrayidx579 to %struct.rtx_def**
  %266 = load %struct.rtx_def*, %struct.rtx_def** %rtx580, align 8
  store %struct.rtx_def* %266, %struct.rtx_def** %x, align 8
  %267 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %268 = bitcast %struct.rtx_def* %267 to i32*
  %bf.load581 = load i32, i32* %268, align 8
  %bf.clear582 = and i32 %bf.load581, 65535
  %cmp583 = icmp ne i32 %bf.clear582, 61
  br i1 %cmp583, label %if.then.585, label %if.end.589

if.then.585:                                      ; preds = %if.else.577
  %269 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld586 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %269, i32 0, i32 1
  %arrayidx587 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld586, i32 0, i64 0
  %rtx588 = bitcast %union.rtunion_def* %arrayidx587 to %struct.rtx_def**
  %270 = load %struct.rtx_def*, %struct.rtx_def** %rtx588, align 8
  store %struct.rtx_def* %270, %struct.rtx_def** %x, align 8
  br label %if.end.589

if.end.589:                                       ; preds = %if.then.585, %if.else.577
  %271 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %272 = bitcast %struct.rtx_def* %271 to i32*
  %bf.load590 = load i32, i32* %272, align 8
  %bf.clear591 = and i32 %bf.load590, 65535
  %cmp592 = icmp ne i32 %bf.clear591, 61
  br i1 %cmp592, label %if.then.594, label %if.end.595

if.then.594:                                      ; preds = %if.end.589
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 1588, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @__FUNCTION__.dwarf2out_frame_debug_expr, i32 0, i32 0)) #8
  unreachable

if.end.595:                                       ; preds = %if.end.589
  %273 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld596 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %273, i32 0, i32 1
  %arrayidx597 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld596, i32 0, i64 0
  %rtuint598 = bitcast %union.rtunion_def* %arrayidx597 to i32*
  %274 = load i32, i32* %rtuint598, align 4
  %conv599 = zext i32 %274 to i64
  store i64 %conv599, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa, i32 0, i32 0), align 8
  %275 = load i64, i64* %offset, align 8
  store i64 %275, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa, i32 0, i32 2), align 8
  store i32 1, i32* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa, i32 0, i32 3), align 4
  %276 = load i8*, i8** %label.addr, align 8
  call void @def_cfa_1(i8* %276, %struct.cfa_loc* @cfa)
  br label %sw.epilog.602

if.end.600:                                       ; preds = %land.lhs.true.566, %land.lhs.true.560, %sw.epilog.554
  %277 = load i8*, i8** %label.addr, align 8
  call void @def_cfa_1(i8* %277, %struct.cfa_loc* @cfa)
  %278 = load i8*, i8** %label.addr, align 8
  %279 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %280 = load i64, i64* %offset, align 8
  call void @queue_reg_save(i8* %278, %struct.rtx_def* %279, i64 %280)
  br label %sw.epilog.602

sw.default.601:                                   ; preds = %if.end.33
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 1603, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @__FUNCTION__.dwarf2out_frame_debug_expr, i32 0, i32 0)) #8
  unreachable

sw.epilog.602:                                    ; preds = %for.end, %if.end.600, %if.end.595, %if.then.576, %sw.epilog.336
  ret void
}

; Function Attrs: nounwind uwtable
define void @dwarf2out_begin_prologue(i32 %line, i8* %file) #0 {
entry:
  %line.addr = alloca i32, align 4
  %file.addr = alloca i8*, align 8
  %label = alloca [30 x i8], align 16
  %fde = alloca %struct.dw_fde_struct*, align 8
  store i32 %line, i32* %line.addr, align 4
  store i8* %file, i8** %file.addr, align 8
  store %union.tree_node* null, %union.tree_node** @current_function_func_begin_label, align 8
  %call = call i32 @dwarf2out_do_frame()
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %if.end.23

if.end:                                           ; preds = %entry
  %0 = load i32, i32* @current_funcdef_number, align 4
  %inc = add i32 %0, 1
  store i32 %inc, i32* @current_funcdef_number, align 4
  %1 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  call void @function_section(%union.tree_node* %1)
  br label %do.body

do.body:                                          ; preds = %if.end
  %arraydecay = getelementptr inbounds [30 x i8], [30 x i8]* %label, i32 0, i32 0
  %2 = load i32, i32* @current_funcdef_number, align 4
  %call1 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i32 %2) #5
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body.2

do.body.2:                                        ; preds = %do.end
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8
  %4 = load i32, i32* @current_funcdef_number, align 4
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i32 %4)
  br label %do.end.4

do.end.4:                                         ; preds = %do.body.2
  %arraydecay5 = getelementptr inbounds [30 x i8], [30 x i8]* %label, i32 0, i32 0
  %call6 = call %union.tree_node* @get_identifier(i8* %arraydecay5)
  store %union.tree_node* %call6, %union.tree_node** @current_function_func_begin_label, align 8
  %5 = load i32, i32* @fde_table_in_use, align 4
  %6 = load i32, i32* @fde_table_allocated, align 4
  %cmp = icmp eq i32 %5, %6
  br i1 %cmp, label %if.then.7, label %if.end.9

if.then.7:                                        ; preds = %do.end.4
  %7 = load i32, i32* @fde_table_allocated, align 4
  %add = add i32 %7, 256
  store i32 %add, i32* @fde_table_allocated, align 4
  %8 = load %struct.dw_fde_struct*, %struct.dw_fde_struct** @fde_table, align 8
  %9 = bitcast %struct.dw_fde_struct* %8 to i8*
  %10 = load i32, i32* @fde_table_allocated, align 4
  %conv = zext i32 %10 to i64
  %mul = mul i64 %conv, 40
  %call8 = call i8* @xrealloc(i8* %9, i64 %mul)
  %11 = bitcast i8* %call8 to %struct.dw_fde_struct*
  store %struct.dw_fde_struct* %11, %struct.dw_fde_struct** @fde_table, align 8
  br label %if.end.9

if.end.9:                                         ; preds = %if.then.7, %do.end.4
  %12 = load i32, i32* @fde_table_in_use, align 4
  store i32 %12, i32* @current_funcdef_fde, align 4
  %13 = load i32, i32* @fde_table_in_use, align 4
  %inc10 = add i32 %13, 1
  store i32 %inc10, i32* @fde_table_in_use, align 4
  %idxprom = zext i32 %13 to i64
  %14 = load %struct.dw_fde_struct*, %struct.dw_fde_struct** @fde_table, align 8
  %arrayidx = getelementptr inbounds %struct.dw_fde_struct, %struct.dw_fde_struct* %14, i64 %idxprom
  store %struct.dw_fde_struct* %arrayidx, %struct.dw_fde_struct** %fde, align 8
  %arraydecay11 = getelementptr inbounds [30 x i8], [30 x i8]* %label, i32 0, i32 0
  %call12 = call noalias i8* @xstrdup(i8* %arraydecay11)
  %15 = load %struct.dw_fde_struct*, %struct.dw_fde_struct** %fde, align 8
  %dw_fde_begin = getelementptr inbounds %struct.dw_fde_struct, %struct.dw_fde_struct* %15, i32 0, i32 0
  store i8* %call12, i8** %dw_fde_begin, align 8
  %16 = load %struct.dw_fde_struct*, %struct.dw_fde_struct** %fde, align 8
  %dw_fde_current_label = getelementptr inbounds %struct.dw_fde_struct, %struct.dw_fde_struct* %16, i32 0, i32 1
  store i8* null, i8** %dw_fde_current_label, align 8
  %17 = load %struct.dw_fde_struct*, %struct.dw_fde_struct** %fde, align 8
  %dw_fde_end = getelementptr inbounds %struct.dw_fde_struct, %struct.dw_fde_struct* %17, i32 0, i32 2
  store i8* null, i8** %dw_fde_end, align 8
  %18 = load %struct.dw_fde_struct*, %struct.dw_fde_struct** %fde, align 8
  %dw_fde_cfi = getelementptr inbounds %struct.dw_fde_struct, %struct.dw_fde_struct* %18, i32 0, i32 3
  store %struct.dw_cfi_struct* null, %struct.dw_cfi_struct** %dw_fde_cfi, align 8
  %19 = load i32, i32* @current_funcdef_number, align 4
  %20 = load %struct.dw_fde_struct*, %struct.dw_fde_struct** %fde, align 8
  %funcdef_number = getelementptr inbounds %struct.dw_fde_struct, %struct.dw_fde_struct* %20, i32 0, i32 4
  store i32 %19, i32* %funcdef_number, align 4
  %21 = load i32, i32* @current_function_nothrow, align 4
  %22 = load %struct.dw_fde_struct*, %struct.dw_fde_struct** %fde, align 8
  %nothrow = getelementptr inbounds %struct.dw_fde_struct, %struct.dw_fde_struct* %22, i32 0, i32 5
  %23 = trunc i32 %21 to i8
  %bf.load = load i8, i8* %nothrow, align 4
  %bf.value = and i8 %23, 1
  %bf.clear = and i8 %bf.load, -2
  %bf.set = or i8 %bf.clear, %bf.value
  store i8 %bf.set, i8* %nothrow, align 4
  %bf.result.cast = zext i8 %bf.value to i32
  %24 = load %struct.function*, %struct.function** @cfun, align 8
  %uses_eh_lsda = getelementptr inbounds %struct.function, %struct.function* %24, i32 0, i32 56
  %25 = bitcast i24* %uses_eh_lsda to i32*
  %bf.load13 = load i32, i32* %25, align 8
  %bf.lshr = lshr i32 %bf.load13, 22
  %bf.clear14 = and i32 %bf.lshr, 1
  %26 = load %struct.dw_fde_struct*, %struct.dw_fde_struct** %fde, align 8
  %uses_eh_lsda15 = getelementptr inbounds %struct.dw_fde_struct, %struct.dw_fde_struct* %26, i32 0, i32 5
  %27 = trunc i32 %bf.clear14 to i8
  %bf.load16 = load i8, i8* %uses_eh_lsda15, align 4
  %bf.value17 = and i8 %27, 1
  %bf.shl = shl i8 %bf.value17, 1
  %bf.clear18 = and i8 %bf.load16, -3
  %bf.set19 = or i8 %bf.clear18, %bf.shl
  store i8 %bf.set19, i8* %uses_eh_lsda15, align 4
  %bf.result.cast20 = zext i8 %bf.value17 to i32
  store i64 0, i64* @old_args_size, align 8
  store i64 0, i64* @args_size, align 8
  %28 = load i8*, i8** %file.addr, align 8
  %tobool21 = icmp ne i8* %28, null
  br i1 %tobool21, label %if.then.22, label %if.end.23

if.then.22:                                       ; preds = %if.end.9
  %29 = load i32, i32* %line.addr, align 4
  %30 = load i8*, i8** %file.addr, align 8
  call void @dwarf2out_source_line(i32 %29, i8* %30)
  br label %if.end.23

if.end.23:                                        ; preds = %if.then, %if.then.22, %if.end.9
  ret void
}

declare void @function_section(%union.tree_node*) #1

declare i32 @fprintf(%struct._IO_FILE*, i8*, ...) #1

declare %union.tree_node* @get_identifier(i8*) #1

declare i8* @xrealloc(i8*, i64) #1

declare noalias i8* @xstrdup(i8*) #1

; Function Attrs: nounwind uwtable
define internal void @dwarf2out_source_line(i32 %line, i8* %filename) #0 {
entry:
  %line.addr = alloca i32, align 4
  %filename.addr = alloca i8*, align 8
  %file_num = alloca i32, align 4
  store i32 %line, i32* %line.addr, align 4
  store i8* %filename, i8** %filename.addr, align 8
  %0 = load i32, i32* @debug_info_level, align 4
  %cmp = icmp uge i32 %0, 2
  br i1 %cmp, label %if.then, label %if.end.8

if.then:                                          ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  call void @function_section(%union.tree_node* %1)
  %2 = load i32, i32* @flag_debug_asm, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %if.then.1, label %if.end

if.then.1:                                        ; preds = %if.then
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8
  %4 = load i8*, i8** %filename.addr, align 8
  %5 = load i32, i32* %line.addr, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.395, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.396, i32 0, i32 0), i8* %4, i32 %5)
  br label %if.end

if.end:                                           ; preds = %if.then.1, %if.then
  %6 = load i8*, i8** %filename.addr, align 8
  %call2 = call i32 @lookup_filename(i8* %6)
  store i32 %call2, i32* %file_num, align 4
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8
  %8 = load i32, i32* %file_num, align 4
  %9 = load i32, i32* %line.addr, align 4
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.397, i32 0, i32 0), i32 %8, i32 %9)
  %10 = load i32, i32* @line_info_table_in_use, align 4
  %inc = add i32 %10, 1
  store i32 %inc, i32* @line_info_table_in_use, align 4
  %11 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %decl = bitcast %union.tree_node* %11 to %struct.tree_decl*
  %section_name = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl, i32 0, i32 15
  %12 = load %union.tree_node*, %union.tree_node** %section_name, align 8
  %tobool4 = icmp ne %union.tree_node* %12, null
  br i1 %tobool4, label %if.then.5, label %if.end.7

if.then.5:                                        ; preds = %if.end
  %13 = load i32, i32* @separate_line_info_table_in_use, align 4
  %inc6 = add i32 %13, 1
  store i32 %inc6, i32* @separate_line_info_table_in_use, align 4
  br label %if.end.7

if.end.7:                                         ; preds = %if.then.5, %if.end
  br label %if.end.8

if.end.8:                                         ; preds = %if.end.7, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define void @dwarf2out_end_epilogue() #0 {
entry:
  %fde = alloca %struct.dw_fde_struct*, align 8
  %label = alloca [30 x i8], align 16
  br label %do.body

do.body:                                          ; preds = %entry
  %arraydecay = getelementptr inbounds [30 x i8], [30 x i8]* %label, i32 0, i32 0
  %0 = load i32, i32* @current_funcdef_number, align 4
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i32 0, i32 0), i32 %0) #5
  br label %do.end

do.end:                                           ; preds = %do.body
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8
  %arraydecay1 = getelementptr inbounds [30 x i8], [30 x i8]* %label, i32 0, i32 0
  call void @assemble_name(%struct._IO_FILE* %1, i8* %arraydecay1)
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8
  %call2 = call i32 @fputs(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), %struct._IO_FILE* %2)
  %3 = load i32, i32* @fde_table_in_use, align 4
  %sub = sub i32 %3, 1
  %idxprom = zext i32 %sub to i64
  %4 = load %struct.dw_fde_struct*, %struct.dw_fde_struct** @fde_table, align 8
  %arrayidx = getelementptr inbounds %struct.dw_fde_struct, %struct.dw_fde_struct* %4, i64 %idxprom
  store %struct.dw_fde_struct* %arrayidx, %struct.dw_fde_struct** %fde, align 8
  %arraydecay3 = getelementptr inbounds [30 x i8], [30 x i8]* %label, i32 0, i32 0
  %call4 = call noalias i8* @xstrdup(i8* %arraydecay3)
  %5 = load %struct.dw_fde_struct*, %struct.dw_fde_struct** %fde, align 8
  %dw_fde_end = getelementptr inbounds %struct.dw_fde_struct, %struct.dw_fde_struct* %5, i32 0, i32 2
  store i8* %call4, i8** %dw_fde_end, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define void @dwarf2out_frame_init() #0 {
entry:
  %call = call noalias i8* @xcalloc(i64 256, i64 40)
  %0 = bitcast i8* %call to %struct.dw_fde_struct*
  store %struct.dw_fde_struct* %0, %struct.dw_fde_struct** @fde_table, align 8
  store i32 256, i32* @fde_table_allocated, align 4
  store i32 0, i32* @fde_table_in_use, align 4
  %1 = load i32, i32* @target_flags, align 4
  %and = and i32 %1, 33554432
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, i32 8, i32 4
  %conv = sext i32 %cond to i64
  call void @dwarf2out_def_cfa(i8* null, i32 7, i64 %conv)
  %call1 = call %struct.rtx_def* @gen_rtx_REG(i32 0, i32 7)
  %call2 = call %struct.rtx_def* @gen_rtx_MEM(i32 0, %struct.rtx_def* %call1)
  call void @initial_return_save(%struct.rtx_def* %call2)
  ret void
}

declare noalias i8* @xcalloc(i64, i64) #1

; Function Attrs: nounwind uwtable
define internal void @initial_return_save(%struct.rtx_def* %rtl) #0 {
entry:
  %rtl.addr = alloca %struct.rtx_def*, align 8
  %reg = alloca i32, align 4
  %offset = alloca i64, align 8
  store %struct.rtx_def* %rtl, %struct.rtx_def** %rtl.addr, align 8
  store i32 -1, i32* %reg, align 4
  store i64 0, i64* %offset, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %sw.default.59 [
    i32 61, label %sw.bb
    i32 66, label %sw.bb.7
    i32 75, label %sw.bb.47
  ]

sw.bb:                                            ; preds = %entry
  %2 = load i32, i32* @target_flags, align 4
  %and = and i32 %2, 33554432
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %sw.bb
  %3 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx to i32*
  %4 = load i32, i32* %rtuint, align 4
  %idxprom = zext i32 %4 to i64
  %arrayidx1 = getelementptr inbounds [53 x i32], [53 x i32]* @dbx64_register_map, i32 0, i64 %idxprom
  %5 = load i32, i32* %arrayidx1, align 4
  br label %cond.end

cond.false:                                       ; preds = %sw.bb
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  %fld2 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i32 0, i64 0
  %rtuint4 = bitcast %union.rtunion_def* %arrayidx3 to i32*
  %7 = load i32, i32* %rtuint4, align 4
  %idxprom5 = zext i32 %7 to i64
  %arrayidx6 = getelementptr inbounds [53 x i32], [53 x i32]* @svr4_dbx_register_map, i32 0, i64 %idxprom5
  %8 = load i32, i32* %arrayidx6, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %5, %cond.true ], [ %8, %cond.false ]
  store i32 %cond, i32* %reg, align 4
  br label %sw.epilog.60

sw.bb.7:                                          ; preds = %entry
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  %fld8 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1
  %arrayidx9 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld8, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx9 to %struct.rtx_def**
  %10 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %10, %struct.rtx_def** %rtl.addr, align 8
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  %12 = bitcast %struct.rtx_def* %11 to i32*
  %bf.load10 = load i32, i32* %12, align 8
  %bf.clear11 = and i32 %bf.load10, 65535
  switch i32 %bf.clear11, label %sw.default [
    i32 61, label %sw.bb.12
    i32 75, label %sw.bb.16
    i32 76, label %sw.bb.31
  ]

sw.bb.12:                                         ; preds = %sw.bb.7
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  %fld13 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1
  %arrayidx14 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld13, i32 0, i64 0
  %rtuint15 = bitcast %union.rtunion_def* %arrayidx14 to i32*
  %14 = load i32, i32* %rtuint15, align 4
  %cmp = icmp ne i32 %14, 7
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %sw.bb.12
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 894, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__FUNCTION__.initial_return_save, i32 0, i32 0)) #8
  unreachable

if.end:                                           ; preds = %sw.bb.12
  store i64 0, i64* %offset, align 8
  br label %sw.epilog

sw.bb.16:                                         ; preds = %sw.bb.7
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  %fld17 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1
  %arrayidx18 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld17, i32 0, i64 0
  %rtx19 = bitcast %union.rtunion_def* %arrayidx18 to %struct.rtx_def**
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rtx19, align 8
  %fld20 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1
  %arrayidx21 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld20, i32 0, i64 0
  %rtuint22 = bitcast %union.rtunion_def* %arrayidx21 to i32*
  %17 = load i32, i32* %rtuint22, align 4
  %cmp23 = icmp ne i32 %17, 7
  br i1 %cmp23, label %if.then.24, label %if.end.25

if.then.24:                                       ; preds = %sw.bb.16
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 900, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__FUNCTION__.initial_return_save, i32 0, i32 0)) #8
  unreachable

if.end.25:                                        ; preds = %sw.bb.16
  %18 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  %fld26 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1
  %arrayidx27 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld26, i32 0, i64 1
  %rtx28 = bitcast %union.rtunion_def* %arrayidx27 to %struct.rtx_def**
  %19 = load %struct.rtx_def*, %struct.rtx_def** %rtx28, align 8
  %fld29 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1
  %arrayidx30 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld29, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx30 to i64*
  %20 = load i64, i64* %rtwint, align 8
  store i64 %20, i64* %offset, align 8
  br label %sw.epilog

sw.bb.31:                                         ; preds = %sw.bb.7
  %21 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  %fld32 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1
  %arrayidx33 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld32, i32 0, i64 0
  %rtx34 = bitcast %union.rtunion_def* %arrayidx33 to %struct.rtx_def**
  %22 = load %struct.rtx_def*, %struct.rtx_def** %rtx34, align 8
  %fld35 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1
  %arrayidx36 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld35, i32 0, i64 0
  %rtuint37 = bitcast %union.rtunion_def* %arrayidx36 to i32*
  %23 = load i32, i32* %rtuint37, align 4
  %cmp38 = icmp ne i32 %23, 7
  br i1 %cmp38, label %if.then.39, label %if.end.40

if.then.39:                                       ; preds = %sw.bb.31
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 906, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__FUNCTION__.initial_return_save, i32 0, i32 0)) #8
  unreachable

if.end.40:                                        ; preds = %sw.bb.31
  %24 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  %fld41 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1
  %arrayidx42 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld41, i32 0, i64 1
  %rtx43 = bitcast %union.rtunion_def* %arrayidx42 to %struct.rtx_def**
  %25 = load %struct.rtx_def*, %struct.rtx_def** %rtx43, align 8
  %fld44 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1
  %arrayidx45 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld44, i32 0, i64 0
  %rtwint46 = bitcast %union.rtunion_def* %arrayidx45 to i64*
  %26 = load i64, i64* %rtwint46, align 8
  %sub = sub nsw i64 0, %26
  store i64 %sub, i64* %offset, align 8
  br label %sw.epilog

sw.default:                                       ; preds = %sw.bb.7
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 911, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__FUNCTION__.initial_return_save, i32 0, i32 0)) #8
  unreachable

sw.epilog:                                        ; preds = %if.end.40, %if.end.25, %if.end
  br label %sw.epilog.60

sw.bb.47:                                         ; preds = %entry
  %27 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  %fld48 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1
  %arrayidx49 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld48, i32 0, i64 1
  %rtx50 = bitcast %union.rtunion_def* %arrayidx49 to %struct.rtx_def**
  %28 = load %struct.rtx_def*, %struct.rtx_def** %rtx50, align 8
  %29 = bitcast %struct.rtx_def* %28 to i32*
  %bf.load51 = load i32, i32* %29, align 8
  %bf.clear52 = and i32 %bf.load51, 65535
  %cmp53 = icmp ne i32 %bf.clear52, 54
  br i1 %cmp53, label %if.then.54, label %if.end.55

if.then.54:                                       ; preds = %sw.bb.47
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 921, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__FUNCTION__.initial_return_save, i32 0, i32 0)) #8
  unreachable

if.end.55:                                        ; preds = %sw.bb.47
  %30 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  %fld56 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %30, i32 0, i32 1
  %arrayidx57 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld56, i32 0, i64 0
  %rtx58 = bitcast %union.rtunion_def* %arrayidx57 to %struct.rtx_def**
  %31 = load %struct.rtx_def*, %struct.rtx_def** %rtx58, align 8
  call void @initial_return_save(%struct.rtx_def* %31)
  br label %return

sw.default.59:                                    ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 926, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__FUNCTION__.initial_return_save, i32 0, i32 0)) #8
  unreachable

sw.epilog.60:                                     ; preds = %sw.epilog, %cond.end
  %32 = load i32, i32* @target_flags, align 4
  %and61 = and i32 %32, 33554432
  %tobool62 = icmp ne i32 %and61, 0
  %cond63 = select i1 %tobool62, i32 16, i32 8
  %33 = load i32, i32* %reg, align 4
  %34 = load i64, i64* %offset, align 8
  %35 = load i64, i64* getelementptr inbounds (%struct.cfa_loc, %struct.cfa_loc* @cfa, i32 0, i32 1), align 8
  %sub64 = sub nsw i64 %34, %35
  call void @reg_save(i8* null, i32 %cond63, i32 %33, i64 %sub64)
  br label %return

return:                                           ; preds = %sw.epilog.60, %if.end.55
  ret void
}

declare %struct.rtx_def* @gen_rtx_REG(i32, i32) #1

; Function Attrs: nounwind uwtable
define void @dwarf2out_frame_finish() #0 {
entry:
  %0 = load i32, i32* @write_symbols, align 4
  %cmp = icmp eq i32 %0, 4
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* @write_symbols, align 4
  %cmp1 = icmp eq i32 %1, 7
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  call void @output_call_frame_info(i32 0)
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %2 = load i32, i32* @flag_unwind_tables, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %if.then.4, label %lor.lhs.false.2

lor.lhs.false.2:                                  ; preds = %if.end
  %3 = load i32, i32* @flag_exceptions, align 4
  %tobool3 = icmp ne i32 %3, 0
  br i1 %tobool3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %lor.lhs.false.2, %if.end
  call void @output_call_frame_info(i32 1)
  br label %if.end.5

if.end.5:                                         ; preds = %if.then.4, %lor.lhs.false.2
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @output_call_frame_info(i32 %for_eh) #0 {
entry:
  %for_eh.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %fde = alloca %struct.dw_fde_struct*, align 8
  %cfi = alloca %struct.dw_cfi_struct*, align 8
  %l1 = alloca [20 x i8], align 16
  %l2 = alloca [20 x i8], align 16
  %section_start_label = alloca [20 x i8], align 16
  %any_lsda_needed = alloca i32, align 4
  %augmentation = alloca [6 x i8], align 1
  %augmentation_size = alloca i32, align 4
  %fde_encoding = alloca i32, align 4
  %per_encoding = alloca i32, align 4
  %lsda_encoding = alloca i32, align 4
  %any_eh_needed = alloca i32, align 4
  %p = alloca i8*, align 8
  %offset = alloca i32, align 4
  %pad = alloca i32, align 4
  %size = alloca i32, align 4
  %offset264 = alloca i32, align 4
  %pad269 = alloca i32, align 4
  store i32 %for_eh, i32* %for_eh.addr, align 4
  store i32 0, i32* %any_lsda_needed, align 4
  store i32 0, i32* %fde_encoding, align 4
  store i32 0, i32* %per_encoding, align 4
  store i32 0, i32* %lsda_encoding, align 4
  %0 = load i32, i32* %for_eh.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %if.end.14

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @flag_asynchronous_unwind_tables, align 4
  store i32 %1, i32* %any_eh_needed, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* @fde_table_in_use, align 4
  %cmp = icmp ult i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %i, align 4
  %idxprom = zext i32 %4 to i64
  %5 = load %struct.dw_fde_struct*, %struct.dw_fde_struct** @fde_table, align 8
  %arrayidx = getelementptr inbounds %struct.dw_fde_struct, %struct.dw_fde_struct* %5, i64 %idxprom
  %uses_eh_lsda = getelementptr inbounds %struct.dw_fde_struct, %struct.dw_fde_struct* %arrayidx, i32 0, i32 5
  %bf.load = load i8, i8* %uses_eh_lsda, align 4
  %bf.lshr = lshr i8 %bf.load, 1
  %bf.clear = and i8 %bf.lshr, 1
  %bf.cast = zext i8 %bf.clear to i32
  %tobool1 = icmp ne i32 %bf.cast, 0
  br i1 %tobool1, label %if.then.2, label %if.else

if.then.2:                                        ; preds = %for.body
  store i32 1, i32* %any_lsda_needed, align 4
  store i32 1, i32* %any_eh_needed, align 4
  br label %if.end.10

if.else:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %idxprom3 = zext i32 %6 to i64
  %7 = load %struct.dw_fde_struct*, %struct.dw_fde_struct** @fde_table, align 8
  %arrayidx4 = getelementptr inbounds %struct.dw_fde_struct, %struct.dw_fde_struct* %7, i64 %idxprom3
  %nothrow = getelementptr inbounds %struct.dw_fde_struct, %struct.dw_fde_struct* %arrayidx4, i32 0, i32 5
  %bf.load5 = load i8, i8* %nothrow, align 4
  %bf.clear6 = and i8 %bf.load5, 1
  %bf.cast7 = zext i8 %bf.clear6 to i32
  %tobool8 = icmp ne i32 %bf.cast7, 0
  br i1 %tobool8, label %if.end, label %if.then.9

if.then.9:                                        ; preds = %if.else
  store i32 1, i32* %any_eh_needed, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.9, %if.else
  br label %if.end.10

if.end.10:                                        ; preds = %if.end, %if.then.2
  br label %for.inc

for.inc:                                          ; preds = %if.end.10
  %8 = load i32, i32* %i, align 4
  %inc = add i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %9 = load i32, i32* %any_eh_needed, align 4
  %tobool11 = icmp ne i32 %9, 0
  br i1 %tobool11, label %if.end.13, label %if.then.12

if.then.12:                                       ; preds = %for.end
  br label %if.end.381

if.end.13:                                        ; preds = %for.end
  br label %if.end.14

if.end.14:                                        ; preds = %if.end.13, %entry
  %10 = load i32, i32* @flag_debug_asm, align 4
  %tobool15 = icmp ne i32 %10, 0
  br i1 %tobool15, label %if.then.16, label %if.end.17

if.then.16:                                       ; preds = %if.end.14
  call void @app_enable()
  br label %if.end.17

if.end.17:                                        ; preds = %if.then.16, %if.end.14
  %11 = load i32, i32* %for_eh.addr, align 4
  %tobool18 = icmp ne i32 %11, 0
  br i1 %tobool18, label %if.then.19, label %if.else.20

if.then.19:                                       ; preds = %if.end.17
  %12 = load void ()*, void ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 0, i32 12), align 8
  call void %12()
  br label %if.end.21

if.else.20:                                       ; preds = %if.end.17
  call void @named_section_flags(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.156, i32 0, i32 0), i32 1024)
  br label %if.end.21

if.end.21:                                        ; preds = %if.else.20, %if.then.19
  br label %do.body

do.body:                                          ; preds = %if.end.21
  %arraydecay = getelementptr inbounds [20 x i8], [20 x i8]* %section_start_label, i32 0, i32 0
  %13 = load i32, i32* %for_eh.addr, align 4
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.157, i32 0, i32 0), i32 %13) #5
  br label %do.end

do.end:                                           ; preds = %do.body
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8
  %arraydecay22 = getelementptr inbounds [20 x i8], [20 x i8]* %section_start_label, i32 0, i32 0
  call void @assemble_name(%struct._IO_FILE* %14, i8* %arraydecay22)
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8
  %call23 = call i32 @fputs(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), %struct._IO_FILE* %15)
  br label %do.body.24

do.body.24:                                       ; preds = %do.end
  %arraydecay25 = getelementptr inbounds [20 x i8], [20 x i8]* %l1, i32 0, i32 0
  %16 = load i32, i32* %for_eh.addr, align 4
  %call26 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay25, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.158, i32 0, i32 0), i32 %16) #5
  br label %do.end.27

do.end.27:                                        ; preds = %do.body.24
  br label %do.body.28

do.body.28:                                       ; preds = %do.end.27
  %arraydecay29 = getelementptr inbounds [20 x i8], [20 x i8]* %l2, i32 0, i32 0
  %17 = load i32, i32* %for_eh.addr, align 4
  %call30 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay29, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.159, i32 0, i32 0), i32 %17) #5
  br label %do.end.31

do.end.31:                                        ; preds = %do.body.28
  %18 = load i32, i32* %for_eh.addr, align 4
  %tobool32 = icmp ne i32 %18, 0
  %cond = select i1 %tobool32, i32 4, i32 4
  %arraydecay33 = getelementptr inbounds [20 x i8], [20 x i8]* %l2, i32 0, i32 0
  %arraydecay34 = getelementptr inbounds [20 x i8], [20 x i8]* %l1, i32 0, i32 0
  call void (i32, i8*, i8*, i8*, ...) @dw2_asm_output_delta(i32 %cond, i8* %arraydecay33, i8* %arraydecay34, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.160, i32 0, i32 0))
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8
  %arraydecay35 = getelementptr inbounds [20 x i8], [20 x i8]* %l1, i32 0, i32 0
  call void @assemble_name(%struct._IO_FILE* %19, i8* %arraydecay35)
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8
  %call36 = call i32 @fputs(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), %struct._IO_FILE* %20)
  %21 = load i32, i32* %for_eh.addr, align 4
  %tobool37 = icmp ne i32 %21, 0
  %cond38 = select i1 %tobool37, i32 4, i32 4
  %22 = load i32, i32* %for_eh.addr, align 4
  %tobool39 = icmp ne i32 %22, 0
  %cond40 = select i1 %tobool39, i32 0, i32 -1
  %conv = zext i32 %cond40 to i64
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 %cond38, i64 %conv, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.161, i32 0, i32 0))
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 1, i64 1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.162, i32 0, i32 0))
  %arrayidx41 = getelementptr inbounds [6 x i8], [6 x i8]* %augmentation, i32 0, i64 0
  store i8 0, i8* %arrayidx41, align 1
  store i32 0, i32* %augmentation_size, align 4
  %23 = load i32, i32* %for_eh.addr, align 4
  %tobool42 = icmp ne i32 %23, 0
  br i1 %tobool42, label %if.then.43, label %if.end.109

if.then.43:                                       ; preds = %do.end.31
  %24 = load i32, i32* @flag_pic, align 4
  %tobool44 = icmp ne i32 %24, 0
  %cond45 = select i1 %tobool44, i32 27, i32 0
  store i32 %cond45, i32* %fde_encoding, align 4
  %25 = load i32, i32* @flag_pic, align 4
  %tobool46 = icmp ne i32 %25, 0
  %cond47 = select i1 %tobool46, i32 155, i32 0
  store i32 %cond47, i32* %per_encoding, align 4
  %26 = load i32, i32* @flag_pic, align 4
  %tobool48 = icmp ne i32 %26, 0
  %cond49 = select i1 %tobool48, i32 27, i32 0
  store i32 %cond49, i32* %lsda_encoding, align 4
  %arraydecay50 = getelementptr inbounds [6 x i8], [6 x i8]* %augmentation, i32 0, i32 0
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay50, i64 1
  store i8* %add.ptr, i8** %p, align 8
  %27 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([97 x %struct.rtx_def*], [97 x %struct.rtx_def*]* @libfunc_table, i32 0, i64 19), align 8
  %tobool51 = icmp ne %struct.rtx_def* %27, null
  br i1 %tobool51, label %if.then.52, label %if.end.55

if.then.52:                                       ; preds = %if.then.43
  %28 = load i8*, i8** %p, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %28, i32 1
  store i8* %incdec.ptr, i8** %p, align 8
  store i8 80, i8* %28, align 1
  %29 = load i32, i32* %per_encoding, align 4
  %call53 = call i32 @size_of_encoded_value(i32 %29)
  %add = add nsw i32 1, %call53
  %30 = load i32, i32* %augmentation_size, align 4
  %add54 = add nsw i32 %30, %add
  store i32 %add54, i32* %augmentation_size, align 4
  br label %if.end.55

if.end.55:                                        ; preds = %if.then.52, %if.then.43
  %31 = load i32, i32* %any_lsda_needed, align 4
  %tobool56 = icmp ne i32 %31, 0
  br i1 %tobool56, label %if.then.57, label %if.end.60

if.then.57:                                       ; preds = %if.end.55
  %32 = load i8*, i8** %p, align 8
  %incdec.ptr58 = getelementptr inbounds i8, i8* %32, i32 1
  store i8* %incdec.ptr58, i8** %p, align 8
  store i8 76, i8* %32, align 1
  %33 = load i32, i32* %augmentation_size, align 4
  %add59 = add nsw i32 %33, 1
  store i32 %add59, i32* %augmentation_size, align 4
  br label %if.end.60

if.end.60:                                        ; preds = %if.then.57, %if.end.55
  %34 = load i32, i32* %fde_encoding, align 4
  %cmp61 = icmp ne i32 %34, 0
  br i1 %cmp61, label %if.then.63, label %if.end.66

if.then.63:                                       ; preds = %if.end.60
  %35 = load i8*, i8** %p, align 8
  %incdec.ptr64 = getelementptr inbounds i8, i8* %35, i32 1
  store i8* %incdec.ptr64, i8** %p, align 8
  store i8 82, i8* %35, align 1
  %36 = load i32, i32* %augmentation_size, align 4
  %add65 = add nsw i32 %36, 1
  store i32 %add65, i32* %augmentation_size, align 4
  br label %if.end.66

if.end.66:                                        ; preds = %if.then.63, %if.end.60
  %37 = load i8*, i8** %p, align 8
  %arraydecay67 = getelementptr inbounds [6 x i8], [6 x i8]* %augmentation, i32 0, i32 0
  %add.ptr68 = getelementptr inbounds i8, i8* %arraydecay67, i64 1
  %cmp69 = icmp ugt i8* %37, %add.ptr68
  br i1 %cmp69, label %if.then.71, label %if.end.73

if.then.71:                                       ; preds = %if.end.66
  %arrayidx72 = getelementptr inbounds [6 x i8], [6 x i8]* %augmentation, i32 0, i64 0
  store i8 122, i8* %arrayidx72, align 1
  %38 = load i8*, i8** %p, align 8
  store i8 0, i8* %38, align 1
  br label %if.end.73

if.end.73:                                        ; preds = %if.then.71, %if.end.66
  %39 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([97 x %struct.rtx_def*], [97 x %struct.rtx_def*]* @libfunc_table, i32 0, i64 19), align 8
  %tobool74 = icmp ne %struct.rtx_def* %39, null
  br i1 %tobool74, label %land.lhs.true, label %if.end.108

land.lhs.true:                                    ; preds = %if.end.73
  %40 = load i32, i32* %per_encoding, align 4
  %cmp75 = icmp eq i32 %40, 80
  br i1 %cmp75, label %if.then.77, label %if.end.108

if.then.77:                                       ; preds = %land.lhs.true
  %arraydecay78 = getelementptr inbounds [6 x i8], [6 x i8]* %augmentation, i32 0, i32 0
  %call79 = call i64 @strlen(i8* %arraydecay78) #7
  %add80 = add i64 9, %call79
  %add81 = add i64 %add80, 1
  %call82 = call i32 @size_of_uleb128(i64 1)
  %conv83 = sext i32 %call82 to i64
  %add84 = add i64 %add81, %conv83
  %41 = load i32, i32* @target_flags, align 4
  %and = and i32 %41, 33554432
  %tobool85 = icmp ne i32 %and, 0
  %cond86 = select i1 %tobool85, i32 8, i32 4
  %sub = sub nsw i32 0, %cond86
  %conv87 = sext i32 %sub to i64
  %call88 = call i32 @size_of_sleb128(i64 %conv87)
  %conv89 = sext i32 %call88 to i64
  %add90 = add i64 %add84, %conv89
  %add91 = add i64 %add90, 1
  %add92 = add i64 %add91, 1
  %add93 = add i64 %add92, 1
  %conv94 = trunc i64 %add93 to i32
  store i32 %conv94, i32* %offset, align 4
  %42 = load i32, i32* %offset, align 4
  %sub95 = sub nsw i32 0, %42
  %43 = load i32, i32* @target_flags, align 4
  %and96 = and i32 %43, 33554432
  %tobool97 = icmp ne i32 %and96, 0
  %cond98 = select i1 %tobool97, i32 64, i32 32
  %div = sdiv i32 %cond98, 8
  %sub99 = sub nsw i32 %div, 1
  %and100 = and i32 %sub95, %sub99
  store i32 %and100, i32* %pad, align 4
  %44 = load i32, i32* %pad, align 4
  %45 = load i32, i32* %augmentation_size, align 4
  %add101 = add nsw i32 %45, %44
  store i32 %add101, i32* %augmentation_size, align 4
  %46 = load i32, i32* %augmentation_size, align 4
  %conv102 = sext i32 %46 to i64
  %call103 = call i32 @size_of_uleb128(i64 %conv102)
  %cmp104 = icmp ne i32 %call103, 1
  br i1 %cmp104, label %if.then.106, label %if.end.107

if.then.106:                                      ; preds = %if.then.77
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 1903, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @__FUNCTION__.output_call_frame_info, i32 0, i32 0)) #8
  unreachable

if.end.107:                                       ; preds = %if.then.77
  br label %if.end.108

if.end.108:                                       ; preds = %if.end.107, %land.lhs.true, %if.end.73
  br label %if.end.109

if.end.109:                                       ; preds = %if.end.108, %do.end.31
  %arraydecay110 = getelementptr inbounds [6 x i8], [6 x i8]* %augmentation, i32 0, i32 0
  call void (i8*, i64, i8*, ...) @dw2_asm_output_nstring(i8* %arraydecay110, i64 -1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.163, i32 0, i32 0))
  call void (i64, i8*, ...) @dw2_asm_output_data_uleb128(i64 1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.164, i32 0, i32 0))
  %47 = load i32, i32* @target_flags, align 4
  %and111 = and i32 %47, 33554432
  %tobool112 = icmp ne i32 %and111, 0
  %cond113 = select i1 %tobool112, i32 8, i32 4
  %sub114 = sub nsw i32 0, %cond113
  %conv115 = sext i32 %sub114 to i64
  call void (i64, i8*, ...) @dw2_asm_output_data_sleb128(i64 %conv115, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.165, i32 0, i32 0))
  %48 = load i32, i32* @target_flags, align 4
  %and116 = and i32 %48, 33554432
  %tobool117 = icmp ne i32 %and116, 0
  %cond118 = select i1 %tobool117, i32 16, i32 8
  %conv119 = sext i32 %cond118 to i64
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 1, i64 %conv119, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.166, i32 0, i32 0))
  %arrayidx120 = getelementptr inbounds [6 x i8], [6 x i8]* %augmentation, i32 0, i64 0
  %49 = load i8, i8* %arrayidx120, align 1
  %tobool121 = icmp ne i8 %49, 0
  br i1 %tobool121, label %if.then.122, label %if.end.140

if.then.122:                                      ; preds = %if.end.109
  %50 = load i32, i32* %augmentation_size, align 4
  %conv123 = sext i32 %50 to i64
  call void (i64, i8*, ...) @dw2_asm_output_data_uleb128(i64 %conv123, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.167, i32 0, i32 0))
  %51 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([97 x %struct.rtx_def*], [97 x %struct.rtx_def*]* @libfunc_table, i32 0, i64 19), align 8
  %tobool124 = icmp ne %struct.rtx_def* %51, null
  br i1 %tobool124, label %if.then.125, label %if.end.128

if.then.125:                                      ; preds = %if.then.122
  %52 = load i32, i32* %per_encoding, align 4
  %conv126 = sext i32 %52 to i64
  %53 = load i32, i32* %per_encoding, align 4
  %call127 = call i8* @eh_data_format_name(i32 %53)
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 1, i64 %conv126, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.168, i32 0, i32 0), i8* %call127)
  %54 = load i32, i32* %per_encoding, align 4
  %55 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([97 x %struct.rtx_def*], [97 x %struct.rtx_def*]* @libfunc_table, i32 0, i64 19), align 8
  call void (i32, %struct.rtx_def*, i8*, ...) @dw2_asm_output_encoded_addr_rtx(i32 %54, %struct.rtx_def* %55, i8* null)
  br label %if.end.128

if.end.128:                                       ; preds = %if.then.125, %if.then.122
  %56 = load i32, i32* %any_lsda_needed, align 4
  %tobool129 = icmp ne i32 %56, 0
  br i1 %tobool129, label %if.then.130, label %if.end.133

if.then.130:                                      ; preds = %if.end.128
  %57 = load i32, i32* %lsda_encoding, align 4
  %conv131 = sext i32 %57 to i64
  %58 = load i32, i32* %lsda_encoding, align 4
  %call132 = call i8* @eh_data_format_name(i32 %58)
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 1, i64 %conv131, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.169, i32 0, i32 0), i8* %call132)
  br label %if.end.133

if.end.133:                                       ; preds = %if.then.130, %if.end.128
  %59 = load i32, i32* %fde_encoding, align 4
  %cmp134 = icmp ne i32 %59, 0
  br i1 %cmp134, label %if.then.136, label %if.end.139

if.then.136:                                      ; preds = %if.end.133
  %60 = load i32, i32* %fde_encoding, align 4
  %conv137 = sext i32 %60 to i64
  %61 = load i32, i32* %fde_encoding, align 4
  %call138 = call i8* @eh_data_format_name(i32 %61)
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 1, i64 %conv137, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.170, i32 0, i32 0), i8* %call138)
  br label %if.end.139

if.end.139:                                       ; preds = %if.then.136, %if.end.133
  br label %if.end.140

if.end.140:                                       ; preds = %if.end.139, %if.end.109
  %62 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** @cie_cfi_head, align 8
  store %struct.dw_cfi_struct* %62, %struct.dw_cfi_struct** %cfi, align 8
  br label %for.cond.141

for.cond.141:                                     ; preds = %for.inc.145, %if.end.140
  %63 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi, align 8
  %cmp142 = icmp ne %struct.dw_cfi_struct* %63, null
  br i1 %cmp142, label %for.body.144, label %for.end.146

for.body.144:                                     ; preds = %for.cond.141
  %64 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi, align 8
  %65 = load i32, i32* %for_eh.addr, align 4
  call void @output_cfi(%struct.dw_cfi_struct* %64, %struct.dw_fde_struct* null, i32 %65)
  br label %for.inc.145

for.inc.145:                                      ; preds = %for.body.144
  %66 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi, align 8
  %dw_cfi_next = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %66, i32 0, i32 0
  %67 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %dw_cfi_next, align 8
  store %struct.dw_cfi_struct* %67, %struct.dw_cfi_struct** %cfi, align 8
  br label %for.cond.141

for.end.146:                                      ; preds = %for.cond.141
  %68 = load i32, i32* %for_eh.addr, align 4
  %tobool147 = icmp ne i32 %68, 0
  br i1 %tobool147, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.end.146
  %69 = load i32, i32* @target_flags, align 4
  %and148 = and i32 %69, 33554432
  %tobool149 = icmp ne i32 %and148, 0
  %cond150 = select i1 %tobool149, i32 64, i32 32
  %div151 = sdiv i32 %cond150, 8
  br label %cond.end

cond.false:                                       ; preds = %for.end.146
  %70 = load i32, i32* @target_flags, align 4
  %and152 = and i32 %70, 33554432
  %tobool153 = icmp ne i32 %and152, 0
  %cond154 = select i1 %tobool153, i32 64, i32 32
  %div155 = sdiv i32 %cond154, 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond156 = phi i32 [ %div151, %cond.true ], [ %div155, %cond.false ]
  %conv157 = sext i32 %cond156 to i64
  %call158 = call i32 @floor_log2_wide(i64 %conv157)
  %cmp159 = icmp ne i32 %call158, 0
  br i1 %cmp159, label %if.then.161, label %if.end.178

if.then.161:                                      ; preds = %cond.end
  %71 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8
  %72 = load i32, i32* %for_eh.addr, align 4
  %tobool162 = icmp ne i32 %72, 0
  br i1 %tobool162, label %cond.true.163, label %cond.false.168

cond.true.163:                                    ; preds = %if.then.161
  %73 = load i32, i32* @target_flags, align 4
  %and164 = and i32 %73, 33554432
  %tobool165 = icmp ne i32 %and164, 0
  %cond166 = select i1 %tobool165, i32 64, i32 32
  %div167 = sdiv i32 %cond166, 8
  br label %cond.end.173

cond.false.168:                                   ; preds = %if.then.161
  %74 = load i32, i32* @target_flags, align 4
  %and169 = and i32 %74, 33554432
  %tobool170 = icmp ne i32 %and169, 0
  %cond171 = select i1 %tobool170, i32 64, i32 32
  %div172 = sdiv i32 %cond171, 8
  br label %cond.end.173

cond.end.173:                                     ; preds = %cond.false.168, %cond.true.163
  %cond174 = phi i32 [ %div167, %cond.true.163 ], [ %div172, %cond.false.168 ]
  %conv175 = sext i32 %cond174 to i64
  %call176 = call i32 @floor_log2_wide(i64 %conv175)
  %shl = shl i32 1, %call176
  %call177 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %71, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.171, i32 0, i32 0), i32 %shl)
  br label %if.end.178

if.end.178:                                       ; preds = %cond.end.173, %cond.end
  %75 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8
  %arraydecay179 = getelementptr inbounds [20 x i8], [20 x i8]* %l2, i32 0, i32 0
  call void @assemble_name(%struct._IO_FILE* %75, i8* %arraydecay179)
  %76 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8
  %call180 = call i32 @fputs(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), %struct._IO_FILE* %76)
  store i32 0, i32* %i, align 4
  br label %for.cond.181

for.cond.181:                                     ; preds = %for.inc.376, %if.end.178
  %77 = load i32, i32* %i, align 4
  %78 = load i32, i32* @fde_table_in_use, align 4
  %cmp182 = icmp ult i32 %77, %78
  br i1 %cmp182, label %for.body.184, label %for.end.378

for.body.184:                                     ; preds = %for.cond.181
  %79 = load i32, i32* %i, align 4
  %idxprom185 = zext i32 %79 to i64
  %80 = load %struct.dw_fde_struct*, %struct.dw_fde_struct** @fde_table, align 8
  %arrayidx186 = getelementptr inbounds %struct.dw_fde_struct, %struct.dw_fde_struct* %80, i64 %idxprom185
  store %struct.dw_fde_struct* %arrayidx186, %struct.dw_fde_struct** %fde, align 8
  %81 = load i32, i32* @flag_asynchronous_unwind_tables, align 4
  %tobool187 = icmp ne i32 %81, 0
  br i1 %tobool187, label %if.end.204, label %land.lhs.true.188

land.lhs.true.188:                                ; preds = %for.body.184
  %82 = load i32, i32* %for_eh.addr, align 4
  %tobool189 = icmp ne i32 %82, 0
  br i1 %tobool189, label %land.lhs.true.190, label %if.end.204

land.lhs.true.190:                                ; preds = %land.lhs.true.188
  %83 = load %struct.dw_fde_struct*, %struct.dw_fde_struct** %fde, align 8
  %nothrow191 = getelementptr inbounds %struct.dw_fde_struct, %struct.dw_fde_struct* %83, i32 0, i32 5
  %bf.load192 = load i8, i8* %nothrow191, align 4
  %bf.clear193 = and i8 %bf.load192, 1
  %bf.cast194 = zext i8 %bf.clear193 to i32
  %tobool195 = icmp ne i32 %bf.cast194, 0
  br i1 %tobool195, label %land.lhs.true.196, label %if.end.204

land.lhs.true.196:                                ; preds = %land.lhs.true.190
  %84 = load %struct.dw_fde_struct*, %struct.dw_fde_struct** %fde, align 8
  %uses_eh_lsda197 = getelementptr inbounds %struct.dw_fde_struct, %struct.dw_fde_struct* %84, i32 0, i32 5
  %bf.load198 = load i8, i8* %uses_eh_lsda197, align 4
  %bf.lshr199 = lshr i8 %bf.load198, 1
  %bf.clear200 = and i8 %bf.lshr199, 1
  %bf.cast201 = zext i8 %bf.clear200 to i32
  %tobool202 = icmp ne i32 %bf.cast201, 0
  br i1 %tobool202, label %if.end.204, label %if.then.203

if.then.203:                                      ; preds = %land.lhs.true.196
  br label %for.inc.376

if.end.204:                                       ; preds = %land.lhs.true.196, %land.lhs.true.190, %land.lhs.true.188, %for.body.184
  br label %do.body.205

do.body.205:                                      ; preds = %if.end.204
  %85 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8
  %86 = load i32, i32* %for_eh.addr, align 4
  %87 = load i32, i32* %i, align 4
  %mul = mul i32 %87, 2
  %add206 = add i32 %86, %mul
  %call207 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %85, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.172, i32 0, i32 0), i32 %add206)
  br label %do.end.208

do.end.208:                                       ; preds = %do.body.205
  br label %do.body.209

do.body.209:                                      ; preds = %do.end.208
  %arraydecay210 = getelementptr inbounds [20 x i8], [20 x i8]* %l1, i32 0, i32 0
  %88 = load i32, i32* %for_eh.addr, align 4
  %89 = load i32, i32* %i, align 4
  %mul211 = mul i32 %89, 2
  %add212 = add i32 %88, %mul211
  %call213 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay210, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.173, i32 0, i32 0), i32 %add212) #5
  br label %do.end.214

do.end.214:                                       ; preds = %do.body.209
  br label %do.body.215

do.body.215:                                      ; preds = %do.end.214
  %arraydecay216 = getelementptr inbounds [20 x i8], [20 x i8]* %l2, i32 0, i32 0
  %90 = load i32, i32* %for_eh.addr, align 4
  %91 = load i32, i32* %i, align 4
  %mul217 = mul i32 %91, 2
  %add218 = add i32 %90, %mul217
  %call219 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay216, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.174, i32 0, i32 0), i32 %add218) #5
  br label %do.end.220

do.end.220:                                       ; preds = %do.body.215
  %92 = load i32, i32* %for_eh.addr, align 4
  %tobool221 = icmp ne i32 %92, 0
  %cond222 = select i1 %tobool221, i32 4, i32 4
  %arraydecay223 = getelementptr inbounds [20 x i8], [20 x i8]* %l2, i32 0, i32 0
  %arraydecay224 = getelementptr inbounds [20 x i8], [20 x i8]* %l1, i32 0, i32 0
  call void (i32, i8*, i8*, i8*, ...) @dw2_asm_output_delta(i32 %cond222, i8* %arraydecay223, i8* %arraydecay224, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.175, i32 0, i32 0))
  %93 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8
  %arraydecay225 = getelementptr inbounds [20 x i8], [20 x i8]* %l1, i32 0, i32 0
  call void @assemble_name(%struct._IO_FILE* %93, i8* %arraydecay225)
  %94 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8
  %call226 = call i32 @fputs(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), %struct._IO_FILE* %94)
  %95 = load i32, i32* %for_eh.addr, align 4
  %tobool227 = icmp ne i32 %95, 0
  br i1 %tobool227, label %if.then.228, label %if.else.231

if.then.228:                                      ; preds = %do.end.220
  %arraydecay229 = getelementptr inbounds [20 x i8], [20 x i8]* %l1, i32 0, i32 0
  %arraydecay230 = getelementptr inbounds [20 x i8], [20 x i8]* %section_start_label, i32 0, i32 0
  call void (i32, i8*, i8*, i8*, ...) @dw2_asm_output_delta(i32 4, i8* %arraydecay229, i8* %arraydecay230, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.176, i32 0, i32 0))
  br label %if.end.233

if.else.231:                                      ; preds = %do.end.220
  %arraydecay232 = getelementptr inbounds [20 x i8], [20 x i8]* %section_start_label, i32 0, i32 0
  call void (i32, i8*, i8*, ...) @dw2_asm_output_offset(i32 4, i8* %arraydecay232, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.176, i32 0, i32 0))
  br label %if.end.233

if.end.233:                                       ; preds = %if.else.231, %if.then.228
  %96 = load i32, i32* %for_eh.addr, align 4
  %tobool234 = icmp ne i32 %96, 0
  br i1 %tobool234, label %if.then.235, label %if.else.242

if.then.235:                                      ; preds = %if.end.233
  %97 = load i32, i32* %fde_encoding, align 4
  %98 = load i32, i32* @target_flags, align 4
  %and236 = and i32 %98, 33554432
  %tobool237 = icmp ne i32 %and236, 0
  %cond238 = select i1 %tobool237, i32 5, i32 4
  %99 = load %struct.dw_fde_struct*, %struct.dw_fde_struct** %fde, align 8
  %dw_fde_begin = getelementptr inbounds %struct.dw_fde_struct, %struct.dw_fde_struct* %99, i32 0, i32 0
  %100 = load i8*, i8** %dw_fde_begin, align 8
  %call239 = call %struct.rtx_def* @gen_rtx_fmt_s(i32 68, i32 %cond238, i8* %100)
  call void (i32, %struct.rtx_def*, i8*, ...) @dw2_asm_output_encoded_addr_rtx(i32 %97, %struct.rtx_def* %call239, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.177, i32 0, i32 0))
  %101 = load i32, i32* %fde_encoding, align 4
  %call240 = call i32 @size_of_encoded_value(i32 %101)
  %102 = load %struct.dw_fde_struct*, %struct.dw_fde_struct** %fde, align 8
  %dw_fde_end = getelementptr inbounds %struct.dw_fde_struct, %struct.dw_fde_struct* %102, i32 0, i32 2
  %103 = load i8*, i8** %dw_fde_end, align 8
  %104 = load %struct.dw_fde_struct*, %struct.dw_fde_struct** %fde, align 8
  %dw_fde_begin241 = getelementptr inbounds %struct.dw_fde_struct, %struct.dw_fde_struct* %104, i32 0, i32 0
  %105 = load i8*, i8** %dw_fde_begin241, align 8
  call void (i32, i8*, i8*, i8*, ...) @dw2_asm_output_delta(i32 %call240, i8* %103, i8* %105, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.178, i32 0, i32 0))
  br label %if.end.254

if.else.242:                                      ; preds = %if.end.233
  %106 = load i32, i32* @target_flags, align 4
  %and243 = and i32 %106, 33554432
  %tobool244 = icmp ne i32 %and243, 0
  %cond245 = select i1 %tobool244, i32 64, i32 32
  %div246 = sdiv i32 %cond245, 8
  %107 = load %struct.dw_fde_struct*, %struct.dw_fde_struct** %fde, align 8
  %dw_fde_begin247 = getelementptr inbounds %struct.dw_fde_struct, %struct.dw_fde_struct* %107, i32 0, i32 0
  %108 = load i8*, i8** %dw_fde_begin247, align 8
  call void (i32, i8*, i8*, ...) @dw2_asm_output_addr(i32 %div246, i8* %108, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.177, i32 0, i32 0))
  %109 = load i32, i32* @target_flags, align 4
  %and248 = and i32 %109, 33554432
  %tobool249 = icmp ne i32 %and248, 0
  %cond250 = select i1 %tobool249, i32 64, i32 32
  %div251 = sdiv i32 %cond250, 8
  %110 = load %struct.dw_fde_struct*, %struct.dw_fde_struct** %fde, align 8
  %dw_fde_end252 = getelementptr inbounds %struct.dw_fde_struct, %struct.dw_fde_struct* %110, i32 0, i32 2
  %111 = load i8*, i8** %dw_fde_end252, align 8
  %112 = load %struct.dw_fde_struct*, %struct.dw_fde_struct** %fde, align 8
  %dw_fde_begin253 = getelementptr inbounds %struct.dw_fde_struct, %struct.dw_fde_struct* %112, i32 0, i32 0
  %113 = load i8*, i8** %dw_fde_begin253, align 8
  call void (i32, i8*, i8*, i8*, ...) @dw2_asm_output_delta(i32 %div251, i8* %111, i8* %113, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.178, i32 0, i32 0))
  br label %if.end.254

if.end.254:                                       ; preds = %if.else.242, %if.then.235
  %arrayidx255 = getelementptr inbounds [6 x i8], [6 x i8]* %augmentation, i32 0, i64 0
  %114 = load i8, i8* %arrayidx255, align 1
  %tobool256 = icmp ne i8 %114, 0
  br i1 %tobool256, label %if.then.257, label %if.end.329

if.then.257:                                      ; preds = %if.end.254
  %115 = load i32, i32* %any_lsda_needed, align 4
  %tobool258 = icmp ne i32 %115, 0
  br i1 %tobool258, label %if.then.259, label %if.else.327

if.then.259:                                      ; preds = %if.then.257
  %116 = load i32, i32* %lsda_encoding, align 4
  %call260 = call i32 @size_of_encoded_value(i32 %116)
  store i32 %call260, i32* %size, align 4
  %117 = load i32, i32* %lsda_encoding, align 4
  %cmp261 = icmp eq i32 %117, 80
  br i1 %cmp261, label %if.then.263, label %if.end.284

if.then.263:                                      ; preds = %if.then.259
  %118 = load i32, i32* %fde_encoding, align 4
  %call265 = call i32 @size_of_encoded_value(i32 %118)
  %mul266 = mul nsw i32 2, %call265
  %add267 = add nsw i32 8, %mul266
  %add268 = add nsw i32 %add267, 1
  store i32 %add268, i32* %offset264, align 4
  %119 = load i32, i32* %offset264, align 4
  %sub270 = sub nsw i32 0, %119
  %120 = load i32, i32* @target_flags, align 4
  %and271 = and i32 %120, 33554432
  %tobool272 = icmp ne i32 %and271, 0
  %cond273 = select i1 %tobool272, i32 64, i32 32
  %div274 = sdiv i32 %cond273, 8
  %sub275 = sub nsw i32 %div274, 1
  %and276 = and i32 %sub270, %sub275
  store i32 %and276, i32* %pad269, align 4
  %121 = load i32, i32* %pad269, align 4
  %122 = load i32, i32* %size, align 4
  %add277 = add nsw i32 %122, %121
  store i32 %add277, i32* %size, align 4
  %123 = load i32, i32* %size, align 4
  %conv278 = sext i32 %123 to i64
  %call279 = call i32 @size_of_uleb128(i64 %conv278)
  %cmp280 = icmp ne i32 %call279, 1
  br i1 %cmp280, label %if.then.282, label %if.end.283

if.then.282:                                      ; preds = %if.then.263
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 1998, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @__FUNCTION__.output_call_frame_info, i32 0, i32 0)) #8
  unreachable

if.end.283:                                       ; preds = %if.then.263
  br label %if.end.284

if.end.284:                                       ; preds = %if.end.283, %if.then.259
  %124 = load i32, i32* %size, align 4
  %conv285 = sext i32 %124 to i64
  call void (i64, i8*, ...) @dw2_asm_output_data_uleb128(i64 %conv285, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.167, i32 0, i32 0))
  %125 = load %struct.dw_fde_struct*, %struct.dw_fde_struct** %fde, align 8
  %uses_eh_lsda286 = getelementptr inbounds %struct.dw_fde_struct, %struct.dw_fde_struct* %125, i32 0, i32 5
  %bf.load287 = load i8, i8* %uses_eh_lsda286, align 4
  %bf.lshr288 = lshr i8 %bf.load287, 1
  %bf.clear289 = and i8 %bf.lshr288, 1
  %bf.cast290 = zext i8 %bf.clear289 to i32
  %tobool291 = icmp ne i32 %bf.cast290, 0
  br i1 %tobool291, label %if.then.292, label %if.else.302

if.then.292:                                      ; preds = %if.end.284
  br label %do.body.293

do.body.293:                                      ; preds = %if.then.292
  %arraydecay294 = getelementptr inbounds [20 x i8], [20 x i8]* %l1, i32 0, i32 0
  %126 = load %struct.dw_fde_struct*, %struct.dw_fde_struct** %fde, align 8
  %funcdef_number = getelementptr inbounds %struct.dw_fde_struct, %struct.dw_fde_struct* %126, i32 0, i32 4
  %127 = load i32, i32* %funcdef_number, align 4
  %call295 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay294, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.179, i32 0, i32 0), i32 %127) #5
  br label %do.end.296

do.end.296:                                       ; preds = %do.body.293
  %128 = load i32, i32* %lsda_encoding, align 4
  %129 = load i32, i32* @target_flags, align 4
  %and297 = and i32 %129, 33554432
  %tobool298 = icmp ne i32 %and297, 0
  %cond299 = select i1 %tobool298, i32 5, i32 4
  %arraydecay300 = getelementptr inbounds [20 x i8], [20 x i8]* %l1, i32 0, i32 0
  %call301 = call %struct.rtx_def* @gen_rtx_fmt_s(i32 68, i32 %cond299, i8* %arraydecay300)
  call void (i32, %struct.rtx_def*, i8*, ...) @dw2_asm_output_encoded_addr_rtx(i32 %128, %struct.rtx_def* %call301, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.180, i32 0, i32 0))
  br label %if.end.326

if.else.302:                                      ; preds = %if.end.284
  %130 = load i32, i32* %lsda_encoding, align 4
  %cmp303 = icmp eq i32 %130, 80
  br i1 %cmp303, label %if.then.305, label %if.end.324

if.then.305:                                      ; preds = %if.else.302
  %131 = load i32, i32* @target_flags, align 4
  %and306 = and i32 %131, 33554432
  %tobool307 = icmp ne i32 %and306, 0
  %cond308 = select i1 %tobool307, i32 64, i32 32
  %div309 = sdiv i32 %cond308, 8
  %conv310 = sext i32 %div309 to i64
  %call311 = call i32 @floor_log2_wide(i64 %conv310)
  %cmp312 = icmp ne i32 %call311, 0
  br i1 %cmp312, label %if.then.314, label %if.end.323

if.then.314:                                      ; preds = %if.then.305
  %132 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8
  %133 = load i32, i32* @target_flags, align 4
  %and315 = and i32 %133, 33554432
  %tobool316 = icmp ne i32 %and315, 0
  %cond317 = select i1 %tobool316, i32 64, i32 32
  %div318 = sdiv i32 %cond317, 8
  %conv319 = sext i32 %div318 to i64
  %call320 = call i32 @floor_log2_wide(i64 %conv319)
  %shl321 = shl i32 1, %call320
  %call322 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %132, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.171, i32 0, i32 0), i32 %shl321)
  br label %if.end.323

if.end.323:                                       ; preds = %if.then.314, %if.then.305
  br label %if.end.324

if.end.324:                                       ; preds = %if.end.323, %if.else.302
  %134 = load i32, i32* %lsda_encoding, align 4
  %call325 = call i32 @size_of_encoded_value(i32 %134)
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 %call325, i64 0, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.181, i32 0, i32 0))
  br label %if.end.326

if.end.326:                                       ; preds = %if.end.324, %do.end.296
  br label %if.end.328

if.else.327:                                      ; preds = %if.then.257
  call void (i64, i8*, ...) @dw2_asm_output_data_uleb128(i64 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.167, i32 0, i32 0))
  br label %if.end.328

if.end.328:                                       ; preds = %if.else.327, %if.end.326
  br label %if.end.329

if.end.329:                                       ; preds = %if.end.328, %if.end.254
  %135 = load %struct.dw_fde_struct*, %struct.dw_fde_struct** %fde, align 8
  %dw_fde_begin330 = getelementptr inbounds %struct.dw_fde_struct, %struct.dw_fde_struct* %135, i32 0, i32 0
  %136 = load i8*, i8** %dw_fde_begin330, align 8
  %137 = load %struct.dw_fde_struct*, %struct.dw_fde_struct** %fde, align 8
  %dw_fde_current_label = getelementptr inbounds %struct.dw_fde_struct, %struct.dw_fde_struct* %137, i32 0, i32 1
  store i8* %136, i8** %dw_fde_current_label, align 8
  %138 = load %struct.dw_fde_struct*, %struct.dw_fde_struct** %fde, align 8
  %dw_fde_cfi = getelementptr inbounds %struct.dw_fde_struct, %struct.dw_fde_struct* %138, i32 0, i32 3
  %139 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %dw_fde_cfi, align 8
  store %struct.dw_cfi_struct* %139, %struct.dw_cfi_struct** %cfi, align 8
  br label %for.cond.331

for.cond.331:                                     ; preds = %for.inc.335, %if.end.329
  %140 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi, align 8
  %cmp332 = icmp ne %struct.dw_cfi_struct* %140, null
  br i1 %cmp332, label %for.body.334, label %for.end.337

for.body.334:                                     ; preds = %for.cond.331
  %141 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi, align 8
  %142 = load %struct.dw_fde_struct*, %struct.dw_fde_struct** %fde, align 8
  %143 = load i32, i32* %for_eh.addr, align 4
  call void @output_cfi(%struct.dw_cfi_struct* %141, %struct.dw_fde_struct* %142, i32 %143)
  br label %for.inc.335

for.inc.335:                                      ; preds = %for.body.334
  %144 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi, align 8
  %dw_cfi_next336 = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %144, i32 0, i32 0
  %145 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %dw_cfi_next336, align 8
  store %struct.dw_cfi_struct* %145, %struct.dw_cfi_struct** %cfi, align 8
  br label %for.cond.331

for.end.337:                                      ; preds = %for.cond.331
  %146 = load i32, i32* %for_eh.addr, align 4
  %tobool338 = icmp ne i32 %146, 0
  br i1 %tobool338, label %cond.true.339, label %cond.false.344

cond.true.339:                                    ; preds = %for.end.337
  %147 = load i32, i32* @target_flags, align 4
  %and340 = and i32 %147, 33554432
  %tobool341 = icmp ne i32 %and340, 0
  %cond342 = select i1 %tobool341, i32 64, i32 32
  %div343 = sdiv i32 %cond342, 8
  br label %cond.end.349

cond.false.344:                                   ; preds = %for.end.337
  %148 = load i32, i32* @target_flags, align 4
  %and345 = and i32 %148, 33554432
  %tobool346 = icmp ne i32 %and345, 0
  %cond347 = select i1 %tobool346, i32 64, i32 32
  %div348 = sdiv i32 %cond347, 8
  br label %cond.end.349

cond.end.349:                                     ; preds = %cond.false.344, %cond.true.339
  %cond350 = phi i32 [ %div343, %cond.true.339 ], [ %div348, %cond.false.344 ]
  %conv351 = sext i32 %cond350 to i64
  %call352 = call i32 @floor_log2_wide(i64 %conv351)
  %cmp353 = icmp ne i32 %call352, 0
  br i1 %cmp353, label %if.then.355, label %if.end.373

if.then.355:                                      ; preds = %cond.end.349
  %149 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8
  %150 = load i32, i32* %for_eh.addr, align 4
  %tobool356 = icmp ne i32 %150, 0
  br i1 %tobool356, label %cond.true.357, label %cond.false.362

cond.true.357:                                    ; preds = %if.then.355
  %151 = load i32, i32* @target_flags, align 4
  %and358 = and i32 %151, 33554432
  %tobool359 = icmp ne i32 %and358, 0
  %cond360 = select i1 %tobool359, i32 64, i32 32
  %div361 = sdiv i32 %cond360, 8
  br label %cond.end.367

cond.false.362:                                   ; preds = %if.then.355
  %152 = load i32, i32* @target_flags, align 4
  %and363 = and i32 %152, 33554432
  %tobool364 = icmp ne i32 %and363, 0
  %cond365 = select i1 %tobool364, i32 64, i32 32
  %div366 = sdiv i32 %cond365, 8
  br label %cond.end.367

cond.end.367:                                     ; preds = %cond.false.362, %cond.true.357
  %cond368 = phi i32 [ %div361, %cond.true.357 ], [ %div366, %cond.false.362 ]
  %conv369 = sext i32 %cond368 to i64
  %call370 = call i32 @floor_log2_wide(i64 %conv369)
  %shl371 = shl i32 1, %call370
  %call372 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %149, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.171, i32 0, i32 0), i32 %shl371)
  br label %if.end.373

if.end.373:                                       ; preds = %cond.end.367, %cond.end.349
  %153 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8
  %arraydecay374 = getelementptr inbounds [20 x i8], [20 x i8]* %l2, i32 0, i32 0
  call void @assemble_name(%struct._IO_FILE* %153, i8* %arraydecay374)
  %154 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8
  %call375 = call i32 @fputs(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), %struct._IO_FILE* %154)
  br label %for.inc.376

for.inc.376:                                      ; preds = %if.end.373, %if.then.203
  %155 = load i32, i32* %i, align 4
  %inc377 = add i32 %155, 1
  store i32 %inc377, i32* %i, align 4
  br label %for.cond.181

for.end.378:                                      ; preds = %for.cond.181
  %156 = load i32, i32* @flag_debug_asm, align 4
  %tobool379 = icmp ne i32 %156, 0
  br i1 %tobool379, label %if.then.380, label %if.end.381

if.then.380:                                      ; preds = %for.end.378
  call void @app_disable()
  br label %if.end.381

if.end.381:                                       ; preds = %if.then.12, %if.then.380, %for.end.378
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @dwarf2out_init(i8* %main_input_filename) #0 {
entry:
  %main_input_filename.addr = alloca i8*, align 8
  store i8* %main_input_filename, i8** %main_input_filename.addr, align 8
  call void @init_file_table()
  %0 = load i8*, i8** %main_input_filename.addr, align 8
  store i8* %0, i8** @primary_filename, align 8
  %1 = load i8*, i8** %main_input_filename.addr, align 8
  %call = call i32 @lookup_filename(i8* %1)
  %call1 = call noalias i8* @xcalloc(i64 256, i64 8)
  %2 = bitcast i8* %call1 to %struct.die_struct**
  store %struct.die_struct** %2, %struct.die_struct*** @decl_die_table, align 8
  store i32 256, i32* @decl_die_table_allocated, align 4
  store i32 0, i32* @decl_die_table_in_use, align 4
  %call2 = call %struct.varray_head_tag* @varray_init(i64 256, i64 8, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.407, i32 0, i32 0))
  store %struct.varray_head_tag* %call2, %struct.varray_head_tag** @decl_scope_table, align 8
  call void @ggc_add_tree_varray_root(%struct.varray_head_tag** @decl_scope_table, i32 1)
  %call3 = call noalias i8* @xcalloc(i64 256, i64 8)
  %3 = bitcast i8* %call3 to %struct.die_struct**
  store %struct.die_struct** %3, %struct.die_struct*** @abbrev_die_table, align 8
  store i32 256, i32* @abbrev_die_table_allocated, align 4
  store i32 1, i32* @abbrev_die_table_in_use, align 4
  %call4 = call noalias i8* @xcalloc(i64 1024, i64 16)
  %4 = bitcast i8* %call4 to %struct.dw_line_info_struct*
  store %struct.dw_line_info_struct* %4, %struct.dw_line_info_struct** @line_info_table, align 8
  store i32 1024, i32* @line_info_table_allocated, align 4
  store i32 1, i32* @line_info_table_in_use, align 4
  %5 = load i8*, i8** %main_input_filename.addr, align 8
  %call5 = call %struct.die_struct* @gen_compile_unit_die(i8* %5)
  store %struct.die_struct* %call5, %struct.die_struct** @comp_unit_die, align 8
  %call6 = call %struct.varray_head_tag* @varray_init(i64 64, i64 8, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.408, i32 0, i32 0))
  store %struct.varray_head_tag* %call6, %struct.varray_head_tag** @incomplete_types, align 8
  call void @ggc_add_tree_varray_root(%struct.varray_head_tag** @incomplete_types, i32 1)
  %call7 = call %struct.varray_head_tag* @varray_init(i64 32, i64 8, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.409, i32 0, i32 0))
  store %struct.varray_head_tag* %call7, %struct.varray_head_tag** @used_rtx_varray, align 8
  call void @ggc_add_rtx_varray_root(%struct.varray_head_tag** @used_rtx_varray, i32 1)
  call void @ggc_add_root(i8* bitcast (%struct.limbo_die_struct** @limbo_die_list to i8*), i32 1, i32 1, void (i8*)* @mark_limbo_die_list)
  br label %do.body

do.body:                                          ; preds = %entry
  %call8 = call i32 (i8*, i8*, ...) @sprintf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @text_end_label, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.410, i32 0, i32 0), i32 0) #5
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body.9

do.body.9:                                        ; preds = %do.end
  %call10 = call i32 (i8*, i8*, ...) @sprintf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @abbrev_section_label, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.411, i32 0, i32 0), i32 0) #5
  br label %do.end.11

do.end.11:                                        ; preds = %do.body.9
  br label %do.body.12

do.body.12:                                       ; preds = %do.end.11
  %call13 = call i32 (i8*, i8*, ...) @sprintf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @text_section_label, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.412, i32 0, i32 0), i32 0) #5
  br label %do.end.14

do.end.14:                                        ; preds = %do.body.12
  br label %do.body.15

do.body.15:                                       ; preds = %do.end.14
  %call16 = call i32 (i8*, i8*, ...) @sprintf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @debug_info_section_label, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.413, i32 0, i32 0), i32 0) #5
  br label %do.end.17

do.end.17:                                        ; preds = %do.body.15
  br label %do.body.18

do.body.18:                                       ; preds = %do.end.17
  %call19 = call i32 (i8*, i8*, ...) @sprintf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @debug_line_section_label, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.414, i32 0, i32 0), i32 0) #5
  br label %do.end.20

do.end.20:                                        ; preds = %do.body.18
  br label %do.body.21

do.body.21:                                       ; preds = %do.end.20
  %call22 = call i32 (i8*, i8*, ...) @sprintf(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @ranges_section_label, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.415, i32 0, i32 0), i32 0) #5
  br label %do.end.23

do.end.23:                                        ; preds = %do.body.21
  call void @named_section_flags(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.416, i32 0, i32 0), i32 1024)
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8
  call void @assemble_name(%struct._IO_FILE* %6, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @abbrev_section_label, i32 0, i32 0))
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8
  %call24 = call i32 @fputs(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), %struct._IO_FILE* %7)
  call void @named_section_flags(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.417, i32 0, i32 0), i32 1024)
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8
  call void @assemble_name(%struct._IO_FILE* %8, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @debug_info_section_label, i32 0, i32 0))
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8
  %call25 = call i32 @fputs(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), %struct._IO_FILE* %9)
  call void @named_section_flags(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.418, i32 0, i32 0), i32 1024)
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8
  call void @assemble_name(%struct._IO_FILE* %10, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @debug_line_section_label, i32 0, i32 0))
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8
  %call26 = call i32 @fputs(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), %struct._IO_FILE* %11)
  %12 = load i32, i32* @debug_info_level, align 4
  %cmp = icmp uge i32 %12, 3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.end.23
  call void @named_section_flags(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.398, i32 0, i32 0), i32 1024)
  br label %do.body.27

do.body.27:                                       ; preds = %if.then
  %call28 = call i32 (i8*, i8*, ...) @sprintf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @macinfo_section_label, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.419, i32 0, i32 0), i32 0) #5
  br label %do.end.29

do.end.29:                                        ; preds = %do.body.27
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8
  call void @assemble_name(%struct._IO_FILE* %13, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @macinfo_section_label, i32 0, i32 0))
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8
  %call30 = call i32 @fputs(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), %struct._IO_FILE* %14)
  br label %if.end

if.end:                                           ; preds = %do.end.29, %do.end.23
  call void @text_section()
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8
  call void @assemble_name(%struct._IO_FILE* %15, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @text_section_label, i32 0, i32 0))
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8
  %call31 = call i32 @fputs(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), %struct._IO_FILE* %16)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @dwarf2out_finish(i8* %input_filename) #0 {
entry:
  %input_filename.addr = alloca i8*, align 8
  %node = alloca %struct.limbo_die_struct*, align 8
  %next_node = alloca %struct.limbo_die_struct*, align 8
  %die = alloca %struct.die_struct*, align 8
  %origin = alloca %struct.die_struct*, align 8
  %context = alloca %union.tree_node*, align 8
  store i8* %input_filename, i8** %input_filename.addr, align 8
  store %struct.die_struct* null, %struct.die_struct** %die, align 8
  %0 = load %struct.limbo_die_struct*, %struct.limbo_die_struct** @limbo_die_list, align 8
  store %struct.limbo_die_struct* %0, %struct.limbo_die_struct** %node, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.limbo_die_struct*, %struct.limbo_die_struct** %node, align 8
  %tobool = icmp ne %struct.limbo_die_struct* %1, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load %struct.limbo_die_struct*, %struct.limbo_die_struct** %node, align 8
  %next = getelementptr inbounds %struct.limbo_die_struct, %struct.limbo_die_struct* %2, i32 0, i32 2
  %3 = load %struct.limbo_die_struct*, %struct.limbo_die_struct** %next, align 8
  store %struct.limbo_die_struct* %3, %struct.limbo_die_struct** %next_node, align 8
  %4 = load %struct.limbo_die_struct*, %struct.limbo_die_struct** %node, align 8
  %die1 = getelementptr inbounds %struct.limbo_die_struct, %struct.limbo_die_struct* %4, i32 0, i32 0
  %5 = load %struct.die_struct*, %struct.die_struct** %die1, align 8
  store %struct.die_struct* %5, %struct.die_struct** %die, align 8
  %6 = load %struct.die_struct*, %struct.die_struct** %die, align 8
  %die_parent = getelementptr inbounds %struct.die_struct, %struct.die_struct* %6, i32 0, i32 3
  %7 = load %struct.die_struct*, %struct.die_struct** %die_parent, align 8
  %cmp = icmp eq %struct.die_struct* %7, null
  br i1 %cmp, label %if.then, label %if.end.72

if.then:                                          ; preds = %for.body
  %8 = load %struct.die_struct*, %struct.die_struct** %die, align 8
  %call = call %struct.die_struct* @get_AT_ref(%struct.die_struct* %8, i32 49)
  store %struct.die_struct* %call, %struct.die_struct** %origin, align 8
  %9 = load %struct.die_struct*, %struct.die_struct** %origin, align 8
  %tobool2 = icmp ne %struct.die_struct* %9, null
  br i1 %tobool2, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %if.then
  %10 = load %struct.die_struct*, %struct.die_struct** %origin, align 8
  %die_parent4 = getelementptr inbounds %struct.die_struct, %struct.die_struct* %10, i32 0, i32 3
  %11 = load %struct.die_struct*, %struct.die_struct** %die_parent4, align 8
  %12 = load %struct.die_struct*, %struct.die_struct** %die, align 8
  call void @add_child_die(%struct.die_struct* %11, %struct.die_struct* %12)
  br label %if.end.71

if.else:                                          ; preds = %if.then
  %13 = load %struct.die_struct*, %struct.die_struct** %die, align 8
  %14 = load %struct.die_struct*, %struct.die_struct** @comp_unit_die, align 8
  %cmp5 = icmp eq %struct.die_struct* %13, %14
  br i1 %cmp5, label %if.then.6, label %if.else.7

if.then.6:                                        ; preds = %if.else
  br label %if.end.70

if.else.7:                                        ; preds = %if.else
  %15 = load %struct.limbo_die_struct*, %struct.limbo_die_struct** %node, align 8
  %created_for = getelementptr inbounds %struct.limbo_die_struct, %struct.limbo_die_struct* %15, i32 0, i32 1
  %16 = load %union.tree_node*, %union.tree_node** %created_for, align 8
  %tobool8 = icmp ne %union.tree_node* %16, null
  br i1 %tobool8, label %land.lhs.true, label %if.else.16

land.lhs.true:                                    ; preds = %if.else.7
  %17 = load %struct.limbo_die_struct*, %struct.limbo_die_struct** %node, align 8
  %created_for9 = getelementptr inbounds %struct.limbo_die_struct, %struct.limbo_die_struct* %17, i32 0, i32 1
  %18 = load %union.tree_node*, %union.tree_node** %created_for9, align 8
  %common = bitcast %union.tree_node* %18 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp10 = icmp eq i32 %bf.clear, 118
  br i1 %cmp10, label %land.lhs.true.11, label %if.else.16

land.lhs.true.11:                                 ; preds = %land.lhs.true
  %19 = load %struct.limbo_die_struct*, %struct.limbo_die_struct** %node, align 8
  %created_for12 = getelementptr inbounds %struct.limbo_die_struct, %struct.limbo_die_struct* %19, i32 0, i32 1
  %20 = load %union.tree_node*, %union.tree_node** %created_for12, align 8
  %exp = bitcast %union.tree_node* %20 to %struct.tree_exp*
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 2
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i32 0, i64 1
  %21 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8
  %call13 = call %struct.die_struct* @lookup_decl_die(%union.tree_node* %21)
  store %struct.die_struct* %call13, %struct.die_struct** %origin, align 8
  %cmp14 = icmp ne %struct.die_struct* null, %call13
  br i1 %cmp14, label %if.then.15, label %if.else.16

if.then.15:                                       ; preds = %land.lhs.true.11
  %22 = load %struct.die_struct*, %struct.die_struct** %origin, align 8
  %23 = load %struct.die_struct*, %struct.die_struct** %die, align 8
  call void @add_child_die(%struct.die_struct* %22, %struct.die_struct* %23)
  br label %if.end.69

if.else.16:                                       ; preds = %land.lhs.true.11, %land.lhs.true, %if.else.7
  %24 = load %struct.diagnostic_context*, %struct.diagnostic_context** @global_dc, align 8
  %25 = bitcast %struct.diagnostic_context* %24 to %struct.output_buffer*
  %state = getelementptr inbounds %struct.output_buffer, %struct.output_buffer* %25, i32 0, i32 0
  %diagnostic_count = getelementptr inbounds %struct.output_state, %struct.output_state* %state, i32 0, i32 9
  %arrayidx17 = getelementptr inbounds [7 x i32], [7 x i32]* %diagnostic_count, i32 0, i64 3
  %26 = load i32, i32* %arrayidx17, align 4
  %cmp18 = icmp sgt i32 %26, 0
  br i1 %cmp18, label %if.then.23, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else.16
  %27 = load %struct.diagnostic_context*, %struct.diagnostic_context** @global_dc, align 8
  %28 = bitcast %struct.diagnostic_context* %27 to %struct.output_buffer*
  %state19 = getelementptr inbounds %struct.output_buffer, %struct.output_buffer* %28, i32 0, i32 0
  %diagnostic_count20 = getelementptr inbounds %struct.output_state, %struct.output_state* %state19, i32 0, i32 9
  %arrayidx21 = getelementptr inbounds [7 x i32], [7 x i32]* %diagnostic_count20, i32 0, i64 2
  %29 = load i32, i32* %arrayidx21, align 4
  %cmp22 = icmp sgt i32 %29, 0
  br i1 %cmp22, label %if.then.23, label %if.else.24

if.then.23:                                       ; preds = %lor.lhs.false, %if.else.16
  %30 = load %struct.die_struct*, %struct.die_struct** @comp_unit_die, align 8
  %31 = load %struct.die_struct*, %struct.die_struct** %die, align 8
  call void @add_child_die(%struct.die_struct* %30, %struct.die_struct* %31)
  br label %if.end.68

if.else.24:                                       ; preds = %lor.lhs.false
  %32 = load %struct.limbo_die_struct*, %struct.limbo_die_struct** %node, align 8
  %created_for25 = getelementptr inbounds %struct.limbo_die_struct, %struct.limbo_die_struct* %32, i32 0, i32 1
  %33 = load %union.tree_node*, %union.tree_node** %created_for25, align 8
  %tobool26 = icmp ne %union.tree_node* %33, null
  br i1 %tobool26, label %land.lhs.true.27, label %if.else.66

land.lhs.true.27:                                 ; preds = %if.else.24
  %34 = load %struct.limbo_die_struct*, %struct.limbo_die_struct** %node, align 8
  %created_for28 = getelementptr inbounds %struct.limbo_die_struct, %struct.limbo_die_struct* %34, i32 0, i32 1
  %35 = load %union.tree_node*, %union.tree_node** %created_for28, align 8
  %common29 = bitcast %union.tree_node* %35 to %struct.tree_common*
  %code30 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common29, i32 0, i32 2
  %bf.load31 = load i32, i32* %code30, align 8
  %bf.clear32 = and i32 %bf.load31, 255
  %idxprom = sext i32 %bf.clear32 to i64
  %arrayidx33 = getelementptr inbounds [256 x i8], [256 x i8]* @tree_code_type, i32 0, i64 %idxprom
  %36 = load i8, i8* %arrayidx33, align 1
  %conv = sext i8 %36 to i32
  %cmp34 = icmp eq i32 %conv, 100
  br i1 %cmp34, label %land.lhs.true.36, label %lor.lhs.false.40

land.lhs.true.36:                                 ; preds = %land.lhs.true.27
  %37 = load %struct.limbo_die_struct*, %struct.limbo_die_struct** %node, align 8
  %created_for37 = getelementptr inbounds %struct.limbo_die_struct, %struct.limbo_die_struct* %37, i32 0, i32 1
  %38 = load %union.tree_node*, %union.tree_node** %created_for37, align 8
  %decl = bitcast %union.tree_node* %38 to %struct.tree_decl*
  %context38 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl, i32 0, i32 9
  %39 = load %union.tree_node*, %union.tree_node** %context38, align 8
  store %union.tree_node* %39, %union.tree_node** %context, align 8
  %tobool39 = icmp ne %union.tree_node* %39, null
  br i1 %tobool39, label %land.lhs.true.55, label %lor.lhs.false.40

lor.lhs.false.40:                                 ; preds = %land.lhs.true.36, %land.lhs.true.27
  %40 = load %struct.limbo_die_struct*, %struct.limbo_die_struct** %node, align 8
  %created_for41 = getelementptr inbounds %struct.limbo_die_struct, %struct.limbo_die_struct* %40, i32 0, i32 1
  %41 = load %union.tree_node*, %union.tree_node** %created_for41, align 8
  %common42 = bitcast %union.tree_node* %41 to %struct.tree_common*
  %code43 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common42, i32 0, i32 2
  %bf.load44 = load i32, i32* %code43, align 8
  %bf.clear45 = and i32 %bf.load44, 255
  %idxprom46 = sext i32 %bf.clear45 to i64
  %arrayidx47 = getelementptr inbounds [256 x i8], [256 x i8]* @tree_code_type, i32 0, i64 %idxprom46
  %42 = load i8, i8* %arrayidx47, align 1
  %conv48 = sext i8 %42 to i32
  %cmp49 = icmp eq i32 %conv48, 116
  br i1 %cmp49, label %land.lhs.true.51, label %if.else.66

land.lhs.true.51:                                 ; preds = %lor.lhs.false.40
  %43 = load %struct.limbo_die_struct*, %struct.limbo_die_struct** %node, align 8
  %created_for52 = getelementptr inbounds %struct.limbo_die_struct, %struct.limbo_die_struct* %43, i32 0, i32 1
  %44 = load %union.tree_node*, %union.tree_node** %created_for52, align 8
  %type = bitcast %union.tree_node* %44 to %struct.tree_type*
  %context53 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type, i32 0, i32 17
  %45 = load %union.tree_node*, %union.tree_node** %context53, align 8
  store %union.tree_node* %45, %union.tree_node** %context, align 8
  %tobool54 = icmp ne %union.tree_node* %45, null
  br i1 %tobool54, label %land.lhs.true.55, label %if.else.66

land.lhs.true.55:                                 ; preds = %land.lhs.true.51, %land.lhs.true.36
  %46 = load %union.tree_node*, %union.tree_node** %context, align 8
  %common56 = bitcast %union.tree_node* %46 to %struct.tree_common*
  %code57 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common56, i32 0, i32 2
  %bf.load58 = load i32, i32* %code57, align 8
  %bf.clear59 = and i32 %bf.load58, 255
  %cmp60 = icmp eq i32 %bf.clear59, 30
  br i1 %cmp60, label %if.then.62, label %if.else.66

if.then.62:                                       ; preds = %land.lhs.true.55
  %47 = load %union.tree_node*, %union.tree_node** %context, align 8
  %call63 = call %struct.die_struct* @lookup_decl_die(%union.tree_node* %47)
  store %struct.die_struct* %call63, %struct.die_struct** %origin, align 8
  %48 = load %struct.die_struct*, %struct.die_struct** %origin, align 8
  %tobool64 = icmp ne %struct.die_struct* %48, null
  br i1 %tobool64, label %if.end, label %if.then.65

if.then.65:                                       ; preds = %if.then.62
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 12180, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__FUNCTION__.dwarf2out_finish, i32 0, i32 0)) #8
  unreachable

if.end:                                           ; preds = %if.then.62
  %49 = load %struct.die_struct*, %struct.die_struct** %origin, align 8
  %50 = load %struct.die_struct*, %struct.die_struct** %die, align 8
  call void @add_child_die(%struct.die_struct* %49, %struct.die_struct* %50)
  br label %if.end.67

if.else.66:                                       ; preds = %land.lhs.true.55, %land.lhs.true.51, %lor.lhs.false.40, %if.else.24
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 12184, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__FUNCTION__.dwarf2out_finish, i32 0, i32 0)) #8
  unreachable

if.end.67:                                        ; preds = %if.end
  br label %if.end.68

if.end.68:                                        ; preds = %if.end.67, %if.then.23
  br label %if.end.69

if.end.69:                                        ; preds = %if.end.68, %if.then.15
  br label %if.end.70

if.end.70:                                        ; preds = %if.end.69, %if.then.6
  br label %if.end.71

if.end.71:                                        ; preds = %if.end.70, %if.then.3
  br label %if.end.72

if.end.72:                                        ; preds = %if.end.71, %for.body
  %51 = load %struct.limbo_die_struct*, %struct.limbo_die_struct** %node, align 8
  %52 = bitcast %struct.limbo_die_struct* %51 to i8*
  call void @free(i8* %52) #5
  br label %for.inc

for.inc:                                          ; preds = %if.end.72
  %53 = load %struct.limbo_die_struct*, %struct.limbo_die_struct** %next_node, align 8
  store %struct.limbo_die_struct* %53, %struct.limbo_die_struct** %node, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store %struct.limbo_die_struct* null, %struct.limbo_die_struct** @limbo_die_list, align 8
  call void @retry_incomplete_types()
  %54 = load %struct.die_struct*, %struct.die_struct** @comp_unit_die, align 8
  call void @reverse_all_dies(%struct.die_struct* %54)
  %55 = load i32, i32* @flag_eliminate_dwarf2_dups, align 4
  %tobool73 = icmp ne i32 %55, 0
  br i1 %tobool73, label %if.then.74, label %if.end.75

if.then.74:                                       ; preds = %for.end
  %56 = load %struct.die_struct*, %struct.die_struct** @comp_unit_die, align 8
  call void @break_out_includes(%struct.die_struct* %56)
  br label %if.end.75

if.end.75:                                        ; preds = %if.then.74, %for.end
  %57 = load %struct.die_struct*, %struct.die_struct** @comp_unit_die, align 8
  call void @add_sibling_attributes(%struct.die_struct* %57)
  %58 = load %struct.limbo_die_struct*, %struct.limbo_die_struct** @limbo_die_list, align 8
  store %struct.limbo_die_struct* %58, %struct.limbo_die_struct** %node, align 8
  br label %for.cond.76

for.cond.76:                                      ; preds = %for.inc.80, %if.end.75
  %59 = load %struct.limbo_die_struct*, %struct.limbo_die_struct** %node, align 8
  %tobool77 = icmp ne %struct.limbo_die_struct* %59, null
  br i1 %tobool77, label %for.body.78, label %for.end.82

for.body.78:                                      ; preds = %for.cond.76
  %60 = load %struct.limbo_die_struct*, %struct.limbo_die_struct** %node, align 8
  %die79 = getelementptr inbounds %struct.limbo_die_struct, %struct.limbo_die_struct* %60, i32 0, i32 0
  %61 = load %struct.die_struct*, %struct.die_struct** %die79, align 8
  call void @add_sibling_attributes(%struct.die_struct* %61)
  br label %for.inc.80

for.inc.80:                                       ; preds = %for.body.78
  %62 = load %struct.limbo_die_struct*, %struct.limbo_die_struct** %node, align 8
  %next81 = getelementptr inbounds %struct.limbo_die_struct, %struct.limbo_die_struct* %62, i32 0, i32 2
  %63 = load %struct.limbo_die_struct*, %struct.limbo_die_struct** %next81, align 8
  store %struct.limbo_die_struct* %63, %struct.limbo_die_struct** %node, align 8
  br label %for.cond.76

for.end.82:                                       ; preds = %for.cond.76
  call void @text_section()
  br label %do.body

do.body:                                          ; preds = %for.end.82
  %64 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8
  %call83 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %64, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.410, i32 0, i32 0), i32 0)
  br label %do.end

do.end:                                           ; preds = %do.body
  %65 = load i32, i32* @have_location_lists, align 4
  %tobool84 = icmp ne i32 %65, 0
  br i1 %tobool84, label %if.then.85, label %if.end.90

if.then.85:                                       ; preds = %do.end
  call void @named_section_flags(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.426, i32 0, i32 0), i32 1024)
  br label %do.body.86

do.body.86:                                       ; preds = %if.then.85
  %call87 = call i32 (i8*, i8*, ...) @sprintf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @loc_section_label, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.427, i32 0, i32 0), i32 0) #5
  br label %do.end.88

do.end.88:                                        ; preds = %do.body.86
  %66 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8
  call void @assemble_name(%struct._IO_FILE* %66, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @loc_section_label, i32 0, i32 0))
  %67 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8
  %call89 = call i32 @fputs(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), %struct._IO_FILE* %67)
  %68 = load %struct.die_struct*, %struct.die_struct** %die, align 8
  call void @output_location_lists(%struct.die_struct* %68)
  store i32 0, i32* @have_location_lists, align 4
  br label %if.end.90

if.end.90:                                        ; preds = %do.end.88, %do.end
  %69 = load i32, i32* @separate_line_info_table_in_use, align 4
  %cmp91 = icmp eq i32 %69, 0
  br i1 %cmp91, label %if.then.93, label %if.else.94

if.then.93:                                       ; preds = %if.end.90
  %70 = load %struct.die_struct*, %struct.die_struct** @comp_unit_die, align 8
  call void @add_AT_lbl_id(%struct.die_struct* %70, i32 17, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @text_section_label, i32 0, i32 0))
  %71 = load %struct.die_struct*, %struct.die_struct** @comp_unit_die, align 8
  call void @add_AT_lbl_id(%struct.die_struct* %71, i32 18, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @text_end_label, i32 0, i32 0))
  br label %if.end.100

if.else.94:                                       ; preds = %if.end.90
  %72 = load i32, i32* @have_location_lists, align 4
  %tobool95 = icmp ne i32 %72, 0
  br i1 %tobool95, label %if.then.98, label %lor.lhs.false.96

lor.lhs.false.96:                                 ; preds = %if.else.94
  %73 = load i32, i32* @ranges_table_in_use, align 4
  %tobool97 = icmp ne i32 %73, 0
  br i1 %tobool97, label %if.then.98, label %if.end.99

if.then.98:                                       ; preds = %lor.lhs.false.96, %if.else.94
  %74 = load %struct.die_struct*, %struct.die_struct** @comp_unit_die, align 8
  %75 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  call void @add_AT_addr(%struct.die_struct* %74, i32 82, %struct.rtx_def* %75)
  br label %if.end.99

if.end.99:                                        ; preds = %if.then.98, %lor.lhs.false.96
  br label %if.end.100

if.end.100:                                       ; preds = %if.end.99, %if.then.93
  %76 = load i32, i32* @debug_info_level, align 4
  %cmp101 = icmp uge i32 %76, 2
  br i1 %cmp101, label %if.then.103, label %if.end.104

if.then.103:                                      ; preds = %if.end.100
  %77 = load %struct.die_struct*, %struct.die_struct** @comp_unit_die, align 8
  call void @add_AT_lbl_offset(%struct.die_struct* %77, i32 16, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @debug_line_section_label, i32 0, i32 0))
  br label %if.end.104

if.end.104:                                       ; preds = %if.then.103, %if.end.100
  %78 = load i32, i32* @debug_info_level, align 4
  %cmp105 = icmp uge i32 %78, 3
  br i1 %cmp105, label %if.then.107, label %if.end.108

if.then.107:                                      ; preds = %if.end.104
  %79 = load %struct.die_struct*, %struct.die_struct** @comp_unit_die, align 8
  call void @add_AT_lbl_offset(%struct.die_struct* %79, i32 67, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @macinfo_section_label, i32 0, i32 0))
  br label %if.end.108

if.end.108:                                       ; preds = %if.then.107, %if.end.104
  %80 = load %struct.limbo_die_struct*, %struct.limbo_die_struct** @limbo_die_list, align 8
  store %struct.limbo_die_struct* %80, %struct.limbo_die_struct** %node, align 8
  br label %for.cond.109

for.cond.109:                                     ; preds = %for.inc.113, %if.end.108
  %81 = load %struct.limbo_die_struct*, %struct.limbo_die_struct** %node, align 8
  %tobool110 = icmp ne %struct.limbo_die_struct* %81, null
  br i1 %tobool110, label %for.body.111, label %for.end.115

for.body.111:                                     ; preds = %for.cond.109
  %82 = load %struct.limbo_die_struct*, %struct.limbo_die_struct** %node, align 8
  %die112 = getelementptr inbounds %struct.limbo_die_struct, %struct.limbo_die_struct* %82, i32 0, i32 0
  %83 = load %struct.die_struct*, %struct.die_struct** %die112, align 8
  call void @output_comp_unit(%struct.die_struct* %83)
  br label %for.inc.113

for.inc.113:                                      ; preds = %for.body.111
  %84 = load %struct.limbo_die_struct*, %struct.limbo_die_struct** %node, align 8
  %next114 = getelementptr inbounds %struct.limbo_die_struct, %struct.limbo_die_struct* %84, i32 0, i32 2
  %85 = load %struct.limbo_die_struct*, %struct.limbo_die_struct** %next114, align 8
  store %struct.limbo_die_struct* %85, %struct.limbo_die_struct** %node, align 8
  br label %for.cond.109

for.end.115:                                      ; preds = %for.cond.109
  %86 = load %struct.die_struct*, %struct.die_struct** @comp_unit_die, align 8
  call void @output_comp_unit(%struct.die_struct* %86)
  call void @named_section_flags(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.416, i32 0, i32 0), i32 1024)
  call void @output_abbrev_section()
  %87 = load i32, i32* @pubname_table_in_use, align 4
  %tobool116 = icmp ne i32 %87, 0
  br i1 %tobool116, label %if.then.117, label %if.end.118

if.then.117:                                      ; preds = %for.end.115
  call void @named_section_flags(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.428, i32 0, i32 0), i32 1024)
  call void @output_pubnames()
  br label %if.end.118

if.end.118:                                       ; preds = %if.then.117, %for.end.115
  %88 = load i32, i32* @fde_table_in_use, align 4
  %tobool119 = icmp ne i32 %88, 0
  br i1 %tobool119, label %if.then.120, label %if.end.121

if.then.120:                                      ; preds = %if.end.118
  call void @named_section_flags(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.429, i32 0, i32 0), i32 1024)
  call void @output_aranges()
  br label %if.end.121

if.end.121:                                       ; preds = %if.then.120, %if.end.118
  %89 = load i32, i32* @ranges_table_in_use, align 4
  %tobool122 = icmp ne i32 %89, 0
  br i1 %tobool122, label %if.then.123, label %if.end.125

if.then.123:                                      ; preds = %if.end.121
  call void @named_section_flags(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.430, i32 0, i32 0), i32 1024)
  %90 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8
  call void @assemble_name(%struct._IO_FILE* %90, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @ranges_section_label, i32 0, i32 0))
  %91 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8
  %call124 = call i32 @fputs(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), %struct._IO_FILE* %91)
  call void @output_ranges()
  br label %if.end.125

if.end.125:                                       ; preds = %if.then.123, %if.end.121
  %92 = load i32, i32* @debug_info_level, align 4
  %cmp126 = icmp uge i32 %92, 3
  br i1 %cmp126, label %if.then.128, label %if.end.129

if.then.128:                                      ; preds = %if.end.125
  call void @named_section_flags(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.398, i32 0, i32 0), i32 1024)
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 1, i64 4, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.402, i32 0, i32 0))
  br label %if.end.129

if.end.129:                                       ; preds = %if.then.128, %if.end.125
  %93 = load %struct.ht*, %struct.ht** @debug_str_hash, align 8
  %tobool130 = icmp ne %struct.ht* %93, null
  br i1 %tobool130, label %if.then.131, label %if.end.132

if.then.131:                                      ; preds = %if.end.129
  %94 = load %struct.ht*, %struct.ht** @debug_str_hash, align 8
  call void @ht_forall(%struct.ht* %94, i32 (%struct.cpp_reader*, %struct.ht_identifier*, i8*)* @output_indirect_string, i8* null)
  br label %if.end.132

if.end.132:                                       ; preds = %if.then.131, %if.end.129
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @dwarf2out_define(i32 %lineno, i8* %buffer) #0 {
entry:
  %lineno.addr = alloca i32, align 4
  %buffer.addr = alloca i8*, align 8
  store i32 %lineno, i32* %lineno.addr, align 4
  store i8* %buffer, i8** %buffer.addr, align 8
  %0 = load i32, i32* @debug_info_level, align 4
  %cmp = icmp uge i32 %0, 3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @named_section_flags(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.398, i32 0, i32 0), i32 1024)
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 1, i64 1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.403, i32 0, i32 0))
  %1 = load i32, i32* %lineno.addr, align 4
  %conv = zext i32 %1 to i64
  %2 = load i32, i32* %lineno.addr, align 4
  call void (i64, i8*, ...) @dw2_asm_output_data_uleb128(i64 %conv, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.404, i32 0, i32 0), i32 %2)
  %3 = load i8*, i8** %buffer.addr, align 8
  call void (i8*, i64, i8*, ...) @dw2_asm_output_nstring(i8* %3, i64 -1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.405, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @dwarf2out_undef(i32 %lineno, i8* %buffer) #0 {
entry:
  %lineno.addr = alloca i32, align 4
  %buffer.addr = alloca i8*, align 8
  store i32 %lineno, i32* %lineno.addr, align 4
  store i8* %buffer, i8** %buffer.addr, align 8
  %0 = load i32, i32* @debug_info_level, align 4
  %cmp = icmp uge i32 %0, 3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @named_section_flags(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.398, i32 0, i32 0), i32 1024)
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 1, i64 2, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.406, i32 0, i32 0))
  %1 = load i32, i32* %lineno.addr, align 4
  %conv = zext i32 %1 to i64
  %2 = load i32, i32* %lineno.addr, align 4
  call void (i64, i8*, ...) @dw2_asm_output_data_uleb128(i64 %conv, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.404, i32 0, i32 0), i32 %2)
  %3 = load i8*, i8** %buffer.addr, align 8
  call void (i8*, i64, i8*, ...) @dw2_asm_output_nstring(i8* %3, i64 -1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.405, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @dwarf2out_start_source_file(i32 %lineno, i8* %filename) #0 {
entry:
  %lineno.addr = alloca i32, align 4
  %filename.addr = alloca i8*, align 8
  %bincl_die = alloca %struct.die_struct*, align 8
  store i32 %lineno, i32* %lineno.addr, align 4
  store i8* %filename, i8** %filename.addr, align 8
  %0 = load i32, i32* @flag_eliminate_dwarf2_dups, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.die_struct*, %struct.die_struct** @comp_unit_die, align 8
  %call = call %struct.die_struct* @new_die(i32 16644, %struct.die_struct* %1, %union.tree_node* null)
  store %struct.die_struct* %call, %struct.die_struct** %bincl_die, align 8
  %2 = load %struct.die_struct*, %struct.die_struct** %bincl_die, align 8
  %3 = load i8*, i8** %filename.addr, align 8
  call void @add_AT_string(%struct.die_struct* %2, i32 3, i8* %3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* @debug_info_level, align 4
  %cmp = icmp uge i32 %4, 3
  br i1 %cmp, label %if.then.1, label %if.end.4

if.then.1:                                        ; preds = %if.end
  call void @named_section_flags(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.398, i32 0, i32 0), i32 1024)
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 1, i64 3, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.399, i32 0, i32 0))
  %5 = load i32, i32* %lineno.addr, align 4
  %conv = zext i32 %5 to i64
  %6 = load i32, i32* %lineno.addr, align 4
  call void (i64, i8*, ...) @dw2_asm_output_data_uleb128(i64 %conv, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.400, i32 0, i32 0), i32 %6)
  %7 = load i8*, i8** %filename.addr, align 8
  %call2 = call i32 @lookup_filename(i8* %7)
  %conv3 = zext i32 %call2 to i64
  call void (i64, i8*, ...) @dw2_asm_output_data_uleb128(i64 %conv3, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.401, i32 0, i32 0))
  br label %if.end.4

if.end.4:                                         ; preds = %if.then.1, %if.end
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @dwarf2out_end_source_file(i32 %lineno) #0 {
entry:
  %lineno.addr = alloca i32, align 4
  store i32 %lineno, i32* %lineno.addr, align 4
  %0 = load i32, i32* @flag_eliminate_dwarf2_dups, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.die_struct*, %struct.die_struct** @comp_unit_die, align 8
  %call = call %struct.die_struct* @new_die(i32 16645, %struct.die_struct* %1, %union.tree_node* null)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load i32, i32* @debug_info_level, align 4
  %cmp = icmp uge i32 %2, 3
  br i1 %cmp, label %if.then.1, label %if.end.2

if.then.1:                                        ; preds = %if.end
  call void @named_section_flags(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.398, i32 0, i32 0), i32 1024)
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 1, i64 4, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.402, i32 0, i32 0))
  br label %if.end.2

if.end.2:                                         ; preds = %if.then.1, %if.end
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @dwarf2out_begin_block(i32 %line, i32 %blocknum) #0 {
entry:
  %line.addr = alloca i32, align 4
  %blocknum.addr = alloca i32, align 4
  store i32 %line, i32* %line.addr, align 4
  store i32 %blocknum, i32* %blocknum.addr, align 4
  %0 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  call void @function_section(%union.tree_node* %0)
  br label %do.body

do.body:                                          ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8
  %2 = load i32, i32* %blocknum.addr, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.386, i32 0, i32 0), i32 %2)
  br label %do.end

do.end:                                           ; preds = %do.body
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @dwarf2out_end_block(i32 %line, i32 %blocknum) #0 {
entry:
  %line.addr = alloca i32, align 4
  %blocknum.addr = alloca i32, align 4
  store i32 %line, i32* %line.addr, align 4
  store i32 %blocknum, i32* %blocknum.addr, align 4
  %0 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  call void @function_section(%union.tree_node* %0)
  br label %do.body

do.body:                                          ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8
  %2 = load i32, i32* %blocknum.addr, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.387, i32 0, i32 0), i32 %2)
  br label %do.end

do.end:                                           ; preds = %do.body
  ret void
}

; Function Attrs: nounwind uwtable
define internal zeroext i1 @dwarf2out_ignore_block(%union.tree_node* %block) #0 {
entry:
  %retval = alloca i1, align 1
  %block.addr = alloca %union.tree_node*, align 8
  %decl = alloca %union.tree_node*, align 8
  store %union.tree_node* %block, %union.tree_node** %block.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %block.addr, align 8
  %block1 = bitcast %union.tree_node* %0 to %struct.tree_block*
  %vars = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block1, i32 0, i32 2
  %1 = load %union.tree_node*, %union.tree_node** %vars, align 8
  store %union.tree_node* %1, %union.tree_node** %decl, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %tobool = icmp ne %union.tree_node* %2, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %common = bitcast %union.tree_node* %3 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 30
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body
  %4 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %common2 = bitcast %union.tree_node* %4 to %struct.tree_common*
  %code3 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 2
  %bf.load4 = load i32, i32* %code3, align 8
  %bf.clear5 = and i32 %bf.load4, 255
  %cmp6 = icmp eq i32 %bf.clear5, 33
  br i1 %cmp6, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.lhs.false
  %5 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl7 = bitcast %union.tree_node* %5 to %struct.tree_decl*
  %name = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl7, i32 0, i32 8
  %6 = load %union.tree_node*, %union.tree_node** %name, align 8
  %cmp8 = icmp eq %union.tree_node* %6, null
  br i1 %cmp8, label %if.then, label %lor.lhs.false.9

lor.lhs.false.9:                                  ; preds = %land.lhs.true
  %7 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl10 = bitcast %union.tree_node* %7 to %struct.tree_decl*
  %artificial_flag = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl10, i32 0, i32 5
  %8 = bitcast i48* %artificial_flag to i64*
  %bf.load11 = load i64, i64* %8, align 8
  %bf.lshr = lshr i64 %bf.load11, 22
  %bf.clear12 = and i64 %bf.lshr, 1
  %bf.cast = trunc i64 %bf.clear12 to i32
  %tobool13 = icmp ne i32 %bf.cast, 0
  br i1 %tobool13, label %land.lhs.true.14, label %if.end

land.lhs.true.14:                                 ; preds = %lor.lhs.false.9
  %9 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %common15 = bitcast %union.tree_node* %9 to %struct.tree_common*
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common15, i32 0, i32 1
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8
  %call = call i32 @is_tagged_type(%union.tree_node* %10)
  %tobool16 = icmp ne i32 %call, 0
  br i1 %tobool16, label %land.lhs.true.17, label %if.end

land.lhs.true.17:                                 ; preds = %land.lhs.true.14
  %11 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %12 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %common18 = bitcast %union.tree_node* %12 to %struct.tree_common*
  %type19 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common18, i32 0, i32 1
  %13 = load %union.tree_node*, %union.tree_node** %type19, align 8
  %common20 = bitcast %union.tree_node* %13 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common20, i32 0, i32 0
  %14 = load %union.tree_node*, %union.tree_node** %chain, align 8
  %cmp21 = icmp eq %union.tree_node* %11, %14
  br i1 %cmp21, label %if.then, label %lor.lhs.false.22

lor.lhs.false.22:                                 ; preds = %land.lhs.true.17
  %15 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl23 = bitcast %union.tree_node* %15 to %struct.tree_decl*
  %abstract_origin = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl23, i32 0, i32 13
  %16 = load %union.tree_node*, %union.tree_node** %abstract_origin, align 8
  %cmp24 = icmp ne %union.tree_node* %16, null
  br i1 %cmp24, label %land.lhs.true.25, label %if.end

land.lhs.true.25:                                 ; preds = %lor.lhs.false.22
  %17 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %call26 = call %union.tree_node* @decl_ultimate_origin(%union.tree_node* %17)
  %18 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %common27 = bitcast %union.tree_node* %18 to %struct.tree_common*
  %type28 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common27, i32 0, i32 1
  %19 = load %union.tree_node*, %union.tree_node** %type28, align 8
  %common29 = bitcast %union.tree_node* %19 to %struct.tree_common*
  %chain30 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common29, i32 0, i32 0
  %20 = load %union.tree_node*, %union.tree_node** %chain30, align 8
  %cmp31 = icmp eq %union.tree_node* %call26, %20
  br i1 %cmp31, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true.25, %land.lhs.true.17, %land.lhs.true, %for.body
  store i1 false, i1* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true.25, %lor.lhs.false.22, %land.lhs.true.14, %lor.lhs.false.9, %lor.lhs.false
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %21 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %common32 = bitcast %union.tree_node* %21 to %struct.tree_common*
  %chain33 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common32, i32 0, i32 0
  %22 = load %union.tree_node*, %union.tree_node** %chain33, align 8
  store %union.tree_node* %22, %union.tree_node** %decl, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i1 true, i1* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then
  %23 = load i1, i1* %retval
  ret i1 %23
}

declare void @debug_nothing_int(i32) #1

declare void @debug_nothing_tree(%union.tree_node*) #1

; Function Attrs: nounwind uwtable
define void @dwarf2out_decl(%union.tree_node* %decl) #0 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %context_die = alloca %struct.die_struct*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  %0 = load %struct.die_struct*, %struct.die_struct** @comp_unit_die, align 8
  store %struct.die_struct* %0, %struct.die_struct** %context_die, align 8
  %1 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common = bitcast %union.tree_node* %1 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  switch i32 %bf.clear, label %sw.default [
    i32 0, label %sw.bb
    i32 30, label %sw.bb.1
    i32 34, label %sw.bb.17
    i32 33, label %sw.bb.36
  ]

sw.bb:                                            ; preds = %entry
  br label %return

sw.bb.1:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl2 = bitcast %union.tree_node* %2 to %struct.tree_decl*
  %external_flag = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl2, i32 0, i32 5
  %3 = bitcast i48* %external_flag to i64*
  %bf.load3 = load i64, i64* %3, align 8
  %bf.lshr = lshr i64 %bf.load3, 8
  %bf.clear4 = and i64 %bf.lshr, 1
  %bf.cast = trunc i64 %bf.clear4 to i32
  %tobool = icmp ne i32 %bf.cast, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %sw.bb.1
  %4 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl5 = bitcast %union.tree_node* %4 to %struct.tree_decl*
  %built_in_class = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl5, i32 0, i32 5
  %5 = bitcast i48* %built_in_class to i64*
  %bf.load6 = load i64, i64* %5, align 8
  %bf.lshr7 = lshr i64 %bf.load6, 29
  %bf.clear8 = and i64 %bf.lshr7, 3
  %bf.cast9 = trunc i64 %bf.clear8 to i32
  %cmp = icmp ne i32 %bf.cast9, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  br label %return

if.end:                                           ; preds = %land.lhs.true, %sw.bb.1
  %6 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl10 = bitcast %union.tree_node* %6 to %struct.tree_decl*
  %initial = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl10, i32 0, i32 12
  %7 = load %union.tree_node*, %union.tree_node** %initial, align 8
  %cmp11 = icmp eq %union.tree_node* %7, null
  br i1 %cmp11, label %if.then.12, label %if.end.13

if.then.12:                                       ; preds = %if.end
  br label %return

if.end.13:                                        ; preds = %if.end
  %8 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %call = call %union.tree_node* @decl_function_context(%union.tree_node* %8)
  %tobool14 = icmp ne %union.tree_node* %call, null
  br i1 %tobool14, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %if.end.13
  store %struct.die_struct* null, %struct.die_struct** %context_die, align 8
  br label %if.end.16

if.end.16:                                        ; preds = %if.then.15, %if.end.13
  br label %sw.epilog

sw.bb.17:                                         ; preds = %entry
  %9 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl18 = bitcast %union.tree_node* %9 to %struct.tree_decl*
  %external_flag19 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl18, i32 0, i32 5
  %10 = bitcast i48* %external_flag19 to i64*
  %bf.load20 = load i64, i64* %10, align 8
  %bf.lshr21 = lshr i64 %bf.load20, 8
  %bf.clear22 = and i64 %bf.lshr21, 1
  %bf.cast23 = trunc i64 %bf.clear22 to i32
  %tobool24 = icmp ne i32 %bf.cast23, 0
  br i1 %tobool24, label %land.lhs.true.25, label %if.end.32

land.lhs.true.25:                                 ; preds = %sw.bb.17
  %11 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common26 = bitcast %union.tree_node* %11 to %struct.tree_common*
  %used_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common26, i32 0, i32 2
  %bf.load27 = load i32, i32* %used_flag, align 8
  %bf.lshr28 = lshr i32 %bf.load27, 16
  %bf.clear29 = and i32 %bf.lshr28, 1
  %tobool30 = icmp ne i32 %bf.clear29, 0
  br i1 %tobool30, label %if.end.32, label %if.then.31

if.then.31:                                       ; preds = %land.lhs.true.25
  br label %return

if.end.32:                                        ; preds = %land.lhs.true.25, %sw.bb.17
  %12 = load i32, i32* @debug_info_level, align 4
  %cmp33 = icmp ule i32 %12, 1
  br i1 %cmp33, label %if.then.34, label %if.end.35

if.then.34:                                       ; preds = %if.end.32
  br label %return

if.end.35:                                        ; preds = %if.end.32
  br label %sw.epilog

sw.bb.36:                                         ; preds = %entry
  %13 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl37 = bitcast %union.tree_node* %13 to %struct.tree_decl*
  %external_flag38 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl37, i32 0, i32 5
  %14 = bitcast i48* %external_flag38 to i64*
  %bf.load39 = load i64, i64* %14, align 8
  %bf.lshr40 = lshr i64 %bf.load39, 8
  %bf.clear41 = and i64 %bf.lshr40, 1
  %bf.cast42 = trunc i64 %bf.clear41 to i32
  %tobool43 = icmp ne i32 %bf.cast42, 0
  br i1 %tobool43, label %if.then.44, label %if.end.45

if.then.44:                                       ; preds = %sw.bb.36
  br label %return

if.end.45:                                        ; preds = %sw.bb.36
  %15 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl46 = bitcast %union.tree_node* %15 to %struct.tree_decl*
  %linenum = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl46, i32 0, i32 2
  %16 = load i32, i32* %linenum, align 4
  %cmp47 = icmp eq i32 %16, 0
  br i1 %cmp47, label %if.then.48, label %if.end.70

if.then.48:                                       ; preds = %if.end.45
  %17 = load %struct.die_struct*, %struct.die_struct** @comp_unit_die, align 8
  %call49 = call i32 @get_AT_unsigned(%struct.die_struct* %17, i32 19)
  %cmp50 = icmp eq i32 %call49, 4
  br i1 %cmp50, label %land.lhs.true.51, label %if.end.69

land.lhs.true.51:                                 ; preds = %if.then.48
  %18 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common52 = bitcast %union.tree_node* %18 to %struct.tree_common*
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common52, i32 0, i32 1
  %19 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common53 = bitcast %union.tree_node* %19 to %struct.tree_common*
  %code54 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common53, i32 0, i32 2
  %bf.load55 = load i32, i32* %code54, align 8
  %bf.clear56 = and i32 %bf.load55, 255
  %cmp57 = icmp eq i32 %bf.clear56, 11
  br i1 %cmp57, label %land.lhs.true.58, label %if.end.69

land.lhs.true.58:                                 ; preds = %land.lhs.true.51
  %20 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl59 = bitcast %union.tree_node* %20 to %struct.tree_decl*
  %ignored_flag = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl59, i32 0, i32 5
  %21 = bitcast i48* %ignored_flag to i64*
  %bf.load60 = load i64, i64* %21, align 8
  %bf.lshr61 = lshr i64 %bf.load60, 14
  %bf.clear62 = and i64 %bf.lshr61, 1
  %bf.cast63 = trunc i64 %bf.clear62 to i32
  %tobool64 = icmp ne i32 %bf.cast63, 0
  br i1 %tobool64, label %if.end.69, label %if.then.65

if.then.65:                                       ; preds = %land.lhs.true.58
  %22 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common66 = bitcast %union.tree_node* %22 to %struct.tree_common*
  %type67 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common66, i32 0, i32 1
  %23 = load %union.tree_node*, %union.tree_node** %type67, align 8
  %call68 = call %struct.die_struct* @modified_type_die(%union.tree_node* %23, i32 0, i32 0, %struct.die_struct* null)
  br label %if.end.69

if.end.69:                                        ; preds = %if.then.65, %land.lhs.true.58, %land.lhs.true.51, %if.then.48
  br label %return

if.end.70:                                        ; preds = %if.end.45
  %24 = load i32, i32* @debug_info_level, align 4
  %cmp71 = icmp ule i32 %24, 1
  br i1 %cmp71, label %if.then.72, label %if.end.73

if.then.72:                                       ; preds = %if.end.70
  br label %return

if.end.73:                                        ; preds = %if.end.70
  %25 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %call74 = call %union.tree_node* @decl_function_context(%union.tree_node* %25)
  %tobool75 = icmp ne %union.tree_node* %call74, null
  br i1 %tobool75, label %if.then.76, label %if.end.77

if.then.76:                                       ; preds = %if.end.73
  store %struct.die_struct* null, %struct.die_struct** %context_die, align 8
  br label %if.end.77

if.end.77:                                        ; preds = %if.then.76, %if.end.73
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  br label %return

sw.epilog:                                        ; preds = %if.end.77, %if.end.35, %if.end.16
  %26 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %27 = load %struct.die_struct*, %struct.die_struct** %context_die, align 8
  call void @gen_decl_die(%union.tree_node* %26, %struct.die_struct* %27)
  br label %return

return:                                           ; preds = %sw.epilog, %sw.default, %if.then.72, %if.end.69, %if.then.44, %if.then.34, %if.then.31, %if.then.12, %if.then, %sw.bb
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @dwarf2out_global_decl(%union.tree_node* %decl) #0 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp ne i32 %bf.clear, 30
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl1 = bitcast %union.tree_node* %1 to %struct.tree_decl*
  %initial = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1, i32 0, i32 12
  %2 = load %union.tree_node*, %union.tree_node** %initial, align 8
  %tobool = icmp ne %union.tree_node* %2, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  call void @dwarf2out_decl(%union.tree_node* %3)
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @dwarf2out_abstract_function(%union.tree_node* %decl) #0 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %old_die = alloca %struct.die_struct*, align 8
  %save_fn = alloca %union.tree_node*, align 8
  %context = alloca %union.tree_node*, align 8
  %was_abstract = alloca i32, align 4
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl1 = bitcast %union.tree_node* %0 to %struct.tree_decl*
  %abstract_flag = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1, i32 0, i32 5
  %1 = bitcast i48* %abstract_flag to i64*
  %bf.load = load i64, i64* %1, align 8
  %bf.lshr = lshr i64 %bf.load, 15
  %bf.clear = and i64 %bf.lshr, 1
  %bf.cast = trunc i64 %bf.clear to i32
  store i32 %bf.cast, i32* %was_abstract, align 4
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl2 = bitcast %union.tree_node* %2 to %struct.tree_decl*
  %abstract_origin = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl2, i32 0, i32 13
  %3 = load %union.tree_node*, %union.tree_node** %abstract_origin, align 8
  %tobool = icmp ne %union.tree_node* %3, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl3 = bitcast %union.tree_node* %4 to %struct.tree_decl*
  %abstract_origin4 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl3, i32 0, i32 13
  %5 = load %union.tree_node*, %union.tree_node** %abstract_origin4, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %6 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %5, %cond.true ], [ %6, %cond.false ]
  store %union.tree_node* %cond, %union.tree_node** %decl.addr, align 8
  %7 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %call = call %struct.die_struct* @lookup_decl_die(%union.tree_node* %7)
  store %struct.die_struct* %call, %struct.die_struct** %old_die, align 8
  %8 = load %struct.die_struct*, %struct.die_struct** %old_die, align 8
  %tobool5 = icmp ne %struct.die_struct* %8, null
  br i1 %tobool5, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.end
  %9 = load %struct.die_struct*, %struct.die_struct** %old_die, align 8
  %call6 = call i32 @get_AT_unsigned(%struct.die_struct* %9, i32 32)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  br label %return

if.end:                                           ; preds = %land.lhs.true, %cond.end
  %10 = load i32, i32* @debug_info_level, align 4
  %cmp = icmp ugt i32 %10, 1
  br i1 %cmp, label %if.then.8, label %if.end.19

if.then.8:                                        ; preds = %if.end
  %11 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %call9 = call %union.tree_node* @decl_class_context(%union.tree_node* %11)
  store %union.tree_node* %call9, %union.tree_node** %context, align 8
  %12 = load %union.tree_node*, %union.tree_node** %context, align 8
  %tobool10 = icmp ne %union.tree_node* %12, null
  br i1 %tobool10, label %if.then.11, label %if.end.18

if.then.11:                                       ; preds = %if.then.8
  %13 = load %union.tree_node*, %union.tree_node** %context, align 8
  %14 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %15 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %call12 = call %union.tree_node* @decl_function_context(%union.tree_node* %15)
  %tobool13 = icmp ne %union.tree_node* %call12, null
  br i1 %tobool13, label %cond.true.14, label %cond.false.15

cond.true.14:                                     ; preds = %if.then.11
  br label %cond.end.16

cond.false.15:                                    ; preds = %if.then.11
  %16 = load %struct.die_struct*, %struct.die_struct** @comp_unit_die, align 8
  br label %cond.end.16

cond.end.16:                                      ; preds = %cond.false.15, %cond.true.14
  %cond17 = phi %struct.die_struct* [ null, %cond.true.14 ], [ %16, %cond.false.15 ]
  call void @gen_type_die_for_member(%union.tree_node* %13, %union.tree_node* %14, %struct.die_struct* %cond17)
  br label %if.end.18

if.end.18:                                        ; preds = %cond.end.16, %if.then.8
  br label %if.end.19

if.end.19:                                        ; preds = %if.end.18, %if.end
  %17 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  store %union.tree_node* %17, %union.tree_node** %save_fn, align 8
  %18 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  store %union.tree_node* %18, %union.tree_node** @current_function_decl, align 8
  %19 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  call void @set_decl_abstract_flags(%union.tree_node* %19, i32 1)
  %20 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  call void @dwarf2out_decl(%union.tree_node* %20)
  %21 = load i32, i32* %was_abstract, align 4
  %tobool20 = icmp ne i32 %21, 0
  br i1 %tobool20, label %if.end.22, label %if.then.21

if.then.21:                                       ; preds = %if.end.19
  %22 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  call void @set_decl_abstract_flags(%union.tree_node* %22, i32 0)
  br label %if.end.22

if.end.22:                                        ; preds = %if.then.21, %if.end.19
  %23 = load %union.tree_node*, %union.tree_node** %save_fn, align 8
  store %union.tree_node* %23, %union.tree_node** @current_function_decl, align 8
  br label %return

return:                                           ; preds = %if.end.22, %if.then
  ret void
}

declare void @debug_nothing_rtx(%struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define void @dwarf2out_set_demangle_name_func(i8* (i8*)* %func) #0 {
entry:
  %func.addr = alloca i8* (i8*)*, align 8
  store i8* (i8*)* %func, i8* (i8*)** %func.addr, align 8
  %0 = load i8* (i8*)*, i8* (i8*)** %func.addr, align 8
  store i8* (i8*)* %0, i8* (i8*)** @demangle_name_func, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define void @debug_dwarf_die(%struct.die_struct* %die) #0 {
entry:
  %die.addr = alloca %struct.die_struct*, align 8
  store %struct.die_struct* %die, %struct.die_struct** %die.addr, align 8
  %0 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  call void @print_die(%struct.die_struct* %0, %struct._IO_FILE* %1)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @print_die(%struct.die_struct* %die, %struct._IO_FILE* %outfile) #0 {
entry:
  %die.addr = alloca %struct.die_struct*, align 8
  %outfile.addr = alloca %struct._IO_FILE*, align 8
  %a = alloca %struct.dw_attr_struct*, align 8
  %c = alloca %struct.die_struct*, align 8
  store %struct.die_struct* %die, %struct.die_struct** %die.addr, align 8
  store %struct._IO_FILE* %outfile, %struct._IO_FILE** %outfile.addr, align 8
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8
  call void @print_spaces(%struct._IO_FILE* %0)
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8
  %2 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %die_offset = getelementptr inbounds %struct.die_struct, %struct.die_struct* %2, i32 0, i32 6
  %3 = load i64, i64* %die_offset, align 8
  %4 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %die_tag = getelementptr inbounds %struct.die_struct, %struct.die_struct* %4, i32 0, i32 0
  %5 = load i32, i32* %die_tag, align 4
  %call = call i8* @dwarf_tag_name(i32 %5)
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.214, i32 0, i32 0), i64 %3, i8* %call)
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8
  call void @print_spaces(%struct._IO_FILE* %6)
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8
  %8 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %die_abbrev = getelementptr inbounds %struct.die_struct, %struct.die_struct* %8, i32 0, i32 7
  %9 = load i64, i64* %die_abbrev, align 8
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.215, i32 0, i32 0), i64 %9)
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8
  %11 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %die_offset3 = getelementptr inbounds %struct.die_struct, %struct.die_struct* %11, i32 0, i32 6
  %12 = load i64, i64* %die_offset3, align 8
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %10, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.216, i32 0, i32 0), i64 %12)
  %13 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %die_attr = getelementptr inbounds %struct.die_struct, %struct.die_struct* %13, i32 0, i32 2
  %14 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %die_attr, align 8
  store %struct.dw_attr_struct* %14, %struct.dw_attr_struct** %a, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %15 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %cmp = icmp ne %struct.dw_attr_struct* %15, null
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8
  call void @print_spaces(%struct._IO_FILE* %16)
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8
  %18 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %dw_attr = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %18, i32 0, i32 0
  %19 = load i32, i32* %dw_attr, align 4
  %call5 = call i8* @dwarf_attr_name(i32 %19)
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %17, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.217, i32 0, i32 0), i8* %call5)
  %20 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %call7 = call i32 @AT_class(%struct.dw_attr_struct* %20)
  switch i32 %call7, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb.9
    i32 2, label %sw.bb.11
    i32 3, label %sw.bb.13
    i32 4, label %sw.bb.16
    i32 5, label %sw.bb.18
    i32 6, label %sw.bb.21
    i32 7, label %sw.bb.24
    i32 8, label %sw.bb.29
    i32 9, label %sw.bb.31
    i32 10, label %sw.bb.34
    i32 12, label %sw.bb.48
    i32 13, label %sw.bb.48
    i32 14, label %sw.bb.51
  ]

sw.bb:                                            ; preds = %for.body
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8
  %call8 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %21, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.218, i32 0, i32 0))
  br label %sw.epilog

sw.bb.9:                                          ; preds = %for.body
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8
  %call10 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %22, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.219, i32 0, i32 0))
  br label %sw.epilog

sw.bb.11:                                         ; preds = %for.body
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8
  %call12 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %23, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.220, i32 0, i32 0))
  br label %sw.epilog

sw.bb.13:                                         ; preds = %for.body
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8
  %25 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %call14 = call %struct.dw_loc_list_struct* @AT_loc_list(%struct.dw_attr_struct* %25)
  %ll_symbol = getelementptr inbounds %struct.dw_loc_list_struct, %struct.dw_loc_list_struct* %call14, i32 0, i32 3
  %26 = load i8*, i8** %ll_symbol, align 8
  %call15 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %24, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.221, i32 0, i32 0), i8* %26)
  br label %sw.epilog

sw.bb.16:                                         ; preds = %for.body
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8
  %call17 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %27, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.222, i32 0, i32 0))
  br label %sw.epilog

sw.bb.18:                                         ; preds = %for.body
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8
  %29 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %call19 = call i64 @AT_int(%struct.dw_attr_struct* %29)
  %call20 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %28, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.223, i32 0, i32 0), i64 %call19)
  br label %sw.epilog

sw.bb.21:                                         ; preds = %for.body
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8
  %31 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %call22 = call i64 @AT_unsigned(%struct.dw_attr_struct* %31)
  %call23 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %30, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.224, i32 0, i32 0), i64 %call22)
  br label %sw.epilog

sw.bb.24:                                         ; preds = %for.body
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8
  %33 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %dw_attr_val = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %33, i32 0, i32 2
  %v = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_attr_val, i32 0, i32 1
  %val_long_long = bitcast %union.anon.3* %v to %struct.dw_long_long_struct*
  %hi = getelementptr inbounds %struct.dw_long_long_struct, %struct.dw_long_long_struct* %val_long_long, i32 0, i32 0
  %34 = load i64, i64* %hi, align 8
  %35 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %dw_attr_val25 = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %35, i32 0, i32 2
  %v26 = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_attr_val25, i32 0, i32 1
  %val_long_long27 = bitcast %union.anon.3* %v26 to %struct.dw_long_long_struct*
  %low = getelementptr inbounds %struct.dw_long_long_struct, %struct.dw_long_long_struct* %val_long_long27, i32 0, i32 1
  %36 = load i64, i64* %low, align 8
  %call28 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %32, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.225, i32 0, i32 0), i64 %34, i64 %36)
  br label %sw.epilog

sw.bb.29:                                         ; preds = %for.body
  %37 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8
  %call30 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %37, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.226, i32 0, i32 0))
  br label %sw.epilog

sw.bb.31:                                         ; preds = %for.body
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8
  %39 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %call32 = call i32 @AT_flag(%struct.dw_attr_struct* %39)
  %call33 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %38, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.227, i32 0, i32 0), i32 %call32)
  br label %sw.epilog

sw.bb.34:                                         ; preds = %for.body
  %40 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %call35 = call %struct.die_struct* @AT_ref(%struct.dw_attr_struct* %40)
  %cmp36 = icmp ne %struct.die_struct* %call35, null
  br i1 %cmp36, label %if.then, label %if.else.45

if.then:                                          ; preds = %sw.bb.34
  %41 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %call37 = call %struct.die_struct* @AT_ref(%struct.dw_attr_struct* %41)
  %die_symbol = getelementptr inbounds %struct.die_struct, %struct.die_struct* %call37, i32 0, i32 1
  %42 = load i8*, i8** %die_symbol, align 8
  %tobool = icmp ne i8* %42, null
  br i1 %tobool, label %if.then.38, label %if.else

if.then.38:                                       ; preds = %if.then
  %43 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8
  %44 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %call39 = call %struct.die_struct* @AT_ref(%struct.dw_attr_struct* %44)
  %die_symbol40 = getelementptr inbounds %struct.die_struct, %struct.die_struct* %call39, i32 0, i32 1
  %45 = load i8*, i8** %die_symbol40, align 8
  %call41 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %43, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.228, i32 0, i32 0), i8* %45)
  br label %if.end

if.else:                                          ; preds = %if.then
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8
  %47 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %call42 = call %struct.die_struct* @AT_ref(%struct.dw_attr_struct* %47)
  %die_offset43 = getelementptr inbounds %struct.die_struct, %struct.die_struct* %call42, i32 0, i32 6
  %48 = load i64, i64* %die_offset43, align 8
  %call44 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %46, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.229, i32 0, i32 0), i64 %48)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.38
  br label %if.end.47

if.else.45:                                       ; preds = %sw.bb.34
  %49 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8
  %call46 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %49, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.230, i32 0, i32 0))
  br label %if.end.47

if.end.47:                                        ; preds = %if.else.45, %if.end
  br label %sw.epilog

sw.bb.48:                                         ; preds = %for.body, %for.body
  %50 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8
  %51 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %call49 = call i8* @AT_lbl(%struct.dw_attr_struct* %51)
  %call50 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %50, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.231, i32 0, i32 0), i8* %call49)
  br label %sw.epilog

sw.bb.51:                                         ; preds = %for.body
  %52 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %call52 = call i8* @AT_string(%struct.dw_attr_struct* %52)
  %cmp53 = icmp ne i8* %call52, null
  br i1 %cmp53, label %if.then.54, label %if.else.57

if.then.54:                                       ; preds = %sw.bb.51
  %53 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8
  %54 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %call55 = call i8* @AT_string(%struct.dw_attr_struct* %54)
  %call56 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %53, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.232, i32 0, i32 0), i8* %call55)
  br label %if.end.59

if.else.57:                                       ; preds = %sw.bb.51
  %55 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8
  %call58 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %55, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.233, i32 0, i32 0))
  br label %if.end.59

if.end.59:                                        ; preds = %if.else.57, %if.then.54
  br label %sw.epilog

sw.default:                                       ; preds = %for.body
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %if.end.59, %sw.bb.48, %if.end.47, %sw.bb.31, %sw.bb.29, %sw.bb.24, %sw.bb.21, %sw.bb.18, %sw.bb.16, %sw.bb.13, %sw.bb.11, %sw.bb.9, %sw.bb
  %56 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8
  %call60 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %56, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.234, i32 0, i32 0))
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog
  %57 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %dw_attr_next = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %57, i32 0, i32 1
  %58 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %dw_attr_next, align 8
  store %struct.dw_attr_struct* %58, %struct.dw_attr_struct** %a, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %59 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %die_child = getelementptr inbounds %struct.die_struct, %struct.die_struct* %59, i32 0, i32 4
  %60 = load %struct.die_struct*, %struct.die_struct** %die_child, align 8
  %cmp61 = icmp ne %struct.die_struct* %60, null
  br i1 %cmp61, label %if.then.62, label %if.end.69

if.then.62:                                       ; preds = %for.end
  %61 = load i32, i32* @print_indent, align 4
  %add = add nsw i32 %61, 4
  store i32 %add, i32* @print_indent, align 4
  %62 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %die_child63 = getelementptr inbounds %struct.die_struct, %struct.die_struct* %62, i32 0, i32 4
  %63 = load %struct.die_struct*, %struct.die_struct** %die_child63, align 8
  store %struct.die_struct* %63, %struct.die_struct** %c, align 8
  br label %for.cond.64

for.cond.64:                                      ; preds = %for.inc.67, %if.then.62
  %64 = load %struct.die_struct*, %struct.die_struct** %c, align 8
  %cmp65 = icmp ne %struct.die_struct* %64, null
  br i1 %cmp65, label %for.body.66, label %for.end.68

for.body.66:                                      ; preds = %for.cond.64
  %65 = load %struct.die_struct*, %struct.die_struct** %c, align 8
  %66 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8
  call void @print_die(%struct.die_struct* %65, %struct._IO_FILE* %66)
  br label %for.inc.67

for.inc.67:                                       ; preds = %for.body.66
  %67 = load %struct.die_struct*, %struct.die_struct** %c, align 8
  %die_sib = getelementptr inbounds %struct.die_struct, %struct.die_struct* %67, i32 0, i32 5
  %68 = load %struct.die_struct*, %struct.die_struct** %die_sib, align 8
  store %struct.die_struct* %68, %struct.die_struct** %c, align 8
  br label %for.cond.64

for.end.68:                                       ; preds = %for.cond.64
  %69 = load i32, i32* @print_indent, align 4
  %sub = sub nsw i32 %69, 4
  store i32 %sub, i32* @print_indent, align 4
  br label %if.end.69

if.end.69:                                        ; preds = %for.end.68, %for.end
  %70 = load i32, i32* @print_indent, align 4
  %cmp70 = icmp eq i32 %70, 0
  br i1 %cmp70, label %if.then.71, label %if.end.73

if.then.71:                                       ; preds = %if.end.69
  %71 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8
  %call72 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %71, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.234, i32 0, i32 0))
  br label %if.end.73

if.end.73:                                        ; preds = %if.then.71, %if.end.69
  ret void
}

; Function Attrs: nounwind uwtable
define void @debug_dwarf() #0 {
entry:
  store i32 0, i32* @print_indent, align 4
  %0 = load %struct.die_struct*, %struct.die_struct** @comp_unit_die, align 8
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  call void @print_die(%struct.die_struct* %0, %struct._IO_FILE* %1)
  ret void
}

; Function Attrs: nounwind uwtable
define void @dwarf2out_add_library_unit_info(i8* %filename, i8* %context_list) #0 {
entry:
  %filename.addr = alloca i8*, align 8
  %context_list.addr = alloca i8*, align 8
  %file_index = alloca i32, align 4
  %unit_die = alloca %struct.die_struct*, align 8
  %context_list_decl = alloca %union.tree_node*, align 8
  store i8* %filename, i8** %filename.addr, align 8
  store i8* %context_list, i8** %context_list.addr, align 8
  %0 = load i8*, i8** %filename.addr, align 8
  %cmp = icmp ne i8* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.die_struct*, %struct.die_struct** @comp_unit_die, align 8
  %call = call %struct.die_struct* @new_die(i32 30, %struct.die_struct* %1, %union.tree_node* null)
  store %struct.die_struct* %call, %struct.die_struct** %unit_die, align 8
  %2 = load i8*, i8** %context_list.addr, align 8
  %call1 = call %union.tree_node* @get_identifier(i8* %2)
  %3 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 27), align 8
  %call2 = call %union.tree_node* @build_decl(i32 31, %union.tree_node* %call1, %union.tree_node* %3)
  store %union.tree_node* %call2, %union.tree_node** %context_list_decl, align 8
  %4 = load %union.tree_node*, %union.tree_node** %context_list_decl, align 8
  %common = bitcast %union.tree_node* %4 to %struct.tree_common*
  %public_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %public_flag, align 8
  %bf.clear = and i32 %bf.load, -524289
  %bf.set = or i32 %bf.clear, 524288
  store i32 %bf.set, i32* %public_flag, align 8
  %5 = load %struct.die_struct*, %struct.die_struct** %unit_die, align 8
  %6 = load i8*, i8** %context_list.addr, align 8
  call void @add_name_attribute(%struct.die_struct* %5, i8* %6)
  %7 = load i8*, i8** %filename.addr, align 8
  %call3 = call i32 @lookup_filename(i8* %7)
  store i32 %call3, i32* %file_index, align 4
  %8 = load %struct.die_struct*, %struct.die_struct** %unit_die, align 8
  %9 = load i32, i32* %file_index, align 4
  %conv = zext i32 %9 to i64
  call void @add_AT_unsigned(%struct.die_struct* %8, i32 58, i64 %conv)
  %10 = load %union.tree_node*, %union.tree_node** %context_list_decl, align 8
  %11 = load %struct.die_struct*, %struct.die_struct** %unit_die, align 8
  call void @add_pubname(%union.tree_node* %10, %struct.die_struct* %11)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal %struct.die_struct* @new_die(i32 %tag_value, %struct.die_struct* %parent_die, %union.tree_node* %t) #3 {
entry:
  %tag_value.addr = alloca i32, align 4
  %parent_die.addr = alloca %struct.die_struct*, align 8
  %t.addr = alloca %union.tree_node*, align 8
  %die = alloca %struct.die_struct*, align 8
  %limbo_node = alloca %struct.limbo_die_struct*, align 8
  store i32 %tag_value, i32* %tag_value.addr, align 4
  store %struct.die_struct* %parent_die, %struct.die_struct** %parent_die.addr, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  %call = call noalias i8* @xcalloc(i64 1, i64 72)
  %0 = bitcast i8* %call to %struct.die_struct*
  store %struct.die_struct* %0, %struct.die_struct** %die, align 8
  %1 = load i32, i32* %tag_value.addr, align 4
  %2 = load %struct.die_struct*, %struct.die_struct** %die, align 8
  %die_tag = getelementptr inbounds %struct.die_struct, %struct.die_struct* %2, i32 0, i32 0
  store i32 %1, i32* %die_tag, align 4
  %3 = load %struct.die_struct*, %struct.die_struct** %parent_die.addr, align 8
  %cmp = icmp ne %struct.die_struct* %3, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %4 = load %struct.die_struct*, %struct.die_struct** %parent_die.addr, align 8
  %5 = load %struct.die_struct*, %struct.die_struct** %die, align 8
  call void @add_child_die(%struct.die_struct* %4, %struct.die_struct* %5)
  br label %if.end

if.else:                                          ; preds = %entry
  %call1 = call noalias i8* @xmalloc(i64 24)
  %6 = bitcast i8* %call1 to %struct.limbo_die_struct*
  store %struct.limbo_die_struct* %6, %struct.limbo_die_struct** %limbo_node, align 8
  %7 = load %struct.die_struct*, %struct.die_struct** %die, align 8
  %8 = load %struct.limbo_die_struct*, %struct.limbo_die_struct** %limbo_node, align 8
  %die2 = getelementptr inbounds %struct.limbo_die_struct, %struct.limbo_die_struct* %8, i32 0, i32 0
  store %struct.die_struct* %7, %struct.die_struct** %die2, align 8
  %9 = load %union.tree_node*, %union.tree_node** %t.addr, align 8
  %10 = load %struct.limbo_die_struct*, %struct.limbo_die_struct** %limbo_node, align 8
  %created_for = getelementptr inbounds %struct.limbo_die_struct, %struct.limbo_die_struct* %10, i32 0, i32 1
  store %union.tree_node* %9, %union.tree_node** %created_for, align 8
  %11 = load %struct.limbo_die_struct*, %struct.limbo_die_struct** @limbo_die_list, align 8
  %12 = load %struct.limbo_die_struct*, %struct.limbo_die_struct** %limbo_node, align 8
  %next = getelementptr inbounds %struct.limbo_die_struct, %struct.limbo_die_struct* %12, i32 0, i32 2
  store %struct.limbo_die_struct* %11, %struct.limbo_die_struct** %next, align 8
  %13 = load %struct.limbo_die_struct*, %struct.limbo_die_struct** %limbo_node, align 8
  store %struct.limbo_die_struct* %13, %struct.limbo_die_struct** @limbo_die_list, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %14 = load %struct.die_struct*, %struct.die_struct** %die, align 8
  ret %struct.die_struct* %14
}

declare %union.tree_node* @build_decl(i32, %union.tree_node*, %union.tree_node*) #1

; Function Attrs: inlinehint nounwind uwtable
define internal void @add_name_attribute(%struct.die_struct* %die, i8* %name_string) #3 {
entry:
  %die.addr = alloca %struct.die_struct*, align 8
  %name_string.addr = alloca i8*, align 8
  store %struct.die_struct* %die, %struct.die_struct** %die.addr, align 8
  store i8* %name_string, i8** %name_string.addr, align 8
  %0 = load i8*, i8** %name_string.addr, align 8
  %cmp = icmp ne i8* %0, null
  br i1 %cmp, label %land.lhs.true, label %if.end.4

land.lhs.true:                                    ; preds = %entry
  %1 = load i8*, i8** %name_string.addr, align 8
  %2 = load i8, i8* %1, align 1
  %conv = sext i8 %2 to i32
  %cmp1 = icmp ne i32 %conv, 0
  br i1 %cmp1, label %if.then, label %if.end.4

if.then:                                          ; preds = %land.lhs.true
  %3 = load i8* (i8*)*, i8* (i8*)** @demangle_name_func, align 8
  %tobool = icmp ne i8* (i8*)* %3, null
  br i1 %tobool, label %if.then.3, label %if.end

if.then.3:                                        ; preds = %if.then
  %4 = load i8* (i8*)*, i8* (i8*)** @demangle_name_func, align 8
  %5 = load i8*, i8** %name_string.addr, align 8
  %call = call i8* %4(i8* %5)
  store i8* %call, i8** %name_string.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.3, %if.then
  %6 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %7 = load i8*, i8** %name_string.addr, align 8
  call void @add_AT_string(%struct.die_struct* %6, i32 3, i8* %7)
  br label %if.end.4

if.end.4:                                         ; preds = %if.end, %land.lhs.true, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @lookup_filename(i8* %file_name) #0 {
entry:
  %retval = alloca i32, align 4
  %file_name.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  store i8* %file_name, i8** %file_name.addr, align 8
  %0 = load i8*, i8** %file_name.addr, align 8
  %call = call i32 @strcmp(i8* %0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.392, i32 0, i32 0)) #7
  %cmp = icmp eq i32 %call, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8*, i8** %file_name.addr, align 8
  %call1 = call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.393, i32 0, i32 0)) #7
  %cmp2 = icmp eq i32 %call1, 0
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %2 = load i32, i32* getelementptr inbounds (%struct.file_table, %struct.file_table* @file_table, i32 0, i32 3), align 4
  %cmp3 = icmp ne i32 %2, 0
  br i1 %cmp3, label %if.then.4, label %if.end.9

if.then.4:                                        ; preds = %if.end
  %3 = load i8*, i8** %file_name.addr, align 8
  %4 = load i32, i32* getelementptr inbounds (%struct.file_table, %struct.file_table* @file_table, i32 0, i32 3), align 4
  %idxprom = zext i32 %4 to i64
  %5 = load i8**, i8*** getelementptr inbounds (%struct.file_table, %struct.file_table* @file_table, i32 0, i32 0), align 8
  %arrayidx = getelementptr inbounds i8*, i8** %5, i64 %idxprom
  %6 = load i8*, i8** %arrayidx, align 8
  %call5 = call i32 @strcmp(i8* %3, i8* %6) #7
  %cmp6 = icmp eq i32 0, %call5
  br i1 %cmp6, label %if.then.7, label %if.end.8

if.then.7:                                        ; preds = %if.then.4
  %7 = load i32, i32* getelementptr inbounds (%struct.file_table, %struct.file_table* @file_table, i32 0, i32 3), align 4
  store i32 %7, i32* %retval
  br label %return

if.end.8:                                         ; preds = %if.then.4
  br label %if.end.9

if.end.9:                                         ; preds = %if.end.8, %if.end
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.9
  %8 = load i32, i32* %i, align 4
  %9 = load i32, i32* getelementptr inbounds (%struct.file_table, %struct.file_table* @file_table, i32 0, i32 2), align 4
  %cmp10 = icmp ult i32 %8, %9
  br i1 %cmp10, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %10 = load i8*, i8** %file_name.addr, align 8
  %11 = load i32, i32* %i, align 4
  %idxprom11 = zext i32 %11 to i64
  %12 = load i8**, i8*** getelementptr inbounds (%struct.file_table, %struct.file_table* @file_table, i32 0, i32 0), align 8
  %arrayidx12 = getelementptr inbounds i8*, i8** %12, i64 %idxprom11
  %13 = load i8*, i8** %arrayidx12, align 8
  %call13 = call i32 @strcmp(i8* %10, i8* %13) #7
  %cmp14 = icmp eq i32 %call13, 0
  br i1 %cmp14, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %for.body
  %14 = load i32, i32* %i, align 4
  store i32 %14, i32* getelementptr inbounds (%struct.file_table, %struct.file_table* @file_table, i32 0, i32 3), align 4
  %15 = load i32, i32* %i, align 4
  store i32 %15, i32* %retval
  br label %return

if.end.16:                                        ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.16
  %16 = load i32, i32* %i, align 4
  %inc = add i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %17 = load i32, i32* %i, align 4
  %18 = load i32, i32* getelementptr inbounds (%struct.file_table, %struct.file_table* @file_table, i32 0, i32 1), align 4
  %cmp17 = icmp eq i32 %17, %18
  br i1 %cmp17, label %if.then.18, label %if.end.20

if.then.18:                                       ; preds = %for.end
  %19 = load i32, i32* %i, align 4
  %add = add i32 %19, 64
  store i32 %add, i32* getelementptr inbounds (%struct.file_table, %struct.file_table* @file_table, i32 0, i32 1), align 4
  %20 = load i8**, i8*** getelementptr inbounds (%struct.file_table, %struct.file_table* @file_table, i32 0, i32 0), align 8
  %21 = bitcast i8** %20 to i8*
  %22 = load i32, i32* getelementptr inbounds (%struct.file_table, %struct.file_table* @file_table, i32 0, i32 1), align 4
  %conv = zext i32 %22 to i64
  %mul = mul i64 %conv, 8
  %call19 = call i8* @xrealloc(i8* %21, i64 %mul)
  %23 = bitcast i8* %call19 to i8**
  store i8** %23, i8*** getelementptr inbounds (%struct.file_table, %struct.file_table* @file_table, i32 0, i32 0), align 8
  br label %if.end.20

if.end.20:                                        ; preds = %if.then.18, %for.end
  %24 = load i8*, i8** %file_name.addr, align 8
  %call21 = call noalias i8* @xstrdup(i8* %24)
  %25 = load i32, i32* %i, align 4
  %idxprom22 = zext i32 %25 to i64
  %26 = load i8**, i8*** getelementptr inbounds (%struct.file_table, %struct.file_table* @file_table, i32 0, i32 0), align 8
  %arrayidx23 = getelementptr inbounds i8*, i8** %26, i64 %idxprom22
  store i8* %call21, i8** %arrayidx23, align 8
  %27 = load i32, i32* %i, align 4
  %add24 = add i32 %27, 1
  store i32 %add24, i32* getelementptr inbounds (%struct.file_table, %struct.file_table* @file_table, i32 0, i32 2), align 4
  %28 = load i32, i32* %i, align 4
  store i32 %28, i32* getelementptr inbounds (%struct.file_table, %struct.file_table* @file_table, i32 0, i32 3), align 4
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8
  %30 = load i32, i32* %i, align 4
  %31 = load i8*, i8** %file_name.addr, align 8
  %call25 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %29, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.394, i32 0, i32 0), i32 %30, i8* %31)
  %32 = load i32, i32* %i, align 4
  store i32 %32, i32* %retval
  br label %return

return:                                           ; preds = %if.end.20, %if.then.15, %if.then.7, %if.then
  %33 = load i32, i32* %retval
  ret i32 %33
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @add_AT_unsigned(%struct.die_struct* %die, i32 %attr_kind, i64 %unsigned_val) #3 {
entry:
  %die.addr = alloca %struct.die_struct*, align 8
  %attr_kind.addr = alloca i32, align 4
  %unsigned_val.addr = alloca i64, align 8
  %attr = alloca %struct.dw_attr_struct*, align 8
  store %struct.die_struct* %die, %struct.die_struct** %die.addr, align 8
  store i32 %attr_kind, i32* %attr_kind.addr, align 4
  store i64 %unsigned_val, i64* %unsigned_val.addr, align 8
  %call = call noalias i8* @xmalloc(i64 40)
  %0 = bitcast i8* %call to %struct.dw_attr_struct*
  store %struct.dw_attr_struct* %0, %struct.dw_attr_struct** %attr, align 8
  %1 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %attr, align 8
  %dw_attr_next = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %1, i32 0, i32 1
  store %struct.dw_attr_struct* null, %struct.dw_attr_struct** %dw_attr_next, align 8
  %2 = load i32, i32* %attr_kind.addr, align 4
  %3 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %attr, align 8
  %dw_attr = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %3, i32 0, i32 0
  store i32 %2, i32* %dw_attr, align 4
  %4 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %attr, align 8
  %dw_attr_val = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %4, i32 0, i32 2
  %val_class = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_attr_val, i32 0, i32 0
  store i32 6, i32* %val_class, align 4
  %5 = load i64, i64* %unsigned_val.addr, align 8
  %6 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %attr, align 8
  %dw_attr_val1 = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %6, i32 0, i32 2
  %v = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_attr_val1, i32 0, i32 1
  %val_unsigned = bitcast %union.anon.3* %v to i64*
  store i64 %5, i64* %val_unsigned, align 8
  %7 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %8 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %attr, align 8
  call void @add_dwarf_attr(%struct.die_struct* %7, %struct.dw_attr_struct* %8)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @add_pubname(%union.tree_node* %decl, %struct.die_struct* %die) #0 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %die.addr = alloca %struct.die_struct*, align 8
  %p = alloca %struct.pubname_struct*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  store %struct.die_struct* %die, %struct.die_struct** %die.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*
  %public_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %public_flag, align 8
  %bf.lshr = lshr i32 %bf.load, 19
  %bf.clear = and i32 %bf.lshr, 1
  %tobool = icmp ne i32 %bf.clear, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i32, i32* @pubname_table_in_use, align 4
  %2 = load i32, i32* @pubname_table_allocated, align 4
  %cmp = icmp eq i32 %1, %2
  br i1 %cmp, label %if.then.1, label %if.end.2

if.then.1:                                        ; preds = %if.end
  %3 = load i32, i32* @pubname_table_allocated, align 4
  %add = add i32 %3, 64
  store i32 %add, i32* @pubname_table_allocated, align 4
  %4 = load %struct.pubname_struct*, %struct.pubname_struct** @pubname_table, align 8
  %5 = bitcast %struct.pubname_struct* %4 to i8*
  %6 = load i32, i32* @pubname_table_allocated, align 4
  %conv = zext i32 %6 to i64
  %mul = mul i64 %conv, 16
  %call = call i8* @xrealloc(i8* %5, i64 %mul)
  %7 = bitcast i8* %call to %struct.pubname_struct*
  store %struct.pubname_struct* %7, %struct.pubname_struct** @pubname_table, align 8
  br label %if.end.2

if.end.2:                                         ; preds = %if.then.1, %if.end
  %8 = load i32, i32* @pubname_table_in_use, align 4
  %inc = add i32 %8, 1
  store i32 %inc, i32* @pubname_table_in_use, align 4
  %idxprom = zext i32 %8 to i64
  %9 = load %struct.pubname_struct*, %struct.pubname_struct** @pubname_table, align 8
  %arrayidx = getelementptr inbounds %struct.pubname_struct, %struct.pubname_struct* %9, i64 %idxprom
  store %struct.pubname_struct* %arrayidx, %struct.pubname_struct** %p, align 8
  %10 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %11 = load %struct.pubname_struct*, %struct.pubname_struct** %p, align 8
  %die3 = getelementptr inbounds %struct.pubname_struct, %struct.pubname_struct* %11, i32 0, i32 0
  store %struct.die_struct* %10, %struct.die_struct** %die3, align 8
  %12 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %call4 = call i8* @dwarf2_name(%union.tree_node* %12, i32 1)
  %call5 = call noalias i8* @xstrdup(i8* %call4)
  %13 = load %struct.pubname_struct*, %struct.pubname_struct** %p, align 8
  %name = getelementptr inbounds %struct.pubname_struct, %struct.pubname_struct* %13, i32 0, i32 1
  store i8* %call5, i8** %name, align 8
  br label %return

return:                                           ; preds = %if.end.2, %if.then
  ret void
}

declare %union.tree_node* @decl_function_context(%union.tree_node*) #1

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @get_AT_unsigned(%struct.die_struct* %die, i32 %attr_kind) #3 {
entry:
  %die.addr = alloca %struct.die_struct*, align 8
  %attr_kind.addr = alloca i32, align 4
  %a = alloca %struct.dw_attr_struct*, align 8
  store %struct.die_struct* %die, %struct.die_struct** %die.addr, align 8
  store i32 %attr_kind, i32* %attr_kind.addr, align 4
  %0 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %1 = load i32, i32* %attr_kind.addr, align 4
  %call = call %struct.dw_attr_struct* @get_AT(%struct.die_struct* %0, i32 %1)
  store %struct.dw_attr_struct* %call, %struct.dw_attr_struct** %a, align 8
  %2 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %tobool = icmp ne %struct.dw_attr_struct* %2, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %call1 = call i64 @AT_unsigned(%struct.dw_attr_struct* %3)
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call1, %cond.true ], [ 0, %cond.false ]
  %conv = trunc i64 %cond to i32
  ret i32 %conv
}

; Function Attrs: nounwind uwtable
define internal %struct.die_struct* @modified_type_die(%union.tree_node* %type, i32 %is_const_type, i32 %is_volatile_type, %struct.die_struct* %context_die) #0 {
entry:
  %retval = alloca %struct.die_struct*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %is_const_type.addr = alloca i32, align 4
  %is_volatile_type.addr = alloca i32, align 4
  %context_die.addr = alloca %struct.die_struct*, align 8
  %code = alloca i32, align 4
  %mod_type_die = alloca %struct.die_struct*, align 8
  %sub_die = alloca %struct.die_struct*, align 8
  %item_type = alloca %union.tree_node*, align 8
  %qualified_type = alloca %union.tree_node*, align 8
  %type_name = alloca %union.tree_node*, align 8
  %dtype = alloca %union.tree_node*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  store i32 %is_const_type, i32* %is_const_type.addr, align 4
  store i32 %is_volatile_type, i32* %is_volatile_type.addr, align 4
  store %struct.die_struct* %context_die, %struct.die_struct** %context_die.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*
  %code1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code1, align 8
  %bf.clear = and i32 %bf.load, 255
  store i32 %bf.clear, i32* %code, align 4
  store %struct.die_struct* null, %struct.die_struct** %mod_type_die, align 8
  store %struct.die_struct* null, %struct.die_struct** %sub_die, align 8
  store %union.tree_node* null, %union.tree_node** %item_type, align 8
  %1 = load i32, i32* %code, align 4
  %cmp = icmp ne i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end.99

if.then:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %3 = load i32, i32* %is_const_type.addr, align 4
  %tobool = icmp ne i32 %3, 0
  %cond = select i1 %tobool, i32 1, i32 0
  %4 = load i32, i32* %is_volatile_type.addr, align 4
  %tobool2 = icmp ne i32 %4, 0
  %cond3 = select i1 %tobool2, i32 2, i32 0
  %or = or i32 %cond, %cond3
  %call = call %union.tree_node* @get_qualified_type(%union.tree_node* %2, i32 %or)
  store %union.tree_node* %call, %union.tree_node** %qualified_type, align 8
  %5 = load %union.tree_node*, %union.tree_node** %qualified_type, align 8
  %tobool4 = icmp ne %union.tree_node* %5, null
  br i1 %tobool4, label %if.then.5, label %if.end.9

if.then.5:                                        ; preds = %if.then
  %6 = load %union.tree_node*, %union.tree_node** %qualified_type, align 8
  %call6 = call %struct.die_struct* @lookup_type_die(%union.tree_node* %6)
  store %struct.die_struct* %call6, %struct.die_struct** %mod_type_die, align 8
  %7 = load %struct.die_struct*, %struct.die_struct** %mod_type_die, align 8
  %tobool7 = icmp ne %struct.die_struct* %7, null
  br i1 %tobool7, label %if.then.8, label %if.end

if.then.8:                                        ; preds = %if.then.5
  %8 = load %struct.die_struct*, %struct.die_struct** %mod_type_die, align 8
  store %struct.die_struct* %8, %struct.die_struct** %retval
  br label %return

if.end:                                           ; preds = %if.then.5
  br label %if.end.9

if.end.9:                                         ; preds = %if.end, %if.then
  %9 = load %union.tree_node*, %union.tree_node** %qualified_type, align 8
  %tobool10 = icmp ne %union.tree_node* %9, null
  br i1 %tobool10, label %land.lhs.true, label %if.end.48

land.lhs.true:                                    ; preds = %if.end.9
  %10 = load %union.tree_node*, %union.tree_node** %qualified_type, align 8
  %type11 = bitcast %union.tree_node* %10 to %struct.tree_type*
  %name = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type11, i32 0, i32 11
  %11 = load %union.tree_node*, %union.tree_node** %name, align 8
  %tobool12 = icmp ne %union.tree_node* %11, null
  br i1 %tobool12, label %land.lhs.true.13, label %if.end.48

land.lhs.true.13:                                 ; preds = %land.lhs.true
  %12 = load %union.tree_node*, %union.tree_node** %qualified_type, align 8
  %type14 = bitcast %union.tree_node* %12 to %struct.tree_type*
  %name15 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type14, i32 0, i32 11
  %13 = load %union.tree_node*, %union.tree_node** %name15, align 8
  %common16 = bitcast %union.tree_node* %13 to %struct.tree_common*
  %code17 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common16, i32 0, i32 2
  %bf.load18 = load i32, i32* %code17, align 8
  %bf.clear19 = and i32 %bf.load18, 255
  %cmp20 = icmp eq i32 %bf.clear19, 33
  br i1 %cmp20, label %land.lhs.true.21, label %if.end.48

land.lhs.true.21:                                 ; preds = %land.lhs.true.13
  %14 = load %union.tree_node*, %union.tree_node** %qualified_type, align 8
  %type22 = bitcast %union.tree_node* %14 to %struct.tree_type*
  %name23 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type22, i32 0, i32 11
  %15 = load %union.tree_node*, %union.tree_node** %name23, align 8
  %decl = bitcast %union.tree_node* %15 to %struct.tree_decl*
  %result = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl, i32 0, i32 11
  %16 = load %union.tree_node*, %union.tree_node** %result, align 8
  %tobool24 = icmp ne %union.tree_node* %16, null
  br i1 %tobool24, label %if.then.25, label %if.end.48

if.then.25:                                       ; preds = %land.lhs.true.21
  %17 = load %union.tree_node*, %union.tree_node** %qualified_type, align 8
  %type26 = bitcast %union.tree_node* %17 to %struct.tree_type*
  %name27 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type26, i32 0, i32 11
  %18 = load %union.tree_node*, %union.tree_node** %name27, align 8
  store %union.tree_node* %18, %union.tree_node** %type_name, align 8
  %19 = load %union.tree_node*, %union.tree_node** %type_name, align 8
  %common28 = bitcast %union.tree_node* %19 to %struct.tree_common*
  %type29 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common28, i32 0, i32 1
  %20 = load %union.tree_node*, %union.tree_node** %type29, align 8
  store %union.tree_node* %20, %union.tree_node** %dtype, align 8
  %21 = load %union.tree_node*, %union.tree_node** %qualified_type, align 8
  %22 = load %union.tree_node*, %union.tree_node** %dtype, align 8
  %cmp30 = icmp eq %union.tree_node* %21, %22
  br i1 %cmp30, label %if.then.31, label %if.else

if.then.31:                                       ; preds = %if.then.25
  %23 = load %union.tree_node*, %union.tree_node** %qualified_type, align 8
  %24 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  call void @gen_type_die(%union.tree_node* %23, %struct.die_struct* %24)
  %25 = load %union.tree_node*, %union.tree_node** %qualified_type, align 8
  %call32 = call %struct.die_struct* @lookup_type_die(%union.tree_node* %25)
  store %struct.die_struct* %call32, %struct.die_struct** %mod_type_die, align 8
  br label %if.end.47

if.else:                                          ; preds = %if.then.25
  %26 = load i32, i32* %is_const_type.addr, align 4
  %27 = load %union.tree_node*, %union.tree_node** %dtype, align 8
  %common33 = bitcast %union.tree_node* %27 to %struct.tree_common*
  %readonly_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common33, i32 0, i32 2
  %bf.load34 = load i32, i32* %readonly_flag, align 8
  %bf.lshr = lshr i32 %bf.load34, 12
  %bf.clear35 = and i32 %bf.lshr, 1
  %cmp36 = icmp slt i32 %26, %bf.clear35
  br i1 %cmp36, label %if.then.42, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %28 = load i32, i32* %is_volatile_type.addr, align 4
  %29 = load %union.tree_node*, %union.tree_node** %dtype, align 8
  %common37 = bitcast %union.tree_node* %29 to %struct.tree_common*
  %volatile_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common37, i32 0, i32 2
  %bf.load38 = load i32, i32* %volatile_flag, align 8
  %bf.lshr39 = lshr i32 %bf.load38, 11
  %bf.clear40 = and i32 %bf.lshr39, 1
  %cmp41 = icmp slt i32 %28, %bf.clear40
  br i1 %cmp41, label %if.then.42, label %if.end.46

if.then.42:                                       ; preds = %lor.lhs.false, %if.else
  %30 = load %union.tree_node*, %union.tree_node** %type_name, align 8
  %decl43 = bitcast %union.tree_node* %30 to %struct.tree_decl*
  %result44 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl43, i32 0, i32 11
  %31 = load %union.tree_node*, %union.tree_node** %result44, align 8
  %32 = load i32, i32* %is_const_type.addr, align 4
  %33 = load i32, i32* %is_volatile_type.addr, align 4
  %34 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  %call45 = call %struct.die_struct* @modified_type_die(%union.tree_node* %31, i32 %32, i32 %33, %struct.die_struct* %34)
  store %struct.die_struct* %call45, %struct.die_struct** %mod_type_die, align 8
  br label %if.end.46

if.end.46:                                        ; preds = %if.then.42, %lor.lhs.false
  br label %if.end.47

if.end.47:                                        ; preds = %if.end.46, %if.then.31
  br label %if.end.48

if.end.48:                                        ; preds = %if.end.47, %land.lhs.true.21, %land.lhs.true.13, %land.lhs.true, %if.end.9
  %35 = load %struct.die_struct*, %struct.die_struct** %mod_type_die, align 8
  %tobool49 = icmp ne %struct.die_struct* %35, null
  br i1 %tobool49, label %if.then.50, label %if.else.51

if.then.50:                                       ; preds = %if.end.48
  br label %if.end.98

if.else.51:                                       ; preds = %if.end.48
  %36 = load i32, i32* %is_const_type.addr, align 4
  %tobool52 = icmp ne i32 %36, 0
  br i1 %tobool52, label %if.then.53, label %if.else.56

if.then.53:                                       ; preds = %if.else.51
  %37 = load %struct.die_struct*, %struct.die_struct** @comp_unit_die, align 8
  %38 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %call54 = call %struct.die_struct* @new_die(i32 38, %struct.die_struct* %37, %union.tree_node* %38)
  store %struct.die_struct* %call54, %struct.die_struct** %mod_type_die, align 8
  %39 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %40 = load i32, i32* %is_volatile_type.addr, align 4
  %41 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  %call55 = call %struct.die_struct* @modified_type_die(%union.tree_node* %39, i32 0, i32 %40, %struct.die_struct* %41)
  store %struct.die_struct* %call55, %struct.die_struct** %sub_die, align 8
  br label %if.end.97

if.else.56:                                       ; preds = %if.else.51
  %42 = load i32, i32* %is_volatile_type.addr, align 4
  %tobool57 = icmp ne i32 %42, 0
  br i1 %tobool57, label %if.then.58, label %if.else.61

if.then.58:                                       ; preds = %if.else.56
  %43 = load %struct.die_struct*, %struct.die_struct** @comp_unit_die, align 8
  %44 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %call59 = call %struct.die_struct* @new_die(i32 53, %struct.die_struct* %43, %union.tree_node* %44)
  store %struct.die_struct* %call59, %struct.die_struct** %mod_type_die, align 8
  %45 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %46 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  %call60 = call %struct.die_struct* @modified_type_die(%union.tree_node* %45, i32 0, i32 0, %struct.die_struct* %46)
  store %struct.die_struct* %call60, %struct.die_struct** %sub_die, align 8
  br label %if.end.96

if.else.61:                                       ; preds = %if.else.56
  %47 = load i32, i32* %code, align 4
  %cmp62 = icmp eq i32 %47, 13
  br i1 %cmp62, label %if.then.63, label %if.else.69

if.then.63:                                       ; preds = %if.else.61
  %48 = load %struct.die_struct*, %struct.die_struct** @comp_unit_die, align 8
  %49 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %call64 = call %struct.die_struct* @new_die(i32 15, %struct.die_struct* %48, %union.tree_node* %49)
  store %struct.die_struct* %call64, %struct.die_struct** %mod_type_die, align 8
  %50 = load %struct.die_struct*, %struct.die_struct** %mod_type_die, align 8
  %51 = load i32, i32* @target_flags, align 4
  %and = and i32 %51, 33554432
  %tobool65 = icmp ne i32 %and, 0
  %cond66 = select i1 %tobool65, i32 64, i32 32
  %div = sdiv i32 %cond66, 8
  %conv = sext i32 %div to i64
  call void @add_AT_unsigned(%struct.die_struct* %50, i32 11, i64 %conv)
  %52 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common67 = bitcast %union.tree_node* %52 to %struct.tree_common*
  %type68 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common67, i32 0, i32 1
  %53 = load %union.tree_node*, %union.tree_node** %type68, align 8
  store %union.tree_node* %53, %union.tree_node** %item_type, align 8
  br label %if.end.95

if.else.69:                                       ; preds = %if.else.61
  %54 = load i32, i32* %code, align 4
  %cmp70 = icmp eq i32 %54, 15
  br i1 %cmp70, label %if.then.72, label %if.else.81

if.then.72:                                       ; preds = %if.else.69
  %55 = load %struct.die_struct*, %struct.die_struct** @comp_unit_die, align 8
  %56 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %call73 = call %struct.die_struct* @new_die(i32 16, %struct.die_struct* %55, %union.tree_node* %56)
  store %struct.die_struct* %call73, %struct.die_struct** %mod_type_die, align 8
  %57 = load %struct.die_struct*, %struct.die_struct** %mod_type_die, align 8
  %58 = load i32, i32* @target_flags, align 4
  %and74 = and i32 %58, 33554432
  %tobool75 = icmp ne i32 %and74, 0
  %cond76 = select i1 %tobool75, i32 64, i32 32
  %div77 = sdiv i32 %cond76, 8
  %conv78 = sext i32 %div77 to i64
  call void @add_AT_unsigned(%struct.die_struct* %57, i32 11, i64 %conv78)
  %59 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common79 = bitcast %union.tree_node* %59 to %struct.tree_common*
  %type80 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common79, i32 0, i32 1
  %60 = load %union.tree_node*, %union.tree_node** %type80, align 8
  store %union.tree_node* %60, %union.tree_node** %item_type, align 8
  br label %if.end.94

if.else.81:                                       ; preds = %if.else.69
  %61 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %call82 = call i32 @is_base_type(%union.tree_node* %61)
  %tobool83 = icmp ne i32 %call82, 0
  br i1 %tobool83, label %if.then.84, label %if.else.86

if.then.84:                                       ; preds = %if.else.81
  %62 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %call85 = call %struct.die_struct* @base_type_die(%union.tree_node* %62)
  store %struct.die_struct* %call85, %struct.die_struct** %mod_type_die, align 8
  br label %if.end.93

if.else.86:                                       ; preds = %if.else.81
  %63 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %64 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  call void @gen_type_die(%union.tree_node* %63, %struct.die_struct* %64)
  %65 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %call87 = call %union.tree_node* @type_main_variant(%union.tree_node* %65)
  %call88 = call %struct.die_struct* @lookup_type_die(%union.tree_node* %call87)
  store %struct.die_struct* %call88, %struct.die_struct** %mod_type_die, align 8
  %66 = load %struct.die_struct*, %struct.die_struct** %mod_type_die, align 8
  %cmp89 = icmp eq %struct.die_struct* %66, null
  br i1 %cmp89, label %if.then.91, label %if.end.92

if.then.91:                                       ; preds = %if.else.86
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 7573, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__FUNCTION__.modified_type_die, i32 0, i32 0)) #8
  unreachable

if.end.92:                                        ; preds = %if.else.86
  br label %if.end.93

if.end.93:                                        ; preds = %if.end.92, %if.then.84
  br label %if.end.94

if.end.94:                                        ; preds = %if.end.93, %if.then.72
  br label %if.end.95

if.end.95:                                        ; preds = %if.end.94, %if.then.63
  br label %if.end.96

if.end.96:                                        ; preds = %if.end.95, %if.then.58
  br label %if.end.97

if.end.97:                                        ; preds = %if.end.96, %if.then.53
  br label %if.end.98

if.end.98:                                        ; preds = %if.end.97, %if.then.50
  %67 = load %union.tree_node*, %union.tree_node** %qualified_type, align 8
  store %union.tree_node* %67, %union.tree_node** %type.addr, align 8
  br label %if.end.99

if.end.99:                                        ; preds = %if.end.98, %entry
  %68 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %tobool100 = icmp ne %union.tree_node* %68, null
  br i1 %tobool100, label %if.then.101, label %if.end.102

if.then.101:                                      ; preds = %if.end.99
  %69 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %70 = load %struct.die_struct*, %struct.die_struct** %mod_type_die, align 8
  call void @equate_type_number_to_die(%union.tree_node* %69, %struct.die_struct* %70)
  br label %if.end.102

if.end.102:                                       ; preds = %if.then.101, %if.end.99
  %71 = load %union.tree_node*, %union.tree_node** %item_type, align 8
  %tobool103 = icmp ne %union.tree_node* %71, null
  br i1 %tobool103, label %if.then.104, label %if.end.116

if.then.104:                                      ; preds = %if.end.102
  %72 = load %union.tree_node*, %union.tree_node** %item_type, align 8
  %73 = load %union.tree_node*, %union.tree_node** %item_type, align 8
  %common105 = bitcast %union.tree_node* %73 to %struct.tree_common*
  %readonly_flag106 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common105, i32 0, i32 2
  %bf.load107 = load i32, i32* %readonly_flag106, align 8
  %bf.lshr108 = lshr i32 %bf.load107, 12
  %bf.clear109 = and i32 %bf.lshr108, 1
  %74 = load %union.tree_node*, %union.tree_node** %item_type, align 8
  %common110 = bitcast %union.tree_node* %74 to %struct.tree_common*
  %volatile_flag111 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common110, i32 0, i32 2
  %bf.load112 = load i32, i32* %volatile_flag111, align 8
  %bf.lshr113 = lshr i32 %bf.load112, 11
  %bf.clear114 = and i32 %bf.lshr113, 1
  %75 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  %call115 = call %struct.die_struct* @modified_type_die(%union.tree_node* %72, i32 %bf.clear109, i32 %bf.clear114, %struct.die_struct* %75)
  store %struct.die_struct* %call115, %struct.die_struct** %sub_die, align 8
  br label %if.end.116

if.end.116:                                       ; preds = %if.then.104, %if.end.102
  %76 = load %struct.die_struct*, %struct.die_struct** %sub_die, align 8
  %cmp117 = icmp ne %struct.die_struct* %76, null
  br i1 %cmp117, label %if.then.119, label %if.end.120

if.then.119:                                      ; preds = %if.end.116
  %77 = load %struct.die_struct*, %struct.die_struct** %mod_type_die, align 8
  %78 = load %struct.die_struct*, %struct.die_struct** %sub_die, align 8
  call void @add_AT_die_ref(%struct.die_struct* %77, i32 73, %struct.die_struct* %78)
  br label %if.end.120

if.end.120:                                       ; preds = %if.then.119, %if.end.116
  %79 = load %struct.die_struct*, %struct.die_struct** %mod_type_die, align 8
  store %struct.die_struct* %79, %struct.die_struct** %retval
  br label %return

return:                                           ; preds = %if.end.120, %if.then.8
  %80 = load %struct.die_struct*, %struct.die_struct** %retval
  ret %struct.die_struct* %80
}

; Function Attrs: nounwind uwtable
define internal void @gen_decl_die(%union.tree_node* %decl, %struct.die_struct* %context_die) #0 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %context_die.addr = alloca %struct.die_struct*, align 8
  %origin = alloca %union.tree_node*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  store %struct.die_struct* %context_die, %struct.die_struct** %context_die.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %idxprom = sext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* @tree_code_type, i32 0, i64 %idxprom
  %1 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %1 to i32
  %cmp = icmp eq i32 %conv, 100
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl2 = bitcast %union.tree_node* %2 to %struct.tree_decl*
  %ignored_flag = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl2, i32 0, i32 5
  %3 = bitcast i48* %ignored_flag to i64*
  %bf.load3 = load i64, i64* %3, align 8
  %bf.lshr = lshr i64 %bf.load3, 14
  %bf.clear4 = and i64 %bf.lshr, 1
  %bf.cast = trunc i64 %bf.clear4 to i32
  %tobool = icmp ne i32 %bf.cast, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  br label %sw.epilog

if.end:                                           ; preds = %land.lhs.true, %entry
  %4 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common5 = bitcast %union.tree_node* %4 to %struct.tree_common*
  %code6 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5, i32 0, i32 2
  %bf.load7 = load i32, i32* %code6, align 8
  %bf.clear8 = and i32 %bf.load7, 255
  switch i32 %bf.clear8, label %sw.default [
    i32 0, label %sw.bb
    i32 32, label %sw.bb.9
    i32 30, label %sw.bb.10
    i32 33, label %sw.bb.81
    i32 31, label %sw.bb.136
    i32 34, label %sw.bb.141
    i32 37, label %sw.bb.167
    i32 35, label %sw.bb.184
    i32 38, label %sw.bb.188
  ]

sw.bb:                                            ; preds = %if.end
  br label %sw.epilog

sw.bb.9:                                          ; preds = %if.end
  br label %sw.epilog

sw.bb.10:                                         ; preds = %if.end
  %5 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl11 = bitcast %union.tree_node* %5 to %struct.tree_decl*
  %initial = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl11, i32 0, i32 12
  %6 = load %union.tree_node*, %union.tree_node** %initial, align 8
  %cmp12 = icmp eq %union.tree_node* %6, null
  br i1 %cmp12, label %land.lhs.true.14, label %if.end.28

land.lhs.true.14:                                 ; preds = %sw.bb.10
  %7 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl15 = bitcast %union.tree_node* %7 to %struct.tree_decl*
  %context = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl15, i32 0, i32 9
  %8 = load %union.tree_node*, %union.tree_node** %context, align 8
  %cmp16 = icmp eq %union.tree_node* %8, null
  br i1 %cmp16, label %land.lhs.true.18, label %if.end.28

land.lhs.true.18:                                 ; preds = %land.lhs.true.14
  %9 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %cmp19 = icmp eq %union.tree_node* %9, null
  br i1 %cmp19, label %if.then.27, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.18
  %10 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl21 = bitcast %union.tree_node* %10 to %struct.tree_decl*
  %artificial_flag = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl21, i32 0, i32 5
  %11 = bitcast i48* %artificial_flag to i64*
  %bf.load22 = load i64, i64* %11, align 8
  %bf.lshr23 = lshr i64 %bf.load22, 22
  %bf.clear24 = and i64 %bf.lshr23, 1
  %bf.cast25 = trunc i64 %bf.clear24 to i32
  %tobool26 = icmp ne i32 %bf.cast25, 0
  br i1 %tobool26, label %if.then.27, label %if.end.28

if.then.27:                                       ; preds = %lor.lhs.false, %land.lhs.true.18
  br label %sw.epilog

if.end.28:                                        ; preds = %lor.lhs.false, %land.lhs.true.14, %sw.bb.10
  %12 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl29 = bitcast %union.tree_node* %12 to %struct.tree_decl*
  %abstract_origin = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl29, i32 0, i32 13
  %13 = load %union.tree_node*, %union.tree_node** %abstract_origin, align 8
  %tobool30 = icmp ne %union.tree_node* %13, null
  br i1 %tobool30, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.28
  %14 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl31 = bitcast %union.tree_node* %14 to %struct.tree_decl*
  %abstract_origin32 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl31, i32 0, i32 13
  %15 = load %union.tree_node*, %union.tree_node** %abstract_origin32, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end.28
  %16 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %15, %cond.true ], [ %16, %cond.false ]
  %17 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %cmp33 = icmp ne %union.tree_node* %cond, %17
  br i1 %cmp33, label %if.then.35, label %if.else

if.then.35:                                       ; preds = %cond.end
  %18 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl36 = bitcast %union.tree_node* %18 to %struct.tree_decl*
  %abstract_origin37 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl36, i32 0, i32 13
  %19 = load %union.tree_node*, %union.tree_node** %abstract_origin37, align 8
  call void @dwarf2out_abstract_function(%union.tree_node* %19)
  br label %if.end.80

if.else:                                          ; preds = %cond.end
  %20 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl38 = bitcast %union.tree_node* %20 to %struct.tree_decl*
  %inline_flag = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl38, i32 0, i32 5
  %21 = bitcast i48* %inline_flag to i64*
  %bf.load39 = load i64, i64* %21, align 8
  %bf.lshr40 = lshr i64 %bf.load39, 11
  %bf.clear41 = and i64 %bf.lshr40, 1
  %bf.cast42 = trunc i64 %bf.clear41 to i32
  %tobool43 = icmp ne i32 %bf.cast42, 0
  br i1 %tobool43, label %land.lhs.true.44, label %if.else.59

land.lhs.true.44:                                 ; preds = %if.else
  %22 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl45 = bitcast %union.tree_node* %22 to %struct.tree_decl*
  %abstract_flag = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl45, i32 0, i32 5
  %23 = bitcast i48* %abstract_flag to i64*
  %bf.load46 = load i64, i64* %23, align 8
  %bf.lshr47 = lshr i64 %bf.load46, 15
  %bf.clear48 = and i64 %bf.lshr47, 1
  %bf.cast49 = trunc i64 %bf.clear48 to i32
  %tobool50 = icmp ne i32 %bf.cast49, 0
  br i1 %tobool50, label %if.else.59, label %land.lhs.true.51

land.lhs.true.51:                                 ; preds = %land.lhs.true.44
  %24 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  %call = call i32 @class_scope_p(%struct.die_struct* %24)
  %tobool52 = icmp ne i32 %call, 0
  br i1 %tobool52, label %if.else.59, label %land.lhs.true.53

land.lhs.true.53:                                 ; preds = %land.lhs.true.51
  %25 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl54 = bitcast %union.tree_node* %25 to %struct.tree_decl*
  %initial55 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl54, i32 0, i32 12
  %26 = load %union.tree_node*, %union.tree_node** %initial55, align 8
  %cmp56 = icmp ne %union.tree_node* %26, null
  br i1 %cmp56, label %if.then.58, label %if.else.59

if.then.58:                                       ; preds = %land.lhs.true.53
  %27 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  call void @dwarf2out_abstract_function(%union.tree_node* %27)
  %28 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  call void @set_decl_origin_self(%union.tree_node* %28)
  br label %if.end.79

if.else.59:                                       ; preds = %land.lhs.true.53, %land.lhs.true.51, %land.lhs.true.44, %if.else
  %29 = load i32, i32* @debug_info_level, align 4
  %cmp60 = icmp ugt i32 %29, 1
  br i1 %cmp60, label %if.then.62, label %if.end.78

if.then.62:                                       ; preds = %if.else.59
  %30 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common63 = bitcast %union.tree_node* %30 to %struct.tree_common*
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common63, i32 0, i32 1
  %31 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common64 = bitcast %union.tree_node* %31 to %struct.tree_common*
  %type65 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common64, i32 0, i32 1
  %32 = load %union.tree_node*, %union.tree_node** %type65, align 8
  %33 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  call void @gen_type_die(%union.tree_node* %32, %struct.die_struct* %33)
  %34 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl66 = bitcast %union.tree_node* %34 to %struct.tree_decl*
  %vindex = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl66, i32 0, i32 22
  %35 = load %union.tree_node*, %union.tree_node** %vindex, align 8
  %cmp67 = icmp ne %union.tree_node* %35, null
  br i1 %cmp67, label %if.then.69, label %if.end.72

if.then.69:                                       ; preds = %if.then.62
  %36 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl70 = bitcast %union.tree_node* %36 to %struct.tree_decl*
  %context71 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl70, i32 0, i32 9
  %37 = load %union.tree_node*, %union.tree_node** %context71, align 8
  %38 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  call void @gen_type_die(%union.tree_node* %37, %struct.die_struct* %38)
  br label %if.end.72

if.end.72:                                        ; preds = %if.then.69, %if.then.62
  %39 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %call73 = call %union.tree_node* @decl_class_context(%union.tree_node* %39)
  store %union.tree_node* %call73, %union.tree_node** %origin, align 8
  %40 = load %union.tree_node*, %union.tree_node** %origin, align 8
  %cmp74 = icmp ne %union.tree_node* %40, null
  br i1 %cmp74, label %if.then.76, label %if.end.77

if.then.76:                                       ; preds = %if.end.72
  %41 = load %union.tree_node*, %union.tree_node** %origin, align 8
  %42 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %43 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  call void @gen_type_die_for_member(%union.tree_node* %41, %union.tree_node* %42, %struct.die_struct* %43)
  br label %if.end.77

if.end.77:                                        ; preds = %if.then.76, %if.end.72
  br label %if.end.78

if.end.78:                                        ; preds = %if.end.77, %if.else.59
  br label %if.end.79

if.end.79:                                        ; preds = %if.end.78, %if.then.58
  br label %if.end.80

if.end.80:                                        ; preds = %if.end.79, %if.then.35
  %44 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %45 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  call void @gen_subprogram_die(%union.tree_node* %44, %struct.die_struct* %45)
  br label %sw.epilog

sw.bb.81:                                         ; preds = %if.end
  %46 = load i32, i32* @debug_info_level, align 4
  %cmp82 = icmp ule i32 %46, 1
  br i1 %cmp82, label %if.then.84, label %if.end.85

if.then.84:                                       ; preds = %sw.bb.81
  br label %sw.epilog

if.end.85:                                        ; preds = %sw.bb.81
  %47 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl86 = bitcast %union.tree_node* %47 to %struct.tree_decl*
  %name = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl86, i32 0, i32 8
  %48 = load %union.tree_node*, %union.tree_node** %name, align 8
  %cmp87 = icmp eq %union.tree_node* %48, null
  br i1 %cmp87, label %land.lhs.true.121, label %lor.lhs.false.89

lor.lhs.false.89:                                 ; preds = %if.end.85
  %49 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl90 = bitcast %union.tree_node* %49 to %struct.tree_decl*
  %artificial_flag91 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl90, i32 0, i32 5
  %50 = bitcast i48* %artificial_flag91 to i64*
  %bf.load92 = load i64, i64* %50, align 8
  %bf.lshr93 = lshr i64 %bf.load92, 22
  %bf.clear94 = and i64 %bf.lshr93, 1
  %bf.cast95 = trunc i64 %bf.clear94 to i32
  %tobool96 = icmp ne i32 %bf.cast95, 0
  br i1 %tobool96, label %land.lhs.true.97, label %if.end.128

land.lhs.true.97:                                 ; preds = %lor.lhs.false.89
  %51 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common98 = bitcast %union.tree_node* %51 to %struct.tree_common*
  %type99 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common98, i32 0, i32 1
  %52 = load %union.tree_node*, %union.tree_node** %type99, align 8
  %call100 = call i32 @is_tagged_type(%union.tree_node* %52)
  %tobool101 = icmp ne i32 %call100, 0
  br i1 %tobool101, label %land.lhs.true.102, label %if.end.128

land.lhs.true.102:                                ; preds = %land.lhs.true.97
  %53 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %54 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common103 = bitcast %union.tree_node* %54 to %struct.tree_common*
  %type104 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common103, i32 0, i32 1
  %55 = load %union.tree_node*, %union.tree_node** %type104, align 8
  %common105 = bitcast %union.tree_node* %55 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common105, i32 0, i32 0
  %56 = load %union.tree_node*, %union.tree_node** %chain, align 8
  %cmp106 = icmp eq %union.tree_node* %53, %56
  br i1 %cmp106, label %land.lhs.true.121, label %lor.lhs.false.108

lor.lhs.false.108:                                ; preds = %land.lhs.true.102
  %57 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl109 = bitcast %union.tree_node* %57 to %struct.tree_decl*
  %abstract_origin110 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl109, i32 0, i32 13
  %58 = load %union.tree_node*, %union.tree_node** %abstract_origin110, align 8
  %cmp111 = icmp ne %union.tree_node* %58, null
  br i1 %cmp111, label %land.lhs.true.113, label %if.end.128

land.lhs.true.113:                                ; preds = %lor.lhs.false.108
  %59 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %call114 = call %union.tree_node* @decl_ultimate_origin(%union.tree_node* %59)
  %60 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common115 = bitcast %union.tree_node* %60 to %struct.tree_common*
  %type116 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common115, i32 0, i32 1
  %61 = load %union.tree_node*, %union.tree_node** %type116, align 8
  %common117 = bitcast %union.tree_node* %61 to %struct.tree_common*
  %chain118 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common117, i32 0, i32 0
  %62 = load %union.tree_node*, %union.tree_node** %chain118, align 8
  %cmp119 = icmp eq %union.tree_node* %call114, %62
  br i1 %cmp119, label %land.lhs.true.121, label %if.end.128

land.lhs.true.121:                                ; preds = %land.lhs.true.113, %land.lhs.true.102, %if.end.85
  %63 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %call122 = call %union.tree_node* @decl_ultimate_origin(%union.tree_node* %63)
  %cmp123 = icmp ne %union.tree_node* %call122, null
  br i1 %cmp123, label %if.then.125, label %if.end.128

if.then.125:                                      ; preds = %land.lhs.true.121
  %64 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common126 = bitcast %union.tree_node* %64 to %struct.tree_common*
  %type127 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common126, i32 0, i32 1
  %65 = load %union.tree_node*, %union.tree_node** %type127, align 8
  %66 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  call void @gen_tagged_type_instantiation_die(%union.tree_node* %65, %struct.die_struct* %66)
  br label %sw.epilog

if.end.128:                                       ; preds = %land.lhs.true.121, %land.lhs.true.113, %lor.lhs.false.108, %land.lhs.true.97, %lor.lhs.false.89
  %67 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %call129 = call i32 @is_redundant_typedef(%union.tree_node* %67)
  %tobool130 = icmp ne i32 %call129, 0
  br i1 %tobool130, label %if.then.131, label %if.else.134

if.then.131:                                      ; preds = %if.end.128
  %68 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common132 = bitcast %union.tree_node* %68 to %struct.tree_common*
  %type133 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common132, i32 0, i32 1
  %69 = load %union.tree_node*, %union.tree_node** %type133, align 8
  %70 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  call void @gen_type_die(%union.tree_node* %69, %struct.die_struct* %70)
  br label %if.end.135

if.else.134:                                      ; preds = %if.end.128
  %71 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %72 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  call void @gen_typedef_die(%union.tree_node* %71, %struct.die_struct* %72)
  br label %if.end.135

if.end.135:                                       ; preds = %if.else.134, %if.then.131
  br label %sw.epilog

sw.bb.136:                                        ; preds = %if.end
  %73 = load i32, i32* @debug_info_level, align 4
  %cmp137 = icmp uge i32 %73, 2
  br i1 %cmp137, label %if.then.139, label %if.end.140

if.then.139:                                      ; preds = %sw.bb.136
  %74 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %75 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  call void @gen_label_die(%union.tree_node* %74, %struct.die_struct* %75)
  br label %if.end.140

if.end.140:                                       ; preds = %if.then.139, %sw.bb.136
  br label %sw.epilog

sw.bb.141:                                        ; preds = %if.end
  %76 = load i32, i32* @debug_info_level, align 4
  %cmp142 = icmp ule i32 %76, 1
  br i1 %cmp142, label %if.then.144, label %if.end.145

if.then.144:                                      ; preds = %sw.bb.141
  br label %sw.epilog

if.end.145:                                       ; preds = %sw.bb.141
  %77 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common146 = bitcast %union.tree_node* %77 to %struct.tree_common*
  %type147 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common146, i32 0, i32 1
  %78 = load %union.tree_node*, %union.tree_node** %type147, align 8
  %79 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  call void @gen_type_die(%union.tree_node* %78, %struct.die_struct* %79)
  %80 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %call148 = call %union.tree_node* @decl_class_context(%union.tree_node* %80)
  store %union.tree_node* %call148, %union.tree_node** %origin, align 8
  %81 = load %union.tree_node*, %union.tree_node** %origin, align 8
  %cmp149 = icmp ne %union.tree_node* %81, null
  br i1 %cmp149, label %if.then.151, label %if.end.152

if.then.151:                                      ; preds = %if.end.145
  %82 = load %union.tree_node*, %union.tree_node** %origin, align 8
  %83 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %84 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  call void @gen_type_die_for_member(%union.tree_node* %82, %union.tree_node* %83, %struct.die_struct* %84)
  br label %if.end.152

if.end.152:                                       ; preds = %if.then.151, %if.end.145
  %85 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %call153 = call %union.tree_node* @decl_ultimate_origin(%union.tree_node* %85)
  store %union.tree_node* %call153, %union.tree_node** %origin, align 8
  %86 = load %union.tree_node*, %union.tree_node** %origin, align 8
  %cmp154 = icmp ne %union.tree_node* %86, null
  br i1 %cmp154, label %land.lhs.true.156, label %if.else.165

land.lhs.true.156:                                ; preds = %if.end.152
  %87 = load %union.tree_node*, %union.tree_node** %origin, align 8
  %common157 = bitcast %union.tree_node* %87 to %struct.tree_common*
  %code158 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common157, i32 0, i32 2
  %bf.load159 = load i32, i32* %code158, align 8
  %bf.clear160 = and i32 %bf.load159, 255
  %cmp161 = icmp eq i32 %bf.clear160, 35
  br i1 %cmp161, label %if.then.163, label %if.else.165

if.then.163:                                      ; preds = %land.lhs.true.156
  %88 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %89 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  %call164 = call %struct.die_struct* @gen_formal_parameter_die(%union.tree_node* %88, %struct.die_struct* %89)
  br label %if.end.166

if.else.165:                                      ; preds = %land.lhs.true.156, %if.end.152
  %90 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %91 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  call void @gen_variable_die(%union.tree_node* %90, %struct.die_struct* %91)
  br label %if.end.166

if.end.166:                                       ; preds = %if.else.165, %if.then.163
  br label %sw.epilog

sw.bb.167:                                        ; preds = %if.end
  %92 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl168 = bitcast %union.tree_node* %92 to %struct.tree_decl*
  %name169 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl168, i32 0, i32 8
  %93 = load %union.tree_node*, %union.tree_node** %name169, align 8
  %cmp170 = icmp ne %union.tree_node* %93, null
  br i1 %cmp170, label %if.then.181, label %lor.lhs.false.172

lor.lhs.false.172:                                ; preds = %sw.bb.167
  %94 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common173 = bitcast %union.tree_node* %94 to %struct.tree_common*
  %type174 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common173, i32 0, i32 1
  %95 = load %union.tree_node*, %union.tree_node** %type174, align 8
  %common175 = bitcast %union.tree_node* %95 to %struct.tree_common*
  %code176 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common175, i32 0, i32 2
  %bf.load177 = load i32, i32* %code176, align 8
  %bf.clear178 = and i32 %bf.load177, 255
  %cmp179 = icmp eq i32 %bf.clear178, 21
  br i1 %cmp179, label %if.then.181, label %if.end.183

if.then.181:                                      ; preds = %lor.lhs.false.172, %sw.bb.167
  %96 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %call182 = call %union.tree_node* @member_declared_type(%union.tree_node* %96)
  %97 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  call void @gen_type_die(%union.tree_node* %call182, %struct.die_struct* %97)
  %98 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %99 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  call void @gen_field_die(%union.tree_node* %98, %struct.die_struct* %99)
  br label %if.end.183

if.end.183:                                       ; preds = %if.then.181, %lor.lhs.false.172
  br label %sw.epilog

sw.bb.184:                                        ; preds = %if.end
  %100 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common185 = bitcast %union.tree_node* %100 to %struct.tree_common*
  %type186 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common185, i32 0, i32 1
  %101 = load %union.tree_node*, %union.tree_node** %type186, align 8
  %102 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  call void @gen_type_die(%union.tree_node* %101, %struct.die_struct* %102)
  %103 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %104 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  %call187 = call %struct.die_struct* @gen_formal_parameter_die(%union.tree_node* %103, %struct.die_struct* %104)
  br label %sw.epilog

sw.bb.188:                                        ; preds = %if.end
  br label %sw.epilog

sw.default:                                       ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 11553, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @__FUNCTION__.gen_decl_die, i32 0, i32 0)) #8
  unreachable

sw.epilog:                                        ; preds = %if.then, %sw.bb.188, %sw.bb.184, %if.end.183, %if.end.166, %if.then.144, %if.end.140, %if.end.135, %if.then.125, %if.then.84, %if.end.80, %if.then.27, %sw.bb.9, %sw.bb
  ret void
}

; Function Attrs: nounwind uwtable
define internal %struct.dw_loc_descr_struct* @build_cfa_loc(%struct.cfa_loc* %cfa) #0 {
entry:
  %cfa.addr = alloca %struct.cfa_loc*, align 8
  %head = alloca %struct.dw_loc_descr_struct*, align 8
  %tmp = alloca %struct.dw_loc_descr_struct*, align 8
  store %struct.cfa_loc* %cfa, %struct.cfa_loc** %cfa.addr, align 8
  %0 = load %struct.cfa_loc*, %struct.cfa_loc** %cfa.addr, align 8
  %indirect = getelementptr inbounds %struct.cfa_loc, %struct.cfa_loc* %0, i32 0, i32 3
  %1 = load i32, i32* %indirect, align 4
  %cmp = icmp eq i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 2929, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @__FUNCTION__.build_cfa_loc, i32 0, i32 0)) #8
  unreachable

if.end:                                           ; preds = %entry
  %2 = load %struct.cfa_loc*, %struct.cfa_loc** %cfa.addr, align 8
  %base_offset = getelementptr inbounds %struct.cfa_loc, %struct.cfa_loc* %2, i32 0, i32 2
  %3 = load i64, i64* %base_offset, align 8
  %tobool = icmp ne i64 %3, 0
  br i1 %tobool, label %if.then.1, label %if.else.10

if.then.1:                                        ; preds = %if.end
  %4 = load %struct.cfa_loc*, %struct.cfa_loc** %cfa.addr, align 8
  %reg = getelementptr inbounds %struct.cfa_loc, %struct.cfa_loc* %4, i32 0, i32 0
  %5 = load i64, i64* %reg, align 8
  %cmp2 = icmp ule i64 %5, 31
  br i1 %cmp2, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %if.then.1
  %6 = load %struct.cfa_loc*, %struct.cfa_loc** %cfa.addr, align 8
  %reg4 = getelementptr inbounds %struct.cfa_loc, %struct.cfa_loc* %6, i32 0, i32 0
  %7 = load i64, i64* %reg4, align 8
  %add = add i64 112, %7
  %conv = trunc i64 %add to i32
  %8 = load %struct.cfa_loc*, %struct.cfa_loc** %cfa.addr, align 8
  %base_offset5 = getelementptr inbounds %struct.cfa_loc, %struct.cfa_loc* %8, i32 0, i32 2
  %9 = load i64, i64* %base_offset5, align 8
  %call = call %struct.dw_loc_descr_struct* @new_loc_descr(i32 %conv, i64 %9, i64 0)
  store %struct.dw_loc_descr_struct* %call, %struct.dw_loc_descr_struct** %head, align 8
  br label %if.end.9

if.else:                                          ; preds = %if.then.1
  %10 = load %struct.cfa_loc*, %struct.cfa_loc** %cfa.addr, align 8
  %reg6 = getelementptr inbounds %struct.cfa_loc, %struct.cfa_loc* %10, i32 0, i32 0
  %11 = load i64, i64* %reg6, align 8
  %12 = load %struct.cfa_loc*, %struct.cfa_loc** %cfa.addr, align 8
  %base_offset7 = getelementptr inbounds %struct.cfa_loc, %struct.cfa_loc* %12, i32 0, i32 2
  %13 = load i64, i64* %base_offset7, align 8
  %call8 = call %struct.dw_loc_descr_struct* @new_loc_descr(i32 146, i64 %11, i64 %13)
  store %struct.dw_loc_descr_struct* %call8, %struct.dw_loc_descr_struct** %head, align 8
  br label %if.end.9

if.end.9:                                         ; preds = %if.else, %if.then.3
  br label %if.end.23

if.else.10:                                       ; preds = %if.end
  %14 = load %struct.cfa_loc*, %struct.cfa_loc** %cfa.addr, align 8
  %reg11 = getelementptr inbounds %struct.cfa_loc, %struct.cfa_loc* %14, i32 0, i32 0
  %15 = load i64, i64* %reg11, align 8
  %cmp12 = icmp ule i64 %15, 31
  br i1 %cmp12, label %if.then.14, label %if.else.19

if.then.14:                                       ; preds = %if.else.10
  %16 = load %struct.cfa_loc*, %struct.cfa_loc** %cfa.addr, align 8
  %reg15 = getelementptr inbounds %struct.cfa_loc, %struct.cfa_loc* %16, i32 0, i32 0
  %17 = load i64, i64* %reg15, align 8
  %add16 = add i64 80, %17
  %conv17 = trunc i64 %add16 to i32
  %call18 = call %struct.dw_loc_descr_struct* @new_loc_descr(i32 %conv17, i64 0, i64 0)
  store %struct.dw_loc_descr_struct* %call18, %struct.dw_loc_descr_struct** %head, align 8
  br label %if.end.22

if.else.19:                                       ; preds = %if.else.10
  %18 = load %struct.cfa_loc*, %struct.cfa_loc** %cfa.addr, align 8
  %reg20 = getelementptr inbounds %struct.cfa_loc, %struct.cfa_loc* %18, i32 0, i32 0
  %19 = load i64, i64* %reg20, align 8
  %call21 = call %struct.dw_loc_descr_struct* @new_loc_descr(i32 144, i64 %19, i64 0)
  store %struct.dw_loc_descr_struct* %call21, %struct.dw_loc_descr_struct** %head, align 8
  br label %if.end.22

if.end.22:                                        ; preds = %if.else.19, %if.then.14
  br label %if.end.23

if.end.23:                                        ; preds = %if.end.22, %if.end.9
  %20 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %head, align 8
  %dw_loc_oprnd1 = getelementptr inbounds %struct.dw_loc_descr_struct, %struct.dw_loc_descr_struct* %20, i32 0, i32 2
  %val_class = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_loc_oprnd1, i32 0, i32 0
  store i32 5, i32* %val_class, align 4
  %call24 = call %struct.dw_loc_descr_struct* @new_loc_descr(i32 6, i64 0, i64 0)
  store %struct.dw_loc_descr_struct* %call24, %struct.dw_loc_descr_struct** %tmp, align 8
  %21 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %tmp, align 8
  call void @add_loc_descr(%struct.dw_loc_descr_struct** %head, %struct.dw_loc_descr_struct* %21)
  %22 = load %struct.cfa_loc*, %struct.cfa_loc** %cfa.addr, align 8
  %offset = getelementptr inbounds %struct.cfa_loc, %struct.cfa_loc* %22, i32 0, i32 1
  %23 = load i64, i64* %offset, align 8
  %cmp25 = icmp ne i64 %23, 0
  br i1 %cmp25, label %if.then.27, label %if.end.30

if.then.27:                                       ; preds = %if.end.23
  %24 = load %struct.cfa_loc*, %struct.cfa_loc** %cfa.addr, align 8
  %offset28 = getelementptr inbounds %struct.cfa_loc, %struct.cfa_loc* %24, i32 0, i32 1
  %25 = load i64, i64* %offset28, align 8
  %call29 = call %struct.dw_loc_descr_struct* @new_loc_descr(i32 35, i64 %25, i64 0)
  store %struct.dw_loc_descr_struct* %call29, %struct.dw_loc_descr_struct** %tmp, align 8
  %26 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %tmp, align 8
  call void @add_loc_descr(%struct.dw_loc_descr_struct** %head, %struct.dw_loc_descr_struct* %26)
  br label %if.end.30

if.end.30:                                        ; preds = %if.then.27, %if.end.23
  %27 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %head, align 8
  ret %struct.dw_loc_descr_struct* %27
}

; Function Attrs: inlinehint nounwind uwtable
define internal %struct.dw_loc_descr_struct* @new_loc_descr(i32 %op, i64 %oprnd1, i64 %oprnd2) #3 {
entry:
  %op.addr = alloca i32, align 4
  %oprnd1.addr = alloca i64, align 8
  %oprnd2.addr = alloca i64, align 8
  %descr = alloca %struct.dw_loc_descr_struct*, align 8
  store i32 %op, i32* %op.addr, align 4
  store i64 %oprnd1, i64* %oprnd1.addr, align 8
  store i64 %oprnd2, i64* %oprnd2.addr, align 8
  %call = call noalias i8* @xcalloc(i64 1, i64 72)
  %0 = bitcast i8* %call to %struct.dw_loc_descr_struct*
  store %struct.dw_loc_descr_struct* %0, %struct.dw_loc_descr_struct** %descr, align 8
  %1 = load i32, i32* %op.addr, align 4
  %2 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %descr, align 8
  %dw_loc_opc = getelementptr inbounds %struct.dw_loc_descr_struct, %struct.dw_loc_descr_struct* %2, i32 0, i32 1
  store i32 %1, i32* %dw_loc_opc, align 4
  %3 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %descr, align 8
  %dw_loc_oprnd1 = getelementptr inbounds %struct.dw_loc_descr_struct, %struct.dw_loc_descr_struct* %3, i32 0, i32 2
  %val_class = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_loc_oprnd1, i32 0, i32 0
  store i32 6, i32* %val_class, align 4
  %4 = load i64, i64* %oprnd1.addr, align 8
  %5 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %descr, align 8
  %dw_loc_oprnd11 = getelementptr inbounds %struct.dw_loc_descr_struct, %struct.dw_loc_descr_struct* %5, i32 0, i32 2
  %v = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_loc_oprnd11, i32 0, i32 1
  %val_unsigned = bitcast %union.anon.3* %v to i64*
  store i64 %4, i64* %val_unsigned, align 8
  %6 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %descr, align 8
  %dw_loc_oprnd2 = getelementptr inbounds %struct.dw_loc_descr_struct, %struct.dw_loc_descr_struct* %6, i32 0, i32 3
  %val_class2 = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_loc_oprnd2, i32 0, i32 0
  store i32 6, i32* %val_class2, align 4
  %7 = load i64, i64* %oprnd2.addr, align 8
  %8 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %descr, align 8
  %dw_loc_oprnd23 = getelementptr inbounds %struct.dw_loc_descr_struct, %struct.dw_loc_descr_struct* %8, i32 0, i32 3
  %v4 = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_loc_oprnd23, i32 0, i32 1
  %val_unsigned5 = bitcast %union.anon.3* %v4 to i64*
  store i64 %7, i64* %val_unsigned5, align 8
  %9 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %descr, align 8
  ret %struct.dw_loc_descr_struct* %9
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @add_loc_descr(%struct.dw_loc_descr_struct** %list_head, %struct.dw_loc_descr_struct* %descr) #3 {
entry:
  %list_head.addr = alloca %struct.dw_loc_descr_struct**, align 8
  %descr.addr = alloca %struct.dw_loc_descr_struct*, align 8
  %d = alloca %struct.dw_loc_descr_struct**, align 8
  store %struct.dw_loc_descr_struct** %list_head, %struct.dw_loc_descr_struct*** %list_head.addr, align 8
  store %struct.dw_loc_descr_struct* %descr, %struct.dw_loc_descr_struct** %descr.addr, align 8
  %0 = load %struct.dw_loc_descr_struct**, %struct.dw_loc_descr_struct*** %list_head.addr, align 8
  store %struct.dw_loc_descr_struct** %0, %struct.dw_loc_descr_struct*** %d, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.dw_loc_descr_struct**, %struct.dw_loc_descr_struct*** %d, align 8
  %2 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %1, align 8
  %cmp = icmp ne %struct.dw_loc_descr_struct* %2, null
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %3 = load %struct.dw_loc_descr_struct**, %struct.dw_loc_descr_struct*** %d, align 8
  %4 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %3, align 8
  %dw_loc_next = getelementptr inbounds %struct.dw_loc_descr_struct, %struct.dw_loc_descr_struct* %4, i32 0, i32 0
  store %struct.dw_loc_descr_struct** %dw_loc_next, %struct.dw_loc_descr_struct*** %d, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %5 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %descr.addr, align 8
  %6 = load %struct.dw_loc_descr_struct**, %struct.dw_loc_descr_struct*** %d, align 8
  store %struct.dw_loc_descr_struct* %5, %struct.dw_loc_descr_struct** %6, align 8
  ret void
}

declare noalias i8* @xmalloc(i64) #1

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8*, i8*) #6

; Function Attrs: inlinehint nounwind uwtable
define internal void @add_cfi(%struct.dw_cfi_struct** %list_head, %struct.dw_cfi_struct* %cfi) #3 {
entry:
  %list_head.addr = alloca %struct.dw_cfi_struct**, align 8
  %cfi.addr = alloca %struct.dw_cfi_struct*, align 8
  %p = alloca %struct.dw_cfi_struct**, align 8
  store %struct.dw_cfi_struct** %list_head, %struct.dw_cfi_struct*** %list_head.addr, align 8
  store %struct.dw_cfi_struct* %cfi, %struct.dw_cfi_struct** %cfi.addr, align 8
  %0 = load %struct.dw_cfi_struct**, %struct.dw_cfi_struct*** %list_head.addr, align 8
  store %struct.dw_cfi_struct** %0, %struct.dw_cfi_struct*** %p, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.dw_cfi_struct**, %struct.dw_cfi_struct*** %p, align 8
  %2 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %1, align 8
  %cmp = icmp ne %struct.dw_cfi_struct* %2, null
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %3 = load %struct.dw_cfi_struct**, %struct.dw_cfi_struct*** %p, align 8
  %4 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %3, align 8
  %dw_cfi_next = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %4, i32 0, i32 0
  store %struct.dw_cfi_struct** %dw_cfi_next, %struct.dw_cfi_struct*** %p, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %5 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi.addr, align 8
  %6 = load %struct.dw_cfi_struct**, %struct.dw_cfi_struct*** %p, align 8
  store %struct.dw_cfi_struct* %5, %struct.dw_cfi_struct** %6, align 8
  ret void
}

; Function Attrs: nounwind
declare void @free(i8*) #2

; Function Attrs: inlinehint nounwind uwtable
define internal void @lookup_cfa_1(%struct.dw_cfi_struct* %cfi, %struct.cfa_loc* %loc) #3 {
entry:
  %cfi.addr = alloca %struct.dw_cfi_struct*, align 8
  %loc.addr = alloca %struct.cfa_loc*, align 8
  store %struct.dw_cfi_struct* %cfi, %struct.dw_cfi_struct** %cfi.addr, align 8
  store %struct.cfa_loc* %loc, %struct.cfa_loc** %loc.addr, align 8
  %0 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi.addr, align 8
  %dw_cfi_opc = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %0, i32 0, i32 1
  %1 = load i32, i32* %dw_cfi_opc, align 4
  switch i32 %1, label %sw.default [
    i32 14, label %sw.bb
    i32 13, label %sw.bb.1
    i32 12, label %sw.bb.3
    i32 15, label %sw.bb.9
  ]

sw.bb:                                            ; preds = %entry
  %2 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi.addr, align 8
  %dw_cfi_oprnd1 = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %2, i32 0, i32 2
  %dw_cfi_offset = bitcast %union.dw_cfi_oprnd_struct* %dw_cfi_oprnd1 to i64*
  %3 = load i64, i64* %dw_cfi_offset, align 8
  %4 = load %struct.cfa_loc*, %struct.cfa_loc** %loc.addr, align 8
  %offset = getelementptr inbounds %struct.cfa_loc, %struct.cfa_loc* %4, i32 0, i32 1
  store i64 %3, i64* %offset, align 8
  br label %sw.epilog

sw.bb.1:                                          ; preds = %entry
  %5 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi.addr, align 8
  %dw_cfi_oprnd12 = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %5, i32 0, i32 2
  %dw_cfi_reg_num = bitcast %union.dw_cfi_oprnd_struct* %dw_cfi_oprnd12 to i64*
  %6 = load i64, i64* %dw_cfi_reg_num, align 8
  %7 = load %struct.cfa_loc*, %struct.cfa_loc** %loc.addr, align 8
  %reg = getelementptr inbounds %struct.cfa_loc, %struct.cfa_loc* %7, i32 0, i32 0
  store i64 %6, i64* %reg, align 8
  br label %sw.epilog

sw.bb.3:                                          ; preds = %entry
  %8 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi.addr, align 8
  %dw_cfi_oprnd14 = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %8, i32 0, i32 2
  %dw_cfi_reg_num5 = bitcast %union.dw_cfi_oprnd_struct* %dw_cfi_oprnd14 to i64*
  %9 = load i64, i64* %dw_cfi_reg_num5, align 8
  %10 = load %struct.cfa_loc*, %struct.cfa_loc** %loc.addr, align 8
  %reg6 = getelementptr inbounds %struct.cfa_loc, %struct.cfa_loc* %10, i32 0, i32 0
  store i64 %9, i64* %reg6, align 8
  %11 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi.addr, align 8
  %dw_cfi_oprnd2 = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %11, i32 0, i32 3
  %dw_cfi_offset7 = bitcast %union.dw_cfi_oprnd_struct* %dw_cfi_oprnd2 to i64*
  %12 = load i64, i64* %dw_cfi_offset7, align 8
  %13 = load %struct.cfa_loc*, %struct.cfa_loc** %loc.addr, align 8
  %offset8 = getelementptr inbounds %struct.cfa_loc, %struct.cfa_loc* %13, i32 0, i32 1
  store i64 %12, i64* %offset8, align 8
  br label %sw.epilog

sw.bb.9:                                          ; preds = %entry
  %14 = load %struct.cfa_loc*, %struct.cfa_loc** %loc.addr, align 8
  %15 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi.addr, align 8
  %dw_cfi_oprnd110 = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %15, i32 0, i32 2
  %dw_cfi_loc = bitcast %union.dw_cfi_oprnd_struct* %dw_cfi_oprnd110 to %struct.dw_loc_descr_struct**
  %16 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %dw_cfi_loc, align 8
  call void @get_cfa_from_loc_descr(%struct.cfa_loc* %14, %struct.dw_loc_descr_struct* %16)
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb.9, %sw.bb.3, %sw.bb.1, %sw.bb
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @get_cfa_from_loc_descr(%struct.cfa_loc* %cfa, %struct.dw_loc_descr_struct* %loc) #0 {
entry:
  %cfa.addr = alloca %struct.cfa_loc*, align 8
  %loc.addr = alloca %struct.dw_loc_descr_struct*, align 8
  %ptr = alloca %struct.dw_loc_descr_struct*, align 8
  %op = alloca i32, align 4
  store %struct.cfa_loc* %cfa, %struct.cfa_loc** %cfa.addr, align 8
  store %struct.dw_loc_descr_struct* %loc, %struct.dw_loc_descr_struct** %loc.addr, align 8
  %0 = load %struct.cfa_loc*, %struct.cfa_loc** %cfa.addr, align 8
  %offset = getelementptr inbounds %struct.cfa_loc, %struct.cfa_loc* %0, i32 0, i32 1
  store i64 0, i64* %offset, align 8
  %1 = load %struct.cfa_loc*, %struct.cfa_loc** %cfa.addr, align 8
  %base_offset = getelementptr inbounds %struct.cfa_loc, %struct.cfa_loc* %1, i32 0, i32 2
  store i64 0, i64* %base_offset, align 8
  %2 = load %struct.cfa_loc*, %struct.cfa_loc** %cfa.addr, align 8
  %indirect = getelementptr inbounds %struct.cfa_loc, %struct.cfa_loc* %2, i32 0, i32 3
  store i32 0, i32* %indirect, align 4
  %3 = load %struct.cfa_loc*, %struct.cfa_loc** %cfa.addr, align 8
  %reg = getelementptr inbounds %struct.cfa_loc, %struct.cfa_loc* %3, i32 0, i32 0
  store i64 -1, i64* %reg, align 8
  %4 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %loc.addr, align 8
  store %struct.dw_loc_descr_struct* %4, %struct.dw_loc_descr_struct** %ptr, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %ptr, align 8
  %cmp = icmp ne %struct.dw_loc_descr_struct* %5, null
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %ptr, align 8
  %dw_loc_opc = getelementptr inbounds %struct.dw_loc_descr_struct, %struct.dw_loc_descr_struct* %6, i32 0, i32 1
  %7 = load i32, i32* %dw_loc_opc, align 4
  store i32 %7, i32* %op, align 4
  %8 = load i32, i32* %op, align 4
  switch i32 %8, label %sw.default [
    i32 80, label %sw.bb
    i32 81, label %sw.bb
    i32 82, label %sw.bb
    i32 83, label %sw.bb
    i32 84, label %sw.bb
    i32 85, label %sw.bb
    i32 86, label %sw.bb
    i32 87, label %sw.bb
    i32 88, label %sw.bb
    i32 89, label %sw.bb
    i32 90, label %sw.bb
    i32 91, label %sw.bb
    i32 92, label %sw.bb
    i32 93, label %sw.bb
    i32 94, label %sw.bb
    i32 95, label %sw.bb
    i32 96, label %sw.bb
    i32 97, label %sw.bb
    i32 98, label %sw.bb
    i32 99, label %sw.bb
    i32 100, label %sw.bb
    i32 101, label %sw.bb
    i32 102, label %sw.bb
    i32 103, label %sw.bb
    i32 104, label %sw.bb
    i32 105, label %sw.bb
    i32 106, label %sw.bb
    i32 107, label %sw.bb
    i32 108, label %sw.bb
    i32 109, label %sw.bb
    i32 110, label %sw.bb
    i32 111, label %sw.bb
    i32 144, label %sw.bb.2
    i32 112, label %sw.bb.4
    i32 113, label %sw.bb.4
    i32 114, label %sw.bb.4
    i32 115, label %sw.bb.4
    i32 116, label %sw.bb.4
    i32 117, label %sw.bb.4
    i32 118, label %sw.bb.4
    i32 119, label %sw.bb.4
    i32 120, label %sw.bb.4
    i32 121, label %sw.bb.4
    i32 122, label %sw.bb.4
    i32 123, label %sw.bb.4
    i32 124, label %sw.bb.4
    i32 125, label %sw.bb.4
    i32 126, label %sw.bb.4
    i32 127, label %sw.bb.4
    i32 128, label %sw.bb.4
    i32 129, label %sw.bb.4
    i32 130, label %sw.bb.4
    i32 131, label %sw.bb.4
    i32 132, label %sw.bb.4
    i32 133, label %sw.bb.4
    i32 134, label %sw.bb.4
    i32 135, label %sw.bb.4
    i32 136, label %sw.bb.4
    i32 137, label %sw.bb.4
    i32 138, label %sw.bb.4
    i32 139, label %sw.bb.4
    i32 140, label %sw.bb.4
    i32 141, label %sw.bb.4
    i32 142, label %sw.bb.4
    i32 143, label %sw.bb.4
    i32 146, label %sw.bb.12
    i32 6, label %sw.bb.20
    i32 35, label %sw.bb.22
  ]

sw.bb:                                            ; preds = %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body
  %9 = load i32, i32* %op, align 4
  %sub = sub i32 %9, 80
  %conv = zext i32 %sub to i64
  %10 = load %struct.cfa_loc*, %struct.cfa_loc** %cfa.addr, align 8
  %reg1 = getelementptr inbounds %struct.cfa_loc, %struct.cfa_loc* %10, i32 0, i32 0
  store i64 %conv, i64* %reg1, align 8
  br label %sw.epilog

sw.bb.2:                                          ; preds = %for.body
  %11 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %ptr, align 8
  %dw_loc_oprnd1 = getelementptr inbounds %struct.dw_loc_descr_struct, %struct.dw_loc_descr_struct* %11, i32 0, i32 2
  %v = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_loc_oprnd1, i32 0, i32 1
  %val_int = bitcast %union.anon.3* %v to i64*
  %12 = load i64, i64* %val_int, align 8
  %13 = load %struct.cfa_loc*, %struct.cfa_loc** %cfa.addr, align 8
  %reg3 = getelementptr inbounds %struct.cfa_loc, %struct.cfa_loc* %13, i32 0, i32 0
  store i64 %12, i64* %reg3, align 8
  br label %sw.epilog

sw.bb.4:                                          ; preds = %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body
  %14 = load i32, i32* %op, align 4
  %sub5 = sub i32 %14, 112
  %conv6 = zext i32 %sub5 to i64
  %15 = load %struct.cfa_loc*, %struct.cfa_loc** %cfa.addr, align 8
  %reg7 = getelementptr inbounds %struct.cfa_loc, %struct.cfa_loc* %15, i32 0, i32 0
  store i64 %conv6, i64* %reg7, align 8
  %16 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %ptr, align 8
  %dw_loc_oprnd18 = getelementptr inbounds %struct.dw_loc_descr_struct, %struct.dw_loc_descr_struct* %16, i32 0, i32 2
  %v9 = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_loc_oprnd18, i32 0, i32 1
  %val_int10 = bitcast %union.anon.3* %v9 to i64*
  %17 = load i64, i64* %val_int10, align 8
  %18 = load %struct.cfa_loc*, %struct.cfa_loc** %cfa.addr, align 8
  %base_offset11 = getelementptr inbounds %struct.cfa_loc, %struct.cfa_loc* %18, i32 0, i32 2
  store i64 %17, i64* %base_offset11, align 8
  br label %sw.epilog

sw.bb.12:                                         ; preds = %for.body
  %19 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %ptr, align 8
  %dw_loc_oprnd113 = getelementptr inbounds %struct.dw_loc_descr_struct, %struct.dw_loc_descr_struct* %19, i32 0, i32 2
  %v14 = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_loc_oprnd113, i32 0, i32 1
  %val_int15 = bitcast %union.anon.3* %v14 to i64*
  %20 = load i64, i64* %val_int15, align 8
  %21 = load %struct.cfa_loc*, %struct.cfa_loc** %cfa.addr, align 8
  %reg16 = getelementptr inbounds %struct.cfa_loc, %struct.cfa_loc* %21, i32 0, i32 0
  store i64 %20, i64* %reg16, align 8
  %22 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %ptr, align 8
  %dw_loc_oprnd2 = getelementptr inbounds %struct.dw_loc_descr_struct, %struct.dw_loc_descr_struct* %22, i32 0, i32 3
  %v17 = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_loc_oprnd2, i32 0, i32 1
  %val_int18 = bitcast %union.anon.3* %v17 to i64*
  %23 = load i64, i64* %val_int18, align 8
  %24 = load %struct.cfa_loc*, %struct.cfa_loc** %cfa.addr, align 8
  %base_offset19 = getelementptr inbounds %struct.cfa_loc, %struct.cfa_loc* %24, i32 0, i32 2
  store i64 %23, i64* %base_offset19, align 8
  br label %sw.epilog

sw.bb.20:                                         ; preds = %for.body
  %25 = load %struct.cfa_loc*, %struct.cfa_loc** %cfa.addr, align 8
  %indirect21 = getelementptr inbounds %struct.cfa_loc, %struct.cfa_loc* %25, i32 0, i32 3
  store i32 1, i32* %indirect21, align 4
  br label %sw.epilog

sw.bb.22:                                         ; preds = %for.body
  %26 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %ptr, align 8
  %dw_loc_oprnd123 = getelementptr inbounds %struct.dw_loc_descr_struct, %struct.dw_loc_descr_struct* %26, i32 0, i32 2
  %v24 = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_loc_oprnd123, i32 0, i32 1
  %val_unsigned = bitcast %union.anon.3* %v24 to i64*
  %27 = load i64, i64* %val_unsigned, align 8
  %28 = load %struct.cfa_loc*, %struct.cfa_loc** %cfa.addr, align 8
  %offset25 = getelementptr inbounds %struct.cfa_loc, %struct.cfa_loc* %28, i32 0, i32 1
  store i64 %27, i64* %offset25, align 8
  br label %sw.epilog

sw.default:                                       ; preds = %for.body
  %29 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %ptr, align 8
  %dw_loc_opc26 = getelementptr inbounds %struct.dw_loc_descr_struct, %struct.dw_loc_descr_struct* %29, i32 0, i32 1
  %30 = load i32, i32* %dw_loc_opc26, align 4
  %call = call i8* @dwarf_stack_op_name(i32 %30)
  call void (i8*, ...) @internal_error(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.8, i32 0, i32 0), i8* %call) #8
  unreachable

sw.epilog:                                        ; preds = %sw.bb.22, %sw.bb.20, %sw.bb.12, %sw.bb.4, %sw.bb.2, %sw.bb
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog
  %31 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %ptr, align 8
  %dw_loc_next = getelementptr inbounds %struct.dw_loc_descr_struct, %struct.dw_loc_descr_struct* %31, i32 0, i32 0
  %32 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %dw_loc_next, align 8
  store %struct.dw_loc_descr_struct* %32, %struct.dw_loc_descr_struct** %ptr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noreturn
declare void @internal_error(i8*, ...) #4

; Function Attrs: nounwind uwtable
define internal i8* @dwarf_stack_op_name(i32 %op) #0 {
entry:
  %retval = alloca i8*, align 8
  %op.addr = alloca i32, align 4
  store i32 %op, i32* %op.addr, align 4
  %0 = load i32, i32* %op.addr, align 4
  switch i32 %0, label %sw.default [
    i32 3, label %sw.bb
    i32 6, label %sw.bb.1
    i32 8, label %sw.bb.2
    i32 9, label %sw.bb.3
    i32 10, label %sw.bb.4
    i32 11, label %sw.bb.5
    i32 12, label %sw.bb.6
    i32 13, label %sw.bb.7
    i32 14, label %sw.bb.8
    i32 15, label %sw.bb.9
    i32 16, label %sw.bb.10
    i32 17, label %sw.bb.11
    i32 18, label %sw.bb.12
    i32 19, label %sw.bb.13
    i32 20, label %sw.bb.14
    i32 21, label %sw.bb.15
    i32 22, label %sw.bb.16
    i32 23, label %sw.bb.17
    i32 24, label %sw.bb.18
    i32 25, label %sw.bb.19
    i32 26, label %sw.bb.20
    i32 27, label %sw.bb.21
    i32 28, label %sw.bb.22
    i32 29, label %sw.bb.23
    i32 30, label %sw.bb.24
    i32 31, label %sw.bb.25
    i32 32, label %sw.bb.26
    i32 33, label %sw.bb.27
    i32 34, label %sw.bb.28
    i32 35, label %sw.bb.29
    i32 36, label %sw.bb.30
    i32 37, label %sw.bb.31
    i32 38, label %sw.bb.32
    i32 39, label %sw.bb.33
    i32 40, label %sw.bb.34
    i32 41, label %sw.bb.35
    i32 42, label %sw.bb.36
    i32 43, label %sw.bb.37
    i32 44, label %sw.bb.38
    i32 45, label %sw.bb.39
    i32 46, label %sw.bb.40
    i32 47, label %sw.bb.41
    i32 48, label %sw.bb.42
    i32 49, label %sw.bb.43
    i32 50, label %sw.bb.44
    i32 51, label %sw.bb.45
    i32 52, label %sw.bb.46
    i32 53, label %sw.bb.47
    i32 54, label %sw.bb.48
    i32 55, label %sw.bb.49
    i32 56, label %sw.bb.50
    i32 57, label %sw.bb.51
    i32 58, label %sw.bb.52
    i32 59, label %sw.bb.53
    i32 60, label %sw.bb.54
    i32 61, label %sw.bb.55
    i32 62, label %sw.bb.56
    i32 63, label %sw.bb.57
    i32 64, label %sw.bb.58
    i32 65, label %sw.bb.59
    i32 66, label %sw.bb.60
    i32 67, label %sw.bb.61
    i32 68, label %sw.bb.62
    i32 69, label %sw.bb.63
    i32 70, label %sw.bb.64
    i32 71, label %sw.bb.65
    i32 72, label %sw.bb.66
    i32 73, label %sw.bb.67
    i32 74, label %sw.bb.68
    i32 75, label %sw.bb.69
    i32 76, label %sw.bb.70
    i32 77, label %sw.bb.71
    i32 78, label %sw.bb.72
    i32 79, label %sw.bb.73
    i32 80, label %sw.bb.74
    i32 81, label %sw.bb.75
    i32 82, label %sw.bb.76
    i32 83, label %sw.bb.77
    i32 84, label %sw.bb.78
    i32 85, label %sw.bb.79
    i32 86, label %sw.bb.80
    i32 87, label %sw.bb.81
    i32 88, label %sw.bb.82
    i32 89, label %sw.bb.83
    i32 90, label %sw.bb.84
    i32 91, label %sw.bb.85
    i32 92, label %sw.bb.86
    i32 93, label %sw.bb.87
    i32 94, label %sw.bb.88
    i32 95, label %sw.bb.89
    i32 96, label %sw.bb.90
    i32 97, label %sw.bb.91
    i32 98, label %sw.bb.92
    i32 99, label %sw.bb.93
    i32 100, label %sw.bb.94
    i32 101, label %sw.bb.95
    i32 102, label %sw.bb.96
    i32 103, label %sw.bb.97
    i32 104, label %sw.bb.98
    i32 105, label %sw.bb.99
    i32 106, label %sw.bb.100
    i32 107, label %sw.bb.101
    i32 108, label %sw.bb.102
    i32 109, label %sw.bb.103
    i32 110, label %sw.bb.104
    i32 111, label %sw.bb.105
    i32 112, label %sw.bb.106
    i32 113, label %sw.bb.107
    i32 114, label %sw.bb.108
    i32 115, label %sw.bb.109
    i32 116, label %sw.bb.110
    i32 117, label %sw.bb.111
    i32 118, label %sw.bb.112
    i32 119, label %sw.bb.113
    i32 120, label %sw.bb.114
    i32 121, label %sw.bb.115
    i32 122, label %sw.bb.116
    i32 123, label %sw.bb.117
    i32 124, label %sw.bb.118
    i32 125, label %sw.bb.119
    i32 126, label %sw.bb.120
    i32 127, label %sw.bb.121
    i32 128, label %sw.bb.122
    i32 129, label %sw.bb.123
    i32 130, label %sw.bb.124
    i32 131, label %sw.bb.125
    i32 132, label %sw.bb.126
    i32 133, label %sw.bb.127
    i32 134, label %sw.bb.128
    i32 135, label %sw.bb.129
    i32 136, label %sw.bb.130
    i32 137, label %sw.bb.131
    i32 138, label %sw.bb.132
    i32 139, label %sw.bb.133
    i32 140, label %sw.bb.134
    i32 141, label %sw.bb.135
    i32 142, label %sw.bb.136
    i32 143, label %sw.bb.137
    i32 144, label %sw.bb.138
    i32 145, label %sw.bb.139
    i32 146, label %sw.bb.140
    i32 147, label %sw.bb.141
    i32 148, label %sw.bb.142
    i32 149, label %sw.bb.143
    i32 150, label %sw.bb.144
  ]

sw.bb:                                            ; preds = %entry
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.1:                                          ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.2:                                          ; preds = %entry
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.11, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.3:                                          ; preds = %entry
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.12, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.4:                                          ; preds = %entry
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.13, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.5:                                          ; preds = %entry
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.14, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.6:                                          ; preds = %entry
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.7:                                          ; preds = %entry
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.16, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.8:                                          ; preds = %entry
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.17, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.9:                                          ; preds = %entry
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.18, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.10:                                         ; preds = %entry
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.19, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.11:                                         ; preds = %entry
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.20, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.12:                                         ; preds = %entry
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.21, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.13:                                         ; preds = %entry
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.22, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.14:                                         ; preds = %entry
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.23, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.15:                                         ; preds = %entry
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.24, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.16:                                         ; preds = %entry
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.25, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.17:                                         ; preds = %entry
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.26, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.18:                                         ; preds = %entry
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.27, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.19:                                         ; preds = %entry
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.28, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.20:                                         ; preds = %entry
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.29, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.21:                                         ; preds = %entry
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.30, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.22:                                         ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.31, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.23:                                         ; preds = %entry
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.32, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.24:                                         ; preds = %entry
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.33, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.25:                                         ; preds = %entry
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.34, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.26:                                         ; preds = %entry
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.35, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.27:                                         ; preds = %entry
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.36, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.28:                                         ; preds = %entry
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.37, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.29:                                         ; preds = %entry
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.38, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.30:                                         ; preds = %entry
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.39, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.31:                                         ; preds = %entry
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.40, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.32:                                         ; preds = %entry
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.41, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.33:                                         ; preds = %entry
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.42, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.34:                                         ; preds = %entry
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.43, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.35:                                         ; preds = %entry
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.44, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.36:                                         ; preds = %entry
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.45, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.37:                                         ; preds = %entry
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.46, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.38:                                         ; preds = %entry
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.47, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.39:                                         ; preds = %entry
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.48, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.40:                                         ; preds = %entry
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.49, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.41:                                         ; preds = %entry
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.50, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.42:                                         ; preds = %entry
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.51, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.43:                                         ; preds = %entry
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.52, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.44:                                         ; preds = %entry
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.53, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.45:                                         ; preds = %entry
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.54, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.46:                                         ; preds = %entry
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.55, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.47:                                         ; preds = %entry
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.56, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.48:                                         ; preds = %entry
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.57, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.49:                                         ; preds = %entry
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.58, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.50:                                         ; preds = %entry
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.59, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.51:                                         ; preds = %entry
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.60, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.52:                                         ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.61, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.53:                                         ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.62, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.54:                                         ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.63, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.55:                                         ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.64, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.56:                                         ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.65, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.57:                                         ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.66, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.58:                                         ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.67, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.59:                                         ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.68, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.60:                                         ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.69, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.61:                                         ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.70, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.62:                                         ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.71, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.63:                                         ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.72, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.64:                                         ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.73, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.65:                                         ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.74, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.66:                                         ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.75, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.67:                                         ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.76, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.68:                                         ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.77, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.69:                                         ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.78, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.70:                                         ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.79, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.71:                                         ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.80, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.72:                                         ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.81, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.73:                                         ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.82, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.74:                                         ; preds = %entry
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.83, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.75:                                         ; preds = %entry
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.84, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.76:                                         ; preds = %entry
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.85, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.77:                                         ; preds = %entry
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.86, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.78:                                         ; preds = %entry
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.87, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.79:                                         ; preds = %entry
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.88, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.80:                                         ; preds = %entry
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.89, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.81:                                         ; preds = %entry
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.90, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.82:                                         ; preds = %entry
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.91, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.83:                                         ; preds = %entry
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.92, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.84:                                         ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.93, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.85:                                         ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.94, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.86:                                         ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.95, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.87:                                         ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.96, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.88:                                         ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.97, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.89:                                         ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.98, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.90:                                         ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.99, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.91:                                         ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.100, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.92:                                         ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.101, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.93:                                         ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.102, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.94:                                         ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.103, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.95:                                         ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.104, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.96:                                         ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.105, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.97:                                         ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.106, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.98:                                         ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.107, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.99:                                         ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.108, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.100:                                        ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.109, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.101:                                        ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.110, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.102:                                        ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.111, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.103:                                        ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.112, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.104:                                        ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.113, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.105:                                        ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.114, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.106:                                        ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.115, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.107:                                        ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.116, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.108:                                        ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.117, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.109:                                        ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.118, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.110:                                        ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.119, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.111:                                        ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.120, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.112:                                        ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.121, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.113:                                        ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.122, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.114:                                        ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.123, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.115:                                        ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.124, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.116:                                        ; preds = %entry
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.125, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.117:                                        ; preds = %entry
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.126, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.118:                                        ; preds = %entry
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.127, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.119:                                        ; preds = %entry
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.128, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.120:                                        ; preds = %entry
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.129, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.121:                                        ; preds = %entry
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.130, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.122:                                        ; preds = %entry
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.131, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.123:                                        ; preds = %entry
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.132, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.124:                                        ; preds = %entry
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.133, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.125:                                        ; preds = %entry
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.134, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.126:                                        ; preds = %entry
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.135, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.127:                                        ; preds = %entry
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.136, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.128:                                        ; preds = %entry
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.137, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.129:                                        ; preds = %entry
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.138, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.130:                                        ; preds = %entry
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.139, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.131:                                        ; preds = %entry
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.140, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.132:                                        ; preds = %entry
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.141, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.133:                                        ; preds = %entry
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.142, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.134:                                        ; preds = %entry
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.143, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.135:                                        ; preds = %entry
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.144, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.136:                                        ; preds = %entry
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.145, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.137:                                        ; preds = %entry
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.146, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.138:                                        ; preds = %entry
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.147, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.139:                                        ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.148, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.140:                                        ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.149, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.141:                                        ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.150, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.142:                                        ; preds = %entry
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.151, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.143:                                        ; preds = %entry
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.152, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.144:                                        ; preds = %entry
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.153, i32 0, i32 0), i8** %retval
  br label %return

sw.default:                                       ; preds = %entry
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.154, i32 0, i32 0), i8** %retval
  br label %return

return:                                           ; preds = %sw.default, %sw.bb.144, %sw.bb.143, %sw.bb.142, %sw.bb.141, %sw.bb.140, %sw.bb.139, %sw.bb.138, %sw.bb.137, %sw.bb.136, %sw.bb.135, %sw.bb.134, %sw.bb.133, %sw.bb.132, %sw.bb.131, %sw.bb.130, %sw.bb.129, %sw.bb.128, %sw.bb.127, %sw.bb.126, %sw.bb.125, %sw.bb.124, %sw.bb.123, %sw.bb.122, %sw.bb.121, %sw.bb.120, %sw.bb.119, %sw.bb.118, %sw.bb.117, %sw.bb.116, %sw.bb.115, %sw.bb.114, %sw.bb.113, %sw.bb.112, %sw.bb.111, %sw.bb.110, %sw.bb.109, %sw.bb.108, %sw.bb.107, %sw.bb.106, %sw.bb.105, %sw.bb.104, %sw.bb.103, %sw.bb.102, %sw.bb.101, %sw.bb.100, %sw.bb.99, %sw.bb.98, %sw.bb.97, %sw.bb.96, %sw.bb.95, %sw.bb.94, %sw.bb.93, %sw.bb.92, %sw.bb.91, %sw.bb.90, %sw.bb.89, %sw.bb.88, %sw.bb.87, %sw.bb.86, %sw.bb.85, %sw.bb.84, %sw.bb.83, %sw.bb.82, %sw.bb.81, %sw.bb.80, %sw.bb.79, %sw.bb.78, %sw.bb.77, %sw.bb.76, %sw.bb.75, %sw.bb.74, %sw.bb.73, %sw.bb.72, %sw.bb.71, %sw.bb.70, %sw.bb.69, %sw.bb.68, %sw.bb.67, %sw.bb.66, %sw.bb.65, %sw.bb.64, %sw.bb.63, %sw.bb.62, %sw.bb.61, %sw.bb.60, %sw.bb.59, %sw.bb.58, %sw.bb.57, %sw.bb.56, %sw.bb.55, %sw.bb.54, %sw.bb.53, %sw.bb.52, %sw.bb.51, %sw.bb.50, %sw.bb.49, %sw.bb.48, %sw.bb.47, %sw.bb.46, %sw.bb.45, %sw.bb.44, %sw.bb.43, %sw.bb.42, %sw.bb.41, %sw.bb.40, %sw.bb.39, %sw.bb.38, %sw.bb.37, %sw.bb.36, %sw.bb.35, %sw.bb.34, %sw.bb.33, %sw.bb.32, %sw.bb.31, %sw.bb.30, %sw.bb.29, %sw.bb.28, %sw.bb.27, %sw.bb.26, %sw.bb.25, %sw.bb.24, %sw.bb.23, %sw.bb.22, %sw.bb.21, %sw.bb.20, %sw.bb.19, %sw.bb.18, %sw.bb.17, %sw.bb.16, %sw.bb.15, %sw.bb.14, %sw.bb.13, %sw.bb.12, %sw.bb.11, %sw.bb.10, %sw.bb.9, %sw.bb.8, %sw.bb.7, %sw.bb.6, %sw.bb.5, %sw.bb.4, %sw.bb.3, %sw.bb.2, %sw.bb.1, %sw.bb
  %1 = load i8*, i8** %retval
  ret i8* %1
}

declare i32 @modified_in_p(%struct.rtx_def*, %struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define internal i64 @stack_adjust_offset(%struct.rtx_def* %pattern) #0 {
entry:
  %retval = alloca i64, align 8
  %pattern.addr = alloca %struct.rtx_def*, align 8
  %src = alloca %struct.rtx_def*, align 8
  %dest = alloca %struct.rtx_def*, align 8
  %offset = alloca i64, align 8
  %code = alloca i32, align 4
  %val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %pattern, %struct.rtx_def** %pattern.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 1
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %1 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %src, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8
  %fld1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1
  %arrayidx2 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1, i32 0, i64 0
  %rtx3 = bitcast %union.rtunion_def* %arrayidx2 to %struct.rtx_def**
  %3 = load %struct.rtx_def*, %struct.rtx_def** %rtx3, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %dest, align 8
  store i64 0, i64* %offset, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %cmp = icmp eq %struct.rtx_def* %4, %5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %6 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %7 = bitcast %struct.rtx_def* %6 to i32*
  %bf.load = load i32, i32* %7, align 8
  %bf.clear = and i32 %bf.load, 65535
  store i32 %bf.clear, i32* %code, align 4
  %8 = load i32, i32* %code, align 4
  %cmp4 = icmp eq i32 %8, 75
  br i1 %cmp4, label %lor.lhs.false.6, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then
  %9 = load i32, i32* %code, align 4
  %cmp5 = icmp eq i32 %9, 76
  br i1 %cmp5, label %lor.lhs.false.6, label %if.then.18

lor.lhs.false.6:                                  ; preds = %lor.lhs.false, %if.then
  %10 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %fld7 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1
  %arrayidx8 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld7, i32 0, i64 0
  %rtx9 = bitcast %union.rtunion_def* %arrayidx8 to %struct.rtx_def**
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rtx9, align 8
  %12 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %cmp10 = icmp ne %struct.rtx_def* %11, %12
  br i1 %cmp10, label %if.then.18, label %lor.lhs.false.11

lor.lhs.false.11:                                 ; preds = %lor.lhs.false.6
  %13 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %fld12 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1
  %arrayidx13 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld12, i32 0, i64 1
  %rtx14 = bitcast %union.rtunion_def* %arrayidx13 to %struct.rtx_def**
  %14 = load %struct.rtx_def*, %struct.rtx_def** %rtx14, align 8
  %15 = bitcast %struct.rtx_def* %14 to i32*
  %bf.load15 = load i32, i32* %15, align 8
  %bf.clear16 = and i32 %bf.load15, 65535
  %cmp17 = icmp ne i32 %bf.clear16, 54
  br i1 %cmp17, label %if.then.18, label %if.end

if.then.18:                                       ; preds = %lor.lhs.false.11, %lor.lhs.false.6, %lor.lhs.false
  store i64 0, i64* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false.11
  %16 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %fld19 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1
  %arrayidx20 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld19, i32 0, i64 1
  %rtx21 = bitcast %union.rtunion_def* %arrayidx20 to %struct.rtx_def**
  %17 = load %struct.rtx_def*, %struct.rtx_def** %rtx21, align 8
  %fld22 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1
  %arrayidx23 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld22, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx23 to i64*
  %18 = load i64, i64* %rtwint, align 8
  store i64 %18, i64* %offset, align 8
  br label %if.end.74

if.else:                                          ; preds = %entry
  %19 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %20 = bitcast %struct.rtx_def* %19 to i32*
  %bf.load24 = load i32, i32* %20, align 8
  %bf.clear25 = and i32 %bf.load24, 65535
  %cmp26 = icmp eq i32 %bf.clear25, 66
  br i1 %cmp26, label %if.then.27, label %if.else.72

if.then.27:                                       ; preds = %if.else
  %21 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %fld28 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1
  %arrayidx29 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld28, i32 0, i64 0
  %rtx30 = bitcast %union.rtunion_def* %arrayidx29 to %struct.rtx_def**
  %22 = load %struct.rtx_def*, %struct.rtx_def** %rtx30, align 8
  store %struct.rtx_def* %22, %struct.rtx_def** %src, align 8
  %23 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %24 = bitcast %struct.rtx_def* %23 to i32*
  %bf.load31 = load i32, i32* %24, align 8
  %bf.clear32 = and i32 %bf.load31, 65535
  store i32 %bf.clear32, i32* %code, align 4
  %25 = load i32, i32* %code, align 4
  %cmp33 = icmp ne i32 %25, 96
  br i1 %cmp33, label %land.lhs.true, label %lor.lhs.false.37

land.lhs.true:                                    ; preds = %if.then.27
  %26 = load i32, i32* %code, align 4
  %cmp34 = icmp ne i32 %26, 97
  br i1 %cmp34, label %land.lhs.true.35, label %lor.lhs.false.37

land.lhs.true.35:                                 ; preds = %land.lhs.true
  %27 = load i32, i32* %code, align 4
  %cmp36 = icmp ne i32 %27, 100
  br i1 %cmp36, label %if.then.42, label %lor.lhs.false.37

lor.lhs.false.37:                                 ; preds = %land.lhs.true.35, %land.lhs.true, %if.then.27
  %28 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %fld38 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1
  %arrayidx39 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld38, i32 0, i64 0
  %rtx40 = bitcast %union.rtunion_def* %arrayidx39 to %struct.rtx_def**
  %29 = load %struct.rtx_def*, %struct.rtx_def** %rtx40, align 8
  %30 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %cmp41 = icmp ne %struct.rtx_def* %29, %30
  br i1 %cmp41, label %if.then.42, label %if.end.43

if.then.42:                                       ; preds = %lor.lhs.false.37, %land.lhs.true.35
  store i64 0, i64* %retval
  br label %return

if.end.43:                                        ; preds = %lor.lhs.false.37
  %31 = load i32, i32* %code, align 4
  %cmp44 = icmp eq i32 %31, 100
  br i1 %cmp44, label %if.then.45, label %if.else.67

if.then.45:                                       ; preds = %if.end.43
  %32 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %fld46 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %32, i32 0, i32 1
  %arrayidx47 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld46, i32 0, i64 1
  %rtx48 = bitcast %union.rtunion_def* %arrayidx47 to %struct.rtx_def**
  %33 = load %struct.rtx_def*, %struct.rtx_def** %rtx48, align 8
  %fld49 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1
  %arrayidx50 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld49, i32 0, i64 1
  %rtx51 = bitcast %union.rtunion_def* %arrayidx50 to %struct.rtx_def**
  %34 = load %struct.rtx_def*, %struct.rtx_def** %rtx51, align 8
  store %struct.rtx_def* %34, %struct.rtx_def** %val, align 8
  %35 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %fld52 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %35, i32 0, i32 1
  %arrayidx53 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld52, i32 0, i64 1
  %rtx54 = bitcast %union.rtunion_def* %arrayidx53 to %struct.rtx_def**
  %36 = load %struct.rtx_def*, %struct.rtx_def** %rtx54, align 8
  %37 = bitcast %struct.rtx_def* %36 to i32*
  %bf.load55 = load i32, i32* %37, align 8
  %bf.clear56 = and i32 %bf.load55, 65535
  %cmp57 = icmp ne i32 %bf.clear56, 75
  br i1 %cmp57, label %if.then.62, label %lor.lhs.false.58

lor.lhs.false.58:                                 ; preds = %if.then.45
  %38 = load %struct.rtx_def*, %struct.rtx_def** %val, align 8
  %39 = bitcast %struct.rtx_def* %38 to i32*
  %bf.load59 = load i32, i32* %39, align 8
  %bf.clear60 = and i32 %bf.load59, 65535
  %cmp61 = icmp ne i32 %bf.clear60, 54
  br i1 %cmp61, label %if.then.62, label %if.end.63

if.then.62:                                       ; preds = %lor.lhs.false.58, %if.then.45
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 972, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__FUNCTION__.stack_adjust_offset, i32 0, i32 0)) #8
  unreachable

if.end.63:                                        ; preds = %lor.lhs.false.58
  %40 = load %struct.rtx_def*, %struct.rtx_def** %val, align 8
  %fld64 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %40, i32 0, i32 1
  %arrayidx65 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld64, i32 0, i64 0
  %rtwint66 = bitcast %union.rtunion_def* %arrayidx65 to i64*
  %41 = load i64, i64* %rtwint66, align 8
  %sub = sub nsw i64 0, %41
  store i64 %sub, i64* %offset, align 8
  br label %if.end.71

if.else.67:                                       ; preds = %if.end.43
  %42 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %43 = bitcast %struct.rtx_def* %42 to i32*
  %bf.load68 = load i32, i32* %43, align 8
  %bf.lshr = lshr i32 %bf.load68, 16
  %bf.clear69 = and i32 %bf.lshr, 255
  %idxprom = sext i32 %bf.clear69 to i64
  %arrayidx70 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom
  %44 = load i8, i8* %arrayidx70, align 1
  %conv = zext i8 %44 to i64
  store i64 %conv, i64* %offset, align 8
  br label %if.end.71

if.end.71:                                        ; preds = %if.else.67, %if.end.63
  br label %if.end.73

if.else.72:                                       ; preds = %if.else
  store i64 0, i64* %retval
  br label %return

if.end.73:                                        ; preds = %if.end.71
  br label %if.end.74

if.end.74:                                        ; preds = %if.end.73, %if.end
  %45 = load i32, i32* %code, align 4
  %cmp75 = icmp eq i32 %45, 75
  br i1 %cmp75, label %if.then.80, label %lor.lhs.false.77

lor.lhs.false.77:                                 ; preds = %if.end.74
  %46 = load i32, i32* %code, align 4
  %cmp78 = icmp eq i32 %46, 97
  br i1 %cmp78, label %if.then.80, label %if.end.82

if.then.80:                                       ; preds = %lor.lhs.false.77, %if.end.74
  %47 = load i64, i64* %offset, align 8
  %sub81 = sub nsw i64 0, %47
  store i64 %sub81, i64* %offset, align 8
  br label %if.end.82

if.end.82:                                        ; preds = %if.then.80, %lor.lhs.false.77
  %48 = load i64, i64* %offset, align 8
  store i64 %48, i64* %retval
  br label %return

return:                                           ; preds = %if.end.82, %if.else.72, %if.then.42, %if.then.18
  %49 = load i64, i64* %retval
  ret i64 %49
}

; Function Attrs: nounwind uwtable
define internal void @queue_reg_save(i8* %label, %struct.rtx_def* %reg, i64 %offset) #0 {
entry:
  %label.addr = alloca i8*, align 8
  %reg.addr = alloca %struct.rtx_def*, align 8
  %offset.addr = alloca i64, align 8
  %q = alloca %struct.queued_reg_save*, align 8
  store i8* %label, i8** %label.addr, align 8
  store %struct.rtx_def* %reg, %struct.rtx_def** %reg.addr, align 8
  store i64 %offset, i64* %offset.addr, align 8
  %call = call noalias i8* @xmalloc(i64 24)
  %0 = bitcast i8* %call to %struct.queued_reg_save*
  store %struct.queued_reg_save* %0, %struct.queued_reg_save** %q, align 8
  %1 = load %struct.queued_reg_save*, %struct.queued_reg_save** @queued_reg_saves, align 8
  %2 = load %struct.queued_reg_save*, %struct.queued_reg_save** %q, align 8
  %next = getelementptr inbounds %struct.queued_reg_save, %struct.queued_reg_save* %2, i32 0, i32 0
  store %struct.queued_reg_save* %1, %struct.queued_reg_save** %next, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %4 = load %struct.queued_reg_save*, %struct.queued_reg_save** %q, align 8
  %reg1 = getelementptr inbounds %struct.queued_reg_save, %struct.queued_reg_save* %4, i32 0, i32 1
  store %struct.rtx_def* %3, %struct.rtx_def** %reg1, align 8
  %5 = load i64, i64* %offset.addr, align 8
  %6 = load %struct.queued_reg_save*, %struct.queued_reg_save** %q, align 8
  %cfa_offset = getelementptr inbounds %struct.queued_reg_save, %struct.queued_reg_save* %6, i32 0, i32 2
  store i64 %5, i64* %cfa_offset, align 8
  %7 = load %struct.queued_reg_save*, %struct.queued_reg_save** %q, align 8
  store %struct.queued_reg_save* %7, %struct.queued_reg_save** @queued_reg_saves, align 8
  %8 = load i8*, i8** %label.addr, align 8
  store i8* %8, i8** @last_reg_save_label, align 8
  ret void
}

declare void @app_enable() #1

declare void @dw2_asm_output_delta(i32, i8*, i8*, i8*, ...) #1

declare void @dw2_asm_output_data(i32, i64, i8*, ...) #1

declare i32 @size_of_encoded_value(i32) #1

; Function Attrs: nounwind readonly
declare i64 @strlen(i8*) #6

declare i32 @size_of_uleb128(i64) #1

declare i32 @size_of_sleb128(i64) #1

declare void @dw2_asm_output_nstring(i8*, i64, i8*, ...) #1

declare void @dw2_asm_output_data_uleb128(i64, i8*, ...) #1

declare void @dw2_asm_output_data_sleb128(i64, i8*, ...) #1

declare i8* @eh_data_format_name(i32) #1

declare void @dw2_asm_output_encoded_addr_rtx(i32, %struct.rtx_def*, i8*, ...) #1

; Function Attrs: nounwind uwtable
define internal void @output_cfi(%struct.dw_cfi_struct* %cfi, %struct.dw_fde_struct* %fde, i32 %for_eh) #0 {
entry:
  %cfi.addr = alloca %struct.dw_cfi_struct*, align 8
  %fde.addr = alloca %struct.dw_fde_struct*, align 8
  %for_eh.addr = alloca i32, align 4
  store %struct.dw_cfi_struct* %cfi, %struct.dw_cfi_struct** %cfi.addr, align 8
  store %struct.dw_fde_struct* %fde, %struct.dw_fde_struct** %fde.addr, align 8
  store i32 %for_eh, i32* %for_eh.addr, align 4
  %0 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi.addr, align 8
  %dw_cfi_opc = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %0, i32 0, i32 1
  %1 = load i32, i32* %dw_cfi_opc, align 4
  %cmp = icmp eq i32 %1, 64
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi.addr, align 8
  %dw_cfi_opc1 = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %2, i32 0, i32 1
  %3 = load i32, i32* %dw_cfi_opc1, align 4
  %conv = zext i32 %3 to i64
  %4 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi.addr, align 8
  %dw_cfi_oprnd1 = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %4, i32 0, i32 2
  %dw_cfi_offset = bitcast %union.dw_cfi_oprnd_struct* %dw_cfi_oprnd1 to i64*
  %5 = load i64, i64* %dw_cfi_offset, align 8
  %and = and i64 %5, 63
  %or = or i64 %conv, %and
  %6 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi.addr, align 8
  %dw_cfi_oprnd12 = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %6, i32 0, i32 2
  %dw_cfi_offset3 = bitcast %union.dw_cfi_oprnd_struct* %dw_cfi_oprnd12 to i64*
  %7 = load i64, i64* %dw_cfi_offset3, align 8
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 1, i64 %or, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.182, i32 0, i32 0), i64 %7)
  br label %if.end.103

if.else:                                          ; preds = %entry
  %8 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi.addr, align 8
  %dw_cfi_opc4 = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %8, i32 0, i32 1
  %9 = load i32, i32* %dw_cfi_opc4, align 4
  %cmp5 = icmp eq i32 %9, 128
  br i1 %cmp5, label %if.then.7, label %if.else.16

if.then.7:                                        ; preds = %if.else
  %10 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi.addr, align 8
  %dw_cfi_opc8 = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %10, i32 0, i32 1
  %11 = load i32, i32* %dw_cfi_opc8, align 4
  %conv9 = zext i32 %11 to i64
  %12 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi.addr, align 8
  %dw_cfi_oprnd110 = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %12, i32 0, i32 2
  %dw_cfi_reg_num = bitcast %union.dw_cfi_oprnd_struct* %dw_cfi_oprnd110 to i64*
  %13 = load i64, i64* %dw_cfi_reg_num, align 8
  %and11 = and i64 %13, 63
  %or12 = or i64 %conv9, %and11
  %14 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi.addr, align 8
  %dw_cfi_oprnd113 = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %14, i32 0, i32 2
  %dw_cfi_reg_num14 = bitcast %union.dw_cfi_oprnd_struct* %dw_cfi_oprnd113 to i64*
  %15 = load i64, i64* %dw_cfi_reg_num14, align 8
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 1, i64 %or12, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.183, i32 0, i32 0), i64 %15)
  %16 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi.addr, align 8
  %dw_cfi_oprnd2 = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %16, i32 0, i32 3
  %dw_cfi_offset15 = bitcast %union.dw_cfi_oprnd_struct* %dw_cfi_oprnd2 to i64*
  %17 = load i64, i64* %dw_cfi_offset15, align 8
  call void (i64, i8*, ...) @dw2_asm_output_data_uleb128(i64 %17, i8* null)
  br label %if.end.102

if.else.16:                                       ; preds = %if.else
  %18 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi.addr, align 8
  %dw_cfi_opc17 = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %18, i32 0, i32 1
  %19 = load i32, i32* %dw_cfi_opc17, align 4
  %cmp18 = icmp eq i32 %19, 192
  br i1 %cmp18, label %if.then.20, label %if.else.29

if.then.20:                                       ; preds = %if.else.16
  %20 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi.addr, align 8
  %dw_cfi_opc21 = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %20, i32 0, i32 1
  %21 = load i32, i32* %dw_cfi_opc21, align 4
  %conv22 = zext i32 %21 to i64
  %22 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi.addr, align 8
  %dw_cfi_oprnd123 = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %22, i32 0, i32 2
  %dw_cfi_reg_num24 = bitcast %union.dw_cfi_oprnd_struct* %dw_cfi_oprnd123 to i64*
  %23 = load i64, i64* %dw_cfi_reg_num24, align 8
  %and25 = and i64 %23, 63
  %or26 = or i64 %conv22, %and25
  %24 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi.addr, align 8
  %dw_cfi_oprnd127 = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %24, i32 0, i32 2
  %dw_cfi_reg_num28 = bitcast %union.dw_cfi_oprnd_struct* %dw_cfi_oprnd127 to i64*
  %25 = load i64, i64* %dw_cfi_reg_num28, align 8
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 1, i64 %or26, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.184, i32 0, i32 0), i64 %25)
  br label %if.end.101

if.else.29:                                       ; preds = %if.else.16
  %26 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi.addr, align 8
  %dw_cfi_opc30 = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %26, i32 0, i32 1
  %27 = load i32, i32* %dw_cfi_opc30, align 4
  %conv31 = zext i32 %27 to i64
  %28 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi.addr, align 8
  %dw_cfi_opc32 = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %28, i32 0, i32 1
  %29 = load i32, i32* %dw_cfi_opc32, align 4
  %call = call i8* @dwarf_cfi_name(i32 %29)
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 1, i64 %conv31, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.185, i32 0, i32 0), i8* %call)
  %30 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi.addr, align 8
  %dw_cfi_opc33 = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %30, i32 0, i32 1
  %31 = load i32, i32* %dw_cfi_opc33, align 4
  switch i32 %31, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb.47
    i32 3, label %sw.bb.53
    i32 4, label %sw.bb.60
    i32 29, label %sw.bb.67
    i32 5, label %sw.bb.74
    i32 12, label %sw.bb.74
    i32 17, label %sw.bb.79
    i32 18, label %sw.bb.79
    i32 6, label %sw.bb.84
    i32 7, label %sw.bb.84
    i32 8, label %sw.bb.84
    i32 13, label %sw.bb.84
    i32 9, label %sw.bb.87
    i32 14, label %sw.bb.92
    i32 46, label %sw.bb.92
    i32 19, label %sw.bb.95
    i32 45, label %sw.bb.98
    i32 15, label %sw.bb.99
    i32 16, label %sw.bb.99
    i32 47, label %sw.bb.100
  ]

sw.bb:                                            ; preds = %if.else.29
  %32 = load i32, i32* %for_eh.addr, align 4
  %tobool = icmp ne i32 %32, 0
  br i1 %tobool, label %if.then.34, label %if.else.41

if.then.34:                                       ; preds = %sw.bb
  %33 = load i32, i32* @flag_pic, align 4
  %tobool35 = icmp ne i32 %33, 0
  %cond = select i1 %tobool35, i32 27, i32 0
  %34 = load i32, i32* @target_flags, align 4
  %and36 = and i32 %34, 33554432
  %tobool37 = icmp ne i32 %and36, 0
  %cond38 = select i1 %tobool37, i32 5, i32 4
  %35 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi.addr, align 8
  %dw_cfi_oprnd139 = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %35, i32 0, i32 2
  %dw_cfi_addr = bitcast %union.dw_cfi_oprnd_struct* %dw_cfi_oprnd139 to i8**
  %36 = load i8*, i8** %dw_cfi_addr, align 8
  %call40 = call %struct.rtx_def* @gen_rtx_fmt_s(i32 68, i32 %cond38, i8* %36)
  call void (i32, %struct.rtx_def*, i8*, ...) @dw2_asm_output_encoded_addr_rtx(i32 %cond, %struct.rtx_def* %call40, i8* null)
  br label %if.end

if.else.41:                                       ; preds = %sw.bb
  %37 = load i32, i32* @target_flags, align 4
  %and42 = and i32 %37, 33554432
  %tobool43 = icmp ne i32 %and42, 0
  %cond44 = select i1 %tobool43, i32 64, i32 32
  %div = sdiv i32 %cond44, 8
  %38 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi.addr, align 8
  %dw_cfi_oprnd145 = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %38, i32 0, i32 2
  %dw_cfi_addr46 = bitcast %union.dw_cfi_oprnd_struct* %dw_cfi_oprnd145 to i8**
  %39 = load i8*, i8** %dw_cfi_addr46, align 8
  call void (i32, i8*, i8*, ...) @dw2_asm_output_addr(i32 %div, i8* %39, i8* null)
  br label %if.end

if.end:                                           ; preds = %if.else.41, %if.then.34
  br label %sw.epilog

sw.bb.47:                                         ; preds = %if.else.29
  %40 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi.addr, align 8
  %dw_cfi_oprnd148 = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %40, i32 0, i32 2
  %dw_cfi_addr49 = bitcast %union.dw_cfi_oprnd_struct* %dw_cfi_oprnd148 to i8**
  %41 = load i8*, i8** %dw_cfi_addr49, align 8
  %42 = load %struct.dw_fde_struct*, %struct.dw_fde_struct** %fde.addr, align 8
  %dw_fde_current_label = getelementptr inbounds %struct.dw_fde_struct, %struct.dw_fde_struct* %42, i32 0, i32 1
  %43 = load i8*, i8** %dw_fde_current_label, align 8
  call void (i32, i8*, i8*, i8*, ...) @dw2_asm_output_delta(i32 1, i8* %41, i8* %43, i8* null)
  %44 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi.addr, align 8
  %dw_cfi_oprnd150 = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %44, i32 0, i32 2
  %dw_cfi_addr51 = bitcast %union.dw_cfi_oprnd_struct* %dw_cfi_oprnd150 to i8**
  %45 = load i8*, i8** %dw_cfi_addr51, align 8
  %46 = load %struct.dw_fde_struct*, %struct.dw_fde_struct** %fde.addr, align 8
  %dw_fde_current_label52 = getelementptr inbounds %struct.dw_fde_struct, %struct.dw_fde_struct* %46, i32 0, i32 1
  store i8* %45, i8** %dw_fde_current_label52, align 8
  br label %sw.epilog

sw.bb.53:                                         ; preds = %if.else.29
  %47 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi.addr, align 8
  %dw_cfi_oprnd154 = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %47, i32 0, i32 2
  %dw_cfi_addr55 = bitcast %union.dw_cfi_oprnd_struct* %dw_cfi_oprnd154 to i8**
  %48 = load i8*, i8** %dw_cfi_addr55, align 8
  %49 = load %struct.dw_fde_struct*, %struct.dw_fde_struct** %fde.addr, align 8
  %dw_fde_current_label56 = getelementptr inbounds %struct.dw_fde_struct, %struct.dw_fde_struct* %49, i32 0, i32 1
  %50 = load i8*, i8** %dw_fde_current_label56, align 8
  call void (i32, i8*, i8*, i8*, ...) @dw2_asm_output_delta(i32 2, i8* %48, i8* %50, i8* null)
  %51 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi.addr, align 8
  %dw_cfi_oprnd157 = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %51, i32 0, i32 2
  %dw_cfi_addr58 = bitcast %union.dw_cfi_oprnd_struct* %dw_cfi_oprnd157 to i8**
  %52 = load i8*, i8** %dw_cfi_addr58, align 8
  %53 = load %struct.dw_fde_struct*, %struct.dw_fde_struct** %fde.addr, align 8
  %dw_fde_current_label59 = getelementptr inbounds %struct.dw_fde_struct, %struct.dw_fde_struct* %53, i32 0, i32 1
  store i8* %52, i8** %dw_fde_current_label59, align 8
  br label %sw.epilog

sw.bb.60:                                         ; preds = %if.else.29
  %54 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi.addr, align 8
  %dw_cfi_oprnd161 = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %54, i32 0, i32 2
  %dw_cfi_addr62 = bitcast %union.dw_cfi_oprnd_struct* %dw_cfi_oprnd161 to i8**
  %55 = load i8*, i8** %dw_cfi_addr62, align 8
  %56 = load %struct.dw_fde_struct*, %struct.dw_fde_struct** %fde.addr, align 8
  %dw_fde_current_label63 = getelementptr inbounds %struct.dw_fde_struct, %struct.dw_fde_struct* %56, i32 0, i32 1
  %57 = load i8*, i8** %dw_fde_current_label63, align 8
  call void (i32, i8*, i8*, i8*, ...) @dw2_asm_output_delta(i32 4, i8* %55, i8* %57, i8* null)
  %58 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi.addr, align 8
  %dw_cfi_oprnd164 = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %58, i32 0, i32 2
  %dw_cfi_addr65 = bitcast %union.dw_cfi_oprnd_struct* %dw_cfi_oprnd164 to i8**
  %59 = load i8*, i8** %dw_cfi_addr65, align 8
  %60 = load %struct.dw_fde_struct*, %struct.dw_fde_struct** %fde.addr, align 8
  %dw_fde_current_label66 = getelementptr inbounds %struct.dw_fde_struct, %struct.dw_fde_struct* %60, i32 0, i32 1
  store i8* %59, i8** %dw_fde_current_label66, align 8
  br label %sw.epilog

sw.bb.67:                                         ; preds = %if.else.29
  %61 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi.addr, align 8
  %dw_cfi_oprnd168 = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %61, i32 0, i32 2
  %dw_cfi_addr69 = bitcast %union.dw_cfi_oprnd_struct* %dw_cfi_oprnd168 to i8**
  %62 = load i8*, i8** %dw_cfi_addr69, align 8
  %63 = load %struct.dw_fde_struct*, %struct.dw_fde_struct** %fde.addr, align 8
  %dw_fde_current_label70 = getelementptr inbounds %struct.dw_fde_struct, %struct.dw_fde_struct* %63, i32 0, i32 1
  %64 = load i8*, i8** %dw_fde_current_label70, align 8
  call void (i32, i8*, i8*, i8*, ...) @dw2_asm_output_delta(i32 8, i8* %62, i8* %64, i8* null)
  %65 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi.addr, align 8
  %dw_cfi_oprnd171 = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %65, i32 0, i32 2
  %dw_cfi_addr72 = bitcast %union.dw_cfi_oprnd_struct* %dw_cfi_oprnd171 to i8**
  %66 = load i8*, i8** %dw_cfi_addr72, align 8
  %67 = load %struct.dw_fde_struct*, %struct.dw_fde_struct** %fde.addr, align 8
  %dw_fde_current_label73 = getelementptr inbounds %struct.dw_fde_struct, %struct.dw_fde_struct* %67, i32 0, i32 1
  store i8* %66, i8** %dw_fde_current_label73, align 8
  br label %sw.epilog

sw.bb.74:                                         ; preds = %if.else.29, %if.else.29
  %68 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi.addr, align 8
  %dw_cfi_oprnd175 = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %68, i32 0, i32 2
  %dw_cfi_reg_num76 = bitcast %union.dw_cfi_oprnd_struct* %dw_cfi_oprnd175 to i64*
  %69 = load i64, i64* %dw_cfi_reg_num76, align 8
  call void (i64, i8*, ...) @dw2_asm_output_data_uleb128(i64 %69, i8* null)
  %70 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi.addr, align 8
  %dw_cfi_oprnd277 = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %70, i32 0, i32 3
  %dw_cfi_offset78 = bitcast %union.dw_cfi_oprnd_struct* %dw_cfi_oprnd277 to i64*
  %71 = load i64, i64* %dw_cfi_offset78, align 8
  call void (i64, i8*, ...) @dw2_asm_output_data_uleb128(i64 %71, i8* null)
  br label %sw.epilog

sw.bb.79:                                         ; preds = %if.else.29, %if.else.29
  %72 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi.addr, align 8
  %dw_cfi_oprnd180 = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %72, i32 0, i32 2
  %dw_cfi_reg_num81 = bitcast %union.dw_cfi_oprnd_struct* %dw_cfi_oprnd180 to i64*
  %73 = load i64, i64* %dw_cfi_reg_num81, align 8
  call void (i64, i8*, ...) @dw2_asm_output_data_uleb128(i64 %73, i8* null)
  %74 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi.addr, align 8
  %dw_cfi_oprnd282 = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %74, i32 0, i32 3
  %dw_cfi_offset83 = bitcast %union.dw_cfi_oprnd_struct* %dw_cfi_oprnd282 to i64*
  %75 = load i64, i64* %dw_cfi_offset83, align 8
  call void (i64, i8*, ...) @dw2_asm_output_data_sleb128(i64 %75, i8* null)
  br label %sw.epilog

sw.bb.84:                                         ; preds = %if.else.29, %if.else.29, %if.else.29, %if.else.29
  %76 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi.addr, align 8
  %dw_cfi_oprnd185 = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %76, i32 0, i32 2
  %dw_cfi_reg_num86 = bitcast %union.dw_cfi_oprnd_struct* %dw_cfi_oprnd185 to i64*
  %77 = load i64, i64* %dw_cfi_reg_num86, align 8
  call void (i64, i8*, ...) @dw2_asm_output_data_uleb128(i64 %77, i8* null)
  br label %sw.epilog

sw.bb.87:                                         ; preds = %if.else.29
  %78 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi.addr, align 8
  %dw_cfi_oprnd188 = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %78, i32 0, i32 2
  %dw_cfi_reg_num89 = bitcast %union.dw_cfi_oprnd_struct* %dw_cfi_oprnd188 to i64*
  %79 = load i64, i64* %dw_cfi_reg_num89, align 8
  call void (i64, i8*, ...) @dw2_asm_output_data_uleb128(i64 %79, i8* null)
  %80 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi.addr, align 8
  %dw_cfi_oprnd290 = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %80, i32 0, i32 3
  %dw_cfi_reg_num91 = bitcast %union.dw_cfi_oprnd_struct* %dw_cfi_oprnd290 to i64*
  %81 = load i64, i64* %dw_cfi_reg_num91, align 8
  call void (i64, i8*, ...) @dw2_asm_output_data_uleb128(i64 %81, i8* null)
  br label %sw.epilog

sw.bb.92:                                         ; preds = %if.else.29, %if.else.29
  %82 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi.addr, align 8
  %dw_cfi_oprnd193 = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %82, i32 0, i32 2
  %dw_cfi_offset94 = bitcast %union.dw_cfi_oprnd_struct* %dw_cfi_oprnd193 to i64*
  %83 = load i64, i64* %dw_cfi_offset94, align 8
  call void (i64, i8*, ...) @dw2_asm_output_data_uleb128(i64 %83, i8* null)
  br label %sw.epilog

sw.bb.95:                                         ; preds = %if.else.29
  %84 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi.addr, align 8
  %dw_cfi_oprnd196 = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %84, i32 0, i32 2
  %dw_cfi_offset97 = bitcast %union.dw_cfi_oprnd_struct* %dw_cfi_oprnd196 to i64*
  %85 = load i64, i64* %dw_cfi_offset97, align 8
  call void (i64, i8*, ...) @dw2_asm_output_data_sleb128(i64 %85, i8* null)
  br label %sw.epilog

sw.bb.98:                                         ; preds = %if.else.29
  br label %sw.epilog

sw.bb.99:                                         ; preds = %if.else.29, %if.else.29
  %86 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi.addr, align 8
  call void @output_cfa_loc(%struct.dw_cfi_struct* %86)
  br label %sw.epilog

sw.bb.100:                                        ; preds = %if.else.29
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 1772, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @__FUNCTION__.output_cfi, i32 0, i32 0)) #8
  unreachable

sw.default:                                       ; preds = %if.else.29
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb.99, %sw.bb.98, %sw.bb.95, %sw.bb.92, %sw.bb.87, %sw.bb.84, %sw.bb.79, %sw.bb.74, %sw.bb.67, %sw.bb.60, %sw.bb.53, %sw.bb.47, %if.end
  br label %if.end.101

if.end.101:                                       ; preds = %sw.epilog, %if.then.20
  br label %if.end.102

if.end.102:                                       ; preds = %if.end.101, %if.then.7
  br label %if.end.103

if.end.103:                                       ; preds = %if.end.102, %if.then
  ret void
}

declare i32 @floor_log2_wide(i64) #1

declare void @dw2_asm_output_offset(i32, i8*, i8*, ...) #1

declare %struct.rtx_def* @gen_rtx_fmt_s(i32, i32, i8*) #1

declare void @dw2_asm_output_addr(i32, i8*, i8*, ...) #1

declare void @app_disable() #1

; Function Attrs: nounwind uwtable
define internal i8* @dwarf_cfi_name(i32 %cfi_opc) #0 {
entry:
  %retval = alloca i8*, align 8
  %cfi_opc.addr = alloca i32, align 4
  store i32 %cfi_opc, i32* %cfi_opc.addr, align 4
  %0 = load i32, i32* %cfi_opc.addr, align 4
  switch i32 %0, label %sw.default [
    i32 64, label %sw.bb
    i32 128, label %sw.bb.1
    i32 192, label %sw.bb.2
    i32 0, label %sw.bb.3
    i32 1, label %sw.bb.4
    i32 2, label %sw.bb.5
    i32 3, label %sw.bb.6
    i32 4, label %sw.bb.7
    i32 5, label %sw.bb.8
    i32 6, label %sw.bb.9
    i32 7, label %sw.bb.10
    i32 8, label %sw.bb.11
    i32 9, label %sw.bb.12
    i32 10, label %sw.bb.13
    i32 11, label %sw.bb.14
    i32 12, label %sw.bb.15
    i32 13, label %sw.bb.16
    i32 14, label %sw.bb.17
    i32 15, label %sw.bb.18
    i32 16, label %sw.bb.19
    i32 17, label %sw.bb.20
    i32 18, label %sw.bb.21
    i32 19, label %sw.bb.22
    i32 29, label %sw.bb.23
    i32 45, label %sw.bb.24
    i32 46, label %sw.bb.25
    i32 47, label %sw.bb.26
  ]

sw.bb:                                            ; preds = %entry
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.186, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.1:                                          ; preds = %entry
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.187, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.2:                                          ; preds = %entry
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.188, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.3:                                          ; preds = %entry
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.189, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.4:                                          ; preds = %entry
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.190, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.5:                                          ; preds = %entry
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.191, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.6:                                          ; preds = %entry
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.192, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.7:                                          ; preds = %entry
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.193, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.8:                                          ; preds = %entry
  store i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.194, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.9:                                          ; preds = %entry
  store i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.195, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.10:                                         ; preds = %entry
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.196, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.11:                                         ; preds = %entry
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.197, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.12:                                         ; preds = %entry
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.198, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.13:                                         ; preds = %entry
  store i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.199, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.14:                                         ; preds = %entry
  store i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.200, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.15:                                         ; preds = %entry
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.201, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.16:                                         ; preds = %entry
  store i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.202, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.17:                                         ; preds = %entry
  store i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.203, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.18:                                         ; preds = %entry
  store i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.204, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.19:                                         ; preds = %entry
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.205, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.20:                                         ; preds = %entry
  store i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.206, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.21:                                         ; preds = %entry
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.207, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.22:                                         ; preds = %entry
  store i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.208, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.23:                                         ; preds = %entry
  store i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.209, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.24:                                         ; preds = %entry
  store i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.210, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.25:                                         ; preds = %entry
  store i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.211, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.26:                                         ; preds = %entry
  store i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.212, i32 0, i32 0), i8** %retval
  br label %return

sw.default:                                       ; preds = %entry
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.213, i32 0, i32 0), i8** %retval
  br label %return

return:                                           ; preds = %sw.default, %sw.bb.26, %sw.bb.25, %sw.bb.24, %sw.bb.23, %sw.bb.22, %sw.bb.21, %sw.bb.20, %sw.bb.19, %sw.bb.18, %sw.bb.17, %sw.bb.16, %sw.bb.15, %sw.bb.14, %sw.bb.13, %sw.bb.12, %sw.bb.11, %sw.bb.10, %sw.bb.9, %sw.bb.8, %sw.bb.7, %sw.bb.6, %sw.bb.5, %sw.bb.4, %sw.bb.3, %sw.bb.2, %sw.bb.1, %sw.bb
  %1 = load i8*, i8** %retval
  ret i8* %1
}

; Function Attrs: nounwind uwtable
define internal void @output_cfa_loc(%struct.dw_cfi_struct* %cfi) #0 {
entry:
  %cfi.addr = alloca %struct.dw_cfi_struct*, align 8
  %loc = alloca %struct.dw_loc_descr_struct*, align 8
  %size = alloca i64, align 8
  store %struct.dw_cfi_struct* %cfi, %struct.dw_cfi_struct** %cfi.addr, align 8
  %0 = load %struct.dw_cfi_struct*, %struct.dw_cfi_struct** %cfi.addr, align 8
  %dw_cfi_oprnd1 = getelementptr inbounds %struct.dw_cfi_struct, %struct.dw_cfi_struct* %0, i32 0, i32 2
  %dw_cfi_loc = bitcast %union.dw_cfi_oprnd_struct* %dw_cfi_oprnd1 to %struct.dw_loc_descr_struct**
  %1 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %dw_cfi_loc, align 8
  store %struct.dw_loc_descr_struct* %1, %struct.dw_loc_descr_struct** %loc, align 8
  %2 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %loc, align 8
  %call = call i64 @size_of_locs(%struct.dw_loc_descr_struct* %2)
  store i64 %call, i64* %size, align 8
  %3 = load i64, i64* %size, align 8
  call void (i64, i8*, ...) @dw2_asm_output_data_uleb128(i64 %3, i8* null)
  %4 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %loc, align 8
  call void @output_loc_sequence(%struct.dw_loc_descr_struct* %4)
  ret void
}

; Function Attrs: nounwind uwtable
define internal i64 @size_of_locs(%struct.dw_loc_descr_struct* %loc) #0 {
entry:
  %loc.addr = alloca %struct.dw_loc_descr_struct*, align 8
  %size = alloca i64, align 8
  store %struct.dw_loc_descr_struct* %loc, %struct.dw_loc_descr_struct** %loc.addr, align 8
  store i64 0, i64* %size, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %loc.addr, align 8
  %cmp = icmp ne %struct.dw_loc_descr_struct* %0, null
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i64, i64* %size, align 8
  %conv = trunc i64 %1 to i32
  %2 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %loc.addr, align 8
  %dw_loc_addr = getelementptr inbounds %struct.dw_loc_descr_struct, %struct.dw_loc_descr_struct* %2, i32 0, i32 4
  store i32 %conv, i32* %dw_loc_addr, align 4
  %3 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %loc.addr, align 8
  %call = call i64 @size_of_loc_descr(%struct.dw_loc_descr_struct* %3)
  %4 = load i64, i64* %size, align 8
  %add = add i64 %4, %call
  store i64 %add, i64* %size, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %loc.addr, align 8
  %dw_loc_next = getelementptr inbounds %struct.dw_loc_descr_struct, %struct.dw_loc_descr_struct* %5, i32 0, i32 0
  %6 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %dw_loc_next, align 8
  store %struct.dw_loc_descr_struct* %6, %struct.dw_loc_descr_struct** %loc.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %7 = load i64, i64* %size, align 8
  ret i64 %7
}

; Function Attrs: nounwind uwtable
define internal void @output_loc_sequence(%struct.dw_loc_descr_struct* %loc) #0 {
entry:
  %loc.addr = alloca %struct.dw_loc_descr_struct*, align 8
  store %struct.dw_loc_descr_struct* %loc, %struct.dw_loc_descr_struct** %loc.addr, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %loc.addr, align 8
  %cmp = icmp ne %struct.dw_loc_descr_struct* %0, null
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %loc.addr, align 8
  %dw_loc_opc = getelementptr inbounds %struct.dw_loc_descr_struct, %struct.dw_loc_descr_struct* %1, i32 0, i32 1
  %2 = load i32, i32* %dw_loc_opc, align 4
  %conv = zext i32 %2 to i64
  %3 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %loc.addr, align 8
  %dw_loc_opc1 = getelementptr inbounds %struct.dw_loc_descr_struct, %struct.dw_loc_descr_struct* %3, i32 0, i32 1
  %4 = load i32, i32* %dw_loc_opc1, align 4
  %call = call i8* @dwarf_stack_op_name(i32 %4)
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 1, i64 %conv, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.185, i32 0, i32 0), i8* %call)
  %5 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %loc.addr, align 8
  call void @output_loc_operands(%struct.dw_loc_descr_struct* %5)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %loc.addr, align 8
  %dw_loc_next = getelementptr inbounds %struct.dw_loc_descr_struct, %struct.dw_loc_descr_struct* %6, i32 0, i32 0
  %7 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %dw_loc_next, align 8
  store %struct.dw_loc_descr_struct* %7, %struct.dw_loc_descr_struct** %loc.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define internal i64 @size_of_loc_descr(%struct.dw_loc_descr_struct* %loc) #0 {
entry:
  %loc.addr = alloca %struct.dw_loc_descr_struct*, align 8
  %size = alloca i64, align 8
  store %struct.dw_loc_descr_struct* %loc, %struct.dw_loc_descr_struct** %loc.addr, align 8
  store i64 1, i64* %size, align 8
  %0 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %loc.addr, align 8
  %dw_loc_opc = getelementptr inbounds %struct.dw_loc_descr_struct, %struct.dw_loc_descr_struct* %0, i32 0, i32 1
  %1 = load i32, i32* %dw_loc_opc, align 4
  switch i32 %1, label %sw.default [
    i32 3, label %sw.bb
    i32 8, label %sw.bb.1
    i32 9, label %sw.bb.1
    i32 10, label %sw.bb.3
    i32 11, label %sw.bb.3
    i32 12, label %sw.bb.5
    i32 13, label %sw.bb.5
    i32 14, label %sw.bb.7
    i32 15, label %sw.bb.7
    i32 16, label %sw.bb.9
    i32 17, label %sw.bb.12
    i32 21, label %sw.bb.18
    i32 35, label %sw.bb.20
    i32 47, label %sw.bb.27
    i32 40, label %sw.bb.27
    i32 112, label %sw.bb.29
    i32 113, label %sw.bb.29
    i32 114, label %sw.bb.29
    i32 115, label %sw.bb.29
    i32 116, label %sw.bb.29
    i32 117, label %sw.bb.29
    i32 118, label %sw.bb.29
    i32 119, label %sw.bb.29
    i32 120, label %sw.bb.29
    i32 121, label %sw.bb.29
    i32 122, label %sw.bb.29
    i32 123, label %sw.bb.29
    i32 124, label %sw.bb.29
    i32 125, label %sw.bb.29
    i32 126, label %sw.bb.29
    i32 127, label %sw.bb.29
    i32 128, label %sw.bb.29
    i32 129, label %sw.bb.29
    i32 130, label %sw.bb.29
    i32 131, label %sw.bb.29
    i32 132, label %sw.bb.29
    i32 133, label %sw.bb.29
    i32 134, label %sw.bb.29
    i32 135, label %sw.bb.29
    i32 136, label %sw.bb.29
    i32 137, label %sw.bb.29
    i32 138, label %sw.bb.29
    i32 139, label %sw.bb.29
    i32 140, label %sw.bb.29
    i32 141, label %sw.bb.29
    i32 142, label %sw.bb.29
    i32 143, label %sw.bb.29
    i32 144, label %sw.bb.36
    i32 145, label %sw.bb.43
    i32 146, label %sw.bb.50
    i32 147, label %sw.bb.62
    i32 148, label %sw.bb.69
    i32 149, label %sw.bb.69
  ]

sw.bb:                                            ; preds = %entry
  %2 = load i32, i32* @target_flags, align 4
  %and = and i32 %2, 33554432
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, i32 64, i32 32
  %div = sdiv i32 %cond, 8
  %conv = sext i32 %div to i64
  %3 = load i64, i64* %size, align 8
  %add = add i64 %3, %conv
  store i64 %add, i64* %size, align 8
  br label %sw.epilog

sw.bb.1:                                          ; preds = %entry, %entry
  %4 = load i64, i64* %size, align 8
  %add2 = add i64 %4, 1
  store i64 %add2, i64* %size, align 8
  br label %sw.epilog

sw.bb.3:                                          ; preds = %entry, %entry
  %5 = load i64, i64* %size, align 8
  %add4 = add i64 %5, 2
  store i64 %add4, i64* %size, align 8
  br label %sw.epilog

sw.bb.5:                                          ; preds = %entry, %entry
  %6 = load i64, i64* %size, align 8
  %add6 = add i64 %6, 4
  store i64 %add6, i64* %size, align 8
  br label %sw.epilog

sw.bb.7:                                          ; preds = %entry, %entry
  %7 = load i64, i64* %size, align 8
  %add8 = add i64 %7, 8
  store i64 %add8, i64* %size, align 8
  br label %sw.epilog

sw.bb.9:                                          ; preds = %entry
  %8 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %loc.addr, align 8
  %dw_loc_oprnd1 = getelementptr inbounds %struct.dw_loc_descr_struct, %struct.dw_loc_descr_struct* %8, i32 0, i32 2
  %v = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_loc_oprnd1, i32 0, i32 1
  %val_unsigned = bitcast %union.anon.3* %v to i64*
  %9 = load i64, i64* %val_unsigned, align 8
  %call = call i32 @size_of_uleb128(i64 %9)
  %conv10 = sext i32 %call to i64
  %10 = load i64, i64* %size, align 8
  %add11 = add i64 %10, %conv10
  store i64 %add11, i64* %size, align 8
  br label %sw.epilog

sw.bb.12:                                         ; preds = %entry
  %11 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %loc.addr, align 8
  %dw_loc_oprnd113 = getelementptr inbounds %struct.dw_loc_descr_struct, %struct.dw_loc_descr_struct* %11, i32 0, i32 2
  %v14 = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_loc_oprnd113, i32 0, i32 1
  %val_int = bitcast %union.anon.3* %v14 to i64*
  %12 = load i64, i64* %val_int, align 8
  %call15 = call i32 @size_of_sleb128(i64 %12)
  %conv16 = sext i32 %call15 to i64
  %13 = load i64, i64* %size, align 8
  %add17 = add i64 %13, %conv16
  store i64 %add17, i64* %size, align 8
  br label %sw.epilog

sw.bb.18:                                         ; preds = %entry
  %14 = load i64, i64* %size, align 8
  %add19 = add i64 %14, 1
  store i64 %add19, i64* %size, align 8
  br label %sw.epilog

sw.bb.20:                                         ; preds = %entry
  %15 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %loc.addr, align 8
  %dw_loc_oprnd121 = getelementptr inbounds %struct.dw_loc_descr_struct, %struct.dw_loc_descr_struct* %15, i32 0, i32 2
  %v22 = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_loc_oprnd121, i32 0, i32 1
  %val_unsigned23 = bitcast %union.anon.3* %v22 to i64*
  %16 = load i64, i64* %val_unsigned23, align 8
  %call24 = call i32 @size_of_uleb128(i64 %16)
  %conv25 = sext i32 %call24 to i64
  %17 = load i64, i64* %size, align 8
  %add26 = add i64 %17, %conv25
  store i64 %add26, i64* %size, align 8
  br label %sw.epilog

sw.bb.27:                                         ; preds = %entry, %entry
  %18 = load i64, i64* %size, align 8
  %add28 = add i64 %18, 2
  store i64 %add28, i64* %size, align 8
  br label %sw.epilog

sw.bb.29:                                         ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  %19 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %loc.addr, align 8
  %dw_loc_oprnd130 = getelementptr inbounds %struct.dw_loc_descr_struct, %struct.dw_loc_descr_struct* %19, i32 0, i32 2
  %v31 = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_loc_oprnd130, i32 0, i32 1
  %val_int32 = bitcast %union.anon.3* %v31 to i64*
  %20 = load i64, i64* %val_int32, align 8
  %call33 = call i32 @size_of_sleb128(i64 %20)
  %conv34 = sext i32 %call33 to i64
  %21 = load i64, i64* %size, align 8
  %add35 = add i64 %21, %conv34
  store i64 %add35, i64* %size, align 8
  br label %sw.epilog

sw.bb.36:                                         ; preds = %entry
  %22 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %loc.addr, align 8
  %dw_loc_oprnd137 = getelementptr inbounds %struct.dw_loc_descr_struct, %struct.dw_loc_descr_struct* %22, i32 0, i32 2
  %v38 = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_loc_oprnd137, i32 0, i32 1
  %val_unsigned39 = bitcast %union.anon.3* %v38 to i64*
  %23 = load i64, i64* %val_unsigned39, align 8
  %call40 = call i32 @size_of_uleb128(i64 %23)
  %conv41 = sext i32 %call40 to i64
  %24 = load i64, i64* %size, align 8
  %add42 = add i64 %24, %conv41
  store i64 %add42, i64* %size, align 8
  br label %sw.epilog

sw.bb.43:                                         ; preds = %entry
  %25 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %loc.addr, align 8
  %dw_loc_oprnd144 = getelementptr inbounds %struct.dw_loc_descr_struct, %struct.dw_loc_descr_struct* %25, i32 0, i32 2
  %v45 = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_loc_oprnd144, i32 0, i32 1
  %val_int46 = bitcast %union.anon.3* %v45 to i64*
  %26 = load i64, i64* %val_int46, align 8
  %call47 = call i32 @size_of_sleb128(i64 %26)
  %conv48 = sext i32 %call47 to i64
  %27 = load i64, i64* %size, align 8
  %add49 = add i64 %27, %conv48
  store i64 %add49, i64* %size, align 8
  br label %sw.epilog

sw.bb.50:                                         ; preds = %entry
  %28 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %loc.addr, align 8
  %dw_loc_oprnd151 = getelementptr inbounds %struct.dw_loc_descr_struct, %struct.dw_loc_descr_struct* %28, i32 0, i32 2
  %v52 = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_loc_oprnd151, i32 0, i32 1
  %val_unsigned53 = bitcast %union.anon.3* %v52 to i64*
  %29 = load i64, i64* %val_unsigned53, align 8
  %call54 = call i32 @size_of_uleb128(i64 %29)
  %conv55 = sext i32 %call54 to i64
  %30 = load i64, i64* %size, align 8
  %add56 = add i64 %30, %conv55
  store i64 %add56, i64* %size, align 8
  %31 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %loc.addr, align 8
  %dw_loc_oprnd2 = getelementptr inbounds %struct.dw_loc_descr_struct, %struct.dw_loc_descr_struct* %31, i32 0, i32 3
  %v57 = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_loc_oprnd2, i32 0, i32 1
  %val_int58 = bitcast %union.anon.3* %v57 to i64*
  %32 = load i64, i64* %val_int58, align 8
  %call59 = call i32 @size_of_sleb128(i64 %32)
  %conv60 = sext i32 %call59 to i64
  %33 = load i64, i64* %size, align 8
  %add61 = add i64 %33, %conv60
  store i64 %add61, i64* %size, align 8
  br label %sw.epilog

sw.bb.62:                                         ; preds = %entry
  %34 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %loc.addr, align 8
  %dw_loc_oprnd163 = getelementptr inbounds %struct.dw_loc_descr_struct, %struct.dw_loc_descr_struct* %34, i32 0, i32 2
  %v64 = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_loc_oprnd163, i32 0, i32 1
  %val_unsigned65 = bitcast %union.anon.3* %v64 to i64*
  %35 = load i64, i64* %val_unsigned65, align 8
  %call66 = call i32 @size_of_uleb128(i64 %35)
  %conv67 = sext i32 %call66 to i64
  %36 = load i64, i64* %size, align 8
  %add68 = add i64 %36, %conv67
  store i64 %add68, i64* %size, align 8
  br label %sw.epilog

sw.bb.69:                                         ; preds = %entry, %entry
  %37 = load i64, i64* %size, align 8
  %add70 = add i64 %37, 1
  store i64 %add70, i64* %size, align 8
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb.69, %sw.bb.62, %sw.bb.50, %sw.bb.43, %sw.bb.36, %sw.bb.29, %sw.bb.27, %sw.bb.20, %sw.bb.18, %sw.bb.12, %sw.bb.9, %sw.bb.7, %sw.bb.5, %sw.bb.3, %sw.bb.1, %sw.bb
  %38 = load i64, i64* %size, align 8
  ret i64 %38
}

; Function Attrs: nounwind uwtable
define internal void @output_loc_operands(%struct.dw_loc_descr_struct* %loc) #0 {
entry:
  %loc.addr = alloca %struct.dw_loc_descr_struct*, align 8
  %val1 = alloca %struct.dw_val_struct*, align 8
  %val2 = alloca %struct.dw_val_struct*, align 8
  %offset = alloca i32, align 4
  store %struct.dw_loc_descr_struct* %loc, %struct.dw_loc_descr_struct** %loc.addr, align 8
  %0 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %loc.addr, align 8
  %dw_loc_oprnd1 = getelementptr inbounds %struct.dw_loc_descr_struct, %struct.dw_loc_descr_struct* %0, i32 0, i32 2
  store %struct.dw_val_struct* %dw_loc_oprnd1, %struct.dw_val_struct** %val1, align 8
  %1 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %loc.addr, align 8
  %dw_loc_oprnd2 = getelementptr inbounds %struct.dw_loc_descr_struct, %struct.dw_loc_descr_struct* %1, i32 0, i32 3
  store %struct.dw_val_struct* %dw_loc_oprnd2, %struct.dw_val_struct** %val2, align 8
  %2 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %loc.addr, align 8
  %dw_loc_opc = getelementptr inbounds %struct.dw_loc_descr_struct, %struct.dw_loc_descr_struct* %2, i32 0, i32 1
  %3 = load i32, i32* %dw_loc_opc, align 4
  switch i32 %3, label %sw.default [
    i32 3, label %sw.bb
    i32 10, label %sw.bb.1
    i32 11, label %sw.bb.1
    i32 12, label %sw.bb.3
    i32 13, label %sw.bb.3
    i32 14, label %sw.bb.6
    i32 15, label %sw.bb.6
    i32 47, label %sw.bb.9
    i32 40, label %sw.bb.9
    i32 8, label %sw.bb.12
    i32 9, label %sw.bb.12
    i32 16, label %sw.bb.15
    i32 17, label %sw.bb.17
    i32 21, label %sw.bb.20
    i32 35, label %sw.bb.23
    i32 112, label %sw.bb.26
    i32 113, label %sw.bb.26
    i32 114, label %sw.bb.26
    i32 115, label %sw.bb.26
    i32 116, label %sw.bb.26
    i32 117, label %sw.bb.26
    i32 118, label %sw.bb.26
    i32 119, label %sw.bb.26
    i32 120, label %sw.bb.26
    i32 121, label %sw.bb.26
    i32 122, label %sw.bb.26
    i32 123, label %sw.bb.26
    i32 124, label %sw.bb.26
    i32 125, label %sw.bb.26
    i32 126, label %sw.bb.26
    i32 127, label %sw.bb.26
    i32 128, label %sw.bb.26
    i32 129, label %sw.bb.26
    i32 130, label %sw.bb.26
    i32 131, label %sw.bb.26
    i32 132, label %sw.bb.26
    i32 133, label %sw.bb.26
    i32 134, label %sw.bb.26
    i32 135, label %sw.bb.26
    i32 136, label %sw.bb.26
    i32 137, label %sw.bb.26
    i32 138, label %sw.bb.26
    i32 139, label %sw.bb.26
    i32 140, label %sw.bb.26
    i32 141, label %sw.bb.26
    i32 142, label %sw.bb.26
    i32 143, label %sw.bb.26
    i32 144, label %sw.bb.29
    i32 145, label %sw.bb.32
    i32 146, label %sw.bb.35
    i32 147, label %sw.bb.40
    i32 148, label %sw.bb.43
    i32 149, label %sw.bb.43
  ]

sw.bb:                                            ; preds = %entry
  %4 = load i32, i32* @target_flags, align 4
  %and = and i32 %4, 33554432
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, i32 64, i32 32
  %div = sdiv i32 %cond, 8
  %5 = load %struct.dw_val_struct*, %struct.dw_val_struct** %val1, align 8
  %v = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %5, i32 0, i32 1
  %val_addr = bitcast %union.anon.3* %v to %struct.rtx_def**
  %6 = load %struct.rtx_def*, %struct.rtx_def** %val_addr, align 8
  call void (i32, %struct.rtx_def*, i8*, ...) @dw2_asm_output_addr_rtx(i32 %div, %struct.rtx_def* %6, i8* null)
  br label %sw.epilog

sw.bb.1:                                          ; preds = %entry, %entry
  %7 = load %struct.dw_val_struct*, %struct.dw_val_struct** %val1, align 8
  %v2 = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %7, i32 0, i32 1
  %val_int = bitcast %union.anon.3* %v2 to i64*
  %8 = load i64, i64* %val_int, align 8
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 2, i64 %8, i8* null)
  br label %sw.epilog

sw.bb.3:                                          ; preds = %entry, %entry
  %9 = load %struct.dw_val_struct*, %struct.dw_val_struct** %val1, align 8
  %v4 = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %9, i32 0, i32 1
  %val_int5 = bitcast %union.anon.3* %v4 to i64*
  %10 = load i64, i64* %val_int5, align 8
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 4, i64 %10, i8* null)
  br label %sw.epilog

sw.bb.6:                                          ; preds = %entry, %entry
  %11 = load %struct.dw_val_struct*, %struct.dw_val_struct** %val1, align 8
  %v7 = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %11, i32 0, i32 1
  %val_int8 = bitcast %union.anon.3* %v7 to i64*
  %12 = load i64, i64* %val_int8, align 8
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 8, i64 %12, i8* null)
  br label %sw.epilog

sw.bb.9:                                          ; preds = %entry, %entry
  %13 = load %struct.dw_val_struct*, %struct.dw_val_struct** %val1, align 8
  %val_class = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %13, i32 0, i32 0
  %14 = load i32, i32* %val_class, align 4
  %cmp = icmp eq i32 %14, 2
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %sw.bb.9
  %15 = load %struct.dw_val_struct*, %struct.dw_val_struct** %val1, align 8
  %v10 = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %15, i32 0, i32 1
  %val_loc = bitcast %union.anon.3* %v10 to %struct.dw_loc_descr_struct**
  %16 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %val_loc, align 8
  %dw_loc_addr = getelementptr inbounds %struct.dw_loc_descr_struct, %struct.dw_loc_descr_struct* %16, i32 0, i32 4
  %17 = load i32, i32* %dw_loc_addr, align 4
  %18 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %loc.addr, align 8
  %dw_loc_addr11 = getelementptr inbounds %struct.dw_loc_descr_struct, %struct.dw_loc_descr_struct* %18, i32 0, i32 4
  %19 = load i32, i32* %dw_loc_addr11, align 4
  %add = add nsw i32 %19, 3
  %sub = sub nsw i32 %17, %add
  store i32 %sub, i32* %offset, align 4
  br label %if.end

if.else:                                          ; preds = %sw.bb.9
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 2789, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__FUNCTION__.output_loc_operands, i32 0, i32 0)) #8
  unreachable

if.end:                                           ; preds = %if.then
  %20 = load i32, i32* %offset, align 4
  %conv = sext i32 %20 to i64
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 2, i64 %conv, i8* null)
  br label %sw.epilog

sw.bb.12:                                         ; preds = %entry, %entry
  %21 = load %struct.dw_val_struct*, %struct.dw_val_struct** %val1, align 8
  %v13 = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %21, i32 0, i32 1
  %val_int14 = bitcast %union.anon.3* %v13 to i64*
  %22 = load i64, i64* %val_int14, align 8
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 1, i64 %22, i8* null)
  br label %sw.epilog

sw.bb.15:                                         ; preds = %entry
  %23 = load %struct.dw_val_struct*, %struct.dw_val_struct** %val1, align 8
  %v16 = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %23, i32 0, i32 1
  %val_unsigned = bitcast %union.anon.3* %v16 to i64*
  %24 = load i64, i64* %val_unsigned, align 8
  call void (i64, i8*, ...) @dw2_asm_output_data_uleb128(i64 %24, i8* null)
  br label %sw.epilog

sw.bb.17:                                         ; preds = %entry
  %25 = load %struct.dw_val_struct*, %struct.dw_val_struct** %val1, align 8
  %v18 = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %25, i32 0, i32 1
  %val_int19 = bitcast %union.anon.3* %v18 to i64*
  %26 = load i64, i64* %val_int19, align 8
  call void (i64, i8*, ...) @dw2_asm_output_data_sleb128(i64 %26, i8* null)
  br label %sw.epilog

sw.bb.20:                                         ; preds = %entry
  %27 = load %struct.dw_val_struct*, %struct.dw_val_struct** %val1, align 8
  %v21 = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %27, i32 0, i32 1
  %val_int22 = bitcast %union.anon.3* %v21 to i64*
  %28 = load i64, i64* %val_int22, align 8
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 1, i64 %28, i8* null)
  br label %sw.epilog

sw.bb.23:                                         ; preds = %entry
  %29 = load %struct.dw_val_struct*, %struct.dw_val_struct** %val1, align 8
  %v24 = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %29, i32 0, i32 1
  %val_unsigned25 = bitcast %union.anon.3* %v24 to i64*
  %30 = load i64, i64* %val_unsigned25, align 8
  call void (i64, i8*, ...) @dw2_asm_output_data_uleb128(i64 %30, i8* null)
  br label %sw.epilog

sw.bb.26:                                         ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  %31 = load %struct.dw_val_struct*, %struct.dw_val_struct** %val1, align 8
  %v27 = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %31, i32 0, i32 1
  %val_int28 = bitcast %union.anon.3* %v27 to i64*
  %32 = load i64, i64* %val_int28, align 8
  call void (i64, i8*, ...) @dw2_asm_output_data_sleb128(i64 %32, i8* null)
  br label %sw.epilog

sw.bb.29:                                         ; preds = %entry
  %33 = load %struct.dw_val_struct*, %struct.dw_val_struct** %val1, align 8
  %v30 = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %33, i32 0, i32 1
  %val_unsigned31 = bitcast %union.anon.3* %v30 to i64*
  %34 = load i64, i64* %val_unsigned31, align 8
  call void (i64, i8*, ...) @dw2_asm_output_data_uleb128(i64 %34, i8* null)
  br label %sw.epilog

sw.bb.32:                                         ; preds = %entry
  %35 = load %struct.dw_val_struct*, %struct.dw_val_struct** %val1, align 8
  %v33 = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %35, i32 0, i32 1
  %val_int34 = bitcast %union.anon.3* %v33 to i64*
  %36 = load i64, i64* %val_int34, align 8
  call void (i64, i8*, ...) @dw2_asm_output_data_sleb128(i64 %36, i8* null)
  br label %sw.epilog

sw.bb.35:                                         ; preds = %entry
  %37 = load %struct.dw_val_struct*, %struct.dw_val_struct** %val1, align 8
  %v36 = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %37, i32 0, i32 1
  %val_unsigned37 = bitcast %union.anon.3* %v36 to i64*
  %38 = load i64, i64* %val_unsigned37, align 8
  call void (i64, i8*, ...) @dw2_asm_output_data_uleb128(i64 %38, i8* null)
  %39 = load %struct.dw_val_struct*, %struct.dw_val_struct** %val2, align 8
  %v38 = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %39, i32 0, i32 1
  %val_int39 = bitcast %union.anon.3* %v38 to i64*
  %40 = load i64, i64* %val_int39, align 8
  call void (i64, i8*, ...) @dw2_asm_output_data_sleb128(i64 %40, i8* null)
  br label %sw.epilog

sw.bb.40:                                         ; preds = %entry
  %41 = load %struct.dw_val_struct*, %struct.dw_val_struct** %val1, align 8
  %v41 = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %41, i32 0, i32 1
  %val_unsigned42 = bitcast %union.anon.3* %v41 to i64*
  %42 = load i64, i64* %val_unsigned42, align 8
  call void (i64, i8*, ...) @dw2_asm_output_data_uleb128(i64 %42, i8* null)
  br label %sw.epilog

sw.bb.43:                                         ; preds = %entry, %entry
  %43 = load %struct.dw_val_struct*, %struct.dw_val_struct** %val1, align 8
  %v44 = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %43, i32 0, i32 1
  %val_int45 = bitcast %union.anon.3* %v44 to i64*
  %44 = load i64, i64* %val_int45, align 8
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 1, i64 %44, i8* null)
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb.43, %sw.bb.40, %sw.bb.35, %sw.bb.32, %sw.bb.29, %sw.bb.26, %sw.bb.23, %sw.bb.20, %sw.bb.17, %sw.bb.15, %sw.bb.12, %if.end, %sw.bb.6, %sw.bb.3, %sw.bb.1, %sw.bb
  ret void
}

declare void @dw2_asm_output_addr_rtx(i32, %struct.rtx_def*, i8*, ...) #1

; Function Attrs: inlinehint nounwind uwtable
define internal void @print_spaces(%struct._IO_FILE* %outfile) #3 {
entry:
  %outfile.addr = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %outfile, %struct._IO_FILE** %outfile.addr, align 8
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8
  %1 = load i32, i32* @print_indent, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.235, i32 0, i32 0), i32 %1, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.155, i32 0, i32 0))
  ret void
}

; Function Attrs: nounwind uwtable
define internal i8* @dwarf_tag_name(i32 %tag) #0 {
entry:
  %retval = alloca i8*, align 8
  %tag.addr = alloca i32, align 4
  store i32 %tag, i32* %tag.addr, align 4
  %0 = load i32, i32* %tag.addr, align 4
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb.1
    i32 2, label %sw.bb.2
    i32 3, label %sw.bb.3
    i32 4, label %sw.bb.4
    i32 5, label %sw.bb.5
    i32 8, label %sw.bb.6
    i32 10, label %sw.bb.7
    i32 11, label %sw.bb.8
    i32 13, label %sw.bb.9
    i32 15, label %sw.bb.10
    i32 16, label %sw.bb.11
    i32 17, label %sw.bb.12
    i32 18, label %sw.bb.13
    i32 19, label %sw.bb.14
    i32 21, label %sw.bb.15
    i32 22, label %sw.bb.16
    i32 23, label %sw.bb.17
    i32 24, label %sw.bb.18
    i32 25, label %sw.bb.19
    i32 26, label %sw.bb.20
    i32 27, label %sw.bb.21
    i32 28, label %sw.bb.22
    i32 29, label %sw.bb.23
    i32 30, label %sw.bb.24
    i32 31, label %sw.bb.25
    i32 32, label %sw.bb.26
    i32 33, label %sw.bb.27
    i32 34, label %sw.bb.28
    i32 35, label %sw.bb.29
    i32 36, label %sw.bb.30
    i32 37, label %sw.bb.31
    i32 38, label %sw.bb.32
    i32 39, label %sw.bb.33
    i32 40, label %sw.bb.34
    i32 41, label %sw.bb.35
    i32 42, label %sw.bb.36
    i32 43, label %sw.bb.37
    i32 44, label %sw.bb.38
    i32 45, label %sw.bb.39
    i32 46, label %sw.bb.40
    i32 47, label %sw.bb.41
    i32 48, label %sw.bb.42
    i32 49, label %sw.bb.43
    i32 50, label %sw.bb.44
    i32 51, label %sw.bb.45
    i32 52, label %sw.bb.46
    i32 53, label %sw.bb.47
    i32 16513, label %sw.bb.48
    i32 16641, label %sw.bb.49
    i32 16642, label %sw.bb.50
    i32 16643, label %sw.bb.51
    i32 16644, label %sw.bb.52
    i32 16645, label %sw.bb.53
  ]

sw.bb:                                            ; preds = %entry
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.236, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.1:                                          ; preds = %entry
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.237, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.2:                                          ; preds = %entry
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.238, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.3:                                          ; preds = %entry
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.239, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.4:                                          ; preds = %entry
  store i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.240, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.5:                                          ; preds = %entry
  store i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.241, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.6:                                          ; preds = %entry
  store i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.242, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.7:                                          ; preds = %entry
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.243, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.8:                                          ; preds = %entry
  store i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.244, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.9:                                          ; preds = %entry
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.245, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.10:                                         ; preds = %entry
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.246, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.11:                                         ; preds = %entry
  store i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.247, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.12:                                         ; preds = %entry
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.248, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.13:                                         ; preds = %entry
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.249, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.14:                                         ; preds = %entry
  store i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.250, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.15:                                         ; preds = %entry
  store i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.251, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.16:                                         ; preds = %entry
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.252, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.17:                                         ; preds = %entry
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.253, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.18:                                         ; preds = %entry
  store i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.254, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.19:                                         ; preds = %entry
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.255, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.20:                                         ; preds = %entry
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.256, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.21:                                         ; preds = %entry
  store i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.257, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.22:                                         ; preds = %entry
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.258, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.23:                                         ; preds = %entry
  store i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.259, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.24:                                         ; preds = %entry
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.260, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.25:                                         ; preds = %entry
  store i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.261, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.26:                                         ; preds = %entry
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.262, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.27:                                         ; preds = %entry
  store i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.263, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.28:                                         ; preds = %entry
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.264, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.29:                                         ; preds = %entry
  store i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.265, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.30:                                         ; preds = %entry
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.266, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.31:                                         ; preds = %entry
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.267, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.32:                                         ; preds = %entry
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.268, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.33:                                         ; preds = %entry
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.269, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.34:                                         ; preds = %entry
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.270, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.35:                                         ; preds = %entry
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.271, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.36:                                         ; preds = %entry
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.272, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.37:                                         ; preds = %entry
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.273, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.38:                                         ; preds = %entry
  store i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.274, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.39:                                         ; preds = %entry
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.275, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.40:                                         ; preds = %entry
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.276, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.41:                                         ; preds = %entry
  store i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.277, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.42:                                         ; preds = %entry
  store i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.278, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.43:                                         ; preds = %entry
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.279, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.44:                                         ; preds = %entry
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.280, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.45:                                         ; preds = %entry
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.281, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.46:                                         ; preds = %entry
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.282, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.47:                                         ; preds = %entry
  store i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.283, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.48:                                         ; preds = %entry
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.284, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.49:                                         ; preds = %entry
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.285, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.50:                                         ; preds = %entry
  store i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.286, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.51:                                         ; preds = %entry
  store i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.287, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.52:                                         ; preds = %entry
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.288, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.53:                                         ; preds = %entry
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.289, i32 0, i32 0), i8** %retval
  br label %return

sw.default:                                       ; preds = %entry
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.290, i32 0, i32 0), i8** %retval
  br label %return

return:                                           ; preds = %sw.default, %sw.bb.53, %sw.bb.52, %sw.bb.51, %sw.bb.50, %sw.bb.49, %sw.bb.48, %sw.bb.47, %sw.bb.46, %sw.bb.45, %sw.bb.44, %sw.bb.43, %sw.bb.42, %sw.bb.41, %sw.bb.40, %sw.bb.39, %sw.bb.38, %sw.bb.37, %sw.bb.36, %sw.bb.35, %sw.bb.34, %sw.bb.33, %sw.bb.32, %sw.bb.31, %sw.bb.30, %sw.bb.29, %sw.bb.28, %sw.bb.27, %sw.bb.26, %sw.bb.25, %sw.bb.24, %sw.bb.23, %sw.bb.22, %sw.bb.21, %sw.bb.20, %sw.bb.19, %sw.bb.18, %sw.bb.17, %sw.bb.16, %sw.bb.15, %sw.bb.14, %sw.bb.13, %sw.bb.12, %sw.bb.11, %sw.bb.10, %sw.bb.9, %sw.bb.8, %sw.bb.7, %sw.bb.6, %sw.bb.5, %sw.bb.4, %sw.bb.3, %sw.bb.2, %sw.bb.1, %sw.bb
  %1 = load i8*, i8** %retval
  ret i8* %1
}

; Function Attrs: nounwind uwtable
define internal i8* @dwarf_attr_name(i32 %attr) #0 {
entry:
  %retval = alloca i8*, align 8
  %attr.addr = alloca i32, align 4
  store i32 %attr, i32* %attr.addr, align 4
  %0 = load i32, i32* %attr.addr, align 4
  switch i32 %0, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb.1
    i32 3, label %sw.bb.2
    i32 9, label %sw.bb.3
    i32 10, label %sw.bb.4
    i32 11, label %sw.bb.5
    i32 12, label %sw.bb.6
    i32 13, label %sw.bb.7
    i32 15, label %sw.bb.8
    i32 16, label %sw.bb.9
    i32 17, label %sw.bb.10
    i32 18, label %sw.bb.11
    i32 19, label %sw.bb.12
    i32 20, label %sw.bb.13
    i32 21, label %sw.bb.14
    i32 22, label %sw.bb.15
    i32 23, label %sw.bb.16
    i32 24, label %sw.bb.17
    i32 25, label %sw.bb.18
    i32 26, label %sw.bb.19
    i32 27, label %sw.bb.20
    i32 28, label %sw.bb.21
    i32 29, label %sw.bb.22
    i32 30, label %sw.bb.23
    i32 32, label %sw.bb.24
    i32 33, label %sw.bb.25
    i32 34, label %sw.bb.26
    i32 37, label %sw.bb.27
    i32 39, label %sw.bb.28
    i32 42, label %sw.bb.29
    i32 44, label %sw.bb.30
    i32 46, label %sw.bb.31
    i32 47, label %sw.bb.32
    i32 49, label %sw.bb.33
    i32 50, label %sw.bb.34
    i32 51, label %sw.bb.35
    i32 52, label %sw.bb.36
    i32 53, label %sw.bb.37
    i32 54, label %sw.bb.38
    i32 55, label %sw.bb.39
    i32 56, label %sw.bb.40
    i32 57, label %sw.bb.41
    i32 58, label %sw.bb.42
    i32 59, label %sw.bb.43
    i32 60, label %sw.bb.44
    i32 61, label %sw.bb.45
    i32 62, label %sw.bb.46
    i32 63, label %sw.bb.47
    i32 64, label %sw.bb.48
    i32 65, label %sw.bb.49
    i32 66, label %sw.bb.50
    i32 67, label %sw.bb.51
    i32 68, label %sw.bb.52
    i32 69, label %sw.bb.53
    i32 70, label %sw.bb.54
    i32 71, label %sw.bb.55
    i32 72, label %sw.bb.56
    i32 73, label %sw.bb.57
    i32 74, label %sw.bb.58
    i32 75, label %sw.bb.59
    i32 76, label %sw.bb.60
    i32 77, label %sw.bb.61
    i32 78, label %sw.bb.62
    i32 79, label %sw.bb.63
    i32 80, label %sw.bb.64
    i32 81, label %sw.bb.65
    i32 82, label %sw.bb.66
    i32 83, label %sw.bb.67
    i32 84, label %sw.bb.68
    i32 85, label %sw.bb.69
    i32 86, label %sw.bb.70
    i32 87, label %sw.bb.71
    i32 88, label %sw.bb.72
    i32 89, label %sw.bb.73
    i32 8193, label %sw.bb.74
    i32 8194, label %sw.bb.75
    i32 8195, label %sw.bb.76
    i32 8196, label %sw.bb.77
    i32 8197, label %sw.bb.78
    i32 8198, label %sw.bb.79
    i32 8199, label %sw.bb.80
    i32 8200, label %sw.bb.81
    i32 8201, label %sw.bb.82
    i32 8202, label %sw.bb.83
    i32 8203, label %sw.bb.84
    i32 8449, label %sw.bb.85
    i32 8450, label %sw.bb.86
    i32 8451, label %sw.bb.87
    i32 8452, label %sw.bb.88
    i32 8453, label %sw.bb.89
    i32 8454, label %sw.bb.90
    i32 8455, label %sw.bb.91
    i32 8705, label %sw.bb.92
  ]

sw.bb:                                            ; preds = %entry
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.291, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.1:                                          ; preds = %entry
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.292, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.2:                                          ; preds = %entry
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.293, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.3:                                          ; preds = %entry
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.294, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.4:                                          ; preds = %entry
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.295, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.5:                                          ; preds = %entry
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.296, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.6:                                          ; preds = %entry
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.297, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.7:                                          ; preds = %entry
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.298, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.8:                                          ; preds = %entry
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.299, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.9:                                          ; preds = %entry
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.300, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.10:                                         ; preds = %entry
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.301, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.11:                                         ; preds = %entry
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.302, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.12:                                         ; preds = %entry
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.303, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.13:                                         ; preds = %entry
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.304, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.14:                                         ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.305, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.15:                                         ; preds = %entry
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.306, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.16:                                         ; preds = %entry
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.307, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.17:                                         ; preds = %entry
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.308, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.18:                                         ; preds = %entry
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.309, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.19:                                         ; preds = %entry
  store i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.310, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.20:                                         ; preds = %entry
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.311, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.21:                                         ; preds = %entry
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.312, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.22:                                         ; preds = %entry
  store i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.313, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.23:                                         ; preds = %entry
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.314, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.24:                                         ; preds = %entry
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.315, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.25:                                         ; preds = %entry
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.316, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.26:                                         ; preds = %entry
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.317, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.27:                                         ; preds = %entry
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.318, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.28:                                         ; preds = %entry
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.319, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.29:                                         ; preds = %entry
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.320, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.30:                                         ; preds = %entry
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.321, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.31:                                         ; preds = %entry
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.322, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.32:                                         ; preds = %entry
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.323, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.33:                                         ; preds = %entry
  store i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.324, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.34:                                         ; preds = %entry
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.325, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.35:                                         ; preds = %entry
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.326, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.36:                                         ; preds = %entry
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.327, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.37:                                         ; preds = %entry
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.328, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.38:                                         ; preds = %entry
  store i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.329, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.39:                                         ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.330, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.40:                                         ; preds = %entry
  store i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.331, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.41:                                         ; preds = %entry
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.332, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.42:                                         ; preds = %entry
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.333, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.43:                                         ; preds = %entry
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.334, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.44:                                         ; preds = %entry
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.335, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.45:                                         ; preds = %entry
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.336, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.46:                                         ; preds = %entry
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.337, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.47:                                         ; preds = %entry
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.338, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.48:                                         ; preds = %entry
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.339, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.49:                                         ; preds = %entry
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.340, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.50:                                         ; preds = %entry
  store i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.341, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.51:                                         ; preds = %entry
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.342, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.52:                                         ; preds = %entry
  store i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.343, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.53:                                         ; preds = %entry
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.344, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.54:                                         ; preds = %entry
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.345, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.55:                                         ; preds = %entry
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.346, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.56:                                         ; preds = %entry
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.347, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.57:                                         ; preds = %entry
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.348, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.58:                                         ; preds = %entry
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.349, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.59:                                         ; preds = %entry
  store i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.350, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.60:                                         ; preds = %entry
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.351, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.61:                                         ; preds = %entry
  store i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.352, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.62:                                         ; preds = %entry
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.353, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.63:                                         ; preds = %entry
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.354, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.64:                                         ; preds = %entry
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.355, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.65:                                         ; preds = %entry
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.356, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.66:                                         ; preds = %entry
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.357, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.67:                                         ; preds = %entry
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.358, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.68:                                         ; preds = %entry
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.359, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.69:                                         ; preds = %entry
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.360, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.70:                                         ; preds = %entry
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.361, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.71:                                         ; preds = %entry
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.362, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.72:                                         ; preds = %entry
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.363, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.73:                                         ; preds = %entry
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.364, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.74:                                         ; preds = %entry
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.365, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.75:                                         ; preds = %entry
  store i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.366, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.76:                                         ; preds = %entry
  store i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.367, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.77:                                         ; preds = %entry
  store i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.368, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.78:                                         ; preds = %entry
  store i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.369, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.79:                                         ; preds = %entry
  store i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.370, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.80:                                         ; preds = %entry
  store i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.371, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.81:                                         ; preds = %entry
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.372, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.82:                                         ; preds = %entry
  store i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.373, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.83:                                         ; preds = %entry
  store i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.374, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.84:                                         ; preds = %entry
  store i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.375, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.85:                                         ; preds = %entry
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.376, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.86:                                         ; preds = %entry
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.377, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.87:                                         ; preds = %entry
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.378, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.88:                                         ; preds = %entry
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.379, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.89:                                         ; preds = %entry
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.380, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.90:                                         ; preds = %entry
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.381, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.91:                                         ; preds = %entry
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.382, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.92:                                         ; preds = %entry
  store i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.383, i32 0, i32 0), i8** %retval
  br label %return

sw.default:                                       ; preds = %entry
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.384, i32 0, i32 0), i8** %retval
  br label %return

return:                                           ; preds = %sw.default, %sw.bb.92, %sw.bb.91, %sw.bb.90, %sw.bb.89, %sw.bb.88, %sw.bb.87, %sw.bb.86, %sw.bb.85, %sw.bb.84, %sw.bb.83, %sw.bb.82, %sw.bb.81, %sw.bb.80, %sw.bb.79, %sw.bb.78, %sw.bb.77, %sw.bb.76, %sw.bb.75, %sw.bb.74, %sw.bb.73, %sw.bb.72, %sw.bb.71, %sw.bb.70, %sw.bb.69, %sw.bb.68, %sw.bb.67, %sw.bb.66, %sw.bb.65, %sw.bb.64, %sw.bb.63, %sw.bb.62, %sw.bb.61, %sw.bb.60, %sw.bb.59, %sw.bb.58, %sw.bb.57, %sw.bb.56, %sw.bb.55, %sw.bb.54, %sw.bb.53, %sw.bb.52, %sw.bb.51, %sw.bb.50, %sw.bb.49, %sw.bb.48, %sw.bb.47, %sw.bb.46, %sw.bb.45, %sw.bb.44, %sw.bb.43, %sw.bb.42, %sw.bb.41, %sw.bb.40, %sw.bb.39, %sw.bb.38, %sw.bb.37, %sw.bb.36, %sw.bb.35, %sw.bb.34, %sw.bb.33, %sw.bb.32, %sw.bb.31, %sw.bb.30, %sw.bb.29, %sw.bb.28, %sw.bb.27, %sw.bb.26, %sw.bb.25, %sw.bb.24, %sw.bb.23, %sw.bb.22, %sw.bb.21, %sw.bb.20, %sw.bb.19, %sw.bb.18, %sw.bb.17, %sw.bb.16, %sw.bb.15, %sw.bb.14, %sw.bb.13, %sw.bb.12, %sw.bb.11, %sw.bb.10, %sw.bb.9, %sw.bb.8, %sw.bb.7, %sw.bb.6, %sw.bb.5, %sw.bb.4, %sw.bb.3, %sw.bb.2, %sw.bb.1, %sw.bb
  %1 = load i8*, i8** %retval
  ret i8* %1
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @AT_class(%struct.dw_attr_struct* %a) #3 {
entry:
  %a.addr = alloca %struct.dw_attr_struct*, align 8
  store %struct.dw_attr_struct* %a, %struct.dw_attr_struct** %a.addr, align 8
  %0 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a.addr, align 8
  %dw_attr_val = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %0, i32 0, i32 2
  %val_class = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_attr_val, i32 0, i32 0
  %1 = load i32, i32* %val_class, align 4
  ret i32 %1
}

; Function Attrs: inlinehint nounwind uwtable
define internal %struct.dw_loc_list_struct* @AT_loc_list(%struct.dw_attr_struct* %a) #3 {
entry:
  %a.addr = alloca %struct.dw_attr_struct*, align 8
  store %struct.dw_attr_struct* %a, %struct.dw_attr_struct** %a.addr, align 8
  %0 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a.addr, align 8
  %tobool = icmp ne %struct.dw_attr_struct* %0, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a.addr, align 8
  %call = call i32 @AT_class(%struct.dw_attr_struct* %1)
  %cmp = icmp eq i32 %call, 3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %2 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a.addr, align 8
  %dw_attr_val = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %2, i32 0, i32 2
  %v = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_attr_val, i32 0, i32 1
  %val_loc_list = bitcast %union.anon.3* %v to %struct.dw_loc_list_struct**
  %3 = load %struct.dw_loc_list_struct*, %struct.dw_loc_list_struct** %val_loc_list, align 8
  ret %struct.dw_loc_list_struct* %3

if.end:                                           ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 4679, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__FUNCTION__.AT_loc_list, i32 0, i32 0)) #8
  unreachable
}

; Function Attrs: inlinehint nounwind uwtable
define internal i64 @AT_int(%struct.dw_attr_struct* %a) #3 {
entry:
  %a.addr = alloca %struct.dw_attr_struct*, align 8
  store %struct.dw_attr_struct* %a, %struct.dw_attr_struct** %a.addr, align 8
  %0 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a.addr, align 8
  %tobool = icmp ne %struct.dw_attr_struct* %0, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a.addr, align 8
  %call = call i32 @AT_class(%struct.dw_attr_struct* %1)
  %cmp = icmp eq i32 %call, 5
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %2 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a.addr, align 8
  %dw_attr_val = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %2, i32 0, i32 2
  %v = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_attr_val, i32 0, i32 1
  %val_int = bitcast %union.anon.3* %v to i64*
  %3 = load i64, i64* %val_int, align 8
  ret i64 %3

if.end:                                           ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 4414, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__FUNCTION__.AT_int, i32 0, i32 0)) #8
  unreachable
}

; Function Attrs: inlinehint nounwind uwtable
define internal i64 @AT_unsigned(%struct.dw_attr_struct* %a) #3 {
entry:
  %a.addr = alloca %struct.dw_attr_struct*, align 8
  store %struct.dw_attr_struct* %a, %struct.dw_attr_struct** %a.addr, align 8
  %0 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a.addr, align 8
  %tobool = icmp ne %struct.dw_attr_struct* %0, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a.addr, align 8
  %call = call i32 @AT_class(%struct.dw_attr_struct* %1)
  %cmp = icmp eq i32 %call, 6
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %2 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a.addr, align 8
  %dw_attr_val = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %2, i32 0, i32 2
  %v = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_attr_val, i32 0, i32 1
  %val_unsigned = bitcast %union.anon.3* %v to i64*
  %3 = load i64, i64* %val_unsigned, align 8
  ret i64 %3

if.end:                                           ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 4441, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__FUNCTION__.AT_unsigned, i32 0, i32 0)) #8
  unreachable
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @AT_flag(%struct.dw_attr_struct* %a) #3 {
entry:
  %a.addr = alloca %struct.dw_attr_struct*, align 8
  store %struct.dw_attr_struct* %a, %struct.dw_attr_struct** %a.addr, align 8
  %0 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a.addr, align 8
  %tobool = icmp ne %struct.dw_attr_struct* %0, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a.addr, align 8
  %call = call i32 @AT_class(%struct.dw_attr_struct* %1)
  %cmp = icmp eq i32 %call, 9
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %2 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a.addr, align 8
  %dw_attr_val = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %2, i32 0, i32 2
  %v = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_attr_val, i32 0, i32 1
  %val_flag = bitcast %union.anon.3* %v to i8*
  %3 = load i8, i8* %val_flag, align 1
  %conv = zext i8 %3 to i32
  ret i32 %conv

if.end:                                           ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 4387, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__FUNCTION__.AT_flag, i32 0, i32 0)) #8
  unreachable
}

; Function Attrs: inlinehint nounwind uwtable
define internal %struct.die_struct* @AT_ref(%struct.dw_attr_struct* %a) #3 {
entry:
  %a.addr = alloca %struct.dw_attr_struct*, align 8
  store %struct.dw_attr_struct* %a, %struct.dw_attr_struct** %a.addr, align 8
  %0 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a.addr, align 8
  %tobool = icmp ne %struct.dw_attr_struct* %0, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a.addr, align 8
  %call = call i32 @AT_class(%struct.dw_attr_struct* %1)
  %cmp = icmp eq i32 %call, 10
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %2 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a.addr, align 8
  %dw_attr_val = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %2, i32 0, i32 2
  %v = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_attr_val, i32 0, i32 1
  %val_die_ref = bitcast %union.anon.3* %v to %struct.anon.4*
  %die = getelementptr inbounds %struct.anon.4, %struct.anon.4* %val_die_ref, i32 0, i32 0
  %3 = load %struct.die_struct*, %struct.die_struct** %die, align 8
  ret %struct.die_struct* %3

if.end:                                           ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 4588, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__FUNCTION__.AT_ref, i32 0, i32 0)) #8
  unreachable
}

; Function Attrs: inlinehint nounwind uwtable
define internal i8* @AT_lbl(%struct.dw_attr_struct* %a) #3 {
entry:
  %a.addr = alloca %struct.dw_attr_struct*, align 8
  store %struct.dw_attr_struct* %a, %struct.dw_attr_struct** %a.addr, align 8
  %0 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a.addr, align 8
  %tobool = icmp ne %struct.dw_attr_struct* %0, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a.addr, align 8
  %call = call i32 @AT_class(%struct.dw_attr_struct* %1)
  %cmp = icmp eq i32 %call, 12
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %2 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a.addr, align 8
  %call1 = call i32 @AT_class(%struct.dw_attr_struct* %2)
  %cmp2 = icmp eq i32 %call1, 13
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  %3 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a.addr, align 8
  %dw_attr_val = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %3, i32 0, i32 2
  %v = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_attr_val, i32 0, i32 1
  %val_lbl_id = bitcast %union.anon.3* %v to i8**
  %4 = load i8*, i8** %val_lbl_id, align 8
  ret i8* %4

if.end:                                           ; preds = %lor.lhs.false, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 4785, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__FUNCTION__.AT_lbl, i32 0, i32 0)) #8
  unreachable
}

; Function Attrs: inlinehint nounwind uwtable
define internal i8* @AT_string(%struct.dw_attr_struct* %a) #3 {
entry:
  %a.addr = alloca %struct.dw_attr_struct*, align 8
  store %struct.dw_attr_struct* %a, %struct.dw_attr_struct** %a.addr, align 8
  %0 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a.addr, align 8
  %tobool = icmp ne %struct.dw_attr_struct* %0, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a.addr, align 8
  %call = call i32 @AT_class(%struct.dw_attr_struct* %1)
  %cmp = icmp eq i32 %call, 14
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %2 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a.addr, align 8
  %dw_attr_val = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %2, i32 0, i32 2
  %v = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_attr_val, i32 0, i32 1
  %val_str = bitcast %union.anon.3* %v to %struct.indirect_string_node**
  %3 = load %struct.indirect_string_node*, %struct.indirect_string_node** %val_str, align 8
  %id = getelementptr inbounds %struct.indirect_string_node, %struct.indirect_string_node* %3, i32 0, i32 0
  %str = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 1
  %4 = load i8*, i8** %str, align 8
  ret i8* %4

if.end:                                           ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 4518, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @__FUNCTION__.AT_string, i32 0, i32 0)) #8
  unreachable
}

; Function Attrs: inlinehint nounwind uwtable
define internal %struct.die_struct* @lookup_decl_die(%union.tree_node* %decl) #3 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %decl_id = alloca i32, align 4
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl1 = bitcast %union.tree_node* %0 to %struct.tree_decl*
  %uid = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1, i32 0, i32 3
  %1 = load i32, i32* %uid, align 4
  store i32 %1, i32* %decl_id, align 4
  %2 = load i32, i32* %decl_id, align 4
  %3 = load i32, i32* @decl_die_table_in_use, align 4
  %cmp = icmp ult i32 %2, %3
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %4 = load i32, i32* %decl_id, align 4
  %idxprom = zext i32 %4 to i64
  %5 = load %struct.die_struct**, %struct.die_struct*** @decl_die_table, align 8
  %arrayidx = getelementptr inbounds %struct.die_struct*, %struct.die_struct** %5, i64 %idxprom
  %6 = load %struct.die_struct*, %struct.die_struct** %arrayidx, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.die_struct* [ %6, %cond.true ], [ null, %cond.false ]
  ret %struct.die_struct* %cond
}

; Function Attrs: nounwind uwtable
define internal %union.tree_node* @decl_class_context(%union.tree_node* %decl) #0 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %context = alloca %union.tree_node*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  store %union.tree_node* null, %union.tree_node** %context, align 8
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp ne i32 %bf.clear, 30
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl1 = bitcast %union.tree_node* %1 to %struct.tree_decl*
  %vindex = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1, i32 0, i32 22
  %2 = load %union.tree_node*, %union.tree_node** %vindex, align 8
  %tobool = icmp ne %union.tree_node* %2, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl2 = bitcast %union.tree_node* %3 to %struct.tree_decl*
  %context3 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl2, i32 0, i32 9
  %4 = load %union.tree_node*, %union.tree_node** %context3, align 8
  store %union.tree_node* %4, %union.tree_node** %context, align 8
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false
  %5 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common4 = bitcast %union.tree_node* %5 to %struct.tree_common*
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4, i32 0, i32 1
  %6 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type5 = bitcast %union.tree_node* %6 to %struct.tree_type*
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type5, i32 0, i32 1
  %7 = load %union.tree_node*, %union.tree_node** %values, align 8
  %list = bitcast %union.tree_node* %7 to %struct.tree_list*
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2
  %8 = load %union.tree_node*, %union.tree_node** %value, align 8
  %common6 = bitcast %union.tree_node* %8 to %struct.tree_common*
  %type7 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common6, i32 0, i32 1
  %9 = load %union.tree_node*, %union.tree_node** %type7, align 8
  %type8 = bitcast %union.tree_node* %9 to %struct.tree_type*
  %main_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type8, i32 0, i32 15
  %10 = load %union.tree_node*, %union.tree_node** %main_variant, align 8
  store %union.tree_node* %10, %union.tree_node** %context, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %11 = load %union.tree_node*, %union.tree_node** %context, align 8
  %tobool9 = icmp ne %union.tree_node* %11, null
  br i1 %tobool9, label %land.lhs.true, label %if.end.17

land.lhs.true:                                    ; preds = %if.end
  %12 = load %union.tree_node*, %union.tree_node** %context, align 8
  %common10 = bitcast %union.tree_node* %12 to %struct.tree_common*
  %code11 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common10, i32 0, i32 2
  %bf.load12 = load i32, i32* %code11, align 8
  %bf.clear13 = and i32 %bf.load12, 255
  %idxprom = sext i32 %bf.clear13 to i64
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* @tree_code_type, i32 0, i64 %idxprom
  %13 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %13 to i32
  %cmp14 = icmp eq i32 %conv, 116
  br i1 %cmp14, label %if.end.17, label %if.then.16

if.then.16:                                       ; preds = %land.lhs.true
  store %union.tree_node* null, %union.tree_node** %context, align 8
  br label %if.end.17

if.end.17:                                        ; preds = %if.then.16, %land.lhs.true, %if.end
  %14 = load %union.tree_node*, %union.tree_node** %context, align 8
  ret %union.tree_node* %14
}

; Function Attrs: nounwind uwtable
define internal void @gen_type_die_for_member(%union.tree_node* %type, %union.tree_node* %member, %struct.die_struct* %context_die) #0 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  %member.addr = alloca %union.tree_node*, align 8
  %context_die.addr = alloca %struct.die_struct*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  store %union.tree_node* %member, %union.tree_node** %member.addr, align 8
  store %struct.die_struct* %context_die, %struct.die_struct** %context_die.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %1 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  call void @gen_type_die(%union.tree_node* %0, %struct.die_struct* %1)
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common = bitcast %union.tree_node* %2 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 0
  %3 = load %union.tree_node*, %union.tree_node** %chain, align 8
  %decl = bitcast %union.tree_node* %3 to %struct.tree_decl*
  %external_flag = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl, i32 0, i32 5
  %4 = bitcast i48* %external_flag to i64*
  %bf.load = load i64, i64* %4, align 8
  %bf.lshr = lshr i64 %bf.load, 8
  %bf.clear = and i64 %bf.lshr, 1
  %bf.cast = trunc i64 %bf.clear to i32
  %tobool = icmp ne i32 %bf.cast, 0
  br i1 %tobool, label %land.lhs.true, label %if.end.12

land.lhs.true:                                    ; preds = %entry
  %5 = load %union.tree_node*, %union.tree_node** %member.addr, align 8
  %call = call %struct.die_struct* @lookup_decl_die(%union.tree_node* %5)
  %tobool1 = icmp ne %struct.die_struct* %call, null
  br i1 %tobool1, label %if.end.12, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %6 = load %union.tree_node*, %union.tree_node** %member.addr, align 8
  %call2 = call %union.tree_node* @decl_ultimate_origin(%union.tree_node* %6)
  %tobool3 = icmp ne %union.tree_node* %call2, null
  br i1 %tobool3, label %if.then.4, label %if.end

if.then.4:                                        ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 10121, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @__FUNCTION__.gen_type_die_for_member, i32 0, i32 0)) #8
  unreachable

if.end:                                           ; preds = %if.then
  %7 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  call void @push_decl_scope(%union.tree_node* %7)
  %8 = load %union.tree_node*, %union.tree_node** %member.addr, align 8
  %common5 = bitcast %union.tree_node* %8 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5, i32 0, i32 2
  %bf.load6 = load i32, i32* %code, align 8
  %bf.clear7 = and i32 %bf.load6, 255
  %cmp = icmp eq i32 %bf.clear7, 30
  br i1 %cmp, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %if.end
  %9 = load %union.tree_node*, %union.tree_node** %member.addr, align 8
  %10 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %call9 = call %struct.die_struct* @lookup_type_die(%union.tree_node* %10)
  call void @gen_subprogram_die(%union.tree_node* %9, %struct.die_struct* %call9)
  br label %if.end.11

if.else:                                          ; preds = %if.end
  %11 = load %union.tree_node*, %union.tree_node** %member.addr, align 8
  %12 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %call10 = call %struct.die_struct* @lookup_type_die(%union.tree_node* %12)
  call void @gen_variable_die(%union.tree_node* %11, %struct.die_struct* %call10)
  br label %if.end.11

if.end.11:                                        ; preds = %if.else, %if.then.8
  call void @pop_decl_scope()
  br label %if.end.12

if.end.12:                                        ; preds = %if.end.11, %land.lhs.true, %entry
  ret void
}

declare void @set_decl_abstract_flags(%union.tree_node*, i32) #1

; Function Attrs: nounwind uwtable
define internal void @gen_type_die(%union.tree_node* %type, %struct.die_struct* %context_die) #0 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  %context_die.addr = alloca %struct.die_struct*, align 8
  %need_pop = alloca i32, align 4
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  store %struct.die_struct* %context_die, %struct.die_struct** %context_die.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %cmp = icmp eq %union.tree_node* %0, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %2 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 0), align 8
  %cmp1 = icmp eq %union.tree_node* %1, %2
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %3 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %call = call %union.tree_node* @type_main_variant(%union.tree_node* %3)
  store %union.tree_node* %call, %union.tree_node** %type.addr, align 8
  %4 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common = bitcast %union.tree_node* %4 to %struct.tree_common*
  %asm_written_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %asm_written_flag, align 8
  %bf.lshr = lshr i32 %bf.load, 14
  %bf.clear = and i32 %bf.lshr, 1
  %tobool = icmp ne i32 %bf.clear, 0
  br i1 %tobool, label %if.then.2, label %if.end.3

if.then.2:                                        ; preds = %if.end
  br label %return

if.end.3:                                         ; preds = %if.end
  %5 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type4 = bitcast %union.tree_node* %5 to %struct.tree_type*
  %name = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type4, i32 0, i32 11
  %6 = load %union.tree_node*, %union.tree_node** %name, align 8
  %tobool5 = icmp ne %union.tree_node* %6, null
  br i1 %tobool5, label %land.lhs.true, label %if.end.23

land.lhs.true:                                    ; preds = %if.end.3
  %7 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type6 = bitcast %union.tree_node* %7 to %struct.tree_type*
  %name7 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type6, i32 0, i32 11
  %8 = load %union.tree_node*, %union.tree_node** %name7, align 8
  %common8 = bitcast %union.tree_node* %8 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common8, i32 0, i32 2
  %bf.load9 = load i32, i32* %code, align 8
  %bf.clear10 = and i32 %bf.load9, 255
  %cmp11 = icmp eq i32 %bf.clear10, 33
  br i1 %cmp11, label %land.lhs.true.12, label %if.end.23

land.lhs.true.12:                                 ; preds = %land.lhs.true
  %9 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type13 = bitcast %union.tree_node* %9 to %struct.tree_type*
  %name14 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type13, i32 0, i32 11
  %10 = load %union.tree_node*, %union.tree_node** %name14, align 8
  %decl = bitcast %union.tree_node* %10 to %struct.tree_decl*
  %result = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl, i32 0, i32 11
  %11 = load %union.tree_node*, %union.tree_node** %result, align 8
  %tobool15 = icmp ne %union.tree_node* %11, null
  br i1 %tobool15, label %if.then.16, label %if.end.23

if.then.16:                                       ; preds = %land.lhs.true.12
  %12 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common17 = bitcast %union.tree_node* %12 to %struct.tree_common*
  %asm_written_flag18 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common17, i32 0, i32 2
  %bf.load19 = load i32, i32* %asm_written_flag18, align 8
  %bf.clear20 = and i32 %bf.load19, -16385
  %bf.set = or i32 %bf.clear20, 16384
  store i32 %bf.set, i32* %asm_written_flag18, align 8
  %13 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type21 = bitcast %union.tree_node* %13 to %struct.tree_type*
  %name22 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type21, i32 0, i32 11
  %14 = load %union.tree_node*, %union.tree_node** %name22, align 8
  %15 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  call void @gen_decl_die(%union.tree_node* %14, %struct.die_struct* %15)
  br label %return

if.end.23:                                        ; preds = %land.lhs.true.12, %land.lhs.true, %if.end.3
  %16 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common24 = bitcast %union.tree_node* %16 to %struct.tree_common*
  %code25 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common24, i32 0, i32 2
  %bf.load26 = load i32, i32* %code25, align 8
  %bf.clear27 = and i32 %bf.load26, 255
  switch i32 %bf.clear27, label %sw.default [
    i32 0, label %sw.bb
    i32 13, label %sw.bb.28
    i32 15, label %sw.bb.28
    i32 14, label %sw.bb.36
    i32 19, label %sw.bb.40
    i32 17, label %sw.bb.42
    i32 23, label %sw.bb.45
    i32 16, label %sw.bb.48
    i32 18, label %sw.bb.51
    i32 9, label %sw.bb.69
    i32 10, label %sw.bb.70
    i32 20, label %sw.bb.70
    i32 21, label %sw.bb.70
    i32 22, label %sw.bb.70
    i32 5, label %sw.bb.151
    i32 6, label %sw.bb.151
    i32 7, label %sw.bb.151
    i32 8, label %sw.bb.151
    i32 11, label %sw.bb.151
    i32 12, label %sw.bb.151
    i32 24, label %sw.bb.152
  ]

sw.bb:                                            ; preds = %if.end.23
  br label %sw.epilog

sw.bb.28:                                         ; preds = %if.end.23, %if.end.23
  %17 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common29 = bitcast %union.tree_node* %17 to %struct.tree_common*
  %asm_written_flag30 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common29, i32 0, i32 2
  %bf.load31 = load i32, i32* %asm_written_flag30, align 8
  %bf.clear32 = and i32 %bf.load31, -16385
  %bf.set33 = or i32 %bf.clear32, 16384
  store i32 %bf.set33, i32* %asm_written_flag30, align 8
  %18 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common34 = bitcast %union.tree_node* %18 to %struct.tree_common*
  %type35 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common34, i32 0, i32 1
  %19 = load %union.tree_node*, %union.tree_node** %type35, align 8
  %20 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  call void @gen_type_die(%union.tree_node* %19, %struct.die_struct* %20)
  br label %sw.epilog

sw.bb.36:                                         ; preds = %if.end.23
  %21 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type37 = bitcast %union.tree_node* %21 to %struct.tree_type*
  %maxval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type37, i32 0, i32 13
  %22 = load %union.tree_node*, %union.tree_node** %maxval, align 8
  %23 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  call void @gen_type_die(%union.tree_node* %22, %struct.die_struct* %23)
  %24 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common38 = bitcast %union.tree_node* %24 to %struct.tree_common*
  %type39 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common38, i32 0, i32 1
  %25 = load %union.tree_node*, %union.tree_node** %type39, align 8
  %26 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  call void @gen_type_die(%union.tree_node* %25, %struct.die_struct* %26)
  %27 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %28 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  call void @gen_ptr_to_mbr_type_die(%union.tree_node* %27, %struct.die_struct* %28)
  br label %sw.epilog

sw.bb.40:                                         ; preds = %if.end.23
  %29 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type41 = bitcast %union.tree_node* %29 to %struct.tree_type*
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type41, i32 0, i32 1
  %30 = load %union.tree_node*, %union.tree_node** %values, align 8
  %31 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  call void @gen_type_die(%union.tree_node* %30, %struct.die_struct* %31)
  %32 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %33 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  call void @gen_set_type_die(%union.tree_node* %32, %struct.die_struct* %33)
  br label %sw.epilog

sw.bb.42:                                         ; preds = %if.end.23
  %34 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common43 = bitcast %union.tree_node* %34 to %struct.tree_common*
  %type44 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common43, i32 0, i32 1
  %35 = load %union.tree_node*, %union.tree_node** %type44, align 8
  %36 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  call void @gen_type_die(%union.tree_node* %35, %struct.die_struct* %36)
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 11117, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @__FUNCTION__.gen_type_die, i32 0, i32 0)) #8
  unreachable

sw.bb.45:                                         ; preds = %if.end.23
  %37 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common46 = bitcast %union.tree_node* %37 to %struct.tree_common*
  %type47 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common46, i32 0, i32 1
  %38 = load %union.tree_node*, %union.tree_node** %type47, align 8
  %39 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  call void @gen_type_die(%union.tree_node* %38, %struct.die_struct* %39)
  %40 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %41 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  call void @gen_subroutine_type_die(%union.tree_node* %40, %struct.die_struct* %41)
  br label %sw.epilog

sw.bb.48:                                         ; preds = %if.end.23
  %42 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common49 = bitcast %union.tree_node* %42 to %struct.tree_common*
  %type50 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common49, i32 0, i32 1
  %43 = load %union.tree_node*, %union.tree_node** %type50, align 8
  %44 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  call void @gen_type_die(%union.tree_node* %43, %struct.die_struct* %44)
  %45 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %46 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  call void @gen_subroutine_type_die(%union.tree_node* %45, %struct.die_struct* %46)
  br label %sw.epilog

sw.bb.51:                                         ; preds = %if.end.23
  %47 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type52 = bitcast %union.tree_node* %47 to %struct.tree_type*
  %string_flag = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type52, i32 0, i32 6
  %bf.load53 = load i32, i32* %string_flag, align 4
  %bf.lshr54 = lshr i32 %bf.load53, 16
  %bf.clear55 = and i32 %bf.lshr54, 1
  %tobool56 = icmp ne i32 %bf.clear55, 0
  br i1 %tobool56, label %land.lhs.true.57, label %if.else

land.lhs.true.57:                                 ; preds = %sw.bb.51
  %48 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common58 = bitcast %union.tree_node* %48 to %struct.tree_common*
  %type59 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common58, i32 0, i32 1
  %49 = load %union.tree_node*, %union.tree_node** %type59, align 8
  %common60 = bitcast %union.tree_node* %49 to %struct.tree_common*
  %code61 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common60, i32 0, i32 2
  %bf.load62 = load i32, i32* %code61, align 8
  %bf.clear63 = and i32 %bf.load62, 255
  %cmp64 = icmp eq i32 %bf.clear63, 12
  br i1 %cmp64, label %if.then.65, label %if.else

if.then.65:                                       ; preds = %land.lhs.true.57
  %50 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common66 = bitcast %union.tree_node* %50 to %struct.tree_common*
  %type67 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common66, i32 0, i32 1
  %51 = load %union.tree_node*, %union.tree_node** %type67, align 8
  %52 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  call void @gen_type_die(%union.tree_node* %51, %struct.die_struct* %52)
  %53 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %54 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  call void @gen_string_type_die(%union.tree_node* %53, %struct.die_struct* %54)
  br label %if.end.68

if.else:                                          ; preds = %land.lhs.true.57, %sw.bb.51
  %55 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %56 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  call void @gen_array_type_die(%union.tree_node* %55, %struct.die_struct* %56)
  br label %if.end.68

if.end.68:                                        ; preds = %if.else, %if.then.65
  br label %sw.epilog

sw.bb.69:                                         ; preds = %if.end.23
  %57 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %58 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  call void @gen_array_type_die(%union.tree_node* %57, %struct.die_struct* %58)
  br label %sw.epilog

sw.bb.70:                                         ; preds = %if.end.23, %if.end.23, %if.end.23, %if.end.23
  %59 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type71 = bitcast %union.tree_node* %59 to %struct.tree_type*
  %context = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type71, i32 0, i32 17
  %60 = load %union.tree_node*, %union.tree_node** %context, align 8
  %tobool72 = icmp ne %union.tree_node* %60, null
  br i1 %tobool72, label %land.lhs.true.73, label %if.else.138

land.lhs.true.73:                                 ; preds = %sw.bb.70
  %61 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type74 = bitcast %union.tree_node* %61 to %struct.tree_type*
  %context75 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type74, i32 0, i32 17
  %62 = load %union.tree_node*, %union.tree_node** %context75, align 8
  %common76 = bitcast %union.tree_node* %62 to %struct.tree_common*
  %code77 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common76, i32 0, i32 2
  %bf.load78 = load i32, i32* %code77, align 8
  %bf.clear79 = and i32 %bf.load78, 255
  %cmp80 = icmp eq i32 %bf.clear79, 18
  br i1 %cmp80, label %land.lhs.true.113, label %lor.lhs.false.81

lor.lhs.false.81:                                 ; preds = %land.lhs.true.73
  %63 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type82 = bitcast %union.tree_node* %63 to %struct.tree_type*
  %context83 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type82, i32 0, i32 17
  %64 = load %union.tree_node*, %union.tree_node** %context83, align 8
  %common84 = bitcast %union.tree_node* %64 to %struct.tree_common*
  %code85 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common84, i32 0, i32 2
  %bf.load86 = load i32, i32* %code85, align 8
  %bf.clear87 = and i32 %bf.load86, 255
  %cmp88 = icmp eq i32 %bf.clear87, 20
  br i1 %cmp88, label %land.lhs.true.113, label %lor.lhs.false.89

lor.lhs.false.89:                                 ; preds = %lor.lhs.false.81
  %65 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type90 = bitcast %union.tree_node* %65 to %struct.tree_type*
  %context91 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type90, i32 0, i32 17
  %66 = load %union.tree_node*, %union.tree_node** %context91, align 8
  %common92 = bitcast %union.tree_node* %66 to %struct.tree_common*
  %code93 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common92, i32 0, i32 2
  %bf.load94 = load i32, i32* %code93, align 8
  %bf.clear95 = and i32 %bf.load94, 255
  %cmp96 = icmp eq i32 %bf.clear95, 21
  br i1 %cmp96, label %land.lhs.true.113, label %lor.lhs.false.97

lor.lhs.false.97:                                 ; preds = %lor.lhs.false.89
  %67 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type98 = bitcast %union.tree_node* %67 to %struct.tree_type*
  %context99 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type98, i32 0, i32 17
  %68 = load %union.tree_node*, %union.tree_node** %context99, align 8
  %common100 = bitcast %union.tree_node* %68 to %struct.tree_common*
  %code101 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common100, i32 0, i32 2
  %bf.load102 = load i32, i32* %code101, align 8
  %bf.clear103 = and i32 %bf.load102, 255
  %cmp104 = icmp eq i32 %bf.clear103, 22
  br i1 %cmp104, label %land.lhs.true.113, label %lor.lhs.false.105

lor.lhs.false.105:                                ; preds = %lor.lhs.false.97
  %69 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type106 = bitcast %union.tree_node* %69 to %struct.tree_type*
  %context107 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type106, i32 0, i32 17
  %70 = load %union.tree_node*, %union.tree_node** %context107, align 8
  %common108 = bitcast %union.tree_node* %70 to %struct.tree_common*
  %code109 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common108, i32 0, i32 2
  %bf.load110 = load i32, i32* %code109, align 8
  %bf.clear111 = and i32 %bf.load110, 255
  %cmp112 = icmp eq i32 %bf.clear111, 19
  br i1 %cmp112, label %land.lhs.true.113, label %if.else.138

land.lhs.true.113:                                ; preds = %lor.lhs.false.105, %lor.lhs.false.97, %lor.lhs.false.89, %lor.lhs.false.81, %land.lhs.true.73
  %71 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type114 = bitcast %union.tree_node* %71 to %struct.tree_type*
  %context115 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type114, i32 0, i32 17
  %72 = load %union.tree_node*, %union.tree_node** %context115, align 8
  %common116 = bitcast %union.tree_node* %72 to %struct.tree_common*
  %asm_written_flag117 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common116, i32 0, i32 2
  %bf.load118 = load i32, i32* %asm_written_flag117, align 8
  %bf.lshr119 = lshr i32 %bf.load118, 14
  %bf.clear120 = and i32 %bf.lshr119, 1
  %tobool121 = icmp ne i32 %bf.clear120, 0
  br i1 %tobool121, label %if.else.138, label %if.then.122

if.then.122:                                      ; preds = %land.lhs.true.113
  %73 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type123 = bitcast %union.tree_node* %73 to %struct.tree_type*
  %context124 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type123, i32 0, i32 17
  %74 = load %union.tree_node*, %union.tree_node** %context124, align 8
  %75 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  call void @gen_type_die(%union.tree_node* %74, %struct.die_struct* %75)
  %76 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common125 = bitcast %union.tree_node* %76 to %struct.tree_common*
  %asm_written_flag126 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common125, i32 0, i32 2
  %bf.load127 = load i32, i32* %asm_written_flag126, align 8
  %bf.lshr128 = lshr i32 %bf.load127, 14
  %bf.clear129 = and i32 %bf.lshr128, 1
  %tobool130 = icmp ne i32 %bf.clear129, 0
  br i1 %tobool130, label %if.then.131, label %if.end.132

if.then.131:                                      ; preds = %if.then.122
  br label %return

if.end.132:                                       ; preds = %if.then.122
  %77 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type133 = bitcast %union.tree_node* %77 to %struct.tree_type*
  %context134 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type133, i32 0, i32 17
  %78 = load %union.tree_node*, %union.tree_node** %context134, align 8
  call void @push_decl_scope(%union.tree_node* %78)
  %79 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type135 = bitcast %union.tree_node* %79 to %struct.tree_type*
  %context136 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type135, i32 0, i32 17
  %80 = load %union.tree_node*, %union.tree_node** %context136, align 8
  %call137 = call %struct.die_struct* @lookup_type_die(%union.tree_node* %80)
  store %struct.die_struct* %call137, %struct.die_struct** %context_die.addr, align 8
  store i32 1, i32* %need_pop, align 4
  br label %if.end.139

if.else.138:                                      ; preds = %land.lhs.true.113, %lor.lhs.false.105, %sw.bb.70
  store i32 0, i32* %need_pop, align 4
  br label %if.end.139

if.end.139:                                       ; preds = %if.else.138, %if.end.132
  %81 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common140 = bitcast %union.tree_node* %81 to %struct.tree_common*
  %code141 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common140, i32 0, i32 2
  %bf.load142 = load i32, i32* %code141, align 8
  %bf.clear143 = and i32 %bf.load142, 255
  %cmp144 = icmp eq i32 %bf.clear143, 10
  br i1 %cmp144, label %if.then.145, label %if.else.146

if.then.145:                                      ; preds = %if.end.139
  %82 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %83 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  call void @gen_enumeration_type_die(%union.tree_node* %82, %struct.die_struct* %83)
  br label %if.end.147

if.else.146:                                      ; preds = %if.end.139
  %84 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %85 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  call void @gen_struct_or_union_type_die(%union.tree_node* %84, %struct.die_struct* %85)
  br label %if.end.147

if.end.147:                                       ; preds = %if.else.146, %if.then.145
  %86 = load i32, i32* %need_pop, align 4
  %tobool148 = icmp ne i32 %86, 0
  br i1 %tobool148, label %if.then.149, label %if.end.150

if.then.149:                                      ; preds = %if.end.147
  call void @pop_decl_scope()
  br label %if.end.150

if.end.150:                                       ; preds = %if.then.149, %if.end.147
  br label %return

sw.bb.151:                                        ; preds = %if.end.23, %if.end.23, %if.end.23, %if.end.23, %if.end.23, %if.end.23
  br label %sw.epilog

sw.bb.152:                                        ; preds = %if.end.23
  br label %sw.epilog

sw.default:                                       ; preds = %if.end.23
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 11200, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @__FUNCTION__.gen_type_die, i32 0, i32 0)) #8
  unreachable

sw.epilog:                                        ; preds = %sw.bb.152, %sw.bb.151, %sw.bb.69, %if.end.68, %sw.bb.48, %sw.bb.45, %sw.bb.40, %sw.bb.36, %sw.bb.28, %sw.bb
  %87 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common153 = bitcast %union.tree_node* %87 to %struct.tree_common*
  %asm_written_flag154 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common153, i32 0, i32 2
  %bf.load155 = load i32, i32* %asm_written_flag154, align 8
  %bf.clear156 = and i32 %bf.load155, -16385
  %bf.set157 = or i32 %bf.clear156, 16384
  store i32 %bf.set157, i32* %asm_written_flag154, align 8
  br label %return

return:                                           ; preds = %sw.epilog, %if.end.150, %if.then.131, %if.then.16, %if.then.2, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal %union.tree_node* @decl_ultimate_origin(%union.tree_node* %decl) #0 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %decl.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl1 = bitcast %union.tree_node* %0 to %struct.tree_decl*
  %abstract_flag = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1, i32 0, i32 5
  %1 = bitcast i48* %abstract_flag to i64*
  %bf.load = load i64, i64* %1, align 8
  %bf.lshr = lshr i64 %bf.load, 15
  %bf.clear = and i64 %bf.lshr, 1
  %bf.cast = trunc i64 %bf.clear to i32
  %tobool = icmp ne i32 %bf.cast, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl2 = bitcast %union.tree_node* %2 to %struct.tree_decl*
  %abstract_origin = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl2, i32 0, i32 13
  %3 = load %union.tree_node*, %union.tree_node** %abstract_origin, align 8
  %4 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %cmp = icmp eq %union.tree_node* %3, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  store %union.tree_node* null, %union.tree_node** %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %5 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl3 = bitcast %union.tree_node* %5 to %struct.tree_decl*
  %abstract_origin4 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl3, i32 0, i32 13
  %6 = load %union.tree_node*, %union.tree_node** %abstract_origin4, align 8
  store %union.tree_node* %6, %union.tree_node** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %7 = load %union.tree_node*, %union.tree_node** %retval
  ret %union.tree_node* %7
}

; Function Attrs: nounwind uwtable
define internal void @push_decl_scope(%union.tree_node* %scope) #0 {
entry:
  %scope.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %scope, %union.tree_node** %scope.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.varray_head_tag*, %struct.varray_head_tag** @decl_scope_table, align 8
  %elements_used = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %0, i32 0, i32 1
  %1 = load i64, i64* %elements_used, align 8
  %2 = load %struct.varray_head_tag*, %struct.varray_head_tag** @decl_scope_table, align 8
  %num_elements = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %2, i32 0, i32 0
  %3 = load i64, i64* %num_elements, align 8
  %cmp = icmp uge i64 %1, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %4 = load %struct.varray_head_tag*, %struct.varray_head_tag** @decl_scope_table, align 8
  %5 = load %struct.varray_head_tag*, %struct.varray_head_tag** @decl_scope_table, align 8
  %num_elements1 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %5, i32 0, i32 0
  %6 = load i64, i64* %num_elements1, align 8
  %mul = mul i64 2, %6
  %call = call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %4, i64 %mul)
  store %struct.varray_head_tag* %call, %struct.varray_head_tag** @decl_scope_table, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  %7 = load %union.tree_node*, %union.tree_node** %scope.addr, align 8
  %8 = load %struct.varray_head_tag*, %struct.varray_head_tag** @decl_scope_table, align 8
  %elements_used2 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %8, i32 0, i32 1
  %9 = load i64, i64* %elements_used2, align 8
  %inc = add i64 %9, 1
  store i64 %inc, i64* %elements_used2, align 8
  %10 = load %struct.varray_head_tag*, %struct.varray_head_tag** @decl_scope_table, align 8
  %data = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %10, i32 0, i32 4
  %tree = bitcast %union.varray_data_tag* %data to [1 x %union.tree_node*]*
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %tree, i32 0, i64 %9
  store %union.tree_node* %7, %union.tree_node** %arrayidx, align 8
  br label %do.end

do.end:                                           ; preds = %if.end
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @gen_subprogram_die(%union.tree_node* %decl, %struct.die_struct* %context_die) #0 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %context_die.addr = alloca %struct.die_struct*, align 8
  %label_id = alloca [30 x i8], align 16
  %origin = alloca %union.tree_node*, align 8
  %subr_die = alloca %struct.die_struct*, align 8
  %fp_reg = alloca %struct.rtx_def*, align 8
  %fn_arg_types = alloca %union.tree_node*, align 8
  %outer_scope = alloca %union.tree_node*, align 8
  %old_die = alloca %struct.die_struct*, align 8
  %declaration = alloca i32, align 4
  %file_index = alloca i32, align 4
  %arg_decls = alloca %union.tree_node*, align 8
  %parm = alloca %union.tree_node*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  store %struct.die_struct* %context_die, %struct.die_struct** %context_die.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %call = call %union.tree_node* @decl_ultimate_origin(%union.tree_node* %0)
  store %union.tree_node* %call, %union.tree_node** %origin, align 8
  %1 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %call1 = call %struct.die_struct* @lookup_decl_die(%union.tree_node* %1)
  store %struct.die_struct* %call1, %struct.die_struct** %old_die, align 8
  %2 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %3 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %cmp = icmp ne %union.tree_node* %2, %3
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %4 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  %call2 = call i32 @class_scope_p(%struct.die_struct* %4)
  %tobool = icmp ne i32 %call2, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %5 = phi i1 [ true, %entry ], [ %tobool, %lor.rhs ]
  %lor.ext = zext i1 %5 to i32
  store i32 %lor.ext, i32* %declaration, align 4
  %6 = load %union.tree_node*, %union.tree_node** %origin, align 8
  %tobool3 = icmp ne %union.tree_node* %6, null
  br i1 %tobool3, label %land.lhs.true, label %if.end.10

land.lhs.true:                                    ; preds = %lor.end
  %7 = load i32, i32* %declaration, align 4
  %tobool4 = icmp ne i32 %7, 0
  br i1 %tobool4, label %land.lhs.true.5, label %if.end.10

land.lhs.true.5:                                  ; preds = %land.lhs.true
  %8 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  %call6 = call i32 @class_scope_p(%struct.die_struct* %8)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.then, label %if.end.10

if.then:                                          ; preds = %land.lhs.true.5
  store %union.tree_node* null, %union.tree_node** %origin, align 8
  %9 = load %struct.die_struct*, %struct.die_struct** %old_die, align 8
  %tobool8 = icmp ne %struct.die_struct* %9, null
  br i1 %tobool8, label %if.then.9, label %if.end

if.then.9:                                        ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 10204, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__FUNCTION__.gen_subprogram_die, i32 0, i32 0)) #8
  unreachable

if.end:                                           ; preds = %if.then
  br label %if.end.10

if.end.10:                                        ; preds = %if.end, %land.lhs.true.5, %land.lhs.true, %lor.end
  %10 = load %union.tree_node*, %union.tree_node** %origin, align 8
  %cmp11 = icmp ne %union.tree_node* %10, null
  br i1 %cmp11, label %if.then.12, label %if.else

if.then.12:                                       ; preds = %if.end.10
  %11 = load i32, i32* %declaration, align 4
  %tobool13 = icmp ne i32 %11, 0
  br i1 %tobool13, label %land.lhs.true.14, label %if.end.18

land.lhs.true.14:                                 ; preds = %if.then.12
  %12 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  %call15 = call i32 @local_scope_p(%struct.die_struct* %12)
  %tobool16 = icmp ne i32 %call15, 0
  br i1 %tobool16, label %if.end.18, label %if.then.17

if.then.17:                                       ; preds = %land.lhs.true.14
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 10210, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__FUNCTION__.gen_subprogram_die, i32 0, i32 0)) #8
  unreachable

if.end.18:                                        ; preds = %land.lhs.true.14, %if.then.12
  %13 = load %struct.die_struct*, %struct.die_struct** %old_die, align 8
  %tobool19 = icmp ne %struct.die_struct* %13, null
  br i1 %tobool19, label %land.lhs.true.20, label %if.end.23

land.lhs.true.20:                                 ; preds = %if.end.18
  %14 = load %struct.die_struct*, %struct.die_struct** %old_die, align 8
  %die_parent = getelementptr inbounds %struct.die_struct, %struct.die_struct* %14, i32 0, i32 3
  %15 = load %struct.die_struct*, %struct.die_struct** %die_parent, align 8
  %cmp21 = icmp eq %struct.die_struct* %15, null
  br i1 %cmp21, label %if.then.22, label %if.end.23

if.then.22:                                       ; preds = %land.lhs.true.20
  %16 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  %17 = load %struct.die_struct*, %struct.die_struct** %old_die, align 8
  call void @add_child_die(%struct.die_struct* %16, %struct.die_struct* %17)
  br label %if.end.23

if.end.23:                                        ; preds = %if.then.22, %land.lhs.true.20, %if.end.18
  %18 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  %19 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %call24 = call %struct.die_struct* @new_die(i32 46, %struct.die_struct* %18, %union.tree_node* %19)
  store %struct.die_struct* %call24, %struct.die_struct** %subr_die, align 8
  %20 = load %struct.die_struct*, %struct.die_struct** %subr_die, align 8
  %21 = load %union.tree_node*, %union.tree_node** %origin, align 8
  call void @add_abstract_origin_attribute(%struct.die_struct* %20, %union.tree_node* %21)
  br label %if.end.112

if.else:                                          ; preds = %if.end.10
  %22 = load %struct.die_struct*, %struct.die_struct** %old_die, align 8
  %tobool25 = icmp ne %struct.die_struct* %22, null
  br i1 %tobool25, label %if.then.26, label %if.else.70

if.then.26:                                       ; preds = %if.else
  %23 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl27 = bitcast %union.tree_node* %23 to %struct.tree_decl*
  %filename = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl27, i32 0, i32 1
  %24 = load i8*, i8** %filename, align 8
  %call28 = call i32 @lookup_filename(i8* %24)
  store i32 %call28, i32* %file_index, align 4
  %25 = load %struct.die_struct*, %struct.die_struct** %old_die, align 8
  %call29 = call i32 @get_AT_flag(%struct.die_struct* %25, i32 60)
  %tobool30 = icmp ne i32 %call29, 0
  br i1 %tobool30, label %if.end.38, label %land.lhs.true.31

land.lhs.true.31:                                 ; preds = %if.then.26
  %26 = load %struct.die_struct*, %struct.die_struct** %old_die, align 8
  %call32 = call i32 @get_AT_unsigned(%struct.die_struct* %26, i32 32)
  %tobool33 = icmp ne i32 %call32, 0
  br i1 %tobool33, label %if.end.38, label %if.then.34

if.then.34:                                       ; preds = %land.lhs.true.31
  %27 = load %struct.diagnostic_context*, %struct.diagnostic_context** @global_dc, align 8
  %28 = bitcast %struct.diagnostic_context* %27 to %struct.output_buffer*
  %state = getelementptr inbounds %struct.output_buffer, %struct.output_buffer* %28, i32 0, i32 0
  %diagnostic_count = getelementptr inbounds %struct.output_state, %struct.output_state* %state, i32 0, i32 9
  %arrayidx = getelementptr inbounds [7 x i32], [7 x i32]* %diagnostic_count, i32 0, i64 3
  %29 = load i32, i32* %arrayidx, align 4
  %tobool35 = icmp ne i32 %29, 0
  br i1 %tobool35, label %if.then.36, label %if.end.37

if.then.36:                                       ; preds = %if.then.34
  br label %if.end.245

if.end.37:                                        ; preds = %if.then.34
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 10237, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__FUNCTION__.gen_subprogram_die, i32 0, i32 0)) #8
  unreachable

if.end.38:                                        ; preds = %land.lhs.true.31, %if.then.26
  %30 = load %struct.die_struct*, %struct.die_struct** %old_die, align 8
  %die_parent39 = getelementptr inbounds %struct.die_struct, %struct.die_struct* %30, i32 0, i32 3
  %31 = load %struct.die_struct*, %struct.die_struct** %die_parent39, align 8
  %32 = load %struct.die_struct*, %struct.die_struct** @comp_unit_die, align 8
  %cmp40 = icmp eq %struct.die_struct* %31, %32
  br i1 %cmp40, label %land.lhs.true.42, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.38
  %33 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  %cmp41 = icmp eq %struct.die_struct* %33, null
  br i1 %cmp41, label %land.lhs.true.42, label %if.else.53

land.lhs.true.42:                                 ; preds = %lor.lhs.false, %if.end.38
  %34 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl43 = bitcast %union.tree_node* %34 to %struct.tree_decl*
  %artificial_flag = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl43, i32 0, i32 5
  %35 = bitcast i48* %artificial_flag to i64*
  %bf.load = load i64, i64* %35, align 8
  %bf.lshr = lshr i64 %bf.load, 22
  %bf.clear = and i64 %bf.lshr, 1
  %bf.cast = trunc i64 %bf.clear to i32
  %tobool44 = icmp ne i32 %bf.cast, 0
  br i1 %tobool44, label %if.then.52, label %lor.lhs.false.45

lor.lhs.false.45:                                 ; preds = %land.lhs.true.42
  %36 = load %struct.die_struct*, %struct.die_struct** %old_die, align 8
  %call46 = call i32 @get_AT_unsigned(%struct.die_struct* %36, i32 58)
  %37 = load i32, i32* %file_index, align 4
  %cmp47 = icmp eq i32 %call46, %37
  br i1 %cmp47, label %land.lhs.true.48, label %if.else.53

land.lhs.true.48:                                 ; preds = %lor.lhs.false.45
  %38 = load %struct.die_struct*, %struct.die_struct** %old_die, align 8
  %call49 = call i32 @get_AT_unsigned(%struct.die_struct* %38, i32 59)
  %39 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl50 = bitcast %union.tree_node* %39 to %struct.tree_decl*
  %linenum = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl50, i32 0, i32 2
  %40 = load i32, i32* %linenum, align 4
  %cmp51 = icmp eq i32 %call49, %40
  br i1 %cmp51, label %if.then.52, label %if.else.53

if.then.52:                                       ; preds = %land.lhs.true.48, %land.lhs.true.42
  %41 = load %struct.die_struct*, %struct.die_struct** %old_die, align 8
  store %struct.die_struct* %41, %struct.die_struct** %subr_die, align 8
  %42 = load %struct.die_struct*, %struct.die_struct** %subr_die, align 8
  call void @remove_AT(%struct.die_struct* %42, i32 60)
  %43 = load %struct.die_struct*, %struct.die_struct** %subr_die, align 8
  call void @remove_children(%struct.die_struct* %43)
  br label %if.end.69

if.else.53:                                       ; preds = %land.lhs.true.48, %lor.lhs.false.45, %lor.lhs.false
  %44 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  %45 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %call54 = call %struct.die_struct* @new_die(i32 46, %struct.die_struct* %44, %union.tree_node* %45)
  store %struct.die_struct* %call54, %struct.die_struct** %subr_die, align 8
  %46 = load %struct.die_struct*, %struct.die_struct** %subr_die, align 8
  %47 = load %struct.die_struct*, %struct.die_struct** %old_die, align 8
  call void @add_AT_die_ref(%struct.die_struct* %46, i32 71, %struct.die_struct* %47)
  %48 = load %struct.die_struct*, %struct.die_struct** %old_die, align 8
  %call55 = call i32 @get_AT_unsigned(%struct.die_struct* %48, i32 58)
  %49 = load i32, i32* %file_index, align 4
  %cmp56 = icmp ne i32 %call55, %49
  br i1 %cmp56, label %if.then.57, label %if.end.58

if.then.57:                                       ; preds = %if.else.53
  %50 = load %struct.die_struct*, %struct.die_struct** %subr_die, align 8
  %51 = load i32, i32* %file_index, align 4
  %conv = zext i32 %51 to i64
  call void @add_AT_unsigned(%struct.die_struct* %50, i32 58, i64 %conv)
  br label %if.end.58

if.end.58:                                        ; preds = %if.then.57, %if.else.53
  %52 = load %struct.die_struct*, %struct.die_struct** %old_die, align 8
  %call59 = call i32 @get_AT_unsigned(%struct.die_struct* %52, i32 59)
  %53 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl60 = bitcast %union.tree_node* %53 to %struct.tree_decl*
  %linenum61 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl60, i32 0, i32 2
  %54 = load i32, i32* %linenum61, align 4
  %cmp62 = icmp ne i32 %call59, %54
  br i1 %cmp62, label %if.then.64, label %if.end.68

if.then.64:                                       ; preds = %if.end.58
  %55 = load %struct.die_struct*, %struct.die_struct** %subr_die, align 8
  %56 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl65 = bitcast %union.tree_node* %56 to %struct.tree_decl*
  %linenum66 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl65, i32 0, i32 2
  %57 = load i32, i32* %linenum66, align 4
  %conv67 = sext i32 %57 to i64
  call void @add_AT_unsigned(%struct.die_struct* %55, i32 59, i64 %conv67)
  br label %if.end.68

if.end.68:                                        ; preds = %if.then.64, %if.end.58
  br label %if.end.69

if.end.69:                                        ; preds = %if.end.68, %if.then.52
  br label %if.end.111

if.else.70:                                       ; preds = %if.else
  %58 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  %59 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %call71 = call %struct.die_struct* @new_die(i32 46, %struct.die_struct* %58, %union.tree_node* %59)
  store %struct.die_struct* %call71, %struct.die_struct** %subr_die, align 8
  %60 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common = bitcast %union.tree_node* %60 to %struct.tree_common*
  %public_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load72 = load i32, i32* %public_flag, align 8
  %bf.lshr73 = lshr i32 %bf.load72, 19
  %bf.clear74 = and i32 %bf.lshr73, 1
  %tobool75 = icmp ne i32 %bf.clear74, 0
  br i1 %tobool75, label %if.then.76, label %if.end.77

if.then.76:                                       ; preds = %if.else.70
  %61 = load %struct.die_struct*, %struct.die_struct** %subr_die, align 8
  call void @add_AT_flag(%struct.die_struct* %61, i32 63, i32 1)
  br label %if.end.77

if.end.77:                                        ; preds = %if.then.76, %if.else.70
  %62 = load %struct.die_struct*, %struct.die_struct** %subr_die, align 8
  %63 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  call void @add_name_and_src_coords_attributes(%struct.die_struct* %62, %union.tree_node* %63)
  %64 = load i32, i32* @debug_info_level, align 4
  %cmp78 = icmp ugt i32 %64, 1
  br i1 %cmp78, label %if.then.80, label %if.end.86

if.then.80:                                       ; preds = %if.end.77
  %65 = load %struct.die_struct*, %struct.die_struct** %subr_die, align 8
  %66 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common81 = bitcast %union.tree_node* %66 to %struct.tree_common*
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common81, i32 0, i32 1
  %67 = load %union.tree_node*, %union.tree_node** %type, align 8
  call void @add_prototyped_attribute(%struct.die_struct* %65, %union.tree_node* %67)
  %68 = load %struct.die_struct*, %struct.die_struct** %subr_die, align 8
  %69 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common82 = bitcast %union.tree_node* %69 to %struct.tree_common*
  %type83 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common82, i32 0, i32 1
  %70 = load %union.tree_node*, %union.tree_node** %type83, align 8
  %common84 = bitcast %union.tree_node* %70 to %struct.tree_common*
  %type85 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common84, i32 0, i32 1
  %71 = load %union.tree_node*, %union.tree_node** %type85, align 8
  %72 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  call void @add_type_attribute(%struct.die_struct* %68, %union.tree_node* %71, i32 0, i32 0, %struct.die_struct* %72)
  br label %if.end.86

if.end.86:                                        ; preds = %if.then.80, %if.end.77
  %73 = load %struct.die_struct*, %struct.die_struct** %subr_die, align 8
  %74 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  call void @add_pure_or_virtual_attribute(%struct.die_struct* %73, %union.tree_node* %74)
  %75 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl87 = bitcast %union.tree_node* %75 to %struct.tree_decl*
  %artificial_flag88 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl87, i32 0, i32 5
  %76 = bitcast i48* %artificial_flag88 to i64*
  %bf.load89 = load i64, i64* %76, align 8
  %bf.lshr90 = lshr i64 %bf.load89, 22
  %bf.clear91 = and i64 %bf.lshr90, 1
  %bf.cast92 = trunc i64 %bf.clear91 to i32
  %tobool93 = icmp ne i32 %bf.cast92, 0
  br i1 %tobool93, label %if.then.94, label %if.end.95

if.then.94:                                       ; preds = %if.end.86
  %77 = load %struct.die_struct*, %struct.die_struct** %subr_die, align 8
  call void @add_AT_flag(%struct.die_struct* %77, i32 52, i32 1)
  br label %if.end.95

if.end.95:                                        ; preds = %if.then.94, %if.end.86
  %78 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common96 = bitcast %union.tree_node* %78 to %struct.tree_common*
  %protected_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common96, i32 0, i32 2
  %bf.load97 = load i32, i32* %protected_flag, align 8
  %bf.lshr98 = lshr i32 %bf.load97, 21
  %bf.clear99 = and i32 %bf.lshr98, 1
  %tobool100 = icmp ne i32 %bf.clear99, 0
  br i1 %tobool100, label %if.then.101, label %if.else.102

if.then.101:                                      ; preds = %if.end.95
  %79 = load %struct.die_struct*, %struct.die_struct** %subr_die, align 8
  call void @add_AT_unsigned(%struct.die_struct* %79, i32 50, i64 2)
  br label %if.end.110

if.else.102:                                      ; preds = %if.end.95
  %80 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common103 = bitcast %union.tree_node* %80 to %struct.tree_common*
  %private_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common103, i32 0, i32 2
  %bf.load104 = load i32, i32* %private_flag, align 8
  %bf.lshr105 = lshr i32 %bf.load104, 20
  %bf.clear106 = and i32 %bf.lshr105, 1
  %tobool107 = icmp ne i32 %bf.clear106, 0
  br i1 %tobool107, label %if.then.108, label %if.end.109

if.then.108:                                      ; preds = %if.else.102
  %81 = load %struct.die_struct*, %struct.die_struct** %subr_die, align 8
  call void @add_AT_unsigned(%struct.die_struct* %81, i32 50, i64 3)
  br label %if.end.109

if.end.109:                                       ; preds = %if.then.108, %if.else.102
  br label %if.end.110

if.end.110:                                       ; preds = %if.end.109, %if.then.101
  br label %if.end.111

if.end.111:                                       ; preds = %if.end.110, %if.end.69
  br label %if.end.112

if.end.112:                                       ; preds = %if.end.111, %if.end.23
  %82 = load i32, i32* %declaration, align 4
  %tobool113 = icmp ne i32 %82, 0
  br i1 %tobool113, label %if.then.114, label %if.else.132

if.then.114:                                      ; preds = %if.end.112
  %83 = load %struct.die_struct*, %struct.die_struct** %old_die, align 8
  %tobool115 = icmp ne %struct.die_struct* %83, null
  br i1 %tobool115, label %lor.lhs.false.116, label %if.then.119

lor.lhs.false.116:                                ; preds = %if.then.114
  %84 = load %struct.die_struct*, %struct.die_struct** %old_die, align 8
  %call117 = call i32 @get_AT_unsigned(%struct.die_struct* %84, i32 32)
  %tobool118 = icmp ne i32 %call117, 0
  br i1 %tobool118, label %if.end.131, label %if.then.119

if.then.119:                                      ; preds = %lor.lhs.false.116, %if.then.114
  %85 = load %struct.die_struct*, %struct.die_struct** %subr_die, align 8
  call void @add_AT_flag(%struct.die_struct* %85, i32 60, i32 1)
  %86 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl120 = bitcast %union.tree_node* %86 to %struct.tree_decl*
  %context = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl120, i32 0, i32 9
  %87 = load %union.tree_node*, %union.tree_node** %context, align 8
  %tobool121 = icmp ne %union.tree_node* %87, null
  br i1 %tobool121, label %if.then.129, label %lor.lhs.false.122

lor.lhs.false.122:                                ; preds = %if.then.119
  %88 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl123 = bitcast %union.tree_node* %88 to %struct.tree_decl*
  %abstract_flag = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl123, i32 0, i32 5
  %89 = bitcast i48* %abstract_flag to i64*
  %bf.load124 = load i64, i64* %89, align 8
  %bf.lshr125 = lshr i64 %bf.load124, 15
  %bf.clear126 = and i64 %bf.lshr125, 1
  %bf.cast127 = trunc i64 %bf.clear126 to i32
  %tobool128 = icmp ne i32 %bf.cast127, 0
  br i1 %tobool128, label %if.then.129, label %if.end.130

if.then.129:                                      ; preds = %lor.lhs.false.122, %if.then.119
  %90 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %91 = load %struct.die_struct*, %struct.die_struct** %subr_die, align 8
  call void @equate_decl_number_to_die(%union.tree_node* %90, %struct.die_struct* %91)
  br label %if.end.130

if.end.130:                                       ; preds = %if.then.129, %lor.lhs.false.122
  br label %if.end.131

if.end.131:                                       ; preds = %if.end.130, %lor.lhs.false.116
  br label %if.end.186

if.else.132:                                      ; preds = %if.end.112
  %92 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl133 = bitcast %union.tree_node* %92 to %struct.tree_decl*
  %abstract_flag134 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl133, i32 0, i32 5
  %93 = bitcast i48* %abstract_flag134 to i64*
  %bf.load135 = load i64, i64* %93, align 8
  %bf.lshr136 = lshr i64 %bf.load135, 15
  %bf.clear137 = and i64 %bf.lshr136, 1
  %bf.cast138 = trunc i64 %bf.clear137 to i32
  %tobool139 = icmp ne i32 %bf.cast138, 0
  br i1 %tobool139, label %if.then.140, label %if.else.161

if.then.140:                                      ; preds = %if.else.132
  %94 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl141 = bitcast %union.tree_node* %94 to %struct.tree_decl*
  %inline_flag = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl141, i32 0, i32 5
  %95 = bitcast i48* %inline_flag to i64*
  %bf.load142 = load i64, i64* %95, align 8
  %bf.lshr143 = lshr i64 %bf.load142, 11
  %bf.clear144 = and i64 %bf.lshr143, 1
  %bf.cast145 = trunc i64 %bf.clear144 to i32
  %tobool146 = icmp ne i32 %bf.cast145, 0
  br i1 %tobool146, label %land.lhs.true.147, label %if.else.159

land.lhs.true.147:                                ; preds = %if.then.140
  %96 = load i32, i32* @flag_no_inline, align 4
  %tobool148 = icmp ne i32 %96, 0
  br i1 %tobool148, label %if.else.159, label %if.then.149

if.then.149:                                      ; preds = %land.lhs.true.147
  %97 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl150 = bitcast %union.tree_node* %97 to %struct.tree_decl*
  %defer_output = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl150, i32 0, i32 5
  %98 = bitcast i48* %defer_output to i64*
  %bf.load151 = load i64, i64* %98, align 8
  %bf.lshr152 = lshr i64 %bf.load151, 18
  %bf.clear153 = and i64 %bf.lshr152, 1
  %bf.cast154 = trunc i64 %bf.clear153 to i32
  %tobool155 = icmp ne i32 %bf.cast154, 0
  br i1 %tobool155, label %if.then.156, label %if.else.157

if.then.156:                                      ; preds = %if.then.149
  %99 = load %struct.die_struct*, %struct.die_struct** %subr_die, align 8
  call void @add_AT_unsigned(%struct.die_struct* %99, i32 32, i64 3)
  br label %if.end.158

if.else.157:                                      ; preds = %if.then.149
  %100 = load %struct.die_struct*, %struct.die_struct** %subr_die, align 8
  call void @add_AT_unsigned(%struct.die_struct* %100, i32 32, i64 1)
  br label %if.end.158

if.end.158:                                       ; preds = %if.else.157, %if.then.156
  br label %if.end.160

if.else.159:                                      ; preds = %land.lhs.true.147, %if.then.140
  %101 = load %struct.die_struct*, %struct.die_struct** %subr_die, align 8
  call void @add_AT_unsigned(%struct.die_struct* %101, i32 32, i64 2)
  br label %if.end.160

if.end.160:                                       ; preds = %if.else.159, %if.end.158
  %102 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %103 = load %struct.die_struct*, %struct.die_struct** %subr_die, align 8
  call void @equate_decl_number_to_die(%union.tree_node* %102, %struct.die_struct* %103)
  br label %if.end.185

if.else.161:                                      ; preds = %if.else.132
  %104 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl162 = bitcast %union.tree_node* %104 to %struct.tree_decl*
  %external_flag = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl162, i32 0, i32 5
  %105 = bitcast i48* %external_flag to i64*
  %bf.load163 = load i64, i64* %105, align 8
  %bf.lshr164 = lshr i64 %bf.load163, 8
  %bf.clear165 = and i64 %bf.lshr164, 1
  %bf.cast166 = trunc i64 %bf.clear165 to i32
  %tobool167 = icmp ne i32 %bf.cast166, 0
  br i1 %tobool167, label %if.end.184, label %if.then.168

if.then.168:                                      ; preds = %if.else.161
  %106 = load %struct.die_struct*, %struct.die_struct** %old_die, align 8
  %tobool169 = icmp ne %struct.die_struct* %106, null
  br i1 %tobool169, label %lor.lhs.false.170, label %if.then.173

lor.lhs.false.170:                                ; preds = %if.then.168
  %107 = load %struct.die_struct*, %struct.die_struct** %old_die, align 8
  %call171 = call i32 @get_AT_unsigned(%struct.die_struct* %107, i32 32)
  %tobool172 = icmp ne i32 %call171, 0
  br i1 %tobool172, label %if.end.174, label %if.then.173

if.then.173:                                      ; preds = %lor.lhs.false.170, %if.then.168
  %108 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %109 = load %struct.die_struct*, %struct.die_struct** %subr_die, align 8
  call void @equate_decl_number_to_die(%union.tree_node* %108, %struct.die_struct* %109)
  br label %if.end.174

if.end.174:                                       ; preds = %if.then.173, %lor.lhs.false.170
  br label %do.body

do.body:                                          ; preds = %if.end.174
  %arraydecay = getelementptr inbounds [30 x i8], [30 x i8]* %label_id, i32 0, i32 0
  %110 = load i32, i32* @current_funcdef_number, align 4
  %call175 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i32 %110) #5
  br label %do.end

do.end:                                           ; preds = %do.body
  %111 = load %struct.die_struct*, %struct.die_struct** %subr_die, align 8
  %arraydecay176 = getelementptr inbounds [30 x i8], [30 x i8]* %label_id, i32 0, i32 0
  call void @add_AT_lbl_id(%struct.die_struct* %111, i32 17, i8* %arraydecay176)
  br label %do.body.177

do.body.177:                                      ; preds = %do.end
  %arraydecay178 = getelementptr inbounds [30 x i8], [30 x i8]* %label_id, i32 0, i32 0
  %112 = load i32, i32* @current_funcdef_number, align 4
  %call179 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay178, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i32 0, i32 0), i32 %112) #5
  br label %do.end.180

do.end.180:                                       ; preds = %do.body.177
  %113 = load %struct.die_struct*, %struct.die_struct** %subr_die, align 8
  %arraydecay181 = getelementptr inbounds [30 x i8], [30 x i8]* %label_id, i32 0, i32 0
  call void @add_AT_lbl_id(%struct.die_struct* %113, i32 18, i8* %arraydecay181)
  %114 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %115 = load %struct.die_struct*, %struct.die_struct** %subr_die, align 8
  call void @add_pubname(%union.tree_node* %114, %struct.die_struct* %115)
  %116 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %117 = load %struct.die_struct*, %struct.die_struct** %subr_die, align 8
  call void @add_arange(%union.tree_node* %116, %struct.die_struct* %117)
  %118 = load i32, i32* @frame_pointer_needed, align 4
  %tobool182 = icmp ne i32 %118, 0
  br i1 %tobool182, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.end.180
  %119 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 4), align 8
  br label %cond.end

cond.false:                                       ; preds = %do.end.180
  %120 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %119, %cond.true ], [ %120, %cond.false ]
  store %struct.rtx_def* %cond, %struct.rtx_def** %fp_reg, align 8
  %121 = load %struct.die_struct*, %struct.die_struct** %subr_die, align 8
  %122 = load %struct.rtx_def*, %struct.rtx_def** %fp_reg, align 8
  %call183 = call %struct.dw_loc_descr_struct* @reg_loc_descriptor(%struct.rtx_def* %122)
  call void @add_AT_loc(%struct.die_struct* %121, i32 64, %struct.dw_loc_descr_struct* %call183)
  br label %if.end.184

if.end.184:                                       ; preds = %cond.end, %if.else.161
  br label %if.end.185

if.end.185:                                       ; preds = %if.end.184, %if.end.160
  br label %if.end.186

if.end.186:                                       ; preds = %if.end.185, %if.end.131
  %123 = load i32, i32* @debug_info_level, align 4
  %cmp187 = icmp ule i32 %123, 1
  br i1 %cmp187, label %if.then.189, label %if.else.190

if.then.189:                                      ; preds = %if.end.186
  br label %if.end.233

if.else.190:                                      ; preds = %if.end.186
  %124 = load i32, i32* %declaration, align 4
  %tobool191 = icmp ne i32 %124, 0
  br i1 %tobool191, label %if.then.192, label %if.else.193

if.then.192:                                      ; preds = %if.else.190
  %125 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %126 = load %struct.die_struct*, %struct.die_struct** %subr_die, align 8
  call void @gen_formal_types_die(%union.tree_node* %125, %struct.die_struct* %126)
  br label %if.end.232

if.else.193:                                      ; preds = %if.else.190
  %127 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl194 = bitcast %union.tree_node* %127 to %struct.tree_decl*
  %arguments = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl194, i32 0, i32 10
  %128 = load %union.tree_node*, %union.tree_node** %arguments, align 8
  store %union.tree_node* %128, %union.tree_node** %arg_decls, align 8
  %129 = load %union.tree_node*, %union.tree_node** %arg_decls, align 8
  store %union.tree_node* %129, %union.tree_node** %parm, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else.193
  %130 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %tobool195 = icmp ne %union.tree_node* %130, null
  br i1 %tobool195, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %131 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %common196 = bitcast %union.tree_node* %131 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common196, i32 0, i32 2
  %bf.load197 = load i32, i32* %code, align 8
  %bf.clear198 = and i32 %bf.load197, 255
  %cmp199 = icmp eq i32 %bf.clear198, 35
  br i1 %cmp199, label %if.then.201, label %if.end.212

if.then.201:                                      ; preds = %for.body
  %132 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %decl202 = bitcast %union.tree_node* %132 to %struct.tree_decl*
  %name = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl202, i32 0, i32 8
  %133 = load %union.tree_node*, %union.tree_node** %name, align 8
  %tobool203 = icmp ne %union.tree_node* %133, null
  br i1 %tobool203, label %land.lhs.true.204, label %if.else.210

land.lhs.true.204:                                ; preds = %if.then.201
  %134 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %decl205 = bitcast %union.tree_node* %134 to %struct.tree_decl*
  %name206 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl205, i32 0, i32 8
  %135 = load %union.tree_node*, %union.tree_node** %name206, align 8
  %identifier = bitcast %union.tree_node* %135 to %struct.tree_identifier*
  %id = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1
  %str = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 1
  %136 = load i8*, i8** %str, align 8
  %call207 = call i32 @strcmp(i8* %136, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.385, i32 0, i32 0)) #7
  %tobool208 = icmp ne i32 %call207, 0
  br i1 %tobool208, label %if.else.210, label %if.then.209

if.then.209:                                      ; preds = %land.lhs.true.204
  %137 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %138 = load %struct.die_struct*, %struct.die_struct** %subr_die, align 8
  call void @gen_unspecified_parameters_die(%union.tree_node* %137, %struct.die_struct* %138)
  br label %if.end.211

if.else.210:                                      ; preds = %land.lhs.true.204, %if.then.201
  %139 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %140 = load %struct.die_struct*, %struct.die_struct** %subr_die, align 8
  call void @gen_decl_die(%union.tree_node* %139, %struct.die_struct* %140)
  br label %if.end.211

if.end.211:                                       ; preds = %if.else.210, %if.then.209
  br label %if.end.212

if.end.212:                                       ; preds = %if.end.211, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.212
  %141 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %common213 = bitcast %union.tree_node* %141 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common213, i32 0, i32 0
  %142 = load %union.tree_node*, %union.tree_node** %chain, align 8
  store %union.tree_node* %142, %union.tree_node** %parm, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %143 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common214 = bitcast %union.tree_node* %143 to %struct.tree_common*
  %type215 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common214, i32 0, i32 1
  %144 = load %union.tree_node*, %union.tree_node** %type215, align 8
  %type216 = bitcast %union.tree_node* %144 to %struct.tree_type*
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type216, i32 0, i32 1
  %145 = load %union.tree_node*, %union.tree_node** %values, align 8
  store %union.tree_node* %145, %union.tree_node** %fn_arg_types, align 8
  %146 = load %union.tree_node*, %union.tree_node** %fn_arg_types, align 8
  %cmp217 = icmp ne %union.tree_node* %146, null
  br i1 %cmp217, label %if.then.219, label %if.else.225

if.then.219:                                      ; preds = %for.end
  %147 = load %union.tree_node*, %union.tree_node** %fn_arg_types, align 8
  %call220 = call %union.tree_node* @tree_last(%union.tree_node* %147)
  %list = bitcast %union.tree_node* %call220 to %struct.tree_list*
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2
  %148 = load %union.tree_node*, %union.tree_node** %value, align 8
  %149 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 27), align 8
  %cmp221 = icmp ne %union.tree_node* %148, %149
  br i1 %cmp221, label %if.then.223, label %if.end.224

if.then.223:                                      ; preds = %if.then.219
  %150 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %151 = load %struct.die_struct*, %struct.die_struct** %subr_die, align 8
  call void @gen_unspecified_parameters_die(%union.tree_node* %150, %struct.die_struct* %151)
  br label %if.end.224

if.end.224:                                       ; preds = %if.then.223, %if.then.219
  br label %if.end.231

if.else.225:                                      ; preds = %for.end
  %152 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl226 = bitcast %union.tree_node* %152 to %struct.tree_decl*
  %initial = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl226, i32 0, i32 12
  %153 = load %union.tree_node*, %union.tree_node** %initial, align 8
  %cmp227 = icmp eq %union.tree_node* %153, null
  br i1 %cmp227, label %if.then.229, label %if.end.230

if.then.229:                                      ; preds = %if.else.225
  %154 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %155 = load %struct.die_struct*, %struct.die_struct** %subr_die, align 8
  call void @gen_unspecified_parameters_die(%union.tree_node* %154, %struct.die_struct* %155)
  br label %if.end.230

if.end.230:                                       ; preds = %if.then.229, %if.else.225
  br label %if.end.231

if.end.231:                                       ; preds = %if.end.230, %if.end.224
  br label %if.end.232

if.end.232:                                       ; preds = %if.end.231, %if.then.192
  br label %if.end.233

if.end.233:                                       ; preds = %if.end.232, %if.then.189
  %156 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl234 = bitcast %union.tree_node* %156 to %struct.tree_decl*
  %initial235 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl234, i32 0, i32 12
  %157 = load %union.tree_node*, %union.tree_node** %initial235, align 8
  store %union.tree_node* %157, %union.tree_node** %outer_scope, align 8
  %158 = load i32, i32* %declaration, align 4
  %tobool236 = icmp ne i32 %158, 0
  br i1 %tobool236, label %if.end.245, label %land.lhs.true.237

land.lhs.true.237:                                ; preds = %if.end.233
  %159 = load %union.tree_node*, %union.tree_node** %outer_scope, align 8
  %common238 = bitcast %union.tree_node* %159 to %struct.tree_common*
  %code239 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common238, i32 0, i32 2
  %bf.load240 = load i32, i32* %code239, align 8
  %bf.clear241 = and i32 %bf.load240, 255
  %cmp242 = icmp ne i32 %bf.clear241, 0
  br i1 %cmp242, label %if.then.244, label %if.end.245

if.then.244:                                      ; preds = %land.lhs.true.237
  store i32 0, i32* @current_function_has_inlines, align 4
  %160 = load %union.tree_node*, %union.tree_node** %outer_scope, align 8
  %161 = load %struct.die_struct*, %struct.die_struct** %subr_die, align 8
  call void @decls_for_scope(%union.tree_node* %160, %struct.die_struct* %161, i32 0)
  br label %if.end.245

if.end.245:                                       ; preds = %if.then.36, %if.then.244, %land.lhs.true.237, %if.end.233
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal %struct.die_struct* @lookup_type_die(%union.tree_node* %type) #3 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type1 = bitcast %union.tree_node* %0 to %struct.tree_type*
  %symtab = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 10
  %pointer = bitcast %union.anon.2* %symtab to i8**
  %1 = load i8*, i8** %pointer, align 8
  %2 = bitcast i8* %1 to %struct.die_struct*
  ret %struct.die_struct* %2
}

; Function Attrs: nounwind uwtable
define internal void @gen_variable_die(%union.tree_node* %decl, %struct.die_struct* %context_die) #0 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %context_die.addr = alloca %struct.die_struct*, align 8
  %origin = alloca %union.tree_node*, align 8
  %var_die = alloca %struct.die_struct*, align 8
  %old_die = alloca %struct.die_struct*, align 8
  %declaration = alloca i32, align 4
  %file_index = alloca i32, align 4
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  store %struct.die_struct* %context_die, %struct.die_struct** %context_die.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %call = call %union.tree_node* @decl_ultimate_origin(%union.tree_node* %0)
  store %union.tree_node* %call, %union.tree_node** %origin, align 8
  %1 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %call1 = call %struct.die_struct* @new_die(i32 52, %struct.die_struct* %1, %union.tree_node* %2)
  store %struct.die_struct* %call1, %struct.die_struct** %var_die, align 8
  %3 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %call2 = call %struct.die_struct* @lookup_decl_die(%union.tree_node* %3)
  store %struct.die_struct* %call2, %struct.die_struct** %old_die, align 8
  %4 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl3 = bitcast %union.tree_node* %4 to %struct.tree_decl*
  %external_flag = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl3, i32 0, i32 5
  %5 = bitcast i48* %external_flag to i64*
  %bf.load = load i64, i64* %5, align 8
  %bf.lshr = lshr i64 %bf.load, 8
  %bf.clear = and i64 %bf.lshr, 1
  %bf.cast = trunc i64 %bf.clear to i32
  %tobool = icmp ne i32 %bf.cast, 0
  br i1 %tobool, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %6 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  %call4 = call i32 @class_scope_p(%struct.die_struct* %6)
  %tobool5 = icmp ne i32 %call4, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %7 = phi i1 [ true, %entry ], [ %tobool5, %lor.rhs ]
  %lor.ext = zext i1 %7 to i32
  store i32 %lor.ext, i32* %declaration, align 4
  %8 = load %union.tree_node*, %union.tree_node** %origin, align 8
  %cmp = icmp ne %union.tree_node* %8, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %lor.end
  %9 = load %struct.die_struct*, %struct.die_struct** %var_die, align 8
  %10 = load %union.tree_node*, %union.tree_node** %origin, align 8
  call void @add_abstract_origin_attribute(%struct.die_struct* %9, %union.tree_node* %10)
  br label %if.end.74

if.else:                                          ; preds = %lor.end
  %11 = load %struct.die_struct*, %struct.die_struct** %old_die, align 8
  %tobool6 = icmp ne %struct.die_struct* %11, null
  br i1 %tobool6, label %land.lhs.true, label %if.else.33

land.lhs.true:                                    ; preds = %if.else
  %12 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common = bitcast %union.tree_node* %12 to %struct.tree_common*
  %static_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load7 = load i32, i32* %static_flag, align 8
  %bf.lshr8 = lshr i32 %bf.load7, 18
  %bf.clear9 = and i32 %bf.lshr8, 1
  %tobool10 = icmp ne i32 %bf.clear9, 0
  br i1 %tobool10, label %land.lhs.true.11, label %if.else.33

land.lhs.true.11:                                 ; preds = %land.lhs.true
  %13 = load %struct.die_struct*, %struct.die_struct** %old_die, align 8
  %call12 = call i32 @get_AT_flag(%struct.die_struct* %13, i32 60)
  %cmp13 = icmp eq i32 %call12, 1
  br i1 %cmp13, label %if.then.14, label %if.else.33

if.then.14:                                       ; preds = %land.lhs.true.11
  %14 = load %struct.die_struct*, %struct.die_struct** %var_die, align 8
  %15 = load %struct.die_struct*, %struct.die_struct** %old_die, align 8
  call void @add_AT_die_ref(%struct.die_struct* %14, i32 71, %struct.die_struct* %15)
  %16 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl15 = bitcast %union.tree_node* %16 to %struct.tree_decl*
  %name = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl15, i32 0, i32 8
  %17 = load %union.tree_node*, %union.tree_node** %name, align 8
  %tobool16 = icmp ne %union.tree_node* %17, null
  br i1 %tobool16, label %if.then.17, label %if.end.32

if.then.17:                                       ; preds = %if.then.14
  %18 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl18 = bitcast %union.tree_node* %18 to %struct.tree_decl*
  %filename = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl18, i32 0, i32 1
  %19 = load i8*, i8** %filename, align 8
  %call19 = call i32 @lookup_filename(i8* %19)
  store i32 %call19, i32* %file_index, align 4
  %20 = load %struct.die_struct*, %struct.die_struct** %old_die, align 8
  %call20 = call i32 @get_AT_unsigned(%struct.die_struct* %20, i32 58)
  %21 = load i32, i32* %file_index, align 4
  %cmp21 = icmp ne i32 %call20, %21
  br i1 %cmp21, label %if.then.22, label %if.end

if.then.22:                                       ; preds = %if.then.17
  %22 = load %struct.die_struct*, %struct.die_struct** %var_die, align 8
  %23 = load i32, i32* %file_index, align 4
  %conv = zext i32 %23 to i64
  call void @add_AT_unsigned(%struct.die_struct* %22, i32 58, i64 %conv)
  br label %if.end

if.end:                                           ; preds = %if.then.22, %if.then.17
  %24 = load %struct.die_struct*, %struct.die_struct** %old_die, align 8
  %call23 = call i32 @get_AT_unsigned(%struct.die_struct* %24, i32 59)
  %25 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl24 = bitcast %union.tree_node* %25 to %struct.tree_decl*
  %linenum = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl24, i32 0, i32 2
  %26 = load i32, i32* %linenum, align 4
  %cmp25 = icmp ne i32 %call23, %26
  br i1 %cmp25, label %if.then.27, label %if.end.31

if.then.27:                                       ; preds = %if.end
  %27 = load %struct.die_struct*, %struct.die_struct** %var_die, align 8
  %28 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl28 = bitcast %union.tree_node* %28 to %struct.tree_decl*
  %linenum29 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl28, i32 0, i32 2
  %29 = load i32, i32* %linenum29, align 4
  %conv30 = sext i32 %29 to i64
  call void @add_AT_unsigned(%struct.die_struct* %27, i32 59, i64 %conv30)
  br label %if.end.31

if.end.31:                                        ; preds = %if.then.27, %if.end
  br label %if.end.32

if.end.32:                                        ; preds = %if.end.31, %if.then.14
  br label %if.end.73

if.else.33:                                       ; preds = %land.lhs.true.11, %land.lhs.true, %if.else
  %30 = load %struct.die_struct*, %struct.die_struct** %var_die, align 8
  %31 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  call void @add_name_and_src_coords_attributes(%struct.die_struct* %30, %union.tree_node* %31)
  %32 = load %struct.die_struct*, %struct.die_struct** %var_die, align 8
  %33 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common34 = bitcast %union.tree_node* %33 to %struct.tree_common*
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common34, i32 0, i32 1
  %34 = load %union.tree_node*, %union.tree_node** %type, align 8
  %35 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common35 = bitcast %union.tree_node* %35 to %struct.tree_common*
  %readonly_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common35, i32 0, i32 2
  %bf.load36 = load i32, i32* %readonly_flag, align 8
  %bf.lshr37 = lshr i32 %bf.load36, 12
  %bf.clear38 = and i32 %bf.lshr37, 1
  %36 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common39 = bitcast %union.tree_node* %36 to %struct.tree_common*
  %volatile_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common39, i32 0, i32 2
  %bf.load40 = load i32, i32* %volatile_flag, align 8
  %bf.lshr41 = lshr i32 %bf.load40, 11
  %bf.clear42 = and i32 %bf.lshr41, 1
  %37 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  call void @add_type_attribute(%struct.die_struct* %32, %union.tree_node* %34, i32 %bf.clear38, i32 %bf.clear42, %struct.die_struct* %37)
  %38 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common43 = bitcast %union.tree_node* %38 to %struct.tree_common*
  %public_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common43, i32 0, i32 2
  %bf.load44 = load i32, i32* %public_flag, align 8
  %bf.lshr45 = lshr i32 %bf.load44, 19
  %bf.clear46 = and i32 %bf.lshr45, 1
  %tobool47 = icmp ne i32 %bf.clear46, 0
  br i1 %tobool47, label %if.then.48, label %if.end.49

if.then.48:                                       ; preds = %if.else.33
  %39 = load %struct.die_struct*, %struct.die_struct** %var_die, align 8
  call void @add_AT_flag(%struct.die_struct* %39, i32 63, i32 1)
  br label %if.end.49

if.end.49:                                        ; preds = %if.then.48, %if.else.33
  %40 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl50 = bitcast %union.tree_node* %40 to %struct.tree_decl*
  %artificial_flag = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl50, i32 0, i32 5
  %41 = bitcast i48* %artificial_flag to i64*
  %bf.load51 = load i64, i64* %41, align 8
  %bf.lshr52 = lshr i64 %bf.load51, 22
  %bf.clear53 = and i64 %bf.lshr52, 1
  %bf.cast54 = trunc i64 %bf.clear53 to i32
  %tobool55 = icmp ne i32 %bf.cast54, 0
  br i1 %tobool55, label %if.then.56, label %if.end.57

if.then.56:                                       ; preds = %if.end.49
  %42 = load %struct.die_struct*, %struct.die_struct** %var_die, align 8
  call void @add_AT_flag(%struct.die_struct* %42, i32 52, i32 1)
  br label %if.end.57

if.end.57:                                        ; preds = %if.then.56, %if.end.49
  %43 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common58 = bitcast %union.tree_node* %43 to %struct.tree_common*
  %protected_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common58, i32 0, i32 2
  %bf.load59 = load i32, i32* %protected_flag, align 8
  %bf.lshr60 = lshr i32 %bf.load59, 21
  %bf.clear61 = and i32 %bf.lshr60, 1
  %tobool62 = icmp ne i32 %bf.clear61, 0
  br i1 %tobool62, label %if.then.63, label %if.else.64

if.then.63:                                       ; preds = %if.end.57
  %44 = load %struct.die_struct*, %struct.die_struct** %var_die, align 8
  call void @add_AT_unsigned(%struct.die_struct* %44, i32 50, i64 2)
  br label %if.end.72

if.else.64:                                       ; preds = %if.end.57
  %45 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common65 = bitcast %union.tree_node* %45 to %struct.tree_common*
  %private_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common65, i32 0, i32 2
  %bf.load66 = load i32, i32* %private_flag, align 8
  %bf.lshr67 = lshr i32 %bf.load66, 20
  %bf.clear68 = and i32 %bf.lshr67, 1
  %tobool69 = icmp ne i32 %bf.clear68, 0
  br i1 %tobool69, label %if.then.70, label %if.end.71

if.then.70:                                       ; preds = %if.else.64
  %46 = load %struct.die_struct*, %struct.die_struct** %var_die, align 8
  call void @add_AT_unsigned(%struct.die_struct* %46, i32 50, i64 3)
  br label %if.end.71

if.end.71:                                        ; preds = %if.then.70, %if.else.64
  br label %if.end.72

if.end.72:                                        ; preds = %if.end.71, %if.then.63
  br label %if.end.73

if.end.73:                                        ; preds = %if.end.72, %if.end.32
  br label %if.end.74

if.end.74:                                        ; preds = %if.end.73, %if.then
  %47 = load i32, i32* %declaration, align 4
  %tobool75 = icmp ne i32 %47, 0
  br i1 %tobool75, label %if.then.76, label %if.end.77

if.then.76:                                       ; preds = %if.end.74
  %48 = load %struct.die_struct*, %struct.die_struct** %var_die, align 8
  call void @add_AT_flag(%struct.die_struct* %48, i32 60, i32 1)
  br label %if.end.77

if.end.77:                                        ; preds = %if.then.76, %if.end.74
  %49 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  %call78 = call i32 @class_scope_p(%struct.die_struct* %49)
  %tobool79 = icmp ne i32 %call78, 0
  br i1 %tobool79, label %if.then.86, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.77
  %50 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl80 = bitcast %union.tree_node* %50 to %struct.tree_decl*
  %abstract_flag = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl80, i32 0, i32 5
  %51 = bitcast i48* %abstract_flag to i64*
  %bf.load81 = load i64, i64* %51, align 8
  %bf.lshr82 = lshr i64 %bf.load81, 15
  %bf.clear83 = and i64 %bf.lshr82, 1
  %bf.cast84 = trunc i64 %bf.clear83 to i32
  %tobool85 = icmp ne i32 %bf.cast84, 0
  br i1 %tobool85, label %if.then.86, label %if.end.87

if.then.86:                                       ; preds = %lor.lhs.false, %if.end.77
  %52 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %53 = load %struct.die_struct*, %struct.die_struct** %var_die, align 8
  call void @equate_decl_number_to_die(%union.tree_node* %52, %struct.die_struct* %53)
  br label %if.end.87

if.end.87:                                        ; preds = %if.then.86, %lor.lhs.false
  %54 = load i32, i32* %declaration, align 4
  %tobool88 = icmp ne i32 %54, 0
  br i1 %tobool88, label %if.else.98, label %land.lhs.true.89

land.lhs.true.89:                                 ; preds = %if.end.87
  %55 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl90 = bitcast %union.tree_node* %55 to %struct.tree_decl*
  %abstract_flag91 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl90, i32 0, i32 5
  %56 = bitcast i48* %abstract_flag91 to i64*
  %bf.load92 = load i64, i64* %56, align 8
  %bf.lshr93 = lshr i64 %bf.load92, 15
  %bf.clear94 = and i64 %bf.lshr93, 1
  %bf.cast95 = trunc i64 %bf.clear94 to i32
  %tobool96 = icmp ne i32 %bf.cast95, 0
  br i1 %tobool96, label %if.else.98, label %if.then.97

if.then.97:                                       ; preds = %land.lhs.true.89
  %57 = load %struct.die_struct*, %struct.die_struct** %var_die, align 8
  %58 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  call void @add_location_or_const_value_attribute(%struct.die_struct* %57, %union.tree_node* %58)
  %59 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %60 = load %struct.die_struct*, %struct.die_struct** %var_die, align 8
  call void @add_pubname(%union.tree_node* %59, %struct.die_struct* %60)
  br label %if.end.99

if.else.98:                                       ; preds = %land.lhs.true.89, %if.end.87
  %61 = load %struct.die_struct*, %struct.die_struct** %var_die, align 8
  %62 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  call void @tree_add_const_value_attribute(%struct.die_struct* %61, %union.tree_node* %62)
  br label %if.end.99

if.end.99:                                        ; preds = %if.else.98, %if.then.97
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @pop_decl_scope() #3 {
entry:
  %0 = load %struct.varray_head_tag*, %struct.varray_head_tag** @decl_scope_table, align 8
  %elements_used = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %0, i32 0, i32 1
  %1 = load i64, i64* %elements_used, align 8
  %cmp = icmp ule i64 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 9553, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @__FUNCTION__.pop_decl_scope, i32 0, i32 0)) #8
  unreachable

if.end:                                           ; preds = %entry
  %2 = load %struct.varray_head_tag*, %struct.varray_head_tag** @decl_scope_table, align 8
  %elements_used1 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %2, i32 0, i32 1
  %3 = load i64, i64* %elements_used1, align 8
  %dec = add i64 %3, -1
  store i64 %dec, i64* %elements_used1, align 8
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal %union.tree_node* @type_main_variant(%union.tree_node* %type) #3 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type1 = bitcast %union.tree_node* %0 to %struct.tree_type*
  %main_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 15
  %1 = load %union.tree_node*, %union.tree_node** %main_variant, align 8
  store %union.tree_node* %1, %union.tree_node** %type.addr, align 8
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common = bitcast %union.tree_node* %2 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 18
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %4 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type2 = bitcast %union.tree_node* %4 to %struct.tree_type*
  %main_variant3 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type2, i32 0, i32 15
  %5 = load %union.tree_node*, %union.tree_node** %main_variant3, align 8
  %cmp4 = icmp ne %union.tree_node* %3, %5
  br i1 %cmp4, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type5 = bitcast %union.tree_node* %6 to %struct.tree_type*
  %main_variant6 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type5, i32 0, i32 15
  %7 = load %union.tree_node*, %union.tree_node** %main_variant6, align 8
  store %union.tree_node* %7, %union.tree_node** %type.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end

if.end:                                           ; preds = %while.end, %entry
  %8 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  ret %union.tree_node* %8
}

; Function Attrs: nounwind uwtable
define internal void @gen_ptr_to_mbr_type_die(%union.tree_node* %type, %struct.die_struct* %context_die) #0 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  %context_die.addr = alloca %struct.die_struct*, align 8
  %ptr_die = alloca %struct.die_struct*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  store %struct.die_struct* %context_die, %struct.die_struct** %context_die.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %1 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  %call = call %struct.die_struct* @scope_die_for(%union.tree_node* %0, %struct.die_struct* %1)
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %call1 = call %struct.die_struct* @new_die(i32 31, %struct.die_struct* %call, %union.tree_node* %2)
  store %struct.die_struct* %call1, %struct.die_struct** %ptr_die, align 8
  %3 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %4 = load %struct.die_struct*, %struct.die_struct** %ptr_die, align 8
  call void @equate_type_number_to_die(%union.tree_node* %3, %struct.die_struct* %4)
  %5 = load %struct.die_struct*, %struct.die_struct** %ptr_die, align 8
  %6 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type2 = bitcast %union.tree_node* %6 to %struct.tree_type*
  %maxval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type2, i32 0, i32 13
  %7 = load %union.tree_node*, %union.tree_node** %maxval, align 8
  %call3 = call %struct.die_struct* @lookup_type_die(%union.tree_node* %7)
  call void @add_AT_die_ref(%struct.die_struct* %5, i32 29, %struct.die_struct* %call3)
  %8 = load %struct.die_struct*, %struct.die_struct** %ptr_die, align 8
  %9 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common = bitcast %union.tree_node* %9 to %struct.tree_common*
  %type4 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1
  %10 = load %union.tree_node*, %union.tree_node** %type4, align 8
  %11 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  call void @add_type_attribute(%struct.die_struct* %8, %union.tree_node* %10, i32 0, i32 0, %struct.die_struct* %11)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @gen_set_type_die(%union.tree_node* %type, %struct.die_struct* %context_die) #0 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  %context_die.addr = alloca %struct.die_struct*, align 8
  %type_die = alloca %struct.die_struct*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  store %struct.die_struct* %context_die, %struct.die_struct** %context_die.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %1 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  %call = call %struct.die_struct* @scope_die_for(%union.tree_node* %0, %struct.die_struct* %1)
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %call1 = call %struct.die_struct* @new_die(i32 32, %struct.die_struct* %call, %union.tree_node* %2)
  store %struct.die_struct* %call1, %struct.die_struct** %type_die, align 8
  %3 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %4 = load %struct.die_struct*, %struct.die_struct** %type_die, align 8
  call void @equate_type_number_to_die(%union.tree_node* %3, %struct.die_struct* %4)
  %5 = load %struct.die_struct*, %struct.die_struct** %type_die, align 8
  %6 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common = bitcast %union.tree_node* %6 to %struct.tree_common*
  %type2 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1
  %7 = load %union.tree_node*, %union.tree_node** %type2, align 8
  %8 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  call void @add_type_attribute(%struct.die_struct* %5, %union.tree_node* %7, i32 0, i32 0, %struct.die_struct* %8)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @gen_subroutine_type_die(%union.tree_node* %type, %struct.die_struct* %context_die) #0 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  %context_die.addr = alloca %struct.die_struct*, align 8
  %return_type = alloca %union.tree_node*, align 8
  %subr_die = alloca %struct.die_struct*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  store %struct.die_struct* %context_die, %struct.die_struct** %context_die.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1
  %1 = load %union.tree_node*, %union.tree_node** %type1, align 8
  store %union.tree_node* %1, %union.tree_node** %return_type, align 8
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %3 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  %call = call %struct.die_struct* @scope_die_for(%union.tree_node* %2, %struct.die_struct* %3)
  %4 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %call2 = call %struct.die_struct* @new_die(i32 21, %struct.die_struct* %call, %union.tree_node* %4)
  store %struct.die_struct* %call2, %struct.die_struct** %subr_die, align 8
  %5 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %6 = load %struct.die_struct*, %struct.die_struct** %subr_die, align 8
  call void @equate_type_number_to_die(%union.tree_node* %5, %struct.die_struct* %6)
  %7 = load %struct.die_struct*, %struct.die_struct** %subr_die, align 8
  %8 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  call void @add_prototyped_attribute(%struct.die_struct* %7, %union.tree_node* %8)
  %9 = load %struct.die_struct*, %struct.die_struct** %subr_die, align 8
  %10 = load %union.tree_node*, %union.tree_node** %return_type, align 8
  %11 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  call void @add_type_attribute(%struct.die_struct* %9, %union.tree_node* %10, i32 0, i32 0, %struct.die_struct* %11)
  %12 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %13 = load %struct.die_struct*, %struct.die_struct** %subr_die, align 8
  call void @gen_formal_types_die(%union.tree_node* %12, %struct.die_struct* %13)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @gen_string_type_die(%union.tree_node* %type, %struct.die_struct* %context_die) #0 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  %context_die.addr = alloca %struct.die_struct*, align 8
  %type_die = alloca %struct.die_struct*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  store %struct.die_struct* %context_die, %struct.die_struct** %context_die.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %1 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  %call = call %struct.die_struct* @scope_die_for(%union.tree_node* %0, %struct.die_struct* %1)
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %call1 = call %struct.die_struct* @new_die(i32 18, %struct.die_struct* %call, %union.tree_node* %2)
  store %struct.die_struct* %call1, %struct.die_struct** %type_die, align 8
  %3 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %4 = load %struct.die_struct*, %struct.die_struct** %type_die, align 8
  call void @equate_type_number_to_die(%union.tree_node* %3, %struct.die_struct* %4)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @gen_array_type_die(%union.tree_node* %type, %struct.die_struct* %context_die) #0 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  %context_die.addr = alloca %struct.die_struct*, align 8
  %scope_die = alloca %struct.die_struct*, align 8
  %array_die = alloca %struct.die_struct*, align 8
  %element_type = alloca %union.tree_node*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  store %struct.die_struct* %context_die, %struct.die_struct** %context_die.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %1 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  %call = call %struct.die_struct* @scope_die_for(%union.tree_node* %0, %struct.die_struct* %1)
  store %struct.die_struct* %call, %struct.die_struct** %scope_die, align 8
  %2 = load %struct.die_struct*, %struct.die_struct** %scope_die, align 8
  %3 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %call1 = call %struct.die_struct* @new_die(i32 1, %struct.die_struct* %2, %union.tree_node* %3)
  store %struct.die_struct* %call1, %struct.die_struct** %array_die, align 8
  %4 = load %struct.die_struct*, %struct.die_struct** %array_die, align 8
  %5 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %call2 = call i8* @type_tag(%union.tree_node* %5)
  call void @add_name_attribute(%struct.die_struct* %4, i8* %call2)
  %6 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %7 = load %struct.die_struct*, %struct.die_struct** %array_die, align 8
  call void @equate_type_number_to_die(%union.tree_node* %6, %struct.die_struct* %7)
  %8 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common = bitcast %union.tree_node* %8 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 9
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %9 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type3 = bitcast %union.tree_node* %9 to %struct.tree_type*
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type3, i32 0, i32 1
  %10 = load %union.tree_node*, %union.tree_node** %values, align 8
  %type4 = bitcast %union.tree_node* %10 to %struct.tree_type*
  %values5 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type4, i32 0, i32 1
  %11 = load %union.tree_node*, %union.tree_node** %values5, align 8
  %common6 = bitcast %union.tree_node* %11 to %struct.tree_common*
  %type7 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common6, i32 0, i32 1
  %12 = load %union.tree_node*, %union.tree_node** %type7, align 8
  store %union.tree_node* %12, %union.tree_node** %type.addr, align 8
  %13 = load %struct.die_struct*, %struct.die_struct** %array_die, align 8
  call void @add_AT_flag(%struct.die_struct* %13, i32 8455, i32 1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %14 = load %struct.die_struct*, %struct.die_struct** %array_die, align 8
  %15 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  call void @add_subscript_info(%struct.die_struct* %14, %union.tree_node* %15)
  %16 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common8 = bitcast %union.tree_node* %16 to %struct.tree_common*
  %type9 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common8, i32 0, i32 1
  %17 = load %union.tree_node*, %union.tree_node** %type9, align 8
  store %union.tree_node* %17, %union.tree_node** %element_type, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %18 = load %union.tree_node*, %union.tree_node** %element_type, align 8
  %common10 = bitcast %union.tree_node* %18 to %struct.tree_common*
  %code11 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common10, i32 0, i32 2
  %bf.load12 = load i32, i32* %code11, align 8
  %bf.clear13 = and i32 %bf.load12, 255
  %cmp14 = icmp eq i32 %bf.clear13, 18
  br i1 %cmp14, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %19 = load %union.tree_node*, %union.tree_node** %element_type, align 8
  %common15 = bitcast %union.tree_node* %19 to %struct.tree_common*
  %type16 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common15, i32 0, i32 1
  %20 = load %union.tree_node*, %union.tree_node** %type16, align 8
  store %union.tree_node* %20, %union.tree_node** %element_type, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %21 = load %union.tree_node*, %union.tree_node** %element_type, align 8
  %22 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  call void @gen_type_die(%union.tree_node* %21, %struct.die_struct* %22)
  %23 = load %struct.die_struct*, %struct.die_struct** %array_die, align 8
  %24 = load %union.tree_node*, %union.tree_node** %element_type, align 8
  %25 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  call void @add_type_attribute(%struct.die_struct* %23, %union.tree_node* %24, i32 0, i32 0, %struct.die_struct* %25)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @gen_enumeration_type_die(%union.tree_node* %type, %struct.die_struct* %context_die) #0 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  %context_die.addr = alloca %struct.die_struct*, align 8
  %type_die = alloca %struct.die_struct*, align 8
  %link = alloca %union.tree_node*, align 8
  %enum_die = alloca %struct.die_struct*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  store %struct.die_struct* %context_die, %struct.die_struct** %context_die.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %call = call %struct.die_struct* @lookup_type_die(%union.tree_node* %0)
  store %struct.die_struct* %call, %struct.die_struct** %type_die, align 8
  %1 = load %struct.die_struct*, %struct.die_struct** %type_die, align 8
  %cmp = icmp eq %struct.die_struct* %1, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %3 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  %call1 = call %struct.die_struct* @scope_die_for(%union.tree_node* %2, %struct.die_struct* %3)
  %4 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %call2 = call %struct.die_struct* @new_die(i32 4, %struct.die_struct* %call1, %union.tree_node* %4)
  store %struct.die_struct* %call2, %struct.die_struct** %type_die, align 8
  %5 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %6 = load %struct.die_struct*, %struct.die_struct** %type_die, align 8
  call void @equate_type_number_to_die(%union.tree_node* %5, %struct.die_struct* %6)
  %7 = load %struct.die_struct*, %struct.die_struct** %type_die, align 8
  %8 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %call3 = call i8* @type_tag(%union.tree_node* %8)
  call void @add_name_attribute(%struct.die_struct* %7, i8* %call3)
  br label %if.end.7

if.else:                                          ; preds = %entry
  %9 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type4 = bitcast %union.tree_node* %9 to %struct.tree_type*
  %size = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type4, i32 0, i32 2
  %10 = load %union.tree_node*, %union.tree_node** %size, align 8
  %tobool = icmp ne %union.tree_node* %10, null
  br i1 %tobool, label %if.else.6, label %if.then.5

if.then.5:                                        ; preds = %if.else
  br label %if.end.46

if.else.6:                                        ; preds = %if.else
  %11 = load %struct.die_struct*, %struct.die_struct** %type_die, align 8
  call void @remove_AT(%struct.die_struct* %11, i32 60)
  br label %if.end

if.end:                                           ; preds = %if.else.6
  br label %if.end.7

if.end.7:                                         ; preds = %if.end, %if.then
  %12 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type8 = bitcast %union.tree_node* %12 to %struct.tree_type*
  %size9 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type8, i32 0, i32 2
  %13 = load %union.tree_node*, %union.tree_node** %size9, align 8
  %tobool10 = icmp ne %union.tree_node* %13, null
  br i1 %tobool10, label %if.then.11, label %if.else.45

if.then.11:                                       ; preds = %if.end.7
  %14 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common = bitcast %union.tree_node* %14 to %struct.tree_common*
  %asm_written_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %asm_written_flag, align 8
  %bf.clear = and i32 %bf.load, -16385
  %bf.set = or i32 %bf.clear, 16384
  store i32 %bf.set, i32* %asm_written_flag, align 8
  %15 = load %struct.die_struct*, %struct.die_struct** %type_die, align 8
  %16 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  call void @add_byte_size_attribute(%struct.die_struct* %15, %union.tree_node* %16)
  %17 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common12 = bitcast %union.tree_node* %17 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common12, i32 0, i32 0
  %18 = load %union.tree_node*, %union.tree_node** %chain, align 8
  %cmp13 = icmp ne %union.tree_node* %18, null
  br i1 %cmp13, label %if.then.14, label %if.end.17

if.then.14:                                       ; preds = %if.then.11
  %19 = load %struct.die_struct*, %struct.die_struct** %type_die, align 8
  %20 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common15 = bitcast %union.tree_node* %20 to %struct.tree_common*
  %chain16 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common15, i32 0, i32 0
  %21 = load %union.tree_node*, %union.tree_node** %chain16, align 8
  call void @add_src_coords_attributes(%struct.die_struct* %19, %union.tree_node* %21)
  br label %if.end.17

if.end.17:                                        ; preds = %if.then.14, %if.then.11
  %22 = load %struct.die_struct*, %struct.die_struct** %type_die, align 8
  %die_parent = getelementptr inbounds %struct.die_struct, %struct.die_struct* %22, i32 0, i32 3
  %23 = load %struct.die_struct*, %struct.die_struct** %die_parent, align 8
  %cmp18 = icmp eq %struct.die_struct* %23, null
  br i1 %cmp18, label %if.then.19, label %if.end.21

if.then.19:                                       ; preds = %if.end.17
  %24 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %25 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  %call20 = call %struct.die_struct* @scope_die_for(%union.tree_node* %24, %struct.die_struct* %25)
  %26 = load %struct.die_struct*, %struct.die_struct** %type_die, align 8
  call void @add_child_die(%struct.die_struct* %call20, %struct.die_struct* %26)
  br label %if.end.21

if.end.21:                                        ; preds = %if.then.19, %if.end.17
  %27 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type22 = bitcast %union.tree_node* %27 to %struct.tree_type*
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type22, i32 0, i32 1
  %28 = load %union.tree_node*, %union.tree_node** %values, align 8
  store %union.tree_node* %28, %union.tree_node** %link, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.21
  %29 = load %union.tree_node*, %union.tree_node** %link, align 8
  %cmp23 = icmp ne %union.tree_node* %29, null
  br i1 %cmp23, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %30 = load %struct.die_struct*, %struct.die_struct** %type_die, align 8
  %31 = load %union.tree_node*, %union.tree_node** %link, align 8
  %call24 = call %struct.die_struct* @new_die(i32 40, %struct.die_struct* %30, %union.tree_node* %31)
  store %struct.die_struct* %call24, %struct.die_struct** %enum_die, align 8
  %32 = load %struct.die_struct*, %struct.die_struct** %enum_die, align 8
  %33 = load %union.tree_node*, %union.tree_node** %link, align 8
  %list = bitcast %union.tree_node* %33 to %struct.tree_list*
  %purpose = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 1
  %34 = load %union.tree_node*, %union.tree_node** %purpose, align 8
  %identifier = bitcast %union.tree_node* %34 to %struct.tree_identifier*
  %id = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1
  %str = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 1
  %35 = load i8*, i8** %str, align 8
  call void @add_name_attribute(%struct.die_struct* %32, i8* %35)
  %36 = load %union.tree_node*, %union.tree_node** %link, align 8
  %list25 = bitcast %union.tree_node* %36 to %struct.tree_list*
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list25, i32 0, i32 2
  %37 = load %union.tree_node*, %union.tree_node** %value, align 8
  %call26 = call i32 @host_integerp(%union.tree_node* %37, i32 0)
  %tobool27 = icmp ne i32 %call26, 0
  br i1 %tobool27, label %if.then.28, label %if.end.42

if.then.28:                                       ; preds = %for.body
  %38 = load %union.tree_node*, %union.tree_node** %link, align 8
  %list29 = bitcast %union.tree_node* %38 to %struct.tree_list*
  %value30 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list29, i32 0, i32 2
  %39 = load %union.tree_node*, %union.tree_node** %value30, align 8
  %call31 = call i32 @tree_int_cst_sgn(%union.tree_node* %39)
  %cmp32 = icmp slt i32 %call31, 0
  br i1 %cmp32, label %if.then.33, label %if.else.37

if.then.33:                                       ; preds = %if.then.28
  %40 = load %struct.die_struct*, %struct.die_struct** %enum_die, align 8
  %41 = load %union.tree_node*, %union.tree_node** %link, align 8
  %list34 = bitcast %union.tree_node* %41 to %struct.tree_list*
  %value35 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list34, i32 0, i32 2
  %42 = load %union.tree_node*, %union.tree_node** %value35, align 8
  %call36 = call i64 @tree_low_cst(%union.tree_node* %42, i32 0)
  call void @add_AT_int(%struct.die_struct* %40, i32 28, i64 %call36)
  br label %if.end.41

if.else.37:                                       ; preds = %if.then.28
  %43 = load %struct.die_struct*, %struct.die_struct** %enum_die, align 8
  %44 = load %union.tree_node*, %union.tree_node** %link, align 8
  %list38 = bitcast %union.tree_node* %44 to %struct.tree_list*
  %value39 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list38, i32 0, i32 2
  %45 = load %union.tree_node*, %union.tree_node** %value39, align 8
  %call40 = call i64 @tree_low_cst(%union.tree_node* %45, i32 0)
  call void @add_AT_unsigned(%struct.die_struct* %43, i32 28, i64 %call40)
  br label %if.end.41

if.end.41:                                        ; preds = %if.else.37, %if.then.33
  br label %if.end.42

if.end.42:                                        ; preds = %if.end.41, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.42
  %46 = load %union.tree_node*, %union.tree_node** %link, align 8
  %common43 = bitcast %union.tree_node* %46 to %struct.tree_common*
  %chain44 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common43, i32 0, i32 0
  %47 = load %union.tree_node*, %union.tree_node** %chain44, align 8
  store %union.tree_node* %47, %union.tree_node** %link, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.46

if.else.45:                                       ; preds = %if.end.7
  %48 = load %struct.die_struct*, %struct.die_struct** %type_die, align 8
  call void @add_AT_flag(%struct.die_struct* %48, i32 60, i32 1)
  br label %if.end.46

if.end.46:                                        ; preds = %if.then.5, %if.else.45, %for.end
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @gen_struct_or_union_type_die(%union.tree_node* %type, %struct.die_struct* %context_die) #0 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  %context_die.addr = alloca %struct.die_struct*, align 8
  %type_die = alloca %struct.die_struct*, align 8
  %scope_die = alloca %struct.die_struct*, align 8
  %nested = alloca i32, align 4
  %complete = alloca i32, align 4
  %old_die = alloca %struct.die_struct*, align 8
  %vtype = alloca %union.tree_node*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  store %struct.die_struct* %context_die, %struct.die_struct** %context_die.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %call = call %struct.die_struct* @lookup_type_die(%union.tree_node* %0)
  store %struct.die_struct* %call, %struct.die_struct** %type_die, align 8
  store %struct.die_struct* null, %struct.die_struct** %scope_die, align 8
  store i32 0, i32* %nested, align 4
  %1 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type1 = bitcast %union.tree_node* %1 to %struct.tree_type*
  %size = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 2
  %2 = load %union.tree_node*, %union.tree_node** %size, align 8
  %tobool = icmp ne %union.tree_node* %2, null
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common = bitcast %union.tree_node* %3 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 0
  %4 = load %union.tree_node*, %union.tree_node** %chain, align 8
  %tobool2 = icmp ne %union.tree_node* %4, null
  br i1 %tobool2, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %land.rhs
  %5 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common3 = bitcast %union.tree_node* %5 to %struct.tree_common*
  %chain4 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common3, i32 0, i32 0
  %6 = load %union.tree_node*, %union.tree_node** %chain4, align 8
  %decl = bitcast %union.tree_node* %6 to %struct.tree_decl*
  %external_flag = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl, i32 0, i32 5
  %7 = bitcast i48* %external_flag to i64*
  %bf.load = load i64, i64* %7, align 8
  %bf.lshr = lshr i64 %bf.load, 8
  %bf.clear = and i64 %bf.lshr, 1
  %bf.cast = trunc i64 %bf.clear to i32
  %tobool5 = icmp ne i32 %bf.cast, 0
  %lnot = xor i1 %tobool5, true
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %8 = phi i1 [ true, %land.rhs ], [ %lnot, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %entry
  %9 = phi i1 [ false, %entry ], [ %8, %lor.end ]
  %land.ext = zext i1 %9 to i32
  store i32 %land.ext, i32* %complete, align 4
  %10 = load %struct.die_struct*, %struct.die_struct** %type_die, align 8
  %tobool6 = icmp ne %struct.die_struct* %10, null
  br i1 %tobool6, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %land.end
  %11 = load i32, i32* %complete, align 4
  %tobool7 = icmp ne i32 %11, 0
  br i1 %tobool7, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  br label %if.end.108

if.end:                                           ; preds = %land.lhs.true, %land.end
  %12 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type8 = bitcast %union.tree_node* %12 to %struct.tree_type*
  %context = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type8, i32 0, i32 17
  %13 = load %union.tree_node*, %union.tree_node** %context, align 8
  %cmp = icmp ne %union.tree_node* %13, null
  br i1 %cmp, label %land.lhs.true.9, label %if.end.48

land.lhs.true.9:                                  ; preds = %if.end
  %14 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type10 = bitcast %union.tree_node* %14 to %struct.tree_type*
  %context11 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type10, i32 0, i32 17
  %15 = load %union.tree_node*, %union.tree_node** %context11, align 8
  %common12 = bitcast %union.tree_node* %15 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common12, i32 0, i32 2
  %bf.load13 = load i32, i32* %code, align 8
  %bf.clear14 = and i32 %bf.load13, 255
  %cmp15 = icmp eq i32 %bf.clear14, 18
  br i1 %cmp15, label %if.then.47, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.9
  %16 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type16 = bitcast %union.tree_node* %16 to %struct.tree_type*
  %context17 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type16, i32 0, i32 17
  %17 = load %union.tree_node*, %union.tree_node** %context17, align 8
  %common18 = bitcast %union.tree_node* %17 to %struct.tree_common*
  %code19 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common18, i32 0, i32 2
  %bf.load20 = load i32, i32* %code19, align 8
  %bf.clear21 = and i32 %bf.load20, 255
  %cmp22 = icmp eq i32 %bf.clear21, 20
  br i1 %cmp22, label %if.then.47, label %lor.lhs.false.23

lor.lhs.false.23:                                 ; preds = %lor.lhs.false
  %18 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type24 = bitcast %union.tree_node* %18 to %struct.tree_type*
  %context25 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type24, i32 0, i32 17
  %19 = load %union.tree_node*, %union.tree_node** %context25, align 8
  %common26 = bitcast %union.tree_node* %19 to %struct.tree_common*
  %code27 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common26, i32 0, i32 2
  %bf.load28 = load i32, i32* %code27, align 8
  %bf.clear29 = and i32 %bf.load28, 255
  %cmp30 = icmp eq i32 %bf.clear29, 21
  br i1 %cmp30, label %if.then.47, label %lor.lhs.false.31

lor.lhs.false.31:                                 ; preds = %lor.lhs.false.23
  %20 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type32 = bitcast %union.tree_node* %20 to %struct.tree_type*
  %context33 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type32, i32 0, i32 17
  %21 = load %union.tree_node*, %union.tree_node** %context33, align 8
  %common34 = bitcast %union.tree_node* %21 to %struct.tree_common*
  %code35 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common34, i32 0, i32 2
  %bf.load36 = load i32, i32* %code35, align 8
  %bf.clear37 = and i32 %bf.load36, 255
  %cmp38 = icmp eq i32 %bf.clear37, 22
  br i1 %cmp38, label %if.then.47, label %lor.lhs.false.39

lor.lhs.false.39:                                 ; preds = %lor.lhs.false.31
  %22 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type40 = bitcast %union.tree_node* %22 to %struct.tree_type*
  %context41 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type40, i32 0, i32 17
  %23 = load %union.tree_node*, %union.tree_node** %context41, align 8
  %common42 = bitcast %union.tree_node* %23 to %struct.tree_common*
  %code43 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common42, i32 0, i32 2
  %bf.load44 = load i32, i32* %code43, align 8
  %bf.clear45 = and i32 %bf.load44, 255
  %cmp46 = icmp eq i32 %bf.clear45, 19
  br i1 %cmp46, label %if.then.47, label %if.end.48

if.then.47:                                       ; preds = %lor.lhs.false.39, %lor.lhs.false.31, %lor.lhs.false.23, %lor.lhs.false, %land.lhs.true.9
  store i32 1, i32* %nested, align 4
  br label %if.end.48

if.end.48:                                        ; preds = %if.then.47, %lor.lhs.false.39, %if.end
  %24 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %25 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  %call49 = call %struct.die_struct* @scope_die_for(%union.tree_node* %24, %struct.die_struct* %25)
  store %struct.die_struct* %call49, %struct.die_struct** %scope_die, align 8
  %26 = load %struct.die_struct*, %struct.die_struct** %type_die, align 8
  %tobool50 = icmp ne %struct.die_struct* %26, null
  br i1 %tobool50, label %lor.lhs.false.51, label %if.then.55

lor.lhs.false.51:                                 ; preds = %if.end.48
  %27 = load i32, i32* %nested, align 4
  %tobool52 = icmp ne i32 %27, 0
  br i1 %tobool52, label %land.lhs.true.53, label %if.else.66

land.lhs.true.53:                                 ; preds = %lor.lhs.false.51
  %28 = load %struct.die_struct*, %struct.die_struct** %scope_die, align 8
  %29 = load %struct.die_struct*, %struct.die_struct** @comp_unit_die, align 8
  %cmp54 = icmp eq %struct.die_struct* %28, %29
  br i1 %cmp54, label %if.then.55, label %if.else.66

if.then.55:                                       ; preds = %land.lhs.true.53, %if.end.48
  %30 = load %struct.die_struct*, %struct.die_struct** %type_die, align 8
  store %struct.die_struct* %30, %struct.die_struct** %old_die, align 8
  %31 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common56 = bitcast %union.tree_node* %31 to %struct.tree_common*
  %code57 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common56, i32 0, i32 2
  %bf.load58 = load i32, i32* %code57, align 8
  %bf.clear59 = and i32 %bf.load58, 255
  %cmp60 = icmp eq i32 %bf.clear59, 20
  %cond = select i1 %cmp60, i32 19, i32 23
  %32 = load %struct.die_struct*, %struct.die_struct** %scope_die, align 8
  %33 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %call61 = call %struct.die_struct* @new_die(i32 %cond, %struct.die_struct* %32, %union.tree_node* %33)
  store %struct.die_struct* %call61, %struct.die_struct** %type_die, align 8
  %34 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %35 = load %struct.die_struct*, %struct.die_struct** %type_die, align 8
  call void @equate_type_number_to_die(%union.tree_node* %34, %struct.die_struct* %35)
  %36 = load %struct.die_struct*, %struct.die_struct** %old_die, align 8
  %tobool62 = icmp ne %struct.die_struct* %36, null
  br i1 %tobool62, label %if.then.63, label %if.else

if.then.63:                                       ; preds = %if.then.55
  %37 = load %struct.die_struct*, %struct.die_struct** %type_die, align 8
  %38 = load %struct.die_struct*, %struct.die_struct** %old_die, align 8
  call void @add_AT_die_ref(%struct.die_struct* %37, i32 71, %struct.die_struct* %38)
  br label %if.end.65

if.else:                                          ; preds = %if.then.55
  %39 = load %struct.die_struct*, %struct.die_struct** %type_die, align 8
  %40 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %call64 = call i8* @type_tag(%union.tree_node* %40)
  call void @add_name_attribute(%struct.die_struct* %39, i8* %call64)
  br label %if.end.65

if.end.65:                                        ; preds = %if.else, %if.then.63
  br label %if.end.67

if.else.66:                                       ; preds = %land.lhs.true.53, %lor.lhs.false.51
  %41 = load %struct.die_struct*, %struct.die_struct** %type_die, align 8
  call void @remove_AT(%struct.die_struct* %41, i32 60)
  br label %if.end.67

if.end.67:                                        ; preds = %if.else.66, %if.end.65
  %42 = load i32, i32* %complete, align 4
  %tobool68 = icmp ne i32 %42, 0
  br i1 %tobool68, label %if.then.69, label %if.else.91

if.then.69:                                       ; preds = %if.end.67
  %43 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common70 = bitcast %union.tree_node* %43 to %struct.tree_common*
  %asm_written_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common70, i32 0, i32 2
  %bf.load71 = load i32, i32* %asm_written_flag, align 8
  %bf.clear72 = and i32 %bf.load71, -16385
  %bf.set = or i32 %bf.clear72, 16384
  store i32 %bf.set, i32* %asm_written_flag, align 8
  %44 = load %struct.die_struct*, %struct.die_struct** %type_die, align 8
  %45 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  call void @add_byte_size_attribute(%struct.die_struct* %44, %union.tree_node* %45)
  %46 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common73 = bitcast %union.tree_node* %46 to %struct.tree_common*
  %chain74 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common73, i32 0, i32 0
  %47 = load %union.tree_node*, %union.tree_node** %chain74, align 8
  %cmp75 = icmp ne %union.tree_node* %47, null
  br i1 %cmp75, label %if.then.76, label %if.end.79

if.then.76:                                       ; preds = %if.then.69
  %48 = load %struct.die_struct*, %struct.die_struct** %type_die, align 8
  %49 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common77 = bitcast %union.tree_node* %49 to %struct.tree_common*
  %chain78 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common77, i32 0, i32 0
  %50 = load %union.tree_node*, %union.tree_node** %chain78, align 8
  call void @add_src_coords_attributes(%struct.die_struct* %48, %union.tree_node* %50)
  br label %if.end.79

if.end.79:                                        ; preds = %if.then.76, %if.then.69
  %51 = load %struct.die_struct*, %struct.die_struct** %type_die, align 8
  %die_parent = getelementptr inbounds %struct.die_struct, %struct.die_struct* %51, i32 0, i32 3
  %52 = load %struct.die_struct*, %struct.die_struct** %die_parent, align 8
  %cmp80 = icmp eq %struct.die_struct* %52, null
  br i1 %cmp80, label %if.then.81, label %if.end.82

if.then.81:                                       ; preds = %if.end.79
  %53 = load %struct.die_struct*, %struct.die_struct** %scope_die, align 8
  %54 = load %struct.die_struct*, %struct.die_struct** %type_die, align 8
  call void @add_child_die(%struct.die_struct* %53, %struct.die_struct* %54)
  br label %if.end.82

if.end.82:                                        ; preds = %if.then.81, %if.end.79
  %55 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  call void @push_decl_scope(%union.tree_node* %55)
  %56 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %57 = load %struct.die_struct*, %struct.die_struct** %type_die, align 8
  call void @gen_member_die(%union.tree_node* %56, %struct.die_struct* %57)
  call void @pop_decl_scope()
  %58 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type83 = bitcast %union.tree_node* %58 to %struct.tree_type*
  %minval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type83, i32 0, i32 12
  %59 = load %union.tree_node*, %union.tree_node** %minval, align 8
  %tobool84 = icmp ne %union.tree_node* %59, null
  br i1 %tobool84, label %if.then.85, label %if.end.90

if.then.85:                                       ; preds = %if.end.82
  %60 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type86 = bitcast %union.tree_node* %60 to %struct.tree_type*
  %minval87 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type86, i32 0, i32 12
  %61 = load %union.tree_node*, %union.tree_node** %minval87, align 8
  %decl88 = bitcast %union.tree_node* %61 to %struct.tree_decl*
  %vindex = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl88, i32 0, i32 22
  %62 = load %union.tree_node*, %union.tree_node** %vindex, align 8
  store %union.tree_node* %62, %union.tree_node** %vtype, align 8
  %63 = load %union.tree_node*, %union.tree_node** %vtype, align 8
  %64 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  call void @gen_type_die(%union.tree_node* %63, %struct.die_struct* %64)
  %65 = load %struct.die_struct*, %struct.die_struct** %type_die, align 8
  %66 = load %union.tree_node*, %union.tree_node** %vtype, align 8
  %call89 = call %struct.die_struct* @lookup_type_die(%union.tree_node* %66)
  call void @add_AT_die_ref(%struct.die_struct* %65, i32 29, %struct.die_struct* %call89)
  br label %if.end.90

if.end.90:                                        ; preds = %if.then.85, %if.end.82
  br label %if.end.108

if.else.91:                                       ; preds = %if.end.67
  %67 = load %struct.die_struct*, %struct.die_struct** %type_die, align 8
  call void @add_AT_flag(%struct.die_struct* %67, i32 60, i32 1)
  %68 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common92 = bitcast %union.tree_node* %68 to %struct.tree_common*
  %chain93 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common92, i32 0, i32 0
  %69 = load %union.tree_node*, %union.tree_node** %chain93, align 8
  %tobool94 = icmp ne %union.tree_node* %69, null
  br i1 %tobool94, label %land.lhs.true.95, label %if.end.107

land.lhs.true.95:                                 ; preds = %if.else.91
  %70 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common96 = bitcast %union.tree_node* %70 to %struct.tree_common*
  %chain97 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common96, i32 0, i32 0
  %71 = load %union.tree_node*, %union.tree_node** %chain97, align 8
  %call98 = call %union.tree_node* @decl_function_context(%union.tree_node* %71)
  %tobool99 = icmp ne %union.tree_node* %call98, null
  br i1 %tobool99, label %if.end.107, label %if.then.100

if.then.100:                                      ; preds = %land.lhs.true.95
  br label %do.body

do.body:                                          ; preds = %if.then.100
  %72 = load %struct.varray_head_tag*, %struct.varray_head_tag** @incomplete_types, align 8
  %elements_used = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %72, i32 0, i32 1
  %73 = load i64, i64* %elements_used, align 8
  %74 = load %struct.varray_head_tag*, %struct.varray_head_tag** @incomplete_types, align 8
  %num_elements = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %74, i32 0, i32 0
  %75 = load i64, i64* %num_elements, align 8
  %cmp101 = icmp uge i64 %73, %75
  br i1 %cmp101, label %if.then.102, label %if.end.105

if.then.102:                                      ; preds = %do.body
  %76 = load %struct.varray_head_tag*, %struct.varray_head_tag** @incomplete_types, align 8
  %77 = load %struct.varray_head_tag*, %struct.varray_head_tag** @incomplete_types, align 8
  %num_elements103 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %77, i32 0, i32 0
  %78 = load i64, i64* %num_elements103, align 8
  %mul = mul i64 2, %78
  %call104 = call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %76, i64 %mul)
  store %struct.varray_head_tag* %call104, %struct.varray_head_tag** @incomplete_types, align 8
  br label %if.end.105

if.end.105:                                       ; preds = %if.then.102, %do.body
  %79 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %80 = load %struct.varray_head_tag*, %struct.varray_head_tag** @incomplete_types, align 8
  %elements_used106 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %80, i32 0, i32 1
  %81 = load i64, i64* %elements_used106, align 8
  %inc = add i64 %81, 1
  store i64 %inc, i64* %elements_used106, align 8
  %82 = load %struct.varray_head_tag*, %struct.varray_head_tag** @incomplete_types, align 8
  %data = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %82, i32 0, i32 4
  %tree = bitcast %union.varray_data_tag* %data to [1 x %union.tree_node*]*
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %tree, i32 0, i64 %81
  store %union.tree_node* %79, %union.tree_node** %arrayidx, align 8
  br label %do.end

do.end:                                           ; preds = %if.end.105
  br label %if.end.107

if.end.107:                                       ; preds = %do.end, %land.lhs.true.95, %if.else.91
  br label %if.end.108

if.end.108:                                       ; preds = %if.then, %if.end.107, %if.end.90
  ret void
}

; Function Attrs: nounwind uwtable
define internal %struct.die_struct* @scope_die_for(%union.tree_node* %t, %struct.die_struct* %context_die) #0 {
entry:
  %t.addr = alloca %union.tree_node*, align 8
  %context_die.addr = alloca %struct.die_struct*, align 8
  %scope_die = alloca %struct.die_struct*, align 8
  %containing_scope = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  store %struct.die_struct* %context_die, %struct.die_struct** %context_die.addr, align 8
  store %struct.die_struct* null, %struct.die_struct** %scope_die, align 8
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %idxprom = sext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* @tree_code_type, i32 0, i64 %idxprom
  %1 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %1 to i32
  %cmp = icmp eq i32 %conv, 116
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 9575, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @__FUNCTION__.scope_die_for, i32 0, i32 0)) #8
  unreachable

if.end:                                           ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %t.addr, align 8
  %type = bitcast %union.tree_node* %2 to %struct.tree_type*
  %context = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type, i32 0, i32 17
  %3 = load %union.tree_node*, %union.tree_node** %context, align 8
  store %union.tree_node* %3, %union.tree_node** %containing_scope, align 8
  %4 = load %union.tree_node*, %union.tree_node** %containing_scope, align 8
  %tobool = icmp ne %union.tree_node* %4, null
  br i1 %tobool, label %land.lhs.true, label %if.end.9

land.lhs.true:                                    ; preds = %if.end
  %5 = load %union.tree_node*, %union.tree_node** %containing_scope, align 8
  %common2 = bitcast %union.tree_node* %5 to %struct.tree_common*
  %code3 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 2
  %bf.load4 = load i32, i32* %code3, align 8
  %bf.clear5 = and i32 %bf.load4, 255
  %cmp6 = icmp eq i32 %bf.clear5, 38
  br i1 %cmp6, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %land.lhs.true
  store %union.tree_node* null, %union.tree_node** %containing_scope, align 8
  br label %if.end.9

if.end.9:                                         ; preds = %if.then.8, %land.lhs.true, %if.end
  %6 = load %union.tree_node*, %union.tree_node** %containing_scope, align 8
  %tobool10 = icmp ne %union.tree_node* %6, null
  br i1 %tobool10, label %land.lhs.true.11, label %if.end.19

land.lhs.true.11:                                 ; preds = %if.end.9
  %7 = load %union.tree_node*, %union.tree_node** %containing_scope, align 8
  %common12 = bitcast %union.tree_node* %7 to %struct.tree_common*
  %code13 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common12, i32 0, i32 2
  %bf.load14 = load i32, i32* %code13, align 8
  %bf.clear15 = and i32 %bf.load14, 255
  %cmp16 = icmp eq i32 %bf.clear15, 23
  br i1 %cmp16, label %if.then.18, label %if.end.19

if.then.18:                                       ; preds = %land.lhs.true.11
  store %union.tree_node* null, %union.tree_node** %containing_scope, align 8
  br label %if.end.19

if.end.19:                                        ; preds = %if.then.18, %land.lhs.true.11, %if.end.9
  %8 = load %union.tree_node*, %union.tree_node** %containing_scope, align 8
  %cmp20 = icmp eq %union.tree_node* %8, null
  br i1 %cmp20, label %if.then.22, label %if.else

if.then.22:                                       ; preds = %if.end.19
  %9 = load %struct.die_struct*, %struct.die_struct** @comp_unit_die, align 8
  store %struct.die_struct* %9, %struct.die_struct** %scope_die, align 8
  br label %if.end.58

if.else:                                          ; preds = %if.end.19
  %10 = load %union.tree_node*, %union.tree_node** %containing_scope, align 8
  %common23 = bitcast %union.tree_node* %10 to %struct.tree_common*
  %code24 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common23, i32 0, i32 2
  %bf.load25 = load i32, i32* %code24, align 8
  %bf.clear26 = and i32 %bf.load25, 255
  %idxprom27 = sext i32 %bf.clear26 to i64
  %arrayidx28 = getelementptr inbounds [256 x i8], [256 x i8]* @tree_code_type, i32 0, i64 %idxprom27
  %11 = load i8, i8* %arrayidx28, align 1
  %conv29 = sext i8 %11 to i32
  %cmp30 = icmp eq i32 %conv29, 116
  br i1 %cmp30, label %if.then.32, label %if.else.56

if.then.32:                                       ; preds = %if.else
  %12 = load %struct.varray_head_tag*, %struct.varray_head_tag** @decl_scope_table, align 8
  %elements_used = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %12, i32 0, i32 1
  %13 = load i64, i64* %elements_used, align 8
  %sub = sub i64 %13, 1
  %conv33 = trunc i64 %sub to i32
  store i32 %conv33, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.32
  %14 = load i32, i32* %i, align 4
  %cmp34 = icmp sge i32 %14, 0
  br i1 %cmp34, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %15 = load i32, i32* %i, align 4
  %idxprom36 = sext i32 %15 to i64
  %16 = load %struct.varray_head_tag*, %struct.varray_head_tag** @decl_scope_table, align 8
  %data = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %16, i32 0, i32 4
  %tree = bitcast %union.varray_data_tag* %data to [1 x %union.tree_node*]*
  %arrayidx37 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %tree, i32 0, i64 %idxprom36
  %17 = load %union.tree_node*, %union.tree_node** %arrayidx37, align 8
  %18 = load %union.tree_node*, %union.tree_node** %containing_scope, align 8
  %cmp38 = icmp eq %union.tree_node* %17, %18
  br i1 %cmp38, label %if.then.40, label %if.end.41

if.then.40:                                       ; preds = %for.body
  br label %for.end

if.end.41:                                        ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.41
  %19 = load i32, i32* %i, align 4
  %dec = add nsw i32 %19, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then.40, %for.cond
  %20 = load i32, i32* %i, align 4
  %cmp42 = icmp slt i32 %20, 0
  br i1 %cmp42, label %if.then.44, label %if.else.54

if.then.44:                                       ; preds = %for.end
  %21 = load i32, i32* @debug_info_level, align 4
  %cmp45 = icmp ugt i32 %21, 1
  br i1 %cmp45, label %land.lhs.true.47, label %if.end.53

land.lhs.true.47:                                 ; preds = %if.then.44
  %22 = load %union.tree_node*, %union.tree_node** %containing_scope, align 8
  %common48 = bitcast %union.tree_node* %22 to %struct.tree_common*
  %asm_written_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common48, i32 0, i32 2
  %bf.load49 = load i32, i32* %asm_written_flag, align 8
  %bf.lshr = lshr i32 %bf.load49, 14
  %bf.clear50 = and i32 %bf.lshr, 1
  %tobool51 = icmp ne i32 %bf.clear50, 0
  br i1 %tobool51, label %if.end.53, label %if.then.52

if.then.52:                                       ; preds = %land.lhs.true.47
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 9604, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @__FUNCTION__.scope_die_for, i32 0, i32 0)) #8
  unreachable

if.end.53:                                        ; preds = %land.lhs.true.47, %if.then.44
  %23 = load %struct.die_struct*, %struct.die_struct** @comp_unit_die, align 8
  store %struct.die_struct* %23, %struct.die_struct** %scope_die, align 8
  br label %if.end.55

if.else.54:                                       ; preds = %for.end
  %24 = load %union.tree_node*, %union.tree_node** %containing_scope, align 8
  %call = call %struct.die_struct* @lookup_type_die(%union.tree_node* %24)
  store %struct.die_struct* %call, %struct.die_struct** %scope_die, align 8
  br label %if.end.55

if.end.55:                                        ; preds = %if.else.54, %if.end.53
  br label %if.end.57

if.else.56:                                       ; preds = %if.else
  %25 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  store %struct.die_struct* %25, %struct.die_struct** %scope_die, align 8
  br label %if.end.57

if.end.57:                                        ; preds = %if.else.56, %if.end.55
  br label %if.end.58

if.end.58:                                        ; preds = %if.end.57, %if.then.22
  %26 = load %struct.die_struct*, %struct.die_struct** %scope_die, align 8
  ret %struct.die_struct* %26
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @equate_type_number_to_die(%union.tree_node* %type, %struct.die_struct* %type_die) #3 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  %type_die.addr = alloca %struct.die_struct*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  store %struct.die_struct* %type_die, %struct.die_struct** %type_die.addr, align 8
  %0 = load %struct.die_struct*, %struct.die_struct** %type_die.addr, align 8
  %1 = bitcast %struct.die_struct* %0 to i8*
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type1 = bitcast %union.tree_node* %2 to %struct.tree_type*
  %symtab = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 10
  %pointer = bitcast %union.anon.2* %symtab to i8**
  store i8* %1, i8** %pointer, align 8
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @add_AT_die_ref(%struct.die_struct* %die, i32 %attr_kind, %struct.die_struct* %targ_die) #3 {
entry:
  %die.addr = alloca %struct.die_struct*, align 8
  %attr_kind.addr = alloca i32, align 4
  %targ_die.addr = alloca %struct.die_struct*, align 8
  %attr = alloca %struct.dw_attr_struct*, align 8
  store %struct.die_struct* %die, %struct.die_struct** %die.addr, align 8
  store i32 %attr_kind, i32* %attr_kind.addr, align 4
  store %struct.die_struct* %targ_die, %struct.die_struct** %targ_die.addr, align 8
  %call = call noalias i8* @xmalloc(i64 40)
  %0 = bitcast i8* %call to %struct.dw_attr_struct*
  store %struct.dw_attr_struct* %0, %struct.dw_attr_struct** %attr, align 8
  %1 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %attr, align 8
  %dw_attr_next = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %1, i32 0, i32 1
  store %struct.dw_attr_struct* null, %struct.dw_attr_struct** %dw_attr_next, align 8
  %2 = load i32, i32* %attr_kind.addr, align 4
  %3 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %attr, align 8
  %dw_attr = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %3, i32 0, i32 0
  store i32 %2, i32* %dw_attr, align 4
  %4 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %attr, align 8
  %dw_attr_val = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %4, i32 0, i32 2
  %val_class = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_attr_val, i32 0, i32 0
  store i32 10, i32* %val_class, align 4
  %5 = load %struct.die_struct*, %struct.die_struct** %targ_die.addr, align 8
  %6 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %attr, align 8
  %dw_attr_val1 = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %6, i32 0, i32 2
  %v = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_attr_val1, i32 0, i32 1
  %val_die_ref = bitcast %union.anon.3* %v to %struct.anon.4*
  %die2 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %val_die_ref, i32 0, i32 0
  store %struct.die_struct* %5, %struct.die_struct** %die2, align 8
  %7 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %attr, align 8
  %dw_attr_val3 = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %7, i32 0, i32 2
  %v4 = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_attr_val3, i32 0, i32 1
  %val_die_ref5 = bitcast %union.anon.3* %v4 to %struct.anon.4*
  %external = getelementptr inbounds %struct.anon.4, %struct.anon.4* %val_die_ref5, i32 0, i32 1
  store i32 0, i32* %external, align 4
  %8 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %9 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %attr, align 8
  call void @add_dwarf_attr(%struct.die_struct* %8, %struct.dw_attr_struct* %9)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @add_type_attribute(%struct.die_struct* %object_die, %union.tree_node* %type, i32 %decl_const, i32 %decl_volatile, %struct.die_struct* %context_die) #0 {
entry:
  %object_die.addr = alloca %struct.die_struct*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %decl_const.addr = alloca i32, align 4
  %decl_volatile.addr = alloca i32, align 4
  %context_die.addr = alloca %struct.die_struct*, align 8
  %code = alloca i32, align 4
  %type_die = alloca %struct.die_struct*, align 8
  store %struct.die_struct* %object_die, %struct.die_struct** %object_die.addr, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  store i32 %decl_const, i32* %decl_const.addr, align 4
  store i32 %decl_volatile, i32* %decl_volatile.addr, align 4
  store %struct.die_struct* %context_die, %struct.die_struct** %context_die.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*
  %code1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code1, align 8
  %bf.clear = and i32 %bf.load, 255
  store i32 %bf.clear, i32* %code, align 4
  store %struct.die_struct* null, %struct.die_struct** %type_die, align 8
  %1 = load i32, i32* %code, align 4
  %cmp = icmp eq i32 %1, 6
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %code, align 4
  %cmp2 = icmp eq i32 %2, 7
  br i1 %cmp2, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.lhs.false, %entry
  %3 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common3 = bitcast %union.tree_node* %3 to %struct.tree_common*
  %type4 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common3, i32 0, i32 1
  %4 = load %union.tree_node*, %union.tree_node** %type4, align 8
  %cmp5 = icmp ne %union.tree_node* %4, null
  br i1 %cmp5, label %land.lhs.true.6, label %if.end

land.lhs.true.6:                                  ; preds = %land.lhs.true
  %5 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type7 = bitcast %union.tree_node* %5 to %struct.tree_type*
  %name = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type7, i32 0, i32 11
  %6 = load %union.tree_node*, %union.tree_node** %name, align 8
  %cmp8 = icmp eq %union.tree_node* %6, null
  br i1 %cmp8, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true.6
  %7 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common9 = bitcast %union.tree_node* %7 to %struct.tree_common*
  %type10 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common9, i32 0, i32 1
  %8 = load %union.tree_node*, %union.tree_node** %type10, align 8
  store %union.tree_node* %8, %union.tree_node** %type.addr, align 8
  %9 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common11 = bitcast %union.tree_node* %9 to %struct.tree_common*
  %code12 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common11, i32 0, i32 2
  %bf.load13 = load i32, i32* %code12, align 8
  %bf.clear14 = and i32 %bf.load13, 255
  store i32 %bf.clear14, i32* %code, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true.6, %land.lhs.true, %lor.lhs.false
  %10 = load i32, i32* %code, align 4
  %cmp15 = icmp eq i32 %10, 0
  br i1 %cmp15, label %if.then.18, label %lor.lhs.false.16

lor.lhs.false.16:                                 ; preds = %if.end
  %11 = load i32, i32* %code, align 4
  %cmp17 = icmp eq i32 %11, 5
  br i1 %cmp17, label %if.then.18, label %if.end.19

if.then.18:                                       ; preds = %lor.lhs.false.16, %if.end
  br label %if.end.35

if.end.19:                                        ; preds = %lor.lhs.false.16
  %12 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %13 = load i32, i32* %decl_const.addr, align 4
  %tobool = icmp ne i32 %13, 0
  br i1 %tobool, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.end.19
  %14 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common20 = bitcast %union.tree_node* %14 to %struct.tree_common*
  %readonly_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common20, i32 0, i32 2
  %bf.load21 = load i32, i32* %readonly_flag, align 8
  %bf.lshr = lshr i32 %bf.load21, 12
  %bf.clear22 = and i32 %bf.lshr, 1
  %tobool23 = icmp ne i32 %bf.clear22, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.end.19
  %15 = phi i1 [ true, %if.end.19 ], [ %tobool23, %lor.rhs ]
  %lor.ext = zext i1 %15 to i32
  %16 = load i32, i32* %decl_volatile.addr, align 4
  %tobool24 = icmp ne i32 %16, 0
  br i1 %tobool24, label %lor.end.31, label %lor.rhs.25

lor.rhs.25:                                       ; preds = %lor.end
  %17 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common26 = bitcast %union.tree_node* %17 to %struct.tree_common*
  %volatile_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common26, i32 0, i32 2
  %bf.load27 = load i32, i32* %volatile_flag, align 8
  %bf.lshr28 = lshr i32 %bf.load27, 11
  %bf.clear29 = and i32 %bf.lshr28, 1
  %tobool30 = icmp ne i32 %bf.clear29, 0
  br label %lor.end.31

lor.end.31:                                       ; preds = %lor.rhs.25, %lor.end
  %18 = phi i1 [ true, %lor.end ], [ %tobool30, %lor.rhs.25 ]
  %lor.ext32 = zext i1 %18 to i32
  %19 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  %call = call %struct.die_struct* @modified_type_die(%union.tree_node* %12, i32 %lor.ext, i32 %lor.ext32, %struct.die_struct* %19)
  store %struct.die_struct* %call, %struct.die_struct** %type_die, align 8
  %20 = load %struct.die_struct*, %struct.die_struct** %type_die, align 8
  %cmp33 = icmp ne %struct.die_struct* %20, null
  br i1 %cmp33, label %if.then.34, label %if.end.35

if.then.34:                                       ; preds = %lor.end.31
  %21 = load %struct.die_struct*, %struct.die_struct** %object_die.addr, align 8
  %22 = load %struct.die_struct*, %struct.die_struct** %type_die, align 8
  call void @add_AT_die_ref(%struct.die_struct* %21, i32 73, %struct.die_struct* %22)
  br label %if.end.35

if.end.35:                                        ; preds = %if.then.18, %if.then.34, %lor.end.31
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @add_dwarf_attr(%struct.die_struct* %die, %struct.dw_attr_struct* %attr) #3 {
entry:
  %die.addr = alloca %struct.die_struct*, align 8
  %attr.addr = alloca %struct.dw_attr_struct*, align 8
  store %struct.die_struct* %die, %struct.die_struct** %die.addr, align 8
  store %struct.dw_attr_struct* %attr, %struct.dw_attr_struct** %attr.addr, align 8
  %0 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %cmp = icmp ne %struct.die_struct* %0, null
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %attr.addr, align 8
  %cmp1 = icmp ne %struct.dw_attr_struct* %1, null
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %2 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %die_attr = getelementptr inbounds %struct.die_struct, %struct.die_struct* %2, i32 0, i32 2
  %3 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %die_attr, align 8
  %4 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %attr.addr, align 8
  %dw_attr_next = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %4, i32 0, i32 1
  store %struct.dw_attr_struct* %3, %struct.dw_attr_struct** %dw_attr_next, align 8
  %5 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %attr.addr, align 8
  %6 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %die_attr2 = getelementptr inbounds %struct.die_struct, %struct.die_struct* %6, i32 0, i32 2
  store %struct.dw_attr_struct* %5, %struct.dw_attr_struct** %die_attr2, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @add_prototyped_attribute(%struct.die_struct* %die, %union.tree_node* %func_type) #3 {
entry:
  %die.addr = alloca %struct.die_struct*, align 8
  %func_type.addr = alloca %union.tree_node*, align 8
  store %struct.die_struct* %die, %struct.die_struct** %die.addr, align 8
  store %union.tree_node* %func_type, %union.tree_node** %func_type.addr, align 8
  %0 = load %struct.die_struct*, %struct.die_struct** @comp_unit_die, align 8
  %call = call i32 @get_AT_unsigned(%struct.die_struct* %0, i32 19)
  %cmp = icmp eq i32 %call, 1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %func_type.addr, align 8
  %type = bitcast %union.tree_node* %1 to %struct.tree_type*
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type, i32 0, i32 1
  %2 = load %union.tree_node*, %union.tree_node** %values, align 8
  %cmp1 = icmp ne %union.tree_node* %2, null
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %3 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  call void @add_AT_flag(%struct.die_struct* %3, i32 39, i32 1)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @gen_formal_types_die(%union.tree_node* %function_or_method_type, %struct.die_struct* %context_die) #0 {
entry:
  %function_or_method_type.addr = alloca %union.tree_node*, align 8
  %context_die.addr = alloca %struct.die_struct*, align 8
  %link = alloca %union.tree_node*, align 8
  %formal_type = alloca %union.tree_node*, align 8
  %first_parm_type = alloca %union.tree_node*, align 8
  %arg = alloca %union.tree_node*, align 8
  %parm_die = alloca %struct.die_struct*, align 8
  store %union.tree_node* %function_or_method_type, %union.tree_node** %function_or_method_type.addr, align 8
  store %struct.die_struct* %context_die, %struct.die_struct** %context_die.addr, align 8
  store %union.tree_node* null, %union.tree_node** %formal_type, align 8
  %0 = load %union.tree_node*, %union.tree_node** %function_or_method_type.addr, align 8
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 30
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %function_or_method_type.addr, align 8
  %decl = bitcast %union.tree_node* %1 to %struct.tree_decl*
  %arguments = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl, i32 0, i32 10
  %2 = load %union.tree_node*, %union.tree_node** %arguments, align 8
  store %union.tree_node* %2, %union.tree_node** %arg, align 8
  %3 = load %union.tree_node*, %union.tree_node** %function_or_method_type.addr, align 8
  %common1 = bitcast %union.tree_node* %3 to %struct.tree_common*
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1, i32 0, i32 1
  %4 = load %union.tree_node*, %union.tree_node** %type, align 8
  store %union.tree_node* %4, %union.tree_node** %function_or_method_type.addr, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %arg, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %5 = load %union.tree_node*, %union.tree_node** %function_or_method_type.addr, align 8
  %type2 = bitcast %union.tree_node* %5 to %struct.tree_type*
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type2, i32 0, i32 1
  %6 = load %union.tree_node*, %union.tree_node** %values, align 8
  store %union.tree_node* %6, %union.tree_node** %first_parm_type, align 8
  %7 = load %union.tree_node*, %union.tree_node** %first_parm_type, align 8
  store %union.tree_node* %7, %union.tree_node** %link, align 8
  br label %for.cond

for.cond:                                         ; preds = %if.end.25, %if.end
  %8 = load %union.tree_node*, %union.tree_node** %link, align 8
  %tobool = icmp ne %union.tree_node* %8, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load %union.tree_node*, %union.tree_node** %link, align 8
  %list = bitcast %union.tree_node* %9 to %struct.tree_list*
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2
  %10 = load %union.tree_node*, %union.tree_node** %value, align 8
  store %union.tree_node* %10, %union.tree_node** %formal_type, align 8
  %11 = load %union.tree_node*, %union.tree_node** %formal_type, align 8
  %12 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 27), align 8
  %cmp3 = icmp eq %union.tree_node* %11, %12
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %for.body
  br label %for.end

if.end.5:                                         ; preds = %for.body
  %13 = load %union.tree_node*, %union.tree_node** %formal_type, align 8
  %14 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  %call = call %struct.die_struct* @gen_formal_parameter_die(%union.tree_node* %13, %struct.die_struct* %14)
  store %struct.die_struct* %call, %struct.die_struct** %parm_die, align 8
  %15 = load %union.tree_node*, %union.tree_node** %function_or_method_type.addr, align 8
  %common6 = bitcast %union.tree_node* %15 to %struct.tree_common*
  %code7 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common6, i32 0, i32 2
  %bf.load8 = load i32, i32* %code7, align 8
  %bf.clear9 = and i32 %bf.load8, 255
  %cmp10 = icmp eq i32 %bf.clear9, 16
  br i1 %cmp10, label %land.lhs.true, label %lor.lhs.false

land.lhs.true:                                    ; preds = %if.end.5
  %16 = load %union.tree_node*, %union.tree_node** %link, align 8
  %17 = load %union.tree_node*, %union.tree_node** %first_parm_type, align 8
  %cmp11 = icmp eq %union.tree_node* %16, %17
  br i1 %cmp11, label %if.then.18, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true, %if.end.5
  %18 = load %union.tree_node*, %union.tree_node** %arg, align 8
  %tobool12 = icmp ne %union.tree_node* %18, null
  br i1 %tobool12, label %land.lhs.true.13, label %if.end.19

land.lhs.true.13:                                 ; preds = %lor.lhs.false
  %19 = load %union.tree_node*, %union.tree_node** %arg, align 8
  %decl14 = bitcast %union.tree_node* %19 to %struct.tree_decl*
  %artificial_flag = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl14, i32 0, i32 5
  %20 = bitcast i48* %artificial_flag to i64*
  %bf.load15 = load i64, i64* %20, align 8
  %bf.lshr = lshr i64 %bf.load15, 22
  %bf.clear16 = and i64 %bf.lshr, 1
  %bf.cast = trunc i64 %bf.clear16 to i32
  %tobool17 = icmp ne i32 %bf.cast, 0
  br i1 %tobool17, label %if.then.18, label %if.end.19

if.then.18:                                       ; preds = %land.lhs.true.13, %land.lhs.true
  %21 = load %struct.die_struct*, %struct.die_struct** %parm_die, align 8
  call void @add_AT_flag(%struct.die_struct* %21, i32 52, i32 1)
  br label %if.end.19

if.end.19:                                        ; preds = %if.then.18, %land.lhs.true.13, %lor.lhs.false
  %22 = load %union.tree_node*, %union.tree_node** %link, align 8
  %common20 = bitcast %union.tree_node* %22 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common20, i32 0, i32 0
  %23 = load %union.tree_node*, %union.tree_node** %chain, align 8
  store %union.tree_node* %23, %union.tree_node** %link, align 8
  %24 = load %union.tree_node*, %union.tree_node** %arg, align 8
  %tobool21 = icmp ne %union.tree_node* %24, null
  br i1 %tobool21, label %if.then.22, label %if.end.25

if.then.22:                                       ; preds = %if.end.19
  %25 = load %union.tree_node*, %union.tree_node** %arg, align 8
  %common23 = bitcast %union.tree_node* %25 to %struct.tree_common*
  %chain24 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common23, i32 0, i32 0
  %26 = load %union.tree_node*, %union.tree_node** %chain24, align 8
  store %union.tree_node* %26, %union.tree_node** %arg, align 8
  br label %if.end.25

if.end.25:                                        ; preds = %if.then.22, %if.end.19
  br label %for.cond

for.end:                                          ; preds = %if.then.4, %for.cond
  %27 = load %union.tree_node*, %union.tree_node** %formal_type, align 8
  %28 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 27), align 8
  %cmp26 = icmp ne %union.tree_node* %27, %28
  br i1 %cmp26, label %if.then.27, label %if.end.28

if.then.27:                                       ; preds = %for.end
  %29 = load %union.tree_node*, %union.tree_node** %function_or_method_type.addr, align 8
  %30 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  call void @gen_unspecified_parameters_die(%union.tree_node* %29, %struct.die_struct* %30)
  br label %if.end.28

if.end.28:                                        ; preds = %if.then.27, %for.end
  %31 = load %union.tree_node*, %union.tree_node** %function_or_method_type.addr, align 8
  %type29 = bitcast %union.tree_node* %31 to %struct.tree_type*
  %values30 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type29, i32 0, i32 1
  %32 = load %union.tree_node*, %union.tree_node** %values30, align 8
  store %union.tree_node* %32, %union.tree_node** %link, align 8
  br label %for.cond.31

for.cond.31:                                      ; preds = %for.inc, %if.end.28
  %33 = load %union.tree_node*, %union.tree_node** %link, align 8
  %tobool32 = icmp ne %union.tree_node* %33, null
  br i1 %tobool32, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond.31
  %34 = load %union.tree_node*, %union.tree_node** %link, align 8
  %list33 = bitcast %union.tree_node* %34 to %struct.tree_list*
  %value34 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list33, i32 0, i32 2
  %35 = load %union.tree_node*, %union.tree_node** %value34, align 8
  %tobool35 = icmp ne %union.tree_node* %35, null
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond.31
  %36 = phi i1 [ false, %for.cond.31 ], [ %tobool35, %land.rhs ]
  br i1 %36, label %for.body.36, label %for.end.41

for.body.36:                                      ; preds = %land.end
  %37 = load %union.tree_node*, %union.tree_node** %link, align 8
  %list37 = bitcast %union.tree_node* %37 to %struct.tree_list*
  %value38 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list37, i32 0, i32 2
  %38 = load %union.tree_node*, %union.tree_node** %value38, align 8
  %39 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  call void @gen_type_die(%union.tree_node* %38, %struct.die_struct* %39)
  br label %for.inc

for.inc:                                          ; preds = %for.body.36
  %40 = load %union.tree_node*, %union.tree_node** %link, align 8
  %common39 = bitcast %union.tree_node* %40 to %struct.tree_common*
  %chain40 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common39, i32 0, i32 0
  %41 = load %union.tree_node*, %union.tree_node** %chain40, align 8
  store %union.tree_node* %41, %union.tree_node** %link, align 8
  br label %for.cond.31

for.end.41:                                       ; preds = %land.end
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @add_AT_flag(%struct.die_struct* %die, i32 %attr_kind, i32 %flag) #3 {
entry:
  %die.addr = alloca %struct.die_struct*, align 8
  %attr_kind.addr = alloca i32, align 4
  %flag.addr = alloca i32, align 4
  %attr = alloca %struct.dw_attr_struct*, align 8
  store %struct.die_struct* %die, %struct.die_struct** %die.addr, align 8
  store i32 %attr_kind, i32* %attr_kind.addr, align 4
  store i32 %flag, i32* %flag.addr, align 4
  %call = call noalias i8* @xmalloc(i64 40)
  %0 = bitcast i8* %call to %struct.dw_attr_struct*
  store %struct.dw_attr_struct* %0, %struct.dw_attr_struct** %attr, align 8
  %1 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %attr, align 8
  %dw_attr_next = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %1, i32 0, i32 1
  store %struct.dw_attr_struct* null, %struct.dw_attr_struct** %dw_attr_next, align 8
  %2 = load i32, i32* %attr_kind.addr, align 4
  %3 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %attr, align 8
  %dw_attr = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %3, i32 0, i32 0
  store i32 %2, i32* %dw_attr, align 4
  %4 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %attr, align 8
  %dw_attr_val = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %4, i32 0, i32 2
  %val_class = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_attr_val, i32 0, i32 0
  store i32 9, i32* %val_class, align 4
  %5 = load i32, i32* %flag.addr, align 4
  %conv = trunc i32 %5 to i8
  %6 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %attr, align 8
  %dw_attr_val1 = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %6, i32 0, i32 2
  %v = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_attr_val1, i32 0, i32 1
  %val_flag = bitcast %union.anon.3* %v to i8*
  store i8 %conv, i8* %val_flag, align 1
  %7 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %8 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %attr, align 8
  call void @add_dwarf_attr(%struct.die_struct* %7, %struct.dw_attr_struct* %8)
  ret void
}

; Function Attrs: nounwind uwtable
define internal %struct.die_struct* @gen_formal_parameter_die(%union.tree_node* %node, %struct.die_struct* %context_die) #0 {
entry:
  %node.addr = alloca %union.tree_node*, align 8
  %context_die.addr = alloca %struct.die_struct*, align 8
  %parm_die = alloca %struct.die_struct*, align 8
  %origin = alloca %union.tree_node*, align 8
  store %union.tree_node* %node, %union.tree_node** %node.addr, align 8
  store %struct.die_struct* %context_die, %struct.die_struct** %context_die.addr, align 8
  %0 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  %1 = load %union.tree_node*, %union.tree_node** %node.addr, align 8
  %call = call %struct.die_struct* @new_die(i32 5, %struct.die_struct* %0, %union.tree_node* %1)
  store %struct.die_struct* %call, %struct.die_struct** %parm_die, align 8
  %2 = load %union.tree_node*, %union.tree_node** %node.addr, align 8
  %common = bitcast %union.tree_node* %2 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %idxprom = sext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* @tree_code_type, i32 0, i64 %idxprom
  %3 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %3 to i32
  switch i32 %conv, label %sw.default [
    i32 100, label %sw.bb
    i32 116, label %sw.bb.24
  ]

sw.bb:                                            ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %node.addr, align 8
  %call1 = call %union.tree_node* @decl_ultimate_origin(%union.tree_node* %4)
  store %union.tree_node* %call1, %union.tree_node** %origin, align 8
  %5 = load %union.tree_node*, %union.tree_node** %origin, align 8
  %cmp = icmp ne %union.tree_node* %5, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %sw.bb
  %6 = load %struct.die_struct*, %struct.die_struct** %parm_die, align 8
  %7 = load %union.tree_node*, %union.tree_node** %origin, align 8
  call void @add_abstract_origin_attribute(%struct.die_struct* %6, %union.tree_node* %7)
  br label %if.end.15

if.else:                                          ; preds = %sw.bb
  %8 = load %struct.die_struct*, %struct.die_struct** %parm_die, align 8
  %9 = load %union.tree_node*, %union.tree_node** %node.addr, align 8
  call void @add_name_and_src_coords_attributes(%struct.die_struct* %8, %union.tree_node* %9)
  %10 = load %struct.die_struct*, %struct.die_struct** %parm_die, align 8
  %11 = load %union.tree_node*, %union.tree_node** %node.addr, align 8
  %common3 = bitcast %union.tree_node* %11 to %struct.tree_common*
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common3, i32 0, i32 1
  %12 = load %union.tree_node*, %union.tree_node** %type, align 8
  %13 = load %union.tree_node*, %union.tree_node** %node.addr, align 8
  %common4 = bitcast %union.tree_node* %13 to %struct.tree_common*
  %readonly_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4, i32 0, i32 2
  %bf.load5 = load i32, i32* %readonly_flag, align 8
  %bf.lshr = lshr i32 %bf.load5, 12
  %bf.clear6 = and i32 %bf.lshr, 1
  %14 = load %union.tree_node*, %union.tree_node** %node.addr, align 8
  %common7 = bitcast %union.tree_node* %14 to %struct.tree_common*
  %volatile_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common7, i32 0, i32 2
  %bf.load8 = load i32, i32* %volatile_flag, align 8
  %bf.lshr9 = lshr i32 %bf.load8, 11
  %bf.clear10 = and i32 %bf.lshr9, 1
  %15 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  call void @add_type_attribute(%struct.die_struct* %10, %union.tree_node* %12, i32 %bf.clear6, i32 %bf.clear10, %struct.die_struct* %15)
  %16 = load %union.tree_node*, %union.tree_node** %node.addr, align 8
  %decl = bitcast %union.tree_node* %16 to %struct.tree_decl*
  %artificial_flag = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl, i32 0, i32 5
  %17 = bitcast i48* %artificial_flag to i64*
  %bf.load11 = load i64, i64* %17, align 8
  %bf.lshr12 = lshr i64 %bf.load11, 22
  %bf.clear13 = and i64 %bf.lshr12, 1
  %bf.cast = trunc i64 %bf.clear13 to i32
  %tobool = icmp ne i32 %bf.cast, 0
  br i1 %tobool, label %if.then.14, label %if.end

if.then.14:                                       ; preds = %if.else
  %18 = load %struct.die_struct*, %struct.die_struct** %parm_die, align 8
  call void @add_AT_flag(%struct.die_struct* %18, i32 52, i32 1)
  br label %if.end

if.end:                                           ; preds = %if.then.14, %if.else
  br label %if.end.15

if.end.15:                                        ; preds = %if.end, %if.then
  %19 = load %union.tree_node*, %union.tree_node** %node.addr, align 8
  %20 = load %struct.die_struct*, %struct.die_struct** %parm_die, align 8
  call void @equate_decl_number_to_die(%union.tree_node* %19, %struct.die_struct* %20)
  %21 = load %union.tree_node*, %union.tree_node** %node.addr, align 8
  %decl16 = bitcast %union.tree_node* %21 to %struct.tree_decl*
  %abstract_flag = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl16, i32 0, i32 5
  %22 = bitcast i48* %abstract_flag to i64*
  %bf.load17 = load i64, i64* %22, align 8
  %bf.lshr18 = lshr i64 %bf.load17, 15
  %bf.clear19 = and i64 %bf.lshr18, 1
  %bf.cast20 = trunc i64 %bf.clear19 to i32
  %tobool21 = icmp ne i32 %bf.cast20, 0
  br i1 %tobool21, label %if.end.23, label %if.then.22

if.then.22:                                       ; preds = %if.end.15
  %23 = load %struct.die_struct*, %struct.die_struct** %parm_die, align 8
  %24 = load %union.tree_node*, %union.tree_node** %node.addr, align 8
  call void @add_location_or_const_value_attribute(%struct.die_struct* %23, %union.tree_node* %24)
  br label %if.end.23

if.end.23:                                        ; preds = %if.then.22, %if.end.15
  br label %sw.epilog

sw.bb.24:                                         ; preds = %entry
  %25 = load %struct.die_struct*, %struct.die_struct** %parm_die, align 8
  %26 = load %union.tree_node*, %union.tree_node** %node.addr, align 8
  %27 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  call void @add_type_attribute(%struct.die_struct* %25, %union.tree_node* %26, i32 0, i32 0, %struct.die_struct* %27)
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 10025, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @__FUNCTION__.gen_formal_parameter_die, i32 0, i32 0)) #8
  unreachable

sw.epilog:                                        ; preds = %sw.bb.24, %if.end.23
  %28 = load %struct.die_struct*, %struct.die_struct** %parm_die, align 8
  ret %struct.die_struct* %28
}

; Function Attrs: nounwind uwtable
define internal void @gen_unspecified_parameters_die(%union.tree_node* %decl_or_type, %struct.die_struct* %context_die) #0 {
entry:
  %decl_or_type.addr = alloca %union.tree_node*, align 8
  %context_die.addr = alloca %struct.die_struct*, align 8
  store %union.tree_node* %decl_or_type, %union.tree_node** %decl_or_type.addr, align 8
  store %struct.die_struct* %context_die, %struct.die_struct** %context_die.addr, align 8
  %0 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  %1 = load %union.tree_node*, %union.tree_node** %decl_or_type.addr, align 8
  %call = call %struct.die_struct* @new_die(i32 24, %struct.die_struct* %0, %union.tree_node* %1)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @add_abstract_origin_attribute(%struct.die_struct* %die, %union.tree_node* %origin) #3 {
entry:
  %die.addr = alloca %struct.die_struct*, align 8
  %origin.addr = alloca %union.tree_node*, align 8
  %origin_die = alloca %struct.die_struct*, align 8
  %fn = alloca %union.tree_node*, align 8
  store %struct.die_struct* %die, %struct.die_struct** %die.addr, align 8
  store %union.tree_node* %origin, %union.tree_node** %origin.addr, align 8
  store %struct.die_struct* null, %struct.die_struct** %origin_die, align 8
  %0 = load %union.tree_node*, %union.tree_node** %origin.addr, align 8
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp ne i32 %bf.clear, 30
  br i1 %cmp, label %if.then, label %if.end.11

if.then:                                          ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %origin.addr, align 8
  store %union.tree_node* %1, %union.tree_node** %fn, align 8
  %2 = load %union.tree_node*, %union.tree_node** %fn, align 8
  %common1 = bitcast %union.tree_node* %2 to %struct.tree_common*
  %code2 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1, i32 0, i32 2
  %bf.load3 = load i32, i32* %code2, align 8
  %bf.clear4 = and i32 %bf.load3, 255
  %idxprom = sext i32 %bf.clear4 to i64
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* @tree_code_type, i32 0, i64 %idxprom
  %3 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %3 to i32
  %cmp5 = icmp eq i32 %conv, 116
  br i1 %cmp5, label %if.then.7, label %if.end

if.then.7:                                        ; preds = %if.then
  %4 = load %union.tree_node*, %union.tree_node** %fn, align 8
  %common8 = bitcast %union.tree_node* %4 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common8, i32 0, i32 0
  %5 = load %union.tree_node*, %union.tree_node** %chain, align 8
  store %union.tree_node* %5, %union.tree_node** %fn, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.7, %if.then
  %6 = load %union.tree_node*, %union.tree_node** %fn, align 8
  %call = call %union.tree_node* @decl_function_context(%union.tree_node* %6)
  store %union.tree_node* %call, %union.tree_node** %fn, align 8
  %7 = load %union.tree_node*, %union.tree_node** %fn, align 8
  %tobool = icmp ne %union.tree_node* %7, null
  br i1 %tobool, label %if.then.9, label %if.end.10

if.then.9:                                        ; preds = %if.end
  %8 = load %union.tree_node*, %union.tree_node** %fn, align 8
  call void @dwarf2out_abstract_function(%union.tree_node* %8)
  br label %if.end.10

if.end.10:                                        ; preds = %if.then.9, %if.end
  br label %if.end.11

if.end.11:                                        ; preds = %if.end.10, %entry
  %9 = load %union.tree_node*, %union.tree_node** %origin.addr, align 8
  %common12 = bitcast %union.tree_node* %9 to %struct.tree_common*
  %code13 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common12, i32 0, i32 2
  %bf.load14 = load i32, i32* %code13, align 8
  %bf.clear15 = and i32 %bf.load14, 255
  %idxprom16 = sext i32 %bf.clear15 to i64
  %arrayidx17 = getelementptr inbounds [256 x i8], [256 x i8]* @tree_code_type, i32 0, i64 %idxprom16
  %10 = load i8, i8* %arrayidx17, align 1
  %conv18 = sext i8 %10 to i32
  %cmp19 = icmp eq i32 %conv18, 100
  br i1 %cmp19, label %if.then.21, label %if.else

if.then.21:                                       ; preds = %if.end.11
  %11 = load %union.tree_node*, %union.tree_node** %origin.addr, align 8
  %call22 = call %struct.die_struct* @lookup_decl_die(%union.tree_node* %11)
  store %struct.die_struct* %call22, %struct.die_struct** %origin_die, align 8
  br label %if.end.35

if.else:                                          ; preds = %if.end.11
  %12 = load %union.tree_node*, %union.tree_node** %origin.addr, align 8
  %common23 = bitcast %union.tree_node* %12 to %struct.tree_common*
  %code24 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common23, i32 0, i32 2
  %bf.load25 = load i32, i32* %code24, align 8
  %bf.clear26 = and i32 %bf.load25, 255
  %idxprom27 = sext i32 %bf.clear26 to i64
  %arrayidx28 = getelementptr inbounds [256 x i8], [256 x i8]* @tree_code_type, i32 0, i64 %idxprom27
  %13 = load i8, i8* %arrayidx28, align 1
  %conv29 = sext i8 %13 to i32
  %cmp30 = icmp eq i32 %conv29, 116
  br i1 %cmp30, label %if.then.32, label %if.end.34

if.then.32:                                       ; preds = %if.else
  %14 = load %union.tree_node*, %union.tree_node** %origin.addr, align 8
  %call33 = call %struct.die_struct* @lookup_type_die(%union.tree_node* %14)
  store %struct.die_struct* %call33, %struct.die_struct** %origin_die, align 8
  br label %if.end.34

if.end.34:                                        ; preds = %if.then.32, %if.else
  br label %if.end.35

if.end.35:                                        ; preds = %if.end.34, %if.then.21
  %15 = load %struct.die_struct*, %struct.die_struct** %origin_die, align 8
  %cmp36 = icmp eq %struct.die_struct* %15, null
  br i1 %cmp36, label %if.then.38, label %if.end.39

if.then.38:                                       ; preds = %if.end.35
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 9459, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @__FUNCTION__.add_abstract_origin_attribute, i32 0, i32 0)) #8
  unreachable

if.end.39:                                        ; preds = %if.end.35
  %16 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %17 = load %struct.die_struct*, %struct.die_struct** %origin_die, align 8
  call void @add_AT_die_ref(%struct.die_struct* %16, i32 49, %struct.die_struct* %17)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @add_name_and_src_coords_attributes(%struct.die_struct* %die, %union.tree_node* %decl) #0 {
entry:
  %die.addr = alloca %struct.die_struct*, align 8
  %decl.addr = alloca %union.tree_node*, align 8
  %decl_name = alloca %union.tree_node*, align 8
  store %struct.die_struct* %die, %struct.die_struct** %die.addr, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl1 = bitcast %union.tree_node* %0 to %struct.tree_decl*
  %name = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1, i32 0, i32 8
  %1 = load %union.tree_node*, %union.tree_node** %name, align 8
  store %union.tree_node* %1, %union.tree_node** %decl_name, align 8
  %2 = load %union.tree_node*, %union.tree_node** %decl_name, align 8
  %cmp = icmp ne %union.tree_node* %2, null
  br i1 %cmp, label %land.lhs.true, label %if.end.47

land.lhs.true:                                    ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %decl_name, align 8
  %identifier = bitcast %union.tree_node* %3 to %struct.tree_identifier*
  %id = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1
  %str = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 1
  %4 = load i8*, i8** %str, align 8
  %cmp2 = icmp ne i8* %4, null
  br i1 %cmp2, label %if.then, label %if.end.47

if.then:                                          ; preds = %land.lhs.true
  %5 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %6 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %call = call i8* @dwarf2_name(%union.tree_node* %6, i32 0)
  call void @add_name_attribute(%struct.die_struct* %5, i8* %call)
  %7 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl3 = bitcast %union.tree_node* %7 to %struct.tree_decl*
  %artificial_flag = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl3, i32 0, i32 5
  %8 = bitcast i48* %artificial_flag to i64*
  %bf.load = load i64, i64* %8, align 8
  %bf.lshr = lshr i64 %bf.load, 22
  %bf.clear = and i64 %bf.lshr, 1
  %bf.cast = trunc i64 %bf.clear to i32
  %tobool = icmp ne i32 %bf.cast, 0
  br i1 %tobool, label %if.end, label %if.then.4

if.then.4:                                        ; preds = %if.then
  %9 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %10 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  call void @add_src_coords_attributes(%struct.die_struct* %9, %union.tree_node* %10)
  br label %if.end

if.end:                                           ; preds = %if.then.4, %if.then
  %11 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common = bitcast %union.tree_node* %11 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load5 = load i32, i32* %code, align 8
  %bf.clear6 = and i32 %bf.load5, 255
  %cmp7 = icmp eq i32 %bf.clear6, 30
  br i1 %cmp7, label %land.lhs.true.13, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %12 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common8 = bitcast %union.tree_node* %12 to %struct.tree_common*
  %code9 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common8, i32 0, i32 2
  %bf.load10 = load i32, i32* %code9, align 8
  %bf.clear11 = and i32 %bf.load10, 255
  %cmp12 = icmp eq i32 %bf.clear11, 34
  br i1 %cmp12, label %land.lhs.true.13, label %if.end.46

land.lhs.true.13:                                 ; preds = %lor.lhs.false, %if.end
  %13 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common14 = bitcast %union.tree_node* %13 to %struct.tree_common*
  %public_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common14, i32 0, i32 2
  %bf.load15 = load i32, i32* %public_flag, align 8
  %bf.lshr16 = lshr i32 %bf.load15, 19
  %bf.clear17 = and i32 %bf.lshr16, 1
  %tobool18 = icmp ne i32 %bf.clear17, 0
  br i1 %tobool18, label %land.lhs.true.19, label %if.end.46

land.lhs.true.19:                                 ; preds = %land.lhs.true.13
  %14 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl20 = bitcast %union.tree_node* %14 to %struct.tree_decl*
  %assembler_name = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl20, i32 0, i32 14
  %15 = load %union.tree_node*, %union.tree_node** %assembler_name, align 8
  %cmp21 = icmp ne %union.tree_node* %15, null
  br i1 %cmp21, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true.19
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true.19
  %16 = load void (%union.tree_node*)*, void (%union.tree_node*)** @lang_set_decl_assembler_name, align 8
  %17 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  call void %16(%union.tree_node* %17)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %18 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl22 = bitcast %union.tree_node* %18 to %struct.tree_decl*
  %assembler_name23 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl22, i32 0, i32 14
  %19 = load %union.tree_node*, %union.tree_node** %assembler_name23, align 8
  %20 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl24 = bitcast %union.tree_node* %20 to %struct.tree_decl*
  %name25 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl24, i32 0, i32 8
  %21 = load %union.tree_node*, %union.tree_node** %name25, align 8
  %cmp26 = icmp ne %union.tree_node* %19, %21
  br i1 %cmp26, label %land.lhs.true.27, label %if.end.46

land.lhs.true.27:                                 ; preds = %cond.end
  %22 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl28 = bitcast %union.tree_node* %22 to %struct.tree_decl*
  %abstract_flag = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl28, i32 0, i32 5
  %23 = bitcast i48* %abstract_flag to i64*
  %bf.load29 = load i64, i64* %23, align 8
  %bf.lshr30 = lshr i64 %bf.load29, 15
  %bf.clear31 = and i64 %bf.lshr30, 1
  %bf.cast32 = trunc i64 %bf.clear31 to i32
  %tobool33 = icmp ne i32 %bf.cast32, 0
  br i1 %tobool33, label %if.end.46, label %if.then.34

if.then.34:                                       ; preds = %land.lhs.true.27
  %24 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %25 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl35 = bitcast %union.tree_node* %25 to %struct.tree_decl*
  %assembler_name36 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl35, i32 0, i32 14
  %26 = load %union.tree_node*, %union.tree_node** %assembler_name36, align 8
  %cmp37 = icmp ne %union.tree_node* %26, null
  br i1 %cmp37, label %cond.true.38, label %cond.false.39

cond.true.38:                                     ; preds = %if.then.34
  br label %cond.end.40

cond.false.39:                                    ; preds = %if.then.34
  %27 = load void (%union.tree_node*)*, void (%union.tree_node*)** @lang_set_decl_assembler_name, align 8
  %28 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  call void %27(%union.tree_node* %28)
  br label %cond.end.40

cond.end.40:                                      ; preds = %cond.false.39, %cond.true.38
  %29 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl41 = bitcast %union.tree_node* %29 to %struct.tree_decl*
  %assembler_name42 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl41, i32 0, i32 14
  %30 = load %union.tree_node*, %union.tree_node** %assembler_name42, align 8
  %identifier43 = bitcast %union.tree_node* %30 to %struct.tree_identifier*
  %id44 = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier43, i32 0, i32 1
  %str45 = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id44, i32 0, i32 1
  %31 = load i8*, i8** %str45, align 8
  call void @add_AT_string(%struct.die_struct* %24, i32 8199, i8* %31)
  br label %if.end.46

if.end.46:                                        ; preds = %cond.end.40, %land.lhs.true.27, %cond.end, %land.lhs.true.13, %lor.lhs.false
  br label %if.end.47

if.end.47:                                        ; preds = %if.end.46, %land.lhs.true, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @equate_decl_number_to_die(%union.tree_node* %decl, %struct.die_struct* %decl_die) #0 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %decl_die.addr = alloca %struct.die_struct*, align 8
  %decl_id = alloca i32, align 4
  %num_allocated = alloca i32, align 4
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  store %struct.die_struct* %decl_die, %struct.die_struct** %decl_die.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl1 = bitcast %union.tree_node* %0 to %struct.tree_decl*
  %uid = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1, i32 0, i32 3
  %1 = load i32, i32* %uid, align 4
  store i32 %1, i32* %decl_id, align 4
  %2 = load i32, i32* %decl_id, align 4
  %3 = load i32, i32* @decl_die_table_allocated, align 4
  %cmp = icmp uge i32 %2, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load i32, i32* %decl_id, align 4
  %add = add i32 %4, 1
  %add2 = add i32 %add, 256
  %sub = sub i32 %add2, 1
  %div = udiv i32 %sub, 256
  %mul = mul i32 %div, 256
  store i32 %mul, i32* %num_allocated, align 4
  %5 = load %struct.die_struct**, %struct.die_struct*** @decl_die_table, align 8
  %6 = bitcast %struct.die_struct** %5 to i8*
  %7 = load i32, i32* %num_allocated, align 4
  %conv = zext i32 %7 to i64
  %mul3 = mul i64 8, %conv
  %call = call i8* @xrealloc(i8* %6, i64 %mul3)
  %8 = bitcast i8* %call to %struct.die_struct**
  store %struct.die_struct** %8, %struct.die_struct*** @decl_die_table, align 8
  %9 = load i32, i32* @decl_die_table_allocated, align 4
  %idxprom = zext i32 %9 to i64
  %10 = load %struct.die_struct**, %struct.die_struct*** @decl_die_table, align 8
  %arrayidx = getelementptr inbounds %struct.die_struct*, %struct.die_struct** %10, i64 %idxprom
  %11 = bitcast %struct.die_struct** %arrayidx to i8*
  %12 = load i32, i32* %num_allocated, align 4
  %13 = load i32, i32* @decl_die_table_allocated, align 4
  %sub4 = sub i32 %12, %13
  %conv5 = zext i32 %sub4 to i64
  %mul6 = mul i64 %conv5, 8
  call void @llvm.memset.p0i8.i64(i8* %11, i8 0, i64 %mul6, i32 1, i1 false)
  %14 = load i32, i32* %num_allocated, align 4
  store i32 %14, i32* @decl_die_table_allocated, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %15 = load i32, i32* %decl_id, align 4
  %16 = load i32, i32* @decl_die_table_in_use, align 4
  %cmp7 = icmp uge i32 %15, %16
  br i1 %cmp7, label %if.then.9, label %if.end.11

if.then.9:                                        ; preds = %if.end
  %17 = load i32, i32* %decl_id, align 4
  %add10 = add i32 %17, 1
  store i32 %add10, i32* @decl_die_table_in_use, align 4
  br label %if.end.11

if.end.11:                                        ; preds = %if.then.9, %if.end
  %18 = load %struct.die_struct*, %struct.die_struct** %decl_die.addr, align 8
  %19 = load i32, i32* %decl_id, align 4
  %idxprom12 = zext i32 %19 to i64
  %20 = load %struct.die_struct**, %struct.die_struct*** @decl_die_table, align 8
  %arrayidx13 = getelementptr inbounds %struct.die_struct*, %struct.die_struct** %20, i64 %idxprom12
  store %struct.die_struct* %18, %struct.die_struct** %arrayidx13, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @add_location_or_const_value_attribute(%struct.die_struct* %die, %union.tree_node* %decl) #0 {
entry:
  %die.addr = alloca %struct.die_struct*, align 8
  %decl.addr = alloca %union.tree_node*, align 8
  %rtl = alloca %struct.rtx_def*, align 8
  store %struct.die_struct* %die, %struct.die_struct** %die.addr, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  br label %sw.epilog

if.else:                                          ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common1 = bitcast %union.tree_node* %1 to %struct.tree_common*
  %code2 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1, i32 0, i32 2
  %bf.load3 = load i32, i32* %code2, align 8
  %bf.clear4 = and i32 %bf.load3, 255
  %cmp5 = icmp ne i32 %bf.clear4, 34
  br i1 %cmp5, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.else
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common6 = bitcast %union.tree_node* %2 to %struct.tree_common*
  %code7 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common6, i32 0, i32 2
  %bf.load8 = load i32, i32* %code7, align 8
  %bf.clear9 = and i32 %bf.load8, 255
  %cmp10 = icmp ne i32 %bf.clear9, 35
  br i1 %cmp10, label %if.then.11, label %if.end

if.then.11:                                       ; preds = %land.lhs.true
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 8989, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @__FUNCTION__.add_location_or_const_value_attribute, i32 0, i32 0)) #8
  unreachable

if.end:                                           ; preds = %land.lhs.true, %if.else
  br label %if.end.12

if.end.12:                                        ; preds = %if.end
  %3 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %call = call %struct.rtx_def* @rtl_for_decl_location(%union.tree_node* %3)
  store %struct.rtx_def* %call, %struct.rtx_def** %rtl, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %cmp13 = icmp eq %struct.rtx_def* %4, null
  br i1 %cmp13, label %if.then.14, label %if.end.15

if.then.14:                                       ; preds = %if.end.12
  br label %sw.epilog

if.end.15:                                        ; preds = %if.end.12
  %5 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %call16 = call %struct.rtx_def* @avoid_constant_pool_reference(%struct.rtx_def* %5)
  store %struct.rtx_def* %call16, %struct.rtx_def** %rtl, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %7 = bitcast %struct.rtx_def* %6 to i32*
  %bf.load17 = load i32, i32* %7, align 8
  %bf.clear18 = and i32 %bf.load17, 65535
  switch i32 %bf.clear18, label %sw.default [
    i32 70, label %sw.bb
    i32 54, label %sw.bb.19
    i32 55, label %sw.bb.19
    i32 57, label %sw.bb.19
    i32 68, label %sw.bb.19
    i32 67, label %sw.bb.19
    i32 58, label %sw.bb.19
    i32 75, label %sw.bb.19
    i32 66, label %sw.bb.20
    i32 61, label %sw.bb.20
    i32 63, label %sw.bb.20
    i32 65, label %sw.bb.20
  ]

sw.bb:                                            ; preds = %if.end.15
  br label %sw.epilog

sw.bb.19:                                         ; preds = %if.end.15, %if.end.15, %if.end.15, %if.end.15, %if.end.15, %if.end.15, %if.end.15
  %8 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  call void @add_const_value_attribute(%struct.die_struct* %8, %struct.rtx_def* %9)
  br label %sw.epilog

sw.bb.20:                                         ; preds = %if.end.15, %if.end.15, %if.end.15, %if.end.15
  %10 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  call void @add_AT_location_description(%struct.die_struct* %10, i32 2, %struct.rtx_def* %11)
  br label %sw.epilog

sw.default:                                       ; preds = %if.end.15
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 9026, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @__FUNCTION__.add_location_or_const_value_attribute, i32 0, i32 0)) #8
  unreachable

sw.epilog:                                        ; preds = %if.then, %if.then.14, %sw.bb.20, %sw.bb.19, %sw.bb
  ret void
}

; Function Attrs: nounwind uwtable
define internal i8* @dwarf2_name(%union.tree_node* %decl, i32 %scope) #0 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %scope.addr = alloca i32, align 4
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  store i32 %scope, i32* %scope.addr, align 4
  %0 = load i8* (%union.tree_node*, i32)*, i8* (%union.tree_node*, i32)** @decl_printable_name, align 8
  %1 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %2 = load i32, i32* %scope.addr, align 4
  %tobool = icmp ne i32 %2, 0
  %cond = select i1 %tobool, i32 1, i32 0
  %call = call i8* %0(%union.tree_node* %1, i32 %cond)
  ret i8* %call
}

; Function Attrs: nounwind uwtable
define internal void @add_src_coords_attributes(%struct.die_struct* %die, %union.tree_node* %decl) #0 {
entry:
  %die.addr = alloca %struct.die_struct*, align 8
  %decl.addr = alloca %union.tree_node*, align 8
  %file_index = alloca i32, align 4
  store %struct.die_struct* %die, %struct.die_struct** %die.addr, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl1 = bitcast %union.tree_node* %0 to %struct.tree_decl*
  %filename = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1, i32 0, i32 1
  %1 = load i8*, i8** %filename, align 8
  %call = call i32 @lookup_filename(i8* %1)
  store i32 %call, i32* %file_index, align 4
  %2 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %3 = load i32, i32* %file_index, align 4
  %conv = zext i32 %3 to i64
  call void @add_AT_unsigned(%struct.die_struct* %2, i32 58, i64 %conv)
  %4 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %5 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl2 = bitcast %union.tree_node* %5 to %struct.tree_decl*
  %linenum = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl2, i32 0, i32 2
  %6 = load i32, i32* %linenum, align 4
  %conv3 = sext i32 %6 to i64
  call void @add_AT_unsigned(%struct.die_struct* %4, i32 59, i64 %conv3)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @add_AT_string(%struct.die_struct* %die, i32 %attr_kind, i8* %str) #3 {
entry:
  %die.addr = alloca %struct.die_struct*, align 8
  %attr_kind.addr = alloca i32, align 4
  %str.addr = alloca i8*, align 8
  %attr = alloca %struct.dw_attr_struct*, align 8
  %node = alloca %struct.indirect_string_node*, align 8
  store %struct.die_struct* %die, %struct.die_struct** %die.addr, align 8
  store i32 %attr_kind, i32* %attr_kind.addr, align 4
  store i8* %str, i8** %str.addr, align 8
  %call = call noalias i8* @xmalloc(i64 40)
  %0 = bitcast i8* %call to %struct.dw_attr_struct*
  store %struct.dw_attr_struct* %0, %struct.dw_attr_struct** %attr, align 8
  %1 = load %struct.ht*, %struct.ht** @debug_str_hash, align 8
  %tobool = icmp ne %struct.ht* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call1 = call %struct.ht* @ht_create(i32 10)
  store %struct.ht* %call1, %struct.ht** @debug_str_hash, align 8
  %2 = load %struct.ht*, %struct.ht** @debug_str_hash, align 8
  %alloc_node = getelementptr inbounds %struct.ht, %struct.ht* %2, i32 0, i32 2
  store %struct.ht_identifier* (%struct.ht*)* @indirect_string_alloc, %struct.ht_identifier* (%struct.ht*)** %alloc_node, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load %struct.ht*, %struct.ht** @debug_str_hash, align 8
  %4 = load i8*, i8** %str.addr, align 8
  %5 = load i8*, i8** %str.addr, align 8
  %call2 = call i64 @strlen(i8* %5) #7
  %conv = trunc i64 %call2 to i32
  %call3 = call %struct.ht_identifier* @ht_lookup(%struct.ht* %3, i8* %4, i32 %conv, i32 1)
  %6 = bitcast %struct.ht_identifier* %call3 to %struct.indirect_string_node*
  store %struct.indirect_string_node* %6, %struct.indirect_string_node** %node, align 8
  %7 = load %struct.indirect_string_node*, %struct.indirect_string_node** %node, align 8
  %refcount = getelementptr inbounds %struct.indirect_string_node, %struct.indirect_string_node* %7, i32 0, i32 1
  %8 = load i32, i32* %refcount, align 4
  %inc = add i32 %8, 1
  store i32 %inc, i32* %refcount, align 4
  %9 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %attr, align 8
  %dw_attr_next = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %9, i32 0, i32 1
  store %struct.dw_attr_struct* null, %struct.dw_attr_struct** %dw_attr_next, align 8
  %10 = load i32, i32* %attr_kind.addr, align 4
  %11 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %attr, align 8
  %dw_attr = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %11, i32 0, i32 0
  store i32 %10, i32* %dw_attr, align 4
  %12 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %attr, align 8
  %dw_attr_val = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %12, i32 0, i32 2
  %val_class = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_attr_val, i32 0, i32 0
  store i32 14, i32* %val_class, align 4
  %13 = load %struct.indirect_string_node*, %struct.indirect_string_node** %node, align 8
  %14 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %attr, align 8
  %dw_attr_val4 = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %14, i32 0, i32 2
  %v = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_attr_val4, i32 0, i32 1
  %val_str = bitcast %union.anon.3* %v to %struct.indirect_string_node**
  store %struct.indirect_string_node* %13, %struct.indirect_string_node** %val_str, align 8
  %15 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %16 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %attr, align 8
  call void @add_dwarf_attr(%struct.die_struct* %15, %struct.dw_attr_struct* %16)
  ret void
}

declare %struct.ht* @ht_create(i32) #1

; Function Attrs: nounwind uwtable
define internal %struct.ht_identifier* @indirect_string_alloc(%struct.ht* %tab) #0 {
entry:
  %tab.addr = alloca %struct.ht*, align 8
  %node = alloca %struct.indirect_string_node*, align 8
  store %struct.ht* %tab, %struct.ht** %tab.addr, align 8
  %call = call noalias i8* @xmalloc(i64 32)
  %0 = bitcast i8* %call to %struct.indirect_string_node*
  store %struct.indirect_string_node* %0, %struct.indirect_string_node** %node, align 8
  %1 = load %struct.indirect_string_node*, %struct.indirect_string_node** %node, align 8
  %refcount = getelementptr inbounds %struct.indirect_string_node, %struct.indirect_string_node* %1, i32 0, i32 1
  store i32 0, i32* %refcount, align 4
  %2 = load %struct.indirect_string_node*, %struct.indirect_string_node** %node, align 8
  %form = getelementptr inbounds %struct.indirect_string_node, %struct.indirect_string_node* %2, i32 0, i32 2
  store i32 0, i32* %form, align 4
  %3 = load %struct.indirect_string_node*, %struct.indirect_string_node** %node, align 8
  %label = getelementptr inbounds %struct.indirect_string_node, %struct.indirect_string_node* %3, i32 0, i32 3
  store i8* null, i8** %label, align 8
  %4 = load %struct.indirect_string_node*, %struct.indirect_string_node** %node, align 8
  %5 = bitcast %struct.indirect_string_node* %4 to %struct.ht_identifier*
  ret %struct.ht_identifier* %5
}

declare %struct.ht_identifier* @ht_lookup(%struct.ht*, i8*, i32, i32) #1

; Function Attrs: nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #5

; Function Attrs: nounwind uwtable
define internal %struct.rtx_def* @rtl_for_decl_location(%union.tree_node* %decl) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %decl.addr = alloca %union.tree_node*, align 8
  %rtl = alloca %struct.rtx_def*, align 8
  %declared_type = alloca %union.tree_node*, align 8
  %passed_type = alloca %union.tree_node*, align 8
  %offset = alloca i32, align 4
  %arrtype = alloca %union.tree_node*, align 8
  %enttype = alloca %union.tree_node*, align 8
  %domain = alloca %union.tree_node*, align 8
  %init = alloca %union.tree_node*, align 8
  %mode362 = alloca i32, align 4
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl1 = bitcast %union.tree_node* %0 to %struct.tree_decl*
  %rtl2 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1, i32 0, i32 17
  %1 = load %struct.rtx_def*, %struct.rtx_def** %rtl2, align 8
  %cmp = icmp ne %struct.rtx_def* %1, null
  br i1 %cmp, label %cond.true, label %cond.false.10

cond.true:                                        ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl3 = bitcast %union.tree_node* %2 to %struct.tree_decl*
  %rtl4 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl3, i32 0, i32 17
  %3 = load %struct.rtx_def*, %struct.rtx_def** %rtl4, align 8
  %tobool = icmp ne %struct.rtx_def* %3, null
  br i1 %tobool, label %cond.true.5, label %cond.false

cond.true.5:                                      ; preds = %cond.true
  %4 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl6 = bitcast %union.tree_node* %4 to %struct.tree_decl*
  %rtl7 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl6, i32 0, i32 17
  %5 = load %struct.rtx_def*, %struct.rtx_def** %rtl7, align 8
  br label %cond.end

cond.false:                                       ; preds = %cond.true
  %6 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  call void @make_decl_rtl(%union.tree_node* %6, i8* null)
  %7 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl8 = bitcast %union.tree_node* %7 to %struct.tree_decl*
  %rtl9 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl8, i32 0, i32 17
  %8 = load %struct.rtx_def*, %struct.rtx_def** %rtl9, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true.5
  %cond = phi %struct.rtx_def* [ %5, %cond.true.5 ], [ %8, %cond.false ]
  br label %cond.end.11

cond.false.10:                                    ; preds = %entry
  br label %cond.end.11

cond.end.11:                                      ; preds = %cond.false.10, %cond.end
  %cond12 = phi %struct.rtx_def* [ %cond, %cond.end ], [ null, %cond.false.10 ]
  store %struct.rtx_def* %cond12, %struct.rtx_def** %rtl, align 8
  %9 = load i32, i32* @reload_completed, align 4
  %tobool13 = icmp ne i32 %9, 0
  br i1 %tobool13, label %if.else, label %if.then

if.then:                                          ; preds = %cond.end.11
  %10 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %tobool14 = icmp ne %struct.rtx_def* %10, null
  br i1 %tobool14, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %12 = bitcast %struct.rtx_def* %11 to i32*
  %bf.load = load i32, i32* %12, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp15 = icmp eq i32 %bf.clear, 67
  br i1 %cmp15, label %if.then.100, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %14 = bitcast %struct.rtx_def* %13 to i32*
  %bf.load16 = load i32, i32* %14, align 8
  %bf.clear17 = and i32 %bf.load16, 65535
  %cmp18 = icmp eq i32 %bf.clear17, 68
  br i1 %cmp18, label %if.then.100, label %lor.lhs.false.19

lor.lhs.false.19:                                 ; preds = %lor.lhs.false
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %16 = bitcast %struct.rtx_def* %15 to i32*
  %bf.load20 = load i32, i32* %16, align 8
  %bf.clear21 = and i32 %bf.load20, 65535
  %cmp22 = icmp eq i32 %bf.clear21, 54
  br i1 %cmp22, label %if.then.100, label %lor.lhs.false.23

lor.lhs.false.23:                                 ; preds = %lor.lhs.false.19
  %17 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %18 = bitcast %struct.rtx_def* %17 to i32*
  %bf.load24 = load i32, i32* %18, align 8
  %bf.clear25 = and i32 %bf.load24, 65535
  %cmp26 = icmp eq i32 %bf.clear25, 55
  br i1 %cmp26, label %if.then.100, label %lor.lhs.false.27

lor.lhs.false.27:                                 ; preds = %lor.lhs.false.23
  %19 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %20 = bitcast %struct.rtx_def* %19 to i32*
  %bf.load28 = load i32, i32* %20, align 8
  %bf.clear29 = and i32 %bf.load28, 65535
  %cmp30 = icmp eq i32 %bf.clear29, 58
  br i1 %cmp30, label %if.then.100, label %lor.lhs.false.31

lor.lhs.false.31:                                 ; preds = %lor.lhs.false.27
  %21 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %22 = bitcast %struct.rtx_def* %21 to i32*
  %bf.load32 = load i32, i32* %22, align 8
  %bf.clear33 = and i32 %bf.load32, 65535
  %cmp34 = icmp eq i32 %bf.clear33, 134
  br i1 %cmp34, label %if.then.100, label %lor.lhs.false.35

lor.lhs.false.35:                                 ; preds = %lor.lhs.false.31
  %23 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %24 = bitcast %struct.rtx_def* %23 to i32*
  %bf.load36 = load i32, i32* %24, align 8
  %bf.clear37 = and i32 %bf.load36, 65535
  %cmp38 = icmp eq i32 %bf.clear37, 56
  br i1 %cmp38, label %if.then.100, label %lor.lhs.false.39

lor.lhs.false.39:                                 ; preds = %lor.lhs.false.35
  %25 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %26 = bitcast %struct.rtx_def* %25 to i32*
  %bf.load40 = load i32, i32* %26, align 8
  %bf.clear41 = and i32 %bf.load40, 65535
  %cmp42 = icmp eq i32 %bf.clear41, 140
  br i1 %cmp42, label %if.then.100, label %lor.lhs.false.43

lor.lhs.false.43:                                 ; preds = %lor.lhs.false.39
  %27 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %28 = bitcast %struct.rtx_def* %27 to i32*
  %bf.load44 = load i32, i32* %28, align 8
  %bf.clear45 = and i32 %bf.load44, 65535
  %cmp46 = icmp eq i32 %bf.clear45, 66
  br i1 %cmp46, label %land.lhs.true.47, label %if.end

land.lhs.true.47:                                 ; preds = %lor.lhs.false.43
  %29 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %29, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %30 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %31 = bitcast %struct.rtx_def* %30 to i32*
  %bf.load48 = load i32, i32* %31, align 8
  %bf.clear49 = and i32 %bf.load48, 65535
  %cmp50 = icmp eq i32 %bf.clear49, 67
  br i1 %cmp50, label %if.then.100, label %lor.lhs.false.51

lor.lhs.false.51:                                 ; preds = %land.lhs.true.47
  %32 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %fld52 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %32, i32 0, i32 1
  %arrayidx53 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld52, i32 0, i64 0
  %rtx54 = bitcast %union.rtunion_def* %arrayidx53 to %struct.rtx_def**
  %33 = load %struct.rtx_def*, %struct.rtx_def** %rtx54, align 8
  %34 = bitcast %struct.rtx_def* %33 to i32*
  %bf.load55 = load i32, i32* %34, align 8
  %bf.clear56 = and i32 %bf.load55, 65535
  %cmp57 = icmp eq i32 %bf.clear56, 68
  br i1 %cmp57, label %if.then.100, label %lor.lhs.false.58

lor.lhs.false.58:                                 ; preds = %lor.lhs.false.51
  %35 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %fld59 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %35, i32 0, i32 1
  %arrayidx60 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld59, i32 0, i64 0
  %rtx61 = bitcast %union.rtunion_def* %arrayidx60 to %struct.rtx_def**
  %36 = load %struct.rtx_def*, %struct.rtx_def** %rtx61, align 8
  %37 = bitcast %struct.rtx_def* %36 to i32*
  %bf.load62 = load i32, i32* %37, align 8
  %bf.clear63 = and i32 %bf.load62, 65535
  %cmp64 = icmp eq i32 %bf.clear63, 54
  br i1 %cmp64, label %if.then.100, label %lor.lhs.false.65

lor.lhs.false.65:                                 ; preds = %lor.lhs.false.58
  %38 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %fld66 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %38, i32 0, i32 1
  %arrayidx67 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld66, i32 0, i64 0
  %rtx68 = bitcast %union.rtunion_def* %arrayidx67 to %struct.rtx_def**
  %39 = load %struct.rtx_def*, %struct.rtx_def** %rtx68, align 8
  %40 = bitcast %struct.rtx_def* %39 to i32*
  %bf.load69 = load i32, i32* %40, align 8
  %bf.clear70 = and i32 %bf.load69, 65535
  %cmp71 = icmp eq i32 %bf.clear70, 55
  br i1 %cmp71, label %if.then.100, label %lor.lhs.false.72

lor.lhs.false.72:                                 ; preds = %lor.lhs.false.65
  %41 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %fld73 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %41, i32 0, i32 1
  %arrayidx74 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld73, i32 0, i64 0
  %rtx75 = bitcast %union.rtunion_def* %arrayidx74 to %struct.rtx_def**
  %42 = load %struct.rtx_def*, %struct.rtx_def** %rtx75, align 8
  %43 = bitcast %struct.rtx_def* %42 to i32*
  %bf.load76 = load i32, i32* %43, align 8
  %bf.clear77 = and i32 %bf.load76, 65535
  %cmp78 = icmp eq i32 %bf.clear77, 58
  br i1 %cmp78, label %if.then.100, label %lor.lhs.false.79

lor.lhs.false.79:                                 ; preds = %lor.lhs.false.72
  %44 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %fld80 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %44, i32 0, i32 1
  %arrayidx81 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld80, i32 0, i64 0
  %rtx82 = bitcast %union.rtunion_def* %arrayidx81 to %struct.rtx_def**
  %45 = load %struct.rtx_def*, %struct.rtx_def** %rtx82, align 8
  %46 = bitcast %struct.rtx_def* %45 to i32*
  %bf.load83 = load i32, i32* %46, align 8
  %bf.clear84 = and i32 %bf.load83, 65535
  %cmp85 = icmp eq i32 %bf.clear84, 134
  br i1 %cmp85, label %if.then.100, label %lor.lhs.false.86

lor.lhs.false.86:                                 ; preds = %lor.lhs.false.79
  %47 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %fld87 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %47, i32 0, i32 1
  %arrayidx88 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld87, i32 0, i64 0
  %rtx89 = bitcast %union.rtunion_def* %arrayidx88 to %struct.rtx_def**
  %48 = load %struct.rtx_def*, %struct.rtx_def** %rtx89, align 8
  %49 = bitcast %struct.rtx_def* %48 to i32*
  %bf.load90 = load i32, i32* %49, align 8
  %bf.clear91 = and i32 %bf.load90, 65535
  %cmp92 = icmp eq i32 %bf.clear91, 56
  br i1 %cmp92, label %if.then.100, label %lor.lhs.false.93

lor.lhs.false.93:                                 ; preds = %lor.lhs.false.86
  %50 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %fld94 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %50, i32 0, i32 1
  %arrayidx95 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld94, i32 0, i64 0
  %rtx96 = bitcast %union.rtunion_def* %arrayidx95 to %struct.rtx_def**
  %51 = load %struct.rtx_def*, %struct.rtx_def** %rtx96, align 8
  %52 = bitcast %struct.rtx_def* %51 to i32*
  %bf.load97 = load i32, i32* %52, align 8
  %bf.clear98 = and i32 %bf.load97, 65535
  %cmp99 = icmp eq i32 %bf.clear98, 140
  br i1 %cmp99, label %if.then.100, label %if.end

if.then.100:                                      ; preds = %lor.lhs.false.93, %lor.lhs.false.86, %lor.lhs.false.79, %lor.lhs.false.72, %lor.lhs.false.65, %lor.lhs.false.58, %lor.lhs.false.51, %land.lhs.true.47, %lor.lhs.false.39, %lor.lhs.false.35, %lor.lhs.false.31, %lor.lhs.false.27, %lor.lhs.false.23, %lor.lhs.false.19, %lor.lhs.false, %land.lhs.true
  %53 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %call = call %struct.rtx_def* @i386_simplify_dwarf_addr(%struct.rtx_def* %53)
  store %struct.rtx_def* %call, %struct.rtx_def** %rtl, align 8
  %54 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  store %struct.rtx_def* %54, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false.93, %lor.lhs.false.43, %if.then
  store %struct.rtx_def* null, %struct.rtx_def** %rtl, align 8
  br label %if.end.320

if.else:                                          ; preds = %cond.end.11
  %55 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common = bitcast %union.tree_node* %55 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load101 = load i32, i32* %code, align 8
  %bf.clear102 = and i32 %bf.load101, 255
  %cmp103 = icmp eq i32 %bf.clear102, 35
  br i1 %cmp103, label %if.then.104, label %if.end.319

if.then.104:                                      ; preds = %if.else
  %56 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %cmp105 = icmp eq %struct.rtx_def* %56, null
  br i1 %cmp105, label %if.then.109, label %lor.lhs.false.106

lor.lhs.false.106:                                ; preds = %if.then.104
  %57 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %call107 = call i32 @is_pseudo_reg(%struct.rtx_def* %57)
  %tobool108 = icmp ne i32 %call107, 0
  br i1 %tobool108, label %if.then.109, label %if.else.144

if.then.109:                                      ; preds = %lor.lhs.false.106, %if.then.104
  %58 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common110 = bitcast %union.tree_node* %58 to %struct.tree_common*
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common110, i32 0, i32 1
  %59 = load %union.tree_node*, %union.tree_node** %type, align 8
  %call111 = call %union.tree_node* @type_main_variant(%union.tree_node* %59)
  store %union.tree_node* %call111, %union.tree_node** %declared_type, align 8
  %60 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl112 = bitcast %union.tree_node* %60 to %struct.tree_decl*
  %initial = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl112, i32 0, i32 12
  %61 = load %union.tree_node*, %union.tree_node** %initial, align 8
  %call113 = call %union.tree_node* @type_main_variant(%union.tree_node* %61)
  store %union.tree_node* %call113, %union.tree_node** %passed_type, align 8
  %62 = load %union.tree_node*, %union.tree_node** %declared_type, align 8
  %63 = load %union.tree_node*, %union.tree_node** %passed_type, align 8
  %cmp114 = icmp eq %union.tree_node* %62, %63
  br i1 %cmp114, label %if.then.115, label %if.else.117

if.then.115:                                      ; preds = %if.then.109
  %64 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl116 = bitcast %union.tree_node* %64 to %struct.tree_decl*
  %u2 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl116, i32 0, i32 19
  %r = bitcast %union.anon.1* %u2 to %struct.rtx_def**
  %65 = load %struct.rtx_def*, %struct.rtx_def** %r, align 8
  store %struct.rtx_def* %65, %struct.rtx_def** %rtl, align 8
  br label %if.end.143

if.else.117:                                      ; preds = %if.then.109
  %66 = load %union.tree_node*, %union.tree_node** %declared_type, align 8
  %common118 = bitcast %union.tree_node* %66 to %struct.tree_common*
  %code119 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common118, i32 0, i32 2
  %bf.load120 = load i32, i32* %code119, align 8
  %bf.clear121 = and i32 %bf.load120, 255
  %cmp122 = icmp eq i32 %bf.clear121, 6
  br i1 %cmp122, label %land.lhs.true.123, label %if.end.142

land.lhs.true.123:                                ; preds = %if.else.117
  %67 = load %union.tree_node*, %union.tree_node** %declared_type, align 8
  %type124 = bitcast %union.tree_node* %67 to %struct.tree_type*
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type124, i32 0, i32 6
  %bf.load125 = load i32, i32* %mode, align 4
  %bf.lshr = lshr i32 %bf.load125, 9
  %bf.clear126 = and i32 %bf.lshr, 127
  %idxprom = sext i32 %bf.clear126 to i64
  %arrayidx127 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom
  %68 = load i8, i8* %arrayidx127, align 1
  %conv = zext i8 %68 to i32
  %69 = load %union.tree_node*, %union.tree_node** %passed_type, align 8
  %type128 = bitcast %union.tree_node* %69 to %struct.tree_type*
  %mode129 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type128, i32 0, i32 6
  %bf.load130 = load i32, i32* %mode129, align 4
  %bf.lshr131 = lshr i32 %bf.load130, 9
  %bf.clear132 = and i32 %bf.lshr131, 127
  %idxprom133 = sext i32 %bf.clear132 to i64
  %arrayidx134 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom133
  %70 = load i8, i8* %arrayidx134, align 1
  %conv135 = zext i8 %70 to i32
  %cmp136 = icmp sle i32 %conv, %conv135
  br i1 %cmp136, label %if.then.138, label %if.end.142

if.then.138:                                      ; preds = %land.lhs.true.123
  %71 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl139 = bitcast %union.tree_node* %71 to %struct.tree_decl*
  %u2140 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl139, i32 0, i32 19
  %r141 = bitcast %union.anon.1* %u2140 to %struct.rtx_def**
  %72 = load %struct.rtx_def*, %struct.rtx_def** %r141, align 8
  store %struct.rtx_def* %72, %struct.rtx_def** %rtl, align 8
  br label %if.end.142

if.end.142:                                       ; preds = %if.then.138, %land.lhs.true.123, %if.else.117
  br label %if.end.143

if.end.143:                                       ; preds = %if.end.142, %if.then.115
  br label %if.end.318

if.else.144:                                      ; preds = %lor.lhs.false.106
  %73 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %74 = bitcast %struct.rtx_def* %73 to i32*
  %bf.load145 = load i32, i32* %74, align 8
  %bf.clear146 = and i32 %bf.load145, 65535
  %cmp147 = icmp eq i32 %bf.clear146, 66
  br i1 %cmp147, label %land.lhs.true.149, label %if.end.317

land.lhs.true.149:                                ; preds = %if.else.144
  %75 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %fld150 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %75, i32 0, i32 1
  %arrayidx151 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld150, i32 0, i64 0
  %rtx152 = bitcast %union.rtunion_def* %arrayidx151 to %struct.rtx_def**
  %76 = load %struct.rtx_def*, %struct.rtx_def** %rtx152, align 8
  %77 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %cmp153 = icmp ne %struct.rtx_def* %76, %77
  br i1 %cmp153, label %land.lhs.true.155, label %if.end.317

land.lhs.true.155:                                ; preds = %land.lhs.true.149
  %78 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %fld156 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %78, i32 0, i32 1
  %arrayidx157 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld156, i32 0, i64 0
  %rtx158 = bitcast %union.rtunion_def* %arrayidx157 to %struct.rtx_def**
  %79 = load %struct.rtx_def*, %struct.rtx_def** %rtx158, align 8
  %80 = bitcast %struct.rtx_def* %79 to i32*
  %bf.load159 = load i32, i32* %80, align 8
  %bf.clear160 = and i32 %bf.load159, 65535
  %cmp161 = icmp eq i32 %bf.clear160, 67
  br i1 %cmp161, label %if.end.317, label %lor.lhs.false.163

lor.lhs.false.163:                                ; preds = %land.lhs.true.155
  %81 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %fld164 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %81, i32 0, i32 1
  %arrayidx165 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld164, i32 0, i64 0
  %rtx166 = bitcast %union.rtunion_def* %arrayidx165 to %struct.rtx_def**
  %82 = load %struct.rtx_def*, %struct.rtx_def** %rtx166, align 8
  %83 = bitcast %struct.rtx_def* %82 to i32*
  %bf.load167 = load i32, i32* %83, align 8
  %bf.clear168 = and i32 %bf.load167, 65535
  %cmp169 = icmp eq i32 %bf.clear168, 68
  br i1 %cmp169, label %if.end.317, label %lor.lhs.false.171

lor.lhs.false.171:                                ; preds = %lor.lhs.false.163
  %84 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %fld172 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %84, i32 0, i32 1
  %arrayidx173 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld172, i32 0, i64 0
  %rtx174 = bitcast %union.rtunion_def* %arrayidx173 to %struct.rtx_def**
  %85 = load %struct.rtx_def*, %struct.rtx_def** %rtx174, align 8
  %86 = bitcast %struct.rtx_def* %85 to i32*
  %bf.load175 = load i32, i32* %86, align 8
  %bf.clear176 = and i32 %bf.load175, 65535
  %cmp177 = icmp eq i32 %bf.clear176, 54
  br i1 %cmp177, label %if.end.317, label %lor.lhs.false.179

lor.lhs.false.179:                                ; preds = %lor.lhs.false.171
  %87 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %fld180 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %87, i32 0, i32 1
  %arrayidx181 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld180, i32 0, i64 0
  %rtx182 = bitcast %union.rtunion_def* %arrayidx181 to %struct.rtx_def**
  %88 = load %struct.rtx_def*, %struct.rtx_def** %rtx182, align 8
  %89 = bitcast %struct.rtx_def* %88 to i32*
  %bf.load183 = load i32, i32* %89, align 8
  %bf.clear184 = and i32 %bf.load183, 65535
  %cmp185 = icmp eq i32 %bf.clear184, 55
  br i1 %cmp185, label %if.end.317, label %lor.lhs.false.187

lor.lhs.false.187:                                ; preds = %lor.lhs.false.179
  %90 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %fld188 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %90, i32 0, i32 1
  %arrayidx189 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld188, i32 0, i64 0
  %rtx190 = bitcast %union.rtunion_def* %arrayidx189 to %struct.rtx_def**
  %91 = load %struct.rtx_def*, %struct.rtx_def** %rtx190, align 8
  %92 = bitcast %struct.rtx_def* %91 to i32*
  %bf.load191 = load i32, i32* %92, align 8
  %bf.clear192 = and i32 %bf.load191, 65535
  %cmp193 = icmp eq i32 %bf.clear192, 58
  br i1 %cmp193, label %if.end.317, label %lor.lhs.false.195

lor.lhs.false.195:                                ; preds = %lor.lhs.false.187
  %93 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %fld196 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %93, i32 0, i32 1
  %arrayidx197 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld196, i32 0, i64 0
  %rtx198 = bitcast %union.rtunion_def* %arrayidx197 to %struct.rtx_def**
  %94 = load %struct.rtx_def*, %struct.rtx_def** %rtx198, align 8
  %95 = bitcast %struct.rtx_def* %94 to i32*
  %bf.load199 = load i32, i32* %95, align 8
  %bf.clear200 = and i32 %bf.load199, 65535
  %cmp201 = icmp eq i32 %bf.clear200, 134
  br i1 %cmp201, label %if.end.317, label %lor.lhs.false.203

lor.lhs.false.203:                                ; preds = %lor.lhs.false.195
  %96 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %fld204 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %96, i32 0, i32 1
  %arrayidx205 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld204, i32 0, i64 0
  %rtx206 = bitcast %union.rtunion_def* %arrayidx205 to %struct.rtx_def**
  %97 = load %struct.rtx_def*, %struct.rtx_def** %rtx206, align 8
  %98 = bitcast %struct.rtx_def* %97 to i32*
  %bf.load207 = load i32, i32* %98, align 8
  %bf.clear208 = and i32 %bf.load207, 65535
  %cmp209 = icmp eq i32 %bf.clear208, 56
  br i1 %cmp209, label %if.end.317, label %lor.lhs.false.211

lor.lhs.false.211:                                ; preds = %lor.lhs.false.203
  %99 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %fld212 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %99, i32 0, i32 1
  %arrayidx213 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld212, i32 0, i64 0
  %rtx214 = bitcast %union.rtunion_def* %arrayidx213 to %struct.rtx_def**
  %100 = load %struct.rtx_def*, %struct.rtx_def** %rtx214, align 8
  %101 = bitcast %struct.rtx_def* %100 to i32*
  %bf.load215 = load i32, i32* %101, align 8
  %bf.clear216 = and i32 %bf.load215, 65535
  %cmp217 = icmp eq i32 %bf.clear216, 140
  br i1 %cmp217, label %if.end.317, label %land.lhs.true.219

land.lhs.true.219:                                ; preds = %lor.lhs.false.211
  %102 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl220 = bitcast %union.tree_node* %102 to %struct.tree_decl*
  %u2221 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl220, i32 0, i32 19
  %r222 = bitcast %union.anon.1* %u2221 to %struct.rtx_def**
  %103 = load %struct.rtx_def*, %struct.rtx_def** %r222, align 8
  %104 = bitcast %struct.rtx_def* %103 to i32*
  %bf.load223 = load i32, i32* %104, align 8
  %bf.clear224 = and i32 %bf.load223, 65535
  %cmp225 = icmp ne i32 %bf.clear224, 66
  br i1 %cmp225, label %land.lhs.true.227, label %if.end.317

land.lhs.true.227:                                ; preds = %land.lhs.true.219
  %105 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %fld228 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %105, i32 0, i32 1
  %arrayidx229 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld228, i32 0, i64 0
  %rtx230 = bitcast %union.rtunion_def* %arrayidx229 to %struct.rtx_def**
  %106 = load %struct.rtx_def*, %struct.rtx_def** %rtx230, align 8
  %107 = bitcast %struct.rtx_def* %106 to i32*
  %bf.load231 = load i32, i32* %107, align 8
  %bf.clear232 = and i32 %bf.load231, 65535
  %cmp233 = icmp ne i32 %bf.clear232, 61
  br i1 %cmp233, label %land.lhs.true.261, label %lor.lhs.false.235

lor.lhs.false.235:                                ; preds = %land.lhs.true.227
  %108 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %fld236 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %108, i32 0, i32 1
  %arrayidx237 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld236, i32 0, i64 0
  %rtx238 = bitcast %union.rtunion_def* %arrayidx237 to %struct.rtx_def**
  %109 = load %struct.rtx_def*, %struct.rtx_def** %rtx238, align 8
  %fld239 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %109, i32 0, i32 1
  %arrayidx240 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld239, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx240 to i32*
  %110 = load i32, i32* %rtuint, align 4
  %cmp241 = icmp eq i32 %110, 6
  br i1 %cmp241, label %land.lhs.true.261, label %lor.lhs.false.243

lor.lhs.false.243:                                ; preds = %lor.lhs.false.235
  %111 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %fld244 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %111, i32 0, i32 1
  %arrayidx245 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld244, i32 0, i64 0
  %rtx246 = bitcast %union.rtunion_def* %arrayidx245 to %struct.rtx_def**
  %112 = load %struct.rtx_def*, %struct.rtx_def** %rtx246, align 8
  %fld247 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %112, i32 0, i32 1
  %arrayidx248 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld247, i32 0, i64 0
  %rtuint249 = bitcast %union.rtunion_def* %arrayidx248 to i32*
  %113 = load i32, i32* %rtuint249, align 4
  %cmp250 = icmp eq i32 %113, 7
  br i1 %cmp250, label %land.lhs.true.261, label %lor.lhs.false.252

lor.lhs.false.252:                                ; preds = %lor.lhs.false.243
  %114 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %fld253 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %114, i32 0, i32 1
  %arrayidx254 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld253, i32 0, i64 0
  %rtx255 = bitcast %union.rtunion_def* %arrayidx254 to %struct.rtx_def**
  %115 = load %struct.rtx_def*, %struct.rtx_def** %rtx255, align 8
  %fld256 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %115, i32 0, i32 1
  %arrayidx257 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld256, i32 0, i64 0
  %rtuint258 = bitcast %union.rtunion_def* %arrayidx257 to i32*
  %116 = load i32, i32* %rtuint258, align 4
  %cmp259 = icmp eq i32 %116, 16
  br i1 %cmp259, label %land.lhs.true.261, label %if.end.317

land.lhs.true.261:                                ; preds = %lor.lhs.false.252, %lor.lhs.false.243, %lor.lhs.false.235, %land.lhs.true.227
  br i1 false, label %land.lhs.true.262, label %if.end.317

land.lhs.true.262:                                ; preds = %land.lhs.true.261
  %117 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common263 = bitcast %union.tree_node* %117 to %struct.tree_common*
  %type264 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common263, i32 0, i32 1
  %118 = load %union.tree_node*, %union.tree_node** %type264, align 8
  %type265 = bitcast %union.tree_node* %118 to %struct.tree_type*
  %mode266 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type265, i32 0, i32 6
  %bf.load267 = load i32, i32* %mode266, align 4
  %bf.lshr268 = lshr i32 %bf.load267, 9
  %bf.clear269 = and i32 %bf.lshr268, 127
  %119 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %120 = bitcast %struct.rtx_def* %119 to i32*
  %bf.load270 = load i32, i32* %120, align 8
  %bf.lshr271 = lshr i32 %bf.load270, 16
  %bf.clear272 = and i32 %bf.lshr271, 255
  %cmp273 = icmp ne i32 %bf.clear269, %bf.clear272
  br i1 %cmp273, label %land.lhs.true.275, label %if.end.317

land.lhs.true.275:                                ; preds = %land.lhs.true.262
  %121 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common276 = bitcast %union.tree_node* %121 to %struct.tree_common*
  %type277 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common276, i32 0, i32 1
  %122 = load %union.tree_node*, %union.tree_node** %type277, align 8
  %type278 = bitcast %union.tree_node* %122 to %struct.tree_type*
  %mode279 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type278, i32 0, i32 6
  %bf.load280 = load i32, i32* %mode279, align 4
  %bf.lshr281 = lshr i32 %bf.load280, 9
  %bf.clear282 = and i32 %bf.lshr281, 127
  %idxprom283 = sext i32 %bf.clear282 to i64
  %arrayidx284 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom283
  %123 = load i8, i8* %arrayidx284, align 1
  %conv285 = zext i8 %123 to i32
  %124 = load i32, i32* @target_flags, align 4
  %and = and i32 %124, 33554432
  %tobool286 = icmp ne i32 %and, 0
  %cond287 = select i1 %tobool286, i32 8, i32 4
  %cmp288 = icmp slt i32 %conv285, %cond287
  br i1 %cmp288, label %if.then.290, label %if.end.317

if.then.290:                                      ; preds = %land.lhs.true.275
  %125 = load i32, i32* @target_flags, align 4
  %and291 = and i32 %125, 33554432
  %tobool292 = icmp ne i32 %and291, 0
  %cond293 = select i1 %tobool292, i32 8, i32 4
  %126 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common294 = bitcast %union.tree_node* %126 to %struct.tree_common*
  %type295 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common294, i32 0, i32 1
  %127 = load %union.tree_node*, %union.tree_node** %type295, align 8
  %type296 = bitcast %union.tree_node* %127 to %struct.tree_type*
  %mode297 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type296, i32 0, i32 6
  %bf.load298 = load i32, i32* %mode297, align 4
  %bf.lshr299 = lshr i32 %bf.load298, 9
  %bf.clear300 = and i32 %bf.lshr299, 127
  %idxprom301 = sext i32 %bf.clear300 to i64
  %arrayidx302 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom301
  %128 = load i8, i8* %arrayidx302, align 1
  %conv303 = zext i8 %128 to i32
  %sub = sub nsw i32 %cond293, %conv303
  store i32 %sub, i32* %offset, align 4
  %129 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common304 = bitcast %union.tree_node* %129 to %struct.tree_common*
  %type305 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common304, i32 0, i32 1
  %130 = load %union.tree_node*, %union.tree_node** %type305, align 8
  %type306 = bitcast %union.tree_node* %130 to %struct.tree_type*
  %mode307 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type306, i32 0, i32 6
  %bf.load308 = load i32, i32* %mode307, align 4
  %bf.lshr309 = lshr i32 %bf.load308, 9
  %bf.clear310 = and i32 %bf.lshr309, 127
  %131 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %fld311 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %131, i32 0, i32 1
  %arrayidx312 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld311, i32 0, i64 0
  %rtx313 = bitcast %union.rtunion_def* %arrayidx312 to %struct.rtx_def**
  %132 = load %struct.rtx_def*, %struct.rtx_def** %rtx313, align 8
  %133 = load i32, i32* %offset, align 4
  %conv314 = sext i32 %133 to i64
  %call315 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %132, i64 %conv314)
  %call316 = call %struct.rtx_def* @gen_rtx_MEM(i32 %bf.clear310, %struct.rtx_def* %call315)
  store %struct.rtx_def* %call316, %struct.rtx_def** %rtl, align 8
  br label %if.end.317

if.end.317:                                       ; preds = %if.then.290, %land.lhs.true.275, %land.lhs.true.262, %land.lhs.true.261, %lor.lhs.false.252, %land.lhs.true.219, %lor.lhs.false.211, %lor.lhs.false.203, %lor.lhs.false.195, %lor.lhs.false.187, %lor.lhs.false.179, %lor.lhs.false.171, %lor.lhs.false.163, %land.lhs.true.155, %land.lhs.true.149, %if.else.144
  br label %if.end.318

if.end.318:                                       ; preds = %if.end.317, %if.end.143
  br label %if.end.319

if.end.319:                                       ; preds = %if.end.318, %if.else
  br label %if.end.320

if.end.320:                                       ; preds = %if.end.319, %if.end
  %134 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %cmp321 = icmp ne %struct.rtx_def* %134, null
  br i1 %cmp321, label %if.then.323, label %if.else.325

if.then.323:                                      ; preds = %if.end.320
  %135 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %call324 = call %struct.rtx_def* @eliminate_regs(%struct.rtx_def* %135, i32 0, %struct.rtx_def* null)
  store %struct.rtx_def* %call324, %struct.rtx_def** %rtl, align 8
  br label %if.end.437

if.else.325:                                      ; preds = %if.end.320
  %136 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common326 = bitcast %union.tree_node* %136 to %struct.tree_common*
  %code327 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common326, i32 0, i32 2
  %bf.load328 = load i32, i32* %code327, align 8
  %bf.clear329 = and i32 %bf.load328, 255
  %cmp330 = icmp eq i32 %bf.clear329, 34
  br i1 %cmp330, label %land.lhs.true.332, label %if.end.436

land.lhs.true.332:                                ; preds = %if.else.325
  %137 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl333 = bitcast %union.tree_node* %137 to %struct.tree_decl*
  %initial334 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl333, i32 0, i32 12
  %138 = load %union.tree_node*, %union.tree_node** %initial334, align 8
  %tobool335 = icmp ne %union.tree_node* %138, null
  br i1 %tobool335, label %if.then.336, label %if.end.436

if.then.336:                                      ; preds = %land.lhs.true.332
  %139 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl337 = bitcast %union.tree_node* %139 to %struct.tree_decl*
  %initial338 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl337, i32 0, i32 12
  %140 = load %union.tree_node*, %union.tree_node** %initial338, align 8
  %common339 = bitcast %union.tree_node* %140 to %struct.tree_common*
  %code340 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common339, i32 0, i32 2
  %bf.load341 = load i32, i32* %code340, align 8
  %bf.clear342 = and i32 %bf.load341, 255
  %cmp343 = icmp eq i32 %bf.clear342, 29
  br i1 %cmp343, label %land.lhs.true.345, label %if.else.404

land.lhs.true.345:                                ; preds = %if.then.336
  %141 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common346 = bitcast %union.tree_node* %141 to %struct.tree_common*
  %type347 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common346, i32 0, i32 1
  %142 = load %union.tree_node*, %union.tree_node** %type347, align 8
  %common348 = bitcast %union.tree_node* %142 to %struct.tree_common*
  %code349 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common348, i32 0, i32 2
  %bf.load350 = load i32, i32* %code349, align 8
  %bf.clear351 = and i32 %bf.load350, 255
  %cmp352 = icmp eq i32 %bf.clear351, 18
  br i1 %cmp352, label %if.then.354, label %if.else.404

if.then.354:                                      ; preds = %land.lhs.true.345
  %143 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common355 = bitcast %union.tree_node* %143 to %struct.tree_common*
  %type356 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common355, i32 0, i32 1
  %144 = load %union.tree_node*, %union.tree_node** %type356, align 8
  store %union.tree_node* %144, %union.tree_node** %arrtype, align 8
  %145 = load %union.tree_node*, %union.tree_node** %arrtype, align 8
  %common357 = bitcast %union.tree_node* %145 to %struct.tree_common*
  %type358 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common357, i32 0, i32 1
  %146 = load %union.tree_node*, %union.tree_node** %type358, align 8
  store %union.tree_node* %146, %union.tree_node** %enttype, align 8
  %147 = load %union.tree_node*, %union.tree_node** %arrtype, align 8
  %type359 = bitcast %union.tree_node* %147 to %struct.tree_type*
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type359, i32 0, i32 1
  %148 = load %union.tree_node*, %union.tree_node** %values, align 8
  store %union.tree_node* %148, %union.tree_node** %domain, align 8
  %149 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl360 = bitcast %union.tree_node* %149 to %struct.tree_decl*
  %initial361 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl360, i32 0, i32 12
  %150 = load %union.tree_node*, %union.tree_node** %initial361, align 8
  store %union.tree_node* %150, %union.tree_node** %init, align 8
  %151 = load %union.tree_node*, %union.tree_node** %enttype, align 8
  %type363 = bitcast %union.tree_node* %151 to %struct.tree_type*
  %mode364 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type363, i32 0, i32 6
  %bf.load365 = load i32, i32* %mode364, align 4
  %bf.lshr366 = lshr i32 %bf.load365, 9
  %bf.clear367 = and i32 %bf.lshr366, 127
  store i32 %bf.clear367, i32* %mode362, align 4
  %152 = load i32, i32* %mode362, align 4
  %idxprom368 = sext i32 %152 to i64
  %arrayidx369 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom368
  %153 = load i32, i32* %arrayidx369, align 4
  %cmp370 = icmp eq i32 %153, 1
  br i1 %cmp370, label %land.lhs.true.372, label %if.end.403

land.lhs.true.372:                                ; preds = %if.then.354
  %154 = load i32, i32* %mode362, align 4
  %idxprom373 = sext i32 %154 to i64
  %arrayidx374 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom373
  %155 = load i8, i8* %arrayidx374, align 1
  %conv375 = zext i8 %155 to i32
  %cmp376 = icmp eq i32 %conv375, 1
  br i1 %cmp376, label %land.lhs.true.378, label %if.end.403

land.lhs.true.378:                                ; preds = %land.lhs.true.372
  %156 = load %union.tree_node*, %union.tree_node** %domain, align 8
  %tobool379 = icmp ne %union.tree_node* %156, null
  br i1 %tobool379, label %land.lhs.true.380, label %if.end.403

land.lhs.true.380:                                ; preds = %land.lhs.true.378
  %157 = load %union.tree_node*, %union.tree_node** %domain, align 8
  %type381 = bitcast %union.tree_node* %157 to %struct.tree_type*
  %minval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type381, i32 0, i32 12
  %158 = load %union.tree_node*, %union.tree_node** %minval, align 8
  %call382 = call i32 @integer_zerop(%union.tree_node* %158)
  %tobool383 = icmp ne i32 %call382, 0
  br i1 %tobool383, label %land.lhs.true.384, label %if.end.403

land.lhs.true.384:                                ; preds = %land.lhs.true.380
  %159 = load %union.tree_node*, %union.tree_node** %domain, align 8
  %type385 = bitcast %union.tree_node* %159 to %struct.tree_type*
  %maxval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type385, i32 0, i32 13
  %160 = load %union.tree_node*, %union.tree_node** %maxval, align 8
  %161 = load %union.tree_node*, %union.tree_node** %init, align 8
  %string = bitcast %union.tree_node* %161 to %struct.tree_string*
  %length = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string, i32 0, i32 2
  %162 = load i32, i32* %length, align 4
  %sub386 = sub nsw i32 %162, 1
  %conv387 = sext i32 %sub386 to i64
  %call388 = call i32 @compare_tree_int(%union.tree_node* %160, i64 %conv387)
  %cmp389 = icmp eq i32 %call388, 0
  br i1 %cmp389, label %land.lhs.true.391, label %if.end.403

land.lhs.true.391:                                ; preds = %land.lhs.true.384
  %163 = load %union.tree_node*, %union.tree_node** %init, align 8
  %string392 = bitcast %union.tree_node* %163 to %struct.tree_string*
  %length393 = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string392, i32 0, i32 2
  %164 = load i32, i32* %length393, align 4
  %conv394 = sext i32 %164 to i64
  %165 = load %union.tree_node*, %union.tree_node** %init, align 8
  %string395 = bitcast %union.tree_node* %165 to %struct.tree_string*
  %pointer = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string395, i32 0, i32 3
  %166 = load i8*, i8** %pointer, align 8
  %call396 = call i64 @strlen(i8* %166) #7
  %add = add i64 %call396, 1
  %cmp397 = icmp eq i64 %conv394, %add
  br i1 %cmp397, label %if.then.399, label %if.end.403

if.then.399:                                      ; preds = %land.lhs.true.391
  %167 = load %union.tree_node*, %union.tree_node** %init, align 8
  %string400 = bitcast %union.tree_node* %167 to %struct.tree_string*
  %pointer401 = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string400, i32 0, i32 3
  %168 = load i8*, i8** %pointer401, align 8
  %call402 = call %struct.rtx_def* @gen_rtx_fmt_s(i32 57, i32 0, i8* %168)
  store %struct.rtx_def* %call402, %struct.rtx_def** %rtl, align 8
  br label %if.end.403

if.end.403:                                       ; preds = %if.then.399, %land.lhs.true.391, %land.lhs.true.384, %land.lhs.true.380, %land.lhs.true.378, %land.lhs.true.372, %if.then.354
  br label %if.end.435

if.else.404:                                      ; preds = %land.lhs.true.345, %if.then.336
  %169 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl405 = bitcast %union.tree_node* %169 to %struct.tree_decl*
  %initial406 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl405, i32 0, i32 12
  %170 = load %union.tree_node*, %union.tree_node** %initial406, align 8
  %common407 = bitcast %union.tree_node* %170 to %struct.tree_common*
  %code408 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common407, i32 0, i32 2
  %bf.load409 = load i32, i32* %code408, align 8
  %bf.clear410 = and i32 %bf.load409, 255
  %cmp411 = icmp eq i32 %bf.clear410, 25
  br i1 %cmp411, label %if.then.422, label %lor.lhs.false.413

lor.lhs.false.413:                                ; preds = %if.else.404
  %171 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl414 = bitcast %union.tree_node* %171 to %struct.tree_decl*
  %initial415 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl414, i32 0, i32 12
  %172 = load %union.tree_node*, %union.tree_node** %initial415, align 8
  %common416 = bitcast %union.tree_node* %172 to %struct.tree_common*
  %code417 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common416, i32 0, i32 2
  %bf.load418 = load i32, i32* %code417, align 8
  %bf.clear419 = and i32 %bf.load418, 255
  %cmp420 = icmp eq i32 %bf.clear419, 26
  br i1 %cmp420, label %if.then.422, label %if.end.434

if.then.422:                                      ; preds = %lor.lhs.false.413, %if.else.404
  %173 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl423 = bitcast %union.tree_node* %173 to %struct.tree_decl*
  %initial424 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl423, i32 0, i32 12
  %174 = load %union.tree_node*, %union.tree_node** %initial424, align 8
  %call425 = call %struct.rtx_def* @expand_expr(%union.tree_node* %174, %struct.rtx_def* null, i32 0, i32 3)
  store %struct.rtx_def* %call425, %struct.rtx_def** %rtl, align 8
  %175 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %tobool426 = icmp ne %struct.rtx_def* %175, null
  br i1 %tobool426, label %land.lhs.true.427, label %if.end.433

land.lhs.true.427:                                ; preds = %if.then.422
  %176 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %177 = bitcast %struct.rtx_def* %176 to i32*
  %bf.load428 = load i32, i32* %177, align 8
  %bf.clear429 = and i32 %bf.load428, 65535
  %cmp430 = icmp eq i32 %bf.clear429, 66
  br i1 %cmp430, label %if.then.432, label %if.end.433

if.then.432:                                      ; preds = %land.lhs.true.427
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 8957, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @__FUNCTION__.rtl_for_decl_location, i32 0, i32 0)) #8
  unreachable

if.end.433:                                       ; preds = %land.lhs.true.427, %if.then.422
  br label %if.end.434

if.end.434:                                       ; preds = %if.end.433, %lor.lhs.false.413
  br label %if.end.435

if.end.435:                                       ; preds = %if.end.434, %if.end.403
  br label %if.end.436

if.end.436:                                       ; preds = %if.end.435, %land.lhs.true.332, %if.else.325
  br label %if.end.437

if.end.437:                                       ; preds = %if.end.436, %if.then.323
  %178 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %tobool438 = icmp ne %struct.rtx_def* %178, null
  br i1 %tobool438, label %if.then.439, label %if.end.441

if.then.439:                                      ; preds = %if.end.437
  %179 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %call440 = call %struct.rtx_def* @i386_simplify_dwarf_addr(%struct.rtx_def* %179)
  store %struct.rtx_def* %call440, %struct.rtx_def** %rtl, align 8
  br label %if.end.441

if.end.441:                                       ; preds = %if.then.439, %if.end.437
  %180 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  store %struct.rtx_def* %180, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end.441, %if.then.100
  %181 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %181
}

declare %struct.rtx_def* @avoid_constant_pool_reference(%struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define internal void @add_const_value_attribute(%struct.die_struct* %die, %struct.rtx_def* %rtl) #0 {
entry:
  %die.addr = alloca %struct.die_struct*, align 8
  %rtl.addr = alloca %struct.rtx_def*, align 8
  %val = alloca i64, align 8
  %mode = alloca i32, align 4
  %length = alloca i32, align 4
  %array = alloca i64*, align 8
  %rv = alloca %struct.realvaluetype, align 8
  %u = alloca %union.real_extract, align 8
  store %struct.die_struct* %die, %struct.die_struct** %die.addr, align 8
  store %struct.rtx_def* %rtl, %struct.rtx_def** %rtl.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %sw.default.65 [
    i32 54, label %sw.bb
    i32 55, label %sw.bb.6
    i32 57, label %sw.bb.49
    i32 68, label %sw.bb.52
    i32 67, label %sw.bb.52
    i32 58, label %sw.bb.52
    i32 75, label %sw.bb.64
  ]

sw.bb:                                            ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx to i64*
  %3 = load i64, i64* %rtwint, align 8
  store i64 %3, i64* %val, align 8
  %4 = load i64, i64* %val, align 8
  %cmp = icmp slt i64 %4, 0
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %sw.bb
  %5 = load i64, i64* %val, align 8
  %6 = load i64, i64* %val, align 8
  %cmp1 = icmp eq i64 %5, %6
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %7 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %8 = load i64, i64* %val, align 8
  call void @add_AT_int(%struct.die_struct* %7, i32 28, i64 %8)
  br label %if.end.5

if.else:                                          ; preds = %land.lhs.true, %sw.bb
  %9 = load i64, i64* %val, align 8
  %10 = load i64, i64* %val, align 8
  %cmp2 = icmp eq i64 %9, %10
  br i1 %cmp2, label %if.then.3, label %if.else.4

if.then.3:                                        ; preds = %if.else
  %11 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %12 = load i64, i64* %val, align 8
  call void @add_AT_unsigned(%struct.die_struct* %11, i32 28, i64 %12)
  br label %if.end

if.else.4:                                        ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 8676, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @__FUNCTION__.add_const_value_attribute, i32 0, i32 0)) #8
  unreachable

if.end:                                           ; preds = %if.then.3
  br label %if.end.5

if.end.5:                                         ; preds = %if.end, %if.then
  br label %sw.epilog.66

sw.bb.6:                                          ; preds = %entry
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  %14 = bitcast %struct.rtx_def* %13 to i32*
  %bf.load7 = load i32, i32* %14, align 8
  %bf.lshr = lshr i32 %bf.load7, 16
  %bf.clear8 = and i32 %bf.lshr, 255
  store i32 %bf.clear8, i32* %mode, align 4
  %15 = load i32, i32* %mode, align 4
  %idxprom = sext i32 %15 to i64
  %arrayidx9 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom
  %16 = load i32, i32* %arrayidx9, align 4
  %cmp10 = icmp eq i32 %16, 2
  br i1 %cmp10, label %if.then.11, label %if.else.41

if.then.11:                                       ; preds = %sw.bb.6
  %17 = load i32, i32* %mode, align 4
  %idxprom12 = sext i32 %17 to i64
  %arrayidx13 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom12
  %18 = load i8, i8* %arrayidx13, align 1
  %conv = zext i8 %18 to i32
  %div = sdiv i32 %conv, 4
  store i32 %div, i32* %length, align 4
  %19 = load i32, i32* %length, align 4
  %conv14 = zext i32 %19 to i64
  %mul = mul i64 8, %conv14
  %call = call noalias i8* @xmalloc(i64 %mul)
  %20 = bitcast i8* %call to i64*
  store i64* %20, i64** %array, align 8
  br label %do.body

do.body:                                          ; preds = %if.then.11
  %21 = bitcast %union.real_extract* %u to i8*
  %22 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  %fld15 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1
  %arrayidx16 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld15, i32 0, i64 1
  %rtwint17 = bitcast %union.rtunion_def* %arrayidx16 to i64*
  %23 = bitcast i64* %rtwint17 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %21, i8* %23, i64 24, i32 8, i1 false)
  %d = bitcast %union.real_extract* %u to %struct.realvaluetype*
  %24 = bitcast %struct.realvaluetype* %rv to i8*
  %25 = bitcast %struct.realvaluetype* %d to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %24, i8* %25, i64 24, i32 8, i1 false)
  br label %do.end

do.end:                                           ; preds = %do.body
  %26 = load i32, i32* %mode, align 4
  switch i32 %26, label %sw.default [
    i32 15, label %sw.bb.18
    i32 16, label %sw.bb.21
    i32 17, label %sw.bb.22
    i32 18, label %sw.bb.22
  ]

sw.bb.18:                                         ; preds = %do.end
  %call19 = call i64 @etarsingle(%struct.realvaluetype* byval align 8 %rv)
  %27 = load i64*, i64** %array, align 8
  %arrayidx20 = getelementptr inbounds i64, i64* %27, i64 0
  store i64 %call19, i64* %arrayidx20, align 8
  br label %sw.epilog

sw.bb.21:                                         ; preds = %do.end
  %28 = load i64*, i64** %array, align 8
  call void @etardouble(%struct.realvaluetype* byval align 8 %rv, i64* %28)
  br label %sw.epilog

sw.bb.22:                                         ; preds = %do.end, %do.end
  %29 = load i32, i32* @target_flags, align 4
  %and = and i32 %29, 16777216
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, i32 128, i32 96
  %cmp23 = icmp eq i32 %cond, 64
  br i1 %cmp23, label %cond.true, label %cond.false

cond.true:                                        ; preds = %sw.bb.22
  %30 = load i64*, i64** %array, align 8
  call void @etardouble(%struct.realvaluetype* byval align 8 %rv, i64* %30)
  br label %cond.end.40

cond.false:                                       ; preds = %sw.bb.22
  %31 = load i32, i32* @target_flags, align 4
  %and25 = and i32 %31, 16777216
  %tobool26 = icmp ne i32 %and25, 0
  %cond27 = select i1 %tobool26, i32 128, i32 96
  %cmp28 = icmp eq i32 %cond27, 96
  br i1 %cmp28, label %cond.true.30, label %cond.false.31

cond.true.30:                                     ; preds = %cond.false
  %32 = load i64*, i64** %array, align 8
  call void @etarldouble(%struct.realvaluetype* byval align 8 %rv, i64* %32)
  br label %cond.end.39

cond.false.31:                                    ; preds = %cond.false
  %33 = load i32, i32* @target_flags, align 4
  %and32 = and i32 %33, 16777216
  %tobool33 = icmp ne i32 %and32, 0
  %cond34 = select i1 %tobool33, i32 128, i32 96
  %cmp35 = icmp eq i32 %cond34, 128
  br i1 %cmp35, label %cond.true.37, label %cond.false.38

cond.true.37:                                     ; preds = %cond.false.31
  %34 = load i64*, i64** %array, align 8
  call void @etartdouble(%struct.realvaluetype* byval align 8 %rv, i64* %34)
  br label %cond.end

cond.false.38:                                    ; preds = %cond.false.31
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 8709, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @__FUNCTION__.add_const_value_attribute, i32 0, i32 0)) #8
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %35, %cond.true.37
  br label %cond.end.39

cond.end.39:                                      ; preds = %cond.end, %cond.true.30
  br label %cond.end.40

cond.end.40:                                      ; preds = %cond.end.39, %cond.true
  br label %sw.epilog

sw.default:                                       ; preds = %do.end
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 8713, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @__FUNCTION__.add_const_value_attribute, i32 0, i32 0)) #8
  unreachable

sw.epilog:                                        ; preds = %cond.end.40, %sw.bb.21, %sw.bb.18
  %36 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %37 = load i32, i32* %length, align 4
  %38 = load i64*, i64** %array, align 8
  call void @add_AT_float(%struct.die_struct* %36, i32 28, i32 %37, i64* %38)
  br label %if.end.48

if.else.41:                                       ; preds = %sw.bb.6
  %39 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %40 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  %fld42 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %40, i32 0, i32 1
  %arrayidx43 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld42, i32 0, i64 2
  %rtwint44 = bitcast %union.rtunion_def* %arrayidx43 to i64*
  %41 = load i64, i64* %rtwint44, align 8
  %42 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  %fld45 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %42, i32 0, i32 1
  %arrayidx46 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld45, i32 0, i64 1
  %rtwint47 = bitcast %union.rtunion_def* %arrayidx46 to i64*
  %43 = load i64, i64* %rtwint47, align 8
  call void @add_AT_long_long(%struct.die_struct* %39, i32 28, i64 %41, i64 %43)
  br label %if.end.48

if.end.48:                                        ; preds = %if.else.41, %sw.epilog
  br label %sw.epilog.66

sw.bb.49:                                         ; preds = %entry
  %44 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %45 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  %fld50 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %45, i32 0, i32 1
  %arrayidx51 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld50, i32 0, i64 0
  %rtstr = bitcast %union.rtunion_def* %arrayidx51 to i8**
  %46 = load i8*, i8** %rtstr, align 8
  call void @add_AT_string(%struct.die_struct* %44, i32 28, i8* %46)
  br label %sw.epilog.66

sw.bb.52:                                         ; preds = %entry, %entry, %entry
  %47 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %48 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  call void @add_AT_addr(%struct.die_struct* %47, i32 28, %struct.rtx_def* %48)
  br label %do.body.53

do.body.53:                                       ; preds = %sw.bb.52
  %49 = load %struct.varray_head_tag*, %struct.varray_head_tag** @used_rtx_varray, align 8
  %elements_used = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %49, i32 0, i32 1
  %50 = load i64, i64* %elements_used, align 8
  %51 = load %struct.varray_head_tag*, %struct.varray_head_tag** @used_rtx_varray, align 8
  %num_elements = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %51, i32 0, i32 0
  %52 = load i64, i64* %num_elements, align 8
  %cmp54 = icmp uge i64 %50, %52
  br i1 %cmp54, label %if.then.56, label %if.end.60

if.then.56:                                       ; preds = %do.body.53
  %53 = load %struct.varray_head_tag*, %struct.varray_head_tag** @used_rtx_varray, align 8
  %54 = load %struct.varray_head_tag*, %struct.varray_head_tag** @used_rtx_varray, align 8
  %num_elements57 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %54, i32 0, i32 0
  %55 = load i64, i64* %num_elements57, align 8
  %mul58 = mul i64 2, %55
  %call59 = call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %53, i64 %mul58)
  store %struct.varray_head_tag* %call59, %struct.varray_head_tag** @used_rtx_varray, align 8
  br label %if.end.60

if.end.60:                                        ; preds = %if.then.56, %do.body.53
  %56 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  %57 = load %struct.varray_head_tag*, %struct.varray_head_tag** @used_rtx_varray, align 8
  %elements_used61 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %57, i32 0, i32 1
  %58 = load i64, i64* %elements_used61, align 8
  %inc = add i64 %58, 1
  store i64 %inc, i64* %elements_used61, align 8
  %59 = load %struct.varray_head_tag*, %struct.varray_head_tag** @used_rtx_varray, align 8
  %data = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %59, i32 0, i32 4
  %rtx = bitcast %union.varray_data_tag* %data to [1 x %struct.rtx_def*]*
  %arrayidx62 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %rtx, i32 0, i64 %58
  store %struct.rtx_def* %56, %struct.rtx_def** %arrayidx62, align 8
  br label %do.end.63

do.end.63:                                        ; preds = %if.end.60
  br label %sw.epilog.66

sw.bb.64:                                         ; preds = %entry
  br label %sw.epilog.66

sw.default.65:                                    ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 8757, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @__FUNCTION__.add_const_value_attribute, i32 0, i32 0)) #8
  unreachable

sw.epilog.66:                                     ; preds = %sw.bb.64, %do.end.63, %sw.bb.49, %if.end.48, %if.end.5
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @add_AT_location_description(%struct.die_struct* %die, i32 %attr_kind, %struct.rtx_def* %rtl) #0 {
entry:
  %die.addr = alloca %struct.die_struct*, align 8
  %attr_kind.addr = alloca i32, align 4
  %rtl.addr = alloca %struct.rtx_def*, align 8
  %descr = alloca %struct.dw_loc_descr_struct*, align 8
  store %struct.die_struct* %die, %struct.die_struct** %die.addr, align 8
  store i32 %attr_kind, i32* %attr_kind.addr, align 4
  store %struct.rtx_def* %rtl, %struct.rtx_def** %rtl.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  %call = call %struct.dw_loc_descr_struct* @loc_descriptor(%struct.rtx_def* %0)
  store %struct.dw_loc_descr_struct* %call, %struct.dw_loc_descr_struct** %descr, align 8
  %1 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %descr, align 8
  %cmp = icmp ne %struct.dw_loc_descr_struct* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %3 = load i32, i32* %attr_kind.addr, align 4
  %4 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %descr, align 8
  call void @add_AT_loc(%struct.die_struct* %2, i32 %3, %struct.dw_loc_descr_struct* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare void @make_decl_rtl(%union.tree_node*, i8*) #1

declare %struct.rtx_def* @i386_simplify_dwarf_addr(%struct.rtx_def*) #1

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @is_pseudo_reg(%struct.rtx_def* %rtl) #3 {
entry:
  %rtl.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %rtl, %struct.rtx_def** %rtl.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 61
  br i1 %cmp, label %land.lhs.true, label %lor.rhs

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx to i32*
  %3 = load i32, i32* %rtuint, align 4
  %cmp1 = icmp uge i32 %3, 53
  br i1 %cmp1, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.lhs.true, %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  %5 = bitcast %struct.rtx_def* %4 to i32*
  %bf.load2 = load i32, i32* %5, align 8
  %bf.clear3 = and i32 %bf.load2, 65535
  %cmp4 = icmp eq i32 %bf.clear3, 63
  br i1 %cmp4, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %lor.rhs
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  %fld5 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1
  %arrayidx6 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld5, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx6 to %struct.rtx_def**
  %7 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %fld7 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1
  %arrayidx8 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld7, i32 0, i64 0
  %rtuint9 = bitcast %union.rtunion_def* %arrayidx8 to i32*
  %8 = load i32, i32* %rtuint9, align 4
  %cmp10 = icmp uge i32 %8, 53
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %9 = phi i1 [ false, %lor.rhs ], [ %cmp10, %land.rhs ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %land.lhs.true
  %10 = phi i1 [ true, %land.lhs.true ], [ %9, %land.end ]
  %lor.ext = zext i1 %10 to i32
  ret i32 %lor.ext
}

declare %struct.rtx_def* @plus_constant_wide(%struct.rtx_def*, i64) #1

declare %struct.rtx_def* @eliminate_regs(%struct.rtx_def*, i32, %struct.rtx_def*) #1

declare i32 @integer_zerop(%union.tree_node*) #1

declare i32 @compare_tree_int(%union.tree_node*, i64) #1

; Function Attrs: inlinehint nounwind uwtable
define internal void @add_AT_int(%struct.die_struct* %die, i32 %attr_kind, i64 %int_val) #3 {
entry:
  %die.addr = alloca %struct.die_struct*, align 8
  %attr_kind.addr = alloca i32, align 4
  %int_val.addr = alloca i64, align 8
  %attr = alloca %struct.dw_attr_struct*, align 8
  store %struct.die_struct* %die, %struct.die_struct** %die.addr, align 8
  store i32 %attr_kind, i32* %attr_kind.addr, align 4
  store i64 %int_val, i64* %int_val.addr, align 8
  %call = call noalias i8* @xmalloc(i64 40)
  %0 = bitcast i8* %call to %struct.dw_attr_struct*
  store %struct.dw_attr_struct* %0, %struct.dw_attr_struct** %attr, align 8
  %1 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %attr, align 8
  %dw_attr_next = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %1, i32 0, i32 1
  store %struct.dw_attr_struct* null, %struct.dw_attr_struct** %dw_attr_next, align 8
  %2 = load i32, i32* %attr_kind.addr, align 4
  %3 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %attr, align 8
  %dw_attr = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %3, i32 0, i32 0
  store i32 %2, i32* %dw_attr, align 4
  %4 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %attr, align 8
  %dw_attr_val = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %4, i32 0, i32 2
  %val_class = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_attr_val, i32 0, i32 0
  store i32 5, i32* %val_class, align 4
  %5 = load i64, i64* %int_val.addr, align 8
  %6 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %attr, align 8
  %dw_attr_val1 = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %6, i32 0, i32 2
  %v = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_attr_val1, i32 0, i32 1
  %val_int = bitcast %union.anon.3* %v to i64*
  store i64 %5, i64* %val_int, align 8
  %7 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %8 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %attr, align 8
  call void @add_dwarf_attr(%struct.die_struct* %7, %struct.dw_attr_struct* %8)
  ret void
}

declare i64 @etarsingle(%struct.realvaluetype* byval align 8) #1

declare void @etardouble(%struct.realvaluetype* byval align 8, i64*) #1

declare void @etarldouble(%struct.realvaluetype* byval align 8, i64*) #1

declare void @etartdouble(%struct.realvaluetype* byval align 8, i64*) #1

; Function Attrs: inlinehint nounwind uwtable
define internal void @add_AT_float(%struct.die_struct* %die, i32 %attr_kind, i32 %length, i64* %array) #3 {
entry:
  %die.addr = alloca %struct.die_struct*, align 8
  %attr_kind.addr = alloca i32, align 4
  %length.addr = alloca i32, align 4
  %array.addr = alloca i64*, align 8
  %attr = alloca %struct.dw_attr_struct*, align 8
  store %struct.die_struct* %die, %struct.die_struct** %die.addr, align 8
  store i32 %attr_kind, i32* %attr_kind.addr, align 4
  store i32 %length, i32* %length.addr, align 4
  store i64* %array, i64** %array.addr, align 8
  %call = call noalias i8* @xmalloc(i64 40)
  %0 = bitcast i8* %call to %struct.dw_attr_struct*
  store %struct.dw_attr_struct* %0, %struct.dw_attr_struct** %attr, align 8
  %1 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %attr, align 8
  %dw_attr_next = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %1, i32 0, i32 1
  store %struct.dw_attr_struct* null, %struct.dw_attr_struct** %dw_attr_next, align 8
  %2 = load i32, i32* %attr_kind.addr, align 4
  %3 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %attr, align 8
  %dw_attr = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %3, i32 0, i32 0
  store i32 %2, i32* %dw_attr, align 4
  %4 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %attr, align 8
  %dw_attr_val = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %4, i32 0, i32 2
  %val_class = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_attr_val, i32 0, i32 0
  store i32 8, i32* %val_class, align 4
  %5 = load i32, i32* %length.addr, align 4
  %6 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %attr, align 8
  %dw_attr_val1 = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %6, i32 0, i32 2
  %v = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_attr_val1, i32 0, i32 1
  %val_float = bitcast %union.anon.3* %v to %struct.dw_fp_struct*
  %length2 = getelementptr inbounds %struct.dw_fp_struct, %struct.dw_fp_struct* %val_float, i32 0, i32 1
  store i32 %5, i32* %length2, align 4
  %7 = load i64*, i64** %array.addr, align 8
  %8 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %attr, align 8
  %dw_attr_val3 = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %8, i32 0, i32 2
  %v4 = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_attr_val3, i32 0, i32 1
  %val_float5 = bitcast %union.anon.3* %v4 to %struct.dw_fp_struct*
  %array6 = getelementptr inbounds %struct.dw_fp_struct, %struct.dw_fp_struct* %val_float5, i32 0, i32 0
  store i64* %7, i64** %array6, align 8
  %9 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %10 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %attr, align 8
  call void @add_dwarf_attr(%struct.die_struct* %9, %struct.dw_attr_struct* %10)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @add_AT_long_long(%struct.die_struct* %die, i32 %attr_kind, i64 %val_hi, i64 %val_low) #3 {
entry:
  %die.addr = alloca %struct.die_struct*, align 8
  %attr_kind.addr = alloca i32, align 4
  %val_hi.addr = alloca i64, align 8
  %val_low.addr = alloca i64, align 8
  %attr = alloca %struct.dw_attr_struct*, align 8
  store %struct.die_struct* %die, %struct.die_struct** %die.addr, align 8
  store i32 %attr_kind, i32* %attr_kind.addr, align 4
  store i64 %val_hi, i64* %val_hi.addr, align 8
  store i64 %val_low, i64* %val_low.addr, align 8
  %call = call noalias i8* @xmalloc(i64 40)
  %0 = bitcast i8* %call to %struct.dw_attr_struct*
  store %struct.dw_attr_struct* %0, %struct.dw_attr_struct** %attr, align 8
  %1 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %attr, align 8
  %dw_attr_next = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %1, i32 0, i32 1
  store %struct.dw_attr_struct* null, %struct.dw_attr_struct** %dw_attr_next, align 8
  %2 = load i32, i32* %attr_kind.addr, align 4
  %3 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %attr, align 8
  %dw_attr = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %3, i32 0, i32 0
  store i32 %2, i32* %dw_attr, align 4
  %4 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %attr, align 8
  %dw_attr_val = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %4, i32 0, i32 2
  %val_class = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_attr_val, i32 0, i32 0
  store i32 7, i32* %val_class, align 4
  %5 = load i64, i64* %val_hi.addr, align 8
  %6 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %attr, align 8
  %dw_attr_val1 = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %6, i32 0, i32 2
  %v = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_attr_val1, i32 0, i32 1
  %val_long_long = bitcast %union.anon.3* %v to %struct.dw_long_long_struct*
  %hi = getelementptr inbounds %struct.dw_long_long_struct, %struct.dw_long_long_struct* %val_long_long, i32 0, i32 0
  store i64 %5, i64* %hi, align 8
  %7 = load i64, i64* %val_low.addr, align 8
  %8 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %attr, align 8
  %dw_attr_val2 = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %8, i32 0, i32 2
  %v3 = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_attr_val2, i32 0, i32 1
  %val_long_long4 = bitcast %union.anon.3* %v3 to %struct.dw_long_long_struct*
  %low = getelementptr inbounds %struct.dw_long_long_struct, %struct.dw_long_long_struct* %val_long_long4, i32 0, i32 1
  store i64 %7, i64* %low, align 8
  %9 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %10 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %attr, align 8
  call void @add_dwarf_attr(%struct.die_struct* %9, %struct.dw_attr_struct* %10)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @add_AT_addr(%struct.die_struct* %die, i32 %attr_kind, %struct.rtx_def* %addr) #3 {
entry:
  %die.addr = alloca %struct.die_struct*, align 8
  %attr_kind.addr = alloca i32, align 4
  %addr.addr = alloca %struct.rtx_def*, align 8
  %attr = alloca %struct.dw_attr_struct*, align 8
  store %struct.die_struct* %die, %struct.die_struct** %die.addr, align 8
  store i32 %attr_kind, i32* %attr_kind.addr, align 4
  store %struct.rtx_def* %addr, %struct.rtx_def** %addr.addr, align 8
  %call = call noalias i8* @xmalloc(i64 40)
  %0 = bitcast i8* %call to %struct.dw_attr_struct*
  store %struct.dw_attr_struct* %0, %struct.dw_attr_struct** %attr, align 8
  %1 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %attr, align 8
  %dw_attr_next = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %1, i32 0, i32 1
  store %struct.dw_attr_struct* null, %struct.dw_attr_struct** %dw_attr_next, align 8
  %2 = load i32, i32* %attr_kind.addr, align 4
  %3 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %attr, align 8
  %dw_attr = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %3, i32 0, i32 0
  store i32 %2, i32* %dw_attr, align 4
  %4 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %attr, align 8
  %dw_attr_val = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %4, i32 0, i32 2
  %val_class = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_attr_val, i32 0, i32 0
  store i32 0, i32* %val_class, align 4
  %5 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8
  %6 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %attr, align 8
  %dw_attr_val1 = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %6, i32 0, i32 2
  %v = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_attr_val1, i32 0, i32 1
  %val_addr = bitcast %union.anon.3* %v to %struct.rtx_def**
  store %struct.rtx_def* %5, %struct.rtx_def** %val_addr, align 8
  %7 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %8 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %attr, align 8
  call void @add_dwarf_attr(%struct.die_struct* %7, %struct.dw_attr_struct* %8)
  ret void
}

declare %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag*, i64) #1

; Function Attrs: nounwind uwtable
define internal %struct.dw_loc_descr_struct* @loc_descriptor(%struct.rtx_def* %rtl) #0 {
entry:
  %rtl.addr = alloca %struct.rtx_def*, align 8
  %loc_result = alloca %struct.dw_loc_descr_struct*, align 8
  store %struct.rtx_def* %rtl, %struct.rtx_def** %rtl.addr, align 8
  store %struct.dw_loc_descr_struct* null, %struct.dw_loc_descr_struct** %loc_result, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %sw.default [
    i32 63, label %sw.bb
    i32 61, label %sw.bb.1
    i32 66, label %sw.bb.2
    i32 65, label %sw.bb.9
  ]

sw.bb:                                            ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %3 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %rtl.addr, align 8
  br label %sw.bb.1

sw.bb.1:                                          ; preds = %entry, %sw.bb
  %4 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  %call = call %struct.dw_loc_descr_struct* @reg_loc_descriptor(%struct.rtx_def* %4)
  store %struct.dw_loc_descr_struct* %call, %struct.dw_loc_descr_struct** %loc_result, align 8
  br label %sw.epilog

sw.bb.2:                                          ; preds = %entry
  %5 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  %fld3 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1
  %arrayidx4 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3, i32 0, i64 0
  %rtx5 = bitcast %union.rtunion_def* %arrayidx4 to %struct.rtx_def**
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rtx5, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  %8 = bitcast %struct.rtx_def* %7 to i32*
  %bf.load6 = load i32, i32* %8, align 8
  %bf.lshr = lshr i32 %bf.load6, 16
  %bf.clear7 = and i32 %bf.lshr, 255
  %call8 = call %struct.dw_loc_descr_struct* @mem_loc_descriptor(%struct.rtx_def* %6, i32 %bf.clear7)
  store %struct.dw_loc_descr_struct* %call8, %struct.dw_loc_descr_struct** %loc_result, align 8
  br label %sw.epilog

sw.bb.9:                                          ; preds = %entry
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  %fld10 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1
  %arrayidx11 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld10, i32 0, i64 0
  %rtx12 = bitcast %union.rtunion_def* %arrayidx11 to %struct.rtx_def**
  %10 = load %struct.rtx_def*, %struct.rtx_def** %rtx12, align 8
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  %fld13 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1
  %arrayidx14 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld13, i32 0, i64 1
  %rtx15 = bitcast %union.rtunion_def* %arrayidx14 to %struct.rtx_def**
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rtx15, align 8
  %call16 = call %struct.dw_loc_descr_struct* @concat_loc_descriptor(%struct.rtx_def* %10, %struct.rtx_def* %12)
  store %struct.dw_loc_descr_struct* %call16, %struct.dw_loc_descr_struct** %loc_result, align 8
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 7976, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @__FUNCTION__.loc_descriptor, i32 0, i32 0)) #8
  unreachable

sw.epilog:                                        ; preds = %sw.bb.9, %sw.bb.2, %sw.bb.1
  %13 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %loc_result, align 8
  ret %struct.dw_loc_descr_struct* %13
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @add_AT_loc(%struct.die_struct* %die, i32 %attr_kind, %struct.dw_loc_descr_struct* %loc) #3 {
entry:
  %die.addr = alloca %struct.die_struct*, align 8
  %attr_kind.addr = alloca i32, align 4
  %loc.addr = alloca %struct.dw_loc_descr_struct*, align 8
  %attr = alloca %struct.dw_attr_struct*, align 8
  store %struct.die_struct* %die, %struct.die_struct** %die.addr, align 8
  store i32 %attr_kind, i32* %attr_kind.addr, align 4
  store %struct.dw_loc_descr_struct* %loc, %struct.dw_loc_descr_struct** %loc.addr, align 8
  %call = call noalias i8* @xmalloc(i64 40)
  %0 = bitcast i8* %call to %struct.dw_attr_struct*
  store %struct.dw_attr_struct* %0, %struct.dw_attr_struct** %attr, align 8
  %1 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %attr, align 8
  %dw_attr_next = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %1, i32 0, i32 1
  store %struct.dw_attr_struct* null, %struct.dw_attr_struct** %dw_attr_next, align 8
  %2 = load i32, i32* %attr_kind.addr, align 4
  %3 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %attr, align 8
  %dw_attr = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %3, i32 0, i32 0
  store i32 %2, i32* %dw_attr, align 4
  %4 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %attr, align 8
  %dw_attr_val = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %4, i32 0, i32 2
  %val_class = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_attr_val, i32 0, i32 0
  store i32 2, i32* %val_class, align 4
  %5 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %loc.addr, align 8
  %6 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %attr, align 8
  %dw_attr_val1 = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %6, i32 0, i32 2
  %v = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_attr_val1, i32 0, i32 1
  %val_loc = bitcast %union.anon.3* %v to %struct.dw_loc_descr_struct**
  store %struct.dw_loc_descr_struct* %5, %struct.dw_loc_descr_struct** %val_loc, align 8
  %7 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %8 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %attr, align 8
  call void @add_dwarf_attr(%struct.die_struct* %7, %struct.dw_attr_struct* %8)
  ret void
}

; Function Attrs: nounwind uwtable
define internal %struct.dw_loc_descr_struct* @reg_loc_descriptor(%struct.rtx_def* %rtl) #0 {
entry:
  %retval = alloca %struct.dw_loc_descr_struct*, align 8
  %rtl.addr = alloca %struct.rtx_def*, align 8
  %loc_result = alloca %struct.dw_loc_descr_struct*, align 8
  %reg = alloca i32, align 4
  store %struct.rtx_def* %rtl, %struct.rtx_def** %rtl.addr, align 8
  store %struct.dw_loc_descr_struct* null, %struct.dw_loc_descr_struct** %loc_result, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx to i32*
  %1 = load i32, i32* %rtuint, align 4
  %cmp = icmp uge i32 %1, 53
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.dw_loc_descr_struct* null, %struct.dw_loc_descr_struct** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  %call = call i32 @reg_number(%struct.rtx_def* %2)
  store i32 %call, i32* %reg, align 4
  %3 = load i32, i32* %reg, align 4
  %cmp1 = icmp ule i32 %3, 31
  br i1 %cmp1, label %if.then.2, label %if.else

if.then.2:                                        ; preds = %if.end
  %4 = load i32, i32* %reg, align 4
  %add = add i32 80, %4
  %call3 = call %struct.dw_loc_descr_struct* @new_loc_descr(i32 %add, i64 0, i64 0)
  store %struct.dw_loc_descr_struct* %call3, %struct.dw_loc_descr_struct** %loc_result, align 8
  br label %if.end.5

if.else:                                          ; preds = %if.end
  %5 = load i32, i32* %reg, align 4
  %conv = zext i32 %5 to i64
  %call4 = call %struct.dw_loc_descr_struct* @new_loc_descr(i32 144, i64 %conv, i64 0)
  store %struct.dw_loc_descr_struct* %call4, %struct.dw_loc_descr_struct** %loc_result, align 8
  br label %if.end.5

if.end.5:                                         ; preds = %if.else, %if.then.2
  %6 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %loc_result, align 8
  store %struct.dw_loc_descr_struct* %6, %struct.dw_loc_descr_struct** %retval
  br label %return

return:                                           ; preds = %if.end.5, %if.then
  %7 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %retval
  ret %struct.dw_loc_descr_struct* %7
}

; Function Attrs: nounwind uwtable
define internal %struct.dw_loc_descr_struct* @mem_loc_descriptor(%struct.rtx_def* %rtl, i32 %mode) #0 {
entry:
  %retval = alloca %struct.dw_loc_descr_struct*, align 8
  %rtl.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %mem_loc_result = alloca %struct.dw_loc_descr_struct*, align 8
  %marked = alloca i8, align 1
  %tmp = alloca %struct.rtx_def*, align 8
  %op0 = alloca %struct.dw_loc_descr_struct*, align 8
  %op1 = alloca %struct.dw_loc_descr_struct*, align 8
  store %struct.rtx_def* %rtl, %struct.rtx_def** %rtl.addr, align 8
  store i32 %mode, i32* %mode.addr, align 4
  store %struct.dw_loc_descr_struct* null, %struct.dw_loc_descr_struct** %mem_loc_result, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  %call = call %struct.rtx_def* @i386_simplify_dwarf_addr(%struct.rtx_def* %0)
  store %struct.rtx_def* %call, %struct.rtx_def** %rtl.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load = load i32, i32* %2, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %sw.default [
    i32 99, label %sw.bb
    i32 98, label %sw.bb
    i32 101, label %sw.bb
    i32 63, label %sw.bb
    i32 61, label %sw.bb.1
    i32 66, label %sw.bb.6
    i32 67, label %sw.bb.17
    i32 58, label %sw.bb.17
    i32 68, label %sw.bb.17
    i32 100, label %sw.bb.52
    i32 97, label %sw.bb.56
    i32 96, label %sw.bb.56
    i32 75, label %sw.bb.70
    i32 78, label %sw.bb.125
    i32 54, label %sw.bb.143
    i32 70, label %sw.bb.148
  ]

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %4 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %rtl.addr, align 8
  br label %sw.bb.1

sw.bb.1:                                          ; preds = %entry, %sw.bb
  %5 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  %fld2 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx3 to i32*
  %6 = load i32, i32* %rtuint, align 4
  %cmp = icmp ult i32 %6, 53
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %sw.bb.1
  %7 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  %call4 = call i32 @reg_number(%struct.rtx_def* %7)
  %call5 = call %struct.dw_loc_descr_struct* @based_loc_descr(i32 %call4, i64 0)
  store %struct.dw_loc_descr_struct* %call5, %struct.dw_loc_descr_struct** %mem_loc_result, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %sw.bb.1
  br label %sw.epilog

sw.bb.6:                                          ; preds = %entry
  %8 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  %fld7 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1
  %arrayidx8 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld7, i32 0, i64 0
  %rtx9 = bitcast %union.rtunion_def* %arrayidx8 to %struct.rtx_def**
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rtx9, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  %11 = bitcast %struct.rtx_def* %10 to i32*
  %bf.load10 = load i32, i32* %11, align 8
  %bf.lshr = lshr i32 %bf.load10, 16
  %bf.clear11 = and i32 %bf.lshr, 255
  %call12 = call %struct.dw_loc_descr_struct* @mem_loc_descriptor(%struct.rtx_def* %9, i32 %bf.clear11)
  store %struct.dw_loc_descr_struct* %call12, %struct.dw_loc_descr_struct** %mem_loc_result, align 8
  %12 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %mem_loc_result, align 8
  %cmp13 = icmp ne %struct.dw_loc_descr_struct* %12, null
  br i1 %cmp13, label %if.then.14, label %if.end.16

if.then.14:                                       ; preds = %sw.bb.6
  %call15 = call %struct.dw_loc_descr_struct* @new_loc_descr(i32 6, i64 0, i64 0)
  call void @add_loc_descr(%struct.dw_loc_descr_struct** %mem_loc_result, %struct.dw_loc_descr_struct* %call15)
  br label %if.end.16

if.end.16:                                        ; preds = %if.then.14, %sw.bb.6
  br label %sw.epilog

sw.bb.17:                                         ; preds = %entry, %entry, %entry
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  %14 = bitcast %struct.rtx_def* %13 to i32*
  %bf.load18 = load i32, i32* %14, align 8
  %bf.clear19 = and i32 %bf.load18, 65535
  %cmp20 = icmp eq i32 %bf.clear19, 68
  br i1 %cmp20, label %land.lhs.true, label %if.end.41

land.lhs.true:                                    ; preds = %sw.bb.17
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  %16 = bitcast %struct.rtx_def* %15 to i32*
  %bf.load21 = load i32, i32* %16, align 8
  %bf.lshr22 = lshr i32 %bf.load21, 26
  %bf.clear23 = and i32 %bf.lshr22, 1
  %tobool = icmp ne i32 %bf.clear23, 0
  br i1 %tobool, label %if.then.24, label %if.end.41

if.then.24:                                       ; preds = %land.lhs.true
  %17 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  %call25 = call %struct.rtx_def* @get_pool_constant_mark(%struct.rtx_def* %17, i8* %marked)
  store %struct.rtx_def* %call25, %struct.rtx_def** %tmp, align 8
  %18 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %19 = bitcast %struct.rtx_def* %18 to i32*
  %bf.load26 = load i32, i32* %19, align 8
  %bf.clear27 = and i32 %bf.load26, 65535
  %cmp28 = icmp eq i32 %bf.clear27, 68
  br i1 %cmp28, label %if.then.29, label %if.end.37

if.then.29:                                       ; preds = %if.then.24
  %20 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  store %struct.rtx_def* %20, %struct.rtx_def** %rtl.addr, align 8
  %21 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %22 = bitcast %struct.rtx_def* %21 to i32*
  %bf.load30 = load i32, i32* %22, align 8
  %bf.lshr31 = lshr i32 %bf.load30, 26
  %bf.clear32 = and i32 %bf.lshr31, 1
  %tobool33 = icmp ne i32 %bf.clear32, 0
  br i1 %tobool33, label %if.then.34, label %if.else

if.then.34:                                       ; preds = %if.then.29
  %23 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %call35 = call %struct.rtx_def* @get_pool_constant_mark(%struct.rtx_def* %23, i8* %marked)
  br label %if.end.36

if.else:                                          ; preds = %if.then.29
  store i8 1, i8* %marked, align 1
  br label %if.end.36

if.end.36:                                        ; preds = %if.else, %if.then.34
  br label %if.end.37

if.end.37:                                        ; preds = %if.end.36, %if.then.24
  %24 = load i8, i8* %marked, align 1
  %tobool38 = trunc i8 %24 to i1
  br i1 %tobool38, label %if.end.40, label %if.then.39

if.then.39:                                       ; preds = %if.end.37
  store %struct.dw_loc_descr_struct* null, %struct.dw_loc_descr_struct** %retval
  br label %return

if.end.40:                                        ; preds = %if.end.37
  br label %if.end.41

if.end.41:                                        ; preds = %if.end.40, %land.lhs.true, %sw.bb.17
  %call42 = call %struct.dw_loc_descr_struct* @new_loc_descr(i32 3, i64 0, i64 0)
  store %struct.dw_loc_descr_struct* %call42, %struct.dw_loc_descr_struct** %mem_loc_result, align 8
  %25 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %mem_loc_result, align 8
  %dw_loc_oprnd1 = getelementptr inbounds %struct.dw_loc_descr_struct, %struct.dw_loc_descr_struct* %25, i32 0, i32 2
  %val_class = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_loc_oprnd1, i32 0, i32 0
  store i32 0, i32* %val_class, align 4
  %26 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  %27 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %mem_loc_result, align 8
  %dw_loc_oprnd143 = getelementptr inbounds %struct.dw_loc_descr_struct, %struct.dw_loc_descr_struct* %27, i32 0, i32 2
  %v = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_loc_oprnd143, i32 0, i32 1
  %val_addr = bitcast %union.anon.3* %v to %struct.rtx_def**
  store %struct.rtx_def* %26, %struct.rtx_def** %val_addr, align 8
  br label %do.body

do.body:                                          ; preds = %if.end.41
  %28 = load %struct.varray_head_tag*, %struct.varray_head_tag** @used_rtx_varray, align 8
  %elements_used = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %28, i32 0, i32 1
  %29 = load i64, i64* %elements_used, align 8
  %30 = load %struct.varray_head_tag*, %struct.varray_head_tag** @used_rtx_varray, align 8
  %num_elements = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %30, i32 0, i32 0
  %31 = load i64, i64* %num_elements, align 8
  %cmp44 = icmp uge i64 %29, %31
  br i1 %cmp44, label %if.then.45, label %if.end.48

if.then.45:                                       ; preds = %do.body
  %32 = load %struct.varray_head_tag*, %struct.varray_head_tag** @used_rtx_varray, align 8
  %33 = load %struct.varray_head_tag*, %struct.varray_head_tag** @used_rtx_varray, align 8
  %num_elements46 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %33, i32 0, i32 0
  %34 = load i64, i64* %num_elements46, align 8
  %mul = mul i64 2, %34
  %call47 = call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %32, i64 %mul)
  store %struct.varray_head_tag* %call47, %struct.varray_head_tag** @used_rtx_varray, align 8
  br label %if.end.48

if.end.48:                                        ; preds = %if.then.45, %do.body
  %35 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  %36 = load %struct.varray_head_tag*, %struct.varray_head_tag** @used_rtx_varray, align 8
  %elements_used49 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %36, i32 0, i32 1
  %37 = load i64, i64* %elements_used49, align 8
  %inc = add i64 %37, 1
  store i64 %inc, i64* %elements_used49, align 8
  %38 = load %struct.varray_head_tag*, %struct.varray_head_tag** @used_rtx_varray, align 8
  %data = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %38, i32 0, i32 4
  %rtx50 = bitcast %union.varray_data_tag* %data to [1 x %struct.rtx_def*]*
  %arrayidx51 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %rtx50, i32 0, i64 %37
  store %struct.rtx_def* %35, %struct.rtx_def** %arrayidx51, align 8
  br label %do.end

do.end:                                           ; preds = %if.end.48
  br label %sw.epilog

sw.bb.52:                                         ; preds = %entry
  %39 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  %fld53 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1
  %arrayidx54 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld53, i32 0, i64 1
  %rtx55 = bitcast %union.rtunion_def* %arrayidx54 to %struct.rtx_def**
  %40 = load %struct.rtx_def*, %struct.rtx_def** %rtx55, align 8
  store %struct.rtx_def* %40, %struct.rtx_def** %rtl.addr, align 8
  br label %plus

sw.bb.56:                                         ; preds = %entry, %entry
  %41 = load i32, i32* @word_mode, align 4
  %42 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  %fld57 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %42, i32 0, i32 1
  %arrayidx58 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld57, i32 0, i64 0
  %rtx59 = bitcast %union.rtunion_def* %arrayidx58 to %struct.rtx_def**
  %43 = load %struct.rtx_def*, %struct.rtx_def** %rtx59, align 8
  %44 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  %45 = bitcast %struct.rtx_def* %44 to i32*
  %bf.load60 = load i32, i32* %45, align 8
  %bf.clear61 = and i32 %bf.load60, 65535
  %cmp62 = icmp eq i32 %bf.clear61, 97
  br i1 %cmp62, label %cond.true, label %cond.false

cond.true:                                        ; preds = %sw.bb.56
  %46 = load i32, i32* %mode.addr, align 4
  %idxprom = sext i32 %46 to i64
  %arrayidx63 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_unit_size, i32 0, i64 %idxprom
  %47 = load i8, i8* %arrayidx63, align 1
  %conv = zext i8 %47 to i32
  br label %cond.end

cond.false:                                       ; preds = %sw.bb.56
  %48 = load i32, i32* %mode.addr, align 4
  %idxprom64 = sext i32 %48 to i64
  %arrayidx65 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_unit_size, i32 0, i64 %idxprom64
  %49 = load i8, i8* %arrayidx65, align 1
  %conv66 = zext i8 %49 to i32
  %sub = sub nsw i32 0, %conv66
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv, %cond.true ], [ %sub, %cond.false ]
  %conv67 = sext i32 %cond to i64
  %call68 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv67)
  %call69 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %41, %struct.rtx_def* %43, %struct.rtx_def* %call68)
  store %struct.rtx_def* %call69, %struct.rtx_def** %rtl.addr, align 8
  br label %sw.bb.70

sw.bb.70:                                         ; preds = %entry, %cond.end
  br label %plus

plus:                                             ; preds = %sw.bb.70, %sw.bb.52
  %50 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  %call71 = call i32 @is_based_loc(%struct.rtx_def* %50)
  %tobool72 = icmp ne i32 %call71, 0
  br i1 %tobool72, label %if.then.73, label %if.else.84

if.then.73:                                       ; preds = %plus
  %51 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  %fld74 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %51, i32 0, i32 1
  %arrayidx75 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld74, i32 0, i64 0
  %rtx76 = bitcast %union.rtunion_def* %arrayidx75 to %struct.rtx_def**
  %52 = load %struct.rtx_def*, %struct.rtx_def** %rtx76, align 8
  %call77 = call i32 @reg_number(%struct.rtx_def* %52)
  %53 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  %fld78 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %53, i32 0, i32 1
  %arrayidx79 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld78, i32 0, i64 1
  %rtx80 = bitcast %union.rtunion_def* %arrayidx79 to %struct.rtx_def**
  %54 = load %struct.rtx_def*, %struct.rtx_def** %rtx80, align 8
  %fld81 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %54, i32 0, i32 1
  %arrayidx82 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld81, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx82 to i64*
  %55 = load i64, i64* %rtwint, align 8
  %call83 = call %struct.dw_loc_descr_struct* @based_loc_descr(i32 %call77, i64 %55)
  store %struct.dw_loc_descr_struct* %call83, %struct.dw_loc_descr_struct** %mem_loc_result, align 8
  br label %if.end.124

if.else.84:                                       ; preds = %plus
  %56 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  %fld85 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %56, i32 0, i32 1
  %arrayidx86 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld85, i32 0, i64 0
  %rtx87 = bitcast %union.rtunion_def* %arrayidx86 to %struct.rtx_def**
  %57 = load %struct.rtx_def*, %struct.rtx_def** %rtx87, align 8
  %58 = load i32, i32* %mode.addr, align 4
  %call88 = call %struct.dw_loc_descr_struct* @mem_loc_descriptor(%struct.rtx_def* %57, i32 %58)
  store %struct.dw_loc_descr_struct* %call88, %struct.dw_loc_descr_struct** %mem_loc_result, align 8
  %59 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %mem_loc_result, align 8
  %cmp89 = icmp eq %struct.dw_loc_descr_struct* %59, null
  br i1 %cmp89, label %if.then.91, label %if.end.92

if.then.91:                                       ; preds = %if.else.84
  br label %sw.epilog

if.end.92:                                        ; preds = %if.else.84
  %60 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  %fld93 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %60, i32 0, i32 1
  %arrayidx94 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld93, i32 0, i64 1
  %rtx95 = bitcast %union.rtunion_def* %arrayidx94 to %struct.rtx_def**
  %61 = load %struct.rtx_def*, %struct.rtx_def** %rtx95, align 8
  %62 = bitcast %struct.rtx_def* %61 to i32*
  %bf.load96 = load i32, i32* %62, align 8
  %bf.clear97 = and i32 %bf.load96, 65535
  %cmp98 = icmp eq i32 %bf.clear97, 54
  br i1 %cmp98, label %land.lhs.true.100, label %if.else.117

land.lhs.true.100:                                ; preds = %if.end.92
  %63 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  %fld101 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %63, i32 0, i32 1
  %arrayidx102 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld101, i32 0, i64 1
  %rtx103 = bitcast %union.rtunion_def* %arrayidx102 to %struct.rtx_def**
  %64 = load %struct.rtx_def*, %struct.rtx_def** %rtx103, align 8
  %fld104 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %64, i32 0, i32 1
  %arrayidx105 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld104, i32 0, i64 0
  %rtwint106 = bitcast %union.rtunion_def* %arrayidx105 to i64*
  %65 = load i64, i64* %rtwint106, align 8
  %cmp107 = icmp sge i64 %65, 0
  br i1 %cmp107, label %if.then.109, label %if.else.117

if.then.109:                                      ; preds = %land.lhs.true.100
  %66 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  %fld110 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %66, i32 0, i32 1
  %arrayidx111 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld110, i32 0, i64 1
  %rtx112 = bitcast %union.rtunion_def* %arrayidx111 to %struct.rtx_def**
  %67 = load %struct.rtx_def*, %struct.rtx_def** %rtx112, align 8
  %fld113 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %67, i32 0, i32 1
  %arrayidx114 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld113, i32 0, i64 0
  %rtwint115 = bitcast %union.rtunion_def* %arrayidx114 to i64*
  %68 = load i64, i64* %rtwint115, align 8
  %call116 = call %struct.dw_loc_descr_struct* @new_loc_descr(i32 35, i64 %68, i64 0)
  call void @add_loc_descr(%struct.dw_loc_descr_struct** %mem_loc_result, %struct.dw_loc_descr_struct* %call116)
  br label %if.end.123

if.else.117:                                      ; preds = %land.lhs.true.100, %if.end.92
  %69 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  %fld118 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %69, i32 0, i32 1
  %arrayidx119 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld118, i32 0, i64 1
  %rtx120 = bitcast %union.rtunion_def* %arrayidx119 to %struct.rtx_def**
  %70 = load %struct.rtx_def*, %struct.rtx_def** %rtx120, align 8
  %71 = load i32, i32* %mode.addr, align 4
  %call121 = call %struct.dw_loc_descr_struct* @mem_loc_descriptor(%struct.rtx_def* %70, i32 %71)
  call void @add_loc_descr(%struct.dw_loc_descr_struct** %mem_loc_result, %struct.dw_loc_descr_struct* %call121)
  %call122 = call %struct.dw_loc_descr_struct* @new_loc_descr(i32 34, i64 0, i64 0)
  call void @add_loc_descr(%struct.dw_loc_descr_struct** %mem_loc_result, %struct.dw_loc_descr_struct* %call122)
  br label %if.end.123

if.end.123:                                       ; preds = %if.else.117, %if.then.109
  br label %if.end.124

if.end.124:                                       ; preds = %if.end.123, %if.then.73
  br label %sw.epilog

sw.bb.125:                                        ; preds = %entry
  %72 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  %fld127 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %72, i32 0, i32 1
  %arrayidx128 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld127, i32 0, i64 0
  %rtx129 = bitcast %union.rtunion_def* %arrayidx128 to %struct.rtx_def**
  %73 = load %struct.rtx_def*, %struct.rtx_def** %rtx129, align 8
  %74 = load i32, i32* %mode.addr, align 4
  %call130 = call %struct.dw_loc_descr_struct* @mem_loc_descriptor(%struct.rtx_def* %73, i32 %74)
  store %struct.dw_loc_descr_struct* %call130, %struct.dw_loc_descr_struct** %op0, align 8
  %75 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  %fld132 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %75, i32 0, i32 1
  %arrayidx133 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld132, i32 0, i64 1
  %rtx134 = bitcast %union.rtunion_def* %arrayidx133 to %struct.rtx_def**
  %76 = load %struct.rtx_def*, %struct.rtx_def** %rtx134, align 8
  %77 = load i32, i32* %mode.addr, align 4
  %call135 = call %struct.dw_loc_descr_struct* @mem_loc_descriptor(%struct.rtx_def* %76, i32 %77)
  store %struct.dw_loc_descr_struct* %call135, %struct.dw_loc_descr_struct** %op1, align 8
  %78 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %op0, align 8
  %cmp136 = icmp eq %struct.dw_loc_descr_struct* %78, null
  br i1 %cmp136, label %if.then.140, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %sw.bb.125
  %79 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %op1, align 8
  %cmp138 = icmp eq %struct.dw_loc_descr_struct* %79, null
  br i1 %cmp138, label %if.then.140, label %if.end.141

if.then.140:                                      ; preds = %lor.lhs.false, %sw.bb.125
  br label %sw.epilog

if.end.141:                                       ; preds = %lor.lhs.false
  %80 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %op0, align 8
  store %struct.dw_loc_descr_struct* %80, %struct.dw_loc_descr_struct** %mem_loc_result, align 8
  %81 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %op1, align 8
  call void @add_loc_descr(%struct.dw_loc_descr_struct** %mem_loc_result, %struct.dw_loc_descr_struct* %81)
  %call142 = call %struct.dw_loc_descr_struct* @new_loc_descr(i32 30, i64 0, i64 0)
  call void @add_loc_descr(%struct.dw_loc_descr_struct** %mem_loc_result, %struct.dw_loc_descr_struct* %call142)
  br label %sw.epilog

sw.bb.143:                                        ; preds = %entry
  %82 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  %fld144 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %82, i32 0, i32 1
  %arrayidx145 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld144, i32 0, i64 0
  %rtwint146 = bitcast %union.rtunion_def* %arrayidx145 to i64*
  %83 = load i64, i64* %rtwint146, align 8
  %call147 = call %struct.dw_loc_descr_struct* @int_loc_descriptor(i64 %83)
  store %struct.dw_loc_descr_struct* %call147, %struct.dw_loc_descr_struct** %mem_loc_result, align 8
  br label %sw.epilog

sw.bb.148:                                        ; preds = %entry
  %84 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  %fld149 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %84, i32 0, i32 1
  %arrayidx150 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld149, i32 0, i64 0
  %rtx151 = bitcast %union.rtunion_def* %arrayidx150 to %struct.rtx_def**
  %85 = load %struct.rtx_def*, %struct.rtx_def** %rtx151, align 8
  %86 = bitcast %struct.rtx_def* %85 to i32*
  %bf.load152 = load i32, i32* %86, align 8
  %bf.clear153 = and i32 %bf.load152, 65535
  %cmp154 = icmp eq i32 %bf.clear153, 66
  br i1 %cmp154, label %if.then.156, label %if.else.164

if.then.156:                                      ; preds = %sw.bb.148
  %87 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  %fld157 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %87, i32 0, i32 1
  %arrayidx158 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld157, i32 0, i64 0
  %rtx159 = bitcast %union.rtunion_def* %arrayidx158 to %struct.rtx_def**
  %88 = load %struct.rtx_def*, %struct.rtx_def** %rtx159, align 8
  %fld160 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %88, i32 0, i32 1
  %arrayidx161 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld160, i32 0, i64 0
  %rtx162 = bitcast %union.rtunion_def* %arrayidx161 to %struct.rtx_def**
  %89 = load %struct.rtx_def*, %struct.rtx_def** %rtx162, align 8
  %90 = load i32, i32* %mode.addr, align 4
  %call163 = call %struct.dw_loc_descr_struct* @mem_loc_descriptor(%struct.rtx_def* %89, i32 %90)
  store %struct.dw_loc_descr_struct* %call163, %struct.dw_loc_descr_struct** %retval
  br label %return

if.else.164:                                      ; preds = %sw.bb.148
  store %struct.dw_loc_descr_struct* null, %struct.dw_loc_descr_struct** %retval
  br label %return

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 7904, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__FUNCTION__.mem_loc_descriptor, i32 0, i32 0)) #8
  unreachable

sw.epilog:                                        ; preds = %sw.bb.143, %if.end.141, %if.then.140, %if.end.124, %if.then.91, %do.end, %if.end.16, %if.end
  %91 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %mem_loc_result, align 8
  store %struct.dw_loc_descr_struct* %91, %struct.dw_loc_descr_struct** %retval
  br label %return

return:                                           ; preds = %sw.epilog, %if.else.164, %if.then.156, %if.then.39
  %92 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %retval
  ret %struct.dw_loc_descr_struct* %92
}

; Function Attrs: nounwind uwtable
define internal %struct.dw_loc_descr_struct* @concat_loc_descriptor(%struct.rtx_def* %x0, %struct.rtx_def* %x1) #0 {
entry:
  %retval = alloca %struct.dw_loc_descr_struct*, align 8
  %x0.addr = alloca %struct.rtx_def*, align 8
  %x1.addr = alloca %struct.rtx_def*, align 8
  %cc_loc_result = alloca %struct.dw_loc_descr_struct*, align 8
  %x0_ref = alloca %struct.dw_loc_descr_struct*, align 8
  %x1_ref = alloca %struct.dw_loc_descr_struct*, align 8
  store %struct.rtx_def* %x0, %struct.rtx_def** %x0.addr, align 8
  store %struct.rtx_def* %x1, %struct.rtx_def** %x1.addr, align 8
  store %struct.dw_loc_descr_struct* null, %struct.dw_loc_descr_struct** %cc_loc_result, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x0.addr, align 8
  %call = call %struct.dw_loc_descr_struct* @loc_descriptor(%struct.rtx_def* %0)
  store %struct.dw_loc_descr_struct* %call, %struct.dw_loc_descr_struct** %x0_ref, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %x1.addr, align 8
  %call1 = call %struct.dw_loc_descr_struct* @loc_descriptor(%struct.rtx_def* %1)
  store %struct.dw_loc_descr_struct* %call1, %struct.dw_loc_descr_struct** %x1_ref, align 8
  %2 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %x0_ref, align 8
  %cmp = icmp eq %struct.dw_loc_descr_struct* %2, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %x1_ref, align 8
  %cmp2 = icmp eq %struct.dw_loc_descr_struct* %3, null
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store %struct.dw_loc_descr_struct* null, %struct.dw_loc_descr_struct** %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %4 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %x0_ref, align 8
  store %struct.dw_loc_descr_struct* %4, %struct.dw_loc_descr_struct** %cc_loc_result, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %x0.addr, align 8
  %6 = bitcast %struct.rtx_def* %5 to i32*
  %bf.load = load i32, i32* %6, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %idxprom = sext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom
  %7 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %7 to i64
  %call3 = call %struct.dw_loc_descr_struct* @new_loc_descr(i32 147, i64 %conv, i64 0)
  call void @add_loc_descr(%struct.dw_loc_descr_struct** %cc_loc_result, %struct.dw_loc_descr_struct* %call3)
  %8 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %x1_ref, align 8
  call void @add_loc_descr(%struct.dw_loc_descr_struct** %cc_loc_result, %struct.dw_loc_descr_struct* %8)
  %9 = load %struct.rtx_def*, %struct.rtx_def** %x1.addr, align 8
  %10 = bitcast %struct.rtx_def* %9 to i32*
  %bf.load4 = load i32, i32* %10, align 8
  %bf.lshr5 = lshr i32 %bf.load4, 16
  %bf.clear6 = and i32 %bf.lshr5, 255
  %idxprom7 = sext i32 %bf.clear6 to i64
  %arrayidx8 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom7
  %11 = load i8, i8* %arrayidx8, align 1
  %conv9 = zext i8 %11 to i64
  %call10 = call %struct.dw_loc_descr_struct* @new_loc_descr(i32 147, i64 %conv9, i64 0)
  call void @add_loc_descr(%struct.dw_loc_descr_struct** %cc_loc_result, %struct.dw_loc_descr_struct* %call10)
  %12 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %cc_loc_result, align 8
  store %struct.dw_loc_descr_struct* %12, %struct.dw_loc_descr_struct** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %13 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %retval
  ret %struct.dw_loc_descr_struct* %13
}

; Function Attrs: nounwind uwtable
define internal i32 @reg_number(%struct.rtx_def* %rtl) #0 {
entry:
  %rtl.addr = alloca %struct.rtx_def*, align 8
  %regno = alloca i32, align 4
  store %struct.rtx_def* %rtl, %struct.rtx_def** %rtl.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx to i32*
  %1 = load i32, i32* %rtuint, align 4
  store i32 %1, i32* %regno, align 4
  %2 = load i32, i32* %regno, align 4
  %cmp = icmp uge i32 %2, 53
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 7617, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @__FUNCTION__.reg_number, i32 0, i32 0)) #8
  unreachable

if.end:                                           ; preds = %entry
  %3 = load i32, i32* @target_flags, align 4
  %and = and i32 %3, 33554432
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %4 = load i32, i32* %regno, align 4
  %idxprom = zext i32 %4 to i64
  %arrayidx1 = getelementptr inbounds [53 x i32], [53 x i32]* @dbx64_register_map, i32 0, i64 %idxprom
  %5 = load i32, i32* %arrayidx1, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %6 = load i32, i32* %regno, align 4
  %idxprom2 = zext i32 %6 to i64
  %arrayidx3 = getelementptr inbounds [53 x i32], [53 x i32]* @svr4_dbx_register_map, i32 0, i64 %idxprom2
  %7 = load i32, i32* %arrayidx3, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %5, %cond.true ], [ %7, %cond.false ]
  ret i32 %cond
}

; Function Attrs: nounwind uwtable
define internal %struct.dw_loc_descr_struct* @based_loc_descr(i32 %reg, i64 %offset) #0 {
entry:
  %reg.addr = alloca i32, align 4
  %offset.addr = alloca i64, align 8
  %loc_result = alloca %struct.dw_loc_descr_struct*, align 8
  %fp_reg = alloca i32, align 4
  store i32 %reg, i32* %reg.addr, align 4
  store i64 %offset, i64* %offset.addr, align 8
  %0 = load i32, i32* @target_flags, align 4
  %and = and i32 %0, 33554432
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i32, i32* @frame_pointer_needed, align 4
  %tobool1 = icmp ne i32 %1, 0
  %cond = select i1 %tobool1, i32 6, i32 7
  %idxprom = sext i32 %cond to i64
  %arrayidx = getelementptr inbounds [53 x i32], [53 x i32]* @dbx64_register_map, i32 0, i64 %idxprom
  %2 = load i32, i32* %arrayidx, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  %3 = load i32, i32* @frame_pointer_needed, align 4
  %tobool2 = icmp ne i32 %3, 0
  %cond3 = select i1 %tobool2, i32 6, i32 7
  %idxprom4 = sext i32 %cond3 to i64
  %arrayidx5 = getelementptr inbounds [53 x i32], [53 x i32]* @svr4_dbx_register_map, i32 0, i64 %idxprom4
  %4 = load i32, i32* %arrayidx5, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond6 = phi i32 [ %2, %cond.true ], [ %4, %cond.false ]
  store i32 %cond6, i32* %fp_reg, align 4
  %5 = load i32, i32* %reg.addr, align 4
  %6 = load i32, i32* %fp_reg, align 4
  %cmp = icmp eq i32 %5, %6
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end
  %7 = load i64, i64* %offset.addr, align 8
  %call = call %struct.dw_loc_descr_struct* @new_loc_descr(i32 145, i64 %7, i64 0)
  store %struct.dw_loc_descr_struct* %call, %struct.dw_loc_descr_struct** %loc_result, align 8
  br label %if.end.12

if.else:                                          ; preds = %cond.end
  %8 = load i32, i32* %reg.addr, align 4
  %cmp7 = icmp ule i32 %8, 31
  br i1 %cmp7, label %if.then.8, label %if.else.10

if.then.8:                                        ; preds = %if.else
  %9 = load i32, i32* %reg.addr, align 4
  %add = add i32 112, %9
  %10 = load i64, i64* %offset.addr, align 8
  %call9 = call %struct.dw_loc_descr_struct* @new_loc_descr(i32 %add, i64 %10, i64 0)
  store %struct.dw_loc_descr_struct* %call9, %struct.dw_loc_descr_struct** %loc_result, align 8
  br label %if.end

if.else.10:                                       ; preds = %if.else
  %11 = load i32, i32* %reg.addr, align 4
  %conv = zext i32 %11 to i64
  %12 = load i64, i64* %offset.addr, align 8
  %call11 = call %struct.dw_loc_descr_struct* @new_loc_descr(i32 146, i64 %conv, i64 %12)
  store %struct.dw_loc_descr_struct* %call11, %struct.dw_loc_descr_struct** %loc_result, align 8
  br label %if.end

if.end:                                           ; preds = %if.else.10, %if.then.8
  br label %if.end.12

if.end.12:                                        ; preds = %if.end, %if.then
  %13 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %loc_result, align 8
  ret %struct.dw_loc_descr_struct* %13
}

declare %struct.rtx_def* @get_pool_constant_mark(%struct.rtx_def*, i8*) #1

declare %struct.rtx_def* @gen_rtx_fmt_ee(i32, i32, %struct.rtx_def*, %struct.rtx_def*) #1

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @is_based_loc(%struct.rtx_def* %rtl) #3 {
entry:
  %rtl.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %rtl, %struct.rtx_def** %rtl.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 75
  br i1 %cmp, label %land.rhs, label %land.end.17

land.rhs:                                         ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %3 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %4 = bitcast %struct.rtx_def* %3 to i32*
  %bf.load1 = load i32, i32* %4, align 8
  %bf.clear2 = and i32 %bf.load1, 65535
  %cmp3 = icmp eq i32 %bf.clear2, 61
  br i1 %cmp3, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %land.rhs
  %5 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  %fld4 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1
  %arrayidx5 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld4, i32 0, i64 0
  %rtx6 = bitcast %union.rtunion_def* %arrayidx5 to %struct.rtx_def**
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rtx6, align 8
  %fld7 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1
  %arrayidx8 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld7, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx8 to i32*
  %7 = load i32, i32* %rtuint, align 4
  %cmp9 = icmp ult i32 %7, 53
  br i1 %cmp9, label %land.rhs.10, label %land.end

land.rhs.10:                                      ; preds = %land.lhs.true
  %8 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8
  %fld11 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1
  %arrayidx12 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld11, i32 0, i64 1
  %rtx13 = bitcast %union.rtunion_def* %arrayidx12 to %struct.rtx_def**
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rtx13, align 8
  %10 = bitcast %struct.rtx_def* %9 to i32*
  %bf.load14 = load i32, i32* %10, align 8
  %bf.clear15 = and i32 %bf.load14, 65535
  %cmp16 = icmp eq i32 %bf.clear15, 54
  br label %land.end

land.end:                                         ; preds = %land.rhs.10, %land.lhs.true, %land.rhs
  %11 = phi i1 [ false, %land.lhs.true ], [ false, %land.rhs ], [ %cmp16, %land.rhs.10 ]
  br label %land.end.17

land.end.17:                                      ; preds = %land.end, %entry
  %12 = phi i1 [ false, %entry ], [ %11, %land.end ]
  %land.ext = zext i1 %12 to i32
  ret i32 %land.ext
}

; Function Attrs: nounwind uwtable
define internal %struct.dw_loc_descr_struct* @int_loc_descriptor(i64 %i) #0 {
entry:
  %i.addr = alloca i64, align 8
  %op = alloca i32, align 4
  store i64 %i, i64* %i.addr, align 8
  %0 = load i64, i64* %i.addr, align 8
  %cmp = icmp sge i64 %0, 0
  br i1 %cmp, label %if.then, label %if.else.18

if.then:                                          ; preds = %entry
  %1 = load i64, i64* %i.addr, align 8
  %cmp1 = icmp sle i64 %1, 31
  br i1 %cmp1, label %if.then.2, label %if.else

if.then.2:                                        ; preds = %if.then
  %2 = load i64, i64* %i.addr, align 8
  %add = add nsw i64 48, %2
  %conv = trunc i64 %add to i32
  store i32 %conv, i32* %op, align 4
  br label %if.end.17

if.else:                                          ; preds = %if.then
  %3 = load i64, i64* %i.addr, align 8
  %cmp3 = icmp sle i64 %3, 255
  br i1 %cmp3, label %if.then.5, label %if.else.6

if.then.5:                                        ; preds = %if.else
  store i32 8, i32* %op, align 4
  br label %if.end.16

if.else.6:                                        ; preds = %if.else
  %4 = load i64, i64* %i.addr, align 8
  %cmp7 = icmp sle i64 %4, 65535
  br i1 %cmp7, label %if.then.9, label %if.else.10

if.then.9:                                        ; preds = %if.else.6
  store i32 10, i32* %op, align 4
  br label %if.end.15

if.else.10:                                       ; preds = %if.else.6
  %5 = load i64, i64* %i.addr, align 8
  %cmp11 = icmp sle i64 %5, 4294967295
  br i1 %cmp11, label %if.then.13, label %if.else.14

if.then.13:                                       ; preds = %if.else.10
  store i32 12, i32* %op, align 4
  br label %if.end

if.else.14:                                       ; preds = %if.else.10
  store i32 16, i32* %op, align 4
  br label %if.end

if.end:                                           ; preds = %if.else.14, %if.then.13
  br label %if.end.15

if.end.15:                                        ; preds = %if.end, %if.then.9
  br label %if.end.16

if.end.16:                                        ; preds = %if.end.15, %if.then.5
  br label %if.end.17

if.end.17:                                        ; preds = %if.end.16, %if.then.2
  br label %if.end.34

if.else.18:                                       ; preds = %entry
  %6 = load i64, i64* %i.addr, align 8
  %cmp19 = icmp sge i64 %6, -128
  br i1 %cmp19, label %if.then.21, label %if.else.22

if.then.21:                                       ; preds = %if.else.18
  store i32 9, i32* %op, align 4
  br label %if.end.33

if.else.22:                                       ; preds = %if.else.18
  %7 = load i64, i64* %i.addr, align 8
  %cmp23 = icmp sge i64 %7, -32768
  br i1 %cmp23, label %if.then.25, label %if.else.26

if.then.25:                                       ; preds = %if.else.22
  store i32 11, i32* %op, align 4
  br label %if.end.32

if.else.26:                                       ; preds = %if.else.22
  %8 = load i64, i64* %i.addr, align 8
  %cmp27 = icmp sge i64 %8, 2147483648
  br i1 %cmp27, label %if.then.29, label %if.else.30

if.then.29:                                       ; preds = %if.else.26
  store i32 13, i32* %op, align 4
  br label %if.end.31

if.else.30:                                       ; preds = %if.else.26
  store i32 17, i32* %op, align 4
  br label %if.end.31

if.end.31:                                        ; preds = %if.else.30, %if.then.29
  br label %if.end.32

if.end.32:                                        ; preds = %if.end.31, %if.then.25
  br label %if.end.33

if.end.33:                                        ; preds = %if.end.32, %if.then.21
  br label %if.end.34

if.end.34:                                        ; preds = %if.end.33, %if.end.17
  %9 = load i32, i32* %op, align 4
  %10 = load i64, i64* %i.addr, align 8
  %call = call %struct.dw_loc_descr_struct* @new_loc_descr(i32 %9, i64 %10, i64 0)
  ret %struct.dw_loc_descr_struct* %call
}

; Function Attrs: nounwind uwtable
define internal i8* @type_tag(%union.tree_node* %type) #0 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  %name = alloca i8*, align 8
  %t = alloca %union.tree_node*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  store i8* null, i8** %name, align 8
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type1 = bitcast %union.tree_node* %0 to %struct.tree_type*
  %name2 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 11
  %1 = load %union.tree_node*, %union.tree_node** %name2, align 8
  %cmp = icmp ne %union.tree_node* %1, null
  br i1 %cmp, label %if.then, label %if.end.29

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %t, align 8
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type3 = bitcast %union.tree_node* %2 to %struct.tree_type*
  %name4 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type3, i32 0, i32 11
  %3 = load %union.tree_node*, %union.tree_node** %name4, align 8
  %common = bitcast %union.tree_node* %3 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp5 = icmp eq i32 %bf.clear, 1
  br i1 %cmp5, label %if.then.6, label %if.else

if.then.6:                                        ; preds = %if.then
  %4 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type7 = bitcast %union.tree_node* %4 to %struct.tree_type*
  %name8 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type7, i32 0, i32 11
  %5 = load %union.tree_node*, %union.tree_node** %name8, align 8
  store %union.tree_node* %5, %union.tree_node** %t, align 8
  br label %if.end.25

if.else:                                          ; preds = %if.then
  %6 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type9 = bitcast %union.tree_node* %6 to %struct.tree_type*
  %name10 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type9, i32 0, i32 11
  %7 = load %union.tree_node*, %union.tree_node** %name10, align 8
  %common11 = bitcast %union.tree_node* %7 to %struct.tree_common*
  %code12 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common11, i32 0, i32 2
  %bf.load13 = load i32, i32* %code12, align 8
  %bf.clear14 = and i32 %bf.load13, 255
  %cmp15 = icmp eq i32 %bf.clear14, 33
  br i1 %cmp15, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.else
  %8 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type16 = bitcast %union.tree_node* %8 to %struct.tree_type*
  %name17 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type16, i32 0, i32 11
  %9 = load %union.tree_node*, %union.tree_node** %name17, align 8
  %decl = bitcast %union.tree_node* %9 to %struct.tree_decl*
  %ignored_flag = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl, i32 0, i32 5
  %10 = bitcast i48* %ignored_flag to i64*
  %bf.load18 = load i64, i64* %10, align 8
  %bf.lshr = lshr i64 %bf.load18, 14
  %bf.clear19 = and i64 %bf.lshr, 1
  %bf.cast = trunc i64 %bf.clear19 to i32
  %tobool = icmp ne i32 %bf.cast, 0
  br i1 %tobool, label %if.end, label %if.then.20

if.then.20:                                       ; preds = %land.lhs.true
  %11 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type21 = bitcast %union.tree_node* %11 to %struct.tree_type*
  %name22 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type21, i32 0, i32 11
  %12 = load %union.tree_node*, %union.tree_node** %name22, align 8
  %decl23 = bitcast %union.tree_node* %12 to %struct.tree_decl*
  %name24 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl23, i32 0, i32 8
  %13 = load %union.tree_node*, %union.tree_node** %name24, align 8
  store %union.tree_node* %13, %union.tree_node** %t, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.20, %land.lhs.true, %if.else
  br label %if.end.25

if.end.25:                                        ; preds = %if.end, %if.then.6
  %14 = load %union.tree_node*, %union.tree_node** %t, align 8
  %cmp26 = icmp ne %union.tree_node* %14, null
  br i1 %cmp26, label %if.then.27, label %if.end.28

if.then.27:                                       ; preds = %if.end.25
  %15 = load %union.tree_node*, %union.tree_node** %t, align 8
  %identifier = bitcast %union.tree_node* %15 to %struct.tree_identifier*
  %id = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1
  %str = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 1
  %16 = load i8*, i8** %str, align 8
  store i8* %16, i8** %name, align 8
  br label %if.end.28

if.end.28:                                        ; preds = %if.then.27, %if.end.25
  br label %if.end.29

if.end.29:                                        ; preds = %if.end.28, %entry
  %17 = load i8*, i8** %name, align 8
  %cmp30 = icmp eq i8* %17, null
  br i1 %cmp30, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.29
  %18 = load i8*, i8** %name, align 8
  %19 = load i8, i8* %18, align 1
  %conv = sext i8 %19 to i32
  %cmp31 = icmp eq i32 %conv, 0
  br i1 %cmp31, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false, %if.end.29
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false
  %20 = load i8*, i8** %name, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ null, %cond.true ], [ %20, %cond.false ]
  ret i8* %cond
}

; Function Attrs: nounwind uwtable
define internal void @add_subscript_info(%struct.die_struct* %type_die, %union.tree_node* %type) #0 {
entry:
  %type_die.addr = alloca %struct.die_struct*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %dimension_number = alloca i32, align 4
  %lower = alloca %union.tree_node*, align 8
  %upper = alloca %union.tree_node*, align 8
  %subrange_die = alloca %struct.die_struct*, align 8
  %domain = alloca %union.tree_node*, align 8
  store %struct.die_struct* %type_die, %struct.die_struct** %type_die.addr, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  store i32 0, i32* %dimension_number, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 18
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type1 = bitcast %union.tree_node* %1 to %struct.tree_type*
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 1
  %2 = load %union.tree_node*, %union.tree_node** %values, align 8
  store %union.tree_node* %2, %union.tree_node** %domain, align 8
  %3 = load %struct.die_struct*, %struct.die_struct** %type_die.addr, align 8
  %call = call %struct.die_struct* @new_die(i32 33, %struct.die_struct* %3, %union.tree_node* null)
  store %struct.die_struct* %call, %struct.die_struct** %subrange_die, align 8
  %4 = load %union.tree_node*, %union.tree_node** %domain, align 8
  %tobool = icmp ne %union.tree_node* %4, null
  br i1 %tobool, label %if.then, label %if.end.36

if.then:                                          ; preds = %for.body
  %5 = load %union.tree_node*, %union.tree_node** %domain, align 8
  %type2 = bitcast %union.tree_node* %5 to %struct.tree_type*
  %minval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type2, i32 0, i32 12
  %6 = load %union.tree_node*, %union.tree_node** %minval, align 8
  store %union.tree_node* %6, %union.tree_node** %lower, align 8
  %7 = load %union.tree_node*, %union.tree_node** %domain, align 8
  %type3 = bitcast %union.tree_node* %7 to %struct.tree_type*
  %maxval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type3, i32 0, i32 13
  %8 = load %union.tree_node*, %union.tree_node** %maxval, align 8
  store %union.tree_node* %8, %union.tree_node** %upper, align 8
  %9 = load %union.tree_node*, %union.tree_node** %domain, align 8
  %common4 = bitcast %union.tree_node* %9 to %struct.tree_common*
  %type5 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4, i32 0, i32 1
  %10 = load %union.tree_node*, %union.tree_node** %type5, align 8
  %tobool6 = icmp ne %union.tree_node* %10, null
  br i1 %tobool6, label %if.then.7, label %if.end.32

if.then.7:                                        ; preds = %if.then
  %11 = load %union.tree_node*, %union.tree_node** %domain, align 8
  %common8 = bitcast %union.tree_node* %11 to %struct.tree_common*
  %code9 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common8, i32 0, i32 2
  %bf.load10 = load i32, i32* %code9, align 8
  %bf.clear11 = and i32 %bf.load10, 255
  %cmp12 = icmp eq i32 %bf.clear11, 6
  br i1 %cmp12, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.then.7
  %12 = load %union.tree_node*, %union.tree_node** %domain, align 8
  %type13 = bitcast %union.tree_node* %12 to %struct.tree_type*
  %name = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type13, i32 0, i32 11
  %13 = load %union.tree_node*, %union.tree_node** %name, align 8
  %cmp14 = icmp eq %union.tree_node* %13, null
  br i1 %cmp14, label %land.lhs.true.15, label %if.else

land.lhs.true.15:                                 ; preds = %land.lhs.true
  %14 = load %union.tree_node*, %union.tree_node** %domain, align 8
  %common16 = bitcast %union.tree_node* %14 to %struct.tree_common*
  %type17 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common16, i32 0, i32 1
  %15 = load %union.tree_node*, %union.tree_node** %type17, align 8
  %common18 = bitcast %union.tree_node* %15 to %struct.tree_common*
  %code19 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common18, i32 0, i32 2
  %bf.load20 = load i32, i32* %code19, align 8
  %bf.clear21 = and i32 %bf.load20, 255
  %cmp22 = icmp eq i32 %bf.clear21, 6
  br i1 %cmp22, label %land.lhs.true.23, label %if.else

land.lhs.true.23:                                 ; preds = %land.lhs.true.15
  %16 = load %union.tree_node*, %union.tree_node** %domain, align 8
  %common24 = bitcast %union.tree_node* %16 to %struct.tree_common*
  %type25 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common24, i32 0, i32 1
  %17 = load %union.tree_node*, %union.tree_node** %type25, align 8
  %type26 = bitcast %union.tree_node* %17 to %struct.tree_type*
  %name27 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type26, i32 0, i32 11
  %18 = load %union.tree_node*, %union.tree_node** %name27, align 8
  %cmp28 = icmp eq %union.tree_node* %18, null
  br i1 %cmp28, label %if.then.29, label %if.else

if.then.29:                                       ; preds = %land.lhs.true.23
  br label %if.end

if.else:                                          ; preds = %land.lhs.true.23, %land.lhs.true.15, %land.lhs.true, %if.then.7
  %19 = load %struct.die_struct*, %struct.die_struct** %subrange_die, align 8
  %20 = load %union.tree_node*, %union.tree_node** %domain, align 8
  %common30 = bitcast %union.tree_node* %20 to %struct.tree_common*
  %type31 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common30, i32 0, i32 1
  %21 = load %union.tree_node*, %union.tree_node** %type31, align 8
  %22 = load %struct.die_struct*, %struct.die_struct** %type_die.addr, align 8
  call void @add_type_attribute(%struct.die_struct* %19, %union.tree_node* %21, i32 0, i32 0, %struct.die_struct* %22)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.29
  br label %if.end.32

if.end.32:                                        ; preds = %if.end, %if.then
  %23 = load %struct.die_struct*, %struct.die_struct** %subrange_die, align 8
  %24 = load %union.tree_node*, %union.tree_node** %lower, align 8
  call void @add_bound_info(%struct.die_struct* %23, i32 34, %union.tree_node* %24)
  %25 = load %union.tree_node*, %union.tree_node** %upper, align 8
  %tobool33 = icmp ne %union.tree_node* %25, null
  br i1 %tobool33, label %if.then.34, label %if.end.35

if.then.34:                                       ; preds = %if.end.32
  %26 = load %struct.die_struct*, %struct.die_struct** %subrange_die, align 8
  %27 = load %union.tree_node*, %union.tree_node** %upper, align 8
  call void @add_bound_info(%struct.die_struct* %26, i32 47, %union.tree_node* %27)
  br label %if.end.35

if.end.35:                                        ; preds = %if.then.34, %if.end.32
  br label %if.end.36

if.end.36:                                        ; preds = %if.end.35, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.36
  %28 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common37 = bitcast %union.tree_node* %28 to %struct.tree_common*
  %type38 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common37, i32 0, i32 1
  %29 = load %union.tree_node*, %union.tree_node** %type38, align 8
  store %union.tree_node* %29, %union.tree_node** %type.addr, align 8
  %30 = load i32, i32* %dimension_number, align 4
  %inc = add i32 %30, 1
  store i32 %inc, i32* %dimension_number, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @add_bound_info(%struct.die_struct* %subrange_die, i32 %bound_attr, %union.tree_node* %bound) #0 {
entry:
  %subrange_die.addr = alloca %struct.die_struct*, align 8
  %bound_attr.addr = alloca i32, align 4
  %bound.addr = alloca %union.tree_node*, align 8
  %ctx = alloca %struct.die_struct*, align 8
  %decl_die = alloca %struct.die_struct*, align 8
  %loc = alloca %struct.rtx_def*, align 8
  %new_addr = alloca %struct.rtx_def*, align 8
  %decl_die57 = alloca %struct.die_struct*, align 8
  %ctx62 = alloca %struct.die_struct*, align 8
  %decl_die63 = alloca %struct.die_struct*, align 8
  %loc64 = alloca %struct.dw_loc_descr_struct*, align 8
  store %struct.die_struct* %subrange_die, %struct.die_struct** %subrange_die.addr, align 8
  store i32 %bound_attr, i32* %bound_attr.addr, align 4
  store %union.tree_node* %bound, %union.tree_node** %bound.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %bound.addr, align 8
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  switch i32 %bf.clear, label %sw.default [
    i32 0, label %sw.bb
    i32 25, label %sw.bb.1
    i32 114, label %sw.bb.17
    i32 115, label %sw.bb.17
    i32 116, label %sw.bb.17
    i32 117, label %sw.bb.17
    i32 118, label %sw.bb.18
    i32 34, label %sw.bb.56
    i32 35, label %sw.bb.56
  ]

sw.bb:                                            ; preds = %entry
  br label %sw.epilog

sw.bb.1:                                          ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %bound.addr, align 8
  %call = call i32 @host_integerp(%union.tree_node* %1, i32 0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %sw.bb.1
  %2 = load i32, i32* %bound_attr.addr, align 4
  %cmp = icmp eq i32 %2, 34
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %lor.lhs.false
  %call2 = call i32 @is_c_family()
  %tobool3 = icmp ne i32 %call2, 0
  br i1 %tobool3, label %land.lhs.true.7, label %lor.lhs.false.4

lor.lhs.false.4:                                  ; preds = %land.lhs.true
  %call5 = call i32 @is_java()
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %land.lhs.true.7, label %lor.lhs.false.10

land.lhs.true.7:                                  ; preds = %lor.lhs.false.4, %land.lhs.true
  %3 = load %union.tree_node*, %union.tree_node** %bound.addr, align 8
  %call8 = call i32 @integer_zerop(%union.tree_node* %3)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %if.then, label %lor.lhs.false.10

lor.lhs.false.10:                                 ; preds = %land.lhs.true.7, %lor.lhs.false.4
  %call11 = call i32 @is_fortran()
  %tobool12 = icmp ne i32 %call11, 0
  br i1 %tobool12, label %land.lhs.true.13, label %if.else

land.lhs.true.13:                                 ; preds = %lor.lhs.false.10
  %4 = load %union.tree_node*, %union.tree_node** %bound.addr, align 8
  %call14 = call i32 @integer_onep(%union.tree_node* %4)
  %tobool15 = icmp ne i32 %call14, 0
  br i1 %tobool15, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true.13, %land.lhs.true.7, %sw.bb.1
  br label %if.end

if.else:                                          ; preds = %land.lhs.true.13, %lor.lhs.false.10, %lor.lhs.false
  %5 = load %struct.die_struct*, %struct.die_struct** %subrange_die.addr, align 8
  %6 = load i32, i32* %bound_attr.addr, align 4
  %7 = load %union.tree_node*, %union.tree_node** %bound.addr, align 8
  %call16 = call i64 @tree_low_cst(%union.tree_node* %7, i32 0)
  call void @add_AT_unsigned(%struct.die_struct* %5, i32 %6, i64 %call16)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %sw.epilog

sw.bb.17:                                         ; preds = %entry, %entry, %entry, %entry
  %8 = load %struct.die_struct*, %struct.die_struct** %subrange_die.addr, align 8
  %9 = load i32, i32* %bound_attr.addr, align 4
  %10 = load %union.tree_node*, %union.tree_node** %bound.addr, align 8
  %exp = bitcast %union.tree_node* %10 to %struct.tree_exp*
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 2
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i32 0, i64 0
  %11 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8
  call void @add_bound_info(%struct.die_struct* %8, i32 %9, %union.tree_node* %11)
  br label %sw.epilog

sw.bb.18:                                         ; preds = %entry
  %12 = load %union.tree_node*, %union.tree_node** %bound.addr, align 8
  %exp19 = bitcast %union.tree_node* %12 to %struct.tree_exp*
  %operands20 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp19, i32 0, i32 2
  %arrayidx21 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands20, i32 0, i64 2
  %13 = bitcast %union.tree_node** %arrayidx21 to %struct.rtx_def**
  %14 = load %struct.rtx_def*, %struct.rtx_def** %13, align 8
  %tobool22 = icmp ne %struct.rtx_def* %14, null
  br i1 %tobool22, label %land.lhs.true.23, label %if.end.55

land.lhs.true.23:                                 ; preds = %sw.bb.18
  %15 = load i32, i32* @optimize, align 4
  %tobool24 = icmp ne i32 %15, 0
  br i1 %tobool24, label %lor.lhs.false.25, label %if.then.32

lor.lhs.false.25:                                 ; preds = %land.lhs.true.23
  %16 = load %union.tree_node*, %union.tree_node** %bound.addr, align 8
  %exp26 = bitcast %union.tree_node* %16 to %struct.tree_exp*
  %operands27 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp26, i32 0, i32 2
  %arrayidx28 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands27, i32 0, i64 2
  %17 = bitcast %union.tree_node** %arrayidx28 to %struct.rtx_def**
  %18 = load %struct.rtx_def*, %struct.rtx_def** %17, align 8
  %19 = bitcast %struct.rtx_def* %18 to i32*
  %bf.load29 = load i32, i32* %19, align 8
  %bf.clear30 = and i32 %bf.load29, 65535
  %cmp31 = icmp eq i32 %bf.clear30, 66
  br i1 %cmp31, label %if.then.32, label %if.end.55

if.then.32:                                       ; preds = %lor.lhs.false.25, %land.lhs.true.23
  %20 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %call33 = call %struct.die_struct* @lookup_decl_die(%union.tree_node* %20)
  store %struct.die_struct* %call33, %struct.die_struct** %ctx, align 8
  %21 = load %struct.die_struct*, %struct.die_struct** %ctx, align 8
  %22 = load %union.tree_node*, %union.tree_node** %bound.addr, align 8
  %call34 = call %struct.die_struct* @new_die(i32 52, %struct.die_struct* %21, %union.tree_node* %22)
  store %struct.die_struct* %call34, %struct.die_struct** %decl_die, align 8
  %23 = load %union.tree_node*, %union.tree_node** %bound.addr, align 8
  %exp35 = bitcast %union.tree_node* %23 to %struct.tree_exp*
  %operands36 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp35, i32 0, i32 2
  %arrayidx37 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands36, i32 0, i64 2
  %24 = bitcast %union.tree_node** %arrayidx37 to %struct.rtx_def**
  %25 = load %struct.rtx_def*, %struct.rtx_def** %24, align 8
  store %struct.rtx_def* %25, %struct.rtx_def** %loc, align 8
  %26 = load %struct.rtx_def*, %struct.rtx_def** %loc, align 8
  %27 = bitcast %struct.rtx_def* %26 to i32*
  %bf.load38 = load i32, i32* %27, align 8
  %bf.clear39 = and i32 %bf.load38, 65535
  %cmp40 = icmp eq i32 %bf.clear39, 66
  br i1 %cmp40, label %if.then.41, label %if.end.53

if.then.41:                                       ; preds = %if.then.32
  %28 = load %struct.rtx_def*, %struct.rtx_def** %loc, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1
  %arrayidx42 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx42 to %struct.rtx_def**
  %29 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %30 = load %union.tree_node*, %union.tree_node** %bound.addr, align 8
  %call43 = call %struct.rtx_def* @fix_lexical_addr(%struct.rtx_def* %29, %union.tree_node* %30)
  store %struct.rtx_def* %call43, %struct.rtx_def** %new_addr, align 8
  %31 = load %struct.rtx_def*, %struct.rtx_def** %loc, align 8
  %fld44 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1
  %arrayidx45 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld44, i32 0, i64 0
  %rtx46 = bitcast %union.rtunion_def* %arrayidx45 to %struct.rtx_def**
  %32 = load %struct.rtx_def*, %struct.rtx_def** %rtx46, align 8
  %33 = load %struct.rtx_def*, %struct.rtx_def** %new_addr, align 8
  %cmp47 = icmp ne %struct.rtx_def* %32, %33
  br i1 %cmp47, label %if.then.48, label %if.end.52

if.then.48:                                       ; preds = %if.then.41
  %34 = load %struct.rtx_def*, %struct.rtx_def** %loc, align 8
  %35 = bitcast %struct.rtx_def* %34 to i32*
  %bf.load49 = load i32, i32* %35, align 8
  %bf.lshr = lshr i32 %bf.load49, 16
  %bf.clear50 = and i32 %bf.lshr, 255
  %36 = load %struct.rtx_def*, %struct.rtx_def** %new_addr, align 8
  %call51 = call %struct.rtx_def* @gen_rtx_MEM(i32 %bf.clear50, %struct.rtx_def* %36)
  store %struct.rtx_def* %call51, %struct.rtx_def** %loc, align 8
  br label %if.end.52

if.end.52:                                        ; preds = %if.then.48, %if.then.41
  br label %if.end.53

if.end.53:                                        ; preds = %if.end.52, %if.then.32
  %37 = load %struct.die_struct*, %struct.die_struct** %decl_die, align 8
  call void @add_AT_flag(%struct.die_struct* %37, i32 52, i32 1)
  %38 = load %struct.die_struct*, %struct.die_struct** %decl_die, align 8
  %39 = load %union.tree_node*, %union.tree_node** %bound.addr, align 8
  %common54 = bitcast %union.tree_node* %39 to %struct.tree_common*
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common54, i32 0, i32 1
  %40 = load %union.tree_node*, %union.tree_node** %type, align 8
  %41 = load %struct.die_struct*, %struct.die_struct** %ctx, align 8
  call void @add_type_attribute(%struct.die_struct* %38, %union.tree_node* %40, i32 1, i32 0, %struct.die_struct* %41)
  %42 = load %struct.die_struct*, %struct.die_struct** %decl_die, align 8
  %43 = load %struct.rtx_def*, %struct.rtx_def** %loc, align 8
  call void @add_AT_location_description(%struct.die_struct* %42, i32 2, %struct.rtx_def* %43)
  %44 = load %struct.die_struct*, %struct.die_struct** %subrange_die.addr, align 8
  %45 = load i32, i32* %bound_attr.addr, align 4
  %46 = load %struct.die_struct*, %struct.die_struct** %decl_die, align 8
  call void @add_AT_die_ref(%struct.die_struct* %44, i32 %45, %struct.die_struct* %46)
  br label %if.end.55

if.end.55:                                        ; preds = %if.end.53, %lor.lhs.false.25, %sw.bb.18
  br label %sw.epilog

sw.bb.56:                                         ; preds = %entry, %entry
  %47 = load %union.tree_node*, %union.tree_node** %bound.addr, align 8
  %call58 = call %struct.die_struct* @lookup_decl_die(%union.tree_node* %47)
  store %struct.die_struct* %call58, %struct.die_struct** %decl_die57, align 8
  %48 = load %struct.die_struct*, %struct.die_struct** %decl_die57, align 8
  %cmp59 = icmp ne %struct.die_struct* %48, null
  br i1 %cmp59, label %if.then.60, label %if.end.61

if.then.60:                                       ; preds = %sw.bb.56
  %49 = load %struct.die_struct*, %struct.die_struct** %subrange_die.addr, align 8
  %50 = load i32, i32* %bound_attr.addr, align 4
  %51 = load %struct.die_struct*, %struct.die_struct** %decl_die57, align 8
  call void @add_AT_die_ref(%struct.die_struct* %49, i32 %50, %struct.die_struct* %51)
  br label %if.end.61

if.end.61:                                        ; preds = %if.then.60, %sw.bb.56
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  %52 = load %union.tree_node*, %union.tree_node** %bound.addr, align 8
  %call65 = call %struct.dw_loc_descr_struct* @loc_descriptor_from_tree(%union.tree_node* %52, i32 0)
  store %struct.dw_loc_descr_struct* %call65, %struct.dw_loc_descr_struct** %loc64, align 8
  %53 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %loc64, align 8
  %cmp66 = icmp eq %struct.dw_loc_descr_struct* %53, null
  br i1 %cmp66, label %if.then.67, label %if.end.68

if.then.67:                                       ; preds = %sw.default
  br label %sw.epilog

if.end.68:                                        ; preds = %sw.default
  %54 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %cmp69 = icmp eq %union.tree_node* %54, null
  br i1 %cmp69, label %if.then.70, label %if.else.71

if.then.70:                                       ; preds = %if.end.68
  %55 = load %struct.die_struct*, %struct.die_struct** @comp_unit_die, align 8
  store %struct.die_struct* %55, %struct.die_struct** %ctx62, align 8
  br label %if.end.73

if.else.71:                                       ; preds = %if.end.68
  %56 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %call72 = call %struct.die_struct* @lookup_decl_die(%union.tree_node* %56)
  store %struct.die_struct* %call72, %struct.die_struct** %ctx62, align 8
  br label %if.end.73

if.end.73:                                        ; preds = %if.else.71, %if.then.70
  %57 = load %struct.die_struct*, %struct.die_struct** %ctx62, align 8
  %cmp74 = icmp eq %struct.die_struct* %57, null
  br i1 %cmp74, label %if.then.75, label %if.end.79

if.then.75:                                       ; preds = %if.end.73
  %58 = load %union.tree_node*, %union.tree_node** %bound.addr, align 8
  %common76 = bitcast %union.tree_node* %58 to %struct.tree_common*
  %type77 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common76, i32 0, i32 1
  %59 = load %union.tree_node*, %union.tree_node** %type77, align 8
  %60 = load %union.tree_node*, %union.tree_node** %bound.addr, align 8
  %61 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %call78 = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 118, %union.tree_node* %59, %union.tree_node* %60, %union.tree_node* %61, %union.tree_node* null)
  store %union.tree_node* %call78, %union.tree_node** %bound.addr, align 8
  br label %if.end.79

if.end.79:                                        ; preds = %if.then.75, %if.end.73
  %62 = load %struct.die_struct*, %struct.die_struct** %ctx62, align 8
  %63 = load %union.tree_node*, %union.tree_node** %bound.addr, align 8
  %call80 = call %struct.die_struct* @new_die(i32 52, %struct.die_struct* %62, %union.tree_node* %63)
  store %struct.die_struct* %call80, %struct.die_struct** %decl_die63, align 8
  %64 = load %struct.die_struct*, %struct.die_struct** %decl_die63, align 8
  call void @add_AT_flag(%struct.die_struct* %64, i32 52, i32 1)
  %65 = load %struct.die_struct*, %struct.die_struct** %decl_die63, align 8
  %66 = load %union.tree_node*, %union.tree_node** %bound.addr, align 8
  %common81 = bitcast %union.tree_node* %66 to %struct.tree_common*
  %type82 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common81, i32 0, i32 1
  %67 = load %union.tree_node*, %union.tree_node** %type82, align 8
  %68 = load %struct.die_struct*, %struct.die_struct** %ctx62, align 8
  call void @add_type_attribute(%struct.die_struct* %65, %union.tree_node* %67, i32 1, i32 0, %struct.die_struct* %68)
  %69 = load %struct.die_struct*, %struct.die_struct** %decl_die63, align 8
  %70 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %loc64, align 8
  call void @add_AT_loc(%struct.die_struct* %69, i32 2, %struct.dw_loc_descr_struct* %70)
  %71 = load %struct.die_struct*, %struct.die_struct** %subrange_die.addr, align 8
  %72 = load i32, i32* %bound_attr.addr, align 4
  %73 = load %struct.die_struct*, %struct.die_struct** %decl_die63, align 8
  call void @add_AT_die_ref(%struct.die_struct* %71, i32 %72, %struct.die_struct* %73)
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.bb, %if.end.79, %if.then.67, %if.end.61, %if.end.55, %sw.bb.17, %if.end
  ret void
}

declare i32 @host_integerp(%union.tree_node*, i32) #1

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @is_c_family() #3 {
entry:
  %lang = alloca i32, align 4
  %0 = load %struct.die_struct*, %struct.die_struct** @comp_unit_die, align 8
  %call = call i32 @get_AT_unsigned(%struct.die_struct* %0, i32 19)
  store i32 %call, i32* %lang, align 4
  %1 = load i32, i32* %lang, align 4
  %cmp = icmp eq i32 %1, 2
  br i1 %cmp, label %lor.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %lang, align 4
  %cmp1 = icmp eq i32 %2, 1
  br i1 %cmp1, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false
  %3 = load i32, i32* %lang, align 4
  %cmp2 = icmp eq i32 %3, 4
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false, %entry
  %4 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %cmp2, %lor.rhs ]
  %lor.ext = zext i1 %4 to i32
  ret i32 %lor.ext
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @is_java() #3 {
entry:
  %lang = alloca i32, align 4
  %0 = load %struct.die_struct*, %struct.die_struct** @comp_unit_die, align 8
  %call = call i32 @get_AT_unsigned(%struct.die_struct* %0, i32 19)
  store i32 %call, i32* %lang, align 4
  %1 = load i32, i32* %lang, align 4
  %cmp = icmp eq i32 %1, 11
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @is_fortran() #3 {
entry:
  %lang = alloca i32, align 4
  %0 = load %struct.die_struct*, %struct.die_struct** @comp_unit_die, align 8
  %call = call i32 @get_AT_unsigned(%struct.die_struct* %0, i32 19)
  store i32 %call, i32* %lang, align 4
  %1 = load i32, i32* %lang, align 4
  %cmp = icmp eq i32 %1, 7
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %2 = load i32, i32* %lang, align 4
  %cmp1 = icmp eq i32 %2, 8
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %3 = phi i1 [ true, %entry ], [ %cmp1, %lor.rhs ]
  %lor.ext = zext i1 %3 to i32
  ret i32 %lor.ext
}

declare i32 @integer_onep(%union.tree_node*) #1

declare i64 @tree_low_cst(%union.tree_node*, i32) #1

declare %struct.rtx_def* @fix_lexical_addr(%struct.rtx_def*, %union.tree_node*) #1

; Function Attrs: nounwind uwtable
define internal %struct.dw_loc_descr_struct* @loc_descriptor_from_tree(%union.tree_node* %loc, i32 %addressp) #0 {
entry:
  %retval = alloca %struct.dw_loc_descr_struct*, align 8
  %loc.addr = alloca %union.tree_node*, align 8
  %addressp.addr = alloca i32, align 4
  %ret = alloca %struct.dw_loc_descr_struct*, align 8
  %ret1 = alloca %struct.dw_loc_descr_struct*, align 8
  %indirect_p = alloca i32, align 4
  %unsignedp = alloca i32, align 4
  %op = alloca i32, align 4
  %rtl = alloca %struct.rtx_def*, align 8
  %mode = alloca i32, align 4
  %obj = alloca %union.tree_node*, align 8
  %offset = alloca %union.tree_node*, align 8
  %bitsize = alloca i64, align 8
  %bitpos = alloca i64, align 8
  %bytepos = alloca i64, align 8
  %mode110 = alloca i32, align 4
  %volatilep = alloca i32, align 4
  %lhs = alloca %struct.dw_loc_descr_struct*, align 8
  %rhs = alloca %struct.dw_loc_descr_struct*, align 8
  %bra_node = alloca %struct.dw_loc_descr_struct*, align 8
  %jump_node = alloca %struct.dw_loc_descr_struct*, align 8
  %tmp = alloca %struct.dw_loc_descr_struct*, align 8
  %size = alloca i64, align 8
  store %union.tree_node* %loc, %union.tree_node** %loc.addr, align 8
  store i32 %addressp, i32* %addressp.addr, align 4
  store i32 0, i32* %indirect_p, align 4
  %0 = load %union.tree_node*, %union.tree_node** %loc.addr, align 8
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1
  %1 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common1 = bitcast %union.tree_node* %1 to %struct.tree_common*
  %unsigned_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1, i32 0, i32 2
  %bf.load = load i32, i32* %unsigned_flag, align 8
  %bf.lshr = lshr i32 %bf.load, 13
  %bf.clear = and i32 %bf.lshr, 1
  store i32 %bf.clear, i32* %unsignedp, align 4
  %2 = load %union.tree_node*, %union.tree_node** %loc.addr, align 8
  %common2 = bitcast %union.tree_node* %2 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 2
  %bf.load3 = load i32, i32* %code, align 8
  %bf.clear4 = and i32 %bf.load3, 255
  switch i32 %bf.clear4, label %sw.default [
    i32 0, label %sw.bb
    i32 58, label %sw.bb.5
    i32 57, label %sw.bb.5
    i32 53, label %sw.bb.6
    i32 121, label %sw.bb.7
    i32 34, label %sw.bb.45
    i32 35, label %sw.bb.45
    i32 41, label %sw.bb.94
    i32 47, label %sw.bb.99
    i32 115, label %sw.bb.104
    i32 114, label %sw.bb.104
    i32 116, label %sw.bb.104
    i32 117, label %sw.bb.104
    i32 118, label %sw.bb.104
    i32 39, label %sw.bb.109
    i32 40, label %sw.bb.109
    i32 43, label %sw.bb.109
    i32 44, label %sw.bb.109
    i32 25, label %sw.bb.141
    i32 93, label %sw.bb.149
    i32 91, label %sw.bb.149
    i32 88, label %sw.bb.149
    i32 95, label %sw.bb.150
    i32 87, label %sw.bb.150
    i32 94, label %sw.bb.151
    i32 92, label %sw.bb.151
    i32 86, label %sw.bb.151
    i32 62, label %sw.bb.152
    i32 60, label %sw.bb.153
    i32 66, label %sw.bb.154
    i32 61, label %sw.bb.155
    i32 82, label %sw.bb.156
    i32 83, label %sw.bb.157
    i32 59, label %sw.bb.160
    i32 98, label %sw.bb.188
    i32 100, label %sw.bb.202
    i32 97, label %sw.bb.216
    i32 99, label %sw.bb.230
    i32 101, label %sw.bb.244
    i32 102, label %sw.bb.245
    i32 96, label %sw.bb.260
    i32 90, label %sw.bb.260
    i32 80, label %sw.bb.261
    i32 77, label %sw.bb.262
    i32 79, label %sw.bb.271
    i32 51, label %sw.bb.288
  ]

sw.bb:                                            ; preds = %entry
  store %struct.dw_loc_descr_struct* null, %struct.dw_loc_descr_struct** %retval
  br label %return

sw.bb.5:                                          ; preds = %entry, %entry
  store %struct.dw_loc_descr_struct* null, %struct.dw_loc_descr_struct** %retval
  br label %return

sw.bb.6:                                          ; preds = %entry
  store %struct.dw_loc_descr_struct* null, %struct.dw_loc_descr_struct** %retval
  br label %return

sw.bb.7:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %loc.addr, align 8
  %exp = bitcast %union.tree_node* %3 to %struct.tree_exp*
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 2
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i32 0, i64 0
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8
  store %union.tree_node* %4, %union.tree_node** %loc.addr, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %sw.bb.7
  %5 = load %union.tree_node*, %union.tree_node** %loc.addr, align 8
  %common8 = bitcast %union.tree_node* %5 to %struct.tree_common*
  %code9 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common8, i32 0, i32 2
  %bf.load10 = load i32, i32* %code9, align 8
  %bf.clear11 = and i32 %bf.load10, 255
  %cmp = icmp eq i32 %bf.clear11, 114
  br i1 %cmp, label %lor.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.cond
  %6 = load %union.tree_node*, %union.tree_node** %loc.addr, align 8
  %common12 = bitcast %union.tree_node* %6 to %struct.tree_common*
  %code13 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common12, i32 0, i32 2
  %bf.load14 = load i32, i32* %code13, align 8
  %bf.clear15 = and i32 %bf.load14, 255
  %cmp16 = icmp eq i32 %bf.clear15, 115
  br i1 %cmp16, label %lor.end, label %lor.lhs.false.17

lor.lhs.false.17:                                 ; preds = %lor.lhs.false
  %7 = load %union.tree_node*, %union.tree_node** %loc.addr, align 8
  %common18 = bitcast %union.tree_node* %7 to %struct.tree_common*
  %code19 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common18, i32 0, i32 2
  %bf.load20 = load i32, i32* %code19, align 8
  %bf.clear21 = and i32 %bf.load20, 255
  %cmp22 = icmp eq i32 %bf.clear21, 116
  br i1 %cmp22, label %lor.end, label %lor.lhs.false.23

lor.lhs.false.23:                                 ; preds = %lor.lhs.false.17
  %8 = load %union.tree_node*, %union.tree_node** %loc.addr, align 8
  %common24 = bitcast %union.tree_node* %8 to %struct.tree_common*
  %code25 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common24, i32 0, i32 2
  %bf.load26 = load i32, i32* %code25, align 8
  %bf.clear27 = and i32 %bf.load26, 255
  %cmp28 = icmp eq i32 %bf.clear27, 117
  br i1 %cmp28, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false.23
  %9 = load %union.tree_node*, %union.tree_node** %loc.addr, align 8
  %common29 = bitcast %union.tree_node* %9 to %struct.tree_common*
  %code30 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common29, i32 0, i32 2
  %bf.load31 = load i32, i32* %code30, align 8
  %bf.clear32 = and i32 %bf.load31, 255
  %cmp33 = icmp eq i32 %bf.clear32, 118
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false.23, %lor.lhs.false.17, %lor.lhs.false, %for.cond
  %10 = phi i1 [ true, %lor.lhs.false.23 ], [ true, %lor.lhs.false.17 ], [ true, %lor.lhs.false ], [ true, %for.cond ], [ %cmp33, %lor.rhs ]
  br i1 %10, label %for.body, label %for.end

for.body:                                         ; preds = %lor.end
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load %union.tree_node*, %union.tree_node** %loc.addr, align 8
  %exp34 = bitcast %union.tree_node* %11 to %struct.tree_exp*
  %operands35 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp34, i32 0, i32 2
  %arrayidx36 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands35, i32 0, i64 0
  %12 = load %union.tree_node*, %union.tree_node** %arrayidx36, align 8
  store %union.tree_node* %12, %union.tree_node** %loc.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %lor.end
  %13 = load %union.tree_node*, %union.tree_node** %loc.addr, align 8
  %common37 = bitcast %union.tree_node* %13 to %struct.tree_common*
  %code38 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common37, i32 0, i32 2
  %bf.load39 = load i32, i32* %code38, align 8
  %bf.clear40 = and i32 %bf.load39, 255
  %cmp41 = icmp eq i32 %bf.clear40, 41
  br i1 %cmp41, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.end
  %14 = load %union.tree_node*, %union.tree_node** %loc.addr, align 8
  %exp42 = bitcast %union.tree_node* %14 to %struct.tree_exp*
  %operands43 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp42, i32 0, i32 2
  %arrayidx44 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands43, i32 0, i64 0
  %15 = load %union.tree_node*, %union.tree_node** %arrayidx44, align 8
  %16 = load i32, i32* %addressp.addr, align 4
  %call = call %struct.dw_loc_descr_struct* @loc_descriptor_from_tree(%union.tree_node* %15, i32 %16)
  br label %cond.end

cond.false:                                       ; preds = %for.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.dw_loc_descr_struct* [ %call, %cond.true ], [ null, %cond.false ]
  store %struct.dw_loc_descr_struct* %cond, %struct.dw_loc_descr_struct** %retval
  br label %return

sw.bb.45:                                         ; preds = %entry, %entry
  %17 = load %union.tree_node*, %union.tree_node** %loc.addr, align 8
  %call46 = call %struct.rtx_def* @rtl_for_decl_location(%union.tree_node* %17)
  store %struct.rtx_def* %call46, %struct.rtx_def** %rtl, align 8
  %18 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %cmp47 = icmp eq %struct.rtx_def* %18, null
  br i1 %cmp47, label %if.then, label %if.else

if.then:                                          ; preds = %sw.bb.45
  store %struct.dw_loc_descr_struct* null, %struct.dw_loc_descr_struct** %retval
  br label %return

if.else:                                          ; preds = %sw.bb.45
  %19 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %20 = bitcast %struct.rtx_def* %19 to i32*
  %bf.load48 = load i32, i32* %20, align 8
  %bf.clear49 = and i32 %bf.load48, 65535
  %cmp50 = icmp eq i32 %bf.clear49, 67
  br i1 %cmp50, label %if.then.79, label %lor.lhs.false.51

lor.lhs.false.51:                                 ; preds = %if.else
  %21 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %22 = bitcast %struct.rtx_def* %21 to i32*
  %bf.load52 = load i32, i32* %22, align 8
  %bf.clear53 = and i32 %bf.load52, 65535
  %cmp54 = icmp eq i32 %bf.clear53, 68
  br i1 %cmp54, label %if.then.79, label %lor.lhs.false.55

lor.lhs.false.55:                                 ; preds = %lor.lhs.false.51
  %23 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %24 = bitcast %struct.rtx_def* %23 to i32*
  %bf.load56 = load i32, i32* %24, align 8
  %bf.clear57 = and i32 %bf.load56, 65535
  %cmp58 = icmp eq i32 %bf.clear57, 54
  br i1 %cmp58, label %if.then.79, label %lor.lhs.false.59

lor.lhs.false.59:                                 ; preds = %lor.lhs.false.55
  %25 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %26 = bitcast %struct.rtx_def* %25 to i32*
  %bf.load60 = load i32, i32* %26, align 8
  %bf.clear61 = and i32 %bf.load60, 65535
  %cmp62 = icmp eq i32 %bf.clear61, 55
  br i1 %cmp62, label %if.then.79, label %lor.lhs.false.63

lor.lhs.false.63:                                 ; preds = %lor.lhs.false.59
  %27 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %28 = bitcast %struct.rtx_def* %27 to i32*
  %bf.load64 = load i32, i32* %28, align 8
  %bf.clear65 = and i32 %bf.load64, 65535
  %cmp66 = icmp eq i32 %bf.clear65, 58
  br i1 %cmp66, label %if.then.79, label %lor.lhs.false.67

lor.lhs.false.67:                                 ; preds = %lor.lhs.false.63
  %29 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %30 = bitcast %struct.rtx_def* %29 to i32*
  %bf.load68 = load i32, i32* %30, align 8
  %bf.clear69 = and i32 %bf.load68, 65535
  %cmp70 = icmp eq i32 %bf.clear69, 134
  br i1 %cmp70, label %if.then.79, label %lor.lhs.false.71

lor.lhs.false.71:                                 ; preds = %lor.lhs.false.67
  %31 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %32 = bitcast %struct.rtx_def* %31 to i32*
  %bf.load72 = load i32, i32* %32, align 8
  %bf.clear73 = and i32 %bf.load72, 65535
  %cmp74 = icmp eq i32 %bf.clear73, 56
  br i1 %cmp74, label %if.then.79, label %lor.lhs.false.75

lor.lhs.false.75:                                 ; preds = %lor.lhs.false.71
  %33 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %34 = bitcast %struct.rtx_def* %33 to i32*
  %bf.load76 = load i32, i32* %34, align 8
  %bf.clear77 = and i32 %bf.load76, 65535
  %cmp78 = icmp eq i32 %bf.clear77, 140
  br i1 %cmp78, label %if.then.79, label %if.else.82

if.then.79:                                       ; preds = %lor.lhs.false.75, %lor.lhs.false.71, %lor.lhs.false.67, %lor.lhs.false.63, %lor.lhs.false.59, %lor.lhs.false.55, %lor.lhs.false.51, %if.else
  %call80 = call %struct.dw_loc_descr_struct* @new_loc_descr(i32 3, i64 0, i64 0)
  store %struct.dw_loc_descr_struct* %call80, %struct.dw_loc_descr_struct** %ret, align 8
  %35 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %ret, align 8
  %dw_loc_oprnd1 = getelementptr inbounds %struct.dw_loc_descr_struct, %struct.dw_loc_descr_struct* %35, i32 0, i32 2
  %val_class = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_loc_oprnd1, i32 0, i32 0
  store i32 0, i32* %val_class, align 4
  %36 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %37 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %ret, align 8
  %dw_loc_oprnd181 = getelementptr inbounds %struct.dw_loc_descr_struct, %struct.dw_loc_descr_struct* %37, i32 0, i32 2
  %v = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_loc_oprnd181, i32 0, i32 1
  %val_addr = bitcast %union.anon.3* %v to %struct.rtx_def**
  store %struct.rtx_def* %36, %struct.rtx_def** %val_addr, align 8
  store i32 1, i32* %indirect_p, align 4
  br label %if.end.92

if.else.82:                                       ; preds = %lor.lhs.false.75
  %38 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %39 = bitcast %struct.rtx_def* %38 to i32*
  %bf.load83 = load i32, i32* %39, align 8
  %bf.lshr84 = lshr i32 %bf.load83, 16
  %bf.clear85 = and i32 %bf.lshr84, 255
  store i32 %bf.clear85, i32* %mode, align 4
  %40 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %41 = bitcast %struct.rtx_def* %40 to i32*
  %bf.load86 = load i32, i32* %41, align 8
  %bf.clear87 = and i32 %bf.load86, 65535
  %cmp88 = icmp eq i32 %bf.clear87, 66
  br i1 %cmp88, label %if.then.89, label %if.end

if.then.89:                                       ; preds = %if.else.82
  store i32 1, i32* %indirect_p, align 4
  %42 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %42, i32 0, i32 1
  %arrayidx90 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx90 to %struct.rtx_def**
  %43 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %43, %struct.rtx_def** %rtl, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.89, %if.else.82
  %44 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %45 = load i32, i32* %mode, align 4
  %call91 = call %struct.dw_loc_descr_struct* @mem_loc_descriptor(%struct.rtx_def* %44, i32 %45)
  store %struct.dw_loc_descr_struct* %call91, %struct.dw_loc_descr_struct** %ret, align 8
  br label %if.end.92

if.end.92:                                        ; preds = %if.end, %if.then.79
  br label %if.end.93

if.end.93:                                        ; preds = %if.end.92
  br label %sw.epilog

sw.bb.94:                                         ; preds = %entry
  %46 = load %union.tree_node*, %union.tree_node** %loc.addr, align 8
  %exp95 = bitcast %union.tree_node* %46 to %struct.tree_exp*
  %operands96 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp95, i32 0, i32 2
  %arrayidx97 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands96, i32 0, i64 0
  %47 = load %union.tree_node*, %union.tree_node** %arrayidx97, align 8
  %call98 = call %struct.dw_loc_descr_struct* @loc_descriptor_from_tree(%union.tree_node* %47, i32 0)
  store %struct.dw_loc_descr_struct* %call98, %struct.dw_loc_descr_struct** %ret, align 8
  store i32 1, i32* %indirect_p, align 4
  br label %sw.epilog

sw.bb.99:                                         ; preds = %entry
  %48 = load %union.tree_node*, %union.tree_node** %loc.addr, align 8
  %exp100 = bitcast %union.tree_node* %48 to %struct.tree_exp*
  %operands101 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp100, i32 0, i32 2
  %arrayidx102 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands101, i32 0, i64 1
  %49 = load %union.tree_node*, %union.tree_node** %arrayidx102, align 8
  %50 = load i32, i32* %addressp.addr, align 4
  %call103 = call %struct.dw_loc_descr_struct* @loc_descriptor_from_tree(%union.tree_node* %49, i32 %50)
  store %struct.dw_loc_descr_struct* %call103, %struct.dw_loc_descr_struct** %retval
  br label %return

sw.bb.104:                                        ; preds = %entry, %entry, %entry, %entry, %entry
  %51 = load %union.tree_node*, %union.tree_node** %loc.addr, align 8
  %exp105 = bitcast %union.tree_node* %51 to %struct.tree_exp*
  %operands106 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp105, i32 0, i32 2
  %arrayidx107 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands106, i32 0, i64 0
  %52 = load %union.tree_node*, %union.tree_node** %arrayidx107, align 8
  %53 = load i32, i32* %addressp.addr, align 4
  %call108 = call %struct.dw_loc_descr_struct* @loc_descriptor_from_tree(%union.tree_node* %52, i32 %53)
  store %struct.dw_loc_descr_struct* %call108, %struct.dw_loc_descr_struct** %retval
  br label %return

sw.bb.109:                                        ; preds = %entry, %entry, %entry, %entry
  %54 = load %union.tree_node*, %union.tree_node** %loc.addr, align 8
  %call111 = call %union.tree_node* @get_inner_reference(%union.tree_node* %54, i64* %bitsize, i64* %bitpos, %union.tree_node** %offset, i32* %mode110, i32* %unsignedp, i32* %volatilep)
  store %union.tree_node* %call111, %union.tree_node** %obj, align 8
  %55 = load %union.tree_node*, %union.tree_node** %obj, align 8
  %56 = load %union.tree_node*, %union.tree_node** %loc.addr, align 8
  %cmp112 = icmp eq %union.tree_node* %55, %56
  br i1 %cmp112, label %if.then.113, label %if.end.114

if.then.113:                                      ; preds = %sw.bb.109
  store %struct.dw_loc_descr_struct* null, %struct.dw_loc_descr_struct** %retval
  br label %return

if.end.114:                                       ; preds = %sw.bb.109
  %57 = load %union.tree_node*, %union.tree_node** %obj, align 8
  %call115 = call %struct.dw_loc_descr_struct* @loc_descriptor_from_tree(%union.tree_node* %57, i32 1)
  store %struct.dw_loc_descr_struct* %call115, %struct.dw_loc_descr_struct** %ret, align 8
  %58 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %ret, align 8
  %cmp116 = icmp eq %struct.dw_loc_descr_struct* %58, null
  br i1 %cmp116, label %if.then.122, label %lor.lhs.false.117

lor.lhs.false.117:                                ; preds = %if.end.114
  %59 = load i64, i64* %bitpos, align 8
  %rem = srem i64 %59, 8
  %cmp118 = icmp ne i64 %rem, 0
  br i1 %cmp118, label %if.then.122, label %lor.lhs.false.119

lor.lhs.false.119:                                ; preds = %lor.lhs.false.117
  %60 = load i64, i64* %bitsize, align 8
  %rem120 = srem i64 %60, 8
  %cmp121 = icmp ne i64 %rem120, 0
  br i1 %cmp121, label %if.then.122, label %if.end.123

if.then.122:                                      ; preds = %lor.lhs.false.119, %lor.lhs.false.117, %if.end.114
  store %struct.dw_loc_descr_struct* null, %struct.dw_loc_descr_struct** %retval
  br label %return

if.end.123:                                       ; preds = %lor.lhs.false.119
  %61 = load %union.tree_node*, %union.tree_node** %offset, align 8
  %cmp124 = icmp ne %union.tree_node* %61, null
  br i1 %cmp124, label %if.then.125, label %if.end.128

if.then.125:                                      ; preds = %if.end.123
  %62 = load %union.tree_node*, %union.tree_node** %offset, align 8
  %call126 = call %struct.dw_loc_descr_struct* @loc_descriptor_from_tree(%union.tree_node* %62, i32 0)
  call void @add_loc_descr(%struct.dw_loc_descr_struct** %ret, %struct.dw_loc_descr_struct* %call126)
  %call127 = call %struct.dw_loc_descr_struct* @new_loc_descr(i32 34, i64 0, i64 0)
  call void @add_loc_descr(%struct.dw_loc_descr_struct** %ret, %struct.dw_loc_descr_struct* %call127)
  br label %if.end.128

if.end.128:                                       ; preds = %if.then.125, %if.end.123
  %63 = load i32, i32* %addressp.addr, align 4
  %tobool = icmp ne i32 %63, 0
  br i1 %tobool, label %if.end.130, label %if.then.129

if.then.129:                                      ; preds = %if.end.128
  store i32 1, i32* %indirect_p, align 4
  br label %if.end.130

if.end.130:                                       ; preds = %if.then.129, %if.end.128
  %64 = load i64, i64* %bitpos, align 8
  %div = sdiv i64 %64, 8
  store i64 %div, i64* %bytepos, align 8
  %65 = load i64, i64* %bytepos, align 8
  %cmp131 = icmp sgt i64 %65, 0
  br i1 %cmp131, label %if.then.132, label %if.else.134

if.then.132:                                      ; preds = %if.end.130
  %66 = load i64, i64* %bytepos, align 8
  %call133 = call %struct.dw_loc_descr_struct* @new_loc_descr(i32 35, i64 %66, i64 0)
  call void @add_loc_descr(%struct.dw_loc_descr_struct** %ret, %struct.dw_loc_descr_struct* %call133)
  br label %if.end.140

if.else.134:                                      ; preds = %if.end.130
  %67 = load i64, i64* %bytepos, align 8
  %cmp135 = icmp slt i64 %67, 0
  br i1 %cmp135, label %if.then.136, label %if.end.139

if.then.136:                                      ; preds = %if.else.134
  %68 = load i64, i64* %bytepos, align 8
  %call137 = call %struct.dw_loc_descr_struct* @int_loc_descriptor(i64 %68)
  call void @add_loc_descr(%struct.dw_loc_descr_struct** %ret, %struct.dw_loc_descr_struct* %call137)
  %call138 = call %struct.dw_loc_descr_struct* @new_loc_descr(i32 34, i64 0, i64 0)
  call void @add_loc_descr(%struct.dw_loc_descr_struct** %ret, %struct.dw_loc_descr_struct* %call138)
  br label %if.end.139

if.end.139:                                       ; preds = %if.then.136, %if.else.134
  br label %if.end.140

if.end.140:                                       ; preds = %if.end.139, %if.then.132
  br label %sw.epilog

sw.bb.141:                                        ; preds = %entry
  %69 = load %union.tree_node*, %union.tree_node** %loc.addr, align 8
  %call142 = call i32 @host_integerp(%union.tree_node* %69, i32 0)
  %tobool143 = icmp ne i32 %call142, 0
  br i1 %tobool143, label %if.then.144, label %if.else.147

if.then.144:                                      ; preds = %sw.bb.141
  %70 = load %union.tree_node*, %union.tree_node** %loc.addr, align 8
  %call145 = call i64 @tree_low_cst(%union.tree_node* %70, i32 0)
  %call146 = call %struct.dw_loc_descr_struct* @int_loc_descriptor(i64 %call145)
  store %struct.dw_loc_descr_struct* %call146, %struct.dw_loc_descr_struct** %ret, align 8
  br label %if.end.148

if.else.147:                                      ; preds = %sw.bb.141
  store %struct.dw_loc_descr_struct* null, %struct.dw_loc_descr_struct** %retval
  br label %return

if.end.148:                                       ; preds = %if.then.144
  br label %sw.epilog

sw.bb.149:                                        ; preds = %entry, %entry, %entry
  store i32 26, i32* %op, align 4
  br label %do_binop

sw.bb.150:                                        ; preds = %entry, %entry
  store i32 39, i32* %op, align 4
  br label %do_binop

sw.bb.151:                                        ; preds = %entry, %entry, %entry
  store i32 33, i32* %op, align 4
  br label %do_binop

sw.bb.152:                                        ; preds = %entry
  store i32 27, i32* %op, align 4
  br label %do_binop

sw.bb.153:                                        ; preds = %entry
  store i32 28, i32* %op, align 4
  br label %do_binop

sw.bb.154:                                        ; preds = %entry
  store i32 29, i32* %op, align 4
  br label %do_binop

sw.bb.155:                                        ; preds = %entry
  store i32 30, i32* %op, align 4
  br label %do_binop

sw.bb.156:                                        ; preds = %entry
  store i32 36, i32* %op, align 4
  br label %do_binop

sw.bb.157:                                        ; preds = %entry
  %71 = load i32, i32* %unsignedp, align 4
  %tobool158 = icmp ne i32 %71, 0
  %cond159 = select i1 %tobool158, i32 37, i32 38
  store i32 %cond159, i32* %op, align 4
  br label %do_binop

sw.bb.160:                                        ; preds = %entry
  %72 = load %union.tree_node*, %union.tree_node** %loc.addr, align 8
  %exp161 = bitcast %union.tree_node* %72 to %struct.tree_exp*
  %operands162 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp161, i32 0, i32 2
  %arrayidx163 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands162, i32 0, i64 1
  %73 = load %union.tree_node*, %union.tree_node** %arrayidx163, align 8
  %common164 = bitcast %union.tree_node* %73 to %struct.tree_common*
  %code165 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common164, i32 0, i32 2
  %bf.load166 = load i32, i32* %code165, align 8
  %bf.clear167 = and i32 %bf.load166, 255
  %cmp168 = icmp eq i32 %bf.clear167, 25
  br i1 %cmp168, label %land.lhs.true, label %if.end.187

land.lhs.true:                                    ; preds = %sw.bb.160
  %74 = load %union.tree_node*, %union.tree_node** %loc.addr, align 8
  %exp169 = bitcast %union.tree_node* %74 to %struct.tree_exp*
  %operands170 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp169, i32 0, i32 2
  %arrayidx171 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands170, i32 0, i64 1
  %75 = load %union.tree_node*, %union.tree_node** %arrayidx171, align 8
  %call172 = call i32 @host_integerp(%union.tree_node* %75, i32 0)
  %tobool173 = icmp ne i32 %call172, 0
  br i1 %tobool173, label %if.then.174, label %if.end.187

if.then.174:                                      ; preds = %land.lhs.true
  %76 = load %union.tree_node*, %union.tree_node** %loc.addr, align 8
  %exp175 = bitcast %union.tree_node* %76 to %struct.tree_exp*
  %operands176 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp175, i32 0, i32 2
  %arrayidx177 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands176, i32 0, i64 0
  %77 = load %union.tree_node*, %union.tree_node** %arrayidx177, align 8
  %call178 = call %struct.dw_loc_descr_struct* @loc_descriptor_from_tree(%union.tree_node* %77, i32 0)
  store %struct.dw_loc_descr_struct* %call178, %struct.dw_loc_descr_struct** %ret, align 8
  %78 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %ret, align 8
  %cmp179 = icmp eq %struct.dw_loc_descr_struct* %78, null
  br i1 %cmp179, label %if.then.180, label %if.end.181

if.then.180:                                      ; preds = %if.then.174
  store %struct.dw_loc_descr_struct* null, %struct.dw_loc_descr_struct** %retval
  br label %return

if.end.181:                                       ; preds = %if.then.174
  %79 = load %union.tree_node*, %union.tree_node** %loc.addr, align 8
  %exp182 = bitcast %union.tree_node* %79 to %struct.tree_exp*
  %operands183 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp182, i32 0, i32 2
  %arrayidx184 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands183, i32 0, i64 1
  %80 = load %union.tree_node*, %union.tree_node** %arrayidx184, align 8
  %call185 = call i64 @tree_low_cst(%union.tree_node* %80, i32 0)
  %call186 = call %struct.dw_loc_descr_struct* @new_loc_descr(i32 35, i64 %call185, i64 0)
  call void @add_loc_descr(%struct.dw_loc_descr_struct** %ret, %struct.dw_loc_descr_struct* %call186)
  br label %sw.epilog

if.end.187:                                       ; preds = %land.lhs.true, %sw.bb.160
  store i32 34, i32* %op, align 4
  br label %do_binop

sw.bb.188:                                        ; preds = %entry
  %81 = load %union.tree_node*, %union.tree_node** %loc.addr, align 8
  %exp189 = bitcast %union.tree_node* %81 to %struct.tree_exp*
  %operands190 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp189, i32 0, i32 2
  %arrayidx191 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands190, i32 0, i64 0
  %82 = load %union.tree_node*, %union.tree_node** %arrayidx191, align 8
  %common192 = bitcast %union.tree_node* %82 to %struct.tree_common*
  %type193 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common192, i32 0, i32 1
  %83 = load %union.tree_node*, %union.tree_node** %type193, align 8
  %common194 = bitcast %union.tree_node* %83 to %struct.tree_common*
  %unsigned_flag195 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common194, i32 0, i32 2
  %bf.load196 = load i32, i32* %unsigned_flag195, align 8
  %bf.lshr197 = lshr i32 %bf.load196, 13
  %bf.clear198 = and i32 %bf.lshr197, 1
  %tobool199 = icmp ne i32 %bf.clear198, 0
  br i1 %tobool199, label %if.then.200, label %if.end.201

if.then.200:                                      ; preds = %sw.bb.188
  store %struct.dw_loc_descr_struct* null, %struct.dw_loc_descr_struct** %retval
  br label %return

if.end.201:                                       ; preds = %sw.bb.188
  store i32 44, i32* %op, align 4
  br label %do_binop

sw.bb.202:                                        ; preds = %entry
  %84 = load %union.tree_node*, %union.tree_node** %loc.addr, align 8
  %exp203 = bitcast %union.tree_node* %84 to %struct.tree_exp*
  %operands204 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp203, i32 0, i32 2
  %arrayidx205 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands204, i32 0, i64 0
  %85 = load %union.tree_node*, %union.tree_node** %arrayidx205, align 8
  %common206 = bitcast %union.tree_node* %85 to %struct.tree_common*
  %type207 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common206, i32 0, i32 1
  %86 = load %union.tree_node*, %union.tree_node** %type207, align 8
  %common208 = bitcast %union.tree_node* %86 to %struct.tree_common*
  %unsigned_flag209 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common208, i32 0, i32 2
  %bf.load210 = load i32, i32* %unsigned_flag209, align 8
  %bf.lshr211 = lshr i32 %bf.load210, 13
  %bf.clear212 = and i32 %bf.lshr211, 1
  %tobool213 = icmp ne i32 %bf.clear212, 0
  br i1 %tobool213, label %if.then.214, label %if.end.215

if.then.214:                                      ; preds = %sw.bb.202
  store %struct.dw_loc_descr_struct* null, %struct.dw_loc_descr_struct** %retval
  br label %return

if.end.215:                                       ; preds = %sw.bb.202
  store i32 42, i32* %op, align 4
  br label %do_binop

sw.bb.216:                                        ; preds = %entry
  %87 = load %union.tree_node*, %union.tree_node** %loc.addr, align 8
  %exp217 = bitcast %union.tree_node* %87 to %struct.tree_exp*
  %operands218 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp217, i32 0, i32 2
  %arrayidx219 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands218, i32 0, i64 0
  %88 = load %union.tree_node*, %union.tree_node** %arrayidx219, align 8
  %common220 = bitcast %union.tree_node* %88 to %struct.tree_common*
  %type221 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common220, i32 0, i32 1
  %89 = load %union.tree_node*, %union.tree_node** %type221, align 8
  %common222 = bitcast %union.tree_node* %89 to %struct.tree_common*
  %unsigned_flag223 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common222, i32 0, i32 2
  %bf.load224 = load i32, i32* %unsigned_flag223, align 8
  %bf.lshr225 = lshr i32 %bf.load224, 13
  %bf.clear226 = and i32 %bf.lshr225, 1
  %tobool227 = icmp ne i32 %bf.clear226, 0
  br i1 %tobool227, label %if.then.228, label %if.end.229

if.then.228:                                      ; preds = %sw.bb.216
  store %struct.dw_loc_descr_struct* null, %struct.dw_loc_descr_struct** %retval
  br label %return

if.end.229:                                       ; preds = %sw.bb.216
  store i32 45, i32* %op, align 4
  br label %do_binop

sw.bb.230:                                        ; preds = %entry
  %90 = load %union.tree_node*, %union.tree_node** %loc.addr, align 8
  %exp231 = bitcast %union.tree_node* %90 to %struct.tree_exp*
  %operands232 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp231, i32 0, i32 2
  %arrayidx233 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands232, i32 0, i64 0
  %91 = load %union.tree_node*, %union.tree_node** %arrayidx233, align 8
  %common234 = bitcast %union.tree_node* %91 to %struct.tree_common*
  %type235 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common234, i32 0, i32 1
  %92 = load %union.tree_node*, %union.tree_node** %type235, align 8
  %common236 = bitcast %union.tree_node* %92 to %struct.tree_common*
  %unsigned_flag237 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common236, i32 0, i32 2
  %bf.load238 = load i32, i32* %unsigned_flag237, align 8
  %bf.lshr239 = lshr i32 %bf.load238, 13
  %bf.clear240 = and i32 %bf.lshr239, 1
  %tobool241 = icmp ne i32 %bf.clear240, 0
  br i1 %tobool241, label %if.then.242, label %if.end.243

if.then.242:                                      ; preds = %sw.bb.230
  store %struct.dw_loc_descr_struct* null, %struct.dw_loc_descr_struct** %retval
  br label %return

if.end.243:                                       ; preds = %sw.bb.230
  store i32 43, i32* %op, align 4
  br label %do_binop

sw.bb.244:                                        ; preds = %entry
  store i32 41, i32* %op, align 4
  br label %do_binop

sw.bb.245:                                        ; preds = %entry
  store i32 46, i32* %op, align 4
  br label %do_binop

do_binop:                                         ; preds = %sw.bb.245, %sw.bb.244, %if.end.243, %if.end.229, %if.end.215, %if.end.201, %if.end.187, %sw.bb.157, %sw.bb.156, %sw.bb.155, %sw.bb.154, %sw.bb.153, %sw.bb.152, %sw.bb.151, %sw.bb.150, %sw.bb.149
  %93 = load %union.tree_node*, %union.tree_node** %loc.addr, align 8
  %exp246 = bitcast %union.tree_node* %93 to %struct.tree_exp*
  %operands247 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp246, i32 0, i32 2
  %arrayidx248 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands247, i32 0, i64 0
  %94 = load %union.tree_node*, %union.tree_node** %arrayidx248, align 8
  %call249 = call %struct.dw_loc_descr_struct* @loc_descriptor_from_tree(%union.tree_node* %94, i32 0)
  store %struct.dw_loc_descr_struct* %call249, %struct.dw_loc_descr_struct** %ret, align 8
  %95 = load %union.tree_node*, %union.tree_node** %loc.addr, align 8
  %exp250 = bitcast %union.tree_node* %95 to %struct.tree_exp*
  %operands251 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp250, i32 0, i32 2
  %arrayidx252 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands251, i32 0, i64 1
  %96 = load %union.tree_node*, %union.tree_node** %arrayidx252, align 8
  %call253 = call %struct.dw_loc_descr_struct* @loc_descriptor_from_tree(%union.tree_node* %96, i32 0)
  store %struct.dw_loc_descr_struct* %call253, %struct.dw_loc_descr_struct** %ret1, align 8
  %97 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %ret, align 8
  %cmp254 = icmp eq %struct.dw_loc_descr_struct* %97, null
  br i1 %cmp254, label %if.then.257, label %lor.lhs.false.255

lor.lhs.false.255:                                ; preds = %do_binop
  %98 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %ret1, align 8
  %cmp256 = icmp eq %struct.dw_loc_descr_struct* %98, null
  br i1 %cmp256, label %if.then.257, label %if.end.258

if.then.257:                                      ; preds = %lor.lhs.false.255, %do_binop
  store %struct.dw_loc_descr_struct* null, %struct.dw_loc_descr_struct** %retval
  br label %return

if.end.258:                                       ; preds = %lor.lhs.false.255
  %99 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %ret1, align 8
  call void @add_loc_descr(%struct.dw_loc_descr_struct** %ret, %struct.dw_loc_descr_struct* %99)
  %100 = load i32, i32* %op, align 4
  %call259 = call %struct.dw_loc_descr_struct* @new_loc_descr(i32 %100, i64 0, i64 0)
  call void @add_loc_descr(%struct.dw_loc_descr_struct** %ret, %struct.dw_loc_descr_struct* %call259)
  br label %sw.epilog

sw.bb.260:                                        ; preds = %entry, %entry
  store i32 32, i32* %op, align 4
  br label %do_unop

sw.bb.261:                                        ; preds = %entry
  store i32 25, i32* %op, align 4
  br label %do_unop

sw.bb.262:                                        ; preds = %entry
  store i32 31, i32* %op, align 4
  br label %do_unop

do_unop:                                          ; preds = %sw.bb.262, %sw.bb.261, %sw.bb.260
  %101 = load %union.tree_node*, %union.tree_node** %loc.addr, align 8
  %exp263 = bitcast %union.tree_node* %101 to %struct.tree_exp*
  %operands264 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp263, i32 0, i32 2
  %arrayidx265 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands264, i32 0, i64 0
  %102 = load %union.tree_node*, %union.tree_node** %arrayidx265, align 8
  %call266 = call %struct.dw_loc_descr_struct* @loc_descriptor_from_tree(%union.tree_node* %102, i32 0)
  store %struct.dw_loc_descr_struct* %call266, %struct.dw_loc_descr_struct** %ret, align 8
  %103 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %ret, align 8
  %cmp267 = icmp eq %struct.dw_loc_descr_struct* %103, null
  br i1 %cmp267, label %if.then.268, label %if.end.269

if.then.268:                                      ; preds = %do_unop
  store %struct.dw_loc_descr_struct* null, %struct.dw_loc_descr_struct** %retval
  br label %return

if.end.269:                                       ; preds = %do_unop
  %104 = load i32, i32* %op, align 4
  %call270 = call %struct.dw_loc_descr_struct* @new_loc_descr(i32 %104, i64 0, i64 0)
  call void @add_loc_descr(%struct.dw_loc_descr_struct** %ret, %struct.dw_loc_descr_struct* %call270)
  br label %sw.epilog

sw.bb.271:                                        ; preds = %entry
  %105 = load %union.tree_node*, %union.tree_node** %loc.addr, align 8
  %common272 = bitcast %union.tree_node* %105 to %struct.tree_common*
  %type273 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common272, i32 0, i32 1
  %106 = load %union.tree_node*, %union.tree_node** %type273, align 8
  %107 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i32 0, i64 5), align 8
  %108 = load %union.tree_node*, %union.tree_node** %loc.addr, align 8
  %exp274 = bitcast %union.tree_node* %108 to %struct.tree_exp*
  %operands275 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp274, i32 0, i32 2
  %arrayidx276 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands275, i32 0, i64 0
  %109 = load %union.tree_node*, %union.tree_node** %arrayidx276, align 8
  %110 = load %union.tree_node*, %union.tree_node** %loc.addr, align 8
  %exp277 = bitcast %union.tree_node* %110 to %struct.tree_exp*
  %operands278 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp277, i32 0, i32 2
  %arrayidx279 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands278, i32 0, i64 1
  %111 = load %union.tree_node*, %union.tree_node** %arrayidx279, align 8
  %call280 = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 97, %union.tree_node* %107, %union.tree_node* %109, %union.tree_node* %111)
  %112 = load %union.tree_node*, %union.tree_node** %loc.addr, align 8
  %exp281 = bitcast %union.tree_node* %112 to %struct.tree_exp*
  %operands282 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp281, i32 0, i32 2
  %arrayidx283 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands282, i32 0, i64 1
  %113 = load %union.tree_node*, %union.tree_node** %arrayidx283, align 8
  %114 = load %union.tree_node*, %union.tree_node** %loc.addr, align 8
  %exp284 = bitcast %union.tree_node* %114 to %struct.tree_exp*
  %operands285 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp284, i32 0, i32 2
  %arrayidx286 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands285, i32 0, i64 0
  %115 = load %union.tree_node*, %union.tree_node** %arrayidx286, align 8
  %call287 = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 51, %union.tree_node* %106, %union.tree_node* %call280, %union.tree_node* %113, %union.tree_node* %115)
  store %union.tree_node* %call287, %union.tree_node** %loc.addr, align 8
  br label %sw.bb.288

sw.bb.288:                                        ; preds = %entry, %sw.bb.271
  %116 = load %union.tree_node*, %union.tree_node** %loc.addr, align 8
  %exp289 = bitcast %union.tree_node* %116 to %struct.tree_exp*
  %operands290 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp289, i32 0, i32 2
  %arrayidx291 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands290, i32 0, i64 1
  %117 = load %union.tree_node*, %union.tree_node** %arrayidx291, align 8
  %call292 = call %struct.dw_loc_descr_struct* @loc_descriptor_from_tree(%union.tree_node* %117, i32 0)
  store %struct.dw_loc_descr_struct* %call292, %struct.dw_loc_descr_struct** %lhs, align 8
  %118 = load %union.tree_node*, %union.tree_node** %loc.addr, align 8
  %exp293 = bitcast %union.tree_node* %118 to %struct.tree_exp*
  %operands294 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp293, i32 0, i32 2
  %arrayidx295 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands294, i32 0, i64 2
  %119 = load %union.tree_node*, %union.tree_node** %arrayidx295, align 8
  %call296 = call %struct.dw_loc_descr_struct* @loc_descriptor_from_tree(%union.tree_node* %119, i32 0)
  store %struct.dw_loc_descr_struct* %call296, %struct.dw_loc_descr_struct** %rhs, align 8
  %120 = load %union.tree_node*, %union.tree_node** %loc.addr, align 8
  %exp297 = bitcast %union.tree_node* %120 to %struct.tree_exp*
  %operands298 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp297, i32 0, i32 2
  %arrayidx299 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands298, i32 0, i64 0
  %121 = load %union.tree_node*, %union.tree_node** %arrayidx299, align 8
  %call300 = call %struct.dw_loc_descr_struct* @loc_descriptor_from_tree(%union.tree_node* %121, i32 0)
  store %struct.dw_loc_descr_struct* %call300, %struct.dw_loc_descr_struct** %ret, align 8
  %122 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %ret, align 8
  %cmp301 = icmp eq %struct.dw_loc_descr_struct* %122, null
  br i1 %cmp301, label %if.then.306, label %lor.lhs.false.302

lor.lhs.false.302:                                ; preds = %sw.bb.288
  %123 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %lhs, align 8
  %cmp303 = icmp eq %struct.dw_loc_descr_struct* %123, null
  br i1 %cmp303, label %if.then.306, label %lor.lhs.false.304

lor.lhs.false.304:                                ; preds = %lor.lhs.false.302
  %124 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %rhs, align 8
  %cmp305 = icmp eq %struct.dw_loc_descr_struct* %124, null
  br i1 %cmp305, label %if.then.306, label %if.end.307

if.then.306:                                      ; preds = %lor.lhs.false.304, %lor.lhs.false.302, %sw.bb.288
  store %struct.dw_loc_descr_struct* null, %struct.dw_loc_descr_struct** %retval
  br label %return

if.end.307:                                       ; preds = %lor.lhs.false.304
  %call308 = call %struct.dw_loc_descr_struct* @new_loc_descr(i32 40, i64 0, i64 0)
  store %struct.dw_loc_descr_struct* %call308, %struct.dw_loc_descr_struct** %bra_node, align 8
  %125 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %bra_node, align 8
  call void @add_loc_descr(%struct.dw_loc_descr_struct** %ret, %struct.dw_loc_descr_struct* %125)
  %126 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %rhs, align 8
  call void @add_loc_descr(%struct.dw_loc_descr_struct** %ret, %struct.dw_loc_descr_struct* %126)
  %call309 = call %struct.dw_loc_descr_struct* @new_loc_descr(i32 47, i64 0, i64 0)
  store %struct.dw_loc_descr_struct* %call309, %struct.dw_loc_descr_struct** %jump_node, align 8
  %127 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %jump_node, align 8
  call void @add_loc_descr(%struct.dw_loc_descr_struct** %ret, %struct.dw_loc_descr_struct* %127)
  %128 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %lhs, align 8
  call void @add_loc_descr(%struct.dw_loc_descr_struct** %ret, %struct.dw_loc_descr_struct* %128)
  %129 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %bra_node, align 8
  %dw_loc_oprnd1310 = getelementptr inbounds %struct.dw_loc_descr_struct, %struct.dw_loc_descr_struct* %129, i32 0, i32 2
  %val_class311 = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_loc_oprnd1310, i32 0, i32 0
  store i32 2, i32* %val_class311, align 4
  %130 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %lhs, align 8
  %131 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %bra_node, align 8
  %dw_loc_oprnd1312 = getelementptr inbounds %struct.dw_loc_descr_struct, %struct.dw_loc_descr_struct* %131, i32 0, i32 2
  %v313 = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_loc_oprnd1312, i32 0, i32 1
  %val_loc = bitcast %union.anon.3* %v313 to %struct.dw_loc_descr_struct**
  store %struct.dw_loc_descr_struct* %130, %struct.dw_loc_descr_struct** %val_loc, align 8
  %call314 = call %struct.dw_loc_descr_struct* @new_loc_descr(i32 150, i64 0, i64 0)
  store %struct.dw_loc_descr_struct* %call314, %struct.dw_loc_descr_struct** %tmp, align 8
  %132 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %tmp, align 8
  call void @add_loc_descr(%struct.dw_loc_descr_struct** %ret, %struct.dw_loc_descr_struct* %132)
  %133 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %jump_node, align 8
  %dw_loc_oprnd1315 = getelementptr inbounds %struct.dw_loc_descr_struct, %struct.dw_loc_descr_struct* %133, i32 0, i32 2
  %val_class316 = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_loc_oprnd1315, i32 0, i32 0
  store i32 2, i32* %val_class316, align 4
  %134 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %tmp, align 8
  %135 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %jump_node, align 8
  %dw_loc_oprnd1317 = getelementptr inbounds %struct.dw_loc_descr_struct, %struct.dw_loc_descr_struct* %135, i32 0, i32 2
  %v318 = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_loc_oprnd1317, i32 0, i32 1
  %val_loc319 = bitcast %union.anon.3* %v318 to %struct.dw_loc_descr_struct**
  store %struct.dw_loc_descr_struct* %134, %struct.dw_loc_descr_struct** %val_loc319, align 8
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 8292, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @__FUNCTION__.loc_descriptor_from_tree, i32 0, i32 0)) #8
  unreachable

sw.epilog:                                        ; preds = %if.end.307, %if.end.269, %if.end.258, %if.end.181, %if.end.148, %if.end.140, %sw.bb.94, %if.end.93
  %136 = load i32, i32* %addressp.addr, align 4
  %tobool320 = icmp ne i32 %136, 0
  br i1 %tobool320, label %land.lhs.true.321, label %if.end.324

land.lhs.true.321:                                ; preds = %sw.epilog
  %137 = load i32, i32* %indirect_p, align 4
  %cmp322 = icmp eq i32 %137, 0
  br i1 %cmp322, label %if.then.323, label %if.end.324

if.then.323:                                      ; preds = %land.lhs.true.321
  store %struct.dw_loc_descr_struct* null, %struct.dw_loc_descr_struct** %retval
  br label %return

if.end.324:                                       ; preds = %land.lhs.true.321, %sw.epilog
  %138 = load i32, i32* %addressp.addr, align 4
  %tobool325 = icmp ne i32 %138, 0
  br i1 %tobool325, label %if.end.355, label %land.lhs.true.326

land.lhs.true.326:                                ; preds = %if.end.324
  %139 = load i32, i32* %indirect_p, align 4
  %cmp327 = icmp sgt i32 %139, 0
  br i1 %cmp327, label %if.then.328, label %if.end.355

if.then.328:                                      ; preds = %land.lhs.true.326
  %140 = load %union.tree_node*, %union.tree_node** %loc.addr, align 8
  %common330 = bitcast %union.tree_node* %140 to %struct.tree_common*
  %type331 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common330, i32 0, i32 1
  %141 = load %union.tree_node*, %union.tree_node** %type331, align 8
  %call332 = call i64 @int_size_in_bytes(%union.tree_node* %141)
  store i64 %call332, i64* %size, align 8
  %142 = load i64, i64* %size, align 8
  %143 = load i32, i32* @target_flags, align 4
  %and = and i32 %143, 33554432
  %tobool333 = icmp ne i32 %and, 0
  %cond334 = select i1 %tobool333, i32 64, i32 32
  %div335 = sdiv i32 %cond334, 8
  %conv = sext i32 %div335 to i64
  %cmp336 = icmp sgt i64 %142, %conv
  br i1 %cmp336, label %if.then.341, label %lor.lhs.false.338

lor.lhs.false.338:                                ; preds = %if.then.328
  %144 = load i64, i64* %size, align 8
  %cmp339 = icmp eq i64 %144, -1
  br i1 %cmp339, label %if.then.341, label %if.else.342

if.then.341:                                      ; preds = %lor.lhs.false.338, %if.then.328
  store %struct.dw_loc_descr_struct* null, %struct.dw_loc_descr_struct** %retval
  br label %return

if.else.342:                                      ; preds = %lor.lhs.false.338
  %145 = load i64, i64* %size, align 8
  %146 = load i32, i32* @target_flags, align 4
  %and343 = and i32 %146, 33554432
  %tobool344 = icmp ne i32 %and343, 0
  %cond345 = select i1 %tobool344, i32 64, i32 32
  %div346 = sdiv i32 %cond345, 8
  %conv347 = sext i32 %div346 to i64
  %cmp348 = icmp eq i64 %145, %conv347
  br i1 %cmp348, label %if.then.350, label %if.else.351

if.then.350:                                      ; preds = %if.else.342
  store i32 6, i32* %op, align 4
  br label %if.end.352

if.else.351:                                      ; preds = %if.else.342
  store i32 148, i32* %op, align 4
  br label %if.end.352

if.end.352:                                       ; preds = %if.else.351, %if.then.350
  br label %if.end.353

if.end.353:                                       ; preds = %if.end.352
  %147 = load i32, i32* %op, align 4
  %148 = load i64, i64* %size, align 8
  %call354 = call %struct.dw_loc_descr_struct* @new_loc_descr(i32 %147, i64 %148, i64 0)
  call void @add_loc_descr(%struct.dw_loc_descr_struct** %ret, %struct.dw_loc_descr_struct* %call354)
  br label %if.end.355

if.end.355:                                       ; preds = %if.end.353, %land.lhs.true.326, %if.end.324
  %149 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %ret, align 8
  store %struct.dw_loc_descr_struct* %149, %struct.dw_loc_descr_struct** %retval
  br label %return

return:                                           ; preds = %if.end.355, %if.then.341, %if.then.323, %if.then.306, %if.then.268, %if.then.257, %if.then.242, %if.then.228, %if.then.214, %if.then.200, %if.then.180, %if.else.147, %if.then.122, %if.then.113, %sw.bb.104, %sw.bb.99, %if.then, %cond.end, %sw.bb.6, %sw.bb.5, %sw.bb
  %150 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %retval
  ret %struct.dw_loc_descr_struct* %150
}

declare %union.tree_node* @build(i32, %union.tree_node*, ...) #1

declare %union.tree_node* @get_inner_reference(%union.tree_node*, i64*, i64*, %union.tree_node**, i32*, i32*, i32*) #1

declare i64 @int_size_in_bytes(%union.tree_node*) #1

; Function Attrs: nounwind uwtable
define internal void @remove_AT(%struct.die_struct* %die, i32 %attr_kind) #0 {
entry:
  %die.addr = alloca %struct.die_struct*, align 8
  %attr_kind.addr = alloca i32, align 4
  %p = alloca %struct.dw_attr_struct**, align 8
  %removed = alloca %struct.dw_attr_struct*, align 8
  store %struct.die_struct* %die, %struct.die_struct** %die.addr, align 8
  store i32 %attr_kind, i32* %attr_kind.addr, align 4
  store %struct.dw_attr_struct* null, %struct.dw_attr_struct** %removed, align 8
  %0 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %cmp = icmp ne %struct.die_struct* %0, null
  br i1 %cmp, label %if.then, label %if.end.7

if.then:                                          ; preds = %entry
  %1 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %die_attr = getelementptr inbounds %struct.die_struct, %struct.die_struct* %1, i32 0, i32 2
  store %struct.dw_attr_struct** %die_attr, %struct.dw_attr_struct*** %p, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %2 = load %struct.dw_attr_struct**, %struct.dw_attr_struct*** %p, align 8
  %3 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %2, align 8
  %tobool = icmp ne %struct.dw_attr_struct* %3, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load %struct.dw_attr_struct**, %struct.dw_attr_struct*** %p, align 8
  %5 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %4, align 8
  %dw_attr = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %5, i32 0, i32 0
  %6 = load i32, i32* %dw_attr, align 4
  %7 = load i32, i32* %attr_kind.addr, align 4
  %cmp1 = icmp eq i32 %6, %7
  br i1 %cmp1, label %if.then.2, label %if.end

if.then.2:                                        ; preds = %for.body
  %8 = load %struct.dw_attr_struct**, %struct.dw_attr_struct*** %p, align 8
  %9 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %8, align 8
  store %struct.dw_attr_struct* %9, %struct.dw_attr_struct** %removed, align 8
  %10 = load %struct.dw_attr_struct**, %struct.dw_attr_struct*** %p, align 8
  %11 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %10, align 8
  %dw_attr_next = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %11, i32 0, i32 1
  %12 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %dw_attr_next, align 8
  %13 = load %struct.dw_attr_struct**, %struct.dw_attr_struct*** %p, align 8
  store %struct.dw_attr_struct* %12, %struct.dw_attr_struct** %13, align 8
  br label %for.end

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %14 = load %struct.dw_attr_struct**, %struct.dw_attr_struct*** %p, align 8
  %15 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %14, align 8
  %dw_attr_next3 = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %15, i32 0, i32 1
  store %struct.dw_attr_struct** %dw_attr_next3, %struct.dw_attr_struct*** %p, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then.2, %for.cond
  %16 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %removed, align 8
  %cmp4 = icmp ne %struct.dw_attr_struct* %16, null
  br i1 %cmp4, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %for.end
  %17 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %removed, align 8
  call void @free_AT(%struct.dw_attr_struct* %17)
  br label %if.end.6

if.end.6:                                         ; preds = %if.then.5, %for.end
  br label %if.end.7

if.end.7:                                         ; preds = %if.end.6, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @add_byte_size_attribute(%struct.die_struct* %die, %union.tree_node* %tree_node) #0 {
entry:
  %die.addr = alloca %struct.die_struct*, align 8
  %tree_node.addr = alloca %union.tree_node*, align 8
  %size = alloca i32, align 4
  store %struct.die_struct* %die, %struct.die_struct** %die.addr, align 8
  store %union.tree_node* %tree_node, %union.tree_node** %tree_node.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %tree_node.addr, align 8
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  switch i32 %bf.clear, label %sw.default [
    i32 0, label %sw.bb
    i32 10, label %sw.bb.1
    i32 20, label %sw.bb.1
    i32 21, label %sw.bb.1
    i32 22, label %sw.bb.1
    i32 37, label %sw.bb.2
  ]

sw.bb:                                            ; preds = %entry
  store i32 0, i32* %size, align 4
  br label %sw.epilog

sw.bb.1:                                          ; preds = %entry, %entry, %entry, %entry
  %1 = load %union.tree_node*, %union.tree_node** %tree_node.addr, align 8
  %call = call i64 @int_size_in_bytes(%union.tree_node* %1)
  %conv = trunc i64 %call to i32
  store i32 %conv, i32* %size, align 4
  br label %sw.epilog

sw.bb.2:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %tree_node.addr, align 8
  %call3 = call %union.tree_node* @field_type(%union.tree_node* %2)
  %call4 = call i64 @simple_type_size_in_bits(%union.tree_node* %call3)
  %div = udiv i64 %call4, 8
  %conv5 = trunc i64 %div to i32
  store i32 %conv5, i32* %size, align 4
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 9320, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @__FUNCTION__.add_byte_size_attribute, i32 0, i32 0)) #8
  unreachable

sw.epilog:                                        ; preds = %sw.bb.2, %sw.bb.1, %sw.bb
  %3 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %4 = load i32, i32* %size, align 4
  %conv6 = zext i32 %4 to i64
  call void @add_AT_unsigned(%struct.die_struct* %3, i32 11, i64 %conv6)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @add_child_die(%struct.die_struct* %die, %struct.die_struct* %child_die) #3 {
entry:
  %die.addr = alloca %struct.die_struct*, align 8
  %child_die.addr = alloca %struct.die_struct*, align 8
  store %struct.die_struct* %die, %struct.die_struct** %die.addr, align 8
  store %struct.die_struct* %child_die, %struct.die_struct** %child_die.addr, align 8
  %0 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %cmp = icmp ne %struct.die_struct* %0, null
  br i1 %cmp, label %land.lhs.true, label %if.end.5

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.die_struct*, %struct.die_struct** %child_die.addr, align 8
  %cmp1 = icmp ne %struct.die_struct* %1, null
  br i1 %cmp1, label %if.then, label %if.end.5

if.then:                                          ; preds = %land.lhs.true
  %2 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %3 = load %struct.die_struct*, %struct.die_struct** %child_die.addr, align 8
  %cmp2 = icmp eq %struct.die_struct* %2, %3
  br i1 %cmp2, label %if.then.3, label %if.end

if.then.3:                                        ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 5026, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @__FUNCTION__.add_child_die, i32 0, i32 0)) #8
  unreachable

if.end:                                           ; preds = %if.then
  %4 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %5 = load %struct.die_struct*, %struct.die_struct** %child_die.addr, align 8
  %die_parent = getelementptr inbounds %struct.die_struct, %struct.die_struct* %5, i32 0, i32 3
  store %struct.die_struct* %4, %struct.die_struct** %die_parent, align 8
  %6 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %die_child = getelementptr inbounds %struct.die_struct, %struct.die_struct* %6, i32 0, i32 4
  %7 = load %struct.die_struct*, %struct.die_struct** %die_child, align 8
  %8 = load %struct.die_struct*, %struct.die_struct** %child_die.addr, align 8
  %die_sib = getelementptr inbounds %struct.die_struct, %struct.die_struct* %8, i32 0, i32 5
  store %struct.die_struct* %7, %struct.die_struct** %die_sib, align 8
  %9 = load %struct.die_struct*, %struct.die_struct** %child_die.addr, align 8
  %10 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %die_child4 = getelementptr inbounds %struct.die_struct, %struct.die_struct* %10, i32 0, i32 4
  store %struct.die_struct* %9, %struct.die_struct** %die_child4, align 8
  br label %if.end.5

if.end.5:                                         ; preds = %if.end, %land.lhs.true, %entry
  ret void
}

declare i32 @tree_int_cst_sgn(%union.tree_node*) #1

; Function Attrs: inlinehint nounwind uwtable
define internal void @free_AT(%struct.dw_attr_struct* %a) #3 {
entry:
  %a.addr = alloca %struct.dw_attr_struct*, align 8
  store %struct.dw_attr_struct* %a, %struct.dw_attr_struct** %a.addr, align 8
  %0 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a.addr, align 8
  %call = call i32 @AT_class(%struct.dw_attr_struct* %0)
  switch i32 %call, label %sw.default [
    i32 14, label %sw.bb
    i32 12, label %sw.bb.5
    i32 13, label %sw.bb.5
    i32 8, label %sw.bb.8
  ]

sw.bb:                                            ; preds = %entry
  %1 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a.addr, align 8
  %dw_attr_val = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %1, i32 0, i32 2
  %v = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_attr_val, i32 0, i32 1
  %val_str = bitcast %union.anon.3* %v to %struct.indirect_string_node**
  %2 = load %struct.indirect_string_node*, %struct.indirect_string_node** %val_str, align 8
  %refcount = getelementptr inbounds %struct.indirect_string_node, %struct.indirect_string_node* %2, i32 0, i32 1
  %3 = load i32, i32* %refcount, align 4
  %tobool = icmp ne i32 %3, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %sw.bb
  %4 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a.addr, align 8
  %dw_attr_val1 = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %4, i32 0, i32 2
  %v2 = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_attr_val1, i32 0, i32 1
  %val_str3 = bitcast %union.anon.3* %v2 to %struct.indirect_string_node**
  %5 = load %struct.indirect_string_node*, %struct.indirect_string_node** %val_str3, align 8
  %refcount4 = getelementptr inbounds %struct.indirect_string_node, %struct.indirect_string_node* %5, i32 0, i32 1
  %6 = load i32, i32* %refcount4, align 4
  %dec = add i32 %6, -1
  store i32 %dec, i32* %refcount4, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %sw.bb
  br label %sw.epilog

sw.bb.5:                                          ; preds = %entry, %entry
  %7 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a.addr, align 8
  %dw_attr_val6 = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %7, i32 0, i32 2
  %v7 = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_attr_val6, i32 0, i32 1
  %val_lbl_id = bitcast %union.anon.3* %v7 to i8**
  %8 = load i8*, i8** %val_lbl_id, align 8
  call void @free(i8* %8) #5
  br label %sw.epilog

sw.bb.8:                                          ; preds = %entry
  %9 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a.addr, align 8
  %dw_attr_val9 = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %9, i32 0, i32 2
  %v10 = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_attr_val9, i32 0, i32 1
  %val_float = bitcast %union.anon.3* %v10 to %struct.dw_fp_struct*
  %array = getelementptr inbounds %struct.dw_fp_struct, %struct.dw_fp_struct* %val_float, i32 0, i32 0
  %10 = load i64*, i64** %array, align 8
  %11 = bitcast i64* %10 to i8*
  call void @free(i8* %11) #5
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb.8, %sw.bb.5, %if.end
  %12 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a.addr, align 8
  %13 = bitcast %struct.dw_attr_struct* %12 to i8*
  call void @free(i8* %13) #5
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal i64 @simple_type_size_in_bits(%union.tree_node* %type) #3 {
entry:
  %retval = alloca i64, align 8
  %type.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @target_flags, align 4
  %and = and i32 %1, 33554432
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, i32 64, i32 32
  %conv = sext i32 %cond to i64
  store i64 %conv, i64* %retval
  br label %return

if.else:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type1 = bitcast %union.tree_node* %2 to %struct.tree_type*
  %size = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 2
  %3 = load %union.tree_node*, %union.tree_node** %size, align 8
  %cmp2 = icmp eq %union.tree_node* %3, null
  br i1 %cmp2, label %if.then.4, label %if.else.5

if.then.4:                                        ; preds = %if.else
  store i64 0, i64* %retval
  br label %return

if.else.5:                                        ; preds = %if.else
  %4 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type6 = bitcast %union.tree_node* %4 to %struct.tree_type*
  %size7 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type6, i32 0, i32 2
  %5 = load %union.tree_node*, %union.tree_node** %size7, align 8
  %call = call i32 @host_integerp(%union.tree_node* %5, i32 1)
  %tobool8 = icmp ne i32 %call, 0
  br i1 %tobool8, label %if.then.9, label %if.else.13

if.then.9:                                        ; preds = %if.else.5
  %6 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type10 = bitcast %union.tree_node* %6 to %struct.tree_type*
  %size11 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type10, i32 0, i32 2
  %7 = load %union.tree_node*, %union.tree_node** %size11, align 8
  %call12 = call i64 @tree_low_cst(%union.tree_node* %7, i32 1)
  store i64 %call12, i64* %retval
  br label %return

if.else.13:                                       ; preds = %if.else.5
  %8 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type14 = bitcast %union.tree_node* %8 to %struct.tree_type*
  %align = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type14, i32 0, i32 7
  %9 = load i32, i32* %align, align 4
  %conv15 = zext i32 %9 to i64
  store i64 %conv15, i64* %retval
  br label %return

return:                                           ; preds = %if.else.13, %if.then.9, %if.then.4, %if.then
  %10 = load i64, i64* %retval
  ret i64 %10
}

; Function Attrs: inlinehint nounwind uwtable
define internal %union.tree_node* @field_type(%union.tree_node* %decl) #3 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %decl.addr = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i32 0, i64 5), align 8
  store %union.tree_node* %1, %union.tree_node** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl1 = bitcast %union.tree_node* %2 to %struct.tree_decl*
  %result = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1, i32 0, i32 11
  %3 = load %union.tree_node*, %union.tree_node** %result, align 8
  store %union.tree_node* %3, %union.tree_node** %type, align 8
  %4 = load %union.tree_node*, %union.tree_node** %type, align 8
  %cmp2 = icmp eq %union.tree_node* %4, null
  br i1 %cmp2, label %if.then.3, label %if.end.6

if.then.3:                                        ; preds = %if.end
  %5 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common4 = bitcast %union.tree_node* %5 to %struct.tree_common*
  %type5 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4, i32 0, i32 1
  %6 = load %union.tree_node*, %union.tree_node** %type5, align 8
  store %union.tree_node* %6, %union.tree_node** %type, align 8
  br label %if.end.6

if.end.6:                                         ; preds = %if.then.3, %if.end
  %7 = load %union.tree_node*, %union.tree_node** %type, align 8
  store %union.tree_node* %7, %union.tree_node** %retval
  br label %return

return:                                           ; preds = %if.end.6, %if.then
  %8 = load %union.tree_node*, %union.tree_node** %retval
  ret %union.tree_node* %8
}

; Function Attrs: nounwind uwtable
define internal void @gen_member_die(%union.tree_node* %type, %struct.die_struct* %context_die) #0 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  %context_die.addr = alloca %struct.die_struct*, align 8
  %member = alloca %union.tree_node*, align 8
  %child = alloca %struct.die_struct*, align 8
  %bases = alloca %union.tree_node*, align 8
  %n_bases = alloca i32, align 4
  %i = alloca i32, align 4
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  store %struct.die_struct* %context_die, %struct.die_struct** %context_die.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type1 = bitcast %union.tree_node* %0 to %struct.tree_type*
  %binfo = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 16
  %1 = load %union.tree_node*, %union.tree_node** %binfo, align 8
  %tobool = icmp ne %union.tree_node* %1, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type2 = bitcast %union.tree_node* %2 to %struct.tree_type*
  %binfo3 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type2, i32 0, i32 16
  %3 = load %union.tree_node*, %union.tree_node** %binfo3, align 8
  %vec = bitcast %union.tree_node* %3 to %struct.tree_vec*
  %a = getelementptr inbounds %struct.tree_vec, %struct.tree_vec* %vec, i32 0, i32 2
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %a, i32 0, i64 4
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8
  %tobool4 = icmp ne %union.tree_node* %4, null
  br i1 %tobool4, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %5 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type5 = bitcast %union.tree_node* %5 to %struct.tree_type*
  %binfo6 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type5, i32 0, i32 16
  %6 = load %union.tree_node*, %union.tree_node** %binfo6, align 8
  %vec7 = bitcast %union.tree_node* %6 to %struct.tree_vec*
  %a8 = getelementptr inbounds %struct.tree_vec, %struct.tree_vec* %vec7, i32 0, i32 2
  %arrayidx9 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %a8, i32 0, i64 4
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx9, align 8
  store %union.tree_node* %7, %union.tree_node** %bases, align 8
  %8 = load %union.tree_node*, %union.tree_node** %bases, align 8
  %vec10 = bitcast %union.tree_node* %8 to %struct.tree_vec*
  %length = getelementptr inbounds %struct.tree_vec, %struct.tree_vec* %vec10, i32 0, i32 1
  %9 = load i32, i32* %length, align 4
  store i32 %9, i32* %n_bases, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %n_bases, align 4
  %cmp = icmp slt i32 %10, %11
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load i32, i32* %i, align 4
  %idxprom = sext i32 %12 to i64
  %13 = load %union.tree_node*, %union.tree_node** %bases, align 8
  %vec11 = bitcast %union.tree_node* %13 to %struct.tree_vec*
  %a12 = getelementptr inbounds %struct.tree_vec, %struct.tree_vec* %vec11, i32 0, i32 2
  %arrayidx13 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %a12, i32 0, i64 %idxprom
  %14 = load %union.tree_node*, %union.tree_node** %arrayidx13, align 8
  %15 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  call void @gen_inheritance_die(%union.tree_node* %14, %struct.die_struct* %15)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end, %land.lhs.true, %entry
  %17 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type14 = bitcast %union.tree_node* %17 to %struct.tree_type*
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type14, i32 0, i32 1
  %18 = load %union.tree_node*, %union.tree_node** %values, align 8
  store %union.tree_node* %18, %union.tree_node** %member, align 8
  br label %for.cond.15

for.cond.15:                                      ; preds = %for.inc.21, %if.end
  %19 = load %union.tree_node*, %union.tree_node** %member, align 8
  %tobool16 = icmp ne %union.tree_node* %19, null
  br i1 %tobool16, label %for.body.17, label %for.end.22

for.body.17:                                      ; preds = %for.cond.15
  %20 = load %union.tree_node*, %union.tree_node** %member, align 8
  %call = call %struct.die_struct* @lookup_decl_die(%union.tree_node* %20)
  store %struct.die_struct* %call, %struct.die_struct** %child, align 8
  %21 = load %struct.die_struct*, %struct.die_struct** %child, align 8
  %tobool18 = icmp ne %struct.die_struct* %21, null
  br i1 %tobool18, label %if.then.19, label %if.else

if.then.19:                                       ; preds = %for.body.17
  %22 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  %23 = load %struct.die_struct*, %struct.die_struct** %child, align 8
  call void @splice_child_die(%struct.die_struct* %22, %struct.die_struct* %23)
  br label %if.end.20

if.else:                                          ; preds = %for.body.17
  %24 = load %union.tree_node*, %union.tree_node** %member, align 8
  %25 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  call void @gen_decl_die(%union.tree_node* %24, %struct.die_struct* %25)
  br label %if.end.20

if.end.20:                                        ; preds = %if.else, %if.then.19
  br label %for.inc.21

for.inc.21:                                       ; preds = %if.end.20
  %26 = load %union.tree_node*, %union.tree_node** %member, align 8
  %common = bitcast %union.tree_node* %26 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 0
  %27 = load %union.tree_node*, %union.tree_node** %chain, align 8
  store %union.tree_node* %27, %union.tree_node** %member, align 8
  br label %for.cond.15

for.end.22:                                       ; preds = %for.cond.15
  %28 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type23 = bitcast %union.tree_node* %28 to %struct.tree_type*
  %maxval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type23, i32 0, i32 13
  %29 = load %union.tree_node*, %union.tree_node** %maxval, align 8
  store %union.tree_node* %29, %union.tree_node** %member, align 8
  br label %for.cond.24

for.cond.24:                                      ; preds = %for.inc.35, %for.end.22
  %30 = load %union.tree_node*, %union.tree_node** %member, align 8
  %tobool25 = icmp ne %union.tree_node* %30, null
  br i1 %tobool25, label %for.body.26, label %for.end.38

for.body.26:                                      ; preds = %for.cond.24
  %31 = load %union.tree_node*, %union.tree_node** %member, align 8
  %decl = bitcast %union.tree_node* %31 to %struct.tree_decl*
  %abstract_origin = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl, i32 0, i32 13
  %32 = load %union.tree_node*, %union.tree_node** %abstract_origin, align 8
  %tobool27 = icmp ne %union.tree_node* %32, null
  br i1 %tobool27, label %if.then.28, label %if.end.29

if.then.28:                                       ; preds = %for.body.26
  br label %for.inc.35

if.end.29:                                        ; preds = %for.body.26
  %33 = load %union.tree_node*, %union.tree_node** %member, align 8
  %call30 = call %struct.die_struct* @lookup_decl_die(%union.tree_node* %33)
  store %struct.die_struct* %call30, %struct.die_struct** %child, align 8
  %34 = load %struct.die_struct*, %struct.die_struct** %child, align 8
  %tobool31 = icmp ne %struct.die_struct* %34, null
  br i1 %tobool31, label %if.then.32, label %if.else.33

if.then.32:                                       ; preds = %if.end.29
  %35 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  %36 = load %struct.die_struct*, %struct.die_struct** %child, align 8
  call void @splice_child_die(%struct.die_struct* %35, %struct.die_struct* %36)
  br label %if.end.34

if.else.33:                                       ; preds = %if.end.29
  %37 = load %union.tree_node*, %union.tree_node** %member, align 8
  %38 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  call void @gen_decl_die(%union.tree_node* %37, %struct.die_struct* %38)
  br label %if.end.34

if.end.34:                                        ; preds = %if.else.33, %if.then.32
  br label %for.inc.35

for.inc.35:                                       ; preds = %if.end.34, %if.then.28
  %39 = load %union.tree_node*, %union.tree_node** %member, align 8
  %common36 = bitcast %union.tree_node* %39 to %struct.tree_common*
  %chain37 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common36, i32 0, i32 0
  %40 = load %union.tree_node*, %union.tree_node** %chain37, align 8
  store %union.tree_node* %40, %union.tree_node** %member, align 8
  br label %for.cond.24

for.end.38:                                       ; preds = %for.cond.24
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @gen_inheritance_die(%union.tree_node* %binfo, %struct.die_struct* %context_die) #0 {
entry:
  %binfo.addr = alloca %union.tree_node*, align 8
  %context_die.addr = alloca %struct.die_struct*, align 8
  %die = alloca %struct.die_struct*, align 8
  store %union.tree_node* %binfo, %union.tree_node** %binfo.addr, align 8
  store %struct.die_struct* %context_die, %struct.die_struct** %context_die.addr, align 8
  %0 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  %1 = load %union.tree_node*, %union.tree_node** %binfo.addr, align 8
  %call = call %struct.die_struct* @new_die(i32 28, %struct.die_struct* %0, %union.tree_node* %1)
  store %struct.die_struct* %call, %struct.die_struct** %die, align 8
  %2 = load %struct.die_struct*, %struct.die_struct** %die, align 8
  %3 = load %union.tree_node*, %union.tree_node** %binfo.addr, align 8
  %common = bitcast %union.tree_node* %3 to %struct.tree_common*
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1
  %4 = load %union.tree_node*, %union.tree_node** %type, align 8
  %5 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  call void @add_type_attribute(%struct.die_struct* %2, %union.tree_node* %4, i32 0, i32 0, %struct.die_struct* %5)
  %6 = load %struct.die_struct*, %struct.die_struct** %die, align 8
  %7 = load %union.tree_node*, %union.tree_node** %binfo.addr, align 8
  call void @add_data_member_location_attribute(%struct.die_struct* %6, %union.tree_node* %7)
  %8 = load %union.tree_node*, %union.tree_node** %binfo.addr, align 8
  %common1 = bitcast %union.tree_node* %8 to %struct.tree_common*
  %static_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1, i32 0, i32 2
  %bf.load = load i32, i32* %static_flag, align 8
  %bf.lshr = lshr i32 %bf.load, 18
  %bf.clear = and i32 %bf.lshr, 1
  %tobool = icmp ne i32 %bf.clear, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %9 = load %struct.die_struct*, %struct.die_struct** %die, align 8
  call void @add_AT_unsigned(%struct.die_struct* %9, i32 76, i64 1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %10 = load %union.tree_node*, %union.tree_node** %binfo.addr, align 8
  %common2 = bitcast %union.tree_node* %10 to %struct.tree_common*
  %public_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 2
  %bf.load3 = load i32, i32* %public_flag, align 8
  %bf.lshr4 = lshr i32 %bf.load3, 19
  %bf.clear5 = and i32 %bf.lshr4, 1
  %tobool6 = icmp ne i32 %bf.clear5, 0
  br i1 %tobool6, label %if.then.7, label %if.else

if.then.7:                                        ; preds = %if.end
  %11 = load %struct.die_struct*, %struct.die_struct** %die, align 8
  call void @add_AT_unsigned(%struct.die_struct* %11, i32 50, i64 1)
  br label %if.end.15

if.else:                                          ; preds = %if.end
  %12 = load %union.tree_node*, %union.tree_node** %binfo.addr, align 8
  %common8 = bitcast %union.tree_node* %12 to %struct.tree_common*
  %protected_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common8, i32 0, i32 2
  %bf.load9 = load i32, i32* %protected_flag, align 8
  %bf.lshr10 = lshr i32 %bf.load9, 21
  %bf.clear11 = and i32 %bf.lshr10, 1
  %tobool12 = icmp ne i32 %bf.clear11, 0
  br i1 %tobool12, label %if.then.13, label %if.end.14

if.then.13:                                       ; preds = %if.else
  %13 = load %struct.die_struct*, %struct.die_struct** %die, align 8
  call void @add_AT_unsigned(%struct.die_struct* %13, i32 50, i64 2)
  br label %if.end.14

if.end.14:                                        ; preds = %if.then.13, %if.else
  br label %if.end.15

if.end.15:                                        ; preds = %if.end.14, %if.then.7
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @splice_child_die(%struct.die_struct* %parent, %struct.die_struct* %child) #0 {
entry:
  %parent.addr = alloca %struct.die_struct*, align 8
  %child.addr = alloca %struct.die_struct*, align 8
  %p = alloca %struct.die_struct**, align 8
  %tmp = alloca %struct.die_struct*, align 8
  store %struct.die_struct* %parent, %struct.die_struct** %parent.addr, align 8
  store %struct.die_struct* %child, %struct.die_struct** %child.addr, align 8
  %0 = load %struct.die_struct*, %struct.die_struct** %child.addr, align 8
  %die_parent = getelementptr inbounds %struct.die_struct, %struct.die_struct* %0, i32 0, i32 3
  %1 = load %struct.die_struct*, %struct.die_struct** %die_parent, align 8
  %2 = load %struct.die_struct*, %struct.die_struct** %parent.addr, align 8
  %cmp = icmp ne %struct.die_struct* %1, %2
  br i1 %cmp, label %if.then, label %if.end.2

if.then:                                          ; preds = %entry
  %3 = load %struct.die_struct*, %struct.die_struct** %child.addr, align 8
  %call = call %struct.die_struct* @get_AT_ref(%struct.die_struct* %3, i32 71)
  store %struct.die_struct* %call, %struct.die_struct** %tmp, align 8
  %4 = load %struct.die_struct*, %struct.die_struct** %tmp, align 8
  %tobool = icmp ne %struct.die_struct* %4, null
  br i1 %tobool, label %if.then.1, label %if.end

if.then.1:                                        ; preds = %if.then
  %5 = load %struct.die_struct*, %struct.die_struct** %tmp, align 8
  store %struct.die_struct* %5, %struct.die_struct** %child.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.1, %if.then
  br label %if.end.2

if.end.2:                                         ; preds = %if.end, %entry
  %6 = load %struct.die_struct*, %struct.die_struct** %child.addr, align 8
  %die_parent3 = getelementptr inbounds %struct.die_struct, %struct.die_struct* %6, i32 0, i32 3
  %7 = load %struct.die_struct*, %struct.die_struct** %die_parent3, align 8
  %8 = load %struct.die_struct*, %struct.die_struct** %parent.addr, align 8
  %cmp4 = icmp ne %struct.die_struct* %7, %8
  br i1 %cmp4, label %land.lhs.true, label %if.end.9

land.lhs.true:                                    ; preds = %if.end.2
  %9 = load %struct.die_struct*, %struct.die_struct** %child.addr, align 8
  %die_parent5 = getelementptr inbounds %struct.die_struct, %struct.die_struct* %9, i32 0, i32 3
  %10 = load %struct.die_struct*, %struct.die_struct** %die_parent5, align 8
  %11 = load %struct.die_struct*, %struct.die_struct** %parent.addr, align 8
  %call6 = call %struct.die_struct* @get_AT_ref(%struct.die_struct* %11, i32 71)
  %cmp7 = icmp ne %struct.die_struct* %10, %call6
  br i1 %cmp7, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %land.lhs.true
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 5055, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__FUNCTION__.splice_child_die, i32 0, i32 0)) #8
  unreachable

if.end.9:                                         ; preds = %land.lhs.true, %if.end.2
  %12 = load %struct.die_struct*, %struct.die_struct** %child.addr, align 8
  %die_parent10 = getelementptr inbounds %struct.die_struct, %struct.die_struct* %12, i32 0, i32 3
  %13 = load %struct.die_struct*, %struct.die_struct** %die_parent10, align 8
  %die_child = getelementptr inbounds %struct.die_struct, %struct.die_struct* %13, i32 0, i32 4
  store %struct.die_struct** %die_child, %struct.die_struct*** %p, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.9
  %14 = load %struct.die_struct**, %struct.die_struct*** %p, align 8
  %15 = load %struct.die_struct*, %struct.die_struct** %14, align 8
  %tobool11 = icmp ne %struct.die_struct* %15, null
  br i1 %tobool11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %16 = load %struct.die_struct**, %struct.die_struct*** %p, align 8
  %17 = load %struct.die_struct*, %struct.die_struct** %16, align 8
  %18 = load %struct.die_struct*, %struct.die_struct** %child.addr, align 8
  %cmp12 = icmp eq %struct.die_struct* %17, %18
  br i1 %cmp12, label %if.then.13, label %if.end.14

if.then.13:                                       ; preds = %for.body
  %19 = load %struct.die_struct*, %struct.die_struct** %child.addr, align 8
  %die_sib = getelementptr inbounds %struct.die_struct, %struct.die_struct* %19, i32 0, i32 5
  %20 = load %struct.die_struct*, %struct.die_struct** %die_sib, align 8
  %21 = load %struct.die_struct**, %struct.die_struct*** %p, align 8
  store %struct.die_struct* %20, %struct.die_struct** %21, align 8
  br label %for.end

if.end.14:                                        ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.14
  %22 = load %struct.die_struct**, %struct.die_struct*** %p, align 8
  %23 = load %struct.die_struct*, %struct.die_struct** %22, align 8
  %die_sib15 = getelementptr inbounds %struct.die_struct, %struct.die_struct* %23, i32 0, i32 5
  store %struct.die_struct** %die_sib15, %struct.die_struct*** %p, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then.13, %for.cond
  %24 = load %struct.die_struct*, %struct.die_struct** %parent.addr, align 8
  %die_child16 = getelementptr inbounds %struct.die_struct, %struct.die_struct* %24, i32 0, i32 4
  %25 = load %struct.die_struct*, %struct.die_struct** %die_child16, align 8
  %26 = load %struct.die_struct*, %struct.die_struct** %child.addr, align 8
  %die_sib17 = getelementptr inbounds %struct.die_struct, %struct.die_struct* %26, i32 0, i32 5
  store %struct.die_struct* %25, %struct.die_struct** %die_sib17, align 8
  %27 = load %struct.die_struct*, %struct.die_struct** %child.addr, align 8
  %28 = load %struct.die_struct*, %struct.die_struct** %parent.addr, align 8
  %die_child18 = getelementptr inbounds %struct.die_struct, %struct.die_struct* %28, i32 0, i32 4
  store %struct.die_struct* %27, %struct.die_struct** %die_child18, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @add_data_member_location_attribute(%struct.die_struct* %die, %union.tree_node* %decl) #0 {
entry:
  %die.addr = alloca %struct.die_struct*, align 8
  %decl.addr = alloca %union.tree_node*, align 8
  %offset = alloca i64, align 8
  %loc_descr = alloca %struct.dw_loc_descr_struct*, align 8
  %tmp = alloca %struct.dw_loc_descr_struct*, align 8
  %op = alloca i32, align 4
  store %struct.die_struct* %die, %struct.die_struct** %die.addr, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  store %struct.dw_loc_descr_struct* null, %struct.dw_loc_descr_struct** %loc_descr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 3
  br i1 %cmp, label %if.then, label %if.else.20

if.then:                                          ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common1 = bitcast %union.tree_node* %1 to %struct.tree_common*
  %static_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1, i32 0, i32 2
  %bf.load2 = load i32, i32* %static_flag, align 8
  %bf.lshr = lshr i32 %bf.load2, 18
  %bf.clear3 = and i32 %bf.lshr, 1
  %tobool = icmp ne i32 %bf.clear3, 0
  br i1 %tobool, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.then
  %call = call i32 @is_cxx()
  %tobool4 = icmp ne i32 %call, 0
  br i1 %tobool4, label %if.then.5, label %if.else

if.then.5:                                        ; preds = %land.lhs.true
  %call6 = call %struct.dw_loc_descr_struct* @new_loc_descr(i32 18, i64 0, i64 0)
  store %struct.dw_loc_descr_struct* %call6, %struct.dw_loc_descr_struct** %tmp, align 8
  %2 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %tmp, align 8
  call void @add_loc_descr(%struct.dw_loc_descr_struct** %loc_descr, %struct.dw_loc_descr_struct* %2)
  %call7 = call %struct.dw_loc_descr_struct* @new_loc_descr(i32 6, i64 0, i64 0)
  store %struct.dw_loc_descr_struct* %call7, %struct.dw_loc_descr_struct** %tmp, align 8
  %3 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %tmp, align 8
  call void @add_loc_descr(%struct.dw_loc_descr_struct** %loc_descr, %struct.dw_loc_descr_struct* %3)
  %4 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %vec = bitcast %union.tree_node* %4 to %struct.tree_vec*
  %a = getelementptr inbounds %struct.tree_vec, %struct.tree_vec* %vec, i32 0, i32 2
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %a, i32 0, i64 5
  %5 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8
  %call8 = call i64 @tree_low_cst(%union.tree_node* %5, i32 0)
  store i64 %call8, i64* %offset, align 8
  %6 = load i64, i64* %offset, align 8
  %cmp9 = icmp sge i64 %6, 0
  br i1 %cmp9, label %if.then.10, label %if.end

if.then.10:                                       ; preds = %if.then.5
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 8599, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @__FUNCTION__.add_data_member_location_attribute, i32 0, i32 0)) #8
  unreachable

if.end:                                           ; preds = %if.then.5
  %7 = load i64, i64* %offset, align 8
  %sub = sub nsw i64 0, %7
  %call11 = call %struct.dw_loc_descr_struct* @int_loc_descriptor(i64 %sub)
  store %struct.dw_loc_descr_struct* %call11, %struct.dw_loc_descr_struct** %tmp, align 8
  %8 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %tmp, align 8
  call void @add_loc_descr(%struct.dw_loc_descr_struct** %loc_descr, %struct.dw_loc_descr_struct* %8)
  %call12 = call %struct.dw_loc_descr_struct* @new_loc_descr(i32 28, i64 0, i64 0)
  store %struct.dw_loc_descr_struct* %call12, %struct.dw_loc_descr_struct** %tmp, align 8
  %9 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %tmp, align 8
  call void @add_loc_descr(%struct.dw_loc_descr_struct** %loc_descr, %struct.dw_loc_descr_struct* %9)
  %call13 = call %struct.dw_loc_descr_struct* @new_loc_descr(i32 6, i64 0, i64 0)
  store %struct.dw_loc_descr_struct* %call13, %struct.dw_loc_descr_struct** %tmp, align 8
  %10 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %tmp, align 8
  call void @add_loc_descr(%struct.dw_loc_descr_struct** %loc_descr, %struct.dw_loc_descr_struct* %10)
  %call14 = call %struct.dw_loc_descr_struct* @new_loc_descr(i32 34, i64 0, i64 0)
  store %struct.dw_loc_descr_struct* %call14, %struct.dw_loc_descr_struct** %tmp, align 8
  %11 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %tmp, align 8
  call void @add_loc_descr(%struct.dw_loc_descr_struct** %loc_descr, %struct.dw_loc_descr_struct* %11)
  br label %if.end.19

if.else:                                          ; preds = %land.lhs.true, %if.then
  %12 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %vec15 = bitcast %union.tree_node* %12 to %struct.tree_vec*
  %a16 = getelementptr inbounds %struct.tree_vec, %struct.tree_vec* %vec15, i32 0, i32 2
  %arrayidx17 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %a16, i32 0, i64 1
  %13 = load %union.tree_node*, %union.tree_node** %arrayidx17, align 8
  %call18 = call i64 @tree_low_cst(%union.tree_node* %13, i32 0)
  store i64 %call18, i64* %offset, align 8
  br label %if.end.19

if.end.19:                                        ; preds = %if.else, %if.end
  br label %if.end.22

if.else.20:                                       ; preds = %entry
  %14 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %call21 = call i64 @field_byte_offset(%union.tree_node* %14)
  store i64 %call21, i64* %offset, align 8
  br label %if.end.22

if.end.22:                                        ; preds = %if.else.20, %if.end.19
  %15 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %loc_descr, align 8
  %tobool23 = icmp ne %struct.dw_loc_descr_struct* %15, null
  br i1 %tobool23, label %if.end.27, label %if.then.24

if.then.24:                                       ; preds = %if.end.22
  store i32 35, i32* %op, align 4
  %16 = load i32, i32* %op, align 4
  %17 = load i64, i64* %offset, align 8
  %call26 = call %struct.dw_loc_descr_struct* @new_loc_descr(i32 %16, i64 %17, i64 0)
  store %struct.dw_loc_descr_struct* %call26, %struct.dw_loc_descr_struct** %loc_descr, align 8
  br label %if.end.27

if.end.27:                                        ; preds = %if.then.24, %if.end.22
  %18 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %19 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %loc_descr, align 8
  call void @add_AT_loc(%struct.die_struct* %18, i32 56, %struct.dw_loc_descr_struct* %19)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @is_cxx() #3 {
entry:
  %0 = load %struct.die_struct*, %struct.die_struct** @comp_unit_die, align 8
  %call = call i32 @get_AT_unsigned(%struct.die_struct* %0, i32 19)
  %cmp = icmp eq i32 %call, 4
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: nounwind uwtable
define internal i64 @field_byte_offset(%union.tree_node* %decl) #0 {
entry:
  %retval = alloca i64, align 8
  %decl.addr = alloca %union.tree_node*, align 8
  %type_align_in_bits = alloca i32, align 4
  %decl_align_in_bits = alloca i32, align 4
  %type_size_in_bits = alloca i64, align 8
  %object_offset_in_bits = alloca i64, align 8
  %type = alloca %union.tree_node*, align 8
  %field_size_tree = alloca %union.tree_node*, align 8
  %bitpos_int = alloca i64, align 8
  %deepest_bitpos = alloca i64, align 8
  %field_size_in_bits = alloca i64, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i64 0, i64* %retval
  br label %return

if.else:                                          ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common1 = bitcast %union.tree_node* %1 to %struct.tree_common*
  %code2 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1, i32 0, i32 2
  %bf.load3 = load i32, i32* %code2, align 8
  %bf.clear4 = and i32 %bf.load3, 255
  %cmp5 = icmp ne i32 %bf.clear4, 37
  br i1 %cmp5, label %if.then.6, label %if.end

if.then.6:                                        ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 8430, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__FUNCTION__.field_byte_offset, i32 0, i32 0)) #8
  unreachable

if.end:                                           ; preds = %if.else
  br label %if.end.7

if.end.7:                                         ; preds = %if.end
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %call = call %union.tree_node* @field_type(%union.tree_node* %2)
  store %union.tree_node* %call, %union.tree_node** %type, align 8
  %3 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl8 = bitcast %union.tree_node* %3 to %struct.tree_decl*
  %size = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl8, i32 0, i32 4
  %4 = load %union.tree_node*, %union.tree_node** %size, align 8
  store %union.tree_node* %4, %union.tree_node** %field_size_tree, align 8
  %5 = load %union.tree_node*, %union.tree_node** %field_size_tree, align 8
  %tobool = icmp ne %union.tree_node* %5, null
  br i1 %tobool, label %if.end.10, label %if.then.9

if.then.9:                                        ; preds = %if.end.7
  %6 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 17), align 8
  store %union.tree_node* %6, %union.tree_node** %field_size_tree, align 8
  br label %if.end.10

if.end.10:                                        ; preds = %if.then.9, %if.end.7
  %7 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %call11 = call %union.tree_node* @bit_position(%union.tree_node* %7)
  %call12 = call i32 @host_integerp(%union.tree_node* %call11, i32 0)
  %tobool13 = icmp ne i32 %call12, 0
  br i1 %tobool13, label %if.end.15, label %if.then.14

if.then.14:                                       ; preds = %if.end.10
  store i64 0, i64* %retval
  br label %return

if.end.15:                                        ; preds = %if.end.10
  %8 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %call16 = call i64 @int_bit_position(%union.tree_node* %8)
  store i64 %call16, i64* %bitpos_int, align 8
  %9 = load %union.tree_node*, %union.tree_node** %field_size_tree, align 8
  %call17 = call i32 @host_integerp(%union.tree_node* %9, i32 1)
  %tobool18 = icmp ne i32 %call17, 0
  br i1 %tobool18, label %if.then.19, label %if.else.21

if.then.19:                                       ; preds = %if.end.15
  %10 = load %union.tree_node*, %union.tree_node** %field_size_tree, align 8
  %call20 = call i64 @tree_low_cst(%union.tree_node* %10, i32 1)
  store i64 %call20, i64* %field_size_in_bits, align 8
  br label %if.end.23

if.else.21:                                       ; preds = %if.end.15
  %11 = load i32, i32* @target_flags, align 4
  %and = and i32 %11, 33554432
  %tobool22 = icmp ne i32 %and, 0
  %cond = select i1 %tobool22, i32 64, i32 32
  %conv = sext i32 %cond to i64
  store i64 %conv, i64* %field_size_in_bits, align 8
  br label %if.end.23

if.end.23:                                        ; preds = %if.else.21, %if.then.19
  %12 = load %union.tree_node*, %union.tree_node** %type, align 8
  %call24 = call i64 @simple_type_size_in_bits(%union.tree_node* %12)
  store i64 %call24, i64* %type_size_in_bits, align 8
  %13 = load %union.tree_node*, %union.tree_node** %type, align 8
  %call25 = call i32 @simple_type_align_in_bits(%union.tree_node* %13)
  store i32 %call25, i32* %type_align_in_bits, align 4
  %14 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %call26 = call i32 @simple_field_decl_align_in_bits(%union.tree_node* %14)
  store i32 %call26, i32* %decl_align_in_bits, align 4
  %15 = load i64, i64* %bitpos_int, align 8
  %16 = load i64, i64* %field_size_in_bits, align 8
  %add = add i64 %15, %16
  store i64 %add, i64* %deepest_bitpos, align 8
  %17 = load i64, i64* %deepest_bitpos, align 8
  %18 = load i64, i64* %type_size_in_bits, align 8
  %sub = sub i64 %17, %18
  store i64 %sub, i64* %object_offset_in_bits, align 8
  %19 = load i32, i32* %type_align_in_bits, align 4
  %sub27 = sub i32 %19, 1
  %conv28 = zext i32 %sub27 to i64
  %20 = load i64, i64* %object_offset_in_bits, align 8
  %add29 = add nsw i64 %20, %conv28
  store i64 %add29, i64* %object_offset_in_bits, align 8
  %21 = load i32, i32* %type_align_in_bits, align 4
  %conv30 = zext i32 %21 to i64
  %22 = load i64, i64* %object_offset_in_bits, align 8
  %div = sdiv i64 %22, %conv30
  store i64 %div, i64* %object_offset_in_bits, align 8
  %23 = load i32, i32* %type_align_in_bits, align 4
  %conv31 = zext i32 %23 to i64
  %24 = load i64, i64* %object_offset_in_bits, align 8
  %mul = mul nsw i64 %24, %conv31
  store i64 %mul, i64* %object_offset_in_bits, align 8
  %25 = load i64, i64* %object_offset_in_bits, align 8
  %26 = load i64, i64* %bitpos_int, align 8
  %cmp32 = icmp sgt i64 %25, %26
  br i1 %cmp32, label %if.then.34, label %if.end.43

if.then.34:                                       ; preds = %if.end.23
  %27 = load i64, i64* %deepest_bitpos, align 8
  %28 = load i64, i64* %type_size_in_bits, align 8
  %sub35 = sub i64 %27, %28
  store i64 %sub35, i64* %object_offset_in_bits, align 8
  %29 = load i32, i32* %decl_align_in_bits, align 4
  %sub36 = sub i32 %29, 1
  %conv37 = zext i32 %sub36 to i64
  %30 = load i64, i64* %object_offset_in_bits, align 8
  %add38 = add nsw i64 %30, %conv37
  store i64 %add38, i64* %object_offset_in_bits, align 8
  %31 = load i32, i32* %decl_align_in_bits, align 4
  %conv39 = zext i32 %31 to i64
  %32 = load i64, i64* %object_offset_in_bits, align 8
  %div40 = sdiv i64 %32, %conv39
  store i64 %div40, i64* %object_offset_in_bits, align 8
  %33 = load i32, i32* %decl_align_in_bits, align 4
  %conv41 = zext i32 %33 to i64
  %34 = load i64, i64* %object_offset_in_bits, align 8
  %mul42 = mul nsw i64 %34, %conv41
  store i64 %mul42, i64* %object_offset_in_bits, align 8
  br label %if.end.43

if.end.43:                                        ; preds = %if.then.34, %if.end.23
  %35 = load i64, i64* %object_offset_in_bits, align 8
  %div44 = sdiv i64 %35, 8
  store i64 %div44, i64* %retval
  br label %return

return:                                           ; preds = %if.end.43, %if.then.14, %if.then
  %36 = load i64, i64* %retval
  ret i64 %36
}

declare %union.tree_node* @bit_position(%union.tree_node*) #1

declare i64 @int_bit_position(%union.tree_node*) #1

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @simple_type_align_in_bits(%union.tree_node* %type) #3 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp ne i32 %bf.clear, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type1 = bitcast %union.tree_node* %1 to %struct.tree_type*
  %align = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 7
  %2 = load i32, i32* %align, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  %3 = load i32, i32* @target_flags, align 4
  %and = and i32 %3, 33554432
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, i32 64, i32 32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond2 = phi i32 [ %2, %cond.true ], [ %cond, %cond.false ]
  ret i32 %cond2
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @simple_field_decl_align_in_bits(%union.tree_node* %field) #3 {
entry:
  %retval = alloca i32, align 4
  %field.addr = alloca %union.tree_node*, align 8
  %align = alloca i32, align 4
  store %union.tree_node* %field, %union.tree_node** %field.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %field.addr, align 8
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @target_flags, align 4
  %and = and i32 %1, 33554432
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, i32 64, i32 32
  store i32 %cond, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %field.addr, align 8
  %decl = bitcast %union.tree_node* %2 to %struct.tree_decl*
  %u1 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl, i32 0, i32 6
  %a = bitcast %union.anon* %u1 to %struct.anon.0*
  %3 = bitcast %struct.anon.0* %a to i32*
  %bf.load1 = load i32, i32* %3, align 4
  %bf.clear2 = and i32 %bf.load1, 16777215
  store i32 %bf.clear2, i32* %align, align 4
  %4 = load %union.tree_node*, %union.tree_node** %field.addr, align 8
  %5 = load i32, i32* %align, align 4
  %call = call i32 @x86_field_alignment(%union.tree_node* %4, i32 %5)
  store i32 %call, i32* %align, align 4
  %6 = load i32, i32* %align, align 4
  store i32 %6, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %7 = load i32, i32* %retval
  ret i32 %7
}

declare i32 @x86_field_alignment(%union.tree_node*, i32) #1

; Function Attrs: inlinehint nounwind uwtable
define internal %struct.die_struct* @get_AT_ref(%struct.die_struct* %die, i32 %attr_kind) #3 {
entry:
  %die.addr = alloca %struct.die_struct*, align 8
  %attr_kind.addr = alloca i32, align 4
  %a = alloca %struct.dw_attr_struct*, align 8
  store %struct.die_struct* %die, %struct.die_struct** %die.addr, align 8
  store i32 %attr_kind, i32* %attr_kind.addr, align 4
  %0 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %1 = load i32, i32* %attr_kind.addr, align 4
  %call = call %struct.dw_attr_struct* @get_AT(%struct.die_struct* %0, i32 %1)
  store %struct.dw_attr_struct* %call, %struct.dw_attr_struct** %a, align 8
  %2 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %tobool = icmp ne %struct.dw_attr_struct* %2, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %call1 = call %struct.die_struct* @AT_ref(%struct.dw_attr_struct* %3)
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.die_struct* [ %call1, %cond.true ], [ null, %cond.false ]
  ret %struct.die_struct* %cond
}

; Function Attrs: inlinehint nounwind uwtable
define internal %struct.dw_attr_struct* @get_AT(%struct.die_struct* %die, i32 %attr_kind) #3 {
entry:
  %retval = alloca %struct.dw_attr_struct*, align 8
  %die.addr = alloca %struct.die_struct*, align 8
  %attr_kind.addr = alloca i32, align 4
  %a = alloca %struct.dw_attr_struct*, align 8
  %spec = alloca %struct.die_struct*, align 8
  store %struct.die_struct* %die, %struct.die_struct** %die.addr, align 8
  store i32 %attr_kind, i32* %attr_kind.addr, align 4
  store %struct.die_struct* null, %struct.die_struct** %spec, align 8
  %0 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %cmp = icmp ne %struct.die_struct* %0, null
  br i1 %cmp, label %if.then, label %if.end.13

if.then:                                          ; preds = %entry
  %1 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %die_attr = getelementptr inbounds %struct.die_struct, %struct.die_struct* %1, i32 0, i32 2
  %2 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %die_attr, align 8
  store %struct.dw_attr_struct* %2, %struct.dw_attr_struct** %a, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %3 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %cmp1 = icmp ne %struct.dw_attr_struct* %3, null
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %dw_attr = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %4, i32 0, i32 0
  %5 = load i32, i32* %dw_attr, align 4
  %6 = load i32, i32* %attr_kind.addr, align 4
  %cmp2 = icmp eq i32 %5, %6
  br i1 %cmp2, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %for.body
  %7 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  store %struct.dw_attr_struct* %7, %struct.dw_attr_struct** %retval
  br label %return

if.else:                                          ; preds = %for.body
  %8 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %dw_attr4 = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %8, i32 0, i32 0
  %9 = load i32, i32* %dw_attr4, align 4
  %cmp5 = icmp eq i32 %9, 71
  br i1 %cmp5, label %if.then.8, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %10 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %dw_attr6 = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %10, i32 0, i32 0
  %11 = load i32, i32* %dw_attr6, align 4
  %cmp7 = icmp eq i32 %11, 49
  br i1 %cmp7, label %if.then.8, label %if.end

if.then.8:                                        ; preds = %lor.lhs.false, %if.else
  %12 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %call = call %struct.die_struct* @AT_ref(%struct.dw_attr_struct* %12)
  store %struct.die_struct* %call, %struct.die_struct** %spec, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.8, %lor.lhs.false
  br label %if.end.9

if.end.9:                                         ; preds = %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end.9
  %13 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %dw_attr_next = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %13, i32 0, i32 1
  %14 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %dw_attr_next, align 8
  store %struct.dw_attr_struct* %14, %struct.dw_attr_struct** %a, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load %struct.die_struct*, %struct.die_struct** %spec, align 8
  %tobool = icmp ne %struct.die_struct* %15, null
  br i1 %tobool, label %if.then.10, label %if.end.12

if.then.10:                                       ; preds = %for.end
  %16 = load %struct.die_struct*, %struct.die_struct** %spec, align 8
  %17 = load i32, i32* %attr_kind.addr, align 4
  %call11 = call %struct.dw_attr_struct* @get_AT(%struct.die_struct* %16, i32 %17)
  store %struct.dw_attr_struct* %call11, %struct.dw_attr_struct** %retval
  br label %return

if.end.12:                                        ; preds = %for.end
  br label %if.end.13

if.end.13:                                        ; preds = %if.end.12, %entry
  store %struct.dw_attr_struct* null, %struct.dw_attr_struct** %retval
  br label %return

return:                                           ; preds = %if.end.13, %if.then.10, %if.then.3
  %18 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %retval
  ret %struct.dw_attr_struct* %18
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @class_scope_p(%struct.die_struct* %context_die) #3 {
entry:
  %context_die.addr = alloca %struct.die_struct*, align 8
  store %struct.die_struct* %context_die, %struct.die_struct** %context_die.addr, align 8
  %0 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  %tobool = icmp ne %struct.die_struct* %0, null
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %1 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  %die_tag = getelementptr inbounds %struct.die_struct, %struct.die_struct* %1, i32 0, i32 0
  %2 = load i32, i32* %die_tag, align 4
  %cmp = icmp eq i32 %2, 19
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs
  %3 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  %die_tag1 = getelementptr inbounds %struct.die_struct, %struct.die_struct* %3, i32 0, i32 0
  %4 = load i32, i32* %die_tag1, align 4
  %cmp2 = icmp eq i32 %4, 23
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %5 = phi i1 [ true, %land.rhs ], [ %cmp2, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %entry
  %6 = phi i1 [ false, %entry ], [ %5, %lor.end ]
  %land.ext = zext i1 %6 to i32
  ret i32 %land.ext
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @local_scope_p(%struct.die_struct* %context_die) #3 {
entry:
  %retval = alloca i32, align 4
  %context_die.addr = alloca %struct.die_struct*, align 8
  store %struct.die_struct* %context_die, %struct.die_struct** %context_die.addr, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  %tobool = icmp ne %struct.die_struct* %0, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  %die_tag = getelementptr inbounds %struct.die_struct, %struct.die_struct* %1, i32 0, i32 0
  %2 = load i32, i32* %die_tag, align 4
  %cmp = icmp eq i32 %2, 29
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body
  %3 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  %die_tag1 = getelementptr inbounds %struct.die_struct, %struct.die_struct* %3, i32 0, i32 0
  %4 = load i32, i32* %die_tag1, align 4
  %cmp2 = icmp eq i32 %4, 46
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %for.body
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %5 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  %die_parent = getelementptr inbounds %struct.die_struct, %struct.die_struct* %5, i32 0, i32 3
  %6 = load %struct.die_struct*, %struct.die_struct** %die_parent, align 8
  store %struct.die_struct* %6, %struct.die_struct** %context_die.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then
  %7 = load i32, i32* %retval
  ret i32 %7
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @get_AT_flag(%struct.die_struct* %die, i32 %attr_kind) #3 {
entry:
  %die.addr = alloca %struct.die_struct*, align 8
  %attr_kind.addr = alloca i32, align 4
  %a = alloca %struct.dw_attr_struct*, align 8
  store %struct.die_struct* %die, %struct.die_struct** %die.addr, align 8
  store i32 %attr_kind, i32* %attr_kind.addr, align 4
  %0 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %1 = load i32, i32* %attr_kind.addr, align 4
  %call = call %struct.dw_attr_struct* @get_AT(%struct.die_struct* %0, i32 %1)
  store %struct.dw_attr_struct* %call, %struct.dw_attr_struct** %a, align 8
  %2 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %tobool = icmp ne %struct.dw_attr_struct* %2, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %call1 = call i32 @AT_flag(%struct.dw_attr_struct* %3)
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call1, %cond.true ], [ 0, %cond.false ]
  ret i32 %cond
}

; Function Attrs: nounwind uwtable
define internal void @remove_children(%struct.die_struct* %die) #0 {
entry:
  %die.addr = alloca %struct.die_struct*, align 8
  %child_die = alloca %struct.die_struct*, align 8
  %tmp_die = alloca %struct.die_struct*, align 8
  %a = alloca %struct.dw_attr_struct*, align 8
  %tmp_a = alloca %struct.dw_attr_struct*, align 8
  store %struct.die_struct* %die, %struct.die_struct** %die.addr, align 8
  %0 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %die_child = getelementptr inbounds %struct.die_struct, %struct.die_struct* %0, i32 0, i32 4
  %1 = load %struct.die_struct*, %struct.die_struct** %die_child, align 8
  store %struct.die_struct* %1, %struct.die_struct** %child_die, align 8
  %2 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %die_child1 = getelementptr inbounds %struct.die_struct, %struct.die_struct* %2, i32 0, i32 4
  store %struct.die_struct* null, %struct.die_struct** %die_child1, align 8
  br label %while.cond

while.cond:                                       ; preds = %for.end, %entry
  %3 = load %struct.die_struct*, %struct.die_struct** %child_die, align 8
  %cmp = icmp ne %struct.die_struct* %3, null
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load %struct.die_struct*, %struct.die_struct** %child_die, align 8
  store %struct.die_struct* %4, %struct.die_struct** %tmp_die, align 8
  %5 = load %struct.die_struct*, %struct.die_struct** %child_die, align 8
  %die_sib = getelementptr inbounds %struct.die_struct, %struct.die_struct* %5, i32 0, i32 5
  %6 = load %struct.die_struct*, %struct.die_struct** %die_sib, align 8
  store %struct.die_struct* %6, %struct.die_struct** %child_die, align 8
  %7 = load %struct.die_struct*, %struct.die_struct** %tmp_die, align 8
  %die_attr = getelementptr inbounds %struct.die_struct, %struct.die_struct* %7, i32 0, i32 2
  %8 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %die_attr, align 8
  store %struct.dw_attr_struct* %8, %struct.dw_attr_struct** %a, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.body, %while.body
  %9 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %cmp2 = icmp ne %struct.dw_attr_struct* %9, null
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %10 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  store %struct.dw_attr_struct* %10, %struct.dw_attr_struct** %tmp_a, align 8
  %11 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %dw_attr_next = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %11, i32 0, i32 1
  %12 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %dw_attr_next, align 8
  store %struct.dw_attr_struct* %12, %struct.dw_attr_struct** %a, align 8
  %13 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %tmp_a, align 8
  call void @free_AT(%struct.dw_attr_struct* %13)
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %14 = load %struct.die_struct*, %struct.die_struct** %tmp_die, align 8
  call void @free_die(%struct.die_struct* %14)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @add_pure_or_virtual_attribute(%struct.die_struct* %die, %union.tree_node* %func_decl) #3 {
entry:
  %die.addr = alloca %struct.die_struct*, align 8
  %func_decl.addr = alloca %union.tree_node*, align 8
  store %struct.die_struct* %die, %struct.die_struct** %die.addr, align 8
  store %union.tree_node* %func_decl, %union.tree_node** %func_decl.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %func_decl.addr, align 8
  %decl = bitcast %union.tree_node* %0 to %struct.tree_decl*
  %vindex = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl, i32 0, i32 22
  %1 = load %union.tree_node*, %union.tree_node** %vindex, align 8
  %tobool = icmp ne %union.tree_node* %1, null
  br i1 %tobool, label %if.then, label %if.end.13

if.then:                                          ; preds = %entry
  %2 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  call void @add_AT_unsigned(%struct.die_struct* %2, i32 76, i64 1)
  %3 = load %union.tree_node*, %union.tree_node** %func_decl.addr, align 8
  %decl1 = bitcast %union.tree_node* %3 to %struct.tree_decl*
  %vindex2 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1, i32 0, i32 22
  %4 = load %union.tree_node*, %union.tree_node** %vindex2, align 8
  %call = call i32 @host_integerp(%union.tree_node* %4, i32 0)
  %tobool3 = icmp ne i32 %call, 0
  br i1 %tobool3, label %if.then.4, label %if.end

if.then.4:                                        ; preds = %if.then
  %5 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %6 = load %union.tree_node*, %union.tree_node** %func_decl.addr, align 8
  %decl5 = bitcast %union.tree_node* %6 to %struct.tree_decl*
  %vindex6 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl5, i32 0, i32 22
  %7 = load %union.tree_node*, %union.tree_node** %vindex6, align 8
  %call7 = call i64 @tree_low_cst(%union.tree_node* %7, i32 0)
  %call8 = call %struct.dw_loc_descr_struct* @new_loc_descr(i32 16, i64 %call7, i64 0)
  call void @add_AT_loc(%struct.die_struct* %5, i32 77, %struct.dw_loc_descr_struct* %call8)
  br label %if.end

if.end:                                           ; preds = %if.then.4, %if.then
  %8 = load i32, i32* @debug_info_level, align 4
  %cmp = icmp ugt i32 %8, 1
  br i1 %cmp, label %if.then.9, label %if.end.12

if.then.9:                                        ; preds = %if.end
  %9 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %10 = load %union.tree_node*, %union.tree_node** %func_decl.addr, align 8
  %decl10 = bitcast %union.tree_node* %10 to %struct.tree_decl*
  %context = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl10, i32 0, i32 9
  %11 = load %union.tree_node*, %union.tree_node** %context, align 8
  %call11 = call %struct.die_struct* @lookup_type_die(%union.tree_node* %11)
  call void @add_AT_die_ref(%struct.die_struct* %9, i32 29, %struct.die_struct* %call11)
  br label %if.end.12

if.end.12:                                        ; preds = %if.then.9, %if.end
  br label %if.end.13

if.end.13:                                        ; preds = %if.end.12, %entry
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @add_AT_lbl_id(%struct.die_struct* %die, i32 %attr_kind, i8* %lbl_id) #3 {
entry:
  %die.addr = alloca %struct.die_struct*, align 8
  %attr_kind.addr = alloca i32, align 4
  %lbl_id.addr = alloca i8*, align 8
  %attr = alloca %struct.dw_attr_struct*, align 8
  store %struct.die_struct* %die, %struct.die_struct** %die.addr, align 8
  store i32 %attr_kind, i32* %attr_kind.addr, align 4
  store i8* %lbl_id, i8** %lbl_id.addr, align 8
  %call = call noalias i8* @xmalloc(i64 40)
  %0 = bitcast i8* %call to %struct.dw_attr_struct*
  store %struct.dw_attr_struct* %0, %struct.dw_attr_struct** %attr, align 8
  %1 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %attr, align 8
  %dw_attr_next = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %1, i32 0, i32 1
  store %struct.dw_attr_struct* null, %struct.dw_attr_struct** %dw_attr_next, align 8
  %2 = load i32, i32* %attr_kind.addr, align 4
  %3 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %attr, align 8
  %dw_attr = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %3, i32 0, i32 0
  store i32 %2, i32* %dw_attr, align 4
  %4 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %attr, align 8
  %dw_attr_val = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %4, i32 0, i32 2
  %val_class = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_attr_val, i32 0, i32 0
  store i32 12, i32* %val_class, align 4
  %5 = load i8*, i8** %lbl_id.addr, align 8
  %call1 = call noalias i8* @xstrdup(i8* %5)
  %6 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %attr, align 8
  %dw_attr_val2 = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %6, i32 0, i32 2
  %v = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_attr_val2, i32 0, i32 1
  %val_lbl_id = bitcast %union.anon.3* %v to i8**
  store i8* %call1, i8** %val_lbl_id, align 8
  %7 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %8 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %attr, align 8
  call void @add_dwarf_attr(%struct.die_struct* %7, %struct.dw_attr_struct* %8)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @add_arange(%union.tree_node* %decl, %struct.die_struct* %die) #0 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %die.addr = alloca %struct.die_struct*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  store %struct.die_struct* %die, %struct.die_struct** %die.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl1 = bitcast %union.tree_node* %0 to %struct.tree_decl*
  %section_name = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1, i32 0, i32 15
  %1 = load %union.tree_node*, %union.tree_node** %section_name, align 8
  %tobool = icmp ne %union.tree_node* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i32, i32* @arange_table_in_use, align 4
  %3 = load i32, i32* @arange_table_allocated, align 4
  %cmp = icmp eq i32 %2, %3
  br i1 %cmp, label %if.then.2, label %if.end.3

if.then.2:                                        ; preds = %if.end
  %4 = load i32, i32* @arange_table_allocated, align 4
  %add = add i32 %4, 64
  store i32 %add, i32* @arange_table_allocated, align 4
  %5 = load %struct.die_struct**, %struct.die_struct*** @arange_table, align 8
  %6 = bitcast %struct.die_struct** %5 to i8*
  %7 = load i32, i32* @arange_table_allocated, align 4
  %conv = zext i32 %7 to i64
  %mul = mul i64 %conv, 8
  %call = call i8* @xrealloc(i8* %6, i64 %mul)
  %8 = bitcast i8* %call to %struct.die_struct**
  store %struct.die_struct** %8, %struct.die_struct*** @arange_table, align 8
  br label %if.end.3

if.end.3:                                         ; preds = %if.then.2, %if.end
  %9 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %10 = load i32, i32* @arange_table_in_use, align 4
  %inc = add i32 %10, 1
  store i32 %inc, i32* @arange_table_in_use, align 4
  %idxprom = zext i32 %10 to i64
  %11 = load %struct.die_struct**, %struct.die_struct*** @arange_table, align 8
  %arrayidx = getelementptr inbounds %struct.die_struct*, %struct.die_struct** %11, i64 %idxprom
  store %struct.die_struct* %9, %struct.die_struct** %arrayidx, align 8
  br label %return

return:                                           ; preds = %if.end.3, %if.then
  ret void
}

declare %union.tree_node* @tree_last(%union.tree_node*) #1

; Function Attrs: nounwind uwtable
define internal void @decls_for_scope(%union.tree_node* %stmt, %struct.die_struct* %context_die, i32 %depth) #0 {
entry:
  %stmt.addr = alloca %union.tree_node*, align 8
  %context_die.addr = alloca %struct.die_struct*, align 8
  %depth.addr = alloca i32, align 4
  %decl = alloca %union.tree_node*, align 8
  %subblocks = alloca %union.tree_node*, align 8
  %die = alloca %struct.die_struct*, align 8
  store %union.tree_node* %stmt, %union.tree_node** %stmt.addr, align 8
  store %struct.die_struct* %context_die, %struct.die_struct** %context_die.addr, align 8
  store i32 %depth, i32* %depth.addr, align 4
  %0 = load %union.tree_node*, %union.tree_node** %stmt.addr, align 8
  %cmp = icmp eq %union.tree_node* %0, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %stmt.addr, align 8
  %common = bitcast %union.tree_node* %1 to %struct.tree_common*
  %used_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %used_flag, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 1
  %tobool = icmp ne i32 %bf.clear, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %for.end.62

if.end:                                           ; preds = %lor.lhs.false
  %2 = load %union.tree_node*, %union.tree_node** %stmt.addr, align 8
  %block = bitcast %union.tree_node* %2 to %struct.tree_block*
  %vars = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block, i32 0, i32 2
  %3 = load %union.tree_node*, %union.tree_node** %vars, align 8
  store %union.tree_node* %3, %union.tree_node** %decl, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %4 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %cmp1 = icmp ne %union.tree_node* %4, null
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %common2 = bitcast %union.tree_node* %5 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 2
  %bf.load3 = load i32, i32* %code, align 8
  %bf.clear4 = and i32 %bf.load3, 255
  %cmp5 = icmp eq i32 %bf.clear4, 30
  br i1 %cmp5, label %if.then.6, label %if.else

if.then.6:                                        ; preds = %for.body
  %6 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %call = call %struct.die_struct* @lookup_decl_die(%union.tree_node* %6)
  store %struct.die_struct* %call, %struct.die_struct** %die, align 8
  br label %if.end.45

if.else:                                          ; preds = %for.body
  %7 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %common7 = bitcast %union.tree_node* %7 to %struct.tree_common*
  %code8 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common7, i32 0, i32 2
  %bf.load9 = load i32, i32* %code8, align 8
  %bf.clear10 = and i32 %bf.load9, 255
  %cmp11 = icmp eq i32 %bf.clear10, 33
  br i1 %cmp11, label %land.lhs.true, label %if.else.43

land.lhs.true:                                    ; preds = %if.else
  %8 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl12 = bitcast %union.tree_node* %8 to %struct.tree_decl*
  %name = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl12, i32 0, i32 8
  %9 = load %union.tree_node*, %union.tree_node** %name, align 8
  %cmp13 = icmp eq %union.tree_node* %9, null
  br i1 %cmp13, label %if.then.39, label %lor.lhs.false.14

lor.lhs.false.14:                                 ; preds = %land.lhs.true
  %10 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl15 = bitcast %union.tree_node* %10 to %struct.tree_decl*
  %artificial_flag = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl15, i32 0, i32 5
  %11 = bitcast i48* %artificial_flag to i64*
  %bf.load16 = load i64, i64* %11, align 8
  %bf.lshr17 = lshr i64 %bf.load16, 22
  %bf.clear18 = and i64 %bf.lshr17, 1
  %bf.cast = trunc i64 %bf.clear18 to i32
  %tobool19 = icmp ne i32 %bf.cast, 0
  br i1 %tobool19, label %land.lhs.true.20, label %if.else.43

land.lhs.true.20:                                 ; preds = %lor.lhs.false.14
  %12 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %common21 = bitcast %union.tree_node* %12 to %struct.tree_common*
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common21, i32 0, i32 1
  %13 = load %union.tree_node*, %union.tree_node** %type, align 8
  %call22 = call i32 @is_tagged_type(%union.tree_node* %13)
  %tobool23 = icmp ne i32 %call22, 0
  br i1 %tobool23, label %land.lhs.true.24, label %if.else.43

land.lhs.true.24:                                 ; preds = %land.lhs.true.20
  %14 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %15 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %common25 = bitcast %union.tree_node* %15 to %struct.tree_common*
  %type26 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common25, i32 0, i32 1
  %16 = load %union.tree_node*, %union.tree_node** %type26, align 8
  %common27 = bitcast %union.tree_node* %16 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common27, i32 0, i32 0
  %17 = load %union.tree_node*, %union.tree_node** %chain, align 8
  %cmp28 = icmp eq %union.tree_node* %14, %17
  br i1 %cmp28, label %if.then.39, label %lor.lhs.false.29

lor.lhs.false.29:                                 ; preds = %land.lhs.true.24
  %18 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl30 = bitcast %union.tree_node* %18 to %struct.tree_decl*
  %abstract_origin = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl30, i32 0, i32 13
  %19 = load %union.tree_node*, %union.tree_node** %abstract_origin, align 8
  %cmp31 = icmp ne %union.tree_node* %19, null
  br i1 %cmp31, label %land.lhs.true.32, label %if.else.43

land.lhs.true.32:                                 ; preds = %lor.lhs.false.29
  %20 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %call33 = call %union.tree_node* @decl_ultimate_origin(%union.tree_node* %20)
  %21 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %common34 = bitcast %union.tree_node* %21 to %struct.tree_common*
  %type35 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common34, i32 0, i32 1
  %22 = load %union.tree_node*, %union.tree_node** %type35, align 8
  %common36 = bitcast %union.tree_node* %22 to %struct.tree_common*
  %chain37 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common36, i32 0, i32 0
  %23 = load %union.tree_node*, %union.tree_node** %chain37, align 8
  %cmp38 = icmp eq %union.tree_node* %call33, %23
  br i1 %cmp38, label %if.then.39, label %if.else.43

if.then.39:                                       ; preds = %land.lhs.true.32, %land.lhs.true.24, %land.lhs.true
  %24 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %common40 = bitcast %union.tree_node* %24 to %struct.tree_common*
  %type41 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common40, i32 0, i32 1
  %25 = load %union.tree_node*, %union.tree_node** %type41, align 8
  %call42 = call %struct.die_struct* @lookup_type_die(%union.tree_node* %25)
  store %struct.die_struct* %call42, %struct.die_struct** %die, align 8
  br label %if.end.44

if.else.43:                                       ; preds = %land.lhs.true.32, %lor.lhs.false.29, %land.lhs.true.20, %lor.lhs.false.14, %if.else
  store %struct.die_struct* null, %struct.die_struct** %die, align 8
  br label %if.end.44

if.end.44:                                        ; preds = %if.else.43, %if.then.39
  br label %if.end.45

if.end.45:                                        ; preds = %if.end.44, %if.then.6
  %26 = load %struct.die_struct*, %struct.die_struct** %die, align 8
  %cmp46 = icmp ne %struct.die_struct* %26, null
  br i1 %cmp46, label %land.lhs.true.47, label %if.else.50

land.lhs.true.47:                                 ; preds = %if.end.45
  %27 = load %struct.die_struct*, %struct.die_struct** %die, align 8
  %die_parent = getelementptr inbounds %struct.die_struct, %struct.die_struct* %27, i32 0, i32 3
  %28 = load %struct.die_struct*, %struct.die_struct** %die_parent, align 8
  %cmp48 = icmp eq %struct.die_struct* %28, null
  br i1 %cmp48, label %if.then.49, label %if.else.50

if.then.49:                                       ; preds = %land.lhs.true.47
  %29 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  %30 = load %struct.die_struct*, %struct.die_struct** %die, align 8
  call void @add_child_die(%struct.die_struct* %29, %struct.die_struct* %30)
  br label %if.end.51

if.else.50:                                       ; preds = %land.lhs.true.47, %if.end.45
  %31 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %32 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  call void @gen_decl_die(%union.tree_node* %31, %struct.die_struct* %32)
  br label %if.end.51

if.end.51:                                        ; preds = %if.else.50, %if.then.49
  br label %for.inc

for.inc:                                          ; preds = %if.end.51
  %33 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %common52 = bitcast %union.tree_node* %33 to %struct.tree_common*
  %chain53 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common52, i32 0, i32 0
  %34 = load %union.tree_node*, %union.tree_node** %chain53, align 8
  store %union.tree_node* %34, %union.tree_node** %decl, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %35 = load %union.tree_node*, %union.tree_node** %stmt.addr, align 8
  %block54 = bitcast %union.tree_node* %35 to %struct.tree_block*
  %subblocks55 = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block54, i32 0, i32 3
  %36 = load %union.tree_node*, %union.tree_node** %subblocks55, align 8
  store %union.tree_node* %36, %union.tree_node** %subblocks, align 8
  br label %for.cond.56

for.cond.56:                                      ; preds = %for.inc.59, %for.end
  %37 = load %union.tree_node*, %union.tree_node** %subblocks, align 8
  %cmp57 = icmp ne %union.tree_node* %37, null
  br i1 %cmp57, label %for.body.58, label %for.end.62

for.body.58:                                      ; preds = %for.cond.56
  %38 = load %union.tree_node*, %union.tree_node** %subblocks, align 8
  %39 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  %40 = load i32, i32* %depth.addr, align 4
  %add = add nsw i32 %40, 1
  call void @gen_block_die(%union.tree_node* %38, %struct.die_struct* %39, i32 %add)
  br label %for.inc.59

for.inc.59:                                       ; preds = %for.body.58
  %41 = load %union.tree_node*, %union.tree_node** %subblocks, align 8
  %common60 = bitcast %union.tree_node* %41 to %struct.tree_common*
  %chain61 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common60, i32 0, i32 0
  %42 = load %union.tree_node*, %union.tree_node** %chain61, align 8
  store %union.tree_node* %42, %union.tree_node** %subblocks, align 8
  br label %for.cond.56

for.end.62:                                       ; preds = %if.then, %for.cond.56
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @free_die(%struct.die_struct* %die) #3 {
entry:
  %die.addr = alloca %struct.die_struct*, align 8
  store %struct.die_struct* %die, %struct.die_struct** %die.addr, align 8
  %0 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  call void @remove_children(%struct.die_struct* %0)
  %1 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %2 = bitcast %struct.die_struct* %1 to i8*
  call void @free(i8* %2) #5
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @is_tagged_type(%union.tree_node* %type) #3 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  %code = alloca i32, align 4
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*
  %code1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code1, align 8
  %bf.clear = and i32 %bf.load, 255
  store i32 %bf.clear, i32* %code, align 4
  %1 = load i32, i32* %code, align 4
  %cmp = icmp eq i32 %1, 20
  br i1 %cmp, label %lor.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %code, align 4
  %cmp2 = icmp eq i32 %2, 21
  br i1 %cmp2, label %lor.end, label %lor.lhs.false.3

lor.lhs.false.3:                                  ; preds = %lor.lhs.false
  %3 = load i32, i32* %code, align 4
  %cmp4 = icmp eq i32 %3, 22
  br i1 %cmp4, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false.3
  %4 = load i32, i32* %code, align 4
  %cmp5 = icmp eq i32 %4, 10
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false.3, %lor.lhs.false, %entry
  %5 = phi i1 [ true, %lor.lhs.false.3 ], [ true, %lor.lhs.false ], [ true, %entry ], [ %cmp5, %lor.rhs ]
  %lor.ext = zext i1 %5 to i32
  ret i32 %lor.ext
}

; Function Attrs: nounwind uwtable
define internal void @gen_block_die(%union.tree_node* %stmt, %struct.die_struct* %context_die, i32 %depth) #0 {
entry:
  %stmt.addr = alloca %union.tree_node*, align 8
  %context_die.addr = alloca %struct.die_struct*, align 8
  %depth.addr = alloca i32, align 4
  %must_output_die = alloca i32, align 4
  %origin = alloca %union.tree_node*, align 8
  %decl = alloca %union.tree_node*, align 8
  %origin_code = alloca i32, align 4
  %sub = alloca %union.tree_node*, align 8
  store %union.tree_node* %stmt, %union.tree_node** %stmt.addr, align 8
  store %struct.die_struct* %context_die, %struct.die_struct** %context_die.addr, align 8
  store i32 %depth, i32* %depth.addr, align 4
  store i32 0, i32* %must_output_die, align 4
  %0 = load %union.tree_node*, %union.tree_node** %stmt.addr, align 8
  %cmp = icmp eq %union.tree_node* %0, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %stmt.addr, align 8
  %common = bitcast %union.tree_node* %1 to %struct.tree_common*
  %used_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %used_flag, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 1
  %tobool = icmp ne i32 %bf.clear, 0
  br i1 %tobool, label %lor.lhs.false.1, label %if.then

lor.lhs.false.1:                                  ; preds = %lor.lhs.false
  %2 = load %union.tree_node*, %union.tree_node** %stmt.addr, align 8
  %common2 = bitcast %union.tree_node* %2 to %struct.tree_common*
  %asm_written_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 2
  %bf.load3 = load i32, i32* %asm_written_flag, align 8
  %bf.lshr4 = lshr i32 %bf.load3, 14
  %bf.clear5 = and i32 %bf.lshr4, 1
  %tobool6 = icmp ne i32 %bf.clear5, 0
  br i1 %tobool6, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %lor.lhs.false.1
  %3 = load %union.tree_node*, %union.tree_node** %stmt.addr, align 8
  %block = bitcast %union.tree_node* %3 to %struct.tree_block*
  %abstract_flag = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block, i32 0, i32 1
  %bf.load7 = load i32, i32* %abstract_flag, align 8
  %bf.lshr8 = lshr i32 %bf.load7, 1
  %bf.clear9 = and i32 %bf.lshr8, 1
  %tobool10 = icmp ne i32 %bf.clear9, 0
  br i1 %tobool10, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true, %lor.lhs.false, %entry
  br label %if.end.69

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false.1
  %4 = load %union.tree_node*, %union.tree_node** %stmt.addr, align 8
  %block11 = bitcast %union.tree_node* %4 to %struct.tree_block*
  %fragment_origin = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block11, i32 0, i32 6
  %5 = load %union.tree_node*, %union.tree_node** %fragment_origin, align 8
  %tobool12 = icmp ne %union.tree_node* %5, null
  br i1 %tobool12, label %if.then.13, label %if.end.17

if.then.13:                                       ; preds = %if.end
  %6 = load %union.tree_node*, %union.tree_node** %stmt.addr, align 8
  %block14 = bitcast %union.tree_node* %6 to %struct.tree_block*
  %subblocks = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block14, i32 0, i32 3
  %7 = load %union.tree_node*, %union.tree_node** %subblocks, align 8
  store %union.tree_node* %7, %union.tree_node** %sub, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.13
  %8 = load %union.tree_node*, %union.tree_node** %sub, align 8
  %tobool15 = icmp ne %union.tree_node* %8, null
  br i1 %tobool15, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load %union.tree_node*, %union.tree_node** %sub, align 8
  %10 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  %11 = load i32, i32* %depth.addr, align 4
  %add = add nsw i32 %11, 1
  call void @gen_block_die(%union.tree_node* %9, %struct.die_struct* %10, i32 %add)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %12 = load %union.tree_node*, %union.tree_node** %sub, align 8
  %common16 = bitcast %union.tree_node* %12 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common16, i32 0, i32 0
  %13 = load %union.tree_node*, %union.tree_node** %chain, align 8
  store %union.tree_node* %13, %union.tree_node** %sub, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.69

if.end.17:                                        ; preds = %if.end
  %14 = load %union.tree_node*, %union.tree_node** %stmt.addr, align 8
  %call = call %union.tree_node* @block_ultimate_origin(%union.tree_node* %14)
  store %union.tree_node* %call, %union.tree_node** %origin, align 8
  %15 = load %union.tree_node*, %union.tree_node** %origin, align 8
  %cmp18 = icmp ne %union.tree_node* %15, null
  br i1 %cmp18, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.17
  %16 = load %union.tree_node*, %union.tree_node** %origin, align 8
  %common19 = bitcast %union.tree_node* %16 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common19, i32 0, i32 2
  %bf.load20 = load i32, i32* %code, align 8
  %bf.clear21 = and i32 %bf.load20, 255
  br label %cond.end

cond.false:                                       ; preds = %if.end.17
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %bf.clear21, %cond.true ], [ 0, %cond.false ]
  store i32 %cond, i32* %origin_code, align 4
  %17 = load i32, i32* %origin_code, align 4
  %cmp22 = icmp eq i32 %17, 30
  br i1 %cmp22, label %if.then.23, label %if.else

if.then.23:                                       ; preds = %cond.end
  store i32 1, i32* %must_output_die, align 4
  br label %if.end.60

if.else:                                          ; preds = %cond.end
  %18 = load %union.tree_node*, %union.tree_node** %origin, align 8
  %tobool24 = icmp ne %union.tree_node* %18, null
  br i1 %tobool24, label %cond.true.25, label %cond.false.26

cond.true.25:                                     ; preds = %if.else
  %19 = load %union.tree_node*, %union.tree_node** %origin, align 8
  br label %cond.end.27

cond.false.26:                                    ; preds = %if.else
  %20 = load %union.tree_node*, %union.tree_node** %stmt.addr, align 8
  br label %cond.end.27

cond.end.27:                                      ; preds = %cond.false.26, %cond.true.25
  %cond28 = phi %union.tree_node* [ %19, %cond.true.25 ], [ %20, %cond.false.26 ]
  %call29 = call i32 @is_body_block(%union.tree_node* %cond28)
  %tobool30 = icmp ne i32 %call29, 0
  br i1 %tobool30, label %if.end.59, label %if.then.31

if.then.31:                                       ; preds = %cond.end.27
  %21 = load i32, i32* @debug_info_level, align 4
  %cmp32 = icmp ugt i32 %21, 1
  br i1 %cmp32, label %if.then.33, label %if.else.36

if.then.33:                                       ; preds = %if.then.31
  %22 = load %union.tree_node*, %union.tree_node** %stmt.addr, align 8
  %block34 = bitcast %union.tree_node* %22 to %struct.tree_block*
  %vars = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block34, i32 0, i32 2
  %23 = load %union.tree_node*, %union.tree_node** %vars, align 8
  %cmp35 = icmp ne %union.tree_node* %23, null
  %conv = zext i1 %cmp35 to i32
  store i32 %conv, i32* %must_output_die, align 4
  br label %if.end.58

if.else.36:                                       ; preds = %if.then.31
  %24 = load %union.tree_node*, %union.tree_node** %stmt.addr, align 8
  %block37 = bitcast %union.tree_node* %24 to %struct.tree_block*
  %vars38 = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block37, i32 0, i32 2
  %25 = load %union.tree_node*, %union.tree_node** %vars38, align 8
  store %union.tree_node* %25, %union.tree_node** %decl, align 8
  br label %for.cond.39

for.cond.39:                                      ; preds = %for.inc.54, %if.else.36
  %26 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %cmp40 = icmp ne %union.tree_node* %26, null
  br i1 %cmp40, label %for.body.42, label %for.end.57

for.body.42:                                      ; preds = %for.cond.39
  %27 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %common43 = bitcast %union.tree_node* %27 to %struct.tree_common*
  %code44 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common43, i32 0, i32 2
  %bf.load45 = load i32, i32* %code44, align 8
  %bf.clear46 = and i32 %bf.load45, 255
  %cmp47 = icmp eq i32 %bf.clear46, 30
  br i1 %cmp47, label %land.lhs.true.49, label %if.end.53

land.lhs.true.49:                                 ; preds = %for.body.42
  %28 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl50 = bitcast %union.tree_node* %28 to %struct.tree_decl*
  %initial = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl50, i32 0, i32 12
  %29 = load %union.tree_node*, %union.tree_node** %initial, align 8
  %tobool51 = icmp ne %union.tree_node* %29, null
  br i1 %tobool51, label %if.then.52, label %if.end.53

if.then.52:                                       ; preds = %land.lhs.true.49
  store i32 1, i32* %must_output_die, align 4
  br label %for.end.57

if.end.53:                                        ; preds = %land.lhs.true.49, %for.body.42
  br label %for.inc.54

for.inc.54:                                       ; preds = %if.end.53
  %30 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %common55 = bitcast %union.tree_node* %30 to %struct.tree_common*
  %chain56 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common55, i32 0, i32 0
  %31 = load %union.tree_node*, %union.tree_node** %chain56, align 8
  store %union.tree_node* %31, %union.tree_node** %decl, align 8
  br label %for.cond.39

for.end.57:                                       ; preds = %if.then.52, %for.cond.39
  br label %if.end.58

if.end.58:                                        ; preds = %for.end.57, %if.then.33
  br label %if.end.59

if.end.59:                                        ; preds = %if.end.58, %cond.end.27
  br label %if.end.60

if.end.60:                                        ; preds = %if.end.59, %if.then.23
  %32 = load i32, i32* %must_output_die, align 4
  %tobool61 = icmp ne i32 %32, 0
  br i1 %tobool61, label %if.then.62, label %if.else.68

if.then.62:                                       ; preds = %if.end.60
  %33 = load i32, i32* %origin_code, align 4
  %cmp63 = icmp eq i32 %33, 30
  br i1 %cmp63, label %if.then.65, label %if.else.66

if.then.65:                                       ; preds = %if.then.62
  %34 = load %union.tree_node*, %union.tree_node** %stmt.addr, align 8
  %35 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  %36 = load i32, i32* %depth.addr, align 4
  call void @gen_inlined_subroutine_die(%union.tree_node* %34, %struct.die_struct* %35, i32 %36)
  br label %if.end.67

if.else.66:                                       ; preds = %if.then.62
  %37 = load %union.tree_node*, %union.tree_node** %stmt.addr, align 8
  %38 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  %39 = load i32, i32* %depth.addr, align 4
  call void @gen_lexical_block_die(%union.tree_node* %37, %struct.die_struct* %38, i32 %39)
  br label %if.end.67

if.end.67:                                        ; preds = %if.else.66, %if.then.65
  br label %if.end.69

if.else.68:                                       ; preds = %if.end.60
  %40 = load %union.tree_node*, %union.tree_node** %stmt.addr, align 8
  %41 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  %42 = load i32, i32* %depth.addr, align 4
  call void @decls_for_scope(%union.tree_node* %40, %struct.die_struct* %41, i32 %42)
  br label %if.end.69

if.end.69:                                        ; preds = %if.then, %for.end, %if.else.68, %if.end.67
  ret void
}

; Function Attrs: nounwind uwtable
define internal %union.tree_node* @block_ultimate_origin(%union.tree_node* %block) #0 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %block.addr = alloca %union.tree_node*, align 8
  %immediate_origin = alloca %union.tree_node*, align 8
  %ret_val = alloca %union.tree_node*, align 8
  %lookahead = alloca %union.tree_node*, align 8
  store %union.tree_node* %block, %union.tree_node** %block.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %block.addr, align 8
  %block1 = bitcast %union.tree_node* %0 to %struct.tree_block*
  %abstract_origin = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block1, i32 0, i32 5
  %1 = load %union.tree_node*, %union.tree_node** %abstract_origin, align 8
  store %union.tree_node* %1, %union.tree_node** %immediate_origin, align 8
  %2 = load %union.tree_node*, %union.tree_node** %block.addr, align 8
  %block2 = bitcast %union.tree_node* %2 to %struct.tree_block*
  %abstract_flag = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block2, i32 0, i32 1
  %bf.load = load i32, i32* %abstract_flag, align 8
  %bf.lshr = lshr i32 %bf.load, 1
  %bf.clear = and i32 %bf.lshr, 1
  %tobool = icmp ne i32 %bf.clear, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %immediate_origin, align 8
  %4 = load %union.tree_node*, %union.tree_node** %block.addr, align 8
  %cmp = icmp eq %union.tree_node* %3, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  store %union.tree_node* null, %union.tree_node** %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %5 = load %union.tree_node*, %union.tree_node** %immediate_origin, align 8
  %cmp3 = icmp eq %union.tree_node* %5, null
  br i1 %cmp3, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %if.end
  store %union.tree_node* null, %union.tree_node** %retval
  br label %return

if.else:                                          ; preds = %if.end
  %6 = load %union.tree_node*, %union.tree_node** %immediate_origin, align 8
  store %union.tree_node* %6, %union.tree_node** %lookahead, align 8
  br label %do.body

do.body:                                          ; preds = %land.end, %if.else
  %7 = load %union.tree_node*, %union.tree_node** %lookahead, align 8
  store %union.tree_node* %7, %union.tree_node** %ret_val, align 8
  %8 = load %union.tree_node*, %union.tree_node** %ret_val, align 8
  %common = bitcast %union.tree_node* %8 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load5 = load i32, i32* %code, align 8
  %bf.clear6 = and i32 %bf.load5, 255
  %cmp7 = icmp eq i32 %bf.clear6, 4
  br i1 %cmp7, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  %9 = load %union.tree_node*, %union.tree_node** %ret_val, align 8
  %block8 = bitcast %union.tree_node* %9 to %struct.tree_block*
  %abstract_origin9 = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block8, i32 0, i32 5
  %10 = load %union.tree_node*, %union.tree_node** %abstract_origin9, align 8
  br label %cond.end

cond.false:                                       ; preds = %do.body
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %10, %cond.true ], [ null, %cond.false ]
  store %union.tree_node* %cond, %union.tree_node** %lookahead, align 8
  br label %do.cond

do.cond:                                          ; preds = %cond.end
  %11 = load %union.tree_node*, %union.tree_node** %lookahead, align 8
  %cmp10 = icmp ne %union.tree_node* %11, null
  br i1 %cmp10, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %do.cond
  %12 = load %union.tree_node*, %union.tree_node** %lookahead, align 8
  %13 = load %union.tree_node*, %union.tree_node** %ret_val, align 8
  %cmp11 = icmp ne %union.tree_node* %12, %13
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.cond
  %14 = phi i1 [ false, %do.cond ], [ %cmp11, %land.rhs ]
  br i1 %14, label %do.body, label %do.end

do.end:                                           ; preds = %land.end
  %15 = load %union.tree_node*, %union.tree_node** %ret_val, align 8
  store %union.tree_node* %15, %union.tree_node** %retval
  br label %return

return:                                           ; preds = %do.end, %if.then.4, %if.then
  %16 = load %union.tree_node*, %union.tree_node** %retval
  ret %union.tree_node* %16
}

declare i32 @is_body_block(%union.tree_node*) #1

; Function Attrs: nounwind uwtable
define internal void @gen_inlined_subroutine_die(%union.tree_node* %stmt, %struct.die_struct* %context_die, i32 %depth) #0 {
entry:
  %stmt.addr = alloca %union.tree_node*, align 8
  %context_die.addr = alloca %struct.die_struct*, align 8
  %depth.addr = alloca i32, align 4
  %subr_die = alloca %struct.die_struct*, align 8
  %decl = alloca %union.tree_node*, align 8
  %label = alloca [30 x i8], align 16
  store %union.tree_node* %stmt, %union.tree_node** %stmt.addr, align 8
  store %struct.die_struct* %context_die, %struct.die_struct** %context_die.addr, align 8
  store i32 %depth, i32* %depth.addr, align 4
  %0 = load %union.tree_node*, %union.tree_node** %stmt.addr, align 8
  %block = bitcast %union.tree_node* %0 to %struct.tree_block*
  %abstract_flag = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block, i32 0, i32 1
  %bf.load = load i32, i32* %abstract_flag, align 8
  %bf.lshr = lshr i32 %bf.load, 1
  %bf.clear = and i32 %bf.lshr, 1
  %tobool = icmp ne i32 %bf.clear, 0
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  %2 = load %union.tree_node*, %union.tree_node** %stmt.addr, align 8
  %call = call %struct.die_struct* @new_die(i32 29, %struct.die_struct* %1, %union.tree_node* %2)
  store %struct.die_struct* %call, %struct.die_struct** %subr_die, align 8
  %3 = load %union.tree_node*, %union.tree_node** %stmt.addr, align 8
  %call1 = call %union.tree_node* @block_ultimate_origin(%union.tree_node* %3)
  store %union.tree_node* %call1, %union.tree_node** %decl, align 8
  %4 = load %union.tree_node*, %union.tree_node** %decl, align 8
  call void @dwarf2out_abstract_function(%union.tree_node* %4)
  %5 = load %struct.die_struct*, %struct.die_struct** %subr_die, align 8
  %6 = load %union.tree_node*, %union.tree_node** %decl, align 8
  call void @add_abstract_origin_attribute(%struct.die_struct* %5, %union.tree_node* %6)
  br label %do.body

do.body:                                          ; preds = %if.then
  %arraydecay = getelementptr inbounds [30 x i8], [30 x i8]* %label, i32 0, i32 0
  %7 = load %union.tree_node*, %union.tree_node** %stmt.addr, align 8
  %block2 = bitcast %union.tree_node* %7 to %struct.tree_block*
  %block_num = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block2, i32 0, i32 1
  %bf.load3 = load i32, i32* %block_num, align 8
  %bf.lshr4 = lshr i32 %bf.load3, 2
  %call5 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.386, i32 0, i32 0), i32 %bf.lshr4) #5
  br label %do.end

do.end:                                           ; preds = %do.body
  %8 = load %struct.die_struct*, %struct.die_struct** %subr_die, align 8
  %arraydecay6 = getelementptr inbounds [30 x i8], [30 x i8]* %label, i32 0, i32 0
  call void @add_AT_lbl_id(%struct.die_struct* %8, i32 17, i8* %arraydecay6)
  br label %do.body.7

do.body.7:                                        ; preds = %do.end
  %arraydecay8 = getelementptr inbounds [30 x i8], [30 x i8]* %label, i32 0, i32 0
  %9 = load %union.tree_node*, %union.tree_node** %stmt.addr, align 8
  %block9 = bitcast %union.tree_node* %9 to %struct.tree_block*
  %block_num10 = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block9, i32 0, i32 1
  %bf.load11 = load i32, i32* %block_num10, align 8
  %bf.lshr12 = lshr i32 %bf.load11, 2
  %call13 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.387, i32 0, i32 0), i32 %bf.lshr12) #5
  br label %do.end.14

do.end.14:                                        ; preds = %do.body.7
  %10 = load %struct.die_struct*, %struct.die_struct** %subr_die, align 8
  %arraydecay15 = getelementptr inbounds [30 x i8], [30 x i8]* %label, i32 0, i32 0
  call void @add_AT_lbl_id(%struct.die_struct* %10, i32 18, i8* %arraydecay15)
  %11 = load %union.tree_node*, %union.tree_node** %stmt.addr, align 8
  %12 = load %struct.die_struct*, %struct.die_struct** %subr_die, align 8
  %13 = load i32, i32* %depth.addr, align 4
  call void @decls_for_scope(%union.tree_node* %11, %struct.die_struct* %12, i32 %13)
  store i32 1, i32* @current_function_has_inlines, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %14 = load %union.tree_node*, %union.tree_node** %stmt.addr, align 8
  %15 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  %16 = load i32, i32* %depth.addr, align 4
  call void @gen_lexical_block_die(%union.tree_node* %14, %struct.die_struct* %15, i32 %16)
  br label %if.end

if.end:                                           ; preds = %if.else, %do.end.14
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @gen_lexical_block_die(%union.tree_node* %stmt, %struct.die_struct* %context_die, i32 %depth) #0 {
entry:
  %stmt.addr = alloca %union.tree_node*, align 8
  %context_die.addr = alloca %struct.die_struct*, align 8
  %depth.addr = alloca i32, align 4
  %stmt_die = alloca %struct.die_struct*, align 8
  %label = alloca [30 x i8], align 16
  %chain = alloca %union.tree_node*, align 8
  store %union.tree_node* %stmt, %union.tree_node** %stmt.addr, align 8
  store %struct.die_struct* %context_die, %struct.die_struct** %context_die.addr, align 8
  store i32 %depth, i32* %depth.addr, align 4
  %0 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  %1 = load %union.tree_node*, %union.tree_node** %stmt.addr, align 8
  %call = call %struct.die_struct* @new_die(i32 11, %struct.die_struct* %0, %union.tree_node* %1)
  store %struct.die_struct* %call, %struct.die_struct** %stmt_die, align 8
  %2 = load %union.tree_node*, %union.tree_node** %stmt.addr, align 8
  %block = bitcast %union.tree_node* %2 to %struct.tree_block*
  %abstract_flag = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block, i32 0, i32 1
  %bf.load = load i32, i32* %abstract_flag, align 8
  %bf.lshr = lshr i32 %bf.load, 1
  %bf.clear = and i32 %bf.lshr, 1
  %tobool = icmp ne i32 %bf.clear, 0
  br i1 %tobool, label %if.end.30, label %if.then

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %stmt.addr, align 8
  %block1 = bitcast %union.tree_node* %3 to %struct.tree_block*
  %fragment_chain = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block1, i32 0, i32 7
  %4 = load %union.tree_node*, %union.tree_node** %fragment_chain, align 8
  %tobool2 = icmp ne %union.tree_node* %4, null
  br i1 %tobool2, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %if.then
  %5 = load %struct.die_struct*, %struct.die_struct** %stmt_die, align 8
  %6 = load %union.tree_node*, %union.tree_node** %stmt.addr, align 8
  %call4 = call i32 @add_ranges(%union.tree_node* %6)
  %conv = zext i32 %call4 to i64
  call void @add_AT_range_list(%struct.die_struct* %5, i32 85, i64 %conv)
  %7 = load %union.tree_node*, %union.tree_node** %stmt.addr, align 8
  %block5 = bitcast %union.tree_node* %7 to %struct.tree_block*
  %fragment_chain6 = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block5, i32 0, i32 7
  %8 = load %union.tree_node*, %union.tree_node** %fragment_chain6, align 8
  store %union.tree_node* %8, %union.tree_node** %chain, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.then.3
  %9 = load %union.tree_node*, %union.tree_node** %chain, align 8
  %call7 = call i32 @add_ranges(%union.tree_node* %9)
  %10 = load %union.tree_node*, %union.tree_node** %chain, align 8
  %block8 = bitcast %union.tree_node* %10 to %struct.tree_block*
  %fragment_chain9 = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block8, i32 0, i32 7
  %11 = load %union.tree_node*, %union.tree_node** %fragment_chain9, align 8
  store %union.tree_node* %11, %union.tree_node** %chain, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %12 = load %union.tree_node*, %union.tree_node** %chain, align 8
  %tobool10 = icmp ne %union.tree_node* %12, null
  br i1 %tobool10, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %call11 = call i32 @add_ranges(%union.tree_node* null)
  br label %if.end

if.else:                                          ; preds = %if.then
  br label %do.body.12

do.body.12:                                       ; preds = %if.else
  %arraydecay = getelementptr inbounds [30 x i8], [30 x i8]* %label, i32 0, i32 0
  %13 = load %union.tree_node*, %union.tree_node** %stmt.addr, align 8
  %block13 = bitcast %union.tree_node* %13 to %struct.tree_block*
  %block_num = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block13, i32 0, i32 1
  %bf.load14 = load i32, i32* %block_num, align 8
  %bf.lshr15 = lshr i32 %bf.load14, 2
  %call16 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.386, i32 0, i32 0), i32 %bf.lshr15) #5
  br label %do.end.18

do.end.18:                                        ; preds = %do.body.12
  %14 = load %struct.die_struct*, %struct.die_struct** %stmt_die, align 8
  %arraydecay19 = getelementptr inbounds [30 x i8], [30 x i8]* %label, i32 0, i32 0
  call void @add_AT_lbl_id(%struct.die_struct* %14, i32 17, i8* %arraydecay19)
  br label %do.body.20

do.body.20:                                       ; preds = %do.end.18
  %arraydecay21 = getelementptr inbounds [30 x i8], [30 x i8]* %label, i32 0, i32 0
  %15 = load %union.tree_node*, %union.tree_node** %stmt.addr, align 8
  %block22 = bitcast %union.tree_node* %15 to %struct.tree_block*
  %block_num23 = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block22, i32 0, i32 1
  %bf.load24 = load i32, i32* %block_num23, align 8
  %bf.lshr25 = lshr i32 %bf.load24, 2
  %call26 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay21, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.387, i32 0, i32 0), i32 %bf.lshr25) #5
  br label %do.end.28

do.end.28:                                        ; preds = %do.body.20
  %16 = load %struct.die_struct*, %struct.die_struct** %stmt_die, align 8
  %arraydecay29 = getelementptr inbounds [30 x i8], [30 x i8]* %label, i32 0, i32 0
  call void @add_AT_lbl_id(%struct.die_struct* %16, i32 18, i8* %arraydecay29)
  br label %if.end

if.end:                                           ; preds = %do.end.28, %do.end
  br label %if.end.30

if.end.30:                                        ; preds = %if.end, %entry
  %17 = load %union.tree_node*, %union.tree_node** %stmt.addr, align 8
  %18 = load %struct.die_struct*, %struct.die_struct** %stmt_die, align 8
  %19 = load i32, i32* %depth.addr, align 4
  call void @decls_for_scope(%union.tree_node* %17, %struct.die_struct* %18, i32 %19)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @add_AT_range_list(%struct.die_struct* %die, i32 %attr_kind, i64 %offset) #0 {
entry:
  %die.addr = alloca %struct.die_struct*, align 8
  %attr_kind.addr = alloca i32, align 4
  %offset.addr = alloca i64, align 8
  %attr = alloca %struct.dw_attr_struct*, align 8
  store %struct.die_struct* %die, %struct.die_struct** %die.addr, align 8
  store i32 %attr_kind, i32* %attr_kind.addr, align 4
  store i64 %offset, i64* %offset.addr, align 8
  %call = call noalias i8* @xmalloc(i64 40)
  %0 = bitcast i8* %call to %struct.dw_attr_struct*
  store %struct.dw_attr_struct* %0, %struct.dw_attr_struct** %attr, align 8
  %1 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %attr, align 8
  %dw_attr_next = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %1, i32 0, i32 1
  store %struct.dw_attr_struct* null, %struct.dw_attr_struct** %dw_attr_next, align 8
  %2 = load i32, i32* %attr_kind.addr, align 4
  %3 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %attr, align 8
  %dw_attr = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %3, i32 0, i32 0
  store i32 %2, i32* %dw_attr, align 4
  %4 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %attr, align 8
  %dw_attr_val = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %4, i32 0, i32 2
  %val_class = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_attr_val, i32 0, i32 0
  store i32 4, i32* %val_class, align 4
  %5 = load i64, i64* %offset.addr, align 8
  %6 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %attr, align 8
  %dw_attr_val1 = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %6, i32 0, i32 2
  %v = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_attr_val1, i32 0, i32 1
  %val_offset = bitcast %union.anon.3* %v to i64*
  store i64 %5, i64* %val_offset, align 8
  %7 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %8 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %attr, align 8
  call void @add_dwarf_attr(%struct.die_struct* %7, %struct.dw_attr_struct* %8)
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @add_ranges(%union.tree_node* %block) #0 {
entry:
  %block.addr = alloca %union.tree_node*, align 8
  %in_use = alloca i32, align 4
  store %union.tree_node* %block, %union.tree_node** %block.addr, align 8
  %0 = load i32, i32* @ranges_table_in_use, align 4
  store i32 %0, i32* %in_use, align 4
  %1 = load i32, i32* %in_use, align 4
  %2 = load i32, i32* @ranges_table_allocated, align 4
  %cmp = icmp eq i32 %1, %2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i32, i32* @ranges_table_allocated, align 4
  %add = add i32 %3, 64
  store i32 %add, i32* @ranges_table_allocated, align 4
  %4 = load %struct.dw_ranges_struct*, %struct.dw_ranges_struct** @ranges_table, align 8
  %5 = bitcast %struct.dw_ranges_struct* %4 to i8*
  %6 = load i32, i32* @ranges_table_allocated, align 4
  %conv = zext i32 %6 to i64
  %mul = mul i64 %conv, 4
  %call = call i8* @xrealloc(i8* %5, i64 %mul)
  %7 = bitcast i8* %call to %struct.dw_ranges_struct*
  store %struct.dw_ranges_struct* %7, %struct.dw_ranges_struct** @ranges_table, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %8 = load %union.tree_node*, %union.tree_node** %block.addr, align 8
  %tobool = icmp ne %union.tree_node* %8, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %9 = load %union.tree_node*, %union.tree_node** %block.addr, align 8
  %block1 = bitcast %union.tree_node* %9 to %struct.tree_block*
  %block_num = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block1, i32 0, i32 1
  %bf.load = load i32, i32* %block_num, align 8
  %bf.lshr = lshr i32 %bf.load, 2
  br label %cond.end

cond.false:                                       ; preds = %if.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %bf.lshr, %cond.true ], [ 0, %cond.false ]
  %10 = load i32, i32* %in_use, align 4
  %idxprom = zext i32 %10 to i64
  %11 = load %struct.dw_ranges_struct*, %struct.dw_ranges_struct** @ranges_table, align 8
  %arrayidx = getelementptr inbounds %struct.dw_ranges_struct, %struct.dw_ranges_struct* %11, i64 %idxprom
  %block_num2 = getelementptr inbounds %struct.dw_ranges_struct, %struct.dw_ranges_struct* %arrayidx, i32 0, i32 0
  store i32 %cond, i32* %block_num2, align 4
  %12 = load i32, i32* %in_use, align 4
  %add3 = add i32 %12, 1
  store i32 %add3, i32* @ranges_table_in_use, align 4
  %13 = load i32, i32* %in_use, align 4
  %mul4 = mul i32 %13, 2
  %14 = load i32, i32* @target_flags, align 4
  %and = and i32 %14, 33554432
  %tobool5 = icmp ne i32 %and, 0
  %cond6 = select i1 %tobool5, i32 64, i32 32
  %div = sdiv i32 %cond6, 8
  %mul7 = mul i32 %mul4, %div
  ret i32 %mul7
}

; Function Attrs: nounwind uwtable
define internal void @tree_add_const_value_attribute(%struct.die_struct* %var_die, %union.tree_node* %decl) #0 {
entry:
  %var_die.addr = alloca %struct.die_struct*, align 8
  %decl.addr = alloca %union.tree_node*, align 8
  %init = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  store %struct.die_struct* %var_die, %struct.die_struct** %var_die.addr, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl1 = bitcast %union.tree_node* %0 to %struct.tree_decl*
  %initial = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1, i32 0, i32 12
  %1 = load %union.tree_node*, %union.tree_node** %initial, align 8
  store %union.tree_node* %1, %union.tree_node** %init, align 8
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common = bitcast %union.tree_node* %2 to %struct.tree_common*
  %type2 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1
  %3 = load %union.tree_node*, %union.tree_node** %type2, align 8
  store %union.tree_node* %3, %union.tree_node** %type, align 8
  %4 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common3 = bitcast %union.tree_node* %4 to %struct.tree_common*
  %readonly_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common3, i32 0, i32 2
  %bf.load = load i32, i32* %readonly_flag, align 8
  %bf.lshr = lshr i32 %bf.load, 12
  %bf.clear = and i32 %bf.lshr, 1
  %tobool = icmp ne i32 %bf.clear, 0
  br i1 %tobool, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %5 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common4 = bitcast %union.tree_node* %5 to %struct.tree_common*
  %volatile_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4, i32 0, i32 2
  %bf.load5 = load i32, i32* %volatile_flag, align 8
  %bf.lshr6 = lshr i32 %bf.load5, 11
  %bf.clear7 = and i32 %bf.lshr6, 1
  %tobool8 = icmp ne i32 %bf.clear7, 0
  br i1 %tobool8, label %if.else, label %land.lhs.true.9

land.lhs.true.9:                                  ; preds = %land.lhs.true
  %6 = load %union.tree_node*, %union.tree_node** %init, align 8
  %tobool10 = icmp ne %union.tree_node* %6, null
  br i1 %tobool10, label %land.lhs.true.11, label %if.else

land.lhs.true.11:                                 ; preds = %land.lhs.true.9
  %7 = load %union.tree_node*, %union.tree_node** %init, align 8
  %8 = load %union.tree_node*, %union.tree_node** %type, align 8
  %call = call %union.tree_node* @initializer_constant_valid_p(%union.tree_node* %7, %union.tree_node* %8)
  %9 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 14), align 8
  %cmp = icmp eq %union.tree_node* %call, %9
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true.11
  br label %if.end

if.else:                                          ; preds = %land.lhs.true.11, %land.lhs.true.9, %land.lhs.true, %entry
  br label %sw.epilog

if.end:                                           ; preds = %if.then
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common12 = bitcast %union.tree_node* %10 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common12, i32 0, i32 2
  %bf.load13 = load i32, i32* %code, align 8
  %bf.clear14 = and i32 %bf.load13, 255
  switch i32 %bf.clear14, label %sw.default [
    i32 6, label %sw.bb
  ]

sw.bb:                                            ; preds = %if.end
  %11 = load %union.tree_node*, %union.tree_node** %init, align 8
  %call15 = call i32 @host_integerp(%union.tree_node* %11, i32 0)
  %tobool16 = icmp ne i32 %call15, 0
  br i1 %tobool16, label %if.then.17, label %if.else.19

if.then.17:                                       ; preds = %sw.bb
  %12 = load %struct.die_struct*, %struct.die_struct** %var_die.addr, align 8
  %13 = load %union.tree_node*, %union.tree_node** %init, align 8
  %call18 = call i64 @tree_low_cst(%union.tree_node* %13, i32 0)
  call void @add_AT_unsigned(%struct.die_struct* %12, i32 28, i64 %call18)
  br label %if.end.23

if.else.19:                                       ; preds = %sw.bb
  %14 = load %struct.die_struct*, %struct.die_struct** %var_die.addr, align 8
  %15 = load %union.tree_node*, %union.tree_node** %init, align 8
  %int_cst = bitcast %union.tree_node* %15 to %struct.tree_int_cst*
  %int_cst20 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 2
  %high = getelementptr inbounds %struct.anon, %struct.anon* %int_cst20, i32 0, i32 1
  %16 = load i64, i64* %high, align 8
  %17 = load %union.tree_node*, %union.tree_node** %init, align 8
  %int_cst21 = bitcast %union.tree_node* %17 to %struct.tree_int_cst*
  %int_cst22 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst21, i32 0, i32 2
  %low = getelementptr inbounds %struct.anon, %struct.anon* %int_cst22, i32 0, i32 0
  %18 = load i64, i64* %low, align 8
  call void @add_AT_long_long(%struct.die_struct* %14, i32 28, i64 %16, i64 %18)
  br label %if.end.23

if.end.23:                                        ; preds = %if.else.19, %if.then.17
  br label %sw.epilog

sw.default:                                       ; preds = %if.end
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.else, %sw.default, %if.end.23
  ret void
}

declare %union.tree_node* @initializer_constant_valid_p(%union.tree_node*, %union.tree_node*) #1

declare %union.tree_node* @get_qualified_type(%union.tree_node*, i32) #1

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @is_base_type(%union.tree_node* %type) #3 {
entry:
  %retval = alloca i32, align 4
  %type.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  switch i32 %bf.clear, label %sw.default [
    i32 0, label %sw.bb
    i32 5, label %sw.bb
    i32 6, label %sw.bb
    i32 7, label %sw.bb
    i32 8, label %sw.bb
    i32 11, label %sw.bb
    i32 12, label %sw.bb
    i32 19, label %sw.bb.1
    i32 18, label %sw.bb.1
    i32 20, label %sw.bb.1
    i32 21, label %sw.bb.1
    i32 22, label %sw.bb.1
    i32 10, label %sw.bb.1
    i32 23, label %sw.bb.1
    i32 16, label %sw.bb.1
    i32 13, label %sw.bb.1
    i32 15, label %sw.bb.1
    i32 17, label %sw.bb.1
    i32 14, label %sw.bb.1
    i32 24, label %sw.bb.1
    i32 9, label %sw.bb.1
  ]

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i32 1, i32* %retval
  br label %return

sw.bb.1:                                          ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i32 0, i32* %retval
  br label %return

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 7461, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @__FUNCTION__.is_base_type, i32 0, i32 0)) #8
  unreachable

return:                                           ; preds = %sw.bb.1, %sw.bb
  %1 = load i32, i32* %retval
  ret i32 %1
}

; Function Attrs: nounwind uwtable
define internal %struct.die_struct* @base_type_die(%union.tree_node* %type) #0 {
entry:
  %retval = alloca %struct.die_struct*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %base_type_result = alloca %struct.die_struct*, align 8
  %type_name = alloca i8*, align 8
  %encoding = alloca i32, align 4
  %name = alloca %union.tree_node*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type1 = bitcast %union.tree_node* %0 to %struct.tree_type*
  %name2 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 11
  %1 = load %union.tree_node*, %union.tree_node** %name2, align 8
  store %union.tree_node* %1, %union.tree_node** %name, align 8
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common = bitcast %union.tree_node* %2 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common3 = bitcast %union.tree_node* %3 to %struct.tree_common*
  %code4 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common3, i32 0, i32 2
  %bf.load5 = load i32, i32* %code4, align 8
  %bf.clear6 = and i32 %bf.load5, 255
  %cmp7 = icmp eq i32 %bf.clear6, 5
  br i1 %cmp7, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store %struct.die_struct* null, %struct.die_struct** %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %4 = load %union.tree_node*, %union.tree_node** %name, align 8
  %tobool = icmp ne %union.tree_node* %4, null
  br i1 %tobool, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %if.end
  %5 = load %union.tree_node*, %union.tree_node** %name, align 8
  %common9 = bitcast %union.tree_node* %5 to %struct.tree_common*
  %code10 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common9, i32 0, i32 2
  %bf.load11 = load i32, i32* %code10, align 8
  %bf.clear12 = and i32 %bf.load11, 255
  %cmp13 = icmp eq i32 %bf.clear12, 33
  br i1 %cmp13, label %if.then.14, label %if.end.16

if.then.14:                                       ; preds = %if.then.8
  %6 = load %union.tree_node*, %union.tree_node** %name, align 8
  %decl = bitcast %union.tree_node* %6 to %struct.tree_decl*
  %name15 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl, i32 0, i32 8
  %7 = load %union.tree_node*, %union.tree_node** %name15, align 8
  store %union.tree_node* %7, %union.tree_node** %name, align 8
  br label %if.end.16

if.end.16:                                        ; preds = %if.then.14, %if.then.8
  %8 = load %union.tree_node*, %union.tree_node** %name, align 8
  %identifier = bitcast %union.tree_node* %8 to %struct.tree_identifier*
  %id = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1
  %str = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 1
  %9 = load i8*, i8** %str, align 8
  store i8* %9, i8** %type_name, align 8
  br label %if.end.17

if.else:                                          ; preds = %if.end
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.388, i32 0, i32 0), i8** %type_name, align 8
  br label %if.end.17

if.end.17:                                        ; preds = %if.else, %if.end.16
  %10 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common18 = bitcast %union.tree_node* %10 to %struct.tree_common*
  %code19 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common18, i32 0, i32 2
  %bf.load20 = load i32, i32* %code19, align 8
  %bf.clear21 = and i32 %bf.load20, 255
  switch i32 %bf.clear21, label %sw.default [
    i32 6, label %sw.bb
    i32 12, label %sw.bb.41
    i32 7, label %sw.bb.51
    i32 8, label %sw.bb.52
    i32 11, label %sw.bb.63
  ]

sw.bb:                                            ; preds = %if.end.17
  %11 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type22 = bitcast %union.tree_node* %11 to %struct.tree_type*
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type22, i32 0, i32 6
  %bf.load23 = load i32, i32* %precision, align 4
  %bf.clear24 = and i32 %bf.load23, 511
  %cmp25 = icmp eq i32 %bf.clear24, 8
  br i1 %cmp25, label %land.lhs.true, label %if.then.32

land.lhs.true:                                    ; preds = %sw.bb
  %12 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %13 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i32 0, i64 0), align 8
  %cmp26 = icmp eq %union.tree_node* %12, %13
  br i1 %cmp26, label %if.end.40, label %lor.lhs.false.27

lor.lhs.false.27:                                 ; preds = %land.lhs.true
  %14 = load i8*, i8** %type_name, align 8
  %call = call i32 @strcmp(i8* %14, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.389, i32 0, i32 0)) #7
  %tobool28 = icmp ne i32 %call, 0
  br i1 %tobool28, label %lor.lhs.false.29, label %if.end.40

lor.lhs.false.29:                                 ; preds = %lor.lhs.false.27
  %15 = load i8*, i8** %type_name, align 8
  %call30 = call i32 @strcmp(i8* %15, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.390, i32 0, i32 0)) #7
  %tobool31 = icmp ne i32 %call30, 0
  br i1 %tobool31, label %if.then.32, label %if.end.40

if.then.32:                                       ; preds = %lor.lhs.false.29, %sw.bb
  %16 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common33 = bitcast %union.tree_node* %16 to %struct.tree_common*
  %unsigned_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common33, i32 0, i32 2
  %bf.load34 = load i32, i32* %unsigned_flag, align 8
  %bf.lshr = lshr i32 %bf.load34, 13
  %bf.clear35 = and i32 %bf.lshr, 1
  %tobool36 = icmp ne i32 %bf.clear35, 0
  br i1 %tobool36, label %if.then.37, label %if.else.38

if.then.37:                                       ; preds = %if.then.32
  store i32 7, i32* %encoding, align 4
  br label %if.end.39

if.else.38:                                       ; preds = %if.then.32
  store i32 5, i32* %encoding, align 4
  br label %if.end.39

if.end.39:                                        ; preds = %if.else.38, %if.then.37
  br label %sw.epilog

if.end.40:                                        ; preds = %lor.lhs.false.29, %lor.lhs.false.27, %land.lhs.true
  br label %sw.bb.41

sw.bb.41:                                         ; preds = %if.end.17, %if.end.40
  %17 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common42 = bitcast %union.tree_node* %17 to %struct.tree_common*
  %unsigned_flag43 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common42, i32 0, i32 2
  %bf.load44 = load i32, i32* %unsigned_flag43, align 8
  %bf.lshr45 = lshr i32 %bf.load44, 13
  %bf.clear46 = and i32 %bf.lshr45, 1
  %tobool47 = icmp ne i32 %bf.clear46, 0
  br i1 %tobool47, label %if.then.48, label %if.else.49

if.then.48:                                       ; preds = %sw.bb.41
  store i32 8, i32* %encoding, align 4
  br label %if.end.50

if.else.49:                                       ; preds = %sw.bb.41
  store i32 6, i32* %encoding, align 4
  br label %if.end.50

if.end.50:                                        ; preds = %if.else.49, %if.then.48
  br label %sw.epilog

sw.bb.51:                                         ; preds = %if.end.17
  store i32 4, i32* %encoding, align 4
  br label %sw.epilog

sw.bb.52:                                         ; preds = %if.end.17
  %18 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common53 = bitcast %union.tree_node* %18 to %struct.tree_common*
  %type54 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common53, i32 0, i32 1
  %19 = load %union.tree_node*, %union.tree_node** %type54, align 8
  %common55 = bitcast %union.tree_node* %19 to %struct.tree_common*
  %code56 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common55, i32 0, i32 2
  %bf.load57 = load i32, i32* %code56, align 8
  %bf.clear58 = and i32 %bf.load57, 255
  %cmp59 = icmp eq i32 %bf.clear58, 7
  br i1 %cmp59, label %if.then.60, label %if.else.61

if.then.60:                                       ; preds = %sw.bb.52
  store i32 3, i32* %encoding, align 4
  br label %if.end.62

if.else.61:                                       ; preds = %sw.bb.52
  store i32 128, i32* %encoding, align 4
  br label %if.end.62

if.end.62:                                        ; preds = %if.else.61, %if.then.60
  br label %sw.epilog

sw.bb.63:                                         ; preds = %if.end.17
  store i32 2, i32* %encoding, align 4
  br label %sw.epilog

sw.default:                                       ; preds = %if.end.17
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 7381, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @__FUNCTION__.base_type_die, i32 0, i32 0)) #8
  unreachable

sw.epilog:                                        ; preds = %sw.bb.63, %if.end.62, %sw.bb.51, %if.end.50, %if.end.39
  %20 = load %struct.die_struct*, %struct.die_struct** @comp_unit_die, align 8
  %21 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %call64 = call %struct.die_struct* @new_die(i32 36, %struct.die_struct* %20, %union.tree_node* %21)
  store %struct.die_struct* %call64, %struct.die_struct** %base_type_result, align 8
  %22 = load i8* (i8*)*, i8* (i8*)** @demangle_name_func, align 8
  %tobool65 = icmp ne i8* (i8*)* %22, null
  br i1 %tobool65, label %if.then.66, label %if.end.68

if.then.66:                                       ; preds = %sw.epilog
  %23 = load i8* (i8*)*, i8* (i8*)** @demangle_name_func, align 8
  %24 = load i8*, i8** %type_name, align 8
  %call67 = call i8* %23(i8* %24)
  store i8* %call67, i8** %type_name, align 8
  br label %if.end.68

if.end.68:                                        ; preds = %if.then.66, %sw.epilog
  %25 = load %struct.die_struct*, %struct.die_struct** %base_type_result, align 8
  %26 = load i8*, i8** %type_name, align 8
  call void @add_AT_string(%struct.die_struct* %25, i32 3, i8* %26)
  %27 = load %struct.die_struct*, %struct.die_struct** %base_type_result, align 8
  %28 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %call69 = call i64 @int_size_in_bytes(%union.tree_node* %28)
  call void @add_AT_unsigned(%struct.die_struct* %27, i32 11, i64 %call69)
  %29 = load %struct.die_struct*, %struct.die_struct** %base_type_result, align 8
  %30 = load i32, i32* %encoding, align 4
  %conv = zext i32 %30 to i64
  call void @add_AT_unsigned(%struct.die_struct* %29, i32 62, i64 %conv)
  %31 = load %struct.die_struct*, %struct.die_struct** %base_type_result, align 8
  store %struct.die_struct* %31, %struct.die_struct** %retval
  br label %return

return:                                           ; preds = %if.end.68, %if.then
  %32 = load %struct.die_struct*, %struct.die_struct** %retval
  ret %struct.die_struct* %32
}

declare void @set_decl_origin_self(%union.tree_node*) #1

; Function Attrs: nounwind uwtable
define internal void @gen_tagged_type_instantiation_die(%union.tree_node* %type, %struct.die_struct* %context_die) #0 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  %context_die.addr = alloca %struct.die_struct*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  store %struct.die_struct* %context_die, %struct.die_struct** %context_die.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %cmp = icmp eq %union.tree_node* %0, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %2 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 0), align 8
  %cmp1 = icmp eq %union.tree_node* %1, %2
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %sw.epilog

if.end:                                           ; preds = %lor.lhs.false
  %3 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %4 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %call = call %union.tree_node* @type_main_variant(%union.tree_node* %4)
  %cmp2 = icmp ne %union.tree_node* %3, %call
  br i1 %cmp2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 11221, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @__FUNCTION__.gen_tagged_type_instantiation_die, i32 0, i32 0)) #8
  unreachable

if.end.4:                                         ; preds = %if.end
  %5 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common = bitcast %union.tree_node* %5 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  switch i32 %bf.clear, label %sw.default [
    i32 0, label %sw.bb
    i32 10, label %sw.bb.5
    i32 20, label %sw.bb.6
    i32 21, label %sw.bb.7
    i32 22, label %sw.bb.7
  ]

sw.bb:                                            ; preds = %if.end.4
  br label %sw.epilog

sw.bb.5:                                          ; preds = %if.end.4
  %6 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %7 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  call void @gen_inlined_enumeration_type_die(%union.tree_node* %6, %struct.die_struct* %7)
  br label %sw.epilog

sw.bb.6:                                          ; preds = %if.end.4
  %8 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %9 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  call void @gen_inlined_structure_type_die(%union.tree_node* %8, %struct.die_struct* %9)
  br label %sw.epilog

sw.bb.7:                                          ; preds = %if.end.4, %if.end.4
  %10 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %11 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  call void @gen_inlined_union_type_die(%union.tree_node* %10, %struct.die_struct* %11)
  br label %sw.epilog

sw.default:                                       ; preds = %if.end.4
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 11245, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @__FUNCTION__.gen_tagged_type_instantiation_die, i32 0, i32 0)) #8
  unreachable

sw.epilog:                                        ; preds = %if.then, %sw.bb.7, %sw.bb.6, %sw.bb.5, %sw.bb
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @is_redundant_typedef(%union.tree_node* %decl) #3 {
entry:
  %retval = alloca i32, align 4
  %decl.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl1 = bitcast %union.tree_node* %0 to %struct.tree_decl*
  %name = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1, i32 0, i32 8
  %1 = load %union.tree_node*, %union.tree_node** %name, align 8
  %cmp = icmp eq %union.tree_node* %1, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl2 = bitcast %union.tree_node* %2 to %struct.tree_decl*
  %artificial_flag = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl2, i32 0, i32 5
  %3 = bitcast i48* %artificial_flag to i64*
  %bf.load = load i64, i64* %3, align 8
  %bf.lshr = lshr i64 %bf.load, 22
  %bf.clear = and i64 %bf.lshr, 1
  %bf.cast = trunc i64 %bf.clear to i32
  %tobool = icmp ne i32 %bf.cast, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.lhs.false
  %4 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common = bitcast %union.tree_node* %4 to %struct.tree_common*
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8
  %call = call i32 @is_tagged_type(%union.tree_node* %5)
  %tobool3 = icmp ne i32 %call, 0
  br i1 %tobool3, label %land.lhs.true.4, label %if.end

land.lhs.true.4:                                  ; preds = %land.lhs.true
  %6 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %7 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common5 = bitcast %union.tree_node* %7 to %struct.tree_common*
  %type6 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5, i32 0, i32 1
  %8 = load %union.tree_node*, %union.tree_node** %type6, align 8
  %common7 = bitcast %union.tree_node* %8 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common7, i32 0, i32 0
  %9 = load %union.tree_node*, %union.tree_node** %chain, align 8
  %cmp8 = icmp eq %union.tree_node* %6, %9
  br i1 %cmp8, label %if.then, label %lor.lhs.false.9

lor.lhs.false.9:                                  ; preds = %land.lhs.true.4
  %10 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl10 = bitcast %union.tree_node* %10 to %struct.tree_decl*
  %abstract_origin = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl10, i32 0, i32 13
  %11 = load %union.tree_node*, %union.tree_node** %abstract_origin, align 8
  %cmp11 = icmp ne %union.tree_node* %11, null
  br i1 %cmp11, label %land.lhs.true.12, label %if.end

land.lhs.true.12:                                 ; preds = %lor.lhs.false.9
  %12 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %call13 = call %union.tree_node* @decl_ultimate_origin(%union.tree_node* %12)
  %13 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common14 = bitcast %union.tree_node* %13 to %struct.tree_common*
  %type15 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common14, i32 0, i32 1
  %14 = load %union.tree_node*, %union.tree_node** %type15, align 8
  %common16 = bitcast %union.tree_node* %14 to %struct.tree_common*
  %chain17 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common16, i32 0, i32 0
  %15 = load %union.tree_node*, %union.tree_node** %chain17, align 8
  %cmp18 = icmp eq %union.tree_node* %call13, %15
  br i1 %cmp18, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true.12, %land.lhs.true.4, %entry
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true.12, %lor.lhs.false.9, %land.lhs.true, %lor.lhs.false
  %16 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl19 = bitcast %union.tree_node* %16 to %struct.tree_decl*
  %artificial_flag20 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl19, i32 0, i32 5
  %17 = bitcast i48* %artificial_flag20 to i64*
  %bf.load21 = load i64, i64* %17, align 8
  %bf.lshr22 = lshr i64 %bf.load21, 22
  %bf.clear23 = and i64 %bf.lshr22, 1
  %bf.cast24 = trunc i64 %bf.clear23 to i32
  %tobool25 = icmp ne i32 %bf.cast24, 0
  br i1 %tobool25, label %land.lhs.true.26, label %if.end.54

land.lhs.true.26:                                 ; preds = %if.end
  %18 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl27 = bitcast %union.tree_node* %18 to %struct.tree_decl*
  %context = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl27, i32 0, i32 9
  %19 = load %union.tree_node*, %union.tree_node** %context, align 8
  %tobool28 = icmp ne %union.tree_node* %19, null
  br i1 %tobool28, label %land.lhs.true.29, label %if.end.54

land.lhs.true.29:                                 ; preds = %land.lhs.true.26
  %20 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl30 = bitcast %union.tree_node* %20 to %struct.tree_decl*
  %context31 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl30, i32 0, i32 9
  %21 = load %union.tree_node*, %union.tree_node** %context31, align 8
  %call32 = call i32 @is_tagged_type(%union.tree_node* %21)
  %tobool33 = icmp ne i32 %call32, 0
  br i1 %tobool33, label %land.lhs.true.34, label %if.end.54

land.lhs.true.34:                                 ; preds = %land.lhs.true.29
  %22 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl35 = bitcast %union.tree_node* %22 to %struct.tree_decl*
  %context36 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl35, i32 0, i32 9
  %23 = load %union.tree_node*, %union.tree_node** %context36, align 8
  %type37 = bitcast %union.tree_node* %23 to %struct.tree_type*
  %name38 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type37, i32 0, i32 11
  %24 = load %union.tree_node*, %union.tree_node** %name38, align 8
  %common39 = bitcast %union.tree_node* %24 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common39, i32 0, i32 2
  %bf.load40 = load i32, i32* %code, align 8
  %bf.clear41 = and i32 %bf.load40, 255
  %cmp42 = icmp eq i32 %bf.clear41, 33
  br i1 %cmp42, label %land.lhs.true.43, label %if.end.54

land.lhs.true.43:                                 ; preds = %land.lhs.true.34
  %25 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl44 = bitcast %union.tree_node* %25 to %struct.tree_decl*
  %name45 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl44, i32 0, i32 8
  %26 = load %union.tree_node*, %union.tree_node** %name45, align 8
  %27 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl46 = bitcast %union.tree_node* %27 to %struct.tree_decl*
  %context47 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl46, i32 0, i32 9
  %28 = load %union.tree_node*, %union.tree_node** %context47, align 8
  %type48 = bitcast %union.tree_node* %28 to %struct.tree_type*
  %name49 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type48, i32 0, i32 11
  %29 = load %union.tree_node*, %union.tree_node** %name49, align 8
  %decl50 = bitcast %union.tree_node* %29 to %struct.tree_decl*
  %name51 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl50, i32 0, i32 8
  %30 = load %union.tree_node*, %union.tree_node** %name51, align 8
  %cmp52 = icmp eq %union.tree_node* %26, %30
  br i1 %cmp52, label %if.then.53, label %if.end.54

if.then.53:                                       ; preds = %land.lhs.true.43
  store i32 1, i32* %retval
  br label %return

if.end.54:                                        ; preds = %land.lhs.true.43, %land.lhs.true.34, %land.lhs.true.29, %land.lhs.true.26, %if.end
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.54, %if.then.53, %if.then
  %31 = load i32, i32* %retval
  ret i32 %31
}

; Function Attrs: nounwind uwtable
define internal void @gen_typedef_die(%union.tree_node* %decl, %struct.die_struct* %context_die) #0 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %context_die.addr = alloca %struct.die_struct*, align 8
  %type_die = alloca %struct.die_struct*, align 8
  %origin = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  store %struct.die_struct* %context_die, %struct.die_struct** %context_die.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*
  %asm_written_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %asm_written_flag, align 8
  %bf.lshr = lshr i32 %bf.load, 14
  %bf.clear = and i32 %bf.lshr, 1
  %tobool = icmp ne i32 %bf.clear, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %if.end.39

if.end:                                           ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common1 = bitcast %union.tree_node* %1 to %struct.tree_common*
  %asm_written_flag2 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1, i32 0, i32 2
  %bf.load3 = load i32, i32* %asm_written_flag2, align 8
  %bf.clear4 = and i32 %bf.load3, -16385
  %bf.set = or i32 %bf.clear4, 16384
  store i32 %bf.set, i32* %asm_written_flag2, align 8
  %2 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  %3 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %call = call %struct.die_struct* @new_die(i32 22, %struct.die_struct* %2, %union.tree_node* %3)
  store %struct.die_struct* %call, %struct.die_struct** %type_die, align 8
  %4 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %call5 = call %union.tree_node* @decl_ultimate_origin(%union.tree_node* %4)
  store %union.tree_node* %call5, %union.tree_node** %origin, align 8
  %5 = load %union.tree_node*, %union.tree_node** %origin, align 8
  %cmp = icmp ne %union.tree_node* %5, null
  br i1 %cmp, label %if.then.6, label %if.else

if.then.6:                                        ; preds = %if.end
  %6 = load %struct.die_struct*, %struct.die_struct** %type_die, align 8
  %7 = load %union.tree_node*, %union.tree_node** %origin, align 8
  call void @add_abstract_origin_attribute(%struct.die_struct* %6, %union.tree_node* %7)
  br label %if.end.32

if.else:                                          ; preds = %if.end
  %8 = load %struct.die_struct*, %struct.die_struct** %type_die, align 8
  %9 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  call void @add_name_and_src_coords_attributes(%struct.die_struct* %8, %union.tree_node* %9)
  %10 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl7 = bitcast %union.tree_node* %10 to %struct.tree_decl*
  %result = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl7, i32 0, i32 11
  %11 = load %union.tree_node*, %union.tree_node** %result, align 8
  %tobool8 = icmp ne %union.tree_node* %11, null
  br i1 %tobool8, label %if.then.9, label %if.else.20

if.then.9:                                        ; preds = %if.else
  %12 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl10 = bitcast %union.tree_node* %12 to %struct.tree_decl*
  %result11 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl10, i32 0, i32 11
  %13 = load %union.tree_node*, %union.tree_node** %result11, align 8
  store %union.tree_node* %13, %union.tree_node** %type, align 8
  %14 = load %union.tree_node*, %union.tree_node** %type, align 8
  %15 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common12 = bitcast %union.tree_node* %15 to %struct.tree_common*
  %type13 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common12, i32 0, i32 1
  %16 = load %union.tree_node*, %union.tree_node** %type13, align 8
  %cmp14 = icmp eq %union.tree_node* %14, %16
  br i1 %cmp14, label %if.then.15, label %if.else.16

if.then.15:                                       ; preds = %if.then.9
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 11035, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__FUNCTION__.gen_typedef_die, i32 0, i32 0)) #8
  unreachable

if.else.16:                                       ; preds = %if.then.9
  %17 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common17 = bitcast %union.tree_node* %17 to %struct.tree_common*
  %type18 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common17, i32 0, i32 1
  %18 = load %union.tree_node*, %union.tree_node** %type18, align 8
  %19 = load %struct.die_struct*, %struct.die_struct** %type_die, align 8
  call void @equate_type_number_to_die(%union.tree_node* %18, %struct.die_struct* %19)
  br label %if.end.19

if.end.19:                                        ; preds = %if.else.16
  br label %if.end.23

if.else.20:                                       ; preds = %if.else
  %20 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common21 = bitcast %union.tree_node* %20 to %struct.tree_common*
  %type22 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common21, i32 0, i32 1
  %21 = load %union.tree_node*, %union.tree_node** %type22, align 8
  store %union.tree_node* %21, %union.tree_node** %type, align 8
  br label %if.end.23

if.end.23:                                        ; preds = %if.else.20, %if.end.19
  %22 = load %struct.die_struct*, %struct.die_struct** %type_die, align 8
  %23 = load %union.tree_node*, %union.tree_node** %type, align 8
  %24 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common24 = bitcast %union.tree_node* %24 to %struct.tree_common*
  %readonly_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common24, i32 0, i32 2
  %bf.load25 = load i32, i32* %readonly_flag, align 8
  %bf.lshr26 = lshr i32 %bf.load25, 12
  %bf.clear27 = and i32 %bf.lshr26, 1
  %25 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common28 = bitcast %union.tree_node* %25 to %struct.tree_common*
  %volatile_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common28, i32 0, i32 2
  %bf.load29 = load i32, i32* %volatile_flag, align 8
  %bf.lshr30 = lshr i32 %bf.load29, 11
  %bf.clear31 = and i32 %bf.lshr30, 1
  %26 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  call void @add_type_attribute(%struct.die_struct* %22, %union.tree_node* %23, i32 %bf.clear27, i32 %bf.clear31, %struct.die_struct* %26)
  br label %if.end.32

if.end.32:                                        ; preds = %if.end.23, %if.then.6
  %27 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl33 = bitcast %union.tree_node* %27 to %struct.tree_decl*
  %abstract_flag = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl33, i32 0, i32 5
  %28 = bitcast i48* %abstract_flag to i64*
  %bf.load34 = load i64, i64* %28, align 8
  %bf.lshr35 = lshr i64 %bf.load34, 15
  %bf.clear36 = and i64 %bf.lshr35, 1
  %bf.cast = trunc i64 %bf.clear36 to i32
  %tobool37 = icmp ne i32 %bf.cast, 0
  br i1 %tobool37, label %if.then.38, label %if.end.39

if.then.38:                                       ; preds = %if.end.32
  %29 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %30 = load %struct.die_struct*, %struct.die_struct** %type_die, align 8
  call void @equate_decl_number_to_die(%union.tree_node* %29, %struct.die_struct* %30)
  br label %if.end.39

if.end.39:                                        ; preds = %if.then, %if.then.38, %if.end.32
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @gen_label_die(%union.tree_node* %decl, %struct.die_struct* %context_die) #0 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %context_die.addr = alloca %struct.die_struct*, align 8
  %origin = alloca %union.tree_node*, align 8
  %lbl_die = alloca %struct.die_struct*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %label = alloca [30 x i8], align 16
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  store %struct.die_struct* %context_die, %struct.die_struct** %context_die.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %call = call %union.tree_node* @decl_ultimate_origin(%union.tree_node* %0)
  store %union.tree_node* %call, %union.tree_node** %origin, align 8
  %1 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %call1 = call %struct.die_struct* @new_die(i32 10, %struct.die_struct* %1, %union.tree_node* %2)
  store %struct.die_struct* %call1, %struct.die_struct** %lbl_die, align 8
  %3 = load %union.tree_node*, %union.tree_node** %origin, align 8
  %cmp = icmp ne %union.tree_node* %3, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %4 = load %struct.die_struct*, %struct.die_struct** %lbl_die, align 8
  %5 = load %union.tree_node*, %union.tree_node** %origin, align 8
  call void @add_abstract_origin_attribute(%struct.die_struct* %4, %union.tree_node* %5)
  br label %if.end

if.else:                                          ; preds = %entry
  %6 = load %struct.die_struct*, %struct.die_struct** %lbl_die, align 8
  %7 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  call void @add_name_and_src_coords_attributes(%struct.die_struct* %6, %union.tree_node* %7)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %8 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl2 = bitcast %union.tree_node* %8 to %struct.tree_decl*
  %abstract_flag = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl2, i32 0, i32 5
  %9 = bitcast i48* %abstract_flag to i64*
  %bf.load = load i64, i64* %9, align 8
  %bf.lshr = lshr i64 %bf.load, 15
  %bf.clear = and i64 %bf.lshr, 1
  %bf.cast = trunc i64 %bf.clear to i32
  %tobool = icmp ne i32 %bf.cast, 0
  br i1 %tobool, label %if.then.3, label %if.else.4

if.then.3:                                        ; preds = %if.end
  %10 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %11 = load %struct.die_struct*, %struct.die_struct** %lbl_die, align 8
  call void @equate_decl_number_to_die(%union.tree_node* %10, %struct.die_struct* %11)
  br label %if.end.31

if.else.4:                                        ; preds = %if.end
  %12 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl5 = bitcast %union.tree_node* %12 to %struct.tree_decl*
  %rtl = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl5, i32 0, i32 17
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %tobool6 = icmp ne %struct.rtx_def* %13, null
  br i1 %tobool6, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else.4
  %14 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl7 = bitcast %union.tree_node* %14 to %struct.tree_decl*
  %rtl8 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl7, i32 0, i32 17
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rtl8, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.else.4
  %16 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  call void @make_decl_rtl(%union.tree_node* %16, i8* null)
  %17 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl9 = bitcast %union.tree_node* %17 to %struct.tree_decl*
  %rtl10 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl9, i32 0, i32 17
  %18 = load %struct.rtx_def*, %struct.rtx_def** %rtl10, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %15, %cond.true ], [ %18, %cond.false ]
  store %struct.rtx_def* %cond, %struct.rtx_def** %insn, align 8
  %19 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %20 = bitcast %struct.rtx_def* %19 to i32*
  %bf.load11 = load i32, i32* %20, align 8
  %bf.clear12 = and i32 %bf.load11, 65535
  %cmp13 = icmp eq i32 %bf.clear12, 36
  br i1 %cmp13, label %if.then.18, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end
  %21 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %22 = bitcast %struct.rtx_def* %21 to i32*
  %bf.load14 = load i32, i32* %22, align 8
  %bf.clear15 = and i32 %bf.load14, 65535
  %cmp16 = icmp eq i32 %bf.clear15, 37
  br i1 %cmp16, label %land.lhs.true, label %if.end.30

land.lhs.true:                                    ; preds = %lor.lhs.false
  %23 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 4
  %rtint = bitcast %union.rtunion_def* %arrayidx to i32*
  %24 = load i32, i32* %rtint, align 4
  %cmp17 = icmp eq i32 %24, -88
  br i1 %cmp17, label %if.then.18, label %if.end.30

if.then.18:                                       ; preds = %land.lhs.true, %cond.end
  %25 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %26 = bitcast %struct.rtx_def* %25 to i32*
  %bf.load19 = load i32, i32* %26, align 8
  %bf.lshr20 = lshr i32 %bf.load19, 27
  %bf.clear21 = and i32 %bf.lshr20, 1
  %tobool22 = icmp ne i32 %bf.clear21, 0
  br i1 %tobool22, label %if.then.23, label %if.end.24

if.then.23:                                       ; preds = %if.then.18
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 10568, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @__FUNCTION__.gen_label_die, i32 0, i32 0)) #8
  unreachable

if.end.24:                                        ; preds = %if.then.18
  br label %do.body

do.body:                                          ; preds = %if.end.24
  %arraydecay = getelementptr inbounds [30 x i8], [30 x i8]* %label, i32 0, i32 0
  %27 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld25 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1
  %arrayidx26 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld25, i32 0, i64 5
  %rtint27 = bitcast %union.rtunion_def* %arrayidx26 to i32*
  %28 = load i32, i32* %rtint27, align 4
  %call28 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.391, i32 0, i32 0), i32 %28) #5
  br label %do.end

do.end:                                           ; preds = %do.body
  %29 = load %struct.die_struct*, %struct.die_struct** %lbl_die, align 8
  %arraydecay29 = getelementptr inbounds [30 x i8], [30 x i8]* %label, i32 0, i32 0
  call void @add_AT_lbl_id(%struct.die_struct* %29, i32 17, i8* %arraydecay29)
  br label %if.end.30

if.end.30:                                        ; preds = %do.end, %land.lhs.true, %lor.lhs.false
  br label %if.end.31

if.end.31:                                        ; preds = %if.end.30, %if.then.3
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal %union.tree_node* @member_declared_type(%union.tree_node* %member) #3 {
entry:
  %member.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %member, %union.tree_node** %member.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %member.addr, align 8
  %decl = bitcast %union.tree_node* %0 to %struct.tree_decl*
  %result = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl, i32 0, i32 11
  %1 = load %union.tree_node*, %union.tree_node** %result, align 8
  %tobool = icmp ne %union.tree_node* %1, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %member.addr, align 8
  %decl1 = bitcast %union.tree_node* %2 to %struct.tree_decl*
  %result2 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1, i32 0, i32 11
  %3 = load %union.tree_node*, %union.tree_node** %result2, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %member.addr, align 8
  %common = bitcast %union.tree_node* %4 to %struct.tree_common*
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %3, %cond.true ], [ %5, %cond.false ]
  ret %union.tree_node* %cond
}

; Function Attrs: nounwind uwtable
define internal void @gen_field_die(%union.tree_node* %decl, %struct.die_struct* %context_die) #0 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %context_die.addr = alloca %struct.die_struct*, align 8
  %decl_die = alloca %struct.die_struct*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  store %struct.die_struct* %context_die, %struct.die_struct** %context_die.addr, align 8
  %0 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  %1 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %call = call %struct.die_struct* @new_die(i32 13, %struct.die_struct* %0, %union.tree_node* %1)
  store %struct.die_struct* %call, %struct.die_struct** %decl_die, align 8
  %2 = load %struct.die_struct*, %struct.die_struct** %decl_die, align 8
  %3 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  call void @add_name_and_src_coords_attributes(%struct.die_struct* %2, %union.tree_node* %3)
  %4 = load %struct.die_struct*, %struct.die_struct** %decl_die, align 8
  %5 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %call1 = call %union.tree_node* @member_declared_type(%union.tree_node* %5)
  %6 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common = bitcast %union.tree_node* %6 to %struct.tree_common*
  %readonly_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %readonly_flag, align 8
  %bf.lshr = lshr i32 %bf.load, 12
  %bf.clear = and i32 %bf.lshr, 1
  %7 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common2 = bitcast %union.tree_node* %7 to %struct.tree_common*
  %volatile_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 2
  %bf.load3 = load i32, i32* %volatile_flag, align 8
  %bf.lshr4 = lshr i32 %bf.load3, 11
  %bf.clear5 = and i32 %bf.lshr4, 1
  %8 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  call void @add_type_attribute(%struct.die_struct* %4, %union.tree_node* %call1, i32 %bf.clear, i32 %bf.clear5, %struct.die_struct* %8)
  %9 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl6 = bitcast %union.tree_node* %9 to %struct.tree_decl*
  %result = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl6, i32 0, i32 11
  %10 = load %union.tree_node*, %union.tree_node** %result, align 8
  %tobool = icmp ne %union.tree_node* %10, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %11 = load %struct.die_struct*, %struct.die_struct** %decl_die, align 8
  %12 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  call void @add_byte_size_attribute(%struct.die_struct* %11, %union.tree_node* %12)
  %13 = load %struct.die_struct*, %struct.die_struct** %decl_die, align 8
  %14 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  call void @add_bit_size_attribute(%struct.die_struct* %13, %union.tree_node* %14)
  %15 = load %struct.die_struct*, %struct.die_struct** %decl_die, align 8
  %16 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  call void @add_bit_offset_attribute(%struct.die_struct* %15, %union.tree_node* %16)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %17 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl7 = bitcast %union.tree_node* %17 to %struct.tree_decl*
  %context = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl7, i32 0, i32 9
  %18 = load %union.tree_node*, %union.tree_node** %context, align 8
  %common8 = bitcast %union.tree_node* %18 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common8, i32 0, i32 2
  %bf.load9 = load i32, i32* %code, align 8
  %bf.clear10 = and i32 %bf.load9, 255
  %cmp = icmp ne i32 %bf.clear10, 21
  br i1 %cmp, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %if.end
  %19 = load %struct.die_struct*, %struct.die_struct** %decl_die, align 8
  %20 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  call void @add_data_member_location_attribute(%struct.die_struct* %19, %union.tree_node* %20)
  br label %if.end.12

if.end.12:                                        ; preds = %if.then.11, %if.end
  %21 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl13 = bitcast %union.tree_node* %21 to %struct.tree_decl*
  %artificial_flag = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl13, i32 0, i32 5
  %22 = bitcast i48* %artificial_flag to i64*
  %bf.load14 = load i64, i64* %22, align 8
  %bf.lshr15 = lshr i64 %bf.load14, 22
  %bf.clear16 = and i64 %bf.lshr15, 1
  %bf.cast = trunc i64 %bf.clear16 to i32
  %tobool17 = icmp ne i32 %bf.cast, 0
  br i1 %tobool17, label %if.then.18, label %if.end.19

if.then.18:                                       ; preds = %if.end.12
  %23 = load %struct.die_struct*, %struct.die_struct** %decl_die, align 8
  call void @add_AT_flag(%struct.die_struct* %23, i32 52, i32 1)
  br label %if.end.19

if.end.19:                                        ; preds = %if.then.18, %if.end.12
  %24 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common20 = bitcast %union.tree_node* %24 to %struct.tree_common*
  %protected_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common20, i32 0, i32 2
  %bf.load21 = load i32, i32* %protected_flag, align 8
  %bf.lshr22 = lshr i32 %bf.load21, 21
  %bf.clear23 = and i32 %bf.lshr22, 1
  %tobool24 = icmp ne i32 %bf.clear23, 0
  br i1 %tobool24, label %if.then.25, label %if.else

if.then.25:                                       ; preds = %if.end.19
  %25 = load %struct.die_struct*, %struct.die_struct** %decl_die, align 8
  call void @add_AT_unsigned(%struct.die_struct* %25, i32 50, i64 2)
  br label %if.end.33

if.else:                                          ; preds = %if.end.19
  %26 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common26 = bitcast %union.tree_node* %26 to %struct.tree_common*
  %private_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common26, i32 0, i32 2
  %bf.load27 = load i32, i32* %private_flag, align 8
  %bf.lshr28 = lshr i32 %bf.load27, 20
  %bf.clear29 = and i32 %bf.lshr28, 1
  %tobool30 = icmp ne i32 %bf.clear29, 0
  br i1 %tobool30, label %if.then.31, label %if.end.32

if.then.31:                                       ; preds = %if.else
  %27 = load %struct.die_struct*, %struct.die_struct** %decl_die, align 8
  call void @add_AT_unsigned(%struct.die_struct* %27, i32 50, i64 3)
  br label %if.end.32

if.end.32:                                        ; preds = %if.then.31, %if.else
  br label %if.end.33

if.end.33:                                        ; preds = %if.end.32, %if.then.25
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @gen_inlined_enumeration_type_die(%union.tree_node* %type, %struct.die_struct* %context_die) #0 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  %context_die.addr = alloca %struct.die_struct*, align 8
  %type_die = alloca %struct.die_struct*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  store %struct.die_struct* %context_die, %struct.die_struct** %context_die.addr, align 8
  %0 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  %1 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %call = call %struct.die_struct* @new_die(i32 4, %struct.die_struct* %0, %union.tree_node* %1)
  store %struct.die_struct* %call, %struct.die_struct** %type_die, align 8
  %2 = load %struct.die_struct*, %struct.die_struct** %type_die, align 8
  %3 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  call void @add_abstract_origin_attribute(%struct.die_struct* %2, %union.tree_node* %3)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @gen_inlined_structure_type_die(%union.tree_node* %type, %struct.die_struct* %context_die) #0 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  %context_die.addr = alloca %struct.die_struct*, align 8
  %type_die = alloca %struct.die_struct*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  store %struct.die_struct* %context_die, %struct.die_struct** %context_die.addr, align 8
  %0 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  %1 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %call = call %struct.die_struct* @new_die(i32 19, %struct.die_struct* %0, %union.tree_node* %1)
  store %struct.die_struct* %call, %struct.die_struct** %type_die, align 8
  %2 = load %struct.die_struct*, %struct.die_struct** %type_die, align 8
  %3 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  call void @add_abstract_origin_attribute(%struct.die_struct* %2, %union.tree_node* %3)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @gen_inlined_union_type_die(%union.tree_node* %type, %struct.die_struct* %context_die) #0 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  %context_die.addr = alloca %struct.die_struct*, align 8
  %type_die = alloca %struct.die_struct*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  store %struct.die_struct* %context_die, %struct.die_struct** %context_die.addr, align 8
  %0 = load %struct.die_struct*, %struct.die_struct** %context_die.addr, align 8
  %1 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %call = call %struct.die_struct* @new_die(i32 23, %struct.die_struct* %0, %union.tree_node* %1)
  store %struct.die_struct* %call, %struct.die_struct** %type_die, align 8
  %2 = load %struct.die_struct*, %struct.die_struct** %type_die, align 8
  %3 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  call void @add_abstract_origin_attribute(%struct.die_struct* %2, %union.tree_node* %3)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @add_bit_size_attribute(%struct.die_struct* %die, %union.tree_node* %decl) #3 {
entry:
  %die.addr = alloca %struct.die_struct*, align 8
  %decl.addr = alloca %union.tree_node*, align 8
  store %struct.die_struct* %die, %struct.die_struct** %die.addr, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp ne i32 %bf.clear, 37
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl1 = bitcast %union.tree_node* %1 to %struct.tree_decl*
  %result = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1, i32 0, i32 11
  %2 = load %union.tree_node*, %union.tree_node** %result, align 8
  %tobool = icmp ne %union.tree_node* %2, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 9405, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @__FUNCTION__.add_bit_size_attribute, i32 0, i32 0)) #8
  unreachable

if.end:                                           ; preds = %lor.lhs.false
  %3 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl2 = bitcast %union.tree_node* %3 to %struct.tree_decl*
  %size = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl2, i32 0, i32 4
  %4 = load %union.tree_node*, %union.tree_node** %size, align 8
  %call = call i32 @host_integerp(%union.tree_node* %4, i32 1)
  %tobool3 = icmp ne i32 %call, 0
  br i1 %tobool3, label %if.then.4, label %if.end.8

if.then.4:                                        ; preds = %if.end
  %5 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %6 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl5 = bitcast %union.tree_node* %6 to %struct.tree_decl*
  %size6 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl5, i32 0, i32 4
  %7 = load %union.tree_node*, %union.tree_node** %size6, align 8
  %call7 = call i64 @tree_low_cst(%union.tree_node* %7, i32 1)
  call void @add_AT_unsigned(%struct.die_struct* %5, i32 13, i64 %call7)
  br label %if.end.8

if.end.8:                                         ; preds = %if.then.4, %if.end
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @add_bit_offset_attribute(%struct.die_struct* %die, %union.tree_node* %decl) #3 {
entry:
  %die.addr = alloca %struct.die_struct*, align 8
  %decl.addr = alloca %union.tree_node*, align 8
  %object_offset_in_bytes = alloca i64, align 8
  %type = alloca %union.tree_node*, align 8
  %bitpos_int = alloca i64, align 8
  %highest_order_object_bit_offset = alloca i64, align 8
  %highest_order_field_bit_offset = alloca i64, align 8
  %bit_offset = alloca i64, align 8
  store %struct.die_struct* %die, %struct.die_struct** %die.addr, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %call = call i64 @field_byte_offset(%union.tree_node* %0)
  store i64 %call, i64* %object_offset_in_bytes, align 8
  %1 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl1 = bitcast %union.tree_node* %1 to %struct.tree_decl*
  %result = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1, i32 0, i32 11
  %2 = load %union.tree_node*, %union.tree_node** %result, align 8
  store %union.tree_node* %2, %union.tree_node** %type, align 8
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8
  %tobool = icmp ne %union.tree_node* %3, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common = bitcast %union.tree_node* %4 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp ne i32 %bf.clear, 37
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 9361, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @__FUNCTION__.add_bit_offset_attribute, i32 0, i32 0)) #8
  unreachable

if.end:                                           ; preds = %lor.lhs.false
  %5 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %call2 = call %union.tree_node* @bit_position(%union.tree_node* %5)
  %call3 = call i32 @host_integerp(%union.tree_node* %call2, i32 0)
  %tobool4 = icmp ne i32 %call3, 0
  br i1 %tobool4, label %lor.lhs.false.5, label %if.then.9

lor.lhs.false.5:                                  ; preds = %if.end
  %6 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl6 = bitcast %union.tree_node* %6 to %struct.tree_decl*
  %size = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl6, i32 0, i32 4
  %7 = load %union.tree_node*, %union.tree_node** %size, align 8
  %call7 = call i32 @host_integerp(%union.tree_node* %7, i32 1)
  %tobool8 = icmp ne i32 %call7, 0
  br i1 %tobool8, label %if.end.10, label %if.then.9

if.then.9:                                        ; preds = %lor.lhs.false.5, %if.end
  br label %return

if.end.10:                                        ; preds = %lor.lhs.false.5
  %8 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %call11 = call i64 @int_bit_position(%union.tree_node* %8)
  store i64 %call11, i64* %bitpos_int, align 8
  %9 = load i64, i64* %object_offset_in_bytes, align 8
  %mul = mul nsw i64 %9, 8
  store i64 %mul, i64* %highest_order_object_bit_offset, align 8
  %10 = load i64, i64* %bitpos_int, align 8
  store i64 %10, i64* %highest_order_field_bit_offset, align 8
  %11 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl12 = bitcast %union.tree_node* %11 to %struct.tree_decl*
  %size13 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl12, i32 0, i32 4
  %12 = load %union.tree_node*, %union.tree_node** %size13, align 8
  %call14 = call i64 @tree_low_cst(%union.tree_node* %12, i32 0)
  %13 = load i64, i64* %highest_order_field_bit_offset, align 8
  %add = add nsw i64 %13, %call14
  store i64 %add, i64* %highest_order_field_bit_offset, align 8
  %14 = load %union.tree_node*, %union.tree_node** %type, align 8
  %call15 = call i64 @simple_type_size_in_bits(%union.tree_node* %14)
  %15 = load i64, i64* %highest_order_object_bit_offset, align 8
  %add16 = add i64 %15, %call15
  store i64 %add16, i64* %highest_order_object_bit_offset, align 8
  %16 = load i64, i64* %highest_order_object_bit_offset, align 8
  %17 = load i64, i64* %highest_order_field_bit_offset, align 8
  %sub = sub nsw i64 %16, %17
  store i64 %sub, i64* %bit_offset, align 8
  %18 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %19 = load i64, i64* %bit_offset, align 8
  call void @add_AT_unsigned(%struct.die_struct* %18, i32 12, i64 %19)
  br label %return

return:                                           ; preds = %if.end.10, %if.then.9
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @init_file_table() #0 {
entry:
  %call = call noalias i8* @xcalloc(i64 64, i64 8)
  %0 = bitcast i8* %call to i8**
  store i8** %0, i8*** getelementptr inbounds (%struct.file_table, %struct.file_table* @file_table, i32 0, i32 0), align 8
  store i32 64, i32* getelementptr inbounds (%struct.file_table, %struct.file_table* @file_table, i32 0, i32 1), align 4
  store i32 1, i32* getelementptr inbounds (%struct.file_table, %struct.file_table* @file_table, i32 0, i32 2), align 4
  store i32 0, i32* getelementptr inbounds (%struct.file_table, %struct.file_table* @file_table, i32 0, i32 3), align 4
  ret void
}

declare %struct.varray_head_tag* @varray_init(i64, i64, i8*) #1

declare void @ggc_add_tree_varray_root(%struct.varray_head_tag**, i32) #1

; Function Attrs: nounwind uwtable
define internal %struct.die_struct* @gen_compile_unit_die(i8* %filename) #0 {
entry:
  %filename.addr = alloca i8*, align 8
  %die = alloca %struct.die_struct*, align 8
  %producer = alloca [250 x i8], align 16
  %wd = alloca i8*, align 8
  %language_string = alloca i8*, align 8
  %language = alloca i32, align 4
  store i8* %filename, i8** %filename.addr, align 8
  %call = call i8* @getpwd()
  store i8* %call, i8** %wd, align 8
  %0 = load i8*, i8** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 0), align 8
  store i8* %0, i8** %language_string, align 8
  %call1 = call %struct.die_struct* @new_die(i32 17, %struct.die_struct* null, %union.tree_node* null)
  store %struct.die_struct* %call1, %struct.die_struct** %die, align 8
  %1 = load %struct.die_struct*, %struct.die_struct** %die, align 8
  %2 = load i8*, i8** %filename.addr, align 8
  call void @add_name_attribute(%struct.die_struct* %1, i8* %2)
  %3 = load i8*, i8** %wd, align 8
  %cmp = icmp ne i8* %3, null
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %4 = load i8*, i8** %filename.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 0
  %5 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %5 to i32
  %cmp2 = icmp ne i32 %conv, 47
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %6 = load %struct.die_struct*, %struct.die_struct** %die, align 8
  %7 = load i8*, i8** %wd, align 8
  call void @add_AT_string(%struct.die_struct* %6, i32 27, i8* %7)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %arraydecay = getelementptr inbounds [250 x i8], [250 x i8]* %producer, i32 0, i32 0
  %8 = load i8*, i8** %language_string, align 8
  %9 = load i8*, i8** @version_string, align 8
  %call4 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.420, i32 0, i32 0), i8* %8, i8* %9) #5
  %10 = load %struct.die_struct*, %struct.die_struct** %die, align 8
  %arraydecay5 = getelementptr inbounds [250 x i8], [250 x i8]* %producer, i32 0, i32 0
  call void @add_AT_string(%struct.die_struct* %10, i32 37, i8* %arraydecay5)
  %11 = load i8*, i8** %language_string, align 8
  %call6 = call i32 @strcmp(i8* %11, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.421, i32 0, i32 0)) #7
  %cmp7 = icmp eq i32 %call6, 0
  br i1 %cmp7, label %if.then.9, label %if.else

if.then.9:                                        ; preds = %if.end
  store i32 4, i32* %language, align 4
  br label %if.end.37

if.else:                                          ; preds = %if.end
  %12 = load i8*, i8** %language_string, align 8
  %call10 = call i32 @strcmp(i8* %12, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.422, i32 0, i32 0)) #7
  %cmp11 = icmp eq i32 %call10, 0
  br i1 %cmp11, label %if.then.13, label %if.else.14

if.then.13:                                       ; preds = %if.else
  store i32 3, i32* %language, align 4
  br label %if.end.36

if.else.14:                                       ; preds = %if.else
  %13 = load i8*, i8** %language_string, align 8
  %call15 = call i32 @strcmp(i8* %13, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.423, i32 0, i32 0)) #7
  %cmp16 = icmp eq i32 %call15, 0
  br i1 %cmp16, label %if.then.18, label %if.else.19

if.then.18:                                       ; preds = %if.else.14
  store i32 7, i32* %language, align 4
  br label %if.end.35

if.else.19:                                       ; preds = %if.else.14
  %14 = load i8*, i8** %language_string, align 8
  %call20 = call i32 @strcmp(i8* %14, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.424, i32 0, i32 0)) #7
  %cmp21 = icmp eq i32 %call20, 0
  br i1 %cmp21, label %if.then.23, label %if.else.24

if.then.23:                                       ; preds = %if.else.19
  store i32 9, i32* %language, align 4
  br label %if.end.34

if.else.24:                                       ; preds = %if.else.19
  %15 = load i8*, i8** %language_string, align 8
  %call25 = call i32 @strcmp(i8* %15, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.425, i32 0, i32 0)) #7
  %cmp26 = icmp eq i32 %call25, 0
  br i1 %cmp26, label %if.then.28, label %if.else.29

if.then.28:                                       ; preds = %if.else.24
  store i32 11, i32* %language, align 4
  br label %if.end.33

if.else.29:                                       ; preds = %if.else.24
  %16 = load i32, i32* @flag_traditional, align 4
  %tobool = icmp ne i32 %16, 0
  br i1 %tobool, label %if.then.30, label %if.else.31

if.then.30:                                       ; preds = %if.else.29
  store i32 2, i32* %language, align 4
  br label %if.end.32

if.else.31:                                       ; preds = %if.else.29
  store i32 1, i32* %language, align 4
  br label %if.end.32

if.end.32:                                        ; preds = %if.else.31, %if.then.30
  br label %if.end.33

if.end.33:                                        ; preds = %if.end.32, %if.then.28
  br label %if.end.34

if.end.34:                                        ; preds = %if.end.33, %if.then.23
  br label %if.end.35

if.end.35:                                        ; preds = %if.end.34, %if.then.18
  br label %if.end.36

if.end.36:                                        ; preds = %if.end.35, %if.then.13
  br label %if.end.37

if.end.37:                                        ; preds = %if.end.36, %if.then.9
  %17 = load %struct.die_struct*, %struct.die_struct** %die, align 8
  %18 = load i32, i32* %language, align 4
  %conv38 = sext i32 %18 to i64
  call void @add_AT_unsigned(%struct.die_struct* %17, i32 19, i64 %conv38)
  %19 = load %struct.die_struct*, %struct.die_struct** %die, align 8
  ret %struct.die_struct* %19
}

declare void @ggc_add_rtx_varray_root(%struct.varray_head_tag**, i32) #1

declare void @ggc_add_root(i8*, i32, i32, void (i8*)*) #1

; Function Attrs: nounwind uwtable
define internal void @mark_limbo_die_list(i8* %ptr) #0 {
entry:
  %ptr.addr = alloca i8*, align 8
  %node = alloca %struct.limbo_die_struct*, align 8
  %t__ = alloca %union.tree_node*, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  %0 = load %struct.limbo_die_struct*, %struct.limbo_die_struct** @limbo_die_list, align 8
  store %struct.limbo_die_struct* %0, %struct.limbo_die_struct** %node, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.limbo_die_struct*, %struct.limbo_die_struct** %node, align 8
  %tobool = icmp ne %struct.limbo_die_struct* %1, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %do.body

do.body:                                          ; preds = %for.body
  %2 = load %struct.limbo_die_struct*, %struct.limbo_die_struct** %node, align 8
  %created_for = getelementptr inbounds %struct.limbo_die_struct, %struct.limbo_die_struct* %2, i32 0, i32 1
  %3 = load %union.tree_node*, %union.tree_node** %created_for, align 8
  store %union.tree_node* %3, %union.tree_node** %t__, align 8
  %4 = load %union.tree_node*, %union.tree_node** %t__, align 8
  %cmp = icmp ne %union.tree_node* %4, null
  br i1 %cmp, label %land.lhs.true, label %if.end.8

land.lhs.true:                                    ; preds = %do.body
  %5 = load %union.tree_node*, %union.tree_node** %t__, align 8
  %6 = bitcast %union.tree_node* %5 to i8*
  %call = call i32 @ggc_set_mark(i8* %6)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.end.8, label %if.then

if.then:                                          ; preds = %land.lhs.true
  br label %do.body.2

do.body.2:                                        ; preds = %if.then
  %7 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %elements_used = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %7, i32 0, i32 1
  %8 = load i64, i64* %elements_used, align 8
  %9 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %num_elements = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %9, i32 0, i32 0
  %10 = load i64, i64* %num_elements, align 8
  %cmp3 = icmp uge i64 %8, %10
  br i1 %cmp3, label %if.then.4, label %if.end

if.then.4:                                        ; preds = %do.body.2
  %11 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %12 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %num_elements5 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %12, i32 0, i32 0
  %13 = load i64, i64* %num_elements5, align 8
  %mul = mul i64 2, %13
  %call6 = call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %11, i64 %mul)
  store %struct.varray_head_tag* %call6, %struct.varray_head_tag** @ggc_pending_trees, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.4, %do.body.2
  %14 = load %union.tree_node*, %union.tree_node** %t__, align 8
  %15 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %elements_used7 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %15, i32 0, i32 1
  %16 = load i64, i64* %elements_used7, align 8
  %inc = add i64 %16, 1
  store i64 %inc, i64* %elements_used7, align 8
  %17 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %data = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %17, i32 0, i32 4
  %tree = bitcast %union.varray_data_tag* %data to [1 x %union.tree_node*]*
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %tree, i32 0, i64 %16
  store %union.tree_node* %14, %union.tree_node** %arrayidx, align 8
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %if.end.8

if.end.8:                                         ; preds = %do.end, %land.lhs.true, %do.body
  br label %do.end.9

do.end.9:                                         ; preds = %if.end.8
  br label %for.inc

for.inc:                                          ; preds = %do.end.9
  %18 = load %struct.limbo_die_struct*, %struct.limbo_die_struct** %node, align 8
  %next = getelementptr inbounds %struct.limbo_die_struct, %struct.limbo_die_struct* %18, i32 0, i32 2
  %19 = load %struct.limbo_die_struct*, %struct.limbo_die_struct** %next, align 8
  store %struct.limbo_die_struct* %19, %struct.limbo_die_struct** %node, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare void @text_section() #1

declare i8* @getpwd() #1

declare i32 @ggc_set_mark(i8*) #1

; Function Attrs: nounwind uwtable
define internal void @retry_incomplete_types() #0 {
entry:
  %i = alloca i32, align 4
  %0 = load %struct.varray_head_tag*, %struct.varray_head_tag** @incomplete_types, align 8
  %elements_used = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %0, i32 0, i32 1
  %1 = load i64, i64* %elements_used, align 8
  %sub = sub i64 %1, 1
  %conv = trunc i64 %sub to i32
  store i32 %conv, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %cmp = icmp sge i32 %2, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %idxprom = sext i32 %3 to i64
  %4 = load %struct.varray_head_tag*, %struct.varray_head_tag** @incomplete_types, align 8
  %data = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %4, i32 0, i32 4
  %tree = bitcast %union.varray_data_tag* %data to [1 x %union.tree_node*]*
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %tree, i32 0, i64 %idxprom
  %5 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8
  %6 = load %struct.die_struct*, %struct.die_struct** @comp_unit_die, align 8
  call void @gen_type_die(%union.tree_node* %5, %struct.die_struct* %6)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %dec = add nsw i32 %7, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @reverse_all_dies(%struct.die_struct* %die) #0 {
entry:
  %die.addr = alloca %struct.die_struct*, align 8
  %c = alloca %struct.die_struct*, align 8
  store %struct.die_struct* %die, %struct.die_struct** %die.addr, align 8
  %0 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  call void @reverse_die_lists(%struct.die_struct* %0)
  %1 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %die_child = getelementptr inbounds %struct.die_struct, %struct.die_struct* %1, i32 0, i32 4
  %2 = load %struct.die_struct*, %struct.die_struct** %die_child, align 8
  store %struct.die_struct* %2, %struct.die_struct** %c, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load %struct.die_struct*, %struct.die_struct** %c, align 8
  %tobool = icmp ne %struct.die_struct* %3, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load %struct.die_struct*, %struct.die_struct** %c, align 8
  call void @reverse_all_dies(%struct.die_struct* %4)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load %struct.die_struct*, %struct.die_struct** %c, align 8
  %die_sib = getelementptr inbounds %struct.die_struct, %struct.die_struct* %5, i32 0, i32 5
  %6 = load %struct.die_struct*, %struct.die_struct** %die_sib, align 8
  store %struct.die_struct* %6, %struct.die_struct** %c, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @break_out_includes(%struct.die_struct* %die) #0 {
entry:
  %die.addr = alloca %struct.die_struct*, align 8
  %ptr = alloca %struct.die_struct**, align 8
  %unit = alloca %struct.die_struct*, align 8
  %node = alloca %struct.limbo_die_struct*, align 8
  %c = alloca %struct.die_struct*, align 8
  store %struct.die_struct* %die, %struct.die_struct** %die.addr, align 8
  store %struct.die_struct* null, %struct.die_struct** %unit, align 8
  %0 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %die_child = getelementptr inbounds %struct.die_struct, %struct.die_struct* %0, i32 0, i32 4
  store %struct.die_struct** %die_child, %struct.die_struct*** %ptr, align 8
  br label %for.cond

for.cond:                                         ; preds = %if.end.18, %if.else.16, %entry
  %1 = load %struct.die_struct**, %struct.die_struct*** %ptr, align 8
  %2 = load %struct.die_struct*, %struct.die_struct** %1, align 8
  %tobool = icmp ne %struct.die_struct* %2, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.die_struct**, %struct.die_struct*** %ptr, align 8
  %4 = load %struct.die_struct*, %struct.die_struct** %3, align 8
  store %struct.die_struct* %4, %struct.die_struct** %c, align 8
  %5 = load %struct.die_struct*, %struct.die_struct** %c, align 8
  %die_tag = getelementptr inbounds %struct.die_struct, %struct.die_struct* %5, i32 0, i32 0
  %6 = load i32, i32* %die_tag, align 4
  %cmp = icmp eq i32 %6, 16644
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body
  %7 = load %struct.die_struct*, %struct.die_struct** %c, align 8
  %die_tag1 = getelementptr inbounds %struct.die_struct, %struct.die_struct* %7, i32 0, i32 0
  %8 = load i32, i32* %die_tag1, align 4
  %cmp2 = icmp eq i32 %8, 16645
  br i1 %cmp2, label %if.then, label %lor.lhs.false.3

lor.lhs.false.3:                                  ; preds = %lor.lhs.false
  %9 = load %struct.die_struct*, %struct.die_struct** %unit, align 8
  %tobool4 = icmp ne %struct.die_struct* %9, null
  br i1 %tobool4, label %land.lhs.true, label %if.else.16

land.lhs.true:                                    ; preds = %lor.lhs.false.3
  %10 = load %struct.die_struct*, %struct.die_struct** %c, align 8
  %call = call i32 @is_comdat_die(%struct.die_struct* %10)
  %tobool5 = icmp ne i32 %call, 0
  br i1 %tobool5, label %if.then, label %if.else.16

if.then:                                          ; preds = %land.lhs.true, %lor.lhs.false, %for.body
  %11 = load %struct.die_struct*, %struct.die_struct** %c, align 8
  %die_sib = getelementptr inbounds %struct.die_struct, %struct.die_struct* %11, i32 0, i32 5
  %12 = load %struct.die_struct*, %struct.die_struct** %die_sib, align 8
  %13 = load %struct.die_struct**, %struct.die_struct*** %ptr, align 8
  store %struct.die_struct* %12, %struct.die_struct** %13, align 8
  %14 = load %struct.die_struct*, %struct.die_struct** %c, align 8
  %die_tag6 = getelementptr inbounds %struct.die_struct, %struct.die_struct* %14, i32 0, i32 0
  %15 = load i32, i32* %die_tag6, align 4
  %cmp7 = icmp eq i32 %15, 16644
  br i1 %cmp7, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %if.then
  %16 = load %struct.die_struct*, %struct.die_struct** %unit, align 8
  %17 = load %struct.die_struct*, %struct.die_struct** %c, align 8
  %call9 = call %struct.die_struct* @push_new_compile_unit(%struct.die_struct* %16, %struct.die_struct* %17)
  store %struct.die_struct* %call9, %struct.die_struct** %unit, align 8
  %18 = load %struct.die_struct*, %struct.die_struct** %c, align 8
  call void @free_die(%struct.die_struct* %18)
  br label %if.end.15

if.else:                                          ; preds = %if.then
  %19 = load %struct.die_struct*, %struct.die_struct** %c, align 8
  %die_tag10 = getelementptr inbounds %struct.die_struct, %struct.die_struct* %19, i32 0, i32 0
  %20 = load i32, i32* %die_tag10, align 4
  %cmp11 = icmp eq i32 %20, 16645
  br i1 %cmp11, label %if.then.12, label %if.else.14

if.then.12:                                       ; preds = %if.else
  %21 = load %struct.die_struct*, %struct.die_struct** %unit, align 8
  %call13 = call %struct.die_struct* @pop_compile_unit(%struct.die_struct* %21)
  store %struct.die_struct* %call13, %struct.die_struct** %unit, align 8
  %22 = load %struct.die_struct*, %struct.die_struct** %c, align 8
  call void @free_die(%struct.die_struct* %22)
  br label %if.end

if.else.14:                                       ; preds = %if.else
  %23 = load %struct.die_struct*, %struct.die_struct** %unit, align 8
  %24 = load %struct.die_struct*, %struct.die_struct** %c, align 8
  call void @add_child_die(%struct.die_struct* %23, %struct.die_struct* %24)
  br label %if.end

if.end:                                           ; preds = %if.else.14, %if.then.12
  br label %if.end.15

if.end.15:                                        ; preds = %if.end, %if.then.8
  br label %if.end.18

if.else.16:                                       ; preds = %land.lhs.true, %lor.lhs.false.3
  %25 = load %struct.die_struct*, %struct.die_struct** %c, align 8
  %die_sib17 = getelementptr inbounds %struct.die_struct, %struct.die_struct* %25, i32 0, i32 5
  store %struct.die_struct** %die_sib17, %struct.die_struct*** %ptr, align 8
  br label %for.cond

if.end.18:                                        ; preds = %if.end.15
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %26 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  call void @assign_symbol_names(%struct.die_struct* %26)
  %27 = load %struct.limbo_die_struct*, %struct.limbo_die_struct** @limbo_die_list, align 8
  store %struct.limbo_die_struct* %27, %struct.limbo_die_struct** %node, align 8
  br label %for.cond.19

for.cond.19:                                      ; preds = %for.inc, %for.end
  %28 = load %struct.limbo_die_struct*, %struct.limbo_die_struct** %node, align 8
  %tobool20 = icmp ne %struct.limbo_die_struct* %28, null
  br i1 %tobool20, label %for.body.21, label %for.end.24

for.body.21:                                      ; preds = %for.cond.19
  %29 = load %struct.limbo_die_struct*, %struct.limbo_die_struct** %node, align 8
  %die22 = getelementptr inbounds %struct.limbo_die_struct, %struct.limbo_die_struct* %29, i32 0, i32 0
  %30 = load %struct.die_struct*, %struct.die_struct** %die22, align 8
  call void @compute_section_prefix(%struct.die_struct* %30)
  %31 = load %struct.limbo_die_struct*, %struct.limbo_die_struct** %node, align 8
  %die23 = getelementptr inbounds %struct.limbo_die_struct, %struct.limbo_die_struct* %31, i32 0, i32 0
  %32 = load %struct.die_struct*, %struct.die_struct** %die23, align 8
  call void @assign_symbol_names(%struct.die_struct* %32)
  br label %for.inc

for.inc:                                          ; preds = %for.body.21
  %33 = load %struct.limbo_die_struct*, %struct.limbo_die_struct** %node, align 8
  %next = getelementptr inbounds %struct.limbo_die_struct, %struct.limbo_die_struct* %33, i32 0, i32 2
  %34 = load %struct.limbo_die_struct*, %struct.limbo_die_struct** %next, align 8
  store %struct.limbo_die_struct* %34, %struct.limbo_die_struct** %node, align 8
  br label %for.cond.19

for.end.24:                                       ; preds = %for.cond.19
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @add_sibling_attributes(%struct.die_struct* %die) #0 {
entry:
  %die.addr = alloca %struct.die_struct*, align 8
  %c = alloca %struct.die_struct*, align 8
  store %struct.die_struct* %die, %struct.die_struct** %die.addr, align 8
  %0 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %die_tag = getelementptr inbounds %struct.die_struct, %struct.die_struct* %0, i32 0, i32 0
  %1 = load i32, i32* %die_tag, align 4
  %cmp = icmp ne i32 %1, 17
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %die_sib = getelementptr inbounds %struct.die_struct, %struct.die_struct* %2, i32 0, i32 5
  %3 = load %struct.die_struct*, %struct.die_struct** %die_sib, align 8
  %tobool = icmp ne %struct.die_struct* %3, null
  br i1 %tobool, label %land.lhs.true.1, label %if.end

land.lhs.true.1:                                  ; preds = %land.lhs.true
  %4 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %die_child = getelementptr inbounds %struct.die_struct, %struct.die_struct* %4, i32 0, i32 4
  %5 = load %struct.die_struct*, %struct.die_struct** %die_child, align 8
  %cmp2 = icmp ne %struct.die_struct* %5, null
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true.1
  %6 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %7 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %die_sib3 = getelementptr inbounds %struct.die_struct, %struct.die_struct* %7, i32 0, i32 5
  %8 = load %struct.die_struct*, %struct.die_struct** %die_sib3, align 8
  call void @add_AT_die_ref(%struct.die_struct* %6, i32 1, %struct.die_struct* %8)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true.1, %land.lhs.true, %entry
  %9 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %die_child4 = getelementptr inbounds %struct.die_struct, %struct.die_struct* %9, i32 0, i32 4
  %10 = load %struct.die_struct*, %struct.die_struct** %die_child4, align 8
  store %struct.die_struct* %10, %struct.die_struct** %c, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %11 = load %struct.die_struct*, %struct.die_struct** %c, align 8
  %cmp5 = icmp ne %struct.die_struct* %11, null
  br i1 %cmp5, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load %struct.die_struct*, %struct.die_struct** %c, align 8
  call void @add_sibling_attributes(%struct.die_struct* %12)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %13 = load %struct.die_struct*, %struct.die_struct** %c, align 8
  %die_sib6 = getelementptr inbounds %struct.die_struct, %struct.die_struct* %13, i32 0, i32 5
  %14 = load %struct.die_struct*, %struct.die_struct** %die_sib6, align 8
  store %struct.die_struct* %14, %struct.die_struct** %c, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @output_location_lists(%struct.die_struct* %die) #0 {
entry:
  %die.addr = alloca %struct.die_struct*, align 8
  %c = alloca %struct.die_struct*, align 8
  %d_attr = alloca %struct.dw_attr_struct*, align 8
  store %struct.die_struct* %die, %struct.die_struct** %die.addr, align 8
  %0 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %die_attr = getelementptr inbounds %struct.die_struct, %struct.die_struct* %0, i32 0, i32 2
  %1 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %die_attr, align 8
  store %struct.dw_attr_struct* %1, %struct.dw_attr_struct** %d_attr, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %d_attr, align 8
  %tobool = icmp ne %struct.dw_attr_struct* %2, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %d_attr, align 8
  %call = call i32 @AT_class(%struct.dw_attr_struct* %3)
  %cmp = icmp eq i32 %call, 3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %4 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %d_attr, align 8
  %call1 = call %struct.dw_loc_list_struct* @AT_loc_list(%struct.dw_attr_struct* %4)
  call void @output_loc_list(%struct.dw_loc_list_struct* %call1)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %5 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %d_attr, align 8
  %dw_attr_next = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %5, i32 0, i32 1
  %6 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %dw_attr_next, align 8
  store %struct.dw_attr_struct* %6, %struct.dw_attr_struct** %d_attr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %7 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %die_child = getelementptr inbounds %struct.die_struct, %struct.die_struct* %7, i32 0, i32 4
  %8 = load %struct.die_struct*, %struct.die_struct** %die_child, align 8
  store %struct.die_struct* %8, %struct.die_struct** %c, align 8
  br label %for.cond.2

for.cond.2:                                       ; preds = %for.inc.5, %for.end
  %9 = load %struct.die_struct*, %struct.die_struct** %c, align 8
  %cmp3 = icmp ne %struct.die_struct* %9, null
  br i1 %cmp3, label %for.body.4, label %for.end.6

for.body.4:                                       ; preds = %for.cond.2
  %10 = load %struct.die_struct*, %struct.die_struct** %c, align 8
  call void @output_location_lists(%struct.die_struct* %10)
  br label %for.inc.5

for.inc.5:                                        ; preds = %for.body.4
  %11 = load %struct.die_struct*, %struct.die_struct** %c, align 8
  %die_sib = getelementptr inbounds %struct.die_struct, %struct.die_struct* %11, i32 0, i32 5
  %12 = load %struct.die_struct*, %struct.die_struct** %die_sib, align 8
  store %struct.die_struct* %12, %struct.die_struct** %c, align 8
  br label %for.cond.2

for.end.6:                                        ; preds = %for.cond.2
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @add_AT_lbl_offset(%struct.die_struct* %die, i32 %attr_kind, i8* %label) #3 {
entry:
  %die.addr = alloca %struct.die_struct*, align 8
  %attr_kind.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %attr = alloca %struct.dw_attr_struct*, align 8
  store %struct.die_struct* %die, %struct.die_struct** %die.addr, align 8
  store i32 %attr_kind, i32* %attr_kind.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  %call = call noalias i8* @xmalloc(i64 40)
  %0 = bitcast i8* %call to %struct.dw_attr_struct*
  store %struct.dw_attr_struct* %0, %struct.dw_attr_struct** %attr, align 8
  %1 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %attr, align 8
  %dw_attr_next = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %1, i32 0, i32 1
  store %struct.dw_attr_struct* null, %struct.dw_attr_struct** %dw_attr_next, align 8
  %2 = load i32, i32* %attr_kind.addr, align 4
  %3 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %attr, align 8
  %dw_attr = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %3, i32 0, i32 0
  store i32 %2, i32* %dw_attr, align 4
  %4 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %attr, align 8
  %dw_attr_val = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %4, i32 0, i32 2
  %val_class = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_attr_val, i32 0, i32 0
  store i32 13, i32* %val_class, align 4
  %5 = load i8*, i8** %label.addr, align 8
  %call1 = call noalias i8* @xstrdup(i8* %5)
  %6 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %attr, align 8
  %dw_attr_val2 = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %6, i32 0, i32 2
  %v = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_attr_val2, i32 0, i32 1
  %val_lbl_id = bitcast %union.anon.3* %v to i8**
  store i8* %call1, i8** %val_lbl_id, align 8
  %7 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %8 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %attr, align 8
  call void @add_dwarf_attr(%struct.die_struct* %7, %struct.dw_attr_struct* %8)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @output_comp_unit(%struct.die_struct* %die) #0 {
entry:
  %die.addr = alloca %struct.die_struct*, align 8
  %secname = alloca i8*, align 8
  %tmp = alloca i8*, align 8
  store %struct.die_struct* %die, %struct.die_struct** %die.addr, align 8
  %0 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  call void @mark_dies(%struct.die_struct* %0)
  %1 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  call void @build_abbrev_table(%struct.die_struct* %1)
  store i64 11, i64* @next_die_offset, align 8
  %2 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  call void @calc_die_sizes(%struct.die_struct* %2)
  %3 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %die_symbol = getelementptr inbounds %struct.die_struct, %struct.die_struct* %3, i32 0, i32 1
  %4 = load i8*, i8** %die_symbol, align 8
  %tobool = icmp ne i8* %4, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %5 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %die_symbol1 = getelementptr inbounds %struct.die_struct, %struct.die_struct* %5, i32 0, i32 1
  %6 = load i8*, i8** %die_symbol1, align 8
  %call = call i64 @strlen(i8* %6) #7
  %add = add i64 %call, 24
  %7 = alloca i8, i64 %add
  store i8* %7, i8** %tmp, align 8
  %8 = load i8*, i8** %tmp, align 8
  %9 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %die_symbol2 = getelementptr inbounds %struct.die_struct, %struct.die_struct* %9, i32 0, i32 1
  %10 = load i8*, i8** %die_symbol2, align 8
  %call3 = call i32 (i8*, i8*, ...) @sprintf(i8* %8, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.444, i32 0, i32 0), i8* %10) #5
  %11 = load i8*, i8** %tmp, align 8
  store i8* %11, i8** %secname, align 8
  %12 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %die_symbol4 = getelementptr inbounds %struct.die_struct, %struct.die_struct* %12, i32 0, i32 1
  store i8* null, i8** %die_symbol4, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.417, i32 0, i32 0), i8** %secname, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %13 = load i8*, i8** %secname, align 8
  call void @named_section_flags(i8* %13, i32 1024)
  call void @output_compilation_unit_header()
  %14 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  call void @output_die(%struct.die_struct* %14)
  %15 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %die_symbol5 = getelementptr inbounds %struct.die_struct, %struct.die_struct* %15, i32 0, i32 1
  %16 = load i8*, i8** %die_symbol5, align 8
  %tobool6 = icmp ne i8* %16, null
  br i1 %tobool6, label %if.then.7, label %if.end.8

if.then.7:                                        ; preds = %if.end
  %17 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  call void @unmark_dies(%struct.die_struct* %17)
  br label %if.end.8

if.end.8:                                         ; preds = %if.then.7, %if.end
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @output_abbrev_section() #0 {
entry:
  %abbrev_id = alloca i64, align 8
  %a_attr = alloca %struct.dw_attr_struct*, align 8
  %abbrev = alloca %struct.die_struct*, align 8
  store i64 1, i64* %abbrev_id, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc.13, %entry
  %0 = load i64, i64* %abbrev_id, align 8
  %1 = load i32, i32* @abbrev_die_table_in_use, align 4
  %conv = zext i32 %1 to i64
  %cmp = icmp ult i64 %0, %conv
  br i1 %cmp, label %for.body, label %for.end.14

for.body:                                         ; preds = %for.cond
  %2 = load i64, i64* %abbrev_id, align 8
  %3 = load %struct.die_struct**, %struct.die_struct*** @abbrev_die_table, align 8
  %arrayidx = getelementptr inbounds %struct.die_struct*, %struct.die_struct** %3, i64 %2
  %4 = load %struct.die_struct*, %struct.die_struct** %arrayidx, align 8
  store %struct.die_struct* %4, %struct.die_struct** %abbrev, align 8
  %5 = load i64, i64* %abbrev_id, align 8
  call void (i64, i8*, ...) @dw2_asm_output_data_uleb128(i64 %5, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.457, i32 0, i32 0))
  %6 = load %struct.die_struct*, %struct.die_struct** %abbrev, align 8
  %die_tag = getelementptr inbounds %struct.die_struct, %struct.die_struct* %6, i32 0, i32 0
  %7 = load i32, i32* %die_tag, align 4
  %conv2 = zext i32 %7 to i64
  %8 = load %struct.die_struct*, %struct.die_struct** %abbrev, align 8
  %die_tag3 = getelementptr inbounds %struct.die_struct, %struct.die_struct* %8, i32 0, i32 0
  %9 = load i32, i32* %die_tag3, align 4
  %call = call i8* @dwarf_tag_name(i32 %9)
  call void (i64, i8*, ...) @dw2_asm_output_data_uleb128(i64 %conv2, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.458, i32 0, i32 0), i8* %call)
  %10 = load %struct.die_struct*, %struct.die_struct** %abbrev, align 8
  %die_child = getelementptr inbounds %struct.die_struct, %struct.die_struct* %10, i32 0, i32 4
  %11 = load %struct.die_struct*, %struct.die_struct** %die_child, align 8
  %cmp4 = icmp ne %struct.die_struct* %11, null
  br i1 %cmp4, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 1, i64 1, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.459, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %for.body
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 1, i64 0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.460, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %12 = load %struct.die_struct*, %struct.die_struct** %abbrev, align 8
  %die_attr = getelementptr inbounds %struct.die_struct, %struct.die_struct* %12, i32 0, i32 2
  %13 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %die_attr, align 8
  store %struct.dw_attr_struct* %13, %struct.dw_attr_struct** %a_attr, align 8
  br label %for.cond.6

for.cond.6:                                       ; preds = %for.inc, %if.end
  %14 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a_attr, align 8
  %cmp7 = icmp ne %struct.dw_attr_struct* %14, null
  br i1 %cmp7, label %for.body.9, label %for.end

for.body.9:                                       ; preds = %for.cond.6
  %15 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a_attr, align 8
  %dw_attr = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %15, i32 0, i32 0
  %16 = load i32, i32* %dw_attr, align 4
  %conv10 = zext i32 %16 to i64
  %17 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a_attr, align 8
  %dw_attr11 = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %17, i32 0, i32 0
  %18 = load i32, i32* %dw_attr11, align 4
  %call12 = call i8* @dwarf_attr_name(i32 %18)
  call void (i64, i8*, ...) @dw2_asm_output_data_uleb128(i64 %conv10, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.461, i32 0, i32 0), i8* %call12)
  %19 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a_attr, align 8
  call void @output_value_format(%struct.dw_attr_struct* %19)
  br label %for.inc

for.inc:                                          ; preds = %for.body.9
  %20 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a_attr, align 8
  %dw_attr_next = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %20, i32 0, i32 1
  %21 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %dw_attr_next, align 8
  store %struct.dw_attr_struct* %21, %struct.dw_attr_struct** %a_attr, align 8
  br label %for.cond.6

for.end:                                          ; preds = %for.cond.6
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 1, i64 0, i8* null)
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 1, i64 0, i8* null)
  br label %for.inc.13

for.inc.13:                                       ; preds = %for.end
  %22 = load i64, i64* %abbrev_id, align 8
  %inc = add i64 %22, 1
  store i64 %inc, i64* %abbrev_id, align 8
  br label %for.cond

for.end.14:                                       ; preds = %for.cond
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 1, i64 0, i8* null)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @output_pubnames() #0 {
entry:
  %i = alloca i32, align 4
  %pubnames_length = alloca i64, align 8
  %pub = alloca %struct.pubname_struct*, align 8
  %call = call i64 @size_of_pubnames()
  store i64 %call, i64* %pubnames_length, align 8
  %0 = load i64, i64* %pubnames_length, align 8
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 4, i64 %0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.484, i32 0, i32 0))
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 2, i64 2, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.485, i32 0, i32 0))
  call void (i32, i8*, i8*, ...) @dw2_asm_output_offset(i32 4, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @debug_info_section_label, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.486, i32 0, i32 0))
  %1 = load i64, i64* @next_die_offset, align 8
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 4, i64 %1, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.487, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* @pubname_table_in_use, align 4
  %cmp = icmp ult i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %i, align 4
  %idxprom = zext i32 %4 to i64
  %5 = load %struct.pubname_struct*, %struct.pubname_struct** @pubname_table, align 8
  %arrayidx = getelementptr inbounds %struct.pubname_struct, %struct.pubname_struct* %5, i64 %idxprom
  store %struct.pubname_struct* %arrayidx, %struct.pubname_struct** %pub, align 8
  %6 = load %struct.pubname_struct*, %struct.pubname_struct** %pub, align 8
  %die = getelementptr inbounds %struct.pubname_struct, %struct.pubname_struct* %6, i32 0, i32 0
  %7 = load %struct.die_struct*, %struct.die_struct** %die, align 8
  %die_mark = getelementptr inbounds %struct.die_struct, %struct.die_struct* %7, i32 0, i32 8
  %8 = load i32, i32* %die_mark, align 4
  %cmp1 = icmp eq i32 %8, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 6543, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__FUNCTION__.output_pubnames, i32 0, i32 0)) #8
  unreachable

if.end:                                           ; preds = %for.body
  %9 = load %struct.pubname_struct*, %struct.pubname_struct** %pub, align 8
  %die2 = getelementptr inbounds %struct.pubname_struct, %struct.pubname_struct* %9, i32 0, i32 0
  %10 = load %struct.die_struct*, %struct.die_struct** %die2, align 8
  %die_offset = getelementptr inbounds %struct.die_struct, %struct.die_struct* %10, i32 0, i32 6
  %11 = load i64, i64* %die_offset, align 8
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 4, i64 %11, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.488, i32 0, i32 0))
  %12 = load %struct.pubname_struct*, %struct.pubname_struct** %pub, align 8
  %name = getelementptr inbounds %struct.pubname_struct, %struct.pubname_struct* %12, i32 0, i32 1
  %13 = load i8*, i8** %name, align 8
  call void (i8*, i64, i8*, ...) @dw2_asm_output_nstring(i8* %13, i64 -1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.489, i32 0, i32 0))
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %14 = load i32, i32* %i, align 4
  %inc = add i32 %14, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 4, i64 0, i8* null)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @output_aranges() #0 {
entry:
  %i = alloca i32, align 4
  %aranges_length = alloca i64, align 8
  %die = alloca %struct.die_struct*, align 8
  %a = alloca %struct.dw_attr_struct*, align 8
  %loc = alloca %struct.dw_loc_descr_struct*, align 8
  %call = call i64 @size_of_aranges()
  store i64 %call, i64* %aranges_length, align 8
  %0 = load i64, i64* %aranges_length, align 8
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 4, i64 %0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.490, i32 0, i32 0))
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 2, i64 2, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.485, i32 0, i32 0))
  call void (i32, i8*, i8*, ...) @dw2_asm_output_offset(i32 4, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @debug_info_section_label, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.486, i32 0, i32 0))
  %1 = load i32, i32* @target_flags, align 4
  %and = and i32 %1, 33554432
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, i32 64, i32 32
  %div = sdiv i32 %cond, 8
  %conv = sext i32 %div to i64
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 1, i64 %conv, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.491, i32 0, i32 0))
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 1, i64 0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.492, i32 0, i32 0))
  %2 = load i32, i32* @target_flags, align 4
  %and1 = and i32 %2, 33554432
  %tobool2 = icmp ne i32 %and1, 0
  %cond3 = select i1 %tobool2, i32 64, i32 32
  %div4 = sdiv i32 %cond3, 8
  %mul = mul nsw i32 %div4, 2
  %add = add nsw i32 12, %mul
  %sub = sub nsw i32 %add, 1
  %3 = load i32, i32* @target_flags, align 4
  %and5 = and i32 %3, 33554432
  %tobool6 = icmp ne i32 %and5, 0
  %cond7 = select i1 %tobool6, i32 64, i32 32
  %div8 = sdiv i32 %cond7, 8
  %mul9 = mul nsw i32 %div8, 2
  %div10 = sdiv i32 %sub, %mul9
  %4 = load i32, i32* @target_flags, align 4
  %and11 = and i32 %4, 33554432
  %tobool12 = icmp ne i32 %and11, 0
  %cond13 = select i1 %tobool12, i32 64, i32 32
  %div14 = sdiv i32 %cond13, 8
  %mul15 = mul nsw i32 %div14, 2
  %mul16 = mul nsw i32 %div10, %mul15
  %sub17 = sub nsw i32 %mul16, 12
  %tobool18 = icmp ne i32 %sub17, 0
  br i1 %tobool18, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load i32, i32* @target_flags, align 4
  %and19 = and i32 %5, 33554432
  %tobool20 = icmp ne i32 %and19, 0
  %cond21 = select i1 %tobool20, i32 64, i32 32
  %div22 = sdiv i32 %cond21, 8
  %mul23 = mul nsw i32 2, %div22
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 2, i64 0, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.493, i32 0, i32 0), i32 %mul23)
  store i32 2, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %6 = load i32, i32* %i, align 4
  %7 = load i32, i32* @target_flags, align 4
  %and24 = and i32 %7, 33554432
  %tobool25 = icmp ne i32 %and24, 0
  %cond26 = select i1 %tobool25, i32 64, i32 32
  %div27 = sdiv i32 %cond26, 8
  %mul28 = mul nsw i32 %div27, 2
  %add29 = add nsw i32 12, %mul28
  %sub30 = sub nsw i32 %add29, 1
  %8 = load i32, i32* @target_flags, align 4
  %and31 = and i32 %8, 33554432
  %tobool32 = icmp ne i32 %and31, 0
  %cond33 = select i1 %tobool32, i32 64, i32 32
  %div34 = sdiv i32 %cond33, 8
  %mul35 = mul nsw i32 %div34, 2
  %div36 = sdiv i32 %sub30, %mul35
  %9 = load i32, i32* @target_flags, align 4
  %and37 = and i32 %9, 33554432
  %tobool38 = icmp ne i32 %and37, 0
  %cond39 = select i1 %tobool38, i32 64, i32 32
  %div40 = sdiv i32 %cond39, 8
  %mul41 = mul nsw i32 %div40, 2
  %mul42 = mul nsw i32 %div36, %mul41
  %sub43 = sub nsw i32 %mul42, 12
  %cmp = icmp ult i32 %6, %sub43
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 2, i64 0, i8* null)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load i32, i32* %i, align 4
  %add45 = add i32 %10, 2
  store i32 %add45, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end, %entry
  %11 = load i32, i32* @target_flags, align 4
  %and46 = and i32 %11, 33554432
  %tobool47 = icmp ne i32 %and46, 0
  %cond48 = select i1 %tobool47, i32 64, i32 32
  %div49 = sdiv i32 %cond48, 8
  call void (i32, i8*, i8*, ...) @dw2_asm_output_addr(i32 %div49, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @text_section_label, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.494, i32 0, i32 0))
  %12 = load i32, i32* @target_flags, align 4
  %and50 = and i32 %12, 33554432
  %tobool51 = icmp ne i32 %and50, 0
  %cond52 = select i1 %tobool51, i32 64, i32 32
  %div53 = sdiv i32 %cond52, 8
  call void (i32, i8*, i8*, i8*, ...) @dw2_asm_output_delta(i32 %div53, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @text_end_label, i32 0, i32 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @text_section_label, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.495, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond.54

for.cond.54:                                      ; preds = %for.inc.99, %if.end
  %13 = load i32, i32* %i, align 4
  %14 = load i32, i32* @arange_table_in_use, align 4
  %cmp55 = icmp ult i32 %13, %14
  br i1 %cmp55, label %for.body.57, label %for.end.100

for.body.57:                                      ; preds = %for.cond.54
  %15 = load i32, i32* %i, align 4
  %idxprom = zext i32 %15 to i64
  %16 = load %struct.die_struct**, %struct.die_struct*** @arange_table, align 8
  %arrayidx = getelementptr inbounds %struct.die_struct*, %struct.die_struct** %16, i64 %idxprom
  %17 = load %struct.die_struct*, %struct.die_struct** %arrayidx, align 8
  store %struct.die_struct* %17, %struct.die_struct** %die, align 8
  %18 = load %struct.die_struct*, %struct.die_struct** %die, align 8
  %die_mark = getelementptr inbounds %struct.die_struct, %struct.die_struct* %18, i32 0, i32 8
  %19 = load i32, i32* %die_mark, align 4
  %cmp58 = icmp eq i32 %19, 0
  br i1 %cmp58, label %if.then.60, label %if.end.61

if.then.60:                                       ; preds = %for.body.57
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 6613, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @__FUNCTION__.output_aranges, i32 0, i32 0)) #8
  unreachable

if.end.61:                                        ; preds = %for.body.57
  %20 = load %struct.die_struct*, %struct.die_struct** %die, align 8
  %die_tag = getelementptr inbounds %struct.die_struct, %struct.die_struct* %20, i32 0, i32 0
  %21 = load i32, i32* %die_tag, align 4
  %cmp62 = icmp eq i32 %21, 46
  br i1 %cmp62, label %if.then.64, label %if.else

if.then.64:                                       ; preds = %if.end.61
  %22 = load i32, i32* @target_flags, align 4
  %and65 = and i32 %22, 33554432
  %tobool66 = icmp ne i32 %and65, 0
  %cond67 = select i1 %tobool66, i32 64, i32 32
  %div68 = sdiv i32 %cond67, 8
  %23 = load %struct.die_struct*, %struct.die_struct** %die, align 8
  %call69 = call i8* @get_AT_low_pc(%struct.die_struct* %23)
  call void (i32, i8*, i8*, ...) @dw2_asm_output_addr(i32 %div68, i8* %call69, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.494, i32 0, i32 0))
  %24 = load i32, i32* @target_flags, align 4
  %and70 = and i32 %24, 33554432
  %tobool71 = icmp ne i32 %and70, 0
  %cond72 = select i1 %tobool71, i32 64, i32 32
  %div73 = sdiv i32 %cond72, 8
  %25 = load %struct.die_struct*, %struct.die_struct** %die, align 8
  %call74 = call i8* @get_AT_hi_pc(%struct.die_struct* %25)
  %26 = load %struct.die_struct*, %struct.die_struct** %die, align 8
  %call75 = call i8* @get_AT_low_pc(%struct.die_struct* %26)
  call void (i32, i8*, i8*, i8*, ...) @dw2_asm_output_delta(i32 %div73, i8* %call74, i8* %call75, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.495, i32 0, i32 0))
  br label %if.end.98

if.else:                                          ; preds = %if.end.61
  %27 = load %struct.die_struct*, %struct.die_struct** %die, align 8
  %call76 = call %struct.dw_attr_struct* @get_AT(%struct.die_struct* %27, i32 2)
  store %struct.dw_attr_struct* %call76, %struct.dw_attr_struct** %a, align 8
  %28 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %tobool77 = icmp ne %struct.dw_attr_struct* %28, null
  br i1 %tobool77, label %lor.lhs.false, label %if.then.81

lor.lhs.false:                                    ; preds = %if.else
  %29 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %call78 = call i32 @AT_class(%struct.dw_attr_struct* %29)
  %cmp79 = icmp ne i32 %call78, 2
  br i1 %cmp79, label %if.then.81, label %if.end.82

if.then.81:                                       ; preds = %lor.lhs.false, %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 6631, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @__FUNCTION__.output_aranges, i32 0, i32 0)) #8
  unreachable

if.end.82:                                        ; preds = %lor.lhs.false
  %30 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %call83 = call %struct.dw_loc_descr_struct* @AT_loc(%struct.dw_attr_struct* %30)
  store %struct.dw_loc_descr_struct* %call83, %struct.dw_loc_descr_struct** %loc, align 8
  %31 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %loc, align 8
  %dw_loc_opc = getelementptr inbounds %struct.dw_loc_descr_struct, %struct.dw_loc_descr_struct* %31, i32 0, i32 1
  %32 = load i32, i32* %dw_loc_opc, align 4
  %cmp84 = icmp ne i32 %32, 3
  br i1 %cmp84, label %if.then.86, label %if.end.87

if.then.86:                                       ; preds = %if.end.82
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 6635, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @__FUNCTION__.output_aranges, i32 0, i32 0)) #8
  unreachable

if.end.87:                                        ; preds = %if.end.82
  %33 = load i32, i32* @target_flags, align 4
  %and88 = and i32 %33, 33554432
  %tobool89 = icmp ne i32 %and88, 0
  %cond90 = select i1 %tobool89, i32 64, i32 32
  %div91 = sdiv i32 %cond90, 8
  %34 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %loc, align 8
  %dw_loc_oprnd1 = getelementptr inbounds %struct.dw_loc_descr_struct, %struct.dw_loc_descr_struct* %34, i32 0, i32 2
  %v = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_loc_oprnd1, i32 0, i32 1
  %val_addr = bitcast %union.anon.3* %v to %struct.rtx_def**
  %35 = load %struct.rtx_def*, %struct.rtx_def** %val_addr, align 8
  call void (i32, %struct.rtx_def*, i8*, ...) @dw2_asm_output_addr_rtx(i32 %div91, %struct.rtx_def* %35, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.494, i32 0, i32 0))
  %36 = load i32, i32* @target_flags, align 4
  %and92 = and i32 %36, 33554432
  %tobool93 = icmp ne i32 %and92, 0
  %cond94 = select i1 %tobool93, i32 64, i32 32
  %div95 = sdiv i32 %cond94, 8
  %37 = load %struct.die_struct*, %struct.die_struct** %die, align 8
  %call96 = call i32 @get_AT_unsigned(%struct.die_struct* %37, i32 11)
  %conv97 = zext i32 %call96 to i64
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 %div95, i64 %conv97, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.495, i32 0, i32 0))
  br label %if.end.98

if.end.98:                                        ; preds = %if.end.87, %if.then.64
  br label %for.inc.99

for.inc.99:                                       ; preds = %if.end.98
  %38 = load i32, i32* %i, align 4
  %inc = add i32 %38, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond.54

for.end.100:                                      ; preds = %for.cond.54
  %39 = load i32, i32* @target_flags, align 4
  %and101 = and i32 %39, 33554432
  %tobool102 = icmp ne i32 %and101, 0
  %cond103 = select i1 %tobool102, i32 64, i32 32
  %div104 = sdiv i32 %cond103, 8
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 %div104, i64 0, i8* null)
  %40 = load i32, i32* @target_flags, align 4
  %and105 = and i32 %40, 33554432
  %tobool106 = icmp ne i32 %and105, 0
  %cond107 = select i1 %tobool106, i32 64, i32 32
  %div108 = sdiv i32 %cond107, 8
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 %div108, i64 0, i8* null)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @output_ranges() #0 {
entry:
  %i = alloca i32, align 4
  %fmt = alloca i8*, align 8
  %block_num = alloca i32, align 4
  %blabel = alloca [30 x i8], align 16
  %elabel = alloca [30 x i8], align 16
  %0 = load i8*, i8** @output_ranges.start_fmt, align 8
  store i8* %0, i8** %fmt, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* @ranges_table_in_use, align 4
  %cmp = icmp ult i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %idxprom = zext i32 %3 to i64
  %4 = load %struct.dw_ranges_struct*, %struct.dw_ranges_struct** @ranges_table, align 8
  %arrayidx = getelementptr inbounds %struct.dw_ranges_struct, %struct.dw_ranges_struct* %4, i64 %idxprom
  %block_num1 = getelementptr inbounds %struct.dw_ranges_struct, %struct.dw_ranges_struct* %arrayidx, i32 0, i32 0
  %5 = load i32, i32* %block_num1, align 4
  store i32 %5, i32* %block_num, align 4
  %6 = load i32, i32* %block_num, align 4
  %tobool = icmp ne i32 %6, 0
  br i1 %tobool, label %if.then, label %if.else.36

if.then:                                          ; preds = %for.body
  br label %do.body

do.body:                                          ; preds = %if.then
  %arraydecay = getelementptr inbounds [30 x i8], [30 x i8]* %blabel, i32 0, i32 0
  %7 = load i32, i32* %block_num, align 4
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.386, i32 0, i32 0), i32 %7) #5
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body.2

do.body.2:                                        ; preds = %do.end
  %arraydecay3 = getelementptr inbounds [30 x i8], [30 x i8]* %elabel, i32 0, i32 0
  %8 = load i32, i32* %block_num, align 4
  %call4 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay3, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.387, i32 0, i32 0), i32 %8) #5
  br label %do.end.5

do.end.5:                                         ; preds = %do.body.2
  %9 = load i32, i32* @separate_line_info_table_in_use, align 4
  %cmp6 = icmp eq i32 %9, 0
  br i1 %cmp6, label %if.then.7, label %if.else

if.then.7:                                        ; preds = %do.end.5
  %10 = load i32, i32* @target_flags, align 4
  %and = and i32 %10, 33554432
  %tobool8 = icmp ne i32 %and, 0
  %cond = select i1 %tobool8, i32 64, i32 32
  %div = sdiv i32 %cond, 8
  %arraydecay9 = getelementptr inbounds [30 x i8], [30 x i8]* %blabel, i32 0, i32 0
  %11 = load i8*, i8** %fmt, align 8
  %12 = load i32, i32* %i, align 4
  %mul = mul i32 %12, 2
  %13 = load i32, i32* @target_flags, align 4
  %and10 = and i32 %13, 33554432
  %tobool11 = icmp ne i32 %and10, 0
  %cond12 = select i1 %tobool11, i32 64, i32 32
  %div13 = sdiv i32 %cond12, 8
  %mul14 = mul i32 %mul, %div13
  call void (i32, i8*, i8*, i8*, ...) @dw2_asm_output_delta(i32 %div, i8* %arraydecay9, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @text_section_label, i32 0, i32 0), i8* %11, i32 %mul14)
  %14 = load i32, i32* @target_flags, align 4
  %and15 = and i32 %14, 33554432
  %tobool16 = icmp ne i32 %and15, 0
  %cond17 = select i1 %tobool16, i32 64, i32 32
  %div18 = sdiv i32 %cond17, 8
  %arraydecay19 = getelementptr inbounds [30 x i8], [30 x i8]* %elabel, i32 0, i32 0
  call void (i32, i8*, i8*, i8*, ...) @dw2_asm_output_delta(i32 %div18, i8* %arraydecay19, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @text_section_label, i32 0, i32 0), i8* null)
  br label %if.end

if.else:                                          ; preds = %do.end.5
  %15 = load i32, i32* @target_flags, align 4
  %and20 = and i32 %15, 33554432
  %tobool21 = icmp ne i32 %and20, 0
  %cond22 = select i1 %tobool21, i32 64, i32 32
  %div23 = sdiv i32 %cond22, 8
  %arraydecay24 = getelementptr inbounds [30 x i8], [30 x i8]* %blabel, i32 0, i32 0
  %16 = load i8*, i8** %fmt, align 8
  %17 = load i32, i32* %i, align 4
  %mul25 = mul i32 %17, 2
  %18 = load i32, i32* @target_flags, align 4
  %and26 = and i32 %18, 33554432
  %tobool27 = icmp ne i32 %and26, 0
  %cond28 = select i1 %tobool27, i32 64, i32 32
  %div29 = sdiv i32 %cond28, 8
  %mul30 = mul i32 %mul25, %div29
  call void (i32, i8*, i8*, ...) @dw2_asm_output_addr(i32 %div23, i8* %arraydecay24, i8* %16, i32 %mul30)
  %19 = load i32, i32* @target_flags, align 4
  %and31 = and i32 %19, 33554432
  %tobool32 = icmp ne i32 %and31, 0
  %cond33 = select i1 %tobool32, i32 64, i32 32
  %div34 = sdiv i32 %cond33, 8
  %arraydecay35 = getelementptr inbounds [30 x i8], [30 x i8]* %elabel, i32 0, i32 0
  call void (i32, i8*, i8*, ...) @dw2_asm_output_addr(i32 %div34, i8* %arraydecay35, i8* null)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.7
  store i8* null, i8** %fmt, align 8
  br label %if.end.45

if.else.36:                                       ; preds = %for.body
  %20 = load i32, i32* @target_flags, align 4
  %and37 = and i32 %20, 33554432
  %tobool38 = icmp ne i32 %and37, 0
  %cond39 = select i1 %tobool38, i32 64, i32 32
  %div40 = sdiv i32 %cond39, 8
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 %div40, i64 0, i8* null)
  %21 = load i32, i32* @target_flags, align 4
  %and41 = and i32 %21, 33554432
  %tobool42 = icmp ne i32 %and41, 0
  %cond43 = select i1 %tobool42, i32 64, i32 32
  %div44 = sdiv i32 %cond43, 8
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 %div44, i64 0, i8* null)
  %22 = load i8*, i8** @output_ranges.start_fmt, align 8
  store i8* %22, i8** %fmt, align 8
  br label %if.end.45

if.end.45:                                        ; preds = %if.else.36, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end.45
  %23 = load i32, i32* %i, align 4
  %inc = add i32 %23, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare void @ht_forall(%struct.ht*, i32 (%struct.cpp_reader*, %struct.ht_identifier*, i8*)*, i8*) #1

; Function Attrs: nounwind uwtable
define internal i32 @output_indirect_string(%struct.cpp_reader* %pfile, %struct.ht_identifier* %h, i8* %v) #0 {
entry:
  %pfile.addr = alloca %struct.cpp_reader*, align 8
  %h.addr = alloca %struct.ht_identifier*, align 8
  %v.addr = alloca i8*, align 8
  %node = alloca %struct.indirect_string_node*, align 8
  store %struct.cpp_reader* %pfile, %struct.cpp_reader** %pfile.addr, align 8
  store %struct.ht_identifier* %h, %struct.ht_identifier** %h.addr, align 8
  store i8* %v, i8** %v.addr, align 8
  %0 = load %struct.ht_identifier*, %struct.ht_identifier** %h.addr, align 8
  %1 = bitcast %struct.ht_identifier* %0 to %struct.indirect_string_node*
  store %struct.indirect_string_node* %1, %struct.indirect_string_node** %node, align 8
  %2 = load %struct.indirect_string_node*, %struct.indirect_string_node** %node, align 8
  %form = getelementptr inbounds %struct.indirect_string_node, %struct.indirect_string_node* %2, i32 0, i32 2
  %3 = load i32, i32* %form, align 4
  %cmp = icmp eq i32 %3, 14
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @named_section_flags(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.497, i32 0, i32 0), i32 99329)
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8
  %5 = load %struct.indirect_string_node*, %struct.indirect_string_node** %node, align 8
  %label = getelementptr inbounds %struct.indirect_string_node, %struct.indirect_string_node* %5, i32 0, i32 3
  %6 = load i8*, i8** %label, align 8
  call void @assemble_name(%struct._IO_FILE* %4, i8* %6)
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8
  %call = call i32 @fputs(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), %struct._IO_FILE* %7)
  %8 = load %struct.indirect_string_node*, %struct.indirect_string_node** %node, align 8
  %id = getelementptr inbounds %struct.indirect_string_node, %struct.indirect_string_node* %8, i32 0, i32 0
  %str = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 1
  %9 = load i8*, i8** %str, align 8
  %10 = load %struct.indirect_string_node*, %struct.indirect_string_node** %node, align 8
  %id1 = getelementptr inbounds %struct.indirect_string_node, %struct.indirect_string_node* %10, i32 0, i32 0
  %len = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id1, i32 0, i32 0
  %11 = load i32, i32* %len, align 4
  %add = add i32 %11, 1
  call void @assemble_string(i8* %9, i32 %add)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 1
}

; Function Attrs: nounwind uwtable
define internal void @reverse_die_lists(%struct.die_struct* %die) #0 {
entry:
  %die.addr = alloca %struct.die_struct*, align 8
  %c = alloca %struct.die_struct*, align 8
  %cp = alloca %struct.die_struct*, align 8
  %cn = alloca %struct.die_struct*, align 8
  %a = alloca %struct.dw_attr_struct*, align 8
  %ap = alloca %struct.dw_attr_struct*, align 8
  %an = alloca %struct.dw_attr_struct*, align 8
  store %struct.die_struct* %die, %struct.die_struct** %die.addr, align 8
  %0 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %die_attr = getelementptr inbounds %struct.die_struct, %struct.die_struct* %0, i32 0, i32 2
  %1 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %die_attr, align 8
  store %struct.dw_attr_struct* %1, %struct.dw_attr_struct** %a, align 8
  store %struct.dw_attr_struct* null, %struct.dw_attr_struct** %ap, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %tobool = icmp ne %struct.dw_attr_struct* %2, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %dw_attr_next = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %3, i32 0, i32 1
  %4 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %dw_attr_next, align 8
  store %struct.dw_attr_struct* %4, %struct.dw_attr_struct** %an, align 8
  %5 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %ap, align 8
  %6 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %dw_attr_next1 = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %6, i32 0, i32 1
  store %struct.dw_attr_struct* %5, %struct.dw_attr_struct** %dw_attr_next1, align 8
  %7 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  store %struct.dw_attr_struct* %7, %struct.dw_attr_struct** %ap, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %an, align 8
  store %struct.dw_attr_struct* %8, %struct.dw_attr_struct** %a, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %9 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %ap, align 8
  %10 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %die_attr2 = getelementptr inbounds %struct.die_struct, %struct.die_struct* %10, i32 0, i32 2
  store %struct.dw_attr_struct* %9, %struct.dw_attr_struct** %die_attr2, align 8
  %11 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %die_child = getelementptr inbounds %struct.die_struct, %struct.die_struct* %11, i32 0, i32 4
  %12 = load %struct.die_struct*, %struct.die_struct** %die_child, align 8
  store %struct.die_struct* %12, %struct.die_struct** %c, align 8
  store %struct.die_struct* null, %struct.die_struct** %cp, align 8
  br label %for.cond.3

for.cond.3:                                       ; preds = %for.inc.7, %for.end
  %13 = load %struct.die_struct*, %struct.die_struct** %c, align 8
  %tobool4 = icmp ne %struct.die_struct* %13, null
  br i1 %tobool4, label %for.body.5, label %for.end.8

for.body.5:                                       ; preds = %for.cond.3
  %14 = load %struct.die_struct*, %struct.die_struct** %c, align 8
  %die_sib = getelementptr inbounds %struct.die_struct, %struct.die_struct* %14, i32 0, i32 5
  %15 = load %struct.die_struct*, %struct.die_struct** %die_sib, align 8
  store %struct.die_struct* %15, %struct.die_struct** %cn, align 8
  %16 = load %struct.die_struct*, %struct.die_struct** %cp, align 8
  %17 = load %struct.die_struct*, %struct.die_struct** %c, align 8
  %die_sib6 = getelementptr inbounds %struct.die_struct, %struct.die_struct* %17, i32 0, i32 5
  store %struct.die_struct* %16, %struct.die_struct** %die_sib6, align 8
  %18 = load %struct.die_struct*, %struct.die_struct** %c, align 8
  store %struct.die_struct* %18, %struct.die_struct** %cp, align 8
  br label %for.inc.7

for.inc.7:                                        ; preds = %for.body.5
  %19 = load %struct.die_struct*, %struct.die_struct** %cn, align 8
  store %struct.die_struct* %19, %struct.die_struct** %c, align 8
  br label %for.cond.3

for.end.8:                                        ; preds = %for.cond.3
  %20 = load %struct.die_struct*, %struct.die_struct** %cp, align 8
  %21 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %die_child9 = getelementptr inbounds %struct.die_struct, %struct.die_struct* %21, i32 0, i32 4
  store %struct.die_struct* %20, %struct.die_struct** %die_child9, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @is_comdat_die(%struct.die_struct* %c) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca %struct.die_struct*, align 8
  %t = alloca %struct.die_struct*, align 8
  store %struct.die_struct* %c, %struct.die_struct** %c.addr, align 8
  %0 = load %struct.die_struct*, %struct.die_struct** %c.addr, align 8
  %die_tag = getelementptr inbounds %struct.die_struct, %struct.die_struct* %0, i32 0, i32 0
  %1 = load i32, i32* %die_tag, align 4
  %cmp = icmp eq i32 %1, 36
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.die_struct*, %struct.die_struct** %c.addr, align 8
  %die_tag1 = getelementptr inbounds %struct.die_struct, %struct.die_struct* %2, i32 0, i32 0
  %3 = load i32, i32* %die_tag1, align 4
  %cmp2 = icmp eq i32 %3, 15
  br i1 %cmp2, label %if.then.11, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %4 = load %struct.die_struct*, %struct.die_struct** %c.addr, align 8
  %die_tag3 = getelementptr inbounds %struct.die_struct, %struct.die_struct* %4, i32 0, i32 0
  %5 = load i32, i32* %die_tag3, align 4
  %cmp4 = icmp eq i32 %5, 16
  br i1 %cmp4, label %if.then.11, label %lor.lhs.false.5

lor.lhs.false.5:                                  ; preds = %lor.lhs.false
  %6 = load %struct.die_struct*, %struct.die_struct** %c.addr, align 8
  %die_tag6 = getelementptr inbounds %struct.die_struct, %struct.die_struct* %6, i32 0, i32 0
  %7 = load i32, i32* %die_tag6, align 4
  %cmp7 = icmp eq i32 %7, 38
  br i1 %cmp7, label %if.then.11, label %lor.lhs.false.8

lor.lhs.false.8:                                  ; preds = %lor.lhs.false.5
  %8 = load %struct.die_struct*, %struct.die_struct** %c.addr, align 8
  %die_tag9 = getelementptr inbounds %struct.die_struct, %struct.die_struct* %8, i32 0, i32 0
  %9 = load i32, i32* %die_tag9, align 4
  %cmp10 = icmp eq i32 %9, 53
  br i1 %cmp10, label %if.then.11, label %if.end.13

if.then.11:                                       ; preds = %lor.lhs.false.8, %lor.lhs.false.5, %lor.lhs.false, %if.end
  %10 = load %struct.die_struct*, %struct.die_struct** %c.addr, align 8
  %call = call %struct.die_struct* @get_AT_ref(%struct.die_struct* %10, i32 73)
  store %struct.die_struct* %call, %struct.die_struct** %t, align 8
  %11 = load %struct.die_struct*, %struct.die_struct** %t, align 8
  %tobool = icmp ne %struct.die_struct* %11, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.11
  %12 = load %struct.die_struct*, %struct.die_struct** %t, align 8
  %call12 = call i32 @is_comdat_die(%struct.die_struct* %12)
  br label %cond.end

cond.false:                                       ; preds = %if.then.11
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call12, %cond.true ], [ 0, %cond.false ]
  store i32 %cond, i32* %retval
  br label %return

if.end.13:                                        ; preds = %lor.lhs.false.8
  %13 = load %struct.die_struct*, %struct.die_struct** %c.addr, align 8
  %call14 = call i32 @is_type_die(%struct.die_struct* %13)
  store i32 %call14, i32* %retval
  br label %return

return:                                           ; preds = %if.end.13, %cond.end, %if.then
  %14 = load i32, i32* %retval
  ret i32 %14
}

; Function Attrs: nounwind uwtable
define internal %struct.die_struct* @push_new_compile_unit(%struct.die_struct* %old_unit, %struct.die_struct* %bincl_die) #0 {
entry:
  %old_unit.addr = alloca %struct.die_struct*, align 8
  %bincl_die.addr = alloca %struct.die_struct*, align 8
  %filename = alloca i8*, align 8
  %new_unit = alloca %struct.die_struct*, align 8
  store %struct.die_struct* %old_unit, %struct.die_struct** %old_unit.addr, align 8
  store %struct.die_struct* %bincl_die, %struct.die_struct** %bincl_die.addr, align 8
  %0 = load %struct.die_struct*, %struct.die_struct** %bincl_die.addr, align 8
  %call = call i8* @get_AT_string(%struct.die_struct* %0, i32 3)
  store i8* %call, i8** %filename, align 8
  %1 = load i8*, i8** %filename, align 8
  %call1 = call %struct.die_struct* @gen_compile_unit_die(i8* %1)
  store %struct.die_struct* %call1, %struct.die_struct** %new_unit, align 8
  %2 = load %struct.die_struct*, %struct.die_struct** %old_unit.addr, align 8
  %3 = load %struct.die_struct*, %struct.die_struct** %new_unit, align 8
  %die_sib = getelementptr inbounds %struct.die_struct, %struct.die_struct* %3, i32 0, i32 5
  store %struct.die_struct* %2, %struct.die_struct** %die_sib, align 8
  %4 = load %struct.die_struct*, %struct.die_struct** %new_unit, align 8
  ret %struct.die_struct* %4
}

; Function Attrs: nounwind uwtable
define internal %struct.die_struct* @pop_compile_unit(%struct.die_struct* %old_unit) #0 {
entry:
  %old_unit.addr = alloca %struct.die_struct*, align 8
  %new_unit = alloca %struct.die_struct*, align 8
  store %struct.die_struct* %old_unit, %struct.die_struct** %old_unit.addr, align 8
  %0 = load %struct.die_struct*, %struct.die_struct** %old_unit.addr, align 8
  %die_sib = getelementptr inbounds %struct.die_struct, %struct.die_struct* %0, i32 0, i32 5
  %1 = load %struct.die_struct*, %struct.die_struct** %die_sib, align 8
  store %struct.die_struct* %1, %struct.die_struct** %new_unit, align 8
  %2 = load %struct.die_struct*, %struct.die_struct** %old_unit.addr, align 8
  %die_sib1 = getelementptr inbounds %struct.die_struct, %struct.die_struct* %2, i32 0, i32 5
  store %struct.die_struct* null, %struct.die_struct** %die_sib1, align 8
  %3 = load %struct.die_struct*, %struct.die_struct** %new_unit, align 8
  ret %struct.die_struct* %3
}

; Function Attrs: nounwind uwtable
define internal void @assign_symbol_names(%struct.die_struct* %die) #0 {
entry:
  %die.addr = alloca %struct.die_struct*, align 8
  %c = alloca %struct.die_struct*, align 8
  %p = alloca i8*, align 8
  store %struct.die_struct* %die, %struct.die_struct** %die.addr, align 8
  %0 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %call = call i32 @is_symbol_die(%struct.die_struct* %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end.8

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** @comdat_symbol_id, align 8
  %tobool1 = icmp ne i8* %1, null
  br i1 %tobool1, label %if.then.2, label %if.else

if.then.2:                                        ; preds = %if.then
  %2 = load i8*, i8** @comdat_symbol_id, align 8
  %call3 = call i64 @strlen(i8* %2) #7
  %add = add i64 %call3, 64
  %3 = alloca i8, i64 %add
  store i8* %3, i8** %p, align 8
  %4 = load i8*, i8** %p, align 8
  %5 = load i8*, i8** @comdat_symbol_id, align 8
  %6 = load i32, i32* @comdat_symbol_number, align 4
  %inc = add i32 %6, 1
  store i32 %inc, i32* @comdat_symbol_number, align 4
  %call4 = call i32 (i8*, i8*, ...) @sprintf(i8* %4, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.431, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.432, i32 0, i32 0), i8* %5, i32 %6) #5
  %7 = load i8*, i8** %p, align 8
  %call5 = call noalias i8* @xstrdup(i8* %7)
  %8 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %die_symbol = getelementptr inbounds %struct.die_struct, %struct.die_struct* %8, i32 0, i32 1
  store i8* %call5, i8** %die_symbol, align 8
  br label %if.end

if.else:                                          ; preds = %if.then
  %call6 = call i8* @gen_internal_sym(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.433, i32 0, i32 0))
  %9 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %die_symbol7 = getelementptr inbounds %struct.die_struct, %struct.die_struct* %9, i32 0, i32 1
  store i8* %call6, i8** %die_symbol7, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.2
  br label %if.end.8

if.end.8:                                         ; preds = %if.end, %entry
  %10 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %die_child = getelementptr inbounds %struct.die_struct, %struct.die_struct* %10, i32 0, i32 4
  %11 = load %struct.die_struct*, %struct.die_struct** %die_child, align 8
  store %struct.die_struct* %11, %struct.die_struct** %c, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.8
  %12 = load %struct.die_struct*, %struct.die_struct** %c, align 8
  %cmp = icmp ne %struct.die_struct* %12, null
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %13 = load %struct.die_struct*, %struct.die_struct** %c, align 8
  call void @assign_symbol_names(%struct.die_struct* %13)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %14 = load %struct.die_struct*, %struct.die_struct** %c, align 8
  %die_sib = getelementptr inbounds %struct.die_struct, %struct.die_struct* %14, i32 0, i32 5
  %15 = load %struct.die_struct*, %struct.die_struct** %die_sib, align 8
  store %struct.die_struct* %15, %struct.die_struct** %c, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @compute_section_prefix(%struct.die_struct* %unit_die) #0 {
entry:
  %unit_die.addr = alloca %struct.die_struct*, align 8
  %base = alloca i8*, align 8
  %name = alloca i8*, align 8
  %p = alloca i8*, align 8
  %i = alloca i32, align 4
  %checksum = alloca [16 x i8], align 16
  %ctx = alloca %struct.md5_ctx, align 4
  store %struct.die_struct* %unit_die, %struct.die_struct** %unit_die.addr, align 8
  %0 = load %struct.die_struct*, %struct.die_struct** %unit_die.addr, align 8
  %call = call i8* @get_AT_string(%struct.die_struct* %0, i32 3)
  %call1 = call i8* @lbasename(i8* %call)
  store i8* %call1, i8** %base, align 8
  %1 = load i8*, i8** %base, align 8
  %call2 = call i64 @strlen(i8* %1) #7
  %add = add i64 %call2, 64
  %2 = alloca i8, i64 %add
  store i8* %2, i8** %name, align 8
  call void @md5_init_ctx(%struct.md5_ctx* %ctx)
  %3 = load %struct.die_struct*, %struct.die_struct** %unit_die.addr, align 8
  call void @die_checksum(%struct.die_struct* %3, %struct.md5_ctx* %ctx)
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %checksum, i32 0, i32 0
  %call3 = call i8* @md5_finish_ctx(%struct.md5_ctx* %ctx, i8* %arraydecay)
  %4 = load i8*, i8** %name, align 8
  %5 = load i8*, i8** %base, align 8
  %call4 = call i32 (i8*, i8*, ...) @sprintf(i8* %4, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.434, i32 0, i32 0), i8* %5) #5
  %6 = load i8*, i8** %name, align 8
  call void @clean_symbol_name(i8* %6)
  %7 = load i8*, i8** %name, align 8
  %8 = load i8*, i8** %name, align 8
  %call5 = call i64 @strlen(i8* %8) #7
  %add.ptr = getelementptr inbounds i8, i8* %7, i64 %call5
  store i8* %add.ptr, i8** %p, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %9 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %9, 4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %10 = load i8*, i8** %p, align 8
  %11 = load i32, i32* %i, align 4
  %idxprom = sext i32 %11 to i64
  %arrayidx = getelementptr inbounds [16 x i8], [16 x i8]* %checksum, i32 0, i64 %idxprom
  %12 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %12 to i32
  %call6 = call i32 (i8*, i8*, ...) @sprintf(i8* %10, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.435, i32 0, i32 0), i32 %conv) #5
  %13 = load i8*, i8** %p, align 8
  %add.ptr7 = getelementptr inbounds i8, i8* %13, i64 2
  store i8* %add.ptr7, i8** %p, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load i8*, i8** %name, align 8
  %call8 = call noalias i8* @xstrdup(i8* %15)
  %16 = load %struct.die_struct*, %struct.die_struct** %unit_die.addr, align 8
  %die_symbol = getelementptr inbounds %struct.die_struct, %struct.die_struct* %16, i32 0, i32 1
  store i8* %call8, i8** %die_symbol, align 8
  store i8* %call8, i8** @comdat_symbol_id, align 8
  store i32 0, i32* @comdat_symbol_number, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @is_type_die(%struct.die_struct* %die) #0 {
entry:
  %retval = alloca i32, align 4
  %die.addr = alloca %struct.die_struct*, align 8
  store %struct.die_struct* %die, %struct.die_struct** %die.addr, align 8
  %0 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %die_tag = getelementptr inbounds %struct.die_struct, %struct.die_struct* %0, i32 0, i32 0
  %1 = load i32, i32* %die_tag, align 4
  switch i32 %1, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb
    i32 4, label %sw.bb
    i32 15, label %sw.bb
    i32 16, label %sw.bb
    i32 18, label %sw.bb
    i32 19, label %sw.bb
    i32 21, label %sw.bb
    i32 23, label %sw.bb
    i32 31, label %sw.bb
    i32 32, label %sw.bb
    i32 33, label %sw.bb
    i32 36, label %sw.bb
    i32 38, label %sw.bb
    i32 41, label %sw.bb
    i32 45, label %sw.bb
    i32 53, label %sw.bb
  ]

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i32 1, i32* %retval
  br label %return

sw.default:                                       ; preds = %entry
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %sw.default, %sw.bb
  %2 = load i32, i32* %retval
  ret i32 %2
}

; Function Attrs: inlinehint nounwind uwtable
define internal i8* @get_AT_string(%struct.die_struct* %die, i32 %attr_kind) #3 {
entry:
  %die.addr = alloca %struct.die_struct*, align 8
  %attr_kind.addr = alloca i32, align 4
  %a = alloca %struct.dw_attr_struct*, align 8
  store %struct.die_struct* %die, %struct.die_struct** %die.addr, align 8
  store i32 %attr_kind, i32* %attr_kind.addr, align 4
  %0 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %1 = load i32, i32* %attr_kind.addr, align 4
  %call = call %struct.dw_attr_struct* @get_AT(%struct.die_struct* %0, i32 %1)
  store %struct.dw_attr_struct* %call, %struct.dw_attr_struct** %a, align 8
  %2 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %tobool = icmp ne %struct.dw_attr_struct* %2, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %call1 = call i8* @AT_string(%struct.dw_attr_struct* %3)
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %call1, %cond.true ], [ null, %cond.false ]
  ret i8* %cond
}

; Function Attrs: nounwind uwtable
define internal i32 @is_symbol_die(%struct.die_struct* %c) #0 {
entry:
  %c.addr = alloca %struct.die_struct*, align 8
  store %struct.die_struct* %c, %struct.die_struct** %c.addr, align 8
  %0 = load %struct.die_struct*, %struct.die_struct** %c.addr, align 8
  %call = call i32 @is_type_die(%struct.die_struct* %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %1 = load %struct.die_struct*, %struct.die_struct** %c.addr, align 8
  %call1 = call %struct.dw_attr_struct* @get_AT(%struct.die_struct* %1, i32 60)
  %tobool2 = icmp ne %struct.dw_attr_struct* %call1, null
  br i1 %tobool2, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %lor.rhs
  %2 = load %struct.die_struct*, %struct.die_struct** %c.addr, align 8
  %call3 = call %struct.dw_attr_struct* @get_AT(%struct.die_struct* %2, i32 71)
  %tobool4 = icmp ne %struct.dw_attr_struct* %call3, null
  %lnot = xor i1 %tobool4, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %3 = phi i1 [ false, %lor.rhs ], [ %lnot, %land.rhs ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %entry
  %4 = phi i1 [ true, %entry ], [ %3, %land.end ]
  %lor.ext = zext i1 %4 to i32
  ret i32 %lor.ext
}

; Function Attrs: nounwind uwtable
define internal i8* @gen_internal_sym(i8* %prefix) #0 {
entry:
  %prefix.addr = alloca i8*, align 8
  %buf = alloca [256 x i8], align 16
  store i8* %prefix, i8** %prefix.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  %0 = load i8*, i8** %prefix.addr, align 8
  %1 = load i32, i32* @gen_internal_sym.label_num, align 4
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* @gen_internal_sym.label_num, align 4
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* %0, i32 %1) #5
  br label %do.end

do.end:                                           ; preds = %do.body
  %arraydecay1 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  %call2 = call noalias i8* @xstrdup(i8* %arraydecay1)
  ret i8* %call2
}

declare i8* @lbasename(i8*) #1

declare void @md5_init_ctx(%struct.md5_ctx*) #1

; Function Attrs: nounwind uwtable
define internal void @die_checksum(%struct.die_struct* %die, %struct.md5_ctx* %ctx) #0 {
entry:
  %die.addr = alloca %struct.die_struct*, align 8
  %ctx.addr = alloca %struct.md5_ctx*, align 8
  %c = alloca %struct.die_struct*, align 8
  %a = alloca %struct.dw_attr_struct*, align 8
  store %struct.die_struct* %die, %struct.die_struct** %die.addr, align 8
  store %struct.md5_ctx* %ctx, %struct.md5_ctx** %ctx.addr, align 8
  %0 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %die_tag = getelementptr inbounds %struct.die_struct, %struct.die_struct* %0, i32 0, i32 0
  %1 = bitcast i32* %die_tag to i8*
  %2 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8
  call void @md5_process_bytes(i8* %1, i64 4, %struct.md5_ctx* %2)
  %3 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %die_attr = getelementptr inbounds %struct.die_struct, %struct.die_struct* %3, i32 0, i32 2
  %4 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %die_attr, align 8
  store %struct.dw_attr_struct* %4, %struct.dw_attr_struct** %a, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %tobool = icmp ne %struct.dw_attr_struct* %5, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %7 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8
  call void @attr_checksum(%struct.dw_attr_struct* %6, %struct.md5_ctx* %7)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %dw_attr_next = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %8, i32 0, i32 1
  %9 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %dw_attr_next, align 8
  store %struct.dw_attr_struct* %9, %struct.dw_attr_struct** %a, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %die_child = getelementptr inbounds %struct.die_struct, %struct.die_struct* %10, i32 0, i32 4
  %11 = load %struct.die_struct*, %struct.die_struct** %die_child, align 8
  store %struct.die_struct* %11, %struct.die_struct** %c, align 8
  br label %for.cond.1

for.cond.1:                                       ; preds = %for.inc.4, %for.end
  %12 = load %struct.die_struct*, %struct.die_struct** %c, align 8
  %tobool2 = icmp ne %struct.die_struct* %12, null
  br i1 %tobool2, label %for.body.3, label %for.end.5

for.body.3:                                       ; preds = %for.cond.1
  %13 = load %struct.die_struct*, %struct.die_struct** %c, align 8
  %14 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8
  call void @die_checksum(%struct.die_struct* %13, %struct.md5_ctx* %14)
  br label %for.inc.4

for.inc.4:                                        ; preds = %for.body.3
  %15 = load %struct.die_struct*, %struct.die_struct** %c, align 8
  %die_sib = getelementptr inbounds %struct.die_struct, %struct.die_struct* %15, i32 0, i32 5
  %16 = load %struct.die_struct*, %struct.die_struct** %die_sib, align 8
  store %struct.die_struct* %16, %struct.die_struct** %c, align 8
  br label %for.cond.1

for.end.5:                                        ; preds = %for.cond.1
  ret void
}

declare i8* @md5_finish_ctx(%struct.md5_ctx*, i8*) #1

declare void @clean_symbol_name(i8*) #1

declare void @md5_process_bytes(i8*, i64, %struct.md5_ctx*) #1

; Function Attrs: nounwind uwtable
define internal void @attr_checksum(%struct.dw_attr_struct* %at, %struct.md5_ctx* %ctx) #0 {
entry:
  %at.addr = alloca %struct.dw_attr_struct*, align 8
  %ctx.addr = alloca %struct.md5_ctx*, align 8
  %loc = alloca %struct.dw_loc_descr_struct*, align 8
  %r = alloca %struct.rtx_def*, align 8
  store %struct.dw_attr_struct* %at, %struct.dw_attr_struct** %at.addr, align 8
  store %struct.md5_ctx* %ctx, %struct.md5_ctx** %ctx.addr, align 8
  %0 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %at.addr, align 8
  %dw_attr = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %0, i32 0, i32 0
  %1 = bitcast i32* %dw_attr to i8*
  %2 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8
  call void @md5_process_bytes(i8* %1, i64 4, %struct.md5_ctx* %2)
  %3 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %at.addr, align 8
  %dw_attr1 = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %3, i32 0, i32 0
  %4 = load i32, i32* %dw_attr1, align 4
  %cmp = icmp eq i32 %4, 58
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %5 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %at.addr, align 8
  %dw_attr2 = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %5, i32 0, i32 0
  %6 = load i32, i32* %dw_attr2, align 4
  %cmp3 = icmp eq i32 %6, 37
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %sw.epilog.41

if.end:                                           ; preds = %lor.lhs.false
  %7 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %at.addr, align 8
  %call = call i32 @AT_class(%struct.dw_attr_struct* %7)
  switch i32 %call, label %sw.default.40 [
    i32 5, label %sw.bb
    i32 6, label %sw.bb.4
    i32 7, label %sw.bb.7
    i32 8, label %sw.bb.10
    i32 9, label %sw.bb.13
    i32 14, label %sw.bb.16
    i32 0, label %sw.bb.20
    i32 1, label %sw.bb.27
    i32 2, label %sw.bb.30
    i32 10, label %sw.bb.32
    i32 11, label %sw.bb.39
    i32 12, label %sw.bb.39
    i32 13, label %sw.bb.39
  ]

sw.bb:                                            ; preds = %if.end
  %8 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %at.addr, align 8
  %dw_attr_val = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %8, i32 0, i32 2
  %v = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_attr_val, i32 0, i32 1
  %val_int = bitcast %union.anon.3* %v to i64*
  %9 = bitcast i64* %val_int to i8*
  %10 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8
  call void @md5_process_bytes(i8* %9, i64 8, %struct.md5_ctx* %10)
  br label %sw.epilog.41

sw.bb.4:                                          ; preds = %if.end
  %11 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %at.addr, align 8
  %dw_attr_val5 = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %11, i32 0, i32 2
  %v6 = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_attr_val5, i32 0, i32 1
  %val_unsigned = bitcast %union.anon.3* %v6 to i64*
  %12 = bitcast i64* %val_unsigned to i8*
  %13 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8
  call void @md5_process_bytes(i8* %12, i64 8, %struct.md5_ctx* %13)
  br label %sw.epilog.41

sw.bb.7:                                          ; preds = %if.end
  %14 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %at.addr, align 8
  %dw_attr_val8 = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %14, i32 0, i32 2
  %v9 = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_attr_val8, i32 0, i32 1
  %val_long_long = bitcast %union.anon.3* %v9 to %struct.dw_long_long_struct*
  %15 = bitcast %struct.dw_long_long_struct* %val_long_long to i8*
  %16 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8
  call void @md5_process_bytes(i8* %15, i64 16, %struct.md5_ctx* %16)
  br label %sw.epilog.41

sw.bb.10:                                         ; preds = %if.end
  %17 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %at.addr, align 8
  %dw_attr_val11 = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %17, i32 0, i32 2
  %v12 = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_attr_val11, i32 0, i32 1
  %val_float = bitcast %union.anon.3* %v12 to %struct.dw_fp_struct*
  %18 = bitcast %struct.dw_fp_struct* %val_float to i8*
  %19 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8
  call void @md5_process_bytes(i8* %18, i64 16, %struct.md5_ctx* %19)
  br label %sw.epilog.41

sw.bb.13:                                         ; preds = %if.end
  %20 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %at.addr, align 8
  %dw_attr_val14 = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %20, i32 0, i32 2
  %v15 = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_attr_val14, i32 0, i32 1
  %val_flag = bitcast %union.anon.3* %v15 to i8*
  %21 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8
  call void @md5_process_bytes(i8* %val_flag, i64 1, %struct.md5_ctx* %21)
  br label %sw.epilog.41

sw.bb.16:                                         ; preds = %if.end
  %22 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %at.addr, align 8
  %call17 = call i8* @AT_string(%struct.dw_attr_struct* %22)
  %23 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %at.addr, align 8
  %call18 = call i8* @AT_string(%struct.dw_attr_struct* %23)
  %call19 = call i64 @strlen(i8* %call18) #7
  %24 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8
  call void @md5_process_bytes(i8* %call17, i64 %call19, %struct.md5_ctx* %24)
  br label %sw.epilog.41

sw.bb.20:                                         ; preds = %if.end
  %25 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %at.addr, align 8
  %call21 = call %struct.rtx_def* @AT_addr(%struct.dw_attr_struct* %25)
  store %struct.rtx_def* %call21, %struct.rtx_def** %r, align 8
  %26 = load %struct.rtx_def*, %struct.rtx_def** %r, align 8
  %27 = bitcast %struct.rtx_def* %26 to i32*
  %bf.load = load i32, i32* %27, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %sw.default [
    i32 68, label %sw.bb.22
  ]

sw.bb.22:                                         ; preds = %sw.bb.20
  %28 = load %struct.rtx_def*, %struct.rtx_def** %r, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtstr = bitcast %union.rtunion_def* %arrayidx to i8**
  %29 = load i8*, i8** %rtstr, align 8
  %30 = load %struct.rtx_def*, %struct.rtx_def** %r, align 8
  %fld23 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %30, i32 0, i32 1
  %arrayidx24 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld23, i32 0, i64 0
  %rtstr25 = bitcast %union.rtunion_def* %arrayidx24 to i8**
  %31 = load i8*, i8** %rtstr25, align 8
  %call26 = call i64 @strlen(i8* %31) #7
  %32 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8
  call void @md5_process_bytes(i8* %29, i64 %call26, %struct.md5_ctx* %32)
  br label %sw.epilog

sw.default:                                       ; preds = %sw.bb.20
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 5453, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @__FUNCTION__.attr_checksum, i32 0, i32 0)) #8
  unreachable

sw.epilog:                                        ; preds = %sw.bb.22
  br label %sw.epilog.41

sw.bb.27:                                         ; preds = %if.end
  %33 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %at.addr, align 8
  %dw_attr_val28 = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %33, i32 0, i32 2
  %v29 = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_attr_val28, i32 0, i32 1
  %val_offset = bitcast %union.anon.3* %v29 to i64*
  %34 = bitcast i64* %val_offset to i8*
  %35 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8
  call void @md5_process_bytes(i8* %34, i64 8, %struct.md5_ctx* %35)
  br label %sw.epilog.41

sw.bb.30:                                         ; preds = %if.end
  %36 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %at.addr, align 8
  %call31 = call %struct.dw_loc_descr_struct* @AT_loc(%struct.dw_attr_struct* %36)
  store %struct.dw_loc_descr_struct* %call31, %struct.dw_loc_descr_struct** %loc, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %sw.bb.30
  %37 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %loc, align 8
  %tobool = icmp ne %struct.dw_loc_descr_struct* %37, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %38 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %loc, align 8
  %39 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8
  call void @loc_checksum(%struct.dw_loc_descr_struct* %38, %struct.md5_ctx* %39)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %40 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %loc, align 8
  %dw_loc_next = getelementptr inbounds %struct.dw_loc_descr_struct, %struct.dw_loc_descr_struct* %40, i32 0, i32 0
  %41 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %dw_loc_next, align 8
  store %struct.dw_loc_descr_struct* %41, %struct.dw_loc_descr_struct** %loc, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %sw.epilog.41

sw.bb.32:                                         ; preds = %if.end
  %42 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %at.addr, align 8
  %call33 = call %struct.die_struct* @AT_ref(%struct.dw_attr_struct* %42)
  %die_offset = getelementptr inbounds %struct.die_struct, %struct.die_struct* %call33, i32 0, i32 6
  %43 = load i64, i64* %die_offset, align 8
  %tobool34 = icmp ne i64 %43, 0
  br i1 %tobool34, label %if.then.35, label %if.end.38

if.then.35:                                       ; preds = %sw.bb.32
  %44 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %at.addr, align 8
  %call36 = call %struct.die_struct* @AT_ref(%struct.dw_attr_struct* %44)
  %die_offset37 = getelementptr inbounds %struct.die_struct, %struct.die_struct* %call36, i32 0, i32 6
  %45 = bitcast i64* %die_offset37 to i8*
  %46 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8
  call void @md5_process_bytes(i8* %45, i64 8, %struct.md5_ctx* %46)
  br label %if.end.38

if.end.38:                                        ; preds = %if.then.35, %sw.bb.32
  br label %sw.bb.39

sw.bb.39:                                         ; preds = %if.end, %if.end, %if.end, %if.end.38
  br label %sw.epilog.41

sw.default.40:                                    ; preds = %if.end
  br label %sw.epilog.41

sw.epilog.41:                                     ; preds = %if.then, %sw.default.40, %sw.bb.39, %for.end, %sw.bb.27, %sw.epilog, %sw.bb.16, %sw.bb.13, %sw.bb.10, %sw.bb.7, %sw.bb.4, %sw.bb
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal %struct.rtx_def* @AT_addr(%struct.dw_attr_struct* %a) #3 {
entry:
  %a.addr = alloca %struct.dw_attr_struct*, align 8
  store %struct.dw_attr_struct* %a, %struct.dw_attr_struct** %a.addr, align 8
  %0 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a.addr, align 8
  %tobool = icmp ne %struct.dw_attr_struct* %0, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a.addr, align 8
  %call = call i32 @AT_class(%struct.dw_attr_struct* %1)
  %cmp = icmp eq i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %2 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a.addr, align 8
  %dw_attr_val = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %2, i32 0, i32 2
  %v = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_attr_val, i32 0, i32 1
  %val_addr = bitcast %union.anon.3* %v to %struct.rtx_def**
  %3 = load %struct.rtx_def*, %struct.rtx_def** %val_addr, align 8
  ret %struct.rtx_def* %3

if.end:                                           ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 4706, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__FUNCTION__.AT_addr, i32 0, i32 0)) #8
  unreachable
}

; Function Attrs: inlinehint nounwind uwtable
define internal %struct.dw_loc_descr_struct* @AT_loc(%struct.dw_attr_struct* %a) #3 {
entry:
  %a.addr = alloca %struct.dw_attr_struct*, align 8
  store %struct.dw_attr_struct* %a, %struct.dw_attr_struct** %a.addr, align 8
  %0 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a.addr, align 8
  %tobool = icmp ne %struct.dw_attr_struct* %0, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a.addr, align 8
  %call = call i32 @AT_class(%struct.dw_attr_struct* %1)
  %cmp = icmp eq i32 %call, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %2 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a.addr, align 8
  %dw_attr_val = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %2, i32 0, i32 2
  %v = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_attr_val, i32 0, i32 1
  %val_loc = bitcast %union.anon.3* %v to %struct.dw_loc_descr_struct**
  %3 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %val_loc, align 8
  ret %struct.dw_loc_descr_struct* %3

if.end:                                           ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 4653, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__FUNCTION__.AT_loc, i32 0, i32 0)) #8
  unreachable
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @loc_checksum(%struct.dw_loc_descr_struct* %loc, %struct.md5_ctx* %ctx) #3 {
entry:
  %loc.addr = alloca %struct.dw_loc_descr_struct*, align 8
  %ctx.addr = alloca %struct.md5_ctx*, align 8
  store %struct.dw_loc_descr_struct* %loc, %struct.dw_loc_descr_struct** %loc.addr, align 8
  store %struct.md5_ctx* %ctx, %struct.md5_ctx** %ctx.addr, align 8
  %0 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %loc.addr, align 8
  %dw_loc_opc = getelementptr inbounds %struct.dw_loc_descr_struct, %struct.dw_loc_descr_struct* %0, i32 0, i32 1
  %1 = bitcast i32* %dw_loc_opc to i8*
  %2 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8
  call void @md5_process_bytes(i8* %1, i64 4, %struct.md5_ctx* %2)
  %3 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %loc.addr, align 8
  %dw_loc_oprnd1 = getelementptr inbounds %struct.dw_loc_descr_struct, %struct.dw_loc_descr_struct* %3, i32 0, i32 2
  %4 = bitcast %struct.dw_val_struct* %dw_loc_oprnd1 to i8*
  %5 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8
  call void @md5_process_bytes(i8* %4, i64 24, %struct.md5_ctx* %5)
  %6 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %loc.addr, align 8
  %dw_loc_oprnd2 = getelementptr inbounds %struct.dw_loc_descr_struct, %struct.dw_loc_descr_struct* %6, i32 0, i32 3
  %7 = bitcast %struct.dw_val_struct* %dw_loc_oprnd2 to i8*
  %8 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8
  call void @md5_process_bytes(i8* %7, i64 24, %struct.md5_ctx* %8)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @output_loc_list(%struct.dw_loc_list_struct* %list_head) #0 {
entry:
  %list_head.addr = alloca %struct.dw_loc_list_struct*, align 8
  %curr = alloca %struct.dw_loc_list_struct*, align 8
  %size = alloca i64, align 8
  store %struct.dw_loc_list_struct* %list_head, %struct.dw_loc_list_struct** %list_head.addr, align 8
  %0 = load %struct.dw_loc_list_struct*, %struct.dw_loc_list_struct** %list_head.addr, align 8
  store %struct.dw_loc_list_struct* %0, %struct.dw_loc_list_struct** %curr, align 8
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8
  %2 = load %struct.dw_loc_list_struct*, %struct.dw_loc_list_struct** %list_head.addr, align 8
  %ll_symbol = getelementptr inbounds %struct.dw_loc_list_struct, %struct.dw_loc_list_struct* %2, i32 0, i32 3
  %3 = load i8*, i8** %ll_symbol, align 8
  call void @assemble_name(%struct._IO_FILE* %1, i8* %3)
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8
  %call = call i32 @fputs(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), %struct._IO_FILE* %4)
  %5 = load %struct.dw_loc_list_struct*, %struct.dw_loc_list_struct** %curr, align 8
  %section = getelementptr inbounds %struct.dw_loc_list_struct, %struct.dw_loc_list_struct* %5, i32 0, i32 4
  %6 = load i8*, i8** %section, align 8
  %call1 = call i32 @strcmp(i8* %6, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.436, i32 0, i32 0)) #7
  %cmp = icmp eq i32 %call1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %7 = load i32, i32* @target_flags, align 4
  %and = and i32 %7, 33554432
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, i32 64, i32 32
  %div = sdiv i32 %cond, 8
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 %div, i64 -1, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.437, i32 0, i32 0))
  %8 = load i32, i32* @target_flags, align 4
  %and2 = and i32 %8, 33554432
  %tobool3 = icmp ne i32 %and2, 0
  %cond4 = select i1 %tobool3, i32 64, i32 32
  %div5 = sdiv i32 %cond4, 8
  %9 = load %struct.dw_loc_list_struct*, %struct.dw_loc_list_struct** %curr, align 8
  %section6 = getelementptr inbounds %struct.dw_loc_list_struct, %struct.dw_loc_list_struct* %9, i32 0, i32 4
  %10 = load i8*, i8** %section6, align 8
  call void (i32, i8*, i8*, ...) @dw2_asm_output_offset(i32 %div5, i8* %10, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.438, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %11 = load %struct.dw_loc_list_struct*, %struct.dw_loc_list_struct** %list_head.addr, align 8
  store %struct.dw_loc_list_struct* %11, %struct.dw_loc_list_struct** %curr, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %12 = load %struct.dw_loc_list_struct*, %struct.dw_loc_list_struct** %curr, align 8
  %cmp7 = icmp ne %struct.dw_loc_list_struct* %12, null
  br i1 %cmp7, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %13 = load i32, i32* @target_flags, align 4
  %and8 = and i32 %13, 33554432
  %tobool9 = icmp ne i32 %and8, 0
  %cond10 = select i1 %tobool9, i32 64, i32 32
  %div11 = sdiv i32 %cond10, 8
  %14 = load %struct.dw_loc_list_struct*, %struct.dw_loc_list_struct** %curr, align 8
  %begin = getelementptr inbounds %struct.dw_loc_list_struct, %struct.dw_loc_list_struct* %14, i32 0, i32 1
  %15 = load i8*, i8** %begin, align 8
  %16 = load %struct.dw_loc_list_struct*, %struct.dw_loc_list_struct** %curr, align 8
  %section12 = getelementptr inbounds %struct.dw_loc_list_struct, %struct.dw_loc_list_struct* %16, i32 0, i32 4
  %17 = load i8*, i8** %section12, align 8
  %18 = load %struct.dw_loc_list_struct*, %struct.dw_loc_list_struct** %list_head.addr, align 8
  %ll_symbol13 = getelementptr inbounds %struct.dw_loc_list_struct, %struct.dw_loc_list_struct* %18, i32 0, i32 3
  %19 = load i8*, i8** %ll_symbol13, align 8
  call void (i32, i8*, i8*, i8*, ...) @dw2_asm_output_delta(i32 %div11, i8* %15, i8* %17, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.439, i32 0, i32 0), i8* %19)
  %20 = load i32, i32* @target_flags, align 4
  %and14 = and i32 %20, 33554432
  %tobool15 = icmp ne i32 %and14, 0
  %cond16 = select i1 %tobool15, i32 64, i32 32
  %div17 = sdiv i32 %cond16, 8
  %21 = load %struct.dw_loc_list_struct*, %struct.dw_loc_list_struct** %curr, align 8
  %end = getelementptr inbounds %struct.dw_loc_list_struct, %struct.dw_loc_list_struct* %21, i32 0, i32 2
  %22 = load i8*, i8** %end, align 8
  %23 = load %struct.dw_loc_list_struct*, %struct.dw_loc_list_struct** %curr, align 8
  %section18 = getelementptr inbounds %struct.dw_loc_list_struct, %struct.dw_loc_list_struct* %23, i32 0, i32 4
  %24 = load i8*, i8** %section18, align 8
  %25 = load %struct.dw_loc_list_struct*, %struct.dw_loc_list_struct** %list_head.addr, align 8
  %ll_symbol19 = getelementptr inbounds %struct.dw_loc_list_struct, %struct.dw_loc_list_struct* %25, i32 0, i32 3
  %26 = load i8*, i8** %ll_symbol19, align 8
  call void (i32, i8*, i8*, i8*, ...) @dw2_asm_output_delta(i32 %div17, i8* %22, i8* %24, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.440, i32 0, i32 0), i8* %26)
  %27 = load %struct.dw_loc_list_struct*, %struct.dw_loc_list_struct** %curr, align 8
  %expr = getelementptr inbounds %struct.dw_loc_list_struct, %struct.dw_loc_list_struct* %27, i32 0, i32 5
  %28 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %expr, align 8
  %call20 = call i64 @size_of_locs(%struct.dw_loc_descr_struct* %28)
  store i64 %call20, i64* %size, align 8
  %29 = load i64, i64* %size, align 8
  %cmp21 = icmp ugt i64 %29, 65535
  br i1 %cmp21, label %if.then.22, label %if.end.23

if.then.22:                                       ; preds = %for.body
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 6233, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__FUNCTION__.output_loc_list, i32 0, i32 0)) #8
  unreachable

if.end.23:                                        ; preds = %for.body
  %30 = load i64, i64* %size, align 8
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 2, i64 %30, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.185, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.441, i32 0, i32 0))
  %31 = load %struct.dw_loc_list_struct*, %struct.dw_loc_list_struct** %curr, align 8
  %expr24 = getelementptr inbounds %struct.dw_loc_list_struct, %struct.dw_loc_list_struct* %31, i32 0, i32 5
  %32 = load %struct.dw_loc_descr_struct*, %struct.dw_loc_descr_struct** %expr24, align 8
  call void @output_loc_sequence(%struct.dw_loc_descr_struct* %32)
  br label %for.inc

for.inc:                                          ; preds = %if.end.23
  %33 = load %struct.dw_loc_list_struct*, %struct.dw_loc_list_struct** %curr, align 8
  %dw_loc_next = getelementptr inbounds %struct.dw_loc_list_struct, %struct.dw_loc_list_struct* %33, i32 0, i32 0
  %34 = load %struct.dw_loc_list_struct*, %struct.dw_loc_list_struct** %dw_loc_next, align 8
  store %struct.dw_loc_list_struct* %34, %struct.dw_loc_list_struct** %curr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %35 = load %struct.dw_loc_list_struct*, %struct.dw_loc_list_struct** %list_head.addr, align 8
  %ll_symbol25 = getelementptr inbounds %struct.dw_loc_list_struct, %struct.dw_loc_list_struct* %35, i32 0, i32 3
  %36 = load i8*, i8** %ll_symbol25, align 8
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 4, i64 0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.442, i32 0, i32 0), i8* %36)
  %37 = load %struct.dw_loc_list_struct*, %struct.dw_loc_list_struct** %list_head.addr, align 8
  %ll_symbol26 = getelementptr inbounds %struct.dw_loc_list_struct, %struct.dw_loc_list_struct* %37, i32 0, i32 3
  %38 = load i8*, i8** %ll_symbol26, align 8
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 4, i64 0, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.443, i32 0, i32 0), i8* %38)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @mark_dies(%struct.die_struct* %die) #0 {
entry:
  %die.addr = alloca %struct.die_struct*, align 8
  %c = alloca %struct.die_struct*, align 8
  store %struct.die_struct* %die, %struct.die_struct** %die.addr, align 8
  %0 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %die_mark = getelementptr inbounds %struct.die_struct, %struct.die_struct* %0, i32 0, i32 8
  store i32 1, i32* %die_mark, align 4
  %1 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %die_child = getelementptr inbounds %struct.die_struct, %struct.die_struct* %1, i32 0, i32 4
  %2 = load %struct.die_struct*, %struct.die_struct** %die_child, align 8
  store %struct.die_struct* %2, %struct.die_struct** %c, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load %struct.die_struct*, %struct.die_struct** %c, align 8
  %tobool = icmp ne %struct.die_struct* %3, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load %struct.die_struct*, %struct.die_struct** %c, align 8
  call void @mark_dies(%struct.die_struct* %4)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load %struct.die_struct*, %struct.die_struct** %c, align 8
  %die_sib = getelementptr inbounds %struct.die_struct, %struct.die_struct* %5, i32 0, i32 5
  %6 = load %struct.die_struct*, %struct.die_struct** %die_sib, align 8
  store %struct.die_struct* %6, %struct.die_struct** %c, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @build_abbrev_table(%struct.die_struct* %die) #0 {
entry:
  %die.addr = alloca %struct.die_struct*, align 8
  %abbrev_id = alloca i64, align 8
  %n_alloc = alloca i32, align 4
  %c = alloca %struct.die_struct*, align 8
  %d_attr = alloca %struct.dw_attr_struct*, align 8
  %a_attr = alloca %struct.dw_attr_struct*, align 8
  %abbrev = alloca %struct.die_struct*, align 8
  store %struct.die_struct* %die, %struct.die_struct** %die.addr, align 8
  %0 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %die_attr = getelementptr inbounds %struct.die_struct, %struct.die_struct* %0, i32 0, i32 2
  %1 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %die_attr, align 8
  store %struct.dw_attr_struct* %1, %struct.dw_attr_struct** %d_attr, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %d_attr, align 8
  %tobool = icmp ne %struct.dw_attr_struct* %2, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %d_attr, align 8
  %call = call i32 @AT_class(%struct.dw_attr_struct* %3)
  %cmp = icmp eq i32 %call, 10
  br i1 %cmp, label %land.lhs.true, label %if.end.6

land.lhs.true:                                    ; preds = %for.body
  %4 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %d_attr, align 8
  %call1 = call %struct.die_struct* @AT_ref(%struct.dw_attr_struct* %4)
  %die_mark = getelementptr inbounds %struct.die_struct, %struct.die_struct* %call1, i32 0, i32 8
  %5 = load i32, i32* %die_mark, align 4
  %cmp2 = icmp eq i32 %5, 0
  br i1 %cmp2, label %if.then, label %if.end.6

if.then:                                          ; preds = %land.lhs.true
  %6 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %d_attr, align 8
  %call3 = call %struct.die_struct* @AT_ref(%struct.dw_attr_struct* %6)
  %die_symbol = getelementptr inbounds %struct.die_struct, %struct.die_struct* %call3, i32 0, i32 1
  %7 = load i8*, i8** %die_symbol, align 8
  %cmp4 = icmp eq i8* %7, null
  br i1 %cmp4, label %if.then.5, label %if.end

if.then.5:                                        ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 5770, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__FUNCTION__.build_abbrev_table, i32 0, i32 0)) #8
  unreachable

if.end:                                           ; preds = %if.then
  %8 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %d_attr, align 8
  call void @set_AT_ref_external(%struct.dw_attr_struct* %8, i32 1)
  br label %if.end.6

if.end.6:                                         ; preds = %if.end, %land.lhs.true, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.6
  %9 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %d_attr, align 8
  %dw_attr_next = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %9, i32 0, i32 1
  %10 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %dw_attr_next, align 8
  store %struct.dw_attr_struct* %10, %struct.dw_attr_struct** %d_attr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i64 1, i64* %abbrev_id, align 8
  br label %for.cond.7

for.cond.7:                                       ; preds = %for.inc.49, %for.end
  %11 = load i64, i64* %abbrev_id, align 8
  %12 = load i32, i32* @abbrev_die_table_in_use, align 4
  %conv = zext i32 %12 to i64
  %cmp8 = icmp ult i64 %11, %conv
  br i1 %cmp8, label %for.body.10, label %for.end.50

for.body.10:                                      ; preds = %for.cond.7
  %13 = load i64, i64* %abbrev_id, align 8
  %14 = load %struct.die_struct**, %struct.die_struct*** @abbrev_die_table, align 8
  %arrayidx = getelementptr inbounds %struct.die_struct*, %struct.die_struct** %14, i64 %13
  %15 = load %struct.die_struct*, %struct.die_struct** %arrayidx, align 8
  store %struct.die_struct* %15, %struct.die_struct** %abbrev, align 8
  %16 = load %struct.die_struct*, %struct.die_struct** %abbrev, align 8
  %die_tag = getelementptr inbounds %struct.die_struct, %struct.die_struct* %16, i32 0, i32 0
  %17 = load i32, i32* %die_tag, align 4
  %18 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %die_tag11 = getelementptr inbounds %struct.die_struct, %struct.die_struct* %18, i32 0, i32 0
  %19 = load i32, i32* %die_tag11, align 4
  %cmp12 = icmp eq i32 %17, %19
  br i1 %cmp12, label %if.then.14, label %if.end.48

if.then.14:                                       ; preds = %for.body.10
  %20 = load %struct.die_struct*, %struct.die_struct** %abbrev, align 8
  %die_child = getelementptr inbounds %struct.die_struct, %struct.die_struct* %20, i32 0, i32 4
  %21 = load %struct.die_struct*, %struct.die_struct** %die_child, align 8
  %cmp15 = icmp ne %struct.die_struct* %21, null
  %conv16 = zext i1 %cmp15 to i32
  %22 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %die_child17 = getelementptr inbounds %struct.die_struct, %struct.die_struct* %22, i32 0, i32 4
  %23 = load %struct.die_struct*, %struct.die_struct** %die_child17, align 8
  %cmp18 = icmp ne %struct.die_struct* %23, null
  %conv19 = zext i1 %cmp18 to i32
  %cmp20 = icmp eq i32 %conv16, %conv19
  br i1 %cmp20, label %if.then.22, label %if.end.47

if.then.22:                                       ; preds = %if.then.14
  %24 = load %struct.die_struct*, %struct.die_struct** %abbrev, align 8
  %die_attr23 = getelementptr inbounds %struct.die_struct, %struct.die_struct* %24, i32 0, i32 2
  %25 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %die_attr23, align 8
  store %struct.dw_attr_struct* %25, %struct.dw_attr_struct** %a_attr, align 8
  %26 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %die_attr24 = getelementptr inbounds %struct.die_struct, %struct.die_struct* %26, i32 0, i32 2
  %27 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %die_attr24, align 8
  store %struct.dw_attr_struct* %27, %struct.dw_attr_struct** %d_attr, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end.37, %if.then.22
  %28 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a_attr, align 8
  %cmp25 = icmp ne %struct.dw_attr_struct* %28, null
  br i1 %cmp25, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %29 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %d_attr, align 8
  %cmp27 = icmp ne %struct.dw_attr_struct* %29, null
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %30 = phi i1 [ false, %while.cond ], [ %cmp27, %land.rhs ]
  br i1 %30, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %31 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a_attr, align 8
  %dw_attr = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %31, i32 0, i32 0
  %32 = load i32, i32* %dw_attr, align 4
  %33 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %d_attr, align 8
  %dw_attr29 = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %33, i32 0, i32 0
  %34 = load i32, i32* %dw_attr29, align 4
  %cmp30 = icmp ne i32 %32, %34
  br i1 %cmp30, label %if.then.36, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.body
  %35 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a_attr, align 8
  %call32 = call i32 @value_format(%struct.dw_attr_struct* %35)
  %36 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %d_attr, align 8
  %call33 = call i32 @value_format(%struct.dw_attr_struct* %36)
  %cmp34 = icmp ne i32 %call32, %call33
  br i1 %cmp34, label %if.then.36, label %if.end.37

if.then.36:                                       ; preds = %lor.lhs.false, %while.body
  br label %while.end

if.end.37:                                        ; preds = %lor.lhs.false
  %37 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a_attr, align 8
  %dw_attr_next38 = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %37, i32 0, i32 1
  %38 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %dw_attr_next38, align 8
  store %struct.dw_attr_struct* %38, %struct.dw_attr_struct** %a_attr, align 8
  %39 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %d_attr, align 8
  %dw_attr_next39 = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %39, i32 0, i32 1
  %40 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %dw_attr_next39, align 8
  store %struct.dw_attr_struct* %40, %struct.dw_attr_struct** %d_attr, align 8
  br label %while.cond

while.end:                                        ; preds = %if.then.36, %land.end
  %41 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a_attr, align 8
  %cmp40 = icmp eq %struct.dw_attr_struct* %41, null
  br i1 %cmp40, label %land.lhs.true.42, label %if.end.46

land.lhs.true.42:                                 ; preds = %while.end
  %42 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %d_attr, align 8
  %cmp43 = icmp eq %struct.dw_attr_struct* %42, null
  br i1 %cmp43, label %if.then.45, label %if.end.46

if.then.45:                                       ; preds = %land.lhs.true.42
  br label %for.end.50

if.end.46:                                        ; preds = %land.lhs.true.42, %while.end
  br label %if.end.47

if.end.47:                                        ; preds = %if.end.46, %if.then.14
  br label %if.end.48

if.end.48:                                        ; preds = %if.end.47, %for.body.10
  br label %for.inc.49

for.inc.49:                                       ; preds = %if.end.48
  %43 = load i64, i64* %abbrev_id, align 8
  %inc = add i64 %43, 1
  store i64 %inc, i64* %abbrev_id, align 8
  br label %for.cond.7

for.end.50:                                       ; preds = %if.then.45, %for.cond.7
  %44 = load i64, i64* %abbrev_id, align 8
  %45 = load i32, i32* @abbrev_die_table_in_use, align 4
  %conv51 = zext i32 %45 to i64
  %cmp52 = icmp uge i64 %44, %conv51
  br i1 %cmp52, label %if.then.54, label %if.end.66

if.then.54:                                       ; preds = %for.end.50
  %46 = load i32, i32* @abbrev_die_table_in_use, align 4
  %47 = load i32, i32* @abbrev_die_table_allocated, align 4
  %cmp55 = icmp uge i32 %46, %47
  br i1 %cmp55, label %if.then.57, label %if.end.63

if.then.57:                                       ; preds = %if.then.54
  %48 = load i32, i32* @abbrev_die_table_allocated, align 4
  %add = add i32 %48, 256
  store i32 %add, i32* %n_alloc, align 4
  %49 = load %struct.die_struct**, %struct.die_struct*** @abbrev_die_table, align 8
  %50 = bitcast %struct.die_struct** %49 to i8*
  %51 = load i32, i32* %n_alloc, align 4
  %conv58 = zext i32 %51 to i64
  %mul = mul i64 8, %conv58
  %call59 = call i8* @xrealloc(i8* %50, i64 %mul)
  %52 = bitcast i8* %call59 to %struct.die_struct**
  store %struct.die_struct** %52, %struct.die_struct*** @abbrev_die_table, align 8
  %53 = load i32, i32* @abbrev_die_table_allocated, align 4
  %idxprom = zext i32 %53 to i64
  %54 = load %struct.die_struct**, %struct.die_struct*** @abbrev_die_table, align 8
  %arrayidx60 = getelementptr inbounds %struct.die_struct*, %struct.die_struct** %54, i64 %idxprom
  %55 = bitcast %struct.die_struct** %arrayidx60 to i8*
  %56 = load i32, i32* %n_alloc, align 4
  %57 = load i32, i32* @abbrev_die_table_allocated, align 4
  %sub = sub i32 %56, %57
  %conv61 = zext i32 %sub to i64
  %mul62 = mul i64 %conv61, 8
  call void @llvm.memset.p0i8.i64(i8* %55, i8 0, i64 %mul62, i32 1, i1 false)
  %58 = load i32, i32* %n_alloc, align 4
  store i32 %58, i32* @abbrev_die_table_allocated, align 4
  br label %if.end.63

if.end.63:                                        ; preds = %if.then.57, %if.then.54
  %59 = load i32, i32* @abbrev_die_table_in_use, align 4
  %inc64 = add i32 %59, 1
  store i32 %inc64, i32* @abbrev_die_table_in_use, align 4
  %60 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %61 = load i64, i64* %abbrev_id, align 8
  %62 = load %struct.die_struct**, %struct.die_struct*** @abbrev_die_table, align 8
  %arrayidx65 = getelementptr inbounds %struct.die_struct*, %struct.die_struct** %62, i64 %61
  store %struct.die_struct* %60, %struct.die_struct** %arrayidx65, align 8
  br label %if.end.66

if.end.66:                                        ; preds = %if.end.63, %for.end.50
  %63 = load i64, i64* %abbrev_id, align 8
  %64 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %die_abbrev = getelementptr inbounds %struct.die_struct, %struct.die_struct* %64, i32 0, i32 7
  store i64 %63, i64* %die_abbrev, align 8
  %65 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %die_child67 = getelementptr inbounds %struct.die_struct, %struct.die_struct* %65, i32 0, i32 4
  %66 = load %struct.die_struct*, %struct.die_struct** %die_child67, align 8
  store %struct.die_struct* %66, %struct.die_struct** %c, align 8
  br label %for.cond.68

for.cond.68:                                      ; preds = %for.inc.72, %if.end.66
  %67 = load %struct.die_struct*, %struct.die_struct** %c, align 8
  %cmp69 = icmp ne %struct.die_struct* %67, null
  br i1 %cmp69, label %for.body.71, label %for.end.73

for.body.71:                                      ; preds = %for.cond.68
  %68 = load %struct.die_struct*, %struct.die_struct** %c, align 8
  call void @build_abbrev_table(%struct.die_struct* %68)
  br label %for.inc.72

for.inc.72:                                       ; preds = %for.body.71
  %69 = load %struct.die_struct*, %struct.die_struct** %c, align 8
  %die_sib = getelementptr inbounds %struct.die_struct, %struct.die_struct* %69, i32 0, i32 5
  %70 = load %struct.die_struct*, %struct.die_struct** %die_sib, align 8
  store %struct.die_struct* %70, %struct.die_struct** %c, align 8
  br label %for.cond.68

for.end.73:                                       ; preds = %for.cond.68
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @calc_die_sizes(%struct.die_struct* %die) #0 {
entry:
  %die.addr = alloca %struct.die_struct*, align 8
  %c = alloca %struct.die_struct*, align 8
  store %struct.die_struct* %die, %struct.die_struct** %die.addr, align 8
  %0 = load i64, i64* @next_die_offset, align 8
  %1 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %die_offset = getelementptr inbounds %struct.die_struct, %struct.die_struct* %1, i32 0, i32 6
  store i64 %0, i64* %die_offset, align 8
  %2 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %call = call i64 @size_of_die(%struct.die_struct* %2)
  %3 = load i64, i64* @next_die_offset, align 8
  %add = add i64 %3, %call
  store i64 %add, i64* @next_die_offset, align 8
  %4 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %die_child = getelementptr inbounds %struct.die_struct, %struct.die_struct* %4, i32 0, i32 4
  %5 = load %struct.die_struct*, %struct.die_struct** %die_child, align 8
  store %struct.die_struct* %5, %struct.die_struct** %c, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %6 = load %struct.die_struct*, %struct.die_struct** %c, align 8
  %cmp = icmp ne %struct.die_struct* %6, null
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load %struct.die_struct*, %struct.die_struct** %c, align 8
  call void @calc_die_sizes(%struct.die_struct* %7)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load %struct.die_struct*, %struct.die_struct** %c, align 8
  %die_sib = getelementptr inbounds %struct.die_struct, %struct.die_struct* %8, i32 0, i32 5
  %9 = load %struct.die_struct*, %struct.die_struct** %die_sib, align 8
  store %struct.die_struct* %9, %struct.die_struct** %c, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %die_child1 = getelementptr inbounds %struct.die_struct, %struct.die_struct* %10, i32 0, i32 4
  %11 = load %struct.die_struct*, %struct.die_struct** %die_child1, align 8
  %cmp2 = icmp ne %struct.die_struct* %11, null
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %for.end
  %12 = load i64, i64* @next_die_offset, align 8
  %add3 = add i64 %12, 1
  store i64 %add3, i64* @next_die_offset, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %for.end
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @output_compilation_unit_header() #0 {
entry:
  %0 = load i64, i64* @next_die_offset, align 8
  %sub = sub i64 %0, 4
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 4, i64 %sub, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.446, i32 0, i32 0))
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 2, i64 2, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.447, i32 0, i32 0))
  call void (i32, i8*, i8*, ...) @dw2_asm_output_offset(i32 4, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @abbrev_section_label, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.448, i32 0, i32 0))
  %1 = load i32, i32* @target_flags, align 4
  %and = and i32 %1, 33554432
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, i32 64, i32 32
  %div = sdiv i32 %cond, 8
  %conv = sext i32 %div to i64
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 1, i64 %conv, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.449, i32 0, i32 0))
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @output_die(%struct.die_struct* %die) #0 {
entry:
  %die.addr = alloca %struct.die_struct*, align 8
  %a = alloca %struct.dw_attr_struct*, align 8
  %c = alloca %struct.die_struct*, align 8
  %size = alloca i64, align 8
  %name = alloca i8*, align 8
  %p = alloca i8*, align 8
  %first = alloca i64, align 8
  %second = alloca i64, align 8
  %i = alloca i32, align 4
  %sym = alloca i8*, align 8
  %sym56 = alloca i8*, align 8
  %l1 = alloca [20 x i8], align 16
  store %struct.die_struct* %die, %struct.die_struct** %die.addr, align 8
  %0 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %die_symbol = getelementptr inbounds %struct.die_struct, %struct.die_struct* %0, i32 0, i32 1
  %1 = load i8*, i8** %die_symbol, align 8
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  call void @output_die_symbol(%struct.die_struct* %2)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %die_abbrev = getelementptr inbounds %struct.die_struct, %struct.die_struct* %3, i32 0, i32 7
  %4 = load i64, i64* %die_abbrev, align 8
  %5 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %die_offset = getelementptr inbounds %struct.die_struct, %struct.die_struct* %5, i32 0, i32 6
  %6 = load i64, i64* %die_offset, align 8
  %7 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %die_tag = getelementptr inbounds %struct.die_struct, %struct.die_struct* %7, i32 0, i32 0
  %8 = load i32, i32* %die_tag, align 4
  %call = call i8* @dwarf_tag_name(i32 %8)
  call void (i64, i8*, ...) @dw2_asm_output_data_uleb128(i64 %4, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.450, i32 0, i32 0), i64 %6, i8* %call)
  %9 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %die_attr = getelementptr inbounds %struct.die_struct, %struct.die_struct* %9, i32 0, i32 2
  %10 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %die_attr, align 8
  store %struct.dw_attr_struct* %10, %struct.dw_attr_struct** %a, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc.102, %if.end
  %11 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %cmp = icmp ne %struct.dw_attr_struct* %11, null
  br i1 %cmp, label %for.body, label %for.end.103

for.body:                                         ; preds = %for.cond
  %12 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %dw_attr = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %12, i32 0, i32 0
  %13 = load i32, i32* %dw_attr, align 4
  %call1 = call i8* @dwarf_attr_name(i32 %13)
  store i8* %call1, i8** %name, align 8
  %14 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %call2 = call i32 @AT_class(%struct.dw_attr_struct* %14)
  switch i32 %call2, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb.5
    i32 4, label %sw.bb.6
    i32 2, label %sw.bb.12
    i32 5, label %sw.bb.17
    i32 6, label %sw.bb.19
    i32 7, label %sw.bb.23
    i32 8, label %sw.bb.29
    i32 9, label %sw.bb.43
    i32 3, label %sw.bb.46
    i32 10, label %sw.bb.52
    i32 11, label %sw.bb.77
    i32 12, label %sw.bb.83
    i32 13, label %sw.bb.89
    i32 14, label %sw.bb.91
  ]

sw.bb:                                            ; preds = %for.body
  %15 = load i32, i32* @target_flags, align 4
  %and = and i32 %15, 33554432
  %tobool3 = icmp ne i32 %and, 0
  %cond = select i1 %tobool3, i32 64, i32 32
  %div = sdiv i32 %cond, 8
  %16 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %call4 = call %struct.rtx_def* @AT_addr(%struct.dw_attr_struct* %16)
  %17 = load i8*, i8** %name, align 8
  call void (i32, %struct.rtx_def*, i8*, ...) @dw2_asm_output_addr_rtx(i32 %div, %struct.rtx_def* %call4, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.185, i32 0, i32 0), i8* %17)
  br label %sw.epilog

sw.bb.5:                                          ; preds = %for.body
  %18 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %dw_attr_val = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %18, i32 0, i32 2
  %v = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_attr_val, i32 0, i32 1
  %val_offset = bitcast %union.anon.3* %v to i64*
  %19 = load i64, i64* %val_offset, align 8
  %20 = load i8*, i8** %name, align 8
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 4, i64 %19, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.185, i32 0, i32 0), i8* %20)
  br label %sw.epilog

sw.bb.6:                                          ; preds = %for.body
  %call7 = call i8* @strchr(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @ranges_section_label, i32 0, i32 0), i32 0) #7
  store i8* %call7, i8** %p, align 8
  %21 = load i8*, i8** %p, align 8
  %22 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %dw_attr_val8 = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %22, i32 0, i32 2
  %v9 = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_attr_val8, i32 0, i32 1
  %val_offset10 = bitcast %union.anon.3* %v9 to i64*
  %23 = load i64, i64* %val_offset10, align 8
  %call11 = call i32 (i8*, i8*, ...) @sprintf(i8* %21, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.451, i32 0, i32 0), i64 %23) #5
  %24 = load i8*, i8** %name, align 8
  call void (i32, i8*, i8*, ...) @dw2_asm_output_offset(i32 4, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @ranges_section_label, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.185, i32 0, i32 0), i8* %24)
  %25 = load i8*, i8** %p, align 8
  store i8 0, i8* %25, align 1
  br label %sw.epilog

sw.bb.12:                                         ; preds = %for.body
  %26 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %call13 = call %struct.dw_loc_descr_struct* @AT_loc(%struct.dw_attr_struct* %26)
  %call14 = call i64 @size_of_locs(%struct.dw_loc_descr_struct* %call13)
  store i64 %call14, i64* %size, align 8
  %27 = load i64, i64* %size, align 8
  %call15 = call i32 @constant_size(i64 %27)
  %28 = load i64, i64* %size, align 8
  %29 = load i8*, i8** %name, align 8
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 %call15, i64 %28, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.185, i32 0, i32 0), i8* %29)
  %30 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %call16 = call %struct.dw_loc_descr_struct* @AT_loc(%struct.dw_attr_struct* %30)
  call void @output_loc_sequence(%struct.dw_loc_descr_struct* %call16)
  br label %sw.epilog

sw.bb.17:                                         ; preds = %for.body
  %31 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %call18 = call i64 @AT_int(%struct.dw_attr_struct* %31)
  %32 = load i8*, i8** %name, align 8
  call void (i64, i8*, ...) @dw2_asm_output_data_sleb128(i64 %call18, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.185, i32 0, i32 0), i8* %32)
  br label %sw.epilog

sw.bb.19:                                         ; preds = %for.body
  %33 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %call20 = call i64 @AT_unsigned(%struct.dw_attr_struct* %33)
  %call21 = call i32 @constant_size(i64 %call20)
  %34 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %call22 = call i64 @AT_unsigned(%struct.dw_attr_struct* %34)
  %35 = load i8*, i8** %name, align 8
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 %call21, i64 %call22, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.185, i32 0, i32 0), i8* %35)
  br label %sw.epilog

sw.bb.23:                                         ; preds = %for.body
  %36 = load i8*, i8** %name, align 8
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 1, i64 16, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.185, i32 0, i32 0), i8* %36)
  %37 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %dw_attr_val24 = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %37, i32 0, i32 2
  %v25 = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_attr_val24, i32 0, i32 1
  %val_long_long = bitcast %union.anon.3* %v25 to %struct.dw_long_long_struct*
  %low = getelementptr inbounds %struct.dw_long_long_struct, %struct.dw_long_long_struct* %val_long_long, i32 0, i32 1
  %38 = load i64, i64* %low, align 8
  store i64 %38, i64* %first, align 8
  %39 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %dw_attr_val26 = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %39, i32 0, i32 2
  %v27 = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_attr_val26, i32 0, i32 1
  %val_long_long28 = bitcast %union.anon.3* %v27 to %struct.dw_long_long_struct*
  %hi = getelementptr inbounds %struct.dw_long_long_struct, %struct.dw_long_long_struct* %val_long_long28, i32 0, i32 0
  %40 = load i64, i64* %hi, align 8
  store i64 %40, i64* %second, align 8
  %41 = load i64, i64* %first, align 8
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 8, i64 %41, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.452, i32 0, i32 0))
  %42 = load i64, i64* %second, align 8
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 8, i64 %42, i8* null)
  br label %sw.epilog

sw.bb.29:                                         ; preds = %for.body
  %43 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %dw_attr_val30 = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %43, i32 0, i32 2
  %v31 = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_attr_val30, i32 0, i32 1
  %val_float = bitcast %union.anon.3* %v31 to %struct.dw_fp_struct*
  %length = getelementptr inbounds %struct.dw_fp_struct, %struct.dw_fp_struct* %val_float, i32 0, i32 1
  %44 = load i32, i32* %length, align 4
  %mul = mul i32 %44, 4
  %conv = zext i32 %mul to i64
  %45 = load i8*, i8** %name, align 8
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 1, i64 %conv, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.185, i32 0, i32 0), i8* %45)
  store i32 0, i32* %i, align 4
  br label %for.cond.32

for.cond.32:                                      ; preds = %for.inc, %sw.bb.29
  %46 = load i32, i32* %i, align 4
  %47 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %dw_attr_val33 = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %47, i32 0, i32 2
  %v34 = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_attr_val33, i32 0, i32 1
  %val_float35 = bitcast %union.anon.3* %v34 to %struct.dw_fp_struct*
  %length36 = getelementptr inbounds %struct.dw_fp_struct, %struct.dw_fp_struct* %val_float35, i32 0, i32 1
  %48 = load i32, i32* %length36, align 4
  %cmp37 = icmp ult i32 %46, %48
  br i1 %cmp37, label %for.body.39, label %for.end

for.body.39:                                      ; preds = %for.cond.32
  %49 = load i32, i32* %i, align 4
  %idxprom = zext i32 %49 to i64
  %50 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %dw_attr_val40 = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %50, i32 0, i32 2
  %v41 = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_attr_val40, i32 0, i32 1
  %val_float42 = bitcast %union.anon.3* %v41 to %struct.dw_fp_struct*
  %array = getelementptr inbounds %struct.dw_fp_struct, %struct.dw_fp_struct* %val_float42, i32 0, i32 0
  %51 = load i64*, i64** %array, align 8
  %arrayidx = getelementptr inbounds i64, i64* %51, i64 %idxprom
  %52 = load i64, i64* %arrayidx, align 8
  %53 = load i32, i32* %i, align 4
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 4, i64 %52, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.453, i32 0, i32 0), i32 %53)
  br label %for.inc

for.inc:                                          ; preds = %for.body.39
  %54 = load i32, i32* %i, align 4
  %inc = add i32 %54, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond.32

for.end:                                          ; preds = %for.cond.32
  br label %sw.epilog

sw.bb.43:                                         ; preds = %for.body
  %55 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %call44 = call i32 @AT_flag(%struct.dw_attr_struct* %55)
  %conv45 = zext i32 %call44 to i64
  %56 = load i8*, i8** %name, align 8
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 1, i64 %conv45, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.185, i32 0, i32 0), i8* %56)
  br label %sw.epilog

sw.bb.46:                                         ; preds = %for.body
  %57 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %call47 = call %struct.dw_loc_list_struct* @AT_loc_list(%struct.dw_attr_struct* %57)
  %ll_symbol = getelementptr inbounds %struct.dw_loc_list_struct, %struct.dw_loc_list_struct* %call47, i32 0, i32 3
  %58 = load i8*, i8** %ll_symbol, align 8
  store i8* %58, i8** %sym, align 8
  %59 = load i8*, i8** %sym, align 8
  %cmp48 = icmp eq i8* %59, null
  br i1 %cmp48, label %if.then.50, label %if.end.51

if.then.50:                                       ; preds = %sw.bb.46
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 6361, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @__FUNCTION__.output_die, i32 0, i32 0)) #8
  unreachable

if.end.51:                                        ; preds = %sw.bb.46
  %60 = load i8*, i8** %sym, align 8
  %61 = load i8*, i8** %name, align 8
  call void (i32, i8*, i8*, i8*, ...) @dw2_asm_output_delta(i32 4, i8* %60, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @loc_section_label, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.185, i32 0, i32 0), i8* %61)
  br label %sw.epilog

sw.bb.52:                                         ; preds = %for.body
  %62 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %call53 = call i32 @AT_ref_external(%struct.dw_attr_struct* %62)
  %tobool54 = icmp ne i32 %call53, 0
  br i1 %tobool54, label %if.then.55, label %if.else

if.then.55:                                       ; preds = %sw.bb.52
  %63 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %call57 = call %struct.die_struct* @AT_ref(%struct.dw_attr_struct* %63)
  %die_symbol58 = getelementptr inbounds %struct.die_struct, %struct.die_struct* %call57, i32 0, i32 1
  %64 = load i8*, i8** %die_symbol58, align 8
  store i8* %64, i8** %sym56, align 8
  %65 = load i8*, i8** %sym56, align 8
  %cmp59 = icmp eq i8* %65, null
  br i1 %cmp59, label %if.then.61, label %if.end.62

if.then.61:                                       ; preds = %if.then.55
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 6373, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @__FUNCTION__.output_die, i32 0, i32 0)) #8
  unreachable

if.end.62:                                        ; preds = %if.then.55
  %66 = load i32, i32* @target_flags, align 4
  %and63 = and i32 %66, 33554432
  %tobool64 = icmp ne i32 %and63, 0
  %cond65 = select i1 %tobool64, i32 64, i32 32
  %div66 = sdiv i32 %cond65, 8
  %67 = load i8*, i8** %sym56, align 8
  %68 = load i8*, i8** %name, align 8
  call void (i32, i8*, i8*, ...) @dw2_asm_output_offset(i32 %div66, i8* %67, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.185, i32 0, i32 0), i8* %68)
  br label %if.end.76

if.else:                                          ; preds = %sw.bb.52
  %69 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %call67 = call %struct.die_struct* @AT_ref(%struct.dw_attr_struct* %69)
  %die_offset68 = getelementptr inbounds %struct.die_struct, %struct.die_struct* %call67, i32 0, i32 6
  %70 = load i64, i64* %die_offset68, align 8
  %cmp69 = icmp eq i64 %70, 0
  br i1 %cmp69, label %if.then.71, label %if.else.72

if.then.71:                                       ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 6377, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @__FUNCTION__.output_die, i32 0, i32 0)) #8
  unreachable

if.else.72:                                       ; preds = %if.else
  %71 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %call73 = call %struct.die_struct* @AT_ref(%struct.dw_attr_struct* %71)
  %die_offset74 = getelementptr inbounds %struct.die_struct, %struct.die_struct* %call73, i32 0, i32 6
  %72 = load i64, i64* %die_offset74, align 8
  %73 = load i8*, i8** %name, align 8
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 4, i64 %72, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.185, i32 0, i32 0), i8* %73)
  br label %if.end.75

if.end.75:                                        ; preds = %if.else.72
  br label %if.end.76

if.end.76:                                        ; preds = %if.end.75, %if.end.62
  br label %sw.epilog

sw.bb.77:                                         ; preds = %for.body
  br label %do.body

do.body:                                          ; preds = %sw.bb.77
  %arraydecay = getelementptr inbounds [20 x i8], [20 x i8]* %l1, i32 0, i32 0
  %74 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %dw_attr_val78 = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %74, i32 0, i32 2
  %v79 = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_attr_val78, i32 0, i32 1
  %val_fde_index = bitcast %union.anon.3* %v79 to i32*
  %75 = load i32, i32* %val_fde_index, align 4
  %mul80 = mul i32 %75, 2
  %call81 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.172, i32 0, i32 0), i32 %mul80) #5
  br label %do.end

do.end:                                           ; preds = %do.body
  %arraydecay82 = getelementptr inbounds [20 x i8], [20 x i8]* %l1, i32 0, i32 0
  %76 = load i8*, i8** %name, align 8
  call void (i32, i8*, i8*, ...) @dw2_asm_output_offset(i32 4, i8* %arraydecay82, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.185, i32 0, i32 0), i8* %76)
  br label %sw.epilog

sw.bb.83:                                         ; preds = %for.body
  %77 = load i32, i32* @target_flags, align 4
  %and84 = and i32 %77, 33554432
  %tobool85 = icmp ne i32 %and84, 0
  %cond86 = select i1 %tobool85, i32 64, i32 32
  %div87 = sdiv i32 %cond86, 8
  %78 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %call88 = call i8* @AT_lbl(%struct.dw_attr_struct* %78)
  %79 = load i8*, i8** %name, align 8
  call void (i32, i8*, i8*, ...) @dw2_asm_output_addr(i32 %div87, i8* %call88, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.185, i32 0, i32 0), i8* %79)
  br label %sw.epilog

sw.bb.89:                                         ; preds = %for.body
  %80 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %call90 = call i8* @AT_lbl(%struct.dw_attr_struct* %80)
  %81 = load i8*, i8** %name, align 8
  call void (i32, i8*, i8*, ...) @dw2_asm_output_offset(i32 4, i8* %call90, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.185, i32 0, i32 0), i8* %81)
  br label %sw.epilog

sw.bb.91:                                         ; preds = %for.body
  %82 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %call92 = call i32 @AT_string_form(%struct.dw_attr_struct* %82)
  %cmp93 = icmp eq i32 %call92, 14
  br i1 %cmp93, label %if.then.95, label %if.else.99

if.then.95:                                       ; preds = %sw.bb.91
  %83 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %dw_attr_val96 = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %83, i32 0, i32 2
  %v97 = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_attr_val96, i32 0, i32 1
  %val_str = bitcast %union.anon.3* %v97 to %struct.indirect_string_node**
  %84 = load %struct.indirect_string_node*, %struct.indirect_string_node** %val_str, align 8
  %label = getelementptr inbounds %struct.indirect_string_node, %struct.indirect_string_node* %84, i32 0, i32 3
  %85 = load i8*, i8** %label, align 8
  %86 = load i8*, i8** %name, align 8
  %87 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %call98 = call i8* @AT_string(%struct.dw_attr_struct* %87)
  call void (i32, i8*, i8*, ...) @dw2_asm_output_offset(i32 4, i8* %85, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.454, i32 0, i32 0), i8* %86, i8* %call98)
  br label %if.end.101

if.else.99:                                       ; preds = %sw.bb.91
  %88 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %call100 = call i8* @AT_string(%struct.dw_attr_struct* %88)
  %89 = load i8*, i8** %name, align 8
  call void (i8*, i64, i8*, ...) @dw2_asm_output_nstring(i8* %call100, i64 -1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.185, i32 0, i32 0), i8* %89)
  br label %if.end.101

if.end.101:                                       ; preds = %if.else.99, %if.then.95
  br label %sw.epilog

sw.default:                                       ; preds = %for.body
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 6411, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @__FUNCTION__.output_die, i32 0, i32 0)) #8
  unreachable

sw.epilog:                                        ; preds = %if.end.101, %sw.bb.89, %sw.bb.83, %do.end, %if.end.76, %if.end.51, %sw.bb.43, %for.end, %sw.bb.23, %sw.bb.19, %sw.bb.17, %sw.bb.12, %sw.bb.6, %sw.bb.5, %sw.bb
  br label %for.inc.102

for.inc.102:                                      ; preds = %sw.epilog
  %90 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %dw_attr_next = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %90, i32 0, i32 1
  %91 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %dw_attr_next, align 8
  store %struct.dw_attr_struct* %91, %struct.dw_attr_struct** %a, align 8
  br label %for.cond

for.end.103:                                      ; preds = %for.cond
  %92 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %die_child = getelementptr inbounds %struct.die_struct, %struct.die_struct* %92, i32 0, i32 4
  %93 = load %struct.die_struct*, %struct.die_struct** %die_child, align 8
  store %struct.die_struct* %93, %struct.die_struct** %c, align 8
  br label %for.cond.104

for.cond.104:                                     ; preds = %for.inc.108, %for.end.103
  %94 = load %struct.die_struct*, %struct.die_struct** %c, align 8
  %cmp105 = icmp ne %struct.die_struct* %94, null
  br i1 %cmp105, label %for.body.107, label %for.end.109

for.body.107:                                     ; preds = %for.cond.104
  %95 = load %struct.die_struct*, %struct.die_struct** %c, align 8
  call void @output_die(%struct.die_struct* %95)
  br label %for.inc.108

for.inc.108:                                      ; preds = %for.body.107
  %96 = load %struct.die_struct*, %struct.die_struct** %c, align 8
  %die_sib = getelementptr inbounds %struct.die_struct, %struct.die_struct* %96, i32 0, i32 5
  %97 = load %struct.die_struct*, %struct.die_struct** %die_sib, align 8
  store %struct.die_struct* %97, %struct.die_struct** %c, align 8
  br label %for.cond.104

for.end.109:                                      ; preds = %for.cond.104
  %98 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %die_child110 = getelementptr inbounds %struct.die_struct, %struct.die_struct* %98, i32 0, i32 4
  %99 = load %struct.die_struct*, %struct.die_struct** %die_child110, align 8
  %cmp111 = icmp ne %struct.die_struct* %99, null
  br i1 %cmp111, label %if.then.113, label %if.end.115

if.then.113:                                      ; preds = %for.end.109
  %100 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %die_offset114 = getelementptr inbounds %struct.die_struct, %struct.die_struct* %100, i32 0, i32 6
  %101 = load i64, i64* %die_offset114, align 8
  call void (i32, i64, i8*, ...) @dw2_asm_output_data(i32 1, i64 0, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.455, i32 0, i32 0), i64 %101)
  br label %if.end.115

if.end.115:                                       ; preds = %if.then.113, %for.end.109
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @unmark_dies(%struct.die_struct* %die) #0 {
entry:
  %die.addr = alloca %struct.die_struct*, align 8
  %c = alloca %struct.die_struct*, align 8
  store %struct.die_struct* %die, %struct.die_struct** %die.addr, align 8
  %0 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %die_mark = getelementptr inbounds %struct.die_struct, %struct.die_struct* %0, i32 0, i32 8
  store i32 0, i32* %die_mark, align 4
  %1 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %die_child = getelementptr inbounds %struct.die_struct, %struct.die_struct* %1, i32 0, i32 4
  %2 = load %struct.die_struct*, %struct.die_struct** %die_child, align 8
  store %struct.die_struct* %2, %struct.die_struct** %c, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load %struct.die_struct*, %struct.die_struct** %c, align 8
  %tobool = icmp ne %struct.die_struct* %3, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load %struct.die_struct*, %struct.die_struct** %c, align 8
  call void @unmark_dies(%struct.die_struct* %4)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load %struct.die_struct*, %struct.die_struct** %c, align 8
  %die_sib = getelementptr inbounds %struct.die_struct, %struct.die_struct* %5, i32 0, i32 5
  %6 = load %struct.die_struct*, %struct.die_struct** %die_sib, align 8
  store %struct.die_struct* %6, %struct.die_struct** %c, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @set_AT_ref_external(%struct.dw_attr_struct* %a, i32 %i) #3 {
entry:
  %a.addr = alloca %struct.dw_attr_struct*, align 8
  %i.addr = alloca i32, align 4
  store %struct.dw_attr_struct* %a, %struct.dw_attr_struct** %a.addr, align 8
  store i32 %i, i32* %i.addr, align 4
  %0 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a.addr, align 8
  %tobool = icmp ne %struct.dw_attr_struct* %0, null
  br i1 %tobool, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a.addr, align 8
  %call = call i32 @AT_class(%struct.dw_attr_struct* %1)
  %cmp = icmp eq i32 %call, 10
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %2 = load i32, i32* %i.addr, align 4
  %3 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a.addr, align 8
  %dw_attr_val = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %3, i32 0, i32 2
  %v = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_attr_val, i32 0, i32 1
  %val_die_ref = bitcast %union.anon.3* %v to %struct.anon.4*
  %external = getelementptr inbounds %struct.anon.4, %struct.anon.4* %val_die_ref, i32 0, i32 1
  store i32 %2, i32* %external, align 4
  br label %if.end

if.else:                                          ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 4609, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__FUNCTION__.set_AT_ref_external, i32 0, i32 0)) #8
  unreachable

if.end:                                           ; preds = %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @value_format(%struct.dw_attr_struct* %a) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca %struct.dw_attr_struct*, align 8
  store %struct.dw_attr_struct* %a, %struct.dw_attr_struct** %a.addr, align 8
  %0 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a.addr, align 8
  %dw_attr_val = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %0, i32 0, i32 2
  %val_class = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_attr_val, i32 0, i32 0
  %1 = load i32, i32* %val_class, align 4
  switch i32 %1, label %sw.default.27 [
    i32 0, label %sw.bb
    i32 4, label %sw.bb.1
    i32 1, label %sw.bb.1
    i32 3, label %sw.bb.2
    i32 2, label %sw.bb.3
    i32 5, label %sw.bb.8
    i32 6, label %sw.bb.9
    i32 7, label %sw.bb.17
    i32 8, label %sw.bb.18
    i32 9, label %sw.bb.19
    i32 10, label %sw.bb.20
    i32 11, label %sw.bb.22
    i32 12, label %sw.bb.23
    i32 13, label %sw.bb.24
    i32 14, label %sw.bb.25
  ]

sw.bb:                                            ; preds = %entry
  store i32 1, i32* %retval
  br label %return

sw.bb.1:                                          ; preds = %entry, %entry
  store i32 6, i32* %retval
  br label %return

sw.bb.2:                                          ; preds = %entry
  store i32 6, i32* %retval
  br label %return

sw.bb.3:                                          ; preds = %entry
  %2 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a.addr, align 8
  %call = call %struct.dw_loc_descr_struct* @AT_loc(%struct.dw_attr_struct* %2)
  %call4 = call i64 @size_of_locs(%struct.dw_loc_descr_struct* %call)
  %call5 = call i32 @constant_size(i64 %call4)
  switch i32 %call5, label %sw.default [
    i32 1, label %sw.bb.6
    i32 2, label %sw.bb.7
  ]

sw.bb.6:                                          ; preds = %sw.bb.3
  store i32 10, i32* %retval
  br label %return

sw.bb.7:                                          ; preds = %sw.bb.3
  store i32 3, i32* %retval
  br label %return

sw.default:                                       ; preds = %sw.bb.3
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 6039, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @__FUNCTION__.value_format, i32 0, i32 0)) #8
  unreachable

sw.bb.8:                                          ; preds = %entry
  store i32 13, i32* %retval
  br label %return

sw.bb.9:                                          ; preds = %entry
  %3 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a.addr, align 8
  %call10 = call i64 @AT_unsigned(%struct.dw_attr_struct* %3)
  %call11 = call i32 @constant_size(i64 %call10)
  switch i32 %call11, label %sw.default.16 [
    i32 1, label %sw.bb.12
    i32 2, label %sw.bb.13
    i32 4, label %sw.bb.14
    i32 8, label %sw.bb.15
  ]

sw.bb.12:                                         ; preds = %sw.bb.9
  store i32 11, i32* %retval
  br label %return

sw.bb.13:                                         ; preds = %sw.bb.9
  store i32 5, i32* %retval
  br label %return

sw.bb.14:                                         ; preds = %sw.bb.9
  store i32 6, i32* %retval
  br label %return

sw.bb.15:                                         ; preds = %sw.bb.9
  store i32 7, i32* %retval
  br label %return

sw.default.16:                                    ; preds = %sw.bb.9
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 6055, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @__FUNCTION__.value_format, i32 0, i32 0)) #8
  unreachable

sw.bb.17:                                         ; preds = %entry
  store i32 10, i32* %retval
  br label %return

sw.bb.18:                                         ; preds = %entry
  store i32 10, i32* %retval
  br label %return

sw.bb.19:                                         ; preds = %entry
  store i32 12, i32* %retval
  br label %return

sw.bb.20:                                         ; preds = %entry
  %4 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a.addr, align 8
  %call21 = call i32 @AT_ref_external(%struct.dw_attr_struct* %4)
  %tobool = icmp ne i32 %call21, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %sw.bb.20
  store i32 16, i32* %retval
  br label %return

if.else:                                          ; preds = %sw.bb.20
  store i32 19, i32* %retval
  br label %return

sw.bb.22:                                         ; preds = %entry
  store i32 6, i32* %retval
  br label %return

sw.bb.23:                                         ; preds = %entry
  store i32 1, i32* %retval
  br label %return

sw.bb.24:                                         ; preds = %entry
  store i32 6, i32* %retval
  br label %return

sw.bb.25:                                         ; preds = %entry
  %5 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a.addr, align 8
  %call26 = call i32 @AT_string_form(%struct.dw_attr_struct* %5)
  store i32 %call26, i32* %retval
  br label %return

sw.default.27:                                    ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 6078, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @__FUNCTION__.value_format, i32 0, i32 0)) #8
  unreachable

return:                                           ; preds = %sw.bb.25, %sw.bb.24, %sw.bb.23, %sw.bb.22, %if.else, %if.then, %sw.bb.19, %sw.bb.18, %sw.bb.17, %sw.bb.15, %sw.bb.14, %sw.bb.13, %sw.bb.12, %sw.bb.8, %sw.bb.7, %sw.bb.6, %sw.bb.2, %sw.bb.1, %sw.bb
  %6 = load i32, i32* %retval
  ret i32 %6
}

; Function Attrs: nounwind uwtable
define internal i32 @constant_size(i64 %value) #0 {
entry:
  %value.addr = alloca i64, align 8
  %log = alloca i32, align 4
  store i64 %value, i64* %value.addr, align 8
  %0 = load i64, i64* %value.addr, align 8
  %cmp = icmp eq i64 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 0, i32* %log, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %1 = load i64, i64* %value.addr, align 8
  %call = call i32 @floor_log2_wide(i64 %1)
  store i32 %call, i32* %log, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %2 = load i32, i32* %log, align 4
  %div = sdiv i32 %2, 8
  store i32 %div, i32* %log, align 4
  %3 = load i32, i32* %log, align 4
  %conv = sext i32 %3 to i64
  %call1 = call i32 @floor_log2_wide(i64 %conv)
  %add = add nsw i32 %call1, 1
  %shl = shl i32 1, %add
  store i32 %shl, i32* %log, align 4
  %4 = load i32, i32* %log, align 4
  ret i32 %4
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @AT_ref_external(%struct.dw_attr_struct* %a) #3 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca %struct.dw_attr_struct*, align 8
  store %struct.dw_attr_struct* %a, %struct.dw_attr_struct** %a.addr, align 8
  %0 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a.addr, align 8
  %tobool = icmp ne %struct.dw_attr_struct* %0, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a.addr, align 8
  %call = call i32 @AT_class(%struct.dw_attr_struct* %1)
  %cmp = icmp eq i32 %call, 10
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %2 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a.addr, align 8
  %dw_attr_val = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %2, i32 0, i32 2
  %v = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_attr_val, i32 0, i32 1
  %val_die_ref = bitcast %union.anon.3* %v to %struct.anon.4*
  %external = getelementptr inbounds %struct.anon.4, %struct.anon.4* %val_die_ref, i32 0, i32 1
  %3 = load i32, i32* %external, align 4
  store i32 %3, i32* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %4 = load i32, i32* %retval
  ret i32 %4
}

; Function Attrs: nounwind uwtable
define internal i32 @AT_string_form(%struct.dw_attr_struct* %a) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca %struct.dw_attr_struct*, align 8
  %node = alloca %struct.indirect_string_node*, align 8
  %len = alloca i32, align 4
  %label = alloca [32 x i8], align 16
  store %struct.dw_attr_struct* %a, %struct.dw_attr_struct** %a.addr, align 8
  %0 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a.addr, align 8
  %tobool = icmp ne %struct.dw_attr_struct* %0, null
  br i1 %tobool, label %land.lhs.true, label %if.end.15

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a.addr, align 8
  %call = call i32 @AT_class(%struct.dw_attr_struct* %1)
  %cmp = icmp eq i32 %call, 14
  br i1 %cmp, label %if.then, label %if.end.15

if.then:                                          ; preds = %land.lhs.true
  %2 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a.addr, align 8
  %dw_attr_val = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %2, i32 0, i32 2
  %v = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_attr_val, i32 0, i32 1
  %val_str = bitcast %union.anon.3* %v to %struct.indirect_string_node**
  %3 = load %struct.indirect_string_node*, %struct.indirect_string_node** %val_str, align 8
  store %struct.indirect_string_node* %3, %struct.indirect_string_node** %node, align 8
  %4 = load %struct.indirect_string_node*, %struct.indirect_string_node** %node, align 8
  %form = getelementptr inbounds %struct.indirect_string_node, %struct.indirect_string_node* %4, i32 0, i32 2
  %5 = load i32, i32* %form, align 4
  %tobool1 = icmp ne i32 %5, 0
  br i1 %tobool1, label %if.then.2, label %if.end

if.then.2:                                        ; preds = %if.then
  %6 = load %struct.indirect_string_node*, %struct.indirect_string_node** %node, align 8
  %form3 = getelementptr inbounds %struct.indirect_string_node, %struct.indirect_string_node* %6, i32 0, i32 2
  %7 = load i32, i32* %form3, align 4
  store i32 %7, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then
  %8 = load %struct.indirect_string_node*, %struct.indirect_string_node** %node, align 8
  %id = getelementptr inbounds %struct.indirect_string_node, %struct.indirect_string_node* %8, i32 0, i32 0
  %len4 = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 0
  %9 = load i32, i32* %len4, align 4
  %add = add i32 %9, 1
  store i32 %add, i32* %len, align 4
  %10 = load i32, i32* %len, align 4
  %cmp5 = icmp ule i32 %10, 4
  br i1 %cmp5, label %if.then.7, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %11 = load %struct.indirect_string_node*, %struct.indirect_string_node** %node, align 8
  %refcount = getelementptr inbounds %struct.indirect_string_node, %struct.indirect_string_node* %11, i32 0, i32 1
  %12 = load i32, i32* %refcount, align 4
  %cmp6 = icmp eq i32 %12, 0
  br i1 %cmp6, label %if.then.7, label %if.end.9

if.then.7:                                        ; preds = %lor.lhs.false, %if.end
  %13 = load %struct.indirect_string_node*, %struct.indirect_string_node** %node, align 8
  %form8 = getelementptr inbounds %struct.indirect_string_node, %struct.indirect_string_node* %13, i32 0, i32 2
  store i32 8, i32* %form8, align 4
  store i32 8, i32* %retval
  br label %return

if.end.9:                                         ; preds = %lor.lhs.false
  br label %do.body

do.body:                                          ; preds = %if.end.9
  %arraydecay = getelementptr inbounds [32 x i8], [32 x i8]* %label, i32 0, i32 0
  %14 = load i32, i32* @const_labelno, align 4
  %call10 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.445, i32 0, i32 0), i32 %14) #5
  br label %do.end

do.end:                                           ; preds = %do.body
  %15 = load i32, i32* @const_labelno, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* @const_labelno, align 4
  %arraydecay11 = getelementptr inbounds [32 x i8], [32 x i8]* %label, i32 0, i32 0
  %call12 = call noalias i8* @xstrdup(i8* %arraydecay11)
  %16 = load %struct.indirect_string_node*, %struct.indirect_string_node** %node, align 8
  %label13 = getelementptr inbounds %struct.indirect_string_node, %struct.indirect_string_node* %16, i32 0, i32 3
  store i8* %call12, i8** %label13, align 8
  %17 = load %struct.indirect_string_node*, %struct.indirect_string_node** %node, align 8
  %form14 = getelementptr inbounds %struct.indirect_string_node, %struct.indirect_string_node* %17, i32 0, i32 2
  store i32 14, i32* %form14, align 4
  store i32 14, i32* %retval
  br label %return

if.end.15:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 4560, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @__FUNCTION__.AT_string_form, i32 0, i32 0)) #8
  unreachable

return:                                           ; preds = %do.end, %if.then.7, %if.then.2
  %18 = load i32, i32* %retval
  ret i32 %18
}

; Function Attrs: nounwind uwtable
define internal i64 @size_of_die(%struct.die_struct* %die) #0 {
entry:
  %die.addr = alloca %struct.die_struct*, align 8
  %size = alloca i64, align 8
  %a = alloca %struct.dw_attr_struct*, align 8
  %lsize = alloca i64, align 8
  store %struct.die_struct* %die, %struct.die_struct** %die.addr, align 8
  store i64 0, i64* %size, align 8
  %0 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %die_abbrev = getelementptr inbounds %struct.die_struct, %struct.die_struct* %0, i32 0, i32 7
  %1 = load i64, i64* %die_abbrev, align 8
  %call = call i32 @size_of_uleb128(i64 %1)
  %conv = sext i32 %call to i64
  %2 = load i64, i64* %size, align 8
  %add = add i64 %2, %conv
  store i64 %add, i64* %size, align 8
  %3 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %die_attr = getelementptr inbounds %struct.die_struct, %struct.die_struct* %3, i32 0, i32 2
  %4 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %die_attr, align 8
  store %struct.dw_attr_struct* %4, %struct.dw_attr_struct** %a, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %cmp = icmp ne %struct.dw_attr_struct* %5, null
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %call2 = call i32 @AT_class(%struct.dw_attr_struct* %6)
  switch i32 %call2, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb.5
    i32 2, label %sw.bb.7
    i32 3, label %sw.bb.14
    i32 4, label %sw.bb.16
    i32 5, label %sw.bb.18
    i32 6, label %sw.bb.23
    i32 7, label %sw.bb.28
    i32 8, label %sw.bb.30
    i32 9, label %sw.bb.34
    i32 10, label %sw.bb.36
    i32 11, label %sw.bb.38
    i32 12, label %sw.bb.40
    i32 13, label %sw.bb.47
    i32 14, label %sw.bb.49
  ]

sw.bb:                                            ; preds = %for.body
  %7 = load i32, i32* @target_flags, align 4
  %and = and i32 %7, 33554432
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, i32 64, i32 32
  %div = sdiv i32 %cond, 8
  %conv3 = sext i32 %div to i64
  %8 = load i64, i64* %size, align 8
  %add4 = add i64 %8, %conv3
  store i64 %add4, i64* %size, align 8
  br label %sw.epilog

sw.bb.5:                                          ; preds = %for.body
  %9 = load i64, i64* %size, align 8
  %add6 = add i64 %9, 4
  store i64 %add6, i64* %size, align 8
  br label %sw.epilog

sw.bb.7:                                          ; preds = %for.body
  %10 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %call8 = call %struct.dw_loc_descr_struct* @AT_loc(%struct.dw_attr_struct* %10)
  %call9 = call i64 @size_of_locs(%struct.dw_loc_descr_struct* %call8)
  store i64 %call9, i64* %lsize, align 8
  %11 = load i64, i64* %lsize, align 8
  %call10 = call i32 @constant_size(i64 %11)
  %conv11 = sext i32 %call10 to i64
  %12 = load i64, i64* %size, align 8
  %add12 = add i64 %12, %conv11
  store i64 %add12, i64* %size, align 8
  %13 = load i64, i64* %lsize, align 8
  %14 = load i64, i64* %size, align 8
  %add13 = add i64 %14, %13
  store i64 %add13, i64* %size, align 8
  br label %sw.epilog

sw.bb.14:                                         ; preds = %for.body
  %15 = load i64, i64* %size, align 8
  %add15 = add i64 %15, 4
  store i64 %add15, i64* %size, align 8
  br label %sw.epilog

sw.bb.16:                                         ; preds = %for.body
  %16 = load i64, i64* %size, align 8
  %add17 = add i64 %16, 4
  store i64 %add17, i64* %size, align 8
  br label %sw.epilog

sw.bb.18:                                         ; preds = %for.body
  %17 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %call19 = call i64 @AT_int(%struct.dw_attr_struct* %17)
  %call20 = call i32 @size_of_sleb128(i64 %call19)
  %conv21 = sext i32 %call20 to i64
  %18 = load i64, i64* %size, align 8
  %add22 = add i64 %18, %conv21
  store i64 %add22, i64* %size, align 8
  br label %sw.epilog

sw.bb.23:                                         ; preds = %for.body
  %19 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %call24 = call i64 @AT_unsigned(%struct.dw_attr_struct* %19)
  %call25 = call i32 @constant_size(i64 %call24)
  %conv26 = sext i32 %call25 to i64
  %20 = load i64, i64* %size, align 8
  %add27 = add i64 %20, %conv26
  store i64 %add27, i64* %size, align 8
  br label %sw.epilog

sw.bb.28:                                         ; preds = %for.body
  %21 = load i64, i64* %size, align 8
  %add29 = add i64 %21, 17
  store i64 %add29, i64* %size, align 8
  br label %sw.epilog

sw.bb.30:                                         ; preds = %for.body
  %22 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %dw_attr_val = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %22, i32 0, i32 2
  %v = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_attr_val, i32 0, i32 1
  %val_float = bitcast %union.anon.3* %v to %struct.dw_fp_struct*
  %length = getelementptr inbounds %struct.dw_fp_struct, %struct.dw_fp_struct* %val_float, i32 0, i32 1
  %23 = load i32, i32* %length, align 4
  %mul = mul i32 %23, 4
  %add31 = add i32 1, %mul
  %conv32 = zext i32 %add31 to i64
  %24 = load i64, i64* %size, align 8
  %add33 = add i64 %24, %conv32
  store i64 %add33, i64* %size, align 8
  br label %sw.epilog

sw.bb.34:                                         ; preds = %for.body
  %25 = load i64, i64* %size, align 8
  %add35 = add i64 %25, 1
  store i64 %add35, i64* %size, align 8
  br label %sw.epilog

sw.bb.36:                                         ; preds = %for.body
  %26 = load i64, i64* %size, align 8
  %add37 = add i64 %26, 4
  store i64 %add37, i64* %size, align 8
  br label %sw.epilog

sw.bb.38:                                         ; preds = %for.body
  %27 = load i64, i64* %size, align 8
  %add39 = add i64 %27, 4
  store i64 %add39, i64* %size, align 8
  br label %sw.epilog

sw.bb.40:                                         ; preds = %for.body
  %28 = load i32, i32* @target_flags, align 4
  %and41 = and i32 %28, 33554432
  %tobool42 = icmp ne i32 %and41, 0
  %cond43 = select i1 %tobool42, i32 64, i32 32
  %div44 = sdiv i32 %cond43, 8
  %conv45 = sext i32 %div44 to i64
  %29 = load i64, i64* %size, align 8
  %add46 = add i64 %29, %conv45
  store i64 %add46, i64* %size, align 8
  br label %sw.epilog

sw.bb.47:                                         ; preds = %for.body
  %30 = load i64, i64* %size, align 8
  %add48 = add i64 %30, 4
  store i64 %add48, i64* %size, align 8
  br label %sw.epilog

sw.bb.49:                                         ; preds = %for.body
  %31 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %call50 = call i32 @AT_string_form(%struct.dw_attr_struct* %31)
  %cmp51 = icmp eq i32 %call50, 14
  br i1 %cmp51, label %if.then, label %if.else

if.then:                                          ; preds = %sw.bb.49
  %32 = load i64, i64* %size, align 8
  %add53 = add i64 %32, 4
  store i64 %add53, i64* %size, align 8
  br label %if.end

if.else:                                          ; preds = %sw.bb.49
  %33 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %dw_attr_val54 = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %33, i32 0, i32 2
  %v55 = getelementptr inbounds %struct.dw_val_struct, %struct.dw_val_struct* %dw_attr_val54, i32 0, i32 1
  %val_str = bitcast %union.anon.3* %v55 to %struct.indirect_string_node**
  %34 = load %struct.indirect_string_node*, %struct.indirect_string_node** %val_str, align 8
  %id = getelementptr inbounds %struct.indirect_string_node, %struct.indirect_string_node* %34, i32 0, i32 0
  %len = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 0
  %35 = load i32, i32* %len, align 4
  %add56 = add i32 %35, 1
  %conv57 = zext i32 %add56 to i64
  %36 = load i64, i64* %size, align 8
  %add58 = add i64 %36, %conv57
  store i64 %add58, i64* %size, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %sw.epilog

sw.default:                                       ; preds = %for.body
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i32 5914, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__FUNCTION__.size_of_die, i32 0, i32 0)) #8
  unreachable

sw.epilog:                                        ; preds = %if.end, %sw.bb.47, %sw.bb.40, %sw.bb.38, %sw.bb.36, %sw.bb.34, %sw.bb.30, %sw.bb.28, %sw.bb.23, %sw.bb.18, %sw.bb.16, %sw.bb.14, %sw.bb.7, %sw.bb.5, %sw.bb
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog
  %37 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %dw_attr_next = getelementptr inbounds %struct.dw_attr_struct, %struct.dw_attr_struct* %37, i32 0, i32 1
  %38 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %dw_attr_next, align 8
  store %struct.dw_attr_struct* %38, %struct.dw_attr_struct** %a, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %39 = load i64, i64* %size, align 8
  ret i64 %39
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @output_die_symbol(%struct.die_struct* %die) #3 {
entry:
  %die.addr = alloca %struct.die_struct*, align 8
  %sym = alloca i8*, align 8
  store %struct.die_struct* %die, %struct.die_struct** %die.addr, align 8
  %0 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %die_symbol = getelementptr inbounds %struct.die_struct, %struct.die_struct* %0, i32 0, i32 1
  %1 = load i8*, i8** %die_symbol, align 8
  store i8* %1, i8** %sym, align 8
  %2 = load i8*, i8** %sym, align 8
  %cmp = icmp eq i8* %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i8*, i8** %sym, align 8
  %call = call i32 @strncmp(i8* %3, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.432, i32 0, i32 0), i64 2) #7
  %cmp1 = icmp eq i32 %call, 0
  br i1 %cmp1, label %if.then.2, label %if.end.5

if.then.2:                                        ; preds = %if.end
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8
  %call3 = call i32 @fputs(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.456, i32 0, i32 0), %struct._IO_FILE* %4)
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8
  %6 = load i8*, i8** %sym, align 8
  call void @assemble_name(%struct._IO_FILE* %5, i8* %6)
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8
  %call4 = call i32 @fputs(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.234, i32 0, i32 0), %struct._IO_FILE* %7)
  br label %if.end.5

if.end.5:                                         ; preds = %if.then.2, %if.end
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8
  %9 = load i8*, i8** %sym, align 8
  call void @assemble_name(%struct._IO_FILE* %8, i8* %9)
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8
  %call6 = call i32 @fputs(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), %struct._IO_FILE* %10)
  br label %return

return:                                           ; preds = %if.end.5, %if.then
  ret void
}

; Function Attrs: nounwind readonly
declare i8* @strchr(i8*, i32) #6

; Function Attrs: nounwind readonly
declare i32 @strncmp(i8*, i8*, i64) #6

; Function Attrs: nounwind uwtable
define internal void @output_value_format(%struct.dw_attr_struct* %a) #0 {
entry:
  %a.addr = alloca %struct.dw_attr_struct*, align 8
  %form = alloca i32, align 4
  store %struct.dw_attr_struct* %a, %struct.dw_attr_struct** %a.addr, align 8
  %0 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a.addr, align 8
  %call = call i32 @value_format(%struct.dw_attr_struct* %0)
  store i32 %call, i32* %form, align 4
  %1 = load i32, i32* %form, align 4
  %conv = zext i32 %1 to i64
  %2 = load i32, i32* %form, align 4
  %call1 = call i8* @dwarf_form_name(i32 %2)
  call void (i64, i8*, ...) @dw2_asm_output_data_uleb128(i64 %conv, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.461, i32 0, i32 0), i8* %call1)
  ret void
}

; Function Attrs: nounwind uwtable
define internal i8* @dwarf_form_name(i32 %form) #0 {
entry:
  %retval = alloca i8*, align 8
  %form.addr = alloca i32, align 4
  store i32 %form, i32* %form.addr, align 4
  %0 = load i32, i32* %form.addr, align 4
  switch i32 %0, label %sw.default [
    i32 1, label %sw.bb
    i32 3, label %sw.bb.1
    i32 4, label %sw.bb.2
    i32 5, label %sw.bb.3
    i32 6, label %sw.bb.4
    i32 7, label %sw.bb.5
    i32 8, label %sw.bb.6
    i32 9, label %sw.bb.7
    i32 10, label %sw.bb.8
    i32 11, label %sw.bb.9
    i32 12, label %sw.bb.10
    i32 13, label %sw.bb.11
    i32 14, label %sw.bb.12
    i32 15, label %sw.bb.13
    i32 16, label %sw.bb.14
    i32 17, label %sw.bb.15
    i32 18, label %sw.bb.16
    i32 19, label %sw.bb.17
    i32 20, label %sw.bb.18
    i32 21, label %sw.bb.19
    i32 22, label %sw.bb.20
  ]

sw.bb:                                            ; preds = %entry
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.462, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.1:                                          ; preds = %entry
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.463, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.2:                                          ; preds = %entry
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.464, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.3:                                          ; preds = %entry
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.465, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.4:                                          ; preds = %entry
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.466, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.5:                                          ; preds = %entry
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.467, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.6:                                          ; preds = %entry
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.468, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.7:                                          ; preds = %entry
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.469, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.8:                                          ; preds = %entry
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.470, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.9:                                          ; preds = %entry
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.471, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.10:                                         ; preds = %entry
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.472, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.11:                                         ; preds = %entry
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.473, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.12:                                         ; preds = %entry
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.474, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.13:                                         ; preds = %entry
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.475, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.14:                                         ; preds = %entry
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.476, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.15:                                         ; preds = %entry
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.477, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.16:                                         ; preds = %entry
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.478, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.17:                                         ; preds = %entry
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.479, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.18:                                         ; preds = %entry
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.480, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.19:                                         ; preds = %entry
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.481, i32 0, i32 0), i8** %retval
  br label %return

sw.bb.20:                                         ; preds = %entry
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.482, i32 0, i32 0), i8** %retval
  br label %return

sw.default:                                       ; preds = %entry
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.483, i32 0, i32 0), i8** %retval
  br label %return

return:                                           ; preds = %sw.default, %sw.bb.20, %sw.bb.19, %sw.bb.18, %sw.bb.17, %sw.bb.16, %sw.bb.15, %sw.bb.14, %sw.bb.13, %sw.bb.12, %sw.bb.11, %sw.bb.10, %sw.bb.9, %sw.bb.8, %sw.bb.7, %sw.bb.6, %sw.bb.5, %sw.bb.4, %sw.bb.3, %sw.bb.2, %sw.bb.1, %sw.bb
  %1 = load i8*, i8** %retval
  ret i8* %1
}

; Function Attrs: nounwind uwtable
define internal i64 @size_of_pubnames() #0 {
entry:
  %size = alloca i64, align 8
  %i = alloca i32, align 4
  %p = alloca %struct.pubname_struct*, align 8
  store i64 10, i64* %size, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @pubname_table_in_use, align 4
  %cmp = icmp ult i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %idxprom = zext i32 %2 to i64
  %3 = load %struct.pubname_struct*, %struct.pubname_struct** @pubname_table, align 8
  %arrayidx = getelementptr inbounds %struct.pubname_struct, %struct.pubname_struct* %3, i64 %idxprom
  store %struct.pubname_struct* %arrayidx, %struct.pubname_struct** %p, align 8
  %4 = load %struct.pubname_struct*, %struct.pubname_struct** %p, align 8
  %name = getelementptr inbounds %struct.pubname_struct, %struct.pubname_struct* %4, i32 0, i32 1
  %5 = load i8*, i8** %name, align 8
  %call = call i64 @strlen(i8* %5) #7
  %add = add i64 4, %call
  %add1 = add i64 %add, 1
  %6 = load i64, i64* %size, align 8
  %add2 = add i64 %6, %add1
  store i64 %add2, i64* %size, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %8 = load i64, i64* %size, align 8
  %add3 = add i64 %8, 4
  store i64 %add3, i64* %size, align 8
  %9 = load i64, i64* %size, align 8
  ret i64 %9
}

; Function Attrs: nounwind uwtable
define internal i64 @size_of_aranges() #0 {
entry:
  %size = alloca i64, align 8
  %0 = load i32, i32* @target_flags, align 4
  %and = and i32 %0, 33554432
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, i32 64, i32 32
  %div = sdiv i32 %cond, 8
  %mul = mul nsw i32 %div, 2
  %add = add nsw i32 12, %mul
  %sub = sub nsw i32 %add, 1
  %1 = load i32, i32* @target_flags, align 4
  %and1 = and i32 %1, 33554432
  %tobool2 = icmp ne i32 %and1, 0
  %cond3 = select i1 %tobool2, i32 64, i32 32
  %div4 = sdiv i32 %cond3, 8
  %mul5 = mul nsw i32 %div4, 2
  %div6 = sdiv i32 %sub, %mul5
  %2 = load i32, i32* @target_flags, align 4
  %and7 = and i32 %2, 33554432
  %tobool8 = icmp ne i32 %and7, 0
  %cond9 = select i1 %tobool8, i32 64, i32 32
  %div10 = sdiv i32 %cond9, 8
  %mul11 = mul nsw i32 %div10, 2
  %mul12 = mul nsw i32 %div6, %mul11
  %sub13 = sub nsw i32 %mul12, 4
  %conv = sext i32 %sub13 to i64
  store i64 %conv, i64* %size, align 8
  %3 = load i32, i32* @target_flags, align 4
  %and14 = and i32 %3, 33554432
  %tobool15 = icmp ne i32 %and14, 0
  %cond16 = select i1 %tobool15, i32 64, i32 32
  %div17 = sdiv i32 %cond16, 8
  %mul18 = mul nsw i32 2, %div17
  %conv19 = sext i32 %mul18 to i64
  %4 = load i64, i64* %size, align 8
  %add20 = add i64 %4, %conv19
  store i64 %add20, i64* %size, align 8
  %5 = load i32, i32* @target_flags, align 4
  %and21 = and i32 %5, 33554432
  %tobool22 = icmp ne i32 %and21, 0
  %cond23 = select i1 %tobool22, i32 64, i32 32
  %div24 = sdiv i32 %cond23, 8
  %mul25 = mul nsw i32 2, %div24
  %6 = load i32, i32* @arange_table_in_use, align 4
  %mul26 = mul i32 %mul25, %6
  %conv27 = zext i32 %mul26 to i64
  %7 = load i64, i64* %size, align 8
  %add28 = add i64 %7, %conv27
  store i64 %add28, i64* %size, align 8
  %8 = load i32, i32* @target_flags, align 4
  %and29 = and i32 %8, 33554432
  %tobool30 = icmp ne i32 %and29, 0
  %cond31 = select i1 %tobool30, i32 64, i32 32
  %div32 = sdiv i32 %cond31, 8
  %mul33 = mul nsw i32 2, %div32
  %conv34 = sext i32 %mul33 to i64
  %9 = load i64, i64* %size, align 8
  %add35 = add i64 %9, %conv34
  store i64 %add35, i64* %size, align 8
  %10 = load i64, i64* %size, align 8
  ret i64 %10
}

; Function Attrs: inlinehint nounwind uwtable
define internal i8* @get_AT_low_pc(%struct.die_struct* %die) #3 {
entry:
  %die.addr = alloca %struct.die_struct*, align 8
  %a = alloca %struct.dw_attr_struct*, align 8
  store %struct.die_struct* %die, %struct.die_struct** %die.addr, align 8
  %0 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %call = call %struct.dw_attr_struct* @get_AT(%struct.die_struct* %0, i32 17)
  store %struct.dw_attr_struct* %call, %struct.dw_attr_struct** %a, align 8
  %1 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %tobool = icmp ne %struct.dw_attr_struct* %1, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %call1 = call i8* @AT_lbl(%struct.dw_attr_struct* %2)
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %call1, %cond.true ], [ null, %cond.false ]
  ret i8* %cond
}

; Function Attrs: inlinehint nounwind uwtable
define internal i8* @get_AT_hi_pc(%struct.die_struct* %die) #3 {
entry:
  %die.addr = alloca %struct.die_struct*, align 8
  %a = alloca %struct.dw_attr_struct*, align 8
  store %struct.die_struct* %die, %struct.die_struct** %die.addr, align 8
  %0 = load %struct.die_struct*, %struct.die_struct** %die.addr, align 8
  %call = call %struct.dw_attr_struct* @get_AT(%struct.die_struct* %0, i32 18)
  store %struct.dw_attr_struct* %call, %struct.dw_attr_struct** %a, align 8
  %1 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %tobool = icmp ne %struct.dw_attr_struct* %1, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load %struct.dw_attr_struct*, %struct.dw_attr_struct** %a, align 8
  %call1 = call i8* @AT_lbl(%struct.dw_attr_struct* %2)
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %call1, %cond.true ], [ null, %cond.false ]
  ret i8* %cond
}

declare void @assemble_string(i8*, i32) #1

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readonly }
attributes #8 = { noreturn }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
