; ModuleID = 'loop.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.rtx_def = type { i32, [1 x %union.rtunion_def] }
%union.rtunion_def = type { i64 }
%struct.loop = type { i32, %struct.basic_block_def*, %struct.basic_block_def*, %struct.basic_block_def*, %struct.edge_def**, i32, %struct.basic_block_def*, %struct.basic_block_def*, %struct.simple_bitmap_def*, i32, %struct.edge_def**, i32, %struct.edge_def**, i32, %struct.simple_bitmap_def*, i32, i32, %struct.loop*, %struct.loop*, %struct.loop*, i32, i32, i8*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32 }
%struct.basic_block_def = type { %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %union.tree_node*, %struct.edge_def*, %struct.edge_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, i8*, i32, i32, i64, i32, i32 }
%union.tree_node = type opaque
%struct.edge_def = type { %struct.edge_def*, %struct.edge_def*, %struct.basic_block_def*, %struct.basic_block_def*, %struct.rtx_def*, i8*, i32, i32, i64 }
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32 }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.simple_bitmap_def = type { i32, i32, i32, [1 x i64] }
%struct.function = type { %struct.eh_status*, %struct.stmt_status*, %struct.expr_status*, %struct.emit_status*, %struct.varasm_status*, i8*, %union.tree_node*, %struct.function*, i32, i32, i32, i32, %struct.rtx_def*, %struct.ix86_args, %struct.rtx_def*, %struct.rtx_def*, i8*, %struct.initial_value_struct*, i32, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i64, %union.tree_node*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, %struct.rtx_def**, %struct.temp_slot*, i32, i32, i32, %struct.var_refs_queue*, i32, i32, i8*, %union.tree_node*, %struct.rtx_def*, i32, i32, %struct.machine_function*, i32, i32, %struct.language_function*, %struct.rtx_def*, i24 }
%struct.eh_status = type opaque
%struct.stmt_status = type opaque
%struct.expr_status = type { i32, i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def* }
%struct.emit_status = type { i32, i32, %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %struct.sequence_stack*, i32, i32, i8*, i32, i8*, %union.tree_node**, %struct.rtx_def** }
%struct.sequence_stack = type { %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %struct.sequence_stack* }
%struct.varasm_status = type opaque
%struct.ix86_args = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.initial_value_struct = type opaque
%struct.temp_slot = type opaque
%struct.var_refs_queue = type { %struct.rtx_def*, i32, i32, %struct.var_refs_queue* }
%struct.machine_function = type opaque
%struct.language_function = type opaque
%struct.varray_head_tag = type { i64, i64, i64, i8*, %union.varray_data_tag }
%union.varray_data_tag = type { [1 x %struct.const_equiv_data] }
%struct.const_equiv_data = type { %struct.rtx_def*, i32 }
%struct.processor_costs = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [3 x i32], [3 x i32], i32, [3 x i32], [3 x i32], i32, [2 x i32], [2 x i32], i32, [3 x i32], [3 x i32], i32, i32, i32 }
%struct.insn_data = type { i8*, i8*, %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.insn_operand_data*, i8, i8, i8, i8 }
%struct.insn_operand_data = type { i32 (%struct.rtx_def*, i32)*, i8*, i16, i8, i8 }
%struct.loops = type { i32, i32, %struct.loop*, %struct.loop*, %struct.cfg, %struct.simple_bitmap_def* }
%struct.cfg = type { %struct.simple_bitmap_def**, i32*, i32* }
%struct.loop_info = type { i32, i32, i32, i32, i32, i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32, i64, i32, i32, %struct.iv_class*, %struct.rtx_def*, %struct.loop_mem_info*, i32, i32, i32, i32, i32, %struct.rtx_def*, %struct.loop_movables, %struct.loop_regs, %struct.loop_ivs, i32 }
%struct.iv_class = type { i32, i32, %struct.induction*, i32, %struct.induction*, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.iv_class*, %struct.rtx_def*, %struct.rtx_def*, i8 }
%struct.induction = type { %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32, %struct.rtx_def*, %struct.rtx_def**, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32, %struct.rtx_def*, i32, i16, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.induction*, %struct.induction*, i64, %struct.induction*, %struct.rtx_def* }
%struct.loop_mem_info = type { %struct.rtx_def*, %struct.rtx_def*, i32 }
%struct.loop_movables = type { %struct.movable*, %struct.movable* }
%struct.movable = type { %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32, i32, i16, i16, i8, i32, %struct.movable*, %struct.movable*, %struct.movable* }
%struct.loop_regs = type { i32, i32, %struct.loop_reg*, i32 }
%struct.loop_reg = type { i32, i32, %struct.rtx_def*, i8, i8 }
%struct.loop_ivs = type { %struct.iv*, i32, %struct.iv_class* }
%struct.iv = type { i32, %union.anon.0 }
%union.anon.0 = type { %struct.iv_class* }
%struct.rtvec_def = type { i32, [1 x %struct.rtx_def*] }
%struct.reg_info_def = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }
%struct.cselib_val_struct = type { i32, %union.anon, %struct.elt_loc_list*, %struct.elt_list* }
%union.anon = type { %struct.rtx_def* }
%struct.elt_loc_list = type { %struct.elt_loc_list*, %struct.rtx_def*, %struct.rtx_def* }
%struct.elt_list = type { %struct.elt_list*, %struct.cselib_val_struct* }
%struct.rtx_pair = type { %struct.rtx_def*, %struct.rtx_def* }
%struct.loop_replace_args = type { %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def* }
%struct.note_reg_stored_arg = type { i32, %struct.rtx_def* }
%struct.prefetch_info = type { %struct.iv_class*, %struct.induction*, %struct.rtx_def*, i64, i64, i32, i32, i8 }
%struct.check_store_data = type { %struct.rtx_def*, i32 }
%struct.combine_givs_stats = type { i32, i32 }

@word_mode = external global i32, align 4
@reg_address_cost = internal global i32 0, align 4
@copy_cost = internal global i32 0, align 4
@loop_dump_stream = common global %struct._IO_FILE* null, align 8
@max_reg_before_loop = common global i32 0, align 4
@loop_max_reg = internal global i32 0, align 4
@regs_may_share = external global %struct.rtx_def*, align 8
@max_loop_num = internal global i32 0, align 4
@max_uid_for_loop = common global i32 0, align 4
@uid_luid = common global i32* null, align 8
@uid_loop = common global %struct.loop** null, align 8
@.str = private unnamed_addr constant [7 x i8] c"loop.c\00", align 1
@__FUNCTION__.loop_optimize = private unnamed_addr constant [14 x i8] c"loop_optimize\00", align 1
@max_luid = internal global i32 0, align 4
@indirect_jump_in_function = internal global i32 0, align 4
@write_symbols = external global i32, align 4
@rtx_format = external constant [153 x i8*], align 16
@rtx_length = external constant [153 x i8], align 16
@flag_unroll_loops = external global i32, align 4
@global_rtl = external global [11 x %struct.rtx_def*], align 16
@pic_offset_table_rtx = external global %struct.rtx_def*, align 8
@cfun = external global %struct.function*, align 8
@call_used_regs = external global [53 x i8], align 16
@const_int_rtx = external global [129 x %struct.rtx_def*], align 16
@__FUNCTION__.loop_insn_first_p = private unnamed_addr constant [18 x i8] c"loop_insn_first_p\00", align 1
@rtx_class = external constant [153 x i8], align 16
@const_tiny_rtx = external global [3 x [59 x %struct.rtx_def*]], align 16
@mode_class = external constant [59 x i32], align 16
@mode_bitsize = external constant [59 x i16], align 16
@mode_mask_array = external constant [59 x i64], align 16
@stderr = external global %struct._IO_FILE*, align 8
@n_non_fixed_regs = external global i32, align 4
@__FUNCTION__.scan_loop = private unnamed_addr constant [10 x i8] c"scan_loop\00", align 1
@.str.1 = private unnamed_addr constant [32 x i8] c"\0ALoop from %d to %d is phony.\0A\0A\00", align 1
@.str.2 = private unnamed_addr constant [37 x i8] c"\0ALoop from %d to %d: %d real insns.\0A\00", align 1
@.str.3 = private unnamed_addr constant [22 x i8] c"Continue at insn %d.\0A\00", align 1
@reg_n_info = external global %struct.varray_head_tag*, align 8
@target_flags = external global i32, align 4
@mode_size = external constant [59 x i8], align 16
@optimize_size = external global i32, align 4
@flag_strength_reduce = external global i32, align 4
@flag_non_call_exceptions = external global i32, align 4
@regs_invalidated_by_call = external global i64, align 8
@__FUNCTION__.labels_in_range_p = private unnamed_addr constant [18 x i8] c"labels_in_range_p\00", align 1
@class_narrowest_mode = external constant [9 x i32], align 16
@mode_wider_mode = external constant [59 x i8], align 16
@.str.4 = private unnamed_addr constant [30 x i8] c"Insn %d: regno %d (life %d), \00", align 1
@.str.5 = private unnamed_addr constant [12 x i8] c"consec %d, \00", align 1
@.str.6 = private unnamed_addr constant [6 x i8] c"cond \00", align 1
@.str.7 = private unnamed_addr constant [7 x i8] c"force \00", align 1
@.str.8 = private unnamed_addr constant [8 x i8] c"global \00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"done \00", align 1
@.str.10 = private unnamed_addr constant [11 x i8] c"move-insn \00", align 1
@.str.11 = private unnamed_addr constant [12 x i8] c"matches %d \00", align 1
@.str.12 = private unnamed_addr constant [11 x i8] c"forces %d \00", align 1
@.str.13 = private unnamed_addr constant [12 x i8] c"savings %d \00", align 1
@.str.14 = private unnamed_addr constant [28 x i8] c"halved since already moved \00", align 1
@flag_move_all_movables = external global i32, align 4
@.str.15 = private unnamed_addr constant [13 x i8] c" moved to %d\00", align 1
@__FUNCTION__.move_movables = private unnamed_addr constant [14 x i8] c"move_movables\00", align 1
@.str.16 = private unnamed_addr constant [14 x i8] c"not desirable\00", align 1
@.str.17 = private unnamed_addr constant [9 x i8] c"not safe\00", align 1
@.str.18 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@__FUNCTION__.load_mems = private unnamed_addr constant [10 x i8] c"load_mems\00", align 1
@flag_float_store = external global i32, align 4
@.str.19 = private unnamed_addr constant [26 x i8] c"Hoisted regno %d %s from \00", align 1
@.str.20 = private unnamed_addr constant [4 x i8] c"r/w\00", align 1
@.str.21 = private unnamed_addr constant [4 x i8] c"r/o\00", align 1
@__FUNCTION__.try_copy_prop = private unnamed_addr constant [14 x i8] c"try_copy_prop\00", align 1
@.str.22 = private unnamed_addr constant [18 x i8] c"  Replaced reg %d\00", align 1
@.str.23 = private unnamed_addr constant [3 x i8] c".\0A\00", align 1
@.str.24 = private unnamed_addr constant [26 x i8] c", deleting init_insn (%d)\00", align 1
@.str.25 = private unnamed_addr constant [50 x i8] c"  Swapped set of reg %d at %d with reg %d at %d.\0A\00", align 1
@addr_placeholder = internal global %struct.rtx_def* null, align 8
@flag_reduce_all_givs = external global i32, align 4
@.str.26 = private unnamed_addr constant [43 x i8] c"giv of insn %d not worth while, %d vs %d.\0A\00", align 1
@.str.27 = private unnamed_addr constant [40 x i8] c"giv of insn %d: would need a multiply.\0A\00", align 1
@.str.28 = private unnamed_addr constant [24 x i8] c"Reg %d: biv eliminated\0A\00", align 1
@x86_use_loop = external constant i32, align 4
@ix86_cpu = external global i32, align 4
@flag_branch_on_count_reg = external global i32, align 4
@.str.29 = private unnamed_addr constant [23 x i8] c"Biv %d: discarded, %s\0A\00", align 1
@.str.30 = private unnamed_addr constant [23 x i8] c"not induction variable\00", align 1
@.str.31 = private unnamed_addr constant [18 x i8] c"never incremented\00", align 1
@.str.32 = private unnamed_addr constant [12 x i8] c"count error\00", align 1
@.str.33 = private unnamed_addr constant [18 x i8] c"Biv %d: verified\0A\00", align 1
@note_insn = internal global %struct.rtx_def* null, align 8
@.str.34 = private unnamed_addr constant [47 x i8] c"Biv %d: initialized at insn %d: initial value \00", align 1
@.str.35 = private unnamed_addr constant [12 x i8] c"is complex\0A\00", align 1
@__FUNCTION__.general_induction_var = private unnamed_addr constant [22 x i8] c"general_induction_var\00", align 1
@__FUNCTION__.simplify_giv_expr = private unnamed_addr constant [18 x i8] c"simplify_giv_expr\00", align 1
@__FUNCTION__.record_giv = private unnamed_addr constant [11 x i8] c"record_giv\00", align 1
@x86_prefetch_sse = external global i32, align 4
@.str.36 = private unnamed_addr constant [37 x i8] c"Prefetch: ignoring loop - has call.\0A\00", align 1
@.str.37 = private unnamed_addr constant [51 x i8] c"Prefetch: ignoring loop - not enought iterations.\0A\00", align 1
@.str.38 = private unnamed_addr constant [60 x i8] c"Prefetch: biv %i ignored: non-constant addition at insn %i:\00", align 1
@.str.39 = private unnamed_addr constant [53 x i8] c"Prefetch: biv %i ignored: maybe_multiple at insn %i:\00", align 1
@.str.40 = private unnamed_addr constant [30 x i8] c"Prefetch: Ignoring giv at %i\0A\00", align 1
@.str.41 = private unnamed_addr constant [40 x i8] c"Maximal number of prefetches exceeded.\0A\00", align 1
@ix86_cost = external global %struct.processor_costs*, align 8
@.str.42 = private unnamed_addr constant [27 x i8] c"Prefetch insn %i address: \00", align 1
@.str.43 = private unnamed_addr constant [9 x i8] c" Index: \00", align 1
@.str.44 = private unnamed_addr constant [4 x i8] c"%ld\00", align 1
@.str.45 = private unnamed_addr constant [10 x i8] c" stride: \00", align 1
@.str.46 = private unnamed_addr constant [56 x i8] c" density: %i%% total_bytes: %u%sin loop: %s before: %s\0A\00", align 1
@.str.47 = private unnamed_addr constant [13 x i8] c" read/write \00", align 1
@.str.48 = private unnamed_addr constant [12 x i8] c" read only \00", align 1
@.str.49 = private unnamed_addr constant [4 x i8] c"yes\00", align 1
@.str.50 = private unnamed_addr constant [3 x i8] c"no\00", align 1
@.str.51 = private unnamed_addr constant [40 x i8] c"Real prefetches needed: %i (write: %i)\0A\00", align 1
@insn_data = external constant [0 x %struct.insn_data], align 8
@__FUNCTION__.rtx_equal_for_prefetch_p = private unnamed_addr constant [25 x i8] c"rtx_equal_for_prefetch_p\00", align 1
@.str.52 = private unnamed_addr constant [36 x i8] c"Found branch outside giv lifetime.\0A\00", align 1
@.str.53 = private unnamed_addr constant [45 x i8] c"Insn %d: giv reg %d final_value replaceable\0A\00", align 1
@.str.54 = private unnamed_addr constant [18 x i8] c"Can reverse loop\0A\00", align 1
@.str.55 = private unnamed_addr constant [14 x i8] c"Reversed loop\00", align 1
@.str.56 = private unnamed_addr constant [23 x i8] c" and added reg_nonneg\0A\00", align 1
@__FUNCTION__.loop_biv_eliminable_p = private unnamed_addr constant [22 x i8] c"loop_biv_eliminable_p\00", align 1
@.str.57 = private unnamed_addr constant [26 x i8] c"Cannot eliminate biv %d.\0A\00", align 1
@.str.58 = private unnamed_addr constant [40 x i8] c"First use: insn %d, last use: insn %d.\0A\00", align 1
@__FUNCTION__.check_ext_dependent_givs = private unnamed_addr constant [25 x i8] c"check_ext_dependent_givs\00", align 1
@.str.59 = private unnamed_addr constant [44 x i8] c"Verified ext dependent giv at %d of reg %d\0A\00", align 1
@.str.60 = private unnamed_addr constant [32 x i8] c"biv iteration values overflowed\00", align 1
@.str.61 = private unnamed_addr constant [41 x i8] c"biv iteration info incomplete; incr by 1\00", align 1
@.str.62 = private unnamed_addr constant [30 x i8] c"biv iteration info incomplete\00", align 1
@.str.63 = private unnamed_addr constant [36 x i8] c"Failed ext dependent giv at %d, %s\0A\00", align 1
@.str.64 = private unnamed_addr constant [28 x i8] c"Sorted combine statistics:\0A\00", align 1
@.str.65 = private unnamed_addr constant [10 x i8] c" {%d, %d}\00", align 1
@.str.66 = private unnamed_addr constant [69 x i8] c"giv at %d combined with giv at %d; new benefit %d + %d, lifetime %d\0A\00", align 1
@.str.67 = private unnamed_addr constant [22 x i8] c"giv at %d reduced to \00", align 1
@.str.68 = private unnamed_addr constant [47 x i8] c"Cannot eliminate biv %d: biv used in insn %d.\0A\00", align 1
@.str.69 = private unnamed_addr constant [23 x i8] c"biv %d %s eliminated.\0A\00", align 1
@.str.70 = private unnamed_addr constant [4 x i8] c"was\00", align 1
@.str.71 = private unnamed_addr constant [7 x i8] c"can be\00", align 1
@__FUNCTION__.find_and_verify_loops = private unnamed_addr constant [22 x i8] c"find_and_verify_loops\00", align 1
@.str.72 = private unnamed_addr constant [36 x i8] c"\0ALoop at %d ignored due to setjmp.\0A\00", align 1
@.str.73 = private unnamed_addr constant [51 x i8] c"\0ALoop at %d ignored due to multiple entry points.\0A\00", align 1
@.str.74 = private unnamed_addr constant [47 x i8] c"\0ALoop at %d ignored due to unknown exit jump.\0A\00", align 1
@__FUNCTION__.update_reg_last_use = private unnamed_addr constant [20 x i8] c"update_reg_last_use\00", align 1
@.str.75 = private unnamed_addr constant [24 x i8] c"Loop %d: %d IV classes\0A\00", align 1
@.str.76 = private unnamed_addr constant [33 x i8] c"IV class for reg %d, benefit %d\0A\00", align 1
@.str.77 = private unnamed_addr constant [14 x i8] c" Init insn %d\00", align 1
@.str.78 = private unnamed_addr constant [13 x i8] c", init val: \00", align 1
@.str.79 = private unnamed_addr constant [14 x i8] c", init test: \00", align 1
@.str.80 = private unnamed_addr constant [13 x i8] c" Final val: \00", align 1
@.str.81 = private unnamed_addr constant [19 x i8] c" Total increment: \00", align 1
@.str.82 = private unnamed_addr constant [24 x i8] c" Inc%d: insn %d, incr: \00", align 1
@.str.83 = private unnamed_addr constant [30 x i8] c" Giv%d: insn %d, benefit %d, \00", align 1
@.str.84 = private unnamed_addr constant [16 x i8] c"Biv %d: insn %d\00", align 1
@.str.85 = private unnamed_addr constant [8 x i8] c" const \00", align 1
@.str.86 = private unnamed_addr constant [8 x i8] c" final \00", align 1
@.str.87 = private unnamed_addr constant [16 x i8] c"Giv %d: insn %d\00", align 1
@.str.88 = private unnamed_addr constant [22 x i8] c"Dest address: insn %d\00", align 1
@.str.89 = private unnamed_addr constant [23 x i8] c" src reg %d benefit %d\00", align 1
@.str.90 = private unnamed_addr constant [13 x i8] c" lifetime %d\00", align 1
@.str.91 = private unnamed_addr constant [13 x i8] c" replaceable\00", align 1
@.str.92 = private unnamed_addr constant [6 x i8] c" ncav\00", align 1
@.str.93 = private unnamed_addr constant [8 x i8] c" ext se\00", align 1
@.str.94 = private unnamed_addr constant [8 x i8] c" ext ze\00", align 1
@.str.95 = private unnamed_addr constant [8 x i8] c" ext tr\00", align 1
@__FUNCTION__.loop_giv_dump = private unnamed_addr constant [14 x i8] c"loop_giv_dump\00", align 1
@.str.96 = private unnamed_addr constant [7 x i8] c" mult \00", align 1
@.str.97 = private unnamed_addr constant [7 x i8] c" add  \00", align 1
@.str.98 = private unnamed_addr constant [33 x i8] c";;  No NOTE_INSN_LOOP_BEG at %d\0A\00", align 1
@.str.99 = private unnamed_addr constant [33 x i8] c";;  No NOTE_INSN_LOOP_END at %d\0A\00", align 1
@.str.100 = private unnamed_addr constant [78 x i8] c";;  start %d (%d), cont dom %d (%d), cont %d (%d), vtop %d (%d), end %d (%d)\0A\00", align 1
@basic_block_for_insn = external global %struct.varray_head_tag*, align 8
@.str.101 = private unnamed_addr constant [37 x i8] c";;  top %d (%d), scan start %d (%d)\0A\00", align 1
@.str.102 = private unnamed_addr constant [18 x i8] c";;  exit_count %d\00", align 1
@.str.103 = private unnamed_addr constant [10 x i8] c", labels:\00", align 1
@.str.104 = private unnamed_addr constant [5 x i8] c" %d \00", align 1
@.str.105 = private unnamed_addr constant [43 x i8] c";;  NOTE_INSN_LOOP_CONT not in loop latch\0A\00", align 1

; Function Attrs: nounwind uwtable
define void @init_loop() #0 {
entry:
  %reg = alloca %struct.rtx_def*, align 8
  %0 = load i32, i32* @word_mode, align 4
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 %0, i32 58)
  store %struct.rtx_def* %call, %struct.rtx_def** %reg, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %call1 = call i32 @address_cost(%struct.rtx_def* %1, i32 4)
  store i32 %call1, i32* @reg_address_cost, align 4
  store i32 4, i32* @copy_cost, align 4
  ret void
}

declare %struct.rtx_def* @gen_rtx_REG(i32, i32) #1

declare i32 @address_cost(%struct.rtx_def*, i32) #1

; Function Attrs: nounwind uwtable
define void @loop_optimize(%struct.rtx_def* %f, %struct._IO_FILE* %dumpfile, i32 %flags) #0 {
entry:
  %f.addr = alloca %struct.rtx_def*, align 8
  %dumpfile.addr = alloca %struct._IO_FILE*, align 8
  %flags.addr = alloca i32, align 4
  %insn = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  %loops_data = alloca %struct.loops, align 8
  %loops = alloca %struct.loops*, align 8
  %loops_info = alloca %struct.loop_info*, align 8
  %loop = alloca %struct.loop*, align 8
  store %struct.rtx_def* %f, %struct.rtx_def** %f.addr, align 8
  store %struct._IO_FILE* %dumpfile, %struct._IO_FILE** %dumpfile.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  store %struct.loops* %loops_data, %struct.loops** %loops, align 8
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %dumpfile.addr, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** @loop_dump_stream, align 8
  call void @init_recog_no_volatile()
  %call = call i32 @max_reg_num()
  store i32 %call, i32* @max_reg_before_loop, align 4
  %1 = load i32, i32* @max_reg_before_loop, align 4
  store i32 %1, i32* @loop_max_reg, align 4
  store %struct.rtx_def* null, %struct.rtx_def** @regs_may_share, align 8
  store i32 0, i32* @max_loop_num, align 4
  %2 = load %struct.rtx_def*, %struct.rtx_def** %f.addr, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %insn, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %tobool = icmp ne %struct.rtx_def* %3, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %5 = bitcast %struct.rtx_def* %4 to i32*
  %bf.load = load i32, i32* %5, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 37
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 4
  %rtint = bitcast %union.rtunion_def* %arrayidx to i32*
  %7 = load i32, i32* %rtint, align 4
  %cmp1 = icmp eq i32 %7, -96
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %8 = load i32, i32* @max_loop_num, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* @max_loop_num, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %9 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld2 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i32 0, i64 2
  %rtx = bitcast %union.rtunion_def* %arrayidx3 to %struct.rtx_def**
  %10 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %10, %struct.rtx_def** %insn, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %11 = load i32, i32* @max_loop_num, align 4
  %cmp4 = icmp eq i32 %11, 0
  br i1 %cmp4, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %for.end
  br label %return

if.end.6:                                         ; preds = %for.end
  %12 = load i32, i32* @max_loop_num, align 4
  %13 = load %struct.loops*, %struct.loops** %loops, align 8
  %num = getelementptr inbounds %struct.loops, %struct.loops* %13, i32 0, i32 0
  store i32 %12, i32* %num, align 4
  %call7 = call i32 @get_max_uid()
  %add = add nsw i32 %call7, 1
  %14 = load i32, i32* @max_loop_num, align 4
  %mul = mul nsw i32 %14, 32
  %add8 = add nsw i32 %add, %mul
  store i32 %add8, i32* @max_uid_for_loop, align 4
  %15 = load i32, i32* @max_uid_for_loop, align 4
  %conv = sext i32 %15 to i64
  %call9 = call noalias i8* @xcalloc(i64 %conv, i64 4)
  %16 = bitcast i8* %call9 to i32*
  store i32* %16, i32** @uid_luid, align 8
  %17 = load i32, i32* @max_uid_for_loop, align 4
  %conv10 = sext i32 %17 to i64
  %call11 = call noalias i8* @xcalloc(i64 %conv10, i64 8)
  %18 = bitcast i8* %call11 to %struct.loop**
  store %struct.loop** %18, %struct.loop*** @uid_loop, align 8
  %19 = load %struct.loops*, %struct.loops** %loops, align 8
  %num12 = getelementptr inbounds %struct.loops, %struct.loops* %19, i32 0, i32 0
  %20 = load i32, i32* %num12, align 4
  %conv13 = sext i32 %20 to i64
  %call14 = call noalias i8* @xcalloc(i64 %conv13, i64 248)
  %21 = bitcast i8* %call14 to %struct.loop*
  %22 = load %struct.loops*, %struct.loops** %loops, align 8
  %array = getelementptr inbounds %struct.loops, %struct.loops* %22, i32 0, i32 2
  store %struct.loop* %21, %struct.loop** %array, align 8
  %23 = load %struct.rtx_def*, %struct.rtx_def** %f.addr, align 8
  %24 = load %struct.loops*, %struct.loops** %loops, align 8
  call void @find_and_verify_loops(%struct.rtx_def* %23, %struct.loops* %24)
  %25 = load %struct.loops*, %struct.loops** %loops, align 8
  %num15 = getelementptr inbounds %struct.loops, %struct.loops* %25, i32 0, i32 0
  %26 = load i32, i32* %num15, align 4
  %conv16 = sext i32 %26 to i64
  %call17 = call noalias i8* @xcalloc(i64 %conv16, i64 240)
  %27 = bitcast i8* %call17 to %struct.loop_info*
  store %struct.loop_info* %27, %struct.loop_info** %loops_info, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond.18

for.cond.18:                                      ; preds = %for.inc.25, %if.end.6
  %28 = load i32, i32* %i, align 4
  %29 = load %struct.loops*, %struct.loops** %loops, align 8
  %num19 = getelementptr inbounds %struct.loops, %struct.loops* %29, i32 0, i32 0
  %30 = load i32, i32* %num19, align 4
  %cmp20 = icmp slt i32 %28, %30
  br i1 %cmp20, label %for.body.22, label %for.end.27

for.body.22:                                      ; preds = %for.cond.18
  %31 = load %struct.loop_info*, %struct.loop_info** %loops_info, align 8
  %32 = load i32, i32* %i, align 4
  %idx.ext = sext i32 %32 to i64
  %add.ptr = getelementptr inbounds %struct.loop_info, %struct.loop_info* %31, i64 %idx.ext
  %33 = bitcast %struct.loop_info* %add.ptr to i8*
  %34 = load i32, i32* %i, align 4
  %idxprom = sext i32 %34 to i64
  %35 = load %struct.loops*, %struct.loops** %loops, align 8
  %array23 = getelementptr inbounds %struct.loops, %struct.loops* %35, i32 0, i32 2
  %36 = load %struct.loop*, %struct.loop** %array23, align 8
  %arrayidx24 = getelementptr inbounds %struct.loop, %struct.loop* %36, i64 %idxprom
  %aux = getelementptr inbounds %struct.loop, %struct.loop* %arrayidx24, i32 0, i32 22
  store i8* %33, i8** %aux, align 8
  br label %for.inc.25

for.inc.25:                                       ; preds = %for.body.22
  %37 = load i32, i32* %i, align 4
  %inc26 = add nsw i32 %37, 1
  store i32 %inc26, i32* %i, align 4
  br label %for.cond.18

for.end.27:                                       ; preds = %for.cond.18
  %38 = load %struct.rtx_def*, %struct.rtx_def** %f.addr, align 8
  %39 = load i32, i32* @max_reg_before_loop, align 4
  call void @reg_scan(%struct.rtx_def* %38, i32 %39, i32 1)
  call void @init_alias_analysis()
  %call28 = call i32 @get_max_uid()
  %40 = load i32, i32* @max_uid_for_loop, align 4
  %cmp29 = icmp sgt i32 %call28, %40
  br i1 %cmp29, label %if.then.31, label %if.end.32

if.then.31:                                       ; preds = %for.end.27
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 518, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @__FUNCTION__.loop_optimize, i32 0, i32 0)) #6
  unreachable

if.end.32:                                        ; preds = %for.end.27
  %call33 = call i32 @get_max_uid()
  store i32 %call33, i32* @max_uid_for_loop, align 4
  %41 = load %struct.rtx_def*, %struct.rtx_def** %f.addr, align 8
  %call34 = call i32 @compute_luids(%struct.rtx_def* %41, %struct.rtx_def* null, i32 0)
  store i32 %call34, i32* @max_luid, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond.35

for.cond.35:                                      ; preds = %for.inc.47, %if.end.32
  %42 = load i32, i32* %i, align 4
  %43 = load i32, i32* @max_uid_for_loop, align 4
  %cmp36 = icmp slt i32 %42, %43
  br i1 %cmp36, label %for.body.38, label %for.end.49

for.body.38:                                      ; preds = %for.cond.35
  %44 = load i32, i32* %i, align 4
  %idxprom39 = sext i32 %44 to i64
  %45 = load i32*, i32** @uid_luid, align 8
  %arrayidx40 = getelementptr inbounds i32, i32* %45, i64 %idxprom39
  %46 = load i32, i32* %arrayidx40, align 4
  %47 = load i32*, i32** @uid_luid, align 8
  %arrayidx41 = getelementptr inbounds i32, i32* %47, i64 0
  store i32 %46, i32* %arrayidx41, align 4
  %48 = load i32*, i32** @uid_luid, align 8
  %arrayidx42 = getelementptr inbounds i32, i32* %48, i64 0
  %49 = load i32, i32* %arrayidx42, align 4
  %cmp43 = icmp ne i32 %49, 0
  br i1 %cmp43, label %if.then.45, label %if.end.46

if.then.45:                                       ; preds = %for.body.38
  br label %for.end.49

if.end.46:                                        ; preds = %for.body.38
  br label %for.inc.47

for.inc.47:                                       ; preds = %if.end.46
  %50 = load i32, i32* %i, align 4
  %inc48 = add nsw i32 %50, 1
  store i32 %inc48, i32* %i, align 4
  br label %for.cond.35

for.end.49:                                       ; preds = %if.then.45, %for.cond.35
  store i32 0, i32* %i, align 4
  br label %for.cond.50

for.cond.50:                                      ; preds = %for.inc.64, %for.end.49
  %51 = load i32, i32* %i, align 4
  %52 = load i32, i32* @max_uid_for_loop, align 4
  %cmp51 = icmp slt i32 %51, %52
  br i1 %cmp51, label %for.body.53, label %for.end.66

for.body.53:                                      ; preds = %for.cond.50
  %53 = load i32, i32* %i, align 4
  %idxprom54 = sext i32 %53 to i64
  %54 = load i32*, i32** @uid_luid, align 8
  %arrayidx55 = getelementptr inbounds i32, i32* %54, i64 %idxprom54
  %55 = load i32, i32* %arrayidx55, align 4
  %cmp56 = icmp eq i32 %55, 0
  br i1 %cmp56, label %if.then.58, label %if.end.63

if.then.58:                                       ; preds = %for.body.53
  %56 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %56, 1
  %idxprom59 = sext i32 %sub to i64
  %57 = load i32*, i32** @uid_luid, align 8
  %arrayidx60 = getelementptr inbounds i32, i32* %57, i64 %idxprom59
  %58 = load i32, i32* %arrayidx60, align 4
  %59 = load i32, i32* %i, align 4
  %idxprom61 = sext i32 %59 to i64
  %60 = load i32*, i32** @uid_luid, align 8
  %arrayidx62 = getelementptr inbounds i32, i32* %60, i64 %idxprom61
  store i32 %58, i32* %arrayidx62, align 4
  br label %if.end.63

if.end.63:                                        ; preds = %if.then.58, %for.body.53
  br label %for.inc.64

for.inc.64:                                       ; preds = %if.end.63
  %61 = load i32, i32* %i, align 4
  %inc65 = add nsw i32 %61, 1
  store i32 %inc65, i32* %i, align 4
  br label %for.cond.50

for.end.66:                                       ; preds = %for.cond.50
  %62 = load %struct.rtx_def*, %struct.rtx_def** %f.addr, align 8
  %call67 = call i32 @indirect_jump_in_function_p(%struct.rtx_def* %62)
  store i32 %call67, i32* @indirect_jump_in_function, align 4
  %63 = load i32, i32* @max_loop_num, align 4
  %sub68 = sub nsw i32 %63, 1
  store i32 %sub68, i32* %i, align 4
  br label %for.cond.69

for.cond.69:                                      ; preds = %for.inc.81, %for.end.66
  %64 = load i32, i32* %i, align 4
  %cmp70 = icmp sge i32 %64, 0
  br i1 %cmp70, label %for.body.72, label %for.end.82

for.body.72:                                      ; preds = %for.cond.69
  %65 = load i32, i32* %i, align 4
  %idxprom73 = sext i32 %65 to i64
  %66 = load %struct.loops*, %struct.loops** %loops, align 8
  %array74 = getelementptr inbounds %struct.loops, %struct.loops* %66, i32 0, i32 2
  %67 = load %struct.loop*, %struct.loop** %array74, align 8
  %arrayidx75 = getelementptr inbounds %struct.loop, %struct.loop* %67, i64 %idxprom73
  store %struct.loop* %arrayidx75, %struct.loop** %loop, align 8
  %68 = load %struct.loop*, %struct.loop** %loop, align 8
  %invalid = getelementptr inbounds %struct.loop, %struct.loop* %68, i32 0, i32 21
  %69 = load i32, i32* %invalid, align 4
  %tobool76 = icmp ne i32 %69, 0
  br i1 %tobool76, label %if.end.80, label %land.lhs.true.77

land.lhs.true.77:                                 ; preds = %for.body.72
  %70 = load %struct.loop*, %struct.loop** %loop, align 8
  %end = getelementptr inbounds %struct.loop, %struct.loop* %70, i32 0, i32 27
  %71 = load %struct.rtx_def*, %struct.rtx_def** %end, align 8
  %tobool78 = icmp ne %struct.rtx_def* %71, null
  br i1 %tobool78, label %if.then.79, label %if.end.80

if.then.79:                                       ; preds = %land.lhs.true.77
  %72 = load %struct.loop*, %struct.loop** %loop, align 8
  %73 = load i32, i32* %flags.addr, align 4
  call void @scan_loop(%struct.loop* %72, i32 %73)
  br label %if.end.80

if.end.80:                                        ; preds = %if.then.79, %land.lhs.true.77, %for.body.72
  br label %for.inc.81

for.inc.81:                                       ; preds = %if.end.80
  %74 = load i32, i32* %i, align 4
  %dec = add nsw i32 %74, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond.69

for.end.82:                                       ; preds = %for.cond.69
  %75 = load i32, i32* @write_symbols, align 4
  %cmp83 = icmp ne i32 %75, 0
  br i1 %cmp83, label %if.then.85, label %if.end.86

if.then.85:                                       ; preds = %for.end.82
  call void @reorder_blocks()
  br label %if.end.86

if.end.86:                                        ; preds = %if.then.85, %for.end.82
  call void @end_alias_analysis()
  %76 = load i32*, i32** @uid_luid, align 8
  %77 = bitcast i32* %76 to i8*
  call void @free(i8* %77) #4
  %78 = load %struct.loop**, %struct.loop*** @uid_loop, align 8
  %79 = bitcast %struct.loop** %78 to i8*
  call void @free(i8* %79) #4
  %80 = load %struct.loop_info*, %struct.loop_info** %loops_info, align 8
  %81 = bitcast %struct.loop_info* %80 to i8*
  call void @free(i8* %81) #4
  %82 = load %struct.loops*, %struct.loops** %loops, align 8
  %array87 = getelementptr inbounds %struct.loops, %struct.loops* %82, i32 0, i32 2
  %83 = load %struct.loop*, %struct.loop** %array87, align 8
  %84 = bitcast %struct.loop* %83 to i8*
  call void @free(i8* %84) #4
  br label %return

return:                                           ; preds = %if.end.86, %if.then.5
  ret void
}

declare void @init_recog_no_volatile() #1

declare i32 @max_reg_num() #1

declare i32 @get_max_uid() #1

declare noalias i8* @xcalloc(i64, i64) #1

; Function Attrs: nounwind uwtable
define internal void @find_and_verify_loops(%struct.rtx_def* %f, %struct.loops* %loops) #0 {
entry:
  %f.addr = alloca %struct.rtx_def*, align 8
  %loops.addr = alloca %struct.loops*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %label = alloca %struct.rtx_def*, align 8
  %num_loops = alloca i32, align 4
  %current_loop = alloca %struct.loop*, align 8
  %next_loop = alloca %struct.loop*, align 8
  %loop = alloca %struct.loop*, align 8
  %this_loop = alloca %struct.loop*, align 8
  %note = alloca %struct.rtx_def*, align 8
  %p = alloca %struct.rtx_def*, align 8
  %our_next = alloca %struct.rtx_def*, align 8
  %last_insn_to_move = alloca %struct.rtx_def*, align 8
  %dest_loop = alloca %struct.loop*, align 8
  %outer_loop = alloca %struct.loop*, align 8
  %target = alloca %struct.rtx_def*, align 8
  %target_loop = alloca %struct.loop*, align 8
  %loc = alloca %struct.rtx_def*, align 8
  %loc2 = alloca %struct.rtx_def*, align 8
  %tmp = alloca %struct.rtx_def*, align 8
  %cond_label = alloca %struct.rtx_def*, align 8
  %new_label = alloca %struct.rtx_def*, align 8
  %q = alloca %struct.rtx_def*, align 8
  %r = alloca %struct.rtx_def*, align 8
  %temp = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %f, %struct.rtx_def** %f.addr, align 8
  store %struct.loops* %loops, %struct.loops** %loops.addr, align 8
  %0 = load %struct.loops*, %struct.loops** %loops.addr, align 8
  %num = getelementptr inbounds %struct.loops, %struct.loops* %0, i32 0, i32 0
  %1 = load i32, i32* %num, align 4
  store i32 %1, i32* %num_loops, align 4
  %2 = load %struct.rtx_def*, %struct.rtx_def** %f.addr, align 8
  %call = call i32 @compute_luids(%struct.rtx_def* %2, %struct.rtx_def* null, i32 0)
  %3 = load %struct.loop**, %struct.loop*** @uid_loop, align 8
  %arrayidx = getelementptr inbounds %struct.loop*, %struct.loop** %3, i64 0
  store %struct.loop* null, %struct.loop** %arrayidx, align 8
  store i32 0, i32* %num_loops, align 4
  store %struct.loop* null, %struct.loop** %current_loop, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %f.addr, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %insn, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc.33, %entry
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %tobool = icmp ne %struct.rtx_def* %5, null
  br i1 %tobool, label %for.body, label %for.end.36

for.body:                                         ; preds = %for.cond
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %7 = bitcast %struct.rtx_def* %6 to i32*
  %bf.load = load i32, i32* %7, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 37
  br i1 %cmp, label %if.then, label %if.end.9

if.then:                                          ; preds = %for.body
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1
  %arrayidx1 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 4
  %rtint = bitcast %union.rtunion_def* %arrayidx1 to i32*
  %9 = load i32, i32* %rtint, align 4
  switch i32 %9, label %sw.default [
    i32 -96, label %sw.bb
    i32 -94, label %sw.bb.3
    i32 -93, label %sw.bb.4
    i32 -95, label %sw.bb.5
  ]

sw.bb:                                            ; preds = %if.then
  %10 = load %struct.loops*, %struct.loops** %loops.addr, align 8
  %array = getelementptr inbounds %struct.loops, %struct.loops* %10, i32 0, i32 2
  %11 = load %struct.loop*, %struct.loop** %array, align 8
  %12 = load i32, i32* %num_loops, align 4
  %idx.ext = sext i32 %12 to i64
  %add.ptr = getelementptr inbounds %struct.loop, %struct.loop* %11, i64 %idx.ext
  store %struct.loop* %add.ptr, %struct.loop** %next_loop, align 8
  %13 = load i32, i32* %num_loops, align 4
  %14 = load %struct.loop*, %struct.loop** %next_loop, align 8
  %num2 = getelementptr inbounds %struct.loop, %struct.loop* %14, i32 0, i32 0
  store i32 %13, i32* %num2, align 4
  %15 = load i32, i32* %num_loops, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %num_loops, align 4
  %16 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %17 = load %struct.loop*, %struct.loop** %next_loop, align 8
  %start = getelementptr inbounds %struct.loop, %struct.loop* %17, i32 0, i32 26
  store %struct.rtx_def* %16, %struct.rtx_def** %start, align 8
  %18 = load %struct.loop*, %struct.loop** %current_loop, align 8
  %19 = load %struct.loop*, %struct.loop** %next_loop, align 8
  %outer = getelementptr inbounds %struct.loop, %struct.loop* %19, i32 0, i32 17
  store %struct.loop* %18, %struct.loop** %outer, align 8
  %20 = load %struct.loop*, %struct.loop** %next_loop, align 8
  store %struct.loop* %20, %struct.loop** %current_loop, align 8
  br label %sw.epilog

sw.bb.3:                                          ; preds = %if.then
  %21 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %22 = load %struct.loop*, %struct.loop** %current_loop, align 8
  %cont = getelementptr inbounds %struct.loop, %struct.loop* %22, i32 0, i32 24
  store %struct.rtx_def* %21, %struct.rtx_def** %cont, align 8
  br label %sw.epilog

sw.bb.4:                                          ; preds = %if.then
  %23 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %24 = load %struct.loop*, %struct.loop** %current_loop, align 8
  %vtop = getelementptr inbounds %struct.loop, %struct.loop* %24, i32 0, i32 23
  store %struct.rtx_def* %23, %struct.rtx_def** %vtop, align 8
  br label %sw.epilog

sw.bb.5:                                          ; preds = %if.then
  %25 = load %struct.loop*, %struct.loop** %current_loop, align 8
  %tobool6 = icmp ne %struct.loop* %25, null
  br i1 %tobool6, label %if.end, label %if.then.7

if.then.7:                                        ; preds = %sw.bb.5
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 2679, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @__FUNCTION__.find_and_verify_loops, i32 0, i32 0)) #6
  unreachable

if.end:                                           ; preds = %sw.bb.5
  %26 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %27 = load %struct.loop*, %struct.loop** %current_loop, align 8
  %end = getelementptr inbounds %struct.loop, %struct.loop* %27, i32 0, i32 27
  store %struct.rtx_def* %26, %struct.rtx_def** %end, align 8
  %28 = load %struct.loop*, %struct.loop** %current_loop, align 8
  %outer8 = getelementptr inbounds %struct.loop, %struct.loop* %28, i32 0, i32 17
  %29 = load %struct.loop*, %struct.loop** %outer8, align 8
  store %struct.loop* %29, %struct.loop** %current_loop, align 8
  br label %sw.epilog

sw.default:                                       ; preds = %if.then
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %if.end, %sw.bb.4, %sw.bb.3, %sw.bb
  br label %if.end.9

if.end.9:                                         ; preds = %sw.epilog, %for.body
  %30 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %31 = bitcast %struct.rtx_def* %30 to i32*
  %bf.load10 = load i32, i32* %31, align 8
  %bf.clear11 = and i32 %bf.load10, 65535
  %cmp12 = icmp eq i32 %bf.clear11, 34
  br i1 %cmp12, label %land.lhs.true, label %if.end.28

land.lhs.true:                                    ; preds = %if.end.9
  %32 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %call13 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %32, i32 28, %struct.rtx_def* null)
  %tobool14 = icmp ne %struct.rtx_def* %call13, null
  br i1 %tobool14, label %if.then.15, label %if.end.28

if.then.15:                                       ; preds = %land.lhs.true
  %33 = load %struct.loop*, %struct.loop** %current_loop, align 8
  store %struct.loop* %33, %struct.loop** %loop, align 8
  br label %for.cond.16

for.cond.16:                                      ; preds = %for.inc, %if.then.15
  %34 = load %struct.loop*, %struct.loop** %loop, align 8
  %tobool17 = icmp ne %struct.loop* %34, null
  br i1 %tobool17, label %for.body.18, label %for.end

for.body.18:                                      ; preds = %for.cond.16
  %35 = load %struct.loop*, %struct.loop** %loop, align 8
  %invalid = getelementptr inbounds %struct.loop, %struct.loop* %35, i32 0, i32 21
  store i32 1, i32* %invalid, align 4
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %tobool19 = icmp ne %struct._IO_FILE* %36, null
  br i1 %tobool19, label %if.then.20, label %if.end.26

if.then.20:                                       ; preds = %for.body.18
  %37 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %38 = load %struct.loop*, %struct.loop** %loop, align 8
  %start21 = getelementptr inbounds %struct.loop, %struct.loop* %38, i32 0, i32 26
  %39 = load %struct.rtx_def*, %struct.rtx_def** %start21, align 8
  %fld22 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1
  %arrayidx23 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld22, i32 0, i64 0
  %rtint24 = bitcast %union.rtunion_def* %arrayidx23 to i32*
  %40 = load i32, i32* %rtint24, align 4
  %call25 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %37, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.72, i32 0, i32 0), i32 %40)
  br label %if.end.26

if.end.26:                                        ; preds = %if.then.20, %for.body.18
  br label %for.inc

for.inc:                                          ; preds = %if.end.26
  %41 = load %struct.loop*, %struct.loop** %loop, align 8
  %outer27 = getelementptr inbounds %struct.loop, %struct.loop* %41, i32 0, i32 17
  %42 = load %struct.loop*, %struct.loop** %outer27, align 8
  store %struct.loop* %42, %struct.loop** %loop, align 8
  br label %for.cond.16

for.end:                                          ; preds = %for.cond.16
  br label %if.end.28

if.end.28:                                        ; preds = %for.end, %land.lhs.true, %if.end.9
  %43 = load %struct.loop*, %struct.loop** %current_loop, align 8
  %44 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld29 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %44, i32 0, i32 1
  %arrayidx30 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld29, i32 0, i64 0
  %rtint31 = bitcast %union.rtunion_def* %arrayidx30 to i32*
  %45 = load i32, i32* %rtint31, align 4
  %idxprom = sext i32 %45 to i64
  %46 = load %struct.loop**, %struct.loop*** @uid_loop, align 8
  %arrayidx32 = getelementptr inbounds %struct.loop*, %struct.loop** %46, i64 %idxprom
  store %struct.loop* %43, %struct.loop** %arrayidx32, align 8
  br label %for.inc.33

for.inc.33:                                       ; preds = %if.end.28
  %47 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld34 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %47, i32 0, i32 1
  %arrayidx35 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld34, i32 0, i64 2
  %rtx = bitcast %union.rtunion_def* %arrayidx35 to %struct.rtx_def**
  %48 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %48, %struct.rtx_def** %insn, align 8
  br label %for.cond

for.end.36:                                       ; preds = %for.cond
  %49 = load %struct.function*, %struct.function** @cfun, align 8
  %expr = getelementptr inbounds %struct.function, %struct.function* %49, i32 0, i32 2
  %50 = load %struct.expr_status*, %struct.expr_status** %expr, align 8
  %x_forced_labels = getelementptr inbounds %struct.expr_status, %struct.expr_status* %50, i32 0, i32 5
  %51 = load %struct.rtx_def*, %struct.rtx_def** %x_forced_labels, align 8
  store %struct.rtx_def* %51, %struct.rtx_def** %label, align 8
  br label %for.cond.37

for.cond.37:                                      ; preds = %for.inc.43, %for.end.36
  %52 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  %tobool38 = icmp ne %struct.rtx_def* %52, null
  br i1 %tobool38, label %for.body.39, label %for.end.47

for.body.39:                                      ; preds = %for.cond.37
  %53 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  %fld40 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %53, i32 0, i32 1
  %arrayidx41 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld40, i32 0, i64 0
  %rtx42 = bitcast %union.rtunion_def* %arrayidx41 to %struct.rtx_def**
  %54 = load %struct.rtx_def*, %struct.rtx_def** %rtx42, align 8
  call void @invalidate_loops_containing_label(%struct.rtx_def* %54)
  br label %for.inc.43

for.inc.43:                                       ; preds = %for.body.39
  %55 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  %fld44 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %55, i32 0, i32 1
  %arrayidx45 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld44, i32 0, i64 1
  %rtx46 = bitcast %union.rtunion_def* %arrayidx45 to %struct.rtx_def**
  %56 = load %struct.rtx_def*, %struct.rtx_def** %rtx46, align 8
  store %struct.rtx_def* %56, %struct.rtx_def** %label, align 8
  br label %for.cond.37

for.end.47:                                       ; preds = %for.cond.37
  call void @for_each_eh_label(void (%struct.rtx_def*)* @invalidate_loops_containing_label)
  %57 = load %struct.rtx_def*, %struct.rtx_def** %f.addr, align 8
  store %struct.rtx_def* %57, %struct.rtx_def** %insn, align 8
  br label %for.cond.48

for.cond.48:                                      ; preds = %for.inc.544, %for.end.47
  %58 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %tobool49 = icmp ne %struct.rtx_def* %58, null
  br i1 %tobool49, label %for.body.50, label %for.end.548

for.body.50:                                      ; preds = %for.cond.48
  %59 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %60 = bitcast %struct.rtx_def* %59 to i32*
  %bf.load51 = load i32, i32* %60, align 8
  %bf.clear52 = and i32 %bf.load51, 65535
  %idxprom53 = sext i32 %bf.clear52 to i64
  %arrayidx54 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom53
  %61 = load i8, i8* %arrayidx54, align 1
  %conv = sext i8 %61 to i32
  %cmp55 = icmp eq i32 %conv, 105
  br i1 %cmp55, label %if.then.57, label %if.end.543

if.then.57:                                       ; preds = %for.body.50
  %62 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld58 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %62, i32 0, i32 1
  %arrayidx59 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld58, i32 0, i64 0
  %rtint60 = bitcast %union.rtunion_def* %arrayidx59 to i32*
  %63 = load i32, i32* %rtint60, align 4
  %idxprom61 = sext i32 %63 to i64
  %64 = load %struct.loop**, %struct.loop*** @uid_loop, align 8
  %arrayidx62 = getelementptr inbounds %struct.loop*, %struct.loop** %64, i64 %idxprom61
  %65 = load %struct.loop*, %struct.loop** %arrayidx62, align 8
  store %struct.loop* %65, %struct.loop** %this_loop, align 8
  %66 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %67 = bitcast %struct.rtx_def* %66 to i32*
  %bf.load63 = load i32, i32* %67, align 8
  %bf.clear64 = and i32 %bf.load63, 65535
  %cmp65 = icmp eq i32 %bf.clear64, 32
  br i1 %cmp65, label %if.then.71, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then.57
  %68 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %69 = bitcast %struct.rtx_def* %68 to i32*
  %bf.load67 = load i32, i32* %69, align 8
  %bf.clear68 = and i32 %bf.load67, 65535
  %cmp69 = icmp eq i32 %bf.clear68, 34
  br i1 %cmp69, label %if.then.71, label %if.end.79

if.then.71:                                       ; preds = %lor.lhs.false, %if.then.57
  %70 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %call72 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %70, i32 13, %struct.rtx_def* null)
  store %struct.rtx_def* %call72, %struct.rtx_def** %note, align 8
  %71 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8
  %tobool73 = icmp ne %struct.rtx_def* %71, null
  br i1 %tobool73, label %if.then.74, label %if.end.78

if.then.74:                                       ; preds = %if.then.71
  %72 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8
  %fld75 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %72, i32 0, i32 1
  %arrayidx76 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld75, i32 0, i64 0
  %rtx77 = bitcast %union.rtunion_def* %arrayidx76 to %struct.rtx_def**
  %73 = load %struct.rtx_def*, %struct.rtx_def** %rtx77, align 8
  call void @invalidate_loops_containing_label(%struct.rtx_def* %73)
  br label %if.end.78

if.end.78:                                        ; preds = %if.then.74, %if.then.71
  br label %if.end.79

if.end.79:                                        ; preds = %if.end.78, %lor.lhs.false
  %74 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %75 = bitcast %struct.rtx_def* %74 to i32*
  %bf.load80 = load i32, i32* %75, align 8
  %bf.clear81 = and i32 %bf.load80, 65535
  %cmp82 = icmp ne i32 %bf.clear81, 33
  br i1 %cmp82, label %if.then.84, label %if.end.85

if.then.84:                                       ; preds = %if.end.79
  br label %for.inc.544

if.end.85:                                        ; preds = %if.end.79
  %76 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld86 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %76, i32 0, i32 1
  %arrayidx87 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld86, i32 0, i64 3
  %rtx88 = bitcast %union.rtunion_def* %arrayidx87 to %struct.rtx_def**
  %77 = load %struct.rtx_def*, %struct.rtx_def** %rtx88, align 8
  %78 = load %struct.loop*, %struct.loop** %this_loop, align 8
  call void @mark_loop_jump(%struct.rtx_def* %77, %struct.loop* %78)
  %79 = load %struct.loop*, %struct.loop** %this_loop, align 8
  %tobool89 = icmp ne %struct.loop* %79, null
  br i1 %tobool89, label %land.lhs.true.90, label %if.end.542

land.lhs.true.90:                                 ; preds = %if.end.85
  %80 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld91 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %80, i32 0, i32 1
  %arrayidx92 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld91, i32 0, i64 3
  %rtx93 = bitcast %union.rtunion_def* %arrayidx92 to %struct.rtx_def**
  %81 = load %struct.rtx_def*, %struct.rtx_def** %rtx93, align 8
  %82 = bitcast %struct.rtx_def* %81 to i32*
  %bf.load94 = load i32, i32* %82, align 8
  %bf.clear95 = and i32 %bf.load94, 65535
  %cmp96 = icmp eq i32 %bf.clear95, 51
  br i1 %cmp96, label %land.lhs.true.115, label %lor.lhs.false.98

lor.lhs.false.98:                                 ; preds = %land.lhs.true.90
  %83 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %call99 = call i32 @any_uncondjump_p(%struct.rtx_def* %83)
  %tobool100 = icmp ne i32 %call99, 0
  br i1 %tobool100, label %land.lhs.true.101, label %if.end.542

land.lhs.true.101:                                ; preds = %lor.lhs.false.98
  %84 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %call102 = call i32 @onlyjump_p(%struct.rtx_def* %84)
  %tobool103 = icmp ne i32 %call102, 0
  br i1 %tobool103, label %land.lhs.true.104, label %if.end.542

land.lhs.true.104:                                ; preds = %land.lhs.true.101
  %85 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld105 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %85, i32 0, i32 1
  %arrayidx106 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld105, i32 0, i64 7
  %rtx107 = bitcast %union.rtunion_def* %arrayidx106 to %struct.rtx_def**
  %86 = load %struct.rtx_def*, %struct.rtx_def** %rtx107, align 8
  %fld108 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %86, i32 0, i32 1
  %arrayidx109 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld108, i32 0, i64 0
  %rtint110 = bitcast %union.rtunion_def* %arrayidx109 to i32*
  %87 = load i32, i32* %rtint110, align 4
  %idxprom111 = sext i32 %87 to i64
  %88 = load %struct.loop**, %struct.loop*** @uid_loop, align 8
  %arrayidx112 = getelementptr inbounds %struct.loop*, %struct.loop** %88, i64 %idxprom111
  %89 = load %struct.loop*, %struct.loop** %arrayidx112, align 8
  %90 = load %struct.loop*, %struct.loop** %this_loop, align 8
  %cmp113 = icmp ne %struct.loop* %89, %90
  br i1 %cmp113, label %land.lhs.true.115, label %if.end.542

land.lhs.true.115:                                ; preds = %land.lhs.true.104, %land.lhs.true.90
  %call116 = call i32 @get_max_uid()
  %91 = load i32, i32* @max_uid_for_loop, align 4
  %cmp117 = icmp slt i32 %call116, %91
  br i1 %cmp117, label %if.then.119, label %if.end.542

if.then.119:                                      ; preds = %land.lhs.true.115
  %92 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %call120 = call %struct.rtx_def* @next_real_insn(%struct.rtx_def* %92)
  store %struct.rtx_def* %call120, %struct.rtx_def** %our_next, align 8
  %93 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld121 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %93, i32 0, i32 1
  %arrayidx122 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld121, i32 0, i64 2
  %rtx123 = bitcast %union.rtunion_def* %arrayidx122 to %struct.rtx_def**
  %94 = load %struct.rtx_def*, %struct.rtx_def** %rtx123, align 8
  store %struct.rtx_def* %94, %struct.rtx_def** %last_insn_to_move, align 8
  store %struct.loop* null, %struct.loop** %outer_loop, align 8
  %95 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld124 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %95, i32 0, i32 1
  %arrayidx125 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld124, i32 0, i64 1
  %rtx126 = bitcast %union.rtunion_def* %arrayidx125 to %struct.rtx_def**
  %96 = load %struct.rtx_def*, %struct.rtx_def** %rtx126, align 8
  store %struct.rtx_def* %96, %struct.rtx_def** %p, align 8
  br label %for.cond.127

for.cond.127:                                     ; preds = %for.inc.148, %if.then.119
  %97 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %98 = bitcast %struct.rtx_def* %97 to i32*
  %bf.load128 = load i32, i32* %98, align 8
  %bf.clear129 = and i32 %bf.load128, 65535
  %cmp130 = icmp ne i32 %bf.clear129, 36
  br i1 %cmp130, label %land.lhs.true.132, label %land.end

land.lhs.true.132:                                ; preds = %for.cond.127
  %99 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %100 = bitcast %struct.rtx_def* %99 to i32*
  %bf.load133 = load i32, i32* %100, align 8
  %bf.clear134 = and i32 %bf.load133, 65535
  %cmp135 = icmp eq i32 %bf.clear134, 37
  br i1 %cmp135, label %land.lhs.true.137, label %land.rhs

land.lhs.true.137:                                ; preds = %land.lhs.true.132
  %101 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld138 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %101, i32 0, i32 1
  %arrayidx139 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld138, i32 0, i64 4
  %rtint140 = bitcast %union.rtunion_def* %arrayidx139 to i32*
  %102 = load i32, i32* %rtint140, align 4
  %cmp141 = icmp eq i32 %102, -96
  br i1 %cmp141, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %land.lhs.true.137, %land.lhs.true.132
  %103 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %104 = bitcast %struct.rtx_def* %103 to i32*
  %bf.load143 = load i32, i32* %104, align 8
  %bf.clear144 = and i32 %bf.load143, 65535
  %cmp145 = icmp ne i32 %bf.clear144, 33
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true.137, %for.cond.127
  %105 = phi i1 [ false, %land.lhs.true.137 ], [ false, %for.cond.127 ], [ %cmp145, %land.rhs ]
  br i1 %105, label %for.body.147, label %for.end.152

for.body.147:                                     ; preds = %land.end
  br label %for.inc.148

for.inc.148:                                      ; preds = %for.body.147
  %106 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld149 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %106, i32 0, i32 1
  %arrayidx150 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld149, i32 0, i64 1
  %rtx151 = bitcast %union.rtunion_def* %arrayidx150 to %struct.rtx_def**
  %107 = load %struct.rtx_def*, %struct.rtx_def** %rtx151, align 8
  store %struct.rtx_def* %107, %struct.rtx_def** %p, align 8
  br label %for.cond.127

for.end.152:                                      ; preds = %land.end
  %108 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld153 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %108, i32 0, i32 1
  %arrayidx154 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld153, i32 0, i64 7
  %rtx155 = bitcast %union.rtunion_def* %arrayidx154 to %struct.rtx_def**
  %109 = load %struct.rtx_def*, %struct.rtx_def** %rtx155, align 8
  %tobool156 = icmp ne %struct.rtx_def* %109, null
  br i1 %tobool156, label %if.then.157, label %if.end.179

if.then.157:                                      ; preds = %for.end.152
  %110 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld158 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %110, i32 0, i32 1
  %arrayidx159 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld158, i32 0, i64 7
  %rtx160 = bitcast %union.rtunion_def* %arrayidx159 to %struct.rtx_def**
  %111 = load %struct.rtx_def*, %struct.rtx_def** %rtx160, align 8
  %fld161 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %111, i32 0, i32 1
  %arrayidx162 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld161, i32 0, i64 0
  %rtint163 = bitcast %union.rtunion_def* %arrayidx162 to i32*
  %112 = load i32, i32* %rtint163, align 4
  %idxprom164 = sext i32 %112 to i64
  %113 = load %struct.loop**, %struct.loop*** @uid_loop, align 8
  %arrayidx165 = getelementptr inbounds %struct.loop*, %struct.loop** %113, i64 %idxprom164
  %114 = load %struct.loop*, %struct.loop** %arrayidx165, align 8
  store %struct.loop* %114, %struct.loop** %dest_loop, align 8
  %115 = load %struct.loop*, %struct.loop** %dest_loop, align 8
  %tobool166 = icmp ne %struct.loop* %115, null
  br i1 %tobool166, label %if.then.167, label %if.end.178

if.then.167:                                      ; preds = %if.then.157
  %116 = load %struct.loop*, %struct.loop** %dest_loop, align 8
  store %struct.loop* %116, %struct.loop** %outer_loop, align 8
  br label %for.cond.168

for.cond.168:                                     ; preds = %for.inc.175, %if.then.167
  %117 = load %struct.loop*, %struct.loop** %outer_loop, align 8
  %tobool169 = icmp ne %struct.loop* %117, null
  br i1 %tobool169, label %for.body.170, label %for.end.177

for.body.170:                                     ; preds = %for.cond.168
  %118 = load %struct.loop*, %struct.loop** %outer_loop, align 8
  %119 = load %struct.loop*, %struct.loop** %this_loop, align 8
  %cmp171 = icmp eq %struct.loop* %118, %119
  br i1 %cmp171, label %if.then.173, label %if.end.174

if.then.173:                                      ; preds = %for.body.170
  br label %for.end.177

if.end.174:                                       ; preds = %for.body.170
  br label %for.inc.175

for.inc.175:                                      ; preds = %if.end.174
  %120 = load %struct.loop*, %struct.loop** %outer_loop, align 8
  %outer176 = getelementptr inbounds %struct.loop, %struct.loop* %120, i32 0, i32 17
  %121 = load %struct.loop*, %struct.loop** %outer176, align 8
  store %struct.loop* %121, %struct.loop** %outer_loop, align 8
  br label %for.cond.168

for.end.177:                                      ; preds = %if.then.173, %for.cond.168
  br label %if.end.178

if.end.178:                                       ; preds = %for.end.177, %if.then.157
  br label %if.end.179

if.end.179:                                       ; preds = %if.end.178, %for.end.152
  %122 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %123 = bitcast %struct.rtx_def* %122 to i32*
  %bf.load180 = load i32, i32* %123, align 8
  %bf.clear181 = and i32 %bf.load180, 65535
  %cmp182 = icmp eq i32 %bf.clear181, 33
  br i1 %cmp182, label %land.lhs.true.184, label %if.end.201

land.lhs.true.184:                                ; preds = %if.end.179
  %124 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld185 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %124, i32 0, i32 1
  %arrayidx186 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld185, i32 0, i64 7
  %rtx187 = bitcast %union.rtunion_def* %arrayidx186 to %struct.rtx_def**
  %125 = load %struct.rtx_def*, %struct.rtx_def** %rtx187, align 8
  %tobool188 = icmp ne %struct.rtx_def* %125, null
  br i1 %tobool188, label %land.lhs.true.189, label %if.end.201

land.lhs.true.189:                                ; preds = %land.lhs.true.184
  %126 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld190 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %126, i32 0, i32 1
  %arrayidx191 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld190, i32 0, i64 7
  %rtx192 = bitcast %union.rtunion_def* %arrayidx191 to %struct.rtx_def**
  %127 = load %struct.rtx_def*, %struct.rtx_def** %rtx192, align 8
  %fld193 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %127, i32 0, i32 1
  %arrayidx194 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld193, i32 0, i64 0
  %rtint195 = bitcast %union.rtunion_def* %arrayidx194 to i32*
  %128 = load i32, i32* %rtint195, align 4
  %idxprom196 = sext i32 %128 to i64
  %129 = load %struct.loop**, %struct.loop*** @uid_loop, align 8
  %arrayidx197 = getelementptr inbounds %struct.loop*, %struct.loop** %129, i64 %idxprom196
  %130 = load %struct.loop*, %struct.loop** %arrayidx197, align 8
  %131 = load %struct.loop*, %struct.loop** %this_loop, align 8
  %cmp198 = icmp ne %struct.loop* %130, %131
  br i1 %cmp198, label %if.then.200, label %if.end.201

if.then.200:                                      ; preds = %land.lhs.true.189
  %132 = load %struct.loop*, %struct.loop** %this_loop, align 8
  store %struct.loop* %132, %struct.loop** %outer_loop, align 8
  br label %if.end.201

if.end.201:                                       ; preds = %if.then.200, %land.lhs.true.189, %land.lhs.true.184, %if.end.179
  %133 = load %struct.loop*, %struct.loop** %outer_loop, align 8
  %tobool202 = icmp ne %struct.loop* %133, null
  br i1 %tobool202, label %if.end.541, label %land.lhs.true.203

land.lhs.true.203:                                ; preds = %if.end.201
  %134 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %135 = bitcast %struct.rtx_def* %134 to i32*
  %bf.load204 = load i32, i32* %135, align 8
  %bf.clear205 = and i32 %bf.load204, 65535
  %cmp206 = icmp eq i32 %bf.clear205, 33
  br i1 %cmp206, label %land.lhs.true.208, label %if.end.541

land.lhs.true.208:                                ; preds = %land.lhs.true.203
  %136 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld209 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %136, i32 0, i32 1
  %arrayidx210 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld209, i32 0, i64 7
  %rtx211 = bitcast %union.rtunion_def* %arrayidx210 to %struct.rtx_def**
  %137 = load %struct.rtx_def*, %struct.rtx_def** %rtx211, align 8
  %cmp212 = icmp ne %struct.rtx_def* %137, null
  br i1 %cmp212, label %land.lhs.true.214, label %if.end.541

land.lhs.true.214:                                ; preds = %land.lhs.true.208
  %138 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld215 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %138, i32 0, i32 1
  %arrayidx216 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld215, i32 0, i64 7
  %rtx217 = bitcast %union.rtunion_def* %arrayidx216 to %struct.rtx_def**
  %139 = load %struct.rtx_def*, %struct.rtx_def** %rtx217, align 8
  %fld218 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %139, i32 0, i32 1
  %arrayidx219 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld218, i32 0, i64 0
  %rtint220 = bitcast %union.rtunion_def* %arrayidx219 to i32*
  %140 = load i32, i32* %rtint220, align 4
  %cmp221 = icmp ne i32 %140, 0
  br i1 %cmp221, label %land.lhs.true.223, label %if.end.541

land.lhs.true.223:                                ; preds = %land.lhs.true.214
  %141 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %call224 = call i32 @any_condjump_p(%struct.rtx_def* %141)
  %tobool225 = icmp ne i32 %call224, 0
  br i1 %tobool225, label %land.lhs.true.226, label %if.end.541

land.lhs.true.226:                                ; preds = %land.lhs.true.223
  %142 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %call227 = call i32 @onlyjump_p(%struct.rtx_def* %142)
  %tobool228 = icmp ne i32 %call227, 0
  br i1 %tobool228, label %land.lhs.true.229, label %if.end.541

land.lhs.true.229:                                ; preds = %land.lhs.true.226
  %143 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld230 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %143, i32 0, i32 1
  %arrayidx231 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld230, i32 0, i64 7
  %rtx232 = bitcast %union.rtunion_def* %arrayidx231 to %struct.rtx_def**
  %144 = load %struct.rtx_def*, %struct.rtx_def** %rtx232, align 8
  %call233 = call %struct.rtx_def* @next_real_insn(%struct.rtx_def* %144)
  %145 = load %struct.rtx_def*, %struct.rtx_def** %our_next, align 8
  %cmp234 = icmp eq %struct.rtx_def* %call233, %145
  br i1 %cmp234, label %land.lhs.true.236, label %if.end.541

land.lhs.true.236:                                ; preds = %land.lhs.true.229
  %146 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %147 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld237 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %147, i32 0, i32 1
  %arrayidx238 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld237, i32 0, i64 2
  %rtx239 = bitcast %union.rtunion_def* %arrayidx238 to %struct.rtx_def**
  %148 = load %struct.rtx_def*, %struct.rtx_def** %rtx239, align 8
  %call240 = call i32 @insns_safe_to_move_p(%struct.rtx_def* %146, %struct.rtx_def* %148, %struct.rtx_def** %last_insn_to_move)
  %tobool241 = icmp ne i32 %call240, 0
  br i1 %tobool241, label %if.then.242, label %if.end.541

if.then.242:                                      ; preds = %land.lhs.true.236
  %149 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld243 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %149, i32 0, i32 1
  %arrayidx244 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld243, i32 0, i64 7
  %rtx245 = bitcast %union.rtunion_def* %arrayidx244 to %struct.rtx_def**
  %150 = load %struct.rtx_def*, %struct.rtx_def** %rtx245, align 8
  %tobool246 = icmp ne %struct.rtx_def* %150, null
  br i1 %tobool246, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.242
  %151 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld247 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %151, i32 0, i32 1
  %arrayidx248 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld247, i32 0, i64 7
  %rtx249 = bitcast %union.rtunion_def* %arrayidx248 to %struct.rtx_def**
  %152 = load %struct.rtx_def*, %struct.rtx_def** %rtx249, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then.242
  %call250 = call %struct.rtx_def* @get_last_insn()
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %152, %cond.true ], [ %call250, %cond.false ]
  store %struct.rtx_def* %cond, %struct.rtx_def** %target, align 8
  %153 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8
  %fld251 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %153, i32 0, i32 1
  %arrayidx252 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld251, i32 0, i64 0
  %rtint253 = bitcast %union.rtunion_def* %arrayidx252 to i32*
  %154 = load i32, i32* %rtint253, align 4
  %idxprom254 = sext i32 %154 to i64
  %155 = load %struct.loop**, %struct.loop*** @uid_loop, align 8
  %arrayidx255 = getelementptr inbounds %struct.loop*, %struct.loop** %155, i64 %idxprom254
  %156 = load %struct.loop*, %struct.loop** %arrayidx255, align 8
  store %struct.loop* %156, %struct.loop** %target_loop, align 8
  %157 = load %struct.rtx_def*, %struct.rtx_def** %last_insn_to_move, align 8
  store %struct.rtx_def* %157, %struct.rtx_def** %tmp, align 8
  br label %for.cond.256

for.cond.256:                                     ; preds = %for.inc.271, %cond.end
  %158 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %tobool257 = icmp ne %struct.rtx_def* %158, null
  br i1 %tobool257, label %land.rhs.258, label %land.end.263

land.rhs.258:                                     ; preds = %for.cond.256
  %159 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %160 = bitcast %struct.rtx_def* %159 to i32*
  %bf.load259 = load i32, i32* %160, align 8
  %bf.clear260 = and i32 %bf.load259, 65535
  %cmp261 = icmp ne i32 %bf.clear260, 36
  br label %land.end.263

land.end.263:                                     ; preds = %land.rhs.258, %for.cond.256
  %161 = phi i1 [ false, %for.cond.256 ], [ %cmp261, %land.rhs.258 ]
  br i1 %161, label %for.body.264, label %for.end.275

for.body.264:                                     ; preds = %land.end.263
  %162 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %163 = bitcast %struct.rtx_def* %162 to i32*
  %bf.load265 = load i32, i32* %163, align 8
  %bf.clear266 = and i32 %bf.load265, 65535
  %cmp267 = icmp eq i32 %bf.clear266, 35
  br i1 %cmp267, label %if.then.269, label %if.end.270

if.then.269:                                      ; preds = %for.body.264
  %164 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  store %struct.rtx_def* %164, %struct.rtx_def** %last_insn_to_move, align 8
  br label %if.end.270

if.end.270:                                       ; preds = %if.then.269, %for.body.264
  br label %for.inc.271

for.inc.271:                                      ; preds = %if.end.270
  %165 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %fld272 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %165, i32 0, i32 1
  %arrayidx273 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld272, i32 0, i64 2
  %rtx274 = bitcast %union.rtunion_def* %arrayidx273 to %struct.rtx_def**
  %166 = load %struct.rtx_def*, %struct.rtx_def** %rtx274, align 8
  store %struct.rtx_def* %166, %struct.rtx_def** %tmp, align 8
  br label %for.cond.256

for.end.275:                                      ; preds = %land.end.263
  %167 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8
  store %struct.rtx_def* %167, %struct.rtx_def** %loc, align 8
  br label %for.cond.276

for.cond.276:                                     ; preds = %for.inc.327, %for.end.275
  %168 = load %struct.rtx_def*, %struct.rtx_def** %loc, align 8
  %tobool277 = icmp ne %struct.rtx_def* %168, null
  br i1 %tobool277, label %for.body.278, label %for.end.331

for.body.278:                                     ; preds = %for.cond.276
  %169 = load %struct.rtx_def*, %struct.rtx_def** %loc, align 8
  %170 = bitcast %struct.rtx_def* %169 to i32*
  %bf.load279 = load i32, i32* %170, align 8
  %bf.clear280 = and i32 %bf.load279, 65535
  %cmp281 = icmp eq i32 %bf.clear280, 35
  br i1 %cmp281, label %land.lhs.true.283, label %if.end.326

land.lhs.true.283:                                ; preds = %for.body.278
  %171 = load %struct.rtx_def*, %struct.rtx_def** %loc, align 8
  %call284 = call %struct.rtx_def* @next_nonnote_insn(%struct.rtx_def* %171)
  store %struct.rtx_def* %call284, %struct.rtx_def** %loc2, align 8
  %cmp285 = icmp eq %struct.rtx_def* %call284, null
  br i1 %cmp285, label %land.lhs.true.317, label %lor.lhs.false.287

lor.lhs.false.287:                                ; preds = %land.lhs.true.283
  %172 = load %struct.rtx_def*, %struct.rtx_def** %loc2, align 8
  %173 = bitcast %struct.rtx_def* %172 to i32*
  %bf.load288 = load i32, i32* %173, align 8
  %bf.clear289 = and i32 %bf.load288, 65535
  %cmp290 = icmp ne i32 %bf.clear289, 36
  br i1 %cmp290, label %land.lhs.true.317, label %lor.lhs.false.292

lor.lhs.false.292:                                ; preds = %lor.lhs.false.287
  %174 = load %struct.rtx_def*, %struct.rtx_def** %loc2, align 8
  %call293 = call %struct.rtx_def* @next_nonnote_insn(%struct.rtx_def* %174)
  store %struct.rtx_def* %call293, %struct.rtx_def** %loc2, align 8
  %cmp294 = icmp eq %struct.rtx_def* %call293, null
  br i1 %cmp294, label %land.lhs.true.317, label %lor.lhs.false.296

lor.lhs.false.296:                                ; preds = %lor.lhs.false.292
  %175 = load %struct.rtx_def*, %struct.rtx_def** %loc2, align 8
  %176 = bitcast %struct.rtx_def* %175 to i32*
  %bf.load297 = load i32, i32* %176, align 8
  %bf.clear298 = and i32 %bf.load297, 65535
  %cmp299 = icmp ne i32 %bf.clear298, 33
  br i1 %cmp299, label %land.lhs.true.317, label %lor.lhs.false.301

lor.lhs.false.301:                                ; preds = %lor.lhs.false.296
  %177 = load %struct.rtx_def*, %struct.rtx_def** %loc2, align 8
  %fld302 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %177, i32 0, i32 1
  %arrayidx303 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld302, i32 0, i64 3
  %rtx304 = bitcast %union.rtunion_def* %arrayidx303 to %struct.rtx_def**
  %178 = load %struct.rtx_def*, %struct.rtx_def** %rtx304, align 8
  %179 = bitcast %struct.rtx_def* %178 to i32*
  %bf.load305 = load i32, i32* %179, align 8
  %bf.clear306 = and i32 %bf.load305, 65535
  %cmp307 = icmp ne i32 %bf.clear306, 44
  br i1 %cmp307, label %land.lhs.true.309, label %if.end.326

land.lhs.true.309:                                ; preds = %lor.lhs.false.301
  %180 = load %struct.rtx_def*, %struct.rtx_def** %loc2, align 8
  %fld310 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %180, i32 0, i32 1
  %arrayidx311 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld310, i32 0, i64 3
  %rtx312 = bitcast %union.rtunion_def* %arrayidx311 to %struct.rtx_def**
  %181 = load %struct.rtx_def*, %struct.rtx_def** %rtx312, align 8
  %182 = bitcast %struct.rtx_def* %181 to i32*
  %bf.load313 = load i32, i32* %182, align 8
  %bf.clear314 = and i32 %bf.load313, 65535
  %cmp315 = icmp ne i32 %bf.clear314, 45
  br i1 %cmp315, label %land.lhs.true.317, label %if.end.326

land.lhs.true.317:                                ; preds = %land.lhs.true.309, %lor.lhs.false.296, %lor.lhs.false.292, %lor.lhs.false.287, %land.lhs.true.283
  %183 = load %struct.rtx_def*, %struct.rtx_def** %loc, align 8
  %fld318 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %183, i32 0, i32 1
  %arrayidx319 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld318, i32 0, i64 0
  %rtint320 = bitcast %union.rtunion_def* %arrayidx319 to i32*
  %184 = load i32, i32* %rtint320, align 4
  %idxprom321 = sext i32 %184 to i64
  %185 = load %struct.loop**, %struct.loop*** @uid_loop, align 8
  %arrayidx322 = getelementptr inbounds %struct.loop*, %struct.loop** %185, i64 %idxprom321
  %186 = load %struct.loop*, %struct.loop** %arrayidx322, align 8
  %187 = load %struct.loop*, %struct.loop** %target_loop, align 8
  %cmp323 = icmp eq %struct.loop* %186, %187
  br i1 %cmp323, label %if.then.325, label %if.end.326

if.then.325:                                      ; preds = %land.lhs.true.317
  br label %for.end.331

if.end.326:                                       ; preds = %land.lhs.true.317, %land.lhs.true.309, %lor.lhs.false.301, %for.body.278
  br label %for.inc.327

for.inc.327:                                      ; preds = %if.end.326
  %188 = load %struct.rtx_def*, %struct.rtx_def** %loc, align 8
  %fld328 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %188, i32 0, i32 1
  %arrayidx329 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld328, i32 0, i64 1
  %rtx330 = bitcast %union.rtunion_def* %arrayidx329 to %struct.rtx_def**
  %189 = load %struct.rtx_def*, %struct.rtx_def** %rtx330, align 8
  store %struct.rtx_def* %189, %struct.rtx_def** %loc, align 8
  br label %for.cond.276

for.end.331:                                      ; preds = %if.then.325, %for.cond.276
  %190 = load %struct.rtx_def*, %struct.rtx_def** %loc, align 8
  %cmp332 = icmp eq %struct.rtx_def* %190, null
  br i1 %cmp332, label %if.then.334, label %if.end.391

if.then.334:                                      ; preds = %for.end.331
  %191 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8
  store %struct.rtx_def* %191, %struct.rtx_def** %loc, align 8
  br label %for.cond.335

for.cond.335:                                     ; preds = %for.inc.386, %if.then.334
  %192 = load %struct.rtx_def*, %struct.rtx_def** %loc, align 8
  %tobool336 = icmp ne %struct.rtx_def* %192, null
  br i1 %tobool336, label %for.body.337, label %for.end.390

for.body.337:                                     ; preds = %for.cond.335
  %193 = load %struct.rtx_def*, %struct.rtx_def** %loc, align 8
  %194 = bitcast %struct.rtx_def* %193 to i32*
  %bf.load338 = load i32, i32* %194, align 8
  %bf.clear339 = and i32 %bf.load338, 65535
  %cmp340 = icmp eq i32 %bf.clear339, 35
  br i1 %cmp340, label %land.lhs.true.342, label %if.end.385

land.lhs.true.342:                                ; preds = %for.body.337
  %195 = load %struct.rtx_def*, %struct.rtx_def** %loc, align 8
  %call343 = call %struct.rtx_def* @next_nonnote_insn(%struct.rtx_def* %195)
  store %struct.rtx_def* %call343, %struct.rtx_def** %loc2, align 8
  %cmp344 = icmp eq %struct.rtx_def* %call343, null
  br i1 %cmp344, label %land.lhs.true.376, label %lor.lhs.false.346

lor.lhs.false.346:                                ; preds = %land.lhs.true.342
  %196 = load %struct.rtx_def*, %struct.rtx_def** %loc2, align 8
  %197 = bitcast %struct.rtx_def* %196 to i32*
  %bf.load347 = load i32, i32* %197, align 8
  %bf.clear348 = and i32 %bf.load347, 65535
  %cmp349 = icmp ne i32 %bf.clear348, 36
  br i1 %cmp349, label %land.lhs.true.376, label %lor.lhs.false.351

lor.lhs.false.351:                                ; preds = %lor.lhs.false.346
  %198 = load %struct.rtx_def*, %struct.rtx_def** %loc2, align 8
  %call352 = call %struct.rtx_def* @next_nonnote_insn(%struct.rtx_def* %198)
  store %struct.rtx_def* %call352, %struct.rtx_def** %loc2, align 8
  %cmp353 = icmp eq %struct.rtx_def* %call352, null
  br i1 %cmp353, label %land.lhs.true.376, label %lor.lhs.false.355

lor.lhs.false.355:                                ; preds = %lor.lhs.false.351
  %199 = load %struct.rtx_def*, %struct.rtx_def** %loc2, align 8
  %200 = bitcast %struct.rtx_def* %199 to i32*
  %bf.load356 = load i32, i32* %200, align 8
  %bf.clear357 = and i32 %bf.load356, 65535
  %cmp358 = icmp ne i32 %bf.clear357, 33
  br i1 %cmp358, label %land.lhs.true.376, label %lor.lhs.false.360

lor.lhs.false.360:                                ; preds = %lor.lhs.false.355
  %201 = load %struct.rtx_def*, %struct.rtx_def** %loc2, align 8
  %fld361 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %201, i32 0, i32 1
  %arrayidx362 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld361, i32 0, i64 3
  %rtx363 = bitcast %union.rtunion_def* %arrayidx362 to %struct.rtx_def**
  %202 = load %struct.rtx_def*, %struct.rtx_def** %rtx363, align 8
  %203 = bitcast %struct.rtx_def* %202 to i32*
  %bf.load364 = load i32, i32* %203, align 8
  %bf.clear365 = and i32 %bf.load364, 65535
  %cmp366 = icmp ne i32 %bf.clear365, 44
  br i1 %cmp366, label %land.lhs.true.368, label %if.end.385

land.lhs.true.368:                                ; preds = %lor.lhs.false.360
  %204 = load %struct.rtx_def*, %struct.rtx_def** %loc2, align 8
  %fld369 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %204, i32 0, i32 1
  %arrayidx370 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld369, i32 0, i64 3
  %rtx371 = bitcast %union.rtunion_def* %arrayidx370 to %struct.rtx_def**
  %205 = load %struct.rtx_def*, %struct.rtx_def** %rtx371, align 8
  %206 = bitcast %struct.rtx_def* %205 to i32*
  %bf.load372 = load i32, i32* %206, align 8
  %bf.clear373 = and i32 %bf.load372, 65535
  %cmp374 = icmp ne i32 %bf.clear373, 45
  br i1 %cmp374, label %land.lhs.true.376, label %if.end.385

land.lhs.true.376:                                ; preds = %land.lhs.true.368, %lor.lhs.false.355, %lor.lhs.false.351, %lor.lhs.false.346, %land.lhs.true.342
  %207 = load %struct.rtx_def*, %struct.rtx_def** %loc, align 8
  %fld377 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %207, i32 0, i32 1
  %arrayidx378 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld377, i32 0, i64 0
  %rtint379 = bitcast %union.rtunion_def* %arrayidx378 to i32*
  %208 = load i32, i32* %rtint379, align 4
  %idxprom380 = sext i32 %208 to i64
  %209 = load %struct.loop**, %struct.loop*** @uid_loop, align 8
  %arrayidx381 = getelementptr inbounds %struct.loop*, %struct.loop** %209, i64 %idxprom380
  %210 = load %struct.loop*, %struct.loop** %arrayidx381, align 8
  %211 = load %struct.loop*, %struct.loop** %target_loop, align 8
  %cmp382 = icmp eq %struct.loop* %210, %211
  br i1 %cmp382, label %if.then.384, label %if.end.385

if.then.384:                                      ; preds = %land.lhs.true.376
  br label %for.end.390

if.end.385:                                       ; preds = %land.lhs.true.376, %land.lhs.true.368, %lor.lhs.false.360, %for.body.337
  br label %for.inc.386

for.inc.386:                                      ; preds = %if.end.385
  %212 = load %struct.rtx_def*, %struct.rtx_def** %loc, align 8
  %fld387 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %212, i32 0, i32 1
  %arrayidx388 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld387, i32 0, i64 2
  %rtx389 = bitcast %union.rtunion_def* %arrayidx388 to %struct.rtx_def**
  %213 = load %struct.rtx_def*, %struct.rtx_def** %rtx389, align 8
  store %struct.rtx_def* %213, %struct.rtx_def** %loc, align 8
  br label %for.cond.335

for.end.390:                                      ; preds = %if.then.384, %for.cond.335
  br label %if.end.391

if.end.391:                                       ; preds = %for.end.390, %for.end.331
  %214 = load %struct.rtx_def*, %struct.rtx_def** %loc, align 8
  %tobool392 = icmp ne %struct.rtx_def* %214, null
  br i1 %tobool392, label %if.then.393, label %if.end.540

if.then.393:                                      ; preds = %if.end.391
  %215 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld395 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %215, i32 0, i32 1
  %arrayidx396 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld395, i32 0, i64 7
  %rtx397 = bitcast %union.rtunion_def* %arrayidx396 to %struct.rtx_def**
  %216 = load %struct.rtx_def*, %struct.rtx_def** %rtx397, align 8
  store %struct.rtx_def* %216, %struct.rtx_def** %cond_label, align 8
  %217 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %call399 = call %struct.rtx_def* @get_label_after(%struct.rtx_def* %217)
  store %struct.rtx_def* %call399, %struct.rtx_def** %new_label, align 8
  %218 = load %struct.rtx_def*, %struct.rtx_def** %cond_label, align 8
  %fld400 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %218, i32 0, i32 1
  %arrayidx401 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld400, i32 0, i64 3
  %rtint402 = bitcast %union.rtunion_def* %arrayidx401 to i32*
  %219 = load i32, i32* %rtint402, align 4
  %inc403 = add nsw i32 %219, 1
  store i32 %inc403, i32* %rtint402, align 4
  %220 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %221 = load %struct.rtx_def*, %struct.rtx_def** %new_label, align 8
  %call404 = call i32 @invert_jump(%struct.rtx_def* %220, %struct.rtx_def* %221, i32 1)
  %tobool405 = icmp ne i32 %call404, 0
  br i1 %tobool405, label %if.then.406, label %if.end.524

if.then.406:                                      ; preds = %if.then.393
  %222 = load %struct.rtx_def*, %struct.rtx_def** %loc, align 8
  %cmp409 = icmp eq %struct.rtx_def* %222, null
  br i1 %cmp409, label %if.then.411, label %if.end.432

if.then.411:                                      ; preds = %if.then.406
  %223 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld413 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %223, i32 0, i32 1
  %arrayidx414 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld413, i32 0, i64 7
  %rtx415 = bitcast %union.rtunion_def* %arrayidx414 to %struct.rtx_def**
  %224 = load %struct.rtx_def*, %struct.rtx_def** %rtx415, align 8
  %call416 = call %struct.rtx_def* @gen_jump(%struct.rtx_def* %224)
  store %struct.rtx_def* %call416, %struct.rtx_def** %temp, align 8
  %225 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %226 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8
  %call417 = call %struct.rtx_def* @emit_jump_insn_before(%struct.rtx_def* %225, %struct.rtx_def* %226)
  store %struct.rtx_def* %call417, %struct.rtx_def** %temp, align 8
  %227 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld418 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %227, i32 0, i32 1
  %arrayidx419 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld418, i32 0, i64 7
  %rtx420 = bitcast %union.rtunion_def* %arrayidx419 to %struct.rtx_def**
  %228 = load %struct.rtx_def*, %struct.rtx_def** %rtx420, align 8
  %229 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %fld421 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %229, i32 0, i32 1
  %arrayidx422 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld421, i32 0, i64 7
  %rtx423 = bitcast %union.rtunion_def* %arrayidx422 to %struct.rtx_def**
  store %struct.rtx_def* %228, %struct.rtx_def** %rtx423, align 8
  %230 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld424 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %230, i32 0, i32 1
  %arrayidx425 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld424, i32 0, i64 7
  %rtx426 = bitcast %union.rtunion_def* %arrayidx425 to %struct.rtx_def**
  %231 = load %struct.rtx_def*, %struct.rtx_def** %rtx426, align 8
  %fld427 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %231, i32 0, i32 1
  %arrayidx428 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld427, i32 0, i64 3
  %rtint429 = bitcast %union.rtunion_def* %arrayidx428 to i32*
  %232 = load i32, i32* %rtint429, align 4
  %inc430 = add nsw i32 %232, 1
  store i32 %inc430, i32* %rtint429, align 4
  %233 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8
  %call431 = call %struct.rtx_def* @emit_barrier_before(%struct.rtx_def* %233)
  store %struct.rtx_def* %call431, %struct.rtx_def** %loc, align 8
  br label %if.end.432

if.end.432:                                       ; preds = %if.then.411, %if.then.406
  %call433 = call zeroext i1 @squeeze_notes(%struct.rtx_def** %new_label, %struct.rtx_def** %last_insn_to_move)
  br i1 %call433, label %if.then.434, label %if.end.435

if.then.434:                                      ; preds = %if.end.432
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 2892, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @__FUNCTION__.find_and_verify_loops, i32 0, i32 0)) #6
  unreachable

if.end.435:                                       ; preds = %if.end.432
  %234 = load %struct.rtx_def*, %struct.rtx_def** %new_label, align 8
  %235 = load %struct.rtx_def*, %struct.rtx_def** %last_insn_to_move, align 8
  %236 = load %struct.rtx_def*, %struct.rtx_def** %loc, align 8
  call void @reorder_insns(%struct.rtx_def* %234, %struct.rtx_def* %235, %struct.rtx_def* %236)
  %237 = load %struct.rtx_def*, %struct.rtx_def** %new_label, align 8
  store %struct.rtx_def* %237, %struct.rtx_def** %q, align 8
  br label %for.cond.436

for.cond.436:                                     ; preds = %for.inc.448, %if.end.435
  %238 = load %struct.rtx_def*, %struct.rtx_def** %q, align 8
  %239 = load %struct.rtx_def*, %struct.rtx_def** %last_insn_to_move, align 8
  %fld437 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %239, i32 0, i32 1
  %arrayidx438 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld437, i32 0, i64 2
  %rtx439 = bitcast %union.rtunion_def* %arrayidx438 to %struct.rtx_def**
  %240 = load %struct.rtx_def*, %struct.rtx_def** %rtx439, align 8
  %cmp440 = icmp ne %struct.rtx_def* %238, %240
  br i1 %cmp440, label %for.body.442, label %for.end.452

for.body.442:                                     ; preds = %for.cond.436
  %241 = load %struct.loop*, %struct.loop** %target_loop, align 8
  %242 = load %struct.rtx_def*, %struct.rtx_def** %q, align 8
  %fld443 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %242, i32 0, i32 1
  %arrayidx444 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld443, i32 0, i64 0
  %rtint445 = bitcast %union.rtunion_def* %arrayidx444 to i32*
  %243 = load i32, i32* %rtint445, align 4
  %idxprom446 = sext i32 %243 to i64
  %244 = load %struct.loop**, %struct.loop*** @uid_loop, align 8
  %arrayidx447 = getelementptr inbounds %struct.loop*, %struct.loop** %244, i64 %idxprom446
  store %struct.loop* %241, %struct.loop** %arrayidx447, align 8
  br label %for.inc.448

for.inc.448:                                      ; preds = %for.body.442
  %245 = load %struct.rtx_def*, %struct.rtx_def** %q, align 8
  %fld449 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %245, i32 0, i32 1
  %arrayidx450 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld449, i32 0, i64 2
  %rtx451 = bitcast %union.rtunion_def* %arrayidx450 to %struct.rtx_def**
  %246 = load %struct.rtx_def*, %struct.rtx_def** %rtx451, align 8
  store %struct.rtx_def* %246, %struct.rtx_def** %q, align 8
  br label %for.cond.436

for.end.452:                                      ; preds = %for.cond.436
  %247 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld453 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %247, i32 0, i32 1
  %arrayidx454 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld453, i32 0, i64 7
  %rtx455 = bitcast %union.rtunion_def* %arrayidx454 to %struct.rtx_def**
  %248 = load %struct.rtx_def*, %struct.rtx_def** %rtx455, align 8
  %tobool456 = icmp ne %struct.rtx_def* %248, null
  br i1 %tobool456, label %if.then.457, label %if.end.504

if.then.457:                                      ; preds = %for.end.452
  store %struct.rtx_def* null, %struct.rtx_def** %q, align 8
  %249 = load %struct.loop*, %struct.loop** %this_loop, align 8
  %exit_labels = getelementptr inbounds %struct.loop, %struct.loop* %249, i32 0, i32 31
  %250 = load %struct.rtx_def*, %struct.rtx_def** %exit_labels, align 8
  store %struct.rtx_def* %250, %struct.rtx_def** %r, align 8
  br label %for.cond.458

for.cond.458:                                     ; preds = %for.inc.486, %if.then.457
  %251 = load %struct.rtx_def*, %struct.rtx_def** %r, align 8
  %tobool459 = icmp ne %struct.rtx_def* %251, null
  br i1 %tobool459, label %for.body.460, label %for.end.490

for.body.460:                                     ; preds = %for.cond.458
  %252 = load %struct.rtx_def*, %struct.rtx_def** %r, align 8
  %fld461 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %252, i32 0, i32 1
  %arrayidx462 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld461, i32 0, i64 0
  %rtx463 = bitcast %union.rtunion_def* %arrayidx462 to %struct.rtx_def**
  %253 = load %struct.rtx_def*, %struct.rtx_def** %rtx463, align 8
  %254 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld464 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %254, i32 0, i32 1
  %arrayidx465 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld464, i32 0, i64 7
  %rtx466 = bitcast %union.rtunion_def* %arrayidx465 to %struct.rtx_def**
  %255 = load %struct.rtx_def*, %struct.rtx_def** %rtx466, align 8
  %cmp467 = icmp eq %struct.rtx_def* %253, %255
  br i1 %cmp467, label %if.then.469, label %if.end.485

if.then.469:                                      ; preds = %for.body.460
  %256 = load %struct.rtx_def*, %struct.rtx_def** %r, align 8
  %257 = bitcast %struct.rtx_def* %256 to i32*
  %bf.load470 = load i32, i32* %257, align 8
  %bf.clear471 = and i32 %bf.load470, -268435457
  store i32 %bf.clear471, i32* %257, align 8
  %258 = load %struct.rtx_def*, %struct.rtx_def** %q, align 8
  %tobool472 = icmp ne %struct.rtx_def* %258, null
  br i1 %tobool472, label %if.then.473, label %if.else

if.then.473:                                      ; preds = %if.then.469
  %259 = load %struct.rtx_def*, %struct.rtx_def** %r, align 8
  %fld474 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %259, i32 0, i32 1
  %arrayidx475 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld474, i32 0, i64 1
  %rtx476 = bitcast %union.rtunion_def* %arrayidx475 to %struct.rtx_def**
  %260 = load %struct.rtx_def*, %struct.rtx_def** %rtx476, align 8
  %261 = load %struct.rtx_def*, %struct.rtx_def** %q, align 8
  %fld477 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %261, i32 0, i32 1
  %arrayidx478 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld477, i32 0, i64 1
  %rtx479 = bitcast %union.rtunion_def* %arrayidx478 to %struct.rtx_def**
  store %struct.rtx_def* %260, %struct.rtx_def** %rtx479, align 8
  br label %if.end.484

if.else:                                          ; preds = %if.then.469
  %262 = load %struct.rtx_def*, %struct.rtx_def** %r, align 8
  %fld480 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %262, i32 0, i32 1
  %arrayidx481 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld480, i32 0, i64 1
  %rtx482 = bitcast %union.rtunion_def* %arrayidx481 to %struct.rtx_def**
  %263 = load %struct.rtx_def*, %struct.rtx_def** %rtx482, align 8
  %264 = load %struct.loop*, %struct.loop** %this_loop, align 8
  %exit_labels483 = getelementptr inbounds %struct.loop, %struct.loop* %264, i32 0, i32 31
  store %struct.rtx_def* %263, %struct.rtx_def** %exit_labels483, align 8
  br label %if.end.484

if.end.484:                                       ; preds = %if.else, %if.then.473
  br label %for.end.490

if.end.485:                                       ; preds = %for.body.460
  br label %for.inc.486

for.inc.486:                                      ; preds = %if.end.485
  %265 = load %struct.rtx_def*, %struct.rtx_def** %r, align 8
  store %struct.rtx_def* %265, %struct.rtx_def** %q, align 8
  %266 = load %struct.rtx_def*, %struct.rtx_def** %r, align 8
  %fld487 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %266, i32 0, i32 1
  %arrayidx488 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld487, i32 0, i64 1
  %rtx489 = bitcast %union.rtunion_def* %arrayidx488 to %struct.rtx_def**
  %267 = load %struct.rtx_def*, %struct.rtx_def** %rtx489, align 8
  store %struct.rtx_def* %267, %struct.rtx_def** %r, align 8
  br label %for.cond.458

for.end.490:                                      ; preds = %if.end.484, %for.cond.458
  %268 = load %struct.loop*, %struct.loop** %this_loop, align 8
  store %struct.loop* %268, %struct.loop** %loop, align 8
  br label %for.cond.491

for.cond.491:                                     ; preds = %for.inc.498, %for.end.490
  %269 = load %struct.loop*, %struct.loop** %loop, align 8
  %tobool492 = icmp ne %struct.loop* %269, null
  br i1 %tobool492, label %land.rhs.493, label %land.end.496

land.rhs.493:                                     ; preds = %for.cond.491
  %270 = load %struct.loop*, %struct.loop** %loop, align 8
  %271 = load %struct.loop*, %struct.loop** %target_loop, align 8
  %cmp494 = icmp ne %struct.loop* %270, %271
  br label %land.end.496

land.end.496:                                     ; preds = %land.rhs.493, %for.cond.491
  %272 = phi i1 [ false, %for.cond.491 ], [ %cmp494, %land.rhs.493 ]
  br i1 %272, label %for.body.497, label %for.end.500

for.body.497:                                     ; preds = %land.end.496
  %273 = load %struct.loop*, %struct.loop** %loop, align 8
  %exit_count = getelementptr inbounds %struct.loop, %struct.loop* %273, i32 0, i32 32
  %274 = load i32, i32* %exit_count, align 4
  %dec = add nsw i32 %274, -1
  store i32 %dec, i32* %exit_count, align 4
  br label %for.inc.498

for.inc.498:                                      ; preds = %for.body.497
  %275 = load %struct.loop*, %struct.loop** %loop, align 8
  %outer499 = getelementptr inbounds %struct.loop, %struct.loop* %275, i32 0, i32 17
  %276 = load %struct.loop*, %struct.loop** %outer499, align 8
  store %struct.loop* %276, %struct.loop** %loop, align 8
  br label %for.cond.491

for.end.500:                                      ; preds = %land.end.496
  %277 = load %struct.rtx_def*, %struct.rtx_def** %r, align 8
  %tobool501 = icmp ne %struct.rtx_def* %277, null
  br i1 %tobool501, label %if.end.503, label %if.then.502

if.then.502:                                      ; preds = %for.end.500
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 2928, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @__FUNCTION__.find_and_verify_loops, i32 0, i32 0)) #6
  unreachable

if.end.503:                                       ; preds = %for.end.500
  br label %if.end.504

if.end.504:                                       ; preds = %if.end.503, %for.end.452
  %278 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld505 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %278, i32 0, i32 1
  %arrayidx506 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld505, i32 0, i64 3
  %rtx507 = bitcast %union.rtunion_def* %arrayidx506 to %struct.rtx_def**
  %279 = load %struct.rtx_def*, %struct.rtx_def** %rtx507, align 8
  %280 = load %struct.loop*, %struct.loop** %this_loop, align 8
  call void @mark_loop_jump(%struct.rtx_def* %279, %struct.loop* %280)
  %281 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld508 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %281, i32 0, i32 1
  %arrayidx509 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld508, i32 0, i64 7
  %rtx510 = bitcast %union.rtunion_def* %arrayidx509 to %struct.rtx_def**
  %282 = load %struct.rtx_def*, %struct.rtx_def** %rtx510, align 8
  %cmp511 = icmp ne %struct.rtx_def* %282, null
  br i1 %cmp511, label %land.lhs.true.513, label %if.end.523

land.lhs.true.513:                                ; preds = %if.end.504
  %283 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld514 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %283, i32 0, i32 1
  %arrayidx515 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld514, i32 0, i64 7
  %rtx516 = bitcast %union.rtunion_def* %arrayidx515 to %struct.rtx_def**
  %284 = load %struct.rtx_def*, %struct.rtx_def** %rtx516, align 8
  %call517 = call %struct.rtx_def* @next_real_insn(%struct.rtx_def* %284)
  %285 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %call518 = call %struct.rtx_def* @next_real_insn(%struct.rtx_def* %285)
  %cmp519 = icmp eq %struct.rtx_def* %call517, %call518
  br i1 %cmp519, label %if.then.521, label %if.end.523

if.then.521:                                      ; preds = %land.lhs.true.513
  %286 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %call522 = call %struct.rtx_def* @delete_related_insns(%struct.rtx_def* %286)
  br label %if.end.523

if.end.523:                                       ; preds = %if.then.521, %land.lhs.true.513, %if.end.504
  br label %if.end.524

if.end.524:                                       ; preds = %if.end.523, %if.then.393
  %287 = load %struct.rtx_def*, %struct.rtx_def** %cond_label, align 8
  %fld525 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %287, i32 0, i32 1
  %arrayidx526 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld525, i32 0, i64 2
  %rtx527 = bitcast %union.rtunion_def* %arrayidx526 to %struct.rtx_def**
  %288 = load %struct.rtx_def*, %struct.rtx_def** %rtx527, align 8
  store %struct.rtx_def* %288, %struct.rtx_def** %insn, align 8
  %289 = load %struct.rtx_def*, %struct.rtx_def** %cond_label, align 8
  %fld528 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %289, i32 0, i32 1
  %arrayidx529 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld528, i32 0, i64 3
  %rtint530 = bitcast %union.rtunion_def* %arrayidx529 to i32*
  %290 = load i32, i32* %rtint530, align 4
  %dec531 = add nsw i32 %290, -1
  store i32 %dec531, i32* %rtint530, align 4
  %cmp532 = icmp eq i32 %dec531, 0
  br i1 %cmp532, label %if.then.534, label %if.end.536

if.then.534:                                      ; preds = %if.end.524
  %291 = load %struct.rtx_def*, %struct.rtx_def** %cond_label, align 8
  %call535 = call %struct.rtx_def* @delete_related_insns(%struct.rtx_def* %291)
  br label %if.end.536

if.end.536:                                       ; preds = %if.then.534, %if.end.524
  %292 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld537 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %292, i32 0, i32 1
  %arrayidx538 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld537, i32 0, i64 1
  %rtx539 = bitcast %union.rtunion_def* %arrayidx538 to %struct.rtx_def**
  %293 = load %struct.rtx_def*, %struct.rtx_def** %rtx539, align 8
  store %struct.rtx_def* %293, %struct.rtx_def** %insn, align 8
  br label %if.end.540

if.end.540:                                       ; preds = %if.end.536, %if.end.391
  br label %if.end.541

if.end.541:                                       ; preds = %if.end.540, %land.lhs.true.236, %land.lhs.true.229, %land.lhs.true.226, %land.lhs.true.223, %land.lhs.true.214, %land.lhs.true.208, %land.lhs.true.203, %if.end.201
  br label %if.end.542

if.end.542:                                       ; preds = %if.end.541, %land.lhs.true.115, %land.lhs.true.104, %land.lhs.true.101, %lor.lhs.false.98, %if.end.85
  br label %if.end.543

if.end.543:                                       ; preds = %if.end.542, %for.body.50
  br label %for.inc.544

for.inc.544:                                      ; preds = %if.end.543, %if.then.84
  %294 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld545 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %294, i32 0, i32 1
  %arrayidx546 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld545, i32 0, i64 2
  %rtx547 = bitcast %union.rtunion_def* %arrayidx546 to %struct.rtx_def**
  %295 = load %struct.rtx_def*, %struct.rtx_def** %rtx547, align 8
  store %struct.rtx_def* %295, %struct.rtx_def** %insn, align 8
  br label %for.cond.48

for.end.548:                                      ; preds = %for.cond.48
  ret void
}

declare void @reg_scan(%struct.rtx_def*, i32, i32) #1

declare void @init_alias_analysis() #1

; Function Attrs: noreturn
declare void @fancy_abort(i8*, i32, i8*) #2

; Function Attrs: nounwind uwtable
define internal i32 @compute_luids(%struct.rtx_def* %start, %struct.rtx_def* %end, i32 %prev_luid) #0 {
entry:
  %start.addr = alloca %struct.rtx_def*, align 8
  %end.addr = alloca %struct.rtx_def*, align 8
  %prev_luid.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %insn = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %start, %struct.rtx_def** %start.addr, align 8
  store %struct.rtx_def* %end, %struct.rtx_def** %end.addr, align 8
  store i32 %prev_luid, i32* %prev_luid.addr, align 4
  %0 = load %struct.rtx_def*, %struct.rtx_def** %start.addr, align 8
  store %struct.rtx_def* %0, %struct.rtx_def** %insn, align 8
  %1 = load i32, i32* %prev_luid.addr, align 4
  store i32 %1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %end.addr, align 8
  %cmp = icmp ne %struct.rtx_def* %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtint = bitcast %union.rtunion_def* %arrayidx to i32*
  %5 = load i32, i32* %rtint, align 4
  %6 = load i32, i32* @max_uid_for_loop, align 4
  %cmp1 = icmp sge i32 %5, %6
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.inc

if.end:                                           ; preds = %for.body
  %7 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %8 = bitcast %struct.rtx_def* %7 to i32*
  %bf.load = load i32, i32* %8, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp2 = icmp ne i32 %bf.clear, 37
  br i1 %cmp2, label %if.then.7, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %9 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld3 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1
  %arrayidx4 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3, i32 0, i64 4
  %rtint5 = bitcast %union.rtunion_def* %arrayidx4 to i32*
  %10 = load i32, i32* %rtint5, align 4
  %cmp6 = icmp sle i32 %10, 0
  br i1 %cmp6, label %if.then.7, label %if.else

if.then.7:                                        ; preds = %lor.lhs.false, %if.end
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld8 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1
  %arrayidx9 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld8, i32 0, i64 0
  %rtint10 = bitcast %union.rtunion_def* %arrayidx9 to i32*
  %13 = load i32, i32* %rtint10, align 4
  %idxprom = sext i32 %13 to i64
  %14 = load i32*, i32** @uid_luid, align 8
  %arrayidx11 = getelementptr inbounds i32, i32* %14, i64 %idxprom
  store i32 %inc, i32* %arrayidx11, align 4
  br label %if.end.17

if.else:                                          ; preds = %lor.lhs.false
  %15 = load i32, i32* %i, align 4
  %16 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld12 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1
  %arrayidx13 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld12, i32 0, i64 0
  %rtint14 = bitcast %union.rtunion_def* %arrayidx13 to i32*
  %17 = load i32, i32* %rtint14, align 4
  %idxprom15 = sext i32 %17 to i64
  %18 = load i32*, i32** @uid_luid, align 8
  %arrayidx16 = getelementptr inbounds i32, i32* %18, i64 %idxprom15
  store i32 %15, i32* %arrayidx16, align 4
  br label %if.end.17

if.end.17:                                        ; preds = %if.else, %if.then.7
  br label %for.inc

for.inc:                                          ; preds = %if.end.17, %if.then
  %19 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld18 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1
  %arrayidx19 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld18, i32 0, i64 2
  %rtx = bitcast %union.rtunion_def* %arrayidx19 to %struct.rtx_def**
  %20 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %20, %struct.rtx_def** %insn, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %21 = load i32, i32* %i, align 4
  %add = add nsw i32 %21, 1
  ret i32 %add
}

; Function Attrs: nounwind uwtable
define internal i32 @indirect_jump_in_function_p(%struct.rtx_def* %start) #0 {
entry:
  %retval = alloca i32, align 4
  %start.addr = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %start, %struct.rtx_def** %start.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %start.addr, align 8
  store %struct.rtx_def* %0, %struct.rtx_def** %insn, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %tobool = icmp ne %struct.rtx_def* %1, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %call = call i32 @computed_jump_p(%struct.rtx_def* %2)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 2
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %4 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %insn, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then
  %5 = load i32, i32* %retval
  ret i32 %5
}

; Function Attrs: nounwind uwtable
define internal void @scan_loop(%struct.loop* %loop, i32 %flags) #0 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %flags.addr = alloca i32, align 4
  %loop_info = alloca %struct.loop_info*, align 8
  %regs = alloca %struct.loop_regs*, align 8
  %i = alloca i32, align 4
  %loop_start = alloca %struct.rtx_def*, align 8
  %loop_end = alloca %struct.rtx_def*, align 8
  %p = alloca %struct.rtx_def*, align 8
  %maybe_never = alloca i32, align 4
  %call_passed = alloca i32, align 4
  %loop_entry_jump = alloca %struct.rtx_def*, align 8
  %insn_count = alloca i32, align 4
  %tem = alloca i32, align 4
  %temp = alloca %struct.rtx_def*, align 8
  %update_start = alloca %struct.rtx_def*, align 8
  %update_end = alloca %struct.rtx_def*, align 8
  %set = alloca %struct.rtx_def*, align 8
  %set1 = alloca %struct.rtx_def*, align 8
  %movables = alloca %struct.loop_movables*, align 8
  %threshold = alloca i32, align 4
  %loop_depth = alloca i32, align 4
  %tem1 = alloca i32, align 4
  %tem2 = alloca i32, align 4
  %move_insn = alloca i32, align 4
  %src = alloca %struct.rtx_def*, align 8
  %dependencies = alloca %struct.rtx_def*, align 8
  %x = alloca %struct.rtx_def*, align 8
  %m = alloca %struct.movable*, align 8
  %regno = alloca i32, align 4
  %regno1179 = alloca i32, align 4
  %m1193 = alloca %struct.movable*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %aux = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 22
  %1 = load i8*, i8** %aux, align 8
  %2 = bitcast i8* %1 to %struct.loop_info*
  store %struct.loop_info* %2, %struct.loop_info** %loop_info, align 8
  %3 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %aux1 = getelementptr inbounds %struct.loop, %struct.loop* %3, i32 0, i32 22
  %4 = load i8*, i8** %aux1, align 8
  %5 = bitcast i8* %4 to %struct.loop_info*
  %regs2 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %5, i32 0, i32 28
  store %struct.loop_regs* %regs2, %struct.loop_regs** %regs, align 8
  %6 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %start = getelementptr inbounds %struct.loop, %struct.loop* %6, i32 0, i32 26
  %7 = load %struct.rtx_def*, %struct.rtx_def** %start, align 8
  store %struct.rtx_def* %7, %struct.rtx_def** %loop_start, align 8
  %8 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %end = getelementptr inbounds %struct.loop, %struct.loop* %8, i32 0, i32 27
  %9 = load %struct.rtx_def*, %struct.rtx_def** %end, align 8
  store %struct.rtx_def* %9, %struct.rtx_def** %loop_end, align 8
  store i32 0, i32* %maybe_never, align 4
  store i32 0, i32* %call_passed, align 4
  store %struct.rtx_def* null, %struct.rtx_def** %loop_entry_jump, align 8
  %10 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %aux3 = getelementptr inbounds %struct.loop, %struct.loop* %10, i32 0, i32 22
  %11 = load i8*, i8** %aux3, align 8
  %12 = bitcast i8* %11 to %struct.loop_info*
  %movables4 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %12, i32 0, i32 27
  store %struct.loop_movables* %movables4, %struct.loop_movables** %movables, align 8
  store i32 0, i32* %loop_depth, align 4
  %13 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %top = getelementptr inbounds %struct.loop, %struct.loop* %13, i32 0, i32 28
  store %struct.rtx_def* null, %struct.rtx_def** %top, align 8
  %14 = load %struct.loop_movables*, %struct.loop_movables** %movables, align 8
  %head = getelementptr inbounds %struct.loop_movables, %struct.loop_movables* %14, i32 0, i32 0
  store %struct.movable* null, %struct.movable** %head, align 8
  %15 = load %struct.loop_movables*, %struct.loop_movables** %movables, align 8
  %last = getelementptr inbounds %struct.loop_movables, %struct.loop_movables* %15, i32 0, i32 1
  store %struct.movable* null, %struct.movable** %last, align 8
  %16 = load %struct.rtx_def*, %struct.rtx_def** %loop_start, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 2
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %17 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %17, %struct.rtx_def** %p, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %18 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %19 = load %struct.rtx_def*, %struct.rtx_def** %loop_end, align 8
  %cmp = icmp ne %struct.rtx_def* %18, %19
  br i1 %cmp, label %land.lhs.true, label %land.end.26

land.lhs.true:                                    ; preds = %for.cond
  %20 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %21 = bitcast %struct.rtx_def* %20 to i32*
  %bf.load = load i32, i32* %21, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp5 = icmp ne i32 %bf.clear, 36
  br i1 %cmp5, label %land.lhs.true.6, label %land.end.26

land.lhs.true.6:                                  ; preds = %land.lhs.true
  %22 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %23 = bitcast %struct.rtx_def* %22 to i32*
  %bf.load7 = load i32, i32* %23, align 8
  %bf.clear8 = and i32 %bf.load7, 65535
  %idxprom = sext i32 %bf.clear8 to i64
  %arrayidx9 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom
  %24 = load i8, i8* %arrayidx9, align 1
  %conv = sext i8 %24 to i32
  %cmp10 = icmp eq i32 %conv, 105
  br i1 %cmp10, label %land.end.26, label %land.rhs

land.rhs:                                         ; preds = %land.lhs.true.6
  %25 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %26 = bitcast %struct.rtx_def* %25 to i32*
  %bf.load12 = load i32, i32* %26, align 8
  %bf.clear13 = and i32 %bf.load12, 65535
  %cmp14 = icmp ne i32 %bf.clear13, 37
  br i1 %cmp14, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs
  %27 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld16 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1
  %arrayidx17 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld16, i32 0, i64 4
  %rtint = bitcast %union.rtunion_def* %arrayidx17 to i32*
  %28 = load i32, i32* %rtint, align 4
  %cmp18 = icmp ne i32 %28, -96
  br i1 %cmp18, label %land.rhs.20, label %land.end

land.rhs.20:                                      ; preds = %lor.rhs
  %29 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld21 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %29, i32 0, i32 1
  %arrayidx22 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld21, i32 0, i64 4
  %rtint23 = bitcast %union.rtunion_def* %arrayidx22 to i32*
  %30 = load i32, i32* %rtint23, align 4
  %cmp24 = icmp ne i32 %30, -95
  br label %land.end

land.end:                                         ; preds = %land.rhs.20, %lor.rhs
  %31 = phi i1 [ false, %lor.rhs ], [ %cmp24, %land.rhs.20 ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %land.rhs
  %32 = phi i1 [ true, %land.rhs ], [ %31, %land.end ]
  br label %land.end.26

land.end.26:                                      ; preds = %lor.end, %land.lhs.true.6, %land.lhs.true, %for.cond
  %33 = phi i1 [ false, %land.lhs.true.6 ], [ false, %land.lhs.true ], [ false, %for.cond ], [ %32, %lor.end ]
  br i1 %33, label %for.body, label %for.end

for.body:                                         ; preds = %land.end.26
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %34 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld27 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %34, i32 0, i32 1
  %arrayidx28 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld27, i32 0, i64 2
  %rtx29 = bitcast %union.rtunion_def* %arrayidx28 to %struct.rtx_def**
  %35 = load %struct.rtx_def*, %struct.rtx_def** %rtx29, align 8
  store %struct.rtx_def* %35, %struct.rtx_def** %p, align 8
  br label %for.cond

for.end:                                          ; preds = %land.end.26
  %36 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %37 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %scan_start = getelementptr inbounds %struct.loop, %struct.loop* %37, i32 0, i32 29
  store %struct.rtx_def* %36, %struct.rtx_def** %scan_start, align 8
  %38 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %end30 = getelementptr inbounds %struct.loop, %struct.loop* %38, i32 0, i32 27
  %39 = load %struct.rtx_def*, %struct.rtx_def** %end30, align 8
  %fld31 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1
  %arrayidx32 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld31, i32 0, i64 2
  %rtx33 = bitcast %union.rtunion_def* %arrayidx32 to %struct.rtx_def**
  %40 = load %struct.rtx_def*, %struct.rtx_def** %rtx33, align 8
  %cmp34 = icmp ne %struct.rtx_def* %40, null
  br i1 %cmp34, label %if.then, label %if.else

if.then:                                          ; preds = %for.end
  %41 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %end36 = getelementptr inbounds %struct.loop, %struct.loop* %41, i32 0, i32 27
  %42 = load %struct.rtx_def*, %struct.rtx_def** %end36, align 8
  %fld37 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %42, i32 0, i32 1
  %arrayidx38 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld37, i32 0, i64 2
  %rtx39 = bitcast %union.rtunion_def* %arrayidx38 to %struct.rtx_def**
  %43 = load %struct.rtx_def*, %struct.rtx_def** %rtx39, align 8
  %44 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %sink = getelementptr inbounds %struct.loop, %struct.loop* %44, i32 0, i32 30
  store %struct.rtx_def* %43, %struct.rtx_def** %sink, align 8
  br label %if.end

if.else:                                          ; preds = %for.end
  %45 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %end40 = getelementptr inbounds %struct.loop, %struct.loop* %45, i32 0, i32 27
  %46 = load %struct.rtx_def*, %struct.rtx_def** %end40, align 8
  %call = call %struct.rtx_def* @emit_note_after(i32 -99, %struct.rtx_def* %46)
  %47 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %sink41 = getelementptr inbounds %struct.loop, %struct.loop* %47, i32 0, i32 30
  store %struct.rtx_def* %call, %struct.rtx_def** %sink41, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %48 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  call void @prescan_loop(%struct.loop* %48)
  %49 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %has_call = getelementptr inbounds %struct.loop_info, %struct.loop_info* %49, i32 0, i32 0
  %50 = load i32, i32* %has_call, align 4
  %tobool = icmp ne i32 %50, 0
  %cond = select i1 %tobool, i32 1, i32 2
  %51 = load i32, i32* @n_non_fixed_regs, align 4
  %add = add nsw i32 1, %51
  %mul = mul nsw i32 %cond, %add
  store i32 %mul, i32* %threshold, align 4
  %52 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %53 = bitcast %struct.rtx_def* %52 to i32*
  %bf.load42 = load i32, i32* %53, align 8
  %bf.clear43 = and i32 %bf.load42, 65535
  %cmp44 = icmp eq i32 %bf.clear43, 33
  br i1 %cmp44, label %if.then.46, label %if.end.144

if.then.46:                                       ; preds = %if.end
  %54 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  store %struct.rtx_def* %54, %struct.rtx_def** %loop_entry_jump, align 8
  %55 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %call47 = call i32 @any_uncondjump_p(%struct.rtx_def* %55)
  %tobool48 = icmp ne i32 %call47, 0
  br i1 %tobool48, label %land.lhs.true.49, label %if.end.143

land.lhs.true.49:                                 ; preds = %if.then.46
  %56 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld50 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %56, i32 0, i32 1
  %arrayidx51 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld50, i32 0, i64 7
  %rtx52 = bitcast %union.rtunion_def* %arrayidx51 to %struct.rtx_def**
  %57 = load %struct.rtx_def*, %struct.rtx_def** %rtx52, align 8
  %cmp53 = icmp ne %struct.rtx_def* %57, null
  br i1 %cmp53, label %land.lhs.true.55, label %if.end.143

land.lhs.true.55:                                 ; preds = %land.lhs.true.49
  %58 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld56 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %58, i32 0, i32 1
  %arrayidx57 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld56, i32 0, i64 7
  %rtx58 = bitcast %union.rtunion_def* %arrayidx57 to %struct.rtx_def**
  %59 = load %struct.rtx_def*, %struct.rtx_def** %rtx58, align 8
  %fld59 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %59, i32 0, i32 1
  %arrayidx60 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld59, i32 0, i64 0
  %rtint61 = bitcast %union.rtunion_def* %arrayidx60 to i32*
  %60 = load i32, i32* %rtint61, align 4
  %61 = load i32, i32* @max_uid_for_loop, align 4
  %cmp62 = icmp slt i32 %60, %61
  br i1 %cmp62, label %land.lhs.true.64, label %if.end.143

land.lhs.true.64:                                 ; preds = %land.lhs.true.55
  %62 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld65 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %62, i32 0, i32 1
  %arrayidx66 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld65, i32 0, i64 7
  %rtx67 = bitcast %union.rtunion_def* %arrayidx66 to %struct.rtx_def**
  %63 = load %struct.rtx_def*, %struct.rtx_def** %rtx67, align 8
  %fld68 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %63, i32 0, i32 1
  %arrayidx69 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld68, i32 0, i64 0
  %rtint70 = bitcast %union.rtunion_def* %arrayidx69 to i32*
  %64 = load i32, i32* %rtint70, align 4
  %65 = load i32, i32* @max_uid_for_loop, align 4
  %cmp71 = icmp slt i32 %64, %65
  br i1 %cmp71, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true.64
  %66 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld73 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %66, i32 0, i32 1
  %arrayidx74 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld73, i32 0, i64 7
  %rtx75 = bitcast %union.rtunion_def* %arrayidx74 to %struct.rtx_def**
  %67 = load %struct.rtx_def*, %struct.rtx_def** %rtx75, align 8
  %fld76 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %67, i32 0, i32 1
  %arrayidx77 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld76, i32 0, i64 0
  %rtint78 = bitcast %union.rtunion_def* %arrayidx77 to i32*
  %68 = load i32, i32* %rtint78, align 4
  %idxprom79 = sext i32 %68 to i64
  %69 = load i32*, i32** @uid_luid, align 8
  %arrayidx80 = getelementptr inbounds i32, i32* %69, i64 %idxprom79
  %70 = load i32, i32* %arrayidx80, align 4
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true.64
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 707, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @__FUNCTION__.scan_loop, i32 0, i32 0)) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %71, %cond.true
  %cond81 = phi i32 [ %70, %cond.true ], [ -1, %71 ]
  %72 = load %struct.rtx_def*, %struct.rtx_def** %loop_start, align 8
  %fld82 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %72, i32 0, i32 1
  %arrayidx83 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld82, i32 0, i64 0
  %rtint84 = bitcast %union.rtunion_def* %arrayidx83 to i32*
  %73 = load i32, i32* %rtint84, align 4
  %74 = load i32, i32* @max_uid_for_loop, align 4
  %cmp85 = icmp slt i32 %73, %74
  br i1 %cmp85, label %cond.true.87, label %cond.false.93

cond.true.87:                                     ; preds = %cond.end
  %75 = load %struct.rtx_def*, %struct.rtx_def** %loop_start, align 8
  %fld88 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %75, i32 0, i32 1
  %arrayidx89 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld88, i32 0, i64 0
  %rtint90 = bitcast %union.rtunion_def* %arrayidx89 to i32*
  %76 = load i32, i32* %rtint90, align 4
  %idxprom91 = sext i32 %76 to i64
  %77 = load i32*, i32** @uid_luid, align 8
  %arrayidx92 = getelementptr inbounds i32, i32* %77, i64 %idxprom91
  %78 = load i32, i32* %arrayidx92, align 4
  br label %cond.end.94

cond.false.93:                                    ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 707, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @__FUNCTION__.scan_loop, i32 0, i32 0)) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end.94

cond.end.94:                                      ; preds = %79, %cond.true.87
  %cond95 = phi i32 [ %78, %cond.true.87 ], [ -1, %79 ]
  %cmp96 = icmp sge i32 %cond81, %cond95
  br i1 %cmp96, label %land.lhs.true.98, label %if.end.143

land.lhs.true.98:                                 ; preds = %cond.end.94
  %80 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld99 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %80, i32 0, i32 1
  %arrayidx100 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld99, i32 0, i64 7
  %rtx101 = bitcast %union.rtunion_def* %arrayidx100 to %struct.rtx_def**
  %81 = load %struct.rtx_def*, %struct.rtx_def** %rtx101, align 8
  %fld102 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %81, i32 0, i32 1
  %arrayidx103 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld102, i32 0, i64 0
  %rtint104 = bitcast %union.rtunion_def* %arrayidx103 to i32*
  %82 = load i32, i32* %rtint104, align 4
  %83 = load i32, i32* @max_uid_for_loop, align 4
  %cmp105 = icmp slt i32 %82, %83
  br i1 %cmp105, label %cond.true.107, label %cond.false.116

cond.true.107:                                    ; preds = %land.lhs.true.98
  %84 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld108 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %84, i32 0, i32 1
  %arrayidx109 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld108, i32 0, i64 7
  %rtx110 = bitcast %union.rtunion_def* %arrayidx109 to %struct.rtx_def**
  %85 = load %struct.rtx_def*, %struct.rtx_def** %rtx110, align 8
  %fld111 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %85, i32 0, i32 1
  %arrayidx112 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld111, i32 0, i64 0
  %rtint113 = bitcast %union.rtunion_def* %arrayidx112 to i32*
  %86 = load i32, i32* %rtint113, align 4
  %idxprom114 = sext i32 %86 to i64
  %87 = load i32*, i32** @uid_luid, align 8
  %arrayidx115 = getelementptr inbounds i32, i32* %87, i64 %idxprom114
  %88 = load i32, i32* %arrayidx115, align 4
  br label %cond.end.117

cond.false.116:                                   ; preds = %land.lhs.true.98
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 707, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @__FUNCTION__.scan_loop, i32 0, i32 0)) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end.117

cond.end.117:                                     ; preds = %89, %cond.true.107
  %cond118 = phi i32 [ %88, %cond.true.107 ], [ -1, %89 ]
  %90 = load %struct.rtx_def*, %struct.rtx_def** %loop_end, align 8
  %fld119 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %90, i32 0, i32 1
  %arrayidx120 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld119, i32 0, i64 0
  %rtint121 = bitcast %union.rtunion_def* %arrayidx120 to i32*
  %91 = load i32, i32* %rtint121, align 4
  %92 = load i32, i32* @max_uid_for_loop, align 4
  %cmp122 = icmp slt i32 %91, %92
  br i1 %cmp122, label %cond.true.124, label %cond.false.130

cond.true.124:                                    ; preds = %cond.end.117
  %93 = load %struct.rtx_def*, %struct.rtx_def** %loop_end, align 8
  %fld125 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %93, i32 0, i32 1
  %arrayidx126 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld125, i32 0, i64 0
  %rtint127 = bitcast %union.rtunion_def* %arrayidx126 to i32*
  %94 = load i32, i32* %rtint127, align 4
  %idxprom128 = sext i32 %94 to i64
  %95 = load i32*, i32** @uid_luid, align 8
  %arrayidx129 = getelementptr inbounds i32, i32* %95, i64 %idxprom128
  %96 = load i32, i32* %arrayidx129, align 4
  br label %cond.end.131

cond.false.130:                                   ; preds = %cond.end.117
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 707, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @__FUNCTION__.scan_loop, i32 0, i32 0)) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end.131

cond.end.131:                                     ; preds = %97, %cond.true.124
  %cond132 = phi i32 [ %96, %cond.true.124 ], [ -1, %97 ]
  %cmp133 = icmp sle i32 %cond118, %cond132
  br i1 %cmp133, label %if.then.135, label %if.end.143

if.then.135:                                      ; preds = %cond.end.131
  %98 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %scan_start136 = getelementptr inbounds %struct.loop, %struct.loop* %98, i32 0, i32 29
  %99 = load %struct.rtx_def*, %struct.rtx_def** %scan_start136, align 8
  %call137 = call %struct.rtx_def* @next_label(%struct.rtx_def* %99)
  %100 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %top138 = getelementptr inbounds %struct.loop, %struct.loop* %100, i32 0, i32 28
  store %struct.rtx_def* %call137, %struct.rtx_def** %top138, align 8
  %101 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld139 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %101, i32 0, i32 1
  %arrayidx140 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld139, i32 0, i64 7
  %rtx141 = bitcast %union.rtunion_def* %arrayidx140 to %struct.rtx_def**
  %102 = load %struct.rtx_def*, %struct.rtx_def** %rtx141, align 8
  %103 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %scan_start142 = getelementptr inbounds %struct.loop, %struct.loop* %103, i32 0, i32 29
  store %struct.rtx_def* %102, %struct.rtx_def** %scan_start142, align 8
  br label %if.end.143

if.end.143:                                       ; preds = %if.then.135, %cond.end.131, %cond.end.94, %land.lhs.true.55, %land.lhs.true.49, %if.then.46
  br label %if.end.144

if.end.144:                                       ; preds = %if.end.143, %if.end
  %104 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %scan_start145 = getelementptr inbounds %struct.loop, %struct.loop* %104, i32 0, i32 29
  %105 = load %struct.rtx_def*, %struct.rtx_def** %scan_start145, align 8
  %fld146 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %105, i32 0, i32 1
  %arrayidx147 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld146, i32 0, i64 0
  %rtint148 = bitcast %union.rtunion_def* %arrayidx147 to i32*
  %106 = load i32, i32* %rtint148, align 4
  %107 = load i32, i32* @max_uid_for_loop, align 4
  %cmp149 = icmp sge i32 %106, %107
  br i1 %cmp149, label %if.then.156, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.144
  %108 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %scan_start151 = getelementptr inbounds %struct.loop, %struct.loop* %108, i32 0, i32 29
  %109 = load %struct.rtx_def*, %struct.rtx_def** %scan_start151, align 8
  %110 = bitcast %struct.rtx_def* %109 to i32*
  %bf.load152 = load i32, i32* %110, align 8
  %bf.clear153 = and i32 %bf.load152, 65535
  %cmp154 = icmp ne i32 %bf.clear153, 36
  br i1 %cmp154, label %if.then.156, label %if.end.167

if.then.156:                                      ; preds = %lor.lhs.false, %if.end.144
  %111 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %tobool157 = icmp ne %struct._IO_FILE* %111, null
  br i1 %tobool157, label %if.then.158, label %if.end.166

if.then.158:                                      ; preds = %if.then.156
  %112 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %113 = load %struct.rtx_def*, %struct.rtx_def** %loop_start, align 8
  %fld159 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %113, i32 0, i32 1
  %arrayidx160 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld159, i32 0, i64 0
  %rtint161 = bitcast %union.rtunion_def* %arrayidx160 to i32*
  %114 = load i32, i32* %rtint161, align 4
  %115 = load %struct.rtx_def*, %struct.rtx_def** %loop_end, align 8
  %fld162 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %115, i32 0, i32 1
  %arrayidx163 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld162, i32 0, i64 0
  %rtint164 = bitcast %union.rtunion_def* %arrayidx163 to i32*
  %116 = load i32, i32* %rtint164, align 4
  %call165 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %112, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.1, i32 0, i32 0), i32 %114, i32 %116)
  br label %if.end.166

if.end.166:                                       ; preds = %if.then.158, %if.then.156
  br label %return

if.end.167:                                       ; preds = %lor.lhs.false
  %117 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %118 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %mems_idx = getelementptr inbounds %struct.loop_info, %struct.loop_info* %118, i32 0, i32 21
  %119 = load i32, i32* %mems_idx, align 4
  %add168 = add nsw i32 %119, 16
  call void @loop_regs_scan(%struct.loop* %117, i32 %add168)
  %120 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %call169 = call i32 @count_insns_in_loop(%struct.loop* %120)
  store i32 %call169, i32* %insn_count, align 4
  %121 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %tobool170 = icmp ne %struct._IO_FILE* %121, null
  br i1 %tobool170, label %if.then.171, label %if.end.187

if.then.171:                                      ; preds = %if.end.167
  %122 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %123 = load %struct.rtx_def*, %struct.rtx_def** %loop_start, align 8
  %fld172 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %123, i32 0, i32 1
  %arrayidx173 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld172, i32 0, i64 0
  %rtint174 = bitcast %union.rtunion_def* %arrayidx173 to i32*
  %124 = load i32, i32* %rtint174, align 4
  %125 = load %struct.rtx_def*, %struct.rtx_def** %loop_end, align 8
  %fld175 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %125, i32 0, i32 1
  %arrayidx176 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld175, i32 0, i64 0
  %rtint177 = bitcast %union.rtunion_def* %arrayidx176 to i32*
  %126 = load i32, i32* %rtint177, align 4
  %127 = load i32, i32* %insn_count, align 4
  %call178 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %122, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.2, i32 0, i32 0), i32 %124, i32 %126, i32 %127)
  %128 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %cont = getelementptr inbounds %struct.loop, %struct.loop* %128, i32 0, i32 24
  %129 = load %struct.rtx_def*, %struct.rtx_def** %cont, align 8
  %tobool179 = icmp ne %struct.rtx_def* %129, null
  br i1 %tobool179, label %if.then.180, label %if.end.186

if.then.180:                                      ; preds = %if.then.171
  %130 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %131 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %cont181 = getelementptr inbounds %struct.loop, %struct.loop* %131, i32 0, i32 24
  %132 = load %struct.rtx_def*, %struct.rtx_def** %cont181, align 8
  %fld182 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %132, i32 0, i32 1
  %arrayidx183 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld182, i32 0, i64 0
  %rtint184 = bitcast %union.rtunion_def* %arrayidx183 to i32*
  %133 = load i32, i32* %rtint184, align 4
  %call185 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %130, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i32 0, i32 0), i32 %133)
  br label %if.end.186

if.end.186:                                       ; preds = %if.then.180, %if.then.171
  br label %if.end.187

if.end.187:                                       ; preds = %if.end.186, %if.end.167
  %134 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %135 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %scan_start188 = getelementptr inbounds %struct.loop, %struct.loop* %135, i32 0, i32 29
  %136 = load %struct.rtx_def*, %struct.rtx_def** %scan_start188, align 8
  %call189 = call %struct.rtx_def* @next_insn_in_loop(%struct.loop* %134, %struct.rtx_def* %136)
  store %struct.rtx_def* %call189, %struct.rtx_def** %p, align 8
  br label %for.cond.190

for.cond.190:                                     ; preds = %for.inc.1543, %if.end.187
  %137 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %cmp191 = icmp ne %struct.rtx_def* %137, null
  br i1 %cmp191, label %for.body.193, label %for.end.1545

for.body.193:                                     ; preds = %for.cond.190
  %138 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %139 = bitcast %struct.rtx_def* %138 to i32*
  %bf.load194 = load i32, i32* %139, align 8
  %bf.clear195 = and i32 %bf.load194, 65535
  %cmp196 = icmp eq i32 %bf.clear195, 32
  br i1 %cmp196, label %land.lhs.true.198, label %if.else.1460

land.lhs.true.198:                                ; preds = %for.body.193
  %140 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %141 = bitcast %struct.rtx_def* %140 to i32*
  %bf.load199 = load i32, i32* %141, align 8
  %bf.clear200 = and i32 %bf.load199, 65535
  %idxprom201 = sext i32 %bf.clear200 to i64
  %arrayidx202 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom201
  %142 = load i8, i8* %arrayidx202, align 1
  %conv203 = sext i8 %142 to i32
  %cmp204 = icmp eq i32 %conv203, 105
  br i1 %cmp204, label %cond.true.206, label %cond.false.225

cond.true.206:                                    ; preds = %land.lhs.true.198
  %143 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld207 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %143, i32 0, i32 1
  %arrayidx208 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld207, i32 0, i64 3
  %rtx209 = bitcast %union.rtunion_def* %arrayidx208 to %struct.rtx_def**
  %144 = load %struct.rtx_def*, %struct.rtx_def** %rtx209, align 8
  %145 = bitcast %struct.rtx_def* %144 to i32*
  %bf.load210 = load i32, i32* %145, align 8
  %bf.clear211 = and i32 %bf.load210, 65535
  %cmp212 = icmp eq i32 %bf.clear211, 47
  br i1 %cmp212, label %cond.true.214, label %cond.false.218

cond.true.214:                                    ; preds = %cond.true.206
  %146 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld215 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %146, i32 0, i32 1
  %arrayidx216 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld215, i32 0, i64 3
  %rtx217 = bitcast %union.rtunion_def* %arrayidx216 to %struct.rtx_def**
  %147 = load %struct.rtx_def*, %struct.rtx_def** %rtx217, align 8
  br label %cond.end.223

cond.false.218:                                   ; preds = %cond.true.206
  %148 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %149 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld219 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %149, i32 0, i32 1
  %arrayidx220 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld219, i32 0, i64 3
  %rtx221 = bitcast %union.rtunion_def* %arrayidx220 to %struct.rtx_def**
  %150 = load %struct.rtx_def*, %struct.rtx_def** %rtx221, align 8
  %call222 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %148, %struct.rtx_def* %150)
  br label %cond.end.223

cond.end.223:                                     ; preds = %cond.false.218, %cond.true.214
  %cond224 = phi %struct.rtx_def* [ %147, %cond.true.214 ], [ %call222, %cond.false.218 ]
  br label %cond.end.226

cond.false.225:                                   ; preds = %land.lhs.true.198
  br label %cond.end.226

cond.end.226:                                     ; preds = %cond.false.225, %cond.end.223
  %cond227 = phi %struct.rtx_def* [ %cond224, %cond.end.223 ], [ null, %cond.false.225 ]
  store %struct.rtx_def* %cond227, %struct.rtx_def** %set, align 8
  %tobool228 = icmp ne %struct.rtx_def* %cond227, null
  br i1 %tobool228, label %land.lhs.true.229, label %if.else.1460

land.lhs.true.229:                                ; preds = %cond.end.226
  %151 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld230 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %151, i32 0, i32 1
  %arrayidx231 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld230, i32 0, i64 0
  %rtx232 = bitcast %union.rtunion_def* %arrayidx231 to %struct.rtx_def**
  %152 = load %struct.rtx_def*, %struct.rtx_def** %rtx232, align 8
  %153 = bitcast %struct.rtx_def* %152 to i32*
  %bf.load233 = load i32, i32* %153, align 8
  %bf.clear234 = and i32 %bf.load233, 65535
  %cmp235 = icmp eq i32 %bf.clear234, 61
  br i1 %cmp235, label %land.lhs.true.237, label %if.else.1460

land.lhs.true.237:                                ; preds = %land.lhs.true.229
  %154 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld238 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %154, i32 0, i32 1
  %arrayidx239 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld238, i32 0, i64 0
  %rtx240 = bitcast %union.rtunion_def* %arrayidx239 to %struct.rtx_def**
  %155 = load %struct.rtx_def*, %struct.rtx_def** %rtx240, align 8
  %fld241 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %155, i32 0, i32 1
  %arrayidx242 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld241, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx242 to i32*
  %156 = load i32, i32* %rtuint, align 4
  %idxprom243 = zext i32 %156 to i64
  %157 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %array = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %157, i32 0, i32 2
  %158 = load %struct.loop_reg*, %struct.loop_reg** %array, align 8
  %arrayidx244 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %158, i64 %idxprom243
  %may_not_optimize = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %arrayidx244, i32 0, i32 3
  %159 = load i8, i8* %may_not_optimize, align 1
  %tobool245 = icmp ne i8 %159, 0
  br i1 %tobool245, label %if.else.1460, label %if.then.246

if.then.246:                                      ; preds = %land.lhs.true.237
  store i32 0, i32* %tem1, align 4
  store i32 0, i32* %tem2, align 4
  store i32 0, i32* %move_insn, align 4
  %160 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld247 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %160, i32 0, i32 1
  %arrayidx248 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld247, i32 0, i64 1
  %rtx249 = bitcast %union.rtunion_def* %arrayidx248 to %struct.rtx_def**
  %161 = load %struct.rtx_def*, %struct.rtx_def** %rtx249, align 8
  store %struct.rtx_def* %161, %struct.rtx_def** %src, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %dependencies, align 8
  %162 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %call250 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %162, i32 3, %struct.rtx_def* null)
  store %struct.rtx_def* %call250, %struct.rtx_def** %temp, align 8
  %163 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %tobool251 = icmp ne %struct.rtx_def* %163, null
  br i1 %tobool251, label %if.then.252, label %if.else.256

if.then.252:                                      ; preds = %if.then.246
  %164 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %fld253 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %164, i32 0, i32 1
  %arrayidx254 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld253, i32 0, i64 0
  %rtx255 = bitcast %union.rtunion_def* %arrayidx254 to %struct.rtx_def**
  %165 = load %struct.rtx_def*, %struct.rtx_def** %rtx255, align 8
  store %struct.rtx_def* %165, %struct.rtx_def** %src, align 8
  store i32 1, i32* %move_insn, align 4
  br label %if.end.338

if.else.256:                                      ; preds = %if.then.246
  %166 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %call257 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %166, i32 4, %struct.rtx_def* null)
  store %struct.rtx_def* %call257, %struct.rtx_def** %temp, align 8
  %167 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %tobool258 = icmp ne %struct.rtx_def* %167, null
  br i1 %tobool258, label %land.lhs.true.259, label %if.end.327

land.lhs.true.259:                                ; preds = %if.else.256
  %168 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %fld260 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %168, i32 0, i32 1
  %arrayidx261 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld260, i32 0, i64 0
  %rtx262 = bitcast %union.rtunion_def* %arrayidx261 to %struct.rtx_def**
  %169 = load %struct.rtx_def*, %struct.rtx_def** %rtx262, align 8
  %170 = bitcast %struct.rtx_def* %169 to i32*
  %bf.load263 = load i32, i32* %170, align 8
  %bf.clear264 = and i32 %bf.load263, 65535
  %cmp265 = icmp eq i32 %bf.clear264, 67
  br i1 %cmp265, label %if.then.323, label %lor.lhs.false.267

lor.lhs.false.267:                                ; preds = %land.lhs.true.259
  %171 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %fld268 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %171, i32 0, i32 1
  %arrayidx269 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld268, i32 0, i64 0
  %rtx270 = bitcast %union.rtunion_def* %arrayidx269 to %struct.rtx_def**
  %172 = load %struct.rtx_def*, %struct.rtx_def** %rtx270, align 8
  %173 = bitcast %struct.rtx_def* %172 to i32*
  %bf.load271 = load i32, i32* %173, align 8
  %bf.clear272 = and i32 %bf.load271, 65535
  %cmp273 = icmp eq i32 %bf.clear272, 68
  br i1 %cmp273, label %if.then.323, label %lor.lhs.false.275

lor.lhs.false.275:                                ; preds = %lor.lhs.false.267
  %174 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %fld276 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %174, i32 0, i32 1
  %arrayidx277 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld276, i32 0, i64 0
  %rtx278 = bitcast %union.rtunion_def* %arrayidx277 to %struct.rtx_def**
  %175 = load %struct.rtx_def*, %struct.rtx_def** %rtx278, align 8
  %176 = bitcast %struct.rtx_def* %175 to i32*
  %bf.load279 = load i32, i32* %176, align 8
  %bf.clear280 = and i32 %bf.load279, 65535
  %cmp281 = icmp eq i32 %bf.clear280, 54
  br i1 %cmp281, label %if.then.323, label %lor.lhs.false.283

lor.lhs.false.283:                                ; preds = %lor.lhs.false.275
  %177 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %fld284 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %177, i32 0, i32 1
  %arrayidx285 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld284, i32 0, i64 0
  %rtx286 = bitcast %union.rtunion_def* %arrayidx285 to %struct.rtx_def**
  %178 = load %struct.rtx_def*, %struct.rtx_def** %rtx286, align 8
  %179 = bitcast %struct.rtx_def* %178 to i32*
  %bf.load287 = load i32, i32* %179, align 8
  %bf.clear288 = and i32 %bf.load287, 65535
  %cmp289 = icmp eq i32 %bf.clear288, 55
  br i1 %cmp289, label %if.then.323, label %lor.lhs.false.291

lor.lhs.false.291:                                ; preds = %lor.lhs.false.283
  %180 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %fld292 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %180, i32 0, i32 1
  %arrayidx293 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld292, i32 0, i64 0
  %rtx294 = bitcast %union.rtunion_def* %arrayidx293 to %struct.rtx_def**
  %181 = load %struct.rtx_def*, %struct.rtx_def** %rtx294, align 8
  %182 = bitcast %struct.rtx_def* %181 to i32*
  %bf.load295 = load i32, i32* %182, align 8
  %bf.clear296 = and i32 %bf.load295, 65535
  %cmp297 = icmp eq i32 %bf.clear296, 58
  br i1 %cmp297, label %if.then.323, label %lor.lhs.false.299

lor.lhs.false.299:                                ; preds = %lor.lhs.false.291
  %183 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %fld300 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %183, i32 0, i32 1
  %arrayidx301 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld300, i32 0, i64 0
  %rtx302 = bitcast %union.rtunion_def* %arrayidx301 to %struct.rtx_def**
  %184 = load %struct.rtx_def*, %struct.rtx_def** %rtx302, align 8
  %185 = bitcast %struct.rtx_def* %184 to i32*
  %bf.load303 = load i32, i32* %185, align 8
  %bf.clear304 = and i32 %bf.load303, 65535
  %cmp305 = icmp eq i32 %bf.clear304, 134
  br i1 %cmp305, label %if.then.323, label %lor.lhs.false.307

lor.lhs.false.307:                                ; preds = %lor.lhs.false.299
  %186 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %fld308 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %186, i32 0, i32 1
  %arrayidx309 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld308, i32 0, i64 0
  %rtx310 = bitcast %union.rtunion_def* %arrayidx309 to %struct.rtx_def**
  %187 = load %struct.rtx_def*, %struct.rtx_def** %rtx310, align 8
  %188 = bitcast %struct.rtx_def* %187 to i32*
  %bf.load311 = load i32, i32* %188, align 8
  %bf.clear312 = and i32 %bf.load311, 65535
  %cmp313 = icmp eq i32 %bf.clear312, 56
  br i1 %cmp313, label %if.then.323, label %lor.lhs.false.315

lor.lhs.false.315:                                ; preds = %lor.lhs.false.307
  %189 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %fld316 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %189, i32 0, i32 1
  %arrayidx317 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld316, i32 0, i64 0
  %rtx318 = bitcast %union.rtunion_def* %arrayidx317 to %struct.rtx_def**
  %190 = load %struct.rtx_def*, %struct.rtx_def** %rtx318, align 8
  %191 = bitcast %struct.rtx_def* %190 to i32*
  %bf.load319 = load i32, i32* %191, align 8
  %bf.clear320 = and i32 %bf.load319, 65535
  %cmp321 = icmp eq i32 %bf.clear320, 140
  br i1 %cmp321, label %if.then.323, label %if.end.327

if.then.323:                                      ; preds = %lor.lhs.false.315, %lor.lhs.false.307, %lor.lhs.false.299, %lor.lhs.false.291, %lor.lhs.false.283, %lor.lhs.false.275, %lor.lhs.false.267, %land.lhs.true.259
  %192 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %fld324 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %192, i32 0, i32 1
  %arrayidx325 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld324, i32 0, i64 0
  %rtx326 = bitcast %union.rtunion_def* %arrayidx325 to %struct.rtx_def**
  %193 = load %struct.rtx_def*, %struct.rtx_def** %rtx326, align 8
  store %struct.rtx_def* %193, %struct.rtx_def** %src, align 8
  store i32 1, i32* %move_insn, align 4
  br label %if.end.327

if.end.327:                                       ; preds = %if.then.323, %lor.lhs.false.315, %if.else.256
  %194 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %tobool328 = icmp ne %struct.rtx_def* %194, null
  br i1 %tobool328, label %land.lhs.true.329, label %if.end.337

land.lhs.true.329:                                ; preds = %if.end.327
  %195 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %call330 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %195, i32 6, %struct.rtx_def* null)
  %tobool331 = icmp ne %struct.rtx_def* %call330, null
  br i1 %tobool331, label %if.then.332, label %if.end.337

if.then.332:                                      ; preds = %land.lhs.true.329
  %196 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %fld333 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %196, i32 0, i32 1
  %arrayidx334 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld333, i32 0, i64 0
  %rtx335 = bitcast %union.rtunion_def* %arrayidx334 to %struct.rtx_def**
  %197 = load %struct.rtx_def*, %struct.rtx_def** %rtx335, align 8
  store %struct.rtx_def* %197, %struct.rtx_def** %src, align 8
  %198 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %199 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %call336 = call %struct.rtx_def* @libcall_other_reg(%struct.rtx_def* %198, %struct.rtx_def* %199)
  store %struct.rtx_def* %call336, %struct.rtx_def** %dependencies, align 8
  br label %if.end.337

if.end.337:                                       ; preds = %if.then.332, %land.lhs.true.329, %if.end.327
  br label %if.end.338

if.end.338:                                       ; preds = %if.end.337, %if.then.252
  %200 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld339 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %200, i32 0, i32 1
  %arrayidx340 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld339, i32 0, i64 3
  %rtx341 = bitcast %union.rtunion_def* %arrayidx340 to %struct.rtx_def**
  %201 = load %struct.rtx_def*, %struct.rtx_def** %rtx341, align 8
  %202 = bitcast %struct.rtx_def* %201 to i32*
  %bf.load342 = load i32, i32* %202, align 8
  %bf.clear343 = and i32 %bf.load342, 65535
  %cmp344 = icmp eq i32 %bf.clear343, 39
  br i1 %cmp344, label %if.then.346, label %if.end.376

if.then.346:                                      ; preds = %if.end.338
  store i32 0, i32* %i, align 4
  br label %for.cond.347

for.cond.347:                                     ; preds = %for.inc.374, %if.then.346
  %203 = load i32, i32* %i, align 4
  %204 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld348 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %204, i32 0, i32 1
  %arrayidx349 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld348, i32 0, i64 3
  %rtx350 = bitcast %union.rtunion_def* %arrayidx349 to %struct.rtx_def**
  %205 = load %struct.rtx_def*, %struct.rtx_def** %rtx350, align 8
  %fld351 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %205, i32 0, i32 1
  %arrayidx352 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld351, i32 0, i64 0
  %rtvec = bitcast %union.rtunion_def* %arrayidx352 to %struct.rtvec_def**
  %206 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec, align 8
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %206, i32 0, i32 0
  %207 = load i32, i32* %num_elem, align 4
  %cmp353 = icmp slt i32 %203, %207
  br i1 %cmp353, label %for.body.355, label %for.end.375

for.body.355:                                     ; preds = %for.cond.347
  %208 = load i32, i32* %i, align 4
  %idxprom356 = sext i32 %208 to i64
  %209 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld357 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %209, i32 0, i32 1
  %arrayidx358 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld357, i32 0, i64 3
  %rtx359 = bitcast %union.rtunion_def* %arrayidx358 to %struct.rtx_def**
  %210 = load %struct.rtx_def*, %struct.rtx_def** %rtx359, align 8
  %fld360 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %210, i32 0, i32 1
  %arrayidx361 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld360, i32 0, i64 0
  %rtvec362 = bitcast %union.rtunion_def* %arrayidx361 to %struct.rtvec_def**
  %211 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec362, align 8
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %211, i32 0, i32 1
  %arrayidx363 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i32 0, i64 %idxprom356
  %212 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx363, align 8
  store %struct.rtx_def* %212, %struct.rtx_def** %x, align 8
  %213 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %214 = bitcast %struct.rtx_def* %213 to i32*
  %bf.load364 = load i32, i32* %214, align 8
  %bf.clear365 = and i32 %bf.load364, 65535
  %cmp366 = icmp eq i32 %bf.clear365, 48
  br i1 %cmp366, label %if.then.368, label %if.end.373

if.then.368:                                      ; preds = %for.body.355
  %215 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld369 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %215, i32 0, i32 1
  %arrayidx370 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld369, i32 0, i64 0
  %rtx371 = bitcast %union.rtunion_def* %arrayidx370 to %struct.rtx_def**
  %216 = load %struct.rtx_def*, %struct.rtx_def** %rtx371, align 8
  %217 = load %struct.rtx_def*, %struct.rtx_def** %dependencies, align 8
  %call372 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 0, %struct.rtx_def* %216, %struct.rtx_def* %217)
  store %struct.rtx_def* %call372, %struct.rtx_def** %dependencies, align 8
  br label %if.end.373

if.end.373:                                       ; preds = %if.then.368, %for.body.355
  br label %for.inc.374

for.inc.374:                                      ; preds = %if.end.373
  %218 = load i32, i32* %i, align 4
  %inc = add nsw i32 %218, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond.347

for.end.375:                                      ; preds = %for.cond.347
  br label %if.end.376

if.end.376:                                       ; preds = %for.end.375, %if.end.338
  %219 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld377 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %219, i32 0, i32 1
  %arrayidx378 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld377, i32 0, i64 0
  %rtx379 = bitcast %union.rtunion_def* %arrayidx378 to %struct.rtx_def**
  %220 = load %struct.rtx_def*, %struct.rtx_def** %rtx379, align 8
  %fld380 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %220, i32 0, i32 1
  %arrayidx381 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld380, i32 0, i64 0
  %rtuint382 = bitcast %union.rtunion_def* %arrayidx381 to i32*
  %221 = load i32, i32* %rtuint382, align 4
  %222 = load i32, i32* @max_reg_before_loop, align 4
  %cmp383 = icmp uge i32 %221, %222
  br i1 %cmp383, label %if.then.385, label %if.else.386

if.then.385:                                      ; preds = %if.end.376
  br label %if.end.1459

if.else.386:                                      ; preds = %if.end.376
  %223 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %224 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld387 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %224, i32 0, i32 1
  %arrayidx388 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld387, i32 0, i64 0
  %rtx389 = bitcast %union.rtunion_def* %arrayidx388 to %struct.rtx_def**
  %225 = load %struct.rtx_def*, %struct.rtx_def** %rtx389, align 8
  %call390 = call i32 @reg_in_basic_block_p(%struct.rtx_def* %223, %struct.rtx_def* %225)
  %tobool391 = icmp ne i32 %call390, 0
  br i1 %tobool391, label %if.else.398, label %land.lhs.true.392

land.lhs.true.392:                                ; preds = %if.else.386
  %226 = load i32, i32* %maybe_never, align 4
  %tobool393 = icmp ne i32 %226, 0
  br i1 %tobool393, label %if.then.397, label %lor.lhs.false.394

lor.lhs.false.394:                                ; preds = %land.lhs.true.392
  %227 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %228 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %229 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %call395 = call i32 @loop_reg_used_before_p(%struct.loop* %227, %struct.rtx_def* %228, %struct.rtx_def* %229)
  %tobool396 = icmp ne i32 %call395, 0
  br i1 %tobool396, label %if.then.397, label %if.else.398

if.then.397:                                      ; preds = %lor.lhs.false.394, %land.lhs.true.392
  br label %if.end.1458

if.else.398:                                      ; preds = %lor.lhs.false.394, %if.else.386
  %230 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %231 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %call399 = call i32 @loop_invariant_p(%struct.loop* %230, %struct.rtx_def* %231)
  store i32 %call399, i32* %tem, align 4
  %tobool400 = icmp ne i32 %call399, 0
  br i1 %tobool400, label %land.lhs.true.401, label %if.else.1070

land.lhs.true.401:                                ; preds = %if.else.398
  %232 = load %struct.rtx_def*, %struct.rtx_def** %dependencies, align 8
  %cmp402 = icmp eq %struct.rtx_def* %232, null
  br i1 %cmp402, label %land.lhs.true.408, label %lor.lhs.false.404

lor.lhs.false.404:                                ; preds = %land.lhs.true.401
  %233 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %234 = load %struct.rtx_def*, %struct.rtx_def** %dependencies, align 8
  %call405 = call i32 @loop_invariant_p(%struct.loop* %233, %struct.rtx_def* %234)
  store i32 %call405, i32* %tem2, align 4
  %cmp406 = icmp ne i32 %call405, 0
  br i1 %cmp406, label %land.lhs.true.408, label %if.else.1070

land.lhs.true.408:                                ; preds = %lor.lhs.false.404, %land.lhs.true.401
  %235 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld409 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %235, i32 0, i32 1
  %arrayidx410 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld409, i32 0, i64 0
  %rtx411 = bitcast %union.rtunion_def* %arrayidx410 to %struct.rtx_def**
  %236 = load %struct.rtx_def*, %struct.rtx_def** %rtx411, align 8
  %fld412 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %236, i32 0, i32 1
  %arrayidx413 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld412, i32 0, i64 0
  %rtuint414 = bitcast %union.rtunion_def* %arrayidx413 to i32*
  %237 = load i32, i32* %rtuint414, align 4
  %idxprom415 = zext i32 %237 to i64
  %238 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %array416 = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %238, i32 0, i32 2
  %239 = load %struct.loop_reg*, %struct.loop_reg** %array416, align 8
  %arrayidx417 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %239, i64 %idxprom415
  %set_in_loop = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %arrayidx417, i32 0, i32 0
  %240 = load i32, i32* %set_in_loop, align 4
  %cmp418 = icmp eq i32 %240, 1
  br i1 %cmp418, label %land.lhs.true.436, label %lor.lhs.false.420

lor.lhs.false.420:                                ; preds = %land.lhs.true.408
  %241 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %242 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld421 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %242, i32 0, i32 1
  %arrayidx422 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld421, i32 0, i64 0
  %rtx423 = bitcast %union.rtunion_def* %arrayidx422 to %struct.rtx_def**
  %243 = load %struct.rtx_def*, %struct.rtx_def** %rtx423, align 8
  %244 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld424 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %244, i32 0, i32 1
  %arrayidx425 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld424, i32 0, i64 0
  %rtx426 = bitcast %union.rtunion_def* %arrayidx425 to %struct.rtx_def**
  %245 = load %struct.rtx_def*, %struct.rtx_def** %rtx426, align 8
  %fld427 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %245, i32 0, i32 1
  %arrayidx428 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld427, i32 0, i64 0
  %rtuint429 = bitcast %union.rtunion_def* %arrayidx428 to i32*
  %246 = load i32, i32* %rtuint429, align 4
  %idxprom430 = zext i32 %246 to i64
  %247 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %array431 = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %247, i32 0, i32 2
  %248 = load %struct.loop_reg*, %struct.loop_reg** %array431, align 8
  %arrayidx432 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %248, i64 %idxprom430
  %set_in_loop433 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %arrayidx432, i32 0, i32 0
  %249 = load i32, i32* %set_in_loop433, align 4
  %250 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %call434 = call i32 @consec_sets_invariant_p(%struct.loop* %241, %struct.rtx_def* %243, i32 %249, %struct.rtx_def* %250)
  store i32 %call434, i32* %tem1, align 4
  %tobool435 = icmp ne i32 %call434, 0
  br i1 %tobool435, label %land.lhs.true.436, label %if.else.1070

land.lhs.true.436:                                ; preds = %lor.lhs.false.420, %land.lhs.true.408
  %251 = load i32, i32* %maybe_never, align 4
  %tobool437 = icmp ne i32 %251, 0
  br i1 %tobool437, label %land.lhs.true.440, label %lor.lhs.false.438

lor.lhs.false.438:                                ; preds = %land.lhs.true.436
  %252 = load i32, i32* %call_passed, align 4
  %tobool439 = icmp ne i32 %252, 0
  br i1 %tobool439, label %land.lhs.true.440, label %if.then.443

land.lhs.true.440:                                ; preds = %lor.lhs.false.438, %land.lhs.true.436
  %253 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %call441 = call i32 @may_trap_p(%struct.rtx_def* %253)
  %tobool442 = icmp ne i32 %call441, 0
  br i1 %tobool442, label %if.else.1070, label %if.then.443

if.then.443:                                      ; preds = %land.lhs.true.440, %lor.lhs.false.438
  %254 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld444 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %254, i32 0, i32 1
  %arrayidx445 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld444, i32 0, i64 0
  %rtx446 = bitcast %union.rtunion_def* %arrayidx445 to %struct.rtx_def**
  %255 = load %struct.rtx_def*, %struct.rtx_def** %rtx446, align 8
  %fld447 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %255, i32 0, i32 1
  %arrayidx448 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld447, i32 0, i64 0
  %rtuint449 = bitcast %union.rtunion_def* %arrayidx448 to i32*
  %256 = load i32, i32* %rtuint449, align 4
  store i32 %256, i32* %regno, align 4
  %257 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %has_call450 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %257, i32 0, i32 0
  %258 = load i32, i32* %has_call450, align 4
  %tobool451 = icmp ne i32 %258, 0
  br i1 %tobool451, label %land.lhs.true.452, label %if.end.694

land.lhs.true.452:                                ; preds = %if.then.443
  %259 = load i32, i32* %regno, align 4
  %idxprom453 = sext i32 %259 to i64
  %260 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %array454 = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %260, i32 0, i32 2
  %261 = load %struct.loop_reg*, %struct.loop_reg** %array454, align 8
  %arrayidx455 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %261, i64 %idxprom453
  %single_usage = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %arrayidx455, i32 0, i32 2
  %262 = load %struct.rtx_def*, %struct.rtx_def** %single_usage, align 8
  %cmp456 = icmp ne %struct.rtx_def* %262, null
  br i1 %cmp456, label %land.lhs.true.458, label %if.end.694

land.lhs.true.458:                                ; preds = %land.lhs.true.452
  %263 = load i32, i32* %regno, align 4
  %idxprom459 = sext i32 %263 to i64
  %264 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %array460 = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %264, i32 0, i32 2
  %265 = load %struct.loop_reg*, %struct.loop_reg** %array460, align 8
  %arrayidx461 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %265, i64 %idxprom459
  %single_usage462 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %arrayidx461, i32 0, i32 2
  %266 = load %struct.rtx_def*, %struct.rtx_def** %single_usage462, align 8
  %267 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %cmp463 = icmp ne %struct.rtx_def* %266, %267
  br i1 %cmp463, label %land.lhs.true.465, label %if.end.694

land.lhs.true.465:                                ; preds = %land.lhs.true.458
  %268 = load i32, i32* %regno, align 4
  %idxprom466 = sext i32 %268 to i64
  %269 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %data = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %269, i32 0, i32 4
  %reg = bitcast %union.varray_data_tag* %data to [1 x %struct.reg_info_def*]*
  %arrayidx467 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %reg, i32 0, i64 %idxprom466
  %270 = load %struct.reg_info_def*, %struct.reg_info_def** %arrayidx467, align 8
  %first_uid = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %270, i32 0, i32 0
  %271 = load i32, i32* %first_uid, align 4
  %272 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld468 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %272, i32 0, i32 1
  %arrayidx469 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld468, i32 0, i64 0
  %rtint470 = bitcast %union.rtunion_def* %arrayidx469 to i32*
  %273 = load i32, i32* %rtint470, align 4
  %cmp471 = icmp eq i32 %271, %273
  br i1 %cmp471, label %land.lhs.true.473, label %if.end.694

land.lhs.true.473:                                ; preds = %land.lhs.true.465
  %274 = load i32, i32* %regno, align 4
  %idxprom474 = sext i32 %274 to i64
  %275 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %data475 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %275, i32 0, i32 4
  %reg476 = bitcast %union.varray_data_tag* %data475 to [1 x %struct.reg_info_def*]*
  %arrayidx477 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %reg476, i32 0, i64 %idxprom474
  %276 = load %struct.reg_info_def*, %struct.reg_info_def** %arrayidx477, align 8
  %last_uid = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %276, i32 0, i32 1
  %277 = load i32, i32* %last_uid, align 4
  %278 = load i32, i32* %regno, align 4
  %idxprom478 = sext i32 %278 to i64
  %279 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %array479 = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %279, i32 0, i32 2
  %280 = load %struct.loop_reg*, %struct.loop_reg** %array479, align 8
  %arrayidx480 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %280, i64 %idxprom478
  %single_usage481 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %arrayidx480, i32 0, i32 2
  %281 = load %struct.rtx_def*, %struct.rtx_def** %single_usage481, align 8
  %fld482 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %281, i32 0, i32 1
  %arrayidx483 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld482, i32 0, i64 0
  %rtint484 = bitcast %union.rtunion_def* %arrayidx483 to i32*
  %282 = load i32, i32* %rtint484, align 4
  %cmp485 = icmp eq i32 %277, %282
  br i1 %cmp485, label %land.lhs.true.487, label %if.end.694

land.lhs.true.487:                                ; preds = %land.lhs.true.473
  %283 = load i32, i32* %regno, align 4
  %idxprom488 = sext i32 %283 to i64
  %284 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %array489 = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %284, i32 0, i32 2
  %285 = load %struct.loop_reg*, %struct.loop_reg** %array489, align 8
  %arrayidx490 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %285, i64 %idxprom488
  %set_in_loop491 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %arrayidx490, i32 0, i32 0
  %286 = load i32, i32* %set_in_loop491, align 4
  %cmp492 = icmp eq i32 %286, 1
  br i1 %cmp492, label %land.lhs.true.494, label %if.end.694

land.lhs.true.494:                                ; preds = %land.lhs.true.487
  %287 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld495 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %287, i32 0, i32 1
  %arrayidx496 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld495, i32 0, i64 1
  %rtx497 = bitcast %union.rtunion_def* %arrayidx496 to %struct.rtx_def**
  %288 = load %struct.rtx_def*, %struct.rtx_def** %rtx497, align 8
  %289 = bitcast %struct.rtx_def* %288 to i32*
  %bf.load498 = load i32, i32* %289, align 8
  %bf.clear499 = and i32 %bf.load498, 65535
  %cmp500 = icmp ne i32 %bf.clear499, 41
  br i1 %cmp500, label %land.lhs.true.502, label %if.end.694

land.lhs.true.502:                                ; preds = %land.lhs.true.494
  %290 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld503 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %290, i32 0, i32 1
  %arrayidx504 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld503, i32 0, i64 1
  %rtx505 = bitcast %union.rtunion_def* %arrayidx504 to %struct.rtx_def**
  %291 = load %struct.rtx_def*, %struct.rtx_def** %rtx505, align 8
  %call506 = call i32 @side_effects_p(%struct.rtx_def* %291)
  %tobool507 = icmp ne i32 %call506, 0
  br i1 %tobool507, label %if.end.694, label %land.lhs.true.508

land.lhs.true.508:                                ; preds = %land.lhs.true.502
  %292 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %call509 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %292, i32 6, %struct.rtx_def* null)
  %tobool510 = icmp ne %struct.rtx_def* %call509, null
  br i1 %tobool510, label %if.end.694, label %land.lhs.true.511

land.lhs.true.511:                                ; preds = %land.lhs.true.508
  %293 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld512 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %293, i32 0, i32 1
  %arrayidx513 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld512, i32 0, i64 1
  %rtx514 = bitcast %union.rtunion_def* %arrayidx513 to %struct.rtx_def**
  %294 = load %struct.rtx_def*, %struct.rtx_def** %rtx514, align 8
  %295 = bitcast %struct.rtx_def* %294 to i32*
  %bf.load515 = load i32, i32* %295, align 8
  %bf.clear516 = and i32 %bf.load515, 65535
  %cmp517 = icmp eq i32 %bf.clear516, 61
  br i1 %cmp517, label %land.lhs.true.519, label %land.lhs.true.528

land.lhs.true.519:                                ; preds = %land.lhs.true.511
  %296 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld520 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %296, i32 0, i32 1
  %arrayidx521 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld520, i32 0, i64 1
  %rtx522 = bitcast %union.rtunion_def* %arrayidx521 to %struct.rtx_def**
  %297 = load %struct.rtx_def*, %struct.rtx_def** %rtx522, align 8
  %fld523 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %297, i32 0, i32 1
  %arrayidx524 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld523, i32 0, i64 0
  %rtuint525 = bitcast %union.rtunion_def* %arrayidx524 to i32*
  %298 = load i32, i32* %rtuint525, align 4
  %cmp526 = icmp ult i32 %298, 53
  br i1 %cmp526, label %if.end.694, label %land.lhs.true.528

land.lhs.true.528:                                ; preds = %land.lhs.true.519, %land.lhs.true.511
  %299 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld529 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %299, i32 0, i32 1
  %arrayidx530 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld529, i32 0, i64 1
  %rtx531 = bitcast %union.rtunion_def* %arrayidx530 to %struct.rtx_def**
  %300 = load %struct.rtx_def*, %struct.rtx_def** %rtx531, align 8
  %301 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %302 = load i32, i32* %regno, align 4
  %idxprom532 = sext i32 %302 to i64
  %303 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %array533 = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %303, i32 0, i32 2
  %304 = load %struct.loop_reg*, %struct.loop_reg** %array533, align 8
  %arrayidx534 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %304, i64 %idxprom532
  %single_usage535 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %arrayidx534, i32 0, i32 2
  %305 = load %struct.rtx_def*, %struct.rtx_def** %single_usage535, align 8
  %call536 = call i32 @modified_between_p(%struct.rtx_def* %300, %struct.rtx_def* %301, %struct.rtx_def* %305)
  %tobool537 = icmp ne i32 %call536, 0
  br i1 %tobool537, label %if.end.694, label %land.lhs.true.538

land.lhs.true.538:                                ; preds = %land.lhs.true.528
  %306 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %307 = load i32, i32* %regno, align 4
  %idxprom539 = sext i32 %307 to i64
  %308 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %array540 = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %308, i32 0, i32 2
  %309 = load %struct.loop_reg*, %struct.loop_reg** %array540, align 8
  %arrayidx541 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %309, i64 %idxprom539
  %single_usage542 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %arrayidx541, i32 0, i32 2
  %310 = load %struct.rtx_def*, %struct.rtx_def** %single_usage542, align 8
  %call543 = call i32 @no_labels_between_p(%struct.rtx_def* %306, %struct.rtx_def* %310)
  %tobool544 = icmp ne i32 %call543, 0
  br i1 %tobool544, label %land.lhs.true.545, label %if.end.694

land.lhs.true.545:                                ; preds = %land.lhs.true.538
  %311 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld546 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %311, i32 0, i32 1
  %arrayidx547 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld546, i32 0, i64 0
  %rtx548 = bitcast %union.rtunion_def* %arrayidx547 to %struct.rtx_def**
  %312 = load %struct.rtx_def*, %struct.rtx_def** %rtx548, align 8
  %313 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld549 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %313, i32 0, i32 1
  %arrayidx550 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld549, i32 0, i64 1
  %rtx551 = bitcast %union.rtunion_def* %arrayidx550 to %struct.rtx_def**
  %314 = load %struct.rtx_def*, %struct.rtx_def** %rtx551, align 8
  %315 = load i32, i32* %regno, align 4
  %idxprom552 = sext i32 %315 to i64
  %316 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %array553 = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %316, i32 0, i32 2
  %317 = load %struct.loop_reg*, %struct.loop_reg** %array553, align 8
  %arrayidx554 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %317, i64 %idxprom552
  %single_usage555 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %arrayidx554, i32 0, i32 2
  %318 = load %struct.rtx_def*, %struct.rtx_def** %single_usage555, align 8
  %call556 = call i32 @validate_replace_rtx(%struct.rtx_def* %312, %struct.rtx_def* %314, %struct.rtx_def* %318)
  %tobool557 = icmp ne i32 %call556, 0
  br i1 %tobool557, label %if.then.558, label %if.end.694

if.then.558:                                      ; preds = %land.lhs.true.545
  %319 = load i32, i32* %regno, align 4
  %idxprom559 = sext i32 %319 to i64
  %320 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %array560 = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %320, i32 0, i32 2
  %321 = load %struct.loop_reg*, %struct.loop_reg** %array560, align 8
  %arrayidx561 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %321, i64 %idxprom559
  %single_usage562 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %arrayidx561, i32 0, i32 2
  %322 = load %struct.rtx_def*, %struct.rtx_def** %single_usage562, align 8
  %fld563 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %322, i32 0, i32 1
  %arrayidx564 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld563, i32 0, i64 6
  %rtx565 = bitcast %union.rtunion_def* %arrayidx564 to %struct.rtx_def**
  %323 = load %struct.rtx_def*, %struct.rtx_def** %rtx565, align 8
  %324 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld566 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %324, i32 0, i32 1
  %arrayidx567 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld566, i32 0, i64 0
  %rtx568 = bitcast %union.rtunion_def* %arrayidx567 to %struct.rtx_def**
  %325 = load %struct.rtx_def*, %struct.rtx_def** %rtx568, align 8
  %326 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld569 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %326, i32 0, i32 1
  %arrayidx570 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld569, i32 0, i64 1
  %rtx571 = bitcast %union.rtunion_def* %arrayidx570 to %struct.rtx_def**
  %327 = load %struct.rtx_def*, %struct.rtx_def** %rtx571, align 8
  %call572 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %327)
  %call573 = call %struct.rtx_def* @replace_rtx(%struct.rtx_def* %323, %struct.rtx_def* %325, %struct.rtx_def* %call572)
  %328 = load i32, i32* %regno, align 4
  %idxprom574 = sext i32 %328 to i64
  %329 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %array575 = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %329, i32 0, i32 2
  %330 = load %struct.loop_reg*, %struct.loop_reg** %array575, align 8
  %arrayidx576 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %330, i64 %idxprom574
  %single_usage577 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %arrayidx576, i32 0, i32 2
  %331 = load %struct.rtx_def*, %struct.rtx_def** %single_usage577, align 8
  %fld578 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %331, i32 0, i32 1
  %arrayidx579 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld578, i32 0, i64 6
  %rtx580 = bitcast %union.rtunion_def* %arrayidx579 to %struct.rtx_def**
  store %struct.rtx_def* %call573, %struct.rtx_def** %rtx580, align 8
  %332 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %call581 = call %struct.rtx_def* @delete_insn(%struct.rtx_def* %332)
  store i32 0, i32* %i, align 4
  br label %for.cond.582

for.cond.582:                                     ; preds = %for.inc.691, %if.then.558
  %333 = load i32, i32* %i, align 4
  %334 = load i32, i32* %regno, align 4
  %cmp583 = icmp slt i32 %334, 53
  br i1 %cmp583, label %cond.true.585, label %cond.false.680

cond.true.585:                                    ; preds = %for.cond.582
  %335 = load i32, i32* %regno, align 4
  %cmp586 = icmp sge i32 %335, 8
  br i1 %cmp586, label %land.lhs.true.588, label %lor.lhs.false.591

land.lhs.true.588:                                ; preds = %cond.true.585
  %336 = load i32, i32* %regno, align 4
  %cmp589 = icmp sle i32 %336, 15
  br i1 %cmp589, label %cond.true.609, label %lor.lhs.false.591

lor.lhs.false.591:                                ; preds = %land.lhs.true.588, %cond.true.585
  %337 = load i32, i32* %regno, align 4
  %cmp592 = icmp sge i32 %337, 21
  br i1 %cmp592, label %land.lhs.true.594, label %lor.lhs.false.597

land.lhs.true.594:                                ; preds = %lor.lhs.false.591
  %338 = load i32, i32* %regno, align 4
  %cmp595 = icmp sle i32 %338, 28
  br i1 %cmp595, label %cond.true.609, label %lor.lhs.false.597

lor.lhs.false.597:                                ; preds = %land.lhs.true.594, %lor.lhs.false.591
  %339 = load i32, i32* %regno, align 4
  %cmp598 = icmp sge i32 %339, 45
  br i1 %cmp598, label %land.lhs.true.600, label %lor.lhs.false.603

land.lhs.true.600:                                ; preds = %lor.lhs.false.597
  %340 = load i32, i32* %regno, align 4
  %cmp601 = icmp sle i32 %340, 52
  br i1 %cmp601, label %cond.true.609, label %lor.lhs.false.603

lor.lhs.false.603:                                ; preds = %land.lhs.true.600, %lor.lhs.false.597
  %341 = load i32, i32* %regno, align 4
  %cmp604 = icmp sge i32 %341, 29
  br i1 %cmp604, label %land.lhs.true.606, label %cond.false.632

land.lhs.true.606:                                ; preds = %lor.lhs.false.603
  %342 = load i32, i32* %regno, align 4
  %cmp607 = icmp sle i32 %342, 36
  br i1 %cmp607, label %cond.true.609, label %cond.false.632

cond.true.609:                                    ; preds = %land.lhs.true.606, %land.lhs.true.600, %land.lhs.true.594, %land.lhs.true.588
  %343 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld610 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %343, i32 0, i32 1
  %arrayidx611 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld610, i32 0, i64 0
  %rtx612 = bitcast %union.rtunion_def* %arrayidx611 to %struct.rtx_def**
  %344 = load %struct.rtx_def*, %struct.rtx_def** %rtx612, align 8
  %345 = bitcast %struct.rtx_def* %344 to i32*
  %bf.load613 = load i32, i32* %345, align 8
  %bf.lshr = lshr i32 %bf.load613, 16
  %bf.clear614 = and i32 %bf.lshr, 255
  %idxprom615 = sext i32 %bf.clear614 to i64
  %arrayidx616 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom615
  %346 = load i32, i32* %arrayidx616, align 4
  %cmp617 = icmp eq i32 %346, 5
  br i1 %cmp617, label %lor.end.630, label %lor.rhs.619

lor.rhs.619:                                      ; preds = %cond.true.609
  %347 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld620 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %347, i32 0, i32 1
  %arrayidx621 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld620, i32 0, i64 0
  %rtx622 = bitcast %union.rtunion_def* %arrayidx621 to %struct.rtx_def**
  %348 = load %struct.rtx_def*, %struct.rtx_def** %rtx622, align 8
  %349 = bitcast %struct.rtx_def* %348 to i32*
  %bf.load623 = load i32, i32* %349, align 8
  %bf.lshr624 = lshr i32 %bf.load623, 16
  %bf.clear625 = and i32 %bf.lshr624, 255
  %idxprom626 = sext i32 %bf.clear625 to i64
  %arrayidx627 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom626
  %350 = load i32, i32* %arrayidx627, align 4
  %cmp628 = icmp eq i32 %350, 6
  br label %lor.end.630

lor.end.630:                                      ; preds = %lor.rhs.619, %cond.true.609
  %351 = phi i1 [ true, %cond.true.609 ], [ %cmp628, %lor.rhs.619 ]
  %cond631 = select i1 %351, i32 2, i32 1
  br label %cond.end.678

cond.false.632:                                   ; preds = %land.lhs.true.606, %lor.lhs.false.603
  %352 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld633 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %352, i32 0, i32 1
  %arrayidx634 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld633, i32 0, i64 0
  %rtx635 = bitcast %union.rtunion_def* %arrayidx634 to %struct.rtx_def**
  %353 = load %struct.rtx_def*, %struct.rtx_def** %rtx635, align 8
  %354 = bitcast %struct.rtx_def* %353 to i32*
  %bf.load636 = load i32, i32* %354, align 8
  %bf.lshr637 = lshr i32 %bf.load636, 16
  %bf.clear638 = and i32 %bf.lshr637, 255
  %cmp639 = icmp eq i32 %bf.clear638, 18
  br i1 %cmp639, label %cond.true.641, label %cond.false.644

cond.true.641:                                    ; preds = %cond.false.632
  %355 = load i32, i32* @target_flags, align 4
  %and = and i32 %355, 33554432
  %tobool642 = icmp ne i32 %and, 0
  %cond643 = select i1 %tobool642, i32 2, i32 3
  br label %cond.end.676

cond.false.644:                                   ; preds = %cond.false.632
  %356 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld645 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %356, i32 0, i32 1
  %arrayidx646 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld645, i32 0, i64 0
  %rtx647 = bitcast %union.rtunion_def* %arrayidx646 to %struct.rtx_def**
  %357 = load %struct.rtx_def*, %struct.rtx_def** %rtx647, align 8
  %358 = bitcast %struct.rtx_def* %357 to i32*
  %bf.load648 = load i32, i32* %358, align 8
  %bf.lshr649 = lshr i32 %bf.load648, 16
  %bf.clear650 = and i32 %bf.lshr649, 255
  %cmp651 = icmp eq i32 %bf.clear650, 24
  br i1 %cmp651, label %cond.true.653, label %cond.false.657

cond.true.653:                                    ; preds = %cond.false.644
  %359 = load i32, i32* @target_flags, align 4
  %and654 = and i32 %359, 33554432
  %tobool655 = icmp ne i32 %and654, 0
  %cond656 = select i1 %tobool655, i32 4, i32 6
  br label %cond.end.674

cond.false.657:                                   ; preds = %cond.false.644
  %360 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld658 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %360, i32 0, i32 1
  %arrayidx659 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld658, i32 0, i64 0
  %rtx660 = bitcast %union.rtunion_def* %arrayidx659 to %struct.rtx_def**
  %361 = load %struct.rtx_def*, %struct.rtx_def** %rtx660, align 8
  %362 = bitcast %struct.rtx_def* %361 to i32*
  %bf.load661 = load i32, i32* %362, align 8
  %bf.lshr662 = lshr i32 %bf.load661, 16
  %bf.clear663 = and i32 %bf.lshr662, 255
  %idxprom664 = sext i32 %bf.clear663 to i64
  %arrayidx665 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom664
  %363 = load i8, i8* %arrayidx665, align 1
  %conv666 = zext i8 %363 to i32
  %364 = load i32, i32* @target_flags, align 4
  %and667 = and i32 %364, 33554432
  %tobool668 = icmp ne i32 %and667, 0
  %cond669 = select i1 %tobool668, i32 8, i32 4
  %add670 = add nsw i32 %conv666, %cond669
  %sub = sub nsw i32 %add670, 1
  %365 = load i32, i32* @target_flags, align 4
  %and671 = and i32 %365, 33554432
  %tobool672 = icmp ne i32 %and671, 0
  %cond673 = select i1 %tobool672, i32 8, i32 4
  %div = sdiv i32 %sub, %cond673
  br label %cond.end.674

cond.end.674:                                     ; preds = %cond.false.657, %cond.true.653
  %cond675 = phi i32 [ %cond656, %cond.true.653 ], [ %div, %cond.false.657 ]
  br label %cond.end.676

cond.end.676:                                     ; preds = %cond.end.674, %cond.true.641
  %cond677 = phi i32 [ %cond643, %cond.true.641 ], [ %cond675, %cond.end.674 ]
  br label %cond.end.678

cond.end.678:                                     ; preds = %cond.end.676, %lor.end.630
  %cond679 = phi i32 [ %cond631, %lor.end.630 ], [ %cond677, %cond.end.676 ]
  br label %cond.end.681

cond.false.680:                                   ; preds = %for.cond.582
  br label %cond.end.681

cond.end.681:                                     ; preds = %cond.false.680, %cond.end.678
  %cond682 = phi i32 [ %cond679, %cond.end.678 ], [ 1, %cond.false.680 ]
  %cmp683 = icmp slt i32 %333, %cond682
  br i1 %cmp683, label %for.body.685, label %for.end.693

for.body.685:                                     ; preds = %cond.end.681
  %366 = load i32, i32* %regno, align 4
  %367 = load i32, i32* %i, align 4
  %add686 = add nsw i32 %366, %367
  %idxprom687 = sext i32 %add686 to i64
  %368 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %array688 = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %368, i32 0, i32 2
  %369 = load %struct.loop_reg*, %struct.loop_reg** %array688, align 8
  %arrayidx689 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %369, i64 %idxprom687
  %set_in_loop690 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %arrayidx689, i32 0, i32 0
  store i32 0, i32* %set_in_loop690, align 4
  br label %for.inc.691

for.inc.691:                                      ; preds = %for.body.685
  %370 = load i32, i32* %i, align 4
  %inc692 = add nsw i32 %370, 1
  store i32 %inc692, i32* %i, align 4
  br label %for.cond.582

for.end.693:                                      ; preds = %cond.end.681
  br label %for.inc.1543

if.end.694:                                       ; preds = %land.lhs.true.545, %land.lhs.true.538, %land.lhs.true.528, %land.lhs.true.519, %land.lhs.true.508, %land.lhs.true.502, %land.lhs.true.494, %land.lhs.true.487, %land.lhs.true.473, %land.lhs.true.465, %land.lhs.true.458, %land.lhs.true.452, %if.then.443
  %call695 = call noalias i8* @xmalloc(i64 80)
  %371 = bitcast i8* %call695 to %struct.movable*
  store %struct.movable* %371, %struct.movable** %m, align 8
  %372 = load %struct.movable*, %struct.movable** %m, align 8
  %next = getelementptr inbounds %struct.movable, %struct.movable* %372, i32 0, i32 12
  store %struct.movable* null, %struct.movable** %next, align 8
  %373 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %374 = load %struct.movable*, %struct.movable** %m, align 8
  %insn = getelementptr inbounds %struct.movable, %struct.movable* %374, i32 0, i32 0
  store %struct.rtx_def* %373, %struct.rtx_def** %insn, align 8
  %375 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %376 = load %struct.movable*, %struct.movable** %m, align 8
  %set_src = getelementptr inbounds %struct.movable, %struct.movable* %376, i32 0, i32 1
  store %struct.rtx_def* %375, %struct.rtx_def** %set_src, align 8
  %377 = load %struct.rtx_def*, %struct.rtx_def** %dependencies, align 8
  %378 = load %struct.movable*, %struct.movable** %m, align 8
  %dependencies696 = getelementptr inbounds %struct.movable, %struct.movable* %378, i32 0, i32 3
  store %struct.rtx_def* %377, %struct.rtx_def** %dependencies696, align 8
  %379 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld697 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %379, i32 0, i32 1
  %arrayidx698 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld697, i32 0, i64 0
  %rtx699 = bitcast %union.rtunion_def* %arrayidx698 to %struct.rtx_def**
  %380 = load %struct.rtx_def*, %struct.rtx_def** %rtx699, align 8
  %381 = load %struct.movable*, %struct.movable** %m, align 8
  %set_dest = getelementptr inbounds %struct.movable, %struct.movable* %381, i32 0, i32 2
  store %struct.rtx_def* %380, %struct.rtx_def** %set_dest, align 8
  %382 = load %struct.movable*, %struct.movable** %m, align 8
  %force = getelementptr inbounds %struct.movable, %struct.movable* %382, i32 0, i32 8
  %bf.load700 = load i8, i8* %force, align 4
  %bf.clear701 = and i8 %bf.load700, -3
  store i8 %bf.clear701, i8* %force, align 4
  %383 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld702 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %383, i32 0, i32 1
  %arrayidx703 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld702, i32 0, i64 0
  %rtx704 = bitcast %union.rtunion_def* %arrayidx703 to %struct.rtx_def**
  %384 = load %struct.rtx_def*, %struct.rtx_def** %rtx704, align 8
  %fld705 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %384, i32 0, i32 1
  %arrayidx706 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld705, i32 0, i64 0
  %rtuint707 = bitcast %union.rtunion_def* %arrayidx706 to i32*
  %385 = load i32, i32* %rtuint707, align 4
  %idxprom708 = zext i32 %385 to i64
  %386 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %array709 = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %386, i32 0, i32 2
  %387 = load %struct.loop_reg*, %struct.loop_reg** %array709, align 8
  %arrayidx710 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %387, i64 %idxprom708
  %set_in_loop711 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %arrayidx710, i32 0, i32 0
  %388 = load i32, i32* %set_in_loop711, align 4
  %sub712 = sub nsw i32 %388, 1
  %389 = load %struct.movable*, %struct.movable** %m, align 8
  %consec = getelementptr inbounds %struct.movable, %struct.movable* %389, i32 0, i32 4
  store i32 %sub712, i32* %consec, align 4
  %390 = load %struct.movable*, %struct.movable** %m, align 8
  %done = getelementptr inbounds %struct.movable, %struct.movable* %390, i32 0, i32 8
  %bf.load713 = load i8, i8* %done, align 4
  %bf.clear714 = and i8 %bf.load713, -9
  store i8 %bf.clear714, i8* %done, align 4
  %391 = load %struct.movable*, %struct.movable** %m, align 8
  %forces = getelementptr inbounds %struct.movable, %struct.movable* %391, i32 0, i32 11
  store %struct.movable* null, %struct.movable** %forces, align 8
  %392 = load %struct.movable*, %struct.movable** %m, align 8
  %partial = getelementptr inbounds %struct.movable, %struct.movable* %392, i32 0, i32 8
  %bf.load715 = load i8, i8* %partial, align 4
  %bf.clear716 = and i8 %bf.load715, -17
  store i8 %bf.clear716, i8* %partial, align 4
  %393 = load i32, i32* %move_insn, align 4
  %394 = load %struct.movable*, %struct.movable** %m, align 8
  %move_insn717 = getelementptr inbounds %struct.movable, %struct.movable* %394, i32 0, i32 8
  %395 = trunc i32 %393 to i8
  %bf.load718 = load i8, i8* %move_insn717, align 4
  %bf.value = and i8 %395, 1
  %bf.shl = shl i8 %bf.value, 5
  %bf.clear719 = and i8 %bf.load718, -33
  %bf.set = or i8 %bf.clear719, %bf.shl
  store i8 %bf.set, i8* %move_insn717, align 4
  %bf.result.cast = zext i8 %bf.value to i32
  %396 = load %struct.movable*, %struct.movable** %m, align 8
  %move_insn_first = getelementptr inbounds %struct.movable, %struct.movable* %396, i32 0, i32 8
  %bf.load720 = load i8, i8* %move_insn_first, align 4
  %bf.clear721 = and i8 %bf.load720, -65
  store i8 %bf.clear721, i8* %move_insn_first, align 4
  %397 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %call722 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %397, i32 3, %struct.rtx_def* null)
  %cmp723 = icmp ne %struct.rtx_def* %call722, null
  %conv724 = zext i1 %cmp723 to i32
  %398 = load %struct.movable*, %struct.movable** %m, align 8
  %is_equiv = getelementptr inbounds %struct.movable, %struct.movable* %398, i32 0, i32 8
  %399 = trunc i32 %conv724 to i8
  %bf.load725 = load i8, i8* %is_equiv, align 4
  %bf.value726 = and i8 %399, 1
  %bf.shl727 = shl i8 %bf.value726, 7
  %bf.clear728 = and i8 %bf.load725, 127
  %bf.set729 = or i8 %bf.clear728, %bf.shl727
  store i8 %bf.set729, i8* %is_equiv, align 4
  %bf.result.cast730 = zext i8 %bf.value726 to i32
  %400 = load %struct.movable*, %struct.movable** %m, align 8
  %savemode = getelementptr inbounds %struct.movable, %struct.movable* %400, i32 0, i32 9
  store i32 0, i32* %savemode, align 4
  %401 = load i32, i32* %regno, align 4
  %402 = load %struct.movable*, %struct.movable** %m, align 8
  %regno731 = getelementptr inbounds %struct.movable, %struct.movable* %402, i32 0, i32 5
  store i32 %401, i32* %regno731, align 4
  %403 = load i32, i32* %tem, align 4
  %404 = load i32, i32* %tem1, align 4
  %or = or i32 %403, %404
  %405 = load i32, i32* %tem2, align 4
  %or732 = or i32 %or, %405
  %cmp733 = icmp sgt i32 %or732, 1
  %conv734 = zext i1 %cmp733 to i32
  %406 = load %struct.movable*, %struct.movable** %m, align 8
  %cond735 = getelementptr inbounds %struct.movable, %struct.movable* %406, i32 0, i32 8
  %407 = trunc i32 %conv734 to i8
  %bf.load736 = load i8, i8* %cond735, align 4
  %bf.value737 = and i8 %407, 1
  %bf.clear738 = and i8 %bf.load736, -2
  %bf.set739 = or i8 %bf.clear738, %bf.value737
  store i8 %bf.set739, i8* %cond735, align 4
  %bf.result.cast740 = zext i8 %bf.value737 to i32
  %408 = load i32, i32* %regno, align 4
  %idxprom741 = sext i32 %408 to i64
  %409 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %data742 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %409, i32 0, i32 4
  %reg743 = bitcast %union.varray_data_tag* %data742 to [1 x %struct.reg_info_def*]*
  %arrayidx744 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %reg743, i32 0, i64 %idxprom741
  %410 = load %struct.reg_info_def*, %struct.reg_info_def** %arrayidx744, align 8
  %last_uid745 = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %410, i32 0, i32 1
  %411 = load i32, i32* %last_uid745, align 4
  %idxprom746 = sext i32 %411 to i64
  %412 = load i32*, i32** @uid_luid, align 8
  %arrayidx747 = getelementptr inbounds i32, i32* %412, i64 %idxprom746
  %413 = load i32, i32* %arrayidx747, align 4
  %414 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %end748 = getelementptr inbounds %struct.loop, %struct.loop* %414, i32 0, i32 27
  %415 = load %struct.rtx_def*, %struct.rtx_def** %end748, align 8
  %fld749 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %415, i32 0, i32 1
  %arrayidx750 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld749, i32 0, i64 0
  %rtint751 = bitcast %union.rtunion_def* %arrayidx750 to i32*
  %416 = load i32, i32* %rtint751, align 4
  %417 = load i32, i32* @max_uid_for_loop, align 4
  %cmp752 = icmp slt i32 %416, %417
  br i1 %cmp752, label %cond.true.754, label %cond.false.761

cond.true.754:                                    ; preds = %if.end.694
  %418 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %end755 = getelementptr inbounds %struct.loop, %struct.loop* %418, i32 0, i32 27
  %419 = load %struct.rtx_def*, %struct.rtx_def** %end755, align 8
  %fld756 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %419, i32 0, i32 1
  %arrayidx757 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld756, i32 0, i64 0
  %rtint758 = bitcast %union.rtunion_def* %arrayidx757 to i32*
  %420 = load i32, i32* %rtint758, align 4
  %idxprom759 = sext i32 %420 to i64
  %421 = load i32*, i32** @uid_luid, align 8
  %arrayidx760 = getelementptr inbounds i32, i32* %421, i64 %idxprom759
  %422 = load i32, i32* %arrayidx760, align 4
  br label %cond.end.762

cond.false.761:                                   ; preds = %if.end.694
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 931, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @__FUNCTION__.scan_loop, i32 0, i32 0)) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end.762

cond.end.762:                                     ; preds = %423, %cond.true.754
  %cond763 = phi i32 [ %422, %cond.true.754 ], [ -1, %423 ]
  %cmp764 = icmp sgt i32 %413, %cond763
  br i1 %cmp764, label %lor.end.792, label %lor.rhs.766

lor.rhs.766:                                      ; preds = %cond.end.762
  %424 = load i32, i32* %regno, align 4
  %idxprom767 = sext i32 %424 to i64
  %425 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %data768 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %425, i32 0, i32 4
  %reg769 = bitcast %union.varray_data_tag* %data768 to [1 x %struct.reg_info_def*]*
  %arrayidx770 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %reg769, i32 0, i64 %idxprom767
  %426 = load %struct.reg_info_def*, %struct.reg_info_def** %arrayidx770, align 8
  %first_uid771 = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %426, i32 0, i32 0
  %427 = load i32, i32* %first_uid771, align 4
  %idxprom772 = sext i32 %427 to i64
  %428 = load i32*, i32** @uid_luid, align 8
  %arrayidx773 = getelementptr inbounds i32, i32* %428, i64 %idxprom772
  %429 = load i32, i32* %arrayidx773, align 4
  %430 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %start774 = getelementptr inbounds %struct.loop, %struct.loop* %430, i32 0, i32 26
  %431 = load %struct.rtx_def*, %struct.rtx_def** %start774, align 8
  %fld775 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %431, i32 0, i32 1
  %arrayidx776 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld775, i32 0, i64 0
  %rtint777 = bitcast %union.rtunion_def* %arrayidx776 to i32*
  %432 = load i32, i32* %rtint777, align 4
  %433 = load i32, i32* @max_uid_for_loop, align 4
  %cmp778 = icmp slt i32 %432, %433
  br i1 %cmp778, label %cond.true.780, label %cond.false.787

cond.true.780:                                    ; preds = %lor.rhs.766
  %434 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %start781 = getelementptr inbounds %struct.loop, %struct.loop* %434, i32 0, i32 26
  %435 = load %struct.rtx_def*, %struct.rtx_def** %start781, align 8
  %fld782 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %435, i32 0, i32 1
  %arrayidx783 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld782, i32 0, i64 0
  %rtint784 = bitcast %union.rtunion_def* %arrayidx783 to i32*
  %436 = load i32, i32* %rtint784, align 4
  %idxprom785 = sext i32 %436 to i64
  %437 = load i32*, i32** @uid_luid, align 8
  %arrayidx786 = getelementptr inbounds i32, i32* %437, i64 %idxprom785
  %438 = load i32, i32* %arrayidx786, align 4
  br label %cond.end.788

cond.false.787:                                   ; preds = %lor.rhs.766
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 931, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @__FUNCTION__.scan_loop, i32 0, i32 0)) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end.788

cond.end.788:                                     ; preds = %439, %cond.true.780
  %cond789 = phi i32 [ %438, %cond.true.780 ], [ -1, %439 ]
  %cmp790 = icmp slt i32 %429, %cond789
  br label %lor.end.792

lor.end.792:                                      ; preds = %cond.end.788, %cond.end.762
  %440 = phi i1 [ true, %cond.end.762 ], [ %cmp790, %cond.end.788 ]
  %lor.ext = zext i1 %440 to i32
  %441 = load %struct.movable*, %struct.movable** %m, align 8
  %global = getelementptr inbounds %struct.movable, %struct.movable* %441, i32 0, i32 8
  %442 = trunc i32 %lor.ext to i8
  %bf.load793 = load i8, i8* %global, align 4
  %bf.value794 = and i8 %442, 1
  %bf.shl795 = shl i8 %bf.value794, 2
  %bf.clear796 = and i8 %bf.load793, -5
  %bf.set797 = or i8 %bf.clear796, %bf.shl795
  store i8 %bf.set797, i8* %global, align 4
  %bf.result.cast798 = zext i8 %bf.value794 to i32
  %443 = load %struct.movable*, %struct.movable** %m, align 8
  %match = getelementptr inbounds %struct.movable, %struct.movable* %443, i32 0, i32 10
  store %struct.movable* null, %struct.movable** %match, align 8
  %444 = load i32, i32* %regno, align 4
  %idxprom799 = sext i32 %444 to i64
  %445 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %data800 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %445, i32 0, i32 4
  %reg801 = bitcast %union.varray_data_tag* %data800 to [1 x %struct.reg_info_def*]*
  %arrayidx802 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %reg801, i32 0, i64 %idxprom799
  %446 = load %struct.reg_info_def*, %struct.reg_info_def** %arrayidx802, align 8
  %last_uid803 = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %446, i32 0, i32 1
  %447 = load i32, i32* %last_uid803, align 4
  %idxprom804 = sext i32 %447 to i64
  %448 = load i32*, i32** @uid_luid, align 8
  %arrayidx805 = getelementptr inbounds i32, i32* %448, i64 %idxprom804
  %449 = load i32, i32* %arrayidx805, align 4
  %450 = load i32, i32* %regno, align 4
  %idxprom806 = sext i32 %450 to i64
  %451 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %data807 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %451, i32 0, i32 4
  %reg808 = bitcast %union.varray_data_tag* %data807 to [1 x %struct.reg_info_def*]*
  %arrayidx809 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %reg808, i32 0, i64 %idxprom806
  %452 = load %struct.reg_info_def*, %struct.reg_info_def** %arrayidx809, align 8
  %first_uid810 = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %452, i32 0, i32 0
  %453 = load i32, i32* %first_uid810, align 4
  %idxprom811 = sext i32 %453 to i64
  %454 = load i32*, i32** @uid_luid, align 8
  %arrayidx812 = getelementptr inbounds i32, i32* %454, i64 %idxprom811
  %455 = load i32, i32* %arrayidx812, align 4
  %sub813 = sub nsw i32 %449, %455
  %conv814 = trunc i32 %sub813 to i16
  %456 = load %struct.movable*, %struct.movable** %m, align 8
  %lifetime = getelementptr inbounds %struct.movable, %struct.movable* %456, i32 0, i32 6
  store i16 %conv814, i16* %lifetime, align 2
  %457 = load i32, i32* %regno, align 4
  %idxprom815 = sext i32 %457 to i64
  %458 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %array816 = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %458, i32 0, i32 2
  %459 = load %struct.loop_reg*, %struct.loop_reg** %array816, align 8
  %arrayidx817 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %459, i64 %idxprom815
  %n_times_set = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %arrayidx817, i32 0, i32 1
  %460 = load i32, i32* %n_times_set, align 4
  %conv818 = trunc i32 %460 to i16
  %461 = load %struct.movable*, %struct.movable** %m, align 8
  %savings = getelementptr inbounds %struct.movable, %struct.movable* %461, i32 0, i32 7
  store i16 %conv818, i16* %savings, align 2
  %462 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %call819 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %462, i32 6, %struct.rtx_def* null)
  %tobool820 = icmp ne %struct.rtx_def* %call819, null
  br i1 %tobool820, label %if.then.821, label %if.end.827

if.then.821:                                      ; preds = %lor.end.792
  %463 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %call822 = call i32 @libcall_benefit(%struct.rtx_def* %463)
  %464 = load %struct.movable*, %struct.movable** %m, align 8
  %savings823 = getelementptr inbounds %struct.movable, %struct.movable* %464, i32 0, i32 7
  %465 = load i16, i16* %savings823, align 2
  %conv824 = sext i16 %465 to i32
  %add825 = add nsw i32 %conv824, %call822
  %conv826 = trunc i32 %add825 to i16
  store i16 %conv826, i16* %savings823, align 2
  br label %if.end.827

if.end.827:                                       ; preds = %if.then.821, %lor.end.792
  store i32 0, i32* %i, align 4
  br label %for.cond.828

for.cond.828:                                     ; preds = %for.inc.944, %if.end.827
  %466 = load i32, i32* %i, align 4
  %467 = load i32, i32* %regno, align 4
  %cmp829 = icmp slt i32 %467, 53
  br i1 %cmp829, label %cond.true.831, label %cond.false.931

cond.true.831:                                    ; preds = %for.cond.828
  %468 = load i32, i32* %regno, align 4
  %cmp832 = icmp sge i32 %468, 8
  br i1 %cmp832, label %land.lhs.true.834, label %lor.lhs.false.837

land.lhs.true.834:                                ; preds = %cond.true.831
  %469 = load i32, i32* %regno, align 4
  %cmp835 = icmp sle i32 %469, 15
  br i1 %cmp835, label %cond.true.855, label %lor.lhs.false.837

lor.lhs.false.837:                                ; preds = %land.lhs.true.834, %cond.true.831
  %470 = load i32, i32* %regno, align 4
  %cmp838 = icmp sge i32 %470, 21
  br i1 %cmp838, label %land.lhs.true.840, label %lor.lhs.false.843

land.lhs.true.840:                                ; preds = %lor.lhs.false.837
  %471 = load i32, i32* %regno, align 4
  %cmp841 = icmp sle i32 %471, 28
  br i1 %cmp841, label %cond.true.855, label %lor.lhs.false.843

lor.lhs.false.843:                                ; preds = %land.lhs.true.840, %lor.lhs.false.837
  %472 = load i32, i32* %regno, align 4
  %cmp844 = icmp sge i32 %472, 45
  br i1 %cmp844, label %land.lhs.true.846, label %lor.lhs.false.849

land.lhs.true.846:                                ; preds = %lor.lhs.false.843
  %473 = load i32, i32* %regno, align 4
  %cmp847 = icmp sle i32 %473, 52
  br i1 %cmp847, label %cond.true.855, label %lor.lhs.false.849

lor.lhs.false.849:                                ; preds = %land.lhs.true.846, %lor.lhs.false.843
  %474 = load i32, i32* %regno, align 4
  %cmp850 = icmp sge i32 %474, 29
  br i1 %cmp850, label %land.lhs.true.852, label %cond.false.880

land.lhs.true.852:                                ; preds = %lor.lhs.false.849
  %475 = load i32, i32* %regno, align 4
  %cmp853 = icmp sle i32 %475, 36
  br i1 %cmp853, label %cond.true.855, label %cond.false.880

cond.true.855:                                    ; preds = %land.lhs.true.852, %land.lhs.true.846, %land.lhs.true.840, %land.lhs.true.834
  %476 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld856 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %476, i32 0, i32 1
  %arrayidx857 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld856, i32 0, i64 0
  %rtx858 = bitcast %union.rtunion_def* %arrayidx857 to %struct.rtx_def**
  %477 = load %struct.rtx_def*, %struct.rtx_def** %rtx858, align 8
  %478 = bitcast %struct.rtx_def* %477 to i32*
  %bf.load859 = load i32, i32* %478, align 8
  %bf.lshr860 = lshr i32 %bf.load859, 16
  %bf.clear861 = and i32 %bf.lshr860, 255
  %idxprom862 = sext i32 %bf.clear861 to i64
  %arrayidx863 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom862
  %479 = load i32, i32* %arrayidx863, align 4
  %cmp864 = icmp eq i32 %479, 5
  br i1 %cmp864, label %lor.end.877, label %lor.rhs.866

lor.rhs.866:                                      ; preds = %cond.true.855
  %480 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld867 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %480, i32 0, i32 1
  %arrayidx868 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld867, i32 0, i64 0
  %rtx869 = bitcast %union.rtunion_def* %arrayidx868 to %struct.rtx_def**
  %481 = load %struct.rtx_def*, %struct.rtx_def** %rtx869, align 8
  %482 = bitcast %struct.rtx_def* %481 to i32*
  %bf.load870 = load i32, i32* %482, align 8
  %bf.lshr871 = lshr i32 %bf.load870, 16
  %bf.clear872 = and i32 %bf.lshr871, 255
  %idxprom873 = sext i32 %bf.clear872 to i64
  %arrayidx874 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom873
  %483 = load i32, i32* %arrayidx874, align 4
  %cmp875 = icmp eq i32 %483, 6
  br label %lor.end.877

lor.end.877:                                      ; preds = %lor.rhs.866, %cond.true.855
  %484 = phi i1 [ true, %cond.true.855 ], [ %cmp875, %lor.rhs.866 ]
  %cond879 = select i1 %484, i32 2, i32 1
  br label %cond.end.929

cond.false.880:                                   ; preds = %land.lhs.true.852, %lor.lhs.false.849
  %485 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld881 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %485, i32 0, i32 1
  %arrayidx882 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld881, i32 0, i64 0
  %rtx883 = bitcast %union.rtunion_def* %arrayidx882 to %struct.rtx_def**
  %486 = load %struct.rtx_def*, %struct.rtx_def** %rtx883, align 8
  %487 = bitcast %struct.rtx_def* %486 to i32*
  %bf.load884 = load i32, i32* %487, align 8
  %bf.lshr885 = lshr i32 %bf.load884, 16
  %bf.clear886 = and i32 %bf.lshr885, 255
  %cmp887 = icmp eq i32 %bf.clear886, 18
  br i1 %cmp887, label %cond.true.889, label %cond.false.893

cond.true.889:                                    ; preds = %cond.false.880
  %488 = load i32, i32* @target_flags, align 4
  %and890 = and i32 %488, 33554432
  %tobool891 = icmp ne i32 %and890, 0
  %cond892 = select i1 %tobool891, i32 2, i32 3
  br label %cond.end.927

cond.false.893:                                   ; preds = %cond.false.880
  %489 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld894 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %489, i32 0, i32 1
  %arrayidx895 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld894, i32 0, i64 0
  %rtx896 = bitcast %union.rtunion_def* %arrayidx895 to %struct.rtx_def**
  %490 = load %struct.rtx_def*, %struct.rtx_def** %rtx896, align 8
  %491 = bitcast %struct.rtx_def* %490 to i32*
  %bf.load897 = load i32, i32* %491, align 8
  %bf.lshr898 = lshr i32 %bf.load897, 16
  %bf.clear899 = and i32 %bf.lshr898, 255
  %cmp900 = icmp eq i32 %bf.clear899, 24
  br i1 %cmp900, label %cond.true.902, label %cond.false.906

cond.true.902:                                    ; preds = %cond.false.893
  %492 = load i32, i32* @target_flags, align 4
  %and903 = and i32 %492, 33554432
  %tobool904 = icmp ne i32 %and903, 0
  %cond905 = select i1 %tobool904, i32 4, i32 6
  br label %cond.end.925

cond.false.906:                                   ; preds = %cond.false.893
  %493 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld907 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %493, i32 0, i32 1
  %arrayidx908 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld907, i32 0, i64 0
  %rtx909 = bitcast %union.rtunion_def* %arrayidx908 to %struct.rtx_def**
  %494 = load %struct.rtx_def*, %struct.rtx_def** %rtx909, align 8
  %495 = bitcast %struct.rtx_def* %494 to i32*
  %bf.load910 = load i32, i32* %495, align 8
  %bf.lshr911 = lshr i32 %bf.load910, 16
  %bf.clear912 = and i32 %bf.lshr911, 255
  %idxprom913 = sext i32 %bf.clear912 to i64
  %arrayidx914 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom913
  %496 = load i8, i8* %arrayidx914, align 1
  %conv915 = zext i8 %496 to i32
  %497 = load i32, i32* @target_flags, align 4
  %and916 = and i32 %497, 33554432
  %tobool917 = icmp ne i32 %and916, 0
  %cond918 = select i1 %tobool917, i32 8, i32 4
  %add919 = add nsw i32 %conv915, %cond918
  %sub920 = sub nsw i32 %add919, 1
  %498 = load i32, i32* @target_flags, align 4
  %and921 = and i32 %498, 33554432
  %tobool922 = icmp ne i32 %and921, 0
  %cond923 = select i1 %tobool922, i32 8, i32 4
  %div924 = sdiv i32 %sub920, %cond923
  br label %cond.end.925

cond.end.925:                                     ; preds = %cond.false.906, %cond.true.902
  %cond926 = phi i32 [ %cond905, %cond.true.902 ], [ %div924, %cond.false.906 ]
  br label %cond.end.927

cond.end.927:                                     ; preds = %cond.end.925, %cond.true.889
  %cond928 = phi i32 [ %cond892, %cond.true.889 ], [ %cond926, %cond.end.925 ]
  br label %cond.end.929

cond.end.929:                                     ; preds = %cond.end.927, %lor.end.877
  %cond930 = phi i32 [ %cond879, %lor.end.877 ], [ %cond928, %cond.end.927 ]
  br label %cond.end.932

cond.false.931:                                   ; preds = %for.cond.828
  br label %cond.end.932

cond.end.932:                                     ; preds = %cond.false.931, %cond.end.929
  %cond933 = phi i32 [ %cond930, %cond.end.929 ], [ 1, %cond.false.931 ]
  %cmp934 = icmp slt i32 %466, %cond933
  br i1 %cmp934, label %for.body.936, label %for.end.946

for.body.936:                                     ; preds = %cond.end.932
  %499 = load i32, i32* %move_insn, align 4
  %tobool937 = icmp ne i32 %499, 0
  %cond938 = select i1 %tobool937, i32 -2, i32 -1
  %500 = load i32, i32* %regno, align 4
  %501 = load i32, i32* %i, align 4
  %add939 = add nsw i32 %500, %501
  %idxprom940 = sext i32 %add939 to i64
  %502 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %array941 = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %502, i32 0, i32 2
  %503 = load %struct.loop_reg*, %struct.loop_reg** %array941, align 8
  %arrayidx942 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %503, i64 %idxprom940
  %set_in_loop943 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %arrayidx942, i32 0, i32 0
  store i32 %cond938, i32* %set_in_loop943, align 4
  br label %for.inc.944

for.inc.944:                                      ; preds = %for.body.936
  %504 = load i32, i32* %i, align 4
  %inc945 = add nsw i32 %504, 1
  store i32 %inc945, i32* %i, align 4
  br label %for.cond.828

for.end.946:                                      ; preds = %cond.end.932
  %505 = load %struct.loop_movables*, %struct.loop_movables** %movables, align 8
  %506 = load %struct.movable*, %struct.movable** %m, align 8
  call void @loop_movables_add(%struct.loop_movables* %505, %struct.movable* %506)
  %507 = load %struct.movable*, %struct.movable** %m, align 8
  %consec947 = getelementptr inbounds %struct.movable, %struct.movable* %507, i32 0, i32 4
  %508 = load i32, i32* %consec947, align 4
  %cmp948 = icmp sgt i32 %508, 0
  br i1 %cmp948, label %if.then.950, label %if.end.1069

if.then.950:                                      ; preds = %for.end.946
  %509 = load %struct.movable*, %struct.movable** %m, align 8
  %move_insn951 = getelementptr inbounds %struct.movable, %struct.movable* %509, i32 0, i32 8
  %bf.load952 = load i8, i8* %move_insn951, align 4
  %bf.lshr953 = lshr i8 %bf.load952, 5
  %bf.clear954 = and i8 %bf.lshr953, 1
  %bf.cast = zext i8 %bf.clear954 to i32
  %510 = load %struct.movable*, %struct.movable** %m, align 8
  %move_insn_first955 = getelementptr inbounds %struct.movable, %struct.movable* %510, i32 0, i32 8
  %511 = trunc i32 %bf.cast to i8
  %bf.load956 = load i8, i8* %move_insn_first955, align 4
  %bf.value957 = and i8 %511, 1
  %bf.shl958 = shl i8 %bf.value957, 6
  %bf.clear959 = and i8 %bf.load956, -65
  %bf.set960 = or i8 %bf.clear959, %bf.shl958
  store i8 %bf.set960, i8* %move_insn_first955, align 4
  %bf.result.cast961 = zext i8 %bf.value957 to i32
  %512 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %call962 = call %struct.rtx_def* @next_nonnote_insn(%struct.rtx_def* %512)
  store %struct.rtx_def* %call962, %struct.rtx_def** %p, align 8
  %513 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %514 = load %struct.movable*, %struct.movable** %m, align 8
  %consec963 = getelementptr inbounds %struct.movable, %struct.movable* %514, i32 0, i32 4
  %515 = load i32, i32* %consec963, align 4
  %call964 = call %struct.rtx_def* @skip_consec_insns(%struct.rtx_def* %513, i32 %515)
  store %struct.rtx_def* %call964, %struct.rtx_def** %p, align 8
  %516 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %call965 = call %struct.rtx_def* @prev_nonnote_insn(%struct.rtx_def* %516)
  store %struct.rtx_def* %call965, %struct.rtx_def** %p, align 8
  %517 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %call966 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %517, i32 3, %struct.rtx_def* null)
  store %struct.rtx_def* %call966, %struct.rtx_def** %temp, align 8
  %518 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %tobool967 = icmp ne %struct.rtx_def* %518, null
  br i1 %tobool967, label %if.then.968, label %if.else.977

if.then.968:                                      ; preds = %if.then.950
  %519 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %fld969 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %519, i32 0, i32 1
  %arrayidx970 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld969, i32 0, i64 0
  %rtx971 = bitcast %union.rtunion_def* %arrayidx970 to %struct.rtx_def**
  %520 = load %struct.rtx_def*, %struct.rtx_def** %rtx971, align 8
  %521 = load %struct.movable*, %struct.movable** %m, align 8
  %set_src972 = getelementptr inbounds %struct.movable, %struct.movable* %521, i32 0, i32 1
  store %struct.rtx_def* %520, %struct.rtx_def** %set_src972, align 8
  %522 = load %struct.movable*, %struct.movable** %m, align 8
  %move_insn973 = getelementptr inbounds %struct.movable, %struct.movable* %522, i32 0, i32 8
  %bf.load974 = load i8, i8* %move_insn973, align 4
  %bf.clear975 = and i8 %bf.load974, -33
  %bf.set976 = or i8 %bf.clear975, 32
  store i8 %bf.set976, i8* %move_insn973, align 4
  br label %if.end.1058

if.else.977:                                      ; preds = %if.then.950
  %523 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %call978 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %523, i32 4, %struct.rtx_def* null)
  store %struct.rtx_def* %call978, %struct.rtx_def** %temp, align 8
  %524 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %tobool979 = icmp ne %struct.rtx_def* %524, null
  br i1 %tobool979, label %land.lhs.true.980, label %if.else.1053

land.lhs.true.980:                                ; preds = %if.else.977
  %525 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %fld981 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %525, i32 0, i32 1
  %arrayidx982 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld981, i32 0, i64 0
  %rtx983 = bitcast %union.rtunion_def* %arrayidx982 to %struct.rtx_def**
  %526 = load %struct.rtx_def*, %struct.rtx_def** %rtx983, align 8
  %527 = bitcast %struct.rtx_def* %526 to i32*
  %bf.load984 = load i32, i32* %527, align 8
  %bf.clear985 = and i32 %bf.load984, 65535
  %cmp986 = icmp eq i32 %bf.clear985, 67
  br i1 %cmp986, label %if.then.1044, label %lor.lhs.false.988

lor.lhs.false.988:                                ; preds = %land.lhs.true.980
  %528 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %fld989 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %528, i32 0, i32 1
  %arrayidx990 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld989, i32 0, i64 0
  %rtx991 = bitcast %union.rtunion_def* %arrayidx990 to %struct.rtx_def**
  %529 = load %struct.rtx_def*, %struct.rtx_def** %rtx991, align 8
  %530 = bitcast %struct.rtx_def* %529 to i32*
  %bf.load992 = load i32, i32* %530, align 8
  %bf.clear993 = and i32 %bf.load992, 65535
  %cmp994 = icmp eq i32 %bf.clear993, 68
  br i1 %cmp994, label %if.then.1044, label %lor.lhs.false.996

lor.lhs.false.996:                                ; preds = %lor.lhs.false.988
  %531 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %fld997 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %531, i32 0, i32 1
  %arrayidx998 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld997, i32 0, i64 0
  %rtx999 = bitcast %union.rtunion_def* %arrayidx998 to %struct.rtx_def**
  %532 = load %struct.rtx_def*, %struct.rtx_def** %rtx999, align 8
  %533 = bitcast %struct.rtx_def* %532 to i32*
  %bf.load1000 = load i32, i32* %533, align 8
  %bf.clear1001 = and i32 %bf.load1000, 65535
  %cmp1002 = icmp eq i32 %bf.clear1001, 54
  br i1 %cmp1002, label %if.then.1044, label %lor.lhs.false.1004

lor.lhs.false.1004:                               ; preds = %lor.lhs.false.996
  %534 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %fld1005 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %534, i32 0, i32 1
  %arrayidx1006 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1005, i32 0, i64 0
  %rtx1007 = bitcast %union.rtunion_def* %arrayidx1006 to %struct.rtx_def**
  %535 = load %struct.rtx_def*, %struct.rtx_def** %rtx1007, align 8
  %536 = bitcast %struct.rtx_def* %535 to i32*
  %bf.load1008 = load i32, i32* %536, align 8
  %bf.clear1009 = and i32 %bf.load1008, 65535
  %cmp1010 = icmp eq i32 %bf.clear1009, 55
  br i1 %cmp1010, label %if.then.1044, label %lor.lhs.false.1012

lor.lhs.false.1012:                               ; preds = %lor.lhs.false.1004
  %537 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %fld1013 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %537, i32 0, i32 1
  %arrayidx1014 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1013, i32 0, i64 0
  %rtx1015 = bitcast %union.rtunion_def* %arrayidx1014 to %struct.rtx_def**
  %538 = load %struct.rtx_def*, %struct.rtx_def** %rtx1015, align 8
  %539 = bitcast %struct.rtx_def* %538 to i32*
  %bf.load1016 = load i32, i32* %539, align 8
  %bf.clear1017 = and i32 %bf.load1016, 65535
  %cmp1018 = icmp eq i32 %bf.clear1017, 58
  br i1 %cmp1018, label %if.then.1044, label %lor.lhs.false.1020

lor.lhs.false.1020:                               ; preds = %lor.lhs.false.1012
  %540 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %fld1021 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %540, i32 0, i32 1
  %arrayidx1022 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1021, i32 0, i64 0
  %rtx1023 = bitcast %union.rtunion_def* %arrayidx1022 to %struct.rtx_def**
  %541 = load %struct.rtx_def*, %struct.rtx_def** %rtx1023, align 8
  %542 = bitcast %struct.rtx_def* %541 to i32*
  %bf.load1024 = load i32, i32* %542, align 8
  %bf.clear1025 = and i32 %bf.load1024, 65535
  %cmp1026 = icmp eq i32 %bf.clear1025, 134
  br i1 %cmp1026, label %if.then.1044, label %lor.lhs.false.1028

lor.lhs.false.1028:                               ; preds = %lor.lhs.false.1020
  %543 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %fld1029 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %543, i32 0, i32 1
  %arrayidx1030 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1029, i32 0, i64 0
  %rtx1031 = bitcast %union.rtunion_def* %arrayidx1030 to %struct.rtx_def**
  %544 = load %struct.rtx_def*, %struct.rtx_def** %rtx1031, align 8
  %545 = bitcast %struct.rtx_def* %544 to i32*
  %bf.load1032 = load i32, i32* %545, align 8
  %bf.clear1033 = and i32 %bf.load1032, 65535
  %cmp1034 = icmp eq i32 %bf.clear1033, 56
  br i1 %cmp1034, label %if.then.1044, label %lor.lhs.false.1036

lor.lhs.false.1036:                               ; preds = %lor.lhs.false.1028
  %546 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %fld1037 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %546, i32 0, i32 1
  %arrayidx1038 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1037, i32 0, i64 0
  %rtx1039 = bitcast %union.rtunion_def* %arrayidx1038 to %struct.rtx_def**
  %547 = load %struct.rtx_def*, %struct.rtx_def** %rtx1039, align 8
  %548 = bitcast %struct.rtx_def* %547 to i32*
  %bf.load1040 = load i32, i32* %548, align 8
  %bf.clear1041 = and i32 %bf.load1040, 65535
  %cmp1042 = icmp eq i32 %bf.clear1041, 140
  br i1 %cmp1042, label %if.then.1044, label %if.else.1053

if.then.1044:                                     ; preds = %lor.lhs.false.1036, %lor.lhs.false.1028, %lor.lhs.false.1020, %lor.lhs.false.1012, %lor.lhs.false.1004, %lor.lhs.false.996, %lor.lhs.false.988, %land.lhs.true.980
  %549 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %fld1045 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %549, i32 0, i32 1
  %arrayidx1046 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1045, i32 0, i64 0
  %rtx1047 = bitcast %union.rtunion_def* %arrayidx1046 to %struct.rtx_def**
  %550 = load %struct.rtx_def*, %struct.rtx_def** %rtx1047, align 8
  %551 = load %struct.movable*, %struct.movable** %m, align 8
  %set_src1048 = getelementptr inbounds %struct.movable, %struct.movable* %551, i32 0, i32 1
  store %struct.rtx_def* %550, %struct.rtx_def** %set_src1048, align 8
  %552 = load %struct.movable*, %struct.movable** %m, align 8
  %move_insn1049 = getelementptr inbounds %struct.movable, %struct.movable* %552, i32 0, i32 8
  %bf.load1050 = load i8, i8* %move_insn1049, align 4
  %bf.clear1051 = and i8 %bf.load1050, -33
  %bf.set1052 = or i8 %bf.clear1051, 32
  store i8 %bf.set1052, i8* %move_insn1049, align 4
  br label %if.end.1057

if.else.1053:                                     ; preds = %lor.lhs.false.1036, %if.else.977
  %553 = load %struct.movable*, %struct.movable** %m, align 8
  %move_insn1054 = getelementptr inbounds %struct.movable, %struct.movable* %553, i32 0, i32 8
  %bf.load1055 = load i8, i8* %move_insn1054, align 4
  %bf.clear1056 = and i8 %bf.load1055, -33
  store i8 %bf.clear1056, i8* %move_insn1054, align 4
  br label %if.end.1057

if.end.1057:                                      ; preds = %if.else.1053, %if.then.1044
  br label %if.end.1058

if.end.1058:                                      ; preds = %if.end.1057, %if.then.968
  %554 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %call1059 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %554, i32 3, %struct.rtx_def* null)
  %cmp1060 = icmp ne %struct.rtx_def* %call1059, null
  %conv1061 = zext i1 %cmp1060 to i32
  %555 = load %struct.movable*, %struct.movable** %m, align 8
  %is_equiv1062 = getelementptr inbounds %struct.movable, %struct.movable* %555, i32 0, i32 8
  %556 = trunc i32 %conv1061 to i8
  %bf.load1063 = load i8, i8* %is_equiv1062, align 4
  %bf.value1064 = and i8 %556, 1
  %bf.shl1065 = shl i8 %bf.value1064, 7
  %bf.clear1066 = and i8 %bf.load1063, 127
  %bf.set1067 = or i8 %bf.clear1066, %bf.shl1065
  store i8 %bf.set1067, i8* %is_equiv1062, align 4
  %bf.result.cast1068 = zext i8 %bf.value1064 to i32
  br label %if.end.1069

if.end.1069:                                      ; preds = %if.end.1058, %for.end.946
  br label %if.end.1457

if.else.1070:                                     ; preds = %land.lhs.true.440, %lor.lhs.false.420, %lor.lhs.false.404, %if.else.398
  %557 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld1071 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %557, i32 0, i32 1
  %arrayidx1072 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1071, i32 0, i64 1
  %rtx1073 = bitcast %union.rtunion_def* %arrayidx1072 to %struct.rtx_def**
  %558 = load %struct.rtx_def*, %struct.rtx_def** %rtx1073, align 8
  %559 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %cmp1074 = icmp eq %struct.rtx_def* %558, %559
  br i1 %cmp1074, label %land.lhs.true.1076, label %if.end.1456

land.lhs.true.1076:                               ; preds = %if.else.1070
  %560 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld1077 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %560, i32 0, i32 1
  %arrayidx1078 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1077, i32 0, i64 2
  %rtx1079 = bitcast %union.rtunion_def* %arrayidx1078 to %struct.rtx_def**
  %561 = load %struct.rtx_def*, %struct.rtx_def** %rtx1079, align 8
  %562 = bitcast %struct.rtx_def* %561 to i32*
  %bf.load1080 = load i32, i32* %562, align 8
  %bf.clear1081 = and i32 %bf.load1080, 65535
  %cmp1082 = icmp eq i32 %bf.clear1081, 32
  br i1 %cmp1082, label %land.lhs.true.1084, label %if.end.1456

land.lhs.true.1084:                               ; preds = %land.lhs.true.1076
  %563 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld1085 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %563, i32 0, i32 1
  %arrayidx1086 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1085, i32 0, i64 2
  %rtx1087 = bitcast %union.rtunion_def* %arrayidx1086 to %struct.rtx_def**
  %564 = load %struct.rtx_def*, %struct.rtx_def** %rtx1087, align 8
  %565 = bitcast %struct.rtx_def* %564 to i32*
  %bf.load1088 = load i32, i32* %565, align 8
  %bf.clear1089 = and i32 %bf.load1088, 65535
  %idxprom1090 = sext i32 %bf.clear1089 to i64
  %arrayidx1091 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom1090
  %566 = load i8, i8* %arrayidx1091, align 1
  %conv1092 = sext i8 %566 to i32
  %cmp1093 = icmp eq i32 %conv1092, 105
  br i1 %cmp1093, label %cond.true.1095, label %cond.false.1126

cond.true.1095:                                   ; preds = %land.lhs.true.1084
  %567 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld1096 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %567, i32 0, i32 1
  %arrayidx1097 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1096, i32 0, i64 2
  %rtx1098 = bitcast %union.rtunion_def* %arrayidx1097 to %struct.rtx_def**
  %568 = load %struct.rtx_def*, %struct.rtx_def** %rtx1098, align 8
  %fld1099 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %568, i32 0, i32 1
  %arrayidx1100 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1099, i32 0, i64 3
  %rtx1101 = bitcast %union.rtunion_def* %arrayidx1100 to %struct.rtx_def**
  %569 = load %struct.rtx_def*, %struct.rtx_def** %rtx1101, align 8
  %570 = bitcast %struct.rtx_def* %569 to i32*
  %bf.load1102 = load i32, i32* %570, align 8
  %bf.clear1103 = and i32 %bf.load1102, 65535
  %cmp1104 = icmp eq i32 %bf.clear1103, 47
  br i1 %cmp1104, label %cond.true.1106, label %cond.false.1113

cond.true.1106:                                   ; preds = %cond.true.1095
  %571 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld1107 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %571, i32 0, i32 1
  %arrayidx1108 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1107, i32 0, i64 2
  %rtx1109 = bitcast %union.rtunion_def* %arrayidx1108 to %struct.rtx_def**
  %572 = load %struct.rtx_def*, %struct.rtx_def** %rtx1109, align 8
  %fld1110 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %572, i32 0, i32 1
  %arrayidx1111 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1110, i32 0, i64 3
  %rtx1112 = bitcast %union.rtunion_def* %arrayidx1111 to %struct.rtx_def**
  %573 = load %struct.rtx_def*, %struct.rtx_def** %rtx1112, align 8
  br label %cond.end.1124

cond.false.1113:                                  ; preds = %cond.true.1095
  %574 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld1114 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %574, i32 0, i32 1
  %arrayidx1115 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1114, i32 0, i64 2
  %rtx1116 = bitcast %union.rtunion_def* %arrayidx1115 to %struct.rtx_def**
  %575 = load %struct.rtx_def*, %struct.rtx_def** %rtx1116, align 8
  %576 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld1117 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %576, i32 0, i32 1
  %arrayidx1118 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1117, i32 0, i64 2
  %rtx1119 = bitcast %union.rtunion_def* %arrayidx1118 to %struct.rtx_def**
  %577 = load %struct.rtx_def*, %struct.rtx_def** %rtx1119, align 8
  %fld1120 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %577, i32 0, i32 1
  %arrayidx1121 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1120, i32 0, i64 3
  %rtx1122 = bitcast %union.rtunion_def* %arrayidx1121 to %struct.rtx_def**
  %578 = load %struct.rtx_def*, %struct.rtx_def** %rtx1122, align 8
  %call1123 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %575, %struct.rtx_def* %578)
  br label %cond.end.1124

cond.end.1124:                                    ; preds = %cond.false.1113, %cond.true.1106
  %cond1125 = phi %struct.rtx_def* [ %573, %cond.true.1106 ], [ %call1123, %cond.false.1113 ]
  br label %cond.end.1127

cond.false.1126:                                  ; preds = %land.lhs.true.1084
  br label %cond.end.1127

cond.end.1127:                                    ; preds = %cond.false.1126, %cond.end.1124
  %cond1128 = phi %struct.rtx_def* [ %cond1125, %cond.end.1124 ], [ null, %cond.false.1126 ]
  store %struct.rtx_def* %cond1128, %struct.rtx_def** %set1, align 8
  %tobool1129 = icmp ne %struct.rtx_def* %cond1128, null
  br i1 %tobool1129, label %land.lhs.true.1130, label %if.end.1456

land.lhs.true.1130:                               ; preds = %cond.end.1127
  %579 = load %struct.rtx_def*, %struct.rtx_def** %set1, align 8
  %580 = bitcast %struct.rtx_def* %579 to i32*
  %bf.load1131 = load i32, i32* %580, align 8
  %bf.clear1132 = and i32 %bf.load1131, 65535
  %cmp1133 = icmp eq i32 %bf.clear1132, 47
  br i1 %cmp1133, label %land.lhs.true.1135, label %if.end.1456

land.lhs.true.1135:                               ; preds = %land.lhs.true.1130
  %581 = load %struct.rtx_def*, %struct.rtx_def** %set1, align 8
  %fld1136 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %581, i32 0, i32 1
  %arrayidx1137 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1136, i32 0, i64 0
  %rtx1138 = bitcast %union.rtunion_def* %arrayidx1137 to %struct.rtx_def**
  %582 = load %struct.rtx_def*, %struct.rtx_def** %rtx1138, align 8
  %583 = bitcast %struct.rtx_def* %582 to i32*
  %bf.load1139 = load i32, i32* %583, align 8
  %bf.clear1140 = and i32 %bf.load1139, 65535
  %cmp1141 = icmp eq i32 %bf.clear1140, 64
  br i1 %cmp1141, label %land.lhs.true.1143, label %if.end.1456

land.lhs.true.1143:                               ; preds = %land.lhs.true.1135
  %584 = load %struct.rtx_def*, %struct.rtx_def** %set1, align 8
  %fld1144 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %584, i32 0, i32 1
  %arrayidx1145 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1144, i32 0, i64 0
  %rtx1146 = bitcast %union.rtunion_def* %arrayidx1145 to %struct.rtx_def**
  %585 = load %struct.rtx_def*, %struct.rtx_def** %rtx1146, align 8
  %fld1147 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %585, i32 0, i32 1
  %arrayidx1148 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1147, i32 0, i64 0
  %rtx1149 = bitcast %union.rtunion_def* %arrayidx1148 to %struct.rtx_def**
  %586 = load %struct.rtx_def*, %struct.rtx_def** %rtx1149, align 8
  %587 = bitcast %struct.rtx_def* %586 to i32*
  %bf.load1150 = load i32, i32* %587, align 8
  %bf.clear1151 = and i32 %bf.load1150, 65535
  %cmp1152 = icmp eq i32 %bf.clear1151, 63
  br i1 %cmp1152, label %land.lhs.true.1154, label %if.end.1456

land.lhs.true.1154:                               ; preds = %land.lhs.true.1143
  %588 = load %struct.rtx_def*, %struct.rtx_def** %set1, align 8
  %fld1155 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %588, i32 0, i32 1
  %arrayidx1156 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1155, i32 0, i64 0
  %rtx1157 = bitcast %union.rtunion_def* %arrayidx1156 to %struct.rtx_def**
  %589 = load %struct.rtx_def*, %struct.rtx_def** %rtx1157, align 8
  %fld1158 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %589, i32 0, i32 1
  %arrayidx1159 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1158, i32 0, i64 0
  %rtx1160 = bitcast %union.rtunion_def* %arrayidx1159 to %struct.rtx_def**
  %590 = load %struct.rtx_def*, %struct.rtx_def** %rtx1160, align 8
  %fld1161 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %590, i32 0, i32 1
  %arrayidx1162 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1161, i32 0, i64 0
  %rtx1163 = bitcast %union.rtunion_def* %arrayidx1162 to %struct.rtx_def**
  %591 = load %struct.rtx_def*, %struct.rtx_def** %rtx1163, align 8
  %592 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld1164 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %592, i32 0, i32 1
  %arrayidx1165 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1164, i32 0, i64 0
  %rtx1166 = bitcast %union.rtunion_def* %arrayidx1165 to %struct.rtx_def**
  %593 = load %struct.rtx_def*, %struct.rtx_def** %rtx1166, align 8
  %cmp1167 = icmp eq %struct.rtx_def* %591, %593
  br i1 %cmp1167, label %land.lhs.true.1169, label %if.end.1456

land.lhs.true.1169:                               ; preds = %land.lhs.true.1154
  %594 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld1170 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %594, i32 0, i32 1
  %arrayidx1171 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1170, i32 0, i64 0
  %rtx1172 = bitcast %union.rtunion_def* %arrayidx1171 to %struct.rtx_def**
  %595 = load %struct.rtx_def*, %struct.rtx_def** %rtx1172, align 8
  %596 = load %struct.rtx_def*, %struct.rtx_def** %set1, align 8
  %fld1173 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %596, i32 0, i32 1
  %arrayidx1174 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1173, i32 0, i64 1
  %rtx1175 = bitcast %union.rtunion_def* %arrayidx1174 to %struct.rtx_def**
  %597 = load %struct.rtx_def*, %struct.rtx_def** %rtx1175, align 8
  %call1176 = call i32 @reg_mentioned_p(%struct.rtx_def* %595, %struct.rtx_def* %597)
  %tobool1177 = icmp ne i32 %call1176, 0
  br i1 %tobool1177, label %if.end.1456, label %if.then.1178

if.then.1178:                                     ; preds = %land.lhs.true.1169
  %598 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld1180 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %598, i32 0, i32 1
  %arrayidx1181 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1180, i32 0, i64 0
  %rtx1182 = bitcast %union.rtunion_def* %arrayidx1181 to %struct.rtx_def**
  %599 = load %struct.rtx_def*, %struct.rtx_def** %rtx1182, align 8
  %fld1183 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %599, i32 0, i32 1
  %arrayidx1184 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1183, i32 0, i64 0
  %rtuint1185 = bitcast %union.rtunion_def* %arrayidx1184 to i32*
  %600 = load i32, i32* %rtuint1185, align 4
  store i32 %600, i32* %regno1179, align 4
  %601 = load i32, i32* %regno1179, align 4
  %idxprom1186 = sext i32 %601 to i64
  %602 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %array1187 = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %602, i32 0, i32 2
  %603 = load %struct.loop_reg*, %struct.loop_reg** %array1187, align 8
  %arrayidx1188 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %603, i64 %idxprom1186
  %set_in_loop1189 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %arrayidx1188, i32 0, i32 0
  %604 = load i32, i32* %set_in_loop1189, align 4
  %cmp1190 = icmp eq i32 %604, 2
  br i1 %cmp1190, label %if.then.1192, label %if.end.1455

if.then.1192:                                     ; preds = %if.then.1178
  %call1194 = call noalias i8* @xmalloc(i64 80)
  %605 = bitcast i8* %call1194 to %struct.movable*
  store %struct.movable* %605, %struct.movable** %m1193, align 8
  %606 = load %struct.movable*, %struct.movable** %m1193, align 8
  %next1195 = getelementptr inbounds %struct.movable, %struct.movable* %606, i32 0, i32 12
  store %struct.movable* null, %struct.movable** %next1195, align 8
  %607 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %608 = load %struct.movable*, %struct.movable** %m1193, align 8
  %insn1196 = getelementptr inbounds %struct.movable, %struct.movable* %608, i32 0, i32 0
  store %struct.rtx_def* %607, %struct.rtx_def** %insn1196, align 8
  %609 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld1197 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %609, i32 0, i32 1
  %arrayidx1198 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1197, i32 0, i64 0
  %rtx1199 = bitcast %union.rtunion_def* %arrayidx1198 to %struct.rtx_def**
  %610 = load %struct.rtx_def*, %struct.rtx_def** %rtx1199, align 8
  %611 = load %struct.movable*, %struct.movable** %m1193, align 8
  %set_dest1200 = getelementptr inbounds %struct.movable, %struct.movable* %611, i32 0, i32 2
  store %struct.rtx_def* %610, %struct.rtx_def** %set_dest1200, align 8
  %612 = load %struct.movable*, %struct.movable** %m1193, align 8
  %dependencies1201 = getelementptr inbounds %struct.movable, %struct.movable* %612, i32 0, i32 3
  store %struct.rtx_def* null, %struct.rtx_def** %dependencies1201, align 8
  %613 = load %struct.movable*, %struct.movable** %m1193, align 8
  %force1202 = getelementptr inbounds %struct.movable, %struct.movable* %613, i32 0, i32 8
  %bf.load1203 = load i8, i8* %force1202, align 4
  %bf.clear1204 = and i8 %bf.load1203, -3
  store i8 %bf.clear1204, i8* %force1202, align 4
  %614 = load %struct.movable*, %struct.movable** %m1193, align 8
  %consec1205 = getelementptr inbounds %struct.movable, %struct.movable* %614, i32 0, i32 4
  store i32 0, i32* %consec1205, align 4
  %615 = load %struct.movable*, %struct.movable** %m1193, align 8
  %done1206 = getelementptr inbounds %struct.movable, %struct.movable* %615, i32 0, i32 8
  %bf.load1207 = load i8, i8* %done1206, align 4
  %bf.clear1208 = and i8 %bf.load1207, -9
  store i8 %bf.clear1208, i8* %done1206, align 4
  %616 = load %struct.movable*, %struct.movable** %m1193, align 8
  %forces1209 = getelementptr inbounds %struct.movable, %struct.movable* %616, i32 0, i32 11
  store %struct.movable* null, %struct.movable** %forces1209, align 8
  %617 = load %struct.movable*, %struct.movable** %m1193, align 8
  %move_insn1210 = getelementptr inbounds %struct.movable, %struct.movable* %617, i32 0, i32 8
  %bf.load1211 = load i8, i8* %move_insn1210, align 4
  %bf.clear1212 = and i8 %bf.load1211, -33
  store i8 %bf.clear1212, i8* %move_insn1210, align 4
  %618 = load %struct.movable*, %struct.movable** %m1193, align 8
  %move_insn_first1213 = getelementptr inbounds %struct.movable, %struct.movable* %618, i32 0, i32 8
  %bf.load1214 = load i8, i8* %move_insn_first1213, align 4
  %bf.clear1215 = and i8 %bf.load1214, -65
  store i8 %bf.clear1215, i8* %move_insn_first1213, align 4
  %619 = load %struct.movable*, %struct.movable** %m1193, align 8
  %partial1216 = getelementptr inbounds %struct.movable, %struct.movable* %619, i32 0, i32 8
  %bf.load1217 = load i8, i8* %partial1216, align 4
  %bf.clear1218 = and i8 %bf.load1217, -17
  %bf.set1219 = or i8 %bf.clear1218, 16
  store i8 %bf.set1219, i8* %partial1216, align 4
  %620 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld1220 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %620, i32 0, i32 1
  %arrayidx1221 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1220, i32 0, i64 0
  %rtint1222 = bitcast %union.rtunion_def* %arrayidx1221 to i32*
  %621 = load i32, i32* %rtint1222, align 4
  %622 = load i32, i32* @max_uid_for_loop, align 4
  %cmp1223 = icmp sge i32 %621, %622
  br i1 %cmp1223, label %lor.end.1287, label %lor.lhs.false.1225

lor.lhs.false.1225:                               ; preds = %if.then.1192
  %623 = load i32, i32* %regno1179, align 4
  %idxprom1226 = sext i32 %623 to i64
  %624 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %data1227 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %624, i32 0, i32 4
  %reg1228 = bitcast %union.varray_data_tag* %data1227 to [1 x %struct.reg_info_def*]*
  %arrayidx1229 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %reg1228, i32 0, i64 %idxprom1226
  %625 = load %struct.reg_info_def*, %struct.reg_info_def** %arrayidx1229, align 8
  %last_uid1230 = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %625, i32 0, i32 1
  %626 = load i32, i32* %last_uid1230, align 4
  %idxprom1231 = sext i32 %626 to i64
  %627 = load i32*, i32** @uid_luid, align 8
  %arrayidx1232 = getelementptr inbounds i32, i32* %627, i64 %idxprom1231
  %628 = load i32, i32* %arrayidx1232, align 4
  %629 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %end1233 = getelementptr inbounds %struct.loop, %struct.loop* %629, i32 0, i32 27
  %630 = load %struct.rtx_def*, %struct.rtx_def** %end1233, align 8
  %fld1234 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %630, i32 0, i32 1
  %arrayidx1235 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1234, i32 0, i64 0
  %rtint1236 = bitcast %union.rtunion_def* %arrayidx1235 to i32*
  %631 = load i32, i32* %rtint1236, align 4
  %632 = load i32, i32* @max_uid_for_loop, align 4
  %cmp1237 = icmp slt i32 %631, %632
  br i1 %cmp1237, label %cond.true.1239, label %cond.false.1246

cond.true.1239:                                   ; preds = %lor.lhs.false.1225
  %633 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %end1240 = getelementptr inbounds %struct.loop, %struct.loop* %633, i32 0, i32 27
  %634 = load %struct.rtx_def*, %struct.rtx_def** %end1240, align 8
  %fld1241 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %634, i32 0, i32 1
  %arrayidx1242 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1241, i32 0, i64 0
  %rtint1243 = bitcast %union.rtunion_def* %arrayidx1242 to i32*
  %635 = load i32, i32* %rtint1243, align 4
  %idxprom1244 = sext i32 %635 to i64
  %636 = load i32*, i32** @uid_luid, align 8
  %arrayidx1245 = getelementptr inbounds i32, i32* %636, i64 %idxprom1244
  %637 = load i32, i32* %arrayidx1245, align 4
  br label %cond.end.1247

cond.false.1246:                                  ; preds = %lor.lhs.false.1225
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 1027, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @__FUNCTION__.scan_loop, i32 0, i32 0)) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end.1247

cond.end.1247:                                    ; preds = %638, %cond.true.1239
  %cond1248 = phi i32 [ %637, %cond.true.1239 ], [ -1, %638 ]
  %cmp1249 = icmp sgt i32 %628, %cond1248
  br i1 %cmp1249, label %lor.end.1287, label %lor.lhs.false.1251

lor.lhs.false.1251:                               ; preds = %cond.end.1247
  %639 = load i32, i32* %regno1179, align 4
  %idxprom1252 = sext i32 %639 to i64
  %640 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %data1253 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %640, i32 0, i32 4
  %reg1254 = bitcast %union.varray_data_tag* %data1253 to [1 x %struct.reg_info_def*]*
  %arrayidx1255 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %reg1254, i32 0, i64 %idxprom1252
  %641 = load %struct.reg_info_def*, %struct.reg_info_def** %arrayidx1255, align 8
  %first_uid1256 = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %641, i32 0, i32 0
  %642 = load i32, i32* %first_uid1256, align 4
  %idxprom1257 = sext i32 %642 to i64
  %643 = load i32*, i32** @uid_luid, align 8
  %arrayidx1258 = getelementptr inbounds i32, i32* %643, i64 %idxprom1257
  %644 = load i32, i32* %arrayidx1258, align 4
  %645 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %start1259 = getelementptr inbounds %struct.loop, %struct.loop* %645, i32 0, i32 26
  %646 = load %struct.rtx_def*, %struct.rtx_def** %start1259, align 8
  %fld1260 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %646, i32 0, i32 1
  %arrayidx1261 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1260, i32 0, i64 0
  %rtint1262 = bitcast %union.rtunion_def* %arrayidx1261 to i32*
  %647 = load i32, i32* %rtint1262, align 4
  %648 = load i32, i32* @max_uid_for_loop, align 4
  %cmp1263 = icmp slt i32 %647, %648
  br i1 %cmp1263, label %cond.true.1265, label %cond.false.1272

cond.true.1265:                                   ; preds = %lor.lhs.false.1251
  %649 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %start1266 = getelementptr inbounds %struct.loop, %struct.loop* %649, i32 0, i32 26
  %650 = load %struct.rtx_def*, %struct.rtx_def** %start1266, align 8
  %fld1267 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %650, i32 0, i32 1
  %arrayidx1268 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1267, i32 0, i64 0
  %rtint1269 = bitcast %union.rtunion_def* %arrayidx1268 to i32*
  %651 = load i32, i32* %rtint1269, align 4
  %idxprom1270 = sext i32 %651 to i64
  %652 = load i32*, i32** @uid_luid, align 8
  %arrayidx1271 = getelementptr inbounds i32, i32* %652, i64 %idxprom1270
  %653 = load i32, i32* %arrayidx1271, align 4
  br label %cond.end.1273

cond.false.1272:                                  ; preds = %lor.lhs.false.1251
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 1027, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @__FUNCTION__.scan_loop, i32 0, i32 0)) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end.1273

cond.end.1273:                                    ; preds = %654, %cond.true.1265
  %cond1274 = phi i32 [ %653, %cond.true.1265 ], [ -1, %654 ]
  %cmp1275 = icmp slt i32 %644, %cond1274
  br i1 %cmp1275, label %lor.end.1287, label %lor.rhs.1277

lor.rhs.1277:                                     ; preds = %cond.end.1273
  %655 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %656 = load i32, i32* %regno1179, align 4
  %idxprom1278 = sext i32 %656 to i64
  %657 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %data1279 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %657, i32 0, i32 4
  %reg1280 = bitcast %union.varray_data_tag* %data1279 to [1 x %struct.reg_info_def*]*
  %arrayidx1281 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %reg1280, i32 0, i64 %idxprom1278
  %658 = load %struct.reg_info_def*, %struct.reg_info_def** %arrayidx1281, align 8
  %first_uid1282 = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %658, i32 0, i32 0
  %659 = load i32, i32* %first_uid1282, align 4
  %idxprom1283 = sext i32 %659 to i64
  %660 = load i32*, i32** @uid_luid, align 8
  %arrayidx1284 = getelementptr inbounds i32, i32* %660, i64 %idxprom1283
  %661 = load i32, i32* %arrayidx1284, align 4
  %call1285 = call i32 @labels_in_range_p(%struct.rtx_def* %655, i32 %661)
  %tobool1286 = icmp ne i32 %call1285, 0
  br label %lor.end.1287

lor.end.1287:                                     ; preds = %lor.rhs.1277, %cond.end.1273, %cond.end.1247, %if.then.1192
  %662 = phi i1 [ true, %cond.end.1273 ], [ true, %cond.end.1247 ], [ true, %if.then.1192 ], [ %tobool1286, %lor.rhs.1277 ]
  %lor.ext1288 = zext i1 %662 to i32
  %663 = load %struct.movable*, %struct.movable** %m1193, align 8
  %global1289 = getelementptr inbounds %struct.movable, %struct.movable* %663, i32 0, i32 8
  %664 = trunc i32 %lor.ext1288 to i8
  %bf.load1290 = load i8, i8* %global1289, align 4
  %bf.value1291 = and i8 %664, 1
  %bf.shl1292 = shl i8 %bf.value1291, 2
  %bf.clear1293 = and i8 %bf.load1290, -5
  %bf.set1294 = or i8 %bf.clear1293, %bf.shl1292
  store i8 %bf.set1294, i8* %global1289, align 4
  %bf.result.cast1295 = zext i8 %bf.value1291 to i32
  %665 = load i32, i32* %maybe_never, align 4
  %tobool1296 = icmp ne i32 %665, 0
  br i1 %tobool1296, label %land.lhs.true.1297, label %if.else.1312

land.lhs.true.1297:                               ; preds = %lor.end.1287
  %666 = load %struct.movable*, %struct.movable** %m1193, align 8
  %global1298 = getelementptr inbounds %struct.movable, %struct.movable* %666, i32 0, i32 8
  %bf.load1299 = load i8, i8* %global1298, align 4
  %bf.lshr1300 = lshr i8 %bf.load1299, 2
  %bf.clear1301 = and i8 %bf.lshr1300, 1
  %bf.cast1302 = zext i8 %bf.clear1301 to i32
  %tobool1303 = icmp ne i32 %bf.cast1302, 0
  br i1 %tobool1303, label %if.then.1304, label %if.else.1312

if.then.1304:                                     ; preds = %land.lhs.true.1297
  %667 = load %struct.rtx_def*, %struct.rtx_def** %set1, align 8
  %fld1305 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %667, i32 0, i32 1
  %arrayidx1306 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1305, i32 0, i64 1
  %rtx1307 = bitcast %union.rtunion_def* %arrayidx1306 to %struct.rtx_def**
  %668 = load %struct.rtx_def*, %struct.rtx_def** %rtx1307, align 8
  %669 = bitcast %struct.rtx_def* %668 to i32*
  %bf.load1308 = load i32, i32* %669, align 8
  %bf.lshr1309 = lshr i32 %bf.load1308, 16
  %bf.clear1310 = and i32 %bf.lshr1309, 255
  %670 = load %struct.movable*, %struct.movable** %m1193, align 8
  %savemode1311 = getelementptr inbounds %struct.movable, %struct.movable* %670, i32 0, i32 9
  store i32 %bf.clear1310, i32* %savemode1311, align 4
  br label %if.end.1314

if.else.1312:                                     ; preds = %land.lhs.true.1297, %lor.end.1287
  %671 = load %struct.movable*, %struct.movable** %m1193, align 8
  %savemode1313 = getelementptr inbounds %struct.movable, %struct.movable* %671, i32 0, i32 9
  store i32 0, i32* %savemode1313, align 4
  br label %if.end.1314

if.end.1314:                                      ; preds = %if.else.1312, %if.then.1304
  %672 = load i32, i32* %regno1179, align 4
  %673 = load %struct.movable*, %struct.movable** %m1193, align 8
  %regno1315 = getelementptr inbounds %struct.movable, %struct.movable* %673, i32 0, i32 5
  store i32 %672, i32* %regno1315, align 4
  %674 = load %struct.movable*, %struct.movable** %m1193, align 8
  %cond1316 = getelementptr inbounds %struct.movable, %struct.movable* %674, i32 0, i32 8
  %bf.load1317 = load i8, i8* %cond1316, align 4
  %bf.clear1318 = and i8 %bf.load1317, -2
  store i8 %bf.clear1318, i8* %cond1316, align 4
  %675 = load %struct.movable*, %struct.movable** %m1193, align 8
  %match1319 = getelementptr inbounds %struct.movable, %struct.movable* %675, i32 0, i32 10
  store %struct.movable* null, %struct.movable** %match1319, align 8
  %676 = load i32, i32* %regno1179, align 4
  %idxprom1320 = sext i32 %676 to i64
  %677 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %data1321 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %677, i32 0, i32 4
  %reg1322 = bitcast %union.varray_data_tag* %data1321 to [1 x %struct.reg_info_def*]*
  %arrayidx1323 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %reg1322, i32 0, i64 %idxprom1320
  %678 = load %struct.reg_info_def*, %struct.reg_info_def** %arrayidx1323, align 8
  %last_uid1324 = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %678, i32 0, i32 1
  %679 = load i32, i32* %last_uid1324, align 4
  %idxprom1325 = sext i32 %679 to i64
  %680 = load i32*, i32** @uid_luid, align 8
  %arrayidx1326 = getelementptr inbounds i32, i32* %680, i64 %idxprom1325
  %681 = load i32, i32* %arrayidx1326, align 4
  %682 = load i32, i32* %regno1179, align 4
  %idxprom1327 = sext i32 %682 to i64
  %683 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %data1328 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %683, i32 0, i32 4
  %reg1329 = bitcast %union.varray_data_tag* %data1328 to [1 x %struct.reg_info_def*]*
  %arrayidx1330 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %reg1329, i32 0, i64 %idxprom1327
  %684 = load %struct.reg_info_def*, %struct.reg_info_def** %arrayidx1330, align 8
  %first_uid1331 = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %684, i32 0, i32 0
  %685 = load i32, i32* %first_uid1331, align 4
  %idxprom1332 = sext i32 %685 to i64
  %686 = load i32*, i32** @uid_luid, align 8
  %arrayidx1333 = getelementptr inbounds i32, i32* %686, i64 %idxprom1332
  %687 = load i32, i32* %arrayidx1333, align 4
  %sub1334 = sub nsw i32 %681, %687
  %conv1335 = trunc i32 %sub1334 to i16
  %688 = load %struct.movable*, %struct.movable** %m1193, align 8
  %lifetime1336 = getelementptr inbounds %struct.movable, %struct.movable* %688, i32 0, i32 6
  store i16 %conv1335, i16* %lifetime1336, align 2
  %689 = load %struct.movable*, %struct.movable** %m1193, align 8
  %savings1337 = getelementptr inbounds %struct.movable, %struct.movable* %689, i32 0, i32 7
  store i16 1, i16* %savings1337, align 2
  store i32 0, i32* %i, align 4
  br label %for.cond.1338

for.cond.1338:                                    ; preds = %for.inc.1452, %if.end.1314
  %690 = load i32, i32* %i, align 4
  %691 = load i32, i32* %regno1179, align 4
  %cmp1339 = icmp slt i32 %691, 53
  br i1 %cmp1339, label %cond.true.1341, label %cond.false.1441

cond.true.1341:                                   ; preds = %for.cond.1338
  %692 = load i32, i32* %regno1179, align 4
  %cmp1342 = icmp sge i32 %692, 8
  br i1 %cmp1342, label %land.lhs.true.1344, label %lor.lhs.false.1347

land.lhs.true.1344:                               ; preds = %cond.true.1341
  %693 = load i32, i32* %regno1179, align 4
  %cmp1345 = icmp sle i32 %693, 15
  br i1 %cmp1345, label %cond.true.1365, label %lor.lhs.false.1347

lor.lhs.false.1347:                               ; preds = %land.lhs.true.1344, %cond.true.1341
  %694 = load i32, i32* %regno1179, align 4
  %cmp1348 = icmp sge i32 %694, 21
  br i1 %cmp1348, label %land.lhs.true.1350, label %lor.lhs.false.1353

land.lhs.true.1350:                               ; preds = %lor.lhs.false.1347
  %695 = load i32, i32* %regno1179, align 4
  %cmp1351 = icmp sle i32 %695, 28
  br i1 %cmp1351, label %cond.true.1365, label %lor.lhs.false.1353

lor.lhs.false.1353:                               ; preds = %land.lhs.true.1350, %lor.lhs.false.1347
  %696 = load i32, i32* %regno1179, align 4
  %cmp1354 = icmp sge i32 %696, 45
  br i1 %cmp1354, label %land.lhs.true.1356, label %lor.lhs.false.1359

land.lhs.true.1356:                               ; preds = %lor.lhs.false.1353
  %697 = load i32, i32* %regno1179, align 4
  %cmp1357 = icmp sle i32 %697, 52
  br i1 %cmp1357, label %cond.true.1365, label %lor.lhs.false.1359

lor.lhs.false.1359:                               ; preds = %land.lhs.true.1356, %lor.lhs.false.1353
  %698 = load i32, i32* %regno1179, align 4
  %cmp1360 = icmp sge i32 %698, 29
  br i1 %cmp1360, label %land.lhs.true.1362, label %cond.false.1390

land.lhs.true.1362:                               ; preds = %lor.lhs.false.1359
  %699 = load i32, i32* %regno1179, align 4
  %cmp1363 = icmp sle i32 %699, 36
  br i1 %cmp1363, label %cond.true.1365, label %cond.false.1390

cond.true.1365:                                   ; preds = %land.lhs.true.1362, %land.lhs.true.1356, %land.lhs.true.1350, %land.lhs.true.1344
  %700 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld1366 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %700, i32 0, i32 1
  %arrayidx1367 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1366, i32 0, i64 0
  %rtx1368 = bitcast %union.rtunion_def* %arrayidx1367 to %struct.rtx_def**
  %701 = load %struct.rtx_def*, %struct.rtx_def** %rtx1368, align 8
  %702 = bitcast %struct.rtx_def* %701 to i32*
  %bf.load1369 = load i32, i32* %702, align 8
  %bf.lshr1370 = lshr i32 %bf.load1369, 16
  %bf.clear1371 = and i32 %bf.lshr1370, 255
  %idxprom1372 = sext i32 %bf.clear1371 to i64
  %arrayidx1373 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom1372
  %703 = load i32, i32* %arrayidx1373, align 4
  %cmp1374 = icmp eq i32 %703, 5
  br i1 %cmp1374, label %lor.end.1387, label %lor.rhs.1376

lor.rhs.1376:                                     ; preds = %cond.true.1365
  %704 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld1377 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %704, i32 0, i32 1
  %arrayidx1378 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1377, i32 0, i64 0
  %rtx1379 = bitcast %union.rtunion_def* %arrayidx1378 to %struct.rtx_def**
  %705 = load %struct.rtx_def*, %struct.rtx_def** %rtx1379, align 8
  %706 = bitcast %struct.rtx_def* %705 to i32*
  %bf.load1380 = load i32, i32* %706, align 8
  %bf.lshr1381 = lshr i32 %bf.load1380, 16
  %bf.clear1382 = and i32 %bf.lshr1381, 255
  %idxprom1383 = sext i32 %bf.clear1382 to i64
  %arrayidx1384 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom1383
  %707 = load i32, i32* %arrayidx1384, align 4
  %cmp1385 = icmp eq i32 %707, 6
  br label %lor.end.1387

lor.end.1387:                                     ; preds = %lor.rhs.1376, %cond.true.1365
  %708 = phi i1 [ true, %cond.true.1365 ], [ %cmp1385, %lor.rhs.1376 ]
  %cond1389 = select i1 %708, i32 2, i32 1
  br label %cond.end.1439

cond.false.1390:                                  ; preds = %land.lhs.true.1362, %lor.lhs.false.1359
  %709 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld1391 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %709, i32 0, i32 1
  %arrayidx1392 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1391, i32 0, i64 0
  %rtx1393 = bitcast %union.rtunion_def* %arrayidx1392 to %struct.rtx_def**
  %710 = load %struct.rtx_def*, %struct.rtx_def** %rtx1393, align 8
  %711 = bitcast %struct.rtx_def* %710 to i32*
  %bf.load1394 = load i32, i32* %711, align 8
  %bf.lshr1395 = lshr i32 %bf.load1394, 16
  %bf.clear1396 = and i32 %bf.lshr1395, 255
  %cmp1397 = icmp eq i32 %bf.clear1396, 18
  br i1 %cmp1397, label %cond.true.1399, label %cond.false.1403

cond.true.1399:                                   ; preds = %cond.false.1390
  %712 = load i32, i32* @target_flags, align 4
  %and1400 = and i32 %712, 33554432
  %tobool1401 = icmp ne i32 %and1400, 0
  %cond1402 = select i1 %tobool1401, i32 2, i32 3
  br label %cond.end.1437

cond.false.1403:                                  ; preds = %cond.false.1390
  %713 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld1404 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %713, i32 0, i32 1
  %arrayidx1405 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1404, i32 0, i64 0
  %rtx1406 = bitcast %union.rtunion_def* %arrayidx1405 to %struct.rtx_def**
  %714 = load %struct.rtx_def*, %struct.rtx_def** %rtx1406, align 8
  %715 = bitcast %struct.rtx_def* %714 to i32*
  %bf.load1407 = load i32, i32* %715, align 8
  %bf.lshr1408 = lshr i32 %bf.load1407, 16
  %bf.clear1409 = and i32 %bf.lshr1408, 255
  %cmp1410 = icmp eq i32 %bf.clear1409, 24
  br i1 %cmp1410, label %cond.true.1412, label %cond.false.1416

cond.true.1412:                                   ; preds = %cond.false.1403
  %716 = load i32, i32* @target_flags, align 4
  %and1413 = and i32 %716, 33554432
  %tobool1414 = icmp ne i32 %and1413, 0
  %cond1415 = select i1 %tobool1414, i32 4, i32 6
  br label %cond.end.1435

cond.false.1416:                                  ; preds = %cond.false.1403
  %717 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld1417 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %717, i32 0, i32 1
  %arrayidx1418 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1417, i32 0, i64 0
  %rtx1419 = bitcast %union.rtunion_def* %arrayidx1418 to %struct.rtx_def**
  %718 = load %struct.rtx_def*, %struct.rtx_def** %rtx1419, align 8
  %719 = bitcast %struct.rtx_def* %718 to i32*
  %bf.load1420 = load i32, i32* %719, align 8
  %bf.lshr1421 = lshr i32 %bf.load1420, 16
  %bf.clear1422 = and i32 %bf.lshr1421, 255
  %idxprom1423 = sext i32 %bf.clear1422 to i64
  %arrayidx1424 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom1423
  %720 = load i8, i8* %arrayidx1424, align 1
  %conv1425 = zext i8 %720 to i32
  %721 = load i32, i32* @target_flags, align 4
  %and1426 = and i32 %721, 33554432
  %tobool1427 = icmp ne i32 %and1426, 0
  %cond1428 = select i1 %tobool1427, i32 8, i32 4
  %add1429 = add nsw i32 %conv1425, %cond1428
  %sub1430 = sub nsw i32 %add1429, 1
  %722 = load i32, i32* @target_flags, align 4
  %and1431 = and i32 %722, 33554432
  %tobool1432 = icmp ne i32 %and1431, 0
  %cond1433 = select i1 %tobool1432, i32 8, i32 4
  %div1434 = sdiv i32 %sub1430, %cond1433
  br label %cond.end.1435

cond.end.1435:                                    ; preds = %cond.false.1416, %cond.true.1412
  %cond1436 = phi i32 [ %cond1415, %cond.true.1412 ], [ %div1434, %cond.false.1416 ]
  br label %cond.end.1437

cond.end.1437:                                    ; preds = %cond.end.1435, %cond.true.1399
  %cond1438 = phi i32 [ %cond1402, %cond.true.1399 ], [ %cond1436, %cond.end.1435 ]
  br label %cond.end.1439

cond.end.1439:                                    ; preds = %cond.end.1437, %lor.end.1387
  %cond1440 = phi i32 [ %cond1389, %lor.end.1387 ], [ %cond1438, %cond.end.1437 ]
  br label %cond.end.1442

cond.false.1441:                                  ; preds = %for.cond.1338
  br label %cond.end.1442

cond.end.1442:                                    ; preds = %cond.false.1441, %cond.end.1439
  %cond1443 = phi i32 [ %cond1440, %cond.end.1439 ], [ 1, %cond.false.1441 ]
  %cmp1444 = icmp slt i32 %690, %cond1443
  br i1 %cmp1444, label %for.body.1446, label %for.end.1454

for.body.1446:                                    ; preds = %cond.end.1442
  %723 = load i32, i32* %regno1179, align 4
  %724 = load i32, i32* %i, align 4
  %add1447 = add nsw i32 %723, %724
  %idxprom1448 = sext i32 %add1447 to i64
  %725 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %array1449 = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %725, i32 0, i32 2
  %726 = load %struct.loop_reg*, %struct.loop_reg** %array1449, align 8
  %arrayidx1450 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %726, i64 %idxprom1448
  %set_in_loop1451 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %arrayidx1450, i32 0, i32 0
  store i32 -1, i32* %set_in_loop1451, align 4
  br label %for.inc.1452

for.inc.1452:                                     ; preds = %for.body.1446
  %727 = load i32, i32* %i, align 4
  %inc1453 = add nsw i32 %727, 1
  store i32 %inc1453, i32* %i, align 4
  br label %for.cond.1338

for.end.1454:                                     ; preds = %cond.end.1442
  %728 = load %struct.loop_movables*, %struct.loop_movables** %movables, align 8
  %729 = load %struct.movable*, %struct.movable** %m1193, align 8
  call void @loop_movables_add(%struct.loop_movables* %728, %struct.movable* %729)
  br label %if.end.1455

if.end.1455:                                      ; preds = %for.end.1454, %if.then.1178
  br label %if.end.1456

if.end.1456:                                      ; preds = %if.end.1455, %land.lhs.true.1169, %land.lhs.true.1154, %land.lhs.true.1143, %land.lhs.true.1135, %land.lhs.true.1130, %cond.end.1127, %land.lhs.true.1076, %if.else.1070
  br label %if.end.1457

if.end.1457:                                      ; preds = %if.end.1456, %if.end.1069
  br label %if.end.1458

if.end.1458:                                      ; preds = %if.end.1457, %if.then.397
  br label %if.end.1459

if.end.1459:                                      ; preds = %if.end.1458, %if.then.385
  br label %if.end.1542

if.else.1460:                                     ; preds = %land.lhs.true.237, %land.lhs.true.229, %cond.end.226, %for.body.193
  %730 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %731 = bitcast %struct.rtx_def* %730 to i32*
  %bf.load1461 = load i32, i32* %731, align 8
  %bf.clear1462 = and i32 %bf.load1461, 65535
  %cmp1463 = icmp eq i32 %bf.clear1462, 34
  br i1 %cmp1463, label %land.lhs.true.1465, label %if.else.1471

land.lhs.true.1465:                               ; preds = %if.else.1460
  %732 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %733 = bitcast %struct.rtx_def* %732 to i32*
  %bf.load1466 = load i32, i32* %733, align 8
  %bf.lshr1467 = lshr i32 %bf.load1466, 26
  %bf.clear1468 = and i32 %bf.lshr1467, 1
  %tobool1469 = icmp ne i32 %bf.clear1468, 0
  br i1 %tobool1469, label %if.else.1471, label %if.then.1470

if.then.1470:                                     ; preds = %land.lhs.true.1465
  store i32 1, i32* %call_passed, align 4
  br label %if.end.1541

if.else.1471:                                     ; preds = %land.lhs.true.1465, %if.else.1460
  %734 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %735 = bitcast %struct.rtx_def* %734 to i32*
  %bf.load1472 = load i32, i32* %735, align 8
  %bf.clear1473 = and i32 %bf.load1472, 65535
  %cmp1474 = icmp eq i32 %bf.clear1473, 36
  br i1 %cmp1474, label %land.lhs.true.1481, label %lor.lhs.false.1476

lor.lhs.false.1476:                               ; preds = %if.else.1471
  %736 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %737 = bitcast %struct.rtx_def* %736 to i32*
  %bf.load1477 = load i32, i32* %737, align 8
  %bf.clear1478 = and i32 %bf.load1477, 65535
  %cmp1479 = icmp eq i32 %bf.clear1478, 33
  br i1 %cmp1479, label %land.lhs.true.1481, label %if.else.1506

land.lhs.true.1481:                               ; preds = %lor.lhs.false.1476, %if.else.1471
  %738 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %739 = bitcast %struct.rtx_def* %738 to i32*
  %bf.load1482 = load i32, i32* %739, align 8
  %bf.clear1483 = and i32 %bf.load1482, 65535
  %cmp1484 = icmp eq i32 %bf.clear1483, 33
  br i1 %cmp1484, label %land.lhs.true.1486, label %if.then.1505

land.lhs.true.1486:                               ; preds = %land.lhs.true.1481
  %740 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld1487 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %740, i32 0, i32 1
  %arrayidx1488 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1487, i32 0, i64 7
  %rtx1489 = bitcast %union.rtunion_def* %arrayidx1488 to %struct.rtx_def**
  %741 = load %struct.rtx_def*, %struct.rtx_def** %rtx1489, align 8
  %742 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %top1490 = getelementptr inbounds %struct.loop, %struct.loop* %742, i32 0, i32 28
  %743 = load %struct.rtx_def*, %struct.rtx_def** %top1490, align 8
  %cmp1491 = icmp eq %struct.rtx_def* %741, %743
  br i1 %cmp1491, label %land.lhs.true.1493, label %if.then.1505

land.lhs.true.1493:                               ; preds = %land.lhs.true.1486
  %744 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld1494 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %744, i32 0, i32 1
  %arrayidx1495 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1494, i32 0, i64 2
  %rtx1496 = bitcast %union.rtunion_def* %arrayidx1495 to %struct.rtx_def**
  %745 = load %struct.rtx_def*, %struct.rtx_def** %rtx1496, align 8
  %fld1497 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %745, i32 0, i32 1
  %arrayidx1498 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1497, i32 0, i64 2
  %rtx1499 = bitcast %union.rtunion_def* %arrayidx1498 to %struct.rtx_def**
  %746 = load %struct.rtx_def*, %struct.rtx_def** %rtx1499, align 8
  %747 = load %struct.rtx_def*, %struct.rtx_def** %loop_end, align 8
  %cmp1500 = icmp eq %struct.rtx_def* %746, %747
  br i1 %cmp1500, label %land.lhs.true.1502, label %if.then.1505

land.lhs.true.1502:                               ; preds = %land.lhs.true.1493
  %748 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %call1503 = call i32 @any_uncondjump_p(%struct.rtx_def* %748)
  %tobool1504 = icmp ne i32 %call1503, 0
  br i1 %tobool1504, label %if.else.1506, label %if.then.1505

if.then.1505:                                     ; preds = %land.lhs.true.1502, %land.lhs.true.1493, %land.lhs.true.1486, %land.lhs.true.1481
  store i32 1, i32* %maybe_never, align 4
  br label %if.end.1540

if.else.1506:                                     ; preds = %land.lhs.true.1502, %lor.lhs.false.1476
  %749 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %750 = bitcast %struct.rtx_def* %749 to i32*
  %bf.load1507 = load i32, i32* %750, align 8
  %bf.clear1508 = and i32 %bf.load1507, 65535
  %cmp1509 = icmp eq i32 %bf.clear1508, 37
  br i1 %cmp1509, label %if.then.1511, label %if.end.1539

if.then.1511:                                     ; preds = %if.else.1506
  %751 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld1512 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %751, i32 0, i32 1
  %arrayidx1513 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1512, i32 0, i64 4
  %rtint1514 = bitcast %union.rtunion_def* %arrayidx1513 to i32*
  %752 = load i32, i32* %rtint1514, align 4
  %cmp1515 = icmp eq i32 %752, -93
  br i1 %cmp1515, label %land.lhs.true.1517, label %if.else.1521

land.lhs.true.1517:                               ; preds = %if.then.1511
  %753 = load i32, i32* %loop_depth, align 4
  %cmp1518 = icmp eq i32 %753, 0
  br i1 %cmp1518, label %if.then.1520, label %if.else.1521

if.then.1520:                                     ; preds = %land.lhs.true.1517
  store i32 0, i32* %call_passed, align 4
  store i32 0, i32* %maybe_never, align 4
  br label %if.end.1538

if.else.1521:                                     ; preds = %land.lhs.true.1517, %if.then.1511
  %754 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld1522 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %754, i32 0, i32 1
  %arrayidx1523 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1522, i32 0, i64 4
  %rtint1524 = bitcast %union.rtunion_def* %arrayidx1523 to i32*
  %755 = load i32, i32* %rtint1524, align 4
  %cmp1525 = icmp eq i32 %755, -96
  br i1 %cmp1525, label %if.then.1527, label %if.else.1529

if.then.1527:                                     ; preds = %if.else.1521
  %756 = load i32, i32* %loop_depth, align 4
  %inc1528 = add nsw i32 %756, 1
  store i32 %inc1528, i32* %loop_depth, align 4
  br label %if.end.1537

if.else.1529:                                     ; preds = %if.else.1521
  %757 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld1530 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %757, i32 0, i32 1
  %arrayidx1531 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1530, i32 0, i64 4
  %rtint1532 = bitcast %union.rtunion_def* %arrayidx1531 to i32*
  %758 = load i32, i32* %rtint1532, align 4
  %cmp1533 = icmp eq i32 %758, -95
  br i1 %cmp1533, label %if.then.1535, label %if.end.1536

if.then.1535:                                     ; preds = %if.else.1529
  %759 = load i32, i32* %loop_depth, align 4
  %dec = add nsw i32 %759, -1
  store i32 %dec, i32* %loop_depth, align 4
  br label %if.end.1536

if.end.1536:                                      ; preds = %if.then.1535, %if.else.1529
  br label %if.end.1537

if.end.1537:                                      ; preds = %if.end.1536, %if.then.1527
  br label %if.end.1538

if.end.1538:                                      ; preds = %if.end.1537, %if.then.1520
  br label %if.end.1539

if.end.1539:                                      ; preds = %if.end.1538, %if.else.1506
  br label %if.end.1540

if.end.1540:                                      ; preds = %if.end.1539, %if.then.1505
  br label %if.end.1541

if.end.1541:                                      ; preds = %if.end.1540, %if.then.1470
  br label %if.end.1542

if.end.1542:                                      ; preds = %if.end.1541, %if.end.1459
  br label %for.inc.1543

for.inc.1543:                                     ; preds = %if.end.1542, %for.end.693
  %760 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %761 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %call1544 = call %struct.rtx_def* @next_insn_in_loop(%struct.loop* %760, %struct.rtx_def* %761)
  store %struct.rtx_def* %call1544, %struct.rtx_def** %p, align 8
  br label %for.cond.190

for.end.1545:                                     ; preds = %for.cond.190
  %762 = load %struct.loop_movables*, %struct.loop_movables** %movables, align 8
  call void @ignore_some_movables(%struct.loop_movables* %762)
  %763 = load %struct.loop_movables*, %struct.loop_movables** %movables, align 8
  call void @force_movables(%struct.loop_movables* %763)
  %764 = load %struct.loop_movables*, %struct.loop_movables** %movables, align 8
  %765 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  call void @combine_movables(%struct.loop_movables* %764, %struct.loop_regs* %765)
  %766 = load i32, i32* @optimize_size, align 4
  %tobool1546 = icmp ne i32 %766, 0
  br i1 %tobool1546, label %if.end.1577, label %if.then.1547

if.then.1547:                                     ; preds = %for.end.1545
  %767 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %768 = load %struct.loop_movables*, %struct.loop_movables** %movables, align 8
  %769 = load i32, i32* %threshold, align 4
  %770 = load i32, i32* %insn_count, align 4
  call void @move_movables(%struct.loop* %767, %struct.loop_movables* %768, i32 %769, i32 %770)
  %call1548 = call i32 @max_reg_num()
  %771 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %num = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %771, i32 0, i32 0
  %772 = load i32, i32* %num, align 4
  %cmp1549 = icmp sgt i32 %call1548, %772
  br i1 %cmp1549, label %if.then.1551, label %if.end.1576

if.then.1551:                                     ; preds = %if.then.1547
  %773 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  call void @loop_regs_scan(%struct.loop* %773, i32 0)
  %774 = load %struct.rtx_def*, %struct.rtx_def** %loop_start, align 8
  store %struct.rtx_def* %774, %struct.rtx_def** %update_start, align 8
  br label %for.cond.1552

for.cond.1552:                                    ; preds = %for.inc.1567, %if.then.1551
  %775 = load %struct.rtx_def*, %struct.rtx_def** %update_start, align 8
  %fld1553 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %775, i32 0, i32 1
  %arrayidx1554 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1553, i32 0, i64 1
  %rtx1555 = bitcast %union.rtunion_def* %arrayidx1554 to %struct.rtx_def**
  %776 = load %struct.rtx_def*, %struct.rtx_def** %rtx1555, align 8
  %tobool1556 = icmp ne %struct.rtx_def* %776, null
  br i1 %tobool1556, label %land.rhs.1557, label %land.end.1565

land.rhs.1557:                                    ; preds = %for.cond.1552
  %777 = load %struct.rtx_def*, %struct.rtx_def** %update_start, align 8
  %fld1558 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %777, i32 0, i32 1
  %arrayidx1559 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1558, i32 0, i64 1
  %rtx1560 = bitcast %union.rtunion_def* %arrayidx1559 to %struct.rtx_def**
  %778 = load %struct.rtx_def*, %struct.rtx_def** %rtx1560, align 8
  %779 = bitcast %struct.rtx_def* %778 to i32*
  %bf.load1561 = load i32, i32* %779, align 8
  %bf.clear1562 = and i32 %bf.load1561, 65535
  %cmp1563 = icmp ne i32 %bf.clear1562, 36
  br label %land.end.1565

land.end.1565:                                    ; preds = %land.rhs.1557, %for.cond.1552
  %780 = phi i1 [ false, %for.cond.1552 ], [ %cmp1563, %land.rhs.1557 ]
  br i1 %780, label %for.body.1566, label %for.end.1571

for.body.1566:                                    ; preds = %land.end.1565
  br label %for.inc.1567

for.inc.1567:                                     ; preds = %for.body.1566
  %781 = load %struct.rtx_def*, %struct.rtx_def** %update_start, align 8
  %fld1568 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %781, i32 0, i32 1
  %arrayidx1569 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1568, i32 0, i64 1
  %rtx1570 = bitcast %union.rtunion_def* %arrayidx1569 to %struct.rtx_def**
  %782 = load %struct.rtx_def*, %struct.rtx_def** %rtx1570, align 8
  store %struct.rtx_def* %782, %struct.rtx_def** %update_start, align 8
  br label %for.cond.1552

for.end.1571:                                     ; preds = %land.end.1565
  %783 = load %struct.rtx_def*, %struct.rtx_def** %loop_end, align 8
  %fld1572 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %783, i32 0, i32 1
  %arrayidx1573 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1572, i32 0, i64 2
  %rtx1574 = bitcast %union.rtunion_def* %arrayidx1573 to %struct.rtx_def**
  %784 = load %struct.rtx_def*, %struct.rtx_def** %rtx1574, align 8
  store %struct.rtx_def* %784, %struct.rtx_def** %update_end, align 8
  %785 = load %struct.rtx_def*, %struct.rtx_def** %update_start, align 8
  %786 = load %struct.rtx_def*, %struct.rtx_def** %update_end, align 8
  %787 = load i32, i32* @loop_max_reg, align 4
  call void @reg_scan_update(%struct.rtx_def* %785, %struct.rtx_def* %786, i32 %787)
  %call1575 = call i32 @max_reg_num()
  store i32 %call1575, i32* @loop_max_reg, align 4
  br label %if.end.1576

if.end.1576:                                      ; preds = %for.end.1571, %if.then.1547
  br label %if.end.1577

if.end.1577:                                      ; preds = %if.end.1576, %for.end.1545
  store i32 0, i32* %i, align 4
  br label %for.cond.1578

for.cond.1578:                                    ; preds = %for.inc.1599, %if.end.1577
  %788 = load i32, i32* %i, align 4
  %789 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %num1579 = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %789, i32 0, i32 0
  %790 = load i32, i32* %num1579, align 4
  %cmp1580 = icmp slt i32 %788, %790
  br i1 %cmp1580, label %for.body.1582, label %for.end.1601

for.body.1582:                                    ; preds = %for.cond.1578
  %791 = load i32, i32* %i, align 4
  %idxprom1583 = sext i32 %791 to i64
  %792 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %array1584 = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %792, i32 0, i32 2
  %793 = load %struct.loop_reg*, %struct.loop_reg** %array1584, align 8
  %arrayidx1585 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %793, i64 %idxprom1583
  %set_in_loop1586 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %arrayidx1585, i32 0, i32 0
  %794 = load i32, i32* %set_in_loop1586, align 4
  %cmp1587 = icmp slt i32 %794, 0
  br i1 %cmp1587, label %if.then.1589, label %if.end.1598

if.then.1589:                                     ; preds = %for.body.1582
  %795 = load i32, i32* %i, align 4
  %idxprom1590 = sext i32 %795 to i64
  %796 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %array1591 = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %796, i32 0, i32 2
  %797 = load %struct.loop_reg*, %struct.loop_reg** %array1591, align 8
  %arrayidx1592 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %797, i64 %idxprom1590
  %n_times_set1593 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %arrayidx1592, i32 0, i32 1
  %798 = load i32, i32* %n_times_set1593, align 4
  %799 = load i32, i32* %i, align 4
  %idxprom1594 = sext i32 %799 to i64
  %800 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %array1595 = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %800, i32 0, i32 2
  %801 = load %struct.loop_reg*, %struct.loop_reg** %array1595, align 8
  %arrayidx1596 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %801, i64 %idxprom1594
  %set_in_loop1597 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %arrayidx1596, i32 0, i32 0
  store i32 %798, i32* %set_in_loop1597, align 4
  br label %if.end.1598

if.end.1598:                                      ; preds = %if.then.1589, %for.body.1582
  br label %for.inc.1599

for.inc.1599:                                     ; preds = %if.end.1598
  %802 = load i32, i32* %i, align 4
  %inc1600 = add nsw i32 %802, 1
  store i32 %inc1600, i32* %i, align 4
  br label %for.cond.1578

for.end.1601:                                     ; preds = %for.cond.1578
  %803 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  call void @load_mems(%struct.loop* %803)
  %call1602 = call i32 @max_reg_num()
  %804 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %num1603 = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %804, i32 0, i32 0
  %805 = load i32, i32* %num1603, align 4
  %cmp1604 = icmp sgt i32 %call1602, %805
  br i1 %cmp1604, label %if.then.1606, label %if.end.1607

if.then.1606:                                     ; preds = %for.end.1601
  %806 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  call void @loop_regs_scan(%struct.loop* %806, i32 0)
  br label %if.end.1607

if.end.1607:                                      ; preds = %if.then.1606, %for.end.1601
  %807 = load %struct.rtx_def*, %struct.rtx_def** %loop_start, align 8
  store %struct.rtx_def* %807, %struct.rtx_def** %update_start, align 8
  br label %for.cond.1608

for.cond.1608:                                    ; preds = %for.inc.1623, %if.end.1607
  %808 = load %struct.rtx_def*, %struct.rtx_def** %update_start, align 8
  %fld1609 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %808, i32 0, i32 1
  %arrayidx1610 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1609, i32 0, i64 1
  %rtx1611 = bitcast %union.rtunion_def* %arrayidx1610 to %struct.rtx_def**
  %809 = load %struct.rtx_def*, %struct.rtx_def** %rtx1611, align 8
  %tobool1612 = icmp ne %struct.rtx_def* %809, null
  br i1 %tobool1612, label %land.rhs.1613, label %land.end.1621

land.rhs.1613:                                    ; preds = %for.cond.1608
  %810 = load %struct.rtx_def*, %struct.rtx_def** %update_start, align 8
  %fld1614 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %810, i32 0, i32 1
  %arrayidx1615 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1614, i32 0, i64 1
  %rtx1616 = bitcast %union.rtunion_def* %arrayidx1615 to %struct.rtx_def**
  %811 = load %struct.rtx_def*, %struct.rtx_def** %rtx1616, align 8
  %812 = bitcast %struct.rtx_def* %811 to i32*
  %bf.load1617 = load i32, i32* %812, align 8
  %bf.clear1618 = and i32 %bf.load1617, 65535
  %cmp1619 = icmp ne i32 %bf.clear1618, 36
  br label %land.end.1621

land.end.1621:                                    ; preds = %land.rhs.1613, %for.cond.1608
  %813 = phi i1 [ false, %for.cond.1608 ], [ %cmp1619, %land.rhs.1613 ]
  br i1 %813, label %for.body.1622, label %for.end.1627

for.body.1622:                                    ; preds = %land.end.1621
  br label %for.inc.1623

for.inc.1623:                                     ; preds = %for.body.1622
  %814 = load %struct.rtx_def*, %struct.rtx_def** %update_start, align 8
  %fld1624 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %814, i32 0, i32 1
  %arrayidx1625 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1624, i32 0, i64 1
  %rtx1626 = bitcast %union.rtunion_def* %arrayidx1625 to %struct.rtx_def**
  %815 = load %struct.rtx_def*, %struct.rtx_def** %rtx1626, align 8
  store %struct.rtx_def* %815, %struct.rtx_def** %update_start, align 8
  br label %for.cond.1608

for.end.1627:                                     ; preds = %land.end.1621
  %816 = load %struct.rtx_def*, %struct.rtx_def** %loop_end, align 8
  %fld1628 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %816, i32 0, i32 1
  %arrayidx1629 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1628, i32 0, i64 2
  %rtx1630 = bitcast %union.rtunion_def* %arrayidx1629 to %struct.rtx_def**
  %817 = load %struct.rtx_def*, %struct.rtx_def** %rtx1630, align 8
  store %struct.rtx_def* %817, %struct.rtx_def** %update_end, align 8
  %818 = load %struct.rtx_def*, %struct.rtx_def** %update_start, align 8
  %819 = load %struct.rtx_def*, %struct.rtx_def** %update_end, align 8
  %820 = load i32, i32* @loop_max_reg, align 4
  call void @reg_scan_update(%struct.rtx_def* %818, %struct.rtx_def* %819, i32 %820)
  %call1631 = call i32 @max_reg_num()
  store i32 %call1631, i32* @loop_max_reg, align 4
  %821 = load i32, i32* @flag_strength_reduce, align 4
  %tobool1632 = icmp ne i32 %821, 0
  br i1 %tobool1632, label %if.then.1633, label %if.end.1663

if.then.1633:                                     ; preds = %for.end.1627
  %822 = load %struct.rtx_def*, %struct.rtx_def** %update_end, align 8
  %tobool1634 = icmp ne %struct.rtx_def* %822, null
  br i1 %tobool1634, label %land.lhs.true.1635, label %if.end.1645

land.lhs.true.1635:                               ; preds = %if.then.1633
  %823 = load %struct.rtx_def*, %struct.rtx_def** %update_end, align 8
  %824 = bitcast %struct.rtx_def* %823 to i32*
  %bf.load1636 = load i32, i32* %824, align 8
  %bf.clear1637 = and i32 %bf.load1636, 65535
  %cmp1638 = icmp eq i32 %bf.clear1637, 36
  br i1 %cmp1638, label %if.then.1640, label %if.end.1645

if.then.1640:                                     ; preds = %land.lhs.true.1635
  %825 = load %struct.rtx_def*, %struct.rtx_def** %update_end, align 8
  %fld1641 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %825, i32 0, i32 1
  %arrayidx1642 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1641, i32 0, i64 3
  %rtint1643 = bitcast %union.rtunion_def* %arrayidx1642 to i32*
  %826 = load i32, i32* %rtint1643, align 4
  %inc1644 = add nsw i32 %826, 1
  store i32 %inc1644, i32* %rtint1643, align 4
  br label %if.end.1645

if.end.1645:                                      ; preds = %if.then.1640, %land.lhs.true.1635, %if.then.1633
  %827 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %828 = load i32, i32* %flags.addr, align 4
  call void @strength_reduce(%struct.loop* %827, i32 %828)
  %829 = load %struct.rtx_def*, %struct.rtx_def** %update_start, align 8
  %830 = load %struct.rtx_def*, %struct.rtx_def** %update_end, align 8
  %831 = load i32, i32* @loop_max_reg, align 4
  call void @reg_scan_update(%struct.rtx_def* %829, %struct.rtx_def* %830, i32 %831)
  %call1646 = call i32 @max_reg_num()
  store i32 %call1646, i32* @loop_max_reg, align 4
  %832 = load %struct.rtx_def*, %struct.rtx_def** %update_end, align 8
  %tobool1647 = icmp ne %struct.rtx_def* %832, null
  br i1 %tobool1647, label %land.lhs.true.1648, label %if.end.1662

land.lhs.true.1648:                               ; preds = %if.end.1645
  %833 = load %struct.rtx_def*, %struct.rtx_def** %update_end, align 8
  %834 = bitcast %struct.rtx_def* %833 to i32*
  %bf.load1649 = load i32, i32* %834, align 8
  %bf.clear1650 = and i32 %bf.load1649, 65535
  %cmp1651 = icmp eq i32 %bf.clear1650, 36
  br i1 %cmp1651, label %land.lhs.true.1653, label %if.end.1662

land.lhs.true.1653:                               ; preds = %land.lhs.true.1648
  %835 = load %struct.rtx_def*, %struct.rtx_def** %update_end, align 8
  %fld1654 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %835, i32 0, i32 1
  %arrayidx1655 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1654, i32 0, i64 3
  %rtint1656 = bitcast %union.rtunion_def* %arrayidx1655 to i32*
  %836 = load i32, i32* %rtint1656, align 4
  %dec1657 = add nsw i32 %836, -1
  store i32 %dec1657, i32* %rtint1656, align 4
  %cmp1658 = icmp eq i32 %dec1657, 0
  br i1 %cmp1658, label %if.then.1660, label %if.end.1662

if.then.1660:                                     ; preds = %land.lhs.true.1653
  %837 = load %struct.rtx_def*, %struct.rtx_def** %update_end, align 8
  %call1661 = call %struct.rtx_def* @delete_related_insns(%struct.rtx_def* %837)
  br label %if.end.1662

if.end.1662:                                      ; preds = %if.then.1660, %land.lhs.true.1653, %land.lhs.true.1648, %if.end.1645
  br label %if.end.1663

if.end.1663:                                      ; preds = %if.end.1662, %for.end.1627
  %838 = load %struct.loop_movables*, %struct.loop_movables** %movables, align 8
  call void @loop_movables_free(%struct.loop_movables* %838)
  %839 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %array1664 = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %839, i32 0, i32 2
  %840 = load %struct.loop_reg*, %struct.loop_reg** %array1664, align 8
  %841 = bitcast %struct.loop_reg* %840 to i8*
  call void @free(i8* %841) #4
  %842 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %array1665 = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %842, i32 0, i32 2
  store %struct.loop_reg* null, %struct.loop_reg** %array1665, align 8
  %843 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %num1666 = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %843, i32 0, i32 0
  store i32 0, i32* %num1666, align 4
  br label %return

return:                                           ; preds = %if.end.1663, %if.end.166
  ret void
}

declare void @reorder_blocks() #1

declare void @end_alias_analysis() #1

; Function Attrs: nounwind
declare void @free(i8*) #3

; Function Attrs: nounwind uwtable
define void @record_excess_regs(%struct.rtx_def* %in_this, %struct.rtx_def* %not_in_this, %struct.rtx_def** %output) #0 {
entry:
  %in_this.addr = alloca %struct.rtx_def*, align 8
  %not_in_this.addr = alloca %struct.rtx_def*, align 8
  %output.addr = alloca %struct.rtx_def**, align 8
  %code = alloca i32, align 4
  %fmt = alloca i8*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.rtx_def* %in_this, %struct.rtx_def** %in_this.addr, align 8
  store %struct.rtx_def* %not_in_this, %struct.rtx_def** %not_in_this.addr, align 8
  store %struct.rtx_def** %output, %struct.rtx_def*** %output.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %in_this.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  store i32 %bf.clear, i32* %code, align 4
  %2 = load i32, i32* %code, align 4
  switch i32 %2, label %sw.default [
    i32 59, label %sw.bb
    i32 69, label %sw.bb
    i32 54, label %sw.bb
    i32 55, label %sw.bb
    i32 58, label %sw.bb
    i32 68, label %sw.bb
    i32 67, label %sw.bb
    i32 61, label %sw.bb.1
  ]

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry
  br label %for.end.31

sw.bb.1:                                          ; preds = %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %in_this.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx to i32*
  %4 = load i32, i32* %rtuint, align 4
  %cmp = icmp uge i32 %4, 53
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %sw.bb.1
  %5 = load %struct.rtx_def*, %struct.rtx_def** %in_this.addr, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %not_in_this.addr, align 8
  %call = call i32 @reg_mentioned_p(%struct.rtx_def* %5, %struct.rtx_def* %6)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %7 = load %struct.rtx_def*, %struct.rtx_def** %in_this.addr, align 8
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %output.addr, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %8, align 8
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 0, %struct.rtx_def* %7, %struct.rtx_def* %9)
  %10 = load %struct.rtx_def**, %struct.rtx_def*** %output.addr, align 8
  store %struct.rtx_def* %call2, %struct.rtx_def** %10, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %sw.bb.1
  br label %for.end.31

sw.default:                                       ; preds = %entry
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default
  %11 = load i32, i32* %code, align 4
  %idxprom = sext i32 %11 to i64
  %arrayidx3 = getelementptr inbounds [153 x i8*], [153 x i8*]* @rtx_format, i32 0, i64 %idxprom
  %12 = load i8*, i8** %arrayidx3, align 8
  store i8* %12, i8** %fmt, align 8
  %13 = load i32, i32* %code, align 4
  %idxprom4 = sext i32 %13 to i64
  %arrayidx5 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_length, i32 0, i64 %idxprom4
  %14 = load i8, i8* %arrayidx5, align 1
  %conv = zext i8 %14 to i32
  %sub = sub nsw i32 %conv, 1
  store i32 %sub, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.30, %sw.epilog
  %15 = load i32, i32* %i, align 4
  %cmp6 = icmp sge i32 %15, 0
  br i1 %cmp6, label %for.body, label %for.end.31

for.body:                                         ; preds = %for.cond
  %16 = load i32, i32* %i, align 4
  %idxprom8 = sext i32 %16 to i64
  %17 = load i8*, i8** %fmt, align 8
  %arrayidx9 = getelementptr inbounds i8, i8* %17, i64 %idxprom8
  %18 = load i8, i8* %arrayidx9, align 1
  %conv10 = sext i8 %18 to i32
  switch i32 %conv10, label %sw.epilog.29 [
    i32 69, label %sw.bb.11
    i32 101, label %sw.bb.25
  ]

sw.bb.11:                                         ; preds = %for.body
  store i32 0, i32* %j, align 4
  br label %for.cond.12

for.cond.12:                                      ; preds = %for.inc, %sw.bb.11
  %19 = load i32, i32* %j, align 4
  %20 = load i32, i32* %i, align 4
  %idxprom13 = sext i32 %20 to i64
  %21 = load %struct.rtx_def*, %struct.rtx_def** %in_this.addr, align 8
  %fld14 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1
  %arrayidx15 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld14, i32 0, i64 %idxprom13
  %rtvec = bitcast %union.rtunion_def* %arrayidx15 to %struct.rtvec_def**
  %22 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec, align 8
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %22, i32 0, i32 0
  %23 = load i32, i32* %num_elem, align 4
  %cmp16 = icmp slt i32 %19, %23
  br i1 %cmp16, label %for.body.18, label %for.end

for.body.18:                                      ; preds = %for.cond.12
  %24 = load i32, i32* %j, align 4
  %idxprom19 = sext i32 %24 to i64
  %25 = load i32, i32* %i, align 4
  %idxprom20 = sext i32 %25 to i64
  %26 = load %struct.rtx_def*, %struct.rtx_def** %in_this.addr, align 8
  %fld21 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %26, i32 0, i32 1
  %arrayidx22 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld21, i32 0, i64 %idxprom20
  %rtvec23 = bitcast %union.rtunion_def* %arrayidx22 to %struct.rtvec_def**
  %27 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec23, align 8
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %27, i32 0, i32 1
  %arrayidx24 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i32 0, i64 %idxprom19
  %28 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx24, align 8
  %29 = load %struct.rtx_def*, %struct.rtx_def** %not_in_this.addr, align 8
  %30 = load %struct.rtx_def**, %struct.rtx_def*** %output.addr, align 8
  call void @record_excess_regs(%struct.rtx_def* %28, %struct.rtx_def* %29, %struct.rtx_def** %30)
  br label %for.inc

for.inc:                                          ; preds = %for.body.18
  %31 = load i32, i32* %j, align 4
  %inc = add nsw i32 %31, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond.12

for.end:                                          ; preds = %for.cond.12
  br label %sw.epilog.29

sw.bb.25:                                         ; preds = %for.body
  %32 = load i32, i32* %i, align 4
  %idxprom26 = sext i32 %32 to i64
  %33 = load %struct.rtx_def*, %struct.rtx_def** %in_this.addr, align 8
  %fld27 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1
  %arrayidx28 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld27, i32 0, i64 %idxprom26
  %rtx = bitcast %union.rtunion_def* %arrayidx28 to %struct.rtx_def**
  %34 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %35 = load %struct.rtx_def*, %struct.rtx_def** %not_in_this.addr, align 8
  %36 = load %struct.rtx_def**, %struct.rtx_def*** %output.addr, align 8
  call void @record_excess_regs(%struct.rtx_def* %34, %struct.rtx_def* %35, %struct.rtx_def** %36)
  br label %sw.epilog.29

sw.epilog.29:                                     ; preds = %for.body, %sw.bb.25, %for.end
  br label %for.inc.30

for.inc.30:                                       ; preds = %sw.epilog.29
  %37 = load i32, i32* %i, align 4
  %dec = add nsw i32 %37, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond

for.end.31:                                       ; preds = %sw.bb, %if.end, %for.cond
  ret void
}

declare i32 @reg_mentioned_p(%struct.rtx_def*, %struct.rtx_def*) #1

declare %struct.rtx_def* @gen_rtx_fmt_ee(i32, i32, %struct.rtx_def*, %struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @libcall_other_reg(%struct.rtx_def* %insn, %struct.rtx_def* %equiv) #0 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %equiv.addr = alloca %struct.rtx_def*, align 8
  %note = alloca %struct.rtx_def*, align 8
  %p = alloca %struct.rtx_def*, align 8
  %output = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  store %struct.rtx_def* %equiv, %struct.rtx_def** %equiv.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %0, i32 6, %struct.rtx_def* null)
  store %struct.rtx_def* %call, %struct.rtx_def** %note, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %2 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %p, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %output, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %cmp = icmp ne %struct.rtx_def* %3, %4
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %6 = bitcast %struct.rtx_def* %5 to i32*
  %bf.load = load i32, i32* %6, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp1 = icmp eq i32 %bf.clear, 32
  br i1 %cmp1, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.body
  %7 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %8 = bitcast %struct.rtx_def* %7 to i32*
  %bf.load2 = load i32, i32* %8, align 8
  %bf.clear3 = and i32 %bf.load2, 65535
  %cmp4 = icmp eq i32 %bf.clear3, 33
  br i1 %cmp4, label %if.then, label %lor.lhs.false.5

lor.lhs.false.5:                                  ; preds = %lor.lhs.false
  %9 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %10 = bitcast %struct.rtx_def* %9 to i32*
  %bf.load6 = load i32, i32* %10, align 8
  %bf.clear7 = and i32 %bf.load6, 65535
  %cmp8 = icmp eq i32 %bf.clear7, 34
  br i1 %cmp8, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false.5, %lor.lhs.false, %while.body
  %11 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld9 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1
  %arrayidx10 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld9, i32 0, i64 3
  %rtx11 = bitcast %union.rtunion_def* %arrayidx10 to %struct.rtx_def**
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rtx11, align 8
  %13 = load %struct.rtx_def*, %struct.rtx_def** %equiv.addr, align 8
  call void @record_excess_regs(%struct.rtx_def* %12, %struct.rtx_def* %13, %struct.rtx_def** %output)
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false.5
  %14 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld12 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1
  %arrayidx13 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld12, i32 0, i64 2
  %rtx14 = bitcast %union.rtunion_def* %arrayidx13 to %struct.rtx_def**
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rtx14, align 8
  store %struct.rtx_def* %15, %struct.rtx_def** %p, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %16 = load %struct.rtx_def*, %struct.rtx_def** %output, align 8
  ret %struct.rtx_def* %16
}

declare %struct.rtx_def* @find_reg_note(%struct.rtx_def*, i32, %struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define i32 @loop_invariant_p(%struct.loop* %loop, %struct.rtx_def* %x) #0 {
entry:
  %retval = alloca i32, align 4
  %loop.addr = alloca %struct.loop*, align 8
  %x.addr = alloca %struct.rtx_def*, align 8
  %loop_info = alloca %struct.loop_info*, align 8
  %regs = alloca %struct.loop_regs*, align 8
  %i = alloca i32, align 4
  %code = alloca i32, align 4
  %fmt = alloca i8*, align 8
  %conditional = alloca i32, align 4
  %mem_list_entry = alloca %struct.rtx_def*, align 8
  %tem = alloca i32, align 4
  %j = alloca i32, align 4
  %tem111 = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %aux = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 22
  %1 = load i8*, i8** %aux, align 8
  %2 = bitcast i8* %1 to %struct.loop_info*
  store %struct.loop_info* %2, %struct.loop_info** %loop_info, align 8
  %3 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %aux1 = getelementptr inbounds %struct.loop, %struct.loop* %3, i32 0, i32 22
  %4 = load i8*, i8** %aux1, align 8
  %5 = bitcast i8* %4 to %struct.loop_info*
  %regs2 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %5, i32 0, i32 28
  store %struct.loop_regs* %regs2, %struct.loop_regs** %regs, align 8
  store i32 0, i32* %conditional, align 4
  %6 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %cmp = icmp eq %struct.rtx_def* %6, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %7 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %8 = bitcast %struct.rtx_def* %7 to i32*
  %bf.load = load i32, i32* %8, align 8
  %bf.clear = and i32 %bf.load, 65535
  store i32 %bf.clear, i32* %code, align 4
  %9 = load i32, i32* %code, align 4
  switch i32 %9, label %sw.default [
    i32 54, label %sw.bb
    i32 55, label %sw.bb
    i32 68, label %sw.bb
    i32 58, label %sw.bb
    i32 67, label %sw.bb.3
    i32 59, label %sw.bb.5
    i32 69, label %sw.bb.5
    i32 43, label %sw.bb.5
    i32 61, label %sw.bb.6
    i32 66, label %sw.bb.48
    i32 41, label %sw.bb.64
  ]

sw.bb:                                            ; preds = %if.end, %if.end, %if.end, %if.end
  store i32 1, i32* %retval
  br label %return

sw.bb.3:                                          ; preds = %if.end
  %10 = load i32, i32* @flag_unroll_loops, align 4
  %tobool = icmp ne i32 %10, 0
  br i1 %tobool, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %sw.bb.3
  store i32 0, i32* %retval
  br label %return

if.else:                                          ; preds = %sw.bb.3
  store i32 1, i32* %retval
  br label %return

sw.bb.5:                                          ; preds = %if.end, %if.end, %if.end
  store i32 0, i32* %retval
  br label %return

sw.bb.6:                                          ; preds = %if.end
  %11 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %12 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 3), align 8
  %cmp7 = icmp eq %struct.rtx_def* %11, %12
  br i1 %cmp7, label %land.lhs.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %sw.bb.6
  %13 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %14 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 4), align 8
  %cmp8 = icmp eq %struct.rtx_def* %13, %14
  br i1 %cmp8, label %land.lhs.true, label %lor.lhs.false.9

lor.lhs.false.9:                                  ; preds = %lor.lhs.false
  %15 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %16 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 5), align 8
  %cmp10 = icmp eq %struct.rtx_def* %15, %16
  br i1 %cmp10, label %land.lhs.true, label %lor.lhs.false.11

lor.lhs.false.11:                                 ; preds = %lor.lhs.false.9
  %17 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %18 = load %struct.rtx_def*, %struct.rtx_def** @pic_offset_table_rtx, align 8
  %cmp12 = icmp eq %struct.rtx_def* %17, %18
  br i1 %cmp12, label %land.lhs.true, label %if.end.17

land.lhs.true:                                    ; preds = %lor.lhs.false.11, %lor.lhs.false.9, %lor.lhs.false, %sw.bb.6
  %19 = load %struct.function*, %struct.function** @cfun, align 8
  %has_nonlocal_goto = getelementptr inbounds %struct.function, %struct.function* %19, i32 0, i32 56
  %20 = bitcast i24* %has_nonlocal_goto to i32*
  %bf.load13 = load i32, i32* %20, align 8
  %bf.lshr = lshr i32 %bf.load13, 9
  %bf.clear14 = and i32 %bf.lshr, 1
  %tobool15 = icmp ne i32 %bf.clear14, 0
  br i1 %tobool15, label %if.end.17, label %if.then.16

if.then.16:                                       ; preds = %land.lhs.true
  store i32 1, i32* %retval
  br label %return

if.end.17:                                        ; preds = %land.lhs.true, %lor.lhs.false.11
  %21 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %aux18 = getelementptr inbounds %struct.loop, %struct.loop* %21, i32 0, i32 22
  %22 = load i8*, i8** %aux18, align 8
  %23 = bitcast i8* %22 to %struct.loop_info*
  %has_call = getelementptr inbounds %struct.loop_info, %struct.loop_info* %23, i32 0, i32 0
  %24 = load i32, i32* %has_call, align 4
  %tobool19 = icmp ne i32 %24, 0
  br i1 %tobool19, label %land.lhs.true.20, label %if.end.29

land.lhs.true.20:                                 ; preds = %if.end.17
  %25 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx to i32*
  %26 = load i32, i32* %rtuint, align 4
  %cmp21 = icmp ult i32 %26, 53
  br i1 %cmp21, label %land.lhs.true.22, label %if.end.29

land.lhs.true.22:                                 ; preds = %land.lhs.true.20
  %27 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld23 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1
  %arrayidx24 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld23, i32 0, i64 0
  %rtuint25 = bitcast %union.rtunion_def* %arrayidx24 to i32*
  %28 = load i32, i32* %rtuint25, align 4
  %idxprom = zext i32 %28 to i64
  %arrayidx26 = getelementptr inbounds [53 x i8], [53 x i8]* @call_used_regs, i32 0, i64 %idxprom
  %29 = load i8, i8* %arrayidx26, align 1
  %conv = sext i8 %29 to i32
  %tobool27 = icmp ne i32 %conv, 0
  br i1 %tobool27, label %if.then.28, label %if.end.29

if.then.28:                                       ; preds = %land.lhs.true.22
  store i32 0, i32* %retval
  br label %return

if.end.29:                                        ; preds = %land.lhs.true.22, %land.lhs.true.20, %if.end.17
  %30 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld30 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %30, i32 0, i32 1
  %arrayidx31 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld30, i32 0, i64 0
  %rtuint32 = bitcast %union.rtunion_def* %arrayidx31 to i32*
  %31 = load i32, i32* %rtuint32, align 4
  %idxprom33 = zext i32 %31 to i64
  %32 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %array = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %32, i32 0, i32 2
  %33 = load %struct.loop_reg*, %struct.loop_reg** %array, align 8
  %arrayidx34 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %33, i64 %idxprom33
  %set_in_loop = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %arrayidx34, i32 0, i32 0
  %34 = load i32, i32* %set_in_loop, align 4
  %cmp35 = icmp slt i32 %34, 0
  br i1 %cmp35, label %if.then.37, label %if.end.38

if.then.37:                                       ; preds = %if.end.29
  store i32 2, i32* %retval
  br label %return

if.end.38:                                        ; preds = %if.end.29
  %35 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld39 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %35, i32 0, i32 1
  %arrayidx40 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld39, i32 0, i64 0
  %rtuint41 = bitcast %union.rtunion_def* %arrayidx40 to i32*
  %36 = load i32, i32* %rtuint41, align 4
  %idxprom42 = zext i32 %36 to i64
  %37 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %array43 = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %37, i32 0, i32 2
  %38 = load %struct.loop_reg*, %struct.loop_reg** %array43, align 8
  %arrayidx44 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %38, i64 %idxprom42
  %set_in_loop45 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %arrayidx44, i32 0, i32 0
  %39 = load i32, i32* %set_in_loop45, align 4
  %cmp46 = icmp eq i32 %39, 0
  %conv47 = zext i1 %cmp46 to i32
  store i32 %conv47, i32* %retval
  br label %return

sw.bb.48:                                         ; preds = %if.end
  %40 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %41 = bitcast %struct.rtx_def* %40 to i32*
  %bf.load49 = load i32, i32* %41, align 8
  %bf.lshr50 = lshr i32 %bf.load49, 27
  %bf.clear51 = and i32 %bf.lshr50, 1
  %tobool52 = icmp ne i32 %bf.clear51, 0
  br i1 %tobool52, label %if.then.53, label %if.end.54

if.then.53:                                       ; preds = %sw.bb.48
  store i32 0, i32* %retval
  br label %return

if.end.54:                                        ; preds = %sw.bb.48
  %42 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %store_mems = getelementptr inbounds %struct.loop_info, %struct.loop_info* %42, i32 0, i32 19
  %43 = load %struct.rtx_def*, %struct.rtx_def** %store_mems, align 8
  store %struct.rtx_def* %43, %struct.rtx_def** %mem_list_entry, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end.60, %if.end.54
  %44 = load %struct.rtx_def*, %struct.rtx_def** %mem_list_entry, align 8
  %tobool55 = icmp ne %struct.rtx_def* %44, null
  br i1 %tobool55, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %45 = load %struct.rtx_def*, %struct.rtx_def** %mem_list_entry, align 8
  %fld56 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %45, i32 0, i32 1
  %arrayidx57 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld56, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx57 to %struct.rtx_def**
  %46 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %47 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %call = call i32 @true_dependence(%struct.rtx_def* %46, i32 0, %struct.rtx_def* %47, i32 (%struct.rtx_def*, i32)* @rtx_varies_p)
  %tobool58 = icmp ne i32 %call, 0
  br i1 %tobool58, label %if.then.59, label %if.end.60

if.then.59:                                       ; preds = %while.body
  store i32 0, i32* %retval
  br label %return

if.end.60:                                        ; preds = %while.body
  %48 = load %struct.rtx_def*, %struct.rtx_def** %mem_list_entry, align 8
  %fld61 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %48, i32 0, i32 1
  %arrayidx62 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld61, i32 0, i64 1
  %rtx63 = bitcast %union.rtunion_def* %arrayidx62 to %struct.rtx_def**
  %49 = load %struct.rtx_def*, %struct.rtx_def** %rtx63, align 8
  store %struct.rtx_def* %49, %struct.rtx_def** %mem_list_entry, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %sw.epilog

sw.bb.64:                                         ; preds = %if.end
  %50 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %51 = bitcast %struct.rtx_def* %50 to i32*
  %bf.load65 = load i32, i32* %51, align 8
  %bf.lshr66 = lshr i32 %bf.load65, 27
  %bf.clear67 = and i32 %bf.lshr66, 1
  %tobool68 = icmp ne i32 %bf.clear67, 0
  br i1 %tobool68, label %if.then.69, label %if.end.70

if.then.69:                                       ; preds = %sw.bb.64
  store i32 0, i32* %retval
  br label %return

if.end.70:                                        ; preds = %sw.bb.64
  br label %sw.epilog

sw.default:                                       ; preds = %if.end
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %if.end.70, %while.end
  %52 = load i32, i32* %code, align 4
  %idxprom71 = sext i32 %52 to i64
  %arrayidx72 = getelementptr inbounds [153 x i8*], [153 x i8*]* @rtx_format, i32 0, i64 %idxprom71
  %53 = load i8*, i8** %arrayidx72, align 8
  store i8* %53, i8** %fmt, align 8
  %54 = load i32, i32* %code, align 4
  %idxprom73 = sext i32 %54 to i64
  %arrayidx74 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_length, i32 0, i64 %idxprom73
  %55 = load i8, i8* %arrayidx74, align 1
  %conv75 = zext i8 %55 to i32
  %sub = sub nsw i32 %conv75, 1
  store i32 %sub, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.129, %sw.epilog
  %56 = load i32, i32* %i, align 4
  %cmp76 = icmp sge i32 %56, 0
  br i1 %cmp76, label %for.body, label %for.end.130

for.body:                                         ; preds = %for.cond
  %57 = load i32, i32* %i, align 4
  %idxprom78 = sext i32 %57 to i64
  %58 = load i8*, i8** %fmt, align 8
  %arrayidx79 = getelementptr inbounds i8, i8* %58, i64 %idxprom78
  %59 = load i8, i8* %arrayidx79, align 1
  %conv80 = sext i8 %59 to i32
  %cmp81 = icmp eq i32 %conv80, 101
  br i1 %cmp81, label %if.then.83, label %if.else.97

if.then.83:                                       ; preds = %for.body
  %60 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %61 = load i32, i32* %i, align 4
  %idxprom84 = sext i32 %61 to i64
  %62 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld85 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %62, i32 0, i32 1
  %arrayidx86 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld85, i32 0, i64 %idxprom84
  %rtx87 = bitcast %union.rtunion_def* %arrayidx86 to %struct.rtx_def**
  %63 = load %struct.rtx_def*, %struct.rtx_def** %rtx87, align 8
  %call88 = call i32 @loop_invariant_p(%struct.loop* %60, %struct.rtx_def* %63)
  store i32 %call88, i32* %tem, align 4
  %64 = load i32, i32* %tem, align 4
  %cmp89 = icmp eq i32 %64, 0
  br i1 %cmp89, label %if.then.91, label %if.end.92

if.then.91:                                       ; preds = %if.then.83
  store i32 0, i32* %retval
  br label %return

if.end.92:                                        ; preds = %if.then.83
  %65 = load i32, i32* %tem, align 4
  %cmp93 = icmp eq i32 %65, 2
  br i1 %cmp93, label %if.then.95, label %if.end.96

if.then.95:                                       ; preds = %if.end.92
  store i32 1, i32* %conditional, align 4
  br label %if.end.96

if.end.96:                                        ; preds = %if.then.95, %if.end.92
  br label %if.end.128

if.else.97:                                       ; preds = %for.body
  %66 = load i32, i32* %i, align 4
  %idxprom98 = sext i32 %66 to i64
  %67 = load i8*, i8** %fmt, align 8
  %arrayidx99 = getelementptr inbounds i8, i8* %67, i64 %idxprom98
  %68 = load i8, i8* %arrayidx99, align 1
  %conv100 = sext i8 %68 to i32
  %cmp101 = icmp eq i32 %conv100, 69
  br i1 %cmp101, label %if.then.103, label %if.end.127

if.then.103:                                      ; preds = %if.else.97
  store i32 0, i32* %j, align 4
  br label %for.cond.104

for.cond.104:                                     ; preds = %for.inc, %if.then.103
  %69 = load i32, i32* %j, align 4
  %70 = load i32, i32* %i, align 4
  %idxprom105 = sext i32 %70 to i64
  %71 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld106 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %71, i32 0, i32 1
  %arrayidx107 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld106, i32 0, i64 %idxprom105
  %rtvec = bitcast %union.rtunion_def* %arrayidx107 to %struct.rtvec_def**
  %72 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec, align 8
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %72, i32 0, i32 0
  %73 = load i32, i32* %num_elem, align 4
  %cmp108 = icmp slt i32 %69, %73
  br i1 %cmp108, label %for.body.110, label %for.end

for.body.110:                                     ; preds = %for.cond.104
  %74 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %75 = load i32, i32* %j, align 4
  %idxprom112 = sext i32 %75 to i64
  %76 = load i32, i32* %i, align 4
  %idxprom113 = sext i32 %76 to i64
  %77 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld114 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %77, i32 0, i32 1
  %arrayidx115 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld114, i32 0, i64 %idxprom113
  %rtvec116 = bitcast %union.rtunion_def* %arrayidx115 to %struct.rtvec_def**
  %78 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec116, align 8
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %78, i32 0, i32 1
  %arrayidx117 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i32 0, i64 %idxprom112
  %79 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx117, align 8
  %call118 = call i32 @loop_invariant_p(%struct.loop* %74, %struct.rtx_def* %79)
  store i32 %call118, i32* %tem111, align 4
  %80 = load i32, i32* %tem111, align 4
  %cmp119 = icmp eq i32 %80, 0
  br i1 %cmp119, label %if.then.121, label %if.end.122

if.then.121:                                      ; preds = %for.body.110
  store i32 0, i32* %retval
  br label %return

if.end.122:                                       ; preds = %for.body.110
  %81 = load i32, i32* %tem111, align 4
  %cmp123 = icmp eq i32 %81, 2
  br i1 %cmp123, label %if.then.125, label %if.end.126

if.then.125:                                      ; preds = %if.end.122
  store i32 1, i32* %conditional, align 4
  br label %if.end.126

if.end.126:                                       ; preds = %if.then.125, %if.end.122
  br label %for.inc

for.inc:                                          ; preds = %if.end.126
  %82 = load i32, i32* %j, align 4
  %inc = add nsw i32 %82, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond.104

for.end:                                          ; preds = %for.cond.104
  br label %if.end.127

if.end.127:                                       ; preds = %for.end, %if.else.97
  br label %if.end.128

if.end.128:                                       ; preds = %if.end.127, %if.end.96
  br label %for.inc.129

for.inc.129:                                      ; preds = %if.end.128
  %83 = load i32, i32* %i, align 4
  %dec = add nsw i32 %83, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond

for.end.130:                                      ; preds = %for.cond
  %84 = load i32, i32* %conditional, align 4
  %add = add nsw i32 1, %84
  store i32 %add, i32* %retval
  br label %return

return:                                           ; preds = %for.end.130, %if.then.121, %if.then.91, %if.then.69, %if.then.59, %if.then.53, %if.end.38, %if.then.37, %if.then.28, %if.then.16, %sw.bb.5, %if.else, %if.then.4, %sw.bb, %if.then
  %85 = load i32, i32* %retval
  ret i32 %85
}

declare i32 @true_dependence(%struct.rtx_def*, i32, %struct.rtx_def*, i32 (%struct.rtx_def*, i32)*) #1

declare i32 @rtx_varies_p(%struct.rtx_def*, i32) #1

; Function Attrs: nounwind uwtable
define void @for_each_insn_in_loop(%struct.loop* %loop, %struct.rtx_def* (%struct.loop*, %struct.rtx_def*, i32, i32)* %fncall) #0 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %fncall.addr = alloca %struct.rtx_def* (%struct.loop*, %struct.rtx_def*, i32, i32)*, align 8
  %not_every_iteration = alloca i32, align 4
  %maybe_multiple = alloca i32, align 4
  %past_loop_latch = alloca i32, align 4
  %loop_depth = alloca i32, align 4
  %p = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %label = alloca %struct.rtx_def*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  store %struct.rtx_def* (%struct.loop*, %struct.rtx_def*, i32, i32)* %fncall, %struct.rtx_def* (%struct.loop*, %struct.rtx_def*, i32, i32)** %fncall.addr, align 8
  store i32 0, i32* %not_every_iteration, align 4
  store i32 0, i32* %maybe_multiple, align 4
  store i32 0, i32* %past_loop_latch, align 4
  store i32 0, i32* %loop_depth, align 4
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %scan_start = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 29
  %1 = load %struct.rtx_def*, %struct.rtx_def** %scan_start, align 8
  %call = call %struct.rtx_def* @prev_nonnote_insn(%struct.rtx_def* %1)
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %start = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 26
  %3 = load %struct.rtx_def*, %struct.rtx_def** %start, align 8
  %call1 = call %struct.rtx_def* @prev_nonnote_insn(%struct.rtx_def* %3)
  %cmp = icmp ne %struct.rtx_def* %call, %call1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %scan_start2 = getelementptr inbounds %struct.loop, %struct.loop* %5, i32 0, i32 29
  %6 = load %struct.rtx_def*, %struct.rtx_def** %scan_start2, align 8
  %call3 = call i32 @back_branch_in_range_p(%struct.loop* %4, %struct.rtx_def* %6)
  store i32 %call3, i32* %maybe_multiple, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %8 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %scan_start4 = getelementptr inbounds %struct.loop, %struct.loop* %8, i32 0, i32 29
  %9 = load %struct.rtx_def*, %struct.rtx_def** %scan_start4, align 8
  %call5 = call %struct.rtx_def* @next_insn_in_loop(%struct.loop* %7, %struct.rtx_def* %9)
  store %struct.rtx_def* %call5, %struct.rtx_def** %p, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc.167, %if.end
  %10 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %cmp6 = icmp ne %struct.rtx_def* %10, null
  br i1 %cmp6, label %for.body, label %for.end.169

for.body:                                         ; preds = %for.cond
  %11 = load %struct.rtx_def* (%struct.loop*, %struct.rtx_def*, i32, i32)*, %struct.rtx_def* (%struct.loop*, %struct.rtx_def*, i32, i32)** %fncall.addr, align 8
  %12 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %13 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %14 = load i32, i32* %not_every_iteration, align 4
  %15 = load i32, i32* %maybe_multiple, align 4
  %call7 = call %struct.rtx_def* %11(%struct.loop* %12, %struct.rtx_def* %13, i32 %14, i32 %15)
  store %struct.rtx_def* %call7, %struct.rtx_def** %p, align 8
  %16 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %17 = bitcast %struct.rtx_def* %16 to i32*
  %bf.load = load i32, i32* %17, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp8 = icmp eq i32 %bf.clear, 36
  br i1 %cmp8, label %if.then.9, label %if.end.54

if.then.9:                                        ; preds = %for.body
  %18 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  store %struct.rtx_def* %18, %struct.rtx_def** %insn, align 8
  store i32 0, i32* %maybe_multiple, align 4
  br label %while.body

while.body:                                       ; preds = %if.then.9, %if.end.53
  %19 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 2
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %20 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %20, %struct.rtx_def** %insn, align 8
  %21 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %22 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %scan_start10 = getelementptr inbounds %struct.loop, %struct.loop* %22, i32 0, i32 29
  %23 = load %struct.rtx_def*, %struct.rtx_def** %scan_start10, align 8
  %cmp11 = icmp eq %struct.rtx_def* %21, %23
  br i1 %cmp11, label %if.then.12, label %if.end.13

if.then.12:                                       ; preds = %while.body
  br label %while.end

if.end.13:                                        ; preds = %while.body
  %24 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %25 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %end = getelementptr inbounds %struct.loop, %struct.loop* %25, i32 0, i32 27
  %26 = load %struct.rtx_def*, %struct.rtx_def** %end, align 8
  %cmp14 = icmp eq %struct.rtx_def* %24, %26
  br i1 %cmp14, label %if.then.15, label %if.end.24

if.then.15:                                       ; preds = %if.end.13
  %27 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %top = getelementptr inbounds %struct.loop, %struct.loop* %27, i32 0, i32 28
  %28 = load %struct.rtx_def*, %struct.rtx_def** %top, align 8
  %cmp16 = icmp ne %struct.rtx_def* %28, null
  br i1 %cmp16, label %if.then.17, label %if.else

if.then.17:                                       ; preds = %if.then.15
  %29 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %top18 = getelementptr inbounds %struct.loop, %struct.loop* %29, i32 0, i32 28
  %30 = load %struct.rtx_def*, %struct.rtx_def** %top18, align 8
  store %struct.rtx_def* %30, %struct.rtx_def** %insn, align 8
  br label %if.end.19

if.else:                                          ; preds = %if.then.15
  br label %while.end

if.end.19:                                        ; preds = %if.then.17
  %31 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %32 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %scan_start20 = getelementptr inbounds %struct.loop, %struct.loop* %32, i32 0, i32 29
  %33 = load %struct.rtx_def*, %struct.rtx_def** %scan_start20, align 8
  %cmp21 = icmp eq %struct.rtx_def* %31, %33
  br i1 %cmp21, label %if.then.22, label %if.end.23

if.then.22:                                       ; preds = %if.end.19
  br label %while.end

if.end.23:                                        ; preds = %if.end.19
  br label %if.end.24

if.end.24:                                        ; preds = %if.end.23, %if.end.13
  %34 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %35 = bitcast %struct.rtx_def* %34 to i32*
  %bf.load25 = load i32, i32* %35, align 8
  %bf.clear26 = and i32 %bf.load25, 65535
  %cmp27 = icmp eq i32 %bf.clear26, 33
  br i1 %cmp27, label %land.lhs.true, label %if.end.53

land.lhs.true:                                    ; preds = %if.end.24
  %36 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld28 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %36, i32 0, i32 1
  %arrayidx29 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld28, i32 0, i64 3
  %rtx30 = bitcast %union.rtunion_def* %arrayidx29 to %struct.rtx_def**
  %37 = load %struct.rtx_def*, %struct.rtx_def** %rtx30, align 8
  %38 = bitcast %struct.rtx_def* %37 to i32*
  %bf.load31 = load i32, i32* %38, align 8
  %bf.clear32 = and i32 %bf.load31, 65535
  %cmp33 = icmp ne i32 %bf.clear32, 51
  br i1 %cmp33, label %land.lhs.true.34, label %if.end.53

land.lhs.true.34:                                 ; preds = %land.lhs.true
  %39 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %call35 = call i32 @any_condjump_p(%struct.rtx_def* %39)
  %tobool = icmp ne i32 %call35, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then.52

lor.lhs.false:                                    ; preds = %land.lhs.true.34
  %40 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld36 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %40, i32 0, i32 1
  %arrayidx37 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld36, i32 0, i64 7
  %rtx38 = bitcast %union.rtunion_def* %arrayidx37 to %struct.rtx_def**
  %41 = load %struct.rtx_def*, %struct.rtx_def** %rtx38, align 8
  %cmp39 = icmp ne %struct.rtx_def* %41, null
  br i1 %cmp39, label %land.lhs.true.40, label %if.end.53

land.lhs.true.40:                                 ; preds = %lor.lhs.false
  %42 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld41 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %42, i32 0, i32 1
  %arrayidx42 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld41, i32 0, i64 7
  %rtx43 = bitcast %union.rtunion_def* %arrayidx42 to %struct.rtx_def**
  %43 = load %struct.rtx_def*, %struct.rtx_def** %rtx43, align 8
  %44 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %scan_start44 = getelementptr inbounds %struct.loop, %struct.loop* %44, i32 0, i32 29
  %45 = load %struct.rtx_def*, %struct.rtx_def** %scan_start44, align 8
  %cmp45 = icmp ne %struct.rtx_def* %43, %45
  br i1 %cmp45, label %land.lhs.true.46, label %if.end.53

land.lhs.true.46:                                 ; preds = %land.lhs.true.40
  %46 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %47 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld47 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %47, i32 0, i32 1
  %arrayidx48 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld47, i32 0, i64 7
  %rtx49 = bitcast %union.rtunion_def* %arrayidx48 to %struct.rtx_def**
  %48 = load %struct.rtx_def*, %struct.rtx_def** %rtx49, align 8
  %call50 = call i32 @loop_insn_first_p(%struct.rtx_def* %46, %struct.rtx_def* %48)
  %tobool51 = icmp ne i32 %call50, 0
  br i1 %tobool51, label %if.end.53, label %if.then.52

if.then.52:                                       ; preds = %land.lhs.true.46, %land.lhs.true.34
  store i32 1, i32* %maybe_multiple, align 4
  br label %while.end

if.end.53:                                        ; preds = %land.lhs.true.46, %land.lhs.true.40, %lor.lhs.false, %land.lhs.true, %if.end.24
  br label %while.body

while.end:                                        ; preds = %if.then.52, %if.then.22, %if.else, %if.then.12
  br label %if.end.54

if.end.54:                                        ; preds = %while.end, %for.body
  %49 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %50 = bitcast %struct.rtx_def* %49 to i32*
  %bf.load55 = load i32, i32* %50, align 8
  %bf.clear56 = and i32 %bf.load55, 65535
  %cmp57 = icmp eq i32 %bf.clear56, 33
  br i1 %cmp57, label %land.lhs.true.58, label %if.else.104

land.lhs.true.58:                                 ; preds = %if.end.54
  %51 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld59 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %51, i32 0, i32 1
  %arrayidx60 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld59, i32 0, i64 7
  %rtx61 = bitcast %union.rtunion_def* %arrayidx60 to %struct.rtx_def**
  %52 = load %struct.rtx_def*, %struct.rtx_def** %rtx61, align 8
  %53 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %top62 = getelementptr inbounds %struct.loop, %struct.loop* %53, i32 0, i32 28
  %54 = load %struct.rtx_def*, %struct.rtx_def** %top62, align 8
  %cmp63 = icmp eq %struct.rtx_def* %52, %54
  br i1 %cmp63, label %land.lhs.true.64, label %if.then.85

land.lhs.true.64:                                 ; preds = %land.lhs.true.58
  %55 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld65 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %55, i32 0, i32 1
  %arrayidx66 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld65, i32 0, i64 2
  %rtx67 = bitcast %union.rtunion_def* %arrayidx66 to %struct.rtx_def**
  %56 = load %struct.rtx_def*, %struct.rtx_def** %rtx67, align 8
  %fld68 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %56, i32 0, i32 1
  %arrayidx69 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld68, i32 0, i64 2
  %rtx70 = bitcast %union.rtunion_def* %arrayidx69 to %struct.rtx_def**
  %57 = load %struct.rtx_def*, %struct.rtx_def** %rtx70, align 8
  %58 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %end71 = getelementptr inbounds %struct.loop, %struct.loop* %58, i32 0, i32 27
  %59 = load %struct.rtx_def*, %struct.rtx_def** %end71, align 8
  %cmp72 = icmp eq %struct.rtx_def* %57, %59
  br i1 %cmp72, label %land.lhs.true.73, label %lor.lhs.false.76

land.lhs.true.73:                                 ; preds = %land.lhs.true.64
  %60 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %call74 = call i32 @any_uncondjump_p(%struct.rtx_def* %60)
  %tobool75 = icmp ne i32 %call74, 0
  br i1 %tobool75, label %if.else.104, label %lor.lhs.false.76

lor.lhs.false.76:                                 ; preds = %land.lhs.true.73, %land.lhs.true.64
  %61 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld77 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %61, i32 0, i32 1
  %arrayidx78 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld77, i32 0, i64 2
  %rtx79 = bitcast %union.rtunion_def* %arrayidx78 to %struct.rtx_def**
  %62 = load %struct.rtx_def*, %struct.rtx_def** %rtx79, align 8
  %63 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %end80 = getelementptr inbounds %struct.loop, %struct.loop* %63, i32 0, i32 27
  %64 = load %struct.rtx_def*, %struct.rtx_def** %end80, align 8
  %cmp81 = icmp eq %struct.rtx_def* %62, %64
  br i1 %cmp81, label %land.lhs.true.82, label %if.then.85

land.lhs.true.82:                                 ; preds = %lor.lhs.false.76
  %65 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %call83 = call i32 @any_condjump_p(%struct.rtx_def* %65)
  %tobool84 = icmp ne i32 %call83, 0
  br i1 %tobool84, label %if.else.104, label %if.then.85

if.then.85:                                       ; preds = %land.lhs.true.82, %lor.lhs.false.76, %land.lhs.true.58
  store %struct.rtx_def* null, %struct.rtx_def** %label, align 8
  %66 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %exit_labels = getelementptr inbounds %struct.loop, %struct.loop* %66, i32 0, i32 31
  %67 = load %struct.rtx_def*, %struct.rtx_def** %exit_labels, align 8
  store %struct.rtx_def* %67, %struct.rtx_def** %label, align 8
  br label %for.cond.86

for.cond.86:                                      ; preds = %for.inc, %if.then.85
  %68 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  %tobool87 = icmp ne %struct.rtx_def* %68, null
  br i1 %tobool87, label %for.body.88, label %for.end

for.body.88:                                      ; preds = %for.cond.86
  %69 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  %fld89 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %69, i32 0, i32 1
  %arrayidx90 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld89, i32 0, i64 0
  %rtx91 = bitcast %union.rtunion_def* %arrayidx90 to %struct.rtx_def**
  %70 = load %struct.rtx_def*, %struct.rtx_def** %rtx91, align 8
  %71 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld92 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %71, i32 0, i32 1
  %arrayidx93 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld92, i32 0, i64 7
  %rtx94 = bitcast %union.rtunion_def* %arrayidx93 to %struct.rtx_def**
  %72 = load %struct.rtx_def*, %struct.rtx_def** %rtx94, align 8
  %cmp95 = icmp eq %struct.rtx_def* %70, %72
  br i1 %cmp95, label %if.then.96, label %if.end.97

if.then.96:                                       ; preds = %for.body.88
  br label %for.end

if.end.97:                                        ; preds = %for.body.88
  br label %for.inc

for.inc:                                          ; preds = %if.end.97
  %73 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  %fld98 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %73, i32 0, i32 1
  %arrayidx99 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld98, i32 0, i64 1
  %rtx100 = bitcast %union.rtunion_def* %arrayidx99 to %struct.rtx_def**
  %74 = load %struct.rtx_def*, %struct.rtx_def** %rtx100, align 8
  store %struct.rtx_def* %74, %struct.rtx_def** %label, align 8
  br label %for.cond.86

for.end:                                          ; preds = %if.then.96, %for.cond.86
  %75 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  %tobool101 = icmp ne %struct.rtx_def* %75, null
  br i1 %tobool101, label %if.end.103, label %if.then.102

if.then.102:                                      ; preds = %for.end
  store i32 1, i32* %not_every_iteration, align 4
  br label %if.end.103

if.end.103:                                       ; preds = %if.then.102, %for.end
  br label %if.end.136

if.else.104:                                      ; preds = %land.lhs.true.82, %land.lhs.true.73, %if.end.54
  %76 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %77 = bitcast %struct.rtx_def* %76 to i32*
  %bf.load105 = load i32, i32* %77, align 8
  %bf.clear106 = and i32 %bf.load105, 65535
  %cmp107 = icmp eq i32 %bf.clear106, 37
  br i1 %cmp107, label %if.then.108, label %if.end.135

if.then.108:                                      ; preds = %if.else.104
  %78 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld109 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %78, i32 0, i32 1
  %arrayidx110 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld109, i32 0, i64 4
  %rtint = bitcast %union.rtunion_def* %arrayidx110 to i32*
  %79 = load i32, i32* %rtint, align 4
  %cmp111 = icmp eq i32 %79, -93
  br i1 %cmp111, label %land.lhs.true.117, label %lor.lhs.false.112

lor.lhs.false.112:                                ; preds = %if.then.108
  %80 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld113 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %80, i32 0, i32 1
  %arrayidx114 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld113, i32 0, i64 4
  %rtint115 = bitcast %union.rtunion_def* %arrayidx114 to i32*
  %81 = load i32, i32* %rtint115, align 4
  %cmp116 = icmp eq i32 %81, -94
  br i1 %cmp116, label %land.lhs.true.117, label %if.else.120

land.lhs.true.117:                                ; preds = %lor.lhs.false.112, %if.then.108
  %82 = load i32, i32* %loop_depth, align 4
  %cmp118 = icmp eq i32 %82, 0
  br i1 %cmp118, label %if.then.119, label %if.else.120

if.then.119:                                      ; preds = %land.lhs.true.117
  store i32 0, i32* %not_every_iteration, align 4
  br label %if.end.134

if.else.120:                                      ; preds = %land.lhs.true.117, %lor.lhs.false.112
  %83 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld121 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %83, i32 0, i32 1
  %arrayidx122 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld121, i32 0, i64 4
  %rtint123 = bitcast %union.rtunion_def* %arrayidx122 to i32*
  %84 = load i32, i32* %rtint123, align 4
  %cmp124 = icmp eq i32 %84, -96
  br i1 %cmp124, label %if.then.125, label %if.else.126

if.then.125:                                      ; preds = %if.else.120
  %85 = load i32, i32* %loop_depth, align 4
  %inc = add nsw i32 %85, 1
  store i32 %inc, i32* %loop_depth, align 4
  br label %if.end.133

if.else.126:                                      ; preds = %if.else.120
  %86 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld127 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %86, i32 0, i32 1
  %arrayidx128 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld127, i32 0, i64 4
  %rtint129 = bitcast %union.rtunion_def* %arrayidx128 to i32*
  %87 = load i32, i32* %rtint129, align 4
  %cmp130 = icmp eq i32 %87, -95
  br i1 %cmp130, label %if.then.131, label %if.end.132

if.then.131:                                      ; preds = %if.else.126
  %88 = load i32, i32* %loop_depth, align 4
  %dec = add nsw i32 %88, -1
  store i32 %dec, i32* %loop_depth, align 4
  br label %if.end.132

if.end.132:                                       ; preds = %if.then.131, %if.else.126
  br label %if.end.133

if.end.133:                                       ; preds = %if.end.132, %if.then.125
  br label %if.end.134

if.end.134:                                       ; preds = %if.end.133, %if.then.119
  br label %if.end.135

if.end.135:                                       ; preds = %if.end.134, %if.else.104
  br label %if.end.136

if.end.136:                                       ; preds = %if.end.135, %if.end.103
  %89 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %90 = bitcast %struct.rtx_def* %89 to i32*
  %bf.load137 = load i32, i32* %90, align 8
  %bf.clear138 = and i32 %bf.load137, 65535
  %cmp139 = icmp eq i32 %bf.clear138, 33
  br i1 %cmp139, label %land.lhs.true.140, label %if.end.150

land.lhs.true.140:                                ; preds = %if.end.136
  %91 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld141 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %91, i32 0, i32 1
  %arrayidx142 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld141, i32 0, i64 7
  %rtx143 = bitcast %union.rtunion_def* %arrayidx142 to %struct.rtx_def**
  %92 = load %struct.rtx_def*, %struct.rtx_def** %rtx143, align 8
  %93 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %start144 = getelementptr inbounds %struct.loop, %struct.loop* %93, i32 0, i32 26
  %94 = load %struct.rtx_def*, %struct.rtx_def** %start144, align 8
  %fld145 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %94, i32 0, i32 1
  %arrayidx146 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld145, i32 0, i64 2
  %rtx147 = bitcast %union.rtunion_def* %arrayidx146 to %struct.rtx_def**
  %95 = load %struct.rtx_def*, %struct.rtx_def** %rtx147, align 8
  %cmp148 = icmp eq %struct.rtx_def* %92, %95
  br i1 %cmp148, label %if.then.149, label %if.end.150

if.then.149:                                      ; preds = %land.lhs.true.140
  store i32 1, i32* %past_loop_latch, align 4
  br label %if.end.150

if.end.150:                                       ; preds = %if.then.149, %land.lhs.true.140, %if.end.136
  %96 = load i32, i32* %not_every_iteration, align 4
  %tobool151 = icmp ne i32 %96, 0
  br i1 %tobool151, label %land.lhs.true.152, label %if.end.166

land.lhs.true.152:                                ; preds = %if.end.150
  %97 = load i32, i32* %past_loop_latch, align 4
  %tobool153 = icmp ne i32 %97, 0
  br i1 %tobool153, label %if.end.166, label %land.lhs.true.154

land.lhs.true.154:                                ; preds = %land.lhs.true.152
  %98 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %99 = bitcast %struct.rtx_def* %98 to i32*
  %bf.load155 = load i32, i32* %99, align 8
  %bf.clear156 = and i32 %bf.load155, 65535
  %cmp157 = icmp eq i32 %bf.clear156, 36
  br i1 %cmp157, label %land.lhs.true.158, label %if.end.166

land.lhs.true.158:                                ; preds = %land.lhs.true.154
  %100 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %101 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %end159 = getelementptr inbounds %struct.loop, %struct.loop* %101, i32 0, i32 27
  %102 = load %struct.rtx_def*, %struct.rtx_def** %end159, align 8
  %call160 = call i32 @no_labels_between_p(%struct.rtx_def* %100, %struct.rtx_def* %102)
  %tobool161 = icmp ne i32 %call160, 0
  br i1 %tobool161, label %land.lhs.true.162, label %if.end.166

land.lhs.true.162:                                ; preds = %land.lhs.true.158
  %103 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %104 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %cont = getelementptr inbounds %struct.loop, %struct.loop* %104, i32 0, i32 24
  %105 = load %struct.rtx_def*, %struct.rtx_def** %cont, align 8
  %call163 = call i32 @loop_insn_first_p(%struct.rtx_def* %103, %struct.rtx_def* %105)
  %tobool164 = icmp ne i32 %call163, 0
  br i1 %tobool164, label %if.then.165, label %if.end.166

if.then.165:                                      ; preds = %land.lhs.true.162
  store i32 0, i32* %not_every_iteration, align 4
  br label %if.end.166

if.end.166:                                       ; preds = %if.then.165, %land.lhs.true.162, %land.lhs.true.158, %land.lhs.true.154, %land.lhs.true.152, %if.end.150
  br label %for.inc.167

for.inc.167:                                      ; preds = %if.end.166
  %106 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %107 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %call168 = call %struct.rtx_def* @next_insn_in_loop(%struct.loop* %106, %struct.rtx_def* %107)
  store %struct.rtx_def* %call168, %struct.rtx_def** %p, align 8
  br label %for.cond

for.end.169:                                      ; preds = %for.cond
  ret void
}

declare %struct.rtx_def* @prev_nonnote_insn(%struct.rtx_def*) #1

declare i32 @back_branch_in_range_p(%struct.loop*, %struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define internal %struct.rtx_def* @next_insn_in_loop(%struct.loop* %loop, %struct.rtx_def* %insn) #0 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 2
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %1 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %insn.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %3 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %end = getelementptr inbounds %struct.loop, %struct.loop* %3, i32 0, i32 27
  %4 = load %struct.rtx_def*, %struct.rtx_def** %end, align 8
  %cmp = icmp eq %struct.rtx_def* %2, %4
  br i1 %cmp, label %if.then, label %if.end.3

if.then:                                          ; preds = %entry
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %top = getelementptr inbounds %struct.loop, %struct.loop* %5, i32 0, i32 28
  %6 = load %struct.rtx_def*, %struct.rtx_def** %top, align 8
  %tobool = icmp ne %struct.rtx_def* %6, null
  br i1 %tobool, label %if.then.1, label %if.else

if.then.1:                                        ; preds = %if.then
  %7 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %top2 = getelementptr inbounds %struct.loop, %struct.loop* %7, i32 0, i32 28
  %8 = load %struct.rtx_def*, %struct.rtx_def** %top2, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %insn.addr, align 8
  br label %if.end

if.else:                                          ; preds = %if.then
  store %struct.rtx_def* null, %struct.rtx_def** %insn.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.1
  br label %if.end.3

if.end.3:                                         ; preds = %if.end, %entry
  %9 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %10 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %scan_start = getelementptr inbounds %struct.loop, %struct.loop* %10, i32 0, i32 29
  %11 = load %struct.rtx_def*, %struct.rtx_def** %scan_start, align 8
  %cmp4 = icmp eq %struct.rtx_def* %9, %11
  br i1 %cmp4, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %if.end.3
  store %struct.rtx_def* null, %struct.rtx_def** %insn.addr, align 8
  br label %if.end.6

if.end.6:                                         ; preds = %if.then.5, %if.end.3
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  ret %struct.rtx_def* %12
}

declare i32 @any_condjump_p(%struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define i32 @loop_insn_first_p(%struct.rtx_def* %insn, %struct.rtx_def* %reference) #0 {
entry:
  %retval = alloca i32, align 4
  %insn.addr = alloca %struct.rtx_def*, align 8
  %reference.addr = alloca %struct.rtx_def*, align 8
  %p = alloca %struct.rtx_def*, align 8
  %q = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  store %struct.rtx_def* %reference, %struct.rtx_def** %reference.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  store %struct.rtx_def* %0, %struct.rtx_def** %p, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %reference.addr, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %q, align 8
  br label %for.cond

for.cond:                                         ; preds = %if.end.60, %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %q, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %cmp = icmp eq %struct.rtx_def* %2, %3
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.cond
  %4 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %tobool = icmp ne %struct.rtx_def* %4, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %for.cond
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %5 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %reference.addr, align 8
  %cmp1 = icmp eq %struct.rtx_def* %5, %6
  br i1 %cmp1, label %if.then.4, label %lor.lhs.false.2

lor.lhs.false.2:                                  ; preds = %if.end
  %7 = load %struct.rtx_def*, %struct.rtx_def** %q, align 8
  %tobool3 = icmp ne %struct.rtx_def* %7, null
  br i1 %tobool3, label %if.end.5, label %if.then.4

if.then.4:                                        ; preds = %lor.lhs.false.2, %if.end
  store i32 1, i32* %retval
  br label %return

if.end.5:                                         ; preds = %lor.lhs.false.2
  %8 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtint = bitcast %union.rtunion_def* %arrayidx to i32*
  %9 = load i32, i32* %rtint, align 4
  %10 = load i32, i32* @max_uid_for_loop, align 4
  %cmp6 = icmp slt i32 %9, %10
  br i1 %cmp6, label %land.lhs.true, label %if.end.36

land.lhs.true:                                    ; preds = %if.end.5
  %11 = load %struct.rtx_def*, %struct.rtx_def** %q, align 8
  %fld7 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1
  %arrayidx8 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld7, i32 0, i64 0
  %rtint9 = bitcast %union.rtunion_def* %arrayidx8 to i32*
  %12 = load i32, i32* %rtint9, align 4
  %13 = load i32, i32* @max_uid_for_loop, align 4
  %cmp10 = icmp slt i32 %12, %13
  br i1 %cmp10, label %land.lhs.true.11, label %if.end.36

land.lhs.true.11:                                 ; preds = %land.lhs.true
  %14 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %15 = bitcast %struct.rtx_def* %14 to i32*
  %bf.load = load i32, i32* %15, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp12 = icmp ne i32 %bf.clear, 37
  br i1 %cmp12, label %if.then.13, label %if.end.36

if.then.13:                                       ; preds = %land.lhs.true.11
  %16 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld14 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1
  %arrayidx15 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld14, i32 0, i64 0
  %rtint16 = bitcast %union.rtunion_def* %arrayidx15 to i32*
  %17 = load i32, i32* %rtint16, align 4
  %18 = load i32, i32* @max_uid_for_loop, align 4
  %cmp17 = icmp slt i32 %17, %18
  br i1 %cmp17, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.13
  %19 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld18 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1
  %arrayidx19 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld18, i32 0, i64 0
  %rtint20 = bitcast %union.rtunion_def* %arrayidx19 to i32*
  %20 = load i32, i32* %rtint20, align 4
  %idxprom = sext i32 %20 to i64
  %21 = load i32*, i32** @uid_luid, align 8
  %arrayidx21 = getelementptr inbounds i32, i32* %21, i64 %idxprom
  %22 = load i32, i32* %arrayidx21, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.then.13
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 8560, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__FUNCTION__.loop_insn_first_p, i32 0, i32 0)) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %23, %cond.true
  %cond = phi i32 [ %22, %cond.true ], [ -1, %23 ]
  %24 = load %struct.rtx_def*, %struct.rtx_def** %q, align 8
  %fld22 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1
  %arrayidx23 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld22, i32 0, i64 0
  %rtint24 = bitcast %union.rtunion_def* %arrayidx23 to i32*
  %25 = load i32, i32* %rtint24, align 4
  %26 = load i32, i32* @max_uid_for_loop, align 4
  %cmp25 = icmp slt i32 %25, %26
  br i1 %cmp25, label %cond.true.26, label %cond.false.32

cond.true.26:                                     ; preds = %cond.end
  %27 = load %struct.rtx_def*, %struct.rtx_def** %q, align 8
  %fld27 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1
  %arrayidx28 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld27, i32 0, i64 0
  %rtint29 = bitcast %union.rtunion_def* %arrayidx28 to i32*
  %28 = load i32, i32* %rtint29, align 4
  %idxprom30 = sext i32 %28 to i64
  %29 = load i32*, i32** @uid_luid, align 8
  %arrayidx31 = getelementptr inbounds i32, i32* %29, i64 %idxprom30
  %30 = load i32, i32* %arrayidx31, align 4
  br label %cond.end.33

cond.false.32:                                    ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 8560, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__FUNCTION__.loop_insn_first_p, i32 0, i32 0)) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end.33

cond.end.33:                                      ; preds = %31, %cond.true.26
  %cond34 = phi i32 [ %30, %cond.true.26 ], [ -1, %31 ]
  %cmp35 = icmp sle i32 %cond, %cond34
  %conv = zext i1 %cmp35 to i32
  store i32 %conv, i32* %retval
  br label %return

if.end.36:                                        ; preds = %land.lhs.true.11, %land.lhs.true, %if.end.5
  %32 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld37 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %32, i32 0, i32 1
  %arrayidx38 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld37, i32 0, i64 0
  %rtint39 = bitcast %union.rtunion_def* %arrayidx38 to i32*
  %33 = load i32, i32* %rtint39, align 4
  %34 = load i32, i32* @max_uid_for_loop, align 4
  %cmp40 = icmp sge i32 %33, %34
  br i1 %cmp40, label %if.then.47, label %lor.lhs.false.42

lor.lhs.false.42:                                 ; preds = %if.end.36
  %35 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %36 = bitcast %struct.rtx_def* %35 to i32*
  %bf.load43 = load i32, i32* %36, align 8
  %bf.clear44 = and i32 %bf.load43, 65535
  %cmp45 = icmp eq i32 %bf.clear44, 37
  br i1 %cmp45, label %if.then.47, label %if.end.50

if.then.47:                                       ; preds = %lor.lhs.false.42, %if.end.36
  %37 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld48 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %37, i32 0, i32 1
  %arrayidx49 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld48, i32 0, i64 2
  %rtx = bitcast %union.rtunion_def* %arrayidx49 to %struct.rtx_def**
  %38 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %38, %struct.rtx_def** %p, align 8
  br label %if.end.50

if.end.50:                                        ; preds = %if.then.47, %lor.lhs.false.42
  %39 = load %struct.rtx_def*, %struct.rtx_def** %q, align 8
  %fld51 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1
  %arrayidx52 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld51, i32 0, i64 0
  %rtint53 = bitcast %union.rtunion_def* %arrayidx52 to i32*
  %40 = load i32, i32* %rtint53, align 4
  %41 = load i32, i32* @max_uid_for_loop, align 4
  %cmp54 = icmp sge i32 %40, %41
  br i1 %cmp54, label %if.then.56, label %if.end.60

if.then.56:                                       ; preds = %if.end.50
  %42 = load %struct.rtx_def*, %struct.rtx_def** %q, align 8
  %fld57 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %42, i32 0, i32 1
  %arrayidx58 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld57, i32 0, i64 2
  %rtx59 = bitcast %union.rtunion_def* %arrayidx58 to %struct.rtx_def**
  %43 = load %struct.rtx_def*, %struct.rtx_def** %rtx59, align 8
  store %struct.rtx_def* %43, %struct.rtx_def** %q, align 8
  br label %if.end.60

if.end.60:                                        ; preds = %if.then.56, %if.end.50
  br label %for.cond

return:                                           ; preds = %cond.end.33, %if.then.4, %if.then
  %44 = load i32, i32* %retval
  ret i32 %44
}

declare i32 @any_uncondjump_p(%struct.rtx_def*) #1

declare i32 @no_labels_between_p(%struct.rtx_def*, %struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @express_from(%struct.induction* %g1, %struct.induction* %g2) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %g1.addr = alloca %struct.induction*, align 8
  %g2.addr = alloca %struct.induction*, align 8
  %mult = alloca %struct.rtx_def*, align 8
  %add = alloca %struct.rtx_def*, align 8
  %g1_add_val = alloca %struct.rtx_def*, align 8
  %m = alloca i64, align 8
  %tem = alloca %struct.rtx_def*, align 8
  store %struct.induction* %g1, %struct.induction** %g1.addr, align 8
  store %struct.induction* %g2, %struct.induction** %g2.addr, align 8
  %0 = load %struct.induction*, %struct.induction** %g1.addr, align 8
  %mult_val = getelementptr inbounds %struct.induction, %struct.induction* %0, i32 0, i32 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %mult_val, align 8
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load = load i32, i32* %2, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 54
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.induction*, %struct.induction** %g2.addr, align 8
  %mult_val1 = getelementptr inbounds %struct.induction, %struct.induction* %3, i32 0, i32 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %mult_val1, align 8
  %5 = bitcast %struct.rtx_def* %4 to i32*
  %bf.load2 = load i32, i32* %5, align 8
  %bf.clear3 = and i32 %bf.load2, 65535
  %cmp4 = icmp eq i32 %bf.clear3, 54
  br i1 %cmp4, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %6 = load %struct.induction*, %struct.induction** %g1.addr, align 8
  %mult_val5 = getelementptr inbounds %struct.induction, %struct.induction* %6, i32 0, i32 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %mult_val5, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %cmp6 = icmp eq %struct.rtx_def* %7, %8
  br i1 %cmp6, label %if.then.13, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then
  %9 = load %struct.induction*, %struct.induction** %g2.addr, align 8
  %mult_val7 = getelementptr inbounds %struct.induction, %struct.induction* %9, i32 0, i32 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %mult_val7, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx to i64*
  %11 = load i64, i64* %rtwint, align 8
  %12 = load %struct.induction*, %struct.induction** %g1.addr, align 8
  %mult_val8 = getelementptr inbounds %struct.induction, %struct.induction* %12, i32 0, i32 8
  %13 = load %struct.rtx_def*, %struct.rtx_def** %mult_val8, align 8
  %fld9 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1
  %arrayidx10 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld9, i32 0, i64 0
  %rtwint11 = bitcast %union.rtunion_def* %arrayidx10 to i64*
  %14 = load i64, i64* %rtwint11, align 8
  %rem = srem i64 %11, %14
  %cmp12 = icmp ne i64 %rem, 0
  br i1 %cmp12, label %if.then.13, label %if.end

if.then.13:                                       ; preds = %lor.lhs.false, %if.then
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %15 = load %struct.induction*, %struct.induction** %g2.addr, align 8
  %mult_val14 = getelementptr inbounds %struct.induction, %struct.induction* %15, i32 0, i32 8
  %16 = load %struct.rtx_def*, %struct.rtx_def** %mult_val14, align 8
  %fld15 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1
  %arrayidx16 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld15, i32 0, i64 0
  %rtwint17 = bitcast %union.rtunion_def* %arrayidx16 to i64*
  %17 = load i64, i64* %rtwint17, align 8
  %18 = load %struct.induction*, %struct.induction** %g1.addr, align 8
  %mult_val18 = getelementptr inbounds %struct.induction, %struct.induction* %18, i32 0, i32 8
  %19 = load %struct.rtx_def*, %struct.rtx_def** %mult_val18, align 8
  %fld19 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1
  %arrayidx20 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld19, i32 0, i64 0
  %rtwint21 = bitcast %union.rtunion_def* %arrayidx20 to i64*
  %20 = load i64, i64* %rtwint21, align 8
  %div = sdiv i64 %17, %20
  %call = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %div)
  store %struct.rtx_def* %call, %struct.rtx_def** %mult, align 8
  br label %if.end.28

if.else:                                          ; preds = %land.lhs.true, %entry
  %21 = load %struct.induction*, %struct.induction** %g1.addr, align 8
  %mult_val22 = getelementptr inbounds %struct.induction, %struct.induction* %21, i32 0, i32 8
  %22 = load %struct.rtx_def*, %struct.rtx_def** %mult_val22, align 8
  %23 = load %struct.induction*, %struct.induction** %g2.addr, align 8
  %mult_val23 = getelementptr inbounds %struct.induction, %struct.induction* %23, i32 0, i32 8
  %24 = load %struct.rtx_def*, %struct.rtx_def** %mult_val23, align 8
  %call24 = call i32 @rtx_equal_p(%struct.rtx_def* %22, %struct.rtx_def* %24)
  %tobool = icmp ne i32 %call24, 0
  br i1 %tobool, label %if.then.25, label %if.else.26

if.then.25:                                       ; preds = %if.else
  %25 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  store %struct.rtx_def* %25, %struct.rtx_def** %mult, align 8
  br label %if.end.27

if.else.26:                                       ; preds = %if.else
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end.27:                                        ; preds = %if.then.25
  br label %if.end.28

if.end.28:                                        ; preds = %if.end.27, %if.end
  %26 = load %struct.induction*, %struct.induction** %g1.addr, align 8
  %add_val = getelementptr inbounds %struct.induction, %struct.induction* %26, i32 0, i32 9
  %27 = load %struct.rtx_def*, %struct.rtx_def** %add_val, align 8
  %28 = load %struct.induction*, %struct.induction** %g2.addr, align 8
  %add_val29 = getelementptr inbounds %struct.induction, %struct.induction* %28, i32 0, i32 9
  %29 = load %struct.rtx_def*, %struct.rtx_def** %add_val29, align 8
  %30 = load %struct.rtx_def*, %struct.rtx_def** %mult, align 8
  %call30 = call %struct.rtx_def* @express_from_1(%struct.rtx_def* %27, %struct.rtx_def* %29, %struct.rtx_def* %30)
  store %struct.rtx_def* %call30, %struct.rtx_def** %add, align 8
  %31 = load %struct.rtx_def*, %struct.rtx_def** %add, align 8
  %cmp31 = icmp eq %struct.rtx_def* %31, null
  br i1 %cmp31, label %if.then.32, label %if.end.74

if.then.32:                                       ; preds = %if.end.28
  %32 = load %struct.rtx_def*, %struct.rtx_def** %mult, align 8
  %fld33 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %32, i32 0, i32 1
  %arrayidx34 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld33, i32 0, i64 0
  %rtwint35 = bitcast %union.rtunion_def* %arrayidx34 to i64*
  %33 = load i64, i64* %rtwint35, align 8
  %cmp36 = icmp sgt i64 %33, 1
  br i1 %cmp36, label %if.then.37, label %if.end.73

if.then.37:                                       ; preds = %if.then.32
  %34 = load %struct.induction*, %struct.induction** %g1.addr, align 8
  %add_val38 = getelementptr inbounds %struct.induction, %struct.induction* %34, i32 0, i32 9
  %35 = load %struct.rtx_def*, %struct.rtx_def** %add_val38, align 8
  store %struct.rtx_def* %35, %struct.rtx_def** %g1_add_val, align 8
  %36 = load %struct.rtx_def*, %struct.rtx_def** %g1_add_val, align 8
  %37 = bitcast %struct.rtx_def* %36 to i32*
  %bf.load39 = load i32, i32* %37, align 8
  %bf.clear40 = and i32 %bf.load39, 65535
  %cmp41 = icmp eq i32 %bf.clear40, 78
  br i1 %cmp41, label %land.lhs.true.42, label %if.else.65

land.lhs.true.42:                                 ; preds = %if.then.37
  %38 = load %struct.rtx_def*, %struct.rtx_def** %g1_add_val, align 8
  %fld43 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %38, i32 0, i32 1
  %arrayidx44 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld43, i32 0, i64 1
  %rtx = bitcast %union.rtunion_def* %arrayidx44 to %struct.rtx_def**
  %39 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %40 = bitcast %struct.rtx_def* %39 to i32*
  %bf.load45 = load i32, i32* %40, align 8
  %bf.clear46 = and i32 %bf.load45, 65535
  %cmp47 = icmp eq i32 %bf.clear46, 54
  br i1 %cmp47, label %if.then.48, label %if.else.65

if.then.48:                                       ; preds = %land.lhs.true.42
  %41 = load %struct.rtx_def*, %struct.rtx_def** %mult, align 8
  %fld49 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %41, i32 0, i32 1
  %arrayidx50 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld49, i32 0, i64 0
  %rtwint51 = bitcast %union.rtunion_def* %arrayidx50 to i64*
  %42 = load i64, i64* %rtwint51, align 8
  %43 = load %struct.rtx_def*, %struct.rtx_def** %g1_add_val, align 8
  %fld52 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %43, i32 0, i32 1
  %arrayidx53 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld52, i32 0, i64 1
  %rtx54 = bitcast %union.rtunion_def* %arrayidx53 to %struct.rtx_def**
  %44 = load %struct.rtx_def*, %struct.rtx_def** %rtx54, align 8
  %fld55 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %44, i32 0, i32 1
  %arrayidx56 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld55, i32 0, i64 0
  %rtwint57 = bitcast %union.rtunion_def* %arrayidx56 to i64*
  %45 = load i64, i64* %rtwint57, align 8
  %mul = mul nsw i64 %42, %45
  store i64 %mul, i64* %m, align 8
  %46 = load %struct.rtx_def*, %struct.rtx_def** %g1_add_val, align 8
  %47 = bitcast %struct.rtx_def* %46 to i32*
  %bf.load58 = load i32, i32* %47, align 8
  %bf.lshr = lshr i32 %bf.load58, 16
  %bf.clear59 = and i32 %bf.lshr, 255
  %48 = load %struct.rtx_def*, %struct.rtx_def** %g1_add_val, align 8
  %fld60 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %48, i32 0, i32 1
  %arrayidx61 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld60, i32 0, i64 0
  %rtx62 = bitcast %union.rtunion_def* %arrayidx61 to %struct.rtx_def**
  %49 = load %struct.rtx_def*, %struct.rtx_def** %rtx62, align 8
  %50 = load i64, i64* %m, align 8
  %call63 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %50)
  %call64 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 78, i32 %bf.clear59, %struct.rtx_def* %49, %struct.rtx_def* %call63)
  store %struct.rtx_def* %call64, %struct.rtx_def** %g1_add_val, align 8
  br label %if.end.70

if.else.65:                                       ; preds = %land.lhs.true.42, %if.then.37
  %51 = load %struct.rtx_def*, %struct.rtx_def** %g1_add_val, align 8
  %52 = bitcast %struct.rtx_def* %51 to i32*
  %bf.load66 = load i32, i32* %52, align 8
  %bf.lshr67 = lshr i32 %bf.load66, 16
  %bf.clear68 = and i32 %bf.lshr67, 255
  %53 = load %struct.rtx_def*, %struct.rtx_def** %g1_add_val, align 8
  %54 = load %struct.rtx_def*, %struct.rtx_def** %mult, align 8
  %call69 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 78, i32 %bf.clear68, %struct.rtx_def* %53, %struct.rtx_def* %54)
  store %struct.rtx_def* %call69, %struct.rtx_def** %g1_add_val, align 8
  br label %if.end.70

if.end.70:                                        ; preds = %if.else.65, %if.then.48
  %55 = load %struct.rtx_def*, %struct.rtx_def** %g1_add_val, align 8
  %56 = load %struct.induction*, %struct.induction** %g2.addr, align 8
  %add_val71 = getelementptr inbounds %struct.induction, %struct.induction* %56, i32 0, i32 9
  %57 = load %struct.rtx_def*, %struct.rtx_def** %add_val71, align 8
  %58 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call72 = call %struct.rtx_def* @express_from_1(%struct.rtx_def* %55, %struct.rtx_def* %57, %struct.rtx_def* %58)
  store %struct.rtx_def* %call72, %struct.rtx_def** %add, align 8
  br label %if.end.73

if.end.73:                                        ; preds = %if.end.70, %if.then.32
  br label %if.end.74

if.end.74:                                        ; preds = %if.end.73, %if.end.28
  %59 = load %struct.rtx_def*, %struct.rtx_def** %add, align 8
  %cmp75 = icmp eq %struct.rtx_def* %59, null
  br i1 %cmp75, label %if.then.76, label %if.end.77

if.then.76:                                       ; preds = %if.end.74
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end.77:                                        ; preds = %if.end.74
  %60 = load %struct.rtx_def*, %struct.rtx_def** %mult, align 8
  %61 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %cmp78 = icmp eq %struct.rtx_def* %60, %61
  br i1 %cmp78, label %if.then.79, label %if.else.80

if.then.79:                                       ; preds = %if.end.77
  %62 = load %struct.rtx_def*, %struct.rtx_def** %add, align 8
  store %struct.rtx_def* %62, %struct.rtx_def** %retval
  br label %return

if.else.80:                                       ; preds = %if.end.77
  %63 = load %struct.rtx_def*, %struct.rtx_def** %mult, align 8
  %64 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %cmp81 = icmp eq %struct.rtx_def* %63, %64
  br i1 %cmp81, label %if.then.82, label %if.else.83

if.then.82:                                       ; preds = %if.else.80
  %65 = load %struct.induction*, %struct.induction** %g1.addr, align 8
  %dest_reg = getelementptr inbounds %struct.induction, %struct.induction* %65, i32 0, i32 4
  %66 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg, align 8
  store %struct.rtx_def* %66, %struct.rtx_def** %mult, align 8
  br label %if.end.86

if.else.83:                                       ; preds = %if.else.80
  %67 = load %struct.induction*, %struct.induction** %g2.addr, align 8
  %mode = getelementptr inbounds %struct.induction, %struct.induction* %67, i32 0, i32 6
  %68 = load i32, i32* %mode, align 4
  %69 = load %struct.induction*, %struct.induction** %g1.addr, align 8
  %dest_reg84 = getelementptr inbounds %struct.induction, %struct.induction* %69, i32 0, i32 4
  %70 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg84, align 8
  %71 = load %struct.rtx_def*, %struct.rtx_def** %mult, align 8
  %call85 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 78, i32 %68, %struct.rtx_def* %70, %struct.rtx_def* %71)
  store %struct.rtx_def* %call85, %struct.rtx_def** %mult, align 8
  br label %if.end.86

if.end.86:                                        ; preds = %if.else.83, %if.then.82
  br label %if.end.87

if.end.87:                                        ; preds = %if.end.86
  %72 = load %struct.rtx_def*, %struct.rtx_def** %add, align 8
  %73 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %cmp88 = icmp eq %struct.rtx_def* %72, %73
  br i1 %cmp88, label %if.then.89, label %if.else.90

if.then.89:                                       ; preds = %if.end.87
  %74 = load %struct.rtx_def*, %struct.rtx_def** %mult, align 8
  store %struct.rtx_def* %74, %struct.rtx_def** %retval
  br label %return

if.else.90:                                       ; preds = %if.end.87
  %75 = load %struct.rtx_def*, %struct.rtx_def** %add, align 8
  %76 = bitcast %struct.rtx_def* %75 to i32*
  %bf.load91 = load i32, i32* %76, align 8
  %bf.clear92 = and i32 %bf.load91, 65535
  %cmp93 = icmp eq i32 %bf.clear92, 75
  br i1 %cmp93, label %land.lhs.true.94, label %if.end.159

land.lhs.true.94:                                 ; preds = %if.else.90
  %77 = load %struct.rtx_def*, %struct.rtx_def** %add, align 8
  %fld95 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %77, i32 0, i32 1
  %arrayidx96 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld95, i32 0, i64 1
  %rtx97 = bitcast %union.rtunion_def* %arrayidx96 to %struct.rtx_def**
  %78 = load %struct.rtx_def*, %struct.rtx_def** %rtx97, align 8
  %79 = bitcast %struct.rtx_def* %78 to i32*
  %bf.load98 = load i32, i32* %79, align 8
  %bf.clear99 = and i32 %bf.load98, 65535
  %cmp100 = icmp eq i32 %bf.clear99, 67
  br i1 %cmp100, label %if.then.150, label %lor.lhs.false.101

lor.lhs.false.101:                                ; preds = %land.lhs.true.94
  %80 = load %struct.rtx_def*, %struct.rtx_def** %add, align 8
  %fld102 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %80, i32 0, i32 1
  %arrayidx103 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld102, i32 0, i64 1
  %rtx104 = bitcast %union.rtunion_def* %arrayidx103 to %struct.rtx_def**
  %81 = load %struct.rtx_def*, %struct.rtx_def** %rtx104, align 8
  %82 = bitcast %struct.rtx_def* %81 to i32*
  %bf.load105 = load i32, i32* %82, align 8
  %bf.clear106 = and i32 %bf.load105, 65535
  %cmp107 = icmp eq i32 %bf.clear106, 68
  br i1 %cmp107, label %if.then.150, label %lor.lhs.false.108

lor.lhs.false.108:                                ; preds = %lor.lhs.false.101
  %83 = load %struct.rtx_def*, %struct.rtx_def** %add, align 8
  %fld109 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %83, i32 0, i32 1
  %arrayidx110 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld109, i32 0, i64 1
  %rtx111 = bitcast %union.rtunion_def* %arrayidx110 to %struct.rtx_def**
  %84 = load %struct.rtx_def*, %struct.rtx_def** %rtx111, align 8
  %85 = bitcast %struct.rtx_def* %84 to i32*
  %bf.load112 = load i32, i32* %85, align 8
  %bf.clear113 = and i32 %bf.load112, 65535
  %cmp114 = icmp eq i32 %bf.clear113, 54
  br i1 %cmp114, label %if.then.150, label %lor.lhs.false.115

lor.lhs.false.115:                                ; preds = %lor.lhs.false.108
  %86 = load %struct.rtx_def*, %struct.rtx_def** %add, align 8
  %fld116 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %86, i32 0, i32 1
  %arrayidx117 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld116, i32 0, i64 1
  %rtx118 = bitcast %union.rtunion_def* %arrayidx117 to %struct.rtx_def**
  %87 = load %struct.rtx_def*, %struct.rtx_def** %rtx118, align 8
  %88 = bitcast %struct.rtx_def* %87 to i32*
  %bf.load119 = load i32, i32* %88, align 8
  %bf.clear120 = and i32 %bf.load119, 65535
  %cmp121 = icmp eq i32 %bf.clear120, 55
  br i1 %cmp121, label %if.then.150, label %lor.lhs.false.122

lor.lhs.false.122:                                ; preds = %lor.lhs.false.115
  %89 = load %struct.rtx_def*, %struct.rtx_def** %add, align 8
  %fld123 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %89, i32 0, i32 1
  %arrayidx124 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld123, i32 0, i64 1
  %rtx125 = bitcast %union.rtunion_def* %arrayidx124 to %struct.rtx_def**
  %90 = load %struct.rtx_def*, %struct.rtx_def** %rtx125, align 8
  %91 = bitcast %struct.rtx_def* %90 to i32*
  %bf.load126 = load i32, i32* %91, align 8
  %bf.clear127 = and i32 %bf.load126, 65535
  %cmp128 = icmp eq i32 %bf.clear127, 58
  br i1 %cmp128, label %if.then.150, label %lor.lhs.false.129

lor.lhs.false.129:                                ; preds = %lor.lhs.false.122
  %92 = load %struct.rtx_def*, %struct.rtx_def** %add, align 8
  %fld130 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %92, i32 0, i32 1
  %arrayidx131 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld130, i32 0, i64 1
  %rtx132 = bitcast %union.rtunion_def* %arrayidx131 to %struct.rtx_def**
  %93 = load %struct.rtx_def*, %struct.rtx_def** %rtx132, align 8
  %94 = bitcast %struct.rtx_def* %93 to i32*
  %bf.load133 = load i32, i32* %94, align 8
  %bf.clear134 = and i32 %bf.load133, 65535
  %cmp135 = icmp eq i32 %bf.clear134, 134
  br i1 %cmp135, label %if.then.150, label %lor.lhs.false.136

lor.lhs.false.136:                                ; preds = %lor.lhs.false.129
  %95 = load %struct.rtx_def*, %struct.rtx_def** %add, align 8
  %fld137 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %95, i32 0, i32 1
  %arrayidx138 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld137, i32 0, i64 1
  %rtx139 = bitcast %union.rtunion_def* %arrayidx138 to %struct.rtx_def**
  %96 = load %struct.rtx_def*, %struct.rtx_def** %rtx139, align 8
  %97 = bitcast %struct.rtx_def* %96 to i32*
  %bf.load140 = load i32, i32* %97, align 8
  %bf.clear141 = and i32 %bf.load140, 65535
  %cmp142 = icmp eq i32 %bf.clear141, 56
  br i1 %cmp142, label %if.then.150, label %lor.lhs.false.143

lor.lhs.false.143:                                ; preds = %lor.lhs.false.136
  %98 = load %struct.rtx_def*, %struct.rtx_def** %add, align 8
  %fld144 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %98, i32 0, i32 1
  %arrayidx145 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld144, i32 0, i64 1
  %rtx146 = bitcast %union.rtunion_def* %arrayidx145 to %struct.rtx_def**
  %99 = load %struct.rtx_def*, %struct.rtx_def** %rtx146, align 8
  %100 = bitcast %struct.rtx_def* %99 to i32*
  %bf.load147 = load i32, i32* %100, align 8
  %bf.clear148 = and i32 %bf.load147, 65535
  %cmp149 = icmp eq i32 %bf.clear148, 140
  br i1 %cmp149, label %if.then.150, label %if.end.159

if.then.150:                                      ; preds = %lor.lhs.false.143, %lor.lhs.false.136, %lor.lhs.false.129, %lor.lhs.false.122, %lor.lhs.false.115, %lor.lhs.false.108, %lor.lhs.false.101, %land.lhs.true.94
  %101 = load %struct.rtx_def*, %struct.rtx_def** %add, align 8
  %fld151 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %101, i32 0, i32 1
  %arrayidx152 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld151, i32 0, i64 1
  %rtx153 = bitcast %union.rtunion_def* %arrayidx152 to %struct.rtx_def**
  %102 = load %struct.rtx_def*, %struct.rtx_def** %rtx153, align 8
  store %struct.rtx_def* %102, %struct.rtx_def** %tem, align 8
  %103 = load %struct.induction*, %struct.induction** %g2.addr, align 8
  %mode154 = getelementptr inbounds %struct.induction, %struct.induction* %103, i32 0, i32 6
  %104 = load i32, i32* %mode154, align 4
  %105 = load %struct.rtx_def*, %struct.rtx_def** %mult, align 8
  %106 = load %struct.rtx_def*, %struct.rtx_def** %add, align 8
  %fld155 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %106, i32 0, i32 1
  %arrayidx156 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld155, i32 0, i64 0
  %rtx157 = bitcast %union.rtunion_def* %arrayidx156 to %struct.rtx_def**
  %107 = load %struct.rtx_def*, %struct.rtx_def** %rtx157, align 8
  %call158 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %104, %struct.rtx_def* %105, %struct.rtx_def* %107)
  store %struct.rtx_def* %call158, %struct.rtx_def** %mult, align 8
  %108 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  store %struct.rtx_def* %108, %struct.rtx_def** %add, align 8
  br label %if.end.159

if.end.159:                                       ; preds = %if.then.150, %lor.lhs.false.143, %if.else.90
  %109 = load %struct.induction*, %struct.induction** %g2.addr, align 8
  %mode160 = getelementptr inbounds %struct.induction, %struct.induction* %109, i32 0, i32 6
  %110 = load i32, i32* %mode160, align 4
  %111 = load %struct.rtx_def*, %struct.rtx_def** %mult, align 8
  %112 = load %struct.rtx_def*, %struct.rtx_def** %add, align 8
  %call161 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %110, %struct.rtx_def* %111, %struct.rtx_def* %112)
  store %struct.rtx_def* %call161, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end.159, %if.then.89, %if.then.79, %if.then.76, %if.else.26, %if.then.13
  %113 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %113
}

declare %struct.rtx_def* @gen_rtx_CONST_INT(i32, i64) #1

declare i32 @rtx_equal_p(%struct.rtx_def*, %struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define internal %struct.rtx_def* @express_from_1(%struct.rtx_def* %a, %struct.rtx_def* %b, %struct.rtx_def* %mult) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %a.addr = alloca %struct.rtx_def*, align 8
  %b.addr = alloca %struct.rtx_def*, align 8
  %mult.addr = alloca %struct.rtx_def*, align 8
  %ra = alloca %struct.rtx_def*, align 8
  %rb = alloca %struct.rtx_def*, align 8
  %oa = alloca %struct.rtx_def*, align 8
  %ob = alloca %struct.rtx_def*, align 8
  %tmp = alloca %struct.rtx_def*, align 8
  %ra62 = alloca %struct.rtx_def*, align 8
  %oa64 = alloca %struct.rtx_def*, align 8
  %mode_a = alloca i32, align 4
  %mode_b = alloca i32, align 4
  %mode = alloca i32, align 4
  store %struct.rtx_def* %a, %struct.rtx_def** %a.addr, align 8
  store %struct.rtx_def* %b, %struct.rtx_def** %b.addr, align 8
  store %struct.rtx_def* %mult, %struct.rtx_def** %mult.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %mult.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %cmp = icmp eq %struct.rtx_def* %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %b.addr, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %mult.addr, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %cmp1 = icmp ne %struct.rtx_def* %3, %4
  br i1 %cmp1, label %land.lhs.true, label %if.end.4

land.lhs.true:                                    ; preds = %if.end
  %5 = load %struct.rtx_def*, %struct.rtx_def** %a.addr, align 8
  %6 = bitcast %struct.rtx_def* %5 to i32*
  %bf.load = load i32, i32* %6, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp2 = icmp ne i32 %bf.clear, 54
  br i1 %cmp2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %land.lhs.true
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end.4:                                         ; preds = %land.lhs.true, %if.end
  br label %while.cond

while.cond:                                       ; preds = %if.end.56, %if.end.4
  %7 = load %struct.rtx_def*, %struct.rtx_def** %a.addr, align 8
  %8 = bitcast %struct.rtx_def* %7 to i32*
  %bf.load5 = load i32, i32* %8, align 8
  %bf.clear6 = and i32 %bf.load5, 65535
  %cmp7 = icmp eq i32 %bf.clear6, 75
  br i1 %cmp7, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %9 = load %struct.rtx_def*, %struct.rtx_def** %b.addr, align 8
  %10 = bitcast %struct.rtx_def* %9 to i32*
  %bf.load8 = load i32, i32* %10, align 8
  %bf.clear9 = and i32 %bf.load8, 65535
  %cmp10 = icmp eq i32 %bf.clear9, 75
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %11 = phi i1 [ false, %while.cond ], [ %cmp10, %land.rhs ]
  br i1 %11, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %12 = load %struct.rtx_def*, %struct.rtx_def** %a.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %13, %struct.rtx_def** %ra, align 8
  %14 = load %struct.rtx_def*, %struct.rtx_def** %a.addr, align 8
  %fld11 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1
  %arrayidx12 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld11, i32 0, i64 1
  %rtx13 = bitcast %union.rtunion_def* %arrayidx12 to %struct.rtx_def**
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rtx13, align 8
  store %struct.rtx_def* %15, %struct.rtx_def** %oa, align 8
  %16 = load %struct.rtx_def*, %struct.rtx_def** %ra, align 8
  %17 = bitcast %struct.rtx_def* %16 to i32*
  %bf.load14 = load i32, i32* %17, align 8
  %bf.clear15 = and i32 %bf.load14, 65535
  %cmp16 = icmp eq i32 %bf.clear15, 75
  br i1 %cmp16, label %if.then.17, label %if.end.18

if.then.17:                                       ; preds = %while.body
  %18 = load %struct.rtx_def*, %struct.rtx_def** %ra, align 8
  store %struct.rtx_def* %18, %struct.rtx_def** %tmp, align 8
  %19 = load %struct.rtx_def*, %struct.rtx_def** %oa, align 8
  store %struct.rtx_def* %19, %struct.rtx_def** %ra, align 8
  %20 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  store %struct.rtx_def* %20, %struct.rtx_def** %oa, align 8
  br label %if.end.18

if.end.18:                                        ; preds = %if.then.17, %while.body
  %21 = load %struct.rtx_def*, %struct.rtx_def** %b.addr, align 8
  %fld19 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1
  %arrayidx20 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld19, i32 0, i64 0
  %rtx21 = bitcast %union.rtunion_def* %arrayidx20 to %struct.rtx_def**
  %22 = load %struct.rtx_def*, %struct.rtx_def** %rtx21, align 8
  store %struct.rtx_def* %22, %struct.rtx_def** %rb, align 8
  %23 = load %struct.rtx_def*, %struct.rtx_def** %b.addr, align 8
  %fld22 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1
  %arrayidx23 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld22, i32 0, i64 1
  %rtx24 = bitcast %union.rtunion_def* %arrayidx23 to %struct.rtx_def**
  %24 = load %struct.rtx_def*, %struct.rtx_def** %rtx24, align 8
  store %struct.rtx_def* %24, %struct.rtx_def** %ob, align 8
  %25 = load %struct.rtx_def*, %struct.rtx_def** %rb, align 8
  %26 = bitcast %struct.rtx_def* %25 to i32*
  %bf.load25 = load i32, i32* %26, align 8
  %bf.clear26 = and i32 %bf.load25, 65535
  %cmp27 = icmp eq i32 %bf.clear26, 75
  br i1 %cmp27, label %if.then.28, label %if.end.29

if.then.28:                                       ; preds = %if.end.18
  %27 = load %struct.rtx_def*, %struct.rtx_def** %rb, align 8
  store %struct.rtx_def* %27, %struct.rtx_def** %tmp, align 8
  %28 = load %struct.rtx_def*, %struct.rtx_def** %ob, align 8
  store %struct.rtx_def* %28, %struct.rtx_def** %rb, align 8
  %29 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  store %struct.rtx_def* %29, %struct.rtx_def** %ob, align 8
  br label %if.end.29

if.end.29:                                        ; preds = %if.then.28, %if.end.18
  %30 = load %struct.rtx_def*, %struct.rtx_def** %ra, align 8
  %31 = load %struct.rtx_def*, %struct.rtx_def** %rb, align 8
  %call = call i32 @rtx_equal_p(%struct.rtx_def* %30, %struct.rtx_def* %31)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then.30, label %if.else

if.then.30:                                       ; preds = %if.end.29
  %32 = load %struct.rtx_def*, %struct.rtx_def** %oa, align 8
  store %struct.rtx_def* %32, %struct.rtx_def** %a.addr, align 8
  %33 = load %struct.rtx_def*, %struct.rtx_def** %ob, align 8
  store %struct.rtx_def* %33, %struct.rtx_def** %b.addr, align 8
  br label %if.end.56

if.else:                                          ; preds = %if.end.29
  %34 = load %struct.rtx_def*, %struct.rtx_def** %ob, align 8
  %35 = bitcast %struct.rtx_def* %34 to i32*
  %bf.load31 = load i32, i32* %35, align 8
  %bf.clear32 = and i32 %bf.load31, 65535
  %cmp33 = icmp ne i32 %bf.clear32, 75
  br i1 %cmp33, label %land.lhs.true.34, label %if.else.38

land.lhs.true.34:                                 ; preds = %if.else
  %36 = load %struct.rtx_def*, %struct.rtx_def** %ra, align 8
  %37 = load %struct.rtx_def*, %struct.rtx_def** %ob, align 8
  %call35 = call i32 @rtx_equal_p(%struct.rtx_def* %36, %struct.rtx_def* %37)
  %tobool36 = icmp ne i32 %call35, 0
  br i1 %tobool36, label %if.then.37, label %if.else.38

if.then.37:                                       ; preds = %land.lhs.true.34
  %38 = load %struct.rtx_def*, %struct.rtx_def** %oa, align 8
  store %struct.rtx_def* %38, %struct.rtx_def** %a.addr, align 8
  %39 = load %struct.rtx_def*, %struct.rtx_def** %rb, align 8
  store %struct.rtx_def* %39, %struct.rtx_def** %b.addr, align 8
  br label %if.end.55

if.else.38:                                       ; preds = %land.lhs.true.34, %if.else
  %40 = load %struct.rtx_def*, %struct.rtx_def** %oa, align 8
  %41 = bitcast %struct.rtx_def* %40 to i32*
  %bf.load39 = load i32, i32* %41, align 8
  %bf.clear40 = and i32 %bf.load39, 65535
  %cmp41 = icmp ne i32 %bf.clear40, 75
  br i1 %cmp41, label %land.lhs.true.42, label %if.else.46

land.lhs.true.42:                                 ; preds = %if.else.38
  %42 = load %struct.rtx_def*, %struct.rtx_def** %oa, align 8
  %43 = load %struct.rtx_def*, %struct.rtx_def** %rb, align 8
  %call43 = call i32 @rtx_equal_p(%struct.rtx_def* %42, %struct.rtx_def* %43)
  %tobool44 = icmp ne i32 %call43, 0
  br i1 %tobool44, label %if.then.45, label %if.else.46

if.then.45:                                       ; preds = %land.lhs.true.42
  %44 = load %struct.rtx_def*, %struct.rtx_def** %ra, align 8
  store %struct.rtx_def* %44, %struct.rtx_def** %a.addr, align 8
  %45 = load %struct.rtx_def*, %struct.rtx_def** %ob, align 8
  store %struct.rtx_def* %45, %struct.rtx_def** %b.addr, align 8
  br label %if.end.54

if.else.46:                                       ; preds = %land.lhs.true.42, %if.else.38
  %46 = load %struct.rtx_def*, %struct.rtx_def** %a.addr, align 8
  %47 = load %struct.rtx_def*, %struct.rtx_def** %ob, align 8
  %48 = load %struct.rtx_def*, %struct.rtx_def** %mult.addr, align 8
  %call47 = call %struct.rtx_def* @express_from_1(%struct.rtx_def* %46, %struct.rtx_def* %47, %struct.rtx_def* %48)
  store %struct.rtx_def* %call47, %struct.rtx_def** %ob, align 8
  %49 = load %struct.rtx_def*, %struct.rtx_def** %ob, align 8
  %cmp48 = icmp eq %struct.rtx_def* %49, null
  br i1 %cmp48, label %if.then.49, label %if.end.50

if.then.49:                                       ; preds = %if.else.46
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end.50:                                        ; preds = %if.else.46
  %50 = load %struct.rtx_def*, %struct.rtx_def** %b.addr, align 8
  %51 = bitcast %struct.rtx_def* %50 to i32*
  %bf.load51 = load i32, i32* %51, align 8
  %bf.lshr = lshr i32 %bf.load51, 16
  %bf.clear52 = and i32 %bf.lshr, 255
  %52 = load %struct.rtx_def*, %struct.rtx_def** %rb, align 8
  %53 = load %struct.rtx_def*, %struct.rtx_def** %ob, align 8
  %call53 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %bf.clear52, %struct.rtx_def* %52, %struct.rtx_def* %53)
  store %struct.rtx_def* %call53, %struct.rtx_def** %retval
  br label %return

if.end.54:                                        ; preds = %if.then.45
  br label %if.end.55

if.end.55:                                        ; preds = %if.end.54, %if.then.37
  br label %if.end.56

if.end.56:                                        ; preds = %if.end.55, %if.then.30
  br label %while.cond

while.end:                                        ; preds = %land.end
  %54 = load %struct.rtx_def*, %struct.rtx_def** %a.addr, align 8
  %55 = bitcast %struct.rtx_def* %54 to i32*
  %bf.load57 = load i32, i32* %55, align 8
  %bf.clear58 = and i32 %bf.load57, 65535
  %cmp59 = icmp eq i32 %bf.clear58, 75
  br i1 %cmp59, label %if.then.60, label %if.else.91

if.then.60:                                       ; preds = %while.end
  %56 = load %struct.rtx_def*, %struct.rtx_def** %a.addr, align 8
  %fld65 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %56, i32 0, i32 1
  %arrayidx66 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld65, i32 0, i64 0
  %rtx67 = bitcast %union.rtunion_def* %arrayidx66 to %struct.rtx_def**
  %57 = load %struct.rtx_def*, %struct.rtx_def** %rtx67, align 8
  store %struct.rtx_def* %57, %struct.rtx_def** %ra62, align 8
  %58 = load %struct.rtx_def*, %struct.rtx_def** %a.addr, align 8
  %fld68 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %58, i32 0, i32 1
  %arrayidx69 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld68, i32 0, i64 1
  %rtx70 = bitcast %union.rtunion_def* %arrayidx69 to %struct.rtx_def**
  %59 = load %struct.rtx_def*, %struct.rtx_def** %rtx70, align 8
  store %struct.rtx_def* %59, %struct.rtx_def** %oa64, align 8
  %60 = load %struct.rtx_def*, %struct.rtx_def** %oa64, align 8
  %61 = load %struct.rtx_def*, %struct.rtx_def** %b.addr, align 8
  %call71 = call i32 @rtx_equal_p(%struct.rtx_def* %60, %struct.rtx_def* %61)
  %tobool72 = icmp ne i32 %call71, 0
  br i1 %tobool72, label %if.then.73, label %if.else.74

if.then.73:                                       ; preds = %if.then.60
  %62 = load %struct.rtx_def*, %struct.rtx_def** %ra62, align 8
  store %struct.rtx_def* %62, %struct.rtx_def** %oa64, align 8
  br label %if.end.79

if.else.74:                                       ; preds = %if.then.60
  %63 = load %struct.rtx_def*, %struct.rtx_def** %ra62, align 8
  %64 = load %struct.rtx_def*, %struct.rtx_def** %b.addr, align 8
  %call75 = call i32 @rtx_equal_p(%struct.rtx_def* %63, %struct.rtx_def* %64)
  %tobool76 = icmp ne i32 %call75, 0
  br i1 %tobool76, label %if.end.78, label %if.then.77

if.then.77:                                       ; preds = %if.else.74
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end.78:                                        ; preds = %if.else.74
  br label %if.end.79

if.end.79:                                        ; preds = %if.end.78, %if.then.73
  %65 = load %struct.rtx_def*, %struct.rtx_def** %oa64, align 8
  %66 = bitcast %struct.rtx_def* %65 to i32*
  %bf.load80 = load i32, i32* %66, align 8
  %bf.clear81 = and i32 %bf.load80, 65535
  %cmp82 = icmp ne i32 %bf.clear81, 54
  br i1 %cmp82, label %if.then.83, label %if.end.84

if.then.83:                                       ; preds = %if.end.79
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end.84:                                        ; preds = %if.end.79
  %67 = load %struct.rtx_def*, %struct.rtx_def** %oa64, align 8
  %fld85 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %67, i32 0, i32 1
  %arrayidx86 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld85, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx86 to i64*
  %68 = load i64, i64* %rtwint, align 8
  %sub = sub nsw i64 0, %68
  %69 = load %struct.rtx_def*, %struct.rtx_def** %mult.addr, align 8
  %fld87 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %69, i32 0, i32 1
  %arrayidx88 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld87, i32 0, i64 0
  %rtwint89 = bitcast %union.rtunion_def* %arrayidx88 to i64*
  %70 = load i64, i64* %rtwint89, align 8
  %mul = mul nsw i64 %sub, %70
  %call90 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %mul)
  store %struct.rtx_def* %call90, %struct.rtx_def** %retval
  br label %return

if.else.91:                                       ; preds = %while.end
  %71 = load %struct.rtx_def*, %struct.rtx_def** %a.addr, align 8
  %72 = bitcast %struct.rtx_def* %71 to i32*
  %bf.load92 = load i32, i32* %72, align 8
  %bf.clear93 = and i32 %bf.load92, 65535
  %cmp94 = icmp eq i32 %bf.clear93, 54
  br i1 %cmp94, label %if.then.95, label %if.else.105

if.then.95:                                       ; preds = %if.else.91
  %73 = load %struct.rtx_def*, %struct.rtx_def** %b.addr, align 8
  %74 = load %struct.rtx_def*, %struct.rtx_def** %a.addr, align 8
  %fld96 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %74, i32 0, i32 1
  %arrayidx97 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld96, i32 0, i64 0
  %rtwint98 = bitcast %union.rtunion_def* %arrayidx97 to i64*
  %75 = load i64, i64* %rtwint98, align 8
  %sub99 = sub nsw i64 0, %75
  %76 = load %struct.rtx_def*, %struct.rtx_def** %mult.addr, align 8
  %fld100 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %76, i32 0, i32 1
  %arrayidx101 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld100, i32 0, i64 0
  %rtwint102 = bitcast %union.rtunion_def* %arrayidx101 to i64*
  %77 = load i64, i64* %rtwint102, align 8
  %mul103 = mul nsw i64 %sub99, %77
  %call104 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %73, i64 %mul103)
  store %struct.rtx_def* %call104, %struct.rtx_def** %retval
  br label %return

if.else.105:                                      ; preds = %if.else.91
  %78 = load %struct.rtx_def*, %struct.rtx_def** %a.addr, align 8
  %79 = bitcast %struct.rtx_def* %78 to i32*
  %bf.load106 = load i32, i32* %79, align 8
  %bf.clear107 = and i32 %bf.load106, 65535
  %cmp108 = icmp eq i32 %bf.clear107, 67
  br i1 %cmp108, label %if.then.136, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else.105
  %80 = load %struct.rtx_def*, %struct.rtx_def** %a.addr, align 8
  %81 = bitcast %struct.rtx_def* %80 to i32*
  %bf.load109 = load i32, i32* %81, align 8
  %bf.clear110 = and i32 %bf.load109, 65535
  %cmp111 = icmp eq i32 %bf.clear110, 68
  br i1 %cmp111, label %if.then.136, label %lor.lhs.false.112

lor.lhs.false.112:                                ; preds = %lor.lhs.false
  %82 = load %struct.rtx_def*, %struct.rtx_def** %a.addr, align 8
  %83 = bitcast %struct.rtx_def* %82 to i32*
  %bf.load113 = load i32, i32* %83, align 8
  %bf.clear114 = and i32 %bf.load113, 65535
  %cmp115 = icmp eq i32 %bf.clear114, 54
  br i1 %cmp115, label %if.then.136, label %lor.lhs.false.116

lor.lhs.false.116:                                ; preds = %lor.lhs.false.112
  %84 = load %struct.rtx_def*, %struct.rtx_def** %a.addr, align 8
  %85 = bitcast %struct.rtx_def* %84 to i32*
  %bf.load117 = load i32, i32* %85, align 8
  %bf.clear118 = and i32 %bf.load117, 65535
  %cmp119 = icmp eq i32 %bf.clear118, 55
  br i1 %cmp119, label %if.then.136, label %lor.lhs.false.120

lor.lhs.false.120:                                ; preds = %lor.lhs.false.116
  %86 = load %struct.rtx_def*, %struct.rtx_def** %a.addr, align 8
  %87 = bitcast %struct.rtx_def* %86 to i32*
  %bf.load121 = load i32, i32* %87, align 8
  %bf.clear122 = and i32 %bf.load121, 65535
  %cmp123 = icmp eq i32 %bf.clear122, 58
  br i1 %cmp123, label %if.then.136, label %lor.lhs.false.124

lor.lhs.false.124:                                ; preds = %lor.lhs.false.120
  %88 = load %struct.rtx_def*, %struct.rtx_def** %a.addr, align 8
  %89 = bitcast %struct.rtx_def* %88 to i32*
  %bf.load125 = load i32, i32* %89, align 8
  %bf.clear126 = and i32 %bf.load125, 65535
  %cmp127 = icmp eq i32 %bf.clear126, 134
  br i1 %cmp127, label %if.then.136, label %lor.lhs.false.128

lor.lhs.false.128:                                ; preds = %lor.lhs.false.124
  %90 = load %struct.rtx_def*, %struct.rtx_def** %a.addr, align 8
  %91 = bitcast %struct.rtx_def* %90 to i32*
  %bf.load129 = load i32, i32* %91, align 8
  %bf.clear130 = and i32 %bf.load129, 65535
  %cmp131 = icmp eq i32 %bf.clear130, 56
  br i1 %cmp131, label %if.then.136, label %lor.lhs.false.132

lor.lhs.false.132:                                ; preds = %lor.lhs.false.128
  %92 = load %struct.rtx_def*, %struct.rtx_def** %a.addr, align 8
  %93 = bitcast %struct.rtx_def* %92 to i32*
  %bf.load133 = load i32, i32* %93, align 8
  %bf.clear134 = and i32 %bf.load133, 65535
  %cmp135 = icmp eq i32 %bf.clear134, 140
  br i1 %cmp135, label %if.then.136, label %if.else.148

if.then.136:                                      ; preds = %lor.lhs.false.132, %lor.lhs.false.128, %lor.lhs.false.124, %lor.lhs.false.120, %lor.lhs.false.116, %lor.lhs.false.112, %lor.lhs.false, %if.else.105
  %94 = load %struct.rtx_def*, %struct.rtx_def** %a.addr, align 8
  %95 = bitcast %struct.rtx_def* %94 to i32*
  %bf.load138 = load i32, i32* %95, align 8
  %bf.lshr139 = lshr i32 %bf.load138, 16
  %bf.clear140 = and i32 %bf.lshr139, 255
  store i32 %bf.clear140, i32* %mode_a, align 4
  %96 = load %struct.rtx_def*, %struct.rtx_def** %b.addr, align 8
  %97 = bitcast %struct.rtx_def* %96 to i32*
  %bf.load142 = load i32, i32* %97, align 8
  %bf.lshr143 = lshr i32 %bf.load142, 16
  %bf.clear144 = and i32 %bf.lshr143, 255
  store i32 %bf.clear144, i32* %mode_b, align 4
  %98 = load i32, i32* %mode_b, align 4
  %cmp146 = icmp eq i32 %98, 0
  br i1 %cmp146, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.136
  %99 = load i32, i32* %mode_a, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.then.136
  %100 = load i32, i32* %mode_b, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %99, %cond.true ], [ %100, %cond.false ]
  store i32 %cond, i32* %mode, align 4
  %101 = load i32, i32* %mode, align 4
  %102 = load %struct.rtx_def*, %struct.rtx_def** %b.addr, align 8
  %103 = load %struct.rtx_def*, %struct.rtx_def** %a.addr, align 8
  %call147 = call %struct.rtx_def* @simplify_gen_binary(i32 76, i32 %101, %struct.rtx_def* %102, %struct.rtx_def* %103)
  store %struct.rtx_def* %call147, %struct.rtx_def** %retval
  br label %return

if.else.148:                                      ; preds = %lor.lhs.false.132
  %104 = load %struct.rtx_def*, %struct.rtx_def** %b.addr, align 8
  %105 = bitcast %struct.rtx_def* %104 to i32*
  %bf.load149 = load i32, i32* %105, align 8
  %bf.clear150 = and i32 %bf.load149, 65535
  %cmp151 = icmp eq i32 %bf.clear150, 75
  br i1 %cmp151, label %if.then.152, label %if.else.173

if.then.152:                                      ; preds = %if.else.148
  %106 = load %struct.rtx_def*, %struct.rtx_def** %a.addr, align 8
  %107 = load %struct.rtx_def*, %struct.rtx_def** %b.addr, align 8
  %fld153 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %107, i32 0, i32 1
  %arrayidx154 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld153, i32 0, i64 0
  %rtx155 = bitcast %union.rtunion_def* %arrayidx154 to %struct.rtx_def**
  %108 = load %struct.rtx_def*, %struct.rtx_def** %rtx155, align 8
  %call156 = call i32 @rtx_equal_p(%struct.rtx_def* %106, %struct.rtx_def* %108)
  %tobool157 = icmp ne i32 %call156, 0
  br i1 %tobool157, label %if.then.158, label %if.else.162

if.then.158:                                      ; preds = %if.then.152
  %109 = load %struct.rtx_def*, %struct.rtx_def** %b.addr, align 8
  %fld159 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %109, i32 0, i32 1
  %arrayidx160 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld159, i32 0, i64 1
  %rtx161 = bitcast %union.rtunion_def* %arrayidx160 to %struct.rtx_def**
  %110 = load %struct.rtx_def*, %struct.rtx_def** %rtx161, align 8
  store %struct.rtx_def* %110, %struct.rtx_def** %retval
  br label %return

if.else.162:                                      ; preds = %if.then.152
  %111 = load %struct.rtx_def*, %struct.rtx_def** %a.addr, align 8
  %112 = load %struct.rtx_def*, %struct.rtx_def** %b.addr, align 8
  %fld163 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %112, i32 0, i32 1
  %arrayidx164 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld163, i32 0, i64 1
  %rtx165 = bitcast %union.rtunion_def* %arrayidx164 to %struct.rtx_def**
  %113 = load %struct.rtx_def*, %struct.rtx_def** %rtx165, align 8
  %call166 = call i32 @rtx_equal_p(%struct.rtx_def* %111, %struct.rtx_def* %113)
  %tobool167 = icmp ne i32 %call166, 0
  br i1 %tobool167, label %if.then.168, label %if.else.172

if.then.168:                                      ; preds = %if.else.162
  %114 = load %struct.rtx_def*, %struct.rtx_def** %b.addr, align 8
  %fld169 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %114, i32 0, i32 1
  %arrayidx170 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld169, i32 0, i64 0
  %rtx171 = bitcast %union.rtunion_def* %arrayidx170 to %struct.rtx_def**
  %115 = load %struct.rtx_def*, %struct.rtx_def** %rtx171, align 8
  store %struct.rtx_def* %115, %struct.rtx_def** %retval
  br label %return

if.else.172:                                      ; preds = %if.else.162
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.else.173:                                      ; preds = %if.else.148
  %116 = load %struct.rtx_def*, %struct.rtx_def** %a.addr, align 8
  %117 = load %struct.rtx_def*, %struct.rtx_def** %b.addr, align 8
  %call174 = call i32 @rtx_equal_p(%struct.rtx_def* %116, %struct.rtx_def* %117)
  %tobool175 = icmp ne i32 %call174, 0
  br i1 %tobool175, label %if.then.176, label %if.end.177

if.then.176:                                      ; preds = %if.else.173
  %118 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  store %struct.rtx_def* %118, %struct.rtx_def** %retval
  br label %return

if.end.177:                                       ; preds = %if.else.173
  br label %if.end.178

if.end.178:                                       ; preds = %if.end.177
  br label %if.end.179

if.end.179:                                       ; preds = %if.end.178
  br label %if.end.180

if.end.180:                                       ; preds = %if.end.179
  br label %if.end.181

if.end.181:                                       ; preds = %if.end.180
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end.181, %if.then.176, %if.else.172, %if.then.168, %if.then.158, %cond.end, %if.then.95, %if.end.84, %if.then.83, %if.then.77, %if.end.50, %if.then.49, %if.then.3, %if.then
  %119 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %119
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @extend_value_for_giv(%struct.induction* %v, %struct.rtx_def* %value) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %v.addr = alloca %struct.induction*, align 8
  %value.addr = alloca %struct.rtx_def*, align 8
  %ext_dep = alloca %struct.rtx_def*, align 8
  store %struct.induction* %v, %struct.induction** %v.addr, align 8
  store %struct.rtx_def* %value, %struct.rtx_def** %value.addr, align 8
  %0 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %ext_dependent = getelementptr inbounds %struct.induction, %struct.induction* %0, i32 0, i32 16
  %1 = load %struct.rtx_def*, %struct.rtx_def** %ext_dependent, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %ext_dep, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %ext_dep, align 8
  %tobool = icmp ne %struct.rtx_def* %2, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8
  %5 = bitcast %struct.rtx_def* %4 to i32*
  %bf.load = load i32, i32* %5, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 67
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %6 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8
  %7 = bitcast %struct.rtx_def* %6 to i32*
  %bf.load1 = load i32, i32* %7, align 8
  %bf.clear2 = and i32 %bf.load1, 65535
  %cmp3 = icmp eq i32 %bf.clear2, 68
  br i1 %cmp3, label %land.lhs.true, label %lor.lhs.false.4

lor.lhs.false.4:                                  ; preds = %lor.lhs.false
  %8 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8
  %9 = bitcast %struct.rtx_def* %8 to i32*
  %bf.load5 = load i32, i32* %9, align 8
  %bf.clear6 = and i32 %bf.load5, 65535
  %cmp7 = icmp eq i32 %bf.clear6, 54
  br i1 %cmp7, label %land.lhs.true, label %lor.lhs.false.8

lor.lhs.false.8:                                  ; preds = %lor.lhs.false.4
  %10 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8
  %11 = bitcast %struct.rtx_def* %10 to i32*
  %bf.load9 = load i32, i32* %11, align 8
  %bf.clear10 = and i32 %bf.load9, 65535
  %cmp11 = icmp eq i32 %bf.clear10, 55
  br i1 %cmp11, label %land.lhs.true, label %lor.lhs.false.12

lor.lhs.false.12:                                 ; preds = %lor.lhs.false.8
  %12 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8
  %13 = bitcast %struct.rtx_def* %12 to i32*
  %bf.load13 = load i32, i32* %13, align 8
  %bf.clear14 = and i32 %bf.load13, 65535
  %cmp15 = icmp eq i32 %bf.clear14, 58
  br i1 %cmp15, label %land.lhs.true, label %lor.lhs.false.16

lor.lhs.false.16:                                 ; preds = %lor.lhs.false.12
  %14 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8
  %15 = bitcast %struct.rtx_def* %14 to i32*
  %bf.load17 = load i32, i32* %15, align 8
  %bf.clear18 = and i32 %bf.load17, 65535
  %cmp19 = icmp eq i32 %bf.clear18, 134
  br i1 %cmp19, label %land.lhs.true, label %lor.lhs.false.20

lor.lhs.false.20:                                 ; preds = %lor.lhs.false.16
  %16 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8
  %17 = bitcast %struct.rtx_def* %16 to i32*
  %bf.load21 = load i32, i32* %17, align 8
  %bf.clear22 = and i32 %bf.load21, 65535
  %cmp23 = icmp eq i32 %bf.clear22, 56
  br i1 %cmp23, label %land.lhs.true, label %lor.lhs.false.24

lor.lhs.false.24:                                 ; preds = %lor.lhs.false.20
  %18 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8
  %19 = bitcast %struct.rtx_def* %18 to i32*
  %bf.load25 = load i32, i32* %19, align 8
  %bf.clear26 = and i32 %bf.load25, 65535
  %cmp27 = icmp eq i32 %bf.clear26, 140
  br i1 %cmp27, label %land.lhs.true, label %if.end.32

land.lhs.true:                                    ; preds = %lor.lhs.false.24, %lor.lhs.false.20, %lor.lhs.false.16, %lor.lhs.false.12, %lor.lhs.false.8, %lor.lhs.false.4, %lor.lhs.false, %if.end
  %20 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8
  %21 = bitcast %struct.rtx_def* %20 to i32*
  %bf.load28 = load i32, i32* %21, align 8
  %bf.lshr = lshr i32 %bf.load28, 16
  %bf.clear29 = and i32 %bf.lshr, 255
  %cmp30 = icmp eq i32 %bf.clear29, 0
  br i1 %cmp30, label %if.then.31, label %if.end.32

if.then.31:                                       ; preds = %land.lhs.true
  %22 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8
  store %struct.rtx_def* %22, %struct.rtx_def** %retval
  br label %return

if.end.32:                                        ; preds = %land.lhs.true, %lor.lhs.false.24
  %23 = load %struct.rtx_def*, %struct.rtx_def** %ext_dep, align 8
  %24 = bitcast %struct.rtx_def* %23 to i32*
  %bf.load33 = load i32, i32* %24, align 8
  %bf.clear34 = and i32 %bf.load33, 65535
  %25 = load %struct.rtx_def*, %struct.rtx_def** %ext_dep, align 8
  %26 = bitcast %struct.rtx_def* %25 to i32*
  %bf.load35 = load i32, i32* %26, align 8
  %bf.lshr36 = lshr i32 %bf.load35, 16
  %bf.clear37 = and i32 %bf.lshr36, 255
  %27 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 %bf.clear34, i32 %bf.clear37, %struct.rtx_def* %27)
  store %struct.rtx_def* %call, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end.32, %if.then.31, %if.then
  %28 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %28
}

declare %struct.rtx_def* @gen_rtx_fmt_e(i32, i32, %struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define void @loop_iv_add_mult_emit_before(%struct.loop* %loop, %struct.rtx_def* %b, %struct.rtx_def* %m, %struct.rtx_def* %a, %struct.rtx_def* %reg, %struct.basic_block_def* %before_bb, %struct.rtx_def* %before_insn) #0 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %b.addr = alloca %struct.rtx_def*, align 8
  %m.addr = alloca %struct.rtx_def*, align 8
  %a.addr = alloca %struct.rtx_def*, align 8
  %reg.addr = alloca %struct.rtx_def*, align 8
  %before_bb.addr = alloca %struct.basic_block_def*, align 8
  %before_insn.addr = alloca %struct.rtx_def*, align 8
  %seq = alloca %struct.rtx_def*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  store %struct.rtx_def* %b, %struct.rtx_def** %b.addr, align 8
  store %struct.rtx_def* %m, %struct.rtx_def** %m.addr, align 8
  store %struct.rtx_def* %a, %struct.rtx_def** %a.addr, align 8
  store %struct.rtx_def* %reg, %struct.rtx_def** %reg.addr, align 8
  store %struct.basic_block_def* %before_bb, %struct.basic_block_def** %before_bb.addr, align 8
  store %struct.rtx_def* %before_insn, %struct.rtx_def** %before_insn.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %before_insn.addr, align 8
  %tobool = icmp ne %struct.rtx_def* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %b.addr, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %m.addr, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %a.addr, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  call void @loop_iv_add_mult_hoist(%struct.loop* %1, %struct.rtx_def* %2, %struct.rtx_def* %3, %struct.rtx_def* %4, %struct.rtx_def* %5)
  br label %return

if.end:                                           ; preds = %entry
  %6 = load %struct.rtx_def*, %struct.rtx_def** %b.addr, align 8
  %call = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %6)
  %7 = load %struct.rtx_def*, %struct.rtx_def** %m.addr, align 8
  %call1 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %7)
  %8 = load %struct.rtx_def*, %struct.rtx_def** %a.addr, align 8
  %call2 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %8)
  %9 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %call3 = call %struct.rtx_def* @gen_add_mult(%struct.rtx_def* %call, %struct.rtx_def* %call1, %struct.rtx_def* %call2, %struct.rtx_def* %9)
  store %struct.rtx_def* %call3, %struct.rtx_def** %seq, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %a.addr, align 8
  %11 = load %struct.rtx_def*, %struct.rtx_def** %before_insn.addr, align 8
  call void @update_reg_last_use(%struct.rtx_def* %10, %struct.rtx_def* %11)
  %12 = load %struct.rtx_def*, %struct.rtx_def** %b.addr, align 8
  %13 = load %struct.rtx_def*, %struct.rtx_def** %before_insn.addr, align 8
  call void @update_reg_last_use(%struct.rtx_def* %12, %struct.rtx_def* %13)
  %14 = load %struct.rtx_def*, %struct.rtx_def** %m.addr, align 8
  %15 = load %struct.rtx_def*, %struct.rtx_def** %before_insn.addr, align 8
  call void @update_reg_last_use(%struct.rtx_def* %14, %struct.rtx_def* %15)
  %16 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %before_bb.addr, align 8
  %18 = load %struct.rtx_def*, %struct.rtx_def** %before_insn.addr, align 8
  %19 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8
  %call4 = call %struct.rtx_def* @loop_insn_emit_before(%struct.loop* %16, %struct.basic_block_def* %17, %struct.rtx_def* %18, %struct.rtx_def* %19)
  %20 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %21 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8
  call void @loop_regs_update(%struct.loop* %20, %struct.rtx_def* %21)
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define void @loop_iv_add_mult_hoist(%struct.loop* %loop, %struct.rtx_def* %b, %struct.rtx_def* %m, %struct.rtx_def* %a, %struct.rtx_def* %reg) #0 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %b.addr = alloca %struct.rtx_def*, align 8
  %m.addr = alloca %struct.rtx_def*, align 8
  %a.addr = alloca %struct.rtx_def*, align 8
  %reg.addr = alloca %struct.rtx_def*, align 8
  %seq = alloca %struct.rtx_def*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  store %struct.rtx_def* %b, %struct.rtx_def** %b.addr, align 8
  store %struct.rtx_def* %m, %struct.rtx_def** %m.addr, align 8
  store %struct.rtx_def* %a, %struct.rtx_def** %a.addr, align 8
  store %struct.rtx_def* %reg, %struct.rtx_def** %reg.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %b.addr, align 8
  %call = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %0)
  %1 = load %struct.rtx_def*, %struct.rtx_def** %m.addr, align 8
  %call1 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %1)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %a.addr, align 8
  %call2 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %2)
  %3 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %call3 = call %struct.rtx_def* @gen_add_mult(%struct.rtx_def* %call, %struct.rtx_def* %call1, %struct.rtx_def* %call2, %struct.rtx_def* %3)
  store %struct.rtx_def* %call3, %struct.rtx_def** %seq, align 8
  %4 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8
  %call4 = call %struct.rtx_def* @loop_insn_hoist(%struct.loop* %4, %struct.rtx_def* %5)
  %6 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8
  call void @loop_regs_update(%struct.loop* %6, %struct.rtx_def* %7)
  ret void
}

; Function Attrs: nounwind uwtable
define internal %struct.rtx_def* @gen_add_mult(%struct.rtx_def* %b, %struct.rtx_def* %m, %struct.rtx_def* %a, %struct.rtx_def* %reg) #0 {
entry:
  %b.addr = alloca %struct.rtx_def*, align 8
  %m.addr = alloca %struct.rtx_def*, align 8
  %a.addr = alloca %struct.rtx_def*, align 8
  %reg.addr = alloca %struct.rtx_def*, align 8
  %seq = alloca %struct.rtx_def*, align 8
  %result = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %b, %struct.rtx_def** %b.addr, align 8
  store %struct.rtx_def* %m, %struct.rtx_def** %m.addr, align 8
  store %struct.rtx_def* %a, %struct.rtx_def** %a.addr, align 8
  store %struct.rtx_def* %reg, %struct.rtx_def** %reg.addr, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %b.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %m.addr, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %a.addr, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %5 = bitcast %struct.rtx_def* %4 to i32*
  %bf.load = load i32, i32* %5, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %call = call %struct.rtx_def* @expand_mult_add(%struct.rtx_def* %0, %struct.rtx_def* %1, %struct.rtx_def* %2, %struct.rtx_def* %3, i32 %bf.clear, i32 1)
  store %struct.rtx_def* %call, %struct.rtx_def** %result, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8
  %cmp = icmp ne %struct.rtx_def* %6, %7
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %8 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8
  %call1 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %8, %struct.rtx_def* %9)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %call2 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call2, %struct.rtx_def** %seq, align 8
  call void @end_sequence()
  %10 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8
  ret %struct.rtx_def* %10
}

declare %struct.rtx_def* @copy_rtx(%struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define internal void @update_reg_last_use(%struct.rtx_def* %x, %struct.rtx_def* %insn) #0 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %fmt = alloca i8*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 61
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx to i32*
  %3 = load i32, i32* %rtuint, align 4
  %4 = load i32, i32* @max_reg_before_loop, align 4
  %cmp1 = icmp ult i32 %3, %4
  br i1 %cmp1, label %land.lhs.true.2, label %if.else

land.lhs.true.2:                                  ; preds = %land.lhs.true
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld3 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1
  %arrayidx4 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3, i32 0, i64 0
  %rtint = bitcast %union.rtunion_def* %arrayidx4 to i32*
  %6 = load i32, i32* %rtint, align 4
  %7 = load i32, i32* @max_uid_for_loop, align 4
  %cmp5 = icmp slt i32 %6, %7
  br i1 %cmp5, label %land.lhs.true.6, label %if.else

land.lhs.true.6:                                  ; preds = %land.lhs.true.2
  %8 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld7 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1
  %arrayidx8 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld7, i32 0, i64 0
  %rtuint9 = bitcast %union.rtunion_def* %arrayidx8 to i32*
  %9 = load i32, i32* %rtuint9, align 4
  %idxprom = zext i32 %9 to i64
  %10 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %data = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %10, i32 0, i32 4
  %reg = bitcast %union.varray_data_tag* %data to [1 x %struct.reg_info_def*]*
  %arrayidx10 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %reg, i32 0, i64 %idxprom
  %11 = load %struct.reg_info_def*, %struct.reg_info_def** %arrayidx10, align 8
  %last_uid = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %11, i32 0, i32 1
  %12 = load i32, i32* %last_uid, align 4
  %idxprom11 = sext i32 %12 to i64
  %13 = load i32*, i32** @uid_luid, align 8
  %arrayidx12 = getelementptr inbounds i32, i32* %13, i64 %idxprom11
  %14 = load i32, i32* %arrayidx12, align 4
  %15 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld13 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1
  %arrayidx14 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld13, i32 0, i64 0
  %rtint15 = bitcast %union.rtunion_def* %arrayidx14 to i32*
  %16 = load i32, i32* %rtint15, align 4
  %17 = load i32, i32* @max_uid_for_loop, align 4
  %cmp16 = icmp slt i32 %16, %17
  br i1 %cmp16, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true.6
  %18 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld17 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1
  %arrayidx18 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld17, i32 0, i64 0
  %rtint19 = bitcast %union.rtunion_def* %arrayidx18 to i32*
  %19 = load i32, i32* %rtint19, align 4
  %idxprom20 = sext i32 %19 to i64
  %20 = load i32*, i32** @uid_luid, align 8
  %arrayidx21 = getelementptr inbounds i32, i32* %20, i64 %idxprom20
  %21 = load i32, i32* %arrayidx21, align 4
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true.6
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 9024, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__FUNCTION__.update_reg_last_use, i32 0, i32 0)) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %22, %cond.true
  %cond = phi i32 [ %21, %cond.true ], [ -1, %22 ]
  %cmp22 = icmp slt i32 %14, %cond
  br i1 %cmp22, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end
  %23 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld23 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1
  %arrayidx24 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld23, i32 0, i64 0
  %rtint25 = bitcast %union.rtunion_def* %arrayidx24 to i32*
  %24 = load i32, i32* %rtint25, align 4
  %25 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld26 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1
  %arrayidx27 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld26, i32 0, i64 0
  %rtuint28 = bitcast %union.rtunion_def* %arrayidx27 to i32*
  %26 = load i32, i32* %rtuint28, align 4
  %idxprom29 = zext i32 %26 to i64
  %27 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %data30 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %27, i32 0, i32 4
  %reg31 = bitcast %union.varray_data_tag* %data30 to [1 x %struct.reg_info_def*]*
  %arrayidx32 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %reg31, i32 0, i64 %idxprom29
  %28 = load %struct.reg_info_def*, %struct.reg_info_def** %arrayidx32, align 8
  %last_uid33 = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %28, i32 0, i32 1
  store i32 %24, i32* %last_uid33, align 4
  br label %if.end.78

if.else:                                          ; preds = %cond.end, %land.lhs.true.2, %land.lhs.true, %entry
  %29 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %30 = bitcast %struct.rtx_def* %29 to i32*
  %bf.load34 = load i32, i32* %30, align 8
  %bf.clear35 = and i32 %bf.load34, 65535
  %idxprom36 = sext i32 %bf.clear35 to i64
  %arrayidx37 = getelementptr inbounds [153 x i8*], [153 x i8*]* @rtx_format, i32 0, i64 %idxprom36
  %31 = load i8*, i8** %arrayidx37, align 8
  store i8* %31, i8** %fmt, align 8
  %32 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %33 = bitcast %struct.rtx_def* %32 to i32*
  %bf.load38 = load i32, i32* %33, align 8
  %bf.clear39 = and i32 %bf.load38, 65535
  %idxprom40 = sext i32 %bf.clear39 to i64
  %arrayidx41 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_length, i32 0, i64 %idxprom40
  %34 = load i8, i8* %arrayidx41, align 1
  %conv = zext i8 %34 to i32
  %sub = sub nsw i32 %conv, 1
  store i32 %sub, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.75, %if.else
  %35 = load i32, i32* %i, align 4
  %cmp42 = icmp sge i32 %35, 0
  br i1 %cmp42, label %for.body, label %for.end.77

for.body:                                         ; preds = %for.cond
  %36 = load i32, i32* %i, align 4
  %idxprom44 = sext i32 %36 to i64
  %37 = load i8*, i8** %fmt, align 8
  %arrayidx45 = getelementptr inbounds i8, i8* %37, i64 %idxprom44
  %38 = load i8, i8* %arrayidx45, align 1
  %conv46 = sext i8 %38 to i32
  %cmp47 = icmp eq i32 %conv46, 101
  br i1 %cmp47, label %if.then.49, label %if.else.53

if.then.49:                                       ; preds = %for.body
  %39 = load i32, i32* %i, align 4
  %idxprom50 = sext i32 %39 to i64
  %40 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld51 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %40, i32 0, i32 1
  %arrayidx52 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld51, i32 0, i64 %idxprom50
  %rtx = bitcast %union.rtunion_def* %arrayidx52 to %struct.rtx_def**
  %41 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %42 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  call void @update_reg_last_use(%struct.rtx_def* %41, %struct.rtx_def* %42)
  br label %if.end.74

if.else.53:                                       ; preds = %for.body
  %43 = load i32, i32* %i, align 4
  %idxprom54 = sext i32 %43 to i64
  %44 = load i8*, i8** %fmt, align 8
  %arrayidx55 = getelementptr inbounds i8, i8* %44, i64 %idxprom54
  %45 = load i8, i8* %arrayidx55, align 1
  %conv56 = sext i8 %45 to i32
  %cmp57 = icmp eq i32 %conv56, 69
  br i1 %cmp57, label %if.then.59, label %if.end

if.then.59:                                       ; preds = %if.else.53
  %46 = load i32, i32* %i, align 4
  %idxprom60 = sext i32 %46 to i64
  %47 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld61 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %47, i32 0, i32 1
  %arrayidx62 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld61, i32 0, i64 %idxprom60
  %rtvec = bitcast %union.rtunion_def* %arrayidx62 to %struct.rtvec_def**
  %48 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec, align 8
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %48, i32 0, i32 0
  %49 = load i32, i32* %num_elem, align 4
  %sub63 = sub nsw i32 %49, 1
  store i32 %sub63, i32* %j, align 4
  br label %for.cond.64

for.cond.64:                                      ; preds = %for.inc, %if.then.59
  %50 = load i32, i32* %j, align 4
  %cmp65 = icmp sge i32 %50, 0
  br i1 %cmp65, label %for.body.67, label %for.end

for.body.67:                                      ; preds = %for.cond.64
  %51 = load i32, i32* %j, align 4
  %idxprom68 = sext i32 %51 to i64
  %52 = load i32, i32* %i, align 4
  %idxprom69 = sext i32 %52 to i64
  %53 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld70 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %53, i32 0, i32 1
  %arrayidx71 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld70, i32 0, i64 %idxprom69
  %rtvec72 = bitcast %union.rtunion_def* %arrayidx71 to %struct.rtvec_def**
  %54 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec72, align 8
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %54, i32 0, i32 1
  %arrayidx73 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i32 0, i64 %idxprom68
  %55 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx73, align 8
  %56 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  call void @update_reg_last_use(%struct.rtx_def* %55, %struct.rtx_def* %56)
  br label %for.inc

for.inc:                                          ; preds = %for.body.67
  %57 = load i32, i32* %j, align 4
  %dec = add nsw i32 %57, -1
  store i32 %dec, i32* %j, align 4
  br label %for.cond.64

for.end:                                          ; preds = %for.cond.64
  br label %if.end

if.end:                                           ; preds = %for.end, %if.else.53
  br label %if.end.74

if.end.74:                                        ; preds = %if.end, %if.then.49
  br label %for.inc.75

for.inc.75:                                       ; preds = %if.end.74
  %58 = load i32, i32* %i, align 4
  %dec76 = add nsw i32 %58, -1
  store i32 %dec76, i32* %i, align 4
  br label %for.cond

for.end.77:                                       ; preds = %for.cond
  br label %if.end.78

if.end.78:                                        ; preds = %for.end.77, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @loop_insn_emit_before(%struct.loop* %loop, %struct.basic_block_def* %where_bb, %struct.rtx_def* %where_insn, %struct.rtx_def* %pattern) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %where_bb.addr = alloca %struct.basic_block_def*, align 8
  %where_insn.addr = alloca %struct.rtx_def*, align 8
  %pattern.addr = alloca %struct.rtx_def*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  store %struct.basic_block_def* %where_bb, %struct.basic_block_def** %where_bb.addr, align 8
  store %struct.rtx_def* %where_insn, %struct.rtx_def** %where_insn.addr, align 8
  store %struct.rtx_def* %pattern, %struct.rtx_def** %pattern.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %where_insn.addr, align 8
  %tobool = icmp ne %struct.rtx_def* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8
  %call = call %struct.rtx_def* @loop_insn_hoist(%struct.loop* %1, %struct.rtx_def* %2)
  store %struct.rtx_def* %call, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %where_insn.addr, align 8
  %call1 = call %struct.rtx_def* @emit_insn_before(%struct.rtx_def* %3, %struct.rtx_def* %4)
  store %struct.rtx_def* %call1, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %5 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %5
}

; Function Attrs: nounwind uwtable
define internal void @loop_regs_update(%struct.loop* %loop, %struct.rtx_def* %seq) #0 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %seq.addr = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  %set = alloca %struct.rtx_def*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  store %struct.rtx_def* %seq, %struct.rtx_def** %seq.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %seq.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 24
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %2 = load i32, i32* %i, align 4
  %3 = load %struct.rtx_def*, %struct.rtx_def** %seq.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtvec = bitcast %union.rtunion_def* %arrayidx to %struct.rtvec_def**
  %4 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec, align 8
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %4, i32 0, i32 0
  %5 = load i32, i32* %num_elem, align 4
  %cmp1 = icmp slt i32 %2, %5
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %i, align 4
  %idxprom = sext i32 %6 to i64
  %7 = load %struct.rtx_def*, %struct.rtx_def** %seq.addr, align 8
  %fld2 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i32 0, i64 0
  %rtvec4 = bitcast %union.rtunion_def* %arrayidx3 to %struct.rtvec_def**
  %8 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec4, align 8
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %8, i32 0, i32 1
  %arrayidx5 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i32 0, i64 %idxprom
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  %10 = bitcast %struct.rtx_def* %9 to i32*
  %bf.load6 = load i32, i32* %10, align 8
  %bf.clear7 = and i32 %bf.load6, 65535
  %idxprom8 = sext i32 %bf.clear7 to i64
  %arrayidx9 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom8
  %11 = load i8, i8* %arrayidx9, align 1
  %conv = sext i8 %11 to i32
  %cmp10 = icmp eq i32 %conv, 105
  br i1 %cmp10, label %cond.true, label %cond.false.49

cond.true:                                        ; preds = %for.body
  %12 = load i32, i32* %i, align 4
  %idxprom12 = sext i32 %12 to i64
  %13 = load %struct.rtx_def*, %struct.rtx_def** %seq.addr, align 8
  %fld13 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1
  %arrayidx14 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld13, i32 0, i64 0
  %rtvec15 = bitcast %union.rtunion_def* %arrayidx14 to %struct.rtvec_def**
  %14 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec15, align 8
  %elem16 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %14, i32 0, i32 1
  %arrayidx17 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem16, i32 0, i64 %idxprom12
  %15 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx17, align 8
  %fld18 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1
  %arrayidx19 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld18, i32 0, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx19 to %struct.rtx_def**
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %17 = bitcast %struct.rtx_def* %16 to i32*
  %bf.load20 = load i32, i32* %17, align 8
  %bf.clear21 = and i32 %bf.load20, 65535
  %cmp22 = icmp eq i32 %bf.clear21, 47
  br i1 %cmp22, label %cond.true.24, label %cond.false

cond.true.24:                                     ; preds = %cond.true
  %18 = load i32, i32* %i, align 4
  %idxprom25 = sext i32 %18 to i64
  %19 = load %struct.rtx_def*, %struct.rtx_def** %seq.addr, align 8
  %fld26 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1
  %arrayidx27 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld26, i32 0, i64 0
  %rtvec28 = bitcast %union.rtunion_def* %arrayidx27 to %struct.rtvec_def**
  %20 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec28, align 8
  %elem29 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %20, i32 0, i32 1
  %arrayidx30 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem29, i32 0, i64 %idxprom25
  %21 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx30, align 8
  %fld31 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1
  %arrayidx32 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld31, i32 0, i64 3
  %rtx33 = bitcast %union.rtunion_def* %arrayidx32 to %struct.rtx_def**
  %22 = load %struct.rtx_def*, %struct.rtx_def** %rtx33, align 8
  br label %cond.end

cond.false:                                       ; preds = %cond.true
  %23 = load i32, i32* %i, align 4
  %idxprom34 = sext i32 %23 to i64
  %24 = load %struct.rtx_def*, %struct.rtx_def** %seq.addr, align 8
  %fld35 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1
  %arrayidx36 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld35, i32 0, i64 0
  %rtvec37 = bitcast %union.rtunion_def* %arrayidx36 to %struct.rtvec_def**
  %25 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec37, align 8
  %elem38 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %25, i32 0, i32 1
  %arrayidx39 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem38, i32 0, i64 %idxprom34
  %26 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx39, align 8
  %27 = load i32, i32* %i, align 4
  %idxprom40 = sext i32 %27 to i64
  %28 = load %struct.rtx_def*, %struct.rtx_def** %seq.addr, align 8
  %fld41 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1
  %arrayidx42 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld41, i32 0, i64 0
  %rtvec43 = bitcast %union.rtunion_def* %arrayidx42 to %struct.rtvec_def**
  %29 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec43, align 8
  %elem44 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %29, i32 0, i32 1
  %arrayidx45 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem44, i32 0, i64 %idxprom40
  %30 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx45, align 8
  %fld46 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %30, i32 0, i32 1
  %arrayidx47 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld46, i32 0, i64 3
  %rtx48 = bitcast %union.rtunion_def* %arrayidx47 to %struct.rtx_def**
  %31 = load %struct.rtx_def*, %struct.rtx_def** %rtx48, align 8
  %call = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %26, %struct.rtx_def* %31)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true.24
  %cond = phi %struct.rtx_def* [ %22, %cond.true.24 ], [ %call, %cond.false ]
  br label %cond.end.50

cond.false.49:                                    ; preds = %for.body
  br label %cond.end.50

cond.end.50:                                      ; preds = %cond.false.49, %cond.end
  %cond51 = phi %struct.rtx_def* [ %cond, %cond.end ], [ null, %cond.false.49 ]
  store %struct.rtx_def* %cond51, %struct.rtx_def** %set, align 8
  %32 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %tobool = icmp ne %struct.rtx_def* %32, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.end.50
  %33 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld52 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1
  %arrayidx53 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld52, i32 0, i64 0
  %rtx54 = bitcast %union.rtunion_def* %arrayidx53 to %struct.rtx_def**
  %34 = load %struct.rtx_def*, %struct.rtx_def** %rtx54, align 8
  %35 = bitcast %struct.rtx_def* %34 to i32*
  %bf.load55 = load i32, i32* %35, align 8
  %bf.clear56 = and i32 %bf.load55, 65535
  %cmp57 = icmp eq i32 %bf.clear56, 61
  br i1 %cmp57, label %if.then.59, label %if.end

if.then.59:                                       ; preds = %land.lhs.true
  %36 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld60 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %36, i32 0, i32 1
  %arrayidx61 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld60, i32 0, i64 0
  %rtx62 = bitcast %union.rtunion_def* %arrayidx61 to %struct.rtx_def**
  %37 = load %struct.rtx_def*, %struct.rtx_def** %rtx62, align 8
  %fld63 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %37, i32 0, i32 1
  %arrayidx64 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld63, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx64 to i32*
  %38 = load i32, i32* %rtuint, align 4
  %39 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld65 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1
  %arrayidx66 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld65, i32 0, i64 1
  %rtx67 = bitcast %union.rtunion_def* %arrayidx66 to %struct.rtx_def**
  %40 = load %struct.rtx_def*, %struct.rtx_def** %rtx67, align 8
  call void @record_base_value(i32 %38, %struct.rtx_def* %40, i32 0)
  br label %if.end

if.end:                                           ; preds = %if.then.59, %land.lhs.true, %cond.end.50
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %41 = load i32, i32* %i, align 4
  %inc = add nsw i32 %41, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.91

if.else:                                          ; preds = %entry
  %42 = load %struct.rtx_def*, %struct.rtx_def** %seq.addr, align 8
  %43 = bitcast %struct.rtx_def* %42 to i32*
  %bf.load68 = load i32, i32* %43, align 8
  %bf.clear69 = and i32 %bf.load68, 65535
  %cmp70 = icmp eq i32 %bf.clear69, 47
  br i1 %cmp70, label %land.lhs.true.72, label %if.end.90

land.lhs.true.72:                                 ; preds = %if.else
  %44 = load %struct.rtx_def*, %struct.rtx_def** %seq.addr, align 8
  %fld73 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %44, i32 0, i32 1
  %arrayidx74 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld73, i32 0, i64 0
  %rtx75 = bitcast %union.rtunion_def* %arrayidx74 to %struct.rtx_def**
  %45 = load %struct.rtx_def*, %struct.rtx_def** %rtx75, align 8
  %46 = bitcast %struct.rtx_def* %45 to i32*
  %bf.load76 = load i32, i32* %46, align 8
  %bf.clear77 = and i32 %bf.load76, 65535
  %cmp78 = icmp eq i32 %bf.clear77, 61
  br i1 %cmp78, label %if.then.80, label %if.end.90

if.then.80:                                       ; preds = %land.lhs.true.72
  %47 = load %struct.rtx_def*, %struct.rtx_def** %seq.addr, align 8
  %fld81 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %47, i32 0, i32 1
  %arrayidx82 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld81, i32 0, i64 0
  %rtx83 = bitcast %union.rtunion_def* %arrayidx82 to %struct.rtx_def**
  %48 = load %struct.rtx_def*, %struct.rtx_def** %rtx83, align 8
  %fld84 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %48, i32 0, i32 1
  %arrayidx85 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld84, i32 0, i64 0
  %rtuint86 = bitcast %union.rtunion_def* %arrayidx85 to i32*
  %49 = load i32, i32* %rtuint86, align 4
  %50 = load %struct.rtx_def*, %struct.rtx_def** %seq.addr, align 8
  %fld87 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %50, i32 0, i32 1
  %arrayidx88 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld87, i32 0, i64 1
  %rtx89 = bitcast %union.rtunion_def* %arrayidx88 to %struct.rtx_def**
  %51 = load %struct.rtx_def*, %struct.rtx_def** %rtx89, align 8
  call void @record_base_value(i32 %49, %struct.rtx_def* %51, i32 0)
  br label %if.end.90

if.end.90:                                        ; preds = %if.then.80, %land.lhs.true.72, %if.else
  br label %if.end.91

if.end.91:                                        ; preds = %if.end.90, %for.end
  ret void
}

; Function Attrs: nounwind uwtable
define void @loop_iv_add_mult_sink(%struct.loop* %loop, %struct.rtx_def* %b, %struct.rtx_def* %m, %struct.rtx_def* %a, %struct.rtx_def* %reg) #0 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %b.addr = alloca %struct.rtx_def*, align 8
  %m.addr = alloca %struct.rtx_def*, align 8
  %a.addr = alloca %struct.rtx_def*, align 8
  %reg.addr = alloca %struct.rtx_def*, align 8
  %seq = alloca %struct.rtx_def*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  store %struct.rtx_def* %b, %struct.rtx_def** %b.addr, align 8
  store %struct.rtx_def* %m, %struct.rtx_def** %m.addr, align 8
  store %struct.rtx_def* %a, %struct.rtx_def** %a.addr, align 8
  store %struct.rtx_def* %reg, %struct.rtx_def** %reg.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %b.addr, align 8
  %call = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %0)
  %1 = load %struct.rtx_def*, %struct.rtx_def** %m.addr, align 8
  %call1 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %1)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %a.addr, align 8
  %call2 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %2)
  %3 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %call3 = call %struct.rtx_def* @gen_add_mult(%struct.rtx_def* %call, %struct.rtx_def* %call1, %struct.rtx_def* %call2, %struct.rtx_def* %3)
  store %struct.rtx_def* %call3, %struct.rtx_def** %seq, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %a.addr, align 8
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %sink = getelementptr inbounds %struct.loop, %struct.loop* %5, i32 0, i32 30
  %6 = load %struct.rtx_def*, %struct.rtx_def** %sink, align 8
  call void @update_reg_last_use(%struct.rtx_def* %4, %struct.rtx_def* %6)
  %7 = load %struct.rtx_def*, %struct.rtx_def** %b.addr, align 8
  %8 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %sink4 = getelementptr inbounds %struct.loop, %struct.loop* %8, i32 0, i32 30
  %9 = load %struct.rtx_def*, %struct.rtx_def** %sink4, align 8
  call void @update_reg_last_use(%struct.rtx_def* %7, %struct.rtx_def* %9)
  %10 = load %struct.rtx_def*, %struct.rtx_def** %m.addr, align 8
  %11 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %sink5 = getelementptr inbounds %struct.loop, %struct.loop* %11, i32 0, i32 30
  %12 = load %struct.rtx_def*, %struct.rtx_def** %sink5, align 8
  call void @update_reg_last_use(%struct.rtx_def* %10, %struct.rtx_def* %12)
  %13 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %14 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8
  %call6 = call %struct.rtx_def* @loop_insn_sink(%struct.loop* %13, %struct.rtx_def* %14)
  %15 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %16 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8
  call void @loop_regs_update(%struct.loop* %15, %struct.rtx_def* %16)
  ret void
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @loop_insn_sink(%struct.loop* %loop, %struct.rtx_def* %pattern) #0 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %pattern.addr = alloca %struct.rtx_def*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  store %struct.rtx_def* %pattern, %struct.rtx_def** %pattern.addr, align 8
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %1 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %sink = getelementptr inbounds %struct.loop, %struct.loop* %1, i32 0, i32 30
  %2 = load %struct.rtx_def*, %struct.rtx_def** %sink, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8
  %call = call %struct.rtx_def* @loop_insn_emit_before(%struct.loop* %0, %struct.basic_block_def* null, %struct.rtx_def* %2, %struct.rtx_def* %3)
  ret %struct.rtx_def* %call
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @loop_insn_hoist(%struct.loop* %loop, %struct.rtx_def* %pattern) #0 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %pattern.addr = alloca %struct.rtx_def*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  store %struct.rtx_def* %pattern, %struct.rtx_def** %pattern.addr, align 8
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %1 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %start = getelementptr inbounds %struct.loop, %struct.loop* %1, i32 0, i32 26
  %2 = load %struct.rtx_def*, %struct.rtx_def** %start, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8
  %call = call %struct.rtx_def* @loop_insn_emit_before(%struct.loop* %0, %struct.basic_block_def* null, %struct.rtx_def* %2, %struct.rtx_def* %3)
  ret %struct.rtx_def* %call
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @canonicalize_condition(%struct.rtx_def* %insn, %struct.rtx_def* %cond, i32 %reverse, %struct.rtx_def** %earliest, %struct.rtx_def* %want_reg) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  %cond.addr = alloca %struct.rtx_def*, align 8
  %reverse.addr = alloca i32, align 4
  %earliest.addr = alloca %struct.rtx_def**, align 8
  %want_reg.addr = alloca %struct.rtx_def*, align 8
  %code = alloca i32, align 4
  %prev = alloca %struct.rtx_def*, align 8
  %set = alloca %struct.rtx_def*, align 8
  %tem = alloca %struct.rtx_def*, align 8
  %op0 = alloca %struct.rtx_def*, align 8
  %op1 = alloca %struct.rtx_def*, align 8
  %reverse_code = alloca i32, align 4
  %mode = alloca i32, align 4
  %x = alloca %struct.rtx_def*, align 8
  %inner_mode = alloca i32, align 4
  %const_val = alloca i64, align 8
  %uconst_val = alloca i64, align 8
  %max_val = alloca i64, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  store %struct.rtx_def* %cond, %struct.rtx_def** %cond.addr, align 8
  store i32 %reverse, i32* %reverse.addr, align 4
  store %struct.rtx_def** %earliest, %struct.rtx_def*** %earliest.addr, align 8
  store %struct.rtx_def* %want_reg, %struct.rtx_def** %want_reg.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  store %struct.rtx_def* %0, %struct.rtx_def** %prev, align 8
  store i32 0, i32* %reverse_code, align 4
  %1 = load %struct.rtx_def*, %struct.rtx_def** %cond.addr, align 8
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load = load i32, i32* %2, align 8
  %bf.clear = and i32 %bf.load, 65535
  store i32 %bf.clear, i32* %code, align 4
  %3 = load %struct.rtx_def*, %struct.rtx_def** %cond.addr, align 8
  %4 = bitcast %struct.rtx_def* %3 to i32*
  %bf.load1 = load i32, i32* %4, align 8
  %bf.lshr = lshr i32 %bf.load1, 16
  %bf.clear2 = and i32 %bf.lshr, 255
  store i32 %bf.clear2, i32* %mode, align 4
  %5 = load %struct.rtx_def*, %struct.rtx_def** %cond.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %6, %struct.rtx_def** %op0, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %cond.addr, align 8
  %fld3 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1
  %arrayidx4 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3, i32 0, i64 1
  %rtx5 = bitcast %union.rtunion_def* %arrayidx4 to %struct.rtx_def**
  %8 = load %struct.rtx_def*, %struct.rtx_def** %rtx5, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %op1, align 8
  %9 = load i32, i32* %reverse.addr, align 4
  %tobool = icmp ne i32 %9, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %10 = load %struct.rtx_def*, %struct.rtx_def** %cond.addr, align 8
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call = call i32 @reversed_comparison_code(%struct.rtx_def* %10, %struct.rtx_def* %11)
  store i32 %call, i32* %code, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %12 = load i32, i32* %code, align 4
  %cmp = icmp eq i32 %12, 0
  br i1 %cmp, label %if.then.6, label %if.end.7

if.then.6:                                        ; preds = %if.end
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end.7:                                         ; preds = %if.end
  %13 = load %struct.rtx_def**, %struct.rtx_def*** %earliest.addr, align 8
  %tobool8 = icmp ne %struct.rtx_def** %13, null
  br i1 %tobool8, label %if.then.9, label %if.end.10

if.then.9:                                        ; preds = %if.end.7
  %14 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %15 = load %struct.rtx_def**, %struct.rtx_def*** %earliest.addr, align 8
  store %struct.rtx_def* %14, %struct.rtx_def** %15, align 8
  br label %if.end.10

if.end.10:                                        ; preds = %if.then.9, %if.end.7
  br label %while.cond

while.cond:                                       ; preds = %if.end.231, %if.then.27, %if.end.10
  %16 = load i32, i32* %code, align 4
  %idxprom = sext i32 %16 to i64
  %arrayidx11 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom
  %17 = load i8, i8* %arrayidx11, align 1
  %conv = sext i8 %17 to i32
  %cmp12 = icmp eq i32 %conv, 60
  br i1 %cmp12, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %while.cond
  %18 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %19 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %20 = bitcast %struct.rtx_def* %19 to i32*
  %bf.load14 = load i32, i32* %20, align 8
  %bf.lshr15 = lshr i32 %bf.load14, 16
  %bf.clear16 = and i32 %bf.lshr15, 255
  %idxprom17 = sext i32 %bf.clear16 to i64
  %arrayidx18 = getelementptr inbounds [59 x %struct.rtx_def*], [59 x %struct.rtx_def*]* getelementptr inbounds ([3 x [59 x %struct.rtx_def*]], [3 x [59 x %struct.rtx_def*]]* @const_tiny_rtx, i32 0, i64 0), i32 0, i64 %idxprom17
  %21 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx18, align 8
  %cmp19 = icmp eq %struct.rtx_def* %18, %21
  br i1 %cmp19, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true
  %22 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %23 = load %struct.rtx_def*, %struct.rtx_def** %want_reg.addr, align 8
  %cmp21 = icmp ne %struct.rtx_def* %22, %23
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %while.cond
  %24 = phi i1 [ false, %land.lhs.true ], [ false, %while.cond ], [ %cmp21, %land.rhs ]
  br i1 %24, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  store %struct.rtx_def* null, %struct.rtx_def** %x, align 8
  %25 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %26 = bitcast %struct.rtx_def* %25 to i32*
  %bf.load23 = load i32, i32* %26, align 8
  %bf.clear24 = and i32 %bf.load23, 65535
  %cmp25 = icmp eq i32 %bf.clear24, 74
  br i1 %cmp25, label %if.then.27, label %if.else

if.then.27:                                       ; preds = %while.body
  %27 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %fld28 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1
  %arrayidx29 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld28, i32 0, i64 1
  %rtx30 = bitcast %union.rtunion_def* %arrayidx29 to %struct.rtx_def**
  %28 = load %struct.rtx_def*, %struct.rtx_def** %rtx30, align 8
  store %struct.rtx_def* %28, %struct.rtx_def** %op1, align 8
  %29 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %fld31 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %29, i32 0, i32 1
  %arrayidx32 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld31, i32 0, i64 0
  %rtx33 = bitcast %union.rtunion_def* %arrayidx32 to %struct.rtx_def**
  %30 = load %struct.rtx_def*, %struct.rtx_def** %rtx33, align 8
  store %struct.rtx_def* %30, %struct.rtx_def** %op0, align 8
  br label %while.cond

if.else:                                          ; preds = %while.body
  %31 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %32 = bitcast %struct.rtx_def* %31 to i32*
  %bf.load34 = load i32, i32* %32, align 8
  %bf.clear35 = and i32 %bf.load34, 65535
  %cmp36 = icmp ne i32 %bf.clear35, 61
  br i1 %cmp36, label %if.then.38, label %if.end.39

if.then.38:                                       ; preds = %if.else
  br label %while.end

if.end.39:                                        ; preds = %if.else
  br label %if.end.40

if.end.40:                                        ; preds = %if.end.39
  %33 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8
  %call41 = call %struct.rtx_def* @prev_nonnote_insn(%struct.rtx_def* %33)
  store %struct.rtx_def* %call41, %struct.rtx_def** %prev, align 8
  %cmp42 = icmp eq %struct.rtx_def* %call41, null
  br i1 %cmp42, label %if.then.48, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.40
  %34 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8
  %35 = bitcast %struct.rtx_def* %34 to i32*
  %bf.load44 = load i32, i32* %35, align 8
  %bf.clear45 = and i32 %bf.load44, 65535
  %cmp46 = icmp ne i32 %bf.clear45, 32
  br i1 %cmp46, label %if.then.48, label %if.end.49

if.then.48:                                       ; preds = %lor.lhs.false, %if.end.40
  br label %while.end

if.end.49:                                        ; preds = %lor.lhs.false
  %36 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %37 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8
  %call50 = call %struct.rtx_def* @set_of(%struct.rtx_def* %36, %struct.rtx_def* %37)
  store %struct.rtx_def* %call50, %struct.rtx_def** %set, align 8
  %38 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %tobool51 = icmp ne %struct.rtx_def* %38, null
  br i1 %tobool51, label %land.lhs.true.52, label %if.end.64

land.lhs.true.52:                                 ; preds = %if.end.49
  %39 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %40 = bitcast %struct.rtx_def* %39 to i32*
  %bf.load53 = load i32, i32* %40, align 8
  %bf.clear54 = and i32 %bf.load53, 65535
  %cmp55 = icmp ne i32 %bf.clear54, 47
  br i1 %cmp55, label %if.then.63, label %lor.lhs.false.57

lor.lhs.false.57:                                 ; preds = %land.lhs.true.52
  %41 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld58 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %41, i32 0, i32 1
  %arrayidx59 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld58, i32 0, i64 0
  %rtx60 = bitcast %union.rtunion_def* %arrayidx59 to %struct.rtx_def**
  %42 = load %struct.rtx_def*, %struct.rtx_def** %rtx60, align 8
  %43 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call61 = call i32 @rtx_equal_p(%struct.rtx_def* %42, %struct.rtx_def* %43)
  %tobool62 = icmp ne i32 %call61, 0
  br i1 %tobool62, label %if.end.64, label %if.then.63

if.then.63:                                       ; preds = %lor.lhs.false.57, %land.lhs.true.52
  br label %while.end

if.end.64:                                        ; preds = %lor.lhs.false.57, %if.end.49
  %44 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %tobool65 = icmp ne %struct.rtx_def* %44, null
  br i1 %tobool65, label %if.then.66, label %if.else.195

if.then.66:                                       ; preds = %if.end.64
  %45 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld67 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %45, i32 0, i32 1
  %arrayidx68 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld67, i32 0, i64 0
  %rtx69 = bitcast %union.rtunion_def* %arrayidx68 to %struct.rtx_def**
  %46 = load %struct.rtx_def*, %struct.rtx_def** %rtx69, align 8
  %47 = bitcast %struct.rtx_def* %46 to i32*
  %bf.load70 = load i32, i32* %47, align 8
  %bf.lshr71 = lshr i32 %bf.load70, 16
  %bf.clear72 = and i32 %bf.lshr71, 255
  store i32 %bf.clear72, i32* %inner_mode, align 4
  %48 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld73 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %48, i32 0, i32 1
  %arrayidx74 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld73, i32 0, i64 1
  %rtx75 = bitcast %union.rtunion_def* %arrayidx74 to %struct.rtx_def**
  %49 = load %struct.rtx_def*, %struct.rtx_def** %rtx75, align 8
  %50 = bitcast %struct.rtx_def* %49 to i32*
  %bf.load76 = load i32, i32* %50, align 8
  %bf.clear77 = and i32 %bf.load76, 65535
  %cmp78 = icmp eq i32 %bf.clear77, 74
  br i1 %cmp78, label %land.lhs.true.113, label %lor.lhs.false.80

lor.lhs.false.80:                                 ; preds = %if.then.66
  %51 = load i32, i32* %code, align 4
  %cmp81 = icmp eq i32 %51, 102
  br i1 %cmp81, label %land.lhs.true.102, label %lor.lhs.false.83

lor.lhs.false.83:                                 ; preds = %lor.lhs.false.80
  %52 = load i32, i32* %code, align 4
  %cmp84 = icmp eq i32 %52, 107
  br i1 %cmp84, label %land.lhs.true.86, label %if.else.134

land.lhs.true.86:                                 ; preds = %lor.lhs.false.83
  %53 = load i32, i32* %inner_mode, align 4
  %idxprom87 = sext i32 %53 to i64
  %arrayidx88 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom87
  %54 = load i32, i32* %arrayidx88, align 4
  %cmp89 = icmp eq i32 %54, 1
  br i1 %cmp89, label %land.lhs.true.91, label %if.else.134

land.lhs.true.91:                                 ; preds = %land.lhs.true.86
  %55 = load i32, i32* %inner_mode, align 4
  %idxprom92 = sext i32 %55 to i64
  %arrayidx93 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom92
  %56 = load i16, i16* %arrayidx93, align 2
  %conv94 = zext i16 %56 to i32
  %cmp95 = icmp sle i32 %conv94, 64
  br i1 %cmp95, label %land.lhs.true.97, label %if.else.134

land.lhs.true.97:                                 ; preds = %land.lhs.true.91
  %57 = load i32, i32* %inner_mode, align 4
  %idxprom98 = sext i32 %57 to i64
  %arrayidx99 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom98
  %58 = load i16, i16* %arrayidx99, align 2
  %conv100 = zext i16 %58 to i32
  %sub = sub nsw i32 %conv100, 1
  %sh_prom = zext i32 %sub to i64
  %shl = shl i64 1, %sh_prom
  %and = and i64 1, %shl
  %tobool101 = icmp ne i64 %and, 0
  br i1 %tobool101, label %land.lhs.true.102, label %if.else.134

land.lhs.true.102:                                ; preds = %land.lhs.true.97, %lor.lhs.false.80
  %59 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld103 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %59, i32 0, i32 1
  %arrayidx104 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld103, i32 0, i64 1
  %rtx105 = bitcast %union.rtunion_def* %arrayidx104 to %struct.rtx_def**
  %60 = load %struct.rtx_def*, %struct.rtx_def** %rtx105, align 8
  %61 = bitcast %struct.rtx_def* %60 to i32*
  %bf.load106 = load i32, i32* %61, align 8
  %bf.clear107 = and i32 %bf.load106, 65535
  %idxprom108 = sext i32 %bf.clear107 to i64
  %arrayidx109 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom108
  %62 = load i8, i8* %arrayidx109, align 1
  %conv110 = sext i8 %62 to i32
  %cmp111 = icmp eq i32 %conv110, 60
  br i1 %cmp111, label %land.lhs.true.113, label %if.else.134

land.lhs.true.113:                                ; preds = %land.lhs.true.102, %if.then.66
  %63 = load i32, i32* %mode, align 4
  %idxprom114 = sext i32 %63 to i64
  %arrayidx115 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom114
  %64 = load i32, i32* %arrayidx115, align 4
  %cmp116 = icmp eq i32 %64, 4
  %conv117 = zext i1 %cmp116 to i32
  %65 = load i32, i32* %inner_mode, align 4
  %idxprom118 = sext i32 %65 to i64
  %arrayidx119 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom118
  %66 = load i32, i32* %arrayidx119, align 4
  %cmp120 = icmp eq i32 %66, 4
  %conv121 = zext i1 %cmp120 to i32
  %cmp122 = icmp eq i32 %conv117, %conv121
  br i1 %cmp122, label %if.then.130, label %lor.lhs.false.124

lor.lhs.false.124:                                ; preds = %land.lhs.true.113
  %67 = load i32, i32* %mode, align 4
  %cmp125 = icmp eq i32 %67, 0
  br i1 %cmp125, label %if.then.130, label %lor.lhs.false.127

lor.lhs.false.127:                                ; preds = %lor.lhs.false.124
  %68 = load i32, i32* %inner_mode, align 4
  %cmp128 = icmp eq i32 %68, 0
  br i1 %cmp128, label %if.then.130, label %if.else.134

if.then.130:                                      ; preds = %lor.lhs.false.127, %lor.lhs.false.124, %land.lhs.true.113
  %69 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld131 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %69, i32 0, i32 1
  %arrayidx132 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld131, i32 0, i64 1
  %rtx133 = bitcast %union.rtunion_def* %arrayidx132 to %struct.rtx_def**
  %70 = load %struct.rtx_def*, %struct.rtx_def** %rtx133, align 8
  store %struct.rtx_def* %70, %struct.rtx_def** %x, align 8
  br label %if.end.194

if.else.134:                                      ; preds = %lor.lhs.false.127, %land.lhs.true.102, %land.lhs.true.97, %land.lhs.true.91, %land.lhs.true.86, %lor.lhs.false.83
  %71 = load i32, i32* %code, align 4
  %cmp135 = icmp eq i32 %71, 103
  br i1 %cmp135, label %land.lhs.true.160, label %lor.lhs.false.137

lor.lhs.false.137:                                ; preds = %if.else.134
  %72 = load i32, i32* %code, align 4
  %cmp138 = icmp eq i32 %72, 104
  br i1 %cmp138, label %land.lhs.true.140, label %if.else.192

land.lhs.true.140:                                ; preds = %lor.lhs.false.137
  %73 = load i32, i32* %inner_mode, align 4
  %idxprom141 = sext i32 %73 to i64
  %arrayidx142 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom141
  %74 = load i16, i16* %arrayidx142, align 2
  %conv143 = zext i16 %74 to i32
  %cmp144 = icmp sle i32 %conv143, 64
  br i1 %cmp144, label %land.lhs.true.146, label %if.else.192

land.lhs.true.146:                                ; preds = %land.lhs.true.140
  %75 = load i32, i32* %inner_mode, align 4
  %idxprom147 = sext i32 %75 to i64
  %arrayidx148 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom147
  %76 = load i32, i32* %arrayidx148, align 4
  %cmp149 = icmp eq i32 %76, 1
  br i1 %cmp149, label %land.lhs.true.151, label %if.else.192

land.lhs.true.151:                                ; preds = %land.lhs.true.146
  %77 = load i32, i32* %inner_mode, align 4
  %idxprom152 = sext i32 %77 to i64
  %arrayidx153 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom152
  %78 = load i16, i16* %arrayidx153, align 2
  %conv154 = zext i16 %78 to i32
  %sub155 = sub nsw i32 %conv154, 1
  %sh_prom156 = zext i32 %sub155 to i64
  %shl157 = shl i64 1, %sh_prom156
  %and158 = and i64 1, %shl157
  %tobool159 = icmp ne i64 %and158, 0
  br i1 %tobool159, label %land.lhs.true.160, label %if.else.192

land.lhs.true.160:                                ; preds = %land.lhs.true.151, %if.else.134
  %79 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld161 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %79, i32 0, i32 1
  %arrayidx162 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld161, i32 0, i64 1
  %rtx163 = bitcast %union.rtunion_def* %arrayidx162 to %struct.rtx_def**
  %80 = load %struct.rtx_def*, %struct.rtx_def** %rtx163, align 8
  %81 = bitcast %struct.rtx_def* %80 to i32*
  %bf.load164 = load i32, i32* %81, align 8
  %bf.clear165 = and i32 %bf.load164, 65535
  %idxprom166 = sext i32 %bf.clear165 to i64
  %arrayidx167 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom166
  %82 = load i8, i8* %arrayidx167, align 1
  %conv168 = sext i8 %82 to i32
  %cmp169 = icmp eq i32 %conv168, 60
  br i1 %cmp169, label %land.lhs.true.171, label %if.else.192

land.lhs.true.171:                                ; preds = %land.lhs.true.160
  %83 = load i32, i32* %mode, align 4
  %idxprom172 = sext i32 %83 to i64
  %arrayidx173 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom172
  %84 = load i32, i32* %arrayidx173, align 4
  %cmp174 = icmp eq i32 %84, 4
  %conv175 = zext i1 %cmp174 to i32
  %85 = load i32, i32* %inner_mode, align 4
  %idxprom176 = sext i32 %85 to i64
  %arrayidx177 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom176
  %86 = load i32, i32* %arrayidx177, align 4
  %cmp178 = icmp eq i32 %86, 4
  %conv179 = zext i1 %cmp178 to i32
  %cmp180 = icmp eq i32 %conv175, %conv179
  br i1 %cmp180, label %if.then.188, label %lor.lhs.false.182

lor.lhs.false.182:                                ; preds = %land.lhs.true.171
  %87 = load i32, i32* %mode, align 4
  %cmp183 = icmp eq i32 %87, 0
  br i1 %cmp183, label %if.then.188, label %lor.lhs.false.185

lor.lhs.false.185:                                ; preds = %lor.lhs.false.182
  %88 = load i32, i32* %inner_mode, align 4
  %cmp186 = icmp eq i32 %88, 0
  br i1 %cmp186, label %if.then.188, label %if.else.192

if.then.188:                                      ; preds = %lor.lhs.false.185, %lor.lhs.false.182, %land.lhs.true.171
  store i32 1, i32* %reverse_code, align 4
  %89 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld189 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %89, i32 0, i32 1
  %arrayidx190 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld189, i32 0, i64 1
  %rtx191 = bitcast %union.rtunion_def* %arrayidx190 to %struct.rtx_def**
  %90 = load %struct.rtx_def*, %struct.rtx_def** %rtx191, align 8
  store %struct.rtx_def* %90, %struct.rtx_def** %x, align 8
  br label %if.end.193

if.else.192:                                      ; preds = %lor.lhs.false.185, %land.lhs.true.160, %land.lhs.true.151, %land.lhs.true.146, %land.lhs.true.140, %lor.lhs.false.137
  br label %while.end

if.end.193:                                       ; preds = %if.then.188
  br label %if.end.194

if.end.194:                                       ; preds = %if.end.193, %if.then.130
  br label %if.end.200

if.else.195:                                      ; preds = %if.end.64
  %91 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %92 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8
  %call196 = call i32 @reg_set_p(%struct.rtx_def* %91, %struct.rtx_def* %92)
  %tobool197 = icmp ne i32 %call196, 0
  br i1 %tobool197, label %if.then.198, label %if.end.199

if.then.198:                                      ; preds = %if.else.195
  br label %while.end

if.end.199:                                       ; preds = %if.else.195
  br label %if.end.200

if.end.200:                                       ; preds = %if.end.199, %if.end.194
  %93 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %tobool201 = icmp ne %struct.rtx_def* %93, null
  br i1 %tobool201, label %if.then.202, label %if.end.231

if.then.202:                                      ; preds = %if.end.200
  %94 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %95 = bitcast %struct.rtx_def* %94 to i32*
  %bf.load203 = load i32, i32* %95, align 8
  %bf.clear204 = and i32 %bf.load203, 65535
  %idxprom205 = sext i32 %bf.clear204 to i64
  %arrayidx206 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom205
  %96 = load i8, i8* %arrayidx206, align 1
  %conv207 = sext i8 %96 to i32
  %cmp208 = icmp eq i32 %conv207, 60
  br i1 %cmp208, label %if.then.210, label %if.end.213

if.then.210:                                      ; preds = %if.then.202
  %97 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %98 = bitcast %struct.rtx_def* %97 to i32*
  %bf.load211 = load i32, i32* %98, align 8
  %bf.clear212 = and i32 %bf.load211, 65535
  store i32 %bf.clear212, i32* %code, align 4
  br label %if.end.213

if.end.213:                                       ; preds = %if.then.210, %if.then.202
  %99 = load i32, i32* %reverse_code, align 4
  %tobool214 = icmp ne i32 %99, 0
  br i1 %tobool214, label %if.then.215, label %if.end.221

if.then.215:                                      ; preds = %if.end.213
  %100 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %101 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8
  %call216 = call i32 @reversed_comparison_code(%struct.rtx_def* %100, %struct.rtx_def* %101)
  store i32 %call216, i32* %code, align 4
  %102 = load i32, i32* %code, align 4
  %cmp217 = icmp eq i32 %102, 0
  br i1 %cmp217, label %if.then.219, label %if.end.220

if.then.219:                                      ; preds = %if.then.215
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end.220:                                       ; preds = %if.then.215
  store i32 0, i32* %reverse_code, align 4
  br label %if.end.221

if.end.221:                                       ; preds = %if.end.220, %if.end.213
  %103 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld222 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %103, i32 0, i32 1
  %arrayidx223 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld222, i32 0, i64 0
  %rtx224 = bitcast %union.rtunion_def* %arrayidx223 to %struct.rtx_def**
  %104 = load %struct.rtx_def*, %struct.rtx_def** %rtx224, align 8
  store %struct.rtx_def* %104, %struct.rtx_def** %op0, align 8
  %105 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld225 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %105, i32 0, i32 1
  %arrayidx226 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld225, i32 0, i64 1
  %rtx227 = bitcast %union.rtunion_def* %arrayidx226 to %struct.rtx_def**
  %106 = load %struct.rtx_def*, %struct.rtx_def** %rtx227, align 8
  store %struct.rtx_def* %106, %struct.rtx_def** %op1, align 8
  %107 = load %struct.rtx_def**, %struct.rtx_def*** %earliest.addr, align 8
  %tobool228 = icmp ne %struct.rtx_def** %107, null
  br i1 %tobool228, label %if.then.229, label %if.end.230

if.then.229:                                      ; preds = %if.end.221
  %108 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8
  %109 = load %struct.rtx_def**, %struct.rtx_def*** %earliest.addr, align 8
  store %struct.rtx_def* %108, %struct.rtx_def** %109, align 8
  br label %if.end.230

if.end.230:                                       ; preds = %if.then.229, %if.end.221
  br label %if.end.231

if.end.231:                                       ; preds = %if.end.230, %if.end.200
  br label %while.cond

while.end:                                        ; preds = %if.then.198, %if.else.192, %if.then.63, %if.then.48, %if.then.38, %land.end
  %110 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %111 = bitcast %struct.rtx_def* %110 to i32*
  %bf.load232 = load i32, i32* %111, align 8
  %bf.clear233 = and i32 %bf.load232, 65535
  %cmp234 = icmp eq i32 %bf.clear233, 67
  br i1 %cmp234, label %if.then.271, label %lor.lhs.false.236

lor.lhs.false.236:                                ; preds = %while.end
  %112 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %113 = bitcast %struct.rtx_def* %112 to i32*
  %bf.load237 = load i32, i32* %113, align 8
  %bf.clear238 = and i32 %bf.load237, 65535
  %cmp239 = icmp eq i32 %bf.clear238, 68
  br i1 %cmp239, label %if.then.271, label %lor.lhs.false.241

lor.lhs.false.241:                                ; preds = %lor.lhs.false.236
  %114 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %115 = bitcast %struct.rtx_def* %114 to i32*
  %bf.load242 = load i32, i32* %115, align 8
  %bf.clear243 = and i32 %bf.load242, 65535
  %cmp244 = icmp eq i32 %bf.clear243, 54
  br i1 %cmp244, label %if.then.271, label %lor.lhs.false.246

lor.lhs.false.246:                                ; preds = %lor.lhs.false.241
  %116 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %117 = bitcast %struct.rtx_def* %116 to i32*
  %bf.load247 = load i32, i32* %117, align 8
  %bf.clear248 = and i32 %bf.load247, 65535
  %cmp249 = icmp eq i32 %bf.clear248, 55
  br i1 %cmp249, label %if.then.271, label %lor.lhs.false.251

lor.lhs.false.251:                                ; preds = %lor.lhs.false.246
  %118 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %119 = bitcast %struct.rtx_def* %118 to i32*
  %bf.load252 = load i32, i32* %119, align 8
  %bf.clear253 = and i32 %bf.load252, 65535
  %cmp254 = icmp eq i32 %bf.clear253, 58
  br i1 %cmp254, label %if.then.271, label %lor.lhs.false.256

lor.lhs.false.256:                                ; preds = %lor.lhs.false.251
  %120 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %121 = bitcast %struct.rtx_def* %120 to i32*
  %bf.load257 = load i32, i32* %121, align 8
  %bf.clear258 = and i32 %bf.load257, 65535
  %cmp259 = icmp eq i32 %bf.clear258, 134
  br i1 %cmp259, label %if.then.271, label %lor.lhs.false.261

lor.lhs.false.261:                                ; preds = %lor.lhs.false.256
  %122 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %123 = bitcast %struct.rtx_def* %122 to i32*
  %bf.load262 = load i32, i32* %123, align 8
  %bf.clear263 = and i32 %bf.load262, 65535
  %cmp264 = icmp eq i32 %bf.clear263, 56
  br i1 %cmp264, label %if.then.271, label %lor.lhs.false.266

lor.lhs.false.266:                                ; preds = %lor.lhs.false.261
  %124 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %125 = bitcast %struct.rtx_def* %124 to i32*
  %bf.load267 = load i32, i32* %125, align 8
  %bf.clear268 = and i32 %bf.load267, 65535
  %cmp269 = icmp eq i32 %bf.clear268, 140
  br i1 %cmp269, label %if.then.271, label %if.end.273

if.then.271:                                      ; preds = %lor.lhs.false.266, %lor.lhs.false.261, %lor.lhs.false.256, %lor.lhs.false.251, %lor.lhs.false.246, %lor.lhs.false.241, %lor.lhs.false.236, %while.end
  %126 = load i32, i32* %code, align 4
  %call272 = call i32 @swap_condition(i32 %126)
  store i32 %call272, i32* %code, align 4
  %127 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  store %struct.rtx_def* %127, %struct.rtx_def** %tem, align 8
  %128 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  store %struct.rtx_def* %128, %struct.rtx_def** %op0, align 8
  %129 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  store %struct.rtx_def* %129, %struct.rtx_def** %op1, align 8
  br label %if.end.273

if.end.273:                                       ; preds = %if.then.271, %lor.lhs.false.266
  %130 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %131 = bitcast %struct.rtx_def* %130 to i32*
  %bf.load274 = load i32, i32* %131, align 8
  %bf.lshr275 = lshr i32 %bf.load274, 16
  %bf.clear276 = and i32 %bf.lshr275, 255
  %idxprom277 = sext i32 %bf.clear276 to i64
  %arrayidx278 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom277
  %132 = load i32, i32* %arrayidx278, align 4
  %cmp279 = icmp eq i32 %132, 4
  br i1 %cmp279, label %if.then.281, label %if.end.282

if.then.281:                                      ; preds = %if.end.273
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end.282:                                       ; preds = %if.end.273
  %133 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %134 = bitcast %struct.rtx_def* %133 to i32*
  %bf.load283 = load i32, i32* %134, align 8
  %bf.clear284 = and i32 %bf.load283, 65535
  %cmp285 = icmp eq i32 %bf.clear284, 54
  br i1 %cmp285, label %land.lhs.true.287, label %if.end.346

land.lhs.true.287:                                ; preds = %if.end.282
  %135 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %136 = bitcast %struct.rtx_def* %135 to i32*
  %bf.load288 = load i32, i32* %136, align 8
  %bf.lshr289 = lshr i32 %bf.load288, 16
  %bf.clear290 = and i32 %bf.lshr289, 255
  %cmp291 = icmp ne i32 %bf.clear290, 0
  br i1 %cmp291, label %land.lhs.true.293, label %if.end.346

land.lhs.true.293:                                ; preds = %land.lhs.true.287
  %137 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %138 = bitcast %struct.rtx_def* %137 to i32*
  %bf.load294 = load i32, i32* %138, align 8
  %bf.lshr295 = lshr i32 %bf.load294, 16
  %bf.clear296 = and i32 %bf.lshr295, 255
  %idxprom297 = sext i32 %bf.clear296 to i64
  %arrayidx298 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom297
  %139 = load i16, i16* %arrayidx298, align 2
  %conv299 = zext i16 %139 to i32
  %cmp300 = icmp sle i32 %conv299, 64
  br i1 %cmp300, label %if.then.302, label %if.end.346

if.then.302:                                      ; preds = %land.lhs.true.293
  %140 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %fld303 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %140, i32 0, i32 1
  %arrayidx304 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld303, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx304 to i64*
  %141 = load i64, i64* %rtwint, align 8
  store i64 %141, i64* %const_val, align 8
  %142 = load i64, i64* %const_val, align 8
  store i64 %142, i64* %uconst_val, align 8
  %143 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %144 = bitcast %struct.rtx_def* %143 to i32*
  %bf.load305 = load i32, i32* %144, align 8
  %bf.lshr306 = lshr i32 %bf.load305, 16
  %bf.clear307 = and i32 %bf.lshr306, 255
  %idxprom308 = sext i32 %bf.clear307 to i64
  %arrayidx309 = getelementptr inbounds [59 x i64], [59 x i64]* @mode_mask_array, i32 0, i64 %idxprom308
  %145 = load i64, i64* %arrayidx309, align 8
  store i64 %145, i64* %max_val, align 8
  %146 = load i32, i32* %code, align 4
  switch i32 %146, label %sw.default [
    i32 106, label %sw.bb
    i32 104, label %sw.bb.315
    i32 110, label %sw.bb.332
    i32 108, label %sw.bb.339
  ]

sw.bb:                                            ; preds = %if.then.302
  %147 = load i64, i64* %const_val, align 8
  %148 = load i64, i64* %max_val, align 8
  %shr = lshr i64 %148, 1
  %cmp310 = icmp ne i64 %147, %shr
  br i1 %cmp310, label %if.then.312, label %if.end.314

if.then.312:                                      ; preds = %sw.bb
  store i32 107, i32* %code, align 4
  %149 = load i64, i64* %const_val, align 8
  %add = add nsw i64 %149, 1
  %call313 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %add)
  store %struct.rtx_def* %call313, %struct.rtx_def** %op1, align 8
  br label %if.end.314

if.end.314:                                       ; preds = %if.then.312, %sw.bb
  br label %sw.epilog

sw.bb.315:                                        ; preds = %if.then.302
  %150 = load i64, i64* %const_val, align 8
  %151 = load i64, i64* %max_val, align 8
  %and316 = and i64 %150, %151
  %152 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %153 = bitcast %struct.rtx_def* %152 to i32*
  %bf.load317 = load i32, i32* %153, align 8
  %bf.lshr318 = lshr i32 %bf.load317, 16
  %bf.clear319 = and i32 %bf.lshr318, 255
  %idxprom320 = sext i32 %bf.clear319 to i64
  %arrayidx321 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom320
  %154 = load i16, i16* %arrayidx321, align 2
  %conv322 = zext i16 %154 to i32
  %sub323 = sub nsw i32 %conv322, 1
  %sh_prom324 = zext i32 %sub323 to i64
  %shl325 = shl i64 1, %sh_prom324
  %cmp326 = icmp ne i64 %and316, %shl325
  br i1 %cmp326, label %if.then.328, label %if.end.331

if.then.328:                                      ; preds = %sw.bb.315
  store i32 105, i32* %code, align 4
  %155 = load i64, i64* %const_val, align 8
  %sub329 = sub nsw i64 %155, 1
  %call330 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %sub329)
  store %struct.rtx_def* %call330, %struct.rtx_def** %op1, align 8
  br label %if.end.331

if.end.331:                                       ; preds = %if.then.328, %sw.bb.315
  br label %sw.epilog

sw.bb.332:                                        ; preds = %if.then.302
  %156 = load i64, i64* %uconst_val, align 8
  %157 = load i64, i64* %max_val, align 8
  %cmp333 = icmp ult i64 %156, %157
  br i1 %cmp333, label %if.then.335, label %if.end.338

if.then.335:                                      ; preds = %sw.bb.332
  store i32 111, i32* %code, align 4
  %158 = load i64, i64* %uconst_val, align 8
  %add336 = add i64 %158, 1
  %call337 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %add336)
  store %struct.rtx_def* %call337, %struct.rtx_def** %op1, align 8
  br label %if.end.338

if.end.338:                                       ; preds = %if.then.335, %sw.bb.332
  br label %sw.epilog

sw.bb.339:                                        ; preds = %if.then.302
  %159 = load i64, i64* %uconst_val, align 8
  %cmp340 = icmp ne i64 %159, 0
  br i1 %cmp340, label %if.then.342, label %if.end.345

if.then.342:                                      ; preds = %sw.bb.339
  store i32 109, i32* %code, align 4
  %160 = load i64, i64* %uconst_val, align 8
  %sub343 = sub i64 %160, 1
  %call344 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %sub343)
  store %struct.rtx_def* %call344, %struct.rtx_def** %op1, align 8
  br label %if.end.345

if.end.345:                                       ; preds = %if.then.342, %sw.bb.339
  br label %sw.epilog

sw.default:                                       ; preds = %if.then.302
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %if.end.345, %if.end.338, %if.end.331, %if.end.314
  br label %if.end.346

if.end.346:                                       ; preds = %sw.epilog, %land.lhs.true.293, %land.lhs.true.287, %if.end.282
  %161 = load i32, i32* %code, align 4
  %162 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %163 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %call347 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 %161, i32 0, %struct.rtx_def* %162, %struct.rtx_def* %163)
  store %struct.rtx_def* %call347, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end.346, %if.then.281, %if.then.219, %if.then.6
  %164 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %164
}

declare i32 @reversed_comparison_code(%struct.rtx_def*, %struct.rtx_def*) #1

declare %struct.rtx_def* @set_of(%struct.rtx_def*, %struct.rtx_def*) #1

declare i32 @reg_set_p(%struct.rtx_def*, %struct.rtx_def*) #1

declare i32 @swap_condition(i32) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @get_condition(%struct.rtx_def* %jump, %struct.rtx_def** %earliest) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %jump.addr = alloca %struct.rtx_def*, align 8
  %earliest.addr = alloca %struct.rtx_def**, align 8
  %cond = alloca %struct.rtx_def*, align 8
  %reverse = alloca i32, align 4
  %set = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %jump, %struct.rtx_def** %jump.addr, align 8
  store %struct.rtx_def** %earliest, %struct.rtx_def*** %earliest.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %jump.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp ne i32 %bf.clear, 33
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %jump.addr, align 8
  %call = call i32 @any_condjump_p(%struct.rtx_def* %2)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %3 = load %struct.rtx_def*, %struct.rtx_def** %jump.addr, align 8
  %call1 = call %struct.rtx_def* @pc_set(%struct.rtx_def* %3)
  store %struct.rtx_def* %call1, %struct.rtx_def** %set, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 1
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %5 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %fld2 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i32 0, i64 0
  %rtx4 = bitcast %union.rtunion_def* %arrayidx3 to %struct.rtx_def**
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rtx4, align 8
  store %struct.rtx_def* %6, %struct.rtx_def** %cond, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld5 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1
  %arrayidx6 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld5, i32 0, i64 1
  %rtx7 = bitcast %union.rtunion_def* %arrayidx6 to %struct.rtx_def**
  %8 = load %struct.rtx_def*, %struct.rtx_def** %rtx7, align 8
  %fld8 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1
  %arrayidx9 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld8, i32 0, i64 2
  %rtx10 = bitcast %union.rtunion_def* %arrayidx9 to %struct.rtx_def**
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rtx10, align 8
  %10 = bitcast %struct.rtx_def* %9 to i32*
  %bf.load11 = load i32, i32* %10, align 8
  %bf.clear12 = and i32 %bf.load11, 65535
  %cmp13 = icmp eq i32 %bf.clear12, 67
  br i1 %cmp13, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.end
  %11 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld14 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1
  %arrayidx15 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld14, i32 0, i64 1
  %rtx16 = bitcast %union.rtunion_def* %arrayidx15 to %struct.rtx_def**
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rtx16, align 8
  %fld17 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1
  %arrayidx18 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld17, i32 0, i64 2
  %rtx19 = bitcast %union.rtunion_def* %arrayidx18 to %struct.rtx_def**
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rtx19, align 8
  %fld20 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1
  %arrayidx21 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld20, i32 0, i64 0
  %rtx22 = bitcast %union.rtunion_def* %arrayidx21 to %struct.rtx_def**
  %14 = load %struct.rtx_def*, %struct.rtx_def** %rtx22, align 8
  %15 = load %struct.rtx_def*, %struct.rtx_def** %jump.addr, align 8
  %fld23 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1
  %arrayidx24 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld23, i32 0, i64 7
  %rtx25 = bitcast %union.rtunion_def* %arrayidx24 to %struct.rtx_def**
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rtx25, align 8
  %cmp26 = icmp eq %struct.rtx_def* %14, %16
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end
  %17 = phi i1 [ false, %if.end ], [ %cmp26, %land.rhs ]
  %land.ext = zext i1 %17 to i32
  store i32 %land.ext, i32* %reverse, align 4
  %18 = load %struct.rtx_def*, %struct.rtx_def** %jump.addr, align 8
  %19 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8
  %20 = load i32, i32* %reverse, align 4
  %21 = load %struct.rtx_def**, %struct.rtx_def*** %earliest.addr, align 8
  %call27 = call %struct.rtx_def* @canonicalize_condition(%struct.rtx_def* %18, %struct.rtx_def* %19, i32 %20, %struct.rtx_def** %21, %struct.rtx_def* null)
  store %struct.rtx_def* %call27, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %land.end, %if.then
  %22 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %22
}

declare %struct.rtx_def* @pc_set(%struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @get_condition_for_loop(%struct.loop* %loop, %struct.rtx_def* %x) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %x.addr = alloca %struct.rtx_def*, align 8
  %comparison = alloca %struct.rtx_def*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %call = call %struct.rtx_def* @get_condition(%struct.rtx_def* %0, %struct.rtx_def** null)
  store %struct.rtx_def* %call, %struct.rtx_def** %comparison, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %comparison, align 8
  %cmp = icmp eq %struct.rtx_def* %1, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %comparison, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %4 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %call1 = call i32 @loop_invariant_p(%struct.loop* %2, %struct.rtx_def* %4)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %lor.lhs.false.2, label %if.then

lor.lhs.false.2:                                  ; preds = %lor.lhs.false
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %comparison, align 8
  %fld3 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1
  %arrayidx4 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3, i32 0, i64 1
  %rtx5 = bitcast %union.rtunion_def* %arrayidx4 to %struct.rtx_def**
  %7 = load %struct.rtx_def*, %struct.rtx_def** %rtx5, align 8
  %call6 = call i32 @loop_invariant_p(%struct.loop* %5, %struct.rtx_def* %7)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false.2, %lor.lhs.false, %entry
  %8 = load %struct.rtx_def*, %struct.rtx_def** %comparison, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false.2
  %9 = load %struct.rtx_def*, %struct.rtx_def** %comparison, align 8
  %10 = bitcast %struct.rtx_def* %9 to i32*
  %bf.load = load i32, i32* %10, align 8
  %bf.clear = and i32 %bf.load, 65535
  %call8 = call i32 @swap_condition(i32 %bf.clear)
  %11 = load %struct.rtx_def*, %struct.rtx_def** %comparison, align 8
  %fld9 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1
  %arrayidx10 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld9, i32 0, i64 1
  %rtx11 = bitcast %union.rtunion_def* %arrayidx10 to %struct.rtx_def**
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rtx11, align 8
  %13 = load %struct.rtx_def*, %struct.rtx_def** %comparison, align 8
  %fld12 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1
  %arrayidx13 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld12, i32 0, i64 0
  %rtx14 = bitcast %union.rtunion_def* %arrayidx13 to %struct.rtx_def**
  %14 = load %struct.rtx_def*, %struct.rtx_def** %rtx14, align 8
  %call15 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 %call8, i32 0, %struct.rtx_def* %12, %struct.rtx_def* %14)
  store %struct.rtx_def* %call15, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %15 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %15
}

declare %struct.rtx_def* @emit_insn_before(%struct.rtx_def*, %struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define void @debug_ivs(%struct.loop* %loop) #0 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  call void @loop_ivs_dump(%struct.loop* %0, %struct._IO_FILE* %1, i32 1)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @loop_ivs_dump(%struct.loop* %loop, %struct._IO_FILE* %file, i32 %verbose) #0 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %file.addr = alloca %struct._IO_FILE*, align 8
  %verbose.addr = alloca i32, align 4
  %bl = alloca %struct.iv_class*, align 8
  %iv_num = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  store i32 %verbose, i32* %verbose.addr, align 4
  store i32 0, i32* %iv_num, align 4
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %tobool = icmp ne %struct.loop* %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %tobool1 = icmp ne %struct._IO_FILE* %1, null
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %for.end.12

if.end:                                           ; preds = %lor.lhs.false
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %aux = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 22
  %3 = load i8*, i8** %aux, align 8
  %4 = bitcast i8* %3 to %struct.loop_info*
  %ivs = getelementptr inbounds %struct.loop_info, %struct.loop_info* %4, i32 0, i32 29
  %list = getelementptr inbounds %struct.loop_ivs, %struct.loop_ivs* %ivs, i32 0, i32 2
  %5 = load %struct.iv_class*, %struct.iv_class** %list, align 8
  store %struct.iv_class* %5, %struct.iv_class** %bl, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %6 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %tobool2 = icmp ne %struct.iv_class* %6, null
  br i1 %tobool2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i32, i32* %iv_num, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %iv_num, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %next = getelementptr inbounds %struct.iv_class, %struct.iv_class* %8, i32 0, i32 9
  %9 = load %struct.iv_class*, %struct.iv_class** %next, align 8
  store %struct.iv_class* %9, %struct.iv_class** %bl, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %11 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %num = getelementptr inbounds %struct.loop, %struct.loop* %11, i32 0, i32 0
  %12 = load i32, i32* %num, align 4
  %13 = load i32, i32* %iv_num, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %10, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.75, i32 0, i32 0), i32 %12, i32 %13)
  %14 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %aux3 = getelementptr inbounds %struct.loop, %struct.loop* %14, i32 0, i32 22
  %15 = load i8*, i8** %aux3, align 8
  %16 = bitcast i8* %15 to %struct.loop_info*
  %ivs4 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %16, i32 0, i32 29
  %list5 = getelementptr inbounds %struct.loop_ivs, %struct.loop_ivs* %ivs4, i32 0, i32 2
  %17 = load %struct.iv_class*, %struct.iv_class** %list5, align 8
  store %struct.iv_class* %17, %struct.iv_class** %bl, align 8
  br label %for.cond.6

for.cond.6:                                       ; preds = %for.inc.10, %for.end
  %18 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %tobool7 = icmp ne %struct.iv_class* %18, null
  br i1 %tobool7, label %for.body.8, label %for.end.12

for.body.8:                                       ; preds = %for.cond.6
  %19 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %21 = load i32, i32* %verbose.addr, align 4
  call void @loop_iv_class_dump(%struct.iv_class* %19, %struct._IO_FILE* %20, i32 %21)
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call9 = call i32 @fputc(i32 10, %struct._IO_FILE* %22)
  br label %for.inc.10

for.inc.10:                                       ; preds = %for.body.8
  %23 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %next11 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %23, i32 0, i32 9
  %24 = load %struct.iv_class*, %struct.iv_class** %next11, align 8
  store %struct.iv_class* %24, %struct.iv_class** %bl, align 8
  br label %for.cond.6

for.end.12:                                       ; preds = %if.then, %for.cond.6
  ret void
}

; Function Attrs: nounwind uwtable
define void @debug_iv_class(%struct.iv_class* %bl) #0 {
entry:
  %bl.addr = alloca %struct.iv_class*, align 8
  store %struct.iv_class* %bl, %struct.iv_class** %bl.addr, align 8
  %0 = load %struct.iv_class*, %struct.iv_class** %bl.addr, align 8
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  call void @loop_iv_class_dump(%struct.iv_class* %0, %struct._IO_FILE* %1, i32 1)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @loop_iv_class_dump(%struct.iv_class* %bl, %struct._IO_FILE* %file, i32 %verbose) #0 {
entry:
  %bl.addr = alloca %struct.iv_class*, align 8
  %file.addr = alloca %struct._IO_FILE*, align 8
  %verbose.addr = alloca i32, align 4
  %v = alloca %struct.induction*, align 8
  %incr = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  store %struct.iv_class* %bl, %struct.iv_class** %bl.addr, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  store i32 %verbose, i32* %verbose.addr, align 4
  %0 = load %struct.iv_class*, %struct.iv_class** %bl.addr, align 8
  %tobool = icmp ne %struct.iv_class* %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %tobool1 = icmp ne %struct._IO_FILE* %1, null
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %for.end.71

if.end:                                           ; preds = %lor.lhs.false
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %3 = load %struct.iv_class*, %struct.iv_class** %bl.addr, align 8
  %regno = getelementptr inbounds %struct.iv_class, %struct.iv_class* %3, i32 0, i32 0
  %4 = load i32, i32* %regno, align 4
  %5 = load %struct.iv_class*, %struct.iv_class** %bl.addr, align 8
  %total_benefit = getelementptr inbounds %struct.iv_class, %struct.iv_class* %5, i32 0, i32 5
  %6 = load i32, i32* %total_benefit, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.76, i32 0, i32 0), i32 %4, i32 %6)
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %8 = load %struct.iv_class*, %struct.iv_class** %bl.addr, align 8
  %init_insn = getelementptr inbounds %struct.iv_class, %struct.iv_class* %8, i32 0, i32 10
  %9 = load %struct.rtx_def*, %struct.rtx_def** %init_insn, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtint = bitcast %union.rtunion_def* %arrayidx to i32*
  %10 = load i32, i32* %rtint, align 4
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.77, i32 0, i32 0), i32 %10)
  %11 = load %struct.iv_class*, %struct.iv_class** %bl.addr, align 8
  %initial_value = getelementptr inbounds %struct.iv_class, %struct.iv_class* %11, i32 0, i32 6
  %12 = load %struct.rtx_def*, %struct.rtx_def** %initial_value, align 8
  %tobool3 = icmp ne %struct.rtx_def* %12, null
  br i1 %tobool3, label %if.then.4, label %if.end.7

if.then.4:                                        ; preds = %if.end
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.78, i32 0, i32 0))
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %15 = load %struct.iv_class*, %struct.iv_class** %bl.addr, align 8
  %initial_value6 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %15, i32 0, i32 6
  %16 = load %struct.rtx_def*, %struct.rtx_def** %initial_value6, align 8
  call void @print_simple_rtl(%struct._IO_FILE* %14, %struct.rtx_def* %16)
  br label %if.end.7

if.end.7:                                         ; preds = %if.then.4, %if.end
  %17 = load %struct.iv_class*, %struct.iv_class** %bl.addr, align 8
  %initial_test = getelementptr inbounds %struct.iv_class, %struct.iv_class* %17, i32 0, i32 7
  %18 = load %struct.rtx_def*, %struct.rtx_def** %initial_test, align 8
  %tobool8 = icmp ne %struct.rtx_def* %18, null
  br i1 %tobool8, label %if.then.9, label %if.end.12

if.then.9:                                        ; preds = %if.end.7
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call10 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %19, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.79, i32 0, i32 0))
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %21 = load %struct.iv_class*, %struct.iv_class** %bl.addr, align 8
  %initial_test11 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %21, i32 0, i32 7
  %22 = load %struct.rtx_def*, %struct.rtx_def** %initial_test11, align 8
  call void @print_simple_rtl(%struct._IO_FILE* %20, %struct.rtx_def* %22)
  br label %if.end.12

if.end.12:                                        ; preds = %if.then.9, %if.end.7
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call13 = call i32 @fputc(i32 10, %struct._IO_FILE* %23)
  %24 = load %struct.iv_class*, %struct.iv_class** %bl.addr, align 8
  %final_value = getelementptr inbounds %struct.iv_class, %struct.iv_class* %24, i32 0, i32 8
  %25 = load %struct.rtx_def*, %struct.rtx_def** %final_value, align 8
  %tobool14 = icmp ne %struct.rtx_def* %25, null
  br i1 %tobool14, label %if.then.15, label %if.end.19

if.then.15:                                       ; preds = %if.end.12
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call16 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %26, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.80, i32 0, i32 0))
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %28 = load %struct.iv_class*, %struct.iv_class** %bl.addr, align 8
  %final_value17 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %28, i32 0, i32 8
  %29 = load %struct.rtx_def*, %struct.rtx_def** %final_value17, align 8
  call void @print_simple_rtl(%struct._IO_FILE* %27, %struct.rtx_def* %29)
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call18 = call i32 @fputc(i32 10, %struct._IO_FILE* %30)
  br label %if.end.19

if.end.19:                                        ; preds = %if.then.15, %if.end.12
  %31 = load %struct.iv_class*, %struct.iv_class** %bl.addr, align 8
  %call20 = call %struct.rtx_def* @biv_total_increment(%struct.iv_class* %31)
  store %struct.rtx_def* %call20, %struct.rtx_def** %incr, align 8
  %tobool21 = icmp ne %struct.rtx_def* %call20, null
  br i1 %tobool21, label %if.then.22, label %if.end.25

if.then.22:                                       ; preds = %if.end.19
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call23 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %32, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.81, i32 0, i32 0))
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %34 = load %struct.rtx_def*, %struct.rtx_def** %incr, align 8
  call void @print_simple_rtl(%struct._IO_FILE* %33, %struct.rtx_def* %34)
  %35 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call24 = call i32 @fputc(i32 10, %struct._IO_FILE* %35)
  br label %if.end.25

if.end.25:                                        ; preds = %if.then.22, %if.end.19
  store i32 0, i32* %i, align 4
  %36 = load %struct.iv_class*, %struct.iv_class** %bl.addr, align 8
  %biv = getelementptr inbounds %struct.iv_class, %struct.iv_class* %36, i32 0, i32 2
  %37 = load %struct.induction*, %struct.induction** %biv, align 8
  store %struct.induction* %37, %struct.induction** %v, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.25
  %38 = load %struct.induction*, %struct.induction** %v, align 8
  %tobool26 = icmp ne %struct.induction* %38, null
  br i1 %tobool26, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %39 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %40 = load i32, i32* %i, align 4
  %41 = load %struct.induction*, %struct.induction** %v, align 8
  %insn = getelementptr inbounds %struct.induction, %struct.induction* %41, i32 0, i32 0
  %42 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld27 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %42, i32 0, i32 1
  %arrayidx28 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld27, i32 0, i64 0
  %rtint29 = bitcast %union.rtunion_def* %arrayidx28 to i32*
  %43 = load i32, i32* %rtint29, align 4
  %call30 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %39, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.82, i32 0, i32 0), i32 %40, i32 %43)
  %44 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %45 = load %struct.induction*, %struct.induction** %v, align 8
  %add_val = getelementptr inbounds %struct.induction, %struct.induction* %45, i32 0, i32 9
  %46 = load %struct.rtx_def*, %struct.rtx_def** %add_val, align 8
  call void @print_simple_rtl(%struct._IO_FILE* %44, %struct.rtx_def* %46)
  %47 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call31 = call i32 @fputc(i32 10, %struct._IO_FILE* %47)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %48 = load %struct.induction*, %struct.induction** %v, align 8
  %next_iv = getelementptr inbounds %struct.induction, %struct.induction* %48, i32 0, i32 17
  %49 = load %struct.induction*, %struct.induction** %next_iv, align 8
  store %struct.induction* %49, %struct.induction** %v, align 8
  %50 = load i32, i32* %i, align 4
  %inc = add nsw i32 %50, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  %51 = load %struct.iv_class*, %struct.iv_class** %bl.addr, align 8
  %giv = getelementptr inbounds %struct.iv_class, %struct.iv_class* %51, i32 0, i32 4
  %52 = load %struct.induction*, %struct.induction** %giv, align 8
  store %struct.induction* %52, %struct.induction** %v, align 8
  br label %for.cond.32

for.cond.32:                                      ; preds = %for.inc.68, %for.end
  %53 = load %struct.induction*, %struct.induction** %v, align 8
  %tobool33 = icmp ne %struct.induction* %53, null
  br i1 %tobool33, label %for.body.34, label %for.end.71

for.body.34:                                      ; preds = %for.cond.32
  %54 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %55 = load i32, i32* %i, align 4
  %56 = load %struct.induction*, %struct.induction** %v, align 8
  %insn35 = getelementptr inbounds %struct.induction, %struct.induction* %56, i32 0, i32 0
  %57 = load %struct.rtx_def*, %struct.rtx_def** %insn35, align 8
  %fld36 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %57, i32 0, i32 1
  %arrayidx37 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld36, i32 0, i64 0
  %rtint38 = bitcast %union.rtunion_def* %arrayidx37 to i32*
  %58 = load i32, i32* %rtint38, align 4
  %59 = load %struct.induction*, %struct.induction** %v, align 8
  %benefit = getelementptr inbounds %struct.induction, %struct.induction* %59, i32 0, i32 10
  %60 = load i32, i32* %benefit, align 4
  %call39 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %54, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.83, i32 0, i32 0), i32 %55, i32 %58, i32 %60)
  %61 = load %struct.induction*, %struct.induction** %v, align 8
  %giv_type = getelementptr inbounds %struct.induction, %struct.induction* %61, i32 0, i32 3
  %62 = load i32, i32* %giv_type, align 4
  %cmp = icmp eq i32 %62, 0
  br i1 %cmp, label %if.then.40, label %if.else

if.then.40:                                       ; preds = %for.body.34
  %63 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %64 = load %struct.induction*, %struct.induction** %v, align 8
  %mem = getelementptr inbounds %struct.induction, %struct.induction* %64, i32 0, i32 7
  %65 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8
  call void @print_simple_rtl(%struct._IO_FILE* %63, %struct.rtx_def* %65)
  br label %if.end.66

if.else:                                          ; preds = %for.body.34
  %66 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %67 = load %struct.induction*, %struct.induction** %v, align 8
  %insn41 = getelementptr inbounds %struct.induction, %struct.induction* %67, i32 0, i32 0
  %68 = load %struct.rtx_def*, %struct.rtx_def** %insn41, align 8
  %69 = bitcast %struct.rtx_def* %68 to i32*
  %bf.load = load i32, i32* %69, align 8
  %bf.clear = and i32 %bf.load, 65535
  %idxprom = sext i32 %bf.clear to i64
  %arrayidx42 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom
  %70 = load i8, i8* %arrayidx42, align 1
  %conv = sext i8 %70 to i32
  %cmp43 = icmp eq i32 %conv, 105
  br i1 %cmp43, label %cond.true, label %cond.false.63

cond.true:                                        ; preds = %if.else
  %71 = load %struct.induction*, %struct.induction** %v, align 8
  %insn45 = getelementptr inbounds %struct.induction, %struct.induction* %71, i32 0, i32 0
  %72 = load %struct.rtx_def*, %struct.rtx_def** %insn45, align 8
  %fld46 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %72, i32 0, i32 1
  %arrayidx47 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld46, i32 0, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx47 to %struct.rtx_def**
  %73 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %74 = bitcast %struct.rtx_def* %73 to i32*
  %bf.load48 = load i32, i32* %74, align 8
  %bf.clear49 = and i32 %bf.load48, 65535
  %cmp50 = icmp eq i32 %bf.clear49, 47
  br i1 %cmp50, label %cond.true.52, label %cond.false

cond.true.52:                                     ; preds = %cond.true
  %75 = load %struct.induction*, %struct.induction** %v, align 8
  %insn53 = getelementptr inbounds %struct.induction, %struct.induction* %75, i32 0, i32 0
  %76 = load %struct.rtx_def*, %struct.rtx_def** %insn53, align 8
  %fld54 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %76, i32 0, i32 1
  %arrayidx55 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld54, i32 0, i64 3
  %rtx56 = bitcast %union.rtunion_def* %arrayidx55 to %struct.rtx_def**
  %77 = load %struct.rtx_def*, %struct.rtx_def** %rtx56, align 8
  br label %cond.end

cond.false:                                       ; preds = %cond.true
  %78 = load %struct.induction*, %struct.induction** %v, align 8
  %insn57 = getelementptr inbounds %struct.induction, %struct.induction* %78, i32 0, i32 0
  %79 = load %struct.rtx_def*, %struct.rtx_def** %insn57, align 8
  %80 = load %struct.induction*, %struct.induction** %v, align 8
  %insn58 = getelementptr inbounds %struct.induction, %struct.induction* %80, i32 0, i32 0
  %81 = load %struct.rtx_def*, %struct.rtx_def** %insn58, align 8
  %fld59 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %81, i32 0, i32 1
  %arrayidx60 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld59, i32 0, i64 3
  %rtx61 = bitcast %union.rtunion_def* %arrayidx60 to %struct.rtx_def**
  %82 = load %struct.rtx_def*, %struct.rtx_def** %rtx61, align 8
  %call62 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %79, %struct.rtx_def* %82)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true.52
  %cond = phi %struct.rtx_def* [ %77, %cond.true.52 ], [ %call62, %cond.false ]
  br label %cond.end.64

cond.false.63:                                    ; preds = %if.else
  br label %cond.end.64

cond.end.64:                                      ; preds = %cond.false.63, %cond.end
  %cond65 = phi %struct.rtx_def* [ %cond, %cond.end ], [ null, %cond.false.63 ]
  call void @print_simple_rtl(%struct._IO_FILE* %66, %struct.rtx_def* %cond65)
  br label %if.end.66

if.end.66:                                        ; preds = %cond.end.64, %if.then.40
  %83 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call67 = call i32 @fputc(i32 10, %struct._IO_FILE* %83)
  br label %for.inc.68

for.inc.68:                                       ; preds = %if.end.66
  %84 = load %struct.induction*, %struct.induction** %v, align 8
  %next_iv69 = getelementptr inbounds %struct.induction, %struct.induction* %84, i32 0, i32 17
  %85 = load %struct.induction*, %struct.induction** %next_iv69, align 8
  store %struct.induction* %85, %struct.induction** %v, align 8
  %86 = load i32, i32* %i, align 4
  %inc70 = add nsw i32 %86, 1
  store i32 %inc70, i32* %i, align 4
  br label %for.cond.32

for.end.71:                                       ; preds = %if.then, %for.cond.32
  ret void
}

; Function Attrs: nounwind uwtable
define void @debug_biv(%struct.induction* %v) #0 {
entry:
  %v.addr = alloca %struct.induction*, align 8
  store %struct.induction* %v, %struct.induction** %v.addr, align 8
  %0 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  call void @loop_biv_dump(%struct.induction* %0, %struct._IO_FILE* %1, i32 1)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @loop_biv_dump(%struct.induction* %v, %struct._IO_FILE* %file, i32 %verbose) #0 {
entry:
  %v.addr = alloca %struct.induction*, align 8
  %file.addr = alloca %struct._IO_FILE*, align 8
  %verbose.addr = alloca i32, align 4
  store %struct.induction* %v, %struct.induction** %v.addr, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  store i32 %verbose, i32* %verbose.addr, align 4
  %0 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %tobool = icmp ne %struct.induction* %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %tobool1 = icmp ne %struct._IO_FILE* %1, null
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %3 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %dest_reg = getelementptr inbounds %struct.induction, %struct.induction* %3, i32 0, i32 4
  %4 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx to i32*
  %5 = load i32, i32* %rtuint, align 4
  %6 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %insn = getelementptr inbounds %struct.induction, %struct.induction* %6, i32 0, i32 0
  %7 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld2 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i32 0, i64 0
  %rtint = bitcast %union.rtunion_def* %arrayidx3 to i32*
  %8 = load i32, i32* %rtint, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.84, i32 0, i32 0), i32 %5, i32 %8)
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.85, i32 0, i32 0))
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %11 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %add_val = getelementptr inbounds %struct.induction, %struct.induction* %11, i32 0, i32 9
  %12 = load %struct.rtx_def*, %struct.rtx_def** %add_val, align 8
  call void @print_simple_rtl(%struct._IO_FILE* %10, %struct.rtx_def* %12)
  %13 = load i32, i32* %verbose.addr, align 4
  %tobool5 = icmp ne i32 %13, 0
  br i1 %tobool5, label %land.lhs.true, label %if.end.11

land.lhs.true:                                    ; preds = %if.end
  %14 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %final_value = getelementptr inbounds %struct.induction, %struct.induction* %14, i32 0, i32 11
  %15 = load %struct.rtx_def*, %struct.rtx_def** %final_value, align 8
  %tobool6 = icmp ne %struct.rtx_def* %15, null
  br i1 %tobool6, label %if.then.7, label %if.end.11

if.then.7:                                        ; preds = %land.lhs.true
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call8 = call i32 @fputc(i32 10, %struct._IO_FILE* %16)
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call9 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %17, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.86, i32 0, i32 0))
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %19 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %final_value10 = getelementptr inbounds %struct.induction, %struct.induction* %19, i32 0, i32 11
  %20 = load %struct.rtx_def*, %struct.rtx_def** %final_value10, align 8
  call void @print_simple_rtl(%struct._IO_FILE* %18, %struct.rtx_def* %20)
  br label %if.end.11

if.end.11:                                        ; preds = %if.then.7, %land.lhs.true, %if.end
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call12 = call i32 @fputc(i32 10, %struct._IO_FILE* %21)
  br label %return

return:                                           ; preds = %if.end.11, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define void @debug_giv(%struct.induction* %v) #0 {
entry:
  %v.addr = alloca %struct.induction*, align 8
  store %struct.induction* %v, %struct.induction** %v.addr, align 8
  %0 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  call void @loop_giv_dump(%struct.induction* %0, %struct._IO_FILE* %1, i32 1)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @loop_giv_dump(%struct.induction* %v, %struct._IO_FILE* %file, i32 %verbose) #0 {
entry:
  %v.addr = alloca %struct.induction*, align 8
  %file.addr = alloca %struct._IO_FILE*, align 8
  %verbose.addr = alloca i32, align 4
  store %struct.induction* %v, %struct.induction** %v.addr, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  store i32 %verbose, i32* %verbose.addr, align 4
  %0 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %tobool = icmp ne %struct.induction* %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %tobool1 = icmp ne %struct._IO_FILE* %1, null
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %2 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %giv_type = getelementptr inbounds %struct.induction, %struct.induction* %2, i32 0, i32 3
  %3 = load i32, i32* %giv_type, align 4
  %cmp = icmp eq i32 %3, 1
  br i1 %cmp, label %if.then.2, label %if.else

if.then.2:                                        ; preds = %if.end
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %5 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %dest_reg = getelementptr inbounds %struct.induction, %struct.induction* %5, i32 0, i32 4
  %6 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx to i32*
  %7 = load i32, i32* %rtuint, align 4
  %8 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %insn = getelementptr inbounds %struct.induction, %struct.induction* %8, i32 0, i32 0
  %9 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld3 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1
  %arrayidx4 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3, i32 0, i64 0
  %rtint = bitcast %union.rtunion_def* %arrayidx4 to i32*
  %10 = load i32, i32* %rtint, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.87, i32 0, i32 0), i32 %7, i32 %10)
  br label %if.end.10

if.else:                                          ; preds = %if.end
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %12 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %insn5 = getelementptr inbounds %struct.induction, %struct.induction* %12, i32 0, i32 0
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn5, align 8
  %fld6 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld6, i32 0, i64 0
  %rtint8 = bitcast %union.rtunion_def* %arrayidx7 to i32*
  %14 = load i32, i32* %rtint8, align 4
  %call9 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.88, i32 0, i32 0), i32 %14)
  br label %if.end.10

if.end.10:                                        ; preds = %if.else, %if.then.2
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %16 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %src_reg = getelementptr inbounds %struct.induction, %struct.induction* %16, i32 0, i32 2
  %17 = load %struct.rtx_def*, %struct.rtx_def** %src_reg, align 8
  %fld11 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1
  %arrayidx12 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld11, i32 0, i64 0
  %rtuint13 = bitcast %union.rtunion_def* %arrayidx12 to i32*
  %18 = load i32, i32* %rtuint13, align 4
  %19 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %benefit = getelementptr inbounds %struct.induction, %struct.induction* %19, i32 0, i32 10
  %20 = load i32, i32* %benefit, align 4
  %call14 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %15, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.89, i32 0, i32 0), i32 %18, i32 %20)
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %22 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %lifetime = getelementptr inbounds %struct.induction, %struct.induction* %22, i32 0, i32 14
  %23 = load i32, i32* %lifetime, align 4
  %call15 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %21, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.90, i32 0, i32 0), i32 %23)
  %24 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %replaceable = getelementptr inbounds %struct.induction, %struct.induction* %24, i32 0, i32 13
  %bf.load = load i16, i16* %replaceable, align 4
  %bf.clear = and i16 %bf.load, 1
  %bf.cast = zext i16 %bf.clear to i32
  %tobool16 = icmp ne i32 %bf.cast, 0
  br i1 %tobool16, label %if.then.17, label %if.end.19

if.then.17:                                       ; preds = %if.end.10
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call18 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %25, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.91, i32 0, i32 0))
  br label %if.end.19

if.end.19:                                        ; preds = %if.then.17, %if.end.10
  %26 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %no_const_addval = getelementptr inbounds %struct.induction, %struct.induction* %26, i32 0, i32 13
  %bf.load20 = load i16, i16* %no_const_addval, align 4
  %bf.lshr = lshr i16 %bf.load20, 11
  %bf.clear21 = and i16 %bf.lshr, 1
  %bf.cast22 = zext i16 %bf.clear21 to i32
  %tobool23 = icmp ne i32 %bf.cast22, 0
  br i1 %tobool23, label %if.then.24, label %if.end.26

if.then.24:                                       ; preds = %if.end.19
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call25 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %27, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.92, i32 0, i32 0))
  br label %if.end.26

if.end.26:                                        ; preds = %if.then.24, %if.end.19
  %28 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %ext_dependent = getelementptr inbounds %struct.induction, %struct.induction* %28, i32 0, i32 16
  %29 = load %struct.rtx_def*, %struct.rtx_def** %ext_dependent, align 8
  %tobool27 = icmp ne %struct.rtx_def* %29, null
  br i1 %tobool27, label %if.then.28, label %if.end.37

if.then.28:                                       ; preds = %if.end.26
  %30 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %ext_dependent29 = getelementptr inbounds %struct.induction, %struct.induction* %30, i32 0, i32 16
  %31 = load %struct.rtx_def*, %struct.rtx_def** %ext_dependent29, align 8
  %32 = bitcast %struct.rtx_def* %31 to i32*
  %bf.load30 = load i32, i32* %32, align 8
  %bf.clear31 = and i32 %bf.load30, 65535
  switch i32 %bf.clear31, label %sw.default [
    i32 120, label %sw.bb
    i32 121, label %sw.bb.33
    i32 122, label %sw.bb.35
  ]

sw.bb:                                            ; preds = %if.then.28
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call32 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %33, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.93, i32 0, i32 0))
  br label %sw.epilog

sw.bb.33:                                         ; preds = %if.then.28
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call34 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %34, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.94, i32 0, i32 0))
  br label %sw.epilog

sw.bb.35:                                         ; preds = %if.then.28
  %35 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call36 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %35, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.95, i32 0, i32 0))
  br label %sw.epilog

sw.default:                                       ; preds = %if.then.28
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 10533, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @__FUNCTION__.loop_giv_dump, i32 0, i32 0)) #6
  unreachable

sw.epilog:                                        ; preds = %sw.bb.35, %sw.bb.33, %sw.bb
  br label %if.end.37

if.end.37:                                        ; preds = %sw.epilog, %if.end.26
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call38 = call i32 @fputc(i32 10, %struct._IO_FILE* %36)
  %37 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call39 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %37, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.96, i32 0, i32 0))
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %39 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %mult_val = getelementptr inbounds %struct.induction, %struct.induction* %39, i32 0, i32 8
  %40 = load %struct.rtx_def*, %struct.rtx_def** %mult_val, align 8
  call void @print_simple_rtl(%struct._IO_FILE* %38, %struct.rtx_def* %40)
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call40 = call i32 @fputc(i32 10, %struct._IO_FILE* %41)
  %42 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call41 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %42, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.97, i32 0, i32 0))
  %43 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %44 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %add_val = getelementptr inbounds %struct.induction, %struct.induction* %44, i32 0, i32 9
  %45 = load %struct.rtx_def*, %struct.rtx_def** %add_val, align 8
  call void @print_simple_rtl(%struct._IO_FILE* %43, %struct.rtx_def* %45)
  %46 = load i32, i32* %verbose.addr, align 4
  %tobool42 = icmp ne i32 %46, 0
  br i1 %tobool42, label %land.lhs.true, label %if.end.48

land.lhs.true:                                    ; preds = %if.end.37
  %47 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %final_value = getelementptr inbounds %struct.induction, %struct.induction* %47, i32 0, i32 11
  %48 = load %struct.rtx_def*, %struct.rtx_def** %final_value, align 8
  %tobool43 = icmp ne %struct.rtx_def* %48, null
  br i1 %tobool43, label %if.then.44, label %if.end.48

if.then.44:                                       ; preds = %land.lhs.true
  %49 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call45 = call i32 @fputc(i32 10, %struct._IO_FILE* %49)
  %50 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call46 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %50, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.86, i32 0, i32 0))
  %51 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %52 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %final_value47 = getelementptr inbounds %struct.induction, %struct.induction* %52, i32 0, i32 11
  %53 = load %struct.rtx_def*, %struct.rtx_def** %final_value47, align 8
  call void @print_simple_rtl(%struct._IO_FILE* %51, %struct.rtx_def* %53)
  br label %if.end.48

if.end.48:                                        ; preds = %if.then.44, %land.lhs.true, %if.end.37
  %54 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call49 = call i32 @fputc(i32 10, %struct._IO_FILE* %54)
  br label %return

return:                                           ; preds = %if.end.48, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define void @debug_loop(%struct.loop* %loop) #0 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  call void @flow_loop_dump(%struct.loop* %0, %struct._IO_FILE* %1, void (%struct.loop*, %struct._IO_FILE*, i32)* @loop_dump_aux, i32 1)
  ret void
}

declare void @flow_loop_dump(%struct.loop*, %struct._IO_FILE*, void (%struct.loop*, %struct._IO_FILE*, i32)*, i32) #1

; Function Attrs: nounwind uwtable
define internal void @loop_dump_aux(%struct.loop* %loop, %struct._IO_FILE* %file, i32 %verbose) #0 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %file.addr = alloca %struct._IO_FILE*, align 8
  %verbose.addr = alloca i32, align 4
  %label = alloca %struct.rtx_def*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  store i32 %verbose, i32* %verbose.addr, align 4
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %tobool = icmp ne %struct.loop* %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %tobool1 = icmp ne %struct._IO_FILE* %1, null
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %if.end.754

if.end:                                           ; preds = %lor.lhs.false
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %first = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 6
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %first, align 8
  %head = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 0
  %4 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 1
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %5 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %tobool2 = icmp ne %struct.rtx_def* %5, null
  br i1 %tobool2, label %lor.lhs.false.3, label %if.then.18

lor.lhs.false.3:                                  ; preds = %if.end
  %6 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %first4 = getelementptr inbounds %struct.loop, %struct.loop* %6, i32 0, i32 6
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %first4, align 8
  %head5 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %7, i32 0, i32 0
  %8 = load %struct.rtx_def*, %struct.rtx_def** %head5, align 8
  %fld6 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld6, i32 0, i64 1
  %rtx8 = bitcast %union.rtunion_def* %arrayidx7 to %struct.rtx_def**
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rtx8, align 8
  %10 = bitcast %struct.rtx_def* %9 to i32*
  %bf.load = load i32, i32* %10, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp ne i32 %bf.clear, 37
  br i1 %cmp, label %if.then.18, label %lor.lhs.false.9

lor.lhs.false.9:                                  ; preds = %lor.lhs.false.3
  %11 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %first10 = getelementptr inbounds %struct.loop, %struct.loop* %11, i32 0, i32 6
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %first10, align 8
  %head11 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %12, i32 0, i32 0
  %13 = load %struct.rtx_def*, %struct.rtx_def** %head11, align 8
  %fld12 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1
  %arrayidx13 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld12, i32 0, i64 1
  %rtx14 = bitcast %union.rtunion_def* %arrayidx13 to %struct.rtx_def**
  %14 = load %struct.rtx_def*, %struct.rtx_def** %rtx14, align 8
  %fld15 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1
  %arrayidx16 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld15, i32 0, i64 4
  %rtint = bitcast %union.rtunion_def* %arrayidx16 to i32*
  %15 = load i32, i32* %rtint, align 4
  %cmp17 = icmp ne i32 %15, -96
  br i1 %cmp17, label %if.then.18, label %if.end.27

if.then.18:                                       ; preds = %lor.lhs.false.9, %lor.lhs.false.3, %if.end
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %17 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %first19 = getelementptr inbounds %struct.loop, %struct.loop* %17, i32 0, i32 6
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %first19, align 8
  %head20 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %18, i32 0, i32 0
  %19 = load %struct.rtx_def*, %struct.rtx_def** %head20, align 8
  %fld21 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1
  %arrayidx22 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld21, i32 0, i64 1
  %rtx23 = bitcast %union.rtunion_def* %arrayidx22 to %struct.rtx_def**
  %20 = load %struct.rtx_def*, %struct.rtx_def** %rtx23, align 8
  %fld24 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1
  %arrayidx25 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld24, i32 0, i64 0
  %rtint26 = bitcast %union.rtunion_def* %arrayidx25 to i32*
  %21 = load i32, i32* %rtint26, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %16, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.98, i32 0, i32 0), i32 %21)
  br label %if.end.27

if.end.27:                                        ; preds = %if.then.18, %lor.lhs.false.9
  %22 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %last = getelementptr inbounds %struct.loop, %struct.loop* %22, i32 0, i32 7
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %last, align 8
  %end = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %23, i32 0, i32 1
  %24 = load %struct.rtx_def*, %struct.rtx_def** %end, align 8
  %fld28 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1
  %arrayidx29 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld28, i32 0, i64 2
  %rtx30 = bitcast %union.rtunion_def* %arrayidx29 to %struct.rtx_def**
  %25 = load %struct.rtx_def*, %struct.rtx_def** %rtx30, align 8
  %tobool31 = icmp ne %struct.rtx_def* %25, null
  br i1 %tobool31, label %lor.lhs.false.32, label %if.then.51

lor.lhs.false.32:                                 ; preds = %if.end.27
  %26 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %last33 = getelementptr inbounds %struct.loop, %struct.loop* %26, i32 0, i32 7
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %last33, align 8
  %end34 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %27, i32 0, i32 1
  %28 = load %struct.rtx_def*, %struct.rtx_def** %end34, align 8
  %fld35 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1
  %arrayidx36 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld35, i32 0, i64 2
  %rtx37 = bitcast %union.rtunion_def* %arrayidx36 to %struct.rtx_def**
  %29 = load %struct.rtx_def*, %struct.rtx_def** %rtx37, align 8
  %30 = bitcast %struct.rtx_def* %29 to i32*
  %bf.load38 = load i32, i32* %30, align 8
  %bf.clear39 = and i32 %bf.load38, 65535
  %cmp40 = icmp ne i32 %bf.clear39, 37
  br i1 %cmp40, label %if.then.51, label %lor.lhs.false.41

lor.lhs.false.41:                                 ; preds = %lor.lhs.false.32
  %31 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %last42 = getelementptr inbounds %struct.loop, %struct.loop* %31, i32 0, i32 7
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %last42, align 8
  %end43 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %32, i32 0, i32 1
  %33 = load %struct.rtx_def*, %struct.rtx_def** %end43, align 8
  %fld44 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1
  %arrayidx45 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld44, i32 0, i64 2
  %rtx46 = bitcast %union.rtunion_def* %arrayidx45 to %struct.rtx_def**
  %34 = load %struct.rtx_def*, %struct.rtx_def** %rtx46, align 8
  %fld47 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %34, i32 0, i32 1
  %arrayidx48 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld47, i32 0, i64 4
  %rtint49 = bitcast %union.rtunion_def* %arrayidx48 to i32*
  %35 = load i32, i32* %rtint49, align 4
  %cmp50 = icmp ne i32 %35, -95
  br i1 %cmp50, label %if.then.51, label %if.end.61

if.then.51:                                       ; preds = %lor.lhs.false.41, %lor.lhs.false.32, %if.end.27
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %37 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %last52 = getelementptr inbounds %struct.loop, %struct.loop* %37, i32 0, i32 7
  %38 = load %struct.basic_block_def*, %struct.basic_block_def** %last52, align 8
  %end53 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %38, i32 0, i32 1
  %39 = load %struct.rtx_def*, %struct.rtx_def** %end53, align 8
  %fld54 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1
  %arrayidx55 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld54, i32 0, i64 2
  %rtx56 = bitcast %union.rtunion_def* %arrayidx55 to %struct.rtx_def**
  %40 = load %struct.rtx_def*, %struct.rtx_def** %rtx56, align 8
  %fld57 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %40, i32 0, i32 1
  %arrayidx58 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld57, i32 0, i64 0
  %rtint59 = bitcast %union.rtunion_def* %arrayidx58 to i32*
  %41 = load i32, i32* %rtint59, align 4
  %call60 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %36, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.99, i32 0, i32 0), i32 %41)
  br label %if.end.61

if.end.61:                                        ; preds = %if.then.51, %lor.lhs.false.41
  %42 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %start = getelementptr inbounds %struct.loop, %struct.loop* %42, i32 0, i32 26
  %43 = load %struct.rtx_def*, %struct.rtx_def** %start, align 8
  %tobool62 = icmp ne %struct.rtx_def* %43, null
  br i1 %tobool62, label %if.then.63, label %if.end.754

if.then.63:                                       ; preds = %if.end.61
  %44 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %45 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %start64 = getelementptr inbounds %struct.loop, %struct.loop* %45, i32 0, i32 26
  %46 = load %struct.rtx_def*, %struct.rtx_def** %start64, align 8
  %tobool65 = icmp ne %struct.rtx_def* %46, null
  br i1 %tobool65, label %cond.true, label %cond.false.127

cond.true:                                        ; preds = %if.then.63
  %47 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %start66 = getelementptr inbounds %struct.loop, %struct.loop* %47, i32 0, i32 26
  %48 = load %struct.rtx_def*, %struct.rtx_def** %start66, align 8
  %49 = bitcast %struct.rtx_def* %48 to i32*
  %bf.load67 = load i32, i32* %49, align 8
  %bf.clear68 = and i32 %bf.load67, 65535
  %cmp69 = icmp eq i32 %bf.clear68, 37
  br i1 %cmp69, label %cond.true.70, label %cond.false.95

cond.true.70:                                     ; preds = %cond.true
  %50 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %start71 = getelementptr inbounds %struct.loop, %struct.loop* %50, i32 0, i32 26
  %51 = load %struct.rtx_def*, %struct.rtx_def** %start71, align 8
  %call72 = call %struct.rtx_def* @next_nonnote_insn(%struct.rtx_def* %51)
  %tobool73 = icmp ne %struct.rtx_def* %call72, null
  br i1 %tobool73, label %cond.true.74, label %cond.false.92

cond.true.74:                                     ; preds = %cond.true.70
  %52 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %start75 = getelementptr inbounds %struct.loop, %struct.loop* %52, i32 0, i32 26
  %53 = load %struct.rtx_def*, %struct.rtx_def** %start75, align 8
  %call76 = call %struct.rtx_def* @next_nonnote_insn(%struct.rtx_def* %53)
  %fld77 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %call76, i32 0, i32 1
  %arrayidx78 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld77, i32 0, i64 0
  %rtint79 = bitcast %union.rtunion_def* %arrayidx78 to i32*
  %54 = load i32, i32* %rtint79, align 4
  %idxprom = sext i32 %54 to i64
  %55 = load %struct.varray_head_tag*, %struct.varray_head_tag** @basic_block_for_insn, align 8
  %data = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %55, i32 0, i32 4
  %bb = bitcast %union.varray_data_tag* %data to [1 x %struct.basic_block_def*]*
  %arrayidx80 = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %bb, i32 0, i64 %idxprom
  %56 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx80, align 8
  %tobool81 = icmp ne %struct.basic_block_def* %56, null
  br i1 %tobool81, label %cond.true.82, label %cond.false

cond.true.82:                                     ; preds = %cond.true.74
  %57 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %start83 = getelementptr inbounds %struct.loop, %struct.loop* %57, i32 0, i32 26
  %58 = load %struct.rtx_def*, %struct.rtx_def** %start83, align 8
  %call84 = call %struct.rtx_def* @next_nonnote_insn(%struct.rtx_def* %58)
  %fld85 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %call84, i32 0, i32 1
  %arrayidx86 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld85, i32 0, i64 0
  %rtint87 = bitcast %union.rtunion_def* %arrayidx86 to i32*
  %59 = load i32, i32* %rtint87, align 4
  %idxprom88 = sext i32 %59 to i64
  %60 = load %struct.varray_head_tag*, %struct.varray_head_tag** @basic_block_for_insn, align 8
  %data89 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %60, i32 0, i32 4
  %bb90 = bitcast %union.varray_data_tag* %data89 to [1 x %struct.basic_block_def*]*
  %arrayidx91 = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %bb90, i32 0, i64 %idxprom88
  %61 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx91, align 8
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %61, i32 0, i32 11
  %62 = load i32, i32* %index, align 4
  %add = add nsw i32 %62, 0
  br label %cond.end

cond.false:                                       ; preds = %cond.true.74
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true.82
  %cond = phi i32 [ %add, %cond.true.82 ], [ -1, %cond.false ]
  br label %cond.end.93

cond.false.92:                                    ; preds = %cond.true.70
  br label %cond.end.93

cond.end.93:                                      ; preds = %cond.false.92, %cond.end
  %cond94 = phi i32 [ %cond, %cond.end ], [ -1, %cond.false.92 ]
  br label %cond.end.125

cond.false.95:                                    ; preds = %cond.true
  %63 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %start96 = getelementptr inbounds %struct.loop, %struct.loop* %63, i32 0, i32 26
  %64 = load %struct.rtx_def*, %struct.rtx_def** %start96, align 8
  %tobool97 = icmp ne %struct.rtx_def* %64, null
  br i1 %tobool97, label %cond.true.98, label %cond.false.122

cond.true.98:                                     ; preds = %cond.false.95
  %65 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %start99 = getelementptr inbounds %struct.loop, %struct.loop* %65, i32 0, i32 26
  %66 = load %struct.rtx_def*, %struct.rtx_def** %start99, align 8
  %fld100 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %66, i32 0, i32 1
  %arrayidx101 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld100, i32 0, i64 0
  %rtint102 = bitcast %union.rtunion_def* %arrayidx101 to i32*
  %67 = load i32, i32* %rtint102, align 4
  %idxprom103 = sext i32 %67 to i64
  %68 = load %struct.varray_head_tag*, %struct.varray_head_tag** @basic_block_for_insn, align 8
  %data104 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %68, i32 0, i32 4
  %bb105 = bitcast %union.varray_data_tag* %data104 to [1 x %struct.basic_block_def*]*
  %arrayidx106 = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %bb105, i32 0, i64 %idxprom103
  %69 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx106, align 8
  %tobool107 = icmp ne %struct.basic_block_def* %69, null
  br i1 %tobool107, label %cond.true.108, label %cond.false.119

cond.true.108:                                    ; preds = %cond.true.98
  %70 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %start109 = getelementptr inbounds %struct.loop, %struct.loop* %70, i32 0, i32 26
  %71 = load %struct.rtx_def*, %struct.rtx_def** %start109, align 8
  %fld110 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %71, i32 0, i32 1
  %arrayidx111 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld110, i32 0, i64 0
  %rtint112 = bitcast %union.rtunion_def* %arrayidx111 to i32*
  %72 = load i32, i32* %rtint112, align 4
  %idxprom113 = sext i32 %72 to i64
  %73 = load %struct.varray_head_tag*, %struct.varray_head_tag** @basic_block_for_insn, align 8
  %data114 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %73, i32 0, i32 4
  %bb115 = bitcast %union.varray_data_tag* %data114 to [1 x %struct.basic_block_def*]*
  %arrayidx116 = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %bb115, i32 0, i64 %idxprom113
  %74 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx116, align 8
  %index117 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %74, i32 0, i32 11
  %75 = load i32, i32* %index117, align 4
  %add118 = add nsw i32 %75, 0
  br label %cond.end.120

cond.false.119:                                   ; preds = %cond.true.98
  br label %cond.end.120

cond.end.120:                                     ; preds = %cond.false.119, %cond.true.108
  %cond121 = phi i32 [ %add118, %cond.true.108 ], [ -1, %cond.false.119 ]
  br label %cond.end.123

cond.false.122:                                   ; preds = %cond.false.95
  br label %cond.end.123

cond.end.123:                                     ; preds = %cond.false.122, %cond.end.120
  %cond124 = phi i32 [ %cond121, %cond.end.120 ], [ -1, %cond.false.122 ]
  br label %cond.end.125

cond.end.125:                                     ; preds = %cond.end.123, %cond.end.93
  %cond126 = phi i32 [ %cond94, %cond.end.93 ], [ %cond124, %cond.end.123 ]
  br label %cond.end.128

cond.false.127:                                   ; preds = %if.then.63
  br label %cond.end.128

cond.end.128:                                     ; preds = %cond.false.127, %cond.end.125
  %cond129 = phi i32 [ %cond126, %cond.end.125 ], [ -1, %cond.false.127 ]
  %76 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %start130 = getelementptr inbounds %struct.loop, %struct.loop* %76, i32 0, i32 26
  %77 = load %struct.rtx_def*, %struct.rtx_def** %start130, align 8
  %tobool131 = icmp ne %struct.rtx_def* %77, null
  br i1 %tobool131, label %cond.true.132, label %cond.false.137

cond.true.132:                                    ; preds = %cond.end.128
  %78 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %start133 = getelementptr inbounds %struct.loop, %struct.loop* %78, i32 0, i32 26
  %79 = load %struct.rtx_def*, %struct.rtx_def** %start133, align 8
  %fld134 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %79, i32 0, i32 1
  %arrayidx135 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld134, i32 0, i64 0
  %rtint136 = bitcast %union.rtunion_def* %arrayidx135 to i32*
  %80 = load i32, i32* %rtint136, align 4
  br label %cond.end.138

cond.false.137:                                   ; preds = %cond.end.128
  br label %cond.end.138

cond.end.138:                                     ; preds = %cond.false.137, %cond.true.132
  %cond139 = phi i32 [ %80, %cond.true.132 ], [ -1, %cond.false.137 ]
  %81 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %cont = getelementptr inbounds %struct.loop, %struct.loop* %81, i32 0, i32 24
  %82 = load %struct.rtx_def*, %struct.rtx_def** %cont, align 8
  %tobool140 = icmp ne %struct.rtx_def* %82, null
  br i1 %tobool140, label %cond.true.141, label %cond.false.211

cond.true.141:                                    ; preds = %cond.end.138
  %83 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %cont142 = getelementptr inbounds %struct.loop, %struct.loop* %83, i32 0, i32 24
  %84 = load %struct.rtx_def*, %struct.rtx_def** %cont142, align 8
  %85 = bitcast %struct.rtx_def* %84 to i32*
  %bf.load143 = load i32, i32* %85, align 8
  %bf.clear144 = and i32 %bf.load143, 65535
  %cmp145 = icmp eq i32 %bf.clear144, 37
  br i1 %cmp145, label %cond.true.146, label %cond.false.179

cond.true.146:                                    ; preds = %cond.true.141
  %86 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %cont147 = getelementptr inbounds %struct.loop, %struct.loop* %86, i32 0, i32 24
  %87 = load %struct.rtx_def*, %struct.rtx_def** %cont147, align 8
  %call148 = call %struct.rtx_def* @next_nonnote_insn(%struct.rtx_def* %87)
  %tobool149 = icmp ne %struct.rtx_def* %call148, null
  br i1 %tobool149, label %cond.true.150, label %cond.false.176

cond.true.150:                                    ; preds = %cond.true.146
  %88 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %cont151 = getelementptr inbounds %struct.loop, %struct.loop* %88, i32 0, i32 24
  %89 = load %struct.rtx_def*, %struct.rtx_def** %cont151, align 8
  %call152 = call %struct.rtx_def* @next_nonnote_insn(%struct.rtx_def* %89)
  %fld153 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %call152, i32 0, i32 1
  %arrayidx154 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld153, i32 0, i64 0
  %rtint155 = bitcast %union.rtunion_def* %arrayidx154 to i32*
  %90 = load i32, i32* %rtint155, align 4
  %idxprom156 = sext i32 %90 to i64
  %91 = load %struct.varray_head_tag*, %struct.varray_head_tag** @basic_block_for_insn, align 8
  %data157 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %91, i32 0, i32 4
  %bb158 = bitcast %union.varray_data_tag* %data157 to [1 x %struct.basic_block_def*]*
  %arrayidx159 = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %bb158, i32 0, i64 %idxprom156
  %92 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx159, align 8
  %tobool160 = icmp ne %struct.basic_block_def* %92, null
  br i1 %tobool160, label %cond.true.161, label %cond.false.173

cond.true.161:                                    ; preds = %cond.true.150
  %93 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %cont162 = getelementptr inbounds %struct.loop, %struct.loop* %93, i32 0, i32 24
  %94 = load %struct.rtx_def*, %struct.rtx_def** %cont162, align 8
  %call163 = call %struct.rtx_def* @next_nonnote_insn(%struct.rtx_def* %94)
  %fld164 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %call163, i32 0, i32 1
  %arrayidx165 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld164, i32 0, i64 0
  %rtint166 = bitcast %union.rtunion_def* %arrayidx165 to i32*
  %95 = load i32, i32* %rtint166, align 4
  %idxprom167 = sext i32 %95 to i64
  %96 = load %struct.varray_head_tag*, %struct.varray_head_tag** @basic_block_for_insn, align 8
  %data168 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %96, i32 0, i32 4
  %bb169 = bitcast %union.varray_data_tag* %data168 to [1 x %struct.basic_block_def*]*
  %arrayidx170 = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %bb169, i32 0, i64 %idxprom167
  %97 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx170, align 8
  %index171 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %97, i32 0, i32 11
  %98 = load i32, i32* %index171, align 4
  %add172 = add nsw i32 %98, 0
  br label %cond.end.174

cond.false.173:                                   ; preds = %cond.true.150
  br label %cond.end.174

cond.end.174:                                     ; preds = %cond.false.173, %cond.true.161
  %cond175 = phi i32 [ %add172, %cond.true.161 ], [ -1, %cond.false.173 ]
  br label %cond.end.177

cond.false.176:                                   ; preds = %cond.true.146
  br label %cond.end.177

cond.end.177:                                     ; preds = %cond.false.176, %cond.end.174
  %cond178 = phi i32 [ %cond175, %cond.end.174 ], [ -1, %cond.false.176 ]
  br label %cond.end.209

cond.false.179:                                   ; preds = %cond.true.141
  %99 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %cont180 = getelementptr inbounds %struct.loop, %struct.loop* %99, i32 0, i32 24
  %100 = load %struct.rtx_def*, %struct.rtx_def** %cont180, align 8
  %tobool181 = icmp ne %struct.rtx_def* %100, null
  br i1 %tobool181, label %cond.true.182, label %cond.false.206

cond.true.182:                                    ; preds = %cond.false.179
  %101 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %cont183 = getelementptr inbounds %struct.loop, %struct.loop* %101, i32 0, i32 24
  %102 = load %struct.rtx_def*, %struct.rtx_def** %cont183, align 8
  %fld184 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %102, i32 0, i32 1
  %arrayidx185 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld184, i32 0, i64 0
  %rtint186 = bitcast %union.rtunion_def* %arrayidx185 to i32*
  %103 = load i32, i32* %rtint186, align 4
  %idxprom187 = sext i32 %103 to i64
  %104 = load %struct.varray_head_tag*, %struct.varray_head_tag** @basic_block_for_insn, align 8
  %data188 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %104, i32 0, i32 4
  %bb189 = bitcast %union.varray_data_tag* %data188 to [1 x %struct.basic_block_def*]*
  %arrayidx190 = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %bb189, i32 0, i64 %idxprom187
  %105 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx190, align 8
  %tobool191 = icmp ne %struct.basic_block_def* %105, null
  br i1 %tobool191, label %cond.true.192, label %cond.false.203

cond.true.192:                                    ; preds = %cond.true.182
  %106 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %cont193 = getelementptr inbounds %struct.loop, %struct.loop* %106, i32 0, i32 24
  %107 = load %struct.rtx_def*, %struct.rtx_def** %cont193, align 8
  %fld194 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %107, i32 0, i32 1
  %arrayidx195 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld194, i32 0, i64 0
  %rtint196 = bitcast %union.rtunion_def* %arrayidx195 to i32*
  %108 = load i32, i32* %rtint196, align 4
  %idxprom197 = sext i32 %108 to i64
  %109 = load %struct.varray_head_tag*, %struct.varray_head_tag** @basic_block_for_insn, align 8
  %data198 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %109, i32 0, i32 4
  %bb199 = bitcast %union.varray_data_tag* %data198 to [1 x %struct.basic_block_def*]*
  %arrayidx200 = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %bb199, i32 0, i64 %idxprom197
  %110 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx200, align 8
  %index201 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %110, i32 0, i32 11
  %111 = load i32, i32* %index201, align 4
  %add202 = add nsw i32 %111, 0
  br label %cond.end.204

cond.false.203:                                   ; preds = %cond.true.182
  br label %cond.end.204

cond.end.204:                                     ; preds = %cond.false.203, %cond.true.192
  %cond205 = phi i32 [ %add202, %cond.true.192 ], [ -1, %cond.false.203 ]
  br label %cond.end.207

cond.false.206:                                   ; preds = %cond.false.179
  br label %cond.end.207

cond.end.207:                                     ; preds = %cond.false.206, %cond.end.204
  %cond208 = phi i32 [ %cond205, %cond.end.204 ], [ -1, %cond.false.206 ]
  br label %cond.end.209

cond.end.209:                                     ; preds = %cond.end.207, %cond.end.177
  %cond210 = phi i32 [ %cond178, %cond.end.177 ], [ %cond208, %cond.end.207 ]
  br label %cond.end.212

cond.false.211:                                   ; preds = %cond.end.138
  br label %cond.end.212

cond.end.212:                                     ; preds = %cond.false.211, %cond.end.209
  %cond213 = phi i32 [ %cond210, %cond.end.209 ], [ -1, %cond.false.211 ]
  %112 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %cont214 = getelementptr inbounds %struct.loop, %struct.loop* %112, i32 0, i32 24
  %113 = load %struct.rtx_def*, %struct.rtx_def** %cont214, align 8
  %tobool215 = icmp ne %struct.rtx_def* %113, null
  br i1 %tobool215, label %cond.true.216, label %cond.false.221

cond.true.216:                                    ; preds = %cond.end.212
  %114 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %cont217 = getelementptr inbounds %struct.loop, %struct.loop* %114, i32 0, i32 24
  %115 = load %struct.rtx_def*, %struct.rtx_def** %cont217, align 8
  %fld218 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %115, i32 0, i32 1
  %arrayidx219 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld218, i32 0, i64 0
  %rtint220 = bitcast %union.rtunion_def* %arrayidx219 to i32*
  %116 = load i32, i32* %rtint220, align 4
  br label %cond.end.222

cond.false.221:                                   ; preds = %cond.end.212
  br label %cond.end.222

cond.end.222:                                     ; preds = %cond.false.221, %cond.true.216
  %cond223 = phi i32 [ %116, %cond.true.216 ], [ -1, %cond.false.221 ]
  %117 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %cont224 = getelementptr inbounds %struct.loop, %struct.loop* %117, i32 0, i32 24
  %118 = load %struct.rtx_def*, %struct.rtx_def** %cont224, align 8
  %tobool225 = icmp ne %struct.rtx_def* %118, null
  br i1 %tobool225, label %cond.true.226, label %cond.false.296

cond.true.226:                                    ; preds = %cond.end.222
  %119 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %cont227 = getelementptr inbounds %struct.loop, %struct.loop* %119, i32 0, i32 24
  %120 = load %struct.rtx_def*, %struct.rtx_def** %cont227, align 8
  %121 = bitcast %struct.rtx_def* %120 to i32*
  %bf.load228 = load i32, i32* %121, align 8
  %bf.clear229 = and i32 %bf.load228, 65535
  %cmp230 = icmp eq i32 %bf.clear229, 37
  br i1 %cmp230, label %cond.true.231, label %cond.false.264

cond.true.231:                                    ; preds = %cond.true.226
  %122 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %cont232 = getelementptr inbounds %struct.loop, %struct.loop* %122, i32 0, i32 24
  %123 = load %struct.rtx_def*, %struct.rtx_def** %cont232, align 8
  %call233 = call %struct.rtx_def* @next_nonnote_insn(%struct.rtx_def* %123)
  %tobool234 = icmp ne %struct.rtx_def* %call233, null
  br i1 %tobool234, label %cond.true.235, label %cond.false.261

cond.true.235:                                    ; preds = %cond.true.231
  %124 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %cont236 = getelementptr inbounds %struct.loop, %struct.loop* %124, i32 0, i32 24
  %125 = load %struct.rtx_def*, %struct.rtx_def** %cont236, align 8
  %call237 = call %struct.rtx_def* @next_nonnote_insn(%struct.rtx_def* %125)
  %fld238 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %call237, i32 0, i32 1
  %arrayidx239 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld238, i32 0, i64 0
  %rtint240 = bitcast %union.rtunion_def* %arrayidx239 to i32*
  %126 = load i32, i32* %rtint240, align 4
  %idxprom241 = sext i32 %126 to i64
  %127 = load %struct.varray_head_tag*, %struct.varray_head_tag** @basic_block_for_insn, align 8
  %data242 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %127, i32 0, i32 4
  %bb243 = bitcast %union.varray_data_tag* %data242 to [1 x %struct.basic_block_def*]*
  %arrayidx244 = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %bb243, i32 0, i64 %idxprom241
  %128 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx244, align 8
  %tobool245 = icmp ne %struct.basic_block_def* %128, null
  br i1 %tobool245, label %cond.true.246, label %cond.false.258

cond.true.246:                                    ; preds = %cond.true.235
  %129 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %cont247 = getelementptr inbounds %struct.loop, %struct.loop* %129, i32 0, i32 24
  %130 = load %struct.rtx_def*, %struct.rtx_def** %cont247, align 8
  %call248 = call %struct.rtx_def* @next_nonnote_insn(%struct.rtx_def* %130)
  %fld249 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %call248, i32 0, i32 1
  %arrayidx250 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld249, i32 0, i64 0
  %rtint251 = bitcast %union.rtunion_def* %arrayidx250 to i32*
  %131 = load i32, i32* %rtint251, align 4
  %idxprom252 = sext i32 %131 to i64
  %132 = load %struct.varray_head_tag*, %struct.varray_head_tag** @basic_block_for_insn, align 8
  %data253 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %132, i32 0, i32 4
  %bb254 = bitcast %union.varray_data_tag* %data253 to [1 x %struct.basic_block_def*]*
  %arrayidx255 = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %bb254, i32 0, i64 %idxprom252
  %133 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx255, align 8
  %index256 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %133, i32 0, i32 11
  %134 = load i32, i32* %index256, align 4
  %add257 = add nsw i32 %134, 0
  br label %cond.end.259

cond.false.258:                                   ; preds = %cond.true.235
  br label %cond.end.259

cond.end.259:                                     ; preds = %cond.false.258, %cond.true.246
  %cond260 = phi i32 [ %add257, %cond.true.246 ], [ -1, %cond.false.258 ]
  br label %cond.end.262

cond.false.261:                                   ; preds = %cond.true.231
  br label %cond.end.262

cond.end.262:                                     ; preds = %cond.false.261, %cond.end.259
  %cond263 = phi i32 [ %cond260, %cond.end.259 ], [ -1, %cond.false.261 ]
  br label %cond.end.294

cond.false.264:                                   ; preds = %cond.true.226
  %135 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %cont265 = getelementptr inbounds %struct.loop, %struct.loop* %135, i32 0, i32 24
  %136 = load %struct.rtx_def*, %struct.rtx_def** %cont265, align 8
  %tobool266 = icmp ne %struct.rtx_def* %136, null
  br i1 %tobool266, label %cond.true.267, label %cond.false.291

cond.true.267:                                    ; preds = %cond.false.264
  %137 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %cont268 = getelementptr inbounds %struct.loop, %struct.loop* %137, i32 0, i32 24
  %138 = load %struct.rtx_def*, %struct.rtx_def** %cont268, align 8
  %fld269 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %138, i32 0, i32 1
  %arrayidx270 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld269, i32 0, i64 0
  %rtint271 = bitcast %union.rtunion_def* %arrayidx270 to i32*
  %139 = load i32, i32* %rtint271, align 4
  %idxprom272 = sext i32 %139 to i64
  %140 = load %struct.varray_head_tag*, %struct.varray_head_tag** @basic_block_for_insn, align 8
  %data273 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %140, i32 0, i32 4
  %bb274 = bitcast %union.varray_data_tag* %data273 to [1 x %struct.basic_block_def*]*
  %arrayidx275 = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %bb274, i32 0, i64 %idxprom272
  %141 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx275, align 8
  %tobool276 = icmp ne %struct.basic_block_def* %141, null
  br i1 %tobool276, label %cond.true.277, label %cond.false.288

cond.true.277:                                    ; preds = %cond.true.267
  %142 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %cont278 = getelementptr inbounds %struct.loop, %struct.loop* %142, i32 0, i32 24
  %143 = load %struct.rtx_def*, %struct.rtx_def** %cont278, align 8
  %fld279 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %143, i32 0, i32 1
  %arrayidx280 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld279, i32 0, i64 0
  %rtint281 = bitcast %union.rtunion_def* %arrayidx280 to i32*
  %144 = load i32, i32* %rtint281, align 4
  %idxprom282 = sext i32 %144 to i64
  %145 = load %struct.varray_head_tag*, %struct.varray_head_tag** @basic_block_for_insn, align 8
  %data283 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %145, i32 0, i32 4
  %bb284 = bitcast %union.varray_data_tag* %data283 to [1 x %struct.basic_block_def*]*
  %arrayidx285 = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %bb284, i32 0, i64 %idxprom282
  %146 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx285, align 8
  %index286 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %146, i32 0, i32 11
  %147 = load i32, i32* %index286, align 4
  %add287 = add nsw i32 %147, 0
  br label %cond.end.289

cond.false.288:                                   ; preds = %cond.true.267
  br label %cond.end.289

cond.end.289:                                     ; preds = %cond.false.288, %cond.true.277
  %cond290 = phi i32 [ %add287, %cond.true.277 ], [ -1, %cond.false.288 ]
  br label %cond.end.292

cond.false.291:                                   ; preds = %cond.false.264
  br label %cond.end.292

cond.end.292:                                     ; preds = %cond.false.291, %cond.end.289
  %cond293 = phi i32 [ %cond290, %cond.end.289 ], [ -1, %cond.false.291 ]
  br label %cond.end.294

cond.end.294:                                     ; preds = %cond.end.292, %cond.end.262
  %cond295 = phi i32 [ %cond263, %cond.end.262 ], [ %cond293, %cond.end.292 ]
  br label %cond.end.297

cond.false.296:                                   ; preds = %cond.end.222
  br label %cond.end.297

cond.end.297:                                     ; preds = %cond.false.296, %cond.end.294
  %cond298 = phi i32 [ %cond295, %cond.end.294 ], [ -1, %cond.false.296 ]
  %148 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %cont299 = getelementptr inbounds %struct.loop, %struct.loop* %148, i32 0, i32 24
  %149 = load %struct.rtx_def*, %struct.rtx_def** %cont299, align 8
  %tobool300 = icmp ne %struct.rtx_def* %149, null
  br i1 %tobool300, label %cond.true.301, label %cond.false.306

cond.true.301:                                    ; preds = %cond.end.297
  %150 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %cont302 = getelementptr inbounds %struct.loop, %struct.loop* %150, i32 0, i32 24
  %151 = load %struct.rtx_def*, %struct.rtx_def** %cont302, align 8
  %fld303 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %151, i32 0, i32 1
  %arrayidx304 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld303, i32 0, i64 0
  %rtint305 = bitcast %union.rtunion_def* %arrayidx304 to i32*
  %152 = load i32, i32* %rtint305, align 4
  br label %cond.end.307

cond.false.306:                                   ; preds = %cond.end.297
  br label %cond.end.307

cond.end.307:                                     ; preds = %cond.false.306, %cond.true.301
  %cond308 = phi i32 [ %152, %cond.true.301 ], [ -1, %cond.false.306 ]
  %153 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %vtop = getelementptr inbounds %struct.loop, %struct.loop* %153, i32 0, i32 23
  %154 = load %struct.rtx_def*, %struct.rtx_def** %vtop, align 8
  %tobool309 = icmp ne %struct.rtx_def* %154, null
  br i1 %tobool309, label %cond.true.310, label %cond.false.380

cond.true.310:                                    ; preds = %cond.end.307
  %155 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %vtop311 = getelementptr inbounds %struct.loop, %struct.loop* %155, i32 0, i32 23
  %156 = load %struct.rtx_def*, %struct.rtx_def** %vtop311, align 8
  %157 = bitcast %struct.rtx_def* %156 to i32*
  %bf.load312 = load i32, i32* %157, align 8
  %bf.clear313 = and i32 %bf.load312, 65535
  %cmp314 = icmp eq i32 %bf.clear313, 37
  br i1 %cmp314, label %cond.true.315, label %cond.false.348

cond.true.315:                                    ; preds = %cond.true.310
  %158 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %vtop316 = getelementptr inbounds %struct.loop, %struct.loop* %158, i32 0, i32 23
  %159 = load %struct.rtx_def*, %struct.rtx_def** %vtop316, align 8
  %call317 = call %struct.rtx_def* @next_nonnote_insn(%struct.rtx_def* %159)
  %tobool318 = icmp ne %struct.rtx_def* %call317, null
  br i1 %tobool318, label %cond.true.319, label %cond.false.345

cond.true.319:                                    ; preds = %cond.true.315
  %160 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %vtop320 = getelementptr inbounds %struct.loop, %struct.loop* %160, i32 0, i32 23
  %161 = load %struct.rtx_def*, %struct.rtx_def** %vtop320, align 8
  %call321 = call %struct.rtx_def* @next_nonnote_insn(%struct.rtx_def* %161)
  %fld322 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %call321, i32 0, i32 1
  %arrayidx323 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld322, i32 0, i64 0
  %rtint324 = bitcast %union.rtunion_def* %arrayidx323 to i32*
  %162 = load i32, i32* %rtint324, align 4
  %idxprom325 = sext i32 %162 to i64
  %163 = load %struct.varray_head_tag*, %struct.varray_head_tag** @basic_block_for_insn, align 8
  %data326 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %163, i32 0, i32 4
  %bb327 = bitcast %union.varray_data_tag* %data326 to [1 x %struct.basic_block_def*]*
  %arrayidx328 = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %bb327, i32 0, i64 %idxprom325
  %164 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx328, align 8
  %tobool329 = icmp ne %struct.basic_block_def* %164, null
  br i1 %tobool329, label %cond.true.330, label %cond.false.342

cond.true.330:                                    ; preds = %cond.true.319
  %165 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %vtop331 = getelementptr inbounds %struct.loop, %struct.loop* %165, i32 0, i32 23
  %166 = load %struct.rtx_def*, %struct.rtx_def** %vtop331, align 8
  %call332 = call %struct.rtx_def* @next_nonnote_insn(%struct.rtx_def* %166)
  %fld333 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %call332, i32 0, i32 1
  %arrayidx334 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld333, i32 0, i64 0
  %rtint335 = bitcast %union.rtunion_def* %arrayidx334 to i32*
  %167 = load i32, i32* %rtint335, align 4
  %idxprom336 = sext i32 %167 to i64
  %168 = load %struct.varray_head_tag*, %struct.varray_head_tag** @basic_block_for_insn, align 8
  %data337 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %168, i32 0, i32 4
  %bb338 = bitcast %union.varray_data_tag* %data337 to [1 x %struct.basic_block_def*]*
  %arrayidx339 = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %bb338, i32 0, i64 %idxprom336
  %169 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx339, align 8
  %index340 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %169, i32 0, i32 11
  %170 = load i32, i32* %index340, align 4
  %add341 = add nsw i32 %170, 0
  br label %cond.end.343

cond.false.342:                                   ; preds = %cond.true.319
  br label %cond.end.343

cond.end.343:                                     ; preds = %cond.false.342, %cond.true.330
  %cond344 = phi i32 [ %add341, %cond.true.330 ], [ -1, %cond.false.342 ]
  br label %cond.end.346

cond.false.345:                                   ; preds = %cond.true.315
  br label %cond.end.346

cond.end.346:                                     ; preds = %cond.false.345, %cond.end.343
  %cond347 = phi i32 [ %cond344, %cond.end.343 ], [ -1, %cond.false.345 ]
  br label %cond.end.378

cond.false.348:                                   ; preds = %cond.true.310
  %171 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %vtop349 = getelementptr inbounds %struct.loop, %struct.loop* %171, i32 0, i32 23
  %172 = load %struct.rtx_def*, %struct.rtx_def** %vtop349, align 8
  %tobool350 = icmp ne %struct.rtx_def* %172, null
  br i1 %tobool350, label %cond.true.351, label %cond.false.375

cond.true.351:                                    ; preds = %cond.false.348
  %173 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %vtop352 = getelementptr inbounds %struct.loop, %struct.loop* %173, i32 0, i32 23
  %174 = load %struct.rtx_def*, %struct.rtx_def** %vtop352, align 8
  %fld353 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %174, i32 0, i32 1
  %arrayidx354 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld353, i32 0, i64 0
  %rtint355 = bitcast %union.rtunion_def* %arrayidx354 to i32*
  %175 = load i32, i32* %rtint355, align 4
  %idxprom356 = sext i32 %175 to i64
  %176 = load %struct.varray_head_tag*, %struct.varray_head_tag** @basic_block_for_insn, align 8
  %data357 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %176, i32 0, i32 4
  %bb358 = bitcast %union.varray_data_tag* %data357 to [1 x %struct.basic_block_def*]*
  %arrayidx359 = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %bb358, i32 0, i64 %idxprom356
  %177 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx359, align 8
  %tobool360 = icmp ne %struct.basic_block_def* %177, null
  br i1 %tobool360, label %cond.true.361, label %cond.false.372

cond.true.361:                                    ; preds = %cond.true.351
  %178 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %vtop362 = getelementptr inbounds %struct.loop, %struct.loop* %178, i32 0, i32 23
  %179 = load %struct.rtx_def*, %struct.rtx_def** %vtop362, align 8
  %fld363 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %179, i32 0, i32 1
  %arrayidx364 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld363, i32 0, i64 0
  %rtint365 = bitcast %union.rtunion_def* %arrayidx364 to i32*
  %180 = load i32, i32* %rtint365, align 4
  %idxprom366 = sext i32 %180 to i64
  %181 = load %struct.varray_head_tag*, %struct.varray_head_tag** @basic_block_for_insn, align 8
  %data367 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %181, i32 0, i32 4
  %bb368 = bitcast %union.varray_data_tag* %data367 to [1 x %struct.basic_block_def*]*
  %arrayidx369 = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %bb368, i32 0, i64 %idxprom366
  %182 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx369, align 8
  %index370 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %182, i32 0, i32 11
  %183 = load i32, i32* %index370, align 4
  %add371 = add nsw i32 %183, 0
  br label %cond.end.373

cond.false.372:                                   ; preds = %cond.true.351
  br label %cond.end.373

cond.end.373:                                     ; preds = %cond.false.372, %cond.true.361
  %cond374 = phi i32 [ %add371, %cond.true.361 ], [ -1, %cond.false.372 ]
  br label %cond.end.376

cond.false.375:                                   ; preds = %cond.false.348
  br label %cond.end.376

cond.end.376:                                     ; preds = %cond.false.375, %cond.end.373
  %cond377 = phi i32 [ %cond374, %cond.end.373 ], [ -1, %cond.false.375 ]
  br label %cond.end.378

cond.end.378:                                     ; preds = %cond.end.376, %cond.end.346
  %cond379 = phi i32 [ %cond347, %cond.end.346 ], [ %cond377, %cond.end.376 ]
  br label %cond.end.381

cond.false.380:                                   ; preds = %cond.end.307
  br label %cond.end.381

cond.end.381:                                     ; preds = %cond.false.380, %cond.end.378
  %cond382 = phi i32 [ %cond379, %cond.end.378 ], [ -1, %cond.false.380 ]
  %184 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %vtop383 = getelementptr inbounds %struct.loop, %struct.loop* %184, i32 0, i32 23
  %185 = load %struct.rtx_def*, %struct.rtx_def** %vtop383, align 8
  %tobool384 = icmp ne %struct.rtx_def* %185, null
  br i1 %tobool384, label %cond.true.385, label %cond.false.390

cond.true.385:                                    ; preds = %cond.end.381
  %186 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %vtop386 = getelementptr inbounds %struct.loop, %struct.loop* %186, i32 0, i32 23
  %187 = load %struct.rtx_def*, %struct.rtx_def** %vtop386, align 8
  %fld387 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %187, i32 0, i32 1
  %arrayidx388 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld387, i32 0, i64 0
  %rtint389 = bitcast %union.rtunion_def* %arrayidx388 to i32*
  %188 = load i32, i32* %rtint389, align 4
  br label %cond.end.391

cond.false.390:                                   ; preds = %cond.end.381
  br label %cond.end.391

cond.end.391:                                     ; preds = %cond.false.390, %cond.true.385
  %cond392 = phi i32 [ %188, %cond.true.385 ], [ -1, %cond.false.390 ]
  %189 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %end393 = getelementptr inbounds %struct.loop, %struct.loop* %189, i32 0, i32 27
  %190 = load %struct.rtx_def*, %struct.rtx_def** %end393, align 8
  %tobool394 = icmp ne %struct.rtx_def* %190, null
  br i1 %tobool394, label %cond.true.395, label %cond.false.465

cond.true.395:                                    ; preds = %cond.end.391
  %191 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %end396 = getelementptr inbounds %struct.loop, %struct.loop* %191, i32 0, i32 27
  %192 = load %struct.rtx_def*, %struct.rtx_def** %end396, align 8
  %193 = bitcast %struct.rtx_def* %192 to i32*
  %bf.load397 = load i32, i32* %193, align 8
  %bf.clear398 = and i32 %bf.load397, 65535
  %cmp399 = icmp eq i32 %bf.clear398, 37
  br i1 %cmp399, label %cond.true.400, label %cond.false.433

cond.true.400:                                    ; preds = %cond.true.395
  %194 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %end401 = getelementptr inbounds %struct.loop, %struct.loop* %194, i32 0, i32 27
  %195 = load %struct.rtx_def*, %struct.rtx_def** %end401, align 8
  %call402 = call %struct.rtx_def* @next_nonnote_insn(%struct.rtx_def* %195)
  %tobool403 = icmp ne %struct.rtx_def* %call402, null
  br i1 %tobool403, label %cond.true.404, label %cond.false.430

cond.true.404:                                    ; preds = %cond.true.400
  %196 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %end405 = getelementptr inbounds %struct.loop, %struct.loop* %196, i32 0, i32 27
  %197 = load %struct.rtx_def*, %struct.rtx_def** %end405, align 8
  %call406 = call %struct.rtx_def* @next_nonnote_insn(%struct.rtx_def* %197)
  %fld407 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %call406, i32 0, i32 1
  %arrayidx408 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld407, i32 0, i64 0
  %rtint409 = bitcast %union.rtunion_def* %arrayidx408 to i32*
  %198 = load i32, i32* %rtint409, align 4
  %idxprom410 = sext i32 %198 to i64
  %199 = load %struct.varray_head_tag*, %struct.varray_head_tag** @basic_block_for_insn, align 8
  %data411 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %199, i32 0, i32 4
  %bb412 = bitcast %union.varray_data_tag* %data411 to [1 x %struct.basic_block_def*]*
  %arrayidx413 = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %bb412, i32 0, i64 %idxprom410
  %200 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx413, align 8
  %tobool414 = icmp ne %struct.basic_block_def* %200, null
  br i1 %tobool414, label %cond.true.415, label %cond.false.427

cond.true.415:                                    ; preds = %cond.true.404
  %201 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %end416 = getelementptr inbounds %struct.loop, %struct.loop* %201, i32 0, i32 27
  %202 = load %struct.rtx_def*, %struct.rtx_def** %end416, align 8
  %call417 = call %struct.rtx_def* @next_nonnote_insn(%struct.rtx_def* %202)
  %fld418 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %call417, i32 0, i32 1
  %arrayidx419 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld418, i32 0, i64 0
  %rtint420 = bitcast %union.rtunion_def* %arrayidx419 to i32*
  %203 = load i32, i32* %rtint420, align 4
  %idxprom421 = sext i32 %203 to i64
  %204 = load %struct.varray_head_tag*, %struct.varray_head_tag** @basic_block_for_insn, align 8
  %data422 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %204, i32 0, i32 4
  %bb423 = bitcast %union.varray_data_tag* %data422 to [1 x %struct.basic_block_def*]*
  %arrayidx424 = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %bb423, i32 0, i64 %idxprom421
  %205 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx424, align 8
  %index425 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %205, i32 0, i32 11
  %206 = load i32, i32* %index425, align 4
  %add426 = add nsw i32 %206, 0
  br label %cond.end.428

cond.false.427:                                   ; preds = %cond.true.404
  br label %cond.end.428

cond.end.428:                                     ; preds = %cond.false.427, %cond.true.415
  %cond429 = phi i32 [ %add426, %cond.true.415 ], [ -1, %cond.false.427 ]
  br label %cond.end.431

cond.false.430:                                   ; preds = %cond.true.400
  br label %cond.end.431

cond.end.431:                                     ; preds = %cond.false.430, %cond.end.428
  %cond432 = phi i32 [ %cond429, %cond.end.428 ], [ -1, %cond.false.430 ]
  br label %cond.end.463

cond.false.433:                                   ; preds = %cond.true.395
  %207 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %end434 = getelementptr inbounds %struct.loop, %struct.loop* %207, i32 0, i32 27
  %208 = load %struct.rtx_def*, %struct.rtx_def** %end434, align 8
  %tobool435 = icmp ne %struct.rtx_def* %208, null
  br i1 %tobool435, label %cond.true.436, label %cond.false.460

cond.true.436:                                    ; preds = %cond.false.433
  %209 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %end437 = getelementptr inbounds %struct.loop, %struct.loop* %209, i32 0, i32 27
  %210 = load %struct.rtx_def*, %struct.rtx_def** %end437, align 8
  %fld438 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %210, i32 0, i32 1
  %arrayidx439 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld438, i32 0, i64 0
  %rtint440 = bitcast %union.rtunion_def* %arrayidx439 to i32*
  %211 = load i32, i32* %rtint440, align 4
  %idxprom441 = sext i32 %211 to i64
  %212 = load %struct.varray_head_tag*, %struct.varray_head_tag** @basic_block_for_insn, align 8
  %data442 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %212, i32 0, i32 4
  %bb443 = bitcast %union.varray_data_tag* %data442 to [1 x %struct.basic_block_def*]*
  %arrayidx444 = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %bb443, i32 0, i64 %idxprom441
  %213 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx444, align 8
  %tobool445 = icmp ne %struct.basic_block_def* %213, null
  br i1 %tobool445, label %cond.true.446, label %cond.false.457

cond.true.446:                                    ; preds = %cond.true.436
  %214 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %end447 = getelementptr inbounds %struct.loop, %struct.loop* %214, i32 0, i32 27
  %215 = load %struct.rtx_def*, %struct.rtx_def** %end447, align 8
  %fld448 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %215, i32 0, i32 1
  %arrayidx449 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld448, i32 0, i64 0
  %rtint450 = bitcast %union.rtunion_def* %arrayidx449 to i32*
  %216 = load i32, i32* %rtint450, align 4
  %idxprom451 = sext i32 %216 to i64
  %217 = load %struct.varray_head_tag*, %struct.varray_head_tag** @basic_block_for_insn, align 8
  %data452 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %217, i32 0, i32 4
  %bb453 = bitcast %union.varray_data_tag* %data452 to [1 x %struct.basic_block_def*]*
  %arrayidx454 = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %bb453, i32 0, i64 %idxprom451
  %218 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx454, align 8
  %index455 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %218, i32 0, i32 11
  %219 = load i32, i32* %index455, align 4
  %add456 = add nsw i32 %219, 0
  br label %cond.end.458

cond.false.457:                                   ; preds = %cond.true.436
  br label %cond.end.458

cond.end.458:                                     ; preds = %cond.false.457, %cond.true.446
  %cond459 = phi i32 [ %add456, %cond.true.446 ], [ -1, %cond.false.457 ]
  br label %cond.end.461

cond.false.460:                                   ; preds = %cond.false.433
  br label %cond.end.461

cond.end.461:                                     ; preds = %cond.false.460, %cond.end.458
  %cond462 = phi i32 [ %cond459, %cond.end.458 ], [ -1, %cond.false.460 ]
  br label %cond.end.463

cond.end.463:                                     ; preds = %cond.end.461, %cond.end.431
  %cond464 = phi i32 [ %cond432, %cond.end.431 ], [ %cond462, %cond.end.461 ]
  br label %cond.end.466

cond.false.465:                                   ; preds = %cond.end.391
  br label %cond.end.466

cond.end.466:                                     ; preds = %cond.false.465, %cond.end.463
  %cond467 = phi i32 [ %cond464, %cond.end.463 ], [ -1, %cond.false.465 ]
  %220 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %end468 = getelementptr inbounds %struct.loop, %struct.loop* %220, i32 0, i32 27
  %221 = load %struct.rtx_def*, %struct.rtx_def** %end468, align 8
  %tobool469 = icmp ne %struct.rtx_def* %221, null
  br i1 %tobool469, label %cond.true.470, label %cond.false.475

cond.true.470:                                    ; preds = %cond.end.466
  %222 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %end471 = getelementptr inbounds %struct.loop, %struct.loop* %222, i32 0, i32 27
  %223 = load %struct.rtx_def*, %struct.rtx_def** %end471, align 8
  %fld472 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %223, i32 0, i32 1
  %arrayidx473 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld472, i32 0, i64 0
  %rtint474 = bitcast %union.rtunion_def* %arrayidx473 to i32*
  %224 = load i32, i32* %rtint474, align 4
  br label %cond.end.476

cond.false.475:                                   ; preds = %cond.end.466
  br label %cond.end.476

cond.end.476:                                     ; preds = %cond.false.475, %cond.true.470
  %cond477 = phi i32 [ %224, %cond.true.470 ], [ -1, %cond.false.475 ]
  %call478 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %44, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.100, i32 0, i32 0), i32 %cond129, i32 %cond139, i32 %cond213, i32 %cond223, i32 %cond298, i32 %cond308, i32 %cond382, i32 %cond392, i32 %cond467, i32 %cond477)
  %225 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %226 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %top = getelementptr inbounds %struct.loop, %struct.loop* %226, i32 0, i32 28
  %227 = load %struct.rtx_def*, %struct.rtx_def** %top, align 8
  %tobool479 = icmp ne %struct.rtx_def* %227, null
  br i1 %tobool479, label %cond.true.480, label %cond.false.550

cond.true.480:                                    ; preds = %cond.end.476
  %228 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %top481 = getelementptr inbounds %struct.loop, %struct.loop* %228, i32 0, i32 28
  %229 = load %struct.rtx_def*, %struct.rtx_def** %top481, align 8
  %230 = bitcast %struct.rtx_def* %229 to i32*
  %bf.load482 = load i32, i32* %230, align 8
  %bf.clear483 = and i32 %bf.load482, 65535
  %cmp484 = icmp eq i32 %bf.clear483, 37
  br i1 %cmp484, label %cond.true.485, label %cond.false.518

cond.true.485:                                    ; preds = %cond.true.480
  %231 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %top486 = getelementptr inbounds %struct.loop, %struct.loop* %231, i32 0, i32 28
  %232 = load %struct.rtx_def*, %struct.rtx_def** %top486, align 8
  %call487 = call %struct.rtx_def* @next_nonnote_insn(%struct.rtx_def* %232)
  %tobool488 = icmp ne %struct.rtx_def* %call487, null
  br i1 %tobool488, label %cond.true.489, label %cond.false.515

cond.true.489:                                    ; preds = %cond.true.485
  %233 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %top490 = getelementptr inbounds %struct.loop, %struct.loop* %233, i32 0, i32 28
  %234 = load %struct.rtx_def*, %struct.rtx_def** %top490, align 8
  %call491 = call %struct.rtx_def* @next_nonnote_insn(%struct.rtx_def* %234)
  %fld492 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %call491, i32 0, i32 1
  %arrayidx493 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld492, i32 0, i64 0
  %rtint494 = bitcast %union.rtunion_def* %arrayidx493 to i32*
  %235 = load i32, i32* %rtint494, align 4
  %idxprom495 = sext i32 %235 to i64
  %236 = load %struct.varray_head_tag*, %struct.varray_head_tag** @basic_block_for_insn, align 8
  %data496 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %236, i32 0, i32 4
  %bb497 = bitcast %union.varray_data_tag* %data496 to [1 x %struct.basic_block_def*]*
  %arrayidx498 = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %bb497, i32 0, i64 %idxprom495
  %237 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx498, align 8
  %tobool499 = icmp ne %struct.basic_block_def* %237, null
  br i1 %tobool499, label %cond.true.500, label %cond.false.512

cond.true.500:                                    ; preds = %cond.true.489
  %238 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %top501 = getelementptr inbounds %struct.loop, %struct.loop* %238, i32 0, i32 28
  %239 = load %struct.rtx_def*, %struct.rtx_def** %top501, align 8
  %call502 = call %struct.rtx_def* @next_nonnote_insn(%struct.rtx_def* %239)
  %fld503 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %call502, i32 0, i32 1
  %arrayidx504 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld503, i32 0, i64 0
  %rtint505 = bitcast %union.rtunion_def* %arrayidx504 to i32*
  %240 = load i32, i32* %rtint505, align 4
  %idxprom506 = sext i32 %240 to i64
  %241 = load %struct.varray_head_tag*, %struct.varray_head_tag** @basic_block_for_insn, align 8
  %data507 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %241, i32 0, i32 4
  %bb508 = bitcast %union.varray_data_tag* %data507 to [1 x %struct.basic_block_def*]*
  %arrayidx509 = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %bb508, i32 0, i64 %idxprom506
  %242 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx509, align 8
  %index510 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %242, i32 0, i32 11
  %243 = load i32, i32* %index510, align 4
  %add511 = add nsw i32 %243, 0
  br label %cond.end.513

cond.false.512:                                   ; preds = %cond.true.489
  br label %cond.end.513

cond.end.513:                                     ; preds = %cond.false.512, %cond.true.500
  %cond514 = phi i32 [ %add511, %cond.true.500 ], [ -1, %cond.false.512 ]
  br label %cond.end.516

cond.false.515:                                   ; preds = %cond.true.485
  br label %cond.end.516

cond.end.516:                                     ; preds = %cond.false.515, %cond.end.513
  %cond517 = phi i32 [ %cond514, %cond.end.513 ], [ -1, %cond.false.515 ]
  br label %cond.end.548

cond.false.518:                                   ; preds = %cond.true.480
  %244 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %top519 = getelementptr inbounds %struct.loop, %struct.loop* %244, i32 0, i32 28
  %245 = load %struct.rtx_def*, %struct.rtx_def** %top519, align 8
  %tobool520 = icmp ne %struct.rtx_def* %245, null
  br i1 %tobool520, label %cond.true.521, label %cond.false.545

cond.true.521:                                    ; preds = %cond.false.518
  %246 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %top522 = getelementptr inbounds %struct.loop, %struct.loop* %246, i32 0, i32 28
  %247 = load %struct.rtx_def*, %struct.rtx_def** %top522, align 8
  %fld523 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %247, i32 0, i32 1
  %arrayidx524 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld523, i32 0, i64 0
  %rtint525 = bitcast %union.rtunion_def* %arrayidx524 to i32*
  %248 = load i32, i32* %rtint525, align 4
  %idxprom526 = sext i32 %248 to i64
  %249 = load %struct.varray_head_tag*, %struct.varray_head_tag** @basic_block_for_insn, align 8
  %data527 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %249, i32 0, i32 4
  %bb528 = bitcast %union.varray_data_tag* %data527 to [1 x %struct.basic_block_def*]*
  %arrayidx529 = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %bb528, i32 0, i64 %idxprom526
  %250 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx529, align 8
  %tobool530 = icmp ne %struct.basic_block_def* %250, null
  br i1 %tobool530, label %cond.true.531, label %cond.false.542

cond.true.531:                                    ; preds = %cond.true.521
  %251 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %top532 = getelementptr inbounds %struct.loop, %struct.loop* %251, i32 0, i32 28
  %252 = load %struct.rtx_def*, %struct.rtx_def** %top532, align 8
  %fld533 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %252, i32 0, i32 1
  %arrayidx534 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld533, i32 0, i64 0
  %rtint535 = bitcast %union.rtunion_def* %arrayidx534 to i32*
  %253 = load i32, i32* %rtint535, align 4
  %idxprom536 = sext i32 %253 to i64
  %254 = load %struct.varray_head_tag*, %struct.varray_head_tag** @basic_block_for_insn, align 8
  %data537 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %254, i32 0, i32 4
  %bb538 = bitcast %union.varray_data_tag* %data537 to [1 x %struct.basic_block_def*]*
  %arrayidx539 = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %bb538, i32 0, i64 %idxprom536
  %255 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx539, align 8
  %index540 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %255, i32 0, i32 11
  %256 = load i32, i32* %index540, align 4
  %add541 = add nsw i32 %256, 0
  br label %cond.end.543

cond.false.542:                                   ; preds = %cond.true.521
  br label %cond.end.543

cond.end.543:                                     ; preds = %cond.false.542, %cond.true.531
  %cond544 = phi i32 [ %add541, %cond.true.531 ], [ -1, %cond.false.542 ]
  br label %cond.end.546

cond.false.545:                                   ; preds = %cond.false.518
  br label %cond.end.546

cond.end.546:                                     ; preds = %cond.false.545, %cond.end.543
  %cond547 = phi i32 [ %cond544, %cond.end.543 ], [ -1, %cond.false.545 ]
  br label %cond.end.548

cond.end.548:                                     ; preds = %cond.end.546, %cond.end.516
  %cond549 = phi i32 [ %cond517, %cond.end.516 ], [ %cond547, %cond.end.546 ]
  br label %cond.end.551

cond.false.550:                                   ; preds = %cond.end.476
  br label %cond.end.551

cond.end.551:                                     ; preds = %cond.false.550, %cond.end.548
  %cond552 = phi i32 [ %cond549, %cond.end.548 ], [ -1, %cond.false.550 ]
  %257 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %top553 = getelementptr inbounds %struct.loop, %struct.loop* %257, i32 0, i32 28
  %258 = load %struct.rtx_def*, %struct.rtx_def** %top553, align 8
  %tobool554 = icmp ne %struct.rtx_def* %258, null
  br i1 %tobool554, label %cond.true.555, label %cond.false.560

cond.true.555:                                    ; preds = %cond.end.551
  %259 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %top556 = getelementptr inbounds %struct.loop, %struct.loop* %259, i32 0, i32 28
  %260 = load %struct.rtx_def*, %struct.rtx_def** %top556, align 8
  %fld557 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %260, i32 0, i32 1
  %arrayidx558 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld557, i32 0, i64 0
  %rtint559 = bitcast %union.rtunion_def* %arrayidx558 to i32*
  %261 = load i32, i32* %rtint559, align 4
  br label %cond.end.561

cond.false.560:                                   ; preds = %cond.end.551
  br label %cond.end.561

cond.end.561:                                     ; preds = %cond.false.560, %cond.true.555
  %cond562 = phi i32 [ %261, %cond.true.555 ], [ -1, %cond.false.560 ]
  %262 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %scan_start = getelementptr inbounds %struct.loop, %struct.loop* %262, i32 0, i32 29
  %263 = load %struct.rtx_def*, %struct.rtx_def** %scan_start, align 8
  %tobool563 = icmp ne %struct.rtx_def* %263, null
  br i1 %tobool563, label %cond.true.564, label %cond.false.634

cond.true.564:                                    ; preds = %cond.end.561
  %264 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %scan_start565 = getelementptr inbounds %struct.loop, %struct.loop* %264, i32 0, i32 29
  %265 = load %struct.rtx_def*, %struct.rtx_def** %scan_start565, align 8
  %266 = bitcast %struct.rtx_def* %265 to i32*
  %bf.load566 = load i32, i32* %266, align 8
  %bf.clear567 = and i32 %bf.load566, 65535
  %cmp568 = icmp eq i32 %bf.clear567, 37
  br i1 %cmp568, label %cond.true.569, label %cond.false.602

cond.true.569:                                    ; preds = %cond.true.564
  %267 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %scan_start570 = getelementptr inbounds %struct.loop, %struct.loop* %267, i32 0, i32 29
  %268 = load %struct.rtx_def*, %struct.rtx_def** %scan_start570, align 8
  %call571 = call %struct.rtx_def* @next_nonnote_insn(%struct.rtx_def* %268)
  %tobool572 = icmp ne %struct.rtx_def* %call571, null
  br i1 %tobool572, label %cond.true.573, label %cond.false.599

cond.true.573:                                    ; preds = %cond.true.569
  %269 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %scan_start574 = getelementptr inbounds %struct.loop, %struct.loop* %269, i32 0, i32 29
  %270 = load %struct.rtx_def*, %struct.rtx_def** %scan_start574, align 8
  %call575 = call %struct.rtx_def* @next_nonnote_insn(%struct.rtx_def* %270)
  %fld576 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %call575, i32 0, i32 1
  %arrayidx577 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld576, i32 0, i64 0
  %rtint578 = bitcast %union.rtunion_def* %arrayidx577 to i32*
  %271 = load i32, i32* %rtint578, align 4
  %idxprom579 = sext i32 %271 to i64
  %272 = load %struct.varray_head_tag*, %struct.varray_head_tag** @basic_block_for_insn, align 8
  %data580 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %272, i32 0, i32 4
  %bb581 = bitcast %union.varray_data_tag* %data580 to [1 x %struct.basic_block_def*]*
  %arrayidx582 = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %bb581, i32 0, i64 %idxprom579
  %273 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx582, align 8
  %tobool583 = icmp ne %struct.basic_block_def* %273, null
  br i1 %tobool583, label %cond.true.584, label %cond.false.596

cond.true.584:                                    ; preds = %cond.true.573
  %274 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %scan_start585 = getelementptr inbounds %struct.loop, %struct.loop* %274, i32 0, i32 29
  %275 = load %struct.rtx_def*, %struct.rtx_def** %scan_start585, align 8
  %call586 = call %struct.rtx_def* @next_nonnote_insn(%struct.rtx_def* %275)
  %fld587 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %call586, i32 0, i32 1
  %arrayidx588 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld587, i32 0, i64 0
  %rtint589 = bitcast %union.rtunion_def* %arrayidx588 to i32*
  %276 = load i32, i32* %rtint589, align 4
  %idxprom590 = sext i32 %276 to i64
  %277 = load %struct.varray_head_tag*, %struct.varray_head_tag** @basic_block_for_insn, align 8
  %data591 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %277, i32 0, i32 4
  %bb592 = bitcast %union.varray_data_tag* %data591 to [1 x %struct.basic_block_def*]*
  %arrayidx593 = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %bb592, i32 0, i64 %idxprom590
  %278 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx593, align 8
  %index594 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %278, i32 0, i32 11
  %279 = load i32, i32* %index594, align 4
  %add595 = add nsw i32 %279, 0
  br label %cond.end.597

cond.false.596:                                   ; preds = %cond.true.573
  br label %cond.end.597

cond.end.597:                                     ; preds = %cond.false.596, %cond.true.584
  %cond598 = phi i32 [ %add595, %cond.true.584 ], [ -1, %cond.false.596 ]
  br label %cond.end.600

cond.false.599:                                   ; preds = %cond.true.569
  br label %cond.end.600

cond.end.600:                                     ; preds = %cond.false.599, %cond.end.597
  %cond601 = phi i32 [ %cond598, %cond.end.597 ], [ -1, %cond.false.599 ]
  br label %cond.end.632

cond.false.602:                                   ; preds = %cond.true.564
  %280 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %scan_start603 = getelementptr inbounds %struct.loop, %struct.loop* %280, i32 0, i32 29
  %281 = load %struct.rtx_def*, %struct.rtx_def** %scan_start603, align 8
  %tobool604 = icmp ne %struct.rtx_def* %281, null
  br i1 %tobool604, label %cond.true.605, label %cond.false.629

cond.true.605:                                    ; preds = %cond.false.602
  %282 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %scan_start606 = getelementptr inbounds %struct.loop, %struct.loop* %282, i32 0, i32 29
  %283 = load %struct.rtx_def*, %struct.rtx_def** %scan_start606, align 8
  %fld607 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %283, i32 0, i32 1
  %arrayidx608 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld607, i32 0, i64 0
  %rtint609 = bitcast %union.rtunion_def* %arrayidx608 to i32*
  %284 = load i32, i32* %rtint609, align 4
  %idxprom610 = sext i32 %284 to i64
  %285 = load %struct.varray_head_tag*, %struct.varray_head_tag** @basic_block_for_insn, align 8
  %data611 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %285, i32 0, i32 4
  %bb612 = bitcast %union.varray_data_tag* %data611 to [1 x %struct.basic_block_def*]*
  %arrayidx613 = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %bb612, i32 0, i64 %idxprom610
  %286 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx613, align 8
  %tobool614 = icmp ne %struct.basic_block_def* %286, null
  br i1 %tobool614, label %cond.true.615, label %cond.false.626

cond.true.615:                                    ; preds = %cond.true.605
  %287 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %scan_start616 = getelementptr inbounds %struct.loop, %struct.loop* %287, i32 0, i32 29
  %288 = load %struct.rtx_def*, %struct.rtx_def** %scan_start616, align 8
  %fld617 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %288, i32 0, i32 1
  %arrayidx618 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld617, i32 0, i64 0
  %rtint619 = bitcast %union.rtunion_def* %arrayidx618 to i32*
  %289 = load i32, i32* %rtint619, align 4
  %idxprom620 = sext i32 %289 to i64
  %290 = load %struct.varray_head_tag*, %struct.varray_head_tag** @basic_block_for_insn, align 8
  %data621 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %290, i32 0, i32 4
  %bb622 = bitcast %union.varray_data_tag* %data621 to [1 x %struct.basic_block_def*]*
  %arrayidx623 = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %bb622, i32 0, i64 %idxprom620
  %291 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx623, align 8
  %index624 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %291, i32 0, i32 11
  %292 = load i32, i32* %index624, align 4
  %add625 = add nsw i32 %292, 0
  br label %cond.end.627

cond.false.626:                                   ; preds = %cond.true.605
  br label %cond.end.627

cond.end.627:                                     ; preds = %cond.false.626, %cond.true.615
  %cond628 = phi i32 [ %add625, %cond.true.615 ], [ -1, %cond.false.626 ]
  br label %cond.end.630

cond.false.629:                                   ; preds = %cond.false.602
  br label %cond.end.630

cond.end.630:                                     ; preds = %cond.false.629, %cond.end.627
  %cond631 = phi i32 [ %cond628, %cond.end.627 ], [ -1, %cond.false.629 ]
  br label %cond.end.632

cond.end.632:                                     ; preds = %cond.end.630, %cond.end.600
  %cond633 = phi i32 [ %cond601, %cond.end.600 ], [ %cond631, %cond.end.630 ]
  br label %cond.end.635

cond.false.634:                                   ; preds = %cond.end.561
  br label %cond.end.635

cond.end.635:                                     ; preds = %cond.false.634, %cond.end.632
  %cond636 = phi i32 [ %cond633, %cond.end.632 ], [ -1, %cond.false.634 ]
  %293 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %scan_start637 = getelementptr inbounds %struct.loop, %struct.loop* %293, i32 0, i32 29
  %294 = load %struct.rtx_def*, %struct.rtx_def** %scan_start637, align 8
  %tobool638 = icmp ne %struct.rtx_def* %294, null
  br i1 %tobool638, label %cond.true.639, label %cond.false.644

cond.true.639:                                    ; preds = %cond.end.635
  %295 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %scan_start640 = getelementptr inbounds %struct.loop, %struct.loop* %295, i32 0, i32 29
  %296 = load %struct.rtx_def*, %struct.rtx_def** %scan_start640, align 8
  %fld641 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %296, i32 0, i32 1
  %arrayidx642 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld641, i32 0, i64 0
  %rtint643 = bitcast %union.rtunion_def* %arrayidx642 to i32*
  %297 = load i32, i32* %rtint643, align 4
  br label %cond.end.645

cond.false.644:                                   ; preds = %cond.end.635
  br label %cond.end.645

cond.end.645:                                     ; preds = %cond.false.644, %cond.true.639
  %cond646 = phi i32 [ %297, %cond.true.639 ], [ -1, %cond.false.644 ]
  %call647 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %225, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.101, i32 0, i32 0), i32 %cond552, i32 %cond562, i32 %cond636, i32 %cond646)
  %298 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %299 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %exit_count = getelementptr inbounds %struct.loop, %struct.loop* %299, i32 0, i32 32
  %300 = load i32, i32* %exit_count, align 4
  %call648 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %298, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.102, i32 0, i32 0), i32 %300)
  %301 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %exit_count649 = getelementptr inbounds %struct.loop, %struct.loop* %301, i32 0, i32 32
  %302 = load i32, i32* %exit_count649, align 4
  %tobool650 = icmp ne i32 %302, 0
  br i1 %tobool650, label %if.then.651, label %if.end.672

if.then.651:                                      ; preds = %cond.end.645
  %303 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call652 = call i32 @fputs(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.103, i32 0, i32 0), %struct._IO_FILE* %303)
  %304 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %exit_labels = getelementptr inbounds %struct.loop, %struct.loop* %304, i32 0, i32 31
  %305 = load %struct.rtx_def*, %struct.rtx_def** %exit_labels, align 8
  store %struct.rtx_def* %305, %struct.rtx_def** %label, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.651
  %306 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  %tobool653 = icmp ne %struct.rtx_def* %306, null
  br i1 %tobool653, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %307 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %308 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  %fld654 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %308, i32 0, i32 1
  %arrayidx655 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld654, i32 0, i64 0
  %rtx656 = bitcast %union.rtunion_def* %arrayidx655 to %struct.rtx_def**
  %309 = load %struct.rtx_def*, %struct.rtx_def** %rtx656, align 8
  %tobool657 = icmp ne %struct.rtx_def* %309, null
  br i1 %tobool657, label %cond.true.658, label %cond.false.665

cond.true.658:                                    ; preds = %for.body
  %310 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  %fld659 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %310, i32 0, i32 1
  %arrayidx660 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld659, i32 0, i64 0
  %rtx661 = bitcast %union.rtunion_def* %arrayidx660 to %struct.rtx_def**
  %311 = load %struct.rtx_def*, %struct.rtx_def** %rtx661, align 8
  %fld662 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %311, i32 0, i32 1
  %arrayidx663 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld662, i32 0, i64 0
  %rtint664 = bitcast %union.rtunion_def* %arrayidx663 to i32*
  %312 = load i32, i32* %rtint664, align 4
  br label %cond.end.666

cond.false.665:                                   ; preds = %for.body
  br label %cond.end.666

cond.end.666:                                     ; preds = %cond.false.665, %cond.true.658
  %cond667 = phi i32 [ %312, %cond.true.658 ], [ -1, %cond.false.665 ]
  %call668 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %307, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.104, i32 0, i32 0), i32 %cond667)
  br label %for.inc

for.inc:                                          ; preds = %cond.end.666
  %313 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  %fld669 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %313, i32 0, i32 1
  %arrayidx670 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld669, i32 0, i64 1
  %rtx671 = bitcast %union.rtunion_def* %arrayidx670 to %struct.rtx_def**
  %314 = load %struct.rtx_def*, %struct.rtx_def** %rtx671, align 8
  store %struct.rtx_def* %314, %struct.rtx_def** %label, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.672

if.end.672:                                       ; preds = %for.end, %cond.end.645
  %315 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call673 = call i32 @fputs(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.18, i32 0, i32 0), %struct._IO_FILE* %315)
  %316 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %cont674 = getelementptr inbounds %struct.loop, %struct.loop* %316, i32 0, i32 24
  %317 = load %struct.rtx_def*, %struct.rtx_def** %cont674, align 8
  %tobool675 = icmp ne %struct.rtx_def* %317, null
  br i1 %tobool675, label %cond.true.676, label %cond.false.746

cond.true.676:                                    ; preds = %if.end.672
  %318 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %cont677 = getelementptr inbounds %struct.loop, %struct.loop* %318, i32 0, i32 24
  %319 = load %struct.rtx_def*, %struct.rtx_def** %cont677, align 8
  %320 = bitcast %struct.rtx_def* %319 to i32*
  %bf.load678 = load i32, i32* %320, align 8
  %bf.clear679 = and i32 %bf.load678, 65535
  %cmp680 = icmp eq i32 %bf.clear679, 37
  br i1 %cmp680, label %cond.true.681, label %cond.false.714

cond.true.681:                                    ; preds = %cond.true.676
  %321 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %cont682 = getelementptr inbounds %struct.loop, %struct.loop* %321, i32 0, i32 24
  %322 = load %struct.rtx_def*, %struct.rtx_def** %cont682, align 8
  %call683 = call %struct.rtx_def* @next_nonnote_insn(%struct.rtx_def* %322)
  %tobool684 = icmp ne %struct.rtx_def* %call683, null
  br i1 %tobool684, label %cond.true.685, label %cond.false.711

cond.true.685:                                    ; preds = %cond.true.681
  %323 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %cont686 = getelementptr inbounds %struct.loop, %struct.loop* %323, i32 0, i32 24
  %324 = load %struct.rtx_def*, %struct.rtx_def** %cont686, align 8
  %call687 = call %struct.rtx_def* @next_nonnote_insn(%struct.rtx_def* %324)
  %fld688 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %call687, i32 0, i32 1
  %arrayidx689 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld688, i32 0, i64 0
  %rtint690 = bitcast %union.rtunion_def* %arrayidx689 to i32*
  %325 = load i32, i32* %rtint690, align 4
  %idxprom691 = sext i32 %325 to i64
  %326 = load %struct.varray_head_tag*, %struct.varray_head_tag** @basic_block_for_insn, align 8
  %data692 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %326, i32 0, i32 4
  %bb693 = bitcast %union.varray_data_tag* %data692 to [1 x %struct.basic_block_def*]*
  %arrayidx694 = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %bb693, i32 0, i64 %idxprom691
  %327 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx694, align 8
  %tobool695 = icmp ne %struct.basic_block_def* %327, null
  br i1 %tobool695, label %cond.true.696, label %cond.false.708

cond.true.696:                                    ; preds = %cond.true.685
  %328 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %cont697 = getelementptr inbounds %struct.loop, %struct.loop* %328, i32 0, i32 24
  %329 = load %struct.rtx_def*, %struct.rtx_def** %cont697, align 8
  %call698 = call %struct.rtx_def* @next_nonnote_insn(%struct.rtx_def* %329)
  %fld699 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %call698, i32 0, i32 1
  %arrayidx700 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld699, i32 0, i64 0
  %rtint701 = bitcast %union.rtunion_def* %arrayidx700 to i32*
  %330 = load i32, i32* %rtint701, align 4
  %idxprom702 = sext i32 %330 to i64
  %331 = load %struct.varray_head_tag*, %struct.varray_head_tag** @basic_block_for_insn, align 8
  %data703 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %331, i32 0, i32 4
  %bb704 = bitcast %union.varray_data_tag* %data703 to [1 x %struct.basic_block_def*]*
  %arrayidx705 = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %bb704, i32 0, i64 %idxprom702
  %332 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx705, align 8
  %index706 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %332, i32 0, i32 11
  %333 = load i32, i32* %index706, align 4
  %add707 = add nsw i32 %333, 0
  br label %cond.end.709

cond.false.708:                                   ; preds = %cond.true.685
  br label %cond.end.709

cond.end.709:                                     ; preds = %cond.false.708, %cond.true.696
  %cond710 = phi i32 [ %add707, %cond.true.696 ], [ -1, %cond.false.708 ]
  br label %cond.end.712

cond.false.711:                                   ; preds = %cond.true.681
  br label %cond.end.712

cond.end.712:                                     ; preds = %cond.false.711, %cond.end.709
  %cond713 = phi i32 [ %cond710, %cond.end.709 ], [ -1, %cond.false.711 ]
  br label %cond.end.744

cond.false.714:                                   ; preds = %cond.true.676
  %334 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %cont715 = getelementptr inbounds %struct.loop, %struct.loop* %334, i32 0, i32 24
  %335 = load %struct.rtx_def*, %struct.rtx_def** %cont715, align 8
  %tobool716 = icmp ne %struct.rtx_def* %335, null
  br i1 %tobool716, label %cond.true.717, label %cond.false.741

cond.true.717:                                    ; preds = %cond.false.714
  %336 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %cont718 = getelementptr inbounds %struct.loop, %struct.loop* %336, i32 0, i32 24
  %337 = load %struct.rtx_def*, %struct.rtx_def** %cont718, align 8
  %fld719 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %337, i32 0, i32 1
  %arrayidx720 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld719, i32 0, i64 0
  %rtint721 = bitcast %union.rtunion_def* %arrayidx720 to i32*
  %338 = load i32, i32* %rtint721, align 4
  %idxprom722 = sext i32 %338 to i64
  %339 = load %struct.varray_head_tag*, %struct.varray_head_tag** @basic_block_for_insn, align 8
  %data723 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %339, i32 0, i32 4
  %bb724 = bitcast %union.varray_data_tag* %data723 to [1 x %struct.basic_block_def*]*
  %arrayidx725 = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %bb724, i32 0, i64 %idxprom722
  %340 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx725, align 8
  %tobool726 = icmp ne %struct.basic_block_def* %340, null
  br i1 %tobool726, label %cond.true.727, label %cond.false.738

cond.true.727:                                    ; preds = %cond.true.717
  %341 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %cont728 = getelementptr inbounds %struct.loop, %struct.loop* %341, i32 0, i32 24
  %342 = load %struct.rtx_def*, %struct.rtx_def** %cont728, align 8
  %fld729 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %342, i32 0, i32 1
  %arrayidx730 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld729, i32 0, i64 0
  %rtint731 = bitcast %union.rtunion_def* %arrayidx730 to i32*
  %343 = load i32, i32* %rtint731, align 4
  %idxprom732 = sext i32 %343 to i64
  %344 = load %struct.varray_head_tag*, %struct.varray_head_tag** @basic_block_for_insn, align 8
  %data733 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %344, i32 0, i32 4
  %bb734 = bitcast %union.varray_data_tag* %data733 to [1 x %struct.basic_block_def*]*
  %arrayidx735 = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %bb734, i32 0, i64 %idxprom732
  %345 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx735, align 8
  %index736 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %345, i32 0, i32 11
  %346 = load i32, i32* %index736, align 4
  %add737 = add nsw i32 %346, 0
  br label %cond.end.739

cond.false.738:                                   ; preds = %cond.true.717
  br label %cond.end.739

cond.end.739:                                     ; preds = %cond.false.738, %cond.true.727
  %cond740 = phi i32 [ %add737, %cond.true.727 ], [ -1, %cond.false.738 ]
  br label %cond.end.742

cond.false.741:                                   ; preds = %cond.false.714
  br label %cond.end.742

cond.end.742:                                     ; preds = %cond.false.741, %cond.end.739
  %cond743 = phi i32 [ %cond740, %cond.end.739 ], [ -1, %cond.false.741 ]
  br label %cond.end.744

cond.end.744:                                     ; preds = %cond.end.742, %cond.end.712
  %cond745 = phi i32 [ %cond713, %cond.end.712 ], [ %cond743, %cond.end.742 ]
  br label %cond.end.747

cond.false.746:                                   ; preds = %if.end.672
  br label %cond.end.747

cond.end.747:                                     ; preds = %cond.false.746, %cond.end.744
  %cond748 = phi i32 [ %cond745, %cond.end.744 ], [ -1, %cond.false.746 ]
  %347 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %latch = getelementptr inbounds %struct.loop, %struct.loop* %347, i32 0, i32 2
  %348 = load %struct.basic_block_def*, %struct.basic_block_def** %latch, align 8
  %index749 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %348, i32 0, i32 11
  %349 = load i32, i32* %index749, align 4
  %cmp750 = icmp ne i32 %cond748, %349
  br i1 %cmp750, label %if.then.751, label %if.end.753

if.then.751:                                      ; preds = %cond.end.747
  %350 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call752 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %350, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.105, i32 0, i32 0))
  br label %if.end.753

if.end.753:                                       ; preds = %if.then.751, %cond.end.747
  br label %if.end.754

if.end.754:                                       ; preds = %if.then, %if.end.753, %if.end.61
  ret void
}

; Function Attrs: nounwind uwtable
define void @debug_loops(%struct.loops* %loops) #0 {
entry:
  %loops.addr = alloca %struct.loops*, align 8
  store %struct.loops* %loops, %struct.loops** %loops.addr, align 8
  %0 = load %struct.loops*, %struct.loops** %loops.addr, align 8
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  call void @flow_loops_dump(%struct.loops* %0, %struct._IO_FILE* %1, void (%struct.loop*, %struct._IO_FILE*, i32)* @loop_dump_aux, i32 1)
  ret void
}

declare void @flow_loops_dump(%struct.loops*, %struct._IO_FILE*, void (%struct.loop*, %struct._IO_FILE*, i32)*, i32) #1

declare %struct.rtx_def* @emit_note_after(i32, %struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define internal void @prescan_loop(%struct.loop* %loop) #0 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %level = alloca i32, align 4
  %insn = alloca %struct.rtx_def*, align 8
  %loop_info = alloca %struct.loop_info*, align 8
  %start = alloca %struct.rtx_def*, align 8
  %end = alloca %struct.rtx_def*, align 8
  %exit_target = alloca %struct.rtx_def*, align 8
  %set = alloca %struct.rtx_def*, align 8
  %src = alloca %struct.rtx_def*, align 8
  %label1 = alloca %struct.rtx_def*, align 8
  %label2 = alloca %struct.rtx_def*, align 8
  %mem = alloca %struct.rtx_def*, align 8
  %mem189 = alloca %struct.rtx_def*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  store i32 1, i32* %level, align 4
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %aux = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 22
  %1 = load i8*, i8** %aux, align 8
  %2 = bitcast i8* %1 to %struct.loop_info*
  store %struct.loop_info* %2, %struct.loop_info** %loop_info, align 8
  %3 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %start1 = getelementptr inbounds %struct.loop, %struct.loop* %3, i32 0, i32 26
  %4 = load %struct.rtx_def*, %struct.rtx_def** %start1, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %start, align 8
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %end2 = getelementptr inbounds %struct.loop, %struct.loop* %5, i32 0, i32 27
  %6 = load %struct.rtx_def*, %struct.rtx_def** %end2, align 8
  store %struct.rtx_def* %6, %struct.rtx_def** %end, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %end, align 8
  %call = call %struct.rtx_def* @next_nonnote_insn(%struct.rtx_def* %7)
  store %struct.rtx_def* %call, %struct.rtx_def** %exit_target, align 8
  %8 = load i32, i32* @indirect_jump_in_function, align 4
  %9 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %has_indirect_jump = getelementptr inbounds %struct.loop_info, %struct.loop_info* %9, i32 0, i32 6
  store i32 %8, i32* %has_indirect_jump, align 4
  %10 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %pre_header_has_call = getelementptr inbounds %struct.loop_info, %struct.loop_info* %10, i32 0, i32 30
  store i32 0, i32* %pre_header_has_call, align 4
  %11 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %has_call = getelementptr inbounds %struct.loop_info, %struct.loop_info* %11, i32 0, i32 0
  store i32 0, i32* %has_call, align 4
  %12 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %has_nonconst_call = getelementptr inbounds %struct.loop_info, %struct.loop_info* %12, i32 0, i32 2
  store i32 0, i32* %has_nonconst_call, align 4
  %13 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %has_volatile = getelementptr inbounds %struct.loop_info, %struct.loop_info* %13, i32 0, i32 3
  store i32 0, i32* %has_volatile, align 4
  %14 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %has_tablejump = getelementptr inbounds %struct.loop_info, %struct.loop_info* %14, i32 0, i32 4
  store i32 0, i32* %has_tablejump, align 4
  %15 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %has_multiple_exit_targets = getelementptr inbounds %struct.loop_info, %struct.loop_info* %15, i32 0, i32 5
  store i32 0, i32* %has_multiple_exit_targets, align 4
  %16 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %level3 = getelementptr inbounds %struct.loop, %struct.loop* %16, i32 0, i32 16
  store i32 1, i32* %level3, align 4
  %17 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %unknown_address_altered = getelementptr inbounds %struct.loop_info, %struct.loop_info* %17, i32 0, i32 23
  store i32 0, i32* %unknown_address_altered, align 4
  %18 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %unknown_constant_address_altered = getelementptr inbounds %struct.loop_info, %struct.loop_info* %18, i32 0, i32 24
  store i32 0, i32* %unknown_constant_address_altered, align 4
  %19 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %store_mems = getelementptr inbounds %struct.loop_info, %struct.loop_info* %19, i32 0, i32 19
  store %struct.rtx_def* null, %struct.rtx_def** %store_mems, align 8
  %20 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %first_loop_store_insn = getelementptr inbounds %struct.loop_info, %struct.loop_info* %20, i32 0, i32 26
  store %struct.rtx_def* null, %struct.rtx_def** %first_loop_store_insn, align 8
  %21 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %mems_idx = getelementptr inbounds %struct.loop_info, %struct.loop_info* %21, i32 0, i32 21
  store i32 0, i32* %mems_idx, align 4
  %22 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %num_mem_sets = getelementptr inbounds %struct.loop_info, %struct.loop_info* %22, i32 0, i32 25
  store i32 0, i32* %num_mem_sets, align 4
  %23 = load %struct.rtx_def*, %struct.rtx_def** %start, align 8
  store %struct.rtx_def* %23, %struct.rtx_def** %insn, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %24 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %tobool = icmp ne %struct.rtx_def* %24, null
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %25 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %26 = bitcast %struct.rtx_def* %25 to i32*
  %bf.load = load i32, i32* %26, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp ne i32 %bf.clear, 36
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %27 = phi i1 [ false, %for.cond ], [ %cmp, %land.rhs ]
  br i1 %27, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %28 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %29 = bitcast %struct.rtx_def* %28 to i32*
  %bf.load4 = load i32, i32* %29, align 8
  %bf.clear5 = and i32 %bf.load4, 65535
  %cmp6 = icmp eq i32 %bf.clear5, 34
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %30 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %pre_header_has_call7 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %30, i32 0, i32 30
  store i32 1, i32* %pre_header_has_call7, align 4
  br label %for.end

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %31 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 1
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %32 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %32, %struct.rtx_def** %insn, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then, %land.end
  %33 = load %struct.rtx_def*, %struct.rtx_def** %start, align 8
  %fld8 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1
  %arrayidx9 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld8, i32 0, i64 2
  %rtx10 = bitcast %union.rtunion_def* %arrayidx9 to %struct.rtx_def**
  %34 = load %struct.rtx_def*, %struct.rtx_def** %rtx10, align 8
  store %struct.rtx_def* %34, %struct.rtx_def** %insn, align 8
  br label %for.cond.11

for.cond.11:                                      ; preds = %for.inc.146, %for.end
  %35 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %36 = load %struct.rtx_def*, %struct.rtx_def** %end, align 8
  %fld12 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %36, i32 0, i32 1
  %arrayidx13 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld12, i32 0, i64 2
  %rtx14 = bitcast %union.rtunion_def* %arrayidx13 to %struct.rtx_def**
  %37 = load %struct.rtx_def*, %struct.rtx_def** %rtx14, align 8
  %cmp15 = icmp ne %struct.rtx_def* %35, %37
  br i1 %cmp15, label %for.body.16, label %for.end.150

for.body.16:                                      ; preds = %for.cond.11
  %38 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %39 = bitcast %struct.rtx_def* %38 to i32*
  %bf.load17 = load i32, i32* %39, align 8
  %bf.clear18 = and i32 %bf.load17, 65535
  switch i32 %bf.clear18, label %sw.default [
    i32 37, label %sw.bb
    i32 34, label %sw.bb.32
    i32 33, label %sw.bb.51
    i32 32, label %sw.bb.101
  ]

sw.bb:                                            ; preds = %for.body.16
  %40 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld19 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %40, i32 0, i32 1
  %arrayidx20 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld19, i32 0, i64 4
  %rtint = bitcast %union.rtunion_def* %arrayidx20 to i32*
  %41 = load i32, i32* %rtint, align 4
  %cmp21 = icmp eq i32 %41, -96
  br i1 %cmp21, label %if.then.22, label %if.else

if.then.22:                                       ; preds = %sw.bb
  %42 = load i32, i32* %level, align 4
  %inc = add nsw i32 %42, 1
  store i32 %inc, i32* %level, align 4
  %43 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %level23 = getelementptr inbounds %struct.loop, %struct.loop* %43, i32 0, i32 16
  %44 = load i32, i32* %level23, align 4
  %inc24 = add nsw i32 %44, 1
  store i32 %inc24, i32* %level23, align 4
  br label %if.end.31

if.else:                                          ; preds = %sw.bb
  %45 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld25 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %45, i32 0, i32 1
  %arrayidx26 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld25, i32 0, i64 4
  %rtint27 = bitcast %union.rtunion_def* %arrayidx26 to i32*
  %46 = load i32, i32* %rtint27, align 4
  %cmp28 = icmp eq i32 %46, -95
  br i1 %cmp28, label %if.then.29, label %if.end.30

if.then.29:                                       ; preds = %if.else
  %47 = load i32, i32* %level, align 4
  %dec = add nsw i32 %47, -1
  store i32 %dec, i32* %level, align 4
  br label %if.end.30

if.end.30:                                        ; preds = %if.then.29, %if.else
  br label %if.end.31

if.end.31:                                        ; preds = %if.end.30, %if.then.22
  br label %sw.epilog

sw.bb.32:                                         ; preds = %for.body.16
  %48 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %49 = bitcast %struct.rtx_def* %48 to i32*
  %bf.load33 = load i32, i32* %49, align 8
  %bf.lshr = lshr i32 %bf.load33, 26
  %bf.clear34 = and i32 %bf.lshr, 1
  %tobool35 = icmp ne i32 %bf.clear34, 0
  br i1 %tobool35, label %if.else.39, label %if.then.36

if.then.36:                                       ; preds = %sw.bb.32
  %50 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %unknown_address_altered37 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %50, i32 0, i32 23
  store i32 1, i32* %unknown_address_altered37, align 4
  %51 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %has_nonconst_call38 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %51, i32 0, i32 2
  store i32 1, i32* %has_nonconst_call38, align 4
  br label %if.end.45

if.else.39:                                       ; preds = %sw.bb.32
  %52 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %call40 = call i32 @pure_call_p(%struct.rtx_def* %52)
  %tobool41 = icmp ne i32 %call40, 0
  br i1 %tobool41, label %if.then.42, label %if.end.44

if.then.42:                                       ; preds = %if.else.39
  %53 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %has_nonconst_call43 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %53, i32 0, i32 2
  store i32 1, i32* %has_nonconst_call43, align 4
  br label %if.end.44

if.end.44:                                        ; preds = %if.then.42, %if.else.39
  br label %if.end.45

if.end.45:                                        ; preds = %if.end.44, %if.then.36
  %54 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %has_call46 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %54, i32 0, i32 0
  store i32 1, i32* %has_call46, align 4
  %55 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %call47 = call zeroext i1 @can_throw_internal(%struct.rtx_def* %55)
  br i1 %call47, label %if.then.48, label %if.end.50

if.then.48:                                       ; preds = %if.end.45
  %56 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %has_multiple_exit_targets49 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %56, i32 0, i32 5
  store i32 1, i32* %has_multiple_exit_targets49, align 4
  br label %if.end.50

if.end.50:                                        ; preds = %if.then.48, %if.end.45
  br label %sw.epilog

sw.bb.51:                                         ; preds = %for.body.16
  %57 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %has_multiple_exit_targets52 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %57, i32 0, i32 5
  %58 = load i32, i32* %has_multiple_exit_targets52, align 4
  %tobool53 = icmp ne i32 %58, 0
  br i1 %tobool53, label %if.end.100, label %if.then.54

if.then.54:                                       ; preds = %sw.bb.51
  %59 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %call55 = call %struct.rtx_def* @pc_set(%struct.rtx_def* %59)
  store %struct.rtx_def* %call55, %struct.rtx_def** %set, align 8
  %60 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %tobool56 = icmp ne %struct.rtx_def* %60, null
  br i1 %tobool56, label %if.then.57, label %if.else.97

if.then.57:                                       ; preds = %if.then.54
  %61 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld58 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %61, i32 0, i32 1
  %arrayidx59 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld58, i32 0, i64 1
  %rtx60 = bitcast %union.rtunion_def* %arrayidx59 to %struct.rtx_def**
  %62 = load %struct.rtx_def*, %struct.rtx_def** %rtx60, align 8
  store %struct.rtx_def* %62, %struct.rtx_def** %src, align 8
  %63 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %64 = bitcast %struct.rtx_def* %63 to i32*
  %bf.load61 = load i32, i32* %64, align 8
  %bf.clear62 = and i32 %bf.load61, 65535
  %cmp63 = icmp eq i32 %bf.clear62, 72
  br i1 %cmp63, label %if.then.64, label %if.else.71

if.then.64:                                       ; preds = %if.then.57
  %65 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %fld65 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %65, i32 0, i32 1
  %arrayidx66 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld65, i32 0, i64 1
  %rtx67 = bitcast %union.rtunion_def* %arrayidx66 to %struct.rtx_def**
  %66 = load %struct.rtx_def*, %struct.rtx_def** %rtx67, align 8
  store %struct.rtx_def* %66, %struct.rtx_def** %label1, align 8
  %67 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %fld68 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %67, i32 0, i32 1
  %arrayidx69 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld68, i32 0, i64 2
  %rtx70 = bitcast %union.rtunion_def* %arrayidx69 to %struct.rtx_def**
  %68 = load %struct.rtx_def*, %struct.rtx_def** %rtx70, align 8
  store %struct.rtx_def* %68, %struct.rtx_def** %label2, align 8
  br label %if.end.72

if.else.71:                                       ; preds = %if.then.57
  %69 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  store %struct.rtx_def* %69, %struct.rtx_def** %label1, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %label2, align 8
  br label %if.end.72

if.end.72:                                        ; preds = %if.else.71, %if.then.64
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end.72
  %70 = load %struct.rtx_def*, %struct.rtx_def** %label1, align 8
  %tobool73 = icmp ne %struct.rtx_def* %70, null
  br i1 %tobool73, label %land.lhs.true, label %if.end.95

land.lhs.true:                                    ; preds = %do.body
  %71 = load %struct.rtx_def*, %struct.rtx_def** %label1, align 8
  %72 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 0), align 8
  %cmp74 = icmp ne %struct.rtx_def* %71, %72
  br i1 %cmp74, label %if.then.75, label %if.end.95

if.then.75:                                       ; preds = %land.lhs.true
  %73 = load %struct.rtx_def*, %struct.rtx_def** %label1, align 8
  %74 = bitcast %struct.rtx_def* %73 to i32*
  %bf.load76 = load i32, i32* %74, align 8
  %bf.clear77 = and i32 %bf.load76, 65535
  %cmp78 = icmp ne i32 %bf.clear77, 67
  br i1 %cmp78, label %if.then.79, label %if.else.81

if.then.79:                                       ; preds = %if.then.75
  %75 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %has_multiple_exit_targets80 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %75, i32 0, i32 5
  store i32 1, i32* %has_multiple_exit_targets80, align 4
  br label %do.end

if.else.81:                                       ; preds = %if.then.75
  %76 = load %struct.rtx_def*, %struct.rtx_def** %label1, align 8
  %fld82 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %76, i32 0, i32 1
  %arrayidx83 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld82, i32 0, i64 0
  %rtx84 = bitcast %union.rtunion_def* %arrayidx83 to %struct.rtx_def**
  %77 = load %struct.rtx_def*, %struct.rtx_def** %rtx84, align 8
  %78 = load %struct.rtx_def*, %struct.rtx_def** %exit_target, align 8
  %cmp85 = icmp ne %struct.rtx_def* %77, %78
  br i1 %cmp85, label %land.lhs.true.86, label %if.end.93

land.lhs.true.86:                                 ; preds = %if.else.81
  %79 = load %struct.rtx_def*, %struct.rtx_def** %label1, align 8
  %80 = bitcast %struct.rtx_def* %79 to i32*
  %bf.load87 = load i32, i32* %80, align 8
  %bf.lshr88 = lshr i32 %bf.load87, 28
  %bf.clear89 = and i32 %bf.lshr88, 1
  %tobool90 = icmp ne i32 %bf.clear89, 0
  br i1 %tobool90, label %if.then.91, label %if.end.93

if.then.91:                                       ; preds = %land.lhs.true.86
  %81 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %has_multiple_exit_targets92 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %81, i32 0, i32 5
  store i32 1, i32* %has_multiple_exit_targets92, align 4
  br label %do.end

if.end.93:                                        ; preds = %land.lhs.true.86, %if.else.81
  br label %if.end.94

if.end.94:                                        ; preds = %if.end.93
  br label %if.end.95

if.end.95:                                        ; preds = %if.end.94, %land.lhs.true, %do.body
  %82 = load %struct.rtx_def*, %struct.rtx_def** %label2, align 8
  store %struct.rtx_def* %82, %struct.rtx_def** %label1, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %label2, align 8
  br label %do.cond

do.cond:                                          ; preds = %if.end.95
  %83 = load %struct.rtx_def*, %struct.rtx_def** %label1, align 8
  %tobool96 = icmp ne %struct.rtx_def* %83, null
  br i1 %tobool96, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond, %if.then.91, %if.then.79
  br label %if.end.99

if.else.97:                                       ; preds = %if.then.54
  %84 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %has_multiple_exit_targets98 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %84, i32 0, i32 5
  store i32 1, i32* %has_multiple_exit_targets98, align 4
  br label %if.end.99

if.end.99:                                        ; preds = %if.else.97, %do.end
  br label %if.end.100

if.end.100:                                       ; preds = %if.end.99, %sw.bb.51
  br label %sw.bb.101

sw.bb.101:                                        ; preds = %for.body.16, %if.end.100
  %85 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld102 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %85, i32 0, i32 1
  %arrayidx103 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld102, i32 0, i64 3
  %rtx104 = bitcast %union.rtunion_def* %arrayidx103 to %struct.rtx_def**
  %86 = load %struct.rtx_def*, %struct.rtx_def** %rtx104, align 8
  %call105 = call i32 @volatile_refs_p(%struct.rtx_def* %86)
  %tobool106 = icmp ne i32 %call105, 0
  br i1 %tobool106, label %if.then.107, label %if.end.109

if.then.107:                                      ; preds = %sw.bb.101
  %87 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %has_volatile108 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %87, i32 0, i32 3
  store i32 1, i32* %has_volatile108, align 4
  br label %if.end.109

if.end.109:                                       ; preds = %if.then.107, %sw.bb.101
  %88 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %89 = bitcast %struct.rtx_def* %88 to i32*
  %bf.load110 = load i32, i32* %89, align 8
  %bf.clear111 = and i32 %bf.load110, 65535
  %cmp112 = icmp eq i32 %bf.clear111, 33
  br i1 %cmp112, label %land.lhs.true.113, label %if.end.128

land.lhs.true.113:                                ; preds = %if.end.109
  %90 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld114 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %90, i32 0, i32 1
  %arrayidx115 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld114, i32 0, i64 3
  %rtx116 = bitcast %union.rtunion_def* %arrayidx115 to %struct.rtx_def**
  %91 = load %struct.rtx_def*, %struct.rtx_def** %rtx116, align 8
  %92 = bitcast %struct.rtx_def* %91 to i32*
  %bf.load117 = load i32, i32* %92, align 8
  %bf.clear118 = and i32 %bf.load117, 65535
  %cmp119 = icmp eq i32 %bf.clear118, 45
  br i1 %cmp119, label %if.then.126, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.113
  %93 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld120 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %93, i32 0, i32 1
  %arrayidx121 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld120, i32 0, i64 3
  %rtx122 = bitcast %union.rtunion_def* %arrayidx121 to %struct.rtx_def**
  %94 = load %struct.rtx_def*, %struct.rtx_def** %rtx122, align 8
  %95 = bitcast %struct.rtx_def* %94 to i32*
  %bf.load123 = load i32, i32* %95, align 8
  %bf.clear124 = and i32 %bf.load123, 65535
  %cmp125 = icmp eq i32 %bf.clear124, 44
  br i1 %cmp125, label %if.then.126, label %if.end.128

if.then.126:                                      ; preds = %lor.lhs.false, %land.lhs.true.113
  %96 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %has_tablejump127 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %96, i32 0, i32 4
  store i32 1, i32* %has_tablejump127, align 4
  br label %if.end.128

if.end.128:                                       ; preds = %if.then.126, %lor.lhs.false, %if.end.109
  %97 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld129 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %97, i32 0, i32 1
  %arrayidx130 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld129, i32 0, i64 3
  %rtx131 = bitcast %union.rtunion_def* %arrayidx130 to %struct.rtx_def**
  %98 = load %struct.rtx_def*, %struct.rtx_def** %rtx131, align 8
  %99 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %100 = bitcast %struct.loop_info* %99 to i8*
  call void @note_stores(%struct.rtx_def* %98, void (%struct.rtx_def*, %struct.rtx_def*, i8*)* @note_addr_stored, i8* %100)
  %101 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %first_loop_store_insn132 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %101, i32 0, i32 26
  %102 = load %struct.rtx_def*, %struct.rtx_def** %first_loop_store_insn132, align 8
  %tobool133 = icmp ne %struct.rtx_def* %102, null
  br i1 %tobool133, label %if.end.139, label %land.lhs.true.134

land.lhs.true.134:                                ; preds = %if.end.128
  %103 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %store_mems135 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %103, i32 0, i32 19
  %104 = load %struct.rtx_def*, %struct.rtx_def** %store_mems135, align 8
  %tobool136 = icmp ne %struct.rtx_def* %104, null
  br i1 %tobool136, label %if.then.137, label %if.end.139

if.then.137:                                      ; preds = %land.lhs.true.134
  %105 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %106 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %first_loop_store_insn138 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %106, i32 0, i32 26
  store %struct.rtx_def* %105, %struct.rtx_def** %first_loop_store_insn138, align 8
  br label %if.end.139

if.end.139:                                       ; preds = %if.then.137, %land.lhs.true.134, %if.end.128
  %107 = load i32, i32* @flag_non_call_exceptions, align 4
  %tobool140 = icmp ne i32 %107, 0
  br i1 %tobool140, label %land.lhs.true.141, label %if.end.145

land.lhs.true.141:                                ; preds = %if.end.139
  %108 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %call142 = call zeroext i1 @can_throw_internal(%struct.rtx_def* %108)
  br i1 %call142, label %if.then.143, label %if.end.145

if.then.143:                                      ; preds = %land.lhs.true.141
  %109 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %has_multiple_exit_targets144 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %109, i32 0, i32 5
  store i32 1, i32* %has_multiple_exit_targets144, align 4
  br label %if.end.145

if.end.145:                                       ; preds = %if.then.143, %land.lhs.true.141, %if.end.139
  br label %sw.epilog

sw.default:                                       ; preds = %for.body.16
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %if.end.145, %if.end.50, %if.end.31
  br label %for.inc.146

for.inc.146:                                      ; preds = %sw.epilog
  %110 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld147 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %110, i32 0, i32 1
  %arrayidx148 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld147, i32 0, i64 2
  %rtx149 = bitcast %union.rtunion_def* %arrayidx148 to %struct.rtx_def**
  %111 = load %struct.rtx_def*, %struct.rtx_def** %rtx149, align 8
  store %struct.rtx_def* %111, %struct.rtx_def** %insn, align 8
  br label %for.cond.11

for.end.150:                                      ; preds = %for.cond.11
  %112 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %has_nonconst_call151 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %112, i32 0, i32 2
  %113 = load i32, i32* %has_nonconst_call151, align 4
  %tobool152 = icmp ne i32 %113, 0
  br i1 %tobool152, label %if.end.177, label %land.lhs.true.153

land.lhs.true.153:                                ; preds = %for.end.150
  %114 = load %struct.function*, %struct.function** @cfun, align 8
  %calls_alloca = getelementptr inbounds %struct.function, %struct.function* %114, i32 0, i32 56
  %115 = bitcast i24* %calls_alloca to i32*
  %bf.load154 = load i32, i32* %115, align 8
  %bf.lshr155 = lshr i32 %bf.load154, 6
  %bf.clear156 = and i32 %bf.lshr155, 1
  %tobool157 = icmp ne i32 %bf.clear156, 0
  br i1 %tobool157, label %if.end.177, label %land.lhs.true.158

land.lhs.true.158:                                ; preds = %land.lhs.true.153
  %116 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %has_multiple_exit_targets159 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %116, i32 0, i32 5
  %117 = load i32, i32* %has_multiple_exit_targets159, align 4
  %tobool160 = icmp ne i32 %117, 0
  br i1 %tobool160, label %if.end.177, label %if.then.161

if.then.161:                                      ; preds = %land.lhs.true.158
  %118 = load %struct.rtx_def*, %struct.rtx_def** %start, align 8
  %fld162 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %118, i32 0, i32 1
  %arrayidx163 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld162, i32 0, i64 2
  %rtx164 = bitcast %union.rtunion_def* %arrayidx163 to %struct.rtx_def**
  %119 = load %struct.rtx_def*, %struct.rtx_def** %rtx164, align 8
  store %struct.rtx_def* %119, %struct.rtx_def** %insn, align 8
  br label %for.cond.165

for.cond.165:                                     ; preds = %for.inc.172, %if.then.161
  %120 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %121 = load %struct.rtx_def*, %struct.rtx_def** %end, align 8
  %fld166 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %121, i32 0, i32 1
  %arrayidx167 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld166, i32 0, i64 2
  %rtx168 = bitcast %union.rtunion_def* %arrayidx167 to %struct.rtx_def**
  %122 = load %struct.rtx_def*, %struct.rtx_def** %rtx168, align 8
  %cmp169 = icmp ne %struct.rtx_def* %120, %122
  br i1 %cmp169, label %for.body.170, label %for.end.176

for.body.170:                                     ; preds = %for.cond.165
  %123 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %124 = bitcast %struct.loop_info* %123 to i8*
  %call171 = call i32 @for_each_rtx(%struct.rtx_def** %insn, i32 (%struct.rtx_def**, i8*)* @insert_loop_mem, i8* %124)
  br label %for.inc.172

for.inc.172:                                      ; preds = %for.body.170
  %125 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld173 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %125, i32 0, i32 1
  %arrayidx174 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld173, i32 0, i64 2
  %rtx175 = bitcast %union.rtunion_def* %arrayidx174 to %struct.rtx_def**
  %126 = load %struct.rtx_def*, %struct.rtx_def** %rtx175, align 8
  store %struct.rtx_def* %126, %struct.rtx_def** %insn, align 8
  br label %for.cond.165

for.end.176:                                      ; preds = %for.cond.165
  br label %if.end.177

if.end.177:                                       ; preds = %for.end.176, %land.lhs.true.158, %land.lhs.true.153, %for.end.150
  %127 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %unknown_address_altered178 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %127, i32 0, i32 23
  %128 = load i32, i32* %unknown_address_altered178, align 4
  %tobool179 = icmp ne i32 %128, 0
  br i1 %tobool179, label %if.then.180, label %if.end.185

if.then.180:                                      ; preds = %if.end.177
  %129 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call181 = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %129)
  store %struct.rtx_def* %call181, %struct.rtx_def** %mem, align 8
  %130 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8
  %131 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %store_mems182 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %131, i32 0, i32 19
  %132 = load %struct.rtx_def*, %struct.rtx_def** %store_mems182, align 8
  %call183 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 0, %struct.rtx_def* %130, %struct.rtx_def* %132)
  %133 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %store_mems184 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %133, i32 0, i32 19
  store %struct.rtx_def* %call183, %struct.rtx_def** %store_mems184, align 8
  br label %if.end.185

if.end.185:                                       ; preds = %if.then.180, %if.end.177
  %134 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %unknown_constant_address_altered186 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %134, i32 0, i32 24
  %135 = load i32, i32* %unknown_constant_address_altered186, align 4
  %tobool187 = icmp ne i32 %135, 0
  br i1 %tobool187, label %if.then.188, label %if.end.196

if.then.188:                                      ; preds = %if.end.185
  %136 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call190 = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %136)
  store %struct.rtx_def* %call190, %struct.rtx_def** %mem189, align 8
  %137 = load %struct.rtx_def*, %struct.rtx_def** %mem189, align 8
  %138 = bitcast %struct.rtx_def* %137 to i32*
  %bf.load191 = load i32, i32* %138, align 8
  %bf.clear192 = and i32 %bf.load191, -67108865
  %bf.set = or i32 %bf.clear192, 67108864
  store i32 %bf.set, i32* %138, align 8
  %139 = load %struct.rtx_def*, %struct.rtx_def** %mem189, align 8
  %140 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %store_mems193 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %140, i32 0, i32 19
  %141 = load %struct.rtx_def*, %struct.rtx_def** %store_mems193, align 8
  %call194 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 0, %struct.rtx_def* %139, %struct.rtx_def* %141)
  %142 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %store_mems195 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %142, i32 0, i32 19
  store %struct.rtx_def* %call194, %struct.rtx_def** %store_mems195, align 8
  br label %if.end.196

if.end.196:                                       ; preds = %if.then.188, %if.end.185
  ret void
}

declare %struct.rtx_def* @next_label(%struct.rtx_def*) #1

declare i32 @fprintf(%struct._IO_FILE*, i8*, ...) #1

; Function Attrs: nounwind uwtable
define internal void @loop_regs_scan(%struct.loop* %loop, i32 %extra_size) #0 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %extra_size.addr = alloca i32, align 4
  %regs = alloca %struct.loop_regs*, align 8
  %old_nregs = alloca i32, align 4
  %last_set = alloca %struct.rtx_def**, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  %i72 = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  store i32 %extra_size, i32* %extra_size.addr, align 4
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %aux = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 22
  %1 = load i8*, i8** %aux, align 8
  %2 = bitcast i8* %1 to %struct.loop_info*
  %regs1 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %2, i32 0, i32 28
  store %struct.loop_regs* %regs1, %struct.loop_regs** %regs, align 8
  %3 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %num = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %3, i32 0, i32 0
  %4 = load i32, i32* %num, align 4
  store i32 %4, i32* %old_nregs, align 4
  %call = call i32 @max_reg_num()
  %5 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %num2 = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %5, i32 0, i32 0
  store i32 %call, i32* %num2, align 4
  %6 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %num3 = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %6, i32 0, i32 0
  %7 = load i32, i32* %num3, align 4
  %8 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %size = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %8, i32 0, i32 1
  %9 = load i32, i32* %size, align 4
  %cmp = icmp sge i32 %7, %9
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %10 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %num4 = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %10, i32 0, i32 0
  %11 = load i32, i32* %num4, align 4
  %12 = load i32, i32* %extra_size.addr, align 4
  %add = add nsw i32 %11, %12
  %13 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %size5 = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %13, i32 0, i32 1
  store i32 %add, i32* %size5, align 4
  %14 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %array = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %14, i32 0, i32 2
  %15 = load %struct.loop_reg*, %struct.loop_reg** %array, align 8
  %16 = bitcast %struct.loop_reg* %15 to i8*
  %17 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %size6 = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %17, i32 0, i32 1
  %18 = load i32, i32* %size6, align 4
  %conv = sext i32 %18 to i64
  %mul = mul i64 %conv, 24
  %call7 = call i8* @xrealloc(i8* %16, i64 %mul)
  %19 = bitcast i8* %call7 to %struct.loop_reg*
  %20 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %array8 = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %20, i32 0, i32 2
  store %struct.loop_reg* %19, %struct.loop_reg** %array8, align 8
  %21 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %array9 = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %21, i32 0, i32 2
  %22 = load %struct.loop_reg*, %struct.loop_reg** %array9, align 8
  %23 = load i32, i32* %old_nregs, align 4
  %idx.ext = sext i32 %23 to i64
  %add.ptr = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %22, i64 %idx.ext
  %24 = bitcast %struct.loop_reg* %add.ptr to i8*
  %25 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %size10 = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %25, i32 0, i32 1
  %26 = load i32, i32* %size10, align 4
  %27 = load i32, i32* %old_nregs, align 4
  %sub = sub nsw i32 %26, %27
  %conv11 = sext i32 %sub to i64
  %mul12 = mul i64 %conv11, 24
  call void @llvm.memset.p0i8.i64(i8* %24, i8 0, i64 %mul12, i32 8, i1 false)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %28 = load i32, i32* %i, align 4
  %29 = load i32, i32* %old_nregs, align 4
  %cmp13 = icmp slt i32 %28, %29
  br i1 %cmp13, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %30 = load i32, i32* %i, align 4
  %idxprom = sext i32 %30 to i64
  %31 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %array15 = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %31, i32 0, i32 2
  %32 = load %struct.loop_reg*, %struct.loop_reg** %array15, align 8
  %arrayidx = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %32, i64 %idxprom
  %set_in_loop = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %arrayidx, i32 0, i32 0
  store i32 0, i32* %set_in_loop, align 4
  %33 = load i32, i32* %i, align 4
  %idxprom16 = sext i32 %33 to i64
  %34 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %array17 = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %34, i32 0, i32 2
  %35 = load %struct.loop_reg*, %struct.loop_reg** %array17, align 8
  %arrayidx18 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %35, i64 %idxprom16
  %may_not_optimize = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %arrayidx18, i32 0, i32 3
  store i8 0, i8* %may_not_optimize, align 1
  %36 = load i32, i32* %i, align 4
  %idxprom19 = sext i32 %36 to i64
  %37 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %array20 = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %37, i32 0, i32 2
  %38 = load %struct.loop_reg*, %struct.loop_reg** %array20, align 8
  %arrayidx21 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %38, i64 %idxprom19
  %single_usage = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %arrayidx21, i32 0, i32 2
  store %struct.rtx_def* null, %struct.rtx_def** %single_usage, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %39 = load i32, i32* %i, align 4
  %inc = add nsw i32 %39, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %40 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %num22 = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %40, i32 0, i32 0
  %41 = load i32, i32* %num22, align 4
  %conv23 = sext i32 %41 to i64
  %call24 = call noalias i8* @xcalloc(i64 %conv23, i64 8)
  %42 = bitcast i8* %call24 to %struct.rtx_def**
  store %struct.rtx_def** %42, %struct.rtx_def*** %last_set, align 8
  %43 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %top = getelementptr inbounds %struct.loop, %struct.loop* %43, i32 0, i32 28
  %44 = load %struct.rtx_def*, %struct.rtx_def** %top, align 8
  %tobool = icmp ne %struct.rtx_def* %44, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.end
  %45 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %top25 = getelementptr inbounds %struct.loop, %struct.loop* %45, i32 0, i32 28
  %46 = load %struct.rtx_def*, %struct.rtx_def** %top25, align 8
  br label %cond.end

cond.false:                                       ; preds = %for.end
  %47 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %start = getelementptr inbounds %struct.loop, %struct.loop* %47, i32 0, i32 26
  %48 = load %struct.rtx_def*, %struct.rtx_def** %start, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %46, %cond.true ], [ %48, %cond.false ]
  store %struct.rtx_def* %cond, %struct.rtx_def** %insn, align 8
  br label %for.cond.26

for.cond.26:                                      ; preds = %for.inc.110, %cond.end
  %49 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %50 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %end = getelementptr inbounds %struct.loop, %struct.loop* %50, i32 0, i32 27
  %51 = load %struct.rtx_def*, %struct.rtx_def** %end, align 8
  %cmp27 = icmp ne %struct.rtx_def* %49, %51
  br i1 %cmp27, label %for.body.29, label %for.end.114

for.body.29:                                      ; preds = %for.cond.26
  %52 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %53 = bitcast %struct.rtx_def* %52 to i32*
  %bf.load = load i32, i32* %53, align 8
  %bf.clear = and i32 %bf.load, 65535
  %idxprom30 = sext i32 %bf.clear to i64
  %arrayidx31 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom30
  %54 = load i8, i8* %arrayidx31, align 1
  %conv32 = sext i8 %54 to i32
  %cmp33 = icmp eq i32 %conv32, 105
  br i1 %cmp33, label %if.then.35, label %if.end.95

if.then.35:                                       ; preds = %for.body.29
  %55 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %56 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %57 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %57, i32 0, i32 1
  %arrayidx36 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx36 to %struct.rtx_def**
  %58 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  call void @find_single_use_in_loop(%struct.loop_regs* %55, %struct.rtx_def* %56, %struct.rtx_def* %58)
  %59 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld37 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %59, i32 0, i32 1
  %arrayidx38 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld37, i32 0, i64 6
  %rtx39 = bitcast %union.rtunion_def* %arrayidx38 to %struct.rtx_def**
  %60 = load %struct.rtx_def*, %struct.rtx_def** %rtx39, align 8
  %tobool40 = icmp ne %struct.rtx_def* %60, null
  br i1 %tobool40, label %if.then.41, label %if.end.45

if.then.41:                                       ; preds = %if.then.35
  %61 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %62 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %63 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld42 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %63, i32 0, i32 1
  %arrayidx43 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld42, i32 0, i64 6
  %rtx44 = bitcast %union.rtunion_def* %arrayidx43 to %struct.rtx_def**
  %64 = load %struct.rtx_def*, %struct.rtx_def** %rtx44, align 8
  call void @find_single_use_in_loop(%struct.loop_regs* %61, %struct.rtx_def* %62, %struct.rtx_def* %64)
  br label %if.end.45

if.end.45:                                        ; preds = %if.then.41, %if.then.35
  %65 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld46 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %65, i32 0, i32 1
  %arrayidx47 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld46, i32 0, i64 3
  %rtx48 = bitcast %union.rtunion_def* %arrayidx47 to %struct.rtx_def**
  %66 = load %struct.rtx_def*, %struct.rtx_def** %rtx48, align 8
  %67 = bitcast %struct.rtx_def* %66 to i32*
  %bf.load49 = load i32, i32* %67, align 8
  %bf.clear50 = and i32 %bf.load49, 65535
  %cmp51 = icmp eq i32 %bf.clear50, 47
  br i1 %cmp51, label %if.then.60, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.45
  %68 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld53 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %68, i32 0, i32 1
  %arrayidx54 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld53, i32 0, i64 3
  %rtx55 = bitcast %union.rtunion_def* %arrayidx54 to %struct.rtx_def**
  %69 = load %struct.rtx_def*, %struct.rtx_def** %rtx55, align 8
  %70 = bitcast %struct.rtx_def* %69 to i32*
  %bf.load56 = load i32, i32* %70, align 8
  %bf.clear57 = and i32 %bf.load56, 65535
  %cmp58 = icmp eq i32 %bf.clear57, 49
  br i1 %cmp58, label %if.then.60, label %if.else

if.then.60:                                       ; preds = %lor.lhs.false, %if.end.45
  %71 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %72 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %73 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld61 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %73, i32 0, i32 1
  %arrayidx62 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld61, i32 0, i64 3
  %rtx63 = bitcast %union.rtunion_def* %arrayidx62 to %struct.rtx_def**
  %74 = load %struct.rtx_def*, %struct.rtx_def** %rtx63, align 8
  %75 = load %struct.rtx_def**, %struct.rtx_def*** %last_set, align 8
  call void @count_one_set(%struct.loop_regs* %71, %struct.rtx_def* %72, %struct.rtx_def* %74, %struct.rtx_def** %75)
  br label %if.end.94

if.else:                                          ; preds = %lor.lhs.false
  %76 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld64 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %76, i32 0, i32 1
  %arrayidx65 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld64, i32 0, i64 3
  %rtx66 = bitcast %union.rtunion_def* %arrayidx65 to %struct.rtx_def**
  %77 = load %struct.rtx_def*, %struct.rtx_def** %rtx66, align 8
  %78 = bitcast %struct.rtx_def* %77 to i32*
  %bf.load67 = load i32, i32* %78, align 8
  %bf.clear68 = and i32 %bf.load67, 65535
  %cmp69 = icmp eq i32 %bf.clear68, 39
  br i1 %cmp69, label %if.then.71, label %if.end.93

if.then.71:                                       ; preds = %if.else
  %79 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld73 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %79, i32 0, i32 1
  %arrayidx74 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld73, i32 0, i64 3
  %rtx75 = bitcast %union.rtunion_def* %arrayidx74 to %struct.rtx_def**
  %80 = load %struct.rtx_def*, %struct.rtx_def** %rtx75, align 8
  %fld76 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %80, i32 0, i32 1
  %arrayidx77 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld76, i32 0, i64 0
  %rtvec = bitcast %union.rtunion_def* %arrayidx77 to %struct.rtvec_def**
  %81 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec, align 8
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %81, i32 0, i32 0
  %82 = load i32, i32* %num_elem, align 4
  %sub78 = sub nsw i32 %82, 1
  store i32 %sub78, i32* %i72, align 4
  br label %for.cond.79

for.cond.79:                                      ; preds = %for.inc.91, %if.then.71
  %83 = load i32, i32* %i72, align 4
  %cmp80 = icmp sge i32 %83, 0
  br i1 %cmp80, label %for.body.82, label %for.end.92

for.body.82:                                      ; preds = %for.cond.79
  %84 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %85 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %86 = load i32, i32* %i72, align 4
  %idxprom83 = sext i32 %86 to i64
  %87 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld84 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %87, i32 0, i32 1
  %arrayidx85 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld84, i32 0, i64 3
  %rtx86 = bitcast %union.rtunion_def* %arrayidx85 to %struct.rtx_def**
  %88 = load %struct.rtx_def*, %struct.rtx_def** %rtx86, align 8
  %fld87 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %88, i32 0, i32 1
  %arrayidx88 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld87, i32 0, i64 0
  %rtvec89 = bitcast %union.rtunion_def* %arrayidx88 to %struct.rtvec_def**
  %89 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec89, align 8
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %89, i32 0, i32 1
  %arrayidx90 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i32 0, i64 %idxprom83
  %90 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx90, align 8
  %91 = load %struct.rtx_def**, %struct.rtx_def*** %last_set, align 8
  call void @count_one_set(%struct.loop_regs* %84, %struct.rtx_def* %85, %struct.rtx_def* %90, %struct.rtx_def** %91)
  br label %for.inc.91

for.inc.91:                                       ; preds = %for.body.82
  %92 = load i32, i32* %i72, align 4
  %dec = add nsw i32 %92, -1
  store i32 %dec, i32* %i72, align 4
  br label %for.cond.79

for.end.92:                                       ; preds = %for.cond.79
  br label %if.end.93

if.end.93:                                        ; preds = %for.end.92, %if.else
  br label %if.end.94

if.end.94:                                        ; preds = %if.end.93, %if.then.60
  br label %if.end.95

if.end.95:                                        ; preds = %if.end.94, %for.body.29
  %93 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %94 = bitcast %struct.rtx_def* %93 to i32*
  %bf.load96 = load i32, i32* %94, align 8
  %bf.clear97 = and i32 %bf.load96, 65535
  %cmp98 = icmp eq i32 %bf.clear97, 36
  br i1 %cmp98, label %if.then.105, label %lor.lhs.false.100

lor.lhs.false.100:                                ; preds = %if.end.95
  %95 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %96 = bitcast %struct.rtx_def* %95 to i32*
  %bf.load101 = load i32, i32* %96, align 8
  %bf.clear102 = and i32 %bf.load101, 65535
  %cmp103 = icmp eq i32 %bf.clear102, 33
  br i1 %cmp103, label %if.then.105, label %if.end.109

if.then.105:                                      ; preds = %lor.lhs.false.100, %if.end.95
  %97 = load %struct.rtx_def**, %struct.rtx_def*** %last_set, align 8
  %98 = bitcast %struct.rtx_def** %97 to i8*
  %99 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %num106 = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %99, i32 0, i32 0
  %100 = load i32, i32* %num106, align 4
  %conv107 = sext i32 %100 to i64
  %mul108 = mul i64 %conv107, 8
  call void @llvm.memset.p0i8.i64(i8* %98, i8 0, i64 %mul108, i32 8, i1 false)
  br label %if.end.109

if.end.109:                                       ; preds = %if.then.105, %lor.lhs.false.100
  br label %for.inc.110

for.inc.110:                                      ; preds = %if.end.109
  %101 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld111 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %101, i32 0, i32 1
  %arrayidx112 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld111, i32 0, i64 2
  %rtx113 = bitcast %union.rtunion_def* %arrayidx112 to %struct.rtx_def**
  %102 = load %struct.rtx_def*, %struct.rtx_def** %rtx113, align 8
  store %struct.rtx_def* %102, %struct.rtx_def** %insn, align 8
  br label %for.cond.26

for.end.114:                                      ; preds = %for.cond.26
  %103 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %aux115 = getelementptr inbounds %struct.loop, %struct.loop* %103, i32 0, i32 22
  %104 = load i8*, i8** %aux115, align 8
  %105 = bitcast i8* %104 to %struct.loop_info*
  %has_call = getelementptr inbounds %struct.loop_info, %struct.loop_info* %105, i32 0, i32 0
  %106 = load i32, i32* %has_call, align 4
  %tobool116 = icmp ne i32 %106, 0
  br i1 %tobool116, label %if.then.117, label %if.end.142

if.then.117:                                      ; preds = %for.end.114
  store i32 0, i32* %i, align 4
  br label %for.cond.118

for.cond.118:                                     ; preds = %for.inc.139, %if.then.117
  %107 = load i32, i32* %i, align 4
  %cmp119 = icmp slt i32 %107, 53
  br i1 %cmp119, label %for.body.121, label %for.end.141

for.body.121:                                     ; preds = %for.cond.118
  %108 = load i64, i64* @regs_invalidated_by_call, align 8
  %109 = load i32, i32* %i, align 4
  %sh_prom = zext i32 %109 to i64
  %shl = shl i64 1, %sh_prom
  %and = and i64 %108, %shl
  %tobool122 = icmp ne i64 %and, 0
  br i1 %tobool122, label %land.lhs.true, label %if.end.138

land.lhs.true:                                    ; preds = %for.body.121
  %110 = load i32, i32* @target_flags, align 4
  %and123 = and i32 %110, 33554432
  %tobool124 = icmp ne i32 %and123, 0
  %cond125 = select i1 %tobool124, i32 5, i32 4
  %111 = load i32, i32* %i, align 4
  %call126 = call %struct.rtx_def* @gen_rtx_REG(i32 %cond125, i32 %111)
  %call127 = call i32 @rtx_varies_p(%struct.rtx_def* %call126, i32 1)
  %tobool128 = icmp ne i32 %call127, 0
  br i1 %tobool128, label %if.then.129, label %if.end.138

if.then.129:                                      ; preds = %land.lhs.true
  %112 = load i32, i32* %i, align 4
  %idxprom130 = sext i32 %112 to i64
  %113 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %array131 = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %113, i32 0, i32 2
  %114 = load %struct.loop_reg*, %struct.loop_reg** %array131, align 8
  %arrayidx132 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %114, i64 %idxprom130
  %may_not_optimize133 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %arrayidx132, i32 0, i32 3
  store i8 1, i8* %may_not_optimize133, align 1
  %115 = load i32, i32* %i, align 4
  %idxprom134 = sext i32 %115 to i64
  %116 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %array135 = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %116, i32 0, i32 2
  %117 = load %struct.loop_reg*, %struct.loop_reg** %array135, align 8
  %arrayidx136 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %117, i64 %idxprom134
  %set_in_loop137 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %arrayidx136, i32 0, i32 0
  store i32 1, i32* %set_in_loop137, align 4
  br label %if.end.138

if.end.138:                                       ; preds = %if.then.129, %land.lhs.true, %for.body.121
  br label %for.inc.139

for.inc.139:                                      ; preds = %if.end.138
  %118 = load i32, i32* %i, align 4
  %inc140 = add nsw i32 %118, 1
  store i32 %inc140, i32* %i, align 4
  br label %for.cond.118

for.end.141:                                      ; preds = %for.cond.118
  br label %if.end.142

if.end.142:                                       ; preds = %for.end.141, %for.end.114
  %119 = load i32, i32* %old_nregs, align 4
  store i32 %119, i32* %i, align 4
  br label %for.cond.143

for.cond.143:                                     ; preds = %for.inc.155, %if.end.142
  %120 = load i32, i32* %i, align 4
  %121 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %num144 = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %121, i32 0, i32 0
  %122 = load i32, i32* %num144, align 4
  %cmp145 = icmp slt i32 %120, %122
  br i1 %cmp145, label %for.body.147, label %for.end.157

for.body.147:                                     ; preds = %for.cond.143
  %123 = load i32, i32* %i, align 4
  %idxprom148 = sext i32 %123 to i64
  %124 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %array149 = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %124, i32 0, i32 2
  %125 = load %struct.loop_reg*, %struct.loop_reg** %array149, align 8
  %arrayidx150 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %125, i64 %idxprom148
  %set_in_loop151 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %arrayidx150, i32 0, i32 0
  %126 = load i32, i32* %set_in_loop151, align 4
  %127 = load i32, i32* %i, align 4
  %idxprom152 = sext i32 %127 to i64
  %128 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %array153 = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %128, i32 0, i32 2
  %129 = load %struct.loop_reg*, %struct.loop_reg** %array153, align 8
  %arrayidx154 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %129, i64 %idxprom152
  %n_times_set = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %arrayidx154, i32 0, i32 1
  store i32 %126, i32* %n_times_set, align 4
  br label %for.inc.155

for.inc.155:                                      ; preds = %for.body.147
  %130 = load i32, i32* %i, align 4
  %inc156 = add nsw i32 %130, 1
  store i32 %inc156, i32* %i, align 4
  br label %for.cond.143

for.end.157:                                      ; preds = %for.cond.143
  %131 = load %struct.rtx_def**, %struct.rtx_def*** %last_set, align 8
  %132 = bitcast %struct.rtx_def** %131 to i8*
  call void @free(i8* %132) #4
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @count_insns_in_loop(%struct.loop* %loop) #0 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %count = alloca i32, align 4
  %insn = alloca %struct.rtx_def*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  store i32 0, i32* %count, align 4
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %top = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 28
  %1 = load %struct.rtx_def*, %struct.rtx_def** %top, align 8
  %tobool = icmp ne %struct.rtx_def* %1, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %top1 = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 28
  %3 = load %struct.rtx_def*, %struct.rtx_def** %top1, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %4 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %start = getelementptr inbounds %struct.loop, %struct.loop* %4, i32 0, i32 26
  %5 = load %struct.rtx_def*, %struct.rtx_def** %start, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %3, %cond.true ], [ %5, %cond.false ]
  store %struct.rtx_def* %cond, %struct.rtx_def** %insn, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %cond.end
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %7 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %end = getelementptr inbounds %struct.loop, %struct.loop* %7, i32 0, i32 27
  %8 = load %struct.rtx_def*, %struct.rtx_def** %end, align 8
  %cmp = icmp ne %struct.rtx_def* %6, %8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %10 = bitcast %struct.rtx_def* %9 to i32*
  %bf.load = load i32, i32* %10, align 8
  %bf.clear = and i32 %bf.load, 65535
  %idxprom = sext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom
  %11 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %11 to i32
  %cmp2 = icmp eq i32 %conv, 105
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %12 = load i32, i32* %count, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %count, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1
  %arrayidx4 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 2
  %rtx = bitcast %union.rtunion_def* %arrayidx4 to %struct.rtx_def**
  %14 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %14, %struct.rtx_def** %insn, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load i32, i32* %count, align 4
  ret i32 %15
}

declare %struct.rtx_def* @single_set_2(%struct.rtx_def*, %struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define internal i32 @reg_in_basic_block_p(%struct.rtx_def* %insn, %struct.rtx_def* %reg) #0 {
entry:
  %retval = alloca i32, align 4
  %insn.addr = alloca %struct.rtx_def*, align 8
  %reg.addr = alloca %struct.rtx_def*, align 8
  %regno = alloca i32, align 4
  %p = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  store %struct.rtx_def* %reg, %struct.rtx_def** %reg.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx to i32*
  %1 = load i32, i32* %rtuint, align 4
  store i32 %1, i32* %regno, align 4
  %2 = load i32, i32* %regno, align 4
  %idxprom = sext i32 %2 to i64
  %3 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %data = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %3, i32 0, i32 4
  %reg1 = bitcast %union.varray_data_tag* %data to [1 x %struct.reg_info_def*]*
  %arrayidx2 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %reg1, i32 0, i64 %idxprom
  %4 = load %struct.reg_info_def*, %struct.reg_info_def** %arrayidx2, align 8
  %first_uid = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %4, i32 0, i32 0
  %5 = load i32, i32* %first_uid, align 4
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld3 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1
  %arrayidx4 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3, i32 0, i64 0
  %rtint = bitcast %union.rtunion_def* %arrayidx4 to i32*
  %7 = load i32, i32* %rtint, align 4
  %cmp = icmp ne i32 %5, %7
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %p, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %9 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %tobool = icmp ne %struct.rtx_def* %9, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %10 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %11 = bitcast %struct.rtx_def* %10 to i32*
  %bf.load = load i32, i32* %11, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %sw.default [
    i32 37, label %sw.bb
    i32 32, label %sw.bb.5
    i32 34, label %sw.bb.5
    i32 33, label %sw.bb.16
    i32 36, label %sw.bb.28
    i32 35, label %sw.bb.28
  ]

sw.bb:                                            ; preds = %for.body
  br label %sw.epilog

sw.bb.5:                                          ; preds = %for.body, %for.body
  %12 = load i32, i32* %regno, align 4
  %idxprom6 = sext i32 %12 to i64
  %13 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %data7 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %13, i32 0, i32 4
  %reg8 = bitcast %union.varray_data_tag* %data7 to [1 x %struct.reg_info_def*]*
  %arrayidx9 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %reg8, i32 0, i64 %idxprom6
  %14 = load %struct.reg_info_def*, %struct.reg_info_def** %arrayidx9, align 8
  %last_uid = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %14, i32 0, i32 1
  %15 = load i32, i32* %last_uid, align 4
  %16 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld10 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1
  %arrayidx11 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld10, i32 0, i64 0
  %rtint12 = bitcast %union.rtunion_def* %arrayidx11 to i32*
  %17 = load i32, i32* %rtint12, align 4
  %cmp13 = icmp eq i32 %15, %17
  br i1 %cmp13, label %if.then.14, label %if.end.15

if.then.14:                                       ; preds = %sw.bb.5
  store i32 1, i32* %retval
  br label %return

if.end.15:                                        ; preds = %sw.bb.5
  br label %sw.epilog

sw.bb.16:                                         ; preds = %for.body
  %18 = load i32, i32* %regno, align 4
  %idxprom17 = sext i32 %18 to i64
  %19 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %data18 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %19, i32 0, i32 4
  %reg19 = bitcast %union.varray_data_tag* %data18 to [1 x %struct.reg_info_def*]*
  %arrayidx20 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %reg19, i32 0, i64 %idxprom17
  %20 = load %struct.reg_info_def*, %struct.reg_info_def** %arrayidx20, align 8
  %last_uid21 = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %20, i32 0, i32 1
  %21 = load i32, i32* %last_uid21, align 4
  %22 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld22 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1
  %arrayidx23 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld22, i32 0, i64 0
  %rtint24 = bitcast %union.rtunion_def* %arrayidx23 to i32*
  %23 = load i32, i32* %rtint24, align 4
  %cmp25 = icmp eq i32 %21, %23
  br i1 %cmp25, label %if.then.26, label %if.end.27

if.then.26:                                       ; preds = %sw.bb.16
  store i32 1, i32* %retval
  br label %return

if.end.27:                                        ; preds = %sw.bb.16
  store i32 0, i32* %retval
  br label %return

sw.bb.28:                                         ; preds = %for.body, %for.body
  store i32 0, i32* %retval
  br label %return

sw.default:                                       ; preds = %for.body
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %if.end.15, %sw.bb
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog
  %24 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld29 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1
  %arrayidx30 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld29, i32 0, i64 2
  %rtx = bitcast %union.rtunion_def* %arrayidx30 to %struct.rtx_def**
  %25 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %25, %struct.rtx_def** %p, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %sw.bb.28, %if.end.27, %if.then.26, %if.then.14, %if.then
  %26 = load i32, i32* %retval
  ret i32 %26
}

; Function Attrs: nounwind uwtable
define internal i32 @loop_reg_used_before_p(%struct.loop* %loop, %struct.rtx_def* %set, %struct.rtx_def* %insn) #0 {
entry:
  %retval = alloca i32, align 4
  %loop.addr = alloca %struct.loop*, align 8
  %set.addr = alloca %struct.rtx_def*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  %reg = alloca %struct.rtx_def*, align 8
  %p = alloca %struct.rtx_def*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  store %struct.rtx_def* %set, %struct.rtx_def** %set.addr, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %set.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %1 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %reg, align 8
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %scan_start = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 29
  %3 = load %struct.rtx_def*, %struct.rtx_def** %scan_start, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %p, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %cmp = icmp ne %struct.rtx_def* %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %7 = bitcast %struct.rtx_def* %6 to i32*
  %bf.load = load i32, i32* %7, align 8
  %bf.clear = and i32 %bf.load, 65535
  %idxprom = sext i32 %bf.clear to i64
  %arrayidx1 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom
  %8 = load i8, i8* %arrayidx1, align 1
  %conv = sext i8 %8 to i32
  %cmp2 = icmp eq i32 %conv, 105
  br i1 %cmp2, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %9 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld4 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1
  %arrayidx5 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld4, i32 0, i64 3
  %rtx6 = bitcast %union.rtunion_def* %arrayidx5 to %struct.rtx_def**
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rtx6, align 8
  %call = call i32 @reg_overlap_mentioned_p(%struct.rtx_def* %9, %struct.rtx_def* %11)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %for.body
  %12 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %13 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %end = getelementptr inbounds %struct.loop, %struct.loop* %13, i32 0, i32 27
  %14 = load %struct.rtx_def*, %struct.rtx_def** %end, align 8
  %cmp7 = icmp eq %struct.rtx_def* %12, %14
  br i1 %cmp7, label %if.then.9, label %if.end.10

if.then.9:                                        ; preds = %if.end
  %15 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %start = getelementptr inbounds %struct.loop, %struct.loop* %15, i32 0, i32 26
  %16 = load %struct.rtx_def*, %struct.rtx_def** %start, align 8
  store %struct.rtx_def* %16, %struct.rtx_def** %p, align 8
  br label %if.end.10

if.end.10:                                        ; preds = %if.then.9, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end.10
  %17 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld11 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1
  %arrayidx12 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld11, i32 0, i64 2
  %rtx13 = bitcast %union.rtunion_def* %arrayidx12 to %struct.rtx_def**
  %18 = load %struct.rtx_def*, %struct.rtx_def** %rtx13, align 8
  store %struct.rtx_def* %18, %struct.rtx_def** %p, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then
  %19 = load i32, i32* %retval
  ret i32 %19
}

; Function Attrs: nounwind uwtable
define internal i32 @consec_sets_invariant_p(%struct.loop* %loop, %struct.rtx_def* %reg, i32 %n_sets, %struct.rtx_def* %insn) #0 {
entry:
  %retval = alloca i32, align 4
  %loop.addr = alloca %struct.loop*, align 8
  %reg.addr = alloca %struct.rtx_def*, align 8
  %n_sets.addr = alloca i32, align 4
  %insn.addr = alloca %struct.rtx_def*, align 8
  %regs = alloca %struct.loop_regs*, align 8
  %p = alloca %struct.rtx_def*, align 8
  %regno = alloca i32, align 4
  %temp = alloca %struct.rtx_def*, align 8
  %count = alloca i32, align 4
  %old = alloca i32, align 4
  %value = alloca i32, align 4
  %this = alloca i32, align 4
  %code = alloca i32, align 4
  %set = alloca %struct.rtx_def*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  store %struct.rtx_def* %reg, %struct.rtx_def** %reg.addr, align 8
  store i32 %n_sets, i32* %n_sets.addr, align 4
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %aux = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 22
  %1 = load i8*, i8** %aux, align 8
  %2 = bitcast i8* %1 to %struct.loop_info*
  %regs1 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %2, i32 0, i32 28
  store %struct.loop_regs* %regs1, %struct.loop_regs** %regs, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %p, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx to i32*
  %5 = load i32, i32* %rtuint, align 4
  store i32 %5, i32* %regno, align 4
  %6 = load i32, i32* %n_sets.addr, align 4
  %sub = sub nsw i32 %6, 1
  store i32 %sub, i32* %count, align 4
  %7 = load i32, i32* %regno, align 4
  %idxprom = zext i32 %7 to i64
  %8 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %array = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %8, i32 0, i32 2
  %9 = load %struct.loop_reg*, %struct.loop_reg** %array, align 8
  %arrayidx2 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %9, i64 %idxprom
  %set_in_loop = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %arrayidx2, i32 0, i32 0
  %10 = load i32, i32* %set_in_loop, align 4
  store i32 %10, i32* %old, align 4
  store i32 0, i32* %value, align 4
  %11 = load i32, i32* %n_sets.addr, align 4
  %cmp = icmp eq i32 %11, 127
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %12 = load i32, i32* %regno, align 4
  %idxprom3 = zext i32 %12 to i64
  %13 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %array4 = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %13, i32 0, i32 2
  %14 = load %struct.loop_reg*, %struct.loop_reg** %array4, align 8
  %arrayidx5 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %14, i64 %idxprom3
  %set_in_loop6 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %arrayidx5, i32 0, i32 0
  store i32 0, i32* %set_in_loop6, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end.160, %if.end
  %15 = load i32, i32* %count, align 4
  %cmp7 = icmp sgt i32 %15, 0
  br i1 %cmp7, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %16 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld8 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1
  %arrayidx9 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld8, i32 0, i64 2
  %rtx = bitcast %union.rtunion_def* %arrayidx9 to %struct.rtx_def**
  %17 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %17, %struct.rtx_def** %p, align 8
  %18 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %19 = bitcast %struct.rtx_def* %18 to i32*
  %bf.load = load i32, i32* %19, align 8
  %bf.clear = and i32 %bf.load, 65535
  store i32 %bf.clear, i32* %code, align 4
  %20 = load i32, i32* %code, align 4
  %cmp10 = icmp eq i32 %20, 32
  br i1 %cmp10, label %land.lhs.true, label %if.end.15

land.lhs.true:                                    ; preds = %while.body
  %21 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %call = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %21, i32 7, %struct.rtx_def* null)
  store %struct.rtx_def* %call, %struct.rtx_def** %temp, align 8
  %tobool = icmp ne %struct.rtx_def* %call, null
  br i1 %tobool, label %if.then.11, label %if.end.15

if.then.11:                                       ; preds = %land.lhs.true
  %22 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %fld12 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1
  %arrayidx13 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld12, i32 0, i64 0
  %rtx14 = bitcast %union.rtunion_def* %arrayidx13 to %struct.rtx_def**
  %23 = load %struct.rtx_def*, %struct.rtx_def** %rtx14, align 8
  store %struct.rtx_def* %23, %struct.rtx_def** %p, align 8
  br label %if.end.15

if.end.15:                                        ; preds = %if.then.11, %land.lhs.true, %while.body
  store i32 0, i32* %this, align 4
  %24 = load i32, i32* %code, align 4
  %cmp16 = icmp eq i32 %24, 32
  br i1 %cmp16, label %land.lhs.true.17, label %if.end.147

land.lhs.true.17:                                 ; preds = %if.end.15
  %25 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %26 = bitcast %struct.rtx_def* %25 to i32*
  %bf.load18 = load i32, i32* %26, align 8
  %bf.clear19 = and i32 %bf.load18, 65535
  %idxprom20 = sext i32 %bf.clear19 to i64
  %arrayidx21 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom20
  %27 = load i8, i8* %arrayidx21, align 1
  %conv = sext i8 %27 to i32
  %cmp22 = icmp eq i32 %conv, 105
  br i1 %cmp22, label %cond.true, label %cond.false.39

cond.true:                                        ; preds = %land.lhs.true.17
  %28 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld24 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1
  %arrayidx25 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld24, i32 0, i64 3
  %rtx26 = bitcast %union.rtunion_def* %arrayidx25 to %struct.rtx_def**
  %29 = load %struct.rtx_def*, %struct.rtx_def** %rtx26, align 8
  %30 = bitcast %struct.rtx_def* %29 to i32*
  %bf.load27 = load i32, i32* %30, align 8
  %bf.clear28 = and i32 %bf.load27, 65535
  %cmp29 = icmp eq i32 %bf.clear28, 47
  br i1 %cmp29, label %cond.true.31, label %cond.false

cond.true.31:                                     ; preds = %cond.true
  %31 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld32 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1
  %arrayidx33 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld32, i32 0, i64 3
  %rtx34 = bitcast %union.rtunion_def* %arrayidx33 to %struct.rtx_def**
  %32 = load %struct.rtx_def*, %struct.rtx_def** %rtx34, align 8
  br label %cond.end

cond.false:                                       ; preds = %cond.true
  %33 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %34 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld35 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %34, i32 0, i32 1
  %arrayidx36 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld35, i32 0, i64 3
  %rtx37 = bitcast %union.rtunion_def* %arrayidx36 to %struct.rtx_def**
  %35 = load %struct.rtx_def*, %struct.rtx_def** %rtx37, align 8
  %call38 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %33, %struct.rtx_def* %35)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true.31
  %cond = phi %struct.rtx_def* [ %32, %cond.true.31 ], [ %call38, %cond.false ]
  br label %cond.end.40

cond.false.39:                                    ; preds = %land.lhs.true.17
  br label %cond.end.40

cond.end.40:                                      ; preds = %cond.false.39, %cond.end
  %cond41 = phi %struct.rtx_def* [ %cond, %cond.end ], [ null, %cond.false.39 ]
  store %struct.rtx_def* %cond41, %struct.rtx_def** %set, align 8
  %tobool42 = icmp ne %struct.rtx_def* %cond41, null
  br i1 %tobool42, label %land.lhs.true.43, label %if.end.147

land.lhs.true.43:                                 ; preds = %cond.end.40
  %36 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld44 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %36, i32 0, i32 1
  %arrayidx45 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld44, i32 0, i64 0
  %rtx46 = bitcast %union.rtunion_def* %arrayidx45 to %struct.rtx_def**
  %37 = load %struct.rtx_def*, %struct.rtx_def** %rtx46, align 8
  %38 = bitcast %struct.rtx_def* %37 to i32*
  %bf.load47 = load i32, i32* %38, align 8
  %bf.clear48 = and i32 %bf.load47, 65535
  %cmp49 = icmp eq i32 %bf.clear48, 61
  br i1 %cmp49, label %land.lhs.true.51, label %if.end.147

land.lhs.true.51:                                 ; preds = %land.lhs.true.43
  %39 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld52 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1
  %arrayidx53 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld52, i32 0, i64 0
  %rtx54 = bitcast %union.rtunion_def* %arrayidx53 to %struct.rtx_def**
  %40 = load %struct.rtx_def*, %struct.rtx_def** %rtx54, align 8
  %fld55 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %40, i32 0, i32 1
  %arrayidx56 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld55, i32 0, i64 0
  %rtuint57 = bitcast %union.rtunion_def* %arrayidx56 to i32*
  %41 = load i32, i32* %rtuint57, align 4
  %42 = load i32, i32* %regno, align 4
  %cmp58 = icmp eq i32 %41, %42
  br i1 %cmp58, label %if.then.60, label %if.end.147

if.then.60:                                       ; preds = %land.lhs.true.51
  %43 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %44 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld61 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %44, i32 0, i32 1
  %arrayidx62 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld61, i32 0, i64 1
  %rtx63 = bitcast %union.rtunion_def* %arrayidx62 to %struct.rtx_def**
  %45 = load %struct.rtx_def*, %struct.rtx_def** %rtx63, align 8
  %call64 = call i32 @loop_invariant_p(%struct.loop* %43, %struct.rtx_def* %45)
  store i32 %call64, i32* %this, align 4
  %46 = load i32, i32* %this, align 4
  %cmp65 = icmp ne i32 %46, 0
  br i1 %cmp65, label %if.then.67, label %if.else

if.then.67:                                       ; preds = %if.then.60
  %47 = load i32, i32* %this, align 4
  %48 = load i32, i32* %value, align 4
  %or = or i32 %48, %47
  store i32 %or, i32* %value, align 4
  br label %if.end.146

if.else:                                          ; preds = %if.then.60
  %49 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %call68 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %49, i32 4, %struct.rtx_def* null)
  store %struct.rtx_def* %call68, %struct.rtx_def** %temp, align 8
  %tobool69 = icmp ne %struct.rtx_def* %call68, null
  br i1 %tobool69, label %if.then.70, label %if.end.145

if.then.70:                                       ; preds = %if.else
  %50 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %fld71 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %50, i32 0, i32 1
  %arrayidx72 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld71, i32 0, i64 0
  %rtx73 = bitcast %union.rtunion_def* %arrayidx72 to %struct.rtx_def**
  %51 = load %struct.rtx_def*, %struct.rtx_def** %rtx73, align 8
  %52 = bitcast %struct.rtx_def* %51 to i32*
  %bf.load74 = load i32, i32* %52, align 8
  %bf.clear75 = and i32 %bf.load74, 65535
  %cmp76 = icmp eq i32 %bf.clear75, 67
  br i1 %cmp76, label %lor.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then.70
  %53 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %fld78 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %53, i32 0, i32 1
  %arrayidx79 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld78, i32 0, i64 0
  %rtx80 = bitcast %union.rtunion_def* %arrayidx79 to %struct.rtx_def**
  %54 = load %struct.rtx_def*, %struct.rtx_def** %rtx80, align 8
  %55 = bitcast %struct.rtx_def* %54 to i32*
  %bf.load81 = load i32, i32* %55, align 8
  %bf.clear82 = and i32 %bf.load81, 65535
  %cmp83 = icmp eq i32 %bf.clear82, 68
  br i1 %cmp83, label %lor.end, label %lor.lhs.false.85

lor.lhs.false.85:                                 ; preds = %lor.lhs.false
  %56 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %fld86 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %56, i32 0, i32 1
  %arrayidx87 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld86, i32 0, i64 0
  %rtx88 = bitcast %union.rtunion_def* %arrayidx87 to %struct.rtx_def**
  %57 = load %struct.rtx_def*, %struct.rtx_def** %rtx88, align 8
  %58 = bitcast %struct.rtx_def* %57 to i32*
  %bf.load89 = load i32, i32* %58, align 8
  %bf.clear90 = and i32 %bf.load89, 65535
  %cmp91 = icmp eq i32 %bf.clear90, 54
  br i1 %cmp91, label %lor.end, label %lor.lhs.false.93

lor.lhs.false.93:                                 ; preds = %lor.lhs.false.85
  %59 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %fld94 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %59, i32 0, i32 1
  %arrayidx95 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld94, i32 0, i64 0
  %rtx96 = bitcast %union.rtunion_def* %arrayidx95 to %struct.rtx_def**
  %60 = load %struct.rtx_def*, %struct.rtx_def** %rtx96, align 8
  %61 = bitcast %struct.rtx_def* %60 to i32*
  %bf.load97 = load i32, i32* %61, align 8
  %bf.clear98 = and i32 %bf.load97, 65535
  %cmp99 = icmp eq i32 %bf.clear98, 55
  br i1 %cmp99, label %lor.end, label %lor.lhs.false.101

lor.lhs.false.101:                                ; preds = %lor.lhs.false.93
  %62 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %fld102 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %62, i32 0, i32 1
  %arrayidx103 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld102, i32 0, i64 0
  %rtx104 = bitcast %union.rtunion_def* %arrayidx103 to %struct.rtx_def**
  %63 = load %struct.rtx_def*, %struct.rtx_def** %rtx104, align 8
  %64 = bitcast %struct.rtx_def* %63 to i32*
  %bf.load105 = load i32, i32* %64, align 8
  %bf.clear106 = and i32 %bf.load105, 65535
  %cmp107 = icmp eq i32 %bf.clear106, 58
  br i1 %cmp107, label %lor.end, label %lor.lhs.false.109

lor.lhs.false.109:                                ; preds = %lor.lhs.false.101
  %65 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %fld110 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %65, i32 0, i32 1
  %arrayidx111 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld110, i32 0, i64 0
  %rtx112 = bitcast %union.rtunion_def* %arrayidx111 to %struct.rtx_def**
  %66 = load %struct.rtx_def*, %struct.rtx_def** %rtx112, align 8
  %67 = bitcast %struct.rtx_def* %66 to i32*
  %bf.load113 = load i32, i32* %67, align 8
  %bf.clear114 = and i32 %bf.load113, 65535
  %cmp115 = icmp eq i32 %bf.clear114, 134
  br i1 %cmp115, label %lor.end, label %lor.lhs.false.117

lor.lhs.false.117:                                ; preds = %lor.lhs.false.109
  %68 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %fld118 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %68, i32 0, i32 1
  %arrayidx119 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld118, i32 0, i64 0
  %rtx120 = bitcast %union.rtunion_def* %arrayidx119 to %struct.rtx_def**
  %69 = load %struct.rtx_def*, %struct.rtx_def** %rtx120, align 8
  %70 = bitcast %struct.rtx_def* %69 to i32*
  %bf.load121 = load i32, i32* %70, align 8
  %bf.clear122 = and i32 %bf.load121, 65535
  %cmp123 = icmp eq i32 %bf.clear122, 56
  br i1 %cmp123, label %lor.end, label %lor.lhs.false.125

lor.lhs.false.125:                                ; preds = %lor.lhs.false.117
  %71 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %fld126 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %71, i32 0, i32 1
  %arrayidx127 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld126, i32 0, i64 0
  %rtx128 = bitcast %union.rtunion_def* %arrayidx127 to %struct.rtx_def**
  %72 = load %struct.rtx_def*, %struct.rtx_def** %rtx128, align 8
  %73 = bitcast %struct.rtx_def* %72 to i32*
  %bf.load129 = load i32, i32* %73, align 8
  %bf.clear130 = and i32 %bf.load129, 65535
  %cmp131 = icmp eq i32 %bf.clear130, 140
  br i1 %cmp131, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false.125
  %74 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %call133 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %74, i32 6, %struct.rtx_def* null)
  %tobool134 = icmp ne %struct.rtx_def* %call133, null
  br i1 %tobool134, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %lor.rhs
  %75 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %76 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %fld135 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %76, i32 0, i32 1
  %arrayidx136 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld135, i32 0, i64 0
  %rtx137 = bitcast %union.rtunion_def* %arrayidx136 to %struct.rtx_def**
  %77 = load %struct.rtx_def*, %struct.rtx_def** %rtx137, align 8
  %call138 = call i32 @loop_invariant_p(%struct.loop* %75, %struct.rtx_def* %77)
  %tobool139 = icmp ne i32 %call138, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %78 = phi i1 [ false, %lor.rhs ], [ %tobool139, %land.rhs ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %lor.lhs.false.125, %lor.lhs.false.117, %lor.lhs.false.109, %lor.lhs.false.101, %lor.lhs.false.93, %lor.lhs.false.85, %lor.lhs.false, %if.then.70
  %79 = phi i1 [ true, %lor.lhs.false.125 ], [ true, %lor.lhs.false.117 ], [ true, %lor.lhs.false.109 ], [ true, %lor.lhs.false.101 ], [ true, %lor.lhs.false.93 ], [ true, %lor.lhs.false.85 ], [ true, %lor.lhs.false ], [ true, %if.then.70 ], [ %78, %land.end ]
  %lor.ext = zext i1 %79 to i32
  store i32 %lor.ext, i32* %this, align 4
  %80 = load i32, i32* %this, align 4
  %cmp140 = icmp ne i32 %80, 0
  br i1 %cmp140, label %if.then.142, label %if.end.144

if.then.142:                                      ; preds = %lor.end
  %81 = load i32, i32* %this, align 4
  %82 = load i32, i32* %value, align 4
  %or143 = or i32 %82, %81
  store i32 %or143, i32* %value, align 4
  br label %if.end.144

if.end.144:                                       ; preds = %if.then.142, %lor.end
  br label %if.end.145

if.end.145:                                       ; preds = %if.end.144, %if.else
  br label %if.end.146

if.end.146:                                       ; preds = %if.end.145, %if.then.67
  br label %if.end.147

if.end.147:                                       ; preds = %if.end.146, %land.lhs.true.51, %land.lhs.true.43, %cond.end.40, %if.end.15
  %83 = load i32, i32* %this, align 4
  %cmp148 = icmp ne i32 %83, 0
  br i1 %cmp148, label %if.then.150, label %if.else.151

if.then.150:                                      ; preds = %if.end.147
  %84 = load i32, i32* %count, align 4
  %dec = add nsw i32 %84, -1
  store i32 %dec, i32* %count, align 4
  br label %if.end.160

if.else.151:                                      ; preds = %if.end.147
  %85 = load i32, i32* %code, align 4
  %cmp152 = icmp ne i32 %85, 37
  br i1 %cmp152, label %if.then.154, label %if.end.159

if.then.154:                                      ; preds = %if.else.151
  %86 = load i32, i32* %old, align 4
  %87 = load i32, i32* %regno, align 4
  %idxprom155 = zext i32 %87 to i64
  %88 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %array156 = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %88, i32 0, i32 2
  %89 = load %struct.loop_reg*, %struct.loop_reg** %array156, align 8
  %arrayidx157 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %89, i64 %idxprom155
  %set_in_loop158 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %arrayidx157, i32 0, i32 0
  store i32 %86, i32* %set_in_loop158, align 4
  store i32 0, i32* %retval
  br label %return

if.end.159:                                       ; preds = %if.else.151
  br label %if.end.160

if.end.160:                                       ; preds = %if.end.159, %if.then.150
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %90 = load i32, i32* %old, align 4
  %91 = load i32, i32* %regno, align 4
  %idxprom161 = zext i32 %91 to i64
  %92 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %array162 = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %92, i32 0, i32 2
  %93 = load %struct.loop_reg*, %struct.loop_reg** %array162, align 8
  %arrayidx163 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %93, i64 %idxprom161
  %set_in_loop164 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %arrayidx163, i32 0, i32 0
  store i32 %90, i32* %set_in_loop164, align 4
  %94 = load i32, i32* %value, align 4
  %and = and i32 %94, 2
  %add = add nsw i32 1, %and
  store i32 %add, i32* %retval
  br label %return

return:                                           ; preds = %while.end, %if.then.154, %if.then
  %95 = load i32, i32* %retval
  ret i32 %95
}

declare i32 @may_trap_p(%struct.rtx_def*) #1

declare i32 @side_effects_p(%struct.rtx_def*) #1

declare i32 @modified_between_p(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #1

declare i32 @validate_replace_rtx(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #1

declare %struct.rtx_def* @replace_rtx(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #1

declare %struct.rtx_def* @delete_insn(%struct.rtx_def*) #1

declare noalias i8* @xmalloc(i64) #1

; Function Attrs: nounwind uwtable
define internal i32 @libcall_benefit(%struct.rtx_def* %last) #0 {
entry:
  %last.addr = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %benefit = alloca i32, align 4
  store %struct.rtx_def* %last, %struct.rtx_def** %last.addr, align 8
  store i32 0, i32* %benefit, align 4
  %0 = load %struct.rtx_def*, %struct.rtx_def** %last.addr, align 8
  %call = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %0, i32 6, %struct.rtx_def* null)
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %call, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %1 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %insn, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %last.addr, align 8
  %cmp = icmp ne %struct.rtx_def* %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %5 = bitcast %struct.rtx_def* %4 to i32*
  %bf.load = load i32, i32* %5, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp1 = icmp eq i32 %bf.clear, 34
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %6 = load i32, i32* %benefit, align 4
  %add = add nsw i32 %6, 10
  store i32 %add, i32* %benefit, align 4
  br label %if.end.19

if.else:                                          ; preds = %for.body
  %7 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %8 = bitcast %struct.rtx_def* %7 to i32*
  %bf.load2 = load i32, i32* %8, align 8
  %bf.clear3 = and i32 %bf.load2, 65535
  %cmp4 = icmp eq i32 %bf.clear3, 32
  br i1 %cmp4, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.else
  %9 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld5 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1
  %arrayidx6 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld5, i32 0, i64 3
  %rtx7 = bitcast %union.rtunion_def* %arrayidx6 to %struct.rtx_def**
  %10 = load %struct.rtx_def*, %struct.rtx_def** %rtx7, align 8
  %11 = bitcast %struct.rtx_def* %10 to i32*
  %bf.load8 = load i32, i32* %11, align 8
  %bf.clear9 = and i32 %bf.load8, 65535
  %cmp10 = icmp ne i32 %bf.clear9, 48
  br i1 %cmp10, label %land.lhs.true.11, label %if.end

land.lhs.true.11:                                 ; preds = %land.lhs.true
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld12 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1
  %arrayidx13 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld12, i32 0, i64 3
  %rtx14 = bitcast %union.rtunion_def* %arrayidx13 to %struct.rtx_def**
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rtx14, align 8
  %14 = bitcast %struct.rtx_def* %13 to i32*
  %bf.load15 = load i32, i32* %14, align 8
  %bf.clear16 = and i32 %bf.load15, 65535
  %cmp17 = icmp ne i32 %bf.clear16, 49
  br i1 %cmp17, label %if.then.18, label %if.end

if.then.18:                                       ; preds = %land.lhs.true.11
  %15 = load i32, i32* %benefit, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %benefit, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.18, %land.lhs.true.11, %land.lhs.true, %if.else
  br label %if.end.19

if.end.19:                                        ; preds = %if.end, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end.19
  %16 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld20 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1
  %arrayidx21 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld20, i32 0, i64 2
  %rtx22 = bitcast %union.rtunion_def* %arrayidx21 to %struct.rtx_def**
  %17 = load %struct.rtx_def*, %struct.rtx_def** %rtx22, align 8
  store %struct.rtx_def* %17, %struct.rtx_def** %insn, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %18 = load i32, i32* %benefit, align 4
  ret i32 %18
}

; Function Attrs: nounwind uwtable
define internal void @loop_movables_add(%struct.loop_movables* %movables, %struct.movable* %m) #0 {
entry:
  %movables.addr = alloca %struct.loop_movables*, align 8
  %m.addr = alloca %struct.movable*, align 8
  store %struct.loop_movables* %movables, %struct.loop_movables** %movables.addr, align 8
  store %struct.movable* %m, %struct.movable** %m.addr, align 8
  %0 = load %struct.loop_movables*, %struct.loop_movables** %movables.addr, align 8
  %head = getelementptr inbounds %struct.loop_movables, %struct.loop_movables* %0, i32 0, i32 0
  %1 = load %struct.movable*, %struct.movable** %head, align 8
  %cmp = icmp eq %struct.movable* %1, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct.movable*, %struct.movable** %m.addr, align 8
  %3 = load %struct.loop_movables*, %struct.loop_movables** %movables.addr, align 8
  %head1 = getelementptr inbounds %struct.loop_movables, %struct.loop_movables* %3, i32 0, i32 0
  store %struct.movable* %2, %struct.movable** %head1, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  %4 = load %struct.movable*, %struct.movable** %m.addr, align 8
  %5 = load %struct.loop_movables*, %struct.loop_movables** %movables.addr, align 8
  %last = getelementptr inbounds %struct.loop_movables, %struct.loop_movables* %5, i32 0, i32 1
  %6 = load %struct.movable*, %struct.movable** %last, align 8
  %next = getelementptr inbounds %struct.movable, %struct.movable* %6, i32 0, i32 12
  store %struct.movable* %4, %struct.movable** %next, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %7 = load %struct.movable*, %struct.movable** %m.addr, align 8
  %8 = load %struct.loop_movables*, %struct.loop_movables** %movables.addr, align 8
  %last2 = getelementptr inbounds %struct.loop_movables, %struct.loop_movables* %8, i32 0, i32 1
  store %struct.movable* %7, %struct.movable** %last2, align 8
  ret void
}

declare %struct.rtx_def* @next_nonnote_insn(%struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define internal %struct.rtx_def* @skip_consec_insns(%struct.rtx_def* %insn, i32 %count) #0 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %count.addr = alloca i32, align 4
  %temp = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %count.addr, align 4
  %cmp = icmp sgt i32 %0, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load = load i32, i32* %2, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp1 = icmp ne i32 %bf.clear, 37
  br i1 %cmp1, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %3, i32 7, %struct.rtx_def* null)
  store %struct.rtx_def* %call, %struct.rtx_def** %temp, align 8
  %tobool = icmp ne %struct.rtx_def* %call, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %5 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %insn.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld2 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i32 0, i64 2
  %rtx4 = bitcast %union.rtunion_def* %arrayidx3 to %struct.rtx_def**
  %7 = load %struct.rtx_def*, %struct.rtx_def** %rtx4, align 8
  store %struct.rtx_def* %7, %struct.rtx_def** %insn.addr, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %9 = bitcast %struct.rtx_def* %8 to i32*
  %bf.load5 = load i32, i32* %9, align 8
  %bf.clear6 = and i32 %bf.load5, 65535
  %cmp7 = icmp eq i32 %bf.clear6, 37
  br i1 %cmp7, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  br label %for.inc

for.inc:                                          ; preds = %do.end
  %10 = load i32, i32* %count.addr, align 4
  %dec = add nsw i32 %10, -1
  store i32 %dec, i32* %count.addr, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  ret %struct.rtx_def* %11
}

; Function Attrs: nounwind uwtable
define internal i32 @labels_in_range_p(%struct.rtx_def* %insn, i32 %end) #0 {
entry:
  %retval = alloca i32, align 4
  %insn.addr = alloca %struct.rtx_def*, align 8
  %end.addr = alloca i32, align 4
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  store i32 %end, i32* %end.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %tobool = icmp ne %struct.rtx_def* %0, null
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtint = bitcast %union.rtunion_def* %arrayidx to i32*
  %2 = load i32, i32* %rtint, align 4
  %3 = load i32, i32* @max_uid_for_loop, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.rhs
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1
  %arrayidx2 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1, i32 0, i64 0
  %rtint3 = bitcast %union.rtunion_def* %arrayidx2 to i32*
  %5 = load i32, i32* %rtint3, align 4
  %idxprom = sext i32 %5 to i64
  %6 = load i32*, i32** @uid_luid, align 8
  %arrayidx4 = getelementptr inbounds i32, i32* %6, i64 %idxprom
  %7 = load i32, i32* %arrayidx4, align 4
  br label %cond.end

cond.false:                                       ; preds = %land.rhs
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 3120, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__FUNCTION__.labels_in_range_p, i32 0, i32 0)) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %8, %cond.true
  %cond = phi i32 [ %7, %cond.true ], [ -1, %8 ]
  %9 = load i32, i32* %end.addr, align 4
  %cmp5 = icmp sle i32 %cond, %9
  br label %land.end

land.end:                                         ; preds = %cond.end, %while.cond
  %10 = phi i1 [ false, %while.cond ], [ %cmp5, %cond.end ]
  br i1 %10, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %12 = bitcast %struct.rtx_def* %11 to i32*
  %bf.load = load i32, i32* %12, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp6 = icmp eq i32 %bf.clear, 36
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %while.body
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld7 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1
  %arrayidx8 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld7, i32 0, i64 2
  %rtx = bitcast %union.rtunion_def* %arrayidx8 to %struct.rtx_def**
  %14 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %14, %struct.rtx_def** %insn.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %while.end, %if.then
  %15 = load i32, i32* %retval
  ret i32 %15
}

; Function Attrs: nounwind uwtable
define internal void @ignore_some_movables(%struct.loop_movables* %movables) #0 {
entry:
  %movables.addr = alloca %struct.loop_movables*, align 8
  %m = alloca %struct.movable*, align 8
  %m1 = alloca %struct.movable*, align 8
  %note = alloca %struct.rtx_def*, align 8
  %insn2 = alloca %struct.rtx_def*, align 8
  store %struct.loop_movables* %movables, %struct.loop_movables** %movables.addr, align 8
  %0 = load %struct.loop_movables*, %struct.loop_movables** %movables.addr, align 8
  %head = getelementptr inbounds %struct.loop_movables, %struct.loop_movables* %0, i32 0, i32 0
  %1 = load %struct.movable*, %struct.movable** %head, align 8
  store %struct.movable* %1, %struct.movable** %m, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc.19, %entry
  %2 = load %struct.movable*, %struct.movable** %m, align 8
  %tobool = icmp ne %struct.movable* %2, null
  br i1 %tobool, label %for.body, label %for.end.21

for.body:                                         ; preds = %for.cond
  %3 = load %struct.movable*, %struct.movable** %m, align 8
  %insn = getelementptr inbounds %struct.movable, %struct.movable* %3, i32 0, i32 0
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %call = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %4, i32 6, %struct.rtx_def* null)
  store %struct.rtx_def* %call, %struct.rtx_def** %note, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8
  %tobool1 = icmp ne %struct.rtx_def* %5, null
  br i1 %tobool1, label %if.then, label %if.end.18

if.then:                                          ; preds = %for.body
  %6 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %7 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %7, %struct.rtx_def** %insn2, align 8
  br label %for.cond.3

for.cond.3:                                       ; preds = %for.inc.13, %if.then
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn2, align 8
  %9 = load %struct.movable*, %struct.movable** %m, align 8
  %insn4 = getelementptr inbounds %struct.movable, %struct.movable* %9, i32 0, i32 0
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn4, align 8
  %cmp = icmp ne %struct.rtx_def* %8, %10
  br i1 %cmp, label %for.body.5, label %for.end.17

for.body.5:                                       ; preds = %for.cond.3
  %11 = load %struct.loop_movables*, %struct.loop_movables** %movables.addr, align 8
  %head6 = getelementptr inbounds %struct.loop_movables, %struct.loop_movables* %11, i32 0, i32 0
  %12 = load %struct.movable*, %struct.movable** %head6, align 8
  store %struct.movable* %12, %struct.movable** %m1, align 8
  br label %for.cond.7

for.cond.7:                                       ; preds = %for.inc, %for.body.5
  %13 = load %struct.movable*, %struct.movable** %m1, align 8
  %14 = load %struct.movable*, %struct.movable** %m, align 8
  %cmp8 = icmp ne %struct.movable* %13, %14
  br i1 %cmp8, label %for.body.9, label %for.end

for.body.9:                                       ; preds = %for.cond.7
  %15 = load %struct.movable*, %struct.movable** %m1, align 8
  %insn10 = getelementptr inbounds %struct.movable, %struct.movable* %15, i32 0, i32 0
  %16 = load %struct.rtx_def*, %struct.rtx_def** %insn10, align 8
  %17 = load %struct.rtx_def*, %struct.rtx_def** %insn2, align 8
  %cmp11 = icmp eq %struct.rtx_def* %16, %17
  br i1 %cmp11, label %if.then.12, label %if.end

if.then.12:                                       ; preds = %for.body.9
  %18 = load %struct.movable*, %struct.movable** %m1, align 8
  %done = getelementptr inbounds %struct.movable, %struct.movable* %18, i32 0, i32 8
  %bf.load = load i8, i8* %done, align 4
  %bf.clear = and i8 %bf.load, -9
  %bf.set = or i8 %bf.clear, 8
  store i8 %bf.set, i8* %done, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.12, %for.body.9
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %19 = load %struct.movable*, %struct.movable** %m1, align 8
  %next = getelementptr inbounds %struct.movable, %struct.movable* %19, i32 0, i32 12
  %20 = load %struct.movable*, %struct.movable** %next, align 8
  store %struct.movable* %20, %struct.movable** %m1, align 8
  br label %for.cond.7

for.end:                                          ; preds = %for.cond.7
  br label %for.inc.13

for.inc.13:                                       ; preds = %for.end
  %21 = load %struct.rtx_def*, %struct.rtx_def** %insn2, align 8
  %fld14 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1
  %arrayidx15 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld14, i32 0, i64 2
  %rtx16 = bitcast %union.rtunion_def* %arrayidx15 to %struct.rtx_def**
  %22 = load %struct.rtx_def*, %struct.rtx_def** %rtx16, align 8
  store %struct.rtx_def* %22, %struct.rtx_def** %insn2, align 8
  br label %for.cond.3

for.end.17:                                       ; preds = %for.cond.3
  br label %if.end.18

if.end.18:                                        ; preds = %for.end.17, %for.body
  br label %for.inc.19

for.inc.19:                                       ; preds = %if.end.18
  %23 = load %struct.movable*, %struct.movable** %m, align 8
  %next20 = getelementptr inbounds %struct.movable, %struct.movable* %23, i32 0, i32 12
  %24 = load %struct.movable*, %struct.movable** %next20, align 8
  store %struct.movable* %24, %struct.movable** %m, align 8
  br label %for.cond

for.end.21:                                       ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @force_movables(%struct.loop_movables* %movables) #0 {
entry:
  %movables.addr = alloca %struct.loop_movables*, align 8
  %m = alloca %struct.movable*, align 8
  %m1 = alloca %struct.movable*, align 8
  %regno = alloca i32, align 4
  store %struct.loop_movables* %movables, %struct.loop_movables** %movables.addr, align 8
  %0 = load %struct.loop_movables*, %struct.loop_movables** %movables.addr, align 8
  %head = getelementptr inbounds %struct.loop_movables, %struct.loop_movables* %0, i32 0, i32 0
  %1 = load %struct.movable*, %struct.movable** %head, align 8
  store %struct.movable* %1, %struct.movable** %m1, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc.40, %entry
  %2 = load %struct.movable*, %struct.movable** %m1, align 8
  %tobool = icmp ne %struct.movable* %2, null
  br i1 %tobool, label %for.body, label %for.end.42

for.body:                                         ; preds = %for.cond
  %3 = load %struct.movable*, %struct.movable** %m1, align 8
  %partial = getelementptr inbounds %struct.movable, %struct.movable* %3, i32 0, i32 8
  %bf.load = load i8, i8* %partial, align 4
  %bf.lshr = lshr i8 %bf.load, 4
  %bf.clear = and i8 %bf.lshr, 1
  %bf.cast = zext i8 %bf.clear to i32
  %tobool1 = icmp ne i32 %bf.cast, 0
  br i1 %tobool1, label %if.end.39, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.body
  %4 = load %struct.movable*, %struct.movable** %m1, align 8
  %done = getelementptr inbounds %struct.movable, %struct.movable* %4, i32 0, i32 8
  %bf.load2 = load i8, i8* %done, align 4
  %bf.lshr3 = lshr i8 %bf.load2, 3
  %bf.clear4 = and i8 %bf.lshr3, 1
  %bf.cast5 = zext i8 %bf.clear4 to i32
  %tobool6 = icmp ne i32 %bf.cast5, 0
  br i1 %tobool6, label %if.end.39, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %5 = load %struct.movable*, %struct.movable** %m1, align 8
  %regno7 = getelementptr inbounds %struct.movable, %struct.movable* %5, i32 0, i32 5
  %6 = load i32, i32* %regno7, align 4
  store i32 %6, i32* %regno, align 4
  %7 = load %struct.movable*, %struct.movable** %m1, align 8
  %next = getelementptr inbounds %struct.movable, %struct.movable* %7, i32 0, i32 12
  %8 = load %struct.movable*, %struct.movable** %next, align 8
  store %struct.movable* %8, %struct.movable** %m, align 8
  br label %for.cond.8

for.cond.8:                                       ; preds = %for.inc, %if.then
  %9 = load %struct.movable*, %struct.movable** %m, align 8
  %tobool9 = icmp ne %struct.movable* %9, null
  br i1 %tobool9, label %for.body.10, label %for.end

for.body.10:                                      ; preds = %for.cond.8
  %10 = load %struct.movable*, %struct.movable** %m, align 8
  %insn = getelementptr inbounds %struct.movable, %struct.movable* %10, i32 0, i32 0
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtint = bitcast %union.rtunion_def* %arrayidx to i32*
  %12 = load i32, i32* %rtint, align 4
  %13 = load i32, i32* %regno, align 4
  %idxprom = sext i32 %13 to i64
  %14 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %data = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %14, i32 0, i32 4
  %reg = bitcast %union.varray_data_tag* %data to [1 x %struct.reg_info_def*]*
  %arrayidx11 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %reg, i32 0, i64 %idxprom
  %15 = load %struct.reg_info_def*, %struct.reg_info_def** %arrayidx11, align 8
  %last_uid = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %15, i32 0, i32 1
  %16 = load i32, i32* %last_uid, align 4
  %cmp = icmp eq i32 %12, %16
  br i1 %cmp, label %land.lhs.true.12, label %if.end

land.lhs.true.12:                                 ; preds = %for.body.10
  %17 = load %struct.movable*, %struct.movable** %m, align 8
  %done13 = getelementptr inbounds %struct.movable, %struct.movable* %17, i32 0, i32 8
  %bf.load14 = load i8, i8* %done13, align 4
  %bf.lshr15 = lshr i8 %bf.load14, 3
  %bf.clear16 = and i8 %bf.lshr15, 1
  %bf.cast17 = zext i8 %bf.clear16 to i32
  %tobool18 = icmp ne i32 %bf.cast17, 0
  br i1 %tobool18, label %if.end, label %if.then.19

if.then.19:                                       ; preds = %land.lhs.true.12
  br label %for.end

if.end:                                           ; preds = %land.lhs.true.12, %for.body.10
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %18 = load %struct.movable*, %struct.movable** %m, align 8
  %next20 = getelementptr inbounds %struct.movable, %struct.movable* %18, i32 0, i32 12
  %19 = load %struct.movable*, %struct.movable** %next20, align 8
  store %struct.movable* %19, %struct.movable** %m, align 8
  br label %for.cond.8

for.end:                                          ; preds = %if.then.19, %for.cond.8
  %20 = load %struct.movable*, %struct.movable** %m, align 8
  %cmp21 = icmp ne %struct.movable* %20, null
  br i1 %cmp21, label %land.lhs.true.22, label %if.end.27

land.lhs.true.22:                                 ; preds = %for.end
  %21 = load %struct.movable*, %struct.movable** %m, align 8
  %set_src = getelementptr inbounds %struct.movable, %struct.movable* %21, i32 0, i32 1
  %22 = load %struct.rtx_def*, %struct.rtx_def** %set_src, align 8
  %23 = load %struct.movable*, %struct.movable** %m1, align 8
  %set_dest = getelementptr inbounds %struct.movable, %struct.movable* %23, i32 0, i32 2
  %24 = load %struct.rtx_def*, %struct.rtx_def** %set_dest, align 8
  %cmp23 = icmp eq %struct.rtx_def* %22, %24
  br i1 %cmp23, label %land.lhs.true.24, label %if.end.27

land.lhs.true.24:                                 ; preds = %land.lhs.true.22
  %25 = load %struct.movable*, %struct.movable** %m, align 8
  %consec = getelementptr inbounds %struct.movable, %struct.movable* %25, i32 0, i32 4
  %26 = load i32, i32* %consec, align 4
  %cmp25 = icmp eq i32 %26, 0
  br i1 %cmp25, label %if.then.26, label %if.end.27

if.then.26:                                       ; preds = %land.lhs.true.24
  store %struct.movable* null, %struct.movable** %m, align 8
  br label %if.end.27

if.end.27:                                        ; preds = %if.then.26, %land.lhs.true.24, %land.lhs.true.22, %for.end
  %27 = load %struct.movable*, %struct.movable** %m, align 8
  %cmp28 = icmp ne %struct.movable* %27, null
  br i1 %cmp28, label %if.then.29, label %if.end.38

if.then.29:                                       ; preds = %if.end.27
  %28 = load %struct.movable*, %struct.movable** %m1, align 8
  %29 = load %struct.movable*, %struct.movable** %m, align 8
  %forces = getelementptr inbounds %struct.movable, %struct.movable* %29, i32 0, i32 11
  store %struct.movable* %28, %struct.movable** %forces, align 8
  %30 = load %struct.movable*, %struct.movable** %m, align 8
  %lifetime = getelementptr inbounds %struct.movable, %struct.movable* %30, i32 0, i32 6
  %31 = load i16, i16* %lifetime, align 2
  %conv = sext i16 %31 to i32
  %32 = load %struct.movable*, %struct.movable** %m1, align 8
  %lifetime30 = getelementptr inbounds %struct.movable, %struct.movable* %32, i32 0, i32 6
  %33 = load i16, i16* %lifetime30, align 2
  %conv31 = sext i16 %33 to i32
  %add = add nsw i32 %conv31, %conv
  %conv32 = trunc i32 %add to i16
  store i16 %conv32, i16* %lifetime30, align 2
  %34 = load %struct.movable*, %struct.movable** %m, align 8
  %savings = getelementptr inbounds %struct.movable, %struct.movable* %34, i32 0, i32 7
  %35 = load i16, i16* %savings, align 2
  %conv33 = sext i16 %35 to i32
  %36 = load %struct.movable*, %struct.movable** %m1, align 8
  %savings34 = getelementptr inbounds %struct.movable, %struct.movable* %36, i32 0, i32 7
  %37 = load i16, i16* %savings34, align 2
  %conv35 = sext i16 %37 to i32
  %add36 = add nsw i32 %conv35, %conv33
  %conv37 = trunc i32 %add36 to i16
  store i16 %conv37, i16* %savings34, align 2
  br label %if.end.38

if.end.38:                                        ; preds = %if.then.29, %if.end.27
  br label %if.end.39

if.end.39:                                        ; preds = %if.end.38, %land.lhs.true, %for.body
  br label %for.inc.40

for.inc.40:                                       ; preds = %if.end.39
  %38 = load %struct.movable*, %struct.movable** %m1, align 8
  %next41 = getelementptr inbounds %struct.movable, %struct.movable* %38, i32 0, i32 12
  %39 = load %struct.movable*, %struct.movable** %next41, align 8
  store %struct.movable* %39, %struct.movable** %m1, align 8
  br label %for.cond

for.end.42:                                       ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @combine_movables(%struct.loop_movables* %movables, %struct.loop_regs* %regs) #0 {
entry:
  %movables.addr = alloca %struct.loop_movables*, align 8
  %regs.addr = alloca %struct.loop_regs*, align 8
  %m = alloca %struct.movable*, align 8
  %matched_regs = alloca i8*, align 8
  %mode = alloca i32, align 4
  %m1 = alloca %struct.movable*, align 8
  %regno6 = alloca i32, align 4
  %m0 = alloca %struct.movable*, align 8
  %m153 = alloca %struct.movable*, align 8
  %first = alloca i32, align 4
  %last = alloca i32, align 4
  store %struct.loop_movables* %movables, %struct.loop_movables** %movables.addr, align 8
  store %struct.loop_regs* %regs, %struct.loop_regs** %regs.addr, align 8
  %0 = load %struct.loop_regs*, %struct.loop_regs** %regs.addr, align 8
  %num = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %0, i32 0, i32 0
  %1 = load i32, i32* %num, align 4
  %conv = sext i32 %1 to i64
  %call = call noalias i8* @xmalloc(i64 %conv)
  store i8* %call, i8** %matched_regs, align 8
  %2 = load %struct.loop_movables*, %struct.loop_movables** %movables.addr, align 8
  %head = getelementptr inbounds %struct.loop_movables, %struct.loop_movables* %2, i32 0, i32 0
  %3 = load %struct.movable*, %struct.movable** %head, align 8
  store %struct.movable* %3, %struct.movable** %m, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc.16, %entry
  %4 = load %struct.movable*, %struct.movable** %m, align 8
  %tobool = icmp ne %struct.movable* %4, null
  br i1 %tobool, label %for.body, label %for.end.18

for.body:                                         ; preds = %for.cond
  %5 = load %struct.movable*, %struct.movable** %m, align 8
  %match = getelementptr inbounds %struct.movable, %struct.movable* %5, i32 0, i32 10
  %6 = load %struct.movable*, %struct.movable** %match, align 8
  %cmp = icmp eq %struct.movable* %6, null
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %7 = load %struct.movable*, %struct.movable** %m, align 8
  %regno = getelementptr inbounds %struct.movable, %struct.movable* %7, i32 0, i32 5
  %8 = load i32, i32* %regno, align 4
  %idxprom = zext i32 %8 to i64
  %9 = load %struct.loop_regs*, %struct.loop_regs** %regs.addr, align 8
  %array = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %9, i32 0, i32 2
  %10 = load %struct.loop_reg*, %struct.loop_reg** %array, align 8
  %arrayidx = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %10, i64 %idxprom
  %n_times_set = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %arrayidx, i32 0, i32 1
  %11 = load i32, i32* %n_times_set, align 4
  %cmp2 = icmp eq i32 %11, 1
  br i1 %cmp2, label %land.lhs.true.4, label %if.end

land.lhs.true.4:                                  ; preds = %land.lhs.true
  %12 = load %struct.movable*, %struct.movable** %m, align 8
  %partial = getelementptr inbounds %struct.movable, %struct.movable* %12, i32 0, i32 8
  %bf.load = load i8, i8* %partial, align 4
  %bf.lshr = lshr i8 %bf.load, 4
  %bf.clear = and i8 %bf.lshr, 1
  %bf.cast = zext i8 %bf.clear to i32
  %tobool5 = icmp ne i32 %bf.cast, 0
  br i1 %tobool5, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true.4
  %13 = load %struct.movable*, %struct.movable** %m, align 8
  %regno7 = getelementptr inbounds %struct.movable, %struct.movable* %13, i32 0, i32 5
  %14 = load i32, i32* %regno7, align 4
  store i32 %14, i32* %regno6, align 4
  %15 = load i8*, i8** %matched_regs, align 8
  %16 = load %struct.loop_regs*, %struct.loop_regs** %regs.addr, align 8
  %num8 = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %16, i32 0, i32 0
  %17 = load i32, i32* %num8, align 4
  %conv9 = sext i32 %17 to i64
  call void @llvm.memset.p0i8.i64(i8* %15, i8 0, i64 %conv9, i32 1, i1 false)
  %18 = load i32, i32* %regno6, align 4
  %idxprom10 = sext i32 %18 to i64
  %19 = load i8*, i8** %matched_regs, align 8
  %arrayidx11 = getelementptr inbounds i8, i8* %19, i64 %idxprom10
  store i8 1, i8* %arrayidx11, align 1
  %20 = load %struct.movable*, %struct.movable** %m, align 8
  %next = getelementptr inbounds %struct.movable, %struct.movable* %20, i32 0, i32 12
  %21 = load %struct.movable*, %struct.movable** %next, align 8
  store %struct.movable* %21, %struct.movable** %m1, align 8
  br label %for.cond.12

for.cond.12:                                      ; preds = %for.inc, %if.then
  %22 = load %struct.movable*, %struct.movable** %m1, align 8
  %tobool13 = icmp ne %struct.movable* %22, null
  br i1 %tobool13, label %for.body.14, label %for.end

for.body.14:                                      ; preds = %for.cond.12
  br label %for.inc

for.inc:                                          ; preds = %for.body.14
  %23 = load %struct.movable*, %struct.movable** %m1, align 8
  %next15 = getelementptr inbounds %struct.movable, %struct.movable* %23, i32 0, i32 12
  %24 = load %struct.movable*, %struct.movable** %next15, align 8
  store %struct.movable* %24, %struct.movable** %m1, align 8
  br label %for.cond.12

for.end:                                          ; preds = %for.cond.12
  br label %if.end

if.end:                                           ; preds = %for.end, %land.lhs.true.4, %land.lhs.true, %for.body
  br label %for.inc.16

for.inc.16:                                       ; preds = %if.end
  %25 = load %struct.movable*, %struct.movable** %m, align 8
  %next17 = getelementptr inbounds %struct.movable, %struct.movable* %25, i32 0, i32 12
  %26 = load %struct.movable*, %struct.movable** %next17, align 8
  store %struct.movable* %26, %struct.movable** %m, align 8
  br label %for.cond

for.end.18:                                       ; preds = %for.cond
  %27 = load i32, i32* getelementptr inbounds ([9 x i32], [9 x i32]* @class_narrowest_mode, i32 0, i64 1), align 4
  store i32 %27, i32* %mode, align 4
  br label %for.cond.19

for.cond.19:                                      ; preds = %for.inc.142, %for.end.18
  %28 = load i32, i32* %mode, align 4
  %cmp20 = icmp ne i32 %28, 0
  br i1 %cmp20, label %for.body.22, label %for.end.146

for.body.22:                                      ; preds = %for.cond.19
  store %struct.movable* null, %struct.movable** %m0, align 8
  %29 = load %struct.loop_movables*, %struct.loop_movables** %movables.addr, align 8
  %head23 = getelementptr inbounds %struct.loop_movables, %struct.loop_movables* %29, i32 0, i32 0
  %30 = load %struct.movable*, %struct.movable** %head23, align 8
  store %struct.movable* %30, %struct.movable** %m, align 8
  br label %for.cond.24

for.cond.24:                                      ; preds = %for.inc.139, %for.body.22
  %31 = load %struct.movable*, %struct.movable** %m, align 8
  %tobool25 = icmp ne %struct.movable* %31, null
  br i1 %tobool25, label %for.body.26, label %for.end.141

for.body.26:                                      ; preds = %for.cond.24
  %32 = load %struct.movable*, %struct.movable** %m, align 8
  %partial27 = getelementptr inbounds %struct.movable, %struct.movable* %32, i32 0, i32 8
  %bf.load28 = load i8, i8* %partial27, align 4
  %bf.lshr29 = lshr i8 %bf.load28, 4
  %bf.clear30 = and i8 %bf.lshr29, 1
  %bf.cast31 = zext i8 %bf.clear30 to i32
  %tobool32 = icmp ne i32 %bf.cast31, 0
  br i1 %tobool32, label %land.lhs.true.33, label %if.end.138

land.lhs.true.33:                                 ; preds = %for.body.26
  %33 = load %struct.movable*, %struct.movable** %m, align 8
  %global = getelementptr inbounds %struct.movable, %struct.movable* %33, i32 0, i32 8
  %bf.load34 = load i8, i8* %global, align 4
  %bf.lshr35 = lshr i8 %bf.load34, 2
  %bf.clear36 = and i8 %bf.lshr35, 1
  %bf.cast37 = zext i8 %bf.clear36 to i32
  %tobool38 = icmp ne i32 %bf.cast37, 0
  br i1 %tobool38, label %if.end.138, label %land.lhs.true.39

land.lhs.true.39:                                 ; preds = %land.lhs.true.33
  %34 = load i32, i32* %mode, align 4
  %35 = load %struct.movable*, %struct.movable** %m, align 8
  %insn = getelementptr inbounds %struct.movable, %struct.movable* %35, i32 0, i32 0
  %36 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %36, i32 0, i32 1
  %arrayidx40 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 2
  %rtx = bitcast %union.rtunion_def* %arrayidx40 to %struct.rtx_def**
  %37 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %fld41 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %37, i32 0, i32 1
  %arrayidx42 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld41, i32 0, i64 3
  %rtx43 = bitcast %union.rtunion_def* %arrayidx42 to %struct.rtx_def**
  %38 = load %struct.rtx_def*, %struct.rtx_def** %rtx43, align 8
  %fld44 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %38, i32 0, i32 1
  %arrayidx45 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld44, i32 0, i64 1
  %rtx46 = bitcast %union.rtunion_def* %arrayidx45 to %struct.rtx_def**
  %39 = load %struct.rtx_def*, %struct.rtx_def** %rtx46, align 8
  %40 = bitcast %struct.rtx_def* %39 to i32*
  %bf.load47 = load i32, i32* %40, align 8
  %bf.lshr48 = lshr i32 %bf.load47, 16
  %bf.clear49 = and i32 %bf.lshr48, 255
  %cmp50 = icmp eq i32 %34, %bf.clear49
  br i1 %cmp50, label %if.then.52, label %if.end.138

if.then.52:                                       ; preds = %land.lhs.true.39
  %41 = load %struct.movable*, %struct.movable** %m, align 8
  %regno54 = getelementptr inbounds %struct.movable, %struct.movable* %41, i32 0, i32 5
  %42 = load i32, i32* %regno54, align 4
  %idxprom55 = zext i32 %42 to i64
  %43 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %data = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %43, i32 0, i32 4
  %reg = bitcast %union.varray_data_tag* %data to [1 x %struct.reg_info_def*]*
  %arrayidx56 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %reg, i32 0, i64 %idxprom55
  %44 = load %struct.reg_info_def*, %struct.reg_info_def** %arrayidx56, align 8
  %first_uid = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %44, i32 0, i32 0
  %45 = load i32, i32* %first_uid, align 4
  %idxprom57 = sext i32 %45 to i64
  %46 = load i32*, i32** @uid_luid, align 8
  %arrayidx58 = getelementptr inbounds i32, i32* %46, i64 %idxprom57
  %47 = load i32, i32* %arrayidx58, align 4
  store i32 %47, i32* %first, align 4
  %48 = load %struct.movable*, %struct.movable** %m, align 8
  %regno59 = getelementptr inbounds %struct.movable, %struct.movable* %48, i32 0, i32 5
  %49 = load i32, i32* %regno59, align 4
  %idxprom60 = zext i32 %49 to i64
  %50 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %data61 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %50, i32 0, i32 4
  %reg62 = bitcast %union.varray_data_tag* %data61 to [1 x %struct.reg_info_def*]*
  %arrayidx63 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %reg62, i32 0, i64 %idxprom60
  %51 = load %struct.reg_info_def*, %struct.reg_info_def** %arrayidx63, align 8
  %last_uid = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %51, i32 0, i32 1
  %52 = load i32, i32* %last_uid, align 4
  %idxprom64 = sext i32 %52 to i64
  %53 = load i32*, i32** @uid_luid, align 8
  %arrayidx65 = getelementptr inbounds i32, i32* %53, i64 %idxprom64
  %54 = load i32, i32* %arrayidx65, align 4
  store i32 %54, i32* %last, align 4
  %55 = load %struct.movable*, %struct.movable** %m0, align 8
  %cmp66 = icmp eq %struct.movable* %55, null
  br i1 %cmp66, label %if.then.68, label %if.end.69

if.then.68:                                       ; preds = %if.then.52
  %56 = load %struct.movable*, %struct.movable** %m, align 8
  store %struct.movable* %56, %struct.movable** %m0, align 8
  br label %for.inc.139

if.end.69:                                        ; preds = %if.then.52
  %57 = load %struct.movable*, %struct.movable** %m, align 8
  %set_dest = getelementptr inbounds %struct.movable, %struct.movable* %57, i32 0, i32 2
  %58 = load %struct.rtx_def*, %struct.rtx_def** %set_dest, align 8
  %59 = bitcast %struct.rtx_def* %58 to i32*
  %bf.load70 = load i32, i32* %59, align 8
  %bf.lshr71 = lshr i32 %bf.load70, 16
  %bf.clear72 = and i32 %bf.lshr71, 255
  %60 = load %struct.movable*, %struct.movable** %m0, align 8
  %set_dest73 = getelementptr inbounds %struct.movable, %struct.movable* %60, i32 0, i32 2
  %61 = load %struct.rtx_def*, %struct.rtx_def** %set_dest73, align 8
  %62 = bitcast %struct.rtx_def* %61 to i32*
  %bf.load74 = load i32, i32* %62, align 8
  %bf.lshr75 = lshr i32 %bf.load74, 16
  %bf.clear76 = and i32 %bf.lshr75, 255
  %cmp77 = icmp ne i32 %bf.clear72, %bf.clear76
  br i1 %cmp77, label %if.then.79, label %if.end.80

if.then.79:                                       ; preds = %if.end.69
  br label %for.inc.139

if.end.80:                                        ; preds = %if.end.69
  %63 = load %struct.loop_movables*, %struct.loop_movables** %movables.addr, align 8
  %head81 = getelementptr inbounds %struct.loop_movables, %struct.loop_movables* %63, i32 0, i32 0
  %64 = load %struct.movable*, %struct.movable** %head81, align 8
  store %struct.movable* %64, %struct.movable** %m153, align 8
  br label %for.cond.82

for.cond.82:                                      ; preds = %for.inc.123, %if.end.80
  %65 = load %struct.movable*, %struct.movable** %m153, align 8
  %66 = load %struct.movable*, %struct.movable** %m, align 8
  %cmp83 = icmp ne %struct.movable* %65, %66
  br i1 %cmp83, label %for.body.85, label %for.end.125

for.body.85:                                      ; preds = %for.cond.82
  %67 = load %struct.movable*, %struct.movable** %m153, align 8
  %68 = load %struct.movable*, %struct.movable** %m0, align 8
  %cmp86 = icmp eq %struct.movable* %67, %68
  br i1 %cmp86, label %if.then.98, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body.85
  %69 = load %struct.movable*, %struct.movable** %m153, align 8
  %partial88 = getelementptr inbounds %struct.movable, %struct.movable* %69, i32 0, i32 8
  %bf.load89 = load i8, i8* %partial88, align 4
  %bf.lshr90 = lshr i8 %bf.load89, 4
  %bf.clear91 = and i8 %bf.lshr90, 1
  %bf.cast92 = zext i8 %bf.clear91 to i32
  %tobool93 = icmp ne i32 %bf.cast92, 0
  br i1 %tobool93, label %land.lhs.true.94, label %if.end.122

land.lhs.true.94:                                 ; preds = %lor.lhs.false
  %70 = load %struct.movable*, %struct.movable** %m153, align 8
  %match95 = getelementptr inbounds %struct.movable, %struct.movable* %70, i32 0, i32 10
  %71 = load %struct.movable*, %struct.movable** %match95, align 8
  %72 = load %struct.movable*, %struct.movable** %m0, align 8
  %cmp96 = icmp eq %struct.movable* %71, %72
  br i1 %cmp96, label %if.then.98, label %if.end.122

if.then.98:                                       ; preds = %land.lhs.true.94, %for.body.85
  %73 = load %struct.movable*, %struct.movable** %m153, align 8
  %regno99 = getelementptr inbounds %struct.movable, %struct.movable* %73, i32 0, i32 5
  %74 = load i32, i32* %regno99, align 4
  %idxprom100 = zext i32 %74 to i64
  %75 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %data101 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %75, i32 0, i32 4
  %reg102 = bitcast %union.varray_data_tag* %data101 to [1 x %struct.reg_info_def*]*
  %arrayidx103 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %reg102, i32 0, i64 %idxprom100
  %76 = load %struct.reg_info_def*, %struct.reg_info_def** %arrayidx103, align 8
  %first_uid104 = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %76, i32 0, i32 0
  %77 = load i32, i32* %first_uid104, align 4
  %idxprom105 = sext i32 %77 to i64
  %78 = load i32*, i32** @uid_luid, align 8
  %arrayidx106 = getelementptr inbounds i32, i32* %78, i64 %idxprom105
  %79 = load i32, i32* %arrayidx106, align 4
  %80 = load i32, i32* %last, align 4
  %cmp107 = icmp sgt i32 %79, %80
  br i1 %cmp107, label %if.end.121, label %lor.lhs.false.109

lor.lhs.false.109:                                ; preds = %if.then.98
  %81 = load %struct.movable*, %struct.movable** %m153, align 8
  %regno110 = getelementptr inbounds %struct.movable, %struct.movable* %81, i32 0, i32 5
  %82 = load i32, i32* %regno110, align 4
  %idxprom111 = zext i32 %82 to i64
  %83 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %data112 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %83, i32 0, i32 4
  %reg113 = bitcast %union.varray_data_tag* %data112 to [1 x %struct.reg_info_def*]*
  %arrayidx114 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %reg113, i32 0, i64 %idxprom111
  %84 = load %struct.reg_info_def*, %struct.reg_info_def** %arrayidx114, align 8
  %last_uid115 = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %84, i32 0, i32 1
  %85 = load i32, i32* %last_uid115, align 4
  %idxprom116 = sext i32 %85 to i64
  %86 = load i32*, i32** @uid_luid, align 8
  %arrayidx117 = getelementptr inbounds i32, i32* %86, i64 %idxprom116
  %87 = load i32, i32* %arrayidx117, align 4
  %88 = load i32, i32* %first, align 4
  %cmp118 = icmp slt i32 %87, %88
  br i1 %cmp118, label %if.end.121, label %if.then.120

if.then.120:                                      ; preds = %lor.lhs.false.109
  br label %overlap

if.end.121:                                       ; preds = %lor.lhs.false.109, %if.then.98
  br label %if.end.122

if.end.122:                                       ; preds = %if.end.121, %land.lhs.true.94, %lor.lhs.false
  br label %for.inc.123

for.inc.123:                                      ; preds = %if.end.122
  %89 = load %struct.movable*, %struct.movable** %m153, align 8
  %next124 = getelementptr inbounds %struct.movable, %struct.movable* %89, i32 0, i32 12
  %90 = load %struct.movable*, %struct.movable** %next124, align 8
  store %struct.movable* %90, %struct.movable** %m153, align 8
  br label %for.cond.82

for.end.125:                                      ; preds = %for.cond.82
  %91 = load %struct.movable*, %struct.movable** %m, align 8
  %lifetime = getelementptr inbounds %struct.movable, %struct.movable* %91, i32 0, i32 6
  %92 = load i16, i16* %lifetime, align 2
  %conv126 = sext i16 %92 to i32
  %93 = load %struct.movable*, %struct.movable** %m0, align 8
  %lifetime127 = getelementptr inbounds %struct.movable, %struct.movable* %93, i32 0, i32 6
  %94 = load i16, i16* %lifetime127, align 2
  %conv128 = sext i16 %94 to i32
  %add = add nsw i32 %conv128, %conv126
  %conv129 = trunc i32 %add to i16
  store i16 %conv129, i16* %lifetime127, align 2
  %95 = load %struct.movable*, %struct.movable** %m, align 8
  %savings = getelementptr inbounds %struct.movable, %struct.movable* %95, i32 0, i32 7
  %96 = load i16, i16* %savings, align 2
  %conv130 = sext i16 %96 to i32
  %97 = load %struct.movable*, %struct.movable** %m0, align 8
  %savings131 = getelementptr inbounds %struct.movable, %struct.movable* %97, i32 0, i32 7
  %98 = load i16, i16* %savings131, align 2
  %conv132 = sext i16 %98 to i32
  %add133 = add nsw i32 %conv132, %conv130
  %conv134 = trunc i32 %add133 to i16
  store i16 %conv134, i16* %savings131, align 2
  %99 = load %struct.movable*, %struct.movable** %m, align 8
  %done = getelementptr inbounds %struct.movable, %struct.movable* %99, i32 0, i32 8
  %bf.load135 = load i8, i8* %done, align 4
  %bf.clear136 = and i8 %bf.load135, -9
  %bf.set = or i8 %bf.clear136, 8
  store i8 %bf.set, i8* %done, align 4
  %100 = load %struct.movable*, %struct.movable** %m0, align 8
  %101 = load %struct.movable*, %struct.movable** %m, align 8
  %match137 = getelementptr inbounds %struct.movable, %struct.movable* %101, i32 0, i32 10
  store %struct.movable* %100, %struct.movable** %match137, align 8
  br label %overlap

overlap:                                          ; preds = %for.end.125, %if.then.120
  br label %if.end.138

if.end.138:                                       ; preds = %overlap, %land.lhs.true.39, %land.lhs.true.33, %for.body.26
  br label %for.inc.139

for.inc.139:                                      ; preds = %if.end.138, %if.then.79, %if.then.68
  %102 = load %struct.movable*, %struct.movable** %m, align 8
  %next140 = getelementptr inbounds %struct.movable, %struct.movable* %102, i32 0, i32 12
  %103 = load %struct.movable*, %struct.movable** %next140, align 8
  store %struct.movable* %103, %struct.movable** %m, align 8
  br label %for.cond.24

for.end.141:                                      ; preds = %for.cond.24
  br label %for.inc.142

for.inc.142:                                      ; preds = %for.end.141
  %104 = load i32, i32* %mode, align 4
  %idxprom143 = sext i32 %104 to i64
  %arrayidx144 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_wider_mode, i32 0, i64 %idxprom143
  %105 = load i8, i8* %arrayidx144, align 1
  %conv145 = zext i8 %105 to i32
  store i32 %conv145, i32* %mode, align 4
  br label %for.cond.19

for.end.146:                                      ; preds = %for.cond.19
  %106 = load i8*, i8** %matched_regs, align 8
  call void @free(i8* %106) #4
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @move_movables(%struct.loop* %loop, %struct.loop_movables* %movables, i32 %threshold, i32 %insn_count) #0 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %movables.addr = alloca %struct.loop_movables*, align 8
  %threshold.addr = alloca i32, align 4
  %insn_count.addr = alloca i32, align 4
  %regs = alloca %struct.loop_regs*, align 8
  %nregs = alloca i32, align 4
  %new_start = alloca %struct.rtx_def*, align 8
  %m = alloca %struct.movable*, align 8
  %p = alloca %struct.rtx_def*, align 8
  %loop_start = alloca %struct.rtx_def*, align 8
  %loop_end = alloca %struct.rtx_def*, align 8
  %reg_map = alloca %struct.rtx_def**, align 8
  %already_moved = alloca i8*, align 8
  %regno109 = alloca i32, align 4
  %p110 = alloca %struct.rtx_def*, align 8
  %savings = alloca i32, align 4
  %count = alloca i32, align 4
  %m1 = alloca %struct.movable*, align 8
  %first = alloca %struct.rtx_def*, align 8
  %newpat = alloca %struct.rtx_def*, align 8
  %i1 = alloca %struct.rtx_def*, align 8
  %r1 = alloca %struct.rtx_def*, align 8
  %r2 = alloca %struct.rtx_def*, align 8
  %i1239 = alloca %struct.rtx_def*, align 8
  %temp = alloca %struct.rtx_def*, align 8
  %seq = alloca %struct.rtx_def*, align 8
  %i1320 = alloca %struct.rtx_def*, align 8
  %temp321 = alloca %struct.rtx_def*, align 8
  %fn_address = alloca %struct.rtx_def*, align 8
  %fn_reg = alloca %struct.rtx_def*, align 8
  %fn_address_insn = alloca %struct.rtx_def*, align 8
  %body = alloca %struct.rtx_def*, align 8
  %n = alloca %struct.rtx_def*, align 8
  %next = alloca %struct.rtx_def*, align 8
  %reg = alloca %struct.rtx_def*, align 8
  %sequence = alloca %struct.rtx_def*, align 8
  %tem = alloca %struct.rtx_def*, align 8
  %seq549 = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  %temp846 = alloca %struct.rtx_def*, align 8
  %i899 = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  store %struct.loop_movables* %movables, %struct.loop_movables** %movables.addr, align 8
  store i32 %threshold, i32* %threshold.addr, align 4
  store i32 %insn_count, i32* %insn_count.addr, align 4
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %aux = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 22
  %1 = load i8*, i8** %aux, align 8
  %2 = bitcast i8* %1 to %struct.loop_info*
  %regs1 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %2, i32 0, i32 28
  store %struct.loop_regs* %regs1, %struct.loop_regs** %regs, align 8
  %3 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %num = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %3, i32 0, i32 0
  %4 = load i32, i32* %num, align 4
  store i32 %4, i32* %nregs, align 4
  store %struct.rtx_def* null, %struct.rtx_def** %new_start, align 8
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %start = getelementptr inbounds %struct.loop, %struct.loop* %5, i32 0, i32 26
  %6 = load %struct.rtx_def*, %struct.rtx_def** %start, align 8
  store %struct.rtx_def* %6, %struct.rtx_def** %loop_start, align 8
  %7 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %end = getelementptr inbounds %struct.loop, %struct.loop* %7, i32 0, i32 27
  %8 = load %struct.rtx_def*, %struct.rtx_def** %end, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %loop_end, align 8
  %9 = load i32, i32* %nregs, align 4
  %conv = sext i32 %9 to i64
  %call = call noalias i8* @xcalloc(i64 %conv, i64 8)
  %10 = bitcast i8* %call to %struct.rtx_def**
  store %struct.rtx_def** %10, %struct.rtx_def*** %reg_map, align 8
  %11 = load i32, i32* %nregs, align 4
  %conv2 = sext i32 %11 to i64
  %call3 = call noalias i8* @xcalloc(i64 %conv2, i64 1)
  store i8* %call3, i8** %already_moved, align 8
  %12 = load %struct.loop_movables*, %struct.loop_movables** %movables.addr, align 8
  %head = getelementptr inbounds %struct.loop_movables, %struct.loop_movables* %12, i32 0, i32 0
  %13 = load %struct.movable*, %struct.movable** %head, align 8
  store %struct.movable* %13, %struct.movable** %m, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc.1032, %entry
  %14 = load %struct.movable*, %struct.movable** %m, align 8
  %tobool = icmp ne %struct.movable* %14, null
  br i1 %tobool, label %for.body, label %for.end.1034

for.body:                                         ; preds = %for.cond
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %tobool4 = icmp ne %struct._IO_FILE* %15, null
  br i1 %tobool4, label %if.then, label %if.end.64

if.then:                                          ; preds = %for.body
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %17 = load %struct.movable*, %struct.movable** %m, align 8
  %insn = getelementptr inbounds %struct.movable, %struct.movable* %17, i32 0, i32 0
  %18 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtint = bitcast %union.rtunion_def* %arrayidx to i32*
  %19 = load i32, i32* %rtint, align 4
  %20 = load %struct.movable*, %struct.movable** %m, align 8
  %regno = getelementptr inbounds %struct.movable, %struct.movable* %20, i32 0, i32 5
  %21 = load i32, i32* %regno, align 4
  %22 = load %struct.movable*, %struct.movable** %m, align 8
  %lifetime = getelementptr inbounds %struct.movable, %struct.movable* %22, i32 0, i32 6
  %23 = load i16, i16* %lifetime, align 2
  %conv5 = sext i16 %23 to i32
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %16, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.4, i32 0, i32 0), i32 %19, i32 %21, i32 %conv5)
  %24 = load %struct.movable*, %struct.movable** %m, align 8
  %consec = getelementptr inbounds %struct.movable, %struct.movable* %24, i32 0, i32 4
  %25 = load i32, i32* %consec, align 4
  %cmp = icmp sgt i32 %25, 0
  br i1 %cmp, label %if.then.8, label %if.end

if.then.8:                                        ; preds = %if.then
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %27 = load %struct.movable*, %struct.movable** %m, align 8
  %consec9 = getelementptr inbounds %struct.movable, %struct.movable* %27, i32 0, i32 4
  %28 = load i32, i32* %consec9, align 4
  %call10 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %26, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.5, i32 0, i32 0), i32 %28)
  br label %if.end

if.end:                                           ; preds = %if.then.8, %if.then
  %29 = load %struct.movable*, %struct.movable** %m, align 8
  %cond = getelementptr inbounds %struct.movable, %struct.movable* %29, i32 0, i32 8
  %bf.load = load i8, i8* %cond, align 4
  %bf.clear = and i8 %bf.load, 1
  %bf.cast = zext i8 %bf.clear to i32
  %tobool11 = icmp ne i32 %bf.cast, 0
  br i1 %tobool11, label %if.then.12, label %if.end.14

if.then.12:                                       ; preds = %if.end
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %call13 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %30, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i32 0, i32 0))
  br label %if.end.14

if.end.14:                                        ; preds = %if.then.12, %if.end
  %31 = load %struct.movable*, %struct.movable** %m, align 8
  %force = getelementptr inbounds %struct.movable, %struct.movable* %31, i32 0, i32 8
  %bf.load15 = load i8, i8* %force, align 4
  %bf.lshr = lshr i8 %bf.load15, 1
  %bf.clear16 = and i8 %bf.lshr, 1
  %bf.cast17 = zext i8 %bf.clear16 to i32
  %tobool18 = icmp ne i32 %bf.cast17, 0
  br i1 %tobool18, label %if.then.19, label %if.end.21

if.then.19:                                       ; preds = %if.end.14
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %call20 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %32, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.7, i32 0, i32 0))
  br label %if.end.21

if.end.21:                                        ; preds = %if.then.19, %if.end.14
  %33 = load %struct.movable*, %struct.movable** %m, align 8
  %global = getelementptr inbounds %struct.movable, %struct.movable* %33, i32 0, i32 8
  %bf.load22 = load i8, i8* %global, align 4
  %bf.lshr23 = lshr i8 %bf.load22, 2
  %bf.clear24 = and i8 %bf.lshr23, 1
  %bf.cast25 = zext i8 %bf.clear24 to i32
  %tobool26 = icmp ne i32 %bf.cast25, 0
  br i1 %tobool26, label %if.then.27, label %if.end.29

if.then.27:                                       ; preds = %if.end.21
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %call28 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %34, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8, i32 0, i32 0))
  br label %if.end.29

if.end.29:                                        ; preds = %if.then.27, %if.end.21
  %35 = load %struct.movable*, %struct.movable** %m, align 8
  %done = getelementptr inbounds %struct.movable, %struct.movable* %35, i32 0, i32 8
  %bf.load30 = load i8, i8* %done, align 4
  %bf.lshr31 = lshr i8 %bf.load30, 3
  %bf.clear32 = and i8 %bf.lshr31, 1
  %bf.cast33 = zext i8 %bf.clear32 to i32
  %tobool34 = icmp ne i32 %bf.cast33, 0
  br i1 %tobool34, label %if.then.35, label %if.end.37

if.then.35:                                       ; preds = %if.end.29
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %call36 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %36, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i32 0, i32 0))
  br label %if.end.37

if.end.37:                                        ; preds = %if.then.35, %if.end.29
  %37 = load %struct.movable*, %struct.movable** %m, align 8
  %move_insn = getelementptr inbounds %struct.movable, %struct.movable* %37, i32 0, i32 8
  %bf.load38 = load i8, i8* %move_insn, align 4
  %bf.lshr39 = lshr i8 %bf.load38, 5
  %bf.clear40 = and i8 %bf.lshr39, 1
  %bf.cast41 = zext i8 %bf.clear40 to i32
  %tobool42 = icmp ne i32 %bf.cast41, 0
  br i1 %tobool42, label %if.then.43, label %if.end.45

if.then.43:                                       ; preds = %if.end.37
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %call44 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %38, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.10, i32 0, i32 0))
  br label %if.end.45

if.end.45:                                        ; preds = %if.then.43, %if.end.37
  %39 = load %struct.movable*, %struct.movable** %m, align 8
  %match = getelementptr inbounds %struct.movable, %struct.movable* %39, i32 0, i32 10
  %40 = load %struct.movable*, %struct.movable** %match, align 8
  %tobool46 = icmp ne %struct.movable* %40, null
  br i1 %tobool46, label %if.then.47, label %if.end.54

if.then.47:                                       ; preds = %if.end.45
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %42 = load %struct.movable*, %struct.movable** %m, align 8
  %match48 = getelementptr inbounds %struct.movable, %struct.movable* %42, i32 0, i32 10
  %43 = load %struct.movable*, %struct.movable** %match48, align 8
  %insn49 = getelementptr inbounds %struct.movable, %struct.movable* %43, i32 0, i32 0
  %44 = load %struct.rtx_def*, %struct.rtx_def** %insn49, align 8
  %fld50 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %44, i32 0, i32 1
  %arrayidx51 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld50, i32 0, i64 0
  %rtint52 = bitcast %union.rtunion_def* %arrayidx51 to i32*
  %45 = load i32, i32* %rtint52, align 4
  %call53 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %41, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.11, i32 0, i32 0), i32 %45)
  br label %if.end.54

if.end.54:                                        ; preds = %if.then.47, %if.end.45
  %46 = load %struct.movable*, %struct.movable** %m, align 8
  %forces = getelementptr inbounds %struct.movable, %struct.movable* %46, i32 0, i32 11
  %47 = load %struct.movable*, %struct.movable** %forces, align 8
  %tobool55 = icmp ne %struct.movable* %47, null
  br i1 %tobool55, label %if.then.56, label %if.end.63

if.then.56:                                       ; preds = %if.end.54
  %48 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %49 = load %struct.movable*, %struct.movable** %m, align 8
  %forces57 = getelementptr inbounds %struct.movable, %struct.movable* %49, i32 0, i32 11
  %50 = load %struct.movable*, %struct.movable** %forces57, align 8
  %insn58 = getelementptr inbounds %struct.movable, %struct.movable* %50, i32 0, i32 0
  %51 = load %struct.rtx_def*, %struct.rtx_def** %insn58, align 8
  %fld59 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %51, i32 0, i32 1
  %arrayidx60 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld59, i32 0, i64 0
  %rtint61 = bitcast %union.rtunion_def* %arrayidx60 to i32*
  %52 = load i32, i32* %rtint61, align 4
  %call62 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %48, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.12, i32 0, i32 0), i32 %52)
  br label %if.end.63

if.end.63:                                        ; preds = %if.then.56, %if.end.54
  br label %if.end.64

if.end.64:                                        ; preds = %if.end.63, %for.body
  %53 = load %struct.movable*, %struct.movable** %m, align 8
  %done65 = getelementptr inbounds %struct.movable, %struct.movable* %53, i32 0, i32 8
  %bf.load66 = load i8, i8* %done65, align 4
  %bf.lshr67 = lshr i8 %bf.load66, 3
  %bf.clear68 = and i8 %bf.lshr67, 1
  %bf.cast69 = zext i8 %bf.clear68 to i32
  %tobool70 = icmp ne i32 %bf.cast69, 0
  br i1 %tobool70, label %if.else.1019, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end.64
  %54 = load %struct.movable*, %struct.movable** %m, align 8
  %cond71 = getelementptr inbounds %struct.movable, %struct.movable* %54, i32 0, i32 8
  %bf.load72 = load i8, i8* %cond71, align 4
  %bf.clear73 = and i8 %bf.load72, 1
  %bf.cast74 = zext i8 %bf.clear73 to i32
  %tobool75 = icmp ne i32 %bf.cast74, 0
  br i1 %tobool75, label %lor.lhs.false, label %land.lhs.true.97

lor.lhs.false:                                    ; preds = %land.lhs.true
  %55 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %56 = load %struct.movable*, %struct.movable** %m, align 8
  %set_src = getelementptr inbounds %struct.movable, %struct.movable* %56, i32 0, i32 1
  %57 = load %struct.rtx_def*, %struct.rtx_def** %set_src, align 8
  %call76 = call i32 @loop_invariant_p(%struct.loop* %55, %struct.rtx_def* %57)
  %cmp77 = icmp eq i32 1, %call76
  br i1 %cmp77, label %land.lhs.true.79, label %if.else.1019

land.lhs.true.79:                                 ; preds = %lor.lhs.false
  %58 = load %struct.movable*, %struct.movable** %m, align 8
  %dependencies = getelementptr inbounds %struct.movable, %struct.movable* %58, i32 0, i32 3
  %59 = load %struct.rtx_def*, %struct.rtx_def** %dependencies, align 8
  %cmp80 = icmp eq %struct.rtx_def* %59, null
  br i1 %cmp80, label %land.lhs.true.87, label %lor.lhs.false.82

lor.lhs.false.82:                                 ; preds = %land.lhs.true.79
  %60 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %61 = load %struct.movable*, %struct.movable** %m, align 8
  %dependencies83 = getelementptr inbounds %struct.movable, %struct.movable* %61, i32 0, i32 3
  %62 = load %struct.rtx_def*, %struct.rtx_def** %dependencies83, align 8
  %call84 = call i32 @loop_invariant_p(%struct.loop* %60, %struct.rtx_def* %62)
  %cmp85 = icmp eq i32 1, %call84
  br i1 %cmp85, label %land.lhs.true.87, label %if.else.1019

land.lhs.true.87:                                 ; preds = %lor.lhs.false.82, %land.lhs.true.79
  %63 = load %struct.movable*, %struct.movable** %m, align 8
  %consec88 = getelementptr inbounds %struct.movable, %struct.movable* %63, i32 0, i32 4
  %64 = load i32, i32* %consec88, align 4
  %cmp89 = icmp eq i32 %64, 0
  br i1 %cmp89, label %land.lhs.true.97, label %lor.lhs.false.91

lor.lhs.false.91:                                 ; preds = %land.lhs.true.87
  %65 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %66 = load %struct.movable*, %struct.movable** %m, align 8
  %set_dest = getelementptr inbounds %struct.movable, %struct.movable* %66, i32 0, i32 2
  %67 = load %struct.rtx_def*, %struct.rtx_def** %set_dest, align 8
  %68 = load %struct.movable*, %struct.movable** %m, align 8
  %consec92 = getelementptr inbounds %struct.movable, %struct.movable* %68, i32 0, i32 4
  %69 = load i32, i32* %consec92, align 4
  %add = add nsw i32 %69, 1
  %70 = load %struct.movable*, %struct.movable** %m, align 8
  %insn93 = getelementptr inbounds %struct.movable, %struct.movable* %70, i32 0, i32 0
  %71 = load %struct.rtx_def*, %struct.rtx_def** %insn93, align 8
  %call94 = call i32 @consec_sets_invariant_p(%struct.loop* %65, %struct.rtx_def* %67, i32 %add, %struct.rtx_def* %71)
  %cmp95 = icmp eq i32 1, %call94
  br i1 %cmp95, label %land.lhs.true.97, label %if.else.1019

land.lhs.true.97:                                 ; preds = %lor.lhs.false.91, %land.lhs.true.87, %land.lhs.true
  %72 = load %struct.movable*, %struct.movable** %m, align 8
  %forces98 = getelementptr inbounds %struct.movable, %struct.movable* %72, i32 0, i32 11
  %73 = load %struct.movable*, %struct.movable** %forces98, align 8
  %tobool99 = icmp ne %struct.movable* %73, null
  br i1 %tobool99, label %lor.lhs.false.100, label %if.then.108

lor.lhs.false.100:                                ; preds = %land.lhs.true.97
  %74 = load %struct.movable*, %struct.movable** %m, align 8
  %forces101 = getelementptr inbounds %struct.movable, %struct.movable* %74, i32 0, i32 11
  %75 = load %struct.movable*, %struct.movable** %forces101, align 8
  %done102 = getelementptr inbounds %struct.movable, %struct.movable* %75, i32 0, i32 8
  %bf.load103 = load i8, i8* %done102, align 4
  %bf.lshr104 = lshr i8 %bf.load103, 3
  %bf.clear105 = and i8 %bf.lshr104, 1
  %bf.cast106 = zext i8 %bf.clear105 to i32
  %tobool107 = icmp ne i32 %bf.cast106, 0
  br i1 %tobool107, label %if.then.108, label %if.else.1019

if.then.108:                                      ; preds = %lor.lhs.false.100, %land.lhs.true.97
  %76 = load %struct.movable*, %struct.movable** %m, align 8
  %savings111 = getelementptr inbounds %struct.movable, %struct.movable* %76, i32 0, i32 7
  %77 = load i16, i16* %savings111, align 2
  %conv112 = sext i16 %77 to i32
  store i32 %conv112, i32* %savings, align 4
  %78 = load %struct.movable*, %struct.movable** %m, align 8
  %insn113 = getelementptr inbounds %struct.movable, %struct.movable* %78, i32 0, i32 0
  %79 = load %struct.rtx_def*, %struct.rtx_def** %insn113, align 8
  store %struct.rtx_def* %79, %struct.rtx_def** %p110, align 8
  %80 = load %struct.movable*, %struct.movable** %m, align 8
  %regno114 = getelementptr inbounds %struct.movable, %struct.movable* %80, i32 0, i32 5
  %81 = load i32, i32* %regno114, align 4
  store i32 %81, i32* %regno109, align 4
  %82 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %tobool115 = icmp ne %struct._IO_FILE* %82, null
  br i1 %tobool115, label %if.then.116, label %if.end.118

if.then.116:                                      ; preds = %if.then.108
  %83 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %84 = load i32, i32* %savings, align 4
  %call117 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %83, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.13, i32 0, i32 0), i32 %84)
  br label %if.end.118

if.end.118:                                       ; preds = %if.then.116, %if.then.108
  %85 = load i32, i32* %regno109, align 4
  %idxprom = sext i32 %85 to i64
  %86 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %array = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %86, i32 0, i32 2
  %87 = load %struct.loop_reg*, %struct.loop_reg** %array, align 8
  %arrayidx119 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %87, i64 %idxprom
  %moved_once = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %arrayidx119, i32 0, i32 4
  %88 = load i8, i8* %moved_once, align 1
  %conv120 = sext i8 %88 to i32
  %tobool121 = icmp ne i32 %conv120, 0
  br i1 %tobool121, label %land.lhs.true.122, label %if.end.126

land.lhs.true.122:                                ; preds = %if.end.118
  %89 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %tobool123 = icmp ne %struct._IO_FILE* %89, null
  br i1 %tobool123, label %if.then.124, label %if.end.126

if.then.124:                                      ; preds = %land.lhs.true.122
  %90 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %call125 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %90, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.14, i32 0, i32 0))
  br label %if.end.126

if.end.126:                                       ; preds = %if.then.124, %land.lhs.true.122, %if.end.118
  %91 = load i32, i32* %regno109, align 4
  %idxprom127 = sext i32 %91 to i64
  %92 = load i8*, i8** %already_moved, align 8
  %arrayidx128 = getelementptr inbounds i8, i8* %92, i64 %idxprom127
  %93 = load i8, i8* %arrayidx128, align 1
  %conv129 = sext i8 %93 to i32
  %tobool130 = icmp ne i32 %conv129, 0
  br i1 %tobool130, label %if.then.166, label %lor.lhs.false.131

lor.lhs.false.131:                                ; preds = %if.end.126
  %94 = load i32, i32* @flag_move_all_movables, align 4
  %tobool132 = icmp ne i32 %94, 0
  br i1 %tobool132, label %if.then.166, label %lor.lhs.false.133

lor.lhs.false.133:                                ; preds = %lor.lhs.false.131
  %95 = load i32, i32* %threshold.addr, align 4
  %96 = load i32, i32* %savings, align 4
  %mul = mul nsw i32 %95, %96
  %97 = load %struct.movable*, %struct.movable** %m, align 8
  %lifetime134 = getelementptr inbounds %struct.movable, %struct.movable* %97, i32 0, i32 6
  %98 = load i16, i16* %lifetime134, align 2
  %conv135 = sext i16 %98 to i32
  %mul136 = mul nsw i32 %mul, %conv135
  %99 = load i32, i32* %regno109, align 4
  %idxprom137 = sext i32 %99 to i64
  %100 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %array138 = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %100, i32 0, i32 2
  %101 = load %struct.loop_reg*, %struct.loop_reg** %array138, align 8
  %arrayidx139 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %101, i64 %idxprom137
  %moved_once140 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %arrayidx139, i32 0, i32 4
  %102 = load i8, i8* %moved_once140, align 1
  %conv141 = sext i8 %102 to i32
  %tobool142 = icmp ne i32 %conv141, 0
  br i1 %tobool142, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false.133
  %103 = load i32, i32* %insn_count.addr, align 4
  %mul143 = mul nsw i32 %103, 2
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false.133
  %104 = load i32, i32* %insn_count.addr, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond144 = phi i32 [ %mul143, %cond.true ], [ %104, %cond.false ]
  %cmp145 = icmp sge i32 %mul136, %cond144
  br i1 %cmp145, label %if.then.166, label %lor.lhs.false.147

lor.lhs.false.147:                                ; preds = %cond.end
  %105 = load %struct.movable*, %struct.movable** %m, align 8
  %forces148 = getelementptr inbounds %struct.movable, %struct.movable* %105, i32 0, i32 11
  %106 = load %struct.movable*, %struct.movable** %forces148, align 8
  %tobool149 = icmp ne %struct.movable* %106, null
  br i1 %tobool149, label %land.lhs.true.150, label %if.else.1013

land.lhs.true.150:                                ; preds = %lor.lhs.false.147
  %107 = load %struct.movable*, %struct.movable** %m, align 8
  %forces151 = getelementptr inbounds %struct.movable, %struct.movable* %107, i32 0, i32 11
  %108 = load %struct.movable*, %struct.movable** %forces151, align 8
  %done152 = getelementptr inbounds %struct.movable, %struct.movable* %108, i32 0, i32 8
  %bf.load153 = load i8, i8* %done152, align 4
  %bf.lshr154 = lshr i8 %bf.load153, 3
  %bf.clear155 = and i8 %bf.lshr154, 1
  %bf.cast156 = zext i8 %bf.clear155 to i32
  %tobool157 = icmp ne i32 %bf.cast156, 0
  br i1 %tobool157, label %land.lhs.true.158, label %if.else.1013

land.lhs.true.158:                                ; preds = %land.lhs.true.150
  %109 = load %struct.movable*, %struct.movable** %m, align 8
  %forces159 = getelementptr inbounds %struct.movable, %struct.movable* %109, i32 0, i32 11
  %110 = load %struct.movable*, %struct.movable** %forces159, align 8
  %regno160 = getelementptr inbounds %struct.movable, %struct.movable* %110, i32 0, i32 5
  %111 = load i32, i32* %regno160, align 4
  %idxprom161 = zext i32 %111 to i64
  %112 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %array162 = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %112, i32 0, i32 2
  %113 = load %struct.loop_reg*, %struct.loop_reg** %array162, align 8
  %arrayidx163 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %113, i64 %idxprom161
  %n_times_set = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %arrayidx163, i32 0, i32 1
  %114 = load i32, i32* %n_times_set, align 4
  %cmp164 = icmp eq i32 %114, 1
  br i1 %cmp164, label %if.then.166, label %if.else.1013

if.then.166:                                      ; preds = %land.lhs.true.158, %cond.end, %lor.lhs.false.131, %if.end.126
  store %struct.rtx_def* null, %struct.rtx_def** %first, align 8
  %115 = load %struct.movable*, %struct.movable** %m, align 8
  %partial = getelementptr inbounds %struct.movable, %struct.movable* %115, i32 0, i32 8
  %bf.load167 = load i8, i8* %partial, align 4
  %bf.lshr168 = lshr i8 %bf.load167, 4
  %bf.clear169 = and i8 %bf.lshr168, 1
  %bf.cast170 = zext i8 %bf.clear169 to i32
  %tobool171 = icmp ne i32 %bf.cast170, 0
  br i1 %tobool171, label %land.lhs.true.172, label %if.else

land.lhs.true.172:                                ; preds = %if.then.166
  %116 = load %struct.movable*, %struct.movable** %m, align 8
  %match173 = getelementptr inbounds %struct.movable, %struct.movable* %116, i32 0, i32 10
  %117 = load %struct.movable*, %struct.movable** %match173, align 8
  %tobool174 = icmp ne %struct.movable* %117, null
  br i1 %tobool174, label %if.then.175, label %if.else

if.then.175:                                      ; preds = %land.lhs.true.172
  %118 = load %struct.movable*, %struct.movable** %m, align 8
  store %struct.movable* %118, %struct.movable** %m1, align 8
  br label %for.cond.176

for.cond.176:                                     ; preds = %for.inc, %if.then.175
  %119 = load %struct.movable*, %struct.movable** %m1, align 8
  %match177 = getelementptr inbounds %struct.movable, %struct.movable* %119, i32 0, i32 10
  %120 = load %struct.movable*, %struct.movable** %match177, align 8
  %tobool178 = icmp ne %struct.movable* %120, null
  br i1 %tobool178, label %for.body.179, label %for.end

for.body.179:                                     ; preds = %for.cond.176
  br label %for.inc

for.inc:                                          ; preds = %for.body.179
  %121 = load %struct.movable*, %struct.movable** %m1, align 8
  %match180 = getelementptr inbounds %struct.movable, %struct.movable* %121, i32 0, i32 10
  %122 = load %struct.movable*, %struct.movable** %match180, align 8
  store %struct.movable* %122, %struct.movable** %m1, align 8
  br label %for.cond.176

for.end:                                          ; preds = %for.cond.176
  %123 = load %struct.movable*, %struct.movable** %m, align 8
  %insn181 = getelementptr inbounds %struct.movable, %struct.movable* %123, i32 0, i32 0
  %124 = load %struct.rtx_def*, %struct.rtx_def** %insn181, align 8
  %fld182 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %124, i32 0, i32 1
  %arrayidx183 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld182, i32 0, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx183 to %struct.rtx_def**
  %125 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %fld184 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %125, i32 0, i32 1
  %arrayidx185 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld184, i32 0, i64 0
  %rtx186 = bitcast %union.rtunion_def* %arrayidx185 to %struct.rtx_def**
  %126 = load %struct.rtx_def*, %struct.rtx_def** %rtx186, align 8
  %127 = load %struct.movable*, %struct.movable** %m1, align 8
  %insn187 = getelementptr inbounds %struct.movable, %struct.movable* %127, i32 0, i32 0
  %128 = load %struct.rtx_def*, %struct.rtx_def** %insn187, align 8
  %fld188 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %128, i32 0, i32 1
  %arrayidx189 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld188, i32 0, i64 3
  %rtx190 = bitcast %union.rtunion_def* %arrayidx189 to %struct.rtx_def**
  %129 = load %struct.rtx_def*, %struct.rtx_def** %rtx190, align 8
  %fld191 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %129, i32 0, i32 1
  %arrayidx192 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld191, i32 0, i64 0
  %rtx193 = bitcast %union.rtunion_def* %arrayidx192 to %struct.rtx_def**
  %130 = load %struct.rtx_def*, %struct.rtx_def** %rtx193, align 8
  %call194 = call %struct.rtx_def* @gen_move_insn(%struct.rtx_def* %126, %struct.rtx_def* %130)
  store %struct.rtx_def* %call194, %struct.rtx_def** %newpat, align 8
  %131 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %132 = load %struct.rtx_def*, %struct.rtx_def** %newpat, align 8
  %call195 = call %struct.rtx_def* @loop_insn_hoist(%struct.loop* %131, %struct.rtx_def* %132)
  store %struct.rtx_def* %call195, %struct.rtx_def** %i1, align 8
  %133 = load %struct.movable*, %struct.movable** %m, align 8
  %insn196 = getelementptr inbounds %struct.movable, %struct.movable* %133, i32 0, i32 0
  %134 = load %struct.rtx_def*, %struct.rtx_def** %insn196, align 8
  %fld197 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %134, i32 0, i32 1
  %arrayidx198 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld197, i32 0, i64 6
  %rtx199 = bitcast %union.rtunion_def* %arrayidx198 to %struct.rtx_def**
  %135 = load %struct.rtx_def*, %struct.rtx_def** %rtx199, align 8
  %136 = load %struct.rtx_def*, %struct.rtx_def** %i1, align 8
  %fld200 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %136, i32 0, i32 1
  %arrayidx201 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld200, i32 0, i64 6
  %rtx202 = bitcast %union.rtunion_def* %arrayidx201 to %struct.rtx_def**
  store %struct.rtx_def* %135, %struct.rtx_def** %rtx202, align 8
  %137 = load %struct.movable*, %struct.movable** %m, align 8
  %insn203 = getelementptr inbounds %struct.movable, %struct.movable* %137, i32 0, i32 0
  %138 = load %struct.rtx_def*, %struct.rtx_def** %insn203, align 8
  %fld204 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %138, i32 0, i32 1
  %arrayidx205 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld204, i32 0, i64 3
  %rtx206 = bitcast %union.rtunion_def* %arrayidx205 to %struct.rtx_def**
  %139 = load %struct.rtx_def*, %struct.rtx_def** %rtx206, align 8
  %fld207 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %139, i32 0, i32 1
  %arrayidx208 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld207, i32 0, i64 0
  %rtx209 = bitcast %union.rtunion_def* %arrayidx208 to %struct.rtx_def**
  %140 = load %struct.rtx_def*, %struct.rtx_def** %rtx209, align 8
  store %struct.rtx_def* %140, %struct.rtx_def** %r1, align 8
  %141 = load %struct.movable*, %struct.movable** %m1, align 8
  %insn210 = getelementptr inbounds %struct.movable, %struct.movable* %141, i32 0, i32 0
  %142 = load %struct.rtx_def*, %struct.rtx_def** %insn210, align 8
  %fld211 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %142, i32 0, i32 1
  %arrayidx212 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld211, i32 0, i64 3
  %rtx213 = bitcast %union.rtunion_def* %arrayidx212 to %struct.rtx_def**
  %143 = load %struct.rtx_def*, %struct.rtx_def** %rtx213, align 8
  %fld214 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %143, i32 0, i32 1
  %arrayidx215 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld214, i32 0, i64 0
  %rtx216 = bitcast %union.rtunion_def* %arrayidx215 to %struct.rtx_def**
  %144 = load %struct.rtx_def*, %struct.rtx_def** %rtx216, align 8
  store %struct.rtx_def* %144, %struct.rtx_def** %r2, align 8
  %145 = load %struct.rtx_def*, %struct.rtx_def** %r1, align 8
  %146 = load %struct.rtx_def*, %struct.rtx_def** %r2, align 8
  %147 = load %struct.rtx_def*, %struct.rtx_def** @regs_may_share, align 8
  %call217 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 0, %struct.rtx_def* %146, %struct.rtx_def* %147)
  %call218 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 0, %struct.rtx_def* %145, %struct.rtx_def* %call217)
  store %struct.rtx_def* %call218, %struct.rtx_def** @regs_may_share, align 8
  %148 = load %struct.movable*, %struct.movable** %m, align 8
  %insn219 = getelementptr inbounds %struct.movable, %struct.movable* %148, i32 0, i32 0
  %149 = load %struct.rtx_def*, %struct.rtx_def** %insn219, align 8
  %call220 = call %struct.rtx_def* @delete_insn(%struct.rtx_def* %149)
  %150 = load %struct.rtx_def*, %struct.rtx_def** %new_start, align 8
  %cmp221 = icmp eq %struct.rtx_def* %150, null
  br i1 %cmp221, label %if.then.223, label %if.end.224

if.then.223:                                      ; preds = %for.end
  %151 = load %struct.rtx_def*, %struct.rtx_def** %i1, align 8
  store %struct.rtx_def* %151, %struct.rtx_def** %new_start, align 8
  br label %if.end.224

if.end.224:                                       ; preds = %if.then.223, %for.end
  %152 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %tobool225 = icmp ne %struct._IO_FILE* %152, null
  br i1 %tobool225, label %if.then.226, label %if.end.231

if.then.226:                                      ; preds = %if.end.224
  %153 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %154 = load %struct.rtx_def*, %struct.rtx_def** %i1, align 8
  %fld227 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %154, i32 0, i32 1
  %arrayidx228 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld227, i32 0, i64 0
  %rtint229 = bitcast %union.rtunion_def* %arrayidx228 to i32*
  %155 = load i32, i32* %rtint229, align 4
  %call230 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %153, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.15, i32 0, i32 0), i32 %155)
  br label %if.end.231

if.end.231:                                       ; preds = %if.then.226, %if.end.224
  br label %if.end.650

if.else:                                          ; preds = %land.lhs.true.172, %if.then.166
  %156 = load %struct.movable*, %struct.movable** %m, align 8
  %move_insn232 = getelementptr inbounds %struct.movable, %struct.movable* %156, i32 0, i32 8
  %bf.load233 = load i8, i8* %move_insn232, align 4
  %bf.lshr234 = lshr i8 %bf.load233, 5
  %bf.clear235 = and i8 %bf.lshr234, 1
  %bf.cast236 = zext i8 %bf.clear235 to i32
  %tobool237 = icmp ne i32 %bf.cast236, 0
  br i1 %tobool237, label %if.then.238, label %if.else.314

if.then.238:                                      ; preds = %if.else
  %157 = load %struct.movable*, %struct.movable** %m, align 8
  %consec240 = getelementptr inbounds %struct.movable, %struct.movable* %157, i32 0, i32 4
  %158 = load i32, i32* %consec240, align 4
  store i32 %158, i32* %count, align 4
  br label %for.cond.241

for.cond.241:                                     ; preds = %for.inc.287, %if.then.238
  %159 = load i32, i32* %count, align 4
  %cmp242 = icmp sge i32 %159, 0
  br i1 %cmp242, label %for.body.244, label %for.end.288

for.body.244:                                     ; preds = %for.cond.241
  %160 = load %struct.rtx_def*, %struct.rtx_def** %p110, align 8
  %161 = bitcast %struct.rtx_def* %160 to i32*
  %bf.load245 = load i32, i32* %161, align 8
  %bf.clear246 = and i32 %bf.load245, 65535
  %cmp247 = icmp ne i32 %bf.clear246, 37
  br i1 %cmp247, label %land.lhs.true.249, label %if.end.256

land.lhs.true.249:                                ; preds = %for.body.244
  %162 = load %struct.rtx_def*, %struct.rtx_def** %p110, align 8
  %call250 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %162, i32 7, %struct.rtx_def* null)
  store %struct.rtx_def* %call250, %struct.rtx_def** %temp, align 8
  %tobool251 = icmp ne %struct.rtx_def* %call250, null
  br i1 %tobool251, label %if.then.252, label %if.end.256

if.then.252:                                      ; preds = %land.lhs.true.249
  %163 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %fld253 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %163, i32 0, i32 1
  %arrayidx254 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld253, i32 0, i64 0
  %rtx255 = bitcast %union.rtunion_def* %arrayidx254 to %struct.rtx_def**
  %164 = load %struct.rtx_def*, %struct.rtx_def** %rtx255, align 8
  store %struct.rtx_def* %164, %struct.rtx_def** %p110, align 8
  br label %if.end.256

if.end.256:                                       ; preds = %if.then.252, %land.lhs.true.249, %for.body.244
  %165 = load %struct.rtx_def*, %struct.rtx_def** %p110, align 8
  %166 = bitcast %struct.rtx_def* %165 to i32*
  %bf.load257 = load i32, i32* %166, align 8
  %bf.clear258 = and i32 %bf.load257, 65535
  %cmp259 = icmp ne i32 %bf.clear258, 37
  br i1 %cmp259, label %land.lhs.true.261, label %if.end.271

land.lhs.true.261:                                ; preds = %if.end.256
  %167 = load %struct.rtx_def*, %struct.rtx_def** %p110, align 8
  %call262 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %167, i32 6, %struct.rtx_def* null)
  store %struct.rtx_def* %call262, %struct.rtx_def** %temp, align 8
  %tobool263 = icmp ne %struct.rtx_def* %call262, null
  br i1 %tobool263, label %if.then.264, label %if.end.271

if.then.264:                                      ; preds = %land.lhs.true.261
  %168 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %fld265 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %168, i32 0, i32 1
  %arrayidx266 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld265, i32 0, i64 0
  %rtx267 = bitcast %union.rtunion_def* %arrayidx266 to %struct.rtx_def**
  %169 = load %struct.rtx_def*, %struct.rtx_def** %rtx267, align 8
  store %struct.rtx_def* %169, %struct.rtx_def** %temp, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then.264
  %170 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %171 = load %struct.rtx_def*, %struct.rtx_def** %p110, align 8
  %cmp268 = icmp ne %struct.rtx_def* %170, %171
  br i1 %cmp268, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %172 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %call270 = call %struct.rtx_def* @delete_insn(%struct.rtx_def* %172)
  store %struct.rtx_def* %call270, %struct.rtx_def** %temp, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end.271

if.end.271:                                       ; preds = %while.end, %land.lhs.true.261, %if.end.256
  %173 = load %struct.rtx_def*, %struct.rtx_def** %p110, align 8
  store %struct.rtx_def* %173, %struct.rtx_def** %temp, align 8
  %174 = load %struct.rtx_def*, %struct.rtx_def** %p110, align 8
  %call272 = call %struct.rtx_def* @delete_insn(%struct.rtx_def* %174)
  store %struct.rtx_def* %call272, %struct.rtx_def** %p110, align 8
  br label %while.cond.273

while.cond.273:                                   ; preds = %while.body.279, %if.end.271
  %175 = load %struct.rtx_def*, %struct.rtx_def** %p110, align 8
  %tobool274 = icmp ne %struct.rtx_def* %175, null
  br i1 %tobool274, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond.273
  %176 = load %struct.rtx_def*, %struct.rtx_def** %p110, align 8
  %177 = bitcast %struct.rtx_def* %176 to i32*
  %bf.load275 = load i32, i32* %177, align 8
  %bf.clear276 = and i32 %bf.load275, 65535
  %cmp277 = icmp eq i32 %bf.clear276, 37
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond.273
  %178 = phi i1 [ false, %while.cond.273 ], [ %cmp277, %land.rhs ]
  br i1 %178, label %while.body.279, label %while.end.286

while.body.279:                                   ; preds = %land.end
  %179 = load %struct.rtx_def*, %struct.rtx_def** %p110, align 8
  %fld280 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %179, i32 0, i32 1
  %arrayidx281 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld280, i32 0, i64 2
  %rtx282 = bitcast %union.rtunion_def* %arrayidx281 to %struct.rtx_def**
  %180 = load %struct.rtx_def*, %struct.rtx_def** %rtx282, align 8
  %181 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %fld283 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %181, i32 0, i32 1
  %arrayidx284 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld283, i32 0, i64 2
  %rtx285 = bitcast %union.rtunion_def* %arrayidx284 to %struct.rtx_def**
  store %struct.rtx_def* %180, %struct.rtx_def** %rtx285, align 8
  store %struct.rtx_def* %180, %struct.rtx_def** %p110, align 8
  br label %while.cond.273

while.end.286:                                    ; preds = %land.end
  br label %for.inc.287

for.inc.287:                                      ; preds = %while.end.286
  %182 = load i32, i32* %count, align 4
  %dec = add nsw i32 %182, -1
  store i32 %dec, i32* %count, align 4
  br label %for.cond.241

for.end.288:                                      ; preds = %for.cond.241
  call void @start_sequence()
  %183 = load %struct.movable*, %struct.movable** %m, align 8
  %set_dest289 = getelementptr inbounds %struct.movable, %struct.movable* %183, i32 0, i32 2
  %184 = load %struct.rtx_def*, %struct.rtx_def** %set_dest289, align 8
  %185 = load %struct.movable*, %struct.movable** %m, align 8
  %set_src290 = getelementptr inbounds %struct.movable, %struct.movable* %185, i32 0, i32 1
  %186 = load %struct.rtx_def*, %struct.rtx_def** %set_src290, align 8
  %call291 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %184, %struct.rtx_def* %186)
  %call292 = call %struct.rtx_def* @get_insns()
  store %struct.rtx_def* %call292, %struct.rtx_def** %temp, align 8
  %call293 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call293, %struct.rtx_def** %seq, align 8
  call void @end_sequence()
  %187 = load %struct.movable*, %struct.movable** %m, align 8
  %set_src294 = getelementptr inbounds %struct.movable, %struct.movable* %187, i32 0, i32 1
  %188 = load %struct.rtx_def*, %struct.rtx_def** %set_src294, align 8
  %189 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  call void @add_label_notes(%struct.rtx_def* %188, %struct.rtx_def* %189)
  %190 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %191 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8
  %call295 = call %struct.rtx_def* @loop_insn_hoist(%struct.loop* %190, %struct.rtx_def* %191)
  store %struct.rtx_def* %call295, %struct.rtx_def** %i1239, align 8
  %192 = load %struct.rtx_def*, %struct.rtx_def** %i1239, align 8
  %call296 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %192, i32 4, %struct.rtx_def* null)
  %tobool297 = icmp ne %struct.rtx_def* %call296, null
  br i1 %tobool297, label %if.end.306, label %if.then.298

if.then.298:                                      ; preds = %for.end.288
  %193 = load %struct.rtx_def*, %struct.rtx_def** %i1239, align 8
  %194 = load %struct.movable*, %struct.movable** %m, align 8
  %is_equiv = getelementptr inbounds %struct.movable, %struct.movable* %194, i32 0, i32 8
  %bf.load299 = load i8, i8* %is_equiv, align 4
  %bf.lshr300 = lshr i8 %bf.load299, 7
  %bf.cast301 = zext i8 %bf.lshr300 to i32
  %tobool302 = icmp ne i32 %bf.cast301, 0
  %cond303 = select i1 %tobool302, i32 3, i32 4
  %195 = load %struct.movable*, %struct.movable** %m, align 8
  %set_src304 = getelementptr inbounds %struct.movable, %struct.movable* %195, i32 0, i32 1
  %196 = load %struct.rtx_def*, %struct.rtx_def** %set_src304, align 8
  %call305 = call %struct.rtx_def* @set_unique_reg_note(%struct.rtx_def* %193, i32 %cond303, %struct.rtx_def* %196)
  br label %if.end.306

if.end.306:                                       ; preds = %if.then.298, %for.end.288
  %197 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %tobool307 = icmp ne %struct._IO_FILE* %197, null
  br i1 %tobool307, label %if.then.308, label %if.end.313

if.then.308:                                      ; preds = %if.end.306
  %198 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %199 = load %struct.rtx_def*, %struct.rtx_def** %i1239, align 8
  %fld309 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %199, i32 0, i32 1
  %arrayidx310 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld309, i32 0, i64 0
  %rtint311 = bitcast %union.rtunion_def* %arrayidx310 to i32*
  %200 = load i32, i32* %rtint311, align 4
  %call312 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %198, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.15, i32 0, i32 0), i32 %200)
  br label %if.end.313

if.end.313:                                       ; preds = %if.then.308, %if.end.306
  %201 = load i32, i32* %threshold.addr, align 4
  %sub = sub nsw i32 %201, 3
  store i32 %sub, i32* %threshold.addr, align 4
  br label %if.end.649

if.else.314:                                      ; preds = %if.else
  %202 = load %struct.movable*, %struct.movable** %m, align 8
  %consec315 = getelementptr inbounds %struct.movable, %struct.movable* %202, i32 0, i32 4
  %203 = load i32, i32* %consec315, align 4
  store i32 %203, i32* %count, align 4
  br label %for.cond.316

for.cond.316:                                     ; preds = %for.inc.645, %if.else.314
  %204 = load i32, i32* %count, align 4
  %cmp317 = icmp sge i32 %204, 0
  br i1 %cmp317, label %for.body.319, label %for.end.647

for.body.319:                                     ; preds = %for.cond.316
  %205 = load %struct.rtx_def*, %struct.rtx_def** %p110, align 8
  %206 = bitcast %struct.rtx_def* %205 to i32*
  %bf.load322 = load i32, i32* %206, align 8
  %bf.clear323 = and i32 %bf.load322, 65535
  %cmp324 = icmp ne i32 %bf.clear323, 37
  br i1 %cmp324, label %land.lhs.true.326, label %if.end.333

land.lhs.true.326:                                ; preds = %for.body.319
  %207 = load %struct.rtx_def*, %struct.rtx_def** %p110, align 8
  %call327 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %207, i32 7, %struct.rtx_def* null)
  store %struct.rtx_def* %call327, %struct.rtx_def** %temp321, align 8
  %tobool328 = icmp ne %struct.rtx_def* %call327, null
  br i1 %tobool328, label %if.then.329, label %if.end.333

if.then.329:                                      ; preds = %land.lhs.true.326
  %208 = load %struct.rtx_def*, %struct.rtx_def** %temp321, align 8
  %fld330 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %208, i32 0, i32 1
  %arrayidx331 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld330, i32 0, i64 0
  %rtx332 = bitcast %union.rtunion_def* %arrayidx331 to %struct.rtx_def**
  %209 = load %struct.rtx_def*, %struct.rtx_def** %rtx332, align 8
  store %struct.rtx_def* %209, %struct.rtx_def** %p110, align 8
  br label %if.end.333

if.end.333:                                       ; preds = %if.then.329, %land.lhs.true.326, %for.body.319
  %210 = load %struct.rtx_def*, %struct.rtx_def** %p110, align 8
  %211 = bitcast %struct.rtx_def* %210 to i32*
  %bf.load334 = load i32, i32* %211, align 8
  %bf.clear335 = and i32 %bf.load334, 65535
  %cmp336 = icmp ne i32 %bf.clear335, 37
  br i1 %cmp336, label %land.lhs.true.338, label %if.end.489

land.lhs.true.338:                                ; preds = %if.end.333
  %212 = load %struct.rtx_def*, %struct.rtx_def** %p110, align 8
  %call339 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %212, i32 6, %struct.rtx_def* null)
  store %struct.rtx_def* %call339, %struct.rtx_def** %temp321, align 8
  %tobool340 = icmp ne %struct.rtx_def* %call339, null
  br i1 %tobool340, label %if.then.341, label %if.end.489

if.then.341:                                      ; preds = %land.lhs.true.338
  store %struct.rtx_def* null, %struct.rtx_def** %fn_address, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %fn_reg, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %fn_address_insn, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %first, align 8
  %213 = load %struct.rtx_def*, %struct.rtx_def** %temp321, align 8
  %fld342 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %213, i32 0, i32 1
  %arrayidx343 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld342, i32 0, i64 0
  %rtx344 = bitcast %union.rtunion_def* %arrayidx343 to %struct.rtx_def**
  %214 = load %struct.rtx_def*, %struct.rtx_def** %rtx344, align 8
  store %struct.rtx_def* %214, %struct.rtx_def** %temp321, align 8
  br label %for.cond.345

for.cond.345:                                     ; preds = %for.inc.480, %if.then.341
  %215 = load %struct.rtx_def*, %struct.rtx_def** %temp321, align 8
  %216 = load %struct.rtx_def*, %struct.rtx_def** %p110, align 8
  %cmp346 = icmp ne %struct.rtx_def* %215, %216
  br i1 %cmp346, label %for.body.348, label %for.end.484

for.body.348:                                     ; preds = %for.cond.345
  %217 = load %struct.rtx_def*, %struct.rtx_def** %temp321, align 8
  %218 = bitcast %struct.rtx_def* %217 to i32*
  %bf.load349 = load i32, i32* %218, align 8
  %bf.clear350 = and i32 %bf.load349, 65535
  %cmp351 = icmp eq i32 %bf.clear350, 37
  br i1 %cmp351, label %if.then.353, label %if.end.354

if.then.353:                                      ; preds = %for.body.348
  br label %for.inc.480

if.end.354:                                       ; preds = %for.body.348
  %219 = load %struct.rtx_def*, %struct.rtx_def** %temp321, align 8
  %fld355 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %219, i32 0, i32 1
  %arrayidx356 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld355, i32 0, i64 3
  %rtx357 = bitcast %union.rtunion_def* %arrayidx356 to %struct.rtx_def**
  %220 = load %struct.rtx_def*, %struct.rtx_def** %rtx357, align 8
  store %struct.rtx_def* %220, %struct.rtx_def** %body, align 8
  %221 = load %struct.rtx_def*, %struct.rtx_def** %temp321, align 8
  %fld358 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %221, i32 0, i32 1
  %arrayidx359 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld358, i32 0, i64 2
  %rtx360 = bitcast %union.rtunion_def* %arrayidx359 to %struct.rtx_def**
  %222 = load %struct.rtx_def*, %struct.rtx_def** %rtx360, align 8
  store %struct.rtx_def* %222, %struct.rtx_def** %next, align 8
  br label %for.cond.361

for.cond.361:                                     ; preds = %for.inc.384, %if.end.354
  %223 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8
  %224 = load %struct.rtx_def*, %struct.rtx_def** %p110, align 8
  %cmp362 = icmp ne %struct.rtx_def* %223, %224
  br i1 %cmp362, label %for.body.364, label %for.end.388

for.body.364:                                     ; preds = %for.cond.361
  %225 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8
  %226 = bitcast %struct.rtx_def* %225 to i32*
  %bf.load365 = load i32, i32* %226, align 8
  %bf.clear366 = and i32 %bf.load365, 65535
  %cmp367 = icmp eq i32 %bf.clear366, 32
  br i1 %cmp367, label %land.lhs.true.369, label %land.lhs.true.377

land.lhs.true.369:                                ; preds = %for.body.364
  %227 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8
  %fld370 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %227, i32 0, i32 1
  %arrayidx371 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld370, i32 0, i64 3
  %rtx372 = bitcast %union.rtunion_def* %arrayidx371 to %struct.rtx_def**
  %228 = load %struct.rtx_def*, %struct.rtx_def** %rtx372, align 8
  %229 = bitcast %struct.rtx_def* %228 to i32*
  %bf.load373 = load i32, i32* %229, align 8
  %bf.clear374 = and i32 %bf.load373, 65535
  %cmp375 = icmp eq i32 %bf.clear374, 48
  br i1 %cmp375, label %if.end.383, label %land.lhs.true.377

land.lhs.true.377:                                ; preds = %land.lhs.true.369, %for.body.364
  %230 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8
  %231 = bitcast %struct.rtx_def* %230 to i32*
  %bf.load378 = load i32, i32* %231, align 8
  %bf.clear379 = and i32 %bf.load378, 65535
  %cmp380 = icmp ne i32 %bf.clear379, 37
  br i1 %cmp380, label %if.then.382, label %if.end.383

if.then.382:                                      ; preds = %land.lhs.true.377
  br label %for.end.388

if.end.383:                                       ; preds = %land.lhs.true.377, %land.lhs.true.369
  br label %for.inc.384

for.inc.384:                                      ; preds = %if.end.383
  %232 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8
  %fld385 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %232, i32 0, i32 1
  %arrayidx386 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld385, i32 0, i64 2
  %rtx387 = bitcast %union.rtunion_def* %arrayidx386 to %struct.rtx_def**
  %233 = load %struct.rtx_def*, %struct.rtx_def** %rtx387, align 8
  store %struct.rtx_def* %233, %struct.rtx_def** %next, align 8
  br label %for.cond.361

for.end.388:                                      ; preds = %if.then.382, %for.cond.361
  %234 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8
  %235 = bitcast %struct.rtx_def* %234 to i32*
  %bf.load389 = load i32, i32* %235, align 8
  %bf.clear390 = and i32 %bf.load389, 65535
  %cmp391 = icmp eq i32 %bf.clear390, 34
  br i1 %cmp391, label %land.lhs.true.393, label %if.end.425

land.lhs.true.393:                                ; preds = %for.end.388
  %236 = load %struct.rtx_def*, %struct.rtx_def** %body, align 8
  %237 = bitcast %struct.rtx_def* %236 to i32*
  %bf.load394 = load i32, i32* %237, align 8
  %bf.clear395 = and i32 %bf.load394, 65535
  %cmp396 = icmp eq i32 %bf.clear395, 47
  br i1 %cmp396, label %land.lhs.true.398, label %if.end.425

land.lhs.true.398:                                ; preds = %land.lhs.true.393
  %238 = load %struct.rtx_def*, %struct.rtx_def** %body, align 8
  %fld399 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %238, i32 0, i32 1
  %arrayidx400 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld399, i32 0, i64 0
  %rtx401 = bitcast %union.rtunion_def* %arrayidx400 to %struct.rtx_def**
  %239 = load %struct.rtx_def*, %struct.rtx_def** %rtx401, align 8
  %240 = bitcast %struct.rtx_def* %239 to i32*
  %bf.load402 = load i32, i32* %240, align 8
  %bf.clear403 = and i32 %bf.load402, 65535
  %cmp404 = icmp eq i32 %bf.clear403, 61
  br i1 %cmp404, label %land.lhs.true.406, label %if.end.425

land.lhs.true.406:                                ; preds = %land.lhs.true.398
  %241 = load %struct.rtx_def*, %struct.rtx_def** %temp321, align 8
  %call407 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %241, i32 4, %struct.rtx_def* null)
  store %struct.rtx_def* %call407, %struct.rtx_def** %n, align 8
  %tobool408 = icmp ne %struct.rtx_def* %call407, null
  br i1 %tobool408, label %if.then.409, label %if.end.425

if.then.409:                                      ; preds = %land.lhs.true.406
  %242 = load %struct.rtx_def*, %struct.rtx_def** %body, align 8
  %fld410 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %242, i32 0, i32 1
  %arrayidx411 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld410, i32 0, i64 1
  %rtx412 = bitcast %union.rtunion_def* %arrayidx411 to %struct.rtx_def**
  %243 = load %struct.rtx_def*, %struct.rtx_def** %rtx412, align 8
  store %struct.rtx_def* %243, %struct.rtx_def** %fn_reg, align 8
  %244 = load %struct.rtx_def*, %struct.rtx_def** %fn_reg, align 8
  %245 = bitcast %struct.rtx_def* %244 to i32*
  %bf.load413 = load i32, i32* %245, align 8
  %bf.clear414 = and i32 %bf.load413, 65535
  %cmp415 = icmp ne i32 %bf.clear414, 61
  br i1 %cmp415, label %if.then.417, label %if.end.421

if.then.417:                                      ; preds = %if.then.409
  %246 = load %struct.rtx_def*, %struct.rtx_def** %body, align 8
  %fld418 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %246, i32 0, i32 1
  %arrayidx419 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld418, i32 0, i64 0
  %rtx420 = bitcast %union.rtunion_def* %arrayidx419 to %struct.rtx_def**
  %247 = load %struct.rtx_def*, %struct.rtx_def** %rtx420, align 8
  store %struct.rtx_def* %247, %struct.rtx_def** %fn_reg, align 8
  br label %if.end.421

if.end.421:                                       ; preds = %if.then.417, %if.then.409
  %248 = load %struct.rtx_def*, %struct.rtx_def** %n, align 8
  %fld422 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %248, i32 0, i32 1
  %arrayidx423 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld422, i32 0, i64 0
  %rtx424 = bitcast %union.rtunion_def* %arrayidx423 to %struct.rtx_def**
  %249 = load %struct.rtx_def*, %struct.rtx_def** %rtx424, align 8
  store %struct.rtx_def* %249, %struct.rtx_def** %fn_address, align 8
  %250 = load %struct.rtx_def*, %struct.rtx_def** %temp321, align 8
  store %struct.rtx_def* %250, %struct.rtx_def** %fn_address_insn, align 8
  br label %if.end.425

if.end.425:                                       ; preds = %if.end.421, %land.lhs.true.406, %land.lhs.true.398, %land.lhs.true.393, %for.end.388
  %251 = load %struct.rtx_def*, %struct.rtx_def** %temp321, align 8
  %252 = bitcast %struct.rtx_def* %251 to i32*
  %bf.load426 = load i32, i32* %252, align 8
  %bf.clear427 = and i32 %bf.load426, 65535
  %cmp428 = icmp eq i32 %bf.clear427, 34
  br i1 %cmp428, label %land.lhs.true.430, label %if.end.439

land.lhs.true.430:                                ; preds = %if.end.425
  %253 = load %struct.rtx_def*, %struct.rtx_def** %fn_address, align 8
  %cmp431 = icmp ne %struct.rtx_def* %253, null
  br i1 %cmp431, label %land.lhs.true.433, label %if.end.439

land.lhs.true.433:                                ; preds = %land.lhs.true.430
  %254 = load %struct.rtx_def*, %struct.rtx_def** %fn_reg, align 8
  %255 = load %struct.rtx_def*, %struct.rtx_def** %body, align 8
  %call434 = call i32 @reg_referenced_p(%struct.rtx_def* %254, %struct.rtx_def* %255)
  %tobool435 = icmp ne i32 %call434, 0
  br i1 %tobool435, label %if.then.436, label %if.end.439

if.then.436:                                      ; preds = %land.lhs.true.433
  %256 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %257 = load %struct.rtx_def*, %struct.rtx_def** %fn_address_insn, align 8
  %258 = load %struct.rtx_def*, %struct.rtx_def** %fn_reg, align 8
  %259 = load %struct.rtx_def*, %struct.rtx_def** %fn_address, align 8
  %call437 = call %struct.rtx_def* @gen_move_insn(%struct.rtx_def* %258, %struct.rtx_def* %259)
  %call438 = call %struct.rtx_def* @loop_insn_emit_after(%struct.loop* %256, %struct.basic_block_def* null, %struct.rtx_def* %257, %struct.rtx_def* %call437)
  br label %if.end.439

if.end.439:                                       ; preds = %if.then.436, %land.lhs.true.433, %land.lhs.true.430, %if.end.425
  %260 = load %struct.rtx_def*, %struct.rtx_def** %temp321, align 8
  %261 = bitcast %struct.rtx_def* %260 to i32*
  %bf.load440 = load i32, i32* %261, align 8
  %bf.clear441 = and i32 %bf.load440, 65535
  %cmp442 = icmp eq i32 %bf.clear441, 34
  br i1 %cmp442, label %if.then.444, label %if.else.459

if.then.444:                                      ; preds = %if.end.439
  %262 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %263 = load %struct.rtx_def*, %struct.rtx_def** %body, align 8
  %call445 = call %struct.rtx_def* @loop_call_insn_hoist(%struct.loop* %262, %struct.rtx_def* %263)
  store %struct.rtx_def* %call445, %struct.rtx_def** %i1320, align 8
  %264 = load %struct.rtx_def*, %struct.rtx_def** %temp321, align 8
  %fld446 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %264, i32 0, i32 1
  %arrayidx447 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld446, i32 0, i64 7
  %rtx448 = bitcast %union.rtunion_def* %arrayidx447 to %struct.rtx_def**
  %265 = load %struct.rtx_def*, %struct.rtx_def** %rtx448, align 8
  %tobool449 = icmp ne %struct.rtx_def* %265, null
  br i1 %tobool449, label %if.then.450, label %if.end.458

if.then.450:                                      ; preds = %if.then.444
  %266 = load %struct.rtx_def*, %struct.rtx_def** %temp321, align 8
  %fld451 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %266, i32 0, i32 1
  %arrayidx452 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld451, i32 0, i64 7
  %rtx453 = bitcast %union.rtunion_def* %arrayidx452 to %struct.rtx_def**
  %267 = load %struct.rtx_def*, %struct.rtx_def** %rtx453, align 8
  %call454 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %267)
  %268 = load %struct.rtx_def*, %struct.rtx_def** %i1320, align 8
  %fld455 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %268, i32 0, i32 1
  %arrayidx456 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld455, i32 0, i64 7
  %rtx457 = bitcast %union.rtunion_def* %arrayidx456 to %struct.rtx_def**
  store %struct.rtx_def* %call454, %struct.rtx_def** %rtx457, align 8
  br label %if.end.458

if.end.458:                                       ; preds = %if.then.450, %if.then.444
  br label %if.end.461

if.else.459:                                      ; preds = %if.end.439
  %269 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %270 = load %struct.rtx_def*, %struct.rtx_def** %body, align 8
  %call460 = call %struct.rtx_def* @loop_insn_hoist(%struct.loop* %269, %struct.rtx_def* %270)
  store %struct.rtx_def* %call460, %struct.rtx_def** %i1320, align 8
  br label %if.end.461

if.end.461:                                       ; preds = %if.else.459, %if.end.458
  %271 = load %struct.rtx_def*, %struct.rtx_def** %first, align 8
  %cmp462 = icmp eq %struct.rtx_def* %271, null
  br i1 %cmp462, label %if.then.464, label %if.end.465

if.then.464:                                      ; preds = %if.end.461
  %272 = load %struct.rtx_def*, %struct.rtx_def** %i1320, align 8
  store %struct.rtx_def* %272, %struct.rtx_def** %first, align 8
  br label %if.end.465

if.end.465:                                       ; preds = %if.then.464, %if.end.461
  %273 = load %struct.rtx_def*, %struct.rtx_def** %temp321, align 8
  %274 = load %struct.rtx_def*, %struct.rtx_def** %fn_address_insn, align 8
  %cmp466 = icmp eq %struct.rtx_def* %273, %274
  br i1 %cmp466, label %if.then.468, label %if.end.469

if.then.468:                                      ; preds = %if.end.465
  %275 = load %struct.rtx_def*, %struct.rtx_def** %i1320, align 8
  store %struct.rtx_def* %275, %struct.rtx_def** %fn_address_insn, align 8
  br label %if.end.469

if.end.469:                                       ; preds = %if.then.468, %if.end.465
  %276 = load %struct.rtx_def*, %struct.rtx_def** %temp321, align 8
  %fld470 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %276, i32 0, i32 1
  %arrayidx471 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld470, i32 0, i64 6
  %rtx472 = bitcast %union.rtunion_def* %arrayidx471 to %struct.rtx_def**
  %277 = load %struct.rtx_def*, %struct.rtx_def** %rtx472, align 8
  %278 = load %struct.rtx_def*, %struct.rtx_def** %i1320, align 8
  %fld473 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %278, i32 0, i32 1
  %arrayidx474 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld473, i32 0, i64 6
  %rtx475 = bitcast %union.rtunion_def* %arrayidx474 to %struct.rtx_def**
  store %struct.rtx_def* %277, %struct.rtx_def** %rtx475, align 8
  %279 = load %struct.rtx_def*, %struct.rtx_def** %temp321, align 8
  %fld476 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %279, i32 0, i32 1
  %arrayidx477 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld476, i32 0, i64 6
  %rtx478 = bitcast %union.rtunion_def* %arrayidx477 to %struct.rtx_def**
  store %struct.rtx_def* null, %struct.rtx_def** %rtx478, align 8
  %280 = load %struct.rtx_def*, %struct.rtx_def** %temp321, align 8
  %call479 = call %struct.rtx_def* @delete_insn(%struct.rtx_def* %280)
  br label %for.inc.480

for.inc.480:                                      ; preds = %if.end.469, %if.then.353
  %281 = load %struct.rtx_def*, %struct.rtx_def** %temp321, align 8
  %fld481 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %281, i32 0, i32 1
  %arrayidx482 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld481, i32 0, i64 2
  %rtx483 = bitcast %union.rtunion_def* %arrayidx482 to %struct.rtx_def**
  %282 = load %struct.rtx_def*, %struct.rtx_def** %rtx483, align 8
  store %struct.rtx_def* %282, %struct.rtx_def** %temp321, align 8
  br label %for.cond.345

for.end.484:                                      ; preds = %for.cond.345
  %283 = load %struct.rtx_def*, %struct.rtx_def** %new_start, align 8
  %cmp485 = icmp eq %struct.rtx_def* %283, null
  br i1 %cmp485, label %if.then.487, label %if.end.488

if.then.487:                                      ; preds = %for.end.484
  %284 = load %struct.rtx_def*, %struct.rtx_def** %first, align 8
  store %struct.rtx_def* %284, %struct.rtx_def** %new_start, align 8
  br label %if.end.488

if.end.488:                                       ; preds = %if.then.487, %for.end.484
  br label %if.end.489

if.end.489:                                       ; preds = %if.end.488, %land.lhs.true.338, %if.end.333
  %285 = load %struct.movable*, %struct.movable** %m, align 8
  %savemode = getelementptr inbounds %struct.movable, %struct.movable* %285, i32 0, i32 9
  %286 = load i32, i32* %savemode, align 4
  %cmp490 = icmp ne i32 %286, 0
  br i1 %cmp490, label %if.then.492, label %if.else.515

if.then.492:                                      ; preds = %if.end.489
  %287 = load %struct.movable*, %struct.movable** %m, align 8
  %set_dest493 = getelementptr inbounds %struct.movable, %struct.movable* %287, i32 0, i32 2
  %288 = load %struct.rtx_def*, %struct.rtx_def** %set_dest493, align 8
  store %struct.rtx_def* %288, %struct.rtx_def** %reg, align 8
  call void @start_sequence()
  %289 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %290 = bitcast %struct.rtx_def* %289 to i32*
  %bf.load494 = load i32, i32* %290, align 8
  %bf.lshr495 = lshr i32 %bf.load494, 16
  %bf.clear496 = and i32 %bf.lshr495, 255
  %291 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %292 = load %struct.movable*, %struct.movable** %m, align 8
  %savemode497 = getelementptr inbounds %struct.movable, %struct.movable* %292, i32 0, i32 9
  %293 = load i32, i32* %savemode497, align 4
  %idxprom498 = sext i32 %293 to i64
  %arrayidx499 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom498
  %294 = load i16, i16* %arrayidx499, align 2
  %conv500 = zext i16 %294 to i32
  %sh_prom = zext i32 %conv500 to i64
  %shl = shl i64 1, %sh_prom
  %sub501 = sub nsw i64 %shl, 1
  %call502 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %sub501)
  %295 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %call503 = call %struct.rtx_def* @expand_simple_binop(i32 %bf.clear496, i32 83, %struct.rtx_def* %291, %struct.rtx_def* %call502, %struct.rtx_def* %295, i32 1, i32 3)
  store %struct.rtx_def* %call503, %struct.rtx_def** %tem, align 8
  %296 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %cmp504 = icmp eq %struct.rtx_def* %296, null
  br i1 %cmp504, label %if.then.506, label %if.end.507

if.then.506:                                      ; preds = %if.then.492
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 2081, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @__FUNCTION__.move_movables, i32 0, i32 0)) #6
  unreachable

if.end.507:                                       ; preds = %if.then.492
  %297 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %298 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %cmp508 = icmp ne %struct.rtx_def* %297, %298
  br i1 %cmp508, label %if.then.510, label %if.end.512

if.then.510:                                      ; preds = %if.end.507
  %299 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %300 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %call511 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %299, %struct.rtx_def* %300)
  br label %if.end.512

if.end.512:                                       ; preds = %if.then.510, %if.end.507
  %call513 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call513, %struct.rtx_def** %sequence, align 8
  call void @end_sequence()
  %301 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %302 = load %struct.rtx_def*, %struct.rtx_def** %sequence, align 8
  %call514 = call %struct.rtx_def* @loop_insn_hoist(%struct.loop* %301, %struct.rtx_def* %302)
  store %struct.rtx_def* %call514, %struct.rtx_def** %i1320, align 8
  br label %if.end.576

if.else.515:                                      ; preds = %if.end.489
  %303 = load %struct.rtx_def*, %struct.rtx_def** %p110, align 8
  %304 = bitcast %struct.rtx_def* %303 to i32*
  %bf.load516 = load i32, i32* %304, align 8
  %bf.clear517 = and i32 %bf.load516, 65535
  %cmp518 = icmp eq i32 %bf.clear517, 34
  br i1 %cmp518, label %if.then.520, label %if.else.538

if.then.520:                                      ; preds = %if.else.515
  %305 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %306 = load %struct.rtx_def*, %struct.rtx_def** %p110, align 8
  %fld521 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %306, i32 0, i32 1
  %arrayidx522 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld521, i32 0, i64 3
  %rtx523 = bitcast %union.rtunion_def* %arrayidx522 to %struct.rtx_def**
  %307 = load %struct.rtx_def*, %struct.rtx_def** %rtx523, align 8
  %call524 = call %struct.rtx_def* @loop_call_insn_hoist(%struct.loop* %305, %struct.rtx_def* %307)
  store %struct.rtx_def* %call524, %struct.rtx_def** %i1320, align 8
  %308 = load %struct.rtx_def*, %struct.rtx_def** %p110, align 8
  %fld525 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %308, i32 0, i32 1
  %arrayidx526 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld525, i32 0, i64 7
  %rtx527 = bitcast %union.rtunion_def* %arrayidx526 to %struct.rtx_def**
  %309 = load %struct.rtx_def*, %struct.rtx_def** %rtx527, align 8
  %tobool528 = icmp ne %struct.rtx_def* %309, null
  br i1 %tobool528, label %if.then.529, label %if.end.537

if.then.529:                                      ; preds = %if.then.520
  %310 = load %struct.rtx_def*, %struct.rtx_def** %p110, align 8
  %fld530 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %310, i32 0, i32 1
  %arrayidx531 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld530, i32 0, i64 7
  %rtx532 = bitcast %union.rtunion_def* %arrayidx531 to %struct.rtx_def**
  %311 = load %struct.rtx_def*, %struct.rtx_def** %rtx532, align 8
  %call533 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %311)
  %312 = load %struct.rtx_def*, %struct.rtx_def** %i1320, align 8
  %fld534 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %312, i32 0, i32 1
  %arrayidx535 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld534, i32 0, i64 7
  %rtx536 = bitcast %union.rtunion_def* %arrayidx535 to %struct.rtx_def**
  store %struct.rtx_def* %call533, %struct.rtx_def** %rtx536, align 8
  br label %if.end.537

if.end.537:                                       ; preds = %if.then.529, %if.then.520
  br label %if.end.575

if.else.538:                                      ; preds = %if.else.515
  %313 = load i32, i32* %count, align 4
  %314 = load %struct.movable*, %struct.movable** %m, align 8
  %consec539 = getelementptr inbounds %struct.movable, %struct.movable* %314, i32 0, i32 4
  %315 = load i32, i32* %consec539, align 4
  %cmp540 = icmp eq i32 %313, %315
  br i1 %cmp540, label %land.lhs.true.542, label %if.else.569

land.lhs.true.542:                                ; preds = %if.else.538
  %316 = load %struct.movable*, %struct.movable** %m, align 8
  %move_insn_first = getelementptr inbounds %struct.movable, %struct.movable* %316, i32 0, i32 8
  %bf.load543 = load i8, i8* %move_insn_first, align 4
  %bf.lshr544 = lshr i8 %bf.load543, 6
  %bf.clear545 = and i8 %bf.lshr544, 1
  %bf.cast546 = zext i8 %bf.clear545 to i32
  %tobool547 = icmp ne i32 %bf.cast546, 0
  br i1 %tobool547, label %if.then.548, label %if.else.569

if.then.548:                                      ; preds = %land.lhs.true.542
  call void @start_sequence()
  %317 = load %struct.movable*, %struct.movable** %m, align 8
  %set_dest550 = getelementptr inbounds %struct.movable, %struct.movable* %317, i32 0, i32 2
  %318 = load %struct.rtx_def*, %struct.rtx_def** %set_dest550, align 8
  %319 = load %struct.movable*, %struct.movable** %m, align 8
  %set_src551 = getelementptr inbounds %struct.movable, %struct.movable* %319, i32 0, i32 1
  %320 = load %struct.rtx_def*, %struct.rtx_def** %set_src551, align 8
  %call552 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %318, %struct.rtx_def* %320)
  %call553 = call %struct.rtx_def* @get_insns()
  store %struct.rtx_def* %call553, %struct.rtx_def** %temp321, align 8
  %call554 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call554, %struct.rtx_def** %seq549, align 8
  call void @end_sequence()
  %321 = load %struct.movable*, %struct.movable** %m, align 8
  %set_src555 = getelementptr inbounds %struct.movable, %struct.movable* %321, i32 0, i32 1
  %322 = load %struct.rtx_def*, %struct.rtx_def** %set_src555, align 8
  %323 = load %struct.rtx_def*, %struct.rtx_def** %temp321, align 8
  call void @add_label_notes(%struct.rtx_def* %322, %struct.rtx_def* %323)
  %324 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %325 = load %struct.rtx_def*, %struct.rtx_def** %seq549, align 8
  %call556 = call %struct.rtx_def* @loop_insn_hoist(%struct.loop* %324, %struct.rtx_def* %325)
  store %struct.rtx_def* %call556, %struct.rtx_def** %i1320, align 8
  %326 = load %struct.rtx_def*, %struct.rtx_def** %i1320, align 8
  %call557 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %326, i32 4, %struct.rtx_def* null)
  %tobool558 = icmp ne %struct.rtx_def* %call557, null
  br i1 %tobool558, label %if.end.568, label %if.then.559

if.then.559:                                      ; preds = %if.then.548
  %327 = load %struct.rtx_def*, %struct.rtx_def** %i1320, align 8
  %328 = load %struct.movable*, %struct.movable** %m, align 8
  %is_equiv560 = getelementptr inbounds %struct.movable, %struct.movable* %328, i32 0, i32 8
  %bf.load561 = load i8, i8* %is_equiv560, align 4
  %bf.lshr562 = lshr i8 %bf.load561, 7
  %bf.cast563 = zext i8 %bf.lshr562 to i32
  %tobool564 = icmp ne i32 %bf.cast563, 0
  %cond565 = select i1 %tobool564, i32 3, i32 4
  %329 = load %struct.movable*, %struct.movable** %m, align 8
  %set_src566 = getelementptr inbounds %struct.movable, %struct.movable* %329, i32 0, i32 1
  %330 = load %struct.rtx_def*, %struct.rtx_def** %set_src566, align 8
  %call567 = call %struct.rtx_def* @set_unique_reg_note(%struct.rtx_def* %327, i32 %cond565, %struct.rtx_def* %330)
  br label %if.end.568

if.end.568:                                       ; preds = %if.then.559, %if.then.548
  br label %if.end.574

if.else.569:                                      ; preds = %land.lhs.true.542, %if.else.538
  %331 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %332 = load %struct.rtx_def*, %struct.rtx_def** %p110, align 8
  %fld570 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %332, i32 0, i32 1
  %arrayidx571 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld570, i32 0, i64 3
  %rtx572 = bitcast %union.rtunion_def* %arrayidx571 to %struct.rtx_def**
  %333 = load %struct.rtx_def*, %struct.rtx_def** %rtx572, align 8
  %call573 = call %struct.rtx_def* @loop_insn_hoist(%struct.loop* %331, %struct.rtx_def* %333)
  store %struct.rtx_def* %call573, %struct.rtx_def** %i1320, align 8
  br label %if.end.574

if.end.574:                                       ; preds = %if.else.569, %if.end.568
  br label %if.end.575

if.end.575:                                       ; preds = %if.end.574, %if.end.537
  br label %if.end.576

if.end.576:                                       ; preds = %if.end.575, %if.end.512
  %334 = load %struct.rtx_def*, %struct.rtx_def** %i1320, align 8
  %fld577 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %334, i32 0, i32 1
  %arrayidx578 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld577, i32 0, i64 6
  %rtx579 = bitcast %union.rtunion_def* %arrayidx578 to %struct.rtx_def**
  %335 = load %struct.rtx_def*, %struct.rtx_def** %rtx579, align 8
  %cmp580 = icmp eq %struct.rtx_def* %335, null
  br i1 %cmp580, label %if.then.582, label %if.end.602

if.then.582:                                      ; preds = %if.end.576
  %336 = load %struct.rtx_def*, %struct.rtx_def** %p110, align 8
  %fld583 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %336, i32 0, i32 1
  %arrayidx584 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld583, i32 0, i64 6
  %rtx585 = bitcast %union.rtunion_def* %arrayidx584 to %struct.rtx_def**
  %337 = load %struct.rtx_def*, %struct.rtx_def** %rtx585, align 8
  %338 = load %struct.rtx_def*, %struct.rtx_def** %i1320, align 8
  %fld586 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %338, i32 0, i32 1
  %arrayidx587 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld586, i32 0, i64 6
  %rtx588 = bitcast %union.rtunion_def* %arrayidx587 to %struct.rtx_def**
  store %struct.rtx_def* %337, %struct.rtx_def** %rtx588, align 8
  %339 = load %struct.rtx_def*, %struct.rtx_def** %p110, align 8
  %fld589 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %339, i32 0, i32 1
  %arrayidx590 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld589, i32 0, i64 6
  %rtx591 = bitcast %union.rtunion_def* %arrayidx590 to %struct.rtx_def**
  store %struct.rtx_def* null, %struct.rtx_def** %rtx591, align 8
  %340 = load %struct.rtx_def*, %struct.rtx_def** %i1320, align 8
  %call592 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %340, i32 4, %struct.rtx_def* null)
  store %struct.rtx_def* %call592, %struct.rtx_def** %temp321, align 8
  %tobool593 = icmp ne %struct.rtx_def* %call592, null
  br i1 %tobool593, label %land.lhs.true.594, label %if.end.601

land.lhs.true.594:                                ; preds = %if.then.582
  %341 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %342 = load %struct.rtx_def*, %struct.rtx_def** %temp321, align 8
  %fld595 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %342, i32 0, i32 1
  %arrayidx596 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld595, i32 0, i64 0
  %rtx597 = bitcast %union.rtunion_def* %arrayidx596 to %struct.rtx_def**
  %343 = load %struct.rtx_def*, %struct.rtx_def** %rtx597, align 8
  %call598 = call i32 @loop_invariant_p(%struct.loop* %341, %struct.rtx_def* %343)
  %tobool599 = icmp ne i32 %call598, 0
  br i1 %tobool599, label %if.end.601, label %if.then.600

if.then.600:                                      ; preds = %land.lhs.true.594
  %344 = load %struct.rtx_def*, %struct.rtx_def** %i1320, align 8
  %345 = load %struct.rtx_def*, %struct.rtx_def** %temp321, align 8
  call void @remove_note(%struct.rtx_def* %344, %struct.rtx_def* %345)
  br label %if.end.601

if.end.601:                                       ; preds = %if.then.600, %land.lhs.true.594, %if.then.582
  br label %if.end.602

if.end.602:                                       ; preds = %if.end.601, %if.end.576
  %346 = load %struct.rtx_def*, %struct.rtx_def** %new_start, align 8
  %cmp603 = icmp eq %struct.rtx_def* %346, null
  br i1 %cmp603, label %if.then.605, label %if.end.606

if.then.605:                                      ; preds = %if.end.602
  %347 = load %struct.rtx_def*, %struct.rtx_def** %i1320, align 8
  store %struct.rtx_def* %347, %struct.rtx_def** %new_start, align 8
  br label %if.end.606

if.end.606:                                       ; preds = %if.then.605, %if.end.602
  %348 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %tobool607 = icmp ne %struct._IO_FILE* %348, null
  br i1 %tobool607, label %if.then.608, label %if.end.613

if.then.608:                                      ; preds = %if.end.606
  %349 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %350 = load %struct.rtx_def*, %struct.rtx_def** %i1320, align 8
  %fld609 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %350, i32 0, i32 1
  %arrayidx610 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld609, i32 0, i64 0
  %rtint611 = bitcast %union.rtunion_def* %arrayidx610 to i32*
  %351 = load i32, i32* %rtint611, align 4
  %call612 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %349, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.15, i32 0, i32 0), i32 %351)
  br label %if.end.613

if.end.613:                                       ; preds = %if.then.608, %if.end.606
  %352 = load %struct.rtx_def*, %struct.rtx_def** %i1320, align 8
  %call614 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %352, i32 6, %struct.rtx_def* null)
  store %struct.rtx_def* %call614, %struct.rtx_def** %temp321, align 8
  %tobool615 = icmp ne %struct.rtx_def* %call614, null
  br i1 %tobool615, label %if.then.616, label %if.end.624

if.then.616:                                      ; preds = %if.end.613
  %353 = load %struct.rtx_def*, %struct.rtx_def** %first, align 8
  %354 = load %struct.rtx_def*, %struct.rtx_def** %temp321, align 8
  %fld617 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %354, i32 0, i32 1
  %arrayidx618 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld617, i32 0, i64 0
  %rtx619 = bitcast %union.rtunion_def* %arrayidx618 to %struct.rtx_def**
  store %struct.rtx_def* %353, %struct.rtx_def** %rtx619, align 8
  %355 = load %struct.rtx_def*, %struct.rtx_def** %first, align 8
  %call620 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %355, i32 7, %struct.rtx_def* null)
  store %struct.rtx_def* %call620, %struct.rtx_def** %temp321, align 8
  %356 = load %struct.rtx_def*, %struct.rtx_def** %i1320, align 8
  %357 = load %struct.rtx_def*, %struct.rtx_def** %temp321, align 8
  %fld621 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %357, i32 0, i32 1
  %arrayidx622 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld621, i32 0, i64 0
  %rtx623 = bitcast %union.rtunion_def* %arrayidx622 to %struct.rtx_def**
  store %struct.rtx_def* %356, %struct.rtx_def** %rtx623, align 8
  br label %if.end.624

if.end.624:                                       ; preds = %if.then.616, %if.end.613
  %358 = load %struct.rtx_def*, %struct.rtx_def** %p110, align 8
  store %struct.rtx_def* %358, %struct.rtx_def** %temp321, align 8
  %359 = load %struct.rtx_def*, %struct.rtx_def** %p110, align 8
  %call625 = call %struct.rtx_def* @delete_insn(%struct.rtx_def* %359)
  %360 = load %struct.rtx_def*, %struct.rtx_def** %p110, align 8
  %fld626 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %360, i32 0, i32 1
  %arrayidx627 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld626, i32 0, i64 2
  %rtx628 = bitcast %union.rtunion_def* %arrayidx627 to %struct.rtx_def**
  %361 = load %struct.rtx_def*, %struct.rtx_def** %rtx628, align 8
  store %struct.rtx_def* %361, %struct.rtx_def** %p110, align 8
  br label %while.cond.629

while.cond.629:                                   ; preds = %while.body.637, %if.end.624
  %362 = load %struct.rtx_def*, %struct.rtx_def** %p110, align 8
  %tobool630 = icmp ne %struct.rtx_def* %362, null
  br i1 %tobool630, label %land.rhs.631, label %land.end.636

land.rhs.631:                                     ; preds = %while.cond.629
  %363 = load %struct.rtx_def*, %struct.rtx_def** %p110, align 8
  %364 = bitcast %struct.rtx_def* %363 to i32*
  %bf.load632 = load i32, i32* %364, align 8
  %bf.clear633 = and i32 %bf.load632, 65535
  %cmp634 = icmp eq i32 %bf.clear633, 37
  br label %land.end.636

land.end.636:                                     ; preds = %land.rhs.631, %while.cond.629
  %365 = phi i1 [ false, %while.cond.629 ], [ %cmp634, %land.rhs.631 ]
  br i1 %365, label %while.body.637, label %while.end.644

while.body.637:                                   ; preds = %land.end.636
  %366 = load %struct.rtx_def*, %struct.rtx_def** %p110, align 8
  %fld638 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %366, i32 0, i32 1
  %arrayidx639 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld638, i32 0, i64 2
  %rtx640 = bitcast %union.rtunion_def* %arrayidx639 to %struct.rtx_def**
  %367 = load %struct.rtx_def*, %struct.rtx_def** %rtx640, align 8
  %368 = load %struct.rtx_def*, %struct.rtx_def** %temp321, align 8
  %fld641 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %368, i32 0, i32 1
  %arrayidx642 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld641, i32 0, i64 2
  %rtx643 = bitcast %union.rtunion_def* %arrayidx642 to %struct.rtx_def**
  store %struct.rtx_def* %367, %struct.rtx_def** %rtx643, align 8
  store %struct.rtx_def* %367, %struct.rtx_def** %p110, align 8
  br label %while.cond.629

while.end.644:                                    ; preds = %land.end.636
  br label %for.inc.645

for.inc.645:                                      ; preds = %while.end.644
  %369 = load i32, i32* %count, align 4
  %dec646 = add nsw i32 %369, -1
  store i32 %dec646, i32* %count, align 4
  br label %for.cond.316

for.end.647:                                      ; preds = %for.cond.316
  %370 = load i32, i32* %threshold.addr, align 4
  %sub648 = sub nsw i32 %370, 3
  store i32 %sub648, i32* %threshold.addr, align 4
  br label %if.end.649

if.end.649:                                       ; preds = %for.end.647, %if.end.313
  br label %if.end.650

if.end.650:                                       ; preds = %if.end.649, %if.end.231
  %371 = load i32, i32* %regno109, align 4
  %idxprom651 = sext i32 %371 to i64
  %372 = load i8*, i8** %already_moved, align 8
  %arrayidx652 = getelementptr inbounds i8, i8* %372, i64 %idxprom651
  store i8 1, i8* %arrayidx652, align 1
  %373 = load i32, i32* %regno109, align 4
  %idxprom653 = sext i32 %373 to i64
  %374 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %array654 = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %374, i32 0, i32 2
  %375 = load %struct.loop_reg*, %struct.loop_reg** %array654, align 8
  %arrayidx655 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %375, i64 %idxprom653
  %moved_once656 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %arrayidx655, i32 0, i32 4
  store i8 1, i8* %moved_once656, align 1
  %376 = load %struct.movable*, %struct.movable** %m, align 8
  %partial657 = getelementptr inbounds %struct.movable, %struct.movable* %376, i32 0, i32 8
  %bf.load658 = load i8, i8* %partial657, align 4
  %bf.lshr659 = lshr i8 %bf.load658, 4
  %bf.clear660 = and i8 %bf.lshr659, 1
  %bf.cast661 = zext i8 %bf.clear660 to i32
  %tobool662 = icmp ne i32 %bf.cast661, 0
  br i1 %tobool662, label %if.end.764, label %if.then.663

if.then.663:                                      ; preds = %if.end.650
  store i32 0, i32* %i, align 4
  br label %for.cond.664

for.cond.664:                                     ; preds = %for.inc.762, %if.then.663
  %377 = load i32, i32* %i, align 4
  %378 = load i32, i32* %regno109, align 4
  %cmp665 = icmp slt i32 %378, 53
  br i1 %cmp665, label %cond.true.667, label %cond.false.752

cond.true.667:                                    ; preds = %for.cond.664
  %379 = load i32, i32* %regno109, align 4
  %cmp668 = icmp sge i32 %379, 8
  br i1 %cmp668, label %land.lhs.true.670, label %lor.lhs.false.673

land.lhs.true.670:                                ; preds = %cond.true.667
  %380 = load i32, i32* %regno109, align 4
  %cmp671 = icmp sle i32 %380, 15
  br i1 %cmp671, label %cond.true.691, label %lor.lhs.false.673

lor.lhs.false.673:                                ; preds = %land.lhs.true.670, %cond.true.667
  %381 = load i32, i32* %regno109, align 4
  %cmp674 = icmp sge i32 %381, 21
  br i1 %cmp674, label %land.lhs.true.676, label %lor.lhs.false.679

land.lhs.true.676:                                ; preds = %lor.lhs.false.673
  %382 = load i32, i32* %regno109, align 4
  %cmp677 = icmp sle i32 %382, 28
  br i1 %cmp677, label %cond.true.691, label %lor.lhs.false.679

lor.lhs.false.679:                                ; preds = %land.lhs.true.676, %lor.lhs.false.673
  %383 = load i32, i32* %regno109, align 4
  %cmp680 = icmp sge i32 %383, 45
  br i1 %cmp680, label %land.lhs.true.682, label %lor.lhs.false.685

land.lhs.true.682:                                ; preds = %lor.lhs.false.679
  %384 = load i32, i32* %regno109, align 4
  %cmp683 = icmp sle i32 %384, 52
  br i1 %cmp683, label %cond.true.691, label %lor.lhs.false.685

lor.lhs.false.685:                                ; preds = %land.lhs.true.682, %lor.lhs.false.679
  %385 = load i32, i32* %regno109, align 4
  %cmp686 = icmp sge i32 %385, 29
  br i1 %cmp686, label %land.lhs.true.688, label %cond.false.709

land.lhs.true.688:                                ; preds = %lor.lhs.false.685
  %386 = load i32, i32* %regno109, align 4
  %cmp689 = icmp sle i32 %386, 36
  br i1 %cmp689, label %cond.true.691, label %cond.false.709

cond.true.691:                                    ; preds = %land.lhs.true.688, %land.lhs.true.682, %land.lhs.true.676, %land.lhs.true.670
  %387 = load %struct.movable*, %struct.movable** %m, align 8
  %set_dest692 = getelementptr inbounds %struct.movable, %struct.movable* %387, i32 0, i32 2
  %388 = load %struct.rtx_def*, %struct.rtx_def** %set_dest692, align 8
  %389 = bitcast %struct.rtx_def* %388 to i32*
  %bf.load693 = load i32, i32* %389, align 8
  %bf.lshr694 = lshr i32 %bf.load693, 16
  %bf.clear695 = and i32 %bf.lshr694, 255
  %idxprom696 = sext i32 %bf.clear695 to i64
  %arrayidx697 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom696
  %390 = load i32, i32* %arrayidx697, align 4
  %cmp698 = icmp eq i32 %390, 5
  br i1 %cmp698, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %cond.true.691
  %391 = load %struct.movable*, %struct.movable** %m, align 8
  %set_dest700 = getelementptr inbounds %struct.movable, %struct.movable* %391, i32 0, i32 2
  %392 = load %struct.rtx_def*, %struct.rtx_def** %set_dest700, align 8
  %393 = bitcast %struct.rtx_def* %392 to i32*
  %bf.load701 = load i32, i32* %393, align 8
  %bf.lshr702 = lshr i32 %bf.load701, 16
  %bf.clear703 = and i32 %bf.lshr702, 255
  %idxprom704 = sext i32 %bf.clear703 to i64
  %arrayidx705 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom704
  %394 = load i32, i32* %arrayidx705, align 4
  %cmp706 = icmp eq i32 %394, 6
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %cond.true.691
  %395 = phi i1 [ true, %cond.true.691 ], [ %cmp706, %lor.rhs ]
  %cond708 = select i1 %395, i32 2, i32 1
  br label %cond.end.750

cond.false.709:                                   ; preds = %land.lhs.true.688, %lor.lhs.false.685
  %396 = load %struct.movable*, %struct.movable** %m, align 8
  %set_dest710 = getelementptr inbounds %struct.movable, %struct.movable* %396, i32 0, i32 2
  %397 = load %struct.rtx_def*, %struct.rtx_def** %set_dest710, align 8
  %398 = bitcast %struct.rtx_def* %397 to i32*
  %bf.load711 = load i32, i32* %398, align 8
  %bf.lshr712 = lshr i32 %bf.load711, 16
  %bf.clear713 = and i32 %bf.lshr712, 255
  %cmp714 = icmp eq i32 %bf.clear713, 18
  br i1 %cmp714, label %cond.true.716, label %cond.false.719

cond.true.716:                                    ; preds = %cond.false.709
  %399 = load i32, i32* @target_flags, align 4
  %and = and i32 %399, 33554432
  %tobool717 = icmp ne i32 %and, 0
  %cond718 = select i1 %tobool717, i32 2, i32 3
  br label %cond.end.748

cond.false.719:                                   ; preds = %cond.false.709
  %400 = load %struct.movable*, %struct.movable** %m, align 8
  %set_dest720 = getelementptr inbounds %struct.movable, %struct.movable* %400, i32 0, i32 2
  %401 = load %struct.rtx_def*, %struct.rtx_def** %set_dest720, align 8
  %402 = bitcast %struct.rtx_def* %401 to i32*
  %bf.load721 = load i32, i32* %402, align 8
  %bf.lshr722 = lshr i32 %bf.load721, 16
  %bf.clear723 = and i32 %bf.lshr722, 255
  %cmp724 = icmp eq i32 %bf.clear723, 24
  br i1 %cmp724, label %cond.true.726, label %cond.false.730

cond.true.726:                                    ; preds = %cond.false.719
  %403 = load i32, i32* @target_flags, align 4
  %and727 = and i32 %403, 33554432
  %tobool728 = icmp ne i32 %and727, 0
  %cond729 = select i1 %tobool728, i32 4, i32 6
  br label %cond.end.746

cond.false.730:                                   ; preds = %cond.false.719
  %404 = load %struct.movable*, %struct.movable** %m, align 8
  %set_dest731 = getelementptr inbounds %struct.movable, %struct.movable* %404, i32 0, i32 2
  %405 = load %struct.rtx_def*, %struct.rtx_def** %set_dest731, align 8
  %406 = bitcast %struct.rtx_def* %405 to i32*
  %bf.load732 = load i32, i32* %406, align 8
  %bf.lshr733 = lshr i32 %bf.load732, 16
  %bf.clear734 = and i32 %bf.lshr733, 255
  %idxprom735 = sext i32 %bf.clear734 to i64
  %arrayidx736 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom735
  %407 = load i8, i8* %arrayidx736, align 1
  %conv737 = zext i8 %407 to i32
  %408 = load i32, i32* @target_flags, align 4
  %and738 = and i32 %408, 33554432
  %tobool739 = icmp ne i32 %and738, 0
  %cond740 = select i1 %tobool739, i32 8, i32 4
  %add741 = add nsw i32 %conv737, %cond740
  %sub742 = sub nsw i32 %add741, 1
  %409 = load i32, i32* @target_flags, align 4
  %and743 = and i32 %409, 33554432
  %tobool744 = icmp ne i32 %and743, 0
  %cond745 = select i1 %tobool744, i32 8, i32 4
  %div = sdiv i32 %sub742, %cond745
  br label %cond.end.746

cond.end.746:                                     ; preds = %cond.false.730, %cond.true.726
  %cond747 = phi i32 [ %cond729, %cond.true.726 ], [ %div, %cond.false.730 ]
  br label %cond.end.748

cond.end.748:                                     ; preds = %cond.end.746, %cond.true.716
  %cond749 = phi i32 [ %cond718, %cond.true.716 ], [ %cond747, %cond.end.746 ]
  br label %cond.end.750

cond.end.750:                                     ; preds = %cond.end.748, %lor.end
  %cond751 = phi i32 [ %cond708, %lor.end ], [ %cond749, %cond.end.748 ]
  br label %cond.end.753

cond.false.752:                                   ; preds = %for.cond.664
  br label %cond.end.753

cond.end.753:                                     ; preds = %cond.false.752, %cond.end.750
  %cond754 = phi i32 [ %cond751, %cond.end.750 ], [ 1, %cond.false.752 ]
  %cmp755 = icmp slt i32 %377, %cond754
  br i1 %cmp755, label %for.body.757, label %for.end.763

for.body.757:                                     ; preds = %cond.end.753
  %410 = load i32, i32* %regno109, align 4
  %411 = load i32, i32* %i, align 4
  %add758 = add nsw i32 %410, %411
  %idxprom759 = sext i32 %add758 to i64
  %412 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %array760 = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %412, i32 0, i32 2
  %413 = load %struct.loop_reg*, %struct.loop_reg** %array760, align 8
  %arrayidx761 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %413, i64 %idxprom759
  %set_in_loop = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %arrayidx761, i32 0, i32 0
  store i32 0, i32* %set_in_loop, align 4
  br label %for.inc.762

for.inc.762:                                      ; preds = %for.body.757
  %414 = load i32, i32* %i, align 4
  %inc = add nsw i32 %414, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond.664

for.end.763:                                      ; preds = %cond.end.753
  br label %if.end.764

if.end.764:                                       ; preds = %for.end.763, %if.end.650
  %415 = load %struct.movable*, %struct.movable** %m, align 8
  %done765 = getelementptr inbounds %struct.movable, %struct.movable* %415, i32 0, i32 8
  %bf.load766 = load i8, i8* %done765, align 4
  %bf.clear767 = and i8 %bf.load766, -9
  %bf.set = or i8 %bf.clear767, 8
  store i8 %bf.set, i8* %done765, align 4
  %416 = load i32, i32* %regno109, align 4
  %idxprom768 = sext i32 %416 to i64
  %417 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %data = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %417, i32 0, i32 4
  %reg769 = bitcast %union.varray_data_tag* %data to [1 x %struct.reg_info_def*]*
  %arrayidx770 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %reg769, i32 0, i64 %idxprom768
  %418 = load %struct.reg_info_def*, %struct.reg_info_def** %arrayidx770, align 8
  %first_uid = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %418, i32 0, i32 0
  %419 = load i32, i32* %first_uid, align 4
  %idxprom771 = sext i32 %419 to i64
  %420 = load i32*, i32** @uid_luid, align 8
  %arrayidx772 = getelementptr inbounds i32, i32* %420, i64 %idxprom771
  %421 = load i32, i32* %arrayidx772, align 4
  %422 = load %struct.rtx_def*, %struct.rtx_def** %loop_start, align 8
  %fld773 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %422, i32 0, i32 1
  %arrayidx774 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld773, i32 0, i64 0
  %rtint775 = bitcast %union.rtunion_def* %arrayidx774 to i32*
  %423 = load i32, i32* %rtint775, align 4
  %424 = load i32, i32* @max_uid_for_loop, align 4
  %cmp776 = icmp slt i32 %423, %424
  br i1 %cmp776, label %cond.true.778, label %cond.false.784

cond.true.778:                                    ; preds = %if.end.764
  %425 = load %struct.rtx_def*, %struct.rtx_def** %loop_start, align 8
  %fld779 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %425, i32 0, i32 1
  %arrayidx780 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld779, i32 0, i64 0
  %rtint781 = bitcast %union.rtunion_def* %arrayidx780 to i32*
  %426 = load i32, i32* %rtint781, align 4
  %idxprom782 = sext i32 %426 to i64
  %427 = load i32*, i32** @uid_luid, align 8
  %arrayidx783 = getelementptr inbounds i32, i32* %427, i64 %idxprom782
  %428 = load i32, i32* %arrayidx783, align 4
  br label %cond.end.785

cond.false.784:                                   ; preds = %if.end.764
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 2191, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @__FUNCTION__.move_movables, i32 0, i32 0)) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end.785

cond.end.785:                                     ; preds = %429, %cond.true.778
  %cond786 = phi i32 [ %428, %cond.true.778 ], [ -1, %429 ]
  %cmp787 = icmp sgt i32 %421, %cond786
  br i1 %cmp787, label %if.then.789, label %if.end.798

if.then.789:                                      ; preds = %cond.end.785
  %430 = load %struct.rtx_def*, %struct.rtx_def** %loop_start, align 8
  %fld790 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %430, i32 0, i32 1
  %arrayidx791 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld790, i32 0, i64 0
  %rtint792 = bitcast %union.rtunion_def* %arrayidx791 to i32*
  %431 = load i32, i32* %rtint792, align 4
  %432 = load i32, i32* %regno109, align 4
  %idxprom793 = sext i32 %432 to i64
  %433 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %data794 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %433, i32 0, i32 4
  %reg795 = bitcast %union.varray_data_tag* %data794 to [1 x %struct.reg_info_def*]*
  %arrayidx796 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %reg795, i32 0, i64 %idxprom793
  %434 = load %struct.reg_info_def*, %struct.reg_info_def** %arrayidx796, align 8
  %first_uid797 = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %434, i32 0, i32 0
  store i32 %431, i32* %first_uid797, align 4
  br label %if.end.798

if.end.798:                                       ; preds = %if.then.789, %cond.end.785
  %435 = load i32, i32* %regno109, align 4
  %idxprom799 = sext i32 %435 to i64
  %436 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %data800 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %436, i32 0, i32 4
  %reg801 = bitcast %union.varray_data_tag* %data800 to [1 x %struct.reg_info_def*]*
  %arrayidx802 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %reg801, i32 0, i64 %idxprom799
  %437 = load %struct.reg_info_def*, %struct.reg_info_def** %arrayidx802, align 8
  %last_uid = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %437, i32 0, i32 1
  %438 = load i32, i32* %last_uid, align 4
  %idxprom803 = sext i32 %438 to i64
  %439 = load i32*, i32** @uid_luid, align 8
  %arrayidx804 = getelementptr inbounds i32, i32* %439, i64 %idxprom803
  %440 = load i32, i32* %arrayidx804, align 4
  %441 = load %struct.rtx_def*, %struct.rtx_def** %loop_end, align 8
  %fld805 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %441, i32 0, i32 1
  %arrayidx806 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld805, i32 0, i64 0
  %rtint807 = bitcast %union.rtunion_def* %arrayidx806 to i32*
  %442 = load i32, i32* %rtint807, align 4
  %443 = load i32, i32* @max_uid_for_loop, align 4
  %cmp808 = icmp slt i32 %442, %443
  br i1 %cmp808, label %cond.true.810, label %cond.false.816

cond.true.810:                                    ; preds = %if.end.798
  %444 = load %struct.rtx_def*, %struct.rtx_def** %loop_end, align 8
  %fld811 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %444, i32 0, i32 1
  %arrayidx812 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld811, i32 0, i64 0
  %rtint813 = bitcast %union.rtunion_def* %arrayidx812 to i32*
  %445 = load i32, i32* %rtint813, align 4
  %idxprom814 = sext i32 %445 to i64
  %446 = load i32*, i32** @uid_luid, align 8
  %arrayidx815 = getelementptr inbounds i32, i32* %446, i64 %idxprom814
  %447 = load i32, i32* %arrayidx815, align 4
  br label %cond.end.817

cond.false.816:                                   ; preds = %if.end.798
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 2196, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @__FUNCTION__.move_movables, i32 0, i32 0)) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end.817

cond.end.817:                                     ; preds = %448, %cond.true.810
  %cond818 = phi i32 [ %447, %cond.true.810 ], [ -1, %448 ]
  %cmp819 = icmp slt i32 %440, %cond818
  br i1 %cmp819, label %if.then.821, label %if.end.830

if.then.821:                                      ; preds = %cond.end.817
  %449 = load %struct.rtx_def*, %struct.rtx_def** %loop_end, align 8
  %fld822 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %449, i32 0, i32 1
  %arrayidx823 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld822, i32 0, i64 0
  %rtint824 = bitcast %union.rtunion_def* %arrayidx823 to i32*
  %450 = load i32, i32* %rtint824, align 4
  %451 = load i32, i32* %regno109, align 4
  %idxprom825 = sext i32 %451 to i64
  %452 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %data826 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %452, i32 0, i32 4
  %reg827 = bitcast %union.varray_data_tag* %data826 to [1 x %struct.reg_info_def*]*
  %arrayidx828 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %reg827, i32 0, i64 %idxprom825
  %453 = load %struct.reg_info_def*, %struct.reg_info_def** %arrayidx828, align 8
  %last_uid829 = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %453, i32 0, i32 1
  store i32 %450, i32* %last_uid829, align 4
  br label %if.end.830

if.end.830:                                       ; preds = %if.then.821, %cond.end.817
  %454 = load %struct.movable*, %struct.movable** %m, align 8
  %partial831 = getelementptr inbounds %struct.movable, %struct.movable* %454, i32 0, i32 8
  %bf.load832 = load i8, i8* %partial831, align 4
  %bf.lshr833 = lshr i8 %bf.load832, 4
  %bf.clear834 = and i8 %bf.lshr833, 1
  %bf.cast835 = zext i8 %bf.clear834 to i32
  %tobool836 = icmp ne i32 %bf.cast835, 0
  br i1 %tobool836, label %if.end.1012, label %if.then.837

if.then.837:                                      ; preds = %if.end.830
  %455 = load %struct.loop_movables*, %struct.loop_movables** %movables.addr, align 8
  %head838 = getelementptr inbounds %struct.loop_movables, %struct.loop_movables* %455, i32 0, i32 0
  %456 = load %struct.movable*, %struct.movable** %head838, align 8
  store %struct.movable* %456, %struct.movable** %m1, align 8
  br label %for.cond.839

for.cond.839:                                     ; preds = %for.inc.1009, %if.then.837
  %457 = load %struct.movable*, %struct.movable** %m1, align 8
  %tobool840 = icmp ne %struct.movable* %457, null
  br i1 %tobool840, label %for.body.841, label %for.end.1011

for.body.841:                                     ; preds = %for.cond.839
  %458 = load %struct.movable*, %struct.movable** %m1, align 8
  %match842 = getelementptr inbounds %struct.movable, %struct.movable* %458, i32 0, i32 10
  %459 = load %struct.movable*, %struct.movable** %match842, align 8
  %460 = load %struct.movable*, %struct.movable** %m, align 8
  %cmp843 = icmp eq %struct.movable* %459, %460
  br i1 %cmp843, label %if.then.845, label %if.end.1008

if.then.845:                                      ; preds = %for.body.841
  %461 = load %struct.movable*, %struct.movable** %m, align 8
  %set_dest847 = getelementptr inbounds %struct.movable, %struct.movable* %461, i32 0, i32 2
  %462 = load %struct.rtx_def*, %struct.rtx_def** %set_dest847, align 8
  %463 = bitcast %struct.rtx_def* %462 to i32*
  %bf.load848 = load i32, i32* %463, align 8
  %bf.lshr849 = lshr i32 %bf.load848, 16
  %bf.clear850 = and i32 %bf.lshr849, 255
  %464 = load %struct.movable*, %struct.movable** %m1, align 8
  %set_dest851 = getelementptr inbounds %struct.movable, %struct.movable* %464, i32 0, i32 2
  %465 = load %struct.rtx_def*, %struct.rtx_def** %set_dest851, align 8
  %466 = bitcast %struct.rtx_def* %465 to i32*
  %bf.load852 = load i32, i32* %466, align 8
  %bf.lshr853 = lshr i32 %bf.load852, 16
  %bf.clear854 = and i32 %bf.lshr853, 255
  %cmp855 = icmp eq i32 %bf.clear850, %bf.clear854
  br i1 %cmp855, label %if.then.857, label %if.else.862

if.then.857:                                      ; preds = %if.then.845
  %467 = load %struct.movable*, %struct.movable** %m, align 8
  %set_dest858 = getelementptr inbounds %struct.movable, %struct.movable* %467, i32 0, i32 2
  %468 = load %struct.rtx_def*, %struct.rtx_def** %set_dest858, align 8
  %469 = load %struct.movable*, %struct.movable** %m1, align 8
  %regno859 = getelementptr inbounds %struct.movable, %struct.movable* %469, i32 0, i32 5
  %470 = load i32, i32* %regno859, align 4
  %idxprom860 = zext i32 %470 to i64
  %471 = load %struct.rtx_def**, %struct.rtx_def*** %reg_map, align 8
  %arrayidx861 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %471, i64 %idxprom860
  store %struct.rtx_def* %468, %struct.rtx_def** %arrayidx861, align 8
  br label %if.end.872

if.else.862:                                      ; preds = %if.then.845
  %472 = load %struct.movable*, %struct.movable** %m1, align 8
  %set_dest863 = getelementptr inbounds %struct.movable, %struct.movable* %472, i32 0, i32 2
  %473 = load %struct.rtx_def*, %struct.rtx_def** %set_dest863, align 8
  %474 = bitcast %struct.rtx_def* %473 to i32*
  %bf.load864 = load i32, i32* %474, align 8
  %bf.lshr865 = lshr i32 %bf.load864, 16
  %bf.clear866 = and i32 %bf.lshr865, 255
  %475 = load %struct.movable*, %struct.movable** %m, align 8
  %set_dest867 = getelementptr inbounds %struct.movable, %struct.movable* %475, i32 0, i32 2
  %476 = load %struct.rtx_def*, %struct.rtx_def** %set_dest867, align 8
  %call868 = call %struct.rtx_def* @gen_lowpart_common(i32 %bf.clear866, %struct.rtx_def* %476)
  %477 = load %struct.movable*, %struct.movable** %m1, align 8
  %regno869 = getelementptr inbounds %struct.movable, %struct.movable* %477, i32 0, i32 5
  %478 = load i32, i32* %regno869, align 4
  %idxprom870 = zext i32 %478 to i64
  %479 = load %struct.rtx_def**, %struct.rtx_def*** %reg_map, align 8
  %arrayidx871 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %479, i64 %idxprom870
  store %struct.rtx_def* %call868, %struct.rtx_def** %arrayidx871, align 8
  br label %if.end.872

if.end.872:                                       ; preds = %if.else.862, %if.then.857
  %480 = load %struct.movable*, %struct.movable** %m1, align 8
  %done873 = getelementptr inbounds %struct.movable, %struct.movable* %480, i32 0, i32 8
  %bf.load874 = load i8, i8* %done873, align 4
  %bf.clear875 = and i8 %bf.load874, -9
  %bf.set876 = or i8 %bf.clear875, 8
  store i8 %bf.set876, i8* %done873, align 4
  %481 = load %struct.movable*, %struct.movable** %m1, align 8
  %insn877 = getelementptr inbounds %struct.movable, %struct.movable* %481, i32 0, i32 0
  %482 = load %struct.rtx_def*, %struct.rtx_def** %insn877, align 8
  %call878 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %482, i32 6, %struct.rtx_def* null)
  store %struct.rtx_def* %call878, %struct.rtx_def** %temp846, align 8
  %tobool879 = icmp ne %struct.rtx_def* %call878, null
  br i1 %tobool879, label %if.then.880, label %if.else.885

if.then.880:                                      ; preds = %if.end.872
  %483 = load %struct.rtx_def*, %struct.rtx_def** %temp846, align 8
  %fld881 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %483, i32 0, i32 1
  %arrayidx882 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld881, i32 0, i64 0
  %rtx883 = bitcast %union.rtunion_def* %arrayidx882 to %struct.rtx_def**
  %484 = load %struct.rtx_def*, %struct.rtx_def** %rtx883, align 8
  %485 = load %struct.movable*, %struct.movable** %m1, align 8
  %insn884 = getelementptr inbounds %struct.movable, %struct.movable* %485, i32 0, i32 0
  %486 = load %struct.rtx_def*, %struct.rtx_def** %insn884, align 8
  call void @delete_insn_chain(%struct.rtx_def* %484, %struct.rtx_def* %486)
  br label %if.end.888

if.else.885:                                      ; preds = %if.end.872
  %487 = load %struct.movable*, %struct.movable** %m1, align 8
  %insn886 = getelementptr inbounds %struct.movable, %struct.movable* %487, i32 0, i32 0
  %488 = load %struct.rtx_def*, %struct.rtx_def** %insn886, align 8
  %call887 = call %struct.rtx_def* @delete_insn(%struct.rtx_def* %488)
  br label %if.end.888

if.end.888:                                       ; preds = %if.else.885, %if.then.880
  %489 = load %struct.movable*, %struct.movable** %m1, align 8
  %regno889 = getelementptr inbounds %struct.movable, %struct.movable* %489, i32 0, i32 5
  %490 = load i32, i32* %regno889, align 4
  %idxprom890 = zext i32 %490 to i64
  %491 = load i8*, i8** %already_moved, align 8
  %arrayidx891 = getelementptr inbounds i8, i8* %491, i64 %idxprom890
  store i8 1, i8* %arrayidx891, align 1
  %492 = load %struct.movable*, %struct.movable** %m, align 8
  %partial892 = getelementptr inbounds %struct.movable, %struct.movable* %492, i32 0, i32 8
  %bf.load893 = load i8, i8* %partial892, align 4
  %bf.lshr894 = lshr i8 %bf.load893, 4
  %bf.clear895 = and i8 %bf.lshr894, 1
  %bf.cast896 = zext i8 %bf.clear895 to i32
  %tobool897 = icmp ne i32 %bf.cast896, 0
  br i1 %tobool897, label %if.end.1007, label %if.then.898

if.then.898:                                      ; preds = %if.end.888
  store i32 0, i32* %i899, align 4
  br label %for.cond.900

for.cond.900:                                     ; preds = %for.inc.1004, %if.then.898
  %493 = load i32, i32* %i899, align 4
  %494 = load i32, i32* %regno109, align 4
  %cmp901 = icmp slt i32 %494, 53
  br i1 %cmp901, label %cond.true.903, label %cond.false.992

cond.true.903:                                    ; preds = %for.cond.900
  %495 = load i32, i32* %regno109, align 4
  %cmp904 = icmp sge i32 %495, 8
  br i1 %cmp904, label %land.lhs.true.906, label %lor.lhs.false.909

land.lhs.true.906:                                ; preds = %cond.true.903
  %496 = load i32, i32* %regno109, align 4
  %cmp907 = icmp sle i32 %496, 15
  br i1 %cmp907, label %cond.true.927, label %lor.lhs.false.909

lor.lhs.false.909:                                ; preds = %land.lhs.true.906, %cond.true.903
  %497 = load i32, i32* %regno109, align 4
  %cmp910 = icmp sge i32 %497, 21
  br i1 %cmp910, label %land.lhs.true.912, label %lor.lhs.false.915

land.lhs.true.912:                                ; preds = %lor.lhs.false.909
  %498 = load i32, i32* %regno109, align 4
  %cmp913 = icmp sle i32 %498, 28
  br i1 %cmp913, label %cond.true.927, label %lor.lhs.false.915

lor.lhs.false.915:                                ; preds = %land.lhs.true.912, %lor.lhs.false.909
  %499 = load i32, i32* %regno109, align 4
  %cmp916 = icmp sge i32 %499, 45
  br i1 %cmp916, label %land.lhs.true.918, label %lor.lhs.false.921

land.lhs.true.918:                                ; preds = %lor.lhs.false.915
  %500 = load i32, i32* %regno109, align 4
  %cmp919 = icmp sle i32 %500, 52
  br i1 %cmp919, label %cond.true.927, label %lor.lhs.false.921

lor.lhs.false.921:                                ; preds = %land.lhs.true.918, %lor.lhs.false.915
  %501 = load i32, i32* %regno109, align 4
  %cmp922 = icmp sge i32 %501, 29
  br i1 %cmp922, label %land.lhs.true.924, label %cond.false.947

land.lhs.true.924:                                ; preds = %lor.lhs.false.921
  %502 = load i32, i32* %regno109, align 4
  %cmp925 = icmp sle i32 %502, 36
  br i1 %cmp925, label %cond.true.927, label %cond.false.947

cond.true.927:                                    ; preds = %land.lhs.true.924, %land.lhs.true.918, %land.lhs.true.912, %land.lhs.true.906
  %503 = load %struct.movable*, %struct.movable** %m1, align 8
  %set_dest928 = getelementptr inbounds %struct.movable, %struct.movable* %503, i32 0, i32 2
  %504 = load %struct.rtx_def*, %struct.rtx_def** %set_dest928, align 8
  %505 = bitcast %struct.rtx_def* %504 to i32*
  %bf.load929 = load i32, i32* %505, align 8
  %bf.lshr930 = lshr i32 %bf.load929, 16
  %bf.clear931 = and i32 %bf.lshr930, 255
  %idxprom932 = sext i32 %bf.clear931 to i64
  %arrayidx933 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom932
  %506 = load i32, i32* %arrayidx933, align 4
  %cmp934 = icmp eq i32 %506, 5
  br i1 %cmp934, label %lor.end.945, label %lor.rhs.936

lor.rhs.936:                                      ; preds = %cond.true.927
  %507 = load %struct.movable*, %struct.movable** %m1, align 8
  %set_dest937 = getelementptr inbounds %struct.movable, %struct.movable* %507, i32 0, i32 2
  %508 = load %struct.rtx_def*, %struct.rtx_def** %set_dest937, align 8
  %509 = bitcast %struct.rtx_def* %508 to i32*
  %bf.load938 = load i32, i32* %509, align 8
  %bf.lshr939 = lshr i32 %bf.load938, 16
  %bf.clear940 = and i32 %bf.lshr939, 255
  %idxprom941 = sext i32 %bf.clear940 to i64
  %arrayidx942 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom941
  %510 = load i32, i32* %arrayidx942, align 4
  %cmp943 = icmp eq i32 %510, 6
  br label %lor.end.945

lor.end.945:                                      ; preds = %lor.rhs.936, %cond.true.927
  %511 = phi i1 [ true, %cond.true.927 ], [ %cmp943, %lor.rhs.936 ]
  %cond946 = select i1 %511, i32 2, i32 1
  br label %cond.end.990

cond.false.947:                                   ; preds = %land.lhs.true.924, %lor.lhs.false.921
  %512 = load %struct.movable*, %struct.movable** %m1, align 8
  %set_dest948 = getelementptr inbounds %struct.movable, %struct.movable* %512, i32 0, i32 2
  %513 = load %struct.rtx_def*, %struct.rtx_def** %set_dest948, align 8
  %514 = bitcast %struct.rtx_def* %513 to i32*
  %bf.load949 = load i32, i32* %514, align 8
  %bf.lshr950 = lshr i32 %bf.load949, 16
  %bf.clear951 = and i32 %bf.lshr950, 255
  %cmp952 = icmp eq i32 %bf.clear951, 18
  br i1 %cmp952, label %cond.true.954, label %cond.false.958

cond.true.954:                                    ; preds = %cond.false.947
  %515 = load i32, i32* @target_flags, align 4
  %and955 = and i32 %515, 33554432
  %tobool956 = icmp ne i32 %and955, 0
  %cond957 = select i1 %tobool956, i32 2, i32 3
  br label %cond.end.988

cond.false.958:                                   ; preds = %cond.false.947
  %516 = load %struct.movable*, %struct.movable** %m1, align 8
  %set_dest959 = getelementptr inbounds %struct.movable, %struct.movable* %516, i32 0, i32 2
  %517 = load %struct.rtx_def*, %struct.rtx_def** %set_dest959, align 8
  %518 = bitcast %struct.rtx_def* %517 to i32*
  %bf.load960 = load i32, i32* %518, align 8
  %bf.lshr961 = lshr i32 %bf.load960, 16
  %bf.clear962 = and i32 %bf.lshr961, 255
  %cmp963 = icmp eq i32 %bf.clear962, 24
  br i1 %cmp963, label %cond.true.965, label %cond.false.969

cond.true.965:                                    ; preds = %cond.false.958
  %519 = load i32, i32* @target_flags, align 4
  %and966 = and i32 %519, 33554432
  %tobool967 = icmp ne i32 %and966, 0
  %cond968 = select i1 %tobool967, i32 4, i32 6
  br label %cond.end.986

cond.false.969:                                   ; preds = %cond.false.958
  %520 = load %struct.movable*, %struct.movable** %m1, align 8
  %set_dest970 = getelementptr inbounds %struct.movable, %struct.movable* %520, i32 0, i32 2
  %521 = load %struct.rtx_def*, %struct.rtx_def** %set_dest970, align 8
  %522 = bitcast %struct.rtx_def* %521 to i32*
  %bf.load971 = load i32, i32* %522, align 8
  %bf.lshr972 = lshr i32 %bf.load971, 16
  %bf.clear973 = and i32 %bf.lshr972, 255
  %idxprom974 = sext i32 %bf.clear973 to i64
  %arrayidx975 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom974
  %523 = load i8, i8* %arrayidx975, align 1
  %conv976 = zext i8 %523 to i32
  %524 = load i32, i32* @target_flags, align 4
  %and977 = and i32 %524, 33554432
  %tobool978 = icmp ne i32 %and977, 0
  %cond979 = select i1 %tobool978, i32 8, i32 4
  %add980 = add nsw i32 %conv976, %cond979
  %sub981 = sub nsw i32 %add980, 1
  %525 = load i32, i32* @target_flags, align 4
  %and982 = and i32 %525, 33554432
  %tobool983 = icmp ne i32 %and982, 0
  %cond984 = select i1 %tobool983, i32 8, i32 4
  %div985 = sdiv i32 %sub981, %cond984
  br label %cond.end.986

cond.end.986:                                     ; preds = %cond.false.969, %cond.true.965
  %cond987 = phi i32 [ %cond968, %cond.true.965 ], [ %div985, %cond.false.969 ]
  br label %cond.end.988

cond.end.988:                                     ; preds = %cond.end.986, %cond.true.954
  %cond989 = phi i32 [ %cond957, %cond.true.954 ], [ %cond987, %cond.end.986 ]
  br label %cond.end.990

cond.end.990:                                     ; preds = %cond.end.988, %lor.end.945
  %cond991 = phi i32 [ %cond946, %lor.end.945 ], [ %cond989, %cond.end.988 ]
  br label %cond.end.993

cond.false.992:                                   ; preds = %for.cond.900
  br label %cond.end.993

cond.end.993:                                     ; preds = %cond.false.992, %cond.end.990
  %cond994 = phi i32 [ %cond991, %cond.end.990 ], [ 1, %cond.false.992 ]
  %cmp995 = icmp slt i32 %493, %cond994
  br i1 %cmp995, label %for.body.997, label %for.end.1006

for.body.997:                                     ; preds = %cond.end.993
  %526 = load %struct.movable*, %struct.movable** %m1, align 8
  %regno998 = getelementptr inbounds %struct.movable, %struct.movable* %526, i32 0, i32 5
  %527 = load i32, i32* %regno998, align 4
  %528 = load i32, i32* %i899, align 4
  %add999 = add i32 %527, %528
  %idxprom1000 = zext i32 %add999 to i64
  %529 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %array1001 = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %529, i32 0, i32 2
  %530 = load %struct.loop_reg*, %struct.loop_reg** %array1001, align 8
  %arrayidx1002 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %530, i64 %idxprom1000
  %set_in_loop1003 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %arrayidx1002, i32 0, i32 0
  store i32 0, i32* %set_in_loop1003, align 4
  br label %for.inc.1004

for.inc.1004:                                     ; preds = %for.body.997
  %531 = load i32, i32* %i899, align 4
  %inc1005 = add nsw i32 %531, 1
  store i32 %inc1005, i32* %i899, align 4
  br label %for.cond.900

for.end.1006:                                     ; preds = %cond.end.993
  br label %if.end.1007

if.end.1007:                                      ; preds = %for.end.1006, %if.end.888
  br label %if.end.1008

if.end.1008:                                      ; preds = %if.end.1007, %for.body.841
  br label %for.inc.1009

for.inc.1009:                                     ; preds = %if.end.1008
  %532 = load %struct.movable*, %struct.movable** %m1, align 8
  %next1010 = getelementptr inbounds %struct.movable, %struct.movable* %532, i32 0, i32 12
  %533 = load %struct.movable*, %struct.movable** %next1010, align 8
  store %struct.movable* %533, %struct.movable** %m1, align 8
  br label %for.cond.839

for.end.1011:                                     ; preds = %for.cond.839
  br label %if.end.1012

if.end.1012:                                      ; preds = %for.end.1011, %if.end.830
  br label %if.end.1018

if.else.1013:                                     ; preds = %land.lhs.true.158, %land.lhs.true.150, %lor.lhs.false.147
  %534 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %tobool1014 = icmp ne %struct._IO_FILE* %534, null
  br i1 %tobool1014, label %if.then.1015, label %if.end.1017

if.then.1015:                                     ; preds = %if.else.1013
  %535 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %call1016 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %535, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.16, i32 0, i32 0))
  br label %if.end.1017

if.end.1017:                                      ; preds = %if.then.1015, %if.else.1013
  br label %if.end.1018

if.end.1018:                                      ; preds = %if.end.1017, %if.end.1012
  br label %if.end.1027

if.else.1019:                                     ; preds = %lor.lhs.false.100, %lor.lhs.false.91, %lor.lhs.false.82, %lor.lhs.false, %if.end.64
  %536 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %tobool1020 = icmp ne %struct._IO_FILE* %536, null
  br i1 %tobool1020, label %land.lhs.true.1021, label %if.end.1026

land.lhs.true.1021:                               ; preds = %if.else.1019
  %537 = load %struct.movable*, %struct.movable** %m, align 8
  %match1022 = getelementptr inbounds %struct.movable, %struct.movable* %537, i32 0, i32 10
  %538 = load %struct.movable*, %struct.movable** %match1022, align 8
  %tobool1023 = icmp ne %struct.movable* %538, null
  br i1 %tobool1023, label %if.end.1026, label %if.then.1024

if.then.1024:                                     ; preds = %land.lhs.true.1021
  %539 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %call1025 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %539, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.17, i32 0, i32 0))
  br label %if.end.1026

if.end.1026:                                      ; preds = %if.then.1024, %land.lhs.true.1021, %if.else.1019
  br label %if.end.1027

if.end.1027:                                      ; preds = %if.end.1026, %if.end.1018
  %540 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %tobool1028 = icmp ne %struct._IO_FILE* %540, null
  br i1 %tobool1028, label %if.then.1029, label %if.end.1031

if.then.1029:                                     ; preds = %if.end.1027
  %541 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %call1030 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %541, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.18, i32 0, i32 0))
  br label %if.end.1031

if.end.1031:                                      ; preds = %if.then.1029, %if.end.1027
  br label %for.inc.1032

for.inc.1032:                                     ; preds = %if.end.1031
  %542 = load %struct.movable*, %struct.movable** %m, align 8
  %next1033 = getelementptr inbounds %struct.movable, %struct.movable* %542, i32 0, i32 12
  %543 = load %struct.movable*, %struct.movable** %next1033, align 8
  store %struct.movable* %543, %struct.movable** %m, align 8
  br label %for.cond

for.end.1034:                                     ; preds = %for.cond
  %544 = load %struct.rtx_def*, %struct.rtx_def** %new_start, align 8
  %cmp1035 = icmp eq %struct.rtx_def* %544, null
  br i1 %cmp1035, label %if.then.1037, label %if.end.1038

if.then.1037:                                     ; preds = %for.end.1034
  %545 = load %struct.rtx_def*, %struct.rtx_def** %loop_start, align 8
  store %struct.rtx_def* %545, %struct.rtx_def** %new_start, align 8
  br label %if.end.1038

if.end.1038:                                      ; preds = %if.then.1037, %for.end.1034
  %546 = load %struct.rtx_def*, %struct.rtx_def** %new_start, align 8
  store %struct.rtx_def* %546, %struct.rtx_def** %p, align 8
  br label %for.cond.1039

for.cond.1039:                                    ; preds = %for.inc.1070, %if.end.1038
  %547 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %548 = load %struct.rtx_def*, %struct.rtx_def** %loop_end, align 8
  %cmp1040 = icmp ne %struct.rtx_def* %547, %548
  br i1 %cmp1040, label %for.body.1042, label %for.end.1074

for.body.1042:                                    ; preds = %for.cond.1039
  %549 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %550 = bitcast %struct.rtx_def* %549 to i32*
  %bf.load1043 = load i32, i32* %550, align 8
  %bf.clear1044 = and i32 %bf.load1043, 65535
  %cmp1045 = icmp eq i32 %bf.clear1044, 32
  br i1 %cmp1045, label %if.then.1057, label %lor.lhs.false.1047

lor.lhs.false.1047:                               ; preds = %for.body.1042
  %551 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %552 = bitcast %struct.rtx_def* %551 to i32*
  %bf.load1048 = load i32, i32* %552, align 8
  %bf.clear1049 = and i32 %bf.load1048, 65535
  %cmp1050 = icmp eq i32 %bf.clear1049, 33
  br i1 %cmp1050, label %if.then.1057, label %lor.lhs.false.1052

lor.lhs.false.1052:                               ; preds = %lor.lhs.false.1047
  %553 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %554 = bitcast %struct.rtx_def* %553 to i32*
  %bf.load1053 = load i32, i32* %554, align 8
  %bf.clear1054 = and i32 %bf.load1053, 65535
  %cmp1055 = icmp eq i32 %bf.clear1054, 34
  br i1 %cmp1055, label %if.then.1057, label %if.end.1069

if.then.1057:                                     ; preds = %lor.lhs.false.1052, %lor.lhs.false.1047, %for.body.1042
  %555 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld1058 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %555, i32 0, i32 1
  %arrayidx1059 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1058, i32 0, i64 3
  %rtx1060 = bitcast %union.rtunion_def* %arrayidx1059 to %struct.rtx_def**
  %556 = load %struct.rtx_def*, %struct.rtx_def** %rtx1060, align 8
  %557 = load %struct.rtx_def**, %struct.rtx_def*** %reg_map, align 8
  %558 = load i32, i32* %nregs, align 4
  %call1061 = call %struct.rtx_def* @replace_regs(%struct.rtx_def* %556, %struct.rtx_def** %557, i32 %558, i32 0)
  %559 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld1062 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %559, i32 0, i32 1
  %arrayidx1063 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1062, i32 0, i64 6
  %rtx1064 = bitcast %union.rtunion_def* %arrayidx1063 to %struct.rtx_def**
  %560 = load %struct.rtx_def*, %struct.rtx_def** %rtx1064, align 8
  %561 = load %struct.rtx_def**, %struct.rtx_def*** %reg_map, align 8
  %562 = load i32, i32* %nregs, align 4
  %call1065 = call %struct.rtx_def* @replace_regs(%struct.rtx_def* %560, %struct.rtx_def** %561, i32 %562, i32 0)
  %563 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld1066 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %563, i32 0, i32 1
  %arrayidx1067 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1066, i32 0, i64 4
  %rtint1068 = bitcast %union.rtunion_def* %arrayidx1067 to i32*
  store i32 -1, i32* %rtint1068, align 4
  br label %if.end.1069

if.end.1069:                                      ; preds = %if.then.1057, %lor.lhs.false.1052
  br label %for.inc.1070

for.inc.1070:                                     ; preds = %if.end.1069
  %564 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld1071 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %564, i32 0, i32 1
  %arrayidx1072 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1071, i32 0, i64 2
  %rtx1073 = bitcast %union.rtunion_def* %arrayidx1072 to %struct.rtx_def**
  %565 = load %struct.rtx_def*, %struct.rtx_def** %rtx1073, align 8
  store %struct.rtx_def* %565, %struct.rtx_def** %p, align 8
  br label %for.cond.1039

for.end.1074:                                     ; preds = %for.cond.1039
  %566 = load %struct.rtx_def**, %struct.rtx_def*** %reg_map, align 8
  %567 = bitcast %struct.rtx_def** %566 to i8*
  call void @free(i8* %567) #4
  %568 = load i8*, i8** %already_moved, align 8
  call void @free(i8* %568) #4
  ret void
}

declare void @reg_scan_update(%struct.rtx_def*, %struct.rtx_def*, i32) #1

; Function Attrs: nounwind uwtable
define internal void @load_mems(%struct.loop* %loop) #0 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %loop_info = alloca %struct.loop_info*, align 8
  %regs = alloca %struct.loop_regs*, align 8
  %maybe_never = alloca i32, align 4
  %i = alloca i32, align 4
  %p = alloca %struct.rtx_def*, align 8
  %prev_ebb_head = alloca %struct.rtx_def*, align 8
  %label = alloca %struct.rtx_def*, align 8
  %end_label = alloca %struct.rtx_def*, align 8
  %next_maybe_never = alloca i32, align 4
  %last_max_reg = alloca i32, align 4
  %load_copies = alloca %struct.bitmap_head_def, align 8
  %store_copies = alloca %struct.bitmap_head_def, align 8
  %written = alloca i32, align 4
  %reg = alloca %struct.rtx_def*, align 8
  %mem = alloca %struct.rtx_def*, align 8
  %mem_list_entry = alloca %struct.rtx_def*, align 8
  %j = alloca i32, align 4
  %set = alloca %struct.rtx_def*, align 8
  %e = alloca %struct.cselib_val_struct*, align 8
  %set456 = alloca %struct.rtx_def*, align 8
  %best = alloca %struct.rtx_def*, align 8
  %j457 = alloca i32, align 4
  %const_equiv = alloca %struct.elt_loc_list*, align 8
  %equiv = alloca %struct.elt_loc_list*, align 8
  %best_equiv = alloca %struct.elt_loc_list*, align 8
  %ptr_ = alloca %struct.bitmap_element_def*, align 8
  %indx_ = alloca i32, align 4
  %bit_num_ = alloca i32, align 4
  %word_num_ = alloca i32, align 4
  %word_ = alloca i64, align 8
  %mask_ = alloca i64, align 8
  %ptr_677 = alloca %struct.bitmap_element_def*, align 8
  %indx_679 = alloca i32, align 4
  %bit_num_680 = alloca i32, align 4
  %word_num_681 = alloca i32, align 4
  %word_709 = alloca i64, align 8
  %mask_720 = alloca i64, align 8
  %rr = alloca %struct.rtx_pair, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %aux = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 22
  %1 = load i8*, i8** %aux, align 8
  %2 = bitcast i8* %1 to %struct.loop_info*
  store %struct.loop_info* %2, %struct.loop_info** %loop_info, align 8
  %3 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %aux1 = getelementptr inbounds %struct.loop, %struct.loop* %3, i32 0, i32 22
  %4 = load i8*, i8** %aux1, align 8
  %5 = bitcast i8* %4 to %struct.loop_info*
  %regs2 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %5, i32 0, i32 28
  store %struct.loop_regs* %regs2, %struct.loop_regs** %regs, align 8
  store i32 0, i32* %maybe_never, align 4
  store %struct.rtx_def* null, %struct.rtx_def** %label, align 8
  store i32 0, i32* %next_maybe_never, align 4
  %call = call i32 @max_reg_num()
  store i32 %call, i32* %last_max_reg, align 4
  %6 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %mems_idx = getelementptr inbounds %struct.loop_info, %struct.loop_info* %6, i32 0, i32 21
  %7 = load i32, i32* %mems_idx, align 4
  %cmp = icmp eq i32 %7, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %8 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %end = getelementptr inbounds %struct.loop, %struct.loop* %8, i32 0, i32 27
  %9 = load %struct.rtx_def*, %struct.rtx_def** %end, align 8
  %call3 = call %struct.rtx_def* @next_nonnote_insn(%struct.rtx_def* %9)
  store %struct.rtx_def* %call3, %struct.rtx_def** %end_label, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %end_label, align 8
  %tobool = icmp ne %struct.rtx_def* %10, null
  br i1 %tobool, label %land.lhs.true, label %if.end.6

land.lhs.true:                                    ; preds = %if.end
  %11 = load %struct.rtx_def*, %struct.rtx_def** %end_label, align 8
  %12 = bitcast %struct.rtx_def* %11 to i32*
  %bf.load = load i32, i32* %12, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp4 = icmp ne i32 %bf.clear, 36
  br i1 %cmp4, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %land.lhs.true
  store %struct.rtx_def* null, %struct.rtx_def** %end_label, align 8
  br label %if.end.6

if.end.6:                                         ; preds = %if.then.5, %land.lhs.true, %if.end
  %13 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %14 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %scan_start = getelementptr inbounds %struct.loop, %struct.loop* %14, i32 0, i32 29
  %15 = load %struct.rtx_def*, %struct.rtx_def** %scan_start, align 8
  %call7 = call %struct.rtx_def* @next_insn_in_loop(%struct.loop* %13, %struct.rtx_def* %15)
  store %struct.rtx_def* %call7, %struct.rtx_def** %p, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.6
  %16 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %cmp8 = icmp ne %struct.rtx_def* %16, null
  br i1 %cmp8, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %17 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %18 = bitcast %struct.rtx_def* %17 to i32*
  %bf.load9 = load i32, i32* %18, align 8
  %bf.clear10 = and i32 %bf.load9, 65535
  %cmp11 = icmp eq i32 %bf.clear10, 36
  br i1 %cmp11, label %if.then.12, label %if.else

if.then.12:                                       ; preds = %for.body
  store i32 1, i32* %maybe_never, align 4
  br label %if.end.128

if.else:                                          ; preds = %for.body
  %19 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %20 = bitcast %struct.rtx_def* %19 to i32*
  %bf.load13 = load i32, i32* %20, align 8
  %bf.clear14 = and i32 %bf.load13, 65535
  %cmp15 = icmp eq i32 %bf.clear14, 33
  br i1 %cmp15, label %land.lhs.true.16, label %if.else.123

land.lhs.true.16:                                 ; preds = %if.else
  %21 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %22 = bitcast %struct.rtx_def* %21 to i32*
  %bf.load17 = load i32, i32* %22, align 8
  %bf.clear18 = and i32 %bf.load17, 65535
  %cmp19 = icmp eq i32 %bf.clear18, 33
  br i1 %cmp19, label %land.lhs.true.20, label %if.then.34

land.lhs.true.20:                                 ; preds = %land.lhs.true.16
  %23 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 7
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %24 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %25 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %top = getelementptr inbounds %struct.loop, %struct.loop* %25, i32 0, i32 28
  %26 = load %struct.rtx_def*, %struct.rtx_def** %top, align 8
  %cmp21 = icmp eq %struct.rtx_def* %24, %26
  br i1 %cmp21, label %land.lhs.true.22, label %if.then.34

land.lhs.true.22:                                 ; preds = %land.lhs.true.20
  %27 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld23 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1
  %arrayidx24 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld23, i32 0, i64 2
  %rtx25 = bitcast %union.rtunion_def* %arrayidx24 to %struct.rtx_def**
  %28 = load %struct.rtx_def*, %struct.rtx_def** %rtx25, align 8
  %fld26 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1
  %arrayidx27 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld26, i32 0, i64 2
  %rtx28 = bitcast %union.rtunion_def* %arrayidx27 to %struct.rtx_def**
  %29 = load %struct.rtx_def*, %struct.rtx_def** %rtx28, align 8
  %30 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %end29 = getelementptr inbounds %struct.loop, %struct.loop* %30, i32 0, i32 27
  %31 = load %struct.rtx_def*, %struct.rtx_def** %end29, align 8
  %cmp30 = icmp eq %struct.rtx_def* %29, %31
  br i1 %cmp30, label %land.lhs.true.31, label %if.then.34

land.lhs.true.31:                                 ; preds = %land.lhs.true.22
  %32 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %call32 = call i32 @any_uncondjump_p(%struct.rtx_def* %32)
  %tobool33 = icmp ne i32 %call32, 0
  br i1 %tobool33, label %if.else.123, label %if.then.34

if.then.34:                                       ; preds = %land.lhs.true.31, %land.lhs.true.22, %land.lhs.true.20, %land.lhs.true.16
  %33 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld35 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1
  %arrayidx36 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld35, i32 0, i64 7
  %rtx37 = bitcast %union.rtunion_def* %arrayidx36 to %struct.rtx_def**
  %34 = load %struct.rtx_def*, %struct.rtx_def** %rtx37, align 8
  %tobool38 = icmp ne %struct.rtx_def* %34, null
  br i1 %tobool38, label %lor.lhs.false, label %if.then.116

lor.lhs.false:                                    ; preds = %if.then.34
  %35 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld39 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %35, i32 0, i32 1
  %arrayidx40 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld39, i32 0, i64 7
  %rtx41 = bitcast %union.rtunion_def* %arrayidx40 to %struct.rtx_def**
  %36 = load %struct.rtx_def*, %struct.rtx_def** %rtx41, align 8
  %37 = load %struct.rtx_def*, %struct.rtx_def** %end_label, align 8
  %cmp42 = icmp ne %struct.rtx_def* %36, %37
  br i1 %cmp42, label %land.lhs.true.43, label %if.end.117

land.lhs.true.43:                                 ; preds = %lor.lhs.false
  %38 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld44 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %38, i32 0, i32 1
  %arrayidx45 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld44, i32 0, i64 7
  %rtx46 = bitcast %union.rtunion_def* %arrayidx45 to %struct.rtx_def**
  %39 = load %struct.rtx_def*, %struct.rtx_def** %rtx46, align 8
  %fld47 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1
  %arrayidx48 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld47, i32 0, i64 0
  %rtint = bitcast %union.rtunion_def* %arrayidx48 to i32*
  %40 = load i32, i32* %rtint, align 4
  %41 = load i32, i32* @max_uid_for_loop, align 4
  %cmp49 = icmp sge i32 %40, %41
  br i1 %cmp49, label %if.then.116, label %lor.lhs.false.50

lor.lhs.false.50:                                 ; preds = %land.lhs.true.43
  %42 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld51 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %42, i32 0, i32 1
  %arrayidx52 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld51, i32 0, i64 7
  %rtx53 = bitcast %union.rtunion_def* %arrayidx52 to %struct.rtx_def**
  %43 = load %struct.rtx_def*, %struct.rtx_def** %rtx53, align 8
  %fld54 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %43, i32 0, i32 1
  %arrayidx55 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld54, i32 0, i64 0
  %rtint56 = bitcast %union.rtunion_def* %arrayidx55 to i32*
  %44 = load i32, i32* %rtint56, align 4
  %45 = load i32, i32* @max_uid_for_loop, align 4
  %cmp57 = icmp slt i32 %44, %45
  br i1 %cmp57, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false.50
  %46 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld58 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %46, i32 0, i32 1
  %arrayidx59 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld58, i32 0, i64 7
  %rtx60 = bitcast %union.rtunion_def* %arrayidx59 to %struct.rtx_def**
  %47 = load %struct.rtx_def*, %struct.rtx_def** %rtx60, align 8
  %fld61 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %47, i32 0, i32 1
  %arrayidx62 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld61, i32 0, i64 0
  %rtint63 = bitcast %union.rtunion_def* %arrayidx62 to i32*
  %48 = load i32, i32* %rtint63, align 4
  %idxprom = sext i32 %48 to i64
  %49 = load i32*, i32** @uid_luid, align 8
  %arrayidx64 = getelementptr inbounds i32, i32* %49, i64 %idxprom
  %50 = load i32, i32* %arrayidx64, align 4
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false.50
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 9637, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @__FUNCTION__.load_mems, i32 0, i32 0)) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %51, %cond.true
  %cond = phi i32 [ %50, %cond.true ], [ -1, %51 ]
  %52 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %start = getelementptr inbounds %struct.loop, %struct.loop* %52, i32 0, i32 26
  %53 = load %struct.rtx_def*, %struct.rtx_def** %start, align 8
  %fld65 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %53, i32 0, i32 1
  %arrayidx66 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld65, i32 0, i64 0
  %rtint67 = bitcast %union.rtunion_def* %arrayidx66 to i32*
  %54 = load i32, i32* %rtint67, align 4
  %55 = load i32, i32* @max_uid_for_loop, align 4
  %cmp68 = icmp slt i32 %54, %55
  br i1 %cmp68, label %cond.true.69, label %cond.false.76

cond.true.69:                                     ; preds = %cond.end
  %56 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %start70 = getelementptr inbounds %struct.loop, %struct.loop* %56, i32 0, i32 26
  %57 = load %struct.rtx_def*, %struct.rtx_def** %start70, align 8
  %fld71 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %57, i32 0, i32 1
  %arrayidx72 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld71, i32 0, i64 0
  %rtint73 = bitcast %union.rtunion_def* %arrayidx72 to i32*
  %58 = load i32, i32* %rtint73, align 4
  %idxprom74 = sext i32 %58 to i64
  %59 = load i32*, i32** @uid_luid, align 8
  %arrayidx75 = getelementptr inbounds i32, i32* %59, i64 %idxprom74
  %60 = load i32, i32* %arrayidx75, align 4
  br label %cond.end.77

cond.false.76:                                    ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 9637, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @__FUNCTION__.load_mems, i32 0, i32 0)) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end.77

cond.end.77:                                      ; preds = %61, %cond.true.69
  %cond78 = phi i32 [ %60, %cond.true.69 ], [ -1, %61 ]
  %cmp79 = icmp slt i32 %cond, %cond78
  br i1 %cmp79, label %if.then.116, label %lor.lhs.false.80

lor.lhs.false.80:                                 ; preds = %cond.end.77
  %62 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld81 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %62, i32 0, i32 1
  %arrayidx82 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld81, i32 0, i64 7
  %rtx83 = bitcast %union.rtunion_def* %arrayidx82 to %struct.rtx_def**
  %63 = load %struct.rtx_def*, %struct.rtx_def** %rtx83, align 8
  %fld84 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %63, i32 0, i32 1
  %arrayidx85 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld84, i32 0, i64 0
  %rtint86 = bitcast %union.rtunion_def* %arrayidx85 to i32*
  %64 = load i32, i32* %rtint86, align 4
  %65 = load i32, i32* @max_uid_for_loop, align 4
  %cmp87 = icmp slt i32 %64, %65
  br i1 %cmp87, label %cond.true.88, label %cond.false.97

cond.true.88:                                     ; preds = %lor.lhs.false.80
  %66 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld89 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %66, i32 0, i32 1
  %arrayidx90 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld89, i32 0, i64 7
  %rtx91 = bitcast %union.rtunion_def* %arrayidx90 to %struct.rtx_def**
  %67 = load %struct.rtx_def*, %struct.rtx_def** %rtx91, align 8
  %fld92 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %67, i32 0, i32 1
  %arrayidx93 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld92, i32 0, i64 0
  %rtint94 = bitcast %union.rtunion_def* %arrayidx93 to i32*
  %68 = load i32, i32* %rtint94, align 4
  %idxprom95 = sext i32 %68 to i64
  %69 = load i32*, i32** @uid_luid, align 8
  %arrayidx96 = getelementptr inbounds i32, i32* %69, i64 %idxprom95
  %70 = load i32, i32* %arrayidx96, align 4
  br label %cond.end.98

cond.false.97:                                    ; preds = %lor.lhs.false.80
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 9638, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @__FUNCTION__.load_mems, i32 0, i32 0)) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end.98

cond.end.98:                                      ; preds = %71, %cond.true.88
  %cond99 = phi i32 [ %70, %cond.true.88 ], [ -1, %71 ]
  %72 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %end100 = getelementptr inbounds %struct.loop, %struct.loop* %72, i32 0, i32 27
  %73 = load %struct.rtx_def*, %struct.rtx_def** %end100, align 8
  %fld101 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %73, i32 0, i32 1
  %arrayidx102 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld101, i32 0, i64 0
  %rtint103 = bitcast %union.rtunion_def* %arrayidx102 to i32*
  %74 = load i32, i32* %rtint103, align 4
  %75 = load i32, i32* @max_uid_for_loop, align 4
  %cmp104 = icmp slt i32 %74, %75
  br i1 %cmp104, label %cond.true.105, label %cond.false.112

cond.true.105:                                    ; preds = %cond.end.98
  %76 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %end106 = getelementptr inbounds %struct.loop, %struct.loop* %76, i32 0, i32 27
  %77 = load %struct.rtx_def*, %struct.rtx_def** %end106, align 8
  %fld107 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %77, i32 0, i32 1
  %arrayidx108 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld107, i32 0, i64 0
  %rtint109 = bitcast %union.rtunion_def* %arrayidx108 to i32*
  %78 = load i32, i32* %rtint109, align 4
  %idxprom110 = sext i32 %78 to i64
  %79 = load i32*, i32** @uid_luid, align 8
  %arrayidx111 = getelementptr inbounds i32, i32* %79, i64 %idxprom110
  %80 = load i32, i32* %arrayidx111, align 4
  br label %cond.end.113

cond.false.112:                                   ; preds = %cond.end.98
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 9638, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @__FUNCTION__.load_mems, i32 0, i32 0)) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end.113

cond.end.113:                                     ; preds = %81, %cond.true.105
  %cond114 = phi i32 [ %80, %cond.true.105 ], [ -1, %81 ]
  %cmp115 = icmp sgt i32 %cond99, %cond114
  br i1 %cmp115, label %if.then.116, label %if.end.117

if.then.116:                                      ; preds = %cond.end.113, %cond.end.77, %land.lhs.true.43, %if.then.34
  br label %return

if.end.117:                                       ; preds = %cond.end.113, %lor.lhs.false
  %82 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %call118 = call i32 @any_condjump_p(%struct.rtx_def* %82)
  %tobool119 = icmp ne i32 %call118, 0
  br i1 %tobool119, label %if.else.121, label %if.then.120

if.then.120:                                      ; preds = %if.end.117
  store i32 1, i32* %maybe_never, align 4
  br label %if.end.122

if.else.121:                                      ; preds = %if.end.117
  store i32 1, i32* %next_maybe_never, align 4
  br label %if.end.122

if.end.122:                                       ; preds = %if.else.121, %if.then.120
  br label %if.end.127

if.else.123:                                      ; preds = %land.lhs.true.31, %if.else
  %83 = load i32, i32* %next_maybe_never, align 4
  %tobool124 = icmp ne i32 %83, 0
  br i1 %tobool124, label %if.then.125, label %if.end.126

if.then.125:                                      ; preds = %if.else.123
  store i32 1, i32* %maybe_never, align 4
  br label %if.end.126

if.end.126:                                       ; preds = %if.then.125, %if.else.123
  br label %if.end.127

if.end.127:                                       ; preds = %if.end.126, %if.end.122
  br label %if.end.128

if.end.128:                                       ; preds = %if.end.127, %if.then.12
  br label %for.inc

for.inc:                                          ; preds = %if.end.128
  %84 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %85 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %call129 = call %struct.rtx_def* @next_insn_in_loop(%struct.loop* %84, %struct.rtx_def* %85)
  store %struct.rtx_def* %call129, %struct.rtx_def** %p, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %86 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %start130 = getelementptr inbounds %struct.loop, %struct.loop* %86, i32 0, i32 26
  %87 = load %struct.rtx_def*, %struct.rtx_def** %start130, align 8
  store %struct.rtx_def* %87, %struct.rtx_def** %p, align 8
  br label %for.cond.131

for.cond.131:                                     ; preds = %for.inc.140, %for.end
  %88 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld132 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %88, i32 0, i32 1
  %arrayidx133 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld132, i32 0, i64 1
  %rtx134 = bitcast %union.rtunion_def* %arrayidx133 to %struct.rtx_def**
  %89 = load %struct.rtx_def*, %struct.rtx_def** %rtx134, align 8
  %tobool135 = icmp ne %struct.rtx_def* %89, null
  br i1 %tobool135, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond.131
  %90 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %91 = bitcast %struct.rtx_def* %90 to i32*
  %bf.load136 = load i32, i32* %91, align 8
  %bf.clear137 = and i32 %bf.load136, 65535
  %cmp138 = icmp ne i32 %bf.clear137, 36
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond.131
  %92 = phi i1 [ false, %for.cond.131 ], [ %cmp138, %land.rhs ]
  br i1 %92, label %for.body.139, label %for.end.144

for.body.139:                                     ; preds = %land.end
  br label %for.inc.140

for.inc.140:                                      ; preds = %for.body.139
  %93 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld141 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %93, i32 0, i32 1
  %arrayidx142 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld141, i32 0, i64 1
  %rtx143 = bitcast %union.rtunion_def* %arrayidx142 to %struct.rtx_def**
  %94 = load %struct.rtx_def*, %struct.rtx_def** %rtx143, align 8
  store %struct.rtx_def* %94, %struct.rtx_def** %p, align 8
  br label %for.cond.131

for.end.144:                                      ; preds = %land.end
  %95 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  store %struct.rtx_def* %95, %struct.rtx_def** %prev_ebb_head, align 8
  call void @cselib_init()
  br label %for.cond.145

for.cond.145:                                     ; preds = %for.inc.149, %for.end.144
  %96 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %97 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %start146 = getelementptr inbounds %struct.loop, %struct.loop* %97, i32 0, i32 26
  %98 = load %struct.rtx_def*, %struct.rtx_def** %start146, align 8
  %cmp147 = icmp ne %struct.rtx_def* %96, %98
  br i1 %cmp147, label %for.body.148, label %for.end.153

for.body.148:                                     ; preds = %for.cond.145
  %99 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  call void @cselib_process_insn(%struct.rtx_def* %99)
  br label %for.inc.149

for.inc.149:                                      ; preds = %for.body.148
  %100 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld150 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %100, i32 0, i32 1
  %arrayidx151 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld150, i32 0, i64 2
  %rtx152 = bitcast %union.rtunion_def* %arrayidx151 to %struct.rtx_def**
  %101 = load %struct.rtx_def*, %struct.rtx_def** %rtx152, align 8
  store %struct.rtx_def* %101, %struct.rtx_def** %p, align 8
  br label %for.cond.145

for.end.153:                                      ; preds = %for.cond.145
  store i32 0, i32* %i, align 4
  br label %for.cond.154

for.cond.154:                                     ; preds = %for.inc.751, %for.end.153
  %102 = load i32, i32* %i, align 4
  %103 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %mems_idx155 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %103, i32 0, i32 21
  %104 = load i32, i32* %mems_idx155, align 4
  %cmp156 = icmp slt i32 %102, %104
  br i1 %cmp156, label %for.body.157, label %for.end.753

for.body.157:                                     ; preds = %for.cond.154
  store i32 0, i32* %written, align 4
  %105 = load i32, i32* %i, align 4
  %idxprom158 = sext i32 %105 to i64
  %106 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %mems = getelementptr inbounds %struct.loop_info, %struct.loop_info* %106, i32 0, i32 20
  %107 = load %struct.loop_mem_info*, %struct.loop_mem_info** %mems, align 8
  %arrayidx159 = getelementptr inbounds %struct.loop_mem_info, %struct.loop_mem_info* %107, i64 %idxprom158
  %mem160 = getelementptr inbounds %struct.loop_mem_info, %struct.loop_mem_info* %arrayidx159, i32 0, i32 0
  %108 = load %struct.rtx_def*, %struct.rtx_def** %mem160, align 8
  store %struct.rtx_def* %108, %struct.rtx_def** %mem, align 8
  %109 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8
  %110 = bitcast %struct.rtx_def* %109 to i32*
  %bf.load161 = load i32, i32* %110, align 8
  %bf.lshr = lshr i32 %bf.load161, 27
  %bf.clear162 = and i32 %bf.lshr, 1
  %tobool163 = icmp ne i32 %bf.clear162, 0
  br i1 %tobool163, label %if.then.170, label %lor.lhs.false.164

lor.lhs.false.164:                                ; preds = %for.body.157
  %111 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %112 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8
  %fld165 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %112, i32 0, i32 1
  %arrayidx166 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld165, i32 0, i64 0
  %rtx167 = bitcast %union.rtunion_def* %arrayidx166 to %struct.rtx_def**
  %113 = load %struct.rtx_def*, %struct.rtx_def** %rtx167, align 8
  %call168 = call i32 @loop_invariant_p(%struct.loop* %111, %struct.rtx_def* %113)
  %cmp169 = icmp ne i32 %call168, 1
  br i1 %cmp169, label %if.then.170, label %if.end.174

if.then.170:                                      ; preds = %lor.lhs.false.164, %for.body.157
  %114 = load i32, i32* %i, align 4
  %idxprom171 = sext i32 %114 to i64
  %115 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %mems172 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %115, i32 0, i32 20
  %116 = load %struct.loop_mem_info*, %struct.loop_mem_info** %mems172, align 8
  %arrayidx173 = getelementptr inbounds %struct.loop_mem_info, %struct.loop_mem_info* %116, i64 %idxprom171
  %optimize = getelementptr inbounds %struct.loop_mem_info, %struct.loop_mem_info* %arrayidx173, i32 0, i32 2
  store i32 0, i32* %optimize, align 4
  br label %if.end.174

if.end.174:                                       ; preds = %if.then.170, %lor.lhs.false.164
  %117 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %store_mems = getelementptr inbounds %struct.loop_info, %struct.loop_info* %117, i32 0, i32 19
  %118 = load %struct.rtx_def*, %struct.rtx_def** %store_mems, align 8
  store %struct.rtx_def* %118, %struct.rtx_def** %mem_list_entry, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end.194, %if.end.174
  %119 = load %struct.rtx_def*, %struct.rtx_def** %mem_list_entry, align 8
  %tobool175 = icmp ne %struct.rtx_def* %119, null
  br i1 %tobool175, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %120 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8
  %121 = load %struct.rtx_def*, %struct.rtx_def** %mem_list_entry, align 8
  %fld176 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %121, i32 0, i32 1
  %arrayidx177 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld176, i32 0, i64 0
  %rtx178 = bitcast %union.rtunion_def* %arrayidx177 to %struct.rtx_def**
  %122 = load %struct.rtx_def*, %struct.rtx_def** %rtx178, align 8
  %call179 = call i32 @rtx_equal_p(%struct.rtx_def* %120, %struct.rtx_def* %122)
  %tobool180 = icmp ne i32 %call179, 0
  br i1 %tobool180, label %if.then.181, label %if.else.182

if.then.181:                                      ; preds = %while.body
  store i32 1, i32* %written, align 4
  br label %if.end.194

if.else.182:                                      ; preds = %while.body
  %123 = load %struct.rtx_def*, %struct.rtx_def** %mem_list_entry, align 8
  %fld183 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %123, i32 0, i32 1
  %arrayidx184 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld183, i32 0, i64 0
  %rtx185 = bitcast %union.rtunion_def* %arrayidx184 to %struct.rtx_def**
  %124 = load %struct.rtx_def*, %struct.rtx_def** %rtx185, align 8
  %125 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8
  %call186 = call i32 @true_dependence(%struct.rtx_def* %124, i32 0, %struct.rtx_def* %125, i32 (%struct.rtx_def*, i32)* @rtx_varies_p)
  %tobool187 = icmp ne i32 %call186, 0
  br i1 %tobool187, label %if.then.188, label %if.end.193

if.then.188:                                      ; preds = %if.else.182
  %126 = load i32, i32* %i, align 4
  %idxprom189 = sext i32 %126 to i64
  %127 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %mems190 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %127, i32 0, i32 20
  %128 = load %struct.loop_mem_info*, %struct.loop_mem_info** %mems190, align 8
  %arrayidx191 = getelementptr inbounds %struct.loop_mem_info, %struct.loop_mem_info* %128, i64 %idxprom189
  %optimize192 = getelementptr inbounds %struct.loop_mem_info, %struct.loop_mem_info* %arrayidx191, i32 0, i32 2
  store i32 0, i32* %optimize192, align 4
  br label %while.end

if.end.193:                                       ; preds = %if.else.182
  br label %if.end.194

if.end.194:                                       ; preds = %if.end.193, %if.then.181
  %129 = load %struct.rtx_def*, %struct.rtx_def** %mem_list_entry, align 8
  %fld195 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %129, i32 0, i32 1
  %arrayidx196 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld195, i32 0, i64 1
  %rtx197 = bitcast %union.rtunion_def* %arrayidx196 to %struct.rtx_def**
  %130 = load %struct.rtx_def*, %struct.rtx_def** %rtx197, align 8
  store %struct.rtx_def* %130, %struct.rtx_def** %mem_list_entry, align 8
  br label %while.cond

while.end:                                        ; preds = %if.then.188, %while.cond
  %131 = load i32, i32* @flag_float_store, align 4
  %tobool198 = icmp ne i32 %131, 0
  br i1 %tobool198, label %land.lhs.true.199, label %if.end.213

land.lhs.true.199:                                ; preds = %while.end
  %132 = load i32, i32* %written, align 4
  %tobool200 = icmp ne i32 %132, 0
  br i1 %tobool200, label %land.lhs.true.201, label %if.end.213

land.lhs.true.201:                                ; preds = %land.lhs.true.199
  %133 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8
  %134 = bitcast %struct.rtx_def* %133 to i32*
  %bf.load202 = load i32, i32* %134, align 8
  %bf.lshr203 = lshr i32 %bf.load202, 16
  %bf.clear204 = and i32 %bf.lshr203, 255
  %idxprom205 = sext i32 %bf.clear204 to i64
  %arrayidx206 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom205
  %135 = load i32, i32* %arrayidx206, align 4
  %cmp207 = icmp eq i32 %135, 2
  br i1 %cmp207, label %if.then.208, label %if.end.213

if.then.208:                                      ; preds = %land.lhs.true.201
  %136 = load i32, i32* %i, align 4
  %idxprom209 = sext i32 %136 to i64
  %137 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %mems210 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %137, i32 0, i32 20
  %138 = load %struct.loop_mem_info*, %struct.loop_mem_info** %mems210, align 8
  %arrayidx211 = getelementptr inbounds %struct.loop_mem_info, %struct.loop_mem_info* %138, i64 %idxprom209
  %optimize212 = getelementptr inbounds %struct.loop_mem_info, %struct.loop_mem_info* %arrayidx211, i32 0, i32 2
  store i32 0, i32* %optimize212, align 4
  br label %if.end.213

if.end.213:                                       ; preds = %if.then.208, %land.lhs.true.201, %land.lhs.true.199, %while.end
  %139 = load i32, i32* %i, align 4
  %idxprom214 = sext i32 %139 to i64
  %140 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %mems215 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %140, i32 0, i32 20
  %141 = load %struct.loop_mem_info*, %struct.loop_mem_info** %mems215, align 8
  %arrayidx216 = getelementptr inbounds %struct.loop_mem_info, %struct.loop_mem_info* %141, i64 %idxprom214
  %optimize217 = getelementptr inbounds %struct.loop_mem_info, %struct.loop_mem_info* %arrayidx216, i32 0, i32 2
  %142 = load i32, i32* %optimize217, align 4
  %tobool218 = icmp ne i32 %142, 0
  br i1 %tobool218, label %land.lhs.true.219, label %if.end.244

land.lhs.true.219:                                ; preds = %if.end.213
  %143 = load i32, i32* %written, align 4
  %tobool220 = icmp ne i32 %143, 0
  br i1 %tobool220, label %if.then.221, label %if.end.244

if.then.221:                                      ; preds = %land.lhs.true.219
  store i32 0, i32* %j, align 4
  br label %for.cond.222

for.cond.222:                                     ; preds = %for.inc.242, %if.then.221
  %144 = load i32, i32* %j, align 4
  %145 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %mems_idx223 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %145, i32 0, i32 21
  %146 = load i32, i32* %mems_idx223, align 4
  %cmp224 = icmp slt i32 %144, %146
  br i1 %cmp224, label %for.body.225, label %for.end.243

for.body.225:                                     ; preds = %for.cond.222
  %147 = load i32, i32* %j, align 4
  %148 = load i32, i32* %i, align 4
  %cmp226 = icmp eq i32 %147, %148
  br i1 %cmp226, label %if.then.227, label %if.else.228

if.then.227:                                      ; preds = %for.body.225
  br label %for.inc.242

if.else.228:                                      ; preds = %for.body.225
  %149 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8
  %150 = load i32, i32* %j, align 4
  %idxprom229 = sext i32 %150 to i64
  %151 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %mems230 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %151, i32 0, i32 20
  %152 = load %struct.loop_mem_info*, %struct.loop_mem_info** %mems230, align 8
  %arrayidx231 = getelementptr inbounds %struct.loop_mem_info, %struct.loop_mem_info* %152, i64 %idxprom229
  %mem232 = getelementptr inbounds %struct.loop_mem_info, %struct.loop_mem_info* %arrayidx231, i32 0, i32 0
  %153 = load %struct.rtx_def*, %struct.rtx_def** %mem232, align 8
  %call233 = call i32 @true_dependence(%struct.rtx_def* %149, i32 0, %struct.rtx_def* %153, i32 (%struct.rtx_def*, i32)* @rtx_varies_p)
  %tobool234 = icmp ne i32 %call233, 0
  br i1 %tobool234, label %if.then.235, label %if.end.240

if.then.235:                                      ; preds = %if.else.228
  %154 = load i32, i32* %i, align 4
  %idxprom236 = sext i32 %154 to i64
  %155 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %mems237 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %155, i32 0, i32 20
  %156 = load %struct.loop_mem_info*, %struct.loop_mem_info** %mems237, align 8
  %arrayidx238 = getelementptr inbounds %struct.loop_mem_info, %struct.loop_mem_info* %156, i64 %idxprom236
  %optimize239 = getelementptr inbounds %struct.loop_mem_info, %struct.loop_mem_info* %arrayidx238, i32 0, i32 2
  store i32 0, i32* %optimize239, align 4
  br label %for.end.243

if.end.240:                                       ; preds = %if.else.228
  br label %if.end.241

if.end.241:                                       ; preds = %if.end.240
  br label %for.inc.242

for.inc.242:                                      ; preds = %if.end.241, %if.then.227
  %157 = load i32, i32* %j, align 4
  %inc = add nsw i32 %157, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond.222

for.end.243:                                      ; preds = %if.then.235, %for.cond.222
  br label %if.end.244

if.end.244:                                       ; preds = %for.end.243, %land.lhs.true.219, %if.end.213
  %158 = load i32, i32* %maybe_never, align 4
  %tobool245 = icmp ne i32 %158, 0
  br i1 %tobool245, label %land.lhs.true.246, label %if.end.254

land.lhs.true.246:                                ; preds = %if.end.244
  %159 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8
  %call247 = call i32 @may_trap_p(%struct.rtx_def* %159)
  %tobool248 = icmp ne i32 %call247, 0
  br i1 %tobool248, label %if.then.249, label %if.end.254

if.then.249:                                      ; preds = %land.lhs.true.246
  %160 = load i32, i32* %i, align 4
  %idxprom250 = sext i32 %160 to i64
  %161 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %mems251 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %161, i32 0, i32 20
  %162 = load %struct.loop_mem_info*, %struct.loop_mem_info** %mems251, align 8
  %arrayidx252 = getelementptr inbounds %struct.loop_mem_info, %struct.loop_mem_info* %162, i64 %idxprom250
  %optimize253 = getelementptr inbounds %struct.loop_mem_info, %struct.loop_mem_info* %arrayidx252, i32 0, i32 2
  store i32 0, i32* %optimize253, align 4
  br label %if.end.254

if.end.254:                                       ; preds = %if.then.249, %land.lhs.true.246, %if.end.244
  %163 = load i32, i32* %i, align 4
  %idxprom255 = sext i32 %163 to i64
  %164 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %mems256 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %164, i32 0, i32 20
  %165 = load %struct.loop_mem_info*, %struct.loop_mem_info** %mems256, align 8
  %arrayidx257 = getelementptr inbounds %struct.loop_mem_info, %struct.loop_mem_info* %165, i64 %idxprom255
  %optimize258 = getelementptr inbounds %struct.loop_mem_info, %struct.loop_mem_info* %arrayidx257, i32 0, i32 2
  %166 = load i32, i32* %optimize258, align 4
  %tobool259 = icmp ne i32 %166, 0
  br i1 %tobool259, label %if.end.261, label %if.then.260

if.then.260:                                      ; preds = %if.end.254
  br label %for.inc.751

if.end.261:                                       ; preds = %if.end.254
  %call262 = call %struct.bitmap_head_def* @bitmap_initialize(%struct.bitmap_head_def* %load_copies)
  %call263 = call %struct.bitmap_head_def* @bitmap_initialize(%struct.bitmap_head_def* %store_copies)
  %167 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8
  %168 = bitcast %struct.rtx_def* %167 to i32*
  %bf.load264 = load i32, i32* %168, align 8
  %bf.lshr265 = lshr i32 %bf.load264, 16
  %bf.clear266 = and i32 %bf.lshr265, 255
  %call267 = call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear266)
  store %struct.rtx_def* %call267, %struct.rtx_def** %reg, align 8
  %169 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %170 = bitcast %struct.rtx_def* %169 to i32*
  %bf.load268 = load i32, i32* %170, align 8
  %bf.clear269 = and i32 %bf.load268, -134217729
  %bf.set = or i32 %bf.clear269, 134217728
  store i32 %bf.set, i32* %170, align 8
  %171 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %172 = load i32, i32* %i, align 4
  %idxprom270 = sext i32 %172 to i64
  %173 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %mems271 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %173, i32 0, i32 20
  %174 = load %struct.loop_mem_info*, %struct.loop_mem_info** %mems271, align 8
  %arrayidx272 = getelementptr inbounds %struct.loop_mem_info, %struct.loop_mem_info* %174, i64 %idxprom270
  %reg273 = getelementptr inbounds %struct.loop_mem_info, %struct.loop_mem_info* %arrayidx272, i32 0, i32 1
  store %struct.rtx_def* %171, %struct.rtx_def** %reg273, align 8
  store i32 0, i32* %maybe_never, align 4
  %175 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %176 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %scan_start274 = getelementptr inbounds %struct.loop, %struct.loop* %176, i32 0, i32 29
  %177 = load %struct.rtx_def*, %struct.rtx_def** %scan_start274, align 8
  %call275 = call %struct.rtx_def* @next_insn_in_loop(%struct.loop* %175, %struct.rtx_def* %177)
  store %struct.rtx_def* %call275, %struct.rtx_def** %p, align 8
  br label %for.cond.276

for.cond.276:                                     ; preds = %for.inc.444, %if.end.261
  %178 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %cmp277 = icmp ne %struct.rtx_def* %178, null
  br i1 %cmp277, label %for.body.278, label %for.end.446

for.body.278:                                     ; preds = %for.cond.276
  %179 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %180 = bitcast %struct.rtx_def* %179 to i32*
  %bf.load279 = load i32, i32* %180, align 8
  %bf.clear280 = and i32 %bf.load279, 65535
  %idxprom281 = sext i32 %bf.clear280 to i64
  %arrayidx282 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom281
  %181 = load i8, i8* %arrayidx282, align 1
  %conv = sext i8 %181 to i32
  %cmp283 = icmp eq i32 %conv, 105
  br i1 %cmp283, label %if.then.285, label %if.end.432

if.then.285:                                      ; preds = %for.body.278
  %182 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %183 = bitcast %struct.rtx_def* %182 to i32*
  %bf.load286 = load i32, i32* %183, align 8
  %bf.clear287 = and i32 %bf.load286, 65535
  %idxprom288 = sext i32 %bf.clear287 to i64
  %arrayidx289 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom288
  %184 = load i8, i8* %arrayidx289, align 1
  %conv290 = sext i8 %184 to i32
  %cmp291 = icmp eq i32 %conv290, 105
  br i1 %cmp291, label %cond.true.293, label %cond.false.312

cond.true.293:                                    ; preds = %if.then.285
  %185 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld294 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %185, i32 0, i32 1
  %arrayidx295 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld294, i32 0, i64 3
  %rtx296 = bitcast %union.rtunion_def* %arrayidx295 to %struct.rtx_def**
  %186 = load %struct.rtx_def*, %struct.rtx_def** %rtx296, align 8
  %187 = bitcast %struct.rtx_def* %186 to i32*
  %bf.load297 = load i32, i32* %187, align 8
  %bf.clear298 = and i32 %bf.load297, 65535
  %cmp299 = icmp eq i32 %bf.clear298, 47
  br i1 %cmp299, label %cond.true.301, label %cond.false.305

cond.true.301:                                    ; preds = %cond.true.293
  %188 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld302 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %188, i32 0, i32 1
  %arrayidx303 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld302, i32 0, i64 3
  %rtx304 = bitcast %union.rtunion_def* %arrayidx303 to %struct.rtx_def**
  %189 = load %struct.rtx_def*, %struct.rtx_def** %rtx304, align 8
  br label %cond.end.310

cond.false.305:                                   ; preds = %cond.true.293
  %190 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %191 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld306 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %191, i32 0, i32 1
  %arrayidx307 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld306, i32 0, i64 3
  %rtx308 = bitcast %union.rtunion_def* %arrayidx307 to %struct.rtx_def**
  %192 = load %struct.rtx_def*, %struct.rtx_def** %rtx308, align 8
  %call309 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %190, %struct.rtx_def* %192)
  br label %cond.end.310

cond.end.310:                                     ; preds = %cond.false.305, %cond.true.301
  %cond311 = phi %struct.rtx_def* [ %189, %cond.true.301 ], [ %call309, %cond.false.305 ]
  br label %cond.end.313

cond.false.312:                                   ; preds = %if.then.285
  br label %cond.end.313

cond.end.313:                                     ; preds = %cond.false.312, %cond.end.310
  %cond314 = phi %struct.rtx_def* [ %cond311, %cond.end.310 ], [ null, %cond.false.312 ]
  store %struct.rtx_def* %cond314, %struct.rtx_def** %set, align 8
  %193 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %tobool315 = icmp ne %struct.rtx_def* %193, null
  br i1 %tobool315, label %land.lhs.true.316, label %if.end.367

land.lhs.true.316:                                ; preds = %cond.end.313
  %194 = load i32, i32* %maybe_never, align 4
  %tobool317 = icmp ne i32 %194, 0
  br i1 %tobool317, label %if.end.367, label %land.lhs.true.318

land.lhs.true.318:                                ; preds = %land.lhs.true.316
  %195 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld319 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %195, i32 0, i32 1
  %arrayidx320 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld319, i32 0, i64 0
  %rtx321 = bitcast %union.rtunion_def* %arrayidx320 to %struct.rtx_def**
  %196 = load %struct.rtx_def*, %struct.rtx_def** %rtx321, align 8
  %197 = bitcast %struct.rtx_def* %196 to i32*
  %bf.load322 = load i32, i32* %197, align 8
  %bf.clear323 = and i32 %bf.load322, 65535
  %cmp324 = icmp eq i32 %bf.clear323, 61
  br i1 %cmp324, label %land.lhs.true.326, label %if.end.367

land.lhs.true.326:                                ; preds = %land.lhs.true.318
  %198 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld327 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %198, i32 0, i32 1
  %arrayidx328 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld327, i32 0, i64 0
  %rtx329 = bitcast %union.rtunion_def* %arrayidx328 to %struct.rtx_def**
  %199 = load %struct.rtx_def*, %struct.rtx_def** %rtx329, align 8
  %fld330 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %199, i32 0, i32 1
  %arrayidx331 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld330, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx331 to i32*
  %200 = load i32, i32* %rtuint, align 4
  %cmp332 = icmp uge i32 %200, 53
  br i1 %cmp332, label %land.lhs.true.334, label %if.end.367

land.lhs.true.334:                                ; preds = %land.lhs.true.326
  %201 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld335 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %201, i32 0, i32 1
  %arrayidx336 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld335, i32 0, i64 0
  %rtx337 = bitcast %union.rtunion_def* %arrayidx336 to %struct.rtx_def**
  %202 = load %struct.rtx_def*, %struct.rtx_def** %rtx337, align 8
  %fld338 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %202, i32 0, i32 1
  %arrayidx339 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld338, i32 0, i64 0
  %rtuint340 = bitcast %union.rtunion_def* %arrayidx339 to i32*
  %203 = load i32, i32* %rtuint340, align 4
  %204 = load i32, i32* %last_max_reg, align 4
  %cmp341 = icmp ult i32 %203, %204
  br i1 %cmp341, label %land.lhs.true.343, label %if.end.367

land.lhs.true.343:                                ; preds = %land.lhs.true.334
  %205 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld344 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %205, i32 0, i32 1
  %arrayidx345 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld344, i32 0, i64 0
  %rtx346 = bitcast %union.rtunion_def* %arrayidx345 to %struct.rtx_def**
  %206 = load %struct.rtx_def*, %struct.rtx_def** %rtx346, align 8
  %fld347 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %206, i32 0, i32 1
  %arrayidx348 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld347, i32 0, i64 0
  %rtuint349 = bitcast %union.rtunion_def* %arrayidx348 to i32*
  %207 = load i32, i32* %rtuint349, align 4
  %idxprom350 = zext i32 %207 to i64
  %208 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %array = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %208, i32 0, i32 2
  %209 = load %struct.loop_reg*, %struct.loop_reg** %array, align 8
  %arrayidx351 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %209, i64 %idxprom350
  %n_times_set = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %arrayidx351, i32 0, i32 1
  %210 = load i32, i32* %n_times_set, align 4
  %cmp352 = icmp eq i32 %210, 1
  br i1 %cmp352, label %land.lhs.true.354, label %if.end.367

land.lhs.true.354:                                ; preds = %land.lhs.true.343
  %211 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld355 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %211, i32 0, i32 1
  %arrayidx356 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld355, i32 0, i64 1
  %rtx357 = bitcast %union.rtunion_def* %arrayidx356 to %struct.rtx_def**
  %212 = load %struct.rtx_def*, %struct.rtx_def** %rtx357, align 8
  %213 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8
  %call358 = call i32 @rtx_equal_p(%struct.rtx_def* %212, %struct.rtx_def* %213)
  %tobool359 = icmp ne i32 %call358, 0
  br i1 %tobool359, label %if.then.360, label %if.end.367

if.then.360:                                      ; preds = %land.lhs.true.354
  %214 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld361 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %214, i32 0, i32 1
  %arrayidx362 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld361, i32 0, i64 0
  %rtx363 = bitcast %union.rtunion_def* %arrayidx362 to %struct.rtx_def**
  %215 = load %struct.rtx_def*, %struct.rtx_def** %rtx363, align 8
  %fld364 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %215, i32 0, i32 1
  %arrayidx365 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld364, i32 0, i64 0
  %rtuint366 = bitcast %union.rtunion_def* %arrayidx365 to i32*
  %216 = load i32, i32* %rtuint366, align 4
  call void @bitmap_set_bit(%struct.bitmap_head_def* %load_copies, i32 %216)
  br label %if.end.367

if.end.367:                                       ; preds = %if.then.360, %land.lhs.true.354, %land.lhs.true.343, %land.lhs.true.334, %land.lhs.true.326, %land.lhs.true.318, %land.lhs.true.316, %cond.end.313
  %217 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %tobool368 = icmp ne %struct.rtx_def* %217, null
  br i1 %tobool368, label %land.lhs.true.369, label %if.end.423

land.lhs.true.369:                                ; preds = %if.end.367
  %218 = load i32, i32* %maybe_never, align 4
  %tobool370 = icmp ne i32 %218, 0
  br i1 %tobool370, label %if.end.423, label %land.lhs.true.371

land.lhs.true.371:                                ; preds = %land.lhs.true.369
  %219 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld372 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %219, i32 0, i32 1
  %arrayidx373 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld372, i32 0, i64 1
  %rtx374 = bitcast %union.rtunion_def* %arrayidx373 to %struct.rtx_def**
  %220 = load %struct.rtx_def*, %struct.rtx_def** %rtx374, align 8
  %221 = bitcast %struct.rtx_def* %220 to i32*
  %bf.load375 = load i32, i32* %221, align 8
  %bf.clear376 = and i32 %bf.load375, 65535
  %cmp377 = icmp eq i32 %bf.clear376, 61
  br i1 %cmp377, label %land.lhs.true.379, label %if.end.423

land.lhs.true.379:                                ; preds = %land.lhs.true.371
  %222 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld380 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %222, i32 0, i32 1
  %arrayidx381 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld380, i32 0, i64 1
  %rtx382 = bitcast %union.rtunion_def* %arrayidx381 to %struct.rtx_def**
  %223 = load %struct.rtx_def*, %struct.rtx_def** %rtx382, align 8
  %fld383 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %223, i32 0, i32 1
  %arrayidx384 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld383, i32 0, i64 0
  %rtuint385 = bitcast %union.rtunion_def* %arrayidx384 to i32*
  %224 = load i32, i32* %rtuint385, align 4
  %cmp386 = icmp uge i32 %224, 53
  br i1 %cmp386, label %land.lhs.true.388, label %if.end.423

land.lhs.true.388:                                ; preds = %land.lhs.true.379
  %225 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld389 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %225, i32 0, i32 1
  %arrayidx390 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld389, i32 0, i64 1
  %rtx391 = bitcast %union.rtunion_def* %arrayidx390 to %struct.rtx_def**
  %226 = load %struct.rtx_def*, %struct.rtx_def** %rtx391, align 8
  %fld392 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %226, i32 0, i32 1
  %arrayidx393 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld392, i32 0, i64 0
  %rtuint394 = bitcast %union.rtunion_def* %arrayidx393 to i32*
  %227 = load i32, i32* %rtuint394, align 4
  %228 = load i32, i32* %last_max_reg, align 4
  %cmp395 = icmp ult i32 %227, %228
  br i1 %cmp395, label %land.lhs.true.397, label %if.end.423

land.lhs.true.397:                                ; preds = %land.lhs.true.388
  %229 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld398 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %229, i32 0, i32 1
  %arrayidx399 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld398, i32 0, i64 1
  %rtx400 = bitcast %union.rtunion_def* %arrayidx399 to %struct.rtx_def**
  %230 = load %struct.rtx_def*, %struct.rtx_def** %rtx400, align 8
  %fld401 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %230, i32 0, i32 1
  %arrayidx402 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld401, i32 0, i64 0
  %rtuint403 = bitcast %union.rtunion_def* %arrayidx402 to i32*
  %231 = load i32, i32* %rtuint403, align 4
  %idxprom404 = zext i32 %231 to i64
  %232 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %array405 = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %232, i32 0, i32 2
  %233 = load %struct.loop_reg*, %struct.loop_reg** %array405, align 8
  %arrayidx406 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %233, i64 %idxprom404
  %n_times_set407 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %arrayidx406, i32 0, i32 1
  %234 = load i32, i32* %n_times_set407, align 4
  %cmp408 = icmp eq i32 %234, 1
  br i1 %cmp408, label %land.lhs.true.410, label %if.end.423

land.lhs.true.410:                                ; preds = %land.lhs.true.397
  %235 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld411 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %235, i32 0, i32 1
  %arrayidx412 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld411, i32 0, i64 0
  %rtx413 = bitcast %union.rtunion_def* %arrayidx412 to %struct.rtx_def**
  %236 = load %struct.rtx_def*, %struct.rtx_def** %rtx413, align 8
  %237 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8
  %call414 = call i32 @rtx_equal_p(%struct.rtx_def* %236, %struct.rtx_def* %237)
  %tobool415 = icmp ne i32 %call414, 0
  br i1 %tobool415, label %if.then.416, label %if.end.423

if.then.416:                                      ; preds = %land.lhs.true.410
  %238 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld417 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %238, i32 0, i32 1
  %arrayidx418 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld417, i32 0, i64 1
  %rtx419 = bitcast %union.rtunion_def* %arrayidx418 to %struct.rtx_def**
  %239 = load %struct.rtx_def*, %struct.rtx_def** %rtx419, align 8
  %fld420 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %239, i32 0, i32 1
  %arrayidx421 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld420, i32 0, i64 0
  %rtuint422 = bitcast %union.rtunion_def* %arrayidx421 to i32*
  %240 = load i32, i32* %rtuint422, align 4
  call void @bitmap_set_bit(%struct.bitmap_head_def* %store_copies, i32 %240)
  br label %if.end.423

if.end.423:                                       ; preds = %if.then.416, %land.lhs.true.410, %land.lhs.true.397, %land.lhs.true.388, %land.lhs.true.379, %land.lhs.true.371, %land.lhs.true.369, %if.end.367
  %241 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %242 = load i32, i32* %i, align 4
  %idxprom424 = sext i32 %242 to i64
  %243 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %mems425 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %243, i32 0, i32 20
  %244 = load %struct.loop_mem_info*, %struct.loop_mem_info** %mems425, align 8
  %arrayidx426 = getelementptr inbounds %struct.loop_mem_info, %struct.loop_mem_info* %244, i64 %idxprom424
  %mem427 = getelementptr inbounds %struct.loop_mem_info, %struct.loop_mem_info* %arrayidx426, i32 0, i32 0
  %245 = load %struct.rtx_def*, %struct.rtx_def** %mem427, align 8
  %246 = load i32, i32* %i, align 4
  %idxprom428 = sext i32 %246 to i64
  %247 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %mems429 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %247, i32 0, i32 20
  %248 = load %struct.loop_mem_info*, %struct.loop_mem_info** %mems429, align 8
  %arrayidx430 = getelementptr inbounds %struct.loop_mem_info, %struct.loop_mem_info* %248, i64 %idxprom428
  %reg431 = getelementptr inbounds %struct.loop_mem_info, %struct.loop_mem_info* %arrayidx430, i32 0, i32 1
  %249 = load %struct.rtx_def*, %struct.rtx_def** %reg431, align 8
  call void @replace_loop_mems(%struct.rtx_def* %241, %struct.rtx_def* %245, %struct.rtx_def* %249)
  br label %if.end.432

if.end.432:                                       ; preds = %if.end.423, %for.body.278
  %250 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %251 = bitcast %struct.rtx_def* %250 to i32*
  %bf.load433 = load i32, i32* %251, align 8
  %bf.clear434 = and i32 %bf.load433, 65535
  %cmp435 = icmp eq i32 %bf.clear434, 36
  br i1 %cmp435, label %if.then.442, label %lor.lhs.false.437

lor.lhs.false.437:                                ; preds = %if.end.432
  %252 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %253 = bitcast %struct.rtx_def* %252 to i32*
  %bf.load438 = load i32, i32* %253, align 8
  %bf.clear439 = and i32 %bf.load438, 65535
  %cmp440 = icmp eq i32 %bf.clear439, 33
  br i1 %cmp440, label %if.then.442, label %if.end.443

if.then.442:                                      ; preds = %lor.lhs.false.437, %if.end.432
  store i32 1, i32* %maybe_never, align 4
  br label %if.end.443

if.end.443:                                       ; preds = %if.then.442, %lor.lhs.false.437
  br label %for.inc.444

for.inc.444:                                      ; preds = %if.end.443
  %254 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %255 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %call445 = call %struct.rtx_def* @next_insn_in_loop(%struct.loop* %254, %struct.rtx_def* %255)
  store %struct.rtx_def* %call445, %struct.rtx_def** %p, align 8
  br label %for.cond.276

for.end.446:                                      ; preds = %for.cond.276
  %call447 = call i32 @apply_change_group()
  %tobool448 = icmp ne i32 %call447, 0
  br i1 %tobool448, label %if.else.454, label %if.then.449

if.then.449:                                      ; preds = %for.end.446
  %256 = load i32, i32* %i, align 4
  %idxprom450 = sext i32 %256 to i64
  %257 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %mems451 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %257, i32 0, i32 20
  %258 = load %struct.loop_mem_info*, %struct.loop_mem_info** %mems451, align 8
  %arrayidx452 = getelementptr inbounds %struct.loop_mem_info, %struct.loop_mem_info* %258, i64 %idxprom450
  %optimize453 = getelementptr inbounds %struct.loop_mem_info, %struct.loop_mem_info* %arrayidx452, i32 0, i32 2
  store i32 0, i32* %optimize453, align 4
  br label %if.end.750

if.else.454:                                      ; preds = %for.end.446
  %259 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8
  %call455 = call %struct.cselib_val_struct* @cselib_lookup(%struct.rtx_def* %259, i32 0, i32 0)
  store %struct.cselib_val_struct* %call455, %struct.cselib_val_struct** %e, align 8
  %260 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8
  store %struct.rtx_def* %260, %struct.rtx_def** %best, align 8
  store %struct.elt_loc_list* null, %struct.elt_loc_list** %const_equiv, align 8
  %261 = load %struct.cselib_val_struct*, %struct.cselib_val_struct** %e, align 8
  %tobool458 = icmp ne %struct.cselib_val_struct* %261, null
  br i1 %tobool458, label %if.then.459, label %if.end.547

if.then.459:                                      ; preds = %if.else.454
  store %struct.elt_loc_list* null, %struct.elt_loc_list** %best_equiv, align 8
  %262 = load %struct.cselib_val_struct*, %struct.cselib_val_struct** %e, align 8
  %locs = getelementptr inbounds %struct.cselib_val_struct, %struct.cselib_val_struct* %262, i32 0, i32 2
  %263 = load %struct.elt_loc_list*, %struct.elt_loc_list** %locs, align 8
  store %struct.elt_loc_list* %263, %struct.elt_loc_list** %equiv, align 8
  br label %for.cond.460

for.cond.460:                                     ; preds = %for.inc.526, %if.then.459
  %264 = load %struct.elt_loc_list*, %struct.elt_loc_list** %equiv, align 8
  %tobool461 = icmp ne %struct.elt_loc_list* %264, null
  br i1 %tobool461, label %for.body.462, label %for.end.527

for.body.462:                                     ; preds = %for.cond.460
  %265 = load %struct.elt_loc_list*, %struct.elt_loc_list** %equiv, align 8
  %loc = getelementptr inbounds %struct.elt_loc_list, %struct.elt_loc_list* %265, i32 0, i32 1
  %266 = load %struct.rtx_def*, %struct.rtx_def** %loc, align 8
  %267 = bitcast %struct.rtx_def* %266 to i32*
  %bf.load463 = load i32, i32* %267, align 8
  %bf.clear464 = and i32 %bf.load463, 65535
  %cmp465 = icmp eq i32 %bf.clear464, 67
  br i1 %cmp465, label %if.then.509, label %lor.lhs.false.467

lor.lhs.false.467:                                ; preds = %for.body.462
  %268 = load %struct.elt_loc_list*, %struct.elt_loc_list** %equiv, align 8
  %loc468 = getelementptr inbounds %struct.elt_loc_list, %struct.elt_loc_list* %268, i32 0, i32 1
  %269 = load %struct.rtx_def*, %struct.rtx_def** %loc468, align 8
  %270 = bitcast %struct.rtx_def* %269 to i32*
  %bf.load469 = load i32, i32* %270, align 8
  %bf.clear470 = and i32 %bf.load469, 65535
  %cmp471 = icmp eq i32 %bf.clear470, 68
  br i1 %cmp471, label %if.then.509, label %lor.lhs.false.473

lor.lhs.false.473:                                ; preds = %lor.lhs.false.467
  %271 = load %struct.elt_loc_list*, %struct.elt_loc_list** %equiv, align 8
  %loc474 = getelementptr inbounds %struct.elt_loc_list, %struct.elt_loc_list* %271, i32 0, i32 1
  %272 = load %struct.rtx_def*, %struct.rtx_def** %loc474, align 8
  %273 = bitcast %struct.rtx_def* %272 to i32*
  %bf.load475 = load i32, i32* %273, align 8
  %bf.clear476 = and i32 %bf.load475, 65535
  %cmp477 = icmp eq i32 %bf.clear476, 54
  br i1 %cmp477, label %if.then.509, label %lor.lhs.false.479

lor.lhs.false.479:                                ; preds = %lor.lhs.false.473
  %274 = load %struct.elt_loc_list*, %struct.elt_loc_list** %equiv, align 8
  %loc480 = getelementptr inbounds %struct.elt_loc_list, %struct.elt_loc_list* %274, i32 0, i32 1
  %275 = load %struct.rtx_def*, %struct.rtx_def** %loc480, align 8
  %276 = bitcast %struct.rtx_def* %275 to i32*
  %bf.load481 = load i32, i32* %276, align 8
  %bf.clear482 = and i32 %bf.load481, 65535
  %cmp483 = icmp eq i32 %bf.clear482, 55
  br i1 %cmp483, label %if.then.509, label %lor.lhs.false.485

lor.lhs.false.485:                                ; preds = %lor.lhs.false.479
  %277 = load %struct.elt_loc_list*, %struct.elt_loc_list** %equiv, align 8
  %loc486 = getelementptr inbounds %struct.elt_loc_list, %struct.elt_loc_list* %277, i32 0, i32 1
  %278 = load %struct.rtx_def*, %struct.rtx_def** %loc486, align 8
  %279 = bitcast %struct.rtx_def* %278 to i32*
  %bf.load487 = load i32, i32* %279, align 8
  %bf.clear488 = and i32 %bf.load487, 65535
  %cmp489 = icmp eq i32 %bf.clear488, 58
  br i1 %cmp489, label %if.then.509, label %lor.lhs.false.491

lor.lhs.false.491:                                ; preds = %lor.lhs.false.485
  %280 = load %struct.elt_loc_list*, %struct.elt_loc_list** %equiv, align 8
  %loc492 = getelementptr inbounds %struct.elt_loc_list, %struct.elt_loc_list* %280, i32 0, i32 1
  %281 = load %struct.rtx_def*, %struct.rtx_def** %loc492, align 8
  %282 = bitcast %struct.rtx_def* %281 to i32*
  %bf.load493 = load i32, i32* %282, align 8
  %bf.clear494 = and i32 %bf.load493, 65535
  %cmp495 = icmp eq i32 %bf.clear494, 134
  br i1 %cmp495, label %if.then.509, label %lor.lhs.false.497

lor.lhs.false.497:                                ; preds = %lor.lhs.false.491
  %283 = load %struct.elt_loc_list*, %struct.elt_loc_list** %equiv, align 8
  %loc498 = getelementptr inbounds %struct.elt_loc_list, %struct.elt_loc_list* %283, i32 0, i32 1
  %284 = load %struct.rtx_def*, %struct.rtx_def** %loc498, align 8
  %285 = bitcast %struct.rtx_def* %284 to i32*
  %bf.load499 = load i32, i32* %285, align 8
  %bf.clear500 = and i32 %bf.load499, 65535
  %cmp501 = icmp eq i32 %bf.clear500, 56
  br i1 %cmp501, label %if.then.509, label %lor.lhs.false.503

lor.lhs.false.503:                                ; preds = %lor.lhs.false.497
  %286 = load %struct.elt_loc_list*, %struct.elt_loc_list** %equiv, align 8
  %loc504 = getelementptr inbounds %struct.elt_loc_list, %struct.elt_loc_list* %286, i32 0, i32 1
  %287 = load %struct.rtx_def*, %struct.rtx_def** %loc504, align 8
  %288 = bitcast %struct.rtx_def* %287 to i32*
  %bf.load505 = load i32, i32* %288, align 8
  %bf.clear506 = and i32 %bf.load505, 65535
  %cmp507 = icmp eq i32 %bf.clear506, 140
  br i1 %cmp507, label %if.then.509, label %if.else.510

if.then.509:                                      ; preds = %lor.lhs.false.503, %lor.lhs.false.497, %lor.lhs.false.491, %lor.lhs.false.485, %lor.lhs.false.479, %lor.lhs.false.473, %lor.lhs.false.467, %for.body.462
  %289 = load %struct.elt_loc_list*, %struct.elt_loc_list** %equiv, align 8
  store %struct.elt_loc_list* %289, %struct.elt_loc_list** %const_equiv, align 8
  br label %if.end.525

if.else.510:                                      ; preds = %lor.lhs.false.503
  %290 = load %struct.elt_loc_list*, %struct.elt_loc_list** %equiv, align 8
  %loc511 = getelementptr inbounds %struct.elt_loc_list, %struct.elt_loc_list* %290, i32 0, i32 1
  %291 = load %struct.rtx_def*, %struct.rtx_def** %loc511, align 8
  %292 = bitcast %struct.rtx_def* %291 to i32*
  %bf.load512 = load i32, i32* %292, align 8
  %bf.clear513 = and i32 %bf.load512, 65535
  %cmp514 = icmp eq i32 %bf.clear513, 61
  br i1 %cmp514, label %land.lhs.true.516, label %if.end.524

land.lhs.true.516:                                ; preds = %if.else.510
  %293 = load %struct.elt_loc_list*, %struct.elt_loc_list** %equiv, align 8
  %loc517 = getelementptr inbounds %struct.elt_loc_list, %struct.elt_loc_list* %293, i32 0, i32 1
  %294 = load %struct.rtx_def*, %struct.rtx_def** %loc517, align 8
  %fld518 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %294, i32 0, i32 1
  %arrayidx519 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld518, i32 0, i64 0
  %rtuint520 = bitcast %union.rtunion_def* %arrayidx519 to i32*
  %295 = load i32, i32* %rtuint520, align 4
  %cmp521 = icmp uge i32 %295, 53
  br i1 %cmp521, label %if.then.523, label %if.end.524

if.then.523:                                      ; preds = %land.lhs.true.516
  %296 = load %struct.elt_loc_list*, %struct.elt_loc_list** %equiv, align 8
  store %struct.elt_loc_list* %296, %struct.elt_loc_list** %best_equiv, align 8
  br label %if.end.524

if.end.524:                                       ; preds = %if.then.523, %land.lhs.true.516, %if.else.510
  br label %if.end.525

if.end.525:                                       ; preds = %if.end.524, %if.then.509
  br label %for.inc.526

for.inc.526:                                      ; preds = %if.end.525
  %297 = load %struct.elt_loc_list*, %struct.elt_loc_list** %equiv, align 8
  %next = getelementptr inbounds %struct.elt_loc_list, %struct.elt_loc_list* %297, i32 0, i32 0
  %298 = load %struct.elt_loc_list*, %struct.elt_loc_list** %next, align 8
  store %struct.elt_loc_list* %298, %struct.elt_loc_list** %equiv, align 8
  br label %for.cond.460

for.end.527:                                      ; preds = %for.cond.460
  %299 = load %struct.elt_loc_list*, %struct.elt_loc_list** %best_equiv, align 8
  %tobool528 = icmp ne %struct.elt_loc_list* %299, null
  br i1 %tobool528, label %if.else.530, label %if.then.529

if.then.529:                                      ; preds = %for.end.527
  %300 = load %struct.elt_loc_list*, %struct.elt_loc_list** %const_equiv, align 8
  store %struct.elt_loc_list* %300, %struct.elt_loc_list** %best_equiv, align 8
  br label %if.end.541

if.else.530:                                      ; preds = %for.end.527
  %301 = load %struct.elt_loc_list*, %struct.elt_loc_list** %const_equiv, align 8
  %tobool531 = icmp ne %struct.elt_loc_list* %301, null
  br i1 %tobool531, label %land.lhs.true.532, label %if.end.540

land.lhs.true.532:                                ; preds = %if.else.530
  %302 = load %struct.elt_loc_list*, %struct.elt_loc_list** %const_equiv, align 8
  %loc533 = getelementptr inbounds %struct.elt_loc_list, %struct.elt_loc_list* %302, i32 0, i32 1
  %303 = load %struct.rtx_def*, %struct.rtx_def** %loc533, align 8
  %call534 = call i32 @rtx_cost(%struct.rtx_def* %303, i32 47)
  %304 = load %struct.elt_loc_list*, %struct.elt_loc_list** %best_equiv, align 8
  %loc535 = getelementptr inbounds %struct.elt_loc_list, %struct.elt_loc_list* %304, i32 0, i32 1
  %305 = load %struct.rtx_def*, %struct.rtx_def** %loc535, align 8
  %call536 = call i32 @rtx_cost(%struct.rtx_def* %305, i32 47)
  %cmp537 = icmp sle i32 %call534, %call536
  br i1 %cmp537, label %if.then.539, label %if.end.540

if.then.539:                                      ; preds = %land.lhs.true.532
  %306 = load %struct.elt_loc_list*, %struct.elt_loc_list** %const_equiv, align 8
  store %struct.elt_loc_list* %306, %struct.elt_loc_list** %best_equiv, align 8
  store %struct.elt_loc_list* null, %struct.elt_loc_list** %const_equiv, align 8
  br label %if.end.540

if.end.540:                                       ; preds = %if.then.539, %land.lhs.true.532, %if.else.530
  br label %if.end.541

if.end.541:                                       ; preds = %if.end.540, %if.then.529
  %307 = load %struct.elt_loc_list*, %struct.elt_loc_list** %best_equiv, align 8
  %tobool542 = icmp ne %struct.elt_loc_list* %307, null
  br i1 %tobool542, label %if.then.543, label %if.end.546

if.then.543:                                      ; preds = %if.end.541
  %308 = load %struct.elt_loc_list*, %struct.elt_loc_list** %best_equiv, align 8
  %loc544 = getelementptr inbounds %struct.elt_loc_list, %struct.elt_loc_list* %308, i32 0, i32 1
  %309 = load %struct.rtx_def*, %struct.rtx_def** %loc544, align 8
  %call545 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %309)
  store %struct.rtx_def* %call545, %struct.rtx_def** %best, align 8
  br label %if.end.546

if.end.546:                                       ; preds = %if.then.543, %if.end.541
  br label %if.end.547

if.end.547:                                       ; preds = %if.end.546, %if.else.454
  %310 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %311 = load %struct.rtx_def*, %struct.rtx_def** %best, align 8
  %call548 = call %struct.rtx_def* @gen_move_insn(%struct.rtx_def* %310, %struct.rtx_def* %311)
  store %struct.rtx_def* %call548, %struct.rtx_def** %set456, align 8
  %312 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %313 = load %struct.rtx_def*, %struct.rtx_def** %set456, align 8
  %call549 = call %struct.rtx_def* @loop_insn_hoist(%struct.loop* %312, %struct.rtx_def* %313)
  store %struct.rtx_def* %call549, %struct.rtx_def** %set456, align 8
  %314 = load %struct.rtx_def*, %struct.rtx_def** %best, align 8
  %315 = bitcast %struct.rtx_def* %314 to i32*
  %bf.load550 = load i32, i32* %315, align 8
  %bf.clear551 = and i32 %bf.load550, 65535
  %cmp552 = icmp eq i32 %bf.clear551, 61
  br i1 %cmp552, label %if.then.554, label %if.end.589

if.then.554:                                      ; preds = %if.end.547
  %316 = load %struct.rtx_def*, %struct.rtx_def** %prev_ebb_head, align 8
  store %struct.rtx_def* %316, %struct.rtx_def** %p, align 8
  br label %for.cond.555

for.cond.555:                                     ; preds = %for.inc.584, %if.then.554
  %317 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %318 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %start556 = getelementptr inbounds %struct.loop, %struct.loop* %318, i32 0, i32 26
  %319 = load %struct.rtx_def*, %struct.rtx_def** %start556, align 8
  %cmp557 = icmp ne %struct.rtx_def* %317, %319
  br i1 %cmp557, label %for.body.559, label %for.end.588

for.body.559:                                     ; preds = %for.cond.555
  %320 = load %struct.rtx_def*, %struct.rtx_def** %best, align 8
  %fld560 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %320, i32 0, i32 1
  %arrayidx561 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld560, i32 0, i64 0
  %rtuint562 = bitcast %union.rtunion_def* %arrayidx561 to i32*
  %321 = load i32, i32* %rtuint562, align 4
  %idxprom563 = zext i32 %321 to i64
  %322 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %data = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %322, i32 0, i32 4
  %reg564 = bitcast %union.varray_data_tag* %data to [1 x %struct.reg_info_def*]*
  %arrayidx565 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %reg564, i32 0, i64 %idxprom563
  %323 = load %struct.reg_info_def*, %struct.reg_info_def** %arrayidx565, align 8
  %last_uid = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %323, i32 0, i32 1
  %324 = load i32, i32* %last_uid, align 4
  %325 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld566 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %325, i32 0, i32 1
  %arrayidx567 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld566, i32 0, i64 0
  %rtint568 = bitcast %union.rtunion_def* %arrayidx567 to i32*
  %326 = load i32, i32* %rtint568, align 4
  %cmp569 = icmp eq i32 %324, %326
  br i1 %cmp569, label %if.then.571, label %if.end.583

if.then.571:                                      ; preds = %for.body.559
  %327 = load %struct.rtx_def*, %struct.rtx_def** %set456, align 8
  %fld572 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %327, i32 0, i32 1
  %arrayidx573 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld572, i32 0, i64 0
  %rtint574 = bitcast %union.rtunion_def* %arrayidx573 to i32*
  %328 = load i32, i32* %rtint574, align 4
  %329 = load %struct.rtx_def*, %struct.rtx_def** %best, align 8
  %fld575 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %329, i32 0, i32 1
  %arrayidx576 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld575, i32 0, i64 0
  %rtuint577 = bitcast %union.rtunion_def* %arrayidx576 to i32*
  %330 = load i32, i32* %rtuint577, align 4
  %idxprom578 = zext i32 %330 to i64
  %331 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %data579 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %331, i32 0, i32 4
  %reg580 = bitcast %union.varray_data_tag* %data579 to [1 x %struct.reg_info_def*]*
  %arrayidx581 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %reg580, i32 0, i64 %idxprom578
  %332 = load %struct.reg_info_def*, %struct.reg_info_def** %arrayidx581, align 8
  %last_uid582 = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %332, i32 0, i32 1
  store i32 %328, i32* %last_uid582, align 4
  br label %for.end.588

if.end.583:                                       ; preds = %for.body.559
  br label %for.inc.584

for.inc.584:                                      ; preds = %if.end.583
  %333 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld585 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %333, i32 0, i32 1
  %arrayidx586 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld585, i32 0, i64 2
  %rtx587 = bitcast %union.rtunion_def* %arrayidx586 to %struct.rtx_def**
  %334 = load %struct.rtx_def*, %struct.rtx_def** %rtx587, align 8
  store %struct.rtx_def* %334, %struct.rtx_def** %p, align 8
  br label %for.cond.555

for.end.588:                                      ; preds = %if.then.571, %for.cond.555
  br label %if.end.589

if.end.589:                                       ; preds = %for.end.588, %if.end.547
  %335 = load %struct.elt_loc_list*, %struct.elt_loc_list** %const_equiv, align 8
  %tobool590 = icmp ne %struct.elt_loc_list* %335, null
  br i1 %tobool590, label %if.then.591, label %if.end.595

if.then.591:                                      ; preds = %if.end.589
  %336 = load %struct.rtx_def*, %struct.rtx_def** %set456, align 8
  %337 = load %struct.elt_loc_list*, %struct.elt_loc_list** %const_equiv, align 8
  %loc592 = getelementptr inbounds %struct.elt_loc_list, %struct.elt_loc_list* %337, i32 0, i32 1
  %338 = load %struct.rtx_def*, %struct.rtx_def** %loc592, align 8
  %call593 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %338)
  %call594 = call %struct.rtx_def* @set_unique_reg_note(%struct.rtx_def* %336, i32 4, %struct.rtx_def* %call593)
  br label %if.end.595

if.end.595:                                       ; preds = %if.then.591, %if.end.589
  %339 = load i32, i32* %written, align 4
  %tobool596 = icmp ne i32 %339, 0
  br i1 %tobool596, label %if.then.597, label %if.end.608

if.then.597:                                      ; preds = %if.end.595
  %340 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  %cmp598 = icmp eq %struct.rtx_def* %340, null
  br i1 %cmp598, label %if.then.600, label %if.end.604

if.then.600:                                      ; preds = %if.then.597
  %call601 = call %struct.rtx_def* @gen_label_rtx()
  store %struct.rtx_def* %call601, %struct.rtx_def** %label, align 8
  %341 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  %342 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %end602 = getelementptr inbounds %struct.loop, %struct.loop* %342, i32 0, i32 27
  %343 = load %struct.rtx_def*, %struct.rtx_def** %end602, align 8
  %call603 = call %struct.rtx_def* @emit_label_after(%struct.rtx_def* %341, %struct.rtx_def* %343)
  br label %if.end.604

if.end.604:                                       ; preds = %if.then.600, %if.then.597
  %344 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8
  %call605 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %344)
  %345 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %call606 = call %struct.rtx_def* @gen_move_insn(%struct.rtx_def* %call605, %struct.rtx_def* %345)
  store %struct.rtx_def* %call606, %struct.rtx_def** %set456, align 8
  %346 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %347 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  %348 = load %struct.rtx_def*, %struct.rtx_def** %set456, align 8
  %call607 = call %struct.rtx_def* @loop_insn_emit_after(%struct.loop* %346, %struct.basic_block_def* null, %struct.rtx_def* %347, %struct.rtx_def* %348)
  br label %if.end.608

if.end.608:                                       ; preds = %if.end.604, %if.end.595
  %349 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %tobool609 = icmp ne %struct._IO_FILE* %349, null
  br i1 %tobool609, label %if.then.610, label %if.end.618

if.then.610:                                      ; preds = %if.end.608
  %350 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %351 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %fld611 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %351, i32 0, i32 1
  %arrayidx612 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld611, i32 0, i64 0
  %rtuint613 = bitcast %union.rtunion_def* %arrayidx612 to i32*
  %352 = load i32, i32* %rtuint613, align 4
  %353 = load i32, i32* %written, align 4
  %tobool614 = icmp ne i32 %353, 0
  %cond615 = select i1 %tobool614, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.21, i32 0, i32 0)
  %call616 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %350, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.19, i32 0, i32 0), i32 %352, i8* %cond615)
  %354 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %355 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8
  call void @print_rtl(%struct._IO_FILE* %354, %struct.rtx_def* %355)
  %356 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %call617 = call i32 @fputc(i32 10, %struct._IO_FILE* %356)
  br label %if.end.618

if.end.618:                                       ; preds = %if.then.610, %if.end.608
  br label %do.body

do.body:                                          ; preds = %if.end.618
  %first = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %load_copies, i32 0, i32 0
  %357 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first, align 8
  store %struct.bitmap_element_def* %357, %struct.bitmap_element_def** %ptr_, align 8
  store i32 0, i32* %indx_, align 4
  store i32 53, i32* %bit_num_, align 4
  store i32 0, i32* %word_num_, align 4
  br label %while.cond.619

while.cond.619:                                   ; preds = %while.body.626, %do.body
  %358 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %ptr_, align 8
  %cmp620 = icmp ne %struct.bitmap_element_def* %358, null
  br i1 %cmp620, label %land.rhs.622, label %land.end.625

land.rhs.622:                                     ; preds = %while.cond.619
  %359 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %ptr_, align 8
  %indx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %359, i32 0, i32 2
  %360 = load i32, i32* %indx, align 4
  %361 = load i32, i32* %indx_, align 4
  %cmp623 = icmp ult i32 %360, %361
  br label %land.end.625

land.end.625:                                     ; preds = %land.rhs.622, %while.cond.619
  %362 = phi i1 [ false, %while.cond.619 ], [ %cmp623, %land.rhs.622 ]
  br i1 %362, label %while.body.626, label %while.end.628

while.body.626:                                   ; preds = %land.end.625
  %363 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %ptr_, align 8
  %next627 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %363, i32 0, i32 0
  %364 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next627, align 8
  store %struct.bitmap_element_def* %364, %struct.bitmap_element_def** %ptr_, align 8
  br label %while.cond.619

while.end.628:                                    ; preds = %land.end.625
  %365 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %ptr_, align 8
  %cmp629 = icmp ne %struct.bitmap_element_def* %365, null
  br i1 %cmp629, label %land.lhs.true.631, label %if.end.636

land.lhs.true.631:                                ; preds = %while.end.628
  %366 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %ptr_, align 8
  %indx632 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %366, i32 0, i32 2
  %367 = load i32, i32* %indx632, align 4
  %368 = load i32, i32* %indx_, align 4
  %cmp633 = icmp ne i32 %367, %368
  br i1 %cmp633, label %if.then.635, label %if.end.636

if.then.635:                                      ; preds = %land.lhs.true.631
  store i32 0, i32* %bit_num_, align 4
  store i32 0, i32* %word_num_, align 4
  br label %if.end.636

if.end.636:                                       ; preds = %if.then.635, %land.lhs.true.631, %while.end.628
  br label %for.cond.637

for.cond.637:                                     ; preds = %for.inc.673, %if.end.636
  %369 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %ptr_, align 8
  %cmp638 = icmp ne %struct.bitmap_element_def* %369, null
  br i1 %cmp638, label %for.body.640, label %for.end.675

for.body.640:                                     ; preds = %for.cond.637
  br label %for.cond.641

for.cond.641:                                     ; preds = %for.inc.670, %for.body.640
  %370 = load i32, i32* %word_num_, align 4
  %cmp642 = icmp ult i32 %370, 2
  br i1 %cmp642, label %for.body.644, label %for.end.672

for.body.644:                                     ; preds = %for.cond.641
  %371 = load i32, i32* %word_num_, align 4
  %idxprom645 = zext i32 %371 to i64
  %372 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %ptr_, align 8
  %bits = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %372, i32 0, i32 3
  %arrayidx646 = getelementptr inbounds [2 x i64], [2 x i64]* %bits, i32 0, i64 %idxprom645
  %373 = load i64, i64* %arrayidx646, align 8
  store i64 %373, i64* %word_, align 8
  %374 = load i64, i64* %word_, align 8
  %cmp647 = icmp ne i64 %374, 0
  br i1 %cmp647, label %if.then.649, label %if.end.669

if.then.649:                                      ; preds = %for.body.644
  br label %for.cond.650

for.cond.650:                                     ; preds = %for.inc.666, %if.then.649
  %375 = load i32, i32* %bit_num_, align 4
  %cmp651 = icmp ult i32 %375, 64
  br i1 %cmp651, label %for.body.653, label %for.end.668

for.body.653:                                     ; preds = %for.cond.650
  %376 = load i32, i32* %bit_num_, align 4
  %sh_prom = zext i32 %376 to i64
  %shl = shl i64 1, %sh_prom
  store i64 %shl, i64* %mask_, align 8
  %377 = load i64, i64* %word_, align 8
  %378 = load i64, i64* %mask_, align 8
  %and = and i64 %377, %378
  %cmp654 = icmp ne i64 %and, 0
  br i1 %cmp654, label %if.then.656, label %if.end.665

if.then.656:                                      ; preds = %for.body.653
  %379 = load i64, i64* %mask_, align 8
  %neg = xor i64 %379, -1
  %380 = load i64, i64* %word_, align 8
  %and657 = and i64 %380, %neg
  store i64 %and657, i64* %word_, align 8
  %381 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %ptr_, align 8
  %indx658 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %381, i32 0, i32 2
  %382 = load i32, i32* %indx658, align 4
  %mul = mul i32 %382, 128
  %383 = load i32, i32* %word_num_, align 4
  %mul659 = mul i32 %383, 64
  %add = add i32 %mul, %mul659
  %384 = load i32, i32* %bit_num_, align 4
  %add660 = add i32 %add, %384
  store i32 %add660, i32* %j457, align 4
  %385 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %386 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %387 = load i32, i32* %j457, align 4
  call void @try_copy_prop(%struct.loop* %385, %struct.rtx_def* %386, i32 %387)
  %388 = load i64, i64* %word_, align 8
  %cmp661 = icmp eq i64 %388, 0
  br i1 %cmp661, label %if.then.663, label %if.end.664

if.then.663:                                      ; preds = %if.then.656
  br label %for.end.668

if.end.664:                                       ; preds = %if.then.656
  br label %if.end.665

if.end.665:                                       ; preds = %if.end.664, %for.body.653
  br label %for.inc.666

for.inc.666:                                      ; preds = %if.end.665
  %389 = load i32, i32* %bit_num_, align 4
  %inc667 = add i32 %389, 1
  store i32 %inc667, i32* %bit_num_, align 4
  br label %for.cond.650

for.end.668:                                      ; preds = %if.then.663, %for.cond.650
  br label %if.end.669

if.end.669:                                       ; preds = %for.end.668, %for.body.644
  store i32 0, i32* %bit_num_, align 4
  br label %for.inc.670

for.inc.670:                                      ; preds = %if.end.669
  %390 = load i32, i32* %word_num_, align 4
  %inc671 = add i32 %390, 1
  store i32 %inc671, i32* %word_num_, align 4
  br label %for.cond.641

for.end.672:                                      ; preds = %for.cond.641
  store i32 0, i32* %word_num_, align 4
  br label %for.inc.673

for.inc.673:                                      ; preds = %for.end.672
  %391 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %ptr_, align 8
  %next674 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %391, i32 0, i32 0
  %392 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next674, align 8
  store %struct.bitmap_element_def* %392, %struct.bitmap_element_def** %ptr_, align 8
  br label %for.cond.637

for.end.675:                                      ; preds = %for.cond.637
  br label %do.end

do.end:                                           ; preds = %for.end.675
  call void @bitmap_clear(%struct.bitmap_head_def* %load_copies)
  br label %do.body.676

do.body.676:                                      ; preds = %do.end
  %first678 = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %store_copies, i32 0, i32 0
  %393 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first678, align 8
  store %struct.bitmap_element_def* %393, %struct.bitmap_element_def** %ptr_677, align 8
  store i32 0, i32* %indx_679, align 4
  store i32 53, i32* %bit_num_680, align 4
  store i32 0, i32* %word_num_681, align 4
  br label %while.cond.682

while.cond.682:                                   ; preds = %while.body.690, %do.body.676
  %394 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %ptr_677, align 8
  %cmp683 = icmp ne %struct.bitmap_element_def* %394, null
  br i1 %cmp683, label %land.rhs.685, label %land.end.689

land.rhs.685:                                     ; preds = %while.cond.682
  %395 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %ptr_677, align 8
  %indx686 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %395, i32 0, i32 2
  %396 = load i32, i32* %indx686, align 4
  %397 = load i32, i32* %indx_679, align 4
  %cmp687 = icmp ult i32 %396, %397
  br label %land.end.689

land.end.689:                                     ; preds = %land.rhs.685, %while.cond.682
  %398 = phi i1 [ false, %while.cond.682 ], [ %cmp687, %land.rhs.685 ]
  br i1 %398, label %while.body.690, label %while.end.692

while.body.690:                                   ; preds = %land.end.689
  %399 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %ptr_677, align 8
  %next691 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %399, i32 0, i32 0
  %400 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next691, align 8
  store %struct.bitmap_element_def* %400, %struct.bitmap_element_def** %ptr_677, align 8
  br label %while.cond.682

while.end.692:                                    ; preds = %land.end.689
  %401 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %ptr_677, align 8
  %cmp693 = icmp ne %struct.bitmap_element_def* %401, null
  br i1 %cmp693, label %land.lhs.true.695, label %if.end.700

land.lhs.true.695:                                ; preds = %while.end.692
  %402 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %ptr_677, align 8
  %indx696 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %402, i32 0, i32 2
  %403 = load i32, i32* %indx696, align 4
  %404 = load i32, i32* %indx_679, align 4
  %cmp697 = icmp ne i32 %403, %404
  br i1 %cmp697, label %if.then.699, label %if.end.700

if.then.699:                                      ; preds = %land.lhs.true.695
  store i32 0, i32* %bit_num_680, align 4
  store i32 0, i32* %word_num_681, align 4
  br label %if.end.700

if.end.700:                                       ; preds = %if.then.699, %land.lhs.true.695, %while.end.692
  br label %for.cond.701

for.cond.701:                                     ; preds = %for.inc.746, %if.end.700
  %405 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %ptr_677, align 8
  %cmp702 = icmp ne %struct.bitmap_element_def* %405, null
  br i1 %cmp702, label %for.body.704, label %for.end.748

for.body.704:                                     ; preds = %for.cond.701
  br label %for.cond.705

for.cond.705:                                     ; preds = %for.inc.743, %for.body.704
  %406 = load i32, i32* %word_num_681, align 4
  %cmp706 = icmp ult i32 %406, 2
  br i1 %cmp706, label %for.body.708, label %for.end.745

for.body.708:                                     ; preds = %for.cond.705
  %407 = load i32, i32* %word_num_681, align 4
  %idxprom710 = zext i32 %407 to i64
  %408 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %ptr_677, align 8
  %bits711 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %408, i32 0, i32 3
  %arrayidx712 = getelementptr inbounds [2 x i64], [2 x i64]* %bits711, i32 0, i64 %idxprom710
  %409 = load i64, i64* %arrayidx712, align 8
  store i64 %409, i64* %word_709, align 8
  %410 = load i64, i64* %word_709, align 8
  %cmp713 = icmp ne i64 %410, 0
  br i1 %cmp713, label %if.then.715, label %if.end.742

if.then.715:                                      ; preds = %for.body.708
  br label %for.cond.716

for.cond.716:                                     ; preds = %for.inc.739, %if.then.715
  %411 = load i32, i32* %bit_num_680, align 4
  %cmp717 = icmp ult i32 %411, 64
  br i1 %cmp717, label %for.body.719, label %for.end.741

for.body.719:                                     ; preds = %for.cond.716
  %412 = load i32, i32* %bit_num_680, align 4
  %sh_prom721 = zext i32 %412 to i64
  %shl722 = shl i64 1, %sh_prom721
  store i64 %shl722, i64* %mask_720, align 8
  %413 = load i64, i64* %word_709, align 8
  %414 = load i64, i64* %mask_720, align 8
  %and723 = and i64 %413, %414
  %cmp724 = icmp ne i64 %and723, 0
  br i1 %cmp724, label %if.then.726, label %if.end.738

if.then.726:                                      ; preds = %for.body.719
  %415 = load i64, i64* %mask_720, align 8
  %neg727 = xor i64 %415, -1
  %416 = load i64, i64* %word_709, align 8
  %and728 = and i64 %416, %neg727
  store i64 %and728, i64* %word_709, align 8
  %417 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %ptr_677, align 8
  %indx729 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %417, i32 0, i32 2
  %418 = load i32, i32* %indx729, align 4
  %mul730 = mul i32 %418, 128
  %419 = load i32, i32* %word_num_681, align 4
  %mul731 = mul i32 %419, 64
  %add732 = add i32 %mul730, %mul731
  %420 = load i32, i32* %bit_num_680, align 4
  %add733 = add i32 %add732, %420
  store i32 %add733, i32* %j457, align 4
  %421 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %422 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %423 = load i32, i32* %j457, align 4
  call void @try_swap_copy_prop(%struct.loop* %421, %struct.rtx_def* %422, i32 %423)
  %424 = load i64, i64* %word_709, align 8
  %cmp734 = icmp eq i64 %424, 0
  br i1 %cmp734, label %if.then.736, label %if.end.737

if.then.736:                                      ; preds = %if.then.726
  br label %for.end.741

if.end.737:                                       ; preds = %if.then.726
  br label %if.end.738

if.end.738:                                       ; preds = %if.end.737, %for.body.719
  br label %for.inc.739

for.inc.739:                                      ; preds = %if.end.738
  %425 = load i32, i32* %bit_num_680, align 4
  %inc740 = add i32 %425, 1
  store i32 %inc740, i32* %bit_num_680, align 4
  br label %for.cond.716

for.end.741:                                      ; preds = %if.then.736, %for.cond.716
  br label %if.end.742

if.end.742:                                       ; preds = %for.end.741, %for.body.708
  store i32 0, i32* %bit_num_680, align 4
  br label %for.inc.743

for.inc.743:                                      ; preds = %if.end.742
  %426 = load i32, i32* %word_num_681, align 4
  %inc744 = add i32 %426, 1
  store i32 %inc744, i32* %word_num_681, align 4
  br label %for.cond.705

for.end.745:                                      ; preds = %for.cond.705
  store i32 0, i32* %word_num_681, align 4
  br label %for.inc.746

for.inc.746:                                      ; preds = %for.end.745
  %427 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %ptr_677, align 8
  %next747 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %427, i32 0, i32 0
  %428 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next747, align 8
  store %struct.bitmap_element_def* %428, %struct.bitmap_element_def** %ptr_677, align 8
  br label %for.cond.701

for.end.748:                                      ; preds = %for.cond.701
  br label %do.end.749

do.end.749:                                       ; preds = %for.end.748
  call void @bitmap_clear(%struct.bitmap_head_def* %store_copies)
  br label %if.end.750

if.end.750:                                       ; preds = %do.end.749, %if.then.449
  br label %for.inc.751

for.inc.751:                                      ; preds = %if.end.750, %if.then.260
  %429 = load i32, i32* %i, align 4
  %inc752 = add nsw i32 %429, 1
  store i32 %inc752, i32* %i, align 4
  br label %for.cond.154

for.end.753:                                      ; preds = %for.cond.154
  %430 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  %cmp754 = icmp ne %struct.rtx_def* %430, null
  br i1 %cmp754, label %land.lhs.true.756, label %if.end.787

land.lhs.true.756:                                ; preds = %for.end.753
  %431 = load %struct.rtx_def*, %struct.rtx_def** %end_label, align 8
  %cmp757 = icmp ne %struct.rtx_def* %431, null
  br i1 %cmp757, label %if.then.759, label %if.end.787

if.then.759:                                      ; preds = %land.lhs.true.756
  %432 = load %struct.rtx_def*, %struct.rtx_def** %end_label, align 8
  %r1 = getelementptr inbounds %struct.rtx_pair, %struct.rtx_pair* %rr, i32 0, i32 0
  store %struct.rtx_def* %432, %struct.rtx_def** %r1, align 8
  %433 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  %r2 = getelementptr inbounds %struct.rtx_pair, %struct.rtx_pair* %rr, i32 0, i32 1
  store %struct.rtx_def* %433, %struct.rtx_def** %r2, align 8
  %434 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %start760 = getelementptr inbounds %struct.loop, %struct.loop* %434, i32 0, i32 26
  %435 = load %struct.rtx_def*, %struct.rtx_def** %start760, align 8
  store %struct.rtx_def* %435, %struct.rtx_def** %p, align 8
  br label %for.cond.761

for.cond.761:                                     ; preds = %for.inc.782, %if.then.759
  %436 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %437 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %end762 = getelementptr inbounds %struct.loop, %struct.loop* %437, i32 0, i32 27
  %438 = load %struct.rtx_def*, %struct.rtx_def** %end762, align 8
  %cmp763 = icmp ne %struct.rtx_def* %436, %438
  br i1 %cmp763, label %for.body.765, label %for.end.786

for.body.765:                                     ; preds = %for.cond.761
  %439 = bitcast %struct.rtx_pair* %rr to i8*
  %call766 = call i32 @for_each_rtx(%struct.rtx_def** %p, i32 (%struct.rtx_def**, i8*)* @replace_label, i8* %439)
  %440 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %441 = bitcast %struct.rtx_def* %440 to i32*
  %bf.load767 = load i32, i32* %441, align 8
  %bf.clear768 = and i32 %bf.load767, 65535
  %cmp769 = icmp eq i32 %bf.clear768, 33
  br i1 %cmp769, label %land.lhs.true.771, label %if.end.781

land.lhs.true.771:                                ; preds = %for.body.765
  %442 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld772 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %442, i32 0, i32 1
  %arrayidx773 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld772, i32 0, i64 7
  %rtx774 = bitcast %union.rtunion_def* %arrayidx773 to %struct.rtx_def**
  %443 = load %struct.rtx_def*, %struct.rtx_def** %rtx774, align 8
  %444 = load %struct.rtx_def*, %struct.rtx_def** %end_label, align 8
  %cmp775 = icmp eq %struct.rtx_def* %443, %444
  br i1 %cmp775, label %if.then.777, label %if.end.781

if.then.777:                                      ; preds = %land.lhs.true.771
  %445 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  %446 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld778 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %446, i32 0, i32 1
  %arrayidx779 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld778, i32 0, i64 7
  %rtx780 = bitcast %union.rtunion_def* %arrayidx779 to %struct.rtx_def**
  store %struct.rtx_def* %445, %struct.rtx_def** %rtx780, align 8
  br label %if.end.781

if.end.781:                                       ; preds = %if.then.777, %land.lhs.true.771, %for.body.765
  br label %for.inc.782

for.inc.782:                                      ; preds = %if.end.781
  %447 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld783 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %447, i32 0, i32 1
  %arrayidx784 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld783, i32 0, i64 2
  %rtx785 = bitcast %union.rtunion_def* %arrayidx784 to %struct.rtx_def**
  %448 = load %struct.rtx_def*, %struct.rtx_def** %rtx785, align 8
  store %struct.rtx_def* %448, %struct.rtx_def** %p, align 8
  br label %for.cond.761

for.end.786:                                      ; preds = %for.cond.761
  br label %if.end.787

if.end.787:                                       ; preds = %for.end.786, %land.lhs.true.756, %for.end.753
  call void @cselib_finish()
  br label %return

return:                                           ; preds = %if.end.787, %if.then.116, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @strength_reduce(%struct.loop* %loop, i32 %flags) #0 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %flags.addr = alloca i32, align 4
  %loop_info = alloca %struct.loop_info*, align 8
  %regs = alloca %struct.loop_regs*, align 8
  %ivs = alloca %struct.loop_ivs*, align 8
  %p = alloca %struct.rtx_def*, align 8
  %bl = alloca %struct.iv_class*, align 8
  %threshold = alloca i32, align 4
  %reg_map = alloca %struct.rtx_def**, align 8
  %reg_map_size = alloca i32, align 4
  %unrolled_insn_copies = alloca i32, align 4
  %test_reg = alloca %struct.rtx_def*, align 8
  %insn_count = alloca i32, align 4
  %v = alloca %struct.induction*, align 8
  %benefit = alloca i32, align 4
  %tv = alloca %struct.induction*, align 8
  %n = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %aux = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 22
  %1 = load i8*, i8** %aux, align 8
  %2 = bitcast i8* %1 to %struct.loop_info*
  store %struct.loop_info* %2, %struct.loop_info** %loop_info, align 8
  %3 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %aux1 = getelementptr inbounds %struct.loop, %struct.loop* %3, i32 0, i32 22
  %4 = load i8*, i8** %aux1, align 8
  %5 = bitcast i8* %4 to %struct.loop_info*
  %regs2 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %5, i32 0, i32 28
  store %struct.loop_regs* %regs2, %struct.loop_regs** %regs, align 8
  %6 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %aux3 = getelementptr inbounds %struct.loop, %struct.loop* %6, i32 0, i32 22
  %7 = load i8*, i8** %aux3, align 8
  %8 = bitcast i8* %7 to %struct.loop_info*
  %ivs4 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %8, i32 0, i32 29
  store %struct.loop_ivs* %ivs4, %struct.loop_ivs** %ivs, align 8
  %9 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %has_call = getelementptr inbounds %struct.loop_info, %struct.loop_info* %9, i32 0, i32 0
  %10 = load i32, i32* %has_call, align 4
  %tobool = icmp ne i32 %10, 0
  %cond = select i1 %tobool, i32 1, i32 2
  %11 = load i32, i32* @n_non_fixed_regs, align 4
  %add = add nsw i32 3, %11
  %mul = mul nsw i32 %cond, %add
  store i32 %mul, i32* %threshold, align 4
  store %struct.rtx_def** null, %struct.rtx_def*** %reg_map, align 8
  store i32 0, i32* %unrolled_insn_copies, align 4
  %12 = load i32, i32* @word_mode, align 4
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 %12, i32 58)
  store %struct.rtx_def* %call, %struct.rtx_def** %test_reg, align 8
  %13 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %call5 = call i32 @count_insns_in_loop(%struct.loop* %13)
  store i32 %call5, i32* %insn_count, align 4
  %14 = load i32, i32* @target_flags, align 4
  %and = and i32 %14, 33554432
  %tobool6 = icmp ne i32 %and, 0
  %cond7 = select i1 %tobool6, i32 5, i32 4
  %call8 = call %struct.rtx_def* @gen_reg_rtx(i32 %cond7)
  store %struct.rtx_def* %call8, %struct.rtx_def** @addr_placeholder, align 8
  %15 = load i32, i32* @max_reg_before_loop, align 4
  %16 = load %struct.loop_ivs*, %struct.loop_ivs** %ivs, align 8
  %n_regs = getelementptr inbounds %struct.loop_ivs, %struct.loop_ivs* %16, i32 0, i32 1
  store i32 %15, i32* %n_regs, align 4
  %17 = load %struct.loop_ivs*, %struct.loop_ivs** %ivs, align 8
  %n_regs9 = getelementptr inbounds %struct.loop_ivs, %struct.loop_ivs* %17, i32 0, i32 1
  %18 = load i32, i32* %n_regs9, align 4
  %conv = zext i32 %18 to i64
  %call10 = call noalias i8* @xcalloc(i64 %conv, i64 16)
  %19 = bitcast i8* %call10 to %struct.iv*
  %20 = load %struct.loop_ivs*, %struct.loop_ivs** %ivs, align 8
  %regs11 = getelementptr inbounds %struct.loop_ivs, %struct.loop_ivs* %20, i32 0, i32 0
  store %struct.iv* %19, %struct.iv** %regs11, align 8
  %21 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  call void @loop_bivs_find(%struct.loop* %21)
  %22 = load %struct.loop_ivs*, %struct.loop_ivs** %ivs, align 8
  %list = getelementptr inbounds %struct.loop_ivs, %struct.loop_ivs* %22, i32 0, i32 2
  %23 = load %struct.iv_class*, %struct.iv_class** %list, align 8
  %tobool12 = icmp ne %struct.iv_class* %23, null
  br i1 %tobool12, label %if.end.16, label %if.then

if.then:                                          ; preds = %entry
  %24 = load i32, i32* %flags.addr, align 4
  %and13 = and i32 %24, 1
  %tobool14 = icmp ne i32 %and13, 0
  br i1 %tobool14, label %if.then.15, label %if.end

if.then.15:                                       ; preds = %if.then
  %25 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %26 = load i32, i32* %insn_count, align 4
  call void @unroll_loop(%struct.loop* %25, i32 %26, i32 0)
  br label %if.end

if.end:                                           ; preds = %if.then.15, %if.then
  %27 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  call void @loop_ivs_free(%struct.loop* %27)
  br label %if.end.275

if.end.16:                                        ; preds = %entry
  %28 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  call void @loop_bivs_init_find(%struct.loop* %28)
  %29 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  call void @loop_bivs_check(%struct.loop* %29)
  %30 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  call void @loop_givs_find(%struct.loop* %30)
  %31 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %call17 = call i64 @loop_iterations(%struct.loop* %31)
  %32 = load i32, i32* %flags.addr, align 4
  %and18 = and i32 %32, 4
  %tobool19 = icmp ne i32 %and18, 0
  br i1 %tobool19, label %if.then.20, label %if.end.21

if.then.20:                                       ; preds = %if.end.16
  %33 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  call void @emit_prefetch_instructions(%struct.loop* %33)
  br label %if.end.21

if.end.21:                                        ; preds = %if.then.20, %if.end.16
  %34 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  call void @loop_givs_check(%struct.loop* %34)
  %35 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %36 = load i32, i32* %insn_count, align 4
  %call22 = call i32 @check_dbra_loop(%struct.loop* %35, i32 %36)
  %37 = load %struct.loop_ivs*, %struct.loop_ivs** %ivs, align 8
  %n_regs23 = getelementptr inbounds %struct.loop_ivs, %struct.loop_ivs* %37, i32 0, i32 1
  %38 = load i32, i32* %n_regs23, align 4
  store i32 %38, i32* %reg_map_size, align 4
  %39 = load i32, i32* %reg_map_size, align 4
  %conv24 = sext i32 %39 to i64
  %call25 = call noalias i8* @xcalloc(i64 %conv24, i64 8)
  %40 = bitcast i8* %call25 to %struct.rtx_def**
  store %struct.rtx_def** %40, %struct.rtx_def*** %reg_map, align 8
  %41 = load %struct.loop_ivs*, %struct.loop_ivs** %ivs, align 8
  %list26 = getelementptr inbounds %struct.loop_ivs, %struct.loop_ivs* %41, i32 0, i32 2
  %42 = load %struct.iv_class*, %struct.iv_class** %list26, align 8
  store %struct.iv_class* %42, %struct.iv_class** %bl, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc.172, %if.end.21
  %43 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %tobool27 = icmp ne %struct.iv_class* %43, null
  br i1 %tobool27, label %for.body, label %for.end.173

for.body:                                         ; preds = %for.cond
  %44 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %45 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %46 = load i32, i32* %threshold, align 4
  %47 = load i32, i32* %insn_count, align 4
  %call28 = call i32 @loop_biv_eliminable_p(%struct.loop* %44, %struct.iv_class* %45, i32 %46, i32 %47)
  %48 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %eliminable = getelementptr inbounds %struct.iv_class, %struct.iv_class* %48, i32 0, i32 12
  %49 = trunc i32 %call28 to i8
  %bf.load = load i8, i8* %eliminable, align 8
  %bf.value = and i8 %49, 1
  %bf.shl = shl i8 %bf.value, 1
  %bf.clear = and i8 %bf.load, -3
  %bf.set = or i8 %bf.clear, %bf.shl
  store i8 %bf.set, i8* %eliminable, align 8
  %bf.result.cast = zext i8 %bf.value to i32
  %50 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %all_reduced = getelementptr inbounds %struct.iv_class, %struct.iv_class* %50, i32 0, i32 12
  %bf.load29 = load i8, i8* %all_reduced, align 8
  %bf.clear30 = and i8 %bf.load29, -17
  %bf.set31 = or i8 %bf.clear30, 16
  store i8 %bf.set31, i8* %all_reduced, align 8
  %51 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %52 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  call void @check_ext_dependent_givs(%struct.iv_class* %51, %struct.loop_info* %52)
  %53 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %54 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  call void @combine_givs(%struct.loop_regs* %53, %struct.iv_class* %54)
  %55 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %giv = getelementptr inbounds %struct.iv_class, %struct.iv_class* %55, i32 0, i32 4
  %56 = load %struct.induction*, %struct.induction** %giv, align 8
  store %struct.induction* %56, %struct.induction** %v, align 8
  br label %for.cond.32

for.cond.32:                                      ; preds = %for.inc.94, %for.body
  %57 = load %struct.induction*, %struct.induction** %v, align 8
  %tobool33 = icmp ne %struct.induction* %57, null
  br i1 %tobool33, label %for.body.34, label %for.end.96

for.body.34:                                      ; preds = %for.cond.32
  %58 = load %struct.induction*, %struct.induction** %v, align 8
  %ignore = getelementptr inbounds %struct.induction, %struct.induction* %58, i32 0, i32 13
  %bf.load35 = load i16, i16* %ignore, align 4
  %bf.lshr = lshr i16 %bf.load35, 2
  %bf.clear36 = and i16 %bf.lshr, 1
  %bf.cast = zext i16 %bf.clear36 to i32
  %tobool37 = icmp ne i32 %bf.cast, 0
  br i1 %tobool37, label %if.then.39, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body.34
  %59 = load %struct.induction*, %struct.induction** %v, align 8
  %same = getelementptr inbounds %struct.induction, %struct.induction* %59, i32 0, i32 18
  %60 = load %struct.induction*, %struct.induction** %same, align 8
  %tobool38 = icmp ne %struct.induction* %60, null
  br i1 %tobool38, label %if.then.39, label %if.end.40

if.then.39:                                       ; preds = %lor.lhs.false, %for.body.34
  br label %for.inc.94

if.end.40:                                        ; preds = %lor.lhs.false
  %61 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %62 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %63 = load %struct.induction*, %struct.induction** %v, align 8
  %64 = load %struct.rtx_def*, %struct.rtx_def** %test_reg, align 8
  %call41 = call i32 @loop_giv_reduce_benefit(%struct.loop* %61, %struct.iv_class* %62, %struct.induction* %63, %struct.rtx_def* %64)
  store i32 %call41, i32* %benefit, align 4
  %65 = load i32, i32* @flag_reduce_all_givs, align 4
  %tobool42 = icmp ne i32 %65, 0
  br i1 %tobool42, label %if.else, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end.40
  %66 = load %struct.induction*, %struct.induction** %v, align 8
  %lifetime = getelementptr inbounds %struct.induction, %struct.induction* %66, i32 0, i32 14
  %67 = load i32, i32* %lifetime, align 4
  %68 = load i32, i32* %threshold, align 4
  %mul43 = mul nsw i32 %67, %68
  %69 = load i32, i32* %benefit, align 4
  %mul44 = mul nsw i32 %mul43, %69
  %70 = load i32, i32* %insn_count, align 4
  %cmp = icmp slt i32 %mul44, %70
  br i1 %cmp, label %land.lhs.true.46, label %if.else

land.lhs.true.46:                                 ; preds = %land.lhs.true
  %71 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %reversed = getelementptr inbounds %struct.iv_class, %struct.iv_class* %71, i32 0, i32 12
  %bf.load47 = load i8, i8* %reversed, align 8
  %bf.lshr48 = lshr i8 %bf.load47, 3
  %bf.clear49 = and i8 %bf.lshr48, 1
  %bf.cast50 = zext i8 %bf.clear49 to i32
  %tobool51 = icmp ne i32 %bf.cast50, 0
  br i1 %tobool51, label %if.else, label %if.then.52

if.then.52:                                       ; preds = %land.lhs.true.46
  %72 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %tobool53 = icmp ne %struct._IO_FILE* %72, null
  br i1 %tobool53, label %if.then.54, label %if.end.59

if.then.54:                                       ; preds = %if.then.52
  %73 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %74 = load %struct.induction*, %struct.induction** %v, align 8
  %insn = getelementptr inbounds %struct.induction, %struct.induction* %74, i32 0, i32 0
  %75 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %75, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtint = bitcast %union.rtunion_def* %arrayidx to i32*
  %76 = load i32, i32* %rtint, align 4
  %77 = load %struct.induction*, %struct.induction** %v, align 8
  %lifetime55 = getelementptr inbounds %struct.induction, %struct.induction* %77, i32 0, i32 14
  %78 = load i32, i32* %lifetime55, align 4
  %79 = load i32, i32* %threshold, align 4
  %mul56 = mul nsw i32 %78, %79
  %80 = load i32, i32* %benefit, align 4
  %mul57 = mul nsw i32 %mul56, %80
  %81 = load i32, i32* %insn_count, align 4
  %call58 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %73, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.26, i32 0, i32 0), i32 %76, i32 %mul57, i32 %81)
  br label %if.end.59

if.end.59:                                        ; preds = %if.then.54, %if.then.52
  %82 = load %struct.induction*, %struct.induction** %v, align 8
  %ignore60 = getelementptr inbounds %struct.induction, %struct.induction* %82, i32 0, i32 13
  %bf.load61 = load i16, i16* %ignore60, align 4
  %bf.clear62 = and i16 %bf.load61, -5
  %bf.set63 = or i16 %bf.clear62, 4
  store i16 %bf.set63, i16* %ignore60, align 4
  %83 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %all_reduced64 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %83, i32 0, i32 12
  %bf.load65 = load i8, i8* %all_reduced64, align 8
  %bf.clear66 = and i8 %bf.load65, -17
  store i8 %bf.clear66, i8* %all_reduced64, align 8
  br label %if.end.93

if.else:                                          ; preds = %land.lhs.true.46, %land.lhs.true, %if.end.40
  %84 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %biv = getelementptr inbounds %struct.iv_class, %struct.iv_class* %84, i32 0, i32 2
  %85 = load %struct.induction*, %struct.induction** %biv, align 8
  store %struct.induction* %85, %struct.induction** %tv, align 8
  br label %for.cond.67

for.cond.67:                                      ; preds = %for.inc, %if.else
  %86 = load %struct.induction*, %struct.induction** %tv, align 8
  %tobool68 = icmp ne %struct.induction* %86, null
  br i1 %tobool68, label %for.body.69, label %for.end

for.body.69:                                      ; preds = %for.cond.67
  %87 = load %struct.induction*, %struct.induction** %tv, align 8
  %mult_val = getelementptr inbounds %struct.induction, %struct.induction* %87, i32 0, i32 8
  %88 = load %struct.rtx_def*, %struct.rtx_def** %mult_val, align 8
  %89 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %cmp70 = icmp eq %struct.rtx_def* %88, %89
  br i1 %cmp70, label %land.lhs.true.72, label %if.end.92

land.lhs.true.72:                                 ; preds = %for.body.69
  %90 = load %struct.induction*, %struct.induction** %tv, align 8
  %add_val = getelementptr inbounds %struct.induction, %struct.induction* %90, i32 0, i32 9
  %91 = load %struct.rtx_def*, %struct.rtx_def** %add_val, align 8
  %92 = load %struct.induction*, %struct.induction** %v, align 8
  %mult_val73 = getelementptr inbounds %struct.induction, %struct.induction* %92, i32 0, i32 8
  %93 = load %struct.rtx_def*, %struct.rtx_def** %mult_val73, align 8
  %call74 = call i32 @product_cheap_p(%struct.rtx_def* %91, %struct.rtx_def* %93)
  %tobool75 = icmp ne i32 %call74, 0
  br i1 %tobool75, label %if.end.92, label %if.then.76

if.then.76:                                       ; preds = %land.lhs.true.72
  %94 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %tobool77 = icmp ne %struct._IO_FILE* %94, null
  br i1 %tobool77, label %if.then.78, label %if.end.84

if.then.78:                                       ; preds = %if.then.76
  %95 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %96 = load %struct.induction*, %struct.induction** %v, align 8
  %insn79 = getelementptr inbounds %struct.induction, %struct.induction* %96, i32 0, i32 0
  %97 = load %struct.rtx_def*, %struct.rtx_def** %insn79, align 8
  %fld80 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %97, i32 0, i32 1
  %arrayidx81 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld80, i32 0, i64 0
  %rtint82 = bitcast %union.rtunion_def* %arrayidx81 to i32*
  %98 = load i32, i32* %rtint82, align 4
  %call83 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %95, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.27, i32 0, i32 0), i32 %98)
  br label %if.end.84

if.end.84:                                        ; preds = %if.then.78, %if.then.76
  %99 = load %struct.induction*, %struct.induction** %v, align 8
  %ignore85 = getelementptr inbounds %struct.induction, %struct.induction* %99, i32 0, i32 13
  %bf.load86 = load i16, i16* %ignore85, align 4
  %bf.clear87 = and i16 %bf.load86, -5
  %bf.set88 = or i16 %bf.clear87, 4
  store i16 %bf.set88, i16* %ignore85, align 4
  %100 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %all_reduced89 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %100, i32 0, i32 12
  %bf.load90 = load i8, i8* %all_reduced89, align 8
  %bf.clear91 = and i8 %bf.load90, -17
  store i8 %bf.clear91, i8* %all_reduced89, align 8
  br label %for.end

if.end.92:                                        ; preds = %land.lhs.true.72, %for.body.69
  br label %for.inc

for.inc:                                          ; preds = %if.end.92
  %101 = load %struct.induction*, %struct.induction** %tv, align 8
  %next_iv = getelementptr inbounds %struct.induction, %struct.induction* %101, i32 0, i32 17
  %102 = load %struct.induction*, %struct.induction** %next_iv, align 8
  store %struct.induction* %102, %struct.induction** %tv, align 8
  br label %for.cond.67

for.end:                                          ; preds = %if.end.84, %for.cond.67
  br label %if.end.93

if.end.93:                                        ; preds = %for.end, %if.end.59
  br label %for.inc.94

for.inc.94:                                       ; preds = %if.end.93, %if.then.39
  %103 = load %struct.induction*, %struct.induction** %v, align 8
  %next_iv95 = getelementptr inbounds %struct.induction, %struct.induction* %103, i32 0, i32 17
  %104 = load %struct.induction*, %struct.induction** %next_iv95, align 8
  store %struct.induction* %104, %struct.induction** %v, align 8
  br label %for.cond.32

for.end.96:                                       ; preds = %for.cond.32
  %105 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %106 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  call void @loop_givs_dead_check(%struct.loop* %105, %struct.iv_class* %106)
  %107 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %108 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  call void @loop_givs_reduce(%struct.loop* %107, %struct.iv_class* %108)
  %109 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %110 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %111 = load %struct.rtx_def**, %struct.rtx_def*** %reg_map, align 8
  call void @loop_givs_rescan(%struct.loop* %109, %struct.iv_class* %110, %struct.rtx_def** %111)
  %112 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %giv97 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %112, i32 0, i32 4
  %113 = load %struct.induction*, %struct.induction** %giv97, align 8
  store %struct.induction* %113, %struct.induction** %v, align 8
  br label %for.cond.98

for.cond.98:                                      ; preds = %for.inc.115, %for.end.96
  %114 = load %struct.induction*, %struct.induction** %v, align 8
  %tobool99 = icmp ne %struct.induction* %114, null
  br i1 %tobool99, label %for.body.100, label %for.end.117

for.body.100:                                     ; preds = %for.cond.98
  %115 = load %struct.induction*, %struct.induction** %v, align 8
  %maybe_dead = getelementptr inbounds %struct.induction, %struct.induction* %115, i32 0, i32 13
  %bf.load101 = load i16, i16* %maybe_dead, align 4
  %bf.lshr102 = lshr i16 %bf.load101, 7
  %bf.clear103 = and i16 %bf.lshr102, 1
  %bf.cast104 = zext i16 %bf.clear103 to i32
  %tobool105 = icmp ne i32 %bf.cast104, 0
  br i1 %tobool105, label %if.end.114, label %land.lhs.true.106

land.lhs.true.106:                                ; preds = %for.body.100
  %116 = load %struct.induction*, %struct.induction** %v, align 8
  %same107 = getelementptr inbounds %struct.induction, %struct.induction* %116, i32 0, i32 18
  %117 = load %struct.induction*, %struct.induction** %same107, align 8
  %tobool108 = icmp ne %struct.induction* %117, null
  br i1 %tobool108, label %if.then.109, label %if.end.114

if.then.109:                                      ; preds = %land.lhs.true.106
  %118 = load %struct.induction*, %struct.induction** %v, align 8
  %same110 = getelementptr inbounds %struct.induction, %struct.induction* %118, i32 0, i32 18
  %119 = load %struct.induction*, %struct.induction** %same110, align 8
  %maybe_dead111 = getelementptr inbounds %struct.induction, %struct.induction* %119, i32 0, i32 13
  %bf.load112 = load i16, i16* %maybe_dead111, align 4
  %bf.clear113 = and i16 %bf.load112, -129
  store i16 %bf.clear113, i16* %maybe_dead111, align 4
  br label %if.end.114

if.end.114:                                       ; preds = %if.then.109, %land.lhs.true.106, %for.body.100
  br label %for.inc.115

for.inc.115:                                      ; preds = %if.end.114
  %120 = load %struct.induction*, %struct.induction** %v, align 8
  %next_iv116 = getelementptr inbounds %struct.induction, %struct.induction* %120, i32 0, i32 17
  %121 = load %struct.induction*, %struct.induction** %next_iv116, align 8
  store %struct.induction* %121, %struct.induction** %v, align 8
  br label %for.cond.98

for.end.117:                                      ; preds = %for.cond.98
  %122 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %all_reduced118 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %122, i32 0, i32 12
  %bf.load119 = load i8, i8* %all_reduced118, align 8
  %bf.lshr120 = lshr i8 %bf.load119, 4
  %bf.clear121 = and i8 %bf.lshr120, 1
  %bf.cast122 = zext i8 %bf.clear121 to i32
  %cmp123 = icmp eq i32 %bf.cast122, 1
  br i1 %cmp123, label %land.lhs.true.125, label %if.else.154

land.lhs.true.125:                                ; preds = %for.end.117
  %123 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %eliminable126 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %123, i32 0, i32 12
  %bf.load127 = load i8, i8* %eliminable126, align 8
  %bf.lshr128 = lshr i8 %bf.load127, 1
  %bf.clear129 = and i8 %bf.lshr128, 1
  %bf.cast130 = zext i8 %bf.clear129 to i32
  %tobool131 = icmp ne i32 %bf.cast130, 0
  br i1 %tobool131, label %land.lhs.true.132, label %if.else.154

land.lhs.true.132:                                ; preds = %land.lhs.true.125
  %124 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %125 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %126 = load i32, i32* %threshold, align 4
  %127 = load i32, i32* %insn_count, align 4
  %call133 = call i32 @maybe_eliminate_biv(%struct.loop* %124, %struct.iv_class* %125, i32 1, i32 %126, i32 %127)
  %tobool134 = icmp ne i32 %call133, 0
  br i1 %tobool134, label %if.then.135, label %if.else.154

if.then.135:                                      ; preds = %land.lhs.true.132
  %128 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %final_value = getelementptr inbounds %struct.iv_class, %struct.iv_class* %128, i32 0, i32 8
  %129 = load %struct.rtx_def*, %struct.rtx_def** %final_value, align 8
  %tobool136 = icmp ne %struct.rtx_def* %129, null
  br i1 %tobool136, label %land.lhs.true.137, label %if.end.149

land.lhs.true.137:                                ; preds = %if.then.135
  %130 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %reversed138 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %130, i32 0, i32 12
  %bf.load139 = load i8, i8* %reversed138, align 8
  %bf.lshr140 = lshr i8 %bf.load139, 3
  %bf.clear141 = and i8 %bf.lshr140, 1
  %bf.cast142 = zext i8 %bf.clear141 to i32
  %tobool143 = icmp ne i32 %bf.cast142, 0
  br i1 %tobool143, label %if.end.149, label %if.then.144

if.then.144:                                      ; preds = %land.lhs.true.137
  %131 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %132 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %biv145 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %132, i32 0, i32 2
  %133 = load %struct.induction*, %struct.induction** %biv145, align 8
  %dest_reg = getelementptr inbounds %struct.induction, %struct.induction* %133, i32 0, i32 4
  %134 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg, align 8
  %135 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %final_value146 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %135, i32 0, i32 8
  %136 = load %struct.rtx_def*, %struct.rtx_def** %final_value146, align 8
  %call147 = call %struct.rtx_def* @gen_move_insn(%struct.rtx_def* %134, %struct.rtx_def* %136)
  %call148 = call %struct.rtx_def* @loop_insn_sink_or_swim(%struct.loop* %131, %struct.rtx_def* %call147)
  br label %if.end.149

if.end.149:                                       ; preds = %if.then.144, %land.lhs.true.137, %if.then.135
  %137 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %tobool150 = icmp ne %struct._IO_FILE* %137, null
  br i1 %tobool150, label %if.then.151, label %if.end.153

if.then.151:                                      ; preds = %if.end.149
  %138 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %139 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %regno = getelementptr inbounds %struct.iv_class, %struct.iv_class* %139, i32 0, i32 0
  %140 = load i32, i32* %regno, align 4
  %call152 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %138, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.28, i32 0, i32 0), i32 %140)
  br label %if.end.153

if.end.153:                                       ; preds = %if.then.151, %if.end.149
  br label %if.end.171

if.else.154:                                      ; preds = %land.lhs.true.132, %land.lhs.true.125, %for.end.117
  %141 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %final_value155 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %141, i32 0, i32 8
  %142 = load %struct.rtx_def*, %struct.rtx_def** %final_value155, align 8
  %tobool156 = icmp ne %struct.rtx_def* %142, null
  br i1 %tobool156, label %land.lhs.true.157, label %if.end.170

land.lhs.true.157:                                ; preds = %if.else.154
  %143 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %reversed158 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %143, i32 0, i32 12
  %bf.load159 = load i8, i8* %reversed158, align 8
  %bf.lshr160 = lshr i8 %bf.load159, 3
  %bf.clear161 = and i8 %bf.lshr160, 1
  %bf.cast162 = zext i8 %bf.clear161 to i32
  %tobool163 = icmp ne i32 %bf.cast162, 0
  br i1 %tobool163, label %if.end.170, label %if.then.164

if.then.164:                                      ; preds = %land.lhs.true.157
  %144 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %145 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %biv165 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %145, i32 0, i32 2
  %146 = load %struct.induction*, %struct.induction** %biv165, align 8
  %dest_reg166 = getelementptr inbounds %struct.induction, %struct.induction* %146, i32 0, i32 4
  %147 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg166, align 8
  %148 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %final_value167 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %148, i32 0, i32 8
  %149 = load %struct.rtx_def*, %struct.rtx_def** %final_value167, align 8
  %call168 = call %struct.rtx_def* @gen_move_insn(%struct.rtx_def* %147, %struct.rtx_def* %149)
  %call169 = call %struct.rtx_def* @loop_insn_sink(%struct.loop* %144, %struct.rtx_def* %call168)
  br label %if.end.170

if.end.170:                                       ; preds = %if.then.164, %land.lhs.true.157, %if.else.154
  br label %if.end.171

if.end.171:                                       ; preds = %if.end.170, %if.end.153
  br label %for.inc.172

for.inc.172:                                      ; preds = %if.end.171
  %150 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %next = getelementptr inbounds %struct.iv_class, %struct.iv_class* %150, i32 0, i32 9
  %151 = load %struct.iv_class*, %struct.iv_class** %next, align 8
  store %struct.iv_class* %151, %struct.iv_class** %bl, align 8
  br label %for.cond

for.end.173:                                      ; preds = %for.cond
  %152 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %start = getelementptr inbounds %struct.loop, %struct.loop* %152, i32 0, i32 26
  %153 = load %struct.rtx_def*, %struct.rtx_def** %start, align 8
  store %struct.rtx_def* %153, %struct.rtx_def** %p, align 8
  br label %for.cond.174

for.cond.174:                                     ; preds = %for.inc.204, %for.end.173
  %154 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %155 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %end = getelementptr inbounds %struct.loop, %struct.loop* %155, i32 0, i32 27
  %156 = load %struct.rtx_def*, %struct.rtx_def** %end, align 8
  %cmp175 = icmp ne %struct.rtx_def* %154, %156
  br i1 %cmp175, label %for.body.177, label %for.end.208

for.body.177:                                     ; preds = %for.cond.174
  %157 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %158 = bitcast %struct.rtx_def* %157 to i32*
  %bf.load178 = load i32, i32* %158, align 8
  %bf.clear179 = and i32 %bf.load178, 65535
  %cmp180 = icmp eq i32 %bf.clear179, 32
  br i1 %cmp180, label %if.then.192, label %lor.lhs.false.182

lor.lhs.false.182:                                ; preds = %for.body.177
  %159 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %160 = bitcast %struct.rtx_def* %159 to i32*
  %bf.load183 = load i32, i32* %160, align 8
  %bf.clear184 = and i32 %bf.load183, 65535
  %cmp185 = icmp eq i32 %bf.clear184, 33
  br i1 %cmp185, label %if.then.192, label %lor.lhs.false.187

lor.lhs.false.187:                                ; preds = %lor.lhs.false.182
  %161 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %162 = bitcast %struct.rtx_def* %161 to i32*
  %bf.load188 = load i32, i32* %162, align 8
  %bf.clear189 = and i32 %bf.load188, 65535
  %cmp190 = icmp eq i32 %bf.clear189, 34
  br i1 %cmp190, label %if.then.192, label %if.end.203

if.then.192:                                      ; preds = %lor.lhs.false.187, %lor.lhs.false.182, %for.body.177
  %163 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld193 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %163, i32 0, i32 1
  %arrayidx194 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld193, i32 0, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx194 to %struct.rtx_def**
  %164 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %165 = load %struct.rtx_def**, %struct.rtx_def*** %reg_map, align 8
  %166 = load i32, i32* %reg_map_size, align 4
  %call195 = call %struct.rtx_def* @replace_regs(%struct.rtx_def* %164, %struct.rtx_def** %165, i32 %166, i32 0)
  %167 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld196 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %167, i32 0, i32 1
  %arrayidx197 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld196, i32 0, i64 6
  %rtx198 = bitcast %union.rtunion_def* %arrayidx197 to %struct.rtx_def**
  %168 = load %struct.rtx_def*, %struct.rtx_def** %rtx198, align 8
  %169 = load %struct.rtx_def**, %struct.rtx_def*** %reg_map, align 8
  %170 = load i32, i32* %reg_map_size, align 4
  %call199 = call %struct.rtx_def* @replace_regs(%struct.rtx_def* %168, %struct.rtx_def** %169, i32 %170, i32 0)
  %171 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld200 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %171, i32 0, i32 1
  %arrayidx201 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld200, i32 0, i64 4
  %rtint202 = bitcast %union.rtunion_def* %arrayidx201 to i32*
  store i32 -1, i32* %rtint202, align 4
  br label %if.end.203

if.end.203:                                       ; preds = %if.then.192, %lor.lhs.false.187
  br label %for.inc.204

for.inc.204:                                      ; preds = %if.end.203
  %172 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld205 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %172, i32 0, i32 1
  %arrayidx206 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld205, i32 0, i64 2
  %rtx207 = bitcast %union.rtunion_def* %arrayidx206 to %struct.rtx_def**
  %173 = load %struct.rtx_def*, %struct.rtx_def** %rtx207, align 8
  store %struct.rtx_def* %173, %struct.rtx_def** %p, align 8
  br label %for.cond.174

for.end.208:                                      ; preds = %for.cond.174
  %174 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %n_iterations = getelementptr inbounds %struct.loop_info, %struct.loop_info* %174, i32 0, i32 15
  %175 = load i64, i64* %n_iterations, align 8
  %cmp209 = icmp ugt i64 %175, 0
  br i1 %cmp209, label %if.then.211, label %if.end.221

if.then.211:                                      ; preds = %for.end.208
  %176 = load i32, i32* %insn_count, align 4
  %sub = sub nsw i32 %176, 2
  store i32 %sub, i32* %unrolled_insn_copies, align 4
  %177 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %n_iterations212 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %177, i32 0, i32 15
  %178 = load i64, i64* %n_iterations212, align 8
  %179 = load i32, i32* %unrolled_insn_copies, align 4
  %conv213 = sext i32 %179 to i64
  %mul214 = mul i64 %conv213, %178
  %conv215 = trunc i64 %mul214 to i32
  store i32 %conv215, i32* %unrolled_insn_copies, align 4
  %180 = load i32, i32* %unrolled_insn_copies, align 4
  %sub216 = sub nsw i32 %180, 1
  store i32 %sub216, i32* %unrolled_insn_copies, align 4
  %181 = load i32, i32* %unrolled_insn_copies, align 4
  %cmp217 = icmp slt i32 %181, 0
  br i1 %cmp217, label %if.then.219, label %if.end.220

if.then.219:                                      ; preds = %if.then.211
  store i32 0, i32* %unrolled_insn_copies, align 4
  br label %if.end.220

if.end.220:                                       ; preds = %if.then.219, %if.then.211
  br label %if.end.221

if.end.221:                                       ; preds = %if.end.220, %for.end.208
  %182 = load i32, i32* %flags.addr, align 4
  %and222 = and i32 %182, 1
  %tobool223 = icmp ne i32 %and222, 0
  br i1 %tobool223, label %if.then.234, label %lor.lhs.false.224

lor.lhs.false.224:                                ; preds = %if.end.221
  %183 = load i32, i32* %flags.addr, align 4
  %and225 = and i32 %183, 8
  %tobool226 = icmp ne i32 %and225, 0
  br i1 %tobool226, label %if.end.235, label %land.lhs.true.227

land.lhs.true.227:                                ; preds = %lor.lhs.false.224
  %184 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %n_iterations228 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %184, i32 0, i32 15
  %185 = load i64, i64* %n_iterations228, align 8
  %cmp229 = icmp ugt i64 %185, 0
  br i1 %cmp229, label %land.lhs.true.231, label %if.end.235

land.lhs.true.231:                                ; preds = %land.lhs.true.227
  %186 = load i32, i32* %unrolled_insn_copies, align 4
  %187 = load i32, i32* %insn_count, align 4
  %cmp232 = icmp sle i32 %186, %187
  br i1 %cmp232, label %if.then.234, label %if.end.235

if.then.234:                                      ; preds = %land.lhs.true.231, %if.end.221
  %188 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %189 = load i32, i32* %insn_count, align 4
  call void @unroll_loop(%struct.loop* %188, i32 %189, i32 1)
  br label %if.end.235

if.end.235:                                       ; preds = %if.then.234, %land.lhs.true.231, %land.lhs.true.227, %lor.lhs.false.224
  %190 = load i32, i32* @target_flags, align 4
  %and236 = and i32 %190, 33554432
  %tobool237 = icmp ne i32 %and236, 0
  br i1 %tobool237, label %if.end.248, label %land.lhs.true.238

land.lhs.true.238:                                ; preds = %if.end.235
  %191 = load i32, i32* @x86_use_loop, align 4
  %192 = load i32, i32* @ix86_cpu, align 4
  %shl = shl i32 1, %192
  %and239 = and i32 %191, %shl
  %tobool240 = icmp ne i32 %and239, 0
  br i1 %tobool240, label %land.lhs.true.241, label %if.end.248

land.lhs.true.241:                                ; preds = %land.lhs.true.238
  %193 = load i32, i32* %flags.addr, align 4
  %and242 = and i32 %193, 2
  %tobool243 = icmp ne i32 %and242, 0
  br i1 %tobool243, label %land.lhs.true.244, label %if.end.248

land.lhs.true.244:                                ; preds = %land.lhs.true.241
  %194 = load i32, i32* @flag_branch_on_count_reg, align 4
  %tobool245 = icmp ne i32 %194, 0
  br i1 %tobool245, label %if.then.246, label %if.end.248

if.then.246:                                      ; preds = %land.lhs.true.244
  %195 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %call247 = call i32 @doloop_optimize(%struct.loop* %195)
  br label %if.end.248

if.end.248:                                       ; preds = %if.then.246, %land.lhs.true.244, %land.lhs.true.241, %land.lhs.true.238, %if.end.235
  %196 = load i32, i32* %flags.addr, align 4
  %and249 = and i32 %196, 2
  %tobool250 = icmp ne i32 %and249, 0
  br i1 %tobool250, label %land.lhs.true.251, label %if.end.268

land.lhs.true.251:                                ; preds = %if.end.248
  %197 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %n_iterations252 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %197, i32 0, i32 15
  %198 = load i64, i64* %n_iterations252, align 8
  %199 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %unroll_number = getelementptr inbounds %struct.loop_info, %struct.loop_info* %199, i32 0, i32 16
  %200 = load i32, i32* %unroll_number, align 4
  %conv253 = zext i32 %200 to i64
  %div = udiv i64 %198, %conv253
  %cmp254 = icmp ugt i64 %div, 1
  br i1 %cmp254, label %if.then.256, label %if.end.268

if.then.256:                                      ; preds = %land.lhs.true.251
  %201 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %n_iterations257 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %201, i32 0, i32 15
  %202 = load i64, i64* %n_iterations257, align 8
  %203 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %unroll_number258 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %203, i32 0, i32 16
  %204 = load i32, i32* %unroll_number258, align 4
  %conv259 = zext i32 %204 to i64
  %div260 = udiv i64 %202, %conv259
  %conv261 = trunc i64 %div260 to i32
  store i32 %conv261, i32* %n, align 4
  %205 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %end262 = getelementptr inbounds %struct.loop, %struct.loop* %205, i32 0, i32 27
  %206 = load %struct.rtx_def*, %struct.rtx_def** %end262, align 8
  %fld263 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %206, i32 0, i32 1
  %arrayidx264 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld263, i32 0, i64 1
  %rtx265 = bitcast %union.rtunion_def* %arrayidx264 to %struct.rtx_def**
  %207 = load %struct.rtx_def*, %struct.rtx_def** %rtx265, align 8
  %208 = load i32, i32* %n, align 4
  %div266 = sdiv i32 10000, %208
  %sub267 = sub nsw i32 10000, %div266
  call void @predict_insn(%struct.rtx_def* %207, i32 5, i32 %sub267)
  br label %if.end.268

if.end.268:                                       ; preds = %if.then.256, %land.lhs.true.251, %if.end.248
  %209 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %tobool269 = icmp ne %struct._IO_FILE* %209, null
  br i1 %tobool269, label %if.then.270, label %if.end.272

if.then.270:                                      ; preds = %if.end.268
  %210 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %call271 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %210, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.18, i32 0, i32 0))
  br label %if.end.272

if.end.272:                                       ; preds = %if.then.270, %if.end.268
  %211 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  call void @loop_ivs_free(%struct.loop* %211)
  %212 = load %struct.rtx_def**, %struct.rtx_def*** %reg_map, align 8
  %tobool273 = icmp ne %struct.rtx_def** %212, null
  br i1 %tobool273, label %if.then.274, label %if.end.275

if.then.274:                                      ; preds = %if.end.272
  %213 = load %struct.rtx_def**, %struct.rtx_def*** %reg_map, align 8
  %214 = bitcast %struct.rtx_def** %213 to i8*
  call void @free(i8* %214) #4
  br label %if.end.275

if.end.275:                                       ; preds = %if.end, %if.then.274, %if.end.272
  ret void
}

declare %struct.rtx_def* @delete_related_insns(%struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define internal void @loop_movables_free(%struct.loop_movables* %movables) #0 {
entry:
  %movables.addr = alloca %struct.loop_movables*, align 8
  %m = alloca %struct.movable*, align 8
  %m_next = alloca %struct.movable*, align 8
  store %struct.loop_movables* %movables, %struct.loop_movables** %movables.addr, align 8
  %0 = load %struct.loop_movables*, %struct.loop_movables** %movables.addr, align 8
  %head = getelementptr inbounds %struct.loop_movables, %struct.loop_movables* %0, i32 0, i32 0
  %1 = load %struct.movable*, %struct.movable** %head, align 8
  store %struct.movable* %1, %struct.movable** %m, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.movable*, %struct.movable** %m, align 8
  %tobool = icmp ne %struct.movable* %2, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.movable*, %struct.movable** %m, align 8
  %next = getelementptr inbounds %struct.movable, %struct.movable* %3, i32 0, i32 12
  %4 = load %struct.movable*, %struct.movable** %next, align 8
  store %struct.movable* %4, %struct.movable** %m_next, align 8
  %5 = load %struct.movable*, %struct.movable** %m, align 8
  %6 = bitcast %struct.movable* %5 to i8*
  call void @free(i8* %6) #4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load %struct.movable*, %struct.movable** %m_next, align 8
  store %struct.movable* %7, %struct.movable** %m, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare i32 @pure_call_p(%struct.rtx_def*) #1

declare zeroext i1 @can_throw_internal(%struct.rtx_def*) #1

declare i32 @volatile_refs_p(%struct.rtx_def*) #1

declare void @note_stores(%struct.rtx_def*, void (%struct.rtx_def*, %struct.rtx_def*, i8*)*, i8*) #1

; Function Attrs: nounwind uwtable
define internal void @note_addr_stored(%struct.rtx_def* %x, %struct.rtx_def* %y, i8* %data) #0 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  %y.addr = alloca %struct.rtx_def*, align 8
  %data.addr = alloca i8*, align 8
  %loop_info = alloca %struct.loop_info*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  store %struct.rtx_def* %y, %struct.rtx_def** %y.addr, align 8
  store i8* %data, i8** %data.addr, align 8
  %0 = load i8*, i8** %data.addr, align 8
  %1 = bitcast i8* %0 to %struct.loop_info*
  store %struct.loop_info* %1, %struct.loop_info** %loop_info, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %cmp = icmp eq %struct.rtx_def* %2, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %4 = bitcast %struct.rtx_def* %3 to i32*
  %bf.load = load i32, i32* %4, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp1 = icmp ne i32 %bf.clear, 66
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %5 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %num_mem_sets = getelementptr inbounds %struct.loop_info, %struct.loop_info* %5, i32 0, i32 25
  %6 = load i32, i32* %num_mem_sets, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %num_mem_sets, align 4
  %7 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %8 = bitcast %struct.rtx_def* %7 to i32*
  %bf.load2 = load i32, i32* %8, align 8
  %bf.lshr = lshr i32 %bf.load2, 16
  %bf.clear3 = and i32 %bf.lshr, 255
  %cmp4 = icmp eq i32 %bf.clear3, 51
  br i1 %cmp4, label %if.then.5, label %if.end.11

if.then.5:                                        ; preds = %if.end
  %9 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %10 = bitcast %struct.rtx_def* %9 to i32*
  %bf.load6 = load i32, i32* %10, align 8
  %bf.lshr7 = lshr i32 %bf.load6, 26
  %bf.clear8 = and i32 %bf.lshr7, 1
  %tobool = icmp ne i32 %bf.clear8, 0
  br i1 %tobool, label %if.then.9, label %if.else

if.then.9:                                        ; preds = %if.then.5
  %11 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %unknown_constant_address_altered = getelementptr inbounds %struct.loop_info, %struct.loop_info* %11, i32 0, i32 24
  store i32 1, i32* %unknown_constant_address_altered, align 4
  br label %if.end.10

if.else:                                          ; preds = %if.then.5
  %12 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %unknown_address_altered = getelementptr inbounds %struct.loop_info, %struct.loop_info* %12, i32 0, i32 23
  store i32 1, i32* %unknown_address_altered, align 4
  br label %if.end.10

if.end.10:                                        ; preds = %if.else, %if.then.9
  br label %return

if.end.11:                                        ; preds = %if.end
  %13 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %14 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %store_mems = getelementptr inbounds %struct.loop_info, %struct.loop_info* %14, i32 0, i32 19
  %15 = load %struct.rtx_def*, %struct.rtx_def** %store_mems, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 0, %struct.rtx_def* %13, %struct.rtx_def* %15)
  %16 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %store_mems12 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %16, i32 0, i32 19
  store %struct.rtx_def* %call, %struct.rtx_def** %store_mems12, align 8
  br label %return

return:                                           ; preds = %if.end.11, %if.end.10, %if.then
  ret void
}

declare i32 @for_each_rtx(%struct.rtx_def**, i32 (%struct.rtx_def**, i8*)*, i8*) #1

; Function Attrs: nounwind uwtable
define internal i32 @insert_loop_mem(%struct.rtx_def** %mem, i8* %data) #0 {
entry:
  %retval = alloca i32, align 4
  %mem.addr = alloca %struct.rtx_def**, align 8
  %data.addr = alloca i8*, align 8
  %loop_info = alloca %struct.loop_info*, align 8
  %i = alloca i32, align 4
  %m = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %mem, %struct.rtx_def*** %mem.addr, align 8
  store i8* %data, i8** %data.addr, align 8
  %0 = load i8*, i8** %data.addr, align 8
  %1 = bitcast i8* %0 to %struct.loop_info*
  store %struct.loop_info* %1, %struct.loop_info** %loop_info, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %mem.addr, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %2, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %m, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %m, align 8
  %cmp = icmp eq %struct.rtx_def* %4, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %5 = load %struct.rtx_def*, %struct.rtx_def** %m, align 8
  %6 = bitcast %struct.rtx_def* %5 to i32*
  %bf.load = load i32, i32* %6, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %sw.default [
    i32 66, label %sw.bb
    i32 49, label %sw.bb.1
    i32 55, label %sw.bb.2
    i32 3, label %sw.bb.3
  ]

sw.bb:                                            ; preds = %if.end
  br label %sw.epilog

sw.bb.1:                                          ; preds = %if.end
  store i32 -1, i32* %retval
  br label %return

sw.bb.2:                                          ; preds = %if.end
  store i32 -1, i32* %retval
  br label %return

sw.bb.3:                                          ; preds = %if.end
  store i32 -1, i32* %retval
  br label %return

sw.default:                                       ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %sw.bb
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %sw.epilog
  %7 = load i32, i32* %i, align 4
  %8 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %mems_idx = getelementptr inbounds %struct.loop_info, %struct.loop_info* %8, i32 0, i32 21
  %9 = load i32, i32* %mems_idx, align 4
  %cmp4 = icmp slt i32 %7, %9
  br i1 %cmp4, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %10 = load %struct.rtx_def*, %struct.rtx_def** %m, align 8
  %11 = load i32, i32* %i, align 4
  %idxprom = sext i32 %11 to i64
  %12 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %mems = getelementptr inbounds %struct.loop_info, %struct.loop_info* %12, i32 0, i32 20
  %13 = load %struct.loop_mem_info*, %struct.loop_mem_info** %mems, align 8
  %arrayidx = getelementptr inbounds %struct.loop_mem_info, %struct.loop_mem_info* %13, i64 %idxprom
  %mem5 = getelementptr inbounds %struct.loop_mem_info, %struct.loop_mem_info* %arrayidx, i32 0, i32 0
  %14 = load %struct.rtx_def*, %struct.rtx_def** %mem5, align 8
  %call = call i32 @rtx_equal_p(%struct.rtx_def* %10, %struct.rtx_def* %14)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then.6, label %if.end.22

if.then.6:                                        ; preds = %for.body
  %15 = load %struct.rtx_def*, %struct.rtx_def** %m, align 8
  %16 = bitcast %struct.rtx_def* %15 to i32*
  %bf.load7 = load i32, i32* %16, align 8
  %bf.lshr = lshr i32 %bf.load7, 16
  %bf.clear8 = and i32 %bf.lshr, 255
  %17 = load i32, i32* %i, align 4
  %idxprom9 = sext i32 %17 to i64
  %18 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %mems10 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %18, i32 0, i32 20
  %19 = load %struct.loop_mem_info*, %struct.loop_mem_info** %mems10, align 8
  %arrayidx11 = getelementptr inbounds %struct.loop_mem_info, %struct.loop_mem_info* %19, i64 %idxprom9
  %mem12 = getelementptr inbounds %struct.loop_mem_info, %struct.loop_mem_info* %arrayidx11, i32 0, i32 0
  %20 = load %struct.rtx_def*, %struct.rtx_def** %mem12, align 8
  %21 = bitcast %struct.rtx_def* %20 to i32*
  %bf.load13 = load i32, i32* %21, align 8
  %bf.lshr14 = lshr i32 %bf.load13, 16
  %bf.clear15 = and i32 %bf.lshr14, 255
  %cmp16 = icmp ne i32 %bf.clear8, %bf.clear15
  br i1 %cmp16, label %if.then.17, label %if.end.21

if.then.17:                                       ; preds = %if.then.6
  %22 = load i32, i32* %i, align 4
  %idxprom18 = sext i32 %22 to i64
  %23 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %mems19 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %23, i32 0, i32 20
  %24 = load %struct.loop_mem_info*, %struct.loop_mem_info** %mems19, align 8
  %arrayidx20 = getelementptr inbounds %struct.loop_mem_info, %struct.loop_mem_info* %24, i64 %idxprom18
  %optimize = getelementptr inbounds %struct.loop_mem_info, %struct.loop_mem_info* %arrayidx20, i32 0, i32 2
  store i32 0, i32* %optimize, align 4
  br label %if.end.21

if.end.21:                                        ; preds = %if.then.17, %if.then.6
  store i32 0, i32* %retval
  br label %return

if.end.22:                                        ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.22
  %25 = load i32, i32* %i, align 4
  %inc = add nsw i32 %25, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %26 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %mems_idx23 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %26, i32 0, i32 21
  %27 = load i32, i32* %mems_idx23, align 4
  %28 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %mems_allocated = getelementptr inbounds %struct.loop_info, %struct.loop_info* %28, i32 0, i32 22
  %29 = load i32, i32* %mems_allocated, align 4
  %cmp24 = icmp eq i32 %27, %29
  br i1 %cmp24, label %if.then.25, label %if.end.37

if.then.25:                                       ; preds = %for.end
  %30 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %mems_allocated26 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %30, i32 0, i32 22
  %31 = load i32, i32* %mems_allocated26, align 4
  %cmp27 = icmp ne i32 %31, 0
  br i1 %cmp27, label %if.then.28, label %if.else

if.then.28:                                       ; preds = %if.then.25
  %32 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %mems_allocated29 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %32, i32 0, i32 22
  %33 = load i32, i32* %mems_allocated29, align 4
  %mul = mul nsw i32 %33, 2
  store i32 %mul, i32* %mems_allocated29, align 4
  br label %if.end.31

if.else:                                          ; preds = %if.then.25
  %34 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %mems_allocated30 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %34, i32 0, i32 22
  store i32 32, i32* %mems_allocated30, align 4
  br label %if.end.31

if.end.31:                                        ; preds = %if.else, %if.then.28
  %35 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %mems32 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %35, i32 0, i32 20
  %36 = load %struct.loop_mem_info*, %struct.loop_mem_info** %mems32, align 8
  %37 = bitcast %struct.loop_mem_info* %36 to i8*
  %38 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %mems_allocated33 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %38, i32 0, i32 22
  %39 = load i32, i32* %mems_allocated33, align 4
  %conv = sext i32 %39 to i64
  %mul34 = mul i64 %conv, 24
  %call35 = call i8* @xrealloc(i8* %37, i64 %mul34)
  %40 = bitcast i8* %call35 to %struct.loop_mem_info*
  %41 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %mems36 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %41, i32 0, i32 20
  store %struct.loop_mem_info* %40, %struct.loop_mem_info** %mems36, align 8
  br label %if.end.37

if.end.37:                                        ; preds = %if.end.31, %for.end
  %42 = load %struct.rtx_def*, %struct.rtx_def** %m, align 8
  %43 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %mems_idx38 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %43, i32 0, i32 21
  %44 = load i32, i32* %mems_idx38, align 4
  %idxprom39 = sext i32 %44 to i64
  %45 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %mems40 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %45, i32 0, i32 20
  %46 = load %struct.loop_mem_info*, %struct.loop_mem_info** %mems40, align 8
  %arrayidx41 = getelementptr inbounds %struct.loop_mem_info, %struct.loop_mem_info* %46, i64 %idxprom39
  %mem42 = getelementptr inbounds %struct.loop_mem_info, %struct.loop_mem_info* %arrayidx41, i32 0, i32 0
  store %struct.rtx_def* %42, %struct.rtx_def** %mem42, align 8
  %47 = load %struct.rtx_def*, %struct.rtx_def** %m, align 8
  %48 = bitcast %struct.rtx_def* %47 to i32*
  %bf.load43 = load i32, i32* %48, align 8
  %bf.lshr44 = lshr i32 %bf.load43, 16
  %bf.clear45 = and i32 %bf.lshr44, 255
  %cmp46 = icmp ne i32 %bf.clear45, 51
  %conv47 = zext i1 %cmp46 to i32
  %49 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %mems_idx48 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %49, i32 0, i32 21
  %50 = load i32, i32* %mems_idx48, align 4
  %idxprom49 = sext i32 %50 to i64
  %51 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %mems50 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %51, i32 0, i32 20
  %52 = load %struct.loop_mem_info*, %struct.loop_mem_info** %mems50, align 8
  %arrayidx51 = getelementptr inbounds %struct.loop_mem_info, %struct.loop_mem_info* %52, i64 %idxprom49
  %optimize52 = getelementptr inbounds %struct.loop_mem_info, %struct.loop_mem_info* %arrayidx51, i32 0, i32 2
  store i32 %conv47, i32* %optimize52, align 4
  %53 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %mems_idx53 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %53, i32 0, i32 21
  %54 = load i32, i32* %mems_idx53, align 4
  %idxprom54 = sext i32 %54 to i64
  %55 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %mems55 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %55, i32 0, i32 20
  %56 = load %struct.loop_mem_info*, %struct.loop_mem_info** %mems55, align 8
  %arrayidx56 = getelementptr inbounds %struct.loop_mem_info, %struct.loop_mem_info* %56, i64 %idxprom54
  %reg = getelementptr inbounds %struct.loop_mem_info, %struct.loop_mem_info* %arrayidx56, i32 0, i32 1
  store %struct.rtx_def* null, %struct.rtx_def** %reg, align 8
  %57 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %mems_idx57 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %57, i32 0, i32 21
  %58 = load i32, i32* %mems_idx57, align 4
  %inc58 = add nsw i32 %58, 1
  store i32 %inc58, i32* %mems_idx57, align 4
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.37, %if.end.21, %sw.default, %sw.bb.3, %sw.bb.2, %sw.bb.1, %if.then
  %59 = load i32, i32* %retval
  ret i32 %59
}

declare %struct.rtx_def* @gen_rtx_MEM(i32, %struct.rtx_def*) #1

declare i8* @xrealloc(i8*, i64) #1

; Function Attrs: nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #4

; Function Attrs: nounwind uwtable
define internal void @find_single_use_in_loop(%struct.loop_regs* %regs, %struct.rtx_def* %insn, %struct.rtx_def* %x) #0 {
entry:
  %regs.addr = alloca %struct.loop_regs*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  %x.addr = alloca %struct.rtx_def*, align 8
  %code = alloca i32, align 4
  %fmt = alloca i8*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.loop_regs* %regs, %struct.loop_regs** %regs.addr, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  store i32 %bf.clear, i32* %code, align 4
  %2 = load i32, i32* %code, align 4
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds [153 x i8*], [153 x i8*]* @rtx_format, i32 0, i64 %idxprom
  %3 = load i8*, i8** %arrayidx, align 8
  store i8* %3, i8** %fmt, align 8
  %4 = load i32, i32* %code, align 4
  %cmp = icmp eq i32 %4, 61
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %5 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1
  %arrayidx1 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx1 to i32*
  %6 = load i32, i32* %rtuint, align 4
  %idxprom2 = zext i32 %6 to i64
  %7 = load %struct.loop_regs*, %struct.loop_regs** %regs.addr, align 8
  %array = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %7, i32 0, i32 2
  %8 = load %struct.loop_reg*, %struct.loop_reg** %array, align 8
  %arrayidx3 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %8, i64 %idxprom2
  %single_usage = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %arrayidx3, i32 0, i32 2
  %9 = load %struct.rtx_def*, %struct.rtx_def** %single_usage, align 8
  %cmp4 = icmp ne %struct.rtx_def* %9, null
  br i1 %cmp4, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %if.then
  %10 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld5 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1
  %arrayidx6 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld5, i32 0, i64 0
  %rtuint7 = bitcast %union.rtunion_def* %arrayidx6 to i32*
  %11 = load i32, i32* %rtuint7, align 4
  %idxprom8 = zext i32 %11 to i64
  %12 = load %struct.loop_regs*, %struct.loop_regs** %regs.addr, align 8
  %array9 = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %12, i32 0, i32 2
  %13 = load %struct.loop_reg*, %struct.loop_reg** %array9, align 8
  %arrayidx10 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %13, i64 %idxprom8
  %single_usage11 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %arrayidx10, i32 0, i32 2
  %14 = load %struct.rtx_def*, %struct.rtx_def** %single_usage11, align 8
  %15 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %cmp12 = icmp ne %struct.rtx_def* %14, %15
  br i1 %cmp12, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %16 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %if.then
  %17 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %16, %cond.true ], [ %17, %cond.false ]
  %18 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld13 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1
  %arrayidx14 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld13, i32 0, i64 0
  %rtuint15 = bitcast %union.rtunion_def* %arrayidx14 to i32*
  %19 = load i32, i32* %rtuint15, align 4
  %idxprom16 = zext i32 %19 to i64
  %20 = load %struct.loop_regs*, %struct.loop_regs** %regs.addr, align 8
  %array17 = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %20, i32 0, i32 2
  %21 = load %struct.loop_reg*, %struct.loop_reg** %array17, align 8
  %arrayidx18 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %21, i64 %idxprom16
  %single_usage19 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %arrayidx18, i32 0, i32 2
  store %struct.rtx_def* %cond, %struct.rtx_def** %single_usage19, align 8
  br label %if.end.83

if.else:                                          ; preds = %entry
  %22 = load i32, i32* %code, align 4
  %cmp20 = icmp eq i32 %22, 47
  br i1 %cmp20, label %if.then.21, label %if.else.34

if.then.21:                                       ; preds = %if.else
  %23 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld22 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1
  %arrayidx23 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld22, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx23 to %struct.rtx_def**
  %24 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %25 = bitcast %struct.rtx_def* %24 to i32*
  %bf.load24 = load i32, i32* %25, align 8
  %bf.clear25 = and i32 %bf.load24, 65535
  %cmp26 = icmp ne i32 %bf.clear25, 61
  br i1 %cmp26, label %if.then.27, label %if.end

if.then.27:                                       ; preds = %if.then.21
  %26 = load %struct.loop_regs*, %struct.loop_regs** %regs.addr, align 8
  %27 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %28 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld28 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1
  %arrayidx29 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld28, i32 0, i64 0
  %rtx30 = bitcast %union.rtunion_def* %arrayidx29 to %struct.rtx_def**
  %29 = load %struct.rtx_def*, %struct.rtx_def** %rtx30, align 8
  call void @find_single_use_in_loop(%struct.loop_regs* %26, %struct.rtx_def* %27, %struct.rtx_def* %29)
  br label %if.end

if.end:                                           ; preds = %if.then.27, %if.then.21
  %30 = load %struct.loop_regs*, %struct.loop_regs** %regs.addr, align 8
  %31 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %32 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld31 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %32, i32 0, i32 1
  %arrayidx32 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld31, i32 0, i64 1
  %rtx33 = bitcast %union.rtunion_def* %arrayidx32 to %struct.rtx_def**
  %33 = load %struct.rtx_def*, %struct.rtx_def** %rtx33, align 8
  call void @find_single_use_in_loop(%struct.loop_regs* %30, %struct.rtx_def* %31, %struct.rtx_def* %33)
  br label %if.end.82

if.else.34:                                       ; preds = %if.else
  %34 = load i32, i32* %code, align 4
  %idxprom35 = sext i32 %34 to i64
  %arrayidx36 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_length, i32 0, i64 %idxprom35
  %35 = load i8, i8* %arrayidx36, align 1
  %conv = zext i8 %35 to i32
  %sub = sub nsw i32 %conv, 1
  store i32 %sub, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.79, %if.else.34
  %36 = load i32, i32* %i, align 4
  %cmp37 = icmp sge i32 %36, 0
  br i1 %cmp37, label %for.body, label %for.end.81

for.body:                                         ; preds = %for.cond
  %37 = load i32, i32* %i, align 4
  %idxprom39 = sext i32 %37 to i64
  %38 = load i8*, i8** %fmt, align 8
  %arrayidx40 = getelementptr inbounds i8, i8* %38, i64 %idxprom39
  %39 = load i8, i8* %arrayidx40, align 1
  %conv41 = sext i8 %39 to i32
  %cmp42 = icmp eq i32 %conv41, 101
  br i1 %cmp42, label %land.lhs.true.44, label %if.else.56

land.lhs.true.44:                                 ; preds = %for.body
  %40 = load i32, i32* %i, align 4
  %idxprom45 = sext i32 %40 to i64
  %41 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld46 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %41, i32 0, i32 1
  %arrayidx47 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld46, i32 0, i64 %idxprom45
  %rtx48 = bitcast %union.rtunion_def* %arrayidx47 to %struct.rtx_def**
  %42 = load %struct.rtx_def*, %struct.rtx_def** %rtx48, align 8
  %cmp49 = icmp ne %struct.rtx_def* %42, null
  br i1 %cmp49, label %if.then.51, label %if.else.56

if.then.51:                                       ; preds = %land.lhs.true.44
  %43 = load %struct.loop_regs*, %struct.loop_regs** %regs.addr, align 8
  %44 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %45 = load i32, i32* %i, align 4
  %idxprom52 = sext i32 %45 to i64
  %46 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld53 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %46, i32 0, i32 1
  %arrayidx54 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld53, i32 0, i64 %idxprom52
  %rtx55 = bitcast %union.rtunion_def* %arrayidx54 to %struct.rtx_def**
  %47 = load %struct.rtx_def*, %struct.rtx_def** %rtx55, align 8
  call void @find_single_use_in_loop(%struct.loop_regs* %43, %struct.rtx_def* %44, %struct.rtx_def* %47)
  br label %if.end.78

if.else.56:                                       ; preds = %land.lhs.true.44, %for.body
  %48 = load i32, i32* %i, align 4
  %idxprom57 = sext i32 %48 to i64
  %49 = load i8*, i8** %fmt, align 8
  %arrayidx58 = getelementptr inbounds i8, i8* %49, i64 %idxprom57
  %50 = load i8, i8* %arrayidx58, align 1
  %conv59 = sext i8 %50 to i32
  %cmp60 = icmp eq i32 %conv59, 69
  br i1 %cmp60, label %if.then.62, label %if.end.77

if.then.62:                                       ; preds = %if.else.56
  %51 = load i32, i32* %i, align 4
  %idxprom63 = sext i32 %51 to i64
  %52 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld64 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %52, i32 0, i32 1
  %arrayidx65 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld64, i32 0, i64 %idxprom63
  %rtvec = bitcast %union.rtunion_def* %arrayidx65 to %struct.rtvec_def**
  %53 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec, align 8
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %53, i32 0, i32 0
  %54 = load i32, i32* %num_elem, align 4
  %sub66 = sub nsw i32 %54, 1
  store i32 %sub66, i32* %j, align 4
  br label %for.cond.67

for.cond.67:                                      ; preds = %for.inc, %if.then.62
  %55 = load i32, i32* %j, align 4
  %cmp68 = icmp sge i32 %55, 0
  br i1 %cmp68, label %for.body.70, label %for.end

for.body.70:                                      ; preds = %for.cond.67
  %56 = load %struct.loop_regs*, %struct.loop_regs** %regs.addr, align 8
  %57 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %58 = load i32, i32* %j, align 4
  %idxprom71 = sext i32 %58 to i64
  %59 = load i32, i32* %i, align 4
  %idxprom72 = sext i32 %59 to i64
  %60 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld73 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %60, i32 0, i32 1
  %arrayidx74 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld73, i32 0, i64 %idxprom72
  %rtvec75 = bitcast %union.rtunion_def* %arrayidx74 to %struct.rtvec_def**
  %61 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec75, align 8
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %61, i32 0, i32 1
  %arrayidx76 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i32 0, i64 %idxprom71
  %62 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx76, align 8
  call void @find_single_use_in_loop(%struct.loop_regs* %56, %struct.rtx_def* %57, %struct.rtx_def* %62)
  br label %for.inc

for.inc:                                          ; preds = %for.body.70
  %63 = load i32, i32* %j, align 4
  %dec = add nsw i32 %63, -1
  store i32 %dec, i32* %j, align 4
  br label %for.cond.67

for.end:                                          ; preds = %for.cond.67
  br label %if.end.77

if.end.77:                                        ; preds = %for.end, %if.else.56
  br label %if.end.78

if.end.78:                                        ; preds = %if.end.77, %if.then.51
  br label %for.inc.79

for.inc.79:                                       ; preds = %if.end.78
  %64 = load i32, i32* %i, align 4
  %dec80 = add nsw i32 %64, -1
  store i32 %dec80, i32* %i, align 4
  br label %for.cond

for.end.81:                                       ; preds = %for.cond
  br label %if.end.82

if.end.82:                                        ; preds = %for.end.81, %if.end
  br label %if.end.83

if.end.83:                                        ; preds = %if.end.82, %cond.end
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @count_one_set(%struct.loop_regs* %regs, %struct.rtx_def* %insn, %struct.rtx_def* %x, %struct.rtx_def** %last_set) #0 {
entry:
  %regs.addr = alloca %struct.loop_regs*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  %x.addr = alloca %struct.rtx_def*, align 8
  %last_set.addr = alloca %struct.rtx_def**, align 8
  %dest = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  %regno = alloca i32, align 4
  store %struct.loop_regs* %regs, %struct.loop_regs** %regs.addr, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  store %struct.rtx_def** %last_set, %struct.rtx_def*** %last_set.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 49
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %3 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %4 = bitcast %struct.rtx_def* %3 to i32*
  %bf.load1 = load i32, i32* %4, align 8
  %bf.clear2 = and i32 %bf.load1, 65535
  %cmp3 = icmp eq i32 %bf.clear2, 61
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %5 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld4 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1
  %arrayidx5 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld4, i32 0, i64 0
  %rtx6 = bitcast %union.rtunion_def* %arrayidx5 to %struct.rtx_def**
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rtx6, align 8
  %fld7 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1
  %arrayidx8 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld7, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx8 to i32*
  %7 = load i32, i32* %rtuint, align 4
  %idxprom = zext i32 %7 to i64
  %8 = load %struct.loop_regs*, %struct.loop_regs** %regs.addr, align 8
  %array = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %8, i32 0, i32 2
  %9 = load %struct.loop_reg*, %struct.loop_reg** %array, align 8
  %arrayidx9 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %9, i64 %idxprom
  %may_not_optimize = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %arrayidx9, i32 0, i32 3
  store i8 1, i8* %may_not_optimize, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %10 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %11 = bitcast %struct.rtx_def* %10 to i32*
  %bf.load10 = load i32, i32* %11, align 8
  %bf.clear11 = and i32 %bf.load10, 65535
  %cmp12 = icmp eq i32 %bf.clear11, 47
  br i1 %cmp12, label %if.then.16, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %12 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %13 = bitcast %struct.rtx_def* %12 to i32*
  %bf.load13 = load i32, i32* %13, align 8
  %bf.clear14 = and i32 %bf.load13, 65535
  %cmp15 = icmp eq i32 %bf.clear14, 49
  br i1 %cmp15, label %if.then.16, label %if.end.160

if.then.16:                                       ; preds = %lor.lhs.false, %if.end
  %14 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld17 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1
  %arrayidx18 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld17, i32 0, i64 0
  %rtx19 = bitcast %union.rtunion_def* %arrayidx18 to %struct.rtx_def**
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rtx19, align 8
  store %struct.rtx_def* %15, %struct.rtx_def** %dest, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then.16
  %16 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %17 = bitcast %struct.rtx_def* %16 to i32*
  %bf.load20 = load i32, i32* %17, align 8
  %bf.clear21 = and i32 %bf.load20, 65535
  %cmp22 = icmp eq i32 %bf.clear21, 63
  br i1 %cmp22, label %lor.end, label %lor.lhs.false.23

lor.lhs.false.23:                                 ; preds = %while.cond
  %18 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %19 = bitcast %struct.rtx_def* %18 to i32*
  %bf.load24 = load i32, i32* %19, align 8
  %bf.clear25 = and i32 %bf.load24, 65535
  %cmp26 = icmp eq i32 %bf.clear25, 133
  br i1 %cmp26, label %lor.end, label %lor.lhs.false.27

lor.lhs.false.27:                                 ; preds = %lor.lhs.false.23
  %20 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %21 = bitcast %struct.rtx_def* %20 to i32*
  %bf.load28 = load i32, i32* %21, align 8
  %bf.clear29 = and i32 %bf.load28, 65535
  %cmp30 = icmp eq i32 %bf.clear29, 132
  br i1 %cmp30, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false.27
  %22 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %23 = bitcast %struct.rtx_def* %22 to i32*
  %bf.load31 = load i32, i32* %23, align 8
  %bf.clear32 = and i32 %bf.load31, 65535
  %cmp33 = icmp eq i32 %bf.clear32, 64
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false.27, %lor.lhs.false.23, %while.cond
  %24 = phi i1 [ true, %lor.lhs.false.27 ], [ true, %lor.lhs.false.23 ], [ true, %while.cond ], [ %cmp33, %lor.rhs ]
  br i1 %24, label %while.body, label %while.end

while.body:                                       ; preds = %lor.end
  %25 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %fld34 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1
  %arrayidx35 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld34, i32 0, i64 0
  %rtx36 = bitcast %union.rtunion_def* %arrayidx35 to %struct.rtx_def**
  %26 = load %struct.rtx_def*, %struct.rtx_def** %rtx36, align 8
  store %struct.rtx_def* %26, %struct.rtx_def** %dest, align 8
  br label %while.cond

while.end:                                        ; preds = %lor.end
  %27 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %28 = bitcast %struct.rtx_def* %27 to i32*
  %bf.load37 = load i32, i32* %28, align 8
  %bf.clear38 = and i32 %bf.load37, 65535
  %cmp39 = icmp eq i32 %bf.clear38, 61
  br i1 %cmp39, label %if.then.40, label %if.end.159

if.then.40:                                       ; preds = %while.end
  %29 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %fld41 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %29, i32 0, i32 1
  %arrayidx42 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld41, i32 0, i64 0
  %rtuint43 = bitcast %union.rtunion_def* %arrayidx42 to i32*
  %30 = load i32, i32* %rtuint43, align 4
  store i32 %30, i32* %regno, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.40
  %31 = load i32, i32* %i, align 4
  %32 = load i32, i32* %regno, align 4
  %cmp44 = icmp slt i32 %32, 53
  br i1 %cmp44, label %cond.true, label %cond.false.106

cond.true:                                        ; preds = %for.cond
  %33 = load i32, i32* %regno, align 4
  %cmp45 = icmp sge i32 %33, 8
  br i1 %cmp45, label %land.lhs.true.46, label %lor.lhs.false.48

land.lhs.true.46:                                 ; preds = %cond.true
  %34 = load i32, i32* %regno, align 4
  %cmp47 = icmp sle i32 %34, 15
  br i1 %cmp47, label %cond.true.60, label %lor.lhs.false.48

lor.lhs.false.48:                                 ; preds = %land.lhs.true.46, %cond.true
  %35 = load i32, i32* %regno, align 4
  %cmp49 = icmp sge i32 %35, 21
  br i1 %cmp49, label %land.lhs.true.50, label %lor.lhs.false.52

land.lhs.true.50:                                 ; preds = %lor.lhs.false.48
  %36 = load i32, i32* %regno, align 4
  %cmp51 = icmp sle i32 %36, 28
  br i1 %cmp51, label %cond.true.60, label %lor.lhs.false.52

lor.lhs.false.52:                                 ; preds = %land.lhs.true.50, %lor.lhs.false.48
  %37 = load i32, i32* %regno, align 4
  %cmp53 = icmp sge i32 %37, 45
  br i1 %cmp53, label %land.lhs.true.54, label %lor.lhs.false.56

land.lhs.true.54:                                 ; preds = %lor.lhs.false.52
  %38 = load i32, i32* %regno, align 4
  %cmp55 = icmp sle i32 %38, 52
  br i1 %cmp55, label %cond.true.60, label %lor.lhs.false.56

lor.lhs.false.56:                                 ; preds = %land.lhs.true.54, %lor.lhs.false.52
  %39 = load i32, i32* %regno, align 4
  %cmp57 = icmp sge i32 %39, 29
  br i1 %cmp57, label %land.lhs.true.58, label %cond.false

land.lhs.true.58:                                 ; preds = %lor.lhs.false.56
  %40 = load i32, i32* %regno, align 4
  %cmp59 = icmp sle i32 %40, 36
  br i1 %cmp59, label %cond.true.60, label %cond.false

cond.true.60:                                     ; preds = %land.lhs.true.58, %land.lhs.true.54, %land.lhs.true.50, %land.lhs.true.46
  %41 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %42 = bitcast %struct.rtx_def* %41 to i32*
  %bf.load61 = load i32, i32* %42, align 8
  %bf.lshr = lshr i32 %bf.load61, 16
  %bf.clear62 = and i32 %bf.lshr, 255
  %idxprom63 = sext i32 %bf.clear62 to i64
  %arrayidx64 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom63
  %43 = load i32, i32* %arrayidx64, align 4
  %cmp65 = icmp eq i32 %43, 5
  br i1 %cmp65, label %lor.end.73, label %lor.rhs.66

lor.rhs.66:                                       ; preds = %cond.true.60
  %44 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %45 = bitcast %struct.rtx_def* %44 to i32*
  %bf.load67 = load i32, i32* %45, align 8
  %bf.lshr68 = lshr i32 %bf.load67, 16
  %bf.clear69 = and i32 %bf.lshr68, 255
  %idxprom70 = sext i32 %bf.clear69 to i64
  %arrayidx71 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom70
  %46 = load i32, i32* %arrayidx71, align 4
  %cmp72 = icmp eq i32 %46, 6
  br label %lor.end.73

lor.end.73:                                       ; preds = %lor.rhs.66, %cond.true.60
  %47 = phi i1 [ true, %cond.true.60 ], [ %cmp72, %lor.rhs.66 ]
  %cond = select i1 %47, i32 2, i32 1
  br label %cond.end.104

cond.false:                                       ; preds = %land.lhs.true.58, %lor.lhs.false.56
  %48 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %49 = bitcast %struct.rtx_def* %48 to i32*
  %bf.load74 = load i32, i32* %49, align 8
  %bf.lshr75 = lshr i32 %bf.load74, 16
  %bf.clear76 = and i32 %bf.lshr75, 255
  %cmp77 = icmp eq i32 %bf.clear76, 18
  br i1 %cmp77, label %cond.true.78, label %cond.false.80

cond.true.78:                                     ; preds = %cond.false
  %50 = load i32, i32* @target_flags, align 4
  %and = and i32 %50, 33554432
  %tobool = icmp ne i32 %and, 0
  %cond79 = select i1 %tobool, i32 2, i32 3
  br label %cond.end.102

cond.false.80:                                    ; preds = %cond.false
  %51 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %52 = bitcast %struct.rtx_def* %51 to i32*
  %bf.load81 = load i32, i32* %52, align 8
  %bf.lshr82 = lshr i32 %bf.load81, 16
  %bf.clear83 = and i32 %bf.lshr82, 255
  %cmp84 = icmp eq i32 %bf.clear83, 24
  br i1 %cmp84, label %cond.true.85, label %cond.false.89

cond.true.85:                                     ; preds = %cond.false.80
  %53 = load i32, i32* @target_flags, align 4
  %and86 = and i32 %53, 33554432
  %tobool87 = icmp ne i32 %and86, 0
  %cond88 = select i1 %tobool87, i32 4, i32 6
  br label %cond.end

cond.false.89:                                    ; preds = %cond.false.80
  %54 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %55 = bitcast %struct.rtx_def* %54 to i32*
  %bf.load90 = load i32, i32* %55, align 8
  %bf.lshr91 = lshr i32 %bf.load90, 16
  %bf.clear92 = and i32 %bf.lshr91, 255
  %idxprom93 = sext i32 %bf.clear92 to i64
  %arrayidx94 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom93
  %56 = load i8, i8* %arrayidx94, align 1
  %conv = zext i8 %56 to i32
  %57 = load i32, i32* @target_flags, align 4
  %and95 = and i32 %57, 33554432
  %tobool96 = icmp ne i32 %and95, 0
  %cond97 = select i1 %tobool96, i32 8, i32 4
  %add = add nsw i32 %conv, %cond97
  %sub = sub nsw i32 %add, 1
  %58 = load i32, i32* @target_flags, align 4
  %and98 = and i32 %58, 33554432
  %tobool99 = icmp ne i32 %and98, 0
  %cond100 = select i1 %tobool99, i32 8, i32 4
  %div = sdiv i32 %sub, %cond100
  br label %cond.end

cond.end:                                         ; preds = %cond.false.89, %cond.true.85
  %cond101 = phi i32 [ %cond88, %cond.true.85 ], [ %div, %cond.false.89 ]
  br label %cond.end.102

cond.end.102:                                     ; preds = %cond.end, %cond.true.78
  %cond103 = phi i32 [ %cond79, %cond.true.78 ], [ %cond101, %cond.end ]
  br label %cond.end.104

cond.end.104:                                     ; preds = %cond.end.102, %lor.end.73
  %cond105 = phi i32 [ %cond, %lor.end.73 ], [ %cond103, %cond.end.102 ]
  br label %cond.end.107

cond.false.106:                                   ; preds = %for.cond
  br label %cond.end.107

cond.end.107:                                     ; preds = %cond.false.106, %cond.end.104
  %cond108 = phi i32 [ %cond105, %cond.end.104 ], [ 1, %cond.false.106 ]
  %cmp109 = icmp slt i32 %31, %cond108
  br i1 %cmp109, label %for.body, label %for.end

for.body:                                         ; preds = %cond.end.107
  %59 = load i32, i32* %regno, align 4
  %idxprom111 = sext i32 %59 to i64
  %60 = load %struct.loop_regs*, %struct.loop_regs** %regs.addr, align 8
  %array112 = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %60, i32 0, i32 2
  %61 = load %struct.loop_reg*, %struct.loop_reg** %array112, align 8
  %arrayidx113 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %61, i64 %idxprom111
  %set_in_loop = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %arrayidx113, i32 0, i32 0
  %62 = load i32, i32* %set_in_loop, align 4
  %cmp114 = icmp sgt i32 %62, 0
  br i1 %cmp114, label %land.lhs.true.116, label %if.end.125

land.lhs.true.116:                                ; preds = %for.body
  %63 = load %struct.rtx_def**, %struct.rtx_def*** %last_set.addr, align 8
  %cmp117 = icmp eq %struct.rtx_def** %63, null
  br i1 %cmp117, label %if.then.119, label %if.end.125

if.then.119:                                      ; preds = %land.lhs.true.116
  %64 = load i32, i32* %regno, align 4
  %65 = load i32, i32* %i, align 4
  %add120 = add nsw i32 %64, %65
  %idxprom121 = sext i32 %add120 to i64
  %66 = load %struct.loop_regs*, %struct.loop_regs** %regs.addr, align 8
  %array122 = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %66, i32 0, i32 2
  %67 = load %struct.loop_reg*, %struct.loop_reg** %array122, align 8
  %arrayidx123 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %67, i64 %idxprom121
  %may_not_optimize124 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %arrayidx123, i32 0, i32 3
  store i8 1, i8* %may_not_optimize124, align 1
  br label %if.end.125

if.end.125:                                       ; preds = %if.then.119, %land.lhs.true.116, %for.body
  %68 = load i32, i32* %regno, align 4
  %idxprom126 = sext i32 %68 to i64
  %69 = load %struct.rtx_def**, %struct.rtx_def*** %last_set.addr, align 8
  %arrayidx127 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %69, i64 %idxprom126
  %70 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx127, align 8
  %cmp128 = icmp ne %struct.rtx_def* %70, null
  br i1 %cmp128, label %land.lhs.true.130, label %if.end.140

land.lhs.true.130:                                ; preds = %if.end.125
  %71 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %72 = load i32, i32* %regno, align 4
  %idxprom131 = sext i32 %72 to i64
  %73 = load %struct.rtx_def**, %struct.rtx_def*** %last_set.addr, align 8
  %arrayidx132 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %73, i64 %idxprom131
  %74 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx132, align 8
  %75 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call = call i32 @reg_used_between_p(%struct.rtx_def* %71, %struct.rtx_def* %74, %struct.rtx_def* %75)
  %tobool133 = icmp ne i32 %call, 0
  br i1 %tobool133, label %if.then.134, label %if.end.140

if.then.134:                                      ; preds = %land.lhs.true.130
  %76 = load i32, i32* %regno, align 4
  %77 = load i32, i32* %i, align 4
  %add135 = add nsw i32 %76, %77
  %idxprom136 = sext i32 %add135 to i64
  %78 = load %struct.loop_regs*, %struct.loop_regs** %regs.addr, align 8
  %array137 = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %78, i32 0, i32 2
  %79 = load %struct.loop_reg*, %struct.loop_reg** %array137, align 8
  %arrayidx138 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %79, i64 %idxprom136
  %may_not_optimize139 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %arrayidx138, i32 0, i32 3
  store i8 1, i8* %may_not_optimize139, align 1
  br label %if.end.140

if.end.140:                                       ; preds = %if.then.134, %land.lhs.true.130, %if.end.125
  %80 = load i32, i32* %regno, align 4
  %81 = load i32, i32* %i, align 4
  %add141 = add nsw i32 %80, %81
  %idxprom142 = sext i32 %add141 to i64
  %82 = load %struct.loop_regs*, %struct.loop_regs** %regs.addr, align 8
  %array143 = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %82, i32 0, i32 2
  %83 = load %struct.loop_reg*, %struct.loop_reg** %array143, align 8
  %arrayidx144 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %83, i64 %idxprom142
  %set_in_loop145 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %arrayidx144, i32 0, i32 0
  %84 = load i32, i32* %set_in_loop145, align 4
  %cmp146 = icmp slt i32 %84, 127
  br i1 %cmp146, label %if.then.148, label %if.end.154

if.then.148:                                      ; preds = %if.end.140
  %85 = load i32, i32* %regno, align 4
  %86 = load i32, i32* %i, align 4
  %add149 = add nsw i32 %85, %86
  %idxprom150 = sext i32 %add149 to i64
  %87 = load %struct.loop_regs*, %struct.loop_regs** %regs.addr, align 8
  %array151 = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %87, i32 0, i32 2
  %88 = load %struct.loop_reg*, %struct.loop_reg** %array151, align 8
  %arrayidx152 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %88, i64 %idxprom150
  %set_in_loop153 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %arrayidx152, i32 0, i32 0
  %89 = load i32, i32* %set_in_loop153, align 4
  %inc = add nsw i32 %89, 1
  store i32 %inc, i32* %set_in_loop153, align 4
  br label %if.end.154

if.end.154:                                       ; preds = %if.then.148, %if.end.140
  %90 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %91 = load i32, i32* %regno, align 4
  %92 = load i32, i32* %i, align 4
  %add155 = add nsw i32 %91, %92
  %idxprom156 = sext i32 %add155 to i64
  %93 = load %struct.rtx_def**, %struct.rtx_def*** %last_set.addr, align 8
  %arrayidx157 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %93, i64 %idxprom156
  store %struct.rtx_def* %90, %struct.rtx_def** %arrayidx157, align 8
  br label %for.inc

for.inc:                                          ; preds = %if.end.154
  %94 = load i32, i32* %i, align 4
  %inc158 = add nsw i32 %94, 1
  store i32 %inc158, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %cond.end.107
  br label %if.end.159

if.end.159:                                       ; preds = %for.end, %while.end
  br label %if.end.160

if.end.160:                                       ; preds = %if.end.159, %lor.lhs.false
  ret void
}

declare i32 @reg_used_between_p(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #1

declare i32 @reg_overlap_mentioned_p(%struct.rtx_def*, %struct.rtx_def*) #1

declare %struct.rtx_def* @gen_move_insn(%struct.rtx_def*, %struct.rtx_def*) #1

declare void @start_sequence() #1

declare %struct.rtx_def* @emit_move_insn(%struct.rtx_def*, %struct.rtx_def*) #1

declare %struct.rtx_def* @get_insns() #1

declare %struct.rtx_def* @gen_sequence() #1

declare void @end_sequence() #1

; Function Attrs: nounwind uwtable
define internal void @add_label_notes(%struct.rtx_def* %x, %struct.rtx_def* %insns) #0 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  %insns.addr = alloca %struct.rtx_def*, align 8
  %code = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %fmt = alloca i8*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  store %struct.rtx_def* %insns, %struct.rtx_def** %insns.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  store i32 %bf.clear, i32* %code, align 4
  %2 = load i32, i32* %code, align 4
  %cmp = icmp eq i32 %2, 67
  br i1 %cmp, label %land.lhs.true, label %if.end.32

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %4 = bitcast %struct.rtx_def* %3 to i32*
  %bf.load1 = load i32, i32* %4, align 8
  %bf.lshr = lshr i32 %bf.load1, 27
  %bf.clear2 = and i32 %bf.lshr, 1
  %tobool = icmp ne i32 %bf.clear2, 0
  br i1 %tobool, label %if.end.32, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insns.addr, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %insn, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %tobool3 = icmp ne %struct.rtx_def* %6, null
  br i1 %tobool3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %8 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %call = call i32 @reg_mentioned_p(%struct.rtx_def* %8, %struct.rtx_def* %9)
  %tobool4 = icmp ne i32 %call, 0
  br i1 %tobool4, label %if.then.5, label %if.end.28

if.then.5:                                        ; preds = %for.body
  %10 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld6 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld6, i32 0, i64 0
  %rtx8 = bitcast %union.rtunion_def* %arrayidx7 to %struct.rtx_def**
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rtx8, align 8
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld9 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1
  %arrayidx10 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld9, i32 0, i64 6
  %rtx11 = bitcast %union.rtunion_def* %arrayidx10 to %struct.rtx_def**
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rtx11, align 8
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_ue(i32 4, i32 13, %struct.rtx_def* %11, %struct.rtx_def* %13)
  %14 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld13 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1
  %arrayidx14 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld13, i32 0, i64 6
  %rtx15 = bitcast %union.rtunion_def* %arrayidx14 to %struct.rtx_def**
  store %struct.rtx_def* %call12, %struct.rtx_def** %rtx15, align 8
  %15 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld16 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1
  %arrayidx17 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld16, i32 0, i64 0
  %rtx18 = bitcast %union.rtunion_def* %arrayidx17 to %struct.rtx_def**
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rtx18, align 8
  %17 = bitcast %struct.rtx_def* %16 to i32*
  %bf.load19 = load i32, i32* %17, align 8
  %bf.clear20 = and i32 %bf.load19, 65535
  %cmp21 = icmp eq i32 %bf.clear20, 36
  br i1 %cmp21, label %if.then.22, label %if.end

if.then.22:                                       ; preds = %if.then.5
  %18 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld23 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1
  %arrayidx24 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld23, i32 0, i64 0
  %rtx25 = bitcast %union.rtunion_def* %arrayidx24 to %struct.rtx_def**
  %19 = load %struct.rtx_def*, %struct.rtx_def** %rtx25, align 8
  %fld26 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1
  %arrayidx27 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld26, i32 0, i64 3
  %rtint = bitcast %union.rtunion_def* %arrayidx27 to i32*
  %20 = load i32, i32* %rtint, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %rtint, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.22, %if.then.5
  br label %if.end.28

if.end.28:                                        ; preds = %if.end, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.28
  %21 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld29 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1
  %arrayidx30 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld29, i32 0, i64 2
  %rtx31 = bitcast %union.rtunion_def* %arrayidx30 to %struct.rtx_def**
  %22 = load %struct.rtx_def*, %struct.rtx_def** %rtx31, align 8
  store %struct.rtx_def* %22, %struct.rtx_def** %insn, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.32

if.end.32:                                        ; preds = %for.end, %land.lhs.true, %entry
  %23 = load i32, i32* %code, align 4
  %idxprom = sext i32 %23 to i64
  %arrayidx33 = getelementptr inbounds [153 x i8*], [153 x i8*]* @rtx_format, i32 0, i64 %idxprom
  %24 = load i8*, i8** %arrayidx33, align 8
  store i8* %24, i8** %fmt, align 8
  %25 = load i32, i32* %code, align 4
  %idxprom34 = sext i32 %25 to i64
  %arrayidx35 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_length, i32 0, i64 %idxprom34
  %26 = load i8, i8* %arrayidx35, align 1
  %conv = zext i8 %26 to i32
  %sub = sub nsw i32 %conv, 1
  store i32 %sub, i32* %i, align 4
  br label %for.cond.36

for.cond.36:                                      ; preds = %for.inc.74, %if.end.32
  %27 = load i32, i32* %i, align 4
  %cmp37 = icmp sge i32 %27, 0
  br i1 %cmp37, label %for.body.39, label %for.end.76

for.body.39:                                      ; preds = %for.cond.36
  %28 = load i32, i32* %i, align 4
  %idxprom40 = sext i32 %28 to i64
  %29 = load i8*, i8** %fmt, align 8
  %arrayidx41 = getelementptr inbounds i8, i8* %29, i64 %idxprom40
  %30 = load i8, i8* %arrayidx41, align 1
  %conv42 = sext i8 %30 to i32
  %cmp43 = icmp eq i32 %conv42, 101
  br i1 %cmp43, label %if.then.45, label %if.else

if.then.45:                                       ; preds = %for.body.39
  %31 = load i32, i32* %i, align 4
  %idxprom46 = sext i32 %31 to i64
  %32 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld47 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %32, i32 0, i32 1
  %arrayidx48 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld47, i32 0, i64 %idxprom46
  %rtx49 = bitcast %union.rtunion_def* %arrayidx48 to %struct.rtx_def**
  %33 = load %struct.rtx_def*, %struct.rtx_def** %rtx49, align 8
  %34 = load %struct.rtx_def*, %struct.rtx_def** %insns.addr, align 8
  call void @add_label_notes(%struct.rtx_def* %33, %struct.rtx_def* %34)
  br label %if.end.73

if.else:                                          ; preds = %for.body.39
  %35 = load i32, i32* %i, align 4
  %idxprom50 = sext i32 %35 to i64
  %36 = load i8*, i8** %fmt, align 8
  %arrayidx51 = getelementptr inbounds i8, i8* %36, i64 %idxprom50
  %37 = load i8, i8* %arrayidx51, align 1
  %conv52 = sext i8 %37 to i32
  %cmp53 = icmp eq i32 %conv52, 69
  br i1 %cmp53, label %if.then.55, label %if.end.72

if.then.55:                                       ; preds = %if.else
  %38 = load i32, i32* %i, align 4
  %idxprom56 = sext i32 %38 to i64
  %39 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld57 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1
  %arrayidx58 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld57, i32 0, i64 %idxprom56
  %rtvec = bitcast %union.rtunion_def* %arrayidx58 to %struct.rtvec_def**
  %40 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec, align 8
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %40, i32 0, i32 0
  %41 = load i32, i32* %num_elem, align 4
  %sub59 = sub nsw i32 %41, 1
  store i32 %sub59, i32* %j, align 4
  br label %for.cond.60

for.cond.60:                                      ; preds = %for.inc.70, %if.then.55
  %42 = load i32, i32* %j, align 4
  %cmp61 = icmp sge i32 %42, 0
  br i1 %cmp61, label %for.body.63, label %for.end.71

for.body.63:                                      ; preds = %for.cond.60
  %43 = load i32, i32* %j, align 4
  %idxprom64 = sext i32 %43 to i64
  %44 = load i32, i32* %i, align 4
  %idxprom65 = sext i32 %44 to i64
  %45 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld66 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %45, i32 0, i32 1
  %arrayidx67 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld66, i32 0, i64 %idxprom65
  %rtvec68 = bitcast %union.rtunion_def* %arrayidx67 to %struct.rtvec_def**
  %46 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec68, align 8
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %46, i32 0, i32 1
  %arrayidx69 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i32 0, i64 %idxprom64
  %47 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx69, align 8
  %48 = load %struct.rtx_def*, %struct.rtx_def** %insns.addr, align 8
  call void @add_label_notes(%struct.rtx_def* %47, %struct.rtx_def* %48)
  br label %for.inc.70

for.inc.70:                                       ; preds = %for.body.63
  %49 = load i32, i32* %j, align 4
  %dec = add nsw i32 %49, -1
  store i32 %dec, i32* %j, align 4
  br label %for.cond.60

for.end.71:                                       ; preds = %for.cond.60
  br label %if.end.72

if.end.72:                                        ; preds = %for.end.71, %if.else
  br label %if.end.73

if.end.73:                                        ; preds = %if.end.72, %if.then.45
  br label %for.inc.74

for.inc.74:                                       ; preds = %if.end.73
  %50 = load i32, i32* %i, align 4
  %dec75 = add nsw i32 %50, -1
  store i32 %dec75, i32* %i, align 4
  br label %for.cond.36

for.end.76:                                       ; preds = %for.cond.36
  ret void
}

declare %struct.rtx_def* @set_unique_reg_note(%struct.rtx_def*, i32, %struct.rtx_def*) #1

declare i32 @reg_referenced_p(%struct.rtx_def*, %struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define internal %struct.rtx_def* @loop_insn_emit_after(%struct.loop* %loop, %struct.basic_block_def* %where_bb, %struct.rtx_def* %where_insn, %struct.rtx_def* %pattern) #0 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %where_bb.addr = alloca %struct.basic_block_def*, align 8
  %where_insn.addr = alloca %struct.rtx_def*, align 8
  %pattern.addr = alloca %struct.rtx_def*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  store %struct.basic_block_def* %where_bb, %struct.basic_block_def** %where_bb.addr, align 8
  store %struct.rtx_def* %where_insn, %struct.rtx_def** %where_insn.addr, align 8
  store %struct.rtx_def* %pattern, %struct.rtx_def** %pattern.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %where_insn.addr, align 8
  %call = call %struct.rtx_def* @emit_insn_after(%struct.rtx_def* %0, %struct.rtx_def* %1)
  ret %struct.rtx_def* %call
}

; Function Attrs: nounwind uwtable
define internal %struct.rtx_def* @loop_call_insn_hoist(%struct.loop* %loop, %struct.rtx_def* %pattern) #0 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %pattern.addr = alloca %struct.rtx_def*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  store %struct.rtx_def* %pattern, %struct.rtx_def** %pattern.addr, align 8
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %1 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %start = getelementptr inbounds %struct.loop, %struct.loop* %1, i32 0, i32 26
  %2 = load %struct.rtx_def*, %struct.rtx_def** %start, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8
  %call = call %struct.rtx_def* @loop_call_insn_emit_before(%struct.loop* %0, %struct.basic_block_def* null, %struct.rtx_def* %2, %struct.rtx_def* %3)
  ret %struct.rtx_def* %call
}

declare %struct.rtx_def* @expand_simple_binop(i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32, i32) #1

declare void @remove_note(%struct.rtx_def*, %struct.rtx_def*) #1

declare %struct.rtx_def* @gen_lowpart_common(i32, %struct.rtx_def*) #1

declare void @delete_insn_chain(%struct.rtx_def*, %struct.rtx_def*) #1

declare %struct.rtx_def* @replace_regs(%struct.rtx_def*, %struct.rtx_def**, i32, i32) #1

declare %struct.rtx_def* @gen_rtx_fmt_ue(i32, i32, %struct.rtx_def*, %struct.rtx_def*) #1

declare %struct.rtx_def* @emit_insn_after(%struct.rtx_def*, %struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define internal %struct.rtx_def* @loop_call_insn_emit_before(%struct.loop* %loop, %struct.basic_block_def* %where_bb, %struct.rtx_def* %where_insn, %struct.rtx_def* %pattern) #0 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %where_bb.addr = alloca %struct.basic_block_def*, align 8
  %where_insn.addr = alloca %struct.rtx_def*, align 8
  %pattern.addr = alloca %struct.rtx_def*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  store %struct.basic_block_def* %where_bb, %struct.basic_block_def** %where_bb.addr, align 8
  store %struct.rtx_def* %where_insn, %struct.rtx_def** %where_insn.addr, align 8
  store %struct.rtx_def* %pattern, %struct.rtx_def** %pattern.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %where_insn.addr, align 8
  %call = call %struct.rtx_def* @emit_call_insn_before(%struct.rtx_def* %0, %struct.rtx_def* %1)
  ret %struct.rtx_def* %call
}

declare %struct.rtx_def* @emit_call_insn_before(%struct.rtx_def*, %struct.rtx_def*) #1

declare void @cselib_init() #1

declare void @cselib_process_insn(%struct.rtx_def*) #1

declare %struct.bitmap_head_def* @bitmap_initialize(%struct.bitmap_head_def*) #1

declare %struct.rtx_def* @gen_reg_rtx(i32) #1

declare void @bitmap_set_bit(%struct.bitmap_head_def*, i32) #1

; Function Attrs: nounwind uwtable
define internal void @replace_loop_mems(%struct.rtx_def* %insn, %struct.rtx_def* %mem, %struct.rtx_def* %reg) #0 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %mem.addr = alloca %struct.rtx_def*, align 8
  %reg.addr = alloca %struct.rtx_def*, align 8
  %args = alloca %struct.loop_replace_args, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  store %struct.rtx_def* %mem, %struct.rtx_def** %mem.addr, align 8
  store %struct.rtx_def* %reg, %struct.rtx_def** %reg.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %insn1 = getelementptr inbounds %struct.loop_replace_args, %struct.loop_replace_args* %args, i32 0, i32 2
  store %struct.rtx_def* %0, %struct.rtx_def** %insn1, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8
  %match = getelementptr inbounds %struct.loop_replace_args, %struct.loop_replace_args* %args, i32 0, i32 0
  store %struct.rtx_def* %1, %struct.rtx_def** %match, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %replacement = getelementptr inbounds %struct.loop_replace_args, %struct.loop_replace_args* %args, i32 0, i32 1
  store %struct.rtx_def* %2, %struct.rtx_def** %replacement, align 8
  %3 = bitcast %struct.loop_replace_args* %args to i8*
  %call = call i32 @for_each_rtx(%struct.rtx_def** %insn.addr, i32 (%struct.rtx_def**, i8*)* @replace_loop_mem, i8* %3)
  ret void
}

declare i32 @apply_change_group() #1

declare %struct.cselib_val_struct* @cselib_lookup(%struct.rtx_def*, i32, i32) #1

declare i32 @rtx_cost(%struct.rtx_def*, i32) #1

declare %struct.rtx_def* @gen_label_rtx() #1

declare %struct.rtx_def* @emit_label_after(%struct.rtx_def*, %struct.rtx_def*) #1

declare void @print_rtl(%struct._IO_FILE*, %struct.rtx_def*) #1

declare i32 @fputc(i32, %struct._IO_FILE*) #1

; Function Attrs: nounwind uwtable
define internal void @try_copy_prop(%struct.loop* %loop, %struct.rtx_def* %replacement, i32 %regno) #0 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %replacement.addr = alloca %struct.rtx_def*, align 8
  %regno.addr = alloca i32, align 4
  %reg_rtx = alloca %struct.rtx_def*, align 8
  %init_insn = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %replaced_last = alloca i32, align 4
  %store_is_first = alloca i32, align 4
  %set = alloca %struct.rtx_def*, align 8
  %arg = alloca %struct.note_reg_stored_arg, align 8
  %note = alloca %struct.rtx_def*, align 8
  %first = alloca %struct.rtx_def*, align 8
  %retval_note = alloca %struct.rtx_def*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  store %struct.rtx_def* %replacement, %struct.rtx_def** %replacement.addr, align 8
  store i32 %regno, i32* %regno.addr, align 4
  %0 = load i32, i32* %regno.addr, align 4
  %idxprom = zext i32 %0 to i64
  %1 = load %struct.function*, %struct.function** @cfun, align 8
  %emit = getelementptr inbounds %struct.function, %struct.function* %1, i32 0, i32 3
  %2 = load %struct.emit_status*, %struct.emit_status** %emit, align 8
  %x_regno_reg_rtx = getelementptr inbounds %struct.emit_status, %struct.emit_status* %2, i32 0, i32 12
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %x_regno_reg_rtx, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 %idxprom
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %reg_rtx, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %init_insn, align 8
  store i32 0, i32* %replaced_last, align 4
  store i32 0, i32* %store_is_first, align 4
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %6 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %scan_start = getelementptr inbounds %struct.loop, %struct.loop* %6, i32 0, i32 29
  %7 = load %struct.rtx_def*, %struct.rtx_def** %scan_start, align 8
  %call = call %struct.rtx_def* @next_insn_in_loop(%struct.loop* %5, %struct.rtx_def* %7)
  store %struct.rtx_def* %call, %struct.rtx_def** %insn, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %cmp = icmp ne %struct.rtx_def* %8, null
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %10 = bitcast %struct.rtx_def* %9 to i32*
  %bf.load = load i32, i32* %10, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp1 = icmp eq i32 %bf.clear, 36
  br i1 %cmp1, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %11 = load %struct.rtx_def*, %struct.rtx_def** %init_insn, align 8
  %tobool = icmp ne %struct.rtx_def* %11, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  br label %for.end

if.end:                                           ; preds = %land.lhs.true, %for.body
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %13 = bitcast %struct.rtx_def* %12 to i32*
  %bf.load2 = load i32, i32* %13, align 8
  %bf.clear3 = and i32 %bf.load2, 65535
  %idxprom4 = sext i32 %bf.clear3 to i64
  %arrayidx5 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom4
  %14 = load i8, i8* %arrayidx5, align 1
  %conv = sext i8 %14 to i32
  %cmp6 = icmp eq i32 %conv, 105
  br i1 %cmp6, label %if.end.9, label %if.then.8

if.then.8:                                        ; preds = %if.end
  br label %for.inc

if.end.9:                                         ; preds = %if.end
  %15 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %16 = bitcast %struct.rtx_def* %15 to i32*
  %bf.load10 = load i32, i32* %16, align 8
  %bf.clear11 = and i32 %bf.load10, 65535
  %idxprom12 = sext i32 %bf.clear11 to i64
  %arrayidx13 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom12
  %17 = load i8, i8* %arrayidx13, align 1
  %conv14 = sext i8 %17 to i32
  %cmp15 = icmp eq i32 %conv14, 105
  br i1 %cmp15, label %cond.true, label %cond.false.30

cond.true:                                        ; preds = %if.end.9
  %18 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1
  %arrayidx17 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx17 to %struct.rtx_def**
  %19 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %20 = bitcast %struct.rtx_def* %19 to i32*
  %bf.load18 = load i32, i32* %20, align 8
  %bf.clear19 = and i32 %bf.load18, 65535
  %cmp20 = icmp eq i32 %bf.clear19, 47
  br i1 %cmp20, label %cond.true.22, label %cond.false

cond.true.22:                                     ; preds = %cond.true
  %21 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld23 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1
  %arrayidx24 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld23, i32 0, i64 3
  %rtx25 = bitcast %union.rtunion_def* %arrayidx24 to %struct.rtx_def**
  %22 = load %struct.rtx_def*, %struct.rtx_def** %rtx25, align 8
  br label %cond.end

cond.false:                                       ; preds = %cond.true
  %23 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %24 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld26 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1
  %arrayidx27 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld26, i32 0, i64 3
  %rtx28 = bitcast %union.rtunion_def* %arrayidx27 to %struct.rtx_def**
  %25 = load %struct.rtx_def*, %struct.rtx_def** %rtx28, align 8
  %call29 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %23, %struct.rtx_def* %25)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true.22
  %cond = phi %struct.rtx_def* [ %22, %cond.true.22 ], [ %call29, %cond.false ]
  br label %cond.end.31

cond.false.30:                                    ; preds = %if.end.9
  br label %cond.end.31

cond.end.31:                                      ; preds = %cond.false.30, %cond.end
  %cond32 = phi %struct.rtx_def* [ %cond, %cond.end ], [ null, %cond.false.30 ]
  store %struct.rtx_def* %cond32, %struct.rtx_def** %set, align 8
  %26 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %tobool33 = icmp ne %struct.rtx_def* %26, null
  br i1 %tobool33, label %land.lhs.true.34, label %if.end.62

land.lhs.true.34:                                 ; preds = %cond.end.31
  %27 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld35 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1
  %arrayidx36 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld35, i32 0, i64 0
  %rtx37 = bitcast %union.rtunion_def* %arrayidx36 to %struct.rtx_def**
  %28 = load %struct.rtx_def*, %struct.rtx_def** %rtx37, align 8
  %29 = bitcast %struct.rtx_def* %28 to i32*
  %bf.load38 = load i32, i32* %29, align 8
  %bf.clear39 = and i32 %bf.load38, 65535
  %cmp40 = icmp eq i32 %bf.clear39, 61
  br i1 %cmp40, label %land.lhs.true.42, label %if.end.62

land.lhs.true.42:                                 ; preds = %land.lhs.true.34
  %30 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld43 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %30, i32 0, i32 1
  %arrayidx44 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld43, i32 0, i64 0
  %rtx45 = bitcast %union.rtunion_def* %arrayidx44 to %struct.rtx_def**
  %31 = load %struct.rtx_def*, %struct.rtx_def** %rtx45, align 8
  %fld46 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1
  %arrayidx47 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld46, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx47 to i32*
  %32 = load i32, i32* %rtuint, align 4
  %33 = load i32, i32* %regno.addr, align 4
  %cmp48 = icmp eq i32 %32, %33
  br i1 %cmp48, label %if.then.50, label %if.end.62

if.then.50:                                       ; preds = %land.lhs.true.42
  %34 = load %struct.rtx_def*, %struct.rtx_def** %init_insn, align 8
  %tobool51 = icmp ne %struct.rtx_def* %34, null
  br i1 %tobool51, label %if.then.52, label %if.end.53

if.then.52:                                       ; preds = %if.then.50
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 9988, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @__FUNCTION__.try_copy_prop, i32 0, i32 0)) #6
  unreachable

if.end.53:                                        ; preds = %if.then.50
  %35 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  store %struct.rtx_def* %35, %struct.rtx_def** %init_insn, align 8
  %36 = load i32, i32* %regno.addr, align 4
  %idxprom54 = zext i32 %36 to i64
  %37 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %data = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %37, i32 0, i32 4
  %reg = bitcast %union.varray_data_tag* %data to [1 x %struct.reg_info_def*]*
  %arrayidx55 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %reg, i32 0, i64 %idxprom54
  %38 = load %struct.reg_info_def*, %struct.reg_info_def** %arrayidx55, align 8
  %first_uid = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %38, i32 0, i32 0
  %39 = load i32, i32* %first_uid, align 4
  %40 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld56 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %40, i32 0, i32 1
  %arrayidx57 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld56, i32 0, i64 0
  %rtint = bitcast %union.rtunion_def* %arrayidx57 to i32*
  %41 = load i32, i32* %rtint, align 4
  %cmp58 = icmp eq i32 %39, %41
  br i1 %cmp58, label %if.then.60, label %if.end.61

if.then.60:                                       ; preds = %if.end.53
  store i32 1, i32* %store_is_first, align 4
  br label %if.end.61

if.end.61:                                        ; preds = %if.then.60, %if.end.53
  br label %if.end.62

if.end.62:                                        ; preds = %if.end.61, %land.lhs.true.42, %land.lhs.true.34, %cond.end.31
  %42 = load %struct.rtx_def*, %struct.rtx_def** %init_insn, align 8
  %tobool63 = icmp ne %struct.rtx_def* %42, null
  br i1 %tobool63, label %land.lhs.true.64, label %if.end.97

land.lhs.true.64:                                 ; preds = %if.end.62
  %43 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %44 = load %struct.rtx_def*, %struct.rtx_def** %init_insn, align 8
  %cmp65 = icmp ne %struct.rtx_def* %43, %44
  br i1 %cmp65, label %if.then.67, label %if.end.97

if.then.67:                                       ; preds = %land.lhs.true.64
  %45 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %46 = load %struct.rtx_def*, %struct.rtx_def** %reg_rtx, align 8
  %47 = load %struct.rtx_def*, %struct.rtx_def** %replacement.addr, align 8
  call void @replace_loop_regs(%struct.rtx_def* %45, %struct.rtx_def* %46, %struct.rtx_def* %47)
  %48 = load i32, i32* %regno.addr, align 4
  %idxprom68 = zext i32 %48 to i64
  %49 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %data69 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %49, i32 0, i32 4
  %reg70 = bitcast %union.varray_data_tag* %data69 to [1 x %struct.reg_info_def*]*
  %arrayidx71 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %reg70, i32 0, i64 %idxprom68
  %50 = load %struct.reg_info_def*, %struct.reg_info_def** %arrayidx71, align 8
  %last_uid = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %50, i32 0, i32 1
  %51 = load i32, i32* %last_uid, align 4
  %52 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld72 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %52, i32 0, i32 1
  %arrayidx73 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld72, i32 0, i64 0
  %rtint74 = bitcast %union.rtunion_def* %arrayidx73 to i32*
  %53 = load i32, i32* %rtint74, align 4
  %cmp75 = icmp eq i32 %51, %53
  br i1 %cmp75, label %if.then.77, label %if.end.78

if.then.77:                                       ; preds = %if.then.67
  store i32 1, i32* %replaced_last, align 4
  br label %if.end.78

if.end.78:                                        ; preds = %if.then.77, %if.then.67
  %54 = load %struct.rtx_def*, %struct.rtx_def** %replacement.addr, align 8
  %reg79 = getelementptr inbounds %struct.note_reg_stored_arg, %struct.note_reg_stored_arg* %arg, i32 0, i32 1
  store %struct.rtx_def* %54, %struct.rtx_def** %reg79, align 8
  %set_seen = getelementptr inbounds %struct.note_reg_stored_arg, %struct.note_reg_stored_arg* %arg, i32 0, i32 0
  store i32 0, i32* %set_seen, align 4
  %55 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld80 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %55, i32 0, i32 1
  %arrayidx81 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld80, i32 0, i64 3
  %rtx82 = bitcast %union.rtunion_def* %arrayidx81 to %struct.rtx_def**
  %56 = load %struct.rtx_def*, %struct.rtx_def** %rtx82, align 8
  %57 = bitcast %struct.note_reg_stored_arg* %arg to i8*
  call void @note_stores(%struct.rtx_def* %56, void (%struct.rtx_def*, %struct.rtx_def*, i8*)* @note_reg_stored, i8* %57)
  %set_seen83 = getelementptr inbounds %struct.note_reg_stored_arg, %struct.note_reg_stored_arg* %arg, i32 0, i32 0
  %58 = load i32, i32* %set_seen83, align 4
  %tobool84 = icmp ne i32 %58, 0
  br i1 %tobool84, label %if.then.85, label %if.end.96

if.then.85:                                       ; preds = %if.end.78
  %59 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %call86 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %59, i32 4, %struct.rtx_def* null)
  store %struct.rtx_def* %call86, %struct.rtx_def** %note, align 8
  %60 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8
  %tobool87 = icmp ne %struct.rtx_def* %60, null
  br i1 %tobool87, label %land.lhs.true.88, label %if.end.95

land.lhs.true.88:                                 ; preds = %if.then.85
  %61 = load %struct.rtx_def*, %struct.rtx_def** %replacement.addr, align 8
  %62 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8
  %fld89 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %62, i32 0, i32 1
  %arrayidx90 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld89, i32 0, i64 0
  %rtx91 = bitcast %union.rtunion_def* %arrayidx90 to %struct.rtx_def**
  %63 = load %struct.rtx_def*, %struct.rtx_def** %rtx91, align 8
  %call92 = call i32 @reg_mentioned_p(%struct.rtx_def* %61, %struct.rtx_def* %63)
  %tobool93 = icmp ne i32 %call92, 0
  br i1 %tobool93, label %if.then.94, label %if.end.95

if.then.94:                                       ; preds = %land.lhs.true.88
  %64 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %65 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8
  call void @remove_note(%struct.rtx_def* %64, %struct.rtx_def* %65)
  br label %if.end.95

if.end.95:                                        ; preds = %if.then.94, %land.lhs.true.88, %if.then.85
  br label %for.end

if.end.96:                                        ; preds = %if.end.78
  br label %if.end.97

if.end.97:                                        ; preds = %if.end.96, %land.lhs.true.64, %if.end.62
  br label %for.inc

for.inc:                                          ; preds = %if.end.97, %if.then.8
  %66 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %67 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %call98 = call %struct.rtx_def* @next_insn_in_loop(%struct.loop* %66, %struct.rtx_def* %67)
  store %struct.rtx_def* %call98, %struct.rtx_def** %insn, align 8
  br label %for.cond

for.end:                                          ; preds = %if.end.95, %if.then, %for.cond
  %68 = load %struct.rtx_def*, %struct.rtx_def** %init_insn, align 8
  %tobool99 = icmp ne %struct.rtx_def* %68, null
  br i1 %tobool99, label %if.end.101, label %if.then.100

if.then.100:                                      ; preds = %for.end
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 10022, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @__FUNCTION__.try_copy_prop, i32 0, i32 0)) #6
  unreachable

if.end.101:                                       ; preds = %for.end
  %call102 = call i32 @apply_change_group()
  %tobool103 = icmp ne i32 %call102, 0
  br i1 %tobool103, label %if.then.104, label %if.end.125

if.then.104:                                      ; preds = %if.end.101
  %69 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %tobool105 = icmp ne %struct._IO_FILE* %69, null
  br i1 %tobool105, label %if.then.106, label %if.end.108

if.then.106:                                      ; preds = %if.then.104
  %70 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %71 = load i32, i32* %regno.addr, align 4
  %call107 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %70, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.22, i32 0, i32 0), i32 %71)
  br label %if.end.108

if.end.108:                                       ; preds = %if.then.106, %if.then.104
  %72 = load i32, i32* %store_is_first, align 4
  %tobool109 = icmp ne i32 %72, 0
  br i1 %tobool109, label %land.lhs.true.110, label %if.end.120

land.lhs.true.110:                                ; preds = %if.end.108
  %73 = load i32, i32* %replaced_last, align 4
  %tobool111 = icmp ne i32 %73, 0
  br i1 %tobool111, label %if.then.112, label %if.end.120

if.then.112:                                      ; preds = %land.lhs.true.110
  %74 = load %struct.rtx_def*, %struct.rtx_def** %init_insn, align 8
  store %struct.rtx_def* %74, %struct.rtx_def** %first, align 8
  %75 = load %struct.rtx_def*, %struct.rtx_def** %init_insn, align 8
  %call113 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %75, i32 6, %struct.rtx_def* null)
  store %struct.rtx_def* %call113, %struct.rtx_def** %retval_note, align 8
  %76 = load %struct.rtx_def*, %struct.rtx_def** %retval_note, align 8
  %tobool114 = icmp ne %struct.rtx_def* %76, null
  br i1 %tobool114, label %if.then.115, label %if.end.119

if.then.115:                                      ; preds = %if.then.112
  %77 = load %struct.rtx_def*, %struct.rtx_def** %retval_note, align 8
  %fld116 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %77, i32 0, i32 1
  %arrayidx117 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld116, i32 0, i64 0
  %rtx118 = bitcast %union.rtunion_def* %arrayidx117 to %struct.rtx_def**
  %78 = load %struct.rtx_def*, %struct.rtx_def** %rtx118, align 8
  store %struct.rtx_def* %78, %struct.rtx_def** %first, align 8
  br label %if.end.119

if.end.119:                                       ; preds = %if.then.115, %if.then.112
  %79 = load %struct.rtx_def*, %struct.rtx_def** %first, align 8
  %80 = load %struct.rtx_def*, %struct.rtx_def** %init_insn, align 8
  call void @loop_delete_insns(%struct.rtx_def* %79, %struct.rtx_def* %80)
  br label %if.end.120

if.end.120:                                       ; preds = %if.end.119, %land.lhs.true.110, %if.end.108
  %81 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %tobool121 = icmp ne %struct._IO_FILE* %81, null
  br i1 %tobool121, label %if.then.122, label %if.end.124

if.then.122:                                      ; preds = %if.end.120
  %82 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %call123 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %82, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.23, i32 0, i32 0))
  br label %if.end.124

if.end.124:                                       ; preds = %if.then.122, %if.end.120
  br label %if.end.125

if.end.125:                                       ; preds = %if.end.124, %if.end.101
  ret void
}

declare void @bitmap_clear(%struct.bitmap_head_def*) #1

; Function Attrs: nounwind uwtable
define internal void @try_swap_copy_prop(%struct.loop* %loop, %struct.rtx_def* %replacement, i32 %regno) #0 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %replacement.addr = alloca %struct.rtx_def*, align 8
  %regno.addr = alloca i32, align 4
  %insn = alloca %struct.rtx_def*, align 8
  %set = alloca %struct.rtx_def*, align 8
  %new_regno = alloca i32, align 4
  %prev_insn = alloca %struct.rtx_def*, align 8
  %prev_set = alloca %struct.rtx_def*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  store %struct.rtx_def* %replacement, %struct.rtx_def** %replacement.addr, align 8
  store i32 %regno, i32* %regno.addr, align 4
  store %struct.rtx_def* null, %struct.rtx_def** %set, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %replacement.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx to i32*
  %1 = load i32, i32* %rtuint, align 4
  store i32 %1, i32* %new_regno, align 4
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %3 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %scan_start = getelementptr inbounds %struct.loop, %struct.loop* %3, i32 0, i32 29
  %4 = load %struct.rtx_def*, %struct.rtx_def** %scan_start, align 8
  %call = call %struct.rtx_def* @next_insn_in_loop(%struct.loop* %2, %struct.rtx_def* %4)
  store %struct.rtx_def* %call, %struct.rtx_def** %insn, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %cmp = icmp ne %struct.rtx_def* %5, null
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %7 = bitcast %struct.rtx_def* %6 to i32*
  %bf.load = load i32, i32* %7, align 8
  %bf.clear = and i32 %bf.load, 65535
  %idxprom = sext i32 %bf.clear to i64
  %arrayidx1 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom
  %8 = load i8, i8* %arrayidx1, align 1
  %conv = sext i8 %8 to i32
  %cmp2 = icmp eq i32 %conv, 105
  br i1 %cmp2, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %9 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %10 = bitcast %struct.rtx_def* %9 to i32*
  %bf.load4 = load i32, i32* %10, align 8
  %bf.clear5 = and i32 %bf.load4, 65535
  %idxprom6 = sext i32 %bf.clear5 to i64
  %arrayidx7 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom6
  %11 = load i8, i8* %arrayidx7, align 1
  %conv8 = sext i8 %11 to i32
  %cmp9 = icmp eq i32 %conv8, 105
  br i1 %cmp9, label %cond.true, label %cond.false.25

cond.true:                                        ; preds = %land.lhs.true
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld11 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1
  %arrayidx12 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld11, i32 0, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx12 to %struct.rtx_def**
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %14 = bitcast %struct.rtx_def* %13 to i32*
  %bf.load13 = load i32, i32* %14, align 8
  %bf.clear14 = and i32 %bf.load13, 65535
  %cmp15 = icmp eq i32 %bf.clear14, 47
  br i1 %cmp15, label %cond.true.17, label %cond.false

cond.true.17:                                     ; preds = %cond.true
  %15 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld18 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1
  %arrayidx19 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld18, i32 0, i64 3
  %rtx20 = bitcast %union.rtunion_def* %arrayidx19 to %struct.rtx_def**
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rtx20, align 8
  br label %cond.end

cond.false:                                       ; preds = %cond.true
  %17 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %18 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld21 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1
  %arrayidx22 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld21, i32 0, i64 3
  %rtx23 = bitcast %union.rtunion_def* %arrayidx22 to %struct.rtx_def**
  %19 = load %struct.rtx_def*, %struct.rtx_def** %rtx23, align 8
  %call24 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %17, %struct.rtx_def* %19)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true.17
  %cond = phi %struct.rtx_def* [ %16, %cond.true.17 ], [ %call24, %cond.false ]
  br label %cond.end.26

cond.false.25:                                    ; preds = %land.lhs.true
  br label %cond.end.26

cond.end.26:                                      ; preds = %cond.false.25, %cond.end
  %cond27 = phi %struct.rtx_def* [ %cond, %cond.end ], [ null, %cond.false.25 ]
  store %struct.rtx_def* %cond27, %struct.rtx_def** %set, align 8
  %tobool = icmp ne %struct.rtx_def* %cond27, null
  br i1 %tobool, label %land.lhs.true.28, label %if.end

land.lhs.true.28:                                 ; preds = %cond.end.26
  %20 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld29 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1
  %arrayidx30 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld29, i32 0, i64 0
  %rtx31 = bitcast %union.rtunion_def* %arrayidx30 to %struct.rtx_def**
  %21 = load %struct.rtx_def*, %struct.rtx_def** %rtx31, align 8
  %22 = bitcast %struct.rtx_def* %21 to i32*
  %bf.load32 = load i32, i32* %22, align 8
  %bf.clear33 = and i32 %bf.load32, 65535
  %cmp34 = icmp eq i32 %bf.clear33, 61
  br i1 %cmp34, label %land.lhs.true.36, label %if.end

land.lhs.true.36:                                 ; preds = %land.lhs.true.28
  %23 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld37 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1
  %arrayidx38 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld37, i32 0, i64 0
  %rtx39 = bitcast %union.rtunion_def* %arrayidx38 to %struct.rtx_def**
  %24 = load %struct.rtx_def*, %struct.rtx_def** %rtx39, align 8
  %fld40 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1
  %arrayidx41 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld40, i32 0, i64 0
  %rtuint42 = bitcast %union.rtunion_def* %arrayidx41 to i32*
  %25 = load i32, i32* %rtuint42, align 4
  %26 = load i32, i32* %new_regno, align 4
  %cmp43 = icmp eq i32 %25, %26
  br i1 %cmp43, label %land.lhs.true.45, label %if.end

land.lhs.true.45:                                 ; preds = %land.lhs.true.36
  %27 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld46 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1
  %arrayidx47 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld46, i32 0, i64 1
  %rtx48 = bitcast %union.rtunion_def* %arrayidx47 to %struct.rtx_def**
  %28 = load %struct.rtx_def*, %struct.rtx_def** %rtx48, align 8
  %29 = bitcast %struct.rtx_def* %28 to i32*
  %bf.load49 = load i32, i32* %29, align 8
  %bf.clear50 = and i32 %bf.load49, 65535
  %cmp51 = icmp eq i32 %bf.clear50, 61
  br i1 %cmp51, label %land.lhs.true.53, label %if.end

land.lhs.true.53:                                 ; preds = %land.lhs.true.45
  %30 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld54 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %30, i32 0, i32 1
  %arrayidx55 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld54, i32 0, i64 1
  %rtx56 = bitcast %union.rtunion_def* %arrayidx55 to %struct.rtx_def**
  %31 = load %struct.rtx_def*, %struct.rtx_def** %rtx56, align 8
  %fld57 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1
  %arrayidx58 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld57, i32 0, i64 0
  %rtuint59 = bitcast %union.rtunion_def* %arrayidx58 to i32*
  %32 = load i32, i32* %rtuint59, align 4
  %33 = load i32, i32* %regno.addr, align 4
  %cmp60 = icmp eq i32 %32, %33
  br i1 %cmp60, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true.53
  br label %for.end

if.end:                                           ; preds = %land.lhs.true.53, %land.lhs.true.45, %land.lhs.true.36, %land.lhs.true.28, %cond.end.26, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %34 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %35 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %call62 = call %struct.rtx_def* @next_insn_in_loop(%struct.loop* %34, %struct.rtx_def* %35)
  store %struct.rtx_def* %call62, %struct.rtx_def** %insn, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then, %for.cond
  %36 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %cmp63 = icmp ne %struct.rtx_def* %36, null
  br i1 %cmp63, label %if.then.65, label %if.end.171

if.then.65:                                       ; preds = %for.end
  %37 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld66 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %37, i32 0, i32 1
  %arrayidx67 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld66, i32 0, i64 1
  %rtx68 = bitcast %union.rtunion_def* %arrayidx67 to %struct.rtx_def**
  %38 = load %struct.rtx_def*, %struct.rtx_def** %rtx68, align 8
  store %struct.rtx_def* %38, %struct.rtx_def** %prev_insn, align 8
  %39 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %40 = bitcast %struct.rtx_def* %39 to i32*
  %bf.load69 = load i32, i32* %40, align 8
  %bf.clear70 = and i32 %bf.load69, 65535
  %idxprom71 = sext i32 %bf.clear70 to i64
  %arrayidx72 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom71
  %41 = load i8, i8* %arrayidx72, align 1
  %conv73 = sext i8 %41 to i32
  %cmp74 = icmp eq i32 %conv73, 105
  br i1 %cmp74, label %land.lhs.true.76, label %if.end.170

land.lhs.true.76:                                 ; preds = %if.then.65
  %42 = load %struct.rtx_def*, %struct.rtx_def** %prev_insn, align 8
  %43 = bitcast %struct.rtx_def* %42 to i32*
  %bf.load77 = load i32, i32* %43, align 8
  %bf.clear78 = and i32 %bf.load77, 65535
  %idxprom79 = sext i32 %bf.clear78 to i64
  %arrayidx80 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom79
  %44 = load i8, i8* %arrayidx80, align 1
  %conv81 = sext i8 %44 to i32
  %cmp82 = icmp eq i32 %conv81, 105
  br i1 %cmp82, label %cond.true.84, label %cond.false.103

cond.true.84:                                     ; preds = %land.lhs.true.76
  %45 = load %struct.rtx_def*, %struct.rtx_def** %prev_insn, align 8
  %fld85 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %45, i32 0, i32 1
  %arrayidx86 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld85, i32 0, i64 3
  %rtx87 = bitcast %union.rtunion_def* %arrayidx86 to %struct.rtx_def**
  %46 = load %struct.rtx_def*, %struct.rtx_def** %rtx87, align 8
  %47 = bitcast %struct.rtx_def* %46 to i32*
  %bf.load88 = load i32, i32* %47, align 8
  %bf.clear89 = and i32 %bf.load88, 65535
  %cmp90 = icmp eq i32 %bf.clear89, 47
  br i1 %cmp90, label %cond.true.92, label %cond.false.96

cond.true.92:                                     ; preds = %cond.true.84
  %48 = load %struct.rtx_def*, %struct.rtx_def** %prev_insn, align 8
  %fld93 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %48, i32 0, i32 1
  %arrayidx94 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld93, i32 0, i64 3
  %rtx95 = bitcast %union.rtunion_def* %arrayidx94 to %struct.rtx_def**
  %49 = load %struct.rtx_def*, %struct.rtx_def** %rtx95, align 8
  br label %cond.end.101

cond.false.96:                                    ; preds = %cond.true.84
  %50 = load %struct.rtx_def*, %struct.rtx_def** %prev_insn, align 8
  %51 = load %struct.rtx_def*, %struct.rtx_def** %prev_insn, align 8
  %fld97 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %51, i32 0, i32 1
  %arrayidx98 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld97, i32 0, i64 3
  %rtx99 = bitcast %union.rtunion_def* %arrayidx98 to %struct.rtx_def**
  %52 = load %struct.rtx_def*, %struct.rtx_def** %rtx99, align 8
  %call100 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %50, %struct.rtx_def* %52)
  br label %cond.end.101

cond.end.101:                                     ; preds = %cond.false.96, %cond.true.92
  %cond102 = phi %struct.rtx_def* [ %49, %cond.true.92 ], [ %call100, %cond.false.96 ]
  br label %cond.end.104

cond.false.103:                                   ; preds = %land.lhs.true.76
  br label %cond.end.104

cond.end.104:                                     ; preds = %cond.false.103, %cond.end.101
  %cond105 = phi %struct.rtx_def* [ %cond102, %cond.end.101 ], [ null, %cond.false.103 ]
  store %struct.rtx_def* %cond105, %struct.rtx_def** %prev_set, align 8
  %tobool106 = icmp ne %struct.rtx_def* %cond105, null
  br i1 %tobool106, label %land.lhs.true.107, label %if.end.170

land.lhs.true.107:                                ; preds = %cond.end.104
  %53 = load %struct.rtx_def*, %struct.rtx_def** %prev_set, align 8
  %fld108 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %53, i32 0, i32 1
  %arrayidx109 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld108, i32 0, i64 0
  %rtx110 = bitcast %union.rtunion_def* %arrayidx109 to %struct.rtx_def**
  %54 = load %struct.rtx_def*, %struct.rtx_def** %rtx110, align 8
  %55 = bitcast %struct.rtx_def* %54 to i32*
  %bf.load111 = load i32, i32* %55, align 8
  %bf.clear112 = and i32 %bf.load111, 65535
  %cmp113 = icmp eq i32 %bf.clear112, 61
  br i1 %cmp113, label %land.lhs.true.115, label %if.end.170

land.lhs.true.115:                                ; preds = %land.lhs.true.107
  %56 = load %struct.rtx_def*, %struct.rtx_def** %prev_set, align 8
  %fld116 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %56, i32 0, i32 1
  %arrayidx117 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld116, i32 0, i64 0
  %rtx118 = bitcast %union.rtunion_def* %arrayidx117 to %struct.rtx_def**
  %57 = load %struct.rtx_def*, %struct.rtx_def** %rtx118, align 8
  %fld119 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %57, i32 0, i32 1
  %arrayidx120 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld119, i32 0, i64 0
  %rtuint121 = bitcast %union.rtunion_def* %arrayidx120 to i32*
  %58 = load i32, i32* %rtuint121, align 4
  %59 = load i32, i32* %regno.addr, align 4
  %cmp122 = icmp eq i32 %58, %59
  br i1 %cmp122, label %if.then.124, label %if.end.170

if.then.124:                                      ; preds = %land.lhs.true.115
  %60 = load %struct.rtx_def*, %struct.rtx_def** %prev_insn, align 8
  %61 = load %struct.rtx_def*, %struct.rtx_def** %prev_set, align 8
  %fld125 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %61, i32 0, i32 1
  %arrayidx126 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld125, i32 0, i64 0
  %rtx127 = bitcast %union.rtunion_def* %arrayidx126 to %struct.rtx_def**
  %62 = load %struct.rtx_def*, %struct.rtx_def** %replacement.addr, align 8
  %call128 = call i32 @validate_change(%struct.rtx_def* %60, %struct.rtx_def** %rtx127, %struct.rtx_def* %62, i32 1)
  %63 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %64 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld129 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %64, i32 0, i32 1
  %arrayidx130 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld129, i32 0, i64 0
  %rtx131 = bitcast %union.rtunion_def* %arrayidx130 to %struct.rtx_def**
  %65 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld132 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %65, i32 0, i32 1
  %arrayidx133 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld132, i32 0, i64 1
  %rtx134 = bitcast %union.rtunion_def* %arrayidx133 to %struct.rtx_def**
  %66 = load %struct.rtx_def*, %struct.rtx_def** %rtx134, align 8
  %call135 = call i32 @validate_change(%struct.rtx_def* %63, %struct.rtx_def** %rtx131, %struct.rtx_def* %66, i32 1)
  %67 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %68 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld136 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %68, i32 0, i32 1
  %arrayidx137 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld136, i32 0, i64 1
  %rtx138 = bitcast %union.rtunion_def* %arrayidx137 to %struct.rtx_def**
  %69 = load %struct.rtx_def*, %struct.rtx_def** %replacement.addr, align 8
  %call139 = call i32 @validate_change(%struct.rtx_def* %67, %struct.rtx_def** %rtx138, %struct.rtx_def* %69, i32 1)
  %call140 = call i32 @apply_change_group()
  %tobool141 = icmp ne i32 %call140, 0
  br i1 %tobool141, label %if.then.142, label %if.end.169

if.then.142:                                      ; preds = %if.then.124
  %70 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %tobool143 = icmp ne %struct._IO_FILE* %70, null
  br i1 %tobool143, label %if.then.144, label %if.end.151

if.then.144:                                      ; preds = %if.then.142
  %71 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %72 = load i32, i32* %regno.addr, align 4
  %73 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld145 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %73, i32 0, i32 1
  %arrayidx146 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld145, i32 0, i64 0
  %rtint = bitcast %union.rtunion_def* %arrayidx146 to i32*
  %74 = load i32, i32* %rtint, align 4
  %75 = load i32, i32* %new_regno, align 4
  %76 = load %struct.rtx_def*, %struct.rtx_def** %prev_insn, align 8
  %fld147 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %76, i32 0, i32 1
  %arrayidx148 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld147, i32 0, i64 0
  %rtint149 = bitcast %union.rtunion_def* %arrayidx148 to i32*
  %77 = load i32, i32* %rtint149, align 4
  %call150 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %71, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.25, i32 0, i32 0), i32 %72, i32 %74, i32 %75, i32 %77)
  br label %if.end.151

if.end.151:                                       ; preds = %if.then.144, %if.then.142
  %78 = load i32, i32* %regno.addr, align 4
  %idxprom152 = zext i32 %78 to i64
  %79 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %data = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %79, i32 0, i32 4
  %reg = bitcast %union.varray_data_tag* %data to [1 x %struct.reg_info_def*]*
  %arrayidx153 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %reg, i32 0, i64 %idxprom152
  %80 = load %struct.reg_info_def*, %struct.reg_info_def** %arrayidx153, align 8
  %first_uid = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %80, i32 0, i32 0
  %81 = load i32, i32* %first_uid, align 4
  %82 = load %struct.rtx_def*, %struct.rtx_def** %prev_insn, align 8
  %fld154 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %82, i32 0, i32 1
  %arrayidx155 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld154, i32 0, i64 0
  %rtint156 = bitcast %union.rtunion_def* %arrayidx155 to i32*
  %83 = load i32, i32* %rtint156, align 4
  %cmp157 = icmp eq i32 %81, %83
  br i1 %cmp157, label %if.then.159, label %if.end.168

if.then.159:                                      ; preds = %if.end.151
  %84 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld160 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %84, i32 0, i32 1
  %arrayidx161 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld160, i32 0, i64 0
  %rtint162 = bitcast %union.rtunion_def* %arrayidx161 to i32*
  %85 = load i32, i32* %rtint162, align 4
  %86 = load i32, i32* %regno.addr, align 4
  %idxprom163 = zext i32 %86 to i64
  %87 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %data164 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %87, i32 0, i32 4
  %reg165 = bitcast %union.varray_data_tag* %data164 to [1 x %struct.reg_info_def*]*
  %arrayidx166 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %reg165, i32 0, i64 %idxprom163
  %88 = load %struct.reg_info_def*, %struct.reg_info_def** %arrayidx166, align 8
  %first_uid167 = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %88, i32 0, i32 0
  store i32 %85, i32* %first_uid167, align 4
  br label %if.end.168

if.end.168:                                       ; preds = %if.then.159, %if.end.151
  %89 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %90 = load %struct.rtx_def*, %struct.rtx_def** %replacement.addr, align 8
  %91 = load i32, i32* %regno.addr, align 4
  call void @try_copy_prop(%struct.loop* %89, %struct.rtx_def* %90, i32 %91)
  br label %if.end.169

if.end.169:                                       ; preds = %if.end.168, %if.then.124
  br label %if.end.170

if.end.170:                                       ; preds = %if.end.169, %land.lhs.true.115, %land.lhs.true.107, %cond.end.104, %if.then.65
  br label %if.end.171

if.end.171:                                       ; preds = %if.end.170, %for.end
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @replace_label(%struct.rtx_def** %x, i8* %data) #0 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca %struct.rtx_def**, align 8
  %data.addr = alloca i8*, align 8
  %l = alloca %struct.rtx_def*, align 8
  %old_label = alloca %struct.rtx_def*, align 8
  %new_label = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %x, %struct.rtx_def*** %x.addr, align 8
  store i8* %data, i8** %data.addr, align 8
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %x.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %0, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %l, align 8
  %2 = load i8*, i8** %data.addr, align 8
  %3 = bitcast i8* %2 to %struct.rtx_pair*
  %r1 = getelementptr inbounds %struct.rtx_pair, %struct.rtx_pair* %3, i32 0, i32 0
  %4 = load %struct.rtx_def*, %struct.rtx_def** %r1, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %old_label, align 8
  %5 = load i8*, i8** %data.addr, align 8
  %6 = bitcast i8* %5 to %struct.rtx_pair*
  %r2 = getelementptr inbounds %struct.rtx_pair, %struct.rtx_pair* %6, i32 0, i32 1
  %7 = load %struct.rtx_def*, %struct.rtx_def** %r2, align 8
  store %struct.rtx_def* %7, %struct.rtx_def** %new_label, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %l, align 8
  %cmp = icmp eq %struct.rtx_def* %8, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %9 = load %struct.rtx_def*, %struct.rtx_def** %l, align 8
  %10 = bitcast %struct.rtx_def* %9 to i32*
  %bf.load = load i32, i32* %10, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp1 = icmp ne i32 %bf.clear, 67
  br i1 %cmp1, label %if.then.2, label %if.end.3

if.then.2:                                        ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

if.end.3:                                         ; preds = %if.end
  %11 = load %struct.rtx_def*, %struct.rtx_def** %l, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %13 = load %struct.rtx_def*, %struct.rtx_def** %old_label, align 8
  %cmp4 = icmp ne %struct.rtx_def* %12, %13
  br i1 %cmp4, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %if.end.3
  store i32 0, i32* %retval
  br label %return

if.end.6:                                         ; preds = %if.end.3
  %14 = load %struct.rtx_def*, %struct.rtx_def** %new_label, align 8
  %15 = load %struct.rtx_def*, %struct.rtx_def** %l, align 8
  %fld7 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1
  %arrayidx8 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld7, i32 0, i64 0
  %rtx9 = bitcast %union.rtunion_def* %arrayidx8 to %struct.rtx_def**
  store %struct.rtx_def* %14, %struct.rtx_def** %rtx9, align 8
  %16 = load %struct.rtx_def*, %struct.rtx_def** %new_label, align 8
  %fld10 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1
  %arrayidx11 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld10, i32 0, i64 3
  %rtint = bitcast %union.rtunion_def* %arrayidx11 to i32*
  %17 = load i32, i32* %rtint, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %rtint, align 4
  %18 = load %struct.rtx_def*, %struct.rtx_def** %old_label, align 8
  %fld12 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1
  %arrayidx13 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld12, i32 0, i64 3
  %rtint14 = bitcast %union.rtunion_def* %arrayidx13 to i32*
  %19 = load i32, i32* %rtint14, align 4
  %dec = add nsw i32 %19, -1
  store i32 %dec, i32* %rtint14, align 4
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.6, %if.then.5, %if.then.2, %if.then
  %20 = load i32, i32* %retval
  ret i32 %20
}

declare void @cselib_finish() #1

; Function Attrs: nounwind uwtable
define internal i32 @replace_loop_mem(%struct.rtx_def** %mem, i8* %data) #0 {
entry:
  %retval = alloca i32, align 4
  %mem.addr = alloca %struct.rtx_def**, align 8
  %data.addr = alloca i8*, align 8
  %args = alloca %struct.loop_replace_args*, align 8
  %m = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %mem, %struct.rtx_def*** %mem.addr, align 8
  store i8* %data, i8** %data.addr, align 8
  %0 = load i8*, i8** %data.addr, align 8
  %1 = bitcast i8* %0 to %struct.loop_replace_args*
  store %struct.loop_replace_args* %1, %struct.loop_replace_args** %args, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %mem.addr, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %2, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %m, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %m, align 8
  %cmp = icmp eq %struct.rtx_def* %4, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %5 = load %struct.rtx_def*, %struct.rtx_def** %m, align 8
  %6 = bitcast %struct.rtx_def* %5 to i32*
  %bf.load = load i32, i32* %6, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %sw.default [
    i32 66, label %sw.bb
    i32 55, label %sw.bb.1
  ]

sw.bb:                                            ; preds = %if.end
  br label %sw.epilog

sw.bb.1:                                          ; preds = %if.end
  store i32 -1, i32* %retval
  br label %return

sw.default:                                       ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %sw.bb
  %7 = load %struct.loop_replace_args*, %struct.loop_replace_args** %args, align 8
  %match = getelementptr inbounds %struct.loop_replace_args, %struct.loop_replace_args* %7, i32 0, i32 0
  %8 = load %struct.rtx_def*, %struct.rtx_def** %match, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %m, align 8
  %call = call i32 @rtx_equal_p(%struct.rtx_def* %8, %struct.rtx_def* %9)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end.3, label %if.then.2

if.then.2:                                        ; preds = %sw.epilog
  store i32 0, i32* %retval
  br label %return

if.end.3:                                         ; preds = %sw.epilog
  %10 = load %struct.loop_replace_args*, %struct.loop_replace_args** %args, align 8
  %insn = getelementptr inbounds %struct.loop_replace_args, %struct.loop_replace_args* %10, i32 0, i32 2
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %12 = load %struct.rtx_def**, %struct.rtx_def*** %mem.addr, align 8
  %13 = load %struct.loop_replace_args*, %struct.loop_replace_args** %args, align 8
  %replacement = getelementptr inbounds %struct.loop_replace_args, %struct.loop_replace_args* %13, i32 0, i32 1
  %14 = load %struct.rtx_def*, %struct.rtx_def** %replacement, align 8
  %call4 = call i32 @validate_change(%struct.rtx_def* %11, %struct.rtx_def** %12, %struct.rtx_def* %14, i32 1)
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.3, %if.then.2, %sw.default, %sw.bb.1, %if.then
  %15 = load i32, i32* %retval
  ret i32 %15
}

declare i32 @validate_change(%struct.rtx_def*, %struct.rtx_def**, %struct.rtx_def*, i32) #1

; Function Attrs: nounwind uwtable
define internal void @replace_loop_regs(%struct.rtx_def* %insn, %struct.rtx_def* %reg, %struct.rtx_def* %replacement) #0 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %reg.addr = alloca %struct.rtx_def*, align 8
  %replacement.addr = alloca %struct.rtx_def*, align 8
  %args = alloca %struct.loop_replace_args, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  store %struct.rtx_def* %reg, %struct.rtx_def** %reg.addr, align 8
  store %struct.rtx_def* %replacement, %struct.rtx_def** %replacement.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %insn1 = getelementptr inbounds %struct.loop_replace_args, %struct.loop_replace_args* %args, i32 0, i32 2
  store %struct.rtx_def* %0, %struct.rtx_def** %insn1, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %match = getelementptr inbounds %struct.loop_replace_args, %struct.loop_replace_args* %args, i32 0, i32 0
  store %struct.rtx_def* %1, %struct.rtx_def** %match, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %replacement.addr, align 8
  %replacement2 = getelementptr inbounds %struct.loop_replace_args, %struct.loop_replace_args* %args, i32 0, i32 1
  store %struct.rtx_def* %2, %struct.rtx_def** %replacement2, align 8
  %3 = bitcast %struct.loop_replace_args* %args to i8*
  %call = call i32 @for_each_rtx(%struct.rtx_def** %insn.addr, i32 (%struct.rtx_def**, i8*)* @replace_loop_reg, i8* %3)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @note_reg_stored(%struct.rtx_def* %x, %struct.rtx_def* %setter, i8* %arg) #0 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  %setter.addr = alloca %struct.rtx_def*, align 8
  %arg.addr = alloca i8*, align 8
  %t = alloca %struct.note_reg_stored_arg*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  store %struct.rtx_def* %setter, %struct.rtx_def** %setter.addr, align 8
  store i8* %arg, i8** %arg.addr, align 8
  %0 = load i8*, i8** %arg.addr, align 8
  %1 = bitcast i8* %0 to %struct.note_reg_stored_arg*
  store %struct.note_reg_stored_arg* %1, %struct.note_reg_stored_arg** %t, align 8
  %2 = load %struct.note_reg_stored_arg*, %struct.note_reg_stored_arg** %t, align 8
  %reg = getelementptr inbounds %struct.note_reg_stored_arg, %struct.note_reg_stored_arg* %2, i32 0, i32 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %cmp = icmp eq %struct.rtx_def* %3, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.note_reg_stored_arg*, %struct.note_reg_stored_arg** %t, align 8
  %set_seen = getelementptr inbounds %struct.note_reg_stored_arg, %struct.note_reg_stored_arg* %5, i32 0, i32 0
  store i32 1, i32* %set_seen, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @loop_delete_insns(%struct.rtx_def* %first, %struct.rtx_def* %last) #0 {
entry:
  %first.addr = alloca %struct.rtx_def*, align 8
  %last.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %first, %struct.rtx_def** %first.addr, align 8
  store %struct.rtx_def* %last, %struct.rtx_def** %last.addr, align 8
  br label %while.body

while.body:                                       ; preds = %entry, %if.end.3
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %tobool = icmp ne %struct._IO_FILE* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %first.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtint = bitcast %union.rtunion_def* %arrayidx to i32*
  %3 = load i32, i32* %rtint, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.24, i32 0, i32 0), i32 %3)
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %4 = load %struct.rtx_def*, %struct.rtx_def** %first.addr, align 8
  %call1 = call %struct.rtx_def* @delete_insn(%struct.rtx_def* %4)
  %5 = load %struct.rtx_def*, %struct.rtx_def** %first.addr, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %last.addr, align 8
  %cmp = icmp eq %struct.rtx_def* %5, %6
  br i1 %cmp, label %if.then.2, label %if.end.3

if.then.2:                                        ; preds = %if.end
  br label %while.end

if.end.3:                                         ; preds = %if.end
  %7 = load %struct.rtx_def*, %struct.rtx_def** %first.addr, align 8
  %fld4 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1
  %arrayidx5 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld4, i32 0, i64 2
  %rtx = bitcast %union.rtunion_def* %arrayidx5 to %struct.rtx_def**
  %8 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %first.addr, align 8
  br label %while.body

while.end:                                        ; preds = %if.then.2
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @replace_loop_reg(%struct.rtx_def** %px, i8* %data) #0 {
entry:
  %retval = alloca i32, align 4
  %px.addr = alloca %struct.rtx_def**, align 8
  %data.addr = alloca i8*, align 8
  %x = alloca %struct.rtx_def*, align 8
  %args = alloca %struct.loop_replace_args*, align 8
  store %struct.rtx_def** %px, %struct.rtx_def*** %px.addr, align 8
  store i8* %data, i8** %data.addr, align 8
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %px.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %0, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %x, align 8
  %2 = load i8*, i8** %data.addr, align 8
  %3 = bitcast i8* %2 to %struct.loop_replace_args*
  store %struct.loop_replace_args* %3, %struct.loop_replace_args** %args, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %cmp = icmp eq %struct.rtx_def* %4, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %5 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %6 = load %struct.loop_replace_args*, %struct.loop_replace_args** %args, align 8
  %match = getelementptr inbounds %struct.loop_replace_args, %struct.loop_replace_args* %6, i32 0, i32 0
  %7 = load %struct.rtx_def*, %struct.rtx_def** %match, align 8
  %cmp1 = icmp eq %struct.rtx_def* %5, %7
  br i1 %cmp1, label %if.then.2, label %if.end.3

if.then.2:                                        ; preds = %if.end
  %8 = load %struct.loop_replace_args*, %struct.loop_replace_args** %args, align 8
  %insn = getelementptr inbounds %struct.loop_replace_args, %struct.loop_replace_args* %8, i32 0, i32 2
  %9 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %10 = load %struct.rtx_def**, %struct.rtx_def*** %px.addr, align 8
  %11 = load %struct.loop_replace_args*, %struct.loop_replace_args** %args, align 8
  %replacement = getelementptr inbounds %struct.loop_replace_args, %struct.loop_replace_args* %11, i32 0, i32 1
  %12 = load %struct.rtx_def*, %struct.rtx_def** %replacement, align 8
  %call = call i32 @validate_change(%struct.rtx_def* %9, %struct.rtx_def** %10, %struct.rtx_def* %12, i32 1)
  br label %if.end.3

if.end.3:                                         ; preds = %if.then.2, %if.end
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.3, %if.then
  %13 = load i32, i32* %retval
  ret i32 %13
}

; Function Attrs: nounwind uwtable
define internal void @loop_bivs_find(%struct.loop* %loop) #0 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %regs = alloca %struct.loop_regs*, align 8
  %ivs = alloca %struct.loop_ivs*, align 8
  %bl = alloca %struct.iv_class*, align 8
  %backbl = alloca %struct.iv_class**, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %aux = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 22
  %1 = load i8*, i8** %aux, align 8
  %2 = bitcast i8* %1 to %struct.loop_info*
  %regs1 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %2, i32 0, i32 28
  store %struct.loop_regs* %regs1, %struct.loop_regs** %regs, align 8
  %3 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %aux2 = getelementptr inbounds %struct.loop, %struct.loop* %3, i32 0, i32 22
  %4 = load i8*, i8** %aux2, align 8
  %5 = bitcast i8* %4 to %struct.loop_info*
  %ivs3 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %5, i32 0, i32 29
  store %struct.loop_ivs* %ivs3, %struct.loop_ivs** %ivs, align 8
  %6 = load %struct.loop_ivs*, %struct.loop_ivs** %ivs, align 8
  %list = getelementptr inbounds %struct.loop_ivs, %struct.loop_ivs* %6, i32 0, i32 2
  store %struct.iv_class* null, %struct.iv_class** %list, align 8
  %7 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  call void @for_each_insn_in_loop(%struct.loop* %7, %struct.rtx_def* (%struct.loop*, %struct.rtx_def*, i32, i32)* @check_insn_for_bivs)
  %8 = load %struct.loop_ivs*, %struct.loop_ivs** %ivs, align 8
  %list4 = getelementptr inbounds %struct.loop_ivs, %struct.loop_ivs* %8, i32 0, i32 2
  store %struct.iv_class** %list4, %struct.iv_class*** %backbl, align 8
  %9 = load %struct.iv_class**, %struct.iv_class*** %backbl, align 8
  %10 = load %struct.iv_class*, %struct.iv_class** %9, align 8
  store %struct.iv_class* %10, %struct.iv_class** %bl, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %11 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %tobool = icmp ne %struct.iv_class* %11, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %regno = getelementptr inbounds %struct.iv_class, %struct.iv_class* %12, i32 0, i32 0
  %13 = load i32, i32* %regno, align 4
  %idxprom = zext i32 %13 to i64
  %14 = load %struct.loop_ivs*, %struct.loop_ivs** %ivs, align 8
  %regs5 = getelementptr inbounds %struct.loop_ivs, %struct.loop_ivs* %14, i32 0, i32 0
  %15 = load %struct.iv*, %struct.iv** %regs5, align 8
  %arrayidx = getelementptr inbounds %struct.iv, %struct.iv* %15, i64 %idxprom
  %type = getelementptr inbounds %struct.iv, %struct.iv* %arrayidx, i32 0, i32 0
  %16 = load i32, i32* %type, align 4
  %cmp = icmp ne i32 %16, 1
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body
  %17 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %regno6 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %17, i32 0, i32 0
  %18 = load i32, i32* %regno6, align 4
  %idxprom7 = zext i32 %18 to i64
  %19 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %array = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %19, i32 0, i32 2
  %20 = load %struct.loop_reg*, %struct.loop_reg** %array, align 8
  %arrayidx8 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %20, i64 %idxprom7
  %n_times_set = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %arrayidx8, i32 0, i32 1
  %21 = load i32, i32* %n_times_set, align 4
  %22 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %biv_count = getelementptr inbounds %struct.iv_class, %struct.iv_class* %22, i32 0, i32 1
  %23 = load i32, i32* %biv_count, align 4
  %cmp9 = icmp ne i32 %21, %23
  br i1 %cmp9, label %if.then, label %lor.lhs.false.10

lor.lhs.false.10:                                 ; preds = %lor.lhs.false
  %24 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %incremented = getelementptr inbounds %struct.iv_class, %struct.iv_class* %24, i32 0, i32 12
  %bf.load = load i8, i8* %incremented, align 8
  %bf.clear = and i8 %bf.load, 1
  %bf.cast = zext i8 %bf.clear to i32
  %tobool11 = icmp ne i32 %bf.cast, 0
  br i1 %tobool11, label %if.else, label %if.then

if.then:                                          ; preds = %lor.lhs.false.10, %lor.lhs.false, %for.body
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %tobool12 = icmp ne %struct._IO_FILE* %25, null
  br i1 %tobool12, label %if.then.13, label %if.end

if.then.13:                                       ; preds = %if.then
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %27 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %regno14 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %27, i32 0, i32 0
  %28 = load i32, i32* %regno14, align 4
  %29 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %regno15 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %29, i32 0, i32 0
  %30 = load i32, i32* %regno15, align 4
  %idxprom16 = zext i32 %30 to i64
  %31 = load %struct.loop_ivs*, %struct.loop_ivs** %ivs, align 8
  %regs17 = getelementptr inbounds %struct.loop_ivs, %struct.loop_ivs* %31, i32 0, i32 0
  %32 = load %struct.iv*, %struct.iv** %regs17, align 8
  %arrayidx18 = getelementptr inbounds %struct.iv, %struct.iv* %32, i64 %idxprom16
  %type19 = getelementptr inbounds %struct.iv, %struct.iv* %arrayidx18, i32 0, i32 0
  %33 = load i32, i32* %type19, align 4
  %cmp20 = icmp ne i32 %33, 1
  br i1 %cmp20, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.13
  br label %cond.end

cond.false:                                       ; preds = %if.then.13
  %34 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %incremented21 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %34, i32 0, i32 12
  %bf.load22 = load i8, i8* %incremented21, align 8
  %bf.clear23 = and i8 %bf.load22, 1
  %bf.cast24 = zext i8 %bf.clear23 to i32
  %tobool25 = icmp ne i32 %bf.cast24, 0
  %lnot = xor i1 %tobool25, true
  %cond = select i1 %lnot, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.31, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.32, i32 0, i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond26 = phi i8* [ getelementptr inbounds ([23 x i8], [23 x i8]* @.str.30, i32 0, i32 0), %cond.true ], [ %cond, %cond.false ]
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %26, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.29, i32 0, i32 0), i32 %28, i8* %cond26)
  br label %if.end

if.end:                                           ; preds = %cond.end, %if.then
  %35 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %regno27 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %35, i32 0, i32 0
  %36 = load i32, i32* %regno27, align 4
  %idxprom28 = zext i32 %36 to i64
  %37 = load %struct.loop_ivs*, %struct.loop_ivs** %ivs, align 8
  %regs29 = getelementptr inbounds %struct.loop_ivs, %struct.loop_ivs* %37, i32 0, i32 0
  %38 = load %struct.iv*, %struct.iv** %regs29, align 8
  %arrayidx30 = getelementptr inbounds %struct.iv, %struct.iv* %38, i64 %idxprom28
  %type31 = getelementptr inbounds %struct.iv, %struct.iv* %arrayidx30, i32 0, i32 0
  store i32 2, i32* %type31, align 4
  %39 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %next = getelementptr inbounds %struct.iv_class, %struct.iv_class* %39, i32 0, i32 9
  %40 = load %struct.iv_class*, %struct.iv_class** %next, align 8
  %41 = load %struct.iv_class**, %struct.iv_class*** %backbl, align 8
  store %struct.iv_class* %40, %struct.iv_class** %41, align 8
  br label %if.end.38

if.else:                                          ; preds = %lor.lhs.false.10
  %42 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %next32 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %42, i32 0, i32 9
  store %struct.iv_class** %next32, %struct.iv_class*** %backbl, align 8
  %43 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %tobool33 = icmp ne %struct._IO_FILE* %43, null
  br i1 %tobool33, label %if.then.34, label %if.end.37

if.then.34:                                       ; preds = %if.else
  %44 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %45 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %regno35 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %45, i32 0, i32 0
  %46 = load i32, i32* %regno35, align 4
  %call36 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %44, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.33, i32 0, i32 0), i32 %46)
  br label %if.end.37

if.end.37:                                        ; preds = %if.then.34, %if.else
  br label %if.end.38

if.end.38:                                        ; preds = %if.end.37, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end.38
  %47 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %next39 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %47, i32 0, i32 9
  %48 = load %struct.iv_class*, %struct.iv_class** %next39, align 8
  store %struct.iv_class* %48, %struct.iv_class** %bl, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare void @unroll_loop(%struct.loop*, i32, i32) #1

; Function Attrs: nounwind uwtable
define internal void @loop_ivs_free(%struct.loop* %loop) #0 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %ivs = alloca %struct.loop_ivs*, align 8
  %iv = alloca %struct.iv_class*, align 8
  %next = alloca %struct.iv_class*, align 8
  %induction = alloca %struct.induction*, align 8
  %next_induction = alloca %struct.induction*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %aux = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 22
  %1 = load i8*, i8** %aux, align 8
  %2 = bitcast i8* %1 to %struct.loop_info*
  %ivs1 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %2, i32 0, i32 29
  store %struct.loop_ivs* %ivs1, %struct.loop_ivs** %ivs, align 8
  %3 = load %struct.loop_ivs*, %struct.loop_ivs** %ivs, align 8
  %list = getelementptr inbounds %struct.loop_ivs, %struct.loop_ivs* %3, i32 0, i32 2
  %4 = load %struct.iv_class*, %struct.iv_class** %list, align 8
  store %struct.iv_class* %4, %struct.iv_class** %iv, align 8
  %5 = load %struct.loop_ivs*, %struct.loop_ivs** %ivs, align 8
  %regs = getelementptr inbounds %struct.loop_ivs, %struct.loop_ivs* %5, i32 0, i32 0
  %6 = load %struct.iv*, %struct.iv** %regs, align 8
  %7 = bitcast %struct.iv* %6 to i8*
  call void @free(i8* %7) #4
  br label %while.cond

while.cond:                                       ; preds = %for.end.9, %entry
  %8 = load %struct.iv_class*, %struct.iv_class** %iv, align 8
  %tobool = icmp ne %struct.iv_class* %8, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %9 = load %struct.iv_class*, %struct.iv_class** %iv, align 8
  %next2 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %9, i32 0, i32 9
  %10 = load %struct.iv_class*, %struct.iv_class** %next2, align 8
  store %struct.iv_class* %10, %struct.iv_class** %next, align 8
  %11 = load %struct.iv_class*, %struct.iv_class** %iv, align 8
  %biv = getelementptr inbounds %struct.iv_class, %struct.iv_class* %11, i32 0, i32 2
  %12 = load %struct.induction*, %struct.induction** %biv, align 8
  store %struct.induction* %12, %struct.induction** %induction, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.body
  %13 = load %struct.induction*, %struct.induction** %induction, align 8
  %tobool3 = icmp ne %struct.induction* %13, null
  br i1 %tobool3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %14 = load %struct.induction*, %struct.induction** %induction, align 8
  %next_iv = getelementptr inbounds %struct.induction, %struct.induction* %14, i32 0, i32 17
  %15 = load %struct.induction*, %struct.induction** %next_iv, align 8
  store %struct.induction* %15, %struct.induction** %next_induction, align 8
  %16 = load %struct.induction*, %struct.induction** %induction, align 8
  %17 = bitcast %struct.induction* %16 to i8*
  call void @free(i8* %17) #4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %18 = load %struct.induction*, %struct.induction** %next_induction, align 8
  store %struct.induction* %18, %struct.induction** %induction, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %19 = load %struct.iv_class*, %struct.iv_class** %iv, align 8
  %giv = getelementptr inbounds %struct.iv_class, %struct.iv_class* %19, i32 0, i32 4
  %20 = load %struct.induction*, %struct.induction** %giv, align 8
  store %struct.induction* %20, %struct.induction** %induction, align 8
  br label %for.cond.4

for.cond.4:                                       ; preds = %for.inc.8, %for.end
  %21 = load %struct.induction*, %struct.induction** %induction, align 8
  %tobool5 = icmp ne %struct.induction* %21, null
  br i1 %tobool5, label %for.body.6, label %for.end.9

for.body.6:                                       ; preds = %for.cond.4
  %22 = load %struct.induction*, %struct.induction** %induction, align 8
  %next_iv7 = getelementptr inbounds %struct.induction, %struct.induction* %22, i32 0, i32 17
  %23 = load %struct.induction*, %struct.induction** %next_iv7, align 8
  store %struct.induction* %23, %struct.induction** %next_induction, align 8
  %24 = load %struct.induction*, %struct.induction** %induction, align 8
  %25 = bitcast %struct.induction* %24 to i8*
  call void @free(i8* %25) #4
  br label %for.inc.8

for.inc.8:                                        ; preds = %for.body.6
  %26 = load %struct.induction*, %struct.induction** %next_induction, align 8
  store %struct.induction* %26, %struct.induction** %induction, align 8
  br label %for.cond.4

for.end.9:                                        ; preds = %for.cond.4
  %27 = load %struct.iv_class*, %struct.iv_class** %iv, align 8
  %28 = bitcast %struct.iv_class* %27 to i8*
  call void @free(i8* %28) #4
  %29 = load %struct.iv_class*, %struct.iv_class** %next, align 8
  store %struct.iv_class* %29, %struct.iv_class** %iv, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @loop_bivs_init_find(%struct.loop* %loop) #0 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %ivs = alloca %struct.loop_ivs*, align 8
  %bl = alloca %struct.iv_class*, align 8
  %call_seen = alloca i32, align 4
  %p = alloca %struct.rtx_def*, align 8
  %test = alloca %struct.rtx_def*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %aux = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 22
  %1 = load i8*, i8** %aux, align 8
  %2 = bitcast i8* %1 to %struct.loop_info*
  %ivs1 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %2, i32 0, i32 29
  store %struct.loop_ivs* %ivs1, %struct.loop_ivs** %ivs, align 8
  store i32 0, i32* %call_seen, align 4
  %3 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %start = getelementptr inbounds %struct.loop, %struct.loop* %3, i32 0, i32 26
  %4 = load %struct.rtx_def*, %struct.rtx_def** %start, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %p, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %tobool = icmp ne %struct.rtx_def* %5, null
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %6 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %7 = bitcast %struct.rtx_def* %6 to i32*
  %bf.load = load i32, i32* %7, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp ne i32 %bf.clear, 36
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %8 = phi i1 [ false, %for.cond ], [ %cmp, %land.rhs ]
  br i1 %8, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %9 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  store %struct.rtx_def* %9, %struct.rtx_def** @note_insn, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %11 = bitcast %struct.rtx_def* %10 to i32*
  %bf.load2 = load i32, i32* %11, align 8
  %bf.clear3 = and i32 %bf.load2, 65535
  %cmp4 = icmp eq i32 %bf.clear3, 34
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i32 1, i32* %call_seen, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %12 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %13 = bitcast %struct.rtx_def* %12 to i32*
  %bf.load5 = load i32, i32* %13, align 8
  %bf.clear6 = and i32 %bf.load5, 65535
  %idxprom = sext i32 %bf.clear6 to i64
  %arrayidx = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom
  %14 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %14 to i32
  %cmp7 = icmp eq i32 %conv, 105
  br i1 %cmp7, label %if.then.9, label %if.end.11

if.then.9:                                        ; preds = %if.end
  %15 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1
  %arrayidx10 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx10 to %struct.rtx_def**
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %17 = load %struct.loop_ivs*, %struct.loop_ivs** %ivs, align 8
  %18 = bitcast %struct.loop_ivs* %17 to i8*
  call void @note_stores(%struct.rtx_def* %16, void (%struct.rtx_def*, %struct.rtx_def*, i8*)* @record_initial, i8* %18)
  br label %if.end.11

if.end.11:                                        ; preds = %if.then.9, %if.end
  %19 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %20 = bitcast %struct.rtx_def* %19 to i32*
  %bf.load12 = load i32, i32* %20, align 8
  %bf.clear13 = and i32 %bf.load12, 65535
  %cmp14 = icmp eq i32 %bf.clear13, 33
  br i1 %cmp14, label %land.lhs.true, label %if.end.84

land.lhs.true:                                    ; preds = %if.end.11
  %21 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld16 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1
  %arrayidx17 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld16, i32 0, i64 7
  %rtx18 = bitcast %union.rtunion_def* %arrayidx17 to %struct.rtx_def**
  %22 = load %struct.rtx_def*, %struct.rtx_def** %rtx18, align 8
  %cmp19 = icmp ne %struct.rtx_def* %22, null
  br i1 %cmp19, label %land.lhs.true.21, label %if.end.84

land.lhs.true.21:                                 ; preds = %land.lhs.true
  %23 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld22 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1
  %arrayidx23 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld22, i32 0, i64 7
  %rtx24 = bitcast %union.rtunion_def* %arrayidx23 to %struct.rtx_def**
  %24 = load %struct.rtx_def*, %struct.rtx_def** %rtx24, align 8
  %call = call %struct.rtx_def* @next_real_insn(%struct.rtx_def* %24)
  %25 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %end = getelementptr inbounds %struct.loop, %struct.loop* %25, i32 0, i32 27
  %26 = load %struct.rtx_def*, %struct.rtx_def** %end, align 8
  %call25 = call %struct.rtx_def* @next_real_insn(%struct.rtx_def* %26)
  %cmp26 = icmp eq %struct.rtx_def* %call, %call25
  br i1 %cmp26, label %land.lhs.true.28, label %if.end.84

land.lhs.true.28:                                 ; preds = %land.lhs.true.21
  %27 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %28 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %call29 = call %struct.rtx_def* @get_condition_for_loop(%struct.loop* %27, %struct.rtx_def* %28)
  store %struct.rtx_def* %call29, %struct.rtx_def** %test, align 8
  %cmp30 = icmp ne %struct.rtx_def* %call29, null
  br i1 %cmp30, label %land.lhs.true.32, label %if.end.84

land.lhs.true.32:                                 ; preds = %land.lhs.true.28
  %29 = load %struct.rtx_def*, %struct.rtx_def** %test, align 8
  %fld33 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %29, i32 0, i32 1
  %arrayidx34 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld33, i32 0, i64 0
  %rtx35 = bitcast %union.rtunion_def* %arrayidx34 to %struct.rtx_def**
  %30 = load %struct.rtx_def*, %struct.rtx_def** %rtx35, align 8
  %31 = bitcast %struct.rtx_def* %30 to i32*
  %bf.load36 = load i32, i32* %31, align 8
  %bf.clear37 = and i32 %bf.load36, 65535
  %cmp38 = icmp eq i32 %bf.clear37, 61
  br i1 %cmp38, label %land.lhs.true.40, label %if.end.84

land.lhs.true.40:                                 ; preds = %land.lhs.true.32
  %32 = load %struct.rtx_def*, %struct.rtx_def** %test, align 8
  %fld41 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %32, i32 0, i32 1
  %arrayidx42 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld41, i32 0, i64 0
  %rtx43 = bitcast %union.rtunion_def* %arrayidx42 to %struct.rtx_def**
  %33 = load %struct.rtx_def*, %struct.rtx_def** %rtx43, align 8
  %fld44 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1
  %arrayidx45 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld44, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx45 to i32*
  %34 = load i32, i32* %rtuint, align 4
  %35 = load i32, i32* @max_reg_before_loop, align 4
  %cmp46 = icmp ult i32 %34, %35
  br i1 %cmp46, label %land.lhs.true.48, label %if.end.84

land.lhs.true.48:                                 ; preds = %land.lhs.true.40
  %36 = load %struct.rtx_def*, %struct.rtx_def** %test, align 8
  %fld49 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %36, i32 0, i32 1
  %arrayidx50 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld49, i32 0, i64 0
  %rtx51 = bitcast %union.rtunion_def* %arrayidx50 to %struct.rtx_def**
  %37 = load %struct.rtx_def*, %struct.rtx_def** %rtx51, align 8
  %fld52 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %37, i32 0, i32 1
  %arrayidx53 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld52, i32 0, i64 0
  %rtuint54 = bitcast %union.rtunion_def* %arrayidx53 to i32*
  %38 = load i32, i32* %rtuint54, align 4
  %idxprom55 = zext i32 %38 to i64
  %39 = load %struct.loop_ivs*, %struct.loop_ivs** %ivs, align 8
  %regs = getelementptr inbounds %struct.loop_ivs, %struct.loop_ivs* %39, i32 0, i32 0
  %40 = load %struct.iv*, %struct.iv** %regs, align 8
  %arrayidx56 = getelementptr inbounds %struct.iv, %struct.iv* %40, i64 %idxprom55
  %iv = getelementptr inbounds %struct.iv, %struct.iv* %arrayidx56, i32 0, i32 1
  %class = bitcast %union.anon.0* %iv to %struct.iv_class**
  %41 = load %struct.iv_class*, %struct.iv_class** %class, align 8
  store %struct.iv_class* %41, %struct.iv_class** %bl, align 8
  %cmp57 = icmp ne %struct.iv_class* %41, null
  br i1 %cmp57, label %land.lhs.true.59, label %if.end.84

land.lhs.true.59:                                 ; preds = %land.lhs.true.48
  %42 = load %struct.rtx_def*, %struct.rtx_def** %test, align 8
  %fld60 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %42, i32 0, i32 1
  %arrayidx61 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld60, i32 0, i64 1
  %rtx62 = bitcast %union.rtunion_def* %arrayidx61 to %struct.rtx_def**
  %43 = load %struct.rtx_def*, %struct.rtx_def** %rtx62, align 8
  %44 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %45 = load i32, i32* %call_seen, align 4
  %46 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %start63 = getelementptr inbounds %struct.loop, %struct.loop* %46, i32 0, i32 26
  %47 = load %struct.rtx_def*, %struct.rtx_def** %start63, align 8
  %call64 = call i32 @valid_initial_value_p(%struct.rtx_def* %43, %struct.rtx_def* %44, i32 %45, %struct.rtx_def* %47)
  %tobool65 = icmp ne i32 %call64, 0
  br i1 %tobool65, label %land.lhs.true.66, label %if.end.84

land.lhs.true.66:                                 ; preds = %land.lhs.true.59
  %48 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %init_insn = getelementptr inbounds %struct.iv_class, %struct.iv_class* %48, i32 0, i32 10
  %49 = load %struct.rtx_def*, %struct.rtx_def** %init_insn, align 8
  %cmp67 = icmp eq %struct.rtx_def* %49, null
  br i1 %cmp67, label %if.then.69, label %if.end.84

if.then.69:                                       ; preds = %land.lhs.true.66
  %50 = load %struct.rtx_def*, %struct.rtx_def** %test, align 8
  %51 = bitcast %struct.rtx_def* %50 to i32*
  %bf.load70 = load i32, i32* %51, align 8
  %bf.clear71 = and i32 %bf.load70, 65535
  %cmp72 = icmp eq i32 %bf.clear71, 102
  br i1 %cmp72, label %if.then.74, label %if.else

if.then.74:                                       ; preds = %if.then.69
  %52 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %53 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %init_insn75 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %53, i32 0, i32 10
  store %struct.rtx_def* %52, %struct.rtx_def** %init_insn75, align 8
  %54 = load %struct.rtx_def*, %struct.rtx_def** %test, align 8
  %fld76 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %54, i32 0, i32 1
  %arrayidx77 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld76, i32 0, i64 0
  %rtx78 = bitcast %union.rtunion_def* %arrayidx77 to %struct.rtx_def**
  %55 = load %struct.rtx_def*, %struct.rtx_def** %rtx78, align 8
  %56 = load %struct.rtx_def*, %struct.rtx_def** %test, align 8
  %fld79 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %56, i32 0, i32 1
  %arrayidx80 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld79, i32 0, i64 1
  %rtx81 = bitcast %union.rtunion_def* %arrayidx80 to %struct.rtx_def**
  %57 = load %struct.rtx_def*, %struct.rtx_def** %rtx81, align 8
  %call82 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %55, %struct.rtx_def* %57)
  %58 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %init_set = getelementptr inbounds %struct.iv_class, %struct.iv_class* %58, i32 0, i32 11
  store %struct.rtx_def* %call82, %struct.rtx_def** %init_set, align 8
  br label %if.end.83

if.else:                                          ; preds = %if.then.69
  %59 = load %struct.rtx_def*, %struct.rtx_def** %test, align 8
  %60 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %initial_test = getelementptr inbounds %struct.iv_class, %struct.iv_class* %60, i32 0, i32 7
  store %struct.rtx_def* %59, %struct.rtx_def** %initial_test, align 8
  br label %if.end.83

if.end.83:                                        ; preds = %if.else, %if.then.74
  br label %if.end.84

if.end.84:                                        ; preds = %if.end.83, %land.lhs.true.66, %land.lhs.true.59, %land.lhs.true.48, %land.lhs.true.40, %land.lhs.true.32, %land.lhs.true.28, %land.lhs.true.21, %land.lhs.true, %if.end.11
  br label %for.inc

for.inc:                                          ; preds = %if.end.84
  %61 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld85 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %61, i32 0, i32 1
  %arrayidx86 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld85, i32 0, i64 1
  %rtx87 = bitcast %union.rtunion_def* %arrayidx86 to %struct.rtx_def**
  %62 = load %struct.rtx_def*, %struct.rtx_def** %rtx87, align 8
  store %struct.rtx_def* %62, %struct.rtx_def** %p, align 8
  br label %for.cond

for.end:                                          ; preds = %land.end
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @loop_bivs_check(%struct.loop* %loop) #0 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %ivs = alloca %struct.loop_ivs*, align 8
  %bl = alloca %struct.iv_class*, align 8
  %backbl = alloca %struct.iv_class**, align 8
  %src = alloca %struct.rtx_def*, align 8
  %note = alloca %struct.rtx_def*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %aux = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 22
  %1 = load i8*, i8** %aux, align 8
  %2 = bitcast i8* %1 to %struct.loop_info*
  %ivs1 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %2, i32 0, i32 29
  store %struct.loop_ivs* %ivs1, %struct.loop_ivs** %ivs, align 8
  %3 = load %struct.loop_ivs*, %struct.loop_ivs** %ivs, align 8
  %list = getelementptr inbounds %struct.loop_ivs, %struct.loop_ivs* %3, i32 0, i32 2
  store %struct.iv_class** %list, %struct.iv_class*** %backbl, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load %struct.iv_class**, %struct.iv_class*** %backbl, align 8
  %5 = load %struct.iv_class*, %struct.iv_class** %4, align 8
  store %struct.iv_class* %5, %struct.iv_class** %bl, align 8
  %tobool = icmp ne %struct.iv_class* %5, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %init_insn = getelementptr inbounds %struct.iv_class, %struct.iv_class* %6, i32 0, i32 10
  %7 = load %struct.rtx_def*, %struct.rtx_def** %init_insn, align 8
  %tobool2 = icmp ne %struct.rtx_def* %7, null
  br i1 %tobool2, label %if.end, label %if.then

if.then:                                          ; preds = %for.body
  br label %for.inc

if.end:                                           ; preds = %for.body
  %8 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %init_insn3 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %8, i32 0, i32 10
  %9 = load %struct.rtx_def*, %struct.rtx_def** %init_insn3, align 8
  %call = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %9, i32 4, %struct.rtx_def* null)
  store %struct.rtx_def* %call, %struct.rtx_def** %note, align 8
  %cmp = icmp ne %struct.rtx_def* %call, null
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false.53

land.lhs.true:                                    ; preds = %if.end
  %10 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %12 = bitcast %struct.rtx_def* %11 to i32*
  %bf.load = load i32, i32* %12, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp4 = icmp eq i32 %bf.clear, 67
  br i1 %cmp4, label %if.then.113, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %13 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8
  %fld5 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1
  %arrayidx6 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld5, i32 0, i64 0
  %rtx7 = bitcast %union.rtunion_def* %arrayidx6 to %struct.rtx_def**
  %14 = load %struct.rtx_def*, %struct.rtx_def** %rtx7, align 8
  %15 = bitcast %struct.rtx_def* %14 to i32*
  %bf.load8 = load i32, i32* %15, align 8
  %bf.clear9 = and i32 %bf.load8, 65535
  %cmp10 = icmp eq i32 %bf.clear9, 68
  br i1 %cmp10, label %if.then.113, label %lor.lhs.false.11

lor.lhs.false.11:                                 ; preds = %lor.lhs.false
  %16 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8
  %fld12 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1
  %arrayidx13 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld12, i32 0, i64 0
  %rtx14 = bitcast %union.rtunion_def* %arrayidx13 to %struct.rtx_def**
  %17 = load %struct.rtx_def*, %struct.rtx_def** %rtx14, align 8
  %18 = bitcast %struct.rtx_def* %17 to i32*
  %bf.load15 = load i32, i32* %18, align 8
  %bf.clear16 = and i32 %bf.load15, 65535
  %cmp17 = icmp eq i32 %bf.clear16, 54
  br i1 %cmp17, label %if.then.113, label %lor.lhs.false.18

lor.lhs.false.18:                                 ; preds = %lor.lhs.false.11
  %19 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8
  %fld19 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1
  %arrayidx20 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld19, i32 0, i64 0
  %rtx21 = bitcast %union.rtunion_def* %arrayidx20 to %struct.rtx_def**
  %20 = load %struct.rtx_def*, %struct.rtx_def** %rtx21, align 8
  %21 = bitcast %struct.rtx_def* %20 to i32*
  %bf.load22 = load i32, i32* %21, align 8
  %bf.clear23 = and i32 %bf.load22, 65535
  %cmp24 = icmp eq i32 %bf.clear23, 55
  br i1 %cmp24, label %if.then.113, label %lor.lhs.false.25

lor.lhs.false.25:                                 ; preds = %lor.lhs.false.18
  %22 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8
  %fld26 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1
  %arrayidx27 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld26, i32 0, i64 0
  %rtx28 = bitcast %union.rtunion_def* %arrayidx27 to %struct.rtx_def**
  %23 = load %struct.rtx_def*, %struct.rtx_def** %rtx28, align 8
  %24 = bitcast %struct.rtx_def* %23 to i32*
  %bf.load29 = load i32, i32* %24, align 8
  %bf.clear30 = and i32 %bf.load29, 65535
  %cmp31 = icmp eq i32 %bf.clear30, 58
  br i1 %cmp31, label %if.then.113, label %lor.lhs.false.32

lor.lhs.false.32:                                 ; preds = %lor.lhs.false.25
  %25 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8
  %fld33 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1
  %arrayidx34 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld33, i32 0, i64 0
  %rtx35 = bitcast %union.rtunion_def* %arrayidx34 to %struct.rtx_def**
  %26 = load %struct.rtx_def*, %struct.rtx_def** %rtx35, align 8
  %27 = bitcast %struct.rtx_def* %26 to i32*
  %bf.load36 = load i32, i32* %27, align 8
  %bf.clear37 = and i32 %bf.load36, 65535
  %cmp38 = icmp eq i32 %bf.clear37, 134
  br i1 %cmp38, label %if.then.113, label %lor.lhs.false.39

lor.lhs.false.39:                                 ; preds = %lor.lhs.false.32
  %28 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8
  %fld40 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1
  %arrayidx41 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld40, i32 0, i64 0
  %rtx42 = bitcast %union.rtunion_def* %arrayidx41 to %struct.rtx_def**
  %29 = load %struct.rtx_def*, %struct.rtx_def** %rtx42, align 8
  %30 = bitcast %struct.rtx_def* %29 to i32*
  %bf.load43 = load i32, i32* %30, align 8
  %bf.clear44 = and i32 %bf.load43, 65535
  %cmp45 = icmp eq i32 %bf.clear44, 56
  br i1 %cmp45, label %if.then.113, label %lor.lhs.false.46

lor.lhs.false.46:                                 ; preds = %lor.lhs.false.39
  %31 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8
  %fld47 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1
  %arrayidx48 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld47, i32 0, i64 0
  %rtx49 = bitcast %union.rtunion_def* %arrayidx48 to %struct.rtx_def**
  %32 = load %struct.rtx_def*, %struct.rtx_def** %rtx49, align 8
  %33 = bitcast %struct.rtx_def* %32 to i32*
  %bf.load50 = load i32, i32* %33, align 8
  %bf.clear51 = and i32 %bf.load50, 65535
  %cmp52 = icmp eq i32 %bf.clear51, 140
  br i1 %cmp52, label %if.then.113, label %lor.lhs.false.53

lor.lhs.false.53:                                 ; preds = %lor.lhs.false.46, %if.end
  %34 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %init_insn54 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %34, i32 0, i32 10
  %35 = load %struct.rtx_def*, %struct.rtx_def** %init_insn54, align 8
  %call55 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %35, i32 3, %struct.rtx_def* null)
  store %struct.rtx_def* %call55, %struct.rtx_def** %note, align 8
  %cmp56 = icmp ne %struct.rtx_def* %call55, null
  br i1 %cmp56, label %land.lhs.true.57, label %if.else

land.lhs.true.57:                                 ; preds = %lor.lhs.false.53
  %36 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8
  %fld58 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %36, i32 0, i32 1
  %arrayidx59 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld58, i32 0, i64 0
  %rtx60 = bitcast %union.rtunion_def* %arrayidx59 to %struct.rtx_def**
  %37 = load %struct.rtx_def*, %struct.rtx_def** %rtx60, align 8
  %38 = bitcast %struct.rtx_def* %37 to i32*
  %bf.load61 = load i32, i32* %38, align 8
  %bf.clear62 = and i32 %bf.load61, 65535
  %cmp63 = icmp eq i32 %bf.clear62, 67
  br i1 %cmp63, label %if.then.113, label %lor.lhs.false.64

lor.lhs.false.64:                                 ; preds = %land.lhs.true.57
  %39 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8
  %fld65 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1
  %arrayidx66 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld65, i32 0, i64 0
  %rtx67 = bitcast %union.rtunion_def* %arrayidx66 to %struct.rtx_def**
  %40 = load %struct.rtx_def*, %struct.rtx_def** %rtx67, align 8
  %41 = bitcast %struct.rtx_def* %40 to i32*
  %bf.load68 = load i32, i32* %41, align 8
  %bf.clear69 = and i32 %bf.load68, 65535
  %cmp70 = icmp eq i32 %bf.clear69, 68
  br i1 %cmp70, label %if.then.113, label %lor.lhs.false.71

lor.lhs.false.71:                                 ; preds = %lor.lhs.false.64
  %42 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8
  %fld72 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %42, i32 0, i32 1
  %arrayidx73 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld72, i32 0, i64 0
  %rtx74 = bitcast %union.rtunion_def* %arrayidx73 to %struct.rtx_def**
  %43 = load %struct.rtx_def*, %struct.rtx_def** %rtx74, align 8
  %44 = bitcast %struct.rtx_def* %43 to i32*
  %bf.load75 = load i32, i32* %44, align 8
  %bf.clear76 = and i32 %bf.load75, 65535
  %cmp77 = icmp eq i32 %bf.clear76, 54
  br i1 %cmp77, label %if.then.113, label %lor.lhs.false.78

lor.lhs.false.78:                                 ; preds = %lor.lhs.false.71
  %45 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8
  %fld79 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %45, i32 0, i32 1
  %arrayidx80 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld79, i32 0, i64 0
  %rtx81 = bitcast %union.rtunion_def* %arrayidx80 to %struct.rtx_def**
  %46 = load %struct.rtx_def*, %struct.rtx_def** %rtx81, align 8
  %47 = bitcast %struct.rtx_def* %46 to i32*
  %bf.load82 = load i32, i32* %47, align 8
  %bf.clear83 = and i32 %bf.load82, 65535
  %cmp84 = icmp eq i32 %bf.clear83, 55
  br i1 %cmp84, label %if.then.113, label %lor.lhs.false.85

lor.lhs.false.85:                                 ; preds = %lor.lhs.false.78
  %48 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8
  %fld86 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %48, i32 0, i32 1
  %arrayidx87 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld86, i32 0, i64 0
  %rtx88 = bitcast %union.rtunion_def* %arrayidx87 to %struct.rtx_def**
  %49 = load %struct.rtx_def*, %struct.rtx_def** %rtx88, align 8
  %50 = bitcast %struct.rtx_def* %49 to i32*
  %bf.load89 = load i32, i32* %50, align 8
  %bf.clear90 = and i32 %bf.load89, 65535
  %cmp91 = icmp eq i32 %bf.clear90, 58
  br i1 %cmp91, label %if.then.113, label %lor.lhs.false.92

lor.lhs.false.92:                                 ; preds = %lor.lhs.false.85
  %51 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8
  %fld93 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %51, i32 0, i32 1
  %arrayidx94 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld93, i32 0, i64 0
  %rtx95 = bitcast %union.rtunion_def* %arrayidx94 to %struct.rtx_def**
  %52 = load %struct.rtx_def*, %struct.rtx_def** %rtx95, align 8
  %53 = bitcast %struct.rtx_def* %52 to i32*
  %bf.load96 = load i32, i32* %53, align 8
  %bf.clear97 = and i32 %bf.load96, 65535
  %cmp98 = icmp eq i32 %bf.clear97, 134
  br i1 %cmp98, label %if.then.113, label %lor.lhs.false.99

lor.lhs.false.99:                                 ; preds = %lor.lhs.false.92
  %54 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8
  %fld100 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %54, i32 0, i32 1
  %arrayidx101 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld100, i32 0, i64 0
  %rtx102 = bitcast %union.rtunion_def* %arrayidx101 to %struct.rtx_def**
  %55 = load %struct.rtx_def*, %struct.rtx_def** %rtx102, align 8
  %56 = bitcast %struct.rtx_def* %55 to i32*
  %bf.load103 = load i32, i32* %56, align 8
  %bf.clear104 = and i32 %bf.load103, 65535
  %cmp105 = icmp eq i32 %bf.clear104, 56
  br i1 %cmp105, label %if.then.113, label %lor.lhs.false.106

lor.lhs.false.106:                                ; preds = %lor.lhs.false.99
  %57 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8
  %fld107 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %57, i32 0, i32 1
  %arrayidx108 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld107, i32 0, i64 0
  %rtx109 = bitcast %union.rtunion_def* %arrayidx108 to %struct.rtx_def**
  %58 = load %struct.rtx_def*, %struct.rtx_def** %rtx109, align 8
  %59 = bitcast %struct.rtx_def* %58 to i32*
  %bf.load110 = load i32, i32* %59, align 8
  %bf.clear111 = and i32 %bf.load110, 65535
  %cmp112 = icmp eq i32 %bf.clear111, 140
  br i1 %cmp112, label %if.then.113, label %if.else

if.then.113:                                      ; preds = %lor.lhs.false.106, %lor.lhs.false.99, %lor.lhs.false.92, %lor.lhs.false.85, %lor.lhs.false.78, %lor.lhs.false.71, %lor.lhs.false.64, %land.lhs.true.57, %lor.lhs.false.46, %lor.lhs.false.39, %lor.lhs.false.32, %lor.lhs.false.25, %lor.lhs.false.18, %lor.lhs.false.11, %lor.lhs.false, %land.lhs.true
  %60 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8
  %fld114 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %60, i32 0, i32 1
  %arrayidx115 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld114, i32 0, i64 0
  %rtx116 = bitcast %union.rtunion_def* %arrayidx115 to %struct.rtx_def**
  %61 = load %struct.rtx_def*, %struct.rtx_def** %rtx116, align 8
  store %struct.rtx_def* %61, %struct.rtx_def** %src, align 8
  br label %if.end.120

if.else:                                          ; preds = %lor.lhs.false.106, %lor.lhs.false.53
  %62 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %init_set = getelementptr inbounds %struct.iv_class, %struct.iv_class* %62, i32 0, i32 11
  %63 = load %struct.rtx_def*, %struct.rtx_def** %init_set, align 8
  %fld117 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %63, i32 0, i32 1
  %arrayidx118 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld117, i32 0, i64 1
  %rtx119 = bitcast %union.rtunion_def* %arrayidx118 to %struct.rtx_def**
  %64 = load %struct.rtx_def*, %struct.rtx_def** %rtx119, align 8
  store %struct.rtx_def* %64, %struct.rtx_def** %src, align 8
  br label %if.end.120

if.end.120:                                       ; preds = %if.else, %if.then.113
  %65 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %tobool121 = icmp ne %struct._IO_FILE* %65, null
  br i1 %tobool121, label %if.then.122, label %if.end.127

if.then.122:                                      ; preds = %if.end.120
  %66 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %67 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %regno = getelementptr inbounds %struct.iv_class, %struct.iv_class* %67, i32 0, i32 0
  %68 = load i32, i32* %regno, align 4
  %69 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %init_insn123 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %69, i32 0, i32 10
  %70 = load %struct.rtx_def*, %struct.rtx_def** %init_insn123, align 8
  %fld124 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %70, i32 0, i32 1
  %arrayidx125 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld124, i32 0, i64 0
  %rtint = bitcast %union.rtunion_def* %arrayidx125 to i32*
  %71 = load i32, i32* %rtint, align 4
  %call126 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %66, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.34, i32 0, i32 0), i32 %68, i32 %71)
  br label %if.end.127

if.end.127:                                       ; preds = %if.then.122, %if.end.120
  %72 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %73 = bitcast %struct.rtx_def* %72 to i32*
  %bf.load128 = load i32, i32* %73, align 8
  %bf.lshr = lshr i32 %bf.load128, 16
  %bf.clear129 = and i32 %bf.lshr, 255
  %74 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %regno130 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %74, i32 0, i32 0
  %75 = load i32, i32* %regno130, align 4
  %idxprom = zext i32 %75 to i64
  %76 = load %struct.function*, %struct.function** @cfun, align 8
  %emit = getelementptr inbounds %struct.function, %struct.function* %76, i32 0, i32 3
  %77 = load %struct.emit_status*, %struct.emit_status** %emit, align 8
  %x_regno_reg_rtx = getelementptr inbounds %struct.emit_status, %struct.emit_status* %77, i32 0, i32 12
  %78 = load %struct.rtx_def**, %struct.rtx_def*** %x_regno_reg_rtx, align 8
  %arrayidx131 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %78, i64 %idxprom
  %79 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx131, align 8
  %80 = bitcast %struct.rtx_def* %79 to i32*
  %bf.load132 = load i32, i32* %80, align 8
  %bf.lshr133 = lshr i32 %bf.load132, 16
  %bf.clear134 = and i32 %bf.lshr133, 255
  %cmp135 = icmp eq i32 %bf.clear129, %bf.clear134
  br i1 %cmp135, label %land.lhs.true.141, label %lor.lhs.false.136

lor.lhs.false.136:                                ; preds = %if.end.127
  %81 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %82 = bitcast %struct.rtx_def* %81 to i32*
  %bf.load137 = load i32, i32* %82, align 8
  %bf.lshr138 = lshr i32 %bf.load137, 16
  %bf.clear139 = and i32 %bf.lshr138, 255
  %cmp140 = icmp eq i32 %bf.clear139, 0
  br i1 %cmp140, label %land.lhs.true.141, label %if.else.151

land.lhs.true.141:                                ; preds = %lor.lhs.false.136, %if.end.127
  %83 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %84 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %init_insn142 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %84, i32 0, i32 10
  %85 = load %struct.rtx_def*, %struct.rtx_def** %init_insn142, align 8
  %86 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %aux143 = getelementptr inbounds %struct.loop, %struct.loop* %86, i32 0, i32 22
  %87 = load i8*, i8** %aux143, align 8
  %88 = bitcast i8* %87 to %struct.loop_info*
  %pre_header_has_call = getelementptr inbounds %struct.loop_info, %struct.loop_info* %88, i32 0, i32 30
  %89 = load i32, i32* %pre_header_has_call, align 4
  %90 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %start = getelementptr inbounds %struct.loop, %struct.loop* %90, i32 0, i32 26
  %91 = load %struct.rtx_def*, %struct.rtx_def** %start, align 8
  %call144 = call i32 @valid_initial_value_p(%struct.rtx_def* %83, %struct.rtx_def* %85, i32 %89, %struct.rtx_def* %91)
  %tobool145 = icmp ne i32 %call144, 0
  br i1 %tobool145, label %if.then.146, label %if.else.151

if.then.146:                                      ; preds = %land.lhs.true.141
  %92 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %93 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %initial_value = getelementptr inbounds %struct.iv_class, %struct.iv_class* %93, i32 0, i32 6
  store %struct.rtx_def* %92, %struct.rtx_def** %initial_value, align 8
  %94 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %tobool147 = icmp ne %struct._IO_FILE* %94, null
  br i1 %tobool147, label %if.then.148, label %if.end.150

if.then.148:                                      ; preds = %if.then.146
  %95 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %96 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  call void @print_simple_rtl(%struct._IO_FILE* %95, %struct.rtx_def* %96)
  %97 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %call149 = call i32 @fputc(i32 10, %struct._IO_FILE* %97)
  br label %if.end.150

if.end.150:                                       ; preds = %if.then.148, %if.then.146
  br label %if.end.156

if.else.151:                                      ; preds = %land.lhs.true.141, %lor.lhs.false.136
  %98 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %tobool152 = icmp ne %struct._IO_FILE* %98, null
  br i1 %tobool152, label %if.then.153, label %if.end.155

if.then.153:                                      ; preds = %if.else.151
  %99 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %call154 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %99, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.35, i32 0, i32 0))
  br label %if.end.155

if.end.155:                                       ; preds = %if.then.153, %if.else.151
  br label %if.end.156

if.end.156:                                       ; preds = %if.end.155, %if.end.150
  br label %for.inc

for.inc:                                          ; preds = %if.end.156, %if.then
  %100 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %next = getelementptr inbounds %struct.iv_class, %struct.iv_class* %100, i32 0, i32 9
  store %struct.iv_class** %next, %struct.iv_class*** %backbl, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @loop_givs_find(%struct.loop* %loop) #0 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  call void @for_each_insn_in_loop(%struct.loop* %0, %struct.rtx_def* (%struct.loop*, %struct.rtx_def*, i32, i32)* @check_insn_for_givs)
  ret void
}

declare i64 @loop_iterations(%struct.loop*) #1

; Function Attrs: nounwind uwtable
define internal void @emit_prefetch_instructions(%struct.loop* %loop) #0 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %num_prefetches = alloca i32, align 4
  %num_real_prefetches = alloca i32, align 4
  %num_real_write_prefetches = alloca i32, align 4
  %ahead = alloca i32, align 4
  %i = alloca i32, align 4
  %bl = alloca %struct.iv_class*, align 8
  %iv = alloca %struct.induction*, align 8
  %info = alloca [100 x %struct.prefetch_info], align 16
  %ivs = alloca %struct.loop_ivs*, align 8
  %biv = alloca %struct.induction*, align 8
  %biv1 = alloca %struct.induction*, align 8
  %basestride = alloca i32, align 4
  %address = alloca %struct.rtx_def*, align 8
  %temp = alloca %struct.rtx_def*, align 8
  %index = alloca i64, align 8
  %add65 = alloca i32, align 4
  %stride = alloca i64, align 8
  %d = alloca %struct.check_store_data, align 8
  %size = alloca i32, align 4
  %y = alloca i32, align 4
  %loc = alloca %struct.rtx_def*, align 8
  %insn491 = alloca %struct.rtx_def*, align 8
  %bytes_ahead = alloca i32, align 4
  %before_insn = alloca %struct.rtx_def*, align 8
  %prev_insn = alloca %struct.rtx_def*, align 8
  %seq = alloca %struct.rtx_def*, align 8
  %reg = alloca %struct.rtx_def*, align 8
  %y586 = alloca i32, align 4
  %reg607 = alloca %struct.rtx_def*, align 8
  %loop_start = alloca %struct.rtx_def*, align 8
  %add_val612 = alloca %struct.rtx_def*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  store i32 0, i32* %num_prefetches, align 4
  store i32 0, i32* %num_real_prefetches, align 4
  store i32 0, i32* %num_real_write_prefetches, align 4
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %aux = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 22
  %1 = load i8*, i8** %aux, align 8
  %2 = bitcast i8* %1 to %struct.loop_info*
  %ivs1 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %2, i32 0, i32 29
  store %struct.loop_ivs* %ivs1, %struct.loop_ivs** %ivs, align 8
  %3 = load i32, i32* @x86_prefetch_sse, align 4
  %tobool = icmp ne i32 %3, 0
  br i1 %tobool, label %if.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %4 = load i32, i32* @target_flags, align 4
  %and = and i32 %4, 1048576
  %cmp = icmp ne i32 %and, 0
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false
  br label %return

if.end:                                           ; preds = %lor.lhs.false, %entry
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %aux2 = getelementptr inbounds %struct.loop, %struct.loop* %5, i32 0, i32 22
  %6 = load i8*, i8** %aux2, align 8
  %7 = bitcast i8* %6 to %struct.loop_info*
  %has_call = getelementptr inbounds %struct.loop_info, %struct.loop_info* %7, i32 0, i32 0
  %8 = load i32, i32* %has_call, align 4
  %tobool3 = icmp ne i32 %8, 0
  br i1 %tobool3, label %if.then.4, label %if.end.8

if.then.4:                                        ; preds = %if.end
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %tobool5 = icmp ne %struct._IO_FILE* %9, null
  br i1 %tobool5, label %if.then.6, label %if.end.7

if.then.6:                                        ; preds = %if.then.4
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %10, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.36, i32 0, i32 0))
  br label %if.end.7

if.end.7:                                         ; preds = %if.then.6, %if.then.4
  br label %return

if.end.8:                                         ; preds = %if.end
  %11 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %aux9 = getelementptr inbounds %struct.loop, %struct.loop* %11, i32 0, i32 22
  %12 = load i8*, i8** %aux9, align 8
  %13 = bitcast i8* %12 to %struct.loop_info*
  %n_iterations = getelementptr inbounds %struct.loop_info, %struct.loop_info* %13, i32 0, i32 15
  %14 = load i64, i64* %n_iterations, align 8
  %tobool10 = icmp ne i64 %14, 0
  br i1 %tobool10, label %land.lhs.true, label %if.end.19

land.lhs.true:                                    ; preds = %if.end.8
  %15 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %aux11 = getelementptr inbounds %struct.loop, %struct.loop* %15, i32 0, i32 22
  %16 = load i8*, i8** %aux11, align 8
  %17 = bitcast i8* %16 to %struct.loop_info*
  %n_iterations12 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %17, i32 0, i32 15
  %18 = load i64, i64* %n_iterations12, align 8
  %cmp13 = icmp ule i64 %18, 32
  br i1 %cmp13, label %if.then.14, label %if.end.19

if.then.14:                                       ; preds = %land.lhs.true
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %tobool15 = icmp ne %struct._IO_FILE* %19, null
  br i1 %tobool15, label %if.then.16, label %if.end.18

if.then.16:                                       ; preds = %if.then.14
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %call17 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %20, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.37, i32 0, i32 0))
  br label %if.end.18

if.end.18:                                        ; preds = %if.then.16, %if.then.14
  br label %return

if.end.19:                                        ; preds = %land.lhs.true, %if.end.8
  %21 = load %struct.loop_ivs*, %struct.loop_ivs** %ivs, align 8
  %list = getelementptr inbounds %struct.loop_ivs, %struct.loop_ivs* %21, i32 0, i32 2
  %22 = load %struct.iv_class*, %struct.iv_class** %list, align 8
  store %struct.iv_class* %22, %struct.iv_class** %bl, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc.250, %if.end.19
  %23 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %tobool20 = icmp ne %struct.iv_class* %23, null
  br i1 %tobool20, label %for.body, label %for.end.251

for.body:                                         ; preds = %for.cond
  %24 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %biv21 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %24, i32 0, i32 2
  %25 = load %struct.induction*, %struct.induction** %biv21, align 8
  store %struct.induction* %25, %struct.induction** %biv, align 8
  store i32 0, i32* %basestride, align 4
  %26 = load %struct.induction*, %struct.induction** %biv, align 8
  store %struct.induction* %26, %struct.induction** %biv1, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end.52, %for.body
  %27 = load %struct.induction*, %struct.induction** %biv1, align 8
  %tobool22 = icmp ne %struct.induction* %27, null
  br i1 %tobool22, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %28 = load %struct.induction*, %struct.induction** %biv, align 8
  %add_val = getelementptr inbounds %struct.induction, %struct.induction* %28, i32 0, i32 9
  %29 = load %struct.rtx_def*, %struct.rtx_def** %add_val, align 8
  %30 = bitcast %struct.rtx_def* %29 to i32*
  %bf.load = load i32, i32* %30, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp23 = icmp ne i32 %bf.clear, 54
  br i1 %cmp23, label %if.then.24, label %if.end.33

if.then.24:                                       ; preds = %while.body
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %tobool25 = icmp ne %struct._IO_FILE* %31, null
  br i1 %tobool25, label %if.then.26, label %if.end.32

if.then.26:                                       ; preds = %if.then.24
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %33 = load %struct.induction*, %struct.induction** %biv, align 8
  %src_reg = getelementptr inbounds %struct.induction, %struct.induction* %33, i32 0, i32 2
  %34 = load %struct.rtx_def*, %struct.rtx_def** %src_reg, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %34, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx to i32*
  %35 = load i32, i32* %rtuint, align 4
  %36 = load %struct.induction*, %struct.induction** %biv, align 8
  %insn = getelementptr inbounds %struct.induction, %struct.induction* %36, i32 0, i32 0
  %37 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld27 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %37, i32 0, i32 1
  %arrayidx28 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld27, i32 0, i64 0
  %rtint = bitcast %union.rtunion_def* %arrayidx28 to i32*
  %38 = load i32, i32* %rtint, align 4
  %call29 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %32, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.38, i32 0, i32 0), i32 %35, i32 %38)
  %39 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %40 = load %struct.induction*, %struct.induction** %biv, align 8
  %add_val30 = getelementptr inbounds %struct.induction, %struct.induction* %40, i32 0, i32 9
  %41 = load %struct.rtx_def*, %struct.rtx_def** %add_val30, align 8
  call void @print_rtl(%struct._IO_FILE* %39, %struct.rtx_def* %41)
  %42 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %call31 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %42, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.18, i32 0, i32 0))
  br label %if.end.32

if.end.32:                                        ; preds = %if.then.26, %if.then.24
  br label %while.end

if.end.33:                                        ; preds = %while.body
  %43 = load %struct.induction*, %struct.induction** %biv, align 8
  %maybe_multiple = getelementptr inbounds %struct.induction, %struct.induction* %43, i32 0, i32 13
  %bf.load34 = load i16, i16* %maybe_multiple, align 4
  %bf.lshr = lshr i16 %bf.load34, 5
  %bf.clear35 = and i16 %bf.lshr, 1
  %bf.cast = zext i16 %bf.clear35 to i32
  %tobool36 = icmp ne i32 %bf.cast, 0
  br i1 %tobool36, label %if.then.37, label %if.end.52

if.then.37:                                       ; preds = %if.end.33
  %44 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %tobool38 = icmp ne %struct._IO_FILE* %44, null
  br i1 %tobool38, label %if.then.39, label %if.end.51

if.then.39:                                       ; preds = %if.then.37
  %45 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %46 = load %struct.induction*, %struct.induction** %biv, align 8
  %src_reg40 = getelementptr inbounds %struct.induction, %struct.induction* %46, i32 0, i32 2
  %47 = load %struct.rtx_def*, %struct.rtx_def** %src_reg40, align 8
  %fld41 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %47, i32 0, i32 1
  %arrayidx42 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld41, i32 0, i64 0
  %rtuint43 = bitcast %union.rtunion_def* %arrayidx42 to i32*
  %48 = load i32, i32* %rtuint43, align 4
  %49 = load %struct.induction*, %struct.induction** %biv, align 8
  %insn44 = getelementptr inbounds %struct.induction, %struct.induction* %49, i32 0, i32 0
  %50 = load %struct.rtx_def*, %struct.rtx_def** %insn44, align 8
  %fld45 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %50, i32 0, i32 1
  %arrayidx46 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld45, i32 0, i64 0
  %rtint47 = bitcast %union.rtunion_def* %arrayidx46 to i32*
  %51 = load i32, i32* %rtint47, align 4
  %call48 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %45, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.39, i32 0, i32 0), i32 %48, i32 %51)
  %52 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %53 = load %struct.induction*, %struct.induction** %biv, align 8
  %add_val49 = getelementptr inbounds %struct.induction, %struct.induction* %53, i32 0, i32 9
  %54 = load %struct.rtx_def*, %struct.rtx_def** %add_val49, align 8
  call void @print_rtl(%struct._IO_FILE* %52, %struct.rtx_def* %54)
  %55 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %call50 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %55, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.18, i32 0, i32 0))
  br label %if.end.51

if.end.51:                                        ; preds = %if.then.39, %if.then.37
  br label %while.end

if.end.52:                                        ; preds = %if.end.33
  %56 = load %struct.induction*, %struct.induction** %biv1, align 8
  %add_val53 = getelementptr inbounds %struct.induction, %struct.induction* %56, i32 0, i32 9
  %57 = load %struct.rtx_def*, %struct.rtx_def** %add_val53, align 8
  %fld54 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %57, i32 0, i32 1
  %arrayidx55 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld54, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx55 to i64*
  %58 = load i64, i64* %rtwint, align 8
  %59 = load i32, i32* %basestride, align 4
  %conv = sext i32 %59 to i64
  %add = add nsw i64 %conv, %58
  %conv56 = trunc i64 %add to i32
  store i32 %conv56, i32* %basestride, align 4
  %60 = load %struct.induction*, %struct.induction** %biv1, align 8
  %next_iv = getelementptr inbounds %struct.induction, %struct.induction* %60, i32 0, i32 17
  %61 = load %struct.induction*, %struct.induction** %next_iv, align 8
  store %struct.induction* %61, %struct.induction** %biv1, align 8
  br label %while.cond

while.end:                                        ; preds = %if.end.51, %if.end.32, %while.cond
  %62 = load %struct.induction*, %struct.induction** %biv1, align 8
  %tobool57 = icmp ne %struct.induction* %62, null
  br i1 %tobool57, label %if.then.60, label %lor.lhs.false.58

lor.lhs.false.58:                                 ; preds = %while.end
  %63 = load i32, i32* %basestride, align 4
  %tobool59 = icmp ne i32 %63, 0
  br i1 %tobool59, label %if.end.61, label %if.then.60

if.then.60:                                       ; preds = %lor.lhs.false.58, %while.end
  br label %for.inc.250

if.end.61:                                        ; preds = %lor.lhs.false.58
  %64 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %giv = getelementptr inbounds %struct.iv_class, %struct.iv_class* %64, i32 0, i32 4
  %65 = load %struct.induction*, %struct.induction** %giv, align 8
  store %struct.induction* %65, %struct.induction** %iv, align 8
  br label %for.cond.62

for.cond.62:                                      ; preds = %for.inc.247, %if.end.61
  %66 = load %struct.induction*, %struct.induction** %iv, align 8
  %tobool63 = icmp ne %struct.induction* %66, null
  br i1 %tobool63, label %for.body.64, label %for.end.249

for.body.64:                                      ; preds = %for.cond.62
  store i64 0, i64* %index, align 8
  store i32 1, i32* %add65, align 4
  %67 = load %struct.induction*, %struct.induction** %iv, align 8
  %mode = getelementptr inbounds %struct.induction, %struct.induction* %67, i32 0, i32 6
  %68 = load i32, i32* %mode, align 4
  %idxprom = sext i32 %68 to i64
  %arrayidx66 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom
  %69 = load i8, i8* %arrayidx66, align 1
  %conv67 = zext i8 %69 to i32
  store i32 %conv67, i32* %size, align 4
  %70 = load %struct.induction*, %struct.induction** %iv, align 8
  %giv_type = getelementptr inbounds %struct.induction, %struct.induction* %70, i32 0, i32 3
  %71 = load i32, i32* %giv_type, align 4
  %cmp68 = icmp ne i32 %71, 0
  br i1 %cmp68, label %if.then.97, label %lor.lhs.false.70

lor.lhs.false.70:                                 ; preds = %for.body.64
  %72 = load %struct.induction*, %struct.induction** %iv, align 8
  %mult_val = getelementptr inbounds %struct.induction, %struct.induction* %72, i32 0, i32 8
  %73 = load %struct.rtx_def*, %struct.rtx_def** %mult_val, align 8
  %74 = bitcast %struct.rtx_def* %73 to i32*
  %bf.load71 = load i32, i32* %74, align 8
  %bf.clear72 = and i32 %bf.load71, 65535
  %cmp73 = icmp ne i32 %bf.clear72, 54
  br i1 %cmp73, label %if.then.97, label %lor.lhs.false.75

lor.lhs.false.75:                                 ; preds = %lor.lhs.false.70
  %75 = load %struct.induction*, %struct.induction** %iv, align 8
  %mult_val76 = getelementptr inbounds %struct.induction, %struct.induction* %75, i32 0, i32 8
  %76 = load %struct.rtx_def*, %struct.rtx_def** %mult_val76, align 8
  %fld77 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %76, i32 0, i32 1
  %arrayidx78 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld77, i32 0, i64 0
  %rtwint79 = bitcast %union.rtunion_def* %arrayidx78 to i64*
  %77 = load i64, i64* %rtwint79, align 8
  %78 = load i32, i32* %basestride, align 4
  %conv80 = sext i32 %78 to i64
  %mul = mul nsw i64 %77, %conv80
  store i64 %mul, i64* %stride, align 8
  %cmp81 = icmp slt i64 %mul, 0
  br i1 %cmp81, label %if.then.97, label %lor.lhs.false.83

lor.lhs.false.83:                                 ; preds = %lor.lhs.false.75
  %79 = load i64, i64* %stride, align 8
  %cmp84 = icmp sgt i64 %79, 4096
  br i1 %cmp84, label %if.then.97, label %lor.lhs.false.86

lor.lhs.false.86:                                 ; preds = %lor.lhs.false.83
  %80 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %81 = load %struct.induction*, %struct.induction** %iv, align 8
  %add_val87 = getelementptr inbounds %struct.induction, %struct.induction* %81, i32 0, i32 9
  %82 = load %struct.rtx_def*, %struct.rtx_def** %add_val87, align 8
  %call88 = call i32 @loop_invariant_p(%struct.loop* %80, %struct.rtx_def* %82)
  %tobool89 = icmp ne i32 %call88, 0
  br i1 %tobool89, label %lor.lhs.false.90, label %if.then.97

lor.lhs.false.90:                                 ; preds = %lor.lhs.false.86
  %83 = load %struct.induction*, %struct.induction** %iv, align 8
  %maybe_multiple91 = getelementptr inbounds %struct.induction, %struct.induction* %83, i32 0, i32 13
  %bf.load92 = load i16, i16* %maybe_multiple91, align 4
  %bf.lshr93 = lshr i16 %bf.load92, 5
  %bf.clear94 = and i16 %bf.lshr93, 1
  %bf.cast95 = zext i16 %bf.clear94 to i32
  %tobool96 = icmp ne i32 %bf.cast95, 0
  br i1 %tobool96, label %if.then.97, label %if.end.106

if.then.97:                                       ; preds = %lor.lhs.false.90, %lor.lhs.false.86, %lor.lhs.false.83, %lor.lhs.false.75, %lor.lhs.false.70, %for.body.64
  %84 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %tobool98 = icmp ne %struct._IO_FILE* %84, null
  br i1 %tobool98, label %if.then.99, label %if.end.105

if.then.99:                                       ; preds = %if.then.97
  %85 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %86 = load %struct.induction*, %struct.induction** %iv, align 8
  %insn100 = getelementptr inbounds %struct.induction, %struct.induction* %86, i32 0, i32 0
  %87 = load %struct.rtx_def*, %struct.rtx_def** %insn100, align 8
  %fld101 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %87, i32 0, i32 1
  %arrayidx102 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld101, i32 0, i64 0
  %rtint103 = bitcast %union.rtunion_def* %arrayidx102 to i32*
  %88 = load i32, i32* %rtint103, align 4
  %call104 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %85, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.40, i32 0, i32 0), i32 %88)
  br label %if.end.105

if.end.105:                                       ; preds = %if.then.99, %if.then.97
  br label %for.inc.247

if.end.106:                                       ; preds = %lor.lhs.false.90
  store i64 0, i64* %index, align 8
  %89 = load %struct.induction*, %struct.induction** %iv, align 8
  %add_val107 = getelementptr inbounds %struct.induction, %struct.induction* %89, i32 0, i32 9
  %90 = load %struct.rtx_def*, %struct.rtx_def** %add_val107, align 8
  %call108 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %90)
  store %struct.rtx_def* %call108, %struct.rtx_def** %address, align 8
  %91 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %initial_value = getelementptr inbounds %struct.iv_class, %struct.iv_class* %91, i32 0, i32 6
  %92 = load %struct.rtx_def*, %struct.rtx_def** %initial_value, align 8
  %call109 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %92)
  store %struct.rtx_def* %call109, %struct.rtx_def** %temp, align 8
  %93 = load i32, i32* @target_flags, align 4
  %and110 = and i32 %93, 33554432
  %tobool111 = icmp ne i32 %and110, 0
  %cond = select i1 %tobool111, i32 5, i32 4
  %94 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %95 = load %struct.rtx_def*, %struct.rtx_def** %address, align 8
  %call112 = call %struct.rtx_def* @simplify_gen_binary(i32 75, i32 %cond, %struct.rtx_def* %94, %struct.rtx_def* %95)
  store %struct.rtx_def* %call112, %struct.rtx_def** %address, align 8
  %call113 = call i64 @remove_constant_addition(%struct.rtx_def** %address)
  store i64 %call113, i64* %index, align 8
  %96 = load i32, i32* %size, align 4
  %conv114 = sext i32 %96 to i64
  %97 = load i64, i64* %index, align 8
  %add115 = add nsw i64 %97, %conv114
  store i64 %add115, i64* %index, align 8
  %mem_write = getelementptr inbounds %struct.check_store_data, %struct.check_store_data* %d, i32 0, i32 1
  store i32 0, i32* %mem_write, align 4
  %98 = load %struct.induction*, %struct.induction** %iv, align 8
  %location = getelementptr inbounds %struct.induction, %struct.induction* %98, i32 0, i32 5
  %99 = load %struct.rtx_def**, %struct.rtx_def*** %location, align 8
  %100 = load %struct.rtx_def*, %struct.rtx_def** %99, align 8
  %mem_address = getelementptr inbounds %struct.check_store_data, %struct.check_store_data* %d, i32 0, i32 0
  store %struct.rtx_def* %100, %struct.rtx_def** %mem_address, align 8
  %101 = load %struct.induction*, %struct.induction** %iv, align 8
  %always_executed = getelementptr inbounds %struct.induction, %struct.induction* %101, i32 0, i32 13
  %bf.load116 = load i16, i16* %always_executed, align 4
  %bf.lshr117 = lshr i16 %bf.load116, 4
  %bf.clear118 = and i16 %bf.lshr117, 1
  %bf.cast119 = zext i16 %bf.clear118 to i32
  %tobool120 = icmp ne i32 %bf.cast119, 0
  br i1 %tobool120, label %if.then.121, label %if.end.125

if.then.121:                                      ; preds = %if.end.106
  %102 = load %struct.induction*, %struct.induction** %iv, align 8
  %insn122 = getelementptr inbounds %struct.induction, %struct.induction* %102, i32 0, i32 0
  %103 = load %struct.rtx_def*, %struct.rtx_def** %insn122, align 8
  %fld123 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %103, i32 0, i32 1
  %arrayidx124 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld123, i32 0, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx124 to %struct.rtx_def**
  %104 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %105 = bitcast %struct.check_store_data* %d to i8*
  call void @note_stores(%struct.rtx_def* %104, void (%struct.rtx_def*, %struct.rtx_def*, i8*)* @check_store, i8* %105)
  br label %if.end.125

if.end.125:                                       ; preds = %if.then.121, %if.end.106
  store i32 0, i32* %i, align 4
  br label %for.cond.126

for.cond.126:                                     ; preds = %for.inc, %if.end.125
  %106 = load i32, i32* %i, align 4
  %107 = load i32, i32* %num_prefetches, align 4
  %cmp127 = icmp slt i32 %106, %107
  br i1 %cmp127, label %for.body.129, label %for.end

for.body.129:                                     ; preds = %for.cond.126
  %108 = load %struct.rtx_def*, %struct.rtx_def** %address, align 8
  %109 = load i32, i32* %i, align 4
  %idxprom130 = sext i32 %109 to i64
  %arrayidx131 = getelementptr inbounds [100 x %struct.prefetch_info], [100 x %struct.prefetch_info]* %info, i32 0, i64 %idxprom130
  %base_address = getelementptr inbounds %struct.prefetch_info, %struct.prefetch_info* %arrayidx131, i32 0, i32 2
  %110 = load %struct.rtx_def*, %struct.rtx_def** %base_address, align 8
  %call132 = call i32 @rtx_equal_for_prefetch_p(%struct.rtx_def* %108, %struct.rtx_def* %110)
  %tobool133 = icmp ne i32 %call132, 0
  br i1 %tobool133, label %land.lhs.true.134, label %if.end.207

land.lhs.true.134:                                ; preds = %for.body.129
  %111 = load i64, i64* %stride, align 8
  %112 = load i32, i32* %i, align 4
  %idxprom135 = sext i32 %112 to i64
  %arrayidx136 = getelementptr inbounds [100 x %struct.prefetch_info], [100 x %struct.prefetch_info]* %info, i32 0, i64 %idxprom135
  %stride137 = getelementptr inbounds %struct.prefetch_info, %struct.prefetch_info* %arrayidx136, i32 0, i32 4
  %113 = load i64, i64* %stride137, align 8
  %cmp138 = icmp eq i64 %111, %113
  br i1 %cmp138, label %if.then.140, label %if.end.207

if.then.140:                                      ; preds = %land.lhs.true.134
  %114 = load i64, i64* %index, align 8
  %115 = load i32, i32* %i, align 4
  %idxprom141 = sext i32 %115 to i64
  %arrayidx142 = getelementptr inbounds [100 x %struct.prefetch_info], [100 x %struct.prefetch_info]* %info, i32 0, i64 %idxprom141
  %index143 = getelementptr inbounds %struct.prefetch_info, %struct.prefetch_info* %arrayidx142, i32 0, i32 3
  %116 = load i64, i64* %index143, align 8
  %cmp144 = icmp sge i64 %114, %116
  br i1 %cmp144, label %land.lhs.true.146, label %if.end.175

land.lhs.true.146:                                ; preds = %if.then.140
  %117 = load i64, i64* %index, align 8
  %118 = load i32, i32* %i, align 4
  %idxprom147 = sext i32 %118 to i64
  %arrayidx148 = getelementptr inbounds [100 x %struct.prefetch_info], [100 x %struct.prefetch_info]* %info, i32 0, i64 %idxprom147
  %index149 = getelementptr inbounds %struct.prefetch_info, %struct.prefetch_info* %arrayidx148, i32 0, i32 3
  %119 = load i64, i64* %index149, align 8
  %sub = sub nsw i64 %117, %119
  %cmp150 = icmp slt i64 %sub, 4096
  br i1 %cmp150, label %if.then.152, label %if.end.175

if.then.152:                                      ; preds = %land.lhs.true.146
  %mem_write153 = getelementptr inbounds %struct.check_store_data, %struct.check_store_data* %d, i32 0, i32 1
  %120 = load i32, i32* %mem_write153, align 4
  %121 = load i32, i32* %i, align 4
  %idxprom154 = sext i32 %121 to i64
  %arrayidx155 = getelementptr inbounds [100 x %struct.prefetch_info], [100 x %struct.prefetch_info]* %info, i32 0, i64 %idxprom154
  %write = getelementptr inbounds %struct.prefetch_info, %struct.prefetch_info* %arrayidx155, i32 0, i32 7
  %bf.load156 = load i8, i8* %write, align 8
  %bf.clear157 = and i8 %bf.load156, 1
  %bf.cast158 = zext i8 %bf.clear157 to i32
  %or = or i32 %bf.cast158, %120
  %122 = trunc i32 %or to i8
  %bf.load159 = load i8, i8* %write, align 8
  %bf.value = and i8 %122, 1
  %bf.clear160 = and i8 %bf.load159, -2
  %bf.set = or i8 %bf.clear160, %bf.value
  store i8 %bf.set, i8* %write, align 8
  %bf.result.cast = zext i8 %bf.value to i32
  %123 = load i32, i32* %size, align 4
  %124 = load i32, i32* %i, align 4
  %idxprom161 = sext i32 %124 to i64
  %arrayidx162 = getelementptr inbounds [100 x %struct.prefetch_info], [100 x %struct.prefetch_info]* %info, i32 0, i64 %idxprom161
  %bytes_accesed = getelementptr inbounds %struct.prefetch_info, %struct.prefetch_info* %arrayidx162, i32 0, i32 5
  %125 = load i32, i32* %bytes_accesed, align 4
  %add163 = add i32 %125, %123
  store i32 %add163, i32* %bytes_accesed, align 4
  %126 = load i64, i64* %index, align 8
  %127 = load i32, i32* %i, align 4
  %idxprom164 = sext i32 %127 to i64
  %arrayidx165 = getelementptr inbounds [100 x %struct.prefetch_info], [100 x %struct.prefetch_info]* %info, i32 0, i64 %idxprom164
  %index166 = getelementptr inbounds %struct.prefetch_info, %struct.prefetch_info* %arrayidx165, i32 0, i32 3
  store i64 %126, i64* %index166, align 8
  %128 = load %struct.induction*, %struct.induction** %iv, align 8
  %129 = load i32, i32* %i, align 4
  %idxprom167 = sext i32 %129 to i64
  %arrayidx168 = getelementptr inbounds [100 x %struct.prefetch_info], [100 x %struct.prefetch_info]* %info, i32 0, i64 %idxprom167
  %giv169 = getelementptr inbounds %struct.prefetch_info, %struct.prefetch_info* %arrayidx168, i32 0, i32 1
  store %struct.induction* %128, %struct.induction** %giv169, align 8
  %130 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %131 = load i32, i32* %i, align 4
  %idxprom170 = sext i32 %131 to i64
  %arrayidx171 = getelementptr inbounds [100 x %struct.prefetch_info], [100 x %struct.prefetch_info]* %info, i32 0, i64 %idxprom170
  %class = getelementptr inbounds %struct.prefetch_info, %struct.prefetch_info* %arrayidx171, i32 0, i32 0
  store %struct.iv_class* %130, %struct.iv_class** %class, align 8
  %132 = load %struct.rtx_def*, %struct.rtx_def** %address, align 8
  %133 = load i32, i32* %num_prefetches, align 4
  %idxprom172 = sext i32 %133 to i64
  %arrayidx173 = getelementptr inbounds [100 x %struct.prefetch_info], [100 x %struct.prefetch_info]* %info, i32 0, i64 %idxprom172
  %base_address174 = getelementptr inbounds %struct.prefetch_info, %struct.prefetch_info* %arrayidx173, i32 0, i32 2
  store %struct.rtx_def* %132, %struct.rtx_def** %base_address174, align 8
  store i32 0, i32* %add65, align 4
  br label %for.end

if.end.175:                                       ; preds = %land.lhs.true.146, %if.then.140
  %134 = load i64, i64* %index, align 8
  %135 = load i32, i32* %i, align 4
  %idxprom176 = sext i32 %135 to i64
  %arrayidx177 = getelementptr inbounds [100 x %struct.prefetch_info], [100 x %struct.prefetch_info]* %info, i32 0, i64 %idxprom176
  %index178 = getelementptr inbounds %struct.prefetch_info, %struct.prefetch_info* %arrayidx177, i32 0, i32 3
  %136 = load i64, i64* %index178, align 8
  %cmp179 = icmp slt i64 %134, %136
  br i1 %cmp179, label %land.lhs.true.181, label %if.end.206

land.lhs.true.181:                                ; preds = %if.end.175
  %137 = load i32, i32* %i, align 4
  %idxprom182 = sext i32 %137 to i64
  %arrayidx183 = getelementptr inbounds [100 x %struct.prefetch_info], [100 x %struct.prefetch_info]* %info, i32 0, i64 %idxprom182
  %index184 = getelementptr inbounds %struct.prefetch_info, %struct.prefetch_info* %arrayidx183, i32 0, i32 3
  %138 = load i64, i64* %index184, align 8
  %139 = load i64, i64* %index, align 8
  %sub185 = sub nsw i64 %138, %139
  %cmp186 = icmp slt i64 %sub185, 4096
  br i1 %cmp186, label %if.then.188, label %if.end.206

if.then.188:                                      ; preds = %land.lhs.true.181
  %mem_write189 = getelementptr inbounds %struct.check_store_data, %struct.check_store_data* %d, i32 0, i32 1
  %140 = load i32, i32* %mem_write189, align 4
  %141 = load i32, i32* %i, align 4
  %idxprom190 = sext i32 %141 to i64
  %arrayidx191 = getelementptr inbounds [100 x %struct.prefetch_info], [100 x %struct.prefetch_info]* %info, i32 0, i64 %idxprom190
  %write192 = getelementptr inbounds %struct.prefetch_info, %struct.prefetch_info* %arrayidx191, i32 0, i32 7
  %bf.load193 = load i8, i8* %write192, align 8
  %bf.clear194 = and i8 %bf.load193, 1
  %bf.cast195 = zext i8 %bf.clear194 to i32
  %or196 = or i32 %bf.cast195, %140
  %142 = trunc i32 %or196 to i8
  %bf.load197 = load i8, i8* %write192, align 8
  %bf.value198 = and i8 %142, 1
  %bf.clear199 = and i8 %bf.load197, -2
  %bf.set200 = or i8 %bf.clear199, %bf.value198
  store i8 %bf.set200, i8* %write192, align 8
  %bf.result.cast201 = zext i8 %bf.value198 to i32
  %143 = load i32, i32* %size, align 4
  %144 = load i32, i32* %i, align 4
  %idxprom202 = sext i32 %144 to i64
  %arrayidx203 = getelementptr inbounds [100 x %struct.prefetch_info], [100 x %struct.prefetch_info]* %info, i32 0, i64 %idxprom202
  %bytes_accesed204 = getelementptr inbounds %struct.prefetch_info, %struct.prefetch_info* %arrayidx203, i32 0, i32 5
  %145 = load i32, i32* %bytes_accesed204, align 4
  %add205 = add i32 %145, %143
  store i32 %add205, i32* %bytes_accesed204, align 4
  store i32 0, i32* %add65, align 4
  br label %for.end

if.end.206:                                       ; preds = %land.lhs.true.181, %if.end.175
  br label %if.end.207

if.end.207:                                       ; preds = %if.end.206, %land.lhs.true.134, %for.body.129
  br label %for.inc

for.inc:                                          ; preds = %if.end.207
  %146 = load i32, i32* %i, align 4
  %inc = add nsw i32 %146, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond.126

for.end:                                          ; preds = %if.then.188, %if.then.152, %for.cond.126
  %147 = load i32, i32* %add65, align 4
  %tobool208 = icmp ne i32 %147, 0
  br i1 %tobool208, label %if.then.209, label %if.end.246

if.then.209:                                      ; preds = %for.end
  %148 = load %struct.induction*, %struct.induction** %iv, align 8
  %149 = load i32, i32* %num_prefetches, align 4
  %idxprom210 = sext i32 %149 to i64
  %arrayidx211 = getelementptr inbounds [100 x %struct.prefetch_info], [100 x %struct.prefetch_info]* %info, i32 0, i64 %idxprom210
  %giv212 = getelementptr inbounds %struct.prefetch_info, %struct.prefetch_info* %arrayidx211, i32 0, i32 1
  store %struct.induction* %148, %struct.induction** %giv212, align 8
  %150 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %151 = load i32, i32* %num_prefetches, align 4
  %idxprom213 = sext i32 %151 to i64
  %arrayidx214 = getelementptr inbounds [100 x %struct.prefetch_info], [100 x %struct.prefetch_info]* %info, i32 0, i64 %idxprom213
  %class215 = getelementptr inbounds %struct.prefetch_info, %struct.prefetch_info* %arrayidx214, i32 0, i32 0
  store %struct.iv_class* %150, %struct.iv_class** %class215, align 8
  %152 = load i64, i64* %index, align 8
  %153 = load i32, i32* %num_prefetches, align 4
  %idxprom216 = sext i32 %153 to i64
  %arrayidx217 = getelementptr inbounds [100 x %struct.prefetch_info], [100 x %struct.prefetch_info]* %info, i32 0, i64 %idxprom216
  %index218 = getelementptr inbounds %struct.prefetch_info, %struct.prefetch_info* %arrayidx217, i32 0, i32 3
  store i64 %152, i64* %index218, align 8
  %154 = load i64, i64* %stride, align 8
  %155 = load i32, i32* %num_prefetches, align 4
  %idxprom219 = sext i32 %155 to i64
  %arrayidx220 = getelementptr inbounds [100 x %struct.prefetch_info], [100 x %struct.prefetch_info]* %info, i32 0, i64 %idxprom219
  %stride221 = getelementptr inbounds %struct.prefetch_info, %struct.prefetch_info* %arrayidx220, i32 0, i32 4
  store i64 %154, i64* %stride221, align 8
  %156 = load %struct.rtx_def*, %struct.rtx_def** %address, align 8
  %157 = load i32, i32* %num_prefetches, align 4
  %idxprom222 = sext i32 %157 to i64
  %arrayidx223 = getelementptr inbounds [100 x %struct.prefetch_info], [100 x %struct.prefetch_info]* %info, i32 0, i64 %idxprom222
  %base_address224 = getelementptr inbounds %struct.prefetch_info, %struct.prefetch_info* %arrayidx223, i32 0, i32 2
  store %struct.rtx_def* %156, %struct.rtx_def** %base_address224, align 8
  %mem_write225 = getelementptr inbounds %struct.check_store_data, %struct.check_store_data* %d, i32 0, i32 1
  %158 = load i32, i32* %mem_write225, align 4
  %159 = load i32, i32* %num_prefetches, align 4
  %idxprom226 = sext i32 %159 to i64
  %arrayidx227 = getelementptr inbounds [100 x %struct.prefetch_info], [100 x %struct.prefetch_info]* %info, i32 0, i64 %idxprom226
  %write228 = getelementptr inbounds %struct.prefetch_info, %struct.prefetch_info* %arrayidx227, i32 0, i32 7
  %160 = trunc i32 %158 to i8
  %bf.load229 = load i8, i8* %write228, align 8
  %bf.value230 = and i8 %160, 1
  %bf.clear231 = and i8 %bf.load229, -2
  %bf.set232 = or i8 %bf.clear231, %bf.value230
  store i8 %bf.set232, i8* %write228, align 8
  %bf.result.cast233 = zext i8 %bf.value230 to i32
  %161 = load i32, i32* %size, align 4
  %162 = load i32, i32* %num_prefetches, align 4
  %idxprom234 = sext i32 %162 to i64
  %arrayidx235 = getelementptr inbounds [100 x %struct.prefetch_info], [100 x %struct.prefetch_info]* %info, i32 0, i64 %idxprom234
  %bytes_accesed236 = getelementptr inbounds %struct.prefetch_info, %struct.prefetch_info* %arrayidx235, i32 0, i32 5
  store i32 %161, i32* %bytes_accesed236, align 4
  %163 = load i32, i32* %num_prefetches, align 4
  %inc237 = add nsw i32 %163, 1
  store i32 %inc237, i32* %num_prefetches, align 4
  %164 = load i32, i32* %num_prefetches, align 4
  %cmp238 = icmp sge i32 %164, 100
  br i1 %cmp238, label %if.then.240, label %if.end.245

if.then.240:                                      ; preds = %if.then.209
  %165 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %tobool241 = icmp ne %struct._IO_FILE* %165, null
  br i1 %tobool241, label %if.then.242, label %if.end.244

if.then.242:                                      ; preds = %if.then.240
  %166 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %call243 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %166, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.41, i32 0, i32 0))
  br label %if.end.244

if.end.244:                                       ; preds = %if.then.242, %if.then.240
  br label %return

if.end.245:                                       ; preds = %if.then.209
  br label %if.end.246

if.end.246:                                       ; preds = %if.end.245, %for.end
  br label %for.inc.247

for.inc.247:                                      ; preds = %if.end.246, %if.end.105
  %167 = load %struct.induction*, %struct.induction** %iv, align 8
  %next_iv248 = getelementptr inbounds %struct.induction, %struct.induction* %167, i32 0, i32 17
  %168 = load %struct.induction*, %struct.induction** %next_iv248, align 8
  store %struct.induction* %168, %struct.induction** %iv, align 8
  br label %for.cond.62

for.end.249:                                      ; preds = %for.cond.62
  br label %for.inc.250

for.inc.250:                                      ; preds = %for.end.249, %if.then.60
  %169 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %next = getelementptr inbounds %struct.iv_class, %struct.iv_class* %169, i32 0, i32 9
  %170 = load %struct.iv_class*, %struct.iv_class** %next, align 8
  store %struct.iv_class* %170, %struct.iv_class** %bl, align 8
  br label %for.cond

for.end.251:                                      ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond.252

for.cond.252:                                     ; preds = %for.inc.376, %for.end.251
  %171 = load i32, i32* %i, align 4
  %172 = load i32, i32* %num_prefetches, align 4
  %cmp253 = icmp slt i32 %171, %172
  br i1 %cmp253, label %for.body.255, label %for.end.378

for.body.255:                                     ; preds = %for.cond.252
  %173 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %aux256 = getelementptr inbounds %struct.loop, %struct.loop* %173, i32 0, i32 22
  %174 = load i8*, i8** %aux256, align 8
  %175 = bitcast i8* %174 to %struct.loop_info*
  %n_iterations257 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %175, i32 0, i32 15
  %176 = load i64, i64* %n_iterations257, align 8
  %tobool258 = icmp ne i64 %176, 0
  br i1 %tobool258, label %land.lhs.true.259, label %if.else

land.lhs.true.259:                                ; preds = %for.body.255
  %177 = load i32, i32* %i, align 4
  %idxprom260 = sext i32 %177 to i64
  %arrayidx261 = getelementptr inbounds [100 x %struct.prefetch_info], [100 x %struct.prefetch_info]* %info, i32 0, i64 %idxprom260
  %stride262 = getelementptr inbounds %struct.prefetch_info, %struct.prefetch_info* %arrayidx261, i32 0, i32 4
  %178 = load i64, i64* %stride262, align 8
  %div = sdiv i64 4294967295, %178
  %179 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %aux263 = getelementptr inbounds %struct.loop, %struct.loop* %179, i32 0, i32 22
  %180 = load i8*, i8** %aux263, align 8
  %181 = bitcast i8* %180 to %struct.loop_info*
  %n_iterations264 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %181, i32 0, i32 15
  %182 = load i64, i64* %n_iterations264, align 8
  %cmp265 = icmp uge i64 %div, %182
  br i1 %cmp265, label %if.then.267, label %if.else

if.then.267:                                      ; preds = %land.lhs.true.259
  %183 = load i32, i32* %i, align 4
  %idxprom268 = sext i32 %183 to i64
  %arrayidx269 = getelementptr inbounds [100 x %struct.prefetch_info], [100 x %struct.prefetch_info]* %info, i32 0, i64 %idxprom268
  %stride270 = getelementptr inbounds %struct.prefetch_info, %struct.prefetch_info* %arrayidx269, i32 0, i32 4
  %184 = load i64, i64* %stride270, align 8
  %185 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %aux271 = getelementptr inbounds %struct.loop, %struct.loop* %185, i32 0, i32 22
  %186 = load i8*, i8** %aux271, align 8
  %187 = bitcast i8* %186 to %struct.loop_info*
  %n_iterations272 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %187, i32 0, i32 15
  %188 = load i64, i64* %n_iterations272, align 8
  %mul273 = mul i64 %184, %188
  %conv274 = trunc i64 %mul273 to i32
  %189 = load i32, i32* %i, align 4
  %idxprom275 = sext i32 %189 to i64
  %arrayidx276 = getelementptr inbounds [100 x %struct.prefetch_info], [100 x %struct.prefetch_info]* %info, i32 0, i64 %idxprom275
  %total_bytes = getelementptr inbounds %struct.prefetch_info, %struct.prefetch_info* %arrayidx276, i32 0, i32 6
  store i32 %conv274, i32* %total_bytes, align 4
  br label %if.end.280

if.else:                                          ; preds = %land.lhs.true.259, %for.body.255
  %190 = load i32, i32* %i, align 4
  %idxprom277 = sext i32 %190 to i64
  %arrayidx278 = getelementptr inbounds [100 x %struct.prefetch_info], [100 x %struct.prefetch_info]* %info, i32 0, i64 %idxprom277
  %total_bytes279 = getelementptr inbounds %struct.prefetch_info, %struct.prefetch_info* %arrayidx278, i32 0, i32 6
  store i32 -1, i32* %total_bytes279, align 4
  br label %if.end.280

if.end.280:                                       ; preds = %if.else, %if.then.267
  %191 = load i32, i32* %i, align 4
  %idxprom281 = sext i32 %191 to i64
  %arrayidx282 = getelementptr inbounds [100 x %struct.prefetch_info], [100 x %struct.prefetch_info]* %info, i32 0, i64 %idxprom281
  %bytes_accesed283 = getelementptr inbounds %struct.prefetch_info, %struct.prefetch_info* %arrayidx282, i32 0, i32 5
  %192 = load i32, i32* %bytes_accesed283, align 4
  %mul284 = mul i32 %192, 256
  %conv285 = zext i32 %mul284 to i64
  %193 = load i32, i32* %i, align 4
  %idxprom286 = sext i32 %193 to i64
  %arrayidx287 = getelementptr inbounds [100 x %struct.prefetch_info], [100 x %struct.prefetch_info]* %info, i32 0, i64 %idxprom286
  %stride288 = getelementptr inbounds %struct.prefetch_info, %struct.prefetch_info* %arrayidx287, i32 0, i32 4
  %194 = load i64, i64* %stride288, align 8
  %div289 = sdiv i64 %conv285, %194
  %cmp290 = icmp sgt i64 %div289, 220
  br i1 %cmp290, label %land.lhs.true.292, label %if.else.319

land.lhs.true.292:                                ; preds = %if.end.280
  %195 = load i32, i32* %i, align 4
  %idxprom293 = sext i32 %195 to i64
  %arrayidx294 = getelementptr inbounds [100 x %struct.prefetch_info], [100 x %struct.prefetch_info]* %info, i32 0, i64 %idxprom293
  %total_bytes295 = getelementptr inbounds %struct.prefetch_info, %struct.prefetch_info* %arrayidx294, i32 0, i32 6
  %196 = load i32, i32* %total_bytes295, align 4
  %197 = load %struct.processor_costs*, %struct.processor_costs** @ix86_cost, align 8
  %prefetch_block = getelementptr inbounds %struct.processor_costs, %struct.processor_costs* %197, i32 0, i32 24
  %198 = load i32, i32* %prefetch_block, align 4
  %div296 = udiv i32 %196, %198
  %cmp297 = icmp uge i32 %div296, 2
  br i1 %cmp297, label %if.then.299, label %if.else.319

if.then.299:                                      ; preds = %land.lhs.true.292
  %199 = load i32, i32* %i, align 4
  %idxprom300 = sext i32 %199 to i64
  %arrayidx301 = getelementptr inbounds [100 x %struct.prefetch_info], [100 x %struct.prefetch_info]* %info, i32 0, i64 %idxprom300
  %prefetch_before_loop = getelementptr inbounds %struct.prefetch_info, %struct.prefetch_info* %arrayidx301, i32 0, i32 7
  %bf.load302 = load i8, i8* %prefetch_before_loop, align 8
  %bf.clear303 = and i8 %bf.load302, -5
  %bf.set304 = or i8 %bf.clear303, 4
  store i8 %bf.set304, i8* %prefetch_before_loop, align 8
  %200 = load i32, i32* %i, align 4
  %idxprom305 = sext i32 %200 to i64
  %arrayidx306 = getelementptr inbounds [100 x %struct.prefetch_info], [100 x %struct.prefetch_info]* %info, i32 0, i64 %idxprom305
  %total_bytes307 = getelementptr inbounds %struct.prefetch_info, %struct.prefetch_info* %arrayidx306, i32 0, i32 6
  %201 = load i32, i32* %total_bytes307, align 4
  %202 = load %struct.processor_costs*, %struct.processor_costs** @ix86_cost, align 8
  %prefetch_block308 = getelementptr inbounds %struct.processor_costs, %struct.processor_costs* %202, i32 0, i32 24
  %203 = load i32, i32* %prefetch_block308, align 4
  %div309 = udiv i32 %201, %203
  %cmp310 = icmp ugt i32 %div309, 6
  %conv311 = zext i1 %cmp310 to i32
  %204 = load i32, i32* %i, align 4
  %idxprom312 = sext i32 %204 to i64
  %arrayidx313 = getelementptr inbounds [100 x %struct.prefetch_info], [100 x %struct.prefetch_info]* %info, i32 0, i64 %idxprom312
  %prefetch_in_loop = getelementptr inbounds %struct.prefetch_info, %struct.prefetch_info* %arrayidx313, i32 0, i32 7
  %205 = trunc i32 %conv311 to i8
  %bf.load314 = load i8, i8* %prefetch_in_loop, align 8
  %bf.value315 = and i8 %205, 1
  %bf.shl = shl i8 %bf.value315, 1
  %bf.clear316 = and i8 %bf.load314, -3
  %bf.set317 = or i8 %bf.clear316, %bf.shl
  store i8 %bf.set317, i8* %prefetch_in_loop, align 8
  %bf.result.cast318 = zext i8 %bf.value315 to i32
  br label %if.end.330

if.else.319:                                      ; preds = %land.lhs.true.292, %if.end.280
  %206 = load i32, i32* %i, align 4
  %idxprom320 = sext i32 %206 to i64
  %arrayidx321 = getelementptr inbounds [100 x %struct.prefetch_info], [100 x %struct.prefetch_info]* %info, i32 0, i64 %idxprom320
  %prefetch_in_loop322 = getelementptr inbounds %struct.prefetch_info, %struct.prefetch_info* %arrayidx321, i32 0, i32 7
  %bf.load323 = load i8, i8* %prefetch_in_loop322, align 8
  %bf.clear324 = and i8 %bf.load323, -3
  store i8 %bf.clear324, i8* %prefetch_in_loop322, align 8
  %207 = load i32, i32* %i, align 4
  %idxprom325 = sext i32 %207 to i64
  %arrayidx326 = getelementptr inbounds [100 x %struct.prefetch_info], [100 x %struct.prefetch_info]* %info, i32 0, i64 %idxprom325
  %prefetch_before_loop327 = getelementptr inbounds %struct.prefetch_info, %struct.prefetch_info* %arrayidx326, i32 0, i32 7
  %bf.load328 = load i8, i8* %prefetch_before_loop327, align 8
  %bf.clear329 = and i8 %bf.load328, -5
  store i8 %bf.clear329, i8* %prefetch_before_loop327, align 8
  br label %if.end.330

if.end.330:                                       ; preds = %if.else.319, %if.then.299
  %208 = load i32, i32* %i, align 4
  %idxprom331 = sext i32 %208 to i64
  %arrayidx332 = getelementptr inbounds [100 x %struct.prefetch_info], [100 x %struct.prefetch_info]* %info, i32 0, i64 %idxprom331
  %prefetch_in_loop333 = getelementptr inbounds %struct.prefetch_info, %struct.prefetch_info* %arrayidx332, i32 0, i32 7
  %bf.load334 = load i8, i8* %prefetch_in_loop333, align 8
  %bf.lshr335 = lshr i8 %bf.load334, 1
  %bf.clear336 = and i8 %bf.lshr335, 1
  %bf.cast337 = zext i8 %bf.clear336 to i32
  %tobool338 = icmp ne i32 %bf.cast337, 0
  br i1 %tobool338, label %if.then.339, label %if.end.375

if.then.339:                                      ; preds = %if.end.330
  %209 = load i32, i32* %i, align 4
  %idxprom340 = sext i32 %209 to i64
  %arrayidx341 = getelementptr inbounds [100 x %struct.prefetch_info], [100 x %struct.prefetch_info]* %info, i32 0, i64 %idxprom340
  %stride342 = getelementptr inbounds %struct.prefetch_info, %struct.prefetch_info* %arrayidx341, i32 0, i32 4
  %210 = load i64, i64* %stride342, align 8
  %211 = load %struct.processor_costs*, %struct.processor_costs** @ix86_cost, align 8
  %prefetch_block343 = getelementptr inbounds %struct.processor_costs, %struct.processor_costs* %211, i32 0, i32 24
  %212 = load i32, i32* %prefetch_block343, align 4
  %conv344 = sext i32 %212 to i64
  %add345 = add nsw i64 %210, %conv344
  %sub346 = sub nsw i64 %add345, 1
  %213 = load %struct.processor_costs*, %struct.processor_costs** @ix86_cost, align 8
  %prefetch_block347 = getelementptr inbounds %struct.processor_costs, %struct.processor_costs* %213, i32 0, i32 24
  %214 = load i32, i32* %prefetch_block347, align 4
  %conv348 = sext i32 %214 to i64
  %div349 = sdiv i64 %sub346, %conv348
  %215 = load i32, i32* %num_real_prefetches, align 4
  %conv350 = sext i32 %215 to i64
  %add351 = add nsw i64 %conv350, %div349
  %conv352 = trunc i64 %add351 to i32
  store i32 %conv352, i32* %num_real_prefetches, align 4
  %216 = load i32, i32* %i, align 4
  %idxprom353 = sext i32 %216 to i64
  %arrayidx354 = getelementptr inbounds [100 x %struct.prefetch_info], [100 x %struct.prefetch_info]* %info, i32 0, i64 %idxprom353
  %write355 = getelementptr inbounds %struct.prefetch_info, %struct.prefetch_info* %arrayidx354, i32 0, i32 7
  %bf.load356 = load i8, i8* %write355, align 8
  %bf.clear357 = and i8 %bf.load356, 1
  %bf.cast358 = zext i8 %bf.clear357 to i32
  %tobool359 = icmp ne i32 %bf.cast358, 0
  br i1 %tobool359, label %if.then.360, label %if.end.374

if.then.360:                                      ; preds = %if.then.339
  %217 = load i32, i32* %i, align 4
  %idxprom361 = sext i32 %217 to i64
  %arrayidx362 = getelementptr inbounds [100 x %struct.prefetch_info], [100 x %struct.prefetch_info]* %info, i32 0, i64 %idxprom361
  %stride363 = getelementptr inbounds %struct.prefetch_info, %struct.prefetch_info* %arrayidx362, i32 0, i32 4
  %218 = load i64, i64* %stride363, align 8
  %219 = load %struct.processor_costs*, %struct.processor_costs** @ix86_cost, align 8
  %prefetch_block364 = getelementptr inbounds %struct.processor_costs, %struct.processor_costs* %219, i32 0, i32 24
  %220 = load i32, i32* %prefetch_block364, align 4
  %conv365 = sext i32 %220 to i64
  %add366 = add nsw i64 %218, %conv365
  %sub367 = sub nsw i64 %add366, 1
  %221 = load %struct.processor_costs*, %struct.processor_costs** @ix86_cost, align 8
  %prefetch_block368 = getelementptr inbounds %struct.processor_costs, %struct.processor_costs* %221, i32 0, i32 24
  %222 = load i32, i32* %prefetch_block368, align 4
  %conv369 = sext i32 %222 to i64
  %div370 = sdiv i64 %sub367, %conv369
  %223 = load i32, i32* %num_real_write_prefetches, align 4
  %conv371 = sext i32 %223 to i64
  %add372 = add nsw i64 %conv371, %div370
  %conv373 = trunc i64 %add372 to i32
  store i32 %conv373, i32* %num_real_write_prefetches, align 4
  br label %if.end.374

if.end.374:                                       ; preds = %if.then.360, %if.then.339
  br label %if.end.375

if.end.375:                                       ; preds = %if.end.374, %if.end.330
  br label %for.inc.376

for.inc.376:                                      ; preds = %if.end.375
  %224 = load i32, i32* %i, align 4
  %inc377 = add nsw i32 %224, 1
  store i32 %inc377, i32* %i, align 4
  br label %for.cond.252

for.end.378:                                      ; preds = %for.cond.252
  %225 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %tobool379 = icmp ne %struct._IO_FILE* %225, null
  br i1 %tobool379, label %if.then.380, label %if.end.450

if.then.380:                                      ; preds = %for.end.378
  store i32 0, i32* %i, align 4
  br label %for.cond.381

for.cond.381:                                     ; preds = %for.inc.446, %if.then.380
  %226 = load i32, i32* %i, align 4
  %227 = load i32, i32* %num_prefetches, align 4
  %cmp382 = icmp slt i32 %226, %227
  br i1 %cmp382, label %for.body.384, label %for.end.448

for.body.384:                                     ; preds = %for.cond.381
  %228 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %229 = load i32, i32* %i, align 4
  %idxprom385 = sext i32 %229 to i64
  %arrayidx386 = getelementptr inbounds [100 x %struct.prefetch_info], [100 x %struct.prefetch_info]* %info, i32 0, i64 %idxprom385
  %giv387 = getelementptr inbounds %struct.prefetch_info, %struct.prefetch_info* %arrayidx386, i32 0, i32 1
  %230 = load %struct.induction*, %struct.induction** %giv387, align 8
  %insn388 = getelementptr inbounds %struct.induction, %struct.induction* %230, i32 0, i32 0
  %231 = load %struct.rtx_def*, %struct.rtx_def** %insn388, align 8
  %fld389 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %231, i32 0, i32 1
  %arrayidx390 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld389, i32 0, i64 0
  %rtint391 = bitcast %union.rtunion_def* %arrayidx390 to i32*
  %232 = load i32, i32* %rtint391, align 4
  %call392 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %228, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.42, i32 0, i32 0), i32 %232)
  %233 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %234 = load i32, i32* %i, align 4
  %idxprom393 = sext i32 %234 to i64
  %arrayidx394 = getelementptr inbounds [100 x %struct.prefetch_info], [100 x %struct.prefetch_info]* %info, i32 0, i64 %idxprom393
  %base_address395 = getelementptr inbounds %struct.prefetch_info, %struct.prefetch_info* %arrayidx394, i32 0, i32 2
  %235 = load %struct.rtx_def*, %struct.rtx_def** %base_address395, align 8
  call void @print_rtl(%struct._IO_FILE* %233, %struct.rtx_def* %235)
  %236 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %call396 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %236, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.43, i32 0, i32 0))
  %237 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %238 = load i32, i32* %i, align 4
  %idxprom397 = sext i32 %238 to i64
  %arrayidx398 = getelementptr inbounds [100 x %struct.prefetch_info], [100 x %struct.prefetch_info]* %info, i32 0, i64 %idxprom397
  %index399 = getelementptr inbounds %struct.prefetch_info, %struct.prefetch_info* %arrayidx398, i32 0, i32 3
  %239 = load i64, i64* %index399, align 8
  %call400 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %237, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.44, i32 0, i32 0), i64 %239)
  %240 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %call401 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %240, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.45, i32 0, i32 0))
  %241 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %242 = load i32, i32* %i, align 4
  %idxprom402 = sext i32 %242 to i64
  %arrayidx403 = getelementptr inbounds [100 x %struct.prefetch_info], [100 x %struct.prefetch_info]* %info, i32 0, i64 %idxprom402
  %stride404 = getelementptr inbounds %struct.prefetch_info, %struct.prefetch_info* %arrayidx403, i32 0, i32 4
  %243 = load i64, i64* %stride404, align 8
  %call405 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %241, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.44, i32 0, i32 0), i64 %243)
  %244 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %245 = load i32, i32* %i, align 4
  %idxprom406 = sext i32 %245 to i64
  %arrayidx407 = getelementptr inbounds [100 x %struct.prefetch_info], [100 x %struct.prefetch_info]* %info, i32 0, i64 %idxprom406
  %bytes_accesed408 = getelementptr inbounds %struct.prefetch_info, %struct.prefetch_info* %arrayidx407, i32 0, i32 5
  %246 = load i32, i32* %bytes_accesed408, align 4
  %mul409 = mul i32 %246, 100
  %conv410 = zext i32 %mul409 to i64
  %247 = load i32, i32* %i, align 4
  %idxprom411 = sext i32 %247 to i64
  %arrayidx412 = getelementptr inbounds [100 x %struct.prefetch_info], [100 x %struct.prefetch_info]* %info, i32 0, i64 %idxprom411
  %stride413 = getelementptr inbounds %struct.prefetch_info, %struct.prefetch_info* %arrayidx412, i32 0, i32 4
  %248 = load i64, i64* %stride413, align 8
  %div414 = sdiv i64 %conv410, %248
  %conv415 = trunc i64 %div414 to i32
  %249 = load i32, i32* %i, align 4
  %idxprom416 = sext i32 %249 to i64
  %arrayidx417 = getelementptr inbounds [100 x %struct.prefetch_info], [100 x %struct.prefetch_info]* %info, i32 0, i64 %idxprom416
  %total_bytes418 = getelementptr inbounds %struct.prefetch_info, %struct.prefetch_info* %arrayidx417, i32 0, i32 6
  %250 = load i32, i32* %total_bytes418, align 4
  %251 = load i32, i32* %i, align 4
  %idxprom419 = sext i32 %251 to i64
  %arrayidx420 = getelementptr inbounds [100 x %struct.prefetch_info], [100 x %struct.prefetch_info]* %info, i32 0, i64 %idxprom419
  %write421 = getelementptr inbounds %struct.prefetch_info, %struct.prefetch_info* %arrayidx420, i32 0, i32 7
  %bf.load422 = load i8, i8* %write421, align 8
  %bf.clear423 = and i8 %bf.load422, 1
  %bf.cast424 = zext i8 %bf.clear423 to i32
  %tobool425 = icmp ne i32 %bf.cast424, 0
  %cond426 = select i1 %tobool425, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.47, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.48, i32 0, i32 0)
  %252 = load i32, i32* %i, align 4
  %idxprom427 = sext i32 %252 to i64
  %arrayidx428 = getelementptr inbounds [100 x %struct.prefetch_info], [100 x %struct.prefetch_info]* %info, i32 0, i64 %idxprom427
  %prefetch_in_loop429 = getelementptr inbounds %struct.prefetch_info, %struct.prefetch_info* %arrayidx428, i32 0, i32 7
  %bf.load430 = load i8, i8* %prefetch_in_loop429, align 8
  %bf.lshr431 = lshr i8 %bf.load430, 1
  %bf.clear432 = and i8 %bf.lshr431, 1
  %bf.cast433 = zext i8 %bf.clear432 to i32
  %tobool434 = icmp ne i32 %bf.cast433, 0
  %cond435 = select i1 %tobool434, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.49, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.50, i32 0, i32 0)
  %253 = load i32, i32* %i, align 4
  %idxprom436 = sext i32 %253 to i64
  %arrayidx437 = getelementptr inbounds [100 x %struct.prefetch_info], [100 x %struct.prefetch_info]* %info, i32 0, i64 %idxprom436
  %prefetch_before_loop438 = getelementptr inbounds %struct.prefetch_info, %struct.prefetch_info* %arrayidx437, i32 0, i32 7
  %bf.load439 = load i8, i8* %prefetch_before_loop438, align 8
  %bf.lshr440 = lshr i8 %bf.load439, 2
  %bf.clear441 = and i8 %bf.lshr440, 1
  %bf.cast442 = zext i8 %bf.clear441 to i32
  %tobool443 = icmp ne i32 %bf.cast442, 0
  %cond444 = select i1 %tobool443, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.49, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.50, i32 0, i32 0)
  %call445 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %244, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.46, i32 0, i32 0), i32 %conv415, i32 %250, i8* %cond426, i8* %cond435, i8* %cond444)
  br label %for.inc.446

for.inc.446:                                      ; preds = %for.body.384
  %254 = load i32, i32* %i, align 4
  %inc447 = add nsw i32 %254, 1
  store i32 %inc447, i32* %i, align 4
  br label %for.cond.381

for.end.448:                                      ; preds = %for.cond.381
  %255 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %256 = load i32, i32* %num_real_prefetches, align 4
  %257 = load i32, i32* %num_real_write_prefetches, align 4
  %call449 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %255, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.51, i32 0, i32 0), i32 %256, i32 %257)
  br label %if.end.450

if.end.450:                                       ; preds = %for.end.448, %for.end.378
  %258 = load i32, i32* %num_real_prefetches, align 4
  %tobool451 = icmp ne i32 %258, 0
  br i1 %tobool451, label %if.end.453, label %if.then.452

if.then.452:                                      ; preds = %if.end.450
  br label %return

if.end.453:                                       ; preds = %if.end.450
  %259 = load %struct.processor_costs*, %struct.processor_costs** @ix86_cost, align 8
  %simultaneous_prefetches = getelementptr inbounds %struct.processor_costs, %struct.processor_costs* %259, i32 0, i32 25
  %260 = load i32, i32* %simultaneous_prefetches, align 4
  %261 = load i32, i32* %num_real_prefetches, align 4
  %div454 = sdiv i32 %260, %261
  store i32 %div454, i32* %ahead, align 4
  %262 = load i32, i32* %ahead, align 4
  %tobool455 = icmp ne i32 %262, 0
  br i1 %tobool455, label %if.end.457, label %if.then.456

if.then.456:                                      ; preds = %if.end.453
  br label %return

if.end.457:                                       ; preds = %if.end.453
  store i32 0, i32* %i, align 4
  br label %for.cond.458

for.cond.458:                                     ; preds = %for.inc.648, %if.end.457
  %263 = load i32, i32* %i, align 4
  %264 = load i32, i32* %num_prefetches, align 4
  %cmp459 = icmp slt i32 %263, %264
  br i1 %cmp459, label %for.body.461, label %for.end.650

for.body.461:                                     ; preds = %for.cond.458
  %265 = load i32, i32* %i, align 4
  %idxprom462 = sext i32 %265 to i64
  %arrayidx463 = getelementptr inbounds [100 x %struct.prefetch_info], [100 x %struct.prefetch_info]* %info, i32 0, i64 %idxprom462
  %prefetch_in_loop464 = getelementptr inbounds %struct.prefetch_info, %struct.prefetch_info* %arrayidx463, i32 0, i32 7
  %bf.load465 = load i8, i8* %prefetch_in_loop464, align 8
  %bf.lshr466 = lshr i8 %bf.load465, 1
  %bf.clear467 = and i8 %bf.lshr466, 1
  %bf.cast468 = zext i8 %bf.clear467 to i32
  %tobool469 = icmp ne i32 %bf.cast468, 0
  br i1 %tobool469, label %if.then.470, label %if.end.576

if.then.470:                                      ; preds = %for.body.461
  store i32 0, i32* %y, align 4
  br label %for.cond.471

for.cond.471:                                     ; preds = %for.inc.573, %if.then.470
  %266 = load i32, i32* %y, align 4
  %conv472 = sext i32 %266 to i64
  %267 = load i32, i32* %i, align 4
  %idxprom473 = sext i32 %267 to i64
  %arrayidx474 = getelementptr inbounds [100 x %struct.prefetch_info], [100 x %struct.prefetch_info]* %info, i32 0, i64 %idxprom473
  %stride475 = getelementptr inbounds %struct.prefetch_info, %struct.prefetch_info* %arrayidx474, i32 0, i32 4
  %268 = load i64, i64* %stride475, align 8
  %269 = load %struct.processor_costs*, %struct.processor_costs** @ix86_cost, align 8
  %prefetch_block476 = getelementptr inbounds %struct.processor_costs, %struct.processor_costs* %269, i32 0, i32 24
  %270 = load i32, i32* %prefetch_block476, align 4
  %conv477 = sext i32 %270 to i64
  %add478 = add nsw i64 %268, %conv477
  %sub479 = sub nsw i64 %add478, 1
  %271 = load %struct.processor_costs*, %struct.processor_costs** @ix86_cost, align 8
  %prefetch_block480 = getelementptr inbounds %struct.processor_costs, %struct.processor_costs* %271, i32 0, i32 24
  %272 = load i32, i32* %prefetch_block480, align 4
  %conv481 = sext i32 %272 to i64
  %div482 = sdiv i64 %sub479, %conv481
  %cmp483 = icmp slt i64 %conv472, %div482
  br i1 %cmp483, label %for.body.485, label %for.end.575

for.body.485:                                     ; preds = %for.cond.471
  %273 = load i32, i32* %i, align 4
  %idxprom486 = sext i32 %273 to i64
  %arrayidx487 = getelementptr inbounds [100 x %struct.prefetch_info], [100 x %struct.prefetch_info]* %info, i32 0, i64 %idxprom486
  %giv488 = getelementptr inbounds %struct.prefetch_info, %struct.prefetch_info* %arrayidx487, i32 0, i32 1
  %274 = load %struct.induction*, %struct.induction** %giv488, align 8
  %location489 = getelementptr inbounds %struct.induction, %struct.induction* %274, i32 0, i32 5
  %275 = load %struct.rtx_def**, %struct.rtx_def*** %location489, align 8
  %276 = load %struct.rtx_def*, %struct.rtx_def** %275, align 8
  %call490 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %276)
  store %struct.rtx_def* %call490, %struct.rtx_def** %loc, align 8
  %277 = load %struct.processor_costs*, %struct.processor_costs** @ix86_cost, align 8
  %prefetch_block492 = getelementptr inbounds %struct.processor_costs, %struct.processor_costs* %277, i32 0, i32 24
  %278 = load i32, i32* %prefetch_block492, align 4
  %279 = load i32, i32* %ahead, align 4
  %280 = load i32, i32* %y, align 4
  %add493 = add nsw i32 %279, %280
  %mul494 = mul nsw i32 %278, %add493
  store i32 %mul494, i32* %bytes_ahead, align 4
  %281 = load i32, i32* %i, align 4
  %idxprom495 = sext i32 %281 to i64
  %arrayidx496 = getelementptr inbounds [100 x %struct.prefetch_info], [100 x %struct.prefetch_info]* %info, i32 0, i64 %idxprom495
  %giv497 = getelementptr inbounds %struct.prefetch_info, %struct.prefetch_info* %arrayidx496, i32 0, i32 1
  %282 = load %struct.induction*, %struct.induction** %giv497, align 8
  %insn498 = getelementptr inbounds %struct.induction, %struct.induction* %282, i32 0, i32 0
  %283 = load %struct.rtx_def*, %struct.rtx_def** %insn498, align 8
  store %struct.rtx_def* %283, %struct.rtx_def** %before_insn, align 8
  %284 = load i32, i32* %i, align 4
  %idxprom499 = sext i32 %284 to i64
  %arrayidx500 = getelementptr inbounds [100 x %struct.prefetch_info], [100 x %struct.prefetch_info]* %info, i32 0, i64 %idxprom499
  %giv501 = getelementptr inbounds %struct.prefetch_info, %struct.prefetch_info* %arrayidx500, i32 0, i32 1
  %285 = load %struct.induction*, %struct.induction** %giv501, align 8
  %insn502 = getelementptr inbounds %struct.induction, %struct.induction* %285, i32 0, i32 0
  %286 = load %struct.rtx_def*, %struct.rtx_def** %insn502, align 8
  %fld503 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %286, i32 0, i32 1
  %arrayidx504 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld503, i32 0, i64 1
  %rtx505 = bitcast %union.rtunion_def* %arrayidx504 to %struct.rtx_def**
  %287 = load %struct.rtx_def*, %struct.rtx_def** %rtx505, align 8
  store %struct.rtx_def* %287, %struct.rtx_def** %prev_insn, align 8
  %288 = load %struct.rtx_def*, %struct.rtx_def** %loc, align 8
  %call506 = call i32 @offsettable_address_p(i32 0, i32 0, %struct.rtx_def* %288)
  %tobool507 = icmp ne i32 %call506, 0
  br i1 %tobool507, label %if.then.508, label %if.else.511

if.then.508:                                      ; preds = %for.body.485
  %289 = load %struct.rtx_def*, %struct.rtx_def** %loc, align 8
  %290 = load i32, i32* %bytes_ahead, align 4
  %conv509 = sext i32 %290 to i64
  %call510 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %289, i64 %conv509)
  store %struct.rtx_def* %call510, %struct.rtx_def** %loc, align 8
  br label %if.end.518

if.else.511:                                      ; preds = %for.body.485
  %291 = load i32, i32* @target_flags, align 4
  %and512 = and i32 %291, 33554432
  %tobool513 = icmp ne i32 %and512, 0
  %cond514 = select i1 %tobool513, i32 5, i32 4
  %call515 = call %struct.rtx_def* @gen_reg_rtx(i32 %cond514)
  store %struct.rtx_def* %call515, %struct.rtx_def** %reg, align 8
  %292 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %293 = load %struct.rtx_def*, %struct.rtx_def** %loc, align 8
  %294 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %295 = load i32, i32* %bytes_ahead, align 4
  %conv516 = sext i32 %295 to i64
  %call517 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv516)
  %296 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %297 = load %struct.rtx_def*, %struct.rtx_def** %before_insn, align 8
  call void @loop_iv_add_mult_emit_before(%struct.loop* %292, %struct.rtx_def* %293, %struct.rtx_def* %294, %struct.rtx_def* %call517, %struct.rtx_def* %296, %struct.basic_block_def* null, %struct.rtx_def* %297)
  %298 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  store %struct.rtx_def* %298, %struct.rtx_def** %loc, align 8
  br label %if.end.518

if.end.518:                                       ; preds = %if.else.511, %if.then.508
  call void @start_sequence()
  %299 = load %struct.insn_operand_data*, %struct.insn_operand_data** getelementptr inbounds ([0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 1316, i32 3), align 8
  %arrayidx519 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %299, i64 0
  %predicate = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx519, i32 0, i32 0
  %300 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate, align 8
  %301 = load %struct.rtx_def*, %struct.rtx_def** %loc, align 8
  %302 = load %struct.insn_operand_data*, %struct.insn_operand_data** getelementptr inbounds ([0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 1316, i32 3), align 8
  %arrayidx520 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %302, i64 0
  %mode521 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx520, i32 0, i32 2
  %bf.load522 = load i16, i16* %mode521, align 8
  %bf.cast523 = zext i16 %bf.load522 to i32
  %call524 = call i32 %300(%struct.rtx_def* %301, i32 %bf.cast523)
  %tobool525 = icmp ne i32 %call524, 0
  br i1 %tobool525, label %if.end.531, label %if.then.526

if.then.526:                                      ; preds = %if.end.518
  %303 = load i32, i32* @target_flags, align 4
  %and527 = and i32 %303, 33554432
  %tobool528 = icmp ne i32 %and527, 0
  %cond529 = select i1 %tobool528, i32 5, i32 4
  %304 = load %struct.rtx_def*, %struct.rtx_def** %loc, align 8
  %call530 = call %struct.rtx_def* @force_reg(i32 %cond529, %struct.rtx_def* %304)
  store %struct.rtx_def* %call530, %struct.rtx_def** %loc, align 8
  br label %if.end.531

if.end.531:                                       ; preds = %if.then.526, %if.end.518
  %305 = load %struct.rtx_def*, %struct.rtx_def** %loc, align 8
  %306 = load i32, i32* %i, align 4
  %idxprom532 = sext i32 %306 to i64
  %arrayidx533 = getelementptr inbounds [100 x %struct.prefetch_info], [100 x %struct.prefetch_info]* %info, i32 0, i64 %idxprom532
  %write534 = getelementptr inbounds %struct.prefetch_info, %struct.prefetch_info* %arrayidx533, i32 0, i32 7
  %bf.load535 = load i8, i8* %write534, align 8
  %bf.clear536 = and i8 %bf.load535, 1
  %bf.cast537 = zext i8 %bf.clear536 to i32
  %conv538 = zext i32 %bf.cast537 to i64
  %call539 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv538)
  %call540 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 3)
  %call541 = call %struct.rtx_def* @gen_prefetch(%struct.rtx_def* %305, %struct.rtx_def* %call539, %struct.rtx_def* %call540)
  %call542 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call541)
  %call543 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call543, %struct.rtx_def** %seq, align 8
  call void @end_sequence()
  %307 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8
  %308 = load %struct.rtx_def*, %struct.rtx_def** %before_insn, align 8
  %call544 = call %struct.rtx_def* @emit_insn_before(%struct.rtx_def* %307, %struct.rtx_def* %308)
  %309 = load %struct.rtx_def*, %struct.rtx_def** %prev_insn, align 8
  %fld545 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %309, i32 0, i32 1
  %arrayidx546 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld545, i32 0, i64 2
  %rtx547 = bitcast %union.rtunion_def* %arrayidx546 to %struct.rtx_def**
  %310 = load %struct.rtx_def*, %struct.rtx_def** %rtx547, align 8
  store %struct.rtx_def* %310, %struct.rtx_def** %insn491, align 8
  br label %while.cond.548

while.cond.548:                                   ; preds = %while.body.551, %if.end.531
  %311 = load %struct.rtx_def*, %struct.rtx_def** %insn491, align 8
  %312 = load %struct.rtx_def*, %struct.rtx_def** %before_insn, align 8
  %cmp549 = icmp ne %struct.rtx_def* %311, %312
  br i1 %cmp549, label %while.body.551, label %while.end.572

while.body.551:                                   ; preds = %while.cond.548
  %313 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %314 = load %struct.rtx_def*, %struct.rtx_def** %insn491, align 8
  %315 = load i32, i32* %i, align 4
  %idxprom552 = sext i32 %315 to i64
  %arrayidx553 = getelementptr inbounds [100 x %struct.prefetch_info], [100 x %struct.prefetch_info]* %info, i32 0, i64 %idxprom552
  %giv554 = getelementptr inbounds %struct.prefetch_info, %struct.prefetch_info* %arrayidx553, i32 0, i32 1
  %316 = load %struct.induction*, %struct.induction** %giv554, align 8
  %always_executed555 = getelementptr inbounds %struct.induction, %struct.induction* %316, i32 0, i32 13
  %bf.load556 = load i16, i16* %always_executed555, align 4
  %bf.lshr557 = lshr i16 %bf.load556, 4
  %bf.clear558 = and i16 %bf.lshr557, 1
  %bf.cast559 = zext i16 %bf.clear558 to i32
  %317 = load i32, i32* %i, align 4
  %idxprom560 = sext i32 %317 to i64
  %arrayidx561 = getelementptr inbounds [100 x %struct.prefetch_info], [100 x %struct.prefetch_info]* %info, i32 0, i64 %idxprom560
  %giv562 = getelementptr inbounds %struct.prefetch_info, %struct.prefetch_info* %arrayidx561, i32 0, i32 1
  %318 = load %struct.induction*, %struct.induction** %giv562, align 8
  %maybe_multiple563 = getelementptr inbounds %struct.induction, %struct.induction* %318, i32 0, i32 13
  %bf.load564 = load i16, i16* %maybe_multiple563, align 4
  %bf.lshr565 = lshr i16 %bf.load564, 5
  %bf.clear566 = and i16 %bf.lshr565, 1
  %bf.cast567 = zext i16 %bf.clear566 to i32
  %call568 = call %struct.rtx_def* @check_insn_for_givs(%struct.loop* %313, %struct.rtx_def* %314, i32 %bf.cast559, i32 %bf.cast567)
  store %struct.rtx_def* %call568, %struct.rtx_def** %insn491, align 8
  %319 = load %struct.rtx_def*, %struct.rtx_def** %insn491, align 8
  %fld569 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %319, i32 0, i32 1
  %arrayidx570 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld569, i32 0, i64 2
  %rtx571 = bitcast %union.rtunion_def* %arrayidx570 to %struct.rtx_def**
  %320 = load %struct.rtx_def*, %struct.rtx_def** %rtx571, align 8
  store %struct.rtx_def* %320, %struct.rtx_def** %insn491, align 8
  br label %while.cond.548

while.end.572:                                    ; preds = %while.cond.548
  br label %for.inc.573

for.inc.573:                                      ; preds = %while.end.572
  %321 = load i32, i32* %y, align 4
  %inc574 = add nsw i32 %321, 1
  store i32 %inc574, i32* %y, align 4
  br label %for.cond.471

for.end.575:                                      ; preds = %for.cond.471
  br label %if.end.576

if.end.576:                                       ; preds = %for.end.575, %for.body.461
  %322 = load i32, i32* %i, align 4
  %idxprom577 = sext i32 %322 to i64
  %arrayidx578 = getelementptr inbounds [100 x %struct.prefetch_info], [100 x %struct.prefetch_info]* %info, i32 0, i64 %idxprom577
  %prefetch_before_loop579 = getelementptr inbounds %struct.prefetch_info, %struct.prefetch_info* %arrayidx578, i32 0, i32 7
  %bf.load580 = load i8, i8* %prefetch_before_loop579, align 8
  %bf.lshr581 = lshr i8 %bf.load580, 2
  %bf.clear582 = and i8 %bf.lshr581, 1
  %bf.cast583 = zext i8 %bf.clear582 to i32
  %tobool584 = icmp ne i32 %bf.cast583, 0
  br i1 %tobool584, label %if.then.585, label %if.end.647

if.then.585:                                      ; preds = %if.end.576
  store i32 0, i32* %y586, align 4
  br label %for.cond.587

for.cond.587:                                     ; preds = %for.inc.644, %if.then.585
  %323 = load i32, i32* %i, align 4
  %idxprom588 = sext i32 %323 to i64
  %arrayidx589 = getelementptr inbounds [100 x %struct.prefetch_info], [100 x %struct.prefetch_info]* %info, i32 0, i64 %idxprom588
  %prefetch_in_loop590 = getelementptr inbounds %struct.prefetch_info, %struct.prefetch_info* %arrayidx589, i32 0, i32 7
  %bf.load591 = load i8, i8* %prefetch_in_loop590, align 8
  %bf.lshr592 = lshr i8 %bf.load591, 1
  %bf.clear593 = and i8 %bf.lshr592, 1
  %bf.cast594 = zext i8 %bf.clear593 to i32
  %tobool595 = icmp ne i32 %bf.cast594, 0
  br i1 %tobool595, label %lor.lhs.false.596, label %land.rhs

lor.lhs.false.596:                                ; preds = %for.cond.587
  %324 = load i32, i32* %y586, align 4
  %325 = load i32, i32* %ahead, align 4
  %cmp597 = icmp slt i32 %324, %325
  br i1 %cmp597, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %lor.lhs.false.596, %for.cond.587
  %326 = load i32, i32* %y586, align 4
  %327 = load %struct.processor_costs*, %struct.processor_costs** @ix86_cost, align 8
  %prefetch_block599 = getelementptr inbounds %struct.processor_costs, %struct.processor_costs* %327, i32 0, i32 24
  %328 = load i32, i32* %prefetch_block599, align 4
  %mul600 = mul nsw i32 %326, %328
  %329 = load i32, i32* %i, align 4
  %idxprom601 = sext i32 %329 to i64
  %arrayidx602 = getelementptr inbounds [100 x %struct.prefetch_info], [100 x %struct.prefetch_info]* %info, i32 0, i64 %idxprom601
  %total_bytes603 = getelementptr inbounds %struct.prefetch_info, %struct.prefetch_info* %arrayidx602, i32 0, i32 6
  %330 = load i32, i32* %total_bytes603, align 4
  %cmp604 = icmp slt i32 %mul600, %330
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.lhs.false.596
  %331 = phi i1 [ false, %lor.lhs.false.596 ], [ %cmp604, %land.rhs ]
  br i1 %331, label %for.body.606, label %for.end.646

for.body.606:                                     ; preds = %land.end
  %332 = load i32, i32* @target_flags, align 4
  %and608 = and i32 %332, 33554432
  %tobool609 = icmp ne i32 %and608, 0
  %cond610 = select i1 %tobool609, i32 5, i32 4
  %call611 = call %struct.rtx_def* @gen_reg_rtx(i32 %cond610)
  store %struct.rtx_def* %call611, %struct.rtx_def** %reg607, align 8
  %333 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %start = getelementptr inbounds %struct.loop, %struct.loop* %333, i32 0, i32 26
  %334 = load %struct.rtx_def*, %struct.rtx_def** %start, align 8
  store %struct.rtx_def* %334, %struct.rtx_def** %loop_start, align 8
  %335 = load i32, i32* @target_flags, align 4
  %and613 = and i32 %335, 33554432
  %tobool614 = icmp ne i32 %and613, 0
  %cond615 = select i1 %tobool614, i32 5, i32 4
  %336 = load i32, i32* %i, align 4
  %idxprom616 = sext i32 %336 to i64
  %arrayidx617 = getelementptr inbounds [100 x %struct.prefetch_info], [100 x %struct.prefetch_info]* %info, i32 0, i64 %idxprom616
  %giv618 = getelementptr inbounds %struct.prefetch_info, %struct.prefetch_info* %arrayidx617, i32 0, i32 1
  %337 = load %struct.induction*, %struct.induction** %giv618, align 8
  %add_val619 = getelementptr inbounds %struct.induction, %struct.induction* %337, i32 0, i32 9
  %338 = load %struct.rtx_def*, %struct.rtx_def** %add_val619, align 8
  %339 = load i32, i32* %y586, align 4
  %340 = load %struct.processor_costs*, %struct.processor_costs** @ix86_cost, align 8
  %prefetch_block620 = getelementptr inbounds %struct.processor_costs, %struct.processor_costs* %340, i32 0, i32 24
  %341 = load i32, i32* %prefetch_block620, align 4
  %mul621 = mul nsw i32 %339, %341
  %conv622 = sext i32 %mul621 to i64
  %call623 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv622)
  %call624 = call %struct.rtx_def* @simplify_gen_binary(i32 75, i32 %cond615, %struct.rtx_def* %338, %struct.rtx_def* %call623)
  store %struct.rtx_def* %call624, %struct.rtx_def** %add_val612, align 8
  %342 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %343 = load i32, i32* %i, align 4
  %idxprom625 = sext i32 %343 to i64
  %arrayidx626 = getelementptr inbounds [100 x %struct.prefetch_info], [100 x %struct.prefetch_info]* %info, i32 0, i64 %idxprom625
  %class627 = getelementptr inbounds %struct.prefetch_info, %struct.prefetch_info* %arrayidx626, i32 0, i32 0
  %344 = load %struct.iv_class*, %struct.iv_class** %class627, align 8
  %initial_value628 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %344, i32 0, i32 6
  %345 = load %struct.rtx_def*, %struct.rtx_def** %initial_value628, align 8
  %346 = load i32, i32* %i, align 4
  %idxprom629 = sext i32 %346 to i64
  %arrayidx630 = getelementptr inbounds [100 x %struct.prefetch_info], [100 x %struct.prefetch_info]* %info, i32 0, i64 %idxprom629
  %giv631 = getelementptr inbounds %struct.prefetch_info, %struct.prefetch_info* %arrayidx630, i32 0, i32 1
  %347 = load %struct.induction*, %struct.induction** %giv631, align 8
  %mult_val632 = getelementptr inbounds %struct.induction, %struct.induction* %347, i32 0, i32 8
  %348 = load %struct.rtx_def*, %struct.rtx_def** %mult_val632, align 8
  %349 = load %struct.rtx_def*, %struct.rtx_def** %add_val612, align 8
  %350 = load %struct.rtx_def*, %struct.rtx_def** %reg607, align 8
  %351 = load %struct.rtx_def*, %struct.rtx_def** %loop_start, align 8
  call void @loop_iv_add_mult_emit_before(%struct.loop* %342, %struct.rtx_def* %345, %struct.rtx_def* %348, %struct.rtx_def* %349, %struct.rtx_def* %350, %struct.basic_block_def* null, %struct.rtx_def* %351)
  %352 = load %struct.rtx_def*, %struct.rtx_def** %reg607, align 8
  %353 = load i32, i32* %i, align 4
  %idxprom633 = sext i32 %353 to i64
  %arrayidx634 = getelementptr inbounds [100 x %struct.prefetch_info], [100 x %struct.prefetch_info]* %info, i32 0, i64 %idxprom633
  %write635 = getelementptr inbounds %struct.prefetch_info, %struct.prefetch_info* %arrayidx634, i32 0, i32 7
  %bf.load636 = load i8, i8* %write635, align 8
  %bf.clear637 = and i8 %bf.load636, 1
  %bf.cast638 = zext i8 %bf.clear637 to i32
  %conv639 = zext i32 %bf.cast638 to i64
  %call640 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv639)
  %call641 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 3)
  %call642 = call %struct.rtx_def* @gen_prefetch(%struct.rtx_def* %352, %struct.rtx_def* %call640, %struct.rtx_def* %call641)
  %354 = load %struct.rtx_def*, %struct.rtx_def** %loop_start, align 8
  %call643 = call %struct.rtx_def* @emit_insn_before(%struct.rtx_def* %call642, %struct.rtx_def* %354)
  br label %for.inc.644

for.inc.644:                                      ; preds = %for.body.606
  %355 = load i32, i32* %y586, align 4
  %inc645 = add nsw i32 %355, 1
  store i32 %inc645, i32* %y586, align 4
  br label %for.cond.587

for.end.646:                                      ; preds = %land.end
  br label %if.end.647

if.end.647:                                       ; preds = %for.end.646, %if.end.576
  br label %for.inc.648

for.inc.648:                                      ; preds = %if.end.647
  %356 = load i32, i32* %i, align 4
  %inc649 = add nsw i32 %356, 1
  store i32 %inc649, i32* %i, align 4
  br label %for.cond.458

for.end.650:                                      ; preds = %for.cond.458
  br label %return

return:                                           ; preds = %for.end.650, %if.then.456, %if.then.452, %if.end.244, %if.end.18, %if.end.7, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @loop_givs_check(%struct.loop* %loop) #0 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %ivs = alloca %struct.loop_ivs*, align 8
  %bl = alloca %struct.iv_class*, align 8
  %v = alloca %struct.induction*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %aux = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 22
  %1 = load i8*, i8** %aux, align 8
  %2 = bitcast i8* %1 to %struct.loop_info*
  %ivs1 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %2, i32 0, i32 29
  store %struct.loop_ivs* %ivs1, %struct.loop_ivs** %ivs, align 8
  %3 = load %struct.loop_ivs*, %struct.loop_ivs** %ivs, align 8
  %list = getelementptr inbounds %struct.loop_ivs, %struct.loop_ivs* %3, i32 0, i32 2
  %4 = load %struct.iv_class*, %struct.iv_class** %list, align 8
  store %struct.iv_class* %4, %struct.iv_class** %bl, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc.10, %entry
  %5 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %tobool = icmp ne %struct.iv_class* %5, null
  br i1 %tobool, label %for.body, label %for.end.11

for.body:                                         ; preds = %for.cond
  %6 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %giv = getelementptr inbounds %struct.iv_class, %struct.iv_class* %6, i32 0, i32 4
  %7 = load %struct.induction*, %struct.induction** %giv, align 8
  store %struct.induction* %7, %struct.induction** %v, align 8
  br label %for.cond.2

for.cond.2:                                       ; preds = %for.inc, %for.body
  %8 = load %struct.induction*, %struct.induction** %v, align 8
  %tobool3 = icmp ne %struct.induction* %8, null
  br i1 %tobool3, label %for.body.4, label %for.end

for.body.4:                                       ; preds = %for.cond.2
  %9 = load %struct.induction*, %struct.induction** %v, align 8
  %replaceable = getelementptr inbounds %struct.induction, %struct.induction* %9, i32 0, i32 13
  %bf.load = load i16, i16* %replaceable, align 4
  %bf.clear = and i16 %bf.load, 1
  %bf.cast = zext i16 %bf.clear to i32
  %tobool5 = icmp ne i32 %bf.cast, 0
  br i1 %tobool5, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.body.4
  %10 = load %struct.induction*, %struct.induction** %v, align 8
  %not_replaceable = getelementptr inbounds %struct.induction, %struct.induction* %10, i32 0, i32 13
  %bf.load6 = load i16, i16* %not_replaceable, align 4
  %bf.lshr = lshr i16 %bf.load6, 1
  %bf.clear7 = and i16 %bf.lshr, 1
  %bf.cast8 = zext i16 %bf.clear7 to i32
  %tobool9 = icmp ne i32 %bf.cast8, 0
  br i1 %tobool9, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %11 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %12 = load %struct.induction*, %struct.induction** %v, align 8
  call void @check_final_value(%struct.loop* %11, %struct.induction* %12)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body.4
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %13 = load %struct.induction*, %struct.induction** %v, align 8
  %next_iv = getelementptr inbounds %struct.induction, %struct.induction* %13, i32 0, i32 17
  %14 = load %struct.induction*, %struct.induction** %next_iv, align 8
  store %struct.induction* %14, %struct.induction** %v, align 8
  br label %for.cond.2

for.end:                                          ; preds = %for.cond.2
  br label %for.inc.10

for.inc.10:                                       ; preds = %for.end
  %15 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %next = getelementptr inbounds %struct.iv_class, %struct.iv_class* %15, i32 0, i32 9
  %16 = load %struct.iv_class*, %struct.iv_class** %next, align 8
  store %struct.iv_class* %16, %struct.iv_class** %bl, align 8
  br label %for.cond

for.end.11:                                       ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @check_dbra_loop(%struct.loop* %loop, i32 %insn_count) #0 {
entry:
  %retval = alloca i32, align 4
  %loop.addr = alloca %struct.loop*, align 8
  %insn_count.addr = alloca i32, align 4
  %loop_info = alloca %struct.loop_info*, align 8
  %regs = alloca %struct.loop_regs*, align 8
  %ivs = alloca %struct.loop_ivs*, align 8
  %bl = alloca %struct.iv_class*, align 8
  %reg = alloca %struct.rtx_def*, align 8
  %jump_label = alloca %struct.rtx_def*, align 8
  %final_value = alloca %struct.rtx_def*, align 8
  %start_value = alloca %struct.rtx_def*, align 8
  %new_add_val = alloca %struct.rtx_def*, align 8
  %comparison = alloca %struct.rtx_def*, align 8
  %before_comparison = alloca %struct.rtx_def*, align 8
  %p = alloca %struct.rtx_def*, align 8
  %jump = alloca %struct.rtx_def*, align 8
  %first_compare = alloca %struct.rtx_def*, align 8
  %compare_and_branch = alloca i32, align 4
  %loop_start = alloca %struct.rtx_def*, align 8
  %loop_end = alloca %struct.rtx_def*, align 8
  %jump1 = alloca %struct.rtx_def*, align 8
  %num_nonfixed_reads = alloca i32, align 4
  %no_use_except_counting = alloca i32, align 4
  %reversible_mem_store = alloca i32, align 4
  %bivreg = alloca %struct.rtx_def*, align 8
  %blt = alloca %struct.iv_class*, align 8
  %set = alloca %struct.rtx_def*, align 8
  %v = alloca %struct.induction*, align 8
  %tem = alloca %struct.rtx_def*, align 8
  %add_val428 = alloca i64, align 8
  %add_adjust = alloca i64, align 8
  %comparison_val = alloca i64, align 8
  %initial_value429 = alloca %struct.rtx_def*, align 8
  %comparison_value = alloca %struct.rtx_def*, align 8
  %nonneg430 = alloca i32, align 4
  %cmp_code = alloca i32, align 4
  %comparison_const_width = alloca i32, align 4
  %comparison_sign_mask = alloca i64, align 8
  %mode = alloca i32, align 4
  %offset = alloca %struct.rtx_def*, align 8
  %add_insn = alloca %struct.rtx_def*, align 8
  %mode637 = alloca i32, align 4
  %sub_insn = alloca %struct.rtx_def*, align 8
  %pnote = alloca %struct.rtx_def**, align 8
  %set771 = alloca %struct.rtx_def*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  store i32 %insn_count, i32* %insn_count.addr, align 4
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %aux = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 22
  %1 = load i8*, i8** %aux, align 8
  %2 = bitcast i8* %1 to %struct.loop_info*
  store %struct.loop_info* %2, %struct.loop_info** %loop_info, align 8
  %3 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %aux1 = getelementptr inbounds %struct.loop, %struct.loop* %3, i32 0, i32 22
  %4 = load i8*, i8** %aux1, align 8
  %5 = bitcast i8* %4 to %struct.loop_info*
  %regs2 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %5, i32 0, i32 28
  store %struct.loop_regs* %regs2, %struct.loop_regs** %regs, align 8
  %6 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %aux3 = getelementptr inbounds %struct.loop, %struct.loop* %6, i32 0, i32 22
  %7 = load i8*, i8** %aux3, align 8
  %8 = bitcast i8* %7 to %struct.loop_info*
  %ivs4 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %8, i32 0, i32 29
  store %struct.loop_ivs* %ivs4, %struct.loop_ivs** %ivs, align 8
  %9 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %start = getelementptr inbounds %struct.loop, %struct.loop* %9, i32 0, i32 26
  %10 = load %struct.rtx_def*, %struct.rtx_def** %start, align 8
  store %struct.rtx_def* %10, %struct.rtx_def** %loop_start, align 8
  %11 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %end = getelementptr inbounds %struct.loop, %struct.loop* %11, i32 0, i32 27
  %12 = load %struct.rtx_def*, %struct.rtx_def** %end, align 8
  store %struct.rtx_def* %12, %struct.rtx_def** %loop_end, align 8
  %13 = load %struct.rtx_def*, %struct.rtx_def** %loop_end, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 1
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %14 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %14, %struct.rtx_def** %jump, align 8
  %15 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %16 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8
  %call = call %struct.rtx_def* @get_condition_for_loop(%struct.loop* %15, %struct.rtx_def* %16)
  store %struct.rtx_def* %call, %struct.rtx_def** %comparison, align 8
  %17 = load %struct.rtx_def*, %struct.rtx_def** %comparison, align 8
  %cmp = icmp eq %struct.rtx_def* %17, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %18 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8
  %call5 = call i32 @onlyjump_p(%struct.rtx_def* %18)
  %tobool = icmp ne i32 %call5, 0
  br i1 %tobool, label %if.end.7, label %if.then.6

if.then.6:                                        ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

if.end.7:                                         ; preds = %if.end
  %19 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8
  %call8 = call %struct.rtx_def* @get_condition(%struct.rtx_def* %19, %struct.rtx_def** %first_compare)
  %20 = load %struct.rtx_def*, %struct.rtx_def** %first_compare, align 8
  %21 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8
  %cmp9 = icmp eq %struct.rtx_def* %20, %21
  br i1 %cmp9, label %if.then.10, label %if.else

if.then.10:                                       ; preds = %if.end.7
  store i32 1, i32* %compare_and_branch, align 4
  br label %if.end.16

if.else:                                          ; preds = %if.end.7
  %22 = load %struct.rtx_def*, %struct.rtx_def** %first_compare, align 8
  %23 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8
  %call11 = call %struct.rtx_def* @prev_nonnote_insn(%struct.rtx_def* %23)
  %cmp12 = icmp eq %struct.rtx_def* %22, %call11
  br i1 %cmp12, label %if.then.13, label %if.else.14

if.then.13:                                       ; preds = %if.else
  store i32 2, i32* %compare_and_branch, align 4
  br label %if.end.15

if.else.14:                                       ; preds = %if.else
  store i32 0, i32* %retval
  br label %return

if.end.15:                                        ; preds = %if.then.13
  br label %if.end.16

if.end.16:                                        ; preds = %if.end.15, %if.then.10
  %24 = load %struct.rtx_def*, %struct.rtx_def** %first_compare, align 8
  %call17 = call %struct.rtx_def* @prev_nonnote_insn(%struct.rtx_def* %24)
  store %struct.rtx_def* %call17, %struct.rtx_def** %jump1, align 8
  %25 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %cont = getelementptr inbounds %struct.loop, %struct.loop* %25, i32 0, i32 24
  %26 = load %struct.rtx_def*, %struct.rtx_def** %cont, align 8
  %cmp18 = icmp ne %struct.rtx_def* %call17, %26
  br i1 %cmp18, label %if.then.19, label %if.end.23

if.then.19:                                       ; preds = %if.end.16
  %27 = load %struct.rtx_def*, %struct.rtx_def** %jump1, align 8
  %28 = bitcast %struct.rtx_def* %27 to i32*
  %bf.load = load i32, i32* %28, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp20 = icmp eq i32 %bf.clear, 33
  br i1 %cmp20, label %if.then.21, label %if.end.22

if.then.21:                                       ; preds = %if.then.19
  store i32 0, i32* %retval
  br label %return

if.end.22:                                        ; preds = %if.then.19
  br label %if.end.23

if.end.23:                                        ; preds = %if.end.22, %if.end.16
  %29 = load %struct.loop_ivs*, %struct.loop_ivs** %ivs, align 8
  %list = getelementptr inbounds %struct.loop_ivs, %struct.loop_ivs* %29, i32 0, i32 2
  %30 = load %struct.iv_class*, %struct.iv_class** %list, align 8
  store %struct.iv_class* %30, %struct.iv_class** %bl, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.23
  %31 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %tobool24 = icmp ne %struct.iv_class* %31, null
  br i1 %tobool24, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %32 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %biv_count = getelementptr inbounds %struct.iv_class, %struct.iv_class* %32, i32 0, i32 1
  %33 = load i32, i32* %biv_count, align 4
  %cmp25 = icmp eq i32 %33, 1
  br i1 %cmp25, label %land.lhs.true, label %if.end.41

land.lhs.true:                                    ; preds = %for.body
  %34 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %biv = getelementptr inbounds %struct.iv_class, %struct.iv_class* %34, i32 0, i32 2
  %35 = load %struct.induction*, %struct.induction** %biv, align 8
  %maybe_multiple = getelementptr inbounds %struct.induction, %struct.induction* %35, i32 0, i32 13
  %bf.load26 = load i16, i16* %maybe_multiple, align 4
  %bf.lshr = lshr i16 %bf.load26, 5
  %bf.clear27 = and i16 %bf.lshr, 1
  %bf.cast = zext i16 %bf.clear27 to i32
  %tobool28 = icmp ne i32 %bf.cast, 0
  br i1 %tobool28, label %if.end.41, label %land.lhs.true.29

land.lhs.true.29:                                 ; preds = %land.lhs.true
  %36 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %biv30 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %36, i32 0, i32 2
  %37 = load %struct.induction*, %struct.induction** %biv30, align 8
  %dest_reg = getelementptr inbounds %struct.induction, %struct.induction* %37, i32 0, i32 4
  %38 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg, align 8
  %39 = load %struct.rtx_def*, %struct.rtx_def** %comparison, align 8
  %fld31 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1
  %arrayidx32 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld31, i32 0, i64 0
  %rtx33 = bitcast %union.rtunion_def* %arrayidx32 to %struct.rtx_def**
  %40 = load %struct.rtx_def*, %struct.rtx_def** %rtx33, align 8
  %cmp34 = icmp eq %struct.rtx_def* %38, %40
  br i1 %cmp34, label %land.lhs.true.35, label %if.end.41

land.lhs.true.35:                                 ; preds = %land.lhs.true.29
  %41 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %regno = getelementptr inbounds %struct.iv_class, %struct.iv_class* %41, i32 0, i32 0
  %42 = load i32, i32* %regno, align 4
  %idxprom = zext i32 %42 to i64
  %43 = load %struct.function*, %struct.function** @cfun, align 8
  %emit = getelementptr inbounds %struct.function, %struct.function* %43, i32 0, i32 3
  %44 = load %struct.emit_status*, %struct.emit_status** %emit, align 8
  %x_regno_reg_rtx = getelementptr inbounds %struct.emit_status, %struct.emit_status* %44, i32 0, i32 12
  %45 = load %struct.rtx_def**, %struct.rtx_def*** %x_regno_reg_rtx, align 8
  %arrayidx36 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %45, i64 %idxprom
  %46 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx36, align 8
  %47 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %biv37 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %47, i32 0, i32 2
  %48 = load %struct.induction*, %struct.induction** %biv37, align 8
  %insn = getelementptr inbounds %struct.induction, %struct.induction* %48, i32 0, i32 0
  %49 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %50 = load %struct.rtx_def*, %struct.rtx_def** %first_compare, align 8
  %call38 = call i32 @reg_used_between_p(%struct.rtx_def* %46, %struct.rtx_def* %49, %struct.rtx_def* %50)
  %tobool39 = icmp ne i32 %call38, 0
  br i1 %tobool39, label %if.end.41, label %if.then.40

if.then.40:                                       ; preds = %land.lhs.true.35
  br label %for.end

if.end.41:                                        ; preds = %land.lhs.true.35, %land.lhs.true.29, %land.lhs.true, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.41
  %51 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %next = getelementptr inbounds %struct.iv_class, %struct.iv_class* %51, i32 0, i32 9
  %52 = load %struct.iv_class*, %struct.iv_class** %next, align 8
  store %struct.iv_class* %52, %struct.iv_class** %bl, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then.40, %for.cond
  %53 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %tobool42 = icmp ne %struct.iv_class* %53, null
  br i1 %tobool42, label %if.end.44, label %if.then.43

if.then.43:                                       ; preds = %for.end
  store i32 0, i32* %retval
  br label %return

if.end.44:                                        ; preds = %for.end
  %54 = load %struct.rtx_def*, %struct.rtx_def** %comparison, align 8
  %55 = bitcast %struct.rtx_def* %54 to i32*
  %bf.load45 = load i32, i32* %55, align 8
  %bf.clear46 = and i32 %bf.load45, 65535
  %cmp47 = icmp eq i32 %bf.clear46, 105
  br i1 %cmp47, label %land.lhs.true.48, label %lor.lhs.false

land.lhs.true.48:                                 ; preds = %if.end.44
  %56 = load %struct.rtx_def*, %struct.rtx_def** %comparison, align 8
  %fld49 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %56, i32 0, i32 1
  %arrayidx50 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld49, i32 0, i64 1
  %rtx51 = bitcast %union.rtunion_def* %arrayidx50 to %struct.rtx_def**
  %57 = load %struct.rtx_def*, %struct.rtx_def** %rtx51, align 8
  %58 = bitcast %struct.rtx_def* %57 to i32*
  %bf.load52 = load i32, i32* %58, align 8
  %bf.clear53 = and i32 %bf.load52, 65535
  %cmp54 = icmp eq i32 %bf.clear53, 54
  br i1 %cmp54, label %land.lhs.true.55, label %lor.lhs.false

land.lhs.true.55:                                 ; preds = %land.lhs.true.48
  %59 = load %struct.rtx_def*, %struct.rtx_def** %comparison, align 8
  %fld56 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %59, i32 0, i32 1
  %arrayidx57 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld56, i32 0, i64 1
  %rtx58 = bitcast %union.rtunion_def* %arrayidx57 to %struct.rtx_def**
  %60 = load %struct.rtx_def*, %struct.rtx_def** %rtx58, align 8
  %fld59 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %60, i32 0, i32 1
  %arrayidx60 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld59, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx60 to i64*
  %61 = load i64, i64* %rtwint, align 8
  %cmp61 = icmp eq i64 %61, -1
  br i1 %cmp61, label %land.lhs.true.70, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.55, %land.lhs.true.48, %if.end.44
  %62 = load %struct.rtx_def*, %struct.rtx_def** %comparison, align 8
  %63 = bitcast %struct.rtx_def* %62 to i32*
  %bf.load62 = load i32, i32* %63, align 8
  %bf.clear63 = and i32 %bf.load62, 65535
  %cmp64 = icmp eq i32 %bf.clear63, 102
  br i1 %cmp64, label %land.lhs.true.65, label %if.else.187

land.lhs.true.65:                                 ; preds = %lor.lhs.false
  %64 = load %struct.rtx_def*, %struct.rtx_def** %comparison, align 8
  %fld66 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %64, i32 0, i32 1
  %arrayidx67 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld66, i32 0, i64 1
  %rtx68 = bitcast %union.rtunion_def* %arrayidx67 to %struct.rtx_def**
  %65 = load %struct.rtx_def*, %struct.rtx_def** %rtx68, align 8
  %66 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %cmp69 = icmp eq %struct.rtx_def* %65, %66
  br i1 %cmp69, label %land.lhs.true.70, label %if.else.187

land.lhs.true.70:                                 ; preds = %land.lhs.true.65, %land.lhs.true.55
  %67 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %biv71 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %67, i32 0, i32 2
  %68 = load %struct.induction*, %struct.induction** %biv71, align 8
  %add_val = getelementptr inbounds %struct.induction, %struct.induction* %68, i32 0, i32 9
  %69 = load %struct.rtx_def*, %struct.rtx_def** %add_val, align 8
  %70 = bitcast %struct.rtx_def* %69 to i32*
  %bf.load72 = load i32, i32* %70, align 8
  %bf.clear73 = and i32 %bf.load72, 65535
  %cmp74 = icmp eq i32 %bf.clear73, 54
  br i1 %cmp74, label %land.lhs.true.75, label %if.else.187

land.lhs.true.75:                                 ; preds = %land.lhs.true.70
  %71 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %biv76 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %71, i32 0, i32 2
  %72 = load %struct.induction*, %struct.induction** %biv76, align 8
  %add_val77 = getelementptr inbounds %struct.induction, %struct.induction* %72, i32 0, i32 9
  %73 = load %struct.rtx_def*, %struct.rtx_def** %add_val77, align 8
  %fld78 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %73, i32 0, i32 1
  %arrayidx79 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld78, i32 0, i64 0
  %rtwint80 = bitcast %union.rtunion_def* %arrayidx79 to i64*
  %74 = load i64, i64* %rtwint80, align 8
  %cmp81 = icmp slt i64 %74, 0
  br i1 %cmp81, label %if.then.82, label %if.else.187

if.then.82:                                       ; preds = %land.lhs.true.75
  %75 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %initial_value = getelementptr inbounds %struct.iv_class, %struct.iv_class* %75, i32 0, i32 6
  %76 = load %struct.rtx_def*, %struct.rtx_def** %initial_value, align 8
  %77 = bitcast %struct.rtx_def* %76 to i32*
  %bf.load83 = load i32, i32* %77, align 8
  %bf.clear84 = and i32 %bf.load83, 65535
  %cmp85 = icmp eq i32 %bf.clear84, 54
  br i1 %cmp85, label %land.lhs.true.86, label %if.end.119

land.lhs.true.86:                                 ; preds = %if.then.82
  %78 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %initial_value87 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %78, i32 0, i32 6
  %79 = load %struct.rtx_def*, %struct.rtx_def** %initial_value87, align 8
  %fld88 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %79, i32 0, i32 1
  %arrayidx89 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld88, i32 0, i64 0
  %rtwint90 = bitcast %union.rtunion_def* %arrayidx89 to i64*
  %80 = load i64, i64* %rtwint90, align 8
  %cmp91 = icmp sgt i64 %80, 0
  br i1 %cmp91, label %land.lhs.true.92, label %if.end.119

land.lhs.true.92:                                 ; preds = %land.lhs.true.86
  %81 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %initial_value93 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %81, i32 0, i32 6
  %82 = load %struct.rtx_def*, %struct.rtx_def** %initial_value93, align 8
  %fld94 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %82, i32 0, i32 1
  %arrayidx95 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld94, i32 0, i64 0
  %rtwint96 = bitcast %union.rtunion_def* %arrayidx95 to i64*
  %83 = load i64, i64* %rtwint96, align 8
  %84 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %biv97 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %84, i32 0, i32 2
  %85 = load %struct.induction*, %struct.induction** %biv97, align 8
  %add_val98 = getelementptr inbounds %struct.induction, %struct.induction* %85, i32 0, i32 9
  %86 = load %struct.rtx_def*, %struct.rtx_def** %add_val98, align 8
  %fld99 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %86, i32 0, i32 1
  %arrayidx100 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld99, i32 0, i64 0
  %rtwint101 = bitcast %union.rtunion_def* %arrayidx100 to i64*
  %87 = load i64, i64* %rtwint101, align 8
  %sub = sub nsw i64 0, %87
  %rem = srem i64 %83, %sub
  %cmp102 = icmp eq i64 %rem, 0
  br i1 %cmp102, label %if.then.103, label %if.end.119

if.then.103:                                      ; preds = %land.lhs.true.92
  %88 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8
  %call104 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %88, i32 8, %struct.rtx_def* null)
  %tobool105 = icmp ne %struct.rtx_def* %call104, null
  br i1 %tobool105, label %if.end.116, label %if.then.106

if.then.106:                                      ; preds = %if.then.103
  %89 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %biv107 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %89, i32 0, i32 2
  %90 = load %struct.induction*, %struct.induction** %biv107, align 8
  %dest_reg108 = getelementptr inbounds %struct.induction, %struct.induction* %90, i32 0, i32 4
  %91 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg108, align 8
  %92 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8
  %fld109 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %92, i32 0, i32 1
  %arrayidx110 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld109, i32 0, i64 6
  %rtx111 = bitcast %union.rtunion_def* %arrayidx110 to %struct.rtx_def**
  %93 = load %struct.rtx_def*, %struct.rtx_def** %rtx111, align 8
  %call112 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 8, %struct.rtx_def* %91, %struct.rtx_def* %93)
  %94 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8
  %fld113 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %94, i32 0, i32 1
  %arrayidx114 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld113, i32 0, i64 6
  %rtx115 = bitcast %union.rtunion_def* %arrayidx114 to %struct.rtx_def**
  store %struct.rtx_def* %call112, %struct.rtx_def** %rtx115, align 8
  br label %if.end.116

if.end.116:                                       ; preds = %if.then.106, %if.then.103
  %95 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %nonneg = getelementptr inbounds %struct.iv_class, %struct.iv_class* %95, i32 0, i32 12
  %bf.load117 = load i8, i8* %nonneg, align 8
  %bf.clear118 = and i8 %bf.load117, -5
  %bf.set = or i8 %bf.clear118, 4
  store i8 %bf.set, i8* %nonneg, align 8
  store i32 1, i32* %retval
  br label %return

if.end.119:                                       ; preds = %land.lhs.true.92, %land.lhs.true.86, %if.then.82
  %96 = load %struct.rtx_def*, %struct.rtx_def** %loop_start, align 8
  store %struct.rtx_def* %96, %struct.rtx_def** %p, align 8
  br label %for.cond.120

for.cond.120:                                     ; preds = %for.inc.182, %if.end.119
  %97 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %tobool121 = icmp ne %struct.rtx_def* %97, null
  br i1 %tobool121, label %for.body.122, label %for.end.186

for.body.122:                                     ; preds = %for.cond.120
  %98 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %99 = bitcast %struct.rtx_def* %98 to i32*
  %bf.load123 = load i32, i32* %99, align 8
  %bf.clear124 = and i32 %bf.load123, 65535
  %cmp125 = icmp eq i32 %bf.clear124, 36
  br i1 %cmp125, label %if.then.126, label %if.end.127

if.then.126:                                      ; preds = %for.body.122
  br label %for.end.186

if.end.127:                                       ; preds = %for.body.122
  %100 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %101 = bitcast %struct.rtx_def* %100 to i32*
  %bf.load128 = load i32, i32* %101, align 8
  %bf.clear129 = and i32 %bf.load128, 65535
  %cmp130 = icmp ne i32 %bf.clear129, 33
  br i1 %cmp130, label %if.then.131, label %if.end.132

if.then.131:                                      ; preds = %if.end.127
  br label %for.inc.182

if.end.132:                                       ; preds = %if.end.127
  %102 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %103 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %call133 = call %struct.rtx_def* @get_condition_for_loop(%struct.loop* %102, %struct.rtx_def* %103)
  store %struct.rtx_def* %call133, %struct.rtx_def** %before_comparison, align 8
  %104 = load %struct.rtx_def*, %struct.rtx_def** %before_comparison, align 8
  %tobool134 = icmp ne %struct.rtx_def* %104, null
  br i1 %tobool134, label %land.lhs.true.135, label %if.end.181

land.lhs.true.135:                                ; preds = %if.end.132
  %105 = load %struct.rtx_def*, %struct.rtx_def** %before_comparison, align 8
  %fld136 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %105, i32 0, i32 1
  %arrayidx137 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld136, i32 0, i64 0
  %rtx138 = bitcast %union.rtunion_def* %arrayidx137 to %struct.rtx_def**
  %106 = load %struct.rtx_def*, %struct.rtx_def** %rtx138, align 8
  %107 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %biv139 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %107, i32 0, i32 2
  %108 = load %struct.induction*, %struct.induction** %biv139, align 8
  %dest_reg140 = getelementptr inbounds %struct.induction, %struct.induction* %108, i32 0, i32 4
  %109 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg140, align 8
  %cmp141 = icmp eq %struct.rtx_def* %106, %109
  br i1 %cmp141, label %land.lhs.true.142, label %if.end.181

land.lhs.true.142:                                ; preds = %land.lhs.true.135
  %110 = load %struct.rtx_def*, %struct.rtx_def** %before_comparison, align 8
  %111 = bitcast %struct.rtx_def* %110 to i32*
  %bf.load143 = load i32, i32* %111, align 8
  %bf.clear144 = and i32 %bf.load143, 65535
  %cmp145 = icmp eq i32 %bf.clear144, 107
  br i1 %cmp145, label %land.lhs.true.146, label %if.end.181

land.lhs.true.146:                                ; preds = %land.lhs.true.142
  %112 = load %struct.rtx_def*, %struct.rtx_def** %before_comparison, align 8
  %fld147 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %112, i32 0, i32 1
  %arrayidx148 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld147, i32 0, i64 1
  %rtx149 = bitcast %union.rtunion_def* %arrayidx148 to %struct.rtx_def**
  %113 = load %struct.rtx_def*, %struct.rtx_def** %rtx149, align 8
  %114 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %cmp150 = icmp eq %struct.rtx_def* %113, %114
  br i1 %cmp150, label %land.lhs.true.151, label %if.end.181

land.lhs.true.151:                                ; preds = %land.lhs.true.146
  %115 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %biv152 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %115, i32 0, i32 2
  %116 = load %struct.induction*, %struct.induction** %biv152, align 8
  %dest_reg153 = getelementptr inbounds %struct.induction, %struct.induction* %116, i32 0, i32 4
  %117 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg153, align 8
  %118 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %119 = load %struct.rtx_def*, %struct.rtx_def** %loop_start, align 8
  %call154 = call i32 @reg_set_between_p(%struct.rtx_def* %117, %struct.rtx_def* %118, %struct.rtx_def* %119)
  %tobool155 = icmp ne i32 %call154, 0
  br i1 %tobool155, label %if.end.181, label %land.lhs.true.156

land.lhs.true.156:                                ; preds = %land.lhs.true.151
  %120 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %biv157 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %120, i32 0, i32 2
  %121 = load %struct.induction*, %struct.induction** %biv157, align 8
  %add_val158 = getelementptr inbounds %struct.induction, %struct.induction* %121, i32 0, i32 9
  %122 = load %struct.rtx_def*, %struct.rtx_def** %add_val158, align 8
  %fld159 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %122, i32 0, i32 1
  %arrayidx160 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld159, i32 0, i64 0
  %rtwint161 = bitcast %union.rtunion_def* %arrayidx160 to i64*
  %123 = load i64, i64* %rtwint161, align 8
  %cmp162 = icmp eq i64 %123, -1
  br i1 %cmp162, label %if.then.163, label %if.end.181

if.then.163:                                      ; preds = %land.lhs.true.156
  %124 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8
  %call164 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %124, i32 8, %struct.rtx_def* null)
  %tobool165 = icmp ne %struct.rtx_def* %call164, null
  br i1 %tobool165, label %if.end.176, label %if.then.166

if.then.166:                                      ; preds = %if.then.163
  %125 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %biv167 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %125, i32 0, i32 2
  %126 = load %struct.induction*, %struct.induction** %biv167, align 8
  %dest_reg168 = getelementptr inbounds %struct.induction, %struct.induction* %126, i32 0, i32 4
  %127 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg168, align 8
  %128 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8
  %fld169 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %128, i32 0, i32 1
  %arrayidx170 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld169, i32 0, i64 6
  %rtx171 = bitcast %union.rtunion_def* %arrayidx170 to %struct.rtx_def**
  %129 = load %struct.rtx_def*, %struct.rtx_def** %rtx171, align 8
  %call172 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 8, %struct.rtx_def* %127, %struct.rtx_def* %129)
  %130 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8
  %fld173 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %130, i32 0, i32 1
  %arrayidx174 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld173, i32 0, i64 6
  %rtx175 = bitcast %union.rtunion_def* %arrayidx174 to %struct.rtx_def**
  store %struct.rtx_def* %call172, %struct.rtx_def** %rtx175, align 8
  br label %if.end.176

if.end.176:                                       ; preds = %if.then.166, %if.then.163
  %131 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %nonneg177 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %131, i32 0, i32 12
  %bf.load178 = load i8, i8* %nonneg177, align 8
  %bf.clear179 = and i8 %bf.load178, -5
  %bf.set180 = or i8 %bf.clear179, 4
  store i8 %bf.set180, i8* %nonneg177, align 8
  store i32 1, i32* %retval
  br label %return

if.end.181:                                       ; preds = %land.lhs.true.156, %land.lhs.true.151, %land.lhs.true.146, %land.lhs.true.142, %land.lhs.true.135, %if.end.132
  br label %for.inc.182

for.inc.182:                                      ; preds = %if.end.181, %if.then.131
  %132 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld183 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %132, i32 0, i32 1
  %arrayidx184 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld183, i32 0, i64 1
  %rtx185 = bitcast %union.rtunion_def* %arrayidx184 to %struct.rtx_def**
  %133 = load %struct.rtx_def*, %struct.rtx_def** %rtx185, align 8
  store %struct.rtx_def* %133, %struct.rtx_def** %p, align 8
  br label %for.cond.120

for.end.186:                                      ; preds = %if.then.126, %for.cond.120
  br label %if.end.908

if.else.187:                                      ; preds = %land.lhs.true.75, %land.lhs.true.70, %land.lhs.true.65, %lor.lhs.false
  %134 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %biv188 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %134, i32 0, i32 2
  %135 = load %struct.induction*, %struct.induction** %biv188, align 8
  %add_val189 = getelementptr inbounds %struct.induction, %struct.induction* %135, i32 0, i32 9
  %136 = load %struct.rtx_def*, %struct.rtx_def** %add_val189, align 8
  %137 = bitcast %struct.rtx_def* %136 to i32*
  %bf.load190 = load i32, i32* %137, align 8
  %bf.clear191 = and i32 %bf.load190, 65535
  %cmp192 = icmp eq i32 %bf.clear191, 54
  br i1 %cmp192, label %land.lhs.true.193, label %if.end.907

land.lhs.true.193:                                ; preds = %if.else.187
  %138 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %biv194 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %138, i32 0, i32 2
  %139 = load %struct.induction*, %struct.induction** %biv194, align 8
  %add_val195 = getelementptr inbounds %struct.induction, %struct.induction* %139, i32 0, i32 9
  %140 = load %struct.rtx_def*, %struct.rtx_def** %add_val195, align 8
  %fld196 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %140, i32 0, i32 1
  %arrayidx197 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld196, i32 0, i64 0
  %rtwint198 = bitcast %union.rtunion_def* %arrayidx197 to i64*
  %141 = load i64, i64* %rtwint198, align 8
  %cmp199 = icmp sgt i64 %141, 0
  br i1 %cmp199, label %if.then.200, label %if.end.907

if.then.200:                                      ; preds = %land.lhs.true.193
  store i32 0, i32* %num_nonfixed_reads, align 4
  store i32 0, i32* %no_use_except_counting, align 4
  store i32 1, i32* %reversible_mem_store, align 4
  %142 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %giv_count = getelementptr inbounds %struct.iv_class, %struct.iv_class* %142, i32 0, i32 3
  %143 = load i32, i32* %giv_count, align 4
  %cmp201 = icmp eq i32 %143, 0
  br i1 %cmp201, label %land.lhs.true.202, label %if.end.321

land.lhs.true.202:                                ; preds = %if.then.200
  %144 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %exit_count = getelementptr inbounds %struct.loop, %struct.loop* %144, i32 0, i32 32
  %145 = load i32, i32* %exit_count, align 4
  %tobool203 = icmp ne i32 %145, 0
  br i1 %tobool203, label %if.end.321, label %land.lhs.true.204

land.lhs.true.204:                                ; preds = %land.lhs.true.202
  %146 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %has_multiple_exit_targets = getelementptr inbounds %struct.loop_info, %struct.loop_info* %146, i32 0, i32 5
  %147 = load i32, i32* %has_multiple_exit_targets, align 4
  %tobool205 = icmp ne i32 %147, 0
  br i1 %tobool205, label %if.end.321, label %if.then.206

if.then.206:                                      ; preds = %land.lhs.true.204
  %148 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %regno207 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %148, i32 0, i32 0
  %149 = load i32, i32* %regno207, align 4
  %idxprom208 = zext i32 %149 to i64
  %150 = load %struct.function*, %struct.function** @cfun, align 8
  %emit209 = getelementptr inbounds %struct.function, %struct.function* %150, i32 0, i32 3
  %151 = load %struct.emit_status*, %struct.emit_status** %emit209, align 8
  %x_regno_reg_rtx210 = getelementptr inbounds %struct.emit_status, %struct.emit_status* %151, i32 0, i32 12
  %152 = load %struct.rtx_def**, %struct.rtx_def*** %x_regno_reg_rtx210, align 8
  %arrayidx211 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %152, i64 %idxprom208
  %153 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx211, align 8
  store %struct.rtx_def* %153, %struct.rtx_def** %bivreg, align 8
  store i32 1, i32* %no_use_except_counting, align 4
  %154 = load %struct.rtx_def*, %struct.rtx_def** %loop_start, align 8
  store %struct.rtx_def* %154, %struct.rtx_def** %p, align 8
  br label %for.cond.212

for.cond.212:                                     ; preds = %for.inc.299, %if.then.206
  %155 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %156 = load %struct.rtx_def*, %struct.rtx_def** %loop_end, align 8
  %cmp213 = icmp ne %struct.rtx_def* %155, %156
  br i1 %cmp213, label %for.body.214, label %for.end.303

for.body.214:                                     ; preds = %for.cond.212
  %157 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %158 = bitcast %struct.rtx_def* %157 to i32*
  %bf.load215 = load i32, i32* %158, align 8
  %bf.clear216 = and i32 %bf.load215, 65535
  %idxprom217 = sext i32 %bf.clear216 to i64
  %arrayidx218 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom217
  %159 = load i8, i8* %arrayidx218, align 1
  %conv = sext i8 %159 to i32
  %cmp219 = icmp eq i32 %conv, 105
  br i1 %cmp219, label %if.then.221, label %if.end.298

if.then.221:                                      ; preds = %for.body.214
  %160 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %161 = bitcast %struct.rtx_def* %160 to i32*
  %bf.load222 = load i32, i32* %161, align 8
  %bf.clear223 = and i32 %bf.load222, 65535
  %idxprom224 = sext i32 %bf.clear223 to i64
  %arrayidx225 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom224
  %162 = load i8, i8* %arrayidx225, align 1
  %conv226 = sext i8 %162 to i32
  %cmp227 = icmp eq i32 %conv226, 105
  br i1 %cmp227, label %cond.true, label %cond.false.244

cond.true:                                        ; preds = %if.then.221
  %163 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld229 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %163, i32 0, i32 1
  %arrayidx230 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld229, i32 0, i64 3
  %rtx231 = bitcast %union.rtunion_def* %arrayidx230 to %struct.rtx_def**
  %164 = load %struct.rtx_def*, %struct.rtx_def** %rtx231, align 8
  %165 = bitcast %struct.rtx_def* %164 to i32*
  %bf.load232 = load i32, i32* %165, align 8
  %bf.clear233 = and i32 %bf.load232, 65535
  %cmp234 = icmp eq i32 %bf.clear233, 47
  br i1 %cmp234, label %cond.true.236, label %cond.false

cond.true.236:                                    ; preds = %cond.true
  %166 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld237 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %166, i32 0, i32 1
  %arrayidx238 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld237, i32 0, i64 3
  %rtx239 = bitcast %union.rtunion_def* %arrayidx238 to %struct.rtx_def**
  %167 = load %struct.rtx_def*, %struct.rtx_def** %rtx239, align 8
  br label %cond.end

cond.false:                                       ; preds = %cond.true
  %168 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %169 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld240 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %169, i32 0, i32 1
  %arrayidx241 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld240, i32 0, i64 3
  %rtx242 = bitcast %union.rtunion_def* %arrayidx241 to %struct.rtx_def**
  %170 = load %struct.rtx_def*, %struct.rtx_def** %rtx242, align 8
  %call243 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %168, %struct.rtx_def* %170)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true.236
  %cond = phi %struct.rtx_def* [ %167, %cond.true.236 ], [ %call243, %cond.false ]
  br label %cond.end.245

cond.false.244:                                   ; preds = %if.then.221
  br label %cond.end.245

cond.end.245:                                     ; preds = %cond.false.244, %cond.end
  %cond246 = phi %struct.rtx_def* [ %cond, %cond.end ], [ null, %cond.false.244 ]
  store %struct.rtx_def* %cond246, %struct.rtx_def** %set, align 8
  %171 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %tobool247 = icmp ne %struct.rtx_def* %171, null
  br i1 %tobool247, label %land.lhs.true.248, label %if.else.266

land.lhs.true.248:                                ; preds = %cond.end.245
  %172 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld249 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %172, i32 0, i32 1
  %arrayidx250 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld249, i32 0, i64 0
  %rtx251 = bitcast %union.rtunion_def* %arrayidx250 to %struct.rtx_def**
  %173 = load %struct.rtx_def*, %struct.rtx_def** %rtx251, align 8
  %174 = bitcast %struct.rtx_def* %173 to i32*
  %bf.load252 = load i32, i32* %174, align 8
  %bf.clear253 = and i32 %bf.load252, 65535
  %cmp254 = icmp eq i32 %bf.clear253, 61
  br i1 %cmp254, label %land.lhs.true.256, label %if.else.266

land.lhs.true.256:                                ; preds = %land.lhs.true.248
  %175 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld257 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %175, i32 0, i32 1
  %arrayidx258 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld257, i32 0, i64 0
  %rtx259 = bitcast %union.rtunion_def* %arrayidx258 to %struct.rtx_def**
  %176 = load %struct.rtx_def*, %struct.rtx_def** %rtx259, align 8
  %fld260 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %176, i32 0, i32 1
  %arrayidx261 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld260, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx261 to i32*
  %177 = load i32, i32* %rtuint, align 4
  %178 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %regno262 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %178, i32 0, i32 0
  %179 = load i32, i32* %regno262, align 4
  %cmp263 = icmp eq i32 %177, %179
  br i1 %cmp263, label %if.then.265, label %if.else.266

if.then.265:                                      ; preds = %land.lhs.true.256
  br label %if.end.297

if.else.266:                                      ; preds = %land.lhs.true.256, %land.lhs.true.248, %cond.end.245
  %180 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %181 = load %struct.rtx_def*, %struct.rtx_def** %loop_end, align 8
  %call267 = call %struct.rtx_def* @prev_nonnote_insn(%struct.rtx_def* %181)
  %call268 = call %struct.rtx_def* @prev_nonnote_insn(%struct.rtx_def* %call267)
  %cmp269 = icmp eq %struct.rtx_def* %180, %call268
  br i1 %cmp269, label %land.lhs.true.275, label %lor.lhs.false.271

lor.lhs.false.271:                                ; preds = %if.else.266
  %182 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %183 = load %struct.rtx_def*, %struct.rtx_def** %loop_end, align 8
  %call272 = call %struct.rtx_def* @prev_nonnote_insn(%struct.rtx_def* %183)
  %cmp273 = icmp eq %struct.rtx_def* %182, %call272
  br i1 %cmp273, label %land.lhs.true.275, label %if.else.288

land.lhs.true.275:                                ; preds = %lor.lhs.false.271, %if.else.266
  %184 = load %struct.rtx_def*, %struct.rtx_def** %bivreg, align 8
  %185 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld276 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %185, i32 0, i32 1
  %arrayidx277 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld276, i32 0, i64 3
  %rtx278 = bitcast %union.rtunion_def* %arrayidx277 to %struct.rtx_def**
  %186 = load %struct.rtx_def*, %struct.rtx_def** %rtx278, align 8
  %call279 = call i32 @reg_mentioned_p(%struct.rtx_def* %184, %struct.rtx_def* %186)
  %tobool280 = icmp ne i32 %call279, 0
  br i1 %tobool280, label %if.then.281, label %if.else.288

if.then.281:                                      ; preds = %land.lhs.true.275
  %187 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld282 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %187, i32 0, i32 1
  %arrayidx283 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld282, i32 0, i64 3
  %rtx284 = bitcast %union.rtunion_def* %arrayidx283 to %struct.rtx_def**
  %188 = load %struct.rtx_def*, %struct.rtx_def** %rtx284, align 8
  %189 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %190 = bitcast %struct.loop_regs* %189 to i8*
  call void @note_stores(%struct.rtx_def* %188, void (%struct.rtx_def*, %struct.rtx_def*, i8*)* @note_set_pseudo_multiple_uses, i8* %190)
  %191 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %multiple_uses = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %191, i32 0, i32 3
  %192 = load i32, i32* %multiple_uses, align 4
  %tobool285 = icmp ne i32 %192, 0
  br i1 %tobool285, label %if.then.286, label %if.end.287

if.then.286:                                      ; preds = %if.then.281
  store i32 0, i32* %no_use_except_counting, align 4
  br label %for.end.303

if.end.287:                                       ; preds = %if.then.281
  br label %if.end.296

if.else.288:                                      ; preds = %land.lhs.true.275, %lor.lhs.false.271
  %193 = load %struct.rtx_def*, %struct.rtx_def** %bivreg, align 8
  %194 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld289 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %194, i32 0, i32 1
  %arrayidx290 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld289, i32 0, i64 3
  %rtx291 = bitcast %union.rtunion_def* %arrayidx290 to %struct.rtx_def**
  %195 = load %struct.rtx_def*, %struct.rtx_def** %rtx291, align 8
  %call292 = call i32 @reg_mentioned_p(%struct.rtx_def* %193, %struct.rtx_def* %195)
  %tobool293 = icmp ne i32 %call292, 0
  br i1 %tobool293, label %if.then.294, label %if.end.295

if.then.294:                                      ; preds = %if.else.288
  store i32 0, i32* %no_use_except_counting, align 4
  br label %for.end.303

if.end.295:                                       ; preds = %if.else.288
  br label %if.end.296

if.end.296:                                       ; preds = %if.end.295, %if.end.287
  br label %if.end.297

if.end.297:                                       ; preds = %if.end.296, %if.then.265
  br label %if.end.298

if.end.298:                                       ; preds = %if.end.297, %for.body.214
  br label %for.inc.299

for.inc.299:                                      ; preds = %if.end.298
  %196 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld300 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %196, i32 0, i32 1
  %arrayidx301 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld300, i32 0, i64 2
  %rtx302 = bitcast %union.rtunion_def* %arrayidx301 to %struct.rtx_def**
  %197 = load %struct.rtx_def*, %struct.rtx_def** %rtx302, align 8
  store %struct.rtx_def* %197, %struct.rtx_def** %p, align 8
  br label %for.cond.212

for.end.303:                                      ; preds = %if.then.294, %if.then.286, %for.cond.212
  %198 = load %struct.loop_ivs*, %struct.loop_ivs** %ivs, align 8
  %list304 = getelementptr inbounds %struct.loop_ivs, %struct.loop_ivs* %198, i32 0, i32 2
  %199 = load %struct.iv_class*, %struct.iv_class** %list304, align 8
  store %struct.iv_class* %199, %struct.iv_class** %blt, align 8
  br label %for.cond.305

for.cond.305:                                     ; preds = %for.inc.318, %for.end.303
  %200 = load %struct.iv_class*, %struct.iv_class** %blt, align 8
  %tobool306 = icmp ne %struct.iv_class* %200, null
  br i1 %tobool306, label %for.body.307, label %for.end.320

for.body.307:                                     ; preds = %for.cond.305
  %201 = load %struct.iv_class*, %struct.iv_class** %blt, align 8
  %init_set = getelementptr inbounds %struct.iv_class, %struct.iv_class* %201, i32 0, i32 11
  %202 = load %struct.rtx_def*, %struct.rtx_def** %init_set, align 8
  %tobool308 = icmp ne %struct.rtx_def* %202, null
  br i1 %tobool308, label %land.lhs.true.309, label %if.end.317

land.lhs.true.309:                                ; preds = %for.body.307
  %203 = load %struct.rtx_def*, %struct.rtx_def** %bivreg, align 8
  %204 = load %struct.iv_class*, %struct.iv_class** %blt, align 8
  %init_set310 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %204, i32 0, i32 11
  %205 = load %struct.rtx_def*, %struct.rtx_def** %init_set310, align 8
  %fld311 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %205, i32 0, i32 1
  %arrayidx312 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld311, i32 0, i64 1
  %rtx313 = bitcast %union.rtunion_def* %arrayidx312 to %struct.rtx_def**
  %206 = load %struct.rtx_def*, %struct.rtx_def** %rtx313, align 8
  %call314 = call i32 @reg_mentioned_p(%struct.rtx_def* %203, %struct.rtx_def* %206)
  %tobool315 = icmp ne i32 %call314, 0
  br i1 %tobool315, label %if.then.316, label %if.end.317

if.then.316:                                      ; preds = %land.lhs.true.309
  store i32 0, i32* %no_use_except_counting, align 4
  br label %for.end.320

if.end.317:                                       ; preds = %land.lhs.true.309, %for.body.307
  br label %for.inc.318

for.inc.318:                                      ; preds = %if.end.317
  %207 = load %struct.iv_class*, %struct.iv_class** %blt, align 8
  %next319 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %207, i32 0, i32 9
  %208 = load %struct.iv_class*, %struct.iv_class** %next319, align 8
  store %struct.iv_class* %208, %struct.iv_class** %blt, align 8
  br label %for.cond.305

for.end.320:                                      ; preds = %if.then.316, %for.cond.305
  br label %if.end.321

if.end.321:                                       ; preds = %for.end.320, %land.lhs.true.204, %land.lhs.true.202, %if.then.200
  %209 = load i32, i32* %no_use_except_counting, align 4
  %tobool322 = icmp ne i32 %209, 0
  br i1 %tobool322, label %if.then.323, label %if.else.324

if.then.323:                                      ; preds = %if.end.321
  br label %if.end.379

if.else.324:                                      ; preds = %if.end.321
  %210 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %num_mem_sets = getelementptr inbounds %struct.loop_info, %struct.loop_info* %210, i32 0, i32 25
  %211 = load i32, i32* %num_mem_sets, align 4
  %cmp325 = icmp sle i32 %211, 1
  br i1 %cmp325, label %if.then.327, label %if.else.377

if.then.327:                                      ; preds = %if.else.324
  %212 = load %struct.rtx_def*, %struct.rtx_def** %loop_start, align 8
  store %struct.rtx_def* %212, %struct.rtx_def** %p, align 8
  br label %for.cond.328

for.cond.328:                                     ; preds = %for.inc.345, %if.then.327
  %213 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %214 = load %struct.rtx_def*, %struct.rtx_def** %loop_end, align 8
  %cmp329 = icmp ne %struct.rtx_def* %213, %214
  br i1 %cmp329, label %for.body.331, label %for.end.349

for.body.331:                                     ; preds = %for.cond.328
  %215 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %216 = bitcast %struct.rtx_def* %215 to i32*
  %bf.load332 = load i32, i32* %216, align 8
  %bf.clear333 = and i32 %bf.load332, 65535
  %idxprom334 = sext i32 %bf.clear333 to i64
  %arrayidx335 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom334
  %217 = load i8, i8* %arrayidx335, align 1
  %conv336 = sext i8 %217 to i32
  %cmp337 = icmp eq i32 %conv336, 105
  br i1 %cmp337, label %if.then.339, label %if.end.344

if.then.339:                                      ; preds = %for.body.331
  %218 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %219 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld340 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %219, i32 0, i32 1
  %arrayidx341 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld340, i32 0, i64 3
  %rtx342 = bitcast %union.rtunion_def* %arrayidx341 to %struct.rtx_def**
  %220 = load %struct.rtx_def*, %struct.rtx_def** %rtx342, align 8
  %call343 = call i32 @count_nonfixed_reads(%struct.loop* %218, %struct.rtx_def* %220)
  %221 = load i32, i32* %num_nonfixed_reads, align 4
  %add = add nsw i32 %221, %call343
  store i32 %add, i32* %num_nonfixed_reads, align 4
  br label %if.end.344

if.end.344:                                       ; preds = %if.then.339, %for.body.331
  br label %for.inc.345

for.inc.345:                                      ; preds = %if.end.344
  %222 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld346 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %222, i32 0, i32 1
  %arrayidx347 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld346, i32 0, i64 2
  %rtx348 = bitcast %union.rtunion_def* %arrayidx347 to %struct.rtx_def**
  %223 = load %struct.rtx_def*, %struct.rtx_def** %rtx348, align 8
  store %struct.rtx_def* %223, %struct.rtx_def** %p, align 8
  br label %for.cond.328

for.end.349:                                      ; preds = %for.cond.328
  %224 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %num_mem_sets350 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %224, i32 0, i32 25
  %225 = load i32, i32* %num_mem_sets350, align 4
  %cmp351 = icmp eq i32 %225, 1
  br i1 %cmp351, label %if.then.353, label %if.end.376

if.then.353:                                      ; preds = %for.end.349
  store i32 0, i32* %reversible_mem_store, align 4
  %226 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %giv = getelementptr inbounds %struct.iv_class, %struct.iv_class* %226, i32 0, i32 4
  %227 = load %struct.induction*, %struct.induction** %giv, align 8
  store %struct.induction* %227, %struct.induction** %v, align 8
  br label %for.cond.354

for.cond.354:                                     ; preds = %for.inc.374, %if.then.353
  %228 = load i32, i32* %reversible_mem_store, align 4
  %tobool355 = icmp ne i32 %228, 0
  br i1 %tobool355, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond.354
  %229 = load %struct.induction*, %struct.induction** %v, align 8
  %tobool356 = icmp ne %struct.induction* %229, null
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond.354
  %230 = phi i1 [ false, %for.cond.354 ], [ %tobool356, %land.rhs ]
  br i1 %230, label %for.body.357, label %for.end.375

for.body.357:                                     ; preds = %land.end
  %231 = load %struct.induction*, %struct.induction** %v, align 8
  %giv_type = getelementptr inbounds %struct.induction, %struct.induction* %231, i32 0, i32 3
  %232 = load i32, i32* %giv_type, align 4
  %cmp358 = icmp eq i32 %232, 1
  br i1 %cmp358, label %land.lhs.true.360, label %if.end.373

land.lhs.true.360:                                ; preds = %for.body.357
  %233 = load %struct.induction*, %struct.induction** %v, align 8
  %dest_reg361 = getelementptr inbounds %struct.induction, %struct.induction* %233, i32 0, i32 4
  %234 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg361, align 8
  %235 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %first_loop_store_insn = getelementptr inbounds %struct.loop_info, %struct.loop_info* %235, i32 0, i32 26
  %236 = load %struct.rtx_def*, %struct.rtx_def** %first_loop_store_insn, align 8
  %fld362 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %236, i32 0, i32 1
  %arrayidx363 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld362, i32 0, i64 3
  %rtx364 = bitcast %union.rtunion_def* %arrayidx363 to %struct.rtx_def**
  %237 = load %struct.rtx_def*, %struct.rtx_def** %rtx364, align 8
  %call365 = call i32 @reg_mentioned_p(%struct.rtx_def* %234, %struct.rtx_def* %237)
  %tobool366 = icmp ne i32 %call365, 0
  br i1 %tobool366, label %land.lhs.true.367, label %if.end.373

land.lhs.true.367:                                ; preds = %land.lhs.true.360
  %238 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %first_loop_store_insn368 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %238, i32 0, i32 26
  %239 = load %struct.rtx_def*, %struct.rtx_def** %first_loop_store_insn368, align 8
  %240 = load %struct.induction*, %struct.induction** %v, align 8
  %insn369 = getelementptr inbounds %struct.induction, %struct.induction* %240, i32 0, i32 0
  %241 = load %struct.rtx_def*, %struct.rtx_def** %insn369, align 8
  %call370 = call i32 @loop_insn_first_p(%struct.rtx_def* %239, %struct.rtx_def* %241)
  %tobool371 = icmp ne i32 %call370, 0
  br i1 %tobool371, label %if.then.372, label %if.end.373

if.then.372:                                      ; preds = %land.lhs.true.367
  store i32 0, i32* %reversible_mem_store, align 4
  br label %if.end.373

if.end.373:                                       ; preds = %if.then.372, %land.lhs.true.367, %land.lhs.true.360, %for.body.357
  br label %for.inc.374

for.inc.374:                                      ; preds = %if.end.373
  %242 = load %struct.induction*, %struct.induction** %v, align 8
  %next_iv = getelementptr inbounds %struct.induction, %struct.induction* %242, i32 0, i32 17
  %243 = load %struct.induction*, %struct.induction** %next_iv, align 8
  store %struct.induction* %243, %struct.induction** %v, align 8
  br label %for.cond.354

for.end.375:                                      ; preds = %land.end
  br label %if.end.376

if.end.376:                                       ; preds = %for.end.375, %for.end.349
  br label %if.end.378

if.else.377:                                      ; preds = %if.else.324
  store i32 0, i32* %retval
  br label %return

if.end.378:                                       ; preds = %if.end.376
  br label %if.end.379

if.end.379:                                       ; preds = %if.end.378, %if.then.323
  %244 = load i32, i32* %num_nonfixed_reads, align 4
  %cmp380 = icmp sle i32 %244, 1
  br i1 %cmp380, label %land.lhs.true.382, label %lor.lhs.false.407

land.lhs.true.382:                                ; preds = %if.end.379
  %245 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %has_nonconst_call = getelementptr inbounds %struct.loop_info, %struct.loop_info* %245, i32 0, i32 2
  %246 = load i32, i32* %has_nonconst_call, align 4
  %tobool383 = icmp ne i32 %246, 0
  br i1 %tobool383, label %lor.lhs.false.407, label %land.lhs.true.384

land.lhs.true.384:                                ; preds = %land.lhs.true.382
  %247 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %has_volatile = getelementptr inbounds %struct.loop_info, %struct.loop_info* %247, i32 0, i32 3
  %248 = load i32, i32* %has_volatile, align 4
  %tobool385 = icmp ne i32 %248, 0
  br i1 %tobool385, label %lor.lhs.false.407, label %land.lhs.true.386

land.lhs.true.386:                                ; preds = %land.lhs.true.384
  %249 = load i32, i32* %reversible_mem_store, align 4
  %tobool387 = icmp ne i32 %249, 0
  br i1 %tobool387, label %land.lhs.true.388, label %lor.lhs.false.407

land.lhs.true.388:                                ; preds = %land.lhs.true.386
  %250 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %giv_count389 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %250, i32 0, i32 3
  %251 = load i32, i32* %giv_count389, align 4
  %252 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %biv_count390 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %252, i32 0, i32 1
  %253 = load i32, i32* %biv_count390, align 4
  %add391 = add nsw i32 %251, %253
  %254 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %num_mem_sets392 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %254, i32 0, i32 25
  %255 = load i32, i32* %num_mem_sets392, align 4
  %add393 = add nsw i32 %add391, %255
  %256 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %call394 = call i32 @num_unmoved_movables(%struct.loop* %256)
  %add395 = add nsw i32 %add393, %call394
  %257 = load i32, i32* %compare_and_branch, align 4
  %add396 = add nsw i32 %add395, %257
  %258 = load i32, i32* %insn_count.addr, align 4
  %cmp397 = icmp eq i32 %add396, %258
  br i1 %cmp397, label %land.lhs.true.399, label %lor.lhs.false.407

land.lhs.true.399:                                ; preds = %land.lhs.true.388
  %259 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %260 = load %struct.loop_ivs*, %struct.loop_ivs** %ivs, align 8
  %list400 = getelementptr inbounds %struct.loop_ivs, %struct.loop_ivs* %260, i32 0, i32 2
  %261 = load %struct.iv_class*, %struct.iv_class** %list400, align 8
  %cmp401 = icmp eq %struct.iv_class* %259, %261
  br i1 %cmp401, label %land.lhs.true.403, label %lor.lhs.false.407

land.lhs.true.403:                                ; preds = %land.lhs.true.399
  %262 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %next404 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %262, i32 0, i32 9
  %263 = load %struct.iv_class*, %struct.iv_class** %next404, align 8
  %cmp405 = icmp eq %struct.iv_class* %263, null
  br i1 %cmp405, label %if.then.409, label %lor.lhs.false.407

lor.lhs.false.407:                                ; preds = %land.lhs.true.403, %land.lhs.true.399, %land.lhs.true.388, %land.lhs.true.386, %land.lhs.true.384, %land.lhs.true.382, %if.end.379
  %264 = load i32, i32* %no_use_except_counting, align 4
  %tobool408 = icmp ne i32 %264, 0
  br i1 %tobool408, label %if.then.409, label %if.end.906

if.then.409:                                      ; preds = %lor.lhs.false.407, %land.lhs.true.403
  %265 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %tobool410 = icmp ne %struct._IO_FILE* %265, null
  br i1 %tobool410, label %if.then.411, label %if.end.413

if.then.411:                                      ; preds = %if.then.409
  %266 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %call412 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %266, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.54, i32 0, i32 0))
  br label %if.end.413

if.end.413:                                       ; preds = %if.then.411, %if.then.409
  %267 = load %struct.rtx_def*, %struct.rtx_def** %comparison, align 8
  %tobool414 = icmp ne %struct.rtx_def* %267, null
  br i1 %tobool414, label %land.lhs.true.415, label %if.end.905

land.lhs.true.415:                                ; preds = %if.end.413
  %268 = load %struct.rtx_def*, %struct.rtx_def** %comparison, align 8
  %269 = bitcast %struct.rtx_def* %268 to i32*
  %bf.load416 = load i32, i32* %269, align 8
  %bf.clear417 = and i32 %bf.load416, 65535
  %cmp418 = icmp eq i32 %bf.clear417, 107
  br i1 %cmp418, label %if.then.427, label %lor.lhs.false.420

lor.lhs.false.420:                                ; preds = %land.lhs.true.415
  %270 = load %struct.rtx_def*, %struct.rtx_def** %comparison, align 8
  %271 = bitcast %struct.rtx_def* %270 to i32*
  %bf.load421 = load i32, i32* %271, align 8
  %bf.clear422 = and i32 %bf.load421, 65535
  %cmp423 = icmp eq i32 %bf.clear422, 106
  br i1 %cmp423, label %land.lhs.true.425, label %if.end.905

land.lhs.true.425:                                ; preds = %lor.lhs.false.420
  %272 = load i32, i32* %no_use_except_counting, align 4
  %tobool426 = icmp ne i32 %272, 0
  br i1 %tobool426, label %if.then.427, label %if.end.905

if.then.427:                                      ; preds = %land.lhs.true.425, %land.lhs.true.415
  store i64 0, i64* %comparison_val, align 8
  store i32 0, i32* %nonneg430, align 4
  %273 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %biv431 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %273, i32 0, i32 2
  %274 = load %struct.induction*, %struct.induction** %biv431, align 8
  %add_val432 = getelementptr inbounds %struct.induction, %struct.induction* %274, i32 0, i32 9
  %275 = load %struct.rtx_def*, %struct.rtx_def** %add_val432, align 8
  %fld433 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %275, i32 0, i32 1
  %arrayidx434 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld433, i32 0, i64 0
  %rtwint435 = bitcast %union.rtunion_def* %arrayidx434 to i64*
  %276 = load i64, i64* %rtwint435, align 8
  store i64 %276, i64* %add_val428, align 8
  %277 = load %struct.rtx_def*, %struct.rtx_def** %comparison, align 8
  %fld436 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %277, i32 0, i32 1
  %arrayidx437 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld436, i32 0, i64 1
  %rtx438 = bitcast %union.rtunion_def* %arrayidx437 to %struct.rtx_def**
  %278 = load %struct.rtx_def*, %struct.rtx_def** %rtx438, align 8
  store %struct.rtx_def* %278, %struct.rtx_def** %comparison_value, align 8
  %279 = load %struct.rtx_def*, %struct.rtx_def** %comparison_value, align 8
  %280 = bitcast %struct.rtx_def* %279 to i32*
  %bf.load439 = load i32, i32* %280, align 8
  %bf.lshr440 = lshr i32 %bf.load439, 16
  %bf.clear441 = and i32 %bf.lshr440, 255
  %cmp442 = icmp eq i32 %bf.clear441, 0
  br i1 %cmp442, label %if.then.444, label %if.else.454

if.then.444:                                      ; preds = %if.then.427
  %281 = load %struct.rtx_def*, %struct.rtx_def** %comparison, align 8
  %fld445 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %281, i32 0, i32 1
  %arrayidx446 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld445, i32 0, i64 0
  %rtx447 = bitcast %union.rtunion_def* %arrayidx446 to %struct.rtx_def**
  %282 = load %struct.rtx_def*, %struct.rtx_def** %rtx447, align 8
  %283 = bitcast %struct.rtx_def* %282 to i32*
  %bf.load448 = load i32, i32* %283, align 8
  %bf.lshr449 = lshr i32 %bf.load448, 16
  %bf.clear450 = and i32 %bf.lshr449, 255
  %idxprom451 = sext i32 %bf.clear450 to i64
  %arrayidx452 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom451
  %284 = load i16, i16* %arrayidx452, align 2
  %conv453 = zext i16 %284 to i32
  store i32 %conv453, i32* %comparison_const_width, align 4
  br label %if.end.461

if.else.454:                                      ; preds = %if.then.427
  %285 = load %struct.rtx_def*, %struct.rtx_def** %comparison_value, align 8
  %286 = bitcast %struct.rtx_def* %285 to i32*
  %bf.load455 = load i32, i32* %286, align 8
  %bf.lshr456 = lshr i32 %bf.load455, 16
  %bf.clear457 = and i32 %bf.lshr456, 255
  %idxprom458 = sext i32 %bf.clear457 to i64
  %arrayidx459 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom458
  %287 = load i16, i16* %arrayidx459, align 2
  %conv460 = zext i16 %287 to i32
  store i32 %conv460, i32* %comparison_const_width, align 4
  br label %if.end.461

if.end.461:                                       ; preds = %if.else.454, %if.then.444
  %288 = load i32, i32* %comparison_const_width, align 4
  %cmp462 = icmp sgt i32 %288, 64
  br i1 %cmp462, label %if.then.464, label %if.end.465

if.then.464:                                      ; preds = %if.end.461
  store i32 64, i32* %comparison_const_width, align 4
  br label %if.end.465

if.end.465:                                       ; preds = %if.then.464, %if.end.461
  %289 = load i32, i32* %comparison_const_width, align 4
  %sub466 = sub nsw i32 %289, 1
  %sh_prom = zext i32 %sub466 to i64
  %shl = shl i64 1, %sh_prom
  store i64 %shl, i64* %comparison_sign_mask, align 8
  %290 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %291 = load %struct.rtx_def*, %struct.rtx_def** %comparison_value, align 8
  %call467 = call i32 @loop_invariant_p(%struct.loop* %290, %struct.rtx_def* %291)
  %tobool468 = icmp ne i32 %call467, 0
  br i1 %tobool468, label %if.end.470, label %if.then.469

if.then.469:                                      ; preds = %if.end.465
  store i32 0, i32* %retval
  br label %return

if.end.470:                                       ; preds = %if.end.465
  %292 = load %struct.rtx_def*, %struct.rtx_def** %comparison_value, align 8
  %293 = bitcast %struct.rtx_def* %292 to i32*
  %bf.load471 = load i32, i32* %293, align 8
  %bf.clear472 = and i32 %bf.load471, 65535
  %cmp473 = icmp eq i32 %bf.clear472, 54
  br i1 %cmp473, label %if.then.475, label %if.end.479

if.then.475:                                      ; preds = %if.end.470
  %294 = load %struct.rtx_def*, %struct.rtx_def** %comparison_value, align 8
  %fld476 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %294, i32 0, i32 1
  %arrayidx477 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld476, i32 0, i64 0
  %rtwint478 = bitcast %union.rtunion_def* %arrayidx477 to i64*
  %295 = load i64, i64* %rtwint478, align 8
  store i64 %295, i64* %comparison_val, align 8
  br label %if.end.479

if.end.479:                                       ; preds = %if.then.475, %if.end.470
  %296 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %initial_value480 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %296, i32 0, i32 6
  %297 = load %struct.rtx_def*, %struct.rtx_def** %initial_value480, align 8
  store %struct.rtx_def* %297, %struct.rtx_def** %initial_value429, align 8
  %298 = load i32, i32* %no_use_except_counting, align 4
  %tobool481 = icmp ne i32 %298, 0
  br i1 %tobool481, label %land.lhs.true.482, label %if.end.502

land.lhs.true.482:                                ; preds = %if.end.479
  %299 = load %struct.rtx_def*, %struct.rtx_def** %comparison_value, align 8
  %300 = bitcast %struct.rtx_def* %299 to i32*
  %bf.load483 = load i32, i32* %300, align 8
  %bf.clear484 = and i32 %bf.load483, 65535
  %cmp485 = icmp eq i32 %bf.clear484, 54
  br i1 %cmp485, label %land.lhs.true.487, label %if.end.502

land.lhs.true.487:                                ; preds = %land.lhs.true.482
  %301 = load %struct.rtx_def*, %struct.rtx_def** %initial_value429, align 8
  %302 = bitcast %struct.rtx_def* %301 to i32*
  %bf.load488 = load i32, i32* %302, align 8
  %bf.clear489 = and i32 %bf.load488, 65535
  %cmp490 = icmp eq i32 %bf.clear489, 54
  br i1 %cmp490, label %if.then.492, label %if.end.502

if.then.492:                                      ; preds = %land.lhs.true.487
  %303 = load i64, i64* %comparison_val, align 8
  %304 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %initial_value493 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %304, i32 0, i32 6
  %305 = load %struct.rtx_def*, %struct.rtx_def** %initial_value493, align 8
  %fld494 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %305, i32 0, i32 1
  %arrayidx495 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld494, i32 0, i64 0
  %rtwint496 = bitcast %union.rtunion_def* %arrayidx495 to i64*
  %306 = load i64, i64* %rtwint496, align 8
  %sub497 = sub nsw i64 %303, %306
  store i64 %sub497, i64* %comparison_val, align 8
  %307 = load i64, i64* %comparison_val, align 8
  %308 = load i64, i64* %add_val428, align 8
  %add498 = add nsw i64 %307, %308
  %sub499 = sub nsw i64 %add498, 1
  store i64 %sub499, i64* %comparison_val, align 8
  %309 = load i64, i64* %comparison_val, align 8
  %310 = load i64, i64* %add_val428, align 8
  %rem500 = urem i64 %309, %310
  %311 = load i64, i64* %comparison_val, align 8
  %sub501 = sub i64 %311, %rem500
  store i64 %sub501, i64* %comparison_val, align 8
  %312 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  store %struct.rtx_def* %312, %struct.rtx_def** %initial_value429, align 8
  br label %if.end.502

if.end.502:                                       ; preds = %if.then.492, %land.lhs.true.487, %land.lhs.true.482, %if.end.479
  %313 = load %struct.rtx_def*, %struct.rtx_def** %initial_value429, align 8
  %314 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %cmp503 = icmp eq %struct.rtx_def* %313, %314
  br i1 %cmp503, label %land.lhs.true.505, label %if.else.517

land.lhs.true.505:                                ; preds = %if.end.502
  %315 = load %struct.rtx_def*, %struct.rtx_def** %comparison_value, align 8
  %316 = bitcast %struct.rtx_def* %315 to i32*
  %bf.load506 = load i32, i32* %316, align 8
  %bf.clear507 = and i32 %bf.load506, 65535
  %cmp508 = icmp eq i32 %bf.clear507, 54
  br i1 %cmp508, label %land.lhs.true.510, label %if.else.517

land.lhs.true.510:                                ; preds = %land.lhs.true.505
  %317 = load i64, i64* %comparison_val, align 8
  %318 = load i64, i64* %add_val428, align 8
  %sub511 = sub nsw i64 %317, %318
  %319 = load %struct.rtx_def*, %struct.rtx_def** %comparison_value, align 8
  %fld512 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %319, i32 0, i32 1
  %arrayidx513 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld512, i32 0, i64 0
  %rtwint514 = bitcast %union.rtunion_def* %arrayidx513 to i64*
  %320 = load i64, i64* %rtwint514, align 8
  %xor = xor i64 %sub511, %320
  %321 = load i64, i64* %comparison_sign_mask, align 8
  %and = and i64 %xor, %321
  %tobool515 = icmp ne i64 %and, 0
  br i1 %tobool515, label %if.else.517, label %if.then.516

if.then.516:                                      ; preds = %land.lhs.true.510
  %322 = load i64, i64* %add_val428, align 8
  store i64 %322, i64* %add_adjust, align 8
  store i32 1, i32* %nonneg430, align 4
  store i32 104, i32* %cmp_code, align 4
  br label %if.end.531

if.else.517:                                      ; preds = %land.lhs.true.510, %land.lhs.true.505, %if.end.502
  %323 = load i64, i64* %add_val428, align 8
  %cmp518 = icmp eq i64 %323, 1
  br i1 %cmp518, label %land.lhs.true.520, label %if.else.529

land.lhs.true.520:                                ; preds = %if.else.517
  %324 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %vtop = getelementptr inbounds %struct.loop, %struct.loop* %324, i32 0, i32 23
  %325 = load %struct.rtx_def*, %struct.rtx_def** %vtop, align 8
  %tobool521 = icmp ne %struct.rtx_def* %325, null
  br i1 %tobool521, label %land.lhs.true.522, label %if.else.529

land.lhs.true.522:                                ; preds = %land.lhs.true.520
  %326 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %biv_count523 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %326, i32 0, i32 1
  %327 = load i32, i32* %biv_count523, align 4
  %cmp524 = icmp eq i32 %327, 0
  br i1 %cmp524, label %if.then.528, label %lor.lhs.false.526

lor.lhs.false.526:                                ; preds = %land.lhs.true.522
  %328 = load i32, i32* %no_use_except_counting, align 4
  %tobool527 = icmp ne i32 %328, 0
  br i1 %tobool527, label %if.then.528, label %if.else.529

if.then.528:                                      ; preds = %lor.lhs.false.526, %land.lhs.true.522
  store i64 0, i64* %add_adjust, align 8
  store i32 102, i32* %cmp_code, align 4
  br label %if.end.530

if.else.529:                                      ; preds = %lor.lhs.false.526, %land.lhs.true.520, %if.else.517
  store i32 0, i32* %retval
  br label %return

if.end.530:                                       ; preds = %if.then.528
  br label %if.end.531

if.end.531:                                       ; preds = %if.end.530, %if.then.516
  %329 = load %struct.rtx_def*, %struct.rtx_def** %comparison, align 8
  %330 = bitcast %struct.rtx_def* %329 to i32*
  %bf.load532 = load i32, i32* %330, align 8
  %bf.clear533 = and i32 %bf.load532, 65535
  %cmp534 = icmp eq i32 %bf.clear533, 106
  br i1 %cmp534, label %if.then.536, label %if.end.538

if.then.536:                                      ; preds = %if.end.531
  %331 = load i64, i64* %add_val428, align 8
  %332 = load i64, i64* %add_adjust, align 8
  %sub537 = sub nsw i64 %332, %331
  store i64 %sub537, i64* %add_adjust, align 8
  br label %if.end.538

if.end.538:                                       ; preds = %if.then.536, %if.end.531
  %333 = load %struct.rtx_def*, %struct.rtx_def** %initial_value429, align 8
  %334 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %cmp539 = icmp eq %struct.rtx_def* %333, %334
  br i1 %cmp539, label %land.lhs.true.541, label %if.else.552

land.lhs.true.541:                                ; preds = %if.end.538
  %335 = load %struct.rtx_def*, %struct.rtx_def** %comparison_value, align 8
  %336 = bitcast %struct.rtx_def* %335 to i32*
  %bf.load542 = load i32, i32* %336, align 8
  %bf.clear543 = and i32 %bf.load542, 65535
  %cmp544 = icmp eq i32 %bf.clear543, 54
  br i1 %cmp544, label %if.then.546, label %if.else.552

if.then.546:                                      ; preds = %land.lhs.true.541
  %337 = load i64, i64* %comparison_val, align 8
  %338 = load i64, i64* %add_val428, align 8
  %rem547 = urem i64 %337, %338
  %cmp548 = icmp ne i64 %rem547, 0
  br i1 %cmp548, label %if.then.550, label %if.end.551

if.then.550:                                      ; preds = %if.then.546
  store i32 0, i32* %retval
  br label %return

if.end.551:                                       ; preds = %if.then.546
  br label %if.end.559

if.else.552:                                      ; preds = %land.lhs.true.541, %if.end.538
  %339 = load i32, i32* %no_use_except_counting, align 4
  %tobool553 = icmp ne i32 %339, 0
  br i1 %tobool553, label %lor.lhs.false.554, label %if.then.557

lor.lhs.false.554:                                ; preds = %if.else.552
  %340 = load i64, i64* %add_val428, align 8
  %cmp555 = icmp ne i64 %340, 1
  br i1 %cmp555, label %if.then.557, label %if.end.558

if.then.557:                                      ; preds = %lor.lhs.false.554, %if.else.552
  store i32 0, i32* %retval
  br label %return

if.end.558:                                       ; preds = %lor.lhs.false.554
  br label %if.end.559

if.end.559:                                       ; preds = %if.end.558, %if.end.551
  %341 = load %struct.rtx_def*, %struct.rtx_def** %comparison_value, align 8
  store %struct.rtx_def* %341, %struct.rtx_def** %final_value, align 8
  %342 = load %struct.rtx_def*, %struct.rtx_def** %comparison_value, align 8
  %343 = bitcast %struct.rtx_def* %342 to i32*
  %bf.load560 = load i32, i32* %343, align 8
  %bf.clear561 = and i32 %bf.load560, 65535
  %cmp562 = icmp eq i32 %bf.clear561, 54
  br i1 %cmp562, label %land.lhs.true.564, label %if.end.577

land.lhs.true.564:                                ; preds = %if.end.559
  %344 = load %struct.rtx_def*, %struct.rtx_def** %initial_value429, align 8
  %345 = bitcast %struct.rtx_def* %344 to i32*
  %bf.load565 = load i32, i32* %345, align 8
  %bf.clear566 = and i32 %bf.load565, 65535
  %cmp567 = icmp eq i32 %bf.clear566, 54
  br i1 %cmp567, label %if.then.569, label %if.end.577

if.then.569:                                      ; preds = %land.lhs.true.564
  %346 = load i64, i64* %comparison_val, align 8
  %call570 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %346)
  store %struct.rtx_def* %call570, %struct.rtx_def** %comparison_value, align 8
  %347 = load i64, i64* %comparison_val, align 8
  %348 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %initial_value571 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %348, i32 0, i32 6
  %349 = load %struct.rtx_def*, %struct.rtx_def** %initial_value571, align 8
  %fld572 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %349, i32 0, i32 1
  %arrayidx573 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld572, i32 0, i64 0
  %rtwint574 = bitcast %union.rtunion_def* %arrayidx573 to i64*
  %350 = load i64, i64* %rtwint574, align 8
  %add575 = add nsw i64 %347, %350
  %call576 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %add575)
  store %struct.rtx_def* %call576, %struct.rtx_def** %final_value, align 8
  br label %if.end.577

if.end.577:                                       ; preds = %if.then.569, %land.lhs.true.564, %if.end.559
  %351 = load %struct.rtx_def*, %struct.rtx_def** %initial_value429, align 8
  %352 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %initial_value578 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %352, i32 0, i32 6
  store %struct.rtx_def* %351, %struct.rtx_def** %initial_value578, align 8
  %353 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %biv579 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %353, i32 0, i32 2
  %354 = load %struct.induction*, %struct.induction** %biv579, align 8
  %dest_reg580 = getelementptr inbounds %struct.induction, %struct.induction* %354, i32 0, i32 4
  %355 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg580, align 8
  store %struct.rtx_def* %355, %struct.rtx_def** %reg, align 8
  %356 = load %struct.rtx_def*, %struct.rtx_def** %loop_end, align 8
  %fld581 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %356, i32 0, i32 1
  %arrayidx582 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld581, i32 0, i64 1
  %rtx583 = bitcast %union.rtunion_def* %arrayidx582 to %struct.rtx_def**
  %357 = load %struct.rtx_def*, %struct.rtx_def** %rtx583, align 8
  %call584 = call %struct.rtx_def* @condjump_label(%struct.rtx_def* %357)
  store %struct.rtx_def* %call584, %struct.rtx_def** %jump_label, align 8
  %358 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %biv585 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %358, i32 0, i32 2
  %359 = load %struct.induction*, %struct.induction** %biv585, align 8
  %add_val586 = getelementptr inbounds %struct.induction, %struct.induction* %359, i32 0, i32 9
  %360 = load %struct.rtx_def*, %struct.rtx_def** %add_val586, align 8
  %fld587 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %360, i32 0, i32 1
  %arrayidx588 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld587, i32 0, i64 0
  %rtwint589 = bitcast %union.rtunion_def* %arrayidx588 to i64*
  %361 = load i64, i64* %rtwint589, align 8
  %sub590 = sub nsw i64 0, %361
  %call591 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %sub590)
  store %struct.rtx_def* %call591, %struct.rtx_def** %new_add_val, align 8
  %362 = load %struct.rtx_def*, %struct.rtx_def** %initial_value429, align 8
  %363 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %cmp592 = icmp eq %struct.rtx_def* %362, %363
  br i1 %cmp592, label %land.lhs.true.594, label %if.else.604

land.lhs.true.594:                                ; preds = %if.end.577
  %364 = load %struct.rtx_def*, %struct.rtx_def** %comparison_value, align 8
  %365 = bitcast %struct.rtx_def* %364 to i32*
  %bf.load595 = load i32, i32* %365, align 8
  %bf.clear596 = and i32 %bf.load595, 65535
  %cmp597 = icmp eq i32 %bf.clear596, 54
  br i1 %cmp597, label %if.then.599, label %if.else.604

if.then.599:                                      ; preds = %land.lhs.true.594
  %366 = load i64, i64* %comparison_val, align 8
  %367 = load i64, i64* %add_adjust, align 8
  %sub600 = sub nsw i64 %366, %367
  %call601 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %sub600)
  store %struct.rtx_def* %call601, %struct.rtx_def** %start_value, align 8
  %368 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %369 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %370 = load %struct.rtx_def*, %struct.rtx_def** %start_value, align 8
  %call602 = call %struct.rtx_def* @gen_move_insn(%struct.rtx_def* %369, %struct.rtx_def* %370)
  %call603 = call %struct.rtx_def* @loop_insn_hoist(%struct.loop* %368, %struct.rtx_def* %call602)
  br label %if.end.651

if.else.604:                                      ; preds = %land.lhs.true.594, %if.end.577
  %371 = load %struct.rtx_def*, %struct.rtx_def** %initial_value429, align 8
  %372 = bitcast %struct.rtx_def* %371 to i32*
  %bf.load605 = load i32, i32* %372, align 8
  %bf.clear606 = and i32 %bf.load605, 65535
  %cmp607 = icmp eq i32 %bf.clear606, 54
  br i1 %cmp607, label %if.then.609, label %if.else.634

if.then.609:                                      ; preds = %if.else.604
  %373 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %374 = bitcast %struct.rtx_def* %373 to i32*
  %bf.load610 = load i32, i32* %374, align 8
  %bf.lshr611 = lshr i32 %bf.load610, 16
  %bf.clear612 = and i32 %bf.lshr611, 255
  store i32 %bf.clear612, i32* %mode, align 4
  %375 = load %struct.rtx_def*, %struct.rtx_def** %initial_value429, align 8
  %fld613 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %375, i32 0, i32 1
  %arrayidx614 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld613, i32 0, i64 0
  %rtwint615 = bitcast %union.rtunion_def* %arrayidx614 to i64*
  %376 = load i64, i64* %rtwint615, align 8
  %sub616 = sub nsw i64 0, %376
  %377 = load i64, i64* %add_adjust, align 8
  %sub617 = sub nsw i64 %sub616, %377
  %call618 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %sub617)
  store %struct.rtx_def* %call618, %struct.rtx_def** %offset, align 8
  %378 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %379 = load %struct.rtx_def*, %struct.rtx_def** %comparison_value, align 8
  %380 = load %struct.rtx_def*, %struct.rtx_def** %offset, align 8
  %call619 = call %struct.rtx_def* @gen_add3_insn(%struct.rtx_def* %378, %struct.rtx_def* %379, %struct.rtx_def* %380)
  store %struct.rtx_def* %call619, %struct.rtx_def** %add_insn, align 8
  %381 = load %struct.rtx_def*, %struct.rtx_def** %add_insn, align 8
  %cmp620 = icmp eq %struct.rtx_def* %381, null
  br i1 %cmp620, label %if.then.622, label %if.end.623

if.then.622:                                      ; preds = %if.then.609
  store i32 0, i32* %retval
  br label %return

if.end.623:                                       ; preds = %if.then.609
  %382 = load i32, i32* %mode, align 4
  %383 = load %struct.rtx_def*, %struct.rtx_def** %comparison_value, align 8
  %384 = load %struct.rtx_def*, %struct.rtx_def** %offset, align 8
  %call624 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %382, %struct.rtx_def* %383, %struct.rtx_def* %384)
  store %struct.rtx_def* %call624, %struct.rtx_def** %start_value, align 8
  %385 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %386 = load %struct.rtx_def*, %struct.rtx_def** %add_insn, align 8
  %call625 = call %struct.rtx_def* @loop_insn_hoist(%struct.loop* %385, %struct.rtx_def* %386)
  %387 = load %struct.rtx_def*, %struct.rtx_def** %comparison, align 8
  %388 = bitcast %struct.rtx_def* %387 to i32*
  %bf.load626 = load i32, i32* %388, align 8
  %bf.clear627 = and i32 %bf.load626, 65535
  %cmp628 = icmp eq i32 %bf.clear627, 106
  br i1 %cmp628, label %if.then.630, label %if.end.633

if.then.630:                                      ; preds = %if.end.623
  %389 = load i32, i32* %mode, align 4
  %390 = load %struct.rtx_def*, %struct.rtx_def** %comparison_value, align 8
  %391 = load i64, i64* %add_val428, align 8
  %call631 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %391)
  %call632 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %389, %struct.rtx_def* %390, %struct.rtx_def* %call631)
  store %struct.rtx_def* %call632, %struct.rtx_def** %final_value, align 8
  br label %if.end.633

if.end.633:                                       ; preds = %if.then.630, %if.end.623
  br label %if.end.650

if.else.634:                                      ; preds = %if.else.604
  %392 = load i64, i64* %add_adjust, align 8
  %tobool635 = icmp ne i64 %392, 0
  br i1 %tobool635, label %if.else.648, label %if.then.636

if.then.636:                                      ; preds = %if.else.634
  %393 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %394 = bitcast %struct.rtx_def* %393 to i32*
  %bf.load638 = load i32, i32* %394, align 8
  %bf.lshr639 = lshr i32 %bf.load638, 16
  %bf.clear640 = and i32 %bf.lshr639, 255
  store i32 %bf.clear640, i32* %mode637, align 4
  %395 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %396 = load %struct.rtx_def*, %struct.rtx_def** %comparison_value, align 8
  %397 = load %struct.rtx_def*, %struct.rtx_def** %initial_value429, align 8
  %call641 = call %struct.rtx_def* @gen_sub3_insn(%struct.rtx_def* %395, %struct.rtx_def* %396, %struct.rtx_def* %397)
  store %struct.rtx_def* %call641, %struct.rtx_def** %sub_insn, align 8
  %398 = load %struct.rtx_def*, %struct.rtx_def** %sub_insn, align 8
  %cmp642 = icmp eq %struct.rtx_def* %398, null
  br i1 %cmp642, label %if.then.644, label %if.end.645

if.then.644:                                      ; preds = %if.then.636
  store i32 0, i32* %retval
  br label %return

if.end.645:                                       ; preds = %if.then.636
  %399 = load i32, i32* %mode637, align 4
  %400 = load %struct.rtx_def*, %struct.rtx_def** %comparison_value, align 8
  %401 = load %struct.rtx_def*, %struct.rtx_def** %initial_value429, align 8
  %call646 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 76, i32 %399, %struct.rtx_def* %400, %struct.rtx_def* %401)
  store %struct.rtx_def* %call646, %struct.rtx_def** %start_value, align 8
  %402 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %403 = load %struct.rtx_def*, %struct.rtx_def** %sub_insn, align 8
  %call647 = call %struct.rtx_def* @loop_insn_hoist(%struct.loop* %402, %struct.rtx_def* %403)
  br label %if.end.649

if.else.648:                                      ; preds = %if.else.634
  store i32 0, i32* %retval
  br label %return

if.end.649:                                       ; preds = %if.end.645
  br label %if.end.650

if.end.650:                                       ; preds = %if.end.649, %if.end.633
  br label %if.end.651

if.end.651:                                       ; preds = %if.end.650, %if.then.599
  call void @start_sequence()
  %404 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %405 = load %struct.rtx_def*, %struct.rtx_def** %new_add_val, align 8
  call void @expand_inc(%struct.rtx_def* %404, %struct.rtx_def* %405)
  %call652 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call652, %struct.rtx_def** %tem, align 8
  call void @end_sequence()
  %406 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %407 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %biv653 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %407, i32 0, i32 2
  %408 = load %struct.induction*, %struct.induction** %biv653, align 8
  %insn654 = getelementptr inbounds %struct.induction, %struct.induction* %408, i32 0, i32 0
  %409 = load %struct.rtx_def*, %struct.rtx_def** %insn654, align 8
  %410 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %call655 = call %struct.rtx_def* @loop_insn_emit_before(%struct.loop* %406, %struct.basic_block_def* null, %struct.rtx_def* %409, %struct.rtx_def* %410)
  store %struct.rtx_def* %call655, %struct.rtx_def** %p, align 8
  %411 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %biv656 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %411, i32 0, i32 2
  %412 = load %struct.induction*, %struct.induction** %biv656, align 8
  %insn657 = getelementptr inbounds %struct.induction, %struct.induction* %412, i32 0, i32 0
  %413 = load %struct.rtx_def*, %struct.rtx_def** %insn657, align 8
  %call658 = call %struct.rtx_def* @delete_insn(%struct.rtx_def* %413)
  %414 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %415 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %biv659 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %415, i32 0, i32 2
  %416 = load %struct.induction*, %struct.induction** %biv659, align 8
  %insn660 = getelementptr inbounds %struct.induction, %struct.induction* %416, i32 0, i32 0
  store %struct.rtx_def* %414, %struct.rtx_def** %insn660, align 8
  %417 = load %struct.rtx_def*, %struct.rtx_def** %start_value, align 8
  %418 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %initial_value661 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %418, i32 0, i32 6
  store %struct.rtx_def* %417, %struct.rtx_def** %initial_value661, align 8
  %419 = load %struct.rtx_def*, %struct.rtx_def** %new_add_val, align 8
  %420 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %biv662 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %420, i32 0, i32 2
  %421 = load %struct.induction*, %struct.induction** %biv662, align 8
  %add_val663 = getelementptr inbounds %struct.induction, %struct.induction* %421, i32 0, i32 9
  store %struct.rtx_def* %419, %struct.rtx_def** %add_val663, align 8
  %422 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %423 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %initial_value664 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %423, i32 0, i32 7
  store %struct.rtx_def* %422, %struct.rtx_def** %initial_value664, align 8
  %424 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %425 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %initial_equiv_value = getelementptr inbounds %struct.loop_info, %struct.loop_info* %425, i32 0, i32 10
  store %struct.rtx_def* %424, %struct.rtx_def** %initial_equiv_value, align 8
  %426 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %427 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %final_value665 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %427, i32 0, i32 9
  store %struct.rtx_def* %426, %struct.rtx_def** %final_value665, align 8
  %428 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %429 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %final_equiv_value = getelementptr inbounds %struct.loop_info, %struct.loop_info* %429, i32 0, i32 11
  store %struct.rtx_def* %428, %struct.rtx_def** %final_equiv_value, align 8
  %430 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %431 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %comparison_value666 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %431, i32 0, i32 8
  store %struct.rtx_def* %430, %struct.rtx_def** %comparison_value666, align 8
  %432 = load i32, i32* %cmp_code, align 4
  %433 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %comparison_code = getelementptr inbounds %struct.loop_info, %struct.loop_info* %433, i32 0, i32 14
  store i32 %432, i32* %comparison_code, align 4
  %434 = load %struct.rtx_def*, %struct.rtx_def** %new_add_val, align 8
  %435 = load %struct.loop_info*, %struct.loop_info** %loop_info, align 8
  %increment = getelementptr inbounds %struct.loop_info, %struct.loop_info* %435, i32 0, i32 13
  store %struct.rtx_def* %434, %struct.rtx_def** %increment, align 8
  %436 = load %struct.rtx_def*, %struct.rtx_def** %jump_label, align 8
  %fld667 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %436, i32 0, i32 1
  %arrayidx668 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld667, i32 0, i64 0
  %rtx669 = bitcast %union.rtunion_def* %arrayidx668 to %struct.rtx_def**
  %437 = load %struct.rtx_def*, %struct.rtx_def** %rtx669, align 8
  %fld670 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %437, i32 0, i32 1
  %arrayidx671 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld670, i32 0, i64 3
  %rtint = bitcast %union.rtunion_def* %arrayidx671 to i32*
  %438 = load i32, i32* %rtint, align 4
  %inc = add nsw i32 %438, 1
  store i32 %inc, i32* %rtint, align 4
  %439 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %regno672 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %439, i32 0, i32 0
  %440 = load i32, i32* %regno672, align 4
  %idxprom673 = zext i32 %440 to i64
  %441 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %data = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %441, i32 0, i32 4
  %reg674 = bitcast %union.varray_data_tag* %data to [1 x %struct.reg_info_def*]*
  %arrayidx675 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %reg674, i32 0, i64 %idxprom673
  %442 = load %struct.reg_info_def*, %struct.reg_info_def** %arrayidx675, align 8
  %last_uid = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %442, i32 0, i32 1
  %443 = load i32, i32* %last_uid, align 4
  %444 = load %struct.rtx_def*, %struct.rtx_def** %first_compare, align 8
  %fld676 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %444, i32 0, i32 1
  %arrayidx677 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld676, i32 0, i64 0
  %rtint678 = bitcast %union.rtunion_def* %arrayidx677 to i32*
  %445 = load i32, i32* %rtint678, align 4
  %cmp679 = icmp ne i32 %443, %445
  br i1 %cmp679, label %if.then.695, label %lor.lhs.false.681

lor.lhs.false.681:                                ; preds = %if.end.651
  %446 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %init_insn = getelementptr inbounds %struct.iv_class, %struct.iv_class* %446, i32 0, i32 10
  %447 = load %struct.rtx_def*, %struct.rtx_def** %init_insn, align 8
  %tobool682 = icmp ne %struct.rtx_def* %447, null
  br i1 %tobool682, label %lor.lhs.false.683, label %if.then.695

lor.lhs.false.683:                                ; preds = %lor.lhs.false.681
  %448 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %regno684 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %448, i32 0, i32 0
  %449 = load i32, i32* %regno684, align 4
  %idxprom685 = zext i32 %449 to i64
  %450 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %data686 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %450, i32 0, i32 4
  %reg687 = bitcast %union.varray_data_tag* %data686 to [1 x %struct.reg_info_def*]*
  %arrayidx688 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %reg687, i32 0, i64 %idxprom685
  %451 = load %struct.reg_info_def*, %struct.reg_info_def** %arrayidx688, align 8
  %first_uid = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %451, i32 0, i32 0
  %452 = load i32, i32* %first_uid, align 4
  %453 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %init_insn689 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %453, i32 0, i32 10
  %454 = load %struct.rtx_def*, %struct.rtx_def** %init_insn689, align 8
  %fld690 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %454, i32 0, i32 1
  %arrayidx691 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld690, i32 0, i64 0
  %rtint692 = bitcast %union.rtunion_def* %arrayidx691 to i32*
  %455 = load i32, i32* %rtint692, align 4
  %cmp693 = icmp ne i32 %452, %455
  br i1 %cmp693, label %if.then.695, label %if.end.698

if.then.695:                                      ; preds = %lor.lhs.false.683, %lor.lhs.false.681, %if.end.651
  %456 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %457 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %458 = load %struct.rtx_def*, %struct.rtx_def** %final_value, align 8
  %call696 = call %struct.rtx_def* @gen_move_insn(%struct.rtx_def* %457, %struct.rtx_def* %458)
  %call697 = call %struct.rtx_def* @loop_insn_sink(%struct.loop* %456, %struct.rtx_def* %call696)
  br label %if.end.698

if.end.698:                                       ; preds = %if.then.695, %lor.lhs.false.683
  %459 = load %struct.rtx_def*, %struct.rtx_def** %loop_end, align 8
  %fld699 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %459, i32 0, i32 1
  %arrayidx700 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld699, i32 0, i64 1
  %rtx701 = bitcast %union.rtunion_def* %arrayidx700 to %struct.rtx_def**
  %460 = load %struct.rtx_def*, %struct.rtx_def** %rtx701, align 8
  %call702 = call %struct.rtx_def* @delete_related_insns(%struct.rtx_def* %460)
  %461 = load i32, i32* %compare_and_branch, align 4
  %cmp703 = icmp eq i32 %461, 2
  br i1 %cmp703, label %if.then.705, label %if.end.707

if.then.705:                                      ; preds = %if.end.698
  %462 = load %struct.rtx_def*, %struct.rtx_def** %first_compare, align 8
  %call706 = call %struct.rtx_def* @delete_related_insns(%struct.rtx_def* %462)
  br label %if.end.707

if.end.707:                                       ; preds = %if.then.705, %if.end.698
  call void @start_sequence()
  %463 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %464 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %465 = load i32, i32* %cmp_code, align 4
  %466 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %467 = bitcast %struct.rtx_def* %466 to i32*
  %bf.load708 = load i32, i32* %467, align 8
  %bf.lshr709 = lshr i32 %bf.load708, 16
  %bf.clear710 = and i32 %bf.lshr709, 255
  %468 = load %struct.rtx_def*, %struct.rtx_def** %jump_label, align 8
  %fld711 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %468, i32 0, i32 1
  %arrayidx712 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld711, i32 0, i64 0
  %rtx713 = bitcast %union.rtunion_def* %arrayidx712 to %struct.rtx_def**
  %469 = load %struct.rtx_def*, %struct.rtx_def** %rtx713, align 8
  call void @emit_cmp_and_jump_insns(%struct.rtx_def* %463, %struct.rtx_def* %464, i32 %465, %struct.rtx_def* null, i32 %bf.clear710, i32 0, %struct.rtx_def* %469)
  %call714 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call714, %struct.rtx_def** %tem, align 8
  call void @end_sequence()
  %470 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %471 = load %struct.rtx_def*, %struct.rtx_def** %loop_end, align 8
  %call715 = call %struct.rtx_def* @emit_jump_insn_before(%struct.rtx_def* %470, %struct.rtx_def* %471)
  %472 = load %struct.rtx_def*, %struct.rtx_def** %loop_end, align 8
  %fld716 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %472, i32 0, i32 1
  %arrayidx717 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld716, i32 0, i64 1
  %rtx718 = bitcast %union.rtunion_def* %arrayidx717 to %struct.rtx_def**
  %473 = load %struct.rtx_def*, %struct.rtx_def** %rtx718, align 8
  store %struct.rtx_def* %473, %struct.rtx_def** %tem, align 8
  br label %for.cond.719

for.cond.719:                                     ; preds = %for.inc.728, %if.end.707
  %474 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %tobool720 = icmp ne %struct.rtx_def* %474, null
  br i1 %tobool720, label %land.rhs.721, label %land.end.726

land.rhs.721:                                     ; preds = %for.cond.719
  %475 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %476 = bitcast %struct.rtx_def* %475 to i32*
  %bf.load722 = load i32, i32* %476, align 8
  %bf.clear723 = and i32 %bf.load722, 65535
  %cmp724 = icmp ne i32 %bf.clear723, 33
  br label %land.end.726

land.end.726:                                     ; preds = %land.rhs.721, %for.cond.719
  %477 = phi i1 [ false, %for.cond.719 ], [ %cmp724, %land.rhs.721 ]
  br i1 %477, label %for.body.727, label %for.end.732

for.body.727:                                     ; preds = %land.end.726
  br label %for.inc.728

for.inc.728:                                      ; preds = %for.body.727
  %478 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %fld729 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %478, i32 0, i32 1
  %arrayidx730 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld729, i32 0, i64 1
  %rtx731 = bitcast %union.rtunion_def* %arrayidx730 to %struct.rtx_def**
  %479 = load %struct.rtx_def*, %struct.rtx_def** %rtx731, align 8
  store %struct.rtx_def* %479, %struct.rtx_def** %tem, align 8
  br label %for.cond.719

for.end.732:                                      ; preds = %land.end.726
  %480 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %tobool733 = icmp ne %struct.rtx_def* %480, null
  br i1 %tobool733, label %if.then.734, label %if.end.741

if.then.734:                                      ; preds = %for.end.732
  %481 = load %struct.rtx_def*, %struct.rtx_def** %jump_label, align 8
  %fld735 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %481, i32 0, i32 1
  %arrayidx736 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld735, i32 0, i64 0
  %rtx737 = bitcast %union.rtunion_def* %arrayidx736 to %struct.rtx_def**
  %482 = load %struct.rtx_def*, %struct.rtx_def** %rtx737, align 8
  %483 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %fld738 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %483, i32 0, i32 1
  %arrayidx739 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld738, i32 0, i64 7
  %rtx740 = bitcast %union.rtunion_def* %arrayidx739 to %struct.rtx_def**
  store %struct.rtx_def* %482, %struct.rtx_def** %rtx740, align 8
  br label %if.end.741

if.end.741:                                       ; preds = %if.then.734, %for.end.732
  %484 = load i32, i32* %nonneg430, align 4
  %tobool742 = icmp ne i32 %484, 0
  br i1 %tobool742, label %if.then.743, label %if.end.758

if.then.743:                                      ; preds = %if.end.741
  %485 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %tobool744 = icmp ne %struct.rtx_def* %485, null
  br i1 %tobool744, label %if.then.745, label %if.end.753

if.then.745:                                      ; preds = %if.then.743
  %486 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %487 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %fld746 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %487, i32 0, i32 1
  %arrayidx747 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld746, i32 0, i64 6
  %rtx748 = bitcast %union.rtunion_def* %arrayidx747 to %struct.rtx_def**
  %488 = load %struct.rtx_def*, %struct.rtx_def** %rtx748, align 8
  %call749 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 8, %struct.rtx_def* %486, %struct.rtx_def* %488)
  %489 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %fld750 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %489, i32 0, i32 1
  %arrayidx751 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld750, i32 0, i64 6
  %rtx752 = bitcast %union.rtunion_def* %arrayidx751 to %struct.rtx_def**
  store %struct.rtx_def* %call749, %struct.rtx_def** %rtx752, align 8
  br label %if.end.753

if.end.753:                                       ; preds = %if.then.745, %if.then.743
  %490 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %nonneg754 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %490, i32 0, i32 12
  %bf.load755 = load i8, i8* %nonneg754, align 8
  %bf.clear756 = and i8 %bf.load755, -5
  %bf.set757 = or i8 %bf.clear756, 4
  store i8 %bf.set757, i8* %nonneg754, align 8
  br label %if.end.758

if.end.758:                                       ; preds = %if.end.753, %if.end.741
  %491 = load %struct.rtx_def*, %struct.rtx_def** %loop_start, align 8
  store %struct.rtx_def* %491, %struct.rtx_def** %p, align 8
  br label %for.cond.759

for.cond.759:                                     ; preds = %for.inc.882, %if.end.758
  %492 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %493 = load %struct.rtx_def*, %struct.rtx_def** %loop_end, align 8
  %cmp760 = icmp ne %struct.rtx_def* %492, %493
  br i1 %cmp760, label %for.body.762, label %for.end.886

for.body.762:                                     ; preds = %for.cond.759
  %494 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %495 = bitcast %struct.rtx_def* %494 to i32*
  %bf.load763 = load i32, i32* %495, align 8
  %bf.clear764 = and i32 %bf.load763, 65535
  %idxprom765 = sext i32 %bf.clear764 to i64
  %arrayidx766 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom765
  %496 = load i8, i8* %arrayidx766, align 1
  %conv767 = sext i8 %496 to i32
  %cmp768 = icmp eq i32 %conv767, 105
  br i1 %cmp768, label %if.then.770, label %if.end.881

if.then.770:                                      ; preds = %for.body.762
  %497 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %498 = bitcast %struct.rtx_def* %497 to i32*
  %bf.load772 = load i32, i32* %498, align 8
  %bf.clear773 = and i32 %bf.load772, 65535
  %idxprom774 = sext i32 %bf.clear773 to i64
  %arrayidx775 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom774
  %499 = load i8, i8* %arrayidx775, align 1
  %conv776 = sext i8 %499 to i32
  %cmp777 = icmp eq i32 %conv776, 105
  br i1 %cmp777, label %cond.true.779, label %cond.false.798

cond.true.779:                                    ; preds = %if.then.770
  %500 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld780 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %500, i32 0, i32 1
  %arrayidx781 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld780, i32 0, i64 3
  %rtx782 = bitcast %union.rtunion_def* %arrayidx781 to %struct.rtx_def**
  %501 = load %struct.rtx_def*, %struct.rtx_def** %rtx782, align 8
  %502 = bitcast %struct.rtx_def* %501 to i32*
  %bf.load783 = load i32, i32* %502, align 8
  %bf.clear784 = and i32 %bf.load783, 65535
  %cmp785 = icmp eq i32 %bf.clear784, 47
  br i1 %cmp785, label %cond.true.787, label %cond.false.791

cond.true.787:                                    ; preds = %cond.true.779
  %503 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld788 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %503, i32 0, i32 1
  %arrayidx789 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld788, i32 0, i64 3
  %rtx790 = bitcast %union.rtunion_def* %arrayidx789 to %struct.rtx_def**
  %504 = load %struct.rtx_def*, %struct.rtx_def** %rtx790, align 8
  br label %cond.end.796

cond.false.791:                                   ; preds = %cond.true.779
  %505 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %506 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld792 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %506, i32 0, i32 1
  %arrayidx793 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld792, i32 0, i64 3
  %rtx794 = bitcast %union.rtunion_def* %arrayidx793 to %struct.rtx_def**
  %507 = load %struct.rtx_def*, %struct.rtx_def** %rtx794, align 8
  %call795 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %505, %struct.rtx_def* %507)
  br label %cond.end.796

cond.end.796:                                     ; preds = %cond.false.791, %cond.true.787
  %cond797 = phi %struct.rtx_def* [ %504, %cond.true.787 ], [ %call795, %cond.false.791 ]
  br label %cond.end.799

cond.false.798:                                   ; preds = %if.then.770
  br label %cond.end.799

cond.end.799:                                     ; preds = %cond.false.798, %cond.end.796
  %cond800 = phi %struct.rtx_def* [ %cond797, %cond.end.796 ], [ null, %cond.false.798 ]
  store %struct.rtx_def* %cond800, %struct.rtx_def** %set771, align 8
  %508 = load %struct.rtx_def*, %struct.rtx_def** %set771, align 8
  %tobool801 = icmp ne %struct.rtx_def* %508, null
  br i1 %tobool801, label %lor.lhs.false.802, label %if.then.847

lor.lhs.false.802:                                ; preds = %cond.end.799
  %509 = load %struct.rtx_def*, %struct.rtx_def** %set771, align 8
  %fld803 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %509, i32 0, i32 1
  %arrayidx804 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld803, i32 0, i64 0
  %rtx805 = bitcast %union.rtunion_def* %arrayidx804 to %struct.rtx_def**
  %510 = load %struct.rtx_def*, %struct.rtx_def** %rtx805, align 8
  %511 = bitcast %struct.rtx_def* %510 to i32*
  %bf.load806 = load i32, i32* %511, align 8
  %bf.clear807 = and i32 %bf.load806, 65535
  %cmp808 = icmp ne i32 %bf.clear807, 61
  br i1 %cmp808, label %if.then.847, label %lor.lhs.false.810

lor.lhs.false.810:                                ; preds = %lor.lhs.false.802
  %512 = load %struct.rtx_def*, %struct.rtx_def** %set771, align 8
  %fld811 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %512, i32 0, i32 1
  %arrayidx812 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld811, i32 0, i64 0
  %rtx813 = bitcast %union.rtunion_def* %arrayidx812 to %struct.rtx_def**
  %513 = load %struct.rtx_def*, %struct.rtx_def** %rtx813, align 8
  %fld814 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %513, i32 0, i32 1
  %arrayidx815 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld814, i32 0, i64 0
  %rtuint816 = bitcast %union.rtunion_def* %arrayidx815 to i32*
  %514 = load i32, i32* %rtuint816, align 4
  %conv817 = zext i32 %514 to i64
  %515 = load %struct.loop_ivs*, %struct.loop_ivs** %ivs, align 8
  %n_regs = getelementptr inbounds %struct.loop_ivs, %struct.loop_ivs* %515, i32 0, i32 1
  %516 = load i32, i32* %n_regs, align 4
  %conv818 = zext i32 %516 to i64
  %cmp819 = icmp uge i64 %conv817, %conv818
  br i1 %cmp819, label %if.then.847, label %lor.lhs.false.821

lor.lhs.false.821:                                ; preds = %lor.lhs.false.810
  %517 = load %struct.rtx_def*, %struct.rtx_def** %set771, align 8
  %fld822 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %517, i32 0, i32 1
  %arrayidx823 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld822, i32 0, i64 0
  %rtx824 = bitcast %union.rtunion_def* %arrayidx823 to %struct.rtx_def**
  %518 = load %struct.rtx_def*, %struct.rtx_def** %rtx824, align 8
  %fld825 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %518, i32 0, i32 1
  %arrayidx826 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld825, i32 0, i64 0
  %rtuint827 = bitcast %union.rtunion_def* %arrayidx826 to i32*
  %519 = load i32, i32* %rtuint827, align 4
  %idxprom828 = zext i32 %519 to i64
  %520 = load %struct.loop_ivs*, %struct.loop_ivs** %ivs, align 8
  %regs829 = getelementptr inbounds %struct.loop_ivs, %struct.loop_ivs* %520, i32 0, i32 0
  %521 = load %struct.iv*, %struct.iv** %regs829, align 8
  %arrayidx830 = getelementptr inbounds %struct.iv, %struct.iv* %521, i64 %idxprom828
  %type = getelementptr inbounds %struct.iv, %struct.iv* %arrayidx830, i32 0, i32 0
  %522 = load i32, i32* %type, align 4
  %cmp831 = icmp ne i32 %522, 3
  br i1 %cmp831, label %if.then.847, label %lor.lhs.false.833

lor.lhs.false.833:                                ; preds = %lor.lhs.false.821
  %523 = load %struct.rtx_def*, %struct.rtx_def** %set771, align 8
  %fld834 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %523, i32 0, i32 1
  %arrayidx835 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld834, i32 0, i64 0
  %rtx836 = bitcast %union.rtunion_def* %arrayidx835 to %struct.rtx_def**
  %524 = load %struct.rtx_def*, %struct.rtx_def** %rtx836, align 8
  %fld837 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %524, i32 0, i32 1
  %arrayidx838 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld837, i32 0, i64 0
  %rtuint839 = bitcast %union.rtunion_def* %arrayidx838 to i32*
  %525 = load i32, i32* %rtuint839, align 4
  %idxprom840 = zext i32 %525 to i64
  %526 = load %struct.loop_ivs*, %struct.loop_ivs** %ivs, align 8
  %regs841 = getelementptr inbounds %struct.loop_ivs, %struct.loop_ivs* %526, i32 0, i32 0
  %527 = load %struct.iv*, %struct.iv** %regs841, align 8
  %arrayidx842 = getelementptr inbounds %struct.iv, %struct.iv* %527, i64 %idxprom840
  %iv = getelementptr inbounds %struct.iv, %struct.iv* %arrayidx842, i32 0, i32 1
  %info = bitcast %union.anon.0* %iv to %struct.induction**
  %528 = load %struct.induction*, %struct.induction** %info, align 8
  %src_reg = getelementptr inbounds %struct.induction, %struct.induction* %528, i32 0, i32 2
  %529 = load %struct.rtx_def*, %struct.rtx_def** %src_reg, align 8
  %530 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %biv843 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %530, i32 0, i32 2
  %531 = load %struct.induction*, %struct.induction** %biv843, align 8
  %src_reg844 = getelementptr inbounds %struct.induction, %struct.induction* %531, i32 0, i32 2
  %532 = load %struct.rtx_def*, %struct.rtx_def** %src_reg844, align 8
  %cmp845 = icmp ne %struct.rtx_def* %529, %532
  br i1 %cmp845, label %if.then.847, label %if.end.880

if.then.847:                                      ; preds = %lor.lhs.false.833, %lor.lhs.false.821, %lor.lhs.false.810, %lor.lhs.false.802, %cond.end.799
  %533 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld848 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %533, i32 0, i32 1
  %arrayidx849 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld848, i32 0, i64 6
  %rtx850 = bitcast %union.rtunion_def* %arrayidx849 to %struct.rtx_def**
  store %struct.rtx_def** %rtx850, %struct.rtx_def*** %pnote, align 8
  br label %for.cond.851

for.cond.851:                                     ; preds = %if.end.878, %if.then.847
  %534 = load %struct.rtx_def**, %struct.rtx_def*** %pnote, align 8
  %535 = load %struct.rtx_def*, %struct.rtx_def** %534, align 8
  %tobool852 = icmp ne %struct.rtx_def* %535, null
  br i1 %tobool852, label %for.body.853, label %for.end.879

for.body.853:                                     ; preds = %for.cond.851
  %536 = load %struct.rtx_def**, %struct.rtx_def*** %pnote, align 8
  %537 = load %struct.rtx_def*, %struct.rtx_def** %536, align 8
  %538 = bitcast %struct.rtx_def* %537 to i32*
  %bf.load854 = load i32, i32* %538, align 8
  %bf.lshr855 = lshr i32 %bf.load854, 16
  %bf.clear856 = and i32 %bf.lshr855, 255
  %cmp857 = icmp eq i32 %bf.clear856, 4
  br i1 %cmp857, label %land.lhs.true.859, label %if.else.874

land.lhs.true.859:                                ; preds = %for.body.853
  %539 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %regno860 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %539, i32 0, i32 0
  %540 = load i32, i32* %regno860, align 4
  %idxprom861 = zext i32 %540 to i64
  %541 = load %struct.function*, %struct.function** @cfun, align 8
  %emit862 = getelementptr inbounds %struct.function, %struct.function* %541, i32 0, i32 3
  %542 = load %struct.emit_status*, %struct.emit_status** %emit862, align 8
  %x_regno_reg_rtx863 = getelementptr inbounds %struct.emit_status, %struct.emit_status* %542, i32 0, i32 12
  %543 = load %struct.rtx_def**, %struct.rtx_def*** %x_regno_reg_rtx863, align 8
  %arrayidx864 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %543, i64 %idxprom861
  %544 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx864, align 8
  %545 = load %struct.rtx_def**, %struct.rtx_def*** %pnote, align 8
  %546 = load %struct.rtx_def*, %struct.rtx_def** %545, align 8
  %fld865 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %546, i32 0, i32 1
  %arrayidx866 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld865, i32 0, i64 0
  %rtx867 = bitcast %union.rtunion_def* %arrayidx866 to %struct.rtx_def**
  %547 = load %struct.rtx_def*, %struct.rtx_def** %rtx867, align 8
  %call868 = call i32 @reg_mentioned_p(%struct.rtx_def* %544, %struct.rtx_def* %547)
  %tobool869 = icmp ne i32 %call868, 0
  br i1 %tobool869, label %if.then.870, label %if.else.874

if.then.870:                                      ; preds = %land.lhs.true.859
  %548 = load %struct.rtx_def**, %struct.rtx_def*** %pnote, align 8
  %549 = load %struct.rtx_def*, %struct.rtx_def** %548, align 8
  %fld871 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %549, i32 0, i32 1
  %arrayidx872 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld871, i32 0, i64 1
  %rtx873 = bitcast %union.rtunion_def* %arrayidx872 to %struct.rtx_def**
  %550 = load %struct.rtx_def*, %struct.rtx_def** %rtx873, align 8
  %551 = load %struct.rtx_def**, %struct.rtx_def*** %pnote, align 8
  store %struct.rtx_def* %550, %struct.rtx_def** %551, align 8
  br label %if.end.878

if.else.874:                                      ; preds = %land.lhs.true.859, %for.body.853
  %552 = load %struct.rtx_def**, %struct.rtx_def*** %pnote, align 8
  %553 = load %struct.rtx_def*, %struct.rtx_def** %552, align 8
  %fld875 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %553, i32 0, i32 1
  %arrayidx876 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld875, i32 0, i64 1
  %rtx877 = bitcast %union.rtunion_def* %arrayidx876 to %struct.rtx_def**
  store %struct.rtx_def** %rtx877, %struct.rtx_def*** %pnote, align 8
  br label %if.end.878

if.end.878:                                       ; preds = %if.else.874, %if.then.870
  br label %for.cond.851

for.end.879:                                      ; preds = %for.cond.851
  br label %if.end.880

if.end.880:                                       ; preds = %for.end.879, %lor.lhs.false.833
  br label %if.end.881

if.end.881:                                       ; preds = %if.end.880, %for.body.762
  br label %for.inc.882

for.inc.882:                                      ; preds = %if.end.881
  %554 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld883 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %554, i32 0, i32 1
  %arrayidx884 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld883, i32 0, i64 2
  %rtx885 = bitcast %union.rtunion_def* %arrayidx884 to %struct.rtx_def**
  %555 = load %struct.rtx_def*, %struct.rtx_def** %rtx885, align 8
  store %struct.rtx_def* %555, %struct.rtx_def** %p, align 8
  br label %for.cond.759

for.end.886:                                      ; preds = %for.cond.759
  %556 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %reversed = getelementptr inbounds %struct.iv_class, %struct.iv_class* %556, i32 0, i32 12
  %bf.load887 = load i8, i8* %reversed, align 8
  %bf.clear888 = and i8 %bf.load887, -9
  %bf.set889 = or i8 %bf.clear888, 8
  store i8 %bf.set889, i8* %reversed, align 8
  %557 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %tobool890 = icmp ne %struct._IO_FILE* %557, null
  br i1 %tobool890, label %if.then.891, label %if.end.904

if.then.891:                                      ; preds = %for.end.886
  %558 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %call892 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %558, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.55, i32 0, i32 0))
  %559 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %nonneg893 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %559, i32 0, i32 12
  %bf.load894 = load i8, i8* %nonneg893, align 8
  %bf.lshr895 = lshr i8 %bf.load894, 2
  %bf.clear896 = and i8 %bf.lshr895, 1
  %bf.cast897 = zext i8 %bf.clear896 to i32
  %tobool898 = icmp ne i32 %bf.cast897, 0
  br i1 %tobool898, label %if.then.899, label %if.else.901

if.then.899:                                      ; preds = %if.then.891
  %560 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %call900 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %560, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.56, i32 0, i32 0))
  br label %if.end.903

if.else.901:                                      ; preds = %if.then.891
  %561 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %call902 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %561, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.18, i32 0, i32 0))
  br label %if.end.903

if.end.903:                                       ; preds = %if.else.901, %if.then.899
  br label %if.end.904

if.end.904:                                       ; preds = %if.end.903, %for.end.886
  store i32 1, i32* %retval
  br label %return

if.end.905:                                       ; preds = %land.lhs.true.425, %lor.lhs.false.420, %if.end.413
  br label %if.end.906

if.end.906:                                       ; preds = %if.end.905, %lor.lhs.false.407
  br label %if.end.907

if.end.907:                                       ; preds = %if.end.906, %land.lhs.true.193, %if.else.187
  br label %if.end.908

if.end.908:                                       ; preds = %if.end.907, %for.end.186
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.908, %if.end.904, %if.else.648, %if.then.644, %if.then.622, %if.then.557, %if.then.550, %if.else.529, %if.then.469, %if.else.377, %if.end.176, %if.end.116, %if.then.43, %if.then.21, %if.else.14, %if.then.6, %if.then
  %562 = load i32, i32* %retval
  ret i32 %562
}

; Function Attrs: nounwind uwtable
define internal i32 @loop_biv_eliminable_p(%struct.loop* %loop, %struct.iv_class* %bl, i32 %threshold, i32 %insn_count) #0 {
entry:
  %retval = alloca i32, align 4
  %loop.addr = alloca %struct.loop*, align 8
  %bl.addr = alloca %struct.iv_class*, align 8
  %threshold.addr = alloca i32, align 4
  %insn_count.addr = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  store %struct.iv_class* %bl, %struct.iv_class** %bl.addr, align 8
  store i32 %threshold, i32* %threshold.addr, align 4
  store i32 %insn_count, i32* %insn_count.addr, align 4
  %0 = load %struct.iv_class*, %struct.iv_class** %bl.addr, align 8
  %regno = getelementptr inbounds %struct.iv_class, %struct.iv_class* %0, i32 0, i32 0
  %1 = load i32, i32* %regno, align 4
  %idxprom = zext i32 %1 to i64
  %2 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %data = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %2, i32 0, i32 4
  %reg = bitcast %union.varray_data_tag* %data to [1 x %struct.reg_info_def*]*
  %arrayidx = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %reg, i32 0, i64 %idxprom
  %3 = load %struct.reg_info_def*, %struct.reg_info_def** %arrayidx, align 8
  %last_uid = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %3, i32 0, i32 1
  %4 = load i32, i32* %last_uid, align 4
  %idxprom1 = sext i32 %4 to i64
  %5 = load i32*, i32** @uid_luid, align 8
  %arrayidx2 = getelementptr inbounds i32, i32* %5, i64 %idxprom1
  %6 = load i32, i32* %arrayidx2, align 4
  %7 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %end = getelementptr inbounds %struct.loop, %struct.loop* %7, i32 0, i32 27
  %8 = load %struct.rtx_def*, %struct.rtx_def** %end, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtint = bitcast %union.rtunion_def* %arrayidx3 to i32*
  %9 = load i32, i32* %rtint, align 4
  %10 = load i32, i32* @max_uid_for_loop, align 4
  %cmp = icmp slt i32 %9, %10
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %11 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %end4 = getelementptr inbounds %struct.loop, %struct.loop* %11, i32 0, i32 27
  %12 = load %struct.rtx_def*, %struct.rtx_def** %end4, align 8
  %fld5 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1
  %arrayidx6 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld5, i32 0, i64 0
  %rtint7 = bitcast %union.rtunion_def* %arrayidx6 to i32*
  %13 = load i32, i32* %rtint7, align 4
  %idxprom8 = sext i32 %13 to i64
  %14 = load i32*, i32** @uid_luid, align 8
  %arrayidx9 = getelementptr inbounds i32, i32* %14, i64 %idxprom8
  %15 = load i32, i32* %arrayidx9, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 4530, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @__FUNCTION__.loop_biv_eliminable_p, i32 0, i32 0)) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %16, %cond.true
  %cond = phi i32 [ %15, %cond.true ], [ -1, %16 ]
  %cmp10 = icmp slt i32 %6, %cond
  br i1 %cmp10, label %land.lhs.true, label %lor.lhs.false

land.lhs.true:                                    ; preds = %cond.end
  %17 = load %struct.iv_class*, %struct.iv_class** %bl.addr, align 8
  %init_insn = getelementptr inbounds %struct.iv_class, %struct.iv_class* %17, i32 0, i32 10
  %18 = load %struct.rtx_def*, %struct.rtx_def** %init_insn, align 8
  %tobool = icmp ne %struct.rtx_def* %18, null
  br i1 %tobool, label %land.lhs.true.11, label %lor.lhs.false

land.lhs.true.11:                                 ; preds = %land.lhs.true
  %19 = load %struct.iv_class*, %struct.iv_class** %bl.addr, align 8
  %init_insn12 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %19, i32 0, i32 10
  %20 = load %struct.rtx_def*, %struct.rtx_def** %init_insn12, align 8
  %fld13 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1
  %arrayidx14 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld13, i32 0, i64 0
  %rtint15 = bitcast %union.rtunion_def* %arrayidx14 to i32*
  %21 = load i32, i32* %rtint15, align 4
  %22 = load i32, i32* @max_uid_for_loop, align 4
  %cmp16 = icmp slt i32 %21, %22
  br i1 %cmp16, label %land.lhs.true.17, label %lor.lhs.false

land.lhs.true.17:                                 ; preds = %land.lhs.true.11
  %23 = load %struct.iv_class*, %struct.iv_class** %bl.addr, align 8
  %regno18 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %23, i32 0, i32 0
  %24 = load i32, i32* %regno18, align 4
  %idxprom19 = zext i32 %24 to i64
  %25 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %data20 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %25, i32 0, i32 4
  %reg21 = bitcast %union.varray_data_tag* %data20 to [1 x %struct.reg_info_def*]*
  %arrayidx22 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %reg21, i32 0, i64 %idxprom19
  %26 = load %struct.reg_info_def*, %struct.reg_info_def** %arrayidx22, align 8
  %first_uid = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %26, i32 0, i32 0
  %27 = load i32, i32* %first_uid, align 4
  %idxprom23 = sext i32 %27 to i64
  %28 = load i32*, i32** @uid_luid, align 8
  %arrayidx24 = getelementptr inbounds i32, i32* %28, i64 %idxprom23
  %29 = load i32, i32* %arrayidx24, align 4
  %30 = load %struct.iv_class*, %struct.iv_class** %bl.addr, align 8
  %init_insn25 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %30, i32 0, i32 10
  %31 = load %struct.rtx_def*, %struct.rtx_def** %init_insn25, align 8
  %fld26 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1
  %arrayidx27 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld26, i32 0, i64 0
  %rtint28 = bitcast %union.rtunion_def* %arrayidx27 to i32*
  %32 = load i32, i32* %rtint28, align 4
  %33 = load i32, i32* @max_uid_for_loop, align 4
  %cmp29 = icmp slt i32 %32, %33
  br i1 %cmp29, label %cond.true.30, label %cond.false.37

cond.true.30:                                     ; preds = %land.lhs.true.17
  %34 = load %struct.iv_class*, %struct.iv_class** %bl.addr, align 8
  %init_insn31 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %34, i32 0, i32 10
  %35 = load %struct.rtx_def*, %struct.rtx_def** %init_insn31, align 8
  %fld32 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %35, i32 0, i32 1
  %arrayidx33 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld32, i32 0, i64 0
  %rtint34 = bitcast %union.rtunion_def* %arrayidx33 to i32*
  %36 = load i32, i32* %rtint34, align 4
  %idxprom35 = sext i32 %36 to i64
  %37 = load i32*, i32** @uid_luid, align 8
  %arrayidx36 = getelementptr inbounds i32, i32* %37, i64 %idxprom35
  %38 = load i32, i32* %arrayidx36, align 4
  br label %cond.end.38

cond.false.37:                                    ; preds = %land.lhs.true.17
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 4533, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @__FUNCTION__.loop_biv_eliminable_p, i32 0, i32 0)) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end.38

cond.end.38:                                      ; preds = %39, %cond.true.30
  %cond39 = phi i32 [ %38, %cond.true.30 ], [ -1, %39 ]
  %cmp40 = icmp sge i32 %29, %cond39
  br i1 %cmp40, label %land.lhs.true.41, label %lor.lhs.false

land.lhs.true.41:                                 ; preds = %cond.end.38
  %40 = load %struct.iv_class*, %struct.iv_class** %bl.addr, align 8
  %biv = getelementptr inbounds %struct.iv_class, %struct.iv_class* %40, i32 0, i32 2
  %41 = load %struct.induction*, %struct.induction** %biv, align 8
  %dest_reg = getelementptr inbounds %struct.induction, %struct.induction* %41, i32 0, i32 4
  %42 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg, align 8
  %43 = load %struct.iv_class*, %struct.iv_class** %bl.addr, align 8
  %init_set = getelementptr inbounds %struct.iv_class, %struct.iv_class* %43, i32 0, i32 11
  %44 = load %struct.rtx_def*, %struct.rtx_def** %init_set, align 8
  %fld42 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %44, i32 0, i32 1
  %arrayidx43 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld42, i32 0, i64 1
  %rtx = bitcast %union.rtunion_def* %arrayidx43 to %struct.rtx_def**
  %45 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %call = call i32 @reg_mentioned_p(%struct.rtx_def* %42, %struct.rtx_def* %45)
  %tobool44 = icmp ne i32 %call, 0
  br i1 %tobool44, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %land.lhs.true.41, %cond.end.38, %land.lhs.true.11, %land.lhs.true, %cond.end
  %46 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %47 = load %struct.iv_class*, %struct.iv_class** %bl.addr, align 8
  %call45 = call %struct.rtx_def* @final_biv_value(%struct.loop* %46, %struct.iv_class* %47)
  %48 = load %struct.iv_class*, %struct.iv_class** %bl.addr, align 8
  %final_value = getelementptr inbounds %struct.iv_class, %struct.iv_class* %48, i32 0, i32 8
  store %struct.rtx_def* %call45, %struct.rtx_def** %final_value, align 8
  %tobool46 = icmp ne %struct.rtx_def* %call45, null
  br i1 %tobool46, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true.41
  %49 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %50 = load %struct.iv_class*, %struct.iv_class** %bl.addr, align 8
  %51 = load i32, i32* %threshold.addr, align 4
  %52 = load i32, i32* %insn_count.addr, align 4
  %call47 = call i32 @maybe_eliminate_biv(%struct.loop* %49, %struct.iv_class* %50, i32 0, i32 %51, i32 %52)
  store i32 %call47, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %53 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %tobool48 = icmp ne %struct._IO_FILE* %53, null
  br i1 %tobool48, label %if.then.49, label %if.end.65

if.then.49:                                       ; preds = %if.end
  %54 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %55 = load %struct.iv_class*, %struct.iv_class** %bl.addr, align 8
  %regno50 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %55, i32 0, i32 0
  %56 = load i32, i32* %regno50, align 4
  %call51 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %54, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.57, i32 0, i32 0), i32 %56)
  %57 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %58 = load %struct.iv_class*, %struct.iv_class** %bl.addr, align 8
  %regno52 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %58, i32 0, i32 0
  %59 = load i32, i32* %regno52, align 4
  %idxprom53 = zext i32 %59 to i64
  %60 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %data54 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %60, i32 0, i32 4
  %reg55 = bitcast %union.varray_data_tag* %data54 to [1 x %struct.reg_info_def*]*
  %arrayidx56 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %reg55, i32 0, i64 %idxprom53
  %61 = load %struct.reg_info_def*, %struct.reg_info_def** %arrayidx56, align 8
  %first_uid57 = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %61, i32 0, i32 0
  %62 = load i32, i32* %first_uid57, align 4
  %63 = load %struct.iv_class*, %struct.iv_class** %bl.addr, align 8
  %regno58 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %63, i32 0, i32 0
  %64 = load i32, i32* %regno58, align 4
  %idxprom59 = zext i32 %64 to i64
  %65 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %data60 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %65, i32 0, i32 4
  %reg61 = bitcast %union.varray_data_tag* %data60 to [1 x %struct.reg_info_def*]*
  %arrayidx62 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %reg61, i32 0, i64 %idxprom59
  %66 = load %struct.reg_info_def*, %struct.reg_info_def** %arrayidx62, align 8
  %last_uid63 = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %66, i32 0, i32 1
  %67 = load i32, i32* %last_uid63, align 4
  %call64 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %57, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.58, i32 0, i32 0), i32 %62, i32 %67)
  br label %if.end.65

if.end.65:                                        ; preds = %if.then.49, %if.end
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.65, %if.then
  %68 = load i32, i32* %retval
  ret i32 %68
}

; Function Attrs: nounwind uwtable
define internal void @check_ext_dependent_givs(%struct.iv_class* %bl, %struct.loop_info* %loop_info) #0 {
entry:
  %bl.addr = alloca %struct.iv_class*, align 8
  %loop_info.addr = alloca %struct.loop_info*, align 8
  %ze_ok = alloca i32, align 4
  %se_ok = alloca i32, align 4
  %info_ok = alloca i32, align 4
  %biv_mode = alloca i32, align 4
  %start_val = alloca i64, align 8
  %u_end_val = alloca i64, align 8
  %u_start_val = alloca i64, align 8
  %incr = alloca %struct.rtx_def*, align 8
  %v = alloca %struct.induction*, align 8
  %abs_incr = alloca i64, align 8
  %total_incr = alloca i64, align 8
  %s_end_val = alloca i64, align 8
  %neg_incr = alloca i32, align 4
  %u_max = alloca i64, align 8
  %s_max = alloca i64, align 8
  %code = alloca i32, align 4
  %ok = alloca i32, align 4
  %outer_mode = alloca i32, align 4
  %max = alloca i64, align 8
  %why = alloca i8*, align 8
  store %struct.iv_class* %bl, %struct.iv_class** %bl.addr, align 8
  store %struct.loop_info* %loop_info, %struct.loop_info** %loop_info.addr, align 8
  store i32 0, i32* %ze_ok, align 4
  store i32 0, i32* %se_ok, align 4
  store i32 0, i32* %info_ok, align 4
  %0 = load %struct.iv_class*, %struct.iv_class** %bl.addr, align 8
  %biv = getelementptr inbounds %struct.iv_class, %struct.iv_class* %0, i32 0, i32 2
  %1 = load %struct.induction*, %struct.induction** %biv, align 8
  %src_reg = getelementptr inbounds %struct.induction, %struct.induction* %1, i32 0, i32 2
  %2 = load %struct.rtx_def*, %struct.rtx_def** %src_reg, align 8
  %3 = bitcast %struct.rtx_def* %2 to i32*
  %bf.load = load i32, i32* %3, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  store i32 %bf.clear, i32* %biv_mode, align 4
  store i64 0, i64* %u_end_val, align 8
  store i64 0, i64* %u_start_val, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 0), align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %incr, align 8
  %5 = load %struct.loop_info*, %struct.loop_info** %loop_info.addr, align 8
  %n_iterations = getelementptr inbounds %struct.loop_info, %struct.loop_info* %5, i32 0, i32 15
  %6 = load i64, i64* %n_iterations, align 8
  %cmp = icmp ugt i64 %6, 0
  br i1 %cmp, label %land.lhs.true, label %if.end.78

land.lhs.true:                                    ; preds = %entry
  %7 = load %struct.iv_class*, %struct.iv_class** %bl.addr, align 8
  %initial_value = getelementptr inbounds %struct.iv_class, %struct.iv_class* %7, i32 0, i32 6
  %8 = load %struct.rtx_def*, %struct.rtx_def** %initial_value, align 8
  %tobool = icmp ne %struct.rtx_def* %8, null
  br i1 %tobool, label %land.lhs.true.1, label %if.end.78

land.lhs.true.1:                                  ; preds = %land.lhs.true
  %9 = load %struct.iv_class*, %struct.iv_class** %bl.addr, align 8
  %initial_value2 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %9, i32 0, i32 6
  %10 = load %struct.rtx_def*, %struct.rtx_def** %initial_value2, align 8
  %11 = bitcast %struct.rtx_def* %10 to i32*
  %bf.load3 = load i32, i32* %11, align 8
  %bf.clear4 = and i32 %bf.load3, 65535
  %cmp5 = icmp eq i32 %bf.clear4, 54
  br i1 %cmp5, label %land.lhs.true.6, label %if.end.78

land.lhs.true.6:                                  ; preds = %land.lhs.true.1
  %12 = load %struct.iv_class*, %struct.iv_class** %bl.addr, align 8
  %call = call %struct.rtx_def* @biv_total_increment(%struct.iv_class* %12)
  store %struct.rtx_def* %call, %struct.rtx_def** %incr, align 8
  %tobool7 = icmp ne %struct.rtx_def* %call, null
  br i1 %tobool7, label %land.lhs.true.8, label %if.end.78

land.lhs.true.8:                                  ; preds = %land.lhs.true.6
  %13 = load %struct.rtx_def*, %struct.rtx_def** %incr, align 8
  %14 = bitcast %struct.rtx_def* %13 to i32*
  %bf.load9 = load i32, i32* %14, align 8
  %bf.clear10 = and i32 %bf.load9, 65535
  %cmp11 = icmp eq i32 %bf.clear10, 54
  br i1 %cmp11, label %land.lhs.true.12, label %if.end.78

land.lhs.true.12:                                 ; preds = %land.lhs.true.8
  %15 = load i32, i32* %biv_mode, align 4
  %idxprom = sext i32 %15 to i64
  %arrayidx = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom
  %16 = load i16, i16* %arrayidx, align 2
  %conv = zext i16 %16 to i32
  %cmp13 = icmp sge i32 64, %conv
  br i1 %cmp13, label %if.then, label %if.end.78

if.then:                                          ; preds = %land.lhs.true.12
  store i32 1, i32* %info_ok, align 4
  %17 = load %struct.iv_class*, %struct.iv_class** %bl.addr, align 8
  %initial_value15 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %17, i32 0, i32 6
  %18 = load %struct.rtx_def*, %struct.rtx_def** %initial_value15, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1
  %arrayidx16 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx16 to i64*
  %19 = load i64, i64* %rtwint, align 8
  store i64 %19, i64* %start_val, align 8
  %20 = load i64, i64* %start_val, align 8
  store i64 %20, i64* %u_start_val, align 8
  store i32 0, i32* %neg_incr, align 4
  %21 = load %struct.rtx_def*, %struct.rtx_def** %incr, align 8
  %fld17 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1
  %arrayidx18 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld17, i32 0, i64 0
  %rtwint19 = bitcast %union.rtunion_def* %arrayidx18 to i64*
  %22 = load i64, i64* %rtwint19, align 8
  store i64 %22, i64* %abs_incr, align 8
  %23 = load %struct.rtx_def*, %struct.rtx_def** %incr, align 8
  %fld20 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1
  %arrayidx21 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld20, i32 0, i64 0
  %rtwint22 = bitcast %union.rtunion_def* %arrayidx21 to i64*
  %24 = load i64, i64* %rtwint22, align 8
  %cmp23 = icmp slt i64 %24, 0
  br i1 %cmp23, label %if.then.25, label %if.end

if.then.25:                                       ; preds = %if.then
  store i32 1, i32* %neg_incr, align 4
  %25 = load i64, i64* %abs_incr, align 8
  %sub = sub i64 0, %25
  store i64 %sub, i64* %abs_incr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.25, %if.then
  %26 = load i64, i64* %abs_incr, align 8
  %27 = load %struct.loop_info*, %struct.loop_info** %loop_info.addr, align 8
  %n_iterations26 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %27, i32 0, i32 15
  %28 = load i64, i64* %n_iterations26, align 8
  %mul = mul i64 %26, %28
  store i64 %mul, i64* %total_incr, align 8
  %29 = load i64, i64* %total_incr, align 8
  %30 = load %struct.loop_info*, %struct.loop_info** %loop_info.addr, align 8
  %n_iterations27 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %30, i32 0, i32 15
  %31 = load i64, i64* %n_iterations27, align 8
  %div = udiv i64 %29, %31
  %32 = load i64, i64* %abs_incr, align 8
  %cmp28 = icmp eq i64 %div, %32
  br i1 %cmp28, label %if.then.30, label %if.end.77

if.then.30:                                       ; preds = %if.end
  %33 = load i64, i64* %start_val, align 8
  %34 = load i32, i32* %neg_incr, align 4
  %tobool31 = icmp ne i32 %34, 0
  br i1 %tobool31, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.30
  %35 = load i64, i64* %total_incr, align 8
  %sub32 = sub i64 0, %35
  br label %cond.end

cond.false:                                       ; preds = %if.then.30
  %36 = load i64, i64* %total_incr, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %sub32, %cond.true ], [ %36, %cond.false ]
  %add = add i64 %33, %cond
  store i64 %add, i64* %u_end_val, align 8
  %37 = load i64, i64* %u_end_val, align 8
  store i64 %37, i64* %s_end_val, align 8
  %38 = load i32, i32* %biv_mode, align 4
  %idxprom33 = sext i32 %38 to i64
  %arrayidx34 = getelementptr inbounds [59 x i64], [59 x i64]* @mode_mask_array, i32 0, i64 %idxprom33
  %39 = load i64, i64* %arrayidx34, align 8
  store i64 %39, i64* %u_max, align 8
  %40 = load i64, i64* %u_max, align 8
  %shr = lshr i64 %40, 1
  store i64 %shr, i64* %s_max, align 8
  %41 = load i64, i64* %start_val, align 8
  %cmp35 = icmp sge i64 %41, 0
  br i1 %cmp35, label %land.lhs.true.37, label %if.end.52

land.lhs.true.37:                                 ; preds = %cond.end
  %42 = load i32, i32* %neg_incr, align 4
  %tobool38 = icmp ne i32 %42, 0
  br i1 %tobool38, label %cond.true.39, label %cond.false.42

cond.true.39:                                     ; preds = %land.lhs.true.37
  %43 = load i64, i64* %u_end_val, align 8
  %44 = load i64, i64* %u_start_val, align 8
  %cmp40 = icmp ult i64 %43, %44
  br i1 %cmp40, label %land.lhs.true.45, label %if.end.52

cond.false.42:                                    ; preds = %land.lhs.true.37
  %45 = load i64, i64* %u_end_val, align 8
  %46 = load i64, i64* %u_start_val, align 8
  %cmp43 = icmp ugt i64 %45, %46
  br i1 %cmp43, label %land.lhs.true.45, label %if.end.52

land.lhs.true.45:                                 ; preds = %cond.false.42, %cond.true.39
  %47 = load i32, i32* %neg_incr, align 4
  %tobool46 = icmp ne i32 %47, 0
  br i1 %tobool46, label %cond.true.47, label %cond.false.48

cond.true.47:                                     ; preds = %land.lhs.true.45
  br i1 true, label %if.then.51, label %if.end.52

cond.false.48:                                    ; preds = %land.lhs.true.45
  %48 = load i64, i64* %u_end_val, align 8
  %49 = load i64, i64* %u_max, align 8
  %cmp49 = icmp ule i64 %48, %49
  br i1 %cmp49, label %if.then.51, label %if.end.52

if.then.51:                                       ; preds = %cond.false.48, %cond.true.47
  store i32 1, i32* %ze_ok, align 4
  br label %if.end.52

if.end.52:                                        ; preds = %if.then.51, %cond.false.48, %cond.true.47, %cond.false.42, %cond.true.39, %cond.end
  %50 = load i64, i64* %start_val, align 8
  %51 = load i64, i64* %s_max, align 8
  %sub53 = sub nsw i64 0, %51
  %sub54 = sub nsw i64 %sub53, 1
  %cmp55 = icmp sge i64 %50, %sub54
  br i1 %cmp55, label %land.lhs.true.57, label %if.end.76

land.lhs.true.57:                                 ; preds = %if.end.52
  %52 = load i32, i32* %neg_incr, align 4
  %tobool58 = icmp ne i32 %52, 0
  br i1 %tobool58, label %cond.true.59, label %cond.false.62

cond.true.59:                                     ; preds = %land.lhs.true.57
  %53 = load i64, i64* %s_end_val, align 8
  %54 = load i64, i64* %start_val, align 8
  %cmp60 = icmp slt i64 %53, %54
  br i1 %cmp60, label %land.lhs.true.65, label %if.end.76

cond.false.62:                                    ; preds = %land.lhs.true.57
  %55 = load i64, i64* %s_end_val, align 8
  %56 = load i64, i64* %start_val, align 8
  %cmp63 = icmp sgt i64 %55, %56
  br i1 %cmp63, label %land.lhs.true.65, label %if.end.76

land.lhs.true.65:                                 ; preds = %cond.false.62, %cond.true.59
  %57 = load i32, i32* %neg_incr, align 4
  %tobool66 = icmp ne i32 %57, 0
  br i1 %tobool66, label %cond.true.67, label %cond.false.72

cond.true.67:                                     ; preds = %land.lhs.true.65
  %58 = load i64, i64* %s_end_val, align 8
  %59 = load i64, i64* %s_max, align 8
  %sub68 = sub nsw i64 0, %59
  %sub69 = sub nsw i64 %sub68, 1
  %cmp70 = icmp sge i64 %58, %sub69
  br i1 %cmp70, label %if.then.75, label %if.end.76

cond.false.72:                                    ; preds = %land.lhs.true.65
  %60 = load i64, i64* %s_end_val, align 8
  %61 = load i64, i64* %s_max, align 8
  %cmp73 = icmp sle i64 %60, %61
  br i1 %cmp73, label %if.then.75, label %if.end.76

if.then.75:                                       ; preds = %cond.false.72, %cond.true.67
  store i32 1, i32* %se_ok, align 4
  br label %if.end.76

if.end.76:                                        ; preds = %if.then.75, %cond.false.72, %cond.true.67, %cond.false.62, %cond.true.59, %if.end.52
  br label %if.end.77

if.end.77:                                        ; preds = %if.end.76, %if.end
  br label %if.end.78

if.end.78:                                        ; preds = %if.end.77, %land.lhs.true.12, %land.lhs.true.8, %land.lhs.true.6, %land.lhs.true.1, %land.lhs.true, %entry
  %62 = load %struct.iv_class*, %struct.iv_class** %bl.addr, align 8
  %giv = getelementptr inbounds %struct.iv_class, %struct.iv_class* %62, i32 0, i32 4
  %63 = load %struct.induction*, %struct.induction** %giv, align 8
  store %struct.induction* %63, %struct.induction** %v, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.78
  %64 = load %struct.induction*, %struct.induction** %v, align 8
  %tobool79 = icmp ne %struct.induction* %64, null
  br i1 %tobool79, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %65 = load %struct.induction*, %struct.induction** %v, align 8
  %ext_dependent = getelementptr inbounds %struct.induction, %struct.induction* %65, i32 0, i32 16
  %66 = load %struct.rtx_def*, %struct.rtx_def** %ext_dependent, align 8
  %tobool80 = icmp ne %struct.rtx_def* %66, null
  br i1 %tobool80, label %if.then.81, label %if.end.141

if.then.81:                                       ; preds = %for.body
  %67 = load %struct.induction*, %struct.induction** %v, align 8
  %ext_dependent82 = getelementptr inbounds %struct.induction, %struct.induction* %67, i32 0, i32 16
  %68 = load %struct.rtx_def*, %struct.rtx_def** %ext_dependent82, align 8
  %69 = bitcast %struct.rtx_def* %68 to i32*
  %bf.load83 = load i32, i32* %69, align 8
  %bf.clear84 = and i32 %bf.load83, 65535
  store i32 %bf.clear84, i32* %code, align 4
  store i32 0, i32* %ok, align 4
  %70 = load i32, i32* %code, align 4
  switch i32 %70, label %sw.default [
    i32 120, label %sw.bb
    i32 121, label %sw.bb.85
    i32 122, label %sw.bb.86
  ]

sw.bb:                                            ; preds = %if.then.81
  %71 = load i32, i32* %se_ok, align 4
  store i32 %71, i32* %ok, align 4
  br label %sw.epilog

sw.bb.85:                                         ; preds = %if.then.81
  %72 = load i32, i32* %ze_ok, align 4
  store i32 %72, i32* %ok, align 4
  br label %sw.epilog

sw.bb.86:                                         ; preds = %if.then.81
  %73 = load i32, i32* %se_ok, align 4
  %tobool87 = icmp ne i32 %73, 0
  br i1 %tobool87, label %land.lhs.true.88, label %if.end.105

land.lhs.true.88:                                 ; preds = %sw.bb.86
  %74 = load i32, i32* %ze_ok, align 4
  %tobool89 = icmp ne i32 %74, 0
  br i1 %tobool89, label %if.then.90, label %if.end.105

if.then.90:                                       ; preds = %land.lhs.true.88
  %75 = load %struct.induction*, %struct.induction** %v, align 8
  %ext_dependent91 = getelementptr inbounds %struct.induction, %struct.induction* %75, i32 0, i32 16
  %76 = load %struct.rtx_def*, %struct.rtx_def** %ext_dependent91, align 8
  %77 = bitcast %struct.rtx_def* %76 to i32*
  %bf.load92 = load i32, i32* %77, align 8
  %bf.lshr93 = lshr i32 %bf.load92, 16
  %bf.clear94 = and i32 %bf.lshr93, 255
  store i32 %bf.clear94, i32* %outer_mode, align 4
  %78 = load i32, i32* %outer_mode, align 4
  %idxprom95 = sext i32 %78 to i64
  %arrayidx96 = getelementptr inbounds [59 x i64], [59 x i64]* @mode_mask_array, i32 0, i64 %idxprom95
  %79 = load i64, i64* %arrayidx96, align 8
  %shr97 = lshr i64 %79, 1
  store i64 %shr97, i64* %max, align 8
  %80 = load i64, i64* %u_start_val, align 8
  %81 = load i64, i64* %max, align 8
  %cmp98 = icmp ule i64 %80, %81
  br i1 %cmp98, label %land.lhs.true.100, label %if.end.104

land.lhs.true.100:                                ; preds = %if.then.90
  %82 = load i64, i64* %u_end_val, align 8
  %83 = load i64, i64* %max, align 8
  %cmp101 = icmp ule i64 %82, %83
  br i1 %cmp101, label %if.then.103, label %if.end.104

if.then.103:                                      ; preds = %land.lhs.true.100
  store i32 1, i32* %ok, align 4
  br label %if.end.104

if.end.104:                                       ; preds = %if.then.103, %land.lhs.true.100, %if.then.90
  br label %if.end.105

if.end.105:                                       ; preds = %if.end.104, %land.lhs.true.88, %sw.bb.86
  br label %sw.epilog

sw.default:                                       ; preds = %if.then.81
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 7362, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @__FUNCTION__.check_ext_dependent_givs, i32 0, i32 0)) #6
  unreachable

sw.epilog:                                        ; preds = %if.end.105, %sw.bb.85, %sw.bb
  %84 = load i32, i32* %ok, align 4
  %tobool106 = icmp ne i32 %84, 0
  br i1 %tobool106, label %if.then.107, label %if.else

if.then.107:                                      ; preds = %sw.epilog
  %85 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %tobool108 = icmp ne %struct._IO_FILE* %85, null
  br i1 %tobool108, label %if.then.109, label %if.end.113

if.then.109:                                      ; preds = %if.then.107
  %86 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %87 = load %struct.induction*, %struct.induction** %v, align 8
  %insn = getelementptr inbounds %struct.induction, %struct.induction* %87, i32 0, i32 0
  %88 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld110 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %88, i32 0, i32 1
  %arrayidx111 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld110, i32 0, i64 0
  %rtint = bitcast %union.rtunion_def* %arrayidx111 to i32*
  %89 = load i32, i32* %rtint, align 4
  %90 = load %struct.iv_class*, %struct.iv_class** %bl.addr, align 8
  %regno = getelementptr inbounds %struct.iv_class, %struct.iv_class* %90, i32 0, i32 0
  %91 = load i32, i32* %regno, align 4
  %call112 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %86, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.59, i32 0, i32 0), i32 %89, i32 %91)
  br label %if.end.113

if.end.113:                                       ; preds = %if.then.109, %if.then.107
  br label %if.end.140

if.else:                                          ; preds = %sw.epilog
  %92 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %tobool114 = icmp ne %struct._IO_FILE* %92, null
  br i1 %tobool114, label %if.then.115, label %if.end.135

if.then.115:                                      ; preds = %if.else
  %93 = load i32, i32* %info_ok, align 4
  %tobool116 = icmp ne i32 %93, 0
  br i1 %tobool116, label %if.then.117, label %if.else.118

if.then.117:                                      ; preds = %if.then.115
  store i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.60, i32 0, i32 0), i8** %why, align 8
  br label %if.end.129

if.else.118:                                      ; preds = %if.then.115
  %94 = load %struct.rtx_def*, %struct.rtx_def** %incr, align 8
  %95 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 0), align 8
  %cmp119 = icmp eq %struct.rtx_def* %94, %95
  br i1 %cmp119, label %if.then.121, label %if.end.123

if.then.121:                                      ; preds = %if.else.118
  %96 = load %struct.iv_class*, %struct.iv_class** %bl.addr, align 8
  %call122 = call %struct.rtx_def* @biv_total_increment(%struct.iv_class* %96)
  store %struct.rtx_def* %call122, %struct.rtx_def** %incr, align 8
  br label %if.end.123

if.end.123:                                       ; preds = %if.then.121, %if.else.118
  %97 = load %struct.rtx_def*, %struct.rtx_def** %incr, align 8
  %98 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %cmp124 = icmp eq %struct.rtx_def* %97, %98
  br i1 %cmp124, label %if.then.126, label %if.else.127

if.then.126:                                      ; preds = %if.end.123
  store i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.61, i32 0, i32 0), i8** %why, align 8
  br label %if.end.128

if.else.127:                                      ; preds = %if.end.123
  store i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.62, i32 0, i32 0), i8** %why, align 8
  br label %if.end.128

if.end.128:                                       ; preds = %if.else.127, %if.then.126
  br label %if.end.129

if.end.129:                                       ; preds = %if.end.128, %if.then.117
  %99 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %100 = load %struct.induction*, %struct.induction** %v, align 8
  %insn130 = getelementptr inbounds %struct.induction, %struct.induction* %100, i32 0, i32 0
  %101 = load %struct.rtx_def*, %struct.rtx_def** %insn130, align 8
  %fld131 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %101, i32 0, i32 1
  %arrayidx132 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld131, i32 0, i64 0
  %rtint133 = bitcast %union.rtunion_def* %arrayidx132 to i32*
  %102 = load i32, i32* %rtint133, align 4
  %103 = load i8*, i8** %why, align 8
  %call134 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %99, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.63, i32 0, i32 0), i32 %102, i8* %103)
  br label %if.end.135

if.end.135:                                       ; preds = %if.end.129, %if.else
  %104 = load %struct.induction*, %struct.induction** %v, align 8
  %ignore = getelementptr inbounds %struct.induction, %struct.induction* %104, i32 0, i32 13
  %bf.load136 = load i16, i16* %ignore, align 4
  %bf.clear137 = and i16 %bf.load136, -5
  %bf.set = or i16 %bf.clear137, 4
  store i16 %bf.set, i16* %ignore, align 4
  %105 = load %struct.iv_class*, %struct.iv_class** %bl.addr, align 8
  %all_reduced = getelementptr inbounds %struct.iv_class, %struct.iv_class* %105, i32 0, i32 12
  %bf.load138 = load i8, i8* %all_reduced, align 8
  %bf.clear139 = and i8 %bf.load138, -17
  store i8 %bf.clear139, i8* %all_reduced, align 8
  br label %if.end.140

if.end.140:                                       ; preds = %if.end.135, %if.end.113
  br label %if.end.141

if.end.141:                                       ; preds = %if.end.140, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.141
  %106 = load %struct.induction*, %struct.induction** %v, align 8
  %next_iv = getelementptr inbounds %struct.induction, %struct.induction* %106, i32 0, i32 17
  %107 = load %struct.induction*, %struct.induction** %next_iv, align 8
  store %struct.induction* %107, %struct.induction** %v, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @combine_givs(%struct.loop_regs* %regs, %struct.iv_class* %bl) #0 {
entry:
  %regs.addr = alloca %struct.loop_regs*, align 8
  %bl.addr = alloca %struct.iv_class*, align 8
  %extra_benefit = alloca i32, align 4
  %g1 = alloca %struct.induction*, align 8
  %g2 = alloca %struct.induction*, align 8
  %giv_array = alloca %struct.induction**, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %giv_count = alloca i32, align 4
  %stats = alloca %struct.combine_givs_stats*, align 8
  %can_combine = alloca %struct.rtx_def**, align 8
  %this_benefit = alloca i32, align 4
  %single_use = alloca %struct.rtx_def*, align 8
  %this_combine = alloca %struct.rtx_def*, align 8
  %g1_add_benefit = alloca i32, align 4
  %l = alloca i32, align 4
  %m = alloca i32, align 4
  %m231 = alloca i32, align 4
  store %struct.loop_regs* %regs, %struct.loop_regs** %regs.addr, align 8
  store %struct.iv_class* %bl, %struct.iv_class** %bl.addr, align 8
  store i32 3, i32* %extra_benefit, align 4
  store i32 0, i32* %giv_count, align 4
  %0 = load %struct.iv_class*, %struct.iv_class** %bl.addr, align 8
  %giv = getelementptr inbounds %struct.iv_class, %struct.iv_class* %0, i32 0, i32 4
  %1 = load %struct.induction*, %struct.induction** %giv, align 8
  store %struct.induction* %1, %struct.induction** %g1, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.induction*, %struct.induction** %g1, align 8
  %tobool = icmp ne %struct.induction* %2, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.induction*, %struct.induction** %g1, align 8
  %ignore = getelementptr inbounds %struct.induction, %struct.induction* %3, i32 0, i32 13
  %bf.load = load i16, i16* %ignore, align 4
  %bf.lshr = lshr i16 %bf.load, 2
  %bf.clear = and i16 %bf.lshr, 1
  %bf.cast = zext i16 %bf.clear to i32
  %tobool1 = icmp ne i32 %bf.cast, 0
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %for.body
  %4 = load i32, i32* %giv_count, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %giv_count, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %5 = load %struct.induction*, %struct.induction** %g1, align 8
  %next_iv = getelementptr inbounds %struct.induction, %struct.induction* %5, i32 0, i32 17
  %6 = load %struct.induction*, %struct.induction** %next_iv, align 8
  store %struct.induction* %6, %struct.induction** %g1, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %7 = load i32, i32* %giv_count, align 4
  %conv = sext i32 %7 to i64
  %mul = mul i64 %conv, 8
  %8 = alloca i8, i64 %mul
  %9 = bitcast i8* %8 to %struct.induction**
  store %struct.induction** %9, %struct.induction*** %giv_array, align 8
  store i32 0, i32* %i, align 4
  %10 = load %struct.iv_class*, %struct.iv_class** %bl.addr, align 8
  %giv2 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %10, i32 0, i32 4
  %11 = load %struct.induction*, %struct.induction** %giv2, align 8
  store %struct.induction* %11, %struct.induction** %g1, align 8
  br label %for.cond.3

for.cond.3:                                       ; preds = %for.inc.15, %for.end
  %12 = load %struct.induction*, %struct.induction** %g1, align 8
  %tobool4 = icmp ne %struct.induction* %12, null
  br i1 %tobool4, label %for.body.5, label %for.end.17

for.body.5:                                       ; preds = %for.cond.3
  %13 = load %struct.induction*, %struct.induction** %g1, align 8
  %ignore6 = getelementptr inbounds %struct.induction, %struct.induction* %13, i32 0, i32 13
  %bf.load7 = load i16, i16* %ignore6, align 4
  %bf.lshr8 = lshr i16 %bf.load7, 2
  %bf.clear9 = and i16 %bf.lshr8, 1
  %bf.cast10 = zext i16 %bf.clear9 to i32
  %tobool11 = icmp ne i32 %bf.cast10, 0
  br i1 %tobool11, label %if.end.14, label %if.then.12

if.then.12:                                       ; preds = %for.body.5
  %14 = load %struct.induction*, %struct.induction** %g1, align 8
  %15 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %15, 1
  store i32 %inc13, i32* %i, align 4
  %idxprom = sext i32 %15 to i64
  %16 = load %struct.induction**, %struct.induction*** %giv_array, align 8
  %arrayidx = getelementptr inbounds %struct.induction*, %struct.induction** %16, i64 %idxprom
  store %struct.induction* %14, %struct.induction** %arrayidx, align 8
  br label %if.end.14

if.end.14:                                        ; preds = %if.then.12, %for.body.5
  br label %for.inc.15

for.inc.15:                                       ; preds = %if.end.14
  %17 = load %struct.induction*, %struct.induction** %g1, align 8
  %next_iv16 = getelementptr inbounds %struct.induction, %struct.induction* %17, i32 0, i32 17
  %18 = load %struct.induction*, %struct.induction** %next_iv16, align 8
  store %struct.induction* %18, %struct.induction** %g1, align 8
  br label %for.cond.3

for.end.17:                                       ; preds = %for.cond.3
  %19 = load i32, i32* %giv_count, align 4
  %conv18 = sext i32 %19 to i64
  %call = call noalias i8* @xcalloc(i64 %conv18, i64 8)
  %20 = bitcast i8* %call to %struct.combine_givs_stats*
  store %struct.combine_givs_stats* %20, %struct.combine_givs_stats** %stats, align 8
  %21 = load i32, i32* %giv_count, align 4
  %conv19 = sext i32 %21 to i64
  %22 = load i32, i32* %giv_count, align 4
  %conv20 = sext i32 %22 to i64
  %mul21 = mul i64 %conv20, 8
  %call22 = call noalias i8* @xcalloc(i64 %conv19, i64 %mul21)
  %23 = bitcast i8* %call22 to %struct.rtx_def**
  store %struct.rtx_def** %23, %struct.rtx_def*** %can_combine, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond.23

for.cond.23:                                      ; preds = %for.inc.74, %for.end.17
  %24 = load i32, i32* %i, align 4
  %25 = load i32, i32* %giv_count, align 4
  %cmp = icmp slt i32 %24, %25
  br i1 %cmp, label %for.body.25, label %for.end.76

for.body.25:                                      ; preds = %for.cond.23
  %26 = load i32, i32* %i, align 4
  %idxprom26 = sext i32 %26 to i64
  %27 = load %struct.induction**, %struct.induction*** %giv_array, align 8
  %arrayidx27 = getelementptr inbounds %struct.induction*, %struct.induction** %27, i64 %idxprom26
  %28 = load %struct.induction*, %struct.induction** %arrayidx27, align 8
  store %struct.induction* %28, %struct.induction** %g1, align 8
  %29 = load i32, i32* %i, align 4
  %30 = load i32, i32* %i, align 4
  %idxprom28 = sext i32 %30 to i64
  %31 = load %struct.combine_givs_stats*, %struct.combine_givs_stats** %stats, align 8
  %arrayidx29 = getelementptr inbounds %struct.combine_givs_stats, %struct.combine_givs_stats* %31, i64 %idxprom28
  %giv_number = getelementptr inbounds %struct.combine_givs_stats, %struct.combine_givs_stats* %arrayidx29, i32 0, i32 0
  store i32 %29, i32* %giv_number, align 4
  %32 = load %struct.induction*, %struct.induction** %g1, align 8
  %giv_type = getelementptr inbounds %struct.induction, %struct.induction* %32, i32 0, i32 3
  %33 = load i32, i32* %giv_type, align 4
  %cmp30 = icmp eq i32 %33, 1
  br i1 %cmp30, label %land.lhs.true, label %if.end.40

land.lhs.true:                                    ; preds = %for.body.25
  %34 = load %struct.induction*, %struct.induction** %g1, align 8
  %dest_reg = getelementptr inbounds %struct.induction, %struct.induction* %34, i32 0, i32 4
  %35 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %35, i32 0, i32 1
  %arrayidx32 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx32 to i32*
  %36 = load i32, i32* %rtuint, align 4
  %idxprom33 = zext i32 %36 to i64
  %37 = load %struct.loop_regs*, %struct.loop_regs** %regs.addr, align 8
  %array = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %37, i32 0, i32 2
  %38 = load %struct.loop_reg*, %struct.loop_reg** %array, align 8
  %arrayidx34 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %38, i64 %idxprom33
  %single_usage = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %arrayidx34, i32 0, i32 2
  %39 = load %struct.rtx_def*, %struct.rtx_def** %single_usage, align 8
  store %struct.rtx_def* %39, %struct.rtx_def** %single_use, align 8
  %tobool35 = icmp ne %struct.rtx_def* %39, null
  br i1 %tobool35, label %land.lhs.true.36, label %if.end.40

land.lhs.true.36:                                 ; preds = %land.lhs.true
  %40 = load %struct.rtx_def*, %struct.rtx_def** %single_use, align 8
  %41 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %cmp37 = icmp ne %struct.rtx_def* %40, %41
  br i1 %cmp37, label %if.then.39, label %if.end.40

if.then.39:                                       ; preds = %land.lhs.true.36
  br label %for.inc.74

if.end.40:                                        ; preds = %land.lhs.true.36, %land.lhs.true, %for.body.25
  %42 = load %struct.induction*, %struct.induction** %g1, align 8
  %benefit = getelementptr inbounds %struct.induction, %struct.induction* %42, i32 0, i32 10
  %43 = load i32, i32* %benefit, align 4
  store i32 %43, i32* %this_benefit, align 4
  %44 = load %struct.induction*, %struct.induction** %g1, align 8
  %no_const_addval = getelementptr inbounds %struct.induction, %struct.induction* %44, i32 0, i32 13
  %bf.load41 = load i16, i16* %no_const_addval, align 4
  %bf.lshr42 = lshr i16 %bf.load41, 11
  %bf.clear43 = and i16 %bf.lshr42, 1
  %bf.cast44 = zext i16 %bf.clear43 to i32
  %tobool45 = icmp ne i32 %bf.cast44, 0
  br i1 %tobool45, label %if.then.46, label %if.end.47

if.then.46:                                       ; preds = %if.end.40
  %45 = load i32, i32* %this_benefit, align 4
  %add = add nsw i32 %45, 1
  store i32 %add, i32* %this_benefit, align 4
  br label %if.end.47

if.end.47:                                        ; preds = %if.then.46, %if.end.40
  store i32 0, i32* %j, align 4
  br label %for.cond.48

for.cond.48:                                      ; preds = %for.inc.69, %if.end.47
  %46 = load i32, i32* %j, align 4
  %47 = load i32, i32* %giv_count, align 4
  %cmp49 = icmp slt i32 %46, %47
  br i1 %cmp49, label %for.body.51, label %for.end.71

for.body.51:                                      ; preds = %for.cond.48
  %48 = load i32, i32* %j, align 4
  %idxprom52 = sext i32 %48 to i64
  %49 = load %struct.induction**, %struct.induction*** %giv_array, align 8
  %arrayidx53 = getelementptr inbounds %struct.induction*, %struct.induction** %49, i64 %idxprom52
  %50 = load %struct.induction*, %struct.induction** %arrayidx53, align 8
  store %struct.induction* %50, %struct.induction** %g2, align 8
  %51 = load %struct.induction*, %struct.induction** %g1, align 8
  %52 = load %struct.induction*, %struct.induction** %g2, align 8
  %cmp54 = icmp ne %struct.induction* %51, %52
  br i1 %cmp54, label %land.lhs.true.56, label %if.end.68

land.lhs.true.56:                                 ; preds = %for.body.51
  %53 = load %struct.induction*, %struct.induction** %g1, align 8
  %54 = load %struct.induction*, %struct.induction** %g2, align 8
  %call57 = call %struct.rtx_def* @combine_givs_p(%struct.induction* %53, %struct.induction* %54)
  store %struct.rtx_def* %call57, %struct.rtx_def** %this_combine, align 8
  %cmp58 = icmp ne %struct.rtx_def* %call57, null
  br i1 %cmp58, label %if.then.60, label %if.end.68

if.then.60:                                       ; preds = %land.lhs.true.56
  %55 = load %struct.rtx_def*, %struct.rtx_def** %this_combine, align 8
  %56 = load i32, i32* %i, align 4
  %57 = load i32, i32* %giv_count, align 4
  %mul61 = mul nsw i32 %56, %57
  %58 = load i32, i32* %j, align 4
  %add62 = add nsw i32 %mul61, %58
  %idxprom63 = sext i32 %add62 to i64
  %59 = load %struct.rtx_def**, %struct.rtx_def*** %can_combine, align 8
  %arrayidx64 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %59, i64 %idxprom63
  store %struct.rtx_def* %55, %struct.rtx_def** %arrayidx64, align 8
  %60 = load %struct.induction*, %struct.induction** %g2, align 8
  %benefit65 = getelementptr inbounds %struct.induction, %struct.induction* %60, i32 0, i32 10
  %61 = load i32, i32* %benefit65, align 4
  %add66 = add nsw i32 %61, 3
  %62 = load i32, i32* %this_benefit, align 4
  %add67 = add nsw i32 %62, %add66
  store i32 %add67, i32* %this_benefit, align 4
  br label %if.end.68

if.end.68:                                        ; preds = %if.then.60, %land.lhs.true.56, %for.body.51
  br label %for.inc.69

for.inc.69:                                       ; preds = %if.end.68
  %63 = load i32, i32* %j, align 4
  %inc70 = add nsw i32 %63, 1
  store i32 %inc70, i32* %j, align 4
  br label %for.cond.48

for.end.71:                                       ; preds = %for.cond.48
  %64 = load i32, i32* %this_benefit, align 4
  %65 = load i32, i32* %i, align 4
  %idxprom72 = sext i32 %65 to i64
  %66 = load %struct.combine_givs_stats*, %struct.combine_givs_stats** %stats, align 8
  %arrayidx73 = getelementptr inbounds %struct.combine_givs_stats, %struct.combine_givs_stats* %66, i64 %idxprom72
  %total_benefit = getelementptr inbounds %struct.combine_givs_stats, %struct.combine_givs_stats* %arrayidx73, i32 0, i32 1
  store i32 %64, i32* %total_benefit, align 4
  br label %for.inc.74

for.inc.74:                                       ; preds = %for.end.71, %if.then.39
  %67 = load i32, i32* %i, align 4
  %inc75 = add nsw i32 %67, 1
  store i32 %inc75, i32* %i, align 4
  br label %for.cond.23

for.end.76:                                       ; preds = %for.cond.23
  br label %restart

restart:                                          ; preds = %for.end.250, %for.end.76
  %68 = load %struct.combine_givs_stats*, %struct.combine_givs_stats** %stats, align 8
  %69 = bitcast %struct.combine_givs_stats* %68 to i8*
  %70 = load i32, i32* %giv_count, align 4
  call void @specqsort(i8* %69, i32 %70, i32 8, i32 (...)* bitcast (i32 (i8*, i8*)* @cmp_combine_givs_stats to i32 (...)*))
  %71 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %tobool77 = icmp ne %struct._IO_FILE* %71, null
  br i1 %tobool77, label %if.then.78, label %if.end.109

if.then.78:                                       ; preds = %restart
  %72 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %call79 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %72, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.64, i32 0, i32 0))
  store i32 0, i32* %k, align 4
  br label %for.cond.80

for.cond.80:                                      ; preds = %for.inc.105, %if.then.78
  %73 = load i32, i32* %k, align 4
  %74 = load i32, i32* %giv_count, align 4
  %cmp81 = icmp slt i32 %73, %74
  br i1 %cmp81, label %for.body.83, label %for.end.107

for.body.83:                                      ; preds = %for.cond.80
  %75 = load i32, i32* %k, align 4
  %idxprom84 = sext i32 %75 to i64
  %76 = load %struct.combine_givs_stats*, %struct.combine_givs_stats** %stats, align 8
  %arrayidx85 = getelementptr inbounds %struct.combine_givs_stats, %struct.combine_givs_stats* %76, i64 %idxprom84
  %giv_number86 = getelementptr inbounds %struct.combine_givs_stats, %struct.combine_givs_stats* %arrayidx85, i32 0, i32 0
  %77 = load i32, i32* %giv_number86, align 4
  %idxprom87 = sext i32 %77 to i64
  %78 = load %struct.induction**, %struct.induction*** %giv_array, align 8
  %arrayidx88 = getelementptr inbounds %struct.induction*, %struct.induction** %78, i64 %idxprom87
  %79 = load %struct.induction*, %struct.induction** %arrayidx88, align 8
  store %struct.induction* %79, %struct.induction** %g1, align 8
  %80 = load %struct.induction*, %struct.induction** %g1, align 8
  %combined_with = getelementptr inbounds %struct.induction, %struct.induction* %80, i32 0, i32 12
  %81 = load i32, i32* %combined_with, align 4
  %tobool89 = icmp ne i32 %81, 0
  br i1 %tobool89, label %if.end.104, label %land.lhs.true.90

land.lhs.true.90:                                 ; preds = %for.body.83
  %82 = load %struct.induction*, %struct.induction** %g1, align 8
  %same = getelementptr inbounds %struct.induction, %struct.induction* %82, i32 0, i32 18
  %83 = load %struct.induction*, %struct.induction** %same, align 8
  %tobool91 = icmp ne %struct.induction* %83, null
  br i1 %tobool91, label %if.end.104, label %if.then.92

if.then.92:                                       ; preds = %land.lhs.true.90
  %84 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %85 = load i32, i32* %k, align 4
  %idxprom93 = sext i32 %85 to i64
  %86 = load %struct.combine_givs_stats*, %struct.combine_givs_stats** %stats, align 8
  %arrayidx94 = getelementptr inbounds %struct.combine_givs_stats, %struct.combine_givs_stats* %86, i64 %idxprom93
  %giv_number95 = getelementptr inbounds %struct.combine_givs_stats, %struct.combine_givs_stats* %arrayidx94, i32 0, i32 0
  %87 = load i32, i32* %giv_number95, align 4
  %idxprom96 = sext i32 %87 to i64
  %88 = load %struct.induction**, %struct.induction*** %giv_array, align 8
  %arrayidx97 = getelementptr inbounds %struct.induction*, %struct.induction** %88, i64 %idxprom96
  %89 = load %struct.induction*, %struct.induction** %arrayidx97, align 8
  %insn = getelementptr inbounds %struct.induction, %struct.induction* %89, i32 0, i32 0
  %90 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld98 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %90, i32 0, i32 1
  %arrayidx99 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld98, i32 0, i64 0
  %rtint = bitcast %union.rtunion_def* %arrayidx99 to i32*
  %91 = load i32, i32* %rtint, align 4
  %92 = load i32, i32* %k, align 4
  %idxprom100 = sext i32 %92 to i64
  %93 = load %struct.combine_givs_stats*, %struct.combine_givs_stats** %stats, align 8
  %arrayidx101 = getelementptr inbounds %struct.combine_givs_stats, %struct.combine_givs_stats* %93, i64 %idxprom100
  %total_benefit102 = getelementptr inbounds %struct.combine_givs_stats, %struct.combine_givs_stats* %arrayidx101, i32 0, i32 1
  %94 = load i32, i32* %total_benefit102, align 4
  %call103 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %84, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.65, i32 0, i32 0), i32 %91, i32 %94)
  br label %if.end.104

if.end.104:                                       ; preds = %if.then.92, %land.lhs.true.90, %for.body.83
  br label %for.inc.105

for.inc.105:                                      ; preds = %if.end.104
  %95 = load i32, i32* %k, align 4
  %inc106 = add nsw i32 %95, 1
  store i32 %inc106, i32* %k, align 4
  br label %for.cond.80

for.end.107:                                      ; preds = %for.cond.80
  %96 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %call108 = call i32 @_IO_putc(i32 10, %struct._IO_FILE* %96)
  br label %if.end.109

if.end.109:                                       ; preds = %for.end.107, %restart
  store i32 0, i32* %k, align 4
  br label %for.cond.110

for.cond.110:                                     ; preds = %for.inc.254, %if.end.109
  %97 = load i32, i32* %k, align 4
  %98 = load i32, i32* %giv_count, align 4
  %cmp111 = icmp slt i32 %97, %98
  br i1 %cmp111, label %for.body.113, label %for.end.256

for.body.113:                                     ; preds = %for.cond.110
  store i32 0, i32* %g1_add_benefit, align 4
  %99 = load i32, i32* %k, align 4
  %idxprom114 = sext i32 %99 to i64
  %100 = load %struct.combine_givs_stats*, %struct.combine_givs_stats** %stats, align 8
  %arrayidx115 = getelementptr inbounds %struct.combine_givs_stats, %struct.combine_givs_stats* %100, i64 %idxprom114
  %giv_number116 = getelementptr inbounds %struct.combine_givs_stats, %struct.combine_givs_stats* %arrayidx115, i32 0, i32 0
  %101 = load i32, i32* %giv_number116, align 4
  store i32 %101, i32* %i, align 4
  %102 = load i32, i32* %i, align 4
  %idxprom117 = sext i32 %102 to i64
  %103 = load %struct.induction**, %struct.induction*** %giv_array, align 8
  %arrayidx118 = getelementptr inbounds %struct.induction*, %struct.induction** %103, i64 %idxprom117
  %104 = load %struct.induction*, %struct.induction** %arrayidx118, align 8
  store %struct.induction* %104, %struct.induction** %g1, align 8
  %105 = load %struct.induction*, %struct.induction** %g1, align 8
  %combined_with119 = getelementptr inbounds %struct.induction, %struct.induction* %105, i32 0, i32 12
  %106 = load i32, i32* %combined_with119, align 4
  %tobool120 = icmp ne i32 %106, 0
  br i1 %tobool120, label %if.then.123, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body.113
  %107 = load %struct.induction*, %struct.induction** %g1, align 8
  %same121 = getelementptr inbounds %struct.induction, %struct.induction* %107, i32 0, i32 18
  %108 = load %struct.induction*, %struct.induction** %same121, align 8
  %tobool122 = icmp ne %struct.induction* %108, null
  br i1 %tobool122, label %if.then.123, label %if.end.124

if.then.123:                                      ; preds = %lor.lhs.false, %for.body.113
  br label %for.inc.254

if.end.124:                                       ; preds = %lor.lhs.false
  store i32 0, i32* %j, align 4
  br label %for.cond.125

for.cond.125:                                     ; preds = %for.inc.221, %if.end.124
  %109 = load i32, i32* %j, align 4
  %110 = load i32, i32* %giv_count, align 4
  %cmp126 = icmp slt i32 %109, %110
  br i1 %cmp126, label %for.body.128, label %for.end.223

for.body.128:                                     ; preds = %for.cond.125
  %111 = load i32, i32* %j, align 4
  %idxprom129 = sext i32 %111 to i64
  %112 = load %struct.induction**, %struct.induction*** %giv_array, align 8
  %arrayidx130 = getelementptr inbounds %struct.induction*, %struct.induction** %112, i64 %idxprom129
  %113 = load %struct.induction*, %struct.induction** %arrayidx130, align 8
  store %struct.induction* %113, %struct.induction** %g2, align 8
  %114 = load %struct.induction*, %struct.induction** %g1, align 8
  %115 = load %struct.induction*, %struct.induction** %g2, align 8
  %cmp131 = icmp ne %struct.induction* %114, %115
  br i1 %cmp131, label %land.lhs.true.133, label %if.end.220

land.lhs.true.133:                                ; preds = %for.body.128
  %116 = load i32, i32* %i, align 4
  %117 = load i32, i32* %giv_count, align 4
  %mul134 = mul nsw i32 %116, %117
  %118 = load i32, i32* %j, align 4
  %add135 = add nsw i32 %mul134, %118
  %idxprom136 = sext i32 %add135 to i64
  %119 = load %struct.rtx_def**, %struct.rtx_def*** %can_combine, align 8
  %arrayidx137 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %119, i64 %idxprom136
  %120 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx137, align 8
  %tobool138 = icmp ne %struct.rtx_def* %120, null
  br i1 %tobool138, label %land.lhs.true.139, label %if.end.220

land.lhs.true.139:                                ; preds = %land.lhs.true.133
  %121 = load %struct.induction*, %struct.induction** %g2, align 8
  %same140 = getelementptr inbounds %struct.induction, %struct.induction* %121, i32 0, i32 18
  %122 = load %struct.induction*, %struct.induction** %same140, align 8
  %tobool141 = icmp ne %struct.induction* %122, null
  br i1 %tobool141, label %if.end.220, label %land.lhs.true.142

land.lhs.true.142:                                ; preds = %land.lhs.true.139
  %123 = load %struct.induction*, %struct.induction** %g2, align 8
  %combined_with143 = getelementptr inbounds %struct.induction, %struct.induction* %123, i32 0, i32 12
  %124 = load i32, i32* %combined_with143, align 4
  %tobool144 = icmp ne i32 %124, 0
  br i1 %tobool144, label %if.end.220, label %if.then.145

if.then.145:                                      ; preds = %land.lhs.true.142
  %125 = load i32, i32* %i, align 4
  %126 = load i32, i32* %giv_count, align 4
  %mul146 = mul nsw i32 %125, %126
  %127 = load i32, i32* %j, align 4
  %add147 = add nsw i32 %mul146, %127
  %idxprom148 = sext i32 %add147 to i64
  %128 = load %struct.rtx_def**, %struct.rtx_def*** %can_combine, align 8
  %arrayidx149 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %128, i64 %idxprom148
  %129 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx149, align 8
  %130 = load %struct.induction*, %struct.induction** %g2, align 8
  %new_reg = getelementptr inbounds %struct.induction, %struct.induction* %130, i32 0, i32 1
  store %struct.rtx_def* %129, %struct.rtx_def** %new_reg, align 8
  %131 = load %struct.induction*, %struct.induction** %g1, align 8
  %132 = load %struct.induction*, %struct.induction** %g2, align 8
  %same150 = getelementptr inbounds %struct.induction, %struct.induction* %132, i32 0, i32 18
  store %struct.induction* %131, %struct.induction** %same150, align 8
  %133 = load %struct.induction*, %struct.induction** %g2, align 8
  %giv_type151 = getelementptr inbounds %struct.induction, %struct.induction* %133, i32 0, i32 3
  %134 = load i32, i32* %giv_type151, align 4
  %cmp152 = icmp eq i32 %134, 0
  br i1 %cmp152, label %if.then.154, label %if.end.163

if.then.154:                                      ; preds = %if.then.145
  %135 = load %struct.induction*, %struct.induction** %g2, align 8
  %benefit155 = getelementptr inbounds %struct.induction, %struct.induction* %135, i32 0, i32 10
  %136 = load i32, i32* %benefit155, align 4
  %137 = load i32, i32* @reg_address_cost, align 4
  %add156 = add nsw i32 %136, %137
  %138 = load %struct.induction*, %struct.induction** %g2, align 8
  %new_reg157 = getelementptr inbounds %struct.induction, %struct.induction* %138, i32 0, i32 1
  %139 = load %struct.rtx_def*, %struct.rtx_def** %new_reg157, align 8
  %140 = load %struct.induction*, %struct.induction** %g2, align 8
  %mem = getelementptr inbounds %struct.induction, %struct.induction* %140, i32 0, i32 7
  %141 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8
  %142 = bitcast %struct.rtx_def* %141 to i32*
  %bf.load158 = load i32, i32* %142, align 8
  %bf.lshr159 = lshr i32 %bf.load158, 16
  %bf.clear160 = and i32 %bf.lshr159, 255
  %call161 = call i32 @address_cost(%struct.rtx_def* %139, i32 %bf.clear160)
  %sub = sub nsw i32 %add156, %call161
  %143 = load %struct.induction*, %struct.induction** %g2, align 8
  %benefit162 = getelementptr inbounds %struct.induction, %struct.induction* %143, i32 0, i32 10
  store i32 %sub, i32* %benefit162, align 4
  br label %if.end.163

if.end.163:                                       ; preds = %if.then.154, %if.then.145
  %144 = load %struct.induction*, %struct.induction** %g1, align 8
  %combined_with164 = getelementptr inbounds %struct.induction, %struct.induction* %144, i32 0, i32 12
  %145 = load i32, i32* %combined_with164, align 4
  %inc165 = add i32 %145, 1
  store i32 %inc165, i32* %combined_with164, align 4
  %146 = load %struct.induction*, %struct.induction** %g2, align 8
  %lifetime = getelementptr inbounds %struct.induction, %struct.induction* %146, i32 0, i32 14
  %147 = load i32, i32* %lifetime, align 4
  %148 = load %struct.induction*, %struct.induction** %g1, align 8
  %lifetime166 = getelementptr inbounds %struct.induction, %struct.induction* %148, i32 0, i32 14
  %149 = load i32, i32* %lifetime166, align 4
  %add167 = add nsw i32 %149, %147
  store i32 %add167, i32* %lifetime166, align 4
  %150 = load %struct.induction*, %struct.induction** %g2, align 8
  %benefit168 = getelementptr inbounds %struct.induction, %struct.induction* %150, i32 0, i32 10
  %151 = load i32, i32* %benefit168, align 4
  %152 = load i32, i32* %g1_add_benefit, align 4
  %add169 = add nsw i32 %152, %151
  store i32 %add169, i32* %g1_add_benefit, align 4
  %153 = load %struct.induction*, %struct.induction** %g2, align 8
  %replaceable = getelementptr inbounds %struct.induction, %struct.induction* %153, i32 0, i32 13
  %bf.load170 = load i16, i16* %replaceable, align 4
  %bf.clear171 = and i16 %bf.load170, 1
  %bf.cast172 = zext i16 %bf.clear171 to i32
  %tobool173 = icmp ne i32 %bf.cast172, 0
  br i1 %tobool173, label %if.end.182, label %land.lhs.true.174

land.lhs.true.174:                                ; preds = %if.end.163
  %154 = load %struct.induction*, %struct.induction** %g2, align 8
  %dest_reg175 = getelementptr inbounds %struct.induction, %struct.induction* %154, i32 0, i32 4
  %155 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg175, align 8
  %156 = bitcast %struct.rtx_def* %155 to i32*
  %bf.load176 = load i32, i32* %156, align 8
  %bf.lshr177 = lshr i32 %bf.load176, 27
  %bf.clear178 = and i32 %bf.lshr177, 1
  %tobool179 = icmp ne i32 %bf.clear178, 0
  br i1 %tobool179, label %if.then.180, label %if.end.182

if.then.180:                                      ; preds = %land.lhs.true.174
  %157 = load i32, i32* @copy_cost, align 4
  %158 = load i32, i32* %g1_add_benefit, align 4
  %sub181 = sub nsw i32 %158, %157
  store i32 %sub181, i32* %g1_add_benefit, align 4
  br label %if.end.182

if.end.182:                                       ; preds = %if.then.180, %land.lhs.true.174, %if.end.163
  store i32 0, i32* %l, align 4
  br label %for.cond.183

for.cond.183:                                     ; preds = %for.inc.203, %if.end.182
  %159 = load i32, i32* %l, align 4
  %160 = load i32, i32* %giv_count, align 4
  %cmp184 = icmp slt i32 %159, %160
  br i1 %cmp184, label %for.body.186, label %for.end.205

for.body.186:                                     ; preds = %for.cond.183
  %161 = load i32, i32* %l, align 4
  %idxprom187 = sext i32 %161 to i64
  %162 = load %struct.combine_givs_stats*, %struct.combine_givs_stats** %stats, align 8
  %arrayidx188 = getelementptr inbounds %struct.combine_givs_stats, %struct.combine_givs_stats* %162, i64 %idxprom187
  %giv_number189 = getelementptr inbounds %struct.combine_givs_stats, %struct.combine_givs_stats* %arrayidx188, i32 0, i32 0
  %163 = load i32, i32* %giv_number189, align 4
  store i32 %163, i32* %m, align 4
  %164 = load i32, i32* %m, align 4
  %165 = load i32, i32* %giv_count, align 4
  %mul190 = mul nsw i32 %164, %165
  %166 = load i32, i32* %j, align 4
  %add191 = add nsw i32 %mul190, %166
  %idxprom192 = sext i32 %add191 to i64
  %167 = load %struct.rtx_def**, %struct.rtx_def*** %can_combine, align 8
  %arrayidx193 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %167, i64 %idxprom192
  %168 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx193, align 8
  %tobool194 = icmp ne %struct.rtx_def* %168, null
  br i1 %tobool194, label %if.then.195, label %if.end.202

if.then.195:                                      ; preds = %for.body.186
  %169 = load %struct.induction*, %struct.induction** %g2, align 8
  %benefit196 = getelementptr inbounds %struct.induction, %struct.induction* %169, i32 0, i32 10
  %170 = load i32, i32* %benefit196, align 4
  %add197 = add nsw i32 %170, 3
  %171 = load i32, i32* %l, align 4
  %idxprom198 = sext i32 %171 to i64
  %172 = load %struct.combine_givs_stats*, %struct.combine_givs_stats** %stats, align 8
  %arrayidx199 = getelementptr inbounds %struct.combine_givs_stats, %struct.combine_givs_stats* %172, i64 %idxprom198
  %total_benefit200 = getelementptr inbounds %struct.combine_givs_stats, %struct.combine_givs_stats* %arrayidx199, i32 0, i32 1
  %173 = load i32, i32* %total_benefit200, align 4
  %sub201 = sub nsw i32 %173, %add197
  store i32 %sub201, i32* %total_benefit200, align 4
  br label %if.end.202

if.end.202:                                       ; preds = %if.then.195, %for.body.186
  br label %for.inc.203

for.inc.203:                                      ; preds = %if.end.202
  %174 = load i32, i32* %l, align 4
  %inc204 = add nsw i32 %174, 1
  store i32 %inc204, i32* %l, align 4
  br label %for.cond.183

for.end.205:                                      ; preds = %for.cond.183
  %175 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %tobool206 = icmp ne %struct._IO_FILE* %175, null
  br i1 %tobool206, label %if.then.207, label %if.end.219

if.then.207:                                      ; preds = %for.end.205
  %176 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %177 = load %struct.induction*, %struct.induction** %g2, align 8
  %insn208 = getelementptr inbounds %struct.induction, %struct.induction* %177, i32 0, i32 0
  %178 = load %struct.rtx_def*, %struct.rtx_def** %insn208, align 8
  %fld209 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %178, i32 0, i32 1
  %arrayidx210 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld209, i32 0, i64 0
  %rtint211 = bitcast %union.rtunion_def* %arrayidx210 to i32*
  %179 = load i32, i32* %rtint211, align 4
  %180 = load %struct.induction*, %struct.induction** %g1, align 8
  %insn212 = getelementptr inbounds %struct.induction, %struct.induction* %180, i32 0, i32 0
  %181 = load %struct.rtx_def*, %struct.rtx_def** %insn212, align 8
  %fld213 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %181, i32 0, i32 1
  %arrayidx214 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld213, i32 0, i64 0
  %rtint215 = bitcast %union.rtunion_def* %arrayidx214 to i32*
  %182 = load i32, i32* %rtint215, align 4
  %183 = load %struct.induction*, %struct.induction** %g1, align 8
  %benefit216 = getelementptr inbounds %struct.induction, %struct.induction* %183, i32 0, i32 10
  %184 = load i32, i32* %benefit216, align 4
  %185 = load i32, i32* %g1_add_benefit, align 4
  %186 = load %struct.induction*, %struct.induction** %g1, align 8
  %lifetime217 = getelementptr inbounds %struct.induction, %struct.induction* %186, i32 0, i32 14
  %187 = load i32, i32* %lifetime217, align 4
  %call218 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %176, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.66, i32 0, i32 0), i32 %179, i32 %182, i32 %184, i32 %185, i32 %187)
  br label %if.end.219

if.end.219:                                       ; preds = %if.then.207, %for.end.205
  br label %if.end.220

if.end.220:                                       ; preds = %if.end.219, %land.lhs.true.142, %land.lhs.true.139, %land.lhs.true.133, %for.body.128
  br label %for.inc.221

for.inc.221:                                      ; preds = %if.end.220
  %188 = load i32, i32* %j, align 4
  %inc222 = add nsw i32 %188, 1
  store i32 %inc222, i32* %j, align 4
  br label %for.cond.125

for.end.223:                                      ; preds = %for.cond.125
  %189 = load %struct.induction*, %struct.induction** %g1, align 8
  %combined_with224 = getelementptr inbounds %struct.induction, %struct.induction* %189, i32 0, i32 12
  %190 = load i32, i32* %combined_with224, align 4
  %tobool225 = icmp ne i32 %190, 0
  br i1 %tobool225, label %if.then.226, label %if.end.253

if.then.226:                                      ; preds = %for.end.223
  store i32 0, i32* %j, align 4
  br label %for.cond.227

for.cond.227:                                     ; preds = %for.inc.248, %if.then.226
  %191 = load i32, i32* %j, align 4
  %192 = load i32, i32* %giv_count, align 4
  %cmp228 = icmp slt i32 %191, %192
  br i1 %cmp228, label %for.body.230, label %for.end.250

for.body.230:                                     ; preds = %for.cond.227
  %193 = load i32, i32* %j, align 4
  %idxprom232 = sext i32 %193 to i64
  %194 = load %struct.combine_givs_stats*, %struct.combine_givs_stats** %stats, align 8
  %arrayidx233 = getelementptr inbounds %struct.combine_givs_stats, %struct.combine_givs_stats* %194, i64 %idxprom232
  %giv_number234 = getelementptr inbounds %struct.combine_givs_stats, %struct.combine_givs_stats* %arrayidx233, i32 0, i32 0
  %195 = load i32, i32* %giv_number234, align 4
  store i32 %195, i32* %m231, align 4
  %196 = load i32, i32* %m231, align 4
  %197 = load i32, i32* %giv_count, align 4
  %mul235 = mul nsw i32 %196, %197
  %198 = load i32, i32* %i, align 4
  %add236 = add nsw i32 %mul235, %198
  %idxprom237 = sext i32 %add236 to i64
  %199 = load %struct.rtx_def**, %struct.rtx_def*** %can_combine, align 8
  %arrayidx238 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %199, i64 %idxprom237
  %200 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx238, align 8
  %tobool239 = icmp ne %struct.rtx_def* %200, null
  br i1 %tobool239, label %if.then.240, label %if.end.247

if.then.240:                                      ; preds = %for.body.230
  %201 = load %struct.induction*, %struct.induction** %g1, align 8
  %benefit241 = getelementptr inbounds %struct.induction, %struct.induction* %201, i32 0, i32 10
  %202 = load i32, i32* %benefit241, align 4
  %add242 = add nsw i32 %202, 3
  %203 = load i32, i32* %j, align 4
  %idxprom243 = sext i32 %203 to i64
  %204 = load %struct.combine_givs_stats*, %struct.combine_givs_stats** %stats, align 8
  %arrayidx244 = getelementptr inbounds %struct.combine_givs_stats, %struct.combine_givs_stats* %204, i64 %idxprom243
  %total_benefit245 = getelementptr inbounds %struct.combine_givs_stats, %struct.combine_givs_stats* %arrayidx244, i32 0, i32 1
  %205 = load i32, i32* %total_benefit245, align 4
  %sub246 = sub nsw i32 %205, %add242
  store i32 %sub246, i32* %total_benefit245, align 4
  br label %if.end.247

if.end.247:                                       ; preds = %if.then.240, %for.body.230
  br label %for.inc.248

for.inc.248:                                      ; preds = %if.end.247
  %206 = load i32, i32* %j, align 4
  %inc249 = add nsw i32 %206, 1
  store i32 %inc249, i32* %j, align 4
  br label %for.cond.227

for.end.250:                                      ; preds = %for.cond.227
  %207 = load i32, i32* %g1_add_benefit, align 4
  %208 = load %struct.induction*, %struct.induction** %g1, align 8
  %benefit251 = getelementptr inbounds %struct.induction, %struct.induction* %208, i32 0, i32 10
  %209 = load i32, i32* %benefit251, align 4
  %add252 = add nsw i32 %209, %207
  store i32 %add252, i32* %benefit251, align 4
  br label %restart

if.end.253:                                       ; preds = %for.end.223
  br label %for.inc.254

for.inc.254:                                      ; preds = %if.end.253, %if.then.123
  %210 = load i32, i32* %k, align 4
  %inc255 = add nsw i32 %210, 1
  store i32 %inc255, i32* %k, align 4
  br label %for.cond.110

for.end.256:                                      ; preds = %for.cond.110
  %211 = load %struct.combine_givs_stats*, %struct.combine_givs_stats** %stats, align 8
  %212 = bitcast %struct.combine_givs_stats* %211 to i8*
  call void @free(i8* %212) #4
  %213 = load %struct.rtx_def**, %struct.rtx_def*** %can_combine, align 8
  %214 = bitcast %struct.rtx_def** %213 to i8*
  call void @free(i8* %214) #4
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @loop_giv_reduce_benefit(%struct.loop* %loop, %struct.iv_class* %bl, %struct.induction* %v, %struct.rtx_def* %test_reg) #0 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %bl.addr = alloca %struct.iv_class*, align 8
  %v.addr = alloca %struct.induction*, align 8
  %test_reg.addr = alloca %struct.rtx_def*, align 8
  %add_cost = alloca i32, align 4
  %benefit = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  store %struct.iv_class* %bl, %struct.iv_class** %bl.addr, align 8
  store %struct.induction* %v, %struct.induction** %v.addr, align 8
  store %struct.rtx_def* %test_reg, %struct.rtx_def** %test_reg.addr, align 8
  %0 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %benefit1 = getelementptr inbounds %struct.induction, %struct.induction* %0, i32 0, i32 10
  %1 = load i32, i32* %benefit1, align 4
  store i32 %1, i32* %benefit, align 4
  %2 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %mode = getelementptr inbounds %struct.induction, %struct.induction* %2, i32 0, i32 6
  %3 = load i32, i32* %mode, align 4
  %4 = load %struct.rtx_def*, %struct.rtx_def** %test_reg.addr, align 8
  %5 = bitcast %struct.rtx_def* %4 to i32*
  %bf.load = load i32, i32* %5, align 8
  %bf.value = and i32 %3, 255
  %bf.shl = shl i32 %bf.value, 16
  %bf.clear = and i32 %bf.load, -16711681
  %bf.set = or i32 %bf.clear, %bf.shl
  store i32 %bf.set, i32* %5, align 8
  %6 = load %struct.iv_class*, %struct.iv_class** %bl.addr, align 8
  %biv = getelementptr inbounds %struct.iv_class, %struct.iv_class* %6, i32 0, i32 2
  %7 = load %struct.induction*, %struct.induction** %biv, align 8
  %add_val = getelementptr inbounds %struct.induction, %struct.induction* %7, i32 0, i32 9
  %8 = load %struct.rtx_def*, %struct.rtx_def** %add_val, align 8
  %9 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %mult_val = getelementptr inbounds %struct.induction, %struct.induction* %9, i32 0, i32 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %mult_val, align 8
  %11 = load %struct.rtx_def*, %struct.rtx_def** %test_reg.addr, align 8
  %12 = load %struct.rtx_def*, %struct.rtx_def** %test_reg.addr, align 8
  %call = call i32 @iv_add_mult_cost(%struct.rtx_def* %8, %struct.rtx_def* %10, %struct.rtx_def* %11, %struct.rtx_def* %12)
  store i32 %call, i32* %add_cost, align 4
  %13 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %replaceable = getelementptr inbounds %struct.induction, %struct.induction* %13, i32 0, i32 13
  %bf.load2 = load i16, i16* %replaceable, align 4
  %bf.clear3 = and i16 %bf.load2, 1
  %bf.cast = zext i16 %bf.clear3 to i32
  %tobool = icmp ne i32 %bf.cast, 0
  br i1 %tobool, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %14 = load %struct.iv_class*, %struct.iv_class** %bl.addr, align 8
  %eliminable = getelementptr inbounds %struct.iv_class, %struct.iv_class* %14, i32 0, i32 12
  %bf.load4 = load i8, i8* %eliminable, align 8
  %bf.lshr = lshr i8 %bf.load4, 1
  %bf.clear5 = and i8 %bf.lshr, 1
  %bf.cast6 = zext i8 %bf.clear5 to i32
  %tobool7 = icmp ne i32 %bf.cast6, 0
  br i1 %tobool7, label %if.end, label %land.lhs.true.8

land.lhs.true.8:                                  ; preds = %land.lhs.true
  %15 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %dest_reg = getelementptr inbounds %struct.induction, %struct.induction* %15, i32 0, i32 4
  %16 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg, align 8
  %17 = bitcast %struct.rtx_def* %16 to i32*
  %bf.load9 = load i32, i32* %17, align 8
  %bf.lshr10 = lshr i32 %bf.load9, 27
  %bf.clear11 = and i32 %bf.lshr10, 1
  %tobool12 = icmp ne i32 %bf.clear11, 0
  br i1 %tobool12, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true.8
  %18 = load i32, i32* @copy_cost, align 4
  %19 = load i32, i32* %benefit, align 4
  %sub = sub nsw i32 %19, %18
  store i32 %sub, i32* %benefit, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true.8, %land.lhs.true, %entry
  %20 = load i32, i32* %add_cost, align 4
  %21 = load %struct.iv_class*, %struct.iv_class** %bl.addr, align 8
  %biv_count = getelementptr inbounds %struct.iv_class, %struct.iv_class* %21, i32 0, i32 1
  %22 = load i32, i32* %biv_count, align 4
  %mul = mul nsw i32 %20, %22
  %23 = load i32, i32* %benefit, align 4
  %sub13 = sub nsw i32 %23, %mul
  store i32 %sub13, i32* %benefit, align 4
  %24 = load i32, i32* %benefit, align 4
  ret i32 %24
}

; Function Attrs: nounwind uwtable
define internal i32 @product_cheap_p(%struct.rtx_def* %a, %struct.rtx_def* %b) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca %struct.rtx_def*, align 8
  %b.addr = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  %tmp = alloca %struct.rtx_def*, align 8
  %win = alloca i32, align 4
  %insn = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %a, %struct.rtx_def** %a.addr, align 8
  store %struct.rtx_def* %b, %struct.rtx_def** %b.addr, align 8
  store i32 1, i32* %win, align 4
  %0 = load %struct.rtx_def*, %struct.rtx_def** %a.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 54
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %a.addr, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %tmp, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %b.addr, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %a.addr, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %b.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.rtx_def*, %struct.rtx_def** %a.addr, align 8
  %6 = bitcast %struct.rtx_def* %5 to i32*
  %bf.load2 = load i32, i32* %6, align 8
  %bf.clear3 = and i32 %bf.load2, 65535
  %cmp4 = icmp eq i32 %bf.clear3, 54
  br i1 %cmp4, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %if.end
  store i32 1, i32* %retval
  br label %return

if.end.6:                                         ; preds = %if.end
  %7 = load %struct.rtx_def*, %struct.rtx_def** %b.addr, align 8
  %8 = bitcast %struct.rtx_def* %7 to i32*
  %bf.load7 = load i32, i32* %8, align 8
  %bf.clear8 = and i32 %bf.load7, 65535
  %cmp9 = icmp ne i32 %bf.clear8, 54
  br i1 %cmp9, label %if.then.10, label %if.end.11

if.then.10:                                       ; preds = %if.end.6
  store i32 0, i32* %retval
  br label %return

if.end.11:                                        ; preds = %if.end.6
  call void @start_sequence()
  %9 = load %struct.rtx_def*, %struct.rtx_def** %a.addr, align 8
  %10 = bitcast %struct.rtx_def* %9 to i32*
  %bf.load12 = load i32, i32* %10, align 8
  %bf.lshr = lshr i32 %bf.load12, 16
  %bf.clear13 = and i32 %bf.lshr, 255
  %11 = load %struct.rtx_def*, %struct.rtx_def** %a.addr, align 8
  %12 = load %struct.rtx_def*, %struct.rtx_def** %b.addr, align 8
  %call = call %struct.rtx_def* @expand_mult(i32 %bf.clear13, %struct.rtx_def* %11, %struct.rtx_def* %12, %struct.rtx_def* null, i32 1)
  %call14 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call14, %struct.rtx_def** %tmp, align 8
  call void @end_sequence()
  %13 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %14 = bitcast %struct.rtx_def* %13 to i32*
  %bf.load15 = load i32, i32* %14, align 8
  %bf.clear16 = and i32 %bf.load15, 65535
  %cmp17 = icmp eq i32 %bf.clear16, 24
  br i1 %cmp17, label %if.then.18, label %if.else.92

if.then.18:                                       ; preds = %if.end.11
  %15 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtvec = bitcast %union.rtunion_def* %arrayidx to %struct.rtvec_def**
  %16 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec, align 8
  %cmp19 = icmp eq %struct.rtvec_def* %16, null
  br i1 %cmp19, label %if.then.20, label %if.else

if.then.20:                                       ; preds = %if.then.18
  store i32 1, i32* %win, align 4
  br label %if.end.91

if.else:                                          ; preds = %if.then.18
  %17 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %fld21 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1
  %arrayidx22 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld21, i32 0, i64 0
  %rtvec23 = bitcast %union.rtunion_def* %arrayidx22 to %struct.rtvec_def**
  %18 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec23, align 8
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %18, i32 0, i32 0
  %19 = load i32, i32* %num_elem, align 4
  %cmp24 = icmp sgt i32 %19, 3
  br i1 %cmp24, label %if.then.25, label %if.else.26

if.then.25:                                       ; preds = %if.else
  store i32 0, i32* %win, align 4
  br label %if.end.90

if.else.26:                                       ; preds = %if.else
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else.26
  %20 = load i32, i32* %i, align 4
  %21 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %fld27 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1
  %arrayidx28 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld27, i32 0, i64 0
  %rtvec29 = bitcast %union.rtunion_def* %arrayidx28 to %struct.rtvec_def**
  %22 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec29, align 8
  %num_elem30 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %22, i32 0, i32 0
  %23 = load i32, i32* %num_elem30, align 4
  %cmp31 = icmp slt i32 %20, %23
  br i1 %cmp31, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %24 = load i32, i32* %i, align 4
  %idxprom = sext i32 %24 to i64
  %25 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %fld33 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1
  %arrayidx34 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld33, i32 0, i64 0
  %rtvec35 = bitcast %union.rtunion_def* %arrayidx34 to %struct.rtvec_def**
  %26 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec35, align 8
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %26, i32 0, i32 1
  %arrayidx36 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i32 0, i64 %idxprom
  %27 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx36, align 8
  store %struct.rtx_def* %27, %struct.rtx_def** %insn, align 8
  %28 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %29 = bitcast %struct.rtx_def* %28 to i32*
  %bf.load37 = load i32, i32* %29, align 8
  %bf.clear38 = and i32 %bf.load37, 65535
  %cmp39 = icmp ne i32 %bf.clear38, 32
  br i1 %cmp39, label %if.then.88, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body
  %30 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld40 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %30, i32 0, i32 1
  %arrayidx41 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld40, i32 0, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx41 to %struct.rtx_def**
  %31 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %32 = bitcast %struct.rtx_def* %31 to i32*
  %bf.load42 = load i32, i32* %32, align 8
  %bf.clear43 = and i32 %bf.load42, 65535
  %cmp44 = icmp eq i32 %bf.clear43, 47
  br i1 %cmp44, label %land.lhs.true, label %lor.lhs.false.54

land.lhs.true:                                    ; preds = %lor.lhs.false
  %33 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld45 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1
  %arrayidx46 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld45, i32 0, i64 3
  %rtx47 = bitcast %union.rtunion_def* %arrayidx46 to %struct.rtx_def**
  %34 = load %struct.rtx_def*, %struct.rtx_def** %rtx47, align 8
  %fld48 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %34, i32 0, i32 1
  %arrayidx49 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld48, i32 0, i64 1
  %rtx50 = bitcast %union.rtunion_def* %arrayidx49 to %struct.rtx_def**
  %35 = load %struct.rtx_def*, %struct.rtx_def** %rtx50, align 8
  %36 = bitcast %struct.rtx_def* %35 to i32*
  %bf.load51 = load i32, i32* %36, align 8
  %bf.clear52 = and i32 %bf.load51, 65535
  %cmp53 = icmp eq i32 %bf.clear52, 78
  br i1 %cmp53, label %if.then.88, label %lor.lhs.false.54

lor.lhs.false.54:                                 ; preds = %land.lhs.true, %lor.lhs.false
  %37 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld55 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %37, i32 0, i32 1
  %arrayidx56 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld55, i32 0, i64 3
  %rtx57 = bitcast %union.rtunion_def* %arrayidx56 to %struct.rtx_def**
  %38 = load %struct.rtx_def*, %struct.rtx_def** %rtx57, align 8
  %39 = bitcast %struct.rtx_def* %38 to i32*
  %bf.load58 = load i32, i32* %39, align 8
  %bf.clear59 = and i32 %bf.load58, 65535
  %cmp60 = icmp eq i32 %bf.clear59, 39
  br i1 %cmp60, label %land.lhs.true.61, label %if.end.89

land.lhs.true.61:                                 ; preds = %lor.lhs.false.54
  %40 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld62 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %40, i32 0, i32 1
  %arrayidx63 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld62, i32 0, i64 3
  %rtx64 = bitcast %union.rtunion_def* %arrayidx63 to %struct.rtx_def**
  %41 = load %struct.rtx_def*, %struct.rtx_def** %rtx64, align 8
  %fld65 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %41, i32 0, i32 1
  %arrayidx66 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld65, i32 0, i64 0
  %rtvec67 = bitcast %union.rtunion_def* %arrayidx66 to %struct.rtvec_def**
  %42 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec67, align 8
  %elem68 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %42, i32 0, i32 1
  %arrayidx69 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem68, i32 0, i64 0
  %43 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx69, align 8
  %44 = bitcast %struct.rtx_def* %43 to i32*
  %bf.load70 = load i32, i32* %44, align 8
  %bf.clear71 = and i32 %bf.load70, 65535
  %cmp72 = icmp eq i32 %bf.clear71, 47
  br i1 %cmp72, label %land.lhs.true.73, label %if.end.89

land.lhs.true.73:                                 ; preds = %land.lhs.true.61
  %45 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld74 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %45, i32 0, i32 1
  %arrayidx75 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld74, i32 0, i64 3
  %rtx76 = bitcast %union.rtunion_def* %arrayidx75 to %struct.rtx_def**
  %46 = load %struct.rtx_def*, %struct.rtx_def** %rtx76, align 8
  %fld77 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %46, i32 0, i32 1
  %arrayidx78 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld77, i32 0, i64 0
  %rtvec79 = bitcast %union.rtunion_def* %arrayidx78 to %struct.rtvec_def**
  %47 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec79, align 8
  %elem80 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %47, i32 0, i32 1
  %arrayidx81 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem80, i32 0, i64 0
  %48 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx81, align 8
  %fld82 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %48, i32 0, i32 1
  %arrayidx83 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld82, i32 0, i64 1
  %rtx84 = bitcast %union.rtunion_def* %arrayidx83 to %struct.rtx_def**
  %49 = load %struct.rtx_def*, %struct.rtx_def** %rtx84, align 8
  %50 = bitcast %struct.rtx_def* %49 to i32*
  %bf.load85 = load i32, i32* %50, align 8
  %bf.clear86 = and i32 %bf.load85, 65535
  %cmp87 = icmp eq i32 %bf.clear86, 78
  br i1 %cmp87, label %if.then.88, label %if.end.89

if.then.88:                                       ; preds = %land.lhs.true.73, %land.lhs.true, %for.body
  store i32 0, i32* %win, align 4
  br label %for.end

if.end.89:                                        ; preds = %land.lhs.true.73, %land.lhs.true.61, %lor.lhs.false.54
  br label %for.inc

for.inc:                                          ; preds = %if.end.89
  %51 = load i32, i32* %i, align 4
  %inc = add nsw i32 %51, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then.88, %for.cond
  br label %if.end.90

if.end.90:                                        ; preds = %for.end, %if.then.25
  br label %if.end.91

if.end.91:                                        ; preds = %if.end.90, %if.then.20
  br label %if.end.132

if.else.92:                                       ; preds = %if.end.11
  %52 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %53 = bitcast %struct.rtx_def* %52 to i32*
  %bf.load93 = load i32, i32* %53, align 8
  %bf.clear94 = and i32 %bf.load93, 65535
  %cmp95 = icmp eq i32 %bf.clear94, 47
  br i1 %cmp95, label %land.lhs.true.96, label %if.else.104

land.lhs.true.96:                                 ; preds = %if.else.92
  %54 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %fld97 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %54, i32 0, i32 1
  %arrayidx98 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld97, i32 0, i64 1
  %rtx99 = bitcast %union.rtunion_def* %arrayidx98 to %struct.rtx_def**
  %55 = load %struct.rtx_def*, %struct.rtx_def** %rtx99, align 8
  %56 = bitcast %struct.rtx_def* %55 to i32*
  %bf.load100 = load i32, i32* %56, align 8
  %bf.clear101 = and i32 %bf.load100, 65535
  %cmp102 = icmp eq i32 %bf.clear101, 78
  br i1 %cmp102, label %if.then.103, label %if.else.104

if.then.103:                                      ; preds = %land.lhs.true.96
  store i32 0, i32* %win, align 4
  br label %if.end.131

if.else.104:                                      ; preds = %land.lhs.true.96, %if.else.92
  %57 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %58 = bitcast %struct.rtx_def* %57 to i32*
  %bf.load105 = load i32, i32* %58, align 8
  %bf.clear106 = and i32 %bf.load105, 65535
  %cmp107 = icmp eq i32 %bf.clear106, 39
  br i1 %cmp107, label %land.lhs.true.108, label %if.end.130

land.lhs.true.108:                                ; preds = %if.else.104
  %59 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %fld109 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %59, i32 0, i32 1
  %arrayidx110 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld109, i32 0, i64 0
  %rtvec111 = bitcast %union.rtunion_def* %arrayidx110 to %struct.rtvec_def**
  %60 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec111, align 8
  %elem112 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %60, i32 0, i32 1
  %arrayidx113 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem112, i32 0, i64 0
  %61 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx113, align 8
  %62 = bitcast %struct.rtx_def* %61 to i32*
  %bf.load114 = load i32, i32* %62, align 8
  %bf.clear115 = and i32 %bf.load114, 65535
  %cmp116 = icmp eq i32 %bf.clear115, 47
  br i1 %cmp116, label %land.lhs.true.117, label %if.end.130

land.lhs.true.117:                                ; preds = %land.lhs.true.108
  %63 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %fld118 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %63, i32 0, i32 1
  %arrayidx119 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld118, i32 0, i64 0
  %rtvec120 = bitcast %union.rtunion_def* %arrayidx119 to %struct.rtvec_def**
  %64 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec120, align 8
  %elem121 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %64, i32 0, i32 1
  %arrayidx122 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem121, i32 0, i64 0
  %65 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx122, align 8
  %fld123 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %65, i32 0, i32 1
  %arrayidx124 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld123, i32 0, i64 1
  %rtx125 = bitcast %union.rtunion_def* %arrayidx124 to %struct.rtx_def**
  %66 = load %struct.rtx_def*, %struct.rtx_def** %rtx125, align 8
  %67 = bitcast %struct.rtx_def* %66 to i32*
  %bf.load126 = load i32, i32* %67, align 8
  %bf.clear127 = and i32 %bf.load126, 65535
  %cmp128 = icmp eq i32 %bf.clear127, 78
  br i1 %cmp128, label %if.then.129, label %if.end.130

if.then.129:                                      ; preds = %land.lhs.true.117
  store i32 0, i32* %win, align 4
  br label %if.end.130

if.end.130:                                       ; preds = %if.then.129, %land.lhs.true.117, %land.lhs.true.108, %if.else.104
  br label %if.end.131

if.end.131:                                       ; preds = %if.end.130, %if.then.103
  br label %if.end.132

if.end.132:                                       ; preds = %if.end.131, %if.end.91
  %68 = load i32, i32* %win, align 4
  store i32 %68, i32* %retval
  br label %return

return:                                           ; preds = %if.end.132, %if.then.10, %if.then.5
  %69 = load i32, i32* %retval
  ret i32 %69
}

; Function Attrs: nounwind uwtable
define internal void @loop_givs_dead_check(%struct.loop* %loop, %struct.iv_class* %bl) #0 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %bl.addr = alloca %struct.iv_class*, align 8
  %v = alloca %struct.induction*, align 8
  %v1 = alloca %struct.induction*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  store %struct.iv_class* %bl, %struct.iv_class** %bl.addr, align 8
  %0 = load %struct.iv_class*, %struct.iv_class** %bl.addr, align 8
  %giv = getelementptr inbounds %struct.iv_class, %struct.iv_class* %0, i32 0, i32 4
  %1 = load %struct.induction*, %struct.induction** %giv, align 8
  store %struct.induction* %1, %struct.induction** %v, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc.38, %entry
  %2 = load %struct.induction*, %struct.induction** %v, align 8
  %tobool = icmp ne %struct.induction* %2, null
  br i1 %tobool, label %for.body, label %for.end.40

for.body:                                         ; preds = %for.cond
  %3 = load %struct.induction*, %struct.induction** %v, align 8
  %ignore = getelementptr inbounds %struct.induction, %struct.induction* %3, i32 0, i32 13
  %bf.load = load i16, i16* %ignore, align 4
  %bf.lshr = lshr i16 %bf.load, 2
  %bf.clear = and i16 %bf.lshr, 1
  %bf.cast = zext i16 %bf.clear to i32
  %tobool1 = icmp ne i32 %bf.cast, 0
  br i1 %tobool1, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body
  %4 = load %struct.induction*, %struct.induction** %v, align 8
  %same = getelementptr inbounds %struct.induction, %struct.induction* %4, i32 0, i32 18
  %5 = load %struct.induction*, %struct.induction** %same, align 8
  %tobool2 = icmp ne %struct.induction* %5, null
  br i1 %tobool2, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.lhs.false
  %6 = load %struct.induction*, %struct.induction** %v, align 8
  %same3 = getelementptr inbounds %struct.induction, %struct.induction* %6, i32 0, i32 18
  %7 = load %struct.induction*, %struct.induction** %same3, align 8
  %ignore4 = getelementptr inbounds %struct.induction, %struct.induction* %7, i32 0, i32 13
  %bf.load5 = load i16, i16* %ignore4, align 4
  %bf.lshr6 = lshr i16 %bf.load5, 2
  %bf.clear7 = and i16 %bf.lshr6, 1
  %bf.cast8 = zext i16 %bf.clear7 to i32
  %tobool9 = icmp ne i32 %bf.cast8, 0
  br i1 %tobool9, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true, %for.body
  br label %for.inc.38

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false
  %8 = load %struct.induction*, %struct.induction** %v, align 8
  %giv_type = getelementptr inbounds %struct.induction, %struct.induction* %8, i32 0, i32 3
  %9 = load i32, i32* %giv_type, align 4
  %cmp = icmp eq i32 %9, 1
  br i1 %cmp, label %land.lhs.true.10, label %if.end.37

land.lhs.true.10:                                 ; preds = %if.end
  %10 = load %struct.induction*, %struct.induction** %v, align 8
  %dest_reg = getelementptr inbounds %struct.induction, %struct.induction* %10, i32 0, i32 4
  %11 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx to i32*
  %12 = load i32, i32* %rtuint, align 4
  %idxprom = zext i32 %12 to i64
  %13 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %data = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %13, i32 0, i32 4
  %reg = bitcast %union.varray_data_tag* %data to [1 x %struct.reg_info_def*]*
  %arrayidx11 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %reg, i32 0, i64 %idxprom
  %14 = load %struct.reg_info_def*, %struct.reg_info_def** %arrayidx11, align 8
  %first_uid = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %14, i32 0, i32 0
  %15 = load i32, i32* %first_uid, align 4
  %16 = load %struct.induction*, %struct.induction** %v, align 8
  %insn = getelementptr inbounds %struct.induction, %struct.induction* %16, i32 0, i32 0
  %17 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld12 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1
  %arrayidx13 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld12, i32 0, i64 0
  %rtint = bitcast %union.rtunion_def* %arrayidx13 to i32*
  %18 = load i32, i32* %rtint, align 4
  %cmp14 = icmp eq i32 %15, %18
  br i1 %cmp14, label %if.then.15, label %if.end.37

if.then.15:                                       ; preds = %land.lhs.true.10
  %19 = load %struct.iv_class*, %struct.iv_class** %bl.addr, align 8
  %giv16 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %19, i32 0, i32 4
  %20 = load %struct.induction*, %struct.induction** %giv16, align 8
  store %struct.induction* %20, %struct.induction** %v1, align 8
  br label %for.cond.17

for.cond.17:                                      ; preds = %for.inc, %if.then.15
  %21 = load %struct.induction*, %struct.induction** %v1, align 8
  %tobool18 = icmp ne %struct.induction* %21, null
  br i1 %tobool18, label %for.body.19, label %for.end

for.body.19:                                      ; preds = %for.cond.17
  %22 = load %struct.induction*, %struct.induction** %v, align 8
  %dest_reg20 = getelementptr inbounds %struct.induction, %struct.induction* %22, i32 0, i32 4
  %23 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg20, align 8
  %fld21 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1
  %arrayidx22 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld21, i32 0, i64 0
  %rtuint23 = bitcast %union.rtunion_def* %arrayidx22 to i32*
  %24 = load i32, i32* %rtuint23, align 4
  %idxprom24 = zext i32 %24 to i64
  %25 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %data25 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %25, i32 0, i32 4
  %reg26 = bitcast %union.varray_data_tag* %data25 to [1 x %struct.reg_info_def*]*
  %arrayidx27 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %reg26, i32 0, i64 %idxprom24
  %26 = load %struct.reg_info_def*, %struct.reg_info_def** %arrayidx27, align 8
  %last_uid = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %26, i32 0, i32 1
  %27 = load i32, i32* %last_uid, align 4
  %28 = load %struct.induction*, %struct.induction** %v1, align 8
  %insn28 = getelementptr inbounds %struct.induction, %struct.induction* %28, i32 0, i32 0
  %29 = load %struct.rtx_def*, %struct.rtx_def** %insn28, align 8
  %fld29 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %29, i32 0, i32 1
  %arrayidx30 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld29, i32 0, i64 0
  %rtint31 = bitcast %union.rtunion_def* %arrayidx30 to i32*
  %30 = load i32, i32* %rtint31, align 4
  %cmp32 = icmp eq i32 %27, %30
  br i1 %cmp32, label %if.then.33, label %if.end.36

if.then.33:                                       ; preds = %for.body.19
  %31 = load %struct.induction*, %struct.induction** %v, align 8
  %maybe_dead = getelementptr inbounds %struct.induction, %struct.induction* %31, i32 0, i32 13
  %bf.load34 = load i16, i16* %maybe_dead, align 4
  %bf.clear35 = and i16 %bf.load34, -129
  %bf.set = or i16 %bf.clear35, 128
  store i16 %bf.set, i16* %maybe_dead, align 4
  br label %if.end.36

if.end.36:                                        ; preds = %if.then.33, %for.body.19
  br label %for.inc

for.inc:                                          ; preds = %if.end.36
  %32 = load %struct.induction*, %struct.induction** %v1, align 8
  %next_iv = getelementptr inbounds %struct.induction, %struct.induction* %32, i32 0, i32 17
  %33 = load %struct.induction*, %struct.induction** %next_iv, align 8
  store %struct.induction* %33, %struct.induction** %v1, align 8
  br label %for.cond.17

for.end:                                          ; preds = %for.cond.17
  br label %if.end.37

if.end.37:                                        ; preds = %for.end, %land.lhs.true.10, %if.end
  br label %for.inc.38

for.inc.38:                                       ; preds = %if.end.37, %if.then
  %34 = load %struct.induction*, %struct.induction** %v, align 8
  %next_iv39 = getelementptr inbounds %struct.induction, %struct.induction* %34, i32 0, i32 17
  %35 = load %struct.induction*, %struct.induction** %next_iv39, align 8
  store %struct.induction* %35, %struct.induction** %v, align 8
  br label %for.cond

for.end.40:                                       ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @loop_givs_reduce(%struct.loop* %loop, %struct.iv_class* %bl) #0 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %bl.addr = alloca %struct.iv_class*, align 8
  %v = alloca %struct.induction*, align 8
  %tv = alloca %struct.induction*, align 8
  %auto_inc_opt = alloca i32, align 4
  %insert_before = alloca %struct.rtx_def*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  store %struct.iv_class* %bl, %struct.iv_class** %bl.addr, align 8
  %0 = load %struct.iv_class*, %struct.iv_class** %bl.addr, align 8
  %giv = getelementptr inbounds %struct.iv_class, %struct.iv_class* %0, i32 0, i32 4
  %1 = load %struct.induction*, %struct.induction** %giv, align 8
  store %struct.induction* %1, %struct.induction** %v, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc.33, %entry
  %2 = load %struct.induction*, %struct.induction** %v, align 8
  %tobool = icmp ne %struct.induction* %2, null
  br i1 %tobool, label %for.body, label %for.end.35

for.body:                                         ; preds = %for.cond
  %3 = load %struct.induction*, %struct.induction** %v, align 8
  %ignore = getelementptr inbounds %struct.induction, %struct.induction* %3, i32 0, i32 13
  %bf.load = load i16, i16* %ignore, align 4
  %bf.lshr = lshr i16 %bf.load, 2
  %bf.clear = and i16 %bf.lshr, 1
  %bf.cast = zext i16 %bf.clear to i32
  %tobool1 = icmp ne i32 %bf.cast, 0
  br i1 %tobool1, label %if.end.32, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.body
  %4 = load %struct.induction*, %struct.induction** %v, align 8
  %same = getelementptr inbounds %struct.induction, %struct.induction* %4, i32 0, i32 18
  %5 = load %struct.induction*, %struct.induction** %same, align 8
  %cmp = icmp eq %struct.induction* %5, null
  br i1 %cmp, label %if.then, label %if.end.32

if.then:                                          ; preds = %land.lhs.true
  store i32 0, i32* %auto_inc_opt, align 4
  %6 = load %struct.induction*, %struct.induction** %v, align 8
  %new_reg = getelementptr inbounds %struct.induction, %struct.induction* %6, i32 0, i32 1
  %7 = load %struct.rtx_def*, %struct.rtx_def** %new_reg, align 8
  %tobool2 = icmp ne %struct.rtx_def* %7, null
  br i1 %tobool2, label %if.end, label %if.then.3

if.then.3:                                        ; preds = %if.then
  %8 = load %struct.induction*, %struct.induction** %v, align 8
  %mode = getelementptr inbounds %struct.induction, %struct.induction* %8, i32 0, i32 6
  %9 = load i32, i32* %mode, align 4
  %call = call %struct.rtx_def* @gen_reg_rtx(i32 %9)
  %10 = load %struct.induction*, %struct.induction** %v, align 8
  %new_reg4 = getelementptr inbounds %struct.induction, %struct.induction* %10, i32 0, i32 1
  store %struct.rtx_def* %call, %struct.rtx_def** %new_reg4, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.3, %if.then
  %11 = load %struct.iv_class*, %struct.iv_class** %bl.addr, align 8
  %biv = getelementptr inbounds %struct.iv_class, %struct.iv_class* %11, i32 0, i32 2
  %12 = load %struct.induction*, %struct.induction** %biv, align 8
  store %struct.induction* %12, %struct.induction** %tv, align 8
  br label %for.cond.5

for.cond.5:                                       ; preds = %for.inc, %if.end
  %13 = load %struct.induction*, %struct.induction** %tv, align 8
  %tobool6 = icmp ne %struct.induction* %13, null
  br i1 %tobool6, label %for.body.7, label %for.end

for.body.7:                                       ; preds = %for.cond.5
  %14 = load i32, i32* %auto_inc_opt, align 4
  %tobool8 = icmp ne i32 %14, 0
  br i1 %tobool8, label %if.else, label %if.then.9

if.then.9:                                        ; preds = %for.body.7
  %15 = load %struct.induction*, %struct.induction** %tv, align 8
  %insn = getelementptr inbounds %struct.induction, %struct.induction* %15, i32 0, i32 0
  %16 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  store %struct.rtx_def* %16, %struct.rtx_def** %insert_before, align 8
  br label %if.end.16

if.else:                                          ; preds = %for.body.7
  %17 = load i32, i32* %auto_inc_opt, align 4
  %cmp10 = icmp eq i32 %17, 1
  br i1 %cmp10, label %if.then.11, label %if.else.13

if.then.11:                                       ; preds = %if.else
  %18 = load %struct.induction*, %struct.induction** %v, align 8
  %insn12 = getelementptr inbounds %struct.induction, %struct.induction* %18, i32 0, i32 0
  %19 = load %struct.rtx_def*, %struct.rtx_def** %insn12, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 2
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %20 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %20, %struct.rtx_def** %insert_before, align 8
  br label %if.end.15

if.else.13:                                       ; preds = %if.else
  %21 = load %struct.induction*, %struct.induction** %v, align 8
  %insn14 = getelementptr inbounds %struct.induction, %struct.induction* %21, i32 0, i32 0
  %22 = load %struct.rtx_def*, %struct.rtx_def** %insn14, align 8
  store %struct.rtx_def* %22, %struct.rtx_def** %insert_before, align 8
  br label %if.end.15

if.end.15:                                        ; preds = %if.else.13, %if.then.11
  br label %if.end.16

if.end.16:                                        ; preds = %if.end.15, %if.then.9
  %23 = load %struct.induction*, %struct.induction** %tv, align 8
  %mult_val = getelementptr inbounds %struct.induction, %struct.induction* %23, i32 0, i32 8
  %24 = load %struct.rtx_def*, %struct.rtx_def** %mult_val, align 8
  %25 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %cmp17 = icmp eq %struct.rtx_def* %24, %25
  br i1 %cmp17, label %if.then.18, label %if.else.22

if.then.18:                                       ; preds = %if.end.16
  %26 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %27 = load %struct.induction*, %struct.induction** %tv, align 8
  %add_val = getelementptr inbounds %struct.induction, %struct.induction* %27, i32 0, i32 9
  %28 = load %struct.rtx_def*, %struct.rtx_def** %add_val, align 8
  %29 = load %struct.induction*, %struct.induction** %v, align 8
  %mult_val19 = getelementptr inbounds %struct.induction, %struct.induction* %29, i32 0, i32 8
  %30 = load %struct.rtx_def*, %struct.rtx_def** %mult_val19, align 8
  %31 = load %struct.induction*, %struct.induction** %v, align 8
  %new_reg20 = getelementptr inbounds %struct.induction, %struct.induction* %31, i32 0, i32 1
  %32 = load %struct.rtx_def*, %struct.rtx_def** %new_reg20, align 8
  %33 = load %struct.induction*, %struct.induction** %v, align 8
  %new_reg21 = getelementptr inbounds %struct.induction, %struct.induction* %33, i32 0, i32 1
  %34 = load %struct.rtx_def*, %struct.rtx_def** %new_reg21, align 8
  %35 = load %struct.rtx_def*, %struct.rtx_def** %insert_before, align 8
  call void @loop_iv_add_mult_emit_before(%struct.loop* %26, %struct.rtx_def* %28, %struct.rtx_def* %30, %struct.rtx_def* %32, %struct.rtx_def* %34, %struct.basic_block_def* null, %struct.rtx_def* %35)
  br label %if.end.27

if.else.22:                                       ; preds = %if.end.16
  %36 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %37 = load %struct.induction*, %struct.induction** %tv, align 8
  %add_val23 = getelementptr inbounds %struct.induction, %struct.induction* %37, i32 0, i32 9
  %38 = load %struct.rtx_def*, %struct.rtx_def** %add_val23, align 8
  %39 = load %struct.induction*, %struct.induction** %v, align 8
  %mult_val24 = getelementptr inbounds %struct.induction, %struct.induction* %39, i32 0, i32 8
  %40 = load %struct.rtx_def*, %struct.rtx_def** %mult_val24, align 8
  %41 = load %struct.induction*, %struct.induction** %v, align 8
  %add_val25 = getelementptr inbounds %struct.induction, %struct.induction* %41, i32 0, i32 9
  %42 = load %struct.rtx_def*, %struct.rtx_def** %add_val25, align 8
  %43 = load %struct.induction*, %struct.induction** %v, align 8
  %new_reg26 = getelementptr inbounds %struct.induction, %struct.induction* %43, i32 0, i32 1
  %44 = load %struct.rtx_def*, %struct.rtx_def** %new_reg26, align 8
  %45 = load %struct.rtx_def*, %struct.rtx_def** %insert_before, align 8
  call void @loop_iv_add_mult_emit_before(%struct.loop* %36, %struct.rtx_def* %38, %struct.rtx_def* %40, %struct.rtx_def* %42, %struct.rtx_def* %44, %struct.basic_block_def* null, %struct.rtx_def* %45)
  br label %if.end.27

if.end.27:                                        ; preds = %if.else.22, %if.then.18
  br label %for.inc

for.inc:                                          ; preds = %if.end.27
  %46 = load %struct.induction*, %struct.induction** %tv, align 8
  %next_iv = getelementptr inbounds %struct.induction, %struct.induction* %46, i32 0, i32 17
  %47 = load %struct.induction*, %struct.induction** %next_iv, align 8
  store %struct.induction* %47, %struct.induction** %tv, align 8
  br label %for.cond.5

for.end:                                          ; preds = %for.cond.5
  %48 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %49 = load %struct.induction*, %struct.induction** %v, align 8
  %50 = load %struct.iv_class*, %struct.iv_class** %bl.addr, align 8
  %initial_value = getelementptr inbounds %struct.iv_class, %struct.iv_class* %50, i32 0, i32 6
  %51 = load %struct.rtx_def*, %struct.rtx_def** %initial_value, align 8
  %call28 = call %struct.rtx_def* @extend_value_for_giv(%struct.induction* %49, %struct.rtx_def* %51)
  %52 = load %struct.induction*, %struct.induction** %v, align 8
  %mult_val29 = getelementptr inbounds %struct.induction, %struct.induction* %52, i32 0, i32 8
  %53 = load %struct.rtx_def*, %struct.rtx_def** %mult_val29, align 8
  %54 = load %struct.induction*, %struct.induction** %v, align 8
  %add_val30 = getelementptr inbounds %struct.induction, %struct.induction* %54, i32 0, i32 9
  %55 = load %struct.rtx_def*, %struct.rtx_def** %add_val30, align 8
  %56 = load %struct.induction*, %struct.induction** %v, align 8
  %new_reg31 = getelementptr inbounds %struct.induction, %struct.induction* %56, i32 0, i32 1
  %57 = load %struct.rtx_def*, %struct.rtx_def** %new_reg31, align 8
  call void @loop_iv_add_mult_hoist(%struct.loop* %48, %struct.rtx_def* %call28, %struct.rtx_def* %53, %struct.rtx_def* %55, %struct.rtx_def* %57)
  br label %if.end.32

if.end.32:                                        ; preds = %for.end, %land.lhs.true, %for.body
  br label %for.inc.33

for.inc.33:                                       ; preds = %if.end.32
  %58 = load %struct.induction*, %struct.induction** %v, align 8
  %next_iv34 = getelementptr inbounds %struct.induction, %struct.induction* %58, i32 0, i32 17
  %59 = load %struct.induction*, %struct.induction** %next_iv34, align 8
  store %struct.induction* %59, %struct.induction** %v, align 8
  br label %for.cond

for.end.35:                                       ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @loop_givs_rescan(%struct.loop* %loop, %struct.iv_class* %bl, %struct.rtx_def** %reg_map) #0 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %bl.addr = alloca %struct.iv_class*, align 8
  %reg_map.addr = alloca %struct.rtx_def**, align 8
  %v = alloca %struct.induction*, align 8
  %align = alloca i32, align 4
  %align90 = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  store %struct.iv_class* %bl, %struct.iv_class** %bl.addr, align 8
  store %struct.rtx_def** %reg_map, %struct.rtx_def*** %reg_map.addr, align 8
  %0 = load %struct.iv_class*, %struct.iv_class** %bl.addr, align 8
  %giv = getelementptr inbounds %struct.iv_class, %struct.iv_class* %0, i32 0, i32 4
  %1 = load %struct.induction*, %struct.induction** %giv, align 8
  store %struct.induction* %1, %struct.induction** %v, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.induction*, %struct.induction** %v, align 8
  %tobool = icmp ne %struct.induction* %2, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.induction*, %struct.induction** %v, align 8
  %same = getelementptr inbounds %struct.induction, %struct.induction* %3, i32 0, i32 18
  %4 = load %struct.induction*, %struct.induction** %same, align 8
  %tobool1 = icmp ne %struct.induction* %4, null
  br i1 %tobool1, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %5 = load %struct.induction*, %struct.induction** %v, align 8
  %same2 = getelementptr inbounds %struct.induction, %struct.induction* %5, i32 0, i32 18
  %6 = load %struct.induction*, %struct.induction** %same2, align 8
  %ignore = getelementptr inbounds %struct.induction, %struct.induction* %6, i32 0, i32 13
  %bf.load = load i16, i16* %ignore, align 4
  %bf.lshr = lshr i16 %bf.load, 2
  %bf.clear = and i16 %bf.lshr, 1
  %bf.cast = zext i16 %bf.clear to i32
  %tobool3 = icmp ne i32 %bf.cast, 0
  br i1 %tobool3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %7 = load %struct.induction*, %struct.induction** %v, align 8
  %ignore4 = getelementptr inbounds %struct.induction, %struct.induction* %7, i32 0, i32 13
  %bf.load5 = load i16, i16* %ignore4, align 4
  %bf.clear6 = and i16 %bf.load5, -5
  %bf.set = or i16 %bf.clear6, 4
  store i16 %bf.set, i16* %ignore4, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body
  %8 = load %struct.induction*, %struct.induction** %v, align 8
  %ignore7 = getelementptr inbounds %struct.induction, %struct.induction* %8, i32 0, i32 13
  %bf.load8 = load i16, i16* %ignore7, align 4
  %bf.lshr9 = lshr i16 %bf.load8, 2
  %bf.clear10 = and i16 %bf.lshr9, 1
  %bf.cast11 = zext i16 %bf.clear10 to i32
  %tobool12 = icmp ne i32 %bf.cast11, 0
  br i1 %tobool12, label %if.then.13, label %if.end.14

if.then.13:                                       ; preds = %if.end
  br label %for.inc

if.end.14:                                        ; preds = %if.end
  %9 = load %struct.induction*, %struct.induction** %v, align 8
  %same15 = getelementptr inbounds %struct.induction, %struct.induction* %9, i32 0, i32 18
  %10 = load %struct.induction*, %struct.induction** %same15, align 8
  %tobool16 = icmp ne %struct.induction* %10, null
  br i1 %tobool16, label %if.then.17, label %if.end.22

if.then.17:                                       ; preds = %if.end.14
  %11 = load %struct.induction*, %struct.induction** %v, align 8
  %new_reg = getelementptr inbounds %struct.induction, %struct.induction* %11, i32 0, i32 1
  %12 = load %struct.rtx_def*, %struct.rtx_def** %new_reg, align 8
  %13 = load %struct.induction*, %struct.induction** %v, align 8
  %same18 = getelementptr inbounds %struct.induction, %struct.induction* %13, i32 0, i32 18
  %14 = load %struct.induction*, %struct.induction** %same18, align 8
  %dest_reg = getelementptr inbounds %struct.induction, %struct.induction* %14, i32 0, i32 4
  %15 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg, align 8
  %16 = load %struct.induction*, %struct.induction** %v, align 8
  %same19 = getelementptr inbounds %struct.induction, %struct.induction* %16, i32 0, i32 18
  %17 = load %struct.induction*, %struct.induction** %same19, align 8
  %new_reg20 = getelementptr inbounds %struct.induction, %struct.induction* %17, i32 0, i32 1
  %18 = load %struct.rtx_def*, %struct.rtx_def** %new_reg20, align 8
  %call = call %struct.rtx_def* @replace_rtx(%struct.rtx_def* %12, %struct.rtx_def* %15, %struct.rtx_def* %18)
  %19 = load %struct.induction*, %struct.induction** %v, align 8
  %new_reg21 = getelementptr inbounds %struct.induction, %struct.induction* %19, i32 0, i32 1
  store %struct.rtx_def* %call, %struct.rtx_def** %new_reg21, align 8
  br label %if.end.22

if.end.22:                                        ; preds = %if.then.17, %if.end.14
  %20 = load %struct.induction*, %struct.induction** %v, align 8
  %new_reg23 = getelementptr inbounds %struct.induction, %struct.induction* %20, i32 0, i32 1
  %21 = load %struct.rtx_def*, %struct.rtx_def** %new_reg23, align 8
  %22 = bitcast %struct.rtx_def* %21 to i32*
  %bf.load24 = load i32, i32* %22, align 8
  %bf.clear25 = and i32 %bf.load24, 65535
  %cmp = icmp eq i32 %bf.clear25, 61
  br i1 %cmp, label %land.lhs.true.26, label %if.else

land.lhs.true.26:                                 ; preds = %if.end.22
  %23 = load %struct.induction*, %struct.induction** %v, align 8
  %giv_type = getelementptr inbounds %struct.induction, %struct.induction* %23, i32 0, i32 3
  %24 = load i32, i32* %giv_type, align 4
  %cmp27 = icmp eq i32 %24, 1
  br i1 %cmp27, label %land.lhs.true.28, label %if.else

land.lhs.true.28:                                 ; preds = %land.lhs.true.26
  %25 = load %struct.induction*, %struct.induction** %v, align 8
  %dest_reg29 = getelementptr inbounds %struct.induction, %struct.induction* %25, i32 0, i32 4
  %26 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg29, align 8
  %27 = bitcast %struct.rtx_def* %26 to i32*
  %bf.load30 = load i32, i32* %27, align 8
  %bf.lshr31 = lshr i32 %bf.load30, 31
  %tobool32 = icmp ne i32 %bf.lshr31, 0
  br i1 %tobool32, label %if.then.33, label %if.else

if.then.33:                                       ; preds = %land.lhs.true.28
  %28 = load %struct.induction*, %struct.induction** %v, align 8
  %new_reg34 = getelementptr inbounds %struct.induction, %struct.induction* %28, i32 0, i32 1
  %29 = load %struct.rtx_def*, %struct.rtx_def** %new_reg34, align 8
  %30 = load %struct.induction*, %struct.induction** %v, align 8
  %dest_reg35 = getelementptr inbounds %struct.induction, %struct.induction* %30, i32 0, i32 4
  %31 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg35, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx to i32*
  %32 = load i32, i32* %rtuint, align 4
  %idxprom = zext i32 %32 to i64
  %33 = load %struct.function*, %struct.function** @cfun, align 8
  %emit = getelementptr inbounds %struct.function, %struct.function* %33, i32 0, i32 3
  %34 = load %struct.emit_status*, %struct.emit_status** %emit, align 8
  %regno_pointer_align = getelementptr inbounds %struct.emit_status, %struct.emit_status* %34, i32 0, i32 10
  %35 = load i8*, i8** %regno_pointer_align, align 8
  %arrayidx36 = getelementptr inbounds i8, i8* %35, i64 %idxprom
  %36 = load i8, i8* %arrayidx36, align 1
  %conv = zext i8 %36 to i32
  call void @mark_reg_pointer(%struct.rtx_def* %29, i32 %conv)
  br label %if.end.135

if.else:                                          ; preds = %land.lhs.true.28, %land.lhs.true.26, %if.end.22
  %37 = load %struct.induction*, %struct.induction** %v, align 8
  %new_reg37 = getelementptr inbounds %struct.induction, %struct.induction* %37, i32 0, i32 1
  %38 = load %struct.rtx_def*, %struct.rtx_def** %new_reg37, align 8
  %39 = bitcast %struct.rtx_def* %38 to i32*
  %bf.load38 = load i32, i32* %39, align 8
  %bf.clear39 = and i32 %bf.load38, 65535
  %cmp40 = icmp eq i32 %bf.clear39, 61
  br i1 %cmp40, label %land.lhs.true.42, label %if.else.72

land.lhs.true.42:                                 ; preds = %if.else
  %40 = load %struct.induction*, %struct.induction** %v, align 8
  %src_reg = getelementptr inbounds %struct.induction, %struct.induction* %40, i32 0, i32 2
  %41 = load %struct.rtx_def*, %struct.rtx_def** %src_reg, align 8
  %42 = bitcast %struct.rtx_def* %41 to i32*
  %bf.load43 = load i32, i32* %42, align 8
  %bf.lshr44 = lshr i32 %bf.load43, 31
  %tobool45 = icmp ne i32 %bf.lshr44, 0
  br i1 %tobool45, label %if.then.46, label %if.else.72

if.then.46:                                       ; preds = %land.lhs.true.42
  %43 = load %struct.induction*, %struct.induction** %v, align 8
  %src_reg47 = getelementptr inbounds %struct.induction, %struct.induction* %43, i32 0, i32 2
  %44 = load %struct.rtx_def*, %struct.rtx_def** %src_reg47, align 8
  %fld48 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %44, i32 0, i32 1
  %arrayidx49 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld48, i32 0, i64 0
  %rtuint50 = bitcast %union.rtunion_def* %arrayidx49 to i32*
  %45 = load i32, i32* %rtuint50, align 4
  %idxprom51 = zext i32 %45 to i64
  %46 = load %struct.function*, %struct.function** @cfun, align 8
  %emit52 = getelementptr inbounds %struct.function, %struct.function* %46, i32 0, i32 3
  %47 = load %struct.emit_status*, %struct.emit_status** %emit52, align 8
  %regno_pointer_align53 = getelementptr inbounds %struct.emit_status, %struct.emit_status* %47, i32 0, i32 10
  %48 = load i8*, i8** %regno_pointer_align53, align 8
  %arrayidx54 = getelementptr inbounds i8, i8* %48, i64 %idxprom51
  %49 = load i8, i8* %arrayidx54, align 1
  %conv55 = zext i8 %49 to i32
  store i32 %conv55, i32* %align, align 4
  %50 = load i32, i32* %align, align 4
  %cmp56 = icmp eq i32 %50, 0
  br i1 %cmp56, label %if.then.69, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then.46
  %51 = load %struct.induction*, %struct.induction** %v, align 8
  %add_val = getelementptr inbounds %struct.induction, %struct.induction* %51, i32 0, i32 9
  %52 = load %struct.rtx_def*, %struct.rtx_def** %add_val, align 8
  %53 = bitcast %struct.rtx_def* %52 to i32*
  %bf.load58 = load i32, i32* %53, align 8
  %bf.clear59 = and i32 %bf.load58, 65535
  %cmp60 = icmp ne i32 %bf.clear59, 54
  br i1 %cmp60, label %if.then.69, label %lor.lhs.false.62

lor.lhs.false.62:                                 ; preds = %lor.lhs.false
  %54 = load %struct.induction*, %struct.induction** %v, align 8
  %add_val63 = getelementptr inbounds %struct.induction, %struct.induction* %54, i32 0, i32 9
  %55 = load %struct.rtx_def*, %struct.rtx_def** %add_val63, align 8
  %fld64 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %55, i32 0, i32 1
  %arrayidx65 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld64, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx65 to i64*
  %56 = load i64, i64* %rtwint, align 8
  %57 = load i32, i32* %align, align 4
  %div = udiv i32 %57, 8
  %conv66 = zext i32 %div to i64
  %rem = srem i64 %56, %conv66
  %cmp67 = icmp ne i64 %rem, 0
  br i1 %cmp67, label %if.then.69, label %if.end.70

if.then.69:                                       ; preds = %lor.lhs.false.62, %lor.lhs.false, %if.then.46
  store i32 0, i32* %align, align 4
  br label %if.end.70

if.end.70:                                        ; preds = %if.then.69, %lor.lhs.false.62
  %58 = load %struct.induction*, %struct.induction** %v, align 8
  %new_reg71 = getelementptr inbounds %struct.induction, %struct.induction* %58, i32 0, i32 1
  %59 = load %struct.rtx_def*, %struct.rtx_def** %new_reg71, align 8
  %60 = load i32, i32* %align, align 4
  call void @mark_reg_pointer(%struct.rtx_def* %59, i32 %60)
  br label %if.end.134

if.else.72:                                       ; preds = %land.lhs.true.42, %if.else
  %61 = load %struct.induction*, %struct.induction** %v, align 8
  %new_reg73 = getelementptr inbounds %struct.induction, %struct.induction* %61, i32 0, i32 1
  %62 = load %struct.rtx_def*, %struct.rtx_def** %new_reg73, align 8
  %63 = bitcast %struct.rtx_def* %62 to i32*
  %bf.load74 = load i32, i32* %63, align 8
  %bf.clear75 = and i32 %bf.load74, 65535
  %cmp76 = icmp eq i32 %bf.clear75, 61
  br i1 %cmp76, label %land.lhs.true.78, label %if.else.120

land.lhs.true.78:                                 ; preds = %if.else.72
  %64 = load %struct.induction*, %struct.induction** %v, align 8
  %add_val79 = getelementptr inbounds %struct.induction, %struct.induction* %64, i32 0, i32 9
  %65 = load %struct.rtx_def*, %struct.rtx_def** %add_val79, align 8
  %66 = bitcast %struct.rtx_def* %65 to i32*
  %bf.load80 = load i32, i32* %66, align 8
  %bf.clear81 = and i32 %bf.load80, 65535
  %cmp82 = icmp eq i32 %bf.clear81, 61
  br i1 %cmp82, label %land.lhs.true.84, label %if.else.120

land.lhs.true.84:                                 ; preds = %land.lhs.true.78
  %67 = load %struct.induction*, %struct.induction** %v, align 8
  %add_val85 = getelementptr inbounds %struct.induction, %struct.induction* %67, i32 0, i32 9
  %68 = load %struct.rtx_def*, %struct.rtx_def** %add_val85, align 8
  %69 = bitcast %struct.rtx_def* %68 to i32*
  %bf.load86 = load i32, i32* %69, align 8
  %bf.lshr87 = lshr i32 %bf.load86, 31
  %tobool88 = icmp ne i32 %bf.lshr87, 0
  br i1 %tobool88, label %if.then.89, label %if.else.120

if.then.89:                                       ; preds = %land.lhs.true.84
  %70 = load %struct.induction*, %struct.induction** %v, align 8
  %add_val91 = getelementptr inbounds %struct.induction, %struct.induction* %70, i32 0, i32 9
  %71 = load %struct.rtx_def*, %struct.rtx_def** %add_val91, align 8
  %fld92 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %71, i32 0, i32 1
  %arrayidx93 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld92, i32 0, i64 0
  %rtuint94 = bitcast %union.rtunion_def* %arrayidx93 to i32*
  %72 = load i32, i32* %rtuint94, align 4
  %idxprom95 = zext i32 %72 to i64
  %73 = load %struct.function*, %struct.function** @cfun, align 8
  %emit96 = getelementptr inbounds %struct.function, %struct.function* %73, i32 0, i32 3
  %74 = load %struct.emit_status*, %struct.emit_status** %emit96, align 8
  %regno_pointer_align97 = getelementptr inbounds %struct.emit_status, %struct.emit_status* %74, i32 0, i32 10
  %75 = load i8*, i8** %regno_pointer_align97, align 8
  %arrayidx98 = getelementptr inbounds i8, i8* %75, i64 %idxprom95
  %76 = load i8, i8* %arrayidx98, align 1
  %conv99 = zext i8 %76 to i32
  store i32 %conv99, i32* %align90, align 4
  %77 = load i32, i32* %align90, align 4
  %cmp100 = icmp eq i32 %77, 0
  br i1 %cmp100, label %if.then.117, label %lor.lhs.false.102

lor.lhs.false.102:                                ; preds = %if.then.89
  %78 = load %struct.induction*, %struct.induction** %v, align 8
  %mult_val = getelementptr inbounds %struct.induction, %struct.induction* %78, i32 0, i32 8
  %79 = load %struct.rtx_def*, %struct.rtx_def** %mult_val, align 8
  %80 = bitcast %struct.rtx_def* %79 to i32*
  %bf.load103 = load i32, i32* %80, align 8
  %bf.clear104 = and i32 %bf.load103, 65535
  %cmp105 = icmp ne i32 %bf.clear104, 54
  br i1 %cmp105, label %if.then.117, label %lor.lhs.false.107

lor.lhs.false.107:                                ; preds = %lor.lhs.false.102
  %81 = load %struct.induction*, %struct.induction** %v, align 8
  %mult_val108 = getelementptr inbounds %struct.induction, %struct.induction* %81, i32 0, i32 8
  %82 = load %struct.rtx_def*, %struct.rtx_def** %mult_val108, align 8
  %fld109 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %82, i32 0, i32 1
  %arrayidx110 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld109, i32 0, i64 0
  %rtwint111 = bitcast %union.rtunion_def* %arrayidx110 to i64*
  %83 = load i64, i64* %rtwint111, align 8
  %84 = load i32, i32* %align90, align 4
  %div112 = udiv i32 %84, 8
  %conv113 = zext i32 %div112 to i64
  %rem114 = srem i64 %83, %conv113
  %cmp115 = icmp ne i64 %rem114, 0
  br i1 %cmp115, label %if.then.117, label %if.end.118

if.then.117:                                      ; preds = %lor.lhs.false.107, %lor.lhs.false.102, %if.then.89
  store i32 0, i32* %align90, align 4
  br label %if.end.118

if.end.118:                                       ; preds = %if.then.117, %lor.lhs.false.107
  %85 = load %struct.induction*, %struct.induction** %v, align 8
  %new_reg119 = getelementptr inbounds %struct.induction, %struct.induction* %85, i32 0, i32 1
  %86 = load %struct.rtx_def*, %struct.rtx_def** %new_reg119, align 8
  %87 = load i32, i32* %align90, align 4
  call void @mark_reg_pointer(%struct.rtx_def* %86, i32 %87)
  br label %if.end.133

if.else.120:                                      ; preds = %land.lhs.true.84, %land.lhs.true.78, %if.else.72
  %88 = load %struct.induction*, %struct.induction** %v, align 8
  %new_reg121 = getelementptr inbounds %struct.induction, %struct.induction* %88, i32 0, i32 1
  %89 = load %struct.rtx_def*, %struct.rtx_def** %new_reg121, align 8
  %90 = bitcast %struct.rtx_def* %89 to i32*
  %bf.load122 = load i32, i32* %90, align 8
  %bf.clear123 = and i32 %bf.load122, 65535
  %cmp124 = icmp eq i32 %bf.clear123, 61
  br i1 %cmp124, label %land.lhs.true.126, label %if.end.132

land.lhs.true.126:                                ; preds = %if.else.120
  %91 = load %struct.induction*, %struct.induction** %v, align 8
  %giv_type127 = getelementptr inbounds %struct.induction, %struct.induction* %91, i32 0, i32 3
  %92 = load i32, i32* %giv_type127, align 4
  %cmp128 = icmp eq i32 %92, 0
  br i1 %cmp128, label %if.then.130, label %if.end.132

if.then.130:                                      ; preds = %land.lhs.true.126
  %93 = load %struct.induction*, %struct.induction** %v, align 8
  %new_reg131 = getelementptr inbounds %struct.induction, %struct.induction* %93, i32 0, i32 1
  %94 = load %struct.rtx_def*, %struct.rtx_def** %new_reg131, align 8
  call void @mark_reg_pointer(%struct.rtx_def* %94, i32 0)
  br label %if.end.132

if.end.132:                                       ; preds = %if.then.130, %land.lhs.true.126, %if.else.120
  br label %if.end.133

if.end.133:                                       ; preds = %if.end.132, %if.end.118
  br label %if.end.134

if.end.134:                                       ; preds = %if.end.133, %if.end.70
  br label %if.end.135

if.end.135:                                       ; preds = %if.end.134, %if.then.33
  %95 = load %struct.induction*, %struct.induction** %v, align 8
  %giv_type136 = getelementptr inbounds %struct.induction, %struct.induction* %95, i32 0, i32 3
  %96 = load i32, i32* %giv_type136, align 4
  %cmp137 = icmp eq i32 %96, 0
  br i1 %cmp137, label %if.then.139, label %if.else.142

if.then.139:                                      ; preds = %if.end.135
  %97 = load %struct.induction*, %struct.induction** %v, align 8
  %insn = getelementptr inbounds %struct.induction, %struct.induction* %97, i32 0, i32 0
  %98 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %99 = load %struct.induction*, %struct.induction** %v, align 8
  %location = getelementptr inbounds %struct.induction, %struct.induction* %99, i32 0, i32 5
  %100 = load %struct.rtx_def**, %struct.rtx_def*** %location, align 8
  %101 = load %struct.induction*, %struct.induction** %v, align 8
  %new_reg140 = getelementptr inbounds %struct.induction, %struct.induction* %101, i32 0, i32 1
  %102 = load %struct.rtx_def*, %struct.rtx_def** %new_reg140, align 8
  %call141 = call i32 @validate_change(%struct.rtx_def* %98, %struct.rtx_def** %100, %struct.rtx_def* %102, i32 0)
  br label %if.end.162

if.else.142:                                      ; preds = %if.end.135
  %103 = load %struct.induction*, %struct.induction** %v, align 8
  %replaceable = getelementptr inbounds %struct.induction, %struct.induction* %103, i32 0, i32 13
  %bf.load143 = load i16, i16* %replaceable, align 4
  %bf.clear144 = and i16 %bf.load143, 1
  %bf.cast145 = zext i16 %bf.clear144 to i32
  %tobool146 = icmp ne i32 %bf.cast145, 0
  br i1 %tobool146, label %if.then.147, label %if.else.155

if.then.147:                                      ; preds = %if.else.142
  %104 = load %struct.induction*, %struct.induction** %v, align 8
  %new_reg148 = getelementptr inbounds %struct.induction, %struct.induction* %104, i32 0, i32 1
  %105 = load %struct.rtx_def*, %struct.rtx_def** %new_reg148, align 8
  %106 = load %struct.induction*, %struct.induction** %v, align 8
  %dest_reg149 = getelementptr inbounds %struct.induction, %struct.induction* %106, i32 0, i32 4
  %107 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg149, align 8
  %fld150 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %107, i32 0, i32 1
  %arrayidx151 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld150, i32 0, i64 0
  %rtuint152 = bitcast %union.rtunion_def* %arrayidx151 to i32*
  %108 = load i32, i32* %rtuint152, align 4
  %idxprom153 = zext i32 %108 to i64
  %109 = load %struct.rtx_def**, %struct.rtx_def*** %reg_map.addr, align 8
  %arrayidx154 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %109, i64 %idxprom153
  store %struct.rtx_def* %105, %struct.rtx_def** %arrayidx154, align 8
  br label %if.end.161

if.else.155:                                      ; preds = %if.else.142
  %110 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %111 = load %struct.induction*, %struct.induction** %v, align 8
  %insn156 = getelementptr inbounds %struct.induction, %struct.induction* %111, i32 0, i32 0
  %112 = load %struct.rtx_def*, %struct.rtx_def** %insn156, align 8
  %113 = load %struct.induction*, %struct.induction** %v, align 8
  %dest_reg157 = getelementptr inbounds %struct.induction, %struct.induction* %113, i32 0, i32 4
  %114 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg157, align 8
  %115 = load %struct.induction*, %struct.induction** %v, align 8
  %new_reg158 = getelementptr inbounds %struct.induction, %struct.induction* %115, i32 0, i32 1
  %116 = load %struct.rtx_def*, %struct.rtx_def** %new_reg158, align 8
  %call159 = call %struct.rtx_def* @gen_move_insn(%struct.rtx_def* %114, %struct.rtx_def* %116)
  %call160 = call %struct.rtx_def* @loop_insn_emit_after(%struct.loop* %110, %struct.basic_block_def* null, %struct.rtx_def* %112, %struct.rtx_def* %call159)
  br label %if.end.161

if.end.161:                                       ; preds = %if.else.155, %if.then.147
  br label %if.end.162

if.end.162:                                       ; preds = %if.end.161, %if.then.139
  %117 = load %struct.iv_class*, %struct.iv_class** %bl.addr, align 8
  %reversed = getelementptr inbounds %struct.iv_class, %struct.iv_class* %117, i32 0, i32 12
  %bf.load163 = load i8, i8* %reversed, align 8
  %bf.lshr164 = lshr i8 %bf.load163, 3
  %bf.clear165 = and i8 %bf.lshr164, 1
  %bf.cast166 = zext i8 %bf.clear165 to i32
  %tobool167 = icmp ne i32 %bf.cast166, 0
  br i1 %tobool167, label %land.lhs.true.168, label %if.else.179

land.lhs.true.168:                                ; preds = %if.end.162
  %118 = load %struct.induction*, %struct.induction** %v, align 8
  %replaceable169 = getelementptr inbounds %struct.induction, %struct.induction* %118, i32 0, i32 13
  %bf.load170 = load i16, i16* %replaceable169, align 4
  %bf.clear171 = and i16 %bf.load170, 1
  %bf.cast172 = zext i16 %bf.clear171 to i32
  %tobool173 = icmp ne i32 %bf.cast172, 0
  br i1 %tobool173, label %if.else.179, label %if.then.174

if.then.174:                                      ; preds = %land.lhs.true.168
  %119 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %120 = load %struct.induction*, %struct.induction** %v, align 8
  %121 = load %struct.iv_class*, %struct.iv_class** %bl.addr, align 8
  %initial_value = getelementptr inbounds %struct.iv_class, %struct.iv_class* %121, i32 0, i32 6
  %122 = load %struct.rtx_def*, %struct.rtx_def** %initial_value, align 8
  %call175 = call %struct.rtx_def* @extend_value_for_giv(%struct.induction* %120, %struct.rtx_def* %122)
  %123 = load %struct.induction*, %struct.induction** %v, align 8
  %mult_val176 = getelementptr inbounds %struct.induction, %struct.induction* %123, i32 0, i32 8
  %124 = load %struct.rtx_def*, %struct.rtx_def** %mult_val176, align 8
  %125 = load %struct.induction*, %struct.induction** %v, align 8
  %add_val177 = getelementptr inbounds %struct.induction, %struct.induction* %125, i32 0, i32 9
  %126 = load %struct.rtx_def*, %struct.rtx_def** %add_val177, align 8
  %127 = load %struct.induction*, %struct.induction** %v, align 8
  %dest_reg178 = getelementptr inbounds %struct.induction, %struct.induction* %127, i32 0, i32 4
  %128 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg178, align 8
  call void @loop_iv_add_mult_sink(%struct.loop* %119, %struct.rtx_def* %call175, %struct.rtx_def* %124, %struct.rtx_def* %126, %struct.rtx_def* %128)
  br label %if.end.187

if.else.179:                                      ; preds = %land.lhs.true.168, %if.end.162
  %129 = load %struct.induction*, %struct.induction** %v, align 8
  %final_value = getelementptr inbounds %struct.induction, %struct.induction* %129, i32 0, i32 11
  %130 = load %struct.rtx_def*, %struct.rtx_def** %final_value, align 8
  %tobool180 = icmp ne %struct.rtx_def* %130, null
  br i1 %tobool180, label %if.then.181, label %if.end.186

if.then.181:                                      ; preds = %if.else.179
  %131 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %132 = load %struct.induction*, %struct.induction** %v, align 8
  %dest_reg182 = getelementptr inbounds %struct.induction, %struct.induction* %132, i32 0, i32 4
  %133 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg182, align 8
  %134 = load %struct.induction*, %struct.induction** %v, align 8
  %final_value183 = getelementptr inbounds %struct.induction, %struct.induction* %134, i32 0, i32 11
  %135 = load %struct.rtx_def*, %struct.rtx_def** %final_value183, align 8
  %call184 = call %struct.rtx_def* @gen_move_insn(%struct.rtx_def* %133, %struct.rtx_def* %135)
  %call185 = call %struct.rtx_def* @loop_insn_sink_or_swim(%struct.loop* %131, %struct.rtx_def* %call184)
  br label %if.end.186

if.end.186:                                       ; preds = %if.then.181, %if.else.179
  br label %if.end.187

if.end.187:                                       ; preds = %if.end.186, %if.then.174
  %136 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %tobool188 = icmp ne %struct._IO_FILE* %136, null
  br i1 %tobool188, label %if.then.189, label %if.end.196

if.then.189:                                      ; preds = %if.end.187
  %137 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %138 = load %struct.induction*, %struct.induction** %v, align 8
  %insn190 = getelementptr inbounds %struct.induction, %struct.induction* %138, i32 0, i32 0
  %139 = load %struct.rtx_def*, %struct.rtx_def** %insn190, align 8
  %fld191 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %139, i32 0, i32 1
  %arrayidx192 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld191, i32 0, i64 0
  %rtint = bitcast %union.rtunion_def* %arrayidx192 to i32*
  %140 = load i32, i32* %rtint, align 4
  %call193 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %137, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.67, i32 0, i32 0), i32 %140)
  %141 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %142 = load %struct.induction*, %struct.induction** %v, align 8
  %new_reg194 = getelementptr inbounds %struct.induction, %struct.induction* %142, i32 0, i32 1
  %143 = load %struct.rtx_def*, %struct.rtx_def** %new_reg194, align 8
  call void @print_simple_rtl(%struct._IO_FILE* %141, %struct.rtx_def* %143)
  %144 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %call195 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %144, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.18, i32 0, i32 0))
  br label %if.end.196

if.end.196:                                       ; preds = %if.then.189, %if.end.187
  br label %for.inc

for.inc:                                          ; preds = %if.end.196, %if.then.13
  %145 = load %struct.induction*, %struct.induction** %v, align 8
  %next_iv = getelementptr inbounds %struct.induction, %struct.induction* %145, i32 0, i32 17
  %146 = load %struct.induction*, %struct.induction** %next_iv, align 8
  store %struct.induction* %146, %struct.induction** %v, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @maybe_eliminate_biv(%struct.loop* %loop, %struct.iv_class* %bl, i32 %eliminate_p, i32 %threshold, i32 %insn_count) #0 {
entry:
  %retval = alloca i32, align 4
  %loop.addr = alloca %struct.loop*, align 8
  %bl.addr = alloca %struct.iv_class*, align 8
  %eliminate_p.addr = alloca i32, align 4
  %threshold.addr = alloca i32, align 4
  %insn_count.addr = alloca i32, align 4
  %ivs = alloca %struct.loop_ivs*, align 8
  %reg = alloca %struct.rtx_def*, align 8
  %p = alloca %struct.rtx_def*, align 8
  %code = alloca i32, align 4
  %where_bb = alloca %struct.basic_block_def*, align 8
  %where_insn = alloca %struct.rtx_def*, align 8
  %note = alloca %struct.rtx_def*, align 8
  %last = alloca %struct.rtx_def*, align 8
  %set = alloca %struct.rtx_def*, align 8
  %regno = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  store %struct.iv_class* %bl, %struct.iv_class** %bl.addr, align 8
  store i32 %eliminate_p, i32* %eliminate_p.addr, align 4
  store i32 %threshold, i32* %threshold.addr, align 4
  store i32 %insn_count, i32* %insn_count.addr, align 4
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %aux = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 22
  %1 = load i8*, i8** %aux, align 8
  %2 = bitcast i8* %1 to %struct.loop_info*
  %ivs1 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %2, i32 0, i32 29
  store %struct.loop_ivs* %ivs1, %struct.loop_ivs** %ivs, align 8
  %3 = load %struct.iv_class*, %struct.iv_class** %bl.addr, align 8
  %biv = getelementptr inbounds %struct.iv_class, %struct.iv_class* %3, i32 0, i32 2
  %4 = load %struct.induction*, %struct.induction** %biv, align 8
  %dest_reg = getelementptr inbounds %struct.induction, %struct.induction* %4, i32 0, i32 4
  %5 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %reg, align 8
  %6 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %start = getelementptr inbounds %struct.loop, %struct.loop* %6, i32 0, i32 26
  %7 = load %struct.rtx_def*, %struct.rtx_def** %start, align 8
  store %struct.rtx_def* %7, %struct.rtx_def** %p, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %8 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %9 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %end = getelementptr inbounds %struct.loop, %struct.loop* %9, i32 0, i32 27
  %10 = load %struct.rtx_def*, %struct.rtx_def** %end, align 8
  %cmp = icmp ne %struct.rtx_def* %8, %10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %12 = bitcast %struct.rtx_def* %11 to i32*
  %bf.load = load i32, i32* %12, align 8
  %bf.clear = and i32 %bf.load, 65535
  store i32 %bf.clear, i32* %code, align 4
  store %struct.basic_block_def* null, %struct.basic_block_def** %where_bb, align 8
  %13 = load i32, i32* %threshold.addr, align 4
  %14 = load i32, i32* %insn_count.addr, align 4
  %cmp2 = icmp sge i32 %13, %14
  br i1 %cmp2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  br label %cond.end

cond.false:                                       ; preds = %for.body
  %15 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ null, %cond.true ], [ %15, %cond.false ]
  store %struct.rtx_def* %cond, %struct.rtx_def** %where_insn, align 8
  %16 = load i32, i32* %code, align 4
  %idxprom = sext i32 %16 to i64
  %arrayidx = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom
  %17 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %17 to i32
  %cmp3 = icmp eq i32 %conv, 105
  br i1 %cmp3, label %if.then, label %if.end.68

if.then:                                          ; preds = %cond.end
  %18 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %call = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %18, i32 7, %struct.rtx_def* null)
  store %struct.rtx_def* %call, %struct.rtx_def** %note, align 8
  %19 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8
  %tobool = icmp ne %struct.rtx_def* %19, null
  br i1 %tobool, label %if.then.5, label %if.end.67

if.then.5:                                        ; preds = %if.then
  %20 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1
  %arrayidx6 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx6 to %struct.rtx_def**
  %21 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %21, %struct.rtx_def** %last, align 8
  %22 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8
  %23 = bitcast %struct.rtx_def* %22 to i32*
  %bf.load7 = load i32, i32* %23, align 8
  %bf.clear8 = and i32 %bf.load7, 65535
  %idxprom9 = sext i32 %bf.clear8 to i64
  %arrayidx10 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom9
  %24 = load i8, i8* %arrayidx10, align 1
  %conv11 = sext i8 %24 to i32
  %cmp12 = icmp eq i32 %conv11, 105
  br i1 %cmp12, label %cond.true.14, label %cond.false.33

cond.true.14:                                     ; preds = %if.then.5
  %25 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8
  %fld15 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1
  %arrayidx16 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld15, i32 0, i64 3
  %rtx17 = bitcast %union.rtunion_def* %arrayidx16 to %struct.rtx_def**
  %26 = load %struct.rtx_def*, %struct.rtx_def** %rtx17, align 8
  %27 = bitcast %struct.rtx_def* %26 to i32*
  %bf.load18 = load i32, i32* %27, align 8
  %bf.clear19 = and i32 %bf.load18, 65535
  %cmp20 = icmp eq i32 %bf.clear19, 47
  br i1 %cmp20, label %cond.true.22, label %cond.false.26

cond.true.22:                                     ; preds = %cond.true.14
  %28 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8
  %fld23 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1
  %arrayidx24 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld23, i32 0, i64 3
  %rtx25 = bitcast %union.rtunion_def* %arrayidx24 to %struct.rtx_def**
  %29 = load %struct.rtx_def*, %struct.rtx_def** %rtx25, align 8
  br label %cond.end.31

cond.false.26:                                    ; preds = %cond.true.14
  %30 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8
  %31 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8
  %fld27 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1
  %arrayidx28 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld27, i32 0, i64 3
  %rtx29 = bitcast %union.rtunion_def* %arrayidx28 to %struct.rtx_def**
  %32 = load %struct.rtx_def*, %struct.rtx_def** %rtx29, align 8
  %call30 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %30, %struct.rtx_def* %32)
  br label %cond.end.31

cond.end.31:                                      ; preds = %cond.false.26, %cond.true.22
  %cond32 = phi %struct.rtx_def* [ %29, %cond.true.22 ], [ %call30, %cond.false.26 ]
  br label %cond.end.34

cond.false.33:                                    ; preds = %if.then.5
  br label %cond.end.34

cond.end.34:                                      ; preds = %cond.false.33, %cond.end.31
  %cond35 = phi %struct.rtx_def* [ %cond32, %cond.end.31 ], [ null, %cond.false.33 ]
  store %struct.rtx_def* %cond35, %struct.rtx_def** %set, align 8
  %33 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %tobool36 = icmp ne %struct.rtx_def* %33, null
  br i1 %tobool36, label %land.lhs.true, label %if.end.66

land.lhs.true:                                    ; preds = %cond.end.34
  %34 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld37 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %34, i32 0, i32 1
  %arrayidx38 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld37, i32 0, i64 0
  %rtx39 = bitcast %union.rtunion_def* %arrayidx38 to %struct.rtx_def**
  %35 = load %struct.rtx_def*, %struct.rtx_def** %rtx39, align 8
  %36 = bitcast %struct.rtx_def* %35 to i32*
  %bf.load40 = load i32, i32* %36, align 8
  %bf.clear41 = and i32 %bf.load40, 65535
  %cmp42 = icmp eq i32 %bf.clear41, 61
  br i1 %cmp42, label %if.then.44, label %if.end.66

if.then.44:                                       ; preds = %land.lhs.true
  %37 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld45 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %37, i32 0, i32 1
  %arrayidx46 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld45, i32 0, i64 0
  %rtx47 = bitcast %union.rtunion_def* %arrayidx46 to %struct.rtx_def**
  %38 = load %struct.rtx_def*, %struct.rtx_def** %rtx47, align 8
  %fld48 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %38, i32 0, i32 1
  %arrayidx49 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld48, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx49 to i32*
  %39 = load i32, i32* %rtuint, align 4
  store i32 %39, i32* %regno, align 4
  %40 = load i32, i32* %regno, align 4
  %41 = load %struct.loop_ivs*, %struct.loop_ivs** %ivs, align 8
  %n_regs = getelementptr inbounds %struct.loop_ivs, %struct.loop_ivs* %41, i32 0, i32 1
  %42 = load i32, i32* %n_regs, align 4
  %cmp50 = icmp ult i32 %40, %42
  br i1 %cmp50, label %land.lhs.true.52, label %if.end

land.lhs.true.52:                                 ; preds = %if.then.44
  %43 = load i32, i32* %regno, align 4
  %idxprom53 = zext i32 %43 to i64
  %44 = load %struct.loop_ivs*, %struct.loop_ivs** %ivs, align 8
  %regs = getelementptr inbounds %struct.loop_ivs, %struct.loop_ivs* %44, i32 0, i32 0
  %45 = load %struct.iv*, %struct.iv** %regs, align 8
  %arrayidx54 = getelementptr inbounds %struct.iv, %struct.iv* %45, i64 %idxprom53
  %type = getelementptr inbounds %struct.iv, %struct.iv* %arrayidx54, i32 0, i32 0
  %46 = load i32, i32* %type, align 4
  %cmp55 = icmp eq i32 %46, 3
  br i1 %cmp55, label %land.lhs.true.57, label %if.end

land.lhs.true.57:                                 ; preds = %land.lhs.true.52
  %47 = load i32, i32* %regno, align 4
  %idxprom58 = zext i32 %47 to i64
  %48 = load %struct.loop_ivs*, %struct.loop_ivs** %ivs, align 8
  %regs59 = getelementptr inbounds %struct.loop_ivs, %struct.loop_ivs* %48, i32 0, i32 0
  %49 = load %struct.iv*, %struct.iv** %regs59, align 8
  %arrayidx60 = getelementptr inbounds %struct.iv, %struct.iv* %49, i64 %idxprom58
  %iv = getelementptr inbounds %struct.iv, %struct.iv* %arrayidx60, i32 0, i32 1
  %info = bitcast %union.anon.0* %iv to %struct.induction**
  %50 = load %struct.induction*, %struct.induction** %info, align 8
  %src_reg = getelementptr inbounds %struct.induction, %struct.induction* %50, i32 0, i32 2
  %51 = load %struct.rtx_def*, %struct.rtx_def** %src_reg, align 8
  %52 = load %struct.iv_class*, %struct.iv_class** %bl.addr, align 8
  %biv61 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %52, i32 0, i32 2
  %53 = load %struct.induction*, %struct.induction** %biv61, align 8
  %src_reg62 = getelementptr inbounds %struct.induction, %struct.induction* %53, i32 0, i32 2
  %54 = load %struct.rtx_def*, %struct.rtx_def** %src_reg62, align 8
  %cmp63 = icmp eq %struct.rtx_def* %51, %54
  br i1 %cmp63, label %if.then.65, label %if.end

if.then.65:                                       ; preds = %land.lhs.true.57
  %55 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8
  store %struct.rtx_def* %55, %struct.rtx_def** %p, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.65, %land.lhs.true.57, %land.lhs.true.52, %if.then.44
  br label %if.end.66

if.end.66:                                        ; preds = %if.end, %land.lhs.true, %cond.end.34
  br label %if.end.67

if.end.67:                                        ; preds = %if.end.66, %if.then
  br label %if.end.68

if.end.68:                                        ; preds = %if.end.67, %cond.end
  %56 = load i32, i32* %code, align 4
  %cmp69 = icmp eq i32 %56, 32
  br i1 %cmp69, label %land.lhs.true.76, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.68
  %57 = load i32, i32* %code, align 4
  %cmp71 = icmp eq i32 %57, 33
  br i1 %cmp71, label %land.lhs.true.76, label %lor.lhs.false.73

lor.lhs.false.73:                                 ; preds = %lor.lhs.false
  %58 = load i32, i32* %code, align 4
  %cmp74 = icmp eq i32 %58, 34
  br i1 %cmp74, label %land.lhs.true.76, label %if.end.96

land.lhs.true.76:                                 ; preds = %lor.lhs.false.73, %lor.lhs.false, %if.end.68
  %59 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %60 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld77 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %60, i32 0, i32 1
  %arrayidx78 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld77, i32 0, i64 3
  %rtx79 = bitcast %union.rtunion_def* %arrayidx78 to %struct.rtx_def**
  %61 = load %struct.rtx_def*, %struct.rtx_def** %rtx79, align 8
  %call80 = call i32 @reg_mentioned_p(%struct.rtx_def* %59, %struct.rtx_def* %61)
  %tobool81 = icmp ne i32 %call80, 0
  br i1 %tobool81, label %land.lhs.true.82, label %if.end.96

land.lhs.true.82:                                 ; preds = %land.lhs.true.76
  %62 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %63 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld83 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %63, i32 0, i32 1
  %arrayidx84 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld83, i32 0, i64 3
  %rtx85 = bitcast %union.rtunion_def* %arrayidx84 to %struct.rtx_def**
  %64 = load %struct.rtx_def*, %struct.rtx_def** %rtx85, align 8
  %65 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %66 = load %struct.iv_class*, %struct.iv_class** %bl.addr, align 8
  %67 = load i32, i32* %eliminate_p.addr, align 4
  %68 = load %struct.basic_block_def*, %struct.basic_block_def** %where_bb, align 8
  %69 = load %struct.rtx_def*, %struct.rtx_def** %where_insn, align 8
  %call86 = call i32 @maybe_eliminate_biv_1(%struct.loop* %62, %struct.rtx_def* %64, %struct.rtx_def* %65, %struct.iv_class* %66, i32 %67, %struct.basic_block_def* %68, %struct.rtx_def* %69)
  %tobool87 = icmp ne i32 %call86, 0
  br i1 %tobool87, label %if.end.96, label %if.then.88

if.then.88:                                       ; preds = %land.lhs.true.82
  %70 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %tobool89 = icmp ne %struct._IO_FILE* %70, null
  br i1 %tobool89, label %if.then.90, label %if.end.95

if.then.90:                                       ; preds = %if.then.88
  %71 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %72 = load %struct.iv_class*, %struct.iv_class** %bl.addr, align 8
  %regno91 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %72, i32 0, i32 0
  %73 = load i32, i32* %regno91, align 4
  %74 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld92 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %74, i32 0, i32 1
  %arrayidx93 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld92, i32 0, i64 0
  %rtint = bitcast %union.rtunion_def* %arrayidx93 to i32*
  %75 = load i32, i32* %rtint, align 4
  %call94 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %71, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.68, i32 0, i32 0), i32 %73, i32 %75)
  br label %if.end.95

if.end.95:                                        ; preds = %if.then.90, %if.then.88
  br label %for.end

if.end.96:                                        ; preds = %land.lhs.true.82, %land.lhs.true.76, %lor.lhs.false.73
  br label %for.inc

for.inc:                                          ; preds = %if.end.96
  %76 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld97 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %76, i32 0, i32 1
  %arrayidx98 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld97, i32 0, i64 2
  %rtx99 = bitcast %union.rtunion_def* %arrayidx98 to %struct.rtx_def**
  %77 = load %struct.rtx_def*, %struct.rtx_def** %rtx99, align 8
  store %struct.rtx_def* %77, %struct.rtx_def** %p, align 8
  br label %for.cond

for.end:                                          ; preds = %if.end.95, %for.cond
  %78 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %79 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %end100 = getelementptr inbounds %struct.loop, %struct.loop* %79, i32 0, i32 27
  %80 = load %struct.rtx_def*, %struct.rtx_def** %end100, align 8
  %cmp101 = icmp eq %struct.rtx_def* %78, %80
  br i1 %cmp101, label %if.then.103, label %if.end.111

if.then.103:                                      ; preds = %for.end
  %81 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %tobool104 = icmp ne %struct._IO_FILE* %81, null
  br i1 %tobool104, label %if.then.105, label %if.end.110

if.then.105:                                      ; preds = %if.then.103
  %82 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %83 = load %struct.iv_class*, %struct.iv_class** %bl.addr, align 8
  %regno106 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %83, i32 0, i32 0
  %84 = load i32, i32* %regno106, align 4
  %85 = load i32, i32* %eliminate_p.addr, align 4
  %tobool107 = icmp ne i32 %85, 0
  %cond108 = select i1 %tobool107, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.70, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.71, i32 0, i32 0)
  %call109 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %82, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.69, i32 0, i32 0), i32 %84, i8* %cond108)
  br label %if.end.110

if.end.110:                                       ; preds = %if.then.105, %if.then.103
  store i32 1, i32* %retval
  br label %return

if.end.111:                                       ; preds = %for.end
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.111, %if.end.110
  %86 = load i32, i32* %retval
  ret i32 %86
}

; Function Attrs: nounwind uwtable
define internal %struct.rtx_def* @loop_insn_sink_or_swim(%struct.loop* %loop, %struct.rtx_def* %pattern) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %pattern.addr = alloca %struct.rtx_def*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  store %struct.rtx_def* %pattern, %struct.rtx_def** %pattern.addr, align 8
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %exit_count = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 32
  %1 = load i32, i32* %exit_count, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8
  %call = call %struct.rtx_def* @loop_insn_hoist(%struct.loop* %2, %struct.rtx_def* %3)
  store %struct.rtx_def* %call, %struct.rtx_def** %retval
  br label %return

if.else:                                          ; preds = %entry
  %4 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8
  %call1 = call %struct.rtx_def* @loop_insn_sink(%struct.loop* %4, %struct.rtx_def* %5)
  store %struct.rtx_def* %call1, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.else, %if.then
  %6 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %6
}

declare i32 @doloop_optimize(%struct.loop*) #1

declare void @predict_insn(%struct.rtx_def*, i32, i32) #1

; Function Attrs: nounwind uwtable
define internal %struct.rtx_def* @check_insn_for_bivs(%struct.loop* %loop, %struct.rtx_def* %p, i32 %not_every_iteration, i32 %maybe_multiple) #0 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %p.addr = alloca %struct.rtx_def*, align 8
  %not_every_iteration.addr = alloca i32, align 4
  %maybe_multiple.addr = alloca i32, align 4
  %ivs = alloca %struct.loop_ivs*, align 8
  %set = alloca %struct.rtx_def*, align 8
  %dest_reg = alloca %struct.rtx_def*, align 8
  %inc_val = alloca %struct.rtx_def*, align 8
  %mult_val = alloca %struct.rtx_def*, align 8
  %location = alloca %struct.rtx_def**, align 8
  %v = alloca %struct.induction*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  store %struct.rtx_def* %p, %struct.rtx_def** %p.addr, align 8
  store i32 %not_every_iteration, i32* %not_every_iteration.addr, align 4
  store i32 %maybe_multiple, i32* %maybe_multiple.addr, align 4
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %aux = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 22
  %1 = load i8*, i8** %aux, align 8
  %2 = bitcast i8* %1 to %struct.loop_info*
  %ivs1 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %2, i32 0, i32 29
  store %struct.loop_ivs* %ivs1, %struct.loop_ivs** %ivs, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %p.addr, align 8
  %4 = bitcast %struct.rtx_def* %3 to i32*
  %bf.load = load i32, i32* %4, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 32
  br i1 %cmp, label %land.lhs.true, label %if.end.85

land.lhs.true:                                    ; preds = %entry
  %5 = load %struct.rtx_def*, %struct.rtx_def** %p.addr, align 8
  %6 = bitcast %struct.rtx_def* %5 to i32*
  %bf.load2 = load i32, i32* %6, align 8
  %bf.clear3 = and i32 %bf.load2, 65535
  %idxprom = sext i32 %bf.clear3 to i64
  %arrayidx = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom
  %7 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %7 to i32
  %cmp4 = icmp eq i32 %conv, 105
  br i1 %cmp4, label %cond.true, label %cond.false.18

cond.true:                                        ; preds = %land.lhs.true
  %8 = load %struct.rtx_def*, %struct.rtx_def** %p.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1
  %arrayidx6 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx6 to %struct.rtx_def**
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %10 = bitcast %struct.rtx_def* %9 to i32*
  %bf.load7 = load i32, i32* %10, align 8
  %bf.clear8 = and i32 %bf.load7, 65535
  %cmp9 = icmp eq i32 %bf.clear8, 47
  br i1 %cmp9, label %cond.true.11, label %cond.false

cond.true.11:                                     ; preds = %cond.true
  %11 = load %struct.rtx_def*, %struct.rtx_def** %p.addr, align 8
  %fld12 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1
  %arrayidx13 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld12, i32 0, i64 3
  %rtx14 = bitcast %union.rtunion_def* %arrayidx13 to %struct.rtx_def**
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rtx14, align 8
  br label %cond.end

cond.false:                                       ; preds = %cond.true
  %13 = load %struct.rtx_def*, %struct.rtx_def** %p.addr, align 8
  %14 = load %struct.rtx_def*, %struct.rtx_def** %p.addr, align 8
  %fld15 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1
  %arrayidx16 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld15, i32 0, i64 3
  %rtx17 = bitcast %union.rtunion_def* %arrayidx16 to %struct.rtx_def**
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rtx17, align 8
  %call = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %13, %struct.rtx_def* %15)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true.11
  %cond = phi %struct.rtx_def* [ %12, %cond.true.11 ], [ %call, %cond.false ]
  br label %cond.end.19

cond.false.18:                                    ; preds = %land.lhs.true
  br label %cond.end.19

cond.end.19:                                      ; preds = %cond.false.18, %cond.end
  %cond20 = phi %struct.rtx_def* [ %cond, %cond.end ], [ null, %cond.false.18 ]
  store %struct.rtx_def* %cond20, %struct.rtx_def** %set, align 8
  %tobool = icmp ne %struct.rtx_def* %cond20, null
  br i1 %tobool, label %land.lhs.true.21, label %if.end.85

land.lhs.true.21:                                 ; preds = %cond.end.19
  %16 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld22 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1
  %arrayidx23 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld22, i32 0, i64 0
  %rtx24 = bitcast %union.rtunion_def* %arrayidx23 to %struct.rtx_def**
  %17 = load %struct.rtx_def*, %struct.rtx_def** %rtx24, align 8
  %18 = bitcast %struct.rtx_def* %17 to i32*
  %bf.load25 = load i32, i32* %18, align 8
  %bf.clear26 = and i32 %bf.load25, 65535
  %cmp27 = icmp eq i32 %bf.clear26, 61
  br i1 %cmp27, label %if.then, label %if.end.85

if.then:                                          ; preds = %land.lhs.true.21
  %19 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld29 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1
  %arrayidx30 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld29, i32 0, i64 0
  %rtx31 = bitcast %union.rtunion_def* %arrayidx30 to %struct.rtx_def**
  %20 = load %struct.rtx_def*, %struct.rtx_def** %rtx31, align 8
  store %struct.rtx_def* %20, %struct.rtx_def** %dest_reg, align 8
  %21 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg, align 8
  %fld32 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1
  %arrayidx33 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld32, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx33 to i32*
  %22 = load i32, i32* %rtuint, align 4
  %23 = load i32, i32* @max_reg_before_loop, align 4
  %cmp34 = icmp ult i32 %22, %23
  br i1 %cmp34, label %land.lhs.true.36, label %if.end.84

land.lhs.true.36:                                 ; preds = %if.then
  %24 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg, align 8
  %fld37 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1
  %arrayidx38 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld37, i32 0, i64 0
  %rtuint39 = bitcast %union.rtunion_def* %arrayidx38 to i32*
  %25 = load i32, i32* %rtuint39, align 4
  %cmp40 = icmp uge i32 %25, 53
  br i1 %cmp40, label %land.lhs.true.42, label %if.end.84

land.lhs.true.42:                                 ; preds = %land.lhs.true.36
  %26 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg, align 8
  %fld43 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %26, i32 0, i32 1
  %arrayidx44 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld43, i32 0, i64 0
  %rtuint45 = bitcast %union.rtunion_def* %arrayidx44 to i32*
  %27 = load i32, i32* %rtuint45, align 4
  %idxprom46 = zext i32 %27 to i64
  %28 = load %struct.loop_ivs*, %struct.loop_ivs** %ivs, align 8
  %regs = getelementptr inbounds %struct.loop_ivs, %struct.loop_ivs* %28, i32 0, i32 0
  %29 = load %struct.iv*, %struct.iv** %regs, align 8
  %arrayidx47 = getelementptr inbounds %struct.iv, %struct.iv* %29, i64 %idxprom46
  %type = getelementptr inbounds %struct.iv, %struct.iv* %arrayidx47, i32 0, i32 0
  %30 = load i32, i32* %type, align 4
  %cmp48 = icmp ne i32 %30, 2
  br i1 %cmp48, label %if.then.50, label %if.end.84

if.then.50:                                       ; preds = %land.lhs.true.42
  %31 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %32 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld51 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %32, i32 0, i32 1
  %arrayidx52 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld51, i32 0, i64 1
  %rtx53 = bitcast %union.rtunion_def* %arrayidx52 to %struct.rtx_def**
  %33 = load %struct.rtx_def*, %struct.rtx_def** %rtx53, align 8
  %34 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld54 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %34, i32 0, i32 1
  %arrayidx55 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld54, i32 0, i64 1
  %rtx56 = bitcast %union.rtunion_def* %arrayidx55 to %struct.rtx_def**
  %35 = load %struct.rtx_def*, %struct.rtx_def** %rtx56, align 8
  %36 = bitcast %struct.rtx_def* %35 to i32*
  %bf.load57 = load i32, i32* %36, align 8
  %bf.lshr = lshr i32 %bf.load57, 16
  %bf.clear58 = and i32 %bf.lshr, 255
  %37 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg, align 8
  %38 = load %struct.rtx_def*, %struct.rtx_def** %p.addr, align 8
  %call59 = call i32 @basic_induction_var(%struct.loop* %31, %struct.rtx_def* %33, i32 %bf.clear58, %struct.rtx_def* %37, %struct.rtx_def* %38, %struct.rtx_def** %inc_val, %struct.rtx_def** %mult_val, %struct.rtx_def*** %location)
  %tobool60 = icmp ne i32 %call59, 0
  br i1 %tobool60, label %if.then.61, label %if.else

if.then.61:                                       ; preds = %if.then.50
  %call62 = call noalias i8* @xmalloc(i64 168)
  %39 = bitcast i8* %call62 to %struct.induction*
  store %struct.induction* %39, %struct.induction** %v, align 8
  %40 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %41 = load %struct.induction*, %struct.induction** %v, align 8
  %42 = load %struct.rtx_def*, %struct.rtx_def** %p.addr, align 8
  %43 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg, align 8
  %44 = load %struct.rtx_def*, %struct.rtx_def** %inc_val, align 8
  %45 = load %struct.rtx_def*, %struct.rtx_def** %mult_val, align 8
  %46 = load %struct.rtx_def**, %struct.rtx_def*** %location, align 8
  %47 = load i32, i32* %not_every_iteration.addr, align 4
  %48 = load i32, i32* %maybe_multiple.addr, align 4
  call void @record_biv(%struct.loop* %40, %struct.induction* %41, %struct.rtx_def* %42, %struct.rtx_def* %43, %struct.rtx_def* %44, %struct.rtx_def* %45, %struct.rtx_def** %46, i32 %47, i32 %48)
  %49 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg, align 8
  %fld63 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %49, i32 0, i32 1
  %arrayidx64 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld63, i32 0, i64 0
  %rtuint65 = bitcast %union.rtunion_def* %arrayidx64 to i32*
  %50 = load i32, i32* %rtuint65, align 4
  %idxprom66 = zext i32 %50 to i64
  %51 = load %struct.loop_ivs*, %struct.loop_ivs** %ivs, align 8
  %regs67 = getelementptr inbounds %struct.loop_ivs, %struct.loop_ivs* %51, i32 0, i32 0
  %52 = load %struct.iv*, %struct.iv** %regs67, align 8
  %arrayidx68 = getelementptr inbounds %struct.iv, %struct.iv* %52, i64 %idxprom66
  %type69 = getelementptr inbounds %struct.iv, %struct.iv* %arrayidx68, i32 0, i32 0
  store i32 1, i32* %type69, align 4
  br label %if.end.83

if.else:                                          ; preds = %if.then.50
  %53 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg, align 8
  %fld70 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %53, i32 0, i32 1
  %arrayidx71 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld70, i32 0, i64 0
  %rtuint72 = bitcast %union.rtunion_def* %arrayidx71 to i32*
  %54 = load i32, i32* %rtuint72, align 4
  %55 = load %struct.loop_ivs*, %struct.loop_ivs** %ivs, align 8
  %n_regs = getelementptr inbounds %struct.loop_ivs, %struct.loop_ivs* %55, i32 0, i32 1
  %56 = load i32, i32* %n_regs, align 4
  %cmp73 = icmp ult i32 %54, %56
  br i1 %cmp73, label %if.then.75, label %if.end

if.then.75:                                       ; preds = %if.else
  %57 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg, align 8
  %fld76 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %57, i32 0, i32 1
  %arrayidx77 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld76, i32 0, i64 0
  %rtuint78 = bitcast %union.rtunion_def* %arrayidx77 to i32*
  %58 = load i32, i32* %rtuint78, align 4
  %idxprom79 = zext i32 %58 to i64
  %59 = load %struct.loop_ivs*, %struct.loop_ivs** %ivs, align 8
  %regs80 = getelementptr inbounds %struct.loop_ivs, %struct.loop_ivs* %59, i32 0, i32 0
  %60 = load %struct.iv*, %struct.iv** %regs80, align 8
  %arrayidx81 = getelementptr inbounds %struct.iv, %struct.iv* %60, i64 %idxprom79
  %type82 = getelementptr inbounds %struct.iv, %struct.iv* %arrayidx81, i32 0, i32 0
  store i32 2, i32* %type82, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.75, %if.else
  br label %if.end.83

if.end.83:                                        ; preds = %if.end, %if.then.61
  br label %if.end.84

if.end.84:                                        ; preds = %if.end.83, %land.lhs.true.42, %land.lhs.true.36, %if.then
  br label %if.end.85

if.end.85:                                        ; preds = %if.end.84, %land.lhs.true.21, %cond.end.19, %entry
  %61 = load %struct.rtx_def*, %struct.rtx_def** %p.addr, align 8
  ret %struct.rtx_def* %61
}

; Function Attrs: nounwind uwtable
define internal i32 @basic_induction_var(%struct.loop* %loop, %struct.rtx_def* %x, i32 %mode, %struct.rtx_def* %dest_reg, %struct.rtx_def* %p, %struct.rtx_def** %inc_val, %struct.rtx_def** %mult_val, %struct.rtx_def*** %location) #0 {
entry:
  %retval = alloca i32, align 4
  %loop.addr = alloca %struct.loop*, align 8
  %x.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %dest_reg.addr = alloca %struct.rtx_def*, align 8
  %p.addr = alloca %struct.rtx_def*, align 8
  %inc_val.addr = alloca %struct.rtx_def**, align 8
  %mult_val.addr = alloca %struct.rtx_def**, align 8
  %location.addr = alloca %struct.rtx_def***, align 8
  %code = alloca i32, align 4
  %argp = alloca %struct.rtx_def**, align 8
  %arg = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %set = alloca %struct.rtx_def*, align 8
  %dest = alloca %struct.rtx_def*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  store i32 %mode, i32* %mode.addr, align 4
  store %struct.rtx_def* %dest_reg, %struct.rtx_def** %dest_reg.addr, align 8
  store %struct.rtx_def* %p, %struct.rtx_def** %p.addr, align 8
  store %struct.rtx_def** %inc_val, %struct.rtx_def*** %inc_val.addr, align 8
  store %struct.rtx_def** %mult_val, %struct.rtx_def*** %mult_val.addr, align 8
  store %struct.rtx_def*** %location, %struct.rtx_def**** %location.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %set, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  store i32 %bf.clear, i32* %code, align 4
  %2 = load %struct.rtx_def***, %struct.rtx_def**** %location.addr, align 8
  store %struct.rtx_def** null, %struct.rtx_def*** %2, align 8
  %3 = load i32, i32* %code, align 4
  switch i32 %3, label %sw.default [
    i32 75, label %sw.bb
    i32 63, label %sw.bb.68
    i32 61, label %sw.bb.79
    i32 66, label %sw.bb.215
    i32 54, label %sw.bb.221
    i32 68, label %sw.bb.221
    i32 58, label %sw.bb.221
    i32 120, label %sw.bb.245
    i32 89, label %sw.bb.256
  ]

sw.bb:                                            ; preds = %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %5 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg.addr, align 8
  %call = call i32 @rtx_equal_p(%struct.rtx_def* %5, %struct.rtx_def* %6)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %sw.bb
  %7 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1
  %arrayidx2 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1, i32 0, i64 0
  %rtx3 = bitcast %union.rtunion_def* %arrayidx2 to %struct.rtx_def**
  %8 = load %struct.rtx_def*, %struct.rtx_def** %rtx3, align 8
  %9 = bitcast %struct.rtx_def* %8 to i32*
  %bf.load4 = load i32, i32* %9, align 8
  %bf.clear5 = and i32 %bf.load4, 65535
  %cmp = icmp eq i32 %bf.clear5, 63
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %lor.lhs.false
  %10 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld6 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld6, i32 0, i64 0
  %rtx8 = bitcast %union.rtunion_def* %arrayidx7 to %struct.rtx_def**
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rtx8, align 8
  %12 = bitcast %struct.rtx_def* %11 to i32*
  %bf.load9 = load i32, i32* %12, align 8
  %bf.lshr = lshr i32 %bf.load9, 28
  %bf.clear10 = and i32 %bf.lshr, 1
  %tobool11 = icmp ne i32 %bf.clear10, 0
  br i1 %tobool11, label %land.lhs.true.12, label %if.else

land.lhs.true.12:                                 ; preds = %land.lhs.true
  %13 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld13 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1
  %arrayidx14 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld13, i32 0, i64 0
  %rtx15 = bitcast %union.rtunion_def* %arrayidx14 to %struct.rtx_def**
  %14 = load %struct.rtx_def*, %struct.rtx_def** %rtx15, align 8
  %fld16 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1
  %arrayidx17 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld16, i32 0, i64 0
  %rtx18 = bitcast %union.rtunion_def* %arrayidx17 to %struct.rtx_def**
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rtx18, align 8
  %16 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg.addr, align 8
  %cmp19 = icmp eq %struct.rtx_def* %15, %16
  br i1 %cmp19, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true.12, %sw.bb
  %17 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld20 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1
  %arrayidx21 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld20, i32 0, i64 1
  %rtx22 = bitcast %union.rtunion_def* %arrayidx21 to %struct.rtx_def**
  store %struct.rtx_def** %rtx22, %struct.rtx_def*** %argp, align 8
  br label %if.end.56

if.else:                                          ; preds = %land.lhs.true.12, %land.lhs.true, %lor.lhs.false
  %18 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld23 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1
  %arrayidx24 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld23, i32 0, i64 1
  %rtx25 = bitcast %union.rtunion_def* %arrayidx24 to %struct.rtx_def**
  %19 = load %struct.rtx_def*, %struct.rtx_def** %rtx25, align 8
  %20 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg.addr, align 8
  %call26 = call i32 @rtx_equal_p(%struct.rtx_def* %19, %struct.rtx_def* %20)
  %tobool27 = icmp ne i32 %call26, 0
  br i1 %tobool27, label %if.then.51, label %lor.lhs.false.28

lor.lhs.false.28:                                 ; preds = %if.else
  %21 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld29 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1
  %arrayidx30 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld29, i32 0, i64 1
  %rtx31 = bitcast %union.rtunion_def* %arrayidx30 to %struct.rtx_def**
  %22 = load %struct.rtx_def*, %struct.rtx_def** %rtx31, align 8
  %23 = bitcast %struct.rtx_def* %22 to i32*
  %bf.load32 = load i32, i32* %23, align 8
  %bf.clear33 = and i32 %bf.load32, 65535
  %cmp34 = icmp eq i32 %bf.clear33, 63
  br i1 %cmp34, label %land.lhs.true.35, label %if.else.55

land.lhs.true.35:                                 ; preds = %lor.lhs.false.28
  %24 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld36 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1
  %arrayidx37 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld36, i32 0, i64 1
  %rtx38 = bitcast %union.rtunion_def* %arrayidx37 to %struct.rtx_def**
  %25 = load %struct.rtx_def*, %struct.rtx_def** %rtx38, align 8
  %26 = bitcast %struct.rtx_def* %25 to i32*
  %bf.load39 = load i32, i32* %26, align 8
  %bf.lshr40 = lshr i32 %bf.load39, 28
  %bf.clear41 = and i32 %bf.lshr40, 1
  %tobool42 = icmp ne i32 %bf.clear41, 0
  br i1 %tobool42, label %land.lhs.true.43, label %if.else.55

land.lhs.true.43:                                 ; preds = %land.lhs.true.35
  %27 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld44 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1
  %arrayidx45 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld44, i32 0, i64 1
  %rtx46 = bitcast %union.rtunion_def* %arrayidx45 to %struct.rtx_def**
  %28 = load %struct.rtx_def*, %struct.rtx_def** %rtx46, align 8
  %fld47 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1
  %arrayidx48 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld47, i32 0, i64 0
  %rtx49 = bitcast %union.rtunion_def* %arrayidx48 to %struct.rtx_def**
  %29 = load %struct.rtx_def*, %struct.rtx_def** %rtx49, align 8
  %30 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg.addr, align 8
  %cmp50 = icmp eq %struct.rtx_def* %29, %30
  br i1 %cmp50, label %if.then.51, label %if.else.55

if.then.51:                                       ; preds = %land.lhs.true.43, %if.else
  %31 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld52 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1
  %arrayidx53 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld52, i32 0, i64 0
  %rtx54 = bitcast %union.rtunion_def* %arrayidx53 to %struct.rtx_def**
  store %struct.rtx_def** %rtx54, %struct.rtx_def*** %argp, align 8
  br label %if.end

if.else.55:                                       ; preds = %land.lhs.true.43, %land.lhs.true.35, %lor.lhs.false.28
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then.51
  br label %if.end.56

if.end.56:                                        ; preds = %if.end, %if.then
  %32 = load %struct.rtx_def**, %struct.rtx_def*** %argp, align 8
  %33 = load %struct.rtx_def*, %struct.rtx_def** %32, align 8
  store %struct.rtx_def* %33, %struct.rtx_def** %arg, align 8
  %34 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %35 = load %struct.rtx_def*, %struct.rtx_def** %arg, align 8
  %call57 = call i32 @loop_invariant_p(%struct.loop* %34, %struct.rtx_def* %35)
  %cmp58 = icmp ne i32 %call57, 1
  br i1 %cmp58, label %if.then.59, label %if.end.60

if.then.59:                                       ; preds = %if.end.56
  store i32 0, i32* %retval
  br label %return

if.end.60:                                        ; preds = %if.end.56
  %36 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg.addr, align 8
  %37 = bitcast %struct.rtx_def* %36 to i32*
  %bf.load61 = load i32, i32* %37, align 8
  %bf.lshr62 = lshr i32 %bf.load61, 16
  %bf.clear63 = and i32 %bf.lshr62, 255
  %38 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %39 = bitcast %struct.rtx_def* %38 to i32*
  %bf.load64 = load i32, i32* %39, align 8
  %bf.lshr65 = lshr i32 %bf.load64, 16
  %bf.clear66 = and i32 %bf.lshr65, 255
  %40 = load %struct.rtx_def*, %struct.rtx_def** %arg, align 8
  %call67 = call %struct.rtx_def* @convert_modes(i32 %bf.clear63, i32 %bf.clear66, %struct.rtx_def* %40, i32 0)
  %41 = load %struct.rtx_def**, %struct.rtx_def*** %inc_val.addr, align 8
  store %struct.rtx_def* %call67, %struct.rtx_def** %41, align 8
  %42 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %43 = load %struct.rtx_def**, %struct.rtx_def*** %mult_val.addr, align 8
  store %struct.rtx_def* %42, %struct.rtx_def** %43, align 8
  %44 = load %struct.rtx_def**, %struct.rtx_def*** %argp, align 8
  %45 = load %struct.rtx_def***, %struct.rtx_def**** %location.addr, align 8
  store %struct.rtx_def** %44, %struct.rtx_def*** %45, align 8
  store i32 1, i32* %retval
  br label %return

sw.bb.68:                                         ; preds = %entry
  %46 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %47 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld69 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %47, i32 0, i32 1
  %arrayidx70 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld69, i32 0, i64 0
  %rtx71 = bitcast %union.rtunion_def* %arrayidx70 to %struct.rtx_def**
  %48 = load %struct.rtx_def*, %struct.rtx_def** %rtx71, align 8
  %49 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld72 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %49, i32 0, i32 1
  %arrayidx73 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld72, i32 0, i64 0
  %rtx74 = bitcast %union.rtunion_def* %arrayidx73 to %struct.rtx_def**
  %50 = load %struct.rtx_def*, %struct.rtx_def** %rtx74, align 8
  %51 = bitcast %struct.rtx_def* %50 to i32*
  %bf.load75 = load i32, i32* %51, align 8
  %bf.lshr76 = lshr i32 %bf.load75, 16
  %bf.clear77 = and i32 %bf.lshr76, 255
  %52 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg.addr, align 8
  %53 = load %struct.rtx_def*, %struct.rtx_def** %p.addr, align 8
  %54 = load %struct.rtx_def**, %struct.rtx_def*** %inc_val.addr, align 8
  %55 = load %struct.rtx_def**, %struct.rtx_def*** %mult_val.addr, align 8
  %56 = load %struct.rtx_def***, %struct.rtx_def**** %location.addr, align 8
  %call78 = call i32 @basic_induction_var(%struct.loop* %46, %struct.rtx_def* %48, i32 %bf.clear77, %struct.rtx_def* %52, %struct.rtx_def* %53, %struct.rtx_def** %54, %struct.rtx_def** %55, %struct.rtx_def*** %56)
  store i32 %call78, i32* %retval
  br label %return

sw.bb.79:                                         ; preds = %entry
  %57 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg.addr, align 8
  %58 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %call80 = call i32 @rtx_equal_p(%struct.rtx_def* %57, %struct.rtx_def* %58)
  %tobool81 = icmp ne i32 %call80, 0
  br i1 %tobool81, label %if.then.82, label %if.end.83

if.then.82:                                       ; preds = %sw.bb.79
  store i32 0, i32* %retval
  br label %return

if.end.83:                                        ; preds = %sw.bb.79
  %59 = load %struct.rtx_def*, %struct.rtx_def** %p.addr, align 8
  store %struct.rtx_def* %59, %struct.rtx_def** %insn, align 8
  br label %while.body

while.body:                                       ; preds = %if.end.83, %if.end.213
  br label %do.body

do.body:                                          ; preds = %land.end, %while.body
  %60 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld84 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %60, i32 0, i32 1
  %arrayidx85 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld84, i32 0, i64 1
  %rtx86 = bitcast %union.rtunion_def* %arrayidx85 to %struct.rtx_def**
  %61 = load %struct.rtx_def*, %struct.rtx_def** %rtx86, align 8
  store %struct.rtx_def* %61, %struct.rtx_def** %insn, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %62 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %tobool87 = icmp ne %struct.rtx_def* %62, null
  br i1 %tobool87, label %land.lhs.true.88, label %land.end

land.lhs.true.88:                                 ; preds = %do.cond
  %63 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %64 = bitcast %struct.rtx_def* %63 to i32*
  %bf.load89 = load i32, i32* %64, align 8
  %bf.clear90 = and i32 %bf.load89, 65535
  %cmp91 = icmp eq i32 %bf.clear90, 37
  br i1 %cmp91, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true.88
  %65 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld92 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %65, i32 0, i32 1
  %arrayidx93 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld92, i32 0, i64 4
  %rtint = bitcast %union.rtunion_def* %arrayidx93 to i32*
  %66 = load i32, i32* %rtint, align 4
  %cmp94 = icmp ne i32 %66, -96
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true.88, %do.cond
  %67 = phi i1 [ false, %land.lhs.true.88 ], [ false, %do.cond ], [ %cmp94, %land.rhs ]
  br i1 %67, label %do.body, label %do.end

do.end:                                           ; preds = %land.end
  %68 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %tobool95 = icmp ne %struct.rtx_def* %68, null
  br i1 %tobool95, label %if.end.97, label %if.then.96

if.then.96:                                       ; preds = %do.end
  br label %while.end.214

if.end.97:                                        ; preds = %do.end
  %69 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %70 = bitcast %struct.rtx_def* %69 to i32*
  %bf.load98 = load i32, i32* %70, align 8
  %bf.clear99 = and i32 %bf.load98, 65535
  %idxprom = sext i32 %bf.clear99 to i64
  %arrayidx100 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom
  %71 = load i8, i8* %arrayidx100, align 1
  %conv = sext i8 %71 to i32
  %cmp101 = icmp eq i32 %conv, 105
  br i1 %cmp101, label %cond.true, label %cond.false.118

cond.true:                                        ; preds = %if.end.97
  %72 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld103 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %72, i32 0, i32 1
  %arrayidx104 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld103, i32 0, i64 3
  %rtx105 = bitcast %union.rtunion_def* %arrayidx104 to %struct.rtx_def**
  %73 = load %struct.rtx_def*, %struct.rtx_def** %rtx105, align 8
  %74 = bitcast %struct.rtx_def* %73 to i32*
  %bf.load106 = load i32, i32* %74, align 8
  %bf.clear107 = and i32 %bf.load106, 65535
  %cmp108 = icmp eq i32 %bf.clear107, 47
  br i1 %cmp108, label %cond.true.110, label %cond.false

cond.true.110:                                    ; preds = %cond.true
  %75 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld111 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %75, i32 0, i32 1
  %arrayidx112 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld111, i32 0, i64 3
  %rtx113 = bitcast %union.rtunion_def* %arrayidx112 to %struct.rtx_def**
  %76 = load %struct.rtx_def*, %struct.rtx_def** %rtx113, align 8
  br label %cond.end

cond.false:                                       ; preds = %cond.true
  %77 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %78 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld114 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %78, i32 0, i32 1
  %arrayidx115 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld114, i32 0, i64 3
  %rtx116 = bitcast %union.rtunion_def* %arrayidx115 to %struct.rtx_def**
  %79 = load %struct.rtx_def*, %struct.rtx_def** %rtx116, align 8
  %call117 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %77, %struct.rtx_def* %79)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true.110
  %cond = phi %struct.rtx_def* [ %76, %cond.true.110 ], [ %call117, %cond.false ]
  br label %cond.end.119

cond.false.118:                                   ; preds = %if.end.97
  br label %cond.end.119

cond.end.119:                                     ; preds = %cond.false.118, %cond.end
  %cond120 = phi %struct.rtx_def* [ %cond, %cond.end ], [ null, %cond.false.118 ]
  store %struct.rtx_def* %cond120, %struct.rtx_def** %set, align 8
  %80 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %cmp121 = icmp eq %struct.rtx_def* %80, null
  br i1 %cmp121, label %if.then.123, label %if.end.124

if.then.123:                                      ; preds = %cond.end.119
  br label %while.end.214

if.end.124:                                       ; preds = %cond.end.119
  %81 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld125 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %81, i32 0, i32 1
  %arrayidx126 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld125, i32 0, i64 0
  %rtx127 = bitcast %union.rtunion_def* %arrayidx126 to %struct.rtx_def**
  %82 = load %struct.rtx_def*, %struct.rtx_def** %rtx127, align 8
  store %struct.rtx_def* %82, %struct.rtx_def** %dest, align 8
  %83 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %84 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %cmp128 = icmp eq %struct.rtx_def* %83, %84
  br i1 %cmp128, label %if.then.160, label %lor.lhs.false.130

lor.lhs.false.130:                                ; preds = %if.end.124
  %85 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %86 = bitcast %struct.rtx_def* %85 to i32*
  %bf.load131 = load i32, i32* %86, align 8
  %bf.clear132 = and i32 %bf.load131, 65535
  %cmp133 = icmp eq i32 %bf.clear132, 63
  br i1 %cmp133, label %land.lhs.true.135, label %if.end.186

land.lhs.true.135:                                ; preds = %lor.lhs.false.130
  %87 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %88 = bitcast %struct.rtx_def* %87 to i32*
  %bf.load136 = load i32, i32* %88, align 8
  %bf.lshr137 = lshr i32 %bf.load136, 16
  %bf.clear138 = and i32 %bf.lshr137, 255
  %idxprom139 = sext i32 %bf.clear138 to i64
  %arrayidx140 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom139
  %89 = load i8, i8* %arrayidx140, align 1
  %conv141 = zext i8 %89 to i32
  %90 = load i32, i32* @target_flags, align 4
  %and = and i32 %90, 33554432
  %tobool142 = icmp ne i32 %and, 0
  %cond143 = select i1 %tobool142, i32 8, i32 4
  %cmp144 = icmp sle i32 %conv141, %cond143
  br i1 %cmp144, label %land.lhs.true.146, label %if.end.186

land.lhs.true.146:                                ; preds = %land.lhs.true.135
  %91 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %92 = bitcast %struct.rtx_def* %91 to i32*
  %bf.load147 = load i32, i32* %92, align 8
  %bf.lshr148 = lshr i32 %bf.load147, 16
  %bf.clear149 = and i32 %bf.lshr148, 255
  %idxprom150 = sext i32 %bf.clear149 to i64
  %arrayidx151 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom150
  %93 = load i32, i32* %arrayidx151, align 4
  %cmp152 = icmp eq i32 %93, 1
  br i1 %cmp152, label %land.lhs.true.154, label %if.end.186

land.lhs.true.154:                                ; preds = %land.lhs.true.146
  %94 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %fld155 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %94, i32 0, i32 1
  %arrayidx156 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld155, i32 0, i64 0
  %rtx157 = bitcast %union.rtunion_def* %arrayidx156 to %struct.rtx_def**
  %95 = load %struct.rtx_def*, %struct.rtx_def** %rtx157, align 8
  %96 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %cmp158 = icmp eq %struct.rtx_def* %95, %96
  br i1 %cmp158, label %if.then.160, label %if.end.186

if.then.160:                                      ; preds = %land.lhs.true.154, %if.end.124
  %97 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %98 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld161 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %98, i32 0, i32 1
  %arrayidx162 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld161, i32 0, i64 1
  %rtx163 = bitcast %union.rtunion_def* %arrayidx162 to %struct.rtx_def**
  %99 = load %struct.rtx_def*, %struct.rtx_def** %rtx163, align 8
  %100 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld164 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %100, i32 0, i32 1
  %arrayidx165 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld164, i32 0, i64 1
  %rtx166 = bitcast %union.rtunion_def* %arrayidx165 to %struct.rtx_def**
  %101 = load %struct.rtx_def*, %struct.rtx_def** %rtx166, align 8
  %102 = bitcast %struct.rtx_def* %101 to i32*
  %bf.load167 = load i32, i32* %102, align 8
  %bf.lshr168 = lshr i32 %bf.load167, 16
  %bf.clear169 = and i32 %bf.lshr168, 255
  %cmp170 = icmp eq i32 %bf.clear169, 0
  br i1 %cmp170, label %cond.true.172, label %cond.false.176

cond.true.172:                                    ; preds = %if.then.160
  %103 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %104 = bitcast %struct.rtx_def* %103 to i32*
  %bf.load173 = load i32, i32* %104, align 8
  %bf.lshr174 = lshr i32 %bf.load173, 16
  %bf.clear175 = and i32 %bf.lshr174, 255
  br label %cond.end.183

cond.false.176:                                   ; preds = %if.then.160
  %105 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld177 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %105, i32 0, i32 1
  %arrayidx178 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld177, i32 0, i64 1
  %rtx179 = bitcast %union.rtunion_def* %arrayidx178 to %struct.rtx_def**
  %106 = load %struct.rtx_def*, %struct.rtx_def** %rtx179, align 8
  %107 = bitcast %struct.rtx_def* %106 to i32*
  %bf.load180 = load i32, i32* %107, align 8
  %bf.lshr181 = lshr i32 %bf.load180, 16
  %bf.clear182 = and i32 %bf.lshr181, 255
  br label %cond.end.183

cond.end.183:                                     ; preds = %cond.false.176, %cond.true.172
  %cond184 = phi i32 [ %bf.clear175, %cond.true.172 ], [ %bf.clear182, %cond.false.176 ]
  %108 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg.addr, align 8
  %109 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %110 = load %struct.rtx_def**, %struct.rtx_def*** %inc_val.addr, align 8
  %111 = load %struct.rtx_def**, %struct.rtx_def*** %mult_val.addr, align 8
  %112 = load %struct.rtx_def***, %struct.rtx_def**** %location.addr, align 8
  %call185 = call i32 @basic_induction_var(%struct.loop* %97, %struct.rtx_def* %99, i32 %cond184, %struct.rtx_def* %108, %struct.rtx_def* %109, %struct.rtx_def** %110, %struct.rtx_def** %111, %struct.rtx_def*** %112)
  store i32 %call185, i32* %retval
  br label %return

if.end.186:                                       ; preds = %land.lhs.true.154, %land.lhs.true.146, %land.lhs.true.135, %lor.lhs.false.130
  br label %while.cond.187

while.cond.187:                                   ; preds = %while.body.206, %if.end.186
  %113 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %114 = bitcast %struct.rtx_def* %113 to i32*
  %bf.load188 = load i32, i32* %114, align 8
  %bf.clear189 = and i32 %bf.load188, 65535
  %cmp190 = icmp eq i32 %bf.clear189, 132
  br i1 %cmp190, label %lor.end, label %lor.lhs.false.192

lor.lhs.false.192:                                ; preds = %while.cond.187
  %115 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %116 = bitcast %struct.rtx_def* %115 to i32*
  %bf.load193 = load i32, i32* %116, align 8
  %bf.clear194 = and i32 %bf.load193, 65535
  %cmp195 = icmp eq i32 %bf.clear194, 133
  br i1 %cmp195, label %lor.end, label %lor.lhs.false.197

lor.lhs.false.197:                                ; preds = %lor.lhs.false.192
  %117 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %118 = bitcast %struct.rtx_def* %117 to i32*
  %bf.load198 = load i32, i32* %118, align 8
  %bf.clear199 = and i32 %bf.load198, 65535
  %cmp200 = icmp eq i32 %bf.clear199, 63
  br i1 %cmp200, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false.197
  %119 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %120 = bitcast %struct.rtx_def* %119 to i32*
  %bf.load202 = load i32, i32* %120, align 8
  %bf.clear203 = and i32 %bf.load202, 65535
  %cmp204 = icmp eq i32 %bf.clear203, 64
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false.197, %lor.lhs.false.192, %while.cond.187
  %121 = phi i1 [ true, %lor.lhs.false.197 ], [ true, %lor.lhs.false.192 ], [ true, %while.cond.187 ], [ %cmp204, %lor.rhs ]
  br i1 %121, label %while.body.206, label %while.end

while.body.206:                                   ; preds = %lor.end
  %122 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %fld207 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %122, i32 0, i32 1
  %arrayidx208 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld207, i32 0, i64 0
  %rtx209 = bitcast %union.rtunion_def* %arrayidx208 to %struct.rtx_def**
  %123 = load %struct.rtx_def*, %struct.rtx_def** %rtx209, align 8
  store %struct.rtx_def* %123, %struct.rtx_def** %dest, align 8
  br label %while.cond.187

while.end:                                        ; preds = %lor.end
  %124 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %125 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %cmp210 = icmp eq %struct.rtx_def* %124, %125
  br i1 %cmp210, label %if.then.212, label %if.end.213

if.then.212:                                      ; preds = %while.end
  br label %while.end.214

if.end.213:                                       ; preds = %while.end
  br label %while.body

while.end.214:                                    ; preds = %if.then.212, %if.then.123, %if.then.96
  br label %sw.bb.215

sw.bb.215:                                        ; preds = %entry, %while.end.214
  %126 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %127 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %call216 = call i32 @loop_invariant_p(%struct.loop* %126, %struct.rtx_def* %127)
  %cmp217 = icmp ne i32 %call216, 1
  br i1 %cmp217, label %if.then.219, label %if.end.220

if.then.219:                                      ; preds = %sw.bb.215
  store i32 0, i32* %retval
  br label %return

if.end.220:                                       ; preds = %sw.bb.215
  br label %sw.bb.221

sw.bb.221:                                        ; preds = %entry, %entry, %entry, %if.end.220
  %128 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %level = getelementptr inbounds %struct.loop, %struct.loop* %128, i32 0, i32 16
  %129 = load i32, i32* %level, align 4
  %cmp222 = icmp eq i32 %129, 1
  br i1 %cmp222, label %land.lhs.true.224, label %if.else.244

land.lhs.true.224:                                ; preds = %sw.bb.221
  %130 = load i32, i32* %mode.addr, align 4
  %idxprom225 = sext i32 %130 to i64
  %arrayidx226 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom225
  %131 = load i32, i32* %arrayidx226, align 4
  %132 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg.addr, align 8
  %133 = bitcast %struct.rtx_def* %132 to i32*
  %bf.load227 = load i32, i32* %133, align 8
  %bf.lshr228 = lshr i32 %bf.load227, 16
  %bf.clear229 = and i32 %bf.lshr228, 255
  %idxprom230 = sext i32 %bf.clear229 to i64
  %arrayidx231 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom230
  %134 = load i32, i32* %arrayidx231, align 4
  %cmp232 = icmp eq i32 %131, %134
  br i1 %cmp232, label %land.lhs.true.234, label %if.else.244

land.lhs.true.234:                                ; preds = %land.lhs.true.224
  %135 = load i32, i32* %mode.addr, align 4
  %idxprom235 = sext i32 %135 to i64
  %arrayidx236 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom235
  %136 = load i32, i32* %arrayidx236, align 4
  %cmp237 = icmp ne i32 %136, 4
  br i1 %cmp237, label %if.then.239, label %if.else.244

if.then.239:                                      ; preds = %land.lhs.true.234
  %137 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg.addr, align 8
  %138 = bitcast %struct.rtx_def* %137 to i32*
  %bf.load240 = load i32, i32* %138, align 8
  %bf.lshr241 = lshr i32 %bf.load240, 16
  %bf.clear242 = and i32 %bf.lshr241, 255
  %139 = load i32, i32* %mode.addr, align 4
  %140 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %call243 = call %struct.rtx_def* @convert_modes(i32 %bf.clear242, i32 %139, %struct.rtx_def* %140, i32 0)
  %141 = load %struct.rtx_def**, %struct.rtx_def*** %inc_val.addr, align 8
  store %struct.rtx_def* %call243, %struct.rtx_def** %141, align 8
  %142 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %143 = load %struct.rtx_def**, %struct.rtx_def*** %mult_val.addr, align 8
  store %struct.rtx_def* %142, %struct.rtx_def** %143, align 8
  store i32 1, i32* %retval
  br label %return

if.else.244:                                      ; preds = %land.lhs.true.234, %land.lhs.true.224, %sw.bb.221
  store i32 0, i32* %retval
  br label %return

sw.bb.245:                                        ; preds = %entry
  %144 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %145 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld246 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %145, i32 0, i32 1
  %arrayidx247 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld246, i32 0, i64 0
  %rtx248 = bitcast %union.rtunion_def* %arrayidx247 to %struct.rtx_def**
  %146 = load %struct.rtx_def*, %struct.rtx_def** %rtx248, align 8
  %147 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld249 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %147, i32 0, i32 1
  %arrayidx250 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld249, i32 0, i64 0
  %rtx251 = bitcast %union.rtunion_def* %arrayidx250 to %struct.rtx_def**
  %148 = load %struct.rtx_def*, %struct.rtx_def** %rtx251, align 8
  %149 = bitcast %struct.rtx_def* %148 to i32*
  %bf.load252 = load i32, i32* %149, align 8
  %bf.lshr253 = lshr i32 %bf.load252, 16
  %bf.clear254 = and i32 %bf.lshr253, 255
  %150 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg.addr, align 8
  %151 = load %struct.rtx_def*, %struct.rtx_def** %p.addr, align 8
  %152 = load %struct.rtx_def**, %struct.rtx_def*** %inc_val.addr, align 8
  %153 = load %struct.rtx_def**, %struct.rtx_def*** %mult_val.addr, align 8
  %154 = load %struct.rtx_def***, %struct.rtx_def**** %location.addr, align 8
  %call255 = call i32 @basic_induction_var(%struct.loop* %144, %struct.rtx_def* %146, i32 %bf.clear254, %struct.rtx_def* %150, %struct.rtx_def* %151, %struct.rtx_def** %152, %struct.rtx_def** %153, %struct.rtx_def*** %154)
  store i32 %call255, i32* %retval
  br label %return

sw.bb.256:                                        ; preds = %entry
  %155 = load %struct.rtx_def*, %struct.rtx_def** %p.addr, align 8
  %fld257 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %155, i32 0, i32 1
  %arrayidx258 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld257, i32 0, i64 1
  %rtx259 = bitcast %union.rtunion_def* %arrayidx258 to %struct.rtx_def**
  %156 = load %struct.rtx_def*, %struct.rtx_def** %rtx259, align 8
  store %struct.rtx_def* %156, %struct.rtx_def** %insn, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %sw.bb.256
  %157 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %tobool260 = icmp ne %struct.rtx_def* %157, null
  br i1 %tobool260, label %land.lhs.true.261, label %land.end.272

land.lhs.true.261:                                ; preds = %for.cond
  %158 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %159 = bitcast %struct.rtx_def* %158 to i32*
  %bf.load262 = load i32, i32* %159, align 8
  %bf.clear263 = and i32 %bf.load262, 65535
  %cmp264 = icmp eq i32 %bf.clear263, 37
  br i1 %cmp264, label %land.rhs.266, label %land.end.272

land.rhs.266:                                     ; preds = %land.lhs.true.261
  %160 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld267 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %160, i32 0, i32 1
  %arrayidx268 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld267, i32 0, i64 4
  %rtint269 = bitcast %union.rtunion_def* %arrayidx268 to i32*
  %161 = load i32, i32* %rtint269, align 4
  %cmp270 = icmp ne i32 %161, -96
  br label %land.end.272

land.end.272:                                     ; preds = %land.rhs.266, %land.lhs.true.261, %for.cond
  %162 = phi i1 [ false, %land.lhs.true.261 ], [ false, %for.cond ], [ %cmp270, %land.rhs.266 ]
  br i1 %162, label %for.body, label %for.end

for.body:                                         ; preds = %land.end.272
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %163 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld273 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %163, i32 0, i32 1
  %arrayidx274 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld273, i32 0, i64 1
  %rtx275 = bitcast %union.rtunion_def* %arrayidx274 to %struct.rtx_def**
  %164 = load %struct.rtx_def*, %struct.rtx_def** %rtx275, align 8
  store %struct.rtx_def* %164, %struct.rtx_def** %insn, align 8
  br label %for.cond

for.end:                                          ; preds = %land.end.272
  %165 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %tobool276 = icmp ne %struct.rtx_def* %165, null
  br i1 %tobool276, label %if.then.277, label %if.end.307

if.then.277:                                      ; preds = %for.end
  %166 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %167 = bitcast %struct.rtx_def* %166 to i32*
  %bf.load278 = load i32, i32* %167, align 8
  %bf.clear279 = and i32 %bf.load278, 65535
  %idxprom280 = sext i32 %bf.clear279 to i64
  %arrayidx281 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom280
  %168 = load i8, i8* %arrayidx281, align 1
  %conv282 = sext i8 %168 to i32
  %cmp283 = icmp eq i32 %conv282, 105
  br i1 %cmp283, label %cond.true.285, label %cond.false.304

cond.true.285:                                    ; preds = %if.then.277
  %169 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld286 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %169, i32 0, i32 1
  %arrayidx287 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld286, i32 0, i64 3
  %rtx288 = bitcast %union.rtunion_def* %arrayidx287 to %struct.rtx_def**
  %170 = load %struct.rtx_def*, %struct.rtx_def** %rtx288, align 8
  %171 = bitcast %struct.rtx_def* %170 to i32*
  %bf.load289 = load i32, i32* %171, align 8
  %bf.clear290 = and i32 %bf.load289, 65535
  %cmp291 = icmp eq i32 %bf.clear290, 47
  br i1 %cmp291, label %cond.true.293, label %cond.false.297

cond.true.293:                                    ; preds = %cond.true.285
  %172 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld294 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %172, i32 0, i32 1
  %arrayidx295 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld294, i32 0, i64 3
  %rtx296 = bitcast %union.rtunion_def* %arrayidx295 to %struct.rtx_def**
  %173 = load %struct.rtx_def*, %struct.rtx_def** %rtx296, align 8
  br label %cond.end.302

cond.false.297:                                   ; preds = %cond.true.285
  %174 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %175 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld298 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %175, i32 0, i32 1
  %arrayidx299 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld298, i32 0, i64 3
  %rtx300 = bitcast %union.rtunion_def* %arrayidx299 to %struct.rtx_def**
  %176 = load %struct.rtx_def*, %struct.rtx_def** %rtx300, align 8
  %call301 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %174, %struct.rtx_def* %176)
  br label %cond.end.302

cond.end.302:                                     ; preds = %cond.false.297, %cond.true.293
  %cond303 = phi %struct.rtx_def* [ %173, %cond.true.293 ], [ %call301, %cond.false.297 ]
  br label %cond.end.305

cond.false.304:                                   ; preds = %if.then.277
  br label %cond.end.305

cond.end.305:                                     ; preds = %cond.false.304, %cond.end.302
  %cond306 = phi %struct.rtx_def* [ %cond303, %cond.end.302 ], [ null, %cond.false.304 ]
  store %struct.rtx_def* %cond306, %struct.rtx_def** %set, align 8
  br label %if.end.307

if.end.307:                                       ; preds = %cond.end.305, %for.end
  %177 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg.addr, align 8
  %178 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld308 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %178, i32 0, i32 1
  %arrayidx309 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld308, i32 0, i64 0
  %rtx310 = bitcast %union.rtunion_def* %arrayidx309 to %struct.rtx_def**
  %179 = load %struct.rtx_def*, %struct.rtx_def** %rtx310, align 8
  %call311 = call i32 @rtx_equal_p(%struct.rtx_def* %177, %struct.rtx_def* %179)
  %tobool312 = icmp ne i32 %call311, 0
  br i1 %tobool312, label %if.end.374, label %land.lhs.true.313

land.lhs.true.313:                                ; preds = %if.end.307
  %180 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %tobool314 = icmp ne %struct.rtx_def* %180, null
  br i1 %tobool314, label %land.lhs.true.315, label %if.end.374

land.lhs.true.315:                                ; preds = %land.lhs.true.313
  %181 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld316 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %181, i32 0, i32 1
  %arrayidx317 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld316, i32 0, i64 0
  %rtx318 = bitcast %union.rtunion_def* %arrayidx317 to %struct.rtx_def**
  %182 = load %struct.rtx_def*, %struct.rtx_def** %rtx318, align 8
  %183 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld319 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %183, i32 0, i32 1
  %arrayidx320 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld319, i32 0, i64 0
  %rtx321 = bitcast %union.rtunion_def* %arrayidx320 to %struct.rtx_def**
  %184 = load %struct.rtx_def*, %struct.rtx_def** %rtx321, align 8
  %cmp322 = icmp eq %struct.rtx_def* %182, %184
  br i1 %cmp322, label %land.lhs.true.324, label %if.end.374

land.lhs.true.324:                                ; preds = %land.lhs.true.315
  %185 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld325 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %185, i32 0, i32 1
  %arrayidx326 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld325, i32 0, i64 1
  %rtx327 = bitcast %union.rtunion_def* %arrayidx326 to %struct.rtx_def**
  %186 = load %struct.rtx_def*, %struct.rtx_def** %rtx327, align 8
  %187 = bitcast %struct.rtx_def* %186 to i32*
  %bf.load328 = load i32, i32* %187, align 8
  %bf.clear329 = and i32 %bf.load328, 65535
  %cmp330 = icmp eq i32 %bf.clear329, 54
  br i1 %cmp330, label %land.lhs.true.332, label %if.end.374

land.lhs.true.332:                                ; preds = %land.lhs.true.324
  %188 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld333 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %188, i32 0, i32 1
  %arrayidx334 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld333, i32 0, i64 1
  %rtx335 = bitcast %union.rtunion_def* %arrayidx334 to %struct.rtx_def**
  %189 = load %struct.rtx_def*, %struct.rtx_def** %rtx335, align 8
  %fld336 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %189, i32 0, i32 1
  %arrayidx337 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld336, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx337 to i64*
  %190 = load i64, i64* %rtwint, align 8
  %cmp338 = icmp sge i64 %190, 0
  br i1 %cmp338, label %land.lhs.true.340, label %if.end.374

land.lhs.true.340:                                ; preds = %land.lhs.true.332
  %191 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld341 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %191, i32 0, i32 1
  %arrayidx342 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld341, i32 0, i64 1
  %rtx343 = bitcast %union.rtunion_def* %arrayidx342 to %struct.rtx_def**
  %192 = load %struct.rtx_def*, %struct.rtx_def** %rtx343, align 8
  %193 = bitcast %struct.rtx_def* %192 to i32*
  %bf.load344 = load i32, i32* %193, align 8
  %bf.clear345 = and i32 %bf.load344, 65535
  %cmp346 = icmp eq i32 %bf.clear345, 87
  br i1 %cmp346, label %land.lhs.true.348, label %if.end.374

land.lhs.true.348:                                ; preds = %land.lhs.true.340
  %194 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld349 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %194, i32 0, i32 1
  %arrayidx350 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld349, i32 0, i64 1
  %rtx351 = bitcast %union.rtunion_def* %arrayidx350 to %struct.rtx_def**
  %195 = load %struct.rtx_def*, %struct.rtx_def** %rtx351, align 8
  %196 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld352 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %196, i32 0, i32 1
  %arrayidx353 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld352, i32 0, i64 1
  %rtx354 = bitcast %union.rtunion_def* %arrayidx353 to %struct.rtx_def**
  %197 = load %struct.rtx_def*, %struct.rtx_def** %rtx354, align 8
  %fld355 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %197, i32 0, i32 1
  %arrayidx356 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld355, i32 0, i64 1
  %rtx357 = bitcast %union.rtunion_def* %arrayidx356 to %struct.rtx_def**
  %198 = load %struct.rtx_def*, %struct.rtx_def** %rtx357, align 8
  %cmp358 = icmp eq %struct.rtx_def* %195, %198
  br i1 %cmp358, label %if.then.360, label %if.end.374

if.then.360:                                      ; preds = %land.lhs.true.348
  %199 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %200 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld361 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %200, i32 0, i32 1
  %arrayidx362 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld361, i32 0, i64 1
  %rtx363 = bitcast %union.rtunion_def* %arrayidx362 to %struct.rtx_def**
  %201 = load %struct.rtx_def*, %struct.rtx_def** %rtx363, align 8
  %fld364 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %201, i32 0, i32 1
  %arrayidx365 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld364, i32 0, i64 0
  %rtx366 = bitcast %union.rtunion_def* %arrayidx365 to %struct.rtx_def**
  %202 = load %struct.rtx_def*, %struct.rtx_def** %rtx366, align 8
  %203 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld367 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %203, i32 0, i32 1
  %arrayidx368 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld367, i32 0, i64 0
  %rtx369 = bitcast %union.rtunion_def* %arrayidx368 to %struct.rtx_def**
  %204 = load %struct.rtx_def*, %struct.rtx_def** %rtx369, align 8
  %205 = bitcast %struct.rtx_def* %204 to i32*
  %bf.load370 = load i32, i32* %205, align 8
  %bf.lshr371 = lshr i32 %bf.load370, 16
  %bf.clear372 = and i32 %bf.lshr371, 255
  %206 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg.addr, align 8
  %207 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %208 = load %struct.rtx_def**, %struct.rtx_def*** %inc_val.addr, align 8
  %209 = load %struct.rtx_def**, %struct.rtx_def*** %mult_val.addr, align 8
  %210 = load %struct.rtx_def***, %struct.rtx_def**** %location.addr, align 8
  %call373 = call i32 @basic_induction_var(%struct.loop* %199, %struct.rtx_def* %202, i32 %bf.clear372, %struct.rtx_def* %206, %struct.rtx_def* %207, %struct.rtx_def** %208, %struct.rtx_def** %209, %struct.rtx_def*** %210)
  store i32 %call373, i32* %retval
  br label %return

if.end.374:                                       ; preds = %land.lhs.true.348, %land.lhs.true.340, %land.lhs.true.332, %land.lhs.true.324, %land.lhs.true.315, %land.lhs.true.313, %if.end.307
  store i32 0, i32* %retval
  br label %return

sw.default:                                       ; preds = %entry
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %sw.default, %if.end.374, %if.then.360, %sw.bb.245, %if.else.244, %if.then.239, %if.then.219, %cond.end.183, %if.then.82, %sw.bb.68, %if.end.60, %if.then.59, %if.else.55
  %211 = load i32, i32* %retval
  ret i32 %211
}

; Function Attrs: nounwind uwtable
define internal void @record_biv(%struct.loop* %loop, %struct.induction* %v, %struct.rtx_def* %insn, %struct.rtx_def* %dest_reg, %struct.rtx_def* %inc_val, %struct.rtx_def* %mult_val, %struct.rtx_def** %location, i32 %not_every_iteration, i32 %maybe_multiple) #0 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %v.addr = alloca %struct.induction*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  %dest_reg.addr = alloca %struct.rtx_def*, align 8
  %inc_val.addr = alloca %struct.rtx_def*, align 8
  %mult_val.addr = alloca %struct.rtx_def*, align 8
  %location.addr = alloca %struct.rtx_def**, align 8
  %not_every_iteration.addr = alloca i32, align 4
  %maybe_multiple.addr = alloca i32, align 4
  %ivs = alloca %struct.loop_ivs*, align 8
  %bl = alloca %struct.iv_class*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  store %struct.induction* %v, %struct.induction** %v.addr, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  store %struct.rtx_def* %dest_reg, %struct.rtx_def** %dest_reg.addr, align 8
  store %struct.rtx_def* %inc_val, %struct.rtx_def** %inc_val.addr, align 8
  store %struct.rtx_def* %mult_val, %struct.rtx_def** %mult_val.addr, align 8
  store %struct.rtx_def** %location, %struct.rtx_def*** %location.addr, align 8
  store i32 %not_every_iteration, i32* %not_every_iteration.addr, align 4
  store i32 %maybe_multiple, i32* %maybe_multiple.addr, align 4
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %aux = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 22
  %1 = load i8*, i8** %aux, align 8
  %2 = bitcast i8* %1 to %struct.loop_info*
  %ivs1 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %2, i32 0, i32 29
  store %struct.loop_ivs* %ivs1, %struct.loop_ivs** %ivs, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %4 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %insn2 = getelementptr inbounds %struct.induction, %struct.induction* %4, i32 0, i32 0
  store %struct.rtx_def* %3, %struct.rtx_def** %insn2, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg.addr, align 8
  %6 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %src_reg = getelementptr inbounds %struct.induction, %struct.induction* %6, i32 0, i32 2
  store %struct.rtx_def* %5, %struct.rtx_def** %src_reg, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg.addr, align 8
  %8 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %dest_reg3 = getelementptr inbounds %struct.induction, %struct.induction* %8, i32 0, i32 4
  store %struct.rtx_def* %7, %struct.rtx_def** %dest_reg3, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %mult_val.addr, align 8
  %10 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %mult_val4 = getelementptr inbounds %struct.induction, %struct.induction* %10, i32 0, i32 8
  store %struct.rtx_def* %9, %struct.rtx_def** %mult_val4, align 8
  %11 = load %struct.rtx_def*, %struct.rtx_def** %inc_val.addr, align 8
  %12 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %add_val = getelementptr inbounds %struct.induction, %struct.induction* %12, i32 0, i32 9
  store %struct.rtx_def* %11, %struct.rtx_def** %add_val, align 8
  %13 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %ext_dependent = getelementptr inbounds %struct.induction, %struct.induction* %13, i32 0, i32 16
  store %struct.rtx_def* null, %struct.rtx_def** %ext_dependent, align 8
  %14 = load %struct.rtx_def**, %struct.rtx_def*** %location.addr, align 8
  %15 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %location5 = getelementptr inbounds %struct.induction, %struct.induction* %15, i32 0, i32 5
  store %struct.rtx_def** %14, %struct.rtx_def*** %location5, align 8
  %16 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg.addr, align 8
  %17 = bitcast %struct.rtx_def* %16 to i32*
  %bf.load = load i32, i32* %17, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %18 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %mode = getelementptr inbounds %struct.induction, %struct.induction* %18, i32 0, i32 6
  store i32 %bf.clear, i32* %mode, align 4
  %19 = load i32, i32* %not_every_iteration.addr, align 4
  %tobool = icmp ne i32 %19, 0
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  %20 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %always_computable = getelementptr inbounds %struct.induction, %struct.induction* %20, i32 0, i32 13
  %21 = trunc i32 %lnot.ext to i16
  %bf.load6 = load i16, i16* %always_computable, align 4
  %bf.value = and i16 %21, 1
  %bf.shl = shl i16 %bf.value, 3
  %bf.clear7 = and i16 %bf.load6, -9
  %bf.set = or i16 %bf.clear7, %bf.shl
  store i16 %bf.set, i16* %always_computable, align 4
  %bf.result.cast = zext i16 %bf.value to i32
  %22 = load i32, i32* %not_every_iteration.addr, align 4
  %tobool8 = icmp ne i32 %22, 0
  %lnot9 = xor i1 %tobool8, true
  %lnot.ext10 = zext i1 %lnot9 to i32
  %23 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %always_executed = getelementptr inbounds %struct.induction, %struct.induction* %23, i32 0, i32 13
  %24 = trunc i32 %lnot.ext10 to i16
  %bf.load11 = load i16, i16* %always_executed, align 4
  %bf.value12 = and i16 %24, 1
  %bf.shl13 = shl i16 %bf.value12, 4
  %bf.clear14 = and i16 %bf.load11, -17
  %bf.set15 = or i16 %bf.clear14, %bf.shl13
  store i16 %bf.set15, i16* %always_executed, align 4
  %bf.result.cast16 = zext i16 %bf.value12 to i32
  %25 = load i32, i32* %maybe_multiple.addr, align 4
  %26 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %maybe_multiple17 = getelementptr inbounds %struct.induction, %struct.induction* %26, i32 0, i32 13
  %27 = trunc i32 %25 to i16
  %bf.load18 = load i16, i16* %maybe_multiple17, align 4
  %bf.value19 = and i16 %27, 1
  %bf.shl20 = shl i16 %bf.value19, 5
  %bf.clear21 = and i16 %bf.load18, -33
  %bf.set22 = or i16 %bf.clear21, %bf.shl20
  store i16 %bf.set22, i16* %maybe_multiple17, align 4
  %bf.result.cast23 = zext i16 %bf.value19 to i32
  %28 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx to i32*
  %29 = load i32, i32* %rtuint, align 4
  %idxprom = zext i32 %29 to i64
  %30 = load %struct.loop_ivs*, %struct.loop_ivs** %ivs, align 8
  %regs = getelementptr inbounds %struct.loop_ivs, %struct.loop_ivs* %30, i32 0, i32 0
  %31 = load %struct.iv*, %struct.iv** %regs, align 8
  %arrayidx24 = getelementptr inbounds %struct.iv, %struct.iv* %31, i64 %idxprom
  %iv = getelementptr inbounds %struct.iv, %struct.iv* %arrayidx24, i32 0, i32 1
  %class = bitcast %union.anon.0* %iv to %struct.iv_class**
  %32 = load %struct.iv_class*, %struct.iv_class** %class, align 8
  store %struct.iv_class* %32, %struct.iv_class** %bl, align 8
  %33 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %cmp = icmp eq %struct.iv_class* %33, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = call noalias i8* @xmalloc(i64 96)
  %34 = bitcast i8* %call to %struct.iv_class*
  store %struct.iv_class* %34, %struct.iv_class** %bl, align 8
  %35 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg.addr, align 8
  %fld25 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %35, i32 0, i32 1
  %arrayidx26 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld25, i32 0, i64 0
  %rtuint27 = bitcast %union.rtunion_def* %arrayidx26 to i32*
  %36 = load i32, i32* %rtuint27, align 4
  %37 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %regno = getelementptr inbounds %struct.iv_class, %struct.iv_class* %37, i32 0, i32 0
  store i32 %36, i32* %regno, align 4
  %38 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %biv = getelementptr inbounds %struct.iv_class, %struct.iv_class* %38, i32 0, i32 2
  store %struct.induction* null, %struct.induction** %biv, align 8
  %39 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %giv = getelementptr inbounds %struct.iv_class, %struct.iv_class* %39, i32 0, i32 4
  store %struct.induction* null, %struct.induction** %giv, align 8
  %40 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %biv_count = getelementptr inbounds %struct.iv_class, %struct.iv_class* %40, i32 0, i32 1
  store i32 0, i32* %biv_count, align 4
  %41 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %giv_count = getelementptr inbounds %struct.iv_class, %struct.iv_class* %41, i32 0, i32 3
  store i32 0, i32* %giv_count, align 4
  %42 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg.addr, align 8
  %43 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %initial_value = getelementptr inbounds %struct.iv_class, %struct.iv_class* %43, i32 0, i32 6
  store %struct.rtx_def* %42, %struct.rtx_def** %initial_value, align 8
  %44 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %final_value = getelementptr inbounds %struct.iv_class, %struct.iv_class* %44, i32 0, i32 8
  store %struct.rtx_def* null, %struct.rtx_def** %final_value, align 8
  %45 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %init_insn = getelementptr inbounds %struct.iv_class, %struct.iv_class* %45, i32 0, i32 10
  store %struct.rtx_def* null, %struct.rtx_def** %init_insn, align 8
  %46 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %init_set = getelementptr inbounds %struct.iv_class, %struct.iv_class* %46, i32 0, i32 11
  store %struct.rtx_def* null, %struct.rtx_def** %init_set, align 8
  %47 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %initial_test = getelementptr inbounds %struct.iv_class, %struct.iv_class* %47, i32 0, i32 7
  store %struct.rtx_def* null, %struct.rtx_def** %initial_test, align 8
  %48 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %incremented = getelementptr inbounds %struct.iv_class, %struct.iv_class* %48, i32 0, i32 12
  %bf.load28 = load i8, i8* %incremented, align 8
  %bf.clear29 = and i8 %bf.load28, -2
  store i8 %bf.clear29, i8* %incremented, align 8
  %49 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %eliminable = getelementptr inbounds %struct.iv_class, %struct.iv_class* %49, i32 0, i32 12
  %bf.load30 = load i8, i8* %eliminable, align 8
  %bf.clear31 = and i8 %bf.load30, -3
  store i8 %bf.clear31, i8* %eliminable, align 8
  %50 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %nonneg = getelementptr inbounds %struct.iv_class, %struct.iv_class* %50, i32 0, i32 12
  %bf.load32 = load i8, i8* %nonneg, align 8
  %bf.clear33 = and i8 %bf.load32, -5
  store i8 %bf.clear33, i8* %nonneg, align 8
  %51 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %reversed = getelementptr inbounds %struct.iv_class, %struct.iv_class* %51, i32 0, i32 12
  %bf.load34 = load i8, i8* %reversed, align 8
  %bf.clear35 = and i8 %bf.load34, -9
  store i8 %bf.clear35, i8* %reversed, align 8
  %52 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %total_benefit = getelementptr inbounds %struct.iv_class, %struct.iv_class* %52, i32 0, i32 5
  store i32 0, i32* %total_benefit, align 4
  %53 = load %struct.loop_ivs*, %struct.loop_ivs** %ivs, align 8
  %list = getelementptr inbounds %struct.loop_ivs, %struct.loop_ivs* %53, i32 0, i32 2
  %54 = load %struct.iv_class*, %struct.iv_class** %list, align 8
  %55 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %next = getelementptr inbounds %struct.iv_class, %struct.iv_class* %55, i32 0, i32 9
  store %struct.iv_class* %54, %struct.iv_class** %next, align 8
  %56 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %57 = load %struct.loop_ivs*, %struct.loop_ivs** %ivs, align 8
  %list36 = getelementptr inbounds %struct.loop_ivs, %struct.loop_ivs* %57, i32 0, i32 2
  store %struct.iv_class* %56, %struct.iv_class** %list36, align 8
  %58 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %59 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg.addr, align 8
  %fld37 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %59, i32 0, i32 1
  %arrayidx38 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld37, i32 0, i64 0
  %rtuint39 = bitcast %union.rtunion_def* %arrayidx38 to i32*
  %60 = load i32, i32* %rtuint39, align 4
  %idxprom40 = zext i32 %60 to i64
  %61 = load %struct.loop_ivs*, %struct.loop_ivs** %ivs, align 8
  %regs41 = getelementptr inbounds %struct.loop_ivs, %struct.loop_ivs* %61, i32 0, i32 0
  %62 = load %struct.iv*, %struct.iv** %regs41, align 8
  %arrayidx42 = getelementptr inbounds %struct.iv, %struct.iv* %62, i64 %idxprom40
  %iv43 = getelementptr inbounds %struct.iv, %struct.iv* %arrayidx42, i32 0, i32 1
  %class44 = bitcast %union.anon.0* %iv43 to %struct.iv_class**
  store %struct.iv_class* %58, %struct.iv_class** %class44, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %63 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %biv45 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %63, i32 0, i32 2
  %64 = load %struct.induction*, %struct.induction** %biv45, align 8
  %65 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %next_iv = getelementptr inbounds %struct.induction, %struct.induction* %65, i32 0, i32 17
  store %struct.induction* %64, %struct.induction** %next_iv, align 8
  %66 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %67 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %biv46 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %67, i32 0, i32 2
  store %struct.induction* %66, %struct.induction** %biv46, align 8
  %68 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %biv_count47 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %68, i32 0, i32 1
  %69 = load i32, i32* %biv_count47, align 4
  %inc = add nsw i32 %69, 1
  store i32 %inc, i32* %biv_count47, align 4
  %70 = load %struct.rtx_def*, %struct.rtx_def** %mult_val.addr, align 8
  %71 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %cmp48 = icmp eq %struct.rtx_def* %70, %71
  br i1 %cmp48, label %if.then.49, label %if.end.54

if.then.49:                                       ; preds = %if.end
  %72 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %incremented50 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %72, i32 0, i32 12
  %bf.load51 = load i8, i8* %incremented50, align 8
  %bf.clear52 = and i8 %bf.load51, -2
  %bf.set53 = or i8 %bf.clear52, 1
  store i8 %bf.set53, i8* %incremented50, align 8
  br label %if.end.54

if.end.54:                                        ; preds = %if.then.49, %if.end
  %73 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %tobool55 = icmp ne %struct._IO_FILE* %73, null
  br i1 %tobool55, label %if.then.56, label %if.end.57

if.then.56:                                       ; preds = %if.end.54
  %74 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %75 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  call void @loop_biv_dump(%struct.induction* %74, %struct._IO_FILE* %75, i32 0)
  br label %if.end.57

if.end.57:                                        ; preds = %if.then.56, %if.end.54
  ret void
}

declare %struct.rtx_def* @convert_modes(i32, i32, %struct.rtx_def*, i32) #1

; Function Attrs: nounwind uwtable
define internal void @record_initial(%struct.rtx_def* %dest, %struct.rtx_def* %set, i8* %data) #0 {
entry:
  %dest.addr = alloca %struct.rtx_def*, align 8
  %set.addr = alloca %struct.rtx_def*, align 8
  %data.addr = alloca i8*, align 8
  %ivs = alloca %struct.loop_ivs*, align 8
  %bl = alloca %struct.iv_class*, align 8
  store %struct.rtx_def* %dest, %struct.rtx_def** %dest.addr, align 8
  store %struct.rtx_def* %set, %struct.rtx_def** %set.addr, align 8
  store i8* %data, i8** %data.addr, align 8
  %0 = load i8*, i8** %data.addr, align 8
  %1 = bitcast i8* %0 to %struct.loop_ivs*
  store %struct.loop_ivs* %1, %struct.loop_ivs** %ivs, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %dest.addr, align 8
  %3 = bitcast %struct.rtx_def* %2 to i32*
  %bf.load = load i32, i32* %3, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp ne i32 %bf.clear, 61
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %dest.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx to i32*
  %5 = load i32, i32* %rtuint, align 4
  %6 = load %struct.loop_ivs*, %struct.loop_ivs** %ivs, align 8
  %n_regs = getelementptr inbounds %struct.loop_ivs, %struct.loop_ivs* %6, i32 0, i32 1
  %7 = load i32, i32* %n_regs, align 4
  %cmp1 = icmp uge i32 %5, %7
  br i1 %cmp1, label %if.then, label %lor.lhs.false.2

lor.lhs.false.2:                                  ; preds = %lor.lhs.false
  %8 = load %struct.rtx_def*, %struct.rtx_def** %dest.addr, align 8
  %fld3 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1
  %arrayidx4 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3, i32 0, i64 0
  %rtuint5 = bitcast %union.rtunion_def* %arrayidx4 to i32*
  %9 = load i32, i32* %rtuint5, align 4
  %idxprom = zext i32 %9 to i64
  %10 = load %struct.loop_ivs*, %struct.loop_ivs** %ivs, align 8
  %regs = getelementptr inbounds %struct.loop_ivs, %struct.loop_ivs* %10, i32 0, i32 0
  %11 = load %struct.iv*, %struct.iv** %regs, align 8
  %arrayidx6 = getelementptr inbounds %struct.iv, %struct.iv* %11, i64 %idxprom
  %type = getelementptr inbounds %struct.iv, %struct.iv* %arrayidx6, i32 0, i32 0
  %12 = load i32, i32* %type, align 4
  %cmp7 = icmp ne i32 %12, 1
  br i1 %cmp7, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false.2, %lor.lhs.false, %entry
  br label %if.end.17

if.end:                                           ; preds = %lor.lhs.false.2
  %13 = load %struct.rtx_def*, %struct.rtx_def** %dest.addr, align 8
  %fld8 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1
  %arrayidx9 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld8, i32 0, i64 0
  %rtuint10 = bitcast %union.rtunion_def* %arrayidx9 to i32*
  %14 = load i32, i32* %rtuint10, align 4
  %idxprom11 = zext i32 %14 to i64
  %15 = load %struct.loop_ivs*, %struct.loop_ivs** %ivs, align 8
  %regs12 = getelementptr inbounds %struct.loop_ivs, %struct.loop_ivs* %15, i32 0, i32 0
  %16 = load %struct.iv*, %struct.iv** %regs12, align 8
  %arrayidx13 = getelementptr inbounds %struct.iv, %struct.iv* %16, i64 %idxprom11
  %iv = getelementptr inbounds %struct.iv, %struct.iv* %arrayidx13, i32 0, i32 1
  %class = bitcast %union.anon.0* %iv to %struct.iv_class**
  %17 = load %struct.iv_class*, %struct.iv_class** %class, align 8
  store %struct.iv_class* %17, %struct.iv_class** %bl, align 8
  %18 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %init_insn = getelementptr inbounds %struct.iv_class, %struct.iv_class* %18, i32 0, i32 10
  %19 = load %struct.rtx_def*, %struct.rtx_def** %init_insn, align 8
  %cmp14 = icmp eq %struct.rtx_def* %19, null
  br i1 %cmp14, label %if.then.15, label %if.end.17

if.then.15:                                       ; preds = %if.end
  %20 = load %struct.rtx_def*, %struct.rtx_def** @note_insn, align 8
  %21 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %init_insn16 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %21, i32 0, i32 10
  store %struct.rtx_def* %20, %struct.rtx_def** %init_insn16, align 8
  %22 = load %struct.rtx_def*, %struct.rtx_def** %set.addr, align 8
  %23 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %init_set = getelementptr inbounds %struct.iv_class, %struct.iv_class* %23, i32 0, i32 11
  store %struct.rtx_def* %22, %struct.rtx_def** %init_set, align 8
  br label %if.end.17

if.end.17:                                        ; preds = %if.then, %if.then.15, %if.end
  ret void
}

declare %struct.rtx_def* @next_real_insn(%struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define internal i32 @valid_initial_value_p(%struct.rtx_def* %x, %struct.rtx_def* %insn, i32 %call_seen, %struct.rtx_def* %loop_start) #0 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca %struct.rtx_def*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  %call_seen.addr = alloca i32, align 4
  %loop_start.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  store i32 %call_seen, i32* %call_seen.addr, align 4
  store %struct.rtx_def* %loop_start, %struct.rtx_def** %loop_start.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 67
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %3 = bitcast %struct.rtx_def* %2 to i32*
  %bf.load1 = load i32, i32* %3, align 8
  %bf.clear2 = and i32 %bf.load1, 65535
  %cmp3 = icmp eq i32 %bf.clear2, 68
  br i1 %cmp3, label %if.then, label %lor.lhs.false.4

lor.lhs.false.4:                                  ; preds = %lor.lhs.false
  %4 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %5 = bitcast %struct.rtx_def* %4 to i32*
  %bf.load5 = load i32, i32* %5, align 8
  %bf.clear6 = and i32 %bf.load5, 65535
  %cmp7 = icmp eq i32 %bf.clear6, 54
  br i1 %cmp7, label %if.then, label %lor.lhs.false.8

lor.lhs.false.8:                                  ; preds = %lor.lhs.false.4
  %6 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %7 = bitcast %struct.rtx_def* %6 to i32*
  %bf.load9 = load i32, i32* %7, align 8
  %bf.clear10 = and i32 %bf.load9, 65535
  %cmp11 = icmp eq i32 %bf.clear10, 55
  br i1 %cmp11, label %if.then, label %lor.lhs.false.12

lor.lhs.false.12:                                 ; preds = %lor.lhs.false.8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %9 = bitcast %struct.rtx_def* %8 to i32*
  %bf.load13 = load i32, i32* %9, align 8
  %bf.clear14 = and i32 %bf.load13, 65535
  %cmp15 = icmp eq i32 %bf.clear14, 58
  br i1 %cmp15, label %if.then, label %lor.lhs.false.16

lor.lhs.false.16:                                 ; preds = %lor.lhs.false.12
  %10 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %11 = bitcast %struct.rtx_def* %10 to i32*
  %bf.load17 = load i32, i32* %11, align 8
  %bf.clear18 = and i32 %bf.load17, 65535
  %cmp19 = icmp eq i32 %bf.clear18, 134
  br i1 %cmp19, label %if.then, label %lor.lhs.false.20

lor.lhs.false.20:                                 ; preds = %lor.lhs.false.16
  %12 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %13 = bitcast %struct.rtx_def* %12 to i32*
  %bf.load21 = load i32, i32* %13, align 8
  %bf.clear22 = and i32 %bf.load21, 65535
  %cmp23 = icmp eq i32 %bf.clear22, 56
  br i1 %cmp23, label %if.then, label %lor.lhs.false.24

lor.lhs.false.24:                                 ; preds = %lor.lhs.false.20
  %14 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %15 = bitcast %struct.rtx_def* %14 to i32*
  %bf.load25 = load i32, i32* %15, align 8
  %bf.clear26 = and i32 %bf.load25, 65535
  %cmp27 = icmp eq i32 %bf.clear26, 140
  br i1 %cmp27, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false.24, %lor.lhs.false.20, %lor.lhs.false.16, %lor.lhs.false.12, %lor.lhs.false.8, %lor.lhs.false.4, %lor.lhs.false, %entry
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false.24
  %16 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %17 = bitcast %struct.rtx_def* %16 to i32*
  %bf.load28 = load i32, i32* %17, align 8
  %bf.clear29 = and i32 %bf.load28, 65535
  %cmp30 = icmp ne i32 %bf.clear29, 61
  br i1 %cmp30, label %if.then.33, label %lor.lhs.false.31

lor.lhs.false.31:                                 ; preds = %if.end
  %18 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx to i32*
  %19 = load i32, i32* %rtuint, align 4
  %20 = load i32, i32* @max_reg_before_loop, align 4
  %cmp32 = icmp uge i32 %19, %20
  br i1 %cmp32, label %if.then.33, label %if.end.34

if.then.33:                                       ; preds = %lor.lhs.false.31, %if.end
  store i32 0, i32* %retval
  br label %return

if.end.34:                                        ; preds = %lor.lhs.false.31
  %21 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld35 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1
  %arrayidx36 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld35, i32 0, i64 0
  %rtuint37 = bitcast %union.rtunion_def* %arrayidx36 to i32*
  %22 = load i32, i32* %rtuint37, align 4
  %cmp38 = icmp ult i32 %22, 53
  br i1 %cmp38, label %if.then.39, label %if.end.40

if.then.39:                                       ; preds = %if.end.34
  store i32 0, i32* %retval
  br label %return

if.end.40:                                        ; preds = %if.end.34
  %23 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %24 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %25 = load %struct.rtx_def*, %struct.rtx_def** %loop_start.addr, align 8
  %call = call i32 @reg_set_between_p(%struct.rtx_def* %23, %struct.rtx_def* %24, %struct.rtx_def* %25)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then.41, label %if.end.42

if.then.41:                                       ; preds = %if.end.40
  store i32 0, i32* %retval
  br label %return

if.end.42:                                        ; preds = %if.end.40
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.42, %if.then.41, %if.then.39, %if.then.33, %if.then
  %26 = load i32, i32* %retval
  ret i32 %26
}

declare i32 @reg_set_between_p(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #1

declare void @print_simple_rtl(%struct._IO_FILE*, %struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define internal %struct.rtx_def* @check_insn_for_givs(%struct.loop* %loop, %struct.rtx_def* %p, i32 %not_every_iteration, i32 %maybe_multiple) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %p.addr = alloca %struct.rtx_def*, align 8
  %not_every_iteration.addr = alloca i32, align 4
  %maybe_multiple.addr = alloca i32, align 4
  %regs = alloca %struct.loop_regs*, align 8
  %set = alloca %struct.rtx_def*, align 8
  %src_reg = alloca %struct.rtx_def*, align 8
  %dest_reg = alloca %struct.rtx_def*, align 8
  %add_val = alloca %struct.rtx_def*, align 8
  %mult_val = alloca %struct.rtx_def*, align 8
  %ext_val = alloca %struct.rtx_def*, align 8
  %benefit = alloca i32, align 4
  %regnote = alloca %struct.rtx_def*, align 8
  %last_consec_insn = alloca %struct.rtx_def*, align 8
  %v = alloca %struct.induction*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  store %struct.rtx_def* %p, %struct.rtx_def** %p.addr, align 8
  store i32 %not_every_iteration, i32* %not_every_iteration.addr, align 4
  store i32 %maybe_multiple, i32* %maybe_multiple.addr, align 4
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %aux = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 22
  %1 = load i8*, i8** %aux, align 8
  %2 = bitcast i8* %1 to %struct.loop_info*
  %regs1 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %2, i32 0, i32 28
  store %struct.loop_regs* %regs1, %struct.loop_regs** %regs, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %p.addr, align 8
  %4 = bitcast %struct.rtx_def* %3 to i32*
  %bf.load = load i32, i32* %4, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 32
  br i1 %cmp, label %land.lhs.true, label %if.end.100

land.lhs.true:                                    ; preds = %entry
  %5 = load %struct.rtx_def*, %struct.rtx_def** %p.addr, align 8
  %6 = bitcast %struct.rtx_def* %5 to i32*
  %bf.load2 = load i32, i32* %6, align 8
  %bf.clear3 = and i32 %bf.load2, 65535
  %idxprom = sext i32 %bf.clear3 to i64
  %arrayidx = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom
  %7 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %7 to i32
  %cmp4 = icmp eq i32 %conv, 105
  br i1 %cmp4, label %cond.true, label %cond.false.18

cond.true:                                        ; preds = %land.lhs.true
  %8 = load %struct.rtx_def*, %struct.rtx_def** %p.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1
  %arrayidx6 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx6 to %struct.rtx_def**
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %10 = bitcast %struct.rtx_def* %9 to i32*
  %bf.load7 = load i32, i32* %10, align 8
  %bf.clear8 = and i32 %bf.load7, 65535
  %cmp9 = icmp eq i32 %bf.clear8, 47
  br i1 %cmp9, label %cond.true.11, label %cond.false

cond.true.11:                                     ; preds = %cond.true
  %11 = load %struct.rtx_def*, %struct.rtx_def** %p.addr, align 8
  %fld12 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1
  %arrayidx13 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld12, i32 0, i64 3
  %rtx14 = bitcast %union.rtunion_def* %arrayidx13 to %struct.rtx_def**
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rtx14, align 8
  br label %cond.end

cond.false:                                       ; preds = %cond.true
  %13 = load %struct.rtx_def*, %struct.rtx_def** %p.addr, align 8
  %14 = load %struct.rtx_def*, %struct.rtx_def** %p.addr, align 8
  %fld15 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1
  %arrayidx16 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld15, i32 0, i64 3
  %rtx17 = bitcast %union.rtunion_def* %arrayidx16 to %struct.rtx_def**
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rtx17, align 8
  %call = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %13, %struct.rtx_def* %15)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true.11
  %cond = phi %struct.rtx_def* [ %12, %cond.true.11 ], [ %call, %cond.false ]
  br label %cond.end.19

cond.false.18:                                    ; preds = %land.lhs.true
  br label %cond.end.19

cond.end.19:                                      ; preds = %cond.false.18, %cond.end
  %cond20 = phi %struct.rtx_def* [ %cond, %cond.end ], [ null, %cond.false.18 ]
  store %struct.rtx_def* %cond20, %struct.rtx_def** %set, align 8
  %tobool = icmp ne %struct.rtx_def* %cond20, null
  br i1 %tobool, label %land.lhs.true.21, label %if.end.100

land.lhs.true.21:                                 ; preds = %cond.end.19
  %16 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld22 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1
  %arrayidx23 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld22, i32 0, i64 0
  %rtx24 = bitcast %union.rtunion_def* %arrayidx23 to %struct.rtx_def**
  %17 = load %struct.rtx_def*, %struct.rtx_def** %rtx24, align 8
  %18 = bitcast %struct.rtx_def* %17 to i32*
  %bf.load25 = load i32, i32* %18, align 8
  %bf.clear26 = and i32 %bf.load25, 65535
  %cmp27 = icmp eq i32 %bf.clear26, 61
  br i1 %cmp27, label %land.lhs.true.29, label %if.end.100

land.lhs.true.29:                                 ; preds = %land.lhs.true.21
  %19 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld30 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1
  %arrayidx31 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld30, i32 0, i64 0
  %rtx32 = bitcast %union.rtunion_def* %arrayidx31 to %struct.rtx_def**
  %20 = load %struct.rtx_def*, %struct.rtx_def** %rtx32, align 8
  %fld33 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1
  %arrayidx34 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld33, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx34 to i32*
  %21 = load i32, i32* %rtuint, align 4
  %idxprom35 = zext i32 %21 to i64
  %22 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %array = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %22, i32 0, i32 2
  %23 = load %struct.loop_reg*, %struct.loop_reg** %array, align 8
  %arrayidx36 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %23, i64 %idxprom35
  %may_not_optimize = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %arrayidx36, i32 0, i32 3
  %24 = load i8, i8* %may_not_optimize, align 1
  %tobool37 = icmp ne i8 %24, 0
  br i1 %tobool37, label %if.end.100, label %if.then

if.then:                                          ; preds = %land.lhs.true.29
  store %struct.rtx_def* null, %struct.rtx_def** %regnote, align 8
  %25 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld38 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1
  %arrayidx39 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld38, i32 0, i64 0
  %rtx40 = bitcast %union.rtunion_def* %arrayidx39 to %struct.rtx_def**
  %26 = load %struct.rtx_def*, %struct.rtx_def** %rtx40, align 8
  store %struct.rtx_def* %26, %struct.rtx_def** %dest_reg, align 8
  %27 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg, align 8
  %fld41 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1
  %arrayidx42 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld41, i32 0, i64 0
  %rtuint43 = bitcast %union.rtunion_def* %arrayidx42 to i32*
  %28 = load i32, i32* %rtuint43, align 4
  %cmp44 = icmp ult i32 %28, 53
  br i1 %cmp44, label %if.then.46, label %if.end

if.then.46:                                       ; preds = %if.then
  %29 = load %struct.rtx_def*, %struct.rtx_def** %p.addr, align 8
  store %struct.rtx_def* %29, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %if.then
  %30 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %31 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld47 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1
  %arrayidx48 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld47, i32 0, i64 1
  %rtx49 = bitcast %union.rtunion_def* %arrayidx48 to %struct.rtx_def**
  %32 = load %struct.rtx_def*, %struct.rtx_def** %rtx49, align 8
  %call50 = call i32 @general_induction_var(%struct.loop* %30, %struct.rtx_def* %32, %struct.rtx_def** %src_reg, %struct.rtx_def** %add_val, %struct.rtx_def** %mult_val, %struct.rtx_def** %ext_val, i32 0, i32* %benefit, i32 0)
  %tobool51 = icmp ne i32 %call50, 0
  br i1 %tobool51, label %land.lhs.true.60, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %33 = load %struct.rtx_def*, %struct.rtx_def** %p.addr, align 8
  %call52 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %33, i32 4, %struct.rtx_def* null)
  store %struct.rtx_def* %call52, %struct.rtx_def** %regnote, align 8
  %tobool53 = icmp ne %struct.rtx_def* %call52, null
  br i1 %tobool53, label %land.lhs.true.54, label %if.end.99

land.lhs.true.54:                                 ; preds = %lor.lhs.false
  %34 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %35 = load %struct.rtx_def*, %struct.rtx_def** %regnote, align 8
  %fld55 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %35, i32 0, i32 1
  %arrayidx56 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld55, i32 0, i64 0
  %rtx57 = bitcast %union.rtunion_def* %arrayidx56 to %struct.rtx_def**
  %36 = load %struct.rtx_def*, %struct.rtx_def** %rtx57, align 8
  %call58 = call i32 @general_induction_var(%struct.loop* %34, %struct.rtx_def* %36, %struct.rtx_def** %src_reg, %struct.rtx_def** %add_val, %struct.rtx_def** %mult_val, %struct.rtx_def** %ext_val, i32 0, i32* %benefit, i32 0)
  %tobool59 = icmp ne i32 %call58, 0
  br i1 %tobool59, label %land.lhs.true.60, label %if.end.99

land.lhs.true.60:                                 ; preds = %land.lhs.true.54, %if.end
  %37 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg, align 8
  %fld61 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %37, i32 0, i32 1
  %arrayidx62 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld61, i32 0, i64 0
  %rtuint63 = bitcast %union.rtunion_def* %arrayidx62 to i32*
  %38 = load i32, i32* %rtuint63, align 4
  %39 = load i32, i32* @max_reg_before_loop, align 4
  %cmp64 = icmp ult i32 %38, %39
  br i1 %cmp64, label %land.lhs.true.66, label %if.end.99

land.lhs.true.66:                                 ; preds = %land.lhs.true.60
  %40 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg, align 8
  %41 = load %struct.rtx_def*, %struct.rtx_def** %src_reg, align 8
  %cmp67 = icmp ne %struct.rtx_def* %40, %41
  br i1 %cmp67, label %land.lhs.true.69, label %if.end.99

land.lhs.true.69:                                 ; preds = %land.lhs.true.66
  %42 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg, align 8
  %fld70 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %42, i32 0, i32 1
  %arrayidx71 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld70, i32 0, i64 0
  %rtuint72 = bitcast %union.rtunion_def* %arrayidx71 to i32*
  %43 = load i32, i32* %rtuint72, align 4
  %idxprom73 = zext i32 %43 to i64
  %44 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %array74 = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %44, i32 0, i32 2
  %45 = load %struct.loop_reg*, %struct.loop_reg** %array74, align 8
  %arrayidx75 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %45, i64 %idxprom73
  %n_times_set = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %arrayidx75, i32 0, i32 1
  %46 = load i32, i32* %n_times_set, align 4
  %cmp76 = icmp eq i32 %46, 1
  br i1 %cmp76, label %if.then.81, label %lor.lhs.false.78

lor.lhs.false.78:                                 ; preds = %land.lhs.true.69
  %47 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %48 = load i32, i32* %benefit, align 4
  %49 = load %struct.rtx_def*, %struct.rtx_def** %p.addr, align 8
  %50 = load %struct.rtx_def*, %struct.rtx_def** %src_reg, align 8
  %51 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg, align 8
  %call79 = call i32 @consec_sets_giv(%struct.loop* %47, i32 %48, %struct.rtx_def* %49, %struct.rtx_def* %50, %struct.rtx_def* %51, %struct.rtx_def** %add_val, %struct.rtx_def** %mult_val, %struct.rtx_def** %ext_val, %struct.rtx_def** %last_consec_insn)
  store i32 %call79, i32* %benefit, align 4
  %tobool80 = icmp ne i32 %call79, 0
  br i1 %tobool80, label %if.then.81, label %if.end.99

if.then.81:                                       ; preds = %lor.lhs.false.78, %land.lhs.true.69
  %call82 = call noalias i8* @xmalloc(i64 168)
  %52 = bitcast i8* %call82 to %struct.induction*
  store %struct.induction* %52, %struct.induction** %v, align 8
  %53 = load %struct.rtx_def*, %struct.rtx_def** %p.addr, align 8
  %call83 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %53, i32 6, %struct.rtx_def* null)
  %tobool84 = icmp ne %struct.rtx_def* %call83, null
  br i1 %tobool84, label %if.then.85, label %if.end.87

if.then.85:                                       ; preds = %if.then.81
  %54 = load %struct.rtx_def*, %struct.rtx_def** %p.addr, align 8
  %call86 = call i32 @libcall_benefit(%struct.rtx_def* %54)
  %55 = load i32, i32* %benefit, align 4
  %add = add nsw i32 %55, %call86
  store i32 %add, i32* %benefit, align 4
  br label %if.end.87

if.end.87:                                        ; preds = %if.then.85, %if.then.81
  %56 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg, align 8
  %fld88 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %56, i32 0, i32 1
  %arrayidx89 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld88, i32 0, i64 0
  %rtuint90 = bitcast %union.rtunion_def* %arrayidx89 to i32*
  %57 = load i32, i32* %rtuint90, align 4
  %idxprom91 = zext i32 %57 to i64
  %58 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %array92 = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %58, i32 0, i32 2
  %59 = load %struct.loop_reg*, %struct.loop_reg** %array92, align 8
  %arrayidx93 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %59, i64 %idxprom91
  %n_times_set94 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %arrayidx93, i32 0, i32 1
  %60 = load i32, i32* %n_times_set94, align 4
  %cmp95 = icmp ne i32 %60, 1
  br i1 %cmp95, label %if.then.97, label %if.end.98

if.then.97:                                       ; preds = %if.end.87
  %61 = load %struct.rtx_def*, %struct.rtx_def** %last_consec_insn, align 8
  store %struct.rtx_def* %61, %struct.rtx_def** %p.addr, align 8
  br label %if.end.98

if.end.98:                                        ; preds = %if.then.97, %if.end.87
  %62 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %63 = load %struct.induction*, %struct.induction** %v, align 8
  %64 = load %struct.rtx_def*, %struct.rtx_def** %p.addr, align 8
  %65 = load %struct.rtx_def*, %struct.rtx_def** %src_reg, align 8
  %66 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg, align 8
  %67 = load %struct.rtx_def*, %struct.rtx_def** %mult_val, align 8
  %68 = load %struct.rtx_def*, %struct.rtx_def** %add_val, align 8
  %69 = load %struct.rtx_def*, %struct.rtx_def** %ext_val, align 8
  %70 = load i32, i32* %benefit, align 4
  %71 = load i32, i32* %not_every_iteration.addr, align 4
  %72 = load i32, i32* %maybe_multiple.addr, align 4
  call void @record_giv(%struct.loop* %62, %struct.induction* %63, %struct.rtx_def* %64, %struct.rtx_def* %65, %struct.rtx_def* %66, %struct.rtx_def* %67, %struct.rtx_def* %68, %struct.rtx_def* %69, i32 %70, i32 1, i32 %71, i32 %72, %struct.rtx_def** null)
  br label %if.end.99

if.end.99:                                        ; preds = %if.end.98, %lor.lhs.false.78, %land.lhs.true.66, %land.lhs.true.60, %land.lhs.true.54, %lor.lhs.false
  br label %if.end.100

if.end.100:                                       ; preds = %if.end.99, %land.lhs.true.29, %land.lhs.true.21, %cond.end.19, %entry
  %73 = load %struct.rtx_def*, %struct.rtx_def** %p.addr, align 8
  %74 = bitcast %struct.rtx_def* %73 to i32*
  %bf.load101 = load i32, i32* %74, align 8
  %bf.clear102 = and i32 %bf.load101, 65535
  %cmp103 = icmp eq i32 %bf.clear102, 32
  br i1 %cmp103, label %if.then.105, label %if.end.109

if.then.105:                                      ; preds = %if.end.100
  %75 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %76 = load %struct.rtx_def*, %struct.rtx_def** %p.addr, align 8
  %fld106 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %76, i32 0, i32 1
  %arrayidx107 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld106, i32 0, i64 3
  %rtx108 = bitcast %union.rtunion_def* %arrayidx107 to %struct.rtx_def**
  %77 = load %struct.rtx_def*, %struct.rtx_def** %rtx108, align 8
  %78 = load %struct.rtx_def*, %struct.rtx_def** %p.addr, align 8
  %79 = load i32, i32* %not_every_iteration.addr, align 4
  %80 = load i32, i32* %maybe_multiple.addr, align 4
  call void @find_mem_givs(%struct.loop* %75, %struct.rtx_def* %77, %struct.rtx_def* %78, i32 %79, i32 %80)
  br label %if.end.109

if.end.109:                                       ; preds = %if.then.105, %if.end.100
  %81 = load %struct.rtx_def*, %struct.rtx_def** %p.addr, align 8
  %82 = bitcast %struct.rtx_def* %81 to i32*
  %bf.load110 = load i32, i32* %82, align 8
  %bf.clear111 = and i32 %bf.load110, 65535
  %cmp112 = icmp eq i32 %bf.clear111, 32
  br i1 %cmp112, label %if.then.124, label %lor.lhs.false.114

lor.lhs.false.114:                                ; preds = %if.end.109
  %83 = load %struct.rtx_def*, %struct.rtx_def** %p.addr, align 8
  %84 = bitcast %struct.rtx_def* %83 to i32*
  %bf.load115 = load i32, i32* %84, align 8
  %bf.clear116 = and i32 %bf.load115, 65535
  %cmp117 = icmp eq i32 %bf.clear116, 33
  br i1 %cmp117, label %if.then.124, label %lor.lhs.false.119

lor.lhs.false.119:                                ; preds = %lor.lhs.false.114
  %85 = load %struct.rtx_def*, %struct.rtx_def** %p.addr, align 8
  %86 = bitcast %struct.rtx_def* %85 to i32*
  %bf.load120 = load i32, i32* %86, align 8
  %bf.clear121 = and i32 %bf.load120, 65535
  %cmp122 = icmp eq i32 %bf.clear121, 36
  br i1 %cmp122, label %if.then.124, label %if.end.125

if.then.124:                                      ; preds = %lor.lhs.false.119, %lor.lhs.false.114, %if.end.109
  %87 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %88 = load %struct.rtx_def*, %struct.rtx_def** %p.addr, align 8
  call void @update_giv_derive(%struct.loop* %87, %struct.rtx_def* %88)
  br label %if.end.125

if.end.125:                                       ; preds = %if.then.124, %lor.lhs.false.119
  %89 = load %struct.rtx_def*, %struct.rtx_def** %p.addr, align 8
  store %struct.rtx_def* %89, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end.125, %if.then.46
  %90 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %90
}

; Function Attrs: nounwind uwtable
define internal i32 @general_induction_var(%struct.loop* %loop, %struct.rtx_def* %x, %struct.rtx_def** %src_reg, %struct.rtx_def** %add_val, %struct.rtx_def** %mult_val, %struct.rtx_def** %ext_val, i32 %is_addr, i32* %pbenefit, i32 %addr_mode) #0 {
entry:
  %retval = alloca i32, align 4
  %loop.addr = alloca %struct.loop*, align 8
  %x.addr = alloca %struct.rtx_def*, align 8
  %src_reg.addr = alloca %struct.rtx_def**, align 8
  %add_val.addr = alloca %struct.rtx_def**, align 8
  %mult_val.addr = alloca %struct.rtx_def**, align 8
  %ext_val.addr = alloca %struct.rtx_def**, align 8
  %is_addr.addr = alloca i32, align 4
  %pbenefit.addr = alloca i32*, align 8
  %addr_mode.addr = alloca i32, align 4
  %ivs = alloca %struct.loop_ivs*, align 8
  %orig_x = alloca %struct.rtx_def*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  store %struct.rtx_def** %src_reg, %struct.rtx_def*** %src_reg.addr, align 8
  store %struct.rtx_def** %add_val, %struct.rtx_def*** %add_val.addr, align 8
  store %struct.rtx_def** %mult_val, %struct.rtx_def*** %mult_val.addr, align 8
  store %struct.rtx_def** %ext_val, %struct.rtx_def*** %ext_val.addr, align 8
  store i32 %is_addr, i32* %is_addr.addr, align 4
  store i32* %pbenefit, i32** %pbenefit.addr, align 8
  store i32 %addr_mode, i32* %addr_mode.addr, align 4
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %aux = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 22
  %1 = load i8*, i8** %aux, align 8
  %2 = bitcast i8* %1 to %struct.loop_info*
  %ivs1 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %2, i32 0, i32 29
  store %struct.loop_ivs* %ivs1, %struct.loop_ivs** %ivs, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %orig_x, align 8
  %4 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %call = call i32 @loop_invariant_p(%struct.loop* %4, %struct.rtx_def* %5)
  %cmp = icmp eq i32 %call, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %6 = load i32*, i32** %pbenefit.addr, align 8
  store i32 0, i32* %6, align 4
  %7 = load %struct.rtx_def**, %struct.rtx_def*** %ext_val.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %7, align 8
  %8 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %10 = load %struct.rtx_def**, %struct.rtx_def*** %ext_val.addr, align 8
  %11 = load i32*, i32** %pbenefit.addr, align 8
  %call2 = call %struct.rtx_def* @simplify_giv_expr(%struct.loop* %8, %struct.rtx_def* %9, %struct.rtx_def** %10, i32* %11)
  store %struct.rtx_def* %call2, %struct.rtx_def** %x.addr, align 8
  %12 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %cmp3 = icmp eq %struct.rtx_def* %12, null
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

if.end.5:                                         ; preds = %if.end
  %13 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %14 = bitcast %struct.rtx_def* %13 to i32*
  %bf.load = load i32, i32* %14, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %sw.default [
    i32 48, label %sw.bb
    i32 54, label %sw.bb
    i32 61, label %sw.bb.6
    i32 75, label %sw.bb.7
    i32 78, label %sw.bb.31
  ]

sw.bb:                                            ; preds = %if.end.5, %if.end.5
  %15 = load %struct.loop_ivs*, %struct.loop_ivs** %ivs, align 8
  %list = getelementptr inbounds %struct.loop_ivs, %struct.loop_ivs* %15, i32 0, i32 2
  %16 = load %struct.iv_class*, %struct.iv_class** %list, align 8
  %biv = getelementptr inbounds %struct.iv_class, %struct.iv_class* %16, i32 0, i32 2
  %17 = load %struct.induction*, %struct.induction** %biv, align 8
  %dest_reg = getelementptr inbounds %struct.induction, %struct.induction* %17, i32 0, i32 4
  %18 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg, align 8
  %19 = load %struct.rtx_def**, %struct.rtx_def*** %src_reg.addr, align 8
  store %struct.rtx_def* %18, %struct.rtx_def** %19, align 8
  %20 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %21 = load %struct.rtx_def**, %struct.rtx_def*** %mult_val.addr, align 8
  store %struct.rtx_def* %20, %struct.rtx_def** %21, align 8
  %22 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %23 = load %struct.rtx_def**, %struct.rtx_def*** %add_val.addr, align 8
  store %struct.rtx_def* %22, %struct.rtx_def** %23, align 8
  br label %sw.epilog

sw.bb.6:                                          ; preds = %if.end.5
  %24 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %25 = load %struct.rtx_def**, %struct.rtx_def*** %src_reg.addr, align 8
  store %struct.rtx_def* %24, %struct.rtx_def** %25, align 8
  %26 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %27 = load %struct.rtx_def**, %struct.rtx_def*** %mult_val.addr, align 8
  store %struct.rtx_def* %26, %struct.rtx_def** %27, align 8
  %28 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %29 = load %struct.rtx_def**, %struct.rtx_def*** %add_val.addr, align 8
  store %struct.rtx_def* %28, %struct.rtx_def** %29, align 8
  br label %sw.epilog

sw.bb.7:                                          ; preds = %if.end.5
  %30 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %30, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %31 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %32 = bitcast %struct.rtx_def* %31 to i32*
  %bf.load8 = load i32, i32* %32, align 8
  %bf.clear9 = and i32 %bf.load8, 65535
  %cmp10 = icmp eq i32 %bf.clear9, 78
  br i1 %cmp10, label %if.then.11, label %if.else

if.then.11:                                       ; preds = %sw.bb.7
  %33 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld12 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1
  %arrayidx13 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld12, i32 0, i64 0
  %rtx14 = bitcast %union.rtunion_def* %arrayidx13 to %struct.rtx_def**
  %34 = load %struct.rtx_def*, %struct.rtx_def** %rtx14, align 8
  %fld15 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %34, i32 0, i32 1
  %arrayidx16 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld15, i32 0, i64 0
  %rtx17 = bitcast %union.rtunion_def* %arrayidx16 to %struct.rtx_def**
  %35 = load %struct.rtx_def*, %struct.rtx_def** %rtx17, align 8
  %36 = load %struct.rtx_def**, %struct.rtx_def*** %src_reg.addr, align 8
  store %struct.rtx_def* %35, %struct.rtx_def** %36, align 8
  %37 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld18 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %37, i32 0, i32 1
  %arrayidx19 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld18, i32 0, i64 0
  %rtx20 = bitcast %union.rtunion_def* %arrayidx19 to %struct.rtx_def**
  %38 = load %struct.rtx_def*, %struct.rtx_def** %rtx20, align 8
  %fld21 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %38, i32 0, i32 1
  %arrayidx22 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld21, i32 0, i64 1
  %rtx23 = bitcast %union.rtunion_def* %arrayidx22 to %struct.rtx_def**
  %39 = load %struct.rtx_def*, %struct.rtx_def** %rtx23, align 8
  %40 = load %struct.rtx_def**, %struct.rtx_def*** %mult_val.addr, align 8
  store %struct.rtx_def* %39, %struct.rtx_def** %40, align 8
  br label %if.end.27

if.else:                                          ; preds = %sw.bb.7
  %41 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld24 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %41, i32 0, i32 1
  %arrayidx25 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld24, i32 0, i64 0
  %rtx26 = bitcast %union.rtunion_def* %arrayidx25 to %struct.rtx_def**
  %42 = load %struct.rtx_def*, %struct.rtx_def** %rtx26, align 8
  %43 = load %struct.rtx_def**, %struct.rtx_def*** %src_reg.addr, align 8
  store %struct.rtx_def* %42, %struct.rtx_def** %43, align 8
  %44 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %45 = load %struct.rtx_def**, %struct.rtx_def*** %mult_val.addr, align 8
  store %struct.rtx_def* %44, %struct.rtx_def** %45, align 8
  br label %if.end.27

if.end.27:                                        ; preds = %if.else, %if.then.11
  %46 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld28 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %46, i32 0, i32 1
  %arrayidx29 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld28, i32 0, i64 1
  %rtx30 = bitcast %union.rtunion_def* %arrayidx29 to %struct.rtx_def**
  %47 = load %struct.rtx_def*, %struct.rtx_def** %rtx30, align 8
  %48 = load %struct.rtx_def**, %struct.rtx_def*** %add_val.addr, align 8
  store %struct.rtx_def* %47, %struct.rtx_def** %48, align 8
  br label %sw.epilog

sw.bb.31:                                         ; preds = %if.end.5
  %49 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld32 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %49, i32 0, i32 1
  %arrayidx33 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld32, i32 0, i64 0
  %rtx34 = bitcast %union.rtunion_def* %arrayidx33 to %struct.rtx_def**
  %50 = load %struct.rtx_def*, %struct.rtx_def** %rtx34, align 8
  %51 = load %struct.rtx_def**, %struct.rtx_def*** %src_reg.addr, align 8
  store %struct.rtx_def* %50, %struct.rtx_def** %51, align 8
  %52 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld35 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %52, i32 0, i32 1
  %arrayidx36 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld35, i32 0, i64 1
  %rtx37 = bitcast %union.rtunion_def* %arrayidx36 to %struct.rtx_def**
  %53 = load %struct.rtx_def*, %struct.rtx_def** %rtx37, align 8
  %54 = load %struct.rtx_def**, %struct.rtx_def*** %mult_val.addr, align 8
  store %struct.rtx_def* %53, %struct.rtx_def** %54, align 8
  %55 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %56 = load %struct.rtx_def**, %struct.rtx_def*** %add_val.addr, align 8
  store %struct.rtx_def* %55, %struct.rtx_def** %56, align 8
  br label %sw.epilog

sw.default:                                       ; preds = %if.end.5
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 6350, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @__FUNCTION__.general_induction_var, i32 0, i32 0)) #6
  unreachable

sw.epilog:                                        ; preds = %sw.bb.31, %if.end.27, %sw.bb.6, %sw.bb
  %57 = load %struct.rtx_def**, %struct.rtx_def*** %add_val.addr, align 8
  %58 = load %struct.rtx_def*, %struct.rtx_def** %57, align 8
  %59 = bitcast %struct.rtx_def* %58 to i32*
  %bf.load38 = load i32, i32* %59, align 8
  %bf.clear39 = and i32 %bf.load38, 65535
  %cmp40 = icmp eq i32 %bf.clear39, 48
  br i1 %cmp40, label %if.then.41, label %if.end.45

if.then.41:                                       ; preds = %sw.epilog
  %60 = load %struct.rtx_def**, %struct.rtx_def*** %add_val.addr, align 8
  %61 = load %struct.rtx_def*, %struct.rtx_def** %60, align 8
  %fld42 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %61, i32 0, i32 1
  %arrayidx43 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld42, i32 0, i64 0
  %rtx44 = bitcast %union.rtunion_def* %arrayidx43 to %struct.rtx_def**
  %62 = load %struct.rtx_def*, %struct.rtx_def** %rtx44, align 8
  %63 = load %struct.rtx_def**, %struct.rtx_def*** %add_val.addr, align 8
  store %struct.rtx_def* %62, %struct.rtx_def** %63, align 8
  br label %if.end.45

if.end.45:                                        ; preds = %if.then.41, %sw.epilog
  %64 = load %struct.rtx_def**, %struct.rtx_def*** %mult_val.addr, align 8
  %65 = load %struct.rtx_def*, %struct.rtx_def** %64, align 8
  %66 = bitcast %struct.rtx_def* %65 to i32*
  %bf.load46 = load i32, i32* %66, align 8
  %bf.clear47 = and i32 %bf.load46, 65535
  %cmp48 = icmp eq i32 %bf.clear47, 48
  br i1 %cmp48, label %if.then.49, label %if.end.53

if.then.49:                                       ; preds = %if.end.45
  %67 = load %struct.rtx_def**, %struct.rtx_def*** %mult_val.addr, align 8
  %68 = load %struct.rtx_def*, %struct.rtx_def** %67, align 8
  %fld50 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %68, i32 0, i32 1
  %arrayidx51 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld50, i32 0, i64 0
  %rtx52 = bitcast %union.rtunion_def* %arrayidx51 to %struct.rtx_def**
  %69 = load %struct.rtx_def*, %struct.rtx_def** %rtx52, align 8
  %70 = load %struct.rtx_def**, %struct.rtx_def*** %mult_val.addr, align 8
  store %struct.rtx_def* %69, %struct.rtx_def** %70, align 8
  br label %if.end.53

if.end.53:                                        ; preds = %if.then.49, %if.end.45
  %71 = load i32, i32* %is_addr.addr, align 4
  %tobool = icmp ne i32 %71, 0
  br i1 %tobool, label %if.then.54, label %if.else.56

if.then.54:                                       ; preds = %if.end.53
  %72 = load %struct.rtx_def*, %struct.rtx_def** %orig_x, align 8
  %73 = load i32, i32* %addr_mode.addr, align 4
  %call55 = call i32 @address_cost(%struct.rtx_def* %72, i32 %73)
  %74 = load i32, i32* @reg_address_cost, align 4
  %sub = sub nsw i32 %call55, %74
  %75 = load i32*, i32** %pbenefit.addr, align 8
  %76 = load i32, i32* %75, align 4
  %add = add nsw i32 %76, %sub
  store i32 %add, i32* %75, align 4
  br label %if.end.59

if.else.56:                                       ; preds = %if.end.53
  %77 = load %struct.rtx_def*, %struct.rtx_def** %orig_x, align 8
  %call57 = call i32 @rtx_cost(%struct.rtx_def* %77, i32 47)
  %78 = load i32*, i32** %pbenefit.addr, align 8
  %79 = load i32, i32* %78, align 4
  %add58 = add nsw i32 %79, %call57
  store i32 %add58, i32* %78, align 4
  br label %if.end.59

if.end.59:                                        ; preds = %if.else.56, %if.then.54
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.59, %if.then.4, %if.then
  %80 = load i32, i32* %retval
  ret i32 %80
}

; Function Attrs: nounwind uwtable
define internal i32 @consec_sets_giv(%struct.loop* %loop, i32 %first_benefit, %struct.rtx_def* %p, %struct.rtx_def* %src_reg, %struct.rtx_def* %dest_reg, %struct.rtx_def** %add_val, %struct.rtx_def** %mult_val, %struct.rtx_def** %ext_val, %struct.rtx_def** %last_consec_insn) #0 {
entry:
  %retval = alloca i32, align 4
  %loop.addr = alloca %struct.loop*, align 8
  %first_benefit.addr = alloca i32, align 4
  %p.addr = alloca %struct.rtx_def*, align 8
  %src_reg.addr = alloca %struct.rtx_def*, align 8
  %dest_reg.addr = alloca %struct.rtx_def*, align 8
  %add_val.addr = alloca %struct.rtx_def**, align 8
  %mult_val.addr = alloca %struct.rtx_def**, align 8
  %ext_val.addr = alloca %struct.rtx_def**, align 8
  %last_consec_insn.addr = alloca %struct.rtx_def**, align 8
  %ivs = alloca %struct.loop_ivs*, align 8
  %regs = alloca %struct.loop_regs*, align 8
  %count = alloca i32, align 4
  %code = alloca i32, align 4
  %benefit = alloca i32, align 4
  %temp = alloca %struct.rtx_def*, align 8
  %set = alloca %struct.rtx_def*, align 8
  %v = alloca %struct.induction*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  store i32 %first_benefit, i32* %first_benefit.addr, align 4
  store %struct.rtx_def* %p, %struct.rtx_def** %p.addr, align 8
  store %struct.rtx_def* %src_reg, %struct.rtx_def** %src_reg.addr, align 8
  store %struct.rtx_def* %dest_reg, %struct.rtx_def** %dest_reg.addr, align 8
  store %struct.rtx_def** %add_val, %struct.rtx_def*** %add_val.addr, align 8
  store %struct.rtx_def** %mult_val, %struct.rtx_def*** %mult_val.addr, align 8
  store %struct.rtx_def** %ext_val, %struct.rtx_def*** %ext_val.addr, align 8
  store %struct.rtx_def** %last_consec_insn, %struct.rtx_def*** %last_consec_insn.addr, align 8
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %aux = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 22
  %1 = load i8*, i8** %aux, align 8
  %2 = bitcast i8* %1 to %struct.loop_info*
  %ivs1 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %2, i32 0, i32 29
  store %struct.loop_ivs* %ivs1, %struct.loop_ivs** %ivs, align 8
  %3 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %aux2 = getelementptr inbounds %struct.loop, %struct.loop* %3, i32 0, i32 22
  %4 = load i8*, i8** %aux2, align 8
  %5 = bitcast i8* %4 to %struct.loop_info*
  %regs3 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %5, i32 0, i32 28
  store %struct.loop_regs* %regs3, %struct.loop_regs** %regs, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx to i32*
  %7 = load i32, i32* %rtuint, align 4
  %idxprom = zext i32 %7 to i64
  %8 = load %struct.loop_ivs*, %struct.loop_ivs** %ivs, align 8
  %regs4 = getelementptr inbounds %struct.loop_ivs, %struct.loop_ivs* %8, i32 0, i32 0
  %9 = load %struct.iv*, %struct.iv** %regs4, align 8
  %arrayidx5 = getelementptr inbounds %struct.iv, %struct.iv* %9, i64 %idxprom
  %type = getelementptr inbounds %struct.iv, %struct.iv* %arrayidx5, i32 0, i32 0
  %10 = load i32, i32* %type, align 4
  %cmp = icmp ne i32 %10, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %11 = alloca i8, i64 168
  %12 = bitcast i8* %11 to %struct.induction*
  store %struct.induction* %12, %struct.induction** %v, align 8
  %13 = load %struct.rtx_def*, %struct.rtx_def** %src_reg.addr, align 8
  %14 = load %struct.induction*, %struct.induction** %v, align 8
  %src_reg6 = getelementptr inbounds %struct.induction, %struct.induction* %14, i32 0, i32 2
  store %struct.rtx_def* %13, %struct.rtx_def** %src_reg6, align 8
  %15 = load %struct.rtx_def**, %struct.rtx_def*** %mult_val.addr, align 8
  %16 = load %struct.rtx_def*, %struct.rtx_def** %15, align 8
  %17 = load %struct.induction*, %struct.induction** %v, align 8
  %mult_val7 = getelementptr inbounds %struct.induction, %struct.induction* %17, i32 0, i32 8
  store %struct.rtx_def* %16, %struct.rtx_def** %mult_val7, align 8
  %18 = load %struct.rtx_def**, %struct.rtx_def*** %add_val.addr, align 8
  %19 = load %struct.rtx_def*, %struct.rtx_def** %18, align 8
  %20 = load %struct.induction*, %struct.induction** %v, align 8
  %add_val8 = getelementptr inbounds %struct.induction, %struct.induction* %20, i32 0, i32 9
  store %struct.rtx_def* %19, %struct.rtx_def** %add_val8, align 8
  %21 = load i32, i32* %first_benefit.addr, align 4
  %22 = load %struct.induction*, %struct.induction** %v, align 8
  %benefit9 = getelementptr inbounds %struct.induction, %struct.induction* %22, i32 0, i32 10
  store i32 %21, i32* %benefit9, align 4
  %23 = load %struct.induction*, %struct.induction** %v, align 8
  %cant_derive = getelementptr inbounds %struct.induction, %struct.induction* %23, i32 0, i32 13
  %bf.load = load i16, i16* %cant_derive, align 4
  %bf.clear = and i16 %bf.load, -65
  store i16 %bf.clear, i16* %cant_derive, align 4
  %24 = load %struct.induction*, %struct.induction** %v, align 8
  %derive_adjustment = getelementptr inbounds %struct.induction, %struct.induction* %24, i32 0, i32 15
  store %struct.rtx_def* null, %struct.rtx_def** %derive_adjustment, align 8
  %25 = load %struct.induction*, %struct.induction** %v, align 8
  %ext_dependent = getelementptr inbounds %struct.induction, %struct.induction* %25, i32 0, i32 16
  store %struct.rtx_def* null, %struct.rtx_def** %ext_dependent, align 8
  %26 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg.addr, align 8
  %fld10 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %26, i32 0, i32 1
  %arrayidx11 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld10, i32 0, i64 0
  %rtuint12 = bitcast %union.rtunion_def* %arrayidx11 to i32*
  %27 = load i32, i32* %rtuint12, align 4
  %idxprom13 = zext i32 %27 to i64
  %28 = load %struct.loop_ivs*, %struct.loop_ivs** %ivs, align 8
  %regs14 = getelementptr inbounds %struct.loop_ivs, %struct.loop_ivs* %28, i32 0, i32 0
  %29 = load %struct.iv*, %struct.iv** %regs14, align 8
  %arrayidx15 = getelementptr inbounds %struct.iv, %struct.iv* %29, i64 %idxprom13
  %type16 = getelementptr inbounds %struct.iv, %struct.iv* %arrayidx15, i32 0, i32 0
  store i32 3, i32* %type16, align 4
  %30 = load %struct.induction*, %struct.induction** %v, align 8
  %31 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg.addr, align 8
  %fld17 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1
  %arrayidx18 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld17, i32 0, i64 0
  %rtuint19 = bitcast %union.rtunion_def* %arrayidx18 to i32*
  %32 = load i32, i32* %rtuint19, align 4
  %idxprom20 = zext i32 %32 to i64
  %33 = load %struct.loop_ivs*, %struct.loop_ivs** %ivs, align 8
  %regs21 = getelementptr inbounds %struct.loop_ivs, %struct.loop_ivs* %33, i32 0, i32 0
  %34 = load %struct.iv*, %struct.iv** %regs21, align 8
  %arrayidx22 = getelementptr inbounds %struct.iv, %struct.iv* %34, i64 %idxprom20
  %iv = getelementptr inbounds %struct.iv, %struct.iv* %arrayidx22, i32 0, i32 1
  %info = bitcast %union.anon.0* %iv to %struct.induction**
  store %struct.induction* %30, %struct.induction** %info, align 8
  %35 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg.addr, align 8
  %fld23 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %35, i32 0, i32 1
  %arrayidx24 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld23, i32 0, i64 0
  %rtuint25 = bitcast %union.rtunion_def* %arrayidx24 to i32*
  %36 = load i32, i32* %rtuint25, align 4
  %idxprom26 = zext i32 %36 to i64
  %37 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %array = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %37, i32 0, i32 2
  %38 = load %struct.loop_reg*, %struct.loop_reg** %array, align 8
  %arrayidx27 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %38, i64 %idxprom26
  %n_times_set = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %arrayidx27, i32 0, i32 1
  %39 = load i32, i32* %n_times_set, align 4
  %sub = sub nsw i32 %39, 1
  store i32 %sub, i32* %count, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end.224, %if.then.214, %if.end
  %40 = load i32, i32* %count, align 4
  %cmp28 = icmp sgt i32 %40, 0
  br i1 %cmp28, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %41 = load %struct.rtx_def*, %struct.rtx_def** %p.addr, align 8
  %fld29 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %41, i32 0, i32 1
  %arrayidx30 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld29, i32 0, i64 2
  %rtx = bitcast %union.rtunion_def* %arrayidx30 to %struct.rtx_def**
  %42 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %42, %struct.rtx_def** %p.addr, align 8
  %43 = load %struct.rtx_def*, %struct.rtx_def** %p.addr, align 8
  %44 = bitcast %struct.rtx_def* %43 to i32*
  %bf.load31 = load i32, i32* %44, align 8
  %bf.clear32 = and i32 %bf.load31, 65535
  store i32 %bf.clear32, i32* %code, align 4
  %45 = load i32, i32* %code, align 4
  %cmp33 = icmp eq i32 %45, 32
  br i1 %cmp33, label %land.lhs.true, label %if.end.38

land.lhs.true:                                    ; preds = %while.body
  %46 = load %struct.rtx_def*, %struct.rtx_def** %p.addr, align 8
  %call = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %46, i32 7, %struct.rtx_def* null)
  store %struct.rtx_def* %call, %struct.rtx_def** %temp, align 8
  %tobool = icmp ne %struct.rtx_def* %call, null
  br i1 %tobool, label %if.then.34, label %if.end.38

if.then.34:                                       ; preds = %land.lhs.true
  %47 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %fld35 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %47, i32 0, i32 1
  %arrayidx36 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld35, i32 0, i64 0
  %rtx37 = bitcast %union.rtunion_def* %arrayidx36 to %struct.rtx_def**
  %48 = load %struct.rtx_def*, %struct.rtx_def** %rtx37, align 8
  store %struct.rtx_def* %48, %struct.rtx_def** %p.addr, align 8
  br label %if.end.38

if.end.38:                                        ; preds = %if.then.34, %land.lhs.true, %while.body
  %49 = load i32, i32* %code, align 4
  %cmp39 = icmp eq i32 %49, 32
  br i1 %cmp39, label %land.lhs.true.40, label %if.else

land.lhs.true.40:                                 ; preds = %if.end.38
  %50 = load %struct.rtx_def*, %struct.rtx_def** %p.addr, align 8
  %51 = bitcast %struct.rtx_def* %50 to i32*
  %bf.load41 = load i32, i32* %51, align 8
  %bf.clear42 = and i32 %bf.load41, 65535
  %idxprom43 = sext i32 %bf.clear42 to i64
  %arrayidx44 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom43
  %52 = load i8, i8* %arrayidx44, align 1
  %conv = sext i8 %52 to i32
  %cmp45 = icmp eq i32 %conv, 105
  br i1 %cmp45, label %cond.true, label %cond.false.62

cond.true:                                        ; preds = %land.lhs.true.40
  %53 = load %struct.rtx_def*, %struct.rtx_def** %p.addr, align 8
  %fld47 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %53, i32 0, i32 1
  %arrayidx48 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld47, i32 0, i64 3
  %rtx49 = bitcast %union.rtunion_def* %arrayidx48 to %struct.rtx_def**
  %54 = load %struct.rtx_def*, %struct.rtx_def** %rtx49, align 8
  %55 = bitcast %struct.rtx_def* %54 to i32*
  %bf.load50 = load i32, i32* %55, align 8
  %bf.clear51 = and i32 %bf.load50, 65535
  %cmp52 = icmp eq i32 %bf.clear51, 47
  br i1 %cmp52, label %cond.true.54, label %cond.false

cond.true.54:                                     ; preds = %cond.true
  %56 = load %struct.rtx_def*, %struct.rtx_def** %p.addr, align 8
  %fld55 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %56, i32 0, i32 1
  %arrayidx56 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld55, i32 0, i64 3
  %rtx57 = bitcast %union.rtunion_def* %arrayidx56 to %struct.rtx_def**
  %57 = load %struct.rtx_def*, %struct.rtx_def** %rtx57, align 8
  br label %cond.end

cond.false:                                       ; preds = %cond.true
  %58 = load %struct.rtx_def*, %struct.rtx_def** %p.addr, align 8
  %59 = load %struct.rtx_def*, %struct.rtx_def** %p.addr, align 8
  %fld58 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %59, i32 0, i32 1
  %arrayidx59 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld58, i32 0, i64 3
  %rtx60 = bitcast %union.rtunion_def* %arrayidx59 to %struct.rtx_def**
  %60 = load %struct.rtx_def*, %struct.rtx_def** %rtx60, align 8
  %call61 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %58, %struct.rtx_def* %60)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true.54
  %cond = phi %struct.rtx_def* [ %57, %cond.true.54 ], [ %call61, %cond.false ]
  br label %cond.end.63

cond.false.62:                                    ; preds = %land.lhs.true.40
  br label %cond.end.63

cond.end.63:                                      ; preds = %cond.false.62, %cond.end
  %cond64 = phi %struct.rtx_def* [ %cond, %cond.end ], [ null, %cond.false.62 ]
  store %struct.rtx_def* %cond64, %struct.rtx_def** %set, align 8
  %tobool65 = icmp ne %struct.rtx_def* %cond64, null
  br i1 %tobool65, label %land.lhs.true.66, label %if.else

land.lhs.true.66:                                 ; preds = %cond.end.63
  %61 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld67 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %61, i32 0, i32 1
  %arrayidx68 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld67, i32 0, i64 0
  %rtx69 = bitcast %union.rtunion_def* %arrayidx68 to %struct.rtx_def**
  %62 = load %struct.rtx_def*, %struct.rtx_def** %rtx69, align 8
  %63 = bitcast %struct.rtx_def* %62 to i32*
  %bf.load70 = load i32, i32* %63, align 8
  %bf.clear71 = and i32 %bf.load70, 65535
  %cmp72 = icmp eq i32 %bf.clear71, 61
  br i1 %cmp72, label %land.lhs.true.74, label %if.else

land.lhs.true.74:                                 ; preds = %land.lhs.true.66
  %64 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld75 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %64, i32 0, i32 1
  %arrayidx76 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld75, i32 0, i64 0
  %rtx77 = bitcast %union.rtunion_def* %arrayidx76 to %struct.rtx_def**
  %65 = load %struct.rtx_def*, %struct.rtx_def** %rtx77, align 8
  %66 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg.addr, align 8
  %cmp78 = icmp eq %struct.rtx_def* %65, %66
  br i1 %cmp78, label %land.lhs.true.80, label %if.else

land.lhs.true.80:                                 ; preds = %land.lhs.true.74
  %67 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %68 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld81 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %68, i32 0, i32 1
  %arrayidx82 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld81, i32 0, i64 1
  %rtx83 = bitcast %union.rtunion_def* %arrayidx82 to %struct.rtx_def**
  %69 = load %struct.rtx_def*, %struct.rtx_def** %rtx83, align 8
  %70 = load %struct.rtx_def**, %struct.rtx_def*** %add_val.addr, align 8
  %71 = load %struct.rtx_def**, %struct.rtx_def*** %mult_val.addr, align 8
  %72 = load %struct.rtx_def**, %struct.rtx_def*** %ext_val.addr, align 8
  %call84 = call i32 @general_induction_var(%struct.loop* %67, %struct.rtx_def* %69, %struct.rtx_def** %src_reg.addr, %struct.rtx_def** %70, %struct.rtx_def** %71, %struct.rtx_def** %72, i32 0, i32* %benefit, i32 0)
  %tobool85 = icmp ne i32 %call84, 0
  br i1 %tobool85, label %land.lhs.true.94, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.80
  %73 = load %struct.rtx_def*, %struct.rtx_def** %p.addr, align 8
  %call86 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %73, i32 4, %struct.rtx_def* null)
  store %struct.rtx_def* %call86, %struct.rtx_def** %temp, align 8
  %tobool87 = icmp ne %struct.rtx_def* %call86, null
  br i1 %tobool87, label %land.lhs.true.88, label %if.else

land.lhs.true.88:                                 ; preds = %lor.lhs.false
  %74 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %75 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %fld89 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %75, i32 0, i32 1
  %arrayidx90 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld89, i32 0, i64 0
  %rtx91 = bitcast %union.rtunion_def* %arrayidx90 to %struct.rtx_def**
  %76 = load %struct.rtx_def*, %struct.rtx_def** %rtx91, align 8
  %77 = load %struct.rtx_def**, %struct.rtx_def*** %add_val.addr, align 8
  %78 = load %struct.rtx_def**, %struct.rtx_def*** %mult_val.addr, align 8
  %79 = load %struct.rtx_def**, %struct.rtx_def*** %ext_val.addr, align 8
  %call92 = call i32 @general_induction_var(%struct.loop* %74, %struct.rtx_def* %76, %struct.rtx_def** %src_reg.addr, %struct.rtx_def** %77, %struct.rtx_def** %78, %struct.rtx_def** %79, i32 0, i32* %benefit, i32 0)
  %tobool93 = icmp ne i32 %call92, 0
  br i1 %tobool93, label %land.lhs.true.94, label %if.else

land.lhs.true.94:                                 ; preds = %land.lhs.true.88, %land.lhs.true.80
  %80 = load %struct.rtx_def*, %struct.rtx_def** %src_reg.addr, align 8
  %81 = load %struct.induction*, %struct.induction** %v, align 8
  %src_reg95 = getelementptr inbounds %struct.induction, %struct.induction* %81, i32 0, i32 2
  %82 = load %struct.rtx_def*, %struct.rtx_def** %src_reg95, align 8
  %cmp96 = icmp eq %struct.rtx_def* %80, %82
  br i1 %cmp96, label %if.then.98, label %if.else

if.then.98:                                       ; preds = %land.lhs.true.94
  %83 = load %struct.rtx_def*, %struct.rtx_def** %p.addr, align 8
  %call99 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %83, i32 6, %struct.rtx_def* null)
  %tobool100 = icmp ne %struct.rtx_def* %call99, null
  br i1 %tobool100, label %if.then.101, label %if.end.103

if.then.101:                                      ; preds = %if.then.98
  %84 = load %struct.rtx_def*, %struct.rtx_def** %p.addr, align 8
  %call102 = call i32 @libcall_benefit(%struct.rtx_def* %84)
  %85 = load i32, i32* %benefit, align 4
  %add = add nsw i32 %85, %call102
  store i32 %add, i32* %benefit, align 4
  br label %if.end.103

if.end.103:                                       ; preds = %if.then.101, %if.then.98
  %86 = load i32, i32* %count, align 4
  %dec = add nsw i32 %86, -1
  store i32 %dec, i32* %count, align 4
  %87 = load %struct.rtx_def**, %struct.rtx_def*** %mult_val.addr, align 8
  %88 = load %struct.rtx_def*, %struct.rtx_def** %87, align 8
  %89 = load %struct.induction*, %struct.induction** %v, align 8
  %mult_val104 = getelementptr inbounds %struct.induction, %struct.induction* %89, i32 0, i32 8
  store %struct.rtx_def* %88, %struct.rtx_def** %mult_val104, align 8
  %90 = load %struct.rtx_def**, %struct.rtx_def*** %add_val.addr, align 8
  %91 = load %struct.rtx_def*, %struct.rtx_def** %90, align 8
  %92 = load %struct.induction*, %struct.induction** %v, align 8
  %add_val105 = getelementptr inbounds %struct.induction, %struct.induction* %92, i32 0, i32 9
  store %struct.rtx_def* %91, %struct.rtx_def** %add_val105, align 8
  %93 = load i32, i32* %benefit, align 4
  %94 = load %struct.induction*, %struct.induction** %v, align 8
  %benefit106 = getelementptr inbounds %struct.induction, %struct.induction* %94, i32 0, i32 10
  %95 = load i32, i32* %benefit106, align 4
  %add107 = add nsw i32 %95, %93
  store i32 %add107, i32* %benefit106, align 4
  br label %if.end.224

if.else:                                          ; preds = %land.lhs.true.94, %land.lhs.true.88, %lor.lhs.false, %land.lhs.true.74, %land.lhs.true.66, %cond.end.63, %if.end.38
  %96 = load i32, i32* %code, align 4
  %cmp108 = icmp ne i32 %96, 37
  br i1 %cmp108, label %if.then.110, label %if.end.223

if.then.110:                                      ; preds = %if.else
  %97 = load i32, i32* %code, align 4
  %cmp111 = icmp eq i32 %97, 32
  br i1 %cmp111, label %land.lhs.true.113, label %if.end.215

land.lhs.true.113:                                ; preds = %if.then.110
  %98 = load %struct.rtx_def*, %struct.rtx_def** %p.addr, align 8
  %99 = bitcast %struct.rtx_def* %98 to i32*
  %bf.load114 = load i32, i32* %99, align 8
  %bf.clear115 = and i32 %bf.load114, 65535
  %idxprom116 = sext i32 %bf.clear115 to i64
  %arrayidx117 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom116
  %100 = load i8, i8* %arrayidx117, align 1
  %conv118 = sext i8 %100 to i32
  %cmp119 = icmp eq i32 %conv118, 105
  br i1 %cmp119, label %cond.true.121, label %cond.false.140

cond.true.121:                                    ; preds = %land.lhs.true.113
  %101 = load %struct.rtx_def*, %struct.rtx_def** %p.addr, align 8
  %fld122 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %101, i32 0, i32 1
  %arrayidx123 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld122, i32 0, i64 3
  %rtx124 = bitcast %union.rtunion_def* %arrayidx123 to %struct.rtx_def**
  %102 = load %struct.rtx_def*, %struct.rtx_def** %rtx124, align 8
  %103 = bitcast %struct.rtx_def* %102 to i32*
  %bf.load125 = load i32, i32* %103, align 8
  %bf.clear126 = and i32 %bf.load125, 65535
  %cmp127 = icmp eq i32 %bf.clear126, 47
  br i1 %cmp127, label %cond.true.129, label %cond.false.133

cond.true.129:                                    ; preds = %cond.true.121
  %104 = load %struct.rtx_def*, %struct.rtx_def** %p.addr, align 8
  %fld130 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %104, i32 0, i32 1
  %arrayidx131 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld130, i32 0, i64 3
  %rtx132 = bitcast %union.rtunion_def* %arrayidx131 to %struct.rtx_def**
  %105 = load %struct.rtx_def*, %struct.rtx_def** %rtx132, align 8
  br label %cond.end.138

cond.false.133:                                   ; preds = %cond.true.121
  %106 = load %struct.rtx_def*, %struct.rtx_def** %p.addr, align 8
  %107 = load %struct.rtx_def*, %struct.rtx_def** %p.addr, align 8
  %fld134 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %107, i32 0, i32 1
  %arrayidx135 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld134, i32 0, i64 3
  %rtx136 = bitcast %union.rtunion_def* %arrayidx135 to %struct.rtx_def**
  %108 = load %struct.rtx_def*, %struct.rtx_def** %rtx136, align 8
  %call137 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %106, %struct.rtx_def* %108)
  br label %cond.end.138

cond.end.138:                                     ; preds = %cond.false.133, %cond.true.129
  %cond139 = phi %struct.rtx_def* [ %105, %cond.true.129 ], [ %call137, %cond.false.133 ]
  br label %cond.end.141

cond.false.140:                                   ; preds = %land.lhs.true.113
  br label %cond.end.141

cond.end.141:                                     ; preds = %cond.false.140, %cond.end.138
  %cond142 = phi %struct.rtx_def* [ %cond139, %cond.end.138 ], [ null, %cond.false.140 ]
  store %struct.rtx_def* %cond142, %struct.rtx_def** %set, align 8
  %tobool143 = icmp ne %struct.rtx_def* %cond142, null
  br i1 %tobool143, label %land.lhs.true.144, label %if.end.215

land.lhs.true.144:                                ; preds = %cond.end.141
  %109 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld145 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %109, i32 0, i32 1
  %arrayidx146 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld145, i32 0, i64 0
  %rtx147 = bitcast %union.rtunion_def* %arrayidx146 to %struct.rtx_def**
  %110 = load %struct.rtx_def*, %struct.rtx_def** %rtx147, align 8
  %111 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg.addr, align 8
  %cmp148 = icmp ne %struct.rtx_def* %110, %111
  br i1 %cmp148, label %land.lhs.true.150, label %if.end.215

land.lhs.true.150:                                ; preds = %land.lhs.true.144
  %112 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld151 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %112, i32 0, i32 1
  %arrayidx152 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld151, i32 0, i64 1
  %rtx153 = bitcast %union.rtunion_def* %arrayidx152 to %struct.rtx_def**
  %113 = load %struct.rtx_def*, %struct.rtx_def** %rtx153, align 8
  %114 = bitcast %struct.rtx_def* %113 to i32*
  %bf.load154 = load i32, i32* %114, align 8
  %bf.clear155 = and i32 %bf.load154, 65535
  %cmp156 = icmp eq i32 %bf.clear155, 67
  br i1 %cmp156, label %if.then.214, label %lor.lhs.false.158

lor.lhs.false.158:                                ; preds = %land.lhs.true.150
  %115 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld159 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %115, i32 0, i32 1
  %arrayidx160 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld159, i32 0, i64 1
  %rtx161 = bitcast %union.rtunion_def* %arrayidx160 to %struct.rtx_def**
  %116 = load %struct.rtx_def*, %struct.rtx_def** %rtx161, align 8
  %117 = bitcast %struct.rtx_def* %116 to i32*
  %bf.load162 = load i32, i32* %117, align 8
  %bf.clear163 = and i32 %bf.load162, 65535
  %cmp164 = icmp eq i32 %bf.clear163, 68
  br i1 %cmp164, label %if.then.214, label %lor.lhs.false.166

lor.lhs.false.166:                                ; preds = %lor.lhs.false.158
  %118 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld167 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %118, i32 0, i32 1
  %arrayidx168 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld167, i32 0, i64 1
  %rtx169 = bitcast %union.rtunion_def* %arrayidx168 to %struct.rtx_def**
  %119 = load %struct.rtx_def*, %struct.rtx_def** %rtx169, align 8
  %120 = bitcast %struct.rtx_def* %119 to i32*
  %bf.load170 = load i32, i32* %120, align 8
  %bf.clear171 = and i32 %bf.load170, 65535
  %cmp172 = icmp eq i32 %bf.clear171, 54
  br i1 %cmp172, label %if.then.214, label %lor.lhs.false.174

lor.lhs.false.174:                                ; preds = %lor.lhs.false.166
  %121 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld175 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %121, i32 0, i32 1
  %arrayidx176 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld175, i32 0, i64 1
  %rtx177 = bitcast %union.rtunion_def* %arrayidx176 to %struct.rtx_def**
  %122 = load %struct.rtx_def*, %struct.rtx_def** %rtx177, align 8
  %123 = bitcast %struct.rtx_def* %122 to i32*
  %bf.load178 = load i32, i32* %123, align 8
  %bf.clear179 = and i32 %bf.load178, 65535
  %cmp180 = icmp eq i32 %bf.clear179, 55
  br i1 %cmp180, label %if.then.214, label %lor.lhs.false.182

lor.lhs.false.182:                                ; preds = %lor.lhs.false.174
  %124 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld183 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %124, i32 0, i32 1
  %arrayidx184 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld183, i32 0, i64 1
  %rtx185 = bitcast %union.rtunion_def* %arrayidx184 to %struct.rtx_def**
  %125 = load %struct.rtx_def*, %struct.rtx_def** %rtx185, align 8
  %126 = bitcast %struct.rtx_def* %125 to i32*
  %bf.load186 = load i32, i32* %126, align 8
  %bf.clear187 = and i32 %bf.load186, 65535
  %cmp188 = icmp eq i32 %bf.clear187, 58
  br i1 %cmp188, label %if.then.214, label %lor.lhs.false.190

lor.lhs.false.190:                                ; preds = %lor.lhs.false.182
  %127 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld191 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %127, i32 0, i32 1
  %arrayidx192 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld191, i32 0, i64 1
  %rtx193 = bitcast %union.rtunion_def* %arrayidx192 to %struct.rtx_def**
  %128 = load %struct.rtx_def*, %struct.rtx_def** %rtx193, align 8
  %129 = bitcast %struct.rtx_def* %128 to i32*
  %bf.load194 = load i32, i32* %129, align 8
  %bf.clear195 = and i32 %bf.load194, 65535
  %cmp196 = icmp eq i32 %bf.clear195, 134
  br i1 %cmp196, label %if.then.214, label %lor.lhs.false.198

lor.lhs.false.198:                                ; preds = %lor.lhs.false.190
  %130 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld199 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %130, i32 0, i32 1
  %arrayidx200 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld199, i32 0, i64 1
  %rtx201 = bitcast %union.rtunion_def* %arrayidx200 to %struct.rtx_def**
  %131 = load %struct.rtx_def*, %struct.rtx_def** %rtx201, align 8
  %132 = bitcast %struct.rtx_def* %131 to i32*
  %bf.load202 = load i32, i32* %132, align 8
  %bf.clear203 = and i32 %bf.load202, 65535
  %cmp204 = icmp eq i32 %bf.clear203, 56
  br i1 %cmp204, label %if.then.214, label %lor.lhs.false.206

lor.lhs.false.206:                                ; preds = %lor.lhs.false.198
  %133 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld207 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %133, i32 0, i32 1
  %arrayidx208 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld207, i32 0, i64 1
  %rtx209 = bitcast %union.rtunion_def* %arrayidx208 to %struct.rtx_def**
  %134 = load %struct.rtx_def*, %struct.rtx_def** %rtx209, align 8
  %135 = bitcast %struct.rtx_def* %134 to i32*
  %bf.load210 = load i32, i32* %135, align 8
  %bf.clear211 = and i32 %bf.load210, 65535
  %cmp212 = icmp eq i32 %bf.clear211, 140
  br i1 %cmp212, label %if.then.214, label %if.end.215

if.then.214:                                      ; preds = %lor.lhs.false.206, %lor.lhs.false.198, %lor.lhs.false.190, %lor.lhs.false.182, %lor.lhs.false.174, %lor.lhs.false.166, %lor.lhs.false.158, %land.lhs.true.150
  br label %while.cond

if.end.215:                                       ; preds = %lor.lhs.false.206, %land.lhs.true.144, %cond.end.141, %if.then.110
  %136 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg.addr, align 8
  %fld216 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %136, i32 0, i32 1
  %arrayidx217 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld216, i32 0, i64 0
  %rtuint218 = bitcast %union.rtunion_def* %arrayidx217 to i32*
  %137 = load i32, i32* %rtuint218, align 4
  %idxprom219 = zext i32 %137 to i64
  %138 = load %struct.loop_ivs*, %struct.loop_ivs** %ivs, align 8
  %regs220 = getelementptr inbounds %struct.loop_ivs, %struct.loop_ivs* %138, i32 0, i32 0
  %139 = load %struct.iv*, %struct.iv** %regs220, align 8
  %arrayidx221 = getelementptr inbounds %struct.iv, %struct.iv* %139, i64 %idxprom219
  %type222 = getelementptr inbounds %struct.iv, %struct.iv* %arrayidx221, i32 0, i32 0
  store i32 0, i32* %type222, align 4
  store i32 0, i32* %retval
  br label %return

if.end.223:                                       ; preds = %if.else
  br label %if.end.224

if.end.224:                                       ; preds = %if.end.223, %if.end.103
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %140 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg.addr, align 8
  %fld225 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %140, i32 0, i32 1
  %arrayidx226 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld225, i32 0, i64 0
  %rtuint227 = bitcast %union.rtunion_def* %arrayidx226 to i32*
  %141 = load i32, i32* %rtuint227, align 4
  %idxprom228 = zext i32 %141 to i64
  %142 = load %struct.loop_ivs*, %struct.loop_ivs** %ivs, align 8
  %regs229 = getelementptr inbounds %struct.loop_ivs, %struct.loop_ivs* %142, i32 0, i32 0
  %143 = load %struct.iv*, %struct.iv** %regs229, align 8
  %arrayidx230 = getelementptr inbounds %struct.iv, %struct.iv* %143, i64 %idxprom228
  %type231 = getelementptr inbounds %struct.iv, %struct.iv* %arrayidx230, i32 0, i32 0
  store i32 0, i32* %type231, align 4
  %144 = load %struct.rtx_def*, %struct.rtx_def** %p.addr, align 8
  %145 = load %struct.rtx_def**, %struct.rtx_def*** %last_consec_insn.addr, align 8
  store %struct.rtx_def* %144, %struct.rtx_def** %145, align 8
  %146 = load %struct.induction*, %struct.induction** %v, align 8
  %benefit232 = getelementptr inbounds %struct.induction, %struct.induction* %146, i32 0, i32 10
  %147 = load i32, i32* %benefit232, align 4
  store i32 %147, i32* %retval
  br label %return

return:                                           ; preds = %while.end, %if.end.215, %if.then
  %148 = load i32, i32* %retval
  ret i32 %148
}

; Function Attrs: nounwind uwtable
define internal void @record_giv(%struct.loop* %loop, %struct.induction* %v, %struct.rtx_def* %insn, %struct.rtx_def* %src_reg, %struct.rtx_def* %dest_reg, %struct.rtx_def* %mult_val, %struct.rtx_def* %add_val, %struct.rtx_def* %ext_val, i32 %benefit, i32 %type, i32 %not_every_iteration, i32 %maybe_multiple, %struct.rtx_def** %location) #0 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %v.addr = alloca %struct.induction*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  %src_reg.addr = alloca %struct.rtx_def*, align 8
  %dest_reg.addr = alloca %struct.rtx_def*, align 8
  %mult_val.addr = alloca %struct.rtx_def*, align 8
  %add_val.addr = alloca %struct.rtx_def*, align 8
  %ext_val.addr = alloca %struct.rtx_def*, align 8
  %benefit.addr = alloca i32, align 4
  %type.addr = alloca i32, align 4
  %not_every_iteration.addr = alloca i32, align 4
  %maybe_multiple.addr = alloca i32, align 4
  %location.addr = alloca %struct.rtx_def**, align 8
  %ivs = alloca %struct.loop_ivs*, align 8
  %b = alloca %struct.induction*, align 8
  %bl = alloca %struct.iv_class*, align 8
  %set = alloca %struct.rtx_def*, align 8
  %temp = alloca %struct.rtx_def*, align 8
  %tem = alloca %struct.rtx_def*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  store %struct.induction* %v, %struct.induction** %v.addr, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  store %struct.rtx_def* %src_reg, %struct.rtx_def** %src_reg.addr, align 8
  store %struct.rtx_def* %dest_reg, %struct.rtx_def** %dest_reg.addr, align 8
  store %struct.rtx_def* %mult_val, %struct.rtx_def** %mult_val.addr, align 8
  store %struct.rtx_def* %add_val, %struct.rtx_def** %add_val.addr, align 8
  store %struct.rtx_def* %ext_val, %struct.rtx_def** %ext_val.addr, align 8
  store i32 %benefit, i32* %benefit.addr, align 4
  store i32 %type, i32* %type.addr, align 4
  store i32 %not_every_iteration, i32* %not_every_iteration.addr, align 4
  store i32 %maybe_multiple, i32* %maybe_multiple.addr, align 4
  store %struct.rtx_def** %location, %struct.rtx_def*** %location.addr, align 8
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %aux = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 22
  %1 = load i8*, i8** %aux, align 8
  %2 = bitcast i8* %1 to %struct.loop_info*
  %ivs1 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %2, i32 0, i32 29
  store %struct.loop_ivs* %ivs1, %struct.loop_ivs** %ivs, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %4 = bitcast %struct.rtx_def* %3 to i32*
  %bf.load = load i32, i32* %4, align 8
  %bf.clear = and i32 %bf.load, 65535
  %idxprom = sext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom
  %5 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %5 to i32
  %cmp = icmp eq i32 %conv, 105
  br i1 %cmp, label %cond.true, label %cond.false.15

cond.true:                                        ; preds = %entry
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx3 to %struct.rtx_def**
  %7 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %8 = bitcast %struct.rtx_def* %7 to i32*
  %bf.load4 = load i32, i32* %8, align 8
  %bf.clear5 = and i32 %bf.load4, 65535
  %cmp6 = icmp eq i32 %bf.clear5, 47
  br i1 %cmp6, label %cond.true.8, label %cond.false

cond.true.8:                                      ; preds = %cond.true
  %9 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld9 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1
  %arrayidx10 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld9, i32 0, i64 3
  %rtx11 = bitcast %union.rtunion_def* %arrayidx10 to %struct.rtx_def**
  %10 = load %struct.rtx_def*, %struct.rtx_def** %rtx11, align 8
  br label %cond.end

cond.false:                                       ; preds = %cond.true
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld12 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1
  %arrayidx13 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld12, i32 0, i64 3
  %rtx14 = bitcast %union.rtunion_def* %arrayidx13 to %struct.rtx_def**
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rtx14, align 8
  %call = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %11, %struct.rtx_def* %13)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true.8
  %cond = phi %struct.rtx_def* [ %10, %cond.true.8 ], [ %call, %cond.false ]
  br label %cond.end.16

cond.false.15:                                    ; preds = %entry
  br label %cond.end.16

cond.end.16:                                      ; preds = %cond.false.15, %cond.end
  %cond17 = phi %struct.rtx_def* [ %cond, %cond.end ], [ null, %cond.false.15 ]
  store %struct.rtx_def* %cond17, %struct.rtx_def** %set, align 8
  %14 = load %struct.rtx_def*, %struct.rtx_def** %add_val.addr, align 8
  %call18 = call %struct.rtx_def* @simplify_rtx(%struct.rtx_def* %14)
  store %struct.rtx_def* %call18, %struct.rtx_def** %temp, align 8
  %15 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %tobool = icmp ne %struct.rtx_def* %15, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.end.16
  %16 = load %struct.rtx_def*, %struct.rtx_def** %add_val.addr, align 8
  %17 = bitcast %struct.rtx_def* %16 to i32*
  %bf.load19 = load i32, i32* %17, align 8
  %bf.clear20 = and i32 %bf.load19, 65535
  %cmp21 = icmp eq i32 %bf.clear20, 78
  br i1 %cmp21, label %land.lhs.true.23, label %if.then

land.lhs.true.23:                                 ; preds = %land.lhs.true
  %18 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %19 = bitcast %struct.rtx_def* %18 to i32*
  %bf.load24 = load i32, i32* %19, align 8
  %bf.clear25 = and i32 %bf.load24, 65535
  %cmp26 = icmp eq i32 %bf.clear25, 87
  br i1 %cmp26, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true.23, %land.lhs.true
  %20 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  store %struct.rtx_def* %20, %struct.rtx_def** %add_val.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true.23, %cond.end.16
  %21 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %22 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %insn28 = getelementptr inbounds %struct.induction, %struct.induction* %22, i32 0, i32 0
  store %struct.rtx_def* %21, %struct.rtx_def** %insn28, align 8
  %23 = load %struct.rtx_def*, %struct.rtx_def** %src_reg.addr, align 8
  %24 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %src_reg29 = getelementptr inbounds %struct.induction, %struct.induction* %24, i32 0, i32 2
  store %struct.rtx_def* %23, %struct.rtx_def** %src_reg29, align 8
  %25 = load i32, i32* %type.addr, align 4
  %26 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %giv_type = getelementptr inbounds %struct.induction, %struct.induction* %26, i32 0, i32 3
  store i32 %25, i32* %giv_type, align 4
  %27 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg.addr, align 8
  %28 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %dest_reg30 = getelementptr inbounds %struct.induction, %struct.induction* %28, i32 0, i32 4
  store %struct.rtx_def* %27, %struct.rtx_def** %dest_reg30, align 8
  %29 = load %struct.rtx_def*, %struct.rtx_def** %mult_val.addr, align 8
  %30 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %mult_val31 = getelementptr inbounds %struct.induction, %struct.induction* %30, i32 0, i32 8
  store %struct.rtx_def* %29, %struct.rtx_def** %mult_val31, align 8
  %31 = load %struct.rtx_def*, %struct.rtx_def** %add_val.addr, align 8
  %32 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %add_val32 = getelementptr inbounds %struct.induction, %struct.induction* %32, i32 0, i32 9
  store %struct.rtx_def* %31, %struct.rtx_def** %add_val32, align 8
  %33 = load %struct.rtx_def*, %struct.rtx_def** %ext_val.addr, align 8
  %34 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %ext_dependent = getelementptr inbounds %struct.induction, %struct.induction* %34, i32 0, i32 16
  store %struct.rtx_def* %33, %struct.rtx_def** %ext_dependent, align 8
  %35 = load i32, i32* %benefit.addr, align 4
  %36 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %benefit33 = getelementptr inbounds %struct.induction, %struct.induction* %36, i32 0, i32 10
  store i32 %35, i32* %benefit33, align 4
  %37 = load %struct.rtx_def**, %struct.rtx_def*** %location.addr, align 8
  %38 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %location34 = getelementptr inbounds %struct.induction, %struct.induction* %38, i32 0, i32 5
  store %struct.rtx_def** %37, %struct.rtx_def*** %location34, align 8
  %39 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %cant_derive = getelementptr inbounds %struct.induction, %struct.induction* %39, i32 0, i32 13
  %bf.load35 = load i16, i16* %cant_derive, align 4
  %bf.clear36 = and i16 %bf.load35, -65
  store i16 %bf.clear36, i16* %cant_derive, align 4
  %40 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %combined_with = getelementptr inbounds %struct.induction, %struct.induction* %40, i32 0, i32 12
  store i32 0, i32* %combined_with, align 4
  %41 = load i32, i32* %maybe_multiple.addr, align 4
  %42 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %maybe_multiple37 = getelementptr inbounds %struct.induction, %struct.induction* %42, i32 0, i32 13
  %43 = trunc i32 %41 to i16
  %bf.load38 = load i16, i16* %maybe_multiple37, align 4
  %bf.value = and i16 %43, 1
  %bf.shl = shl i16 %bf.value, 5
  %bf.clear39 = and i16 %bf.load38, -33
  %bf.set = or i16 %bf.clear39, %bf.shl
  store i16 %bf.set, i16* %maybe_multiple37, align 4
  %bf.result.cast = zext i16 %bf.value to i32
  %44 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %maybe_dead = getelementptr inbounds %struct.induction, %struct.induction* %44, i32 0, i32 13
  %bf.load40 = load i16, i16* %maybe_dead, align 4
  %bf.clear41 = and i16 %bf.load40, -129
  store i16 %bf.clear41, i16* %maybe_dead, align 4
  %45 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %derive_adjustment = getelementptr inbounds %struct.induction, %struct.induction* %45, i32 0, i32 15
  store %struct.rtx_def* null, %struct.rtx_def** %derive_adjustment, align 8
  %46 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %same = getelementptr inbounds %struct.induction, %struct.induction* %46, i32 0, i32 18
  store %struct.induction* null, %struct.induction** %same, align 8
  %47 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %ignore = getelementptr inbounds %struct.induction, %struct.induction* %47, i32 0, i32 13
  %bf.load42 = load i16, i16* %ignore, align 4
  %bf.clear43 = and i16 %bf.load42, -5
  store i16 %bf.clear43, i16* %ignore, align 4
  %48 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %new_reg = getelementptr inbounds %struct.induction, %struct.induction* %48, i32 0, i32 1
  store %struct.rtx_def* null, %struct.rtx_def** %new_reg, align 8
  %49 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %final_value = getelementptr inbounds %struct.induction, %struct.induction* %49, i32 0, i32 11
  store %struct.rtx_def* null, %struct.rtx_def** %final_value, align 8
  %50 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %same_insn = getelementptr inbounds %struct.induction, %struct.induction* %50, i32 0, i32 20
  store %struct.induction* null, %struct.induction** %same_insn, align 8
  %51 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %auto_inc_opt = getelementptr inbounds %struct.induction, %struct.induction* %51, i32 0, i32 13
  %bf.load44 = load i16, i16* %auto_inc_opt, align 4
  %bf.clear45 = and i16 %bf.load44, -257
  store i16 %bf.clear45, i16* %auto_inc_opt, align 4
  %52 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %unrolled = getelementptr inbounds %struct.induction, %struct.induction* %52, i32 0, i32 13
  %bf.load46 = load i16, i16* %unrolled, align 4
  %bf.clear47 = and i16 %bf.load46, -513
  store i16 %bf.clear47, i16* %unrolled, align 4
  %53 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %shared = getelementptr inbounds %struct.induction, %struct.induction* %53, i32 0, i32 13
  %bf.load48 = load i16, i16* %shared, align 4
  %bf.clear49 = and i16 %bf.load48, -1025
  store i16 %bf.clear49, i16* %shared, align 4
  %54 = load i32, i32* %type.addr, align 4
  %cmp50 = icmp eq i32 %54, 0
  br i1 %cmp50, label %if.then.52, label %if.else

if.then.52:                                       ; preds = %if.end
  %55 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %always_computable = getelementptr inbounds %struct.induction, %struct.induction* %55, i32 0, i32 13
  %bf.load53 = load i16, i16* %always_computable, align 4
  %bf.clear54 = and i16 %bf.load53, -9
  %bf.set55 = or i16 %bf.clear54, 8
  store i16 %bf.set55, i16* %always_computable, align 4
  br label %if.end.64

if.else:                                          ; preds = %if.end
  %56 = load i32, i32* %not_every_iteration.addr, align 4
  %tobool56 = icmp ne i32 %56, 0
  %lnot = xor i1 %tobool56, true
  %lnot.ext = zext i1 %lnot to i32
  %57 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %always_computable57 = getelementptr inbounds %struct.induction, %struct.induction* %57, i32 0, i32 13
  %58 = trunc i32 %lnot.ext to i16
  %bf.load58 = load i16, i16* %always_computable57, align 4
  %bf.value59 = and i16 %58, 1
  %bf.shl60 = shl i16 %bf.value59, 3
  %bf.clear61 = and i16 %bf.load58, -9
  %bf.set62 = or i16 %bf.clear61, %bf.shl60
  store i16 %bf.set62, i16* %always_computable57, align 4
  %bf.result.cast63 = zext i16 %bf.value59 to i32
  br label %if.end.64

if.end.64:                                        ; preds = %if.else, %if.then.52
  %59 = load i32, i32* %not_every_iteration.addr, align 4
  %tobool65 = icmp ne i32 %59, 0
  %lnot66 = xor i1 %tobool65, true
  %lnot.ext67 = zext i1 %lnot66 to i32
  %60 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %always_executed = getelementptr inbounds %struct.induction, %struct.induction* %60, i32 0, i32 13
  %61 = trunc i32 %lnot.ext67 to i16
  %bf.load68 = load i16, i16* %always_executed, align 4
  %bf.value69 = and i16 %61, 1
  %bf.shl70 = shl i16 %bf.value69, 4
  %bf.clear71 = and i16 %bf.load68, -17
  %bf.set72 = or i16 %bf.clear71, %bf.shl70
  store i16 %bf.set72, i16* %always_executed, align 4
  %bf.result.cast73 = zext i16 %bf.value69 to i32
  %62 = load i32, i32* %type.addr, align 4
  %cmp74 = icmp eq i32 %62, 0
  br i1 %cmp74, label %if.then.76, label %if.else.79

if.then.76:                                       ; preds = %if.end.64
  %63 = load %struct.rtx_def**, %struct.rtx_def*** %location.addr, align 8
  %64 = load %struct.rtx_def*, %struct.rtx_def** %63, align 8
  %65 = bitcast %struct.rtx_def* %64 to i32*
  %bf.load77 = load i32, i32* %65, align 8
  %bf.lshr = lshr i32 %bf.load77, 16
  %bf.clear78 = and i32 %bf.lshr, 255
  %66 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %mode = getelementptr inbounds %struct.induction, %struct.induction* %66, i32 0, i32 6
  store i32 %bf.clear78, i32* %mode, align 4
  %67 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %lifetime = getelementptr inbounds %struct.induction, %struct.induction* %67, i32 0, i32 14
  store i32 1, i32* %lifetime, align 4
  br label %if.end.124

if.else.79:                                       ; preds = %if.end.64
  %68 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld80 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %68, i32 0, i32 1
  %arrayidx81 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld80, i32 0, i64 0
  %rtx82 = bitcast %union.rtunion_def* %arrayidx81 to %struct.rtx_def**
  %69 = load %struct.rtx_def*, %struct.rtx_def** %rtx82, align 8
  %70 = bitcast %struct.rtx_def* %69 to i32*
  %bf.load83 = load i32, i32* %70, align 8
  %bf.lshr84 = lshr i32 %bf.load83, 16
  %bf.clear85 = and i32 %bf.lshr84, 255
  %71 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %mode86 = getelementptr inbounds %struct.induction, %struct.induction* %71, i32 0, i32 6
  store i32 %bf.clear85, i32* %mode86, align 4
  %72 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg.addr, align 8
  %fld87 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %72, i32 0, i32 1
  %arrayidx88 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld87, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx88 to i32*
  %73 = load i32, i32* %rtuint, align 4
  %idxprom89 = zext i32 %73 to i64
  %74 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %data = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %74, i32 0, i32 4
  %reg = bitcast %union.varray_data_tag* %data to [1 x %struct.reg_info_def*]*
  %arrayidx90 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %reg, i32 0, i64 %idxprom89
  %75 = load %struct.reg_info_def*, %struct.reg_info_def** %arrayidx90, align 8
  %last_uid = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %75, i32 0, i32 1
  %76 = load i32, i32* %last_uid, align 4
  %idxprom91 = sext i32 %76 to i64
  %77 = load i32*, i32** @uid_luid, align 8
  %arrayidx92 = getelementptr inbounds i32, i32* %77, i64 %idxprom91
  %78 = load i32, i32* %arrayidx92, align 4
  %79 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg.addr, align 8
  %fld93 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %79, i32 0, i32 1
  %arrayidx94 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld93, i32 0, i64 0
  %rtuint95 = bitcast %union.rtunion_def* %arrayidx94 to i32*
  %80 = load i32, i32* %rtuint95, align 4
  %idxprom96 = zext i32 %80 to i64
  %81 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %data97 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %81, i32 0, i32 4
  %reg98 = bitcast %union.varray_data_tag* %data97 to [1 x %struct.reg_info_def*]*
  %arrayidx99 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %reg98, i32 0, i64 %idxprom96
  %82 = load %struct.reg_info_def*, %struct.reg_info_def** %arrayidx99, align 8
  %first_uid = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %82, i32 0, i32 0
  %83 = load i32, i32* %first_uid, align 4
  %idxprom100 = sext i32 %83 to i64
  %84 = load i32*, i32** @uid_luid, align 8
  %arrayidx101 = getelementptr inbounds i32, i32* %84, i64 %idxprom100
  %85 = load i32, i32* %arrayidx101, align 4
  %sub = sub nsw i32 %78, %85
  %86 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %lifetime102 = getelementptr inbounds %struct.induction, %struct.induction* %86, i32 0, i32 14
  store i32 %sub, i32* %lifetime102, align 4
  %87 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %lifetime103 = getelementptr inbounds %struct.induction, %struct.induction* %87, i32 0, i32 14
  %88 = load i32, i32* %lifetime103, align 4
  %cmp104 = icmp eq i32 %88, 0
  br i1 %cmp104, label %if.then.106, label %if.end.111

if.then.106:                                      ; preds = %if.else.79
  %89 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %ignore107 = getelementptr inbounds %struct.induction, %struct.induction* %89, i32 0, i32 13
  %bf.load108 = load i16, i16* %ignore107, align 4
  %bf.clear109 = and i16 %bf.load108, -5
  %bf.set110 = or i16 %bf.clear109, 4
  store i16 %bf.set110, i16* %ignore107, align 4
  br label %if.end.111

if.end.111:                                       ; preds = %if.then.106, %if.else.79
  %90 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg.addr, align 8
  %fld112 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %90, i32 0, i32 1
  %arrayidx113 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld112, i32 0, i64 0
  %rtuint114 = bitcast %union.rtunion_def* %arrayidx113 to i32*
  %91 = load i32, i32* %rtuint114, align 4
  %idxprom115 = zext i32 %91 to i64
  %92 = load %struct.loop_ivs*, %struct.loop_ivs** %ivs, align 8
  %regs = getelementptr inbounds %struct.loop_ivs, %struct.loop_ivs* %92, i32 0, i32 0
  %93 = load %struct.iv*, %struct.iv** %regs, align 8
  %arrayidx116 = getelementptr inbounds %struct.iv, %struct.iv* %93, i64 %idxprom115
  %type117 = getelementptr inbounds %struct.iv, %struct.iv* %arrayidx116, i32 0, i32 0
  store i32 3, i32* %type117, align 4
  %94 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %95 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg.addr, align 8
  %fld118 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %95, i32 0, i32 1
  %arrayidx119 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld118, i32 0, i64 0
  %rtuint120 = bitcast %union.rtunion_def* %arrayidx119 to i32*
  %96 = load i32, i32* %rtuint120, align 4
  %idxprom121 = zext i32 %96 to i64
  %97 = load %struct.loop_ivs*, %struct.loop_ivs** %ivs, align 8
  %regs122 = getelementptr inbounds %struct.loop_ivs, %struct.loop_ivs* %97, i32 0, i32 0
  %98 = load %struct.iv*, %struct.iv** %regs122, align 8
  %arrayidx123 = getelementptr inbounds %struct.iv, %struct.iv* %98, i64 %idxprom121
  %iv = getelementptr inbounds %struct.iv, %struct.iv* %arrayidx123, i32 0, i32 1
  %info = bitcast %union.anon.0* %iv to %struct.induction**
  store %struct.induction* %94, %struct.induction** %info, align 8
  br label %if.end.124

if.end.124:                                       ; preds = %if.end.111, %if.then.76
  %99 = load %struct.rtx_def*, %struct.rtx_def** %src_reg.addr, align 8
  %fld125 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %99, i32 0, i32 1
  %arrayidx126 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld125, i32 0, i64 0
  %rtuint127 = bitcast %union.rtunion_def* %arrayidx126 to i32*
  %100 = load i32, i32* %rtuint127, align 4
  %idxprom128 = zext i32 %100 to i64
  %101 = load %struct.loop_ivs*, %struct.loop_ivs** %ivs, align 8
  %regs129 = getelementptr inbounds %struct.loop_ivs, %struct.loop_ivs* %101, i32 0, i32 0
  %102 = load %struct.iv*, %struct.iv** %regs129, align 8
  %arrayidx130 = getelementptr inbounds %struct.iv, %struct.iv* %102, i64 %idxprom128
  %iv131 = getelementptr inbounds %struct.iv, %struct.iv* %arrayidx130, i32 0, i32 1
  %class = bitcast %union.anon.0* %iv131 to %struct.iv_class**
  %103 = load %struct.iv_class*, %struct.iv_class** %class, align 8
  store %struct.iv_class* %103, %struct.iv_class** %bl, align 8
  %104 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %tobool132 = icmp ne %struct.iv_class* %104, null
  br i1 %tobool132, label %if.then.133, label %if.else.139

if.then.133:                                      ; preds = %if.end.124
  %105 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %giv = getelementptr inbounds %struct.iv_class, %struct.iv_class* %105, i32 0, i32 4
  %106 = load %struct.induction*, %struct.induction** %giv, align 8
  %107 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %next_iv = getelementptr inbounds %struct.induction, %struct.induction* %107, i32 0, i32 17
  store %struct.induction* %106, %struct.induction** %next_iv, align 8
  %108 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %109 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %giv134 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %109, i32 0, i32 4
  store %struct.induction* %108, %struct.induction** %giv134, align 8
  %110 = load i32, i32* %type.addr, align 4
  %cmp135 = icmp eq i32 %110, 1
  br i1 %cmp135, label %if.then.137, label %if.end.138

if.then.137:                                      ; preds = %if.then.133
  %111 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %giv_count = getelementptr inbounds %struct.iv_class, %struct.iv_class* %111, i32 0, i32 3
  %112 = load i32, i32* %giv_count, align 4
  %inc = add nsw i32 %112, 1
  store i32 %inc, i32* %giv_count, align 4
  br label %if.end.138

if.end.138:                                       ; preds = %if.then.137, %if.then.133
  %113 = load i32, i32* %benefit.addr, align 4
  %114 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %total_benefit = getelementptr inbounds %struct.iv_class, %struct.iv_class* %114, i32 0, i32 5
  %115 = load i32, i32* %total_benefit, align 4
  %add = add nsw i32 %115, %113
  store i32 %add, i32* %total_benefit, align 4
  br label %if.end.140

if.else.139:                                      ; preds = %if.end.124
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 5713, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @__FUNCTION__.record_giv, i32 0, i32 0)) #6
  unreachable

if.end.140:                                       ; preds = %if.end.138
  %116 = load i32, i32* %type.addr, align 4
  %cmp141 = icmp eq i32 %116, 0
  br i1 %cmp141, label %if.then.143, label %if.else.147

if.then.143:                                      ; preds = %if.end.140
  %117 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %replaceable = getelementptr inbounds %struct.induction, %struct.induction* %117, i32 0, i32 13
  %bf.load144 = load i16, i16* %replaceable, align 4
  %bf.clear145 = and i16 %bf.load144, -2
  %bf.set146 = or i16 %bf.clear145, 1
  store i16 %bf.set146, i16* %replaceable, align 4
  br label %if.end.304

if.else.147:                                      ; preds = %if.end.140
  %118 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg.addr, align 8
  %fld148 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %118, i32 0, i32 1
  %arrayidx149 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld148, i32 0, i64 0
  %rtuint150 = bitcast %union.rtunion_def* %arrayidx149 to i32*
  %119 = load i32, i32* %rtuint150, align 4
  %idxprom151 = zext i32 %119 to i64
  %120 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %data152 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %120, i32 0, i32 4
  %reg153 = bitcast %union.varray_data_tag* %data152 to [1 x %struct.reg_info_def*]*
  %arrayidx154 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %reg153, i32 0, i64 %idxprom151
  %121 = load %struct.reg_info_def*, %struct.reg_info_def** %arrayidx154, align 8
  %first_uid155 = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %121, i32 0, i32 0
  %122 = load i32, i32* %first_uid155, align 4
  %123 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld156 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %123, i32 0, i32 1
  %arrayidx157 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld156, i32 0, i64 0
  %rtint = bitcast %union.rtunion_def* %arrayidx157 to i32*
  %124 = load i32, i32* %rtint, align 4
  %cmp158 = icmp eq i32 %122, %124
  br i1 %cmp158, label %land.lhs.true.160, label %if.else.296

land.lhs.true.160:                                ; preds = %if.else.147
  %125 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg.addr, align 8
  %fld161 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %125, i32 0, i32 1
  %arrayidx162 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld161, i32 0, i64 0
  %rtuint163 = bitcast %union.rtunion_def* %arrayidx162 to i32*
  %126 = load i32, i32* %rtuint163, align 4
  %idxprom164 = zext i32 %126 to i64
  %127 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %data165 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %127, i32 0, i32 4
  %reg166 = bitcast %union.varray_data_tag* %data165 to [1 x %struct.reg_info_def*]*
  %arrayidx167 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %reg166, i32 0, i64 %idxprom164
  %128 = load %struct.reg_info_def*, %struct.reg_info_def** %arrayidx167, align 8
  %last_uid168 = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %128, i32 0, i32 1
  %129 = load i32, i32* %last_uid168, align 4
  %idxprom169 = sext i32 %129 to i64
  %130 = load i32*, i32** @uid_luid, align 8
  %arrayidx170 = getelementptr inbounds i32, i32* %130, i64 %idxprom169
  %131 = load i32, i32* %arrayidx170, align 4
  %132 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %end = getelementptr inbounds %struct.loop, %struct.loop* %132, i32 0, i32 27
  %133 = load %struct.rtx_def*, %struct.rtx_def** %end, align 8
  %fld171 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %133, i32 0, i32 1
  %arrayidx172 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld171, i32 0, i64 0
  %rtint173 = bitcast %union.rtunion_def* %arrayidx172 to i32*
  %134 = load i32, i32* %rtint173, align 4
  %135 = load i32, i32* @max_uid_for_loop, align 4
  %cmp174 = icmp slt i32 %134, %135
  br i1 %cmp174, label %cond.true.176, label %cond.false.183

cond.true.176:                                    ; preds = %land.lhs.true.160
  %136 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %end177 = getelementptr inbounds %struct.loop, %struct.loop* %136, i32 0, i32 27
  %137 = load %struct.rtx_def*, %struct.rtx_def** %end177, align 8
  %fld178 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %137, i32 0, i32 1
  %arrayidx179 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld178, i32 0, i64 0
  %rtint180 = bitcast %union.rtunion_def* %arrayidx179 to i32*
  %138 = load i32, i32* %rtint180, align 4
  %idxprom181 = sext i32 %138 to i64
  %139 = load i32*, i32** @uid_luid, align 8
  %arrayidx182 = getelementptr inbounds i32, i32* %139, i64 %idxprom181
  %140 = load i32, i32* %arrayidx182, align 4
  br label %cond.end.184

cond.false.183:                                   ; preds = %land.lhs.true.160
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 5732, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @__FUNCTION__.record_giv, i32 0, i32 0)) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end.184

cond.end.184:                                     ; preds = %141, %cond.true.176
  %cond185 = phi i32 [ %140, %cond.true.176 ], [ -1, %141 ]
  %cmp186 = icmp slt i32 %131, %cond185
  br i1 %cmp186, label %land.lhs.true.188, label %if.else.296

land.lhs.true.188:                                ; preds = %cond.end.184
  %142 = load i32, i32* %not_every_iteration.addr, align 4
  %tobool189 = icmp ne i32 %142, 0
  br i1 %tobool189, label %lor.lhs.false, label %if.then.192

lor.lhs.false:                                    ; preds = %land.lhs.true.188
  %143 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg.addr, align 8
  %144 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call190 = call i32 @last_use_this_basic_block(%struct.rtx_def* %143, %struct.rtx_def* %144)
  %tobool191 = icmp ne i32 %call190, 0
  br i1 %tobool191, label %if.then.192, label %if.else.296

if.then.192:                                      ; preds = %lor.lhs.false, %land.lhs.true.188
  %145 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %replaceable193 = getelementptr inbounds %struct.induction, %struct.induction* %145, i32 0, i32 13
  %bf.load194 = load i16, i16* %replaceable193, align 4
  %bf.clear195 = and i16 %bf.load194, -2
  %bf.set196 = or i16 %bf.clear195, 1
  store i16 %bf.set196, i16* %replaceable193, align 4
  %146 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %biv = getelementptr inbounds %struct.iv_class, %struct.iv_class* %146, i32 0, i32 2
  %147 = load %struct.induction*, %struct.induction** %biv, align 8
  store %struct.induction* %147, %struct.induction** %b, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.192
  %148 = load %struct.induction*, %struct.induction** %b, align 8
  %tobool197 = icmp ne %struct.induction* %148, null
  br i1 %tobool197, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %149 = load %struct.induction*, %struct.induction** %b, align 8
  %insn198 = getelementptr inbounds %struct.induction, %struct.induction* %149, i32 0, i32 0
  %150 = load %struct.rtx_def*, %struct.rtx_def** %insn198, align 8
  %fld199 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %150, i32 0, i32 1
  %arrayidx200 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld199, i32 0, i64 0
  %rtint201 = bitcast %union.rtunion_def* %arrayidx200 to i32*
  %151 = load i32, i32* %rtint201, align 4
  %152 = load i32, i32* @max_uid_for_loop, align 4
  %cmp202 = icmp sge i32 %151, %152
  br i1 %cmp202, label %if.then.262, label %lor.lhs.false.204

lor.lhs.false.204:                                ; preds = %for.body
  %153 = load %struct.induction*, %struct.induction** %b, align 8
  %insn205 = getelementptr inbounds %struct.induction, %struct.induction* %153, i32 0, i32 0
  %154 = load %struct.rtx_def*, %struct.rtx_def** %insn205, align 8
  %fld206 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %154, i32 0, i32 1
  %arrayidx207 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld206, i32 0, i64 0
  %rtint208 = bitcast %union.rtunion_def* %arrayidx207 to i32*
  %155 = load i32, i32* %rtint208, align 4
  %156 = load i32, i32* @max_uid_for_loop, align 4
  %cmp209 = icmp slt i32 %155, %156
  br i1 %cmp209, label %cond.true.211, label %cond.false.218

cond.true.211:                                    ; preds = %lor.lhs.false.204
  %157 = load %struct.induction*, %struct.induction** %b, align 8
  %insn212 = getelementptr inbounds %struct.induction, %struct.induction* %157, i32 0, i32 0
  %158 = load %struct.rtx_def*, %struct.rtx_def** %insn212, align 8
  %fld213 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %158, i32 0, i32 1
  %arrayidx214 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld213, i32 0, i64 0
  %rtint215 = bitcast %union.rtunion_def* %arrayidx214 to i32*
  %159 = load i32, i32* %rtint215, align 4
  %idxprom216 = sext i32 %159 to i64
  %160 = load i32*, i32** @uid_luid, align 8
  %arrayidx217 = getelementptr inbounds i32, i32* %160, i64 %idxprom216
  %161 = load i32, i32* %arrayidx217, align 4
  br label %cond.end.219

cond.false.218:                                   ; preds = %lor.lhs.false.204
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 5754, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @__FUNCTION__.record_giv, i32 0, i32 0)) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end.219

cond.end.219:                                     ; preds = %162, %cond.true.211
  %cond220 = phi i32 [ %161, %cond.true.211 ], [ -1, %162 ]
  %163 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg.addr, align 8
  %fld221 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %163, i32 0, i32 1
  %arrayidx222 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld221, i32 0, i64 0
  %rtuint223 = bitcast %union.rtunion_def* %arrayidx222 to i32*
  %164 = load i32, i32* %rtuint223, align 4
  %idxprom224 = zext i32 %164 to i64
  %165 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %data225 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %165, i32 0, i32 4
  %reg226 = bitcast %union.varray_data_tag* %data225 to [1 x %struct.reg_info_def*]*
  %arrayidx227 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %reg226, i32 0, i64 %idxprom224
  %166 = load %struct.reg_info_def*, %struct.reg_info_def** %arrayidx227, align 8
  %first_uid228 = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %166, i32 0, i32 0
  %167 = load i32, i32* %first_uid228, align 4
  %idxprom229 = sext i32 %167 to i64
  %168 = load i32*, i32** @uid_luid, align 8
  %arrayidx230 = getelementptr inbounds i32, i32* %168, i64 %idxprom229
  %169 = load i32, i32* %arrayidx230, align 4
  %cmp231 = icmp sge i32 %cond220, %169
  br i1 %cmp231, label %land.lhs.true.233, label %if.end.269

land.lhs.true.233:                                ; preds = %cond.end.219
  %170 = load %struct.induction*, %struct.induction** %b, align 8
  %insn234 = getelementptr inbounds %struct.induction, %struct.induction* %170, i32 0, i32 0
  %171 = load %struct.rtx_def*, %struct.rtx_def** %insn234, align 8
  %fld235 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %171, i32 0, i32 1
  %arrayidx236 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld235, i32 0, i64 0
  %rtint237 = bitcast %union.rtunion_def* %arrayidx236 to i32*
  %172 = load i32, i32* %rtint237, align 4
  %173 = load i32, i32* @max_uid_for_loop, align 4
  %cmp238 = icmp slt i32 %172, %173
  br i1 %cmp238, label %cond.true.240, label %cond.false.247

cond.true.240:                                    ; preds = %land.lhs.true.233
  %174 = load %struct.induction*, %struct.induction** %b, align 8
  %insn241 = getelementptr inbounds %struct.induction, %struct.induction* %174, i32 0, i32 0
  %175 = load %struct.rtx_def*, %struct.rtx_def** %insn241, align 8
  %fld242 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %175, i32 0, i32 1
  %arrayidx243 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld242, i32 0, i64 0
  %rtint244 = bitcast %union.rtunion_def* %arrayidx243 to i32*
  %176 = load i32, i32* %rtint244, align 4
  %idxprom245 = sext i32 %176 to i64
  %177 = load i32*, i32** @uid_luid, align 8
  %arrayidx246 = getelementptr inbounds i32, i32* %177, i64 %idxprom245
  %178 = load i32, i32* %arrayidx246, align 4
  br label %cond.end.248

cond.false.247:                                   ; preds = %land.lhs.true.233
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 5756, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @__FUNCTION__.record_giv, i32 0, i32 0)) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end.248

cond.end.248:                                     ; preds = %179, %cond.true.240
  %cond249 = phi i32 [ %178, %cond.true.240 ], [ -1, %179 ]
  %180 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg.addr, align 8
  %fld250 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %180, i32 0, i32 1
  %arrayidx251 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld250, i32 0, i64 0
  %rtuint252 = bitcast %union.rtunion_def* %arrayidx251 to i32*
  %181 = load i32, i32* %rtuint252, align 4
  %idxprom253 = zext i32 %181 to i64
  %182 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %data254 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %182, i32 0, i32 4
  %reg255 = bitcast %union.varray_data_tag* %data254 to [1 x %struct.reg_info_def*]*
  %arrayidx256 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %reg255, i32 0, i64 %idxprom253
  %183 = load %struct.reg_info_def*, %struct.reg_info_def** %arrayidx256, align 8
  %last_uid257 = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %183, i32 0, i32 1
  %184 = load i32, i32* %last_uid257, align 4
  %idxprom258 = sext i32 %184 to i64
  %185 = load i32*, i32** @uid_luid, align 8
  %arrayidx259 = getelementptr inbounds i32, i32* %185, i64 %idxprom258
  %186 = load i32, i32* %arrayidx259, align 4
  %cmp260 = icmp sle i32 %cond249, %186
  br i1 %cmp260, label %if.then.262, label %if.end.269

if.then.262:                                      ; preds = %cond.end.248, %for.body
  %187 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %replaceable263 = getelementptr inbounds %struct.induction, %struct.induction* %187, i32 0, i32 13
  %bf.load264 = load i16, i16* %replaceable263, align 4
  %bf.clear265 = and i16 %bf.load264, -2
  store i16 %bf.clear265, i16* %replaceable263, align 4
  %188 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %not_replaceable = getelementptr inbounds %struct.induction, %struct.induction* %188, i32 0, i32 13
  %bf.load266 = load i16, i16* %not_replaceable, align 4
  %bf.clear267 = and i16 %bf.load266, -3
  %bf.set268 = or i16 %bf.clear267, 2
  store i16 %bf.set268, i16* %not_replaceable, align 4
  br label %for.end

if.end.269:                                       ; preds = %cond.end.248, %cond.end.219
  br label %for.inc

for.inc:                                          ; preds = %if.end.269
  %189 = load %struct.induction*, %struct.induction** %b, align 8
  %next_iv270 = getelementptr inbounds %struct.induction, %struct.induction* %189, i32 0, i32 17
  %190 = load %struct.induction*, %struct.induction** %next_iv270, align 8
  store %struct.induction* %190, %struct.induction** %b, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then.262, %for.cond
  %191 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %replaceable271 = getelementptr inbounds %struct.induction, %struct.induction* %191, i32 0, i32 13
  %bf.load272 = load i16, i16* %replaceable271, align 4
  %bf.clear273 = and i16 %bf.load272, 1
  %bf.cast = zext i16 %bf.clear273 to i32
  %tobool274 = icmp ne i32 %bf.cast, 0
  br i1 %tobool274, label %if.then.275, label %if.end.295

if.then.275:                                      ; preds = %for.end
  %192 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %biv276 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %192, i32 0, i32 2
  %193 = load %struct.induction*, %struct.induction** %biv276, align 8
  store %struct.induction* %193, %struct.induction** %b, align 8
  br label %for.cond.277

for.cond.277:                                     ; preds = %for.inc.292, %if.then.275
  %194 = load %struct.induction*, %struct.induction** %b, align 8
  %tobool278 = icmp ne %struct.induction* %194, null
  br i1 %tobool278, label %for.body.279, label %for.end.294

for.body.279:                                     ; preds = %for.cond.277
  %195 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %196 = load %struct.induction*, %struct.induction** %b, align 8
  %insn280 = getelementptr inbounds %struct.induction, %struct.induction* %196, i32 0, i32 0
  %197 = load %struct.rtx_def*, %struct.rtx_def** %insn280, align 8
  %call281 = call i32 @back_branch_in_range_p(%struct.loop* %195, %struct.rtx_def* %197)
  %tobool282 = icmp ne i32 %call281, 0
  br i1 %tobool282, label %if.then.283, label %if.end.291

if.then.283:                                      ; preds = %for.body.279
  %198 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %replaceable284 = getelementptr inbounds %struct.induction, %struct.induction* %198, i32 0, i32 13
  %bf.load285 = load i16, i16* %replaceable284, align 4
  %bf.clear286 = and i16 %bf.load285, -2
  store i16 %bf.clear286, i16* %replaceable284, align 4
  %199 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %not_replaceable287 = getelementptr inbounds %struct.induction, %struct.induction* %199, i32 0, i32 13
  %bf.load288 = load i16, i16* %not_replaceable287, align 4
  %bf.clear289 = and i16 %bf.load288, -3
  %bf.set290 = or i16 %bf.clear289, 2
  store i16 %bf.set290, i16* %not_replaceable287, align 4
  br label %for.end.294

if.end.291:                                       ; preds = %for.body.279
  br label %for.inc.292

for.inc.292:                                      ; preds = %if.end.291
  %200 = load %struct.induction*, %struct.induction** %b, align 8
  %next_iv293 = getelementptr inbounds %struct.induction, %struct.induction* %200, i32 0, i32 17
  %201 = load %struct.induction*, %struct.induction** %next_iv293, align 8
  store %struct.induction* %201, %struct.induction** %b, align 8
  br label %for.cond.277

for.end.294:                                      ; preds = %if.then.283, %for.cond.277
  br label %if.end.295

if.end.295:                                       ; preds = %for.end.294, %for.end
  br label %if.end.303

if.else.296:                                      ; preds = %lor.lhs.false, %cond.end.184, %if.else.147
  %202 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %replaceable297 = getelementptr inbounds %struct.induction, %struct.induction* %202, i32 0, i32 13
  %bf.load298 = load i16, i16* %replaceable297, align 4
  %bf.clear299 = and i16 %bf.load298, -2
  store i16 %bf.clear299, i16* %replaceable297, align 4
  %203 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %not_replaceable300 = getelementptr inbounds %struct.induction, %struct.induction* %203, i32 0, i32 13
  %bf.load301 = load i16, i16* %not_replaceable300, align 4
  %bf.clear302 = and i16 %bf.load301, -3
  store i16 %bf.clear302, i16* %not_replaceable300, align 4
  br label %if.end.303

if.end.303:                                       ; preds = %if.else.296, %if.end.295
  br label %if.end.304

if.end.304:                                       ; preds = %if.end.303, %if.then.143
  %204 = load %struct.rtx_def*, %struct.rtx_def** %add_val.addr, align 8
  store %struct.rtx_def* %204, %struct.rtx_def** %tem, align 8
  %205 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %no_const_addval = getelementptr inbounds %struct.induction, %struct.induction* %205, i32 0, i32 13
  %bf.load305 = load i16, i16* %no_const_addval, align 4
  %bf.clear306 = and i16 %bf.load305, -2049
  %bf.set307 = or i16 %bf.clear306, 2048
  store i16 %bf.set307, i16* %no_const_addval, align 4
  %206 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %207 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %cmp308 = icmp eq %struct.rtx_def* %206, %207
  br i1 %cmp308, label %if.then.310, label %if.else.311

if.then.310:                                      ; preds = %if.end.304
  br label %if.end.356

if.else.311:                                      ; preds = %if.end.304
  %208 = load %struct.rtx_def*, %struct.rtx_def** %add_val.addr, align 8
  %209 = bitcast %struct.rtx_def* %208 to i32*
  %bf.load312 = load i32, i32* %209, align 8
  %bf.clear313 = and i32 %bf.load312, 65535
  %cmp314 = icmp eq i32 %bf.clear313, 67
  br i1 %cmp314, label %if.then.351, label %lor.lhs.false.316

lor.lhs.false.316:                                ; preds = %if.else.311
  %210 = load %struct.rtx_def*, %struct.rtx_def** %add_val.addr, align 8
  %211 = bitcast %struct.rtx_def* %210 to i32*
  %bf.load317 = load i32, i32* %211, align 8
  %bf.clear318 = and i32 %bf.load317, 65535
  %cmp319 = icmp eq i32 %bf.clear318, 68
  br i1 %cmp319, label %if.then.351, label %lor.lhs.false.321

lor.lhs.false.321:                                ; preds = %lor.lhs.false.316
  %212 = load %struct.rtx_def*, %struct.rtx_def** %add_val.addr, align 8
  %213 = bitcast %struct.rtx_def* %212 to i32*
  %bf.load322 = load i32, i32* %213, align 8
  %bf.clear323 = and i32 %bf.load322, 65535
  %cmp324 = icmp eq i32 %bf.clear323, 54
  br i1 %cmp324, label %if.then.351, label %lor.lhs.false.326

lor.lhs.false.326:                                ; preds = %lor.lhs.false.321
  %214 = load %struct.rtx_def*, %struct.rtx_def** %add_val.addr, align 8
  %215 = bitcast %struct.rtx_def* %214 to i32*
  %bf.load327 = load i32, i32* %215, align 8
  %bf.clear328 = and i32 %bf.load327, 65535
  %cmp329 = icmp eq i32 %bf.clear328, 55
  br i1 %cmp329, label %if.then.351, label %lor.lhs.false.331

lor.lhs.false.331:                                ; preds = %lor.lhs.false.326
  %216 = load %struct.rtx_def*, %struct.rtx_def** %add_val.addr, align 8
  %217 = bitcast %struct.rtx_def* %216 to i32*
  %bf.load332 = load i32, i32* %217, align 8
  %bf.clear333 = and i32 %bf.load332, 65535
  %cmp334 = icmp eq i32 %bf.clear333, 58
  br i1 %cmp334, label %if.then.351, label %lor.lhs.false.336

lor.lhs.false.336:                                ; preds = %lor.lhs.false.331
  %218 = load %struct.rtx_def*, %struct.rtx_def** %add_val.addr, align 8
  %219 = bitcast %struct.rtx_def* %218 to i32*
  %bf.load337 = load i32, i32* %219, align 8
  %bf.clear338 = and i32 %bf.load337, 65535
  %cmp339 = icmp eq i32 %bf.clear338, 134
  br i1 %cmp339, label %if.then.351, label %lor.lhs.false.341

lor.lhs.false.341:                                ; preds = %lor.lhs.false.336
  %220 = load %struct.rtx_def*, %struct.rtx_def** %add_val.addr, align 8
  %221 = bitcast %struct.rtx_def* %220 to i32*
  %bf.load342 = load i32, i32* %221, align 8
  %bf.clear343 = and i32 %bf.load342, 65535
  %cmp344 = icmp eq i32 %bf.clear343, 56
  br i1 %cmp344, label %if.then.351, label %lor.lhs.false.346

lor.lhs.false.346:                                ; preds = %lor.lhs.false.341
  %222 = load %struct.rtx_def*, %struct.rtx_def** %add_val.addr, align 8
  %223 = bitcast %struct.rtx_def* %222 to i32*
  %bf.load347 = load i32, i32* %223, align 8
  %bf.clear348 = and i32 %bf.load347, 65535
  %cmp349 = icmp eq i32 %bf.clear348, 140
  br i1 %cmp349, label %if.then.351, label %if.end.355

if.then.351:                                      ; preds = %lor.lhs.false.346, %lor.lhs.false.341, %lor.lhs.false.336, %lor.lhs.false.331, %lor.lhs.false.326, %lor.lhs.false.321, %lor.lhs.false.316, %if.else.311
  %224 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %no_const_addval352 = getelementptr inbounds %struct.induction, %struct.induction* %224, i32 0, i32 13
  %bf.load353 = load i16, i16* %no_const_addval352, align 4
  %bf.clear354 = and i16 %bf.load353, -2049
  store i16 %bf.clear354, i16* %no_const_addval352, align 4
  br label %if.end.355

if.end.355:                                       ; preds = %if.then.351, %lor.lhs.false.346
  br label %if.end.356

if.end.356:                                       ; preds = %if.end.355, %if.then.310
  %225 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %226 = bitcast %struct.rtx_def* %225 to i32*
  %bf.load357 = load i32, i32* %226, align 8
  %bf.clear358 = and i32 %bf.load357, 65535
  %cmp359 = icmp eq i32 %bf.clear358, 75
  br i1 %cmp359, label %if.then.361, label %if.end.456

if.then.361:                                      ; preds = %if.end.356
  br label %while.body

while.body:                                       ; preds = %if.then.361, %if.end.387
  %227 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %fld362 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %227, i32 0, i32 1
  %arrayidx363 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld362, i32 0, i64 0
  %rtx364 = bitcast %union.rtunion_def* %arrayidx363 to %struct.rtx_def**
  %228 = load %struct.rtx_def*, %struct.rtx_def** %rtx364, align 8
  %229 = bitcast %struct.rtx_def* %228 to i32*
  %bf.load365 = load i32, i32* %229, align 8
  %bf.clear366 = and i32 %bf.load365, 65535
  %cmp367 = icmp eq i32 %bf.clear366, 75
  br i1 %cmp367, label %if.then.369, label %if.else.373

if.then.369:                                      ; preds = %while.body
  %230 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %fld370 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %230, i32 0, i32 1
  %arrayidx371 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld370, i32 0, i64 0
  %rtx372 = bitcast %union.rtunion_def* %arrayidx371 to %struct.rtx_def**
  %231 = load %struct.rtx_def*, %struct.rtx_def** %rtx372, align 8
  store %struct.rtx_def* %231, %struct.rtx_def** %tem, align 8
  br label %if.end.387

if.else.373:                                      ; preds = %while.body
  %232 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %fld374 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %232, i32 0, i32 1
  %arrayidx375 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld374, i32 0, i64 1
  %rtx376 = bitcast %union.rtunion_def* %arrayidx375 to %struct.rtx_def**
  %233 = load %struct.rtx_def*, %struct.rtx_def** %rtx376, align 8
  %234 = bitcast %struct.rtx_def* %233 to i32*
  %bf.load377 = load i32, i32* %234, align 8
  %bf.clear378 = and i32 %bf.load377, 65535
  %cmp379 = icmp eq i32 %bf.clear378, 75
  br i1 %cmp379, label %if.then.381, label %if.else.385

if.then.381:                                      ; preds = %if.else.373
  %235 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %fld382 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %235, i32 0, i32 1
  %arrayidx383 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld382, i32 0, i64 1
  %rtx384 = bitcast %union.rtunion_def* %arrayidx383 to %struct.rtx_def**
  %236 = load %struct.rtx_def*, %struct.rtx_def** %rtx384, align 8
  store %struct.rtx_def* %236, %struct.rtx_def** %tem, align 8
  br label %if.end.386

if.else.385:                                      ; preds = %if.else.373
  br label %while.end

if.end.386:                                       ; preds = %if.then.381
  br label %if.end.387

if.end.387:                                       ; preds = %if.end.386, %if.then.369
  br label %while.body

while.end:                                        ; preds = %if.else.385
  %237 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %fld388 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %237, i32 0, i32 1
  %arrayidx389 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld388, i32 0, i64 1
  %rtx390 = bitcast %union.rtunion_def* %arrayidx389 to %struct.rtx_def**
  %238 = load %struct.rtx_def*, %struct.rtx_def** %rtx390, align 8
  %239 = bitcast %struct.rtx_def* %238 to i32*
  %bf.load391 = load i32, i32* %239, align 8
  %bf.clear392 = and i32 %bf.load391, 65535
  %cmp393 = icmp eq i32 %bf.clear392, 67
  br i1 %cmp393, label %if.then.451, label %lor.lhs.false.395

lor.lhs.false.395:                                ; preds = %while.end
  %240 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %fld396 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %240, i32 0, i32 1
  %arrayidx397 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld396, i32 0, i64 1
  %rtx398 = bitcast %union.rtunion_def* %arrayidx397 to %struct.rtx_def**
  %241 = load %struct.rtx_def*, %struct.rtx_def** %rtx398, align 8
  %242 = bitcast %struct.rtx_def* %241 to i32*
  %bf.load399 = load i32, i32* %242, align 8
  %bf.clear400 = and i32 %bf.load399, 65535
  %cmp401 = icmp eq i32 %bf.clear400, 68
  br i1 %cmp401, label %if.then.451, label %lor.lhs.false.403

lor.lhs.false.403:                                ; preds = %lor.lhs.false.395
  %243 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %fld404 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %243, i32 0, i32 1
  %arrayidx405 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld404, i32 0, i64 1
  %rtx406 = bitcast %union.rtunion_def* %arrayidx405 to %struct.rtx_def**
  %244 = load %struct.rtx_def*, %struct.rtx_def** %rtx406, align 8
  %245 = bitcast %struct.rtx_def* %244 to i32*
  %bf.load407 = load i32, i32* %245, align 8
  %bf.clear408 = and i32 %bf.load407, 65535
  %cmp409 = icmp eq i32 %bf.clear408, 54
  br i1 %cmp409, label %if.then.451, label %lor.lhs.false.411

lor.lhs.false.411:                                ; preds = %lor.lhs.false.403
  %246 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %fld412 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %246, i32 0, i32 1
  %arrayidx413 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld412, i32 0, i64 1
  %rtx414 = bitcast %union.rtunion_def* %arrayidx413 to %struct.rtx_def**
  %247 = load %struct.rtx_def*, %struct.rtx_def** %rtx414, align 8
  %248 = bitcast %struct.rtx_def* %247 to i32*
  %bf.load415 = load i32, i32* %248, align 8
  %bf.clear416 = and i32 %bf.load415, 65535
  %cmp417 = icmp eq i32 %bf.clear416, 55
  br i1 %cmp417, label %if.then.451, label %lor.lhs.false.419

lor.lhs.false.419:                                ; preds = %lor.lhs.false.411
  %249 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %fld420 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %249, i32 0, i32 1
  %arrayidx421 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld420, i32 0, i64 1
  %rtx422 = bitcast %union.rtunion_def* %arrayidx421 to %struct.rtx_def**
  %250 = load %struct.rtx_def*, %struct.rtx_def** %rtx422, align 8
  %251 = bitcast %struct.rtx_def* %250 to i32*
  %bf.load423 = load i32, i32* %251, align 8
  %bf.clear424 = and i32 %bf.load423, 65535
  %cmp425 = icmp eq i32 %bf.clear424, 58
  br i1 %cmp425, label %if.then.451, label %lor.lhs.false.427

lor.lhs.false.427:                                ; preds = %lor.lhs.false.419
  %252 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %fld428 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %252, i32 0, i32 1
  %arrayidx429 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld428, i32 0, i64 1
  %rtx430 = bitcast %union.rtunion_def* %arrayidx429 to %struct.rtx_def**
  %253 = load %struct.rtx_def*, %struct.rtx_def** %rtx430, align 8
  %254 = bitcast %struct.rtx_def* %253 to i32*
  %bf.load431 = load i32, i32* %254, align 8
  %bf.clear432 = and i32 %bf.load431, 65535
  %cmp433 = icmp eq i32 %bf.clear432, 134
  br i1 %cmp433, label %if.then.451, label %lor.lhs.false.435

lor.lhs.false.435:                                ; preds = %lor.lhs.false.427
  %255 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %fld436 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %255, i32 0, i32 1
  %arrayidx437 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld436, i32 0, i64 1
  %rtx438 = bitcast %union.rtunion_def* %arrayidx437 to %struct.rtx_def**
  %256 = load %struct.rtx_def*, %struct.rtx_def** %rtx438, align 8
  %257 = bitcast %struct.rtx_def* %256 to i32*
  %bf.load439 = load i32, i32* %257, align 8
  %bf.clear440 = and i32 %bf.load439, 65535
  %cmp441 = icmp eq i32 %bf.clear440, 56
  br i1 %cmp441, label %if.then.451, label %lor.lhs.false.443

lor.lhs.false.443:                                ; preds = %lor.lhs.false.435
  %258 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %fld444 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %258, i32 0, i32 1
  %arrayidx445 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld444, i32 0, i64 1
  %rtx446 = bitcast %union.rtunion_def* %arrayidx445 to %struct.rtx_def**
  %259 = load %struct.rtx_def*, %struct.rtx_def** %rtx446, align 8
  %260 = bitcast %struct.rtx_def* %259 to i32*
  %bf.load447 = load i32, i32* %260, align 8
  %bf.clear448 = and i32 %bf.load447, 65535
  %cmp449 = icmp eq i32 %bf.clear448, 140
  br i1 %cmp449, label %if.then.451, label %if.end.455

if.then.451:                                      ; preds = %lor.lhs.false.443, %lor.lhs.false.435, %lor.lhs.false.427, %lor.lhs.false.419, %lor.lhs.false.411, %lor.lhs.false.403, %lor.lhs.false.395, %while.end
  %261 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %no_const_addval452 = getelementptr inbounds %struct.induction, %struct.induction* %261, i32 0, i32 13
  %bf.load453 = load i16, i16* %no_const_addval452, align 4
  %bf.clear454 = and i16 %bf.load453, -2049
  store i16 %bf.clear454, i16* %no_const_addval452, align 4
  br label %if.end.455

if.end.455:                                       ; preds = %if.then.451, %lor.lhs.false.443
  br label %if.end.456

if.end.456:                                       ; preds = %if.end.455, %if.end.356
  %262 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %tobool457 = icmp ne %struct._IO_FILE* %262, null
  br i1 %tobool457, label %if.then.458, label %if.end.459

if.then.458:                                      ; preds = %if.end.456
  %263 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %264 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  call void @loop_giv_dump(%struct.induction* %263, %struct._IO_FILE* %264, i32 0)
  br label %if.end.459

if.end.459:                                       ; preds = %if.then.458, %if.end.456
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @find_mem_givs(%struct.loop* %loop, %struct.rtx_def* %x, %struct.rtx_def* %insn, i32 %not_every_iteration, i32 %maybe_multiple) #0 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %x.addr = alloca %struct.rtx_def*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  %not_every_iteration.addr = alloca i32, align 4
  %maybe_multiple.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %code = alloca i32, align 4
  %fmt = alloca i8*, align 8
  %src_reg = alloca %struct.rtx_def*, align 8
  %add_val = alloca %struct.rtx_def*, align 8
  %mult_val = alloca %struct.rtx_def*, align 8
  %ext_val = alloca %struct.rtx_def*, align 8
  %benefit = alloca i32, align 4
  %v = alloca %struct.induction*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  store i32 %not_every_iteration, i32* %not_every_iteration.addr, align 4
  store i32 %maybe_multiple, i32* %maybe_multiple.addr, align 4
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %cmp = icmp eq %struct.rtx_def* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %for.end.47

if.end:                                           ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load = load i32, i32* %2, align 8
  %bf.clear = and i32 %bf.load, 65535
  store i32 %bf.clear, i32* %code, align 4
  %3 = load i32, i32* %code, align 4
  switch i32 %3, label %sw.default [
    i32 61, label %sw.bb
    i32 54, label %sw.bb
    i32 58, label %sw.bb
    i32 55, label %sw.bb
    i32 68, label %sw.bb
    i32 67, label %sw.bb
    i32 59, label %sw.bb
    i32 69, label %sw.bb
    i32 44, label %sw.bb
    i32 45, label %sw.bb
    i32 48, label %sw.bb
    i32 49, label %sw.bb
    i32 66, label %sw.bb.1
  ]

sw.bb:                                            ; preds = %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end
  br label %for.end.47

sw.bb.1:                                          ; preds = %if.end
  %4 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %8 = bitcast %struct.rtx_def* %7 to i32*
  %bf.load2 = load i32, i32* %8, align 8
  %bf.lshr = lshr i32 %bf.load2, 16
  %bf.clear3 = and i32 %bf.lshr, 255
  %call = call i32 @general_induction_var(%struct.loop* %4, %struct.rtx_def* %6, %struct.rtx_def** %src_reg, %struct.rtx_def** %add_val, %struct.rtx_def** %mult_val, %struct.rtx_def** %ext_val, i32 1, i32* %benefit, i32 %bf.clear3)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then.4, label %if.end.9

if.then.4:                                        ; preds = %sw.bb.1
  %call5 = call noalias i8* @xmalloc(i64 168)
  %9 = bitcast i8* %call5 to %struct.induction*
  store %struct.induction* %9, %struct.induction** %v, align 8
  %10 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %11 = load %struct.induction*, %struct.induction** %v, align 8
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %13 = load %struct.rtx_def*, %struct.rtx_def** %src_reg, align 8
  %14 = load %struct.rtx_def*, %struct.rtx_def** @addr_placeholder, align 8
  %15 = load %struct.rtx_def*, %struct.rtx_def** %mult_val, align 8
  %16 = load %struct.rtx_def*, %struct.rtx_def** %add_val, align 8
  %17 = load %struct.rtx_def*, %struct.rtx_def** %ext_val, align 8
  %18 = load i32, i32* %benefit, align 4
  %19 = load i32, i32* %not_every_iteration.addr, align 4
  %20 = load i32, i32* %maybe_multiple.addr, align 4
  %21 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld6 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld6, i32 0, i64 0
  %rtx8 = bitcast %union.rtunion_def* %arrayidx7 to %struct.rtx_def**
  call void @record_giv(%struct.loop* %10, %struct.induction* %11, %struct.rtx_def* %12, %struct.rtx_def* %13, %struct.rtx_def* %14, %struct.rtx_def* %15, %struct.rtx_def* %16, %struct.rtx_def* %17, i32 %18, i32 0, i32 %19, i32 %20, %struct.rtx_def** %rtx8)
  %22 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %23 = load %struct.induction*, %struct.induction** %v, align 8
  %mem = getelementptr inbounds %struct.induction, %struct.induction* %23, i32 0, i32 7
  store %struct.rtx_def* %22, %struct.rtx_def** %mem, align 8
  br label %if.end.9

if.end.9:                                         ; preds = %if.then.4, %sw.bb.1
  br label %for.end.47

sw.default:                                       ; preds = %if.end
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default
  %24 = load i32, i32* %code, align 4
  %idxprom = sext i32 %24 to i64
  %arrayidx10 = getelementptr inbounds [153 x i8*], [153 x i8*]* @rtx_format, i32 0, i64 %idxprom
  %25 = load i8*, i8** %arrayidx10, align 8
  store i8* %25, i8** %fmt, align 8
  %26 = load i32, i32* %code, align 4
  %idxprom11 = sext i32 %26 to i64
  %arrayidx12 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_length, i32 0, i64 %idxprom11
  %27 = load i8, i8* %arrayidx12, align 1
  %conv = zext i8 %27 to i32
  %sub = sub nsw i32 %conv, 1
  store i32 %sub, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.46, %sw.epilog
  %28 = load i32, i32* %i, align 4
  %cmp13 = icmp sge i32 %28, 0
  br i1 %cmp13, label %for.body, label %for.end.47

for.body:                                         ; preds = %for.cond
  %29 = load i32, i32* %i, align 4
  %idxprom15 = sext i32 %29 to i64
  %30 = load i8*, i8** %fmt, align 8
  %arrayidx16 = getelementptr inbounds i8, i8* %30, i64 %idxprom15
  %31 = load i8, i8* %arrayidx16, align 1
  %conv17 = sext i8 %31 to i32
  %cmp18 = icmp eq i32 %conv17, 101
  br i1 %cmp18, label %if.then.20, label %if.else

if.then.20:                                       ; preds = %for.body
  %32 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %33 = load i32, i32* %i, align 4
  %idxprom21 = sext i32 %33 to i64
  %34 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld22 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %34, i32 0, i32 1
  %arrayidx23 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld22, i32 0, i64 %idxprom21
  %rtx24 = bitcast %union.rtunion_def* %arrayidx23 to %struct.rtx_def**
  %35 = load %struct.rtx_def*, %struct.rtx_def** %rtx24, align 8
  %36 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %37 = load i32, i32* %not_every_iteration.addr, align 4
  %38 = load i32, i32* %maybe_multiple.addr, align 4
  call void @find_mem_givs(%struct.loop* %32, %struct.rtx_def* %35, %struct.rtx_def* %36, i32 %37, i32 %38)
  br label %if.end.45

if.else:                                          ; preds = %for.body
  %39 = load i32, i32* %i, align 4
  %idxprom25 = sext i32 %39 to i64
  %40 = load i8*, i8** %fmt, align 8
  %arrayidx26 = getelementptr inbounds i8, i8* %40, i64 %idxprom25
  %41 = load i8, i8* %arrayidx26, align 1
  %conv27 = sext i8 %41 to i32
  %cmp28 = icmp eq i32 %conv27, 69
  br i1 %cmp28, label %if.then.30, label %if.end.44

if.then.30:                                       ; preds = %if.else
  store i32 0, i32* %j, align 4
  br label %for.cond.31

for.cond.31:                                      ; preds = %for.inc, %if.then.30
  %42 = load i32, i32* %j, align 4
  %43 = load i32, i32* %i, align 4
  %idxprom32 = sext i32 %43 to i64
  %44 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld33 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %44, i32 0, i32 1
  %arrayidx34 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld33, i32 0, i64 %idxprom32
  %rtvec = bitcast %union.rtunion_def* %arrayidx34 to %struct.rtvec_def**
  %45 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec, align 8
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %45, i32 0, i32 0
  %46 = load i32, i32* %num_elem, align 4
  %cmp35 = icmp slt i32 %42, %46
  br i1 %cmp35, label %for.body.37, label %for.end

for.body.37:                                      ; preds = %for.cond.31
  %47 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %48 = load i32, i32* %j, align 4
  %idxprom38 = sext i32 %48 to i64
  %49 = load i32, i32* %i, align 4
  %idxprom39 = sext i32 %49 to i64
  %50 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld40 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %50, i32 0, i32 1
  %arrayidx41 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld40, i32 0, i64 %idxprom39
  %rtvec42 = bitcast %union.rtunion_def* %arrayidx41 to %struct.rtvec_def**
  %51 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec42, align 8
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %51, i32 0, i32 1
  %arrayidx43 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i32 0, i64 %idxprom38
  %52 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx43, align 8
  %53 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %54 = load i32, i32* %not_every_iteration.addr, align 4
  %55 = load i32, i32* %maybe_multiple.addr, align 4
  call void @find_mem_givs(%struct.loop* %47, %struct.rtx_def* %52, %struct.rtx_def* %53, i32 %54, i32 %55)
  br label %for.inc

for.inc:                                          ; preds = %for.body.37
  %56 = load i32, i32* %j, align 4
  %inc = add nsw i32 %56, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond.31

for.end:                                          ; preds = %for.cond.31
  br label %if.end.44

if.end.44:                                        ; preds = %for.end, %if.else
  br label %if.end.45

if.end.45:                                        ; preds = %if.end.44, %if.then.20
  br label %for.inc.46

for.inc.46:                                       ; preds = %if.end.45
  %57 = load i32, i32* %i, align 4
  %dec = add nsw i32 %57, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond

for.end.47:                                       ; preds = %if.then, %sw.bb, %if.end.9, %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @update_giv_derive(%struct.loop* %loop, %struct.rtx_def* %p) #0 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %p.addr = alloca %struct.rtx_def*, align 8
  %ivs = alloca %struct.loop_ivs*, align 8
  %bl = alloca %struct.iv_class*, align 8
  %biv = alloca %struct.induction*, align 8
  %giv = alloca %struct.induction*, align 8
  %tem = alloca %struct.rtx_def*, align 8
  %dummy = alloca i32, align 4
  %ext_val_dummy = alloca %struct.rtx_def*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  store %struct.rtx_def* %p, %struct.rtx_def** %p.addr, align 8
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %aux = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 22
  %1 = load i8*, i8** %aux, align 8
  %2 = bitcast i8* %1 to %struct.loop_info*
  %ivs1 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %2, i32 0, i32 29
  store %struct.loop_ivs* %ivs1, %struct.loop_ivs** %ivs, align 8
  %3 = load %struct.loop_ivs*, %struct.loop_ivs** %ivs, align 8
  %list = getelementptr inbounds %struct.loop_ivs, %struct.loop_ivs* %3, i32 0, i32 2
  %4 = load %struct.iv_class*, %struct.iv_class** %list, align 8
  store %struct.iv_class* %4, %struct.iv_class** %bl, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc.100, %entry
  %5 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %tobool = icmp ne %struct.iv_class* %5, null
  br i1 %tobool, label %for.body, label %for.end.101

for.body:                                         ; preds = %for.cond
  %6 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %biv2 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %6, i32 0, i32 2
  %7 = load %struct.induction*, %struct.induction** %biv2, align 8
  store %struct.induction* %7, %struct.induction** %biv, align 8
  br label %for.cond.3

for.cond.3:                                       ; preds = %for.inc.97, %for.body
  %8 = load %struct.induction*, %struct.induction** %biv, align 8
  %tobool4 = icmp ne %struct.induction* %8, null
  br i1 %tobool4, label %for.body.5, label %for.end.99

for.body.5:                                       ; preds = %for.cond.3
  %9 = load %struct.rtx_def*, %struct.rtx_def** %p.addr, align 8
  %10 = bitcast %struct.rtx_def* %9 to i32*
  %bf.load = load i32, i32* %10, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 36
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body.5
  %11 = load %struct.rtx_def*, %struct.rtx_def** %p.addr, align 8
  %12 = bitcast %struct.rtx_def* %11 to i32*
  %bf.load6 = load i32, i32* %12, align 8
  %bf.clear7 = and i32 %bf.load6, 65535
  %cmp8 = icmp eq i32 %bf.clear7, 33
  br i1 %cmp8, label %if.then, label %lor.lhs.false.9

lor.lhs.false.9:                                  ; preds = %lor.lhs.false
  %13 = load %struct.induction*, %struct.induction** %biv, align 8
  %insn = getelementptr inbounds %struct.induction, %struct.induction* %13, i32 0, i32 0
  %14 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %15 = load %struct.rtx_def*, %struct.rtx_def** %p.addr, align 8
  %cmp10 = icmp eq %struct.rtx_def* %14, %15
  br i1 %cmp10, label %if.then, label %if.end.96

if.then:                                          ; preds = %lor.lhs.false.9, %lor.lhs.false, %for.body.5
  %16 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %giv11 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %16, i32 0, i32 4
  %17 = load %struct.induction*, %struct.induction** %giv11, align 8
  store %struct.induction* %17, %struct.induction** %giv, align 8
  br label %for.cond.12

for.cond.12:                                      ; preds = %for.inc, %if.then
  %18 = load %struct.induction*, %struct.induction** %giv, align 8
  %tobool13 = icmp ne %struct.induction* %18, null
  br i1 %tobool13, label %for.body.14, label %for.end

for.body.14:                                      ; preds = %for.cond.12
  %19 = load %struct.induction*, %struct.induction** %giv, align 8
  %cant_derive = getelementptr inbounds %struct.induction, %struct.induction* %19, i32 0, i32 13
  %bf.load15 = load i16, i16* %cant_derive, align 4
  %bf.lshr = lshr i16 %bf.load15, 6
  %bf.clear16 = and i16 %bf.lshr, 1
  %bf.cast = zext i16 %bf.clear16 to i32
  %tobool17 = icmp ne i32 %bf.cast, 0
  br i1 %tobool17, label %if.then.18, label %if.end

if.then.18:                                       ; preds = %for.body.14
  br label %for.inc

if.end:                                           ; preds = %for.body.14
  %20 = load %struct.rtx_def*, %struct.rtx_def** %p.addr, align 8
  %21 = bitcast %struct.rtx_def* %20 to i32*
  %bf.load19 = load i32, i32* %21, align 8
  %bf.clear20 = and i32 %bf.load19, 65535
  %cmp21 = icmp eq i32 %bf.clear20, 36
  br i1 %cmp21, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.end
  %22 = load %struct.induction*, %struct.induction** %giv, align 8
  %always_computable = getelementptr inbounds %struct.induction, %struct.induction* %22, i32 0, i32 13
  %bf.load22 = load i16, i16* %always_computable, align 4
  %bf.lshr23 = lshr i16 %bf.load22, 3
  %bf.clear24 = and i16 %bf.lshr23, 1
  %bf.cast25 = zext i16 %bf.clear24 to i32
  %tobool26 = icmp ne i32 %bf.cast25, 0
  br i1 %tobool26, label %if.else, label %if.then.27

if.then.27:                                       ; preds = %land.lhs.true
  %23 = load %struct.induction*, %struct.induction** %giv, align 8
  %cant_derive28 = getelementptr inbounds %struct.induction, %struct.induction* %23, i32 0, i32 13
  %bf.load29 = load i16, i16* %cant_derive28, align 4
  %bf.clear30 = and i16 %bf.load29, -65
  %bf.set = or i16 %bf.clear30, 64
  store i16 %bf.set, i16* %cant_derive28, align 4
  br label %if.end.95

if.else:                                          ; preds = %land.lhs.true, %if.end
  %24 = load %struct.induction*, %struct.induction** %giv, align 8
  %mult_val = getelementptr inbounds %struct.induction, %struct.induction* %24, i32 0, i32 8
  %25 = load %struct.rtx_def*, %struct.rtx_def** %mult_val, align 8
  %26 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %cmp31 = icmp eq %struct.rtx_def* %25, %26
  br i1 %cmp31, label %if.then.37, label %lor.lhs.false.32

lor.lhs.false.32:                                 ; preds = %if.else
  %27 = load %struct.induction*, %struct.induction** %giv, align 8
  %replaceable = getelementptr inbounds %struct.induction, %struct.induction* %27, i32 0, i32 13
  %bf.load33 = load i16, i16* %replaceable, align 4
  %bf.clear34 = and i16 %bf.load33, 1
  %bf.cast35 = zext i16 %bf.clear34 to i32
  %tobool36 = icmp ne i32 %bf.cast35, 0
  br i1 %tobool36, label %if.then.37, label %if.else.38

if.then.37:                                       ; preds = %lor.lhs.false.32, %if.else
  br label %for.inc

if.else.38:                                       ; preds = %lor.lhs.false.32
  %28 = load %struct.induction*, %struct.induction** %biv, align 8
  %insn39 = getelementptr inbounds %struct.induction, %struct.induction* %28, i32 0, i32 0
  %29 = load %struct.rtx_def*, %struct.rtx_def** %insn39, align 8
  %30 = load %struct.rtx_def*, %struct.rtx_def** %p.addr, align 8
  %cmp40 = icmp eq %struct.rtx_def* %29, %30
  br i1 %cmp40, label %if.then.41, label %if.else.66

if.then.41:                                       ; preds = %if.else.38
  store %struct.rtx_def* null, %struct.rtx_def** %tem, align 8
  %31 = load %struct.induction*, %struct.induction** %biv, align 8
  %mult_val42 = getelementptr inbounds %struct.induction, %struct.induction* %31, i32 0, i32 8
  %32 = load %struct.rtx_def*, %struct.rtx_def** %mult_val42, align 8
  %33 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %cmp43 = icmp eq %struct.rtx_def* %32, %33
  br i1 %cmp43, label %if.then.44, label %if.end.47

if.then.44:                                       ; preds = %if.then.41
  %34 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %35 = load %struct.induction*, %struct.induction** %giv, align 8
  %mode = getelementptr inbounds %struct.induction, %struct.induction* %35, i32 0, i32 6
  %36 = load i32, i32* %mode, align 4
  %37 = load %struct.induction*, %struct.induction** %biv, align 8
  %add_val = getelementptr inbounds %struct.induction, %struct.induction* %37, i32 0, i32 9
  %38 = load %struct.rtx_def*, %struct.rtx_def** %add_val, align 8
  %39 = load %struct.induction*, %struct.induction** %giv, align 8
  %mult_val45 = getelementptr inbounds %struct.induction, %struct.induction* %39, i32 0, i32 8
  %40 = load %struct.rtx_def*, %struct.rtx_def** %mult_val45, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 78, i32 %36, %struct.rtx_def* %38, %struct.rtx_def* %40)
  %call46 = call %struct.rtx_def* @simplify_giv_expr(%struct.loop* %34, %struct.rtx_def* %call, %struct.rtx_def** %ext_val_dummy, i32* %dummy)
  store %struct.rtx_def* %call46, %struct.rtx_def** %tem, align 8
  br label %if.end.47

if.end.47:                                        ; preds = %if.then.44, %if.then.41
  %41 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %tobool48 = icmp ne %struct.rtx_def* %41, null
  br i1 %tobool48, label %land.lhs.true.49, label %if.end.56

land.lhs.true.49:                                 ; preds = %if.end.47
  %42 = load %struct.induction*, %struct.induction** %giv, align 8
  %derive_adjustment = getelementptr inbounds %struct.induction, %struct.induction* %42, i32 0, i32 15
  %43 = load %struct.rtx_def*, %struct.rtx_def** %derive_adjustment, align 8
  %tobool50 = icmp ne %struct.rtx_def* %43, null
  br i1 %tobool50, label %if.then.51, label %if.end.56

if.then.51:                                       ; preds = %land.lhs.true.49
  %44 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %45 = load %struct.induction*, %struct.induction** %giv, align 8
  %mode52 = getelementptr inbounds %struct.induction, %struct.induction* %45, i32 0, i32 6
  %46 = load i32, i32* %mode52, align 4
  %47 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %48 = load %struct.induction*, %struct.induction** %giv, align 8
  %derive_adjustment53 = getelementptr inbounds %struct.induction, %struct.induction* %48, i32 0, i32 15
  %49 = load %struct.rtx_def*, %struct.rtx_def** %derive_adjustment53, align 8
  %call54 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %46, %struct.rtx_def* %47, %struct.rtx_def* %49)
  %call55 = call %struct.rtx_def* @simplify_giv_expr(%struct.loop* %44, %struct.rtx_def* %call54, %struct.rtx_def** %ext_val_dummy, i32* %dummy)
  store %struct.rtx_def* %call55, %struct.rtx_def** %tem, align 8
  br label %if.end.56

if.end.56:                                        ; preds = %if.then.51, %land.lhs.true.49, %if.end.47
  %50 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %tobool57 = icmp ne %struct.rtx_def* %50, null
  br i1 %tobool57, label %if.then.58, label %if.else.60

if.then.58:                                       ; preds = %if.end.56
  %51 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %52 = load %struct.induction*, %struct.induction** %giv, align 8
  %derive_adjustment59 = getelementptr inbounds %struct.induction, %struct.induction* %52, i32 0, i32 15
  store %struct.rtx_def* %51, %struct.rtx_def** %derive_adjustment59, align 8
  br label %if.end.65

if.else.60:                                       ; preds = %if.end.56
  %53 = load %struct.induction*, %struct.induction** %giv, align 8
  %cant_derive61 = getelementptr inbounds %struct.induction, %struct.induction* %53, i32 0, i32 13
  %bf.load62 = load i16, i16* %cant_derive61, align 4
  %bf.clear63 = and i16 %bf.load62, -65
  %bf.set64 = or i16 %bf.clear63, 64
  store i16 %bf.set64, i16* %cant_derive61, align 4
  br label %if.end.65

if.end.65:                                        ; preds = %if.else.60, %if.then.58
  br label %if.end.93

if.else.66:                                       ; preds = %if.else.38
  %54 = load %struct.rtx_def*, %struct.rtx_def** %p.addr, align 8
  %55 = bitcast %struct.rtx_def* %54 to i32*
  %bf.load67 = load i32, i32* %55, align 8
  %bf.clear68 = and i32 %bf.load67, 65535
  %cmp69 = icmp eq i32 %bf.clear68, 36
  br i1 %cmp69, label %land.lhs.true.70, label %lor.lhs.false.77

land.lhs.true.70:                                 ; preds = %if.else.66
  %56 = load %struct.induction*, %struct.induction** %biv, align 8
  %always_computable71 = getelementptr inbounds %struct.induction, %struct.induction* %56, i32 0, i32 13
  %bf.load72 = load i16, i16* %always_computable71, align 4
  %bf.lshr73 = lshr i16 %bf.load72, 3
  %bf.clear74 = and i16 %bf.lshr73, 1
  %bf.cast75 = zext i16 %bf.clear74 to i32
  %tobool76 = icmp ne i32 %bf.cast75, 0
  br i1 %tobool76, label %lor.lhs.false.77, label %if.then.87

lor.lhs.false.77:                                 ; preds = %land.lhs.true.70, %if.else.66
  %57 = load %struct.rtx_def*, %struct.rtx_def** %p.addr, align 8
  %58 = bitcast %struct.rtx_def* %57 to i32*
  %bf.load78 = load i32, i32* %58, align 8
  %bf.clear79 = and i32 %bf.load78, 65535
  %cmp80 = icmp eq i32 %bf.clear79, 33
  br i1 %cmp80, label %land.lhs.true.81, label %if.end.92

land.lhs.true.81:                                 ; preds = %lor.lhs.false.77
  %59 = load %struct.induction*, %struct.induction** %biv, align 8
  %maybe_multiple = getelementptr inbounds %struct.induction, %struct.induction* %59, i32 0, i32 13
  %bf.load82 = load i16, i16* %maybe_multiple, align 4
  %bf.lshr83 = lshr i16 %bf.load82, 5
  %bf.clear84 = and i16 %bf.lshr83, 1
  %bf.cast85 = zext i16 %bf.clear84 to i32
  %tobool86 = icmp ne i32 %bf.cast85, 0
  br i1 %tobool86, label %if.then.87, label %if.end.92

if.then.87:                                       ; preds = %land.lhs.true.81, %land.lhs.true.70
  %60 = load %struct.induction*, %struct.induction** %giv, align 8
  %cant_derive88 = getelementptr inbounds %struct.induction, %struct.induction* %60, i32 0, i32 13
  %bf.load89 = load i16, i16* %cant_derive88, align 4
  %bf.clear90 = and i16 %bf.load89, -65
  %bf.set91 = or i16 %bf.clear90, 64
  store i16 %bf.set91, i16* %cant_derive88, align 4
  br label %if.end.92

if.end.92:                                        ; preds = %if.then.87, %land.lhs.true.81, %lor.lhs.false.77
  br label %if.end.93

if.end.93:                                        ; preds = %if.end.92, %if.end.65
  br label %if.end.94

if.end.94:                                        ; preds = %if.end.93
  br label %if.end.95

if.end.95:                                        ; preds = %if.end.94, %if.then.27
  br label %for.inc

for.inc:                                          ; preds = %if.end.95, %if.then.37, %if.then.18
  %61 = load %struct.induction*, %struct.induction** %giv, align 8
  %next_iv = getelementptr inbounds %struct.induction, %struct.induction* %61, i32 0, i32 17
  %62 = load %struct.induction*, %struct.induction** %next_iv, align 8
  store %struct.induction* %62, %struct.induction** %giv, align 8
  br label %for.cond.12

for.end:                                          ; preds = %for.cond.12
  br label %if.end.96

if.end.96:                                        ; preds = %for.end, %lor.lhs.false.9
  br label %for.inc.97

for.inc.97:                                       ; preds = %if.end.96
  %63 = load %struct.induction*, %struct.induction** %biv, align 8
  %next_iv98 = getelementptr inbounds %struct.induction, %struct.induction* %63, i32 0, i32 17
  %64 = load %struct.induction*, %struct.induction** %next_iv98, align 8
  store %struct.induction* %64, %struct.induction** %biv, align 8
  br label %for.cond.3

for.end.99:                                       ; preds = %for.cond.3
  br label %for.inc.100

for.inc.100:                                      ; preds = %for.end.99
  %65 = load %struct.iv_class*, %struct.iv_class** %bl, align 8
  %next = getelementptr inbounds %struct.iv_class, %struct.iv_class* %65, i32 0, i32 9
  %66 = load %struct.iv_class*, %struct.iv_class** %next, align 8
  store %struct.iv_class* %66, %struct.iv_class** %bl, align 8
  br label %for.cond

for.end.101:                                      ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define internal %struct.rtx_def* @simplify_giv_expr(%struct.loop* %loop, %struct.rtx_def* %x, %struct.rtx_def** %ext_val, i32* %benefit) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %x.addr = alloca %struct.rtx_def*, align 8
  %ext_val.addr = alloca %struct.rtx_def**, align 8
  %benefit.addr = alloca i32*, align 8
  %ivs = alloca %struct.loop_ivs*, align 8
  %regs = alloca %struct.loop_regs*, align 8
  %mode = alloca i32, align 4
  %arg0 = alloca %struct.rtx_def*, align 8
  %arg1 = alloca %struct.rtx_def*, align 8
  %tem = alloca %struct.rtx_def*, align 8
  %v = alloca %struct.induction*, align 8
  %single_use = alloca %struct.rtx_def*, align 8
  %m = alloca %struct.movable*, align 8
  %movables = alloca %struct.loop_movables*, align 8
  %i = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  store %struct.rtx_def** %ext_val, %struct.rtx_def*** %ext_val.addr, align 8
  store i32* %benefit, i32** %benefit.addr, align 8
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %aux = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 22
  %1 = load i8*, i8** %aux, align 8
  %2 = bitcast i8* %1 to %struct.loop_info*
  %ivs1 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %2, i32 0, i32 29
  store %struct.loop_ivs* %ivs1, %struct.loop_ivs** %ivs, align 8
  %3 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %aux2 = getelementptr inbounds %struct.loop, %struct.loop* %3, i32 0, i32 22
  %4 = load i8*, i8** %aux2, align 8
  %5 = bitcast i8* %4 to %struct.loop_info*
  %regs3 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %5, i32 0, i32 28
  store %struct.loop_regs* %regs3, %struct.loop_regs** %regs, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %7 = bitcast %struct.rtx_def* %6 to i32*
  %bf.load = load i32, i32* %7, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  store i32 %bf.clear, i32* %mode, align 4
  %8 = load i32, i32* %mode, align 4
  %cmp = icmp ne i32 %8, 0
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %9 = load i32, i32* %mode, align 4
  %idxprom = sext i32 %9 to i64
  %arrayidx = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom
  %10 = load i32, i32* %arrayidx, align 4
  %cmp4 = icmp ne i32 %10, 1
  br i1 %cmp4, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %11 = load i32, i32* %mode, align 4
  %idxprom5 = sext i32 %11 to i64
  %arrayidx6 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom5
  %12 = load i16, i16* %arrayidx6, align 2
  %conv = zext i16 %12 to i32
  %cmp7 = icmp sgt i32 %conv, 64
  br i1 %cmp7, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false, %entry
  %13 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %14 = bitcast %struct.rtx_def* %13 to i32*
  %bf.load9 = load i32, i32* %14, align 8
  %bf.clear10 = and i32 %bf.load9, 65535
  switch i32 %bf.clear10, label %sw.default.583 [
    i32 75, label %sw.bb
    i32 76, label %sw.bb.180
    i32 78, label %sw.bb.190
    i32 87, label %sw.bb.319
    i32 77, label %sw.bb.341
    i32 86, label %sw.bb.347
    i32 48, label %sw.bb.354
    i32 120, label %sw.bb.355
    i32 121, label %sw.bb.355
    i32 122, label %sw.bb.355
    i32 61, label %sw.bb.378
  ]

sw.bb:                                            ; preds = %if.end
  %15 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %16 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1
  %arrayidx11 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx11 to %struct.rtx_def**
  %17 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %18 = load %struct.rtx_def**, %struct.rtx_def*** %ext_val.addr, align 8
  %19 = load i32*, i32** %benefit.addr, align 8
  %call = call %struct.rtx_def* @simplify_giv_expr(%struct.loop* %15, %struct.rtx_def* %17, %struct.rtx_def** %18, i32* %19)
  store %struct.rtx_def* %call, %struct.rtx_def** %arg0, align 8
  %20 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %21 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld12 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1
  %arrayidx13 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld12, i32 0, i64 1
  %rtx14 = bitcast %union.rtunion_def* %arrayidx13 to %struct.rtx_def**
  %22 = load %struct.rtx_def*, %struct.rtx_def** %rtx14, align 8
  %23 = load %struct.rtx_def**, %struct.rtx_def*** %ext_val.addr, align 8
  %24 = load i32*, i32** %benefit.addr, align 8
  %call15 = call %struct.rtx_def* @simplify_giv_expr(%struct.loop* %20, %struct.rtx_def* %22, %struct.rtx_def** %23, i32* %24)
  store %struct.rtx_def* %call15, %struct.rtx_def** %arg1, align 8
  %25 = load %struct.rtx_def*, %struct.rtx_def** %arg0, align 8
  %cmp16 = icmp eq %struct.rtx_def* %25, null
  br i1 %cmp16, label %if.then.21, label %lor.lhs.false.18

lor.lhs.false.18:                                 ; preds = %sw.bb
  %26 = load %struct.rtx_def*, %struct.rtx_def** %arg1, align 8
  %cmp19 = icmp eq %struct.rtx_def* %26, null
  br i1 %cmp19, label %if.then.21, label %if.end.22

if.then.21:                                       ; preds = %lor.lhs.false.18, %sw.bb
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end.22:                                        ; preds = %lor.lhs.false.18
  %27 = load %struct.rtx_def*, %struct.rtx_def** %arg0, align 8
  %28 = bitcast %struct.rtx_def* %27 to i32*
  %bf.load23 = load i32, i32* %28, align 8
  %bf.clear24 = and i32 %bf.load23, 65535
  %cmp25 = icmp eq i32 %bf.clear24, 48
  br i1 %cmp25, label %land.lhs.true.32, label %lor.lhs.false.27

lor.lhs.false.27:                                 ; preds = %if.end.22
  %29 = load %struct.rtx_def*, %struct.rtx_def** %arg0, align 8
  %30 = bitcast %struct.rtx_def* %29 to i32*
  %bf.load28 = load i32, i32* %30, align 8
  %bf.clear29 = and i32 %bf.load28, 65535
  %cmp30 = icmp eq i32 %bf.clear29, 54
  br i1 %cmp30, label %land.lhs.true.32, label %if.end.48

land.lhs.true.32:                                 ; preds = %lor.lhs.false.27, %if.end.22
  %31 = load %struct.rtx_def*, %struct.rtx_def** %arg0, align 8
  %32 = bitcast %struct.rtx_def* %31 to i32*
  %bf.load33 = load i32, i32* %32, align 8
  %bf.clear34 = and i32 %bf.load33, 65535
  %cmp35 = icmp eq i32 %bf.clear34, 48
  br i1 %cmp35, label %land.lhs.true.37, label %lor.lhs.false.42

land.lhs.true.37:                                 ; preds = %land.lhs.true.32
  %33 = load %struct.rtx_def*, %struct.rtx_def** %arg1, align 8
  %34 = bitcast %struct.rtx_def* %33 to i32*
  %bf.load38 = load i32, i32* %34, align 8
  %bf.clear39 = and i32 %bf.load38, 65535
  %cmp40 = icmp eq i32 %bf.clear39, 48
  br i1 %cmp40, label %if.end.48, label %lor.lhs.false.42

lor.lhs.false.42:                                 ; preds = %land.lhs.true.37, %land.lhs.true.32
  %35 = load %struct.rtx_def*, %struct.rtx_def** %arg1, align 8
  %36 = bitcast %struct.rtx_def* %35 to i32*
  %bf.load43 = load i32, i32* %36, align 8
  %bf.clear44 = and i32 %bf.load43, 65535
  %cmp45 = icmp eq i32 %bf.clear44, 54
  br i1 %cmp45, label %if.end.48, label %if.then.47

if.then.47:                                       ; preds = %lor.lhs.false.42
  %37 = load %struct.rtx_def*, %struct.rtx_def** %arg0, align 8
  store %struct.rtx_def* %37, %struct.rtx_def** %tem, align 8
  %38 = load %struct.rtx_def*, %struct.rtx_def** %arg1, align 8
  store %struct.rtx_def* %38, %struct.rtx_def** %arg0, align 8
  %39 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  store %struct.rtx_def* %39, %struct.rtx_def** %arg1, align 8
  br label %if.end.48

if.end.48:                                        ; preds = %if.then.47, %lor.lhs.false.42, %land.lhs.true.37, %lor.lhs.false.27
  %40 = load %struct.rtx_def*, %struct.rtx_def** %arg1, align 8
  %41 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %cmp49 = icmp eq %struct.rtx_def* %40, %41
  br i1 %cmp49, label %if.then.51, label %if.else

if.then.51:                                       ; preds = %if.end.48
  %42 = load %struct.rtx_def*, %struct.rtx_def** %arg0, align 8
  store %struct.rtx_def* %42, %struct.rtx_def** %retval
  br label %return

if.else:                                          ; preds = %if.end.48
  %43 = load %struct.rtx_def*, %struct.rtx_def** %arg1, align 8
  %44 = bitcast %struct.rtx_def* %43 to i32*
  %bf.load52 = load i32, i32* %44, align 8
  %bf.clear53 = and i32 %bf.load52, 65535
  %cmp54 = icmp eq i32 %bf.clear53, 54
  br i1 %cmp54, label %if.then.61, label %lor.lhs.false.56

lor.lhs.false.56:                                 ; preds = %if.else
  %45 = load %struct.rtx_def*, %struct.rtx_def** %arg1, align 8
  %46 = bitcast %struct.rtx_def* %45 to i32*
  %bf.load57 = load i32, i32* %46, align 8
  %bf.clear58 = and i32 %bf.load57, 65535
  %cmp59 = icmp eq i32 %bf.clear58, 48
  br i1 %cmp59, label %if.then.61, label %if.end.117

if.then.61:                                       ; preds = %lor.lhs.false.56, %if.else
  %47 = load %struct.rtx_def*, %struct.rtx_def** %arg0, align 8
  %48 = bitcast %struct.rtx_def* %47 to i32*
  %bf.load62 = load i32, i32* %48, align 8
  %bf.clear63 = and i32 %bf.load62, 65535
  switch i32 %bf.clear63, label %sw.default [
    i32 54, label %sw.bb.64
    i32 48, label %sw.bb.64
    i32 61, label %sw.bb.105
    i32 78, label %sw.bb.105
    i32 75, label %sw.bb.107
  ]

sw.bb.64:                                         ; preds = %if.then.61, %if.then.61
  %49 = load %struct.rtx_def*, %struct.rtx_def** %arg0, align 8
  %50 = bitcast %struct.rtx_def* %49 to i32*
  %bf.load65 = load i32, i32* %50, align 8
  %bf.clear66 = and i32 %bf.load65, 65535
  %cmp67 = icmp eq i32 %bf.clear66, 48
  br i1 %cmp67, label %if.then.69, label %if.end.73

if.then.69:                                       ; preds = %sw.bb.64
  %51 = load %struct.rtx_def*, %struct.rtx_def** %arg0, align 8
  %fld70 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %51, i32 0, i32 1
  %arrayidx71 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld70, i32 0, i64 0
  %rtx72 = bitcast %union.rtunion_def* %arrayidx71 to %struct.rtx_def**
  %52 = load %struct.rtx_def*, %struct.rtx_def** %rtx72, align 8
  store %struct.rtx_def* %52, %struct.rtx_def** %arg0, align 8
  br label %if.end.73

if.end.73:                                        ; preds = %if.then.69, %sw.bb.64
  %53 = load %struct.rtx_def*, %struct.rtx_def** %arg1, align 8
  %54 = bitcast %struct.rtx_def* %53 to i32*
  %bf.load74 = load i32, i32* %54, align 8
  %bf.clear75 = and i32 %bf.load74, 65535
  %cmp76 = icmp eq i32 %bf.clear75, 48
  br i1 %cmp76, label %if.then.78, label %if.end.82

if.then.78:                                       ; preds = %if.end.73
  %55 = load %struct.rtx_def*, %struct.rtx_def** %arg1, align 8
  %fld79 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %55, i32 0, i32 1
  %arrayidx80 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld79, i32 0, i64 0
  %rtx81 = bitcast %union.rtunion_def* %arrayidx80 to %struct.rtx_def**
  %56 = load %struct.rtx_def*, %struct.rtx_def** %rtx81, align 8
  store %struct.rtx_def* %56, %struct.rtx_def** %arg1, align 8
  br label %if.end.82

if.end.82:                                        ; preds = %if.then.78, %if.end.73
  %57 = load %struct.rtx_def*, %struct.rtx_def** %arg0, align 8
  %58 = bitcast %struct.rtx_def* %57 to i32*
  %bf.load83 = load i32, i32* %58, align 8
  %bf.clear84 = and i32 %bf.load83, 65535
  %cmp85 = icmp eq i32 %bf.clear84, 54
  br i1 %cmp85, label %if.then.87, label %if.end.88

if.then.87:                                       ; preds = %if.end.82
  %59 = load %struct.rtx_def*, %struct.rtx_def** %arg0, align 8
  store %struct.rtx_def* %59, %struct.rtx_def** %tem, align 8
  %60 = load %struct.rtx_def*, %struct.rtx_def** %arg1, align 8
  store %struct.rtx_def* %60, %struct.rtx_def** %arg0, align 8
  %61 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  store %struct.rtx_def* %61, %struct.rtx_def** %arg1, align 8
  br label %if.end.88

if.end.88:                                        ; preds = %if.then.87, %if.end.82
  %62 = load %struct.rtx_def*, %struct.rtx_def** %arg1, align 8
  %63 = bitcast %struct.rtx_def* %62 to i32*
  %bf.load89 = load i32, i32* %63, align 8
  %bf.clear90 = and i32 %bf.load89, 65535
  %cmp91 = icmp eq i32 %bf.clear90, 54
  br i1 %cmp91, label %if.then.93, label %if.else.95

if.then.93:                                       ; preds = %if.end.88
  %64 = load %struct.rtx_def*, %struct.rtx_def** %arg0, align 8
  %65 = load %struct.rtx_def*, %struct.rtx_def** %arg1, align 8
  %call94 = call %struct.rtx_def* @sge_plus_constant(%struct.rtx_def* %64, %struct.rtx_def* %65)
  store %struct.rtx_def* %call94, %struct.rtx_def** %tem, align 8
  br label %if.end.97

if.else.95:                                       ; preds = %if.end.88
  %66 = load i32, i32* %mode, align 4
  %67 = load %struct.rtx_def*, %struct.rtx_def** %arg0, align 8
  %68 = load %struct.rtx_def*, %struct.rtx_def** %arg1, align 8
  %call96 = call %struct.rtx_def* @sge_plus(i32 %66, %struct.rtx_def* %67, %struct.rtx_def* %68)
  store %struct.rtx_def* %call96, %struct.rtx_def** %tem, align 8
  br label %if.end.97

if.end.97:                                        ; preds = %if.else.95, %if.then.93
  %69 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %70 = bitcast %struct.rtx_def* %69 to i32*
  %bf.load98 = load i32, i32* %70, align 8
  %bf.clear99 = and i32 %bf.load98, 65535
  %cmp100 = icmp ne i32 %bf.clear99, 54
  br i1 %cmp100, label %if.then.102, label %if.end.104

if.then.102:                                      ; preds = %if.end.97
  %71 = load i32, i32* %mode, align 4
  %72 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %call103 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 %71, %struct.rtx_def* %72)
  store %struct.rtx_def* %call103, %struct.rtx_def** %tem, align 8
  br label %if.end.104

if.end.104:                                       ; preds = %if.then.102, %if.end.97
  %73 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  store %struct.rtx_def* %73, %struct.rtx_def** %retval
  br label %return

sw.bb.105:                                        ; preds = %if.then.61, %if.then.61
  %74 = load i32, i32* %mode, align 4
  %75 = load %struct.rtx_def*, %struct.rtx_def** %arg0, align 8
  %76 = load %struct.rtx_def*, %struct.rtx_def** %arg1, align 8
  %call106 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %74, %struct.rtx_def* %75, %struct.rtx_def* %76)
  store %struct.rtx_def* %call106, %struct.rtx_def** %retval
  br label %return

sw.bb.107:                                        ; preds = %if.then.61
  %77 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %78 = load i32, i32* %mode, align 4
  %79 = load %struct.rtx_def*, %struct.rtx_def** %arg0, align 8
  %fld108 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %79, i32 0, i32 1
  %arrayidx109 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld108, i32 0, i64 0
  %rtx110 = bitcast %union.rtunion_def* %arrayidx109 to %struct.rtx_def**
  %80 = load %struct.rtx_def*, %struct.rtx_def** %rtx110, align 8
  %81 = load i32, i32* %mode, align 4
  %82 = load %struct.rtx_def*, %struct.rtx_def** %arg0, align 8
  %fld111 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %82, i32 0, i32 1
  %arrayidx112 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld111, i32 0, i64 1
  %rtx113 = bitcast %union.rtunion_def* %arrayidx112 to %struct.rtx_def**
  %83 = load %struct.rtx_def*, %struct.rtx_def** %rtx113, align 8
  %84 = load %struct.rtx_def*, %struct.rtx_def** %arg1, align 8
  %call114 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %81, %struct.rtx_def* %83, %struct.rtx_def* %84)
  %call115 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %78, %struct.rtx_def* %80, %struct.rtx_def* %call114)
  %85 = load %struct.rtx_def**, %struct.rtx_def*** %ext_val.addr, align 8
  %86 = load i32*, i32** %benefit.addr, align 8
  %call116 = call %struct.rtx_def* @simplify_giv_expr(%struct.loop* %77, %struct.rtx_def* %call115, %struct.rtx_def** %85, i32* %86)
  store %struct.rtx_def* %call116, %struct.rtx_def** %retval
  br label %return

sw.default:                                       ; preds = %if.then.61
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 6473, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__FUNCTION__.simplify_giv_expr, i32 0, i32 0)) #6
  unreachable

if.end.117:                                       ; preds = %lor.lhs.false.56
  br label %if.end.118

if.end.118:                                       ; preds = %if.end.117
  %87 = load %struct.rtx_def*, %struct.rtx_def** %arg0, align 8
  %88 = bitcast %struct.rtx_def* %87 to i32*
  %bf.load119 = load i32, i32* %88, align 8
  %bf.clear120 = and i32 %bf.load119, 65535
  %cmp121 = icmp eq i32 %bf.clear120, 61
  br i1 %cmp121, label %if.then.123, label %if.end.125

if.then.123:                                      ; preds = %if.end.118
  %89 = load i32, i32* %mode, align 4
  %90 = load %struct.rtx_def*, %struct.rtx_def** %arg0, align 8
  %91 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call124 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 78, i32 %89, %struct.rtx_def* %90, %struct.rtx_def* %91)
  store %struct.rtx_def* %call124, %struct.rtx_def** %arg0, align 8
  br label %if.end.125

if.end.125:                                       ; preds = %if.then.123, %if.end.118
  %92 = load %struct.rtx_def*, %struct.rtx_def** %arg1, align 8
  %93 = bitcast %struct.rtx_def* %92 to i32*
  %bf.load126 = load i32, i32* %93, align 8
  %bf.clear127 = and i32 %bf.load126, 65535
  %cmp128 = icmp eq i32 %bf.clear127, 61
  br i1 %cmp128, label %if.then.130, label %if.end.132

if.then.130:                                      ; preds = %if.end.125
  %94 = load i32, i32* %mode, align 4
  %95 = load %struct.rtx_def*, %struct.rtx_def** %arg1, align 8
  %96 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call131 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 78, i32 %94, %struct.rtx_def* %95, %struct.rtx_def* %96)
  store %struct.rtx_def* %call131, %struct.rtx_def** %arg1, align 8
  br label %if.end.132

if.end.132:                                       ; preds = %if.then.130, %if.end.125
  %97 = load %struct.rtx_def*, %struct.rtx_def** %arg1, align 8
  %98 = bitcast %struct.rtx_def* %97 to i32*
  %bf.load133 = load i32, i32* %98, align 8
  %bf.clear134 = and i32 %bf.load133, 65535
  %cmp135 = icmp eq i32 %bf.clear134, 78
  br i1 %cmp135, label %if.then.137, label %if.end.138

if.then.137:                                      ; preds = %if.end.132
  %99 = load %struct.rtx_def*, %struct.rtx_def** %arg0, align 8
  store %struct.rtx_def* %99, %struct.rtx_def** %tem, align 8
  %100 = load %struct.rtx_def*, %struct.rtx_def** %arg1, align 8
  store %struct.rtx_def* %100, %struct.rtx_def** %arg0, align 8
  %101 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  store %struct.rtx_def* %101, %struct.rtx_def** %arg1, align 8
  br label %if.end.138

if.end.138:                                       ; preds = %if.then.137, %if.end.132
  %102 = load %struct.rtx_def*, %struct.rtx_def** %arg1, align 8
  %103 = bitcast %struct.rtx_def* %102 to i32*
  %bf.load139 = load i32, i32* %103, align 8
  %bf.clear140 = and i32 %bf.load139, 65535
  %cmp141 = icmp eq i32 %bf.clear140, 75
  br i1 %cmp141, label %if.then.143, label %if.end.153

if.then.143:                                      ; preds = %if.end.138
  %104 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %105 = load i32, i32* %mode, align 4
  %106 = load i32, i32* %mode, align 4
  %107 = load %struct.rtx_def*, %struct.rtx_def** %arg0, align 8
  %108 = load %struct.rtx_def*, %struct.rtx_def** %arg1, align 8
  %fld144 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %108, i32 0, i32 1
  %arrayidx145 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld144, i32 0, i64 0
  %rtx146 = bitcast %union.rtunion_def* %arrayidx145 to %struct.rtx_def**
  %109 = load %struct.rtx_def*, %struct.rtx_def** %rtx146, align 8
  %call147 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %106, %struct.rtx_def* %107, %struct.rtx_def* %109)
  %110 = load %struct.rtx_def*, %struct.rtx_def** %arg1, align 8
  %fld148 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %110, i32 0, i32 1
  %arrayidx149 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld148, i32 0, i64 1
  %rtx150 = bitcast %union.rtunion_def* %arrayidx149 to %struct.rtx_def**
  %111 = load %struct.rtx_def*, %struct.rtx_def** %rtx150, align 8
  %call151 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %105, %struct.rtx_def* %call147, %struct.rtx_def* %111)
  %112 = load %struct.rtx_def**, %struct.rtx_def*** %ext_val.addr, align 8
  %113 = load i32*, i32** %benefit.addr, align 8
  %call152 = call %struct.rtx_def* @simplify_giv_expr(%struct.loop* %104, %struct.rtx_def* %call151, %struct.rtx_def** %112, i32* %113)
  store %struct.rtx_def* %call152, %struct.rtx_def** %retval
  br label %return

if.end.153:                                       ; preds = %if.end.138
  %114 = load %struct.rtx_def*, %struct.rtx_def** %arg0, align 8
  %115 = bitcast %struct.rtx_def* %114 to i32*
  %bf.load154 = load i32, i32* %115, align 8
  %bf.clear155 = and i32 %bf.load154, 65535
  %cmp156 = icmp ne i32 %bf.clear155, 78
  br i1 %cmp156, label %if.then.163, label %lor.lhs.false.158

lor.lhs.false.158:                                ; preds = %if.end.153
  %116 = load %struct.rtx_def*, %struct.rtx_def** %arg1, align 8
  %117 = bitcast %struct.rtx_def* %116 to i32*
  %bf.load159 = load i32, i32* %117, align 8
  %bf.clear160 = and i32 %bf.load159, 65535
  %cmp161 = icmp ne i32 %bf.clear160, 78
  br i1 %cmp161, label %if.then.163, label %if.end.164

if.then.163:                                      ; preds = %lor.lhs.false.158, %if.end.153
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end.164:                                       ; preds = %lor.lhs.false.158
  %118 = load %struct.rtx_def*, %struct.rtx_def** %arg0, align 8
  %119 = load %struct.rtx_def*, %struct.rtx_def** %arg1, align 8
  %call165 = call i32 @rtx_equal_p(%struct.rtx_def* %118, %struct.rtx_def* %119)
  %tobool = icmp ne i32 %call165, 0
  br i1 %tobool, label %if.end.167, label %if.then.166

if.then.166:                                      ; preds = %if.end.164
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end.167:                                       ; preds = %if.end.164
  %120 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %121 = load i32, i32* %mode, align 4
  %122 = load %struct.rtx_def*, %struct.rtx_def** %arg0, align 8
  %fld168 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %122, i32 0, i32 1
  %arrayidx169 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld168, i32 0, i64 0
  %rtx170 = bitcast %union.rtunion_def* %arrayidx169 to %struct.rtx_def**
  %123 = load %struct.rtx_def*, %struct.rtx_def** %rtx170, align 8
  %124 = load i32, i32* %mode, align 4
  %125 = load %struct.rtx_def*, %struct.rtx_def** %arg0, align 8
  %fld171 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %125, i32 0, i32 1
  %arrayidx172 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld171, i32 0, i64 1
  %rtx173 = bitcast %union.rtunion_def* %arrayidx172 to %struct.rtx_def**
  %126 = load %struct.rtx_def*, %struct.rtx_def** %rtx173, align 8
  %127 = load %struct.rtx_def*, %struct.rtx_def** %arg1, align 8
  %fld174 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %127, i32 0, i32 1
  %arrayidx175 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld174, i32 0, i64 1
  %rtx176 = bitcast %union.rtunion_def* %arrayidx175 to %struct.rtx_def**
  %128 = load %struct.rtx_def*, %struct.rtx_def** %rtx176, align 8
  %call177 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %124, %struct.rtx_def* %126, %struct.rtx_def* %128)
  %call178 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 78, i32 %121, %struct.rtx_def* %123, %struct.rtx_def* %call177)
  %129 = load %struct.rtx_def**, %struct.rtx_def*** %ext_val.addr, align 8
  %130 = load i32*, i32** %benefit.addr, align 8
  %call179 = call %struct.rtx_def* @simplify_giv_expr(%struct.loop* %120, %struct.rtx_def* %call178, %struct.rtx_def** %129, i32* %130)
  store %struct.rtx_def* %call179, %struct.rtx_def** %retval
  br label %return

sw.bb.180:                                        ; preds = %if.end
  %131 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %132 = load i32, i32* %mode, align 4
  %133 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld181 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %133, i32 0, i32 1
  %arrayidx182 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld181, i32 0, i64 0
  %rtx183 = bitcast %union.rtunion_def* %arrayidx182 to %struct.rtx_def**
  %134 = load %struct.rtx_def*, %struct.rtx_def** %rtx183, align 8
  %135 = load i32, i32* %mode, align 4
  %136 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld184 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %136, i32 0, i32 1
  %arrayidx185 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld184, i32 0, i64 1
  %rtx186 = bitcast %union.rtunion_def* %arrayidx185 to %struct.rtx_def**
  %137 = load %struct.rtx_def*, %struct.rtx_def** %rtx186, align 8
  %138 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 63), align 8
  %call187 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 78, i32 %135, %struct.rtx_def* %137, %struct.rtx_def* %138)
  %call188 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %132, %struct.rtx_def* %134, %struct.rtx_def* %call187)
  %139 = load %struct.rtx_def**, %struct.rtx_def*** %ext_val.addr, align 8
  %140 = load i32*, i32** %benefit.addr, align 8
  %call189 = call %struct.rtx_def* @simplify_giv_expr(%struct.loop* %131, %struct.rtx_def* %call188, %struct.rtx_def** %139, i32* %140)
  store %struct.rtx_def* %call189, %struct.rtx_def** %retval
  br label %return

sw.bb.190:                                        ; preds = %if.end
  %141 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %142 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld191 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %142, i32 0, i32 1
  %arrayidx192 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld191, i32 0, i64 0
  %rtx193 = bitcast %union.rtunion_def* %arrayidx192 to %struct.rtx_def**
  %143 = load %struct.rtx_def*, %struct.rtx_def** %rtx193, align 8
  %144 = load %struct.rtx_def**, %struct.rtx_def*** %ext_val.addr, align 8
  %145 = load i32*, i32** %benefit.addr, align 8
  %call194 = call %struct.rtx_def* @simplify_giv_expr(%struct.loop* %141, %struct.rtx_def* %143, %struct.rtx_def** %144, i32* %145)
  store %struct.rtx_def* %call194, %struct.rtx_def** %arg0, align 8
  %146 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %147 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld195 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %147, i32 0, i32 1
  %arrayidx196 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld195, i32 0, i64 1
  %rtx197 = bitcast %union.rtunion_def* %arrayidx196 to %struct.rtx_def**
  %148 = load %struct.rtx_def*, %struct.rtx_def** %rtx197, align 8
  %149 = load %struct.rtx_def**, %struct.rtx_def*** %ext_val.addr, align 8
  %150 = load i32*, i32** %benefit.addr, align 8
  %call198 = call %struct.rtx_def* @simplify_giv_expr(%struct.loop* %146, %struct.rtx_def* %148, %struct.rtx_def** %149, i32* %150)
  store %struct.rtx_def* %call198, %struct.rtx_def** %arg1, align 8
  %151 = load %struct.rtx_def*, %struct.rtx_def** %arg0, align 8
  %cmp199 = icmp eq %struct.rtx_def* %151, null
  br i1 %cmp199, label %if.then.204, label %lor.lhs.false.201

lor.lhs.false.201:                                ; preds = %sw.bb.190
  %152 = load %struct.rtx_def*, %struct.rtx_def** %arg1, align 8
  %cmp202 = icmp eq %struct.rtx_def* %152, null
  br i1 %cmp202, label %if.then.204, label %if.end.205

if.then.204:                                      ; preds = %lor.lhs.false.201, %sw.bb.190
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end.205:                                       ; preds = %lor.lhs.false.201
  %153 = load %struct.rtx_def*, %struct.rtx_def** %arg0, align 8
  %154 = bitcast %struct.rtx_def* %153 to i32*
  %bf.load206 = load i32, i32* %154, align 8
  %bf.clear207 = and i32 %bf.load206, 65535
  %cmp208 = icmp eq i32 %bf.clear207, 48
  br i1 %cmp208, label %land.lhs.true.215, label %lor.lhs.false.210

lor.lhs.false.210:                                ; preds = %if.end.205
  %155 = load %struct.rtx_def*, %struct.rtx_def** %arg0, align 8
  %156 = bitcast %struct.rtx_def* %155 to i32*
  %bf.load211 = load i32, i32* %156, align 8
  %bf.clear212 = and i32 %bf.load211, 65535
  %cmp213 = icmp eq i32 %bf.clear212, 54
  br i1 %cmp213, label %land.lhs.true.215, label %if.end.221

land.lhs.true.215:                                ; preds = %lor.lhs.false.210, %if.end.205
  %157 = load %struct.rtx_def*, %struct.rtx_def** %arg1, align 8
  %158 = bitcast %struct.rtx_def* %157 to i32*
  %bf.load216 = load i32, i32* %158, align 8
  %bf.clear217 = and i32 %bf.load216, 65535
  %cmp218 = icmp ne i32 %bf.clear217, 54
  br i1 %cmp218, label %if.then.220, label %if.end.221

if.then.220:                                      ; preds = %land.lhs.true.215
  %159 = load %struct.rtx_def*, %struct.rtx_def** %arg0, align 8
  store %struct.rtx_def* %159, %struct.rtx_def** %tem, align 8
  %160 = load %struct.rtx_def*, %struct.rtx_def** %arg1, align 8
  store %struct.rtx_def* %160, %struct.rtx_def** %arg0, align 8
  %161 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  store %struct.rtx_def* %161, %struct.rtx_def** %arg1, align 8
  br label %if.end.221

if.end.221:                                       ; preds = %if.then.220, %land.lhs.true.215, %lor.lhs.false.210
  %162 = load %struct.rtx_def*, %struct.rtx_def** %arg1, align 8
  %163 = bitcast %struct.rtx_def* %162 to i32*
  %bf.load222 = load i32, i32* %163, align 8
  %bf.clear223 = and i32 %bf.load222, 65535
  %cmp224 = icmp ne i32 %bf.clear223, 48
  br i1 %cmp224, label %land.lhs.true.226, label %if.end.232

land.lhs.true.226:                                ; preds = %if.end.221
  %164 = load %struct.rtx_def*, %struct.rtx_def** %arg1, align 8
  %165 = bitcast %struct.rtx_def* %164 to i32*
  %bf.load227 = load i32, i32* %165, align 8
  %bf.clear228 = and i32 %bf.load227, 65535
  %cmp229 = icmp ne i32 %bf.clear228, 54
  br i1 %cmp229, label %if.then.231, label %if.end.232

if.then.231:                                      ; preds = %land.lhs.true.226
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end.232:                                       ; preds = %land.lhs.true.226, %if.end.221
  %166 = load %struct.rtx_def*, %struct.rtx_def** %arg1, align 8
  %167 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %cmp233 = icmp eq %struct.rtx_def* %166, %167
  br i1 %cmp233, label %if.then.235, label %if.else.236

if.then.235:                                      ; preds = %if.end.232
  %168 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  store %struct.rtx_def* %168, %struct.rtx_def** %retval
  br label %return

if.else.236:                                      ; preds = %if.end.232
  %169 = load %struct.rtx_def*, %struct.rtx_def** %arg1, align 8
  %170 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %cmp237 = icmp eq %struct.rtx_def* %169, %170
  br i1 %cmp237, label %if.then.239, label %if.end.240

if.then.239:                                      ; preds = %if.else.236
  %171 = load %struct.rtx_def*, %struct.rtx_def** %arg0, align 8
  store %struct.rtx_def* %171, %struct.rtx_def** %retval
  br label %return

if.end.240:                                       ; preds = %if.else.236
  br label %if.end.241

if.end.241:                                       ; preds = %if.end.240
  %172 = load %struct.rtx_def*, %struct.rtx_def** %arg0, align 8
  %173 = bitcast %struct.rtx_def* %172 to i32*
  %bf.load242 = load i32, i32* %173, align 8
  %bf.clear243 = and i32 %bf.load242, 65535
  switch i32 %bf.clear243, label %sw.default.318 [
    i32 61, label %sw.bb.244
    i32 54, label %sw.bb.246
    i32 48, label %sw.bb.253
    i32 78, label %sw.bb.297
    i32 75, label %sw.bb.307
  ]

sw.bb.244:                                        ; preds = %if.end.241
  %174 = load i32, i32* %mode, align 4
  %175 = load %struct.rtx_def*, %struct.rtx_def** %arg0, align 8
  %176 = load %struct.rtx_def*, %struct.rtx_def** %arg1, align 8
  %call245 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 78, i32 %174, %struct.rtx_def* %175, %struct.rtx_def* %176)
  store %struct.rtx_def* %call245, %struct.rtx_def** %retval
  br label %return

sw.bb.246:                                        ; preds = %if.end.241
  %177 = load %struct.rtx_def*, %struct.rtx_def** %arg0, align 8
  %fld247 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %177, i32 0, i32 1
  %arrayidx248 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld247, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx248 to i64*
  %178 = load i64, i64* %rtwint, align 8
  %179 = load %struct.rtx_def*, %struct.rtx_def** %arg1, align 8
  %fld249 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %179, i32 0, i32 1
  %arrayidx250 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld249, i32 0, i64 0
  %rtwint251 = bitcast %union.rtunion_def* %arrayidx250 to i64*
  %180 = load i64, i64* %rtwint251, align 8
  %mul = mul nsw i64 %178, %180
  %call252 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %mul)
  store %struct.rtx_def* %call252, %struct.rtx_def** %retval
  br label %return

sw.bb.253:                                        ; preds = %if.end.241
  %181 = load %struct.rtx_def*, %struct.rtx_def** %arg1, align 8
  %182 = bitcast %struct.rtx_def* %181 to i32*
  %bf.load254 = load i32, i32* %182, align 8
  %bf.clear255 = and i32 %bf.load254, 65535
  %cmp256 = icmp ne i32 %bf.clear255, 54
  br i1 %cmp256, label %if.then.258, label %if.end.259

if.then.258:                                      ; preds = %sw.bb.253
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end.259:                                       ; preds = %sw.bb.253
  %183 = load %struct.rtx_def*, %struct.rtx_def** %arg0, align 8
  %fld260 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %183, i32 0, i32 1
  %arrayidx261 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld260, i32 0, i64 0
  %rtx262 = bitcast %union.rtunion_def* %arrayidx261 to %struct.rtx_def**
  %184 = load %struct.rtx_def*, %struct.rtx_def** %rtx262, align 8
  store %struct.rtx_def* %184, %struct.rtx_def** %arg0, align 8
  %185 = load %struct.rtx_def*, %struct.rtx_def** %arg0, align 8
  %186 = bitcast %struct.rtx_def* %185 to i32*
  %bf.load263 = load i32, i32* %186, align 8
  %bf.clear264 = and i32 %bf.load263, 65535
  %cmp265 = icmp eq i32 %bf.clear264, 78
  br i1 %cmp265, label %if.then.267, label %if.else.277

if.then.267:                                      ; preds = %if.end.259
  %187 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %188 = load i32, i32* %mode, align 4
  %189 = load %struct.rtx_def*, %struct.rtx_def** %arg0, align 8
  %fld268 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %189, i32 0, i32 1
  %arrayidx269 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld268, i32 0, i64 0
  %rtx270 = bitcast %union.rtunion_def* %arrayidx269 to %struct.rtx_def**
  %190 = load %struct.rtx_def*, %struct.rtx_def** %rtx270, align 8
  %191 = load i32, i32* %mode, align 4
  %192 = load %struct.rtx_def*, %struct.rtx_def** %arg0, align 8
  %fld271 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %192, i32 0, i32 1
  %arrayidx272 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld271, i32 0, i64 1
  %rtx273 = bitcast %union.rtunion_def* %arrayidx272 to %struct.rtx_def**
  %193 = load %struct.rtx_def*, %struct.rtx_def** %rtx273, align 8
  %194 = load %struct.rtx_def*, %struct.rtx_def** %arg1, align 8
  %call274 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 78, i32 %191, %struct.rtx_def* %193, %struct.rtx_def* %194)
  %call275 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 78, i32 %188, %struct.rtx_def* %190, %struct.rtx_def* %call274)
  %195 = load %struct.rtx_def**, %struct.rtx_def*** %ext_val.addr, align 8
  %196 = load i32*, i32** %benefit.addr, align 8
  %call276 = call %struct.rtx_def* @simplify_giv_expr(%struct.loop* %187, %struct.rtx_def* %call275, %struct.rtx_def** %195, i32* %196)
  store %struct.rtx_def* %call276, %struct.rtx_def** %retval
  br label %return

if.else.277:                                      ; preds = %if.end.259
  %197 = load %struct.rtx_def*, %struct.rtx_def** %arg0, align 8
  %198 = bitcast %struct.rtx_def* %197 to i32*
  %bf.load278 = load i32, i32* %198, align 8
  %bf.clear279 = and i32 %bf.load278, 65535
  %cmp280 = icmp eq i32 %bf.clear279, 75
  br i1 %cmp280, label %if.then.282, label %if.end.293

if.then.282:                                      ; preds = %if.else.277
  %199 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %200 = load i32, i32* %mode, align 4
  %201 = load i32, i32* %mode, align 4
  %202 = load %struct.rtx_def*, %struct.rtx_def** %arg0, align 8
  %fld283 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %202, i32 0, i32 1
  %arrayidx284 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld283, i32 0, i64 0
  %rtx285 = bitcast %union.rtunion_def* %arrayidx284 to %struct.rtx_def**
  %203 = load %struct.rtx_def*, %struct.rtx_def** %rtx285, align 8
  %204 = load %struct.rtx_def*, %struct.rtx_def** %arg1, align 8
  %call286 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 78, i32 %201, %struct.rtx_def* %203, %struct.rtx_def* %204)
  %205 = load i32, i32* %mode, align 4
  %206 = load %struct.rtx_def*, %struct.rtx_def** %arg0, align 8
  %fld287 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %206, i32 0, i32 1
  %arrayidx288 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld287, i32 0, i64 1
  %rtx289 = bitcast %union.rtunion_def* %arrayidx288 to %struct.rtx_def**
  %207 = load %struct.rtx_def*, %struct.rtx_def** %rtx289, align 8
  %208 = load %struct.rtx_def*, %struct.rtx_def** %arg1, align 8
  %call290 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 78, i32 %205, %struct.rtx_def* %207, %struct.rtx_def* %208)
  %call291 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %200, %struct.rtx_def* %call286, %struct.rtx_def* %call290)
  %209 = load %struct.rtx_def**, %struct.rtx_def*** %ext_val.addr, align 8
  %210 = load i32*, i32** %benefit.addr, align 8
  %call292 = call %struct.rtx_def* @simplify_giv_expr(%struct.loop* %199, %struct.rtx_def* %call291, %struct.rtx_def** %209, i32* %210)
  store %struct.rtx_def* %call292, %struct.rtx_def** %retval
  br label %return

if.end.293:                                       ; preds = %if.else.277
  br label %if.end.294

if.end.294:                                       ; preds = %if.end.293
  %211 = load i32, i32* %mode, align 4
  %212 = load i32, i32* %mode, align 4
  %213 = load %struct.rtx_def*, %struct.rtx_def** %arg0, align 8
  %214 = load %struct.rtx_def*, %struct.rtx_def** %arg1, align 8
  %call295 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 78, i32 %212, %struct.rtx_def* %213, %struct.rtx_def* %214)
  %call296 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 %211, %struct.rtx_def* %call295)
  store %struct.rtx_def* %call296, %struct.rtx_def** %retval
  br label %return

sw.bb.297:                                        ; preds = %if.end.241
  %215 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %216 = load i32, i32* %mode, align 4
  %217 = load %struct.rtx_def*, %struct.rtx_def** %arg0, align 8
  %fld298 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %217, i32 0, i32 1
  %arrayidx299 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld298, i32 0, i64 0
  %rtx300 = bitcast %union.rtunion_def* %arrayidx299 to %struct.rtx_def**
  %218 = load %struct.rtx_def*, %struct.rtx_def** %rtx300, align 8
  %219 = load i32, i32* %mode, align 4
  %220 = load %struct.rtx_def*, %struct.rtx_def** %arg0, align 8
  %fld301 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %220, i32 0, i32 1
  %arrayidx302 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld301, i32 0, i64 1
  %rtx303 = bitcast %union.rtunion_def* %arrayidx302 to %struct.rtx_def**
  %221 = load %struct.rtx_def*, %struct.rtx_def** %rtx303, align 8
  %222 = load %struct.rtx_def*, %struct.rtx_def** %arg1, align 8
  %call304 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 78, i32 %219, %struct.rtx_def* %221, %struct.rtx_def* %222)
  %call305 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 78, i32 %216, %struct.rtx_def* %218, %struct.rtx_def* %call304)
  %223 = load %struct.rtx_def**, %struct.rtx_def*** %ext_val.addr, align 8
  %224 = load i32*, i32** %benefit.addr, align 8
  %call306 = call %struct.rtx_def* @simplify_giv_expr(%struct.loop* %215, %struct.rtx_def* %call305, %struct.rtx_def** %223, i32* %224)
  store %struct.rtx_def* %call306, %struct.rtx_def** %retval
  br label %return

sw.bb.307:                                        ; preds = %if.end.241
  %225 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %226 = load i32, i32* %mode, align 4
  %227 = load i32, i32* %mode, align 4
  %228 = load %struct.rtx_def*, %struct.rtx_def** %arg0, align 8
  %fld308 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %228, i32 0, i32 1
  %arrayidx309 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld308, i32 0, i64 0
  %rtx310 = bitcast %union.rtunion_def* %arrayidx309 to %struct.rtx_def**
  %229 = load %struct.rtx_def*, %struct.rtx_def** %rtx310, align 8
  %230 = load %struct.rtx_def*, %struct.rtx_def** %arg1, align 8
  %call311 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 78, i32 %227, %struct.rtx_def* %229, %struct.rtx_def* %230)
  %231 = load i32, i32* %mode, align 4
  %232 = load %struct.rtx_def*, %struct.rtx_def** %arg0, align 8
  %fld312 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %232, i32 0, i32 1
  %arrayidx313 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld312, i32 0, i64 1
  %rtx314 = bitcast %union.rtunion_def* %arrayidx313 to %struct.rtx_def**
  %233 = load %struct.rtx_def*, %struct.rtx_def** %rtx314, align 8
  %234 = load %struct.rtx_def*, %struct.rtx_def** %arg1, align 8
  %call315 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 78, i32 %231, %struct.rtx_def* %233, %struct.rtx_def* %234)
  %call316 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %226, %struct.rtx_def* %call311, %struct.rtx_def* %call315)
  %235 = load %struct.rtx_def**, %struct.rtx_def*** %ext_val.addr, align 8
  %236 = load i32*, i32** %benefit.addr, align 8
  %call317 = call %struct.rtx_def* @simplify_giv_expr(%struct.loop* %225, %struct.rtx_def* %call316, %struct.rtx_def** %235, i32* %236)
  store %struct.rtx_def* %call317, %struct.rtx_def** %retval
  br label %return

sw.default.318:                                   ; preds = %if.end.241
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 6614, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__FUNCTION__.simplify_giv_expr, i32 0, i32 0)) #6
  unreachable

sw.bb.319:                                        ; preds = %if.end
  %237 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld320 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %237, i32 0, i32 1
  %arrayidx321 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld320, i32 0, i64 1
  %rtx322 = bitcast %union.rtunion_def* %arrayidx321 to %struct.rtx_def**
  %238 = load %struct.rtx_def*, %struct.rtx_def** %rtx322, align 8
  %239 = bitcast %struct.rtx_def* %238 to i32*
  %bf.load323 = load i32, i32* %239, align 8
  %bf.clear324 = and i32 %bf.load323, 65535
  %cmp325 = icmp ne i32 %bf.clear324, 54
  br i1 %cmp325, label %if.then.327, label %if.end.328

if.then.327:                                      ; preds = %sw.bb.319
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end.328:                                       ; preds = %sw.bb.319
  %240 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %241 = load i32, i32* %mode, align 4
  %242 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld329 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %242, i32 0, i32 1
  %arrayidx330 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld329, i32 0, i64 0
  %rtx331 = bitcast %union.rtunion_def* %arrayidx330 to %struct.rtx_def**
  %243 = load %struct.rtx_def*, %struct.rtx_def** %rtx331, align 8
  %244 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld332 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %244, i32 0, i32 1
  %arrayidx333 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld332, i32 0, i64 1
  %rtx334 = bitcast %union.rtunion_def* %arrayidx333 to %struct.rtx_def**
  %245 = load %struct.rtx_def*, %struct.rtx_def** %rtx334, align 8
  %fld335 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %245, i32 0, i32 1
  %arrayidx336 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld335, i32 0, i64 0
  %rtwint337 = bitcast %union.rtunion_def* %arrayidx336 to i64*
  %246 = load i64, i64* %rtwint337, align 8
  %shl = shl i64 1, %246
  %call338 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %shl)
  %call339 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 78, i32 %241, %struct.rtx_def* %243, %struct.rtx_def* %call338)
  %247 = load %struct.rtx_def**, %struct.rtx_def*** %ext_val.addr, align 8
  %248 = load i32*, i32** %benefit.addr, align 8
  %call340 = call %struct.rtx_def* @simplify_giv_expr(%struct.loop* %240, %struct.rtx_def* %call339, %struct.rtx_def** %247, i32* %248)
  store %struct.rtx_def* %call340, %struct.rtx_def** %retval
  br label %return

sw.bb.341:                                        ; preds = %if.end
  %249 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %250 = load i32, i32* %mode, align 4
  %251 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld342 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %251, i32 0, i32 1
  %arrayidx343 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld342, i32 0, i64 0
  %rtx344 = bitcast %union.rtunion_def* %arrayidx343 to %struct.rtx_def**
  %252 = load %struct.rtx_def*, %struct.rtx_def** %rtx344, align 8
  %253 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 63), align 8
  %call345 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 78, i32 %250, %struct.rtx_def* %252, %struct.rtx_def* %253)
  %254 = load %struct.rtx_def**, %struct.rtx_def*** %ext_val.addr, align 8
  %255 = load i32*, i32** %benefit.addr, align 8
  %call346 = call %struct.rtx_def* @simplify_giv_expr(%struct.loop* %249, %struct.rtx_def* %call345, %struct.rtx_def** %254, i32* %255)
  store %struct.rtx_def* %call346, %struct.rtx_def** %retval
  br label %return

sw.bb.347:                                        ; preds = %if.end
  %256 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %257 = load i32, i32* %mode, align 4
  %258 = load i32, i32* %mode, align 4
  %259 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld348 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %259, i32 0, i32 1
  %arrayidx349 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld348, i32 0, i64 0
  %rtx350 = bitcast %union.rtunion_def* %arrayidx349 to %struct.rtx_def**
  %260 = load %struct.rtx_def*, %struct.rtx_def** %rtx350, align 8
  %call351 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 77, i32 %258, %struct.rtx_def* %260)
  %261 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call352 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 76, i32 %257, %struct.rtx_def* %call351, %struct.rtx_def* %261)
  %262 = load %struct.rtx_def**, %struct.rtx_def*** %ext_val.addr, align 8
  %263 = load i32*, i32** %benefit.addr, align 8
  %call353 = call %struct.rtx_def* @simplify_giv_expr(%struct.loop* %256, %struct.rtx_def* %call352, %struct.rtx_def** %262, i32* %263)
  store %struct.rtx_def* %call353, %struct.rtx_def** %retval
  br label %return

sw.bb.354:                                        ; preds = %if.end
  %264 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  store %struct.rtx_def* %264, %struct.rtx_def** %retval
  br label %return

sw.bb.355:                                        ; preds = %if.end, %if.end, %if.end
  %265 = load %struct.rtx_def**, %struct.rtx_def*** %ext_val.addr, align 8
  %266 = load %struct.rtx_def*, %struct.rtx_def** %265, align 8
  %cmp356 = icmp eq %struct.rtx_def* %266, null
  br i1 %cmp356, label %if.then.358, label %if.end.377

if.then.358:                                      ; preds = %sw.bb.355
  %267 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %268 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld359 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %268, i32 0, i32 1
  %arrayidx360 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld359, i32 0, i64 0
  %rtx361 = bitcast %union.rtunion_def* %arrayidx360 to %struct.rtx_def**
  %269 = load %struct.rtx_def*, %struct.rtx_def** %rtx361, align 8
  %270 = load %struct.rtx_def**, %struct.rtx_def*** %ext_val.addr, align 8
  %271 = load i32*, i32** %benefit.addr, align 8
  %call362 = call %struct.rtx_def* @simplify_giv_expr(%struct.loop* %267, %struct.rtx_def* %269, %struct.rtx_def** %270, i32* %271)
  store %struct.rtx_def* %call362, %struct.rtx_def** %arg0, align 8
  %272 = load %struct.rtx_def*, %struct.rtx_def** %arg0, align 8
  %tobool363 = icmp ne %struct.rtx_def* %272, null
  br i1 %tobool363, label %land.lhs.true.364, label %if.end.376

land.lhs.true.364:                                ; preds = %if.then.358
  %273 = load %struct.rtx_def**, %struct.rtx_def*** %ext_val.addr, align 8
  %274 = load %struct.rtx_def*, %struct.rtx_def** %273, align 8
  %cmp365 = icmp eq %struct.rtx_def* %274, null
  br i1 %cmp365, label %land.lhs.true.367, label %if.end.376

land.lhs.true.367:                                ; preds = %land.lhs.true.364
  %275 = load %struct.rtx_def*, %struct.rtx_def** %arg0, align 8
  %276 = bitcast %struct.rtx_def* %275 to i32*
  %bf.load368 = load i32, i32* %276, align 8
  %bf.clear369 = and i32 %bf.load368, 65535
  %cmp370 = icmp eq i32 %bf.clear369, 61
  br i1 %cmp370, label %if.then.372, label %if.end.376

if.then.372:                                      ; preds = %land.lhs.true.367
  %277 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %278 = bitcast %struct.rtx_def* %277 to i32*
  %bf.load373 = load i32, i32* %278, align 8
  %bf.clear374 = and i32 %bf.load373, 65535
  %279 = load i32, i32* %mode, align 4
  %280 = load %struct.rtx_def*, %struct.rtx_def** %arg0, align 8
  %call375 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 %bf.clear374, i32 %279, %struct.rtx_def* %280)
  %281 = load %struct.rtx_def**, %struct.rtx_def*** %ext_val.addr, align 8
  store %struct.rtx_def* %call375, %struct.rtx_def** %281, align 8
  %282 = load %struct.rtx_def*, %struct.rtx_def** %arg0, align 8
  store %struct.rtx_def* %282, %struct.rtx_def** %retval
  br label %return

if.end.376:                                       ; preds = %land.lhs.true.367, %land.lhs.true.364, %if.then.358
  br label %if.end.377

if.end.377:                                       ; preds = %if.end.376, %sw.bb.355
  br label %do_default

sw.bb.378:                                        ; preds = %if.end
  %283 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld379 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %283, i32 0, i32 1
  %arrayidx380 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld379, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx380 to i32*
  %284 = load i32, i32* %rtuint, align 4
  %285 = load i32, i32* @max_reg_before_loop, align 4
  %cmp381 = icmp uge i32 %284, %285
  br i1 %cmp381, label %if.then.383, label %if.end.384

if.then.383:                                      ; preds = %sw.bb.378
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end.384:                                       ; preds = %sw.bb.378
  %286 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld385 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %286, i32 0, i32 1
  %arrayidx386 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld385, i32 0, i64 0
  %rtuint387 = bitcast %union.rtunion_def* %arrayidx386 to i32*
  %287 = load i32, i32* %rtuint387, align 4
  %idxprom388 = zext i32 %287 to i64
  %288 = load %struct.loop_ivs*, %struct.loop_ivs** %ivs, align 8
  %regs389 = getelementptr inbounds %struct.loop_ivs, %struct.loop_ivs* %288, i32 0, i32 0
  %289 = load %struct.iv*, %struct.iv** %regs389, align 8
  %arrayidx390 = getelementptr inbounds %struct.iv, %struct.iv* %289, i64 %idxprom388
  %type = getelementptr inbounds %struct.iv, %struct.iv* %arrayidx390, i32 0, i32 0
  %290 = load i32, i32* %type, align 4
  switch i32 %290, label %sw.default.433 [
    i32 1, label %sw.bb.391
    i32 3, label %sw.bb.392
  ]

sw.bb.391:                                        ; preds = %if.end.384
  %291 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  store %struct.rtx_def* %291, %struct.rtx_def** %retval
  br label %return

sw.bb.392:                                        ; preds = %if.end.384
  %292 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld393 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %292, i32 0, i32 1
  %arrayidx394 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld393, i32 0, i64 0
  %rtuint395 = bitcast %union.rtunion_def* %arrayidx394 to i32*
  %293 = load i32, i32* %rtuint395, align 4
  %idxprom396 = zext i32 %293 to i64
  %294 = load %struct.loop_ivs*, %struct.loop_ivs** %ivs, align 8
  %regs397 = getelementptr inbounds %struct.loop_ivs, %struct.loop_ivs* %294, i32 0, i32 0
  %295 = load %struct.iv*, %struct.iv** %regs397, align 8
  %arrayidx398 = getelementptr inbounds %struct.iv, %struct.iv* %295, i64 %idxprom396
  %iv = getelementptr inbounds %struct.iv, %struct.iv* %arrayidx398, i32 0, i32 1
  %info = bitcast %union.anon.0* %iv to %struct.induction**
  %296 = load %struct.induction*, %struct.induction** %info, align 8
  store %struct.induction* %296, %struct.induction** %v, align 8
  %297 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld399 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %297, i32 0, i32 1
  %arrayidx400 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld399, i32 0, i64 0
  %rtuint401 = bitcast %union.rtunion_def* %arrayidx400 to i32*
  %298 = load i32, i32* %rtuint401, align 4
  %idxprom402 = zext i32 %298 to i64
  %299 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %array = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %299, i32 0, i32 2
  %300 = load %struct.loop_reg*, %struct.loop_reg** %array, align 8
  %arrayidx403 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %300, i64 %idxprom402
  %single_usage = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %arrayidx403, i32 0, i32 2
  %301 = load %struct.rtx_def*, %struct.rtx_def** %single_usage, align 8
  store %struct.rtx_def* %301, %struct.rtx_def** %single_use, align 8
  %302 = load %struct.rtx_def*, %struct.rtx_def** %single_use, align 8
  %tobool404 = icmp ne %struct.rtx_def* %302, null
  br i1 %tobool404, label %land.lhs.true.405, label %if.end.410

land.lhs.true.405:                                ; preds = %sw.bb.392
  %303 = load %struct.rtx_def*, %struct.rtx_def** %single_use, align 8
  %304 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %cmp406 = icmp ne %struct.rtx_def* %303, %304
  br i1 %cmp406, label %if.then.408, label %if.end.410

if.then.408:                                      ; preds = %land.lhs.true.405
  %305 = load %struct.induction*, %struct.induction** %v, align 8
  %benefit409 = getelementptr inbounds %struct.induction, %struct.induction* %305, i32 0, i32 10
  %306 = load i32, i32* %benefit409, align 4
  %307 = load i32*, i32** %benefit.addr, align 8
  %308 = load i32, i32* %307, align 4
  %add = add nsw i32 %308, %306
  store i32 %add, i32* %307, align 4
  br label %if.end.410

if.end.410:                                       ; preds = %if.then.408, %land.lhs.true.405, %sw.bb.392
  %309 = load %struct.induction*, %struct.induction** %v, align 8
  %cant_derive = getelementptr inbounds %struct.induction, %struct.induction* %309, i32 0, i32 13
  %bf.load411 = load i16, i16* %cant_derive, align 4
  %bf.lshr412 = lshr i16 %bf.load411, 6
  %bf.clear413 = and i16 %bf.lshr412, 1
  %bf.cast = zext i16 %bf.clear413 to i32
  %tobool414 = icmp ne i32 %bf.cast, 0
  br i1 %tobool414, label %if.then.415, label %if.end.416

if.then.415:                                      ; preds = %if.end.410
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end.416:                                       ; preds = %if.end.410
  %310 = load i32, i32* %mode, align 4
  %311 = load i32, i32* %mode, align 4
  %312 = load %struct.induction*, %struct.induction** %v, align 8
  %src_reg = getelementptr inbounds %struct.induction, %struct.induction* %312, i32 0, i32 2
  %313 = load %struct.rtx_def*, %struct.rtx_def** %src_reg, align 8
  %314 = load %struct.induction*, %struct.induction** %v, align 8
  %mult_val = getelementptr inbounds %struct.induction, %struct.induction* %314, i32 0, i32 8
  %315 = load %struct.rtx_def*, %struct.rtx_def** %mult_val, align 8
  %call417 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 78, i32 %311, %struct.rtx_def* %313, %struct.rtx_def* %315)
  %316 = load %struct.induction*, %struct.induction** %v, align 8
  %add_val = getelementptr inbounds %struct.induction, %struct.induction* %316, i32 0, i32 9
  %317 = load %struct.rtx_def*, %struct.rtx_def** %add_val, align 8
  %call418 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %310, %struct.rtx_def* %call417, %struct.rtx_def* %317)
  store %struct.rtx_def* %call418, %struct.rtx_def** %tem, align 8
  %318 = load %struct.induction*, %struct.induction** %v, align 8
  %derive_adjustment = getelementptr inbounds %struct.induction, %struct.induction* %318, i32 0, i32 15
  %319 = load %struct.rtx_def*, %struct.rtx_def** %derive_adjustment, align 8
  %tobool419 = icmp ne %struct.rtx_def* %319, null
  br i1 %tobool419, label %if.then.420, label %if.end.423

if.then.420:                                      ; preds = %if.end.416
  %320 = load i32, i32* %mode, align 4
  %321 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %322 = load %struct.induction*, %struct.induction** %v, align 8
  %derive_adjustment421 = getelementptr inbounds %struct.induction, %struct.induction* %322, i32 0, i32 15
  %323 = load %struct.rtx_def*, %struct.rtx_def** %derive_adjustment421, align 8
  %call422 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 76, i32 %320, %struct.rtx_def* %321, %struct.rtx_def* %323)
  store %struct.rtx_def* %call422, %struct.rtx_def** %tem, align 8
  br label %if.end.423

if.end.423:                                       ; preds = %if.then.420, %if.end.416
  %324 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %325 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %326 = load %struct.rtx_def**, %struct.rtx_def*** %ext_val.addr, align 8
  %327 = load i32*, i32** %benefit.addr, align 8
  %call424 = call %struct.rtx_def* @simplify_giv_expr(%struct.loop* %324, %struct.rtx_def* %325, %struct.rtx_def** %326, i32* %327)
  store %struct.rtx_def* %call424, %struct.rtx_def** %arg0, align 8
  %328 = load %struct.rtx_def**, %struct.rtx_def*** %ext_val.addr, align 8
  %329 = load %struct.rtx_def*, %struct.rtx_def** %328, align 8
  %tobool425 = icmp ne %struct.rtx_def* %329, null
  br i1 %tobool425, label %if.then.426, label %if.else.430

if.then.426:                                      ; preds = %if.end.423
  %330 = load %struct.induction*, %struct.induction** %v, align 8
  %ext_dependent = getelementptr inbounds %struct.induction, %struct.induction* %330, i32 0, i32 16
  %331 = load %struct.rtx_def*, %struct.rtx_def** %ext_dependent, align 8
  %tobool427 = icmp ne %struct.rtx_def* %331, null
  br i1 %tobool427, label %if.end.429, label %if.then.428

if.then.428:                                      ; preds = %if.then.426
  %332 = load %struct.rtx_def*, %struct.rtx_def** %arg0, align 8
  store %struct.rtx_def* %332, %struct.rtx_def** %retval
  br label %return

if.end.429:                                       ; preds = %if.then.426
  br label %if.end.432

if.else.430:                                      ; preds = %if.end.423
  %333 = load %struct.induction*, %struct.induction** %v, align 8
  %ext_dependent431 = getelementptr inbounds %struct.induction, %struct.induction* %333, i32 0, i32 16
  %334 = load %struct.rtx_def*, %struct.rtx_def** %ext_dependent431, align 8
  %335 = load %struct.rtx_def**, %struct.rtx_def*** %ext_val.addr, align 8
  store %struct.rtx_def* %334, %struct.rtx_def** %335, align 8
  %336 = load %struct.rtx_def*, %struct.rtx_def** %arg0, align 8
  store %struct.rtx_def* %336, %struct.rtx_def** %retval
  br label %return

if.end.432:                                       ; preds = %if.end.429
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

sw.default.433:                                   ; preds = %if.end.384
  br label %do_default

do_default:                                       ; preds = %sw.default.433, %if.end.377
  %337 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %338 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %call434 = call i32 @loop_invariant_p(%struct.loop* %337, %struct.rtx_def* %338)
  %cmp435 = icmp eq i32 %call434, 1
  br i1 %cmp435, label %if.then.437, label %if.end.582

if.then.437:                                      ; preds = %do_default
  %339 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %aux438 = getelementptr inbounds %struct.loop, %struct.loop* %339, i32 0, i32 22
  %340 = load i8*, i8** %aux438, align 8
  %341 = bitcast i8* %340 to %struct.loop_info*
  %movables439 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %341, i32 0, i32 27
  store %struct.loop_movables* %movables439, %struct.loop_movables** %movables, align 8
  %342 = load %struct.loop_movables*, %struct.loop_movables** %movables, align 8
  %head = getelementptr inbounds %struct.loop_movables, %struct.loop_movables* %342, i32 0, i32 0
  %343 = load %struct.movable*, %struct.movable** %head, align 8
  store %struct.movable* %343, %struct.movable** %m, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.437
  %344 = load %struct.movable*, %struct.movable** %m, align 8
  %tobool440 = icmp ne %struct.movable* %344, null
  br i1 %tobool440, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %345 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %346 = load %struct.movable*, %struct.movable** %m, align 8
  %set_dest = getelementptr inbounds %struct.movable, %struct.movable* %346, i32 0, i32 2
  %347 = load %struct.rtx_def*, %struct.rtx_def** %set_dest, align 8
  %call441 = call i32 @rtx_equal_p(%struct.rtx_def* %345, %struct.rtx_def* %347)
  %tobool442 = icmp ne i32 %call441, 0
  br i1 %tobool442, label %if.then.443, label %if.end.581

if.then.443:                                      ; preds = %for.body
  %348 = load %struct.movable*, %struct.movable** %m, align 8
  %match = getelementptr inbounds %struct.movable, %struct.movable* %348, i32 0, i32 10
  %349 = load %struct.movable*, %struct.movable** %match, align 8
  %tobool444 = icmp ne %struct.movable* %349, null
  br i1 %tobool444, label %if.then.445, label %if.end.449

if.then.445:                                      ; preds = %if.then.443
  %350 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %351 = load %struct.movable*, %struct.movable** %m, align 8
  %match446 = getelementptr inbounds %struct.movable, %struct.movable* %351, i32 0, i32 10
  %352 = load %struct.movable*, %struct.movable** %match446, align 8
  %set_dest447 = getelementptr inbounds %struct.movable, %struct.movable* %352, i32 0, i32 2
  %353 = load %struct.rtx_def*, %struct.rtx_def** %set_dest447, align 8
  %354 = load %struct.rtx_def**, %struct.rtx_def*** %ext_val.addr, align 8
  %355 = load i32*, i32** %benefit.addr, align 8
  %call448 = call %struct.rtx_def* @simplify_giv_expr(%struct.loop* %350, %struct.rtx_def* %353, %struct.rtx_def** %354, i32* %355)
  store %struct.rtx_def* %call448, %struct.rtx_def** %retval
  br label %return

if.end.449:                                       ; preds = %if.then.443
  %356 = load %struct.movable*, %struct.movable** %m, align 8
  %consec = getelementptr inbounds %struct.movable, %struct.movable* %356, i32 0, i32 4
  %357 = load i32, i32* %consec, align 4
  %cmp450 = icmp ne i32 %357, 0
  br i1 %cmp450, label %if.then.452, label %if.else.466

if.then.452:                                      ; preds = %if.end.449
  %358 = load %struct.movable*, %struct.movable** %m, align 8
  %consec453 = getelementptr inbounds %struct.movable, %struct.movable* %358, i32 0, i32 4
  %359 = load i32, i32* %consec453, align 4
  store i32 %359, i32* %i, align 4
  %360 = load %struct.movable*, %struct.movable** %m, align 8
  %insn = getelementptr inbounds %struct.movable, %struct.movable* %360, i32 0, i32 0
  %361 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  store %struct.rtx_def* %361, %struct.rtx_def** %tem, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.then.452
  %362 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %fld454 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %362, i32 0, i32 1
  %arrayidx455 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld454, i32 0, i64 2
  %rtx456 = bitcast %union.rtunion_def* %arrayidx455 to %struct.rtx_def**
  %363 = load %struct.rtx_def*, %struct.rtx_def** %rtx456, align 8
  store %struct.rtx_def* %363, %struct.rtx_def** %tem, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %364 = load i32, i32* %i, align 4
  %dec = add nsw i32 %364, -1
  store i32 %dec, i32* %i, align 4
  %cmp457 = icmp sgt i32 %dec, 0
  br i1 %cmp457, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %365 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %call459 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %365, i32 4, %struct.rtx_def* null)
  store %struct.rtx_def* %call459, %struct.rtx_def** %tem, align 8
  %366 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %tobool460 = icmp ne %struct.rtx_def* %366, null
  br i1 %tobool460, label %if.then.461, label %if.end.465

if.then.461:                                      ; preds = %do.end
  %367 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %fld462 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %367, i32 0, i32 1
  %arrayidx463 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld462, i32 0, i64 0
  %rtx464 = bitcast %union.rtunion_def* %arrayidx463 to %struct.rtx_def**
  %368 = load %struct.rtx_def*, %struct.rtx_def** %rtx464, align 8
  store %struct.rtx_def* %368, %struct.rtx_def** %tem, align 8
  br label %if.end.465

if.end.465:                                       ; preds = %if.then.461, %do.end
  br label %if.end.503

if.else.466:                                      ; preds = %if.end.449
  %369 = load %struct.movable*, %struct.movable** %m, align 8
  %insn467 = getelementptr inbounds %struct.movable, %struct.movable* %369, i32 0, i32 0
  %370 = load %struct.rtx_def*, %struct.rtx_def** %insn467, align 8
  %371 = bitcast %struct.rtx_def* %370 to i32*
  %bf.load468 = load i32, i32* %371, align 8
  %bf.clear469 = and i32 %bf.load468, 65535
  %idxprom470 = sext i32 %bf.clear469 to i64
  %arrayidx471 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom470
  %372 = load i8, i8* %arrayidx471, align 1
  %conv472 = sext i8 %372 to i32
  %cmp473 = icmp eq i32 %conv472, 105
  br i1 %cmp473, label %cond.true, label %cond.false.494

cond.true:                                        ; preds = %if.else.466
  %373 = load %struct.movable*, %struct.movable** %m, align 8
  %insn475 = getelementptr inbounds %struct.movable, %struct.movable* %373, i32 0, i32 0
  %374 = load %struct.rtx_def*, %struct.rtx_def** %insn475, align 8
  %fld476 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %374, i32 0, i32 1
  %arrayidx477 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld476, i32 0, i64 3
  %rtx478 = bitcast %union.rtunion_def* %arrayidx477 to %struct.rtx_def**
  %375 = load %struct.rtx_def*, %struct.rtx_def** %rtx478, align 8
  %376 = bitcast %struct.rtx_def* %375 to i32*
  %bf.load479 = load i32, i32* %376, align 8
  %bf.clear480 = and i32 %bf.load479, 65535
  %cmp481 = icmp eq i32 %bf.clear480, 47
  br i1 %cmp481, label %cond.true.483, label %cond.false

cond.true.483:                                    ; preds = %cond.true
  %377 = load %struct.movable*, %struct.movable** %m, align 8
  %insn484 = getelementptr inbounds %struct.movable, %struct.movable* %377, i32 0, i32 0
  %378 = load %struct.rtx_def*, %struct.rtx_def** %insn484, align 8
  %fld485 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %378, i32 0, i32 1
  %arrayidx486 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld485, i32 0, i64 3
  %rtx487 = bitcast %union.rtunion_def* %arrayidx486 to %struct.rtx_def**
  %379 = load %struct.rtx_def*, %struct.rtx_def** %rtx487, align 8
  br label %cond.end

cond.false:                                       ; preds = %cond.true
  %380 = load %struct.movable*, %struct.movable** %m, align 8
  %insn488 = getelementptr inbounds %struct.movable, %struct.movable* %380, i32 0, i32 0
  %381 = load %struct.rtx_def*, %struct.rtx_def** %insn488, align 8
  %382 = load %struct.movable*, %struct.movable** %m, align 8
  %insn489 = getelementptr inbounds %struct.movable, %struct.movable* %382, i32 0, i32 0
  %383 = load %struct.rtx_def*, %struct.rtx_def** %insn489, align 8
  %fld490 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %383, i32 0, i32 1
  %arrayidx491 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld490, i32 0, i64 3
  %rtx492 = bitcast %union.rtunion_def* %arrayidx491 to %struct.rtx_def**
  %384 = load %struct.rtx_def*, %struct.rtx_def** %rtx492, align 8
  %call493 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %381, %struct.rtx_def* %384)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true.483
  %cond = phi %struct.rtx_def* [ %379, %cond.true.483 ], [ %call493, %cond.false ]
  br label %cond.end.495

cond.false.494:                                   ; preds = %if.else.466
  br label %cond.end.495

cond.end.495:                                     ; preds = %cond.false.494, %cond.end
  %cond496 = phi %struct.rtx_def* [ %cond, %cond.end ], [ null, %cond.false.494 ]
  store %struct.rtx_def* %cond496, %struct.rtx_def** %tem, align 8
  %385 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %tobool497 = icmp ne %struct.rtx_def* %385, null
  br i1 %tobool497, label %if.then.498, label %if.end.502

if.then.498:                                      ; preds = %cond.end.495
  %386 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %fld499 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %386, i32 0, i32 1
  %arrayidx500 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld499, i32 0, i64 1
  %rtx501 = bitcast %union.rtunion_def* %arrayidx500 to %struct.rtx_def**
  %387 = load %struct.rtx_def*, %struct.rtx_def** %rtx501, align 8
  store %struct.rtx_def* %387, %struct.rtx_def** %tem, align 8
  br label %if.end.502

if.end.502:                                       ; preds = %if.then.498, %cond.end.495
  br label %if.end.503

if.end.503:                                       ; preds = %if.end.502, %if.end.465
  %388 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %tobool504 = icmp ne %struct.rtx_def* %388, null
  br i1 %tobool504, label %if.then.505, label %if.end.580

if.then.505:                                      ; preds = %if.end.503
  %389 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %390 = bitcast %struct.rtx_def* %389 to i32*
  %bf.load506 = load i32, i32* %390, align 8
  %bf.clear507 = and i32 %bf.load506, 65535
  %cmp508 = icmp eq i32 %bf.clear507, 75
  br i1 %cmp508, label %if.then.530, label %lor.lhs.false.510

lor.lhs.false.510:                                ; preds = %if.then.505
  %391 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %392 = bitcast %struct.rtx_def* %391 to i32*
  %bf.load511 = load i32, i32* %392, align 8
  %bf.clear512 = and i32 %bf.load511, 65535
  %cmp513 = icmp eq i32 %bf.clear512, 78
  br i1 %cmp513, label %if.then.530, label %lor.lhs.false.515

lor.lhs.false.515:                                ; preds = %lor.lhs.false.510
  %393 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %394 = bitcast %struct.rtx_def* %393 to i32*
  %bf.load516 = load i32, i32* %394, align 8
  %bf.clear517 = and i32 %bf.load516, 65535
  %cmp518 = icmp eq i32 %bf.clear517, 87
  br i1 %cmp518, label %if.then.530, label %lor.lhs.false.520

lor.lhs.false.520:                                ; preds = %lor.lhs.false.515
  %395 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %396 = bitcast %struct.rtx_def* %395 to i32*
  %bf.load521 = load i32, i32* %396, align 8
  %bf.clear522 = and i32 %bf.load521, 65535
  %cmp523 = icmp eq i32 %bf.clear522, 54
  br i1 %cmp523, label %if.then.530, label %lor.lhs.false.525

lor.lhs.false.525:                                ; preds = %lor.lhs.false.520
  %397 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %398 = bitcast %struct.rtx_def* %397 to i32*
  %bf.load526 = load i32, i32* %398, align 8
  %bf.clear527 = and i32 %bf.load526, 65535
  %cmp528 = icmp eq i32 %bf.clear527, 68
  br i1 %cmp528, label %if.then.530, label %if.else.535

if.then.530:                                      ; preds = %lor.lhs.false.525, %lor.lhs.false.520, %lor.lhs.false.515, %lor.lhs.false.510, %if.then.505
  %399 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %400 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %401 = load %struct.rtx_def**, %struct.rtx_def*** %ext_val.addr, align 8
  %402 = load i32*, i32** %benefit.addr, align 8
  %call531 = call %struct.rtx_def* @simplify_giv_expr(%struct.loop* %399, %struct.rtx_def* %400, %struct.rtx_def** %401, i32* %402)
  store %struct.rtx_def* %call531, %struct.rtx_def** %tem, align 8
  %403 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %tobool532 = icmp ne %struct.rtx_def* %403, null
  br i1 %tobool532, label %if.then.533, label %if.end.534

if.then.533:                                      ; preds = %if.then.530
  %404 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  store %struct.rtx_def* %404, %struct.rtx_def** %retval
  br label %return

if.end.534:                                       ; preds = %if.then.530
  br label %if.end.579

if.else.535:                                      ; preds = %lor.lhs.false.525
  %405 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %406 = bitcast %struct.rtx_def* %405 to i32*
  %bf.load536 = load i32, i32* %406, align 8
  %bf.clear537 = and i32 %bf.load536, 65535
  %cmp538 = icmp eq i32 %bf.clear537, 58
  br i1 %cmp538, label %land.lhs.true.540, label %if.end.578

land.lhs.true.540:                                ; preds = %if.else.535
  %407 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %fld541 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %407, i32 0, i32 1
  %arrayidx542 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld541, i32 0, i64 0
  %rtx543 = bitcast %union.rtunion_def* %arrayidx542 to %struct.rtx_def**
  %408 = load %struct.rtx_def*, %struct.rtx_def** %rtx543, align 8
  %409 = bitcast %struct.rtx_def* %408 to i32*
  %bf.load544 = load i32, i32* %409, align 8
  %bf.clear545 = and i32 %bf.load544, 65535
  %cmp546 = icmp eq i32 %bf.clear545, 75
  br i1 %cmp546, label %land.lhs.true.548, label %if.end.578

land.lhs.true.548:                                ; preds = %land.lhs.true.540
  %410 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %fld549 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %410, i32 0, i32 1
  %arrayidx550 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld549, i32 0, i64 0
  %rtx551 = bitcast %union.rtunion_def* %arrayidx550 to %struct.rtx_def**
  %411 = load %struct.rtx_def*, %struct.rtx_def** %rtx551, align 8
  %fld552 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %411, i32 0, i32 1
  %arrayidx553 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld552, i32 0, i64 0
  %rtx554 = bitcast %union.rtunion_def* %arrayidx553 to %struct.rtx_def**
  %412 = load %struct.rtx_def*, %struct.rtx_def** %rtx554, align 8
  %413 = bitcast %struct.rtx_def* %412 to i32*
  %bf.load555 = load i32, i32* %413, align 8
  %bf.clear556 = and i32 %bf.load555, 65535
  %cmp557 = icmp eq i32 %bf.clear556, 68
  br i1 %cmp557, label %land.lhs.true.559, label %if.end.578

land.lhs.true.559:                                ; preds = %land.lhs.true.548
  %414 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %fld560 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %414, i32 0, i32 1
  %arrayidx561 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld560, i32 0, i64 0
  %rtx562 = bitcast %union.rtunion_def* %arrayidx561 to %struct.rtx_def**
  %415 = load %struct.rtx_def*, %struct.rtx_def** %rtx562, align 8
  %fld563 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %415, i32 0, i32 1
  %arrayidx564 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld563, i32 0, i64 1
  %rtx565 = bitcast %union.rtunion_def* %arrayidx564 to %struct.rtx_def**
  %416 = load %struct.rtx_def*, %struct.rtx_def** %rtx565, align 8
  %417 = bitcast %struct.rtx_def* %416 to i32*
  %bf.load566 = load i32, i32* %417, align 8
  %bf.clear567 = and i32 %bf.load566, 65535
  %cmp568 = icmp eq i32 %bf.clear567, 54
  br i1 %cmp568, label %if.then.570, label %if.end.578

if.then.570:                                      ; preds = %land.lhs.true.559
  %418 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %419 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %fld571 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %419, i32 0, i32 1
  %arrayidx572 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld571, i32 0, i64 0
  %rtx573 = bitcast %union.rtunion_def* %arrayidx572 to %struct.rtx_def**
  %420 = load %struct.rtx_def*, %struct.rtx_def** %rtx573, align 8
  %421 = load %struct.rtx_def**, %struct.rtx_def*** %ext_val.addr, align 8
  %422 = load i32*, i32** %benefit.addr, align 8
  %call574 = call %struct.rtx_def* @simplify_giv_expr(%struct.loop* %418, %struct.rtx_def* %420, %struct.rtx_def** %421, i32* %422)
  store %struct.rtx_def* %call574, %struct.rtx_def** %tem, align 8
  %423 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %tobool575 = icmp ne %struct.rtx_def* %423, null
  br i1 %tobool575, label %if.then.576, label %if.end.577

if.then.576:                                      ; preds = %if.then.570
  %424 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  store %struct.rtx_def* %424, %struct.rtx_def** %retval
  br label %return

if.end.577:                                       ; preds = %if.then.570
  br label %if.end.578

if.end.578:                                       ; preds = %if.end.577, %land.lhs.true.559, %land.lhs.true.548, %land.lhs.true.540, %if.else.535
  br label %if.end.579

if.end.579:                                       ; preds = %if.end.578, %if.end.534
  br label %if.end.580

if.end.580:                                       ; preds = %if.end.579, %if.end.503
  br label %for.end

if.end.581:                                       ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.581
  %425 = load %struct.movable*, %struct.movable** %m, align 8
  %next = getelementptr inbounds %struct.movable, %struct.movable* %425, i32 0, i32 12
  %426 = load %struct.movable*, %struct.movable** %next, align 8
  store %struct.movable* %426, %struct.movable** %m, align 8
  br label %for.cond

for.end:                                          ; preds = %if.end.580, %for.cond
  br label %if.end.582

if.end.582:                                       ; preds = %for.end, %do_default
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end.582
  br label %sw.default.583

sw.default.583:                                   ; preds = %if.end, %sw.epilog
  %427 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %428 = bitcast %struct.rtx_def* %427 to i32*
  %bf.load584 = load i32, i32* %428, align 8
  %bf.clear585 = and i32 %bf.load584, 65535
  %cmp586 = icmp eq i32 %bf.clear585, 48
  br i1 %cmp586, label %if.then.588, label %if.end.592

if.then.588:                                      ; preds = %sw.default.583
  %429 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld589 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %429, i32 0, i32 1
  %arrayidx590 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld589, i32 0, i64 0
  %rtx591 = bitcast %union.rtunion_def* %arrayidx590 to %struct.rtx_def**
  %430 = load %struct.rtx_def*, %struct.rtx_def** %rtx591, align 8
  store %struct.rtx_def* %430, %struct.rtx_def** %x.addr, align 8
  br label %if.end.592

if.end.592:                                       ; preds = %if.then.588, %sw.default.583
  %431 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %432 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %call593 = call i32 @loop_invariant_p(%struct.loop* %431, %struct.rtx_def* %432)
  %cmp594 = icmp eq i32 %call593, 1
  br i1 %cmp594, label %if.then.596, label %if.else.643

if.then.596:                                      ; preds = %if.end.592
  %433 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %434 = bitcast %struct.rtx_def* %433 to i32*
  %bf.load597 = load i32, i32* %434, align 8
  %bf.clear598 = and i32 %bf.load597, 65535
  %cmp599 = icmp eq i32 %bf.clear598, 54
  br i1 %cmp599, label %if.then.601, label %if.end.602

if.then.601:                                      ; preds = %if.then.596
  %435 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  store %struct.rtx_def* %435, %struct.rtx_def** %retval
  br label %return

if.end.602:                                       ; preds = %if.then.596
  %436 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %437 = bitcast %struct.rtx_def* %436 to i32*
  %bf.load603 = load i32, i32* %437, align 8
  %bf.clear604 = and i32 %bf.load603, 65535
  %cmp605 = icmp eq i32 %bf.clear604, 58
  br i1 %cmp605, label %land.lhs.true.607, label %if.end.641

land.lhs.true.607:                                ; preds = %if.end.602
  %438 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld608 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %438, i32 0, i32 1
  %arrayidx609 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld608, i32 0, i64 0
  %rtx610 = bitcast %union.rtunion_def* %arrayidx609 to %struct.rtx_def**
  %439 = load %struct.rtx_def*, %struct.rtx_def** %rtx610, align 8
  %440 = bitcast %struct.rtx_def* %439 to i32*
  %bf.load611 = load i32, i32* %440, align 8
  %bf.clear612 = and i32 %bf.load611, 65535
  %cmp613 = icmp eq i32 %bf.clear612, 75
  br i1 %cmp613, label %land.lhs.true.615, label %if.end.641

land.lhs.true.615:                                ; preds = %land.lhs.true.607
  %441 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld616 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %441, i32 0, i32 1
  %arrayidx617 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld616, i32 0, i64 0
  %rtx618 = bitcast %union.rtunion_def* %arrayidx617 to %struct.rtx_def**
  %442 = load %struct.rtx_def*, %struct.rtx_def** %rtx618, align 8
  %fld619 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %442, i32 0, i32 1
  %arrayidx620 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld619, i32 0, i64 0
  %rtx621 = bitcast %union.rtunion_def* %arrayidx620 to %struct.rtx_def**
  %443 = load %struct.rtx_def*, %struct.rtx_def** %rtx621, align 8
  %444 = bitcast %struct.rtx_def* %443 to i32*
  %bf.load622 = load i32, i32* %444, align 8
  %bf.clear623 = and i32 %bf.load622, 65535
  %cmp624 = icmp eq i32 %bf.clear623, 68
  br i1 %cmp624, label %land.lhs.true.626, label %if.end.641

land.lhs.true.626:                                ; preds = %land.lhs.true.615
  %445 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld627 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %445, i32 0, i32 1
  %arrayidx628 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld627, i32 0, i64 0
  %rtx629 = bitcast %union.rtunion_def* %arrayidx628 to %struct.rtx_def**
  %446 = load %struct.rtx_def*, %struct.rtx_def** %rtx629, align 8
  %fld630 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %446, i32 0, i32 1
  %arrayidx631 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld630, i32 0, i64 1
  %rtx632 = bitcast %union.rtunion_def* %arrayidx631 to %struct.rtx_def**
  %447 = load %struct.rtx_def*, %struct.rtx_def** %rtx632, align 8
  %448 = bitcast %struct.rtx_def* %447 to i32*
  %bf.load633 = load i32, i32* %448, align 8
  %bf.clear634 = and i32 %bf.load633, 65535
  %cmp635 = icmp eq i32 %bf.clear634, 54
  br i1 %cmp635, label %if.then.637, label %if.end.641

if.then.637:                                      ; preds = %land.lhs.true.626
  %449 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld638 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %449, i32 0, i32 1
  %arrayidx639 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld638, i32 0, i64 0
  %rtx640 = bitcast %union.rtunion_def* %arrayidx639 to %struct.rtx_def**
  %450 = load %struct.rtx_def*, %struct.rtx_def** %rtx640, align 8
  store %struct.rtx_def* %450, %struct.rtx_def** %x.addr, align 8
  br label %if.end.641

if.end.641:                                       ; preds = %if.then.637, %land.lhs.true.626, %land.lhs.true.615, %land.lhs.true.607, %if.end.602
  %451 = load i32, i32* %mode, align 4
  %452 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %call642 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 %451, %struct.rtx_def* %452)
  store %struct.rtx_def* %call642, %struct.rtx_def** %retval
  br label %return

if.else.643:                                      ; preds = %if.end.592
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.else.643, %if.end.641, %if.then.601, %if.then.576, %if.then.533, %if.then.445, %if.end.432, %if.else.430, %if.then.428, %if.then.415, %sw.bb.391, %if.then.383, %if.then.372, %sw.bb.354, %sw.bb.347, %sw.bb.341, %if.end.328, %if.then.327, %sw.bb.307, %sw.bb.297, %if.end.294, %if.then.282, %if.then.267, %if.then.258, %sw.bb.246, %sw.bb.244, %if.then.239, %if.then.235, %if.then.231, %if.then.204, %sw.bb.180, %if.end.167, %if.then.166, %if.then.163, %if.then.143, %sw.bb.107, %sw.bb.105, %if.end.104, %if.then.51, %if.then.21, %if.then
  %453 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %453
}

; Function Attrs: nounwind uwtable
define internal %struct.rtx_def* @sge_plus_constant(%struct.rtx_def* %x, %struct.rtx_def* %c) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %x.addr = alloca %struct.rtx_def*, align 8
  %c.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  store %struct.rtx_def* %c, %struct.rtx_def** %c.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 54
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx to i64*
  %3 = load i64, i64* %rtwint, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %c.addr, align 8
  %fld1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1
  %arrayidx2 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1, i32 0, i64 0
  %rtwint3 = bitcast %union.rtunion_def* %arrayidx2 to i64*
  %5 = load i64, i64* %rtwint3, align 8
  %add = add nsw i64 %3, %5
  %call = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %add)
  store %struct.rtx_def* %call, %struct.rtx_def** %retval
  br label %return

if.else:                                          ; preds = %entry
  %6 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %7 = bitcast %struct.rtx_def* %6 to i32*
  %bf.load4 = load i32, i32* %7, align 8
  %bf.clear5 = and i32 %bf.load4, 65535
  %cmp6 = icmp ne i32 %bf.clear5, 75
  br i1 %cmp6, label %if.then.7, label %if.else.11

if.then.7:                                        ; preds = %if.else
  %8 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %9 = bitcast %struct.rtx_def* %8 to i32*
  %bf.load8 = load i32, i32* %9, align 8
  %bf.lshr = lshr i32 %bf.load8, 16
  %bf.clear9 = and i32 %bf.lshr, 255
  %10 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %11 = load %struct.rtx_def*, %struct.rtx_def** %c.addr, align 8
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %bf.clear9, %struct.rtx_def* %10, %struct.rtx_def* %11)
  store %struct.rtx_def* %call10, %struct.rtx_def** %retval
  br label %return

if.else.11:                                       ; preds = %if.else
  %12 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld12 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1
  %arrayidx13 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld12, i32 0, i64 1
  %rtx = bitcast %union.rtunion_def* %arrayidx13 to %struct.rtx_def**
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %14 = bitcast %struct.rtx_def* %13 to i32*
  %bf.load14 = load i32, i32* %14, align 8
  %bf.clear15 = and i32 %bf.load14, 65535
  %cmp16 = icmp eq i32 %bf.clear15, 54
  br i1 %cmp16, label %if.then.17, label %if.else.36

if.then.17:                                       ; preds = %if.else.11
  %15 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %16 = bitcast %struct.rtx_def* %15 to i32*
  %bf.load18 = load i32, i32* %16, align 8
  %bf.lshr19 = lshr i32 %bf.load18, 16
  %bf.clear20 = and i32 %bf.lshr19, 255
  %17 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld21 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1
  %arrayidx22 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld21, i32 0, i64 0
  %rtx23 = bitcast %union.rtunion_def* %arrayidx22 to %struct.rtx_def**
  %18 = load %struct.rtx_def*, %struct.rtx_def** %rtx23, align 8
  %19 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld24 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1
  %arrayidx25 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld24, i32 0, i64 1
  %rtx26 = bitcast %union.rtunion_def* %arrayidx25 to %struct.rtx_def**
  %20 = load %struct.rtx_def*, %struct.rtx_def** %rtx26, align 8
  %fld27 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1
  %arrayidx28 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld27, i32 0, i64 0
  %rtwint29 = bitcast %union.rtunion_def* %arrayidx28 to i64*
  %21 = load i64, i64* %rtwint29, align 8
  %22 = load %struct.rtx_def*, %struct.rtx_def** %c.addr, align 8
  %fld30 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1
  %arrayidx31 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld30, i32 0, i64 0
  %rtwint32 = bitcast %union.rtunion_def* %arrayidx31 to i64*
  %23 = load i64, i64* %rtwint32, align 8
  %add33 = add nsw i64 %21, %23
  %call34 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %add33)
  %call35 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %bf.clear20, %struct.rtx_def* %18, %struct.rtx_def* %call34)
  store %struct.rtx_def* %call35, %struct.rtx_def** %retval
  br label %return

if.else.36:                                       ; preds = %if.else.11
  %24 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld37 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1
  %arrayidx38 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld37, i32 0, i64 0
  %rtx39 = bitcast %union.rtunion_def* %arrayidx38 to %struct.rtx_def**
  %25 = load %struct.rtx_def*, %struct.rtx_def** %rtx39, align 8
  %26 = bitcast %struct.rtx_def* %25 to i32*
  %bf.load40 = load i32, i32* %26, align 8
  %bf.clear41 = and i32 %bf.load40, 65535
  %cmp42 = icmp eq i32 %bf.clear41, 75
  br i1 %cmp42, label %if.then.49, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else.36
  %27 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld43 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1
  %arrayidx44 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld43, i32 0, i64 1
  %rtx45 = bitcast %union.rtunion_def* %arrayidx44 to %struct.rtx_def**
  %28 = load %struct.rtx_def*, %struct.rtx_def** %rtx45, align 8
  %29 = bitcast %struct.rtx_def* %28 to i32*
  %bf.load46 = load i32, i32* %29, align 8
  %bf.clear47 = and i32 %bf.load46, 65535
  %cmp48 = icmp ne i32 %bf.clear47, 75
  br i1 %cmp48, label %if.then.49, label %if.else.61

if.then.49:                                       ; preds = %lor.lhs.false, %if.else.36
  %30 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %31 = bitcast %struct.rtx_def* %30 to i32*
  %bf.load50 = load i32, i32* %31, align 8
  %bf.lshr51 = lshr i32 %bf.load50, 16
  %bf.clear52 = and i32 %bf.lshr51, 255
  %32 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld53 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %32, i32 0, i32 1
  %arrayidx54 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld53, i32 0, i64 0
  %rtx55 = bitcast %union.rtunion_def* %arrayidx54 to %struct.rtx_def**
  %33 = load %struct.rtx_def*, %struct.rtx_def** %rtx55, align 8
  %34 = load %struct.rtx_def*, %struct.rtx_def** %c.addr, align 8
  %call56 = call %struct.rtx_def* @sge_plus_constant(%struct.rtx_def* %33, %struct.rtx_def* %34)
  %35 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld57 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %35, i32 0, i32 1
  %arrayidx58 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld57, i32 0, i64 1
  %rtx59 = bitcast %union.rtunion_def* %arrayidx58 to %struct.rtx_def**
  %36 = load %struct.rtx_def*, %struct.rtx_def** %rtx59, align 8
  %call60 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %bf.clear52, %struct.rtx_def* %call56, %struct.rtx_def* %36)
  store %struct.rtx_def* %call60, %struct.rtx_def** %retval
  br label %return

if.else.61:                                       ; preds = %lor.lhs.false
  %37 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %38 = bitcast %struct.rtx_def* %37 to i32*
  %bf.load62 = load i32, i32* %38, align 8
  %bf.lshr63 = lshr i32 %bf.load62, 16
  %bf.clear64 = and i32 %bf.lshr63, 255
  %39 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld65 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1
  %arrayidx66 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld65, i32 0, i64 1
  %rtx67 = bitcast %union.rtunion_def* %arrayidx66 to %struct.rtx_def**
  %40 = load %struct.rtx_def*, %struct.rtx_def** %rtx67, align 8
  %41 = load %struct.rtx_def*, %struct.rtx_def** %c.addr, align 8
  %call68 = call %struct.rtx_def* @sge_plus_constant(%struct.rtx_def* %40, %struct.rtx_def* %41)
  %42 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld69 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %42, i32 0, i32 1
  %arrayidx70 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld69, i32 0, i64 0
  %rtx71 = bitcast %union.rtunion_def* %arrayidx70 to %struct.rtx_def**
  %43 = load %struct.rtx_def*, %struct.rtx_def** %rtx71, align 8
  %call72 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %bf.clear64, %struct.rtx_def* %call68, %struct.rtx_def* %43)
  store %struct.rtx_def* %call72, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.else.61, %if.then.49, %if.then.17, %if.then.7, %if.then
  %44 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %44
}

; Function Attrs: nounwind uwtable
define internal %struct.rtx_def* @sge_plus(i32 %mode, %struct.rtx_def* %x, %struct.rtx_def* %y) #0 {
entry:
  %mode.addr = alloca i32, align 4
  %x.addr = alloca %struct.rtx_def*, align 8
  %y.addr = alloca %struct.rtx_def*, align 8
  %a = alloca %struct.rtx_def*, align 8
  store i32 %mode, i32* %mode.addr, align 4
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  store %struct.rtx_def* %y, %struct.rtx_def** %y.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %0 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 75
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %3 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %a, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %a, align 8
  %5 = bitcast %struct.rtx_def* %4 to i32*
  %bf.load1 = load i32, i32* %5, align 8
  %bf.clear2 = and i32 %bf.load1, 65535
  %cmp3 = icmp eq i32 %bf.clear2, 54
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %6 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %a, align 8
  %call = call %struct.rtx_def* @sge_plus_constant(%struct.rtx_def* %6, %struct.rtx_def* %7)
  store %struct.rtx_def* %call, %struct.rtx_def** %x.addr, align 8
  br label %if.end

if.else:                                          ; preds = %while.body
  %8 = load i32, i32* %mode.addr, align 4
  %9 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %a, align 8
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %8, %struct.rtx_def* %9, %struct.rtx_def* %10)
  store %struct.rtx_def* %call4, %struct.rtx_def** %x.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %11 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %fld5 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1
  %arrayidx6 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld5, i32 0, i64 1
  %rtx7 = bitcast %union.rtunion_def* %arrayidx6 to %struct.rtx_def**
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rtx7, align 8
  store %struct.rtx_def* %12, %struct.rtx_def** %y.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %13 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %14 = bitcast %struct.rtx_def* %13 to i32*
  %bf.load8 = load i32, i32* %14, align 8
  %bf.clear9 = and i32 %bf.load8, 65535
  %cmp10 = icmp eq i32 %bf.clear9, 54
  br i1 %cmp10, label %if.then.11, label %if.else.13

if.then.11:                                       ; preds = %while.end
  %15 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %16 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %call12 = call %struct.rtx_def* @sge_plus_constant(%struct.rtx_def* %15, %struct.rtx_def* %16)
  store %struct.rtx_def* %call12, %struct.rtx_def** %x.addr, align 8
  br label %if.end.15

if.else.13:                                       ; preds = %while.end
  %17 = load i32, i32* %mode.addr, align 4
  %18 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %19 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %call14 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %17, %struct.rtx_def* %18, %struct.rtx_def* %19)
  store %struct.rtx_def* %call14, %struct.rtx_def** %x.addr, align 8
  br label %if.end.15

if.end.15:                                        ; preds = %if.else.13, %if.then.11
  %20 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  ret %struct.rtx_def* %20
}

declare %struct.rtx_def* @simplify_rtx(%struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define internal i32 @last_use_this_basic_block(%struct.rtx_def* %reg, %struct.rtx_def* %insn) #0 {
entry:
  %retval = alloca i32, align 4
  %reg.addr = alloca %struct.rtx_def*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  %n = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %reg, %struct.rtx_def** %reg.addr, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  store %struct.rtx_def* %0, %struct.rtx_def** %n, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %n, align 8
  %tobool = icmp ne %struct.rtx_def* %1, null
  br i1 %tobool, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %for.cond
  %2 = load %struct.rtx_def*, %struct.rtx_def** %n, align 8
  %3 = bitcast %struct.rtx_def* %2 to i32*
  %bf.load = load i32, i32* %3, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp ne i32 %bf.clear, 36
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true
  %4 = load %struct.rtx_def*, %struct.rtx_def** %n, align 8
  %5 = bitcast %struct.rtx_def* %4 to i32*
  %bf.load1 = load i32, i32* %5, align 8
  %bf.clear2 = and i32 %bf.load1, 65535
  %cmp3 = icmp ne i32 %bf.clear2, 33
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %for.cond
  %6 = phi i1 [ false, %land.lhs.true ], [ false, %for.cond ], [ %cmp3, %land.rhs ]
  br i1 %6, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %7 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx to i32*
  %8 = load i32, i32* %rtuint, align 4
  %idxprom = zext i32 %8 to i64
  %9 = load %struct.varray_head_tag*, %struct.varray_head_tag** @reg_n_info, align 8
  %data = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %9, i32 0, i32 4
  %reg4 = bitcast %union.varray_data_tag* %data to [1 x %struct.reg_info_def*]*
  %arrayidx5 = getelementptr inbounds [1 x %struct.reg_info_def*], [1 x %struct.reg_info_def*]* %reg4, i32 0, i64 %idxprom
  %10 = load %struct.reg_info_def*, %struct.reg_info_def** %arrayidx5, align 8
  %last_uid = getelementptr inbounds %struct.reg_info_def, %struct.reg_info_def* %10, i32 0, i32 1
  %11 = load i32, i32* %last_uid, align 4
  %12 = load %struct.rtx_def*, %struct.rtx_def** %n, align 8
  %fld6 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld6, i32 0, i64 0
  %rtint = bitcast %union.rtunion_def* %arrayidx7 to i32*
  %13 = load i32, i32* %rtint, align 4
  %cmp8 = icmp eq i32 %11, %13
  br i1 %cmp8, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %14 = load %struct.rtx_def*, %struct.rtx_def** %n, align 8
  %fld9 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1
  %arrayidx10 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld9, i32 0, i64 2
  %rtx = bitcast %union.rtunion_def* %arrayidx10 to %struct.rtx_def**
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %15, %struct.rtx_def** %n, align 8
  br label %for.cond

for.end:                                          ; preds = %land.end
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then
  %16 = load i32, i32* %retval
  ret i32 %16
}

declare %struct.rtx_def* @simplify_gen_binary(i32, i32, %struct.rtx_def*, %struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define internal i64 @remove_constant_addition(%struct.rtx_def** %x) #0 {
entry:
  %retval = alloca i64, align 8
  %x.addr = alloca %struct.rtx_def**, align 8
  %addval = alloca i64, align 8
  %exp = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %x, %struct.rtx_def*** %x.addr, align 8
  store i64 0, i64* %addval, align 8
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %x.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %0, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %exp, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %exp, align 8
  %3 = bitcast %struct.rtx_def* %2 to i32*
  %bf.load = load i32, i32* %3, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 58
  br i1 %cmp, label %if.then, label %if.end.38

if.then:                                          ; preds = %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %exp, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %5 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %6 = bitcast %struct.rtx_def* %5 to i32*
  %bf.load1 = load i32, i32* %6, align 8
  %bf.clear2 = and i32 %bf.load1, 65535
  %cmp3 = icmp eq i32 %bf.clear2, 75
  br i1 %cmp3, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then
  %7 = load %struct.rtx_def*, %struct.rtx_def** %exp, align 8
  %fld4 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1
  %arrayidx5 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld4, i32 0, i64 0
  %rtx6 = bitcast %union.rtunion_def* %arrayidx5 to %struct.rtx_def**
  %8 = load %struct.rtx_def*, %struct.rtx_def** %rtx6, align 8
  %fld7 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1
  %arrayidx8 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld7, i32 0, i64 0
  %rtx9 = bitcast %union.rtunion_def* %arrayidx8 to %struct.rtx_def**
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rtx9, align 8
  %10 = bitcast %struct.rtx_def* %9 to i32*
  %bf.load10 = load i32, i32* %10, align 8
  %bf.clear11 = and i32 %bf.load10, 65535
  %cmp12 = icmp eq i32 %bf.clear11, 68
  br i1 %cmp12, label %land.lhs.true.13, label %if.end

land.lhs.true.13:                                 ; preds = %land.lhs.true
  %11 = load %struct.rtx_def*, %struct.rtx_def** %exp, align 8
  %fld14 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1
  %arrayidx15 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld14, i32 0, i64 0
  %rtx16 = bitcast %union.rtunion_def* %arrayidx15 to %struct.rtx_def**
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rtx16, align 8
  %fld17 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1
  %arrayidx18 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld17, i32 0, i64 1
  %rtx19 = bitcast %union.rtunion_def* %arrayidx18 to %struct.rtx_def**
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rtx19, align 8
  %14 = bitcast %struct.rtx_def* %13 to i32*
  %bf.load20 = load i32, i32* %14, align 8
  %bf.clear21 = and i32 %bf.load20, 65535
  %cmp22 = icmp eq i32 %bf.clear21, 54
  br i1 %cmp22, label %if.then.23, label %if.end

if.then.23:                                       ; preds = %land.lhs.true.13
  %15 = load %struct.rtx_def*, %struct.rtx_def** %exp, align 8
  %fld24 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1
  %arrayidx25 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld24, i32 0, i64 0
  %rtx26 = bitcast %union.rtunion_def* %arrayidx25 to %struct.rtx_def**
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rtx26, align 8
  %fld27 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1
  %arrayidx28 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld27, i32 0, i64 0
  %rtx29 = bitcast %union.rtunion_def* %arrayidx28 to %struct.rtx_def**
  %17 = load %struct.rtx_def*, %struct.rtx_def** %rtx29, align 8
  %18 = load %struct.rtx_def**, %struct.rtx_def*** %x.addr, align 8
  store %struct.rtx_def* %17, %struct.rtx_def** %18, align 8
  %19 = load %struct.rtx_def*, %struct.rtx_def** %exp, align 8
  %fld30 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1
  %arrayidx31 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld30, i32 0, i64 0
  %rtx32 = bitcast %union.rtunion_def* %arrayidx31 to %struct.rtx_def**
  %20 = load %struct.rtx_def*, %struct.rtx_def** %rtx32, align 8
  %fld33 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1
  %arrayidx34 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld33, i32 0, i64 1
  %rtx35 = bitcast %union.rtunion_def* %arrayidx34 to %struct.rtx_def**
  %21 = load %struct.rtx_def*, %struct.rtx_def** %rtx35, align 8
  %fld36 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1
  %arrayidx37 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld36, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx37 to i64*
  %22 = load i64, i64* %rtwint, align 8
  store i64 %22, i64* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true.13, %land.lhs.true, %if.then
  store i64 0, i64* %retval
  br label %return

if.end.38:                                        ; preds = %entry
  %23 = load %struct.rtx_def*, %struct.rtx_def** %exp, align 8
  %24 = bitcast %struct.rtx_def* %23 to i32*
  %bf.load39 = load i32, i32* %24, align 8
  %bf.clear40 = and i32 %bf.load39, 65535
  %cmp41 = icmp eq i32 %bf.clear40, 54
  br i1 %cmp41, label %if.then.42, label %if.else

if.then.42:                                       ; preds = %if.end.38
  %25 = load %struct.rtx_def*, %struct.rtx_def** %exp, align 8
  %fld43 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1
  %arrayidx44 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld43, i32 0, i64 0
  %rtwint45 = bitcast %union.rtunion_def* %arrayidx44 to i64*
  %26 = load i64, i64* %rtwint45, align 8
  store i64 %26, i64* %addval, align 8
  %27 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %28 = load %struct.rtx_def**, %struct.rtx_def*** %x.addr, align 8
  store %struct.rtx_def* %27, %struct.rtx_def** %28, align 8
  br label %if.end.78

if.else:                                          ; preds = %if.end.38
  %29 = load %struct.rtx_def*, %struct.rtx_def** %exp, align 8
  %30 = bitcast %struct.rtx_def* %29 to i32*
  %bf.load46 = load i32, i32* %30, align 8
  %bf.clear47 = and i32 %bf.load46, 65535
  %cmp48 = icmp eq i32 %bf.clear47, 75
  br i1 %cmp48, label %if.then.49, label %if.end.77

if.then.49:                                       ; preds = %if.else
  %31 = load %struct.rtx_def*, %struct.rtx_def** %exp, align 8
  %fld50 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1
  %arrayidx51 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld50, i32 0, i64 0
  %rtx52 = bitcast %union.rtunion_def* %arrayidx51 to %struct.rtx_def**
  %call = call i64 @remove_constant_addition(%struct.rtx_def** %rtx52)
  %32 = load i64, i64* %addval, align 8
  %add = add nsw i64 %32, %call
  store i64 %add, i64* %addval, align 8
  %33 = load %struct.rtx_def*, %struct.rtx_def** %exp, align 8
  %fld53 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1
  %arrayidx54 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld53, i32 0, i64 1
  %rtx55 = bitcast %union.rtunion_def* %arrayidx54 to %struct.rtx_def**
  %call56 = call i64 @remove_constant_addition(%struct.rtx_def** %rtx55)
  %34 = load i64, i64* %addval, align 8
  %add57 = add nsw i64 %34, %call56
  store i64 %add57, i64* %addval, align 8
  %35 = load %struct.rtx_def*, %struct.rtx_def** %exp, align 8
  %fld58 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %35, i32 0, i32 1
  %arrayidx59 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld58, i32 0, i64 0
  %rtx60 = bitcast %union.rtunion_def* %arrayidx59 to %struct.rtx_def**
  %36 = load %struct.rtx_def*, %struct.rtx_def** %rtx60, align 8
  %37 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %cmp61 = icmp eq %struct.rtx_def* %36, %37
  br i1 %cmp61, label %if.then.62, label %if.else.66

if.then.62:                                       ; preds = %if.then.49
  %38 = load %struct.rtx_def*, %struct.rtx_def** %exp, align 8
  %fld63 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %38, i32 0, i32 1
  %arrayidx64 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld63, i32 0, i64 1
  %rtx65 = bitcast %union.rtunion_def* %arrayidx64 to %struct.rtx_def**
  %39 = load %struct.rtx_def*, %struct.rtx_def** %rtx65, align 8
  %40 = load %struct.rtx_def**, %struct.rtx_def*** %x.addr, align 8
  store %struct.rtx_def* %39, %struct.rtx_def** %40, align 8
  br label %if.end.76

if.else.66:                                       ; preds = %if.then.49
  %41 = load %struct.rtx_def*, %struct.rtx_def** %exp, align 8
  %fld67 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %41, i32 0, i32 1
  %arrayidx68 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld67, i32 0, i64 1
  %rtx69 = bitcast %union.rtunion_def* %arrayidx68 to %struct.rtx_def**
  %42 = load %struct.rtx_def*, %struct.rtx_def** %rtx69, align 8
  %43 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %cmp70 = icmp eq %struct.rtx_def* %42, %43
  br i1 %cmp70, label %if.then.71, label %if.end.75

if.then.71:                                       ; preds = %if.else.66
  %44 = load %struct.rtx_def*, %struct.rtx_def** %exp, align 8
  %fld72 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %44, i32 0, i32 1
  %arrayidx73 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld72, i32 0, i64 0
  %rtx74 = bitcast %union.rtunion_def* %arrayidx73 to %struct.rtx_def**
  %45 = load %struct.rtx_def*, %struct.rtx_def** %rtx74, align 8
  %46 = load %struct.rtx_def**, %struct.rtx_def*** %x.addr, align 8
  store %struct.rtx_def* %45, %struct.rtx_def** %46, align 8
  br label %if.end.75

if.end.75:                                        ; preds = %if.then.71, %if.else.66
  br label %if.end.76

if.end.76:                                        ; preds = %if.end.75, %if.then.62
  br label %if.end.77

if.end.77:                                        ; preds = %if.end.76, %if.else
  br label %if.end.78

if.end.78:                                        ; preds = %if.end.77, %if.then.42
  %47 = load i64, i64* %addval, align 8
  store i64 %47, i64* %retval
  br label %return

return:                                           ; preds = %if.end.78, %if.end, %if.then.23
  %48 = load i64, i64* %retval
  ret i64 %48
}

; Function Attrs: nounwind uwtable
define internal void @check_store(%struct.rtx_def* %x, %struct.rtx_def* %pat, i8* %data) #0 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  %pat.addr = alloca %struct.rtx_def*, align 8
  %data.addr = alloca i8*, align 8
  %d = alloca %struct.check_store_data*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  store %struct.rtx_def* %pat, %struct.rtx_def** %pat.addr, align 8
  store i8* %data, i8** %data.addr, align 8
  %0 = load i8*, i8** %data.addr, align 8
  %1 = bitcast i8* %0 to %struct.check_store_data*
  store %struct.check_store_data* %1, %struct.check_store_data** %d, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %3 = bitcast %struct.rtx_def* %2 to i32*
  %bf.load = load i32, i32* %3, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 66
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %4 = load %struct.check_store_data*, %struct.check_store_data** %d, align 8
  %mem_address = getelementptr inbounds %struct.check_store_data, %struct.check_store_data* %4, i32 0, i32 0
  %5 = load %struct.rtx_def*, %struct.rtx_def** %mem_address, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %7 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %call = call i32 @rtx_equal_p(%struct.rtx_def* %5, %struct.rtx_def* %7)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %8 = load %struct.check_store_data*, %struct.check_store_data** %d, align 8
  %mem_write = getelementptr inbounds %struct.check_store_data, %struct.check_store_data* %8, i32 0, i32 1
  store i32 1, i32* %mem_write, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @rtx_equal_for_prefetch_p(%struct.rtx_def* %x, %struct.rtx_def* %y) #0 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca %struct.rtx_def*, align 8
  %y.addr = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %code = alloca i32, align 4
  %fmt = alloca i8*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  store %struct.rtx_def* %y, %struct.rtx_def** %y.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  store i32 %bf.clear, i32* %code, align 4
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %cmp = icmp eq %struct.rtx_def* %2, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %4 = load i32, i32* %code, align 4
  %5 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %6 = bitcast %struct.rtx_def* %5 to i32*
  %bf.load1 = load i32, i32* %6, align 8
  %bf.clear2 = and i32 %bf.load1, 65535
  %cmp3 = icmp ne i32 %4, %bf.clear2
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

if.end.5:                                         ; preds = %if.end
  %7 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %8 = bitcast %struct.rtx_def* %7 to i32*
  %bf.load6 = load i32, i32* %8, align 8
  %bf.clear7 = and i32 %bf.load6, 65535
  store i32 %bf.clear7, i32* %code, align 4
  %9 = load i32, i32* %code, align 4
  %idxprom = sext i32 %9 to i64
  %arrayidx = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom
  %10 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %10 to i32
  %cmp8 = icmp eq i32 %conv, 99
  br i1 %cmp8, label %if.then.10, label %if.end.39

if.then.10:                                       ; preds = %if.end.5
  %11 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1
  %arrayidx11 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx11 to %struct.rtx_def**
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %13 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %fld12 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1
  %arrayidx13 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld12, i32 0, i64 0
  %rtx14 = bitcast %union.rtunion_def* %arrayidx13 to %struct.rtx_def**
  %14 = load %struct.rtx_def*, %struct.rtx_def** %rtx14, align 8
  %call = call i32 @rtx_equal_for_prefetch_p(%struct.rtx_def* %12, %struct.rtx_def* %14)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %land.lhs.true, label %lor.rhs

land.lhs.true:                                    ; preds = %if.then.10
  %15 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld15 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1
  %arrayidx16 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld15, i32 0, i64 1
  %rtx17 = bitcast %union.rtunion_def* %arrayidx16 to %struct.rtx_def**
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rtx17, align 8
  %17 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %fld18 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1
  %arrayidx19 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld18, i32 0, i64 1
  %rtx20 = bitcast %union.rtunion_def* %arrayidx19 to %struct.rtx_def**
  %18 = load %struct.rtx_def*, %struct.rtx_def** %rtx20, align 8
  %call21 = call i32 @rtx_equal_for_prefetch_p(%struct.rtx_def* %16, %struct.rtx_def* %18)
  %tobool22 = icmp ne i32 %call21, 0
  br i1 %tobool22, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.lhs.true, %if.then.10
  %19 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld23 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1
  %arrayidx24 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld23, i32 0, i64 0
  %rtx25 = bitcast %union.rtunion_def* %arrayidx24 to %struct.rtx_def**
  %20 = load %struct.rtx_def*, %struct.rtx_def** %rtx25, align 8
  %21 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %fld26 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1
  %arrayidx27 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld26, i32 0, i64 1
  %rtx28 = bitcast %union.rtunion_def* %arrayidx27 to %struct.rtx_def**
  %22 = load %struct.rtx_def*, %struct.rtx_def** %rtx28, align 8
  %call29 = call i32 @rtx_equal_for_prefetch_p(%struct.rtx_def* %20, %struct.rtx_def* %22)
  %tobool30 = icmp ne i32 %call29, 0
  br i1 %tobool30, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %lor.rhs
  %23 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld31 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1
  %arrayidx32 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld31, i32 0, i64 1
  %rtx33 = bitcast %union.rtunion_def* %arrayidx32 to %struct.rtx_def**
  %24 = load %struct.rtx_def*, %struct.rtx_def** %rtx33, align 8
  %25 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %fld34 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1
  %arrayidx35 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld34, i32 0, i64 0
  %rtx36 = bitcast %union.rtunion_def* %arrayidx35 to %struct.rtx_def**
  %26 = load %struct.rtx_def*, %struct.rtx_def** %rtx36, align 8
  %call37 = call i32 @rtx_equal_for_prefetch_p(%struct.rtx_def* %24, %struct.rtx_def* %26)
  %tobool38 = icmp ne i32 %call37, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %27 = phi i1 [ false, %lor.rhs ], [ %tobool38, %land.rhs ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %land.lhs.true
  %28 = phi i1 [ true, %land.lhs.true ], [ %27, %land.end ]
  %lor.ext = zext i1 %28 to i32
  store i32 %lor.ext, i32* %retval
  br label %return

if.end.39:                                        ; preds = %if.end.5
  %29 = load i32, i32* %code, align 4
  %idxprom40 = sext i32 %29 to i64
  %arrayidx41 = getelementptr inbounds [153 x i8*], [153 x i8*]* @rtx_format, i32 0, i64 %idxprom40
  %30 = load i8*, i8** %arrayidx41, align 8
  store i8* %30, i8** %fmt, align 8
  %31 = load i32, i32* %code, align 4
  %idxprom42 = sext i32 %31 to i64
  %arrayidx43 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_length, i32 0, i64 %idxprom42
  %32 = load i8, i8* %arrayidx43, align 1
  %conv44 = zext i8 %32 to i32
  %sub = sub nsw i32 %conv44, 1
  store i32 %sub, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.141, %if.end.39
  %33 = load i32, i32* %i, align 4
  %cmp45 = icmp sge i32 %33, 0
  br i1 %cmp45, label %for.body, label %for.end.142

for.body:                                         ; preds = %for.cond
  %34 = load i32, i32* %i, align 4
  %idxprom47 = sext i32 %34 to i64
  %35 = load i8*, i8** %fmt, align 8
  %arrayidx48 = getelementptr inbounds i8, i8* %35, i64 %idxprom47
  %36 = load i8, i8* %arrayidx48, align 1
  %conv49 = sext i8 %36 to i32
  switch i32 %conv49, label %sw.default [
    i32 119, label %sw.bb
    i32 105, label %sw.bb.61
    i32 69, label %sw.bb.73
    i32 101, label %sw.bb.113
    i32 115, label %sw.bb.127
    i32 117, label %sw.bb.139
    i32 48, label %sw.bb.140
  ]

sw.bb:                                            ; preds = %for.body
  %37 = load i32, i32* %i, align 4
  %idxprom50 = sext i32 %37 to i64
  %38 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld51 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %38, i32 0, i32 1
  %arrayidx52 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld51, i32 0, i64 %idxprom50
  %rtwint = bitcast %union.rtunion_def* %arrayidx52 to i64*
  %39 = load i64, i64* %rtwint, align 8
  %40 = load i32, i32* %i, align 4
  %idxprom53 = sext i32 %40 to i64
  %41 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %fld54 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %41, i32 0, i32 1
  %arrayidx55 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld54, i32 0, i64 %idxprom53
  %rtwint56 = bitcast %union.rtunion_def* %arrayidx55 to i64*
  %42 = load i64, i64* %rtwint56, align 8
  %cmp57 = icmp ne i64 %39, %42
  br i1 %cmp57, label %if.then.59, label %if.end.60

if.then.59:                                       ; preds = %sw.bb
  store i32 0, i32* %retval
  br label %return

if.end.60:                                        ; preds = %sw.bb
  br label %sw.epilog

sw.bb.61:                                         ; preds = %for.body
  %43 = load i32, i32* %i, align 4
  %idxprom62 = sext i32 %43 to i64
  %44 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld63 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %44, i32 0, i32 1
  %arrayidx64 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld63, i32 0, i64 %idxprom62
  %rtint = bitcast %union.rtunion_def* %arrayidx64 to i32*
  %45 = load i32, i32* %rtint, align 4
  %46 = load i32, i32* %i, align 4
  %idxprom65 = sext i32 %46 to i64
  %47 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %fld66 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %47, i32 0, i32 1
  %arrayidx67 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld66, i32 0, i64 %idxprom65
  %rtint68 = bitcast %union.rtunion_def* %arrayidx67 to i32*
  %48 = load i32, i32* %rtint68, align 4
  %cmp69 = icmp ne i32 %45, %48
  br i1 %cmp69, label %if.then.71, label %if.end.72

if.then.71:                                       ; preds = %sw.bb.61
  store i32 0, i32* %retval
  br label %return

if.end.72:                                        ; preds = %sw.bb.61
  br label %sw.epilog

sw.bb.73:                                         ; preds = %for.body
  %49 = load i32, i32* %i, align 4
  %idxprom74 = sext i32 %49 to i64
  %50 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld75 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %50, i32 0, i32 1
  %arrayidx76 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld75, i32 0, i64 %idxprom74
  %rtvec = bitcast %union.rtunion_def* %arrayidx76 to %struct.rtvec_def**
  %51 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec, align 8
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %51, i32 0, i32 0
  %52 = load i32, i32* %num_elem, align 4
  %53 = load i32, i32* %i, align 4
  %idxprom77 = sext i32 %53 to i64
  %54 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %fld78 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %54, i32 0, i32 1
  %arrayidx79 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld78, i32 0, i64 %idxprom77
  %rtvec80 = bitcast %union.rtunion_def* %arrayidx79 to %struct.rtvec_def**
  %55 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec80, align 8
  %num_elem81 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %55, i32 0, i32 0
  %56 = load i32, i32* %num_elem81, align 4
  %cmp82 = icmp ne i32 %52, %56
  br i1 %cmp82, label %if.then.84, label %if.end.85

if.then.84:                                       ; preds = %sw.bb.73
  store i32 0, i32* %retval
  br label %return

if.end.85:                                        ; preds = %sw.bb.73
  store i32 0, i32* %j, align 4
  br label %for.cond.86

for.cond.86:                                      ; preds = %for.inc, %if.end.85
  %57 = load i32, i32* %j, align 4
  %58 = load i32, i32* %i, align 4
  %idxprom87 = sext i32 %58 to i64
  %59 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld88 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %59, i32 0, i32 1
  %arrayidx89 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld88, i32 0, i64 %idxprom87
  %rtvec90 = bitcast %union.rtunion_def* %arrayidx89 to %struct.rtvec_def**
  %60 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec90, align 8
  %num_elem91 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %60, i32 0, i32 0
  %61 = load i32, i32* %num_elem91, align 4
  %cmp92 = icmp slt i32 %57, %61
  br i1 %cmp92, label %for.body.94, label %for.end

for.body.94:                                      ; preds = %for.cond.86
  %62 = load i32, i32* %j, align 4
  %idxprom95 = sext i32 %62 to i64
  %63 = load i32, i32* %i, align 4
  %idxprom96 = sext i32 %63 to i64
  %64 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld97 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %64, i32 0, i32 1
  %arrayidx98 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld97, i32 0, i64 %idxprom96
  %rtvec99 = bitcast %union.rtunion_def* %arrayidx98 to %struct.rtvec_def**
  %65 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec99, align 8
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %65, i32 0, i32 1
  %arrayidx100 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i32 0, i64 %idxprom95
  %66 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx100, align 8
  %67 = load i32, i32* %j, align 4
  %idxprom101 = sext i32 %67 to i64
  %68 = load i32, i32* %i, align 4
  %idxprom102 = sext i32 %68 to i64
  %69 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %fld103 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %69, i32 0, i32 1
  %arrayidx104 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld103, i32 0, i64 %idxprom102
  %rtvec105 = bitcast %union.rtunion_def* %arrayidx104 to %struct.rtvec_def**
  %70 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec105, align 8
  %elem106 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %70, i32 0, i32 1
  %arrayidx107 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem106, i32 0, i64 %idxprom101
  %71 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx107, align 8
  %call108 = call i32 @rtx_equal_for_prefetch_p(%struct.rtx_def* %66, %struct.rtx_def* %71)
  %cmp109 = icmp eq i32 %call108, 0
  br i1 %cmp109, label %if.then.111, label %if.end.112

if.then.111:                                      ; preds = %for.body.94
  store i32 0, i32* %retval
  br label %return

if.end.112:                                       ; preds = %for.body.94
  br label %for.inc

for.inc:                                          ; preds = %if.end.112
  %72 = load i32, i32* %j, align 4
  %inc = add nsw i32 %72, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond.86

for.end:                                          ; preds = %for.cond.86
  br label %sw.epilog

sw.bb.113:                                        ; preds = %for.body
  %73 = load i32, i32* %i, align 4
  %idxprom114 = sext i32 %73 to i64
  %74 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld115 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %74, i32 0, i32 1
  %arrayidx116 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld115, i32 0, i64 %idxprom114
  %rtx117 = bitcast %union.rtunion_def* %arrayidx116 to %struct.rtx_def**
  %75 = load %struct.rtx_def*, %struct.rtx_def** %rtx117, align 8
  %76 = load i32, i32* %i, align 4
  %idxprom118 = sext i32 %76 to i64
  %77 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %fld119 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %77, i32 0, i32 1
  %arrayidx120 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld119, i32 0, i64 %idxprom118
  %rtx121 = bitcast %union.rtunion_def* %arrayidx120 to %struct.rtx_def**
  %78 = load %struct.rtx_def*, %struct.rtx_def** %rtx121, align 8
  %call122 = call i32 @rtx_equal_for_prefetch_p(%struct.rtx_def* %75, %struct.rtx_def* %78)
  %cmp123 = icmp eq i32 %call122, 0
  br i1 %cmp123, label %if.then.125, label %if.end.126

if.then.125:                                      ; preds = %sw.bb.113
  store i32 0, i32* %retval
  br label %return

if.end.126:                                       ; preds = %sw.bb.113
  br label %sw.epilog

sw.bb.127:                                        ; preds = %for.body
  %79 = load i32, i32* %i, align 4
  %idxprom128 = sext i32 %79 to i64
  %80 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld129 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %80, i32 0, i32 1
  %arrayidx130 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld129, i32 0, i64 %idxprom128
  %rtstr = bitcast %union.rtunion_def* %arrayidx130 to i8**
  %81 = load i8*, i8** %rtstr, align 8
  %82 = load i32, i32* %i, align 4
  %idxprom131 = sext i32 %82 to i64
  %83 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %fld132 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %83, i32 0, i32 1
  %arrayidx133 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld132, i32 0, i64 %idxprom131
  %rtstr134 = bitcast %union.rtunion_def* %arrayidx133 to i8**
  %84 = load i8*, i8** %rtstr134, align 8
  %call135 = call i32 @strcmp(i8* %81, i8* %84) #7
  %tobool136 = icmp ne i32 %call135, 0
  br i1 %tobool136, label %if.then.137, label %if.end.138

if.then.137:                                      ; preds = %sw.bb.127
  store i32 0, i32* %retval
  br label %return

if.end.138:                                       ; preds = %sw.bb.127
  br label %sw.epilog

sw.bb.139:                                        ; preds = %for.body
  br label %sw.epilog

sw.bb.140:                                        ; preds = %for.body
  br label %sw.epilog

sw.default:                                       ; preds = %for.body
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 3688, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @__FUNCTION__.rtx_equal_for_prefetch_p, i32 0, i32 0)) #6
  unreachable

sw.epilog:                                        ; preds = %sw.bb.140, %sw.bb.139, %if.end.138, %if.end.126, %for.end, %if.end.72, %if.end.60
  br label %for.inc.141

for.inc.141:                                      ; preds = %sw.epilog
  %85 = load i32, i32* %i, align 4
  %dec = add nsw i32 %85, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond

for.end.142:                                      ; preds = %for.cond
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %for.end.142, %if.then.137, %if.then.125, %if.then.111, %if.then.84, %if.then.71, %if.then.59, %lor.end, %if.then.4, %if.then
  %86 = load i32, i32* %retval
  ret i32 %86
}

declare i32 @offsettable_address_p(i32, i32, %struct.rtx_def*) #1

declare %struct.rtx_def* @plus_constant_wide(%struct.rtx_def*, i64) #1

declare %struct.rtx_def* @force_reg(i32, %struct.rtx_def*) #1

declare %struct.rtx_def* @emit_insn(%struct.rtx_def*) #1

declare %struct.rtx_def* @gen_prefetch(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #1

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8*, i8*) #5

; Function Attrs: nounwind uwtable
define internal void @check_final_value(%struct.loop* %loop, %struct.induction* %v) #0 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %v.addr = alloca %struct.induction*, align 8
  %ivs = alloca %struct.loop_ivs*, align 8
  %bl = alloca %struct.iv_class*, align 8
  %final_value = alloca %struct.rtx_def*, align 8
  %biv_increment_seen = alloca i32, align 4
  %before_giv_insn = alloca i32, align 4
  %p = alloca %struct.rtx_def*, align 8
  %last_giv_use = alloca %struct.rtx_def*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  store %struct.induction* %v, %struct.induction** %v.addr, align 8
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %aux = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 22
  %1 = load i8*, i8** %aux, align 8
  %2 = bitcast i8* %1 to %struct.loop_info*
  %ivs1 = getelementptr inbounds %struct.loop_info, %struct.loop_info* %2, i32 0, i32 29
  store %struct.loop_ivs* %ivs1, %struct.loop_ivs** %ivs, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %final_value, align 8
  %3 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %src_reg = getelementptr inbounds %struct.induction, %struct.induction* %3, i32 0, i32 2
  %4 = load %struct.rtx_def*, %struct.rtx_def** %src_reg, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx to i32*
  %5 = load i32, i32* %rtuint, align 4
  %idxprom = zext i32 %5 to i64
  %6 = load %struct.loop_ivs*, %struct.loop_ivs** %ivs, align 8
  %regs = getelementptr inbounds %struct.loop_ivs, %struct.loop_ivs* %6, i32 0, i32 0
  %7 = load %struct.iv*, %struct.iv** %regs, align 8
  %arrayidx2 = getelementptr inbounds %struct.iv, %struct.iv* %7, i64 %idxprom
  %iv = getelementptr inbounds %struct.iv, %struct.iv* %arrayidx2, i32 0, i32 1
  %class = bitcast %union.anon.0* %iv to %struct.iv_class**
  %8 = load %struct.iv_class*, %struct.iv_class** %class, align 8
  store %struct.iv_class* %8, %struct.iv_class** %bl, align 8
  %9 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %10 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %call = call %struct.rtx_def* @final_giv_value(%struct.loop* %9, %struct.induction* %10)
  store %struct.rtx_def* %call, %struct.rtx_def** %final_value, align 8
  %tobool = icmp ne %struct.rtx_def* %call, null
  br i1 %tobool, label %land.lhs.true, label %if.end.149

land.lhs.true:                                    ; preds = %entry
  %11 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %always_executed = getelementptr inbounds %struct.induction, %struct.induction* %11, i32 0, i32 13
  %bf.load = load i16, i16* %always_executed, align 4
  %bf.lshr = lshr i16 %bf.load, 4
  %bf.clear = and i16 %bf.lshr, 1
  %bf.cast = zext i16 %bf.clear to i32
  %tobool3 = icmp ne i32 %bf.cast, 0
  br i1 %tobool3, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %12 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %dest_reg = getelementptr inbounds %struct.induction, %struct.induction* %12, i32 0, i32 4
  %13 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg, align 8
  %14 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %insn = getelementptr inbounds %struct.induction, %struct.induction* %14, i32 0, i32 0
  %15 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %call4 = call i32 @last_use_this_basic_block(%struct.rtx_def* %13, %struct.rtx_def* %15)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.then, label %if.end.149

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  store i32 0, i32* %biv_increment_seen, align 4
  store i32 0, i32* %before_giv_insn, align 4
  %16 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %insn6 = getelementptr inbounds %struct.induction, %struct.induction* %16, i32 0, i32 0
  %17 = load %struct.rtx_def*, %struct.rtx_def** %insn6, align 8
  store %struct.rtx_def* %17, %struct.rtx_def** %p, align 8
  %18 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %replaceable = getelementptr inbounds %struct.induction, %struct.induction* %18, i32 0, i32 13
  %bf.load7 = load i16, i16* %replaceable, align 4
  %bf.clear8 = and i16 %bf.load7, -2
  %bf.set = or i16 %bf.clear8, 1
  store i16 %bf.set, i16* %replaceable, align 4
  %19 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %insn9 = getelementptr inbounds %struct.induction, %struct.induction* %19, i32 0, i32 0
  %20 = load %struct.rtx_def*, %struct.rtx_def** %insn9, align 8
  store %struct.rtx_def* %20, %struct.rtx_def** %last_giv_use, align 8
  br label %while.body

while.body:                                       ; preds = %if.then, %if.end.61
  %21 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld10 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1
  %arrayidx11 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld10, i32 0, i64 2
  %rtx = bitcast %union.rtunion_def* %arrayidx11 to %struct.rtx_def**
  %22 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %22, %struct.rtx_def** %p, align 8
  %23 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %24 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %end = getelementptr inbounds %struct.loop, %struct.loop* %24, i32 0, i32 27
  %25 = load %struct.rtx_def*, %struct.rtx_def** %end, align 8
  %cmp = icmp eq %struct.rtx_def* %23, %25
  br i1 %cmp, label %if.then.12, label %if.end

if.then.12:                                       ; preds = %while.body
  store i32 1, i32* %before_giv_insn, align 4
  %26 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %start = getelementptr inbounds %struct.loop, %struct.loop* %26, i32 0, i32 26
  %27 = load %struct.rtx_def*, %struct.rtx_def** %start, align 8
  %fld13 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1
  %arrayidx14 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld13, i32 0, i64 2
  %rtx15 = bitcast %union.rtunion_def* %arrayidx14 to %struct.rtx_def**
  %28 = load %struct.rtx_def*, %struct.rtx_def** %rtx15, align 8
  store %struct.rtx_def* %28, %struct.rtx_def** %p, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.12, %while.body
  %29 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %30 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %insn16 = getelementptr inbounds %struct.induction, %struct.induction* %30, i32 0, i32 0
  %31 = load %struct.rtx_def*, %struct.rtx_def** %insn16, align 8
  %cmp17 = icmp eq %struct.rtx_def* %29, %31
  br i1 %cmp17, label %if.then.18, label %if.end.19

if.then.18:                                       ; preds = %if.end
  br label %while.end

if.end.19:                                        ; preds = %if.end
  %32 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %33 = bitcast %struct.rtx_def* %32 to i32*
  %bf.load20 = load i32, i32* %33, align 8
  %bf.clear21 = and i32 %bf.load20, 65535
  %cmp22 = icmp eq i32 %bf.clear21, 32
  br i1 %cmp22, label %if.then.31, label %lor.lhs.false.23

lor.lhs.false.23:                                 ; preds = %if.end.19
  %34 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %35 = bitcast %struct.rtx_def* %34 to i32*
  %bf.load24 = load i32, i32* %35, align 8
  %bf.clear25 = and i32 %bf.load24, 65535
  %cmp26 = icmp eq i32 %bf.clear25, 33
  br i1 %cmp26, label %if.then.31, label %lor.lhs.false.27

lor.lhs.false.27:                                 ; preds = %lor.lhs.false.23
  %36 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %37 = bitcast %struct.rtx_def* %36 to i32*
  %bf.load28 = load i32, i32* %37, align 8
  %bf.clear29 = and i32 %bf.load28, 65535
  %cmp30 = icmp eq i32 %bf.clear29, 34
  br i1 %cmp30, label %if.then.31, label %if.end.61

if.then.31:                                       ; preds = %lor.lhs.false.27, %lor.lhs.false.23, %if.end.19
  %38 = load i32, i32* %biv_increment_seen, align 4
  %tobool32 = icmp ne i32 %38, 0
  br i1 %tobool32, label %if.end.41, label %land.lhs.true.33

land.lhs.true.33:                                 ; preds = %if.then.31
  %39 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %src_reg34 = getelementptr inbounds %struct.induction, %struct.induction* %39, i32 0, i32 2
  %40 = load %struct.rtx_def*, %struct.rtx_def** %src_reg34, align 8
  %41 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld35 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %41, i32 0, i32 1
  %arrayidx36 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld35, i32 0, i64 3
  %rtx37 = bitcast %union.rtunion_def* %arrayidx36 to %struct.rtx_def**
  %42 = load %struct.rtx_def*, %struct.rtx_def** %rtx37, align 8
  %call38 = call i32 @reg_set_p(%struct.rtx_def* %40, %struct.rtx_def* %42)
  %tobool39 = icmp ne i32 %call38, 0
  br i1 %tobool39, label %if.then.40, label %if.end.41

if.then.40:                                       ; preds = %land.lhs.true.33
  store i32 1, i32* %biv_increment_seen, align 4
  br label %if.end.41

if.end.41:                                        ; preds = %if.then.40, %land.lhs.true.33, %if.then.31
  %43 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %dest_reg42 = getelementptr inbounds %struct.induction, %struct.induction* %43, i32 0, i32 4
  %44 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg42, align 8
  %45 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld43 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %45, i32 0, i32 1
  %arrayidx44 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld43, i32 0, i64 3
  %rtx45 = bitcast %union.rtunion_def* %arrayidx44 to %struct.rtx_def**
  %46 = load %struct.rtx_def*, %struct.rtx_def** %rtx45, align 8
  %call46 = call i32 @reg_mentioned_p(%struct.rtx_def* %44, %struct.rtx_def* %46)
  %tobool47 = icmp ne i32 %call46, 0
  br i1 %tobool47, label %if.then.48, label %if.end.60

if.then.48:                                       ; preds = %if.end.41
  %47 = load i32, i32* %biv_increment_seen, align 4
  %tobool49 = icmp ne i32 %47, 0
  br i1 %tobool49, label %if.then.52, label %lor.lhs.false.50

lor.lhs.false.50:                                 ; preds = %if.then.48
  %48 = load i32, i32* %before_giv_insn, align 4
  %tobool51 = icmp ne i32 %48, 0
  br i1 %tobool51, label %if.then.52, label %if.end.59

if.then.52:                                       ; preds = %lor.lhs.false.50, %if.then.48
  %49 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %replaceable53 = getelementptr inbounds %struct.induction, %struct.induction* %49, i32 0, i32 13
  %bf.load54 = load i16, i16* %replaceable53, align 4
  %bf.clear55 = and i16 %bf.load54, -2
  store i16 %bf.clear55, i16* %replaceable53, align 4
  %50 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %not_replaceable = getelementptr inbounds %struct.induction, %struct.induction* %50, i32 0, i32 13
  %bf.load56 = load i16, i16* %not_replaceable, align 4
  %bf.clear57 = and i16 %bf.load56, -3
  %bf.set58 = or i16 %bf.clear57, 2
  store i16 %bf.set58, i16* %not_replaceable, align 4
  br label %while.end

if.end.59:                                        ; preds = %lor.lhs.false.50
  %51 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  store %struct.rtx_def* %51, %struct.rtx_def** %last_giv_use, align 8
  br label %if.end.60

if.end.60:                                        ; preds = %if.end.59, %if.end.41
  br label %if.end.61

if.end.61:                                        ; preds = %if.end.60, %lor.lhs.false.27
  br label %while.body

while.end:                                        ; preds = %if.then.52, %if.then.18
  %52 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %replaceable62 = getelementptr inbounds %struct.induction, %struct.induction* %52, i32 0, i32 13
  %bf.load63 = load i16, i16* %replaceable62, align 4
  %bf.clear64 = and i16 %bf.load63, 1
  %bf.cast65 = zext i16 %bf.clear64 to i32
  %tobool66 = icmp ne i32 %bf.cast65, 0
  br i1 %tobool66, label %if.then.67, label %if.end.140

if.then.67:                                       ; preds = %while.end
  %53 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %insn68 = getelementptr inbounds %struct.induction, %struct.induction* %53, i32 0, i32 0
  %54 = load %struct.rtx_def*, %struct.rtx_def** %insn68, align 8
  store %struct.rtx_def* %54, %struct.rtx_def** %p, align 8
  br label %while.body.69

while.body.69:                                    ; preds = %if.then.67, %if.end.138
  %55 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld70 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %55, i32 0, i32 1
  %arrayidx71 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld70, i32 0, i64 2
  %rtx72 = bitcast %union.rtunion_def* %arrayidx71 to %struct.rtx_def**
  %56 = load %struct.rtx_def*, %struct.rtx_def** %rtx72, align 8
  store %struct.rtx_def* %56, %struct.rtx_def** %p, align 8
  %57 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %58 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %end73 = getelementptr inbounds %struct.loop, %struct.loop* %58, i32 0, i32 27
  %59 = load %struct.rtx_def*, %struct.rtx_def** %end73, align 8
  %cmp74 = icmp eq %struct.rtx_def* %57, %59
  br i1 %cmp74, label %if.then.75, label %if.end.80

if.then.75:                                       ; preds = %while.body.69
  %60 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %start76 = getelementptr inbounds %struct.loop, %struct.loop* %60, i32 0, i32 26
  %61 = load %struct.rtx_def*, %struct.rtx_def** %start76, align 8
  %fld77 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %61, i32 0, i32 1
  %arrayidx78 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld77, i32 0, i64 2
  %rtx79 = bitcast %union.rtunion_def* %arrayidx78 to %struct.rtx_def**
  %62 = load %struct.rtx_def*, %struct.rtx_def** %rtx79, align 8
  store %struct.rtx_def* %62, %struct.rtx_def** %p, align 8
  br label %if.end.80

if.end.80:                                        ; preds = %if.then.75, %while.body.69
  %63 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %64 = load %struct.rtx_def*, %struct.rtx_def** %last_giv_use, align 8
  %cmp81 = icmp eq %struct.rtx_def* %63, %64
  br i1 %cmp81, label %if.then.82, label %if.end.83

if.then.82:                                       ; preds = %if.end.80
  br label %while.end.139

if.end.83:                                        ; preds = %if.end.80
  %65 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %66 = bitcast %struct.rtx_def* %65 to i32*
  %bf.load84 = load i32, i32* %66, align 8
  %bf.clear85 = and i32 %bf.load84, 65535
  %cmp86 = icmp eq i32 %bf.clear85, 33
  br i1 %cmp86, label %land.lhs.true.87, label %if.end.138

land.lhs.true.87:                                 ; preds = %if.end.83
  %67 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld88 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %67, i32 0, i32 1
  %arrayidx89 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld88, i32 0, i64 7
  %rtx90 = bitcast %union.rtunion_def* %arrayidx89 to %struct.rtx_def**
  %68 = load %struct.rtx_def*, %struct.rtx_def** %rtx90, align 8
  %tobool91 = icmp ne %struct.rtx_def* %68, null
  br i1 %tobool91, label %land.lhs.true.92, label %if.end.138

land.lhs.true.92:                                 ; preds = %land.lhs.true.87
  %69 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld93 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %69, i32 0, i32 1
  %arrayidx94 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld93, i32 0, i64 7
  %rtx95 = bitcast %union.rtunion_def* %arrayidx94 to %struct.rtx_def**
  %70 = load %struct.rtx_def*, %struct.rtx_def** %rtx95, align 8
  %fld96 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %70, i32 0, i32 1
  %arrayidx97 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld96, i32 0, i64 6
  %rtstr = bitcast %union.rtunion_def* %arrayidx97 to i8**
  %71 = load i8*, i8** %rtstr, align 8
  %tobool98 = icmp ne i8* %71, null
  br i1 %tobool98, label %land.lhs.true.99, label %if.end.138

land.lhs.true.99:                                 ; preds = %land.lhs.true.92
  %72 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld100 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %72, i32 0, i32 1
  %arrayidx101 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld100, i32 0, i64 7
  %rtx102 = bitcast %union.rtunion_def* %arrayidx101 to %struct.rtx_def**
  %73 = load %struct.rtx_def*, %struct.rtx_def** %rtx102, align 8
  %74 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %insn103 = getelementptr inbounds %struct.induction, %struct.induction* %74, i32 0, i32 0
  %75 = load %struct.rtx_def*, %struct.rtx_def** %insn103, align 8
  %call104 = call i32 @loop_insn_first_p(%struct.rtx_def* %73, %struct.rtx_def* %75)
  %tobool105 = icmp ne i32 %call104, 0
  br i1 %tobool105, label %land.lhs.true.106, label %lor.lhs.false.113

land.lhs.true.106:                                ; preds = %land.lhs.true.99
  %76 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %start107 = getelementptr inbounds %struct.loop, %struct.loop* %76, i32 0, i32 26
  %77 = load %struct.rtx_def*, %struct.rtx_def** %start107, align 8
  %78 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld108 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %78, i32 0, i32 1
  %arrayidx109 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld108, i32 0, i64 7
  %rtx110 = bitcast %union.rtunion_def* %arrayidx109 to %struct.rtx_def**
  %79 = load %struct.rtx_def*, %struct.rtx_def** %rtx110, align 8
  %call111 = call i32 @loop_insn_first_p(%struct.rtx_def* %77, %struct.rtx_def* %79)
  %tobool112 = icmp ne i32 %call111, 0
  br i1 %tobool112, label %if.then.126, label %lor.lhs.false.113

lor.lhs.false.113:                                ; preds = %land.lhs.true.106, %land.lhs.true.99
  %80 = load %struct.rtx_def*, %struct.rtx_def** %last_giv_use, align 8
  %81 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld114 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %81, i32 0, i32 1
  %arrayidx115 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld114, i32 0, i64 7
  %rtx116 = bitcast %union.rtunion_def* %arrayidx115 to %struct.rtx_def**
  %82 = load %struct.rtx_def*, %struct.rtx_def** %rtx116, align 8
  %call117 = call i32 @loop_insn_first_p(%struct.rtx_def* %80, %struct.rtx_def* %82)
  %tobool118 = icmp ne i32 %call117, 0
  br i1 %tobool118, label %land.lhs.true.119, label %if.end.138

land.lhs.true.119:                                ; preds = %lor.lhs.false.113
  %83 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld120 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %83, i32 0, i32 1
  %arrayidx121 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld120, i32 0, i64 7
  %rtx122 = bitcast %union.rtunion_def* %arrayidx121 to %struct.rtx_def**
  %84 = load %struct.rtx_def*, %struct.rtx_def** %rtx122, align 8
  %85 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %end123 = getelementptr inbounds %struct.loop, %struct.loop* %85, i32 0, i32 27
  %86 = load %struct.rtx_def*, %struct.rtx_def** %end123, align 8
  %call124 = call i32 @loop_insn_first_p(%struct.rtx_def* %84, %struct.rtx_def* %86)
  %tobool125 = icmp ne i32 %call124, 0
  br i1 %tobool125, label %if.then.126, label %if.end.138

if.then.126:                                      ; preds = %land.lhs.true.119, %land.lhs.true.106
  %87 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %replaceable127 = getelementptr inbounds %struct.induction, %struct.induction* %87, i32 0, i32 13
  %bf.load128 = load i16, i16* %replaceable127, align 4
  %bf.clear129 = and i16 %bf.load128, -2
  store i16 %bf.clear129, i16* %replaceable127, align 4
  %88 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %not_replaceable130 = getelementptr inbounds %struct.induction, %struct.induction* %88, i32 0, i32 13
  %bf.load131 = load i16, i16* %not_replaceable130, align 4
  %bf.clear132 = and i16 %bf.load131, -3
  %bf.set133 = or i16 %bf.clear132, 2
  store i16 %bf.set133, i16* %not_replaceable130, align 4
  %89 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %tobool134 = icmp ne %struct._IO_FILE* %89, null
  br i1 %tobool134, label %if.then.135, label %if.end.137

if.then.135:                                      ; preds = %if.then.126
  %90 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %call136 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %90, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.52, i32 0, i32 0))
  br label %if.end.137

if.end.137:                                       ; preds = %if.then.135, %if.then.126
  br label %while.end.139

if.end.138:                                       ; preds = %land.lhs.true.119, %lor.lhs.false.113, %land.lhs.true.92, %land.lhs.true.87, %if.end.83
  br label %while.body.69

while.end.139:                                    ; preds = %if.end.137, %if.then.82
  br label %if.end.140

if.end.140:                                       ; preds = %while.end.139, %while.end
  %91 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %replaceable141 = getelementptr inbounds %struct.induction, %struct.induction* %91, i32 0, i32 13
  %bf.load142 = load i16, i16* %replaceable141, align 4
  %bf.clear143 = and i16 %bf.load142, 1
  %bf.cast144 = zext i16 %bf.clear143 to i32
  %tobool145 = icmp ne i32 %bf.cast144, 0
  br i1 %tobool145, label %if.then.146, label %if.end.148

if.then.146:                                      ; preds = %if.end.140
  %92 = load %struct.rtx_def*, %struct.rtx_def** %final_value, align 8
  %93 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %final_value147 = getelementptr inbounds %struct.induction, %struct.induction* %93, i32 0, i32 11
  store %struct.rtx_def* %92, %struct.rtx_def** %final_value147, align 8
  br label %if.end.148

if.end.148:                                       ; preds = %if.then.146, %if.end.140
  br label %if.end.149

if.end.149:                                       ; preds = %if.end.148, %lor.lhs.false, %entry
  %94 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %tobool150 = icmp ne %struct._IO_FILE* %94, null
  br i1 %tobool150, label %land.lhs.true.151, label %if.end.166

land.lhs.true.151:                                ; preds = %if.end.149
  %95 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %replaceable152 = getelementptr inbounds %struct.induction, %struct.induction* %95, i32 0, i32 13
  %bf.load153 = load i16, i16* %replaceable152, align 4
  %bf.clear154 = and i16 %bf.load153, 1
  %bf.cast155 = zext i16 %bf.clear154 to i32
  %tobool156 = icmp ne i32 %bf.cast155, 0
  br i1 %tobool156, label %if.then.157, label %if.end.166

if.then.157:                                      ; preds = %land.lhs.true.151
  %96 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %97 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %insn158 = getelementptr inbounds %struct.induction, %struct.induction* %97, i32 0, i32 0
  %98 = load %struct.rtx_def*, %struct.rtx_def** %insn158, align 8
  %fld159 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %98, i32 0, i32 1
  %arrayidx160 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld159, i32 0, i64 0
  %rtint = bitcast %union.rtunion_def* %arrayidx160 to i32*
  %99 = load i32, i32* %rtint, align 4
  %100 = load %struct.induction*, %struct.induction** %v.addr, align 8
  %dest_reg161 = getelementptr inbounds %struct.induction, %struct.induction* %100, i32 0, i32 4
  %101 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg161, align 8
  %fld162 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %101, i32 0, i32 1
  %arrayidx163 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld162, i32 0, i64 0
  %rtuint164 = bitcast %union.rtunion_def* %arrayidx163 to i32*
  %102 = load i32, i32* %rtuint164, align 4
  %call165 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %96, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.53, i32 0, i32 0), i32 %99, i32 %102)
  br label %if.end.166

if.end.166:                                       ; preds = %if.then.157, %land.lhs.true.151, %if.end.149
  ret void
}

declare %struct.rtx_def* @final_giv_value(%struct.loop*, %struct.induction*) #1

declare i32 @onlyjump_p(%struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define internal void @note_set_pseudo_multiple_uses(%struct.rtx_def* %x, %struct.rtx_def* %y, i8* %data) #0 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  %y.addr = alloca %struct.rtx_def*, align 8
  %data.addr = alloca i8*, align 8
  %regs = alloca %struct.loop_regs*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  store %struct.rtx_def* %y, %struct.rtx_def** %y.addr, align 8
  store i8* %data, i8** %data.addr, align 8
  %0 = load i8*, i8** %data.addr, align 8
  %1 = bitcast i8* %0 to %struct.loop_regs*
  store %struct.loop_regs* %1, %struct.loop_regs** %regs, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %cmp = icmp eq %struct.rtx_def* %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %if.end.40

if.end:                                           ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %3 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %4 = bitcast %struct.rtx_def* %3 to i32*
  %bf.load = load i32, i32* %4, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp1 = icmp eq i32 %bf.clear, 64
  br i1 %cmp1, label %lor.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.cond
  %5 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %6 = bitcast %struct.rtx_def* %5 to i32*
  %bf.load2 = load i32, i32* %6, align 8
  %bf.clear3 = and i32 %bf.load2, 65535
  %cmp4 = icmp eq i32 %bf.clear3, 132
  br i1 %cmp4, label %lor.end, label %lor.lhs.false.5

lor.lhs.false.5:                                  ; preds = %lor.lhs.false
  %7 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %8 = bitcast %struct.rtx_def* %7 to i32*
  %bf.load6 = load i32, i32* %8, align 8
  %bf.clear7 = and i32 %bf.load6, 65535
  %cmp8 = icmp eq i32 %bf.clear7, 133
  br i1 %cmp8, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false.5
  %9 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %10 = bitcast %struct.rtx_def* %9 to i32*
  %bf.load9 = load i32, i32* %10, align 8
  %bf.clear10 = and i32 %bf.load9, 65535
  %cmp11 = icmp eq i32 %bf.clear10, 63
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false.5, %lor.lhs.false, %while.cond
  %11 = phi i1 [ true, %lor.lhs.false.5 ], [ true, %lor.lhs.false ], [ true, %while.cond ], [ %cmp11, %lor.rhs ]
  br i1 %11, label %while.body, label %while.end

while.body:                                       ; preds = %lor.end
  %12 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %13, %struct.rtx_def** %x.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %lor.end
  %14 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %15 = bitcast %struct.rtx_def* %14 to i32*
  %bf.load12 = load i32, i32* %15, align 8
  %bf.clear13 = and i32 %bf.load12, 65535
  %cmp14 = icmp ne i32 %bf.clear13, 61
  br i1 %cmp14, label %if.then.19, label %lor.lhs.false.15

lor.lhs.false.15:                                 ; preds = %while.end
  %16 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld16 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1
  %arrayidx17 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld16, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx17 to i32*
  %17 = load i32, i32* %rtuint, align 4
  %cmp18 = icmp ult i32 %17, 53
  br i1 %cmp18, label %if.then.19, label %if.end.20

if.then.19:                                       ; preds = %lor.lhs.false.15, %while.end
  br label %if.end.40

if.end.20:                                        ; preds = %lor.lhs.false.15
  %18 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld21 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1
  %arrayidx22 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld21, i32 0, i64 0
  %rtuint23 = bitcast %union.rtunion_def* %arrayidx22 to i32*
  %19 = load i32, i32* %rtuint23, align 4
  %20 = load i32, i32* @max_reg_before_loop, align 4
  %cmp24 = icmp uge i32 %19, %20
  br i1 %cmp24, label %if.then.39, label %lor.lhs.false.25

lor.lhs.false.25:                                 ; preds = %if.end.20
  %21 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld26 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1
  %arrayidx27 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld26, i32 0, i64 0
  %rtuint28 = bitcast %union.rtunion_def* %arrayidx27 to i32*
  %22 = load i32, i32* %rtuint28, align 4
  %idxprom = zext i32 %22 to i64
  %23 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %array = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %23, i32 0, i32 2
  %24 = load %struct.loop_reg*, %struct.loop_reg** %array, align 8
  %arrayidx29 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %24, i64 %idxprom
  %single_usage = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %arrayidx29, i32 0, i32 2
  %25 = load %struct.rtx_def*, %struct.rtx_def** %single_usage, align 8
  %tobool = icmp ne %struct.rtx_def* %25, null
  br i1 %tobool, label %lor.lhs.false.30, label %if.then.39

lor.lhs.false.30:                                 ; preds = %lor.lhs.false.25
  %26 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld31 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %26, i32 0, i32 1
  %arrayidx32 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld31, i32 0, i64 0
  %rtuint33 = bitcast %union.rtunion_def* %arrayidx32 to i32*
  %27 = load i32, i32* %rtuint33, align 4
  %idxprom34 = zext i32 %27 to i64
  %28 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %array35 = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %28, i32 0, i32 2
  %29 = load %struct.loop_reg*, %struct.loop_reg** %array35, align 8
  %arrayidx36 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %29, i64 %idxprom34
  %single_usage37 = getelementptr inbounds %struct.loop_reg, %struct.loop_reg* %arrayidx36, i32 0, i32 2
  %30 = load %struct.rtx_def*, %struct.rtx_def** %single_usage37, align 8
  %31 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %cmp38 = icmp eq %struct.rtx_def* %30, %31
  br i1 %cmp38, label %if.then.39, label %if.end.40

if.then.39:                                       ; preds = %lor.lhs.false.30, %lor.lhs.false.25, %if.end.20
  %32 = load %struct.loop_regs*, %struct.loop_regs** %regs, align 8
  %multiple_uses = getelementptr inbounds %struct.loop_regs, %struct.loop_regs* %32, i32 0, i32 3
  store i32 1, i32* %multiple_uses, align 4
  br label %if.end.40

if.end.40:                                        ; preds = %if.then, %if.then.19, %if.then.39, %lor.lhs.false.30
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @count_nonfixed_reads(%struct.loop* %loop, %struct.rtx_def* %x) #0 {
entry:
  %retval = alloca i32, align 4
  %loop.addr = alloca %struct.loop*, align 8
  %x.addr = alloca %struct.rtx_def*, align 8
  %code = alloca i32, align 4
  %i = alloca i32, align 4
  %fmt = alloca i8*, align 8
  %value = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %cmp = icmp eq %struct.rtx_def* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load = load i32, i32* %2, align 8
  %bf.clear = and i32 %bf.load, 65535
  store i32 %bf.clear, i32* %code, align 4
  %3 = load i32, i32* %code, align 4
  switch i32 %3, label %sw.default [
    i32 59, label %sw.bb
    i32 69, label %sw.bb
    i32 54, label %sw.bb
    i32 55, label %sw.bb
    i32 58, label %sw.bb
    i32 68, label %sw.bb
    i32 67, label %sw.bb
    i32 61, label %sw.bb
    i32 66, label %sw.bb.1
  ]

sw.bb:                                            ; preds = %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end
  store i32 0, i32* %retval
  br label %return

sw.bb.1:                                          ; preds = %if.end
  %4 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %call = call i32 @loop_invariant_p(%struct.loop* %4, %struct.rtx_def* %6)
  %cmp2 = icmp ne i32 %call, 1
  %conv = zext i1 %cmp2 to i32
  %7 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld3 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1
  %arrayidx4 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3, i32 0, i64 0
  %rtx5 = bitcast %union.rtunion_def* %arrayidx4 to %struct.rtx_def**
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rtx5, align 8
  %call6 = call i32 @count_nonfixed_reads(%struct.loop* %7, %struct.rtx_def* %9)
  %add = add nsw i32 %conv, %call6
  store i32 %add, i32* %retval
  br label %return

sw.default:                                       ; preds = %if.end
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default
  store i32 0, i32* %value, align 4
  %10 = load i32, i32* %code, align 4
  %idxprom = sext i32 %10 to i64
  %arrayidx7 = getelementptr inbounds [153 x i8*], [153 x i8*]* @rtx_format, i32 0, i64 %idxprom
  %11 = load i8*, i8** %arrayidx7, align 8
  store i8* %11, i8** %fmt, align 8
  %12 = load i32, i32* %code, align 4
  %idxprom8 = sext i32 %12 to i64
  %arrayidx9 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_length, i32 0, i64 %idxprom8
  %13 = load i8, i8* %arrayidx9, align 1
  %conv10 = zext i8 %13 to i32
  %sub = sub nsw i32 %conv10, 1
  store i32 %sub, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.48, %sw.epilog
  %14 = load i32, i32* %i, align 4
  %cmp11 = icmp sge i32 %14, 0
  br i1 %cmp11, label %for.body, label %for.end.49

for.body:                                         ; preds = %for.cond
  %15 = load i32, i32* %i, align 4
  %idxprom13 = sext i32 %15 to i64
  %16 = load i8*, i8** %fmt, align 8
  %arrayidx14 = getelementptr inbounds i8, i8* %16, i64 %idxprom13
  %17 = load i8, i8* %arrayidx14, align 1
  %conv15 = sext i8 %17 to i32
  %cmp16 = icmp eq i32 %conv15, 101
  br i1 %cmp16, label %if.then.18, label %if.end.25

if.then.18:                                       ; preds = %for.body
  %18 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %19 = load i32, i32* %i, align 4
  %idxprom19 = sext i32 %19 to i64
  %20 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld20 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1
  %arrayidx21 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld20, i32 0, i64 %idxprom19
  %rtx22 = bitcast %union.rtunion_def* %arrayidx21 to %struct.rtx_def**
  %21 = load %struct.rtx_def*, %struct.rtx_def** %rtx22, align 8
  %call23 = call i32 @count_nonfixed_reads(%struct.loop* %18, %struct.rtx_def* %21)
  %22 = load i32, i32* %value, align 4
  %add24 = add nsw i32 %22, %call23
  store i32 %add24, i32* %value, align 4
  br label %if.end.25

if.end.25:                                        ; preds = %if.then.18, %for.body
  %23 = load i32, i32* %i, align 4
  %idxprom26 = sext i32 %23 to i64
  %24 = load i8*, i8** %fmt, align 8
  %arrayidx27 = getelementptr inbounds i8, i8* %24, i64 %idxprom26
  %25 = load i8, i8* %arrayidx27, align 1
  %conv28 = sext i8 %25 to i32
  %cmp29 = icmp eq i32 %conv28, 69
  br i1 %cmp29, label %if.then.31, label %if.end.47

if.then.31:                                       ; preds = %if.end.25
  store i32 0, i32* %j, align 4
  br label %for.cond.32

for.cond.32:                                      ; preds = %for.inc, %if.then.31
  %26 = load i32, i32* %j, align 4
  %27 = load i32, i32* %i, align 4
  %idxprom33 = sext i32 %27 to i64
  %28 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld34 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1
  %arrayidx35 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld34, i32 0, i64 %idxprom33
  %rtvec = bitcast %union.rtunion_def* %arrayidx35 to %struct.rtvec_def**
  %29 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec, align 8
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %29, i32 0, i32 0
  %30 = load i32, i32* %num_elem, align 4
  %cmp36 = icmp slt i32 %26, %30
  br i1 %cmp36, label %for.body.38, label %for.end

for.body.38:                                      ; preds = %for.cond.32
  %31 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %32 = load i32, i32* %j, align 4
  %idxprom39 = sext i32 %32 to i64
  %33 = load i32, i32* %i, align 4
  %idxprom40 = sext i32 %33 to i64
  %34 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld41 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %34, i32 0, i32 1
  %arrayidx42 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld41, i32 0, i64 %idxprom40
  %rtvec43 = bitcast %union.rtunion_def* %arrayidx42 to %struct.rtvec_def**
  %35 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec43, align 8
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %35, i32 0, i32 1
  %arrayidx44 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i32 0, i64 %idxprom39
  %36 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx44, align 8
  %call45 = call i32 @count_nonfixed_reads(%struct.loop* %31, %struct.rtx_def* %36)
  %37 = load i32, i32* %value, align 4
  %add46 = add nsw i32 %37, %call45
  store i32 %add46, i32* %value, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body.38
  %38 = load i32, i32* %j, align 4
  %inc = add nsw i32 %38, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond.32

for.end:                                          ; preds = %for.cond.32
  br label %if.end.47

if.end.47:                                        ; preds = %for.end, %if.end.25
  br label %for.inc.48

for.inc.48:                                       ; preds = %if.end.47
  %39 = load i32, i32* %i, align 4
  %dec = add nsw i32 %39, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond

for.end.49:                                       ; preds = %for.cond
  %40 = load i32, i32* %value, align 4
  store i32 %40, i32* %retval
  br label %return

return:                                           ; preds = %for.end.49, %sw.bb.1, %sw.bb, %if.then
  %41 = load i32, i32* %retval
  ret i32 %41
}

; Function Attrs: nounwind uwtable
define internal i32 @num_unmoved_movables(%struct.loop* %loop) #0 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %num = alloca i32, align 4
  %m = alloca %struct.movable*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  store i32 0, i32* %num, align 4
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %aux = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 22
  %1 = load i8*, i8** %aux, align 8
  %2 = bitcast i8* %1 to %struct.loop_info*
  %movables = getelementptr inbounds %struct.loop_info, %struct.loop_info* %2, i32 0, i32 27
  %head = getelementptr inbounds %struct.loop_movables, %struct.loop_movables* %movables, i32 0, i32 0
  %3 = load %struct.movable*, %struct.movable** %head, align 8
  store %struct.movable* %3, %struct.movable** %m, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load %struct.movable*, %struct.movable** %m, align 8
  %tobool = icmp ne %struct.movable* %4, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct.movable*, %struct.movable** %m, align 8
  %done = getelementptr inbounds %struct.movable, %struct.movable* %5, i32 0, i32 8
  %bf.load = load i8, i8* %done, align 4
  %bf.lshr = lshr i8 %bf.load, 3
  %bf.clear = and i8 %bf.lshr, 1
  %bf.cast = zext i8 %bf.clear to i32
  %tobool1 = icmp ne i32 %bf.cast, 0
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %for.body
  %6 = load i32, i32* %num, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %num, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %7 = load %struct.movable*, %struct.movable** %m, align 8
  %next = getelementptr inbounds %struct.movable, %struct.movable* %7, i32 0, i32 12
  %8 = load %struct.movable*, %struct.movable** %next, align 8
  store %struct.movable* %8, %struct.movable** %m, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %9 = load i32, i32* %num, align 4
  ret i32 %9
}

declare %struct.rtx_def* @condjump_label(%struct.rtx_def*) #1

declare %struct.rtx_def* @gen_add3_insn(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #1

declare %struct.rtx_def* @gen_sub3_insn(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #1

declare void @expand_inc(%struct.rtx_def*, %struct.rtx_def*) #1

declare void @emit_cmp_and_jump_insns(%struct.rtx_def*, %struct.rtx_def*, i32, %struct.rtx_def*, i32, i32, %struct.rtx_def*) #1

declare %struct.rtx_def* @emit_jump_insn_before(%struct.rtx_def*, %struct.rtx_def*) #1

declare %struct.rtx_def* @final_biv_value(%struct.loop*, %struct.iv_class*) #1

declare %struct.rtx_def* @biv_total_increment(%struct.iv_class*) #1

; Function Attrs: nounwind uwtable
define internal %struct.rtx_def* @combine_givs_p(%struct.induction* %g1, %struct.induction* %g2) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %g1.addr = alloca %struct.induction*, align 8
  %g2.addr = alloca %struct.induction*, align 8
  %comb = alloca %struct.rtx_def*, align 8
  %ret = alloca %struct.rtx_def*, align 8
  store %struct.induction* %g1, %struct.induction** %g1.addr, align 8
  store %struct.induction* %g2, %struct.induction** %g2.addr, align 8
  %0 = load %struct.induction*, %struct.induction** %g1.addr, align 8
  %mode = getelementptr inbounds %struct.induction, %struct.induction* %0, i32 0, i32 6
  %1 = load i32, i32* %mode, align 4
  %idxprom = sext i32 %1 to i64
  %arrayidx = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom
  %2 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %2 to i32
  %3 = load %struct.induction*, %struct.induction** %g2.addr, align 8
  %mode1 = getelementptr inbounds %struct.induction, %struct.induction* %3, i32 0, i32 6
  %4 = load i32, i32* %mode1, align 4
  %idxprom2 = sext i32 %4 to i64
  %arrayidx3 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom2
  %5 = load i8, i8* %arrayidx3, align 1
  %conv4 = zext i8 %5 to i32
  %cmp = icmp slt i32 %conv, %conv4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %entry
  %6 = load %struct.induction*, %struct.induction** %g1.addr, align 8
  %7 = load %struct.induction*, %struct.induction** %g2.addr, align 8
  %call = call %struct.rtx_def* @express_from(%struct.induction* %6, %struct.induction* %7)
  store %struct.rtx_def* %call, %struct.rtx_def** %comb, align 8
  store %struct.rtx_def* %call, %struct.rtx_def** %ret, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %comb, align 8
  %cmp6 = icmp eq %struct.rtx_def* %8, null
  br i1 %cmp6, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %if.end
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end.9:                                         ; preds = %if.end
  %9 = load %struct.induction*, %struct.induction** %g1.addr, align 8
  %mode10 = getelementptr inbounds %struct.induction, %struct.induction* %9, i32 0, i32 6
  %10 = load i32, i32* %mode10, align 4
  %11 = load %struct.induction*, %struct.induction** %g2.addr, align 8
  %mode11 = getelementptr inbounds %struct.induction, %struct.induction* %11, i32 0, i32 6
  %12 = load i32, i32* %mode11, align 4
  %cmp12 = icmp ne i32 %10, %12
  br i1 %cmp12, label %if.then.14, label %if.end.17

if.then.14:                                       ; preds = %if.end.9
  %13 = load %struct.induction*, %struct.induction** %g2.addr, align 8
  %mode15 = getelementptr inbounds %struct.induction, %struct.induction* %13, i32 0, i32 6
  %14 = load i32, i32* %mode15, align 4
  %15 = load %struct.rtx_def*, %struct.rtx_def** %comb, align 8
  %call16 = call %struct.rtx_def* @gen_lowpart(i32 %14, %struct.rtx_def* %15)
  store %struct.rtx_def* %call16, %struct.rtx_def** %ret, align 8
  br label %if.end.17

if.end.17:                                        ; preds = %if.then.14, %if.end.9
  %16 = load %struct.rtx_def*, %struct.rtx_def** %comb, align 8
  %17 = load %struct.induction*, %struct.induction** %g1.addr, align 8
  %dest_reg = getelementptr inbounds %struct.induction, %struct.induction* %17, i32 0, i32 4
  %18 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg, align 8
  %cmp18 = icmp eq %struct.rtx_def* %16, %18
  br i1 %cmp18, label %land.lhs.true, label %if.end.26

land.lhs.true:                                    ; preds = %if.end.17
  %19 = load %struct.induction*, %struct.induction** %g1.addr, align 8
  %giv_type = getelementptr inbounds %struct.induction, %struct.induction* %19, i32 0, i32 3
  %20 = load i32, i32* %giv_type, align 4
  %cmp20 = icmp eq i32 %20, 1
  br i1 %cmp20, label %if.then.25, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %21 = load %struct.induction*, %struct.induction** %g2.addr, align 8
  %giv_type22 = getelementptr inbounds %struct.induction, %struct.induction* %21, i32 0, i32 3
  %22 = load i32, i32* %giv_type22, align 4
  %cmp23 = icmp eq i32 %22, 0
  br i1 %cmp23, label %if.then.25, label %if.end.26

if.then.25:                                       ; preds = %lor.lhs.false, %land.lhs.true
  %23 = load %struct.rtx_def*, %struct.rtx_def** %ret, align 8
  store %struct.rtx_def* %23, %struct.rtx_def** %retval
  br label %return

if.end.26:                                        ; preds = %lor.lhs.false, %if.end.17
  %24 = load %struct.rtx_def*, %struct.rtx_def** %ret, align 8
  %cmp27 = icmp ne %struct.rtx_def* %24, null
  br i1 %cmp27, label %land.lhs.true.29, label %if.end.36

land.lhs.true.29:                                 ; preds = %if.end.26
  %25 = load %struct.induction*, %struct.induction** %g2.addr, align 8
  %giv_type30 = getelementptr inbounds %struct.induction, %struct.induction* %25, i32 0, i32 3
  %26 = load i32, i32* %giv_type30, align 4
  %cmp31 = icmp eq i32 %26, 0
  br i1 %cmp31, label %land.lhs.true.33, label %if.end.36

land.lhs.true.33:                                 ; preds = %land.lhs.true.29
  %27 = load %struct.induction*, %struct.induction** %g2.addr, align 8
  %mem = getelementptr inbounds %struct.induction, %struct.induction* %27, i32 0, i32 7
  %28 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8
  %29 = bitcast %struct.rtx_def* %28 to i32*
  %bf.load = load i32, i32* %29, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %30 = load %struct.rtx_def*, %struct.rtx_def** %ret, align 8
  %call34 = call i32 @memory_address_p(i32 %bf.clear, %struct.rtx_def* %30)
  %tobool = icmp ne i32 %call34, 0
  br i1 %tobool, label %if.then.35, label %if.end.36

if.then.35:                                       ; preds = %land.lhs.true.33
  %31 = load %struct.rtx_def*, %struct.rtx_def** %ret, align 8
  store %struct.rtx_def* %31, %struct.rtx_def** %retval
  br label %return

if.end.36:                                        ; preds = %land.lhs.true.33, %land.lhs.true.29, %if.end.26
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end.36, %if.then.35, %if.then.25, %if.then.8, %if.then
  %32 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %32
}

declare void @specqsort(i8*, i32, i32, i32 (...)*) #1

; Function Attrs: nounwind uwtable
define internal i32 @cmp_combine_givs_stats(i8* %xp, i8* %yp) #0 {
entry:
  %xp.addr = alloca i8*, align 8
  %yp.addr = alloca i8*, align 8
  %x = alloca %struct.combine_givs_stats*, align 8
  %y = alloca %struct.combine_givs_stats*, align 8
  %d = alloca i32, align 4
  store i8* %xp, i8** %xp.addr, align 8
  store i8* %yp, i8** %yp.addr, align 8
  %0 = load i8*, i8** %xp.addr, align 8
  %1 = bitcast i8* %0 to %struct.combine_givs_stats*
  store %struct.combine_givs_stats* %1, %struct.combine_givs_stats** %x, align 8
  %2 = load i8*, i8** %yp.addr, align 8
  %3 = bitcast i8* %2 to %struct.combine_givs_stats*
  store %struct.combine_givs_stats* %3, %struct.combine_givs_stats** %y, align 8
  %4 = load %struct.combine_givs_stats*, %struct.combine_givs_stats** %y, align 8
  %total_benefit = getelementptr inbounds %struct.combine_givs_stats, %struct.combine_givs_stats* %4, i32 0, i32 1
  %5 = load i32, i32* %total_benefit, align 4
  %6 = load %struct.combine_givs_stats*, %struct.combine_givs_stats** %x, align 8
  %total_benefit1 = getelementptr inbounds %struct.combine_givs_stats, %struct.combine_givs_stats* %6, i32 0, i32 1
  %7 = load i32, i32* %total_benefit1, align 4
  %sub = sub nsw i32 %5, %7
  store i32 %sub, i32* %d, align 4
  %8 = load i32, i32* %d, align 4
  %tobool = icmp ne i32 %8, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %9 = load %struct.combine_givs_stats*, %struct.combine_givs_stats** %x, align 8
  %giv_number = getelementptr inbounds %struct.combine_givs_stats, %struct.combine_givs_stats* %9, i32 0, i32 0
  %10 = load i32, i32* %giv_number, align 4
  %11 = load %struct.combine_givs_stats*, %struct.combine_givs_stats** %y, align 8
  %giv_number2 = getelementptr inbounds %struct.combine_givs_stats, %struct.combine_givs_stats* %11, i32 0, i32 0
  %12 = load i32, i32* %giv_number2, align 4
  %sub3 = sub nsw i32 %10, %12
  store i32 %sub3, i32* %d, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %13 = load i32, i32* %d, align 4
  ret i32 %13
}

declare i32 @_IO_putc(i32, %struct._IO_FILE*) #1

declare %struct.rtx_def* @gen_lowpart(i32, %struct.rtx_def*) #1

declare i32 @memory_address_p(i32, %struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define internal i32 @iv_add_mult_cost(%struct.rtx_def* %b, %struct.rtx_def* %m, %struct.rtx_def* %a, %struct.rtx_def* %reg) #0 {
entry:
  %b.addr = alloca %struct.rtx_def*, align 8
  %m.addr = alloca %struct.rtx_def*, align 8
  %a.addr = alloca %struct.rtx_def*, align 8
  %reg.addr = alloca %struct.rtx_def*, align 8
  %cost = alloca i32, align 4
  %last = alloca %struct.rtx_def*, align 8
  %result = alloca %struct.rtx_def*, align 8
  %t = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %b, %struct.rtx_def** %b.addr, align 8
  store %struct.rtx_def* %m, %struct.rtx_def** %m.addr, align 8
  store %struct.rtx_def* %a, %struct.rtx_def** %a.addr, align 8
  store %struct.rtx_def* %reg, %struct.rtx_def** %reg.addr, align 8
  store i32 0, i32* %cost, align 4
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %b.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %m.addr, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %a.addr, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %5 = bitcast %struct.rtx_def* %4 to i32*
  %bf.load = load i32, i32* %5, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %call = call %struct.rtx_def* @expand_mult_add(%struct.rtx_def* %0, %struct.rtx_def* %1, %struct.rtx_def* %2, %struct.rtx_def* %3, i32 %bf.clear, i32 1)
  store %struct.rtx_def* %call, %struct.rtx_def** %result, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8
  %cmp = icmp ne %struct.rtx_def* %6, %7
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %8 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8
  %call1 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %8, %struct.rtx_def* %9)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %call2 = call %struct.rtx_def* @get_last_insn()
  store %struct.rtx_def* %call2, %struct.rtx_def** %last, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end.29, %if.end
  %10 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8
  %tobool = icmp ne %struct.rtx_def* %10, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %11 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8
  %12 = bitcast %struct.rtx_def* %11 to i32*
  %bf.load3 = load i32, i32* %12, align 8
  %bf.clear4 = and i32 %bf.load3, 65535
  %idxprom = sext i32 %bf.clear4 to i64
  %arrayidx = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom
  %13 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %13 to i32
  %cmp5 = icmp eq i32 %conv, 105
  br i1 %cmp5, label %cond.true, label %cond.false.20

cond.true:                                        ; preds = %while.body
  %14 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx7 to %struct.rtx_def**
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %16 = bitcast %struct.rtx_def* %15 to i32*
  %bf.load8 = load i32, i32* %16, align 8
  %bf.clear9 = and i32 %bf.load8, 65535
  %cmp10 = icmp eq i32 %bf.clear9, 47
  br i1 %cmp10, label %cond.true.12, label %cond.false

cond.true.12:                                     ; preds = %cond.true
  %17 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8
  %fld13 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1
  %arrayidx14 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld13, i32 0, i64 3
  %rtx15 = bitcast %union.rtunion_def* %arrayidx14 to %struct.rtx_def**
  %18 = load %struct.rtx_def*, %struct.rtx_def** %rtx15, align 8
  br label %cond.end

cond.false:                                       ; preds = %cond.true
  %19 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8
  %20 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8
  %fld16 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1
  %arrayidx17 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld16, i32 0, i64 3
  %rtx18 = bitcast %union.rtunion_def* %arrayidx17 to %struct.rtx_def**
  %21 = load %struct.rtx_def*, %struct.rtx_def** %rtx18, align 8
  %call19 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %19, %struct.rtx_def* %21)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true.12
  %cond = phi %struct.rtx_def* [ %18, %cond.true.12 ], [ %call19, %cond.false ]
  br label %cond.end.21

cond.false.20:                                    ; preds = %while.body
  br label %cond.end.21

cond.end.21:                                      ; preds = %cond.false.20, %cond.end
  %cond22 = phi %struct.rtx_def* [ %cond, %cond.end ], [ null, %cond.false.20 ]
  store %struct.rtx_def* %cond22, %struct.rtx_def** %t, align 8
  %22 = load %struct.rtx_def*, %struct.rtx_def** %t, align 8
  %tobool23 = icmp ne %struct.rtx_def* %22, null
  br i1 %tobool23, label %if.then.24, label %if.end.29

if.then.24:                                       ; preds = %cond.end.21
  %23 = load %struct.rtx_def*, %struct.rtx_def** %t, align 8
  %fld25 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1
  %arrayidx26 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld25, i32 0, i64 1
  %rtx27 = bitcast %union.rtunion_def* %arrayidx26 to %struct.rtx_def**
  %24 = load %struct.rtx_def*, %struct.rtx_def** %rtx27, align 8
  %call28 = call i32 @rtx_cost(%struct.rtx_def* %24, i32 47)
  %25 = load i32, i32* %cost, align 4
  %add = add nsw i32 %25, %call28
  store i32 %add, i32* %cost, align 4
  br label %if.end.29

if.end.29:                                        ; preds = %if.then.24, %cond.end.21
  %26 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8
  %fld30 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %26, i32 0, i32 1
  %arrayidx31 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld30, i32 0, i64 1
  %rtx32 = bitcast %union.rtunion_def* %arrayidx31 to %struct.rtx_def**
  %27 = load %struct.rtx_def*, %struct.rtx_def** %rtx32, align 8
  store %struct.rtx_def* %27, %struct.rtx_def** %last, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  call void @end_sequence()
  %28 = load i32, i32* %cost, align 4
  ret i32 %28
}

declare %struct.rtx_def* @expand_mult_add(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32, i32) #1

declare %struct.rtx_def* @get_last_insn() #1

declare %struct.rtx_def* @expand_mult(i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32) #1

declare void @mark_reg_pointer(%struct.rtx_def*, i32) #1

; Function Attrs: nounwind uwtable
define internal i32 @maybe_eliminate_biv_1(%struct.loop* %loop, %struct.rtx_def* %x, %struct.rtx_def* %insn, %struct.iv_class* %bl, i32 %eliminate_p, %struct.basic_block_def* %where_bb, %struct.rtx_def* %where_insn) #0 {
entry:
  %retval = alloca i32, align 4
  %loop.addr = alloca %struct.loop*, align 8
  %x.addr = alloca %struct.rtx_def*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  %bl.addr = alloca %struct.iv_class*, align 8
  %eliminate_p.addr = alloca i32, align 4
  %where_bb.addr = alloca %struct.basic_block_def*, align 8
  %where_insn.addr = alloca %struct.rtx_def*, align 8
  %code = alloca i32, align 4
  %reg = alloca %struct.rtx_def*, align 8
  %mode = alloca i32, align 4
  %v = alloca %struct.induction*, align 8
  %arg = alloca %struct.rtx_def*, align 8
  %tem = alloca %struct.rtx_def*, align 8
  %arg_operand = alloca i32, align 4
  %fmt = alloca i8*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %tem223 = alloca %struct.rtx_def*, align 8
  %tem307 = alloca %struct.rtx_def*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  store %struct.iv_class* %bl, %struct.iv_class** %bl.addr, align 8
  store i32 %eliminate_p, i32* %eliminate_p.addr, align 4
  store %struct.basic_block_def* %where_bb, %struct.basic_block_def** %where_bb.addr, align 8
  store %struct.rtx_def* %where_insn, %struct.rtx_def** %where_insn.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  store i32 %bf.clear, i32* %code, align 4
  %2 = load %struct.iv_class*, %struct.iv_class** %bl.addr, align 8
  %biv = getelementptr inbounds %struct.iv_class, %struct.iv_class* %2, i32 0, i32 2
  %3 = load %struct.induction*, %struct.induction** %biv, align 8
  %dest_reg = getelementptr inbounds %struct.induction, %struct.induction* %3, i32 0, i32 4
  %4 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %reg, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %6 = bitcast %struct.rtx_def* %5 to i32*
  %bf.load1 = load i32, i32* %6, align 8
  %bf.lshr = lshr i32 %bf.load1, 16
  %bf.clear2 = and i32 %bf.lshr, 255
  store i32 %bf.clear2, i32* %mode, align 4
  %7 = load i32, i32* %code, align 4
  switch i32 %7, label %sw.default [
    i32 61, label %sw.bb
    i32 47, label %sw.bb.3
    i32 74, label %sw.bb.15
    i32 103, label %sw.bb.15
    i32 102, label %sw.bb.15
    i32 105, label %sw.bb.15
    i32 104, label %sw.bb.15
    i32 109, label %sw.bb.15
    i32 108, label %sw.bb.15
    i32 107, label %sw.bb.15
    i32 106, label %sw.bb.15
    i32 111, label %sw.bb.15
    i32 110, label %sw.bb.15
    i32 66, label %sw.bb.342
  ]

sw.bb:                                            ; preds = %entry
  %8 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %cmp = icmp eq %struct.rtx_def* %8, %9
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %sw.bb
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %sw.bb
  store i32 1, i32* %retval
  br label %return

sw.bb.3:                                          ; preds = %entry
  %10 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %12 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %cmp4 = icmp eq %struct.rtx_def* %11, %12
  br i1 %cmp4, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %sw.bb.3
  store i32 1, i32* %retval
  br label %return

if.end.6:                                         ; preds = %sw.bb.3
  %13 = load %struct.iv_class*, %struct.iv_class** %bl.addr, align 8
  %giv = getelementptr inbounds %struct.iv_class, %struct.iv_class* %13, i32 0, i32 4
  %14 = load %struct.induction*, %struct.induction** %giv, align 8
  store %struct.induction* %14, %struct.induction** %v, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.6
  %15 = load %struct.induction*, %struct.induction** %v, align 8
  %tobool = icmp ne %struct.induction* %15, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %16 = load %struct.induction*, %struct.induction** %v, align 8
  %giv_type = getelementptr inbounds %struct.induction, %struct.induction* %16, i32 0, i32 3
  %17 = load i32, i32* %giv_type, align 4
  %cmp7 = icmp eq i32 %17, 1
  br i1 %cmp7, label %land.lhs.true, label %if.end.14

land.lhs.true:                                    ; preds = %for.body
  %18 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld8 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1
  %arrayidx9 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld8, i32 0, i64 0
  %rtx10 = bitcast %union.rtunion_def* %arrayidx9 to %struct.rtx_def**
  %19 = load %struct.rtx_def*, %struct.rtx_def** %rtx10, align 8
  %20 = load %struct.induction*, %struct.induction** %v, align 8
  %dest_reg11 = getelementptr inbounds %struct.induction, %struct.induction* %20, i32 0, i32 4
  %21 = load %struct.rtx_def*, %struct.rtx_def** %dest_reg11, align 8
  %cmp12 = icmp eq %struct.rtx_def* %19, %21
  br i1 %cmp12, label %if.then.13, label %if.end.14

if.then.13:                                       ; preds = %land.lhs.true
  store i32 1, i32* %retval
  br label %return

if.end.14:                                        ; preds = %land.lhs.true, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.14
  %22 = load %struct.induction*, %struct.induction** %v, align 8
  %next_iv = getelementptr inbounds %struct.induction, %struct.induction* %22, i32 0, i32 17
  %23 = load %struct.induction*, %struct.induction** %next_iv, align 8
  store %struct.induction* %23, %struct.induction** %v, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %sw.epilog

sw.bb.15:                                         ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  %24 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld16 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1
  %arrayidx17 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld16, i32 0, i64 0
  %rtx18 = bitcast %union.rtunion_def* %arrayidx17 to %struct.rtx_def**
  %25 = load %struct.rtx_def*, %struct.rtx_def** %rtx18, align 8
  %26 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %cmp19 = icmp eq %struct.rtx_def* %25, %26
  br i1 %cmp19, label %if.then.20, label %if.else

if.then.20:                                       ; preds = %sw.bb.15
  %27 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld21 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1
  %arrayidx22 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld21, i32 0, i64 1
  %rtx23 = bitcast %union.rtunion_def* %arrayidx22 to %struct.rtx_def**
  %28 = load %struct.rtx_def*, %struct.rtx_def** %rtx23, align 8
  store %struct.rtx_def* %28, %struct.rtx_def** %arg, align 8
  store i32 1, i32* %arg_operand, align 4
  br label %if.end.34

if.else:                                          ; preds = %sw.bb.15
  %29 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld24 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %29, i32 0, i32 1
  %arrayidx25 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld24, i32 0, i64 1
  %rtx26 = bitcast %union.rtunion_def* %arrayidx25 to %struct.rtx_def**
  %30 = load %struct.rtx_def*, %struct.rtx_def** %rtx26, align 8
  %31 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %cmp27 = icmp eq %struct.rtx_def* %30, %31
  br i1 %cmp27, label %if.then.28, label %if.else.32

if.then.28:                                       ; preds = %if.else
  %32 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld29 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %32, i32 0, i32 1
  %arrayidx30 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld29, i32 0, i64 0
  %rtx31 = bitcast %union.rtunion_def* %arrayidx30 to %struct.rtx_def**
  %33 = load %struct.rtx_def*, %struct.rtx_def** %rtx31, align 8
  store %struct.rtx_def* %33, %struct.rtx_def** %arg, align 8
  store i32 0, i32* %arg_operand, align 4
  br label %if.end.33

if.else.32:                                       ; preds = %if.else
  br label %sw.epilog

if.end.33:                                        ; preds = %if.then.28
  br label %if.end.34

if.end.34:                                        ; preds = %if.end.33, %if.then.20
  %34 = load %struct.rtx_def*, %struct.rtx_def** %arg, align 8
  %35 = bitcast %struct.rtx_def* %34 to i32*
  %bf.load35 = load i32, i32* %35, align 8
  %bf.clear36 = and i32 %bf.load35, 65535
  %cmp37 = icmp eq i32 %bf.clear36, 67
  br i1 %cmp37, label %if.then.65, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.34
  %36 = load %struct.rtx_def*, %struct.rtx_def** %arg, align 8
  %37 = bitcast %struct.rtx_def* %36 to i32*
  %bf.load38 = load i32, i32* %37, align 8
  %bf.clear39 = and i32 %bf.load38, 65535
  %cmp40 = icmp eq i32 %bf.clear39, 68
  br i1 %cmp40, label %if.then.65, label %lor.lhs.false.41

lor.lhs.false.41:                                 ; preds = %lor.lhs.false
  %38 = load %struct.rtx_def*, %struct.rtx_def** %arg, align 8
  %39 = bitcast %struct.rtx_def* %38 to i32*
  %bf.load42 = load i32, i32* %39, align 8
  %bf.clear43 = and i32 %bf.load42, 65535
  %cmp44 = icmp eq i32 %bf.clear43, 54
  br i1 %cmp44, label %if.then.65, label %lor.lhs.false.45

lor.lhs.false.45:                                 ; preds = %lor.lhs.false.41
  %40 = load %struct.rtx_def*, %struct.rtx_def** %arg, align 8
  %41 = bitcast %struct.rtx_def* %40 to i32*
  %bf.load46 = load i32, i32* %41, align 8
  %bf.clear47 = and i32 %bf.load46, 65535
  %cmp48 = icmp eq i32 %bf.clear47, 55
  br i1 %cmp48, label %if.then.65, label %lor.lhs.false.49

lor.lhs.false.49:                                 ; preds = %lor.lhs.false.45
  %42 = load %struct.rtx_def*, %struct.rtx_def** %arg, align 8
  %43 = bitcast %struct.rtx_def* %42 to i32*
  %bf.load50 = load i32, i32* %43, align 8
  %bf.clear51 = and i32 %bf.load50, 65535
  %cmp52 = icmp eq i32 %bf.clear51, 58
  br i1 %cmp52, label %if.then.65, label %lor.lhs.false.53

lor.lhs.false.53:                                 ; preds = %lor.lhs.false.49
  %44 = load %struct.rtx_def*, %struct.rtx_def** %arg, align 8
  %45 = bitcast %struct.rtx_def* %44 to i32*
  %bf.load54 = load i32, i32* %45, align 8
  %bf.clear55 = and i32 %bf.load54, 65535
  %cmp56 = icmp eq i32 %bf.clear55, 134
  br i1 %cmp56, label %if.then.65, label %lor.lhs.false.57

lor.lhs.false.57:                                 ; preds = %lor.lhs.false.53
  %46 = load %struct.rtx_def*, %struct.rtx_def** %arg, align 8
  %47 = bitcast %struct.rtx_def* %46 to i32*
  %bf.load58 = load i32, i32* %47, align 8
  %bf.clear59 = and i32 %bf.load58, 65535
  %cmp60 = icmp eq i32 %bf.clear59, 56
  br i1 %cmp60, label %if.then.65, label %lor.lhs.false.61

lor.lhs.false.61:                                 ; preds = %lor.lhs.false.57
  %48 = load %struct.rtx_def*, %struct.rtx_def** %arg, align 8
  %49 = bitcast %struct.rtx_def* %48 to i32*
  %bf.load62 = load i32, i32* %49, align 8
  %bf.clear63 = and i32 %bf.load62, 65535
  %cmp64 = icmp eq i32 %bf.clear63, 140
  br i1 %cmp64, label %if.then.65, label %if.else.255

if.then.65:                                       ; preds = %lor.lhs.false.61, %lor.lhs.false.57, %lor.lhs.false.53, %lor.lhs.false.49, %lor.lhs.false.45, %lor.lhs.false.41, %lor.lhs.false, %if.end.34
  %50 = load %struct.iv_class*, %struct.iv_class** %bl.addr, align 8
  %giv66 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %50, i32 0, i32 4
  %51 = load %struct.induction*, %struct.induction** %giv66, align 8
  store %struct.induction* %51, %struct.induction** %v, align 8
  br label %for.cond.67

for.cond.67:                                      ; preds = %for.inc.180, %if.then.65
  %52 = load %struct.induction*, %struct.induction** %v, align 8
  %tobool68 = icmp ne %struct.induction* %52, null
  br i1 %tobool68, label %for.body.69, label %for.end.182

for.body.69:                                      ; preds = %for.cond.67
  %53 = load %struct.induction*, %struct.induction** %v, align 8
  %mult_val = getelementptr inbounds %struct.induction, %struct.induction* %53, i32 0, i32 8
  %54 = load %struct.rtx_def*, %struct.rtx_def** %mult_val, align 8
  %55 = bitcast %struct.rtx_def* %54 to i32*
  %bf.load70 = load i32, i32* %55, align 8
  %bf.clear71 = and i32 %bf.load70, 65535
  %cmp72 = icmp eq i32 %bf.clear71, 54
  br i1 %cmp72, label %land.lhs.true.73, label %if.end.179

land.lhs.true.73:                                 ; preds = %for.body.69
  %56 = load %struct.induction*, %struct.induction** %v, align 8
  %mult_val74 = getelementptr inbounds %struct.induction, %struct.induction* %56, i32 0, i32 8
  %57 = load %struct.rtx_def*, %struct.rtx_def** %mult_val74, align 8
  %fld75 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %57, i32 0, i32 1
  %arrayidx76 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld75, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx76 to i64*
  %58 = load i64, i64* %rtwint, align 8
  %cmp77 = icmp sgt i64 %58, 0
  br i1 %cmp77, label %land.lhs.true.78, label %if.end.179

land.lhs.true.78:                                 ; preds = %land.lhs.true.73
  %59 = load %struct.induction*, %struct.induction** %v, align 8
  %add_val = getelementptr inbounds %struct.induction, %struct.induction* %59, i32 0, i32 9
  %60 = load %struct.rtx_def*, %struct.rtx_def** %add_val, align 8
  %61 = bitcast %struct.rtx_def* %60 to i32*
  %bf.load79 = load i32, i32* %61, align 8
  %bf.clear80 = and i32 %bf.load79, 65535
  %cmp81 = icmp eq i32 %bf.clear80, 68
  br i1 %cmp81, label %land.lhs.true.102, label %lor.lhs.false.82

lor.lhs.false.82:                                 ; preds = %land.lhs.true.78
  %62 = load %struct.induction*, %struct.induction** %v, align 8
  %add_val83 = getelementptr inbounds %struct.induction, %struct.induction* %62, i32 0, i32 9
  %63 = load %struct.rtx_def*, %struct.rtx_def** %add_val83, align 8
  %64 = bitcast %struct.rtx_def* %63 to i32*
  %bf.load84 = load i32, i32* %64, align 8
  %bf.clear85 = and i32 %bf.load84, 65535
  %cmp86 = icmp eq i32 %bf.clear85, 67
  br i1 %cmp86, label %land.lhs.true.102, label %lor.lhs.false.87

lor.lhs.false.87:                                 ; preds = %lor.lhs.false.82
  %65 = load %struct.induction*, %struct.induction** %v, align 8
  %add_val88 = getelementptr inbounds %struct.induction, %struct.induction* %65, i32 0, i32 9
  %66 = load %struct.rtx_def*, %struct.rtx_def** %add_val88, align 8
  %67 = bitcast %struct.rtx_def* %66 to i32*
  %bf.load89 = load i32, i32* %67, align 8
  %bf.clear90 = and i32 %bf.load89, 65535
  %cmp91 = icmp eq i32 %bf.clear90, 58
  br i1 %cmp91, label %land.lhs.true.102, label %lor.lhs.false.92

lor.lhs.false.92:                                 ; preds = %lor.lhs.false.87
  %68 = load %struct.induction*, %struct.induction** %v, align 8
  %add_val93 = getelementptr inbounds %struct.induction, %struct.induction* %68, i32 0, i32 9
  %69 = load %struct.rtx_def*, %struct.rtx_def** %add_val93, align 8
  %70 = bitcast %struct.rtx_def* %69 to i32*
  %bf.load94 = load i32, i32* %70, align 8
  %bf.clear95 = and i32 %bf.load94, 65535
  %cmp96 = icmp eq i32 %bf.clear95, 61
  br i1 %cmp96, label %land.lhs.true.97, label %if.end.179

land.lhs.true.97:                                 ; preds = %lor.lhs.false.92
  %71 = load %struct.induction*, %struct.induction** %v, align 8
  %add_val98 = getelementptr inbounds %struct.induction, %struct.induction* %71, i32 0, i32 9
  %72 = load %struct.rtx_def*, %struct.rtx_def** %add_val98, align 8
  %73 = bitcast %struct.rtx_def* %72 to i32*
  %bf.load99 = load i32, i32* %73, align 8
  %bf.lshr100 = lshr i32 %bf.load99, 31
  %tobool101 = icmp ne i32 %bf.lshr100, 0
  br i1 %tobool101, label %land.lhs.true.102, label %if.end.179

land.lhs.true.102:                                ; preds = %land.lhs.true.97, %lor.lhs.false.87, %lor.lhs.false.82, %land.lhs.true.78
  %74 = load %struct.induction*, %struct.induction** %v, align 8
  %ignore = getelementptr inbounds %struct.induction, %struct.induction* %74, i32 0, i32 13
  %bf.load103 = load i16, i16* %ignore, align 4
  %bf.lshr104 = lshr i16 %bf.load103, 2
  %bf.clear105 = and i16 %bf.lshr104, 1
  %bf.cast = zext i16 %bf.clear105 to i32
  %tobool106 = icmp ne i32 %bf.cast, 0
  br i1 %tobool106, label %if.end.179, label %land.lhs.true.107

land.lhs.true.107:                                ; preds = %land.lhs.true.102
  %75 = load %struct.induction*, %struct.induction** %v, align 8
  %maybe_dead = getelementptr inbounds %struct.induction, %struct.induction* %75, i32 0, i32 13
  %bf.load108 = load i16, i16* %maybe_dead, align 4
  %bf.lshr109 = lshr i16 %bf.load108, 7
  %bf.clear110 = and i16 %bf.lshr109, 1
  %bf.cast111 = zext i16 %bf.clear110 to i32
  %tobool112 = icmp ne i32 %bf.cast111, 0
  br i1 %tobool112, label %if.end.179, label %land.lhs.true.113

land.lhs.true.113:                                ; preds = %land.lhs.true.107
  %76 = load %struct.induction*, %struct.induction** %v, align 8
  %always_computable = getelementptr inbounds %struct.induction, %struct.induction* %76, i32 0, i32 13
  %bf.load114 = load i16, i16* %always_computable, align 4
  %bf.lshr115 = lshr i16 %bf.load114, 3
  %bf.clear116 = and i16 %bf.lshr115, 1
  %bf.cast117 = zext i16 %bf.clear116 to i32
  %tobool118 = icmp ne i32 %bf.cast117, 0
  br i1 %tobool118, label %land.lhs.true.119, label %if.end.179

land.lhs.true.119:                                ; preds = %land.lhs.true.113
  %77 = load %struct.induction*, %struct.induction** %v, align 8
  %mode120 = getelementptr inbounds %struct.induction, %struct.induction* %77, i32 0, i32 6
  %78 = load i32, i32* %mode120, align 4
  %79 = load i32, i32* %mode, align 4
  %cmp121 = icmp eq i32 %78, %79
  br i1 %cmp121, label %if.then.122, label %if.end.179

if.then.122:                                      ; preds = %land.lhs.true.119
  %80 = load %struct.iv_class*, %struct.iv_class** %bl.addr, align 8
  %biv123 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %80, i32 0, i32 2
  %81 = load %struct.induction*, %struct.induction** %biv123, align 8
  %82 = load %struct.induction*, %struct.induction** %v, align 8
  %83 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call = call i32 @biv_elimination_giv_has_0_offset(%struct.induction* %81, %struct.induction* %82, %struct.rtx_def* %83)
  %tobool124 = icmp ne i32 %call, 0
  br i1 %tobool124, label %if.end.126, label %if.then.125

if.then.125:                                      ; preds = %if.then.122
  br label %for.inc.180

if.end.126:                                       ; preds = %if.then.122
  %84 = load i32, i32* %eliminate_p.addr, align 4
  %tobool127 = icmp ne i32 %84, 0
  br i1 %tobool127, label %if.end.129, label %if.then.128

if.then.128:                                      ; preds = %if.end.126
  store i32 1, i32* %retval
  br label %return

if.end.129:                                       ; preds = %if.end.126
  %85 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %86 = load i32, i32* %arg_operand, align 4
  %sub = sub nsw i32 1, %86
  %idxprom = sext i32 %sub to i64
  %87 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld130 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %87, i32 0, i32 1
  %arrayidx131 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld130, i32 0, i64 %idxprom
  %rtx132 = bitcast %union.rtunion_def* %arrayidx131 to %struct.rtx_def**
  %88 = load %struct.induction*, %struct.induction** %v, align 8
  %new_reg = getelementptr inbounds %struct.induction, %struct.induction* %88, i32 0, i32 1
  %89 = load %struct.rtx_def*, %struct.rtx_def** %new_reg, align 8
  %call133 = call i32 @validate_change(%struct.rtx_def* %85, %struct.rtx_def** %rtx132, %struct.rtx_def* %89, i32 1)
  %90 = load %struct.rtx_def*, %struct.rtx_def** %arg, align 8
  %91 = bitcast %struct.rtx_def* %90 to i32*
  %bf.load134 = load i32, i32* %91, align 8
  %bf.clear135 = and i32 %bf.load134, 65535
  %cmp136 = icmp eq i32 %bf.clear135, 54
  br i1 %cmp136, label %land.lhs.true.137, label %if.else.165

land.lhs.true.137:                                ; preds = %if.end.129
  %92 = load %struct.induction*, %struct.induction** %v, align 8
  %mult_val138 = getelementptr inbounds %struct.induction, %struct.induction* %92, i32 0, i32 8
  %93 = load %struct.rtx_def*, %struct.rtx_def** %mult_val138, align 8
  %94 = bitcast %struct.rtx_def* %93 to i32*
  %bf.load139 = load i32, i32* %94, align 8
  %bf.clear140 = and i32 %bf.load139, 65535
  %cmp141 = icmp eq i32 %bf.clear140, 54
  br i1 %cmp141, label %land.lhs.true.142, label %if.else.165

land.lhs.true.142:                                ; preds = %land.lhs.true.137
  %95 = load %struct.induction*, %struct.induction** %v, align 8
  %add_val143 = getelementptr inbounds %struct.induction, %struct.induction* %95, i32 0, i32 9
  %96 = load %struct.rtx_def*, %struct.rtx_def** %add_val143, align 8
  %97 = bitcast %struct.rtx_def* %96 to i32*
  %bf.load144 = load i32, i32* %97, align 8
  %bf.clear145 = and i32 %bf.load144, 65535
  %cmp146 = icmp eq i32 %bf.clear145, 54
  br i1 %cmp146, label %if.then.147, label %if.else.165

if.then.147:                                      ; preds = %land.lhs.true.142
  %98 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %99 = load i32, i32* %arg_operand, align 4
  %idxprom148 = sext i32 %99 to i64
  %100 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld149 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %100, i32 0, i32 1
  %arrayidx150 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld149, i32 0, i64 %idxprom148
  %rtx151 = bitcast %union.rtunion_def* %arrayidx150 to %struct.rtx_def**
  %101 = load %struct.rtx_def*, %struct.rtx_def** %arg, align 8
  %fld152 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %101, i32 0, i32 1
  %arrayidx153 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld152, i32 0, i64 0
  %rtwint154 = bitcast %union.rtunion_def* %arrayidx153 to i64*
  %102 = load i64, i64* %rtwint154, align 8
  %103 = load %struct.induction*, %struct.induction** %v, align 8
  %mult_val155 = getelementptr inbounds %struct.induction, %struct.induction* %103, i32 0, i32 8
  %104 = load %struct.rtx_def*, %struct.rtx_def** %mult_val155, align 8
  %fld156 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %104, i32 0, i32 1
  %arrayidx157 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld156, i32 0, i64 0
  %rtwint158 = bitcast %union.rtunion_def* %arrayidx157 to i64*
  %105 = load i64, i64* %rtwint158, align 8
  %mul = mul nsw i64 %102, %105
  %106 = load %struct.induction*, %struct.induction** %v, align 8
  %add_val159 = getelementptr inbounds %struct.induction, %struct.induction* %106, i32 0, i32 9
  %107 = load %struct.rtx_def*, %struct.rtx_def** %add_val159, align 8
  %fld160 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %107, i32 0, i32 1
  %arrayidx161 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld160, i32 0, i64 0
  %rtwint162 = bitcast %union.rtunion_def* %arrayidx161 to i64*
  %108 = load i64, i64* %rtwint162, align 8
  %add = add nsw i64 %mul, %108
  %call163 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %add)
  %call164 = call i32 @validate_change(%struct.rtx_def* %98, %struct.rtx_def** %rtx151, %struct.rtx_def* %call163, i32 1)
  br label %if.end.174

if.else.165:                                      ; preds = %land.lhs.true.142, %land.lhs.true.137, %if.end.129
  %109 = load i32, i32* %mode, align 4
  %call166 = call %struct.rtx_def* @gen_reg_rtx(i32 %109)
  store %struct.rtx_def* %call166, %struct.rtx_def** %tem, align 8
  %110 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %111 = load %struct.rtx_def*, %struct.rtx_def** %arg, align 8
  %112 = load %struct.induction*, %struct.induction** %v, align 8
  %mult_val167 = getelementptr inbounds %struct.induction, %struct.induction* %112, i32 0, i32 8
  %113 = load %struct.rtx_def*, %struct.rtx_def** %mult_val167, align 8
  %114 = load %struct.induction*, %struct.induction** %v, align 8
  %add_val168 = getelementptr inbounds %struct.induction, %struct.induction* %114, i32 0, i32 9
  %115 = load %struct.rtx_def*, %struct.rtx_def** %add_val168, align 8
  %116 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %117 = load %struct.basic_block_def*, %struct.basic_block_def** %where_bb.addr, align 8
  %118 = load %struct.rtx_def*, %struct.rtx_def** %where_insn.addr, align 8
  call void @loop_iv_add_mult_emit_before(%struct.loop* %110, %struct.rtx_def* %111, %struct.rtx_def* %113, %struct.rtx_def* %115, %struct.rtx_def* %116, %struct.basic_block_def* %117, %struct.rtx_def* %118)
  %119 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %120 = load i32, i32* %arg_operand, align 4
  %idxprom169 = sext i32 %120 to i64
  %121 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld170 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %121, i32 0, i32 1
  %arrayidx171 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld170, i32 0, i64 %idxprom169
  %rtx172 = bitcast %union.rtunion_def* %arrayidx171 to %struct.rtx_def**
  %122 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %call173 = call i32 @validate_change(%struct.rtx_def* %119, %struct.rtx_def** %rtx172, %struct.rtx_def* %122, i32 1)
  br label %if.end.174

if.end.174:                                       ; preds = %if.else.165, %if.then.147
  %call175 = call i32 @apply_change_group()
  %tobool176 = icmp ne i32 %call175, 0
  br i1 %tobool176, label %if.then.177, label %if.end.178

if.then.177:                                      ; preds = %if.end.174
  store i32 1, i32* %retval
  br label %return

if.end.178:                                       ; preds = %if.end.174
  br label %if.end.179

if.end.179:                                       ; preds = %if.end.178, %land.lhs.true.119, %land.lhs.true.113, %land.lhs.true.107, %land.lhs.true.102, %land.lhs.true.97, %lor.lhs.false.92, %land.lhs.true.73, %for.body.69
  br label %for.inc.180

for.inc.180:                                      ; preds = %if.end.179, %if.then.125
  %123 = load %struct.induction*, %struct.induction** %v, align 8
  %next_iv181 = getelementptr inbounds %struct.induction, %struct.induction* %123, i32 0, i32 17
  %124 = load %struct.induction*, %struct.induction** %next_iv181, align 8
  store %struct.induction* %124, %struct.induction** %v, align 8
  br label %for.cond.67

for.end.182:                                      ; preds = %for.cond.67
  %125 = load %struct.iv_class*, %struct.iv_class** %bl.addr, align 8
  %giv183 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %125, i32 0, i32 4
  %126 = load %struct.induction*, %struct.induction** %giv183, align 8
  store %struct.induction* %126, %struct.induction** %v, align 8
  br label %for.cond.184

for.cond.184:                                     ; preds = %for.inc.252, %for.end.182
  %127 = load %struct.induction*, %struct.induction** %v, align 8
  %tobool185 = icmp ne %struct.induction* %127, null
  br i1 %tobool185, label %for.body.186, label %for.end.254

for.body.186:                                     ; preds = %for.cond.184
  %128 = load %struct.induction*, %struct.induction** %v, align 8
  %mult_val187 = getelementptr inbounds %struct.induction, %struct.induction* %128, i32 0, i32 8
  %129 = load %struct.rtx_def*, %struct.rtx_def** %mult_val187, align 8
  %130 = bitcast %struct.rtx_def* %129 to i32*
  %bf.load188 = load i32, i32* %130, align 8
  %bf.clear189 = and i32 %bf.load188, 65535
  %cmp190 = icmp eq i32 %bf.clear189, 54
  br i1 %cmp190, label %land.lhs.true.191, label %if.end.251

land.lhs.true.191:                                ; preds = %for.body.186
  %131 = load %struct.induction*, %struct.induction** %v, align 8
  %mult_val192 = getelementptr inbounds %struct.induction, %struct.induction* %131, i32 0, i32 8
  %132 = load %struct.rtx_def*, %struct.rtx_def** %mult_val192, align 8
  %fld193 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %132, i32 0, i32 1
  %arrayidx194 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld193, i32 0, i64 0
  %rtwint195 = bitcast %union.rtunion_def* %arrayidx194 to i64*
  %133 = load i64, i64* %rtwint195, align 8
  %cmp196 = icmp sgt i64 %133, 0
  br i1 %cmp196, label %land.lhs.true.197, label %if.end.251

land.lhs.true.197:                                ; preds = %land.lhs.true.191
  %134 = load %struct.induction*, %struct.induction** %v, align 8
  %ignore198 = getelementptr inbounds %struct.induction, %struct.induction* %134, i32 0, i32 13
  %bf.load199 = load i16, i16* %ignore198, align 4
  %bf.lshr200 = lshr i16 %bf.load199, 2
  %bf.clear201 = and i16 %bf.lshr200, 1
  %bf.cast202 = zext i16 %bf.clear201 to i32
  %tobool203 = icmp ne i32 %bf.cast202, 0
  br i1 %tobool203, label %if.end.251, label %land.lhs.true.204

land.lhs.true.204:                                ; preds = %land.lhs.true.197
  %135 = load %struct.induction*, %struct.induction** %v, align 8
  %maybe_dead205 = getelementptr inbounds %struct.induction, %struct.induction* %135, i32 0, i32 13
  %bf.load206 = load i16, i16* %maybe_dead205, align 4
  %bf.lshr207 = lshr i16 %bf.load206, 7
  %bf.clear208 = and i16 %bf.lshr207, 1
  %bf.cast209 = zext i16 %bf.clear208 to i32
  %tobool210 = icmp ne i32 %bf.cast209, 0
  br i1 %tobool210, label %if.end.251, label %land.lhs.true.211

land.lhs.true.211:                                ; preds = %land.lhs.true.204
  %136 = load %struct.induction*, %struct.induction** %v, align 8
  %always_computable212 = getelementptr inbounds %struct.induction, %struct.induction* %136, i32 0, i32 13
  %bf.load213 = load i16, i16* %always_computable212, align 4
  %bf.lshr214 = lshr i16 %bf.load213, 3
  %bf.clear215 = and i16 %bf.lshr214, 1
  %bf.cast216 = zext i16 %bf.clear215 to i32
  %tobool217 = icmp ne i32 %bf.cast216, 0
  br i1 %tobool217, label %land.lhs.true.218, label %if.end.251

land.lhs.true.218:                                ; preds = %land.lhs.true.211
  %137 = load %struct.induction*, %struct.induction** %v, align 8
  %mode219 = getelementptr inbounds %struct.induction, %struct.induction* %137, i32 0, i32 6
  %138 = load i32, i32* %mode219, align 4
  %139 = load i32, i32* %mode, align 4
  %cmp220 = icmp eq i32 %138, %139
  br i1 %cmp220, label %land.lhs.true.221, label %if.end.251

land.lhs.true.221:                                ; preds = %land.lhs.true.218
  br i1 false, label %if.then.222, label %if.end.251

if.then.222:                                      ; preds = %land.lhs.true.221
  %140 = load %struct.iv_class*, %struct.iv_class** %bl.addr, align 8
  %biv224 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %140, i32 0, i32 2
  %141 = load %struct.induction*, %struct.induction** %biv224, align 8
  %142 = load %struct.induction*, %struct.induction** %v, align 8
  %143 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call225 = call i32 @biv_elimination_giv_has_0_offset(%struct.induction* %141, %struct.induction* %142, %struct.rtx_def* %143)
  %tobool226 = icmp ne i32 %call225, 0
  br i1 %tobool226, label %if.end.228, label %if.then.227

if.then.227:                                      ; preds = %if.then.222
  br label %for.inc.252

if.end.228:                                       ; preds = %if.then.222
  %144 = load i32, i32* %eliminate_p.addr, align 4
  %tobool229 = icmp ne i32 %144, 0
  br i1 %tobool229, label %if.end.231, label %if.then.230

if.then.230:                                      ; preds = %if.end.228
  store i32 1, i32* %retval
  br label %return

if.end.231:                                       ; preds = %if.end.228
  %145 = load i32, i32* %mode, align 4
  %call232 = call %struct.rtx_def* @gen_reg_rtx(i32 %145)
  store %struct.rtx_def* %call232, %struct.rtx_def** %tem223, align 8
  %146 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %147 = load i32, i32* %arg_operand, align 4
  %sub233 = sub nsw i32 1, %147
  %idxprom234 = sext i32 %sub233 to i64
  %148 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld235 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %148, i32 0, i32 1
  %arrayidx236 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld235, i32 0, i64 %idxprom234
  %rtx237 = bitcast %union.rtunion_def* %arrayidx236 to %struct.rtx_def**
  %149 = load %struct.induction*, %struct.induction** %v, align 8
  %new_reg238 = getelementptr inbounds %struct.induction, %struct.induction* %149, i32 0, i32 1
  %150 = load %struct.rtx_def*, %struct.rtx_def** %new_reg238, align 8
  %call239 = call i32 @validate_change(%struct.rtx_def* %146, %struct.rtx_def** %rtx237, %struct.rtx_def* %150, i32 1)
  %151 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %152 = load %struct.rtx_def*, %struct.rtx_def** %arg, align 8
  %153 = load %struct.induction*, %struct.induction** %v, align 8
  %mult_val240 = getelementptr inbounds %struct.induction, %struct.induction* %153, i32 0, i32 8
  %154 = load %struct.rtx_def*, %struct.rtx_def** %mult_val240, align 8
  %155 = load %struct.induction*, %struct.induction** %v, align 8
  %add_val241 = getelementptr inbounds %struct.induction, %struct.induction* %155, i32 0, i32 9
  %156 = load %struct.rtx_def*, %struct.rtx_def** %add_val241, align 8
  %157 = load %struct.rtx_def*, %struct.rtx_def** %tem223, align 8
  %158 = load %struct.basic_block_def*, %struct.basic_block_def** %where_bb.addr, align 8
  %159 = load %struct.rtx_def*, %struct.rtx_def** %where_insn.addr, align 8
  call void @loop_iv_add_mult_emit_before(%struct.loop* %151, %struct.rtx_def* %152, %struct.rtx_def* %154, %struct.rtx_def* %156, %struct.rtx_def* %157, %struct.basic_block_def* %158, %struct.rtx_def* %159)
  %160 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %161 = load i32, i32* %arg_operand, align 4
  %idxprom242 = sext i32 %161 to i64
  %162 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld243 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %162, i32 0, i32 1
  %arrayidx244 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld243, i32 0, i64 %idxprom242
  %rtx245 = bitcast %union.rtunion_def* %arrayidx244 to %struct.rtx_def**
  %163 = load %struct.rtx_def*, %struct.rtx_def** %tem223, align 8
  %call246 = call i32 @validate_change(%struct.rtx_def* %160, %struct.rtx_def** %rtx245, %struct.rtx_def* %163, i32 1)
  %call247 = call i32 @apply_change_group()
  %tobool248 = icmp ne i32 %call247, 0
  br i1 %tobool248, label %if.then.249, label %if.end.250

if.then.249:                                      ; preds = %if.end.231
  store i32 1, i32* %retval
  br label %return

if.end.250:                                       ; preds = %if.end.231
  br label %if.end.251

if.end.251:                                       ; preds = %if.end.250, %land.lhs.true.221, %land.lhs.true.218, %land.lhs.true.211, %land.lhs.true.204, %land.lhs.true.197, %land.lhs.true.191, %for.body.186
  br label %for.inc.252

for.inc.252:                                      ; preds = %if.end.251, %if.then.227
  %164 = load %struct.induction*, %struct.induction** %v, align 8
  %next_iv253 = getelementptr inbounds %struct.induction, %struct.induction* %164, i32 0, i32 17
  %165 = load %struct.induction*, %struct.induction** %next_iv253, align 8
  store %struct.induction* %165, %struct.induction** %v, align 8
  br label %for.cond.184

for.end.254:                                      ; preds = %for.cond.184
  br label %if.end.341

if.else.255:                                      ; preds = %lor.lhs.false.61
  %166 = load %struct.rtx_def*, %struct.rtx_def** %arg, align 8
  %167 = bitcast %struct.rtx_def* %166 to i32*
  %bf.load256 = load i32, i32* %167, align 8
  %bf.clear257 = and i32 %bf.load256, 65535
  %cmp258 = icmp eq i32 %bf.clear257, 61
  br i1 %cmp258, label %if.then.263, label %lor.lhs.false.259

lor.lhs.false.259:                                ; preds = %if.else.255
  %168 = load %struct.rtx_def*, %struct.rtx_def** %arg, align 8
  %169 = bitcast %struct.rtx_def* %168 to i32*
  %bf.load260 = load i32, i32* %169, align 8
  %bf.clear261 = and i32 %bf.load260, 65535
  %cmp262 = icmp eq i32 %bf.clear261, 66
  br i1 %cmp262, label %if.then.263, label %if.end.340

if.then.263:                                      ; preds = %lor.lhs.false.259, %if.else.255
  %170 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %171 = load %struct.rtx_def*, %struct.rtx_def** %arg, align 8
  %call264 = call i32 @loop_invariant_p(%struct.loop* %170, %struct.rtx_def* %171)
  %cmp265 = icmp eq i32 %call264, 1
  br i1 %cmp265, label %if.then.266, label %if.end.339

if.then.266:                                      ; preds = %if.then.263
  %172 = load %struct.iv_class*, %struct.iv_class** %bl.addr, align 8
  %giv267 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %172, i32 0, i32 4
  %173 = load %struct.induction*, %struct.induction** %giv267, align 8
  store %struct.induction* %173, %struct.induction** %v, align 8
  br label %for.cond.268

for.cond.268:                                     ; preds = %for.inc.336, %if.then.266
  %174 = load %struct.induction*, %struct.induction** %v, align 8
  %tobool269 = icmp ne %struct.induction* %174, null
  br i1 %tobool269, label %for.body.270, label %for.end.338

for.body.270:                                     ; preds = %for.cond.268
  %175 = load %struct.induction*, %struct.induction** %v, align 8
  %mult_val271 = getelementptr inbounds %struct.induction, %struct.induction* %175, i32 0, i32 8
  %176 = load %struct.rtx_def*, %struct.rtx_def** %mult_val271, align 8
  %177 = bitcast %struct.rtx_def* %176 to i32*
  %bf.load272 = load i32, i32* %177, align 8
  %bf.clear273 = and i32 %bf.load272, 65535
  %cmp274 = icmp eq i32 %bf.clear273, 54
  br i1 %cmp274, label %land.lhs.true.275, label %if.end.335

land.lhs.true.275:                                ; preds = %for.body.270
  %178 = load %struct.induction*, %struct.induction** %v, align 8
  %mult_val276 = getelementptr inbounds %struct.induction, %struct.induction* %178, i32 0, i32 8
  %179 = load %struct.rtx_def*, %struct.rtx_def** %mult_val276, align 8
  %fld277 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %179, i32 0, i32 1
  %arrayidx278 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld277, i32 0, i64 0
  %rtwint279 = bitcast %union.rtunion_def* %arrayidx278 to i64*
  %180 = load i64, i64* %rtwint279, align 8
  %cmp280 = icmp sgt i64 %180, 0
  br i1 %cmp280, label %land.lhs.true.281, label %if.end.335

land.lhs.true.281:                                ; preds = %land.lhs.true.275
  %181 = load %struct.induction*, %struct.induction** %v, align 8
  %ignore282 = getelementptr inbounds %struct.induction, %struct.induction* %181, i32 0, i32 13
  %bf.load283 = load i16, i16* %ignore282, align 4
  %bf.lshr284 = lshr i16 %bf.load283, 2
  %bf.clear285 = and i16 %bf.lshr284, 1
  %bf.cast286 = zext i16 %bf.clear285 to i32
  %tobool287 = icmp ne i32 %bf.cast286, 0
  br i1 %tobool287, label %if.end.335, label %land.lhs.true.288

land.lhs.true.288:                                ; preds = %land.lhs.true.281
  %182 = load %struct.induction*, %struct.induction** %v, align 8
  %maybe_dead289 = getelementptr inbounds %struct.induction, %struct.induction* %182, i32 0, i32 13
  %bf.load290 = load i16, i16* %maybe_dead289, align 4
  %bf.lshr291 = lshr i16 %bf.load290, 7
  %bf.clear292 = and i16 %bf.lshr291, 1
  %bf.cast293 = zext i16 %bf.clear292 to i32
  %tobool294 = icmp ne i32 %bf.cast293, 0
  br i1 %tobool294, label %if.end.335, label %land.lhs.true.295

land.lhs.true.295:                                ; preds = %land.lhs.true.288
  %183 = load %struct.induction*, %struct.induction** %v, align 8
  %always_computable296 = getelementptr inbounds %struct.induction, %struct.induction* %183, i32 0, i32 13
  %bf.load297 = load i16, i16* %always_computable296, align 4
  %bf.lshr298 = lshr i16 %bf.load297, 3
  %bf.clear299 = and i16 %bf.lshr298, 1
  %bf.cast300 = zext i16 %bf.clear299 to i32
  %tobool301 = icmp ne i32 %bf.cast300, 0
  br i1 %tobool301, label %land.lhs.true.302, label %if.end.335

land.lhs.true.302:                                ; preds = %land.lhs.true.295
  %184 = load %struct.induction*, %struct.induction** %v, align 8
  %mode303 = getelementptr inbounds %struct.induction, %struct.induction* %184, i32 0, i32 6
  %185 = load i32, i32* %mode303, align 4
  %186 = load i32, i32* %mode, align 4
  %cmp304 = icmp eq i32 %185, %186
  br i1 %cmp304, label %land.lhs.true.305, label %if.end.335

land.lhs.true.305:                                ; preds = %land.lhs.true.302
  br i1 false, label %if.then.306, label %if.end.335

if.then.306:                                      ; preds = %land.lhs.true.305
  %187 = load %struct.iv_class*, %struct.iv_class** %bl.addr, align 8
  %biv308 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %187, i32 0, i32 2
  %188 = load %struct.induction*, %struct.induction** %biv308, align 8
  %189 = load %struct.induction*, %struct.induction** %v, align 8
  %190 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call309 = call i32 @biv_elimination_giv_has_0_offset(%struct.induction* %188, %struct.induction* %189, %struct.rtx_def* %190)
  %tobool310 = icmp ne i32 %call309, 0
  br i1 %tobool310, label %if.end.312, label %if.then.311

if.then.311:                                      ; preds = %if.then.306
  br label %for.inc.336

if.end.312:                                       ; preds = %if.then.306
  %191 = load i32, i32* %eliminate_p.addr, align 4
  %tobool313 = icmp ne i32 %191, 0
  br i1 %tobool313, label %if.end.315, label %if.then.314

if.then.314:                                      ; preds = %if.end.312
  store i32 1, i32* %retval
  br label %return

if.end.315:                                       ; preds = %if.end.312
  %192 = load i32, i32* %mode, align 4
  %call316 = call %struct.rtx_def* @gen_reg_rtx(i32 %192)
  store %struct.rtx_def* %call316, %struct.rtx_def** %tem307, align 8
  %193 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %194 = load i32, i32* %arg_operand, align 4
  %sub317 = sub nsw i32 1, %194
  %idxprom318 = sext i32 %sub317 to i64
  %195 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld319 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %195, i32 0, i32 1
  %arrayidx320 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld319, i32 0, i64 %idxprom318
  %rtx321 = bitcast %union.rtunion_def* %arrayidx320 to %struct.rtx_def**
  %196 = load %struct.induction*, %struct.induction** %v, align 8
  %new_reg322 = getelementptr inbounds %struct.induction, %struct.induction* %196, i32 0, i32 1
  %197 = load %struct.rtx_def*, %struct.rtx_def** %new_reg322, align 8
  %call323 = call i32 @validate_change(%struct.rtx_def* %193, %struct.rtx_def** %rtx321, %struct.rtx_def* %197, i32 1)
  %198 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %199 = load %struct.rtx_def*, %struct.rtx_def** %arg, align 8
  %200 = load %struct.induction*, %struct.induction** %v, align 8
  %mult_val324 = getelementptr inbounds %struct.induction, %struct.induction* %200, i32 0, i32 8
  %201 = load %struct.rtx_def*, %struct.rtx_def** %mult_val324, align 8
  %202 = load %struct.induction*, %struct.induction** %v, align 8
  %add_val325 = getelementptr inbounds %struct.induction, %struct.induction* %202, i32 0, i32 9
  %203 = load %struct.rtx_def*, %struct.rtx_def** %add_val325, align 8
  %204 = load %struct.rtx_def*, %struct.rtx_def** %tem307, align 8
  %205 = load %struct.basic_block_def*, %struct.basic_block_def** %where_bb.addr, align 8
  %206 = load %struct.rtx_def*, %struct.rtx_def** %where_insn.addr, align 8
  call void @loop_iv_add_mult_emit_before(%struct.loop* %198, %struct.rtx_def* %199, %struct.rtx_def* %201, %struct.rtx_def* %203, %struct.rtx_def* %204, %struct.basic_block_def* %205, %struct.rtx_def* %206)
  %207 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %208 = load i32, i32* %arg_operand, align 4
  %idxprom326 = sext i32 %208 to i64
  %209 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld327 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %209, i32 0, i32 1
  %arrayidx328 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld327, i32 0, i64 %idxprom326
  %rtx329 = bitcast %union.rtunion_def* %arrayidx328 to %struct.rtx_def**
  %210 = load %struct.rtx_def*, %struct.rtx_def** %tem307, align 8
  %call330 = call i32 @validate_change(%struct.rtx_def* %207, %struct.rtx_def** %rtx329, %struct.rtx_def* %210, i32 1)
  %call331 = call i32 @apply_change_group()
  %tobool332 = icmp ne i32 %call331, 0
  br i1 %tobool332, label %if.then.333, label %if.end.334

if.then.333:                                      ; preds = %if.end.315
  store i32 1, i32* %retval
  br label %return

if.end.334:                                       ; preds = %if.end.315
  br label %if.end.335

if.end.335:                                       ; preds = %if.end.334, %land.lhs.true.305, %land.lhs.true.302, %land.lhs.true.295, %land.lhs.true.288, %land.lhs.true.281, %land.lhs.true.275, %for.body.270
  br label %for.inc.336

for.inc.336:                                      ; preds = %if.end.335, %if.then.311
  %211 = load %struct.induction*, %struct.induction** %v, align 8
  %next_iv337 = getelementptr inbounds %struct.induction, %struct.induction* %211, i32 0, i32 17
  %212 = load %struct.induction*, %struct.induction** %next_iv337, align 8
  store %struct.induction* %212, %struct.induction** %v, align 8
  br label %for.cond.268

for.end.338:                                      ; preds = %for.cond.268
  br label %if.end.339

if.end.339:                                       ; preds = %for.end.338, %if.then.263
  br label %if.end.340

if.end.340:                                       ; preds = %if.end.339, %lor.lhs.false.259
  br label %if.end.341

if.end.341:                                       ; preds = %if.end.340, %for.end.254
  store i32 0, i32* %retval
  br label %return

sw.bb.342:                                        ; preds = %entry
  %213 = load %struct.iv_class*, %struct.iv_class** %bl.addr, align 8
  %giv343 = getelementptr inbounds %struct.iv_class, %struct.iv_class* %213, i32 0, i32 4
  %214 = load %struct.induction*, %struct.induction** %giv343, align 8
  store %struct.induction* %214, %struct.induction** %v, align 8
  br label %for.cond.344

for.cond.344:                                     ; preds = %for.inc.356, %sw.bb.342
  %215 = load %struct.induction*, %struct.induction** %v, align 8
  %tobool345 = icmp ne %struct.induction* %215, null
  br i1 %tobool345, label %for.body.346, label %for.end.358

for.body.346:                                     ; preds = %for.cond.344
  %216 = load %struct.induction*, %struct.induction** %v, align 8
  %giv_type347 = getelementptr inbounds %struct.induction, %struct.induction* %216, i32 0, i32 3
  %217 = load i32, i32* %giv_type347, align 4
  %cmp348 = icmp eq i32 %217, 0
  br i1 %cmp348, label %land.lhs.true.349, label %if.end.355

land.lhs.true.349:                                ; preds = %for.body.346
  %218 = load %struct.induction*, %struct.induction** %v, align 8
  %location = getelementptr inbounds %struct.induction, %struct.induction* %218, i32 0, i32 5
  %219 = load %struct.rtx_def**, %struct.rtx_def*** %location, align 8
  %220 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld350 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %220, i32 0, i32 1
  %arrayidx351 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld350, i32 0, i64 0
  %rtx352 = bitcast %union.rtunion_def* %arrayidx351 to %struct.rtx_def**
  %cmp353 = icmp eq %struct.rtx_def** %219, %rtx352
  br i1 %cmp353, label %if.then.354, label %if.end.355

if.then.354:                                      ; preds = %land.lhs.true.349
  store i32 1, i32* %retval
  br label %return

if.end.355:                                       ; preds = %land.lhs.true.349, %for.body.346
  br label %for.inc.356

for.inc.356:                                      ; preds = %if.end.355
  %221 = load %struct.induction*, %struct.induction** %v, align 8
  %next_iv357 = getelementptr inbounds %struct.induction, %struct.induction* %221, i32 0, i32 17
  %222 = load %struct.induction*, %struct.induction** %next_iv357, align 8
  store %struct.induction* %222, %struct.induction** %v, align 8
  br label %for.cond.344

for.end.358:                                      ; preds = %for.cond.344
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %for.end.358, %if.else.32, %for.end
  %223 = load i32, i32* %code, align 4
  %idxprom359 = sext i32 %223 to i64
  %arrayidx360 = getelementptr inbounds [153 x i8*], [153 x i8*]* @rtx_format, i32 0, i64 %idxprom359
  %224 = load i8*, i8** %arrayidx360, align 8
  store i8* %224, i8** %fmt, align 8
  %225 = load i32, i32* %code, align 4
  %idxprom361 = sext i32 %225 to i64
  %arrayidx362 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_length, i32 0, i64 %idxprom361
  %226 = load i8, i8* %arrayidx362, align 1
  %conv = zext i8 %226 to i32
  %sub363 = sub nsw i32 %conv, 1
  store i32 %sub363, i32* %i, align 4
  br label %for.cond.364

for.cond.364:                                     ; preds = %for.inc.402, %sw.epilog
  %227 = load i32, i32* %i, align 4
  %cmp365 = icmp sge i32 %227, 0
  br i1 %cmp365, label %for.body.367, label %for.end.404

for.body.367:                                     ; preds = %for.cond.364
  %228 = load i32, i32* %i, align 4
  %idxprom368 = sext i32 %228 to i64
  %229 = load i8*, i8** %fmt, align 8
  %arrayidx369 = getelementptr inbounds i8, i8* %229, i64 %idxprom368
  %230 = load i8, i8* %arrayidx369, align 1
  %conv370 = sext i8 %230 to i32
  switch i32 %conv370, label %sw.epilog.401 [
    i32 101, label %sw.bb.371
    i32 69, label %sw.bb.380
  ]

sw.bb.371:                                        ; preds = %for.body.367
  %231 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %232 = load i32, i32* %i, align 4
  %idxprom372 = sext i32 %232 to i64
  %233 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld373 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %233, i32 0, i32 1
  %arrayidx374 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld373, i32 0, i64 %idxprom372
  %rtx375 = bitcast %union.rtunion_def* %arrayidx374 to %struct.rtx_def**
  %234 = load %struct.rtx_def*, %struct.rtx_def** %rtx375, align 8
  %235 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %236 = load %struct.iv_class*, %struct.iv_class** %bl.addr, align 8
  %237 = load i32, i32* %eliminate_p.addr, align 4
  %238 = load %struct.basic_block_def*, %struct.basic_block_def** %where_bb.addr, align 8
  %239 = load %struct.rtx_def*, %struct.rtx_def** %where_insn.addr, align 8
  %call376 = call i32 @maybe_eliminate_biv_1(%struct.loop* %231, %struct.rtx_def* %234, %struct.rtx_def* %235, %struct.iv_class* %236, i32 %237, %struct.basic_block_def* %238, %struct.rtx_def* %239)
  %tobool377 = icmp ne i32 %call376, 0
  br i1 %tobool377, label %if.end.379, label %if.then.378

if.then.378:                                      ; preds = %sw.bb.371
  store i32 0, i32* %retval
  br label %return

if.end.379:                                       ; preds = %sw.bb.371
  br label %sw.epilog.401

sw.bb.380:                                        ; preds = %for.body.367
  %240 = load i32, i32* %i, align 4
  %idxprom381 = sext i32 %240 to i64
  %241 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld382 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %241, i32 0, i32 1
  %arrayidx383 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld382, i32 0, i64 %idxprom381
  %rtvec = bitcast %union.rtunion_def* %arrayidx383 to %struct.rtvec_def**
  %242 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec, align 8
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %242, i32 0, i32 0
  %243 = load i32, i32* %num_elem, align 4
  %sub384 = sub nsw i32 %243, 1
  store i32 %sub384, i32* %j, align 4
  br label %for.cond.385

for.cond.385:                                     ; preds = %for.inc.399, %sw.bb.380
  %244 = load i32, i32* %j, align 4
  %cmp386 = icmp sge i32 %244, 0
  br i1 %cmp386, label %for.body.388, label %for.end.400

for.body.388:                                     ; preds = %for.cond.385
  %245 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %246 = load i32, i32* %j, align 4
  %idxprom389 = sext i32 %246 to i64
  %247 = load i32, i32* %i, align 4
  %idxprom390 = sext i32 %247 to i64
  %248 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld391 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %248, i32 0, i32 1
  %arrayidx392 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld391, i32 0, i64 %idxprom390
  %rtvec393 = bitcast %union.rtunion_def* %arrayidx392 to %struct.rtvec_def**
  %249 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec393, align 8
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %249, i32 0, i32 1
  %arrayidx394 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i32 0, i64 %idxprom389
  %250 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx394, align 8
  %251 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %252 = load %struct.iv_class*, %struct.iv_class** %bl.addr, align 8
  %253 = load i32, i32* %eliminate_p.addr, align 4
  %254 = load %struct.basic_block_def*, %struct.basic_block_def** %where_bb.addr, align 8
  %255 = load %struct.rtx_def*, %struct.rtx_def** %where_insn.addr, align 8
  %call395 = call i32 @maybe_eliminate_biv_1(%struct.loop* %245, %struct.rtx_def* %250, %struct.rtx_def* %251, %struct.iv_class* %252, i32 %253, %struct.basic_block_def* %254, %struct.rtx_def* %255)
  %tobool396 = icmp ne i32 %call395, 0
  br i1 %tobool396, label %if.end.398, label %if.then.397

if.then.397:                                      ; preds = %for.body.388
  store i32 0, i32* %retval
  br label %return

if.end.398:                                       ; preds = %for.body.388
  br label %for.inc.399

for.inc.399:                                      ; preds = %if.end.398
  %256 = load i32, i32* %j, align 4
  %dec = add nsw i32 %256, -1
  store i32 %dec, i32* %j, align 4
  br label %for.cond.385

for.end.400:                                      ; preds = %for.cond.385
  br label %sw.epilog.401

sw.epilog.401:                                    ; preds = %for.body.367, %for.end.400, %if.end.379
  br label %for.inc.402

for.inc.402:                                      ; preds = %sw.epilog.401
  %257 = load i32, i32* %i, align 4
  %dec403 = add nsw i32 %257, -1
  store i32 %dec403, i32* %i, align 4
  br label %for.cond.364

for.end.404:                                      ; preds = %for.cond.364
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %for.end.404, %if.then.397, %if.then.378, %if.then.354, %if.end.341, %if.then.333, %if.then.314, %if.then.249, %if.then.230, %if.then.177, %if.then.128, %if.then.13, %if.then.5, %if.end, %if.then
  %258 = load i32, i32* %retval
  ret i32 %258
}

; Function Attrs: nounwind uwtable
define internal i32 @biv_elimination_giv_has_0_offset(%struct.induction* %biv, %struct.induction* %giv, %struct.rtx_def* %insn) #0 {
entry:
  %retval = alloca i32, align 4
  %biv.addr = alloca %struct.induction*, align 8
  %giv.addr = alloca %struct.induction*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.induction* %biv, %struct.induction** %biv.addr, align 8
  store %struct.induction* %giv, %struct.induction** %giv.addr, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  %0 = load %struct.induction*, %struct.induction** %giv.addr, align 8
  %auto_inc_opt = getelementptr inbounds %struct.induction, %struct.induction* %0, i32 0, i32 13
  %bf.load = load i16, i16* %auto_inc_opt, align 4
  %bf.lshr = lshr i16 %bf.load, 8
  %bf.clear = and i16 %bf.lshr, 1
  %bf.cast = zext i16 %bf.clear to i32
  %tobool = icmp ne i32 %bf.cast, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.induction*, %struct.induction** %giv.addr, align 8
  %insn1 = getelementptr inbounds %struct.induction, %struct.induction* %1, i32 0, i32 0
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn1, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call = call i32 @loop_insn_first_p(%struct.rtx_def* %2, %struct.rtx_def* %3)
  %tobool2 = icmp ne i32 %call, 0
  br i1 %tobool2, label %land.lhs.true.3, label %lor.lhs.false

land.lhs.true.3:                                  ; preds = %land.lhs.true
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %5 = load %struct.induction*, %struct.induction** %biv.addr, align 8
  %insn4 = getelementptr inbounds %struct.induction, %struct.induction* %5, i32 0, i32 0
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn4, align 8
  %call5 = call i32 @loop_insn_first_p(%struct.rtx_def* %4, %struct.rtx_def* %6)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.3, %land.lhs.true
  %7 = load %struct.induction*, %struct.induction** %biv.addr, align 8
  %insn7 = getelementptr inbounds %struct.induction, %struct.induction* %7, i32 0, i32 0
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn7, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call8 = call i32 @loop_insn_first_p(%struct.rtx_def* %8, %struct.rtx_def* %9)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %land.lhs.true.10, label %if.end

land.lhs.true.10:                                 ; preds = %lor.lhs.false
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %11 = load %struct.induction*, %struct.induction** %giv.addr, align 8
  %insn11 = getelementptr inbounds %struct.induction, %struct.induction* %11, i32 0, i32 0
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn11, align 8
  %call12 = call i32 @loop_insn_first_p(%struct.rtx_def* %10, %struct.rtx_def* %12)
  %tobool13 = icmp ne i32 %call12, 0
  br i1 %tobool13, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true.10, %land.lhs.true.3
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true.10, %lor.lhs.false, %entry
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %13 = load i32, i32* %retval
  ret i32 %13
}

; Function Attrs: nounwind uwtable
define internal void @invalidate_loops_containing_label(%struct.rtx_def* %label) #0 {
entry:
  %label.addr = alloca %struct.rtx_def*, align 8
  %loop = alloca %struct.loop*, align 8
  store %struct.rtx_def* %label, %struct.rtx_def** %label.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %label.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtint = bitcast %union.rtunion_def* %arrayidx to i32*
  %1 = load i32, i32* %rtint, align 4
  %idxprom = sext i32 %1 to i64
  %2 = load %struct.loop**, %struct.loop*** @uid_loop, align 8
  %arrayidx1 = getelementptr inbounds %struct.loop*, %struct.loop** %2, i64 %idxprom
  %3 = load %struct.loop*, %struct.loop** %arrayidx1, align 8
  store %struct.loop* %3, %struct.loop** %loop, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load %struct.loop*, %struct.loop** %loop, align 8
  %tobool = icmp ne %struct.loop* %4, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct.loop*, %struct.loop** %loop, align 8
  %invalid = getelementptr inbounds %struct.loop, %struct.loop* %5, i32 0, i32 21
  store i32 1, i32* %invalid, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load %struct.loop*, %struct.loop** %loop, align 8
  %outer = getelementptr inbounds %struct.loop, %struct.loop* %6, i32 0, i32 17
  %7 = load %struct.loop*, %struct.loop** %outer, align 8
  store %struct.loop* %7, %struct.loop** %loop, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare void @for_each_eh_label(void (%struct.rtx_def*)*) #1

; Function Attrs: nounwind uwtable
define internal void @mark_loop_jump(%struct.rtx_def* %x, %struct.loop* %loop) #0 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %dest_loop = alloca %struct.loop*, align 8
  %outer_loop = alloca %struct.loop*, align 8
  %i = alloca i32, align 4
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %sw.default [
    i32 59, label %sw.bb
    i32 48, label %sw.bb
    i32 49, label %sw.bb
    i32 61, label %sw.bb
    i32 66, label %sw.bb
    i32 54, label %sw.bb
    i32 55, label %sw.bb
    i32 51, label %sw.bb
    i32 58, label %sw.bb.1
    i32 75, label %sw.bb.2
    i32 76, label %sw.bb.2
    i32 78, label %sw.bb.2
    i32 135, label %sw.bb.9
    i32 120, label %sw.bb.13
    i32 121, label %sw.bb.13
    i32 67, label %sw.bb.17
    i32 47, label %sw.bb.71
    i32 72, label %sw.bb.81
    i32 39, label %sw.bb.88
    i32 44, label %sw.bb.88
    i32 45, label %sw.bb.102
  ]

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  br label %return

sw.bb.1:                                          ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %3 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %4 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  call void @mark_loop_jump(%struct.rtx_def* %3, %struct.loop* %4)
  br label %return

sw.bb.2:                                          ; preds = %entry, %entry, %entry
  %5 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld3 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1
  %arrayidx4 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3, i32 0, i64 0
  %rtx5 = bitcast %union.rtunion_def* %arrayidx4 to %struct.rtx_def**
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rtx5, align 8
  %7 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  call void @mark_loop_jump(%struct.rtx_def* %6, %struct.loop* %7)
  %8 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld6 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld6, i32 0, i64 1
  %rtx8 = bitcast %union.rtunion_def* %arrayidx7 to %struct.rtx_def**
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rtx8, align 8
  %10 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  call void @mark_loop_jump(%struct.rtx_def* %9, %struct.loop* %10)
  br label %return

sw.bb.9:                                          ; preds = %entry
  %11 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld10 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1
  %arrayidx11 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld10, i32 0, i64 1
  %rtx12 = bitcast %union.rtunion_def* %arrayidx11 to %struct.rtx_def**
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rtx12, align 8
  %13 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  call void @mark_loop_jump(%struct.rtx_def* %12, %struct.loop* %13)
  br label %return

sw.bb.13:                                         ; preds = %entry, %entry
  %14 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld14 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1
  %arrayidx15 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld14, i32 0, i64 0
  %rtx16 = bitcast %union.rtunion_def* %arrayidx15 to %struct.rtx_def**
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rtx16, align 8
  %16 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  call void @mark_loop_jump(%struct.rtx_def* %15, %struct.loop* %16)
  br label %return

sw.bb.17:                                         ; preds = %entry
  %17 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld18 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1
  %arrayidx19 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld18, i32 0, i64 0
  %rtx20 = bitcast %union.rtunion_def* %arrayidx19 to %struct.rtx_def**
  %18 = load %struct.rtx_def*, %struct.rtx_def** %rtx20, align 8
  %fld21 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1
  %arrayidx22 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld21, i32 0, i64 0
  %rtint = bitcast %union.rtunion_def* %arrayidx22 to i32*
  %19 = load i32, i32* %rtint, align 4
  %idxprom = sext i32 %19 to i64
  %20 = load %struct.loop**, %struct.loop*** @uid_loop, align 8
  %arrayidx23 = getelementptr inbounds %struct.loop*, %struct.loop** %20, i64 %idxprom
  %21 = load %struct.loop*, %struct.loop** %arrayidx23, align 8
  store %struct.loop* %21, %struct.loop** %dest_loop, align 8
  %22 = load %struct.loop*, %struct.loop** %dest_loop, align 8
  %tobool = icmp ne %struct.loop* %22, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %sw.bb.17
  %23 = load %struct.loop*, %struct.loop** %dest_loop, align 8
  store %struct.loop* %23, %struct.loop** %outer_loop, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %24 = load %struct.loop*, %struct.loop** %outer_loop, align 8
  %tobool24 = icmp ne %struct.loop* %24, null
  br i1 %tobool24, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %25 = load %struct.loop*, %struct.loop** %outer_loop, align 8
  %26 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %cmp = icmp eq %struct.loop* %25, %26
  br i1 %cmp, label %if.then.25, label %if.end

if.then.25:                                       ; preds = %for.body
  br label %for.end

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %27 = load %struct.loop*, %struct.loop** %outer_loop, align 8
  %outer = getelementptr inbounds %struct.loop, %struct.loop* %27, i32 0, i32 17
  %28 = load %struct.loop*, %struct.loop** %outer, align 8
  store %struct.loop* %28, %struct.loop** %outer_loop, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then.25, %for.cond
  br label %if.end.26

if.else:                                          ; preds = %sw.bb.17
  store %struct.loop* null, %struct.loop** %outer_loop, align 8
  br label %if.end.26

if.end.26:                                        ; preds = %if.else, %for.end
  %29 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %tobool27 = icmp ne %struct.loop* %29, null
  br i1 %tobool27, label %land.lhs.true, label %if.end.43

land.lhs.true:                                    ; preds = %if.end.26
  %30 = load %struct.loop*, %struct.loop** %outer_loop, align 8
  %tobool28 = icmp ne %struct.loop* %30, null
  br i1 %tobool28, label %if.end.43, label %if.then.29

if.then.29:                                       ; preds = %land.lhs.true
  %31 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %32 = bitcast %struct.rtx_def* %31 to i32*
  %bf.load30 = load i32, i32* %32, align 8
  %bf.clear31 = and i32 %bf.load30, -268435457
  %bf.set = or i32 %bf.clear31, 268435456
  store i32 %bf.set, i32* %32, align 8
  %33 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %exit_labels = getelementptr inbounds %struct.loop, %struct.loop* %33, i32 0, i32 31
  %34 = load %struct.rtx_def*, %struct.rtx_def** %exit_labels, align 8
  %35 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld32 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %35, i32 0, i32 1
  %arrayidx33 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld32, i32 0, i64 1
  %rtx34 = bitcast %union.rtunion_def* %arrayidx33 to %struct.rtx_def**
  store %struct.rtx_def* %34, %struct.rtx_def** %rtx34, align 8
  %36 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %37 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %exit_labels35 = getelementptr inbounds %struct.loop, %struct.loop* %37, i32 0, i32 31
  store %struct.rtx_def* %36, %struct.rtx_def** %exit_labels35, align 8
  %38 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  store %struct.loop* %38, %struct.loop** %outer_loop, align 8
  br label %for.cond.36

for.cond.36:                                      ; preds = %for.inc.40, %if.then.29
  %39 = load %struct.loop*, %struct.loop** %outer_loop, align 8
  %tobool37 = icmp ne %struct.loop* %39, null
  br i1 %tobool37, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond.36
  %40 = load %struct.loop*, %struct.loop** %outer_loop, align 8
  %41 = load %struct.loop*, %struct.loop** %dest_loop, align 8
  %cmp38 = icmp ne %struct.loop* %40, %41
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond.36
  %42 = phi i1 [ false, %for.cond.36 ], [ %cmp38, %land.rhs ]
  br i1 %42, label %for.body.39, label %for.end.42

for.body.39:                                      ; preds = %land.end
  %43 = load %struct.loop*, %struct.loop** %outer_loop, align 8
  %exit_count = getelementptr inbounds %struct.loop, %struct.loop* %43, i32 0, i32 32
  %44 = load i32, i32* %exit_count, align 4
  %inc = add nsw i32 %44, 1
  store i32 %inc, i32* %exit_count, align 4
  br label %for.inc.40

for.inc.40:                                       ; preds = %for.body.39
  %45 = load %struct.loop*, %struct.loop** %outer_loop, align 8
  %outer41 = getelementptr inbounds %struct.loop, %struct.loop* %45, i32 0, i32 17
  %46 = load %struct.loop*, %struct.loop** %outer41, align 8
  store %struct.loop* %46, %struct.loop** %outer_loop, align 8
  br label %for.cond.36

for.end.42:                                       ; preds = %land.end
  br label %if.end.43

if.end.43:                                        ; preds = %for.end.42, %land.lhs.true, %if.end.26
  %47 = load %struct.loop*, %struct.loop** %dest_loop, align 8
  %tobool44 = icmp ne %struct.loop* %47, null
  br i1 %tobool44, label %if.end.46, label %if.then.45

if.then.45:                                       ; preds = %if.end.43
  br label %return

if.end.46:                                        ; preds = %if.end.43
  br label %for.cond.47

for.cond.47:                                      ; preds = %for.inc.68, %if.end.46
  %48 = load %struct.loop*, %struct.loop** %dest_loop, align 8
  %tobool48 = icmp ne %struct.loop* %48, null
  br i1 %tobool48, label %for.body.49, label %for.end.70

for.body.49:                                      ; preds = %for.cond.47
  %49 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  store %struct.loop* %49, %struct.loop** %outer_loop, align 8
  br label %for.cond.50

for.cond.50:                                      ; preds = %for.inc.56, %for.body.49
  %50 = load %struct.loop*, %struct.loop** %outer_loop, align 8
  %tobool51 = icmp ne %struct.loop* %50, null
  br i1 %tobool51, label %for.body.52, label %for.end.58

for.body.52:                                      ; preds = %for.cond.50
  %51 = load %struct.loop*, %struct.loop** %dest_loop, align 8
  %52 = load %struct.loop*, %struct.loop** %outer_loop, align 8
  %cmp53 = icmp eq %struct.loop* %51, %52
  br i1 %cmp53, label %if.then.54, label %if.end.55

if.then.54:                                       ; preds = %for.body.52
  br label %return

if.end.55:                                        ; preds = %for.body.52
  br label %for.inc.56

for.inc.56:                                       ; preds = %if.end.55
  %53 = load %struct.loop*, %struct.loop** %outer_loop, align 8
  %outer57 = getelementptr inbounds %struct.loop, %struct.loop* %53, i32 0, i32 17
  %54 = load %struct.loop*, %struct.loop** %outer57, align 8
  store %struct.loop* %54, %struct.loop** %outer_loop, align 8
  br label %for.cond.50

for.end.58:                                       ; preds = %for.cond.50
  %55 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %tobool59 = icmp ne %struct._IO_FILE* %55, null
  br i1 %tobool59, label %land.lhs.true.60, label %if.end.66

land.lhs.true.60:                                 ; preds = %for.end.58
  %56 = load %struct.loop*, %struct.loop** %dest_loop, align 8
  %invalid = getelementptr inbounds %struct.loop, %struct.loop* %56, i32 0, i32 21
  %57 = load i32, i32* %invalid, align 4
  %tobool61 = icmp ne i32 %57, 0
  br i1 %tobool61, label %if.end.66, label %if.then.62

if.then.62:                                       ; preds = %land.lhs.true.60
  %58 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %59 = load %struct.loop*, %struct.loop** %dest_loop, align 8
  %start = getelementptr inbounds %struct.loop, %struct.loop* %59, i32 0, i32 26
  %60 = load %struct.rtx_def*, %struct.rtx_def** %start, align 8
  %fld63 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %60, i32 0, i32 1
  %arrayidx64 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld63, i32 0, i64 0
  %rtint65 = bitcast %union.rtunion_def* %arrayidx64 to i32*
  %61 = load i32, i32* %rtint65, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %58, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.73, i32 0, i32 0), i32 %61)
  br label %if.end.66

if.end.66:                                        ; preds = %if.then.62, %land.lhs.true.60, %for.end.58
  %62 = load %struct.loop*, %struct.loop** %dest_loop, align 8
  %invalid67 = getelementptr inbounds %struct.loop, %struct.loop* %62, i32 0, i32 21
  store i32 1, i32* %invalid67, align 4
  br label %for.inc.68

for.inc.68:                                       ; preds = %if.end.66
  %63 = load %struct.loop*, %struct.loop** %dest_loop, align 8
  %outer69 = getelementptr inbounds %struct.loop, %struct.loop* %63, i32 0, i32 17
  %64 = load %struct.loop*, %struct.loop** %outer69, align 8
  store %struct.loop* %64, %struct.loop** %dest_loop, align 8
  br label %for.cond.47

for.end.70:                                       ; preds = %for.cond.47
  br label %return

sw.bb.71:                                         ; preds = %entry
  %65 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld72 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %65, i32 0, i32 1
  %arrayidx73 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld72, i32 0, i64 0
  %rtx74 = bitcast %union.rtunion_def* %arrayidx73 to %struct.rtx_def**
  %66 = load %struct.rtx_def*, %struct.rtx_def** %rtx74, align 8
  %67 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 0), align 8
  %cmp75 = icmp eq %struct.rtx_def* %66, %67
  br i1 %cmp75, label %if.then.76, label %if.end.80

if.then.76:                                       ; preds = %sw.bb.71
  %68 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld77 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %68, i32 0, i32 1
  %arrayidx78 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld77, i32 0, i64 1
  %rtx79 = bitcast %union.rtunion_def* %arrayidx78 to %struct.rtx_def**
  %69 = load %struct.rtx_def*, %struct.rtx_def** %rtx79, align 8
  %70 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  call void @mark_loop_jump(%struct.rtx_def* %69, %struct.loop* %70)
  br label %if.end.80

if.end.80:                                        ; preds = %if.then.76, %sw.bb.71
  br label %return

sw.bb.81:                                         ; preds = %entry
  %71 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld82 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %71, i32 0, i32 1
  %arrayidx83 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld82, i32 0, i64 1
  %rtx84 = bitcast %union.rtunion_def* %arrayidx83 to %struct.rtx_def**
  %72 = load %struct.rtx_def*, %struct.rtx_def** %rtx84, align 8
  %73 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  call void @mark_loop_jump(%struct.rtx_def* %72, %struct.loop* %73)
  %74 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld85 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %74, i32 0, i32 1
  %arrayidx86 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld85, i32 0, i64 2
  %rtx87 = bitcast %union.rtunion_def* %arrayidx86 to %struct.rtx_def**
  %75 = load %struct.rtx_def*, %struct.rtx_def** %rtx87, align 8
  %76 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  call void @mark_loop_jump(%struct.rtx_def* %75, %struct.loop* %76)
  br label %return

sw.bb.88:                                         ; preds = %entry, %entry
  store i32 0, i32* %i, align 4
  br label %for.cond.89

for.cond.89:                                      ; preds = %for.inc.99, %sw.bb.88
  %77 = load i32, i32* %i, align 4
  %78 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld90 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %78, i32 0, i32 1
  %arrayidx91 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld90, i32 0, i64 0
  %rtvec = bitcast %union.rtunion_def* %arrayidx91 to %struct.rtvec_def**
  %79 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec, align 8
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %79, i32 0, i32 0
  %80 = load i32, i32* %num_elem, align 4
  %cmp92 = icmp slt i32 %77, %80
  br i1 %cmp92, label %for.body.93, label %for.end.101

for.body.93:                                      ; preds = %for.cond.89
  %81 = load i32, i32* %i, align 4
  %idxprom94 = sext i32 %81 to i64
  %82 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld95 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %82, i32 0, i32 1
  %arrayidx96 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld95, i32 0, i64 0
  %rtvec97 = bitcast %union.rtunion_def* %arrayidx96 to %struct.rtvec_def**
  %83 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec97, align 8
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %83, i32 0, i32 1
  %arrayidx98 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i32 0, i64 %idxprom94
  %84 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx98, align 8
  %85 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  call void @mark_loop_jump(%struct.rtx_def* %84, %struct.loop* %85)
  br label %for.inc.99

for.inc.99:                                       ; preds = %for.body.93
  %86 = load i32, i32* %i, align 4
  %inc100 = add nsw i32 %86, 1
  store i32 %inc100, i32* %i, align 4
  br label %for.cond.89

for.end.101:                                      ; preds = %for.cond.89
  br label %return

sw.bb.102:                                        ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond.103

for.cond.103:                                     ; preds = %for.inc.116, %sw.bb.102
  %87 = load i32, i32* %i, align 4
  %88 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld104 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %88, i32 0, i32 1
  %arrayidx105 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld104, i32 0, i64 1
  %rtvec106 = bitcast %union.rtunion_def* %arrayidx105 to %struct.rtvec_def**
  %89 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec106, align 8
  %num_elem107 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %89, i32 0, i32 0
  %90 = load i32, i32* %num_elem107, align 4
  %cmp108 = icmp slt i32 %87, %90
  br i1 %cmp108, label %for.body.109, label %for.end.118

for.body.109:                                     ; preds = %for.cond.103
  %91 = load i32, i32* %i, align 4
  %idxprom110 = sext i32 %91 to i64
  %92 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld111 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %92, i32 0, i32 1
  %arrayidx112 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld111, i32 0, i64 1
  %rtvec113 = bitcast %union.rtunion_def* %arrayidx112 to %struct.rtvec_def**
  %93 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec113, align 8
  %elem114 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %93, i32 0, i32 1
  %arrayidx115 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem114, i32 0, i64 %idxprom110
  %94 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx115, align 8
  %95 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  call void @mark_loop_jump(%struct.rtx_def* %94, %struct.loop* %95)
  br label %for.inc.116

for.inc.116:                                      ; preds = %for.body.109
  %96 = load i32, i32* %i, align 4
  %inc117 = add nsw i32 %96, 1
  store i32 %inc117, i32* %i, align 4
  br label %for.cond.103

for.end.118:                                      ; preds = %for.cond.103
  br label %return

sw.default:                                       ; preds = %entry
  %97 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %tobool119 = icmp ne %struct.loop* %97, null
  br i1 %tobool119, label %if.then.120, label %if.end.139

if.then.120:                                      ; preds = %sw.default
  %98 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  store %struct.loop* %98, %struct.loop** %outer_loop, align 8
  br label %for.cond.121

for.cond.121:                                     ; preds = %for.inc.136, %if.then.120
  %99 = load %struct.loop*, %struct.loop** %outer_loop, align 8
  %tobool122 = icmp ne %struct.loop* %99, null
  br i1 %tobool122, label %for.body.123, label %for.end.138

for.body.123:                                     ; preds = %for.cond.121
  %100 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %tobool124 = icmp ne %struct._IO_FILE* %100, null
  br i1 %tobool124, label %land.lhs.true.125, label %if.end.134

land.lhs.true.125:                                ; preds = %for.body.123
  %101 = load %struct.loop*, %struct.loop** %outer_loop, align 8
  %invalid126 = getelementptr inbounds %struct.loop, %struct.loop* %101, i32 0, i32 21
  %102 = load i32, i32* %invalid126, align 4
  %tobool127 = icmp ne i32 %102, 0
  br i1 %tobool127, label %if.end.134, label %if.then.128

if.then.128:                                      ; preds = %land.lhs.true.125
  %103 = load %struct._IO_FILE*, %struct._IO_FILE** @loop_dump_stream, align 8
  %104 = load %struct.loop*, %struct.loop** %outer_loop, align 8
  %start129 = getelementptr inbounds %struct.loop, %struct.loop* %104, i32 0, i32 26
  %105 = load %struct.rtx_def*, %struct.rtx_def** %start129, align 8
  %fld130 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %105, i32 0, i32 1
  %arrayidx131 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld130, i32 0, i64 0
  %rtint132 = bitcast %union.rtunion_def* %arrayidx131 to i32*
  %106 = load i32, i32* %rtint132, align 4
  %call133 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %103, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.74, i32 0, i32 0), i32 %106)
  br label %if.end.134

if.end.134:                                       ; preds = %if.then.128, %land.lhs.true.125, %for.body.123
  %107 = load %struct.loop*, %struct.loop** %outer_loop, align 8
  %invalid135 = getelementptr inbounds %struct.loop, %struct.loop* %107, i32 0, i32 21
  store i32 1, i32* %invalid135, align 4
  br label %for.inc.136

for.inc.136:                                      ; preds = %if.end.134
  %108 = load %struct.loop*, %struct.loop** %outer_loop, align 8
  %outer137 = getelementptr inbounds %struct.loop, %struct.loop* %108, i32 0, i32 17
  %109 = load %struct.loop*, %struct.loop** %outer137, align 8
  store %struct.loop* %109, %struct.loop** %outer_loop, align 8
  br label %for.cond.121

for.end.138:                                      ; preds = %for.cond.121
  br label %if.end.139

if.end.139:                                       ; preds = %for.end.138, %sw.default
  br label %return

return:                                           ; preds = %if.end.139, %for.end.118, %for.end.101, %sw.bb.81, %if.end.80, %for.end.70, %if.then.54, %if.then.45, %sw.bb.13, %sw.bb.9, %sw.bb.2, %sw.bb.1, %sw.bb
  ret void
}

declare i32 @insns_safe_to_move_p(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def**) #1

declare %struct.rtx_def* @get_label_after(%struct.rtx_def*) #1

declare i32 @invert_jump(%struct.rtx_def*, %struct.rtx_def*, i32) #1

declare %struct.rtx_def* @gen_jump(%struct.rtx_def*) #1

declare %struct.rtx_def* @emit_barrier_before(%struct.rtx_def*) #1

declare zeroext i1 @squeeze_notes(%struct.rtx_def**, %struct.rtx_def**) #1

declare void @reorder_insns(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #1

declare void @record_base_value(i32, %struct.rtx_def*, i32) #1

declare i32 @computed_jump_p(%struct.rtx_def*) #1

declare i32 @fputs(i8*, %struct._IO_FILE*) #1

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn }
attributes #7 = { nounwind readonly }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
