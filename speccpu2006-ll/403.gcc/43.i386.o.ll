; ModuleID = 'i386.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.processor_costs = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [3 x i32], [3 x i32], i32, [3 x i32], [3 x i32], i32, [2 x i32], [2 x i32], i32, [3 x i32], [3 x i32], i32, i32, i32 }
%struct.rtx_def = type { i32, [1 x %union.rtunion_def] }
%union.rtunion_def = type { i64 }
%struct.gcc_target = type { %struct.asm_out, %struct.sched, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %struct.attribute_spec*, i32 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*, %union.tree_node**)*, i1 (%union.tree_node*)*, i1 (%union.tree_node*)*, void ()*, %struct.rtx_def* (%union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, i32)*, i32 (%union.tree_node*, i8*, i32)*, i8, i8, i1 ()* }
%struct.asm_out = type { i8*, i8*, i8*, %struct.asm_int_op, %struct.asm_int_op, i1 (%struct.rtx_def*, i32, i32)*, void (%struct._IO_FILE*, i64)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, i64)*, void (i8*, i32)*, void ()*, void ()*, void (%struct.rtx_def*, i32)*, void (%struct.rtx_def*, i32)* }
%struct.asm_int_op = type { i8*, i8*, i8*, i8* }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.sched = type { i32 (%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)*, i32 ()*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, %struct.rtx_def* (i32, %struct.rtx_def*)* }
%union.tree_node = type { %struct.tree_decl }
%struct.tree_decl = type { %struct.tree_common, i8*, i32, i32, %union.tree_node*, i48, %union.anon, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %union.anon.1, %union.tree_node*, %union.tree_node*, %union.tree_node*, i64, %struct.lang_decl* }
%struct.tree_common = type { %union.tree_node*, %union.tree_node*, i32 }
%union.anon = type { i64 }
%union.anon.1 = type { %struct.function* }
%struct.function = type { %struct.eh_status*, %struct.stmt_status*, %struct.expr_status*, %struct.emit_status*, %struct.varasm_status*, i8*, %union.tree_node*, %struct.function*, i32, i32, i32, i32, %struct.rtx_def*, %struct.ix86_args, %struct.rtx_def*, %struct.rtx_def*, i8*, %struct.initial_value_struct*, i32, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i64, %union.tree_node*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, %struct.rtx_def**, %struct.temp_slot*, i32, i32, i32, %struct.var_refs_queue*, i32, i32, i8*, %union.tree_node*, %struct.rtx_def*, i32, i32, %struct.machine_function*, i32, i32, %struct.language_function*, %struct.rtx_def*, i24 }
%struct.eh_status = type opaque
%struct.stmt_status = type opaque
%struct.expr_status = type { i32, i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def* }
%struct.emit_status = type { i32, i32, %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %struct.sequence_stack*, i32, i32, i8*, i32, i8*, %union.tree_node**, %struct.rtx_def** }
%struct.sequence_stack = type { %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %struct.sequence_stack* }
%struct.varasm_status = type opaque
%struct.ix86_args = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.initial_value_struct = type opaque
%struct.temp_slot = type opaque
%struct.var_refs_queue = type { %struct.rtx_def*, i32, i32, %struct.var_refs_queue* }
%struct.machine_function = type { [59 x [3 x %struct.rtx_def*]], i32, i32 }
%struct.language_function = type opaque
%struct.lang_decl = type opaque
%struct.attribute_spec = type { i8*, i32, i32, i8, i8, i8, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* }
%struct.ptt = type { %struct.processor_costs*, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.pta = type { i8*, i32, i32 }
%struct.optab = type { i32, [59 x %struct.anon.3] }
%struct.anon.3 = type { i32, %struct.rtx_def* }
%struct.recog_data = type { [30 x %struct.rtx_def*], [30 x %struct.rtx_def**], [30 x i8*], [30 x i32], [30 x i32], [4 x %struct.rtx_def**], [4 x i8], i8, i8, i8, %struct.rtx_def* }
%struct.insn_data = type { i8*, i8*, %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.insn_operand_data*, i8, i8, i8, i8 }
%struct.insn_operand_data = type { i32 (%struct.rtx_def*, i32)*, i8*, i16, i8, i8 }
%struct.builtin_description = type { i32, i32, i8*, i32, i32, i32 }
%union.anon.4 = type { %struct.ppro_sched_data }
%struct.ppro_sched_data = type { [3 x %struct.rtx_def*], i32 }
%struct.tree_type = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32, i32, i32, %union.tree_node*, %union.tree_node*, %union.anon.2, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i64, %struct.lang_type* }
%union.anon.2 = type { i8* }
%struct.lang_type = type opaque
%struct.tree_exp = type { %struct.tree_common, i32, [1 x %union.tree_node*] }
%struct.tree_list = type { %struct.tree_common, %union.tree_node*, %union.tree_node* }
%struct.tree_identifier = type { %struct.tree_common, %struct.ht_identifier }
%struct.ht_identifier = type { i32, i8* }
%struct.tree_int_cst = type { %struct.tree_common, %struct.rtx_def*, %struct.anon }
%struct.anon = type { i64, i64 }
%struct.rtvec_def = type { i32, [1 x %struct.rtx_def*] }
%struct.ix86_address = type { %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i64 }
%struct.ix86_frame = type { i32, i32, i32, i64, i32, i32, i32, i64, i64, i64, i64 }
%struct.realvaluetype = type { [3 x i64] }
%union.real_extract = type { %struct.realvaluetype }
%struct.mem_attrs = type { i64, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32 }
%struct.tree_string = type { %struct.tree_common, %struct.rtx_def*, i32, i8* }
%struct.tree_vec = type { %struct.tree_common, i32, [1 x %union.tree_node*] }

@pentium_cost = internal constant %struct.processor_costs { i32 1, i32 1, i32 4, i32 1, i32 11, i32 0, i32 25, i32 3, i32 2, i32 8, i32 6, i32 6, [3 x i32] [i32 2, i32 4, i32 2], [3 x i32] [i32 2, i32 4, i32 2], i32 2, [3 x i32] [i32 2, i32 2, i32 6], [3 x i32] [i32 4, i32 4, i32 6], i32 8, [2 x i32] [i32 8, i32 8], [2 x i32] [i32 8, i32 8], i32 2, [3 x i32] [i32 4, i32 8, i32 16], [3 x i32] [i32 4, i32 8, i32 16], i32 3, i32 0, i32 0 }, align 4
@ix86_cost = global %struct.processor_costs* @pentium_cost, align 8
@x86_use_leave = constant i32 49, align 4
@x86_push_memory = constant i32 113, align 4
@x86_zero_extend_with_and = constant i32 6, align 4
@x86_movx = constant i32 104, align 4
@x86_double_with_add = constant i32 -2, align 4
@x86_use_bit_test = constant i32 1, align 4
@x86_unroll_strlen = constant i32 62, align 4
@x86_cmove = constant i32 104, align 4
@x86_3dnow_a = constant i32 32, align 4
@x86_deep_branch = constant i32 120, align 4
@x86_branch_hints = constant i32 64, align 4
@x86_use_sahf = constant i32 88, align 4
@x86_partial_reg_stall = constant i32 8, align 4
@x86_use_loop = constant i32 16, align 4
@x86_use_fiop = constant i32 -45, align 4
@x86_use_mov0 = constant i32 16, align 4
@x86_use_cltd = constant i32 -21, align 4
@x86_read_modify_write = constant i32 -5, align 4
@x86_read_modify = constant i32 -13, align 4
@x86_split_long_moves = constant i32 8, align 4
@x86_promote_QImode = constant i32 23, align 4
@x86_single_stringop = constant i32 65, align 4
@x86_qimode_math = constant i32 -1, align 4
@x86_promote_qi_regs = constant i32 0, align 4
@x86_himode_math = constant i32 -9, align 4
@x86_promote_hi_regs = constant i32 8, align 4
@x86_sub_esp_4 = constant i32 104, align 4
@x86_sub_esp_8 = constant i32 107, align 4
@x86_add_esp_4 = constant i32 112, align 4
@x86_add_esp_8 = constant i32 123, align 4
@x86_integer_DFmode_moves = constant i32 -97, align 4
@x86_partial_reg_dependency = constant i32 96, align 4
@x86_memory_mismatch_stall = constant i32 96, align 4
@x86_accumulate_outgoing_args = constant i32 104, align 4
@x86_prologue_using_move = constant i32 104, align 4
@x86_epilogue_using_move = constant i32 104, align 4
@x86_decompose_lea = constant i32 64, align 4
@x86_arch_always_fancy_math_387 = constant i32 108, align 4
@regclass_map = constant [53 x i32] [i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9, i32 9, i32 13, i32 14, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 9, i32 0, i32 0, i32 0, i32 9, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 17, i32 17, i32 17, i32 17, i32 17, i32 17, i32 17, i32 17, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16], align 16
@dbx_register_map = constant [53 x i32] [i32 0, i32 2, i32 1, i32 3, i32 6, i32 7, i32 4, i32 5, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1], align 16
@dbx64_register_map = constant [53 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32], align 16
@svr4_dbx_register_map = constant [53 x i32] [i32 0, i32 2, i32 1, i32 3, i32 6, i32 7, i32 5, i32 4, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 -1, i32 9, i32 -1, i32 -1, i32 -1, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1], align 16
@ix86_compare_op0 = global %struct.rtx_def* null, align 8
@ix86_compare_op1 = global %struct.rtx_def* null, align 8
@ix86_asm_dialect = global i32 0, align 4
@.str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"\09.byte\09\00", align 1
@.str.2 = private unnamed_addr constant [9 x i8] c"\09.value\09\00", align 1
@.str.3 = private unnamed_addr constant [8 x i8] c"\09.long\09\00", align 1
@.str.4 = private unnamed_addr constant [8 x i8] c"\09.quad\09\00", align 1
@targetm = global %struct.gcc_target { %struct.asm_out { i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0), %struct.asm_int_op { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i32 0, i32 0), i8* null }, %struct.asm_int_op { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i32 0, i32 0), i8* null }, i1 (%struct.rtx_def*, i32, i32)* @default_assemble_integer, void (%struct._IO_FILE*, i64)* @default_function_pro_epilogue, void (%struct._IO_FILE*)* @no_asm_to_stream, void (%struct._IO_FILE*)* @no_asm_to_stream, void (%struct._IO_FILE*, i64)* @default_function_pro_epilogue, void (i8*, i32)* @default_elf_asm_named_section, void ()* @default_exception_section, void ()* @default_eh_frame_section, void (%struct.rtx_def*, i32)* @default_named_section_asm_out_constructor, void (%struct.rtx_def*, i32)* @default_named_section_asm_out_destructor }, %struct.sched { i32 (%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32)* @ix86_adjust_cost, i32 (%struct.rtx_def*, i32)* null, i32 ()* @ix86_issue_rate, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32)* @ix86_variable_issue, void (%struct._IO_FILE*, i32, i32)* @ix86_sched_init, void (%struct._IO_FILE*, i32)* null, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)* @ix86_sched_reorder, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)* null, %struct.rtx_def* (i32, %struct.rtx_def*)* null }, %union.tree_node* (%union.tree_node*, %union.tree_node*)* @merge_decl_attributes, %union.tree_node* (%union.tree_node*, %union.tree_node*)* @merge_type_attributes, %struct.attribute_spec* getelementptr inbounds ([4 x %struct.attribute_spec], [4 x %struct.attribute_spec]* @ix86_attribute_table, i32 0, i32 0), i32 (%union.tree_node*, %union.tree_node*)* @ix86_comp_type_attributes, void (%union.tree_node*)* @default_set_default_type_attributes, void (%union.tree_node*, %union.tree_node**)* @default_insert_attributes, i1 (%union.tree_node*)* @default_function_attribute_inlinable_p, i1 (%union.tree_node*)* @default_ms_bitfield_layout_p, void ()* @ix86_init_builtins, %struct.rtx_def* (%union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, i32)* @ix86_expand_builtin, i32 (%union.tree_node*, i8*, i32)* @default_section_type_flags, i8 1, i8 1, i1 ()* @hook_void_bool_false }, align 8
@override_options.processor_target_table = internal constant [7 x %struct.ptt] [%struct.ptt { %struct.processor_costs* @i386_cost, i32 0, i32 0, i32 4, i32 3, i32 4, i32 3, i32 4, i32 1 }, %struct.ptt { %struct.processor_costs* @i486_cost, i32 0, i32 0, i32 16, i32 15, i32 16, i32 15, i32 16, i32 1 }, %struct.ptt { %struct.processor_costs* @pentium_cost, i32 0, i32 0, i32 16, i32 7, i32 16, i32 7, i32 16, i32 1 }, %struct.ptt { %struct.processor_costs* @pentiumpro_cost, i32 0, i32 0, i32 16, i32 15, i32 16, i32 7, i32 16, i32 1 }, %struct.ptt { %struct.processor_costs* @k6_cost, i32 0, i32 0, i32 32, i32 7, i32 32, i32 7, i32 32, i32 1 }, %struct.ptt { %struct.processor_costs* @athlon_cost, i32 0, i32 0, i32 16, i32 7, i32 64, i32 7, i32 16, i32 1 }, %struct.ptt { %struct.processor_costs* @pentium4_cost, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1 }], align 16
@i386_cost = internal constant %struct.processor_costs { i32 1, i32 1, i32 3, i32 2, i32 6, i32 1, i32 23, i32 3, i32 2, i32 15, i32 3, i32 4, [3 x i32] [i32 2, i32 4, i32 2], [3 x i32] [i32 2, i32 4, i32 2], i32 2, [3 x i32] [i32 8, i32 8, i32 8], [3 x i32] [i32 8, i32 8, i32 8], i32 2, [2 x i32] [i32 4, i32 8], [2 x i32] [i32 4, i32 8], i32 2, [3 x i32] [i32 4, i32 8, i32 16], [3 x i32] [i32 4, i32 8, i32 16], i32 3, i32 0, i32 0 }, align 4
@i486_cost = internal constant %struct.processor_costs { i32 1, i32 1, i32 3, i32 2, i32 12, i32 1, i32 40, i32 3, i32 2, i32 15, i32 3, i32 4, [3 x i32] [i32 2, i32 4, i32 2], [3 x i32] [i32 2, i32 4, i32 2], i32 2, [3 x i32] [i32 8, i32 8, i32 8], [3 x i32] [i32 8, i32 8, i32 8], i32 2, [2 x i32] [i32 4, i32 8], [2 x i32] [i32 4, i32 8], i32 2, [3 x i32] [i32 4, i32 8, i32 16], [3 x i32] [i32 4, i32 8, i32 16], i32 3, i32 0, i32 0 }, align 4
@pentiumpro_cost = internal constant %struct.processor_costs { i32 1, i32 1, i32 1, i32 1, i32 4, i32 0, i32 17, i32 1, i32 1, i32 8, i32 6, i32 2, [3 x i32] [i32 4, i32 4, i32 4], [3 x i32] [i32 2, i32 2, i32 2], i32 2, [3 x i32] [i32 2, i32 2, i32 6], [3 x i32] [i32 4, i32 4, i32 6], i32 2, [2 x i32] [i32 2, i32 2], [2 x i32] [i32 2, i32 2], i32 2, [3 x i32] [i32 2, i32 2, i32 8], [3 x i32] [i32 2, i32 2, i32 8], i32 3, i32 32, i32 6 }, align 4
@k6_cost = internal constant %struct.processor_costs { i32 1, i32 2, i32 1, i32 1, i32 3, i32 0, i32 18, i32 2, i32 2, i32 8, i32 4, i32 3, [3 x i32] [i32 4, i32 5, i32 4], [3 x i32] [i32 2, i32 3, i32 2], i32 4, [3 x i32] [i32 6, i32 6, i32 6], [3 x i32] [i32 4, i32 4, i32 4], i32 2, [2 x i32] [i32 2, i32 2], [2 x i32] [i32 2, i32 2], i32 2, [3 x i32] [i32 2, i32 2, i32 8], [3 x i32] [i32 2, i32 2, i32 8], i32 6, i32 32, i32 1 }, align 4
@athlon_cost = internal constant %struct.processor_costs { i32 1, i32 2, i32 1, i32 1, i32 5, i32 0, i32 42, i32 1, i32 1, i32 8, i32 9, i32 4, [3 x i32] [i32 4, i32 5, i32 4], [3 x i32] [i32 2, i32 3, i32 2], i32 4, [3 x i32] [i32 6, i32 6, i32 20], [3 x i32] [i32 4, i32 4, i32 16], i32 2, [2 x i32] [i32 2, i32 2], [2 x i32] [i32 2, i32 2], i32 2, [3 x i32] [i32 2, i32 2, i32 8], [3 x i32] [i32 2, i32 2, i32 8], i32 6, i32 64, i32 6 }, align 4
@pentium4_cost = internal constant %struct.processor_costs { i32 1, i32 1, i32 8, i32 8, i32 30, i32 0, i32 112, i32 1, i32 1, i32 16, i32 6, i32 2, [3 x i32] [i32 4, i32 5, i32 4], [3 x i32] [i32 2, i32 3, i32 2], i32 2, [3 x i32] [i32 2, i32 2, i32 6], [3 x i32] [i32 4, i32 4, i32 6], i32 2, [2 x i32] [i32 2, i32 2], [2 x i32] [i32 2, i32 2], i32 12, [3 x i32] [i32 12, i32 12, i32 12], [3 x i32] [i32 2, i32 2, i32 8], i32 10, i32 64, i32 6 }, align 4
@override_options.cpu_names = internal constant [13 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.17, i32 0, i32 0)], align 16
@.str.5 = private unnamed_addr constant [5 x i8] c"i386\00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c"i486\00", align 1
@.str.7 = private unnamed_addr constant [8 x i8] c"pentium\00", align 1
@.str.8 = private unnamed_addr constant [12 x i8] c"pentium-mmx\00", align 1
@.str.9 = private unnamed_addr constant [11 x i8] c"pentiumpro\00", align 1
@.str.10 = private unnamed_addr constant [9 x i8] c"pentium2\00", align 1
@.str.11 = private unnamed_addr constant [9 x i8] c"pentium3\00", align 1
@.str.12 = private unnamed_addr constant [9 x i8] c"pentium4\00", align 1
@.str.13 = private unnamed_addr constant [3 x i8] c"k6\00", align 1
@.str.14 = private unnamed_addr constant [5 x i8] c"k6-2\00", align 1
@.str.15 = private unnamed_addr constant [5 x i8] c"k6-3\00", align 1
@.str.16 = private unnamed_addr constant [7 x i8] c"athlon\00", align 1
@.str.17 = private unnamed_addr constant [9 x i8] c"athlon-4\00", align 1
@override_options.processor_alias_table = internal constant [18 x %struct.pta] [%struct.pta { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i32 0, i32 0 }, %struct.pta { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0), i32 1, i32 0 }, %struct.pta { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.18, i32 0, i32 0), i32 2, i32 0 }, %struct.pta { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i32 0, i32 0), i32 2, i32 0 }, %struct.pta { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8, i32 0, i32 0), i32 2, i32 4 }, %struct.pta { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19, i32 0, i32 0), i32 3, i32 0 }, %struct.pta { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9, i32 0, i32 0), i32 3, i32 0 }, %struct.pta { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.10, i32 0, i32 0), i32 3, i32 4 }, %struct.pta { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.11, i32 0, i32 0), i32 3, i32 13 }, %struct.pta { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.12, i32 0, i32 0), i32 6, i32 15 }, %struct.pta { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.13, i32 0, i32 0), i32 4, i32 4 }, %struct.pta { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14, i32 0, i32 0), i32 4, i32 20 }, %struct.pta { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15, i32 0, i32 0), i32 4, i32 20 }, %struct.pta { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.16, i32 0, i32 0), i32 5, i32 92 }, %struct.pta { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.20, i32 0, i32 0), i32 5, i32 92 }, %struct.pta { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.17, i32 0, i32 0), i32 5, i32 93 }, %struct.pta { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.21, i32 0, i32 0), i32 5, i32 93 }, %struct.pta { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.22, i32 0, i32 0), i32 5, i32 93 }], align 16
@.str.18 = private unnamed_addr constant [5 x i8] c"i586\00", align 1
@.str.19 = private unnamed_addr constant [5 x i8] c"i686\00", align 1
@.str.20 = private unnamed_addr constant [13 x i8] c"athlon-tbird\00", align 1
@.str.21 = private unnamed_addr constant [10 x i8] c"athlon-xp\00", align 1
@.str.22 = private unnamed_addr constant [10 x i8] c"athlon-mp\00", align 1
@ix86_cpu_string = common global i8* null, align 8
@ix86_arch_string = common global i8* null, align 8
@target_flags = external global i32, align 4
@ix86_cmodel_string = common global i8* null, align 8
@.str.23 = private unnamed_addr constant [6 x i8] c"small\00", align 1
@flag_pic = external global i32, align 4
@ix86_cmodel = common global i32 0, align 4
@.str.24 = private unnamed_addr constant [40 x i8] c"code model %s not supported in PIC mode\00", align 1
@.str.25 = private unnamed_addr constant [3 x i8] c"32\00", align 1
@.str.26 = private unnamed_addr constant [7 x i8] c"kernel\00", align 1
@.str.27 = private unnamed_addr constant [7 x i8] c"medium\00", align 1
@.str.28 = private unnamed_addr constant [6 x i8] c"large\00", align 1
@.str.29 = private unnamed_addr constant [36 x i8] c"bad value (%s) for -mcmodel= switch\00", align 1
@ix86_asm_string = common global i8* null, align 8
@.str.30 = private unnamed_addr constant [6 x i8] c"intel\00", align 1
@.str.31 = private unnamed_addr constant [4 x i8] c"att\00", align 1
@.str.32 = private unnamed_addr constant [33 x i8] c"bad value (%s) for -masm= switch\00", align 1
@.str.33 = private unnamed_addr constant [49 x i8] c"code model `%s' not supported in the %s bit mode\00", align 1
@.str.34 = private unnamed_addr constant [3 x i8] c"64\00", align 1
@.str.35 = private unnamed_addr constant [37 x i8] c"code model `large' not supported yet\00", align 1
@.str.36 = private unnamed_addr constant [28 x i8] c"%i-bit mode not compiled in\00", align 1
@ix86_arch = common global i32 0, align 4
@ix86_cpu = common global i32 0, align 4
@x86_prefetch_sse = common global i32 0, align 4
@.str.37 = private unnamed_addr constant [34 x i8] c"bad value (%s) for -march= switch\00", align 1
@.str.38 = private unnamed_addr constant [33 x i8] c"bad value (%s) for -mcpu= switch\00", align 1
@optimize_size = external global i32, align 4
@size_cost = internal constant %struct.processor_costs { i32 2, i32 3, i32 2, i32 3, i32 3, i32 0, i32 3, i32 3, i32 3, i32 0, i32 2, i32 2, [3 x i32] [i32 2, i32 2, i32 2], [3 x i32] [i32 2, i32 2, i32 2], i32 2, [3 x i32] [i32 2, i32 2, i32 2], [3 x i32] [i32 2, i32 2, i32 2], i32 3, [2 x i32] [i32 3, i32 3], [2 x i32] [i32 3, i32 3], i32 3, [3 x i32] [i32 3, i32 3, i32 3], [3 x i32] [i32 3, i32 3, i32 3], i32 3, i32 0, i32 0 }, align 4
@init_machine_status = external global void (%struct.function*)*, align 8
@mark_machine_status = external global void (%struct.function*)*, align 8
@free_machine_status = external global void (%struct.function*)*, align 8
@ix86_regparm_string = common global i8* null, align 8
@.str.39 = private unnamed_addr constant [37 x i8] c"-mregparm=%d is not between 0 and %d\00", align 1
@ix86_regparm = common global i32 0, align 4
@ix86_align_loops_string = common global i8* null, align 8
@.str.40 = private unnamed_addr constant [45 x i8] c"-malign-loops is obsolete, use -falign-loops\00", align 1
@align_loops = external global i32, align 4
@.str.41 = private unnamed_addr constant [41 x i8] c"-malign-loops=%d is not between 0 and %d\00", align 1
@ix86_align_jumps_string = common global i8* null, align 8
@.str.42 = private unnamed_addr constant [45 x i8] c"-malign-jumps is obsolete, use -falign-jumps\00", align 1
@align_jumps = external global i32, align 4
@ix86_align_funcs_string = common global i8* null, align 8
@.str.43 = private unnamed_addr constant [53 x i8] c"-malign-functions is obsolete, use -falign-functions\00", align 1
@align_functions = external global i32, align 4
@align_loops_max_skip = external global i32, align 4
@align_jumps_max_skip = external global i32, align 4
@ix86_preferred_stack_boundary = common global i32 0, align 4
@ix86_preferred_stack_boundary_string = common global i8* null, align 8
@.str.44 = private unnamed_addr constant [55 x i8] c"-mpreferred-stack-boundary=%d is not between %d and 12\00", align 1
@ix86_branch_cost = common global i32 0, align 4
@ix86_branch_cost_string = common global i8* null, align 8
@.str.45 = private unnamed_addr constant [40 x i8] c"-mbranch-cost=%d is not between 0 and 5\00", align 1
@flag_omit_frame_pointer = external global i32, align 4
@flag_unsafe_math_optimizations = external global i32, align 4
@.str.46 = private unnamed_addr constant [48 x i8] c"-malign-double makes no sense in the 64bit mode\00", align 1
@.str.47 = private unnamed_addr constant [57 x i8] c"-mrtd calling convention not supported in the 64bit mode\00", align 1
@ix86_fpmath = common global i32 0, align 4
@ix86_fpmath_string = common global i8* null, align 8
@.str.48 = private unnamed_addr constant [4 x i8] c"387\00", align 1
@.str.49 = private unnamed_addr constant [4 x i8] c"sse\00", align 1
@.str.50 = private unnamed_addr constant [52 x i8] c"SSE instruction set disabled, using 387 arithmetics\00", align 1
@.str.51 = private unnamed_addr constant [8 x i8] c"387,sse\00", align 1
@.str.52 = private unnamed_addr constant [8 x i8] c"sse,387\00", align 1
@.str.53 = private unnamed_addr constant [52 x i8] c"387 instruction set disabled, using SSE arithmetics\00", align 1
@.str.54 = private unnamed_addr constant [36 x i8] c"bad value (%s) for -mfpmath= switch\00", align 1
@internal_label_prefix = internal global [16 x i8] zeroinitializer, align 16
@.str.55 = private unnamed_addr constant [7 x i8] c"*.%s%u\00", align 1
@.str.56 = private unnamed_addr constant [3 x i8] c"LX\00", align 1
@internal_label_prefix_len = internal global i32 0, align 4
@flag_schedule_insns = external global i32, align 4
@optimize = external global i32, align 4
@flag_pcc_struct_return = external global i32, align 4
@flag_asynchronous_unwind_tables = external global i32, align 4
@.str.57 = private unnamed_addr constant [8 x i8] c"stdcall\00", align 1
@.str.58 = private unnamed_addr constant [6 x i8] c"cdecl\00", align 1
@.str.59 = private unnamed_addr constant [8 x i8] c"regparm\00", align 1
@ix86_attribute_table = constant [4 x %struct.attribute_spec] [%struct.attribute_spec { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.57, i32 0, i32 0), i32 0, i32 0, i8 0, i8 1, i8 1, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* @ix86_handle_cdecl_attribute }, %struct.attribute_spec { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.58, i32 0, i32 0), i32 0, i32 0, i8 0, i8 1, i8 1, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* @ix86_handle_cdecl_attribute }, %struct.attribute_spec { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.59, i32 0, i32 0), i32 1, i32 1, i8 0, i8 1, i8 1, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* @ix86_handle_regparm_attribute }, %struct.attribute_spec zeroinitializer], align 16
@global_trees = external global [51 x %union.tree_node*], align 16
@mode_size = external constant [59 x i8], align 16
@fixed_regs = external global [53 x i8], align 16
@x86_64_int_parameter_registers = internal constant [6 x i32] [i32 5, i32 4, i32 1, i32 2, i32 37, i32 38], align 16
@init_cumulative_args.zero_cum = internal global %struct.ix86_args zeroinitializer, align 4
@ix86_debug_arg_string = common global i8* null, align 8
@stderr = external global %struct._IO_FILE*, align 8
@.str.60 = private unnamed_addr constant [24 x i8] c"\0Ainit_cumulative_args (\00", align 1
@.str.61 = private unnamed_addr constant [32 x i8] c"fntype code = %s, ret code = %s\00", align 1
@tree_code_name = external global [256 x i8*], align 16
@.str.62 = private unnamed_addr constant [10 x i8] c"no fntype\00", align 1
@.str.63 = private unnamed_addr constant [15 x i8] c", libname = %s\00", align 1
@.str.64 = private unnamed_addr constant [14 x i8] c", nregs=%d )\0A\00", align 1
@.str.65 = private unnamed_addr constant [61 x i8] c"function_adv (sz=%d, wds=%2d, nregs=%d, mode=%s, named=%d)\0A\0A\00", align 1
@mode_name = external constant [59 x i8*], align 16
@const_int_rtx = external global [129 x %struct.rtx_def*], align 16
@.str.66 = private unnamed_addr constant [61 x i8] c"function_arg (size=%d, wds=%2d, nregs=%d, mode=%4s, named=%d\00", align 1
@.str.67 = private unnamed_addr constant [12 x i8] c", reg=%%e%s\00", align 1
@reg_names = external global [53 x i8*], align 16
@.str.68 = private unnamed_addr constant [8 x i8] c", stack\00", align 1
@.str.69 = private unnamed_addr constant [4 x i8] c" )\0A\00", align 1
@x86_64_int_return_registers = internal constant [4 x i32] [i32 0, i32 1, i32 5, i32 4], align 16
@mode_class = external constant [59 x i32], align 16
@integer_types = external global [11 x %union.tree_node*], align 16
@.str.70 = private unnamed_addr constant [14 x i8] c"__va_list_tag\00", align 1
@.str.71 = private unnamed_addr constant [10 x i8] c"gp_offset\00", align 1
@.str.72 = private unnamed_addr constant [10 x i8] c"fp_offset\00", align 1
@.str.73 = private unnamed_addr constant [18 x i8] c"overflow_arg_area\00", align 1
@.str.74 = private unnamed_addr constant [14 x i8] c"reg_save_area\00", align 1
@cfun = external global %struct.function*, align 8
@current_function_decl = external global %union.tree_node*, align 8
@global_rtl = external global [11 x %struct.rtx_def*], align 16
@.str.75 = private unnamed_addr constant [46 x i8] c"va_start: words = %d, n_gpr = %d, n_fpr = %d\0A\00", align 1
@ix86_va_arg.intreg = internal global [6 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4, i32 5], align 16
@const_tiny_rtx = external global [3 x [59 x %struct.rtx_def*]], align 16
@rtx_class = external constant [153 x i8], align 16
@.str.76 = private unnamed_addr constant [7 x i8] c"i386.c\00", align 1
@__FUNCTION__.memory_displacement_operand = private unnamed_addr constant [28 x i8] c"memory_displacement_operand\00", align 1
@__FUNCTION__.aligned_operand = private unnamed_addr constant [16 x i8] c"aligned_operand\00", align 1
@rtx_format = external constant [153 x i8*], align 16
@rtx_length = external constant [153 x i8], align 16
@reload_completed = external global i32, align 4
@frame_pointer_needed = external global i32, align 4
@pic_label_name = internal global [32 x i8] zeroinitializer, align 16
@.str.77 = private unnamed_addr constant [3 x i8] c":\0A\00", align 1
@pic_offset_table_rtx = external global %struct.rtx_def*, align 8
@.str.78 = private unnamed_addr constant [23 x i8] c"mov{l}\09{%1, %0|%0, %1}\00", align 1
@.str.79 = private unnamed_addr constant [4 x i8] c"ret\00", align 1
@__FUNCTION__.load_pic_register = private unnamed_addr constant [18 x i8] c"load_pic_register\00", align 1
@.str.80 = private unnamed_addr constant [22 x i8] c"_GLOBAL_OFFSET_TABLE_\00", align 1
@.str.81 = private unnamed_addr constant [4 x i8] c"LPR\00", align 1
@__FUNCTION__.ix86_initial_elimination_offset = private unnamed_addr constant [32 x i8] c"ix86_initial_elimination_offset\00", align 1
@use_fast_prologue_epilogue = internal global i32 0, align 4
@__FUNCTION__.ix86_expand_prologue = private unnamed_addr constant [21 x i8] c"ix86_expand_prologue\00", align 1
@.str.82 = private unnamed_addr constant [8 x i8] c"_alloca\00", align 1
@current_function_sp_is_unchanging = external global i32, align 4
@__FUNCTION__.ix86_expand_epilogue = private unnamed_addr constant [21 x i8] c"ix86_expand_epilogue\00", align 1
@__FUNCTION__.ix86_address_cost = private unnamed_addr constant [18 x i8] c"ix86_address_cost\00", align 1
@ix86_debug_addr_string = common global i8* null, align 8
@.str.83 = private unnamed_addr constant [58 x i8] c"\0A======\0AGO_IF_LEGITIMATE_ADDRESS, mode = %s, strict = %d\0A\00", align 1
@.str.84 = private unnamed_addr constant [21 x i8] c"decomposition failed\00", align 1
@.str.85 = private unnamed_addr constant [23 x i8] c"base is not a register\00", align 1
@.str.86 = private unnamed_addr constant [21 x i8] c"base is not in Pmode\00", align 1
@reg_renumber = external global i16*, align 8
@.str.87 = private unnamed_addr constant [18 x i8] c"base is not valid\00", align 1
@.str.88 = private unnamed_addr constant [24 x i8] c"index is not a register\00", align 1
@.str.89 = private unnamed_addr constant [22 x i8] c"index is not in Pmode\00", align 1
@.str.90 = private unnamed_addr constant [19 x i8] c"index is not valid\00", align 1
@.str.91 = private unnamed_addr constant [20 x i8] c"scale without index\00", align 1
@.str.92 = private unnamed_addr constant [32 x i8] c"scale is not a valid multiplier\00", align 1
@.str.93 = private unnamed_addr constant [29 x i8] c"displacement is not constant\00", align 1
@.str.94 = private unnamed_addr constant [29 x i8] c"displacement is out of range\00", align 1
@.str.95 = private unnamed_addr constant [31 x i8] c"displacement is a const_double\00", align 1
@.str.96 = private unnamed_addr constant [34 x i8] c"non-constant pic memory reference\00", align 1
@.str.97 = private unnamed_addr constant [41 x i8] c"displacement is an invalid pic construct\00", align 1
@.str.98 = private unnamed_addr constant [10 x i8] c"Success.\0A\00", align 1
@.str.99 = private unnamed_addr constant [11 x i8] c"Error: %s\0A\00", align 1
@__FUNCTION__.legitimize_pic_address = private unnamed_addr constant [23 x i8] c"legitimize_pic_address\00", align 1
@.str.100 = private unnamed_addr constant [43 x i8] c"\0A==========\0ALEGITIMIZE_ADDRESS, mode = %s\0A\00", align 1
@.str.101 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@__FUNCTION__.print_reg = private unnamed_addr constant [10 x i8] c"print_reg\00", align 1
@.str.102 = private unnamed_addr constant [39 x i8] c"extended registers have no high halves\00", align 1
@.str.103 = private unnamed_addr constant [5 x i8] c"r%ib\00", align 1
@.str.104 = private unnamed_addr constant [5 x i8] c"r%iw\00", align 1
@.str.105 = private unnamed_addr constant [5 x i8] c"r%id\00", align 1
@.str.106 = private unnamed_addr constant [4 x i8] c"r%i\00", align 1
@.str.107 = private unnamed_addr constant [47 x i8] c"unsupported operand size for extended register\00", align 1
@.str.108 = private unnamed_addr constant [6 x i8] c"st(0)\00", align 1
@hi_reg_name = internal constant [53 x i8*] [i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.237, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.238, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.239, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.240, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.241, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.242, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.243, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.244, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.245, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.246, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.247, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.248, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.249, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.250, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.251, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.252, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.253, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.254, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.255, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.256, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.257, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.258, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.259, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.260, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.261, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.262, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.263, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.264, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.265, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.266, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.267, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.268, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.269, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.270, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.271, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.272, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.273, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.274, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.275, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.276, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.277, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.278, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.279, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.280, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.281, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.282, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.283, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.284, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.285, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.286, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.287, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.288, i32 0, i32 0)], align 16
@qi_reg_name = internal constant [8 x i8*] [i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.289, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.290, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.291, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.292, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.293, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.294, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.295, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.296, i32 0, i32 0)], align 16
@qi_high_reg_name = internal constant [4 x i8*] [i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.297, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.298, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.299, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.300, i32 0, i32 0)], align 16
@__FUNCTION__.print_operand = private unnamed_addr constant [14 x i8] c"print_operand\00", align 1
@.str.109 = private unnamed_addr constant [3 x i8] c"eq\00", align 1
@.str.110 = private unnamed_addr constant [3 x i8] c"lt\00", align 1
@.str.111 = private unnamed_addr constant [3 x i8] c"le\00", align 1
@.str.112 = private unnamed_addr constant [6 x i8] c"unord\00", align 1
@.str.113 = private unnamed_addr constant [4 x i8] c"neq\00", align 1
@.str.114 = private unnamed_addr constant [4 x i8] c"nlt\00", align 1
@.str.115 = private unnamed_addr constant [4 x i8] c"nle\00", align 1
@.str.116 = private unnamed_addr constant [4 x i8] c"ord\00", align 1
@.str.117 = private unnamed_addr constant [77 x i8] c"operand is neither a constant nor a condition code, invalid operand code 'c'\00", align 1
@current_output_insn = external global %struct.rtx_def*, align 8
@.str.118 = private unnamed_addr constant [6 x i8] c"ds ; \00", align 1
@.str.119 = private unnamed_addr constant [6 x i8] c"cs ; \00", align 1
@.str.120 = private unnamed_addr constant [26 x i8] c"invalid operand code `%c'\00", align 1
@.str.121 = private unnamed_addr constant [5 x i8] c"BYTE\00", align 1
@.str.122 = private unnamed_addr constant [5 x i8] c"WORD\00", align 1
@.str.123 = private unnamed_addr constant [6 x i8] c"DWORD\00", align 1
@.str.124 = private unnamed_addr constant [6 x i8] c"QWORD\00", align 1
@.str.125 = private unnamed_addr constant [6 x i8] c"XWORD\00", align 1
@.str.126 = private unnamed_addr constant [8 x i8] c"XMMWORD\00", align 1
@.str.127 = private unnamed_addr constant [6 x i8] c" PTR \00", align 1
@.str.128 = private unnamed_addr constant [6 x i8] c"0x%lx\00", align 1
@.str.129 = private unnamed_addr constant [13 x i8] c"OFFSET FLAT:\00", align 1
@.str.130 = private unnamed_addr constant [4 x i8] c"%ld\00", align 1
@__FUNCTION__.print_operand_address = private unnamed_addr constant [22 x i8] c"print_operand_address\00", align 1
@.str.131 = private unnamed_addr constant [4 x i8] c"ds:\00", align 1
@.str.132 = private unnamed_addr constant [7 x i8] c"(%rip)\00", align 1
@.str.133 = private unnamed_addr constant [4 x i8] c",%d\00", align 1
@.str.134 = private unnamed_addr constant [4 x i8] c"*%d\00", align 1
@output_387_binary_op.buf = internal global [30 x i8] zeroinitializer, align 16
@.str.135 = private unnamed_addr constant [6 x i8] c"fiadd\00", align 1
@.str.136 = private unnamed_addr constant [5 x i8] c"fadd\00", align 1
@.str.137 = private unnamed_addr constant [4 x i8] c"add\00", align 1
@.str.138 = private unnamed_addr constant [6 x i8] c"fisub\00", align 1
@.str.139 = private unnamed_addr constant [5 x i8] c"fsub\00", align 1
@.str.140 = private unnamed_addr constant [4 x i8] c"sub\00", align 1
@.str.141 = private unnamed_addr constant [6 x i8] c"fimul\00", align 1
@.str.142 = private unnamed_addr constant [5 x i8] c"fmul\00", align 1
@.str.143 = private unnamed_addr constant [4 x i8] c"mul\00", align 1
@.str.144 = private unnamed_addr constant [6 x i8] c"fidiv\00", align 1
@.str.145 = private unnamed_addr constant [5 x i8] c"fdiv\00", align 1
@.str.146 = private unnamed_addr constant [4 x i8] c"div\00", align 1
@__FUNCTION__.output_387_binary_op = private unnamed_addr constant [21 x i8] c"output_387_binary_op\00", align 1
@.str.147 = private unnamed_addr constant [19 x i8] c"ss\09{%2, %0|%0, %2}\00", align 1
@.str.148 = private unnamed_addr constant [19 x i8] c"sd\09{%2, %0|%0, %2}\00", align 1
@.str.149 = private unnamed_addr constant [7 x i8] c"%z2\09%2\00", align 1
@.str.150 = private unnamed_addr constant [18 x i8] c"p\09{%0, %2|%2, %0}\00", align 1
@.str.151 = private unnamed_addr constant [18 x i8] c"p\09{%2, %0|%0, %2}\00", align 1
@.str.152 = private unnamed_addr constant [19 x i8] c"\09{%y2, %0|%0, %y2}\00", align 1
@.str.153 = private unnamed_addr constant [17 x i8] c"\09{%2, %0|%0, %2}\00", align 1
@.str.154 = private unnamed_addr constant [8 x i8] c"r%z1\09%1\00", align 1
@.str.155 = private unnamed_addr constant [21 x i8] c"{p\09%0, %2|rp\09%2, %0}\00", align 1
@.str.156 = private unnamed_addr constant [21 x i8] c"{rp\09%2, %0|p\09%0, %2}\00", align 1
@.str.157 = private unnamed_addr constant [21 x i8] c"{rp\09%0, %1|p\09%1, %0}\00", align 1
@.str.158 = private unnamed_addr constant [21 x i8] c"{p\09%1, %0|rp\09%0, %1}\00", align 1
@.str.159 = private unnamed_addr constant [20 x i8] c"r\09{%y1, %0|%0, %y1}\00", align 1
@.str.160 = private unnamed_addr constant [19 x i8] c"{\09%1, %0|r\09%0, %1}\00", align 1
@.str.161 = private unnamed_addr constant [19 x i8] c"{r\09%2, %0|\09%0, %2}\00", align 1
@.str.162 = private unnamed_addr constant [8 x i8] c"fld\09%y1\00", align 1
@__FUNCTION__.output_fix_trunc = private unnamed_addr constant [17 x i8] c"output_fix_trunc\00", align 1
@.str.163 = private unnamed_addr constant [9 x i8] c"fldcw\09%3\00", align 1
@.str.164 = private unnamed_addr constant [12 x i8] c"fistp%z0\09%0\00", align 1
@.str.165 = private unnamed_addr constant [11 x i8] c"fist%z0\09%0\00", align 1
@.str.166 = private unnamed_addr constant [9 x i8] c"fldcw\09%2\00", align 1
@.str.167 = private unnamed_addr constant [24 x i8] c"ucomiss\09{%1, %0|%0, %1}\00", align 1
@.str.168 = private unnamed_addr constant [23 x i8] c"comiss\09{%1, %0|%0, %y}\00", align 1
@.str.169 = private unnamed_addr constant [24 x i8] c"ucomisd\09{%1, %0|%0, %1}\00", align 1
@.str.170 = private unnamed_addr constant [23 x i8] c"comisd\09{%1, %0|%0, %y}\00", align 1
@__FUNCTION__.output_fp_compare = private unnamed_addr constant [18 x i8] c"output_fp_compare\00", align 1
@.str.171 = private unnamed_addr constant [26 x i8] c"fucomip\09{%y1, %0|%0, %y1}\00", align 1
@.str.172 = private unnamed_addr constant [25 x i8] c"fcomip\09{%y1, %0|%0, %y1}\00", align 1
@.str.173 = private unnamed_addr constant [9 x i8] c"fstp\09%y0\00", align 1
@.str.174 = private unnamed_addr constant [19 x i8] c"fucompp\0A\09fnstsw\09%0\00", align 1
@.str.175 = private unnamed_addr constant [18 x i8] c"fcompp\0A\09fnstsw\09%0\00", align 1
@.str.176 = private unnamed_addr constant [8 x i8] c"fucompp\00", align 1
@.str.177 = private unnamed_addr constant [7 x i8] c"fcompp\00", align 1
@output_fp_compare.alt = internal constant [24 x i8*] [i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.178, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.179, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.180, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.181, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.182, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.183, i32 0, i32 0), i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.184, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.172, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.185, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.171, i32 0, i32 0), i8* null, i8* null, i8* null, i8* null, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.186, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.187, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.188, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.189, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.190, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.191, i32 0, i32 0), i8* null, i8* null], align 16
@.str.178 = private unnamed_addr constant [12 x i8] c"fcom%z1\09%y1\00", align 1
@.str.179 = private unnamed_addr constant [13 x i8] c"fcomp%z1\09%y1\00", align 1
@.str.180 = private unnamed_addr constant [13 x i8] c"fucom%z1\09%y1\00", align 1
@.str.181 = private unnamed_addr constant [14 x i8] c"fucomp%z1\09%y1\00", align 1
@.str.182 = private unnamed_addr constant [13 x i8] c"ficom%z1\09%y1\00", align 1
@.str.183 = private unnamed_addr constant [14 x i8] c"ficomp%z1\09%y1\00", align 1
@.str.184 = private unnamed_addr constant [24 x i8] c"fcomi\09{%y1, %0|%0, %y1}\00", align 1
@.str.185 = private unnamed_addr constant [25 x i8] c"fucomi\09{%y1, %0|%0, %y1}\00", align 1
@.str.186 = private unnamed_addr constant [23 x i8] c"fcom%z2\09%y2\0A\09fnstsw\09%0\00", align 1
@.str.187 = private unnamed_addr constant [24 x i8] c"fcomp%z2\09%y2\0A\09fnstsw\09%0\00", align 1
@.str.188 = private unnamed_addr constant [24 x i8] c"fucom%z2\09%y2\0A\09fnstsw\09%0\00", align 1
@.str.189 = private unnamed_addr constant [25 x i8] c"fucomp%z2\09%y2\0A\09fnstsw\09%0\00", align 1
@.str.190 = private unnamed_addr constant [24 x i8] c"ficom%z2\09%y2\0A\09fnstsw\09%0\00", align 1
@.str.191 = private unnamed_addr constant [25 x i8] c"ficomp%z2\09%y2\0A\09fnstsw\09%0\00", align 1
@.str.192 = private unnamed_addr constant [8 x i8] c"%s%s%d\0A\00", align 1
@.str.193 = private unnamed_addr constant [3 x i8] c".L\00", align 1
@.str.194 = private unnamed_addr constant [19 x i8] c"%s%s%d-.+(.-%s%d)\0A\00", align 1
@.str.195 = private unnamed_addr constant [36 x i8] c"%s%U_GLOBAL_OFFSET_TABLE_+[.-%s%d]\0A\00", align 1
@__FUNCTION__.ix86_expand_clear = private unnamed_addr constant [18 x i8] c"ix86_expand_clear\00", align 1
@reload_in_progress = external global i32, align 4
@no_new_pseudos = external global i32, align 4
@__FUNCTION__.ix86_expand_binary_operator = private unnamed_addr constant [28 x i8] c"ix86_expand_binary_operator\00", align 1
@__FUNCTION__.ix86_expand_unary_operator = private unnamed_addr constant [27 x i8] c"ix86_expand_unary_operator\00", align 1
@__FUNCTION__.ix86_match_ccmode = private unnamed_addr constant [18 x i8] c"ix86_match_ccmode\00", align 1
@__FUNCTION__.ix86_cc_mode = private unnamed_addr constant [13 x i8] c"ix86_cc_mode\00", align 1
@optab_table = external global [49 x %struct.optab*], align 16
@__FUNCTION__.ix86_expand_branch = private unnamed_addr constant [19 x i8] c"ix86_expand_branch\00", align 1
@split_branch_probability = external global i32, align 4
@__FUNCTION__.ix86_expand_setcc = private unnamed_addr constant [18 x i8] c"ix86_expand_setcc\00", align 1
@__FUNCTION__.ix86_expand_fp_movcc = private unnamed_addr constant [21 x i8] c"ix86_expand_fp_movcc\00", align 1
@__FUNCTION__.ix86_split_long_move = private unnamed_addr constant [21 x i8] c"ix86_split_long_move\00", align 1
@__FUNCTION__.ix86_expand_movstr = private unnamed_addr constant [19 x i8] c"ix86_expand_movstr\00", align 1
@__FUNCTION__.assign_386_stack_local = private unnamed_addr constant [23 x i8] c"assign_386_stack_local\00", align 1
@recog_data = external global %struct.recog_data, align 8
@__FUNCTION__.ix86_attr_length_immediate_default = private unnamed_addr constant [35 x i8] c"ix86_attr_length_immediate_default\00", align 1
@.str.196 = private unnamed_addr constant [18 x i8] c"unknown insn mode\00", align 1
@__FUNCTION__.x86_initialize_trampoline = private unnamed_addr constant [26 x i8] c"x86_initialize_trampoline\00", align 1
@insn_data = external constant [0 x %struct.insn_data], align 8
@.str.197 = private unnamed_addr constant [30 x i8] c"selector must be an immediate\00", align 1
@.str.198 = private unnamed_addr constant [26 x i8] c"mask must be an immediate\00", align 1
@bdesc_2arg = internal constant [103 x %struct.builtin_description] [%struct.builtin_description { i32 65536, i32 690, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.400, i32 0, i32 0), i32 0, i32 0, i32 0 }, %struct.builtin_description { i32 65536, i32 692, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.401, i32 0, i32 0), i32 6, i32 0, i32 0 }, %struct.builtin_description { i32 65536, i32 694, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.402, i32 0, i32 0), i32 4, i32 0, i32 0 }, %struct.builtin_description { i32 65536, i32 696, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.403, i32 0, i32 0), i32 2, i32 0, i32 0 }, %struct.builtin_description { i32 65536, i32 691, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.404, i32 0, i32 0), i32 1, i32 0, i32 0 }, %struct.builtin_description { i32 65536, i32 693, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.405, i32 0, i32 0), i32 7, i32 0, i32 0 }, %struct.builtin_description { i32 65536, i32 695, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.406, i32 0, i32 0), i32 5, i32 0, i32 0 }, %struct.builtin_description { i32 65536, i32 697, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.407, i32 0, i32 0), i32 3, i32 0, i32 0 }, %struct.builtin_description { i32 65536, i32 727, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.408, i32 0, i32 0), i32 8, i32 103, i32 0 }, %struct.builtin_description { i32 65536, i32 727, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.409, i32 0, i32 0), i32 9, i32 107, i32 0 }, %struct.builtin_description { i32 65536, i32 727, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.410, i32 0, i32 0), i32 10, i32 106, i32 0 }, %struct.builtin_description { i32 65536, i32 727, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.411, i32 0, i32 0), i32 11, i32 107, i32 1 }, %struct.builtin_description { i32 65536, i32 727, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.412, i32 0, i32 0), i32 12, i32 106, i32 1 }, %struct.builtin_description { i32 65536, i32 727, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.413, i32 0, i32 0), i32 19, i32 112, i32 0 }, %struct.builtin_description { i32 65536, i32 728, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.414, i32 0, i32 0), i32 13, i32 103, i32 0 }, %struct.builtin_description { i32 65536, i32 728, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.415, i32 0, i32 0), i32 14, i32 107, i32 0 }, %struct.builtin_description { i32 65536, i32 728, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.416, i32 0, i32 0), i32 15, i32 106, i32 0 }, %struct.builtin_description { i32 65536, i32 728, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.417, i32 0, i32 0), i32 16, i32 107, i32 1 }, %struct.builtin_description { i32 65536, i32 728, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.418, i32 0, i32 0), i32 17, i32 106, i32 1 }, %struct.builtin_description { i32 65536, i32 728, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.419, i32 0, i32 0), i32 18, i32 112, i32 0 }, %struct.builtin_description { i32 65536, i32 729, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.420, i32 0, i32 0), i32 21, i32 103, i32 0 }, %struct.builtin_description { i32 65536, i32 729, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.421, i32 0, i32 0), i32 22, i32 107, i32 0 }, %struct.builtin_description { i32 65536, i32 729, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.422, i32 0, i32 0), i32 23, i32 106, i32 0 }, %struct.builtin_description { i32 65536, i32 729, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.423, i32 0, i32 0), i32 24, i32 107, i32 1 }, %struct.builtin_description { i32 65536, i32 729, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.424, i32 0, i32 0), i32 25, i32 106, i32 1 }, %struct.builtin_description { i32 65536, i32 729, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.425, i32 0, i32 0), i32 32, i32 112, i32 0 }, %struct.builtin_description { i32 65536, i32 730, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.426, i32 0, i32 0), i32 26, i32 103, i32 0 }, %struct.builtin_description { i32 65536, i32 730, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.427, i32 0, i32 0), i32 27, i32 107, i32 0 }, %struct.builtin_description { i32 65536, i32 730, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.428, i32 0, i32 0), i32 28, i32 106, i32 0 }, %struct.builtin_description { i32 65536, i32 730, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.429, i32 0, i32 0), i32 29, i32 107, i32 1 }, %struct.builtin_description { i32 65536, i32 730, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.430, i32 0, i32 0), i32 30, i32 106, i32 1 }, %struct.builtin_description { i32 65536, i32 730, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.431, i32 0, i32 0), i32 31, i32 112, i32 0 }, %struct.builtin_description { i32 65536, i32 737, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.432, i32 0, i32 0), i32 54, i32 0, i32 0 }, %struct.builtin_description { i32 65536, i32 735, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.433, i32 0, i32 0), i32 52, i32 0, i32 0 }, %struct.builtin_description { i32 65536, i32 738, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.434, i32 0, i32 0), i32 55, i32 0, i32 0 }, %struct.builtin_description { i32 65536, i32 736, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.435, i32 0, i32 0), i32 53, i32 0, i32 0 }, %struct.builtin_description { i32 65536, i32 687, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.436, i32 0, i32 0), i32 62, i32 0, i32 0 }, %struct.builtin_description { i32 65536, i32 682, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.437, i32 0, i32 0), i32 63, i32 0, i32 0 }, %struct.builtin_description { i32 65536, i32 683, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.438, i32 0, i32 0), i32 64, i32 0, i32 0 }, %struct.builtin_description { i32 65536, i32 733, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.439, i32 0, i32 0), i32 144, i32 0, i32 0 }, %struct.builtin_description { i32 65536, i32 734, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.440, i32 0, i32 0), i32 145, i32 0, i32 0 }, %struct.builtin_description { i32 16384, i32 745, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.441, i32 0, i32 0), i32 77, i32 0, i32 0 }, %struct.builtin_description { i32 16384, i32 746, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.442, i32 0, i32 0), i32 78, i32 0, i32 0 }, %struct.builtin_description { i32 16384, i32 747, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.443, i32 0, i32 0), i32 79, i32 0, i32 0 }, %struct.builtin_description { i32 16384, i32 752, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.444, i32 0, i32 0), i32 84, i32 0, i32 0 }, %struct.builtin_description { i32 16384, i32 753, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.445, i32 0, i32 0), i32 85, i32 0, i32 0 }, %struct.builtin_description { i32 16384, i32 754, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.446, i32 0, i32 0), i32 86, i32 0, i32 0 }, %struct.builtin_description { i32 16384, i32 748, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.447, i32 0, i32 0), i32 80, i32 0, i32 0 }, %struct.builtin_description { i32 16384, i32 749, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.448, i32 0, i32 0), i32 81, i32 0, i32 0 }, %struct.builtin_description { i32 16384, i32 755, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.449, i32 0, i32 0), i32 87, i32 0, i32 0 }, %struct.builtin_description { i32 16384, i32 756, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.450, i32 0, i32 0), i32 88, i32 0, i32 0 }, %struct.builtin_description { i32 16384, i32 750, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.451, i32 0, i32 0), i32 82, i32 0, i32 0 }, %struct.builtin_description { i32 16384, i32 751, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.452, i32 0, i32 0), i32 83, i32 0, i32 0 }, %struct.builtin_description { i32 16384, i32 757, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.453, i32 0, i32 0), i32 89, i32 0, i32 0 }, %struct.builtin_description { i32 16384, i32 758, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.454, i32 0, i32 0), i32 90, i32 0, i32 0 }, %struct.builtin_description { i32 16384, i32 759, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.455, i32 0, i32 0), i32 112, i32 0, i32 0 }, %struct.builtin_description { i32 16384, i32 760, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.456, i32 0, i32 0), i32 111, i32 0, i32 0 }, %struct.builtin_description { i32 4259840, i32 761, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.457, i32 0, i32 0), i32 110, i32 0, i32 0 }, %struct.builtin_description { i32 16384, i32 766, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.458, i32 0, i32 0), i32 91, i32 0, i32 0 }, %struct.builtin_description { i32 16384, i32 767, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.459, i32 0, i32 0), i32 92, i32 0, i32 0 }, %struct.builtin_description { i32 16384, i32 763, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.460, i32 0, i32 0), i32 93, i32 0, i32 0 }, %struct.builtin_description { i32 16384, i32 764, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.461, i32 0, i32 0), i32 94, i32 0, i32 0 }, %struct.builtin_description { i32 4259840, i32 768, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.462, i32 0, i32 0), i32 95, i32 0, i32 0 }, %struct.builtin_description { i32 4259840, i32 769, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.463, i32 0, i32 0), i32 96, i32 0, i32 0 }, %struct.builtin_description { i32 16384, i32 774, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.464, i32 0, i32 0), i32 97, i32 0, i32 0 }, %struct.builtin_description { i32 16384, i32 775, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.465, i32 0, i32 0), i32 98, i32 0, i32 0 }, %struct.builtin_description { i32 16384, i32 776, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.466, i32 0, i32 0), i32 99, i32 0, i32 0 }, %struct.builtin_description { i32 16384, i32 777, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.467, i32 0, i32 0), i32 100, i32 0, i32 0 }, %struct.builtin_description { i32 16384, i32 778, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.468, i32 0, i32 0), i32 101, i32 0, i32 0 }, %struct.builtin_description { i32 16384, i32 779, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.469, i32 0, i32 0), i32 102, i32 0, i32 0 }, %struct.builtin_description { i32 4259840, i32 780, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.470, i32 0, i32 0), i32 107, i32 0, i32 0 }, %struct.builtin_description { i32 4259840, i32 781, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.471, i32 0, i32 0), i32 106, i32 0, i32 0 }, %struct.builtin_description { i32 4259840, i32 782, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.472, i32 0, i32 0), i32 109, i32 0, i32 0 }, %struct.builtin_description { i32 4259840, i32 783, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.473, i32 0, i32 0), i32 108, i32 0, i32 0 }, %struct.builtin_description { i32 16384, i32 795, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.474, i32 0, i32 0), i32 131, i32 0, i32 0 }, %struct.builtin_description { i32 16384, i32 796, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.475, i32 0, i32 0), i32 132, i32 0, i32 0 }, %struct.builtin_description { i32 16384, i32 797, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.476, i32 0, i32 0), i32 133, i32 0, i32 0 }, %struct.builtin_description { i32 16384, i32 798, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.477, i32 0, i32 0), i32 134, i32 0, i32 0 }, %struct.builtin_description { i32 16384, i32 799, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.478, i32 0, i32 0), i32 135, i32 0, i32 0 }, %struct.builtin_description { i32 16384, i32 800, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.479, i32 0, i32 0), i32 136, i32 0, i32 0 }, %struct.builtin_description { i32 16384, i32 792, i8* null, i32 74, i32 0, i32 0 }, %struct.builtin_description { i32 16384, i32 793, i8* null, i32 75, i32 0, i32 0 }, %struct.builtin_description { i32 16384, i32 794, i8* null, i32 76, i32 0, i32 0 }, %struct.builtin_description { i32 65536, i32 739, i8* null, i32 46, i32 0, i32 0 }, %struct.builtin_description { i32 65536, i32 742, i8* null, i32 48, i32 0, i32 0 }, %struct.builtin_description { i32 16384, i32 789, i8* null, i32 115, i32 0, i32 0 }, %struct.builtin_description { i32 16384, i32 789, i8* null, i32 123, i32 0, i32 0 }, %struct.builtin_description { i32 16384, i32 790, i8* null, i32 116, i32 0, i32 0 }, %struct.builtin_description { i32 16384, i32 790, i8* null, i32 124, i32 0, i32 0 }, %struct.builtin_description { i32 16384, i32 791, i8* null, i32 117, i32 0, i32 0 }, %struct.builtin_description { i32 16384, i32 791, i8* null, i32 125, i32 0, i32 0 }, %struct.builtin_description { i32 16384, i32 786, i8* null, i32 120, i32 0, i32 0 }, %struct.builtin_description { i32 16384, i32 786, i8* null, i32 128, i32 0, i32 0 }, %struct.builtin_description { i32 16384, i32 787, i8* null, i32 121, i32 0, i32 0 }, %struct.builtin_description { i32 16384, i32 787, i8* null, i32 129, i32 0, i32 0 }, %struct.builtin_description { i32 16384, i32 788, i8* null, i32 122, i32 0, i32 0 }, %struct.builtin_description { i32 16384, i32 788, i8* null, i32 130, i32 0, i32 0 }, %struct.builtin_description { i32 16384, i32 784, i8* null, i32 118, i32 0, i32 0 }, %struct.builtin_description { i32 16384, i32 784, i8* null, i32 126, i32 0, i32 0 }, %struct.builtin_description { i32 16384, i32 785, i8* null, i32 119, i32 0, i32 0 }, %struct.builtin_description { i32 16384, i32 785, i8* null, i32 127, i32 0, i32 0 }, %struct.builtin_description { i32 4259840, i32 770, i8* null, i32 113, i32 0, i32 0 }, %struct.builtin_description { i32 16384, i32 762, i8* null, i32 105, i32 0, i32 0 }], align 16
@bdesc_1arg = internal constant [9 x %struct.builtin_description] [%struct.builtin_description { i32 4259840, i32 677, i8* null, i32 71, i32 0, i32 0 }, %struct.builtin_description { i32 65536, i32 676, i8* null, i32 70, i32 0, i32 0 }, %struct.builtin_description { i32 65536, i32 702, i8* null, i32 142, i32 0, i32 0 }, %struct.builtin_description { i32 65536, i32 700, i8* null, i32 140, i32 0, i32 0 }, %struct.builtin_description { i32 65536, i32 698, i8* null, i32 138, i32 0, i32 0 }, %struct.builtin_description { i32 65536, i32 740, i8* null, i32 47, i32 0, i32 0 }, %struct.builtin_description { i32 65536, i32 743, i8* null, i32 49, i32 0, i32 0 }, %struct.builtin_description { i32 65536, i32 741, i8* null, i32 50, i32 0, i32 0 }, %struct.builtin_description { i32 65536, i32 744, i8* null, i32 51, i32 0, i32 0 }], align 16
@bdesc_comi = internal constant [12 x %struct.builtin_description] [%struct.builtin_description { i32 65536, i32 731, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.480, i32 0, i32 0), i32 34, i32 103, i32 0 }, %struct.builtin_description { i32 65536, i32 731, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.481, i32 0, i32 0), i32 35, i32 107, i32 0 }, %struct.builtin_description { i32 65536, i32 731, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.482, i32 0, i32 0), i32 36, i32 106, i32 0 }, %struct.builtin_description { i32 65536, i32 731, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.483, i32 0, i32 0), i32 37, i32 107, i32 1 }, %struct.builtin_description { i32 65536, i32 731, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.484, i32 0, i32 0), i32 38, i32 106, i32 1 }, %struct.builtin_description { i32 65536, i32 731, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.485, i32 0, i32 0), i32 39, i32 102, i32 0 }, %struct.builtin_description { i32 65536, i32 732, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.486, i32 0, i32 0), i32 40, i32 103, i32 0 }, %struct.builtin_description { i32 65536, i32 732, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.487, i32 0, i32 0), i32 41, i32 107, i32 0 }, %struct.builtin_description { i32 65536, i32 732, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.488, i32 0, i32 0), i32 42, i32 106, i32 0 }, %struct.builtin_description { i32 65536, i32 732, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.489, i32 0, i32 0), i32 43, i32 107, i32 1 }, %struct.builtin_description { i32 65536, i32 732, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.490, i32 0, i32 0), i32 44, i32 106, i32 1 }, %struct.builtin_description { i32 65536, i32 732, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.491, i32 0, i32 0), i32 45, i32 102, i32 0 }], align 16
@__FUNCTION__.ix86_force_to_memory = private unnamed_addr constant [21 x i8] c"ix86_force_to_memory\00", align 1
@__FUNCTION__.ix86_secondary_memory_needed = private unnamed_addr constant [29 x i8] c"ix86_secondary_memory_needed\00", align 1
@call_used_regs = external global [53 x i8], align 16
@reg_alloc_order = external global [53 x i32], align 16
@.str.199 = private unnamed_addr constant [23 x i8] c"add{q} {%0, %1|%1, %0}\00", align 1
@.str.200 = private unnamed_addr constant [7 x i8] c"\09jmp *\00", align 1
@.str.201 = private unnamed_addr constant [18 x i8] c"@GOTPCREL(%%rip)\0A\00", align 1
@.str.202 = private unnamed_addr constant [6 x i8] c"\09jmp \00", align 1
@.str.203 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.204 = private unnamed_addr constant [23 x i8] c"add{l} {%0, %1|%1, %0}\00", align 1
@__FUNCTION__.x86_output_mi_thunk = private unnamed_addr constant [20 x i8] c"x86_output_mi_thunk\00", align 1
@.str.205 = private unnamed_addr constant [11 x i8] c"push{l}\09%0\00", align 1
@.str.206 = private unnamed_addr constant [9 x i8] c"call\09%P1\00", align 1
@.str.207 = private unnamed_addr constant [8 x i8] c".%s%u:\0A\00", align 1
@.str.208 = private unnamed_addr constant [2 x i8] c"L\00", align 1
@.str.209 = private unnamed_addr constant [10 x i8] c"pop{l}\09%0\00", align 1
@.str.210 = private unnamed_addr constant [52 x i8] c"add{l}\09{%2+[.-%P1], %0|%0, OFFSET FLAT: %2+[.-%P1]}\00", align 1
@.str.211 = private unnamed_addr constant [51 x i8] c"mov{l}\09{%0@GOT(%%ebx), %%ecx|%%ecx, %0@GOT[%%ebx]}\00", align 1
@.str.212 = private unnamed_addr constant [22 x i8] c"\09pop{l\09%%ebx|\09%%ebx}\0A\00", align 1
@.str.213 = private unnamed_addr constant [21 x i8] c"\09jmp\09{*%%ecx|%%ecx}\0A\00", align 1
@.str.214 = private unnamed_addr constant [41 x i8] c"`%s' attribute only applies to functions\00", align 1
@.str.215 = private unnamed_addr constant [23 x i8] c"`%s' attribute ignored\00", align 1
@.str.216 = private unnamed_addr constant [53 x i8] c"`%s' attribute requires an integer constant argument\00", align 1
@.str.217 = private unnamed_addr constant [42 x i8] c"argument to `%s' attribute larger than %d\00", align 1
@__FUNCTION__.examine_argument = private unnamed_addr constant [17 x i8] c"examine_argument\00", align 1
@__FUNCTION__.classify_argument = private unnamed_addr constant [18 x i8] c"classify_argument\00", align 1
@mode_bitsize = external constant [59 x i16], align 16
@.str.218 = private unnamed_addr constant [14 x i8] c"Memory class\0A\00", align 1
@.str.219 = private unnamed_addr constant [9 x i8] c"Classes:\00", align 1
@.str.220 = private unnamed_addr constant [4 x i8] c" %s\00", align 1
@x86_64_reg_class_name = internal constant [10 x i8*] [i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.221, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.222, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.223, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.49, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.224, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.225, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.226, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.227, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.228, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.221, i32 0, i32 0)], align 16
@__FUNCTION__.construct_container = private unnamed_addr constant [20 x i8] c"construct_container\00", align 1
@.str.221 = private unnamed_addr constant [3 x i8] c"no\00", align 1
@.str.222 = private unnamed_addr constant [8 x i8] c"integer\00", align 1
@.str.223 = private unnamed_addr constant [10 x i8] c"integerSI\00", align 1
@.str.224 = private unnamed_addr constant [6 x i8] c"sseSF\00", align 1
@.str.225 = private unnamed_addr constant [6 x i8] c"sseDF\00", align 1
@.str.226 = private unnamed_addr constant [6 x i8] c"sseup\00", align 1
@.str.227 = private unnamed_addr constant [4 x i8] c"x87\00", align 1
@.str.228 = private unnamed_addr constant [6 x i8] c"x87up\00", align 1
@__FUNCTION__.ix86_compute_frame_layout = private unnamed_addr constant [26 x i8] c"ix86_compute_frame_layout\00", align 1
@current_function_is_leaf = external global i32, align 4
@regs_ever_live = external global [53 x i8], align 16
@ix86_GOT_alias_set.set = internal global i64 -1, align 8
@__FUNCTION__.output_pic_addr_const = private unnamed_addr constant [22 x i8] c"output_pic_addr_const\00", align 1
@.str.229 = private unnamed_addr constant [5 x i8] c"@PLT\00", align 1
@asm_out_file = external global %struct._IO_FILE*, align 8
@.str.230 = private unnamed_addr constant [11 x i8] c"0x%lx%08lx\00", align 1
@.str.231 = private unnamed_addr constant [26 x i8] c"floating constant misused\00", align 1
@.str.232 = private unnamed_addr constant [5 x i8] c"@GOT\00", align 1
@.str.233 = private unnamed_addr constant [8 x i8] c"@GOTOFF\00", align 1
@.str.234 = private unnamed_addr constant [16 x i8] c"@GOTPCREL(%RIP)\00", align 1
@.str.235 = private unnamed_addr constant [26 x i8] c"invalid UNSPEC as operand\00", align 1
@.str.236 = private unnamed_addr constant [30 x i8] c"invalid expression as operand\00", align 1
@.str.237 = private unnamed_addr constant [3 x i8] c"ax\00", align 1
@.str.238 = private unnamed_addr constant [3 x i8] c"dx\00", align 1
@.str.239 = private unnamed_addr constant [3 x i8] c"cx\00", align 1
@.str.240 = private unnamed_addr constant [3 x i8] c"bx\00", align 1
@.str.241 = private unnamed_addr constant [3 x i8] c"si\00", align 1
@.str.242 = private unnamed_addr constant [3 x i8] c"di\00", align 1
@.str.243 = private unnamed_addr constant [3 x i8] c"bp\00", align 1
@.str.244 = private unnamed_addr constant [3 x i8] c"sp\00", align 1
@.str.245 = private unnamed_addr constant [3 x i8] c"st\00", align 1
@.str.246 = private unnamed_addr constant [6 x i8] c"st(1)\00", align 1
@.str.247 = private unnamed_addr constant [6 x i8] c"st(2)\00", align 1
@.str.248 = private unnamed_addr constant [6 x i8] c"st(3)\00", align 1
@.str.249 = private unnamed_addr constant [6 x i8] c"st(4)\00", align 1
@.str.250 = private unnamed_addr constant [6 x i8] c"st(5)\00", align 1
@.str.251 = private unnamed_addr constant [6 x i8] c"st(6)\00", align 1
@.str.252 = private unnamed_addr constant [6 x i8] c"st(7)\00", align 1
@.str.253 = private unnamed_addr constant [6 x i8] c"flags\00", align 1
@.str.254 = private unnamed_addr constant [5 x i8] c"fpsr\00", align 1
@.str.255 = private unnamed_addr constant [8 x i8] c"dirflag\00", align 1
@.str.256 = private unnamed_addr constant [6 x i8] c"frame\00", align 1
@.str.257 = private unnamed_addr constant [5 x i8] c"xmm0\00", align 1
@.str.258 = private unnamed_addr constant [5 x i8] c"xmm1\00", align 1
@.str.259 = private unnamed_addr constant [5 x i8] c"xmm2\00", align 1
@.str.260 = private unnamed_addr constant [5 x i8] c"xmm3\00", align 1
@.str.261 = private unnamed_addr constant [5 x i8] c"xmm4\00", align 1
@.str.262 = private unnamed_addr constant [5 x i8] c"xmm5\00", align 1
@.str.263 = private unnamed_addr constant [5 x i8] c"xmm6\00", align 1
@.str.264 = private unnamed_addr constant [5 x i8] c"xmm7\00", align 1
@.str.265 = private unnamed_addr constant [4 x i8] c"mm0\00", align 1
@.str.266 = private unnamed_addr constant [4 x i8] c"mm1\00", align 1
@.str.267 = private unnamed_addr constant [4 x i8] c"mm2\00", align 1
@.str.268 = private unnamed_addr constant [4 x i8] c"mm3\00", align 1
@.str.269 = private unnamed_addr constant [4 x i8] c"mm4\00", align 1
@.str.270 = private unnamed_addr constant [4 x i8] c"mm5\00", align 1
@.str.271 = private unnamed_addr constant [4 x i8] c"mm6\00", align 1
@.str.272 = private unnamed_addr constant [4 x i8] c"mm7\00", align 1
@.str.273 = private unnamed_addr constant [3 x i8] c"r8\00", align 1
@.str.274 = private unnamed_addr constant [3 x i8] c"r9\00", align 1
@.str.275 = private unnamed_addr constant [4 x i8] c"r10\00", align 1
@.str.276 = private unnamed_addr constant [4 x i8] c"r11\00", align 1
@.str.277 = private unnamed_addr constant [4 x i8] c"r12\00", align 1
@.str.278 = private unnamed_addr constant [4 x i8] c"r13\00", align 1
@.str.279 = private unnamed_addr constant [4 x i8] c"r14\00", align 1
@.str.280 = private unnamed_addr constant [4 x i8] c"r15\00", align 1
@.str.281 = private unnamed_addr constant [5 x i8] c"xmm8\00", align 1
@.str.282 = private unnamed_addr constant [5 x i8] c"xmm9\00", align 1
@.str.283 = private unnamed_addr constant [6 x i8] c"xmm10\00", align 1
@.str.284 = private unnamed_addr constant [6 x i8] c"xmm11\00", align 1
@.str.285 = private unnamed_addr constant [6 x i8] c"xmm12\00", align 1
@.str.286 = private unnamed_addr constant [6 x i8] c"xmm13\00", align 1
@.str.287 = private unnamed_addr constant [6 x i8] c"xmm14\00", align 1
@.str.288 = private unnamed_addr constant [6 x i8] c"xmm15\00", align 1
@.str.289 = private unnamed_addr constant [3 x i8] c"al\00", align 1
@.str.290 = private unnamed_addr constant [3 x i8] c"dl\00", align 1
@.str.291 = private unnamed_addr constant [3 x i8] c"cl\00", align 1
@.str.292 = private unnamed_addr constant [3 x i8] c"bl\00", align 1
@.str.293 = private unnamed_addr constant [4 x i8] c"sil\00", align 1
@.str.294 = private unnamed_addr constant [4 x i8] c"dil\00", align 1
@.str.295 = private unnamed_addr constant [4 x i8] c"bpl\00", align 1
@.str.296 = private unnamed_addr constant [4 x i8] c"spl\00", align 1
@.str.297 = private unnamed_addr constant [3 x i8] c"ah\00", align 1
@.str.298 = private unnamed_addr constant [3 x i8] c"dh\00", align 1
@.str.299 = private unnamed_addr constant [3 x i8] c"ch\00", align 1
@.str.300 = private unnamed_addr constant [3 x i8] c"bh\00", align 1
@__FUNCTION__.put_condition_code = private unnamed_addr constant [19 x i8] c"put_condition_code\00", align 1
@.str.301 = private unnamed_addr constant [2 x i8] c"e\00", align 1
@.str.302 = private unnamed_addr constant [3 x i8] c"ne\00", align 1
@.str.303 = private unnamed_addr constant [2 x i8] c"g\00", align 1
@.str.304 = private unnamed_addr constant [4 x i8] c"nbe\00", align 1
@.str.305 = private unnamed_addr constant [2 x i8] c"a\00", align 1
@.str.306 = private unnamed_addr constant [2 x i8] c"s\00", align 1
@.str.307 = private unnamed_addr constant [2 x i8] c"l\00", align 1
@.str.308 = private unnamed_addr constant [2 x i8] c"b\00", align 1
@.str.309 = private unnamed_addr constant [3 x i8] c"ns\00", align 1
@.str.310 = private unnamed_addr constant [3 x i8] c"ge\00", align 1
@.str.311 = private unnamed_addr constant [3 x i8] c"nb\00", align 1
@.str.312 = private unnamed_addr constant [3 x i8] c"ae\00", align 1
@.str.313 = private unnamed_addr constant [3 x i8] c"be\00", align 1
@.str.314 = private unnamed_addr constant [2 x i8] c"u\00", align 1
@.str.315 = private unnamed_addr constant [2 x i8] c"p\00", align 1
@.str.316 = private unnamed_addr constant [3 x i8] c"nu\00", align 1
@.str.317 = private unnamed_addr constant [3 x i8] c"np\00", align 1
@__FUNCTION__.ix86_fp_comparison_codes = private unnamed_addr constant [25 x i8] c"ix86_fp_comparison_codes\00", align 1
@__FUNCTION__.ix86_fp_comparison_arithmetics_cost = private unnamed_addr constant [36 x i8] c"ix86_fp_comparison_arithmetics_cost\00", align 1
@__FUNCTION__.ix86_expand_fp_compare = private unnamed_addr constant [23 x i8] c"ix86_expand_fp_compare\00", align 1
@__FUNCTION__.ix86_split_to_parts = private unnamed_addr constant [20 x i8] c"ix86_split_to_parts\00", align 1
@__FUNCTION__.memory_address_length = private unnamed_addr constant [22 x i8] c"memory_address_length\00", align 1
@__FUNCTION__.ix86_agi_dependant = private unnamed_addr constant [19 x i8] c"ix86_agi_dependant\00", align 1
@ix86_sched_data = internal global %union.anon.4 zeroinitializer, align 8
@__FUNCTION__.ix86_variable_issue = private unnamed_addr constant [20 x i8] c"ix86_variable_issue\00", align 1
@.str.318 = private unnamed_addr constant [16 x i8] c"PPRO packet: %d\00", align 1
@.str.319 = private unnamed_addr constant [4 x i8] c" %d\00", align 1
@__FUNCTION__.ix86_init_mmx_sse_builtins = private unnamed_addr constant [27 x i8] c"ix86_init_mmx_sse_builtins\00", align 1
@.str.320 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_mmx_zero\00", align 1
@.str.321 = private unnamed_addr constant [20 x i8] c"__builtin_ia32_emms\00", align 1
@.str.322 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_ldmxcsr\00", align 1
@.str.323 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_stmxcsr\00", align 1
@.str.324 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_psllw\00", align 1
@.str.325 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_pslld\00", align 1
@.str.326 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_psllq\00", align 1
@.str.327 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_psrlw\00", align 1
@.str.328 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_psrld\00", align 1
@.str.329 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_psrlq\00", align 1
@.str.330 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_psraw\00", align 1
@.str.331 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_psrad\00", align 1
@.str.332 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_pshufw\00", align 1
@.str.333 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_pmaddwd\00", align 1
@.str.334 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_packsswb\00", align 1
@.str.335 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_packssdw\00", align 1
@.str.336 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_packuswb\00", align 1
@.str.337 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_cvtpi2ps\00", align 1
@.str.338 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_cvtps2pi\00", align 1
@.str.339 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_cvtsi2ss\00", align 1
@.str.340 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_cvtss2si\00", align 1
@.str.341 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_cvttps2pi\00", align 1
@.str.342 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_cvttss2si\00", align 1
@.str.343 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_andps\00", align 1
@.str.344 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_andnps\00", align 1
@.str.345 = private unnamed_addr constant [20 x i8] c"__builtin_ia32_orps\00", align 1
@.str.346 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_xorps\00", align 1
@.str.347 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_pextrw\00", align 1
@.str.348 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_pinsrw\00", align 1
@.str.349 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_maskmovq\00", align 1
@.str.350 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_loadaps\00", align 1
@.str.351 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_loadups\00", align 1
@.str.352 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_loadss\00", align 1
@.str.353 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_storeaps\00", align 1
@.str.354 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_storeups\00", align 1
@.str.355 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_storess\00", align 1
@.str.356 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_loadhps\00", align 1
@.str.357 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_loadlps\00", align 1
@.str.358 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_storehps\00", align 1
@.str.359 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_storelps\00", align 1
@.str.360 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_movmskps\00", align 1
@.str.361 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_pmovmskb\00", align 1
@.str.362 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_movntps\00", align 1
@.str.363 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_movntq\00", align 1
@.str.364 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_sfence\00", align 1
@.str.365 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_psadbw\00", align 1
@.str.366 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_rcpps\00", align 1
@.str.367 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_rcpss\00", align 1
@.str.368 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_rsqrtps\00", align 1
@.str.369 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_rsqrtss\00", align 1
@.str.370 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_sqrtps\00", align 1
@.str.371 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_sqrtss\00", align 1
@.str.372 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_shufps\00", align 1
@.str.373 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_femms\00", align 1
@.str.374 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_pavgusb\00", align 1
@.str.375 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_pf2id\00", align 1
@.str.376 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_pfacc\00", align 1
@.str.377 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_pfadd\00", align 1
@.str.378 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_pfcmpeq\00", align 1
@.str.379 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_pfcmpge\00", align 1
@.str.380 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_pfcmpgt\00", align 1
@.str.381 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_pfmax\00", align 1
@.str.382 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_pfmin\00", align 1
@.str.383 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_pfmul\00", align 1
@.str.384 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_pfrcp\00", align 1
@.str.385 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_pfrcpit1\00", align 1
@.str.386 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_pfrcpit2\00", align 1
@.str.387 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_pfrsqrt\00", align 1
@.str.388 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_pfrsqit1\00", align 1
@.str.389 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_pfsub\00", align 1
@.str.390 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_pfsubr\00", align 1
@.str.391 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_pi2fd\00", align 1
@.str.392 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_pmulhrw\00", align 1
@.str.393 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_pf2iw\00", align 1
@.str.394 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_pfnacc\00", align 1
@.str.395 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_pfpnacc\00", align 1
@.str.396 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_pi2fw\00", align 1
@.str.397 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_pswapdsf\00", align 1
@.str.398 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_pswapdsi\00", align 1
@.str.399 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_setzerops\00", align 1
@__FUNCTION__.ix86_expand_binop_builtin = private unnamed_addr constant [26 x i8] c"ix86_expand_binop_builtin\00", align 1
@.str.400 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_addps\00", align 1
@.str.401 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_subps\00", align 1
@.str.402 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_mulps\00", align 1
@.str.403 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_divps\00", align 1
@.str.404 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_addss\00", align 1
@.str.405 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_subss\00", align 1
@.str.406 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_mulss\00", align 1
@.str.407 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_divss\00", align 1
@.str.408 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_cmpeqps\00", align 1
@.str.409 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_cmpltps\00", align 1
@.str.410 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_cmpleps\00", align 1
@.str.411 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_cmpgtps\00", align 1
@.str.412 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_cmpgeps\00", align 1
@.str.413 = private unnamed_addr constant [26 x i8] c"__builtin_ia32_cmpunordps\00", align 1
@.str.414 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_cmpneqps\00", align 1
@.str.415 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_cmpnltps\00", align 1
@.str.416 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_cmpnleps\00", align 1
@.str.417 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_cmpngtps\00", align 1
@.str.418 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_cmpngeps\00", align 1
@.str.419 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_cmpordps\00", align 1
@.str.420 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_cmpeqss\00", align 1
@.str.421 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_cmpltss\00", align 1
@.str.422 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_cmpless\00", align 1
@.str.423 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_cmpgtss\00", align 1
@.str.424 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_cmpgess\00", align 1
@.str.425 = private unnamed_addr constant [26 x i8] c"__builtin_ia32_cmpunordss\00", align 1
@.str.426 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_cmpneqss\00", align 1
@.str.427 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_cmpnltss\00", align 1
@.str.428 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_cmpnless\00", align 1
@.str.429 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_cmpngtss\00", align 1
@.str.430 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_cmpngess\00", align 1
@.str.431 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_cmpordss\00", align 1
@.str.432 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_minps\00", align 1
@.str.433 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_maxps\00", align 1
@.str.434 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_minss\00", align 1
@.str.435 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_maxss\00", align 1
@.str.436 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_movss\00", align 1
@.str.437 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_movhlps\00", align 1
@.str.438 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_movlhps\00", align 1
@.str.439 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_unpckhps\00", align 1
@.str.440 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_unpcklps\00", align 1
@.str.441 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_paddb\00", align 1
@.str.442 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_paddw\00", align 1
@.str.443 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_paddd\00", align 1
@.str.444 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_psubb\00", align 1
@.str.445 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_psubw\00", align 1
@.str.446 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_psubd\00", align 1
@.str.447 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_paddsb\00", align 1
@.str.448 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_paddsw\00", align 1
@.str.449 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_psubsb\00", align 1
@.str.450 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_psubsw\00", align 1
@.str.451 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_paddusb\00", align 1
@.str.452 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_paddusw\00", align 1
@.str.453 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_psubusb\00", align 1
@.str.454 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_psubusw\00", align 1
@.str.455 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_pmullw\00", align 1
@.str.456 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_pmulhw\00", align 1
@.str.457 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_pmulhuw\00", align 1
@.str.458 = private unnamed_addr constant [20 x i8] c"__builtin_ia32_pand\00", align 1
@.str.459 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_pandn\00", align 1
@.str.460 = private unnamed_addr constant [19 x i8] c"__builtin_ia32_por\00", align 1
@.str.461 = private unnamed_addr constant [20 x i8] c"__builtin_ia32_pxor\00", align 1
@.str.462 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_pavgb\00", align 1
@.str.463 = private unnamed_addr constant [21 x i8] c"__builtin_ia32_pavgw\00", align 1
@.str.464 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_pcmpeqb\00", align 1
@.str.465 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_pcmpeqw\00", align 1
@.str.466 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_pcmpeqd\00", align 1
@.str.467 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_pcmpgtb\00", align 1
@.str.468 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_pcmpgtw\00", align 1
@.str.469 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_pcmpgtd\00", align 1
@.str.470 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_pmaxub\00", align 1
@.str.471 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_pmaxsw\00", align 1
@.str.472 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_pminub\00", align 1
@.str.473 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_pminsw\00", align 1
@.str.474 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_punpckhbw\00", align 1
@.str.475 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_punpckhwd\00", align 1
@.str.476 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_punpckhdq\00", align 1
@.str.477 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_punpcklbw\00", align 1
@.str.478 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_punpcklwd\00", align 1
@.str.479 = private unnamed_addr constant [25 x i8] c"__builtin_ia32_punpckldq\00", align 1
@.str.480 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_comieq\00", align 1
@.str.481 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_comilt\00", align 1
@.str.482 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_comile\00", align 1
@.str.483 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_comigt\00", align 1
@.str.484 = private unnamed_addr constant [22 x i8] c"__builtin_ia32_comige\00", align 1
@.str.485 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_comineq\00", align 1
@.str.486 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_ucomieq\00", align 1
@.str.487 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_ucomilt\00", align 1
@.str.488 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_ucomile\00", align 1
@.str.489 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_ucomigt\00", align 1
@.str.490 = private unnamed_addr constant [23 x i8] c"__builtin_ia32_ucomige\00", align 1
@.str.491 = private unnamed_addr constant [24 x i8] c"__builtin_ia32_ucomineq\00", align 1

declare zeroext i1 @default_assemble_integer(%struct.rtx_def*, i32, i32) #0

declare void @default_function_pro_epilogue(%struct._IO_FILE*, i64) #0

declare void @no_asm_to_stream(%struct._IO_FILE*) #0

declare void @default_elf_asm_named_section(i8*, i32) #0

declare void @default_exception_section() #0

declare void @default_eh_frame_section() #0

declare void @default_named_section_asm_out_constructor(%struct.rtx_def*, i32) #0

declare void @default_named_section_asm_out_destructor(%struct.rtx_def*, i32) #0

; Function Attrs: nounwind uwtable
define internal i32 @ix86_adjust_cost(%struct.rtx_def* %insn, %struct.rtx_def* %link, %struct.rtx_def* %dep_insn, i32 %cost) #1 {
entry:
  %retval = alloca i32, align 4
  %insn.addr = alloca %struct.rtx_def*, align 8
  %link.addr = alloca %struct.rtx_def*, align 8
  %dep_insn.addr = alloca %struct.rtx_def*, align 8
  %cost.addr = alloca i32, align 4
  %insn_type = alloca i32, align 4
  %dep_insn_type = alloca i32, align 4
  %memory = alloca i32, align 4
  %dep_memory = alloca i32, align 4
  %set = alloca %struct.rtx_def*, align 8
  %set2 = alloca %struct.rtx_def*, align 8
  %dep_insn_code_number = alloca i32, align 4
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  store %struct.rtx_def* %link, %struct.rtx_def** %link.addr, align 8
  store %struct.rtx_def* %dep_insn, %struct.rtx_def** %dep_insn.addr, align 8
  store i32 %cost, i32* %cost.addr, align 4
  %0 = load %struct.rtx_def*, %struct.rtx_def** %link.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %cmp = icmp ne i32 %bf.clear, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %dep_insn.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 4
  %rtint = bitcast %union.rtunion_def* %arrayidx to i32*
  %3 = load i32, i32* %rtint, align 4
  %cmp1 = icmp sge i32 %3, 0
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %4 = load %struct.rtx_def*, %struct.rtx_def** %dep_insn.addr, align 8
  %fld2 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i32 0, i64 4
  %rtint4 = bitcast %union.rtunion_def* %arrayidx3 to i32*
  %5 = load i32, i32* %rtint4, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %6 = load %struct.rtx_def*, %struct.rtx_def** %dep_insn.addr, align 8
  %call = call i32 @recog_memoized_1(%struct.rtx_def* %6)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %5, %cond.true ], [ %call, %cond.false ]
  store i32 %cond, i32* %dep_insn_code_number, align 4
  %7 = load i32, i32* %dep_insn_code_number, align 4
  %cmp5 = icmp slt i32 %7, 0
  br i1 %cmp5, label %if.then.19, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld6 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld6, i32 0, i64 4
  %rtint8 = bitcast %union.rtunion_def* %arrayidx7 to i32*
  %9 = load i32, i32* %rtint8, align 4
  %cmp9 = icmp sge i32 %9, 0
  br i1 %cmp9, label %cond.true.10, label %cond.false.14

cond.true.10:                                     ; preds = %lor.lhs.false
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld11 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1
  %arrayidx12 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld11, i32 0, i64 4
  %rtint13 = bitcast %union.rtunion_def* %arrayidx12 to i32*
  %11 = load i32, i32* %rtint13, align 4
  br label %cond.end.16

cond.false.14:                                    ; preds = %lor.lhs.false
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call15 = call i32 @recog_memoized_1(%struct.rtx_def* %12)
  br label %cond.end.16

cond.end.16:                                      ; preds = %cond.false.14, %cond.true.10
  %cond17 = phi i32 [ %11, %cond.true.10 ], [ %call15, %cond.false.14 ]
  %cmp18 = icmp slt i32 %cond17, 0
  br i1 %cmp18, label %if.then.19, label %if.end.20

if.then.19:                                       ; preds = %cond.end.16, %cond.end
  %13 = load i32, i32* %cost.addr, align 4
  store i32 %13, i32* %retval
  br label %return

if.end.20:                                        ; preds = %cond.end.16
  %14 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call21 = call i32 @get_attr_type(%struct.rtx_def* %14)
  store i32 %call21, i32* %insn_type, align 4
  %15 = load %struct.rtx_def*, %struct.rtx_def** %dep_insn.addr, align 8
  %call22 = call i32 @get_attr_type(%struct.rtx_def* %15)
  store i32 %call22, i32* %dep_insn_type, align 4
  %16 = load i32, i32* @ix86_cpu, align 4
  switch i32 %16, label %sw.default [
    i32 2, label %sw.bb
    i32 3, label %sw.bb.39
    i32 4, label %sw.bb.160
    i32 5, label %sw.bb.215
  ]

sw.bb:                                            ; preds = %if.end.20
  %17 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %18 = load %struct.rtx_def*, %struct.rtx_def** %dep_insn.addr, align 8
  %19 = load i32, i32* %insn_type, align 4
  %call23 = call i32 @ix86_agi_dependant(%struct.rtx_def* %17, %struct.rtx_def* %18, i32 %19)
  %tobool = icmp ne i32 %call23, 0
  br i1 %tobool, label %if.then.24, label %if.end.25

if.then.24:                                       ; preds = %sw.bb
  %20 = load i32, i32* %cost.addr, align 4
  %add = add nsw i32 %20, 1
  store i32 %add, i32* %cost.addr, align 4
  br label %if.end.25

if.end.25:                                        ; preds = %if.then.24, %sw.bb
  %21 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %22 = load %struct.rtx_def*, %struct.rtx_def** %dep_insn.addr, align 8
  %23 = load i32, i32* %insn_type, align 4
  %call26 = call i32 @ix86_flags_dependant(%struct.rtx_def* %21, %struct.rtx_def* %22, i32 %23)
  %tobool27 = icmp ne i32 %call26, 0
  br i1 %tobool27, label %if.then.28, label %if.end.29

if.then.28:                                       ; preds = %if.end.25
  store i32 0, i32* %cost.addr, align 4
  br label %if.end.29

if.end.29:                                        ; preds = %if.then.28, %if.end.25
  %24 = load i32, i32* %insn_type, align 4
  %cmp30 = icmp eq i32 %24, 21
  br i1 %cmp30, label %land.lhs.true, label %if.end.38

land.lhs.true:                                    ; preds = %if.end.29
  %25 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call31 = call i32 @get_attr_memory(%struct.rtx_def* %25)
  %cmp32 = icmp eq i32 %call31, 2
  br i1 %cmp32, label %land.lhs.true.33, label %if.end.38

land.lhs.true.33:                                 ; preds = %land.lhs.true
  %26 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %27 = load %struct.rtx_def*, %struct.rtx_def** %dep_insn.addr, align 8
  %28 = load i32, i32* %insn_type, align 4
  %call34 = call i32 @ix86_agi_dependant(%struct.rtx_def* %26, %struct.rtx_def* %27, i32 %28)
  %tobool35 = icmp ne i32 %call34, 0
  br i1 %tobool35, label %if.end.38, label %if.then.36

if.then.36:                                       ; preds = %land.lhs.true.33
  %29 = load i32, i32* %cost.addr, align 4
  %add37 = add nsw i32 %29, 1
  store i32 %add37, i32* %cost.addr, align 4
  br label %if.end.38

if.end.38:                                        ; preds = %if.then.36, %land.lhs.true.33, %land.lhs.true, %if.end.29
  br label %sw.epilog

sw.bb.39:                                         ; preds = %if.end.20
  %30 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call40 = call i32 @get_attr_memory(%struct.rtx_def* %30)
  store i32 %call40, i32* %memory, align 4
  %31 = load %struct.rtx_def*, %struct.rtx_def** %dep_insn.addr, align 8
  %call41 = call i32 @get_attr_memory(%struct.rtx_def* %31)
  store i32 %call41, i32* %dep_memory, align 4
  %32 = load i32, i32* %dep_insn_type, align 4
  %cmp42 = icmp ne i32 %32, 7
  br i1 %cmp42, label %land.lhs.true.43, label %if.end.51

land.lhs.true.43:                                 ; preds = %sw.bb.39
  %33 = load i32, i32* %dep_insn_type, align 4
  %cmp44 = icmp ne i32 %33, 21
  br i1 %cmp44, label %land.lhs.true.45, label %if.end.51

land.lhs.true.45:                                 ; preds = %land.lhs.true.43
  %34 = load i32, i32* %dep_memory, align 4
  %cmp46 = icmp eq i32 %34, 1
  br i1 %cmp46, label %if.then.49, label %lor.lhs.false.47

lor.lhs.false.47:                                 ; preds = %land.lhs.true.45
  %35 = load i32, i32* %dep_memory, align 4
  %cmp48 = icmp eq i32 %35, 3
  br i1 %cmp48, label %if.then.49, label %if.end.51

if.then.49:                                       ; preds = %lor.lhs.false.47, %land.lhs.true.45
  %36 = load i32, i32* %cost.addr, align 4
  %add50 = add nsw i32 %36, 1
  store i32 %add50, i32* %cost.addr, align 4
  br label %if.end.51

if.end.51:                                        ; preds = %if.then.49, %lor.lhs.false.47, %land.lhs.true.43, %sw.bb.39
  %37 = load %struct.rtx_def*, %struct.rtx_def** %dep_insn.addr, align 8
  %call52 = call i32 @get_attr_fp_int_src(%struct.rtx_def* %37)
  %tobool53 = icmp ne i32 %call52, 0
  br i1 %tobool53, label %if.then.54, label %if.end.56

if.then.54:                                       ; preds = %if.end.51
  %38 = load i32, i32* %cost.addr, align 4
  %add55 = add nsw i32 %38, 5
  store i32 %add55, i32* %cost.addr, align 4
  br label %if.end.56

if.end.56:                                        ; preds = %if.then.54, %if.end.51
  %39 = load i32, i32* %insn_type, align 4
  %cmp57 = icmp eq i32 %39, 21
  br i1 %cmp57, label %land.lhs.true.58, label %if.end.138

land.lhs.true.58:                                 ; preds = %if.end.56
  %40 = load %struct.rtx_def*, %struct.rtx_def** %dep_insn.addr, align 8
  %41 = bitcast %struct.rtx_def* %40 to i32*
  %bf.load59 = load i32, i32* %41, align 8
  %bf.clear60 = and i32 %bf.load59, 65535
  %idxprom = sext i32 %bf.clear60 to i64
  %arrayidx61 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom
  %42 = load i8, i8* %arrayidx61, align 1
  %conv = sext i8 %42 to i32
  %cmp62 = icmp eq i32 %conv, 105
  br i1 %cmp62, label %cond.true.64, label %cond.false.82

cond.true.64:                                     ; preds = %land.lhs.true.58
  %43 = load %struct.rtx_def*, %struct.rtx_def** %dep_insn.addr, align 8
  %fld65 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %43, i32 0, i32 1
  %arrayidx66 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld65, i32 0, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx66 to %struct.rtx_def**
  %44 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %45 = bitcast %struct.rtx_def* %44 to i32*
  %bf.load67 = load i32, i32* %45, align 8
  %bf.clear68 = and i32 %bf.load67, 65535
  %cmp69 = icmp eq i32 %bf.clear68, 47
  br i1 %cmp69, label %cond.true.71, label %cond.false.75

cond.true.71:                                     ; preds = %cond.true.64
  %46 = load %struct.rtx_def*, %struct.rtx_def** %dep_insn.addr, align 8
  %fld72 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %46, i32 0, i32 1
  %arrayidx73 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld72, i32 0, i64 3
  %rtx74 = bitcast %union.rtunion_def* %arrayidx73 to %struct.rtx_def**
  %47 = load %struct.rtx_def*, %struct.rtx_def** %rtx74, align 8
  br label %cond.end.80

cond.false.75:                                    ; preds = %cond.true.64
  %48 = load %struct.rtx_def*, %struct.rtx_def** %dep_insn.addr, align 8
  %49 = load %struct.rtx_def*, %struct.rtx_def** %dep_insn.addr, align 8
  %fld76 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %49, i32 0, i32 1
  %arrayidx77 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld76, i32 0, i64 3
  %rtx78 = bitcast %union.rtunion_def* %arrayidx77 to %struct.rtx_def**
  %50 = load %struct.rtx_def*, %struct.rtx_def** %rtx78, align 8
  %call79 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %48, %struct.rtx_def* %50)
  br label %cond.end.80

cond.end.80:                                      ; preds = %cond.false.75, %cond.true.71
  %cond81 = phi %struct.rtx_def* [ %47, %cond.true.71 ], [ %call79, %cond.false.75 ]
  br label %cond.end.83

cond.false.82:                                    ; preds = %land.lhs.true.58
  br label %cond.end.83

cond.end.83:                                      ; preds = %cond.false.82, %cond.end.80
  %cond84 = phi %struct.rtx_def* [ %cond81, %cond.end.80 ], [ null, %cond.false.82 ]
  store %struct.rtx_def* %cond84, %struct.rtx_def** %set, align 8
  %cmp85 = icmp ne %struct.rtx_def* %cond84, null
  br i1 %cmp85, label %land.lhs.true.87, label %if.end.138

land.lhs.true.87:                                 ; preds = %cond.end.83
  %51 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %52 = bitcast %struct.rtx_def* %51 to i32*
  %bf.load88 = load i32, i32* %52, align 8
  %bf.clear89 = and i32 %bf.load88, 65535
  %idxprom90 = sext i32 %bf.clear89 to i64
  %arrayidx91 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom90
  %53 = load i8, i8* %arrayidx91, align 1
  %conv92 = sext i8 %53 to i32
  %cmp93 = icmp eq i32 %conv92, 105
  br i1 %cmp93, label %cond.true.95, label %cond.false.114

cond.true.95:                                     ; preds = %land.lhs.true.87
  %54 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld96 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %54, i32 0, i32 1
  %arrayidx97 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld96, i32 0, i64 3
  %rtx98 = bitcast %union.rtunion_def* %arrayidx97 to %struct.rtx_def**
  %55 = load %struct.rtx_def*, %struct.rtx_def** %rtx98, align 8
  %56 = bitcast %struct.rtx_def* %55 to i32*
  %bf.load99 = load i32, i32* %56, align 8
  %bf.clear100 = and i32 %bf.load99, 65535
  %cmp101 = icmp eq i32 %bf.clear100, 47
  br i1 %cmp101, label %cond.true.103, label %cond.false.107

cond.true.103:                                    ; preds = %cond.true.95
  %57 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld104 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %57, i32 0, i32 1
  %arrayidx105 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld104, i32 0, i64 3
  %rtx106 = bitcast %union.rtunion_def* %arrayidx105 to %struct.rtx_def**
  %58 = load %struct.rtx_def*, %struct.rtx_def** %rtx106, align 8
  br label %cond.end.112

cond.false.107:                                   ; preds = %cond.true.95
  %59 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %60 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld108 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %60, i32 0, i32 1
  %arrayidx109 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld108, i32 0, i64 3
  %rtx110 = bitcast %union.rtunion_def* %arrayidx109 to %struct.rtx_def**
  %61 = load %struct.rtx_def*, %struct.rtx_def** %rtx110, align 8
  %call111 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %59, %struct.rtx_def* %61)
  br label %cond.end.112

cond.end.112:                                     ; preds = %cond.false.107, %cond.true.103
  %cond113 = phi %struct.rtx_def* [ %58, %cond.true.103 ], [ %call111, %cond.false.107 ]
  br label %cond.end.115

cond.false.114:                                   ; preds = %land.lhs.true.87
  br label %cond.end.115

cond.end.115:                                     ; preds = %cond.false.114, %cond.end.112
  %cond116 = phi %struct.rtx_def* [ %cond113, %cond.end.112 ], [ null, %cond.false.114 ]
  store %struct.rtx_def* %cond116, %struct.rtx_def** %set2, align 8
  %cmp117 = icmp ne %struct.rtx_def* %cond116, null
  br i1 %cmp117, label %land.lhs.true.119, label %if.end.138

land.lhs.true.119:                                ; preds = %cond.end.115
  %62 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld120 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %62, i32 0, i32 1
  %arrayidx121 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld120, i32 0, i64 0
  %rtx122 = bitcast %union.rtunion_def* %arrayidx121 to %struct.rtx_def**
  %63 = load %struct.rtx_def*, %struct.rtx_def** %rtx122, align 8
  %64 = load %struct.rtx_def*, %struct.rtx_def** %set2, align 8
  %fld123 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %64, i32 0, i32 1
  %arrayidx124 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld123, i32 0, i64 1
  %rtx125 = bitcast %union.rtunion_def* %arrayidx124 to %struct.rtx_def**
  %65 = load %struct.rtx_def*, %struct.rtx_def** %rtx125, align 8
  %call126 = call i32 @rtx_equal_p(%struct.rtx_def* %63, %struct.rtx_def* %65)
  %tobool127 = icmp ne i32 %call126, 0
  br i1 %tobool127, label %land.lhs.true.128, label %if.end.138

land.lhs.true.128:                                ; preds = %land.lhs.true.119
  %66 = load %struct.rtx_def*, %struct.rtx_def** %set2, align 8
  %fld129 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %66, i32 0, i32 1
  %arrayidx130 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld129, i32 0, i64 0
  %rtx131 = bitcast %union.rtunion_def* %arrayidx130 to %struct.rtx_def**
  %67 = load %struct.rtx_def*, %struct.rtx_def** %rtx131, align 8
  %68 = bitcast %struct.rtx_def* %67 to i32*
  %bf.load132 = load i32, i32* %68, align 8
  %bf.clear133 = and i32 %bf.load132, 65535
  %cmp134 = icmp eq i32 %bf.clear133, 66
  br i1 %cmp134, label %if.then.136, label %if.end.138

if.then.136:                                      ; preds = %land.lhs.true.128
  %69 = load i32, i32* %cost.addr, align 4
  %add137 = add nsw i32 %69, 1
  store i32 %add137, i32* %cost.addr, align 4
  br label %if.end.138

if.end.138:                                       ; preds = %if.then.136, %land.lhs.true.128, %land.lhs.true.119, %cond.end.115, %cond.end.83, %if.end.56
  %70 = load i32, i32* %memory, align 4
  %cmp139 = icmp eq i32 %70, 1
  br i1 %cmp139, label %land.lhs.true.144, label %lor.lhs.false.141

lor.lhs.false.141:                                ; preds = %if.end.138
  %71 = load i32, i32* %memory, align 4
  %cmp142 = icmp eq i32 %71, 3
  br i1 %cmp142, label %land.lhs.true.144, label %if.end.159

land.lhs.true.144:                                ; preds = %lor.lhs.false.141, %if.end.138
  %72 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %73 = load %struct.rtx_def*, %struct.rtx_def** %dep_insn.addr, align 8
  %74 = load i32, i32* %insn_type, align 4
  %call145 = call i32 @ix86_agi_dependant(%struct.rtx_def* %72, %struct.rtx_def* %73, i32 %74)
  %tobool146 = icmp ne i32 %call145, 0
  br i1 %tobool146, label %if.end.159, label %if.then.147

if.then.147:                                      ; preds = %land.lhs.true.144
  %75 = load i32, i32* %dep_insn_type, align 4
  %cmp148 = icmp eq i32 %75, 7
  br i1 %cmp148, label %if.then.153, label %lor.lhs.false.150

lor.lhs.false.150:                                ; preds = %if.then.147
  %76 = load i32, i32* %dep_insn_type, align 4
  %cmp151 = icmp eq i32 %76, 21
  br i1 %cmp151, label %if.then.153, label %if.else

if.then.153:                                      ; preds = %lor.lhs.false.150, %if.then.147
  store i32 1, i32* %cost.addr, align 4
  br label %if.end.158

if.else:                                          ; preds = %lor.lhs.false.150
  %77 = load i32, i32* %cost.addr, align 4
  %cmp154 = icmp sgt i32 %77, 1
  br i1 %cmp154, label %if.then.156, label %if.end.157

if.then.156:                                      ; preds = %if.else
  %78 = load i32, i32* %cost.addr, align 4
  %dec = add nsw i32 %78, -1
  store i32 %dec, i32* %cost.addr, align 4
  br label %if.end.157

if.end.157:                                       ; preds = %if.then.156, %if.else
  br label %if.end.158

if.end.158:                                       ; preds = %if.end.157, %if.then.153
  br label %if.end.159

if.end.159:                                       ; preds = %if.end.158, %land.lhs.true.144, %lor.lhs.false.141
  br label %sw.epilog

sw.bb.160:                                        ; preds = %if.end.20
  %79 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call161 = call i32 @get_attr_memory(%struct.rtx_def* %79)
  store i32 %call161, i32* %memory, align 4
  %80 = load %struct.rtx_def*, %struct.rtx_def** %dep_insn.addr, align 8
  %call162 = call i32 @get_attr_memory(%struct.rtx_def* %80)
  store i32 %call162, i32* %dep_memory, align 4
  %81 = load i32, i32* %insn_type, align 4
  %cmp163 = icmp eq i32 %81, 16
  br i1 %cmp163, label %land.lhs.true.168, label %lor.lhs.false.165

lor.lhs.false.165:                                ; preds = %sw.bb.160
  %82 = load i32, i32* %insn_type, align 4
  %cmp166 = icmp eq i32 %82, 17
  br i1 %cmp166, label %land.lhs.true.168, label %if.end.175

land.lhs.true.168:                                ; preds = %lor.lhs.false.165, %sw.bb.160
  %83 = load i32, i32* %dep_insn_type, align 4
  %cmp169 = icmp eq i32 %83, 16
  br i1 %cmp169, label %if.then.174, label %lor.lhs.false.171

lor.lhs.false.171:                                ; preds = %land.lhs.true.168
  %84 = load i32, i32* %dep_insn_type, align 4
  %cmp172 = icmp eq i32 %84, 17
  br i1 %cmp172, label %if.then.174, label %if.end.175

if.then.174:                                      ; preds = %lor.lhs.false.171, %land.lhs.true.168
  store i32 1, i32* %retval
  br label %return

if.end.175:                                       ; preds = %lor.lhs.false.171, %lor.lhs.false.165
  %85 = load i32, i32* %dep_memory, align 4
  %cmp176 = icmp eq i32 %85, 1
  br i1 %cmp176, label %if.then.181, label %lor.lhs.false.178

lor.lhs.false.178:                                ; preds = %if.end.175
  %86 = load i32, i32* %dep_memory, align 4
  %cmp179 = icmp eq i32 %86, 3
  br i1 %cmp179, label %if.then.181, label %if.end.186

if.then.181:                                      ; preds = %lor.lhs.false.178, %if.end.175
  %87 = load i32, i32* %dep_insn_type, align 4
  %cmp182 = icmp ne i32 %87, 7
  %cond184 = select i1 %cmp182, i32 2, i32 1
  %88 = load i32, i32* %cost.addr, align 4
  %add185 = add nsw i32 %88, %cond184
  store i32 %add185, i32* %cost.addr, align 4
  br label %if.end.186

if.end.186:                                       ; preds = %if.then.181, %lor.lhs.false.178
  %89 = load %struct.rtx_def*, %struct.rtx_def** %dep_insn.addr, align 8
  %call187 = call i32 @get_attr_fp_int_src(%struct.rtx_def* %89)
  %tobool188 = icmp ne i32 %call187, 0
  br i1 %tobool188, label %if.then.189, label %if.end.191

if.then.189:                                      ; preds = %if.end.186
  %90 = load i32, i32* %cost.addr, align 4
  %add190 = add nsw i32 %90, 5
  store i32 %add190, i32* %cost.addr, align 4
  br label %if.end.191

if.end.191:                                       ; preds = %if.then.189, %if.end.186
  %91 = load i32, i32* %memory, align 4
  %cmp192 = icmp eq i32 %91, 1
  br i1 %cmp192, label %land.lhs.true.197, label %lor.lhs.false.194

lor.lhs.false.194:                                ; preds = %if.end.191
  %92 = load i32, i32* %memory, align 4
  %cmp195 = icmp eq i32 %92, 3
  br i1 %cmp195, label %land.lhs.true.197, label %if.end.214

land.lhs.true.197:                                ; preds = %lor.lhs.false.194, %if.end.191
  %93 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %94 = load %struct.rtx_def*, %struct.rtx_def** %dep_insn.addr, align 8
  %95 = load i32, i32* %insn_type, align 4
  %call198 = call i32 @ix86_agi_dependant(%struct.rtx_def* %93, %struct.rtx_def* %94, i32 %95)
  %tobool199 = icmp ne i32 %call198, 0
  br i1 %tobool199, label %if.end.214, label %if.then.200

if.then.200:                                      ; preds = %land.lhs.true.197
  %96 = load i32, i32* %dep_insn_type, align 4
  %cmp201 = icmp eq i32 %96, 7
  br i1 %cmp201, label %if.then.206, label %lor.lhs.false.203

lor.lhs.false.203:                                ; preds = %if.then.200
  %97 = load i32, i32* %dep_insn_type, align 4
  %cmp204 = icmp eq i32 %97, 21
  br i1 %cmp204, label %if.then.206, label %if.else.207

if.then.206:                                      ; preds = %lor.lhs.false.203, %if.then.200
  store i32 1, i32* %cost.addr, align 4
  br label %if.end.213

if.else.207:                                      ; preds = %lor.lhs.false.203
  %98 = load i32, i32* %cost.addr, align 4
  %cmp208 = icmp sgt i32 %98, 2
  br i1 %cmp208, label %if.then.210, label %if.else.211

if.then.210:                                      ; preds = %if.else.207
  %99 = load i32, i32* %cost.addr, align 4
  %sub = sub nsw i32 %99, 2
  store i32 %sub, i32* %cost.addr, align 4
  br label %if.end.212

if.else.211:                                      ; preds = %if.else.207
  store i32 1, i32* %cost.addr, align 4
  br label %if.end.212

if.end.212:                                       ; preds = %if.else.211, %if.then.210
  br label %if.end.213

if.end.213:                                       ; preds = %if.end.212, %if.then.206
  br label %if.end.214

if.end.214:                                       ; preds = %if.end.213, %land.lhs.true.197, %lor.lhs.false.194
  br label %sw.epilog

sw.bb.215:                                        ; preds = %if.end.20
  %100 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call216 = call i32 @get_attr_memory(%struct.rtx_def* %100)
  store i32 %call216, i32* %memory, align 4
  %101 = load %struct.rtx_def*, %struct.rtx_def** %dep_insn.addr, align 8
  %call217 = call i32 @get_attr_memory(%struct.rtx_def* %101)
  store i32 %call217, i32* %dep_memory, align 4
  %102 = load i32, i32* %dep_memory, align 4
  %cmp218 = icmp eq i32 %102, 1
  br i1 %cmp218, label %if.then.223, label %lor.lhs.false.220

lor.lhs.false.220:                                ; preds = %sw.bb.215
  %103 = load i32, i32* %dep_memory, align 4
  %cmp221 = icmp eq i32 %103, 3
  br i1 %cmp221, label %if.then.223, label %if.end.234

if.then.223:                                      ; preds = %lor.lhs.false.220, %sw.bb.215
  %104 = load i32, i32* %dep_insn_type, align 4
  %cmp224 = icmp eq i32 %104, 7
  br i1 %cmp224, label %if.then.229, label %lor.lhs.false.226

lor.lhs.false.226:                                ; preds = %if.then.223
  %105 = load i32, i32* %dep_insn_type, align 4
  %cmp227 = icmp eq i32 %105, 21
  br i1 %cmp227, label %if.then.229, label %if.else.231

if.then.229:                                      ; preds = %lor.lhs.false.226, %if.then.223
  %106 = load i32, i32* %cost.addr, align 4
  %add230 = add nsw i32 %106, 2
  store i32 %add230, i32* %cost.addr, align 4
  br label %if.end.233

if.else.231:                                      ; preds = %lor.lhs.false.226
  %107 = load i32, i32* %cost.addr, align 4
  %add232 = add nsw i32 %107, 3
  store i32 %add232, i32* %cost.addr, align 4
  br label %if.end.233

if.end.233:                                       ; preds = %if.else.231, %if.then.229
  br label %if.end.234

if.end.234:                                       ; preds = %if.end.233, %lor.lhs.false.220
  %108 = load i32, i32* %memory, align 4
  %cmp235 = icmp eq i32 %108, 1
  br i1 %cmp235, label %land.lhs.true.240, label %lor.lhs.false.237

lor.lhs.false.237:                                ; preds = %if.end.234
  %109 = load i32, i32* %memory, align 4
  %cmp238 = icmp eq i32 %109, 3
  br i1 %cmp238, label %land.lhs.true.240, label %if.end.258

land.lhs.true.240:                                ; preds = %lor.lhs.false.237, %if.end.234
  %110 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %111 = load %struct.rtx_def*, %struct.rtx_def** %dep_insn.addr, align 8
  %112 = load i32, i32* %insn_type, align 4
  %call241 = call i32 @ix86_agi_dependant(%struct.rtx_def* %110, %struct.rtx_def* %111, i32 %112)
  %tobool242 = icmp ne i32 %call241, 0
  br i1 %tobool242, label %if.end.258, label %if.then.243

if.then.243:                                      ; preds = %land.lhs.true.240
  %113 = load i32, i32* %dep_insn_type, align 4
  %cmp244 = icmp eq i32 %113, 7
  br i1 %cmp244, label %if.then.249, label %lor.lhs.false.246

lor.lhs.false.246:                                ; preds = %if.then.243
  %114 = load i32, i32* %dep_insn_type, align 4
  %cmp247 = icmp eq i32 %114, 21
  br i1 %cmp247, label %if.then.249, label %if.else.250

if.then.249:                                      ; preds = %lor.lhs.false.246, %if.then.243
  store i32 0, i32* %cost.addr, align 4
  br label %if.end.257

if.else.250:                                      ; preds = %lor.lhs.false.246
  %115 = load i32, i32* %cost.addr, align 4
  %cmp251 = icmp sge i32 %115, 3
  br i1 %cmp251, label %if.then.253, label %if.else.255

if.then.253:                                      ; preds = %if.else.250
  %116 = load i32, i32* %cost.addr, align 4
  %sub254 = sub nsw i32 %116, 3
  store i32 %sub254, i32* %cost.addr, align 4
  br label %if.end.256

if.else.255:                                      ; preds = %if.else.250
  store i32 0, i32* %cost.addr, align 4
  br label %if.end.256

if.end.256:                                       ; preds = %if.else.255, %if.then.253
  br label %if.end.257

if.end.257:                                       ; preds = %if.end.256, %if.then.249
  br label %if.end.258

if.end.258:                                       ; preds = %if.end.257, %land.lhs.true.240, %lor.lhs.false.237
  br label %sw.default

sw.default:                                       ; preds = %if.end.20, %if.end.258
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %if.end.214, %if.end.159, %if.end.38
  %117 = load i32, i32* %cost.addr, align 4
  store i32 %117, i32* %retval
  br label %return

return:                                           ; preds = %sw.epilog, %if.then.174, %if.then.19, %if.then
  %118 = load i32, i32* %retval
  ret i32 %118
}

; Function Attrs: nounwind uwtable
define internal i32 @ix86_issue_rate() #1 {
entry:
  %retval = alloca i32, align 4
  %0 = load i32, i32* @ix86_cpu, align 4
  switch i32 %0, label %sw.default [
    i32 2, label %sw.bb
    i32 4, label %sw.bb
    i32 3, label %sw.bb.1
    i32 6, label %sw.bb.1
    i32 5, label %sw.bb.1
  ]

sw.bb:                                            ; preds = %entry, %entry
  store i32 2, i32* %retval
  br label %return

sw.bb.1:                                          ; preds = %entry, %entry, %entry
  store i32 3, i32* %retval
  br label %return

sw.default:                                       ; preds = %entry
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %sw.default, %sw.bb.1, %sw.bb
  %1 = load i32, i32* %retval
  ret i32 %1
}

; Function Attrs: nounwind uwtable
define internal i32 @ix86_variable_issue(%struct._IO_FILE* %dump, i32 %sched_verbose, %struct.rtx_def* %insn, i32 %can_issue_more) #1 {
entry:
  %retval = alloca i32, align 4
  %dump.addr = alloca %struct._IO_FILE*, align 8
  %sched_verbose.addr = alloca i32, align 4
  %insn.addr = alloca %struct.rtx_def*, align 8
  %can_issue_more.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %uops = alloca i32, align 4
  store %struct._IO_FILE* %dump, %struct._IO_FILE** %dump.addr, align 8
  store i32 %sched_verbose, i32* %sched_verbose.addr, align 4
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  store i32 %can_issue_more, i32* %can_issue_more.addr, align 4
  %0 = load i32, i32* @ix86_cpu, align 4
  switch i32 %0, label %sw.default [
    i32 3, label %sw.bb
  ]

sw.default:                                       ; preds = %entry
  %1 = load i32, i32* %can_issue_more.addr, align 4
  %sub = sub nsw i32 %1, 1
  store i32 %sub, i32* %retval
  br label %return

sw.bb:                                            ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call = call i32 @ix86_safe_ppro_uops(%struct.rtx_def* %2)
  store i32 %call, i32* %uops, align 4
  %3 = load i32, i32* %uops, align 4
  %cmp = icmp eq i32 %3, 2
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %sw.bb
  %4 = load i32, i32* %sched_verbose.addr, align 4
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %if.then.1, label %if.end

if.then.1:                                        ; preds = %if.then
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %dump.addr, align 8
  call void @ix86_dump_ppro_packet(%struct._IO_FILE* %5)
  br label %if.end

if.end:                                           ; preds = %if.then.1, %if.then
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  store %struct.rtx_def* %6, %struct.rtx_def** getelementptr inbounds (%union.anon.4, %union.anon.4* @ix86_sched_data, i32 0, i32 0, i32 0, i64 0), align 8
  store %struct.rtx_def* null, %struct.rtx_def** getelementptr inbounds (%union.anon.4, %union.anon.4* @ix86_sched_data, i32 0, i32 0, i32 0, i64 1), align 8
  store %struct.rtx_def* null, %struct.rtx_def** getelementptr inbounds (%union.anon.4, %union.anon.4* @ix86_sched_data, i32 0, i32 0, i32 0, i64 2), align 8
  %7 = load i32, i32* %sched_verbose.addr, align 4
  %tobool2 = icmp ne i32 %7, 0
  br i1 %tobool2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** %dump.addr, align 8
  call void @ix86_dump_ppro_packet(%struct._IO_FILE* %8)
  br label %if.end.4

if.end.4:                                         ; preds = %if.then.3, %if.end
  store %struct.rtx_def* null, %struct.rtx_def** getelementptr inbounds (%union.anon.4, %union.anon.4* @ix86_sched_data, i32 0, i32 0, i32 0, i64 0), align 8
  br label %if.end.27

if.else:                                          ; preds = %sw.bb
  %9 = load i32, i32* %uops, align 4
  %cmp5 = icmp eq i32 %9, 1
  br i1 %cmp5, label %if.then.6, label %if.else.10

if.then.6:                                        ; preds = %if.else
  %10 = load i32, i32* %sched_verbose.addr, align 4
  %tobool7 = icmp ne i32 %10, 0
  br i1 %tobool7, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %if.then.6
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %dump.addr, align 8
  call void @ix86_dump_ppro_packet(%struct._IO_FILE* %11)
  br label %if.end.9

if.end.9:                                         ; preds = %if.then.8, %if.then.6
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  store %struct.rtx_def* %12, %struct.rtx_def** getelementptr inbounds (%union.anon.4, %union.anon.4* @ix86_sched_data, i32 0, i32 0, i32 0, i64 0), align 8
  store %struct.rtx_def* null, %struct.rtx_def** getelementptr inbounds (%union.anon.4, %union.anon.4* @ix86_sched_data, i32 0, i32 0, i32 0, i64 1), align 8
  store %struct.rtx_def* null, %struct.rtx_def** getelementptr inbounds (%union.anon.4, %union.anon.4* @ix86_sched_data, i32 0, i32 0, i32 0, i64 2), align 8
  br label %if.end.26

if.else.10:                                       ; preds = %if.else
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else.10
  %13 = load i32, i32* %i, align 4
  %cmp11 = icmp slt i32 %13, 3
  br i1 %cmp11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %14 = load i32, i32* %i, align 4
  %idxprom = sext i32 %14 to i64
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* getelementptr inbounds (%union.anon.4, %union.anon.4* @ix86_sched_data, i32 0, i32 0, i32 0), i32 0, i64 %idxprom
  %15 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %cmp12 = icmp eq %struct.rtx_def* %15, null
  br i1 %cmp12, label %if.then.13, label %if.end.16

if.then.13:                                       ; preds = %for.body
  %16 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %17 = load i32, i32* %i, align 4
  %idxprom14 = sext i32 %17 to i64
  %arrayidx15 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* getelementptr inbounds (%union.anon.4, %union.anon.4* @ix86_sched_data, i32 0, i32 0, i32 0), i32 0, i64 %idxprom14
  store %struct.rtx_def* %16, %struct.rtx_def** %arrayidx15, align 8
  br label %for.end

if.end.16:                                        ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.16
  %18 = load i32, i32* %i, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then.13, %for.cond
  %19 = load i32, i32* %i, align 4
  %cmp17 = icmp eq i32 %19, 3
  br i1 %cmp17, label %if.then.18, label %if.end.19

if.then.18:                                       ; preds = %for.end
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 10629, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__FUNCTION__.ix86_variable_issue, i32 0, i32 0)) #7
  unreachable

if.end.19:                                        ; preds = %for.end
  %20 = load i32, i32* %i, align 4
  %cmp20 = icmp eq i32 %20, 2
  br i1 %cmp20, label %if.then.21, label %if.end.25

if.then.21:                                       ; preds = %if.end.19
  %21 = load i32, i32* %sched_verbose.addr, align 4
  %tobool22 = icmp ne i32 %21, 0
  br i1 %tobool22, label %if.then.23, label %if.end.24

if.then.23:                                       ; preds = %if.then.21
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** %dump.addr, align 8
  call void @ix86_dump_ppro_packet(%struct._IO_FILE* %22)
  br label %if.end.24

if.end.24:                                        ; preds = %if.then.23, %if.then.21
  store %struct.rtx_def* null, %struct.rtx_def** getelementptr inbounds (%union.anon.4, %union.anon.4* @ix86_sched_data, i32 0, i32 0, i32 0, i64 0), align 8
  store %struct.rtx_def* null, %struct.rtx_def** getelementptr inbounds (%union.anon.4, %union.anon.4* @ix86_sched_data, i32 0, i32 0, i32 0, i64 1), align 8
  store %struct.rtx_def* null, %struct.rtx_def** getelementptr inbounds (%union.anon.4, %union.anon.4* @ix86_sched_data, i32 0, i32 0, i32 0, i64 2), align 8
  br label %if.end.25

if.end.25:                                        ; preds = %if.end.24, %if.end.19
  br label %if.end.26

if.end.26:                                        ; preds = %if.end.25, %if.end.9
  br label %if.end.27

if.end.27:                                        ; preds = %if.end.26, %if.end.4
  %23 = load i32, i32* getelementptr inbounds (%union.anon.4, %union.anon.4* @ix86_sched_data, i32 0, i32 0, i32 1), align 4
  %dec = add nsw i32 %23, -1
  store i32 %dec, i32* getelementptr inbounds (%union.anon.4, %union.anon.4* @ix86_sched_data, i32 0, i32 0, i32 1), align 4
  store i32 %dec, i32* %retval
  br label %return

return:                                           ; preds = %if.end.27, %sw.default
  %24 = load i32, i32* %retval
  ret i32 %24
}

; Function Attrs: nounwind uwtable
define internal void @ix86_sched_init(%struct._IO_FILE* %dump, i32 %sched_verbose, i32 %veclen) #1 {
entry:
  %dump.addr = alloca %struct._IO_FILE*, align 8
  %sched_verbose.addr = alloca i32, align 4
  %veclen.addr = alloca i32, align 4
  store %struct._IO_FILE* %dump, %struct._IO_FILE** %dump.addr, align 8
  store i32 %sched_verbose, i32* %sched_verbose.addr, align 4
  store i32 %veclen, i32* %veclen.addr, align 4
  call void @llvm.memset.p0i8.i64(i8* bitcast (%union.anon.4* @ix86_sched_data to i8*), i8 0, i64 32, i32 8, i1 false)
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @ix86_sched_reorder(%struct._IO_FILE* %dump, i32 %sched_verbose, %struct.rtx_def** %ready, i32* %n_readyp, i32 %clock_var) #1 {
entry:
  %dump.addr = alloca %struct._IO_FILE*, align 8
  %sched_verbose.addr = alloca i32, align 4
  %ready.addr = alloca %struct.rtx_def**, align 8
  %n_readyp.addr = alloca i32*, align 8
  %clock_var.addr = alloca i32, align 4
  %n_ready = alloca i32, align 4
  %e_ready = alloca %struct.rtx_def**, align 8
  store %struct._IO_FILE* %dump, %struct._IO_FILE** %dump.addr, align 8
  store i32 %sched_verbose, i32* %sched_verbose.addr, align 4
  store %struct.rtx_def** %ready, %struct.rtx_def*** %ready.addr, align 8
  store i32* %n_readyp, i32** %n_readyp.addr, align 8
  store i32 %clock_var, i32* %clock_var.addr, align 4
  %0 = load i32*, i32** %n_readyp.addr, align 8
  %1 = load i32, i32* %0, align 4
  store i32 %1, i32* %n_ready, align 4
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %ready.addr, align 8
  %3 = load i32, i32* %n_ready, align 4
  %idx.ext = sext i32 %3 to i64
  %add.ptr = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 %idx.ext
  %add.ptr1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %add.ptr, i64 -1
  store %struct.rtx_def** %add.ptr1, %struct.rtx_def*** %e_ready, align 8
  %4 = load i32, i32* %n_ready, align 4
  %cmp = icmp slt i32 %4, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %out

if.end:                                           ; preds = %entry
  %5 = load i32, i32* @ix86_cpu, align 4
  switch i32 %5, label %sw.default [
    i32 2, label %sw.bb
    i32 3, label %sw.bb.2
  ]

sw.default:                                       ; preds = %if.end
  br label %sw.epilog

sw.bb:                                            ; preds = %if.end
  %6 = load %struct.rtx_def**, %struct.rtx_def*** %ready.addr, align 8
  %7 = load %struct.rtx_def**, %struct.rtx_def*** %e_ready, align 8
  call void @ix86_sched_reorder_pentium(%struct.rtx_def** %6, %struct.rtx_def** %7)
  br label %sw.epilog

sw.bb.2:                                          ; preds = %if.end
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %ready.addr, align 8
  %9 = load %struct.rtx_def**, %struct.rtx_def*** %e_ready, align 8
  call void @ix86_sched_reorder_ppro(%struct.rtx_def** %8, %struct.rtx_def** %9)
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.bb.2, %sw.bb, %sw.default
  br label %out

out:                                              ; preds = %sw.epilog, %if.then
  %call = call i32 @ix86_issue_rate()
  ret i32 %call
}

declare %union.tree_node* @merge_decl_attributes(%union.tree_node*, %union.tree_node*) #0

declare %union.tree_node* @merge_type_attributes(%union.tree_node*, %union.tree_node*) #0

; Function Attrs: nounwind uwtable
define internal i32 @ix86_comp_type_attributes(%union.tree_node* %type1, %union.tree_node* %type2) #1 {
entry:
  %retval = alloca i32, align 4
  %type1.addr = alloca %union.tree_node*, align 8
  %type2.addr = alloca %union.tree_node*, align 8
  %rtdstr = alloca i8*, align 8
  store %union.tree_node* %type1, %union.tree_node** %type1.addr, align 8
  store %union.tree_node* %type2, %union.tree_node** %type2.addr, align 8
  %0 = load i32, i32* @target_flags, align 4
  %and = and i32 %0, 2
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.58, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.57, i32 0, i32 0)
  store i8* %cond, i8** %rtdstr, align 8
  %1 = load %union.tree_node*, %union.tree_node** %type1.addr, align 8
  %common = bitcast %union.tree_node* %1 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp ne i32 %bf.clear, 23
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %rtdstr, align 8
  %3 = load %union.tree_node*, %union.tree_node** %type1.addr, align 8
  %type = bitcast %union.tree_node* %3 to %struct.tree_type*
  %attributes = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type, i32 0, i32 4
  %4 = load %union.tree_node*, %union.tree_node** %attributes, align 8
  %call = call %union.tree_node* @lookup_attribute(i8* %2, %union.tree_node* %4)
  %tobool1 = icmp ne %union.tree_node* %call, null
  %lnot = xor i1 %tobool1, true
  %lnot.ext = zext i1 %lnot to i32
  %5 = load i8*, i8** %rtdstr, align 8
  %6 = load %union.tree_node*, %union.tree_node** %type2.addr, align 8
  %type3 = bitcast %union.tree_node* %6 to %struct.tree_type*
  %attributes4 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type3, i32 0, i32 4
  %7 = load %union.tree_node*, %union.tree_node** %attributes4, align 8
  %call5 = call %union.tree_node* @lookup_attribute(i8* %5, %union.tree_node* %7)
  %tobool6 = icmp ne %union.tree_node* %call5, null
  %lnot7 = xor i1 %tobool6, true
  %lnot.ext8 = zext i1 %lnot7 to i32
  %cmp9 = icmp ne i32 %lnot.ext, %lnot.ext8
  br i1 %cmp9, label %if.then.10, label %if.end.11

if.then.10:                                       ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

if.end.11:                                        ; preds = %if.end
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.11, %if.then.10, %if.then
  %8 = load i32, i32* %retval
  ret i32 %8
}

declare void @default_set_default_type_attributes(%union.tree_node*) #0

declare void @default_insert_attributes(%union.tree_node*, %union.tree_node**) #0

declare zeroext i1 @default_function_attribute_inlinable_p(%union.tree_node*) #0

declare zeroext i1 @default_ms_bitfield_layout_p(%union.tree_node*) #0

; Function Attrs: nounwind uwtable
define void @ix86_init_builtins() #1 {
entry:
  %0 = load i32, i32* @target_flags, align 4
  %and = and i32 %0, 16384
  %cmp = icmp ne i32 %and, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @ix86_init_mmx_sse_builtins()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @ix86_expand_builtin(%union.tree_node* %exp, %struct.rtx_def* %target, %struct.rtx_def* %subtarget, i32 %mode, i32 %ignore) #1 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %exp.addr = alloca %union.tree_node*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %subtarget.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %ignore.addr = alloca i32, align 4
  %d = alloca %struct.builtin_description*, align 8
  %i = alloca i64, align 8
  %icode = alloca i32, align 4
  %fndecl = alloca %union.tree_node*, align 8
  %arglist = alloca %union.tree_node*, align 8
  %arg0 = alloca %union.tree_node*, align 8
  %arg1 = alloca %union.tree_node*, align 8
  %arg2 = alloca %union.tree_node*, align 8
  %op0 = alloca %struct.rtx_def*, align 8
  %op1 = alloca %struct.rtx_def*, align 8
  %op2 = alloca %struct.rtx_def*, align 8
  %pat = alloca %struct.rtx_def*, align 8
  %tmode = alloca i32, align 4
  %mode0 = alloca i32, align 4
  %mode1 = alloca i32, align 4
  %mode2 = alloca i32, align 4
  %fcode = alloca i32, align 4
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  store %struct.rtx_def* %subtarget, %struct.rtx_def** %subtarget.addr, align 8
  store i32 %mode, i32* %mode.addr, align 4
  store i32 %ignore, i32* %ignore.addr, align 4
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp1 = bitcast %union.tree_node* %0 to %struct.tree_exp*
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1, i32 0, i32 2
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i32 0, i64 0
  %1 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8
  %exp2 = bitcast %union.tree_node* %1 to %struct.tree_exp*
  %operands3 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp2, i32 0, i32 2
  %arrayidx4 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands3, i32 0, i64 0
  %2 = load %union.tree_node*, %union.tree_node** %arrayidx4, align 8
  store %union.tree_node* %2, %union.tree_node** %fndecl, align 8
  %3 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5 = bitcast %union.tree_node* %3 to %struct.tree_exp*
  %operands6 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5, i32 0, i32 2
  %arrayidx7 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands6, i32 0, i64 1
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx7, align 8
  store %union.tree_node* %4, %union.tree_node** %arglist, align 8
  %5 = load %union.tree_node*, %union.tree_node** %fndecl, align 8
  %decl = bitcast %union.tree_node* %5 to %struct.tree_decl*
  %u1 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl, i32 0, i32 6
  %f = bitcast %union.anon* %u1 to i32*
  %6 = load i32, i32* %f, align 4
  store i32 %6, i32* %fcode, align 4
  %7 = load i32, i32* %fcode, align 4
  switch i32 %7, label %sw.default [
    i32 150, label %sw.bb
    i32 153, label %sw.bb.9
    i32 103, label %sw.bb.12
    i32 104, label %sw.bb.70
    i32 69, label %sw.bb.168
    i32 143, label %sw.bb.244
    i32 141, label %sw.bb.246
    i32 139, label %sw.bb.248
    i32 146, label %sw.bb.250
    i32 147, label %sw.bb.252
    i32 148, label %sw.bb.254
    i32 149, label %sw.bb.256
    i32 56, label %sw.bb.258
    i32 57, label %sw.bb.260
    i32 58, label %sw.bb.262
    i32 59, label %sw.bb.264
    i32 60, label %sw.bb.266
    i32 61, label %sw.bb.268
    i32 65, label %sw.bb.270
    i32 66, label %sw.bb.270
    i32 67, label %sw.bb.342
    i32 68, label %sw.bb.342
    i32 72, label %sw.bb.390
    i32 73, label %sw.bb.392
    i32 151, label %sw.bb.394
    i32 152, label %sw.bb.402
    i32 137, label %sw.bb.407
    i32 114, label %sw.bb.506
    i32 154, label %sw.bb.580
    i32 155, label %sw.bb.583
    i32 156, label %sw.bb.585
    i32 157, label %sw.bb.587
    i32 158, label %sw.bb.589
    i32 159, label %sw.bb.591
    i32 160, label %sw.bb.593
    i32 161, label %sw.bb.595
    i32 162, label %sw.bb.597
    i32 163, label %sw.bb.599
    i32 164, label %sw.bb.601
    i32 165, label %sw.bb.603
    i32 166, label %sw.bb.605
    i32 167, label %sw.bb.607
    i32 168, label %sw.bb.609
    i32 169, label %sw.bb.611
    i32 170, label %sw.bb.613
    i32 171, label %sw.bb.615
    i32 172, label %sw.bb.617
    i32 173, label %sw.bb.619
    i32 174, label %sw.bb.621
    i32 175, label %sw.bb.623
    i32 176, label %sw.bb.625
    i32 177, label %sw.bb.627
    i32 178, label %sw.bb.629
    i32 179, label %sw.bb.631
    i32 180, label %sw.bb.633
    i32 181, label %sw.bb.637
  ]

sw.bb:                                            ; preds = %entry
  %call = call %struct.rtx_def* @gen_emms()
  %call8 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call)
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

sw.bb.9:                                          ; preds = %entry
  %call10 = call %struct.rtx_def* @gen_sfence()
  %call11 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call10)
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

sw.bb.12:                                         ; preds = %entry
  store i32 772, i32* %icode, align 4
  %8 = load %union.tree_node*, %union.tree_node** %arglist, align 8
  %list = bitcast %union.tree_node* %8 to %struct.tree_list*
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2
  %9 = load %union.tree_node*, %union.tree_node** %value, align 8
  store %union.tree_node* %9, %union.tree_node** %arg0, align 8
  %10 = load %union.tree_node*, %union.tree_node** %arglist, align 8
  %common = bitcast %union.tree_node* %10 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 0
  %11 = load %union.tree_node*, %union.tree_node** %chain, align 8
  %list13 = bitcast %union.tree_node* %11 to %struct.tree_list*
  %value14 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list13, i32 0, i32 2
  %12 = load %union.tree_node*, %union.tree_node** %value14, align 8
  store %union.tree_node* %12, %union.tree_node** %arg1, align 8
  %13 = load %union.tree_node*, %union.tree_node** %arg0, align 8
  %call15 = call %struct.rtx_def* @expand_expr(%union.tree_node* %13, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call15, %struct.rtx_def** %op0, align 8
  %14 = load %union.tree_node*, %union.tree_node** %arg1, align 8
  %call16 = call %struct.rtx_def* @expand_expr(%union.tree_node* %14, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call16, %struct.rtx_def** %op1, align 8
  %15 = load i32, i32* %icode, align 4
  %idxprom = zext i32 %15 to i64
  %arrayidx17 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom
  %operand = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx17, i32 0, i32 3
  %16 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand, align 8
  %arrayidx18 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %16, i64 0
  %mode19 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx18, i32 0, i32 2
  %bf.load = load i16, i16* %mode19, align 8
  %bf.cast = zext i16 %bf.load to i32
  store i32 %bf.cast, i32* %tmode, align 4
  %17 = load i32, i32* %icode, align 4
  %idxprom20 = zext i32 %17 to i64
  %arrayidx21 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom20
  %operand22 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx21, i32 0, i32 3
  %18 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand22, align 8
  %arrayidx23 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %18, i64 1
  %mode24 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx23, i32 0, i32 2
  %bf.load25 = load i16, i16* %mode24, align 8
  %bf.cast26 = zext i16 %bf.load25 to i32
  store i32 %bf.cast26, i32* %mode0, align 4
  %19 = load i32, i32* %icode, align 4
  %idxprom27 = zext i32 %19 to i64
  %arrayidx28 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom27
  %operand29 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx28, i32 0, i32 3
  %20 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand29, align 8
  %arrayidx30 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %20, i64 2
  %mode31 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx30, i32 0, i32 2
  %bf.load32 = load i16, i16* %mode31, align 8
  %bf.cast33 = zext i16 %bf.load32 to i32
  store i32 %bf.cast33, i32* %mode1, align 4
  %21 = load i32, i32* %icode, align 4
  %idxprom34 = zext i32 %21 to i64
  %arrayidx35 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom34
  %operand36 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx35, i32 0, i32 3
  %22 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand36, align 8
  %arrayidx37 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %22, i64 1
  %predicate = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx37, i32 0, i32 0
  %23 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate, align 8
  %24 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %25 = load i32, i32* %mode0, align 4
  %call38 = call i32 %23(%struct.rtx_def* %24, i32 %25)
  %tobool = icmp ne i32 %call38, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %sw.bb.12
  %26 = load i32, i32* %mode0, align 4
  %27 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call39 = call %struct.rtx_def* @copy_to_mode_reg(i32 %26, %struct.rtx_def* %27)
  store %struct.rtx_def* %call39, %struct.rtx_def** %op0, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %sw.bb.12
  %28 = load i32, i32* %icode, align 4
  %idxprom40 = zext i32 %28 to i64
  %arrayidx41 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom40
  %operand42 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx41, i32 0, i32 3
  %29 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand42, align 8
  %arrayidx43 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %29, i64 2
  %predicate44 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx43, i32 0, i32 0
  %30 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate44, align 8
  %31 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %32 = load i32, i32* %mode1, align 4
  %call45 = call i32 %30(%struct.rtx_def* %31, i32 %32)
  %tobool46 = icmp ne i32 %call45, 0
  br i1 %tobool46, label %if.end.49, label %if.then.47

if.then.47:                                       ; preds = %if.end
  call void (i8*, ...) @error(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.197, i32 0, i32 0))
  %33 = load i32, i32* %tmode, align 4
  %call48 = call %struct.rtx_def* @gen_reg_rtx(i32 %33)
  store %struct.rtx_def* %call48, %struct.rtx_def** %retval
  br label %return

if.end.49:                                        ; preds = %if.end
  %34 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %cmp = icmp eq %struct.rtx_def* %34, null
  br i1 %cmp, label %if.then.60, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.49
  %35 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %36 = bitcast %struct.rtx_def* %35 to i32*
  %bf.load50 = load i32, i32* %36, align 8
  %bf.lshr = lshr i32 %bf.load50, 16
  %bf.clear = and i32 %bf.lshr, 255
  %37 = load i32, i32* %tmode, align 4
  %cmp51 = icmp ne i32 %bf.clear, %37
  br i1 %cmp51, label %if.then.60, label %lor.lhs.false.52

lor.lhs.false.52:                                 ; preds = %lor.lhs.false
  %38 = load i32, i32* %icode, align 4
  %idxprom53 = zext i32 %38 to i64
  %arrayidx54 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom53
  %operand55 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx54, i32 0, i32 3
  %39 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand55, align 8
  %arrayidx56 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %39, i64 0
  %predicate57 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx56, i32 0, i32 0
  %40 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate57, align 8
  %41 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %42 = load i32, i32* %tmode, align 4
  %call58 = call i32 %40(%struct.rtx_def* %41, i32 %42)
  %tobool59 = icmp ne i32 %call58, 0
  br i1 %tobool59, label %if.end.62, label %if.then.60

if.then.60:                                       ; preds = %lor.lhs.false.52, %lor.lhs.false, %if.end.49
  %43 = load i32, i32* %tmode, align 4
  %call61 = call %struct.rtx_def* @gen_reg_rtx(i32 %43)
  store %struct.rtx_def* %call61, %struct.rtx_def** %target.addr, align 8
  br label %if.end.62

if.end.62:                                        ; preds = %if.then.60, %lor.lhs.false.52
  %44 = load i32, i32* %icode, align 4
  %idxprom63 = sext i32 %44 to i64
  %arrayidx64 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom63
  %genfun = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx64, i32 0, i32 2
  %45 = load %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.rtx_def* (%struct.rtx_def*, ...)** %genfun, align 8
  %46 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %47 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %48 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %call65 = call %struct.rtx_def* (%struct.rtx_def*, ...) %45(%struct.rtx_def* %46, %struct.rtx_def* %47, %struct.rtx_def* %48)
  store %struct.rtx_def* %call65, %struct.rtx_def** %pat, align 8
  %49 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8
  %tobool66 = icmp ne %struct.rtx_def* %49, null
  br i1 %tobool66, label %if.end.68, label %if.then.67

if.then.67:                                       ; preds = %if.end.62
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end.68:                                        ; preds = %if.end.62
  %50 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8
  %call69 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %50)
  %51 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  store %struct.rtx_def* %51, %struct.rtx_def** %retval
  br label %return

sw.bb.70:                                         ; preds = %entry
  store i32 771, i32* %icode, align 4
  %52 = load %union.tree_node*, %union.tree_node** %arglist, align 8
  %list71 = bitcast %union.tree_node* %52 to %struct.tree_list*
  %value72 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list71, i32 0, i32 2
  %53 = load %union.tree_node*, %union.tree_node** %value72, align 8
  store %union.tree_node* %53, %union.tree_node** %arg0, align 8
  %54 = load %union.tree_node*, %union.tree_node** %arglist, align 8
  %common73 = bitcast %union.tree_node* %54 to %struct.tree_common*
  %chain74 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common73, i32 0, i32 0
  %55 = load %union.tree_node*, %union.tree_node** %chain74, align 8
  %list75 = bitcast %union.tree_node* %55 to %struct.tree_list*
  %value76 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list75, i32 0, i32 2
  %56 = load %union.tree_node*, %union.tree_node** %value76, align 8
  store %union.tree_node* %56, %union.tree_node** %arg1, align 8
  %57 = load %union.tree_node*, %union.tree_node** %arglist, align 8
  %common77 = bitcast %union.tree_node* %57 to %struct.tree_common*
  %chain78 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common77, i32 0, i32 0
  %58 = load %union.tree_node*, %union.tree_node** %chain78, align 8
  %common79 = bitcast %union.tree_node* %58 to %struct.tree_common*
  %chain80 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common79, i32 0, i32 0
  %59 = load %union.tree_node*, %union.tree_node** %chain80, align 8
  %list81 = bitcast %union.tree_node* %59 to %struct.tree_list*
  %value82 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list81, i32 0, i32 2
  %60 = load %union.tree_node*, %union.tree_node** %value82, align 8
  store %union.tree_node* %60, %union.tree_node** %arg2, align 8
  %61 = load %union.tree_node*, %union.tree_node** %arg0, align 8
  %call83 = call %struct.rtx_def* @expand_expr(%union.tree_node* %61, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call83, %struct.rtx_def** %op0, align 8
  %62 = load %union.tree_node*, %union.tree_node** %arg1, align 8
  %call84 = call %struct.rtx_def* @expand_expr(%union.tree_node* %62, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call84, %struct.rtx_def** %op1, align 8
  %63 = load %union.tree_node*, %union.tree_node** %arg2, align 8
  %call85 = call %struct.rtx_def* @expand_expr(%union.tree_node* %63, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call85, %struct.rtx_def** %op2, align 8
  %64 = load i32, i32* %icode, align 4
  %idxprom86 = zext i32 %64 to i64
  %arrayidx87 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom86
  %operand88 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx87, i32 0, i32 3
  %65 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand88, align 8
  %arrayidx89 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %65, i64 0
  %mode90 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx89, i32 0, i32 2
  %bf.load91 = load i16, i16* %mode90, align 8
  %bf.cast92 = zext i16 %bf.load91 to i32
  store i32 %bf.cast92, i32* %tmode, align 4
  %66 = load i32, i32* %icode, align 4
  %idxprom93 = zext i32 %66 to i64
  %arrayidx94 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom93
  %operand95 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx94, i32 0, i32 3
  %67 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand95, align 8
  %arrayidx96 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %67, i64 1
  %mode97 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx96, i32 0, i32 2
  %bf.load98 = load i16, i16* %mode97, align 8
  %bf.cast99 = zext i16 %bf.load98 to i32
  store i32 %bf.cast99, i32* %mode0, align 4
  %68 = load i32, i32* %icode, align 4
  %idxprom100 = zext i32 %68 to i64
  %arrayidx101 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom100
  %operand102 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx101, i32 0, i32 3
  %69 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand102, align 8
  %arrayidx103 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %69, i64 2
  %mode104 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx103, i32 0, i32 2
  %bf.load105 = load i16, i16* %mode104, align 8
  %bf.cast106 = zext i16 %bf.load105 to i32
  store i32 %bf.cast106, i32* %mode1, align 4
  %70 = load i32, i32* %icode, align 4
  %idxprom107 = zext i32 %70 to i64
  %arrayidx108 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom107
  %operand109 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx108, i32 0, i32 3
  %71 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand109, align 8
  %arrayidx110 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %71, i64 3
  %mode111 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx110, i32 0, i32 2
  %bf.load112 = load i16, i16* %mode111, align 8
  %bf.cast113 = zext i16 %bf.load112 to i32
  store i32 %bf.cast113, i32* %mode2, align 4
  %72 = load i32, i32* %icode, align 4
  %idxprom114 = zext i32 %72 to i64
  %arrayidx115 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom114
  %operand116 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx115, i32 0, i32 3
  %73 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand116, align 8
  %arrayidx117 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %73, i64 1
  %predicate118 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx117, i32 0, i32 0
  %74 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate118, align 8
  %75 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %76 = load i32, i32* %mode0, align 4
  %call119 = call i32 %74(%struct.rtx_def* %75, i32 %76)
  %tobool120 = icmp ne i32 %call119, 0
  br i1 %tobool120, label %if.end.123, label %if.then.121

if.then.121:                                      ; preds = %sw.bb.70
  %77 = load i32, i32* %mode0, align 4
  %78 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call122 = call %struct.rtx_def* @copy_to_mode_reg(i32 %77, %struct.rtx_def* %78)
  store %struct.rtx_def* %call122, %struct.rtx_def** %op0, align 8
  br label %if.end.123

if.end.123:                                       ; preds = %if.then.121, %sw.bb.70
  %79 = load i32, i32* %icode, align 4
  %idxprom124 = zext i32 %79 to i64
  %arrayidx125 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom124
  %operand126 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx125, i32 0, i32 3
  %80 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand126, align 8
  %arrayidx127 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %80, i64 2
  %predicate128 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx127, i32 0, i32 0
  %81 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate128, align 8
  %82 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %83 = load i32, i32* %mode1, align 4
  %call129 = call i32 %81(%struct.rtx_def* %82, i32 %83)
  %tobool130 = icmp ne i32 %call129, 0
  br i1 %tobool130, label %if.end.133, label %if.then.131

if.then.131:                                      ; preds = %if.end.123
  %84 = load i32, i32* %mode1, align 4
  %85 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %call132 = call %struct.rtx_def* @copy_to_mode_reg(i32 %84, %struct.rtx_def* %85)
  store %struct.rtx_def* %call132, %struct.rtx_def** %op1, align 8
  br label %if.end.133

if.end.133:                                       ; preds = %if.then.131, %if.end.123
  %86 = load i32, i32* %icode, align 4
  %idxprom134 = zext i32 %86 to i64
  %arrayidx135 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom134
  %operand136 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx135, i32 0, i32 3
  %87 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand136, align 8
  %arrayidx137 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %87, i64 3
  %predicate138 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx137, i32 0, i32 0
  %88 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate138, align 8
  %89 = load %struct.rtx_def*, %struct.rtx_def** %op2, align 8
  %90 = load i32, i32* %mode2, align 4
  %call139 = call i32 %88(%struct.rtx_def* %89, i32 %90)
  %tobool140 = icmp ne i32 %call139, 0
  br i1 %tobool140, label %if.end.142, label %if.then.141

if.then.141:                                      ; preds = %if.end.133
  call void (i8*, ...) @error(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.197, i32 0, i32 0))
  %91 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  store %struct.rtx_def* %91, %struct.rtx_def** %retval
  br label %return

if.end.142:                                       ; preds = %if.end.133
  %92 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %cmp143 = icmp eq %struct.rtx_def* %92, null
  br i1 %cmp143, label %if.then.157, label %lor.lhs.false.144

lor.lhs.false.144:                                ; preds = %if.end.142
  %93 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %94 = bitcast %struct.rtx_def* %93 to i32*
  %bf.load145 = load i32, i32* %94, align 8
  %bf.lshr146 = lshr i32 %bf.load145, 16
  %bf.clear147 = and i32 %bf.lshr146, 255
  %95 = load i32, i32* %tmode, align 4
  %cmp148 = icmp ne i32 %bf.clear147, %95
  br i1 %cmp148, label %if.then.157, label %lor.lhs.false.149

lor.lhs.false.149:                                ; preds = %lor.lhs.false.144
  %96 = load i32, i32* %icode, align 4
  %idxprom150 = zext i32 %96 to i64
  %arrayidx151 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom150
  %operand152 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx151, i32 0, i32 3
  %97 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand152, align 8
  %arrayidx153 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %97, i64 0
  %predicate154 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx153, i32 0, i32 0
  %98 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate154, align 8
  %99 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %100 = load i32, i32* %tmode, align 4
  %call155 = call i32 %98(%struct.rtx_def* %99, i32 %100)
  %tobool156 = icmp ne i32 %call155, 0
  br i1 %tobool156, label %if.end.159, label %if.then.157

if.then.157:                                      ; preds = %lor.lhs.false.149, %lor.lhs.false.144, %if.end.142
  %101 = load i32, i32* %tmode, align 4
  %call158 = call %struct.rtx_def* @gen_reg_rtx(i32 %101)
  store %struct.rtx_def* %call158, %struct.rtx_def** %target.addr, align 8
  br label %if.end.159

if.end.159:                                       ; preds = %if.then.157, %lor.lhs.false.149
  %102 = load i32, i32* %icode, align 4
  %idxprom160 = sext i32 %102 to i64
  %arrayidx161 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom160
  %genfun162 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx161, i32 0, i32 2
  %103 = load %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.rtx_def* (%struct.rtx_def*, ...)** %genfun162, align 8
  %104 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %105 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %106 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %107 = load %struct.rtx_def*, %struct.rtx_def** %op2, align 8
  %call163 = call %struct.rtx_def* (%struct.rtx_def*, ...) %103(%struct.rtx_def* %104, %struct.rtx_def* %105, %struct.rtx_def* %106, %struct.rtx_def* %107)
  store %struct.rtx_def* %call163, %struct.rtx_def** %pat, align 8
  %108 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8
  %tobool164 = icmp ne %struct.rtx_def* %108, null
  br i1 %tobool164, label %if.end.166, label %if.then.165

if.then.165:                                      ; preds = %if.end.159
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end.166:                                       ; preds = %if.end.159
  %109 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8
  %call167 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %109)
  %110 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  store %struct.rtx_def* %110, %struct.rtx_def** %retval
  br label %return

sw.bb.168:                                        ; preds = %entry
  %111 = load i32, i32* @target_flags, align 4
  %and = and i32 %111, 33554432
  %tobool169 = icmp ne i32 %and, 0
  %cond = select i1 %tobool169, i32 679, i32 678
  store i32 %cond, i32* %icode, align 4
  %112 = load %union.tree_node*, %union.tree_node** %arglist, align 8
  %list170 = bitcast %union.tree_node* %112 to %struct.tree_list*
  %value171 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list170, i32 0, i32 2
  %113 = load %union.tree_node*, %union.tree_node** %value171, align 8
  store %union.tree_node* %113, %union.tree_node** %arg1, align 8
  %114 = load %union.tree_node*, %union.tree_node** %arglist, align 8
  %common172 = bitcast %union.tree_node* %114 to %struct.tree_common*
  %chain173 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common172, i32 0, i32 0
  %115 = load %union.tree_node*, %union.tree_node** %chain173, align 8
  %list174 = bitcast %union.tree_node* %115 to %struct.tree_list*
  %value175 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list174, i32 0, i32 2
  %116 = load %union.tree_node*, %union.tree_node** %value175, align 8
  store %union.tree_node* %116, %union.tree_node** %arg2, align 8
  %117 = load %union.tree_node*, %union.tree_node** %arglist, align 8
  %common176 = bitcast %union.tree_node* %117 to %struct.tree_common*
  %chain177 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common176, i32 0, i32 0
  %118 = load %union.tree_node*, %union.tree_node** %chain177, align 8
  %common178 = bitcast %union.tree_node* %118 to %struct.tree_common*
  %chain179 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common178, i32 0, i32 0
  %119 = load %union.tree_node*, %union.tree_node** %chain179, align 8
  %list180 = bitcast %union.tree_node* %119 to %struct.tree_list*
  %value181 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list180, i32 0, i32 2
  %120 = load %union.tree_node*, %union.tree_node** %value181, align 8
  store %union.tree_node* %120, %union.tree_node** %arg0, align 8
  %121 = load %union.tree_node*, %union.tree_node** %arg0, align 8
  %call182 = call %struct.rtx_def* @expand_expr(%union.tree_node* %121, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call182, %struct.rtx_def** %op0, align 8
  %122 = load %union.tree_node*, %union.tree_node** %arg1, align 8
  %call183 = call %struct.rtx_def* @expand_expr(%union.tree_node* %122, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call183, %struct.rtx_def** %op1, align 8
  %123 = load %union.tree_node*, %union.tree_node** %arg2, align 8
  %call184 = call %struct.rtx_def* @expand_expr(%union.tree_node* %123, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call184, %struct.rtx_def** %op2, align 8
  %124 = load i32, i32* %icode, align 4
  %idxprom185 = zext i32 %124 to i64
  %arrayidx186 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom185
  %operand187 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx186, i32 0, i32 3
  %125 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand187, align 8
  %arrayidx188 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %125, i64 0
  %mode189 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx188, i32 0, i32 2
  %bf.load190 = load i16, i16* %mode189, align 8
  %bf.cast191 = zext i16 %bf.load190 to i32
  store i32 %bf.cast191, i32* %mode0, align 4
  %126 = load i32, i32* %icode, align 4
  %idxprom192 = zext i32 %126 to i64
  %arrayidx193 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom192
  %operand194 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx193, i32 0, i32 3
  %127 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand194, align 8
  %arrayidx195 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %127, i64 1
  %mode196 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx195, i32 0, i32 2
  %bf.load197 = load i16, i16* %mode196, align 8
  %bf.cast198 = zext i16 %bf.load197 to i32
  store i32 %bf.cast198, i32* %mode1, align 4
  %128 = load i32, i32* %icode, align 4
  %idxprom199 = zext i32 %128 to i64
  %arrayidx200 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom199
  %operand201 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx200, i32 0, i32 3
  %129 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand201, align 8
  %arrayidx202 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %129, i64 2
  %mode203 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx202, i32 0, i32 2
  %bf.load204 = load i16, i16* %mode203, align 8
  %bf.cast205 = zext i16 %bf.load204 to i32
  store i32 %bf.cast205, i32* %mode2, align 4
  %130 = load i32, i32* %icode, align 4
  %idxprom206 = zext i32 %130 to i64
  %arrayidx207 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom206
  %operand208 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx207, i32 0, i32 3
  %131 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand208, align 8
  %arrayidx209 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %131, i64 0
  %predicate210 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx209, i32 0, i32 0
  %132 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate210, align 8
  %133 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %134 = load i32, i32* %mode0, align 4
  %call211 = call i32 %132(%struct.rtx_def* %133, i32 %134)
  %tobool212 = icmp ne i32 %call211, 0
  br i1 %tobool212, label %if.end.215, label %if.then.213

if.then.213:                                      ; preds = %sw.bb.168
  %135 = load i32, i32* %mode0, align 4
  %136 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call214 = call %struct.rtx_def* @copy_to_mode_reg(i32 %135, %struct.rtx_def* %136)
  store %struct.rtx_def* %call214, %struct.rtx_def** %op0, align 8
  br label %if.end.215

if.end.215:                                       ; preds = %if.then.213, %sw.bb.168
  %137 = load i32, i32* %icode, align 4
  %idxprom216 = zext i32 %137 to i64
  %arrayidx217 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom216
  %operand218 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx217, i32 0, i32 3
  %138 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand218, align 8
  %arrayidx219 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %138, i64 1
  %predicate220 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx219, i32 0, i32 0
  %139 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate220, align 8
  %140 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %141 = load i32, i32* %mode1, align 4
  %call221 = call i32 %139(%struct.rtx_def* %140, i32 %141)
  %tobool222 = icmp ne i32 %call221, 0
  br i1 %tobool222, label %if.end.225, label %if.then.223

if.then.223:                                      ; preds = %if.end.215
  %142 = load i32, i32* %mode1, align 4
  %143 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %call224 = call %struct.rtx_def* @copy_to_mode_reg(i32 %142, %struct.rtx_def* %143)
  store %struct.rtx_def* %call224, %struct.rtx_def** %op1, align 8
  br label %if.end.225

if.end.225:                                       ; preds = %if.then.223, %if.end.215
  %144 = load i32, i32* %icode, align 4
  %idxprom226 = zext i32 %144 to i64
  %arrayidx227 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom226
  %operand228 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx227, i32 0, i32 3
  %145 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand228, align 8
  %arrayidx229 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %145, i64 2
  %predicate230 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx229, i32 0, i32 0
  %146 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate230, align 8
  %147 = load %struct.rtx_def*, %struct.rtx_def** %op2, align 8
  %148 = load i32, i32* %mode2, align 4
  %call231 = call i32 %146(%struct.rtx_def* %147, i32 %148)
  %tobool232 = icmp ne i32 %call231, 0
  br i1 %tobool232, label %if.end.235, label %if.then.233

if.then.233:                                      ; preds = %if.end.225
  %149 = load i32, i32* %mode2, align 4
  %150 = load %struct.rtx_def*, %struct.rtx_def** %op2, align 8
  %call234 = call %struct.rtx_def* @copy_to_mode_reg(i32 %149, %struct.rtx_def* %150)
  store %struct.rtx_def* %call234, %struct.rtx_def** %op2, align 8
  br label %if.end.235

if.end.235:                                       ; preds = %if.then.233, %if.end.225
  %151 = load i32, i32* %icode, align 4
  %idxprom236 = sext i32 %151 to i64
  %arrayidx237 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom236
  %genfun238 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx237, i32 0, i32 2
  %152 = load %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.rtx_def* (%struct.rtx_def*, ...)** %genfun238, align 8
  %153 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %154 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %155 = load %struct.rtx_def*, %struct.rtx_def** %op2, align 8
  %call239 = call %struct.rtx_def* (%struct.rtx_def*, ...) %152(%struct.rtx_def* %153, %struct.rtx_def* %154, %struct.rtx_def* %155)
  store %struct.rtx_def* %call239, %struct.rtx_def** %pat, align 8
  %156 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8
  %tobool240 = icmp ne %struct.rtx_def* %156, null
  br i1 %tobool240, label %if.end.242, label %if.then.241

if.then.241:                                      ; preds = %if.end.235
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end.242:                                       ; preds = %if.end.235
  %157 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8
  %call243 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %157)
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

sw.bb.244:                                        ; preds = %entry
  %158 = load %union.tree_node*, %union.tree_node** %arglist, align 8
  %159 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call245 = call %struct.rtx_def* @ix86_expand_unop1_builtin(i32 703, %union.tree_node* %158, %struct.rtx_def* %159)
  store %struct.rtx_def* %call245, %struct.rtx_def** %retval
  br label %return

sw.bb.246:                                        ; preds = %entry
  %160 = load %union.tree_node*, %union.tree_node** %arglist, align 8
  %161 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call247 = call %struct.rtx_def* @ix86_expand_unop1_builtin(i32 701, %union.tree_node* %160, %struct.rtx_def* %161)
  store %struct.rtx_def* %call247, %struct.rtx_def** %retval
  br label %return

sw.bb.248:                                        ; preds = %entry
  %162 = load %union.tree_node*, %union.tree_node** %arglist, align 8
  %163 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call249 = call %struct.rtx_def* @ix86_expand_unop1_builtin(i32 699, %union.tree_node* %162, %struct.rtx_def* %163)
  store %struct.rtx_def* %call249, %struct.rtx_def** %retval
  br label %return

sw.bb.250:                                        ; preds = %entry
  %164 = load %union.tree_node*, %union.tree_node** %arglist, align 8
  %165 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call251 = call %struct.rtx_def* @ix86_expand_timode_binop_builtin(i32 708, %union.tree_node* %164, %struct.rtx_def* %165)
  store %struct.rtx_def* %call251, %struct.rtx_def** %retval
  br label %return

sw.bb.252:                                        ; preds = %entry
  %166 = load %union.tree_node*, %union.tree_node** %arglist, align 8
  %167 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call253 = call %struct.rtx_def* @ix86_expand_timode_binop_builtin(i32 712, %union.tree_node* %166, %struct.rtx_def* %167)
  store %struct.rtx_def* %call253, %struct.rtx_def** %retval
  br label %return

sw.bb.254:                                        ; preds = %entry
  %168 = load %union.tree_node*, %union.tree_node** %arglist, align 8
  %169 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call255 = call %struct.rtx_def* @ix86_expand_timode_binop_builtin(i32 718, %union.tree_node* %168, %struct.rtx_def* %169)
  store %struct.rtx_def* %call255, %struct.rtx_def** %retval
  br label %return

sw.bb.256:                                        ; preds = %entry
  %170 = load %union.tree_node*, %union.tree_node** %arglist, align 8
  %171 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call257 = call %struct.rtx_def* @ix86_expand_timode_binop_builtin(i32 724, %union.tree_node* %170, %struct.rtx_def* %171)
  store %struct.rtx_def* %call257, %struct.rtx_def** %retval
  br label %return

sw.bb.258:                                        ; preds = %entry
  %172 = load %union.tree_node*, %union.tree_node** %arglist, align 8
  %173 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call259 = call %struct.rtx_def* @ix86_expand_unop_builtin(i32 674, %union.tree_node* %172, %struct.rtx_def* %173, i32 1)
  store %struct.rtx_def* %call259, %struct.rtx_def** %retval
  br label %return

sw.bb.260:                                        ; preds = %entry
  %174 = load %union.tree_node*, %union.tree_node** %arglist, align 8
  %175 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call261 = call %struct.rtx_def* @ix86_expand_unop_builtin(i32 675, %union.tree_node* %174, %struct.rtx_def* %175, i32 1)
  store %struct.rtx_def* %call261, %struct.rtx_def** %retval
  br label %return

sw.bb.262:                                        ; preds = %entry
  %176 = load %union.tree_node*, %union.tree_node** %arglist, align 8
  %call263 = call %struct.rtx_def* @ix86_expand_store_builtin(i32 674, %union.tree_node* %176)
  store %struct.rtx_def* %call263, %struct.rtx_def** %retval
  br label %return

sw.bb.264:                                        ; preds = %entry
  %177 = load %union.tree_node*, %union.tree_node** %arglist, align 8
  %call265 = call %struct.rtx_def* @ix86_expand_store_builtin(i32 675, %union.tree_node* %177)
  store %struct.rtx_def* %call265, %struct.rtx_def** %retval
  br label %return

sw.bb.266:                                        ; preds = %entry
  %178 = load %union.tree_node*, %union.tree_node** %arglist, align 8
  %179 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call267 = call %struct.rtx_def* @ix86_expand_unop_builtin(i32 686, %union.tree_node* %178, %struct.rtx_def* %179, i32 1)
  store %struct.rtx_def* %call267, %struct.rtx_def** %retval
  br label %return

sw.bb.268:                                        ; preds = %entry
  %180 = load %union.tree_node*, %union.tree_node** %arglist, align 8
  %call269 = call %struct.rtx_def* @ix86_expand_store_builtin(i32 688, %union.tree_node* %180)
  store %struct.rtx_def* %call269, %struct.rtx_def** %retval
  br label %return

sw.bb.270:                                        ; preds = %entry, %entry
  %181 = load i32, i32* %fcode, align 4
  %cmp271 = icmp eq i32 %181, 65
  %cond272 = select i1 %cmp271, i32 684, i32 685
  store i32 %cond272, i32* %icode, align 4
  %182 = load %union.tree_node*, %union.tree_node** %arglist, align 8
  %list273 = bitcast %union.tree_node* %182 to %struct.tree_list*
  %value274 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list273, i32 0, i32 2
  %183 = load %union.tree_node*, %union.tree_node** %value274, align 8
  store %union.tree_node* %183, %union.tree_node** %arg0, align 8
  %184 = load %union.tree_node*, %union.tree_node** %arglist, align 8
  %common275 = bitcast %union.tree_node* %184 to %struct.tree_common*
  %chain276 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common275, i32 0, i32 0
  %185 = load %union.tree_node*, %union.tree_node** %chain276, align 8
  %list277 = bitcast %union.tree_node* %185 to %struct.tree_list*
  %value278 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list277, i32 0, i32 2
  %186 = load %union.tree_node*, %union.tree_node** %value278, align 8
  store %union.tree_node* %186, %union.tree_node** %arg1, align 8
  %187 = load %union.tree_node*, %union.tree_node** %arg0, align 8
  %call279 = call %struct.rtx_def* @expand_expr(%union.tree_node* %187, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call279, %struct.rtx_def** %op0, align 8
  %188 = load %union.tree_node*, %union.tree_node** %arg1, align 8
  %call280 = call %struct.rtx_def* @expand_expr(%union.tree_node* %188, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call280, %struct.rtx_def** %op1, align 8
  %189 = load i32, i32* %icode, align 4
  %idxprom281 = zext i32 %189 to i64
  %arrayidx282 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom281
  %operand283 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx282, i32 0, i32 3
  %190 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand283, align 8
  %arrayidx284 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %190, i64 0
  %mode285 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx284, i32 0, i32 2
  %bf.load286 = load i16, i16* %mode285, align 8
  %bf.cast287 = zext i16 %bf.load286 to i32
  store i32 %bf.cast287, i32* %tmode, align 4
  %191 = load i32, i32* %icode, align 4
  %idxprom288 = zext i32 %191 to i64
  %arrayidx289 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom288
  %operand290 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx289, i32 0, i32 3
  %192 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand290, align 8
  %arrayidx291 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %192, i64 1
  %mode292 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx291, i32 0, i32 2
  %bf.load293 = load i16, i16* %mode292, align 8
  %bf.cast294 = zext i16 %bf.load293 to i32
  store i32 %bf.cast294, i32* %mode0, align 4
  %193 = load i32, i32* %icode, align 4
  %idxprom295 = zext i32 %193 to i64
  %arrayidx296 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom295
  %operand297 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx296, i32 0, i32 3
  %194 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand297, align 8
  %arrayidx298 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %194, i64 2
  %mode299 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx298, i32 0, i32 2
  %bf.load300 = load i16, i16* %mode299, align 8
  %bf.cast301 = zext i16 %bf.load300 to i32
  store i32 %bf.cast301, i32* %mode1, align 4
  %195 = load i32, i32* %icode, align 4
  %idxprom302 = zext i32 %195 to i64
  %arrayidx303 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom302
  %operand304 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx303, i32 0, i32 3
  %196 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand304, align 8
  %arrayidx305 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %196, i64 1
  %predicate306 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx305, i32 0, i32 0
  %197 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate306, align 8
  %198 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %199 = load i32, i32* %mode0, align 4
  %call307 = call i32 %197(%struct.rtx_def* %198, i32 %199)
  %tobool308 = icmp ne i32 %call307, 0
  br i1 %tobool308, label %if.end.311, label %if.then.309

if.then.309:                                      ; preds = %sw.bb.270
  %200 = load i32, i32* %mode0, align 4
  %201 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call310 = call %struct.rtx_def* @copy_to_mode_reg(i32 %200, %struct.rtx_def* %201)
  store %struct.rtx_def* %call310, %struct.rtx_def** %op0, align 8
  br label %if.end.311

if.end.311:                                       ; preds = %if.then.309, %sw.bb.270
  %202 = load i32, i32* %mode1, align 4
  %203 = load i32, i32* @target_flags, align 4
  %and312 = and i32 %203, 33554432
  %tobool313 = icmp ne i32 %and312, 0
  %cond314 = select i1 %tobool313, i32 5, i32 4
  %204 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %call315 = call %struct.rtx_def* @copy_to_mode_reg(i32 %cond314, %struct.rtx_def* %204)
  %call316 = call %struct.rtx_def* @gen_rtx_MEM(i32 %202, %struct.rtx_def* %call315)
  store %struct.rtx_def* %call316, %struct.rtx_def** %op1, align 8
  %205 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %cmp317 = icmp eq %struct.rtx_def* %205, null
  br i1 %cmp317, label %if.then.331, label %lor.lhs.false.318

lor.lhs.false.318:                                ; preds = %if.end.311
  %206 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %207 = bitcast %struct.rtx_def* %206 to i32*
  %bf.load319 = load i32, i32* %207, align 8
  %bf.lshr320 = lshr i32 %bf.load319, 16
  %bf.clear321 = and i32 %bf.lshr320, 255
  %208 = load i32, i32* %tmode, align 4
  %cmp322 = icmp ne i32 %bf.clear321, %208
  br i1 %cmp322, label %if.then.331, label %lor.lhs.false.323

lor.lhs.false.323:                                ; preds = %lor.lhs.false.318
  %209 = load i32, i32* %icode, align 4
  %idxprom324 = zext i32 %209 to i64
  %arrayidx325 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom324
  %operand326 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx325, i32 0, i32 3
  %210 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand326, align 8
  %arrayidx327 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %210, i64 0
  %predicate328 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx327, i32 0, i32 0
  %211 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate328, align 8
  %212 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %213 = load i32, i32* %tmode, align 4
  %call329 = call i32 %211(%struct.rtx_def* %212, i32 %213)
  %tobool330 = icmp ne i32 %call329, 0
  br i1 %tobool330, label %if.end.333, label %if.then.331

if.then.331:                                      ; preds = %lor.lhs.false.323, %lor.lhs.false.318, %if.end.311
  %214 = load i32, i32* %tmode, align 4
  %call332 = call %struct.rtx_def* @gen_reg_rtx(i32 %214)
  store %struct.rtx_def* %call332, %struct.rtx_def** %target.addr, align 8
  br label %if.end.333

if.end.333:                                       ; preds = %if.then.331, %lor.lhs.false.323
  %215 = load i32, i32* %icode, align 4
  %idxprom334 = sext i32 %215 to i64
  %arrayidx335 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom334
  %genfun336 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx335, i32 0, i32 2
  %216 = load %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.rtx_def* (%struct.rtx_def*, ...)** %genfun336, align 8
  %217 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %218 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %219 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %call337 = call %struct.rtx_def* (%struct.rtx_def*, ...) %216(%struct.rtx_def* %217, %struct.rtx_def* %218, %struct.rtx_def* %219)
  store %struct.rtx_def* %call337, %struct.rtx_def** %pat, align 8
  %220 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8
  %tobool338 = icmp ne %struct.rtx_def* %220, null
  br i1 %tobool338, label %if.end.340, label %if.then.339

if.then.339:                                      ; preds = %if.end.333
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end.340:                                       ; preds = %if.end.333
  %221 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8
  %call341 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %221)
  %222 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  store %struct.rtx_def* %222, %struct.rtx_def** %retval
  br label %return

sw.bb.342:                                        ; preds = %entry, %entry
  %223 = load i32, i32* %fcode, align 4
  %cmp343 = icmp eq i32 %223, 67
  %cond344 = select i1 %cmp343, i32 684, i32 685
  store i32 %cond344, i32* %icode, align 4
  %224 = load %union.tree_node*, %union.tree_node** %arglist, align 8
  %list345 = bitcast %union.tree_node* %224 to %struct.tree_list*
  %value346 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list345, i32 0, i32 2
  %225 = load %union.tree_node*, %union.tree_node** %value346, align 8
  store %union.tree_node* %225, %union.tree_node** %arg0, align 8
  %226 = load %union.tree_node*, %union.tree_node** %arglist, align 8
  %common347 = bitcast %union.tree_node* %226 to %struct.tree_common*
  %chain348 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common347, i32 0, i32 0
  %227 = load %union.tree_node*, %union.tree_node** %chain348, align 8
  %list349 = bitcast %union.tree_node* %227 to %struct.tree_list*
  %value350 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list349, i32 0, i32 2
  %228 = load %union.tree_node*, %union.tree_node** %value350, align 8
  store %union.tree_node* %228, %union.tree_node** %arg1, align 8
  %229 = load %union.tree_node*, %union.tree_node** %arg0, align 8
  %call351 = call %struct.rtx_def* @expand_expr(%union.tree_node* %229, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call351, %struct.rtx_def** %op0, align 8
  %230 = load %union.tree_node*, %union.tree_node** %arg1, align 8
  %call352 = call %struct.rtx_def* @expand_expr(%union.tree_node* %230, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call352, %struct.rtx_def** %op1, align 8
  %231 = load i32, i32* %icode, align 4
  %idxprom353 = zext i32 %231 to i64
  %arrayidx354 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom353
  %operand355 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx354, i32 0, i32 3
  %232 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand355, align 8
  %arrayidx356 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %232, i64 1
  %mode357 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx356, i32 0, i32 2
  %bf.load358 = load i16, i16* %mode357, align 8
  %bf.cast359 = zext i16 %bf.load358 to i32
  store i32 %bf.cast359, i32* %mode0, align 4
  %233 = load i32, i32* %icode, align 4
  %idxprom360 = zext i32 %233 to i64
  %arrayidx361 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom360
  %operand362 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx361, i32 0, i32 3
  %234 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand362, align 8
  %arrayidx363 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %234, i64 2
  %mode364 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx363, i32 0, i32 2
  %bf.load365 = load i16, i16* %mode364, align 8
  %bf.cast366 = zext i16 %bf.load365 to i32
  store i32 %bf.cast366, i32* %mode1, align 4
  %235 = load i32, i32* %mode0, align 4
  %236 = load i32, i32* @target_flags, align 4
  %and367 = and i32 %236, 33554432
  %tobool368 = icmp ne i32 %and367, 0
  %cond369 = select i1 %tobool368, i32 5, i32 4
  %237 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call370 = call %struct.rtx_def* @copy_to_mode_reg(i32 %cond369, %struct.rtx_def* %237)
  %call371 = call %struct.rtx_def* @gen_rtx_MEM(i32 %235, %struct.rtx_def* %call370)
  store %struct.rtx_def* %call371, %struct.rtx_def** %op0, align 8
  %238 = load i32, i32* %icode, align 4
  %idxprom372 = zext i32 %238 to i64
  %arrayidx373 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom372
  %operand374 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx373, i32 0, i32 3
  %239 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand374, align 8
  %arrayidx375 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %239, i64 2
  %predicate376 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx375, i32 0, i32 0
  %240 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate376, align 8
  %241 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %242 = load i32, i32* %mode1, align 4
  %call377 = call i32 %240(%struct.rtx_def* %241, i32 %242)
  %tobool378 = icmp ne i32 %call377, 0
  br i1 %tobool378, label %if.end.381, label %if.then.379

if.then.379:                                      ; preds = %sw.bb.342
  %243 = load i32, i32* %mode1, align 4
  %244 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %call380 = call %struct.rtx_def* @copy_to_mode_reg(i32 %243, %struct.rtx_def* %244)
  store %struct.rtx_def* %call380, %struct.rtx_def** %op1, align 8
  br label %if.end.381

if.end.381:                                       ; preds = %if.then.379, %sw.bb.342
  %245 = load i32, i32* %icode, align 4
  %idxprom382 = sext i32 %245 to i64
  %arrayidx383 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom382
  %genfun384 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx383, i32 0, i32 2
  %246 = load %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.rtx_def* (%struct.rtx_def*, ...)** %genfun384, align 8
  %247 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %248 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %249 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %call385 = call %struct.rtx_def* (%struct.rtx_def*, ...) %246(%struct.rtx_def* %247, %struct.rtx_def* %248, %struct.rtx_def* %249)
  store %struct.rtx_def* %call385, %struct.rtx_def** %pat, align 8
  %250 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8
  %tobool386 = icmp ne %struct.rtx_def* %250, null
  br i1 %tobool386, label %if.end.388, label %if.then.387

if.then.387:                                      ; preds = %if.end.381
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end.388:                                       ; preds = %if.end.381
  %251 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8
  %call389 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %251)
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

sw.bb.390:                                        ; preds = %entry
  %252 = load %union.tree_node*, %union.tree_node** %arglist, align 8
  %call391 = call %struct.rtx_def* @ix86_expand_store_builtin(i32 680, %union.tree_node* %252)
  store %struct.rtx_def* %call391, %struct.rtx_def** %retval
  br label %return

sw.bb.392:                                        ; preds = %entry
  %253 = load %union.tree_node*, %union.tree_node** %arglist, align 8
  %call393 = call %struct.rtx_def* @ix86_expand_store_builtin(i32 681, %union.tree_node* %253)
  store %struct.rtx_def* %call393, %struct.rtx_def** %retval
  br label %return

sw.bb.394:                                        ; preds = %entry
  %254 = load %union.tree_node*, %union.tree_node** %arglist, align 8
  %list395 = bitcast %union.tree_node* %254 to %struct.tree_list*
  %value396 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list395, i32 0, i32 2
  %255 = load %union.tree_node*, %union.tree_node** %value396, align 8
  %call397 = call %struct.rtx_def* @expand_expr(%union.tree_node* %255, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call397, %struct.rtx_def** %op0, align 8
  %call398 = call %struct.rtx_def* @assign_386_stack_local(i32 4, i32 0)
  store %struct.rtx_def* %call398, %struct.rtx_def** %target.addr, align 8
  %256 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %257 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call399 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %256, %struct.rtx_def* %257)
  %258 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call400 = call %struct.rtx_def* @gen_ldmxcsr(%struct.rtx_def* %258)
  %call401 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call400)
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

sw.bb.402:                                        ; preds = %entry
  %call403 = call %struct.rtx_def* @assign_386_stack_local(i32 4, i32 0)
  store %struct.rtx_def* %call403, %struct.rtx_def** %target.addr, align 8
  %259 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call404 = call %struct.rtx_def* @gen_stmxcsr(%struct.rtx_def* %259)
  %call405 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call404)
  %260 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call406 = call %struct.rtx_def* @copy_to_mode_reg(i32 4, %struct.rtx_def* %260)
  store %struct.rtx_def* %call406, %struct.rtx_def** %retval
  br label %return

sw.bb.407:                                        ; preds = %entry
  store i32 689, i32* %icode, align 4
  %261 = load %union.tree_node*, %union.tree_node** %arglist, align 8
  %list408 = bitcast %union.tree_node* %261 to %struct.tree_list*
  %value409 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list408, i32 0, i32 2
  %262 = load %union.tree_node*, %union.tree_node** %value409, align 8
  store %union.tree_node* %262, %union.tree_node** %arg0, align 8
  %263 = load %union.tree_node*, %union.tree_node** %arglist, align 8
  %common410 = bitcast %union.tree_node* %263 to %struct.tree_common*
  %chain411 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common410, i32 0, i32 0
  %264 = load %union.tree_node*, %union.tree_node** %chain411, align 8
  %list412 = bitcast %union.tree_node* %264 to %struct.tree_list*
  %value413 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list412, i32 0, i32 2
  %265 = load %union.tree_node*, %union.tree_node** %value413, align 8
  store %union.tree_node* %265, %union.tree_node** %arg1, align 8
  %266 = load %union.tree_node*, %union.tree_node** %arglist, align 8
  %common414 = bitcast %union.tree_node* %266 to %struct.tree_common*
  %chain415 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common414, i32 0, i32 0
  %267 = load %union.tree_node*, %union.tree_node** %chain415, align 8
  %common416 = bitcast %union.tree_node* %267 to %struct.tree_common*
  %chain417 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common416, i32 0, i32 0
  %268 = load %union.tree_node*, %union.tree_node** %chain417, align 8
  %list418 = bitcast %union.tree_node* %268 to %struct.tree_list*
  %value419 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list418, i32 0, i32 2
  %269 = load %union.tree_node*, %union.tree_node** %value419, align 8
  store %union.tree_node* %269, %union.tree_node** %arg2, align 8
  %270 = load %union.tree_node*, %union.tree_node** %arg0, align 8
  %call420 = call %struct.rtx_def* @expand_expr(%union.tree_node* %270, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call420, %struct.rtx_def** %op0, align 8
  %271 = load %union.tree_node*, %union.tree_node** %arg1, align 8
  %call421 = call %struct.rtx_def* @expand_expr(%union.tree_node* %271, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call421, %struct.rtx_def** %op1, align 8
  %272 = load %union.tree_node*, %union.tree_node** %arg2, align 8
  %call422 = call %struct.rtx_def* @expand_expr(%union.tree_node* %272, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call422, %struct.rtx_def** %op2, align 8
  %273 = load i32, i32* %icode, align 4
  %idxprom423 = zext i32 %273 to i64
  %arrayidx424 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom423
  %operand425 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx424, i32 0, i32 3
  %274 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand425, align 8
  %arrayidx426 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %274, i64 0
  %mode427 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx426, i32 0, i32 2
  %bf.load428 = load i16, i16* %mode427, align 8
  %bf.cast429 = zext i16 %bf.load428 to i32
  store i32 %bf.cast429, i32* %tmode, align 4
  %275 = load i32, i32* %icode, align 4
  %idxprom430 = zext i32 %275 to i64
  %arrayidx431 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom430
  %operand432 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx431, i32 0, i32 3
  %276 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand432, align 8
  %arrayidx433 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %276, i64 1
  %mode434 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx433, i32 0, i32 2
  %bf.load435 = load i16, i16* %mode434, align 8
  %bf.cast436 = zext i16 %bf.load435 to i32
  store i32 %bf.cast436, i32* %mode0, align 4
  %277 = load i32, i32* %icode, align 4
  %idxprom437 = zext i32 %277 to i64
  %arrayidx438 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom437
  %operand439 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx438, i32 0, i32 3
  %278 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand439, align 8
  %arrayidx440 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %278, i64 2
  %mode441 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx440, i32 0, i32 2
  %bf.load442 = load i16, i16* %mode441, align 8
  %bf.cast443 = zext i16 %bf.load442 to i32
  store i32 %bf.cast443, i32* %mode1, align 4
  %279 = load i32, i32* %icode, align 4
  %idxprom444 = zext i32 %279 to i64
  %arrayidx445 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom444
  %operand446 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx445, i32 0, i32 3
  %280 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand446, align 8
  %arrayidx447 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %280, i64 3
  %mode448 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx447, i32 0, i32 2
  %bf.load449 = load i16, i16* %mode448, align 8
  %bf.cast450 = zext i16 %bf.load449 to i32
  store i32 %bf.cast450, i32* %mode2, align 4
  %281 = load i32, i32* %icode, align 4
  %idxprom451 = zext i32 %281 to i64
  %arrayidx452 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom451
  %operand453 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx452, i32 0, i32 3
  %282 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand453, align 8
  %arrayidx454 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %282, i64 1
  %predicate455 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx454, i32 0, i32 0
  %283 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate455, align 8
  %284 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %285 = load i32, i32* %mode0, align 4
  %call456 = call i32 %283(%struct.rtx_def* %284, i32 %285)
  %tobool457 = icmp ne i32 %call456, 0
  br i1 %tobool457, label %if.end.460, label %if.then.458

if.then.458:                                      ; preds = %sw.bb.407
  %286 = load i32, i32* %mode0, align 4
  %287 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call459 = call %struct.rtx_def* @copy_to_mode_reg(i32 %286, %struct.rtx_def* %287)
  store %struct.rtx_def* %call459, %struct.rtx_def** %op0, align 8
  br label %if.end.460

if.end.460:                                       ; preds = %if.then.458, %sw.bb.407
  %288 = load i32, i32* %icode, align 4
  %idxprom461 = zext i32 %288 to i64
  %arrayidx462 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom461
  %operand463 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx462, i32 0, i32 3
  %289 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand463, align 8
  %arrayidx464 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %289, i64 2
  %predicate465 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx464, i32 0, i32 0
  %290 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate465, align 8
  %291 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %292 = load i32, i32* %mode1, align 4
  %call466 = call i32 %290(%struct.rtx_def* %291, i32 %292)
  %tobool467 = icmp ne i32 %call466, 0
  br i1 %tobool467, label %if.end.470, label %if.then.468

if.then.468:                                      ; preds = %if.end.460
  %293 = load i32, i32* %mode1, align 4
  %294 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %call469 = call %struct.rtx_def* @copy_to_mode_reg(i32 %293, %struct.rtx_def* %294)
  store %struct.rtx_def* %call469, %struct.rtx_def** %op1, align 8
  br label %if.end.470

if.end.470:                                       ; preds = %if.then.468, %if.end.460
  %295 = load i32, i32* %icode, align 4
  %idxprom471 = zext i32 %295 to i64
  %arrayidx472 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom471
  %operand473 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx472, i32 0, i32 3
  %296 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand473, align 8
  %arrayidx474 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %296, i64 3
  %predicate475 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx474, i32 0, i32 0
  %297 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate475, align 8
  %298 = load %struct.rtx_def*, %struct.rtx_def** %op2, align 8
  %299 = load i32, i32* %mode2, align 4
  %call476 = call i32 %297(%struct.rtx_def* %298, i32 %299)
  %tobool477 = icmp ne i32 %call476, 0
  br i1 %tobool477, label %if.end.480, label %if.then.478

if.then.478:                                      ; preds = %if.end.470
  call void (i8*, ...) @error(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.198, i32 0, i32 0))
  %300 = load i32, i32* %tmode, align 4
  %call479 = call %struct.rtx_def* @gen_reg_rtx(i32 %300)
  store %struct.rtx_def* %call479, %struct.rtx_def** %retval
  br label %return

if.end.480:                                       ; preds = %if.end.470
  %301 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %cmp481 = icmp eq %struct.rtx_def* %301, null
  br i1 %cmp481, label %if.then.495, label %lor.lhs.false.482

lor.lhs.false.482:                                ; preds = %if.end.480
  %302 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %303 = bitcast %struct.rtx_def* %302 to i32*
  %bf.load483 = load i32, i32* %303, align 8
  %bf.lshr484 = lshr i32 %bf.load483, 16
  %bf.clear485 = and i32 %bf.lshr484, 255
  %304 = load i32, i32* %tmode, align 4
  %cmp486 = icmp ne i32 %bf.clear485, %304
  br i1 %cmp486, label %if.then.495, label %lor.lhs.false.487

lor.lhs.false.487:                                ; preds = %lor.lhs.false.482
  %305 = load i32, i32* %icode, align 4
  %idxprom488 = zext i32 %305 to i64
  %arrayidx489 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom488
  %operand490 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx489, i32 0, i32 3
  %306 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand490, align 8
  %arrayidx491 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %306, i64 0
  %predicate492 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx491, i32 0, i32 0
  %307 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate492, align 8
  %308 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %309 = load i32, i32* %tmode, align 4
  %call493 = call i32 %307(%struct.rtx_def* %308, i32 %309)
  %tobool494 = icmp ne i32 %call493, 0
  br i1 %tobool494, label %if.end.497, label %if.then.495

if.then.495:                                      ; preds = %lor.lhs.false.487, %lor.lhs.false.482, %if.end.480
  %310 = load i32, i32* %tmode, align 4
  %call496 = call %struct.rtx_def* @gen_reg_rtx(i32 %310)
  store %struct.rtx_def* %call496, %struct.rtx_def** %target.addr, align 8
  br label %if.end.497

if.end.497:                                       ; preds = %if.then.495, %lor.lhs.false.487
  %311 = load i32, i32* %icode, align 4
  %idxprom498 = sext i32 %311 to i64
  %arrayidx499 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom498
  %genfun500 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx499, i32 0, i32 2
  %312 = load %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.rtx_def* (%struct.rtx_def*, ...)** %genfun500, align 8
  %313 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %314 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %315 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %316 = load %struct.rtx_def*, %struct.rtx_def** %op2, align 8
  %call501 = call %struct.rtx_def* (%struct.rtx_def*, ...) %312(%struct.rtx_def* %313, %struct.rtx_def* %314, %struct.rtx_def* %315, %struct.rtx_def* %316)
  store %struct.rtx_def* %call501, %struct.rtx_def** %pat, align 8
  %317 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8
  %tobool502 = icmp ne %struct.rtx_def* %317, null
  br i1 %tobool502, label %if.end.504, label %if.then.503

if.then.503:                                      ; preds = %if.end.497
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end.504:                                       ; preds = %if.end.497
  %318 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8
  %call505 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %318)
  %319 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  store %struct.rtx_def* %319, %struct.rtx_def** %retval
  br label %return

sw.bb.506:                                        ; preds = %entry
  store i32 773, i32* %icode, align 4
  %320 = load %union.tree_node*, %union.tree_node** %arglist, align 8
  %list507 = bitcast %union.tree_node* %320 to %struct.tree_list*
  %value508 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list507, i32 0, i32 2
  %321 = load %union.tree_node*, %union.tree_node** %value508, align 8
  store %union.tree_node* %321, %union.tree_node** %arg0, align 8
  %322 = load %union.tree_node*, %union.tree_node** %arglist, align 8
  %common509 = bitcast %union.tree_node* %322 to %struct.tree_common*
  %chain510 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common509, i32 0, i32 0
  %323 = load %union.tree_node*, %union.tree_node** %chain510, align 8
  %list511 = bitcast %union.tree_node* %323 to %struct.tree_list*
  %value512 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list511, i32 0, i32 2
  %324 = load %union.tree_node*, %union.tree_node** %value512, align 8
  store %union.tree_node* %324, %union.tree_node** %arg1, align 8
  %325 = load %union.tree_node*, %union.tree_node** %arg0, align 8
  %call513 = call %struct.rtx_def* @expand_expr(%union.tree_node* %325, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call513, %struct.rtx_def** %op0, align 8
  %326 = load %union.tree_node*, %union.tree_node** %arg1, align 8
  %call514 = call %struct.rtx_def* @expand_expr(%union.tree_node* %326, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call514, %struct.rtx_def** %op1, align 8
  %327 = load i32, i32* %icode, align 4
  %idxprom515 = zext i32 %327 to i64
  %arrayidx516 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom515
  %operand517 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx516, i32 0, i32 3
  %328 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand517, align 8
  %arrayidx518 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %328, i64 0
  %mode519 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx518, i32 0, i32 2
  %bf.load520 = load i16, i16* %mode519, align 8
  %bf.cast521 = zext i16 %bf.load520 to i32
  store i32 %bf.cast521, i32* %tmode, align 4
  %329 = load i32, i32* %icode, align 4
  %idxprom522 = zext i32 %329 to i64
  %arrayidx523 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom522
  %operand524 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx523, i32 0, i32 3
  %330 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand524, align 8
  %arrayidx525 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %330, i64 1
  %mode526 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx525, i32 0, i32 2
  %bf.load527 = load i16, i16* %mode526, align 8
  %bf.cast528 = zext i16 %bf.load527 to i32
  store i32 %bf.cast528, i32* %mode1, align 4
  %331 = load i32, i32* %icode, align 4
  %idxprom529 = zext i32 %331 to i64
  %arrayidx530 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom529
  %operand531 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx530, i32 0, i32 3
  %332 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand531, align 8
  %arrayidx532 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %332, i64 2
  %mode533 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx532, i32 0, i32 2
  %bf.load534 = load i16, i16* %mode533, align 8
  %bf.cast535 = zext i16 %bf.load534 to i32
  store i32 %bf.cast535, i32* %mode2, align 4
  %333 = load i32, i32* %icode, align 4
  %idxprom536 = zext i32 %333 to i64
  %arrayidx537 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom536
  %operand538 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx537, i32 0, i32 3
  %334 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand538, align 8
  %arrayidx539 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %334, i64 1
  %predicate540 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx539, i32 0, i32 0
  %335 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate540, align 8
  %336 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %337 = load i32, i32* %mode1, align 4
  %call541 = call i32 %335(%struct.rtx_def* %336, i32 %337)
  %tobool542 = icmp ne i32 %call541, 0
  br i1 %tobool542, label %if.end.545, label %if.then.543

if.then.543:                                      ; preds = %sw.bb.506
  %338 = load i32, i32* %mode1, align 4
  %339 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call544 = call %struct.rtx_def* @copy_to_mode_reg(i32 %338, %struct.rtx_def* %339)
  store %struct.rtx_def* %call544, %struct.rtx_def** %op0, align 8
  br label %if.end.545

if.end.545:                                       ; preds = %if.then.543, %sw.bb.506
  %340 = load i32, i32* %icode, align 4
  %idxprom546 = zext i32 %340 to i64
  %arrayidx547 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom546
  %operand548 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx547, i32 0, i32 3
  %341 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand548, align 8
  %arrayidx549 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %341, i64 2
  %predicate550 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx549, i32 0, i32 0
  %342 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate550, align 8
  %343 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %344 = load i32, i32* %mode2, align 4
  %call551 = call i32 %342(%struct.rtx_def* %343, i32 %344)
  %tobool552 = icmp ne i32 %call551, 0
  br i1 %tobool552, label %if.end.554, label %if.then.553

if.then.553:                                      ; preds = %if.end.545
  call void (i8*, ...) @error(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.198, i32 0, i32 0))
  %345 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  store %struct.rtx_def* %345, %struct.rtx_def** %retval
  br label %return

if.end.554:                                       ; preds = %if.end.545
  %346 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %cmp555 = icmp eq %struct.rtx_def* %346, null
  br i1 %cmp555, label %if.then.569, label %lor.lhs.false.556

lor.lhs.false.556:                                ; preds = %if.end.554
  %347 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %348 = bitcast %struct.rtx_def* %347 to i32*
  %bf.load557 = load i32, i32* %348, align 8
  %bf.lshr558 = lshr i32 %bf.load557, 16
  %bf.clear559 = and i32 %bf.lshr558, 255
  %349 = load i32, i32* %tmode, align 4
  %cmp560 = icmp ne i32 %bf.clear559, %349
  br i1 %cmp560, label %if.then.569, label %lor.lhs.false.561

lor.lhs.false.561:                                ; preds = %lor.lhs.false.556
  %350 = load i32, i32* %icode, align 4
  %idxprom562 = zext i32 %350 to i64
  %arrayidx563 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom562
  %operand564 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx563, i32 0, i32 3
  %351 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand564, align 8
  %arrayidx565 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %351, i64 0
  %predicate566 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx565, i32 0, i32 0
  %352 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate566, align 8
  %353 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %354 = load i32, i32* %tmode, align 4
  %call567 = call i32 %352(%struct.rtx_def* %353, i32 %354)
  %tobool568 = icmp ne i32 %call567, 0
  br i1 %tobool568, label %if.end.571, label %if.then.569

if.then.569:                                      ; preds = %lor.lhs.false.561, %lor.lhs.false.556, %if.end.554
  %355 = load i32, i32* %tmode, align 4
  %call570 = call %struct.rtx_def* @gen_reg_rtx(i32 %355)
  store %struct.rtx_def* %call570, %struct.rtx_def** %target.addr, align 8
  br label %if.end.571

if.end.571:                                       ; preds = %if.then.569, %lor.lhs.false.561
  %356 = load i32, i32* %icode, align 4
  %idxprom572 = sext i32 %356 to i64
  %arrayidx573 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom572
  %genfun574 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx573, i32 0, i32 2
  %357 = load %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.rtx_def* (%struct.rtx_def*, ...)** %genfun574, align 8
  %358 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %359 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %360 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %call575 = call %struct.rtx_def* (%struct.rtx_def*, ...) %357(%struct.rtx_def* %358, %struct.rtx_def* %359, %struct.rtx_def* %360)
  store %struct.rtx_def* %call575, %struct.rtx_def** %pat, align 8
  %361 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8
  %tobool576 = icmp ne %struct.rtx_def* %361, null
  br i1 %tobool576, label %if.end.578, label %if.then.577

if.then.577:                                      ; preds = %if.end.571
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end.578:                                       ; preds = %if.end.571
  %362 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8
  %call579 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %362)
  %363 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  store %struct.rtx_def* %363, %struct.rtx_def** %retval
  br label %return

sw.bb.580:                                        ; preds = %entry
  %call581 = call %struct.rtx_def* @gen_femms()
  %call582 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call581)
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

sw.bb.583:                                        ; preds = %entry
  %364 = load %union.tree_node*, %union.tree_node** %arglist, align 8
  %365 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call584 = call %struct.rtx_def* @ix86_expand_binop_builtin(i32 823, %union.tree_node* %364, %struct.rtx_def* %365)
  store %struct.rtx_def* %call584, %struct.rtx_def** %retval
  br label %return

sw.bb.585:                                        ; preds = %entry
  %366 = load %union.tree_node*, %union.tree_node** %arglist, align 8
  %367 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call586 = call %struct.rtx_def* @ix86_expand_unop_builtin(i32 816, %union.tree_node* %366, %struct.rtx_def* %367, i32 0)
  store %struct.rtx_def* %call586, %struct.rtx_def** %retval
  br label %return

sw.bb.587:                                        ; preds = %entry
  %368 = load %union.tree_node*, %union.tree_node** %arglist, align 8
  %369 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call588 = call %struct.rtx_def* @ix86_expand_binop_builtin(i32 818, %union.tree_node* %368, %struct.rtx_def* %369)
  store %struct.rtx_def* %call588, %struct.rtx_def** %retval
  br label %return

sw.bb.589:                                        ; preds = %entry
  %370 = load %union.tree_node*, %union.tree_node** %arglist, align 8
  %371 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call590 = call %struct.rtx_def* @ix86_expand_binop_builtin(i32 806, %union.tree_node* %370, %struct.rtx_def* %371)
  store %struct.rtx_def* %call590, %struct.rtx_def** %retval
  br label %return

sw.bb.591:                                        ; preds = %entry
  %372 = load %union.tree_node*, %union.tree_node** %arglist, align 8
  %373 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call592 = call %struct.rtx_def* @ix86_expand_binop_builtin(i32 811, %union.tree_node* %372, %struct.rtx_def* %373)
  store %struct.rtx_def* %call592, %struct.rtx_def** %retval
  br label %return

sw.bb.593:                                        ; preds = %entry
  %374 = load %union.tree_node*, %union.tree_node** %arglist, align 8
  %375 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call594 = call %struct.rtx_def* @ix86_expand_binop_builtin(i32 810, %union.tree_node* %374, %struct.rtx_def* %375)
  store %struct.rtx_def* %call594, %struct.rtx_def** %retval
  br label %return

sw.bb.595:                                        ; preds = %entry
  %376 = load %union.tree_node*, %union.tree_node** %arglist, align 8
  %377 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call596 = call %struct.rtx_def* @ix86_expand_binop_builtin(i32 809, %union.tree_node* %376, %struct.rtx_def* %377)
  store %struct.rtx_def* %call596, %struct.rtx_def** %retval
  br label %return

sw.bb.597:                                        ; preds = %entry
  %378 = load %union.tree_node*, %union.tree_node** %arglist, align 8
  %379 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call598 = call %struct.rtx_def* @ix86_expand_binop_builtin(i32 812, %union.tree_node* %378, %struct.rtx_def* %379)
  store %struct.rtx_def* %call598, %struct.rtx_def** %retval
  br label %return

sw.bb.599:                                        ; preds = %entry
  %380 = load %union.tree_node*, %union.tree_node** %arglist, align 8
  %381 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call600 = call %struct.rtx_def* @ix86_expand_binop_builtin(i32 813, %union.tree_node* %380, %struct.rtx_def* %381)
  store %struct.rtx_def* %call600, %struct.rtx_def** %retval
  br label %return

sw.bb.601:                                        ; preds = %entry
  %382 = load %union.tree_node*, %union.tree_node** %arglist, align 8
  %383 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call602 = call %struct.rtx_def* @ix86_expand_binop_builtin(i32 814, %union.tree_node* %382, %struct.rtx_def* %383)
  store %struct.rtx_def* %call602, %struct.rtx_def** %retval
  br label %return

sw.bb.603:                                        ; preds = %entry
  %384 = load %union.tree_node*, %union.tree_node** %arglist, align 8
  %385 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call604 = call %struct.rtx_def* @ix86_expand_unop_builtin(i32 824, %union.tree_node* %384, %struct.rtx_def* %385, i32 0)
  store %struct.rtx_def* %call604, %struct.rtx_def** %retval
  br label %return

sw.bb.605:                                        ; preds = %entry
  %386 = load %union.tree_node*, %union.tree_node** %arglist, align 8
  %387 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call606 = call %struct.rtx_def* @ix86_expand_binop_builtin(i32 825, %union.tree_node* %386, %struct.rtx_def* %387)
  store %struct.rtx_def* %call606, %struct.rtx_def** %retval
  br label %return

sw.bb.607:                                        ; preds = %entry
  %388 = load %union.tree_node*, %union.tree_node** %arglist, align 8
  %389 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call608 = call %struct.rtx_def* @ix86_expand_binop_builtin(i32 826, %union.tree_node* %388, %struct.rtx_def* %389)
  store %struct.rtx_def* %call608, %struct.rtx_def** %retval
  br label %return

sw.bb.609:                                        ; preds = %entry
  %390 = load %union.tree_node*, %union.tree_node** %arglist, align 8
  %391 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call610 = call %struct.rtx_def* @ix86_expand_binop_builtin(i32 828, %union.tree_node* %390, %struct.rtx_def* %391)
  store %struct.rtx_def* %call610, %struct.rtx_def** %retval
  br label %return

sw.bb.611:                                        ; preds = %entry
  %392 = load %union.tree_node*, %union.tree_node** %arglist, align 8
  %393 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call612 = call %struct.rtx_def* @ix86_expand_unop_builtin(i32 827, %union.tree_node* %392, %struct.rtx_def* %393, i32 0)
  store %struct.rtx_def* %call612, %struct.rtx_def** %retval
  br label %return

sw.bb.613:                                        ; preds = %entry
  %394 = load %union.tree_node*, %union.tree_node** %arglist, align 8
  %395 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call614 = call %struct.rtx_def* @ix86_expand_binop_builtin(i32 807, %union.tree_node* %394, %struct.rtx_def* %395)
  store %struct.rtx_def* %call614, %struct.rtx_def** %retval
  br label %return

sw.bb.615:                                        ; preds = %entry
  %396 = load %union.tree_node*, %union.tree_node** %arglist, align 8
  %397 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call616 = call %struct.rtx_def* @ix86_expand_binop_builtin(i32 808, %union.tree_node* %396, %struct.rtx_def* %397)
  store %struct.rtx_def* %call616, %struct.rtx_def** %retval
  br label %return

sw.bb.617:                                        ; preds = %entry
  %398 = load %union.tree_node*, %union.tree_node** %arglist, align 8
  %399 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call618 = call %struct.rtx_def* @ix86_expand_unop_builtin(i32 822, %union.tree_node* %398, %struct.rtx_def* %399, i32 0)
  store %struct.rtx_def* %call618, %struct.rtx_def** %retval
  br label %return

sw.bb.619:                                        ; preds = %entry
  %400 = load %union.tree_node*, %union.tree_node** %arglist, align 8
  %401 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call620 = call %struct.rtx_def* @ix86_expand_binop_builtin(i32 829, %union.tree_node* %400, %struct.rtx_def* %401)
  store %struct.rtx_def* %call620, %struct.rtx_def** %retval
  br label %return

sw.bb.621:                                        ; preds = %entry
  %402 = load %union.tree_node*, %union.tree_node** %arglist, align 8
  %403 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call622 = call %struct.rtx_def* @ix86_expand_unop_builtin(i32 817, %union.tree_node* %402, %struct.rtx_def* %403, i32 0)
  store %struct.rtx_def* %call622, %struct.rtx_def** %retval
  br label %return

sw.bb.623:                                        ; preds = %entry
  %404 = load %union.tree_node*, %union.tree_node** %arglist, align 8
  %405 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call624 = call %struct.rtx_def* @ix86_expand_binop_builtin(i32 819, %union.tree_node* %404, %struct.rtx_def* %405)
  store %struct.rtx_def* %call624, %struct.rtx_def** %retval
  br label %return

sw.bb.625:                                        ; preds = %entry
  %406 = load %union.tree_node*, %union.tree_node** %arglist, align 8
  %407 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call626 = call %struct.rtx_def* @ix86_expand_binop_builtin(i32 820, %union.tree_node* %406, %struct.rtx_def* %407)
  store %struct.rtx_def* %call626, %struct.rtx_def** %retval
  br label %return

sw.bb.627:                                        ; preds = %entry
  %408 = load %union.tree_node*, %union.tree_node** %arglist, align 8
  %409 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call628 = call %struct.rtx_def* @ix86_expand_unop_builtin(i32 821, %union.tree_node* %408, %struct.rtx_def* %409, i32 0)
  store %struct.rtx_def* %call628, %struct.rtx_def** %retval
  br label %return

sw.bb.629:                                        ; preds = %entry
  %410 = load %union.tree_node*, %union.tree_node** %arglist, align 8
  %411 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call630 = call %struct.rtx_def* @ix86_expand_unop_builtin(i32 830, %union.tree_node* %410, %struct.rtx_def* %411, i32 0)
  store %struct.rtx_def* %call630, %struct.rtx_def** %retval
  br label %return

sw.bb.631:                                        ; preds = %entry
  %412 = load %union.tree_node*, %union.tree_node** %arglist, align 8
  %413 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call632 = call %struct.rtx_def* @ix86_expand_unop_builtin(i32 831, %union.tree_node* %412, %struct.rtx_def* %413, i32 0)
  store %struct.rtx_def* %call632, %struct.rtx_def** %retval
  br label %return

sw.bb.633:                                        ; preds = %entry
  %call634 = call %struct.rtx_def* @gen_reg_rtx(i32 46)
  store %struct.rtx_def* %call634, %struct.rtx_def** %target.addr, align 8
  %414 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call635 = call %struct.rtx_def* @gen_sse_clrv4sf(%struct.rtx_def* %414)
  %call636 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call635)
  %415 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  store %struct.rtx_def* %415, %struct.rtx_def** %retval
  br label %return

sw.bb.637:                                        ; preds = %entry
  %call638 = call %struct.rtx_def* @gen_reg_rtx(i32 5)
  store %struct.rtx_def* %call638, %struct.rtx_def** %target.addr, align 8
  %416 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call639 = call %struct.rtx_def* @gen_mmx_clrdi(%struct.rtx_def* %416)
  %call640 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call639)
  %417 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  store %struct.rtx_def* %417, %struct.rtx_def** %retval
  br label %return

sw.default:                                       ; preds = %entry
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default
  store i64 0, i64* %i, align 8
  store %struct.builtin_description* getelementptr inbounds ([103 x %struct.builtin_description], [103 x %struct.builtin_description]* @bdesc_2arg, i32 0, i32 0), %struct.builtin_description** %d, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %sw.epilog
  %418 = load i64, i64* %i, align 8
  %cmp641 = icmp ult i64 %418, 103
  br i1 %cmp641, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %419 = load %struct.builtin_description*, %struct.builtin_description** %d, align 8
  %code = getelementptr inbounds %struct.builtin_description, %struct.builtin_description* %419, i32 0, i32 3
  %420 = load i32, i32* %code, align 4
  %421 = load i32, i32* %fcode, align 4
  %cmp642 = icmp eq i32 %420, %421
  br i1 %cmp642, label %if.then.643, label %if.end.660

if.then.643:                                      ; preds = %for.body
  %422 = load %struct.builtin_description*, %struct.builtin_description** %d, align 8
  %icode644 = getelementptr inbounds %struct.builtin_description, %struct.builtin_description* %422, i32 0, i32 1
  %423 = load i32, i32* %icode644, align 4
  %cmp645 = icmp eq i32 %423, 727
  br i1 %cmp645, label %if.then.655, label %lor.lhs.false.646

lor.lhs.false.646:                                ; preds = %if.then.643
  %424 = load %struct.builtin_description*, %struct.builtin_description** %d, align 8
  %icode647 = getelementptr inbounds %struct.builtin_description, %struct.builtin_description* %424, i32 0, i32 1
  %425 = load i32, i32* %icode647, align 4
  %cmp648 = icmp eq i32 %425, 729
  br i1 %cmp648, label %if.then.655, label %lor.lhs.false.649

lor.lhs.false.649:                                ; preds = %lor.lhs.false.646
  %426 = load %struct.builtin_description*, %struct.builtin_description** %d, align 8
  %icode650 = getelementptr inbounds %struct.builtin_description, %struct.builtin_description* %426, i32 0, i32 1
  %427 = load i32, i32* %icode650, align 4
  %cmp651 = icmp eq i32 %427, 728
  br i1 %cmp651, label %if.then.655, label %lor.lhs.false.652

lor.lhs.false.652:                                ; preds = %lor.lhs.false.649
  %428 = load %struct.builtin_description*, %struct.builtin_description** %d, align 8
  %icode653 = getelementptr inbounds %struct.builtin_description, %struct.builtin_description* %428, i32 0, i32 1
  %429 = load i32, i32* %icode653, align 4
  %cmp654 = icmp eq i32 %429, 730
  br i1 %cmp654, label %if.then.655, label %if.end.657

if.then.655:                                      ; preds = %lor.lhs.false.652, %lor.lhs.false.649, %lor.lhs.false.646, %if.then.643
  %430 = load %struct.builtin_description*, %struct.builtin_description** %d, align 8
  %431 = load %union.tree_node*, %union.tree_node** %arglist, align 8
  %432 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call656 = call %struct.rtx_def* @ix86_expand_sse_compare(%struct.builtin_description* %430, %union.tree_node* %431, %struct.rtx_def* %432)
  store %struct.rtx_def* %call656, %struct.rtx_def** %retval
  br label %return

if.end.657:                                       ; preds = %lor.lhs.false.652
  %433 = load %struct.builtin_description*, %struct.builtin_description** %d, align 8
  %icode658 = getelementptr inbounds %struct.builtin_description, %struct.builtin_description* %433, i32 0, i32 1
  %434 = load i32, i32* %icode658, align 4
  %435 = load %union.tree_node*, %union.tree_node** %arglist, align 8
  %436 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call659 = call %struct.rtx_def* @ix86_expand_binop_builtin(i32 %434, %union.tree_node* %435, %struct.rtx_def* %436)
  store %struct.rtx_def* %call659, %struct.rtx_def** %retval
  br label %return

if.end.660:                                       ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.660
  %437 = load i64, i64* %i, align 8
  %inc = add i64 %437, 1
  store i64 %inc, i64* %i, align 8
  %438 = load %struct.builtin_description*, %struct.builtin_description** %d, align 8
  %incdec.ptr = getelementptr inbounds %struct.builtin_description, %struct.builtin_description* %438, i32 1
  store %struct.builtin_description* %incdec.ptr, %struct.builtin_description** %d, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i64 0, i64* %i, align 8
  store %struct.builtin_description* getelementptr inbounds ([9 x %struct.builtin_description], [9 x %struct.builtin_description]* @bdesc_1arg, i32 0, i32 0), %struct.builtin_description** %d, align 8
  br label %for.cond.661

for.cond.661:                                     ; preds = %for.inc.670, %for.end
  %439 = load i64, i64* %i, align 8
  %cmp662 = icmp ult i64 %439, 9
  br i1 %cmp662, label %for.body.663, label %for.end.673

for.body.663:                                     ; preds = %for.cond.661
  %440 = load %struct.builtin_description*, %struct.builtin_description** %d, align 8
  %code664 = getelementptr inbounds %struct.builtin_description, %struct.builtin_description* %440, i32 0, i32 3
  %441 = load i32, i32* %code664, align 4
  %442 = load i32, i32* %fcode, align 4
  %cmp665 = icmp eq i32 %441, %442
  br i1 %cmp665, label %if.then.666, label %if.end.669

if.then.666:                                      ; preds = %for.body.663
  %443 = load %struct.builtin_description*, %struct.builtin_description** %d, align 8
  %icode667 = getelementptr inbounds %struct.builtin_description, %struct.builtin_description* %443, i32 0, i32 1
  %444 = load i32, i32* %icode667, align 4
  %445 = load %union.tree_node*, %union.tree_node** %arglist, align 8
  %446 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call668 = call %struct.rtx_def* @ix86_expand_unop_builtin(i32 %444, %union.tree_node* %445, %struct.rtx_def* %446, i32 0)
  store %struct.rtx_def* %call668, %struct.rtx_def** %retval
  br label %return

if.end.669:                                       ; preds = %for.body.663
  br label %for.inc.670

for.inc.670:                                      ; preds = %if.end.669
  %447 = load i64, i64* %i, align 8
  %inc671 = add i64 %447, 1
  store i64 %inc671, i64* %i, align 8
  %448 = load %struct.builtin_description*, %struct.builtin_description** %d, align 8
  %incdec.ptr672 = getelementptr inbounds %struct.builtin_description, %struct.builtin_description* %448, i32 1
  store %struct.builtin_description* %incdec.ptr672, %struct.builtin_description** %d, align 8
  br label %for.cond.661

for.end.673:                                      ; preds = %for.cond.661
  store i64 0, i64* %i, align 8
  store %struct.builtin_description* getelementptr inbounds ([12 x %struct.builtin_description], [12 x %struct.builtin_description]* @bdesc_comi, i32 0, i32 0), %struct.builtin_description** %d, align 8
  br label %for.cond.674

for.cond.674:                                     ; preds = %for.inc.682, %for.end.673
  %449 = load i64, i64* %i, align 8
  %cmp675 = icmp ult i64 %449, 12
  br i1 %cmp675, label %for.body.676, label %for.end.685

for.body.676:                                     ; preds = %for.cond.674
  %450 = load %struct.builtin_description*, %struct.builtin_description** %d, align 8
  %code677 = getelementptr inbounds %struct.builtin_description, %struct.builtin_description* %450, i32 0, i32 3
  %451 = load i32, i32* %code677, align 4
  %452 = load i32, i32* %fcode, align 4
  %cmp678 = icmp eq i32 %451, %452
  br i1 %cmp678, label %if.then.679, label %if.end.681

if.then.679:                                      ; preds = %for.body.676
  %453 = load %struct.builtin_description*, %struct.builtin_description** %d, align 8
  %454 = load %union.tree_node*, %union.tree_node** %arglist, align 8
  %455 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call680 = call %struct.rtx_def* @ix86_expand_sse_comi(%struct.builtin_description* %453, %union.tree_node* %454, %struct.rtx_def* %455)
  store %struct.rtx_def* %call680, %struct.rtx_def** %retval
  br label %return

if.end.681:                                       ; preds = %for.body.676
  br label %for.inc.682

for.inc.682:                                      ; preds = %if.end.681
  %456 = load i64, i64* %i, align 8
  %inc683 = add i64 %456, 1
  store i64 %inc683, i64* %i, align 8
  %457 = load %struct.builtin_description*, %struct.builtin_description** %d, align 8
  %incdec.ptr684 = getelementptr inbounds %struct.builtin_description, %struct.builtin_description* %457, i32 1
  store %struct.builtin_description* %incdec.ptr684, %struct.builtin_description** %d, align 8
  br label %for.cond.674

for.end.685:                                      ; preds = %for.cond.674
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %for.end.685, %if.then.679, %if.then.666, %if.end.657, %if.then.655, %sw.bb.637, %sw.bb.633, %sw.bb.631, %sw.bb.629, %sw.bb.627, %sw.bb.625, %sw.bb.623, %sw.bb.621, %sw.bb.619, %sw.bb.617, %sw.bb.615, %sw.bb.613, %sw.bb.611, %sw.bb.609, %sw.bb.607, %sw.bb.605, %sw.bb.603, %sw.bb.601, %sw.bb.599, %sw.bb.597, %sw.bb.595, %sw.bb.593, %sw.bb.591, %sw.bb.589, %sw.bb.587, %sw.bb.585, %sw.bb.583, %sw.bb.580, %if.end.578, %if.then.577, %if.then.553, %if.end.504, %if.then.503, %if.then.478, %sw.bb.402, %sw.bb.394, %sw.bb.392, %sw.bb.390, %if.end.388, %if.then.387, %if.end.340, %if.then.339, %sw.bb.268, %sw.bb.266, %sw.bb.264, %sw.bb.262, %sw.bb.260, %sw.bb.258, %sw.bb.256, %sw.bb.254, %sw.bb.252, %sw.bb.250, %sw.bb.248, %sw.bb.246, %sw.bb.244, %if.end.242, %if.then.241, %if.end.166, %if.then.165, %if.then.141, %if.end.68, %if.then.67, %if.then.47, %sw.bb.9, %sw.bb
  %458 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %458
}

declare i32 @default_section_type_flags(%union.tree_node*, i8*, i32) #0

declare zeroext i1 @hook_void_bool_false() #0

; Function Attrs: nounwind uwtable
define void @override_options() #1 {
entry:
  %i = alloca i32, align 4
  %pta_size = alloca i32, align 4
  %p = alloca i8*, align 8
  store i32 18, i32* %pta_size, align 4
  %0 = load i8*, i8** @ix86_cpu_string, align 8
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %1 = load i8*, i8** @ix86_arch_string, align 8
  %tobool1 = icmp ne i8* %1, null
  br i1 %tobool1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %2 = load i8*, i8** @ix86_arch_string, align 8
  store i8* %2, i8** @ix86_cpu_string, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %3 = load i8*, i8** @ix86_cpu_string, align 8
  %tobool2 = icmp ne i8* %3, null
  br i1 %tobool2, label %if.end.4, label %if.then.3

if.then.3:                                        ; preds = %if.end
  %4 = load i8*, i8** getelementptr inbounds ([13 x i8*], [13 x i8*]* @override_options.cpu_names, i32 0, i64 12), align 8
  store i8* %4, i8** @ix86_cpu_string, align 8
  br label %if.end.4

if.end.4:                                         ; preds = %if.then.3, %if.end
  %5 = load i8*, i8** @ix86_arch_string, align 8
  %tobool5 = icmp ne i8* %5, null
  br i1 %tobool5, label %if.end.8, label %if.then.6

if.then.6:                                        ; preds = %if.end.4
  %6 = load i32, i32* @target_flags, align 4
  %and = and i32 %6, 33554432
  %tobool7 = icmp ne i32 %and, 0
  %cond = select i1 %tobool7, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0)
  store i8* %cond, i8** @ix86_arch_string, align 8
  br label %if.end.8

if.end.8:                                         ; preds = %if.then.6, %if.end.4
  %7 = load i8*, i8** @ix86_cmodel_string, align 8
  %cmp = icmp ne i8* %7, null
  br i1 %cmp, label %if.then.9, label %if.else.45

if.then.9:                                        ; preds = %if.end.8
  %8 = load i8*, i8** @ix86_cmodel_string, align 8
  %call = call i32 @strcmp(i8* %8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.23, i32 0, i32 0)) #8
  %tobool10 = icmp ne i32 %call, 0
  br i1 %tobool10, label %if.else, label %if.then.11

if.then.11:                                       ; preds = %if.then.9
  %9 = load i32, i32* @flag_pic, align 4
  %tobool12 = icmp ne i32 %9, 0
  %cond13 = select i1 %tobool12, i32 5, i32 1
  store i32 %cond13, i32* @ix86_cmodel, align 4
  br label %if.end.44

if.else:                                          ; preds = %if.then.9
  %10 = load i32, i32* @flag_pic, align 4
  %tobool14 = icmp ne i32 %10, 0
  br i1 %tobool14, label %if.then.15, label %if.else.16

if.then.15:                                       ; preds = %if.else
  %11 = load i8*, i8** @ix86_cmodel_string, align 8
  call void (i8*, ...) @sorry(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.24, i32 0, i32 0), i8* %11)
  br label %if.end.43

if.else.16:                                       ; preds = %if.else
  %12 = load i8*, i8** @ix86_cmodel_string, align 8
  %call17 = call i32 @strcmp(i8* %12, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.25, i32 0, i32 0)) #8
  %tobool18 = icmp ne i32 %call17, 0
  br i1 %tobool18, label %if.else.20, label %if.then.19

if.then.19:                                       ; preds = %if.else.16
  store i32 0, i32* @ix86_cmodel, align 4
  br label %if.end.42

if.else.20:                                       ; preds = %if.else.16
  %13 = load i8*, i8** @ix86_cmodel_string, align 8
  %call21 = call i32 @strcmp(i8* %13, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.26, i32 0, i32 0)) #8
  %tobool22 = icmp ne i32 %call21, 0
  br i1 %tobool22, label %if.else.26, label %land.lhs.true.23

land.lhs.true.23:                                 ; preds = %if.else.20
  %14 = load i32, i32* @flag_pic, align 4
  %tobool24 = icmp ne i32 %14, 0
  br i1 %tobool24, label %if.else.26, label %if.then.25

if.then.25:                                       ; preds = %land.lhs.true.23
  store i32 2, i32* @ix86_cmodel, align 4
  br label %if.end.41

if.else.26:                                       ; preds = %land.lhs.true.23, %if.else.20
  %15 = load i8*, i8** @ix86_cmodel_string, align 8
  %call27 = call i32 @strcmp(i8* %15, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.27, i32 0, i32 0)) #8
  %tobool28 = icmp ne i32 %call27, 0
  br i1 %tobool28, label %if.else.32, label %land.lhs.true.29

land.lhs.true.29:                                 ; preds = %if.else.26
  %16 = load i32, i32* @flag_pic, align 4
  %tobool30 = icmp ne i32 %16, 0
  br i1 %tobool30, label %if.else.32, label %if.then.31

if.then.31:                                       ; preds = %land.lhs.true.29
  store i32 3, i32* @ix86_cmodel, align 4
  br label %if.end.40

if.else.32:                                       ; preds = %land.lhs.true.29, %if.else.26
  %17 = load i8*, i8** @ix86_cmodel_string, align 8
  %call33 = call i32 @strcmp(i8* %17, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.28, i32 0, i32 0)) #8
  %tobool34 = icmp ne i32 %call33, 0
  br i1 %tobool34, label %if.else.38, label %land.lhs.true.35

land.lhs.true.35:                                 ; preds = %if.else.32
  %18 = load i32, i32* @flag_pic, align 4
  %tobool36 = icmp ne i32 %18, 0
  br i1 %tobool36, label %if.else.38, label %if.then.37

if.then.37:                                       ; preds = %land.lhs.true.35
  store i32 4, i32* @ix86_cmodel, align 4
  br label %if.end.39

if.else.38:                                       ; preds = %land.lhs.true.35, %if.else.32
  %19 = load i8*, i8** @ix86_cmodel_string, align 8
  call void (i8*, ...) @error(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.29, i32 0, i32 0), i8* %19)
  br label %if.end.39

if.end.39:                                        ; preds = %if.else.38, %if.then.37
  br label %if.end.40

if.end.40:                                        ; preds = %if.end.39, %if.then.31
  br label %if.end.41

if.end.41:                                        ; preds = %if.end.40, %if.then.25
  br label %if.end.42

if.end.42:                                        ; preds = %if.end.41, %if.then.19
  br label %if.end.43

if.end.43:                                        ; preds = %if.end.42, %if.then.15
  br label %if.end.44

if.end.44:                                        ; preds = %if.end.43, %if.then.11
  br label %if.end.52

if.else.45:                                       ; preds = %if.end.8
  store i32 0, i32* @ix86_cmodel, align 4
  %20 = load i32, i32* @target_flags, align 4
  %and46 = and i32 %20, 33554432
  %tobool47 = icmp ne i32 %and46, 0
  br i1 %tobool47, label %if.then.48, label %if.end.51

if.then.48:                                       ; preds = %if.else.45
  %21 = load i32, i32* @flag_pic, align 4
  %tobool49 = icmp ne i32 %21, 0
  %cond50 = select i1 %tobool49, i32 5, i32 1
  store i32 %cond50, i32* @ix86_cmodel, align 4
  br label %if.end.51

if.end.51:                                        ; preds = %if.then.48, %if.else.45
  br label %if.end.52

if.end.52:                                        ; preds = %if.end.51, %if.end.44
  %22 = load i8*, i8** @ix86_asm_string, align 8
  %cmp53 = icmp ne i8* %22, null
  br i1 %cmp53, label %if.then.54, label %if.end.65

if.then.54:                                       ; preds = %if.end.52
  %23 = load i8*, i8** @ix86_asm_string, align 8
  %call55 = call i32 @strcmp(i8* %23, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.30, i32 0, i32 0)) #8
  %tobool56 = icmp ne i32 %call55, 0
  br i1 %tobool56, label %if.else.58, label %if.then.57

if.then.57:                                       ; preds = %if.then.54
  store i32 1, i32* @ix86_asm_dialect, align 4
  br label %if.end.64

if.else.58:                                       ; preds = %if.then.54
  %24 = load i8*, i8** @ix86_asm_string, align 8
  %call59 = call i32 @strcmp(i8* %24, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.31, i32 0, i32 0)) #8
  %tobool60 = icmp ne i32 %call59, 0
  br i1 %tobool60, label %if.else.62, label %if.then.61

if.then.61:                                       ; preds = %if.else.58
  store i32 0, i32* @ix86_asm_dialect, align 4
  br label %if.end.63

if.else.62:                                       ; preds = %if.else.58
  %25 = load i8*, i8** @ix86_asm_string, align 8
  call void (i8*, ...) @error(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.32, i32 0, i32 0), i8* %25)
  br label %if.end.63

if.end.63:                                        ; preds = %if.else.62, %if.then.61
  br label %if.end.64

if.end.64:                                        ; preds = %if.end.63, %if.then.57
  br label %if.end.65

if.end.65:                                        ; preds = %if.end.64, %if.end.52
  %26 = load i32, i32* @target_flags, align 4
  %and66 = and i32 %26, 33554432
  %cmp67 = icmp eq i32 %and66, 0
  %conv = zext i1 %cmp67 to i32
  %27 = load i32, i32* @ix86_cmodel, align 4
  %cmp68 = icmp eq i32 %27, 0
  %conv69 = zext i1 %cmp68 to i32
  %cmp70 = icmp ne i32 %conv, %conv69
  br i1 %cmp70, label %if.then.72, label %if.end.76

if.then.72:                                       ; preds = %if.end.65
  %28 = load i8*, i8** @ix86_cmodel_string, align 8
  %29 = load i32, i32* @target_flags, align 4
  %and73 = and i32 %29, 33554432
  %tobool74 = icmp ne i32 %and73, 0
  %cond75 = select i1 %tobool74, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.34, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.25, i32 0, i32 0)
  call void (i8*, ...) @error(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.33, i32 0, i32 0), i8* %28, i8* %cond75)
  br label %if.end.76

if.end.76:                                        ; preds = %if.then.72, %if.end.65
  %30 = load i32, i32* @ix86_cmodel, align 4
  %cmp77 = icmp eq i32 %30, 4
  br i1 %cmp77, label %if.then.79, label %if.end.80

if.then.79:                                       ; preds = %if.end.76
  call void (i8*, ...) @sorry(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.35, i32 0, i32 0))
  br label %if.end.80

if.end.80:                                        ; preds = %if.then.79, %if.end.76
  %31 = load i32, i32* @target_flags, align 4
  %and81 = and i32 %31, 33554432
  %cmp82 = icmp ne i32 %and81, 0
  %conv83 = zext i1 %cmp82 to i32
  %32 = load i32, i32* @target_flags, align 4
  %and84 = and i32 %32, 33554432
  %cmp85 = icmp ne i32 %and84, 0
  %conv86 = zext i1 %cmp85 to i32
  %cmp87 = icmp ne i32 %conv83, %conv86
  br i1 %cmp87, label %if.then.89, label %if.end.93

if.then.89:                                       ; preds = %if.end.80
  %33 = load i32, i32* @target_flags, align 4
  %and90 = and i32 %33, 33554432
  %tobool91 = icmp ne i32 %and90, 0
  %cond92 = select i1 %tobool91, i32 64, i32 32
  call void (i8*, ...) @sorry(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.36, i32 0, i32 0), i32 %cond92)
  br label %if.end.93

if.end.93:                                        ; preds = %if.then.89, %if.end.80
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.93
  %34 = load i32, i32* %i, align 4
  %cmp94 = icmp slt i32 %34, 18
  br i1 %cmp94, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %35 = load i8*, i8** @ix86_arch_string, align 8
  %36 = load i32, i32* %i, align 4
  %idxprom = sext i32 %36 to i64
  %arrayidx = getelementptr inbounds [18 x %struct.pta], [18 x %struct.pta]* @override_options.processor_alias_table, i32 0, i64 %idxprom
  %name = getelementptr inbounds %struct.pta, %struct.pta* %arrayidx, i32 0, i32 0
  %37 = load i8*, i8** %name, align 8
  %call96 = call i32 @strcmp(i8* %35, i8* %37) #8
  %tobool97 = icmp ne i32 %call96, 0
  br i1 %tobool97, label %if.end.161, label %if.then.98

if.then.98:                                       ; preds = %for.body
  %38 = load i32, i32* %i, align 4
  %idxprom99 = sext i32 %38 to i64
  %arrayidx100 = getelementptr inbounds [18 x %struct.pta], [18 x %struct.pta]* @override_options.processor_alias_table, i32 0, i64 %idxprom99
  %processor = getelementptr inbounds %struct.pta, %struct.pta* %arrayidx100, i32 0, i32 1
  %39 = load i32, i32* %processor, align 4
  store i32 %39, i32* @ix86_arch, align 4
  %40 = load i32, i32* @ix86_arch, align 4
  store i32 %40, i32* @ix86_cpu, align 4
  %41 = load i32, i32* %i, align 4
  %idxprom101 = sext i32 %41 to i64
  %arrayidx102 = getelementptr inbounds [18 x %struct.pta], [18 x %struct.pta]* @override_options.processor_alias_table, i32 0, i64 %idxprom101
  %flags = getelementptr inbounds %struct.pta, %struct.pta* %arrayidx102, i32 0, i32 2
  %42 = load i32, i32* %flags, align 4
  %and103 = and i32 %42, 4
  %tobool104 = icmp ne i32 %and103, 0
  br i1 %tobool104, label %land.lhs.true.105, label %if.end.109

land.lhs.true.105:                                ; preds = %if.then.98
  %43 = load i32, i32* @target_flags, align 4
  %and106 = and i32 %43, 32768
  %tobool107 = icmp ne i32 %and106, 0
  br i1 %tobool107, label %if.end.109, label %if.then.108

if.then.108:                                      ; preds = %land.lhs.true.105
  %44 = load i32, i32* @target_flags, align 4
  %or = or i32 %44, 16384
  store i32 %or, i32* @target_flags, align 4
  br label %if.end.109

if.end.109:                                       ; preds = %if.then.108, %land.lhs.true.105, %if.then.98
  %45 = load i32, i32* %i, align 4
  %idxprom110 = sext i32 %45 to i64
  %arrayidx111 = getelementptr inbounds [18 x %struct.pta], [18 x %struct.pta]* @override_options.processor_alias_table, i32 0, i64 %idxprom110
  %flags112 = getelementptr inbounds %struct.pta, %struct.pta* %arrayidx111, i32 0, i32 2
  %46 = load i32, i32* %flags112, align 4
  %and113 = and i32 %46, 16
  %tobool114 = icmp ne i32 %and113, 0
  br i1 %tobool114, label %land.lhs.true.115, label %if.end.120

land.lhs.true.115:                                ; preds = %if.end.109
  %47 = load i32, i32* @target_flags, align 4
  %and116 = and i32 %47, 2097152
  %tobool117 = icmp ne i32 %and116, 0
  br i1 %tobool117, label %if.end.120, label %if.then.118

if.then.118:                                      ; preds = %land.lhs.true.115
  %48 = load i32, i32* @target_flags, align 4
  %or119 = or i32 %48, 1048576
  store i32 %or119, i32* @target_flags, align 4
  br label %if.end.120

if.end.120:                                       ; preds = %if.then.118, %land.lhs.true.115, %if.end.109
  %49 = load i32, i32* %i, align 4
  %idxprom121 = sext i32 %49 to i64
  %arrayidx122 = getelementptr inbounds [18 x %struct.pta], [18 x %struct.pta]* @override_options.processor_alias_table, i32 0, i64 %idxprom121
  %flags123 = getelementptr inbounds %struct.pta, %struct.pta* %arrayidx122, i32 0, i32 2
  %50 = load i32, i32* %flags123, align 4
  %and124 = and i32 %50, 64
  %tobool125 = icmp ne i32 %and124, 0
  br i1 %tobool125, label %land.lhs.true.126, label %if.end.131

land.lhs.true.126:                                ; preds = %if.end.120
  %51 = load i32, i32* @target_flags, align 4
  %and127 = and i32 %51, 8388608
  %tobool128 = icmp ne i32 %and127, 0
  br i1 %tobool128, label %if.end.131, label %if.then.129

if.then.129:                                      ; preds = %land.lhs.true.126
  %52 = load i32, i32* @target_flags, align 4
  %or130 = or i32 %52, 4194304
  store i32 %or130, i32* @target_flags, align 4
  br label %if.end.131

if.end.131:                                       ; preds = %if.then.129, %land.lhs.true.126, %if.end.120
  %53 = load i32, i32* %i, align 4
  %idxprom132 = sext i32 %53 to i64
  %arrayidx133 = getelementptr inbounds [18 x %struct.pta], [18 x %struct.pta]* @override_options.processor_alias_table, i32 0, i64 %idxprom132
  %flags134 = getelementptr inbounds %struct.pta, %struct.pta* %arrayidx133, i32 0, i32 2
  %54 = load i32, i32* %flags134, align 4
  %and135 = and i32 %54, 1
  %tobool136 = icmp ne i32 %and135, 0
  br i1 %tobool136, label %land.lhs.true.137, label %if.end.142

land.lhs.true.137:                                ; preds = %if.end.131
  %55 = load i32, i32* @target_flags, align 4
  %and138 = and i32 %55, 131072
  %tobool139 = icmp ne i32 %and138, 0
  br i1 %tobool139, label %if.end.142, label %if.then.140

if.then.140:                                      ; preds = %land.lhs.true.137
  %56 = load i32, i32* @target_flags, align 4
  %or141 = or i32 %56, 65536
  store i32 %or141, i32* @target_flags, align 4
  br label %if.end.142

if.end.142:                                       ; preds = %if.then.140, %land.lhs.true.137, %if.end.131
  %57 = load i32, i32* %i, align 4
  %idxprom143 = sext i32 %57 to i64
  %arrayidx144 = getelementptr inbounds [18 x %struct.pta], [18 x %struct.pta]* @override_options.processor_alias_table, i32 0, i64 %idxprom143
  %flags145 = getelementptr inbounds %struct.pta, %struct.pta* %arrayidx144, i32 0, i32 2
  %58 = load i32, i32* %flags145, align 4
  %and146 = and i32 %58, 2
  %tobool147 = icmp ne i32 %and146, 0
  br i1 %tobool147, label %land.lhs.true.148, label %if.end.153

land.lhs.true.148:                                ; preds = %if.end.142
  %59 = load i32, i32* @target_flags, align 4
  %and149 = and i32 %59, 524288
  %tobool150 = icmp ne i32 %and149, 0
  br i1 %tobool150, label %if.end.153, label %if.then.151

if.then.151:                                      ; preds = %land.lhs.true.148
  %60 = load i32, i32* @target_flags, align 4
  %or152 = or i32 %60, 262144
  store i32 %or152, i32* @target_flags, align 4
  br label %if.end.153

if.end.153:                                       ; preds = %if.then.151, %land.lhs.true.148, %if.end.142
  %61 = load i32, i32* %i, align 4
  %idxprom154 = sext i32 %61 to i64
  %arrayidx155 = getelementptr inbounds [18 x %struct.pta], [18 x %struct.pta]* @override_options.processor_alias_table, i32 0, i64 %idxprom154
  %flags156 = getelementptr inbounds %struct.pta, %struct.pta* %arrayidx155, i32 0, i32 2
  %62 = load i32, i32* %flags156, align 4
  %and157 = and i32 %62, 8
  %tobool158 = icmp ne i32 %and157, 0
  br i1 %tobool158, label %if.then.159, label %if.end.160

if.then.159:                                      ; preds = %if.end.153
  store i32 1, i32* @x86_prefetch_sse, align 4
  br label %if.end.160

if.end.160:                                       ; preds = %if.then.159, %if.end.153
  br label %for.end

if.end.161:                                       ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.161
  %63 = load i32, i32* %i, align 4
  %inc = add nsw i32 %63, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.end.160, %for.cond
  %64 = load i32, i32* %i, align 4
  %cmp162 = icmp eq i32 %64, 18
  br i1 %cmp162, label %if.then.164, label %if.end.165

if.then.164:                                      ; preds = %for.end
  %65 = load i8*, i8** @ix86_arch_string, align 8
  call void (i8*, ...) @error(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.37, i32 0, i32 0), i8* %65)
  br label %if.end.165

if.end.165:                                       ; preds = %if.then.164, %for.end
  store i32 0, i32* %i, align 4
  br label %for.cond.166

for.cond.166:                                     ; preds = %for.inc.180, %if.end.165
  %66 = load i32, i32* %i, align 4
  %cmp167 = icmp slt i32 %66, 18
  br i1 %cmp167, label %for.body.169, label %for.end.182

for.body.169:                                     ; preds = %for.cond.166
  %67 = load i8*, i8** @ix86_cpu_string, align 8
  %68 = load i32, i32* %i, align 4
  %idxprom170 = sext i32 %68 to i64
  %arrayidx171 = getelementptr inbounds [18 x %struct.pta], [18 x %struct.pta]* @override_options.processor_alias_table, i32 0, i64 %idxprom170
  %name172 = getelementptr inbounds %struct.pta, %struct.pta* %arrayidx171, i32 0, i32 0
  %69 = load i8*, i8** %name172, align 8
  %call173 = call i32 @strcmp(i8* %67, i8* %69) #8
  %tobool174 = icmp ne i32 %call173, 0
  br i1 %tobool174, label %if.end.179, label %if.then.175

if.then.175:                                      ; preds = %for.body.169
  %70 = load i32, i32* %i, align 4
  %idxprom176 = sext i32 %70 to i64
  %arrayidx177 = getelementptr inbounds [18 x %struct.pta], [18 x %struct.pta]* @override_options.processor_alias_table, i32 0, i64 %idxprom176
  %processor178 = getelementptr inbounds %struct.pta, %struct.pta* %arrayidx177, i32 0, i32 1
  %71 = load i32, i32* %processor178, align 4
  store i32 %71, i32* @ix86_cpu, align 4
  br label %for.end.182

if.end.179:                                       ; preds = %for.body.169
  br label %for.inc.180

for.inc.180:                                      ; preds = %if.end.179
  %72 = load i32, i32* %i, align 4
  %inc181 = add nsw i32 %72, 1
  store i32 %inc181, i32* %i, align 4
  br label %for.cond.166

for.end.182:                                      ; preds = %if.then.175, %for.cond.166
  %73 = load i32, i32* %i, align 4
  %idxprom183 = sext i32 %73 to i64
  %arrayidx184 = getelementptr inbounds [18 x %struct.pta], [18 x %struct.pta]* @override_options.processor_alias_table, i32 0, i64 %idxprom183
  %flags185 = getelementptr inbounds %struct.pta, %struct.pta* %arrayidx184, i32 0, i32 2
  %74 = load i32, i32* %flags185, align 4
  %and186 = and i32 %74, 8
  %tobool187 = icmp ne i32 %and186, 0
  br i1 %tobool187, label %if.then.188, label %if.end.189

if.then.188:                                      ; preds = %for.end.182
  store i32 1, i32* @x86_prefetch_sse, align 4
  br label %if.end.189

if.end.189:                                       ; preds = %if.then.188, %for.end.182
  %75 = load i32, i32* %i, align 4
  %cmp190 = icmp eq i32 %75, 18
  br i1 %cmp190, label %if.then.192, label %if.end.193

if.then.192:                                      ; preds = %if.end.189
  %76 = load i8*, i8** @ix86_cpu_string, align 8
  call void (i8*, ...) @error(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.38, i32 0, i32 0), i8* %76)
  br label %if.end.193

if.end.193:                                       ; preds = %if.then.192, %if.end.189
  %77 = load i32, i32* @optimize_size, align 4
  %tobool194 = icmp ne i32 %77, 0
  br i1 %tobool194, label %if.then.195, label %if.else.196

if.then.195:                                      ; preds = %if.end.193
  store %struct.processor_costs* @size_cost, %struct.processor_costs** @ix86_cost, align 8
  br label %if.end.199

if.else.196:                                      ; preds = %if.end.193
  %78 = load i32, i32* @ix86_cpu, align 4
  %idxprom197 = zext i32 %78 to i64
  %arrayidx198 = getelementptr inbounds [7 x %struct.ptt], [7 x %struct.ptt]* @override_options.processor_target_table, i32 0, i64 %idxprom197
  %cost = getelementptr inbounds %struct.ptt, %struct.ptt* %arrayidx198, i32 0, i32 0
  %79 = load %struct.processor_costs*, %struct.processor_costs** %cost, align 8
  store %struct.processor_costs* %79, %struct.processor_costs** @ix86_cost, align 8
  br label %if.end.199

if.end.199:                                       ; preds = %if.else.196, %if.then.195
  %80 = load i32, i32* @ix86_cpu, align 4
  %idxprom200 = zext i32 %80 to i64
  %arrayidx201 = getelementptr inbounds [7 x %struct.ptt], [7 x %struct.ptt]* @override_options.processor_target_table, i32 0, i64 %idxprom200
  %target_enable = getelementptr inbounds %struct.ptt, %struct.ptt* %arrayidx201, i32 0, i32 1
  %81 = load i32, i32* %target_enable, align 4
  %82 = load i32, i32* @target_flags, align 4
  %or202 = or i32 %82, %81
  store i32 %or202, i32* @target_flags, align 4
  %83 = load i32, i32* @ix86_cpu, align 4
  %idxprom203 = zext i32 %83 to i64
  %arrayidx204 = getelementptr inbounds [7 x %struct.ptt], [7 x %struct.ptt]* @override_options.processor_target_table, i32 0, i64 %idxprom203
  %target_disable = getelementptr inbounds %struct.ptt, %struct.ptt* %arrayidx204, i32 0, i32 2
  %84 = load i32, i32* %target_disable, align 4
  %neg = xor i32 %84, -1
  %85 = load i32, i32* @target_flags, align 4
  %and205 = and i32 %85, %neg
  store i32 %and205, i32* @target_flags, align 4
  store void (%struct.function*)* @ix86_init_machine_status, void (%struct.function*)** @init_machine_status, align 8
  store void (%struct.function*)* @ix86_mark_machine_status, void (%struct.function*)** @mark_machine_status, align 8
  store void (%struct.function*)* @ix86_free_machine_status, void (%struct.function*)** @free_machine_status, align 8
  %86 = load i8*, i8** @ix86_regparm_string, align 8
  %tobool206 = icmp ne i8* %86, null
  br i1 %tobool206, label %if.then.207, label %if.else.222

if.then.207:                                      ; preds = %if.end.199
  %87 = load i8*, i8** @ix86_regparm_string, align 8
  %call208 = call i32 @atoi(i8* %87) #8
  store i32 %call208, i32* %i, align 4
  %88 = load i32, i32* %i, align 4
  %cmp209 = icmp slt i32 %88, 0
  br i1 %cmp209, label %if.then.216, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then.207
  %89 = load i32, i32* %i, align 4
  %90 = load i32, i32* @target_flags, align 4
  %and211 = and i32 %90, 33554432
  %tobool212 = icmp ne i32 %and211, 0
  %cond213 = select i1 %tobool212, i32 6, i32 3
  %cmp214 = icmp sgt i32 %89, %cond213
  br i1 %cmp214, label %if.then.216, label %if.else.220

if.then.216:                                      ; preds = %lor.lhs.false, %if.then.207
  %91 = load i32, i32* %i, align 4
  %92 = load i32, i32* @target_flags, align 4
  %and217 = and i32 %92, 33554432
  %tobool218 = icmp ne i32 %and217, 0
  %cond219 = select i1 %tobool218, i32 6, i32 3
  call void (i8*, ...) @error(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.39, i32 0, i32 0), i32 %91, i32 %cond219)
  br label %if.end.221

if.else.220:                                      ; preds = %lor.lhs.false
  %93 = load i32, i32* %i, align 4
  store i32 %93, i32* @ix86_regparm, align 4
  br label %if.end.221

if.end.221:                                       ; preds = %if.else.220, %if.then.216
  br label %if.end.230

if.else.222:                                      ; preds = %if.end.199
  %94 = load i32, i32* @target_flags, align 4
  %and223 = and i32 %94, 33554432
  %tobool224 = icmp ne i32 %and223, 0
  br i1 %tobool224, label %if.then.225, label %if.end.229

if.then.225:                                      ; preds = %if.else.222
  %95 = load i32, i32* @target_flags, align 4
  %and226 = and i32 %95, 33554432
  %tobool227 = icmp ne i32 %and226, 0
  %cond228 = select i1 %tobool227, i32 6, i32 3
  store i32 %cond228, i32* @ix86_regparm, align 4
  br label %if.end.229

if.end.229:                                       ; preds = %if.then.225, %if.else.222
  br label %if.end.230

if.end.230:                                       ; preds = %if.end.229, %if.end.221
  %96 = load i8*, i8** @ix86_align_loops_string, align 8
  %tobool231 = icmp ne i8* %96, null
  br i1 %tobool231, label %if.then.232, label %if.end.246

if.then.232:                                      ; preds = %if.end.230
  call void (i8*, ...) @warning(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.40, i32 0, i32 0))
  %97 = load i32, i32* @align_loops, align 4
  %cmp233 = icmp eq i32 %97, 0
  br i1 %cmp233, label %if.then.235, label %if.end.245

if.then.235:                                      ; preds = %if.then.232
  %98 = load i8*, i8** @ix86_align_loops_string, align 8
  %call236 = call i32 @atoi(i8* %98) #8
  store i32 %call236, i32* %i, align 4
  %99 = load i32, i32* %i, align 4
  %cmp237 = icmp slt i32 %99, 0
  br i1 %cmp237, label %if.then.242, label %lor.lhs.false.239

lor.lhs.false.239:                                ; preds = %if.then.235
  %100 = load i32, i32* %i, align 4
  %cmp240 = icmp sgt i32 %100, 16
  br i1 %cmp240, label %if.then.242, label %if.else.243

if.then.242:                                      ; preds = %lor.lhs.false.239, %if.then.235
  %101 = load i32, i32* %i, align 4
  call void (i8*, ...) @error(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.41, i32 0, i32 0), i32 %101, i32 16)
  br label %if.end.244

if.else.243:                                      ; preds = %lor.lhs.false.239
  %102 = load i32, i32* %i, align 4
  %shl = shl i32 1, %102
  store i32 %shl, i32* @align_loops, align 4
  br label %if.end.244

if.end.244:                                       ; preds = %if.else.243, %if.then.242
  br label %if.end.245

if.end.245:                                       ; preds = %if.end.244, %if.then.232
  br label %if.end.246

if.end.246:                                       ; preds = %if.end.245, %if.end.230
  %103 = load i8*, i8** @ix86_align_jumps_string, align 8
  %tobool247 = icmp ne i8* %103, null
  br i1 %tobool247, label %if.then.248, label %if.end.263

if.then.248:                                      ; preds = %if.end.246
  call void (i8*, ...) @warning(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.42, i32 0, i32 0))
  %104 = load i32, i32* @align_jumps, align 4
  %cmp249 = icmp eq i32 %104, 0
  br i1 %cmp249, label %if.then.251, label %if.end.262

if.then.251:                                      ; preds = %if.then.248
  %105 = load i8*, i8** @ix86_align_jumps_string, align 8
  %call252 = call i32 @atoi(i8* %105) #8
  store i32 %call252, i32* %i, align 4
  %106 = load i32, i32* %i, align 4
  %cmp253 = icmp slt i32 %106, 0
  br i1 %cmp253, label %if.then.258, label %lor.lhs.false.255

lor.lhs.false.255:                                ; preds = %if.then.251
  %107 = load i32, i32* %i, align 4
  %cmp256 = icmp sgt i32 %107, 16
  br i1 %cmp256, label %if.then.258, label %if.else.259

if.then.258:                                      ; preds = %lor.lhs.false.255, %if.then.251
  %108 = load i32, i32* %i, align 4
  call void (i8*, ...) @error(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.41, i32 0, i32 0), i32 %108, i32 16)
  br label %if.end.261

if.else.259:                                      ; preds = %lor.lhs.false.255
  %109 = load i32, i32* %i, align 4
  %shl260 = shl i32 1, %109
  store i32 %shl260, i32* @align_jumps, align 4
  br label %if.end.261

if.end.261:                                       ; preds = %if.else.259, %if.then.258
  br label %if.end.262

if.end.262:                                       ; preds = %if.end.261, %if.then.248
  br label %if.end.263

if.end.263:                                       ; preds = %if.end.262, %if.end.246
  %110 = load i8*, i8** @ix86_align_funcs_string, align 8
  %tobool264 = icmp ne i8* %110, null
  br i1 %tobool264, label %if.then.265, label %if.end.280

if.then.265:                                      ; preds = %if.end.263
  call void (i8*, ...) @warning(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.43, i32 0, i32 0))
  %111 = load i32, i32* @align_functions, align 4
  %cmp266 = icmp eq i32 %111, 0
  br i1 %cmp266, label %if.then.268, label %if.end.279

if.then.268:                                      ; preds = %if.then.265
  %112 = load i8*, i8** @ix86_align_funcs_string, align 8
  %call269 = call i32 @atoi(i8* %112) #8
  store i32 %call269, i32* %i, align 4
  %113 = load i32, i32* %i, align 4
  %cmp270 = icmp slt i32 %113, 0
  br i1 %cmp270, label %if.then.275, label %lor.lhs.false.272

lor.lhs.false.272:                                ; preds = %if.then.268
  %114 = load i32, i32* %i, align 4
  %cmp273 = icmp sgt i32 %114, 16
  br i1 %cmp273, label %if.then.275, label %if.else.276

if.then.275:                                      ; preds = %lor.lhs.false.272, %if.then.268
  %115 = load i32, i32* %i, align 4
  call void (i8*, ...) @error(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.41, i32 0, i32 0), i32 %115, i32 16)
  br label %if.end.278

if.else.276:                                      ; preds = %lor.lhs.false.272
  %116 = load i32, i32* %i, align 4
  %shl277 = shl i32 1, %116
  store i32 %shl277, i32* @align_functions, align 4
  br label %if.end.278

if.end.278:                                       ; preds = %if.else.276, %if.then.275
  br label %if.end.279

if.end.279:                                       ; preds = %if.end.278, %if.then.265
  br label %if.end.280

if.end.280:                                       ; preds = %if.end.279, %if.end.263
  %117 = load i32, i32* @align_loops, align 4
  %cmp281 = icmp eq i32 %117, 0
  br i1 %cmp281, label %if.then.283, label %if.end.288

if.then.283:                                      ; preds = %if.end.280
  %118 = load i32, i32* @ix86_cpu, align 4
  %idxprom284 = zext i32 %118 to i64
  %arrayidx285 = getelementptr inbounds [7 x %struct.ptt], [7 x %struct.ptt]* @override_options.processor_target_table, i32 0, i64 %idxprom284
  %align_loop = getelementptr inbounds %struct.ptt, %struct.ptt* %arrayidx285, i32 0, i32 3
  %119 = load i32, i32* %align_loop, align 4
  store i32 %119, i32* @align_loops, align 4
  %120 = load i32, i32* @ix86_cpu, align 4
  %idxprom286 = zext i32 %120 to i64
  %arrayidx287 = getelementptr inbounds [7 x %struct.ptt], [7 x %struct.ptt]* @override_options.processor_target_table, i32 0, i64 %idxprom286
  %align_loop_max_skip = getelementptr inbounds %struct.ptt, %struct.ptt* %arrayidx287, i32 0, i32 4
  %121 = load i32, i32* %align_loop_max_skip, align 4
  store i32 %121, i32* @align_loops_max_skip, align 4
  br label %if.end.288

if.end.288:                                       ; preds = %if.then.283, %if.end.280
  %122 = load i32, i32* @align_jumps, align 4
  %cmp289 = icmp eq i32 %122, 0
  br i1 %cmp289, label %if.then.291, label %if.end.296

if.then.291:                                      ; preds = %if.end.288
  %123 = load i32, i32* @ix86_cpu, align 4
  %idxprom292 = zext i32 %123 to i64
  %arrayidx293 = getelementptr inbounds [7 x %struct.ptt], [7 x %struct.ptt]* @override_options.processor_target_table, i32 0, i64 %idxprom292
  %align_jump = getelementptr inbounds %struct.ptt, %struct.ptt* %arrayidx293, i32 0, i32 5
  %124 = load i32, i32* %align_jump, align 4
  store i32 %124, i32* @align_jumps, align 4
  %125 = load i32, i32* @ix86_cpu, align 4
  %idxprom294 = zext i32 %125 to i64
  %arrayidx295 = getelementptr inbounds [7 x %struct.ptt], [7 x %struct.ptt]* @override_options.processor_target_table, i32 0, i64 %idxprom294
  %align_jump_max_skip = getelementptr inbounds %struct.ptt, %struct.ptt* %arrayidx295, i32 0, i32 6
  %126 = load i32, i32* %align_jump_max_skip, align 4
  store i32 %126, i32* @align_jumps_max_skip, align 4
  br label %if.end.296

if.end.296:                                       ; preds = %if.then.291, %if.end.288
  %127 = load i32, i32* @align_functions, align 4
  %cmp297 = icmp eq i32 %127, 0
  br i1 %cmp297, label %if.then.299, label %if.end.302

if.then.299:                                      ; preds = %if.end.296
  %128 = load i32, i32* @ix86_cpu, align 4
  %idxprom300 = zext i32 %128 to i64
  %arrayidx301 = getelementptr inbounds [7 x %struct.ptt], [7 x %struct.ptt]* @override_options.processor_target_table, i32 0, i64 %idxprom300
  %align_func = getelementptr inbounds %struct.ptt, %struct.ptt* %arrayidx301, i32 0, i32 7
  %129 = load i32, i32* %align_func, align 4
  store i32 %129, i32* @align_functions, align 4
  br label %if.end.302

if.end.302:                                       ; preds = %if.then.299, %if.end.296
  %130 = load i32, i32* @optimize_size, align 4
  %tobool303 = icmp ne i32 %130, 0
  br i1 %tobool303, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.302
  %131 = load i32, i32* @target_flags, align 4
  %and304 = and i32 %131, 33554432
  %tobool305 = icmp ne i32 %and304, 0
  %cond306 = select i1 %tobool305, i32 128, i32 32
  br label %cond.end

cond.false:                                       ; preds = %if.end.302
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond307 = phi i32 [ %cond306, %cond.true ], [ 128, %cond.false ]
  store i32 %cond307, i32* @ix86_preferred_stack_boundary, align 4
  %132 = load i8*, i8** @ix86_preferred_stack_boundary_string, align 8
  %tobool308 = icmp ne i8* %132, null
  br i1 %tobool308, label %if.then.309, label %if.end.326

if.then.309:                                      ; preds = %cond.end
  %133 = load i8*, i8** @ix86_preferred_stack_boundary_string, align 8
  %call310 = call i32 @atoi(i8* %133) #8
  store i32 %call310, i32* %i, align 4
  %134 = load i32, i32* %i, align 4
  %135 = load i32, i32* @target_flags, align 4
  %and311 = and i32 %135, 33554432
  %tobool312 = icmp ne i32 %and311, 0
  %cond313 = select i1 %tobool312, i32 4, i32 2
  %cmp314 = icmp slt i32 %134, %cond313
  br i1 %cmp314, label %if.then.319, label %lor.lhs.false.316

lor.lhs.false.316:                                ; preds = %if.then.309
  %136 = load i32, i32* %i, align 4
  %cmp317 = icmp sgt i32 %136, 12
  br i1 %cmp317, label %if.then.319, label %if.else.323

if.then.319:                                      ; preds = %lor.lhs.false.316, %if.then.309
  %137 = load i32, i32* %i, align 4
  %138 = load i32, i32* @target_flags, align 4
  %and320 = and i32 %138, 33554432
  %tobool321 = icmp ne i32 %and320, 0
  %cond322 = select i1 %tobool321, i32 4, i32 2
  call void (i8*, ...) @error(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.44, i32 0, i32 0), i32 %137, i32 %cond322)
  br label %if.end.325

if.else.323:                                      ; preds = %lor.lhs.false.316
  %139 = load i32, i32* %i, align 4
  %shl324 = shl i32 1, %139
  %mul = mul nsw i32 %shl324, 8
  store i32 %mul, i32* @ix86_preferred_stack_boundary, align 4
  br label %if.end.325

if.end.325:                                       ; preds = %if.else.323, %if.then.319
  br label %if.end.326

if.end.326:                                       ; preds = %if.end.325, %cond.end
  %140 = load i32, i32* @ix86_cpu, align 4
  %idxprom327 = zext i32 %140 to i64
  %arrayidx328 = getelementptr inbounds [7 x %struct.ptt], [7 x %struct.ptt]* @override_options.processor_target_table, i32 0, i64 %idxprom327
  %branch_cost = getelementptr inbounds %struct.ptt, %struct.ptt* %arrayidx328, i32 0, i32 8
  %141 = load i32, i32* %branch_cost, align 4
  store i32 %141, i32* @ix86_branch_cost, align 4
  %142 = load i8*, i8** @ix86_branch_cost_string, align 8
  %tobool329 = icmp ne i8* %142, null
  br i1 %tobool329, label %if.then.330, label %if.end.340

if.then.330:                                      ; preds = %if.end.326
  %143 = load i8*, i8** @ix86_branch_cost_string, align 8
  %call331 = call i32 @atoi(i8* %143) #8
  store i32 %call331, i32* %i, align 4
  %144 = load i32, i32* %i, align 4
  %cmp332 = icmp slt i32 %144, 0
  br i1 %cmp332, label %if.then.337, label %lor.lhs.false.334

lor.lhs.false.334:                                ; preds = %if.then.330
  %145 = load i32, i32* %i, align 4
  %cmp335 = icmp sgt i32 %145, 5
  br i1 %cmp335, label %if.then.337, label %if.else.338

if.then.337:                                      ; preds = %lor.lhs.false.334, %if.then.330
  %146 = load i32, i32* %i, align 4
  call void (i8*, ...) @error(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.45, i32 0, i32 0), i32 %146)
  br label %if.end.339

if.else.338:                                      ; preds = %lor.lhs.false.334
  %147 = load i32, i32* %i, align 4
  store i32 %147, i32* @ix86_branch_cost, align 4
  br label %if.end.339

if.end.339:                                       ; preds = %if.else.338, %if.then.337
  br label %if.end.340

if.end.340:                                       ; preds = %if.end.339, %if.end.326
  %148 = load i32, i32* @target_flags, align 4
  %and341 = and i32 %148, 128
  %tobool342 = icmp ne i32 %and341, 0
  br i1 %tobool342, label %if.then.343, label %if.end.344

if.then.343:                                      ; preds = %if.end.340
  store i32 1, i32* @flag_omit_frame_pointer, align 4
  br label %if.end.344

if.end.344:                                       ; preds = %if.then.343, %if.end.340
  %149 = load i32, i32* @flag_unsafe_math_optimizations, align 4
  %tobool345 = icmp ne i32 %149, 0
  br i1 %tobool345, label %if.then.346, label %if.end.348

if.then.346:                                      ; preds = %if.end.344
  %150 = load i32, i32* @target_flags, align 4
  %and347 = and i32 %150, -17
  store i32 %and347, i32* @target_flags, align 4
  br label %if.end.348

if.end.348:                                       ; preds = %if.then.346, %if.end.344
  %151 = load i32, i32* @ix86_arch, align 4
  %shl349 = shl i32 1, %151
  %and350 = and i32 108, %shl349
  %tobool351 = icmp ne i32 %and350, 0
  br i1 %tobool351, label %if.then.352, label %if.end.354

if.then.352:                                      ; preds = %if.end.348
  %152 = load i32, i32* @target_flags, align 4
  %and353 = and i32 %152, -65
  store i32 %and353, i32* @target_flags, align 4
  br label %if.end.354

if.end.354:                                       ; preds = %if.then.352, %if.end.348
  %153 = load i32, i32* @target_flags, align 4
  %and355 = and i32 %153, 33554432
  %tobool356 = icmp ne i32 %and355, 0
  br i1 %tobool356, label %if.then.357, label %if.else.367

if.then.357:                                      ; preds = %if.end.354
  %154 = load i32, i32* @target_flags, align 4
  %and358 = and i32 %154, 4
  %tobool359 = icmp ne i32 %and358, 0
  br i1 %tobool359, label %if.then.360, label %if.end.361

if.then.360:                                      ; preds = %if.then.357
  call void (i8*, ...) @error(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.46, i32 0, i32 0))
  br label %if.end.361

if.end.361:                                       ; preds = %if.then.360, %if.then.357
  %155 = load i32, i32* @target_flags, align 4
  %and362 = and i32 %155, 2
  %tobool363 = icmp ne i32 %and362, 0
  br i1 %tobool363, label %if.then.364, label %if.end.365

if.then.364:                                      ; preds = %if.end.361
  call void (i8*, ...) @error(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.47, i32 0, i32 0))
  br label %if.end.365

if.end.365:                                       ; preds = %if.then.364, %if.end.361
  %156 = load i32, i32* @target_flags, align 4
  %or366 = or i32 %156, 17121280
  store i32 %or366, i32* @target_flags, align 4
  store i32 2, i32* @ix86_fpmath, align 4
  br label %if.end.368

if.else.367:                                      ; preds = %if.end.354
  store i32 1, i32* @ix86_fpmath, align 4
  br label %if.end.368

if.end.368:                                       ; preds = %if.else.367, %if.end.365
  %157 = load i8*, i8** @ix86_fpmath_string, align 8
  %cmp369 = icmp ne i8* %157, null
  br i1 %cmp369, label %if.then.371, label %if.end.407

if.then.371:                                      ; preds = %if.end.368
  %158 = load i8*, i8** @ix86_fpmath_string, align 8
  %call372 = call i32 @strcmp(i8* %158, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.48, i32 0, i32 0)) #8
  %tobool373 = icmp ne i32 %call372, 0
  br i1 %tobool373, label %if.else.375, label %if.then.374

if.then.374:                                      ; preds = %if.then.371
  store i32 1, i32* @ix86_fpmath, align 4
  br label %if.end.406

if.else.375:                                      ; preds = %if.then.371
  %159 = load i8*, i8** @ix86_fpmath_string, align 8
  %call376 = call i32 @strcmp(i8* %159, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.49, i32 0, i32 0)) #8
  %tobool377 = icmp ne i32 %call376, 0
  br i1 %tobool377, label %if.else.385, label %if.then.378

if.then.378:                                      ; preds = %if.else.375
  %160 = load i32, i32* @target_flags, align 4
  %and379 = and i32 %160, 327680
  %cmp380 = icmp ne i32 %and379, 0
  br i1 %cmp380, label %if.else.383, label %if.then.382

if.then.382:                                      ; preds = %if.then.378
  call void (i8*, ...) @warning(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.50, i32 0, i32 0))
  store i32 1, i32* @ix86_fpmath, align 4
  br label %if.end.384

if.else.383:                                      ; preds = %if.then.378
  store i32 2, i32* @ix86_fpmath, align 4
  br label %if.end.384

if.end.384:                                       ; preds = %if.else.383, %if.then.382
  br label %if.end.405

if.else.385:                                      ; preds = %if.else.375
  %161 = load i8*, i8** @ix86_fpmath_string, align 8
  %call386 = call i32 @strcmp(i8* %161, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.51, i32 0, i32 0)) #8
  %tobool387 = icmp ne i32 %call386, 0
  br i1 %tobool387, label %lor.lhs.false.388, label %if.then.391

lor.lhs.false.388:                                ; preds = %if.else.385
  %162 = load i8*, i8** @ix86_fpmath_string, align 8
  %call389 = call i32 @strcmp(i8* %162, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.52, i32 0, i32 0)) #8
  %tobool390 = icmp ne i32 %call389, 0
  br i1 %tobool390, label %if.else.403, label %if.then.391

if.then.391:                                      ; preds = %lor.lhs.false.388, %if.else.385
  %163 = load i32, i32* @target_flags, align 4
  %and392 = and i32 %163, 327680
  %cmp393 = icmp ne i32 %and392, 0
  br i1 %cmp393, label %if.else.396, label %if.then.395

if.then.395:                                      ; preds = %if.then.391
  call void (i8*, ...) @warning(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.50, i32 0, i32 0))
  store i32 1, i32* @ix86_fpmath, align 4
  br label %if.end.402

if.else.396:                                      ; preds = %if.then.391
  %164 = load i32, i32* @target_flags, align 4
  %and397 = and i32 %164, 1
  %tobool398 = icmp ne i32 %and397, 0
  br i1 %tobool398, label %if.else.400, label %if.then.399

if.then.399:                                      ; preds = %if.else.396
  call void (i8*, ...) @warning(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.53, i32 0, i32 0))
  store i32 2, i32* @ix86_fpmath, align 4
  br label %if.end.401

if.else.400:                                      ; preds = %if.else.396
  store i32 3, i32* @ix86_fpmath, align 4
  br label %if.end.401

if.end.401:                                       ; preds = %if.else.400, %if.then.399
  br label %if.end.402

if.end.402:                                       ; preds = %if.end.401, %if.then.395
  br label %if.end.404

if.else.403:                                      ; preds = %lor.lhs.false.388
  %165 = load i8*, i8** @ix86_fpmath_string, align 8
  call void (i8*, ...) @error(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.54, i32 0, i32 0), i8* %165)
  br label %if.end.404

if.end.404:                                       ; preds = %if.else.403, %if.end.402
  br label %if.end.405

if.end.405:                                       ; preds = %if.end.404, %if.end.384
  br label %if.end.406

if.end.406:                                       ; preds = %if.end.405, %if.then.374
  br label %if.end.407

if.end.407:                                       ; preds = %if.end.406, %if.end.368
  %166 = load i32, i32* @target_flags, align 4
  %and408 = and i32 %166, 327680
  %cmp409 = icmp ne i32 %and408, 0
  br i1 %cmp409, label %if.then.411, label %if.end.413

if.then.411:                                      ; preds = %if.end.407
  %167 = load i32, i32* @target_flags, align 4
  %or412 = or i32 %167, 16384
  store i32 %or412, i32* @target_flags, align 4
  store i32 1, i32* @x86_prefetch_sse, align 4
  br label %if.end.413

if.end.413:                                       ; preds = %if.then.411, %if.end.407
  %168 = load i32, i32* @target_flags, align 4
  %and414 = and i32 %168, 1048576
  %cmp415 = icmp ne i32 %and414, 0
  br i1 %cmp415, label %if.then.417, label %if.end.425

if.then.417:                                      ; preds = %if.end.413
  %169 = load i32, i32* @target_flags, align 4
  %or418 = or i32 %169, 16384
  store i32 %or418, i32* @target_flags, align 4
  %170 = load i32, i32* @ix86_arch, align 4
  %shl419 = shl i32 1, %170
  %and420 = and i32 32, %shl419
  %tobool421 = icmp ne i32 %and420, 0
  br i1 %tobool421, label %if.then.422, label %if.end.424

if.then.422:                                      ; preds = %if.then.417
  %171 = load i32, i32* @target_flags, align 4
  %or423 = or i32 %171, 4194304
  store i32 %or423, i32* @target_flags, align 4
  br label %if.end.424

if.end.424:                                       ; preds = %if.then.422, %if.then.417
  br label %if.end.425

if.end.425:                                       ; preds = %if.end.424, %if.end.413
  %172 = load i32, i32* @ix86_cpu, align 4
  %shl426 = shl i32 1, %172
  %and427 = and i32 104, %shl426
  %tobool428 = icmp ne i32 %and427, 0
  br i1 %tobool428, label %land.lhs.true.429, label %if.end.436

land.lhs.true.429:                                ; preds = %if.end.425
  %173 = load i32, i32* @target_flags, align 4
  %and430 = and i32 %173, 8192
  %tobool431 = icmp ne i32 %and430, 0
  br i1 %tobool431, label %if.end.436, label %land.lhs.true.432

land.lhs.true.432:                                ; preds = %land.lhs.true.429
  %174 = load i32, i32* @optimize_size, align 4
  %tobool433 = icmp ne i32 %174, 0
  br i1 %tobool433, label %if.end.436, label %if.then.434

if.then.434:                                      ; preds = %land.lhs.true.432
  %175 = load i32, i32* @target_flags, align 4
  %or435 = or i32 %175, 4096
  store i32 %or435, i32* @target_flags, align 4
  br label %if.end.436

if.end.436:                                       ; preds = %if.then.434, %land.lhs.true.432, %land.lhs.true.429, %if.end.425
  br label %do.body

do.body:                                          ; preds = %if.end.436
  %call437 = call i32 (i8*, i8*, ...) @sprintf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @internal_label_prefix, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.55, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i32 0, i32 0), i32 0) #4
  br label %do.end

do.end:                                           ; preds = %do.body
  %call438 = call i8* @strchr(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @internal_label_prefix, i32 0, i32 0), i32 88) #8
  store i8* %call438, i8** %p, align 8
  %176 = load i8*, i8** %p, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %176 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, ptrtoint ([16 x i8]* @internal_label_prefix to i64)
  %conv439 = trunc i64 %sub.ptr.sub to i32
  store i32 %conv439, i32* @internal_label_prefix_len, align 4
  %177 = load i8*, i8** %p, align 8
  store i8 0, i8* %177, align 1
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8*, i8*) #2

declare void @sorry(i8*, ...) #0

declare void @error(i8*, ...) #0

; Function Attrs: nounwind uwtable
define internal void @ix86_init_machine_status(%struct.function* %p) #1 {
entry:
  %p.addr = alloca %struct.function*, align 8
  store %struct.function* %p, %struct.function** %p.addr, align 8
  %call = call noalias i8* @xcalloc(i64 1, i64 1424)
  %0 = bitcast i8* %call to %struct.machine_function*
  %1 = load %struct.function*, %struct.function** %p.addr, align 8
  %machine = getelementptr inbounds %struct.function, %struct.function* %1, i32 0, i32 51
  store %struct.machine_function* %0, %struct.machine_function** %machine, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @ix86_mark_machine_status(%struct.function* %p) #1 {
entry:
  %p.addr = alloca %struct.function*, align 8
  %machine = alloca %struct.machine_function*, align 8
  %mode = alloca i32, align 4
  %n = alloca i32, align 4
  %r__ = alloca %struct.rtx_def*, align 8
  store %struct.function* %p, %struct.function** %p.addr, align 8
  %0 = load %struct.function*, %struct.function** %p.addr, align 8
  %machine1 = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 51
  %1 = load %struct.machine_function*, %struct.machine_function** %machine1, align 8
  store %struct.machine_function* %1, %struct.machine_function** %machine, align 8
  %2 = load %struct.machine_function*, %struct.machine_function** %machine, align 8
  %tobool = icmp ne %struct.machine_function* %2, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %for.end.12

if.end:                                           ; preds = %entry
  store i32 0, i32* %mode, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.11, %if.end
  %3 = load i32, i32* %mode, align 4
  %cmp = icmp slt i32 %3, 59
  br i1 %cmp, label %for.body, label %for.end.12

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %n, align 4
  br label %for.cond.2

for.cond.2:                                       ; preds = %for.inc, %for.body
  %4 = load i32, i32* %n, align 4
  %cmp3 = icmp slt i32 %4, 3
  br i1 %cmp3, label %for.body.4, label %for.end

for.body.4:                                       ; preds = %for.cond.2
  br label %do.body

do.body:                                          ; preds = %for.body.4
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %6 = load i32, i32* %mode, align 4
  %idxprom5 = sext i32 %6 to i64
  %7 = load %struct.machine_function*, %struct.machine_function** %machine, align 8
  %stack_locals = getelementptr inbounds %struct.machine_function, %struct.machine_function* %7, i32 0, i32 0
  %arrayidx = getelementptr inbounds [59 x [3 x %struct.rtx_def*]], [59 x [3 x %struct.rtx_def*]]* %stack_locals, i32 0, i64 %idxprom5
  %arrayidx6 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx, i32 0, i64 %idxprom
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %r__, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %r__, align 8
  %cmp7 = icmp ne %struct.rtx_def* %9, null
  br i1 %cmp7, label %land.lhs.true, label %if.end.10

land.lhs.true:                                    ; preds = %do.body
  %10 = load %struct.rtx_def*, %struct.rtx_def** %r__, align 8
  %11 = bitcast %struct.rtx_def* %10 to i8*
  %call = call i32 @ggc_set_mark(i8* %11)
  %tobool8 = icmp ne i32 %call, 0
  br i1 %tobool8, label %if.end.10, label %if.then.9

if.then.9:                                        ; preds = %land.lhs.true
  %12 = load %struct.rtx_def*, %struct.rtx_def** %r__, align 8
  call void @ggc_mark_rtx_children(%struct.rtx_def* %12)
  br label %if.end.10

if.end.10:                                        ; preds = %if.then.9, %land.lhs.true, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end.10
  br label %for.inc

for.inc:                                          ; preds = %do.end
  %13 = load i32, i32* %n, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond.2

for.end:                                          ; preds = %for.cond.2
  br label %for.inc.11

for.inc.11:                                       ; preds = %for.end
  %14 = load i32, i32* %mode, align 4
  %add = add nsw i32 %14, 1
  store i32 %add, i32* %mode, align 4
  br label %for.cond

for.end.12:                                       ; preds = %if.then, %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @ix86_free_machine_status(%struct.function* %p) #1 {
entry:
  %p.addr = alloca %struct.function*, align 8
  store %struct.function* %p, %struct.function** %p.addr, align 8
  %0 = load %struct.function*, %struct.function** %p.addr, align 8
  %machine = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 51
  %1 = load %struct.machine_function*, %struct.machine_function** %machine, align 8
  %2 = bitcast %struct.machine_function* %1 to i8*
  call void @free(i8* %2) #4
  %3 = load %struct.function*, %struct.function** %p.addr, align 8
  %machine1 = getelementptr inbounds %struct.function, %struct.function* %3, i32 0, i32 51
  store %struct.machine_function* null, %struct.machine_function** %machine1, align 8
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @atoi(i8*) #2

declare void @warning(i8*, ...) #0

; Function Attrs: nounwind
declare i32 @sprintf(i8*, i8*, ...) #3

; Function Attrs: nounwind readonly
declare i8* @strchr(i8*, i32) #2

; Function Attrs: nounwind uwtable
define void @optimization_options(i32 %level, i32 %size) #1 {
entry:
  %level.addr = alloca i32, align 4
  %size.addr = alloca i32, align 4
  store i32 %level, i32* %level.addr, align 4
  store i32 %size, i32* %size.addr, align 4
  %0 = load i32, i32* %level.addr, align 4
  %cmp = icmp sgt i32 %0, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* @flag_schedule_insns, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load i32, i32* @target_flags, align 4
  %and = and i32 %1, 33554432
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.lhs.true, label %if.end.3

land.lhs.true:                                    ; preds = %if.end
  %2 = load i32, i32* @optimize, align 4
  %cmp1 = icmp sge i32 %2, 1
  br i1 %cmp1, label %if.then.2, label %if.end.3

if.then.2:                                        ; preds = %land.lhs.true
  store i32 1, i32* @flag_omit_frame_pointer, align 4
  br label %if.end.3

if.end.3:                                         ; preds = %if.then.2, %land.lhs.true, %if.end
  %3 = load i32, i32* @target_flags, align 4
  %and4 = and i32 %3, 33554432
  %tobool5 = icmp ne i32 %and4, 0
  br i1 %tobool5, label %if.then.6, label %if.end.7

if.then.6:                                        ; preds = %if.end.3
  store i32 0, i32* @flag_pcc_struct_return, align 4
  store i32 1, i32* @flag_asynchronous_unwind_tables, align 4
  br label %if.end.7

if.end.7:                                         ; preds = %if.then.6, %if.end.3
  ret void
}

; Function Attrs: nounwind uwtable
define internal %union.tree_node* @ix86_handle_cdecl_attribute(%union.tree_node** %node, %union.tree_node* %name, %union.tree_node* %args, i32 %flags, i8* %no_add_attrs) #1 {
entry:
  %node.addr = alloca %union.tree_node**, align 8
  %name.addr = alloca %union.tree_node*, align 8
  %args.addr = alloca %union.tree_node*, align 8
  %flags.addr = alloca i32, align 4
  %no_add_attrs.addr = alloca i8*, align 8
  store %union.tree_node** %node, %union.tree_node*** %node.addr, align 8
  store %union.tree_node* %name, %union.tree_node** %name.addr, align 8
  store %union.tree_node* %args, %union.tree_node** %args.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  store i8* %no_add_attrs, i8** %no_add_attrs.addr, align 8
  %0 = load %union.tree_node**, %union.tree_node*** %node.addr, align 8
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8
  %common = bitcast %union.tree_node* %1 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp ne i32 %bf.clear, 23
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load %union.tree_node**, %union.tree_node*** %node.addr, align 8
  %3 = load %union.tree_node*, %union.tree_node** %2, align 8
  %common1 = bitcast %union.tree_node* %3 to %struct.tree_common*
  %code2 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1, i32 0, i32 2
  %bf.load3 = load i32, i32* %code2, align 8
  %bf.clear4 = and i32 %bf.load3, 255
  %cmp5 = icmp ne i32 %bf.clear4, 16
  br i1 %cmp5, label %land.lhs.true.6, label %if.end

land.lhs.true.6:                                  ; preds = %land.lhs.true
  %4 = load %union.tree_node**, %union.tree_node*** %node.addr, align 8
  %5 = load %union.tree_node*, %union.tree_node** %4, align 8
  %common7 = bitcast %union.tree_node* %5 to %struct.tree_common*
  %code8 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common7, i32 0, i32 2
  %bf.load9 = load i32, i32* %code8, align 8
  %bf.clear10 = and i32 %bf.load9, 255
  %cmp11 = icmp ne i32 %bf.clear10, 37
  br i1 %cmp11, label %land.lhs.true.12, label %if.end

land.lhs.true.12:                                 ; preds = %land.lhs.true.6
  %6 = load %union.tree_node**, %union.tree_node*** %node.addr, align 8
  %7 = load %union.tree_node*, %union.tree_node** %6, align 8
  %common13 = bitcast %union.tree_node* %7 to %struct.tree_common*
  %code14 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common13, i32 0, i32 2
  %bf.load15 = load i32, i32* %code14, align 8
  %bf.clear16 = and i32 %bf.load15, 255
  %cmp17 = icmp ne i32 %bf.clear16, 33
  br i1 %cmp17, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true.12
  %8 = load %union.tree_node*, %union.tree_node** %name.addr, align 8
  %identifier = bitcast %union.tree_node* %8 to %struct.tree_identifier*
  %id = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1
  %str = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 1
  %9 = load i8*, i8** %str, align 8
  call void (i8*, ...) @warning(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.214, i32 0, i32 0), i8* %9)
  %10 = load i8*, i8** %no_add_attrs.addr, align 8
  store i8 1, i8* %10, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true.12, %land.lhs.true.6, %land.lhs.true, %entry
  %11 = load i32, i32* @target_flags, align 4
  %and = and i32 %11, 33554432
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then.18, label %if.end.22

if.then.18:                                       ; preds = %if.end
  %12 = load %union.tree_node*, %union.tree_node** %name.addr, align 8
  %identifier19 = bitcast %union.tree_node* %12 to %struct.tree_identifier*
  %id20 = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier19, i32 0, i32 1
  %str21 = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id20, i32 0, i32 1
  %13 = load i8*, i8** %str21, align 8
  call void (i8*, ...) @warning(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.215, i32 0, i32 0), i8* %13)
  %14 = load i8*, i8** %no_add_attrs.addr, align 8
  store i8 1, i8* %14, align 1
  br label %if.end.22

if.end.22:                                        ; preds = %if.then.18, %if.end
  ret %union.tree_node* null
}

; Function Attrs: nounwind uwtable
define internal %union.tree_node* @ix86_handle_regparm_attribute(%union.tree_node** %node, %union.tree_node* %name, %union.tree_node* %args, i32 %flags, i8* %no_add_attrs) #1 {
entry:
  %node.addr = alloca %union.tree_node**, align 8
  %name.addr = alloca %union.tree_node*, align 8
  %args.addr = alloca %union.tree_node*, align 8
  %flags.addr = alloca i32, align 4
  %no_add_attrs.addr = alloca i8*, align 8
  %cst = alloca %union.tree_node*, align 8
  store %union.tree_node** %node, %union.tree_node*** %node.addr, align 8
  store %union.tree_node* %name, %union.tree_node** %name.addr, align 8
  store %union.tree_node* %args, %union.tree_node** %args.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  store i8* %no_add_attrs, i8** %no_add_attrs.addr, align 8
  %0 = load %union.tree_node**, %union.tree_node*** %node.addr, align 8
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8
  %common = bitcast %union.tree_node* %1 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp ne i32 %bf.clear, 23
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %2 = load %union.tree_node**, %union.tree_node*** %node.addr, align 8
  %3 = load %union.tree_node*, %union.tree_node** %2, align 8
  %common1 = bitcast %union.tree_node* %3 to %struct.tree_common*
  %code2 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1, i32 0, i32 2
  %bf.load3 = load i32, i32* %code2, align 8
  %bf.clear4 = and i32 %bf.load3, 255
  %cmp5 = icmp ne i32 %bf.clear4, 16
  br i1 %cmp5, label %land.lhs.true.6, label %if.else

land.lhs.true.6:                                  ; preds = %land.lhs.true
  %4 = load %union.tree_node**, %union.tree_node*** %node.addr, align 8
  %5 = load %union.tree_node*, %union.tree_node** %4, align 8
  %common7 = bitcast %union.tree_node* %5 to %struct.tree_common*
  %code8 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common7, i32 0, i32 2
  %bf.load9 = load i32, i32* %code8, align 8
  %bf.clear10 = and i32 %bf.load9, 255
  %cmp11 = icmp ne i32 %bf.clear10, 37
  br i1 %cmp11, label %land.lhs.true.12, label %if.else

land.lhs.true.12:                                 ; preds = %land.lhs.true.6
  %6 = load %union.tree_node**, %union.tree_node*** %node.addr, align 8
  %7 = load %union.tree_node*, %union.tree_node** %6, align 8
  %common13 = bitcast %union.tree_node* %7 to %struct.tree_common*
  %code14 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common13, i32 0, i32 2
  %bf.load15 = load i32, i32* %code14, align 8
  %bf.clear16 = and i32 %bf.load15, 255
  %cmp17 = icmp ne i32 %bf.clear16, 33
  br i1 %cmp17, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true.12
  %8 = load %union.tree_node*, %union.tree_node** %name.addr, align 8
  %identifier = bitcast %union.tree_node* %8 to %struct.tree_identifier*
  %id = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1
  %str = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 1
  %9 = load i8*, i8** %str, align 8
  call void (i8*, ...) @warning(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.214, i32 0, i32 0), i8* %9)
  %10 = load i8*, i8** %no_add_attrs.addr, align 8
  store i8 1, i8* %10, align 1
  br label %if.end.38

if.else:                                          ; preds = %land.lhs.true.12, %land.lhs.true.6, %land.lhs.true, %entry
  %11 = load %union.tree_node*, %union.tree_node** %args.addr, align 8
  %list = bitcast %union.tree_node* %11 to %struct.tree_list*
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2
  %12 = load %union.tree_node*, %union.tree_node** %value, align 8
  store %union.tree_node* %12, %union.tree_node** %cst, align 8
  %13 = load %union.tree_node*, %union.tree_node** %cst, align 8
  %common18 = bitcast %union.tree_node* %13 to %struct.tree_common*
  %code19 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common18, i32 0, i32 2
  %bf.load20 = load i32, i32* %code19, align 8
  %bf.clear21 = and i32 %bf.load20, 255
  %cmp22 = icmp ne i32 %bf.clear21, 25
  br i1 %cmp22, label %if.then.23, label %if.else.27

if.then.23:                                       ; preds = %if.else
  %14 = load %union.tree_node*, %union.tree_node** %name.addr, align 8
  %identifier24 = bitcast %union.tree_node* %14 to %struct.tree_identifier*
  %id25 = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier24, i32 0, i32 1
  %str26 = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id25, i32 0, i32 1
  %15 = load i8*, i8** %str26, align 8
  call void (i8*, ...) @warning(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.216, i32 0, i32 0), i8* %15)
  %16 = load i8*, i8** %no_add_attrs.addr, align 8
  store i8 1, i8* %16, align 1
  br label %if.end.37

if.else.27:                                       ; preds = %if.else
  %17 = load %union.tree_node*, %union.tree_node** %cst, align 8
  %18 = load i32, i32* @target_flags, align 4
  %and = and i32 %18, 33554432
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, i32 6, i32 3
  %conv = sext i32 %cond to i64
  %call = call i32 @compare_tree_int(%union.tree_node* %17, i64 %conv)
  %cmp28 = icmp sgt i32 %call, 0
  br i1 %cmp28, label %if.then.30, label %if.end

if.then.30:                                       ; preds = %if.else.27
  %19 = load %union.tree_node*, %union.tree_node** %name.addr, align 8
  %identifier31 = bitcast %union.tree_node* %19 to %struct.tree_identifier*
  %id32 = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier31, i32 0, i32 1
  %str33 = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id32, i32 0, i32 1
  %20 = load i8*, i8** %str33, align 8
  %21 = load i32, i32* @target_flags, align 4
  %and34 = and i32 %21, 33554432
  %tobool35 = icmp ne i32 %and34, 0
  %cond36 = select i1 %tobool35, i32 6, i32 3
  call void (i8*, ...) @warning(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.217, i32 0, i32 0), i8* %20, i32 %cond36)
  %22 = load i8*, i8** %no_add_attrs.addr, align 8
  store i8 1, i8* %22, align 1
  br label %if.end

if.end:                                           ; preds = %if.then.30, %if.else.27
  br label %if.end.37

if.end.37:                                        ; preds = %if.end, %if.then.23
  br label %if.end.38

if.end.38:                                        ; preds = %if.end.37, %if.then
  ret %union.tree_node* null
}

; Function Attrs: nounwind uwtable
define i32 @ix86_return_pops_args(%union.tree_node* %fundecl, %union.tree_node* %funtype, i32 %size) #1 {
entry:
  %retval = alloca i32, align 4
  %fundecl.addr = alloca %union.tree_node*, align 8
  %funtype.addr = alloca %union.tree_node*, align 8
  %size.addr = alloca i32, align 4
  %rtd = alloca i32, align 4
  %nregs = alloca i32, align 4
  %attr = alloca %union.tree_node*, align 8
  store %union.tree_node* %fundecl, %union.tree_node** %fundecl.addr, align 8
  store %union.tree_node* %funtype, %union.tree_node** %funtype.addr, align 8
  store i32 %size, i32* %size.addr, align 4
  %0 = load i32, i32* @target_flags, align 4
  %and = and i32 %0, 2
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %fundecl.addr, align 8
  %tobool1 = icmp ne %union.tree_node* %1, null
  br i1 %tobool1, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %land.rhs
  %2 = load %union.tree_node*, %union.tree_node** %fundecl.addr, align 8
  %common = bitcast %union.tree_node* %2 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp ne i32 %bf.clear, 1
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %3 = phi i1 [ true, %land.rhs ], [ %cmp, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %entry
  %4 = phi i1 [ false, %entry ], [ %3, %lor.end ]
  %land.ext = zext i1 %4 to i32
  store i32 %land.ext, i32* %rtd, align 4
  %5 = load %union.tree_node*, %union.tree_node** %funtype.addr, align 8
  %type = bitcast %union.tree_node* %5 to %struct.tree_type*
  %attributes = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type, i32 0, i32 4
  %6 = load %union.tree_node*, %union.tree_node** %attributes, align 8
  %call = call %union.tree_node* @lookup_attribute(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.58, i32 0, i32 0), %union.tree_node* %6)
  %tobool2 = icmp ne %union.tree_node* %call, null
  br i1 %tobool2, label %if.end.17, label %if.then

if.then:                                          ; preds = %land.end
  %7 = load %union.tree_node*, %union.tree_node** %funtype.addr, align 8
  %type3 = bitcast %union.tree_node* %7 to %struct.tree_type*
  %attributes4 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type3, i32 0, i32 4
  %8 = load %union.tree_node*, %union.tree_node** %attributes4, align 8
  %call5 = call %union.tree_node* @lookup_attribute(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.57, i32 0, i32 0), %union.tree_node* %8)
  %tobool6 = icmp ne %union.tree_node* %call5, null
  br i1 %tobool6, label %if.then.7, label %if.end

if.then.7:                                        ; preds = %if.then
  store i32 1, i32* %rtd, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.7, %if.then
  %9 = load i32, i32* %rtd, align 4
  %tobool8 = icmp ne i32 %9, 0
  br i1 %tobool8, label %land.lhs.true, label %if.end.16

land.lhs.true:                                    ; preds = %if.end
  %10 = load %union.tree_node*, %union.tree_node** %funtype.addr, align 8
  %type9 = bitcast %union.tree_node* %10 to %struct.tree_type*
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type9, i32 0, i32 1
  %11 = load %union.tree_node*, %union.tree_node** %values, align 8
  %cmp10 = icmp eq %union.tree_node* %11, null
  br i1 %cmp10, label %if.then.15, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %12 = load %union.tree_node*, %union.tree_node** %funtype.addr, align 8
  %type11 = bitcast %union.tree_node* %12 to %struct.tree_type*
  %values12 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type11, i32 0, i32 1
  %13 = load %union.tree_node*, %union.tree_node** %values12, align 8
  %call13 = call %union.tree_node* @tree_last(%union.tree_node* %13)
  %list = bitcast %union.tree_node* %call13 to %struct.tree_list*
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2
  %14 = load %union.tree_node*, %union.tree_node** %value, align 8
  %15 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 27), align 8
  %cmp14 = icmp eq %union.tree_node* %14, %15
  br i1 %cmp14, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %lor.lhs.false, %land.lhs.true
  %16 = load i32, i32* %size.addr, align 4
  store i32 %16, i32* %retval
  br label %return

if.end.16:                                        ; preds = %lor.lhs.false, %if.end
  br label %if.end.17

if.end.17:                                        ; preds = %if.end.16, %land.end
  %17 = load %union.tree_node*, %union.tree_node** %funtype.addr, align 8
  %common18 = bitcast %union.tree_node* %17 to %struct.tree_common*
  %type19 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common18, i32 0, i32 1
  %18 = load %union.tree_node*, %union.tree_node** %type19, align 8
  %call20 = call i32 @aggregate_value_p(%union.tree_node* %18)
  %tobool21 = icmp ne i32 %call20, 0
  br i1 %tobool21, label %land.lhs.true.22, label %if.end.46

land.lhs.true.22:                                 ; preds = %if.end.17
  %19 = load i32, i32* @target_flags, align 4
  %and23 = and i32 %19, 33554432
  %tobool24 = icmp ne i32 %and23, 0
  br i1 %tobool24, label %if.end.46, label %if.then.25

if.then.25:                                       ; preds = %land.lhs.true.22
  %20 = load i32, i32* @ix86_regparm, align 4
  store i32 %20, i32* %nregs, align 4
  %21 = load %union.tree_node*, %union.tree_node** %funtype.addr, align 8
  %tobool26 = icmp ne %union.tree_node* %21, null
  br i1 %tobool26, label %if.then.27, label %if.end.39

if.then.27:                                       ; preds = %if.then.25
  %22 = load %union.tree_node*, %union.tree_node** %funtype.addr, align 8
  %type28 = bitcast %union.tree_node* %22 to %struct.tree_type*
  %attributes29 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type28, i32 0, i32 4
  %23 = load %union.tree_node*, %union.tree_node** %attributes29, align 8
  %call30 = call %union.tree_node* @lookup_attribute(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.59, i32 0, i32 0), %union.tree_node* %23)
  store %union.tree_node* %call30, %union.tree_node** %attr, align 8
  %24 = load %union.tree_node*, %union.tree_node** %attr, align 8
  %tobool31 = icmp ne %union.tree_node* %24, null
  br i1 %tobool31, label %if.then.32, label %if.end.38

if.then.32:                                       ; preds = %if.then.27
  %25 = load %union.tree_node*, %union.tree_node** %attr, align 8
  %list33 = bitcast %union.tree_node* %25 to %struct.tree_list*
  %value34 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list33, i32 0, i32 2
  %26 = load %union.tree_node*, %union.tree_node** %value34, align 8
  %list35 = bitcast %union.tree_node* %26 to %struct.tree_list*
  %value36 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list35, i32 0, i32 2
  %27 = load %union.tree_node*, %union.tree_node** %value36, align 8
  %int_cst = bitcast %union.tree_node* %27 to %struct.tree_int_cst*
  %int_cst37 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 2
  %low = getelementptr inbounds %struct.anon, %struct.anon* %int_cst37, i32 0, i32 0
  %28 = load i64, i64* %low, align 8
  %conv = trunc i64 %28 to i32
  store i32 %conv, i32* %nregs, align 4
  br label %if.end.38

if.end.38:                                        ; preds = %if.then.32, %if.then.27
  br label %if.end.39

if.end.39:                                        ; preds = %if.end.38, %if.then.25
  %29 = load i32, i32* %nregs, align 4
  %tobool40 = icmp ne i32 %29, 0
  br i1 %tobool40, label %if.end.45, label %if.then.41

if.then.41:                                       ; preds = %if.end.39
  %30 = load i32, i32* @target_flags, align 4
  %and42 = and i32 %30, 33554432
  %tobool43 = icmp ne i32 %and42, 0
  %cond = select i1 %tobool43, i32 5, i32 4
  %idxprom = sext i32 %cond to i64
  %arrayidx = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom
  %31 = load i8, i8* %arrayidx, align 1
  %conv44 = zext i8 %31 to i32
  store i32 %conv44, i32* %retval
  br label %return

if.end.45:                                        ; preds = %if.end.39
  br label %if.end.46

if.end.46:                                        ; preds = %if.end.45, %land.lhs.true.22, %if.end.17
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.46, %if.then.41, %if.then.15
  %32 = load i32, i32* %retval
  ret i32 %32
}

declare %union.tree_node* @lookup_attribute(i8*, %union.tree_node*) #0

declare %union.tree_node* @tree_last(%union.tree_node*) #0

declare i32 @aggregate_value_p(%union.tree_node*) #0

; Function Attrs: nounwind uwtable
define zeroext i1 @ix86_function_arg_regno_p(i32 %regno) #1 {
entry:
  %retval = alloca i1, align 1
  %regno.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %regno, i32* %regno.addr, align 4
  %0 = load i32, i32* @target_flags, align 4
  %and = and i32 %0, 33554432
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %regno.addr, align 4
  %2 = load i32, i32* @target_flags, align 4
  %and1 = and i32 %2, 33554432
  %tobool2 = icmp ne i32 %and1, 0
  %cond = select i1 %tobool2, i32 6, i32 3
  %cmp = icmp slt i32 %1, %cond
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.then
  %3 = load i32, i32* @target_flags, align 4
  %and3 = and i32 %3, 327680
  %cmp4 = icmp ne i32 %and3, 0
  br i1 %cmp4, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %lor.rhs
  %4 = load i32, i32* %regno.addr, align 4
  %cmp5 = icmp sge i32 %4, 21
  br i1 %cmp5, label %land.lhs.true.6, label %lor.lhs.false

land.lhs.true.6:                                  ; preds = %land.lhs.true
  %5 = load i32, i32* %regno.addr, align 4
  %cmp7 = icmp sle i32 %5, 28
  br i1 %cmp7, label %land.rhs, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.6, %land.lhs.true
  %6 = load i32, i32* %regno.addr, align 4
  %cmp8 = icmp sge i32 %6, 45
  br i1 %cmp8, label %land.lhs.true.9, label %land.end

land.lhs.true.9:                                  ; preds = %lor.lhs.false
  %7 = load i32, i32* %regno.addr, align 4
  %cmp10 = icmp sle i32 %7, 52
  br i1 %cmp10, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true.9, %land.lhs.true.6
  %8 = load i32, i32* %regno.addr, align 4
  %idxprom = sext i32 %8 to i64
  %arrayidx = getelementptr inbounds [53 x i8], [53 x i8]* @fixed_regs, i32 0, i64 %idxprom
  %9 = load i8, i8* %arrayidx, align 1
  %tobool11 = icmp ne i8 %9, 0
  %lnot = xor i1 %tobool11, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true.9, %lor.lhs.false, %lor.rhs
  %10 = phi i1 [ false, %land.lhs.true.9 ], [ false, %lor.lhs.false ], [ false, %lor.rhs ], [ %lnot, %land.rhs ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %if.then
  %11 = phi i1 [ true, %if.then ], [ %10, %land.end ]
  store i1 %11, i1* %retval
  br label %return

if.end:                                           ; preds = %entry
  %12 = load i32, i32* %regno.addr, align 4
  %cmp12 = icmp sge i32 %12, 21
  br i1 %cmp12, label %land.lhs.true.13, label %lor.lhs.false.15

land.lhs.true.13:                                 ; preds = %if.end
  %13 = load i32, i32* %regno.addr, align 4
  %cmp14 = icmp sle i32 %13, 28
  br i1 %cmp14, label %land.lhs.true.19, label %lor.lhs.false.15

lor.lhs.false.15:                                 ; preds = %land.lhs.true.13, %if.end
  %14 = load i32, i32* %regno.addr, align 4
  %cmp16 = icmp sge i32 %14, 45
  br i1 %cmp16, label %land.lhs.true.17, label %if.end.23

land.lhs.true.17:                                 ; preds = %lor.lhs.false.15
  %15 = load i32, i32* %regno.addr, align 4
  %cmp18 = icmp sle i32 %15, 52
  br i1 %cmp18, label %land.lhs.true.19, label %if.end.23

land.lhs.true.19:                                 ; preds = %land.lhs.true.17, %land.lhs.true.13
  %16 = load i32, i32* @target_flags, align 4
  %and20 = and i32 %16, 327680
  %cmp21 = icmp ne i32 %and20, 0
  br i1 %cmp21, label %if.then.22, label %if.end.23

if.then.22:                                       ; preds = %land.lhs.true.19
  store i1 true, i1* %retval
  br label %return

if.end.23:                                        ; preds = %land.lhs.true.19, %land.lhs.true.17, %lor.lhs.false.15
  %17 = load i32, i32* %regno.addr, align 4
  %tobool24 = icmp ne i32 %17, 0
  br i1 %tobool24, label %if.end.26, label %if.then.25

if.then.25:                                       ; preds = %if.end.23
  store i1 true, i1* %retval
  br label %return

if.end.26:                                        ; preds = %if.end.23
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.26
  %18 = load i32, i32* %i, align 4
  %19 = load i32, i32* @target_flags, align 4
  %and27 = and i32 %19, 33554432
  %tobool28 = icmp ne i32 %and27, 0
  %cond29 = select i1 %tobool28, i32 6, i32 3
  %cmp30 = icmp slt i32 %18, %cond29
  br i1 %cmp30, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %20 = load i32, i32* %regno.addr, align 4
  %21 = load i32, i32* %i, align 4
  %idxprom31 = sext i32 %21 to i64
  %arrayidx32 = getelementptr inbounds [6 x i32], [6 x i32]* @x86_64_int_parameter_registers, i32 0, i64 %idxprom31
  %22 = load i32, i32* %arrayidx32, align 4
  %cmp33 = icmp eq i32 %20, %22
  br i1 %cmp33, label %if.then.34, label %if.end.35

if.then.34:                                       ; preds = %for.body
  store i1 true, i1* %retval
  br label %return

if.end.35:                                        ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.35
  %23 = load i32, i32* %i, align 4
  %inc = add nsw i32 %23, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i1 false, i1* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then.34, %if.then.25, %if.then.22, %lor.end
  %24 = load i1, i1* %retval
  ret i1 %24
}

; Function Attrs: nounwind uwtable
define void @init_cumulative_args(%struct.ix86_args* %cum, %union.tree_node* %fntype, %struct.rtx_def* %libname) #1 {
entry:
  %cum.addr = alloca %struct.ix86_args*, align 8
  %fntype.addr = alloca %union.tree_node*, align 8
  %libname.addr = alloca %struct.rtx_def*, align 8
  %param = alloca %union.tree_node*, align 8
  %next_param = alloca %union.tree_node*, align 8
  %attr = alloca %union.tree_node*, align 8
  store %struct.ix86_args* %cum, %struct.ix86_args** %cum.addr, align 8
  store %union.tree_node* %fntype, %union.tree_node** %fntype.addr, align 8
  store %struct.rtx_def* %libname, %struct.rtx_def** %libname.addr, align 8
  %0 = load i8*, i8** @ix86_debug_arg_string, align 8
  %cmp = icmp ne i8* %0, null
  br i1 %cmp, label %if.then, label %if.end.16

if.then:                                          ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.60, i32 0, i32 0))
  %2 = load %union.tree_node*, %union.tree_node** %fntype.addr, align 8
  %tobool = icmp ne %union.tree_node* %2, null
  br i1 %tobool, label %if.then.1, label %if.else

if.then.1:                                        ; preds = %if.then
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %4 = load %union.tree_node*, %union.tree_node** %fntype.addr, align 8
  %common = bitcast %union.tree_node* %4 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %idxprom = sext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [256 x i8*], [256 x i8*]* @tree_code_name, i32 0, i64 %idxprom
  %5 = load i8*, i8** %arrayidx, align 8
  %6 = load %union.tree_node*, %union.tree_node** %fntype.addr, align 8
  %common2 = bitcast %union.tree_node* %6 to %struct.tree_common*
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 1
  %7 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common3 = bitcast %union.tree_node* %7 to %struct.tree_common*
  %code4 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common3, i32 0, i32 2
  %bf.load5 = load i32, i32* %code4, align 8
  %bf.clear6 = and i32 %bf.load5, 255
  %idxprom7 = sext i32 %bf.clear6 to i64
  %arrayidx8 = getelementptr inbounds [256 x i8*], [256 x i8*]* @tree_code_name, i32 0, i64 %idxprom7
  %8 = load i8*, i8** %arrayidx8, align 8
  %call9 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.61, i32 0, i32 0), i8* %5, i8* %8)
  br label %if.end

if.else:                                          ; preds = %if.then
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call10 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.62, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.1
  %10 = load %struct.rtx_def*, %struct.rtx_def** %libname.addr, align 8
  %tobool11 = icmp ne %struct.rtx_def* %10, null
  br i1 %tobool11, label %if.then.12, label %if.end.15

if.then.12:                                       ; preds = %if.end
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %12 = load %struct.rtx_def*, %struct.rtx_def** %libname.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1
  %arrayidx13 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtstr = bitcast %union.rtunion_def* %arrayidx13 to i8**
  %13 = load i8*, i8** %rtstr, align 8
  %call14 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.63, i32 0, i32 0), i8* %13)
  br label %if.end.15

if.end.15:                                        ; preds = %if.then.12, %if.end
  br label %if.end.16

if.end.16:                                        ; preds = %if.end.15, %entry
  %14 = load %struct.ix86_args*, %struct.ix86_args** %cum.addr, align 8
  %15 = bitcast %struct.ix86_args* %14 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %15, i8* bitcast (%struct.ix86_args* @init_cumulative_args.zero_cum to i8*), i64 28, i32 4, i1 false)
  %16 = load i32, i32* @ix86_regparm, align 4
  %17 = load %struct.ix86_args*, %struct.ix86_args** %cum.addr, align 8
  %nregs = getelementptr inbounds %struct.ix86_args, %struct.ix86_args* %17, i32 0, i32 1
  store i32 %16, i32* %nregs, align 4
  %18 = load i32, i32* @target_flags, align 4
  %and = and i32 %18, 33554432
  %tobool17 = icmp ne i32 %and, 0
  %cond = select i1 %tobool17, i32 8, i32 0
  %19 = load %struct.ix86_args*, %struct.ix86_args** %cum.addr, align 8
  %sse_nregs = getelementptr inbounds %struct.ix86_args, %struct.ix86_args* %19, i32 0, i32 4
  store i32 %cond, i32* %sse_nregs, align 4
  %20 = load %union.tree_node*, %union.tree_node** %fntype.addr, align 8
  %tobool18 = icmp ne %union.tree_node* %20, null
  br i1 %tobool18, label %land.lhs.true, label %if.end.31

land.lhs.true:                                    ; preds = %if.end.16
  %21 = load i32, i32* @target_flags, align 4
  %and19 = and i32 %21, 33554432
  %tobool20 = icmp ne i32 %and19, 0
  br i1 %tobool20, label %if.end.31, label %if.then.21

if.then.21:                                       ; preds = %land.lhs.true
  %22 = load %union.tree_node*, %union.tree_node** %fntype.addr, align 8
  %type22 = bitcast %union.tree_node* %22 to %struct.tree_type*
  %attributes = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type22, i32 0, i32 4
  %23 = load %union.tree_node*, %union.tree_node** %attributes, align 8
  %call23 = call %union.tree_node* @lookup_attribute(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.59, i32 0, i32 0), %union.tree_node* %23)
  store %union.tree_node* %call23, %union.tree_node** %attr, align 8
  %24 = load %union.tree_node*, %union.tree_node** %attr, align 8
  %tobool24 = icmp ne %union.tree_node* %24, null
  br i1 %tobool24, label %if.then.25, label %if.end.30

if.then.25:                                       ; preds = %if.then.21
  %25 = load %union.tree_node*, %union.tree_node** %attr, align 8
  %list = bitcast %union.tree_node* %25 to %struct.tree_list*
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2
  %26 = load %union.tree_node*, %union.tree_node** %value, align 8
  %list26 = bitcast %union.tree_node* %26 to %struct.tree_list*
  %value27 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list26, i32 0, i32 2
  %27 = load %union.tree_node*, %union.tree_node** %value27, align 8
  %int_cst = bitcast %union.tree_node* %27 to %struct.tree_int_cst*
  %int_cst28 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 2
  %low = getelementptr inbounds %struct.anon, %struct.anon* %int_cst28, i32 0, i32 0
  %28 = load i64, i64* %low, align 8
  %conv = trunc i64 %28 to i32
  %29 = load %struct.ix86_args*, %struct.ix86_args** %cum.addr, align 8
  %nregs29 = getelementptr inbounds %struct.ix86_args, %struct.ix86_args* %29, i32 0, i32 1
  store i32 %conv, i32* %nregs29, align 4
  br label %if.end.30

if.end.30:                                        ; preds = %if.then.25, %if.then.21
  br label %if.end.31

if.end.31:                                        ; preds = %if.end.30, %land.lhs.true, %if.end.16
  %30 = load %struct.ix86_args*, %struct.ix86_args** %cum.addr, align 8
  %maybe_vaarg = getelementptr inbounds %struct.ix86_args, %struct.ix86_args* %30, i32 0, i32 6
  store i32 0, i32* %maybe_vaarg, align 4
  %31 = load %struct.ix86_args*, %struct.ix86_args** %cum.addr, align 8
  %nregs32 = getelementptr inbounds %struct.ix86_args, %struct.ix86_args* %31, i32 0, i32 1
  %32 = load i32, i32* %nregs32, align 4
  %tobool33 = icmp ne i32 %32, 0
  br i1 %tobool33, label %if.then.34, label %if.end.56

if.then.34:                                       ; preds = %if.end.31
  %33 = load %union.tree_node*, %union.tree_node** %fntype.addr, align 8
  %tobool35 = icmp ne %union.tree_node* %33, null
  br i1 %tobool35, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.34
  %34 = load %union.tree_node*, %union.tree_node** %fntype.addr, align 8
  %type36 = bitcast %union.tree_node* %34 to %struct.tree_type*
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type36, i32 0, i32 1
  %35 = load %union.tree_node*, %union.tree_node** %values, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then.34
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond37 = phi %union.tree_node* [ %35, %cond.true ], [ null, %cond.false ]
  store %union.tree_node* %cond37, %union.tree_node** %param, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %cond.end
  %36 = load %union.tree_node*, %union.tree_node** %param, align 8
  %cmp38 = icmp ne %union.tree_node* %36, null
  br i1 %cmp38, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %37 = load %union.tree_node*, %union.tree_node** %param, align 8
  %common40 = bitcast %union.tree_node* %37 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common40, i32 0, i32 0
  %38 = load %union.tree_node*, %union.tree_node** %chain, align 8
  store %union.tree_node* %38, %union.tree_node** %next_param, align 8
  %39 = load %union.tree_node*, %union.tree_node** %next_param, align 8
  %cmp41 = icmp eq %union.tree_node* %39, null
  br i1 %cmp41, label %land.lhs.true.43, label %if.end.55

land.lhs.true.43:                                 ; preds = %for.body
  %40 = load %union.tree_node*, %union.tree_node** %param, align 8
  %list44 = bitcast %union.tree_node* %40 to %struct.tree_list*
  %value45 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list44, i32 0, i32 2
  %41 = load %union.tree_node*, %union.tree_node** %value45, align 8
  %42 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 27), align 8
  %cmp46 = icmp ne %union.tree_node* %41, %42
  br i1 %cmp46, label %if.then.48, label %if.end.55

if.then.48:                                       ; preds = %land.lhs.true.43
  %43 = load i32, i32* @target_flags, align 4
  %and49 = and i32 %43, 33554432
  %tobool50 = icmp ne i32 %and49, 0
  br i1 %tobool50, label %if.end.53, label %if.then.51

if.then.51:                                       ; preds = %if.then.48
  %44 = load %struct.ix86_args*, %struct.ix86_args** %cum.addr, align 8
  %nregs52 = getelementptr inbounds %struct.ix86_args, %struct.ix86_args* %44, i32 0, i32 1
  store i32 0, i32* %nregs52, align 4
  br label %if.end.53

if.end.53:                                        ; preds = %if.then.51, %if.then.48
  %45 = load %struct.ix86_args*, %struct.ix86_args** %cum.addr, align 8
  %maybe_vaarg54 = getelementptr inbounds %struct.ix86_args, %struct.ix86_args* %45, i32 0, i32 6
  store i32 1, i32* %maybe_vaarg54, align 4
  br label %if.end.55

if.end.55:                                        ; preds = %if.end.53, %land.lhs.true.43, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.55
  %46 = load %union.tree_node*, %union.tree_node** %next_param, align 8
  store %union.tree_node* %46, %union.tree_node** %param, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.56

if.end.56:                                        ; preds = %for.end, %if.end.31
  %47 = load %union.tree_node*, %union.tree_node** %fntype.addr, align 8
  %tobool57 = icmp ne %union.tree_node* %47, null
  br i1 %tobool57, label %lor.lhs.false, label %land.lhs.true.58

land.lhs.true.58:                                 ; preds = %if.end.56
  %48 = load %struct.rtx_def*, %struct.rtx_def** %libname.addr, align 8
  %tobool59 = icmp ne %struct.rtx_def* %48, null
  br i1 %tobool59, label %lor.lhs.false, label %if.then.65

lor.lhs.false:                                    ; preds = %land.lhs.true.58, %if.end.56
  %49 = load %union.tree_node*, %union.tree_node** %fntype.addr, align 8
  %tobool60 = icmp ne %union.tree_node* %49, null
  br i1 %tobool60, label %land.lhs.true.61, label %if.end.67

land.lhs.true.61:                                 ; preds = %lor.lhs.false
  %50 = load %union.tree_node*, %union.tree_node** %fntype.addr, align 8
  %type62 = bitcast %union.tree_node* %50 to %struct.tree_type*
  %values63 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type62, i32 0, i32 1
  %51 = load %union.tree_node*, %union.tree_node** %values63, align 8
  %tobool64 = icmp ne %union.tree_node* %51, null
  br i1 %tobool64, label %if.end.67, label %if.then.65

if.then.65:                                       ; preds = %land.lhs.true.61, %land.lhs.true.58
  %52 = load %struct.ix86_args*, %struct.ix86_args** %cum.addr, align 8
  %maybe_vaarg66 = getelementptr inbounds %struct.ix86_args, %struct.ix86_args* %52, i32 0, i32 6
  store i32 1, i32* %maybe_vaarg66, align 4
  br label %if.end.67

if.end.67:                                        ; preds = %if.then.65, %land.lhs.true.61, %lor.lhs.false
  %53 = load i8*, i8** @ix86_debug_arg_string, align 8
  %cmp68 = icmp ne i8* %53, null
  br i1 %cmp68, label %if.then.70, label %if.end.73

if.then.70:                                       ; preds = %if.end.67
  %54 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %55 = load %struct.ix86_args*, %struct.ix86_args** %cum.addr, align 8
  %nregs71 = getelementptr inbounds %struct.ix86_args, %struct.ix86_args* %55, i32 0, i32 1
  %56 = load i32, i32* %nregs71, align 4
  %call72 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %54, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.64, i32 0, i32 0), i32 %56)
  br label %if.end.73

if.end.73:                                        ; preds = %if.then.70, %if.end.67
  ret void
}

declare i32 @fprintf(%struct._IO_FILE*, i8*, ...) #0

; Function Attrs: nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #4

; Function Attrs: nounwind uwtable
define void @function_arg_advance(%struct.ix86_args* %cum, i32 %mode, %union.tree_node* %type, i32 %named) #1 {
entry:
  %cum.addr = alloca %struct.ix86_args*, align 8
  %mode.addr = alloca i32, align 4
  %type.addr = alloca %union.tree_node*, align 8
  %named.addr = alloca i32, align 4
  %bytes = alloca i32, align 4
  %words = alloca i32, align 4
  %int_nregs = alloca i32, align 4
  %sse_nregs = alloca i32, align 4
  store %struct.ix86_args* %cum, %struct.ix86_args** %cum.addr, align 8
  store i32 %mode, i32* %mode.addr, align 4
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  store i32 %named, i32* %named.addr, align 4
  %0 = load i32, i32* %mode.addr, align 4
  %cmp = icmp eq i32 %0, 51
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %call = call i64 @int_size_in_bytes(%union.tree_node* %1)
  br label %cond.end

cond.false:                                       ; preds = %entry
  %2 = load i32, i32* %mode.addr, align 4
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom
  %3 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %3 to i32
  %conv1 = sext i32 %conv to i64
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call, %cond.true ], [ %conv1, %cond.false ]
  %conv2 = trunc i64 %cond to i32
  store i32 %conv2, i32* %bytes, align 4
  %4 = load i32, i32* %bytes, align 4
  %5 = load i32, i32* @target_flags, align 4
  %and = and i32 %5, 33554432
  %tobool = icmp ne i32 %and, 0
  %cond3 = select i1 %tobool, i32 8, i32 4
  %add = add nsw i32 %4, %cond3
  %sub = sub nsw i32 %add, 1
  %6 = load i32, i32* @target_flags, align 4
  %and4 = and i32 %6, 33554432
  %tobool5 = icmp ne i32 %and4, 0
  %cond6 = select i1 %tobool5, i32 8, i32 4
  %div = sdiv i32 %sub, %cond6
  store i32 %div, i32* %words, align 4
  %7 = load i8*, i8** @ix86_debug_arg_string, align 8
  %cmp7 = icmp ne i8* %7, null
  br i1 %cmp7, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %9 = load i32, i32* %words, align 4
  %10 = load %struct.ix86_args*, %struct.ix86_args** %cum.addr, align 8
  %words9 = getelementptr inbounds %struct.ix86_args, %struct.ix86_args* %10, i32 0, i32 0
  %11 = load i32, i32* %words9, align 4
  %12 = load %struct.ix86_args*, %struct.ix86_args** %cum.addr, align 8
  %nregs = getelementptr inbounds %struct.ix86_args, %struct.ix86_args* %12, i32 0, i32 1
  %13 = load i32, i32* %nregs, align 4
  %14 = load i32, i32* %mode.addr, align 4
  %idxprom10 = sext i32 %14 to i64
  %arrayidx11 = getelementptr inbounds [59 x i8*], [59 x i8*]* @mode_name, i32 0, i64 %idxprom10
  %15 = load i8*, i8** %arrayidx11, align 8
  %16 = load i32, i32* %named.addr, align 4
  %call12 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.65, i32 0, i32 0), i32 %9, i32 %11, i32 %13, i8* %15, i32 %16)
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end
  %17 = load i32, i32* @target_flags, align 4
  %and13 = and i32 %17, 33554432
  %tobool14 = icmp ne i32 %and13, 0
  br i1 %tobool14, label %if.then.15, label %if.else.39

if.then.15:                                       ; preds = %if.end
  %18 = load i32, i32* %mode.addr, align 4
  %19 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %call16 = call i32 @examine_argument(i32 %18, %union.tree_node* %19, i32 0, i32* %int_nregs, i32* %sse_nregs)
  %tobool17 = icmp ne i32 %call16, 0
  br i1 %tobool17, label %if.else, label %if.then.18

if.then.18:                                       ; preds = %if.then.15
  %20 = load i32, i32* %words, align 4
  %21 = load %struct.ix86_args*, %struct.ix86_args** %cum.addr, align 8
  %words19 = getelementptr inbounds %struct.ix86_args, %struct.ix86_args* %21, i32 0, i32 0
  %22 = load i32, i32* %words19, align 4
  %add20 = add nsw i32 %22, %20
  store i32 %add20, i32* %words19, align 4
  br label %if.end.38

if.else:                                          ; preds = %if.then.15
  %23 = load i32, i32* %sse_nregs, align 4
  %24 = load %struct.ix86_args*, %struct.ix86_args** %cum.addr, align 8
  %sse_nregs21 = getelementptr inbounds %struct.ix86_args, %struct.ix86_args* %24, i32 0, i32 4
  %25 = load i32, i32* %sse_nregs21, align 4
  %cmp22 = icmp sle i32 %23, %25
  br i1 %cmp22, label %land.lhs.true, label %if.else.34

land.lhs.true:                                    ; preds = %if.else
  %26 = load i32, i32* %int_nregs, align 4
  %27 = load %struct.ix86_args*, %struct.ix86_args** %cum.addr, align 8
  %nregs24 = getelementptr inbounds %struct.ix86_args, %struct.ix86_args* %27, i32 0, i32 1
  %28 = load i32, i32* %nregs24, align 4
  %cmp25 = icmp sle i32 %26, %28
  br i1 %cmp25, label %if.then.27, label %if.else.34

if.then.27:                                       ; preds = %land.lhs.true
  %29 = load i32, i32* %int_nregs, align 4
  %30 = load %struct.ix86_args*, %struct.ix86_args** %cum.addr, align 8
  %nregs28 = getelementptr inbounds %struct.ix86_args, %struct.ix86_args* %30, i32 0, i32 1
  %31 = load i32, i32* %nregs28, align 4
  %sub29 = sub nsw i32 %31, %29
  store i32 %sub29, i32* %nregs28, align 4
  %32 = load i32, i32* %sse_nregs, align 4
  %33 = load %struct.ix86_args*, %struct.ix86_args** %cum.addr, align 8
  %sse_nregs30 = getelementptr inbounds %struct.ix86_args, %struct.ix86_args* %33, i32 0, i32 4
  %34 = load i32, i32* %sse_nregs30, align 4
  %sub31 = sub nsw i32 %34, %32
  store i32 %sub31, i32* %sse_nregs30, align 4
  %35 = load i32, i32* %int_nregs, align 4
  %36 = load %struct.ix86_args*, %struct.ix86_args** %cum.addr, align 8
  %regno = getelementptr inbounds %struct.ix86_args, %struct.ix86_args* %36, i32 0, i32 2
  %37 = load i32, i32* %regno, align 4
  %add32 = add nsw i32 %37, %35
  store i32 %add32, i32* %regno, align 4
  %38 = load i32, i32* %sse_nregs, align 4
  %39 = load %struct.ix86_args*, %struct.ix86_args** %cum.addr, align 8
  %sse_regno = getelementptr inbounds %struct.ix86_args, %struct.ix86_args* %39, i32 0, i32 5
  %40 = load i32, i32* %sse_regno, align 4
  %add33 = add nsw i32 %40, %38
  store i32 %add33, i32* %sse_regno, align 4
  br label %if.end.37

if.else.34:                                       ; preds = %land.lhs.true, %if.else
  %41 = load i32, i32* %words, align 4
  %42 = load %struct.ix86_args*, %struct.ix86_args** %cum.addr, align 8
  %words35 = getelementptr inbounds %struct.ix86_args, %struct.ix86_args* %42, i32 0, i32 0
  %43 = load i32, i32* %words35, align 4
  %add36 = add nsw i32 %43, %41
  store i32 %add36, i32* %words35, align 4
  br label %if.end.37

if.end.37:                                        ; preds = %if.else.34, %if.then.27
  br label %if.end.38

if.end.38:                                        ; preds = %if.end.37, %if.then.18
  br label %if.end.74

if.else.39:                                       ; preds = %if.end
  %44 = load i32, i32* @target_flags, align 4
  %and40 = and i32 %44, 327680
  %cmp41 = icmp ne i32 %and40, 0
  br i1 %cmp41, label %land.lhs.true.43, label %if.else.59

land.lhs.true.43:                                 ; preds = %if.else.39
  %45 = load i32, i32* %mode.addr, align 4
  %cmp44 = icmp eq i32 %45, 6
  br i1 %cmp44, label %if.then.46, label %if.else.59

if.then.46:                                       ; preds = %land.lhs.true.43
  %46 = load i32, i32* %words, align 4
  %47 = load %struct.ix86_args*, %struct.ix86_args** %cum.addr, align 8
  %sse_words = getelementptr inbounds %struct.ix86_args, %struct.ix86_args* %47, i32 0, i32 3
  %48 = load i32, i32* %sse_words, align 4
  %add47 = add nsw i32 %48, %46
  store i32 %add47, i32* %sse_words, align 4
  %49 = load %struct.ix86_args*, %struct.ix86_args** %cum.addr, align 8
  %sse_nregs48 = getelementptr inbounds %struct.ix86_args, %struct.ix86_args* %49, i32 0, i32 4
  %50 = load i32, i32* %sse_nregs48, align 4
  %sub49 = sub nsw i32 %50, 1
  store i32 %sub49, i32* %sse_nregs48, align 4
  %51 = load %struct.ix86_args*, %struct.ix86_args** %cum.addr, align 8
  %sse_regno50 = getelementptr inbounds %struct.ix86_args, %struct.ix86_args* %51, i32 0, i32 5
  %52 = load i32, i32* %sse_regno50, align 4
  %add51 = add nsw i32 %52, 1
  store i32 %add51, i32* %sse_regno50, align 4
  %53 = load %struct.ix86_args*, %struct.ix86_args** %cum.addr, align 8
  %sse_nregs52 = getelementptr inbounds %struct.ix86_args, %struct.ix86_args* %53, i32 0, i32 4
  %54 = load i32, i32* %sse_nregs52, align 4
  %cmp53 = icmp sle i32 %54, 0
  br i1 %cmp53, label %if.then.55, label %if.end.58

if.then.55:                                       ; preds = %if.then.46
  %55 = load %struct.ix86_args*, %struct.ix86_args** %cum.addr, align 8
  %sse_nregs56 = getelementptr inbounds %struct.ix86_args, %struct.ix86_args* %55, i32 0, i32 4
  store i32 0, i32* %sse_nregs56, align 4
  %56 = load %struct.ix86_args*, %struct.ix86_args** %cum.addr, align 8
  %sse_regno57 = getelementptr inbounds %struct.ix86_args, %struct.ix86_args* %56, i32 0, i32 5
  store i32 0, i32* %sse_regno57, align 4
  br label %if.end.58

if.end.58:                                        ; preds = %if.then.55, %if.then.46
  br label %if.end.73

if.else.59:                                       ; preds = %land.lhs.true.43, %if.else.39
  %57 = load i32, i32* %words, align 4
  %58 = load %struct.ix86_args*, %struct.ix86_args** %cum.addr, align 8
  %words60 = getelementptr inbounds %struct.ix86_args, %struct.ix86_args* %58, i32 0, i32 0
  %59 = load i32, i32* %words60, align 4
  %add61 = add nsw i32 %59, %57
  store i32 %add61, i32* %words60, align 4
  %60 = load i32, i32* %words, align 4
  %61 = load %struct.ix86_args*, %struct.ix86_args** %cum.addr, align 8
  %nregs62 = getelementptr inbounds %struct.ix86_args, %struct.ix86_args* %61, i32 0, i32 1
  %62 = load i32, i32* %nregs62, align 4
  %sub63 = sub nsw i32 %62, %60
  store i32 %sub63, i32* %nregs62, align 4
  %63 = load i32, i32* %words, align 4
  %64 = load %struct.ix86_args*, %struct.ix86_args** %cum.addr, align 8
  %regno64 = getelementptr inbounds %struct.ix86_args, %struct.ix86_args* %64, i32 0, i32 2
  %65 = load i32, i32* %regno64, align 4
  %add65 = add nsw i32 %65, %63
  store i32 %add65, i32* %regno64, align 4
  %66 = load %struct.ix86_args*, %struct.ix86_args** %cum.addr, align 8
  %nregs66 = getelementptr inbounds %struct.ix86_args, %struct.ix86_args* %66, i32 0, i32 1
  %67 = load i32, i32* %nregs66, align 4
  %cmp67 = icmp sle i32 %67, 0
  br i1 %cmp67, label %if.then.69, label %if.end.72

if.then.69:                                       ; preds = %if.else.59
  %68 = load %struct.ix86_args*, %struct.ix86_args** %cum.addr, align 8
  %nregs70 = getelementptr inbounds %struct.ix86_args, %struct.ix86_args* %68, i32 0, i32 1
  store i32 0, i32* %nregs70, align 4
  %69 = load %struct.ix86_args*, %struct.ix86_args** %cum.addr, align 8
  %regno71 = getelementptr inbounds %struct.ix86_args, %struct.ix86_args* %69, i32 0, i32 2
  store i32 0, i32* %regno71, align 4
  br label %if.end.72

if.end.72:                                        ; preds = %if.then.69, %if.else.59
  br label %if.end.73

if.end.73:                                        ; preds = %if.end.72, %if.end.58
  br label %if.end.74

if.end.74:                                        ; preds = %if.end.73, %if.end.38
  ret void
}

declare i64 @int_size_in_bytes(%union.tree_node*) #0

; Function Attrs: nounwind uwtable
define internal i32 @examine_argument(i32 %mode, %union.tree_node* %type, i32 %in_return, i32* %int_nregs, i32* %sse_nregs) #1 {
entry:
  %retval = alloca i32, align 4
  %mode.addr = alloca i32, align 4
  %type.addr = alloca %union.tree_node*, align 8
  %in_return.addr = alloca i32, align 4
  %int_nregs.addr = alloca i32*, align 8
  %sse_nregs.addr = alloca i32*, align 8
  %class = alloca [4 x i32], align 16
  %n = alloca i32, align 4
  store i32 %mode, i32* %mode.addr, align 4
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  store i32 %in_return, i32* %in_return.addr, align 4
  store i32* %int_nregs, i32** %int_nregs.addr, align 8
  store i32* %sse_nregs, i32** %sse_nregs.addr, align 8
  %0 = load i32, i32* %mode.addr, align 4
  %1 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %arraydecay = getelementptr inbounds [4 x i32], [4 x i32]* %class, i32 0, i32 0
  %call = call i32 @classify_argument(i32 %0, %union.tree_node* %1, i32* %arraydecay, i32 0)
  store i32 %call, i32* %n, align 4
  %2 = load i32*, i32** %int_nregs.addr, align 8
  store i32 0, i32* %2, align 4
  %3 = load i32*, i32** %sse_nregs.addr, align 8
  store i32 0, i32* %3, align 4
  %4 = load i32, i32* %n, align 4
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %5 = load i32, i32* %n, align 4
  %dec = add nsw i32 %5, -1
  store i32 %dec, i32* %n, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %6 = load i32, i32* %n, align 4
  %cmp = icmp sge i32 %6, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i32, i32* %n, align 4
  %idxprom = sext i32 %7 to i64
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* %class, i32 0, i64 %idxprom
  %8 = load i32, i32* %arrayidx, align 4
  switch i32 %8, label %sw.epilog [
    i32 1, label %sw.bb
    i32 2, label %sw.bb
    i32 3, label %sw.bb.1
    i32 4, label %sw.bb.1
    i32 5, label %sw.bb.1
    i32 0, label %sw.bb.3
    i32 6, label %sw.bb.3
    i32 7, label %sw.bb.4
    i32 8, label %sw.bb.4
    i32 9, label %sw.bb.8
  ]

sw.bb:                                            ; preds = %for.body, %for.body
  %9 = load i32*, i32** %int_nregs.addr, align 8
  %10 = load i32, i32* %9, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %9, align 4
  br label %sw.epilog

sw.bb.1:                                          ; preds = %for.body, %for.body, %for.body
  %11 = load i32*, i32** %sse_nregs.addr, align 8
  %12 = load i32, i32* %11, align 4
  %inc2 = add nsw i32 %12, 1
  store i32 %inc2, i32* %11, align 4
  br label %sw.epilog

sw.bb.3:                                          ; preds = %for.body, %for.body
  br label %sw.epilog

sw.bb.4:                                          ; preds = %for.body, %for.body
  %13 = load i32, i32* %in_return.addr, align 4
  %tobool5 = icmp ne i32 %13, 0
  br i1 %tobool5, label %if.end.7, label %if.then.6

if.then.6:                                        ; preds = %sw.bb.4
  store i32 0, i32* %retval
  br label %return

if.end.7:                                         ; preds = %sw.bb.4
  br label %sw.epilog

sw.bb.8:                                          ; preds = %for.body
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 1953, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__FUNCTION__.examine_argument, i32 0, i32 0)) #7
  unreachable

sw.epilog:                                        ; preds = %for.body, %if.end.7, %sw.bb.3, %sw.bb.1, %sw.bb
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog
  %14 = load i32, i32* %n, align 4
  %dec9 = add nsw i32 %14, -1
  store i32 %dec9, i32* %n, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then.6, %if.then
  %15 = load i32, i32* %retval
  ret i32 %15
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @function_arg(%struct.ix86_args* %cum, i32 %mode, %union.tree_node* %type, i32 %named) #1 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %cum.addr = alloca %struct.ix86_args*, align 8
  %mode.addr = alloca i32, align 4
  %type.addr = alloca %union.tree_node*, align 8
  %named.addr = alloca i32, align 4
  %ret = alloca %struct.rtx_def*, align 8
  %bytes = alloca i32, align 4
  %words = alloca i32, align 4
  store %struct.ix86_args* %cum, %struct.ix86_args** %cum.addr, align 8
  store i32 %mode, i32* %mode.addr, align 4
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  store i32 %named, i32* %named.addr, align 4
  store %struct.rtx_def* null, %struct.rtx_def** %ret, align 8
  %0 = load i32, i32* %mode.addr, align 4
  %cmp = icmp eq i32 %0, 51
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %call = call i64 @int_size_in_bytes(%union.tree_node* %1)
  br label %cond.end

cond.false:                                       ; preds = %entry
  %2 = load i32, i32* %mode.addr, align 4
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom
  %3 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %3 to i32
  %conv1 = sext i32 %conv to i64
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call, %cond.true ], [ %conv1, %cond.false ]
  %conv2 = trunc i64 %cond to i32
  store i32 %conv2, i32* %bytes, align 4
  %4 = load i32, i32* %bytes, align 4
  %5 = load i32, i32* @target_flags, align 4
  %and = and i32 %5, 33554432
  %tobool = icmp ne i32 %and, 0
  %cond3 = select i1 %tobool, i32 8, i32 4
  %add = add nsw i32 %4, %cond3
  %sub = sub nsw i32 %add, 1
  %6 = load i32, i32* @target_flags, align 4
  %and4 = and i32 %6, 33554432
  %tobool5 = icmp ne i32 %and4, 0
  %cond6 = select i1 %tobool5, i32 8, i32 4
  %div = sdiv i32 %sub, %cond6
  store i32 %div, i32* %words, align 4
  %7 = load i32, i32* %mode.addr, align 4
  %cmp7 = icmp eq i32 %7, 0
  br i1 %cmp7, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  %8 = load i32, i32* @target_flags, align 4
  %and9 = and i32 %8, 33554432
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %if.then.11, label %if.else

if.then.11:                                       ; preds = %if.then
  %9 = load %struct.ix86_args*, %struct.ix86_args** %cum.addr, align 8
  %maybe_vaarg = getelementptr inbounds %struct.ix86_args, %struct.ix86_args* %9, i32 0, i32 6
  %10 = load i32, i32* %maybe_vaarg, align 4
  %tobool12 = icmp ne i32 %10, 0
  br i1 %tobool12, label %cond.true.13, label %cond.false.23

cond.true.13:                                     ; preds = %if.then.11
  %11 = load %struct.ix86_args*, %struct.ix86_args** %cum.addr, align 8
  %sse_nregs = getelementptr inbounds %struct.ix86_args, %struct.ix86_args* %11, i32 0, i32 4
  %12 = load i32, i32* %sse_nregs, align 4
  %cmp14 = icmp slt i32 %12, 0
  br i1 %cmp14, label %cond.true.16, label %cond.false.20

cond.true.16:                                     ; preds = %cond.true.13
  %13 = load i32, i32* @target_flags, align 4
  %and17 = and i32 %13, 33554432
  %tobool18 = icmp ne i32 %and17, 0
  %cond19 = select i1 %tobool18, i32 8, i32 0
  br label %cond.end.21

cond.false.20:                                    ; preds = %cond.true.13
  %14 = load %struct.ix86_args*, %struct.ix86_args** %cum.addr, align 8
  %sse_regno = getelementptr inbounds %struct.ix86_args, %struct.ix86_args* %14, i32 0, i32 5
  %15 = load i32, i32* %sse_regno, align 4
  br label %cond.end.21

cond.end.21:                                      ; preds = %cond.false.20, %cond.true.16
  %cond22 = phi i32 [ %cond19, %cond.true.16 ], [ %15, %cond.false.20 ]
  br label %cond.end.24

cond.false.23:                                    ; preds = %if.then.11
  br label %cond.end.24

cond.end.24:                                      ; preds = %cond.false.23, %cond.end.21
  %cond25 = phi i32 [ %cond22, %cond.end.21 ], [ -1, %cond.false.23 ]
  %conv26 = sext i32 %cond25 to i64
  %call27 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv26)
  store %struct.rtx_def* %call27, %struct.rtx_def** %retval
  br label %return

if.else:                                          ; preds = %if.then
  %16 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 63), align 8
  store %struct.rtx_def* %16, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %cond.end
  %17 = load i32, i32* @target_flags, align 4
  %and28 = and i32 %17, 33554432
  %tobool29 = icmp ne i32 %and28, 0
  br i1 %tobool29, label %if.then.30, label %if.else.36

if.then.30:                                       ; preds = %if.end
  %18 = load i32, i32* %mode.addr, align 4
  %19 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %20 = load %struct.ix86_args*, %struct.ix86_args** %cum.addr, align 8
  %nregs = getelementptr inbounds %struct.ix86_args, %struct.ix86_args* %20, i32 0, i32 1
  %21 = load i32, i32* %nregs, align 4
  %22 = load %struct.ix86_args*, %struct.ix86_args** %cum.addr, align 8
  %sse_nregs31 = getelementptr inbounds %struct.ix86_args, %struct.ix86_args* %22, i32 0, i32 4
  %23 = load i32, i32* %sse_nregs31, align 4
  %24 = load %struct.ix86_args*, %struct.ix86_args** %cum.addr, align 8
  %regno = getelementptr inbounds %struct.ix86_args, %struct.ix86_args* %24, i32 0, i32 2
  %25 = load i32, i32* %regno, align 4
  %idxprom32 = sext i32 %25 to i64
  %arrayidx33 = getelementptr inbounds [6 x i32], [6 x i32]* @x86_64_int_parameter_registers, i32 0, i64 %idxprom32
  %26 = load %struct.ix86_args*, %struct.ix86_args** %cum.addr, align 8
  %sse_regno34 = getelementptr inbounds %struct.ix86_args, %struct.ix86_args* %26, i32 0, i32 5
  %27 = load i32, i32* %sse_regno34, align 4
  %call35 = call %struct.rtx_def* @construct_container(i32 %18, %union.tree_node* %19, i32 0, i32 %21, i32 %23, i32* %arrayidx33, i32 %27)
  store %struct.rtx_def* %call35, %struct.rtx_def** %ret, align 8
  br label %if.end.51

if.else.36:                                       ; preds = %if.end
  %28 = load i32, i32* %mode.addr, align 4
  switch i32 %28, label %sw.default [
    i32 51, label %sw.bb
    i32 5, label %sw.bb
    i32 4, label %sw.bb
    i32 3, label %sw.bb
    i32 2, label %sw.bb
    i32 6, label %sw.bb.44
  ]

sw.default:                                       ; preds = %if.else.36
  br label %sw.epilog

sw.bb:                                            ; preds = %if.else.36, %if.else.36, %if.else.36, %if.else.36, %if.else.36
  %29 = load i32, i32* %words, align 4
  %30 = load %struct.ix86_args*, %struct.ix86_args** %cum.addr, align 8
  %nregs37 = getelementptr inbounds %struct.ix86_args, %struct.ix86_args* %30, i32 0, i32 1
  %31 = load i32, i32* %nregs37, align 4
  %cmp38 = icmp sle i32 %29, %31
  br i1 %cmp38, label %if.then.40, label %if.end.43

if.then.40:                                       ; preds = %sw.bb
  %32 = load i32, i32* %mode.addr, align 4
  %33 = load %struct.ix86_args*, %struct.ix86_args** %cum.addr, align 8
  %regno41 = getelementptr inbounds %struct.ix86_args, %struct.ix86_args* %33, i32 0, i32 2
  %34 = load i32, i32* %regno41, align 4
  %call42 = call %struct.rtx_def* @gen_rtx_REG(i32 %32, i32 %34)
  store %struct.rtx_def* %call42, %struct.rtx_def** %ret, align 8
  br label %if.end.43

if.end.43:                                        ; preds = %if.then.40, %sw.bb
  br label %sw.epilog

sw.bb.44:                                         ; preds = %if.else.36
  %35 = load %struct.ix86_args*, %struct.ix86_args** %cum.addr, align 8
  %sse_nregs45 = getelementptr inbounds %struct.ix86_args, %struct.ix86_args* %35, i32 0, i32 4
  %36 = load i32, i32* %sse_nregs45, align 4
  %tobool46 = icmp ne i32 %36, 0
  br i1 %tobool46, label %if.then.47, label %if.end.50

if.then.47:                                       ; preds = %sw.bb.44
  %37 = load i32, i32* %mode.addr, align 4
  %38 = load %struct.ix86_args*, %struct.ix86_args** %cum.addr, align 8
  %sse_regno48 = getelementptr inbounds %struct.ix86_args, %struct.ix86_args* %38, i32 0, i32 5
  %39 = load i32, i32* %sse_regno48, align 4
  %call49 = call %struct.rtx_def* @gen_rtx_REG(i32 %37, i32 %39)
  store %struct.rtx_def* %call49, %struct.rtx_def** %ret, align 8
  br label %if.end.50

if.end.50:                                        ; preds = %if.then.47, %sw.bb.44
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end.50, %if.end.43, %sw.default
  br label %if.end.51

if.end.51:                                        ; preds = %sw.epilog, %if.then.30
  %40 = load i8*, i8** @ix86_debug_arg_string, align 8
  %cmp52 = icmp ne i8* %40, null
  br i1 %cmp52, label %if.then.54, label %if.end.70

if.then.54:                                       ; preds = %if.end.51
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %42 = load i32, i32* %words, align 4
  %43 = load %struct.ix86_args*, %struct.ix86_args** %cum.addr, align 8
  %words55 = getelementptr inbounds %struct.ix86_args, %struct.ix86_args* %43, i32 0, i32 0
  %44 = load i32, i32* %words55, align 4
  %45 = load %struct.ix86_args*, %struct.ix86_args** %cum.addr, align 8
  %nregs56 = getelementptr inbounds %struct.ix86_args, %struct.ix86_args* %45, i32 0, i32 1
  %46 = load i32, i32* %nregs56, align 4
  %47 = load i32, i32* %mode.addr, align 4
  %idxprom57 = sext i32 %47 to i64
  %arrayidx58 = getelementptr inbounds [59 x i8*], [59 x i8*]* @mode_name, i32 0, i64 %idxprom57
  %48 = load i8*, i8** %arrayidx58, align 8
  %49 = load i32, i32* %named.addr, align 4
  %call59 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %41, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.66, i32 0, i32 0), i32 %42, i32 %44, i32 %46, i8* %48, i32 %49)
  %50 = load %struct.rtx_def*, %struct.rtx_def** %ret, align 8
  %tobool60 = icmp ne %struct.rtx_def* %50, null
  br i1 %tobool60, label %if.then.61, label %if.else.66

if.then.61:                                       ; preds = %if.then.54
  %51 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %52 = load %struct.rtx_def*, %struct.rtx_def** %ret, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %52, i32 0, i32 1
  %arrayidx62 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx62 to i32*
  %53 = load i32, i32* %rtuint, align 4
  %idxprom63 = zext i32 %53 to i64
  %arrayidx64 = getelementptr inbounds [53 x i8*], [53 x i8*]* @reg_names, i32 0, i64 %idxprom63
  %54 = load i8*, i8** %arrayidx64, align 8
  %call65 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %51, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.67, i32 0, i32 0), i8* %54)
  br label %if.end.68

if.else.66:                                       ; preds = %if.then.54
  %55 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call67 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %55, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.68, i32 0, i32 0))
  br label %if.end.68

if.end.68:                                        ; preds = %if.else.66, %if.then.61
  %56 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call69 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %56, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.69, i32 0, i32 0))
  br label %if.end.70

if.end.70:                                        ; preds = %if.end.68, %if.end.51
  %57 = load %struct.rtx_def*, %struct.rtx_def** %ret, align 8
  store %struct.rtx_def* %57, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end.70, %if.else, %cond.end.24
  %58 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %58
}

declare %struct.rtx_def* @gen_rtx_CONST_INT(i32, i64) #0

; Function Attrs: nounwind uwtable
define internal %struct.rtx_def* @construct_container(i32 %mode, %union.tree_node* %type, i32 %in_return, i32 %nintregs, i32 %nsseregs, i32* %intreg, i32 %sse_regno) #1 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %type.addr = alloca %union.tree_node*, align 8
  %in_return.addr = alloca i32, align 4
  %nintregs.addr = alloca i32, align 4
  %nsseregs.addr = alloca i32, align 4
  %intreg.addr = alloca i32*, align 8
  %sse_regno.addr = alloca i32, align 4
  %tmpmode = alloca i32, align 4
  %bytes = alloca i32, align 4
  %class = alloca [4 x i32], align 16
  %n = alloca i32, align 4
  %i = alloca i32, align 4
  %nexps = alloca i32, align 4
  %needed_sseregs = alloca i32, align 4
  %needed_intregs = alloca i32, align 4
  %exp = alloca [4 x %struct.rtx_def*], align 16
  %ret = alloca %struct.rtx_def*, align 8
  store i32 %mode, i32* %mode.addr, align 4
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  store i32 %in_return, i32* %in_return.addr, align 4
  store i32 %nintregs, i32* %nintregs.addr, align 4
  store i32 %nsseregs, i32* %nsseregs.addr, align 4
  store i32* %intreg, i32** %intreg.addr, align 8
  store i32 %sse_regno, i32* %sse_regno.addr, align 4
  %0 = load i32, i32* %mode.addr, align 4
  %cmp = icmp eq i32 %0, 51
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %call = call i64 @int_size_in_bytes(%union.tree_node* %1)
  br label %cond.end

cond.false:                                       ; preds = %entry
  %2 = load i32, i32* %mode.addr, align 4
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom
  %3 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %3 to i32
  %conv1 = sext i32 %conv to i64
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call, %cond.true ], [ %conv1, %cond.false ]
  %conv2 = trunc i64 %cond to i32
  store i32 %conv2, i32* %bytes, align 4
  store i32 0, i32* %nexps, align 4
  %4 = load i32, i32* %mode.addr, align 4
  %5 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %arraydecay = getelementptr inbounds [4 x i32], [4 x i32]* %class, i32 0, i32 0
  %call3 = call i32 @classify_argument(i32 %4, %union.tree_node* %5, i32* %arraydecay, i32 0)
  store i32 %call3, i32* %n, align 4
  %6 = load i8*, i8** @ix86_debug_arg_string, align 8
  %cmp4 = icmp ne i8* %6, null
  br i1 %cmp4, label %if.then, label %if.end.17

if.then:                                          ; preds = %cond.end
  %7 = load i32, i32* %n, align 4
  %tobool = icmp ne i32 %7, 0
  br i1 %tobool, label %if.else, label %if.then.6

if.then.6:                                        ; preds = %if.then
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.218, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %if.then
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call8 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.219, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %n, align 4
  %cmp9 = icmp slt i32 %10, %11
  br i1 %cmp9, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %13 = load i32, i32* %i, align 4
  %idxprom11 = sext i32 %13 to i64
  %arrayidx12 = getelementptr inbounds [4 x i32], [4 x i32]* %class, i32 0, i64 %idxprom11
  %14 = load i32, i32* %arrayidx12, align 4
  %idxprom13 = zext i32 %14 to i64
  %arrayidx14 = getelementptr inbounds [10 x i8*], [10 x i8*]* @x86_64_reg_class_name, i32 0, i64 %idxprom13
  %15 = load i8*, i8** %arrayidx14, align 8
  %call15 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.220, i32 0, i32 0), i8* %15)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call16 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %17, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.203, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %for.end, %if.then.6
  br label %if.end.17

if.end.17:                                        ; preds = %if.end, %cond.end
  %18 = load i32, i32* %n, align 4
  %tobool18 = icmp ne i32 %18, 0
  br i1 %tobool18, label %if.end.20, label %if.then.19

if.then.19:                                       ; preds = %if.end.17
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end.20:                                        ; preds = %if.end.17
  %19 = load i32, i32* %mode.addr, align 4
  %20 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %21 = load i32, i32* %in_return.addr, align 4
  %call21 = call i32 @examine_argument(i32 %19, %union.tree_node* %20, i32 %21, i32* %needed_intregs, i32* %needed_sseregs)
  %tobool22 = icmp ne i32 %call21, 0
  br i1 %tobool22, label %if.end.24, label %if.then.23

if.then.23:                                       ; preds = %if.end.20
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end.24:                                        ; preds = %if.end.20
  %22 = load i32, i32* %needed_intregs, align 4
  %23 = load i32, i32* %nintregs.addr, align 4
  %cmp25 = icmp sgt i32 %22, %23
  br i1 %cmp25, label %if.then.29, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.24
  %24 = load i32, i32* %needed_sseregs, align 4
  %25 = load i32, i32* %nsseregs.addr, align 4
  %cmp27 = icmp sgt i32 %24, %25
  br i1 %cmp27, label %if.then.29, label %if.end.30

if.then.29:                                       ; preds = %lor.lhs.false, %if.end.24
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end.30:                                        ; preds = %lor.lhs.false
  %26 = load i32, i32* %n, align 4
  %cmp31 = icmp eq i32 %26, 1
  br i1 %cmp31, label %land.lhs.true, label %if.end.51

land.lhs.true:                                    ; preds = %if.end.30
  %27 = load i32, i32* %mode.addr, align 4
  %cmp33 = icmp ne i32 %27, 21
  br i1 %cmp33, label %if.then.35, label %if.end.51

if.then.35:                                       ; preds = %land.lhs.true
  %arrayidx36 = getelementptr inbounds [4 x i32], [4 x i32]* %class, i32 0, i64 0
  %28 = load i32, i32* %arrayidx36, align 4
  switch i32 %28, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb
    i32 3, label %sw.bb.39
    i32 4, label %sw.bb.39
    i32 5, label %sw.bb.39
    i32 7, label %sw.bb.48
    i32 0, label %sw.bb.50
  ]

sw.bb:                                            ; preds = %if.then.35, %if.then.35
  %29 = load i32, i32* %mode.addr, align 4
  %30 = load i32*, i32** %intreg.addr, align 8
  %arrayidx37 = getelementptr inbounds i32, i32* %30, i64 0
  %31 = load i32, i32* %arrayidx37, align 4
  %call38 = call %struct.rtx_def* @gen_rtx_REG(i32 %29, i32 %31)
  store %struct.rtx_def* %call38, %struct.rtx_def** %retval
  br label %return

sw.bb.39:                                         ; preds = %if.then.35, %if.then.35, %if.then.35
  %32 = load i32, i32* %mode.addr, align 4
  %33 = load i32, i32* %sse_regno.addr, align 4
  %cmp40 = icmp slt i32 %33, 8
  br i1 %cmp40, label %cond.true.42, label %cond.false.43

cond.true.42:                                     ; preds = %sw.bb.39
  %34 = load i32, i32* %sse_regno.addr, align 4
  %add = add nsw i32 21, %34
  br label %cond.end.45

cond.false.43:                                    ; preds = %sw.bb.39
  %35 = load i32, i32* %sse_regno.addr, align 4
  %add44 = add nsw i32 45, %35
  %sub = sub nsw i32 %add44, 8
  br label %cond.end.45

cond.end.45:                                      ; preds = %cond.false.43, %cond.true.42
  %cond46 = phi i32 [ %add, %cond.true.42 ], [ %sub, %cond.false.43 ]
  %call47 = call %struct.rtx_def* @gen_rtx_REG(i32 %32, i32 %cond46)
  store %struct.rtx_def* %call47, %struct.rtx_def** %retval
  br label %return

sw.bb.48:                                         ; preds = %if.then.35
  %36 = load i32, i32* %mode.addr, align 4
  %call49 = call %struct.rtx_def* @gen_rtx_REG(i32 %36, i32 8)
  store %struct.rtx_def* %call49, %struct.rtx_def** %retval
  br label %return

sw.bb.50:                                         ; preds = %if.then.35
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

sw.default:                                       ; preds = %if.then.35
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 2019, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__FUNCTION__.construct_container, i32 0, i32 0)) #7
  unreachable

if.end.51:                                        ; preds = %land.lhs.true, %if.end.30
  %37 = load i32, i32* %n, align 4
  %cmp52 = icmp eq i32 %37, 2
  br i1 %cmp52, label %land.lhs.true.54, label %if.end.73

land.lhs.true.54:                                 ; preds = %if.end.51
  %arrayidx55 = getelementptr inbounds [4 x i32], [4 x i32]* %class, i32 0, i64 0
  %38 = load i32, i32* %arrayidx55, align 4
  %cmp56 = icmp eq i32 %38, 3
  br i1 %cmp56, label %land.lhs.true.58, label %if.end.73

land.lhs.true.58:                                 ; preds = %land.lhs.true.54
  %arrayidx59 = getelementptr inbounds [4 x i32], [4 x i32]* %class, i32 0, i64 1
  %39 = load i32, i32* %arrayidx59, align 4
  %cmp60 = icmp eq i32 %39, 6
  br i1 %cmp60, label %if.then.62, label %if.end.73

if.then.62:                                       ; preds = %land.lhs.true.58
  %40 = load i32, i32* %mode.addr, align 4
  %41 = load i32, i32* %sse_regno.addr, align 4
  %cmp63 = icmp slt i32 %41, 8
  br i1 %cmp63, label %cond.true.65, label %cond.false.67

cond.true.65:                                     ; preds = %if.then.62
  %42 = load i32, i32* %sse_regno.addr, align 4
  %add66 = add nsw i32 21, %42
  br label %cond.end.70

cond.false.67:                                    ; preds = %if.then.62
  %43 = load i32, i32* %sse_regno.addr, align 4
  %add68 = add nsw i32 45, %43
  %sub69 = sub nsw i32 %add68, 8
  br label %cond.end.70

cond.end.70:                                      ; preds = %cond.false.67, %cond.true.65
  %cond71 = phi i32 [ %add66, %cond.true.65 ], [ %sub69, %cond.false.67 ]
  %call72 = call %struct.rtx_def* @gen_rtx_REG(i32 %40, i32 %cond71)
  store %struct.rtx_def* %call72, %struct.rtx_def** %retval
  br label %return

if.end.73:                                        ; preds = %land.lhs.true.58, %land.lhs.true.54, %if.end.51
  %44 = load i32, i32* %n, align 4
  %cmp74 = icmp eq i32 %44, 2
  br i1 %cmp74, label %land.lhs.true.76, label %if.end.86

land.lhs.true.76:                                 ; preds = %if.end.73
  %arrayidx77 = getelementptr inbounds [4 x i32], [4 x i32]* %class, i32 0, i64 0
  %45 = load i32, i32* %arrayidx77, align 4
  %cmp78 = icmp eq i32 %45, 7
  br i1 %cmp78, label %land.lhs.true.80, label %if.end.86

land.lhs.true.80:                                 ; preds = %land.lhs.true.76
  %arrayidx81 = getelementptr inbounds [4 x i32], [4 x i32]* %class, i32 0, i64 1
  %46 = load i32, i32* %arrayidx81, align 4
  %cmp82 = icmp eq i32 %46, 8
  br i1 %cmp82, label %if.then.84, label %if.end.86

if.then.84:                                       ; preds = %land.lhs.true.80
  %call85 = call %struct.rtx_def* @gen_rtx_REG(i32 18, i32 8)
  store %struct.rtx_def* %call85, %struct.rtx_def** %retval
  br label %return

if.end.86:                                        ; preds = %land.lhs.true.80, %land.lhs.true.76, %if.end.73
  %47 = load i32, i32* %n, align 4
  %cmp87 = icmp eq i32 %47, 2
  br i1 %cmp87, label %land.lhs.true.89, label %if.end.112

land.lhs.true.89:                                 ; preds = %if.end.86
  %arrayidx90 = getelementptr inbounds [4 x i32], [4 x i32]* %class, i32 0, i64 0
  %48 = load i32, i32* %arrayidx90, align 4
  %cmp91 = icmp eq i32 %48, 1
  br i1 %cmp91, label %land.lhs.true.93, label %if.end.112

land.lhs.true.93:                                 ; preds = %land.lhs.true.89
  %arrayidx94 = getelementptr inbounds [4 x i32], [4 x i32]* %class, i32 0, i64 1
  %49 = load i32, i32* %arrayidx94, align 4
  %cmp95 = icmp eq i32 %49, 1
  br i1 %cmp95, label %land.lhs.true.97, label %if.end.112

land.lhs.true.97:                                 ; preds = %land.lhs.true.93
  %50 = load i32, i32* %mode.addr, align 4
  %cmp98 = icmp eq i32 %50, 28
  br i1 %cmp98, label %land.lhs.true.103, label %lor.lhs.false.100

lor.lhs.false.100:                                ; preds = %land.lhs.true.97
  %51 = load i32, i32* %mode.addr, align 4
  %cmp101 = icmp eq i32 %51, 6
  br i1 %cmp101, label %land.lhs.true.103, label %if.end.112

land.lhs.true.103:                                ; preds = %lor.lhs.false.100, %land.lhs.true.97
  %52 = load i32*, i32** %intreg.addr, align 8
  %arrayidx104 = getelementptr inbounds i32, i32* %52, i64 0
  %53 = load i32, i32* %arrayidx104, align 4
  %add105 = add nsw i32 %53, 1
  %54 = load i32*, i32** %intreg.addr, align 8
  %arrayidx106 = getelementptr inbounds i32, i32* %54, i64 1
  %55 = load i32, i32* %arrayidx106, align 4
  %cmp107 = icmp eq i32 %add105, %55
  br i1 %cmp107, label %if.then.109, label %if.end.112

if.then.109:                                      ; preds = %land.lhs.true.103
  %56 = load i32, i32* %mode.addr, align 4
  %57 = load i32*, i32** %intreg.addr, align 8
  %arrayidx110 = getelementptr inbounds i32, i32* %57, i64 0
  %58 = load i32, i32* %arrayidx110, align 4
  %call111 = call %struct.rtx_def* @gen_rtx_REG(i32 %56, i32 %58)
  store %struct.rtx_def* %call111, %struct.rtx_def** %retval
  br label %return

if.end.112:                                       ; preds = %land.lhs.true.103, %lor.lhs.false.100, %land.lhs.true.93, %land.lhs.true.89, %if.end.86
  %59 = load i32, i32* %n, align 4
  %cmp113 = icmp eq i32 %59, 4
  br i1 %cmp113, label %land.lhs.true.115, label %if.end.133

land.lhs.true.115:                                ; preds = %if.end.112
  %arrayidx116 = getelementptr inbounds [4 x i32], [4 x i32]* %class, i32 0, i64 0
  %60 = load i32, i32* %arrayidx116, align 4
  %cmp117 = icmp eq i32 %60, 7
  br i1 %cmp117, label %land.lhs.true.119, label %if.end.133

land.lhs.true.119:                                ; preds = %land.lhs.true.115
  %arrayidx120 = getelementptr inbounds [4 x i32], [4 x i32]* %class, i32 0, i64 1
  %61 = load i32, i32* %arrayidx120, align 4
  %cmp121 = icmp eq i32 %61, 8
  br i1 %cmp121, label %land.lhs.true.123, label %if.end.133

land.lhs.true.123:                                ; preds = %land.lhs.true.119
  %arrayidx124 = getelementptr inbounds [4 x i32], [4 x i32]* %class, i32 0, i64 2
  %62 = load i32, i32* %arrayidx124, align 4
  %cmp125 = icmp eq i32 %62, 7
  br i1 %cmp125, label %land.lhs.true.127, label %if.end.133

land.lhs.true.127:                                ; preds = %land.lhs.true.123
  %arrayidx128 = getelementptr inbounds [4 x i32], [4 x i32]* %class, i32 0, i64 3
  %63 = load i32, i32* %arrayidx128, align 4
  %cmp129 = icmp eq i32 %63, 8
  br i1 %cmp129, label %if.then.131, label %if.end.133

if.then.131:                                      ; preds = %land.lhs.true.127
  %call132 = call %struct.rtx_def* @gen_rtx_REG(i32 24, i32 8)
  store %struct.rtx_def* %call132, %struct.rtx_def** %retval
  br label %return

if.end.133:                                       ; preds = %land.lhs.true.127, %land.lhs.true.123, %land.lhs.true.119, %land.lhs.true.115, %if.end.112
  store i32 0, i32* %i, align 4
  br label %for.cond.134

for.cond.134:                                     ; preds = %for.inc.242, %if.end.133
  %64 = load i32, i32* %i, align 4
  %65 = load i32, i32* %n, align 4
  %cmp135 = icmp slt i32 %64, %65
  br i1 %cmp135, label %for.body.137, label %for.end.244

for.body.137:                                     ; preds = %for.cond.134
  %66 = load i32, i32* %i, align 4
  %idxprom138 = sext i32 %66 to i64
  %arrayidx139 = getelementptr inbounds [4 x i32], [4 x i32]* %class, i32 0, i64 %idxprom138
  %67 = load i32, i32* %arrayidx139, align 4
  switch i32 %67, label %sw.default.241 [
    i32 0, label %sw.bb.140
    i32 1, label %sw.bb.141
    i32 2, label %sw.bb.141
    i32 4, label %sw.bb.171
    i32 5, label %sw.bb.190
    i32 3, label %sw.bb.209
  ]

sw.bb.140:                                        ; preds = %for.body.137
  br label %sw.epilog

sw.bb.141:                                        ; preds = %for.body.137, %for.body.137
  %68 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %68, 8
  %add142 = add nsw i32 %mul, 8
  %69 = load i32, i32* %bytes, align 4
  %cmp143 = icmp sgt i32 %add142, %69
  br i1 %cmp143, label %if.then.145, label %if.else.150

if.then.145:                                      ; preds = %sw.bb.141
  %70 = load i32, i32* %bytes, align 4
  %71 = load i32, i32* %i, align 4
  %mul146 = mul nsw i32 %71, 8
  %sub147 = sub nsw i32 %70, %mul146
  %mul148 = mul nsw i32 %sub147, 8
  %call149 = call i32 @mode_for_size(i32 %mul148, i32 1, i32 0)
  store i32 %call149, i32* %tmpmode, align 4
  br label %if.end.158

if.else.150:                                      ; preds = %sw.bb.141
  %72 = load i32, i32* %i, align 4
  %idxprom151 = sext i32 %72 to i64
  %arrayidx152 = getelementptr inbounds [4 x i32], [4 x i32]* %class, i32 0, i64 %idxprom151
  %73 = load i32, i32* %arrayidx152, align 4
  %cmp153 = icmp eq i32 %73, 2
  br i1 %cmp153, label %if.then.155, label %if.else.156

if.then.155:                                      ; preds = %if.else.150
  store i32 4, i32* %tmpmode, align 4
  br label %if.end.157

if.else.156:                                      ; preds = %if.else.150
  store i32 5, i32* %tmpmode, align 4
  br label %if.end.157

if.end.157:                                       ; preds = %if.else.156, %if.then.155
  br label %if.end.158

if.end.158:                                       ; preds = %if.end.157, %if.then.145
  %74 = load i32, i32* %tmpmode, align 4
  %cmp159 = icmp eq i32 %74, 51
  br i1 %cmp159, label %if.then.161, label %if.end.162

if.then.161:                                      ; preds = %if.end.158
  store i32 5, i32* %tmpmode, align 4
  br label %if.end.162

if.end.162:                                       ; preds = %if.then.161, %if.end.158
  %75 = load i32, i32* %tmpmode, align 4
  %76 = load i32*, i32** %intreg.addr, align 8
  %77 = load i32, i32* %76, align 4
  %call163 = call %struct.rtx_def* @gen_rtx_REG(i32 %75, i32 %77)
  %78 = load i32, i32* %i, align 4
  %mul164 = mul nsw i32 %78, 8
  %conv165 = sext i32 %mul164 to i64
  %call166 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv165)
  %call167 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 0, %struct.rtx_def* %call163, %struct.rtx_def* %call166)
  %79 = load i32, i32* %nexps, align 4
  %inc168 = add nsw i32 %79, 1
  store i32 %inc168, i32* %nexps, align 4
  %idxprom169 = sext i32 %79 to i64
  %arrayidx170 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %exp, i32 0, i64 %idxprom169
  store %struct.rtx_def* %call167, %struct.rtx_def** %arrayidx170, align 8
  %80 = load i32*, i32** %intreg.addr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %80, i32 1
  store i32* %incdec.ptr, i32** %intreg.addr, align 8
  br label %sw.epilog

sw.bb.171:                                        ; preds = %for.body.137
  %81 = load i32, i32* %sse_regno.addr, align 4
  %cmp172 = icmp slt i32 %81, 8
  br i1 %cmp172, label %cond.true.174, label %cond.false.176

cond.true.174:                                    ; preds = %sw.bb.171
  %82 = load i32, i32* %sse_regno.addr, align 4
  %add175 = add nsw i32 21, %82
  br label %cond.end.179

cond.false.176:                                   ; preds = %sw.bb.171
  %83 = load i32, i32* %sse_regno.addr, align 4
  %add177 = add nsw i32 45, %83
  %sub178 = sub nsw i32 %add177, 8
  br label %cond.end.179

cond.end.179:                                     ; preds = %cond.false.176, %cond.true.174
  %cond180 = phi i32 [ %add175, %cond.true.174 ], [ %sub178, %cond.false.176 ]
  %call181 = call %struct.rtx_def* @gen_rtx_REG(i32 15, i32 %cond180)
  %84 = load i32, i32* %i, align 4
  %mul182 = mul nsw i32 %84, 8
  %conv183 = sext i32 %mul182 to i64
  %call184 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv183)
  %call185 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 0, %struct.rtx_def* %call181, %struct.rtx_def* %call184)
  %85 = load i32, i32* %nexps, align 4
  %inc186 = add nsw i32 %85, 1
  store i32 %inc186, i32* %nexps, align 4
  %idxprom187 = sext i32 %85 to i64
  %arrayidx188 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %exp, i32 0, i64 %idxprom187
  store %struct.rtx_def* %call185, %struct.rtx_def** %arrayidx188, align 8
  %86 = load i32, i32* %sse_regno.addr, align 4
  %inc189 = add nsw i32 %86, 1
  store i32 %inc189, i32* %sse_regno.addr, align 4
  br label %sw.epilog

sw.bb.190:                                        ; preds = %for.body.137
  %87 = load i32, i32* %sse_regno.addr, align 4
  %cmp191 = icmp slt i32 %87, 8
  br i1 %cmp191, label %cond.true.193, label %cond.false.195

cond.true.193:                                    ; preds = %sw.bb.190
  %88 = load i32, i32* %sse_regno.addr, align 4
  %add194 = add nsw i32 21, %88
  br label %cond.end.198

cond.false.195:                                   ; preds = %sw.bb.190
  %89 = load i32, i32* %sse_regno.addr, align 4
  %add196 = add nsw i32 45, %89
  %sub197 = sub nsw i32 %add196, 8
  br label %cond.end.198

cond.end.198:                                     ; preds = %cond.false.195, %cond.true.193
  %cond199 = phi i32 [ %add194, %cond.true.193 ], [ %sub197, %cond.false.195 ]
  %call200 = call %struct.rtx_def* @gen_rtx_REG(i32 16, i32 %cond199)
  %90 = load i32, i32* %i, align 4
  %mul201 = mul nsw i32 %90, 8
  %conv202 = sext i32 %mul201 to i64
  %call203 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv202)
  %call204 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 0, %struct.rtx_def* %call200, %struct.rtx_def* %call203)
  %91 = load i32, i32* %nexps, align 4
  %inc205 = add nsw i32 %91, 1
  store i32 %inc205, i32* %nexps, align 4
  %idxprom206 = sext i32 %91 to i64
  %arrayidx207 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %exp, i32 0, i64 %idxprom206
  store %struct.rtx_def* %call204, %struct.rtx_def** %arrayidx207, align 8
  %92 = load i32, i32* %sse_regno.addr, align 4
  %inc208 = add nsw i32 %92, 1
  store i32 %inc208, i32* %sse_regno.addr, align 4
  br label %sw.epilog

sw.bb.209:                                        ; preds = %for.body.137
  %93 = load i32, i32* %i, align 4
  %94 = load i32, i32* %n, align 4
  %sub210 = sub nsw i32 %94, 1
  %cmp211 = icmp slt i32 %93, %sub210
  br i1 %cmp211, label %land.lhs.true.213, label %if.else.221

land.lhs.true.213:                                ; preds = %sw.bb.209
  %95 = load i32, i32* %i, align 4
  %add214 = add nsw i32 %95, 1
  %idxprom215 = sext i32 %add214 to i64
  %arrayidx216 = getelementptr inbounds [4 x i32], [4 x i32]* %class, i32 0, i64 %idxprom215
  %96 = load i32, i32* %arrayidx216, align 4
  %cmp217 = icmp eq i32 %96, 6
  br i1 %cmp217, label %if.then.219, label %if.else.221

if.then.219:                                      ; preds = %land.lhs.true.213
  store i32 6, i32* %tmpmode, align 4
  %97 = load i32, i32* %i, align 4
  %inc220 = add nsw i32 %97, 1
  store i32 %inc220, i32* %i, align 4
  br label %if.end.222

if.else.221:                                      ; preds = %land.lhs.true.213, %sw.bb.209
  store i32 5, i32* %tmpmode, align 4
  br label %if.end.222

if.end.222:                                       ; preds = %if.else.221, %if.then.219
  %98 = load i32, i32* %tmpmode, align 4
  %99 = load i32, i32* %sse_regno.addr, align 4
  %cmp223 = icmp slt i32 %99, 8
  br i1 %cmp223, label %cond.true.225, label %cond.false.227

cond.true.225:                                    ; preds = %if.end.222
  %100 = load i32, i32* %sse_regno.addr, align 4
  %add226 = add nsw i32 21, %100
  br label %cond.end.230

cond.false.227:                                   ; preds = %if.end.222
  %101 = load i32, i32* %sse_regno.addr, align 4
  %add228 = add nsw i32 45, %101
  %sub229 = sub nsw i32 %add228, 8
  br label %cond.end.230

cond.end.230:                                     ; preds = %cond.false.227, %cond.true.225
  %cond231 = phi i32 [ %add226, %cond.true.225 ], [ %sub229, %cond.false.227 ]
  %call232 = call %struct.rtx_def* @gen_rtx_REG(i32 %98, i32 %cond231)
  %102 = load i32, i32* %i, align 4
  %mul233 = mul nsw i32 %102, 8
  %conv234 = sext i32 %mul233 to i64
  %call235 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv234)
  %call236 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 0, %struct.rtx_def* %call232, %struct.rtx_def* %call235)
  %103 = load i32, i32* %nexps, align 4
  %inc237 = add nsw i32 %103, 1
  store i32 %inc237, i32* %nexps, align 4
  %idxprom238 = sext i32 %103 to i64
  %arrayidx239 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %exp, i32 0, i64 %idxprom238
  store %struct.rtx_def* %call236, %struct.rtx_def** %arrayidx239, align 8
  %104 = load i32, i32* %sse_regno.addr, align 4
  %inc240 = add nsw i32 %104, 1
  store i32 %inc240, i32* %sse_regno.addr, align 4
  br label %sw.epilog

sw.default.241:                                   ; preds = %for.body.137
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 2086, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__FUNCTION__.construct_container, i32 0, i32 0)) #7
  unreachable

sw.epilog:                                        ; preds = %cond.end.230, %cond.end.198, %cond.end.179, %if.end.162, %sw.bb.140
  br label %for.inc.242

for.inc.242:                                      ; preds = %sw.epilog
  %105 = load i32, i32* %i, align 4
  %inc243 = add nsw i32 %105, 1
  store i32 %inc243, i32* %i, align 4
  br label %for.cond.134

for.end.244:                                      ; preds = %for.cond.134
  %106 = load i32, i32* %mode.addr, align 4
  %107 = load i32, i32* %nexps, align 4
  %call245 = call %struct.rtvec_def* @rtvec_alloc(i32 %107)
  %call246 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 %106, %struct.rtvec_def* %call245)
  store %struct.rtx_def* %call246, %struct.rtx_def** %ret, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond.247

for.cond.247:                                     ; preds = %for.inc.256, %for.end.244
  %108 = load i32, i32* %i, align 4
  %109 = load i32, i32* %nexps, align 4
  %cmp248 = icmp slt i32 %108, %109
  br i1 %cmp248, label %for.body.250, label %for.end.258

for.body.250:                                     ; preds = %for.cond.247
  %110 = load i32, i32* %i, align 4
  %idxprom251 = sext i32 %110 to i64
  %arrayidx252 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %exp, i32 0, i64 %idxprom251
  %111 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx252, align 8
  %112 = load i32, i32* %i, align 4
  %idxprom253 = sext i32 %112 to i64
  %113 = load %struct.rtx_def*, %struct.rtx_def** %ret, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %113, i32 0, i32 1
  %arrayidx254 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtvec = bitcast %union.rtunion_def* %arrayidx254 to %struct.rtvec_def**
  %114 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec, align 8
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %114, i32 0, i32 1
  %arrayidx255 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i32 0, i64 %idxprom253
  store %struct.rtx_def* %111, %struct.rtx_def** %arrayidx255, align 8
  br label %for.inc.256

for.inc.256:                                      ; preds = %for.body.250
  %115 = load i32, i32* %i, align 4
  %inc257 = add nsw i32 %115, 1
  store i32 %inc257, i32* %i, align 4
  br label %for.cond.247

for.end.258:                                      ; preds = %for.cond.247
  %116 = load %struct.rtx_def*, %struct.rtx_def** %ret, align 8
  store %struct.rtx_def* %116, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %for.end.258, %if.then.131, %if.then.109, %if.then.84, %cond.end.70, %sw.bb.50, %sw.bb.48, %cond.end.45, %sw.bb, %if.then.29, %if.then.23, %if.then.19
  %117 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %117
}

declare %struct.rtx_def* @gen_rtx_REG(i32, i32) #0

; Function Attrs: nounwind uwtable
define i32 @ix86_function_arg_boundary(i32 %mode, %union.tree_node* %type) #1 {
entry:
  %retval = alloca i32, align 4
  %mode.addr = alloca i32, align 4
  %type.addr = alloca %union.tree_node*, align 8
  %align = alloca i32, align 4
  store i32 %mode, i32* %mode.addr, align 4
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  %0 = load i32, i32* @target_flags, align 4
  %and = and i32 %0, 33554432
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @target_flags, align 4
  %and1 = and i32 %1, 33554432
  %tobool2 = icmp ne i32 %and1, 0
  %cond = select i1 %tobool2, i32 64, i32 32
  store i32 %cond, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %tobool3 = icmp ne %union.tree_node* %2, null
  br i1 %tobool3, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %if.end
  %3 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type5 = bitcast %union.tree_node* %3 to %struct.tree_type*
  %align6 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type5, i32 0, i32 7
  %4 = load i32, i32* %align6, align 4
  store i32 %4, i32* %align, align 4
  br label %if.end.7

if.else:                                          ; preds = %if.end
  %5 = load i32, i32* %mode.addr, align 4
  %call = call i32 @get_mode_alignment(i32 %5)
  store i32 %call, i32* %align, align 4
  br label %if.end.7

if.end.7:                                         ; preds = %if.else, %if.then.4
  %6 = load i32, i32* %align, align 4
  %7 = load i32, i32* @target_flags, align 4
  %and8 = and i32 %7, 33554432
  %tobool9 = icmp ne i32 %and8, 0
  %cond10 = select i1 %tobool9, i32 64, i32 32
  %cmp = icmp slt i32 %6, %cond10
  br i1 %cmp, label %if.then.11, label %if.end.15

if.then.11:                                       ; preds = %if.end.7
  %8 = load i32, i32* @target_flags, align 4
  %and12 = and i32 %8, 33554432
  %tobool13 = icmp ne i32 %and12, 0
  %cond14 = select i1 %tobool13, i32 64, i32 32
  store i32 %cond14, i32* %align, align 4
  br label %if.end.15

if.end.15:                                        ; preds = %if.then.11, %if.end.7
  %9 = load i32, i32* %align, align 4
  %cmp16 = icmp sgt i32 %9, 128
  br i1 %cmp16, label %if.then.17, label %if.end.18

if.then.17:                                       ; preds = %if.end.15
  store i32 128, i32* %align, align 4
  br label %if.end.18

if.end.18:                                        ; preds = %if.then.17, %if.end.15
  %10 = load i32, i32* %align, align 4
  store i32 %10, i32* %retval
  br label %return

return:                                           ; preds = %if.end.18, %if.then
  %11 = load i32, i32* %retval
  ret i32 %11
}

declare i32 @get_mode_alignment(i32) #0

; Function Attrs: nounwind uwtable
define zeroext i1 @ix86_function_value_regno_p(i32 %regno) #1 {
entry:
  %retval = alloca i1, align 1
  %regno.addr = alloca i32, align 4
  store i32 %regno, i32* %regno.addr, align 4
  %0 = load i32, i32* @target_flags, align 4
  %and = and i32 %0, 33554432
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %regno.addr, align 4
  %cmp = icmp eq i32 %1, 0
  br i1 %cmp, label %lor.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then
  %2 = load i32, i32* %regno.addr, align 4
  %cmp1 = icmp eq i32 %2, 8
  br i1 %cmp1, label %land.lhs.true, label %lor.rhs

land.lhs.true:                                    ; preds = %lor.lhs.false
  %3 = load i32, i32* @target_flags, align 4
  %and2 = and i32 %3, 32
  %tobool3 = icmp ne i32 %and2, 0
  br i1 %tobool3, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.lhs.true, %lor.lhs.false
  %4 = load i32, i32* %regno.addr, align 4
  %cmp4 = icmp eq i32 %4, 21
  br i1 %cmp4, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %lor.rhs
  %5 = load i32, i32* @target_flags, align 4
  %and5 = and i32 %5, 327680
  %cmp6 = icmp ne i32 %and5, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %6 = phi i1 [ false, %lor.rhs ], [ %cmp6, %land.rhs ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %land.lhs.true, %if.then
  %7 = phi i1 [ true, %land.lhs.true ], [ true, %if.then ], [ %6, %land.end ]
  store i1 %7, i1* %retval
  br label %return

if.end:                                           ; preds = %entry
  %8 = load i32, i32* %regno.addr, align 4
  %cmp7 = icmp eq i32 %8, 0
  br i1 %cmp7, label %lor.end.21, label %lor.lhs.false.8

lor.lhs.false.8:                                  ; preds = %if.end
  %9 = load i32, i32* %regno.addr, align 4
  %cmp9 = icmp eq i32 %9, 8
  br i1 %cmp9, label %lor.end.21, label %lor.lhs.false.10

lor.lhs.false.10:                                 ; preds = %lor.lhs.false.8
  %10 = load i32, i32* %regno.addr, align 4
  %cmp11 = icmp eq i32 %10, 21
  br i1 %cmp11, label %land.lhs.true.12, label %lor.rhs.15

land.lhs.true.12:                                 ; preds = %lor.lhs.false.10
  %11 = load i32, i32* @target_flags, align 4
  %and13 = and i32 %11, 327680
  %cmp14 = icmp ne i32 %and13, 0
  br i1 %cmp14, label %lor.end.21, label %lor.rhs.15

lor.rhs.15:                                       ; preds = %land.lhs.true.12, %lor.lhs.false.10
  %12 = load i32, i32* %regno.addr, align 4
  %cmp16 = icmp eq i32 %12, 8
  br i1 %cmp16, label %land.rhs.17, label %land.end.20

land.rhs.17:                                      ; preds = %lor.rhs.15
  %13 = load i32, i32* @target_flags, align 4
  %and18 = and i32 %13, 32
  %tobool19 = icmp ne i32 %and18, 0
  br label %land.end.20

land.end.20:                                      ; preds = %land.rhs.17, %lor.rhs.15
  %14 = phi i1 [ false, %lor.rhs.15 ], [ %tobool19, %land.rhs.17 ]
  br label %lor.end.21

lor.end.21:                                       ; preds = %land.end.20, %land.lhs.true.12, %lor.lhs.false.8, %if.end
  %15 = phi i1 [ true, %land.lhs.true.12 ], [ true, %lor.lhs.false.8 ], [ true, %if.end ], [ %14, %land.end.20 ]
  store i1 %15, i1* %retval
  br label %return

return:                                           ; preds = %lor.end.21, %lor.end
  %16 = load i1, i1* %retval
  ret i1 %16
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @ix86_function_value(%union.tree_node* %valtype) #1 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %valtype.addr = alloca %union.tree_node*, align 8
  %ret = alloca %struct.rtx_def*, align 8
  store %union.tree_node* %valtype, %union.tree_node** %valtype.addr, align 8
  %0 = load i32, i32* @target_flags, align 4
  %and = and i32 %0, 33554432
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %valtype.addr, align 8
  %type = bitcast %union.tree_node* %1 to %struct.tree_type*
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type, i32 0, i32 6
  %bf.load = load i32, i32* %mode, align 4
  %bf.lshr = lshr i32 %bf.load, 9
  %bf.clear = and i32 %bf.lshr, 127
  %2 = load %union.tree_node*, %union.tree_node** %valtype.addr, align 8
  %3 = load i32, i32* @target_flags, align 4
  %and1 = and i32 %3, 33554432
  %tobool2 = icmp ne i32 %and1, 0
  %cond = select i1 %tobool2, i32 6, i32 3
  %4 = load i32, i32* @target_flags, align 4
  %and3 = and i32 %4, 33554432
  %tobool4 = icmp ne i32 %and3, 0
  %cond5 = select i1 %tobool4, i32 8, i32 0
  %call = call %struct.rtx_def* @construct_container(i32 %bf.clear, %union.tree_node* %2, i32 1, i32 %cond, i32 %cond5, i32* getelementptr inbounds ([4 x i32], [4 x i32]* @x86_64_int_return_registers, i32 0, i32 0), i32 0)
  store %struct.rtx_def* %call, %struct.rtx_def** %ret, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %ret, align 8
  %tobool6 = icmp ne %struct.rtx_def* %5, null
  br i1 %tobool6, label %if.end, label %if.then.7

if.then.7:                                        ; preds = %if.then
  %6 = load %union.tree_node*, %union.tree_node** %valtype.addr, align 8
  %type8 = bitcast %union.tree_node* %6 to %struct.tree_type*
  %mode9 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type8, i32 0, i32 6
  %bf.load10 = load i32, i32* %mode9, align 4
  %bf.lshr11 = lshr i32 %bf.load10, 9
  %bf.clear12 = and i32 %bf.lshr11, 127
  %call13 = call %struct.rtx_def* @gen_rtx_REG(i32 %bf.clear12, i32 0)
  store %struct.rtx_def* %call13, %struct.rtx_def** %ret, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.7, %if.then
  %7 = load %struct.rtx_def*, %struct.rtx_def** %ret, align 8
  store %struct.rtx_def* %7, %struct.rtx_def** %retval
  br label %return

if.else:                                          ; preds = %entry
  %8 = load %union.tree_node*, %union.tree_node** %valtype.addr, align 8
  %type14 = bitcast %union.tree_node* %8 to %struct.tree_type*
  %mode15 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type14, i32 0, i32 6
  %bf.load16 = load i32, i32* %mode15, align 4
  %bf.lshr17 = lshr i32 %bf.load16, 9
  %bf.clear18 = and i32 %bf.lshr17, 127
  %9 = load %union.tree_node*, %union.tree_node** %valtype.addr, align 8
  %type19 = bitcast %union.tree_node* %9 to %struct.tree_type*
  %mode20 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type19, i32 0, i32 6
  %bf.load21 = load i32, i32* %mode20, align 4
  %bf.lshr22 = lshr i32 %bf.load21, 9
  %bf.clear23 = and i32 %bf.lshr22, 127
  %idxprom = sext i32 %bf.clear23 to i64
  %arrayidx = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom
  %10 = load i32, i32* %arrayidx, align 4
  %cmp = icmp eq i32 %10, 2
  br i1 %cmp, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %if.else
  %11 = load i32, i32* @target_flags, align 4
  %and24 = and i32 %11, 32
  %tobool25 = icmp ne i32 %and24, 0
  br i1 %tobool25, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %if.else
  %12 = load %union.tree_node*, %union.tree_node** %valtype.addr, align 8
  %type26 = bitcast %union.tree_node* %12 to %struct.tree_type*
  %mode27 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type26, i32 0, i32 6
  %bf.load28 = load i32, i32* %mode27, align 4
  %bf.lshr29 = lshr i32 %bf.load28, 9
  %bf.clear30 = and i32 %bf.lshr29, 127
  %cmp31 = icmp eq i32 %bf.clear30, 6
  br i1 %cmp31, label %lor.end.49, label %lor.rhs

lor.rhs:                                          ; preds = %cond.false
  %13 = load %union.tree_node*, %union.tree_node** %valtype.addr, align 8
  %type32 = bitcast %union.tree_node* %13 to %struct.tree_type*
  %mode33 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type32, i32 0, i32 6
  %bf.load34 = load i32, i32* %mode33, align 4
  %bf.lshr35 = lshr i32 %bf.load34, 9
  %bf.clear36 = and i32 %bf.lshr35, 127
  %idxprom37 = sext i32 %bf.clear36 to i64
  %arrayidx38 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom37
  %14 = load i32, i32* %arrayidx38, align 4
  %cmp39 = icmp eq i32 %14, 7
  br i1 %cmp39, label %lor.end, label %lor.rhs.40

lor.rhs.40:                                       ; preds = %lor.rhs
  %15 = load %union.tree_node*, %union.tree_node** %valtype.addr, align 8
  %type41 = bitcast %union.tree_node* %15 to %struct.tree_type*
  %mode42 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type41, i32 0, i32 6
  %bf.load43 = load i32, i32* %mode42, align 4
  %bf.lshr44 = lshr i32 %bf.load43, 9
  %bf.clear45 = and i32 %bf.lshr44, 127
  %idxprom46 = sext i32 %bf.clear45 to i64
  %arrayidx47 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom46
  %16 = load i32, i32* %arrayidx47, align 4
  %cmp48 = icmp eq i32 %16, 8
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs.40, %lor.rhs
  %17 = phi i1 [ true, %lor.rhs ], [ %cmp48, %lor.rhs.40 ]
  br label %lor.end.49

lor.end.49:                                       ; preds = %lor.end, %cond.false
  %18 = phi i1 [ true, %cond.false ], [ %17, %lor.end ]
  %cond50 = select i1 %18, i32 21, i32 0
  br label %cond.end

cond.end:                                         ; preds = %lor.end.49, %cond.true
  %cond51 = phi i32 [ 8, %cond.true ], [ %cond50, %lor.end.49 ]
  %call52 = call %struct.rtx_def* @gen_rtx_REG(i32 %bf.clear18, i32 %cond51)
  store %struct.rtx_def* %call52, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %cond.end, %if.end
  %19 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %19
}

; Function Attrs: nounwind uwtable
define i32 @ix86_return_in_memory(%union.tree_node* %type) #1 {
entry:
  %retval = alloca i32, align 4
  %type.addr = alloca %union.tree_node*, align 8
  %needed_intregs = alloca i32, align 4
  %needed_sseregs = alloca i32, align 4
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  %0 = load i32, i32* @target_flags, align 4
  %and = and i32 %0, 33554432
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type1 = bitcast %union.tree_node* %1 to %struct.tree_type*
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 6
  %bf.load = load i32, i32* %mode, align 4
  %bf.lshr = lshr i32 %bf.load, 9
  %bf.clear = and i32 %bf.lshr, 127
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %call = call i32 @examine_argument(i32 %bf.clear, %union.tree_node* %2, i32 1, i32* %needed_intregs, i32* %needed_sseregs)
  %tobool2 = icmp ne i32 %call, 0
  %lnot = xor i1 %tobool2, true
  %lnot.ext = zext i1 %lnot to i32
  store i32 %lnot.ext, i32* %retval
  br label %return

if.else:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type3 = bitcast %union.tree_node* %3 to %struct.tree_type*
  %mode4 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type3, i32 0, i32 6
  %bf.load5 = load i32, i32* %mode4, align 4
  %bf.lshr6 = lshr i32 %bf.load5, 9
  %bf.clear7 = and i32 %bf.lshr6, 127
  %cmp = icmp eq i32 %bf.clear7, 51
  br i1 %cmp, label %if.then.60, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %4 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type8 = bitcast %union.tree_node* %4 to %struct.tree_type*
  %mode9 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type8, i32 0, i32 6
  %bf.load10 = load i32, i32* %mode9, align 4
  %bf.lshr11 = lshr i32 %bf.load10, 9
  %bf.clear12 = and i32 %bf.lshr11, 127
  %idxprom = sext i32 %bf.clear12 to i64
  %arrayidx = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom
  %5 = load i32, i32* %arrayidx, align 4
  %cmp13 = icmp eq i32 %5, 7
  br i1 %cmp13, label %land.lhs.true, label %lor.lhs.false.14

lor.lhs.false.14:                                 ; preds = %lor.lhs.false
  %6 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type15 = bitcast %union.tree_node* %6 to %struct.tree_type*
  %mode16 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type15, i32 0, i32 6
  %bf.load17 = load i32, i32* %mode16, align 4
  %bf.lshr18 = lshr i32 %bf.load17, 9
  %bf.clear19 = and i32 %bf.lshr18, 127
  %idxprom20 = sext i32 %bf.clear19 to i64
  %arrayidx21 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom20
  %7 = load i32, i32* %arrayidx21, align 4
  %cmp22 = icmp eq i32 %7, 8
  br i1 %cmp22, label %land.lhs.true, label %lor.lhs.false.25

land.lhs.true:                                    ; preds = %lor.lhs.false.14, %lor.lhs.false
  %8 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %call23 = call i64 @int_size_in_bytes(%union.tree_node* %8)
  %cmp24 = icmp eq i64 %call23, 8
  br i1 %cmp24, label %if.then.60, label %lor.lhs.false.25

lor.lhs.false.25:                                 ; preds = %land.lhs.true, %lor.lhs.false.14
  %9 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %call26 = call i64 @int_size_in_bytes(%union.tree_node* %9)
  %cmp27 = icmp sgt i64 %call26, 12
  br i1 %cmp27, label %land.lhs.true.28, label %if.end

land.lhs.true.28:                                 ; preds = %lor.lhs.false.25
  %10 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type29 = bitcast %union.tree_node* %10 to %struct.tree_type*
  %mode30 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type29, i32 0, i32 6
  %bf.load31 = load i32, i32* %mode30, align 4
  %bf.lshr32 = lshr i32 %bf.load31, 9
  %bf.clear33 = and i32 %bf.lshr32, 127
  %cmp34 = icmp ne i32 %bf.clear33, 6
  br i1 %cmp34, label %land.lhs.true.35, label %if.end

land.lhs.true.35:                                 ; preds = %land.lhs.true.28
  %11 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type36 = bitcast %union.tree_node* %11 to %struct.tree_type*
  %mode37 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type36, i32 0, i32 6
  %bf.load38 = load i32, i32* %mode37, align 4
  %bf.lshr39 = lshr i32 %bf.load38, 9
  %bf.clear40 = and i32 %bf.lshr39, 127
  %cmp41 = icmp ne i32 %bf.clear40, 18
  br i1 %cmp41, label %land.lhs.true.42, label %if.end

land.lhs.true.42:                                 ; preds = %land.lhs.true.35
  %12 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type43 = bitcast %union.tree_node* %12 to %struct.tree_type*
  %mode44 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type43, i32 0, i32 6
  %bf.load45 = load i32, i32* %mode44, align 4
  %bf.lshr46 = lshr i32 %bf.load45, 9
  %bf.clear47 = and i32 %bf.lshr46, 127
  %idxprom48 = sext i32 %bf.clear47 to i64
  %arrayidx49 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom48
  %13 = load i32, i32* %arrayidx49, align 4
  %cmp50 = icmp eq i32 %13, 7
  br i1 %cmp50, label %if.end, label %lor.lhs.false.51

lor.lhs.false.51:                                 ; preds = %land.lhs.true.42
  %14 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type52 = bitcast %union.tree_node* %14 to %struct.tree_type*
  %mode53 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type52, i32 0, i32 6
  %bf.load54 = load i32, i32* %mode53, align 4
  %bf.lshr55 = lshr i32 %bf.load54, 9
  %bf.clear56 = and i32 %bf.lshr55, 127
  %idxprom57 = sext i32 %bf.clear56 to i64
  %arrayidx58 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom57
  %15 = load i32, i32* %arrayidx58, align 4
  %cmp59 = icmp eq i32 %15, 8
  br i1 %cmp59, label %if.end, label %if.then.60

if.then.60:                                       ; preds = %lor.lhs.false.51, %land.lhs.true, %if.else
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false.51, %land.lhs.true.42, %land.lhs.true.35, %land.lhs.true.28, %lor.lhs.false.25
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then.60, %if.then
  %16 = load i32, i32* %retval
  ret i32 %16
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @ix86_libcall_value(i32 %mode) #1 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  store i32 %mode, i32* %mode.addr, align 4
  %0 = load i32, i32* @target_flags, align 4
  %and = and i32 %0, 33554432
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %mode.addr, align 4
  switch i32 %1, label %sw.default [
    i32 15, label %sw.bb
    i32 21, label %sw.bb
    i32 16, label %sw.bb
    i32 22, label %sw.bb
    i32 18, label %sw.bb.1
    i32 24, label %sw.bb.1
  ]

sw.bb:                                            ; preds = %if.then, %if.then, %if.then, %if.then
  %2 = load i32, i32* %mode.addr, align 4
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 %2, i32 21)
  store %struct.rtx_def* %call, %struct.rtx_def** %retval
  br label %return

sw.bb.1:                                          ; preds = %if.then, %if.then
  %3 = load i32, i32* %mode.addr, align 4
  %call2 = call %struct.rtx_def* @gen_rtx_REG(i32 %3, i32 8)
  store %struct.rtx_def* %call2, %struct.rtx_def** %retval
  br label %return

sw.default:                                       ; preds = %if.then
  %4 = load i32, i32* %mode.addr, align 4
  %call3 = call %struct.rtx_def* @gen_rtx_REG(i32 %4, i32 0)
  store %struct.rtx_def* %call3, %struct.rtx_def** %retval
  br label %return

if.else:                                          ; preds = %entry
  %5 = load i32, i32* %mode.addr, align 4
  %6 = load i32, i32* %mode.addr, align 4
  %idxprom = sext i32 %6 to i64
  %arrayidx = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom
  %7 = load i32, i32* %arrayidx, align 4
  %cmp = icmp eq i32 %7, 2
  br i1 %cmp, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %if.else
  %8 = load i32, i32* @target_flags, align 4
  %and4 = and i32 %8, 32
  %tobool5 = icmp ne i32 %and4, 0
  br i1 %tobool5, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %if.else
  %9 = load i32, i32* %mode.addr, align 4
  %cmp6 = icmp eq i32 %9, 6
  br i1 %cmp6, label %lor.end.14, label %lor.rhs

lor.rhs:                                          ; preds = %cond.false
  %10 = load i32, i32* %mode.addr, align 4
  %idxprom7 = sext i32 %10 to i64
  %arrayidx8 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom7
  %11 = load i32, i32* %arrayidx8, align 4
  %cmp9 = icmp eq i32 %11, 7
  br i1 %cmp9, label %lor.end, label %lor.rhs.10

lor.rhs.10:                                       ; preds = %lor.rhs
  %12 = load i32, i32* %mode.addr, align 4
  %idxprom11 = sext i32 %12 to i64
  %arrayidx12 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom11
  %13 = load i32, i32* %arrayidx12, align 4
  %cmp13 = icmp eq i32 %13, 8
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs.10, %lor.rhs
  %14 = phi i1 [ true, %lor.rhs ], [ %cmp13, %lor.rhs.10 ]
  br label %lor.end.14

lor.end.14:                                       ; preds = %lor.end, %cond.false
  %15 = phi i1 [ true, %cond.false ], [ %14, %lor.end ]
  %cond = select i1 %15, i32 21, i32 0
  br label %cond.end

cond.end:                                         ; preds = %lor.end.14, %cond.true
  %cond15 = phi i32 [ 8, %cond.true ], [ %cond, %lor.end.14 ]
  %call16 = call %struct.rtx_def* @gen_rtx_REG(i32 %5, i32 %cond15)
  store %struct.rtx_def* %call16, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %cond.end, %sw.default, %sw.bb.1, %sw.bb
  %16 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %16
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @ix86_build_va_list() #1 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %f_gpr = alloca %union.tree_node*, align 8
  %f_fpr = alloca %union.tree_node*, align 8
  %f_ovf = alloca %union.tree_node*, align 8
  %f_sav = alloca %union.tree_node*, align 8
  %record = alloca %union.tree_node*, align 8
  %type_decl = alloca %union.tree_node*, align 8
  %0 = load i32, i32* @target_flags, align 4
  %and = and i32 %0, 33554432
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i32 0, i64 0), align 8
  %call = call %union.tree_node* @build_pointer_type(%union.tree_node* %1)
  store %union.tree_node* %call, %union.tree_node** %retval
  br label %return

if.end:                                           ; preds = %entry
  %call1 = call %union.tree_node* @make_lang_type(i32 20)
  store %union.tree_node* %call1, %union.tree_node** %record, align 8
  %call2 = call %union.tree_node* @get_identifier(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.70, i32 0, i32 0))
  %2 = load %union.tree_node*, %union.tree_node** %record, align 8
  %call3 = call %union.tree_node* @build_decl(i32 33, %union.tree_node* %call2, %union.tree_node* %2)
  store %union.tree_node* %call3, %union.tree_node** %type_decl, align 8
  %call4 = call %union.tree_node* @get_identifier(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.71, i32 0, i32 0))
  %3 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i32 0, i64 6), align 8
  %call5 = call %union.tree_node* @build_decl(i32 37, %union.tree_node* %call4, %union.tree_node* %3)
  store %union.tree_node* %call5, %union.tree_node** %f_gpr, align 8
  %call6 = call %union.tree_node* @get_identifier(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.72, i32 0, i32 0))
  %4 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i32 0, i64 6), align 8
  %call7 = call %union.tree_node* @build_decl(i32 37, %union.tree_node* %call6, %union.tree_node* %4)
  store %union.tree_node* %call7, %union.tree_node** %f_fpr, align 8
  %call8 = call %union.tree_node* @get_identifier(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.73, i32 0, i32 0))
  %5 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 28), align 8
  %call9 = call %union.tree_node* @build_decl(i32 37, %union.tree_node* %call8, %union.tree_node* %5)
  store %union.tree_node* %call9, %union.tree_node** %f_ovf, align 8
  %call10 = call %union.tree_node* @get_identifier(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.74, i32 0, i32 0))
  %6 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 28), align 8
  %call11 = call %union.tree_node* @build_decl(i32 37, %union.tree_node* %call10, %union.tree_node* %6)
  store %union.tree_node* %call11, %union.tree_node** %f_sav, align 8
  %7 = load %union.tree_node*, %union.tree_node** %record, align 8
  %8 = load %union.tree_node*, %union.tree_node** %f_gpr, align 8
  %decl = bitcast %union.tree_node* %8 to %struct.tree_decl*
  %context = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl, i32 0, i32 9
  store %union.tree_node* %7, %union.tree_node** %context, align 8
  %9 = load %union.tree_node*, %union.tree_node** %record, align 8
  %10 = load %union.tree_node*, %union.tree_node** %f_fpr, align 8
  %decl12 = bitcast %union.tree_node* %10 to %struct.tree_decl*
  %context13 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl12, i32 0, i32 9
  store %union.tree_node* %9, %union.tree_node** %context13, align 8
  %11 = load %union.tree_node*, %union.tree_node** %record, align 8
  %12 = load %union.tree_node*, %union.tree_node** %f_ovf, align 8
  %decl14 = bitcast %union.tree_node* %12 to %struct.tree_decl*
  %context15 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl14, i32 0, i32 9
  store %union.tree_node* %11, %union.tree_node** %context15, align 8
  %13 = load %union.tree_node*, %union.tree_node** %record, align 8
  %14 = load %union.tree_node*, %union.tree_node** %f_sav, align 8
  %decl16 = bitcast %union.tree_node* %14 to %struct.tree_decl*
  %context17 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl16, i32 0, i32 9
  store %union.tree_node* %13, %union.tree_node** %context17, align 8
  %15 = load %union.tree_node*, %union.tree_node** %type_decl, align 8
  %16 = load %union.tree_node*, %union.tree_node** %record, align 8
  %common = bitcast %union.tree_node* %16 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 0
  store %union.tree_node* %15, %union.tree_node** %chain, align 8
  %17 = load %union.tree_node*, %union.tree_node** %type_decl, align 8
  %18 = load %union.tree_node*, %union.tree_node** %record, align 8
  %type = bitcast %union.tree_node* %18 to %struct.tree_type*
  %name = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type, i32 0, i32 11
  store %union.tree_node* %17, %union.tree_node** %name, align 8
  %19 = load %union.tree_node*, %union.tree_node** %f_gpr, align 8
  %20 = load %union.tree_node*, %union.tree_node** %record, align 8
  %type18 = bitcast %union.tree_node* %20 to %struct.tree_type*
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type18, i32 0, i32 1
  store %union.tree_node* %19, %union.tree_node** %values, align 8
  %21 = load %union.tree_node*, %union.tree_node** %f_fpr, align 8
  %22 = load %union.tree_node*, %union.tree_node** %f_gpr, align 8
  %common19 = bitcast %union.tree_node* %22 to %struct.tree_common*
  %chain20 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common19, i32 0, i32 0
  store %union.tree_node* %21, %union.tree_node** %chain20, align 8
  %23 = load %union.tree_node*, %union.tree_node** %f_ovf, align 8
  %24 = load %union.tree_node*, %union.tree_node** %f_fpr, align 8
  %common21 = bitcast %union.tree_node* %24 to %struct.tree_common*
  %chain22 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common21, i32 0, i32 0
  store %union.tree_node* %23, %union.tree_node** %chain22, align 8
  %25 = load %union.tree_node*, %union.tree_node** %f_sav, align 8
  %26 = load %union.tree_node*, %union.tree_node** %f_ovf, align 8
  %common23 = bitcast %union.tree_node* %26 to %struct.tree_common*
  %chain24 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common23, i32 0, i32 0
  store %union.tree_node* %25, %union.tree_node** %chain24, align 8
  %27 = load %union.tree_node*, %union.tree_node** %record, align 8
  call void @layout_type(%union.tree_node* %27)
  %28 = load %union.tree_node*, %union.tree_node** %record, align 8
  %29 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 15), align 8
  %call25 = call %union.tree_node* @build_index_type(%union.tree_node* %29)
  %call26 = call %union.tree_node* @build_array_type(%union.tree_node* %28, %union.tree_node* %call25)
  store %union.tree_node* %call26, %union.tree_node** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %30 = load %union.tree_node*, %union.tree_node** %retval
  ret %union.tree_node* %30
}

declare %union.tree_node* @build_pointer_type(%union.tree_node*) #0

declare %union.tree_node* @make_lang_type(i32) #0

declare %union.tree_node* @build_decl(i32, %union.tree_node*, %union.tree_node*) #0

declare %union.tree_node* @get_identifier(i8*) #0

declare void @layout_type(%union.tree_node*) #0

declare %union.tree_node* @build_array_type(%union.tree_node*, %union.tree_node*) #0

declare %union.tree_node* @build_index_type(%union.tree_node*) #0

; Function Attrs: nounwind uwtable
define void @ix86_setup_incoming_varargs(%struct.ix86_args* %cum, i32 %mode, %union.tree_node* %type, i32* %pretend_size, i32 %no_rtl) #1 {
entry:
  %cum.addr = alloca %struct.ix86_args*, align 8
  %mode.addr = alloca i32, align 4
  %type.addr = alloca %union.tree_node*, align 8
  %pretend_size.addr = alloca i32*, align 8
  %no_rtl.addr = alloca i32, align 4
  %next_cum = alloca %struct.ix86_args, align 4
  %save_area = alloca %struct.rtx_def*, align 8
  %mem = alloca %struct.rtx_def*, align 8
  %label = alloca %struct.rtx_def*, align 8
  %label_ref = alloca %struct.rtx_def*, align 8
  %tmp_reg = alloca %struct.rtx_def*, align 8
  %nsse_reg = alloca %struct.rtx_def*, align 8
  %set = alloca i32, align 4
  %fntype = alloca %union.tree_node*, align 8
  %stdarg_p = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.ix86_args* %cum, %struct.ix86_args** %cum.addr, align 8
  store i32 %mode, i32* %mode.addr, align 4
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  store i32* %pretend_size, i32** %pretend_size.addr, align 8
  store i32 %no_rtl, i32* %no_rtl.addr, align 4
  store %struct.rtx_def* null, %struct.rtx_def** %save_area, align 8
  %0 = load i32, i32* @target_flags, align 4
  %and = and i32 %0, 33554432
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %if.end.90

if.end:                                           ; preds = %entry
  %1 = load %struct.function*, %struct.function** @cfun, align 8
  %machine = getelementptr inbounds %struct.function, %struct.function* %1, i32 0, i32 51
  %2 = load %struct.machine_function*, %struct.machine_function** %machine, align 8
  %save_varrargs_registers = getelementptr inbounds %struct.machine_function, %struct.machine_function* %2, i32 0, i32 1
  store i32 1, i32* %save_varrargs_registers, align 4
  %3 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %common = bitcast %union.tree_node* %3 to %struct.tree_common*
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1
  %4 = load %union.tree_node*, %union.tree_node** %type1, align 8
  store %union.tree_node* %4, %union.tree_node** %fntype, align 8
  %5 = load %union.tree_node*, %union.tree_node** %fntype, align 8
  %type2 = bitcast %union.tree_node* %5 to %struct.tree_type*
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type2, i32 0, i32 1
  %6 = load %union.tree_node*, %union.tree_node** %values, align 8
  %cmp = icmp ne %union.tree_node* %6, null
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.end
  %7 = load %union.tree_node*, %union.tree_node** %fntype, align 8
  %type3 = bitcast %union.tree_node* %7 to %struct.tree_type*
  %values4 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type3, i32 0, i32 1
  %8 = load %union.tree_node*, %union.tree_node** %values4, align 8
  %call = call %union.tree_node* @tree_last(%union.tree_node* %8)
  %list = bitcast %union.tree_node* %call to %struct.tree_list*
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2
  %9 = load %union.tree_node*, %union.tree_node** %value, align 8
  %10 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 27), align 8
  %cmp5 = icmp ne %union.tree_node* %9, %10
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end
  %11 = phi i1 [ false, %if.end ], [ %cmp5, %land.rhs ]
  %land.ext = zext i1 %11 to i32
  store i32 %land.ext, i32* %stdarg_p, align 4
  %12 = load %struct.ix86_args*, %struct.ix86_args** %cum.addr, align 8
  %13 = bitcast %struct.ix86_args* %next_cum to i8*
  %14 = bitcast %struct.ix86_args* %12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %13, i8* %14, i64 28, i32 4, i1 false)
  %15 = load i32, i32* %stdarg_p, align 4
  %tobool6 = icmp ne i32 %15, 0
  br i1 %tobool6, label %if.then.7, label %if.end.8

if.then.7:                                        ; preds = %land.end
  %16 = load i32, i32* %mode.addr, align 4
  %17 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  call void @function_arg_advance(%struct.ix86_args* %next_cum, i32 %16, %union.tree_node* %17, i32 1)
  br label %if.end.8

if.end.8:                                         ; preds = %if.then.7, %land.end
  %18 = load i32, i32* %no_rtl.addr, align 4
  %tobool9 = icmp ne i32 %18, 0
  br i1 %tobool9, label %if.end.11, label %if.then.10

if.then.10:                                       ; preds = %if.end.8
  %19 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 3), align 8
  store %struct.rtx_def* %19, %struct.rtx_def** %save_area, align 8
  br label %if.end.11

if.end.11:                                        ; preds = %if.then.10, %if.end.8
  %call12 = call i64 @get_varargs_alias_set()
  %conv = trunc i64 %call12 to i32
  store i32 %conv, i32* %set, align 4
  %regno = getelementptr inbounds %struct.ix86_args, %struct.ix86_args* %next_cum, i32 0, i32 2
  %20 = load i32, i32* %regno, align 4
  store i32 %20, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.11
  %21 = load i32, i32* %i, align 4
  %22 = load i32, i32* @ix86_regparm, align 4
  %cmp13 = icmp slt i32 %21, %22
  br i1 %cmp13, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %23 = load i32, i32* @target_flags, align 4
  %and15 = and i32 %23, 33554432
  %tobool16 = icmp ne i32 %and15, 0
  %cond = select i1 %tobool16, i32 5, i32 4
  %24 = load %struct.rtx_def*, %struct.rtx_def** %save_area, align 8
  %25 = load i32, i32* %i, align 4
  %26 = load i32, i32* @target_flags, align 4
  %and17 = and i32 %26, 33554432
  %tobool18 = icmp ne i32 %and17, 0
  %cond19 = select i1 %tobool18, i32 8, i32 4
  %mul = mul nsw i32 %25, %cond19
  %conv20 = sext i32 %mul to i64
  %call21 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %24, i64 %conv20)
  %call22 = call %struct.rtx_def* @gen_rtx_MEM(i32 %cond, %struct.rtx_def* %call21)
  store %struct.rtx_def* %call22, %struct.rtx_def** %mem, align 8
  %27 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8
  %28 = load i32, i32* %set, align 4
  %conv23 = sext i32 %28 to i64
  call void @set_mem_alias_set(%struct.rtx_def* %27, i64 %conv23)
  %29 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8
  %30 = load i32, i32* @target_flags, align 4
  %and24 = and i32 %30, 33554432
  %tobool25 = icmp ne i32 %and24, 0
  %cond26 = select i1 %tobool25, i32 5, i32 4
  %31 = load i32, i32* %i, align 4
  %idxprom = sext i32 %31 to i64
  %arrayidx = getelementptr inbounds [6 x i32], [6 x i32]* @x86_64_int_parameter_registers, i32 0, i64 %idxprom
  %32 = load i32, i32* %arrayidx, align 4
  %call27 = call %struct.rtx_def* @gen_rtx_REG(i32 %cond26, i32 %32)
  %call28 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %29, %struct.rtx_def* %call27)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %33 = load i32, i32* %i, align 4
  %inc = add nsw i32 %33, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %sse_nregs = getelementptr inbounds %struct.ix86_args, %struct.ix86_args* %next_cum, i32 0, i32 4
  %34 = load i32, i32* %sse_nregs, align 4
  %tobool29 = icmp ne i32 %34, 0
  br i1 %tobool29, label %if.then.30, label %if.end.90

if.then.30:                                       ; preds = %for.end
  %call31 = call %struct.rtx_def* @gen_label_rtx()
  store %struct.rtx_def* %call31, %struct.rtx_def** %label, align 8
  %35 = load i32, i32* @target_flags, align 4
  %and32 = and i32 %35, 33554432
  %tobool33 = icmp ne i32 %and32, 0
  %cond34 = select i1 %tobool33, i32 5, i32 4
  %36 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  %call35 = call %struct.rtx_def* @gen_rtx_fmt_u00(i32 67, i32 %cond34, %struct.rtx_def* %36)
  store %struct.rtx_def* %call35, %struct.rtx_def** %label_ref, align 8
  %37 = load i32, i32* @target_flags, align 4
  %and36 = and i32 %37, 33554432
  %tobool37 = icmp ne i32 %and36, 0
  %cond38 = select i1 %tobool37, i32 5, i32 4
  %call39 = call %struct.rtx_def* @gen_reg_rtx(i32 %cond38)
  store %struct.rtx_def* %call39, %struct.rtx_def** %tmp_reg, align 8
  %38 = load i32, i32* @target_flags, align 4
  %and40 = and i32 %38, 33554432
  %tobool41 = icmp ne i32 %and40, 0
  %cond42 = select i1 %tobool41, i32 5, i32 4
  %call43 = call %struct.rtx_def* @gen_reg_rtx(i32 %cond42)
  store %struct.rtx_def* %call43, %struct.rtx_def** %nsse_reg, align 8
  %39 = load %struct.rtx_def*, %struct.rtx_def** %nsse_reg, align 8
  %call44 = call %struct.rtx_def* @gen_rtx_REG(i32 2, i32 0)
  %call45 = call %struct.rtx_def* @gen_zero_extendqidi2(%struct.rtx_def* %39, %struct.rtx_def* %call44)
  %call46 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call45)
  %40 = load %struct.rtx_def*, %struct.rtx_def** %tmp_reg, align 8
  %41 = load i32, i32* @target_flags, align 4
  %and47 = and i32 %41, 33554432
  %tobool48 = icmp ne i32 %and47, 0
  %cond49 = select i1 %tobool48, i32 5, i32 4
  %42 = load %struct.rtx_def*, %struct.rtx_def** %nsse_reg, align 8
  %call50 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 4)
  %call51 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 78, i32 %cond49, %struct.rtx_def* %42, %struct.rtx_def* %call50)
  %call52 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %40, %struct.rtx_def* %call51)
  %call53 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call52)
  %sse_regno = getelementptr inbounds %struct.ix86_args, %struct.ix86_args* %next_cum, i32 0, i32 5
  %43 = load i32, i32* %sse_regno, align 4
  %tobool54 = icmp ne i32 %43, 0
  br i1 %tobool54, label %if.then.55, label %if.else

if.then.55:                                       ; preds = %if.then.30
  %44 = load %struct.rtx_def*, %struct.rtx_def** %nsse_reg, align 8
  %45 = load %struct.rtx_def*, %struct.rtx_def** %label_ref, align 8
  %sse_regno56 = getelementptr inbounds %struct.ix86_args, %struct.ix86_args* %next_cum, i32 0, i32 5
  %46 = load i32, i32* %sse_regno56, align 4
  %mul57 = mul nsw i32 %46, 4
  %conv58 = sext i32 %mul57 to i64
  %call59 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv58)
  %call60 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 5, %struct.rtx_def* %45, %struct.rtx_def* %call59)
  %call61 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 58, i32 5, %struct.rtx_def* %call60)
  %call62 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %44, %struct.rtx_def* %call61)
  br label %if.end.64

if.else:                                          ; preds = %if.then.30
  %47 = load %struct.rtx_def*, %struct.rtx_def** %nsse_reg, align 8
  %48 = load %struct.rtx_def*, %struct.rtx_def** %label_ref, align 8
  %call63 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %47, %struct.rtx_def* %48)
  br label %if.end.64

if.end.64:                                        ; preds = %if.else, %if.then.55
  %49 = load %struct.rtx_def*, %struct.rtx_def** %nsse_reg, align 8
  %50 = load %struct.rtx_def*, %struct.rtx_def** %nsse_reg, align 8
  %51 = load %struct.rtx_def*, %struct.rtx_def** %tmp_reg, align 8
  %call65 = call %struct.rtx_def* @gen_subdi3(%struct.rtx_def* %49, %struct.rtx_def* %50, %struct.rtx_def* %51)
  %call66 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call65)
  %52 = load i32, i32* @target_flags, align 4
  %and67 = and i32 %52, 33554432
  %tobool68 = icmp ne i32 %and67, 0
  %cond69 = select i1 %tobool68, i32 5, i32 4
  %call70 = call %struct.rtx_def* @gen_reg_rtx(i32 %cond69)
  store %struct.rtx_def* %call70, %struct.rtx_def** %tmp_reg, align 8
  %53 = load %struct.rtx_def*, %struct.rtx_def** %tmp_reg, align 8
  %54 = load %struct.rtx_def*, %struct.rtx_def** %save_area, align 8
  %55 = load i32, i32* @target_flags, align 4
  %and71 = and i32 %55, 33554432
  %tobool72 = icmp ne i32 %and71, 0
  %cond73 = select i1 %tobool72, i32 6, i32 3
  %mul74 = mul nsw i32 8, %cond73
  %add = add nsw i32 %mul74, 127
  %conv75 = sext i32 %add to i64
  %call76 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %54, i64 %conv75)
  %call77 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %53, %struct.rtx_def* %call76)
  %call78 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call77)
  %56 = load %struct.rtx_def*, %struct.rtx_def** %tmp_reg, align 8
  %call79 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %56, i64 -127)
  %call80 = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %call79)
  store %struct.rtx_def* %call80, %struct.rtx_def** %mem, align 8
  %57 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8
  %58 = load i32, i32* %set, align 4
  %conv81 = sext i32 %58 to i64
  call void @set_mem_alias_set(%struct.rtx_def* %57, i64 %conv81)
  %59 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8
  %60 = load i32, i32* @target_flags, align 4
  %and82 = and i32 %60, 33554432
  %tobool83 = icmp ne i32 %and82, 0
  %cond84 = select i1 %tobool83, i32 64, i32 32
  call void @set_mem_align(%struct.rtx_def* %59, i32 %cond84)
  %61 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8
  %62 = load %struct.rtx_def*, %struct.rtx_def** %nsse_reg, align 8
  %sse_regno85 = getelementptr inbounds %struct.ix86_args, %struct.ix86_args* %next_cum, i32 0, i32 5
  %63 = load i32, i32* %sse_regno85, align 4
  %conv86 = sext i32 %63 to i64
  %call87 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv86)
  %64 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  %call88 = call %struct.rtx_def* @gen_sse_prologue_save(%struct.rtx_def* %61, %struct.rtx_def* %62, %struct.rtx_def* %call87, %struct.rtx_def* %64)
  %call89 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call88)
  br label %if.end.90

if.end.90:                                        ; preds = %if.then, %if.end.64, %for.end
  ret void
}

declare i64 @get_varargs_alias_set() #0

declare %struct.rtx_def* @gen_rtx_MEM(i32, %struct.rtx_def*) #0

declare %struct.rtx_def* @plus_constant_wide(%struct.rtx_def*, i64) #0

declare void @set_mem_alias_set(%struct.rtx_def*, i64) #0

declare %struct.rtx_def* @emit_move_insn(%struct.rtx_def*, %struct.rtx_def*) #0

declare %struct.rtx_def* @gen_label_rtx() #0

declare %struct.rtx_def* @gen_rtx_fmt_u00(i32, i32, %struct.rtx_def*) #0

declare %struct.rtx_def* @gen_reg_rtx(i32) #0

declare %struct.rtx_def* @emit_insn(%struct.rtx_def*) #0

declare %struct.rtx_def* @gen_zero_extendqidi2(%struct.rtx_def*, %struct.rtx_def*) #0

declare %struct.rtx_def* @gen_rtx_fmt_ee(i32, i32, %struct.rtx_def*, %struct.rtx_def*) #0

declare %struct.rtx_def* @gen_rtx_fmt_e(i32, i32, %struct.rtx_def*) #0

declare %struct.rtx_def* @gen_subdi3(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #0

declare void @set_mem_align(%struct.rtx_def*, i32) #0

declare %struct.rtx_def* @gen_sse_prologue_save(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #0

; Function Attrs: nounwind uwtable
define void @ix86_va_start(i32 %stdarg_p, %union.tree_node* %valist, %struct.rtx_def* %nextarg) #1 {
entry:
  %stdarg_p.addr = alloca i32, align 4
  %valist.addr = alloca %union.tree_node*, align 8
  %nextarg.addr = alloca %struct.rtx_def*, align 8
  %words = alloca i64, align 8
  %n_gpr = alloca i64, align 8
  %n_fpr = alloca i64, align 8
  %f_gpr = alloca %union.tree_node*, align 8
  %f_fpr = alloca %union.tree_node*, align 8
  %f_ovf = alloca %union.tree_node*, align 8
  %f_sav = alloca %union.tree_node*, align 8
  %gpr = alloca %union.tree_node*, align 8
  %fpr = alloca %union.tree_node*, align 8
  %ovf = alloca %union.tree_node*, align 8
  %sav = alloca %union.tree_node*, align 8
  %t = alloca %union.tree_node*, align 8
  store i32 %stdarg_p, i32* %stdarg_p.addr, align 4
  store %union.tree_node* %valist, %union.tree_node** %valist.addr, align 8
  store %struct.rtx_def* %nextarg, %struct.rtx_def** %nextarg.addr, align 8
  %0 = load i32, i32* @target_flags, align 4
  %and = and i32 %0, 33554432
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %stdarg_p.addr, align 4
  %2 = load %union.tree_node*, %union.tree_node** %valist.addr, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %nextarg.addr, align 8
  call void @std_expand_builtin_va_start(i32 %1, %union.tree_node* %2, %struct.rtx_def* %3)
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 31), align 8
  %common = bitcast %union.tree_node* %4 to %struct.tree_common*
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type1 = bitcast %union.tree_node* %5 to %struct.tree_type*
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 1
  %6 = load %union.tree_node*, %union.tree_node** %values, align 8
  store %union.tree_node* %6, %union.tree_node** %f_gpr, align 8
  %7 = load %union.tree_node*, %union.tree_node** %f_gpr, align 8
  %common2 = bitcast %union.tree_node* %7 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 0
  %8 = load %union.tree_node*, %union.tree_node** %chain, align 8
  store %union.tree_node* %8, %union.tree_node** %f_fpr, align 8
  %9 = load %union.tree_node*, %union.tree_node** %f_fpr, align 8
  %common3 = bitcast %union.tree_node* %9 to %struct.tree_common*
  %chain4 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common3, i32 0, i32 0
  %10 = load %union.tree_node*, %union.tree_node** %chain4, align 8
  store %union.tree_node* %10, %union.tree_node** %f_ovf, align 8
  %11 = load %union.tree_node*, %union.tree_node** %f_ovf, align 8
  %common5 = bitcast %union.tree_node* %11 to %struct.tree_common*
  %chain6 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5, i32 0, i32 0
  %12 = load %union.tree_node*, %union.tree_node** %chain6, align 8
  store %union.tree_node* %12, %union.tree_node** %f_sav, align 8
  %13 = load %union.tree_node*, %union.tree_node** %valist.addr, align 8
  %common7 = bitcast %union.tree_node* %13 to %struct.tree_common*
  %type8 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common7, i32 0, i32 1
  %14 = load %union.tree_node*, %union.tree_node** %type8, align 8
  %common9 = bitcast %union.tree_node* %14 to %struct.tree_common*
  %type10 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common9, i32 0, i32 1
  %15 = load %union.tree_node*, %union.tree_node** %type10, align 8
  %16 = load %union.tree_node*, %union.tree_node** %valist.addr, align 8
  %call = call %union.tree_node* @build1(i32 41, %union.tree_node* %15, %union.tree_node* %16)
  store %union.tree_node* %call, %union.tree_node** %valist.addr, align 8
  %17 = load %union.tree_node*, %union.tree_node** %f_gpr, align 8
  %common11 = bitcast %union.tree_node* %17 to %struct.tree_common*
  %type12 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common11, i32 0, i32 1
  %18 = load %union.tree_node*, %union.tree_node** %type12, align 8
  %19 = load %union.tree_node*, %union.tree_node** %valist.addr, align 8
  %20 = load %union.tree_node*, %union.tree_node** %f_gpr, align 8
  %call13 = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 39, %union.tree_node* %18, %union.tree_node* %19, %union.tree_node* %20)
  store %union.tree_node* %call13, %union.tree_node** %gpr, align 8
  %21 = load %union.tree_node*, %union.tree_node** %f_fpr, align 8
  %common14 = bitcast %union.tree_node* %21 to %struct.tree_common*
  %type15 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common14, i32 0, i32 1
  %22 = load %union.tree_node*, %union.tree_node** %type15, align 8
  %23 = load %union.tree_node*, %union.tree_node** %valist.addr, align 8
  %24 = load %union.tree_node*, %union.tree_node** %f_fpr, align 8
  %call16 = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 39, %union.tree_node* %22, %union.tree_node* %23, %union.tree_node* %24)
  store %union.tree_node* %call16, %union.tree_node** %fpr, align 8
  %25 = load %union.tree_node*, %union.tree_node** %f_ovf, align 8
  %common17 = bitcast %union.tree_node* %25 to %struct.tree_common*
  %type18 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common17, i32 0, i32 1
  %26 = load %union.tree_node*, %union.tree_node** %type18, align 8
  %27 = load %union.tree_node*, %union.tree_node** %valist.addr, align 8
  %28 = load %union.tree_node*, %union.tree_node** %f_ovf, align 8
  %call19 = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 39, %union.tree_node* %26, %union.tree_node* %27, %union.tree_node* %28)
  store %union.tree_node* %call19, %union.tree_node** %ovf, align 8
  %29 = load %union.tree_node*, %union.tree_node** %f_sav, align 8
  %common20 = bitcast %union.tree_node* %29 to %struct.tree_common*
  %type21 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common20, i32 0, i32 1
  %30 = load %union.tree_node*, %union.tree_node** %type21, align 8
  %31 = load %union.tree_node*, %union.tree_node** %valist.addr, align 8
  %32 = load %union.tree_node*, %union.tree_node** %f_sav, align 8
  %call22 = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 39, %union.tree_node* %30, %union.tree_node* %31, %union.tree_node* %32)
  store %union.tree_node* %call22, %union.tree_node** %sav, align 8
  %33 = load %struct.function*, %struct.function** @cfun, align 8
  %args_info = getelementptr inbounds %struct.function, %struct.function* %33, i32 0, i32 13
  %words23 = getelementptr inbounds %struct.ix86_args, %struct.ix86_args* %args_info, i32 0, i32 0
  %34 = load i32, i32* %words23, align 4
  %conv = sext i32 %34 to i64
  store i64 %conv, i64* %words, align 8
  %35 = load %struct.function*, %struct.function** @cfun, align 8
  %args_info24 = getelementptr inbounds %struct.function, %struct.function* %35, i32 0, i32 13
  %regno = getelementptr inbounds %struct.ix86_args, %struct.ix86_args* %args_info24, i32 0, i32 2
  %36 = load i32, i32* %regno, align 4
  %conv25 = sext i32 %36 to i64
  store i64 %conv25, i64* %n_gpr, align 8
  %37 = load %struct.function*, %struct.function** @cfun, align 8
  %args_info26 = getelementptr inbounds %struct.function, %struct.function* %37, i32 0, i32 13
  %sse_regno = getelementptr inbounds %struct.ix86_args, %struct.ix86_args* %args_info26, i32 0, i32 5
  %38 = load i32, i32* %sse_regno, align 4
  %conv27 = sext i32 %38 to i64
  store i64 %conv27, i64* %n_fpr, align 8
  %39 = load i8*, i8** @ix86_debug_arg_string, align 8
  %cmp = icmp ne i8* %39, null
  br i1 %cmp, label %if.then.29, label %if.end.34

if.then.29:                                       ; preds = %if.end
  %40 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %41 = load i64, i64* %words, align 8
  %conv30 = trunc i64 %41 to i32
  %42 = load i64, i64* %n_gpr, align 8
  %conv31 = trunc i64 %42 to i32
  %43 = load i64, i64* %n_fpr, align 8
  %conv32 = trunc i64 %43 to i32
  %call33 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %40, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.75, i32 0, i32 0), i32 %conv30, i32 %conv31, i32 %conv32)
  br label %if.end.34

if.end.34:                                        ; preds = %if.then.29, %if.end
  %44 = load %union.tree_node*, %union.tree_node** %gpr, align 8
  %common35 = bitcast %union.tree_node* %44 to %struct.tree_common*
  %type36 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common35, i32 0, i32 1
  %45 = load %union.tree_node*, %union.tree_node** %type36, align 8
  %46 = load %union.tree_node*, %union.tree_node** %gpr, align 8
  %47 = load i64, i64* %n_gpr, align 8
  %mul = mul nsw i64 %47, 8
  %call37 = call %union.tree_node* @build_int_2_wide(i64 %mul, i64 0)
  %call38 = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 48, %union.tree_node* %45, %union.tree_node* %46, %union.tree_node* %call37)
  store %union.tree_node* %call38, %union.tree_node** %t, align 8
  %48 = load %union.tree_node*, %union.tree_node** %t, align 8
  %common39 = bitcast %union.tree_node* %48 to %struct.tree_common*
  %side_effects_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common39, i32 0, i32 2
  %bf.load = load i32, i32* %side_effects_flag, align 8
  %bf.clear = and i32 %bf.load, -257
  %bf.set = or i32 %bf.clear, 256
  store i32 %bf.set, i32* %side_effects_flag, align 8
  %49 = load %union.tree_node*, %union.tree_node** %t, align 8
  %50 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call40 = call %struct.rtx_def* @expand_expr(%union.tree_node* %49, %struct.rtx_def* %50, i32 0, i32 0)
  %51 = load %union.tree_node*, %union.tree_node** %fpr, align 8
  %common41 = bitcast %union.tree_node* %51 to %struct.tree_common*
  %type42 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common41, i32 0, i32 1
  %52 = load %union.tree_node*, %union.tree_node** %type42, align 8
  %53 = load %union.tree_node*, %union.tree_node** %fpr, align 8
  %54 = load i64, i64* %n_fpr, align 8
  %mul43 = mul nsw i64 %54, 16
  %55 = load i32, i32* @target_flags, align 4
  %and44 = and i32 %55, 33554432
  %tobool45 = icmp ne i32 %and44, 0
  %cond = select i1 %tobool45, i32 6, i32 3
  %mul46 = mul nsw i32 8, %cond
  %conv47 = sext i32 %mul46 to i64
  %add = add nsw i64 %mul43, %conv47
  %call48 = call %union.tree_node* @build_int_2_wide(i64 %add, i64 0)
  %call49 = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 48, %union.tree_node* %52, %union.tree_node* %53, %union.tree_node* %call48)
  store %union.tree_node* %call49, %union.tree_node** %t, align 8
  %56 = load %union.tree_node*, %union.tree_node** %t, align 8
  %common50 = bitcast %union.tree_node* %56 to %struct.tree_common*
  %side_effects_flag51 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common50, i32 0, i32 2
  %bf.load52 = load i32, i32* %side_effects_flag51, align 8
  %bf.clear53 = and i32 %bf.load52, -257
  %bf.set54 = or i32 %bf.clear53, 256
  store i32 %bf.set54, i32* %side_effects_flag51, align 8
  %57 = load %union.tree_node*, %union.tree_node** %t, align 8
  %58 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call55 = call %struct.rtx_def* @expand_expr(%union.tree_node* %57, %struct.rtx_def* %58, i32 0, i32 0)
  %59 = load %union.tree_node*, %union.tree_node** %ovf, align 8
  %common56 = bitcast %union.tree_node* %59 to %struct.tree_common*
  %type57 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common56, i32 0, i32 1
  %60 = load %union.tree_node*, %union.tree_node** %type57, align 8
  %61 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 6), align 8
  %call58 = call %union.tree_node* @make_tree(%union.tree_node* %60, %struct.rtx_def* %61)
  store %union.tree_node* %call58, %union.tree_node** %t, align 8
  %62 = load i64, i64* %words, align 8
  %cmp59 = icmp ne i64 %62, 0
  br i1 %cmp59, label %if.then.61, label %if.end.71

if.then.61:                                       ; preds = %if.end.34
  %63 = load %union.tree_node*, %union.tree_node** %ovf, align 8
  %common62 = bitcast %union.tree_node* %63 to %struct.tree_common*
  %type63 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common62, i32 0, i32 1
  %64 = load %union.tree_node*, %union.tree_node** %type63, align 8
  %65 = load %union.tree_node*, %union.tree_node** %t, align 8
  %66 = load i64, i64* %words, align 8
  %67 = load i32, i32* @target_flags, align 4
  %and64 = and i32 %67, 33554432
  %tobool65 = icmp ne i32 %and64, 0
  %cond66 = select i1 %tobool65, i32 8, i32 4
  %conv67 = sext i32 %cond66 to i64
  %mul68 = mul nsw i64 %66, %conv67
  %call69 = call %union.tree_node* @build_int_2_wide(i64 %mul68, i64 0)
  %call70 = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 59, %union.tree_node* %64, %union.tree_node* %65, %union.tree_node* %call69)
  store %union.tree_node* %call70, %union.tree_node** %t, align 8
  br label %if.end.71

if.end.71:                                        ; preds = %if.then.61, %if.end.34
  %68 = load %union.tree_node*, %union.tree_node** %ovf, align 8
  %common72 = bitcast %union.tree_node* %68 to %struct.tree_common*
  %type73 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common72, i32 0, i32 1
  %69 = load %union.tree_node*, %union.tree_node** %type73, align 8
  %70 = load %union.tree_node*, %union.tree_node** %ovf, align 8
  %71 = load %union.tree_node*, %union.tree_node** %t, align 8
  %call74 = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 48, %union.tree_node* %69, %union.tree_node* %70, %union.tree_node* %71)
  store %union.tree_node* %call74, %union.tree_node** %t, align 8
  %72 = load %union.tree_node*, %union.tree_node** %t, align 8
  %common75 = bitcast %union.tree_node* %72 to %struct.tree_common*
  %side_effects_flag76 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common75, i32 0, i32 2
  %bf.load77 = load i32, i32* %side_effects_flag76, align 8
  %bf.clear78 = and i32 %bf.load77, -257
  %bf.set79 = or i32 %bf.clear78, 256
  store i32 %bf.set79, i32* %side_effects_flag76, align 8
  %73 = load %union.tree_node*, %union.tree_node** %t, align 8
  %74 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call80 = call %struct.rtx_def* @expand_expr(%union.tree_node* %73, %struct.rtx_def* %74, i32 0, i32 0)
  %75 = load %union.tree_node*, %union.tree_node** %sav, align 8
  %common81 = bitcast %union.tree_node* %75 to %struct.tree_common*
  %type82 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common81, i32 0, i32 1
  %76 = load %union.tree_node*, %union.tree_node** %type82, align 8
  %77 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 3), align 8
  %call83 = call %union.tree_node* @make_tree(%union.tree_node* %76, %struct.rtx_def* %77)
  store %union.tree_node* %call83, %union.tree_node** %t, align 8
  %78 = load %union.tree_node*, %union.tree_node** %sav, align 8
  %common84 = bitcast %union.tree_node* %78 to %struct.tree_common*
  %type85 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common84, i32 0, i32 1
  %79 = load %union.tree_node*, %union.tree_node** %type85, align 8
  %80 = load %union.tree_node*, %union.tree_node** %sav, align 8
  %81 = load %union.tree_node*, %union.tree_node** %t, align 8
  %call86 = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 48, %union.tree_node* %79, %union.tree_node* %80, %union.tree_node* %81)
  store %union.tree_node* %call86, %union.tree_node** %t, align 8
  %82 = load %union.tree_node*, %union.tree_node** %t, align 8
  %common87 = bitcast %union.tree_node* %82 to %struct.tree_common*
  %side_effects_flag88 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common87, i32 0, i32 2
  %bf.load89 = load i32, i32* %side_effects_flag88, align 8
  %bf.clear90 = and i32 %bf.load89, -257
  %bf.set91 = or i32 %bf.clear90, 256
  store i32 %bf.set91, i32* %side_effects_flag88, align 8
  %83 = load %union.tree_node*, %union.tree_node** %t, align 8
  %84 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call92 = call %struct.rtx_def* @expand_expr(%union.tree_node* %83, %struct.rtx_def* %84, i32 0, i32 0)
  %85 = load %struct.function*, %struct.function** @cfun, align 8
  %preferred_stack_boundary = getelementptr inbounds %struct.function, %struct.function* %85, i32 0, i32 53
  store i32 128, i32* %preferred_stack_boundary, align 4
  br label %return

return:                                           ; preds = %if.end.71, %if.then
  ret void
}

declare void @std_expand_builtin_va_start(i32, %union.tree_node*, %struct.rtx_def*) #0

declare %union.tree_node* @build1(i32, %union.tree_node*, %union.tree_node*) #0

declare %union.tree_node* @build(i32, %union.tree_node*, ...) #0

declare %union.tree_node* @build_int_2_wide(i64, i64) #0

declare %struct.rtx_def* @expand_expr(%union.tree_node*, %struct.rtx_def*, i32, i32) #0

declare %union.tree_node* @make_tree(%union.tree_node*, %struct.rtx_def*) #0

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @ix86_va_arg(%union.tree_node* %valist, %union.tree_node* %type) #1 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %valist.addr = alloca %union.tree_node*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %f_gpr = alloca %union.tree_node*, align 8
  %f_fpr = alloca %union.tree_node*, align 8
  %f_ovf = alloca %union.tree_node*, align 8
  %f_sav = alloca %union.tree_node*, align 8
  %gpr = alloca %union.tree_node*, align 8
  %fpr = alloca %union.tree_node*, align 8
  %ovf = alloca %union.tree_node*, align 8
  %sav = alloca %union.tree_node*, align 8
  %t = alloca %union.tree_node*, align 8
  %size = alloca i32, align 4
  %rsize = alloca i32, align 4
  %lab_false = alloca %struct.rtx_def*, align 8
  %lab_over = alloca %struct.rtx_def*, align 8
  %addr_rtx = alloca %struct.rtx_def*, align 8
  %r = alloca %struct.rtx_def*, align 8
  %container = alloca %struct.rtx_def*, align 8
  %int_addr_rtx = alloca %struct.rtx_def*, align 8
  %sse_addr_rtx = alloca %struct.rtx_def*, align 8
  %needed_intregs = alloca i32, align 4
  %needed_sseregs = alloca i32, align 4
  %need_temp = alloca i32, align 4
  %i = alloca i32, align 4
  %slot = alloca %struct.rtx_def*, align 8
  %i147 = alloca i32, align 4
  %slot160 = alloca %struct.rtx_def*, align 8
  %i262 = alloca i32, align 4
  %mem = alloca %struct.rtx_def*, align 8
  %slot277 = alloca %struct.rtx_def*, align 8
  %reg = alloca %struct.rtx_def*, align 8
  %mode287 = alloca i32, align 4
  %src_addr = alloca %struct.rtx_def*, align 8
  %src_mem = alloca %struct.rtx_def*, align 8
  %src_offset = alloca i32, align 4
  %dest_mem = alloca %struct.rtx_def*, align 8
  %align386 = alloca i64, align 8
  store %union.tree_node* %valist, %union.tree_node** %valist.addr, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %lab_over, align 8
  %0 = load i32, i32* @target_flags, align 4
  %and = and i32 %0, 33554432
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %valist.addr, align 8
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %call = call %struct.rtx_def* @std_expand_builtin_va_arg(%union.tree_node* %1, %union.tree_node* %2)
  store %struct.rtx_def* %call, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 31), align 8
  %common = bitcast %union.tree_node* %3 to %struct.tree_common*
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1
  %4 = load %union.tree_node*, %union.tree_node** %type1, align 8
  %type2 = bitcast %union.tree_node* %4 to %struct.tree_type*
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type2, i32 0, i32 1
  %5 = load %union.tree_node*, %union.tree_node** %values, align 8
  store %union.tree_node* %5, %union.tree_node** %f_gpr, align 8
  %6 = load %union.tree_node*, %union.tree_node** %f_gpr, align 8
  %common3 = bitcast %union.tree_node* %6 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common3, i32 0, i32 0
  %7 = load %union.tree_node*, %union.tree_node** %chain, align 8
  store %union.tree_node* %7, %union.tree_node** %f_fpr, align 8
  %8 = load %union.tree_node*, %union.tree_node** %f_fpr, align 8
  %common4 = bitcast %union.tree_node* %8 to %struct.tree_common*
  %chain5 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4, i32 0, i32 0
  %9 = load %union.tree_node*, %union.tree_node** %chain5, align 8
  store %union.tree_node* %9, %union.tree_node** %f_ovf, align 8
  %10 = load %union.tree_node*, %union.tree_node** %f_ovf, align 8
  %common6 = bitcast %union.tree_node* %10 to %struct.tree_common*
  %chain7 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common6, i32 0, i32 0
  %11 = load %union.tree_node*, %union.tree_node** %chain7, align 8
  store %union.tree_node* %11, %union.tree_node** %f_sav, align 8
  %12 = load %union.tree_node*, %union.tree_node** %valist.addr, align 8
  %common8 = bitcast %union.tree_node* %12 to %struct.tree_common*
  %type9 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common8, i32 0, i32 1
  %13 = load %union.tree_node*, %union.tree_node** %type9, align 8
  %common10 = bitcast %union.tree_node* %13 to %struct.tree_common*
  %type11 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common10, i32 0, i32 1
  %14 = load %union.tree_node*, %union.tree_node** %type11, align 8
  %15 = load %union.tree_node*, %union.tree_node** %valist.addr, align 8
  %call12 = call %union.tree_node* @build1(i32 41, %union.tree_node* %14, %union.tree_node* %15)
  store %union.tree_node* %call12, %union.tree_node** %valist.addr, align 8
  %16 = load %union.tree_node*, %union.tree_node** %f_gpr, align 8
  %common13 = bitcast %union.tree_node* %16 to %struct.tree_common*
  %type14 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common13, i32 0, i32 1
  %17 = load %union.tree_node*, %union.tree_node** %type14, align 8
  %18 = load %union.tree_node*, %union.tree_node** %valist.addr, align 8
  %19 = load %union.tree_node*, %union.tree_node** %f_gpr, align 8
  %call15 = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 39, %union.tree_node* %17, %union.tree_node* %18, %union.tree_node* %19)
  store %union.tree_node* %call15, %union.tree_node** %gpr, align 8
  %20 = load %union.tree_node*, %union.tree_node** %f_fpr, align 8
  %common16 = bitcast %union.tree_node* %20 to %struct.tree_common*
  %type17 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common16, i32 0, i32 1
  %21 = load %union.tree_node*, %union.tree_node** %type17, align 8
  %22 = load %union.tree_node*, %union.tree_node** %valist.addr, align 8
  %23 = load %union.tree_node*, %union.tree_node** %f_fpr, align 8
  %call18 = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 39, %union.tree_node* %21, %union.tree_node* %22, %union.tree_node* %23)
  store %union.tree_node* %call18, %union.tree_node** %fpr, align 8
  %24 = load %union.tree_node*, %union.tree_node** %f_ovf, align 8
  %common19 = bitcast %union.tree_node* %24 to %struct.tree_common*
  %type20 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common19, i32 0, i32 1
  %25 = load %union.tree_node*, %union.tree_node** %type20, align 8
  %26 = load %union.tree_node*, %union.tree_node** %valist.addr, align 8
  %27 = load %union.tree_node*, %union.tree_node** %f_ovf, align 8
  %call21 = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 39, %union.tree_node* %25, %union.tree_node* %26, %union.tree_node* %27)
  store %union.tree_node* %call21, %union.tree_node** %ovf, align 8
  %28 = load %union.tree_node*, %union.tree_node** %f_sav, align 8
  %common22 = bitcast %union.tree_node* %28 to %struct.tree_common*
  %type23 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common22, i32 0, i32 1
  %29 = load %union.tree_node*, %union.tree_node** %type23, align 8
  %30 = load %union.tree_node*, %union.tree_node** %valist.addr, align 8
  %31 = load %union.tree_node*, %union.tree_node** %f_sav, align 8
  %call24 = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 39, %union.tree_node* %29, %union.tree_node* %30, %union.tree_node* %31)
  store %union.tree_node* %call24, %union.tree_node** %sav, align 8
  %32 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %call25 = call i64 @int_size_in_bytes(%union.tree_node* %32)
  %conv = trunc i64 %call25 to i32
  store i32 %conv, i32* %size, align 4
  %33 = load i32, i32* %size, align 4
  %34 = load i32, i32* @target_flags, align 4
  %and26 = and i32 %34, 33554432
  %tobool27 = icmp ne i32 %and26, 0
  %cond = select i1 %tobool27, i32 8, i32 4
  %add = add nsw i32 %33, %cond
  %sub = sub nsw i32 %add, 1
  %35 = load i32, i32* @target_flags, align 4
  %and28 = and i32 %35, 33554432
  %tobool29 = icmp ne i32 %and28, 0
  %cond30 = select i1 %tobool29, i32 8, i32 4
  %div = sdiv i32 %sub, %cond30
  store i32 %div, i32* %rsize, align 4
  %36 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type31 = bitcast %union.tree_node* %36 to %struct.tree_type*
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type31, i32 0, i32 6
  %bf.load = load i32, i32* %mode, align 4
  %bf.lshr = lshr i32 %bf.load, 9
  %bf.clear = and i32 %bf.lshr, 127
  %37 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %38 = load i32, i32* @target_flags, align 4
  %and32 = and i32 %38, 33554432
  %tobool33 = icmp ne i32 %and32, 0
  %cond34 = select i1 %tobool33, i32 6, i32 3
  %39 = load i32, i32* @target_flags, align 4
  %and35 = and i32 %39, 33554432
  %tobool36 = icmp ne i32 %and35, 0
  %cond37 = select i1 %tobool36, i32 8, i32 0
  %call38 = call %struct.rtx_def* @construct_container(i32 %bf.clear, %union.tree_node* %37, i32 0, i32 %cond34, i32 %cond37, i32* getelementptr inbounds ([6 x i32], [6 x i32]* @ix86_va_arg.intreg, i32 0, i32 0), i32 0)
  store %struct.rtx_def* %call38, %struct.rtx_def** %container, align 8
  %40 = load i32, i32* @target_flags, align 4
  %and39 = and i32 %40, 33554432
  %tobool40 = icmp ne i32 %and39, 0
  %cond41 = select i1 %tobool40, i32 5, i32 4
  %call42 = call %struct.rtx_def* @gen_reg_rtx(i32 %cond41)
  store %struct.rtx_def* %call42, %struct.rtx_def** %addr_rtx, align 8
  %41 = load %struct.rtx_def*, %struct.rtx_def** %container, align 8
  %tobool43 = icmp ne %struct.rtx_def* %41, null
  br i1 %tobool43, label %if.then.44, label %if.end.380

if.then.44:                                       ; preds = %if.end
  %call45 = call %struct.rtx_def* @gen_label_rtx()
  store %struct.rtx_def* %call45, %struct.rtx_def** %lab_over, align 8
  %call46 = call %struct.rtx_def* @gen_label_rtx()
  store %struct.rtx_def* %call46, %struct.rtx_def** %lab_false, align 8
  %42 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type47 = bitcast %union.tree_node* %42 to %struct.tree_type*
  %mode48 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type47, i32 0, i32 6
  %bf.load49 = load i32, i32* %mode48, align 4
  %bf.lshr50 = lshr i32 %bf.load49, 9
  %bf.clear51 = and i32 %bf.lshr50, 127
  %43 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %call52 = call i32 @examine_argument(i32 %bf.clear51, %union.tree_node* %43, i32 0, i32* %needed_intregs, i32* %needed_sseregs)
  %44 = load i32, i32* %needed_intregs, align 4
  %tobool53 = icmp ne i32 %44, 0
  br i1 %tobool53, label %land.lhs.true, label %lor.rhs

land.lhs.true:                                    ; preds = %if.then.44
  %45 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type54 = bitcast %union.tree_node* %45 to %struct.tree_type*
  %align = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type54, i32 0, i32 7
  %46 = load i32, i32* %align, align 4
  %cmp = icmp ugt i32 %46, 64
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.lhs.true, %if.then.44
  %47 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type56 = bitcast %union.tree_node* %47 to %struct.tree_type*
  %align57 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type56, i32 0, i32 7
  %48 = load i32, i32* %align57, align 4
  %cmp58 = icmp ugt i32 %48, 128
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.lhs.true
  %49 = phi i1 [ true, %land.lhs.true ], [ %cmp58, %lor.rhs ]
  %lor.ext = zext i1 %49 to i32
  store i32 %lor.ext, i32* %need_temp, align 4
  %50 = load i32, i32* %need_temp, align 4
  %tobool60 = icmp ne i32 %50, 0
  br i1 %tobool60, label %if.end.192, label %land.lhs.true.61

land.lhs.true.61:                                 ; preds = %lor.end
  %51 = load %struct.rtx_def*, %struct.rtx_def** %container, align 8
  %52 = bitcast %struct.rtx_def* %51 to i32*
  %bf.load62 = load i32, i32* %52, align 8
  %bf.clear63 = and i32 %bf.load62, 65535
  %cmp64 = icmp eq i32 %bf.clear63, 61
  br i1 %cmp64, label %if.end.192, label %if.then.66

if.then.66:                                       ; preds = %land.lhs.true.61
  %53 = load %struct.rtx_def*, %struct.rtx_def** %container, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %53, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtvec = bitcast %union.rtunion_def* %arrayidx to %struct.rtvec_def**
  %54 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec, align 8
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %54, i32 0, i32 1
  %arrayidx67 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i32 0, i64 0
  %55 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx67, align 8
  %fld68 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %55, i32 0, i32 1
  %arrayidx69 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld68, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx69 to %struct.rtx_def**
  %56 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %fld70 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %56, i32 0, i32 1
  %arrayidx71 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld70, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx71 to i32*
  %57 = load i32, i32* %rtuint, align 4
  %cmp72 = icmp uge i32 %57, 21
  br i1 %cmp72, label %land.lhs.true.74, label %lor.lhs.false

land.lhs.true.74:                                 ; preds = %if.then.66
  %58 = load %struct.rtx_def*, %struct.rtx_def** %container, align 8
  %fld75 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %58, i32 0, i32 1
  %arrayidx76 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld75, i32 0, i64 0
  %rtvec77 = bitcast %union.rtunion_def* %arrayidx76 to %struct.rtvec_def**
  %59 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec77, align 8
  %elem78 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %59, i32 0, i32 1
  %arrayidx79 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem78, i32 0, i64 0
  %60 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx79, align 8
  %fld80 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %60, i32 0, i32 1
  %arrayidx81 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld80, i32 0, i64 0
  %rtx82 = bitcast %union.rtunion_def* %arrayidx81 to %struct.rtx_def**
  %61 = load %struct.rtx_def*, %struct.rtx_def** %rtx82, align 8
  %fld83 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %61, i32 0, i32 1
  %arrayidx84 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld83, i32 0, i64 0
  %rtuint85 = bitcast %union.rtunion_def* %arrayidx84 to i32*
  %62 = load i32, i32* %rtuint85, align 4
  %cmp86 = icmp ule i32 %62, 28
  br i1 %cmp86, label %if.then.115, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.74, %if.then.66
  %63 = load %struct.rtx_def*, %struct.rtx_def** %container, align 8
  %fld88 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %63, i32 0, i32 1
  %arrayidx89 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld88, i32 0, i64 0
  %rtvec90 = bitcast %union.rtunion_def* %arrayidx89 to %struct.rtvec_def**
  %64 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec90, align 8
  %elem91 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %64, i32 0, i32 1
  %arrayidx92 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem91, i32 0, i64 0
  %65 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx92, align 8
  %fld93 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %65, i32 0, i32 1
  %arrayidx94 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld93, i32 0, i64 0
  %rtx95 = bitcast %union.rtunion_def* %arrayidx94 to %struct.rtx_def**
  %66 = load %struct.rtx_def*, %struct.rtx_def** %rtx95, align 8
  %fld96 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %66, i32 0, i32 1
  %arrayidx97 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld96, i32 0, i64 0
  %rtuint98 = bitcast %union.rtunion_def* %arrayidx97 to i32*
  %67 = load i32, i32* %rtuint98, align 4
  %cmp99 = icmp uge i32 %67, 45
  br i1 %cmp99, label %land.lhs.true.101, label %if.else

land.lhs.true.101:                                ; preds = %lor.lhs.false
  %68 = load %struct.rtx_def*, %struct.rtx_def** %container, align 8
  %fld102 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %68, i32 0, i32 1
  %arrayidx103 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld102, i32 0, i64 0
  %rtvec104 = bitcast %union.rtunion_def* %arrayidx103 to %struct.rtvec_def**
  %69 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec104, align 8
  %elem105 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %69, i32 0, i32 1
  %arrayidx106 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem105, i32 0, i64 0
  %70 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx106, align 8
  %fld107 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %70, i32 0, i32 1
  %arrayidx108 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld107, i32 0, i64 0
  %rtx109 = bitcast %union.rtunion_def* %arrayidx108 to %struct.rtx_def**
  %71 = load %struct.rtx_def*, %struct.rtx_def** %rtx109, align 8
  %fld110 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %71, i32 0, i32 1
  %arrayidx111 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld110, i32 0, i64 0
  %rtuint112 = bitcast %union.rtunion_def* %arrayidx111 to i32*
  %72 = load i32, i32* %rtuint112, align 4
  %cmp113 = icmp ule i32 %72, 52
  br i1 %cmp113, label %if.then.115, label %if.else

if.then.115:                                      ; preds = %land.lhs.true.101, %land.lhs.true.74
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.115
  %73 = load i32, i32* %i, align 4
  %74 = load %struct.rtx_def*, %struct.rtx_def** %container, align 8
  %fld116 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %74, i32 0, i32 1
  %arrayidx117 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld116, i32 0, i64 0
  %rtvec118 = bitcast %union.rtunion_def* %arrayidx117 to %struct.rtvec_def**
  %75 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec118, align 8
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %75, i32 0, i32 0
  %76 = load i32, i32* %num_elem, align 4
  %cmp119 = icmp slt i32 %73, %76
  br i1 %cmp119, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %77 = load i32, i32* %need_temp, align 4
  %tobool121 = icmp ne i32 %77, 0
  %lnot = xor i1 %tobool121, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %78 = phi i1 [ false, %for.cond ], [ %lnot, %land.rhs ]
  br i1 %78, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %79 = load i32, i32* %i, align 4
  %idxprom = sext i32 %79 to i64
  %80 = load %struct.rtx_def*, %struct.rtx_def** %container, align 8
  %fld122 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %80, i32 0, i32 1
  %arrayidx123 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld122, i32 0, i64 0
  %rtvec124 = bitcast %union.rtunion_def* %arrayidx123 to %struct.rtvec_def**
  %81 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec124, align 8
  %elem125 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %81, i32 0, i32 1
  %arrayidx126 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem125, i32 0, i64 %idxprom
  %82 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx126, align 8
  store %struct.rtx_def* %82, %struct.rtx_def** %slot, align 8
  %83 = load %struct.rtx_def*, %struct.rtx_def** %slot, align 8
  %fld127 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %83, i32 0, i32 1
  %arrayidx128 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld127, i32 0, i64 0
  %rtx129 = bitcast %union.rtunion_def* %arrayidx128 to %struct.rtx_def**
  %84 = load %struct.rtx_def*, %struct.rtx_def** %rtx129, align 8
  %fld130 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %84, i32 0, i32 1
  %arrayidx131 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld130, i32 0, i64 0
  %rtuint132 = bitcast %union.rtunion_def* %arrayidx131 to i32*
  %85 = load i32, i32* %rtuint132, align 4
  %86 = load i32, i32* %i, align 4
  %add133 = add i32 21, %86
  %cmp134 = icmp ne i32 %85, %add133
  br i1 %cmp134, label %if.then.145, label %lor.lhs.false.136

lor.lhs.false.136:                                ; preds = %for.body
  %87 = load %struct.rtx_def*, %struct.rtx_def** %slot, align 8
  %fld137 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %87, i32 0, i32 1
  %arrayidx138 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld137, i32 0, i64 1
  %rtx139 = bitcast %union.rtunion_def* %arrayidx138 to %struct.rtx_def**
  %88 = load %struct.rtx_def*, %struct.rtx_def** %rtx139, align 8
  %fld140 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %88, i32 0, i32 1
  %arrayidx141 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld140, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx141 to i64*
  %89 = load i64, i64* %rtwint, align 8
  %90 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %90, 16
  %conv142 = sext i32 %mul to i64
  %cmp143 = icmp ne i64 %89, %conv142
  br i1 %cmp143, label %if.then.145, label %if.end.146

if.then.145:                                      ; preds = %lor.lhs.false.136, %for.body
  store i32 1, i32* %need_temp, align 4
  br label %if.end.146

if.end.146:                                       ; preds = %if.then.145, %lor.lhs.false.136
  br label %for.inc

for.inc:                                          ; preds = %if.end.146
  %91 = load i32, i32* %i, align 4
  %inc = add nsw i32 %91, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  br label %if.end.191

if.else:                                          ; preds = %land.lhs.true.101, %lor.lhs.false
  store i32 0, i32* %i147, align 4
  br label %for.cond.148

for.cond.148:                                     ; preds = %for.inc.188, %if.else
  %92 = load i32, i32* %i147, align 4
  %93 = load %struct.rtx_def*, %struct.rtx_def** %container, align 8
  %fld149 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %93, i32 0, i32 1
  %arrayidx150 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld149, i32 0, i64 0
  %rtvec151 = bitcast %union.rtunion_def* %arrayidx150 to %struct.rtvec_def**
  %94 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec151, align 8
  %num_elem152 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %94, i32 0, i32 0
  %95 = load i32, i32* %num_elem152, align 4
  %cmp153 = icmp slt i32 %92, %95
  br i1 %cmp153, label %land.rhs.155, label %land.end.158

land.rhs.155:                                     ; preds = %for.cond.148
  %96 = load i32, i32* %need_temp, align 4
  %tobool156 = icmp ne i32 %96, 0
  %lnot157 = xor i1 %tobool156, true
  br label %land.end.158

land.end.158:                                     ; preds = %land.rhs.155, %for.cond.148
  %97 = phi i1 [ false, %for.cond.148 ], [ %lnot157, %land.rhs.155 ]
  br i1 %97, label %for.body.159, label %for.end.190

for.body.159:                                     ; preds = %land.end.158
  %98 = load i32, i32* %i147, align 4
  %idxprom161 = sext i32 %98 to i64
  %99 = load %struct.rtx_def*, %struct.rtx_def** %container, align 8
  %fld162 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %99, i32 0, i32 1
  %arrayidx163 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld162, i32 0, i64 0
  %rtvec164 = bitcast %union.rtunion_def* %arrayidx163 to %struct.rtvec_def**
  %100 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec164, align 8
  %elem165 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %100, i32 0, i32 1
  %arrayidx166 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem165, i32 0, i64 %idxprom161
  %101 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx166, align 8
  store %struct.rtx_def* %101, %struct.rtx_def** %slot160, align 8
  %102 = load %struct.rtx_def*, %struct.rtx_def** %slot160, align 8
  %fld167 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %102, i32 0, i32 1
  %arrayidx168 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld167, i32 0, i64 0
  %rtx169 = bitcast %union.rtunion_def* %arrayidx168 to %struct.rtx_def**
  %103 = load %struct.rtx_def*, %struct.rtx_def** %rtx169, align 8
  %fld170 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %103, i32 0, i32 1
  %arrayidx171 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld170, i32 0, i64 0
  %rtuint172 = bitcast %union.rtunion_def* %arrayidx171 to i32*
  %104 = load i32, i32* %rtuint172, align 4
  %105 = load i32, i32* %i147, align 4
  %cmp173 = icmp ne i32 %104, %105
  br i1 %cmp173, label %if.then.186, label %lor.lhs.false.175

lor.lhs.false.175:                                ; preds = %for.body.159
  %106 = load %struct.rtx_def*, %struct.rtx_def** %slot160, align 8
  %fld176 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %106, i32 0, i32 1
  %arrayidx177 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld176, i32 0, i64 1
  %rtx178 = bitcast %union.rtunion_def* %arrayidx177 to %struct.rtx_def**
  %107 = load %struct.rtx_def*, %struct.rtx_def** %rtx178, align 8
  %fld179 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %107, i32 0, i32 1
  %arrayidx180 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld179, i32 0, i64 0
  %rtwint181 = bitcast %union.rtunion_def* %arrayidx180 to i64*
  %108 = load i64, i64* %rtwint181, align 8
  %109 = load i32, i32* %i147, align 4
  %mul182 = mul nsw i32 %109, 8
  %conv183 = sext i32 %mul182 to i64
  %cmp184 = icmp ne i64 %108, %conv183
  br i1 %cmp184, label %if.then.186, label %if.end.187

if.then.186:                                      ; preds = %lor.lhs.false.175, %for.body.159
  store i32 1, i32* %need_temp, align 4
  br label %if.end.187

if.end.187:                                       ; preds = %if.then.186, %lor.lhs.false.175
  br label %for.inc.188

for.inc.188:                                      ; preds = %if.end.187
  %110 = load i32, i32* %i147, align 4
  %inc189 = add nsw i32 %110, 1
  store i32 %inc189, i32* %i147, align 4
  br label %for.cond.148

for.end.190:                                      ; preds = %land.end.158
  br label %if.end.191

if.end.191:                                       ; preds = %for.end.190, %for.end
  br label %if.end.192

if.end.192:                                       ; preds = %if.end.191, %land.lhs.true.61, %lor.end
  %111 = load i32, i32* %need_temp, align 4
  %tobool193 = icmp ne i32 %111, 0
  br i1 %tobool193, label %if.else.195, label %if.then.194

if.then.194:                                      ; preds = %if.end.192
  %112 = load %struct.rtx_def*, %struct.rtx_def** %addr_rtx, align 8
  store %struct.rtx_def* %112, %struct.rtx_def** %int_addr_rtx, align 8
  %113 = load %struct.rtx_def*, %struct.rtx_def** %addr_rtx, align 8
  store %struct.rtx_def* %113, %struct.rtx_def** %sse_addr_rtx, align 8
  br label %if.end.204

if.else.195:                                      ; preds = %if.end.192
  %114 = load i32, i32* @target_flags, align 4
  %and196 = and i32 %114, 33554432
  %tobool197 = icmp ne i32 %and196, 0
  %cond198 = select i1 %tobool197, i32 5, i32 4
  %call199 = call %struct.rtx_def* @gen_reg_rtx(i32 %cond198)
  store %struct.rtx_def* %call199, %struct.rtx_def** %int_addr_rtx, align 8
  %115 = load i32, i32* @target_flags, align 4
  %and200 = and i32 %115, 33554432
  %tobool201 = icmp ne i32 %and200, 0
  %cond202 = select i1 %tobool201, i32 5, i32 4
  %call203 = call %struct.rtx_def* @gen_reg_rtx(i32 %cond202)
  store %struct.rtx_def* %call203, %struct.rtx_def** %sse_addr_rtx, align 8
  br label %if.end.204

if.end.204:                                       ; preds = %if.else.195, %if.then.194
  %116 = load i32, i32* %needed_intregs, align 4
  %tobool205 = icmp ne i32 %116, 0
  br i1 %tobool205, label %if.then.206, label %if.end.216

if.then.206:                                      ; preds = %if.end.204
  %117 = load %union.tree_node*, %union.tree_node** %gpr, align 8
  %call207 = call %struct.rtx_def* @expand_expr(%union.tree_node* %117, %struct.rtx_def* null, i32 4, i32 0)
  %118 = load i32, i32* @target_flags, align 4
  %and208 = and i32 %118, 33554432
  %tobool209 = icmp ne i32 %and208, 0
  %cond210 = select i1 %tobool209, i32 6, i32 3
  %119 = load i32, i32* %needed_intregs, align 4
  %sub211 = sub nsw i32 %cond210, %119
  %add212 = add nsw i32 %sub211, 1
  %mul213 = mul nsw i32 %add212, 8
  %conv214 = sext i32 %mul213 to i64
  %call215 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv214)
  %120 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %121 = load %struct.rtx_def*, %struct.rtx_def** %lab_false, align 8
  call void @emit_cmp_and_jump_insns(%struct.rtx_def* %call207, %struct.rtx_def* %call215, i32 104, %struct.rtx_def* %120, i32 4, i32 1, %struct.rtx_def* %121)
  br label %if.end.216

if.end.216:                                       ; preds = %if.then.206, %if.end.204
  %122 = load i32, i32* %needed_sseregs, align 4
  %tobool217 = icmp ne i32 %122, 0
  br i1 %tobool217, label %if.then.218, label %if.end.233

if.then.218:                                      ; preds = %if.end.216
  %123 = load %union.tree_node*, %union.tree_node** %fpr, align 8
  %call219 = call %struct.rtx_def* @expand_expr(%union.tree_node* %123, %struct.rtx_def* null, i32 4, i32 0)
  %124 = load i32, i32* @target_flags, align 4
  %and220 = and i32 %124, 33554432
  %tobool221 = icmp ne i32 %and220, 0
  %cond222 = select i1 %tobool221, i32 8, i32 0
  %125 = load i32, i32* %needed_sseregs, align 4
  %sub223 = sub nsw i32 %cond222, %125
  %add224 = add nsw i32 %sub223, 1
  %mul225 = mul nsw i32 %add224, 16
  %126 = load i32, i32* @target_flags, align 4
  %and226 = and i32 %126, 33554432
  %tobool227 = icmp ne i32 %and226, 0
  %cond228 = select i1 %tobool227, i32 6, i32 3
  %mul229 = mul nsw i32 %cond228, 8
  %add230 = add nsw i32 %mul225, %mul229
  %conv231 = sext i32 %add230 to i64
  %call232 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv231)
  %127 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %128 = load %struct.rtx_def*, %struct.rtx_def** %lab_false, align 8
  call void @emit_cmp_and_jump_insns(%struct.rtx_def* %call219, %struct.rtx_def* %call232, i32 104, %struct.rtx_def* %127, i32 4, i32 1, %struct.rtx_def* %128)
  br label %if.end.233

if.end.233:                                       ; preds = %if.then.218, %if.end.216
  %129 = load i32, i32* %needed_intregs, align 4
  %tobool234 = icmp ne i32 %129, 0
  br i1 %tobool234, label %if.then.235, label %if.end.246

if.then.235:                                      ; preds = %if.end.233
  %130 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 28), align 8
  %131 = load %union.tree_node*, %union.tree_node** %sav, align 8
  %132 = load %union.tree_node*, %union.tree_node** %gpr, align 8
  %call236 = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 59, %union.tree_node* %130, %union.tree_node* %131, %union.tree_node* %132)
  store %union.tree_node* %call236, %union.tree_node** %t, align 8
  %133 = load %union.tree_node*, %union.tree_node** %t, align 8
  %134 = load %struct.rtx_def*, %struct.rtx_def** %int_addr_rtx, align 8
  %135 = load i32, i32* @target_flags, align 4
  %and237 = and i32 %135, 33554432
  %tobool238 = icmp ne i32 %and237, 0
  %cond239 = select i1 %tobool238, i32 5, i32 4
  %call240 = call %struct.rtx_def* @expand_expr(%union.tree_node* %133, %struct.rtx_def* %134, i32 %cond239, i32 0)
  store %struct.rtx_def* %call240, %struct.rtx_def** %r, align 8
  %136 = load %struct.rtx_def*, %struct.rtx_def** %r, align 8
  %137 = load %struct.rtx_def*, %struct.rtx_def** %int_addr_rtx, align 8
  %cmp241 = icmp ne %struct.rtx_def* %136, %137
  br i1 %cmp241, label %if.then.243, label %if.end.245

if.then.243:                                      ; preds = %if.then.235
  %138 = load %struct.rtx_def*, %struct.rtx_def** %int_addr_rtx, align 8
  %139 = load %struct.rtx_def*, %struct.rtx_def** %r, align 8
  %call244 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %138, %struct.rtx_def* %139)
  br label %if.end.245

if.end.245:                                       ; preds = %if.then.243, %if.then.235
  br label %if.end.246

if.end.246:                                       ; preds = %if.end.245, %if.end.233
  %140 = load i32, i32* %needed_sseregs, align 4
  %tobool247 = icmp ne i32 %140, 0
  br i1 %tobool247, label %if.then.248, label %if.end.259

if.then.248:                                      ; preds = %if.end.246
  %141 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 28), align 8
  %142 = load %union.tree_node*, %union.tree_node** %sav, align 8
  %143 = load %union.tree_node*, %union.tree_node** %fpr, align 8
  %call249 = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 59, %union.tree_node* %141, %union.tree_node* %142, %union.tree_node* %143)
  store %union.tree_node* %call249, %union.tree_node** %t, align 8
  %144 = load %union.tree_node*, %union.tree_node** %t, align 8
  %145 = load %struct.rtx_def*, %struct.rtx_def** %sse_addr_rtx, align 8
  %146 = load i32, i32* @target_flags, align 4
  %and250 = and i32 %146, 33554432
  %tobool251 = icmp ne i32 %and250, 0
  %cond252 = select i1 %tobool251, i32 5, i32 4
  %call253 = call %struct.rtx_def* @expand_expr(%union.tree_node* %144, %struct.rtx_def* %145, i32 %cond252, i32 0)
  store %struct.rtx_def* %call253, %struct.rtx_def** %r, align 8
  %147 = load %struct.rtx_def*, %struct.rtx_def** %r, align 8
  %148 = load %struct.rtx_def*, %struct.rtx_def** %sse_addr_rtx, align 8
  %cmp254 = icmp ne %struct.rtx_def* %147, %148
  br i1 %cmp254, label %if.then.256, label %if.end.258

if.then.256:                                      ; preds = %if.then.248
  %149 = load %struct.rtx_def*, %struct.rtx_def** %sse_addr_rtx, align 8
  %150 = load %struct.rtx_def*, %struct.rtx_def** %r, align 8
  %call257 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %149, %struct.rtx_def* %150)
  br label %if.end.258

if.end.258:                                       ; preds = %if.then.256, %if.then.248
  br label %if.end.259

if.end.259:                                       ; preds = %if.end.258, %if.end.246
  %151 = load i32, i32* %need_temp, align 4
  %tobool260 = icmp ne i32 %151, 0
  br i1 %tobool260, label %if.then.261, label %if.end.341

if.then.261:                                      ; preds = %if.end.259
  %152 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %call263 = call %struct.rtx_def* @assign_temp(%union.tree_node* %152, i32 0, i32 1, i32 0)
  %fld264 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %call263, i32 0, i32 1
  %arrayidx265 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld264, i32 0, i64 0
  %rtx266 = bitcast %union.rtunion_def* %arrayidx265 to %struct.rtx_def**
  %153 = load %struct.rtx_def*, %struct.rtx_def** %rtx266, align 8
  store %struct.rtx_def* %153, %struct.rtx_def** %addr_rtx, align 8
  %154 = load %struct.rtx_def*, %struct.rtx_def** %addr_rtx, align 8
  %call267 = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %154)
  store %struct.rtx_def* %call267, %struct.rtx_def** %mem, align 8
  %155 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8
  %call268 = call i64 @get_varargs_alias_set()
  call void @set_mem_alias_set(%struct.rtx_def* %155, i64 %call268)
  %156 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8
  call void @set_mem_align(%struct.rtx_def* %156, i32 8)
  store i32 0, i32* %i262, align 4
  br label %for.cond.269

for.cond.269:                                     ; preds = %for.inc.338, %if.then.261
  %157 = load i32, i32* %i262, align 4
  %158 = load %struct.rtx_def*, %struct.rtx_def** %container, align 8
  %fld270 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %158, i32 0, i32 1
  %arrayidx271 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld270, i32 0, i64 0
  %rtvec272 = bitcast %union.rtunion_def* %arrayidx271 to %struct.rtvec_def**
  %159 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec272, align 8
  %num_elem273 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %159, i32 0, i32 0
  %160 = load i32, i32* %num_elem273, align 4
  %cmp274 = icmp slt i32 %157, %160
  br i1 %cmp274, label %for.body.276, label %for.end.340

for.body.276:                                     ; preds = %for.cond.269
  %161 = load i32, i32* %i262, align 4
  %idxprom278 = sext i32 %161 to i64
  %162 = load %struct.rtx_def*, %struct.rtx_def** %container, align 8
  %fld279 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %162, i32 0, i32 1
  %arrayidx280 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld279, i32 0, i64 0
  %rtvec281 = bitcast %union.rtunion_def* %arrayidx280 to %struct.rtvec_def**
  %163 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec281, align 8
  %elem282 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %163, i32 0, i32 1
  %arrayidx283 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem282, i32 0, i64 %idxprom278
  %164 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx283, align 8
  store %struct.rtx_def* %164, %struct.rtx_def** %slot277, align 8
  %165 = load %struct.rtx_def*, %struct.rtx_def** %slot277, align 8
  %fld284 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %165, i32 0, i32 1
  %arrayidx285 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld284, i32 0, i64 0
  %rtx286 = bitcast %union.rtunion_def* %arrayidx285 to %struct.rtx_def**
  %166 = load %struct.rtx_def*, %struct.rtx_def** %rtx286, align 8
  store %struct.rtx_def* %166, %struct.rtx_def** %reg, align 8
  %167 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %168 = bitcast %struct.rtx_def* %167 to i32*
  %bf.load288 = load i32, i32* %168, align 8
  %bf.lshr289 = lshr i32 %bf.load288, 16
  %bf.clear290 = and i32 %bf.lshr289, 255
  store i32 %bf.clear290, i32* %mode287, align 4
  %169 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %fld291 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %169, i32 0, i32 1
  %arrayidx292 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld291, i32 0, i64 0
  %rtuint293 = bitcast %union.rtunion_def* %arrayidx292 to i32*
  %170 = load i32, i32* %rtuint293, align 4
  %cmp294 = icmp uge i32 %170, 21
  br i1 %cmp294, label %land.lhs.true.296, label %lor.lhs.false.302

land.lhs.true.296:                                ; preds = %for.body.276
  %171 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %fld297 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %171, i32 0, i32 1
  %arrayidx298 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld297, i32 0, i64 0
  %rtuint299 = bitcast %union.rtunion_def* %arrayidx298 to i32*
  %172 = load i32, i32* %rtuint299, align 4
  %cmp300 = icmp ule i32 %172, 28
  br i1 %cmp300, label %if.then.314, label %lor.lhs.false.302

lor.lhs.false.302:                                ; preds = %land.lhs.true.296, %for.body.276
  %173 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %fld303 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %173, i32 0, i32 1
  %arrayidx304 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld303, i32 0, i64 0
  %rtuint305 = bitcast %union.rtunion_def* %arrayidx304 to i32*
  %174 = load i32, i32* %rtuint305, align 4
  %cmp306 = icmp uge i32 %174, 45
  br i1 %cmp306, label %land.lhs.true.308, label %if.else.320

land.lhs.true.308:                                ; preds = %lor.lhs.false.302
  %175 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %fld309 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %175, i32 0, i32 1
  %arrayidx310 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld309, i32 0, i64 0
  %rtuint311 = bitcast %union.rtunion_def* %arrayidx310 to i32*
  %176 = load i32, i32* %rtuint311, align 4
  %cmp312 = icmp ule i32 %176, 52
  br i1 %cmp312, label %if.then.314, label %if.else.320

if.then.314:                                      ; preds = %land.lhs.true.308, %land.lhs.true.296
  %177 = load %struct.rtx_def*, %struct.rtx_def** %sse_addr_rtx, align 8
  store %struct.rtx_def* %177, %struct.rtx_def** %src_addr, align 8
  %178 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %fld315 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %178, i32 0, i32 1
  %arrayidx316 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld315, i32 0, i64 0
  %rtuint317 = bitcast %union.rtunion_def* %arrayidx316 to i32*
  %179 = load i32, i32* %rtuint317, align 4
  %sub318 = sub i32 %179, 21
  %mul319 = mul i32 %sub318, 16
  store i32 %mul319, i32* %src_offset, align 4
  br label %if.end.325

if.else.320:                                      ; preds = %land.lhs.true.308, %lor.lhs.false.302
  %180 = load %struct.rtx_def*, %struct.rtx_def** %int_addr_rtx, align 8
  store %struct.rtx_def* %180, %struct.rtx_def** %src_addr, align 8
  %181 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %fld321 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %181, i32 0, i32 1
  %arrayidx322 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld321, i32 0, i64 0
  %rtuint323 = bitcast %union.rtunion_def* %arrayidx322 to i32*
  %182 = load i32, i32* %rtuint323, align 4
  %mul324 = mul i32 %182, 8
  store i32 %mul324, i32* %src_offset, align 4
  br label %if.end.325

if.end.325:                                       ; preds = %if.else.320, %if.then.314
  %183 = load i32, i32* %mode287, align 4
  %184 = load %struct.rtx_def*, %struct.rtx_def** %src_addr, align 8
  %call326 = call %struct.rtx_def* @gen_rtx_MEM(i32 %183, %struct.rtx_def* %184)
  store %struct.rtx_def* %call326, %struct.rtx_def** %src_mem, align 8
  %185 = load %struct.rtx_def*, %struct.rtx_def** %src_mem, align 8
  %call327 = call i64 @get_varargs_alias_set()
  call void @set_mem_alias_set(%struct.rtx_def* %185, i64 %call327)
  %186 = load %struct.rtx_def*, %struct.rtx_def** %src_mem, align 8
  %187 = load i32, i32* %mode287, align 4
  %188 = load i32, i32* %src_offset, align 4
  %conv328 = sext i32 %188 to i64
  %call329 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %186, i32 %187, i64 %conv328, i32 1, i32 1)
  store %struct.rtx_def* %call329, %struct.rtx_def** %src_mem, align 8
  %189 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8
  %190 = load i32, i32* %mode287, align 4
  %191 = load %struct.rtx_def*, %struct.rtx_def** %slot277, align 8
  %fld330 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %191, i32 0, i32 1
  %arrayidx331 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld330, i32 0, i64 1
  %rtx332 = bitcast %union.rtunion_def* %arrayidx331 to %struct.rtx_def**
  %192 = load %struct.rtx_def*, %struct.rtx_def** %rtx332, align 8
  %fld333 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %192, i32 0, i32 1
  %arrayidx334 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld333, i32 0, i64 0
  %rtwint335 = bitcast %union.rtunion_def* %arrayidx334 to i64*
  %193 = load i64, i64* %rtwint335, align 8
  %call336 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %189, i32 %190, i64 %193, i32 1, i32 1)
  store %struct.rtx_def* %call336, %struct.rtx_def** %dest_mem, align 8
  %194 = load %struct.rtx_def*, %struct.rtx_def** %dest_mem, align 8
  %195 = load %struct.rtx_def*, %struct.rtx_def** %src_mem, align 8
  %call337 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %194, %struct.rtx_def* %195)
  br label %for.inc.338

for.inc.338:                                      ; preds = %if.end.325
  %196 = load i32, i32* %i262, align 4
  %inc339 = add nsw i32 %196, 1
  store i32 %inc339, i32* %i262, align 4
  br label %for.cond.269

for.end.340:                                      ; preds = %for.cond.269
  br label %if.end.341

if.end.341:                                       ; preds = %for.end.340, %if.end.259
  %197 = load i32, i32* %needed_intregs, align 4
  %tobool342 = icmp ne i32 %197, 0
  br i1 %tobool342, label %if.then.343, label %if.end.357

if.then.343:                                      ; preds = %if.end.341
  %198 = load %union.tree_node*, %union.tree_node** %gpr, align 8
  %common344 = bitcast %union.tree_node* %198 to %struct.tree_common*
  %type345 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common344, i32 0, i32 1
  %199 = load %union.tree_node*, %union.tree_node** %type345, align 8
  %200 = load %union.tree_node*, %union.tree_node** %gpr, align 8
  %201 = load i32, i32* %needed_intregs, align 4
  %mul346 = mul nsw i32 %201, 8
  %conv347 = sext i32 %mul346 to i64
  %call348 = call %union.tree_node* @build_int_2_wide(i64 %conv347, i64 0)
  %call349 = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 59, %union.tree_node* %199, %union.tree_node* %200, %union.tree_node* %call348)
  store %union.tree_node* %call349, %union.tree_node** %t, align 8
  %202 = load %union.tree_node*, %union.tree_node** %gpr, align 8
  %common350 = bitcast %union.tree_node* %202 to %struct.tree_common*
  %type351 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common350, i32 0, i32 1
  %203 = load %union.tree_node*, %union.tree_node** %type351, align 8
  %204 = load %union.tree_node*, %union.tree_node** %gpr, align 8
  %205 = load %union.tree_node*, %union.tree_node** %t, align 8
  %call352 = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 48, %union.tree_node* %203, %union.tree_node* %204, %union.tree_node* %205)
  store %union.tree_node* %call352, %union.tree_node** %t, align 8
  %206 = load %union.tree_node*, %union.tree_node** %t, align 8
  %common353 = bitcast %union.tree_node* %206 to %struct.tree_common*
  %side_effects_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common353, i32 0, i32 2
  %bf.load354 = load i32, i32* %side_effects_flag, align 8
  %bf.clear355 = and i32 %bf.load354, -257
  %bf.set = or i32 %bf.clear355, 256
  store i32 %bf.set, i32* %side_effects_flag, align 8
  %207 = load %union.tree_node*, %union.tree_node** %t, align 8
  %208 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call356 = call %struct.rtx_def* @expand_expr(%union.tree_node* %207, %struct.rtx_def* %208, i32 0, i32 0)
  br label %if.end.357

if.end.357:                                       ; preds = %if.then.343, %if.end.341
  %209 = load i32, i32* %needed_sseregs, align 4
  %tobool358 = icmp ne i32 %209, 0
  br i1 %tobool358, label %if.then.359, label %if.end.375

if.then.359:                                      ; preds = %if.end.357
  %210 = load %union.tree_node*, %union.tree_node** %fpr, align 8
  %common360 = bitcast %union.tree_node* %210 to %struct.tree_common*
  %type361 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common360, i32 0, i32 1
  %211 = load %union.tree_node*, %union.tree_node** %type361, align 8
  %212 = load %union.tree_node*, %union.tree_node** %fpr, align 8
  %213 = load i32, i32* %needed_sseregs, align 4
  %mul362 = mul nsw i32 %213, 16
  %conv363 = sext i32 %mul362 to i64
  %call364 = call %union.tree_node* @build_int_2_wide(i64 %conv363, i64 0)
  %call365 = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 59, %union.tree_node* %211, %union.tree_node* %212, %union.tree_node* %call364)
  store %union.tree_node* %call365, %union.tree_node** %t, align 8
  %214 = load %union.tree_node*, %union.tree_node** %fpr, align 8
  %common366 = bitcast %union.tree_node* %214 to %struct.tree_common*
  %type367 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common366, i32 0, i32 1
  %215 = load %union.tree_node*, %union.tree_node** %type367, align 8
  %216 = load %union.tree_node*, %union.tree_node** %fpr, align 8
  %217 = load %union.tree_node*, %union.tree_node** %t, align 8
  %call368 = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 48, %union.tree_node* %215, %union.tree_node* %216, %union.tree_node* %217)
  store %union.tree_node* %call368, %union.tree_node** %t, align 8
  %218 = load %union.tree_node*, %union.tree_node** %t, align 8
  %common369 = bitcast %union.tree_node* %218 to %struct.tree_common*
  %side_effects_flag370 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common369, i32 0, i32 2
  %bf.load371 = load i32, i32* %side_effects_flag370, align 8
  %bf.clear372 = and i32 %bf.load371, -257
  %bf.set373 = or i32 %bf.clear372, 256
  store i32 %bf.set373, i32* %side_effects_flag370, align 8
  %219 = load %union.tree_node*, %union.tree_node** %t, align 8
  %220 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call374 = call %struct.rtx_def* @expand_expr(%union.tree_node* %219, %struct.rtx_def* %220, i32 0, i32 0)
  br label %if.end.375

if.end.375:                                       ; preds = %if.then.359, %if.end.357
  %221 = load %struct.rtx_def*, %struct.rtx_def** %lab_over, align 8
  %call376 = call %struct.rtx_def* @gen_jump(%struct.rtx_def* %221)
  %call377 = call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %call376)
  %call378 = call %struct.rtx_def* @emit_barrier()
  %222 = load %struct.rtx_def*, %struct.rtx_def** %lab_false, align 8
  %call379 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %222)
  br label %if.end.380

if.end.380:                                       ; preds = %if.end.375, %if.end
  %223 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %call381 = call i32 @ix86_function_arg_boundary(i32 0, %union.tree_node* %223)
  %cmp382 = icmp sle i32 %call381, 64
  br i1 %cmp382, label %if.then.384, label %if.else.385

if.then.384:                                      ; preds = %if.end.380
  %224 = load %union.tree_node*, %union.tree_node** %ovf, align 8
  store %union.tree_node* %224, %union.tree_node** %t, align 8
  br label %if.end.400

if.else.385:                                      ; preds = %if.end.380
  %225 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %call387 = call i32 @ix86_function_arg_boundary(i32 0, %union.tree_node* %225)
  %div388 = sdiv i32 %call387, 8
  %conv389 = sext i32 %div388 to i64
  store i64 %conv389, i64* %align386, align 8
  %226 = load %union.tree_node*, %union.tree_node** %ovf, align 8
  %common390 = bitcast %union.tree_node* %226 to %struct.tree_common*
  %type391 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common390, i32 0, i32 1
  %227 = load %union.tree_node*, %union.tree_node** %type391, align 8
  %228 = load %union.tree_node*, %union.tree_node** %ovf, align 8
  %229 = load i64, i64* %align386, align 8
  %sub392 = sub nsw i64 %229, 1
  %call393 = call %union.tree_node* @build_int_2_wide(i64 %sub392, i64 0)
  %call394 = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 59, %union.tree_node* %227, %union.tree_node* %228, %union.tree_node* %call393)
  store %union.tree_node* %call394, %union.tree_node** %t, align 8
  %230 = load %union.tree_node*, %union.tree_node** %t, align 8
  %common395 = bitcast %union.tree_node* %230 to %struct.tree_common*
  %type396 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common395, i32 0, i32 1
  %231 = load %union.tree_node*, %union.tree_node** %type396, align 8
  %232 = load %union.tree_node*, %union.tree_node** %t, align 8
  %233 = load i64, i64* %align386, align 8
  %sub397 = sub nsw i64 0, %233
  %call398 = call %union.tree_node* @build_int_2_wide(i64 %sub397, i64 -1)
  %call399 = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 88, %union.tree_node* %231, %union.tree_node* %232, %union.tree_node* %call398)
  store %union.tree_node* %call399, %union.tree_node** %t, align 8
  br label %if.end.400

if.end.400:                                       ; preds = %if.else.385, %if.then.384
  %234 = load %union.tree_node*, %union.tree_node** %t, align 8
  %call401 = call %union.tree_node* @save_expr(%union.tree_node* %234)
  store %union.tree_node* %call401, %union.tree_node** %t, align 8
  %235 = load %union.tree_node*, %union.tree_node** %t, align 8
  %236 = load %struct.rtx_def*, %struct.rtx_def** %addr_rtx, align 8
  %237 = load i32, i32* @target_flags, align 4
  %and402 = and i32 %237, 33554432
  %tobool403 = icmp ne i32 %and402, 0
  %cond404 = select i1 %tobool403, i32 5, i32 4
  %call405 = call %struct.rtx_def* @expand_expr(%union.tree_node* %235, %struct.rtx_def* %236, i32 %cond404, i32 0)
  store %struct.rtx_def* %call405, %struct.rtx_def** %r, align 8
  %238 = load %struct.rtx_def*, %struct.rtx_def** %r, align 8
  %239 = load %struct.rtx_def*, %struct.rtx_def** %addr_rtx, align 8
  %cmp406 = icmp ne %struct.rtx_def* %238, %239
  br i1 %cmp406, label %if.then.408, label %if.end.410

if.then.408:                                      ; preds = %if.end.400
  %240 = load %struct.rtx_def*, %struct.rtx_def** %addr_rtx, align 8
  %241 = load %struct.rtx_def*, %struct.rtx_def** %r, align 8
  %call409 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %240, %struct.rtx_def* %241)
  br label %if.end.410

if.end.410:                                       ; preds = %if.then.408, %if.end.400
  %242 = load %union.tree_node*, %union.tree_node** %t, align 8
  %common411 = bitcast %union.tree_node* %242 to %struct.tree_common*
  %type412 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common411, i32 0, i32 1
  %243 = load %union.tree_node*, %union.tree_node** %type412, align 8
  %244 = load %union.tree_node*, %union.tree_node** %t, align 8
  %245 = load i32, i32* %rsize, align 4
  %246 = load i32, i32* @target_flags, align 4
  %and413 = and i32 %246, 33554432
  %tobool414 = icmp ne i32 %and413, 0
  %cond415 = select i1 %tobool414, i32 8, i32 4
  %mul416 = mul nsw i32 %245, %cond415
  %conv417 = sext i32 %mul416 to i64
  %call418 = call %union.tree_node* @build_int_2_wide(i64 %conv417, i64 0)
  %call419 = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 59, %union.tree_node* %243, %union.tree_node* %244, %union.tree_node* %call418)
  store %union.tree_node* %call419, %union.tree_node** %t, align 8
  %247 = load %union.tree_node*, %union.tree_node** %ovf, align 8
  %common420 = bitcast %union.tree_node* %247 to %struct.tree_common*
  %type421 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common420, i32 0, i32 1
  %248 = load %union.tree_node*, %union.tree_node** %type421, align 8
  %249 = load %union.tree_node*, %union.tree_node** %ovf, align 8
  %250 = load %union.tree_node*, %union.tree_node** %t, align 8
  %call422 = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 48, %union.tree_node* %248, %union.tree_node* %249, %union.tree_node* %250)
  store %union.tree_node* %call422, %union.tree_node** %t, align 8
  %251 = load %union.tree_node*, %union.tree_node** %t, align 8
  %common423 = bitcast %union.tree_node* %251 to %struct.tree_common*
  %side_effects_flag424 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common423, i32 0, i32 2
  %bf.load425 = load i32, i32* %side_effects_flag424, align 8
  %bf.clear426 = and i32 %bf.load425, -257
  %bf.set427 = or i32 %bf.clear426, 256
  store i32 %bf.set427, i32* %side_effects_flag424, align 8
  %252 = load %union.tree_node*, %union.tree_node** %t, align 8
  %253 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call428 = call %struct.rtx_def* @expand_expr(%union.tree_node* %252, %struct.rtx_def* %253, i32 0, i32 0)
  %254 = load %struct.rtx_def*, %struct.rtx_def** %container, align 8
  %tobool429 = icmp ne %struct.rtx_def* %254, null
  br i1 %tobool429, label %if.then.430, label %if.end.432

if.then.430:                                      ; preds = %if.end.410
  %255 = load %struct.rtx_def*, %struct.rtx_def** %lab_over, align 8
  %call431 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %255)
  br label %if.end.432

if.end.432:                                       ; preds = %if.then.430, %if.end.410
  %256 = load %struct.rtx_def*, %struct.rtx_def** %addr_rtx, align 8
  store %struct.rtx_def* %256, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end.432, %if.then
  %257 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %257
}

declare %struct.rtx_def* @std_expand_builtin_va_arg(%union.tree_node*, %union.tree_node*) #0

declare void @emit_cmp_and_jump_insns(%struct.rtx_def*, %struct.rtx_def*, i32, %struct.rtx_def*, i32, i32, %struct.rtx_def*) #0

declare %struct.rtx_def* @assign_temp(%union.tree_node*, i32, i32, i32) #0

declare %struct.rtx_def* @adjust_address_1(%struct.rtx_def*, i32, i64, i32, i32) #0

declare %struct.rtx_def* @emit_jump_insn(%struct.rtx_def*) #0

declare %struct.rtx_def* @gen_jump(%struct.rtx_def*) #0

declare %struct.rtx_def* @emit_barrier() #0

declare %struct.rtx_def* @emit_label(%struct.rtx_def*) #0

declare %union.tree_node* @save_expr(%union.tree_node*) #0

; Function Attrs: nounwind uwtable
define i32 @x86_64_general_operand(%struct.rtx_def* %op, i32 %mode) #1 {
entry:
  %retval = alloca i32, align 4
  %op.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  store %struct.rtx_def* %op, %struct.rtx_def** %op.addr, align 8
  store i32 %mode, i32* %mode.addr, align 4
  %0 = load i32, i32* @target_flags, align 4
  %and = and i32 %0, 33554432
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %2 = load i32, i32* %mode.addr, align 4
  %call = call i32 @general_operand(%struct.rtx_def* %1, i32 %2)
  store i32 %call, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %4 = load i32, i32* %mode.addr, align 4
  %call1 = call i32 @nonimmediate_operand(%struct.rtx_def* %3, i32 %4)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  store i32 1, i32* %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %5 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %call5 = call i32 @x86_64_sign_extended_value(%struct.rtx_def* %5)
  store i32 %call5, i32* %retval
  br label %return

return:                                           ; preds = %if.end.4, %if.then.3, %if.then
  %6 = load i32, i32* %retval
  ret i32 %6
}

declare i32 @general_operand(%struct.rtx_def*, i32) #0

declare i32 @nonimmediate_operand(%struct.rtx_def*, i32) #0

; Function Attrs: nounwind uwtable
define i32 @x86_64_sign_extended_value(%struct.rtx_def* %value) #1 {
entry:
  %retval = alloca i32, align 4
  %value.addr = alloca %struct.rtx_def*, align 8
  %val = alloca i64, align 8
  %op1 = alloca %struct.rtx_def*, align 8
  %op2 = alloca %struct.rtx_def*, align 8
  %offset = alloca i64, align 8
  store %struct.rtx_def* %value, %struct.rtx_def** %value.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %sw.default.119 [
    i32 54, label %sw.bb
    i32 68, label %sw.bb.2
    i32 67, label %sw.bb.7
    i32 58, label %sw.bb.12
  ]

sw.bb:                                            ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx to i64*
  %3 = load i64, i64* %rtwint, align 8
  %call = call i64 @trunc_int_for_mode(i64 %3, i32 5)
  store i64 %call, i64* %val, align 8
  %4 = load i64, i64* %val, align 8
  %call1 = call i64 @trunc_int_for_mode(i64 %4, i32 4)
  %5 = load i64, i64* %val, align 8
  %cmp = icmp eq i64 %call1, %5
  %conv = zext i1 %cmp to i32
  store i32 %conv, i32* %retval
  br label %return

sw.bb.2:                                          ; preds = %entry
  %6 = load i32, i32* @ix86_cmodel, align 4
  %cmp3 = icmp eq i32 %6, 1
  br i1 %cmp3, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %sw.bb.2
  %7 = load i32, i32* @ix86_cmodel, align 4
  %cmp5 = icmp eq i32 %7, 2
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %sw.bb.2
  %8 = phi i1 [ true, %sw.bb.2 ], [ %cmp5, %lor.rhs ]
  %lor.ext = zext i1 %8 to i32
  store i32 %lor.ext, i32* %retval
  br label %return

sw.bb.7:                                          ; preds = %entry
  %9 = load i32, i32* @ix86_cmodel, align 4
  %cmp8 = icmp ne i32 %9, 4
  br i1 %cmp8, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %sw.bb.7
  %10 = load i32, i32* @ix86_cmodel, align 4
  %cmp10 = icmp ne i32 %10, 5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %sw.bb.7
  %11 = phi i1 [ false, %sw.bb.7 ], [ %cmp10, %land.rhs ]
  %land.ext = zext i1 %11 to i32
  store i32 %land.ext, i32* %retval
  br label %return

sw.bb.12:                                         ; preds = %entry
  %12 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8
  %fld13 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1
  %arrayidx14 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld13, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx14 to %struct.rtx_def**
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %14 = bitcast %struct.rtx_def* %13 to i32*
  %bf.load15 = load i32, i32* %14, align 8
  %bf.clear16 = and i32 %bf.load15, 65535
  %cmp17 = icmp eq i32 %bf.clear16, 42
  br i1 %cmp17, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %sw.bb.12
  %15 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8
  %fld19 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1
  %arrayidx20 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld19, i32 0, i64 0
  %rtx21 = bitcast %union.rtunion_def* %arrayidx20 to %struct.rtx_def**
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rtx21, align 8
  %fld22 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1
  %arrayidx23 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld22, i32 0, i64 0
  %rtvec = bitcast %union.rtunion_def* %arrayidx23 to %struct.rtvec_def**
  %17 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec, align 8
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %17, i32 0, i32 0
  %18 = load i32, i32* %num_elem, align 4
  %cmp24 = icmp eq i32 %18, 1
  br i1 %cmp24, label %land.lhs.true.26, label %if.else

land.lhs.true.26:                                 ; preds = %land.lhs.true
  %19 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8
  %fld27 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1
  %arrayidx28 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld27, i32 0, i64 0
  %rtx29 = bitcast %union.rtunion_def* %arrayidx28 to %struct.rtx_def**
  %20 = load %struct.rtx_def*, %struct.rtx_def** %rtx29, align 8
  %fld30 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1
  %arrayidx31 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld30, i32 0, i64 1
  %rtint = bitcast %union.rtunion_def* %arrayidx31 to i32*
  %21 = load i32, i32* %rtint, align 4
  %cmp32 = icmp eq i32 %21, 15
  br i1 %cmp32, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true.26
  store i32 1, i32* %retval
  br label %return

if.else:                                          ; preds = %land.lhs.true.26, %land.lhs.true, %sw.bb.12
  %22 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8
  %fld34 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1
  %arrayidx35 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld34, i32 0, i64 0
  %rtx36 = bitcast %union.rtunion_def* %arrayidx35 to %struct.rtx_def**
  %23 = load %struct.rtx_def*, %struct.rtx_def** %rtx36, align 8
  %24 = bitcast %struct.rtx_def* %23 to i32*
  %bf.load37 = load i32, i32* %24, align 8
  %bf.clear38 = and i32 %bf.load37, 65535
  %cmp39 = icmp eq i32 %bf.clear38, 75
  br i1 %cmp39, label %if.then.41, label %if.end.117

if.then.41:                                       ; preds = %if.else
  %25 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8
  %fld42 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1
  %arrayidx43 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld42, i32 0, i64 0
  %rtx44 = bitcast %union.rtunion_def* %arrayidx43 to %struct.rtx_def**
  %26 = load %struct.rtx_def*, %struct.rtx_def** %rtx44, align 8
  %fld45 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %26, i32 0, i32 1
  %arrayidx46 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld45, i32 0, i64 0
  %rtx47 = bitcast %union.rtunion_def* %arrayidx46 to %struct.rtx_def**
  %27 = load %struct.rtx_def*, %struct.rtx_def** %rtx47, align 8
  store %struct.rtx_def* %27, %struct.rtx_def** %op1, align 8
  %28 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8
  %fld48 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1
  %arrayidx49 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld48, i32 0, i64 0
  %rtx50 = bitcast %union.rtunion_def* %arrayidx49 to %struct.rtx_def**
  %29 = load %struct.rtx_def*, %struct.rtx_def** %rtx50, align 8
  %fld51 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %29, i32 0, i32 1
  %arrayidx52 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld51, i32 0, i64 1
  %rtx53 = bitcast %union.rtunion_def* %arrayidx52 to %struct.rtx_def**
  %30 = load %struct.rtx_def*, %struct.rtx_def** %rtx53, align 8
  store %struct.rtx_def* %30, %struct.rtx_def** %op2, align 8
  %31 = load i32, i32* @ix86_cmodel, align 4
  %cmp54 = icmp eq i32 %31, 4
  br i1 %cmp54, label %if.then.56, label %if.end

if.then.56:                                       ; preds = %if.then.41
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then.41
  %32 = load %struct.rtx_def*, %struct.rtx_def** %op2, align 8
  %33 = bitcast %struct.rtx_def* %32 to i32*
  %bf.load57 = load i32, i32* %33, align 8
  %bf.clear58 = and i32 %bf.load57, 65535
  %cmp59 = icmp ne i32 %bf.clear58, 54
  br i1 %cmp59, label %if.then.61, label %if.end.62

if.then.61:                                       ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

if.end.62:                                        ; preds = %if.end
  %34 = load %struct.rtx_def*, %struct.rtx_def** %op2, align 8
  %fld63 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %34, i32 0, i32 1
  %arrayidx64 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld63, i32 0, i64 0
  %rtwint65 = bitcast %union.rtunion_def* %arrayidx64 to i64*
  %35 = load i64, i64* %rtwint65, align 8
  %call66 = call i64 @trunc_int_for_mode(i64 %35, i32 5)
  store i64 %call66, i64* %offset, align 8
  %36 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %37 = bitcast %struct.rtx_def* %36 to i32*
  %bf.load67 = load i32, i32* %37, align 8
  %bf.clear68 = and i32 %bf.load67, 65535
  switch i32 %bf.clear68, label %sw.default [
    i32 68, label %sw.bb.69
    i32 67, label %sw.bb.92
  ]

sw.bb.69:                                         ; preds = %if.end.62
  %38 = load i32, i32* @ix86_cmodel, align 4
  %cmp70 = icmp eq i32 %38, 1
  br i1 %cmp70, label %land.lhs.true.72, label %if.end.80

land.lhs.true.72:                                 ; preds = %sw.bb.69
  %39 = load i64, i64* %offset, align 8
  %cmp73 = icmp slt i64 %39, 1073741824
  br i1 %cmp73, label %land.lhs.true.75, label %if.end.80

land.lhs.true.75:                                 ; preds = %land.lhs.true.72
  %40 = load i64, i64* %offset, align 8
  %call76 = call i64 @trunc_int_for_mode(i64 %40, i32 4)
  %41 = load i64, i64* %offset, align 8
  %cmp77 = icmp eq i64 %call76, %41
  br i1 %cmp77, label %if.then.79, label %if.end.80

if.then.79:                                       ; preds = %land.lhs.true.75
  store i32 1, i32* %retval
  br label %return

if.end.80:                                        ; preds = %land.lhs.true.75, %land.lhs.true.72, %sw.bb.69
  %42 = load i32, i32* @ix86_cmodel, align 4
  %cmp81 = icmp eq i32 %42, 2
  br i1 %cmp81, label %land.lhs.true.83, label %if.end.91

land.lhs.true.83:                                 ; preds = %if.end.80
  %43 = load i64, i64* %offset, align 8
  %cmp84 = icmp sgt i64 %43, 0
  br i1 %cmp84, label %land.lhs.true.86, label %if.end.91

land.lhs.true.86:                                 ; preds = %land.lhs.true.83
  %44 = load i64, i64* %offset, align 8
  %call87 = call i64 @trunc_int_for_mode(i64 %44, i32 4)
  %45 = load i64, i64* %offset, align 8
  %cmp88 = icmp eq i64 %call87, %45
  br i1 %cmp88, label %if.then.90, label %if.end.91

if.then.90:                                       ; preds = %land.lhs.true.86
  store i32 1, i32* %retval
  br label %return

if.end.91:                                        ; preds = %land.lhs.true.86, %land.lhs.true.83, %if.end.80
  br label %sw.epilog

sw.bb.92:                                         ; preds = %if.end.62
  %46 = load i32, i32* @ix86_cmodel, align 4
  %cmp93 = icmp eq i32 %46, 1
  br i1 %cmp93, label %land.lhs.true.97, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %sw.bb.92
  %47 = load i32, i32* @ix86_cmodel, align 4
  %cmp95 = icmp eq i32 %47, 3
  br i1 %cmp95, label %land.lhs.true.97, label %if.end.105

land.lhs.true.97:                                 ; preds = %lor.lhs.false, %sw.bb.92
  %48 = load i64, i64* %offset, align 8
  %cmp98 = icmp slt i64 %48, 1073741824
  br i1 %cmp98, label %land.lhs.true.100, label %if.end.105

land.lhs.true.100:                                ; preds = %land.lhs.true.97
  %49 = load i64, i64* %offset, align 8
  %call101 = call i64 @trunc_int_for_mode(i64 %49, i32 4)
  %50 = load i64, i64* %offset, align 8
  %cmp102 = icmp eq i64 %call101, %50
  br i1 %cmp102, label %if.then.104, label %if.end.105

if.then.104:                                      ; preds = %land.lhs.true.100
  store i32 1, i32* %retval
  br label %return

if.end.105:                                       ; preds = %land.lhs.true.100, %land.lhs.true.97, %lor.lhs.false
  %51 = load i32, i32* @ix86_cmodel, align 4
  %cmp106 = icmp eq i32 %51, 2
  br i1 %cmp106, label %land.lhs.true.108, label %if.end.116

land.lhs.true.108:                                ; preds = %if.end.105
  %52 = load i64, i64* %offset, align 8
  %cmp109 = icmp sgt i64 %52, 0
  br i1 %cmp109, label %land.lhs.true.111, label %if.end.116

land.lhs.true.111:                                ; preds = %land.lhs.true.108
  %53 = load i64, i64* %offset, align 8
  %call112 = call i64 @trunc_int_for_mode(i64 %53, i32 4)
  %54 = load i64, i64* %offset, align 8
  %cmp113 = icmp eq i64 %call112, %54
  br i1 %cmp113, label %if.then.115, label %if.end.116

if.then.115:                                      ; preds = %land.lhs.true.111
  store i32 1, i32* %retval
  br label %return

if.end.116:                                       ; preds = %land.lhs.true.111, %land.lhs.true.108, %if.end.105
  br label %sw.epilog

sw.default:                                       ; preds = %if.end.62
  store i32 0, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %if.end.116, %if.end.91
  br label %if.end.117

if.end.117:                                       ; preds = %sw.epilog, %if.else
  br label %if.end.118

if.end.118:                                       ; preds = %if.end.117
  store i32 0, i32* %retval
  br label %return

sw.default.119:                                   ; preds = %entry
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %sw.default.119, %if.end.118, %sw.default, %if.then.115, %if.then.104, %if.then.90, %if.then.79, %if.then.61, %if.then.56, %if.then, %land.end, %lor.end, %sw.bb
  %55 = load i32, i32* %retval
  ret i32 %55
}

; Function Attrs: nounwind uwtable
define i32 @x86_64_szext_general_operand(%struct.rtx_def* %op, i32 %mode) #1 {
entry:
  %retval = alloca i32, align 4
  %op.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  store %struct.rtx_def* %op, %struct.rtx_def** %op.addr, align 8
  store i32 %mode, i32* %mode.addr, align 4
  %0 = load i32, i32* @target_flags, align 4
  %and = and i32 %0, 33554432
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %2 = load i32, i32* %mode.addr, align 4
  %call = call i32 @general_operand(%struct.rtx_def* %1, i32 %2)
  store i32 %call, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %4 = load i32, i32* %mode.addr, align 4
  %call1 = call i32 @nonimmediate_operand(%struct.rtx_def* %3, i32 %4)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  store i32 1, i32* %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %5 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %call5 = call i32 @x86_64_sign_extended_value(%struct.rtx_def* %5)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.end.4
  %6 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %call7 = call i32 @x86_64_zero_extended_value(%struct.rtx_def* %6)
  %tobool8 = icmp ne i32 %call7, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.end.4
  %7 = phi i1 [ true, %if.end.4 ], [ %tobool8, %lor.rhs ]
  %lor.ext = zext i1 %7 to i32
  store i32 %lor.ext, i32* %retval
  br label %return

return:                                           ; preds = %lor.end, %if.then.3, %if.then
  %8 = load i32, i32* %retval
  ret i32 %8
}

; Function Attrs: nounwind uwtable
define i32 @x86_64_zero_extended_value(%struct.rtx_def* %value) #1 {
entry:
  %retval = alloca i32, align 4
  %value.addr = alloca %struct.rtx_def*, align 8
  %op1 = alloca %struct.rtx_def*, align 8
  %op2 = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %value, %struct.rtx_def** %value.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %sw.default.61 [
    i32 55, label %sw.bb
    i32 54, label %sw.bb.1
    i32 68, label %sw.bb.2
    i32 67, label %sw.bb.3
    i32 58, label %sw.bb.8
  ]

sw.bb:                                            ; preds = %entry
  store i32 0, i32* %retval
  br label %return

sw.bb.1:                                          ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx to i64*
  %3 = load i64, i64* %rtwint, align 8
  %and = and i64 %3, -4294967296
  %tobool = icmp ne i64 %and, 0
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  store i32 %lnot.ext, i32* %retval
  br label %return

sw.bb.2:                                          ; preds = %entry
  %4 = load i32, i32* @ix86_cmodel, align 4
  %cmp = icmp eq i32 %4, 1
  %conv = zext i1 %cmp to i32
  store i32 %conv, i32* %retval
  br label %return

sw.bb.3:                                          ; preds = %entry
  %5 = load i32, i32* @ix86_cmodel, align 4
  %cmp4 = icmp eq i32 %5, 1
  br i1 %cmp4, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %sw.bb.3
  %6 = load i32, i32* @ix86_cmodel, align 4
  %cmp6 = icmp eq i32 %6, 3
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %sw.bb.3
  %7 = phi i1 [ true, %sw.bb.3 ], [ %cmp6, %lor.rhs ]
  %lor.ext = zext i1 %7 to i32
  store i32 %lor.ext, i32* %retval
  br label %return

sw.bb.8:                                          ; preds = %entry
  %8 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8
  %fld9 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1
  %arrayidx10 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld9, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx10 to %struct.rtx_def**
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %10 = bitcast %struct.rtx_def* %9 to i32*
  %bf.load11 = load i32, i32* %10, align 8
  %bf.clear12 = and i32 %bf.load11, 65535
  %cmp13 = icmp eq i32 %bf.clear12, 75
  br i1 %cmp13, label %if.then, label %if.end.60

if.then:                                          ; preds = %sw.bb.8
  %11 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8
  %fld15 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1
  %arrayidx16 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld15, i32 0, i64 0
  %rtx17 = bitcast %union.rtunion_def* %arrayidx16 to %struct.rtx_def**
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rtx17, align 8
  %fld18 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1
  %arrayidx19 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld18, i32 0, i64 0
  %rtx20 = bitcast %union.rtunion_def* %arrayidx19 to %struct.rtx_def**
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rtx20, align 8
  store %struct.rtx_def* %13, %struct.rtx_def** %op1, align 8
  %14 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8
  %fld21 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1
  %arrayidx22 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld21, i32 0, i64 0
  %rtx23 = bitcast %union.rtunion_def* %arrayidx22 to %struct.rtx_def**
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rtx23, align 8
  %fld24 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1
  %arrayidx25 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld24, i32 0, i64 1
  %rtx26 = bitcast %union.rtunion_def* %arrayidx25 to %struct.rtx_def**
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rtx26, align 8
  store %struct.rtx_def* %16, %struct.rtx_def** %op2, align 8
  %17 = load i32, i32* @ix86_cmodel, align 4
  %cmp27 = icmp eq i32 %17, 4
  br i1 %cmp27, label %if.then.29, label %if.end

if.then.29:                                       ; preds = %if.then
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then
  %18 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %19 = bitcast %struct.rtx_def* %18 to i32*
  %bf.load30 = load i32, i32* %19, align 8
  %bf.clear31 = and i32 %bf.load30, 65535
  switch i32 %bf.clear31, label %sw.default [
    i32 68, label %sw.bb.32
    i32 67, label %sw.bb.33
  ]

sw.bb.32:                                         ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

sw.bb.33:                                         ; preds = %if.end
  %20 = load i32, i32* @ix86_cmodel, align 4
  %cmp34 = icmp eq i32 %20, 1
  br i1 %cmp34, label %land.lhs.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %sw.bb.33
  %21 = load i32, i32* @ix86_cmodel, align 4
  %cmp36 = icmp eq i32 %21, 3
  br i1 %cmp36, label %land.lhs.true, label %if.end.59

land.lhs.true:                                    ; preds = %lor.lhs.false, %sw.bb.33
  %22 = load %struct.rtx_def*, %struct.rtx_def** %op2, align 8
  %23 = bitcast %struct.rtx_def* %22 to i32*
  %bf.load38 = load i32, i32* %23, align 8
  %bf.clear39 = and i32 %bf.load38, 65535
  %cmp40 = icmp eq i32 %bf.clear39, 54
  br i1 %cmp40, label %land.lhs.true.42, label %if.end.59

land.lhs.true.42:                                 ; preds = %land.lhs.true
  %24 = load %struct.rtx_def*, %struct.rtx_def** %op2, align 8
  %fld43 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1
  %arrayidx44 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld43, i32 0, i64 0
  %rtwint45 = bitcast %union.rtunion_def* %arrayidx44 to i64*
  %25 = load i64, i64* %rtwint45, align 8
  %call = call i64 @trunc_int_for_mode(i64 %25, i32 5)
  %cmp46 = icmp sgt i64 %call, -65536
  br i1 %cmp46, label %land.lhs.true.48, label %if.end.59

land.lhs.true.48:                                 ; preds = %land.lhs.true.42
  %26 = load %struct.rtx_def*, %struct.rtx_def** %op2, align 8
  %fld49 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %26, i32 0, i32 1
  %arrayidx50 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld49, i32 0, i64 0
  %rtwint51 = bitcast %union.rtunion_def* %arrayidx50 to i64*
  %27 = load i64, i64* %rtwint51, align 8
  %call52 = call i64 @trunc_int_for_mode(i64 %27, i32 4)
  %28 = load %struct.rtx_def*, %struct.rtx_def** %op2, align 8
  %fld53 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1
  %arrayidx54 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld53, i32 0, i64 0
  %rtwint55 = bitcast %union.rtunion_def* %arrayidx54 to i64*
  %29 = load i64, i64* %rtwint55, align 8
  %cmp56 = icmp eq i64 %call52, %29
  br i1 %cmp56, label %if.then.58, label %if.end.59

if.then.58:                                       ; preds = %land.lhs.true.48
  store i32 1, i32* %retval
  br label %return

if.end.59:                                        ; preds = %land.lhs.true.48, %land.lhs.true.42, %land.lhs.true, %lor.lhs.false
  br label %sw.epilog

sw.default:                                       ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %if.end.59
  br label %if.end.60

if.end.60:                                        ; preds = %sw.epilog, %sw.bb.8
  store i32 0, i32* %retval
  br label %return

sw.default.61:                                    ; preds = %entry
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %sw.default.61, %if.end.60, %sw.default, %if.then.58, %sw.bb.32, %if.then.29, %lor.end, %sw.bb.2, %sw.bb.1, %sw.bb
  %30 = load i32, i32* %retval
  ret i32 %30
}

; Function Attrs: nounwind uwtable
define i32 @x86_64_nonmemory_operand(%struct.rtx_def* %op, i32 %mode) #1 {
entry:
  %retval = alloca i32, align 4
  %op.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  store %struct.rtx_def* %op, %struct.rtx_def** %op.addr, align 8
  store i32 %mode, i32* %mode.addr, align 4
  %0 = load i32, i32* @target_flags, align 4
  %and = and i32 %0, 33554432
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %2 = load i32, i32* %mode.addr, align 4
  %call = call i32 @nonmemory_operand(%struct.rtx_def* %1, i32 %2)
  store i32 %call, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %4 = load i32, i32* %mode.addr, align 4
  %call1 = call i32 @register_operand(%struct.rtx_def* %3, i32 %4)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  store i32 1, i32* %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %5 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %call5 = call i32 @x86_64_sign_extended_value(%struct.rtx_def* %5)
  store i32 %call5, i32* %retval
  br label %return

return:                                           ; preds = %if.end.4, %if.then.3, %if.then
  %6 = load i32, i32* %retval
  ret i32 %6
}

declare i32 @nonmemory_operand(%struct.rtx_def*, i32) #0

declare i32 @register_operand(%struct.rtx_def*, i32) #0

; Function Attrs: nounwind uwtable
define i32 @x86_64_movabs_operand(%struct.rtx_def* %op, i32 %mode) #1 {
entry:
  %retval = alloca i32, align 4
  %op.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  store %struct.rtx_def* %op, %struct.rtx_def** %op.addr, align 8
  store i32 %mode, i32* %mode.addr, align 4
  %0 = load i32, i32* @target_flags, align 4
  %and = and i32 %0, 33554432
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* @flag_pic, align 4
  %tobool1 = icmp ne i32 %1, 0
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %3 = load i32, i32* %mode.addr, align 4
  %call = call i32 @nonmemory_operand(%struct.rtx_def* %2, i32 %3)
  store i32 %call, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %4 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %5 = load i32, i32* %mode.addr, align 4
  %call2 = call i32 @register_operand(%struct.rtx_def* %4, i32 %5)
  %tobool3 = icmp ne i32 %call2, 0
  br i1 %tobool3, label %if.then.7, label %lor.lhs.false.4

lor.lhs.false.4:                                  ; preds = %if.end
  %6 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %call5 = call i32 @x86_64_sign_extended_value(%struct.rtx_def* %6)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.then.7, label %if.end.8

if.then.7:                                        ; preds = %lor.lhs.false.4, %if.end
  store i32 1, i32* %retval
  br label %return

if.end.8:                                         ; preds = %lor.lhs.false.4
  %7 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %8 = bitcast %struct.rtx_def* %7 to i32*
  %bf.load = load i32, i32* %8, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 67
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false.9

lor.lhs.false.9:                                  ; preds = %if.end.8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %10 = bitcast %struct.rtx_def* %9 to i32*
  %bf.load10 = load i32, i32* %10, align 8
  %bf.clear11 = and i32 %bf.load10, 65535
  %cmp12 = icmp eq i32 %bf.clear11, 68
  br i1 %cmp12, label %land.lhs.true, label %lor.lhs.false.13

lor.lhs.false.13:                                 ; preds = %lor.lhs.false.9
  %11 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %12 = bitcast %struct.rtx_def* %11 to i32*
  %bf.load14 = load i32, i32* %12, align 8
  %bf.clear15 = and i32 %bf.load14, 65535
  %cmp16 = icmp eq i32 %bf.clear15, 54
  br i1 %cmp16, label %land.lhs.true, label %lor.lhs.false.17

lor.lhs.false.17:                                 ; preds = %lor.lhs.false.13
  %13 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %14 = bitcast %struct.rtx_def* %13 to i32*
  %bf.load18 = load i32, i32* %14, align 8
  %bf.clear19 = and i32 %bf.load18, 65535
  %cmp20 = icmp eq i32 %bf.clear19, 55
  br i1 %cmp20, label %land.lhs.true, label %lor.lhs.false.21

lor.lhs.false.21:                                 ; preds = %lor.lhs.false.17
  %15 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %16 = bitcast %struct.rtx_def* %15 to i32*
  %bf.load22 = load i32, i32* %16, align 8
  %bf.clear23 = and i32 %bf.load22, 65535
  %cmp24 = icmp eq i32 %bf.clear23, 58
  br i1 %cmp24, label %land.lhs.true, label %lor.lhs.false.25

lor.lhs.false.25:                                 ; preds = %lor.lhs.false.21
  %17 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %18 = bitcast %struct.rtx_def* %17 to i32*
  %bf.load26 = load i32, i32* %18, align 8
  %bf.clear27 = and i32 %bf.load26, 65535
  %cmp28 = icmp eq i32 %bf.clear27, 134
  br i1 %cmp28, label %land.lhs.true, label %lor.lhs.false.29

lor.lhs.false.29:                                 ; preds = %lor.lhs.false.25
  %19 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %20 = bitcast %struct.rtx_def* %19 to i32*
  %bf.load30 = load i32, i32* %20, align 8
  %bf.clear31 = and i32 %bf.load30, 65535
  %cmp32 = icmp eq i32 %bf.clear31, 56
  br i1 %cmp32, label %land.lhs.true, label %lor.lhs.false.33

lor.lhs.false.33:                                 ; preds = %lor.lhs.false.29
  %21 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %22 = bitcast %struct.rtx_def* %21 to i32*
  %bf.load34 = load i32, i32* %22, align 8
  %bf.clear35 = and i32 %bf.load34, 65535
  %cmp36 = icmp eq i32 %bf.clear35, 140
  br i1 %cmp36, label %land.lhs.true, label %if.end.40

land.lhs.true:                                    ; preds = %lor.lhs.false.33, %lor.lhs.false.29, %lor.lhs.false.25, %lor.lhs.false.21, %lor.lhs.false.17, %lor.lhs.false.13, %lor.lhs.false.9, %if.end.8
  %23 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %call37 = call i32 @symbolic_reference_mentioned_p(%struct.rtx_def* %23)
  %tobool38 = icmp ne i32 %call37, 0
  br i1 %tobool38, label %if.end.40, label %if.then.39

if.then.39:                                       ; preds = %land.lhs.true
  store i32 1, i32* %retval
  br label %return

if.end.40:                                        ; preds = %land.lhs.true, %lor.lhs.false.33
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.40, %if.then.39, %if.then.7, %if.then
  %24 = load i32, i32* %retval
  ret i32 %24
}

; Function Attrs: nounwind uwtable
define i32 @symbolic_reference_mentioned_p(%struct.rtx_def* %op) #1 {
entry:
  %retval = alloca i32, align 4
  %op.addr = alloca %struct.rtx_def*, align 8
  %fmt = alloca i8*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.rtx_def* %op, %struct.rtx_def** %op.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 68
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %3 = bitcast %struct.rtx_def* %2 to i32*
  %bf.load1 = load i32, i32* %3, align 8
  %bf.clear2 = and i32 %bf.load1, 65535
  %cmp3 = icmp eq i32 %bf.clear2, 67
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %4 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %5 = bitcast %struct.rtx_def* %4 to i32*
  %bf.load4 = load i32, i32* %5, align 8
  %bf.clear5 = and i32 %bf.load4, 65535
  %idxprom = sext i32 %bf.clear5 to i64
  %arrayidx = getelementptr inbounds [153 x i8*], [153 x i8*]* @rtx_format, i32 0, i64 %idxprom
  %6 = load i8*, i8** %arrayidx, align 8
  store i8* %6, i8** %fmt, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %8 = bitcast %struct.rtx_def* %7 to i32*
  %bf.load6 = load i32, i32* %8, align 8
  %bf.clear7 = and i32 %bf.load6, 65535
  %idxprom8 = sext i32 %bf.clear7 to i64
  %arrayidx9 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_length, i32 0, i64 %idxprom8
  %9 = load i8, i8* %arrayidx9, align 1
  %conv = zext i8 %9 to i32
  %sub = sub nsw i32 %conv, 1
  store i32 %sub, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.46, %if.end
  %10 = load i32, i32* %i, align 4
  %cmp10 = icmp sge i32 %10, 0
  br i1 %cmp10, label %for.body, label %for.end.48

for.body:                                         ; preds = %for.cond
  %11 = load i32, i32* %i, align 4
  %idxprom12 = sext i32 %11 to i64
  %12 = load i8*, i8** %fmt, align 8
  %arrayidx13 = getelementptr inbounds i8, i8* %12, i64 %idxprom12
  %13 = load i8, i8* %arrayidx13, align 1
  %conv14 = sext i8 %13 to i32
  %cmp15 = icmp eq i32 %conv14, 69
  br i1 %cmp15, label %if.then.17, label %if.else

if.then.17:                                       ; preds = %for.body
  %14 = load i32, i32* %i, align 4
  %idxprom18 = sext i32 %14 to i64
  %15 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1
  %arrayidx19 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 %idxprom18
  %rtvec = bitcast %union.rtunion_def* %arrayidx19 to %struct.rtvec_def**
  %16 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec, align 8
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %16, i32 0, i32 0
  %17 = load i32, i32* %num_elem, align 4
  %sub20 = sub nsw i32 %17, 1
  store i32 %sub20, i32* %j, align 4
  br label %for.cond.21

for.cond.21:                                      ; preds = %for.inc, %if.then.17
  %18 = load i32, i32* %j, align 4
  %cmp22 = icmp sge i32 %18, 0
  br i1 %cmp22, label %for.body.24, label %for.end

for.body.24:                                      ; preds = %for.cond.21
  %19 = load i32, i32* %j, align 4
  %idxprom25 = sext i32 %19 to i64
  %20 = load i32, i32* %i, align 4
  %idxprom26 = sext i32 %20 to i64
  %21 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %fld27 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1
  %arrayidx28 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld27, i32 0, i64 %idxprom26
  %rtvec29 = bitcast %union.rtunion_def* %arrayidx28 to %struct.rtvec_def**
  %22 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec29, align 8
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %22, i32 0, i32 1
  %arrayidx30 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i32 0, i64 %idxprom25
  %23 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx30, align 8
  %call = call i32 @symbolic_reference_mentioned_p(%struct.rtx_def* %23)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then.31, label %if.end.32

if.then.31:                                       ; preds = %for.body.24
  store i32 1, i32* %retval
  br label %return

if.end.32:                                        ; preds = %for.body.24
  br label %for.inc

for.inc:                                          ; preds = %if.end.32
  %24 = load i32, i32* %j, align 4
  %dec = add nsw i32 %24, -1
  store i32 %dec, i32* %j, align 4
  br label %for.cond.21

for.end:                                          ; preds = %for.cond.21
  br label %if.end.45

if.else:                                          ; preds = %for.body
  %25 = load i32, i32* %i, align 4
  %idxprom33 = sext i32 %25 to i64
  %26 = load i8*, i8** %fmt, align 8
  %arrayidx34 = getelementptr inbounds i8, i8* %26, i64 %idxprom33
  %27 = load i8, i8* %arrayidx34, align 1
  %conv35 = sext i8 %27 to i32
  %cmp36 = icmp eq i32 %conv35, 101
  br i1 %cmp36, label %land.lhs.true, label %if.end.44

land.lhs.true:                                    ; preds = %if.else
  %28 = load i32, i32* %i, align 4
  %idxprom38 = sext i32 %28 to i64
  %29 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %fld39 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %29, i32 0, i32 1
  %arrayidx40 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld39, i32 0, i64 %idxprom38
  %rtx = bitcast %union.rtunion_def* %arrayidx40 to %struct.rtx_def**
  %30 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %call41 = call i32 @symbolic_reference_mentioned_p(%struct.rtx_def* %30)
  %tobool42 = icmp ne i32 %call41, 0
  br i1 %tobool42, label %if.then.43, label %if.end.44

if.then.43:                                       ; preds = %land.lhs.true
  store i32 1, i32* %retval
  br label %return

if.end.44:                                        ; preds = %land.lhs.true, %if.else
  br label %if.end.45

if.end.45:                                        ; preds = %if.end.44, %for.end
  br label %for.inc.46

for.inc.46:                                       ; preds = %if.end.45
  %31 = load i32, i32* %i, align 4
  %dec47 = add nsw i32 %31, -1
  store i32 %dec47, i32* %i, align 4
  br label %for.cond

for.end.48:                                       ; preds = %for.cond
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %for.end.48, %if.then.43, %if.then.31, %if.then
  %32 = load i32, i32* %retval
  ret i32 %32
}

; Function Attrs: nounwind uwtable
define i32 @x86_64_szext_nonmemory_operand(%struct.rtx_def* %op, i32 %mode) #1 {
entry:
  %retval = alloca i32, align 4
  %op.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  store %struct.rtx_def* %op, %struct.rtx_def** %op.addr, align 8
  store i32 %mode, i32* %mode.addr, align 4
  %0 = load i32, i32* @target_flags, align 4
  %and = and i32 %0, 33554432
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %2 = load i32, i32* %mode.addr, align 4
  %call = call i32 @nonmemory_operand(%struct.rtx_def* %1, i32 %2)
  store i32 %call, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %4 = load i32, i32* %mode.addr, align 4
  %call1 = call i32 @register_operand(%struct.rtx_def* %3, i32 %4)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  store i32 1, i32* %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %5 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %call5 = call i32 @x86_64_sign_extended_value(%struct.rtx_def* %5)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.end.4
  %6 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %call7 = call i32 @x86_64_zero_extended_value(%struct.rtx_def* %6)
  %tobool8 = icmp ne i32 %call7, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.end.4
  %7 = phi i1 [ true, %if.end.4 ], [ %tobool8, %lor.rhs ]
  %lor.ext = zext i1 %7 to i32
  store i32 %lor.ext, i32* %retval
  br label %return

return:                                           ; preds = %lor.end, %if.then.3, %if.then
  %8 = load i32, i32* %retval
  ret i32 %8
}

; Function Attrs: nounwind uwtable
define i32 @x86_64_immediate_operand(%struct.rtx_def* %op, i32 %mode) #1 {
entry:
  %retval = alloca i32, align 4
  %op.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  store %struct.rtx_def* %op, %struct.rtx_def** %op.addr, align 8
  store i32 %mode, i32* %mode.addr, align 4
  %0 = load i32, i32* @target_flags, align 4
  %and = and i32 %0, 33554432
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %2 = load i32, i32* %mode.addr, align 4
  %call = call i32 @immediate_operand(%struct.rtx_def* %1, i32 %2)
  store i32 %call, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %call1 = call i32 @x86_64_sign_extended_value(%struct.rtx_def* %3)
  store i32 %call1, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %4 = load i32, i32* %retval
  ret i32 %4
}

declare i32 @immediate_operand(%struct.rtx_def*, i32) #0

; Function Attrs: nounwind uwtable
define i32 @x86_64_zext_immediate_operand(%struct.rtx_def* %op, i32 %mode) #1 {
entry:
  %op.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  store %struct.rtx_def* %op, %struct.rtx_def** %op.addr, align 8
  store i32 %mode, i32* %mode.addr, align 4
  %0 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %call = call i32 @x86_64_zero_extended_value(%struct.rtx_def* %0)
  ret i32 %call
}

; Function Attrs: nounwind uwtable
define i32 @const_int_1_operand(%struct.rtx_def* %op, i32 %mode) #1 {
entry:
  %op.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  store %struct.rtx_def* %op, %struct.rtx_def** %op.addr, align 8
  store i32 %mode, i32* %mode.addr, align 4
  %0 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 54
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx to i64*
  %3 = load i64, i64* %rtwint, align 8
  %cmp1 = icmp eq i64 %3, 1
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  %land.ext = zext i1 %4 to i32
  ret i32 %land.ext
}

; Function Attrs: nounwind uwtable
define i32 @const_int_1_31_operand(%struct.rtx_def* %op, i32 %mode) #1 {
entry:
  %op.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  store %struct.rtx_def* %op, %struct.rtx_def** %op.addr, align 8
  store i32 %mode, i32* %mode.addr, align 4
  %0 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 54
  br i1 %cmp, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx to i64*
  %3 = load i64, i64* %rtwint, align 8
  %cmp1 = icmp sge i64 %3, 1
  br i1 %cmp1, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true
  %4 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %fld2 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i32 0, i64 0
  %rtwint4 = bitcast %union.rtunion_def* %arrayidx3 to i64*
  %5 = load i64, i64* %rtwint4, align 8
  %cmp5 = icmp sle i64 %5, 31
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %entry
  %6 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %cmp5, %land.rhs ]
  %land.ext = zext i1 %6 to i32
  ret i32 %land.ext
}

; Function Attrs: nounwind uwtable
define i32 @symbolic_operand(%struct.rtx_def* %op, i32 %mode) #1 {
entry:
  %retval = alloca i32, align 4
  %op.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  store %struct.rtx_def* %op, %struct.rtx_def** %op.addr, align 8
  store i32 %mode, i32* %mode.addr, align 4
  %0 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %sw.default [
    i32 68, label %sw.bb
    i32 67, label %sw.bb
    i32 58, label %sw.bb.1
  ]

sw.bb:                                            ; preds = %entry, %entry
  store i32 1, i32* %retval
  br label %return

sw.bb.1:                                          ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %3 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %op.addr, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %5 = bitcast %struct.rtx_def* %4 to i32*
  %bf.load2 = load i32, i32* %5, align 8
  %bf.clear3 = and i32 %bf.load2, 65535
  %cmp = icmp eq i32 %bf.clear3, 68
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %sw.bb.1
  %6 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %7 = bitcast %struct.rtx_def* %6 to i32*
  %bf.load4 = load i32, i32* %7, align 8
  %bf.clear5 = and i32 %bf.load4, 65535
  %cmp6 = icmp eq i32 %bf.clear5, 67
  br i1 %cmp6, label %if.then, label %lor.lhs.false.7

lor.lhs.false.7:                                  ; preds = %lor.lhs.false
  %8 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %9 = bitcast %struct.rtx_def* %8 to i32*
  %bf.load8 = load i32, i32* %9, align 8
  %bf.clear9 = and i32 %bf.load8, 65535
  %cmp10 = icmp eq i32 %bf.clear9, 42
  br i1 %cmp10, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.lhs.false.7
  %10 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %fld11 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1
  %arrayidx12 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld11, i32 0, i64 1
  %rtint = bitcast %union.rtunion_def* %arrayidx12 to i32*
  %11 = load i32, i32* %rtint, align 4
  %cmp13 = icmp eq i32 %11, 6
  br i1 %cmp13, label %if.then, label %lor.lhs.false.14

lor.lhs.false.14:                                 ; preds = %land.lhs.true
  %12 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %fld15 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1
  %arrayidx16 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld15, i32 0, i64 1
  %rtint17 = bitcast %union.rtunion_def* %arrayidx16 to i32*
  %13 = load i32, i32* %rtint17, align 4
  %cmp18 = icmp eq i32 %13, 7
  br i1 %cmp18, label %if.then, label %lor.lhs.false.19

lor.lhs.false.19:                                 ; preds = %lor.lhs.false.14
  %14 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %fld20 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1
  %arrayidx21 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld20, i32 0, i64 1
  %rtint22 = bitcast %union.rtunion_def* %arrayidx21 to i32*
  %15 = load i32, i32* %rtint22, align 4
  %cmp23 = icmp eq i32 %15, 15
  br i1 %cmp23, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false.19, %lor.lhs.false.14, %land.lhs.true, %lor.lhs.false, %sw.bb.1
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false.19, %lor.lhs.false.7
  %16 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %17 = bitcast %struct.rtx_def* %16 to i32*
  %bf.load24 = load i32, i32* %17, align 8
  %bf.clear25 = and i32 %bf.load24, 65535
  %cmp26 = icmp ne i32 %bf.clear25, 75
  br i1 %cmp26, label %if.then.34, label %lor.lhs.false.27

lor.lhs.false.27:                                 ; preds = %if.end
  %18 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %fld28 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1
  %arrayidx29 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld28, i32 0, i64 1
  %rtx30 = bitcast %union.rtunion_def* %arrayidx29 to %struct.rtx_def**
  %19 = load %struct.rtx_def*, %struct.rtx_def** %rtx30, align 8
  %20 = bitcast %struct.rtx_def* %19 to i32*
  %bf.load31 = load i32, i32* %20, align 8
  %bf.clear32 = and i32 %bf.load31, 65535
  %cmp33 = icmp ne i32 %bf.clear32, 54
  br i1 %cmp33, label %if.then.34, label %if.end.35

if.then.34:                                       ; preds = %lor.lhs.false.27, %if.end
  store i32 0, i32* %retval
  br label %return

if.end.35:                                        ; preds = %lor.lhs.false.27
  %21 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %fld36 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1
  %arrayidx37 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld36, i32 0, i64 0
  %rtx38 = bitcast %union.rtunion_def* %arrayidx37 to %struct.rtx_def**
  %22 = load %struct.rtx_def*, %struct.rtx_def** %rtx38, align 8
  store %struct.rtx_def* %22, %struct.rtx_def** %op.addr, align 8
  %23 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %24 = bitcast %struct.rtx_def* %23 to i32*
  %bf.load39 = load i32, i32* %24, align 8
  %bf.clear40 = and i32 %bf.load39, 65535
  %cmp41 = icmp eq i32 %bf.clear40, 68
  br i1 %cmp41, label %if.then.46, label %lor.lhs.false.42

lor.lhs.false.42:                                 ; preds = %if.end.35
  %25 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %26 = bitcast %struct.rtx_def* %25 to i32*
  %bf.load43 = load i32, i32* %26, align 8
  %bf.clear44 = and i32 %bf.load43, 65535
  %cmp45 = icmp eq i32 %bf.clear44, 67
  br i1 %cmp45, label %if.then.46, label %if.end.47

if.then.46:                                       ; preds = %lor.lhs.false.42, %if.end.35
  store i32 1, i32* %retval
  br label %return

if.end.47:                                        ; preds = %lor.lhs.false.42
  %27 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %28 = bitcast %struct.rtx_def* %27 to i32*
  %bf.load48 = load i32, i32* %28, align 8
  %bf.clear49 = and i32 %bf.load48, 65535
  %cmp50 = icmp ne i32 %bf.clear49, 42
  br i1 %cmp50, label %if.then.56, label %lor.lhs.false.51

lor.lhs.false.51:                                 ; preds = %if.end.47
  %29 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %fld52 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %29, i32 0, i32 1
  %arrayidx53 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld52, i32 0, i64 1
  %rtint54 = bitcast %union.rtunion_def* %arrayidx53 to i32*
  %30 = load i32, i32* %rtint54, align 4
  %cmp55 = icmp ne i32 %30, 7
  br i1 %cmp55, label %if.then.56, label %if.end.57

if.then.56:                                       ; preds = %lor.lhs.false.51, %if.end.47
  store i32 0, i32* %retval
  br label %return

if.end.57:                                        ; preds = %lor.lhs.false.51
  %31 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %fld58 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1
  %arrayidx59 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld58, i32 0, i64 0
  %rtvec = bitcast %union.rtunion_def* %arrayidx59 to %struct.rtvec_def**
  %32 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec, align 8
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %32, i32 0, i32 1
  %arrayidx60 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i32 0, i64 0
  %33 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx60, align 8
  store %struct.rtx_def* %33, %struct.rtx_def** %op.addr, align 8
  %34 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %35 = bitcast %struct.rtx_def* %34 to i32*
  %bf.load61 = load i32, i32* %35, align 8
  %bf.clear62 = and i32 %bf.load61, 65535
  %cmp63 = icmp eq i32 %bf.clear62, 68
  br i1 %cmp63, label %if.then.68, label %lor.lhs.false.64

lor.lhs.false.64:                                 ; preds = %if.end.57
  %36 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %37 = bitcast %struct.rtx_def* %36 to i32*
  %bf.load65 = load i32, i32* %37, align 8
  %bf.clear66 = and i32 %bf.load65, 65535
  %cmp67 = icmp eq i32 %bf.clear66, 67
  br i1 %cmp67, label %if.then.68, label %if.end.69

if.then.68:                                       ; preds = %lor.lhs.false.64, %if.end.57
  store i32 1, i32* %retval
  br label %return

if.end.69:                                        ; preds = %lor.lhs.false.64
  store i32 0, i32* %retval
  br label %return

sw.default:                                       ; preds = %entry
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %sw.default, %if.end.69, %if.then.68, %if.then.56, %if.then.46, %if.then.34, %if.then, %sw.bb
  %38 = load i32, i32* %retval
  ret i32 %38
}

; Function Attrs: nounwind uwtable
define i32 @pic_symbolic_operand(%struct.rtx_def* %op, i32 %mode) #1 {
entry:
  %retval = alloca i32, align 4
  %op.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  store %struct.rtx_def* %op, %struct.rtx_def** %op.addr, align 8
  store i32 %mode, i32* %mode.addr, align 4
  %0 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp ne i32 %bf.clear, 58
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %3 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %op.addr, align 8
  %4 = load i32, i32* @target_flags, align 4
  %and = and i32 %4, 33554432
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then.1, label %if.else

if.then.1:                                        ; preds = %if.end
  %5 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %fld2 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i32 0, i64 0
  %rtx4 = bitcast %union.rtunion_def* %arrayidx3 to %struct.rtx_def**
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rtx4, align 8
  %7 = bitcast %struct.rtx_def* %6 to i32*
  %bf.load5 = load i32, i32* %7, align 8
  %bf.clear6 = and i32 %bf.load5, 65535
  %cmp7 = icmp eq i32 %bf.clear6, 42
  br i1 %cmp7, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %if.then.1
  store i32 1, i32* %retval
  br label %return

if.end.9:                                         ; preds = %if.then.1
  br label %if.end.34

if.else:                                          ; preds = %if.end
  %8 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %9 = bitcast %struct.rtx_def* %8 to i32*
  %bf.load10 = load i32, i32* %9, align 8
  %bf.clear11 = and i32 %bf.load10, 65535
  %cmp12 = icmp eq i32 %bf.clear11, 42
  br i1 %cmp12, label %if.then.13, label %if.end.14

if.then.13:                                       ; preds = %if.else
  store i32 1, i32* %retval
  br label %return

if.end.14:                                        ; preds = %if.else
  %10 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %11 = bitcast %struct.rtx_def* %10 to i32*
  %bf.load15 = load i32, i32* %11, align 8
  %bf.clear16 = and i32 %bf.load15, 65535
  %cmp17 = icmp ne i32 %bf.clear16, 75
  br i1 %cmp17, label %if.then.24, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.14
  %12 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %fld18 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1
  %arrayidx19 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld18, i32 0, i64 1
  %rtx20 = bitcast %union.rtunion_def* %arrayidx19 to %struct.rtx_def**
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rtx20, align 8
  %14 = bitcast %struct.rtx_def* %13 to i32*
  %bf.load21 = load i32, i32* %14, align 8
  %bf.clear22 = and i32 %bf.load21, 65535
  %cmp23 = icmp ne i32 %bf.clear22, 54
  br i1 %cmp23, label %if.then.24, label %if.end.25

if.then.24:                                       ; preds = %lor.lhs.false, %if.end.14
  store i32 0, i32* %retval
  br label %return

if.end.25:                                        ; preds = %lor.lhs.false
  %15 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %fld26 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1
  %arrayidx27 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld26, i32 0, i64 0
  %rtx28 = bitcast %union.rtunion_def* %arrayidx27 to %struct.rtx_def**
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rtx28, align 8
  store %struct.rtx_def* %16, %struct.rtx_def** %op.addr, align 8
  %17 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %18 = bitcast %struct.rtx_def* %17 to i32*
  %bf.load29 = load i32, i32* %18, align 8
  %bf.clear30 = and i32 %bf.load29, 65535
  %cmp31 = icmp eq i32 %bf.clear30, 42
  br i1 %cmp31, label %if.then.32, label %if.end.33

if.then.32:                                       ; preds = %if.end.25
  store i32 1, i32* %retval
  br label %return

if.end.33:                                        ; preds = %if.end.25
  br label %if.end.34

if.end.34:                                        ; preds = %if.end.33, %if.end.9
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.34, %if.then.32, %if.then.24, %if.then.13, %if.then.8, %if.then
  %19 = load i32, i32* %retval
  ret i32 %19
}

; Function Attrs: nounwind uwtable
define i32 @call_insn_operand(%struct.rtx_def* %op, i32 %mode) #1 {
entry:
  %retval = alloca i32, align 4
  %op.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  store %struct.rtx_def* %op, %struct.rtx_def** %op.addr, align 8
  store i32 %mode, i32* %mode.addr, align 4
  %0 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 61
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 5), align 8
  %cmp1 = icmp eq %struct.rtx_def* %2, %3
  br i1 %cmp1, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %4 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 3), align 8
  %cmp2 = icmp eq %struct.rtx_def* %4, %5
  br i1 %cmp2, label %if.then, label %lor.lhs.false.3

lor.lhs.false.3:                                  ; preds = %lor.lhs.false
  %6 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx to i32*
  %7 = load i32, i32* %rtuint, align 4
  %cmp4 = icmp uge i32 %7, 53
  br i1 %cmp4, label %land.lhs.true.5, label %if.end

land.lhs.true.5:                                  ; preds = %lor.lhs.false.3
  %8 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %fld6 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld6, i32 0, i64 0
  %rtuint8 = bitcast %union.rtunion_def* %arrayidx7 to i32*
  %9 = load i32, i32* %rtuint8, align 4
  %cmp9 = icmp ule i32 %9, 57
  br i1 %cmp9, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true.5, %lor.lhs.false, %land.lhs.true
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true.5, %lor.lhs.false.3, %entry
  %10 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %11 = bitcast %struct.rtx_def* %10 to i32*
  %bf.load10 = load i32, i32* %11, align 8
  %bf.clear11 = and i32 %bf.load10, 65535
  %cmp12 = icmp eq i32 %bf.clear11, 54
  br i1 %cmp12, label %if.then.13, label %if.end.14

if.then.13:                                       ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

if.end.14:                                        ; preds = %if.end
  %12 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %13 = bitcast %struct.rtx_def* %12 to i32*
  %bf.load15 = load i32, i32* %13, align 8
  %bf.clear16 = and i32 %bf.load15, 65535
  %cmp17 = icmp eq i32 %bf.clear16, 68
  br i1 %cmp17, label %if.then.18, label %if.end.19

if.then.18:                                       ; preds = %if.end.14
  store i32 1, i32* %retval
  br label %return

if.end.19:                                        ; preds = %if.end.14
  %14 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %15 = load i32, i32* @target_flags, align 4
  %and = and i32 %15, 33554432
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, i32 5, i32 4
  %call = call i32 @general_operand(%struct.rtx_def* %14, i32 %cond)
  store i32 %call, i32* %retval
  br label %return

return:                                           ; preds = %if.end.19, %if.then.18, %if.then.13, %if.then
  %16 = load i32, i32* %retval
  ret i32 %16
}

; Function Attrs: nounwind uwtable
define i32 @constant_call_address_operand(%struct.rtx_def* %op, i32 %mode) #1 {
entry:
  %op.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  store %struct.rtx_def* %op, %struct.rtx_def** %op.addr, align 8
  store i32 %mode, i32* %mode.addr, align 4
  %0 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 58
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %3 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %4 = bitcast %struct.rtx_def* %3 to i32*
  %bf.load1 = load i32, i32* %4, align 8
  %bf.clear2 = and i32 %bf.load1, 65535
  %cmp3 = icmp eq i32 %bf.clear2, 75
  br i1 %cmp3, label %land.lhs.true.4, label %if.end

land.lhs.true.4:                                  ; preds = %land.lhs.true
  %5 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %fld5 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1
  %arrayidx6 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld5, i32 0, i64 0
  %rtx7 = bitcast %union.rtunion_def* %arrayidx6 to %struct.rtx_def**
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rtx7, align 8
  %fld8 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1
  %arrayidx9 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld8, i32 0, i64 1
  %rtx10 = bitcast %union.rtunion_def* %arrayidx9 to %struct.rtx_def**
  %7 = load %struct.rtx_def*, %struct.rtx_def** %rtx10, align 8
  %8 = bitcast %struct.rtx_def* %7 to i32*
  %bf.load11 = load i32, i32* %8, align 8
  %bf.clear12 = and i32 %bf.load11, 65535
  %cmp13 = icmp eq i32 %bf.clear12, 54
  br i1 %cmp13, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true.4
  %9 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %fld14 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1
  %arrayidx15 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld14, i32 0, i64 0
  %rtx16 = bitcast %union.rtunion_def* %arrayidx15 to %struct.rtx_def**
  %10 = load %struct.rtx_def*, %struct.rtx_def** %rtx16, align 8
  %fld17 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1
  %arrayidx18 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld17, i32 0, i64 0
  %rtx19 = bitcast %union.rtunion_def* %arrayidx18 to %struct.rtx_def**
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rtx19, align 8
  store %struct.rtx_def* %11, %struct.rtx_def** %op.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true.4, %land.lhs.true, %entry
  %12 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %13 = bitcast %struct.rtx_def* %12 to i32*
  %bf.load20 = load i32, i32* %13, align 8
  %bf.clear21 = and i32 %bf.load20, 65535
  %cmp22 = icmp eq i32 %bf.clear21, 68
  %conv = zext i1 %cmp22 to i32
  ret i32 %conv
}

; Function Attrs: nounwind uwtable
define i32 @const0_operand(%struct.rtx_def* %op, i32 %mode) #1 {
entry:
  %op.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  store %struct.rtx_def* %op, %struct.rtx_def** %op.addr, align 8
  store i32 %mode, i32* %mode.addr, align 4
  %0 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %1 = load i32, i32* %mode.addr, align 4
  %idxprom = sext i32 %1 to i64
  %arrayidx = getelementptr inbounds [59 x %struct.rtx_def*], [59 x %struct.rtx_def*]* getelementptr inbounds ([3 x [59 x %struct.rtx_def*]], [3 x [59 x %struct.rtx_def*]]* @const_tiny_rtx, i32 0, i64 0), i32 0, i64 %idxprom
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %cmp = icmp eq %struct.rtx_def* %0, %2
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: nounwind uwtable
define i32 @const1_operand(%struct.rtx_def* %op, i32 %mode) #1 {
entry:
  %op.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  store %struct.rtx_def* %op, %struct.rtx_def** %op.addr, align 8
  store i32 %mode, i32* %mode.addr, align 4
  %0 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %cmp = icmp eq %struct.rtx_def* %0, %1
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: nounwind uwtable
define i32 @const248_operand(%struct.rtx_def* %op, i32 %mode) #1 {
entry:
  %op.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  store %struct.rtx_def* %op, %struct.rtx_def** %op.addr, align 8
  store i32 %mode, i32* %mode.addr, align 4
  %0 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 54
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx to i64*
  %3 = load i64, i64* %rtwint, align 8
  %cmp1 = icmp eq i64 %3, 2
  br i1 %cmp1, label %lor.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.rhs
  %4 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %fld2 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i32 0, i64 0
  %rtwint4 = bitcast %union.rtunion_def* %arrayidx3 to i64*
  %5 = load i64, i64* %rtwint4, align 8
  %cmp5 = icmp eq i64 %5, 4
  br i1 %cmp5, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false
  %6 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %fld6 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld6, i32 0, i64 0
  %rtwint8 = bitcast %union.rtunion_def* %arrayidx7 to i64*
  %7 = load i64, i64* %rtwint8, align 8
  %cmp9 = icmp eq i64 %7, 8
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false, %land.rhs
  %8 = phi i1 [ true, %lor.lhs.false ], [ true, %land.rhs ], [ %cmp9, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %entry
  %9 = phi i1 [ false, %entry ], [ %8, %lor.end ]
  %land.ext = zext i1 %9 to i32
  ret i32 %land.ext
}

; Function Attrs: nounwind uwtable
define i32 @incdec_operand(%struct.rtx_def* %op, i32 %mode) #1 {
entry:
  %retval = alloca i32, align 4
  %op.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  store %struct.rtx_def* %op, %struct.rtx_def** %op.addr, align 8
  store i32 %mode, i32* %mode.addr, align 4
  %0 = load i32, i32* @ix86_cpu, align 4
  %cmp = icmp eq i32 %0, 6
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* @optimize_size, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %cmp1 = icmp eq %struct.rtx_def* %2, %3
  br i1 %cmp1, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.end
  %4 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 63), align 8
  %cmp2 = icmp eq %struct.rtx_def* %4, %5
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.end
  %6 = phi i1 [ true, %if.end ], [ %cmp2, %lor.rhs ]
  %lor.ext = zext i1 %6 to i32
  store i32 %lor.ext, i32* %retval
  br label %return

return:                                           ; preds = %lor.end, %if.then
  %7 = load i32, i32* %retval
  ret i32 %7
}

; Function Attrs: nounwind uwtable
define i32 @shiftdi_operand(%struct.rtx_def* %op, i32 %mode) #1 {
entry:
  %retval = alloca i32, align 4
  %op.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  store %struct.rtx_def* %op, %struct.rtx_def** %op.addr, align 8
  store i32 %mode, i32* %mode.addr, align 4
  %0 = load i32, i32* @target_flags, align 4
  %and = and i32 %0, 33554432
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %2 = load i32, i32* %mode.addr, align 4
  %call = call i32 @nonimmediate_operand(%struct.rtx_def* %1, i32 %2)
  store i32 %call, i32* %retval
  br label %return

if.else:                                          ; preds = %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %4 = load i32, i32* %mode.addr, align 4
  %call1 = call i32 @register_operand(%struct.rtx_def* %3, i32 %4)
  store i32 %call1, i32* %retval
  br label %return

return:                                           ; preds = %if.else, %if.then
  %5 = load i32, i32* %retval
  ret i32 %5
}

; Function Attrs: nounwind uwtable
define i32 @reg_no_sp_operand(%struct.rtx_def* %op, i32 %mode) #1 {
entry:
  %retval = alloca i32, align 4
  %op.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %t = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %op, %struct.rtx_def** %op.addr, align 8
  store i32 %mode, i32* %mode.addr, align 4
  %0 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  store %struct.rtx_def* %0, %struct.rtx_def** %t, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %t, align 8
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load = load i32, i32* %2, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 63
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %t, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %4 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %t, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.rtx_def*, %struct.rtx_def** %t, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %cmp1 = icmp eq %struct.rtx_def* %5, %6
  br i1 %cmp1, label %if.then.5, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %7 = load %struct.rtx_def*, %struct.rtx_def** %t, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 5), align 8
  %cmp2 = icmp eq %struct.rtx_def* %7, %8
  br i1 %cmp2, label %if.then.5, label %lor.lhs.false.3

lor.lhs.false.3:                                  ; preds = %lor.lhs.false
  %9 = load %struct.rtx_def*, %struct.rtx_def** %t, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 3), align 8
  %cmp4 = icmp eq %struct.rtx_def* %9, %10
  br i1 %cmp4, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %lor.lhs.false.3, %lor.lhs.false, %if.end
  store i32 0, i32* %retval
  br label %return

if.end.6:                                         ; preds = %lor.lhs.false.3
  %11 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %12 = load i32, i32* %mode.addr, align 4
  %call = call i32 @register_operand(%struct.rtx_def* %11, i32 %12)
  store i32 %call, i32* %retval
  br label %return

return:                                           ; preds = %if.end.6, %if.then.5
  %13 = load i32, i32* %retval
  ret i32 %13
}

; Function Attrs: nounwind uwtable
define i32 @mmx_reg_operand(%struct.rtx_def* %op, i32 %mode) #1 {
entry:
  %op.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  store %struct.rtx_def* %op, %struct.rtx_def** %op.addr, align 8
  store i32 %mode, i32* %mode.addr, align 4
  %0 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 61
  br i1 %cmp, label %land.rhs, label %land.end.7

land.rhs:                                         ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx to i32*
  %3 = load i32, i32* %rtuint, align 4
  %cmp1 = icmp uge i32 %3, 29
  br i1 %cmp1, label %land.rhs.2, label %land.end

land.rhs.2:                                       ; preds = %land.rhs
  %4 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %fld3 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1
  %arrayidx4 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3, i32 0, i64 0
  %rtuint5 = bitcast %union.rtunion_def* %arrayidx4 to i32*
  %5 = load i32, i32* %rtuint5, align 4
  %cmp6 = icmp ule i32 %5, 36
  br label %land.end

land.end:                                         ; preds = %land.rhs.2, %land.rhs
  %6 = phi i1 [ false, %land.rhs ], [ %cmp6, %land.rhs.2 ]
  br label %land.end.7

land.end.7:                                       ; preds = %land.end, %entry
  %7 = phi i1 [ false, %entry ], [ %6, %land.end ]
  %land.ext = zext i1 %7 to i32
  ret i32 %land.ext
}

; Function Attrs: nounwind uwtable
define i32 @general_no_elim_operand(%struct.rtx_def* %op, i32 %mode) #1 {
entry:
  %retval = alloca i32, align 4
  %op.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %t = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %op, %struct.rtx_def** %op.addr, align 8
  store i32 %mode, i32* %mode.addr, align 4
  %0 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  store %struct.rtx_def* %0, %struct.rtx_def** %t, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %t, align 8
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load = load i32, i32* %2, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 63
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %t, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %4 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %t, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.rtx_def*, %struct.rtx_def** %t, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 5), align 8
  %cmp1 = icmp eq %struct.rtx_def* %5, %6
  br i1 %cmp1, label %if.then.9, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %7 = load %struct.rtx_def*, %struct.rtx_def** %t, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 3), align 8
  %cmp2 = icmp eq %struct.rtx_def* %7, %8
  br i1 %cmp2, label %if.then.9, label %lor.lhs.false.3

lor.lhs.false.3:                                  ; preds = %lor.lhs.false
  %9 = load %struct.rtx_def*, %struct.rtx_def** %t, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 6), align 8
  %cmp4 = icmp eq %struct.rtx_def* %9, %10
  br i1 %cmp4, label %if.then.9, label %lor.lhs.false.5

lor.lhs.false.5:                                  ; preds = %lor.lhs.false.3
  %11 = load %struct.rtx_def*, %struct.rtx_def** %t, align 8
  %12 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 7), align 8
  %cmp6 = icmp eq %struct.rtx_def* %11, %12
  br i1 %cmp6, label %if.then.9, label %lor.lhs.false.7

lor.lhs.false.7:                                  ; preds = %lor.lhs.false.5
  %13 = load %struct.rtx_def*, %struct.rtx_def** %t, align 8
  %14 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 8), align 8
  %cmp8 = icmp eq %struct.rtx_def* %13, %14
  br i1 %cmp8, label %if.then.9, label %if.end.10

if.then.9:                                        ; preds = %lor.lhs.false.7, %lor.lhs.false.5, %lor.lhs.false.3, %lor.lhs.false, %if.end
  store i32 0, i32* %retval
  br label %return

if.end.10:                                        ; preds = %lor.lhs.false.7
  %15 = load %struct.rtx_def*, %struct.rtx_def** %t, align 8
  %16 = bitcast %struct.rtx_def* %15 to i32*
  %bf.load11 = load i32, i32* %16, align 8
  %bf.clear12 = and i32 %bf.load11, 65535
  %cmp13 = icmp eq i32 %bf.clear12, 61
  br i1 %cmp13, label %land.lhs.true, label %if.end.23

land.lhs.true:                                    ; preds = %if.end.10
  %17 = load %struct.rtx_def*, %struct.rtx_def** %t, align 8
  %fld14 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1
  %arrayidx15 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld14, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx15 to i32*
  %18 = load i32, i32* %rtuint, align 4
  %cmp16 = icmp uge i32 %18, 53
  br i1 %cmp16, label %land.lhs.true.17, label %if.end.23

land.lhs.true.17:                                 ; preds = %land.lhs.true
  %19 = load %struct.rtx_def*, %struct.rtx_def** %t, align 8
  %fld18 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1
  %arrayidx19 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld18, i32 0, i64 0
  %rtuint20 = bitcast %union.rtunion_def* %arrayidx19 to i32*
  %20 = load i32, i32* %rtuint20, align 4
  %cmp21 = icmp ule i32 %20, 57
  br i1 %cmp21, label %if.then.22, label %if.end.23

if.then.22:                                       ; preds = %land.lhs.true.17
  store i32 0, i32* %retval
  br label %return

if.end.23:                                        ; preds = %land.lhs.true.17, %land.lhs.true, %if.end.10
  %21 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %22 = load i32, i32* %mode.addr, align 4
  %call = call i32 @general_operand(%struct.rtx_def* %21, i32 %22)
  store i32 %call, i32* %retval
  br label %return

return:                                           ; preds = %if.end.23, %if.then.22, %if.then.9
  %23 = load i32, i32* %retval
  ret i32 %23
}

; Function Attrs: nounwind uwtable
define i32 @nonmemory_no_elim_operand(%struct.rtx_def* %op, i32 %mode) #1 {
entry:
  %retval = alloca i32, align 4
  %op.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %t = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %op, %struct.rtx_def** %op.addr, align 8
  store i32 %mode, i32* %mode.addr, align 4
  %0 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  store %struct.rtx_def* %0, %struct.rtx_def** %t, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %t, align 8
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load = load i32, i32* %2, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 63
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %t, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %4 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %t, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.rtx_def*, %struct.rtx_def** %t, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 5), align 8
  %cmp1 = icmp eq %struct.rtx_def* %5, %6
  br i1 %cmp1, label %if.then.9, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %7 = load %struct.rtx_def*, %struct.rtx_def** %t, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 3), align 8
  %cmp2 = icmp eq %struct.rtx_def* %7, %8
  br i1 %cmp2, label %if.then.9, label %lor.lhs.false.3

lor.lhs.false.3:                                  ; preds = %lor.lhs.false
  %9 = load %struct.rtx_def*, %struct.rtx_def** %t, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 6), align 8
  %cmp4 = icmp eq %struct.rtx_def* %9, %10
  br i1 %cmp4, label %if.then.9, label %lor.lhs.false.5

lor.lhs.false.5:                                  ; preds = %lor.lhs.false.3
  %11 = load %struct.rtx_def*, %struct.rtx_def** %t, align 8
  %12 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 7), align 8
  %cmp6 = icmp eq %struct.rtx_def* %11, %12
  br i1 %cmp6, label %if.then.9, label %lor.lhs.false.7

lor.lhs.false.7:                                  ; preds = %lor.lhs.false.5
  %13 = load %struct.rtx_def*, %struct.rtx_def** %t, align 8
  %14 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 8), align 8
  %cmp8 = icmp eq %struct.rtx_def* %13, %14
  br i1 %cmp8, label %if.then.9, label %if.end.10

if.then.9:                                        ; preds = %lor.lhs.false.7, %lor.lhs.false.5, %lor.lhs.false.3, %lor.lhs.false, %if.end
  store i32 0, i32* %retval
  br label %return

if.end.10:                                        ; preds = %lor.lhs.false.7
  %15 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %16 = bitcast %struct.rtx_def* %15 to i32*
  %bf.load11 = load i32, i32* %16, align 8
  %bf.clear12 = and i32 %bf.load11, 65535
  %cmp13 = icmp eq i32 %bf.clear12, 54
  br i1 %cmp13, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.end.10
  %17 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %18 = load i32, i32* %mode.addr, align 4
  %call = call i32 @register_operand(%struct.rtx_def* %17, i32 %18)
  %tobool = icmp ne i32 %call, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.end.10
  %19 = phi i1 [ true, %if.end.10 ], [ %tobool, %lor.rhs ]
  %lor.ext = zext i1 %19 to i32
  store i32 %lor.ext, i32* %retval
  br label %return

return:                                           ; preds = %lor.end, %if.then.9
  %20 = load i32, i32* %retval
  ret i32 %20
}

; Function Attrs: nounwind uwtable
define i32 @q_regs_operand(%struct.rtx_def* %op, i32 %mode) #1 {
entry:
  %retval = alloca i32, align 4
  %op.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  store %struct.rtx_def* %op, %struct.rtx_def** %op.addr, align 8
  store i32 %mode, i32* %mode.addr, align 4
  %0 = load i32, i32* %mode.addr, align 4
  %cmp = icmp ne i32 %0, 0
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load = load i32, i32* %2, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %3 = load i32, i32* %mode.addr, align 4
  %cmp1 = icmp ne i32 %bf.clear, %3
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %5 = bitcast %struct.rtx_def* %4 to i32*
  %bf.load2 = load i32, i32* %5, align 8
  %bf.clear3 = and i32 %bf.load2, 65535
  %cmp4 = icmp eq i32 %bf.clear3, 63
  br i1 %cmp4, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %if.end
  %6 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %7 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %7, %struct.rtx_def** %op.addr, align 8
  br label %if.end.6

if.end.6:                                         ; preds = %if.then.5, %if.end
  %8 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %9 = bitcast %struct.rtx_def* %8 to i32*
  %bf.load7 = load i32, i32* %9, align 8
  %bf.clear8 = and i32 %bf.load7, 65535
  %cmp9 = icmp eq i32 %bf.clear8, 61
  br i1 %cmp9, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.end.6
  %10 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %fld10 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1
  %arrayidx11 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld10, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx11 to i32*
  %11 = load i32, i32* %rtuint, align 4
  %cmp12 = icmp ult i32 %11, 4
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end.6
  %12 = phi i1 [ false, %if.end.6 ], [ %cmp12, %land.rhs ]
  %land.ext = zext i1 %12 to i32
  store i32 %land.ext, i32* %retval
  br label %return

return:                                           ; preds = %land.end, %if.then
  %13 = load i32, i32* %retval
  ret i32 %13
}

; Function Attrs: nounwind uwtable
define i32 @non_q_regs_operand(%struct.rtx_def* %op, i32 %mode) #1 {
entry:
  %retval = alloca i32, align 4
  %op.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  store %struct.rtx_def* %op, %struct.rtx_def** %op.addr, align 8
  store i32 %mode, i32* %mode.addr, align 4
  %0 = load i32, i32* %mode.addr, align 4
  %cmp = icmp ne i32 %0, 0
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load = load i32, i32* %2, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %3 = load i32, i32* %mode.addr, align 4
  %cmp1 = icmp ne i32 %bf.clear, %3
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %5 = bitcast %struct.rtx_def* %4 to i32*
  %bf.load2 = load i32, i32* %5, align 8
  %bf.clear3 = and i32 %bf.load2, 65535
  %cmp4 = icmp eq i32 %bf.clear3, 63
  br i1 %cmp4, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %if.end
  %6 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %7 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %7, %struct.rtx_def** %op.addr, align 8
  br label %if.end.6

if.end.6:                                         ; preds = %if.then.5, %if.end
  %8 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %9 = bitcast %struct.rtx_def* %8 to i32*
  %bf.load7 = load i32, i32* %9, align 8
  %bf.clear8 = and i32 %bf.load7, 65535
  %cmp9 = icmp eq i32 %bf.clear8, 61
  br i1 %cmp9, label %land.lhs.true.10, label %land.end

land.lhs.true.10:                                 ; preds = %if.end.6
  %10 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %fld11 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1
  %arrayidx12 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld11, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx12 to i32*
  %11 = load i32, i32* %rtuint, align 4
  %cmp13 = icmp uge i32 %11, 4
  br i1 %cmp13, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true.10
  %12 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %fld14 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1
  %arrayidx15 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld14, i32 0, i64 0
  %rtuint16 = bitcast %union.rtunion_def* %arrayidx15 to i32*
  %13 = load i32, i32* %rtuint16, align 4
  %cmp17 = icmp ult i32 %13, 53
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true.10, %if.end.6
  %14 = phi i1 [ false, %land.lhs.true.10 ], [ false, %if.end.6 ], [ %cmp17, %land.rhs ]
  %land.ext = zext i1 %14 to i32
  store i32 %land.ext, i32* %retval
  br label %return

return:                                           ; preds = %land.end, %if.then
  %15 = load i32, i32* %retval
  ret i32 %15
}

; Function Attrs: nounwind uwtable
define i32 @sse_comparison_operator(%struct.rtx_def* %op, i32 %mode) #1 {
entry:
  %retval = alloca i32, align 4
  %op.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %code = alloca i32, align 4
  store %struct.rtx_def* %op, %struct.rtx_def** %op.addr, align 8
  store i32 %mode, i32* %mode.addr, align 4
  %0 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  store i32 %bf.clear, i32* %code, align 4
  %2 = load i32, i32* %code, align 4
  switch i32 %2, label %sw.default [
    i32 103, label %sw.bb
    i32 107, label %sw.bb
    i32 106, label %sw.bb
    i32 112, label %sw.bb
    i32 102, label %sw.bb
    i32 115, label %sw.bb
    i32 116, label %sw.bb
    i32 113, label %sw.bb
    i32 114, label %sw.bb.1
    i32 118, label %sw.bb.1
    i32 117, label %sw.bb.1
    i32 119, label %sw.bb.1
    i32 104, label %sw.bb.1
    i32 105, label %sw.bb.1
  ]

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i32 1, i32* %retval
  br label %return

sw.bb.1:                                          ; preds = %entry, %entry, %entry, %entry, %entry, %entry
  %3 = load i32, i32* @target_flags, align 4
  %and = and i32 %3, 16
  %tobool = icmp ne i32 %and, 0
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  store i32 %lnot.ext, i32* %retval
  br label %return

sw.default:                                       ; preds = %entry
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %sw.default, %sw.bb.1, %sw.bb
  %4 = load i32, i32* %retval
  ret i32 %4
}

; Function Attrs: nounwind uwtable
define i32 @ix86_comparison_operator(%struct.rtx_def* %op, i32 %mode) #1 {
entry:
  %retval = alloca i32, align 4
  %op.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %inmode = alloca i32, align 4
  %code = alloca i32, align 4
  %second_code = alloca i32, align 4
  %bypass_code = alloca i32, align 4
  store %struct.rtx_def* %op, %struct.rtx_def** %op.addr, align 8
  store i32 %mode, i32* %mode.addr, align 4
  %0 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  store i32 %bf.clear, i32* %code, align 4
  %2 = load i32, i32* %mode.addr, align 4
  %cmp = icmp ne i32 %2, 0
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %4 = bitcast %struct.rtx_def* %3 to i32*
  %bf.load1 = load i32, i32* %4, align 8
  %bf.lshr = lshr i32 %bf.load1, 16
  %bf.clear2 = and i32 %bf.lshr, 255
  %5 = load i32, i32* %mode.addr, align 4
  %cmp3 = icmp ne i32 %bf.clear2, %5
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %6 = load i32, i32* %code, align 4
  %idxprom = sext i32 %6 to i64
  %arrayidx = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom
  %7 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %7 to i32
  %cmp4 = icmp ne i32 %conv, 60
  br i1 %cmp4, label %if.then.6, label %if.end.7

if.then.6:                                        ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

if.end.7:                                         ; preds = %if.end
  %8 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1
  %arrayidx8 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx8 to %struct.rtx_def**
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %10 = bitcast %struct.rtx_def* %9 to i32*
  %bf.load9 = load i32, i32* %10, align 8
  %bf.lshr10 = lshr i32 %bf.load9, 16
  %bf.clear11 = and i32 %bf.lshr10, 255
  store i32 %bf.clear11, i32* %inmode, align 4
  %11 = load i32, i32* %inmode, align 4
  %cmp12 = icmp eq i32 %11, 57
  br i1 %cmp12, label %if.then.16, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.7
  %12 = load i32, i32* %inmode, align 4
  %cmp14 = icmp eq i32 %12, 58
  br i1 %cmp14, label %if.then.16, label %if.end.21

if.then.16:                                       ; preds = %lor.lhs.false, %if.end.7
  %13 = load i32, i32* %code, align 4
  call void @ix86_fp_comparison_codes(i32 %13, i32* %bypass_code, i32* %code, i32* %second_code)
  %14 = load i32, i32* %bypass_code, align 4
  %cmp17 = icmp eq i32 %14, 1
  br i1 %cmp17, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then.16
  %15 = load i32, i32* %second_code, align 4
  %cmp19 = icmp eq i32 %15, 1
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then.16
  %16 = phi i1 [ false, %if.then.16 ], [ %cmp19, %land.rhs ]
  %land.ext = zext i1 %16 to i32
  store i32 %land.ext, i32* %retval
  br label %return

if.end.21:                                        ; preds = %lor.lhs.false
  %17 = load i32, i32* %code, align 4
  switch i32 %17, label %sw.default [
    i32 103, label %sw.bb
    i32 102, label %sw.bb
    i32 107, label %sw.bb.22
    i32 104, label %sw.bb.22
    i32 111, label %sw.bb.36
    i32 109, label %sw.bb.36
    i32 110, label %sw.bb.36
    i32 113, label %sw.bb.36
    i32 112, label %sw.bb.36
    i32 108, label %sw.bb.36
    i32 105, label %sw.bb.41
    i32 106, label %sw.bb.41
  ]

sw.bb:                                            ; preds = %if.end.21, %if.end.21
  store i32 1, i32* %retval
  br label %return

sw.bb.22:                                         ; preds = %if.end.21, %if.end.21
  %18 = load i32, i32* %inmode, align 4
  %cmp23 = icmp eq i32 %18, 52
  br i1 %cmp23, label %if.then.34, label %lor.lhs.false.25

lor.lhs.false.25:                                 ; preds = %sw.bb.22
  %19 = load i32, i32* %inmode, align 4
  %cmp26 = icmp eq i32 %19, 53
  br i1 %cmp26, label %if.then.34, label %lor.lhs.false.28

lor.lhs.false.28:                                 ; preds = %lor.lhs.false.25
  %20 = load i32, i32* %inmode, align 4
  %cmp29 = icmp eq i32 %20, 54
  br i1 %cmp29, label %if.then.34, label %lor.lhs.false.31

lor.lhs.false.31:                                 ; preds = %lor.lhs.false.28
  %21 = load i32, i32* %inmode, align 4
  %cmp32 = icmp eq i32 %21, 55
  br i1 %cmp32, label %if.then.34, label %if.end.35

if.then.34:                                       ; preds = %lor.lhs.false.31, %lor.lhs.false.28, %lor.lhs.false.25, %sw.bb.22
  store i32 1, i32* %retval
  br label %return

if.end.35:                                        ; preds = %lor.lhs.false.31
  store i32 0, i32* %retval
  br label %return

sw.bb.36:                                         ; preds = %if.end.21, %if.end.21, %if.end.21, %if.end.21, %if.end.21, %if.end.21
  %22 = load i32, i32* %inmode, align 4
  %cmp37 = icmp eq i32 %22, 52
  br i1 %cmp37, label %if.then.39, label %if.end.40

if.then.39:                                       ; preds = %sw.bb.36
  store i32 1, i32* %retval
  br label %return

if.end.40:                                        ; preds = %sw.bb.36
  store i32 0, i32* %retval
  br label %return

sw.bb.41:                                         ; preds = %if.end.21, %if.end.21
  %23 = load i32, i32* %inmode, align 4
  %cmp42 = icmp eq i32 %23, 52
  br i1 %cmp42, label %if.then.50, label %lor.lhs.false.44

lor.lhs.false.44:                                 ; preds = %sw.bb.41
  %24 = load i32, i32* %inmode, align 4
  %cmp45 = icmp eq i32 %24, 53
  br i1 %cmp45, label %if.then.50, label %lor.lhs.false.47

lor.lhs.false.47:                                 ; preds = %lor.lhs.false.44
  %25 = load i32, i32* %inmode, align 4
  %cmp48 = icmp eq i32 %25, 55
  br i1 %cmp48, label %if.then.50, label %if.end.51

if.then.50:                                       ; preds = %lor.lhs.false.47, %lor.lhs.false.44, %sw.bb.41
  store i32 1, i32* %retval
  br label %return

if.end.51:                                        ; preds = %lor.lhs.false.47
  store i32 0, i32* %retval
  br label %return

sw.default:                                       ; preds = %if.end.21
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %sw.default, %if.end.51, %if.then.50, %if.end.40, %if.then.39, %if.end.35, %if.then.34, %sw.bb, %land.end, %if.then.6, %if.then
  %26 = load i32, i32* %retval
  ret i32 %26
}

; Function Attrs: nounwind uwtable
define internal void @ix86_fp_comparison_codes(i32 %code, i32* %bypass_code, i32* %first_code, i32* %second_code) #1 {
entry:
  %code.addr = alloca i32, align 4
  %bypass_code.addr = alloca i32*, align 8
  %first_code.addr = alloca i32*, align 8
  %second_code.addr = alloca i32*, align 8
  store i32 %code, i32* %code.addr, align 4
  store i32* %bypass_code, i32** %bypass_code.addr, align 8
  store i32* %first_code, i32** %first_code.addr, align 8
  store i32* %second_code, i32** %second_code.addr, align 8
  %0 = load i32, i32* %code.addr, align 4
  %1 = load i32*, i32** %first_code.addr, align 8
  store i32 %0, i32* %1, align 4
  %2 = load i32*, i32** %bypass_code.addr, align 8
  store i32 1, i32* %2, align 4
  %3 = load i32*, i32** %second_code.addr, align 8
  store i32 1, i32* %3, align 4
  %4 = load i32, i32* %code.addr, align 4
  switch i32 %4, label %sw.default [
    i32 105, label %sw.bb
    i32 104, label %sw.bb
    i32 113, label %sw.bb
    i32 112, label %sw.bb
    i32 114, label %sw.bb
    i32 118, label %sw.bb
    i32 117, label %sw.bb
    i32 119, label %sw.bb
    i32 107, label %sw.bb.1
    i32 106, label %sw.bb.2
    i32 103, label %sw.bb.3
    i32 102, label %sw.bb.4
    i32 115, label %sw.bb.5
    i32 116, label %sw.bb.6
  ]

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  br label %sw.epilog

sw.bb.1:                                          ; preds = %entry
  %5 = load i32*, i32** %first_code.addr, align 8
  store i32 118, i32* %5, align 4
  %6 = load i32*, i32** %bypass_code.addr, align 8
  store i32 112, i32* %6, align 4
  br label %sw.epilog

sw.bb.2:                                          ; preds = %entry
  %7 = load i32*, i32** %first_code.addr, align 8
  store i32 117, i32* %7, align 4
  %8 = load i32*, i32** %bypass_code.addr, align 8
  store i32 112, i32* %8, align 4
  br label %sw.epilog

sw.bb.3:                                          ; preds = %entry
  %9 = load i32*, i32** %first_code.addr, align 8
  store i32 114, i32* %9, align 4
  %10 = load i32*, i32** %bypass_code.addr, align 8
  store i32 112, i32* %10, align 4
  br label %sw.epilog

sw.bb.4:                                          ; preds = %entry
  %11 = load i32*, i32** %first_code.addr, align 8
  store i32 119, i32* %11, align 4
  %12 = load i32*, i32** %second_code.addr, align 8
  store i32 112, i32* %12, align 4
  br label %sw.epilog

sw.bb.5:                                          ; preds = %entry
  %13 = load i32*, i32** %first_code.addr, align 8
  store i32 104, i32* %13, align 4
  %14 = load i32*, i32** %second_code.addr, align 8
  store i32 112, i32* %14, align 4
  br label %sw.epilog

sw.bb.6:                                          ; preds = %entry
  %15 = load i32*, i32** %first_code.addr, align 8
  store i32 105, i32* %15, align 4
  %16 = load i32*, i32** %second_code.addr, align 8
  store i32 112, i32* %16, align 4
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 7379, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @__FUNCTION__.ix86_fp_comparison_codes, i32 0, i32 0)) #7
  unreachable

sw.epilog:                                        ; preds = %sw.bb.6, %sw.bb.5, %sw.bb.4, %sw.bb.3, %sw.bb.2, %sw.bb.1, %sw.bb
  %17 = load i32, i32* @target_flags, align 4
  %and = and i32 %17, 16
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %sw.epilog
  %18 = load i32*, i32** %second_code.addr, align 8
  store i32 1, i32* %18, align 4
  %19 = load i32*, i32** %bypass_code.addr, align 8
  store i32 1, i32* %19, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %sw.epilog
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @fcmov_comparison_operator(%struct.rtx_def* %op, i32 %mode) #1 {
entry:
  %retval = alloca i32, align 4
  %op.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %inmode = alloca i32, align 4
  %code = alloca i32, align 4
  %second_code = alloca i32, align 4
  %bypass_code = alloca i32, align 4
  store %struct.rtx_def* %op, %struct.rtx_def** %op.addr, align 8
  store i32 %mode, i32* %mode.addr, align 4
  %0 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  store i32 %bf.clear, i32* %code, align 4
  %2 = load i32, i32* %mode.addr, align 4
  %cmp = icmp ne i32 %2, 0
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %4 = bitcast %struct.rtx_def* %3 to i32*
  %bf.load1 = load i32, i32* %4, align 8
  %bf.lshr = lshr i32 %bf.load1, 16
  %bf.clear2 = and i32 %bf.lshr, 255
  %5 = load i32, i32* %mode.addr, align 4
  %cmp3 = icmp ne i32 %bf.clear2, %5
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %6 = load i32, i32* %code, align 4
  %idxprom = sext i32 %6 to i64
  %arrayidx = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom
  %7 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %7 to i32
  %cmp4 = icmp ne i32 %conv, 60
  br i1 %cmp4, label %if.then.6, label %if.end.7

if.then.6:                                        ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

if.end.7:                                         ; preds = %if.end
  %8 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1
  %arrayidx8 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx8 to %struct.rtx_def**
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %10 = bitcast %struct.rtx_def* %9 to i32*
  %bf.load9 = load i32, i32* %10, align 8
  %bf.lshr10 = lshr i32 %bf.load9, 16
  %bf.clear11 = and i32 %bf.lshr10, 255
  store i32 %bf.clear11, i32* %inmode, align 4
  %11 = load i32, i32* %inmode, align 4
  %cmp12 = icmp eq i32 %11, 57
  br i1 %cmp12, label %if.then.16, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.7
  %12 = load i32, i32* %inmode, align 4
  %cmp14 = icmp eq i32 %12, 58
  br i1 %cmp14, label %if.then.16, label %if.end.24

if.then.16:                                       ; preds = %lor.lhs.false, %if.end.7
  %13 = load i32, i32* %code, align 4
  call void @ix86_fp_comparison_codes(i32 %13, i32* %bypass_code, i32* %code, i32* %second_code)
  %14 = load i32, i32* %bypass_code, align 4
  %cmp17 = icmp ne i32 %14, 1
  br i1 %cmp17, label %if.then.22, label %lor.lhs.false.19

lor.lhs.false.19:                                 ; preds = %if.then.16
  %15 = load i32, i32* %second_code, align 4
  %cmp20 = icmp ne i32 %15, 1
  br i1 %cmp20, label %if.then.22, label %if.end.23

if.then.22:                                       ; preds = %lor.lhs.false.19, %if.then.16
  store i32 0, i32* %retval
  br label %return

if.end.23:                                        ; preds = %lor.lhs.false.19
  %16 = load i32, i32* %code, align 4
  %call = call i32 @ix86_fp_compare_code_to_integer(i32 %16)
  store i32 %call, i32* %code, align 4
  br label %if.end.24

if.end.24:                                        ; preds = %if.end.23, %lor.lhs.false
  %17 = load i32, i32* %code, align 4
  switch i32 %17, label %sw.default [
    i32 111, label %sw.bb
    i32 109, label %sw.bb
    i32 110, label %sw.bb
    i32 108, label %sw.bb
    i32 113, label %sw.bb.35
    i32 112, label %sw.bb.35
    i32 103, label %sw.bb.35
    i32 102, label %sw.bb.35
  ]

sw.bb:                                            ; preds = %if.end.24, %if.end.24, %if.end.24, %if.end.24
  %18 = load i32, i32* %inmode, align 4
  %cmp25 = icmp eq i32 %18, 52
  br i1 %cmp25, label %if.then.33, label %lor.lhs.false.27

lor.lhs.false.27:                                 ; preds = %sw.bb
  %19 = load i32, i32* %inmode, align 4
  %cmp28 = icmp eq i32 %19, 57
  br i1 %cmp28, label %if.then.33, label %lor.lhs.false.30

lor.lhs.false.30:                                 ; preds = %lor.lhs.false.27
  %20 = load i32, i32* %inmode, align 4
  %cmp31 = icmp eq i32 %20, 58
  br i1 %cmp31, label %if.then.33, label %if.end.34

if.then.33:                                       ; preds = %lor.lhs.false.30, %lor.lhs.false.27, %sw.bb
  store i32 1, i32* %retval
  br label %return

if.end.34:                                        ; preds = %lor.lhs.false.30
  store i32 0, i32* %retval
  br label %return

sw.bb.35:                                         ; preds = %if.end.24, %if.end.24, %if.end.24, %if.end.24
  store i32 1, i32* %retval
  br label %return

sw.default:                                       ; preds = %if.end.24
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %sw.default, %sw.bb.35, %if.end.34, %if.then.33, %if.then.22, %if.then.6, %if.then
  %21 = load i32, i32* %retval
  ret i32 %21
}

; Function Attrs: nounwind uwtable
define internal i32 @ix86_fp_compare_code_to_integer(i32 %code) #1 {
entry:
  %retval = alloca i32, align 4
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  %0 = load i32, i32* %code.addr, align 4
  switch i32 %0, label %sw.default [
    i32 105, label %sw.bb
    i32 104, label %sw.bb.1
    i32 113, label %sw.bb.2
    i32 112, label %sw.bb.2
    i32 114, label %sw.bb.3
    i32 118, label %sw.bb.4
    i32 117, label %sw.bb.5
    i32 119, label %sw.bb.6
  ]

sw.bb:                                            ; preds = %entry
  store i32 109, i32* %retval
  br label %return

sw.bb.1:                                          ; preds = %entry
  store i32 108, i32* %retval
  br label %return

sw.bb.2:                                          ; preds = %entry, %entry
  %1 = load i32, i32* %code.addr, align 4
  store i32 %1, i32* %retval
  br label %return

sw.bb.3:                                          ; preds = %entry
  store i32 103, i32* %retval
  br label %return

sw.bb.4:                                          ; preds = %entry
  store i32 111, i32* %retval
  br label %return

sw.bb.5:                                          ; preds = %entry
  store i32 110, i32* %retval
  br label %return

sw.bb.6:                                          ; preds = %entry
  store i32 102, i32* %retval
  br label %return

sw.default:                                       ; preds = %entry
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %sw.default, %sw.bb.6, %sw.bb.5, %sw.bb.4, %sw.bb.3, %sw.bb.2, %sw.bb.1, %sw.bb
  %2 = load i32, i32* %retval
  ret i32 %2
}

; Function Attrs: nounwind uwtable
define i32 @promotable_binary_operator(%struct.rtx_def* %op, i32 %mode) #1 {
entry:
  %retval = alloca i32, align 4
  %op.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  store %struct.rtx_def* %op, %struct.rtx_def** %op.addr, align 8
  store i32 %mode, i32* %mode.addr, align 4
  %0 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %sw.default [
    i32 78, label %sw.bb
    i32 75, label %sw.bb.1
    i32 83, label %sw.bb.1
    i32 84, label %sw.bb.1
    i32 85, label %sw.bb.1
    i32 87, label %sw.bb.1
  ]

sw.bb:                                            ; preds = %entry
  %2 = load i32, i32* @ix86_cpu, align 4
  %cmp = icmp ugt i32 %2, 1
  %conv = zext i1 %cmp to i32
  store i32 %conv, i32* %retval
  br label %return

sw.bb.1:                                          ; preds = %entry, %entry, %entry, %entry, %entry
  store i32 1, i32* %retval
  br label %return

sw.default:                                       ; preds = %entry
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %sw.default, %sw.bb.1, %sw.bb
  %3 = load i32, i32* %retval
  ret i32 %3
}

; Function Attrs: nounwind uwtable
define i32 @cmp_fp_expander_operand(%struct.rtx_def* %op, i32 %mode) #1 {
entry:
  %retval = alloca i32, align 4
  %op.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  store %struct.rtx_def* %op, %struct.rtx_def** %op.addr, align 8
  store i32 %mode, i32* %mode.addr, align 4
  %0 = load i32, i32* %mode.addr, align 4
  %cmp = icmp ne i32 %0, 0
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %mode.addr, align 4
  %2 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %3 = bitcast %struct.rtx_def* %2 to i32*
  %bf.load = load i32, i32* %3, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %cmp1 = icmp ne i32 %1, %bf.clear
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %5 = bitcast %struct.rtx_def* %4 to i32*
  %bf.load2 = load i32, i32* %5, align 8
  %bf.clear3 = and i32 %bf.load2, 65535
  %cmp4 = icmp eq i32 %bf.clear3, 55
  br i1 %cmp4, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %if.end
  store i32 1, i32* %retval
  br label %return

if.end.6:                                         ; preds = %if.end
  %6 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %7 = load i32, i32* %mode.addr, align 4
  %call = call i32 @general_operand(%struct.rtx_def* %6, i32 %7)
  store i32 %call, i32* %retval
  br label %return

return:                                           ; preds = %if.end.6, %if.then.5, %if.then
  %8 = load i32, i32* %retval
  ret i32 %8
}

; Function Attrs: nounwind uwtable
define i32 @ext_register_operand(%struct.rtx_def* %op, i32 %mode) #1 {
entry:
  %retval = alloca i32, align 4
  %op.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %regno = alloca i32, align 4
  store %struct.rtx_def* %op, %struct.rtx_def** %op.addr, align 8
  store i32 %mode, i32* %mode.addr, align 4
  %0 = load i32, i32* @target_flags, align 4
  %and = and i32 %0, 33554432
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %lor.lhs.false, label %land.lhs.true

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load = load i32, i32* %2, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %cmp = icmp ne i32 %bf.clear, 5
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.lhs.false, %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %4 = bitcast %struct.rtx_def* %3 to i32*
  %bf.load1 = load i32, i32* %4, align 8
  %bf.lshr2 = lshr i32 %bf.load1, 16
  %bf.clear3 = and i32 %bf.lshr2, 255
  %cmp4 = icmp ne i32 %bf.clear3, 4
  br i1 %cmp4, label %land.lhs.true.5, label %if.end

land.lhs.true.5:                                  ; preds = %land.lhs.true
  %5 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %6 = bitcast %struct.rtx_def* %5 to i32*
  %bf.load6 = load i32, i32* %6, align 8
  %bf.lshr7 = lshr i32 %bf.load6, 16
  %bf.clear8 = and i32 %bf.lshr7, 255
  %cmp9 = icmp ne i32 %bf.clear8, 3
  br i1 %cmp9, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true.5
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true.5, %land.lhs.true, %lor.lhs.false
  %7 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %call = call i32 @register_operand(%struct.rtx_def* %7, i32 0)
  %tobool10 = icmp ne i32 %call, 0
  br i1 %tobool10, label %if.end.12, label %if.then.11

if.then.11:                                       ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

if.end.12:                                        ; preds = %if.end
  %8 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %9 = bitcast %struct.rtx_def* %8 to i32*
  %bf.load13 = load i32, i32* %9, align 8
  %bf.clear14 = and i32 %bf.load13, 65535
  %cmp15 = icmp eq i32 %bf.clear14, 61
  br i1 %cmp15, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.12
  %10 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx to i32*
  %11 = load i32, i32* %rtuint, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.end.12
  %12 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %fld16 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1
  %arrayidx17 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld16, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx17 to %struct.rtx_def**
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %fld18 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1
  %arrayidx19 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld18, i32 0, i64 0
  %rtuint20 = bitcast %union.rtunion_def* %arrayidx19 to i32*
  %14 = load i32, i32* %rtuint20, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %11, %cond.true ], [ %14, %cond.false ]
  store i32 %cond, i32* %regno, align 4
  %15 = load i32, i32* %regno, align 4
  %cmp21 = icmp sgt i32 %15, 57
  br i1 %cmp21, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %cond.end
  %16 = load i32, i32* %regno, align 4
  %cmp22 = icmp slt i32 %16, 4
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %cond.end
  %17 = phi i1 [ true, %cond.end ], [ %cmp22, %lor.rhs ]
  %lor.ext = zext i1 %17 to i32
  store i32 %lor.ext, i32* %retval
  br label %return

return:                                           ; preds = %lor.end, %if.then.11, %if.then
  %18 = load i32, i32* %retval
  ret i32 %18
}

; Function Attrs: nounwind uwtable
define i32 @binary_fp_operator(%struct.rtx_def* %op, i32 %mode) #1 {
entry:
  %retval = alloca i32, align 4
  %op.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  store %struct.rtx_def* %op, %struct.rtx_def** %op.addr, align 8
  store i32 %mode, i32* %mode.addr, align 4
  %0 = load i32, i32* %mode.addr, align 4
  %cmp = icmp ne i32 %0, 0
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %mode.addr, align 4
  %2 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %3 = bitcast %struct.rtx_def* %2 to i32*
  %bf.load = load i32, i32* %3, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %cmp1 = icmp ne i32 %1, %bf.clear
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %5 = bitcast %struct.rtx_def* %4 to i32*
  %bf.load2 = load i32, i32* %5, align 8
  %bf.clear3 = and i32 %bf.load2, 65535
  switch i32 %bf.clear3, label %sw.default [
    i32 75, label %sw.bb
    i32 76, label %sw.bb
    i32 78, label %sw.bb
    i32 79, label %sw.bb
  ]

sw.bb:                                            ; preds = %if.end, %if.end, %if.end, %if.end
  %6 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %7 = bitcast %struct.rtx_def* %6 to i32*
  %bf.load4 = load i32, i32* %7, align 8
  %bf.lshr5 = lshr i32 %bf.load4, 16
  %bf.clear6 = and i32 %bf.lshr5, 255
  %idxprom = sext i32 %bf.clear6 to i64
  %arrayidx = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom
  %8 = load i32, i32* %arrayidx, align 4
  %cmp7 = icmp eq i32 %8, 2
  %conv = zext i1 %cmp7 to i32
  store i32 %conv, i32* %retval
  br label %return

sw.default:                                       ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %sw.default, %sw.bb, %if.then
  %9 = load i32, i32* %retval
  ret i32 %9
}

; Function Attrs: nounwind uwtable
define i32 @mult_operator(%struct.rtx_def* %op, i32 %mode) #1 {
entry:
  %op.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  store %struct.rtx_def* %op, %struct.rtx_def** %op.addr, align 8
  store i32 %mode, i32* %mode.addr, align 4
  %0 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 78
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: nounwind uwtable
define i32 @div_operator(%struct.rtx_def* %op, i32 %mode) #1 {
entry:
  %op.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  store %struct.rtx_def* %op, %struct.rtx_def** %op.addr, align 8
  store i32 %mode, i32* %mode.addr, align 4
  %0 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 79
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: nounwind uwtable
define i32 @arith_or_logical_operator(%struct.rtx_def* %op, i32 %mode) #1 {
entry:
  %op.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  store %struct.rtx_def* %op, %struct.rtx_def** %op.addr, align 8
  store i32 %mode, i32* %mode.addr, align 4
  %0 = load i32, i32* %mode.addr, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %land.rhs, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load = load i32, i32* %2, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %3 = load i32, i32* %mode.addr, align 4
  %cmp1 = icmp eq i32 %bf.clear, %3
  br i1 %cmp1, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %lor.lhs.false, %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %5 = bitcast %struct.rtx_def* %4 to i32*
  %bf.load2 = load i32, i32* %5, align 8
  %bf.clear3 = and i32 %bf.load2, 65535
  %idxprom = sext i32 %bf.clear3 to i64
  %arrayidx = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %6 to i32
  %cmp4 = icmp eq i32 %conv, 99
  br i1 %cmp4, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs
  %7 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %8 = bitcast %struct.rtx_def* %7 to i32*
  %bf.load6 = load i32, i32* %8, align 8
  %bf.clear7 = and i32 %bf.load6, 65535
  %idxprom8 = sext i32 %bf.clear7 to i64
  %arrayidx9 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom8
  %9 = load i8, i8* %arrayidx9, align 1
  %conv10 = sext i8 %9 to i32
  %cmp11 = icmp eq i32 %conv10, 50
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %10 = phi i1 [ true, %land.rhs ], [ %cmp11, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %lor.lhs.false
  %11 = phi i1 [ false, %lor.lhs.false ], [ %10, %lor.end ]
  %land.ext = zext i1 %11 to i32
  ret i32 %land.ext
}

; Function Attrs: nounwind uwtable
define i32 @memory_displacement_operand(%struct.rtx_def* %op, i32 %mode) #1 {
entry:
  %retval = alloca i32, align 4
  %op.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %parts = alloca %struct.ix86_address, align 8
  store %struct.rtx_def* %op, %struct.rtx_def** %op.addr, align 8
  store i32 %mode, i32* %mode.addr, align 4
  %0 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %1 = load i32, i32* %mode.addr, align 4
  %call = call i32 @memory_operand(%struct.rtx_def* %0, i32 %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %3 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %call1 = call i32 @ix86_decompose_address(%struct.rtx_def* %3, %struct.ix86_address* %parts)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.end.4, label %if.then.3

if.then.3:                                        ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 3460, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @__FUNCTION__.memory_displacement_operand, i32 0, i32 0)) #7
  unreachable

if.end.4:                                         ; preds = %if.end
  %disp = getelementptr inbounds %struct.ix86_address, %struct.ix86_address* %parts, i32 0, i32 2
  %4 = load %struct.rtx_def*, %struct.rtx_def** %disp, align 8
  %cmp = icmp ne %struct.rtx_def* %4, null
  %conv = zext i1 %cmp to i32
  store i32 %conv, i32* %retval
  br label %return

return:                                           ; preds = %if.end.4, %if.then
  %5 = load i32, i32* %retval
  ret i32 %5
}

declare i32 @memory_operand(%struct.rtx_def*, i32) #0

; Function Attrs: nounwind uwtable
define internal i32 @ix86_decompose_address(%struct.rtx_def* %addr, %struct.ix86_address* %out) #1 {
entry:
  %retval = alloca i32, align 4
  %addr.addr = alloca %struct.rtx_def*, align 8
  %out.addr = alloca %struct.ix86_address*, align 8
  %base = alloca %struct.rtx_def*, align 8
  %index = alloca %struct.rtx_def*, align 8
  %disp = alloca %struct.rtx_def*, align 8
  %scale = alloca i64, align 8
  %scale_rtx = alloca %struct.rtx_def*, align 8
  %retval1 = alloca i32, align 4
  %op0 = alloca %struct.rtx_def*, align 8
  %op1 = alloca %struct.rtx_def*, align 8
  %code0 = alloca i32, align 4
  %code1 = alloca i32, align 4
  %tmp = alloca %struct.rtx_def*, align 8
  %tmp143 = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %addr, %struct.rtx_def** %addr.addr, align 8
  store %struct.ix86_address* %out, %struct.ix86_address** %out.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %base, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %index, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %disp, align 8
  store i64 1, i64* %scale, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %scale_rtx, align 8
  store i32 1, i32* %retval1, align 4
  %0 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 61
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8
  %3 = bitcast %struct.rtx_def* %2 to i32*
  %bf.load2 = load i32, i32* %3, align 8
  %bf.clear3 = and i32 %bf.load2, 65535
  %cmp4 = icmp eq i32 %bf.clear3, 63
  br i1 %cmp4, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %base, align 8
  br label %if.end.114

if.else:                                          ; preds = %lor.lhs.false
  %5 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8
  %6 = bitcast %struct.rtx_def* %5 to i32*
  %bf.load5 = load i32, i32* %6, align 8
  %bf.clear6 = and i32 %bf.load5, 65535
  %cmp7 = icmp eq i32 %bf.clear6, 75
  br i1 %cmp7, label %if.then.8, label %if.else.78

if.then.8:                                        ; preds = %if.else
  %7 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %8 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %op0, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8
  %fld9 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1
  %arrayidx10 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld9, i32 0, i64 1
  %rtx11 = bitcast %union.rtunion_def* %arrayidx10 to %struct.rtx_def**
  %10 = load %struct.rtx_def*, %struct.rtx_def** %rtx11, align 8
  store %struct.rtx_def* %10, %struct.rtx_def** %op1, align 8
  %11 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %12 = bitcast %struct.rtx_def* %11 to i32*
  %bf.load12 = load i32, i32* %12, align 8
  %bf.clear13 = and i32 %bf.load12, 65535
  store i32 %bf.clear13, i32* %code0, align 4
  %13 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %14 = bitcast %struct.rtx_def* %13 to i32*
  %bf.load14 = load i32, i32* %14, align 8
  %bf.clear15 = and i32 %bf.load14, 65535
  store i32 %bf.clear15, i32* %code1, align 4
  %15 = load i32, i32* %code0, align 4
  %cmp16 = icmp eq i32 %15, 61
  br i1 %cmp16, label %if.then.19, label %lor.lhs.false.17

lor.lhs.false.17:                                 ; preds = %if.then.8
  %16 = load i32, i32* %code0, align 4
  %cmp18 = icmp eq i32 %16, 63
  br i1 %cmp18, label %if.then.19, label %if.else.25

if.then.19:                                       ; preds = %lor.lhs.false.17, %if.then.8
  %17 = load i32, i32* %code1, align 4
  %cmp20 = icmp eq i32 %17, 61
  br i1 %cmp20, label %if.then.23, label %lor.lhs.false.21

lor.lhs.false.21:                                 ; preds = %if.then.19
  %18 = load i32, i32* %code1, align 4
  %cmp22 = icmp eq i32 %18, 63
  br i1 %cmp22, label %if.then.23, label %if.else.24

if.then.23:                                       ; preds = %lor.lhs.false.21, %if.then.19
  %19 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  store %struct.rtx_def* %19, %struct.rtx_def** %index, align 8
  %20 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  store %struct.rtx_def* %20, %struct.rtx_def** %base, align 8
  br label %if.end

if.else.24:                                       ; preds = %lor.lhs.false.21
  %21 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  store %struct.rtx_def* %21, %struct.rtx_def** %base, align 8
  %22 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  store %struct.rtx_def* %22, %struct.rtx_def** %disp, align 8
  br label %if.end

if.end:                                           ; preds = %if.else.24, %if.then.23
  br label %if.end.77

if.else.25:                                       ; preds = %lor.lhs.false.17
  %23 = load i32, i32* %code0, align 4
  %cmp26 = icmp eq i32 %23, 78
  br i1 %cmp26, label %if.then.27, label %if.else.40

if.then.27:                                       ; preds = %if.else.25
  %24 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %fld28 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1
  %arrayidx29 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld28, i32 0, i64 0
  %rtx30 = bitcast %union.rtunion_def* %arrayidx29 to %struct.rtx_def**
  %25 = load %struct.rtx_def*, %struct.rtx_def** %rtx30, align 8
  store %struct.rtx_def* %25, %struct.rtx_def** %index, align 8
  %26 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %fld31 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %26, i32 0, i32 1
  %arrayidx32 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld31, i32 0, i64 1
  %rtx33 = bitcast %union.rtunion_def* %arrayidx32 to %struct.rtx_def**
  %27 = load %struct.rtx_def*, %struct.rtx_def** %rtx33, align 8
  store %struct.rtx_def* %27, %struct.rtx_def** %scale_rtx, align 8
  %28 = load i32, i32* %code1, align 4
  %cmp34 = icmp eq i32 %28, 61
  br i1 %cmp34, label %if.then.37, label %lor.lhs.false.35

lor.lhs.false.35:                                 ; preds = %if.then.27
  %29 = load i32, i32* %code1, align 4
  %cmp36 = icmp eq i32 %29, 63
  br i1 %cmp36, label %if.then.37, label %if.else.38

if.then.37:                                       ; preds = %lor.lhs.false.35, %if.then.27
  %30 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  store %struct.rtx_def* %30, %struct.rtx_def** %base, align 8
  br label %if.end.39

if.else.38:                                       ; preds = %lor.lhs.false.35
  %31 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  store %struct.rtx_def* %31, %struct.rtx_def** %disp, align 8
  br label %if.end.39

if.end.39:                                        ; preds = %if.else.38, %if.then.37
  br label %if.end.76

if.else.40:                                       ; preds = %if.else.25
  %32 = load i32, i32* %code0, align 4
  %cmp41 = icmp eq i32 %32, 75
  br i1 %cmp41, label %land.lhs.true, label %if.else.64

land.lhs.true:                                    ; preds = %if.else.40
  %33 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %fld42 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1
  %arrayidx43 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld42, i32 0, i64 0
  %rtx44 = bitcast %union.rtunion_def* %arrayidx43 to %struct.rtx_def**
  %34 = load %struct.rtx_def*, %struct.rtx_def** %rtx44, align 8
  %35 = bitcast %struct.rtx_def* %34 to i32*
  %bf.load45 = load i32, i32* %35, align 8
  %bf.clear46 = and i32 %bf.load45, 65535
  %cmp47 = icmp eq i32 %bf.clear46, 78
  br i1 %cmp47, label %if.then.48, label %if.else.64

if.then.48:                                       ; preds = %land.lhs.true
  %36 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %fld49 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %36, i32 0, i32 1
  %arrayidx50 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld49, i32 0, i64 0
  %rtx51 = bitcast %union.rtunion_def* %arrayidx50 to %struct.rtx_def**
  %37 = load %struct.rtx_def*, %struct.rtx_def** %rtx51, align 8
  %fld52 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %37, i32 0, i32 1
  %arrayidx53 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld52, i32 0, i64 0
  %rtx54 = bitcast %union.rtunion_def* %arrayidx53 to %struct.rtx_def**
  %38 = load %struct.rtx_def*, %struct.rtx_def** %rtx54, align 8
  store %struct.rtx_def* %38, %struct.rtx_def** %index, align 8
  %39 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %fld55 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1
  %arrayidx56 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld55, i32 0, i64 0
  %rtx57 = bitcast %union.rtunion_def* %arrayidx56 to %struct.rtx_def**
  %40 = load %struct.rtx_def*, %struct.rtx_def** %rtx57, align 8
  %fld58 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %40, i32 0, i32 1
  %arrayidx59 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld58, i32 0, i64 1
  %rtx60 = bitcast %union.rtunion_def* %arrayidx59 to %struct.rtx_def**
  %41 = load %struct.rtx_def*, %struct.rtx_def** %rtx60, align 8
  store %struct.rtx_def* %41, %struct.rtx_def** %scale_rtx, align 8
  %42 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %fld61 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %42, i32 0, i32 1
  %arrayidx62 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld61, i32 0, i64 1
  %rtx63 = bitcast %union.rtunion_def* %arrayidx62 to %struct.rtx_def**
  %43 = load %struct.rtx_def*, %struct.rtx_def** %rtx63, align 8
  store %struct.rtx_def* %43, %struct.rtx_def** %base, align 8
  %44 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  store %struct.rtx_def* %44, %struct.rtx_def** %disp, align 8
  br label %if.end.75

if.else.64:                                       ; preds = %land.lhs.true, %if.else.40
  %45 = load i32, i32* %code0, align 4
  %cmp65 = icmp eq i32 %45, 75
  br i1 %cmp65, label %if.then.66, label %if.else.73

if.then.66:                                       ; preds = %if.else.64
  %46 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %fld67 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %46, i32 0, i32 1
  %arrayidx68 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld67, i32 0, i64 0
  %rtx69 = bitcast %union.rtunion_def* %arrayidx68 to %struct.rtx_def**
  %47 = load %struct.rtx_def*, %struct.rtx_def** %rtx69, align 8
  store %struct.rtx_def* %47, %struct.rtx_def** %index, align 8
  %48 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %fld70 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %48, i32 0, i32 1
  %arrayidx71 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld70, i32 0, i64 1
  %rtx72 = bitcast %union.rtunion_def* %arrayidx71 to %struct.rtx_def**
  %49 = load %struct.rtx_def*, %struct.rtx_def** %rtx72, align 8
  store %struct.rtx_def* %49, %struct.rtx_def** %base, align 8
  %50 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  store %struct.rtx_def* %50, %struct.rtx_def** %disp, align 8
  br label %if.end.74

if.else.73:                                       ; preds = %if.else.64
  store i32 0, i32* %retval
  br label %return

if.end.74:                                        ; preds = %if.then.66
  br label %if.end.75

if.end.75:                                        ; preds = %if.end.74, %if.then.48
  br label %if.end.76

if.end.76:                                        ; preds = %if.end.75, %if.end.39
  br label %if.end.77

if.end.77:                                        ; preds = %if.end.76, %if.end
  br label %if.end.113

if.else.78:                                       ; preds = %if.else
  %51 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8
  %52 = bitcast %struct.rtx_def* %51 to i32*
  %bf.load79 = load i32, i32* %52, align 8
  %bf.clear80 = and i32 %bf.load79, 65535
  %cmp81 = icmp eq i32 %bf.clear80, 78
  br i1 %cmp81, label %if.then.82, label %if.else.89

if.then.82:                                       ; preds = %if.else.78
  %53 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8
  %fld83 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %53, i32 0, i32 1
  %arrayidx84 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld83, i32 0, i64 0
  %rtx85 = bitcast %union.rtunion_def* %arrayidx84 to %struct.rtx_def**
  %54 = load %struct.rtx_def*, %struct.rtx_def** %rtx85, align 8
  store %struct.rtx_def* %54, %struct.rtx_def** %index, align 8
  %55 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8
  %fld86 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %55, i32 0, i32 1
  %arrayidx87 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld86, i32 0, i64 1
  %rtx88 = bitcast %union.rtunion_def* %arrayidx87 to %struct.rtx_def**
  %56 = load %struct.rtx_def*, %struct.rtx_def** %rtx88, align 8
  store %struct.rtx_def* %56, %struct.rtx_def** %scale_rtx, align 8
  br label %if.end.112

if.else.89:                                       ; preds = %if.else.78
  %57 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8
  %58 = bitcast %struct.rtx_def* %57 to i32*
  %bf.load90 = load i32, i32* %58, align 8
  %bf.clear91 = and i32 %bf.load90, 65535
  %cmp92 = icmp eq i32 %bf.clear91, 87
  br i1 %cmp92, label %if.then.93, label %if.else.110

if.then.93:                                       ; preds = %if.else.89
  %59 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8
  %fld94 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %59, i32 0, i32 1
  %arrayidx95 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld94, i32 0, i64 0
  %rtx96 = bitcast %union.rtunion_def* %arrayidx95 to %struct.rtx_def**
  %60 = load %struct.rtx_def*, %struct.rtx_def** %rtx96, align 8
  store %struct.rtx_def* %60, %struct.rtx_def** %index, align 8
  %61 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8
  %fld97 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %61, i32 0, i32 1
  %arrayidx98 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld97, i32 0, i64 1
  %rtx99 = bitcast %union.rtunion_def* %arrayidx98 to %struct.rtx_def**
  %62 = load %struct.rtx_def*, %struct.rtx_def** %rtx99, align 8
  store %struct.rtx_def* %62, %struct.rtx_def** %tmp, align 8
  %63 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %64 = bitcast %struct.rtx_def* %63 to i32*
  %bf.load100 = load i32, i32* %64, align 8
  %bf.clear101 = and i32 %bf.load100, 65535
  %cmp102 = icmp ne i32 %bf.clear101, 54
  br i1 %cmp102, label %if.then.103, label %if.end.104

if.then.103:                                      ; preds = %if.then.93
  store i32 0, i32* %retval
  br label %return

if.end.104:                                       ; preds = %if.then.93
  %65 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %fld105 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %65, i32 0, i32 1
  %arrayidx106 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld105, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx106 to i64*
  %66 = load i64, i64* %rtwint, align 8
  store i64 %66, i64* %scale, align 8
  %67 = load i64, i64* %scale, align 8
  %cmp107 = icmp ugt i64 %67, 3
  br i1 %cmp107, label %if.then.108, label %if.end.109

if.then.108:                                      ; preds = %if.end.104
  store i32 0, i32* %retval
  br label %return

if.end.109:                                       ; preds = %if.end.104
  %68 = load i64, i64* %scale, align 8
  %sh_prom = trunc i64 %68 to i32
  %shl = shl i32 1, %sh_prom
  %conv = sext i32 %shl to i64
  store i64 %conv, i64* %scale, align 8
  store i32 -1, i32* %retval1, align 4
  br label %if.end.111

if.else.110:                                      ; preds = %if.else.89
  %69 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8
  store %struct.rtx_def* %69, %struct.rtx_def** %disp, align 8
  br label %if.end.111

if.end.111:                                       ; preds = %if.else.110, %if.end.109
  br label %if.end.112

if.end.112:                                       ; preds = %if.end.111, %if.then.82
  br label %if.end.113

if.end.113:                                       ; preds = %if.end.112, %if.end.77
  br label %if.end.114

if.end.114:                                       ; preds = %if.end.113, %if.then
  %70 = load %struct.rtx_def*, %struct.rtx_def** %scale_rtx, align 8
  %tobool = icmp ne %struct.rtx_def* %70, null
  br i1 %tobool, label %if.then.115, label %if.end.125

if.then.115:                                      ; preds = %if.end.114
  %71 = load %struct.rtx_def*, %struct.rtx_def** %scale_rtx, align 8
  %72 = bitcast %struct.rtx_def* %71 to i32*
  %bf.load116 = load i32, i32* %72, align 8
  %bf.clear117 = and i32 %bf.load116, 65535
  %cmp118 = icmp ne i32 %bf.clear117, 54
  br i1 %cmp118, label %if.then.120, label %if.end.121

if.then.120:                                      ; preds = %if.then.115
  store i32 0, i32* %retval
  br label %return

if.end.121:                                       ; preds = %if.then.115
  %73 = load %struct.rtx_def*, %struct.rtx_def** %scale_rtx, align 8
  %fld122 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %73, i32 0, i32 1
  %arrayidx123 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld122, i32 0, i64 0
  %rtwint124 = bitcast %union.rtunion_def* %arrayidx123 to i64*
  %74 = load i64, i64* %rtwint124, align 8
  store i64 %74, i64* %scale, align 8
  br label %if.end.125

if.end.125:                                       ; preds = %if.end.121, %if.end.114
  %75 = load %struct.rtx_def*, %struct.rtx_def** %base, align 8
  %tobool126 = icmp ne %struct.rtx_def* %75, null
  br i1 %tobool126, label %land.lhs.true.127, label %if.end.144

land.lhs.true.127:                                ; preds = %if.end.125
  %76 = load %struct.rtx_def*, %struct.rtx_def** %index, align 8
  %tobool128 = icmp ne %struct.rtx_def* %76, null
  br i1 %tobool128, label %land.lhs.true.129, label %if.end.144

land.lhs.true.129:                                ; preds = %land.lhs.true.127
  %77 = load i64, i64* %scale, align 8
  %cmp130 = icmp eq i64 %77, 1
  br i1 %cmp130, label %land.lhs.true.132, label %if.end.144

land.lhs.true.132:                                ; preds = %land.lhs.true.129
  %78 = load %struct.rtx_def*, %struct.rtx_def** %index, align 8
  %79 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 5), align 8
  %cmp133 = icmp eq %struct.rtx_def* %78, %79
  br i1 %cmp133, label %if.then.141, label %lor.lhs.false.135

lor.lhs.false.135:                                ; preds = %land.lhs.true.132
  %80 = load %struct.rtx_def*, %struct.rtx_def** %index, align 8
  %81 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 3), align 8
  %cmp136 = icmp eq %struct.rtx_def* %80, %81
  br i1 %cmp136, label %if.then.141, label %lor.lhs.false.138

lor.lhs.false.138:                                ; preds = %lor.lhs.false.135
  %82 = load %struct.rtx_def*, %struct.rtx_def** %index, align 8
  %83 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %cmp139 = icmp eq %struct.rtx_def* %82, %83
  br i1 %cmp139, label %if.then.141, label %if.end.144

if.then.141:                                      ; preds = %lor.lhs.false.138, %lor.lhs.false.135, %land.lhs.true.132
  %84 = load %struct.rtx_def*, %struct.rtx_def** %base, align 8
  store %struct.rtx_def* %84, %struct.rtx_def** %tmp143, align 8
  %85 = load %struct.rtx_def*, %struct.rtx_def** %index, align 8
  store %struct.rtx_def* %85, %struct.rtx_def** %base, align 8
  %86 = load %struct.rtx_def*, %struct.rtx_def** %tmp143, align 8
  store %struct.rtx_def* %86, %struct.rtx_def** %index, align 8
  br label %if.end.144

if.end.144:                                       ; preds = %if.then.141, %lor.lhs.false.138, %land.lhs.true.129, %land.lhs.true.127, %if.end.125
  %87 = load %struct.rtx_def*, %struct.rtx_def** %base, align 8
  %88 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 4), align 8
  %cmp145 = icmp eq %struct.rtx_def* %87, %88
  br i1 %cmp145, label %land.lhs.true.153, label %lor.lhs.false.147

lor.lhs.false.147:                                ; preds = %if.end.144
  %89 = load %struct.rtx_def*, %struct.rtx_def** %base, align 8
  %90 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 3), align 8
  %cmp148 = icmp eq %struct.rtx_def* %89, %90
  br i1 %cmp148, label %land.lhs.true.153, label %lor.lhs.false.150

lor.lhs.false.150:                                ; preds = %lor.lhs.false.147
  %91 = load %struct.rtx_def*, %struct.rtx_def** %base, align 8
  %92 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 5), align 8
  %cmp151 = icmp eq %struct.rtx_def* %91, %92
  br i1 %cmp151, label %land.lhs.true.153, label %if.end.156

land.lhs.true.153:                                ; preds = %lor.lhs.false.150, %lor.lhs.false.147, %if.end.144
  %93 = load %struct.rtx_def*, %struct.rtx_def** %disp, align 8
  %tobool154 = icmp ne %struct.rtx_def* %93, null
  br i1 %tobool154, label %if.end.156, label %if.then.155

if.then.155:                                      ; preds = %land.lhs.true.153
  %94 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  store %struct.rtx_def* %94, %struct.rtx_def** %disp, align 8
  br label %if.end.156

if.end.156:                                       ; preds = %if.then.155, %land.lhs.true.153, %lor.lhs.false.150
  %95 = load i32, i32* @ix86_cpu, align 4
  %cmp157 = icmp eq i32 %95, 4
  br i1 %cmp157, label %land.lhs.true.159, label %if.end.179

land.lhs.true.159:                                ; preds = %if.end.156
  %96 = load i32, i32* @optimize_size, align 4
  %tobool160 = icmp ne i32 %96, 0
  br i1 %tobool160, label %if.end.179, label %land.lhs.true.161

land.lhs.true.161:                                ; preds = %land.lhs.true.159
  %97 = load %struct.rtx_def*, %struct.rtx_def** %base, align 8
  %tobool162 = icmp ne %struct.rtx_def* %97, null
  br i1 %tobool162, label %land.lhs.true.163, label %if.end.179

land.lhs.true.163:                                ; preds = %land.lhs.true.161
  %98 = load %struct.rtx_def*, %struct.rtx_def** %index, align 8
  %tobool164 = icmp ne %struct.rtx_def* %98, null
  br i1 %tobool164, label %if.end.179, label %land.lhs.true.165

land.lhs.true.165:                                ; preds = %land.lhs.true.163
  %99 = load %struct.rtx_def*, %struct.rtx_def** %disp, align 8
  %tobool166 = icmp ne %struct.rtx_def* %99, null
  br i1 %tobool166, label %if.end.179, label %land.lhs.true.167

land.lhs.true.167:                                ; preds = %land.lhs.true.165
  %100 = load %struct.rtx_def*, %struct.rtx_def** %base, align 8
  %101 = bitcast %struct.rtx_def* %100 to i32*
  %bf.load168 = load i32, i32* %101, align 8
  %bf.clear169 = and i32 %bf.load168, 65535
  %cmp170 = icmp eq i32 %bf.clear169, 61
  br i1 %cmp170, label %land.lhs.true.172, label %if.end.179

land.lhs.true.172:                                ; preds = %land.lhs.true.167
  %102 = load %struct.rtx_def*, %struct.rtx_def** %base, align 8
  %fld173 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %102, i32 0, i32 1
  %arrayidx174 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld173, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx174 to i32*
  %103 = load i32, i32* %rtuint, align 4
  %idxprom = zext i32 %103 to i64
  %arrayidx175 = getelementptr inbounds [53 x i32], [53 x i32]* @regclass_map, i32 0, i64 %idxprom
  %104 = load i32, i32* %arrayidx175, align 4
  %cmp176 = icmp eq i32 %104, 5
  br i1 %cmp176, label %if.then.178, label %if.end.179

if.then.178:                                      ; preds = %land.lhs.true.172
  %105 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  store %struct.rtx_def* %105, %struct.rtx_def** %disp, align 8
  br label %if.end.179

if.end.179:                                       ; preds = %if.then.178, %land.lhs.true.172, %land.lhs.true.167, %land.lhs.true.165, %land.lhs.true.163, %land.lhs.true.161, %land.lhs.true.159, %if.end.156
  %106 = load %struct.rtx_def*, %struct.rtx_def** %base, align 8
  %tobool180 = icmp ne %struct.rtx_def* %106, null
  br i1 %tobool180, label %if.end.189, label %land.lhs.true.181

land.lhs.true.181:                                ; preds = %if.end.179
  %107 = load %struct.rtx_def*, %struct.rtx_def** %index, align 8
  %tobool182 = icmp ne %struct.rtx_def* %107, null
  br i1 %tobool182, label %land.lhs.true.183, label %if.end.189

land.lhs.true.183:                                ; preds = %land.lhs.true.181
  %108 = load i64, i64* %scale, align 8
  %tobool184 = icmp ne i64 %108, 0
  br i1 %tobool184, label %land.lhs.true.185, label %if.end.189

land.lhs.true.185:                                ; preds = %land.lhs.true.183
  %109 = load i64, i64* %scale, align 8
  %cmp186 = icmp eq i64 %109, 2
  br i1 %cmp186, label %if.then.188, label %if.end.189

if.then.188:                                      ; preds = %land.lhs.true.185
  %110 = load %struct.rtx_def*, %struct.rtx_def** %index, align 8
  store %struct.rtx_def* %110, %struct.rtx_def** %base, align 8
  store i64 1, i64* %scale, align 8
  br label %if.end.189

if.end.189:                                       ; preds = %if.then.188, %land.lhs.true.185, %land.lhs.true.183, %land.lhs.true.181, %if.end.179
  %111 = load %struct.rtx_def*, %struct.rtx_def** %base, align 8
  %tobool190 = icmp ne %struct.rtx_def* %111, null
  br i1 %tobool190, label %if.end.199, label %land.lhs.true.191

land.lhs.true.191:                                ; preds = %if.end.189
  %112 = load %struct.rtx_def*, %struct.rtx_def** %disp, align 8
  %tobool192 = icmp ne %struct.rtx_def* %112, null
  br i1 %tobool192, label %if.end.199, label %land.lhs.true.193

land.lhs.true.193:                                ; preds = %land.lhs.true.191
  %113 = load %struct.rtx_def*, %struct.rtx_def** %index, align 8
  %tobool194 = icmp ne %struct.rtx_def* %113, null
  br i1 %tobool194, label %land.lhs.true.195, label %if.end.199

land.lhs.true.195:                                ; preds = %land.lhs.true.193
  %114 = load i64, i64* %scale, align 8
  %cmp196 = icmp ne i64 %114, 1
  br i1 %cmp196, label %if.then.198, label %if.end.199

if.then.198:                                      ; preds = %land.lhs.true.195
  %115 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  store %struct.rtx_def* %115, %struct.rtx_def** %disp, align 8
  br label %if.end.199

if.end.199:                                       ; preds = %if.then.198, %land.lhs.true.195, %land.lhs.true.193, %land.lhs.true.191, %if.end.189
  %116 = load %struct.rtx_def*, %struct.rtx_def** %base, align 8
  %117 = load %struct.ix86_address*, %struct.ix86_address** %out.addr, align 8
  %base200 = getelementptr inbounds %struct.ix86_address, %struct.ix86_address* %117, i32 0, i32 0
  store %struct.rtx_def* %116, %struct.rtx_def** %base200, align 8
  %118 = load %struct.rtx_def*, %struct.rtx_def** %index, align 8
  %119 = load %struct.ix86_address*, %struct.ix86_address** %out.addr, align 8
  %index201 = getelementptr inbounds %struct.ix86_address, %struct.ix86_address* %119, i32 0, i32 1
  store %struct.rtx_def* %118, %struct.rtx_def** %index201, align 8
  %120 = load %struct.rtx_def*, %struct.rtx_def** %disp, align 8
  %121 = load %struct.ix86_address*, %struct.ix86_address** %out.addr, align 8
  %disp202 = getelementptr inbounds %struct.ix86_address, %struct.ix86_address* %121, i32 0, i32 2
  store %struct.rtx_def* %120, %struct.rtx_def** %disp202, align 8
  %122 = load i64, i64* %scale, align 8
  %123 = load %struct.ix86_address*, %struct.ix86_address** %out.addr, align 8
  %scale203 = getelementptr inbounds %struct.ix86_address, %struct.ix86_address* %123, i32 0, i32 3
  store i64 %122, i64* %scale203, align 8
  %124 = load i32, i32* %retval1, align 4
  store i32 %124, i32* %retval
  br label %return

return:                                           ; preds = %if.end.199, %if.then.120, %if.then.108, %if.then.103, %if.else.73
  %125 = load i32, i32* %retval
  ret i32 %125
}

; Function Attrs: noreturn
declare void @fancy_abort(i8*, i32, i8*) #5

; Function Attrs: nounwind uwtable
define i32 @cmpsi_operand(%struct.rtx_def* %op, i32 %mode) #1 {
entry:
  %retval = alloca i32, align 4
  %op.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  store %struct.rtx_def* %op, %struct.rtx_def** %op.addr, align 8
  store i32 %mode, i32* %mode.addr, align 4
  %0 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %1 = load i32, i32* %mode.addr, align 4
  %call = call i32 @nonimmediate_operand(%struct.rtx_def* %0, i32 %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %3 = bitcast %struct.rtx_def* %2 to i32*
  %bf.load = load i32, i32* %3, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 83
  br i1 %cmp, label %land.lhs.true, label %if.end.57

land.lhs.true:                                    ; preds = %if.end
  %4 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %5 = bitcast %struct.rtx_def* %4 to i32*
  %bf.load1 = load i32, i32* %5, align 8
  %bf.lshr = lshr i32 %bf.load1, 16
  %bf.clear2 = and i32 %bf.lshr, 255
  %cmp3 = icmp eq i32 %bf.clear2, 4
  br i1 %cmp3, label %land.lhs.true.4, label %if.end.57

land.lhs.true.4:                                  ; preds = %land.lhs.true
  %6 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %7 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %8 = bitcast %struct.rtx_def* %7 to i32*
  %bf.load5 = load i32, i32* %8, align 8
  %bf.clear6 = and i32 %bf.load5, 65535
  %cmp7 = icmp eq i32 %bf.clear6, 133
  br i1 %cmp7, label %land.lhs.true.8, label %if.end.57

land.lhs.true.8:                                  ; preds = %land.lhs.true.4
  %9 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %fld9 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1
  %arrayidx10 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld9, i32 0, i64 0
  %rtx11 = bitcast %union.rtunion_def* %arrayidx10 to %struct.rtx_def**
  %10 = load %struct.rtx_def*, %struct.rtx_def** %rtx11, align 8
  %fld12 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1
  %arrayidx13 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld12, i32 0, i64 1
  %rtx14 = bitcast %union.rtunion_def* %arrayidx13 to %struct.rtx_def**
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rtx14, align 8
  %12 = bitcast %struct.rtx_def* %11 to i32*
  %bf.load15 = load i32, i32* %12, align 8
  %bf.clear16 = and i32 %bf.load15, 65535
  %cmp17 = icmp eq i32 %bf.clear16, 54
  br i1 %cmp17, label %land.lhs.true.18, label %if.end.57

land.lhs.true.18:                                 ; preds = %land.lhs.true.8
  %13 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %fld19 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1
  %arrayidx20 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld19, i32 0, i64 0
  %rtx21 = bitcast %union.rtunion_def* %arrayidx20 to %struct.rtx_def**
  %14 = load %struct.rtx_def*, %struct.rtx_def** %rtx21, align 8
  %fld22 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1
  %arrayidx23 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld22, i32 0, i64 2
  %rtx24 = bitcast %union.rtunion_def* %arrayidx23 to %struct.rtx_def**
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rtx24, align 8
  %16 = bitcast %struct.rtx_def* %15 to i32*
  %bf.load25 = load i32, i32* %16, align 8
  %bf.clear26 = and i32 %bf.load25, 65535
  %cmp27 = icmp eq i32 %bf.clear26, 54
  br i1 %cmp27, label %land.lhs.true.28, label %if.end.57

land.lhs.true.28:                                 ; preds = %land.lhs.true.18
  %17 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %fld29 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1
  %arrayidx30 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld29, i32 0, i64 0
  %rtx31 = bitcast %union.rtunion_def* %arrayidx30 to %struct.rtx_def**
  %18 = load %struct.rtx_def*, %struct.rtx_def** %rtx31, align 8
  %fld32 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1
  %arrayidx33 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld32, i32 0, i64 1
  %rtx34 = bitcast %union.rtunion_def* %arrayidx33 to %struct.rtx_def**
  %19 = load %struct.rtx_def*, %struct.rtx_def** %rtx34, align 8
  %fld35 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1
  %arrayidx36 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld35, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx36 to i64*
  %20 = load i64, i64* %rtwint, align 8
  %cmp37 = icmp eq i64 %20, 8
  br i1 %cmp37, label %land.lhs.true.38, label %if.end.57

land.lhs.true.38:                                 ; preds = %land.lhs.true.28
  %21 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %fld39 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1
  %arrayidx40 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld39, i32 0, i64 0
  %rtx41 = bitcast %union.rtunion_def* %arrayidx40 to %struct.rtx_def**
  %22 = load %struct.rtx_def*, %struct.rtx_def** %rtx41, align 8
  %fld42 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1
  %arrayidx43 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld42, i32 0, i64 2
  %rtx44 = bitcast %union.rtunion_def* %arrayidx43 to %struct.rtx_def**
  %23 = load %struct.rtx_def*, %struct.rtx_def** %rtx44, align 8
  %fld45 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1
  %arrayidx46 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld45, i32 0, i64 0
  %rtwint47 = bitcast %union.rtunion_def* %arrayidx46 to i64*
  %24 = load i64, i64* %rtwint47, align 8
  %cmp48 = icmp eq i64 %24, 8
  br i1 %cmp48, label %land.lhs.true.49, label %if.end.57

land.lhs.true.49:                                 ; preds = %land.lhs.true.38
  %25 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %fld50 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1
  %arrayidx51 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld50, i32 0, i64 1
  %rtx52 = bitcast %union.rtunion_def* %arrayidx51 to %struct.rtx_def**
  %26 = load %struct.rtx_def*, %struct.rtx_def** %rtx52, align 8
  %27 = bitcast %struct.rtx_def* %26 to i32*
  %bf.load53 = load i32, i32* %27, align 8
  %bf.clear54 = and i32 %bf.load53, 65535
  %cmp55 = icmp eq i32 %bf.clear54, 54
  br i1 %cmp55, label %if.then.56, label %if.end.57

if.then.56:                                       ; preds = %land.lhs.true.49
  store i32 1, i32* %retval
  br label %return

if.end.57:                                        ; preds = %land.lhs.true.49, %land.lhs.true.38, %land.lhs.true.28, %land.lhs.true.18, %land.lhs.true.8, %land.lhs.true.4, %land.lhs.true, %if.end
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.57, %if.then.56, %if.then
  %28 = load i32, i32* %retval
  ret i32 %28
}

; Function Attrs: nounwind uwtable
define i32 @long_memory_operand(%struct.rtx_def* %op, i32 %mode) #1 {
entry:
  %retval = alloca i32, align 4
  %op.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  store %struct.rtx_def* %op, %struct.rtx_def** %op.addr, align 8
  store i32 %mode, i32* %mode.addr, align 4
  %0 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %1 = load i32, i32* %mode.addr, align 4
  %call = call i32 @memory_operand(%struct.rtx_def* %0, i32 %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %call1 = call i32 @memory_address_length(%struct.rtx_def* %2)
  %cmp = icmp ne i32 %call1, 0
  %conv = zext i1 %cmp to i32
  store i32 %conv, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %3 = load i32, i32* %retval
  ret i32 %3
}

; Function Attrs: nounwind uwtable
define internal i32 @memory_address_length(%struct.rtx_def* %addr) #1 {
entry:
  %retval = alloca i32, align 4
  %addr.addr = alloca %struct.rtx_def*, align 8
  %parts = alloca %struct.ix86_address, align 8
  %base = alloca %struct.rtx_def*, align 8
  %index = alloca %struct.rtx_def*, align 8
  %disp = alloca %struct.rtx_def*, align 8
  %len = alloca i32, align 4
  store %struct.rtx_def* %addr, %struct.rtx_def** %addr.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 96
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8
  %3 = bitcast %struct.rtx_def* %2 to i32*
  %bf.load1 = load i32, i32* %3, align 8
  %bf.clear2 = and i32 %bf.load1, 65535
  %cmp3 = icmp eq i32 %bf.clear2, 99
  br i1 %cmp3, label %if.then, label %lor.lhs.false.4

lor.lhs.false.4:                                  ; preds = %lor.lhs.false
  %4 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8
  %5 = bitcast %struct.rtx_def* %4 to i32*
  %bf.load5 = load i32, i32* %5, align 8
  %bf.clear6 = and i32 %bf.load5, 65535
  %cmp7 = icmp eq i32 %bf.clear6, 100
  br i1 %cmp7, label %if.then, label %lor.lhs.false.8

lor.lhs.false.8:                                  ; preds = %lor.lhs.false.4
  %6 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8
  %7 = bitcast %struct.rtx_def* %6 to i32*
  %bf.load9 = load i32, i32* %7, align 8
  %bf.clear10 = and i32 %bf.load9, 65535
  %cmp11 = icmp eq i32 %bf.clear10, 101
  br i1 %cmp11, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false.8, %lor.lhs.false.4, %lor.lhs.false, %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false.8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8
  %call = call i32 @ix86_decompose_address(%struct.rtx_def* %8, %struct.ix86_address* %parts)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end.13, label %if.then.12

if.then.12:                                       ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 9877, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @__FUNCTION__.memory_address_length, i32 0, i32 0)) #7
  unreachable

if.end.13:                                        ; preds = %if.end
  %base14 = getelementptr inbounds %struct.ix86_address, %struct.ix86_address* %parts, i32 0, i32 0
  %9 = load %struct.rtx_def*, %struct.rtx_def** %base14, align 8
  store %struct.rtx_def* %9, %struct.rtx_def** %base, align 8
  %index15 = getelementptr inbounds %struct.ix86_address, %struct.ix86_address* %parts, i32 0, i32 1
  %10 = load %struct.rtx_def*, %struct.rtx_def** %index15, align 8
  store %struct.rtx_def* %10, %struct.rtx_def** %index, align 8
  %disp16 = getelementptr inbounds %struct.ix86_address, %struct.ix86_address* %parts, i32 0, i32 2
  %11 = load %struct.rtx_def*, %struct.rtx_def** %disp16, align 8
  store %struct.rtx_def* %11, %struct.rtx_def** %disp, align 8
  store i32 0, i32* %len, align 4
  %12 = load %struct.rtx_def*, %struct.rtx_def** %base, align 8
  %tobool17 = icmp ne %struct.rtx_def* %12, null
  br i1 %tobool17, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.end.13
  %13 = load %struct.rtx_def*, %struct.rtx_def** %index, align 8
  %tobool18 = icmp ne %struct.rtx_def* %13, null
  br i1 %tobool18, label %if.else, label %land.lhs.true.19

land.lhs.true.19:                                 ; preds = %land.lhs.true
  %14 = load %struct.rtx_def*, %struct.rtx_def** %disp, align 8
  %tobool20 = icmp ne %struct.rtx_def* %14, null
  br i1 %tobool20, label %if.else, label %if.then.21

if.then.21:                                       ; preds = %land.lhs.true.19
  %15 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8
  %16 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %cmp22 = icmp eq %struct.rtx_def* %15, %16
  br i1 %cmp22, label %if.then.29, label %lor.lhs.false.23

lor.lhs.false.23:                                 ; preds = %if.then.21
  %17 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8
  %18 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 5), align 8
  %cmp24 = icmp eq %struct.rtx_def* %17, %18
  br i1 %cmp24, label %if.then.29, label %lor.lhs.false.25

lor.lhs.false.25:                                 ; preds = %lor.lhs.false.23
  %19 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8
  %20 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 3), align 8
  %cmp26 = icmp eq %struct.rtx_def* %19, %20
  br i1 %cmp26, label %if.then.29, label %lor.lhs.false.27

lor.lhs.false.27:                                 ; preds = %lor.lhs.false.25
  %21 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8
  %22 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 4), align 8
  %cmp28 = icmp eq %struct.rtx_def* %21, %22
  br i1 %cmp28, label %if.then.29, label %if.end.30

if.then.29:                                       ; preds = %lor.lhs.false.27, %lor.lhs.false.25, %lor.lhs.false.23, %if.then.21
  store i32 1, i32* %len, align 4
  br label %if.end.30

if.end.30:                                        ; preds = %if.then.29, %lor.lhs.false.27
  br label %if.end.113

if.else:                                          ; preds = %land.lhs.true.19, %land.lhs.true, %if.end.13
  %23 = load %struct.rtx_def*, %struct.rtx_def** %disp, align 8
  %tobool31 = icmp ne %struct.rtx_def* %23, null
  br i1 %tobool31, label %land.lhs.true.32, label %if.else.37

land.lhs.true.32:                                 ; preds = %if.else
  %24 = load %struct.rtx_def*, %struct.rtx_def** %base, align 8
  %tobool33 = icmp ne %struct.rtx_def* %24, null
  br i1 %tobool33, label %if.else.37, label %land.lhs.true.34

land.lhs.true.34:                                 ; preds = %land.lhs.true.32
  %25 = load %struct.rtx_def*, %struct.rtx_def** %index, align 8
  %tobool35 = icmp ne %struct.rtx_def* %25, null
  br i1 %tobool35, label %if.else.37, label %if.then.36

if.then.36:                                       ; preds = %land.lhs.true.34
  store i32 4, i32* %len, align 4
  br label %if.end.112

if.else.37:                                       ; preds = %land.lhs.true.34, %land.lhs.true.32, %if.else
  %26 = load %struct.rtx_def*, %struct.rtx_def** %disp, align 8
  %tobool38 = icmp ne %struct.rtx_def* %26, null
  br i1 %tobool38, label %if.then.39, label %if.end.108

if.then.39:                                       ; preds = %if.else.37
  %27 = load %struct.rtx_def*, %struct.rtx_def** %disp, align 8
  %28 = bitcast %struct.rtx_def* %27 to i32*
  %bf.load40 = load i32, i32* %28, align 8
  %bf.clear41 = and i32 %bf.load40, 65535
  %cmp42 = icmp eq i32 %bf.clear41, 54
  br i1 %cmp42, label %land.lhs.true.43, label %if.else.106

land.lhs.true.43:                                 ; preds = %if.then.39
  br i1 false, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true.43
  %29 = load %struct.rtx_def*, %struct.rtx_def** %disp, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %29, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx to i64*
  %30 = load i64, i64* %rtwint, align 8
  %cmp44 = icmp sge i64 %30, 0
  br i1 %cmp44, label %land.lhs.true.45, label %if.else.106

land.lhs.true.45:                                 ; preds = %cond.true
  %31 = load %struct.rtx_def*, %struct.rtx_def** %disp, align 8
  %fld46 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1
  %arrayidx47 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld46, i32 0, i64 0
  %rtwint48 = bitcast %union.rtunion_def* %arrayidx47 to i64*
  %32 = load i64, i64* %rtwint48, align 8
  %cmp49 = icmp sle i64 %32, 31
  br i1 %cmp49, label %if.then.105, label %if.else.106

cond.false:                                       ; preds = %land.lhs.true.43
  br i1 false, label %cond.true.50, label %cond.false.60

cond.true.50:                                     ; preds = %cond.false
  %33 = load %struct.rtx_def*, %struct.rtx_def** %disp, align 8
  %fld51 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1
  %arrayidx52 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld51, i32 0, i64 0
  %rtwint53 = bitcast %union.rtunion_def* %arrayidx52 to i64*
  %34 = load i64, i64* %rtwint53, align 8
  %cmp54 = icmp sge i64 %34, 0
  br i1 %cmp54, label %land.lhs.true.55, label %if.else.106

land.lhs.true.55:                                 ; preds = %cond.true.50
  %35 = load %struct.rtx_def*, %struct.rtx_def** %disp, align 8
  %fld56 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %35, i32 0, i32 1
  %arrayidx57 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld56, i32 0, i64 0
  %rtwint58 = bitcast %union.rtunion_def* %arrayidx57 to i64*
  %36 = load i64, i64* %rtwint58, align 8
  %cmp59 = icmp sle i64 %36, 63
  br i1 %cmp59, label %if.then.105, label %if.else.106

cond.false.60:                                    ; preds = %cond.false
  br i1 true, label %cond.true.61, label %cond.false.71

cond.true.61:                                     ; preds = %cond.false.60
  %37 = load %struct.rtx_def*, %struct.rtx_def** %disp, align 8
  %fld62 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %37, i32 0, i32 1
  %arrayidx63 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld62, i32 0, i64 0
  %rtwint64 = bitcast %union.rtunion_def* %arrayidx63 to i64*
  %38 = load i64, i64* %rtwint64, align 8
  %cmp65 = icmp sge i64 %38, -128
  br i1 %cmp65, label %land.lhs.true.66, label %if.else.106

land.lhs.true.66:                                 ; preds = %cond.true.61
  %39 = load %struct.rtx_def*, %struct.rtx_def** %disp, align 8
  %fld67 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1
  %arrayidx68 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld67, i32 0, i64 0
  %rtwint69 = bitcast %union.rtunion_def* %arrayidx68 to i64*
  %40 = load i64, i64* %rtwint69, align 8
  %cmp70 = icmp sle i64 %40, 127
  br i1 %cmp70, label %if.then.105, label %if.else.106

cond.false.71:                                    ; preds = %cond.false.60
  br i1 false, label %cond.true.72, label %cond.false.82

cond.true.72:                                     ; preds = %cond.false.71
  %41 = load %struct.rtx_def*, %struct.rtx_def** %disp, align 8
  %fld73 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %41, i32 0, i32 1
  %arrayidx74 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld73, i32 0, i64 0
  %rtwint75 = bitcast %union.rtunion_def* %arrayidx74 to i64*
  %42 = load i64, i64* %rtwint75, align 8
  %cmp76 = icmp eq i64 %42, 255
  br i1 %cmp76, label %if.then.105, label %lor.lhs.false.77

lor.lhs.false.77:                                 ; preds = %cond.true.72
  %43 = load %struct.rtx_def*, %struct.rtx_def** %disp, align 8
  %fld78 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %43, i32 0, i32 1
  %arrayidx79 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld78, i32 0, i64 0
  %rtwint80 = bitcast %union.rtunion_def* %arrayidx79 to i64*
  %44 = load i64, i64* %rtwint80, align 8
  %cmp81 = icmp eq i64 %44, 65535
  br i1 %cmp81, label %if.then.105, label %if.else.106

cond.false.82:                                    ; preds = %cond.false.71
  br i1 false, label %cond.true.83, label %cond.false.93

cond.true.83:                                     ; preds = %cond.false.82
  %45 = load %struct.rtx_def*, %struct.rtx_def** %disp, align 8
  %fld84 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %45, i32 0, i32 1
  %arrayidx85 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld84, i32 0, i64 0
  %rtwint86 = bitcast %union.rtunion_def* %arrayidx85 to i64*
  %46 = load i64, i64* %rtwint86, align 8
  %cmp87 = icmp sge i64 %46, 0
  br i1 %cmp87, label %land.lhs.true.88, label %if.else.106

land.lhs.true.88:                                 ; preds = %cond.true.83
  %47 = load %struct.rtx_def*, %struct.rtx_def** %disp, align 8
  %fld89 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %47, i32 0, i32 1
  %arrayidx90 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld89, i32 0, i64 0
  %rtwint91 = bitcast %union.rtunion_def* %arrayidx90 to i64*
  %48 = load i64, i64* %rtwint91, align 8
  %cmp92 = icmp sle i64 %48, 3
  br i1 %cmp92, label %if.then.105, label %if.else.106

cond.false.93:                                    ; preds = %cond.false.82
  br i1 false, label %cond.true.94, label %cond.false.104

cond.true.94:                                     ; preds = %cond.false.93
  %49 = load %struct.rtx_def*, %struct.rtx_def** %disp, align 8
  %fld95 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %49, i32 0, i32 1
  %arrayidx96 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld95, i32 0, i64 0
  %rtwint97 = bitcast %union.rtunion_def* %arrayidx96 to i64*
  %50 = load i64, i64* %rtwint97, align 8
  %cmp98 = icmp sge i64 %50, 0
  br i1 %cmp98, label %land.lhs.true.99, label %if.else.106

land.lhs.true.99:                                 ; preds = %cond.true.94
  %51 = load %struct.rtx_def*, %struct.rtx_def** %disp, align 8
  %fld100 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %51, i32 0, i32 1
  %arrayidx101 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld100, i32 0, i64 0
  %rtwint102 = bitcast %union.rtunion_def* %arrayidx101 to i64*
  %52 = load i64, i64* %rtwint102, align 8
  %cmp103 = icmp sle i64 %52, 255
  br i1 %cmp103, label %if.then.105, label %if.else.106

cond.false.104:                                   ; preds = %cond.false.93
  br i1 false, label %if.then.105, label %if.else.106

if.then.105:                                      ; preds = %cond.false.104, %land.lhs.true.99, %land.lhs.true.88, %lor.lhs.false.77, %cond.true.72, %land.lhs.true.66, %land.lhs.true.55, %land.lhs.true.45
  store i32 1, i32* %len, align 4
  br label %if.end.107

if.else.106:                                      ; preds = %cond.false.104, %land.lhs.true.99, %cond.true.94, %land.lhs.true.88, %cond.true.83, %lor.lhs.false.77, %land.lhs.true.66, %cond.true.61, %land.lhs.true.55, %cond.true.50, %land.lhs.true.45, %cond.true, %if.then.39
  store i32 4, i32* %len, align 4
  br label %if.end.107

if.end.107:                                       ; preds = %if.else.106, %if.then.105
  br label %if.end.108

if.end.108:                                       ; preds = %if.end.107, %if.else.37
  %53 = load %struct.rtx_def*, %struct.rtx_def** %index, align 8
  %tobool109 = icmp ne %struct.rtx_def* %53, null
  br i1 %tobool109, label %if.then.110, label %if.end.111

if.then.110:                                      ; preds = %if.end.108
  %54 = load i32, i32* %len, align 4
  %add = add nsw i32 %54, 1
  store i32 %add, i32* %len, align 4
  br label %if.end.111

if.end.111:                                       ; preds = %if.then.110, %if.end.108
  br label %if.end.112

if.end.112:                                       ; preds = %if.end.111, %if.then.36
  br label %if.end.113

if.end.113:                                       ; preds = %if.end.112, %if.end.30
  %55 = load i32, i32* %len, align 4
  store i32 %55, i32* %retval
  br label %return

return:                                           ; preds = %if.end.113, %if.then
  %56 = load i32, i32* %retval
  ret i32 %56
}

; Function Attrs: nounwind uwtable
define i32 @aligned_operand(%struct.rtx_def* %op, i32 %mode) #1 {
entry:
  %retval = alloca i32, align 4
  %op.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %parts = alloca %struct.ix86_address, align 8
  store %struct.rtx_def* %op, %struct.rtx_def** %op.addr, align 8
  store i32 %mode, i32* %mode.addr, align 4
  %0 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %1 = load i32, i32* %mode.addr, align 4
  %call = call i32 @general_operand(%struct.rtx_def* %0, i32 %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %3 = bitcast %struct.rtx_def* %2 to i32*
  %bf.load = load i32, i32* %3, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp ne i32 %bf.clear, 66
  br i1 %cmp, label %if.then.1, label %if.end.2

if.then.1:                                        ; preds = %if.end
  store i32 1, i32* %retval
  br label %return

if.end.2:                                         ; preds = %if.end
  %4 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %5 = bitcast %struct.rtx_def* %4 to i32*
  %bf.load3 = load i32, i32* %5, align 8
  %bf.lshr = lshr i32 %bf.load3, 27
  %bf.clear4 = and i32 %bf.lshr, 1
  %tobool5 = icmp ne i32 %bf.clear4, 0
  br i1 %tobool5, label %if.then.6, label %if.end.7

if.then.6:                                        ; preds = %if.end.2
  store i32 0, i32* %retval
  br label %return

if.end.7:                                         ; preds = %if.end.2
  %6 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %7 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %7, %struct.rtx_def** %op.addr, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %9 = bitcast %struct.rtx_def* %8 to i32*
  %bf.load8 = load i32, i32* %9, align 8
  %bf.clear9 = and i32 %bf.load8, 65535
  %cmp10 = icmp eq i32 %bf.clear9, 96
  br i1 %cmp10, label %if.then.14, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.7
  %10 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %11 = bitcast %struct.rtx_def* %10 to i32*
  %bf.load11 = load i32, i32* %11, align 8
  %bf.clear12 = and i32 %bf.load11, 65535
  %cmp13 = icmp eq i32 %bf.clear12, 99
  br i1 %cmp13, label %if.then.14, label %if.end.15

if.then.14:                                       ; preds = %lor.lhs.false, %if.end.7
  store i32 1, i32* %retval
  br label %return

if.end.15:                                        ; preds = %lor.lhs.false
  %12 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %call16 = call i32 @ix86_decompose_address(%struct.rtx_def* %12, %struct.ix86_address* %parts)
  %tobool17 = icmp ne i32 %call16, 0
  br i1 %tobool17, label %if.end.19, label %if.then.18

if.then.18:                                       ; preds = %if.end.15
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 3535, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__FUNCTION__.aligned_operand, i32 0, i32 0)) #7
  unreachable

if.end.19:                                        ; preds = %if.end.15
  %index = getelementptr inbounds %struct.ix86_address, %struct.ix86_address* %parts, i32 0, i32 1
  %13 = load %struct.rtx_def*, %struct.rtx_def** %index, align 8
  %tobool20 = icmp ne %struct.rtx_def* %13, null
  br i1 %tobool20, label %if.then.21, label %if.end.31

if.then.21:                                       ; preds = %if.end.19
  %scale = getelementptr inbounds %struct.ix86_address, %struct.ix86_address* %parts, i32 0, i32 3
  %14 = load i64, i64* %scale, align 8
  %cmp22 = icmp slt i64 %14, 4
  br i1 %cmp22, label %land.lhs.true, label %if.end.30

land.lhs.true:                                    ; preds = %if.then.21
  %index23 = getelementptr inbounds %struct.ix86_address, %struct.ix86_address* %parts, i32 0, i32 1
  %15 = load %struct.rtx_def*, %struct.rtx_def** %index23, align 8
  %fld24 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1
  %arrayidx25 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld24, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx25 to i32*
  %16 = load i32, i32* %rtuint, align 4
  %idxprom = zext i32 %16 to i64
  %17 = load %struct.function*, %struct.function** @cfun, align 8
  %emit = getelementptr inbounds %struct.function, %struct.function* %17, i32 0, i32 3
  %18 = load %struct.emit_status*, %struct.emit_status** %emit, align 8
  %regno_pointer_align = getelementptr inbounds %struct.emit_status, %struct.emit_status* %18, i32 0, i32 10
  %19 = load i8*, i8** %regno_pointer_align, align 8
  %arrayidx26 = getelementptr inbounds i8, i8* %19, i64 %idxprom
  %20 = load i8, i8* %arrayidx26, align 1
  %conv = zext i8 %20 to i32
  %cmp27 = icmp slt i32 %conv, 32
  br i1 %cmp27, label %if.then.29, label %if.end.30

if.then.29:                                       ; preds = %land.lhs.true
  store i32 0, i32* %retval
  br label %return

if.end.30:                                        ; preds = %land.lhs.true, %if.then.21
  br label %if.end.31

if.end.31:                                        ; preds = %if.end.30, %if.end.19
  %base = getelementptr inbounds %struct.ix86_address, %struct.ix86_address* %parts, i32 0, i32 0
  %21 = load %struct.rtx_def*, %struct.rtx_def** %base, align 8
  %tobool32 = icmp ne %struct.rtx_def* %21, null
  br i1 %tobool32, label %if.then.33, label %if.end.47

if.then.33:                                       ; preds = %if.end.31
  %base34 = getelementptr inbounds %struct.ix86_address, %struct.ix86_address* %parts, i32 0, i32 0
  %22 = load %struct.rtx_def*, %struct.rtx_def** %base34, align 8
  %fld35 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1
  %arrayidx36 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld35, i32 0, i64 0
  %rtuint37 = bitcast %union.rtunion_def* %arrayidx36 to i32*
  %23 = load i32, i32* %rtuint37, align 4
  %idxprom38 = zext i32 %23 to i64
  %24 = load %struct.function*, %struct.function** @cfun, align 8
  %emit39 = getelementptr inbounds %struct.function, %struct.function* %24, i32 0, i32 3
  %25 = load %struct.emit_status*, %struct.emit_status** %emit39, align 8
  %regno_pointer_align40 = getelementptr inbounds %struct.emit_status, %struct.emit_status* %25, i32 0, i32 10
  %26 = load i8*, i8** %regno_pointer_align40, align 8
  %arrayidx41 = getelementptr inbounds i8, i8* %26, i64 %idxprom38
  %27 = load i8, i8* %arrayidx41, align 1
  %conv42 = zext i8 %27 to i32
  %cmp43 = icmp slt i32 %conv42, 32
  br i1 %cmp43, label %if.then.45, label %if.end.46

if.then.45:                                       ; preds = %if.then.33
  store i32 0, i32* %retval
  br label %return

if.end.46:                                        ; preds = %if.then.33
  br label %if.end.47

if.end.47:                                        ; preds = %if.end.46, %if.end.31
  %disp = getelementptr inbounds %struct.ix86_address, %struct.ix86_address* %parts, i32 0, i32 2
  %28 = load %struct.rtx_def*, %struct.rtx_def** %disp, align 8
  %tobool48 = icmp ne %struct.rtx_def* %28, null
  br i1 %tobool48, label %if.then.49, label %if.end.63

if.then.49:                                       ; preds = %if.end.47
  %disp50 = getelementptr inbounds %struct.ix86_address, %struct.ix86_address* %parts, i32 0, i32 2
  %29 = load %struct.rtx_def*, %struct.rtx_def** %disp50, align 8
  %30 = bitcast %struct.rtx_def* %29 to i32*
  %bf.load51 = load i32, i32* %30, align 8
  %bf.clear52 = and i32 %bf.load51, 65535
  %cmp53 = icmp ne i32 %bf.clear52, 54
  br i1 %cmp53, label %if.then.61, label %lor.lhs.false.55

lor.lhs.false.55:                                 ; preds = %if.then.49
  %disp56 = getelementptr inbounds %struct.ix86_address, %struct.ix86_address* %parts, i32 0, i32 2
  %31 = load %struct.rtx_def*, %struct.rtx_def** %disp56, align 8
  %fld57 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1
  %arrayidx58 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld57, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx58 to i64*
  %32 = load i64, i64* %rtwint, align 8
  %and = and i64 %32, 3
  %cmp59 = icmp ne i64 %and, 0
  br i1 %cmp59, label %if.then.61, label %if.end.62

if.then.61:                                       ; preds = %lor.lhs.false.55, %if.then.49
  store i32 0, i32* %retval
  br label %return

if.end.62:                                        ; preds = %lor.lhs.false.55
  br label %if.end.63

if.end.63:                                        ; preds = %if.end.62, %if.end.47
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.63, %if.then.61, %if.then.45, %if.then.29, %if.then.14, %if.then.6, %if.then.1, %if.then
  %33 = load i32, i32* %retval
  ret i32 %33
}

; Function Attrs: nounwind uwtable
define i32 @standard_80387_constant_p(%struct.rtx_def* %x) #1 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp ne i32 %bf.clear, 55
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %3 = bitcast %struct.rtx_def* %2 to i32*
  %bf.load1 = load i32, i32* %3, align 8
  %bf.lshr = lshr i32 %bf.load1, 16
  %bf.clear2 = and i32 %bf.lshr, 255
  %idxprom = sext i32 %bf.clear2 to i64
  %arrayidx = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom
  %4 = load i32, i32* %arrayidx, align 4
  %cmp3 = icmp eq i32 %4, 2
  br i1 %cmp3, label %if.end, label %lor.lhs.false.4

lor.lhs.false.4:                                  ; preds = %lor.lhs.false
  %5 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %6 = bitcast %struct.rtx_def* %5 to i32*
  %bf.load5 = load i32, i32* %6, align 8
  %bf.lshr6 = lshr i32 %bf.load5, 16
  %bf.clear7 = and i32 %bf.lshr6, 255
  %idxprom8 = sext i32 %bf.clear7 to i64
  %arrayidx9 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom8
  %7 = load i32, i32* %arrayidx9, align 4
  %cmp10 = icmp eq i32 %7, 6
  br i1 %cmp10, label %if.end, label %lor.lhs.false.11

lor.lhs.false.11:                                 ; preds = %lor.lhs.false.4
  %8 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %9 = bitcast %struct.rtx_def* %8 to i32*
  %bf.load12 = load i32, i32* %9, align 8
  %bf.lshr13 = lshr i32 %bf.load12, 16
  %bf.clear14 = and i32 %bf.lshr13, 255
  %idxprom15 = sext i32 %bf.clear14 to i64
  %arrayidx16 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom15
  %10 = load i32, i32* %arrayidx16, align 4
  %cmp17 = icmp eq i32 %10, 8
  br i1 %cmp17, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false.11, %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false.11, %lor.lhs.false.4, %lor.lhs.false
  %11 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %12 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %13 = bitcast %struct.rtx_def* %12 to i32*
  %bf.load18 = load i32, i32* %13, align 8
  %bf.lshr19 = lshr i32 %bf.load18, 16
  %bf.clear20 = and i32 %bf.lshr19, 255
  %idxprom21 = sext i32 %bf.clear20 to i64
  %arrayidx22 = getelementptr inbounds [59 x %struct.rtx_def*], [59 x %struct.rtx_def*]* getelementptr inbounds ([3 x [59 x %struct.rtx_def*]], [3 x [59 x %struct.rtx_def*]]* @const_tiny_rtx, i32 0, i64 0), i32 0, i64 %idxprom21
  %14 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx22, align 8
  %cmp23 = icmp eq %struct.rtx_def* %11, %14
  br i1 %cmp23, label %if.then.24, label %if.end.25

if.then.24:                                       ; preds = %if.end
  store i32 1, i32* %retval
  br label %return

if.end.25:                                        ; preds = %if.end
  %15 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %16 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %17 = bitcast %struct.rtx_def* %16 to i32*
  %bf.load26 = load i32, i32* %17, align 8
  %bf.lshr27 = lshr i32 %bf.load26, 16
  %bf.clear28 = and i32 %bf.lshr27, 255
  %idxprom29 = sext i32 %bf.clear28 to i64
  %arrayidx30 = getelementptr inbounds [59 x %struct.rtx_def*], [59 x %struct.rtx_def*]* getelementptr inbounds ([3 x [59 x %struct.rtx_def*]], [3 x [59 x %struct.rtx_def*]]* @const_tiny_rtx, i32 0, i64 1), i32 0, i64 %idxprom29
  %18 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx30, align 8
  %cmp31 = icmp eq %struct.rtx_def* %15, %18
  br i1 %cmp31, label %if.then.32, label %if.end.33

if.then.32:                                       ; preds = %if.end.25
  store i32 2, i32* %retval
  br label %return

if.end.33:                                        ; preds = %if.end.25
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.33, %if.then.32, %if.then.24, %if.then
  %19 = load i32, i32* %retval
  ret i32 %19
}

; Function Attrs: nounwind uwtable
define i32 @standard_sse_constant_p(%struct.rtx_def* %x) #1 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp ne i32 %bf.clear, 55
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %4 = bitcast %struct.rtx_def* %3 to i32*
  %bf.load1 = load i32, i32* %4, align 8
  %bf.lshr = lshr i32 %bf.load1, 16
  %bf.clear2 = and i32 %bf.lshr, 255
  %idxprom = sext i32 %bf.clear2 to i64
  %arrayidx = getelementptr inbounds [59 x %struct.rtx_def*], [59 x %struct.rtx_def*]* getelementptr inbounds ([3 x [59 x %struct.rtx_def*]], [3 x [59 x %struct.rtx_def*]]* @const_tiny_rtx, i32 0, i64 0), i32 0, i64 %idxprom
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %cmp3 = icmp eq %struct.rtx_def* %2, %5
  %conv = zext i1 %cmp3 to i32
  store i32 %conv, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %6 = load i32, i32* %retval
  ret i32 %6
}

; Function Attrs: nounwind uwtable
define i32 @ix86_can_use_return_insn_p() #1 {
entry:
  %retval = alloca i32, align 4
  %frame = alloca %struct.ix86_frame, align 8
  %0 = load i32, i32* @reload_completed, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* @frame_pointer_needed, align 4
  %tobool1 = icmp ne i32 %1, 0
  br i1 %tobool1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %2 = load %struct.function*, %struct.function** @cfun, align 8
  %pops_args = getelementptr inbounds %struct.function, %struct.function* %2, i32 0, i32 8
  %3 = load i32, i32* %pops_args, align 4
  %tobool2 = icmp ne i32 %3, 0
  br i1 %tobool2, label %land.lhs.true, label %if.end.4

land.lhs.true:                                    ; preds = %if.end
  %4 = load %struct.function*, %struct.function** @cfun, align 8
  %args_size = getelementptr inbounds %struct.function, %struct.function* %4, i32 0, i32 9
  %5 = load i32, i32* %args_size, align 4
  %cmp = icmp sge i32 %5, 32768
  br i1 %cmp, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %land.lhs.true
  store i32 0, i32* %retval
  br label %return

if.end.4:                                         ; preds = %land.lhs.true, %if.end
  call void @ix86_compute_frame_layout(%struct.ix86_frame* %frame)
  %to_allocate = getelementptr inbounds %struct.ix86_frame, %struct.ix86_frame* %frame, i32 0, i32 7
  %6 = load i64, i64* %to_allocate, align 8
  %cmp5 = icmp eq i64 %6, 0
  br i1 %cmp5, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.end.4
  %nregs = getelementptr inbounds %struct.ix86_frame, %struct.ix86_frame* %frame, i32 0, i32 0
  %7 = load i32, i32* %nregs, align 4
  %cmp6 = icmp eq i32 %7, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end.4
  %8 = phi i1 [ false, %if.end.4 ], [ %cmp6, %land.rhs ]
  %land.ext = zext i1 %8 to i32
  store i32 %land.ext, i32* %retval
  br label %return

return:                                           ; preds = %land.end, %if.then.3, %if.then
  %9 = load i32, i32* %retval
  ret i32 %9
}

; Function Attrs: nounwind uwtable
define internal void @ix86_compute_frame_layout(%struct.ix86_frame* %frame) #1 {
entry:
  %frame.addr = alloca %struct.ix86_frame*, align 8
  %total_size = alloca i64, align 8
  %stack_alignment_needed = alloca i32, align 4
  %offset = alloca i32, align 4
  %preferred_alignment = alloca i32, align 4
  %size = alloca i64, align 8
  store %struct.ix86_frame* %frame, %struct.ix86_frame** %frame.addr, align 8
  %0 = load %struct.function*, %struct.function** @cfun, align 8
  %stack_alignment_needed1 = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 52
  %1 = load i32, i32* %stack_alignment_needed1, align 4
  %div = sdiv i32 %1, 8
  store i32 %div, i32* %stack_alignment_needed, align 4
  %2 = load %struct.function*, %struct.function** @cfun, align 8
  %preferred_stack_boundary = getelementptr inbounds %struct.function, %struct.function* %2, i32 0, i32 53
  %3 = load i32, i32* %preferred_stack_boundary, align 4
  %div2 = sdiv i32 %3, 8
  store i32 %div2, i32* %preferred_alignment, align 4
  %call = call i64 @get_frame_size()
  store i64 %call, i64* %size, align 8
  %call3 = call i32 @ix86_nsaved_regs()
  %4 = load %struct.ix86_frame*, %struct.ix86_frame** %frame.addr, align 8
  %nregs = getelementptr inbounds %struct.ix86_frame, %struct.ix86_frame* %4, i32 0, i32 0
  store i32 %call3, i32* %nregs, align 4
  %5 = load i64, i64* %size, align 8
  store i64 %5, i64* %total_size, align 8
  %6 = load i32, i32* @frame_pointer_needed, align 4
  %tobool = icmp ne i32 %6, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %7 = load i32, i32* @target_flags, align 4
  %and = and i32 %7, 33554432
  %tobool4 = icmp ne i32 %and, 0
  %cond = select i1 %tobool4, i32 8, i32 4
  %mul = mul nsw i32 %cond, 2
  br label %cond.end

cond.false:                                       ; preds = %entry
  %8 = load i32, i32* @target_flags, align 4
  %and5 = and i32 %8, 33554432
  %tobool6 = icmp ne i32 %and5, 0
  %cond7 = select i1 %tobool6, i32 8, i32 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond8 = phi i32 [ %mul, %cond.true ], [ %cond7, %cond.false ]
  store i32 %cond8, i32* %offset, align 4
  %9 = load i32, i32* %offset, align 4
  %conv = sext i32 %9 to i64
  %10 = load %struct.ix86_frame*, %struct.ix86_frame** %frame.addr, align 8
  %hard_frame_pointer_offset = getelementptr inbounds %struct.ix86_frame, %struct.ix86_frame* %10, i32 0, i32 9
  store i64 %conv, i64* %hard_frame_pointer_offset, align 8
  %11 = load i64, i64* %size, align 8
  %tobool9 = icmp ne i64 %11, 0
  br i1 %tobool9, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.end
  %12 = load i32, i32* %stack_alignment_needed, align 4
  %tobool10 = icmp ne i32 %12, 0
  br i1 %tobool10, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 4048, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @__FUNCTION__.ix86_compute_frame_layout, i32 0, i32 0)) #7
  unreachable

if.end:                                           ; preds = %land.lhs.true, %cond.end
  %13 = load i32, i32* %preferred_alignment, align 4
  %14 = load i32, i32* @target_flags, align 4
  %and11 = and i32 %14, 33554432
  %tobool12 = icmp ne i32 %and11, 0
  %cond13 = select i1 %tobool12, i32 64, i32 32
  %div14 = sdiv i32 %cond13, 8
  %cmp = icmp slt i32 %13, %div14
  br i1 %cmp, label %if.then.16, label %if.end.17

if.then.16:                                       ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 4050, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @__FUNCTION__.ix86_compute_frame_layout, i32 0, i32 0)) #7
  unreachable

if.end.17:                                        ; preds = %if.end
  %15 = load i32, i32* %preferred_alignment, align 4
  %16 = load i32, i32* @ix86_preferred_stack_boundary, align 4
  %div18 = sdiv i32 %16, 8
  %cmp19 = icmp sgt i32 %15, %div18
  br i1 %cmp19, label %if.then.21, label %if.end.22

if.then.21:                                       ; preds = %if.end.17
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 4052, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @__FUNCTION__.ix86_compute_frame_layout, i32 0, i32 0)) #7
  unreachable

if.end.22:                                        ; preds = %if.end.17
  %17 = load i32, i32* %stack_alignment_needed, align 4
  %18 = load i32, i32* @ix86_preferred_stack_boundary, align 4
  %div23 = sdiv i32 %18, 8
  %cmp24 = icmp sgt i32 %17, %div23
  br i1 %cmp24, label %if.then.26, label %if.end.27

if.then.26:                                       ; preds = %if.end.22
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 4054, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @__FUNCTION__.ix86_compute_frame_layout, i32 0, i32 0)) #7
  unreachable

if.end.27:                                        ; preds = %if.end.22
  %19 = load i32, i32* %stack_alignment_needed, align 4
  %20 = load i32, i32* @target_flags, align 4
  %and28 = and i32 %20, 33554432
  %tobool29 = icmp ne i32 %and28, 0
  %cond30 = select i1 %tobool29, i32 64, i32 32
  %div31 = sdiv i32 %cond30, 8
  %cmp32 = icmp slt i32 %19, %div31
  br i1 %cmp32, label %if.then.34, label %if.end.39

if.then.34:                                       ; preds = %if.end.27
  %21 = load i32, i32* @target_flags, align 4
  %and35 = and i32 %21, 33554432
  %tobool36 = icmp ne i32 %and35, 0
  %cond37 = select i1 %tobool36, i32 64, i32 32
  %div38 = sdiv i32 %cond37, 8
  store i32 %div38, i32* %stack_alignment_needed, align 4
  br label %if.end.39

if.end.39:                                        ; preds = %if.then.34, %if.end.27
  %22 = load %struct.ix86_frame*, %struct.ix86_frame** %frame.addr, align 8
  %nregs40 = getelementptr inbounds %struct.ix86_frame, %struct.ix86_frame* %22, i32 0, i32 0
  %23 = load i32, i32* %nregs40, align 4
  %24 = load i32, i32* @target_flags, align 4
  %and41 = and i32 %24, 33554432
  %tobool42 = icmp ne i32 %and41, 0
  %cond43 = select i1 %tobool42, i32 8, i32 4
  %mul44 = mul nsw i32 %23, %cond43
  %25 = load i32, i32* %offset, align 4
  %add = add nsw i32 %25, %mul44
  store i32 %add, i32* %offset, align 4
  %26 = load %struct.function*, %struct.function** @cfun, align 8
  %machine = getelementptr inbounds %struct.function, %struct.function* %26, i32 0, i32 51
  %27 = load %struct.machine_function*, %struct.machine_function** %machine, align 8
  %save_varrargs_registers = getelementptr inbounds %struct.machine_function, %struct.machine_function* %27, i32 0, i32 1
  %28 = load i32, i32* %save_varrargs_registers, align 4
  %tobool45 = icmp ne i32 %28, 0
  br i1 %tobool45, label %if.then.46, label %if.else

if.then.46:                                       ; preds = %if.end.39
  %29 = load i32, i32* @target_flags, align 4
  %and47 = and i32 %29, 33554432
  %tobool48 = icmp ne i32 %and47, 0
  %cond49 = select i1 %tobool48, i32 6, i32 3
  %30 = load i32, i32* @target_flags, align 4
  %and50 = and i32 %30, 33554432
  %tobool51 = icmp ne i32 %and50, 0
  %cond52 = select i1 %tobool51, i32 8, i32 4
  %mul53 = mul nsw i32 %cond49, %cond52
  %31 = load i32, i32* @target_flags, align 4
  %and54 = and i32 %31, 33554432
  %tobool55 = icmp ne i32 %and54, 0
  %cond56 = select i1 %tobool55, i32 8, i32 0
  %mul57 = mul nsw i32 %cond56, 16
  %add58 = add nsw i32 %mul53, %mul57
  %32 = load i32, i32* %offset, align 4
  %add59 = add nsw i32 %32, %add58
  store i32 %add59, i32* %offset, align 4
  %33 = load i32, i32* @target_flags, align 4
  %and60 = and i32 %33, 33554432
  %tobool61 = icmp ne i32 %and60, 0
  %cond62 = select i1 %tobool61, i32 6, i32 3
  %34 = load i32, i32* @target_flags, align 4
  %and63 = and i32 %34, 33554432
  %tobool64 = icmp ne i32 %and63, 0
  %cond65 = select i1 %tobool64, i32 8, i32 4
  %mul66 = mul nsw i32 %cond62, %cond65
  %35 = load i32, i32* @target_flags, align 4
  %and67 = and i32 %35, 33554432
  %tobool68 = icmp ne i32 %and67, 0
  %cond69 = select i1 %tobool68, i32 8, i32 0
  %mul70 = mul nsw i32 %cond69, 16
  %add71 = add nsw i32 %mul66, %mul70
  %36 = load %struct.ix86_frame*, %struct.ix86_frame** %frame.addr, align 8
  %va_arg_size = getelementptr inbounds %struct.ix86_frame, %struct.ix86_frame* %36, i32 0, i32 2
  store i32 %add71, i32* %va_arg_size, align 4
  br label %if.end.73

if.else:                                          ; preds = %if.end.39
  %37 = load %struct.ix86_frame*, %struct.ix86_frame** %frame.addr, align 8
  %va_arg_size72 = getelementptr inbounds %struct.ix86_frame, %struct.ix86_frame* %37, i32 0, i32 2
  store i32 0, i32* %va_arg_size72, align 4
  br label %if.end.73

if.end.73:                                        ; preds = %if.else, %if.then.46
  %38 = load i32, i32* %offset, align 4
  %39 = load i32, i32* %stack_alignment_needed, align 4
  %add74 = add nsw i32 %38, %39
  %sub = sub nsw i32 %add74, 1
  %40 = load i32, i32* %stack_alignment_needed, align 4
  %sub75 = sub nsw i32 0, %40
  %and76 = and i32 %sub, %sub75
  %41 = load i32, i32* %offset, align 4
  %sub77 = sub nsw i32 %and76, %41
  %42 = load %struct.ix86_frame*, %struct.ix86_frame** %frame.addr, align 8
  %padding1 = getelementptr inbounds %struct.ix86_frame, %struct.ix86_frame* %42, i32 0, i32 1
  store i32 %sub77, i32* %padding1, align 4
  %43 = load %struct.ix86_frame*, %struct.ix86_frame** %frame.addr, align 8
  %padding178 = getelementptr inbounds %struct.ix86_frame, %struct.ix86_frame* %43, i32 0, i32 1
  %44 = load i32, i32* %padding178, align 4
  %45 = load i32, i32* %offset, align 4
  %add79 = add nsw i32 %45, %44
  store i32 %add79, i32* %offset, align 4
  %46 = load i32, i32* %offset, align 4
  %conv80 = sext i32 %46 to i64
  %47 = load %struct.ix86_frame*, %struct.ix86_frame** %frame.addr, align 8
  %frame_pointer_offset = getelementptr inbounds %struct.ix86_frame, %struct.ix86_frame* %47, i32 0, i32 8
  store i64 %conv80, i64* %frame_pointer_offset, align 8
  %48 = load i64, i64* %size, align 8
  %49 = load i32, i32* %offset, align 4
  %conv81 = sext i32 %49 to i64
  %add82 = add nsw i64 %conv81, %48
  %conv83 = trunc i64 %add82 to i32
  store i32 %conv83, i32* %offset, align 4
  %50 = load i32, i32* @target_flags, align 4
  %and84 = and i32 %50, 4096
  %tobool85 = icmp ne i32 %and84, 0
  br i1 %tobool85, label %land.lhs.true.86, label %if.else.91

land.lhs.true.86:                                 ; preds = %if.end.73
  %51 = load i32, i32* @current_function_is_leaf, align 4
  %tobool87 = icmp ne i32 %51, 0
  br i1 %tobool87, label %if.else.91, label %if.then.88

if.then.88:                                       ; preds = %land.lhs.true.86
  %52 = load %struct.function*, %struct.function** @cfun, align 8
  %outgoing_args_size = getelementptr inbounds %struct.function, %struct.function* %52, i32 0, i32 11
  %53 = load i32, i32* %outgoing_args_size, align 4
  %54 = load i32, i32* %offset, align 4
  %add89 = add nsw i32 %54, %53
  store i32 %add89, i32* %offset, align 4
  %55 = load %struct.function*, %struct.function** @cfun, align 8
  %outgoing_args_size90 = getelementptr inbounds %struct.function, %struct.function* %55, i32 0, i32 11
  %56 = load i32, i32* %outgoing_args_size90, align 4
  %57 = load %struct.ix86_frame*, %struct.ix86_frame** %frame.addr, align 8
  %outgoing_arguments_size = getelementptr inbounds %struct.ix86_frame, %struct.ix86_frame* %57, i32 0, i32 5
  store i32 %56, i32* %outgoing_arguments_size, align 4
  br label %if.end.93

if.else.91:                                       ; preds = %land.lhs.true.86, %if.end.73
  %58 = load %struct.ix86_frame*, %struct.ix86_frame** %frame.addr, align 8
  %outgoing_arguments_size92 = getelementptr inbounds %struct.ix86_frame, %struct.ix86_frame* %58, i32 0, i32 5
  store i32 0, i32* %outgoing_arguments_size92, align 4
  br label %if.end.93

if.end.93:                                        ; preds = %if.else.91, %if.then.88
  %59 = load i32, i32* @current_function_is_leaf, align 4
  %tobool94 = icmp ne i32 %59, 0
  br i1 %tobool94, label %lor.lhs.false, label %if.then.96

lor.lhs.false:                                    ; preds = %if.end.93
  %60 = load %struct.function*, %struct.function** @cfun, align 8
  %calls_alloca = getelementptr inbounds %struct.function, %struct.function* %60, i32 0, i32 56
  %61 = bitcast i24* %calls_alloca to i32*
  %bf.load = load i32, i32* %61, align 8
  %bf.lshr = lshr i32 %bf.load, 6
  %bf.clear = and i32 %bf.lshr, 1
  %tobool95 = icmp ne i32 %bf.clear, 0
  br i1 %tobool95, label %if.then.96, label %if.else.102

if.then.96:                                       ; preds = %lor.lhs.false, %if.end.93
  %62 = load i32, i32* %offset, align 4
  %63 = load i32, i32* %preferred_alignment, align 4
  %add97 = add nsw i32 %62, %63
  %sub98 = sub nsw i32 %add97, 1
  %64 = load i32, i32* %preferred_alignment, align 4
  %sub99 = sub nsw i32 0, %64
  %and100 = and i32 %sub98, %sub99
  %65 = load i32, i32* %offset, align 4
  %sub101 = sub nsw i32 %and100, %65
  %66 = load %struct.ix86_frame*, %struct.ix86_frame** %frame.addr, align 8
  %padding2 = getelementptr inbounds %struct.ix86_frame, %struct.ix86_frame* %66, i32 0, i32 4
  store i32 %sub101, i32* %padding2, align 4
  br label %if.end.104

if.else.102:                                      ; preds = %lor.lhs.false
  %67 = load %struct.ix86_frame*, %struct.ix86_frame** %frame.addr, align 8
  %padding2103 = getelementptr inbounds %struct.ix86_frame, %struct.ix86_frame* %67, i32 0, i32 4
  store i32 0, i32* %padding2103, align 4
  br label %if.end.104

if.end.104:                                       ; preds = %if.else.102, %if.then.96
  %68 = load %struct.ix86_frame*, %struct.ix86_frame** %frame.addr, align 8
  %padding2105 = getelementptr inbounds %struct.ix86_frame, %struct.ix86_frame* %68, i32 0, i32 4
  %69 = load i32, i32* %padding2105, align 4
  %70 = load i32, i32* %offset, align 4
  %add106 = add nsw i32 %70, %69
  store i32 %add106, i32* %offset, align 4
  %71 = load i32, i32* %offset, align 4
  %conv107 = sext i32 %71 to i64
  %72 = load %struct.ix86_frame*, %struct.ix86_frame** %frame.addr, align 8
  %stack_pointer_offset = getelementptr inbounds %struct.ix86_frame, %struct.ix86_frame* %72, i32 0, i32 10
  store i64 %conv107, i64* %stack_pointer_offset, align 8
  %73 = load i64, i64* %size, align 8
  %74 = load %struct.ix86_frame*, %struct.ix86_frame** %frame.addr, align 8
  %padding1108 = getelementptr inbounds %struct.ix86_frame, %struct.ix86_frame* %74, i32 0, i32 1
  %75 = load i32, i32* %padding1108, align 4
  %conv109 = sext i32 %75 to i64
  %add110 = add nsw i64 %73, %conv109
  %76 = load %struct.ix86_frame*, %struct.ix86_frame** %frame.addr, align 8
  %padding2111 = getelementptr inbounds %struct.ix86_frame, %struct.ix86_frame* %76, i32 0, i32 4
  %77 = load i32, i32* %padding2111, align 4
  %conv112 = sext i32 %77 to i64
  %add113 = add nsw i64 %add110, %conv112
  %78 = load %struct.ix86_frame*, %struct.ix86_frame** %frame.addr, align 8
  %outgoing_arguments_size114 = getelementptr inbounds %struct.ix86_frame, %struct.ix86_frame* %78, i32 0, i32 5
  %79 = load i32, i32* %outgoing_arguments_size114, align 4
  %conv115 = sext i32 %79 to i64
  %add116 = add nsw i64 %add113, %conv115
  %80 = load %struct.ix86_frame*, %struct.ix86_frame** %frame.addr, align 8
  %va_arg_size117 = getelementptr inbounds %struct.ix86_frame, %struct.ix86_frame* %80, i32 0, i32 2
  %81 = load i32, i32* %va_arg_size117, align 4
  %conv118 = sext i32 %81 to i64
  %add119 = add nsw i64 %add116, %conv118
  %82 = load %struct.ix86_frame*, %struct.ix86_frame** %frame.addr, align 8
  %to_allocate = getelementptr inbounds %struct.ix86_frame, %struct.ix86_frame* %82, i32 0, i32 7
  store i64 %add119, i64* %to_allocate, align 8
  %83 = load i32, i32* @target_flags, align 4
  %and120 = and i32 %83, 33554432
  %tobool121 = icmp ne i32 %and120, 0
  br i1 %tobool121, label %land.lhs.true.122, label %if.else.138

land.lhs.true.122:                                ; preds = %if.end.104
  %84 = load i32, i32* @target_flags, align 4
  %and123 = and i32 %84, 67108864
  %tobool124 = icmp ne i32 %and123, 0
  br i1 %tobool124, label %if.else.138, label %land.lhs.true.125

land.lhs.true.125:                                ; preds = %land.lhs.true.122
  %85 = load i32, i32* @current_function_sp_is_unchanging, align 4
  %tobool126 = icmp ne i32 %85, 0
  br i1 %tobool126, label %land.lhs.true.127, label %if.else.138

land.lhs.true.127:                                ; preds = %land.lhs.true.125
  %86 = load i32, i32* @current_function_is_leaf, align 4
  %tobool128 = icmp ne i32 %86, 0
  br i1 %tobool128, label %if.then.129, label %if.else.138

if.then.129:                                      ; preds = %land.lhs.true.127
  %87 = load %struct.ix86_frame*, %struct.ix86_frame** %frame.addr, align 8
  %to_allocate130 = getelementptr inbounds %struct.ix86_frame, %struct.ix86_frame* %87, i32 0, i32 7
  %88 = load i64, i64* %to_allocate130, align 8
  %conv131 = trunc i64 %88 to i32
  %89 = load %struct.ix86_frame*, %struct.ix86_frame** %frame.addr, align 8
  %red_zone_size = getelementptr inbounds %struct.ix86_frame, %struct.ix86_frame* %89, i32 0, i32 6
  store i32 %conv131, i32* %red_zone_size, align 4
  %90 = load %struct.ix86_frame*, %struct.ix86_frame** %frame.addr, align 8
  %red_zone_size132 = getelementptr inbounds %struct.ix86_frame, %struct.ix86_frame* %90, i32 0, i32 6
  %91 = load i32, i32* %red_zone_size132, align 4
  %cmp133 = icmp sgt i32 %91, 120
  br i1 %cmp133, label %if.then.135, label %if.end.137

if.then.135:                                      ; preds = %if.then.129
  %92 = load %struct.ix86_frame*, %struct.ix86_frame** %frame.addr, align 8
  %red_zone_size136 = getelementptr inbounds %struct.ix86_frame, %struct.ix86_frame* %92, i32 0, i32 6
  store i32 120, i32* %red_zone_size136, align 4
  br label %if.end.137

if.end.137:                                       ; preds = %if.then.135, %if.then.129
  br label %if.end.140

if.else.138:                                      ; preds = %land.lhs.true.127, %land.lhs.true.125, %land.lhs.true.122, %if.end.104
  %93 = load %struct.ix86_frame*, %struct.ix86_frame** %frame.addr, align 8
  %red_zone_size139 = getelementptr inbounds %struct.ix86_frame, %struct.ix86_frame* %93, i32 0, i32 6
  store i32 0, i32* %red_zone_size139, align 4
  br label %if.end.140

if.end.140:                                       ; preds = %if.else.138, %if.end.137
  %94 = load %struct.ix86_frame*, %struct.ix86_frame** %frame.addr, align 8
  %red_zone_size141 = getelementptr inbounds %struct.ix86_frame, %struct.ix86_frame* %94, i32 0, i32 6
  %95 = load i32, i32* %red_zone_size141, align 4
  %conv142 = sext i32 %95 to i64
  %96 = load %struct.ix86_frame*, %struct.ix86_frame** %frame.addr, align 8
  %to_allocate143 = getelementptr inbounds %struct.ix86_frame, %struct.ix86_frame* %96, i32 0, i32 7
  %97 = load i64, i64* %to_allocate143, align 8
  %sub144 = sub nsw i64 %97, %conv142
  store i64 %sub144, i64* %to_allocate143, align 8
  %98 = load %struct.ix86_frame*, %struct.ix86_frame** %frame.addr, align 8
  %red_zone_size145 = getelementptr inbounds %struct.ix86_frame, %struct.ix86_frame* %98, i32 0, i32 6
  %99 = load i32, i32* %red_zone_size145, align 4
  %conv146 = sext i32 %99 to i64
  %100 = load %struct.ix86_frame*, %struct.ix86_frame** %frame.addr, align 8
  %stack_pointer_offset147 = getelementptr inbounds %struct.ix86_frame, %struct.ix86_frame* %100, i32 0, i32 10
  %101 = load i64, i64* %stack_pointer_offset147, align 8
  %sub148 = sub nsw i64 %101, %conv146
  store i64 %sub148, i64* %stack_pointer_offset147, align 8
  ret void
}

declare i64 @trunc_int_for_mode(i64, i32) #0

; Function Attrs: nounwind uwtable
define i32 @ix86_frame_pointer_required() #1 {
entry:
  %retval = alloca i32, align 4
  %0 = load %struct.function*, %struct.function** @cfun, align 8
  %machine = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 51
  %1 = load %struct.machine_function*, %struct.machine_function** %machine, align 8
  %accesses_prev_frame = getelementptr inbounds %struct.machine_function, %struct.machine_function* %1, i32 0, i32 2
  %2 = load i32, i32* %accesses_prev_frame, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i32, i32* @target_flags, align 4
  %and = and i32 %3, 128
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %land.lhs.true, label %if.end.4

land.lhs.true:                                    ; preds = %if.end
  %call = call i32 @leaf_function_p()
  %tobool2 = icmp ne i32 %call, 0
  br i1 %tobool2, label %if.end.4, label %if.then.3

if.then.3:                                        ; preds = %land.lhs.true
  store i32 1, i32* %retval
  br label %return

if.end.4:                                         ; preds = %land.lhs.true, %if.end
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.4, %if.then.3, %if.then
  %4 = load i32, i32* %retval
  ret i32 %4
}

declare i32 @leaf_function_p() #0

; Function Attrs: nounwind uwtable
define void @ix86_setup_frame_addresses() #1 {
entry:
  %0 = load %struct.function*, %struct.function** @cfun, align 8
  %machine = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 51
  %1 = load %struct.machine_function*, %struct.machine_function** %machine, align 8
  %accesses_prev_frame = getelementptr inbounds %struct.machine_function, %struct.machine_function* %1, i32 0, i32 2
  store i32 1, i32* %accesses_prev_frame, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define void @ix86_asm_file_end(%struct._IO_FILE* %file) #1 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %xops = alloca [2 x %struct.rtx_def*], align 16
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  %0 = load i32, i32* @ix86_cpu, align 4
  %shl = shl i32 1, %0
  %and = and i32 120, %shl
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @pic_label_name, i32 0, i64 0), align 1
  %conv = sext i8 %1 to i32
  %cmp = icmp eq i32 %conv, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  call void @text_section()
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  call void @assemble_name(%struct._IO_FILE* %2, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @pic_label_name, i32 0, i32 0))
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call = call i32 @fputs(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.77, i32 0, i32 0), %struct._IO_FILE* %3)
  %4 = load %struct.rtx_def*, %struct.rtx_def** @pic_offset_table_rtx, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %xops, i32 0, i64 0
  store %struct.rtx_def* %4, %struct.rtx_def** %arrayidx, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %call2 = call %struct.rtx_def* @gen_rtx_MEM(i32 4, %struct.rtx_def* %5)
  %arrayidx3 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %xops, i32 0, i64 1
  store %struct.rtx_def* %call2, %struct.rtx_def** %arrayidx3, align 8
  %arraydecay = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %xops, i32 0, i32 0
  call void @output_asm_insn(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.78, i32 0, i32 0), %struct.rtx_def** %arraydecay)
  %arraydecay4 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %xops, i32 0, i32 0
  call void @output_asm_insn(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.79, i32 0, i32 0), %struct.rtx_def** %arraydecay4)
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

declare void @text_section() #0

declare void @assemble_name(%struct._IO_FILE*, i8*) #0

declare i32 @fputs(i8*, %struct._IO_FILE*) #0

declare void @output_asm_insn(i8*, %struct.rtx_def**) #0

; Function Attrs: nounwind uwtable
define void @load_pic_register() #1 {
entry:
  %gotsym = alloca %struct.rtx_def*, align 8
  %pclab = alloca %struct.rtx_def*, align 8
  %0 = load i32, i32* @target_flags, align 4
  %and = and i32 %0, 33554432
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 3916, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__FUNCTION__.load_pic_register, i32 0, i32 0)) #7
  unreachable

if.end:                                           ; preds = %entry
  %1 = load i32, i32* @target_flags, align 4
  %and1 = and i32 %1, 33554432
  %tobool2 = icmp ne i32 %and1, 0
  %cond = select i1 %tobool2, i32 5, i32 4
  %call = call %struct.rtx_def* @gen_rtx_fmt_s(i32 68, i32 %cond, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.80, i32 0, i32 0))
  store %struct.rtx_def* %call, %struct.rtx_def** %gotsym, align 8
  %2 = load i32, i32* @ix86_cpu, align 4
  %shl = shl i32 1, %2
  %and3 = and i32 120, %shl
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %if.then.5, label %if.else

if.then.5:                                        ; preds = %if.end
  %3 = load i8, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @pic_label_name, i32 0, i64 0), align 1
  %tobool6 = icmp ne i8 %3, 0
  br i1 %tobool6, label %if.end.9, label %if.then.7

if.then.7:                                        ; preds = %if.then.5
  br label %do.body

do.body:                                          ; preds = %if.then.7
  %call8 = call i32 (i8*, i8*, ...) @sprintf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @pic_label_name, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.55, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.81, i32 0, i32 0), i32 0) #4
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %if.end.9

if.end.9:                                         ; preds = %do.end, %if.then.5
  %4 = load i32, i32* @target_flags, align 4
  %and10 = and i32 %4, 33554432
  %tobool11 = icmp ne i32 %and10, 0
  %cond12 = select i1 %tobool11, i32 5, i32 4
  %call13 = call %struct.rtx_def* @gen_rtx_fmt_s(i32 68, i32 %cond12, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @pic_label_name, i32 0, i32 0))
  %call14 = call %struct.rtx_def* @gen_rtx_MEM(i32 2, %struct.rtx_def* %call13)
  store %struct.rtx_def* %call14, %struct.rtx_def** %pclab, align 8
  br label %if.end.17

if.else:                                          ; preds = %if.end
  %call15 = call %struct.rtx_def* @gen_label_rtx()
  %call16 = call %struct.rtx_def* @gen_rtx_fmt_u00(i32 67, i32 0, %struct.rtx_def* %call15)
  store %struct.rtx_def* %call16, %struct.rtx_def** %pclab, align 8
  br label %if.end.17

if.end.17:                                        ; preds = %if.else, %if.end.9
  %5 = load %struct.rtx_def*, %struct.rtx_def** @pic_offset_table_rtx, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %pclab, align 8
  %call18 = call %struct.rtx_def* @gen_prologue_get_pc(%struct.rtx_def* %5, %struct.rtx_def* %6)
  %call19 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call18)
  %7 = load %struct.rtx_def*, %struct.rtx_def** @pic_offset_table_rtx, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %gotsym, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %pclab, align 8
  %call20 = call %struct.rtx_def* @gen_prologue_set_got(%struct.rtx_def* %7, %struct.rtx_def* %8, %struct.rtx_def* %9)
  %call21 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call20)
  ret void
}

declare %struct.rtx_def* @gen_rtx_fmt_s(i32, i32, i8*) #0

declare %struct.rtx_def* @gen_prologue_get_pc(%struct.rtx_def*, %struct.rtx_def*) #0

declare %struct.rtx_def* @gen_prologue_set_got(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #0

; Function Attrs: nounwind uwtable
define i64 @ix86_initial_elimination_offset(i32 %from, i32 %to) #1 {
entry:
  %retval = alloca i64, align 8
  %from.addr = alloca i32, align 4
  %to.addr = alloca i32, align 4
  %frame = alloca %struct.ix86_frame, align 8
  store i32 %from, i32* %from.addr, align 4
  store i32 %to, i32* %to.addr, align 4
  call void @ix86_compute_frame_layout(%struct.ix86_frame* %frame)
  %0 = load i32, i32* %from.addr, align 4
  %cmp = icmp eq i32 %0, 16
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %to.addr, align 4
  %cmp1 = icmp eq i32 %1, 6
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %hard_frame_pointer_offset = getelementptr inbounds %struct.ix86_frame, %struct.ix86_frame* %frame, i32 0, i32 9
  %2 = load i64, i64* %hard_frame_pointer_offset, align 8
  store i64 %2, i64* %retval
  br label %return

if.else:                                          ; preds = %land.lhs.true, %entry
  %3 = load i32, i32* %from.addr, align 4
  %cmp2 = icmp eq i32 %3, 20
  br i1 %cmp2, label %land.lhs.true.3, label %if.else.7

land.lhs.true.3:                                  ; preds = %if.else
  %4 = load i32, i32* %to.addr, align 4
  %cmp4 = icmp eq i32 %4, 6
  br i1 %cmp4, label %if.then.5, label %if.else.7

if.then.5:                                        ; preds = %land.lhs.true.3
  %hard_frame_pointer_offset6 = getelementptr inbounds %struct.ix86_frame, %struct.ix86_frame* %frame, i32 0, i32 9
  %5 = load i64, i64* %hard_frame_pointer_offset6, align 8
  %frame_pointer_offset = getelementptr inbounds %struct.ix86_frame, %struct.ix86_frame* %frame, i32 0, i32 8
  %6 = load i64, i64* %frame_pointer_offset, align 8
  %sub = sub nsw i64 %5, %6
  store i64 %sub, i64* %retval
  br label %return

if.else.7:                                        ; preds = %land.lhs.true.3, %if.else
  %7 = load i32, i32* %to.addr, align 4
  %cmp8 = icmp ne i32 %7, 7
  br i1 %cmp8, label %if.then.9, label %if.else.10

if.then.9:                                        ; preds = %if.else.7
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 4013, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @__FUNCTION__.ix86_initial_elimination_offset, i32 0, i32 0)) #7
  unreachable

if.else.10:                                       ; preds = %if.else.7
  %8 = load i32, i32* %from.addr, align 4
  %cmp11 = icmp eq i32 %8, 16
  br i1 %cmp11, label %if.then.12, label %if.else.13

if.then.12:                                       ; preds = %if.else.10
  %stack_pointer_offset = getelementptr inbounds %struct.ix86_frame, %struct.ix86_frame* %frame, i32 0, i32 10
  %9 = load i64, i64* %stack_pointer_offset, align 8
  store i64 %9, i64* %retval
  br label %return

if.else.13:                                       ; preds = %if.else.10
  %10 = load i32, i32* %from.addr, align 4
  %cmp14 = icmp ne i32 %10, 20
  br i1 %cmp14, label %if.then.15, label %if.else.16

if.then.15:                                       ; preds = %if.else.13
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 4017, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @__FUNCTION__.ix86_initial_elimination_offset, i32 0, i32 0)) #7
  unreachable

if.else.16:                                       ; preds = %if.else.13
  %stack_pointer_offset17 = getelementptr inbounds %struct.ix86_frame, %struct.ix86_frame* %frame, i32 0, i32 10
  %11 = load i64, i64* %stack_pointer_offset17, align 8
  %frame_pointer_offset18 = getelementptr inbounds %struct.ix86_frame, %struct.ix86_frame* %frame, i32 0, i32 8
  %12 = load i64, i64* %frame_pointer_offset18, align 8
  %sub19 = sub nsw i64 %11, %12
  store i64 %sub19, i64* %retval
  br label %return

return:                                           ; preds = %if.else.16, %if.then.12, %if.then.5, %if.then
  %13 = load i64, i64* %retval
  ret i64 %13
}

; Function Attrs: nounwind uwtable
define void @ix86_expand_prologue() #1 {
entry:
  %insn = alloca %struct.rtx_def*, align 8
  %pic_reg_used = alloca i32, align 4
  %frame = alloca %struct.ix86_frame, align 8
  %use_mov = alloca i32, align 4
  %allocate = alloca i64, align 8
  %arg0 = alloca %struct.rtx_def*, align 8
  %sym = alloca %struct.rtx_def*, align 8
  %0 = load i32, i32* @flag_pic, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.function*, %struct.function** @cfun, align 8
  %uses_pic_offset_table = getelementptr inbounds %struct.function, %struct.function* %1, i32 0, i32 56
  %2 = bitcast i24* %uses_pic_offset_table to i32*
  %bf.load = load i32, i32* %2, align 8
  %bf.lshr = lshr i32 %bf.load, 21
  %bf.clear = and i32 %bf.lshr, 1
  %tobool1 = icmp ne i32 %bf.clear, 0
  br i1 %tobool1, label %land.rhs, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %3 = load %struct.function*, %struct.function** @cfun, align 8
  %uses_const_pool = getelementptr inbounds %struct.function, %struct.function* %3, i32 0, i32 56
  %4 = bitcast i24* %uses_const_pool to i32*
  %bf.load2 = load i32, i32* %4, align 8
  %bf.lshr3 = lshr i32 %bf.load2, 20
  %bf.clear4 = and i32 %bf.lshr3, 1
  %tobool5 = icmp ne i32 %bf.clear4, 0
  br i1 %tobool5, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %lor.lhs.false, %land.lhs.true
  %5 = load i32, i32* @target_flags, align 4
  %and = and i32 %5, 33554432
  %tobool6 = icmp ne i32 %and, 0
  %lnot = xor i1 %tobool6, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.lhs.false, %entry
  %6 = phi i1 [ false, %lor.lhs.false ], [ false, %entry ], [ %lnot, %land.rhs ]
  %land.ext = zext i1 %6 to i32
  store i32 %land.ext, i32* %pic_reg_used, align 4
  store i32 0, i32* %use_mov, align 4
  %7 = load i32, i32* @optimize_size, align 4
  %tobool7 = icmp ne i32 %7, 0
  br i1 %tobool7, label %if.end.12, label %if.then

if.then:                                          ; preds = %land.end
  %call = call zeroext i1 @expensive_function_p(i32 30)
  %lnot8 = xor i1 %call, true
  %lnot.ext = zext i1 %lnot8 to i32
  store i32 %lnot.ext, i32* @use_fast_prologue_epilogue, align 4
  %8 = load i32, i32* @ix86_cpu, align 4
  %shl = shl i32 1, %8
  %and9 = and i32 104, %shl
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %if.then.11, label %if.end

if.then.11:                                       ; preds = %if.then
  %9 = load i32, i32* @use_fast_prologue_epilogue, align 4
  store i32 %9, i32* %use_mov, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.11, %if.then
  br label %if.end.12

if.end.12:                                        ; preds = %if.end, %land.end
  call void @ix86_compute_frame_layout(%struct.ix86_frame* %frame)
  %10 = load i32, i32* @frame_pointer_needed, align 4
  %tobool13 = icmp ne i32 %10, 0
  br i1 %tobool13, label %if.then.14, label %if.end.23

if.then.14:                                       ; preds = %if.end.12
  %11 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 4), align 8
  %call15 = call %struct.rtx_def* @gen_push(%struct.rtx_def* %11)
  %call16 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call15)
  store %struct.rtx_def* %call16, %struct.rtx_def** %insn, align 8
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %13 = bitcast %struct.rtx_def* %12 to i32*
  %bf.load17 = load i32, i32* %13, align 8
  %bf.clear18 = and i32 %bf.load17, 2147483647
  %bf.set = or i32 %bf.clear18, -2147483648
  store i32 %bf.set, i32* %13, align 8
  %14 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 4), align 8
  %15 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %call19 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %14, %struct.rtx_def* %15)
  store %struct.rtx_def* %call19, %struct.rtx_def** %insn, align 8
  %16 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %17 = bitcast %struct.rtx_def* %16 to i32*
  %bf.load20 = load i32, i32* %17, align 8
  %bf.clear21 = and i32 %bf.load20, 2147483647
  %bf.set22 = or i32 %bf.clear21, -2147483648
  store i32 %bf.set22, i32* %17, align 8
  br label %if.end.23

if.end.23:                                        ; preds = %if.then.14, %if.end.12
  %to_allocate = getelementptr inbounds %struct.ix86_frame, %struct.ix86_frame* %frame, i32 0, i32 7
  %18 = load i64, i64* %to_allocate, align 8
  store i64 %18, i64* %allocate, align 8
  %19 = load i64, i64* %allocate, align 8
  %cmp = icmp eq i64 %19, 0
  br i1 %cmp, label %land.lhs.true.24, label %if.end.27

land.lhs.true.24:                                 ; preds = %if.end.23
  %nregs = getelementptr inbounds %struct.ix86_frame, %struct.ix86_frame* %frame, i32 0, i32 0
  %20 = load i32, i32* %nregs, align 4
  %cmp25 = icmp sle i32 %20, 1
  br i1 %cmp25, label %if.then.26, label %if.end.27

if.then.26:                                       ; preds = %land.lhs.true.24
  store i32 0, i32* %use_mov, align 4
  br label %if.end.27

if.end.27:                                        ; preds = %if.then.26, %land.lhs.true.24, %if.end.23
  %21 = load i32, i32* %use_mov, align 4
  %tobool28 = icmp ne i32 %21, 0
  br i1 %tobool28, label %if.else, label %if.then.29

if.then.29:                                       ; preds = %if.end.27
  call void @ix86_emit_save_regs()
  br label %if.end.33

if.else:                                          ; preds = %if.end.27
  %nregs30 = getelementptr inbounds %struct.ix86_frame, %struct.ix86_frame* %frame, i32 0, i32 0
  %22 = load i32, i32* %nregs30, align 4
  %23 = load i32, i32* @target_flags, align 4
  %and31 = and i32 %23, 33554432
  %tobool32 = icmp ne i32 %and31, 0
  %cond = select i1 %tobool32, i32 8, i32 4
  %mul = mul nsw i32 %22, %cond
  %conv = sext i32 %mul to i64
  %24 = load i64, i64* %allocate, align 8
  %add = add nsw i64 %24, %conv
  store i64 %add, i64* %allocate, align 8
  br label %if.end.33

if.end.33:                                        ; preds = %if.else, %if.then.29
  %25 = load i64, i64* %allocate, align 8
  %cmp34 = icmp eq i64 %25, 0
  br i1 %cmp34, label %if.then.36, label %if.else.37

if.then.36:                                       ; preds = %if.end.33
  br label %if.end.71

if.else.37:                                       ; preds = %if.end.33
  %26 = load i32, i32* @target_flags, align 4
  %and38 = and i32 %26, 256
  %tobool39 = icmp ne i32 %and38, 0
  br i1 %tobool39, label %lor.lhs.false.40, label %if.then.43

lor.lhs.false.40:                                 ; preds = %if.else.37
  %27 = load i64, i64* %allocate, align 8
  %cmp41 = icmp slt i64 %27, -1
  br i1 %cmp41, label %if.then.43, label %if.else.50

if.then.43:                                       ; preds = %lor.lhs.false.40, %if.else.37
  %28 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %29 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %30 = load i64, i64* %allocate, align 8
  %sub = sub nsw i64 0, %30
  %call44 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %sub)
  %call45 = call %struct.rtx_def* @gen_pro_epilogue_adjust_stack(%struct.rtx_def* %28, %struct.rtx_def* %29, %struct.rtx_def* %call44)
  %call46 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call45)
  store %struct.rtx_def* %call46, %struct.rtx_def** %insn, align 8
  %31 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %32 = bitcast %struct.rtx_def* %31 to i32*
  %bf.load47 = load i32, i32* %32, align 8
  %bf.clear48 = and i32 %bf.load47, 2147483647
  %bf.set49 = or i32 %bf.clear48, -2147483648
  store i32 %bf.set49, i32* %32, align 8
  br label %if.end.70

if.else.50:                                       ; preds = %lor.lhs.false.40
  %33 = load i32, i32* @target_flags, align 4
  %and51 = and i32 %33, 33554432
  %tobool52 = icmp ne i32 %and51, 0
  br i1 %tobool52, label %if.then.53, label %if.end.54

if.then.53:                                       ; preds = %if.else.50
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 4235, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__FUNCTION__.ix86_expand_prologue, i32 0, i32 0)) #7
  unreachable

if.end.54:                                        ; preds = %if.else.50
  %call55 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 0)
  store %struct.rtx_def* %call55, %struct.rtx_def** %arg0, align 8
  %34 = load %struct.rtx_def*, %struct.rtx_def** %arg0, align 8
  %35 = load i64, i64* %allocate, align 8
  %call56 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %35)
  %call57 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %34, %struct.rtx_def* %call56)
  %36 = load i32, i32* @target_flags, align 4
  %and58 = and i32 %36, 33554432
  %tobool59 = icmp ne i32 %and58, 0
  %cond60 = select i1 %tobool59, i32 5, i32 4
  %call61 = call %struct.rtx_def* @gen_rtx_fmt_s(i32 68, i32 %cond60, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.82, i32 0, i32 0))
  %call62 = call %struct.rtx_def* @gen_rtx_MEM(i32 2, %struct.rtx_def* %call61)
  store %struct.rtx_def* %call62, %struct.rtx_def** %sym, align 8
  %37 = load %struct.rtx_def*, %struct.rtx_def** %sym, align 8
  %38 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %39 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 63), align 8
  %call63 = call %struct.rtx_def* @gen_call(%struct.rtx_def* %37, %struct.rtx_def* %38, %struct.rtx_def* %39)
  %call64 = call %struct.rtx_def* @emit_call_insn(%struct.rtx_def* %call63)
  store %struct.rtx_def* %call64, %struct.rtx_def** %insn, align 8
  %40 = load %struct.rtx_def*, %struct.rtx_def** %arg0, align 8
  %call65 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %40)
  %41 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %41, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 7
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %42 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %call66 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 0, %struct.rtx_def* %call65, %struct.rtx_def* %42)
  %43 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld67 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %43, i32 0, i32 1
  %arrayidx68 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld67, i32 0, i64 7
  %rtx69 = bitcast %union.rtunion_def* %arrayidx68 to %struct.rtx_def**
  store %struct.rtx_def* %call66, %struct.rtx_def** %rtx69, align 8
  br label %if.end.70

if.end.70:                                        ; preds = %if.end.54, %if.then.43
  br label %if.end.71

if.end.71:                                        ; preds = %if.end.70, %if.then.36
  %44 = load i32, i32* %use_mov, align 4
  %tobool72 = icmp ne i32 %44, 0
  br i1 %tobool72, label %if.then.73, label %if.end.89

if.then.73:                                       ; preds = %if.end.71
  %45 = load i32, i32* @frame_pointer_needed, align 4
  %tobool74 = icmp ne i32 %45, 0
  br i1 %tobool74, label %lor.lhs.false.75, label %if.then.78

lor.lhs.false.75:                                 ; preds = %if.then.73
  %to_allocate76 = getelementptr inbounds %struct.ix86_frame, %struct.ix86_frame* %frame, i32 0, i32 7
  %46 = load i64, i64* %to_allocate76, align 8
  %tobool77 = icmp ne i64 %46, 0
  br i1 %tobool77, label %if.else.80, label %if.then.78

if.then.78:                                       ; preds = %lor.lhs.false.75, %if.then.73
  %47 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %to_allocate79 = getelementptr inbounds %struct.ix86_frame, %struct.ix86_frame* %frame, i32 0, i32 7
  %48 = load i64, i64* %to_allocate79, align 8
  call void @ix86_emit_save_regs_using_mov(%struct.rtx_def* %47, i64 %48)
  br label %if.end.88

if.else.80:                                       ; preds = %lor.lhs.false.75
  %49 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 4), align 8
  %nregs81 = getelementptr inbounds %struct.ix86_frame, %struct.ix86_frame* %frame, i32 0, i32 0
  %50 = load i32, i32* %nregs81, align 4
  %sub82 = sub nsw i32 0, %50
  %51 = load i32, i32* @target_flags, align 4
  %and83 = and i32 %51, 33554432
  %tobool84 = icmp ne i32 %and83, 0
  %cond85 = select i1 %tobool84, i32 8, i32 4
  %mul86 = mul nsw i32 %sub82, %cond85
  %conv87 = sext i32 %mul86 to i64
  call void @ix86_emit_save_regs_using_mov(%struct.rtx_def* %49, i64 %conv87)
  br label %if.end.88

if.end.88:                                        ; preds = %if.else.80, %if.then.78
  br label %if.end.89

if.end.89:                                        ; preds = %if.end.88, %if.end.71
  %52 = load i32, i32* %pic_reg_used, align 4
  %tobool90 = icmp ne i32 %52, 0
  br i1 %tobool90, label %if.then.91, label %if.end.92

if.then.91:                                       ; preds = %if.end.89
  call void @load_pic_register()
  br label %if.end.92

if.end.92:                                        ; preds = %if.then.91, %if.end.89
  %53 = load %struct.function*, %struct.function** @cfun, align 8
  %profile = getelementptr inbounds %struct.function, %struct.function* %53, i32 0, i32 56
  %54 = bitcast i24* %profile to i32*
  %bf.load93 = load i32, i32* %54, align 8
  %bf.lshr94 = lshr i32 %bf.load93, 14
  %bf.clear95 = and i32 %bf.lshr94, 1
  %tobool96 = icmp ne i32 %bf.clear95, 0
  br i1 %tobool96, label %land.lhs.true.97, label %if.end.102

land.lhs.true.97:                                 ; preds = %if.end.92
  %55 = load i32, i32* %pic_reg_used, align 4
  %tobool98 = icmp ne i32 %55, 0
  br i1 %tobool98, label %if.end.102, label %if.then.99

if.then.99:                                       ; preds = %land.lhs.true.97
  %call100 = call %struct.rtx_def* @gen_blockage()
  %call101 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call100)
  br label %if.end.102

if.end.102:                                       ; preds = %if.then.99, %land.lhs.true.97, %if.end.92
  ret void
}

declare zeroext i1 @expensive_function_p(i32) #0

; Function Attrs: nounwind uwtable
define internal %struct.rtx_def* @gen_push(%struct.rtx_def* %arg) #1 {
entry:
  %arg.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %arg, %struct.rtx_def** %arg.addr, align 8
  %0 = load i32, i32* @target_flags, align 4
  %and = and i32 %0, 33554432
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, i32 5, i32 4
  %1 = load i32, i32* @target_flags, align 4
  %and1 = and i32 %1, 33554432
  %tobool2 = icmp ne i32 %and1, 0
  %cond3 = select i1 %tobool2, i32 5, i32 4
  %2 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 96, i32 %cond3, %struct.rtx_def* %2)
  %call4 = call %struct.rtx_def* @gen_rtx_MEM(i32 %cond, %struct.rtx_def* %call)
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arg.addr, align 8
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call4, %struct.rtx_def* %3)
  ret %struct.rtx_def* %call5
}

; Function Attrs: nounwind uwtable
define internal void @ix86_emit_save_regs() #1 {
entry:
  %regno = alloca i32, align 4
  %insn = alloca %struct.rtx_def*, align 8
  store i32 52, i32* %regno, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %regno, align 4
  %cmp = icmp sge i32 %0, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %regno, align 4
  %call = call i32 @ix86_save_reg(i32 %1, i32 1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %2 = load i32, i32* @target_flags, align 4
  %and = and i32 %2, 33554432
  %tobool1 = icmp ne i32 %and, 0
  %cond = select i1 %tobool1, i32 5, i32 4
  %3 = load i32, i32* %regno, align 4
  %call2 = call %struct.rtx_def* @gen_rtx_REG(i32 %cond, i32 %3)
  %call3 = call %struct.rtx_def* @gen_push(%struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call3)
  store %struct.rtx_def* %call4, %struct.rtx_def** %insn, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %5 = bitcast %struct.rtx_def* %4 to i32*
  %bf.load = load i32, i32* %5, align 8
  %bf.clear = and i32 %bf.load, 2147483647
  %bf.set = or i32 %bf.clear, -2147483648
  store i32 %bf.set, i32* %5, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %6 = load i32, i32* %regno, align 4
  %dec = add nsw i32 %6, -1
  store i32 %dec, i32* %regno, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare %struct.rtx_def* @gen_pro_epilogue_adjust_stack(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #0

declare %struct.rtx_def* @emit_call_insn(%struct.rtx_def*) #0

declare %struct.rtx_def* @gen_call(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #0

; Function Attrs: nounwind uwtable
define internal void @ix86_emit_save_regs_using_mov(%struct.rtx_def* %pointer, i64 %offset) #1 {
entry:
  %pointer.addr = alloca %struct.rtx_def*, align 8
  %offset.addr = alloca i64, align 8
  %regno = alloca i32, align 4
  %insn = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %pointer, %struct.rtx_def** %pointer.addr, align 8
  store i64 %offset, i64* %offset.addr, align 8
  store i32 0, i32* %regno, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %regno, align 4
  %cmp = icmp slt i32 %0, 53
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %regno, align 4
  %call = call i32 @ix86_save_reg(i32 %1, i32 1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %2 = load i32, i32* @target_flags, align 4
  %and = and i32 %2, 33554432
  %tobool1 = icmp ne i32 %and, 0
  %cond = select i1 %tobool1, i32 5, i32 4
  %3 = load %struct.rtx_def*, %struct.rtx_def** %pointer.addr, align 8
  %call2 = call %struct.rtx_def* @gen_rtx_MEM(i32 %cond, %struct.rtx_def* %3)
  %4 = load i32, i32* @target_flags, align 4
  %and3 = and i32 %4, 33554432
  %tobool4 = icmp ne i32 %and3, 0
  %cond5 = select i1 %tobool4, i32 5, i32 4
  %5 = load i64, i64* %offset.addr, align 8
  %call6 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %call2, i32 %cond5, i64 %5, i32 1, i32 1)
  %6 = load i32, i32* @target_flags, align 4
  %and7 = and i32 %6, 33554432
  %tobool8 = icmp ne i32 %and7, 0
  %cond9 = select i1 %tobool8, i32 5, i32 4
  %7 = load i32, i32* %regno, align 4
  %call10 = call %struct.rtx_def* @gen_rtx_REG(i32 %cond9, i32 %7)
  %call11 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call6, %struct.rtx_def* %call10)
  store %struct.rtx_def* %call11, %struct.rtx_def** %insn, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %9 = bitcast %struct.rtx_def* %8 to i32*
  %bf.load = load i32, i32* %9, align 8
  %bf.clear = and i32 %bf.load, 2147483647
  %bf.set = or i32 %bf.clear, -2147483648
  store i32 %bf.set, i32* %9, align 8
  %10 = load i32, i32* @target_flags, align 4
  %and12 = and i32 %10, 33554432
  %tobool13 = icmp ne i32 %and12, 0
  %cond14 = select i1 %tobool13, i32 8, i32 4
  %conv = sext i32 %cond14 to i64
  %11 = load i64, i64* %offset.addr, align 8
  %add = add nsw i64 %11, %conv
  store i64 %add, i64* %offset.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %12 = load i32, i32* %regno, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %regno, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare %struct.rtx_def* @gen_blockage() #0

; Function Attrs: nounwind uwtable
define void @ix86_expand_epilogue(i32 %style) #1 {
entry:
  %style.addr = alloca i32, align 4
  %regno = alloca i32, align 4
  %sp_valid = alloca i32, align 4
  %frame = alloca %struct.ix86_frame, align 8
  %offset = alloca i64, align 8
  %tmp = alloca %struct.rtx_def*, align 8
  %sa = alloca %struct.rtx_def*, align 8
  %popc = alloca %struct.rtx_def*, align 8
  %ecx = alloca %struct.rtx_def*, align 8
  store i32 %style, i32* %style.addr, align 4
  %0 = load i32, i32* @frame_pointer_needed, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %entry
  %1 = load i32, i32* @current_function_sp_is_unchanging, align 4
  %tobool1 = icmp ne i32 %1, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %2 = phi i1 [ true, %entry ], [ %tobool1, %lor.rhs ]
  %lor.ext = zext i1 %2 to i32
  store i32 %lor.ext, i32* %sp_valid, align 4
  call void @ix86_compute_frame_layout(%struct.ix86_frame* %frame)
  %nregs = getelementptr inbounds %struct.ix86_frame, %struct.ix86_frame* %frame, i32 0, i32 0
  %3 = load i32, i32* %nregs, align 4
  %conv = sext i32 %3 to i64
  store i64 %conv, i64* %offset, align 8
  %4 = load %struct.function*, %struct.function** @cfun, align 8
  %calls_eh_return = getelementptr inbounds %struct.function, %struct.function* %4, i32 0, i32 56
  %5 = bitcast i24* %calls_eh_return to i32*
  %bf.load = load i32, i32* %5, align 8
  %bf.lshr = lshr i32 %bf.load, 7
  %bf.clear = and i32 %bf.lshr, 1
  %tobool2 = icmp ne i32 %bf.clear, 0
  br i1 %tobool2, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.end
  %6 = load i32, i32* %style.addr, align 4
  %cmp = icmp ne i32 %6, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %7 = load i64, i64* %offset, align 8
  %sub = sub nsw i64 %7, 2
  store i64 %sub, i64* %offset, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %lor.end
  %8 = load i32, i32* @target_flags, align 4
  %and = and i32 %8, 33554432
  %tobool4 = icmp ne i32 %and, 0
  %cond = select i1 %tobool4, i32 8, i32 4
  %sub5 = sub nsw i32 0, %cond
  %conv6 = sext i32 %sub5 to i64
  %9 = load i64, i64* %offset, align 8
  %mul = mul nsw i64 %9, %conv6
  store i64 %mul, i64* %offset, align 8
  %10 = load i32, i32* %sp_valid, align 4
  %tobool7 = icmp ne i32 %10, 0
  br i1 %tobool7, label %lor.lhs.false, label %land.lhs.true.8

land.lhs.true.8:                                  ; preds = %if.end
  %nregs9 = getelementptr inbounds %struct.ix86_frame, %struct.ix86_frame* %frame, i32 0, i32 0
  %11 = load i32, i32* %nregs9, align 4
  %cmp10 = icmp sle i32 %11, 1
  br i1 %cmp10, label %if.then.48, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.8, %if.end
  %12 = load i32, i32* @ix86_cpu, align 4
  %shl = shl i32 1, %12
  %and12 = and i32 104, %shl
  %tobool13 = icmp ne i32 %and12, 0
  br i1 %tobool13, label %land.lhs.true.14, label %lor.lhs.false.22

land.lhs.true.14:                                 ; preds = %lor.lhs.false
  %13 = load i32, i32* @use_fast_prologue_epilogue, align 4
  %tobool15 = icmp ne i32 %13, 0
  br i1 %tobool15, label %land.lhs.true.16, label %lor.lhs.false.22

land.lhs.true.16:                                 ; preds = %land.lhs.true.14
  %nregs17 = getelementptr inbounds %struct.ix86_frame, %struct.ix86_frame* %frame, i32 0, i32 0
  %14 = load i32, i32* %nregs17, align 4
  %cmp18 = icmp sgt i32 %14, 1
  br i1 %cmp18, label %if.then.48, label %lor.lhs.false.20

lor.lhs.false.20:                                 ; preds = %land.lhs.true.16
  %to_allocate = getelementptr inbounds %struct.ix86_frame, %struct.ix86_frame* %frame, i32 0, i32 7
  %15 = load i64, i64* %to_allocate, align 8
  %tobool21 = icmp ne i64 %15, 0
  br i1 %tobool21, label %if.then.48, label %lor.lhs.false.22

lor.lhs.false.22:                                 ; preds = %lor.lhs.false.20, %land.lhs.true.14, %lor.lhs.false
  %16 = load i32, i32* @frame_pointer_needed, align 4
  %tobool23 = icmp ne i32 %16, 0
  br i1 %tobool23, label %land.lhs.true.24, label %lor.lhs.false.30

land.lhs.true.24:                                 ; preds = %lor.lhs.false.22
  %nregs25 = getelementptr inbounds %struct.ix86_frame, %struct.ix86_frame* %frame, i32 0, i32 0
  %17 = load i32, i32* %nregs25, align 4
  %tobool26 = icmp ne i32 %17, 0
  br i1 %tobool26, label %lor.lhs.false.30, label %land.lhs.true.27

land.lhs.true.27:                                 ; preds = %land.lhs.true.24
  %to_allocate28 = getelementptr inbounds %struct.ix86_frame, %struct.ix86_frame* %frame, i32 0, i32 7
  %18 = load i64, i64* %to_allocate28, align 8
  %tobool29 = icmp ne i64 %18, 0
  br i1 %tobool29, label %if.then.48, label %lor.lhs.false.30

lor.lhs.false.30:                                 ; preds = %land.lhs.true.27, %land.lhs.true.24, %lor.lhs.false.22
  %19 = load i32, i32* @frame_pointer_needed, align 4
  %tobool31 = icmp ne i32 %19, 0
  br i1 %tobool31, label %land.lhs.true.32, label %lor.lhs.false.42

land.lhs.true.32:                                 ; preds = %lor.lhs.false.30
  %20 = load i32, i32* @ix86_cpu, align 4
  %shl33 = shl i32 1, %20
  %and34 = and i32 49, %shl33
  %tobool35 = icmp ne i32 %and34, 0
  br i1 %tobool35, label %land.lhs.true.36, label %lor.lhs.false.42

land.lhs.true.36:                                 ; preds = %land.lhs.true.32
  %21 = load i32, i32* @use_fast_prologue_epilogue, align 4
  %tobool37 = icmp ne i32 %21, 0
  br i1 %tobool37, label %land.lhs.true.38, label %lor.lhs.false.42

land.lhs.true.38:                                 ; preds = %land.lhs.true.36
  %nregs39 = getelementptr inbounds %struct.ix86_frame, %struct.ix86_frame* %frame, i32 0, i32 0
  %22 = load i32, i32* %nregs39, align 4
  %cmp40 = icmp eq i32 %22, 1
  br i1 %cmp40, label %if.then.48, label %lor.lhs.false.42

lor.lhs.false.42:                                 ; preds = %land.lhs.true.38, %land.lhs.true.36, %land.lhs.true.32, %lor.lhs.false.30
  %23 = load %struct.function*, %struct.function** @cfun, align 8
  %calls_eh_return43 = getelementptr inbounds %struct.function, %struct.function* %23, i32 0, i32 56
  %24 = bitcast i24* %calls_eh_return43 to i32*
  %bf.load44 = load i32, i32* %24, align 8
  %bf.lshr45 = lshr i32 %bf.load44, 7
  %bf.clear46 = and i32 %bf.lshr45, 1
  %tobool47 = icmp ne i32 %bf.clear46, 0
  br i1 %tobool47, label %if.then.48, label %if.else.151

if.then.48:                                       ; preds = %lor.lhs.false.42, %land.lhs.true.38, %land.lhs.true.27, %lor.lhs.false.20, %land.lhs.true.16, %land.lhs.true.8
  %25 = load i32, i32* @frame_pointer_needed, align 4
  %tobool49 = icmp ne i32 %25, 0
  br i1 %tobool49, label %lor.lhs.false.50, label %if.then.55

lor.lhs.false.50:                                 ; preds = %if.then.48
  %26 = load i32, i32* %sp_valid, align 4
  %tobool51 = icmp ne i32 %26, 0
  br i1 %tobool51, label %land.lhs.true.52, label %if.else

land.lhs.true.52:                                 ; preds = %lor.lhs.false.50
  %to_allocate53 = getelementptr inbounds %struct.ix86_frame, %struct.ix86_frame* %frame, i32 0, i32 7
  %27 = load i64, i64* %to_allocate53, align 8
  %tobool54 = icmp ne i64 %27, 0
  br i1 %tobool54, label %if.else, label %if.then.55

if.then.55:                                       ; preds = %land.lhs.true.52, %if.then.48
  %28 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %to_allocate56 = getelementptr inbounds %struct.ix86_frame, %struct.ix86_frame* %frame, i32 0, i32 7
  %29 = load i64, i64* %to_allocate56, align 8
  %conv57 = trunc i64 %29 to i32
  %30 = load i32, i32* %style.addr, align 4
  %cmp58 = icmp eq i32 %30, 2
  %conv59 = zext i1 %cmp58 to i32
  call void @ix86_emit_restore_regs_using_mov(%struct.rtx_def* %28, i32 %conv57, i32 %conv59)
  br label %if.end.63

if.else:                                          ; preds = %land.lhs.true.52, %lor.lhs.false.50
  %31 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 4), align 8
  %32 = load i64, i64* %offset, align 8
  %conv60 = trunc i64 %32 to i32
  %33 = load i32, i32* %style.addr, align 4
  %cmp61 = icmp eq i32 %33, 2
  %conv62 = zext i1 %cmp61 to i32
  call void @ix86_emit_restore_regs_using_mov(%struct.rtx_def* %31, i32 %conv60, i32 %conv62)
  br label %if.end.63

if.end.63:                                        ; preds = %if.else, %if.then.55
  %34 = load i32, i32* %style.addr, align 4
  %cmp64 = icmp eq i32 %34, 2
  br i1 %cmp64, label %if.then.66, label %if.else.107

if.then.66:                                       ; preds = %if.end.63
  %35 = load i32, i32* @target_flags, align 4
  %and68 = and i32 %35, 33554432
  %tobool69 = icmp ne i32 %and68, 0
  %cond70 = select i1 %tobool69, i32 5, i32 4
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 %cond70, i32 2)
  store %struct.rtx_def* %call, %struct.rtx_def** %sa, align 8
  %36 = load i32, i32* @frame_pointer_needed, align 4
  %tobool71 = icmp ne i32 %36, 0
  br i1 %tobool71, label %if.then.72, label %if.else.91

if.then.72:                                       ; preds = %if.then.66
  %37 = load i32, i32* @target_flags, align 4
  %and73 = and i32 %37, 33554432
  %tobool74 = icmp ne i32 %and73, 0
  %cond75 = select i1 %tobool74, i32 5, i32 4
  %38 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 4), align 8
  %39 = load %struct.rtx_def*, %struct.rtx_def** %sa, align 8
  %call76 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %cond75, %struct.rtx_def* %38, %struct.rtx_def* %39)
  store %struct.rtx_def* %call76, %struct.rtx_def** %tmp, align 8
  %40 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %41 = load i32, i32* @target_flags, align 4
  %and77 = and i32 %41, 33554432
  %tobool78 = icmp ne i32 %and77, 0
  %cond79 = select i1 %tobool78, i32 8, i32 4
  %conv80 = sext i32 %cond79 to i64
  %call81 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %40, i64 %conv80)
  store %struct.rtx_def* %call81, %struct.rtx_def** %tmp, align 8
  %42 = load %struct.rtx_def*, %struct.rtx_def** %sa, align 8
  %43 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %call82 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %42, %struct.rtx_def* %43)
  %call83 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call82)
  %44 = load i32, i32* @target_flags, align 4
  %and84 = and i32 %44, 33554432
  %tobool85 = icmp ne i32 %and84, 0
  %cond86 = select i1 %tobool85, i32 5, i32 4
  %45 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 4), align 8
  %call87 = call %struct.rtx_def* @gen_rtx_MEM(i32 %cond86, %struct.rtx_def* %45)
  store %struct.rtx_def* %call87, %struct.rtx_def** %tmp, align 8
  %46 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 4), align 8
  %47 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %call88 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %46, %struct.rtx_def* %47)
  %48 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %49 = load %struct.rtx_def*, %struct.rtx_def** %sa, align 8
  %50 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call89 = call %struct.rtx_def* @gen_pro_epilogue_adjust_stack(%struct.rtx_def* %48, %struct.rtx_def* %49, %struct.rtx_def* %50)
  %call90 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call89)
  br label %if.end.106

if.else.91:                                       ; preds = %if.then.66
  %51 = load i32, i32* @target_flags, align 4
  %and92 = and i32 %51, 33554432
  %tobool93 = icmp ne i32 %and92, 0
  %cond94 = select i1 %tobool93, i32 5, i32 4
  %52 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %53 = load %struct.rtx_def*, %struct.rtx_def** %sa, align 8
  %call95 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %cond94, %struct.rtx_def* %52, %struct.rtx_def* %53)
  store %struct.rtx_def* %call95, %struct.rtx_def** %tmp, align 8
  %54 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %to_allocate96 = getelementptr inbounds %struct.ix86_frame, %struct.ix86_frame* %frame, i32 0, i32 7
  %55 = load i64, i64* %to_allocate96, align 8
  %nregs97 = getelementptr inbounds %struct.ix86_frame, %struct.ix86_frame* %frame, i32 0, i32 0
  %56 = load i32, i32* %nregs97, align 4
  %57 = load i32, i32* @target_flags, align 4
  %and98 = and i32 %57, 33554432
  %tobool99 = icmp ne i32 %and98, 0
  %cond100 = select i1 %tobool99, i32 8, i32 4
  %mul101 = mul nsw i32 %56, %cond100
  %conv102 = sext i32 %mul101 to i64
  %add = add nsw i64 %55, %conv102
  %call103 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %54, i64 %add)
  store %struct.rtx_def* %call103, %struct.rtx_def** %tmp, align 8
  %58 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %59 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %call104 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %58, %struct.rtx_def* %59)
  %call105 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call104)
  br label %if.end.106

if.end.106:                                       ; preds = %if.else.91, %if.then.72
  br label %if.end.150

if.else.107:                                      ; preds = %if.end.63
  %60 = load i32, i32* @frame_pointer_needed, align 4
  %tobool108 = icmp ne i32 %60, 0
  br i1 %tobool108, label %if.else.121, label %if.then.109

if.then.109:                                      ; preds = %if.else.107
  %61 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %62 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %to_allocate110 = getelementptr inbounds %struct.ix86_frame, %struct.ix86_frame* %frame, i32 0, i32 7
  %63 = load i64, i64* %to_allocate110, align 8
  %nregs111 = getelementptr inbounds %struct.ix86_frame, %struct.ix86_frame* %frame, i32 0, i32 0
  %64 = load i32, i32* %nregs111, align 4
  %65 = load i32, i32* @target_flags, align 4
  %and112 = and i32 %65, 33554432
  %tobool113 = icmp ne i32 %and112, 0
  %cond114 = select i1 %tobool113, i32 8, i32 4
  %mul115 = mul nsw i32 %64, %cond114
  %conv116 = sext i32 %mul115 to i64
  %add117 = add nsw i64 %63, %conv116
  %call118 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %add117)
  %call119 = call %struct.rtx_def* @gen_pro_epilogue_adjust_stack(%struct.rtx_def* %61, %struct.rtx_def* %62, %struct.rtx_def* %call118)
  %call120 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call119)
  br label %if.end.149

if.else.121:                                      ; preds = %if.else.107
  %66 = load i32, i32* @ix86_cpu, align 4
  %shl122 = shl i32 1, %66
  %and123 = and i32 49, %shl122
  %tobool124 = icmp ne i32 %and123, 0
  br i1 %tobool124, label %if.then.129, label %lor.lhs.false.125

lor.lhs.false.125:                                ; preds = %if.else.121
  %67 = load i32, i32* @optimize_size, align 4
  %tobool126 = icmp ne i32 %67, 0
  br i1 %tobool126, label %if.then.129, label %lor.lhs.false.127

lor.lhs.false.127:                                ; preds = %lor.lhs.false.125
  %68 = load i32, i32* @use_fast_prologue_epilogue, align 4
  %tobool128 = icmp ne i32 %68, 0
  br i1 %tobool128, label %if.else.136, label %if.then.129

if.then.129:                                      ; preds = %lor.lhs.false.127, %lor.lhs.false.125, %if.else.121
  %69 = load i32, i32* @target_flags, align 4
  %and130 = and i32 %69, 33554432
  %tobool131 = icmp ne i32 %and130, 0
  br i1 %tobool131, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.129
  %call132 = call %struct.rtx_def* @gen_leave_rex64()
  br label %cond.end

cond.false:                                       ; preds = %if.then.129
  %call133 = call %struct.rtx_def* @gen_leave()
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond134 = phi %struct.rtx_def* [ %call132, %cond.true ], [ %call133, %cond.false ]
  %call135 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %cond134)
  br label %if.end.148

if.else.136:                                      ; preds = %lor.lhs.false.127
  %70 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %71 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 4), align 8
  %72 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call137 = call %struct.rtx_def* @gen_pro_epilogue_adjust_stack(%struct.rtx_def* %70, %struct.rtx_def* %71, %struct.rtx_def* %72)
  %call138 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call137)
  %73 = load i32, i32* @target_flags, align 4
  %and139 = and i32 %73, 33554432
  %tobool140 = icmp ne i32 %and139, 0
  br i1 %tobool140, label %if.then.141, label %if.else.144

if.then.141:                                      ; preds = %if.else.136
  %74 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 4), align 8
  %call142 = call %struct.rtx_def* @gen_popdi1(%struct.rtx_def* %74)
  %call143 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call142)
  br label %if.end.147

if.else.144:                                      ; preds = %if.else.136
  %75 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 4), align 8
  %call145 = call %struct.rtx_def* @gen_popsi1(%struct.rtx_def* %75)
  %call146 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call145)
  br label %if.end.147

if.end.147:                                       ; preds = %if.else.144, %if.then.141
  br label %if.end.148

if.end.148:                                       ; preds = %if.end.147, %cond.end
  br label %if.end.149

if.end.149:                                       ; preds = %if.end.148, %if.then.109
  br label %if.end.150

if.end.150:                                       ; preds = %if.end.149, %if.end.106
  br label %if.end.220

if.else.151:                                      ; preds = %lor.lhs.false.42
  %76 = load i32, i32* %sp_valid, align 4
  %tobool152 = icmp ne i32 %76, 0
  br i1 %tobool152, label %if.else.160, label %if.then.153

if.then.153:                                      ; preds = %if.else.151
  %77 = load i32, i32* @frame_pointer_needed, align 4
  %tobool154 = icmp ne i32 %77, 0
  br i1 %tobool154, label %if.end.156, label %if.then.155

if.then.155:                                      ; preds = %if.then.153
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 4396, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__FUNCTION__.ix86_expand_epilogue, i32 0, i32 0)) #7
  unreachable

if.end.156:                                       ; preds = %if.then.153
  %78 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %79 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 4), align 8
  %80 = load i64, i64* %offset, align 8
  %call157 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %80)
  %call158 = call %struct.rtx_def* @gen_pro_epilogue_adjust_stack(%struct.rtx_def* %78, %struct.rtx_def* %79, %struct.rtx_def* %call157)
  %call159 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call158)
  br label %if.end.169

if.else.160:                                      ; preds = %if.else.151
  %to_allocate161 = getelementptr inbounds %struct.ix86_frame, %struct.ix86_frame* %frame, i32 0, i32 7
  %81 = load i64, i64* %to_allocate161, align 8
  %tobool162 = icmp ne i64 %81, 0
  br i1 %tobool162, label %if.then.163, label %if.end.168

if.then.163:                                      ; preds = %if.else.160
  %82 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %83 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %to_allocate164 = getelementptr inbounds %struct.ix86_frame, %struct.ix86_frame* %frame, i32 0, i32 7
  %84 = load i64, i64* %to_allocate164, align 8
  %call165 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %84)
  %call166 = call %struct.rtx_def* @gen_pro_epilogue_adjust_stack(%struct.rtx_def* %82, %struct.rtx_def* %83, %struct.rtx_def* %call165)
  %call167 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call166)
  br label %if.end.168

if.end.168:                                       ; preds = %if.then.163, %if.else.160
  br label %if.end.169

if.end.169:                                       ; preds = %if.end.168, %if.end.156
  store i32 0, i32* %regno, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.169
  %85 = load i32, i32* %regno, align 4
  %cmp170 = icmp slt i32 %85, 53
  br i1 %cmp170, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %86 = load i32, i32* %regno, align 4
  %call172 = call i32 @ix86_save_reg(i32 %86, i32 0)
  %tobool173 = icmp ne i32 %call172, 0
  br i1 %tobool173, label %if.then.174, label %if.end.192

if.then.174:                                      ; preds = %for.body
  %87 = load i32, i32* @target_flags, align 4
  %and175 = and i32 %87, 33554432
  %tobool176 = icmp ne i32 %and175, 0
  br i1 %tobool176, label %if.then.177, label %if.else.184

if.then.177:                                      ; preds = %if.then.174
  %88 = load i32, i32* @target_flags, align 4
  %and178 = and i32 %88, 33554432
  %tobool179 = icmp ne i32 %and178, 0
  %cond180 = select i1 %tobool179, i32 5, i32 4
  %89 = load i32, i32* %regno, align 4
  %call181 = call %struct.rtx_def* @gen_rtx_REG(i32 %cond180, i32 %89)
  %call182 = call %struct.rtx_def* @gen_popdi1(%struct.rtx_def* %call181)
  %call183 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call182)
  br label %if.end.191

if.else.184:                                      ; preds = %if.then.174
  %90 = load i32, i32* @target_flags, align 4
  %and185 = and i32 %90, 33554432
  %tobool186 = icmp ne i32 %and185, 0
  %cond187 = select i1 %tobool186, i32 5, i32 4
  %91 = load i32, i32* %regno, align 4
  %call188 = call %struct.rtx_def* @gen_rtx_REG(i32 %cond187, i32 %91)
  %call189 = call %struct.rtx_def* @gen_popsi1(%struct.rtx_def* %call188)
  %call190 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call189)
  br label %if.end.191

if.end.191:                                       ; preds = %if.else.184, %if.then.177
  br label %if.end.192

if.end.192:                                       ; preds = %if.end.191, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.192
  %92 = load i32, i32* %regno, align 4
  %inc = add nsw i32 %92, 1
  store i32 %inc, i32* %regno, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %93 = load i32, i32* @frame_pointer_needed, align 4
  %tobool193 = icmp ne i32 %93, 0
  br i1 %tobool193, label %if.then.194, label %if.end.219

if.then.194:                                      ; preds = %for.end
  %94 = load i32, i32* @ix86_cpu, align 4
  %shl195 = shl i32 1, %94
  %and196 = and i32 49, %shl195
  %tobool197 = icmp ne i32 %and196, 0
  br i1 %tobool197, label %if.then.198, label %if.else.208

if.then.198:                                      ; preds = %if.then.194
  %95 = load i32, i32* @target_flags, align 4
  %and199 = and i32 %95, 33554432
  %tobool200 = icmp ne i32 %and199, 0
  br i1 %tobool200, label %cond.true.201, label %cond.false.203

cond.true.201:                                    ; preds = %if.then.198
  %call202 = call %struct.rtx_def* @gen_leave_rex64()
  br label %cond.end.205

cond.false.203:                                   ; preds = %if.then.198
  %call204 = call %struct.rtx_def* @gen_leave()
  br label %cond.end.205

cond.end.205:                                     ; preds = %cond.false.203, %cond.true.201
  %cond206 = phi %struct.rtx_def* [ %call202, %cond.true.201 ], [ %call204, %cond.false.203 ]
  %call207 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %cond206)
  br label %if.end.218

if.else.208:                                      ; preds = %if.then.194
  %96 = load i32, i32* @target_flags, align 4
  %and209 = and i32 %96, 33554432
  %tobool210 = icmp ne i32 %and209, 0
  br i1 %tobool210, label %if.then.211, label %if.else.214

if.then.211:                                      ; preds = %if.else.208
  %97 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 4), align 8
  %call212 = call %struct.rtx_def* @gen_popdi1(%struct.rtx_def* %97)
  %call213 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call212)
  br label %if.end.217

if.else.214:                                      ; preds = %if.else.208
  %98 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 4), align 8
  %call215 = call %struct.rtx_def* @gen_popsi1(%struct.rtx_def* %98)
  %call216 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call215)
  br label %if.end.217

if.end.217:                                       ; preds = %if.else.214, %if.then.211
  br label %if.end.218

if.end.218:                                       ; preds = %if.end.217, %cond.end.205
  br label %if.end.219

if.end.219:                                       ; preds = %if.end.218, %for.end
  br label %if.end.220

if.end.220:                                       ; preds = %if.end.219, %if.end.150
  %99 = load i32, i32* %style.addr, align 4
  %cmp221 = icmp eq i32 %99, 0
  br i1 %cmp221, label %if.then.223, label %if.end.224

if.then.223:                                      ; preds = %if.end.220
  br label %if.end.256

if.end.224:                                       ; preds = %if.end.220
  %100 = load %struct.function*, %struct.function** @cfun, align 8
  %pops_args = getelementptr inbounds %struct.function, %struct.function* %100, i32 0, i32 8
  %101 = load i32, i32* %pops_args, align 4
  %tobool225 = icmp ne i32 %101, 0
  br i1 %tobool225, label %land.lhs.true.226, label %if.else.253

land.lhs.true.226:                                ; preds = %if.end.224
  %102 = load %struct.function*, %struct.function** @cfun, align 8
  %args_size = getelementptr inbounds %struct.function, %struct.function* %102, i32 0, i32 9
  %103 = load i32, i32* %args_size, align 4
  %tobool227 = icmp ne i32 %103, 0
  br i1 %tobool227, label %if.then.228, label %if.else.253

if.then.228:                                      ; preds = %land.lhs.true.226
  %104 = load %struct.function*, %struct.function** @cfun, align 8
  %pops_args230 = getelementptr inbounds %struct.function, %struct.function* %104, i32 0, i32 8
  %105 = load i32, i32* %pops_args230, align 4
  %conv231 = sext i32 %105 to i64
  %call232 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv231)
  store %struct.rtx_def* %call232, %struct.rtx_def** %popc, align 8
  %106 = load %struct.function*, %struct.function** @cfun, align 8
  %pops_args233 = getelementptr inbounds %struct.function, %struct.function* %106, i32 0, i32 8
  %107 = load i32, i32* %pops_args233, align 4
  %cmp234 = icmp sge i32 %107, 65536
  br i1 %cmp234, label %if.then.236, label %if.else.249

if.then.236:                                      ; preds = %if.then.228
  %call238 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 2)
  store %struct.rtx_def* %call238, %struct.rtx_def** %ecx, align 8
  %108 = load i32, i32* @target_flags, align 4
  %and239 = and i32 %108, 33554432
  %tobool240 = icmp ne i32 %and239, 0
  br i1 %tobool240, label %if.then.241, label %if.end.242

if.then.241:                                      ; preds = %if.then.236
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 4445, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__FUNCTION__.ix86_expand_epilogue, i32 0, i32 0)) #7
  unreachable

if.end.242:                                       ; preds = %if.then.236
  %109 = load %struct.rtx_def*, %struct.rtx_def** %ecx, align 8
  %call243 = call %struct.rtx_def* @gen_popsi1(%struct.rtx_def* %109)
  %call244 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call243)
  %110 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %111 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %112 = load %struct.rtx_def*, %struct.rtx_def** %popc, align 8
  %call245 = call %struct.rtx_def* @gen_addsi3(%struct.rtx_def* %110, %struct.rtx_def* %111, %struct.rtx_def* %112)
  %call246 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call245)
  %113 = load %struct.rtx_def*, %struct.rtx_def** %ecx, align 8
  %call247 = call %struct.rtx_def* @gen_return_indirect_internal(%struct.rtx_def* %113)
  %call248 = call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %call247)
  br label %if.end.252

if.else.249:                                      ; preds = %if.then.228
  %114 = load %struct.rtx_def*, %struct.rtx_def** %popc, align 8
  %call250 = call %struct.rtx_def* @gen_return_pop_internal(%struct.rtx_def* %114)
  %call251 = call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %call250)
  br label %if.end.252

if.end.252:                                       ; preds = %if.else.249, %if.end.242
  br label %if.end.256

if.else.253:                                      ; preds = %land.lhs.true.226, %if.end.224
  %call254 = call %struct.rtx_def* @gen_return_internal()
  %call255 = call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %call254)
  br label %if.end.256

if.end.256:                                       ; preds = %if.then.223, %if.else.253, %if.end.252
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @ix86_emit_restore_regs_using_mov(%struct.rtx_def* %pointer, i32 %offset, i32 %maybe_eh_return) #1 {
entry:
  %pointer.addr = alloca %struct.rtx_def*, align 8
  %offset.addr = alloca i32, align 4
  %maybe_eh_return.addr = alloca i32, align 4
  %regno = alloca i32, align 4
  store %struct.rtx_def* %pointer, %struct.rtx_def** %pointer.addr, align 8
  store i32 %offset, i32* %offset.addr, align 4
  store i32 %maybe_eh_return, i32* %maybe_eh_return.addr, align 4
  store i32 0, i32* %regno, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %regno, align 4
  %cmp = icmp slt i32 %0, 53
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %regno, align 4
  %2 = load i32, i32* %maybe_eh_return.addr, align 4
  %call = call i32 @ix86_save_reg(i32 %1, i32 %2)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %3 = load i32, i32* @target_flags, align 4
  %and = and i32 %3, 33554432
  %tobool1 = icmp ne i32 %and, 0
  %cond = select i1 %tobool1, i32 5, i32 4
  %4 = load i32, i32* %regno, align 4
  %call2 = call %struct.rtx_def* @gen_rtx_REG(i32 %cond, i32 %4)
  %5 = load i32, i32* @target_flags, align 4
  %and3 = and i32 %5, 33554432
  %tobool4 = icmp ne i32 %and3, 0
  %cond5 = select i1 %tobool4, i32 5, i32 4
  %6 = load %struct.rtx_def*, %struct.rtx_def** %pointer.addr, align 8
  %call6 = call %struct.rtx_def* @gen_rtx_MEM(i32 %cond5, %struct.rtx_def* %6)
  %7 = load i32, i32* @target_flags, align 4
  %and7 = and i32 %7, 33554432
  %tobool8 = icmp ne i32 %and7, 0
  %cond9 = select i1 %tobool8, i32 5, i32 4
  %8 = load i32, i32* %offset.addr, align 4
  %conv = sext i32 %8 to i64
  %call10 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %call6, i32 %cond9, i64 %conv, i32 1, i32 1)
  %call11 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call2, %struct.rtx_def* %call10)
  %9 = load i32, i32* @target_flags, align 4
  %and12 = and i32 %9, 33554432
  %tobool13 = icmp ne i32 %and12, 0
  %cond14 = select i1 %tobool13, i32 8, i32 4
  %10 = load i32, i32* %offset.addr, align 4
  %add = add nsw i32 %10, %cond14
  store i32 %add, i32* %offset.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %11 = load i32, i32* %regno, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %regno, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare %struct.rtx_def* @gen_leave_rex64() #0

declare %struct.rtx_def* @gen_leave() #0

declare %struct.rtx_def* @gen_popdi1(%struct.rtx_def*) #0

declare %struct.rtx_def* @gen_popsi1(%struct.rtx_def*) #0

; Function Attrs: nounwind uwtable
define internal i32 @ix86_save_reg(i32 %regno, i32 %maybe_eh_return) #1 {
entry:
  %retval = alloca i32, align 4
  %regno.addr = alloca i32, align 4
  %maybe_eh_return.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %test = alloca i32, align 4
  store i32 %regno, i32* %regno.addr, align 4
  store i32 %maybe_eh_return, i32* %maybe_eh_return.addr, align 4
  %0 = load i32, i32* %regno.addr, align 4
  %1 = load i32, i32* @target_flags, align 4
  %and = and i32 %1, 33554432
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %2 = load i32, i32* @flag_pic, align 4
  %tobool1 = icmp ne i32 %2, 0
  %lnot = xor i1 %tobool1, true
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %3 = phi i1 [ true, %entry ], [ %lnot, %lor.rhs ]
  %cond = select i1 %3, i32 -1, i32 3
  %cmp = icmp eq i32 %0, %cond
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.end
  %4 = load %struct.function*, %struct.function** @cfun, align 8
  %uses_pic_offset_table = getelementptr inbounds %struct.function, %struct.function* %4, i32 0, i32 56
  %5 = bitcast i24* %uses_pic_offset_table to i32*
  %bf.load = load i32, i32* %5, align 8
  %bf.lshr = lshr i32 %bf.load, 21
  %bf.clear = and i32 %bf.lshr, 1
  %tobool2 = icmp ne i32 %bf.clear, 0
  br i1 %tobool2, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %6 = load %struct.function*, %struct.function** @cfun, align 8
  %uses_const_pool = getelementptr inbounds %struct.function, %struct.function* %6, i32 0, i32 56
  %7 = bitcast i24* %uses_const_pool to i32*
  %bf.load3 = load i32, i32* %7, align 8
  %bf.lshr4 = lshr i32 %bf.load3, 20
  %bf.clear5 = and i32 %bf.lshr4, 1
  %tobool6 = icmp ne i32 %bf.clear5, 0
  br i1 %tobool6, label %if.then, label %lor.lhs.false.7

lor.lhs.false.7:                                  ; preds = %lor.lhs.false
  %8 = load %struct.function*, %struct.function** @cfun, align 8
  %calls_eh_return = getelementptr inbounds %struct.function, %struct.function* %8, i32 0, i32 56
  %9 = bitcast i24* %calls_eh_return to i32*
  %bf.load8 = load i32, i32* %9, align 8
  %bf.lshr9 = lshr i32 %bf.load8, 7
  %bf.clear10 = and i32 %bf.lshr9, 1
  %tobool11 = icmp ne i32 %bf.clear10, 0
  br i1 %tobool11, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false.7, %lor.lhs.false, %land.lhs.true
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false.7, %lor.end
  %10 = load %struct.function*, %struct.function** @cfun, align 8
  %calls_eh_return12 = getelementptr inbounds %struct.function, %struct.function* %10, i32 0, i32 56
  %11 = bitcast i24* %calls_eh_return12 to i32*
  %bf.load13 = load i32, i32* %11, align 8
  %bf.lshr14 = lshr i32 %bf.load13, 7
  %bf.clear15 = and i32 %bf.lshr14, 1
  %tobool16 = icmp ne i32 %bf.clear15, 0
  br i1 %tobool16, label %land.lhs.true.17, label %if.end.28

land.lhs.true.17:                                 ; preds = %if.end
  %12 = load i32, i32* %maybe_eh_return.addr, align 4
  %tobool18 = icmp ne i32 %12, 0
  br i1 %tobool18, label %if.then.19, label %if.end.28

if.then.19:                                       ; preds = %land.lhs.true.17
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.19
  %13 = load i32, i32* %i, align 4
  %cmp20 = icmp ult i32 %13, 2
  br i1 %cmp20, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.cond
  %14 = load i32, i32* %i, align 4
  br label %cond.end

cond.false:                                       ; preds = %for.cond
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond21 = phi i32 [ %14, %cond.true ], [ -1, %cond.false ]
  store i32 %cond21, i32* %test, align 4
  %15 = load i32, i32* %test, align 4
  %cmp22 = icmp eq i32 %15, -1
  br i1 %cmp22, label %if.then.23, label %if.end.24

if.then.23:                                       ; preds = %cond.end
  br label %for.end

if.end.24:                                        ; preds = %cond.end
  %16 = load i32, i32* %test, align 4
  %17 = load i32, i32* %regno.addr, align 4
  %cmp25 = icmp eq i32 %16, %17
  br i1 %cmp25, label %if.then.26, label %if.end.27

if.then.26:                                       ; preds = %if.end.24
  store i32 1, i32* %retval
  br label %return

if.end.27:                                        ; preds = %if.end.24
  br label %for.inc

for.inc:                                          ; preds = %if.end.27
  %18 = load i32, i32* %i, align 4
  %inc = add i32 %18, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then.23
  br label %if.end.28

if.end.28:                                        ; preds = %for.end, %land.lhs.true.17, %if.end
  %19 = load i32, i32* %regno.addr, align 4
  %idxprom = sext i32 %19 to i64
  %arrayidx = getelementptr inbounds [53 x i8], [53 x i8]* @regs_ever_live, i32 0, i64 %idxprom
  %20 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %20 to i32
  %tobool29 = icmp ne i32 %conv, 0
  br i1 %tobool29, label %land.lhs.true.30, label %land.end

land.lhs.true.30:                                 ; preds = %if.end.28
  %21 = load i32, i32* %regno.addr, align 4
  %idxprom31 = sext i32 %21 to i64
  %arrayidx32 = getelementptr inbounds [53 x i8], [53 x i8]* @call_used_regs, i32 0, i64 %idxprom31
  %22 = load i8, i8* %arrayidx32, align 1
  %tobool33 = icmp ne i8 %22, 0
  br i1 %tobool33, label %land.end, label %land.lhs.true.34

land.lhs.true.34:                                 ; preds = %land.lhs.true.30
  %23 = load i32, i32* %regno.addr, align 4
  %idxprom35 = sext i32 %23 to i64
  %arrayidx36 = getelementptr inbounds [53 x i8], [53 x i8]* @fixed_regs, i32 0, i64 %idxprom35
  %24 = load i8, i8* %arrayidx36, align 1
  %tobool37 = icmp ne i8 %24, 0
  br i1 %tobool37, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %land.lhs.true.34
  %25 = load i32, i32* %regno.addr, align 4
  %cmp38 = icmp ne i32 %25, 6
  br i1 %cmp38, label %lor.end.43, label %lor.rhs.40

lor.rhs.40:                                       ; preds = %land.rhs
  %26 = load i32, i32* @frame_pointer_needed, align 4
  %tobool41 = icmp ne i32 %26, 0
  %lnot42 = xor i1 %tobool41, true
  br label %lor.end.43

lor.end.43:                                       ; preds = %lor.rhs.40, %land.rhs
  %27 = phi i1 [ true, %land.rhs ], [ %lnot42, %lor.rhs.40 ]
  br label %land.end

land.end:                                         ; preds = %lor.end.43, %land.lhs.true.34, %land.lhs.true.30, %if.end.28
  %28 = phi i1 [ false, %land.lhs.true.34 ], [ false, %land.lhs.true.30 ], [ false, %if.end.28 ], [ %27, %lor.end.43 ]
  %land.ext = zext i1 %28 to i32
  store i32 %land.ext, i32* %retval
  br label %return

return:                                           ; preds = %land.end, %if.then.26, %if.then
  %29 = load i32, i32* %retval
  ret i32 %29
}

declare %struct.rtx_def* @gen_addsi3(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #0

declare %struct.rtx_def* @gen_return_indirect_internal(%struct.rtx_def*) #0

declare %struct.rtx_def* @gen_return_pop_internal(%struct.rtx_def*) #0

declare %struct.rtx_def* @gen_return_internal() #0

; Function Attrs: nounwind uwtable
define i32 @ix86_address_cost(%struct.rtx_def* %x) #1 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  %parts = alloca %struct.ix86_address, align 8
  %cost = alloca i32, align 4
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  store i32 1, i32* %cost, align 4
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %call = call i32 @ix86_decompose_address(%struct.rtx_def* %0, %struct.ix86_address* %parts)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 4601, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__FUNCTION__.ix86_address_cost, i32 0, i32 0)) #7
  unreachable

if.end:                                           ; preds = %entry
  %disp = getelementptr inbounds %struct.ix86_address, %struct.ix86_address* %parts, i32 0, i32 2
  %1 = load %struct.rtx_def*, %struct.rtx_def** %disp, align 8
  %tobool1 = icmp ne %struct.rtx_def* %1, null
  br i1 %tobool1, label %land.lhs.true, label %if.end.4

land.lhs.true:                                    ; preds = %if.end
  %disp2 = getelementptr inbounds %struct.ix86_address, %struct.ix86_address* %parts, i32 0, i32 2
  %2 = load %struct.rtx_def*, %struct.rtx_def** %disp2, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %cmp = icmp ne %struct.rtx_def* %2, %3
  br i1 %cmp, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %land.lhs.true
  %4 = load i32, i32* %cost, align 4
  %dec = add nsw i32 %4, -1
  store i32 %dec, i32* %cost, align 4
  br label %if.end.4

if.end.4:                                         ; preds = %if.then.3, %land.lhs.true, %if.end
  %base = getelementptr inbounds %struct.ix86_address, %struct.ix86_address* %parts, i32 0, i32 0
  %5 = load %struct.rtx_def*, %struct.rtx_def** %base, align 8
  %tobool5 = icmp ne %struct.rtx_def* %5, null
  br i1 %tobool5, label %land.lhs.true.6, label %lor.lhs.false.11

land.lhs.true.6:                                  ; preds = %if.end.4
  %base7 = getelementptr inbounds %struct.ix86_address, %struct.ix86_address* %parts, i32 0, i32 0
  %6 = load %struct.rtx_def*, %struct.rtx_def** %base7, align 8
  %7 = bitcast %struct.rtx_def* %6 to i32*
  %bf.load = load i32, i32* %7, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp8 = icmp eq i32 %bf.clear, 61
  br i1 %cmp8, label %lor.lhs.false, label %if.then.24

lor.lhs.false:                                    ; preds = %land.lhs.true.6
  %base9 = getelementptr inbounds %struct.ix86_address, %struct.ix86_address* %parts, i32 0, i32 0
  %8 = load %struct.rtx_def*, %struct.rtx_def** %base9, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx to i32*
  %9 = load i32, i32* %rtuint, align 4
  %cmp10 = icmp uge i32 %9, 53
  br i1 %cmp10, label %if.then.24, label %lor.lhs.false.11

lor.lhs.false.11:                                 ; preds = %lor.lhs.false, %if.end.4
  %index = getelementptr inbounds %struct.ix86_address, %struct.ix86_address* %parts, i32 0, i32 1
  %10 = load %struct.rtx_def*, %struct.rtx_def** %index, align 8
  %tobool12 = icmp ne %struct.rtx_def* %10, null
  br i1 %tobool12, label %land.lhs.true.13, label %if.end.25

land.lhs.true.13:                                 ; preds = %lor.lhs.false.11
  %index14 = getelementptr inbounds %struct.ix86_address, %struct.ix86_address* %parts, i32 0, i32 1
  %11 = load %struct.rtx_def*, %struct.rtx_def** %index14, align 8
  %12 = bitcast %struct.rtx_def* %11 to i32*
  %bf.load15 = load i32, i32* %12, align 8
  %bf.clear16 = and i32 %bf.load15, 65535
  %cmp17 = icmp eq i32 %bf.clear16, 61
  br i1 %cmp17, label %lor.lhs.false.18, label %if.then.24

lor.lhs.false.18:                                 ; preds = %land.lhs.true.13
  %index19 = getelementptr inbounds %struct.ix86_address, %struct.ix86_address* %parts, i32 0, i32 1
  %13 = load %struct.rtx_def*, %struct.rtx_def** %index19, align 8
  %fld20 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1
  %arrayidx21 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld20, i32 0, i64 0
  %rtuint22 = bitcast %union.rtunion_def* %arrayidx21 to i32*
  %14 = load i32, i32* %rtuint22, align 4
  %cmp23 = icmp uge i32 %14, 53
  br i1 %cmp23, label %if.then.24, label %if.end.25

if.then.24:                                       ; preds = %lor.lhs.false.18, %land.lhs.true.13, %lor.lhs.false, %land.lhs.true.6
  %15 = load i32, i32* %cost, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %cost, align 4
  br label %if.end.25

if.end.25:                                        ; preds = %if.then.24, %lor.lhs.false.18, %lor.lhs.false.11
  %base26 = getelementptr inbounds %struct.ix86_address, %struct.ix86_address* %parts, i32 0, i32 0
  %16 = load %struct.rtx_def*, %struct.rtx_def** %base26, align 8
  %tobool27 = icmp ne %struct.rtx_def* %16, null
  br i1 %tobool27, label %land.lhs.true.28, label %if.end.59

land.lhs.true.28:                                 ; preds = %if.end.25
  %base29 = getelementptr inbounds %struct.ix86_address, %struct.ix86_address* %parts, i32 0, i32 0
  %17 = load %struct.rtx_def*, %struct.rtx_def** %base29, align 8
  %18 = bitcast %struct.rtx_def* %17 to i32*
  %bf.load30 = load i32, i32* %18, align 8
  %bf.clear31 = and i32 %bf.load30, 65535
  %cmp32 = icmp eq i32 %bf.clear31, 61
  br i1 %cmp32, label %lor.lhs.false.33, label %land.lhs.true.39

lor.lhs.false.33:                                 ; preds = %land.lhs.true.28
  %base34 = getelementptr inbounds %struct.ix86_address, %struct.ix86_address* %parts, i32 0, i32 0
  %19 = load %struct.rtx_def*, %struct.rtx_def** %base34, align 8
  %fld35 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1
  %arrayidx36 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld35, i32 0, i64 0
  %rtuint37 = bitcast %union.rtunion_def* %arrayidx36 to i32*
  %20 = load i32, i32* %rtuint37, align 4
  %cmp38 = icmp uge i32 %20, 53
  br i1 %cmp38, label %land.lhs.true.39, label %if.end.59

land.lhs.true.39:                                 ; preds = %lor.lhs.false.33, %land.lhs.true.28
  %index40 = getelementptr inbounds %struct.ix86_address, %struct.ix86_address* %parts, i32 0, i32 1
  %21 = load %struct.rtx_def*, %struct.rtx_def** %index40, align 8
  %tobool41 = icmp ne %struct.rtx_def* %21, null
  br i1 %tobool41, label %land.lhs.true.42, label %if.end.59

land.lhs.true.42:                                 ; preds = %land.lhs.true.39
  %index43 = getelementptr inbounds %struct.ix86_address, %struct.ix86_address* %parts, i32 0, i32 1
  %22 = load %struct.rtx_def*, %struct.rtx_def** %index43, align 8
  %23 = bitcast %struct.rtx_def* %22 to i32*
  %bf.load44 = load i32, i32* %23, align 8
  %bf.clear45 = and i32 %bf.load44, 65535
  %cmp46 = icmp eq i32 %bf.clear45, 61
  br i1 %cmp46, label %lor.lhs.false.47, label %land.lhs.true.53

lor.lhs.false.47:                                 ; preds = %land.lhs.true.42
  %index48 = getelementptr inbounds %struct.ix86_address, %struct.ix86_address* %parts, i32 0, i32 1
  %24 = load %struct.rtx_def*, %struct.rtx_def** %index48, align 8
  %fld49 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1
  %arrayidx50 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld49, i32 0, i64 0
  %rtuint51 = bitcast %union.rtunion_def* %arrayidx50 to i32*
  %25 = load i32, i32* %rtuint51, align 4
  %cmp52 = icmp uge i32 %25, 53
  br i1 %cmp52, label %land.lhs.true.53, label %if.end.59

land.lhs.true.53:                                 ; preds = %lor.lhs.false.47, %land.lhs.true.42
  %base54 = getelementptr inbounds %struct.ix86_address, %struct.ix86_address* %parts, i32 0, i32 0
  %26 = load %struct.rtx_def*, %struct.rtx_def** %base54, align 8
  %index55 = getelementptr inbounds %struct.ix86_address, %struct.ix86_address* %parts, i32 0, i32 1
  %27 = load %struct.rtx_def*, %struct.rtx_def** %index55, align 8
  %cmp56 = icmp ne %struct.rtx_def* %26, %27
  br i1 %cmp56, label %if.then.57, label %if.end.59

if.then.57:                                       ; preds = %land.lhs.true.53
  %28 = load i32, i32* %cost, align 4
  %inc58 = add nsw i32 %28, 1
  store i32 %inc58, i32* %cost, align 4
  br label %if.end.59

if.end.59:                                        ; preds = %if.then.57, %land.lhs.true.53, %lor.lhs.false.47, %land.lhs.true.39, %lor.lhs.false.33, %if.end.25
  %29 = load i32, i32* @ix86_cpu, align 4
  %cmp60 = icmp eq i32 %29, 4
  br i1 %cmp60, label %land.lhs.true.61, label %if.end.97

land.lhs.true.61:                                 ; preds = %if.end.59
  %disp62 = getelementptr inbounds %struct.ix86_address, %struct.ix86_address* %parts, i32 0, i32 2
  %30 = load %struct.rtx_def*, %struct.rtx_def** %disp62, align 8
  %tobool63 = icmp ne %struct.rtx_def* %30, null
  br i1 %tobool63, label %lor.lhs.false.72, label %land.lhs.true.64

land.lhs.true.64:                                 ; preds = %land.lhs.true.61
  %base65 = getelementptr inbounds %struct.ix86_address, %struct.ix86_address* %parts, i32 0, i32 0
  %31 = load %struct.rtx_def*, %struct.rtx_def** %base65, align 8
  %tobool66 = icmp ne %struct.rtx_def* %31, null
  br i1 %tobool66, label %land.lhs.true.67, label %lor.lhs.false.72

land.lhs.true.67:                                 ; preds = %land.lhs.true.64
  %index68 = getelementptr inbounds %struct.ix86_address, %struct.ix86_address* %parts, i32 0, i32 1
  %32 = load %struct.rtx_def*, %struct.rtx_def** %index68, align 8
  %tobool69 = icmp ne %struct.rtx_def* %32, null
  br i1 %tobool69, label %land.lhs.true.70, label %lor.lhs.false.72

land.lhs.true.70:                                 ; preds = %land.lhs.true.67
  %scale = getelementptr inbounds %struct.ix86_address, %struct.ix86_address* %parts, i32 0, i32 3
  %33 = load i64, i64* %scale, align 8
  %cmp71 = icmp ne i64 %33, 1
  br i1 %cmp71, label %if.then.96, label %lor.lhs.false.72

lor.lhs.false.72:                                 ; preds = %land.lhs.true.70, %land.lhs.true.67, %land.lhs.true.64, %land.lhs.true.61
  %disp73 = getelementptr inbounds %struct.ix86_address, %struct.ix86_address* %parts, i32 0, i32 2
  %34 = load %struct.rtx_def*, %struct.rtx_def** %disp73, align 8
  %tobool74 = icmp ne %struct.rtx_def* %34, null
  br i1 %tobool74, label %land.lhs.true.75, label %lor.lhs.false.84

land.lhs.true.75:                                 ; preds = %lor.lhs.false.72
  %base76 = getelementptr inbounds %struct.ix86_address, %struct.ix86_address* %parts, i32 0, i32 0
  %35 = load %struct.rtx_def*, %struct.rtx_def** %base76, align 8
  %tobool77 = icmp ne %struct.rtx_def* %35, null
  br i1 %tobool77, label %lor.lhs.false.84, label %land.lhs.true.78

land.lhs.true.78:                                 ; preds = %land.lhs.true.75
  %index79 = getelementptr inbounds %struct.ix86_address, %struct.ix86_address* %parts, i32 0, i32 1
  %36 = load %struct.rtx_def*, %struct.rtx_def** %index79, align 8
  %tobool80 = icmp ne %struct.rtx_def* %36, null
  br i1 %tobool80, label %land.lhs.true.81, label %lor.lhs.false.84

land.lhs.true.81:                                 ; preds = %land.lhs.true.78
  %scale82 = getelementptr inbounds %struct.ix86_address, %struct.ix86_address* %parts, i32 0, i32 3
  %37 = load i64, i64* %scale82, align 8
  %cmp83 = icmp ne i64 %37, 1
  br i1 %cmp83, label %if.then.96, label %lor.lhs.false.84

lor.lhs.false.84:                                 ; preds = %land.lhs.true.81, %land.lhs.true.78, %land.lhs.true.75, %lor.lhs.false.72
  %disp85 = getelementptr inbounds %struct.ix86_address, %struct.ix86_address* %parts, i32 0, i32 2
  %38 = load %struct.rtx_def*, %struct.rtx_def** %disp85, align 8
  %tobool86 = icmp ne %struct.rtx_def* %38, null
  br i1 %tobool86, label %if.end.97, label %land.lhs.true.87

land.lhs.true.87:                                 ; preds = %lor.lhs.false.84
  %base88 = getelementptr inbounds %struct.ix86_address, %struct.ix86_address* %parts, i32 0, i32 0
  %39 = load %struct.rtx_def*, %struct.rtx_def** %base88, align 8
  %tobool89 = icmp ne %struct.rtx_def* %39, null
  br i1 %tobool89, label %land.lhs.true.90, label %if.end.97

land.lhs.true.90:                                 ; preds = %land.lhs.true.87
  %index91 = getelementptr inbounds %struct.ix86_address, %struct.ix86_address* %parts, i32 0, i32 1
  %40 = load %struct.rtx_def*, %struct.rtx_def** %index91, align 8
  %tobool92 = icmp ne %struct.rtx_def* %40, null
  br i1 %tobool92, label %land.lhs.true.93, label %if.end.97

land.lhs.true.93:                                 ; preds = %land.lhs.true.90
  %scale94 = getelementptr inbounds %struct.ix86_address, %struct.ix86_address* %parts, i32 0, i32 3
  %41 = load i64, i64* %scale94, align 8
  %cmp95 = icmp eq i64 %41, 1
  br i1 %cmp95, label %if.then.96, label %if.end.97

if.then.96:                                       ; preds = %land.lhs.true.93, %land.lhs.true.81, %land.lhs.true.70
  %42 = load i32, i32* %cost, align 4
  %add = add nsw i32 %42, 10
  store i32 %add, i32* %cost, align 4
  br label %if.end.97

if.end.97:                                        ; preds = %if.then.96, %land.lhs.true.93, %land.lhs.true.90, %land.lhs.true.87, %lor.lhs.false.84, %if.end.59
  %43 = load i32, i32* %cost, align 4
  ret i32 %43
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @ix86_find_base_term(%struct.rtx_def* %x) #1 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %x.addr = alloca %struct.rtx_def*, align 8
  %term = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  %0 = load i32, i32* @target_flags, align 4
  %and = and i32 %0, 33554432
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end.48

if.then:                                          ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load = load i32, i32* %2, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp ne i32 %bf.clear, 58
  br i1 %cmp, label %if.then.1, label %if.end

if.then.1:                                        ; preds = %if.then
  %3 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %if.then
  %4 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %5 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %term, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %term, align 8
  %7 = bitcast %struct.rtx_def* %6 to i32*
  %bf.load2 = load i32, i32* %7, align 8
  %bf.clear3 = and i32 %bf.load2, 65535
  %cmp4 = icmp eq i32 %bf.clear3, 75
  br i1 %cmp4, label %land.lhs.true, label %if.end.21

land.lhs.true:                                    ; preds = %if.end
  %8 = load %struct.rtx_def*, %struct.rtx_def** %term, align 8
  %fld5 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1
  %arrayidx6 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld5, i32 0, i64 1
  %rtx7 = bitcast %union.rtunion_def* %arrayidx6 to %struct.rtx_def**
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rtx7, align 8
  %10 = bitcast %struct.rtx_def* %9 to i32*
  %bf.load8 = load i32, i32* %10, align 8
  %bf.clear9 = and i32 %bf.load8, 65535
  %cmp10 = icmp eq i32 %bf.clear9, 54
  br i1 %cmp10, label %if.then.17, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %11 = load %struct.rtx_def*, %struct.rtx_def** %term, align 8
  %fld11 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1
  %arrayidx12 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld11, i32 0, i64 1
  %rtx13 = bitcast %union.rtunion_def* %arrayidx12 to %struct.rtx_def**
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rtx13, align 8
  %13 = bitcast %struct.rtx_def* %12 to i32*
  %bf.load14 = load i32, i32* %13, align 8
  %bf.clear15 = and i32 %bf.load14, 65535
  %cmp16 = icmp eq i32 %bf.clear15, 55
  br i1 %cmp16, label %if.then.17, label %if.end.21

if.then.17:                                       ; preds = %lor.lhs.false, %land.lhs.true
  %14 = load %struct.rtx_def*, %struct.rtx_def** %term, align 8
  %fld18 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1
  %arrayidx19 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld18, i32 0, i64 0
  %rtx20 = bitcast %union.rtunion_def* %arrayidx19 to %struct.rtx_def**
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rtx20, align 8
  store %struct.rtx_def* %15, %struct.rtx_def** %term, align 8
  br label %if.end.21

if.end.21:                                        ; preds = %if.then.17, %lor.lhs.false, %if.end
  %16 = load %struct.rtx_def*, %struct.rtx_def** %term, align 8
  %17 = bitcast %struct.rtx_def* %16 to i32*
  %bf.load22 = load i32, i32* %17, align 8
  %bf.clear23 = and i32 %bf.load22, 65535
  %cmp24 = icmp ne i32 %bf.clear23, 42
  br i1 %cmp24, label %if.then.33, label %lor.lhs.false.25

lor.lhs.false.25:                                 ; preds = %if.end.21
  %18 = load %struct.rtx_def*, %struct.rtx_def** %term, align 8
  %fld26 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1
  %arrayidx27 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld26, i32 0, i64 0
  %rtvec = bitcast %union.rtunion_def* %arrayidx27 to %struct.rtvec_def**
  %19 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec, align 8
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %19, i32 0, i32 0
  %20 = load i32, i32* %num_elem, align 4
  %cmp28 = icmp ne i32 %20, 1
  br i1 %cmp28, label %if.then.33, label %lor.lhs.false.29

lor.lhs.false.29:                                 ; preds = %lor.lhs.false.25
  %21 = load %struct.rtx_def*, %struct.rtx_def** %term, align 8
  %fld30 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1
  %arrayidx31 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld30, i32 0, i64 1
  %rtint = bitcast %union.rtunion_def* %arrayidx31 to i32*
  %22 = load i32, i32* %rtint, align 4
  %cmp32 = icmp ne i32 %22, 15
  br i1 %cmp32, label %if.then.33, label %if.end.34

if.then.33:                                       ; preds = %lor.lhs.false.29, %lor.lhs.false.25, %if.end.21
  %23 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  store %struct.rtx_def* %23, %struct.rtx_def** %retval
  br label %return

if.end.34:                                        ; preds = %lor.lhs.false.29
  %24 = load %struct.rtx_def*, %struct.rtx_def** %term, align 8
  %fld35 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1
  %arrayidx36 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld35, i32 0, i64 0
  %rtvec37 = bitcast %union.rtunion_def* %arrayidx36 to %struct.rtvec_def**
  %25 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec37, align 8
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %25, i32 0, i32 1
  %arrayidx38 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i32 0, i64 0
  %26 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx38, align 8
  store %struct.rtx_def* %26, %struct.rtx_def** %term, align 8
  %27 = load %struct.rtx_def*, %struct.rtx_def** %term, align 8
  %28 = bitcast %struct.rtx_def* %27 to i32*
  %bf.load39 = load i32, i32* %28, align 8
  %bf.clear40 = and i32 %bf.load39, 65535
  %cmp41 = icmp ne i32 %bf.clear40, 68
  br i1 %cmp41, label %land.lhs.true.42, label %if.end.47

land.lhs.true.42:                                 ; preds = %if.end.34
  %29 = load %struct.rtx_def*, %struct.rtx_def** %term, align 8
  %30 = bitcast %struct.rtx_def* %29 to i32*
  %bf.load43 = load i32, i32* %30, align 8
  %bf.clear44 = and i32 %bf.load43, 65535
  %cmp45 = icmp ne i32 %bf.clear44, 67
  br i1 %cmp45, label %if.then.46, label %if.end.47

if.then.46:                                       ; preds = %land.lhs.true.42
  %31 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  store %struct.rtx_def* %31, %struct.rtx_def** %retval
  br label %return

if.end.47:                                        ; preds = %land.lhs.true.42, %if.end.34
  %32 = load %struct.rtx_def*, %struct.rtx_def** %term, align 8
  store %struct.rtx_def* %32, %struct.rtx_def** %retval
  br label %return

if.end.48:                                        ; preds = %entry
  %33 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %34 = bitcast %struct.rtx_def* %33 to i32*
  %bf.load49 = load i32, i32* %34, align 8
  %bf.clear50 = and i32 %bf.load49, 65535
  %cmp51 = icmp ne i32 %bf.clear50, 75
  br i1 %cmp51, label %if.then.64, label %lor.lhs.false.52

lor.lhs.false.52:                                 ; preds = %if.end.48
  %35 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld53 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %35, i32 0, i32 1
  %arrayidx54 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld53, i32 0, i64 0
  %rtx55 = bitcast %union.rtunion_def* %arrayidx54 to %struct.rtx_def**
  %36 = load %struct.rtx_def*, %struct.rtx_def** %rtx55, align 8
  %37 = load %struct.rtx_def*, %struct.rtx_def** @pic_offset_table_rtx, align 8
  %cmp56 = icmp ne %struct.rtx_def* %36, %37
  br i1 %cmp56, label %if.then.64, label %lor.lhs.false.57

lor.lhs.false.57:                                 ; preds = %lor.lhs.false.52
  %38 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld58 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %38, i32 0, i32 1
  %arrayidx59 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld58, i32 0, i64 1
  %rtx60 = bitcast %union.rtunion_def* %arrayidx59 to %struct.rtx_def**
  %39 = load %struct.rtx_def*, %struct.rtx_def** %rtx60, align 8
  %40 = bitcast %struct.rtx_def* %39 to i32*
  %bf.load61 = load i32, i32* %40, align 8
  %bf.clear62 = and i32 %bf.load61, 65535
  %cmp63 = icmp ne i32 %bf.clear62, 58
  br i1 %cmp63, label %if.then.64, label %if.end.65

if.then.64:                                       ; preds = %lor.lhs.false.57, %lor.lhs.false.52, %if.end.48
  %41 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  store %struct.rtx_def* %41, %struct.rtx_def** %retval
  br label %return

if.end.65:                                        ; preds = %lor.lhs.false.57
  %42 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld66 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %42, i32 0, i32 1
  %arrayidx67 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld66, i32 0, i64 1
  %rtx68 = bitcast %union.rtunion_def* %arrayidx67 to %struct.rtx_def**
  %43 = load %struct.rtx_def*, %struct.rtx_def** %rtx68, align 8
  %fld69 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %43, i32 0, i32 1
  %arrayidx70 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld69, i32 0, i64 0
  %rtx71 = bitcast %union.rtunion_def* %arrayidx70 to %struct.rtx_def**
  %44 = load %struct.rtx_def*, %struct.rtx_def** %rtx71, align 8
  store %struct.rtx_def* %44, %struct.rtx_def** %term, align 8
  %45 = load %struct.rtx_def*, %struct.rtx_def** %term, align 8
  %46 = bitcast %struct.rtx_def* %45 to i32*
  %bf.load72 = load i32, i32* %46, align 8
  %bf.clear73 = and i32 %bf.load72, 65535
  %cmp74 = icmp eq i32 %bf.clear73, 75
  br i1 %cmp74, label %land.lhs.true.75, label %if.end.86

land.lhs.true.75:                                 ; preds = %if.end.65
  %47 = load %struct.rtx_def*, %struct.rtx_def** %term, align 8
  %fld76 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %47, i32 0, i32 1
  %arrayidx77 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld76, i32 0, i64 1
  %rtx78 = bitcast %union.rtunion_def* %arrayidx77 to %struct.rtx_def**
  %48 = load %struct.rtx_def*, %struct.rtx_def** %rtx78, align 8
  %49 = bitcast %struct.rtx_def* %48 to i32*
  %bf.load79 = load i32, i32* %49, align 8
  %bf.clear80 = and i32 %bf.load79, 65535
  %cmp81 = icmp eq i32 %bf.clear80, 54
  br i1 %cmp81, label %if.then.82, label %if.end.86

if.then.82:                                       ; preds = %land.lhs.true.75
  %50 = load %struct.rtx_def*, %struct.rtx_def** %term, align 8
  %fld83 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %50, i32 0, i32 1
  %arrayidx84 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld83, i32 0, i64 0
  %rtx85 = bitcast %union.rtunion_def* %arrayidx84 to %struct.rtx_def**
  %51 = load %struct.rtx_def*, %struct.rtx_def** %rtx85, align 8
  store %struct.rtx_def* %51, %struct.rtx_def** %term, align 8
  br label %if.end.86

if.end.86:                                        ; preds = %if.then.82, %land.lhs.true.75, %if.end.65
  %52 = load %struct.rtx_def*, %struct.rtx_def** %term, align 8
  %53 = bitcast %struct.rtx_def* %52 to i32*
  %bf.load87 = load i32, i32* %53, align 8
  %bf.clear88 = and i32 %bf.load87, 65535
  %cmp89 = icmp ne i32 %bf.clear88, 42
  br i1 %cmp89, label %if.then.101, label %lor.lhs.false.90

lor.lhs.false.90:                                 ; preds = %if.end.86
  %54 = load %struct.rtx_def*, %struct.rtx_def** %term, align 8
  %fld91 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %54, i32 0, i32 1
  %arrayidx92 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld91, i32 0, i64 0
  %rtvec93 = bitcast %union.rtunion_def* %arrayidx92 to %struct.rtvec_def**
  %55 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec93, align 8
  %num_elem94 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %55, i32 0, i32 0
  %56 = load i32, i32* %num_elem94, align 4
  %cmp95 = icmp ne i32 %56, 1
  br i1 %cmp95, label %if.then.101, label %lor.lhs.false.96

lor.lhs.false.96:                                 ; preds = %lor.lhs.false.90
  %57 = load %struct.rtx_def*, %struct.rtx_def** %term, align 8
  %fld97 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %57, i32 0, i32 1
  %arrayidx98 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld97, i32 0, i64 1
  %rtint99 = bitcast %union.rtunion_def* %arrayidx98 to i32*
  %58 = load i32, i32* %rtint99, align 4
  %cmp100 = icmp ne i32 %58, 7
  br i1 %cmp100, label %if.then.101, label %if.end.102

if.then.101:                                      ; preds = %lor.lhs.false.96, %lor.lhs.false.90, %if.end.86
  %59 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  store %struct.rtx_def* %59, %struct.rtx_def** %retval
  br label %return

if.end.102:                                       ; preds = %lor.lhs.false.96
  %60 = load %struct.rtx_def*, %struct.rtx_def** %term, align 8
  %fld103 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %60, i32 0, i32 1
  %arrayidx104 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld103, i32 0, i64 0
  %rtvec105 = bitcast %union.rtunion_def* %arrayidx104 to %struct.rtvec_def**
  %61 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec105, align 8
  %elem106 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %61, i32 0, i32 1
  %arrayidx107 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem106, i32 0, i64 0
  %62 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx107, align 8
  store %struct.rtx_def* %62, %struct.rtx_def** %term, align 8
  %63 = load %struct.rtx_def*, %struct.rtx_def** %term, align 8
  %64 = bitcast %struct.rtx_def* %63 to i32*
  %bf.load108 = load i32, i32* %64, align 8
  %bf.clear109 = and i32 %bf.load108, 65535
  %cmp110 = icmp ne i32 %bf.clear109, 68
  br i1 %cmp110, label %land.lhs.true.111, label %if.end.116

land.lhs.true.111:                                ; preds = %if.end.102
  %65 = load %struct.rtx_def*, %struct.rtx_def** %term, align 8
  %66 = bitcast %struct.rtx_def* %65 to i32*
  %bf.load112 = load i32, i32* %66, align 8
  %bf.clear113 = and i32 %bf.load112, 65535
  %cmp114 = icmp ne i32 %bf.clear113, 67
  br i1 %cmp114, label %if.then.115, label %if.end.116

if.then.115:                                      ; preds = %land.lhs.true.111
  %67 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  store %struct.rtx_def* %67, %struct.rtx_def** %retval
  br label %return

if.end.116:                                       ; preds = %land.lhs.true.111, %if.end.102
  %68 = load %struct.rtx_def*, %struct.rtx_def** %term, align 8
  store %struct.rtx_def* %68, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end.116, %if.then.115, %if.then.101, %if.then.64, %if.end.47, %if.then.46, %if.then.33, %if.then.1
  %69 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %69
}

; Function Attrs: nounwind uwtable
define i32 @legitimate_pic_address_disp_p(%struct.rtx_def* %disp) #1 {
entry:
  %retval = alloca i32, align 4
  %disp.addr = alloca %struct.rtx_def*, align 8
  %x = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %disp, %struct.rtx_def** %disp.addr, align 8
  %0 = load i32, i32* @target_flags, align 4
  %and = and i32 %0, 33554432
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end.38

if.then:                                          ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %disp.addr, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %x, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %disp.addr, align 8
  %3 = bitcast %struct.rtx_def* %2 to i32*
  %bf.load = load i32, i32* %3, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 58
  br i1 %cmp, label %if.then.1, label %if.end

if.then.1:                                        ; preds = %if.then
  %4 = load %struct.rtx_def*, %struct.rtx_def** %disp.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %5 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %x, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.1, %if.then
  %6 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %7 = bitcast %struct.rtx_def* %6 to i32*
  %bf.load2 = load i32, i32* %7, align 8
  %bf.clear3 = and i32 %bf.load2, 65535
  %cmp4 = icmp eq i32 %bf.clear3, 75
  br i1 %cmp4, label %land.lhs.true, label %if.end.32

land.lhs.true:                                    ; preds = %if.end
  %8 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld5 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1
  %arrayidx6 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld5, i32 0, i64 1
  %rtx7 = bitcast %union.rtunion_def* %arrayidx6 to %struct.rtx_def**
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rtx7, align 8
  %10 = bitcast %struct.rtx_def* %9 to i32*
  %bf.load8 = load i32, i32* %10, align 8
  %bf.clear9 = and i32 %bf.load8, 65535
  %cmp10 = icmp eq i32 %bf.clear9, 54
  br i1 %cmp10, label %land.lhs.true.11, label %if.end.32

land.lhs.true.11:                                 ; preds = %land.lhs.true
  %11 = load i32, i32* @ix86_cmodel, align 4
  %cmp12 = icmp eq i32 %11, 5
  br i1 %cmp12, label %land.lhs.true.13, label %if.end.32

land.lhs.true.13:                                 ; preds = %land.lhs.true.11
  %12 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld14 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1
  %arrayidx15 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld14, i32 0, i64 1
  %rtx16 = bitcast %union.rtunion_def* %arrayidx15 to %struct.rtx_def**
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rtx16, align 8
  %fld17 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1
  %arrayidx18 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld17, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx18 to i64*
  %14 = load i64, i64* %rtwint, align 8
  %cmp19 = icmp slt i64 %14, 1073741824
  br i1 %cmp19, label %land.lhs.true.20, label %if.end.32

land.lhs.true.20:                                 ; preds = %land.lhs.true.13
  %15 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld21 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1
  %arrayidx22 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld21, i32 0, i64 1
  %rtx23 = bitcast %union.rtunion_def* %arrayidx22 to %struct.rtx_def**
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rtx23, align 8
  %fld24 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1
  %arrayidx25 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld24, i32 0, i64 0
  %rtwint26 = bitcast %union.rtunion_def* %arrayidx25 to i64*
  %17 = load i64, i64* %rtwint26, align 8
  %cmp27 = icmp sgt i64 %17, -1073741824
  br i1 %cmp27, label %if.then.28, label %if.end.32

if.then.28:                                       ; preds = %land.lhs.true.20
  %18 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld29 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1
  %arrayidx30 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld29, i32 0, i64 0
  %rtx31 = bitcast %union.rtunion_def* %arrayidx30 to %struct.rtx_def**
  %19 = load %struct.rtx_def*, %struct.rtx_def** %rtx31, align 8
  store %struct.rtx_def* %19, %struct.rtx_def** %x, align 8
  br label %if.end.32

if.end.32:                                        ; preds = %if.then.28, %land.lhs.true.20, %land.lhs.true.13, %land.lhs.true.11, %land.lhs.true, %if.end
  %20 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %21 = load i32, i32* @target_flags, align 4
  %and33 = and i32 %21, 33554432
  %tobool34 = icmp ne i32 %and33, 0
  %cond = select i1 %tobool34, i32 5, i32 4
  %call = call i32 @local_symbolic_operand(%struct.rtx_def* %20, i32 %cond)
  %tobool35 = icmp ne i32 %call, 0
  br i1 %tobool35, label %if.then.36, label %if.end.37

if.then.36:                                       ; preds = %if.end.32
  store i32 1, i32* %retval
  br label %return

if.end.37:                                        ; preds = %if.end.32
  br label %if.end.38

if.end.38:                                        ; preds = %if.end.37, %entry
  %22 = load %struct.rtx_def*, %struct.rtx_def** %disp.addr, align 8
  %23 = bitcast %struct.rtx_def* %22 to i32*
  %bf.load39 = load i32, i32* %23, align 8
  %bf.clear40 = and i32 %bf.load39, 65535
  %cmp41 = icmp ne i32 %bf.clear40, 58
  br i1 %cmp41, label %if.then.42, label %if.end.43

if.then.42:                                       ; preds = %if.end.38
  store i32 0, i32* %retval
  br label %return

if.end.43:                                        ; preds = %if.end.38
  %24 = load %struct.rtx_def*, %struct.rtx_def** %disp.addr, align 8
  %fld44 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1
  %arrayidx45 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld44, i32 0, i64 0
  %rtx46 = bitcast %union.rtunion_def* %arrayidx45 to %struct.rtx_def**
  %25 = load %struct.rtx_def*, %struct.rtx_def** %rtx46, align 8
  store %struct.rtx_def* %25, %struct.rtx_def** %disp.addr, align 8
  %26 = load i32, i32* @target_flags, align 4
  %and47 = and i32 %26, 33554432
  %tobool48 = icmp ne i32 %and47, 0
  br i1 %tobool48, label %if.then.49, label %if.end.80

if.then.49:                                       ; preds = %if.end.43
  %27 = load %struct.rtx_def*, %struct.rtx_def** %disp.addr, align 8
  %28 = bitcast %struct.rtx_def* %27 to i32*
  %bf.load50 = load i32, i32* %28, align 8
  %bf.clear51 = and i32 %bf.load50, 65535
  %cmp52 = icmp ne i32 %bf.clear51, 42
  br i1 %cmp52, label %if.then.60, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then.49
  %29 = load %struct.rtx_def*, %struct.rtx_def** %disp.addr, align 8
  %fld53 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %29, i32 0, i32 1
  %arrayidx54 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld53, i32 0, i64 0
  %rtvec = bitcast %union.rtunion_def* %arrayidx54 to %struct.rtvec_def**
  %30 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec, align 8
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %30, i32 0, i32 0
  %31 = load i32, i32* %num_elem, align 4
  %cmp55 = icmp ne i32 %31, 1
  br i1 %cmp55, label %if.then.60, label %lor.lhs.false.56

lor.lhs.false.56:                                 ; preds = %lor.lhs.false
  %32 = load %struct.rtx_def*, %struct.rtx_def** %disp.addr, align 8
  %fld57 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %32, i32 0, i32 1
  %arrayidx58 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld57, i32 0, i64 1
  %rtint = bitcast %union.rtunion_def* %arrayidx58 to i32*
  %33 = load i32, i32* %rtint, align 4
  %cmp59 = icmp ne i32 %33, 15
  br i1 %cmp59, label %if.then.60, label %if.end.61

if.then.60:                                       ; preds = %lor.lhs.false.56, %lor.lhs.false, %if.then.49
  store i32 0, i32* %retval
  br label %return

if.end.61:                                        ; preds = %lor.lhs.false.56
  %34 = load %struct.rtx_def*, %struct.rtx_def** %disp.addr, align 8
  %fld62 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %34, i32 0, i32 1
  %arrayidx63 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld62, i32 0, i64 0
  %rtvec64 = bitcast %union.rtunion_def* %arrayidx63 to %struct.rtvec_def**
  %35 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec64, align 8
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %35, i32 0, i32 1
  %arrayidx65 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i32 0, i64 0
  %36 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx65, align 8
  %37 = bitcast %struct.rtx_def* %36 to i32*
  %bf.load66 = load i32, i32* %37, align 8
  %bf.clear67 = and i32 %bf.load66, 65535
  %cmp68 = icmp ne i32 %bf.clear67, 68
  br i1 %cmp68, label %land.lhs.true.69, label %if.end.79

land.lhs.true.69:                                 ; preds = %if.end.61
  %38 = load %struct.rtx_def*, %struct.rtx_def** %disp.addr, align 8
  %fld70 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %38, i32 0, i32 1
  %arrayidx71 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld70, i32 0, i64 0
  %rtvec72 = bitcast %union.rtunion_def* %arrayidx71 to %struct.rtvec_def**
  %39 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec72, align 8
  %elem73 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %39, i32 0, i32 1
  %arrayidx74 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem73, i32 0, i64 0
  %40 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx74, align 8
  %41 = bitcast %struct.rtx_def* %40 to i32*
  %bf.load75 = load i32, i32* %41, align 8
  %bf.clear76 = and i32 %bf.load75, 65535
  %cmp77 = icmp ne i32 %bf.clear76, 67
  br i1 %cmp77, label %if.then.78, label %if.end.79

if.then.78:                                       ; preds = %land.lhs.true.69
  store i32 0, i32* %retval
  br label %return

if.end.79:                                        ; preds = %land.lhs.true.69, %if.end.61
  store i32 1, i32* %retval
  br label %return

if.end.80:                                        ; preds = %if.end.43
  %42 = load %struct.rtx_def*, %struct.rtx_def** %disp.addr, align 8
  %43 = bitcast %struct.rtx_def* %42 to i32*
  %bf.load81 = load i32, i32* %43, align 8
  %bf.clear82 = and i32 %bf.load81, 65535
  %cmp83 = icmp eq i32 %bf.clear82, 75
  br i1 %cmp83, label %if.then.84, label %if.end.96

if.then.84:                                       ; preds = %if.end.80
  %44 = load %struct.rtx_def*, %struct.rtx_def** %disp.addr, align 8
  %fld85 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %44, i32 0, i32 1
  %arrayidx86 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld85, i32 0, i64 1
  %rtx87 = bitcast %union.rtunion_def* %arrayidx86 to %struct.rtx_def**
  %45 = load %struct.rtx_def*, %struct.rtx_def** %rtx87, align 8
  %46 = bitcast %struct.rtx_def* %45 to i32*
  %bf.load88 = load i32, i32* %46, align 8
  %bf.clear89 = and i32 %bf.load88, 65535
  %cmp90 = icmp ne i32 %bf.clear89, 54
  br i1 %cmp90, label %if.then.91, label %if.end.92

if.then.91:                                       ; preds = %if.then.84
  store i32 0, i32* %retval
  br label %return

if.end.92:                                        ; preds = %if.then.84
  %47 = load %struct.rtx_def*, %struct.rtx_def** %disp.addr, align 8
  %fld93 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %47, i32 0, i32 1
  %arrayidx94 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld93, i32 0, i64 0
  %rtx95 = bitcast %union.rtunion_def* %arrayidx94 to %struct.rtx_def**
  %48 = load %struct.rtx_def*, %struct.rtx_def** %rtx95, align 8
  store %struct.rtx_def* %48, %struct.rtx_def** %disp.addr, align 8
  br label %if.end.96

if.end.96:                                        ; preds = %if.end.92, %if.end.80
  %49 = load %struct.rtx_def*, %struct.rtx_def** %disp.addr, align 8
  %50 = bitcast %struct.rtx_def* %49 to i32*
  %bf.load97 = load i32, i32* %50, align 8
  %bf.clear98 = and i32 %bf.load97, 65535
  %cmp99 = icmp ne i32 %bf.clear98, 42
  br i1 %cmp99, label %if.then.106, label %lor.lhs.false.100

lor.lhs.false.100:                                ; preds = %if.end.96
  %51 = load %struct.rtx_def*, %struct.rtx_def** %disp.addr, align 8
  %fld101 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %51, i32 0, i32 1
  %arrayidx102 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld101, i32 0, i64 0
  %rtvec103 = bitcast %union.rtunion_def* %arrayidx102 to %struct.rtvec_def**
  %52 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec103, align 8
  %num_elem104 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %52, i32 0, i32 0
  %53 = load i32, i32* %num_elem104, align 4
  %cmp105 = icmp ne i32 %53, 1
  br i1 %cmp105, label %if.then.106, label %if.end.107

if.then.106:                                      ; preds = %lor.lhs.false.100, %if.end.96
  store i32 0, i32* %retval
  br label %return

if.end.107:                                       ; preds = %lor.lhs.false.100
  %54 = load %struct.rtx_def*, %struct.rtx_def** %disp.addr, align 8
  %fld108 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %54, i32 0, i32 1
  %arrayidx109 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld108, i32 0, i64 1
  %rtint110 = bitcast %union.rtunion_def* %arrayidx109 to i32*
  %55 = load i32, i32* %rtint110, align 4
  switch i32 %55, label %sw.epilog [
    i32 6, label %sw.bb
    i32 7, label %sw.bb.119
  ]

sw.bb:                                            ; preds = %if.end.107
  %56 = load %struct.rtx_def*, %struct.rtx_def** %disp.addr, align 8
  %fld111 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %56, i32 0, i32 1
  %arrayidx112 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld111, i32 0, i64 0
  %rtvec113 = bitcast %union.rtunion_def* %arrayidx112 to %struct.rtvec_def**
  %57 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec113, align 8
  %elem114 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %57, i32 0, i32 1
  %arrayidx115 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem114, i32 0, i64 0
  %58 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx115, align 8
  %59 = bitcast %struct.rtx_def* %58 to i32*
  %bf.load116 = load i32, i32* %59, align 8
  %bf.clear117 = and i32 %bf.load116, 65535
  %cmp118 = icmp eq i32 %bf.clear117, 68
  %conv = zext i1 %cmp118 to i32
  store i32 %conv, i32* %retval
  br label %return

sw.bb.119:                                        ; preds = %if.end.107
  %60 = load %struct.rtx_def*, %struct.rtx_def** %disp.addr, align 8
  %fld120 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %60, i32 0, i32 1
  %arrayidx121 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld120, i32 0, i64 0
  %rtvec122 = bitcast %union.rtunion_def* %arrayidx121 to %struct.rtvec_def**
  %61 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec122, align 8
  %elem123 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %61, i32 0, i32 1
  %arrayidx124 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem123, i32 0, i64 0
  %62 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx124, align 8
  %63 = load i32, i32* @target_flags, align 4
  %and125 = and i32 %63, 33554432
  %tobool126 = icmp ne i32 %and125, 0
  %cond127 = select i1 %tobool126, i32 5, i32 4
  %call128 = call i32 @local_symbolic_operand(%struct.rtx_def* %62, i32 %cond127)
  store i32 %call128, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %if.end.107
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %sw.epilog, %sw.bb.119, %sw.bb, %if.then.106, %if.then.91, %if.end.79, %if.then.78, %if.then.60, %if.then.42, %if.then.36
  %64 = load i32, i32* %retval
  ret i32 %64
}

; Function Attrs: nounwind uwtable
define internal i32 @local_symbolic_operand(%struct.rtx_def* %op, i32 %mode) #1 {
entry:
  %retval = alloca i32, align 4
  %op.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  store %struct.rtx_def* %op, %struct.rtx_def** %op.addr, align 8
  store i32 %mode, i32* %mode.addr, align 4
  %0 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 67
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %3 = bitcast %struct.rtx_def* %2 to i32*
  %bf.load1 = load i32, i32* %3, align 8
  %bf.clear2 = and i32 %bf.load1, 65535
  %cmp3 = icmp eq i32 %bf.clear2, 58
  br i1 %cmp3, label %land.lhs.true, label %if.end.24

land.lhs.true:                                    ; preds = %if.end
  %4 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %5 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %6 = bitcast %struct.rtx_def* %5 to i32*
  %bf.load4 = load i32, i32* %6, align 8
  %bf.clear5 = and i32 %bf.load4, 65535
  %cmp6 = icmp eq i32 %bf.clear5, 75
  br i1 %cmp6, label %land.lhs.true.7, label %if.end.24

land.lhs.true.7:                                  ; preds = %land.lhs.true
  %7 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %fld8 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1
  %arrayidx9 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld8, i32 0, i64 0
  %rtx10 = bitcast %union.rtunion_def* %arrayidx9 to %struct.rtx_def**
  %8 = load %struct.rtx_def*, %struct.rtx_def** %rtx10, align 8
  %fld11 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1
  %arrayidx12 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld11, i32 0, i64 1
  %rtx13 = bitcast %union.rtunion_def* %arrayidx12 to %struct.rtx_def**
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rtx13, align 8
  %10 = bitcast %struct.rtx_def* %9 to i32*
  %bf.load14 = load i32, i32* %10, align 8
  %bf.clear15 = and i32 %bf.load14, 65535
  %cmp16 = icmp eq i32 %bf.clear15, 54
  br i1 %cmp16, label %if.then.17, label %if.end.24

if.then.17:                                       ; preds = %land.lhs.true.7
  %11 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %fld18 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1
  %arrayidx19 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld18, i32 0, i64 0
  %rtx20 = bitcast %union.rtunion_def* %arrayidx19 to %struct.rtx_def**
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rtx20, align 8
  %fld21 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1
  %arrayidx22 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld21, i32 0, i64 0
  %rtx23 = bitcast %union.rtunion_def* %arrayidx22 to %struct.rtx_def**
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rtx23, align 8
  store %struct.rtx_def* %13, %struct.rtx_def** %op.addr, align 8
  br label %if.end.24

if.end.24:                                        ; preds = %if.then.17, %land.lhs.true.7, %land.lhs.true, %if.end
  %14 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %15 = bitcast %struct.rtx_def* %14 to i32*
  %bf.load25 = load i32, i32* %15, align 8
  %bf.clear26 = and i32 %bf.load25, 65535
  %cmp27 = icmp ne i32 %bf.clear26, 68
  br i1 %cmp27, label %if.then.28, label %if.end.29

if.then.28:                                       ; preds = %if.end.24
  store i32 0, i32* %retval
  br label %return

if.end.29:                                        ; preds = %if.end.24
  %16 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %17 = bitcast %struct.rtx_def* %16 to i32*
  %bf.load30 = load i32, i32* %17, align 8
  %bf.lshr = lshr i32 %bf.load30, 26
  %bf.clear31 = and i32 %bf.lshr, 1
  %tobool = icmp ne i32 %bf.clear31, 0
  br i1 %tobool, label %if.then.36, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.29
  %18 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %19 = bitcast %struct.rtx_def* %18 to i32*
  %bf.load32 = load i32, i32* %19, align 8
  %bf.lshr33 = lshr i32 %bf.load32, 27
  %bf.clear34 = and i32 %bf.lshr33, 1
  %tobool35 = icmp ne i32 %bf.clear34, 0
  br i1 %tobool35, label %if.then.36, label %if.end.37

if.then.36:                                       ; preds = %lor.lhs.false, %if.end.29
  store i32 1, i32* %retval
  br label %return

if.end.37:                                        ; preds = %lor.lhs.false
  %20 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8
  %fld38 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1
  %arrayidx39 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld38, i32 0, i64 0
  %rtstr = bitcast %union.rtunion_def* %arrayidx39 to i8**
  %21 = load i8*, i8** %rtstr, align 8
  %22 = load i32, i32* @internal_label_prefix_len, align 4
  %conv = sext i32 %22 to i64
  %call = call i32 @strncmp(i8* %21, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @internal_label_prefix, i32 0, i32 0), i64 %conv) #8
  %cmp40 = icmp eq i32 %call, 0
  br i1 %cmp40, label %if.then.42, label %if.end.43

if.then.42:                                       ; preds = %if.end.37
  store i32 1, i32* %retval
  br label %return

if.end.43:                                        ; preds = %if.end.37
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.43, %if.then.42, %if.then.36, %if.then.28, %if.then
  %23 = load i32, i32* %retval
  ret i32 %23
}

; Function Attrs: nounwind uwtable
define i32 @legitimate_address_p(i32 %mode, %struct.rtx_def* %addr, i32 %strict) #1 {
entry:
  %retval = alloca i32, align 4
  %mode.addr = alloca i32, align 4
  %addr.addr = alloca %struct.rtx_def*, align 8
  %strict.addr = alloca i32, align 4
  %parts = alloca %struct.ix86_address, align 8
  %base = alloca %struct.rtx_def*, align 8
  %index = alloca %struct.rtx_def*, align 8
  %disp = alloca %struct.rtx_def*, align 8
  %scale = alloca i64, align 8
  %reason = alloca i8*, align 8
  %reason_rtx = alloca %struct.rtx_def*, align 8
  store i32 %mode, i32* %mode.addr, align 4
  store %struct.rtx_def* %addr, %struct.rtx_def** %addr.addr, align 8
  store i32 %strict, i32* %strict.addr, align 4
  store i8* null, i8** %reason, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %reason_rtx, align 8
  %0 = load i8*, i8** @ix86_debug_addr_string, align 8
  %cmp = icmp ne i8* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %2 = load i32, i32* %mode.addr, align 4
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds [59 x i8*], [59 x i8*]* @mode_name, i32 0, i64 %idxprom
  %3 = load i8*, i8** %arrayidx, align 8
  %4 = load i32, i32* %strict.addr, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.83, i32 0, i32 0), i8* %3, i32 %4)
  %5 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8
  call void @debug_rtx(%struct.rtx_def* %5)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8
  %call1 = call i32 @ix86_decompose_address(%struct.rtx_def* %6, %struct.ix86_address* %parts)
  %cmp2 = icmp sle i32 %call1, 0
  br i1 %cmp2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  store i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.84, i32 0, i32 0), i8** %reason, align 8
  br label %report_error

if.end.4:                                         ; preds = %if.end
  %base5 = getelementptr inbounds %struct.ix86_address, %struct.ix86_address* %parts, i32 0, i32 0
  %7 = load %struct.rtx_def*, %struct.rtx_def** %base5, align 8
  store %struct.rtx_def* %7, %struct.rtx_def** %base, align 8
  %index6 = getelementptr inbounds %struct.ix86_address, %struct.ix86_address* %parts, i32 0, i32 1
  %8 = load %struct.rtx_def*, %struct.rtx_def** %index6, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %index, align 8
  %disp7 = getelementptr inbounds %struct.ix86_address, %struct.ix86_address* %parts, i32 0, i32 2
  %9 = load %struct.rtx_def*, %struct.rtx_def** %disp7, align 8
  store %struct.rtx_def* %9, %struct.rtx_def** %disp, align 8
  %scale8 = getelementptr inbounds %struct.ix86_address, %struct.ix86_address* %parts, i32 0, i32 3
  %10 = load i64, i64* %scale8, align 8
  store i64 %10, i64* %scale, align 8
  %11 = load %struct.rtx_def*, %struct.rtx_def** %base, align 8
  %tobool = icmp ne %struct.rtx_def* %11, null
  br i1 %tobool, label %if.then.9, label %if.end.107

if.then.9:                                        ; preds = %if.end.4
  %12 = load %struct.rtx_def*, %struct.rtx_def** %base, align 8
  store %struct.rtx_def* %12, %struct.rtx_def** %reason_rtx, align 8
  %13 = load %struct.rtx_def*, %struct.rtx_def** %base, align 8
  %14 = bitcast %struct.rtx_def* %13 to i32*
  %bf.load = load i32, i32* %14, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp10 = icmp ne i32 %bf.clear, 61
  br i1 %cmp10, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %if.then.9
  store i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.85, i32 0, i32 0), i8** %reason, align 8
  br label %report_error

if.end.12:                                        ; preds = %if.then.9
  %15 = load %struct.rtx_def*, %struct.rtx_def** %base, align 8
  %16 = bitcast %struct.rtx_def* %15 to i32*
  %bf.load13 = load i32, i32* %16, align 8
  %bf.lshr = lshr i32 %bf.load13, 16
  %bf.clear14 = and i32 %bf.lshr, 255
  %17 = load i32, i32* @target_flags, align 4
  %and = and i32 %17, 33554432
  %tobool15 = icmp ne i32 %and, 0
  %cond = select i1 %tobool15, i32 5, i32 4
  %cmp16 = icmp ne i32 %bf.clear14, %cond
  br i1 %cmp16, label %if.then.17, label %if.end.18

if.then.17:                                       ; preds = %if.end.12
  store i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.86, i32 0, i32 0), i8** %reason, align 8
  br label %report_error

if.end.18:                                        ; preds = %if.end.12
  %18 = load i32, i32* %strict.addr, align 4
  %tobool19 = icmp ne i32 %18, 0
  br i1 %tobool19, label %land.lhs.true, label %lor.lhs.false.67

land.lhs.true:                                    ; preds = %if.end.18
  %19 = load %struct.rtx_def*, %struct.rtx_def** %base, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1
  %arrayidx20 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx20 to i32*
  %20 = load i32, i32* %rtuint, align 4
  %cmp21 = icmp ule i32 %20, 7
  br i1 %cmp21, label %lor.lhs.false.67, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %21 = load %struct.rtx_def*, %struct.rtx_def** %base, align 8
  %fld22 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1
  %arrayidx23 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld22, i32 0, i64 0
  %rtuint24 = bitcast %union.rtunion_def* %arrayidx23 to i32*
  %22 = load i32, i32* %rtuint24, align 4
  %cmp25 = icmp eq i32 %22, 16
  br i1 %cmp25, label %lor.lhs.false.67, label %lor.lhs.false.26

lor.lhs.false.26:                                 ; preds = %lor.lhs.false
  %23 = load %struct.rtx_def*, %struct.rtx_def** %base, align 8
  %fld27 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1
  %arrayidx28 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld27, i32 0, i64 0
  %rtuint29 = bitcast %union.rtunion_def* %arrayidx28 to i32*
  %24 = load i32, i32* %rtuint29, align 4
  %cmp30 = icmp eq i32 %24, 20
  br i1 %cmp30, label %lor.lhs.false.67, label %lor.lhs.false.31

lor.lhs.false.31:                                 ; preds = %lor.lhs.false.26
  %25 = load %struct.rtx_def*, %struct.rtx_def** %base, align 8
  %fld32 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1
  %arrayidx33 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld32, i32 0, i64 0
  %rtuint34 = bitcast %union.rtunion_def* %arrayidx33 to i32*
  %26 = load i32, i32* %rtuint34, align 4
  %cmp35 = icmp uge i32 %26, 37
  br i1 %cmp35, label %land.lhs.true.36, label %lor.lhs.false.41

land.lhs.true.36:                                 ; preds = %lor.lhs.false.31
  %27 = load %struct.rtx_def*, %struct.rtx_def** %base, align 8
  %fld37 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1
  %arrayidx38 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld37, i32 0, i64 0
  %rtuint39 = bitcast %union.rtunion_def* %arrayidx38 to i32*
  %28 = load i32, i32* %rtuint39, align 4
  %cmp40 = icmp ule i32 %28, 44
  br i1 %cmp40, label %lor.lhs.false.67, label %lor.lhs.false.41

lor.lhs.false.41:                                 ; preds = %land.lhs.true.36, %lor.lhs.false.31
  %29 = load %struct.rtx_def*, %struct.rtx_def** %base, align 8
  %fld42 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %29, i32 0, i32 1
  %arrayidx43 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld42, i32 0, i64 0
  %rtuint44 = bitcast %union.rtunion_def* %arrayidx43 to i32*
  %30 = load i32, i32* %rtuint44, align 4
  %idxprom45 = zext i32 %30 to i64
  %31 = load i16*, i16** @reg_renumber, align 8
  %arrayidx46 = getelementptr inbounds i16, i16* %31, i64 %idxprom45
  %32 = load i16, i16* %arrayidx46, align 2
  %conv = sext i16 %32 to i32
  %cmp47 = icmp uge i32 %conv, 37
  br i1 %cmp47, label %land.lhs.true.49, label %lor.lhs.false.58

land.lhs.true.49:                                 ; preds = %lor.lhs.false.41
  %33 = load %struct.rtx_def*, %struct.rtx_def** %base, align 8
  %fld50 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1
  %arrayidx51 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld50, i32 0, i64 0
  %rtuint52 = bitcast %union.rtunion_def* %arrayidx51 to i32*
  %34 = load i32, i32* %rtuint52, align 4
  %idxprom53 = zext i32 %34 to i64
  %35 = load i16*, i16** @reg_renumber, align 8
  %arrayidx54 = getelementptr inbounds i16, i16* %35, i64 %idxprom53
  %36 = load i16, i16* %arrayidx54, align 2
  %conv55 = sext i16 %36 to i32
  %cmp56 = icmp ule i32 %conv55, 44
  br i1 %cmp56, label %lor.lhs.false.67, label %lor.lhs.false.58

lor.lhs.false.58:                                 ; preds = %land.lhs.true.49, %lor.lhs.false.41
  %37 = load %struct.rtx_def*, %struct.rtx_def** %base, align 8
  %fld59 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %37, i32 0, i32 1
  %arrayidx60 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld59, i32 0, i64 0
  %rtuint61 = bitcast %union.rtunion_def* %arrayidx60 to i32*
  %38 = load i32, i32* %rtuint61, align 4
  %idxprom62 = zext i32 %38 to i64
  %39 = load i16*, i16** @reg_renumber, align 8
  %arrayidx63 = getelementptr inbounds i16, i16* %39, i64 %idxprom62
  %40 = load i16, i16* %arrayidx63, align 2
  %conv64 = sext i16 %40 to i32
  %cmp65 = icmp ule i32 %conv64, 7
  br i1 %cmp65, label %lor.lhs.false.67, label %if.then.105

lor.lhs.false.67:                                 ; preds = %lor.lhs.false.58, %land.lhs.true.49, %land.lhs.true.36, %lor.lhs.false.26, %lor.lhs.false, %land.lhs.true, %if.end.18
  %41 = load i32, i32* %strict.addr, align 4
  %tobool68 = icmp ne i32 %41, 0
  br i1 %tobool68, label %if.end.106, label %land.lhs.true.69

land.lhs.true.69:                                 ; preds = %lor.lhs.false.67
  %42 = load %struct.rtx_def*, %struct.rtx_def** %base, align 8
  %fld70 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %42, i32 0, i32 1
  %arrayidx71 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld70, i32 0, i64 0
  %rtuint72 = bitcast %union.rtunion_def* %arrayidx71 to i32*
  %43 = load i32, i32* %rtuint72, align 4
  %cmp73 = icmp ule i32 %43, 7
  br i1 %cmp73, label %if.end.106, label %lor.lhs.false.75

lor.lhs.false.75:                                 ; preds = %land.lhs.true.69
  %44 = load %struct.rtx_def*, %struct.rtx_def** %base, align 8
  %fld76 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %44, i32 0, i32 1
  %arrayidx77 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld76, i32 0, i64 0
  %rtuint78 = bitcast %union.rtunion_def* %arrayidx77 to i32*
  %45 = load i32, i32* %rtuint78, align 4
  %cmp79 = icmp eq i32 %45, 16
  br i1 %cmp79, label %if.end.106, label %lor.lhs.false.81

lor.lhs.false.81:                                 ; preds = %lor.lhs.false.75
  %46 = load %struct.rtx_def*, %struct.rtx_def** %base, align 8
  %fld82 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %46, i32 0, i32 1
  %arrayidx83 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld82, i32 0, i64 0
  %rtuint84 = bitcast %union.rtunion_def* %arrayidx83 to i32*
  %47 = load i32, i32* %rtuint84, align 4
  %cmp85 = icmp eq i32 %47, 20
  br i1 %cmp85, label %if.end.106, label %lor.lhs.false.87

lor.lhs.false.87:                                 ; preds = %lor.lhs.false.81
  %48 = load %struct.rtx_def*, %struct.rtx_def** %base, align 8
  %fld88 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %48, i32 0, i32 1
  %arrayidx89 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld88, i32 0, i64 0
  %rtuint90 = bitcast %union.rtunion_def* %arrayidx89 to i32*
  %49 = load i32, i32* %rtuint90, align 4
  %cmp91 = icmp uge i32 %49, 37
  br i1 %cmp91, label %land.lhs.true.93, label %lor.lhs.false.99

land.lhs.true.93:                                 ; preds = %lor.lhs.false.87
  %50 = load %struct.rtx_def*, %struct.rtx_def** %base, align 8
  %fld94 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %50, i32 0, i32 1
  %arrayidx95 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld94, i32 0, i64 0
  %rtuint96 = bitcast %union.rtunion_def* %arrayidx95 to i32*
  %51 = load i32, i32* %rtuint96, align 4
  %cmp97 = icmp ule i32 %51, 44
  br i1 %cmp97, label %if.end.106, label %lor.lhs.false.99

lor.lhs.false.99:                                 ; preds = %land.lhs.true.93, %lor.lhs.false.87
  %52 = load %struct.rtx_def*, %struct.rtx_def** %base, align 8
  %fld100 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %52, i32 0, i32 1
  %arrayidx101 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld100, i32 0, i64 0
  %rtuint102 = bitcast %union.rtunion_def* %arrayidx101 to i32*
  %53 = load i32, i32* %rtuint102, align 4
  %cmp103 = icmp uge i32 %53, 53
  br i1 %cmp103, label %if.end.106, label %if.then.105

if.then.105:                                      ; preds = %lor.lhs.false.99, %lor.lhs.false.58
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.87, i32 0, i32 0), i8** %reason, align 8
  br label %report_error

if.end.106:                                       ; preds = %lor.lhs.false.99, %land.lhs.true.93, %lor.lhs.false.81, %lor.lhs.false.75, %land.lhs.true.69, %lor.lhs.false.67
  br label %if.end.107

if.end.107:                                       ; preds = %if.end.106, %if.end.4
  %54 = load %struct.rtx_def*, %struct.rtx_def** %index, align 8
  %tobool108 = icmp ne %struct.rtx_def* %54, null
  br i1 %tobool108, label %if.then.109, label %if.end.200

if.then.109:                                      ; preds = %if.end.107
  %55 = load %struct.rtx_def*, %struct.rtx_def** %index, align 8
  store %struct.rtx_def* %55, %struct.rtx_def** %reason_rtx, align 8
  %56 = load %struct.rtx_def*, %struct.rtx_def** %index, align 8
  %57 = bitcast %struct.rtx_def* %56 to i32*
  %bf.load110 = load i32, i32* %57, align 8
  %bf.clear111 = and i32 %bf.load110, 65535
  %cmp112 = icmp ne i32 %bf.clear111, 61
  br i1 %cmp112, label %if.then.114, label %if.end.115

if.then.114:                                      ; preds = %if.then.109
  store i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.88, i32 0, i32 0), i8** %reason, align 8
  br label %report_error

if.end.115:                                       ; preds = %if.then.109
  %58 = load %struct.rtx_def*, %struct.rtx_def** %index, align 8
  %59 = bitcast %struct.rtx_def* %58 to i32*
  %bf.load116 = load i32, i32* %59, align 8
  %bf.lshr117 = lshr i32 %bf.load116, 16
  %bf.clear118 = and i32 %bf.lshr117, 255
  %60 = load i32, i32* @target_flags, align 4
  %and119 = and i32 %60, 33554432
  %tobool120 = icmp ne i32 %and119, 0
  %cond121 = select i1 %tobool120, i32 5, i32 4
  %cmp122 = icmp ne i32 %bf.clear118, %cond121
  br i1 %cmp122, label %if.then.124, label %if.end.125

if.then.124:                                      ; preds = %if.end.115
  store i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.89, i32 0, i32 0), i8** %reason, align 8
  br label %report_error

if.end.125:                                       ; preds = %if.end.115
  %61 = load i32, i32* %strict.addr, align 4
  %tobool126 = icmp ne i32 %61, 0
  br i1 %tobool126, label %land.lhs.true.127, label %lor.lhs.false.172

land.lhs.true.127:                                ; preds = %if.end.125
  %62 = load %struct.rtx_def*, %struct.rtx_def** %index, align 8
  %fld128 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %62, i32 0, i32 1
  %arrayidx129 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld128, i32 0, i64 0
  %rtuint130 = bitcast %union.rtunion_def* %arrayidx129 to i32*
  %63 = load i32, i32* %rtuint130, align 4
  %cmp131 = icmp ult i32 %63, 7
  br i1 %cmp131, label %lor.lhs.false.172, label %lor.lhs.false.133

lor.lhs.false.133:                                ; preds = %land.lhs.true.127
  %64 = load %struct.rtx_def*, %struct.rtx_def** %index, align 8
  %fld134 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %64, i32 0, i32 1
  %arrayidx135 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld134, i32 0, i64 0
  %rtuint136 = bitcast %union.rtunion_def* %arrayidx135 to i32*
  %65 = load i32, i32* %rtuint136, align 4
  %cmp137 = icmp uge i32 %65, 37
  br i1 %cmp137, label %land.lhs.true.139, label %lor.lhs.false.145

land.lhs.true.139:                                ; preds = %lor.lhs.false.133
  %66 = load %struct.rtx_def*, %struct.rtx_def** %index, align 8
  %fld140 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %66, i32 0, i32 1
  %arrayidx141 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld140, i32 0, i64 0
  %rtuint142 = bitcast %union.rtunion_def* %arrayidx141 to i32*
  %67 = load i32, i32* %rtuint142, align 4
  %cmp143 = icmp ule i32 %67, 44
  br i1 %cmp143, label %lor.lhs.false.172, label %lor.lhs.false.145

lor.lhs.false.145:                                ; preds = %land.lhs.true.139, %lor.lhs.false.133
  %68 = load %struct.rtx_def*, %struct.rtx_def** %index, align 8
  %fld146 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %68, i32 0, i32 1
  %arrayidx147 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld146, i32 0, i64 0
  %rtuint148 = bitcast %union.rtunion_def* %arrayidx147 to i32*
  %69 = load i32, i32* %rtuint148, align 4
  %idxprom149 = zext i32 %69 to i64
  %70 = load i16*, i16** @reg_renumber, align 8
  %arrayidx150 = getelementptr inbounds i16, i16* %70, i64 %idxprom149
  %71 = load i16, i16* %arrayidx150, align 2
  %conv151 = sext i16 %71 to i32
  %cmp152 = icmp uge i32 %conv151, 37
  br i1 %cmp152, label %land.lhs.true.154, label %lor.lhs.false.163

land.lhs.true.154:                                ; preds = %lor.lhs.false.145
  %72 = load %struct.rtx_def*, %struct.rtx_def** %index, align 8
  %fld155 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %72, i32 0, i32 1
  %arrayidx156 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld155, i32 0, i64 0
  %rtuint157 = bitcast %union.rtunion_def* %arrayidx156 to i32*
  %73 = load i32, i32* %rtuint157, align 4
  %idxprom158 = zext i32 %73 to i64
  %74 = load i16*, i16** @reg_renumber, align 8
  %arrayidx159 = getelementptr inbounds i16, i16* %74, i64 %idxprom158
  %75 = load i16, i16* %arrayidx159, align 2
  %conv160 = sext i16 %75 to i32
  %cmp161 = icmp ule i32 %conv160, 44
  br i1 %cmp161, label %lor.lhs.false.172, label %lor.lhs.false.163

lor.lhs.false.163:                                ; preds = %land.lhs.true.154, %lor.lhs.false.145
  %76 = load %struct.rtx_def*, %struct.rtx_def** %index, align 8
  %fld164 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %76, i32 0, i32 1
  %arrayidx165 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld164, i32 0, i64 0
  %rtuint166 = bitcast %union.rtunion_def* %arrayidx165 to i32*
  %77 = load i32, i32* %rtuint166, align 4
  %idxprom167 = zext i32 %77 to i64
  %78 = load i16*, i16** @reg_renumber, align 8
  %arrayidx168 = getelementptr inbounds i16, i16* %78, i64 %idxprom167
  %79 = load i16, i16* %arrayidx168, align 2
  %conv169 = sext i16 %79 to i32
  %cmp170 = icmp ult i32 %conv169, 7
  br i1 %cmp170, label %lor.lhs.false.172, label %if.then.198

lor.lhs.false.172:                                ; preds = %lor.lhs.false.163, %land.lhs.true.154, %land.lhs.true.139, %land.lhs.true.127, %if.end.125
  %80 = load i32, i32* %strict.addr, align 4
  %tobool173 = icmp ne i32 %80, 0
  br i1 %tobool173, label %if.end.199, label %land.lhs.true.174

land.lhs.true.174:                                ; preds = %lor.lhs.false.172
  %81 = load %struct.rtx_def*, %struct.rtx_def** %index, align 8
  %fld175 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %81, i32 0, i32 1
  %arrayidx176 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld175, i32 0, i64 0
  %rtuint177 = bitcast %union.rtunion_def* %arrayidx176 to i32*
  %82 = load i32, i32* %rtuint177, align 4
  %cmp178 = icmp ult i32 %82, 7
  br i1 %cmp178, label %if.end.199, label %lor.lhs.false.180

lor.lhs.false.180:                                ; preds = %land.lhs.true.174
  %83 = load %struct.rtx_def*, %struct.rtx_def** %index, align 8
  %fld181 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %83, i32 0, i32 1
  %arrayidx182 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld181, i32 0, i64 0
  %rtuint183 = bitcast %union.rtunion_def* %arrayidx182 to i32*
  %84 = load i32, i32* %rtuint183, align 4
  %cmp184 = icmp uge i32 %84, 37
  br i1 %cmp184, label %land.lhs.true.186, label %lor.lhs.false.192

land.lhs.true.186:                                ; preds = %lor.lhs.false.180
  %85 = load %struct.rtx_def*, %struct.rtx_def** %index, align 8
  %fld187 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %85, i32 0, i32 1
  %arrayidx188 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld187, i32 0, i64 0
  %rtuint189 = bitcast %union.rtunion_def* %arrayidx188 to i32*
  %86 = load i32, i32* %rtuint189, align 4
  %cmp190 = icmp ule i32 %86, 44
  br i1 %cmp190, label %if.end.199, label %lor.lhs.false.192

lor.lhs.false.192:                                ; preds = %land.lhs.true.186, %lor.lhs.false.180
  %87 = load %struct.rtx_def*, %struct.rtx_def** %index, align 8
  %fld193 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %87, i32 0, i32 1
  %arrayidx194 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld193, i32 0, i64 0
  %rtuint195 = bitcast %union.rtunion_def* %arrayidx194 to i32*
  %88 = load i32, i32* %rtuint195, align 4
  %cmp196 = icmp uge i32 %88, 53
  br i1 %cmp196, label %if.end.199, label %if.then.198

if.then.198:                                      ; preds = %lor.lhs.false.192, %lor.lhs.false.163
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.90, i32 0, i32 0), i8** %reason, align 8
  br label %report_error

if.end.199:                                       ; preds = %lor.lhs.false.192, %land.lhs.true.186, %land.lhs.true.174, %lor.lhs.false.172
  br label %if.end.200

if.end.200:                                       ; preds = %if.end.199, %if.end.107
  %89 = load i64, i64* %scale, align 8
  %cmp201 = icmp ne i64 %89, 1
  br i1 %cmp201, label %if.then.203, label %if.end.218

if.then.203:                                      ; preds = %if.end.200
  %90 = load i64, i64* %scale, align 8
  %call204 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %90)
  store %struct.rtx_def* %call204, %struct.rtx_def** %reason_rtx, align 8
  %91 = load %struct.rtx_def*, %struct.rtx_def** %index, align 8
  %tobool205 = icmp ne %struct.rtx_def* %91, null
  br i1 %tobool205, label %if.end.207, label %if.then.206

if.then.206:                                      ; preds = %if.then.203
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.91, i32 0, i32 0), i8** %reason, align 8
  br label %report_error

if.end.207:                                       ; preds = %if.then.203
  %92 = load i64, i64* %scale, align 8
  %cmp208 = icmp ne i64 %92, 2
  br i1 %cmp208, label %land.lhs.true.210, label %if.end.217

land.lhs.true.210:                                ; preds = %if.end.207
  %93 = load i64, i64* %scale, align 8
  %cmp211 = icmp ne i64 %93, 4
  br i1 %cmp211, label %land.lhs.true.213, label %if.end.217

land.lhs.true.213:                                ; preds = %land.lhs.true.210
  %94 = load i64, i64* %scale, align 8
  %cmp214 = icmp ne i64 %94, 8
  br i1 %cmp214, label %if.then.216, label %if.end.217

if.then.216:                                      ; preds = %land.lhs.true.213
  store i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.92, i32 0, i32 0), i8** %reason, align 8
  br label %report_error

if.end.217:                                       ; preds = %land.lhs.true.213, %land.lhs.true.210, %if.end.207
  br label %if.end.218

if.end.218:                                       ; preds = %if.end.217, %if.end.200
  %95 = load %struct.rtx_def*, %struct.rtx_def** %disp, align 8
  %tobool219 = icmp ne %struct.rtx_def* %95, null
  br i1 %tobool219, label %if.then.220, label %if.end.295

if.then.220:                                      ; preds = %if.end.218
  %96 = load %struct.rtx_def*, %struct.rtx_def** %disp, align 8
  store %struct.rtx_def* %96, %struct.rtx_def** %reason_rtx, align 8
  %97 = load %struct.rtx_def*, %struct.rtx_def** %disp, align 8
  %98 = bitcast %struct.rtx_def* %97 to i32*
  %bf.load221 = load i32, i32* %98, align 8
  %bf.clear222 = and i32 %bf.load221, 65535
  %cmp223 = icmp eq i32 %bf.clear222, 67
  br i1 %cmp223, label %if.end.246, label %lor.lhs.false.225

lor.lhs.false.225:                                ; preds = %if.then.220
  %99 = load %struct.rtx_def*, %struct.rtx_def** %disp, align 8
  %100 = bitcast %struct.rtx_def* %99 to i32*
  %bf.load226 = load i32, i32* %100, align 8
  %bf.clear227 = and i32 %bf.load226, 65535
  %cmp228 = icmp eq i32 %bf.clear227, 68
  br i1 %cmp228, label %if.end.246, label %lor.lhs.false.230

lor.lhs.false.230:                                ; preds = %lor.lhs.false.225
  %101 = load %struct.rtx_def*, %struct.rtx_def** %disp, align 8
  %102 = bitcast %struct.rtx_def* %101 to i32*
  %bf.load231 = load i32, i32* %102, align 8
  %bf.clear232 = and i32 %bf.load231, 65535
  %cmp233 = icmp eq i32 %bf.clear232, 54
  br i1 %cmp233, label %if.end.246, label %lor.lhs.false.235

lor.lhs.false.235:                                ; preds = %lor.lhs.false.230
  %103 = load %struct.rtx_def*, %struct.rtx_def** %disp, align 8
  %104 = bitcast %struct.rtx_def* %103 to i32*
  %bf.load236 = load i32, i32* %104, align 8
  %bf.clear237 = and i32 %bf.load236, 65535
  %cmp238 = icmp eq i32 %bf.clear237, 58
  br i1 %cmp238, label %if.end.246, label %lor.lhs.false.240

lor.lhs.false.240:                                ; preds = %lor.lhs.false.235
  %105 = load %struct.rtx_def*, %struct.rtx_def** %disp, align 8
  %106 = bitcast %struct.rtx_def* %105 to i32*
  %bf.load241 = load i32, i32* %106, align 8
  %bf.clear242 = and i32 %bf.load241, 65535
  %cmp243 = icmp eq i32 %bf.clear242, 55
  br i1 %cmp243, label %if.end.246, label %if.then.245

if.then.245:                                      ; preds = %lor.lhs.false.240
  store i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.93, i32 0, i32 0), i8** %reason, align 8
  br label %report_error

if.end.246:                                       ; preds = %lor.lhs.false.240, %lor.lhs.false.235, %lor.lhs.false.230, %lor.lhs.false.225, %if.then.220
  %107 = load i32, i32* @target_flags, align 4
  %and247 = and i32 %107, 33554432
  %tobool248 = icmp ne i32 %and247, 0
  br i1 %tobool248, label %if.then.249, label %if.else

if.then.249:                                      ; preds = %if.end.246
  %108 = load %struct.rtx_def*, %struct.rtx_def** %disp, align 8
  %call250 = call i32 @x86_64_sign_extended_value(%struct.rtx_def* %108)
  %tobool251 = icmp ne i32 %call250, 0
  br i1 %tobool251, label %if.end.253, label %if.then.252

if.then.252:                                      ; preds = %if.then.249
  store i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.94, i32 0, i32 0), i8** %reason, align 8
  br label %report_error

if.end.253:                                       ; preds = %if.then.249
  br label %if.end.260

if.else:                                          ; preds = %if.end.246
  %109 = load %struct.rtx_def*, %struct.rtx_def** %disp, align 8
  %110 = bitcast %struct.rtx_def* %109 to i32*
  %bf.load254 = load i32, i32* %110, align 8
  %bf.clear255 = and i32 %bf.load254, 65535
  %cmp256 = icmp eq i32 %bf.clear255, 55
  br i1 %cmp256, label %if.then.258, label %if.end.259

if.then.258:                                      ; preds = %if.else
  store i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.95, i32 0, i32 0), i8** %reason, align 8
  br label %report_error

if.end.259:                                       ; preds = %if.else
  br label %if.end.260

if.end.260:                                       ; preds = %if.end.259, %if.end.253
  %111 = load i32, i32* @flag_pic, align 4
  %tobool261 = icmp ne i32 %111, 0
  br i1 %tobool261, label %land.lhs.true.262, label %if.else.293

land.lhs.true.262:                                ; preds = %if.end.260
  %112 = load %struct.rtx_def*, %struct.rtx_def** %disp, align 8
  %113 = bitcast %struct.rtx_def* %112 to i32*
  %bf.load263 = load i32, i32* %113, align 8
  %bf.clear264 = and i32 %bf.load263, 65535
  %cmp265 = icmp eq i32 %bf.clear264, 68
  br i1 %cmp265, label %if.then.280, label %lor.lhs.false.267

lor.lhs.false.267:                                ; preds = %land.lhs.true.262
  %114 = load %struct.rtx_def*, %struct.rtx_def** %disp, align 8
  %115 = bitcast %struct.rtx_def* %114 to i32*
  %bf.load268 = load i32, i32* %115, align 8
  %bf.clear269 = and i32 %bf.load268, 65535
  %cmp270 = icmp eq i32 %bf.clear269, 67
  br i1 %cmp270, label %if.then.280, label %lor.lhs.false.272

lor.lhs.false.272:                                ; preds = %lor.lhs.false.267
  %116 = load %struct.rtx_def*, %struct.rtx_def** %disp, align 8
  %117 = bitcast %struct.rtx_def* %116 to i32*
  %bf.load273 = load i32, i32* %117, align 8
  %bf.clear274 = and i32 %bf.load273, 65535
  %cmp275 = icmp eq i32 %bf.clear274, 58
  br i1 %cmp275, label %land.lhs.true.277, label %if.else.293

land.lhs.true.277:                                ; preds = %lor.lhs.false.272
  %118 = load %struct.rtx_def*, %struct.rtx_def** %disp, align 8
  %call278 = call i32 @symbolic_reference_mentioned_p(%struct.rtx_def* %118)
  %tobool279 = icmp ne i32 %call278, 0
  br i1 %tobool279, label %if.then.280, label %if.else.293

if.then.280:                                      ; preds = %land.lhs.true.277, %lor.lhs.false.267, %land.lhs.true.262
  %119 = load i32, i32* @target_flags, align 4
  %and281 = and i32 %119, 33554432
  %tobool282 = icmp ne i32 %and281, 0
  br i1 %tobool282, label %land.lhs.true.283, label %if.end.288

land.lhs.true.283:                                ; preds = %if.then.280
  %120 = load %struct.rtx_def*, %struct.rtx_def** %index, align 8
  %tobool284 = icmp ne %struct.rtx_def* %120, null
  br i1 %tobool284, label %if.then.287, label %lor.lhs.false.285

lor.lhs.false.285:                                ; preds = %land.lhs.true.283
  %121 = load %struct.rtx_def*, %struct.rtx_def** %base, align 8
  %tobool286 = icmp ne %struct.rtx_def* %121, null
  br i1 %tobool286, label %if.then.287, label %if.end.288

if.then.287:                                      ; preds = %lor.lhs.false.285, %land.lhs.true.283
  store i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.96, i32 0, i32 0), i8** %reason, align 8
  br label %report_error

if.end.288:                                       ; preds = %lor.lhs.false.285, %if.then.280
  %122 = load %struct.rtx_def*, %struct.rtx_def** %disp, align 8
  %call289 = call i32 @legitimate_pic_address_disp_p(%struct.rtx_def* %122)
  %tobool290 = icmp ne i32 %call289, 0
  br i1 %tobool290, label %if.end.292, label %if.then.291

if.then.291:                                      ; preds = %if.end.288
  store i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.97, i32 0, i32 0), i8** %reason, align 8
  br label %report_error

if.end.292:                                       ; preds = %if.end.288
  br label %if.end.294

if.else.293:                                      ; preds = %land.lhs.true.277, %lor.lhs.false.272, %if.end.260
  br label %if.end.294

if.end.294:                                       ; preds = %if.else.293, %if.end.292
  br label %if.end.295

if.end.295:                                       ; preds = %if.end.294, %if.end.218
  %123 = load i8*, i8** @ix86_debug_addr_string, align 8
  %cmp296 = icmp ne i8* %123, null
  br i1 %cmp296, label %if.then.298, label %if.end.300

if.then.298:                                      ; preds = %if.end.295
  %124 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call299 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %124, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.98, i32 0, i32 0))
  br label %if.end.300

if.end.300:                                       ; preds = %if.then.298, %if.end.295
  store i32 1, i32* %retval
  br label %return

report_error:                                     ; preds = %if.then.291, %if.then.287, %if.then.258, %if.then.252, %if.then.245, %if.then.216, %if.then.206, %if.then.198, %if.then.124, %if.then.114, %if.then.105, %if.then.17, %if.then.11, %if.then.3
  %125 = load i8*, i8** @ix86_debug_addr_string, align 8
  %cmp301 = icmp ne i8* %125, null
  br i1 %cmp301, label %if.then.303, label %if.end.305

if.then.303:                                      ; preds = %report_error
  %126 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %127 = load i8*, i8** %reason, align 8
  %call304 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %126, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.99, i32 0, i32 0), i8* %127)
  %128 = load %struct.rtx_def*, %struct.rtx_def** %reason_rtx, align 8
  call void @debug_rtx(%struct.rtx_def* %128)
  br label %if.end.305

if.end.305:                                       ; preds = %if.then.303, %report_error
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.305, %if.end.300
  %129 = load i32, i32* %retval
  ret i32 %129
}

declare void @debug_rtx(%struct.rtx_def*) #0

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @legitimize_pic_address(%struct.rtx_def* %orig, %struct.rtx_def* %reg) #1 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %orig.addr = alloca %struct.rtx_def*, align 8
  %reg.addr = alloca %struct.rtx_def*, align 8
  %addr = alloca %struct.rtx_def*, align 8
  %new = alloca %struct.rtx_def*, align 8
  %base = alloca %struct.rtx_def*, align 8
  %op0 = alloca %struct.rtx_def*, align 8
  %op1 = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %orig, %struct.rtx_def** %orig.addr, align 8
  store %struct.rtx_def* %reg, %struct.rtx_def** %reg.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %orig.addr, align 8
  store %struct.rtx_def* %0, %struct.rtx_def** %addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %orig.addr, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %new, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %3 = load i32, i32* @target_flags, align 4
  %and = and i32 %3, 33554432
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, i32 5, i32 4
  %call = call i32 @local_symbolic_operand(%struct.rtx_def* %2, i32 %cond)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.then, label %if.else.21

if.then:                                          ; preds = %entry
  %4 = load i32, i32* @target_flags, align 4
  %and2 = and i32 %4, 33554432
  %tobool3 = icmp ne i32 %and2, 0
  br i1 %tobool3, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %if.then
  %5 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %new, align 8
  br label %if.end.20

if.else:                                          ; preds = %if.then
  %6 = load %struct.function*, %struct.function** @cfun, align 8
  %uses_pic_offset_table = getelementptr inbounds %struct.function, %struct.function* %6, i32 0, i32 56
  %7 = bitcast i24* %uses_pic_offset_table to i32*
  %bf.load = load i32, i32* %7, align 8
  %bf.clear = and i32 %bf.load, -2097153
  %bf.set = or i32 %bf.clear, 2097152
  store i32 %bf.set, i32* %7, align 8
  %8 = load i32, i32* @target_flags, align 4
  %and5 = and i32 %8, 33554432
  %tobool6 = icmp ne i32 %and5, 0
  %cond7 = select i1 %tobool6, i32 5, i32 4
  %9 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %call8 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %9)
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_Ei(i32 42, i32 %cond7, %struct.rtvec_def* %call8, i32 7)
  store %struct.rtx_def* %call9, %struct.rtx_def** %new, align 8
  %10 = load i32, i32* @target_flags, align 4
  %and10 = and i32 %10, 33554432
  %tobool11 = icmp ne i32 %and10, 0
  %cond12 = select i1 %tobool11, i32 5, i32 4
  %11 = load %struct.rtx_def*, %struct.rtx_def** %new, align 8
  %call13 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 58, i32 %cond12, %struct.rtx_def* %11)
  store %struct.rtx_def* %call13, %struct.rtx_def** %new, align 8
  %12 = load i32, i32* @target_flags, align 4
  %and14 = and i32 %12, 33554432
  %tobool15 = icmp ne i32 %and14, 0
  %cond16 = select i1 %tobool15, i32 5, i32 4
  %13 = load %struct.rtx_def*, %struct.rtx_def** @pic_offset_table_rtx, align 8
  %14 = load %struct.rtx_def*, %struct.rtx_def** %new, align 8
  %call17 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %cond16, %struct.rtx_def* %13, %struct.rtx_def* %14)
  store %struct.rtx_def* %call17, %struct.rtx_def** %new, align 8
  %15 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %cmp = icmp ne %struct.rtx_def* %15, null
  br i1 %cmp, label %if.then.18, label %if.end

if.then.18:                                       ; preds = %if.else
  %16 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %17 = load %struct.rtx_def*, %struct.rtx_def** %new, align 8
  %call19 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %16, %struct.rtx_def* %17)
  %18 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  store %struct.rtx_def* %18, %struct.rtx_def** %new, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.18, %if.else
  br label %if.end.20

if.end.20:                                        ; preds = %if.end, %if.then.4
  br label %if.end.267

if.else.21:                                       ; preds = %entry
  %19 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %20 = bitcast %struct.rtx_def* %19 to i32*
  %bf.load22 = load i32, i32* %20, align 8
  %bf.clear23 = and i32 %bf.load22, 65535
  %cmp24 = icmp eq i32 %bf.clear23, 68
  br i1 %cmp24, label %if.then.25, label %if.else.94

if.then.25:                                       ; preds = %if.else.21
  %21 = load i32, i32* @target_flags, align 4
  %and26 = and i32 %21, 33554432
  %tobool27 = icmp ne i32 %and26, 0
  br i1 %tobool27, label %if.then.28, label %if.else.59

if.then.28:                                       ; preds = %if.then.25
  %22 = load %struct.function*, %struct.function** @cfun, align 8
  %uses_pic_offset_table29 = getelementptr inbounds %struct.function, %struct.function* %22, i32 0, i32 56
  %23 = bitcast i24* %uses_pic_offset_table29 to i32*
  %bf.load30 = load i32, i32* %23, align 8
  %bf.clear31 = and i32 %bf.load30, -2097153
  %bf.set32 = or i32 %bf.clear31, 2097152
  store i32 %bf.set32, i32* %23, align 8
  %24 = load i32, i32* @target_flags, align 4
  %and33 = and i32 %24, 33554432
  %tobool34 = icmp ne i32 %and33, 0
  %cond35 = select i1 %tobool34, i32 5, i32 4
  %25 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %call36 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %25)
  %call37 = call %struct.rtx_def* @gen_rtx_fmt_Ei(i32 42, i32 %cond35, %struct.rtvec_def* %call36, i32 15)
  store %struct.rtx_def* %call37, %struct.rtx_def** %new, align 8
  %26 = load i32, i32* @target_flags, align 4
  %and38 = and i32 %26, 33554432
  %tobool39 = icmp ne i32 %and38, 0
  %cond40 = select i1 %tobool39, i32 5, i32 4
  %27 = load %struct.rtx_def*, %struct.rtx_def** %new, align 8
  %call41 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 58, i32 %cond40, %struct.rtx_def* %27)
  store %struct.rtx_def* %call41, %struct.rtx_def** %new, align 8
  %28 = load i32, i32* @target_flags, align 4
  %and42 = and i32 %28, 33554432
  %tobool43 = icmp ne i32 %and42, 0
  %cond44 = select i1 %tobool43, i32 5, i32 4
  %29 = load %struct.rtx_def*, %struct.rtx_def** %new, align 8
  %call45 = call %struct.rtx_def* @gen_rtx_MEM(i32 %cond44, %struct.rtx_def* %29)
  store %struct.rtx_def* %call45, %struct.rtx_def** %new, align 8
  %30 = load %struct.rtx_def*, %struct.rtx_def** %new, align 8
  %31 = bitcast %struct.rtx_def* %30 to i32*
  %bf.load46 = load i32, i32* %31, align 8
  %bf.clear47 = and i32 %bf.load46, -67108865
  %bf.set48 = or i32 %bf.clear47, 67108864
  store i32 %bf.set48, i32* %31, align 8
  %32 = load %struct.rtx_def*, %struct.rtx_def** %new, align 8
  %call49 = call i64 @ix86_GOT_alias_set()
  call void @set_mem_alias_set(%struct.rtx_def* %32, i64 %call49)
  %33 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %cmp50 = icmp eq %struct.rtx_def* %33, null
  br i1 %cmp50, label %if.then.51, label %if.end.56

if.then.51:                                       ; preds = %if.then.28
  %34 = load i32, i32* @target_flags, align 4
  %and52 = and i32 %34, 33554432
  %tobool53 = icmp ne i32 %and52, 0
  %cond54 = select i1 %tobool53, i32 5, i32 4
  %call55 = call %struct.rtx_def* @gen_reg_rtx(i32 %cond54)
  store %struct.rtx_def* %call55, %struct.rtx_def** %reg.addr, align 8
  br label %if.end.56

if.end.56:                                        ; preds = %if.then.51, %if.then.28
  %35 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %36 = load %struct.rtx_def*, %struct.rtx_def** %new, align 8
  %call57 = call %struct.rtx_def* @gen_movsi(%struct.rtx_def* %35, %struct.rtx_def* %36)
  %call58 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call57)
  %37 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  store %struct.rtx_def* %37, %struct.rtx_def** %new, align 8
  br label %if.end.93

if.else.59:                                       ; preds = %if.then.25
  %38 = load %struct.function*, %struct.function** @cfun, align 8
  %uses_pic_offset_table60 = getelementptr inbounds %struct.function, %struct.function* %38, i32 0, i32 56
  %39 = bitcast i24* %uses_pic_offset_table60 to i32*
  %bf.load61 = load i32, i32* %39, align 8
  %bf.clear62 = and i32 %bf.load61, -2097153
  %bf.set63 = or i32 %bf.clear62, 2097152
  store i32 %bf.set63, i32* %39, align 8
  %40 = load i32, i32* @target_flags, align 4
  %and64 = and i32 %40, 33554432
  %tobool65 = icmp ne i32 %and64, 0
  %cond66 = select i1 %tobool65, i32 5, i32 4
  %41 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %call67 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %41)
  %call68 = call %struct.rtx_def* @gen_rtx_fmt_Ei(i32 42, i32 %cond66, %struct.rtvec_def* %call67, i32 6)
  store %struct.rtx_def* %call68, %struct.rtx_def** %new, align 8
  %42 = load i32, i32* @target_flags, align 4
  %and69 = and i32 %42, 33554432
  %tobool70 = icmp ne i32 %and69, 0
  %cond71 = select i1 %tobool70, i32 5, i32 4
  %43 = load %struct.rtx_def*, %struct.rtx_def** %new, align 8
  %call72 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 58, i32 %cond71, %struct.rtx_def* %43)
  store %struct.rtx_def* %call72, %struct.rtx_def** %new, align 8
  %44 = load i32, i32* @target_flags, align 4
  %and73 = and i32 %44, 33554432
  %tobool74 = icmp ne i32 %and73, 0
  %cond75 = select i1 %tobool74, i32 5, i32 4
  %45 = load %struct.rtx_def*, %struct.rtx_def** @pic_offset_table_rtx, align 8
  %46 = load %struct.rtx_def*, %struct.rtx_def** %new, align 8
  %call76 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %cond75, %struct.rtx_def* %45, %struct.rtx_def* %46)
  store %struct.rtx_def* %call76, %struct.rtx_def** %new, align 8
  %47 = load i32, i32* @target_flags, align 4
  %and77 = and i32 %47, 33554432
  %tobool78 = icmp ne i32 %and77, 0
  %cond79 = select i1 %tobool78, i32 5, i32 4
  %48 = load %struct.rtx_def*, %struct.rtx_def** %new, align 8
  %call80 = call %struct.rtx_def* @gen_rtx_MEM(i32 %cond79, %struct.rtx_def* %48)
  store %struct.rtx_def* %call80, %struct.rtx_def** %new, align 8
  %49 = load %struct.rtx_def*, %struct.rtx_def** %new, align 8
  %50 = bitcast %struct.rtx_def* %49 to i32*
  %bf.load81 = load i32, i32* %50, align 8
  %bf.clear82 = and i32 %bf.load81, -67108865
  %bf.set83 = or i32 %bf.clear82, 67108864
  store i32 %bf.set83, i32* %50, align 8
  %51 = load %struct.rtx_def*, %struct.rtx_def** %new, align 8
  %call84 = call i64 @ix86_GOT_alias_set()
  call void @set_mem_alias_set(%struct.rtx_def* %51, i64 %call84)
  %52 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %cmp85 = icmp eq %struct.rtx_def* %52, null
  br i1 %cmp85, label %if.then.86, label %if.end.91

if.then.86:                                       ; preds = %if.else.59
  %53 = load i32, i32* @target_flags, align 4
  %and87 = and i32 %53, 33554432
  %tobool88 = icmp ne i32 %and87, 0
  %cond89 = select i1 %tobool88, i32 5, i32 4
  %call90 = call %struct.rtx_def* @gen_reg_rtx(i32 %cond89)
  store %struct.rtx_def* %call90, %struct.rtx_def** %reg.addr, align 8
  br label %if.end.91

if.end.91:                                        ; preds = %if.then.86, %if.else.59
  %54 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %55 = load %struct.rtx_def*, %struct.rtx_def** %new, align 8
  %call92 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %54, %struct.rtx_def* %55)
  %56 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  store %struct.rtx_def* %56, %struct.rtx_def** %new, align 8
  br label %if.end.93

if.end.93:                                        ; preds = %if.end.91, %if.end.56
  br label %if.end.266

if.else.94:                                       ; preds = %if.else.21
  %57 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %58 = bitcast %struct.rtx_def* %57 to i32*
  %bf.load95 = load i32, i32* %58, align 8
  %bf.clear96 = and i32 %bf.load95, 65535
  %cmp97 = icmp eq i32 %bf.clear96, 58
  br i1 %cmp97, label %if.then.98, label %if.end.118

if.then.98:                                       ; preds = %if.else.94
  %59 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %59, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %60 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %60, %struct.rtx_def** %addr, align 8
  %61 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %62 = bitcast %struct.rtx_def* %61 to i32*
  %bf.load99 = load i32, i32* %62, align 8
  %bf.clear100 = and i32 %bf.load99, 65535
  %cmp101 = icmp eq i32 %bf.clear100, 42
  br i1 %cmp101, label %if.then.111, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then.98
  %63 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %64 = bitcast %struct.rtx_def* %63 to i32*
  %bf.load102 = load i32, i32* %64, align 8
  %bf.clear103 = and i32 %bf.load102, 65535
  %cmp104 = icmp eq i32 %bf.clear103, 75
  br i1 %cmp104, label %land.lhs.true, label %if.end.112

land.lhs.true:                                    ; preds = %lor.lhs.false
  %65 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %fld105 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %65, i32 0, i32 1
  %arrayidx106 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld105, i32 0, i64 0
  %rtx107 = bitcast %union.rtunion_def* %arrayidx106 to %struct.rtx_def**
  %66 = load %struct.rtx_def*, %struct.rtx_def** %rtx107, align 8
  %67 = bitcast %struct.rtx_def* %66 to i32*
  %bf.load108 = load i32, i32* %67, align 8
  %bf.clear109 = and i32 %bf.load108, 65535
  %cmp110 = icmp eq i32 %bf.clear109, 42
  br i1 %cmp110, label %if.then.111, label %if.end.112

if.then.111:                                      ; preds = %land.lhs.true, %if.then.98
  %68 = load %struct.rtx_def*, %struct.rtx_def** %orig.addr, align 8
  store %struct.rtx_def* %68, %struct.rtx_def** %retval
  br label %return

if.end.112:                                       ; preds = %land.lhs.true, %lor.lhs.false
  %69 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %70 = bitcast %struct.rtx_def* %69 to i32*
  %bf.load113 = load i32, i32* %70, align 8
  %bf.clear114 = and i32 %bf.load113, 65535
  %cmp115 = icmp ne i32 %bf.clear114, 75
  br i1 %cmp115, label %if.then.116, label %if.end.117

if.then.116:                                      ; preds = %if.end.112
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 5086, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @__FUNCTION__.legitimize_pic_address, i32 0, i32 0)) #7
  unreachable

if.end.117:                                       ; preds = %if.end.112
  br label %if.end.118

if.end.118:                                       ; preds = %if.end.117, %if.else.94
  %71 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %72 = bitcast %struct.rtx_def* %71 to i32*
  %bf.load119 = load i32, i32* %72, align 8
  %bf.clear120 = and i32 %bf.load119, 65535
  %cmp121 = icmp eq i32 %bf.clear120, 75
  br i1 %cmp121, label %if.then.122, label %if.end.265

if.then.122:                                      ; preds = %if.end.118
  %73 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %fld123 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %73, i32 0, i32 1
  %arrayidx124 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld123, i32 0, i64 0
  %rtx125 = bitcast %union.rtunion_def* %arrayidx124 to %struct.rtx_def**
  %74 = load %struct.rtx_def*, %struct.rtx_def** %rtx125, align 8
  store %struct.rtx_def* %74, %struct.rtx_def** %op0, align 8
  %75 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %fld126 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %75, i32 0, i32 1
  %arrayidx127 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld126, i32 0, i64 1
  %rtx128 = bitcast %union.rtunion_def* %arrayidx127 to %struct.rtx_def**
  %76 = load %struct.rtx_def*, %struct.rtx_def** %rtx128, align 8
  store %struct.rtx_def* %76, %struct.rtx_def** %op1, align 8
  %77 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %78 = load i32, i32* @target_flags, align 4
  %and129 = and i32 %78, 33554432
  %tobool130 = icmp ne i32 %and129, 0
  %cond131 = select i1 %tobool130, i32 5, i32 4
  %call132 = call i32 @local_symbolic_operand(%struct.rtx_def* %77, i32 %cond131)
  %tobool133 = icmp ne i32 %call132, 0
  br i1 %tobool133, label %land.lhs.true.134, label %if.else.169

land.lhs.true.134:                                ; preds = %if.then.122
  %79 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %80 = bitcast %struct.rtx_def* %79 to i32*
  %bf.load135 = load i32, i32* %80, align 8
  %bf.clear136 = and i32 %bf.load135, 65535
  %cmp137 = icmp eq i32 %bf.clear136, 54
  br i1 %cmp137, label %if.then.138, label %if.else.169

if.then.138:                                      ; preds = %land.lhs.true.134
  %81 = load i32, i32* @target_flags, align 4
  %and139 = and i32 %81, 33554432
  %tobool140 = icmp ne i32 %and139, 0
  br i1 %tobool140, label %if.else.167, label %if.then.141

if.then.141:                                      ; preds = %if.then.138
  %82 = load %struct.function*, %struct.function** @cfun, align 8
  %uses_pic_offset_table142 = getelementptr inbounds %struct.function, %struct.function* %82, i32 0, i32 56
  %83 = bitcast i24* %uses_pic_offset_table142 to i32*
  %bf.load143 = load i32, i32* %83, align 8
  %bf.clear144 = and i32 %bf.load143, -2097153
  %bf.set145 = or i32 %bf.clear144, 2097152
  store i32 %bf.set145, i32* %83, align 8
  %84 = load i32, i32* @target_flags, align 4
  %and146 = and i32 %84, 33554432
  %tobool147 = icmp ne i32 %and146, 0
  %cond148 = select i1 %tobool147, i32 5, i32 4
  %85 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call149 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %85)
  %call150 = call %struct.rtx_def* @gen_rtx_fmt_Ei(i32 42, i32 %cond148, %struct.rtvec_def* %call149, i32 7)
  store %struct.rtx_def* %call150, %struct.rtx_def** %new, align 8
  %86 = load i32, i32* @target_flags, align 4
  %and151 = and i32 %86, 33554432
  %tobool152 = icmp ne i32 %and151, 0
  %cond153 = select i1 %tobool152, i32 5, i32 4
  %87 = load %struct.rtx_def*, %struct.rtx_def** %new, align 8
  %88 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %call154 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %cond153, %struct.rtx_def* %87, %struct.rtx_def* %88)
  store %struct.rtx_def* %call154, %struct.rtx_def** %new, align 8
  %89 = load i32, i32* @target_flags, align 4
  %and155 = and i32 %89, 33554432
  %tobool156 = icmp ne i32 %and155, 0
  %cond157 = select i1 %tobool156, i32 5, i32 4
  %90 = load %struct.rtx_def*, %struct.rtx_def** %new, align 8
  %call158 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 58, i32 %cond157, %struct.rtx_def* %90)
  store %struct.rtx_def* %call158, %struct.rtx_def** %new, align 8
  %91 = load i32, i32* @target_flags, align 4
  %and159 = and i32 %91, 33554432
  %tobool160 = icmp ne i32 %and159, 0
  %cond161 = select i1 %tobool160, i32 5, i32 4
  %92 = load %struct.rtx_def*, %struct.rtx_def** @pic_offset_table_rtx, align 8
  %93 = load %struct.rtx_def*, %struct.rtx_def** %new, align 8
  %call162 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %cond161, %struct.rtx_def* %92, %struct.rtx_def* %93)
  store %struct.rtx_def* %call162, %struct.rtx_def** %new, align 8
  %94 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %cmp163 = icmp ne %struct.rtx_def* %94, null
  br i1 %cmp163, label %if.then.164, label %if.end.166

if.then.164:                                      ; preds = %if.then.141
  %95 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %96 = load %struct.rtx_def*, %struct.rtx_def** %new, align 8
  %call165 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %95, %struct.rtx_def* %96)
  %97 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  store %struct.rtx_def* %97, %struct.rtx_def** %new, align 8
  br label %if.end.166

if.end.166:                                       ; preds = %if.then.164, %if.then.141
  br label %if.end.168

if.else.167:                                      ; preds = %if.then.138
  br label %if.end.168

if.end.168:                                       ; preds = %if.else.167, %if.end.166
  br label %if.end.264

if.else.169:                                      ; preds = %land.lhs.true.134, %if.then.122
  %98 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %fld170 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %98, i32 0, i32 1
  %arrayidx171 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld170, i32 0, i64 0
  %rtx172 = bitcast %union.rtunion_def* %arrayidx171 to %struct.rtx_def**
  %99 = load %struct.rtx_def*, %struct.rtx_def** %rtx172, align 8
  %100 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %call173 = call %struct.rtx_def* @legitimize_pic_address(%struct.rtx_def* %99, %struct.rtx_def* %100)
  store %struct.rtx_def* %call173, %struct.rtx_def** %base, align 8
  %101 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %fld174 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %101, i32 0, i32 1
  %arrayidx175 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld174, i32 0, i64 1
  %rtx176 = bitcast %union.rtunion_def* %arrayidx175 to %struct.rtx_def**
  %102 = load %struct.rtx_def*, %struct.rtx_def** %rtx176, align 8
  %103 = load %struct.rtx_def*, %struct.rtx_def** %base, align 8
  %104 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %cmp177 = icmp eq %struct.rtx_def* %103, %104
  br i1 %cmp177, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else.169
  br label %cond.end

cond.false:                                       ; preds = %if.else.169
  %105 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond178 = phi %struct.rtx_def* [ null, %cond.true ], [ %105, %cond.false ]
  %call179 = call %struct.rtx_def* @legitimize_pic_address(%struct.rtx_def* %102, %struct.rtx_def* %cond178)
  store %struct.rtx_def* %call179, %struct.rtx_def** %new, align 8
  %106 = load %struct.rtx_def*, %struct.rtx_def** %new, align 8
  %107 = bitcast %struct.rtx_def* %106 to i32*
  %bf.load180 = load i32, i32* %107, align 8
  %bf.clear181 = and i32 %bf.load180, 65535
  %cmp182 = icmp eq i32 %bf.clear181, 54
  br i1 %cmp182, label %if.then.183, label %if.else.187

if.then.183:                                      ; preds = %cond.end
  %108 = load %struct.rtx_def*, %struct.rtx_def** %base, align 8
  %109 = load %struct.rtx_def*, %struct.rtx_def** %new, align 8
  %fld184 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %109, i32 0, i32 1
  %arrayidx185 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld184, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx185 to i64*
  %110 = load i64, i64* %rtwint, align 8
  %call186 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %108, i64 %110)
  store %struct.rtx_def* %call186, %struct.rtx_def** %new, align 8
  br label %if.end.263

if.else.187:                                      ; preds = %cond.end
  %111 = load %struct.rtx_def*, %struct.rtx_def** %new, align 8
  %112 = bitcast %struct.rtx_def* %111 to i32*
  %bf.load188 = load i32, i32* %112, align 8
  %bf.clear189 = and i32 %bf.load188, 65535
  %cmp190 = icmp eq i32 %bf.clear189, 75
  br i1 %cmp190, label %land.lhs.true.191, label %if.end.258

land.lhs.true.191:                                ; preds = %if.else.187
  %113 = load %struct.rtx_def*, %struct.rtx_def** %new, align 8
  %fld192 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %113, i32 0, i32 1
  %arrayidx193 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld192, i32 0, i64 1
  %rtx194 = bitcast %union.rtunion_def* %arrayidx193 to %struct.rtx_def**
  %114 = load %struct.rtx_def*, %struct.rtx_def** %rtx194, align 8
  %115 = bitcast %struct.rtx_def* %114 to i32*
  %bf.load195 = load i32, i32* %115, align 8
  %bf.clear196 = and i32 %bf.load195, 65535
  %cmp197 = icmp eq i32 %bf.clear196, 67
  br i1 %cmp197, label %if.then.247, label %lor.lhs.false.198

lor.lhs.false.198:                                ; preds = %land.lhs.true.191
  %116 = load %struct.rtx_def*, %struct.rtx_def** %new, align 8
  %fld199 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %116, i32 0, i32 1
  %arrayidx200 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld199, i32 0, i64 1
  %rtx201 = bitcast %union.rtunion_def* %arrayidx200 to %struct.rtx_def**
  %117 = load %struct.rtx_def*, %struct.rtx_def** %rtx201, align 8
  %118 = bitcast %struct.rtx_def* %117 to i32*
  %bf.load202 = load i32, i32* %118, align 8
  %bf.clear203 = and i32 %bf.load202, 65535
  %cmp204 = icmp eq i32 %bf.clear203, 68
  br i1 %cmp204, label %if.then.247, label %lor.lhs.false.205

lor.lhs.false.205:                                ; preds = %lor.lhs.false.198
  %119 = load %struct.rtx_def*, %struct.rtx_def** %new, align 8
  %fld206 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %119, i32 0, i32 1
  %arrayidx207 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld206, i32 0, i64 1
  %rtx208 = bitcast %union.rtunion_def* %arrayidx207 to %struct.rtx_def**
  %120 = load %struct.rtx_def*, %struct.rtx_def** %rtx208, align 8
  %121 = bitcast %struct.rtx_def* %120 to i32*
  %bf.load209 = load i32, i32* %121, align 8
  %bf.clear210 = and i32 %bf.load209, 65535
  %cmp211 = icmp eq i32 %bf.clear210, 54
  br i1 %cmp211, label %if.then.247, label %lor.lhs.false.212

lor.lhs.false.212:                                ; preds = %lor.lhs.false.205
  %122 = load %struct.rtx_def*, %struct.rtx_def** %new, align 8
  %fld213 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %122, i32 0, i32 1
  %arrayidx214 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld213, i32 0, i64 1
  %rtx215 = bitcast %union.rtunion_def* %arrayidx214 to %struct.rtx_def**
  %123 = load %struct.rtx_def*, %struct.rtx_def** %rtx215, align 8
  %124 = bitcast %struct.rtx_def* %123 to i32*
  %bf.load216 = load i32, i32* %124, align 8
  %bf.clear217 = and i32 %bf.load216, 65535
  %cmp218 = icmp eq i32 %bf.clear217, 55
  br i1 %cmp218, label %if.then.247, label %lor.lhs.false.219

lor.lhs.false.219:                                ; preds = %lor.lhs.false.212
  %125 = load %struct.rtx_def*, %struct.rtx_def** %new, align 8
  %fld220 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %125, i32 0, i32 1
  %arrayidx221 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld220, i32 0, i64 1
  %rtx222 = bitcast %union.rtunion_def* %arrayidx221 to %struct.rtx_def**
  %126 = load %struct.rtx_def*, %struct.rtx_def** %rtx222, align 8
  %127 = bitcast %struct.rtx_def* %126 to i32*
  %bf.load223 = load i32, i32* %127, align 8
  %bf.clear224 = and i32 %bf.load223, 65535
  %cmp225 = icmp eq i32 %bf.clear224, 58
  br i1 %cmp225, label %if.then.247, label %lor.lhs.false.226

lor.lhs.false.226:                                ; preds = %lor.lhs.false.219
  %128 = load %struct.rtx_def*, %struct.rtx_def** %new, align 8
  %fld227 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %128, i32 0, i32 1
  %arrayidx228 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld227, i32 0, i64 1
  %rtx229 = bitcast %union.rtunion_def* %arrayidx228 to %struct.rtx_def**
  %129 = load %struct.rtx_def*, %struct.rtx_def** %rtx229, align 8
  %130 = bitcast %struct.rtx_def* %129 to i32*
  %bf.load230 = load i32, i32* %130, align 8
  %bf.clear231 = and i32 %bf.load230, 65535
  %cmp232 = icmp eq i32 %bf.clear231, 134
  br i1 %cmp232, label %if.then.247, label %lor.lhs.false.233

lor.lhs.false.233:                                ; preds = %lor.lhs.false.226
  %131 = load %struct.rtx_def*, %struct.rtx_def** %new, align 8
  %fld234 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %131, i32 0, i32 1
  %arrayidx235 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld234, i32 0, i64 1
  %rtx236 = bitcast %union.rtunion_def* %arrayidx235 to %struct.rtx_def**
  %132 = load %struct.rtx_def*, %struct.rtx_def** %rtx236, align 8
  %133 = bitcast %struct.rtx_def* %132 to i32*
  %bf.load237 = load i32, i32* %133, align 8
  %bf.clear238 = and i32 %bf.load237, 65535
  %cmp239 = icmp eq i32 %bf.clear238, 56
  br i1 %cmp239, label %if.then.247, label %lor.lhs.false.240

lor.lhs.false.240:                                ; preds = %lor.lhs.false.233
  %134 = load %struct.rtx_def*, %struct.rtx_def** %new, align 8
  %fld241 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %134, i32 0, i32 1
  %arrayidx242 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld241, i32 0, i64 1
  %rtx243 = bitcast %union.rtunion_def* %arrayidx242 to %struct.rtx_def**
  %135 = load %struct.rtx_def*, %struct.rtx_def** %rtx243, align 8
  %136 = bitcast %struct.rtx_def* %135 to i32*
  %bf.load244 = load i32, i32* %136, align 8
  %bf.clear245 = and i32 %bf.load244, 65535
  %cmp246 = icmp eq i32 %bf.clear245, 140
  br i1 %cmp246, label %if.then.247, label %if.end.258

if.then.247:                                      ; preds = %lor.lhs.false.240, %lor.lhs.false.233, %lor.lhs.false.226, %lor.lhs.false.219, %lor.lhs.false.212, %lor.lhs.false.205, %lor.lhs.false.198, %land.lhs.true.191
  %137 = load i32, i32* @target_flags, align 4
  %and248 = and i32 %137, 33554432
  %tobool249 = icmp ne i32 %and248, 0
  %cond250 = select i1 %tobool249, i32 5, i32 4
  %138 = load %struct.rtx_def*, %struct.rtx_def** %base, align 8
  %139 = load %struct.rtx_def*, %struct.rtx_def** %new, align 8
  %fld251 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %139, i32 0, i32 1
  %arrayidx252 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld251, i32 0, i64 0
  %rtx253 = bitcast %union.rtunion_def* %arrayidx252 to %struct.rtx_def**
  %140 = load %struct.rtx_def*, %struct.rtx_def** %rtx253, align 8
  %call254 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %cond250, %struct.rtx_def* %138, %struct.rtx_def* %140)
  store %struct.rtx_def* %call254, %struct.rtx_def** %base, align 8
  %141 = load %struct.rtx_def*, %struct.rtx_def** %new, align 8
  %fld255 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %141, i32 0, i32 1
  %arrayidx256 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld255, i32 0, i64 1
  %rtx257 = bitcast %union.rtunion_def* %arrayidx256 to %struct.rtx_def**
  %142 = load %struct.rtx_def*, %struct.rtx_def** %rtx257, align 8
  store %struct.rtx_def* %142, %struct.rtx_def** %new, align 8
  br label %if.end.258

if.end.258:                                       ; preds = %if.then.247, %lor.lhs.false.240, %if.else.187
  %143 = load i32, i32* @target_flags, align 4
  %and259 = and i32 %143, 33554432
  %tobool260 = icmp ne i32 %and259, 0
  %cond261 = select i1 %tobool260, i32 5, i32 4
  %144 = load %struct.rtx_def*, %struct.rtx_def** %base, align 8
  %145 = load %struct.rtx_def*, %struct.rtx_def** %new, align 8
  %call262 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %cond261, %struct.rtx_def* %144, %struct.rtx_def* %145)
  store %struct.rtx_def* %call262, %struct.rtx_def** %new, align 8
  br label %if.end.263

if.end.263:                                       ; preds = %if.end.258, %if.then.183
  br label %if.end.264

if.end.264:                                       ; preds = %if.end.263, %if.end.168
  br label %if.end.265

if.end.265:                                       ; preds = %if.end.264, %if.end.118
  br label %if.end.266

if.end.266:                                       ; preds = %if.end.265, %if.end.93
  br label %if.end.267

if.end.267:                                       ; preds = %if.end.266, %if.end.20
  %146 = load %struct.rtx_def*, %struct.rtx_def** %new, align 8
  store %struct.rtx_def* %146, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end.267, %if.then.111
  %147 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %147
}

declare %struct.rtx_def* @gen_rtx_fmt_Ei(i32, i32, %struct.rtvec_def*, i32) #0

declare %struct.rtvec_def* @gen_rtvec(i32, ...) #0

; Function Attrs: nounwind uwtable
define internal i64 @ix86_GOT_alias_set() #1 {
entry:
  %0 = load i64, i64* @ix86_GOT_alias_set.set, align 8
  %cmp = icmp eq i64 %0, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = call i64 @new_alias_set()
  store i64 %call, i64* @ix86_GOT_alias_set.set, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load i64, i64* @ix86_GOT_alias_set.set, align 8
  ret i64 %1
}

declare %struct.rtx_def* @gen_movsi(%struct.rtx_def*, %struct.rtx_def*) #0

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @legitimize_address(%struct.rtx_def* %x, %struct.rtx_def* %oldx, i32 %mode) #1 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %x.addr = alloca %struct.rtx_def*, align 8
  %oldx.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %changed = alloca i32, align 4
  %log = alloca i32, align 4
  %tmp = alloca %struct.rtx_def*, align 8
  %constant = alloca %struct.rtx_def*, align 8
  %other = alloca %struct.rtx_def*, align 8
  %temp = alloca %struct.rtx_def*, align 8
  %val = alloca %struct.rtx_def*, align 8
  %temp530 = alloca %struct.rtx_def*, align 8
  %val536 = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  store %struct.rtx_def* %oldx, %struct.rtx_def** %oldx.addr, align 8
  store i32 %mode, i32* %mode.addr, align 4
  store i32 0, i32* %changed, align 4
  %0 = load i8*, i8** @ix86_debug_addr_string, align 8
  %cmp = icmp ne i8* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %2 = load i32, i32* %mode.addr, align 4
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds [59 x i8*], [59 x i8*]* @mode_name, i32 0, i64 %idxprom
  %3 = load i8*, i8** %arrayidx, align 8
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.100, i32 0, i32 0), i8* %3)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  call void @debug_rtx(%struct.rtx_def* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load i32, i32* @flag_pic, align 4
  %tobool = icmp ne i32 %5, 0
  br i1 %tobool, label %land.lhs.true, label %if.end.14

land.lhs.true:                                    ; preds = %if.end
  %6 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %7 = bitcast %struct.rtx_def* %6 to i32*
  %bf.load = load i32, i32* %7, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp1 = icmp eq i32 %bf.clear, 68
  br i1 %cmp1, label %if.then.12, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %8 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %9 = bitcast %struct.rtx_def* %8 to i32*
  %bf.load2 = load i32, i32* %9, align 8
  %bf.clear3 = and i32 %bf.load2, 65535
  %cmp4 = icmp eq i32 %bf.clear3, 67
  br i1 %cmp4, label %if.then.12, label %lor.lhs.false.5

lor.lhs.false.5:                                  ; preds = %lor.lhs.false
  %10 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %11 = bitcast %struct.rtx_def* %10 to i32*
  %bf.load6 = load i32, i32* %11, align 8
  %bf.clear7 = and i32 %bf.load6, 65535
  %cmp8 = icmp eq i32 %bf.clear7, 58
  br i1 %cmp8, label %land.lhs.true.9, label %if.end.14

land.lhs.true.9:                                  ; preds = %lor.lhs.false.5
  %12 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %call10 = call i32 @symbolic_reference_mentioned_p(%struct.rtx_def* %12)
  %tobool11 = icmp ne i32 %call10, 0
  br i1 %tobool11, label %if.then.12, label %if.end.14

if.then.12:                                       ; preds = %land.lhs.true.9, %lor.lhs.false, %land.lhs.true
  %13 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %call13 = call %struct.rtx_def* @legitimize_pic_address(%struct.rtx_def* %13, %struct.rtx_def* null)
  store %struct.rtx_def* %call13, %struct.rtx_def** %retval
  br label %return

if.end.14:                                        ; preds = %land.lhs.true.9, %lor.lhs.false.5, %if.end
  %14 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %15 = bitcast %struct.rtx_def* %14 to i32*
  %bf.load15 = load i32, i32* %15, align 8
  %bf.clear16 = and i32 %bf.load15, 65535
  %cmp17 = icmp eq i32 %bf.clear16, 87
  br i1 %cmp17, label %land.lhs.true.18, label %if.end.42

land.lhs.true.18:                                 ; preds = %if.end.14
  %16 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1
  %arrayidx19 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 1
  %rtx = bitcast %union.rtunion_def* %arrayidx19 to %struct.rtx_def**
  %17 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %18 = bitcast %struct.rtx_def* %17 to i32*
  %bf.load20 = load i32, i32* %18, align 8
  %bf.clear21 = and i32 %bf.load20, 65535
  %cmp22 = icmp eq i32 %bf.clear21, 54
  br i1 %cmp22, label %land.lhs.true.23, label %if.end.42

land.lhs.true.23:                                 ; preds = %land.lhs.true.18
  %19 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld24 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1
  %arrayidx25 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld24, i32 0, i64 1
  %rtx26 = bitcast %union.rtunion_def* %arrayidx25 to %struct.rtx_def**
  %20 = load %struct.rtx_def*, %struct.rtx_def** %rtx26, align 8
  %fld27 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1
  %arrayidx28 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld27, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx28 to i64*
  %21 = load i64, i64* %rtwint, align 8
  %call29 = call i32 @exact_log2_wide(i64 %21)
  store i32 %call29, i32* %log, align 4
  %cmp30 = icmp ult i32 %call29, 4
  br i1 %cmp30, label %if.then.31, label %if.end.42

if.then.31:                                       ; preds = %land.lhs.true.23
  store i32 1, i32* %changed, align 4
  %22 = load i32, i32* @target_flags, align 4
  %and = and i32 %22, 33554432
  %tobool32 = icmp ne i32 %and, 0
  %cond = select i1 %tobool32, i32 5, i32 4
  %23 = load i32, i32* @target_flags, align 4
  %and33 = and i32 %23, 33554432
  %tobool34 = icmp ne i32 %and33, 0
  %cond35 = select i1 %tobool34, i32 5, i32 4
  %24 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld36 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1
  %arrayidx37 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld36, i32 0, i64 0
  %rtx38 = bitcast %union.rtunion_def* %arrayidx37 to %struct.rtx_def**
  %25 = load %struct.rtx_def*, %struct.rtx_def** %rtx38, align 8
  %call39 = call %struct.rtx_def* @force_reg(i32 %cond35, %struct.rtx_def* %25)
  %26 = load i32, i32* %log, align 4
  %shl = shl i32 1, %26
  %conv = sext i32 %shl to i64
  %call40 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv)
  %call41 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 78, i32 %cond, %struct.rtx_def* %call39, %struct.rtx_def* %call40)
  store %struct.rtx_def* %call41, %struct.rtx_def** %x.addr, align 8
  br label %if.end.42

if.end.42:                                        ; preds = %if.then.31, %land.lhs.true.23, %land.lhs.true.18, %if.end.14
  %27 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %28 = bitcast %struct.rtx_def* %27 to i32*
  %bf.load43 = load i32, i32* %28, align 8
  %bf.clear44 = and i32 %bf.load43, 65535
  %cmp45 = icmp eq i32 %bf.clear44, 75
  br i1 %cmp45, label %if.then.47, label %if.end.551

if.then.47:                                       ; preds = %if.end.42
  %29 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld48 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %29, i32 0, i32 1
  %arrayidx49 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld48, i32 0, i64 0
  %rtx50 = bitcast %union.rtunion_def* %arrayidx49 to %struct.rtx_def**
  %30 = load %struct.rtx_def*, %struct.rtx_def** %rtx50, align 8
  %31 = bitcast %struct.rtx_def* %30 to i32*
  %bf.load51 = load i32, i32* %31, align 8
  %bf.clear52 = and i32 %bf.load51, 65535
  %cmp53 = icmp eq i32 %bf.clear52, 87
  br i1 %cmp53, label %land.lhs.true.55, label %if.end.100

land.lhs.true.55:                                 ; preds = %if.then.47
  %32 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld56 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %32, i32 0, i32 1
  %arrayidx57 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld56, i32 0, i64 0
  %rtx58 = bitcast %union.rtunion_def* %arrayidx57 to %struct.rtx_def**
  %33 = load %struct.rtx_def*, %struct.rtx_def** %rtx58, align 8
  %fld59 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1
  %arrayidx60 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld59, i32 0, i64 1
  %rtx61 = bitcast %union.rtunion_def* %arrayidx60 to %struct.rtx_def**
  %34 = load %struct.rtx_def*, %struct.rtx_def** %rtx61, align 8
  %35 = bitcast %struct.rtx_def* %34 to i32*
  %bf.load62 = load i32, i32* %35, align 8
  %bf.clear63 = and i32 %bf.load62, 65535
  %cmp64 = icmp eq i32 %bf.clear63, 54
  br i1 %cmp64, label %land.lhs.true.66, label %if.end.100

land.lhs.true.66:                                 ; preds = %land.lhs.true.55
  %36 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld67 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %36, i32 0, i32 1
  %arrayidx68 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld67, i32 0, i64 0
  %rtx69 = bitcast %union.rtunion_def* %arrayidx68 to %struct.rtx_def**
  %37 = load %struct.rtx_def*, %struct.rtx_def** %rtx69, align 8
  %fld70 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %37, i32 0, i32 1
  %arrayidx71 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld70, i32 0, i64 1
  %rtx72 = bitcast %union.rtunion_def* %arrayidx71 to %struct.rtx_def**
  %38 = load %struct.rtx_def*, %struct.rtx_def** %rtx72, align 8
  %fld73 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %38, i32 0, i32 1
  %arrayidx74 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld73, i32 0, i64 0
  %rtwint75 = bitcast %union.rtunion_def* %arrayidx74 to i64*
  %39 = load i64, i64* %rtwint75, align 8
  %call76 = call i32 @exact_log2_wide(i64 %39)
  store i32 %call76, i32* %log, align 4
  %cmp77 = icmp ult i32 %call76, 4
  br i1 %cmp77, label %if.then.79, label %if.end.100

if.then.79:                                       ; preds = %land.lhs.true.66
  store i32 1, i32* %changed, align 4
  %40 = load i32, i32* @target_flags, align 4
  %and80 = and i32 %40, 33554432
  %tobool81 = icmp ne i32 %and80, 0
  %cond82 = select i1 %tobool81, i32 5, i32 4
  %41 = load i32, i32* @target_flags, align 4
  %and83 = and i32 %41, 33554432
  %tobool84 = icmp ne i32 %and83, 0
  %cond85 = select i1 %tobool84, i32 5, i32 4
  %42 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld86 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %42, i32 0, i32 1
  %arrayidx87 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld86, i32 0, i64 0
  %rtx88 = bitcast %union.rtunion_def* %arrayidx87 to %struct.rtx_def**
  %43 = load %struct.rtx_def*, %struct.rtx_def** %rtx88, align 8
  %fld89 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %43, i32 0, i32 1
  %arrayidx90 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld89, i32 0, i64 0
  %rtx91 = bitcast %union.rtunion_def* %arrayidx90 to %struct.rtx_def**
  %44 = load %struct.rtx_def*, %struct.rtx_def** %rtx91, align 8
  %call92 = call %struct.rtx_def* @force_reg(i32 %cond85, %struct.rtx_def* %44)
  %45 = load i32, i32* %log, align 4
  %shl93 = shl i32 1, %45
  %conv94 = sext i32 %shl93 to i64
  %call95 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv94)
  %call96 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 78, i32 %cond82, %struct.rtx_def* %call92, %struct.rtx_def* %call95)
  %46 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld97 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %46, i32 0, i32 1
  %arrayidx98 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld97, i32 0, i64 0
  %rtx99 = bitcast %union.rtunion_def* %arrayidx98 to %struct.rtx_def**
  store %struct.rtx_def* %call96, %struct.rtx_def** %rtx99, align 8
  br label %if.end.100

if.end.100:                                       ; preds = %if.then.79, %land.lhs.true.66, %land.lhs.true.55, %if.then.47
  %47 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld101 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %47, i32 0, i32 1
  %arrayidx102 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld101, i32 0, i64 1
  %rtx103 = bitcast %union.rtunion_def* %arrayidx102 to %struct.rtx_def**
  %48 = load %struct.rtx_def*, %struct.rtx_def** %rtx103, align 8
  %49 = bitcast %struct.rtx_def* %48 to i32*
  %bf.load104 = load i32, i32* %49, align 8
  %bf.clear105 = and i32 %bf.load104, 65535
  %cmp106 = icmp eq i32 %bf.clear105, 87
  br i1 %cmp106, label %land.lhs.true.108, label %if.end.153

land.lhs.true.108:                                ; preds = %if.end.100
  %50 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld109 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %50, i32 0, i32 1
  %arrayidx110 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld109, i32 0, i64 1
  %rtx111 = bitcast %union.rtunion_def* %arrayidx110 to %struct.rtx_def**
  %51 = load %struct.rtx_def*, %struct.rtx_def** %rtx111, align 8
  %fld112 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %51, i32 0, i32 1
  %arrayidx113 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld112, i32 0, i64 1
  %rtx114 = bitcast %union.rtunion_def* %arrayidx113 to %struct.rtx_def**
  %52 = load %struct.rtx_def*, %struct.rtx_def** %rtx114, align 8
  %53 = bitcast %struct.rtx_def* %52 to i32*
  %bf.load115 = load i32, i32* %53, align 8
  %bf.clear116 = and i32 %bf.load115, 65535
  %cmp117 = icmp eq i32 %bf.clear116, 54
  br i1 %cmp117, label %land.lhs.true.119, label %if.end.153

land.lhs.true.119:                                ; preds = %land.lhs.true.108
  %54 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld120 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %54, i32 0, i32 1
  %arrayidx121 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld120, i32 0, i64 1
  %rtx122 = bitcast %union.rtunion_def* %arrayidx121 to %struct.rtx_def**
  %55 = load %struct.rtx_def*, %struct.rtx_def** %rtx122, align 8
  %fld123 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %55, i32 0, i32 1
  %arrayidx124 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld123, i32 0, i64 1
  %rtx125 = bitcast %union.rtunion_def* %arrayidx124 to %struct.rtx_def**
  %56 = load %struct.rtx_def*, %struct.rtx_def** %rtx125, align 8
  %fld126 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %56, i32 0, i32 1
  %arrayidx127 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld126, i32 0, i64 0
  %rtwint128 = bitcast %union.rtunion_def* %arrayidx127 to i64*
  %57 = load i64, i64* %rtwint128, align 8
  %call129 = call i32 @exact_log2_wide(i64 %57)
  store i32 %call129, i32* %log, align 4
  %cmp130 = icmp ult i32 %call129, 4
  br i1 %cmp130, label %if.then.132, label %if.end.153

if.then.132:                                      ; preds = %land.lhs.true.119
  store i32 1, i32* %changed, align 4
  %58 = load i32, i32* @target_flags, align 4
  %and133 = and i32 %58, 33554432
  %tobool134 = icmp ne i32 %and133, 0
  %cond135 = select i1 %tobool134, i32 5, i32 4
  %59 = load i32, i32* @target_flags, align 4
  %and136 = and i32 %59, 33554432
  %tobool137 = icmp ne i32 %and136, 0
  %cond138 = select i1 %tobool137, i32 5, i32 4
  %60 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld139 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %60, i32 0, i32 1
  %arrayidx140 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld139, i32 0, i64 1
  %rtx141 = bitcast %union.rtunion_def* %arrayidx140 to %struct.rtx_def**
  %61 = load %struct.rtx_def*, %struct.rtx_def** %rtx141, align 8
  %fld142 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %61, i32 0, i32 1
  %arrayidx143 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld142, i32 0, i64 0
  %rtx144 = bitcast %union.rtunion_def* %arrayidx143 to %struct.rtx_def**
  %62 = load %struct.rtx_def*, %struct.rtx_def** %rtx144, align 8
  %call145 = call %struct.rtx_def* @force_reg(i32 %cond138, %struct.rtx_def* %62)
  %63 = load i32, i32* %log, align 4
  %shl146 = shl i32 1, %63
  %conv147 = sext i32 %shl146 to i64
  %call148 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv147)
  %call149 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 78, i32 %cond135, %struct.rtx_def* %call145, %struct.rtx_def* %call148)
  %64 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld150 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %64, i32 0, i32 1
  %arrayidx151 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld150, i32 0, i64 1
  %rtx152 = bitcast %union.rtunion_def* %arrayidx151 to %struct.rtx_def**
  store %struct.rtx_def* %call149, %struct.rtx_def** %rtx152, align 8
  br label %if.end.153

if.end.153:                                       ; preds = %if.then.132, %land.lhs.true.119, %land.lhs.true.108, %if.end.100
  %65 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld154 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %65, i32 0, i32 1
  %arrayidx155 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld154, i32 0, i64 1
  %rtx156 = bitcast %union.rtunion_def* %arrayidx155 to %struct.rtx_def**
  %66 = load %struct.rtx_def*, %struct.rtx_def** %rtx156, align 8
  %67 = bitcast %struct.rtx_def* %66 to i32*
  %bf.load157 = load i32, i32* %67, align 8
  %bf.clear158 = and i32 %bf.load157, 65535
  %cmp159 = icmp eq i32 %bf.clear158, 78
  br i1 %cmp159, label %if.then.161, label %if.end.174

if.then.161:                                      ; preds = %if.end.153
  %68 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld162 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %68, i32 0, i32 1
  %arrayidx163 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld162, i32 0, i64 0
  %rtx164 = bitcast %union.rtunion_def* %arrayidx163 to %struct.rtx_def**
  %69 = load %struct.rtx_def*, %struct.rtx_def** %rtx164, align 8
  store %struct.rtx_def* %69, %struct.rtx_def** %tmp, align 8
  %70 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld165 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %70, i32 0, i32 1
  %arrayidx166 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld165, i32 0, i64 1
  %rtx167 = bitcast %union.rtunion_def* %arrayidx166 to %struct.rtx_def**
  %71 = load %struct.rtx_def*, %struct.rtx_def** %rtx167, align 8
  %72 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld168 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %72, i32 0, i32 1
  %arrayidx169 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld168, i32 0, i64 0
  %rtx170 = bitcast %union.rtunion_def* %arrayidx169 to %struct.rtx_def**
  store %struct.rtx_def* %71, %struct.rtx_def** %rtx170, align 8
  %73 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %74 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld171 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %74, i32 0, i32 1
  %arrayidx172 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld171, i32 0, i64 1
  %rtx173 = bitcast %union.rtunion_def* %arrayidx172 to %struct.rtx_def**
  store %struct.rtx_def* %73, %struct.rtx_def** %rtx173, align 8
  store i32 1, i32* %changed, align 4
  br label %if.end.174

if.end.174:                                       ; preds = %if.then.161, %if.end.153
  %75 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld175 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %75, i32 0, i32 1
  %arrayidx176 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld175, i32 0, i64 0
  %rtx177 = bitcast %union.rtunion_def* %arrayidx176 to %struct.rtx_def**
  %76 = load %struct.rtx_def*, %struct.rtx_def** %rtx177, align 8
  %77 = bitcast %struct.rtx_def* %76 to i32*
  %bf.load178 = load i32, i32* %77, align 8
  %bf.clear179 = and i32 %bf.load178, 65535
  %cmp180 = icmp eq i32 %bf.clear179, 78
  br i1 %cmp180, label %land.lhs.true.182, label %if.else

land.lhs.true.182:                                ; preds = %if.end.174
  %78 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld183 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %78, i32 0, i32 1
  %arrayidx184 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld183, i32 0, i64 1
  %rtx185 = bitcast %union.rtunion_def* %arrayidx184 to %struct.rtx_def**
  %79 = load %struct.rtx_def*, %struct.rtx_def** %rtx185, align 8
  %80 = bitcast %struct.rtx_def* %79 to i32*
  %bf.load186 = load i32, i32* %80, align 8
  %bf.clear187 = and i32 %bf.load186, 65535
  %cmp188 = icmp eq i32 %bf.clear187, 75
  br i1 %cmp188, label %if.then.190, label %if.else

if.then.190:                                      ; preds = %land.lhs.true.182
  store i32 1, i32* %changed, align 4
  %81 = load i32, i32* @target_flags, align 4
  %and191 = and i32 %81, 33554432
  %tobool192 = icmp ne i32 %and191, 0
  %cond193 = select i1 %tobool192, i32 5, i32 4
  %82 = load i32, i32* @target_flags, align 4
  %and194 = and i32 %82, 33554432
  %tobool195 = icmp ne i32 %and194, 0
  %cond196 = select i1 %tobool195, i32 5, i32 4
  %83 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld197 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %83, i32 0, i32 1
  %arrayidx198 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld197, i32 0, i64 0
  %rtx199 = bitcast %union.rtunion_def* %arrayidx198 to %struct.rtx_def**
  %84 = load %struct.rtx_def*, %struct.rtx_def** %rtx199, align 8
  %85 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld200 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %85, i32 0, i32 1
  %arrayidx201 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld200, i32 0, i64 1
  %rtx202 = bitcast %union.rtunion_def* %arrayidx201 to %struct.rtx_def**
  %86 = load %struct.rtx_def*, %struct.rtx_def** %rtx202, align 8
  %fld203 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %86, i32 0, i32 1
  %arrayidx204 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld203, i32 0, i64 0
  %rtx205 = bitcast %union.rtunion_def* %arrayidx204 to %struct.rtx_def**
  %87 = load %struct.rtx_def*, %struct.rtx_def** %rtx205, align 8
  %call206 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %cond196, %struct.rtx_def* %84, %struct.rtx_def* %87)
  %88 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld207 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %88, i32 0, i32 1
  %arrayidx208 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld207, i32 0, i64 1
  %rtx209 = bitcast %union.rtunion_def* %arrayidx208 to %struct.rtx_def**
  %89 = load %struct.rtx_def*, %struct.rtx_def** %rtx209, align 8
  %fld210 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %89, i32 0, i32 1
  %arrayidx211 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld210, i32 0, i64 1
  %rtx212 = bitcast %union.rtunion_def* %arrayidx211 to %struct.rtx_def**
  %90 = load %struct.rtx_def*, %struct.rtx_def** %rtx212, align 8
  %call213 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %cond193, %struct.rtx_def* %call206, %struct.rtx_def* %90)
  store %struct.rtx_def* %call213, %struct.rtx_def** %x.addr, align 8
  br label %if.end.396

if.else:                                          ; preds = %land.lhs.true.182, %if.end.174
  %91 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %92 = bitcast %struct.rtx_def* %91 to i32*
  %bf.load214 = load i32, i32* %92, align 8
  %bf.clear215 = and i32 %bf.load214, 65535
  %cmp216 = icmp eq i32 %bf.clear215, 75
  br i1 %cmp216, label %land.lhs.true.218, label %if.end.395

land.lhs.true.218:                                ; preds = %if.else
  %93 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld219 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %93, i32 0, i32 1
  %arrayidx220 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld219, i32 0, i64 0
  %rtx221 = bitcast %union.rtunion_def* %arrayidx220 to %struct.rtx_def**
  %94 = load %struct.rtx_def*, %struct.rtx_def** %rtx221, align 8
  %95 = bitcast %struct.rtx_def* %94 to i32*
  %bf.load222 = load i32, i32* %95, align 8
  %bf.clear223 = and i32 %bf.load222, 65535
  %cmp224 = icmp eq i32 %bf.clear223, 75
  br i1 %cmp224, label %land.lhs.true.226, label %if.end.395

land.lhs.true.226:                                ; preds = %land.lhs.true.218
  %96 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld227 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %96, i32 0, i32 1
  %arrayidx228 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld227, i32 0, i64 0
  %rtx229 = bitcast %union.rtunion_def* %arrayidx228 to %struct.rtx_def**
  %97 = load %struct.rtx_def*, %struct.rtx_def** %rtx229, align 8
  %fld230 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %97, i32 0, i32 1
  %arrayidx231 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld230, i32 0, i64 0
  %rtx232 = bitcast %union.rtunion_def* %arrayidx231 to %struct.rtx_def**
  %98 = load %struct.rtx_def*, %struct.rtx_def** %rtx232, align 8
  %99 = bitcast %struct.rtx_def* %98 to i32*
  %bf.load233 = load i32, i32* %99, align 8
  %bf.clear234 = and i32 %bf.load233, 65535
  %cmp235 = icmp eq i32 %bf.clear234, 78
  br i1 %cmp235, label %land.lhs.true.237, label %if.end.395

land.lhs.true.237:                                ; preds = %land.lhs.true.226
  %100 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld238 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %100, i32 0, i32 1
  %arrayidx239 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld238, i32 0, i64 0
  %rtx240 = bitcast %union.rtunion_def* %arrayidx239 to %struct.rtx_def**
  %101 = load %struct.rtx_def*, %struct.rtx_def** %rtx240, align 8
  %fld241 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %101, i32 0, i32 1
  %arrayidx242 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld241, i32 0, i64 1
  %rtx243 = bitcast %union.rtunion_def* %arrayidx242 to %struct.rtx_def**
  %102 = load %struct.rtx_def*, %struct.rtx_def** %rtx243, align 8
  %103 = bitcast %struct.rtx_def* %102 to i32*
  %bf.load244 = load i32, i32* %103, align 8
  %bf.clear245 = and i32 %bf.load244, 65535
  %cmp246 = icmp eq i32 %bf.clear245, 75
  br i1 %cmp246, label %land.lhs.true.248, label %if.end.395

land.lhs.true.248:                                ; preds = %land.lhs.true.237
  %104 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld249 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %104, i32 0, i32 1
  %arrayidx250 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld249, i32 0, i64 1
  %rtx251 = bitcast %union.rtunion_def* %arrayidx250 to %struct.rtx_def**
  %105 = load %struct.rtx_def*, %struct.rtx_def** %rtx251, align 8
  %106 = bitcast %struct.rtx_def* %105 to i32*
  %bf.load252 = load i32, i32* %106, align 8
  %bf.clear253 = and i32 %bf.load252, 65535
  %cmp254 = icmp eq i32 %bf.clear253, 67
  br i1 %cmp254, label %if.then.312, label %lor.lhs.false.256

lor.lhs.false.256:                                ; preds = %land.lhs.true.248
  %107 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld257 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %107, i32 0, i32 1
  %arrayidx258 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld257, i32 0, i64 1
  %rtx259 = bitcast %union.rtunion_def* %arrayidx258 to %struct.rtx_def**
  %108 = load %struct.rtx_def*, %struct.rtx_def** %rtx259, align 8
  %109 = bitcast %struct.rtx_def* %108 to i32*
  %bf.load260 = load i32, i32* %109, align 8
  %bf.clear261 = and i32 %bf.load260, 65535
  %cmp262 = icmp eq i32 %bf.clear261, 68
  br i1 %cmp262, label %if.then.312, label %lor.lhs.false.264

lor.lhs.false.264:                                ; preds = %lor.lhs.false.256
  %110 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld265 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %110, i32 0, i32 1
  %arrayidx266 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld265, i32 0, i64 1
  %rtx267 = bitcast %union.rtunion_def* %arrayidx266 to %struct.rtx_def**
  %111 = load %struct.rtx_def*, %struct.rtx_def** %rtx267, align 8
  %112 = bitcast %struct.rtx_def* %111 to i32*
  %bf.load268 = load i32, i32* %112, align 8
  %bf.clear269 = and i32 %bf.load268, 65535
  %cmp270 = icmp eq i32 %bf.clear269, 54
  br i1 %cmp270, label %if.then.312, label %lor.lhs.false.272

lor.lhs.false.272:                                ; preds = %lor.lhs.false.264
  %113 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld273 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %113, i32 0, i32 1
  %arrayidx274 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld273, i32 0, i64 1
  %rtx275 = bitcast %union.rtunion_def* %arrayidx274 to %struct.rtx_def**
  %114 = load %struct.rtx_def*, %struct.rtx_def** %rtx275, align 8
  %115 = bitcast %struct.rtx_def* %114 to i32*
  %bf.load276 = load i32, i32* %115, align 8
  %bf.clear277 = and i32 %bf.load276, 65535
  %cmp278 = icmp eq i32 %bf.clear277, 55
  br i1 %cmp278, label %if.then.312, label %lor.lhs.false.280

lor.lhs.false.280:                                ; preds = %lor.lhs.false.272
  %116 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld281 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %116, i32 0, i32 1
  %arrayidx282 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld281, i32 0, i64 1
  %rtx283 = bitcast %union.rtunion_def* %arrayidx282 to %struct.rtx_def**
  %117 = load %struct.rtx_def*, %struct.rtx_def** %rtx283, align 8
  %118 = bitcast %struct.rtx_def* %117 to i32*
  %bf.load284 = load i32, i32* %118, align 8
  %bf.clear285 = and i32 %bf.load284, 65535
  %cmp286 = icmp eq i32 %bf.clear285, 58
  br i1 %cmp286, label %if.then.312, label %lor.lhs.false.288

lor.lhs.false.288:                                ; preds = %lor.lhs.false.280
  %119 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld289 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %119, i32 0, i32 1
  %arrayidx290 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld289, i32 0, i64 1
  %rtx291 = bitcast %union.rtunion_def* %arrayidx290 to %struct.rtx_def**
  %120 = load %struct.rtx_def*, %struct.rtx_def** %rtx291, align 8
  %121 = bitcast %struct.rtx_def* %120 to i32*
  %bf.load292 = load i32, i32* %121, align 8
  %bf.clear293 = and i32 %bf.load292, 65535
  %cmp294 = icmp eq i32 %bf.clear293, 134
  br i1 %cmp294, label %if.then.312, label %lor.lhs.false.296

lor.lhs.false.296:                                ; preds = %lor.lhs.false.288
  %122 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld297 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %122, i32 0, i32 1
  %arrayidx298 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld297, i32 0, i64 1
  %rtx299 = bitcast %union.rtunion_def* %arrayidx298 to %struct.rtx_def**
  %123 = load %struct.rtx_def*, %struct.rtx_def** %rtx299, align 8
  %124 = bitcast %struct.rtx_def* %123 to i32*
  %bf.load300 = load i32, i32* %124, align 8
  %bf.clear301 = and i32 %bf.load300, 65535
  %cmp302 = icmp eq i32 %bf.clear301, 56
  br i1 %cmp302, label %if.then.312, label %lor.lhs.false.304

lor.lhs.false.304:                                ; preds = %lor.lhs.false.296
  %125 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld305 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %125, i32 0, i32 1
  %arrayidx306 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld305, i32 0, i64 1
  %rtx307 = bitcast %union.rtunion_def* %arrayidx306 to %struct.rtx_def**
  %126 = load %struct.rtx_def*, %struct.rtx_def** %rtx307, align 8
  %127 = bitcast %struct.rtx_def* %126 to i32*
  %bf.load308 = load i32, i32* %127, align 8
  %bf.clear309 = and i32 %bf.load308, 65535
  %cmp310 = icmp eq i32 %bf.clear309, 140
  br i1 %cmp310, label %if.then.312, label %if.end.395

if.then.312:                                      ; preds = %lor.lhs.false.304, %lor.lhs.false.296, %lor.lhs.false.288, %lor.lhs.false.280, %lor.lhs.false.272, %lor.lhs.false.264, %lor.lhs.false.256, %land.lhs.true.248
  store %struct.rtx_def* null, %struct.rtx_def** %other, align 8
  %128 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld315 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %128, i32 0, i32 1
  %arrayidx316 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld315, i32 0, i64 1
  %rtx317 = bitcast %union.rtunion_def* %arrayidx316 to %struct.rtx_def**
  %129 = load %struct.rtx_def*, %struct.rtx_def** %rtx317, align 8
  %130 = bitcast %struct.rtx_def* %129 to i32*
  %bf.load318 = load i32, i32* %130, align 8
  %bf.clear319 = and i32 %bf.load318, 65535
  %cmp320 = icmp eq i32 %bf.clear319, 54
  br i1 %cmp320, label %if.then.322, label %if.else.335

if.then.322:                                      ; preds = %if.then.312
  %131 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld323 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %131, i32 0, i32 1
  %arrayidx324 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld323, i32 0, i64 1
  %rtx325 = bitcast %union.rtunion_def* %arrayidx324 to %struct.rtx_def**
  %132 = load %struct.rtx_def*, %struct.rtx_def** %rtx325, align 8
  store %struct.rtx_def* %132, %struct.rtx_def** %constant, align 8
  %133 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld326 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %133, i32 0, i32 1
  %arrayidx327 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld326, i32 0, i64 0
  %rtx328 = bitcast %union.rtunion_def* %arrayidx327 to %struct.rtx_def**
  %134 = load %struct.rtx_def*, %struct.rtx_def** %rtx328, align 8
  %fld329 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %134, i32 0, i32 1
  %arrayidx330 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld329, i32 0, i64 1
  %rtx331 = bitcast %union.rtunion_def* %arrayidx330 to %struct.rtx_def**
  %135 = load %struct.rtx_def*, %struct.rtx_def** %rtx331, align 8
  %fld332 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %135, i32 0, i32 1
  %arrayidx333 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld332, i32 0, i64 1
  %rtx334 = bitcast %union.rtunion_def* %arrayidx333 to %struct.rtx_def**
  %136 = load %struct.rtx_def*, %struct.rtx_def** %rtx334, align 8
  store %struct.rtx_def* %136, %struct.rtx_def** %other, align 8
  br label %if.end.364

if.else.335:                                      ; preds = %if.then.312
  %137 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld336 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %137, i32 0, i32 1
  %arrayidx337 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld336, i32 0, i64 0
  %rtx338 = bitcast %union.rtunion_def* %arrayidx337 to %struct.rtx_def**
  %138 = load %struct.rtx_def*, %struct.rtx_def** %rtx338, align 8
  %fld339 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %138, i32 0, i32 1
  %arrayidx340 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld339, i32 0, i64 1
  %rtx341 = bitcast %union.rtunion_def* %arrayidx340 to %struct.rtx_def**
  %139 = load %struct.rtx_def*, %struct.rtx_def** %rtx341, align 8
  %fld342 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %139, i32 0, i32 1
  %arrayidx343 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld342, i32 0, i64 1
  %rtx344 = bitcast %union.rtunion_def* %arrayidx343 to %struct.rtx_def**
  %140 = load %struct.rtx_def*, %struct.rtx_def** %rtx344, align 8
  %141 = bitcast %struct.rtx_def* %140 to i32*
  %bf.load345 = load i32, i32* %141, align 8
  %bf.clear346 = and i32 %bf.load345, 65535
  %cmp347 = icmp eq i32 %bf.clear346, 54
  br i1 %cmp347, label %if.then.349, label %if.else.362

if.then.349:                                      ; preds = %if.else.335
  %142 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld350 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %142, i32 0, i32 1
  %arrayidx351 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld350, i32 0, i64 0
  %rtx352 = bitcast %union.rtunion_def* %arrayidx351 to %struct.rtx_def**
  %143 = load %struct.rtx_def*, %struct.rtx_def** %rtx352, align 8
  %fld353 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %143, i32 0, i32 1
  %arrayidx354 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld353, i32 0, i64 1
  %rtx355 = bitcast %union.rtunion_def* %arrayidx354 to %struct.rtx_def**
  %144 = load %struct.rtx_def*, %struct.rtx_def** %rtx355, align 8
  %fld356 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %144, i32 0, i32 1
  %arrayidx357 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld356, i32 0, i64 1
  %rtx358 = bitcast %union.rtunion_def* %arrayidx357 to %struct.rtx_def**
  %145 = load %struct.rtx_def*, %struct.rtx_def** %rtx358, align 8
  store %struct.rtx_def* %145, %struct.rtx_def** %constant, align 8
  %146 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld359 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %146, i32 0, i32 1
  %arrayidx360 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld359, i32 0, i64 1
  %rtx361 = bitcast %union.rtunion_def* %arrayidx360 to %struct.rtx_def**
  %147 = load %struct.rtx_def*, %struct.rtx_def** %rtx361, align 8
  store %struct.rtx_def* %147, %struct.rtx_def** %other, align 8
  br label %if.end.363

if.else.362:                                      ; preds = %if.else.335
  store %struct.rtx_def* null, %struct.rtx_def** %constant, align 8
  br label %if.end.363

if.end.363:                                       ; preds = %if.else.362, %if.then.349
  br label %if.end.364

if.end.364:                                       ; preds = %if.end.363, %if.then.322
  %148 = load %struct.rtx_def*, %struct.rtx_def** %constant, align 8
  %tobool365 = icmp ne %struct.rtx_def* %148, null
  br i1 %tobool365, label %if.then.366, label %if.end.394

if.then.366:                                      ; preds = %if.end.364
  store i32 1, i32* %changed, align 4
  %149 = load i32, i32* @target_flags, align 4
  %and367 = and i32 %149, 33554432
  %tobool368 = icmp ne i32 %and367, 0
  %cond369 = select i1 %tobool368, i32 5, i32 4
  %150 = load i32, i32* @target_flags, align 4
  %and370 = and i32 %150, 33554432
  %tobool371 = icmp ne i32 %and370, 0
  %cond372 = select i1 %tobool371, i32 5, i32 4
  %151 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld373 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %151, i32 0, i32 1
  %arrayidx374 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld373, i32 0, i64 0
  %rtx375 = bitcast %union.rtunion_def* %arrayidx374 to %struct.rtx_def**
  %152 = load %struct.rtx_def*, %struct.rtx_def** %rtx375, align 8
  %fld376 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %152, i32 0, i32 1
  %arrayidx377 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld376, i32 0, i64 0
  %rtx378 = bitcast %union.rtunion_def* %arrayidx377 to %struct.rtx_def**
  %153 = load %struct.rtx_def*, %struct.rtx_def** %rtx378, align 8
  %154 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld379 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %154, i32 0, i32 1
  %arrayidx380 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld379, i32 0, i64 0
  %rtx381 = bitcast %union.rtunion_def* %arrayidx380 to %struct.rtx_def**
  %155 = load %struct.rtx_def*, %struct.rtx_def** %rtx381, align 8
  %fld382 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %155, i32 0, i32 1
  %arrayidx383 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld382, i32 0, i64 1
  %rtx384 = bitcast %union.rtunion_def* %arrayidx383 to %struct.rtx_def**
  %156 = load %struct.rtx_def*, %struct.rtx_def** %rtx384, align 8
  %fld385 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %156, i32 0, i32 1
  %arrayidx386 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld385, i32 0, i64 0
  %rtx387 = bitcast %union.rtunion_def* %arrayidx386 to %struct.rtx_def**
  %157 = load %struct.rtx_def*, %struct.rtx_def** %rtx387, align 8
  %call388 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %cond372, %struct.rtx_def* %153, %struct.rtx_def* %157)
  %158 = load %struct.rtx_def*, %struct.rtx_def** %other, align 8
  %159 = load %struct.rtx_def*, %struct.rtx_def** %constant, align 8
  %fld389 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %159, i32 0, i32 1
  %arrayidx390 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld389, i32 0, i64 0
  %rtwint391 = bitcast %union.rtunion_def* %arrayidx390 to i64*
  %160 = load i64, i64* %rtwint391, align 8
  %call392 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %158, i64 %160)
  %call393 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %cond369, %struct.rtx_def* %call388, %struct.rtx_def* %call392)
  store %struct.rtx_def* %call393, %struct.rtx_def** %x.addr, align 8
  br label %if.end.394

if.end.394:                                       ; preds = %if.then.366, %if.end.364
  br label %if.end.395

if.end.395:                                       ; preds = %if.end.394, %lor.lhs.false.304, %land.lhs.true.237, %land.lhs.true.226, %land.lhs.true.218, %if.else
  br label %if.end.396

if.end.396:                                       ; preds = %if.end.395, %if.then.190
  %161 = load i32, i32* %changed, align 4
  %tobool397 = icmp ne i32 %161, 0
  br i1 %tobool397, label %land.lhs.true.398, label %if.end.402

land.lhs.true.398:                                ; preds = %if.end.396
  %162 = load i32, i32* %mode.addr, align 4
  %163 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %call399 = call i32 @legitimate_address_p(i32 %162, %struct.rtx_def* %163, i32 0)
  %tobool400 = icmp ne i32 %call399, 0
  br i1 %tobool400, label %if.then.401, label %if.end.402

if.then.401:                                      ; preds = %land.lhs.true.398
  %164 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  store %struct.rtx_def* %164, %struct.rtx_def** %retval
  br label %return

if.end.402:                                       ; preds = %land.lhs.true.398, %if.end.396
  %165 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld403 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %165, i32 0, i32 1
  %arrayidx404 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld403, i32 0, i64 0
  %rtx405 = bitcast %union.rtunion_def* %arrayidx404 to %struct.rtx_def**
  %166 = load %struct.rtx_def*, %struct.rtx_def** %rtx405, align 8
  %167 = bitcast %struct.rtx_def* %166 to i32*
  %bf.load406 = load i32, i32* %167, align 8
  %bf.clear407 = and i32 %bf.load406, 65535
  %cmp408 = icmp eq i32 %bf.clear407, 78
  br i1 %cmp408, label %if.then.410, label %if.end.418

if.then.410:                                      ; preds = %if.end.402
  store i32 1, i32* %changed, align 4
  %168 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld411 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %168, i32 0, i32 1
  %arrayidx412 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld411, i32 0, i64 0
  %rtx413 = bitcast %union.rtunion_def* %arrayidx412 to %struct.rtx_def**
  %169 = load %struct.rtx_def*, %struct.rtx_def** %rtx413, align 8
  %call414 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %169, %struct.rtx_def* null)
  %170 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld415 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %170, i32 0, i32 1
  %arrayidx416 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld415, i32 0, i64 0
  %rtx417 = bitcast %union.rtunion_def* %arrayidx416 to %struct.rtx_def**
  store %struct.rtx_def* %call414, %struct.rtx_def** %rtx417, align 8
  br label %if.end.418

if.end.418:                                       ; preds = %if.then.410, %if.end.402
  %171 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld419 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %171, i32 0, i32 1
  %arrayidx420 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld419, i32 0, i64 1
  %rtx421 = bitcast %union.rtunion_def* %arrayidx420 to %struct.rtx_def**
  %172 = load %struct.rtx_def*, %struct.rtx_def** %rtx421, align 8
  %173 = bitcast %struct.rtx_def* %172 to i32*
  %bf.load422 = load i32, i32* %173, align 8
  %bf.clear423 = and i32 %bf.load422, 65535
  %cmp424 = icmp eq i32 %bf.clear423, 78
  br i1 %cmp424, label %if.then.426, label %if.end.434

if.then.426:                                      ; preds = %if.end.418
  store i32 1, i32* %changed, align 4
  %174 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld427 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %174, i32 0, i32 1
  %arrayidx428 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld427, i32 0, i64 1
  %rtx429 = bitcast %union.rtunion_def* %arrayidx428 to %struct.rtx_def**
  %175 = load %struct.rtx_def*, %struct.rtx_def** %rtx429, align 8
  %call430 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %175, %struct.rtx_def* null)
  %176 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld431 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %176, i32 0, i32 1
  %arrayidx432 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld431, i32 0, i64 1
  %rtx433 = bitcast %union.rtunion_def* %arrayidx432 to %struct.rtx_def**
  store %struct.rtx_def* %call430, %struct.rtx_def** %rtx433, align 8
  br label %if.end.434

if.end.434:                                       ; preds = %if.then.426, %if.end.418
  %177 = load i32, i32* %changed, align 4
  %tobool435 = icmp ne i32 %177, 0
  br i1 %tobool435, label %land.lhs.true.436, label %if.end.453

land.lhs.true.436:                                ; preds = %if.end.434
  %178 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld437 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %178, i32 0, i32 1
  %arrayidx438 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld437, i32 0, i64 1
  %rtx439 = bitcast %union.rtunion_def* %arrayidx438 to %struct.rtx_def**
  %179 = load %struct.rtx_def*, %struct.rtx_def** %rtx439, align 8
  %180 = bitcast %struct.rtx_def* %179 to i32*
  %bf.load440 = load i32, i32* %180, align 8
  %bf.clear441 = and i32 %bf.load440, 65535
  %cmp442 = icmp eq i32 %bf.clear441, 61
  br i1 %cmp442, label %land.lhs.true.444, label %if.end.453

land.lhs.true.444:                                ; preds = %land.lhs.true.436
  %181 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld445 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %181, i32 0, i32 1
  %arrayidx446 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld445, i32 0, i64 0
  %rtx447 = bitcast %union.rtunion_def* %arrayidx446 to %struct.rtx_def**
  %182 = load %struct.rtx_def*, %struct.rtx_def** %rtx447, align 8
  %183 = bitcast %struct.rtx_def* %182 to i32*
  %bf.load448 = load i32, i32* %183, align 8
  %bf.clear449 = and i32 %bf.load448, 65535
  %cmp450 = icmp eq i32 %bf.clear449, 61
  br i1 %cmp450, label %if.then.452, label %if.end.453

if.then.452:                                      ; preds = %land.lhs.true.444
  %184 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  store %struct.rtx_def* %184, %struct.rtx_def** %retval
  br label %return

if.end.453:                                       ; preds = %land.lhs.true.444, %land.lhs.true.436, %if.end.434
  %185 = load i32, i32* @flag_pic, align 4
  %tobool454 = icmp ne i32 %185, 0
  br i1 %tobool454, label %land.lhs.true.455, label %if.end.487

land.lhs.true.455:                                ; preds = %if.end.453
  %186 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld456 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %186, i32 0, i32 1
  %arrayidx457 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld456, i32 0, i64 1
  %rtx458 = bitcast %union.rtunion_def* %arrayidx457 to %struct.rtx_def**
  %187 = load %struct.rtx_def*, %struct.rtx_def** %rtx458, align 8
  %188 = bitcast %struct.rtx_def* %187 to i32*
  %bf.load459 = load i32, i32* %188, align 8
  %bf.clear460 = and i32 %bf.load459, 65535
  %cmp461 = icmp eq i32 %bf.clear460, 68
  br i1 %cmp461, label %if.then.485, label %lor.lhs.false.463

lor.lhs.false.463:                                ; preds = %land.lhs.true.455
  %189 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld464 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %189, i32 0, i32 1
  %arrayidx465 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld464, i32 0, i64 1
  %rtx466 = bitcast %union.rtunion_def* %arrayidx465 to %struct.rtx_def**
  %190 = load %struct.rtx_def*, %struct.rtx_def** %rtx466, align 8
  %191 = bitcast %struct.rtx_def* %190 to i32*
  %bf.load467 = load i32, i32* %191, align 8
  %bf.clear468 = and i32 %bf.load467, 65535
  %cmp469 = icmp eq i32 %bf.clear468, 67
  br i1 %cmp469, label %if.then.485, label %lor.lhs.false.471

lor.lhs.false.471:                                ; preds = %lor.lhs.false.463
  %192 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld472 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %192, i32 0, i32 1
  %arrayidx473 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld472, i32 0, i64 1
  %rtx474 = bitcast %union.rtunion_def* %arrayidx473 to %struct.rtx_def**
  %193 = load %struct.rtx_def*, %struct.rtx_def** %rtx474, align 8
  %194 = bitcast %struct.rtx_def* %193 to i32*
  %bf.load475 = load i32, i32* %194, align 8
  %bf.clear476 = and i32 %bf.load475, 65535
  %cmp477 = icmp eq i32 %bf.clear476, 58
  br i1 %cmp477, label %land.lhs.true.479, label %if.end.487

land.lhs.true.479:                                ; preds = %lor.lhs.false.471
  %195 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld480 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %195, i32 0, i32 1
  %arrayidx481 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld480, i32 0, i64 1
  %rtx482 = bitcast %union.rtunion_def* %arrayidx481 to %struct.rtx_def**
  %196 = load %struct.rtx_def*, %struct.rtx_def** %rtx482, align 8
  %call483 = call i32 @symbolic_reference_mentioned_p(%struct.rtx_def* %196)
  %tobool484 = icmp ne i32 %call483, 0
  br i1 %tobool484, label %if.then.485, label %if.end.487

if.then.485:                                      ; preds = %land.lhs.true.479, %lor.lhs.false.463, %land.lhs.true.455
  store i32 1, i32* %changed, align 4
  %197 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %call486 = call %struct.rtx_def* @legitimize_pic_address(%struct.rtx_def* %197, %struct.rtx_def* null)
  store %struct.rtx_def* %call486, %struct.rtx_def** %x.addr, align 8
  br label %if.end.487

if.end.487:                                       ; preds = %if.then.485, %land.lhs.true.479, %lor.lhs.false.471, %if.end.453
  %198 = load i32, i32* %changed, align 4
  %tobool488 = icmp ne i32 %198, 0
  br i1 %tobool488, label %land.lhs.true.489, label %if.end.493

land.lhs.true.489:                                ; preds = %if.end.487
  %199 = load i32, i32* %mode.addr, align 4
  %200 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %call490 = call i32 @legitimate_address_p(i32 %199, %struct.rtx_def* %200, i32 0)
  %tobool491 = icmp ne i32 %call490, 0
  br i1 %tobool491, label %if.then.492, label %if.end.493

if.then.492:                                      ; preds = %land.lhs.true.489
  %201 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  store %struct.rtx_def* %201, %struct.rtx_def** %retval
  br label %return

if.end.493:                                       ; preds = %land.lhs.true.489, %if.end.487
  %202 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld494 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %202, i32 0, i32 1
  %arrayidx495 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld494, i32 0, i64 0
  %rtx496 = bitcast %union.rtunion_def* %arrayidx495 to %struct.rtx_def**
  %203 = load %struct.rtx_def*, %struct.rtx_def** %rtx496, align 8
  %204 = bitcast %struct.rtx_def* %203 to i32*
  %bf.load497 = load i32, i32* %204, align 8
  %bf.clear498 = and i32 %bf.load497, 65535
  %cmp499 = icmp eq i32 %bf.clear498, 61
  br i1 %cmp499, label %if.then.501, label %if.else.520

if.then.501:                                      ; preds = %if.end.493
  %205 = load i32, i32* @target_flags, align 4
  %and503 = and i32 %205, 33554432
  %tobool504 = icmp ne i32 %and503, 0
  %cond505 = select i1 %tobool504, i32 5, i32 4
  %call506 = call %struct.rtx_def* @gen_reg_rtx(i32 %cond505)
  store %struct.rtx_def* %call506, %struct.rtx_def** %temp, align 8
  %206 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld508 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %206, i32 0, i32 1
  %arrayidx509 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld508, i32 0, i64 1
  %rtx510 = bitcast %union.rtunion_def* %arrayidx509 to %struct.rtx_def**
  %207 = load %struct.rtx_def*, %struct.rtx_def** %rtx510, align 8
  %208 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %call511 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %207, %struct.rtx_def* %208)
  store %struct.rtx_def* %call511, %struct.rtx_def** %val, align 8
  %209 = load %struct.rtx_def*, %struct.rtx_def** %val, align 8
  %210 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %cmp512 = icmp ne %struct.rtx_def* %209, %210
  br i1 %cmp512, label %if.then.514, label %if.end.516

if.then.514:                                      ; preds = %if.then.501
  %211 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %212 = load %struct.rtx_def*, %struct.rtx_def** %val, align 8
  %call515 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %211, %struct.rtx_def* %212)
  br label %if.end.516

if.end.516:                                       ; preds = %if.then.514, %if.then.501
  %213 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %214 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld517 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %214, i32 0, i32 1
  %arrayidx518 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld517, i32 0, i64 1
  %rtx519 = bitcast %union.rtunion_def* %arrayidx518 to %struct.rtx_def**
  store %struct.rtx_def* %213, %struct.rtx_def** %rtx519, align 8
  %215 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  store %struct.rtx_def* %215, %struct.rtx_def** %retval
  br label %return

if.else.520:                                      ; preds = %if.end.493
  %216 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld521 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %216, i32 0, i32 1
  %arrayidx522 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld521, i32 0, i64 1
  %rtx523 = bitcast %union.rtunion_def* %arrayidx522 to %struct.rtx_def**
  %217 = load %struct.rtx_def*, %struct.rtx_def** %rtx523, align 8
  %218 = bitcast %struct.rtx_def* %217 to i32*
  %bf.load524 = load i32, i32* %218, align 8
  %bf.clear525 = and i32 %bf.load524, 65535
  %cmp526 = icmp eq i32 %bf.clear525, 61
  br i1 %cmp526, label %if.then.528, label %if.end.549

if.then.528:                                      ; preds = %if.else.520
  %219 = load i32, i32* @target_flags, align 4
  %and531 = and i32 %219, 33554432
  %tobool532 = icmp ne i32 %and531, 0
  %cond533 = select i1 %tobool532, i32 5, i32 4
  %call534 = call %struct.rtx_def* @gen_reg_rtx(i32 %cond533)
  store %struct.rtx_def* %call534, %struct.rtx_def** %temp530, align 8
  %220 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld537 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %220, i32 0, i32 1
  %arrayidx538 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld537, i32 0, i64 0
  %rtx539 = bitcast %union.rtunion_def* %arrayidx538 to %struct.rtx_def**
  %221 = load %struct.rtx_def*, %struct.rtx_def** %rtx539, align 8
  %222 = load %struct.rtx_def*, %struct.rtx_def** %temp530, align 8
  %call540 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %221, %struct.rtx_def* %222)
  store %struct.rtx_def* %call540, %struct.rtx_def** %val536, align 8
  %223 = load %struct.rtx_def*, %struct.rtx_def** %val536, align 8
  %224 = load %struct.rtx_def*, %struct.rtx_def** %temp530, align 8
  %cmp541 = icmp ne %struct.rtx_def* %223, %224
  br i1 %cmp541, label %if.then.543, label %if.end.545

if.then.543:                                      ; preds = %if.then.528
  %225 = load %struct.rtx_def*, %struct.rtx_def** %temp530, align 8
  %226 = load %struct.rtx_def*, %struct.rtx_def** %val536, align 8
  %call544 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %225, %struct.rtx_def* %226)
  br label %if.end.545

if.end.545:                                       ; preds = %if.then.543, %if.then.528
  %227 = load %struct.rtx_def*, %struct.rtx_def** %temp530, align 8
  %228 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld546 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %228, i32 0, i32 1
  %arrayidx547 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld546, i32 0, i64 0
  %rtx548 = bitcast %union.rtunion_def* %arrayidx547 to %struct.rtx_def**
  store %struct.rtx_def* %227, %struct.rtx_def** %rtx548, align 8
  %229 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  store %struct.rtx_def* %229, %struct.rtx_def** %retval
  br label %return

if.end.549:                                       ; preds = %if.else.520
  br label %if.end.550

if.end.550:                                       ; preds = %if.end.549
  br label %if.end.551

if.end.551:                                       ; preds = %if.end.550, %if.end.42
  %230 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  store %struct.rtx_def* %230, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end.551, %if.end.545, %if.end.516, %if.then.492, %if.then.452, %if.then.401, %if.then.12
  %231 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %231
}

declare i32 @exact_log2_wide(i64) #0

declare %struct.rtx_def* @force_reg(i32, %struct.rtx_def*) #0

declare %struct.rtx_def* @force_operand(%struct.rtx_def*, %struct.rtx_def*) #0

; Function Attrs: nounwind uwtable
define void @i386_dwarf_output_addr_const(%struct._IO_FILE* %file, %struct.rtx_def* %x) #1 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %x.addr = alloca %struct.rtx_def*, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %1 = load i32, i32* @target_flags, align 4
  %and = and i32 %1, 33554432
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i32 0, i32 0)
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.101, i32 0, i32 0), i8* %cond)
  %2 = load i32, i32* @flag_pic, align 4
  %tobool1 = icmp ne i32 %2, 0
  br i1 %tobool1, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  call void @output_pic_addr_const(%struct._IO_FILE* %3, %struct.rtx_def* %4, i32 0)
  br label %if.end

if.else:                                          ; preds = %entry
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  call void @output_addr_const(%struct._IO_FILE* %5, %struct.rtx_def* %6)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call2 = call i32 @fputc(i32 10, %struct._IO_FILE* %7)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @output_pic_addr_const(%struct._IO_FILE* %file, %struct.rtx_def* %x, i32 %code) #1 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %x.addr = alloca %struct.rtx_def*, align 8
  %code.addr = alloca i32, align 4
  %buf = alloca [256 x i8], align 16
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  store i32 %code, i32* %code.addr, align 4
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %sw.default.121 [
    i32 59, label %sw.bb
    i32 68, label %sw.bb.1
    i32 67, label %sw.bb.8
    i32 36, label %sw.bb.11
    i32 54, label %sw.bb.16
    i32 58, label %sw.bb.20
    i32 55, label %sw.bb.24
    i32 75, label %sw.bb.54
    i32 76, label %sw.bb.87
    i32 42, label %sw.bb.100
  ]

sw.bb:                                            ; preds = %entry
  %2 = load i32, i32* @flag_pic, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %sw.bb
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call = call i32 @_IO_putc(i32 46, %struct._IO_FILE* %3)
  br label %if.end

if.else:                                          ; preds = %sw.bb
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 5343, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @__FUNCTION__.output_pic_addr_const, i32 0, i32 0)) #7
  unreachable

if.end:                                           ; preds = %if.then
  br label %sw.epilog.122

sw.bb.1:                                          ; preds = %entry
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtstr = bitcast %union.rtunion_def* %arrayidx to i8**
  %6 = load i8*, i8** %rtstr, align 8
  call void @assemble_name(%struct._IO_FILE* %4, i8* %6)
  %7 = load i32, i32* %code.addr, align 4
  %cmp = icmp eq i32 %7, 80
  br i1 %cmp, label %land.lhs.true, label %if.end.7

land.lhs.true:                                    ; preds = %sw.bb.1
  %8 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %9 = bitcast %struct.rtx_def* %8 to i32*
  %bf.load2 = load i32, i32* %9, align 8
  %bf.lshr = lshr i32 %bf.load2, 27
  %bf.clear3 = and i32 %bf.lshr, 1
  %tobool4 = icmp ne i32 %bf.clear3, 0
  br i1 %tobool4, label %if.end.7, label %if.then.5

if.then.5:                                        ; preds = %land.lhs.true
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call6 = call i32 @fputs(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.229, i32 0, i32 0), %struct._IO_FILE* %10)
  br label %if.end.7

if.end.7:                                         ; preds = %if.then.5, %land.lhs.true, %sw.bb.1
  br label %sw.epilog.122

sw.bb.8:                                          ; preds = %entry
  %11 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld9 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1
  %arrayidx10 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld9, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx10 to %struct.rtx_def**
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %12, %struct.rtx_def** %x.addr, align 8
  br label %sw.bb.11

sw.bb.11:                                         ; preds = %entry, %sw.bb.8
  br label %do.body

do.body:                                          ; preds = %sw.bb.11
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  %13 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld12 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1
  %arrayidx13 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld12, i32 0, i64 5
  %rtint = bitcast %union.rtunion_def* %arrayidx13 to i32*
  %14 = load i32, i32* %rtint, align 4
  %call14 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.55, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.208, i32 0, i32 0), i32 %14) #4
  br label %do.end

do.end:                                           ; preds = %do.body
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8
  %arraydecay15 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  call void @assemble_name(%struct._IO_FILE* %15, i8* %arraydecay15)
  br label %sw.epilog.122

sw.bb.16:                                         ; preds = %entry
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %17 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld17 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1
  %arrayidx18 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld17, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx18 to i64*
  %18 = load i64, i64* %rtwint, align 8
  %call19 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %16, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.130, i32 0, i32 0), i64 %18)
  br label %sw.epilog.122

sw.bb.20:                                         ; preds = %entry
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %20 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld21 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1
  %arrayidx22 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld21, i32 0, i64 0
  %rtx23 = bitcast %union.rtunion_def* %arrayidx22 to %struct.rtx_def**
  %21 = load %struct.rtx_def*, %struct.rtx_def** %rtx23, align 8
  %22 = load i32, i32* %code.addr, align 4
  call void @output_pic_addr_const(%struct._IO_FILE* %19, %struct.rtx_def* %21, i32 %22)
  br label %sw.epilog.122

sw.bb.24:                                         ; preds = %entry
  %23 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %24 = bitcast %struct.rtx_def* %23 to i32*
  %bf.load25 = load i32, i32* %24, align 8
  %bf.lshr26 = lshr i32 %bf.load25, 16
  %bf.clear27 = and i32 %bf.lshr26, 255
  %cmp28 = icmp eq i32 %bf.clear27, 0
  br i1 %cmp28, label %if.then.29, label %if.else.52

if.then.29:                                       ; preds = %sw.bb.24
  %25 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld30 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1
  %arrayidx31 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld30, i32 0, i64 2
  %rtwint32 = bitcast %union.rtunion_def* %arrayidx31 to i64*
  %26 = load i64, i64* %rtwint32, align 8
  %tobool33 = icmp ne i64 %26, 0
  br i1 %tobool33, label %if.then.38, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then.29
  %27 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld34 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1
  %arrayidx35 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld34, i32 0, i64 1
  %rtwint36 = bitcast %union.rtunion_def* %arrayidx35 to i64*
  %28 = load i64, i64* %rtwint36, align 8
  %cmp37 = icmp slt i64 %28, 0
  br i1 %cmp37, label %if.then.38, label %if.else.46

if.then.38:                                       ; preds = %lor.lhs.false, %if.then.29
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %30 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld39 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %30, i32 0, i32 1
  %arrayidx40 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld39, i32 0, i64 2
  %rtwint41 = bitcast %union.rtunion_def* %arrayidx40 to i64*
  %31 = load i64, i64* %rtwint41, align 8
  %32 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld42 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %32, i32 0, i32 1
  %arrayidx43 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld42, i32 0, i64 1
  %rtwint44 = bitcast %union.rtunion_def* %arrayidx43 to i64*
  %33 = load i64, i64* %rtwint44, align 8
  %call45 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %29, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.230, i32 0, i32 0), i64 %31, i64 %33)
  br label %if.end.51

if.else.46:                                       ; preds = %lor.lhs.false
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %35 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld47 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %35, i32 0, i32 1
  %arrayidx48 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld47, i32 0, i64 1
  %rtwint49 = bitcast %union.rtunion_def* %arrayidx48 to i64*
  %36 = load i64, i64* %rtwint49, align 8
  %call50 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %34, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.130, i32 0, i32 0), i64 %36)
  br label %if.end.51

if.end.51:                                        ; preds = %if.else.46, %if.then.38
  br label %if.end.53

if.else.52:                                       ; preds = %sw.bb.24
  call void (i8*, ...) @output_operand_lossage(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.231, i32 0, i32 0))
  br label %if.end.53

if.end.53:                                        ; preds = %if.else.52, %if.end.51
  br label %sw.epilog.122

sw.bb.54:                                         ; preds = %entry
  %37 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld55 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %37, i32 0, i32 1
  %arrayidx56 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld55, i32 0, i64 0
  %rtx57 = bitcast %union.rtunion_def* %arrayidx56 to %struct.rtx_def**
  %38 = load %struct.rtx_def*, %struct.rtx_def** %rtx57, align 8
  %39 = bitcast %struct.rtx_def* %38 to i32*
  %bf.load58 = load i32, i32* %39, align 8
  %bf.clear59 = and i32 %bf.load58, 65535
  %cmp60 = icmp eq i32 %bf.clear59, 54
  br i1 %cmp60, label %if.then.61, label %if.else.69

if.then.61:                                       ; preds = %sw.bb.54
  %40 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %41 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld62 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %41, i32 0, i32 1
  %arrayidx63 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld62, i32 0, i64 0
  %rtx64 = bitcast %union.rtunion_def* %arrayidx63 to %struct.rtx_def**
  %42 = load %struct.rtx_def*, %struct.rtx_def** %rtx64, align 8
  %43 = load i32, i32* %code.addr, align 4
  call void @output_pic_addr_const(%struct._IO_FILE* %40, %struct.rtx_def* %42, i32 %43)
  %44 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call65 = call i32 @_IO_putc(i32 43, %struct._IO_FILE* %44)
  %45 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %46 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld66 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %46, i32 0, i32 1
  %arrayidx67 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld66, i32 0, i64 1
  %rtx68 = bitcast %union.rtunion_def* %arrayidx67 to %struct.rtx_def**
  %47 = load %struct.rtx_def*, %struct.rtx_def** %rtx68, align 8
  %48 = load i32, i32* %code.addr, align 4
  call void @output_pic_addr_const(%struct._IO_FILE* %45, %struct.rtx_def* %47, i32 %48)
  br label %if.end.86

if.else.69:                                       ; preds = %sw.bb.54
  %49 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld70 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %49, i32 0, i32 1
  %arrayidx71 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld70, i32 0, i64 1
  %rtx72 = bitcast %union.rtunion_def* %arrayidx71 to %struct.rtx_def**
  %50 = load %struct.rtx_def*, %struct.rtx_def** %rtx72, align 8
  %51 = bitcast %struct.rtx_def* %50 to i32*
  %bf.load73 = load i32, i32* %51, align 8
  %bf.clear74 = and i32 %bf.load73, 65535
  %cmp75 = icmp eq i32 %bf.clear74, 54
  br i1 %cmp75, label %if.then.76, label %if.else.84

if.then.76:                                       ; preds = %if.else.69
  %52 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %53 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld77 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %53, i32 0, i32 1
  %arrayidx78 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld77, i32 0, i64 1
  %rtx79 = bitcast %union.rtunion_def* %arrayidx78 to %struct.rtx_def**
  %54 = load %struct.rtx_def*, %struct.rtx_def** %rtx79, align 8
  %55 = load i32, i32* %code.addr, align 4
  call void @output_pic_addr_const(%struct._IO_FILE* %52, %struct.rtx_def* %54, i32 %55)
  %56 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call80 = call i32 @_IO_putc(i32 43, %struct._IO_FILE* %56)
  %57 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %58 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld81 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %58, i32 0, i32 1
  %arrayidx82 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld81, i32 0, i64 0
  %rtx83 = bitcast %union.rtunion_def* %arrayidx82 to %struct.rtx_def**
  %59 = load %struct.rtx_def*, %struct.rtx_def** %rtx83, align 8
  %60 = load i32, i32* %code.addr, align 4
  call void @output_pic_addr_const(%struct._IO_FILE* %57, %struct.rtx_def* %59, i32 %60)
  br label %if.end.85

if.else.84:                                       ; preds = %if.else.69
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 5402, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @__FUNCTION__.output_pic_addr_const, i32 0, i32 0)) #7
  unreachable

if.end.85:                                        ; preds = %if.then.76
  br label %if.end.86

if.end.86:                                        ; preds = %if.end.85, %if.then.61
  br label %sw.epilog.122

sw.bb.87:                                         ; preds = %entry
  %61 = load i32, i32* @ix86_asm_dialect, align 4
  %cmp88 = icmp eq i32 %61, 1
  %cond = select i1 %cmp88, i32 40, i32 91
  %62 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call89 = call i32 @_IO_putc(i32 %cond, %struct._IO_FILE* %62)
  %63 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %64 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld90 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %64, i32 0, i32 1
  %arrayidx91 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld90, i32 0, i64 0
  %rtx92 = bitcast %union.rtunion_def* %arrayidx91 to %struct.rtx_def**
  %65 = load %struct.rtx_def*, %struct.rtx_def** %rtx92, align 8
  %66 = load i32, i32* %code.addr, align 4
  call void @output_pic_addr_const(%struct._IO_FILE* %63, %struct.rtx_def* %65, i32 %66)
  %67 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call93 = call i32 @_IO_putc(i32 45, %struct._IO_FILE* %67)
  %68 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %69 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld94 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %69, i32 0, i32 1
  %arrayidx95 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld94, i32 0, i64 1
  %rtx96 = bitcast %union.rtunion_def* %arrayidx95 to %struct.rtx_def**
  %70 = load %struct.rtx_def*, %struct.rtx_def** %rtx96, align 8
  %71 = load i32, i32* %code.addr, align 4
  call void @output_pic_addr_const(%struct._IO_FILE* %68, %struct.rtx_def* %70, i32 %71)
  %72 = load i32, i32* @ix86_asm_dialect, align 4
  %cmp97 = icmp eq i32 %72, 1
  %cond98 = select i1 %cmp97, i32 41, i32 93
  %73 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call99 = call i32 @_IO_putc(i32 %cond98, %struct._IO_FILE* %73)
  br label %sw.epilog.122

sw.bb.100:                                        ; preds = %entry
  %74 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld101 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %74, i32 0, i32 1
  %arrayidx102 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld101, i32 0, i64 0
  %rtvec = bitcast %union.rtunion_def* %arrayidx102 to %struct.rtvec_def**
  %75 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec, align 8
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %75, i32 0, i32 0
  %76 = load i32, i32* %num_elem, align 4
  %cmp103 = icmp ne i32 %76, 1
  br i1 %cmp103, label %if.then.104, label %if.end.105

if.then.104:                                      ; preds = %sw.bb.100
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 5415, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @__FUNCTION__.output_pic_addr_const, i32 0, i32 0)) #7
  unreachable

if.end.105:                                       ; preds = %sw.bb.100
  %77 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %78 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld106 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %78, i32 0, i32 1
  %arrayidx107 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld106, i32 0, i64 0
  %rtvec108 = bitcast %union.rtunion_def* %arrayidx107 to %struct.rtvec_def**
  %79 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec108, align 8
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %79, i32 0, i32 1
  %arrayidx109 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i32 0, i64 0
  %80 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx109, align 8
  %81 = load i32, i32* %code.addr, align 4
  call void @output_pic_addr_const(%struct._IO_FILE* %77, %struct.rtx_def* %80, i32 %81)
  %82 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld110 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %82, i32 0, i32 1
  %arrayidx111 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld110, i32 0, i64 1
  %rtint112 = bitcast %union.rtunion_def* %arrayidx111 to i32*
  %83 = load i32, i32* %rtint112, align 4
  switch i32 %83, label %sw.default [
    i32 6, label %sw.bb.113
    i32 7, label %sw.bb.115
    i32 8, label %sw.bb.117
    i32 15, label %sw.bb.119
  ]

sw.bb.113:                                        ; preds = %if.end.105
  %84 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call114 = call i32 @fputs(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.232, i32 0, i32 0), %struct._IO_FILE* %84)
  br label %sw.epilog

sw.bb.115:                                        ; preds = %if.end.105
  %85 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call116 = call i32 @fputs(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.233, i32 0, i32 0), %struct._IO_FILE* %85)
  br label %sw.epilog

sw.bb.117:                                        ; preds = %if.end.105
  %86 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call118 = call i32 @fputs(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.229, i32 0, i32 0), %struct._IO_FILE* %86)
  br label %sw.epilog

sw.bb.119:                                        ; preds = %if.end.105
  %87 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call120 = call i32 @fputs(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.234, i32 0, i32 0), %struct._IO_FILE* %87)
  br label %sw.epilog

sw.default:                                       ; preds = %if.end.105
  call void (i8*, ...) @output_operand_lossage(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.235, i32 0, i32 0))
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb.119, %sw.bb.117, %sw.bb.115, %sw.bb.113
  br label %sw.epilog.122

sw.default.121:                                   ; preds = %entry
  call void (i8*, ...) @output_operand_lossage(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.236, i32 0, i32 0))
  br label %sw.epilog.122

sw.epilog.122:                                    ; preds = %sw.default.121, %sw.epilog, %sw.bb.87, %if.end.86, %if.end.53, %sw.bb.20, %sw.bb.16, %do.end, %if.end.7, %if.end
  ret void
}

declare void @output_addr_const(%struct._IO_FILE*, %struct.rtx_def*) #0

declare i32 @fputc(i32, %struct._IO_FILE*) #0

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @i386_simplify_dwarf_addr(%struct.rtx_def* %orig_x) #1 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %orig_x.addr = alloca %struct.rtx_def*, align 8
  %x = alloca %struct.rtx_def*, align 8
  %y = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %orig_x, %struct.rtx_def** %orig_x.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %orig_x.addr, align 8
  store %struct.rtx_def* %0, %struct.rtx_def** %x, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load = load i32, i32* %2, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 66
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %4 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %x, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load i32, i32* @target_flags, align 4
  %and = and i32 %5, 33554432
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then.1, label %if.end.30

if.then.1:                                        ; preds = %if.end
  %6 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %7 = bitcast %struct.rtx_def* %6 to i32*
  %bf.load2 = load i32, i32* %7, align 8
  %bf.clear3 = and i32 %bf.load2, 65535
  %cmp4 = icmp ne i32 %bf.clear3, 58
  br i1 %cmp4, label %if.then.22, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then.1
  %8 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld5 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1
  %arrayidx6 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld5, i32 0, i64 0
  %rtx7 = bitcast %union.rtunion_def* %arrayidx6 to %struct.rtx_def**
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rtx7, align 8
  %10 = bitcast %struct.rtx_def* %9 to i32*
  %bf.load8 = load i32, i32* %10, align 8
  %bf.clear9 = and i32 %bf.load8, 65535
  %cmp10 = icmp ne i32 %bf.clear9, 42
  br i1 %cmp10, label %if.then.22, label %lor.lhs.false.11

lor.lhs.false.11:                                 ; preds = %lor.lhs.false
  %11 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld12 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1
  %arrayidx13 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld12, i32 0, i64 0
  %rtx14 = bitcast %union.rtunion_def* %arrayidx13 to %struct.rtx_def**
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rtx14, align 8
  %fld15 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1
  %arrayidx16 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld15, i32 0, i64 1
  %rtint = bitcast %union.rtunion_def* %arrayidx16 to i32*
  %13 = load i32, i32* %rtint, align 4
  %cmp17 = icmp ne i32 %13, 15
  br i1 %cmp17, label %if.then.22, label %lor.lhs.false.18

lor.lhs.false.18:                                 ; preds = %lor.lhs.false.11
  %14 = load %struct.rtx_def*, %struct.rtx_def** %orig_x.addr, align 8
  %15 = bitcast %struct.rtx_def* %14 to i32*
  %bf.load19 = load i32, i32* %15, align 8
  %bf.clear20 = and i32 %bf.load19, 65535
  %cmp21 = icmp ne i32 %bf.clear20, 66
  br i1 %cmp21, label %if.then.22, label %if.end.23

if.then.22:                                       ; preds = %lor.lhs.false.18, %lor.lhs.false.11, %lor.lhs.false, %if.then.1
  %16 = load %struct.rtx_def*, %struct.rtx_def** %orig_x.addr, align 8
  store %struct.rtx_def* %16, %struct.rtx_def** %retval
  br label %return

if.end.23:                                        ; preds = %lor.lhs.false.18
  %17 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld24 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1
  %arrayidx25 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld24, i32 0, i64 0
  %rtx26 = bitcast %union.rtunion_def* %arrayidx25 to %struct.rtx_def**
  %18 = load %struct.rtx_def*, %struct.rtx_def** %rtx26, align 8
  %fld27 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1
  %arrayidx28 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld27, i32 0, i64 0
  %rtvec = bitcast %union.rtunion_def* %arrayidx28 to %struct.rtvec_def**
  %19 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec, align 8
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %19, i32 0, i32 1
  %arrayidx29 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i32 0, i64 0
  %20 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx29, align 8
  store %struct.rtx_def* %20, %struct.rtx_def** %retval
  br label %return

if.end.30:                                        ; preds = %if.end
  %21 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %22 = bitcast %struct.rtx_def* %21 to i32*
  %bf.load31 = load i32, i32* %22, align 8
  %bf.clear32 = and i32 %bf.load31, 65535
  %cmp33 = icmp ne i32 %bf.clear32, 75
  br i1 %cmp33, label %if.then.41, label %lor.lhs.false.34

lor.lhs.false.34:                                 ; preds = %if.end.30
  %23 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld35 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1
  %arrayidx36 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld35, i32 0, i64 1
  %rtx37 = bitcast %union.rtunion_def* %arrayidx36 to %struct.rtx_def**
  %24 = load %struct.rtx_def*, %struct.rtx_def** %rtx37, align 8
  %25 = bitcast %struct.rtx_def* %24 to i32*
  %bf.load38 = load i32, i32* %25, align 8
  %bf.clear39 = and i32 %bf.load38, 65535
  %cmp40 = icmp ne i32 %bf.clear39, 58
  br i1 %cmp40, label %if.then.41, label %if.end.42

if.then.41:                                       ; preds = %lor.lhs.false.34, %if.end.30
  %26 = load %struct.rtx_def*, %struct.rtx_def** %orig_x.addr, align 8
  store %struct.rtx_def* %26, %struct.rtx_def** %retval
  br label %return

if.end.42:                                        ; preds = %lor.lhs.false.34
  %27 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld43 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1
  %arrayidx44 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld43, i32 0, i64 0
  %rtx45 = bitcast %union.rtunion_def* %arrayidx44 to %struct.rtx_def**
  %28 = load %struct.rtx_def*, %struct.rtx_def** %rtx45, align 8
  %29 = bitcast %struct.rtx_def* %28 to i32*
  %bf.load46 = load i32, i32* %29, align 8
  %bf.clear47 = and i32 %bf.load46, 65535
  %cmp48 = icmp eq i32 %bf.clear47, 61
  br i1 %cmp48, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.end.42
  %30 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld49 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %30, i32 0, i32 1
  %arrayidx50 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld49, i32 0, i64 0
  %rtx51 = bitcast %union.rtunion_def* %arrayidx50 to %struct.rtx_def**
  %31 = load %struct.rtx_def*, %struct.rtx_def** %rtx51, align 8
  %fld52 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1
  %arrayidx53 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld52, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx53 to i32*
  %32 = load i32, i32* %rtuint, align 4
  %33 = load i32, i32* @target_flags, align 4
  %and54 = and i32 %33, 33554432
  %tobool55 = icmp ne i32 %and54, 0
  br i1 %tobool55, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.lhs.true
  %34 = load i32, i32* @flag_pic, align 4
  %tobool56 = icmp ne i32 %34, 0
  %lnot = xor i1 %tobool56, true
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.lhs.true
  %35 = phi i1 [ true, %land.lhs.true ], [ %lnot, %lor.rhs ]
  %cond = select i1 %35, i32 -1, i32 3
  %cmp57 = icmp eq i32 %32, %cond
  br i1 %cmp57, label %if.then.58, label %if.else

if.then.58:                                       ; preds = %lor.end
  store %struct.rtx_def* null, %struct.rtx_def** %y, align 8
  br label %if.end.138

if.else:                                          ; preds = %lor.end, %if.end.42
  %36 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld59 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %36, i32 0, i32 1
  %arrayidx60 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld59, i32 0, i64 0
  %rtx61 = bitcast %union.rtunion_def* %arrayidx60 to %struct.rtx_def**
  %37 = load %struct.rtx_def*, %struct.rtx_def** %rtx61, align 8
  %38 = bitcast %struct.rtx_def* %37 to i32*
  %bf.load62 = load i32, i32* %38, align 8
  %bf.clear63 = and i32 %bf.load62, 65535
  %cmp64 = icmp eq i32 %bf.clear63, 75
  br i1 %cmp64, label %if.then.65, label %if.else.136

if.then.65:                                       ; preds = %if.else
  %39 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld66 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1
  %arrayidx67 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld66, i32 0, i64 0
  %rtx68 = bitcast %union.rtunion_def* %arrayidx67 to %struct.rtx_def**
  %40 = load %struct.rtx_def*, %struct.rtx_def** %rtx68, align 8
  store %struct.rtx_def* %40, %struct.rtx_def** %y, align 8
  %41 = load %struct.rtx_def*, %struct.rtx_def** %y, align 8
  %fld69 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %41, i32 0, i32 1
  %arrayidx70 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld69, i32 0, i64 0
  %rtx71 = bitcast %union.rtunion_def* %arrayidx70 to %struct.rtx_def**
  %42 = load %struct.rtx_def*, %struct.rtx_def** %rtx71, align 8
  %43 = bitcast %struct.rtx_def* %42 to i32*
  %bf.load72 = load i32, i32* %43, align 8
  %bf.clear73 = and i32 %bf.load72, 65535
  %cmp74 = icmp eq i32 %bf.clear73, 61
  br i1 %cmp74, label %land.lhs.true.75, label %if.else.94

land.lhs.true.75:                                 ; preds = %if.then.65
  %44 = load %struct.rtx_def*, %struct.rtx_def** %y, align 8
  %fld76 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %44, i32 0, i32 1
  %arrayidx77 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld76, i32 0, i64 0
  %rtx78 = bitcast %union.rtunion_def* %arrayidx77 to %struct.rtx_def**
  %45 = load %struct.rtx_def*, %struct.rtx_def** %rtx78, align 8
  %fld79 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %45, i32 0, i32 1
  %arrayidx80 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld79, i32 0, i64 0
  %rtuint81 = bitcast %union.rtunion_def* %arrayidx80 to i32*
  %46 = load i32, i32* %rtuint81, align 4
  %47 = load i32, i32* @target_flags, align 4
  %and82 = and i32 %47, 33554432
  %tobool83 = icmp ne i32 %and82, 0
  br i1 %tobool83, label %lor.end.87, label %lor.rhs.84

lor.rhs.84:                                       ; preds = %land.lhs.true.75
  %48 = load i32, i32* @flag_pic, align 4
  %tobool85 = icmp ne i32 %48, 0
  %lnot86 = xor i1 %tobool85, true
  br label %lor.end.87

lor.end.87:                                       ; preds = %lor.rhs.84, %land.lhs.true.75
  %49 = phi i1 [ true, %land.lhs.true.75 ], [ %lnot86, %lor.rhs.84 ]
  %cond88 = select i1 %49, i32 -1, i32 3
  %cmp89 = icmp eq i32 %46, %cond88
  br i1 %cmp89, label %if.then.90, label %if.else.94

if.then.90:                                       ; preds = %lor.end.87
  %50 = load %struct.rtx_def*, %struct.rtx_def** %y, align 8
  %fld91 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %50, i32 0, i32 1
  %arrayidx92 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld91, i32 0, i64 1
  %rtx93 = bitcast %union.rtunion_def* %arrayidx92 to %struct.rtx_def**
  %51 = load %struct.rtx_def*, %struct.rtx_def** %rtx93, align 8
  store %struct.rtx_def* %51, %struct.rtx_def** %y, align 8
  br label %if.end.122

if.else.94:                                       ; preds = %lor.end.87, %if.then.65
  %52 = load %struct.rtx_def*, %struct.rtx_def** %y, align 8
  %fld95 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %52, i32 0, i32 1
  %arrayidx96 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld95, i32 0, i64 1
  %rtx97 = bitcast %union.rtunion_def* %arrayidx96 to %struct.rtx_def**
  %53 = load %struct.rtx_def*, %struct.rtx_def** %rtx97, align 8
  %54 = bitcast %struct.rtx_def* %53 to i32*
  %bf.load98 = load i32, i32* %54, align 8
  %bf.clear99 = and i32 %bf.load98, 65535
  %cmp100 = icmp eq i32 %bf.clear99, 61
  br i1 %cmp100, label %land.lhs.true.101, label %if.else.120

land.lhs.true.101:                                ; preds = %if.else.94
  %55 = load %struct.rtx_def*, %struct.rtx_def** %y, align 8
  %fld102 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %55, i32 0, i32 1
  %arrayidx103 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld102, i32 0, i64 1
  %rtx104 = bitcast %union.rtunion_def* %arrayidx103 to %struct.rtx_def**
  %56 = load %struct.rtx_def*, %struct.rtx_def** %rtx104, align 8
  %fld105 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %56, i32 0, i32 1
  %arrayidx106 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld105, i32 0, i64 0
  %rtuint107 = bitcast %union.rtunion_def* %arrayidx106 to i32*
  %57 = load i32, i32* %rtuint107, align 4
  %58 = load i32, i32* @target_flags, align 4
  %and108 = and i32 %58, 33554432
  %tobool109 = icmp ne i32 %and108, 0
  br i1 %tobool109, label %lor.end.113, label %lor.rhs.110

lor.rhs.110:                                      ; preds = %land.lhs.true.101
  %59 = load i32, i32* @flag_pic, align 4
  %tobool111 = icmp ne i32 %59, 0
  %lnot112 = xor i1 %tobool111, true
  br label %lor.end.113

lor.end.113:                                      ; preds = %lor.rhs.110, %land.lhs.true.101
  %60 = phi i1 [ true, %land.lhs.true.101 ], [ %lnot112, %lor.rhs.110 ]
  %cond114 = select i1 %60, i32 -1, i32 3
  %cmp115 = icmp eq i32 %57, %cond114
  br i1 %cmp115, label %if.then.116, label %if.else.120

if.then.116:                                      ; preds = %lor.end.113
  %61 = load %struct.rtx_def*, %struct.rtx_def** %y, align 8
  %fld117 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %61, i32 0, i32 1
  %arrayidx118 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld117, i32 0, i64 0
  %rtx119 = bitcast %union.rtunion_def* %arrayidx118 to %struct.rtx_def**
  %62 = load %struct.rtx_def*, %struct.rtx_def** %rtx119, align 8
  store %struct.rtx_def* %62, %struct.rtx_def** %y, align 8
  br label %if.end.121

if.else.120:                                      ; preds = %lor.end.113, %if.else.94
  %63 = load %struct.rtx_def*, %struct.rtx_def** %orig_x.addr, align 8
  store %struct.rtx_def* %63, %struct.rtx_def** %retval
  br label %return

if.end.121:                                       ; preds = %if.then.116
  br label %if.end.122

if.end.122:                                       ; preds = %if.end.121, %if.then.90
  %64 = load %struct.rtx_def*, %struct.rtx_def** %y, align 8
  %65 = bitcast %struct.rtx_def* %64 to i32*
  %bf.load123 = load i32, i32* %65, align 8
  %bf.clear124 = and i32 %bf.load123, 65535
  %cmp125 = icmp ne i32 %bf.clear124, 61
  br i1 %cmp125, label %land.lhs.true.126, label %if.end.135

land.lhs.true.126:                                ; preds = %if.end.122
  %66 = load %struct.rtx_def*, %struct.rtx_def** %y, align 8
  %67 = bitcast %struct.rtx_def* %66 to i32*
  %bf.load127 = load i32, i32* %67, align 8
  %bf.clear128 = and i32 %bf.load127, 65535
  %cmp129 = icmp ne i32 %bf.clear128, 78
  br i1 %cmp129, label %land.lhs.true.130, label %if.end.135

land.lhs.true.130:                                ; preds = %land.lhs.true.126
  %68 = load %struct.rtx_def*, %struct.rtx_def** %y, align 8
  %69 = bitcast %struct.rtx_def* %68 to i32*
  %bf.load131 = load i32, i32* %69, align 8
  %bf.clear132 = and i32 %bf.load131, 65535
  %cmp133 = icmp ne i32 %bf.clear132, 87
  br i1 %cmp133, label %if.then.134, label %if.end.135

if.then.134:                                      ; preds = %land.lhs.true.130
  %70 = load %struct.rtx_def*, %struct.rtx_def** %orig_x.addr, align 8
  store %struct.rtx_def* %70, %struct.rtx_def** %retval
  br label %return

if.end.135:                                       ; preds = %land.lhs.true.130, %land.lhs.true.126, %if.end.122
  br label %if.end.137

if.else.136:                                      ; preds = %if.else
  %71 = load %struct.rtx_def*, %struct.rtx_def** %orig_x.addr, align 8
  store %struct.rtx_def* %71, %struct.rtx_def** %retval
  br label %return

if.end.137:                                       ; preds = %if.end.135
  br label %if.end.138

if.end.138:                                       ; preds = %if.end.137, %if.then.58
  %72 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld139 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %72, i32 0, i32 1
  %arrayidx140 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld139, i32 0, i64 1
  %rtx141 = bitcast %union.rtunion_def* %arrayidx140 to %struct.rtx_def**
  %73 = load %struct.rtx_def*, %struct.rtx_def** %rtx141, align 8
  %fld142 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %73, i32 0, i32 1
  %arrayidx143 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld142, i32 0, i64 0
  %rtx144 = bitcast %union.rtunion_def* %arrayidx143 to %struct.rtx_def**
  %74 = load %struct.rtx_def*, %struct.rtx_def** %rtx144, align 8
  store %struct.rtx_def* %74, %struct.rtx_def** %x, align 8
  %75 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %76 = bitcast %struct.rtx_def* %75 to i32*
  %bf.load145 = load i32, i32* %76, align 8
  %bf.clear146 = and i32 %bf.load145, 65535
  %cmp147 = icmp eq i32 %bf.clear146, 42
  br i1 %cmp147, label %land.lhs.true.148, label %if.end.183

land.lhs.true.148:                                ; preds = %if.end.138
  %77 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld149 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %77, i32 0, i32 1
  %arrayidx150 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld149, i32 0, i64 1
  %rtint151 = bitcast %union.rtunion_def* %arrayidx150 to i32*
  %78 = load i32, i32* %rtint151, align 4
  %cmp152 = icmp eq i32 %78, 6
  br i1 %cmp152, label %land.lhs.true.153, label %lor.lhs.false.157

land.lhs.true.153:                                ; preds = %land.lhs.true.148
  %79 = load %struct.rtx_def*, %struct.rtx_def** %orig_x.addr, align 8
  %80 = bitcast %struct.rtx_def* %79 to i32*
  %bf.load154 = load i32, i32* %80, align 8
  %bf.clear155 = and i32 %bf.load154, 65535
  %cmp156 = icmp eq i32 %bf.clear155, 66
  br i1 %cmp156, label %if.then.166, label %lor.lhs.false.157

lor.lhs.false.157:                                ; preds = %land.lhs.true.153, %land.lhs.true.148
  %81 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld158 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %81, i32 0, i32 1
  %arrayidx159 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld158, i32 0, i64 1
  %rtint160 = bitcast %union.rtunion_def* %arrayidx159 to i32*
  %82 = load i32, i32* %rtint160, align 4
  %cmp161 = icmp eq i32 %82, 7
  br i1 %cmp161, label %land.lhs.true.162, label %if.end.183

land.lhs.true.162:                                ; preds = %lor.lhs.false.157
  %83 = load %struct.rtx_def*, %struct.rtx_def** %orig_x.addr, align 8
  %84 = bitcast %struct.rtx_def* %83 to i32*
  %bf.load163 = load i32, i32* %84, align 8
  %bf.clear164 = and i32 %bf.load163, 65535
  %cmp165 = icmp ne i32 %bf.clear164, 66
  br i1 %cmp165, label %if.then.166, label %if.end.183

if.then.166:                                      ; preds = %land.lhs.true.162, %land.lhs.true.153
  %85 = load %struct.rtx_def*, %struct.rtx_def** %y, align 8
  %tobool167 = icmp ne %struct.rtx_def* %85, null
  br i1 %tobool167, label %if.then.168, label %if.end.177

if.then.168:                                      ; preds = %if.then.166
  %86 = load i32, i32* @target_flags, align 4
  %and169 = and i32 %86, 33554432
  %tobool170 = icmp ne i32 %and169, 0
  %cond171 = select i1 %tobool170, i32 5, i32 4
  %87 = load %struct.rtx_def*, %struct.rtx_def** %y, align 8
  %88 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld172 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %88, i32 0, i32 1
  %arrayidx173 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld172, i32 0, i64 0
  %rtvec174 = bitcast %union.rtunion_def* %arrayidx173 to %struct.rtvec_def**
  %89 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec174, align 8
  %elem175 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %89, i32 0, i32 1
  %arrayidx176 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem175, i32 0, i64 0
  %90 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx176, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %cond171, %struct.rtx_def* %87, %struct.rtx_def* %90)
  store %struct.rtx_def* %call, %struct.rtx_def** %retval
  br label %return

if.end.177:                                       ; preds = %if.then.166
  %91 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld178 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %91, i32 0, i32 1
  %arrayidx179 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld178, i32 0, i64 0
  %rtvec180 = bitcast %union.rtunion_def* %arrayidx179 to %struct.rtvec_def**
  %92 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec180, align 8
  %elem181 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %92, i32 0, i32 1
  %arrayidx182 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem181, i32 0, i64 0
  %93 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx182, align 8
  store %struct.rtx_def* %93, %struct.rtx_def** %retval
  br label %return

if.end.183:                                       ; preds = %land.lhs.true.162, %lor.lhs.false.157, %if.end.138
  %94 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %95 = bitcast %struct.rtx_def* %94 to i32*
  %bf.load184 = load i32, i32* %95, align 8
  %bf.clear185 = and i32 %bf.load184, 65535
  %cmp186 = icmp eq i32 %bf.clear185, 75
  br i1 %cmp186, label %land.lhs.true.187, label %if.end.245

land.lhs.true.187:                                ; preds = %if.end.183
  %96 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld188 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %96, i32 0, i32 1
  %arrayidx189 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld188, i32 0, i64 0
  %rtx190 = bitcast %union.rtunion_def* %arrayidx189 to %struct.rtx_def**
  %97 = load %struct.rtx_def*, %struct.rtx_def** %rtx190, align 8
  %98 = bitcast %struct.rtx_def* %97 to i32*
  %bf.load191 = load i32, i32* %98, align 8
  %bf.clear192 = and i32 %bf.load191, 65535
  %cmp193 = icmp eq i32 %bf.clear192, 42
  br i1 %cmp193, label %land.lhs.true.194, label %if.end.245

land.lhs.true.194:                                ; preds = %land.lhs.true.187
  %99 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld195 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %99, i32 0, i32 1
  %arrayidx196 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld195, i32 0, i64 1
  %rtx197 = bitcast %union.rtunion_def* %arrayidx196 to %struct.rtx_def**
  %100 = load %struct.rtx_def*, %struct.rtx_def** %rtx197, align 8
  %101 = bitcast %struct.rtx_def* %100 to i32*
  %bf.load198 = load i32, i32* %101, align 8
  %bf.clear199 = and i32 %bf.load198, 65535
  %cmp200 = icmp eq i32 %bf.clear199, 54
  br i1 %cmp200, label %land.lhs.true.201, label %if.end.245

land.lhs.true.201:                                ; preds = %land.lhs.true.194
  %102 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld202 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %102, i32 0, i32 1
  %arrayidx203 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld202, i32 0, i64 0
  %rtx204 = bitcast %union.rtunion_def* %arrayidx203 to %struct.rtx_def**
  %103 = load %struct.rtx_def*, %struct.rtx_def** %rtx204, align 8
  %fld205 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %103, i32 0, i32 1
  %arrayidx206 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld205, i32 0, i64 1
  %rtint207 = bitcast %union.rtunion_def* %arrayidx206 to i32*
  %104 = load i32, i32* %rtint207, align 4
  %cmp208 = icmp eq i32 %104, 6
  br i1 %cmp208, label %land.lhs.true.209, label %lor.lhs.false.213

land.lhs.true.209:                                ; preds = %land.lhs.true.201
  %105 = load %struct.rtx_def*, %struct.rtx_def** %orig_x.addr, align 8
  %106 = bitcast %struct.rtx_def* %105 to i32*
  %bf.load210 = load i32, i32* %106, align 8
  %bf.clear211 = and i32 %bf.load210, 65535
  %cmp212 = icmp eq i32 %bf.clear211, 66
  br i1 %cmp212, label %if.then.225, label %lor.lhs.false.213

lor.lhs.false.213:                                ; preds = %land.lhs.true.209, %land.lhs.true.201
  %107 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld214 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %107, i32 0, i32 1
  %arrayidx215 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld214, i32 0, i64 0
  %rtx216 = bitcast %union.rtunion_def* %arrayidx215 to %struct.rtx_def**
  %108 = load %struct.rtx_def*, %struct.rtx_def** %rtx216, align 8
  %fld217 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %108, i32 0, i32 1
  %arrayidx218 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld217, i32 0, i64 1
  %rtint219 = bitcast %union.rtunion_def* %arrayidx218 to i32*
  %109 = load i32, i32* %rtint219, align 4
  %cmp220 = icmp eq i32 %109, 7
  br i1 %cmp220, label %land.lhs.true.221, label %if.end.245

land.lhs.true.221:                                ; preds = %lor.lhs.false.213
  %110 = load %struct.rtx_def*, %struct.rtx_def** %orig_x.addr, align 8
  %111 = bitcast %struct.rtx_def* %110 to i32*
  %bf.load222 = load i32, i32* %111, align 8
  %bf.clear223 = and i32 %bf.load222, 65535
  %cmp224 = icmp ne i32 %bf.clear223, 66
  br i1 %cmp224, label %if.then.225, label %if.end.245

if.then.225:                                      ; preds = %land.lhs.true.221, %land.lhs.true.209
  %112 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld226 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %112, i32 0, i32 1
  %arrayidx227 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld226, i32 0, i64 0
  %rtx228 = bitcast %union.rtunion_def* %arrayidx227 to %struct.rtx_def**
  %113 = load %struct.rtx_def*, %struct.rtx_def** %rtx228, align 8
  %fld229 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %113, i32 0, i32 1
  %arrayidx230 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld229, i32 0, i64 0
  %rtvec231 = bitcast %union.rtunion_def* %arrayidx230 to %struct.rtvec_def**
  %114 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec231, align 8
  %elem232 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %114, i32 0, i32 1
  %arrayidx233 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem232, i32 0, i64 0
  %115 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx233, align 8
  %116 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld234 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %116, i32 0, i32 1
  %arrayidx235 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld234, i32 0, i64 1
  %rtx236 = bitcast %union.rtunion_def* %arrayidx235 to %struct.rtx_def**
  %117 = load %struct.rtx_def*, %struct.rtx_def** %rtx236, align 8
  %call237 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 0, %struct.rtx_def* %115, %struct.rtx_def* %117)
  store %struct.rtx_def* %call237, %struct.rtx_def** %x, align 8
  %118 = load %struct.rtx_def*, %struct.rtx_def** %y, align 8
  %tobool238 = icmp ne %struct.rtx_def* %118, null
  br i1 %tobool238, label %if.then.239, label %if.end.244

if.then.239:                                      ; preds = %if.then.225
  %119 = load i32, i32* @target_flags, align 4
  %and240 = and i32 %119, 33554432
  %tobool241 = icmp ne i32 %and240, 0
  %cond242 = select i1 %tobool241, i32 5, i32 4
  %120 = load %struct.rtx_def*, %struct.rtx_def** %y, align 8
  %121 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %call243 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %cond242, %struct.rtx_def* %120, %struct.rtx_def* %121)
  store %struct.rtx_def* %call243, %struct.rtx_def** %retval
  br label %return

if.end.244:                                       ; preds = %if.then.225
  %122 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  store %struct.rtx_def* %122, %struct.rtx_def** %retval
  br label %return

if.end.245:                                       ; preds = %land.lhs.true.221, %lor.lhs.false.213, %land.lhs.true.194, %land.lhs.true.187, %if.end.183
  %123 = load %struct.rtx_def*, %struct.rtx_def** %orig_x.addr, align 8
  store %struct.rtx_def* %123, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end.245, %if.end.244, %if.then.239, %if.end.177, %if.then.168, %if.else.136, %if.then.134, %if.else.120, %if.then.41, %if.end.23, %if.then.22
  %124 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %124
}

; Function Attrs: nounwind uwtable
define void @print_reg(%struct.rtx_def* %x, i32 %code, %struct._IO_FILE* %file) #1 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  %code.addr = alloca i32, align 4
  %file.addr = alloca %struct._IO_FILE*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  store i32 %code, i32* %code.addr, align 4
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx to i32*
  %1 = load i32, i32* %rtuint, align 4
  %cmp = icmp eq i32 %1, 16
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1
  %arrayidx2 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1, i32 0, i64 0
  %rtuint3 = bitcast %union.rtunion_def* %arrayidx2 to i32*
  %3 = load i32, i32* %rtuint3, align 4
  %cmp4 = icmp eq i32 %3, 20
  br i1 %cmp4, label %if.then, label %lor.lhs.false.5

lor.lhs.false.5:                                  ; preds = %lor.lhs.false
  %4 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld6 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld6, i32 0, i64 0
  %rtuint8 = bitcast %union.rtunion_def* %arrayidx7 to i32*
  %5 = load i32, i32* %rtuint8, align 4
  %cmp9 = icmp eq i32 %5, 17
  br i1 %cmp9, label %if.then, label %lor.lhs.false.10

lor.lhs.false.10:                                 ; preds = %lor.lhs.false.5
  %6 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld11 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1
  %arrayidx12 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld11, i32 0, i64 0
  %rtuint13 = bitcast %union.rtunion_def* %arrayidx12 to i32*
  %7 = load i32, i32* %rtuint13, align 4
  %cmp14 = icmp eq i32 %7, 18
  br i1 %cmp14, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false.10, %lor.lhs.false.5, %lor.lhs.false, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 5640, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @__FUNCTION__.print_reg, i32 0, i32 0)) #7
  unreachable

if.end:                                           ; preds = %lor.lhs.false.10
  %8 = load i32, i32* @ix86_asm_dialect, align 4
  %cmp15 = icmp eq i32 %8, 0
  br i1 %cmp15, label %if.then.19, label %lor.lhs.false.16

lor.lhs.false.16:                                 ; preds = %if.end
  %9 = load i8, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i32 0, i64 0), align 1
  %conv = sext i8 %9 to i32
  %cmp17 = icmp eq i32 %conv, 0
  br i1 %cmp17, label %if.then.19, label %if.end.20

if.then.19:                                       ; preds = %lor.lhs.false.16, %if.end
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call = call i32 @_IO_putc(i32 37, %struct._IO_FILE* %10)
  br label %if.end.20

if.end.20:                                        ; preds = %if.then.19, %lor.lhs.false.16
  %11 = load i32, i32* %code.addr, align 4
  %cmp21 = icmp eq i32 %11, 119
  br i1 %cmp21, label %if.then.37, label %lor.lhs.false.23

lor.lhs.false.23:                                 ; preds = %if.end.20
  %12 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %13 = bitcast %struct.rtx_def* %12 to i32*
  %bf.load = load i32, i32* %13, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp24 = icmp eq i32 %bf.clear, 61
  br i1 %cmp24, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %lor.lhs.false.23
  %14 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld26 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1
  %arrayidx27 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld26, i32 0, i64 0
  %rtuint28 = bitcast %union.rtunion_def* %arrayidx27 to i32*
  %15 = load i32, i32* %rtuint28, align 4
  %cmp29 = icmp uge i32 %15, 29
  br i1 %cmp29, label %land.lhs.true.31, label %if.else

land.lhs.true.31:                                 ; preds = %land.lhs.true
  %16 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld32 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1
  %arrayidx33 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld32, i32 0, i64 0
  %rtuint34 = bitcast %union.rtunion_def* %arrayidx33 to i32*
  %17 = load i32, i32* %rtuint34, align 4
  %cmp35 = icmp ule i32 %17, 36
  br i1 %cmp35, label %if.then.37, label %if.else

if.then.37:                                       ; preds = %land.lhs.true.31, %if.end.20
  store i32 2, i32* %code.addr, align 4
  br label %if.end.67

if.else:                                          ; preds = %land.lhs.true.31, %land.lhs.true, %lor.lhs.false.23
  %18 = load i32, i32* %code.addr, align 4
  %cmp38 = icmp eq i32 %18, 98
  br i1 %cmp38, label %if.then.40, label %if.else.41

if.then.40:                                       ; preds = %if.else
  store i32 1, i32* %code.addr, align 4
  br label %if.end.66

if.else.41:                                       ; preds = %if.else
  %19 = load i32, i32* %code.addr, align 4
  %cmp42 = icmp eq i32 %19, 107
  br i1 %cmp42, label %if.then.44, label %if.else.45

if.then.44:                                       ; preds = %if.else.41
  store i32 4, i32* %code.addr, align 4
  br label %if.end.65

if.else.45:                                       ; preds = %if.else.41
  %20 = load i32, i32* %code.addr, align 4
  %cmp46 = icmp eq i32 %20, 113
  br i1 %cmp46, label %if.then.48, label %if.else.49

if.then.48:                                       ; preds = %if.else.45
  store i32 8, i32* %code.addr, align 4
  br label %if.end.64

if.else.49:                                       ; preds = %if.else.45
  %21 = load i32, i32* %code.addr, align 4
  %cmp50 = icmp eq i32 %21, 121
  br i1 %cmp50, label %if.then.52, label %if.else.53

if.then.52:                                       ; preds = %if.else.49
  store i32 3, i32* %code.addr, align 4
  br label %if.end.63

if.else.53:                                       ; preds = %if.else.49
  %22 = load i32, i32* %code.addr, align 4
  %cmp54 = icmp eq i32 %22, 104
  br i1 %cmp54, label %if.then.56, label %if.else.57

if.then.56:                                       ; preds = %if.else.53
  store i32 0, i32* %code.addr, align 4
  br label %if.end.62

if.else.57:                                       ; preds = %if.else.53
  %23 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %24 = bitcast %struct.rtx_def* %23 to i32*
  %bf.load58 = load i32, i32* %24, align 8
  %bf.lshr = lshr i32 %bf.load58, 16
  %bf.clear59 = and i32 %bf.lshr, 255
  %idxprom = sext i32 %bf.clear59 to i64
  %arrayidx60 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom
  %25 = load i8, i8* %arrayidx60, align 1
  %conv61 = zext i8 %25 to i32
  store i32 %conv61, i32* %code.addr, align 4
  br label %if.end.62

if.end.62:                                        ; preds = %if.else.57, %if.then.56
  br label %if.end.63

if.end.63:                                        ; preds = %if.end.62, %if.then.52
  br label %if.end.64

if.end.64:                                        ; preds = %if.end.63, %if.then.48
  br label %if.end.65

if.end.65:                                        ; preds = %if.end.64, %if.then.44
  br label %if.end.66

if.end.66:                                        ; preds = %if.end.65, %if.then.40
  br label %if.end.67

if.end.67:                                        ; preds = %if.end.66, %if.then.37
  %26 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %27 = bitcast %struct.rtx_def* %26 to i32*
  %bf.load68 = load i32, i32* %27, align 8
  %bf.clear69 = and i32 %bf.load68, 65535
  %cmp70 = icmp eq i32 %bf.clear69, 61
  br i1 %cmp70, label %land.lhs.true.72, label %if.end.113

land.lhs.true.72:                                 ; preds = %if.end.67
  %28 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld73 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1
  %arrayidx74 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld73, i32 0, i64 0
  %rtuint75 = bitcast %union.rtunion_def* %arrayidx74 to i32*
  %29 = load i32, i32* %rtuint75, align 4
  %cmp76 = icmp uge i32 %29, 37
  br i1 %cmp76, label %land.lhs.true.78, label %if.end.113

land.lhs.true.78:                                 ; preds = %land.lhs.true.72
  %30 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld79 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %30, i32 0, i32 1
  %arrayidx80 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld79, i32 0, i64 0
  %rtuint81 = bitcast %union.rtunion_def* %arrayidx80 to i32*
  %31 = load i32, i32* %rtuint81, align 4
  %cmp82 = icmp ule i32 %31, 44
  br i1 %cmp82, label %if.then.84, label %if.end.113

if.then.84:                                       ; preds = %land.lhs.true.78
  %32 = load i32, i32* @target_flags, align 4
  %and = and i32 %32, 33554432
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end.86, label %if.then.85

if.then.85:                                       ; preds = %if.then.84
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 5665, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @__FUNCTION__.print_reg, i32 0, i32 0)) #7
  unreachable

if.end.86:                                        ; preds = %if.then.84
  %33 = load i32, i32* %code.addr, align 4
  switch i32 %33, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb.87
    i32 2, label %sw.bb.92
    i32 4, label %sw.bb.99
    i32 8, label %sw.bb.106
  ]

sw.bb:                                            ; preds = %if.end.86
  call void (i8*, ...) @error(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.102, i32 0, i32 0))
  br label %sw.epilog

sw.bb.87:                                         ; preds = %if.end.86
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %35 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld88 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %35, i32 0, i32 1
  %arrayidx89 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld88, i32 0, i64 0
  %rtuint90 = bitcast %union.rtunion_def* %arrayidx89 to i32*
  %36 = load i32, i32* %rtuint90, align 4
  %sub = sub i32 %36, 37
  %add = add i32 %sub, 8
  %call91 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %34, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.103, i32 0, i32 0), i32 %add)
  br label %sw.epilog

sw.bb.92:                                         ; preds = %if.end.86
  %37 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %38 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld93 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %38, i32 0, i32 1
  %arrayidx94 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld93, i32 0, i64 0
  %rtuint95 = bitcast %union.rtunion_def* %arrayidx94 to i32*
  %39 = load i32, i32* %rtuint95, align 4
  %sub96 = sub i32 %39, 37
  %add97 = add i32 %sub96, 8
  %call98 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %37, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.104, i32 0, i32 0), i32 %add97)
  br label %sw.epilog

sw.bb.99:                                         ; preds = %if.end.86
  %40 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %41 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld100 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %41, i32 0, i32 1
  %arrayidx101 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld100, i32 0, i64 0
  %rtuint102 = bitcast %union.rtunion_def* %arrayidx101 to i32*
  %42 = load i32, i32* %rtuint102, align 4
  %sub103 = sub i32 %42, 37
  %add104 = add i32 %sub103, 8
  %call105 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %40, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.105, i32 0, i32 0), i32 %add104)
  br label %sw.epilog

sw.bb.106:                                        ; preds = %if.end.86
  %43 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %44 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld107 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %44, i32 0, i32 1
  %arrayidx108 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld107, i32 0, i64 0
  %rtuint109 = bitcast %union.rtunion_def* %arrayidx108 to i32*
  %45 = load i32, i32* %rtuint109, align 4
  %sub110 = sub i32 %45, 37
  %add111 = add i32 %sub110, 8
  %call112 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %43, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.106, i32 0, i32 0), i32 %add111)
  br label %sw.epilog

sw.default:                                       ; preds = %if.end.86
  call void (i8*, ...) @error(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.107, i32 0, i32 0))
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb.106, %sw.bb.99, %sw.bb.92, %sw.bb.87, %sw.bb
  br label %sw.epilog.198

if.end.113:                                       ; preds = %land.lhs.true.78, %land.lhs.true.72, %if.end.67
  %46 = load i32, i32* %code.addr, align 4
  switch i32 %46, label %sw.default.197 [
    i32 3, label %sw.bb.114
    i32 8, label %sw.bb.128
    i32 4, label %sw.bb.128
    i32 12, label %sw.bb.128
    i32 16, label %sw.bb.176
    i32 2, label %sw.bb.176
    i32 1, label %sw.bb.183
    i32 0, label %sw.bb.190
  ]

sw.bb.114:                                        ; preds = %if.end.113
  %47 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %48 = bitcast %struct.rtx_def* %47 to i32*
  %bf.load115 = load i32, i32* %48, align 8
  %bf.clear116 = and i32 %bf.load115, 65535
  %cmp117 = icmp eq i32 %bf.clear116, 61
  br i1 %cmp117, label %land.lhs.true.119, label %if.end.127

land.lhs.true.119:                                ; preds = %sw.bb.114
  %49 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld120 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %49, i32 0, i32 1
  %arrayidx121 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld120, i32 0, i64 0
  %rtuint122 = bitcast %union.rtunion_def* %arrayidx121 to i32*
  %50 = load i32, i32* %rtuint122, align 4
  %cmp123 = icmp eq i32 %50, 8
  br i1 %cmp123, label %if.then.125, label %if.end.127

if.then.125:                                      ; preds = %land.lhs.true.119
  %51 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call126 = call i32 @fputs(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.108, i32 0, i32 0), %struct._IO_FILE* %51)
  br label %sw.epilog.198

if.end.127:                                       ; preds = %land.lhs.true.119, %sw.bb.114
  br label %sw.bb.128

sw.bb.128:                                        ; preds = %if.end.113, %if.end.113, %if.end.113, %if.end.127
  %52 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %53 = bitcast %struct.rtx_def* %52 to i32*
  %bf.load129 = load i32, i32* %53, align 8
  %bf.clear130 = and i32 %bf.load129, 65535
  %cmp131 = icmp eq i32 %bf.clear130, 61
  br i1 %cmp131, label %land.lhs.true.133, label %if.then.169

land.lhs.true.133:                                ; preds = %sw.bb.128
  %54 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld134 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %54, i32 0, i32 1
  %arrayidx135 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld134, i32 0, i64 0
  %rtuint136 = bitcast %union.rtunion_def* %arrayidx135 to i32*
  %55 = load i32, i32* %rtuint136, align 4
  %cmp137 = icmp uge i32 %55, 8
  br i1 %cmp137, label %land.lhs.true.139, label %lor.lhs.false.145

land.lhs.true.139:                                ; preds = %land.lhs.true.133
  %56 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld140 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %56, i32 0, i32 1
  %arrayidx141 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld140, i32 0, i64 0
  %rtuint142 = bitcast %union.rtunion_def* %arrayidx141 to i32*
  %57 = load i32, i32* %rtuint142, align 4
  %cmp143 = icmp ule i32 %57, 15
  br i1 %cmp143, label %if.end.175, label %lor.lhs.false.145

lor.lhs.false.145:                                ; preds = %land.lhs.true.139, %land.lhs.true.133
  %58 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld146 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %58, i32 0, i32 1
  %arrayidx147 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld146, i32 0, i64 0
  %rtuint148 = bitcast %union.rtunion_def* %arrayidx147 to i32*
  %59 = load i32, i32* %rtuint148, align 4
  %cmp149 = icmp uge i32 %59, 21
  br i1 %cmp149, label %land.lhs.true.151, label %lor.lhs.false.157

land.lhs.true.151:                                ; preds = %lor.lhs.false.145
  %60 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld152 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %60, i32 0, i32 1
  %arrayidx153 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld152, i32 0, i64 0
  %rtuint154 = bitcast %union.rtunion_def* %arrayidx153 to i32*
  %61 = load i32, i32* %rtuint154, align 4
  %cmp155 = icmp ule i32 %61, 28
  br i1 %cmp155, label %if.end.175, label %lor.lhs.false.157

lor.lhs.false.157:                                ; preds = %land.lhs.true.151, %lor.lhs.false.145
  %62 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld158 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %62, i32 0, i32 1
  %arrayidx159 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld158, i32 0, i64 0
  %rtuint160 = bitcast %union.rtunion_def* %arrayidx159 to i32*
  %63 = load i32, i32* %rtuint160, align 4
  %cmp161 = icmp uge i32 %63, 45
  br i1 %cmp161, label %land.lhs.true.163, label %if.then.169

land.lhs.true.163:                                ; preds = %lor.lhs.false.157
  %64 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld164 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %64, i32 0, i32 1
  %arrayidx165 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld164, i32 0, i64 0
  %rtuint166 = bitcast %union.rtunion_def* %arrayidx165 to i32*
  %65 = load i32, i32* %rtuint166, align 4
  %cmp167 = icmp ule i32 %65, 52
  br i1 %cmp167, label %if.end.175, label %if.then.169

if.then.169:                                      ; preds = %land.lhs.true.163, %lor.lhs.false.157, %sw.bb.128
  %66 = load i32, i32* %code.addr, align 4
  %cmp170 = icmp eq i32 %66, 8
  br i1 %cmp170, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then.169
  %67 = load i32, i32* @target_flags, align 4
  %and172 = and i32 %67, 33554432
  %tobool173 = icmp ne i32 %and172, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then.169
  %68 = phi i1 [ false, %if.then.169 ], [ %tobool173, %land.rhs ]
  %cond = select i1 %68, i32 114, i32 101
  %69 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call174 = call i32 @_IO_putc(i32 %cond, %struct._IO_FILE* %69)
  br label %if.end.175

if.end.175:                                       ; preds = %land.end, %land.lhs.true.163, %land.lhs.true.151, %land.lhs.true.139
  br label %sw.bb.176

sw.bb.176:                                        ; preds = %if.end.113, %if.end.113, %if.end.175
  %70 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld177 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %70, i32 0, i32 1
  %arrayidx178 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld177, i32 0, i64 0
  %rtuint179 = bitcast %union.rtunion_def* %arrayidx178 to i32*
  %71 = load i32, i32* %rtuint179, align 4
  %idxprom180 = zext i32 %71 to i64
  %arrayidx181 = getelementptr inbounds [53 x i8*], [53 x i8*]* @hi_reg_name, i32 0, i64 %idxprom180
  %72 = load i8*, i8** %arrayidx181, align 8
  %73 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call182 = call i32 @fputs(i8* %72, %struct._IO_FILE* %73)
  br label %sw.epilog.198

sw.bb.183:                                        ; preds = %if.end.113
  %74 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld184 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %74, i32 0, i32 1
  %arrayidx185 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld184, i32 0, i64 0
  %rtuint186 = bitcast %union.rtunion_def* %arrayidx185 to i32*
  %75 = load i32, i32* %rtuint186, align 4
  %idxprom187 = zext i32 %75 to i64
  %arrayidx188 = getelementptr inbounds [8 x i8*], [8 x i8*]* @qi_reg_name, i32 0, i64 %idxprom187
  %76 = load i8*, i8** %arrayidx188, align 8
  %77 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call189 = call i32 @fputs(i8* %76, %struct._IO_FILE* %77)
  br label %sw.epilog.198

sw.bb.190:                                        ; preds = %if.end.113
  %78 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld191 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %78, i32 0, i32 1
  %arrayidx192 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld191, i32 0, i64 0
  %rtuint193 = bitcast %union.rtunion_def* %arrayidx192 to i32*
  %79 = load i32, i32* %rtuint193, align 4
  %idxprom194 = zext i32 %79 to i64
  %arrayidx195 = getelementptr inbounds [4 x i8*], [4 x i8*]* @qi_high_reg_name, i32 0, i64 %idxprom194
  %80 = load i8*, i8** %arrayidx195, align 8
  %81 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call196 = call i32 @fputs(i8* %80, %struct._IO_FILE* %81)
  br label %sw.epilog.198

sw.default.197:                                   ; preds = %if.end.113
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 5715, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @__FUNCTION__.print_reg, i32 0, i32 0)) #7
  unreachable

sw.epilog.198:                                    ; preds = %sw.epilog, %sw.bb.190, %sw.bb.183, %sw.bb.176, %if.then.125
  ret void
}

declare i32 @_IO_putc(i32, %struct._IO_FILE*) #0

; Function Attrs: nounwind uwtable
define void @print_operand(%struct._IO_FILE* %file, %struct.rtx_def* %x, i32 %code) #1 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %x.addr = alloca %struct.rtx_def*, align 8
  %code.addr = alloca i32, align 4
  %x168 = alloca %struct.rtx_def*, align 8
  %pred_val = alloca i32, align 4
  %taken = alloca i32, align 4
  %cputaken = alloca i32, align 4
  %size = alloca i8*, align 8
  %r = alloca %struct.realvaluetype, align 8
  %l = alloca i64, align 8
  %u = alloca %union.real_extract, align 8
  %r362 = alloca %struct.realvaluetype, align 8
  %dstr = alloca [30 x i8], align 16
  %u364 = alloca %union.real_extract, align 8
  %r390 = alloca %struct.realvaluetype, align 8
  %dstr391 = alloca [30 x i8], align 16
  %u393 = alloca %union.real_extract, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  store i32 %code, i32* %code.addr, align 4
  %0 = load i32, i32* %code.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %if.end.209

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %code.addr, align 4
  switch i32 %1, label %sw.default.207 [
    i32 42, label %sw.bb
    i32 65, label %sw.bb.2
    i32 76, label %sw.bb.16
    i32 87, label %sw.bb.21
    i32 66, label %sw.bb.26
    i32 81, label %sw.bb.31
    i32 83, label %sw.bb.36
    i32 84, label %sw.bb.41
    i32 122, label %sw.bb.46
    i32 98, label %sw.bb.93
    i32 119, label %sw.bb.93
    i32 107, label %sw.bb.93
    i32 113, label %sw.bb.93
    i32 104, label %sw.bb.93
    i32 121, label %sw.bb.93
    i32 88, label %sw.bb.93
    i32 80, label %sw.bb.93
    i32 115, label %sw.bb.94
    i32 68, label %sw.bb.102
    i32 79, label %sw.bb.122
    i32 67, label %sw.bb.123
    i32 70, label %sw.bb.131
    i32 99, label %sw.bb.140
    i32 102, label %sw.bb.158
    i32 43, label %sw.bb.167
  ]

sw.bb:                                            ; preds = %if.then
  %2 = load i32, i32* @ix86_asm_dialect, align 4
  %cmp = icmp eq i32 %2, 0
  br i1 %cmp, label %if.then.1, label %if.end

if.then.1:                                        ; preds = %sw.bb
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call = call i32 @_IO_putc(i32 42, %struct._IO_FILE* %3)
  br label %if.end

if.end:                                           ; preds = %if.then.1, %sw.bb
  br label %if.end.466

sw.bb.2:                                          ; preds = %if.then
  %4 = load i32, i32* @ix86_asm_dialect, align 4
  %cmp3 = icmp eq i32 %4, 0
  br i1 %cmp3, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %sw.bb.2
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call5 = call i32 @_IO_putc(i32 42, %struct._IO_FILE* %5)
  br label %if.end.15

if.else:                                          ; preds = %sw.bb.2
  %6 = load i32, i32* @ix86_asm_dialect, align 4
  %cmp6 = icmp eq i32 %6, 1
  br i1 %cmp6, label %if.then.7, label %if.else.13

if.then.7:                                        ; preds = %if.else
  %7 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %8 = bitcast %struct.rtx_def* %7 to i32*
  %bf.load = load i32, i32* %8, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp8 = icmp ne i32 %bf.clear, 61
  br i1 %cmp8, label %if.then.9, label %if.end.12

if.then.9:                                        ; preds = %if.then.7
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call10 = call i32 @_IO_putc(i32 91, %struct._IO_FILE* %9)
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %11 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  call void @print_operand(%struct._IO_FILE* %10, %struct.rtx_def* %11, i32 0)
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call11 = call i32 @_IO_putc(i32 93, %struct._IO_FILE* %12)
  br label %if.end.466

if.end.12:                                        ; preds = %if.then.7
  br label %if.end.14

if.else.13:                                       ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 5776, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @__FUNCTION__.print_operand, i32 0, i32 0)) #7
  unreachable

if.end.14:                                        ; preds = %if.end.12
  br label %if.end.15

if.end.15:                                        ; preds = %if.end.14, %if.then.4
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %14 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  call void @print_operand(%struct._IO_FILE* %13, %struct.rtx_def* %14, i32 0)
  br label %if.end.466

sw.bb.16:                                         ; preds = %if.then
  %15 = load i32, i32* @ix86_asm_dialect, align 4
  %cmp17 = icmp eq i32 %15, 0
  br i1 %cmp17, label %if.then.18, label %if.end.20

if.then.18:                                       ; preds = %sw.bb.16
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call19 = call i32 @_IO_putc(i32 108, %struct._IO_FILE* %16)
  br label %if.end.20

if.end.20:                                        ; preds = %if.then.18, %sw.bb.16
  br label %if.end.466

sw.bb.21:                                         ; preds = %if.then
  %17 = load i32, i32* @ix86_asm_dialect, align 4
  %cmp22 = icmp eq i32 %17, 0
  br i1 %cmp22, label %if.then.23, label %if.end.25

if.then.23:                                       ; preds = %sw.bb.21
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call24 = call i32 @_IO_putc(i32 119, %struct._IO_FILE* %18)
  br label %if.end.25

if.end.25:                                        ; preds = %if.then.23, %sw.bb.21
  br label %if.end.466

sw.bb.26:                                         ; preds = %if.then
  %19 = load i32, i32* @ix86_asm_dialect, align 4
  %cmp27 = icmp eq i32 %19, 0
  br i1 %cmp27, label %if.then.28, label %if.end.30

if.then.28:                                       ; preds = %sw.bb.26
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call29 = call i32 @_IO_putc(i32 98, %struct._IO_FILE* %20)
  br label %if.end.30

if.end.30:                                        ; preds = %if.then.28, %sw.bb.26
  br label %if.end.466

sw.bb.31:                                         ; preds = %if.then
  %21 = load i32, i32* @ix86_asm_dialect, align 4
  %cmp32 = icmp eq i32 %21, 0
  br i1 %cmp32, label %if.then.33, label %if.end.35

if.then.33:                                       ; preds = %sw.bb.31
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call34 = call i32 @_IO_putc(i32 108, %struct._IO_FILE* %22)
  br label %if.end.35

if.end.35:                                        ; preds = %if.then.33, %sw.bb.31
  br label %if.end.466

sw.bb.36:                                         ; preds = %if.then
  %23 = load i32, i32* @ix86_asm_dialect, align 4
  %cmp37 = icmp eq i32 %23, 0
  br i1 %cmp37, label %if.then.38, label %if.end.40

if.then.38:                                       ; preds = %sw.bb.36
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call39 = call i32 @_IO_putc(i32 115, %struct._IO_FILE* %24)
  br label %if.end.40

if.end.40:                                        ; preds = %if.then.38, %sw.bb.36
  br label %if.end.466

sw.bb.41:                                         ; preds = %if.then
  %25 = load i32, i32* @ix86_asm_dialect, align 4
  %cmp42 = icmp eq i32 %25, 0
  br i1 %cmp42, label %if.then.43, label %if.end.45

if.then.43:                                       ; preds = %sw.bb.41
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call44 = call i32 @_IO_putc(i32 116, %struct._IO_FILE* %26)
  br label %if.end.45

if.end.45:                                        ; preds = %if.then.43, %sw.bb.41
  br label %if.end.466

sw.bb.46:                                         ; preds = %if.then
  %27 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %28 = bitcast %struct.rtx_def* %27 to i32*
  %bf.load47 = load i32, i32* %28, align 8
  %bf.clear48 = and i32 %bf.load47, 65535
  %cmp49 = icmp eq i32 %bf.clear48, 61
  br i1 %cmp49, label %land.lhs.true, label %if.end.57

land.lhs.true:                                    ; preds = %sw.bb.46
  %29 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %29, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx to i32*
  %30 = load i32, i32* %rtuint, align 4
  %cmp50 = icmp uge i32 %30, 8
  br i1 %cmp50, label %land.lhs.true.51, label %if.end.57

land.lhs.true.51:                                 ; preds = %land.lhs.true
  %31 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld52 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1
  %arrayidx53 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld52, i32 0, i64 0
  %rtuint54 = bitcast %union.rtunion_def* %arrayidx53 to i32*
  %32 = load i32, i32* %rtuint54, align 4
  %cmp55 = icmp ule i32 %32, 15
  br i1 %cmp55, label %if.then.56, label %if.end.57

if.then.56:                                       ; preds = %land.lhs.true.51
  br label %if.end.466

if.end.57:                                        ; preds = %land.lhs.true.51, %land.lhs.true, %sw.bb.46
  %33 = load i32, i32* @ix86_asm_dialect, align 4
  %cmp58 = icmp eq i32 %33, 1
  br i1 %cmp58, label %if.then.59, label %if.end.60

if.then.59:                                       ; preds = %if.end.57
  br label %if.end.466

if.end.60:                                        ; preds = %if.end.57
  %34 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %35 = bitcast %struct.rtx_def* %34 to i32*
  %bf.load61 = load i32, i32* %35, align 8
  %bf.lshr = lshr i32 %bf.load61, 16
  %bf.clear62 = and i32 %bf.lshr, 255
  %idxprom = sext i32 %bf.clear62 to i64
  %arrayidx63 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom
  %36 = load i8, i8* %arrayidx63, align 1
  %conv = zext i8 %36 to i32
  switch i32 %conv, label %sw.default [
    i32 2, label %sw.bb.64
    i32 4, label %sw.bb.66
    i32 12, label %sw.bb.77
    i32 16, label %sw.bb.77
    i32 8, label %sw.bb.79
  ]

sw.bb.64:                                         ; preds = %if.end.60
  %37 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call65 = call i32 @_IO_putc(i32 115, %struct._IO_FILE* %37)
  br label %if.end.466

sw.bb.66:                                         ; preds = %if.end.60
  %38 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %39 = bitcast %struct.rtx_def* %38 to i32*
  %bf.load67 = load i32, i32* %39, align 8
  %bf.lshr68 = lshr i32 %bf.load67, 16
  %bf.clear69 = and i32 %bf.lshr68, 255
  %cmp70 = icmp eq i32 %bf.clear69, 15
  br i1 %cmp70, label %if.then.72, label %if.else.74

if.then.72:                                       ; preds = %sw.bb.66
  %40 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call73 = call i32 @_IO_putc(i32 115, %struct._IO_FILE* %40)
  br label %if.end.466

if.else.74:                                       ; preds = %sw.bb.66
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call75 = call i32 @_IO_putc(i32 108, %struct._IO_FILE* %41)
  br label %if.end.76

if.end.76:                                        ; preds = %if.else.74
  br label %if.end.466

sw.bb.77:                                         ; preds = %if.end.60, %if.end.60
  %42 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call78 = call i32 @_IO_putc(i32 116, %struct._IO_FILE* %42)
  br label %if.end.466

sw.bb.79:                                         ; preds = %if.end.60
  %43 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %44 = bitcast %struct.rtx_def* %43 to i32*
  %bf.load80 = load i32, i32* %44, align 8
  %bf.lshr81 = lshr i32 %bf.load80, 16
  %bf.clear82 = and i32 %bf.lshr81, 255
  %idxprom83 = sext i32 %bf.clear82 to i64
  %arrayidx84 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom83
  %45 = load i32, i32* %arrayidx84, align 4
  %cmp85 = icmp eq i32 %45, 1
  br i1 %cmp85, label %if.then.87, label %if.else.90

if.then.87:                                       ; preds = %sw.bb.79
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call88 = call i32 @_IO_putc(i32 108, %struct._IO_FILE* %46)
  %47 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call89 = call i32 @_IO_putc(i32 108, %struct._IO_FILE* %47)
  br label %if.end.92

if.else.90:                                       ; preds = %sw.bb.79
  %48 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call91 = call i32 @_IO_putc(i32 108, %struct._IO_FILE* %48)
  br label %if.end.92

if.end.92:                                        ; preds = %if.else.90, %if.then.87
  br label %if.end.466

sw.default:                                       ; preds = %if.end.60
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 5861, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @__FUNCTION__.print_operand, i32 0, i32 0)) #7
  unreachable

sw.bb.93:                                         ; preds = %if.then, %if.then, %if.then, %if.then, %if.then, %if.then, %if.then, %if.then
  br label %sw.epilog.208

sw.bb.94:                                         ; preds = %if.then
  %49 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %50 = bitcast %struct.rtx_def* %49 to i32*
  %bf.load95 = load i32, i32* %50, align 8
  %bf.clear96 = and i32 %bf.load95, 65535
  %cmp97 = icmp eq i32 %bf.clear96, 54
  br i1 %cmp97, label %if.then.99, label %if.end.101

if.then.99:                                       ; preds = %sw.bb.94
  %51 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %52 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  call void @print_operand(%struct._IO_FILE* %51, %struct.rtx_def* %52, i32 0)
  %53 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call100 = call i32 @_IO_putc(i32 44, %struct._IO_FILE* %53)
  br label %if.end.101

if.end.101:                                       ; preds = %if.then.99, %sw.bb.94
  br label %if.end.466

sw.bb.102:                                        ; preds = %if.then
  %54 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %55 = bitcast %struct.rtx_def* %54 to i32*
  %bf.load103 = load i32, i32* %55, align 8
  %bf.clear104 = and i32 %bf.load103, 65535
  switch i32 %bf.clear104, label %sw.default.121 [
    i32 103, label %sw.bb.105
    i32 114, label %sw.bb.105
    i32 107, label %sw.bb.107
    i32 118, label %sw.bb.107
    i32 106, label %sw.bb.109
    i32 117, label %sw.bb.109
    i32 112, label %sw.bb.111
    i32 102, label %sw.bb.113
    i32 119, label %sw.bb.113
    i32 115, label %sw.bb.115
    i32 104, label %sw.bb.115
    i32 116, label %sw.bb.117
    i32 105, label %sw.bb.117
    i32 113, label %sw.bb.119
  ]

sw.bb.105:                                        ; preds = %sw.bb.102, %sw.bb.102
  %56 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call106 = call i32 @fputs(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.109, i32 0, i32 0), %struct._IO_FILE* %56)
  br label %sw.epilog

sw.bb.107:                                        ; preds = %sw.bb.102, %sw.bb.102
  %57 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call108 = call i32 @fputs(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.110, i32 0, i32 0), %struct._IO_FILE* %57)
  br label %sw.epilog

sw.bb.109:                                        ; preds = %sw.bb.102, %sw.bb.102
  %58 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call110 = call i32 @fputs(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.111, i32 0, i32 0), %struct._IO_FILE* %58)
  br label %sw.epilog

sw.bb.111:                                        ; preds = %sw.bb.102
  %59 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call112 = call i32 @fputs(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.112, i32 0, i32 0), %struct._IO_FILE* %59)
  br label %sw.epilog

sw.bb.113:                                        ; preds = %sw.bb.102, %sw.bb.102
  %60 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call114 = call i32 @fputs(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.113, i32 0, i32 0), %struct._IO_FILE* %60)
  br label %sw.epilog

sw.bb.115:                                        ; preds = %sw.bb.102, %sw.bb.102
  %61 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call116 = call i32 @fputs(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.114, i32 0, i32 0), %struct._IO_FILE* %61)
  br label %sw.epilog

sw.bb.117:                                        ; preds = %sw.bb.102, %sw.bb.102
  %62 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call118 = call i32 @fputs(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.115, i32 0, i32 0), %struct._IO_FILE* %62)
  br label %sw.epilog

sw.bb.119:                                        ; preds = %sw.bb.102
  %63 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call120 = call i32 @fputs(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.116, i32 0, i32 0), %struct._IO_FILE* %63)
  br label %sw.epilog

sw.default.121:                                   ; preds = %sw.bb.102
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 5919, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @__FUNCTION__.print_operand, i32 0, i32 0)) #7
  unreachable

sw.epilog:                                        ; preds = %sw.bb.119, %sw.bb.117, %sw.bb.115, %sw.bb.113, %sw.bb.111, %sw.bb.109, %sw.bb.107, %sw.bb.105
  br label %if.end.466

sw.bb.122:                                        ; preds = %if.then
  br label %if.end.466

sw.bb.123:                                        ; preds = %if.then
  %64 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %65 = bitcast %struct.rtx_def* %64 to i32*
  %bf.load124 = load i32, i32* %65, align 8
  %bf.clear125 = and i32 %bf.load124, 65535
  %66 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld126 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %66, i32 0, i32 1
  %arrayidx127 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld126, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx127 to %struct.rtx_def**
  %67 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %68 = bitcast %struct.rtx_def* %67 to i32*
  %bf.load128 = load i32, i32* %68, align 8
  %bf.lshr129 = lshr i32 %bf.load128, 16
  %bf.clear130 = and i32 %bf.lshr129, 255
  %69 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  call void @put_condition_code(i32 %bf.clear125, i32 %bf.clear130, i32 0, i32 0, %struct._IO_FILE* %69)
  br label %if.end.466

sw.bb.131:                                        ; preds = %if.then
  %70 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %71 = bitcast %struct.rtx_def* %70 to i32*
  %bf.load132 = load i32, i32* %71, align 8
  %bf.clear133 = and i32 %bf.load132, 65535
  %72 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld134 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %72, i32 0, i32 1
  %arrayidx135 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld134, i32 0, i64 0
  %rtx136 = bitcast %union.rtunion_def* %arrayidx135 to %struct.rtx_def**
  %73 = load %struct.rtx_def*, %struct.rtx_def** %rtx136, align 8
  %74 = bitcast %struct.rtx_def* %73 to i32*
  %bf.load137 = load i32, i32* %74, align 8
  %bf.lshr138 = lshr i32 %bf.load137, 16
  %bf.clear139 = and i32 %bf.lshr138, 255
  %75 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  call void @put_condition_code(i32 %bf.clear133, i32 %bf.clear139, i32 0, i32 1, %struct._IO_FILE* %75)
  br label %if.end.466

sw.bb.140:                                        ; preds = %if.then
  %76 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %77 = bitcast %struct.rtx_def* %76 to i32*
  %bf.load141 = load i32, i32* %77, align 8
  %bf.clear142 = and i32 %bf.load141, 65535
  %idxprom143 = sext i32 %bf.clear142 to i64
  %arrayidx144 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom143
  %78 = load i8, i8* %arrayidx144, align 1
  %conv145 = sext i8 %78 to i32
  %cmp146 = icmp ne i32 %conv145, 60
  br i1 %cmp146, label %if.then.148, label %if.end.149

if.then.148:                                      ; preds = %sw.bb.140
  call void (i8*, ...) @output_operand_lossage(i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.117, i32 0, i32 0))
  br label %if.end.466

if.end.149:                                       ; preds = %sw.bb.140
  %79 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %80 = bitcast %struct.rtx_def* %79 to i32*
  %bf.load150 = load i32, i32* %80, align 8
  %bf.clear151 = and i32 %bf.load150, 65535
  %81 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld152 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %81, i32 0, i32 1
  %arrayidx153 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld152, i32 0, i64 0
  %rtx154 = bitcast %union.rtunion_def* %arrayidx153 to %struct.rtx_def**
  %82 = load %struct.rtx_def*, %struct.rtx_def** %rtx154, align 8
  %83 = bitcast %struct.rtx_def* %82 to i32*
  %bf.load155 = load i32, i32* %83, align 8
  %bf.lshr156 = lshr i32 %bf.load155, 16
  %bf.clear157 = and i32 %bf.lshr156, 255
  %84 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  call void @put_condition_code(i32 %bf.clear151, i32 %bf.clear157, i32 1, i32 0, %struct._IO_FILE* %84)
  br label %if.end.466

sw.bb.158:                                        ; preds = %if.then
  %85 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %86 = bitcast %struct.rtx_def* %85 to i32*
  %bf.load159 = load i32, i32* %86, align 8
  %bf.clear160 = and i32 %bf.load159, 65535
  %87 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld161 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %87, i32 0, i32 1
  %arrayidx162 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld161, i32 0, i64 0
  %rtx163 = bitcast %union.rtunion_def* %arrayidx162 to %struct.rtx_def**
  %88 = load %struct.rtx_def*, %struct.rtx_def** %rtx163, align 8
  %89 = bitcast %struct.rtx_def* %88 to i32*
  %bf.load164 = load i32, i32* %89, align 8
  %bf.lshr165 = lshr i32 %bf.load164, 16
  %bf.clear166 = and i32 %bf.lshr165, 255
  %90 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  call void @put_condition_code(i32 %bf.clear160, i32 %bf.clear166, i32 1, i32 1, %struct._IO_FILE* %90)
  br label %if.end.466

sw.bb.167:                                        ; preds = %if.then
  %91 = load i32, i32* @optimize, align 4
  %tobool169 = icmp ne i32 %91, 0
  br i1 %tobool169, label %lor.lhs.false, label %if.then.173

lor.lhs.false:                                    ; preds = %sw.bb.167
  %92 = load i32, i32* @optimize_size, align 4
  %tobool170 = icmp ne i32 %92, 0
  br i1 %tobool170, label %if.then.173, label %lor.lhs.false.171

lor.lhs.false.171:                                ; preds = %lor.lhs.false
  %93 = load i32, i32* @ix86_cpu, align 4
  %shl = shl i32 1, %93
  %and = and i32 64, %shl
  %tobool172 = icmp ne i32 %and, 0
  br i1 %tobool172, label %if.end.174, label %if.then.173

if.then.173:                                      ; preds = %lor.lhs.false.171, %lor.lhs.false, %sw.bb.167
  br label %if.end.466

if.end.174:                                       ; preds = %lor.lhs.false.171
  %94 = load %struct.rtx_def*, %struct.rtx_def** @current_output_insn, align 8
  %call175 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %94, i32 16, %struct.rtx_def* null)
  store %struct.rtx_def* %call175, %struct.rtx_def** %x168, align 8
  %95 = load %struct.rtx_def*, %struct.rtx_def** %x168, align 8
  %tobool176 = icmp ne %struct.rtx_def* %95, null
  br i1 %tobool176, label %if.then.177, label %if.end.206

if.then.177:                                      ; preds = %if.end.174
  %96 = load %struct.rtx_def*, %struct.rtx_def** %x168, align 8
  %fld178 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %96, i32 0, i32 1
  %arrayidx179 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld178, i32 0, i64 0
  %rtx180 = bitcast %union.rtunion_def* %arrayidx179 to %struct.rtx_def**
  %97 = load %struct.rtx_def*, %struct.rtx_def** %rtx180, align 8
  %fld181 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %97, i32 0, i32 1
  %arrayidx182 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld181, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx182 to i64*
  %98 = load i64, i64* %rtwint, align 8
  %conv183 = trunc i64 %98 to i32
  store i32 %conv183, i32* %pred_val, align 4
  %99 = load i32, i32* %pred_val, align 4
  %cmp184 = icmp slt i32 %99, 4500
  br i1 %cmp184, label %if.then.189, label %lor.lhs.false.186

lor.lhs.false.186:                                ; preds = %if.then.177
  %100 = load i32, i32* %pred_val, align 4
  %cmp187 = icmp sgt i32 %100, 5500
  br i1 %cmp187, label %if.then.189, label %if.end.205

if.then.189:                                      ; preds = %lor.lhs.false.186, %if.then.177
  %101 = load i32, i32* %pred_val, align 4
  %cmp190 = icmp sgt i32 %101, 5000
  %conv191 = zext i1 %cmp190 to i32
  store i32 %conv191, i32* %taken, align 4
  %102 = load %struct.rtx_def*, %struct.rtx_def** @current_output_insn, align 8
  %call192 = call i32 @final_forward_branch_p(%struct.rtx_def* %102)
  %cmp193 = icmp eq i32 %call192, 0
  %conv194 = zext i1 %cmp193 to i32
  store i32 %conv194, i32* %cputaken, align 4
  %103 = load i32, i32* %taken, align 4
  %104 = load i32, i32* %cputaken, align 4
  %cmp195 = icmp ne i32 %103, %104
  br i1 %cmp195, label %if.then.197, label %if.end.204

if.then.197:                                      ; preds = %if.then.189
  %105 = load i32, i32* %taken, align 4
  %tobool198 = icmp ne i32 %105, 0
  br i1 %tobool198, label %if.then.199, label %if.else.201

if.then.199:                                      ; preds = %if.then.197
  %106 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call200 = call i32 @fputs(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.118, i32 0, i32 0), %struct._IO_FILE* %106)
  br label %if.end.203

if.else.201:                                      ; preds = %if.then.197
  %107 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call202 = call i32 @fputs(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.119, i32 0, i32 0), %struct._IO_FILE* %107)
  br label %if.end.203

if.end.203:                                       ; preds = %if.else.201, %if.then.199
  br label %if.end.204

if.end.204:                                       ; preds = %if.end.203, %if.then.189
  br label %if.end.205

if.end.205:                                       ; preds = %if.end.204, %lor.lhs.false.186
  br label %if.end.206

if.end.206:                                       ; preds = %if.end.205, %if.end.174
  br label %if.end.466

sw.default.207:                                   ; preds = %if.then
  %108 = load i32, i32* %code.addr, align 4
  call void (i8*, ...) @output_operand_lossage(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.120, i32 0, i32 0), i32 %108)
  br label %sw.epilog.208

sw.epilog.208:                                    ; preds = %sw.default.207, %sw.bb.93
  br label %if.end.209

if.end.209:                                       ; preds = %sw.epilog.208, %entry
  %109 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %110 = bitcast %struct.rtx_def* %109 to i32*
  %bf.load210 = load i32, i32* %110, align 8
  %bf.clear211 = and i32 %bf.load210, 65535
  %cmp212 = icmp eq i32 %bf.clear211, 61
  br i1 %cmp212, label %if.then.214, label %if.else.215

if.then.214:                                      ; preds = %if.end.209
  %111 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %112 = load i32, i32* %code.addr, align 4
  %113 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  call void @print_reg(%struct.rtx_def* %111, i32 %112, %struct._IO_FILE* %113)
  br label %if.end.466

if.else.215:                                      ; preds = %if.end.209
  %114 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %115 = bitcast %struct.rtx_def* %114 to i32*
  %bf.load216 = load i32, i32* %115, align 8
  %bf.clear217 = and i32 %bf.load216, 65535
  %cmp218 = icmp eq i32 %bf.clear217, 66
  br i1 %cmp218, label %if.then.220, label %if.else.328

if.then.220:                                      ; preds = %if.else.215
  %116 = load i32, i32* @ix86_asm_dialect, align 4
  %cmp221 = icmp eq i32 %116, 1
  br i1 %cmp221, label %land.lhs.true.223, label %if.end.260

land.lhs.true.223:                                ; preds = %if.then.220
  %117 = load i32, i32* %code.addr, align 4
  %cmp224 = icmp ne i32 %117, 88
  br i1 %cmp224, label %land.lhs.true.226, label %if.end.260

land.lhs.true.226:                                ; preds = %land.lhs.true.223
  %118 = load i32, i32* %code.addr, align 4
  %cmp227 = icmp ne i32 %118, 80
  br i1 %cmp227, label %if.then.229, label %if.end.260

if.then.229:                                      ; preds = %land.lhs.true.226
  %119 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %120 = bitcast %struct.rtx_def* %119 to i32*
  %bf.load230 = load i32, i32* %120, align 8
  %bf.lshr231 = lshr i32 %bf.load230, 16
  %bf.clear232 = and i32 %bf.lshr231, 255
  %idxprom233 = sext i32 %bf.clear232 to i64
  %arrayidx234 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom233
  %121 = load i8, i8* %arrayidx234, align 1
  %conv235 = zext i8 %121 to i32
  switch i32 %conv235, label %sw.default.242 [
    i32 1, label %sw.bb.236
    i32 2, label %sw.bb.237
    i32 4, label %sw.bb.238
    i32 8, label %sw.bb.239
    i32 12, label %sw.bb.240
    i32 16, label %sw.bb.241
  ]

sw.bb.236:                                        ; preds = %if.then.229
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.121, i32 0, i32 0), i8** %size, align 8
  br label %sw.epilog.243

sw.bb.237:                                        ; preds = %if.then.229
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.122, i32 0, i32 0), i8** %size, align 8
  br label %sw.epilog.243

sw.bb.238:                                        ; preds = %if.then.229
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.123, i32 0, i32 0), i8** %size, align 8
  br label %sw.epilog.243

sw.bb.239:                                        ; preds = %if.then.229
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.124, i32 0, i32 0), i8** %size, align 8
  br label %sw.epilog.243

sw.bb.240:                                        ; preds = %if.then.229
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.125, i32 0, i32 0), i8** %size, align 8
  br label %sw.epilog.243

sw.bb.241:                                        ; preds = %if.then.229
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.126, i32 0, i32 0), i8** %size, align 8
  br label %sw.epilog.243

sw.default.242:                                   ; preds = %if.then.229
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 6027, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @__FUNCTION__.print_operand, i32 0, i32 0)) #7
  unreachable

sw.epilog.243:                                    ; preds = %sw.bb.241, %sw.bb.240, %sw.bb.239, %sw.bb.238, %sw.bb.237, %sw.bb.236
  %122 = load i32, i32* %code.addr, align 4
  %cmp244 = icmp eq i32 %122, 98
  br i1 %cmp244, label %if.then.246, label %if.else.247

if.then.246:                                      ; preds = %sw.epilog.243
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.121, i32 0, i32 0), i8** %size, align 8
  br label %if.end.257

if.else.247:                                      ; preds = %sw.epilog.243
  %123 = load i32, i32* %code.addr, align 4
  %cmp248 = icmp eq i32 %123, 119
  br i1 %cmp248, label %if.then.250, label %if.else.251

if.then.250:                                      ; preds = %if.else.247
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.122, i32 0, i32 0), i8** %size, align 8
  br label %if.end.256

if.else.251:                                      ; preds = %if.else.247
  %124 = load i32, i32* %code.addr, align 4
  %cmp252 = icmp eq i32 %124, 107
  br i1 %cmp252, label %if.then.254, label %if.end.255

if.then.254:                                      ; preds = %if.else.251
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.123, i32 0, i32 0), i8** %size, align 8
  br label %if.end.255

if.end.255:                                       ; preds = %if.then.254, %if.else.251
  br label %if.end.256

if.end.256:                                       ; preds = %if.end.255, %if.then.250
  br label %if.end.257

if.end.257:                                       ; preds = %if.end.256, %if.then.246
  %125 = load i8*, i8** %size, align 8
  %126 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call258 = call i32 @fputs(i8* %125, %struct._IO_FILE* %126)
  %127 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call259 = call i32 @fputs(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.127, i32 0, i32 0), %struct._IO_FILE* %127)
  br label %if.end.260

if.end.260:                                       ; preds = %if.end.257, %land.lhs.true.226, %land.lhs.true.223, %if.then.220
  %128 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld261 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %128, i32 0, i32 1
  %arrayidx262 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld261, i32 0, i64 0
  %rtx263 = bitcast %union.rtunion_def* %arrayidx262 to %struct.rtx_def**
  %129 = load %struct.rtx_def*, %struct.rtx_def** %rtx263, align 8
  store %struct.rtx_def* %129, %struct.rtx_def** %x.addr, align 8
  %130 = load i32, i32* @flag_pic, align 4
  %tobool264 = icmp ne i32 %130, 0
  br i1 %tobool264, label %land.lhs.true.265, label %if.else.291

land.lhs.true.265:                                ; preds = %if.end.260
  %131 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %132 = bitcast %struct.rtx_def* %131 to i32*
  %bf.load266 = load i32, i32* %132, align 8
  %bf.clear267 = and i32 %bf.load266, 65535
  %cmp268 = icmp eq i32 %bf.clear267, 67
  br i1 %cmp268, label %if.then.290, label %lor.lhs.false.270

lor.lhs.false.270:                                ; preds = %land.lhs.true.265
  %133 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %134 = bitcast %struct.rtx_def* %133 to i32*
  %bf.load271 = load i32, i32* %134, align 8
  %bf.clear272 = and i32 %bf.load271, 65535
  %cmp273 = icmp eq i32 %bf.clear272, 68
  br i1 %cmp273, label %if.then.290, label %lor.lhs.false.275

lor.lhs.false.275:                                ; preds = %lor.lhs.false.270
  %135 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %136 = bitcast %struct.rtx_def* %135 to i32*
  %bf.load276 = load i32, i32* %136, align 8
  %bf.clear277 = and i32 %bf.load276, 65535
  %cmp278 = icmp eq i32 %bf.clear277, 54
  br i1 %cmp278, label %if.then.290, label %lor.lhs.false.280

lor.lhs.false.280:                                ; preds = %lor.lhs.false.275
  %137 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %138 = bitcast %struct.rtx_def* %137 to i32*
  %bf.load281 = load i32, i32* %138, align 8
  %bf.clear282 = and i32 %bf.load281, 65535
  %cmp283 = icmp eq i32 %bf.clear282, 58
  br i1 %cmp283, label %if.then.290, label %lor.lhs.false.285

lor.lhs.false.285:                                ; preds = %lor.lhs.false.280
  %139 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %140 = bitcast %struct.rtx_def* %139 to i32*
  %bf.load286 = load i32, i32* %140, align 8
  %bf.clear287 = and i32 %bf.load286, 65535
  %cmp288 = icmp eq i32 %bf.clear287, 55
  br i1 %cmp288, label %if.then.290, label %if.else.291

if.then.290:                                      ; preds = %lor.lhs.false.285, %lor.lhs.false.280, %lor.lhs.false.275, %lor.lhs.false.270, %land.lhs.true.265
  %141 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %142 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %143 = load i32, i32* %code.addr, align 4
  call void @output_pic_addr_const(%struct._IO_FILE* %141, %struct.rtx_def* %142, i32 %143)
  br label %if.end.327

if.else.291:                                      ; preds = %lor.lhs.false.285, %if.end.260
  %144 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %145 = bitcast %struct.rtx_def* %144 to i32*
  %bf.load292 = load i32, i32* %145, align 8
  %bf.clear293 = and i32 %bf.load292, 65535
  %cmp294 = icmp eq i32 %bf.clear293, 67
  br i1 %cmp294, label %land.lhs.true.316, label %lor.lhs.false.296

lor.lhs.false.296:                                ; preds = %if.else.291
  %146 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %147 = bitcast %struct.rtx_def* %146 to i32*
  %bf.load297 = load i32, i32* %147, align 8
  %bf.clear298 = and i32 %bf.load297, 65535
  %cmp299 = icmp eq i32 %bf.clear298, 68
  br i1 %cmp299, label %land.lhs.true.316, label %lor.lhs.false.301

lor.lhs.false.301:                                ; preds = %lor.lhs.false.296
  %148 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %149 = bitcast %struct.rtx_def* %148 to i32*
  %bf.load302 = load i32, i32* %149, align 8
  %bf.clear303 = and i32 %bf.load302, 65535
  %cmp304 = icmp eq i32 %bf.clear303, 54
  br i1 %cmp304, label %land.lhs.true.316, label %lor.lhs.false.306

lor.lhs.false.306:                                ; preds = %lor.lhs.false.301
  %150 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %151 = bitcast %struct.rtx_def* %150 to i32*
  %bf.load307 = load i32, i32* %151, align 8
  %bf.clear308 = and i32 %bf.load307, 65535
  %cmp309 = icmp eq i32 %bf.clear308, 58
  br i1 %cmp309, label %land.lhs.true.316, label %lor.lhs.false.311

lor.lhs.false.311:                                ; preds = %lor.lhs.false.306
  %152 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %153 = bitcast %struct.rtx_def* %152 to i32*
  %bf.load312 = load i32, i32* %153, align 8
  %bf.clear313 = and i32 %bf.load312, 65535
  %cmp314 = icmp eq i32 %bf.clear313, 55
  br i1 %cmp314, label %land.lhs.true.316, label %if.else.325

land.lhs.true.316:                                ; preds = %lor.lhs.false.311, %lor.lhs.false.306, %lor.lhs.false.301, %lor.lhs.false.296, %if.else.291
  %154 = load i32, i32* %code.addr, align 4
  %cmp317 = icmp eq i32 %154, 80
  br i1 %cmp317, label %land.lhs.true.319, label %if.else.325

land.lhs.true.319:                                ; preds = %land.lhs.true.316
  %155 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %156 = bitcast %struct.rtx_def* %155 to i32*
  %bf.load320 = load i32, i32* %156, align 8
  %bf.clear321 = and i32 %bf.load320, 65535
  %cmp322 = icmp ne i32 %bf.clear321, 54
  br i1 %cmp322, label %if.then.324, label %if.else.325

if.then.324:                                      ; preds = %land.lhs.true.319
  %157 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %158 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  call void @output_addr_const(%struct._IO_FILE* %157, %struct.rtx_def* %158)
  br label %if.end.326

if.else.325:                                      ; preds = %land.lhs.true.319, %land.lhs.true.316, %lor.lhs.false.311
  %159 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  call void @output_address(%struct.rtx_def* %159)
  br label %if.end.326

if.end.326:                                       ; preds = %if.else.325, %if.then.324
  br label %if.end.327

if.end.327:                                       ; preds = %if.end.326, %if.then.290
  br label %if.end.465

if.else.328:                                      ; preds = %if.else.215
  %160 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %161 = bitcast %struct.rtx_def* %160 to i32*
  %bf.load329 = load i32, i32* %161, align 8
  %bf.clear330 = and i32 %bf.load329, 65535
  %cmp331 = icmp eq i32 %bf.clear330, 55
  br i1 %cmp331, label %land.lhs.true.333, label %if.else.350

land.lhs.true.333:                                ; preds = %if.else.328
  %162 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %163 = bitcast %struct.rtx_def* %162 to i32*
  %bf.load334 = load i32, i32* %163, align 8
  %bf.lshr335 = lshr i32 %bf.load334, 16
  %bf.clear336 = and i32 %bf.lshr335, 255
  %cmp337 = icmp eq i32 %bf.clear336, 15
  br i1 %cmp337, label %if.then.339, label %if.else.350

if.then.339:                                      ; preds = %land.lhs.true.333
  br label %do.body

do.body:                                          ; preds = %if.then.339
  %164 = bitcast %union.real_extract* %u to i8*
  %165 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld340 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %165, i32 0, i32 1
  %arrayidx341 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld340, i32 0, i64 1
  %rtwint342 = bitcast %union.rtunion_def* %arrayidx341 to i64*
  %166 = bitcast i64* %rtwint342 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %164, i8* %166, i64 24, i32 8, i1 false)
  %d = bitcast %union.real_extract* %u to %struct.realvaluetype*
  %167 = bitcast %struct.realvaluetype* %r to i8*
  %168 = bitcast %struct.realvaluetype* %d to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %167, i8* %168, i64 24, i32 8, i1 false)
  br label %do.end

do.end:                                           ; preds = %do.body
  %call343 = call i64 @etarsingle(%struct.realvaluetype* byval align 8 %r)
  store i64 %call343, i64* %l, align 8
  %169 = load i32, i32* @ix86_asm_dialect, align 4
  %cmp344 = icmp eq i32 %169, 0
  br i1 %cmp344, label %if.then.346, label %if.end.348

if.then.346:                                      ; preds = %do.end
  %170 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call347 = call i32 @_IO_putc(i32 36, %struct._IO_FILE* %170)
  br label %if.end.348

if.end.348:                                       ; preds = %if.then.346, %do.end
  %171 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %172 = load i64, i64* %l, align 8
  %call349 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %171, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.128, i32 0, i32 0), i64 %172)
  br label %if.end.464

if.else.350:                                      ; preds = %land.lhs.true.333, %if.else.328
  %173 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %174 = bitcast %struct.rtx_def* %173 to i32*
  %bf.load351 = load i32, i32* %174, align 8
  %bf.clear352 = and i32 %bf.load351, 65535
  %cmp353 = icmp eq i32 %bf.clear352, 55
  br i1 %cmp353, label %land.lhs.true.355, label %if.else.372

land.lhs.true.355:                                ; preds = %if.else.350
  %175 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %176 = bitcast %struct.rtx_def* %175 to i32*
  %bf.load356 = load i32, i32* %176, align 8
  %bf.lshr357 = lshr i32 %bf.load356, 16
  %bf.clear358 = and i32 %bf.lshr357, 255
  %cmp359 = icmp eq i32 %bf.clear358, 16
  br i1 %cmp359, label %if.then.361, label %if.else.372

if.then.361:                                      ; preds = %land.lhs.true.355
  br label %do.body.363

do.body.363:                                      ; preds = %if.then.361
  %177 = bitcast %union.real_extract* %u364 to i8*
  %178 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld365 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %178, i32 0, i32 1
  %arrayidx366 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld365, i32 0, i64 1
  %rtwint367 = bitcast %union.rtunion_def* %arrayidx366 to i64*
  %179 = bitcast i64* %rtwint367 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %177, i8* %179, i64 24, i32 8, i1 false)
  %d368 = bitcast %union.real_extract* %u364 to %struct.realvaluetype*
  %180 = bitcast %struct.realvaluetype* %r362 to i8*
  %181 = bitcast %struct.realvaluetype* %d368 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %180, i8* %181, i64 24, i32 8, i1 false)
  br label %do.end.369

do.end.369:                                       ; preds = %do.body.363
  %arraydecay = getelementptr inbounds [30 x i8], [30 x i8]* %dstr, i32 0, i32 0
  call void @ereal_to_decimal(%struct.realvaluetype* byval align 8 %r362, i8* %arraydecay)
  %182 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %arraydecay370 = getelementptr inbounds [30 x i8], [30 x i8]* %dstr, i32 0, i32 0
  %call371 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %182, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.101, i32 0, i32 0), i8* %arraydecay370)
  br label %if.end.463

if.else.372:                                      ; preds = %land.lhs.true.355, %if.else.350
  %183 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %184 = bitcast %struct.rtx_def* %183 to i32*
  %bf.load373 = load i32, i32* %184, align 8
  %bf.clear374 = and i32 %bf.load373, 65535
  %cmp375 = icmp eq i32 %bf.clear374, 55
  br i1 %cmp375, label %land.lhs.true.377, label %if.else.402

land.lhs.true.377:                                ; preds = %if.else.372
  %185 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %186 = bitcast %struct.rtx_def* %185 to i32*
  %bf.load378 = load i32, i32* %186, align 8
  %bf.lshr379 = lshr i32 %bf.load378, 16
  %bf.clear380 = and i32 %bf.lshr379, 255
  %cmp381 = icmp eq i32 %bf.clear380, 17
  br i1 %cmp381, label %if.then.389, label %lor.lhs.false.383

lor.lhs.false.383:                                ; preds = %land.lhs.true.377
  %187 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %188 = bitcast %struct.rtx_def* %187 to i32*
  %bf.load384 = load i32, i32* %188, align 8
  %bf.lshr385 = lshr i32 %bf.load384, 16
  %bf.clear386 = and i32 %bf.lshr385, 255
  %cmp387 = icmp eq i32 %bf.clear386, 18
  br i1 %cmp387, label %if.then.389, label %if.else.402

if.then.389:                                      ; preds = %lor.lhs.false.383, %land.lhs.true.377
  br label %do.body.392

do.body.392:                                      ; preds = %if.then.389
  %189 = bitcast %union.real_extract* %u393 to i8*
  %190 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld394 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %190, i32 0, i32 1
  %arrayidx395 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld394, i32 0, i64 1
  %rtwint396 = bitcast %union.rtunion_def* %arrayidx395 to i64*
  %191 = bitcast i64* %rtwint396 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %189, i8* %191, i64 24, i32 8, i1 false)
  %d397 = bitcast %union.real_extract* %u393 to %struct.realvaluetype*
  %192 = bitcast %struct.realvaluetype* %r390 to i8*
  %193 = bitcast %struct.realvaluetype* %d397 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %192, i8* %193, i64 24, i32 8, i1 false)
  br label %do.end.398

do.end.398:                                       ; preds = %do.body.392
  %arraydecay399 = getelementptr inbounds [30 x i8], [30 x i8]* %dstr391, i32 0, i32 0
  call void @ereal_to_decimal(%struct.realvaluetype* byval align 8 %r390, i8* %arraydecay399)
  %194 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %arraydecay400 = getelementptr inbounds [30 x i8], [30 x i8]* %dstr391, i32 0, i32 0
  %call401 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %194, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.101, i32 0, i32 0), i8* %arraydecay400)
  br label %if.end.462

if.else.402:                                      ; preds = %lor.lhs.false.383, %if.else.372
  %195 = load i32, i32* %code.addr, align 4
  %cmp403 = icmp ne i32 %195, 80
  br i1 %cmp403, label %if.then.405, label %if.end.446

if.then.405:                                      ; preds = %if.else.402
  %196 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %197 = bitcast %struct.rtx_def* %196 to i32*
  %bf.load406 = load i32, i32* %197, align 8
  %bf.clear407 = and i32 %bf.load406, 65535
  %cmp408 = icmp eq i32 %bf.clear407, 54
  br i1 %cmp408, label %if.then.415, label %lor.lhs.false.410

lor.lhs.false.410:                                ; preds = %if.then.405
  %198 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %199 = bitcast %struct.rtx_def* %198 to i32*
  %bf.load411 = load i32, i32* %199, align 8
  %bf.clear412 = and i32 %bf.load411, 65535
  %cmp413 = icmp eq i32 %bf.clear412, 55
  br i1 %cmp413, label %if.then.415, label %if.else.421

if.then.415:                                      ; preds = %lor.lhs.false.410, %if.then.405
  %200 = load i32, i32* @ix86_asm_dialect, align 4
  %cmp416 = icmp eq i32 %200, 0
  br i1 %cmp416, label %if.then.418, label %if.end.420

if.then.418:                                      ; preds = %if.then.415
  %201 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call419 = call i32 @_IO_putc(i32 36, %struct._IO_FILE* %201)
  br label %if.end.420

if.end.420:                                       ; preds = %if.then.418, %if.then.415
  br label %if.end.445

if.else.421:                                      ; preds = %lor.lhs.false.410
  %202 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %203 = bitcast %struct.rtx_def* %202 to i32*
  %bf.load422 = load i32, i32* %203, align 8
  %bf.clear423 = and i32 %bf.load422, 65535
  %cmp424 = icmp eq i32 %bf.clear423, 58
  br i1 %cmp424, label %if.then.436, label %lor.lhs.false.426

lor.lhs.false.426:                                ; preds = %if.else.421
  %204 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %205 = bitcast %struct.rtx_def* %204 to i32*
  %bf.load427 = load i32, i32* %205, align 8
  %bf.clear428 = and i32 %bf.load427, 65535
  %cmp429 = icmp eq i32 %bf.clear428, 68
  br i1 %cmp429, label %if.then.436, label %lor.lhs.false.431

lor.lhs.false.431:                                ; preds = %lor.lhs.false.426
  %206 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %207 = bitcast %struct.rtx_def* %206 to i32*
  %bf.load432 = load i32, i32* %207, align 8
  %bf.clear433 = and i32 %bf.load432, 65535
  %cmp434 = icmp eq i32 %bf.clear433, 67
  br i1 %cmp434, label %if.then.436, label %if.end.444

if.then.436:                                      ; preds = %lor.lhs.false.431, %lor.lhs.false.426, %if.else.421
  %208 = load i32, i32* @ix86_asm_dialect, align 4
  %cmp437 = icmp eq i32 %208, 0
  br i1 %cmp437, label %if.then.439, label %if.else.441

if.then.439:                                      ; preds = %if.then.436
  %209 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call440 = call i32 @_IO_putc(i32 36, %struct._IO_FILE* %209)
  br label %if.end.443

if.else.441:                                      ; preds = %if.then.436
  %210 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call442 = call i32 @fputs(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.129, i32 0, i32 0), %struct._IO_FILE* %210)
  br label %if.end.443

if.end.443:                                       ; preds = %if.else.441, %if.then.439
  br label %if.end.444

if.end.444:                                       ; preds = %if.end.443, %lor.lhs.false.431
  br label %if.end.445

if.end.445:                                       ; preds = %if.end.444, %if.end.420
  br label %if.end.446

if.end.446:                                       ; preds = %if.end.445, %if.else.402
  %211 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %212 = bitcast %struct.rtx_def* %211 to i32*
  %bf.load447 = load i32, i32* %212, align 8
  %bf.clear448 = and i32 %bf.load447, 65535
  %cmp449 = icmp eq i32 %bf.clear448, 54
  br i1 %cmp449, label %if.then.451, label %if.else.456

if.then.451:                                      ; preds = %if.end.446
  %213 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %214 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld452 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %214, i32 0, i32 1
  %arrayidx453 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld452, i32 0, i64 0
  %rtwint454 = bitcast %union.rtunion_def* %arrayidx453 to i64*
  %215 = load i64, i64* %rtwint454, align 8
  %call455 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %213, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.130, i32 0, i32 0), i64 %215)
  br label %if.end.461

if.else.456:                                      ; preds = %if.end.446
  %216 = load i32, i32* @flag_pic, align 4
  %tobool457 = icmp ne i32 %216, 0
  br i1 %tobool457, label %if.then.458, label %if.else.459

if.then.458:                                      ; preds = %if.else.456
  %217 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %218 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %219 = load i32, i32* %code.addr, align 4
  call void @output_pic_addr_const(%struct._IO_FILE* %217, %struct.rtx_def* %218, i32 %219)
  br label %if.end.460

if.else.459:                                      ; preds = %if.else.456
  %220 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %221 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  call void @output_addr_const(%struct._IO_FILE* %220, %struct.rtx_def* %221)
  br label %if.end.460

if.end.460:                                       ; preds = %if.else.459, %if.then.458
  br label %if.end.461

if.end.461:                                       ; preds = %if.end.460, %if.then.451
  br label %if.end.462

if.end.462:                                       ; preds = %if.end.461, %do.end.398
  br label %if.end.463

if.end.463:                                       ; preds = %if.end.462, %do.end.369
  br label %if.end.464

if.end.464:                                       ; preds = %if.end.463, %if.end.348
  br label %if.end.465

if.end.465:                                       ; preds = %if.end.464, %if.end.327
  br label %if.end.466

if.end.466:                                       ; preds = %if.end, %if.then.9, %if.end.15, %if.end.20, %if.end.25, %if.end.30, %if.end.35, %if.end.40, %if.end.45, %if.then.56, %if.then.59, %sw.bb.64, %if.then.72, %if.end.76, %sw.bb.77, %if.end.92, %if.end.101, %sw.epilog, %sw.bb.122, %sw.bb.123, %sw.bb.131, %if.then.148, %if.end.149, %sw.bb.158, %if.then.173, %if.end.206, %if.end.465, %if.then.214
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @put_condition_code(i32 %code, i32 %mode, i32 %reverse, i32 %fp, %struct._IO_FILE* %file) #1 {
entry:
  %code.addr = alloca i32, align 4
  %mode.addr = alloca i32, align 4
  %reverse.addr = alloca i32, align 4
  %fp.addr = alloca i32, align 4
  %file.addr = alloca %struct._IO_FILE*, align 8
  %suffix = alloca i8*, align 8
  %second_code = alloca i32, align 4
  %bypass_code = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  store i32 %mode, i32* %mode.addr, align 4
  store i32 %reverse, i32* %reverse.addr, align 4
  store i32 %fp, i32* %fp.addr, align 4
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  %0 = load i32, i32* %mode.addr, align 4
  %cmp = icmp eq i32 %0, 57
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %mode.addr, align 4
  %cmp1 = icmp eq i32 %1, 58
  br i1 %cmp1, label %if.then, label %if.end.6

if.then:                                          ; preds = %lor.lhs.false, %entry
  %2 = load i32, i32* %code.addr, align 4
  call void @ix86_fp_comparison_codes(i32 %2, i32* %bypass_code, i32* %code.addr, i32* %second_code)
  %3 = load i32, i32* %bypass_code, align 4
  %cmp2 = icmp ne i32 %3, 1
  br i1 %cmp2, label %if.then.5, label %lor.lhs.false.3

lor.lhs.false.3:                                  ; preds = %if.then
  %4 = load i32, i32* %second_code, align 4
  %cmp4 = icmp ne i32 %4, 1
  br i1 %cmp4, label %if.then.5, label %if.end

if.then.5:                                        ; preds = %lor.lhs.false.3, %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 5554, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__FUNCTION__.put_condition_code, i32 0, i32 0)) #7
  unreachable

if.end:                                           ; preds = %lor.lhs.false.3
  %5 = load i32, i32* %code.addr, align 4
  %call = call i32 @ix86_fp_compare_code_to_integer(i32 %5)
  store i32 %call, i32* %code.addr, align 4
  store i32 52, i32* %mode.addr, align 4
  br label %if.end.6

if.end.6:                                         ; preds = %if.end, %lor.lhs.false
  %6 = load i32, i32* %reverse.addr, align 4
  %tobool = icmp ne i32 %6, 0
  br i1 %tobool, label %if.then.7, label %if.end.9

if.then.7:                                        ; preds = %if.end.6
  %7 = load i32, i32* %code.addr, align 4
  %call8 = call i32 @reverse_condition(i32 %7)
  store i32 %call8, i32* %code.addr, align 4
  br label %if.end.9

if.end.9:                                         ; preds = %if.then.7, %if.end.6
  %8 = load i32, i32* %code.addr, align 4
  switch i32 %8, label %sw.default [
    i32 103, label %sw.bb
    i32 102, label %sw.bb.10
    i32 105, label %sw.bb.11
    i32 109, label %sw.bb.18
    i32 107, label %sw.bb.23
    i32 111, label %sw.bb.35
    i32 104, label %sw.bb.39
    i32 108, label %sw.bb.52
    i32 106, label %sw.bb.58
    i32 110, label %sw.bb.66
    i32 112, label %sw.bb.70
    i32 113, label %sw.bb.73
  ]

sw.bb:                                            ; preds = %if.end.9
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.301, i32 0, i32 0), i8** %suffix, align 8
  br label %sw.epilog

sw.bb.10:                                         ; preds = %if.end.9
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.302, i32 0, i32 0), i8** %suffix, align 8
  br label %sw.epilog

sw.bb.11:                                         ; preds = %if.end.9
  %9 = load i32, i32* %mode.addr, align 4
  %cmp12 = icmp ne i32 %9, 52
  br i1 %cmp12, label %land.lhs.true, label %if.end.17

land.lhs.true:                                    ; preds = %sw.bb.11
  %10 = load i32, i32* %mode.addr, align 4
  %cmp13 = icmp ne i32 %10, 55
  br i1 %cmp13, label %land.lhs.true.14, label %if.end.17

land.lhs.true.14:                                 ; preds = %land.lhs.true
  %11 = load i32, i32* %mode.addr, align 4
  %cmp15 = icmp ne i32 %11, 53
  br i1 %cmp15, label %if.then.16, label %if.end.17

if.then.16:                                       ; preds = %land.lhs.true.14
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 5571, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__FUNCTION__.put_condition_code, i32 0, i32 0)) #7
  unreachable

if.end.17:                                        ; preds = %land.lhs.true.14, %land.lhs.true, %sw.bb.11
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.303, i32 0, i32 0), i8** %suffix, align 8
  br label %sw.epilog

sw.bb.18:                                         ; preds = %if.end.9
  %12 = load i32, i32* %mode.addr, align 4
  %cmp19 = icmp ne i32 %12, 52
  br i1 %cmp19, label %if.then.20, label %if.end.21

if.then.20:                                       ; preds = %sw.bb.18
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 5578, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__FUNCTION__.put_condition_code, i32 0, i32 0)) #7
  unreachable

if.end.21:                                        ; preds = %sw.bb.18
  %13 = load i32, i32* %fp.addr, align 4
  %tobool22 = icmp ne i32 %13, 0
  %cond = select i1 %tobool22, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.304, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.305, i32 0, i32 0)
  store i8* %cond, i8** %suffix, align 8
  br label %sw.epilog

sw.bb.23:                                         ; preds = %if.end.9
  %14 = load i32, i32* %mode.addr, align 4
  %cmp24 = icmp eq i32 %14, 55
  br i1 %cmp24, label %if.then.27, label %lor.lhs.false.25

lor.lhs.false.25:                                 ; preds = %sw.bb.23
  %15 = load i32, i32* %mode.addr, align 4
  %cmp26 = icmp eq i32 %15, 54
  br i1 %cmp26, label %if.then.27, label %if.else

if.then.27:                                       ; preds = %lor.lhs.false.25, %sw.bb.23
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.306, i32 0, i32 0), i8** %suffix, align 8
  br label %if.end.34

if.else:                                          ; preds = %lor.lhs.false.25
  %16 = load i32, i32* %mode.addr, align 4
  %cmp28 = icmp eq i32 %16, 52
  br i1 %cmp28, label %if.then.31, label %lor.lhs.false.29

lor.lhs.false.29:                                 ; preds = %if.else
  %17 = load i32, i32* %mode.addr, align 4
  %cmp30 = icmp eq i32 %17, 53
  br i1 %cmp30, label %if.then.31, label %if.else.32

if.then.31:                                       ; preds = %lor.lhs.false.29, %if.else
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.307, i32 0, i32 0), i8** %suffix, align 8
  br label %if.end.33

if.else.32:                                       ; preds = %lor.lhs.false.29
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 5587, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__FUNCTION__.put_condition_code, i32 0, i32 0)) #7
  unreachable

if.end.33:                                        ; preds = %if.then.31
  br label %if.end.34

if.end.34:                                        ; preds = %if.end.33, %if.then.27
  br label %sw.epilog

sw.bb.35:                                         ; preds = %if.end.9
  %18 = load i32, i32* %mode.addr, align 4
  %cmp36 = icmp ne i32 %18, 52
  br i1 %cmp36, label %if.then.37, label %if.end.38

if.then.37:                                       ; preds = %sw.bb.35
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 5591, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__FUNCTION__.put_condition_code, i32 0, i32 0)) #7
  unreachable

if.end.38:                                        ; preds = %sw.bb.35
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.308, i32 0, i32 0), i8** %suffix, align 8
  br label %sw.epilog

sw.bb.39:                                         ; preds = %if.end.9
  %19 = load i32, i32* %mode.addr, align 4
  %cmp40 = icmp eq i32 %19, 55
  br i1 %cmp40, label %if.then.43, label %lor.lhs.false.41

lor.lhs.false.41:                                 ; preds = %sw.bb.39
  %20 = load i32, i32* %mode.addr, align 4
  %cmp42 = icmp eq i32 %20, 54
  br i1 %cmp42, label %if.then.43, label %if.else.44

if.then.43:                                       ; preds = %lor.lhs.false.41, %sw.bb.39
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.309, i32 0, i32 0), i8** %suffix, align 8
  br label %if.end.51

if.else.44:                                       ; preds = %lor.lhs.false.41
  %21 = load i32, i32* %mode.addr, align 4
  %cmp45 = icmp eq i32 %21, 52
  br i1 %cmp45, label %if.then.48, label %lor.lhs.false.46

lor.lhs.false.46:                                 ; preds = %if.else.44
  %22 = load i32, i32* %mode.addr, align 4
  %cmp47 = icmp eq i32 %22, 53
  br i1 %cmp47, label %if.then.48, label %if.else.49

if.then.48:                                       ; preds = %lor.lhs.false.46, %if.else.44
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.310, i32 0, i32 0), i8** %suffix, align 8
  br label %if.end.50

if.else.49:                                       ; preds = %lor.lhs.false.46
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 5600, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__FUNCTION__.put_condition_code, i32 0, i32 0)) #7
  unreachable

if.end.50:                                        ; preds = %if.then.48
  br label %if.end.51

if.end.51:                                        ; preds = %if.end.50, %if.then.43
  br label %sw.epilog

sw.bb.52:                                         ; preds = %if.end.9
  %23 = load i32, i32* %mode.addr, align 4
  %cmp53 = icmp ne i32 %23, 52
  br i1 %cmp53, label %if.then.54, label %if.end.55

if.then.54:                                       ; preds = %sw.bb.52
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 5605, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__FUNCTION__.put_condition_code, i32 0, i32 0)) #7
  unreachable

if.end.55:                                        ; preds = %sw.bb.52
  %24 = load i32, i32* %fp.addr, align 4
  %tobool56 = icmp ne i32 %24, 0
  %cond57 = select i1 %tobool56, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.311, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.312, i32 0, i32 0)
  store i8* %cond57, i8** %suffix, align 8
  br label %sw.epilog

sw.bb.58:                                         ; preds = %if.end.9
  %25 = load i32, i32* %mode.addr, align 4
  %cmp59 = icmp ne i32 %25, 52
  br i1 %cmp59, label %land.lhs.true.60, label %if.end.65

land.lhs.true.60:                                 ; preds = %sw.bb.58
  %26 = load i32, i32* %mode.addr, align 4
  %cmp61 = icmp ne i32 %26, 53
  br i1 %cmp61, label %land.lhs.true.62, label %if.end.65

land.lhs.true.62:                                 ; preds = %land.lhs.true.60
  %27 = load i32, i32* %mode.addr, align 4
  %cmp63 = icmp ne i32 %27, 55
  br i1 %cmp63, label %if.then.64, label %if.end.65

if.then.64:                                       ; preds = %land.lhs.true.62
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 5610, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__FUNCTION__.put_condition_code, i32 0, i32 0)) #7
  unreachable

if.end.65:                                        ; preds = %land.lhs.true.62, %land.lhs.true.60, %sw.bb.58
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.111, i32 0, i32 0), i8** %suffix, align 8
  br label %sw.epilog

sw.bb.66:                                         ; preds = %if.end.9
  %28 = load i32, i32* %mode.addr, align 4
  %cmp67 = icmp ne i32 %28, 52
  br i1 %cmp67, label %if.then.68, label %if.end.69

if.then.68:                                       ; preds = %sw.bb.66
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 5615, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__FUNCTION__.put_condition_code, i32 0, i32 0)) #7
  unreachable

if.end.69:                                        ; preds = %sw.bb.66
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.313, i32 0, i32 0), i8** %suffix, align 8
  br label %sw.epilog

sw.bb.70:                                         ; preds = %if.end.9
  %29 = load i32, i32* %fp.addr, align 4
  %tobool71 = icmp ne i32 %29, 0
  %cond72 = select i1 %tobool71, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.314, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.315, i32 0, i32 0)
  store i8* %cond72, i8** %suffix, align 8
  br label %sw.epilog

sw.bb.73:                                         ; preds = %if.end.9
  %30 = load i32, i32* %fp.addr, align 4
  %tobool74 = icmp ne i32 %30, 0
  %cond75 = select i1 %tobool74, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.316, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.317, i32 0, i32 0)
  store i8* %cond75, i8** %suffix, align 8
  br label %sw.epilog

sw.default:                                       ; preds = %if.end.9
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 5625, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__FUNCTION__.put_condition_code, i32 0, i32 0)) #7
  unreachable

sw.epilog:                                        ; preds = %sw.bb.73, %sw.bb.70, %if.end.69, %if.end.65, %if.end.55, %if.end.51, %if.end.38, %if.end.34, %if.end.21, %if.end.17, %sw.bb.10, %sw.bb
  %31 = load i8*, i8** %suffix, align 8
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call76 = call i32 @fputs(i8* %31, %struct._IO_FILE* %32)
  ret void
}

declare void @output_operand_lossage(i8*, ...) #0

declare %struct.rtx_def* @find_reg_note(%struct.rtx_def*, i32, %struct.rtx_def*) #0

declare i32 @final_forward_branch_p(%struct.rtx_def*) #0

declare void @output_address(%struct.rtx_def*) #0

declare i64 @etarsingle(%struct.realvaluetype* byval align 8) #0

declare void @ereal_to_decimal(%struct.realvaluetype* byval align 8, i8*) #0

; Function Attrs: nounwind uwtable
define void @print_operand_address(%struct._IO_FILE* %file, %struct.rtx_def* %addr) #1 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %addr.addr = alloca %struct.rtx_def*, align 8
  %parts = alloca %struct.ix86_address, align 8
  %base = alloca %struct.rtx_def*, align 8
  %index = alloca %struct.rtx_def*, align 8
  %disp = alloca %struct.rtx_def*, align 8
  %scale = alloca i32, align 4
  %offset = alloca %struct.rtx_def*, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  store %struct.rtx_def* %addr, %struct.rtx_def** %addr.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8
  %call = call i32 @ix86_decompose_address(%struct.rtx_def* %0, %struct.ix86_address* %parts)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 6126, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @__FUNCTION__.print_operand_address, i32 0, i32 0)) #7
  unreachable

if.end:                                           ; preds = %entry
  %base1 = getelementptr inbounds %struct.ix86_address, %struct.ix86_address* %parts, i32 0, i32 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %base1, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %base, align 8
  %index2 = getelementptr inbounds %struct.ix86_address, %struct.ix86_address* %parts, i32 0, i32 1
  %2 = load %struct.rtx_def*, %struct.rtx_def** %index2, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %index, align 8
  %disp3 = getelementptr inbounds %struct.ix86_address, %struct.ix86_address* %parts, i32 0, i32 2
  %3 = load %struct.rtx_def*, %struct.rtx_def** %disp3, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %disp, align 8
  %scale4 = getelementptr inbounds %struct.ix86_address, %struct.ix86_address* %parts, i32 0, i32 3
  %4 = load i64, i64* %scale4, align 8
  %conv = trunc i64 %4 to i32
  store i32 %conv, i32* %scale, align 4
  %5 = load %struct.rtx_def*, %struct.rtx_def** %base, align 8
  %tobool5 = icmp ne %struct.rtx_def* %5, null
  br i1 %tobool5, label %if.else.36, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end
  %6 = load %struct.rtx_def*, %struct.rtx_def** %index, align 8
  %tobool6 = icmp ne %struct.rtx_def* %6, null
  br i1 %tobool6, label %if.else.36, label %if.then.7

if.then.7:                                        ; preds = %land.lhs.true
  %7 = load %struct.rtx_def*, %struct.rtx_def** %disp, align 8
  %8 = bitcast %struct.rtx_def* %7 to i32*
  %bf.load = load i32, i32* %8, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 54
  br i1 %cmp, label %if.then.9, label %if.else

if.then.9:                                        ; preds = %if.then.7
  %9 = load i32, i32* @ix86_asm_dialect, align 4
  %cmp10 = icmp eq i32 %9, 1
  br i1 %cmp10, label %if.then.12, label %if.end.20

if.then.12:                                       ; preds = %if.then.9
  %10 = load i8, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i32 0, i64 0), align 1
  %conv13 = sext i8 %10 to i32
  %cmp14 = icmp eq i32 %conv13, 0
  br i1 %cmp14, label %if.then.16, label %if.end.18

if.then.16:                                       ; preds = %if.then.12
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call17 = call i32 @_IO_putc(i32 37, %struct._IO_FILE* %11)
  br label %if.end.18

if.end.18:                                        ; preds = %if.then.16, %if.then.12
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call19 = call i32 @fputs(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.131, i32 0, i32 0), %struct._IO_FILE* %12)
  br label %if.end.20

if.end.20:                                        ; preds = %if.end.18, %if.then.9
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %14 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx to i64*
  %15 = load i64, i64* %rtwint, align 8
  %call21 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.130, i32 0, i32 0), i64 %15)
  br label %if.end.26

if.else:                                          ; preds = %if.then.7
  %16 = load i32, i32* @flag_pic, align 4
  %tobool22 = icmp ne i32 %16, 0
  br i1 %tobool22, label %if.then.23, label %if.else.24

if.then.23:                                       ; preds = %if.else
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %18 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8
  call void @output_pic_addr_const(%struct._IO_FILE* %17, %struct.rtx_def* %18, i32 0)
  br label %if.end.25

if.else.24:                                       ; preds = %if.else
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %20 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8
  call void @output_addr_const(%struct._IO_FILE* %19, %struct.rtx_def* %20)
  br label %if.end.25

if.end.25:                                        ; preds = %if.else.24, %if.then.23
  br label %if.end.26

if.end.26:                                        ; preds = %if.end.25, %if.end.20
  %21 = load %struct.rtx_def*, %struct.rtx_def** %disp, align 8
  %22 = bitcast %struct.rtx_def* %21 to i32*
  %bf.load27 = load i32, i32* %22, align 8
  %bf.clear28 = and i32 %bf.load27, 65535
  %cmp29 = icmp ne i32 %bf.clear28, 54
  br i1 %cmp29, label %land.lhs.true.31, label %if.end.35

land.lhs.true.31:                                 ; preds = %if.end.26
  %23 = load i32, i32* @target_flags, align 4
  %and = and i32 %23, 33554432
  %tobool32 = icmp ne i32 %and, 0
  br i1 %tobool32, label %if.then.33, label %if.end.35

if.then.33:                                       ; preds = %land.lhs.true.31
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call34 = call i32 @fputs(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.132, i32 0, i32 0), %struct._IO_FILE* %24)
  br label %if.end.35

if.end.35:                                        ; preds = %if.then.33, %land.lhs.true.31, %if.end.26
  br label %if.end.167

if.else.36:                                       ; preds = %land.lhs.true, %if.end
  %25 = load i32, i32* @ix86_asm_dialect, align 4
  %cmp37 = icmp eq i32 %25, 0
  br i1 %cmp37, label %if.then.39, label %if.else.68

if.then.39:                                       ; preds = %if.else.36
  %26 = load %struct.rtx_def*, %struct.rtx_def** %disp, align 8
  %tobool40 = icmp ne %struct.rtx_def* %26, null
  br i1 %tobool40, label %if.then.41, label %if.end.53

if.then.41:                                       ; preds = %if.then.39
  %27 = load i32, i32* @flag_pic, align 4
  %tobool42 = icmp ne i32 %27, 0
  br i1 %tobool42, label %if.then.43, label %if.else.44

if.then.43:                                       ; preds = %if.then.41
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %29 = load %struct.rtx_def*, %struct.rtx_def** %disp, align 8
  call void @output_pic_addr_const(%struct._IO_FILE* %28, %struct.rtx_def* %29, i32 0)
  br label %if.end.52

if.else.44:                                       ; preds = %if.then.41
  %30 = load %struct.rtx_def*, %struct.rtx_def** %disp, align 8
  %31 = bitcast %struct.rtx_def* %30 to i32*
  %bf.load45 = load i32, i32* %31, align 8
  %bf.clear46 = and i32 %bf.load45, 65535
  %cmp47 = icmp eq i32 %bf.clear46, 67
  br i1 %cmp47, label %if.then.49, label %if.else.50

if.then.49:                                       ; preds = %if.else.44
  %32 = load %struct.rtx_def*, %struct.rtx_def** %disp, align 8
  call void @output_asm_label(%struct.rtx_def* %32)
  br label %if.end.51

if.else.50:                                       ; preds = %if.else.44
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %34 = load %struct.rtx_def*, %struct.rtx_def** %disp, align 8
  call void @output_addr_const(%struct._IO_FILE* %33, %struct.rtx_def* %34)
  br label %if.end.51

if.end.51:                                        ; preds = %if.else.50, %if.then.49
  br label %if.end.52

if.end.52:                                        ; preds = %if.end.51, %if.then.43
  br label %if.end.53

if.end.53:                                        ; preds = %if.end.52, %if.then.39
  %35 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call54 = call i32 @_IO_putc(i32 40, %struct._IO_FILE* %35)
  %36 = load %struct.rtx_def*, %struct.rtx_def** %base, align 8
  %tobool55 = icmp ne %struct.rtx_def* %36, null
  br i1 %tobool55, label %if.then.56, label %if.end.57

if.then.56:                                       ; preds = %if.end.53
  %37 = load %struct.rtx_def*, %struct.rtx_def** %base, align 8
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  call void @print_reg(%struct.rtx_def* %37, i32 0, %struct._IO_FILE* %38)
  br label %if.end.57

if.end.57:                                        ; preds = %if.then.56, %if.end.53
  %39 = load %struct.rtx_def*, %struct.rtx_def** %index, align 8
  %tobool58 = icmp ne %struct.rtx_def* %39, null
  br i1 %tobool58, label %if.then.59, label %if.end.66

if.then.59:                                       ; preds = %if.end.57
  %40 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call60 = call i32 @_IO_putc(i32 44, %struct._IO_FILE* %40)
  %41 = load %struct.rtx_def*, %struct.rtx_def** %index, align 8
  %42 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  call void @print_reg(%struct.rtx_def* %41, i32 0, %struct._IO_FILE* %42)
  %43 = load i32, i32* %scale, align 4
  %cmp61 = icmp ne i32 %43, 1
  br i1 %cmp61, label %if.then.63, label %if.end.65

if.then.63:                                       ; preds = %if.then.59
  %44 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %45 = load i32, i32* %scale, align 4
  %call64 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %44, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.133, i32 0, i32 0), i32 %45)
  br label %if.end.65

if.end.65:                                        ; preds = %if.then.63, %if.then.59
  br label %if.end.66

if.end.66:                                        ; preds = %if.end.65, %if.end.57
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call67 = call i32 @_IO_putc(i32 41, %struct._IO_FILE* %46)
  br label %if.end.166

if.else.68:                                       ; preds = %if.else.36
  store %struct.rtx_def* null, %struct.rtx_def** %offset, align 8
  %47 = load %struct.rtx_def*, %struct.rtx_def** %disp, align 8
  %tobool69 = icmp ne %struct.rtx_def* %47, null
  br i1 %tobool69, label %if.then.70, label %if.end.126

if.then.70:                                       ; preds = %if.else.68
  %48 = load %struct.rtx_def*, %struct.rtx_def** %disp, align 8
  %49 = bitcast %struct.rtx_def* %48 to i32*
  %bf.load71 = load i32, i32* %49, align 8
  %bf.clear72 = and i32 %bf.load71, 65535
  %cmp73 = icmp eq i32 %bf.clear72, 58
  br i1 %cmp73, label %land.lhs.true.75, label %if.end.107

land.lhs.true.75:                                 ; preds = %if.then.70
  %50 = load %struct.rtx_def*, %struct.rtx_def** %disp, align 8
  %fld76 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %50, i32 0, i32 1
  %arrayidx77 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld76, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx77 to %struct.rtx_def**
  %51 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %52 = bitcast %struct.rtx_def* %51 to i32*
  %bf.load78 = load i32, i32* %52, align 8
  %bf.clear79 = and i32 %bf.load78, 65535
  %cmp80 = icmp eq i32 %bf.clear79, 75
  br i1 %cmp80, label %land.lhs.true.82, label %if.end.107

land.lhs.true.82:                                 ; preds = %land.lhs.true.75
  %53 = load %struct.rtx_def*, %struct.rtx_def** %disp, align 8
  %fld83 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %53, i32 0, i32 1
  %arrayidx84 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld83, i32 0, i64 0
  %rtx85 = bitcast %union.rtunion_def* %arrayidx84 to %struct.rtx_def**
  %54 = load %struct.rtx_def*, %struct.rtx_def** %rtx85, align 8
  %fld86 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %54, i32 0, i32 1
  %arrayidx87 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld86, i32 0, i64 1
  %rtx88 = bitcast %union.rtunion_def* %arrayidx87 to %struct.rtx_def**
  %55 = load %struct.rtx_def*, %struct.rtx_def** %rtx88, align 8
  %56 = bitcast %struct.rtx_def* %55 to i32*
  %bf.load89 = load i32, i32* %56, align 8
  %bf.clear90 = and i32 %bf.load89, 65535
  %cmp91 = icmp eq i32 %bf.clear90, 54
  br i1 %cmp91, label %if.then.93, label %if.end.107

if.then.93:                                       ; preds = %land.lhs.true.82
  %57 = load %struct.rtx_def*, %struct.rtx_def** %disp, align 8
  %fld94 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %57, i32 0, i32 1
  %arrayidx95 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld94, i32 0, i64 0
  %rtx96 = bitcast %union.rtunion_def* %arrayidx95 to %struct.rtx_def**
  %58 = load %struct.rtx_def*, %struct.rtx_def** %rtx96, align 8
  %fld97 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %58, i32 0, i32 1
  %arrayidx98 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld97, i32 0, i64 1
  %rtx99 = bitcast %union.rtunion_def* %arrayidx98 to %struct.rtx_def**
  %59 = load %struct.rtx_def*, %struct.rtx_def** %rtx99, align 8
  store %struct.rtx_def* %59, %struct.rtx_def** %offset, align 8
  %60 = load %struct.rtx_def*, %struct.rtx_def** %disp, align 8
  %fld100 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %60, i32 0, i32 1
  %arrayidx101 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld100, i32 0, i64 0
  %rtx102 = bitcast %union.rtunion_def* %arrayidx101 to %struct.rtx_def**
  %61 = load %struct.rtx_def*, %struct.rtx_def** %rtx102, align 8
  %fld103 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %61, i32 0, i32 1
  %arrayidx104 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld103, i32 0, i64 0
  %rtx105 = bitcast %union.rtunion_def* %arrayidx104 to %struct.rtx_def**
  %62 = load %struct.rtx_def*, %struct.rtx_def** %rtx105, align 8
  %call106 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 58, i32 0, %struct.rtx_def* %62)
  store %struct.rtx_def* %call106, %struct.rtx_def** %disp, align 8
  br label %if.end.107

if.end.107:                                       ; preds = %if.then.93, %land.lhs.true.82, %land.lhs.true.75, %if.then.70
  %63 = load i32, i32* @flag_pic, align 4
  %tobool108 = icmp ne i32 %63, 0
  br i1 %tobool108, label %if.then.109, label %if.else.110

if.then.109:                                      ; preds = %if.end.107
  %64 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %65 = load %struct.rtx_def*, %struct.rtx_def** %disp, align 8
  call void @output_pic_addr_const(%struct._IO_FILE* %64, %struct.rtx_def* %65, i32 0)
  br label %if.end.125

if.else.110:                                      ; preds = %if.end.107
  %66 = load %struct.rtx_def*, %struct.rtx_def** %disp, align 8
  %67 = bitcast %struct.rtx_def* %66 to i32*
  %bf.load111 = load i32, i32* %67, align 8
  %bf.clear112 = and i32 %bf.load111, 65535
  %cmp113 = icmp eq i32 %bf.clear112, 67
  br i1 %cmp113, label %if.then.115, label %if.else.116

if.then.115:                                      ; preds = %if.else.110
  %68 = load %struct.rtx_def*, %struct.rtx_def** %disp, align 8
  call void @output_asm_label(%struct.rtx_def* %68)
  br label %if.end.124

if.else.116:                                      ; preds = %if.else.110
  %69 = load %struct.rtx_def*, %struct.rtx_def** %disp, align 8
  %70 = bitcast %struct.rtx_def* %69 to i32*
  %bf.load117 = load i32, i32* %70, align 8
  %bf.clear118 = and i32 %bf.load117, 65535
  %cmp119 = icmp eq i32 %bf.clear118, 54
  br i1 %cmp119, label %if.then.121, label %if.else.122

if.then.121:                                      ; preds = %if.else.116
  %71 = load %struct.rtx_def*, %struct.rtx_def** %disp, align 8
  store %struct.rtx_def* %71, %struct.rtx_def** %offset, align 8
  br label %if.end.123

if.else.122:                                      ; preds = %if.else.116
  %72 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %73 = load %struct.rtx_def*, %struct.rtx_def** %disp, align 8
  call void @output_addr_const(%struct._IO_FILE* %72, %struct.rtx_def* %73)
  br label %if.end.123

if.end.123:                                       ; preds = %if.else.122, %if.then.121
  br label %if.end.124

if.end.124:                                       ; preds = %if.end.123, %if.then.115
  br label %if.end.125

if.end.125:                                       ; preds = %if.end.124, %if.then.109
  br label %if.end.126

if.end.126:                                       ; preds = %if.end.125, %if.else.68
  %74 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call127 = call i32 @_IO_putc(i32 91, %struct._IO_FILE* %74)
  %75 = load %struct.rtx_def*, %struct.rtx_def** %base, align 8
  %tobool128 = icmp ne %struct.rtx_def* %75, null
  br i1 %tobool128, label %if.then.129, label %if.else.145

if.then.129:                                      ; preds = %if.end.126
  %76 = load %struct.rtx_def*, %struct.rtx_def** %base, align 8
  %77 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  call void @print_reg(%struct.rtx_def* %76, i32 0, %struct._IO_FILE* %77)
  %78 = load %struct.rtx_def*, %struct.rtx_def** %offset, align 8
  %tobool130 = icmp ne %struct.rtx_def* %78, null
  br i1 %tobool130, label %if.then.131, label %if.end.144

if.then.131:                                      ; preds = %if.then.129
  %79 = load %struct.rtx_def*, %struct.rtx_def** %offset, align 8
  %fld132 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %79, i32 0, i32 1
  %arrayidx133 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld132, i32 0, i64 0
  %rtwint134 = bitcast %union.rtunion_def* %arrayidx133 to i64*
  %80 = load i64, i64* %rtwint134, align 8
  %cmp135 = icmp sge i64 %80, 0
  br i1 %cmp135, label %if.then.137, label %if.end.139

if.then.137:                                      ; preds = %if.then.131
  %81 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call138 = call i32 @_IO_putc(i32 43, %struct._IO_FILE* %81)
  br label %if.end.139

if.end.139:                                       ; preds = %if.then.137, %if.then.131
  %82 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %83 = load %struct.rtx_def*, %struct.rtx_def** %offset, align 8
  %fld140 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %83, i32 0, i32 1
  %arrayidx141 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld140, i32 0, i64 0
  %rtwint142 = bitcast %union.rtunion_def* %arrayidx141 to i64*
  %84 = load i64, i64* %rtwint142, align 8
  %call143 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %82, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.130, i32 0, i32 0), i64 %84)
  br label %if.end.144

if.end.144:                                       ; preds = %if.end.139, %if.then.129
  br label %if.end.155

if.else.145:                                      ; preds = %if.end.126
  %85 = load %struct.rtx_def*, %struct.rtx_def** %offset, align 8
  %tobool146 = icmp ne %struct.rtx_def* %85, null
  br i1 %tobool146, label %if.then.147, label %if.else.152

if.then.147:                                      ; preds = %if.else.145
  %86 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %87 = load %struct.rtx_def*, %struct.rtx_def** %offset, align 8
  %fld148 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %87, i32 0, i32 1
  %arrayidx149 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld148, i32 0, i64 0
  %rtwint150 = bitcast %union.rtunion_def* %arrayidx149 to i64*
  %88 = load i64, i64* %rtwint150, align 8
  %call151 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %86, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.130, i32 0, i32 0), i64 %88)
  br label %if.end.154

if.else.152:                                      ; preds = %if.else.145
  %89 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call153 = call i32 @_IO_putc(i32 48, %struct._IO_FILE* %89)
  br label %if.end.154

if.end.154:                                       ; preds = %if.else.152, %if.then.147
  br label %if.end.155

if.end.155:                                       ; preds = %if.end.154, %if.end.144
  %90 = load %struct.rtx_def*, %struct.rtx_def** %index, align 8
  %tobool156 = icmp ne %struct.rtx_def* %90, null
  br i1 %tobool156, label %if.then.157, label %if.end.164

if.then.157:                                      ; preds = %if.end.155
  %91 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call158 = call i32 @_IO_putc(i32 43, %struct._IO_FILE* %91)
  %92 = load %struct.rtx_def*, %struct.rtx_def** %index, align 8
  %93 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  call void @print_reg(%struct.rtx_def* %92, i32 0, %struct._IO_FILE* %93)
  %94 = load i32, i32* %scale, align 4
  %cmp159 = icmp ne i32 %94, 1
  br i1 %cmp159, label %if.then.161, label %if.end.163

if.then.161:                                      ; preds = %if.then.157
  %95 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %96 = load i32, i32* %scale, align 4
  %call162 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %95, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.134, i32 0, i32 0), i32 %96)
  br label %if.end.163

if.end.163:                                       ; preds = %if.then.161, %if.then.157
  br label %if.end.164

if.end.164:                                       ; preds = %if.end.163, %if.end.155
  %97 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call165 = call i32 @_IO_putc(i32 93, %struct._IO_FILE* %97)
  br label %if.end.166

if.end.166:                                       ; preds = %if.end.164, %if.end.66
  br label %if.end.167

if.end.167:                                       ; preds = %if.end.166, %if.end.35
  ret void
}

declare void @output_asm_label(%struct.rtx_def*) #0

; Function Attrs: nounwind uwtable
define void @split_di(%struct.rtx_def** %operands, i32 %num, %struct.rtx_def** %lo_half, %struct.rtx_def** %hi_half) #1 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %num.addr = alloca i32, align 4
  %lo_half.addr = alloca %struct.rtx_def**, align 8
  %hi_half.addr = alloca %struct.rtx_def**, align 8
  %op = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store i32 %num, i32* %num.addr, align 4
  store %struct.rtx_def** %lo_half, %struct.rtx_def*** %lo_half.addr, align 8
  store %struct.rtx_def** %hi_half, %struct.rtx_def*** %hi_half.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %0 = load i32, i32* %num.addr, align 4
  %dec = add nsw i32 %0, -1
  store i32 %dec, i32* %num.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i32, i32* %num.addr, align 4
  %idxprom = sext i32 %1 to i64
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 %idxprom
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %op, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %op, align 8
  %5 = bitcast %struct.rtx_def* %4 to i32*
  %bf.load = load i32, i32* %5, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 66
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %6 = load %struct.rtx_def*, %struct.rtx_def** %op, align 8
  %call = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %6, i32 4, i64 0, i32 1, i32 1)
  %7 = load i32, i32* %num.addr, align 4
  %idxprom1 = sext i32 %7 to i64
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %lo_half.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %8, i64 %idxprom1
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx2, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %op, align 8
  %call3 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %9, i32 4, i64 4, i32 1, i32 1)
  %10 = load i32, i32* %num.addr, align 4
  %idxprom4 = sext i32 %10 to i64
  %11 = load %struct.rtx_def**, %struct.rtx_def*** %hi_half.addr, align 8
  %arrayidx5 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %11, i64 %idxprom4
  store %struct.rtx_def* %call3, %struct.rtx_def** %arrayidx5, align 8
  br label %if.end

if.else:                                          ; preds = %while.body
  %12 = load %struct.rtx_def*, %struct.rtx_def** %op, align 8
  %13 = load %struct.rtx_def*, %struct.rtx_def** %op, align 8
  %14 = bitcast %struct.rtx_def* %13 to i32*
  %bf.load6 = load i32, i32* %14, align 8
  %bf.lshr = lshr i32 %bf.load6, 16
  %bf.clear7 = and i32 %bf.lshr, 255
  %cmp8 = icmp eq i32 %bf.clear7, 0
  br i1 %cmp8, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else
  br label %cond.end

cond.false:                                       ; preds = %if.else
  %15 = load %struct.rtx_def*, %struct.rtx_def** %op, align 8
  %16 = bitcast %struct.rtx_def* %15 to i32*
  %bf.load9 = load i32, i32* %16, align 8
  %bf.lshr10 = lshr i32 %bf.load9, 16
  %bf.clear11 = and i32 %bf.lshr10, 255
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 5, %cond.true ], [ %bf.clear11, %cond.false ]
  %call12 = call %struct.rtx_def* @simplify_gen_subreg(i32 4, %struct.rtx_def* %12, i32 %cond, i32 0)
  %17 = load i32, i32* %num.addr, align 4
  %idxprom13 = sext i32 %17 to i64
  %18 = load %struct.rtx_def**, %struct.rtx_def*** %lo_half.addr, align 8
  %arrayidx14 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %18, i64 %idxprom13
  store %struct.rtx_def* %call12, %struct.rtx_def** %arrayidx14, align 8
  %19 = load %struct.rtx_def*, %struct.rtx_def** %op, align 8
  %20 = load %struct.rtx_def*, %struct.rtx_def** %op, align 8
  %21 = bitcast %struct.rtx_def* %20 to i32*
  %bf.load15 = load i32, i32* %21, align 8
  %bf.lshr16 = lshr i32 %bf.load15, 16
  %bf.clear17 = and i32 %bf.lshr16, 255
  %cmp18 = icmp eq i32 %bf.clear17, 0
  br i1 %cmp18, label %cond.true.19, label %cond.false.20

cond.true.19:                                     ; preds = %cond.end
  br label %cond.end.24

cond.false.20:                                    ; preds = %cond.end
  %22 = load %struct.rtx_def*, %struct.rtx_def** %op, align 8
  %23 = bitcast %struct.rtx_def* %22 to i32*
  %bf.load21 = load i32, i32* %23, align 8
  %bf.lshr22 = lshr i32 %bf.load21, 16
  %bf.clear23 = and i32 %bf.lshr22, 255
  br label %cond.end.24

cond.end.24:                                      ; preds = %cond.false.20, %cond.true.19
  %cond25 = phi i32 [ 5, %cond.true.19 ], [ %bf.clear23, %cond.false.20 ]
  %call26 = call %struct.rtx_def* @simplify_gen_subreg(i32 4, %struct.rtx_def* %19, i32 %cond25, i32 4)
  %24 = load i32, i32* %num.addr, align 4
  %idxprom27 = sext i32 %24 to i64
  %25 = load %struct.rtx_def**, %struct.rtx_def*** %hi_half.addr, align 8
  %arrayidx28 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %25, i64 %idxprom27
  store %struct.rtx_def* %call26, %struct.rtx_def** %arrayidx28, align 8
  br label %if.end

if.end:                                           ; preds = %cond.end.24, %if.then
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

declare %struct.rtx_def* @simplify_gen_subreg(i32, %struct.rtx_def*, i32, i32) #0

; Function Attrs: nounwind uwtable
define void @split_ti(%struct.rtx_def** %operands, i32 %num, %struct.rtx_def** %lo_half, %struct.rtx_def** %hi_half) #1 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %num.addr = alloca i32, align 4
  %lo_half.addr = alloca %struct.rtx_def**, align 8
  %hi_half.addr = alloca %struct.rtx_def**, align 8
  %op = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store i32 %num, i32* %num.addr, align 4
  store %struct.rtx_def** %lo_half, %struct.rtx_def*** %lo_half.addr, align 8
  store %struct.rtx_def** %hi_half, %struct.rtx_def*** %hi_half.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %0 = load i32, i32* %num.addr, align 4
  %dec = add nsw i32 %0, -1
  store i32 %dec, i32* %num.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i32, i32* %num.addr, align 4
  %idxprom = sext i32 %1 to i64
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 %idxprom
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %op, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %op, align 8
  %5 = bitcast %struct.rtx_def* %4 to i32*
  %bf.load = load i32, i32* %5, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 66
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %6 = load %struct.rtx_def*, %struct.rtx_def** %op, align 8
  %call = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %6, i32 5, i64 0, i32 1, i32 1)
  %7 = load i32, i32* %num.addr, align 4
  %idxprom1 = sext i32 %7 to i64
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %lo_half.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %8, i64 %idxprom1
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx2, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %op, align 8
  %call3 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %9, i32 5, i64 8, i32 1, i32 1)
  %10 = load i32, i32* %num.addr, align 4
  %idxprom4 = sext i32 %10 to i64
  %11 = load %struct.rtx_def**, %struct.rtx_def*** %hi_half.addr, align 8
  %arrayidx5 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %11, i64 %idxprom4
  store %struct.rtx_def* %call3, %struct.rtx_def** %arrayidx5, align 8
  br label %if.end

if.else:                                          ; preds = %while.body
  %12 = load %struct.rtx_def*, %struct.rtx_def** %op, align 8
  %call6 = call %struct.rtx_def* @simplify_gen_subreg(i32 5, %struct.rtx_def* %12, i32 6, i32 0)
  %13 = load i32, i32* %num.addr, align 4
  %idxprom7 = sext i32 %13 to i64
  %14 = load %struct.rtx_def**, %struct.rtx_def*** %lo_half.addr, align 8
  %arrayidx8 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %14, i64 %idxprom7
  store %struct.rtx_def* %call6, %struct.rtx_def** %arrayidx8, align 8
  %15 = load %struct.rtx_def*, %struct.rtx_def** %op, align 8
  %call9 = call %struct.rtx_def* @simplify_gen_subreg(i32 5, %struct.rtx_def* %15, i32 6, i32 8)
  %16 = load i32, i32* %num.addr, align 4
  %idxprom10 = sext i32 %16 to i64
  %17 = load %struct.rtx_def**, %struct.rtx_def*** %hi_half.addr, align 8
  %arrayidx11 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %17, i64 %idxprom10
  store %struct.rtx_def* %call9, %struct.rtx_def** %arrayidx11, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: nounwind uwtable
define i8* @output_387_binary_op(%struct.rtx_def* %insn, %struct.rtx_def** %operands) #1 {
entry:
  %retval = alloca i8*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %p = alloca i8*, align 8
  %ssep = alloca i8*, align 8
  %is_sse = alloca i32, align 4
  %temp = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load = load i32, i32* %2, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 61
  br i1 %cmp, label %land.rhs, label %land.end.20

land.rhs:                                         ; preds = %entry
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 0
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1
  %arrayidx2 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx2 to i32*
  %5 = load i32, i32* %rtuint, align 4
  %cmp3 = icmp uge i32 %5, 21
  br i1 %cmp3, label %land.lhs.true, label %lor.rhs

land.lhs.true:                                    ; preds = %land.rhs
  %6 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %6, i64 0
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  %fld5 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1
  %arrayidx6 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld5, i32 0, i64 0
  %rtuint7 = bitcast %union.rtunion_def* %arrayidx6 to i32*
  %8 = load i32, i32* %rtuint7, align 4
  %cmp8 = icmp ule i32 %8, 28
  br i1 %cmp8, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.lhs.true, %land.rhs
  %9 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx9 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %9, i64 0
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx9, align 8
  %fld10 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1
  %arrayidx11 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld10, i32 0, i64 0
  %rtuint12 = bitcast %union.rtunion_def* %arrayidx11 to i32*
  %11 = load i32, i32* %rtuint12, align 4
  %cmp13 = icmp uge i32 %11, 45
  br i1 %cmp13, label %land.rhs.14, label %land.end

land.rhs.14:                                      ; preds = %lor.rhs
  %12 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx15 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %12, i64 0
  %13 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx15, align 8
  %fld16 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1
  %arrayidx17 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld16, i32 0, i64 0
  %rtuint18 = bitcast %union.rtunion_def* %arrayidx17 to i32*
  %14 = load i32, i32* %rtuint18, align 4
  %cmp19 = icmp ule i32 %14, 52
  br label %land.end

land.end:                                         ; preds = %land.rhs.14, %lor.rhs
  %15 = phi i1 [ false, %lor.rhs ], [ %cmp19, %land.rhs.14 ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %land.lhs.true
  %16 = phi i1 [ true, %land.lhs.true ], [ %15, %land.end ]
  br label %land.end.20

land.end.20:                                      ; preds = %lor.end, %entry
  %17 = phi i1 [ false, %entry ], [ %16, %lor.end ]
  %land.ext = zext i1 %17 to i32
  %18 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx21 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %18, i64 1
  %19 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx21, align 8
  %20 = bitcast %struct.rtx_def* %19 to i32*
  %bf.load22 = load i32, i32* %20, align 8
  %bf.clear23 = and i32 %bf.load22, 65535
  %cmp24 = icmp eq i32 %bf.clear23, 61
  br i1 %cmp24, label %land.rhs.25, label %land.end.52

land.rhs.25:                                      ; preds = %land.end.20
  %21 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx26 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %21, i64 1
  %22 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx26, align 8
  %fld27 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1
  %arrayidx28 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld27, i32 0, i64 0
  %rtuint29 = bitcast %union.rtunion_def* %arrayidx28 to i32*
  %23 = load i32, i32* %rtuint29, align 4
  %cmp30 = icmp uge i32 %23, 21
  br i1 %cmp30, label %land.lhs.true.31, label %lor.rhs.37

land.lhs.true.31:                                 ; preds = %land.rhs.25
  %24 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx32 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %24, i64 1
  %25 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx32, align 8
  %fld33 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1
  %arrayidx34 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld33, i32 0, i64 0
  %rtuint35 = bitcast %union.rtunion_def* %arrayidx34 to i32*
  %26 = load i32, i32* %rtuint35, align 4
  %cmp36 = icmp ule i32 %26, 28
  br i1 %cmp36, label %lor.end.51, label %lor.rhs.37

lor.rhs.37:                                       ; preds = %land.lhs.true.31, %land.rhs.25
  %27 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx38 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %27, i64 1
  %28 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx38, align 8
  %fld39 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1
  %arrayidx40 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld39, i32 0, i64 0
  %rtuint41 = bitcast %union.rtunion_def* %arrayidx40 to i32*
  %29 = load i32, i32* %rtuint41, align 4
  %cmp42 = icmp uge i32 %29, 45
  br i1 %cmp42, label %land.rhs.43, label %land.end.49

land.rhs.43:                                      ; preds = %lor.rhs.37
  %30 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx44 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %30, i64 1
  %31 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx44, align 8
  %fld45 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1
  %arrayidx46 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld45, i32 0, i64 0
  %rtuint47 = bitcast %union.rtunion_def* %arrayidx46 to i32*
  %32 = load i32, i32* %rtuint47, align 4
  %cmp48 = icmp ule i32 %32, 52
  br label %land.end.49

land.end.49:                                      ; preds = %land.rhs.43, %lor.rhs.37
  %33 = phi i1 [ false, %lor.rhs.37 ], [ %cmp48, %land.rhs.43 ]
  br label %lor.end.51

lor.end.51:                                       ; preds = %land.end.49, %land.lhs.true.31
  %34 = phi i1 [ true, %land.lhs.true.31 ], [ %33, %land.end.49 ]
  br label %land.end.52

land.end.52:                                      ; preds = %lor.end.51, %land.end.20
  %35 = phi i1 [ false, %land.end.20 ], [ %34, %lor.end.51 ]
  %land.ext53 = zext i1 %35 to i32
  %or = or i32 %land.ext, %land.ext53
  %36 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx54 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %36, i64 2
  %37 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx54, align 8
  %38 = bitcast %struct.rtx_def* %37 to i32*
  %bf.load55 = load i32, i32* %38, align 8
  %bf.clear56 = and i32 %bf.load55, 65535
  %cmp57 = icmp eq i32 %bf.clear56, 61
  br i1 %cmp57, label %land.rhs.58, label %land.end.85

land.rhs.58:                                      ; preds = %land.end.52
  %39 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx59 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %39, i64 2
  %40 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx59, align 8
  %fld60 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %40, i32 0, i32 1
  %arrayidx61 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld60, i32 0, i64 0
  %rtuint62 = bitcast %union.rtunion_def* %arrayidx61 to i32*
  %41 = load i32, i32* %rtuint62, align 4
  %cmp63 = icmp uge i32 %41, 21
  br i1 %cmp63, label %land.lhs.true.64, label %lor.rhs.70

land.lhs.true.64:                                 ; preds = %land.rhs.58
  %42 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx65 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %42, i64 2
  %43 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx65, align 8
  %fld66 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %43, i32 0, i32 1
  %arrayidx67 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld66, i32 0, i64 0
  %rtuint68 = bitcast %union.rtunion_def* %arrayidx67 to i32*
  %44 = load i32, i32* %rtuint68, align 4
  %cmp69 = icmp ule i32 %44, 28
  br i1 %cmp69, label %lor.end.84, label %lor.rhs.70

lor.rhs.70:                                       ; preds = %land.lhs.true.64, %land.rhs.58
  %45 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx71 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %45, i64 2
  %46 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx71, align 8
  %fld72 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %46, i32 0, i32 1
  %arrayidx73 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld72, i32 0, i64 0
  %rtuint74 = bitcast %union.rtunion_def* %arrayidx73 to i32*
  %47 = load i32, i32* %rtuint74, align 4
  %cmp75 = icmp uge i32 %47, 45
  br i1 %cmp75, label %land.rhs.76, label %land.end.82

land.rhs.76:                                      ; preds = %lor.rhs.70
  %48 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx77 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %48, i64 2
  %49 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx77, align 8
  %fld78 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %49, i32 0, i32 1
  %arrayidx79 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld78, i32 0, i64 0
  %rtuint80 = bitcast %union.rtunion_def* %arrayidx79 to i32*
  %50 = load i32, i32* %rtuint80, align 4
  %cmp81 = icmp ule i32 %50, 52
  br label %land.end.82

land.end.82:                                      ; preds = %land.rhs.76, %lor.rhs.70
  %51 = phi i1 [ false, %lor.rhs.70 ], [ %cmp81, %land.rhs.76 ]
  br label %lor.end.84

lor.end.84:                                       ; preds = %land.end.82, %land.lhs.true.64
  %52 = phi i1 [ true, %land.lhs.true.64 ], [ %51, %land.end.82 ]
  br label %land.end.85

land.end.85:                                      ; preds = %lor.end.84, %land.end.52
  %53 = phi i1 [ false, %land.end.52 ], [ %52, %lor.end.84 ]
  %land.ext86 = zext i1 %53 to i32
  %or87 = or i32 %or, %land.ext86
  store i32 %or87, i32* %is_sse, align 4
  %54 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx88 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %54, i64 3
  %55 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx88, align 8
  %56 = bitcast %struct.rtx_def* %55 to i32*
  %bf.load89 = load i32, i32* %56, align 8
  %bf.clear90 = and i32 %bf.load89, 65535
  switch i32 %bf.clear90, label %sw.default [
    i32 75, label %sw.bb
    i32 76, label %sw.bb.103
    i32 78, label %sw.bb.122
    i32 79, label %sw.bb.141
  ]

sw.bb:                                            ; preds = %land.end.85
  %57 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx91 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %57, i64 1
  %58 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx91, align 8
  %59 = bitcast %struct.rtx_def* %58 to i32*
  %bf.load92 = load i32, i32* %59, align 8
  %bf.lshr = lshr i32 %bf.load92, 16
  %bf.clear93 = and i32 %bf.lshr, 255
  %idxprom = sext i32 %bf.clear93 to i64
  %arrayidx94 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom
  %60 = load i32, i32* %arrayidx94, align 4
  %cmp95 = icmp eq i32 %60, 1
  br i1 %cmp95, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %sw.bb
  %61 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx96 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %61, i64 2
  %62 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx96, align 8
  %63 = bitcast %struct.rtx_def* %62 to i32*
  %bf.load97 = load i32, i32* %63, align 8
  %bf.lshr98 = lshr i32 %bf.load97, 16
  %bf.clear99 = and i32 %bf.lshr98, 255
  %idxprom100 = sext i32 %bf.clear99 to i64
  %arrayidx101 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom100
  %64 = load i32, i32* %arrayidx101, align 4
  %cmp102 = icmp eq i32 %64, 1
  br i1 %cmp102, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %sw.bb
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.135, i32 0, i32 0), i8** %p, align 8
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.136, i32 0, i32 0), i8** %p, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.137, i32 0, i32 0), i8** %ssep, align 8
  br label %sw.epilog

sw.bb.103:                                        ; preds = %land.end.85
  %65 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx104 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %65, i64 1
  %66 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx104, align 8
  %67 = bitcast %struct.rtx_def* %66 to i32*
  %bf.load105 = load i32, i32* %67, align 8
  %bf.lshr106 = lshr i32 %bf.load105, 16
  %bf.clear107 = and i32 %bf.lshr106, 255
  %idxprom108 = sext i32 %bf.clear107 to i64
  %arrayidx109 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom108
  %68 = load i32, i32* %arrayidx109, align 4
  %cmp110 = icmp eq i32 %68, 1
  br i1 %cmp110, label %if.then.119, label %lor.lhs.false.111

lor.lhs.false.111:                                ; preds = %sw.bb.103
  %69 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx112 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %69, i64 2
  %70 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx112, align 8
  %71 = bitcast %struct.rtx_def* %70 to i32*
  %bf.load113 = load i32, i32* %71, align 8
  %bf.lshr114 = lshr i32 %bf.load113, 16
  %bf.clear115 = and i32 %bf.lshr114, 255
  %idxprom116 = sext i32 %bf.clear115 to i64
  %arrayidx117 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom116
  %72 = load i32, i32* %arrayidx117, align 4
  %cmp118 = icmp eq i32 %72, 1
  br i1 %cmp118, label %if.then.119, label %if.else.120

if.then.119:                                      ; preds = %lor.lhs.false.111, %sw.bb.103
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.138, i32 0, i32 0), i8** %p, align 8
  br label %if.end.121

if.else.120:                                      ; preds = %lor.lhs.false.111
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.139, i32 0, i32 0), i8** %p, align 8
  br label %if.end.121

if.end.121:                                       ; preds = %if.else.120, %if.then.119
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.140, i32 0, i32 0), i8** %ssep, align 8
  br label %sw.epilog

sw.bb.122:                                        ; preds = %land.end.85
  %73 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx123 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %73, i64 1
  %74 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx123, align 8
  %75 = bitcast %struct.rtx_def* %74 to i32*
  %bf.load124 = load i32, i32* %75, align 8
  %bf.lshr125 = lshr i32 %bf.load124, 16
  %bf.clear126 = and i32 %bf.lshr125, 255
  %idxprom127 = sext i32 %bf.clear126 to i64
  %arrayidx128 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom127
  %76 = load i32, i32* %arrayidx128, align 4
  %cmp129 = icmp eq i32 %76, 1
  br i1 %cmp129, label %if.then.138, label %lor.lhs.false.130

lor.lhs.false.130:                                ; preds = %sw.bb.122
  %77 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx131 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %77, i64 2
  %78 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx131, align 8
  %79 = bitcast %struct.rtx_def* %78 to i32*
  %bf.load132 = load i32, i32* %79, align 8
  %bf.lshr133 = lshr i32 %bf.load132, 16
  %bf.clear134 = and i32 %bf.lshr133, 255
  %idxprom135 = sext i32 %bf.clear134 to i64
  %arrayidx136 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom135
  %80 = load i32, i32* %arrayidx136, align 4
  %cmp137 = icmp eq i32 %80, 1
  br i1 %cmp137, label %if.then.138, label %if.else.139

if.then.138:                                      ; preds = %lor.lhs.false.130, %sw.bb.122
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.141, i32 0, i32 0), i8** %p, align 8
  br label %if.end.140

if.else.139:                                      ; preds = %lor.lhs.false.130
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.142, i32 0, i32 0), i8** %p, align 8
  br label %if.end.140

if.end.140:                                       ; preds = %if.else.139, %if.then.138
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.143, i32 0, i32 0), i8** %ssep, align 8
  br label %sw.epilog

sw.bb.141:                                        ; preds = %land.end.85
  %81 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx142 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %81, i64 1
  %82 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx142, align 8
  %83 = bitcast %struct.rtx_def* %82 to i32*
  %bf.load143 = load i32, i32* %83, align 8
  %bf.lshr144 = lshr i32 %bf.load143, 16
  %bf.clear145 = and i32 %bf.lshr144, 255
  %idxprom146 = sext i32 %bf.clear145 to i64
  %arrayidx147 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom146
  %84 = load i32, i32* %arrayidx147, align 4
  %cmp148 = icmp eq i32 %84, 1
  br i1 %cmp148, label %if.then.157, label %lor.lhs.false.149

lor.lhs.false.149:                                ; preds = %sw.bb.141
  %85 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx150 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %85, i64 2
  %86 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx150, align 8
  %87 = bitcast %struct.rtx_def* %86 to i32*
  %bf.load151 = load i32, i32* %87, align 8
  %bf.lshr152 = lshr i32 %bf.load151, 16
  %bf.clear153 = and i32 %bf.lshr152, 255
  %idxprom154 = sext i32 %bf.clear153 to i64
  %arrayidx155 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom154
  %88 = load i32, i32* %arrayidx155, align 4
  %cmp156 = icmp eq i32 %88, 1
  br i1 %cmp156, label %if.then.157, label %if.else.158

if.then.157:                                      ; preds = %lor.lhs.false.149, %sw.bb.141
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.144, i32 0, i32 0), i8** %p, align 8
  br label %if.end.159

if.else.158:                                      ; preds = %lor.lhs.false.149
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.145, i32 0, i32 0), i8** %p, align 8
  br label %if.end.159

if.end.159:                                       ; preds = %if.else.158, %if.then.157
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.146, i32 0, i32 0), i8** %ssep, align 8
  br label %sw.epilog

sw.default:                                       ; preds = %land.end.85
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 6383, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__FUNCTION__.output_387_binary_op, i32 0, i32 0)) #7
  unreachable

sw.epilog:                                        ; preds = %if.end.159, %if.end.140, %if.end.121, %if.end
  %89 = load i32, i32* %is_sse, align 4
  %tobool = icmp ne i32 %89, 0
  br i1 %tobool, label %if.then.160, label %if.end.171

if.then.160:                                      ; preds = %sw.epilog
  %90 = load i8*, i8** %ssep, align 8
  %call = call i8* @strcpy(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @output_387_binary_op.buf, i32 0, i32 0), i8* %90) #4
  %91 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx161 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %91, i64 0
  %92 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx161, align 8
  %93 = bitcast %struct.rtx_def* %92 to i32*
  %bf.load162 = load i32, i32* %93, align 8
  %bf.lshr163 = lshr i32 %bf.load162, 16
  %bf.clear164 = and i32 %bf.lshr163, 255
  %cmp165 = icmp eq i32 %bf.clear164, 15
  br i1 %cmp165, label %if.then.166, label %if.else.168

if.then.166:                                      ; preds = %if.then.160
  %call167 = call i8* @strcat(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @output_387_binary_op.buf, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.147, i32 0, i32 0)) #4
  br label %if.end.170

if.else.168:                                      ; preds = %if.then.160
  %call169 = call i8* @strcat(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @output_387_binary_op.buf, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.148, i32 0, i32 0)) #4
  br label %if.end.170

if.end.170:                                       ; preds = %if.else.168, %if.then.166
  store i8* getelementptr inbounds ([30 x i8], [30 x i8]* @output_387_binary_op.buf, i32 0, i32 0), i8** %retval
  br label %return

if.end.171:                                       ; preds = %sw.epilog
  %94 = load i8*, i8** %p, align 8
  %call172 = call i8* @strcpy(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @output_387_binary_op.buf, i32 0, i32 0), i8* %94) #4
  %95 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx173 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %95, i64 3
  %96 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx173, align 8
  %97 = bitcast %struct.rtx_def* %96 to i32*
  %bf.load174 = load i32, i32* %97, align 8
  %bf.clear175 = and i32 %bf.load174, 65535
  switch i32 %bf.clear175, label %sw.default.331 [
    i32 78, label %sw.bb.176
    i32 75, label %sw.bb.176
    i32 76, label %sw.bb.237
    i32 79, label %sw.bb.237
  ]

sw.bb.176:                                        ; preds = %if.end.171, %if.end.171
  %98 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx177 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %98, i64 2
  %99 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx177, align 8
  %100 = bitcast %struct.rtx_def* %99 to i32*
  %bf.load178 = load i32, i32* %100, align 8
  %bf.clear179 = and i32 %bf.load178, 65535
  %cmp180 = icmp eq i32 %bf.clear179, 61
  br i1 %cmp180, label %land.lhs.true.181, label %if.end.196

land.lhs.true.181:                                ; preds = %sw.bb.176
  %101 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx182 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %101, i64 0
  %102 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx182, align 8
  %fld183 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %102, i32 0, i32 1
  %arrayidx184 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld183, i32 0, i64 0
  %rtuint185 = bitcast %union.rtunion_def* %arrayidx184 to i32*
  %103 = load i32, i32* %rtuint185, align 4
  %104 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx186 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %104, i64 2
  %105 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx186, align 8
  %fld187 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %105, i32 0, i32 1
  %arrayidx188 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld187, i32 0, i64 0
  %rtuint189 = bitcast %union.rtunion_def* %arrayidx188 to i32*
  %106 = load i32, i32* %rtuint189, align 4
  %cmp190 = icmp eq i32 %103, %106
  br i1 %cmp190, label %if.then.191, label %if.end.196

if.then.191:                                      ; preds = %land.lhs.true.181
  %107 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx192 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %107, i64 2
  %108 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx192, align 8
  store %struct.rtx_def* %108, %struct.rtx_def** %temp, align 8
  %109 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx193 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %109, i64 1
  %110 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx193, align 8
  %111 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx194 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %111, i64 2
  store %struct.rtx_def* %110, %struct.rtx_def** %arrayidx194, align 8
  %112 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %113 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx195 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %113, i64 1
  store %struct.rtx_def* %112, %struct.rtx_def** %arrayidx195, align 8
  br label %if.end.196

if.end.196:                                       ; preds = %if.then.191, %land.lhs.true.181, %sw.bb.176
  %114 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx197 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %114, i64 2
  %115 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx197, align 8
  %116 = bitcast %struct.rtx_def* %115 to i32*
  %bf.load198 = load i32, i32* %116, align 8
  %bf.clear199 = and i32 %bf.load198, 65535
  %cmp200 = icmp eq i32 %bf.clear199, 66
  br i1 %cmp200, label %if.then.201, label %if.end.202

if.then.201:                                      ; preds = %if.end.196
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.149, i32 0, i32 0), i8** %p, align 8
  br label %sw.epilog.332

if.end.202:                                       ; preds = %if.end.196
  %117 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %118 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx203 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %118, i64 2
  %119 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx203, align 8
  %fld204 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %119, i32 0, i32 1
  %arrayidx205 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld204, i32 0, i64 0
  %rtuint206 = bitcast %union.rtunion_def* %arrayidx205 to i32*
  %120 = load i32, i32* %rtuint206, align 4
  %call207 = call %struct.rtx_def* @find_regno_note(%struct.rtx_def* %117, i32 1, i32 %120)
  %tobool208 = icmp ne %struct.rtx_def* %call207, null
  br i1 %tobool208, label %if.then.209, label %if.end.223

if.then.209:                                      ; preds = %if.end.202
  %121 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx210 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %121, i64 0
  %122 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx210, align 8
  %123 = bitcast %struct.rtx_def* %122 to i32*
  %bf.load211 = load i32, i32* %123, align 8
  %bf.clear212 = and i32 %bf.load211, 65535
  %cmp213 = icmp eq i32 %bf.clear212, 61
  br i1 %cmp213, label %land.lhs.true.214, label %if.else.221

land.lhs.true.214:                                ; preds = %if.then.209
  %124 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx215 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %124, i64 0
  %125 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx215, align 8
  %fld216 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %125, i32 0, i32 1
  %arrayidx217 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld216, i32 0, i64 0
  %rtuint218 = bitcast %union.rtunion_def* %arrayidx217 to i32*
  %126 = load i32, i32* %rtuint218, align 4
  %cmp219 = icmp eq i32 %126, 8
  br i1 %cmp219, label %if.then.220, label %if.else.221

if.then.220:                                      ; preds = %land.lhs.true.214
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.150, i32 0, i32 0), i8** %p, align 8
  br label %if.end.222

if.else.221:                                      ; preds = %land.lhs.true.214, %if.then.209
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.151, i32 0, i32 0), i8** %p, align 8
  br label %if.end.222

if.end.222:                                       ; preds = %if.else.221, %if.then.220
  br label %sw.epilog.332

if.end.223:                                       ; preds = %if.end.202
  %127 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx224 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %127, i64 0
  %128 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx224, align 8
  %129 = bitcast %struct.rtx_def* %128 to i32*
  %bf.load225 = load i32, i32* %129, align 8
  %bf.clear226 = and i32 %bf.load225, 65535
  %cmp227 = icmp eq i32 %bf.clear226, 61
  br i1 %cmp227, label %land.lhs.true.228, label %if.else.235

land.lhs.true.228:                                ; preds = %if.end.223
  %130 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx229 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %130, i64 0
  %131 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx229, align 8
  %fld230 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %131, i32 0, i32 1
  %arrayidx231 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld230, i32 0, i64 0
  %rtuint232 = bitcast %union.rtunion_def* %arrayidx231 to i32*
  %132 = load i32, i32* %rtuint232, align 4
  %cmp233 = icmp eq i32 %132, 8
  br i1 %cmp233, label %if.then.234, label %if.else.235

if.then.234:                                      ; preds = %land.lhs.true.228
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.152, i32 0, i32 0), i8** %p, align 8
  br label %if.end.236

if.else.235:                                      ; preds = %land.lhs.true.228, %if.end.223
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.153, i32 0, i32 0), i8** %p, align 8
  br label %if.end.236

if.end.236:                                       ; preds = %if.else.235, %if.then.234
  br label %sw.epilog.332

sw.bb.237:                                        ; preds = %if.end.171, %if.end.171
  %133 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx238 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %133, i64 1
  %134 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx238, align 8
  %135 = bitcast %struct.rtx_def* %134 to i32*
  %bf.load239 = load i32, i32* %135, align 8
  %bf.clear240 = and i32 %bf.load239, 65535
  %cmp241 = icmp eq i32 %bf.clear240, 66
  br i1 %cmp241, label %if.then.242, label %if.end.243

if.then.242:                                      ; preds = %sw.bb.237
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.154, i32 0, i32 0), i8** %p, align 8
  br label %sw.epilog.332

if.end.243:                                       ; preds = %sw.bb.237
  %136 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx244 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %136, i64 2
  %137 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx244, align 8
  %138 = bitcast %struct.rtx_def* %137 to i32*
  %bf.load245 = load i32, i32* %138, align 8
  %bf.clear246 = and i32 %bf.load245, 65535
  %cmp247 = icmp eq i32 %bf.clear246, 66
  br i1 %cmp247, label %if.then.248, label %if.end.249

if.then.248:                                      ; preds = %if.end.243
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.149, i32 0, i32 0), i8** %p, align 8
  br label %sw.epilog.332

if.end.249:                                       ; preds = %if.end.243
  %139 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %140 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx250 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %140, i64 2
  %141 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx250, align 8
  %fld251 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %141, i32 0, i32 1
  %arrayidx252 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld251, i32 0, i64 0
  %rtuint253 = bitcast %union.rtunion_def* %arrayidx252 to i32*
  %142 = load i32, i32* %rtuint253, align 4
  %call254 = call %struct.rtx_def* @find_regno_note(%struct.rtx_def* %139, i32 1, i32 %142)
  %tobool255 = icmp ne %struct.rtx_def* %call254, null
  br i1 %tobool255, label %if.then.256, label %if.end.270

if.then.256:                                      ; preds = %if.end.249
  %143 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx257 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %143, i64 0
  %144 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx257, align 8
  %145 = bitcast %struct.rtx_def* %144 to i32*
  %bf.load258 = load i32, i32* %145, align 8
  %bf.clear259 = and i32 %bf.load258, 65535
  %cmp260 = icmp eq i32 %bf.clear259, 61
  br i1 %cmp260, label %land.lhs.true.261, label %if.else.268

land.lhs.true.261:                                ; preds = %if.then.256
  %146 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx262 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %146, i64 0
  %147 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx262, align 8
  %fld263 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %147, i32 0, i32 1
  %arrayidx264 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld263, i32 0, i64 0
  %rtuint265 = bitcast %union.rtunion_def* %arrayidx264 to i32*
  %148 = load i32, i32* %rtuint265, align 4
  %cmp266 = icmp eq i32 %148, 8
  br i1 %cmp266, label %if.then.267, label %if.else.268

if.then.267:                                      ; preds = %land.lhs.true.261
  store i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.155, i32 0, i32 0), i8** %p, align 8
  br label %if.end.269

if.else.268:                                      ; preds = %land.lhs.true.261, %if.then.256
  store i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.156, i32 0, i32 0), i8** %p, align 8
  br label %if.end.269

if.end.269:                                       ; preds = %if.else.268, %if.then.267
  br label %sw.epilog.332

if.end.270:                                       ; preds = %if.end.249
  %149 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %150 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx271 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %150, i64 1
  %151 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx271, align 8
  %fld272 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %151, i32 0, i32 1
  %arrayidx273 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld272, i32 0, i64 0
  %rtuint274 = bitcast %union.rtunion_def* %arrayidx273 to i32*
  %152 = load i32, i32* %rtuint274, align 4
  %call275 = call %struct.rtx_def* @find_regno_note(%struct.rtx_def* %149, i32 1, i32 %152)
  %tobool276 = icmp ne %struct.rtx_def* %call275, null
  br i1 %tobool276, label %if.then.277, label %if.end.291

if.then.277:                                      ; preds = %if.end.270
  %153 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx278 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %153, i64 0
  %154 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx278, align 8
  %155 = bitcast %struct.rtx_def* %154 to i32*
  %bf.load279 = load i32, i32* %155, align 8
  %bf.clear280 = and i32 %bf.load279, 65535
  %cmp281 = icmp eq i32 %bf.clear280, 61
  br i1 %cmp281, label %land.lhs.true.282, label %if.else.289

land.lhs.true.282:                                ; preds = %if.then.277
  %156 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx283 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %156, i64 0
  %157 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx283, align 8
  %fld284 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %157, i32 0, i32 1
  %arrayidx285 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld284, i32 0, i64 0
  %rtuint286 = bitcast %union.rtunion_def* %arrayidx285 to i32*
  %158 = load i32, i32* %rtuint286, align 4
  %cmp287 = icmp eq i32 %158, 8
  br i1 %cmp287, label %if.then.288, label %if.else.289

if.then.288:                                      ; preds = %land.lhs.true.282
  store i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.157, i32 0, i32 0), i8** %p, align 8
  br label %if.end.290

if.else.289:                                      ; preds = %land.lhs.true.282, %if.then.277
  store i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.158, i32 0, i32 0), i8** %p, align 8
  br label %if.end.290

if.end.290:                                       ; preds = %if.else.289, %if.then.288
  br label %sw.epilog.332

if.end.291:                                       ; preds = %if.end.270
  %159 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx292 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %159, i64 0
  %160 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx292, align 8
  %161 = bitcast %struct.rtx_def* %160 to i32*
  %bf.load293 = load i32, i32* %161, align 8
  %bf.clear294 = and i32 %bf.load293, 65535
  %cmp295 = icmp eq i32 %bf.clear294, 61
  br i1 %cmp295, label %land.lhs.true.296, label %if.else.316

land.lhs.true.296:                                ; preds = %if.end.291
  %162 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx297 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %162, i64 0
  %163 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx297, align 8
  %fld298 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %163, i32 0, i32 1
  %arrayidx299 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld298, i32 0, i64 0
  %rtuint300 = bitcast %union.rtunion_def* %arrayidx299 to i32*
  %164 = load i32, i32* %rtuint300, align 4
  %cmp301 = icmp eq i32 %164, 8
  br i1 %cmp301, label %if.then.302, label %if.else.316

if.then.302:                                      ; preds = %land.lhs.true.296
  %165 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx303 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %165, i64 1
  %166 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx303, align 8
  %167 = bitcast %struct.rtx_def* %166 to i32*
  %bf.load304 = load i32, i32* %167, align 8
  %bf.clear305 = and i32 %bf.load304, 65535
  %cmp306 = icmp eq i32 %bf.clear305, 61
  br i1 %cmp306, label %land.lhs.true.307, label %if.else.314

land.lhs.true.307:                                ; preds = %if.then.302
  %168 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx308 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %168, i64 1
  %169 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx308, align 8
  %fld309 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %169, i32 0, i32 1
  %arrayidx310 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld309, i32 0, i64 0
  %rtuint311 = bitcast %union.rtunion_def* %arrayidx310 to i32*
  %170 = load i32, i32* %rtuint311, align 4
  %cmp312 = icmp eq i32 %170, 8
  br i1 %cmp312, label %if.then.313, label %if.else.314

if.then.313:                                      ; preds = %land.lhs.true.307
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.152, i32 0, i32 0), i8** %p, align 8
  br label %if.end.315

if.else.314:                                      ; preds = %land.lhs.true.307, %if.then.302
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.159, i32 0, i32 0), i8** %p, align 8
  br label %if.end.315

if.end.315:                                       ; preds = %if.else.314, %if.then.313
  br label %sw.epilog.332

if.else.316:                                      ; preds = %land.lhs.true.296, %if.end.291
  %171 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx317 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %171, i64 1
  %172 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx317, align 8
  %173 = bitcast %struct.rtx_def* %172 to i32*
  %bf.load318 = load i32, i32* %173, align 8
  %bf.clear319 = and i32 %bf.load318, 65535
  %cmp320 = icmp eq i32 %bf.clear319, 61
  br i1 %cmp320, label %land.lhs.true.321, label %if.else.328

land.lhs.true.321:                                ; preds = %if.else.316
  %174 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx322 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %174, i64 1
  %175 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx322, align 8
  %fld323 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %175, i32 0, i32 1
  %arrayidx324 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld323, i32 0, i64 0
  %rtuint325 = bitcast %union.rtunion_def* %arrayidx324 to i32*
  %176 = load i32, i32* %rtuint325, align 4
  %cmp326 = icmp eq i32 %176, 8
  br i1 %cmp326, label %if.then.327, label %if.else.328

if.then.327:                                      ; preds = %land.lhs.true.321
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.160, i32 0, i32 0), i8** %p, align 8
  br label %if.end.329

if.else.328:                                      ; preds = %land.lhs.true.321, %if.else.316
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.161, i32 0, i32 0), i8** %p, align 8
  br label %if.end.329

if.end.329:                                       ; preds = %if.else.328, %if.then.327
  br label %if.end.330

if.end.330:                                       ; preds = %if.end.329
  br label %sw.epilog.332

sw.default.331:                                   ; preds = %if.end.171
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 6518, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__FUNCTION__.output_387_binary_op, i32 0, i32 0)) #7
  unreachable

sw.epilog.332:                                    ; preds = %if.end.330, %if.end.315, %if.end.290, %if.end.269, %if.then.248, %if.then.242, %if.end.236, %if.end.222, %if.then.201
  %177 = load i8*, i8** %p, align 8
  %call333 = call i8* @strcat(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @output_387_binary_op.buf, i32 0, i32 0), i8* %177) #4
  store i8* getelementptr inbounds ([30 x i8], [30 x i8]* @output_387_binary_op.buf, i32 0, i32 0), i8** %retval
  br label %return

return:                                           ; preds = %sw.epilog.332, %if.end.170
  %178 = load i8*, i8** %retval
  ret i8* %178
}

; Function Attrs: nounwind
declare i8* @strcpy(i8*, i8*) #3

; Function Attrs: nounwind
declare i8* @strcat(i8*, i8*) #3

declare %struct.rtx_def* @find_regno_note(%struct.rtx_def*, i32, i32) #0

; Function Attrs: nounwind uwtable
define void @emit_i387_cw_initialization(%struct.rtx_def* %normal, %struct.rtx_def* %round_down) #1 {
entry:
  %normal.addr = alloca %struct.rtx_def*, align 8
  %round_down.addr = alloca %struct.rtx_def*, align 8
  %reg = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %normal, %struct.rtx_def** %normal.addr, align 8
  store %struct.rtx_def* %round_down, %struct.rtx_def** %round_down.addr, align 8
  %call = call %struct.rtx_def* @gen_reg_rtx(i32 3)
  store %struct.rtx_def* %call, %struct.rtx_def** %reg, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %normal.addr, align 8
  %call1 = call %struct.rtx_def* @gen_x86_fnstcw_1(%struct.rtx_def* %0)
  %call2 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call1)
  %1 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %normal.addr, align 8
  %call3 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %1, %struct.rtx_def* %2)
  %3 = load i32, i32* @ix86_cpu, align 4
  %shl = shl i32 1, %3
  %and = and i32 8, %shl
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.else, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %4 = load i32, i32* @optimize_size, align 4
  %tobool4 = icmp ne i32 %4, 0
  br i1 %tobool4, label %if.else, label %land.lhs.true.5

land.lhs.true.5:                                  ; preds = %land.lhs.true
  %5 = load i32, i32* @target_flags, align 4
  %and6 = and i32 %5, 33554432
  %tobool7 = icmp ne i32 %and6, 0
  br i1 %tobool7, label %if.else, label %if.then

if.then:                                          ; preds = %land.lhs.true.5
  %6 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %call8 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 12)
  %call9 = call %struct.rtx_def* @gen_movsi_insv_1(%struct.rtx_def* %6, %struct.rtx_def* %call8)
  %call10 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call9)
  br label %if.end

if.else:                                          ; preds = %land.lhs.true.5, %land.lhs.true, %entry
  %7 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %call11 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 3072)
  %call12 = call %struct.rtx_def* @gen_iorhi3(%struct.rtx_def* %7, %struct.rtx_def* %8, %struct.rtx_def* %call11)
  %call13 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call12)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %9 = load %struct.rtx_def*, %struct.rtx_def** %round_down.addr, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %call14 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %9, %struct.rtx_def* %10)
  ret void
}

declare %struct.rtx_def* @gen_x86_fnstcw_1(%struct.rtx_def*) #0

declare %struct.rtx_def* @gen_movsi_insv_1(%struct.rtx_def*, %struct.rtx_def*) #0

declare %struct.rtx_def* @gen_iorhi3(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #0

; Function Attrs: nounwind uwtable
define i8* @output_fix_trunc(%struct.rtx_def* %insn, %struct.rtx_def** %operands) #1 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %stack_top_dies = alloca i32, align 4
  %dimode_p = alloca i32, align 4
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call = call %struct.rtx_def* @find_regno_note(%struct.rtx_def* %0, i32 1, i32 8)
  %cmp = icmp ne %struct.rtx_def* %call, null
  %conv = zext i1 %cmp to i32
  store i32 %conv, i32* %stack_top_dies, align 4
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 0
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %3 = bitcast %struct.rtx_def* %2 to i32*
  %bf.load = load i32, i32* %3, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %cmp1 = icmp eq i32 %bf.clear, 5
  %conv2 = zext i1 %cmp1 to i32
  store i32 %conv2, i32* %dimode_p, align 4
  %4 = load i32, i32* %dimode_p, align 4
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %5 = load i32, i32* %stack_top_dies, align 4
  %tobool3 = icmp ne i32 %5, 0
  br i1 %tobool3, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %6 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  call void @output_asm_insn(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.162, i32 0, i32 0), %struct.rtx_def** %6)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %7 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %7, i64 1
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  %9 = bitcast %struct.rtx_def* %8 to i32*
  %bf.load5 = load i32, i32* %9, align 8
  %bf.clear6 = and i32 %bf.load5, 65535
  %cmp7 = icmp eq i32 %bf.clear6, 61
  br i1 %cmp7, label %land.lhs.true.9, label %if.then.14

land.lhs.true.9:                                  ; preds = %if.end
  %10 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx10 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %10, i64 1
  %11 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx10, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1
  %arrayidx11 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx11 to i32*
  %12 = load i32, i32* %rtuint, align 4
  %cmp12 = icmp eq i32 %12, 8
  br i1 %cmp12, label %if.end.15, label %if.then.14

if.then.14:                                       ; preds = %land.lhs.true.9, %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 6563, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__FUNCTION__.output_fix_trunc, i32 0, i32 0)) #7
  unreachable

if.end.15:                                        ; preds = %land.lhs.true.9
  %13 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx16 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %13, i64 0
  %14 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx16, align 8
  %15 = bitcast %struct.rtx_def* %14 to i32*
  %bf.load17 = load i32, i32* %15, align 8
  %bf.clear18 = and i32 %bf.load17, 65535
  %cmp19 = icmp ne i32 %bf.clear18, 66
  br i1 %cmp19, label %if.then.21, label %if.end.22

if.then.21:                                       ; preds = %if.end.15
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 6566, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__FUNCTION__.output_fix_trunc, i32 0, i32 0)) #7
  unreachable

if.end.22:                                        ; preds = %if.end.15
  %16 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  call void @output_asm_insn(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.163, i32 0, i32 0), %struct.rtx_def** %16)
  %17 = load i32, i32* %stack_top_dies, align 4
  %tobool23 = icmp ne i32 %17, 0
  br i1 %tobool23, label %if.then.25, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.22
  %18 = load i32, i32* %dimode_p, align 4
  %tobool24 = icmp ne i32 %18, 0
  br i1 %tobool24, label %if.then.25, label %if.else

if.then.25:                                       ; preds = %lor.lhs.false, %if.end.22
  %19 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  call void @output_asm_insn(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.164, i32 0, i32 0), %struct.rtx_def** %19)
  br label %if.end.26

if.else:                                          ; preds = %lor.lhs.false
  %20 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  call void @output_asm_insn(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.165, i32 0, i32 0), %struct.rtx_def** %20)
  br label %if.end.26

if.end.26:                                        ; preds = %if.else, %if.then.25
  %21 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  call void @output_asm_insn(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.166, i32 0, i32 0), %struct.rtx_def** %21)
  ret i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i32 0, i32 0)
}

; Function Attrs: nounwind uwtable
define i8* @output_fp_compare(%struct.rtx_def* %insn, %struct.rtx_def** %operands, i32 %eflags_p, i32 %unordered_p) #1 {
entry:
  %retval = alloca i8*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %eflags_p.addr = alloca i32, align 4
  %unordered_p.addr = alloca i32, align 4
  %stack_top_dies = alloca i32, align 4
  %cmp_op0 = alloca %struct.rtx_def*, align 8
  %cmp_op1 = alloca %struct.rtx_def*, align 8
  %is_sse = alloca i32, align 4
  %mask = alloca i32, align 4
  %ret = alloca i8*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store i32 %eflags_p, i32* %eflags_p.addr, align 4
  store i32 %unordered_p, i32* %unordered_p.addr, align 4
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %cmp_op0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %cmp_op1, align 8
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 0
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  %6 = bitcast %struct.rtx_def* %5 to i32*
  %bf.load = load i32, i32* %6, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 61
  br i1 %cmp, label %land.rhs, label %land.end.22

land.rhs:                                         ; preds = %entry
  %7 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %7, i64 0
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1
  %arrayidx4 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx4 to i32*
  %9 = load i32, i32* %rtuint, align 4
  %cmp5 = icmp uge i32 %9, 21
  br i1 %cmp5, label %land.lhs.true, label %lor.rhs

land.lhs.true:                                    ; preds = %land.rhs
  %10 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx6 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %10, i64 0
  %11 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  %fld7 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1
  %arrayidx8 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld7, i32 0, i64 0
  %rtuint9 = bitcast %union.rtunion_def* %arrayidx8 to i32*
  %12 = load i32, i32* %rtuint9, align 4
  %cmp10 = icmp ule i32 %12, 28
  br i1 %cmp10, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.lhs.true, %land.rhs
  %13 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx11 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %13, i64 0
  %14 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx11, align 8
  %fld12 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1
  %arrayidx13 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld12, i32 0, i64 0
  %rtuint14 = bitcast %union.rtunion_def* %arrayidx13 to i32*
  %15 = load i32, i32* %rtuint14, align 4
  %cmp15 = icmp uge i32 %15, 45
  br i1 %cmp15, label %land.rhs.16, label %land.end

land.rhs.16:                                      ; preds = %lor.rhs
  %16 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx17 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %16, i64 0
  %17 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx17, align 8
  %fld18 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1
  %arrayidx19 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld18, i32 0, i64 0
  %rtuint20 = bitcast %union.rtunion_def* %arrayidx19 to i32*
  %18 = load i32, i32* %rtuint20, align 4
  %cmp21 = icmp ule i32 %18, 52
  br label %land.end

land.end:                                         ; preds = %land.rhs.16, %lor.rhs
  %19 = phi i1 [ false, %lor.rhs ], [ %cmp21, %land.rhs.16 ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %land.lhs.true
  %20 = phi i1 [ true, %land.lhs.true ], [ %19, %land.end ]
  br label %land.end.22

land.end.22:                                      ; preds = %lor.end, %entry
  %21 = phi i1 [ false, %entry ], [ %20, %lor.end ]
  %land.ext = zext i1 %21 to i32
  %22 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx23 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %22, i64 1
  %23 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx23, align 8
  %24 = bitcast %struct.rtx_def* %23 to i32*
  %bf.load24 = load i32, i32* %24, align 8
  %bf.clear25 = and i32 %bf.load24, 65535
  %cmp26 = icmp eq i32 %bf.clear25, 61
  br i1 %cmp26, label %land.rhs.27, label %land.end.54

land.rhs.27:                                      ; preds = %land.end.22
  %25 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx28 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %25, i64 1
  %26 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx28, align 8
  %fld29 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %26, i32 0, i32 1
  %arrayidx30 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld29, i32 0, i64 0
  %rtuint31 = bitcast %union.rtunion_def* %arrayidx30 to i32*
  %27 = load i32, i32* %rtuint31, align 4
  %cmp32 = icmp uge i32 %27, 21
  br i1 %cmp32, label %land.lhs.true.33, label %lor.rhs.39

land.lhs.true.33:                                 ; preds = %land.rhs.27
  %28 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx34 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %28, i64 1
  %29 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx34, align 8
  %fld35 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %29, i32 0, i32 1
  %arrayidx36 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld35, i32 0, i64 0
  %rtuint37 = bitcast %union.rtunion_def* %arrayidx36 to i32*
  %30 = load i32, i32* %rtuint37, align 4
  %cmp38 = icmp ule i32 %30, 28
  br i1 %cmp38, label %lor.end.53, label %lor.rhs.39

lor.rhs.39:                                       ; preds = %land.lhs.true.33, %land.rhs.27
  %31 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx40 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %31, i64 1
  %32 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx40, align 8
  %fld41 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %32, i32 0, i32 1
  %arrayidx42 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld41, i32 0, i64 0
  %rtuint43 = bitcast %union.rtunion_def* %arrayidx42 to i32*
  %33 = load i32, i32* %rtuint43, align 4
  %cmp44 = icmp uge i32 %33, 45
  br i1 %cmp44, label %land.rhs.45, label %land.end.51

land.rhs.45:                                      ; preds = %lor.rhs.39
  %34 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx46 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %34, i64 1
  %35 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx46, align 8
  %fld47 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %35, i32 0, i32 1
  %arrayidx48 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld47, i32 0, i64 0
  %rtuint49 = bitcast %union.rtunion_def* %arrayidx48 to i32*
  %36 = load i32, i32* %rtuint49, align 4
  %cmp50 = icmp ule i32 %36, 52
  br label %land.end.51

land.end.51:                                      ; preds = %land.rhs.45, %lor.rhs.39
  %37 = phi i1 [ false, %lor.rhs.39 ], [ %cmp50, %land.rhs.45 ]
  br label %lor.end.53

lor.end.53:                                       ; preds = %land.end.51, %land.lhs.true.33
  %38 = phi i1 [ true, %land.lhs.true.33 ], [ %37, %land.end.51 ]
  br label %land.end.54

land.end.54:                                      ; preds = %lor.end.53, %land.end.22
  %39 = phi i1 [ false, %land.end.22 ], [ %38, %lor.end.53 ]
  %land.ext55 = zext i1 %39 to i32
  %or = or i32 %land.ext, %land.ext55
  store i32 %or, i32* %is_sse, align 4
  %40 = load i32, i32* %eflags_p.addr, align 4
  %cmp56 = icmp eq i32 %40, 2
  br i1 %cmp56, label %if.then, label %if.end

if.then:                                          ; preds = %land.end.54
  %41 = load %struct.rtx_def*, %struct.rtx_def** %cmp_op1, align 8
  store %struct.rtx_def* %41, %struct.rtx_def** %cmp_op0, align 8
  %42 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx57 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %42, i64 2
  %43 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx57, align 8
  store %struct.rtx_def* %43, %struct.rtx_def** %cmp_op1, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %land.end.54
  %44 = load i32, i32* %is_sse, align 4
  %tobool = icmp ne i32 %44, 0
  br i1 %tobool, label %if.then.58, label %if.end.70

if.then.58:                                       ; preds = %if.end
  %45 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx59 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %45, i64 0
  %46 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx59, align 8
  %47 = bitcast %struct.rtx_def* %46 to i32*
  %bf.load60 = load i32, i32* %47, align 8
  %bf.lshr = lshr i32 %bf.load60, 16
  %bf.clear61 = and i32 %bf.lshr, 255
  %cmp62 = icmp eq i32 %bf.clear61, 15
  br i1 %cmp62, label %if.then.63, label %if.else.66

if.then.63:                                       ; preds = %if.then.58
  %48 = load i32, i32* %unordered_p.addr, align 4
  %tobool64 = icmp ne i32 %48, 0
  br i1 %tobool64, label %if.then.65, label %if.else

if.then.65:                                       ; preds = %if.then.63
  store i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.167, i32 0, i32 0), i8** %retval
  br label %return

if.else:                                          ; preds = %if.then.63
  store i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.168, i32 0, i32 0), i8** %retval
  br label %return

if.else.66:                                       ; preds = %if.then.58
  %49 = load i32, i32* %unordered_p.addr, align 4
  %tobool67 = icmp ne i32 %49, 0
  br i1 %tobool67, label %if.then.68, label %if.else.69

if.then.68:                                       ; preds = %if.else.66
  store i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.169, i32 0, i32 0), i8** %retval
  br label %return

if.else.69:                                       ; preds = %if.else.66
  store i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.170, i32 0, i32 0), i8** %retval
  br label %return

if.end.70:                                        ; preds = %if.end
  %50 = load %struct.rtx_def*, %struct.rtx_def** %cmp_op0, align 8
  %51 = bitcast %struct.rtx_def* %50 to i32*
  %bf.load71 = load i32, i32* %51, align 8
  %bf.clear72 = and i32 %bf.load71, 65535
  %cmp73 = icmp eq i32 %bf.clear72, 61
  br i1 %cmp73, label %land.lhs.true.74, label %if.then.79

land.lhs.true.74:                                 ; preds = %if.end.70
  %52 = load %struct.rtx_def*, %struct.rtx_def** %cmp_op0, align 8
  %fld75 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %52, i32 0, i32 1
  %arrayidx76 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld75, i32 0, i64 0
  %rtuint77 = bitcast %union.rtunion_def* %arrayidx76 to i32*
  %53 = load i32, i32* %rtuint77, align 4
  %cmp78 = icmp eq i32 %53, 8
  br i1 %cmp78, label %if.end.80, label %if.then.79

if.then.79:                                       ; preds = %land.lhs.true.74, %if.end.70
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 6613, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__FUNCTION__.output_fp_compare, i32 0, i32 0)) #7
  unreachable

if.end.80:                                        ; preds = %land.lhs.true.74
  %54 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call = call %struct.rtx_def* @find_regno_note(%struct.rtx_def* %54, i32 1, i32 8)
  %cmp81 = icmp ne %struct.rtx_def* %call, null
  %conv = zext i1 %cmp81 to i32
  store i32 %conv, i32* %stack_top_dies, align 4
  %55 = load %struct.rtx_def*, %struct.rtx_def** %cmp_op1, align 8
  %56 = bitcast %struct.rtx_def* %55 to i32*
  %bf.load82 = load i32, i32* %56, align 8
  %bf.clear83 = and i32 %bf.load82, 65535
  %cmp84 = icmp eq i32 %bf.clear83, 61
  br i1 %cmp84, label %land.lhs.true.86, label %if.else.131

land.lhs.true.86:                                 ; preds = %if.end.80
  %57 = load %struct.rtx_def*, %struct.rtx_def** %cmp_op1, align 8
  %fld87 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %57, i32 0, i32 1
  %arrayidx88 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld87, i32 0, i64 0
  %rtuint89 = bitcast %union.rtunion_def* %arrayidx88 to i32*
  %58 = load i32, i32* %rtuint89, align 4
  %cmp90 = icmp uge i32 %58, 8
  br i1 %cmp90, label %land.lhs.true.92, label %if.else.131

land.lhs.true.92:                                 ; preds = %land.lhs.true.86
  %59 = load %struct.rtx_def*, %struct.rtx_def** %cmp_op1, align 8
  %fld93 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %59, i32 0, i32 1
  %arrayidx94 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld93, i32 0, i64 0
  %rtuint95 = bitcast %union.rtunion_def* %arrayidx94 to i32*
  %60 = load i32, i32* %rtuint95, align 4
  %cmp96 = icmp ule i32 %60, 15
  br i1 %cmp96, label %land.lhs.true.98, label %if.else.131

land.lhs.true.98:                                 ; preds = %land.lhs.true.92
  %61 = load i32, i32* %stack_top_dies, align 4
  %tobool99 = icmp ne i32 %61, 0
  br i1 %tobool99, label %land.lhs.true.100, label %if.else.131

land.lhs.true.100:                                ; preds = %land.lhs.true.98
  %62 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %63 = load %struct.rtx_def*, %struct.rtx_def** %cmp_op1, align 8
  %fld101 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %63, i32 0, i32 1
  %arrayidx102 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld101, i32 0, i64 0
  %rtuint103 = bitcast %union.rtunion_def* %arrayidx102 to i32*
  %64 = load i32, i32* %rtuint103, align 4
  %call104 = call %struct.rtx_def* @find_regno_note(%struct.rtx_def* %62, i32 1, i32 %64)
  %tobool105 = icmp ne %struct.rtx_def* %call104, null
  br i1 %tobool105, label %land.lhs.true.106, label %if.else.131

land.lhs.true.106:                                ; preds = %land.lhs.true.100
  %65 = load %struct.rtx_def*, %struct.rtx_def** %cmp_op1, align 8
  %fld107 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %65, i32 0, i32 1
  %arrayidx108 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld107, i32 0, i64 0
  %rtuint109 = bitcast %union.rtunion_def* %arrayidx108 to i32*
  %66 = load i32, i32* %rtuint109, align 4
  %cmp110 = icmp ne i32 %66, 8
  br i1 %cmp110, label %if.then.112, label %if.else.131

if.then.112:                                      ; preds = %land.lhs.true.106
  %67 = load i32, i32* %eflags_p.addr, align 4
  %cmp113 = icmp eq i32 %67, 1
  br i1 %cmp113, label %if.then.115, label %if.else.120

if.then.115:                                      ; preds = %if.then.112
  %68 = load i32, i32* %unordered_p.addr, align 4
  %tobool116 = icmp ne i32 %68, 0
  br i1 %tobool116, label %if.then.117, label %if.else.118

if.then.117:                                      ; preds = %if.then.115
  %69 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  call void @output_asm_insn(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.171, i32 0, i32 0), %struct.rtx_def** %69)
  br label %if.end.119

if.else.118:                                      ; preds = %if.then.115
  %70 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  call void @output_asm_insn(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.172, i32 0, i32 0), %struct.rtx_def** %70)
  br label %if.end.119

if.end.119:                                       ; preds = %if.else.118, %if.then.117
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.173, i32 0, i32 0), i8** %retval
  br label %return

if.else.120:                                      ; preds = %if.then.112
  %71 = load i32, i32* %eflags_p.addr, align 4
  %cmp121 = icmp eq i32 %71, 2
  br i1 %cmp121, label %if.then.123, label %if.else.127

if.then.123:                                      ; preds = %if.else.120
  %72 = load i32, i32* %unordered_p.addr, align 4
  %tobool124 = icmp ne i32 %72, 0
  br i1 %tobool124, label %if.then.125, label %if.else.126

if.then.125:                                      ; preds = %if.then.123
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.174, i32 0, i32 0), i8** %retval
  br label %return

if.else.126:                                      ; preds = %if.then.123
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.175, i32 0, i32 0), i8** %retval
  br label %return

if.else.127:                                      ; preds = %if.else.120
  %73 = load i32, i32* %unordered_p.addr, align 4
  %tobool128 = icmp ne i32 %73, 0
  br i1 %tobool128, label %if.then.129, label %if.else.130

if.then.129:                                      ; preds = %if.else.127
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.176, i32 0, i32 0), i8** %retval
  br label %return

if.else.130:                                      ; preds = %if.else.127
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.177, i32 0, i32 0), i8** %retval
  br label %return

if.else.131:                                      ; preds = %land.lhs.true.106, %land.lhs.true.100, %land.lhs.true.98, %land.lhs.true.92, %land.lhs.true.86, %if.end.80
  %74 = load i32, i32* %eflags_p.addr, align 4
  %shl = shl i32 %74, 3
  store i32 %shl, i32* %mask, align 4
  %75 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx132 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %75, i64 1
  %76 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx132, align 8
  %77 = bitcast %struct.rtx_def* %76 to i32*
  %bf.load133 = load i32, i32* %77, align 8
  %bf.lshr134 = lshr i32 %bf.load133, 16
  %bf.clear135 = and i32 %bf.lshr134, 255
  %idxprom = sext i32 %bf.clear135 to i64
  %arrayidx136 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom
  %78 = load i32, i32* %arrayidx136, align 4
  %cmp137 = icmp eq i32 %78, 1
  %conv138 = zext i1 %cmp137 to i32
  %shl139 = shl i32 %conv138, 2
  %79 = load i32, i32* %mask, align 4
  %or140 = or i32 %79, %shl139
  store i32 %or140, i32* %mask, align 4
  %80 = load i32, i32* %unordered_p.addr, align 4
  %shl141 = shl i32 %80, 1
  %81 = load i32, i32* %mask, align 4
  %or142 = or i32 %81, %shl141
  store i32 %or142, i32* %mask, align 4
  %82 = load i32, i32* %stack_top_dies, align 4
  %83 = load i32, i32* %mask, align 4
  %or143 = or i32 %83, %82
  store i32 %or143, i32* %mask, align 4
  %84 = load i32, i32* %mask, align 4
  %cmp144 = icmp sge i32 %84, 24
  br i1 %cmp144, label %if.then.146, label %if.end.147

if.then.146:                                      ; preds = %if.else.131
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 6700, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__FUNCTION__.output_fp_compare, i32 0, i32 0)) #7
  unreachable

if.end.147:                                       ; preds = %if.else.131
  %85 = load i32, i32* %mask, align 4
  %idxprom148 = sext i32 %85 to i64
  %arrayidx149 = getelementptr inbounds [24 x i8*], [24 x i8*]* @output_fp_compare.alt, i32 0, i64 %idxprom148
  %86 = load i8*, i8** %arrayidx149, align 8
  store i8* %86, i8** %ret, align 8
  %87 = load i8*, i8** %ret, align 8
  %cmp150 = icmp eq i8* %87, null
  br i1 %cmp150, label %if.then.152, label %if.end.153

if.then.152:                                      ; preds = %if.end.147
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 6703, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__FUNCTION__.output_fp_compare, i32 0, i32 0)) #7
  unreachable

if.end.153:                                       ; preds = %if.end.147
  %88 = load i8*, i8** %ret, align 8
  store i8* %88, i8** %retval
  br label %return

return:                                           ; preds = %if.end.153, %if.else.130, %if.then.129, %if.else.126, %if.then.125, %if.end.119, %if.else.69, %if.then.68, %if.else, %if.then.65
  %89 = load i8*, i8** %retval
  ret i8* %89
}

; Function Attrs: nounwind uwtable
define void @ix86_output_addr_vec_elt(%struct._IO_FILE* %file, i32 %value) #1 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %value.addr = alloca i32, align 4
  %directive = alloca i8*, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  store i32 %value, i32* %value.addr, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i32 0, i32 0), i8** %directive, align 8
  %0 = load i32, i32* @target_flags, align 4
  %and = and i32 %0, 33554432
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i32 0, i32 0), i8** %directive, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %2 = load i8*, i8** %directive, align 8
  %3 = load i32, i32* %value.addr, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.192, i32 0, i32 0), i8* %2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.193, i32 0, i32 0), i32 %3)
  ret void
}

; Function Attrs: nounwind uwtable
define void @ix86_output_addr_diff_elt(%struct._IO_FILE* %file, i32 %value, i32 %rel) #1 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %value.addr = alloca i32, align 4
  %rel.addr = alloca i32, align 4
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  store i32 %value, i32* %value.addr, align 4
  store i32 %rel, i32* %rel.addr, align 4
  %0 = load i32, i32* @target_flags, align 4
  %and = and i32 %0, 33554432
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %2 = load i32, i32* %value.addr, align 4
  %3 = load i32, i32* %rel.addr, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.194, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.193, i32 0, i32 0), i32 %2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.193, i32 0, i32 0), i32 %3)
  br label %if.end

if.else:                                          ; preds = %entry
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %5 = load i32, i32* %value.addr, align 4
  call void (%struct._IO_FILE*, i8*, ...) @asm_fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.195, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.193, i32 0, i32 0), i32 %5)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

declare void @asm_fprintf(%struct._IO_FILE*, i8*, ...) #0

; Function Attrs: nounwind uwtable
define void @ix86_expand_clear(%struct.rtx_def* %dest) #1 {
entry:
  %dest.addr = alloca %struct.rtx_def*, align 8
  %tmp = alloca %struct.rtx_def*, align 8
  %clob = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %dest, %struct.rtx_def** %dest.addr, align 8
  %0 = load i32, i32* @reload_completed, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 6754, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__FUNCTION__.ix86_expand_clear, i32 0, i32 0)) #7
  unreachable

if.end:                                           ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %dest.addr, align 8
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load = load i32, i32* %2, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %idxprom = sext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom
  %3 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %3 to i32
  %cmp = icmp slt i32 %conv, 4
  br i1 %cmp, label %if.then.2, label %if.end.4

if.then.2:                                        ; preds = %if.end
  %4 = load %struct.rtx_def*, %struct.rtx_def** %dest.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx3 to i32*
  %5 = load i32, i32* %rtuint, align 4
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 %5)
  store %struct.rtx_def* %call, %struct.rtx_def** %dest.addr, align 8
  br label %if.end.4

if.end.4:                                         ; preds = %if.then.2, %if.end
  %6 = load %struct.rtx_def*, %struct.rtx_def** %dest.addr, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %6, %struct.rtx_def* %7)
  store %struct.rtx_def* %call5, %struct.rtx_def** %tmp, align 8
  %8 = load i32, i32* @reload_completed, align 4
  %tobool6 = icmp ne i32 %8, 0
  br i1 %tobool6, label %land.lhs.true, label %if.end.15

land.lhs.true:                                    ; preds = %if.end.4
  %9 = load i32, i32* @ix86_cpu, align 4
  %shl = shl i32 1, %9
  %and = and i32 16, %shl
  %tobool7 = icmp ne i32 %and, 0
  br i1 %tobool7, label %lor.lhs.false, label %if.then.9

lor.lhs.false:                                    ; preds = %land.lhs.true
  %10 = load i32, i32* @optimize_size, align 4
  %tobool8 = icmp ne i32 %10, 0
  br i1 %tobool8, label %if.then.9, label %if.end.15

if.then.9:                                        ; preds = %lor.lhs.false, %land.lhs.true
  %call11 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call11)
  store %struct.rtx_def* %call12, %struct.rtx_def** %clob, align 8
  %11 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %12 = load %struct.rtx_def*, %struct.rtx_def** %clob, align 8
  %call13 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %11, %struct.rtx_def* %12)
  %call14 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call13)
  store %struct.rtx_def* %call14, %struct.rtx_def** %tmp, align 8
  br label %if.end.15

if.end.15:                                        ; preds = %if.then.9, %lor.lhs.false, %if.end.4
  %13 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %call16 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %13)
  ret void
}

declare %struct.rtx_def* @gen_rtx_fmt_E(i32, i32, %struct.rtvec_def*) #0

; Function Attrs: nounwind uwtable
define void @ix86_expand_move(i32 %mode, %struct.rtx_def** %operands) #1 {
entry:
  %mode.addr = alloca i32, align 4
  %operands.addr = alloca %struct.rtx_def**, align 8
  %strict = alloca i32, align 4
  %insn = alloca %struct.rtx_def*, align 8
  %temp = alloca %struct.rtx_def*, align 8
  store i32 %mode, i32* %mode.addr, align 4
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  %0 = load i32, i32* @reload_in_progress, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %1 = load i32, i32* @reload_completed, align 4
  %tobool1 = icmp ne i32 %1, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %2 = phi i1 [ true, %entry ], [ %tobool1, %lor.rhs ]
  %lor.ext = zext i1 %2 to i32
  store i32 %lor.ext, i32* %strict, align 4
  %3 = load i32, i32* @flag_pic, align 4
  %tobool2 = icmp ne i32 %3, 0
  br i1 %tobool2, label %land.lhs.true, label %if.else.35

land.lhs.true:                                    ; preds = %lor.end
  %4 = load i32, i32* %mode.addr, align 4
  %5 = load i32, i32* @target_flags, align 4
  %and = and i32 %5, 33554432
  %tobool3 = icmp ne i32 %and, 0
  %cond = select i1 %tobool3, i32 5, i32 4
  %cmp = icmp eq i32 %4, %cond
  br i1 %cmp, label %land.lhs.true.4, label %if.else.35

land.lhs.true.4:                                  ; preds = %land.lhs.true
  %6 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %6, i64 1
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %8 = load i32, i32* @target_flags, align 4
  %and5 = and i32 %8, 33554432
  %tobool6 = icmp ne i32 %and5, 0
  %cond7 = select i1 %tobool6, i32 5, i32 4
  %call = call i32 @symbolic_operand(%struct.rtx_def* %7, i32 %cond7)
  %tobool8 = icmp ne i32 %call, 0
  br i1 %tobool8, label %if.then, label %if.else.35

if.then:                                          ; preds = %land.lhs.true.4
  %9 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx9 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %9, i64 0
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx9, align 8
  %11 = bitcast %struct.rtx_def* %10 to i32*
  %bf.load = load i32, i32* %11, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp10 = icmp eq i32 %bf.clear, 66
  br i1 %cmp10, label %if.then.11, label %if.else

if.then.11:                                       ; preds = %if.then
  %12 = load i32, i32* @target_flags, align 4
  %and12 = and i32 %12, 33554432
  %tobool13 = icmp ne i32 %and12, 0
  %cond14 = select i1 %tobool13, i32 5, i32 4
  %13 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx15 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %13, i64 1
  %14 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx15, align 8
  %call16 = call %struct.rtx_def* @force_reg(i32 %cond14, %struct.rtx_def* %14)
  %15 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx17 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %15, i64 1
  store %struct.rtx_def* %call16, %struct.rtx_def** %arrayidx17, align 8
  br label %if.end.34

if.else:                                          ; preds = %if.then
  %16 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx18 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %16, i64 0
  %17 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx18, align 8
  store %struct.rtx_def* %17, %struct.rtx_def** %temp, align 8
  %18 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %19 = bitcast %struct.rtx_def* %18 to i32*
  %bf.load19 = load i32, i32* %19, align 8
  %bf.clear20 = and i32 %bf.load19, 65535
  %cmp21 = icmp ne i32 %bf.clear20, 61
  br i1 %cmp21, label %if.then.22, label %if.end

if.then.22:                                       ; preds = %if.else
  %20 = load i32, i32* @target_flags, align 4
  %and23 = and i32 %20, 33554432
  %tobool24 = icmp ne i32 %and23, 0
  %cond25 = select i1 %tobool24, i32 5, i32 4
  %call26 = call %struct.rtx_def* @gen_reg_rtx(i32 %cond25)
  store %struct.rtx_def* %call26, %struct.rtx_def** %temp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.22, %if.else
  %21 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx27 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %21, i64 1
  %22 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx27, align 8
  %23 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %call28 = call %struct.rtx_def* @legitimize_pic_address(%struct.rtx_def* %22, %struct.rtx_def* %23)
  store %struct.rtx_def* %call28, %struct.rtx_def** %temp, align 8
  %24 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %25 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx29 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %25, i64 0
  %26 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx29, align 8
  %cmp30 = icmp eq %struct.rtx_def* %24, %26
  br i1 %cmp30, label %if.then.31, label %if.end.32

if.then.31:                                       ; preds = %if.end
  br label %return

if.end.32:                                        ; preds = %if.end
  %27 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %28 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx33 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %28, i64 1
  store %struct.rtx_def* %27, %struct.rtx_def** %arrayidx33, align 8
  br label %if.end.34

if.end.34:                                        ; preds = %if.end.32, %if.then.11
  br label %if.end.145

if.else.35:                                       ; preds = %land.lhs.true.4, %land.lhs.true, %lor.end
  %29 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx36 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %29, i64 0
  %30 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx36, align 8
  %31 = bitcast %struct.rtx_def* %30 to i32*
  %bf.load37 = load i32, i32* %31, align 8
  %bf.clear38 = and i32 %bf.load37, 65535
  %cmp39 = icmp eq i32 %bf.clear38, 66
  br i1 %cmp39, label %land.lhs.true.40, label %if.end.69

land.lhs.true.40:                                 ; preds = %if.else.35
  %32 = load i32, i32* @target_flags, align 4
  %and41 = and i32 %32, 33554432
  %tobool42 = icmp ne i32 %and41, 0
  br i1 %tobool42, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true.40
  %33 = load i32, i32* %mode.addr, align 4
  %idxprom = sext i32 %33 to i64
  %arrayidx43 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom
  %34 = load i8, i8* %arrayidx43, align 1
  %conv = zext i8 %34 to i32
  %add = add nsw i32 %conv, 7
  %and44 = and i32 %add, -8
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true.40
  %35 = load i32, i32* %mode.addr, align 4
  %idxprom45 = sext i32 %35 to i64
  %arrayidx46 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom45
  %36 = load i8, i8* %arrayidx46, align 1
  %conv47 = zext i8 %36 to i32
  %add48 = add nsw i32 %conv47, 1
  %and49 = and i32 %add48, -2
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond50 = phi i32 [ %and44, %cond.true ], [ %and49, %cond.false ]
  %37 = load i32, i32* %mode.addr, align 4
  %idxprom51 = sext i32 %37 to i64
  %arrayidx52 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom51
  %38 = load i8, i8* %arrayidx52, align 1
  %conv53 = zext i8 %38 to i32
  %cmp54 = icmp ne i32 %cond50, %conv53
  br i1 %cmp54, label %land.lhs.true.59, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end
  %39 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx56 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %39, i64 0
  %40 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx56, align 8
  %41 = load i32, i32* %mode.addr, align 4
  %call57 = call i32 @push_operand(%struct.rtx_def* %40, i32 %41)
  %tobool58 = icmp ne i32 %call57, 0
  br i1 %tobool58, label %if.end.69, label %land.lhs.true.59

land.lhs.true.59:                                 ; preds = %lor.lhs.false, %cond.end
  %42 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx60 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %42, i64 1
  %43 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx60, align 8
  %44 = bitcast %struct.rtx_def* %43 to i32*
  %bf.load61 = load i32, i32* %44, align 8
  %bf.clear62 = and i32 %bf.load61, 65535
  %cmp63 = icmp eq i32 %bf.clear62, 66
  br i1 %cmp63, label %if.then.65, label %if.end.69

if.then.65:                                       ; preds = %land.lhs.true.59
  %45 = load i32, i32* %mode.addr, align 4
  %46 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx66 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %46, i64 1
  %47 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx66, align 8
  %call67 = call %struct.rtx_def* @force_reg(i32 %45, %struct.rtx_def* %47)
  %48 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx68 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %48, i64 1
  store %struct.rtx_def* %call67, %struct.rtx_def** %arrayidx68, align 8
  br label %if.end.69

if.end.69:                                        ; preds = %if.then.65, %land.lhs.true.59, %lor.lhs.false, %if.else.35
  %49 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx70 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %49, i64 0
  %50 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx70, align 8
  %51 = load i32, i32* %mode.addr, align 4
  %call71 = call i32 @push_operand(%struct.rtx_def* %50, i32 %51)
  %tobool72 = icmp ne i32 %call71, 0
  br i1 %tobool72, label %land.lhs.true.73, label %if.end.81

land.lhs.true.73:                                 ; preds = %if.end.69
  %52 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx74 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %52, i64 1
  %53 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx74, align 8
  %54 = load i32, i32* %mode.addr, align 4
  %call75 = call i32 @general_no_elim_operand(%struct.rtx_def* %53, i32 %54)
  %tobool76 = icmp ne i32 %call75, 0
  br i1 %tobool76, label %if.end.81, label %if.then.77

if.then.77:                                       ; preds = %land.lhs.true.73
  %55 = load i32, i32* %mode.addr, align 4
  %56 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx78 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %56, i64 1
  %57 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx78, align 8
  %call79 = call %struct.rtx_def* @copy_to_mode_reg(i32 %55, %struct.rtx_def* %57)
  %58 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx80 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %58, i64 1
  store %struct.rtx_def* %call79, %struct.rtx_def** %arrayidx80, align 8
  br label %if.end.81

if.end.81:                                        ; preds = %if.then.77, %land.lhs.true.73, %if.end.69
  %59 = load i32, i32* @target_flags, align 4
  %and82 = and i32 %59, 33554432
  %tobool83 = icmp ne i32 %and82, 0
  br i1 %tobool83, label %land.lhs.true.84, label %if.end.109

land.lhs.true.84:                                 ; preds = %if.end.81
  %60 = load i32, i32* %mode.addr, align 4
  %cmp85 = icmp eq i32 %60, 5
  br i1 %cmp85, label %land.lhs.true.87, label %if.end.109

land.lhs.true.87:                                 ; preds = %land.lhs.true.84
  %61 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx88 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %61, i64 1
  %62 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx88, align 8
  %63 = load i32, i32* %mode.addr, align 4
  %call89 = call i32 @immediate_operand(%struct.rtx_def* %62, i32 %63)
  %tobool90 = icmp ne i32 %call89, 0
  br i1 %tobool90, label %land.lhs.true.91, label %if.end.109

land.lhs.true.91:                                 ; preds = %land.lhs.true.87
  %64 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx92 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %64, i64 1
  %65 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx92, align 8
  %call93 = call i32 @x86_64_zero_extended_value(%struct.rtx_def* %65)
  %tobool94 = icmp ne i32 %call93, 0
  br i1 %tobool94, label %if.end.109, label %land.lhs.true.95

land.lhs.true.95:                                 ; preds = %land.lhs.true.91
  %66 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx96 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %66, i64 0
  %67 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx96, align 8
  %68 = load i32, i32* %mode.addr, align 4
  %call97 = call i32 @register_operand(%struct.rtx_def* %67, i32 %68)
  %tobool98 = icmp ne i32 %call97, 0
  br i1 %tobool98, label %if.end.109, label %land.lhs.true.99

land.lhs.true.99:                                 ; preds = %land.lhs.true.95
  %69 = load i32, i32* @optimize, align 4
  %tobool100 = icmp ne i32 %69, 0
  br i1 %tobool100, label %land.lhs.true.101, label %if.end.109

land.lhs.true.101:                                ; preds = %land.lhs.true.99
  %70 = load i32, i32* @reload_completed, align 4
  %tobool102 = icmp ne i32 %70, 0
  br i1 %tobool102, label %if.end.109, label %land.lhs.true.103

land.lhs.true.103:                                ; preds = %land.lhs.true.101
  %71 = load i32, i32* @reload_in_progress, align 4
  %tobool104 = icmp ne i32 %71, 0
  br i1 %tobool104, label %if.end.109, label %if.then.105

if.then.105:                                      ; preds = %land.lhs.true.103
  %72 = load i32, i32* %mode.addr, align 4
  %73 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx106 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %73, i64 1
  %74 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx106, align 8
  %call107 = call %struct.rtx_def* @copy_to_mode_reg(i32 %72, %struct.rtx_def* %74)
  %75 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx108 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %75, i64 1
  store %struct.rtx_def* %call107, %struct.rtx_def** %arrayidx108, align 8
  br label %if.end.109

if.end.109:                                       ; preds = %if.then.105, %land.lhs.true.103, %land.lhs.true.101, %land.lhs.true.99, %land.lhs.true.95, %land.lhs.true.91, %land.lhs.true.87, %land.lhs.true.84, %if.end.81
  %76 = load i32, i32* %mode.addr, align 4
  %idxprom110 = sext i32 %76 to i64
  %arrayidx111 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom110
  %77 = load i32, i32* %arrayidx111, align 4
  %cmp112 = icmp eq i32 %77, 2
  br i1 %cmp112, label %if.then.124, label %lor.lhs.false.114

lor.lhs.false.114:                                ; preds = %if.end.109
  %78 = load i32, i32* %mode.addr, align 4
  %idxprom115 = sext i32 %78 to i64
  %arrayidx116 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom115
  %79 = load i32, i32* %arrayidx116, align 4
  %cmp117 = icmp eq i32 %79, 6
  br i1 %cmp117, label %if.then.124, label %lor.lhs.false.119

lor.lhs.false.119:                                ; preds = %lor.lhs.false.114
  %80 = load i32, i32* %mode.addr, align 4
  %idxprom120 = sext i32 %80 to i64
  %arrayidx121 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom120
  %81 = load i32, i32* %arrayidx121, align 4
  %cmp122 = icmp eq i32 %81, 8
  br i1 %cmp122, label %if.then.124, label %if.end.144

if.then.124:                                      ; preds = %lor.lhs.false.119, %lor.lhs.false.114, %if.end.109
  %82 = load i32, i32* %strict, align 4
  %tobool125 = icmp ne i32 %82, 0
  br i1 %tobool125, label %if.then.126, label %if.else.127

if.then.126:                                      ; preds = %if.then.124
  br label %if.end.143

if.else.127:                                      ; preds = %if.then.124
  %83 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx128 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %83, i64 1
  %84 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx128, align 8
  %85 = bitcast %struct.rtx_def* %84 to i32*
  %bf.load129 = load i32, i32* %85, align 8
  %bf.clear130 = and i32 %bf.load129, 65535
  %cmp131 = icmp eq i32 %bf.clear130, 55
  br i1 %cmp131, label %land.lhs.true.133, label %if.end.142

land.lhs.true.133:                                ; preds = %if.else.127
  %86 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx134 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %86, i64 0
  %87 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx134, align 8
  %88 = load i32, i32* %mode.addr, align 4
  %call135 = call i32 @register_operand(%struct.rtx_def* %87, i32 %88)
  %tobool136 = icmp ne i32 %call135, 0
  br i1 %tobool136, label %if.then.137, label %if.end.142

if.then.137:                                      ; preds = %land.lhs.true.133
  %89 = load i32, i32* %mode.addr, align 4
  %90 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx138 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %90, i64 1
  %91 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx138, align 8
  %call139 = call %struct.rtx_def* @force_const_mem(i32 %89, %struct.rtx_def* %91)
  %call140 = call %struct.rtx_def* @validize_mem(%struct.rtx_def* %call139)
  %92 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx141 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %92, i64 1
  store %struct.rtx_def* %call140, %struct.rtx_def** %arrayidx141, align 8
  br label %if.end.142

if.end.142:                                       ; preds = %if.then.137, %land.lhs.true.133, %if.else.127
  br label %if.end.143

if.end.143:                                       ; preds = %if.end.142, %if.then.126
  br label %if.end.144

if.end.144:                                       ; preds = %if.end.143, %lor.lhs.false.119
  br label %if.end.145

if.end.145:                                       ; preds = %if.end.144, %if.end.34
  %93 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx146 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %93, i64 0
  %94 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx146, align 8
  %95 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx147 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %95, i64 1
  %96 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx147, align 8
  %call148 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %94, %struct.rtx_def* %96)
  store %struct.rtx_def* %call148, %struct.rtx_def** %insn, align 8
  %97 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %call149 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %97)
  br label %return

return:                                           ; preds = %if.end.145, %if.then.31
  ret void
}

declare i32 @push_operand(%struct.rtx_def*, i32) #0

declare %struct.rtx_def* @copy_to_mode_reg(i32, %struct.rtx_def*) #0

declare %struct.rtx_def* @validize_mem(%struct.rtx_def*) #0

declare %struct.rtx_def* @force_const_mem(i32, %struct.rtx_def*) #0

; Function Attrs: nounwind uwtable
define void @ix86_expand_vector_move(i32 %mode, %struct.rtx_def** %operands) #1 {
entry:
  %mode.addr = alloca i32, align 4
  %operands.addr = alloca %struct.rtx_def**, align 8
  %addr = alloca %struct.rtx_def*, align 8
  %temp = alloca %struct.rtx_def*, align 8
  store i32 %mode, i32* %mode.addr, align 4
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  %0 = load i32, i32* @reload_in_progress, align 4
  %1 = load i32, i32* @reload_completed, align 4
  %or = or i32 %0, %1
  %cmp = icmp eq i32 %or, 0
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 0
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %4 = load i32, i32* %mode.addr, align 4
  %call = call i32 @register_operand(%struct.rtx_def* %3, i32 %4)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %land.lhs.true.1, label %if.end

land.lhs.true.1:                                  ; preds = %land.lhs.true
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 1
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  %7 = bitcast %struct.rtx_def* %6 to i32*
  %bf.load = load i32, i32* %7, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp3 = icmp eq i32 %bf.clear, 67
  br i1 %cmp3, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.1
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %8, i64 1
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  %10 = bitcast %struct.rtx_def* %9 to i32*
  %bf.load5 = load i32, i32* %10, align 8
  %bf.clear6 = and i32 %bf.load5, 65535
  %cmp7 = icmp eq i32 %bf.clear6, 68
  br i1 %cmp7, label %if.then, label %lor.lhs.false.8

lor.lhs.false.8:                                  ; preds = %lor.lhs.false
  %11 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx9 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %11, i64 1
  %12 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx9, align 8
  %13 = bitcast %struct.rtx_def* %12 to i32*
  %bf.load10 = load i32, i32* %13, align 8
  %bf.clear11 = and i32 %bf.load10, 65535
  %cmp12 = icmp eq i32 %bf.clear11, 54
  br i1 %cmp12, label %if.then, label %lor.lhs.false.13

lor.lhs.false.13:                                 ; preds = %lor.lhs.false.8
  %14 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx14 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %14, i64 1
  %15 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx14, align 8
  %16 = bitcast %struct.rtx_def* %15 to i32*
  %bf.load15 = load i32, i32* %16, align 8
  %bf.clear16 = and i32 %bf.load15, 65535
  %cmp17 = icmp eq i32 %bf.clear16, 55
  br i1 %cmp17, label %if.then, label %lor.lhs.false.18

lor.lhs.false.18:                                 ; preds = %lor.lhs.false.13
  %17 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx19 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %17, i64 1
  %18 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx19, align 8
  %19 = bitcast %struct.rtx_def* %18 to i32*
  %bf.load20 = load i32, i32* %19, align 8
  %bf.clear21 = and i32 %bf.load20, 65535
  %cmp22 = icmp eq i32 %bf.clear21, 58
  br i1 %cmp22, label %if.then, label %lor.lhs.false.23

lor.lhs.false.23:                                 ; preds = %lor.lhs.false.18
  %20 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx24 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %20, i64 1
  %21 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx24, align 8
  %22 = bitcast %struct.rtx_def* %21 to i32*
  %bf.load25 = load i32, i32* %22, align 8
  %bf.clear26 = and i32 %bf.load25, 65535
  %cmp27 = icmp eq i32 %bf.clear26, 134
  br i1 %cmp27, label %if.then, label %lor.lhs.false.28

lor.lhs.false.28:                                 ; preds = %lor.lhs.false.23
  %23 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx29 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %23, i64 1
  %24 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx29, align 8
  %25 = bitcast %struct.rtx_def* %24 to i32*
  %bf.load30 = load i32, i32* %25, align 8
  %bf.clear31 = and i32 %bf.load30, 65535
  %cmp32 = icmp eq i32 %bf.clear31, 56
  br i1 %cmp32, label %if.then, label %lor.lhs.false.33

lor.lhs.false.33:                                 ; preds = %lor.lhs.false.28
  %26 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx34 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %26, i64 1
  %27 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx34, align 8
  %28 = bitcast %struct.rtx_def* %27 to i32*
  %bf.load35 = load i32, i32* %28, align 8
  %bf.clear36 = and i32 %bf.load35, 65535
  %cmp37 = icmp eq i32 %bf.clear36, 140
  br i1 %cmp37, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false.33, %lor.lhs.false.28, %lor.lhs.false.23, %lor.lhs.false.18, %lor.lhs.false.13, %lor.lhs.false.8, %lor.lhs.false, %land.lhs.true.1
  %29 = load i32, i32* @target_flags, align 4
  %and = and i32 %29, 33554432
  %tobool38 = icmp ne i32 %and, 0
  %cond = select i1 %tobool38, i32 5, i32 4
  %call39 = call %struct.rtx_def* @gen_reg_rtx(i32 %cond)
  store %struct.rtx_def* %call39, %struct.rtx_def** %addr, align 8
  %30 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %31 = load i32, i32* %mode.addr, align 4
  %32 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx40 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %32, i64 1
  %33 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx40, align 8
  %call41 = call %struct.rtx_def* @force_const_mem(i32 %31, %struct.rtx_def* %33)
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %call41, i32 0, i32 1
  %arrayidx42 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx42 to %struct.rtx_def**
  %34 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %call43 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %30, %struct.rtx_def* %34)
  %35 = load i32, i32* %mode.addr, align 4
  %36 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %call44 = call %struct.rtx_def* @gen_rtx_MEM(i32 %35, %struct.rtx_def* %36)
  %37 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx45 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %37, i64 1
  store %struct.rtx_def* %call44, %struct.rtx_def** %arrayidx45, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false.33, %land.lhs.true, %entry
  %38 = load i32, i32* @reload_in_progress, align 4
  %39 = load i32, i32* @reload_completed, align 4
  %or46 = or i32 %38, %39
  %cmp47 = icmp eq i32 %or46, 0
  br i1 %cmp47, label %land.lhs.true.48, label %if.end.68

land.lhs.true.48:                                 ; preds = %if.end
  %40 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx49 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %40, i64 0
  %41 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx49, align 8
  %42 = load i32, i32* %mode.addr, align 4
  %call50 = call i32 @register_operand(%struct.rtx_def* %41, i32 %42)
  %tobool51 = icmp ne i32 %call50, 0
  br i1 %tobool51, label %if.end.68, label %land.lhs.true.52

land.lhs.true.52:                                 ; preds = %land.lhs.true.48
  %43 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx53 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %43, i64 1
  %44 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx53, align 8
  %45 = load i32, i32* %mode.addr, align 4
  %call54 = call i32 @register_operand(%struct.rtx_def* %44, i32 %45)
  %tobool55 = icmp ne i32 %call54, 0
  br i1 %tobool55, label %if.end.68, label %land.lhs.true.56

land.lhs.true.56:                                 ; preds = %land.lhs.true.52
  %46 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx57 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %46, i64 1
  %47 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx57, align 8
  %48 = load i32, i32* %mode.addr, align 4
  %idxprom = sext i32 %48 to i64
  %arrayidx58 = getelementptr inbounds [59 x %struct.rtx_def*], [59 x %struct.rtx_def*]* getelementptr inbounds ([3 x [59 x %struct.rtx_def*]], [3 x [59 x %struct.rtx_def*]]* @const_tiny_rtx, i32 0, i64 0), i32 0, i64 %idxprom
  %49 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx58, align 8
  %cmp59 = icmp ne %struct.rtx_def* %47, %49
  br i1 %cmp59, label %if.then.60, label %if.end.68

if.then.60:                                       ; preds = %land.lhs.true.56
  %50 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx61 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %50, i64 1
  %51 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx61, align 8
  %52 = bitcast %struct.rtx_def* %51 to i32*
  %bf.load62 = load i32, i32* %52, align 8
  %bf.lshr = lshr i32 %bf.load62, 16
  %bf.clear63 = and i32 %bf.lshr, 255
  %53 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx64 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %53, i64 1
  %54 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx64, align 8
  %call65 = call %struct.rtx_def* @force_reg(i32 %bf.clear63, %struct.rtx_def* %54)
  store %struct.rtx_def* %call65, %struct.rtx_def** %temp, align 8
  %55 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx66 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %55, i64 0
  %56 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx66, align 8
  %57 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %call67 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %56, %struct.rtx_def* %57)
  br label %return

if.end.68:                                        ; preds = %land.lhs.true.56, %land.lhs.true.52, %land.lhs.true.48, %if.end
  %58 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx69 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %58, i64 0
  %59 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx69, align 8
  %60 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx70 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %60, i64 1
  %61 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx70, align 8
  %call71 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %59, %struct.rtx_def* %61)
  %call72 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call71)
  br label %return

return:                                           ; preds = %if.end.68, %if.then.60
  ret void
}

; Function Attrs: nounwind uwtable
define void @ix86_expand_binary_operator(i32 %code, i32 %mode, %struct.rtx_def** %operands) #1 {
entry:
  %code.addr = alloca i32, align 4
  %mode.addr = alloca i32, align 4
  %operands.addr = alloca %struct.rtx_def**, align 8
  %matching_memory = alloca i32, align 4
  %src1 = alloca %struct.rtx_def*, align 8
  %src2 = alloca %struct.rtx_def*, align 8
  %dst = alloca %struct.rtx_def*, align 8
  %op = alloca %struct.rtx_def*, align 8
  %clob = alloca %struct.rtx_def*, align 8
  %temp = alloca %struct.rtx_def*, align 8
  store i32 %code, i32* %code.addr, align 4
  store i32 %mode, i32* %mode.addr, align 4
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %dst, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %src1, align 8
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 2
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %src2, align 8
  %6 = load i32, i32* %code.addr, align 4
  %idxprom = sext i32 %6 to i64
  %arrayidx3 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom
  %7 = load i8, i8* %arrayidx3, align 1
  %conv = sext i8 %7 to i32
  %cmp = icmp eq i32 %conv, 99
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %8 = load %struct.rtx_def*, %struct.rtx_def** %dst, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %src2, align 8
  %call = call i32 @rtx_equal_p(%struct.rtx_def* %8, %struct.rtx_def* %9)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %10 = load %struct.rtx_def*, %struct.rtx_def** %src1, align 8
  %11 = load i32, i32* %mode.addr, align 4
  %call5 = call i32 @immediate_operand(%struct.rtx_def* %10, i32 %11)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  %12 = load %struct.rtx_def*, %struct.rtx_def** %src1, align 8
  store %struct.rtx_def* %12, %struct.rtx_def** %temp, align 8
  %13 = load %struct.rtx_def*, %struct.rtx_def** %src2, align 8
  store %struct.rtx_def* %13, %struct.rtx_def** %src1, align 8
  %14 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  store %struct.rtx_def* %14, %struct.rtx_def** %src2, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false, %entry
  store i32 0, i32* %matching_memory, align 4
  %15 = load %struct.rtx_def*, %struct.rtx_def** %dst, align 8
  %16 = bitcast %struct.rtx_def* %15 to i32*
  %bf.load = load i32, i32* %16, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp7 = icmp eq i32 %bf.clear, 66
  br i1 %cmp7, label %if.then.9, label %if.end.26

if.then.9:                                        ; preds = %if.end
  %17 = load %struct.rtx_def*, %struct.rtx_def** %dst, align 8
  %18 = load %struct.rtx_def*, %struct.rtx_def** %src1, align 8
  %call10 = call i32 @rtx_equal_p(%struct.rtx_def* %17, %struct.rtx_def* %18)
  %tobool11 = icmp ne i32 %call10, 0
  br i1 %tobool11, label %if.then.12, label %if.else

if.then.12:                                       ; preds = %if.then.9
  store i32 1, i32* %matching_memory, align 4
  br label %if.end.25

if.else:                                          ; preds = %if.then.9
  %19 = load i32, i32* %code.addr, align 4
  %idxprom13 = sext i32 %19 to i64
  %arrayidx14 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom13
  %20 = load i8, i8* %arrayidx14, align 1
  %conv15 = sext i8 %20 to i32
  %cmp16 = icmp eq i32 %conv15, 99
  br i1 %cmp16, label %land.lhs.true.18, label %if.else.22

land.lhs.true.18:                                 ; preds = %if.else
  %21 = load %struct.rtx_def*, %struct.rtx_def** %dst, align 8
  %22 = load %struct.rtx_def*, %struct.rtx_def** %src2, align 8
  %call19 = call i32 @rtx_equal_p(%struct.rtx_def* %21, %struct.rtx_def* %22)
  %tobool20 = icmp ne i32 %call19, 0
  br i1 %tobool20, label %if.then.21, label %if.else.22

if.then.21:                                       ; preds = %land.lhs.true.18
  store i32 2, i32* %matching_memory, align 4
  br label %if.end.24

if.else.22:                                       ; preds = %land.lhs.true.18, %if.else
  %23 = load i32, i32* %mode.addr, align 4
  %call23 = call %struct.rtx_def* @gen_reg_rtx(i32 %23)
  store %struct.rtx_def* %call23, %struct.rtx_def** %dst, align 8
  br label %if.end.24

if.end.24:                                        ; preds = %if.else.22, %if.then.21
  br label %if.end.25

if.end.25:                                        ; preds = %if.end.24, %if.then.12
  br label %if.end.26

if.end.26:                                        ; preds = %if.end.25, %if.end
  %24 = load %struct.rtx_def*, %struct.rtx_def** %src1, align 8
  %25 = bitcast %struct.rtx_def* %24 to i32*
  %bf.load27 = load i32, i32* %25, align 8
  %bf.clear28 = and i32 %bf.load27, 65535
  %cmp29 = icmp eq i32 %bf.clear28, 66
  br i1 %cmp29, label %land.lhs.true.31, label %if.end.44

land.lhs.true.31:                                 ; preds = %if.end.26
  %26 = load %struct.rtx_def*, %struct.rtx_def** %src2, align 8
  %27 = bitcast %struct.rtx_def* %26 to i32*
  %bf.load32 = load i32, i32* %27, align 8
  %bf.clear33 = and i32 %bf.load32, 65535
  %cmp34 = icmp eq i32 %bf.clear33, 66
  br i1 %cmp34, label %if.then.36, label %if.end.44

if.then.36:                                       ; preds = %land.lhs.true.31
  %28 = load i32, i32* %matching_memory, align 4
  %cmp37 = icmp ne i32 %28, 2
  br i1 %cmp37, label %if.then.39, label %if.else.41

if.then.39:                                       ; preds = %if.then.36
  %29 = load i32, i32* %mode.addr, align 4
  %30 = load %struct.rtx_def*, %struct.rtx_def** %src2, align 8
  %call40 = call %struct.rtx_def* @force_reg(i32 %29, %struct.rtx_def* %30)
  store %struct.rtx_def* %call40, %struct.rtx_def** %src2, align 8
  br label %if.end.43

if.else.41:                                       ; preds = %if.then.36
  %31 = load i32, i32* %mode.addr, align 4
  %32 = load %struct.rtx_def*, %struct.rtx_def** %src1, align 8
  %call42 = call %struct.rtx_def* @force_reg(i32 %31, %struct.rtx_def* %32)
  store %struct.rtx_def* %call42, %struct.rtx_def** %src1, align 8
  br label %if.end.43

if.end.43:                                        ; preds = %if.else.41, %if.then.39
  br label %if.end.44

if.end.44:                                        ; preds = %if.end.43, %land.lhs.true.31, %if.end.26
  %33 = load %struct.rtx_def*, %struct.rtx_def** %src1, align 8
  %34 = bitcast %struct.rtx_def* %33 to i32*
  %bf.load45 = load i32, i32* %34, align 8
  %bf.clear46 = and i32 %bf.load45, 65535
  %cmp47 = icmp eq i32 %bf.clear46, 67
  br i1 %cmp47, label %land.lhs.true.91, label %lor.lhs.false.49

lor.lhs.false.49:                                 ; preds = %if.end.44
  %35 = load %struct.rtx_def*, %struct.rtx_def** %src1, align 8
  %36 = bitcast %struct.rtx_def* %35 to i32*
  %bf.load50 = load i32, i32* %36, align 8
  %bf.clear51 = and i32 %bf.load50, 65535
  %cmp52 = icmp eq i32 %bf.clear51, 68
  br i1 %cmp52, label %land.lhs.true.91, label %lor.lhs.false.54

lor.lhs.false.54:                                 ; preds = %lor.lhs.false.49
  %37 = load %struct.rtx_def*, %struct.rtx_def** %src1, align 8
  %38 = bitcast %struct.rtx_def* %37 to i32*
  %bf.load55 = load i32, i32* %38, align 8
  %bf.clear56 = and i32 %bf.load55, 65535
  %cmp57 = icmp eq i32 %bf.clear56, 54
  br i1 %cmp57, label %land.lhs.true.91, label %lor.lhs.false.59

lor.lhs.false.59:                                 ; preds = %lor.lhs.false.54
  %39 = load %struct.rtx_def*, %struct.rtx_def** %src1, align 8
  %40 = bitcast %struct.rtx_def* %39 to i32*
  %bf.load60 = load i32, i32* %40, align 8
  %bf.clear61 = and i32 %bf.load60, 65535
  %cmp62 = icmp eq i32 %bf.clear61, 55
  br i1 %cmp62, label %land.lhs.true.91, label %lor.lhs.false.64

lor.lhs.false.64:                                 ; preds = %lor.lhs.false.59
  %41 = load %struct.rtx_def*, %struct.rtx_def** %src1, align 8
  %42 = bitcast %struct.rtx_def* %41 to i32*
  %bf.load65 = load i32, i32* %42, align 8
  %bf.clear66 = and i32 %bf.load65, 65535
  %cmp67 = icmp eq i32 %bf.clear66, 58
  br i1 %cmp67, label %land.lhs.true.91, label %lor.lhs.false.69

lor.lhs.false.69:                                 ; preds = %lor.lhs.false.64
  %43 = load %struct.rtx_def*, %struct.rtx_def** %src1, align 8
  %44 = bitcast %struct.rtx_def* %43 to i32*
  %bf.load70 = load i32, i32* %44, align 8
  %bf.clear71 = and i32 %bf.load70, 65535
  %cmp72 = icmp eq i32 %bf.clear71, 134
  br i1 %cmp72, label %land.lhs.true.91, label %lor.lhs.false.74

lor.lhs.false.74:                                 ; preds = %lor.lhs.false.69
  %45 = load %struct.rtx_def*, %struct.rtx_def** %src1, align 8
  %46 = bitcast %struct.rtx_def* %45 to i32*
  %bf.load75 = load i32, i32* %46, align 8
  %bf.clear76 = and i32 %bf.load75, 65535
  %cmp77 = icmp eq i32 %bf.clear76, 56
  br i1 %cmp77, label %land.lhs.true.91, label %lor.lhs.false.79

lor.lhs.false.79:                                 ; preds = %lor.lhs.false.74
  %47 = load %struct.rtx_def*, %struct.rtx_def** %src1, align 8
  %48 = bitcast %struct.rtx_def* %47 to i32*
  %bf.load80 = load i32, i32* %48, align 8
  %bf.clear81 = and i32 %bf.load80, 65535
  %cmp82 = icmp eq i32 %bf.clear81, 140
  br i1 %cmp82, label %land.lhs.true.91, label %lor.lhs.false.84

lor.lhs.false.84:                                 ; preds = %lor.lhs.false.79
  %49 = load i32, i32* %matching_memory, align 4
  %tobool85 = icmp ne i32 %49, 0
  br i1 %tobool85, label %if.end.99, label %land.lhs.true.86

land.lhs.true.86:                                 ; preds = %lor.lhs.false.84
  %50 = load %struct.rtx_def*, %struct.rtx_def** %src1, align 8
  %51 = bitcast %struct.rtx_def* %50 to i32*
  %bf.load87 = load i32, i32* %51, align 8
  %bf.clear88 = and i32 %bf.load87, 65535
  %cmp89 = icmp eq i32 %bf.clear88, 66
  br i1 %cmp89, label %land.lhs.true.91, label %if.end.99

land.lhs.true.91:                                 ; preds = %land.lhs.true.86, %lor.lhs.false.79, %lor.lhs.false.74, %lor.lhs.false.69, %lor.lhs.false.64, %lor.lhs.false.59, %lor.lhs.false.54, %lor.lhs.false.49, %if.end.44
  %52 = load i32, i32* %code.addr, align 4
  %idxprom92 = sext i32 %52 to i64
  %arrayidx93 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom92
  %53 = load i8, i8* %arrayidx93, align 1
  %conv94 = sext i8 %53 to i32
  %cmp95 = icmp ne i32 %conv94, 99
  br i1 %cmp95, label %if.then.97, label %if.end.99

if.then.97:                                       ; preds = %land.lhs.true.91
  %54 = load i32, i32* %mode.addr, align 4
  %55 = load %struct.rtx_def*, %struct.rtx_def** %src1, align 8
  %call98 = call %struct.rtx_def* @force_reg(i32 %54, %struct.rtx_def* %55)
  store %struct.rtx_def* %call98, %struct.rtx_def** %src1, align 8
  br label %if.end.99

if.end.99:                                        ; preds = %if.then.97, %land.lhs.true.91, %land.lhs.true.86, %lor.lhs.false.84
  %56 = load i32, i32* @optimize, align 4
  %tobool100 = icmp ne i32 %56, 0
  br i1 %tobool100, label %land.lhs.true.101, label %if.end.125

land.lhs.true.101:                                ; preds = %if.end.99
  %57 = load i32, i32* @no_new_pseudos, align 4
  %tobool102 = icmp ne i32 %57, 0
  br i1 %tobool102, label %if.end.125, label %if.then.103

if.then.103:                                      ; preds = %land.lhs.true.101
  %58 = load %struct.rtx_def*, %struct.rtx_def** %dst, align 8
  %59 = bitcast %struct.rtx_def* %58 to i32*
  %bf.load104 = load i32, i32* %59, align 8
  %bf.clear105 = and i32 %bf.load104, 65535
  %cmp106 = icmp eq i32 %bf.clear105, 66
  br i1 %cmp106, label %if.then.108, label %if.end.110

if.then.108:                                      ; preds = %if.then.103
  %60 = load i32, i32* %mode.addr, align 4
  %call109 = call %struct.rtx_def* @gen_reg_rtx(i32 %60)
  store %struct.rtx_def* %call109, %struct.rtx_def** %dst, align 8
  br label %if.end.110

if.end.110:                                       ; preds = %if.then.108, %if.then.103
  %61 = load %struct.rtx_def*, %struct.rtx_def** %src1, align 8
  %62 = bitcast %struct.rtx_def* %61 to i32*
  %bf.load111 = load i32, i32* %62, align 8
  %bf.clear112 = and i32 %bf.load111, 65535
  %cmp113 = icmp eq i32 %bf.clear112, 66
  br i1 %cmp113, label %if.then.115, label %if.end.117

if.then.115:                                      ; preds = %if.end.110
  %63 = load i32, i32* %mode.addr, align 4
  %64 = load %struct.rtx_def*, %struct.rtx_def** %src1, align 8
  %call116 = call %struct.rtx_def* @force_reg(i32 %63, %struct.rtx_def* %64)
  store %struct.rtx_def* %call116, %struct.rtx_def** %src1, align 8
  br label %if.end.117

if.end.117:                                       ; preds = %if.then.115, %if.end.110
  %65 = load %struct.rtx_def*, %struct.rtx_def** %src2, align 8
  %66 = bitcast %struct.rtx_def* %65 to i32*
  %bf.load118 = load i32, i32* %66, align 8
  %bf.clear119 = and i32 %bf.load118, 65535
  %cmp120 = icmp eq i32 %bf.clear119, 66
  br i1 %cmp120, label %if.then.122, label %if.end.124

if.then.122:                                      ; preds = %if.end.117
  %67 = load i32, i32* %mode.addr, align 4
  %68 = load %struct.rtx_def*, %struct.rtx_def** %src2, align 8
  %call123 = call %struct.rtx_def* @force_reg(i32 %67, %struct.rtx_def* %68)
  store %struct.rtx_def* %call123, %struct.rtx_def** %src2, align 8
  br label %if.end.124

if.end.124:                                       ; preds = %if.then.122, %if.end.117
  br label %if.end.125

if.end.125:                                       ; preds = %if.end.124, %land.lhs.true.101, %if.end.99
  %69 = load %struct.rtx_def*, %struct.rtx_def** %dst, align 8
  %70 = load i32, i32* %code.addr, align 4
  %71 = load i32, i32* %mode.addr, align 4
  %72 = load %struct.rtx_def*, %struct.rtx_def** %src1, align 8
  %73 = load %struct.rtx_def*, %struct.rtx_def** %src2, align 8
  %call126 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 %70, i32 %71, %struct.rtx_def* %72, %struct.rtx_def* %73)
  %call127 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %69, %struct.rtx_def* %call126)
  store %struct.rtx_def* %call127, %struct.rtx_def** %op, align 8
  %74 = load i32, i32* @reload_in_progress, align 4
  %tobool128 = icmp ne i32 %74, 0
  br i1 %tobool128, label %if.then.129, label %if.else.135

if.then.129:                                      ; preds = %if.end.125
  %75 = load i32, i32* %code.addr, align 4
  %cmp130 = icmp ne i32 %75, 75
  br i1 %cmp130, label %if.then.132, label %if.end.133

if.then.132:                                      ; preds = %if.then.129
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 6945, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @__FUNCTION__.ix86_expand_binary_operator, i32 0, i32 0)) #7
  unreachable

if.end.133:                                       ; preds = %if.then.129
  %76 = load %struct.rtx_def*, %struct.rtx_def** %op, align 8
  %call134 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %76)
  br label %if.end.141

if.else.135:                                      ; preds = %if.end.125
  %call136 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call137 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call136)
  store %struct.rtx_def* %call137, %struct.rtx_def** %clob, align 8
  %77 = load %struct.rtx_def*, %struct.rtx_def** %op, align 8
  %78 = load %struct.rtx_def*, %struct.rtx_def** %clob, align 8
  %call138 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %77, %struct.rtx_def* %78)
  %call139 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call138)
  %call140 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call139)
  br label %if.end.141

if.end.141:                                       ; preds = %if.else.135, %if.end.133
  %79 = load %struct.rtx_def*, %struct.rtx_def** %dst, align 8
  %80 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx142 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %80, i64 0
  %81 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx142, align 8
  %cmp143 = icmp ne %struct.rtx_def* %79, %81
  br i1 %cmp143, label %if.then.145, label %if.end.148

if.then.145:                                      ; preds = %if.end.141
  %82 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx146 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %82, i64 0
  %83 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx146, align 8
  %84 = load %struct.rtx_def*, %struct.rtx_def** %dst, align 8
  %call147 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %83, %struct.rtx_def* %84)
  br label %if.end.148

if.end.148:                                       ; preds = %if.then.145, %if.end.141
  ret void
}

declare i32 @rtx_equal_p(%struct.rtx_def*, %struct.rtx_def*) #0

; Function Attrs: nounwind uwtable
define i32 @ix86_binary_operator_ok(i32 %code, i32 %mode, %struct.rtx_def** %operands) #1 {
entry:
  %retval = alloca i32, align 4
  %code.addr = alloca i32, align 4
  %mode.addr = alloca i32, align 4
  %operands.addr = alloca %struct.rtx_def**, align 8
  store i32 %code, i32* %code.addr, align 4
  store i32 %mode, i32* %mode.addr, align 4
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 1
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load = load i32, i32* %2, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 66
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 2
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  %5 = bitcast %struct.rtx_def* %4 to i32*
  %bf.load2 = load i32, i32* %5, align 8
  %bf.clear3 = and i32 %bf.load2, 65535
  %cmp4 = icmp eq i32 %bf.clear3, 66
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %6 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx5 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %6, i64 1
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  %8 = bitcast %struct.rtx_def* %7 to i32*
  %bf.load6 = load i32, i32* %8, align 8
  %bf.clear7 = and i32 %bf.load6, 65535
  %cmp8 = icmp eq i32 %bf.clear7, 67
  br i1 %cmp8, label %land.lhs.true.43, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %9 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx9 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %9, i64 1
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx9, align 8
  %11 = bitcast %struct.rtx_def* %10 to i32*
  %bf.load10 = load i32, i32* %11, align 8
  %bf.clear11 = and i32 %bf.load10, 65535
  %cmp12 = icmp eq i32 %bf.clear11, 68
  br i1 %cmp12, label %land.lhs.true.43, label %lor.lhs.false.13

lor.lhs.false.13:                                 ; preds = %lor.lhs.false
  %12 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx14 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %12, i64 1
  %13 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx14, align 8
  %14 = bitcast %struct.rtx_def* %13 to i32*
  %bf.load15 = load i32, i32* %14, align 8
  %bf.clear16 = and i32 %bf.load15, 65535
  %cmp17 = icmp eq i32 %bf.clear16, 54
  br i1 %cmp17, label %land.lhs.true.43, label %lor.lhs.false.18

lor.lhs.false.18:                                 ; preds = %lor.lhs.false.13
  %15 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx19 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %15, i64 1
  %16 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx19, align 8
  %17 = bitcast %struct.rtx_def* %16 to i32*
  %bf.load20 = load i32, i32* %17, align 8
  %bf.clear21 = and i32 %bf.load20, 65535
  %cmp22 = icmp eq i32 %bf.clear21, 55
  br i1 %cmp22, label %land.lhs.true.43, label %lor.lhs.false.23

lor.lhs.false.23:                                 ; preds = %lor.lhs.false.18
  %18 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx24 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %18, i64 1
  %19 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx24, align 8
  %20 = bitcast %struct.rtx_def* %19 to i32*
  %bf.load25 = load i32, i32* %20, align 8
  %bf.clear26 = and i32 %bf.load25, 65535
  %cmp27 = icmp eq i32 %bf.clear26, 58
  br i1 %cmp27, label %land.lhs.true.43, label %lor.lhs.false.28

lor.lhs.false.28:                                 ; preds = %lor.lhs.false.23
  %21 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx29 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %21, i64 1
  %22 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx29, align 8
  %23 = bitcast %struct.rtx_def* %22 to i32*
  %bf.load30 = load i32, i32* %23, align 8
  %bf.clear31 = and i32 %bf.load30, 65535
  %cmp32 = icmp eq i32 %bf.clear31, 134
  br i1 %cmp32, label %land.lhs.true.43, label %lor.lhs.false.33

lor.lhs.false.33:                                 ; preds = %lor.lhs.false.28
  %24 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx34 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %24, i64 1
  %25 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx34, align 8
  %26 = bitcast %struct.rtx_def* %25 to i32*
  %bf.load35 = load i32, i32* %26, align 8
  %bf.clear36 = and i32 %bf.load35, 65535
  %cmp37 = icmp eq i32 %bf.clear36, 56
  br i1 %cmp37, label %land.lhs.true.43, label %lor.lhs.false.38

lor.lhs.false.38:                                 ; preds = %lor.lhs.false.33
  %27 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx39 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %27, i64 1
  %28 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx39, align 8
  %29 = bitcast %struct.rtx_def* %28 to i32*
  %bf.load40 = load i32, i32* %29, align 8
  %bf.clear41 = and i32 %bf.load40, 65535
  %cmp42 = icmp eq i32 %bf.clear41, 140
  br i1 %cmp42, label %land.lhs.true.43, label %if.end.48

land.lhs.true.43:                                 ; preds = %lor.lhs.false.38, %lor.lhs.false.33, %lor.lhs.false.28, %lor.lhs.false.23, %lor.lhs.false.18, %lor.lhs.false.13, %lor.lhs.false, %if.end
  %30 = load i32, i32* %code.addr, align 4
  %idxprom = sext i32 %30 to i64
  %arrayidx44 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom
  %31 = load i8, i8* %arrayidx44, align 1
  %conv = sext i8 %31 to i32
  %cmp45 = icmp ne i32 %conv, 99
  br i1 %cmp45, label %if.then.47, label %if.end.48

if.then.47:                                       ; preds = %land.lhs.true.43
  store i32 0, i32* %retval
  br label %return

if.end.48:                                        ; preds = %land.lhs.true.43, %lor.lhs.false.38
  %32 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx49 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %32, i64 0
  %33 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx49, align 8
  %34 = bitcast %struct.rtx_def* %33 to i32*
  %bf.load50 = load i32, i32* %34, align 8
  %bf.clear51 = and i32 %bf.load50, 65535
  %cmp52 = icmp eq i32 %bf.clear51, 66
  br i1 %cmp52, label %land.lhs.true.54, label %if.end.69

land.lhs.true.54:                                 ; preds = %if.end.48
  %35 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx55 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %35, i64 0
  %36 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx55, align 8
  %37 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx56 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %37, i64 1
  %38 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx56, align 8
  %call = call i32 @rtx_equal_p(%struct.rtx_def* %36, %struct.rtx_def* %38)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end.69, label %lor.lhs.false.57

lor.lhs.false.57:                                 ; preds = %land.lhs.true.54
  %39 = load i32, i32* %code.addr, align 4
  %idxprom58 = sext i32 %39 to i64
  %arrayidx59 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom58
  %40 = load i8, i8* %arrayidx59, align 1
  %conv60 = sext i8 %40 to i32
  %cmp61 = icmp eq i32 %conv60, 99
  br i1 %cmp61, label %land.lhs.true.63, label %if.then.68

land.lhs.true.63:                                 ; preds = %lor.lhs.false.57
  %41 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx64 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %41, i64 0
  %42 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx64, align 8
  %43 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx65 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %43, i64 2
  %44 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx65, align 8
  %call66 = call i32 @rtx_equal_p(%struct.rtx_def* %42, %struct.rtx_def* %44)
  %tobool67 = icmp ne i32 %call66, 0
  br i1 %tobool67, label %if.end.69, label %if.then.68

if.then.68:                                       ; preds = %land.lhs.true.63, %lor.lhs.false.57
  store i32 0, i32* %retval
  br label %return

if.end.69:                                        ; preds = %land.lhs.true.63, %land.lhs.true.54, %if.end.48
  %45 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx70 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %45, i64 1
  %46 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx70, align 8
  %47 = bitcast %struct.rtx_def* %46 to i32*
  %bf.load71 = load i32, i32* %47, align 8
  %bf.clear72 = and i32 %bf.load71, 65535
  %cmp73 = icmp eq i32 %bf.clear72, 66
  br i1 %cmp73, label %land.lhs.true.75, label %if.end.87

land.lhs.true.75:                                 ; preds = %if.end.69
  %48 = load i32, i32* %code.addr, align 4
  %idxprom76 = sext i32 %48 to i64
  %arrayidx77 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom76
  %49 = load i8, i8* %arrayidx77, align 1
  %conv78 = sext i8 %49 to i32
  %cmp79 = icmp ne i32 %conv78, 99
  br i1 %cmp79, label %land.lhs.true.81, label %if.end.87

land.lhs.true.81:                                 ; preds = %land.lhs.true.75
  %50 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx82 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %50, i64 0
  %51 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx82, align 8
  %52 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx83 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %52, i64 1
  %53 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx83, align 8
  %call84 = call i32 @rtx_equal_p(%struct.rtx_def* %51, %struct.rtx_def* %53)
  %tobool85 = icmp ne i32 %call84, 0
  br i1 %tobool85, label %if.end.87, label %if.then.86

if.then.86:                                       ; preds = %land.lhs.true.81
  store i32 0, i32* %retval
  br label %return

if.end.87:                                        ; preds = %land.lhs.true.81, %land.lhs.true.75, %if.end.69
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.87, %if.then.86, %if.then.68, %if.then.47, %if.then
  %54 = load i32, i32* %retval
  ret i32 %54
}

; Function Attrs: nounwind uwtable
define void @ix86_expand_unary_operator(i32 %code, i32 %mode, %struct.rtx_def** %operands) #1 {
entry:
  %code.addr = alloca i32, align 4
  %mode.addr = alloca i32, align 4
  %operands.addr = alloca %struct.rtx_def**, align 8
  %matching_memory = alloca i32, align 4
  %src = alloca %struct.rtx_def*, align 8
  %dst = alloca %struct.rtx_def*, align 8
  %op = alloca %struct.rtx_def*, align 8
  %clob = alloca %struct.rtx_def*, align 8
  store i32 %code, i32* %code.addr, align 4
  store i32 %mode, i32* %mode.addr, align 4
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %dst, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %src, align 8
  store i32 0, i32* %matching_memory, align 4
  %4 = load %struct.rtx_def*, %struct.rtx_def** %dst, align 8
  %5 = bitcast %struct.rtx_def* %4 to i32*
  %bf.load = load i32, i32* %5, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 66
  br i1 %cmp, label %if.then, label %if.end.4

if.then:                                          ; preds = %entry
  %6 = load %struct.rtx_def*, %struct.rtx_def** %dst, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %call = call i32 @rtx_equal_p(%struct.rtx_def* %6, %struct.rtx_def* %7)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then.2, label %if.else

if.then.2:                                        ; preds = %if.then
  store i32 1, i32* %matching_memory, align 4
  br label %if.end

if.else:                                          ; preds = %if.then
  %8 = load i32, i32* %mode.addr, align 4
  %call3 = call %struct.rtx_def* @gen_reg_rtx(i32 %8)
  store %struct.rtx_def* %call3, %struct.rtx_def** %dst, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.2
  br label %if.end.4

if.end.4:                                         ; preds = %if.end, %entry
  %9 = load i32, i32* %matching_memory, align 4
  %tobool5 = icmp ne i32 %9, 0
  br i1 %tobool5, label %if.end.11, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end.4
  %10 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %11 = bitcast %struct.rtx_def* %10 to i32*
  %bf.load6 = load i32, i32* %11, align 8
  %bf.clear7 = and i32 %bf.load6, 65535
  %cmp8 = icmp eq i32 %bf.clear7, 66
  br i1 %cmp8, label %if.then.9, label %if.end.11

if.then.9:                                        ; preds = %land.lhs.true
  %12 = load i32, i32* %mode.addr, align 4
  %13 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %call10 = call %struct.rtx_def* @force_reg(i32 %12, %struct.rtx_def* %13)
  store %struct.rtx_def* %call10, %struct.rtx_def** %src, align 8
  br label %if.end.11

if.end.11:                                        ; preds = %if.then.9, %land.lhs.true, %if.end.4
  %14 = load i32, i32* @optimize, align 4
  %tobool12 = icmp ne i32 %14, 0
  br i1 %tobool12, label %land.lhs.true.13, label %if.end.28

land.lhs.true.13:                                 ; preds = %if.end.11
  %15 = load i32, i32* @no_new_pseudos, align 4
  %tobool14 = icmp ne i32 %15, 0
  br i1 %tobool14, label %if.end.28, label %if.then.15

if.then.15:                                       ; preds = %land.lhs.true.13
  %16 = load %struct.rtx_def*, %struct.rtx_def** %dst, align 8
  %17 = bitcast %struct.rtx_def* %16 to i32*
  %bf.load16 = load i32, i32* %17, align 8
  %bf.clear17 = and i32 %bf.load16, 65535
  %cmp18 = icmp eq i32 %bf.clear17, 66
  br i1 %cmp18, label %if.then.19, label %if.end.21

if.then.19:                                       ; preds = %if.then.15
  %18 = load i32, i32* %mode.addr, align 4
  %call20 = call %struct.rtx_def* @gen_reg_rtx(i32 %18)
  store %struct.rtx_def* %call20, %struct.rtx_def** %dst, align 8
  br label %if.end.21

if.end.21:                                        ; preds = %if.then.19, %if.then.15
  %19 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %20 = bitcast %struct.rtx_def* %19 to i32*
  %bf.load22 = load i32, i32* %20, align 8
  %bf.clear23 = and i32 %bf.load22, 65535
  %cmp24 = icmp eq i32 %bf.clear23, 66
  br i1 %cmp24, label %if.then.25, label %if.end.27

if.then.25:                                       ; preds = %if.end.21
  %21 = load i32, i32* %mode.addr, align 4
  %22 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %call26 = call %struct.rtx_def* @force_reg(i32 %21, %struct.rtx_def* %22)
  store %struct.rtx_def* %call26, %struct.rtx_def** %src, align 8
  br label %if.end.27

if.end.27:                                        ; preds = %if.then.25, %if.end.21
  br label %if.end.28

if.end.28:                                        ; preds = %if.end.27, %land.lhs.true.13, %if.end.11
  %23 = load %struct.rtx_def*, %struct.rtx_def** %dst, align 8
  %24 = load i32, i32* %code.addr, align 4
  %25 = load i32, i32* %mode.addr, align 4
  %26 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %call29 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 %24, i32 %25, %struct.rtx_def* %26)
  %call30 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %23, %struct.rtx_def* %call29)
  store %struct.rtx_def* %call30, %struct.rtx_def** %op, align 8
  %27 = load i32, i32* @reload_in_progress, align 4
  %tobool31 = icmp ne i32 %27, 0
  br i1 %tobool31, label %if.then.33, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.28
  %28 = load i32, i32* %code.addr, align 4
  %cmp32 = icmp eq i32 %28, 86
  br i1 %cmp32, label %if.then.33, label %if.else.38

if.then.33:                                       ; preds = %lor.lhs.false, %if.end.28
  %29 = load i32, i32* %code.addr, align 4
  %cmp34 = icmp ne i32 %29, 86
  br i1 %cmp34, label %if.then.35, label %if.end.36

if.then.35:                                       ; preds = %if.then.33
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 7037, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @__FUNCTION__.ix86_expand_unary_operator, i32 0, i32 0)) #7
  unreachable

if.end.36:                                        ; preds = %if.then.33
  %30 = load %struct.rtx_def*, %struct.rtx_def** %op, align 8
  %call37 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %30)
  br label %if.end.44

if.else.38:                                       ; preds = %lor.lhs.false
  %call39 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call40 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call39)
  store %struct.rtx_def* %call40, %struct.rtx_def** %clob, align 8
  %31 = load %struct.rtx_def*, %struct.rtx_def** %op, align 8
  %32 = load %struct.rtx_def*, %struct.rtx_def** %clob, align 8
  %call41 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %31, %struct.rtx_def* %32)
  %call42 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call41)
  %call43 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call42)
  br label %if.end.44

if.end.44:                                        ; preds = %if.else.38, %if.end.36
  %33 = load %struct.rtx_def*, %struct.rtx_def** %dst, align 8
  %34 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx45 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %34, i64 0
  %35 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx45, align 8
  %cmp46 = icmp ne %struct.rtx_def* %33, %35
  br i1 %cmp46, label %if.then.47, label %if.end.50

if.then.47:                                       ; preds = %if.end.44
  %36 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx48 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %36, i64 0
  %37 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx48, align 8
  %38 = load %struct.rtx_def*, %struct.rtx_def** %dst, align 8
  %call49 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %37, %struct.rtx_def* %38)
  br label %if.end.50

if.end.50:                                        ; preds = %if.then.47, %if.end.44
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @ix86_unary_operator_ok(i32 %code, i32 %mode, %struct.rtx_def** %operands) #1 {
entry:
  %retval = alloca i32, align 4
  %code.addr = alloca i32, align 4
  %mode.addr = alloca i32, align 4
  %operands.addr = alloca %struct.rtx_def**, align 8
  store i32 %code, i32* %code.addr, align 4
  store i32 %mode, i32* %mode.addr, align 4
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load = load i32, i32* %2, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 66
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 1
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  %5 = bitcast %struct.rtx_def* %4 to i32*
  %bf.load2 = load i32, i32* %5, align 8
  %bf.clear3 = and i32 %bf.load2, 65535
  %cmp4 = icmp eq i32 %bf.clear3, 66
  br i1 %cmp4, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.lhs.false, %entry
  %6 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx5 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %6, i64 0
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx6 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %8, i64 1
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  %call = call i32 @rtx_equal_p(%struct.rtx_def* %7, %struct.rtx_def* %9)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %10 = load i32, i32* %retval
  ret i32 %10
}

; Function Attrs: nounwind uwtable
define i32 @ix86_match_ccmode(%struct.rtx_def* %insn, i32 %req_mode) #1 {
entry:
  %retval = alloca i32, align 4
  %insn.addr = alloca %struct.rtx_def*, align 8
  %req_mode.addr = alloca i32, align 4
  %set = alloca %struct.rtx_def*, align 8
  %set_mode = alloca i32, align 4
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  store i32 %req_mode, i32* %req_mode.addr, align 4
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %1 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %set, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %3 = bitcast %struct.rtx_def* %2 to i32*
  %bf.load = load i32, i32* %3, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 39
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1
  %arrayidx2 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1, i32 0, i64 0
  %rtvec = bitcast %union.rtunion_def* %arrayidx2 to %struct.rtvec_def**
  %5 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec, align 8
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %5, i32 0, i32 1
  %arrayidx3 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i32 0, i64 0
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  store %struct.rtx_def* %6, %struct.rtx_def** %set, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %8 = bitcast %struct.rtx_def* %7 to i32*
  %bf.load4 = load i32, i32* %8, align 8
  %bf.clear5 = and i32 %bf.load4, 65535
  %cmp6 = icmp ne i32 %bf.clear5, 47
  br i1 %cmp6, label %if.then.7, label %if.end.8

if.then.7:                                        ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 7084, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__FUNCTION__.ix86_match_ccmode, i32 0, i32 0)) #7
  unreachable

if.end.8:                                         ; preds = %if.end
  %9 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld9 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1
  %arrayidx10 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld9, i32 0, i64 1
  %rtx11 = bitcast %union.rtunion_def* %arrayidx10 to %struct.rtx_def**
  %10 = load %struct.rtx_def*, %struct.rtx_def** %rtx11, align 8
  %11 = bitcast %struct.rtx_def* %10 to i32*
  %bf.load12 = load i32, i32* %11, align 8
  %bf.clear13 = and i32 %bf.load12, 65535
  %cmp14 = icmp ne i32 %bf.clear13, 74
  br i1 %cmp14, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %if.end.8
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 7086, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__FUNCTION__.ix86_match_ccmode, i32 0, i32 0)) #7
  unreachable

if.end.16:                                        ; preds = %if.end.8
  %12 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld17 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1
  %arrayidx18 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld17, i32 0, i64 0
  %rtx19 = bitcast %union.rtunion_def* %arrayidx18 to %struct.rtx_def**
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rtx19, align 8
  %14 = bitcast %struct.rtx_def* %13 to i32*
  %bf.load20 = load i32, i32* %14, align 8
  %bf.lshr = lshr i32 %bf.load20, 16
  %bf.clear21 = and i32 %bf.lshr, 255
  store i32 %bf.clear21, i32* %set_mode, align 4
  %15 = load i32, i32* %set_mode, align 4
  switch i32 %15, label %sw.default [
    i32 55, label %sw.bb
    i32 52, label %sw.bb.33
    i32 53, label %sw.bb.37
    i32 54, label %sw.bb.43
    i32 56, label %sw.bb.47
  ]

sw.bb:                                            ; preds = %if.end.16
  %16 = load i32, i32* %req_mode.addr, align 4
  %cmp22 = icmp ne i32 %16, 55
  br i1 %cmp22, label %land.lhs.true, label %if.end.32

land.lhs.true:                                    ; preds = %sw.bb
  %17 = load i32, i32* %req_mode.addr, align 4
  %cmp23 = icmp ne i32 %17, 52
  br i1 %cmp23, label %if.then.31, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %18 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld24 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1
  %arrayidx25 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld24, i32 0, i64 1
  %rtx26 = bitcast %union.rtunion_def* %arrayidx25 to %struct.rtx_def**
  %19 = load %struct.rtx_def*, %struct.rtx_def** %rtx26, align 8
  %fld27 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1
  %arrayidx28 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld27, i32 0, i64 1
  %rtx29 = bitcast %union.rtunion_def* %arrayidx28 to %struct.rtx_def**
  %20 = load %struct.rtx_def*, %struct.rtx_def** %rtx29, align 8
  %21 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %cmp30 = icmp ne %struct.rtx_def* %20, %21
  br i1 %cmp30, label %if.then.31, label %if.end.32

if.then.31:                                       ; preds = %lor.lhs.false, %land.lhs.true
  store i32 0, i32* %retval
  br label %return

if.end.32:                                        ; preds = %lor.lhs.false, %sw.bb
  br label %sw.epilog

sw.bb.33:                                         ; preds = %if.end.16
  %22 = load i32, i32* %req_mode.addr, align 4
  %cmp34 = icmp eq i32 %22, 53
  br i1 %cmp34, label %if.then.35, label %if.end.36

if.then.35:                                       ; preds = %sw.bb.33
  store i32 0, i32* %retval
  br label %return

if.end.36:                                        ; preds = %sw.bb.33
  br label %sw.bb.37

sw.bb.37:                                         ; preds = %if.end.16, %if.end.36
  %23 = load i32, i32* %req_mode.addr, align 4
  %cmp38 = icmp eq i32 %23, 54
  br i1 %cmp38, label %if.then.41, label %lor.lhs.false.39

lor.lhs.false.39:                                 ; preds = %sw.bb.37
  %24 = load i32, i32* %req_mode.addr, align 4
  %cmp40 = icmp eq i32 %24, 55
  br i1 %cmp40, label %if.then.41, label %if.end.42

if.then.41:                                       ; preds = %lor.lhs.false.39, %sw.bb.37
  store i32 0, i32* %retval
  br label %return

if.end.42:                                        ; preds = %lor.lhs.false.39
  br label %sw.bb.43

sw.bb.43:                                         ; preds = %if.end.16, %if.end.42
  %25 = load i32, i32* %req_mode.addr, align 4
  %cmp44 = icmp eq i32 %25, 56
  br i1 %cmp44, label %if.then.45, label %if.end.46

if.then.45:                                       ; preds = %sw.bb.43
  store i32 0, i32* %retval
  br label %return

if.end.46:                                        ; preds = %sw.bb.43
  br label %sw.bb.47

sw.bb.47:                                         ; preds = %if.end.16, %if.end.46
  br label %sw.epilog

sw.default:                                       ; preds = %if.end.16
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 7113, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__FUNCTION__.ix86_match_ccmode, i32 0, i32 0)) #7
  unreachable

sw.epilog:                                        ; preds = %sw.bb.47, %if.end.32
  %26 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld48 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %26, i32 0, i32 1
  %arrayidx49 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld48, i32 0, i64 1
  %rtx50 = bitcast %union.rtunion_def* %arrayidx49 to %struct.rtx_def**
  %27 = load %struct.rtx_def*, %struct.rtx_def** %rtx50, align 8
  %28 = bitcast %struct.rtx_def* %27 to i32*
  %bf.load51 = load i32, i32* %28, align 8
  %bf.lshr52 = lshr i32 %bf.load51, 16
  %bf.clear53 = and i32 %bf.lshr52, 255
  %29 = load i32, i32* %set_mode, align 4
  %cmp54 = icmp eq i32 %bf.clear53, %29
  %conv = zext i1 %cmp54 to i32
  store i32 %conv, i32* %retval
  br label %return

return:                                           ; preds = %sw.epilog, %if.then.45, %if.then.41, %if.then.35, %if.then.31
  %30 = load i32, i32* %retval
  ret i32 %30
}

; Function Attrs: nounwind uwtable
define i32 @ix86_fp_compare_mode(i32 %code) #1 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  %0 = load i32, i32* @target_flags, align 4
  %and = and i32 %0, 16
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, i32 58, i32 57
  ret i32 %cond
}

; Function Attrs: nounwind uwtable
define i32 @ix86_cc_mode(i32 %code, %struct.rtx_def* %op0, %struct.rtx_def* %op1) #1 {
entry:
  %retval = alloca i32, align 4
  %code.addr = alloca i32, align 4
  %op0.addr = alloca %struct.rtx_def*, align 8
  %op1.addr = alloca %struct.rtx_def*, align 8
  store i32 %code, i32* %code.addr, align 4
  store %struct.rtx_def* %op0, %struct.rtx_def** %op0.addr, align 8
  store %struct.rtx_def* %op1, %struct.rtx_def** %op1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %idxprom = sext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom
  %2 = load i32, i32* %arrayidx, align 4
  %cmp = icmp eq i32 %2, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %code.addr, align 4
  %call = call i32 @ix86_fp_compare_mode(i32 %3)
  store i32 %call, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %4 = load i32, i32* %code.addr, align 4
  switch i32 %4, label %sw.default [
    i32 103, label %sw.bb
    i32 102, label %sw.bb
    i32 108, label %sw.bb.1
    i32 109, label %sw.bb.1
    i32 111, label %sw.bb.1
    i32 110, label %sw.bb.1
    i32 104, label %sw.bb.2
    i32 107, label %sw.bb.2
    i32 105, label %sw.bb.5
    i32 106, label %sw.bb.5
    i32 48, label %sw.bb.9
  ]

sw.bb:                                            ; preds = %if.end, %if.end
  store i32 56, i32* %retval
  br label %return

sw.bb.1:                                          ; preds = %if.end, %if.end, %if.end, %if.end
  store i32 52, i32* %retval
  br label %return

sw.bb.2:                                          ; preds = %if.end, %if.end
  %5 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %cmp3 = icmp eq %struct.rtx_def* %5, %6
  br i1 %cmp3, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %sw.bb.2
  store i32 54, i32* %retval
  br label %return

if.else:                                          ; preds = %sw.bb.2
  store i32 53, i32* %retval
  br label %return

sw.bb.5:                                          ; preds = %if.end, %if.end
  %7 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %cmp6 = icmp eq %struct.rtx_def* %7, %8
  br i1 %cmp6, label %if.then.7, label %if.else.8

if.then.7:                                        ; preds = %sw.bb.5
  store i32 55, i32* %retval
  br label %return

if.else.8:                                        ; preds = %sw.bb.5
  store i32 53, i32* %retval
  br label %return

sw.bb.9:                                          ; preds = %if.end
  store i32 52, i32* %retval
  br label %return

sw.default:                                       ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 7200, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @__FUNCTION__.ix86_cc_mode, i32 0, i32 0)) #7
  unreachable

return:                                           ; preds = %sw.bb.9, %if.else.8, %if.then.7, %if.else, %if.then.4, %sw.bb.1, %sw.bb, %if.then
  %9 = load i32, i32* %retval
  ret i32 %9
}

; Function Attrs: nounwind uwtable
define i32 @ix86_use_fcomi_compare(i32 %code) #1 {
entry:
  %code.addr = alloca i32, align 4
  %swapped_code = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  %0 = load i32, i32* %code.addr, align 4
  %call = call i32 @swap_condition(i32 %0)
  store i32 %call, i32* %swapped_code, align 4
  %1 = load i32, i32* %code.addr, align 4
  %call1 = call i32 @ix86_fp_comparison_cost(i32 %1)
  %2 = load i32, i32* %code.addr, align 4
  %call2 = call i32 @ix86_fp_comparison_fcomi_cost(i32 %2)
  %cmp = icmp eq i32 %call1, %call2
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %3 = load i32, i32* %swapped_code, align 4
  %call3 = call i32 @ix86_fp_comparison_cost(i32 %3)
  %4 = load i32, i32* %swapped_code, align 4
  %call4 = call i32 @ix86_fp_comparison_fcomi_cost(i32 %4)
  %cmp5 = icmp eq i32 %call3, %call4
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %5 = phi i1 [ true, %entry ], [ %cmp5, %lor.rhs ]
  %lor.ext = zext i1 %5 to i32
  ret i32 %lor.ext
}

declare i32 @swap_condition(i32) #0

; Function Attrs: nounwind uwtable
define internal i32 @ix86_fp_comparison_cost(i32 %code) #1 {
entry:
  %code.addr = alloca i32, align 4
  %fcomi_cost = alloca i32, align 4
  %sahf_cost = alloca i32, align 4
  %arithmetics_cost = alloca i32, align 4
  %min = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  store i32 1024, i32* %arithmetics_cost, align 4
  %0 = load i32, i32* %code.addr, align 4
  %call = call i32 @ix86_fp_comparison_fcomi_cost(i32 %0)
  store i32 %call, i32* %fcomi_cost, align 4
  %1 = load i32, i32* %code.addr, align 4
  %call1 = call i32 @ix86_fp_comparison_sahf_cost(i32 %1)
  store i32 %call1, i32* %sahf_cost, align 4
  %2 = load i32, i32* %code.addr, align 4
  %call2 = call i32 @ix86_fp_comparison_arithmetics_cost(i32 %2)
  store i32 %call2, i32* %arithmetics_cost, align 4
  store i32 %call2, i32* %min, align 4
  %3 = load i32, i32* %min, align 4
  %4 = load i32, i32* %sahf_cost, align 4
  %cmp = icmp sgt i32 %3, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load i32, i32* %sahf_cost, align 4
  store i32 %5, i32* %min, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %6 = load i32, i32* %min, align 4
  %7 = load i32, i32* %fcomi_cost, align 4
  %cmp3 = icmp sgt i32 %6, %7
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.end
  %8 = load i32, i32* %fcomi_cost, align 4
  store i32 %8, i32* %min, align 4
  br label %if.end.5

if.end.5:                                         ; preds = %if.then.4, %if.end
  %9 = load i32, i32* %min, align 4
  ret i32 %9
}

; Function Attrs: nounwind uwtable
define internal i32 @ix86_fp_comparison_fcomi_cost(i32 %code) #1 {
entry:
  %retval = alloca i32, align 4
  %code.addr = alloca i32, align 4
  %bypass_code = alloca i32, align 4
  %first_code = alloca i32, align 4
  %second_code = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  %0 = load i32, i32* @ix86_arch, align 4
  %shl = shl i32 1, %0
  %and = and i32 104, %shl
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* @target_flags, align 4
  %and1 = and i32 %1, 327680
  %cmp = icmp ne i32 %and1, 0
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false
  store i32 1024, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false, %entry
  %2 = load i32, i32* %code.addr, align 4
  call void @ix86_fp_comparison_codes(i32 %2, i32* %bypass_code, i32* %first_code, i32* %second_code)
  %3 = load i32, i32* %bypass_code, align 4
  %cmp2 = icmp ne i32 %3, 1
  br i1 %cmp2, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.end
  %4 = load i32, i32* %second_code, align 4
  %cmp3 = icmp ne i32 %4, 1
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.end
  %5 = phi i1 [ true, %if.end ], [ %cmp3, %lor.rhs ]
  %lor.ext = zext i1 %5 to i32
  %add = add nsw i32 %lor.ext, 2
  store i32 %add, i32* %retval
  br label %return

return:                                           ; preds = %lor.end, %if.then
  %6 = load i32, i32* %retval
  ret i32 %6
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @ix86_expand_compare(i32 %code, %struct.rtx_def** %second_test, %struct.rtx_def** %bypass_test) #1 {
entry:
  %code.addr = alloca i32, align 4
  %second_test.addr = alloca %struct.rtx_def**, align 8
  %bypass_test.addr = alloca %struct.rtx_def**, align 8
  %op0 = alloca %struct.rtx_def*, align 8
  %op1 = alloca %struct.rtx_def*, align 8
  %ret = alloca %struct.rtx_def*, align 8
  store i32 %code, i32* %code.addr, align 4
  store %struct.rtx_def** %second_test, %struct.rtx_def*** %second_test.addr, align 8
  store %struct.rtx_def** %bypass_test, %struct.rtx_def*** %bypass_test.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** @ix86_compare_op0, align 8
  store %struct.rtx_def* %0, %struct.rtx_def** %op0, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** @ix86_compare_op1, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %op1, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %second_test.addr, align 8
  %tobool = icmp ne %struct.rtx_def** %2, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %second_test.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %3, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %bypass_test.addr, align 8
  %tobool1 = icmp ne %struct.rtx_def** %4, null
  br i1 %tobool1, label %if.then.2, label %if.end.3

if.then.2:                                        ; preds = %if.end
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %bypass_test.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %5, align 8
  br label %if.end.3

if.end.3:                                         ; preds = %if.then.2, %if.end
  %6 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %7 = bitcast %struct.rtx_def* %6 to i32*
  %bf.load = load i32, i32* %7, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %idxprom = sext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom
  %8 = load i32, i32* %arrayidx, align 4
  %cmp = icmp eq i32 %8, 2
  br i1 %cmp, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %if.end.3
  %9 = load i32, i32* %code.addr, align 4
  %10 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %11 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %12 = load %struct.rtx_def**, %struct.rtx_def*** %second_test.addr, align 8
  %13 = load %struct.rtx_def**, %struct.rtx_def*** %bypass_test.addr, align 8
  %call = call %struct.rtx_def* @ix86_expand_fp_compare(i32 %9, %struct.rtx_def* %10, %struct.rtx_def* %11, %struct.rtx_def* null, %struct.rtx_def** %12, %struct.rtx_def** %13)
  store %struct.rtx_def* %call, %struct.rtx_def** %ret, align 8
  br label %if.end.6

if.else:                                          ; preds = %if.end.3
  %14 = load i32, i32* %code.addr, align 4
  %15 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %16 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %call5 = call %struct.rtx_def* @ix86_expand_int_compare(i32 %14, %struct.rtx_def* %15, %struct.rtx_def* %16)
  store %struct.rtx_def* %call5, %struct.rtx_def** %ret, align 8
  br label %if.end.6

if.end.6:                                         ; preds = %if.else, %if.then.4
  %17 = load %struct.rtx_def*, %struct.rtx_def** %ret, align 8
  ret %struct.rtx_def* %17
}

; Function Attrs: nounwind uwtable
define internal %struct.rtx_def* @ix86_expand_fp_compare(i32 %code, %struct.rtx_def* %op0, %struct.rtx_def* %op1, %struct.rtx_def* %scratch, %struct.rtx_def** %second_test, %struct.rtx_def** %bypass_test) #1 {
entry:
  %code.addr = alloca i32, align 4
  %op0.addr = alloca %struct.rtx_def*, align 8
  %op1.addr = alloca %struct.rtx_def*, align 8
  %scratch.addr = alloca %struct.rtx_def*, align 8
  %second_test.addr = alloca %struct.rtx_def**, align 8
  %bypass_test.addr = alloca %struct.rtx_def**, align 8
  %fpcmp_mode = alloca i32, align 4
  %intcmp_mode = alloca i32, align 4
  %tmp = alloca %struct.rtx_def*, align 8
  %tmp2 = alloca %struct.rtx_def*, align 8
  %cost = alloca i32, align 4
  %bypass_code = alloca i32, align 4
  %first_code = alloca i32, align 4
  %second_code = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  store %struct.rtx_def* %op0, %struct.rtx_def** %op0.addr, align 8
  store %struct.rtx_def* %op1, %struct.rtx_def** %op1.addr, align 8
  store %struct.rtx_def* %scratch, %struct.rtx_def** %scratch.addr, align 8
  store %struct.rtx_def** %second_test, %struct.rtx_def*** %second_test.addr, align 8
  store %struct.rtx_def** %bypass_test, %struct.rtx_def*** %bypass_test.addr, align 8
  %0 = load i32, i32* %code.addr, align 4
  %call = call i32 @ix86_fp_comparison_cost(i32 %0)
  store i32 %call, i32* %cost, align 4
  %1 = load i32, i32* %code.addr, align 4
  %call7 = call i32 @ix86_fp_compare_mode(i32 %1)
  store i32 %call7, i32* %fpcmp_mode, align 4
  %2 = load i32, i32* %code.addr, align 4
  %call8 = call i32 @ix86_prepare_fp_compare_args(i32 %2, %struct.rtx_def** %op0.addr, %struct.rtx_def** %op1.addr)
  store i32 %call8, i32* %code.addr, align 4
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %second_test.addr, align 8
  %tobool = icmp ne %struct.rtx_def** %3, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %second_test.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %4, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %bypass_test.addr, align 8
  %tobool9 = icmp ne %struct.rtx_def** %5, null
  br i1 %tobool9, label %if.then.10, label %if.end.11

if.then.10:                                       ; preds = %if.end
  %6 = load %struct.rtx_def**, %struct.rtx_def*** %bypass_test.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %6, align 8
  br label %if.end.11

if.end.11:                                        ; preds = %if.then.10, %if.end
  %7 = load i32, i32* %code.addr, align 4
  call void @ix86_fp_comparison_codes(i32 %7, i32* %bypass_code, i32* %first_code, i32* %second_code)
  %8 = load i32, i32* %bypass_code, align 4
  %cmp = icmp eq i32 %8, 1
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.11
  %9 = load %struct.rtx_def**, %struct.rtx_def*** %bypass_test.addr, align 8
  %tobool12 = icmp ne %struct.rtx_def** %9, null
  br i1 %tobool12, label %land.lhs.true, label %if.else.51

land.lhs.true:                                    ; preds = %lor.lhs.false, %if.end.11
  %10 = load i32, i32* %second_code, align 4
  %cmp13 = icmp eq i32 %10, 1
  br i1 %cmp13, label %land.lhs.true.16, label %lor.lhs.false.14

lor.lhs.false.14:                                 ; preds = %land.lhs.true
  %11 = load %struct.rtx_def**, %struct.rtx_def*** %second_test.addr, align 8
  %tobool15 = icmp ne %struct.rtx_def** %11, null
  br i1 %tobool15, label %land.lhs.true.16, label %if.else.51

land.lhs.true.16:                                 ; preds = %lor.lhs.false.14, %land.lhs.true
  %12 = load i32, i32* %code.addr, align 4
  %call17 = call i32 @ix86_fp_comparison_arithmetics_cost(i32 %12)
  %13 = load i32, i32* %cost, align 4
  %cmp18 = icmp sgt i32 %call17, %13
  br i1 %cmp18, label %if.then.19, label %if.else.51

if.then.19:                                       ; preds = %land.lhs.true.16
  %14 = load i32, i32* @ix86_arch, align 4
  %shl = shl i32 1, %14
  %and = and i32 104, %shl
  %tobool20 = icmp ne i32 %and, 0
  br i1 %tobool20, label %if.then.24, label %lor.lhs.false.21

lor.lhs.false.21:                                 ; preds = %if.then.19
  %15 = load i32, i32* @target_flags, align 4
  %and22 = and i32 %15, 327680
  %cmp23 = icmp ne i32 %and22, 0
  br i1 %cmp23, label %if.then.24, label %if.else

if.then.24:                                       ; preds = %lor.lhs.false.21, %if.then.19
  %16 = load i32, i32* %fpcmp_mode, align 4
  %17 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8
  %18 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8
  %call25 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 74, i32 %16, %struct.rtx_def* %17, %struct.rtx_def* %18)
  store %struct.rtx_def* %call25, %struct.rtx_def** %tmp, align 8
  %19 = load i32, i32* %fpcmp_mode, align 4
  %call26 = call %struct.rtx_def* @gen_rtx_REG(i32 %19, i32 17)
  %20 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %call27 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call26, %struct.rtx_def* %20)
  store %struct.rtx_def* %call27, %struct.rtx_def** %tmp, align 8
  %21 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %call28 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %21)
  br label %if.end.40

if.else:                                          ; preds = %lor.lhs.false.21
  %22 = load i32, i32* %fpcmp_mode, align 4
  %23 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8
  %24 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8
  %call29 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 74, i32 %22, %struct.rtx_def* %23, %struct.rtx_def* %24)
  store %struct.rtx_def* %call29, %struct.rtx_def** %tmp, align 8
  %25 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %call30 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %25)
  %call31 = call %struct.rtx_def* @gen_rtx_fmt_Ei(i32 42, i32 3, %struct.rtvec_def* %call30, i32 9)
  store %struct.rtx_def* %call31, %struct.rtx_def** %tmp2, align 8
  %26 = load %struct.rtx_def*, %struct.rtx_def** %scratch.addr, align 8
  %tobool32 = icmp ne %struct.rtx_def* %26, null
  br i1 %tobool32, label %if.end.35, label %if.then.33

if.then.33:                                       ; preds = %if.else
  %call34 = call %struct.rtx_def* @gen_reg_rtx(i32 3)
  store %struct.rtx_def* %call34, %struct.rtx_def** %scratch.addr, align 8
  br label %if.end.35

if.end.35:                                        ; preds = %if.then.33, %if.else
  %27 = load %struct.rtx_def*, %struct.rtx_def** %scratch.addr, align 8
  %28 = load %struct.rtx_def*, %struct.rtx_def** %tmp2, align 8
  %call36 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %27, %struct.rtx_def* %28)
  %call37 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call36)
  %29 = load %struct.rtx_def*, %struct.rtx_def** %scratch.addr, align 8
  %call38 = call %struct.rtx_def* @gen_x86_sahf_1(%struct.rtx_def* %29)
  %call39 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call38)
  br label %if.end.40

if.end.40:                                        ; preds = %if.end.35, %if.then.24
  %30 = load i32, i32* %fpcmp_mode, align 4
  store i32 %30, i32* %intcmp_mode, align 4
  %31 = load i32, i32* %first_code, align 4
  store i32 %31, i32* %code.addr, align 4
  %32 = load i32, i32* %bypass_code, align 4
  %cmp41 = icmp ne i32 %32, 1
  br i1 %cmp41, label %if.then.42, label %if.end.45

if.then.42:                                       ; preds = %if.end.40
  %33 = load i32, i32* %bypass_code, align 4
  %34 = load i32, i32* %intcmp_mode, align 4
  %call43 = call %struct.rtx_def* @gen_rtx_REG(i32 %34, i32 17)
  %35 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call44 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 %33, i32 0, %struct.rtx_def* %call43, %struct.rtx_def* %35)
  %36 = load %struct.rtx_def**, %struct.rtx_def*** %bypass_test.addr, align 8
  store %struct.rtx_def* %call44, %struct.rtx_def** %36, align 8
  br label %if.end.45

if.end.45:                                        ; preds = %if.then.42, %if.end.40
  %37 = load i32, i32* %second_code, align 4
  %cmp46 = icmp ne i32 %37, 1
  br i1 %cmp46, label %if.then.47, label %if.end.50

if.then.47:                                       ; preds = %if.end.45
  %38 = load i32, i32* %second_code, align 4
  %39 = load i32, i32* %intcmp_mode, align 4
  %call48 = call %struct.rtx_def* @gen_rtx_REG(i32 %39, i32 17)
  %40 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call49 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 %38, i32 0, %struct.rtx_def* %call48, %struct.rtx_def* %40)
  %41 = load %struct.rtx_def**, %struct.rtx_def*** %second_test.addr, align 8
  store %struct.rtx_def* %call49, %struct.rtx_def** %41, align 8
  br label %if.end.50

if.end.50:                                        ; preds = %if.then.47, %if.end.45
  br label %if.end.174

if.else.51:                                       ; preds = %land.lhs.true.16, %lor.lhs.false.14, %lor.lhs.false
  %42 = load i32, i32* %fpcmp_mode, align 4
  %43 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8
  %44 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8
  %call52 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 74, i32 %42, %struct.rtx_def* %43, %struct.rtx_def* %44)
  store %struct.rtx_def* %call52, %struct.rtx_def** %tmp, align 8
  %45 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %call53 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %45)
  %call54 = call %struct.rtx_def* @gen_rtx_fmt_Ei(i32 42, i32 3, %struct.rtvec_def* %call53, i32 9)
  store %struct.rtx_def* %call54, %struct.rtx_def** %tmp2, align 8
  %46 = load %struct.rtx_def*, %struct.rtx_def** %scratch.addr, align 8
  %tobool55 = icmp ne %struct.rtx_def* %46, null
  br i1 %tobool55, label %if.end.58, label %if.then.56

if.then.56:                                       ; preds = %if.else.51
  %call57 = call %struct.rtx_def* @gen_reg_rtx(i32 3)
  store %struct.rtx_def* %call57, %struct.rtx_def** %scratch.addr, align 8
  br label %if.end.58

if.end.58:                                        ; preds = %if.then.56, %if.else.51
  %47 = load %struct.rtx_def*, %struct.rtx_def** %scratch.addr, align 8
  %48 = load %struct.rtx_def*, %struct.rtx_def** %tmp2, align 8
  %call59 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %47, %struct.rtx_def* %48)
  %call60 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call59)
  store i32 55, i32* %intcmp_mode, align 4
  %49 = load i32, i32* %code.addr, align 4
  switch i32 %49, label %sw.default [
    i32 105, label %sw.bb
    i32 116, label %sw.bb
    i32 107, label %sw.bb.79
    i32 118, label %sw.bb.79
    i32 104, label %sw.bb.96
    i32 115, label %sw.bb.96
    i32 106, label %sw.bb.113
    i32 117, label %sw.bb.113
    i32 103, label %sw.bb.132
    i32 114, label %sw.bb.132
    i32 102, label %sw.bb.149
    i32 119, label %sw.bb.149
    i32 112, label %sw.bb.166
    i32 113, label %sw.bb.170
  ]

sw.bb:                                            ; preds = %if.end.58, %if.end.58
  %50 = load i32, i32* %code.addr, align 4
  %cmp61 = icmp eq i32 %50, 105
  br i1 %cmp61, label %if.then.65, label %lor.lhs.false.62

lor.lhs.false.62:                                 ; preds = %sw.bb
  %51 = load i32, i32* @target_flags, align 4
  %and63 = and i32 %51, 16
  %tobool64 = icmp ne i32 %and63, 0
  br i1 %tobool64, label %if.else.69, label %if.then.65

if.then.65:                                       ; preds = %lor.lhs.false.62, %sw.bb
  %52 = load %struct.rtx_def*, %struct.rtx_def** %scratch.addr, align 8
  %call66 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 69)
  %call67 = call %struct.rtx_def* @gen_testqi_ext_ccno_0(%struct.rtx_def* %52, %struct.rtx_def* %call66)
  %call68 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call67)
  store i32 103, i32* %code.addr, align 4
  br label %if.end.78

if.else.69:                                       ; preds = %lor.lhs.false.62
  %53 = load %struct.rtx_def*, %struct.rtx_def** %scratch.addr, align 8
  %54 = load %struct.rtx_def*, %struct.rtx_def** %scratch.addr, align 8
  %call70 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 69)
  %call71 = call %struct.rtx_def* @gen_andqi_ext_0(%struct.rtx_def* %53, %struct.rtx_def* %54, %struct.rtx_def* %call70)
  %call72 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call71)
  %55 = load %struct.rtx_def*, %struct.rtx_def** %scratch.addr, align 8
  %56 = load %struct.rtx_def*, %struct.rtx_def** %scratch.addr, align 8
  %57 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 63), align 8
  %call73 = call %struct.rtx_def* @gen_addqi_ext_1(%struct.rtx_def* %55, %struct.rtx_def* %56, %struct.rtx_def* %57)
  %call74 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call73)
  %58 = load %struct.rtx_def*, %struct.rtx_def** %scratch.addr, align 8
  %call75 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 68)
  %call76 = call %struct.rtx_def* @gen_cmpqi_ext_3(%struct.rtx_def* %58, %struct.rtx_def* %call75)
  %call77 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call76)
  store i32 52, i32* %intcmp_mode, align 4
  store i32 108, i32* %code.addr, align 4
  br label %if.end.78

if.end.78:                                        ; preds = %if.else.69, %if.then.65
  br label %sw.epilog

sw.bb.79:                                         ; preds = %if.end.58, %if.end.58
  %59 = load i32, i32* %code.addr, align 4
  %cmp80 = icmp eq i32 %59, 107
  br i1 %cmp80, label %land.lhs.true.81, label %if.else.91

land.lhs.true.81:                                 ; preds = %sw.bb.79
  %60 = load i32, i32* @target_flags, align 4
  %and82 = and i32 %60, 16
  %tobool83 = icmp ne i32 %and82, 0
  br i1 %tobool83, label %if.then.84, label %if.else.91

if.then.84:                                       ; preds = %land.lhs.true.81
  %61 = load %struct.rtx_def*, %struct.rtx_def** %scratch.addr, align 8
  %62 = load %struct.rtx_def*, %struct.rtx_def** %scratch.addr, align 8
  %call85 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 69)
  %call86 = call %struct.rtx_def* @gen_andqi_ext_0(%struct.rtx_def* %61, %struct.rtx_def* %62, %struct.rtx_def* %call85)
  %call87 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call86)
  %63 = load %struct.rtx_def*, %struct.rtx_def** %scratch.addr, align 8
  %call88 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 1)
  %call89 = call %struct.rtx_def* @gen_cmpqi_ext_3(%struct.rtx_def* %63, %struct.rtx_def* %call88)
  %call90 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call89)
  store i32 52, i32* %intcmp_mode, align 4
  store i32 103, i32* %code.addr, align 4
  br label %if.end.95

if.else.91:                                       ; preds = %land.lhs.true.81, %sw.bb.79
  %64 = load %struct.rtx_def*, %struct.rtx_def** %scratch.addr, align 8
  %call92 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 1)
  %call93 = call %struct.rtx_def* @gen_testqi_ext_ccno_0(%struct.rtx_def* %64, %struct.rtx_def* %call92)
  %call94 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call93)
  store i32 102, i32* %code.addr, align 4
  br label %if.end.95

if.end.95:                                        ; preds = %if.else.91, %if.then.84
  br label %sw.epilog

sw.bb.96:                                         ; preds = %if.end.58, %if.end.58
  %65 = load i32, i32* %code.addr, align 4
  %cmp97 = icmp eq i32 %65, 104
  br i1 %cmp97, label %if.then.101, label %lor.lhs.false.98

lor.lhs.false.98:                                 ; preds = %sw.bb.96
  %66 = load i32, i32* @target_flags, align 4
  %and99 = and i32 %66, 16
  %tobool100 = icmp ne i32 %and99, 0
  br i1 %tobool100, label %if.else.105, label %if.then.101

if.then.101:                                      ; preds = %lor.lhs.false.98, %sw.bb.96
  %67 = load %struct.rtx_def*, %struct.rtx_def** %scratch.addr, align 8
  %call102 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 5)
  %call103 = call %struct.rtx_def* @gen_testqi_ext_ccno_0(%struct.rtx_def* %67, %struct.rtx_def* %call102)
  %call104 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call103)
  store i32 103, i32* %code.addr, align 4
  br label %if.end.112

if.else.105:                                      ; preds = %lor.lhs.false.98
  %68 = load %struct.rtx_def*, %struct.rtx_def** %scratch.addr, align 8
  %69 = load %struct.rtx_def*, %struct.rtx_def** %scratch.addr, align 8
  %call106 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 69)
  %call107 = call %struct.rtx_def* @gen_andqi_ext_0(%struct.rtx_def* %68, %struct.rtx_def* %69, %struct.rtx_def* %call106)
  %call108 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call107)
  %70 = load %struct.rtx_def*, %struct.rtx_def** %scratch.addr, align 8
  %71 = load %struct.rtx_def*, %struct.rtx_def** %scratch.addr, align 8
  %call109 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 1)
  %call110 = call %struct.rtx_def* @gen_xorqi_cc_ext_1(%struct.rtx_def* %70, %struct.rtx_def* %71, %struct.rtx_def* %call109)
  %call111 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call110)
  store i32 102, i32* %code.addr, align 4
  br label %if.end.112

if.end.112:                                       ; preds = %if.else.105, %if.then.101
  br label %sw.epilog

sw.bb.113:                                        ; preds = %if.end.58, %if.end.58
  %72 = load i32, i32* %code.addr, align 4
  %cmp114 = icmp eq i32 %72, 106
  br i1 %cmp114, label %land.lhs.true.115, label %if.else.127

land.lhs.true.115:                                ; preds = %sw.bb.113
  %73 = load i32, i32* @target_flags, align 4
  %and116 = and i32 %73, 16
  %tobool117 = icmp ne i32 %and116, 0
  br i1 %tobool117, label %if.then.118, label %if.else.127

if.then.118:                                      ; preds = %land.lhs.true.115
  %74 = load %struct.rtx_def*, %struct.rtx_def** %scratch.addr, align 8
  %75 = load %struct.rtx_def*, %struct.rtx_def** %scratch.addr, align 8
  %call119 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 69)
  %call120 = call %struct.rtx_def* @gen_andqi_ext_0(%struct.rtx_def* %74, %struct.rtx_def* %75, %struct.rtx_def* %call119)
  %call121 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call120)
  %76 = load %struct.rtx_def*, %struct.rtx_def** %scratch.addr, align 8
  %77 = load %struct.rtx_def*, %struct.rtx_def** %scratch.addr, align 8
  %78 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 63), align 8
  %call122 = call %struct.rtx_def* @gen_addqi_ext_1(%struct.rtx_def* %76, %struct.rtx_def* %77, %struct.rtx_def* %78)
  %call123 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call122)
  %79 = load %struct.rtx_def*, %struct.rtx_def** %scratch.addr, align 8
  %call124 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 64)
  %call125 = call %struct.rtx_def* @gen_cmpqi_ext_3(%struct.rtx_def* %79, %struct.rtx_def* %call124)
  %call126 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call125)
  store i32 52, i32* %intcmp_mode, align 4
  store i32 111, i32* %code.addr, align 4
  br label %if.end.131

if.else.127:                                      ; preds = %land.lhs.true.115, %sw.bb.113
  %80 = load %struct.rtx_def*, %struct.rtx_def** %scratch.addr, align 8
  %call128 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 69)
  %call129 = call %struct.rtx_def* @gen_testqi_ext_ccno_0(%struct.rtx_def* %80, %struct.rtx_def* %call128)
  %call130 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call129)
  store i32 102, i32* %code.addr, align 4
  br label %if.end.131

if.end.131:                                       ; preds = %if.else.127, %if.then.118
  br label %sw.epilog

sw.bb.132:                                        ; preds = %if.end.58, %if.end.58
  %81 = load i32, i32* %code.addr, align 4
  %cmp133 = icmp eq i32 %81, 103
  br i1 %cmp133, label %land.lhs.true.134, label %if.else.144

land.lhs.true.134:                                ; preds = %sw.bb.132
  %82 = load i32, i32* @target_flags, align 4
  %and135 = and i32 %82, 16
  %tobool136 = icmp ne i32 %and135, 0
  br i1 %tobool136, label %if.then.137, label %if.else.144

if.then.137:                                      ; preds = %land.lhs.true.134
  %83 = load %struct.rtx_def*, %struct.rtx_def** %scratch.addr, align 8
  %84 = load %struct.rtx_def*, %struct.rtx_def** %scratch.addr, align 8
  %call138 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 69)
  %call139 = call %struct.rtx_def* @gen_andqi_ext_0(%struct.rtx_def* %83, %struct.rtx_def* %84, %struct.rtx_def* %call138)
  %call140 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call139)
  %85 = load %struct.rtx_def*, %struct.rtx_def** %scratch.addr, align 8
  %call141 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 64)
  %call142 = call %struct.rtx_def* @gen_cmpqi_ext_3(%struct.rtx_def* %85, %struct.rtx_def* %call141)
  %call143 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call142)
  store i32 52, i32* %intcmp_mode, align 4
  store i32 103, i32* %code.addr, align 4
  br label %if.end.148

if.else.144:                                      ; preds = %land.lhs.true.134, %sw.bb.132
  %86 = load %struct.rtx_def*, %struct.rtx_def** %scratch.addr, align 8
  %call145 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 64)
  %call146 = call %struct.rtx_def* @gen_testqi_ext_ccno_0(%struct.rtx_def* %86, %struct.rtx_def* %call145)
  %call147 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call146)
  store i32 102, i32* %code.addr, align 4
  br label %sw.epilog

if.end.148:                                       ; preds = %if.then.137
  br label %sw.epilog

sw.bb.149:                                        ; preds = %if.end.58, %if.end.58
  %87 = load i32, i32* %code.addr, align 4
  %cmp150 = icmp eq i32 %87, 102
  br i1 %cmp150, label %land.lhs.true.151, label %if.else.161

land.lhs.true.151:                                ; preds = %sw.bb.149
  %88 = load i32, i32* @target_flags, align 4
  %and152 = and i32 %88, 16
  %tobool153 = icmp ne i32 %and152, 0
  br i1 %tobool153, label %if.then.154, label %if.else.161

if.then.154:                                      ; preds = %land.lhs.true.151
  %89 = load %struct.rtx_def*, %struct.rtx_def** %scratch.addr, align 8
  %90 = load %struct.rtx_def*, %struct.rtx_def** %scratch.addr, align 8
  %call155 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 69)
  %call156 = call %struct.rtx_def* @gen_andqi_ext_0(%struct.rtx_def* %89, %struct.rtx_def* %90, %struct.rtx_def* %call155)
  %call157 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call156)
  %91 = load %struct.rtx_def*, %struct.rtx_def** %scratch.addr, align 8
  %92 = load %struct.rtx_def*, %struct.rtx_def** %scratch.addr, align 8
  %call158 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 64)
  %call159 = call %struct.rtx_def* @gen_xorqi_cc_ext_1(%struct.rtx_def* %91, %struct.rtx_def* %92, %struct.rtx_def* %call158)
  %call160 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call159)
  store i32 102, i32* %code.addr, align 4
  br label %if.end.165

if.else.161:                                      ; preds = %land.lhs.true.151, %sw.bb.149
  %93 = load %struct.rtx_def*, %struct.rtx_def** %scratch.addr, align 8
  %call162 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 64)
  %call163 = call %struct.rtx_def* @gen_testqi_ext_ccno_0(%struct.rtx_def* %93, %struct.rtx_def* %call162)
  %call164 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call163)
  store i32 103, i32* %code.addr, align 4
  br label %if.end.165

if.end.165:                                       ; preds = %if.else.161, %if.then.154
  br label %sw.epilog

sw.bb.166:                                        ; preds = %if.end.58
  %94 = load %struct.rtx_def*, %struct.rtx_def** %scratch.addr, align 8
  %call167 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 4)
  %call168 = call %struct.rtx_def* @gen_testqi_ext_ccno_0(%struct.rtx_def* %94, %struct.rtx_def* %call167)
  %call169 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call168)
  store i32 102, i32* %code.addr, align 4
  br label %sw.epilog

sw.bb.170:                                        ; preds = %if.end.58
  %95 = load %struct.rtx_def*, %struct.rtx_def** %scratch.addr, align 8
  %call171 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 4)
  %call172 = call %struct.rtx_def* @gen_testqi_ext_ccno_0(%struct.rtx_def* %95, %struct.rtx_def* %call171)
  %call173 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call172)
  store i32 103, i32* %code.addr, align 4
  br label %sw.epilog

sw.default:                                       ; preds = %if.end.58
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 7655, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @__FUNCTION__.ix86_expand_fp_compare, i32 0, i32 0)) #7
  unreachable

sw.epilog:                                        ; preds = %sw.bb.170, %sw.bb.166, %if.end.165, %if.end.148, %if.else.144, %if.end.131, %if.end.112, %if.end.95, %if.end.78
  br label %if.end.174

if.end.174:                                       ; preds = %sw.epilog, %if.end.50
  %96 = load i32, i32* %code.addr, align 4
  %97 = load i32, i32* %intcmp_mode, align 4
  %call175 = call %struct.rtx_def* @gen_rtx_REG(i32 %97, i32 17)
  %98 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call176 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 %96, i32 0, %struct.rtx_def* %call175, %struct.rtx_def* %98)
  ret %struct.rtx_def* %call176
}

; Function Attrs: nounwind uwtable
define internal %struct.rtx_def* @ix86_expand_int_compare(i32 %code, %struct.rtx_def* %op0, %struct.rtx_def* %op1) #1 {
entry:
  %code.addr = alloca i32, align 4
  %op0.addr = alloca %struct.rtx_def*, align 8
  %op1.addr = alloca %struct.rtx_def*, align 8
  %cmpmode = alloca i32, align 4
  %tmp = alloca %struct.rtx_def*, align 8
  %flags = alloca %struct.rtx_def*, align 8
  store i32 %code, i32* %code.addr, align 4
  store %struct.rtx_def* %op0, %struct.rtx_def** %op0.addr, align 8
  store %struct.rtx_def* %op1, %struct.rtx_def** %op1.addr, align 8
  %0 = load i32, i32* %code.addr, align 4
  %1 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8
  %call = call i32 @ix86_cc_mode(i32 %0, %struct.rtx_def* %1, %struct.rtx_def* %2)
  store i32 %call, i32* %cmpmode, align 4
  %3 = load i32, i32* %cmpmode, align 4
  %call2 = call %struct.rtx_def* @gen_rtx_REG(i32 %3, i32 17)
  store %struct.rtx_def* %call2, %struct.rtx_def** %flags, align 8
  %4 = load i32, i32* %cmpmode, align 4
  %5 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 74, i32 %4, %struct.rtx_def* %5, %struct.rtx_def* %6)
  store %struct.rtx_def* %call3, %struct.rtx_def** %tmp, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %flags, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %7, %struct.rtx_def* %8)
  %call5 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call4)
  %9 = load i32, i32* %code.addr, align 4
  %10 = load %struct.rtx_def*, %struct.rtx_def** %flags, align 8
  %11 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 %9, i32 0, %struct.rtx_def* %10, %struct.rtx_def* %11)
  ret %struct.rtx_def* %call6
}

; Function Attrs: nounwind uwtable
define zeroext i1 @ix86_fp_jump_nontrivial_p(i32 %code) #1 {
entry:
  %retval = alloca i1, align 1
  %code.addr = alloca i32, align 4
  %bypass_code = alloca i32, align 4
  %first_code = alloca i32, align 4
  %second_code = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  %0 = load i32, i32* @ix86_arch, align 4
  %shl = shl i32 1, %0
  %and = and i32 104, %shl
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* @target_flags, align 4
  %and1 = and i32 %1, 327680
  %cmp = icmp ne i32 %and1, 0
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false
  store i1 true, i1* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false, %entry
  %2 = load i32, i32* %code.addr, align 4
  call void @ix86_fp_comparison_codes(i32 %2, i32* %bypass_code, i32* %first_code, i32* %second_code)
  %3 = load i32, i32* %bypass_code, align 4
  %cmp2 = icmp ne i32 %3, 1
  br i1 %cmp2, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.end
  %4 = load i32, i32* %second_code, align 4
  %cmp3 = icmp ne i32 %4, 1
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.end
  %5 = phi i1 [ true, %if.end ], [ %cmp3, %lor.rhs ]
  store i1 %5, i1* %retval
  br label %return

return:                                           ; preds = %lor.end, %if.then
  %6 = load i1, i1* %retval
  ret i1 %6
}

; Function Attrs: nounwind uwtable
define void @ix86_expand_branch(i32 %code, %struct.rtx_def* %label) #1 {
entry:
  %code.addr = alloca i32, align 4
  %label.addr = alloca %struct.rtx_def*, align 8
  %tmp = alloca %struct.rtx_def*, align 8
  %vec = alloca %struct.rtvec_def*, align 8
  %use_fcomi = alloca i32, align 4
  %bypass_code = alloca i32, align 4
  %first_code = alloca i32, align 4
  %second_code = alloca i32, align 4
  %lo = alloca [2 x %struct.rtx_def*], align 16
  %hi = alloca [2 x %struct.rtx_def*], align 16
  %label2 = alloca %struct.rtx_def*, align 8
  %code1 = alloca i32, align 4
  %code2 = alloca i32, align 4
  %code3 = alloca i32, align 4
  %xor0 = alloca %struct.rtx_def*, align 8
  %xor1 = alloca %struct.rtx_def*, align 8
  store i32 %code, i32* %code.addr, align 4
  store %struct.rtx_def* %label, %struct.rtx_def** %label.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** @ix86_compare_op0, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  switch i32 %bf.clear, label %sw.default.192 [
    i32 2, label %sw.bb
    i32 3, label %sw.bb
    i32 4, label %sw.bb
    i32 15, label %sw.bb.5
    i32 16, label %sw.bb.5
    i32 17, label %sw.bb.5
    i32 18, label %sw.bb.5
    i32 5, label %sw.bb.41
  ]

sw.bb:                                            ; preds = %entry, %entry, %entry
  br label %simple

simple:                                           ; preds = %if.then.44, %sw.bb
  %2 = load i32, i32* %code.addr, align 4
  %call = call %struct.rtx_def* @ix86_expand_compare(i32 %2, %struct.rtx_def** null, %struct.rtx_def** null)
  store %struct.rtx_def* %call, %struct.rtx_def** %tmp, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %label.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_u00(i32 67, i32 0, %struct.rtx_def* %4)
  %5 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 0), align 8
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 72, i32 0, %struct.rtx_def* %3, %struct.rtx_def* %call1, %struct.rtx_def* %5)
  store %struct.rtx_def* %call2, %struct.rtx_def** %tmp, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 0), align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %6, %struct.rtx_def* %7)
  %call4 = call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %call3)
  br label %return

sw.bb.5:                                          ; preds = %entry, %entry, %entry, %entry
  %8 = load i32, i32* %code.addr, align 4
  %call11 = call i32 @ix86_prepare_fp_compare_args(i32 %8, %struct.rtx_def** @ix86_compare_op0, %struct.rtx_def** @ix86_compare_op1)
  store i32 %call11, i32* %code.addr, align 4
  %9 = load i32, i32* %code.addr, align 4
  call void @ix86_fp_comparison_codes(i32 %9, i32* %bypass_code, i32* %first_code, i32* %second_code)
  %10 = load i32, i32* %bypass_code, align 4
  %cmp = icmp eq i32 %10, 1
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %sw.bb.5
  %11 = load i32, i32* %second_code, align 4
  %cmp12 = icmp eq i32 %11, 1
  br i1 %cmp12, label %land.lhs.true.13, label %if.else

land.lhs.true.13:                                 ; preds = %land.lhs.true
  %12 = load i32, i32* @ix86_arch, align 4
  %shl = shl i32 1, %12
  %and = and i32 104, %shl
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.13
  %13 = load i32, i32* @target_flags, align 4
  %and14 = and i32 %13, 327680
  %cmp15 = icmp ne i32 %and14, 0
  br i1 %cmp15, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true.13
  %14 = load i32, i32* %code.addr, align 4
  %15 = load %struct.rtx_def*, %struct.rtx_def** @ix86_compare_op0, align 8
  %16 = load %struct.rtx_def*, %struct.rtx_def** @ix86_compare_op1, align 8
  %17 = load %struct.rtx_def*, %struct.rtx_def** %label.addr, align 8
  %call16 = call %struct.rtx_def* @gen_rtx_fmt_u00(i32 67, i32 0, %struct.rtx_def* %17)
  %18 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 0), align 8
  call void @ix86_split_fp_branch(i32 %14, %struct.rtx_def* %15, %struct.rtx_def* %16, %struct.rtx_def* %call16, %struct.rtx_def* %18, %struct.rtx_def* null)
  br label %if.end.40

if.else:                                          ; preds = %lor.lhs.false, %land.lhs.true, %sw.bb.5
  %19 = load i32, i32* %code.addr, align 4
  %20 = load %struct.rtx_def*, %struct.rtx_def** @ix86_compare_op0, align 8
  %21 = load %struct.rtx_def*, %struct.rtx_def** @ix86_compare_op1, align 8
  %call17 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 %19, i32 0, %struct.rtx_def* %20, %struct.rtx_def* %21)
  store %struct.rtx_def* %call17, %struct.rtx_def** %tmp, align 8
  %22 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %23 = load %struct.rtx_def*, %struct.rtx_def** %label.addr, align 8
  %call18 = call %struct.rtx_def* @gen_rtx_fmt_u00(i32 67, i32 0, %struct.rtx_def* %23)
  %24 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 0), align 8
  %call19 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 72, i32 0, %struct.rtx_def* %22, %struct.rtx_def* %call18, %struct.rtx_def* %24)
  store %struct.rtx_def* %call19, %struct.rtx_def** %tmp, align 8
  %25 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 0), align 8
  %26 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %call20 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %25, %struct.rtx_def* %26)
  store %struct.rtx_def* %call20, %struct.rtx_def** %tmp, align 8
  %27 = load i32, i32* %code.addr, align 4
  %call21 = call i32 @ix86_use_fcomi_compare(i32 %27)
  store i32 %call21, i32* %use_fcomi, align 4
  %28 = load i32, i32* %use_fcomi, align 4
  %tobool22 = icmp ne i32 %28, 0
  %lnot = xor i1 %tobool22, true
  %lnot.ext = zext i1 %lnot to i32
  %add = add nsw i32 3, %lnot.ext
  %call23 = call %struct.rtvec_def* @rtvec_alloc(i32 %add)
  store %struct.rtvec_def* %call23, %struct.rtvec_def** %vec, align 8
  %29 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %30 = load %struct.rtvec_def*, %struct.rtvec_def** %vec, align 8
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %30, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i32 0, i64 0
  store %struct.rtx_def* %29, %struct.rtx_def** %arrayidx, align 8
  %call24 = call %struct.rtx_def* @gen_rtx_REG(i32 57, i32 18)
  %call25 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call24)
  %31 = load %struct.rtvec_def*, %struct.rtvec_def** %vec, align 8
  %elem26 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %31, i32 0, i32 1
  %arrayidx27 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem26, i32 0, i64 1
  store %struct.rtx_def* %call25, %struct.rtx_def** %arrayidx27, align 8
  %call28 = call %struct.rtx_def* @gen_rtx_REG(i32 57, i32 17)
  %call29 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call28)
  %32 = load %struct.rtvec_def*, %struct.rtvec_def** %vec, align 8
  %elem30 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %32, i32 0, i32 1
  %arrayidx31 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem30, i32 0, i64 2
  store %struct.rtx_def* %call29, %struct.rtx_def** %arrayidx31, align 8
  %33 = load i32, i32* %use_fcomi, align 4
  %tobool32 = icmp ne i32 %33, 0
  br i1 %tobool32, label %if.end, label %if.then.33

if.then.33:                                       ; preds = %if.else
  %call34 = call %struct.rtx_def* @gen_rtx_fmt_0(i32 62, i32 3)
  %call35 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call34)
  %34 = load %struct.rtvec_def*, %struct.rtvec_def** %vec, align 8
  %elem36 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %34, i32 0, i32 1
  %arrayidx37 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem36, i32 0, i64 3
  store %struct.rtx_def* %call35, %struct.rtx_def** %arrayidx37, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.33, %if.else
  %35 = load %struct.rtvec_def*, %struct.rtvec_def** %vec, align 8
  %call38 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %35)
  %call39 = call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %call38)
  br label %if.end.40

if.end.40:                                        ; preds = %if.end, %if.then
  br label %return

sw.bb.41:                                         ; preds = %entry
  %36 = load i32, i32* @target_flags, align 4
  %and42 = and i32 %36, 33554432
  %tobool43 = icmp ne i32 %and42, 0
  br i1 %tobool43, label %if.then.44, label %if.end.45

if.then.44:                                       ; preds = %sw.bb.41
  br label %simple

if.end.45:                                        ; preds = %sw.bb.41
  %37 = load %struct.rtx_def*, %struct.rtx_def** @ix86_compare_op0, align 8
  %38 = bitcast %struct.rtx_def* %37 to i32*
  %bf.load52 = load i32, i32* %38, align 8
  %bf.clear53 = and i32 %bf.load52, 65535
  %cmp54 = icmp eq i32 %bf.clear53, 67
  br i1 %cmp54, label %land.lhs.true.83, label %lor.lhs.false.55

lor.lhs.false.55:                                 ; preds = %if.end.45
  %39 = load %struct.rtx_def*, %struct.rtx_def** @ix86_compare_op0, align 8
  %40 = bitcast %struct.rtx_def* %39 to i32*
  %bf.load56 = load i32, i32* %40, align 8
  %bf.clear57 = and i32 %bf.load56, 65535
  %cmp58 = icmp eq i32 %bf.clear57, 68
  br i1 %cmp58, label %land.lhs.true.83, label %lor.lhs.false.59

lor.lhs.false.59:                                 ; preds = %lor.lhs.false.55
  %41 = load %struct.rtx_def*, %struct.rtx_def** @ix86_compare_op0, align 8
  %42 = bitcast %struct.rtx_def* %41 to i32*
  %bf.load60 = load i32, i32* %42, align 8
  %bf.clear61 = and i32 %bf.load60, 65535
  %cmp62 = icmp eq i32 %bf.clear61, 54
  br i1 %cmp62, label %land.lhs.true.83, label %lor.lhs.false.63

lor.lhs.false.63:                                 ; preds = %lor.lhs.false.59
  %43 = load %struct.rtx_def*, %struct.rtx_def** @ix86_compare_op0, align 8
  %44 = bitcast %struct.rtx_def* %43 to i32*
  %bf.load64 = load i32, i32* %44, align 8
  %bf.clear65 = and i32 %bf.load64, 65535
  %cmp66 = icmp eq i32 %bf.clear65, 55
  br i1 %cmp66, label %land.lhs.true.83, label %lor.lhs.false.67

lor.lhs.false.67:                                 ; preds = %lor.lhs.false.63
  %45 = load %struct.rtx_def*, %struct.rtx_def** @ix86_compare_op0, align 8
  %46 = bitcast %struct.rtx_def* %45 to i32*
  %bf.load68 = load i32, i32* %46, align 8
  %bf.clear69 = and i32 %bf.load68, 65535
  %cmp70 = icmp eq i32 %bf.clear69, 58
  br i1 %cmp70, label %land.lhs.true.83, label %lor.lhs.false.71

lor.lhs.false.71:                                 ; preds = %lor.lhs.false.67
  %47 = load %struct.rtx_def*, %struct.rtx_def** @ix86_compare_op0, align 8
  %48 = bitcast %struct.rtx_def* %47 to i32*
  %bf.load72 = load i32, i32* %48, align 8
  %bf.clear73 = and i32 %bf.load72, 65535
  %cmp74 = icmp eq i32 %bf.clear73, 134
  br i1 %cmp74, label %land.lhs.true.83, label %lor.lhs.false.75

lor.lhs.false.75:                                 ; preds = %lor.lhs.false.71
  %49 = load %struct.rtx_def*, %struct.rtx_def** @ix86_compare_op0, align 8
  %50 = bitcast %struct.rtx_def* %49 to i32*
  %bf.load76 = load i32, i32* %50, align 8
  %bf.clear77 = and i32 %bf.load76, 65535
  %cmp78 = icmp eq i32 %bf.clear77, 56
  br i1 %cmp78, label %land.lhs.true.83, label %lor.lhs.false.79

lor.lhs.false.79:                                 ; preds = %lor.lhs.false.75
  %51 = load %struct.rtx_def*, %struct.rtx_def** @ix86_compare_op0, align 8
  %52 = bitcast %struct.rtx_def* %51 to i32*
  %bf.load80 = load i32, i32* %52, align 8
  %bf.clear81 = and i32 %bf.load80, 65535
  %cmp82 = icmp eq i32 %bf.clear81, 140
  br i1 %cmp82, label %land.lhs.true.83, label %if.end.117

land.lhs.true.83:                                 ; preds = %lor.lhs.false.79, %lor.lhs.false.75, %lor.lhs.false.71, %lor.lhs.false.67, %lor.lhs.false.63, %lor.lhs.false.59, %lor.lhs.false.55, %if.end.45
  %53 = load %struct.rtx_def*, %struct.rtx_def** @ix86_compare_op1, align 8
  %54 = bitcast %struct.rtx_def* %53 to i32*
  %bf.load84 = load i32, i32* %54, align 8
  %bf.clear85 = and i32 %bf.load84, 65535
  %cmp86 = icmp eq i32 %bf.clear85, 67
  br i1 %cmp86, label %if.end.117, label %lor.lhs.false.87

lor.lhs.false.87:                                 ; preds = %land.lhs.true.83
  %55 = load %struct.rtx_def*, %struct.rtx_def** @ix86_compare_op1, align 8
  %56 = bitcast %struct.rtx_def* %55 to i32*
  %bf.load88 = load i32, i32* %56, align 8
  %bf.clear89 = and i32 %bf.load88, 65535
  %cmp90 = icmp eq i32 %bf.clear89, 68
  br i1 %cmp90, label %if.end.117, label %lor.lhs.false.91

lor.lhs.false.91:                                 ; preds = %lor.lhs.false.87
  %57 = load %struct.rtx_def*, %struct.rtx_def** @ix86_compare_op1, align 8
  %58 = bitcast %struct.rtx_def* %57 to i32*
  %bf.load92 = load i32, i32* %58, align 8
  %bf.clear93 = and i32 %bf.load92, 65535
  %cmp94 = icmp eq i32 %bf.clear93, 54
  br i1 %cmp94, label %if.end.117, label %lor.lhs.false.95

lor.lhs.false.95:                                 ; preds = %lor.lhs.false.91
  %59 = load %struct.rtx_def*, %struct.rtx_def** @ix86_compare_op1, align 8
  %60 = bitcast %struct.rtx_def* %59 to i32*
  %bf.load96 = load i32, i32* %60, align 8
  %bf.clear97 = and i32 %bf.load96, 65535
  %cmp98 = icmp eq i32 %bf.clear97, 55
  br i1 %cmp98, label %if.end.117, label %lor.lhs.false.99

lor.lhs.false.99:                                 ; preds = %lor.lhs.false.95
  %61 = load %struct.rtx_def*, %struct.rtx_def** @ix86_compare_op1, align 8
  %62 = bitcast %struct.rtx_def* %61 to i32*
  %bf.load100 = load i32, i32* %62, align 8
  %bf.clear101 = and i32 %bf.load100, 65535
  %cmp102 = icmp eq i32 %bf.clear101, 58
  br i1 %cmp102, label %if.end.117, label %lor.lhs.false.103

lor.lhs.false.103:                                ; preds = %lor.lhs.false.99
  %63 = load %struct.rtx_def*, %struct.rtx_def** @ix86_compare_op1, align 8
  %64 = bitcast %struct.rtx_def* %63 to i32*
  %bf.load104 = load i32, i32* %64, align 8
  %bf.clear105 = and i32 %bf.load104, 65535
  %cmp106 = icmp eq i32 %bf.clear105, 134
  br i1 %cmp106, label %if.end.117, label %lor.lhs.false.107

lor.lhs.false.107:                                ; preds = %lor.lhs.false.103
  %65 = load %struct.rtx_def*, %struct.rtx_def** @ix86_compare_op1, align 8
  %66 = bitcast %struct.rtx_def* %65 to i32*
  %bf.load108 = load i32, i32* %66, align 8
  %bf.clear109 = and i32 %bf.load108, 65535
  %cmp110 = icmp eq i32 %bf.clear109, 56
  br i1 %cmp110, label %if.end.117, label %lor.lhs.false.111

lor.lhs.false.111:                                ; preds = %lor.lhs.false.107
  %67 = load %struct.rtx_def*, %struct.rtx_def** @ix86_compare_op1, align 8
  %68 = bitcast %struct.rtx_def* %67 to i32*
  %bf.load112 = load i32, i32* %68, align 8
  %bf.clear113 = and i32 %bf.load112, 65535
  %cmp114 = icmp eq i32 %bf.clear113, 140
  br i1 %cmp114, label %if.end.117, label %if.then.115

if.then.115:                                      ; preds = %lor.lhs.false.111
  %69 = load %struct.rtx_def*, %struct.rtx_def** @ix86_compare_op0, align 8
  store %struct.rtx_def* %69, %struct.rtx_def** %tmp, align 8
  %70 = load %struct.rtx_def*, %struct.rtx_def** @ix86_compare_op1, align 8
  store %struct.rtx_def* %70, %struct.rtx_def** @ix86_compare_op0, align 8
  %71 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  store %struct.rtx_def* %71, %struct.rtx_def** @ix86_compare_op1, align 8
  %72 = load i32, i32* %code.addr, align 4
  %call116 = call i32 @swap_condition(i32 %72)
  store i32 %call116, i32* %code.addr, align 4
  br label %if.end.117

if.end.117:                                       ; preds = %if.then.115, %lor.lhs.false.111, %lor.lhs.false.107, %lor.lhs.false.103, %lor.lhs.false.99, %lor.lhs.false.95, %lor.lhs.false.91, %lor.lhs.false.87, %land.lhs.true.83, %lor.lhs.false.79
  %arraydecay = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %lo, i32 0, i32 0
  %add.ptr = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %arraydecay, i64 0
  %arraydecay118 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %hi, i32 0, i32 0
  %add.ptr119 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %arraydecay118, i64 0
  call void @split_di(%struct.rtx_def** @ix86_compare_op0, i32 1, %struct.rtx_def** %add.ptr, %struct.rtx_def** %add.ptr119)
  %arraydecay120 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %lo, i32 0, i32 0
  %add.ptr121 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %arraydecay120, i64 1
  %arraydecay122 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %hi, i32 0, i32 0
  %add.ptr123 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %arraydecay122, i64 1
  call void @split_di(%struct.rtx_def** @ix86_compare_op1, i32 1, %struct.rtx_def** %add.ptr121, %struct.rtx_def** %add.ptr123)
  %73 = load i32, i32* %code.addr, align 4
  %cmp124 = icmp eq i32 %73, 103
  br i1 %cmp124, label %land.lhs.true.127, label %lor.lhs.false.125

lor.lhs.false.125:                                ; preds = %if.end.117
  %74 = load i32, i32* %code.addr, align 4
  %cmp126 = icmp eq i32 %74, 102
  br i1 %cmp126, label %land.lhs.true.127, label %if.end.153

land.lhs.true.127:                                ; preds = %lor.lhs.false.125, %if.end.117
  %75 = load i32, i32* @optimize_size, align 4
  %tobool128 = icmp ne i32 %75, 0
  br i1 %tobool128, label %lor.lhs.false.129, label %if.then.135

lor.lhs.false.129:                                ; preds = %land.lhs.true.127
  %arrayidx130 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %hi, i32 0, i64 1
  %76 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx130, align 8
  %77 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %cmp131 = icmp eq %struct.rtx_def* %76, %77
  br i1 %cmp131, label %if.then.135, label %lor.lhs.false.132

lor.lhs.false.132:                                ; preds = %lor.lhs.false.129
  %arrayidx133 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %lo, i32 0, i64 1
  %78 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx133, align 8
  %79 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %cmp134 = icmp eq %struct.rtx_def* %78, %79
  br i1 %cmp134, label %if.then.135, label %if.end.153

if.then.135:                                      ; preds = %lor.lhs.false.132, %lor.lhs.false.129, %land.lhs.true.127
  %arrayidx138 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %hi, i32 0, i64 0
  %80 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx138, align 8
  store %struct.rtx_def* %80, %struct.rtx_def** %xor1, align 8
  %arrayidx139 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %hi, i32 0, i64 1
  %81 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx139, align 8
  %82 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %cmp140 = icmp ne %struct.rtx_def* %81, %82
  br i1 %cmp140, label %if.then.141, label %if.end.144

if.then.141:                                      ; preds = %if.then.135
  %83 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 20), align 8
  %84 = load %struct.rtx_def*, %struct.rtx_def** %xor1, align 8
  %arrayidx142 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %hi, i32 0, i64 1
  %85 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx142, align 8
  %call143 = call %struct.rtx_def* @expand_binop(i32 4, %struct.optab* %83, %struct.rtx_def* %84, %struct.rtx_def* %85, %struct.rtx_def* null, i32 0, i32 2)
  store %struct.rtx_def* %call143, %struct.rtx_def** %xor1, align 8
  br label %if.end.144

if.end.144:                                       ; preds = %if.then.141, %if.then.135
  %arrayidx145 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %lo, i32 0, i64 0
  %86 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx145, align 8
  store %struct.rtx_def* %86, %struct.rtx_def** %xor0, align 8
  %arrayidx146 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %lo, i32 0, i64 1
  %87 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx146, align 8
  %88 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %cmp147 = icmp ne %struct.rtx_def* %87, %88
  br i1 %cmp147, label %if.then.148, label %if.end.151

if.then.148:                                      ; preds = %if.end.144
  %89 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 20), align 8
  %90 = load %struct.rtx_def*, %struct.rtx_def** %xor0, align 8
  %arrayidx149 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %lo, i32 0, i64 1
  %91 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx149, align 8
  %call150 = call %struct.rtx_def* @expand_binop(i32 4, %struct.optab* %89, %struct.rtx_def* %90, %struct.rtx_def* %91, %struct.rtx_def* null, i32 0, i32 2)
  store %struct.rtx_def* %call150, %struct.rtx_def** %xor0, align 8
  br label %if.end.151

if.end.151:                                       ; preds = %if.then.148, %if.end.144
  %92 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 19), align 8
  %93 = load %struct.rtx_def*, %struct.rtx_def** %xor1, align 8
  %94 = load %struct.rtx_def*, %struct.rtx_def** %xor0, align 8
  %call152 = call %struct.rtx_def* @expand_binop(i32 4, %struct.optab* %92, %struct.rtx_def* %93, %struct.rtx_def* %94, %struct.rtx_def* null, i32 0, i32 2)
  store %struct.rtx_def* %call152, %struct.rtx_def** %tmp, align 8
  %95 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  store %struct.rtx_def* %95, %struct.rtx_def** @ix86_compare_op0, align 8
  %96 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  store %struct.rtx_def* %96, %struct.rtx_def** @ix86_compare_op1, align 8
  %97 = load i32, i32* %code.addr, align 4
  %98 = load %struct.rtx_def*, %struct.rtx_def** %label.addr, align 8
  call void @ix86_expand_branch(i32 %97, %struct.rtx_def* %98)
  br label %return

if.end.153:                                       ; preds = %lor.lhs.false.132, %lor.lhs.false.125
  %arrayidx154 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %hi, i32 0, i64 1
  %99 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx154, align 8
  %100 = bitcast %struct.rtx_def* %99 to i32*
  %bf.load155 = load i32, i32* %100, align 8
  %bf.clear156 = and i32 %bf.load155, 65535
  %cmp157 = icmp eq i32 %bf.clear156, 54
  br i1 %cmp157, label %land.lhs.true.158, label %if.end.165

land.lhs.true.158:                                ; preds = %if.end.153
  %arrayidx159 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %lo, i32 0, i64 1
  %101 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx159, align 8
  %102 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %cmp160 = icmp eq %struct.rtx_def* %101, %102
  br i1 %cmp160, label %if.then.161, label %if.end.165

if.then.161:                                      ; preds = %land.lhs.true.158
  %103 = load i32, i32* %code.addr, align 4
  switch i32 %103, label %sw.default [
    i32 107, label %sw.bb.162
    i32 111, label %sw.bb.162
    i32 104, label %sw.bb.162
    i32 108, label %sw.bb.162
  ]

sw.bb.162:                                        ; preds = %if.then.161, %if.then.161, %if.then.161, %if.then.161
  %arrayidx163 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %hi, i32 0, i64 0
  %104 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx163, align 8
  store %struct.rtx_def* %104, %struct.rtx_def** @ix86_compare_op0, align 8
  %arrayidx164 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %hi, i32 0, i64 1
  %105 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx164, align 8
  store %struct.rtx_def* %105, %struct.rtx_def** @ix86_compare_op1, align 8
  %106 = load i32, i32* %code.addr, align 4
  %107 = load %struct.rtx_def*, %struct.rtx_def** %label.addr, align 8
  call void @ix86_expand_branch(i32 %106, %struct.rtx_def* %107)
  br label %return

sw.default:                                       ; preds = %if.then.161
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default
  br label %if.end.165

if.end.165:                                       ; preds = %sw.epilog, %land.lhs.true.158, %if.end.153
  %call166 = call %struct.rtx_def* @gen_label_rtx()
  store %struct.rtx_def* %call166, %struct.rtx_def** %label2, align 8
  %108 = load i32, i32* %code.addr, align 4
  store i32 %108, i32* %code1, align 4
  %109 = load i32, i32* %code.addr, align 4
  %call167 = call i32 @swap_condition(i32 %109)
  store i32 %call167, i32* %code2, align 4
  %110 = load i32, i32* %code.addr, align 4
  %call168 = call i32 @unsigned_condition(i32 %110)
  store i32 %call168, i32* %code3, align 4
  %111 = load i32, i32* %code.addr, align 4
  switch i32 %111, label %sw.default.176 [
    i32 107, label %sw.bb.169
    i32 105, label %sw.bb.169
    i32 111, label %sw.bb.169
    i32 109, label %sw.bb.169
    i32 106, label %sw.bb.170
    i32 104, label %sw.bb.171
    i32 110, label %sw.bb.172
    i32 108, label %sw.bb.173
    i32 103, label %sw.bb.174
    i32 102, label %sw.bb.175
  ]

sw.bb.169:                                        ; preds = %if.end.165, %if.end.165, %if.end.165, %if.end.165
  br label %sw.epilog.177

sw.bb.170:                                        ; preds = %if.end.165
  store i32 107, i32* %code1, align 4
  store i32 105, i32* %code2, align 4
  br label %sw.epilog.177

sw.bb.171:                                        ; preds = %if.end.165
  store i32 105, i32* %code1, align 4
  store i32 107, i32* %code2, align 4
  br label %sw.epilog.177

sw.bb.172:                                        ; preds = %if.end.165
  store i32 111, i32* %code1, align 4
  store i32 109, i32* %code2, align 4
  br label %sw.epilog.177

sw.bb.173:                                        ; preds = %if.end.165
  store i32 109, i32* %code1, align 4
  store i32 111, i32* %code2, align 4
  br label %sw.epilog.177

sw.bb.174:                                        ; preds = %if.end.165
  store i32 1, i32* %code1, align 4
  store i32 102, i32* %code2, align 4
  br label %sw.epilog.177

sw.bb.175:                                        ; preds = %if.end.165
  store i32 1, i32* %code2, align 4
  br label %sw.epilog.177

sw.default.176:                                   ; preds = %if.end.165
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 7855, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__FUNCTION__.ix86_expand_branch, i32 0, i32 0)) #7
  unreachable

sw.epilog.177:                                    ; preds = %sw.bb.175, %sw.bb.174, %sw.bb.173, %sw.bb.172, %sw.bb.171, %sw.bb.170, %sw.bb.169
  %arrayidx178 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %hi, i32 0, i64 0
  %112 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx178, align 8
  store %struct.rtx_def* %112, %struct.rtx_def** @ix86_compare_op0, align 8
  %arrayidx179 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %hi, i32 0, i64 1
  %113 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx179, align 8
  store %struct.rtx_def* %113, %struct.rtx_def** @ix86_compare_op1, align 8
  %114 = load i32, i32* %code1, align 4
  %cmp180 = icmp ne i32 %114, 1
  br i1 %cmp180, label %if.then.181, label %if.end.182

if.then.181:                                      ; preds = %sw.epilog.177
  %115 = load i32, i32* %code1, align 4
  %116 = load %struct.rtx_def*, %struct.rtx_def** %label.addr, align 8
  call void @ix86_expand_branch(i32 %115, %struct.rtx_def* %116)
  br label %if.end.182

if.end.182:                                       ; preds = %if.then.181, %sw.epilog.177
  %117 = load i32, i32* %code2, align 4
  %cmp183 = icmp ne i32 %117, 1
  br i1 %cmp183, label %if.then.184, label %if.end.185

if.then.184:                                      ; preds = %if.end.182
  %118 = load i32, i32* %code2, align 4
  %119 = load %struct.rtx_def*, %struct.rtx_def** %label2, align 8
  call void @ix86_expand_branch(i32 %118, %struct.rtx_def* %119)
  br label %if.end.185

if.end.185:                                       ; preds = %if.then.184, %if.end.182
  %arrayidx186 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %lo, i32 0, i64 0
  %120 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx186, align 8
  store %struct.rtx_def* %120, %struct.rtx_def** @ix86_compare_op0, align 8
  %arrayidx187 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %lo, i32 0, i64 1
  %121 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx187, align 8
  store %struct.rtx_def* %121, %struct.rtx_def** @ix86_compare_op1, align 8
  %122 = load i32, i32* %code3, align 4
  %123 = load %struct.rtx_def*, %struct.rtx_def** %label.addr, align 8
  call void @ix86_expand_branch(i32 %122, %struct.rtx_def* %123)
  %124 = load i32, i32* %code2, align 4
  %cmp188 = icmp ne i32 %124, 1
  br i1 %cmp188, label %if.then.189, label %if.end.191

if.then.189:                                      ; preds = %if.end.185
  %125 = load %struct.rtx_def*, %struct.rtx_def** %label2, align 8
  %call190 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %125)
  br label %if.end.191

if.end.191:                                       ; preds = %if.then.189, %if.end.185
  br label %return

sw.default.192:                                   ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 7884, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__FUNCTION__.ix86_expand_branch, i32 0, i32 0)) #7
  unreachable

return:                                           ; preds = %if.end.191, %sw.bb.162, %if.end.151, %if.end.40, %simple
  ret void
}

declare %struct.rtx_def* @gen_rtx_fmt_eee(i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #0

; Function Attrs: nounwind uwtable
define internal i32 @ix86_prepare_fp_compare_args(i32 %code, %struct.rtx_def** %pop0, %struct.rtx_def** %pop1) #1 {
entry:
  %code.addr = alloca i32, align 4
  %pop0.addr = alloca %struct.rtx_def**, align 8
  %pop1.addr = alloca %struct.rtx_def**, align 8
  %fpcmp_mode = alloca i32, align 4
  %op0 = alloca %struct.rtx_def*, align 8
  %op1 = alloca %struct.rtx_def*, align 8
  %op_mode = alloca i32, align 4
  %is_sse = alloca i32, align 4
  %tmp = alloca %struct.rtx_def*, align 8
  %tmp131 = alloca %struct.rtx_def*, align 8
  store i32 %code, i32* %code.addr, align 4
  store %struct.rtx_def** %pop0, %struct.rtx_def*** %pop0.addr, align 8
  store %struct.rtx_def** %pop1, %struct.rtx_def*** %pop1.addr, align 8
  %0 = load i32, i32* %code.addr, align 4
  %call = call i32 @ix86_fp_compare_mode(i32 %0)
  store i32 %call, i32* %fpcmp_mode, align 4
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %pop0.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %1, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %op0, align 8
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %pop1.addr, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %3, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %op1, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %6 = bitcast %struct.rtx_def* %5 to i32*
  %bf.load = load i32, i32* %6, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  store i32 %bf.clear, i32* %op_mode, align 4
  %7 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %8 = bitcast %struct.rtx_def* %7 to i32*
  %bf.load1 = load i32, i32* %8, align 8
  %bf.clear2 = and i32 %bf.load1, 65535
  %cmp = icmp eq i32 %bf.clear2, 61
  br i1 %cmp, label %land.rhs, label %land.end.17

land.rhs:                                         ; preds = %entry
  %9 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx to i32*
  %10 = load i32, i32* %rtuint, align 4
  %cmp3 = icmp uge i32 %10, 21
  br i1 %cmp3, label %land.lhs.true, label %lor.rhs

land.lhs.true:                                    ; preds = %land.rhs
  %11 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %fld4 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1
  %arrayidx5 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld4, i32 0, i64 0
  %rtuint6 = bitcast %union.rtunion_def* %arrayidx5 to i32*
  %12 = load i32, i32* %rtuint6, align 4
  %cmp7 = icmp ule i32 %12, 28
  br i1 %cmp7, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.lhs.true, %land.rhs
  %13 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %fld8 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1
  %arrayidx9 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld8, i32 0, i64 0
  %rtuint10 = bitcast %union.rtunion_def* %arrayidx9 to i32*
  %14 = load i32, i32* %rtuint10, align 4
  %cmp11 = icmp uge i32 %14, 45
  br i1 %cmp11, label %land.rhs.12, label %land.end

land.rhs.12:                                      ; preds = %lor.rhs
  %15 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %fld13 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1
  %arrayidx14 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld13, i32 0, i64 0
  %rtuint15 = bitcast %union.rtunion_def* %arrayidx14 to i32*
  %16 = load i32, i32* %rtuint15, align 4
  %cmp16 = icmp ule i32 %16, 52
  br label %land.end

land.end:                                         ; preds = %land.rhs.12, %lor.rhs
  %17 = phi i1 [ false, %lor.rhs ], [ %cmp16, %land.rhs.12 ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %land.lhs.true
  %18 = phi i1 [ true, %land.lhs.true ], [ %17, %land.end ]
  br label %land.end.17

land.end.17:                                      ; preds = %lor.end, %entry
  %19 = phi i1 [ false, %entry ], [ %18, %lor.end ]
  %land.ext = zext i1 %19 to i32
  %20 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %21 = bitcast %struct.rtx_def* %20 to i32*
  %bf.load18 = load i32, i32* %21, align 8
  %bf.clear19 = and i32 %bf.load18, 65535
  %cmp20 = icmp eq i32 %bf.clear19, 61
  br i1 %cmp20, label %land.rhs.21, label %land.end.44

land.rhs.21:                                      ; preds = %land.end.17
  %22 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %fld22 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1
  %arrayidx23 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld22, i32 0, i64 0
  %rtuint24 = bitcast %union.rtunion_def* %arrayidx23 to i32*
  %23 = load i32, i32* %rtuint24, align 4
  %cmp25 = icmp uge i32 %23, 21
  br i1 %cmp25, label %land.lhs.true.26, label %lor.rhs.31

land.lhs.true.26:                                 ; preds = %land.rhs.21
  %24 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %fld27 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1
  %arrayidx28 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld27, i32 0, i64 0
  %rtuint29 = bitcast %union.rtunion_def* %arrayidx28 to i32*
  %25 = load i32, i32* %rtuint29, align 4
  %cmp30 = icmp ule i32 %25, 28
  br i1 %cmp30, label %lor.end.43, label %lor.rhs.31

lor.rhs.31:                                       ; preds = %land.lhs.true.26, %land.rhs.21
  %26 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %fld32 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %26, i32 0, i32 1
  %arrayidx33 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld32, i32 0, i64 0
  %rtuint34 = bitcast %union.rtunion_def* %arrayidx33 to i32*
  %27 = load i32, i32* %rtuint34, align 4
  %cmp35 = icmp uge i32 %27, 45
  br i1 %cmp35, label %land.rhs.36, label %land.end.41

land.rhs.36:                                      ; preds = %lor.rhs.31
  %28 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %fld37 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1
  %arrayidx38 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld37, i32 0, i64 0
  %rtuint39 = bitcast %union.rtunion_def* %arrayidx38 to i32*
  %29 = load i32, i32* %rtuint39, align 4
  %cmp40 = icmp ule i32 %29, 52
  br label %land.end.41

land.end.41:                                      ; preds = %land.rhs.36, %lor.rhs.31
  %30 = phi i1 [ false, %lor.rhs.31 ], [ %cmp40, %land.rhs.36 ]
  br label %lor.end.43

lor.end.43:                                       ; preds = %land.end.41, %land.lhs.true.26
  %31 = phi i1 [ true, %land.lhs.true.26 ], [ %30, %land.end.41 ]
  br label %land.end.44

land.end.44:                                      ; preds = %lor.end.43, %land.end.17
  %32 = phi i1 [ false, %land.end.17 ], [ %31, %lor.end.43 ]
  %land.ext45 = zext i1 %32 to i32
  %or = or i32 %land.ext, %land.ext45
  store i32 %or, i32* %is_sse, align 4
  %33 = load i32, i32* %is_sse, align 4
  %tobool = icmp ne i32 %33, 0
  br i1 %tobool, label %if.else, label %land.lhs.true.46

land.lhs.true.46:                                 ; preds = %land.end.44
  %34 = load i32, i32* %fpcmp_mode, align 4
  %cmp47 = icmp eq i32 %34, 58
  br i1 %cmp47, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.46
  %35 = load i32, i32* %op_mode, align 4
  %cmp48 = icmp eq i32 %35, 17
  br i1 %cmp48, label %if.then, label %lor.lhs.false.49

lor.lhs.false.49:                                 ; preds = %lor.lhs.false
  %36 = load i32, i32* %op_mode, align 4
  %cmp50 = icmp eq i32 %36, 18
  br i1 %cmp50, label %if.then, label %lor.lhs.false.51

lor.lhs.false.51:                                 ; preds = %lor.lhs.false.49
  %37 = load i32, i32* %code.addr, align 4
  %call52 = call i32 @ix86_use_fcomi_compare(i32 %37)
  %tobool53 = icmp ne i32 %call52, 0
  br i1 %tobool53, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false.51, %lor.lhs.false.49, %lor.lhs.false, %land.lhs.true.46
  %38 = load i32, i32* %op_mode, align 4
  %39 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call54 = call %struct.rtx_def* @force_reg(i32 %38, %struct.rtx_def* %39)
  store %struct.rtx_def* %call54, %struct.rtx_def** %op0, align 8
  %40 = load i32, i32* %op_mode, align 4
  %41 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %call55 = call %struct.rtx_def* @force_reg(i32 %40, %struct.rtx_def* %41)
  store %struct.rtx_def* %call55, %struct.rtx_def** %op1, align 8
  br label %if.end.118

if.else:                                          ; preds = %lor.lhs.false.51, %land.end.44
  %42 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call56 = call i32 @standard_80387_constant_p(%struct.rtx_def* %42)
  %cmp57 = icmp eq i32 %call56, 0
  br i1 %cmp57, label %if.then.69, label %lor.lhs.false.58

lor.lhs.false.58:                                 ; preds = %if.else
  %43 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %44 = bitcast %struct.rtx_def* %43 to i32*
  %bf.load59 = load i32, i32* %44, align 8
  %bf.clear60 = and i32 %bf.load59, 65535
  %cmp61 = icmp eq i32 %bf.clear60, 66
  br i1 %cmp61, label %land.lhs.true.62, label %if.end

land.lhs.true.62:                                 ; preds = %lor.lhs.false.58
  %45 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %call63 = call i32 @standard_80387_constant_p(%struct.rtx_def* %45)
  %cmp64 = icmp eq i32 %call63, 0
  br i1 %cmp64, label %if.end, label %lor.lhs.false.65

lor.lhs.false.65:                                 ; preds = %land.lhs.true.62
  %46 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %47 = bitcast %struct.rtx_def* %46 to i32*
  %bf.load66 = load i32, i32* %47, align 8
  %bf.clear67 = and i32 %bf.load66, 65535
  %cmp68 = icmp eq i32 %bf.clear67, 66
  br i1 %cmp68, label %if.end, label %if.then.69

if.then.69:                                       ; preds = %lor.lhs.false.65, %if.else
  %48 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  store %struct.rtx_def* %48, %struct.rtx_def** %tmp, align 8
  %49 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  store %struct.rtx_def* %49, %struct.rtx_def** %op0, align 8
  %50 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  store %struct.rtx_def* %50, %struct.rtx_def** %op1, align 8
  %51 = load i32, i32* %code.addr, align 4
  %call70 = call i32 @swap_condition(i32 %51)
  store i32 %call70, i32* %code.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.69, %lor.lhs.false.65, %land.lhs.true.62, %lor.lhs.false.58
  %52 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %53 = bitcast %struct.rtx_def* %52 to i32*
  %bf.load71 = load i32, i32* %53, align 8
  %bf.clear72 = and i32 %bf.load71, 65535
  %cmp73 = icmp ne i32 %bf.clear72, 61
  br i1 %cmp73, label %if.then.74, label %if.end.76

if.then.74:                                       ; preds = %if.end
  %54 = load i32, i32* %op_mode, align 4
  %55 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call75 = call %struct.rtx_def* @force_reg(i32 %54, %struct.rtx_def* %55)
  store %struct.rtx_def* %call75, %struct.rtx_def** %op0, align 8
  br label %if.end.76

if.end.76:                                        ; preds = %if.then.74, %if.end
  %56 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %57 = bitcast %struct.rtx_def* %56 to i32*
  %bf.load77 = load i32, i32* %57, align 8
  %bf.clear78 = and i32 %bf.load77, 65535
  %cmp79 = icmp eq i32 %bf.clear78, 67
  br i1 %cmp79, label %if.then.108, label %lor.lhs.false.80

lor.lhs.false.80:                                 ; preds = %if.end.76
  %58 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %59 = bitcast %struct.rtx_def* %58 to i32*
  %bf.load81 = load i32, i32* %59, align 8
  %bf.clear82 = and i32 %bf.load81, 65535
  %cmp83 = icmp eq i32 %bf.clear82, 68
  br i1 %cmp83, label %if.then.108, label %lor.lhs.false.84

lor.lhs.false.84:                                 ; preds = %lor.lhs.false.80
  %60 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %61 = bitcast %struct.rtx_def* %60 to i32*
  %bf.load85 = load i32, i32* %61, align 8
  %bf.clear86 = and i32 %bf.load85, 65535
  %cmp87 = icmp eq i32 %bf.clear86, 54
  br i1 %cmp87, label %if.then.108, label %lor.lhs.false.88

lor.lhs.false.88:                                 ; preds = %lor.lhs.false.84
  %62 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %63 = bitcast %struct.rtx_def* %62 to i32*
  %bf.load89 = load i32, i32* %63, align 8
  %bf.clear90 = and i32 %bf.load89, 65535
  %cmp91 = icmp eq i32 %bf.clear90, 55
  br i1 %cmp91, label %if.then.108, label %lor.lhs.false.92

lor.lhs.false.92:                                 ; preds = %lor.lhs.false.88
  %64 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %65 = bitcast %struct.rtx_def* %64 to i32*
  %bf.load93 = load i32, i32* %65, align 8
  %bf.clear94 = and i32 %bf.load93, 65535
  %cmp95 = icmp eq i32 %bf.clear94, 58
  br i1 %cmp95, label %if.then.108, label %lor.lhs.false.96

lor.lhs.false.96:                                 ; preds = %lor.lhs.false.92
  %66 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %67 = bitcast %struct.rtx_def* %66 to i32*
  %bf.load97 = load i32, i32* %67, align 8
  %bf.clear98 = and i32 %bf.load97, 65535
  %cmp99 = icmp eq i32 %bf.clear98, 134
  br i1 %cmp99, label %if.then.108, label %lor.lhs.false.100

lor.lhs.false.100:                                ; preds = %lor.lhs.false.96
  %68 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %69 = bitcast %struct.rtx_def* %68 to i32*
  %bf.load101 = load i32, i32* %69, align 8
  %bf.clear102 = and i32 %bf.load101, 65535
  %cmp103 = icmp eq i32 %bf.clear102, 56
  br i1 %cmp103, label %if.then.108, label %lor.lhs.false.104

lor.lhs.false.104:                                ; preds = %lor.lhs.false.100
  %70 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %71 = bitcast %struct.rtx_def* %70 to i32*
  %bf.load105 = load i32, i32* %71, align 8
  %bf.clear106 = and i32 %bf.load105, 65535
  %cmp107 = icmp eq i32 %bf.clear106, 140
  br i1 %cmp107, label %if.then.108, label %if.end.117

if.then.108:                                      ; preds = %lor.lhs.false.104, %lor.lhs.false.100, %lor.lhs.false.96, %lor.lhs.false.92, %lor.lhs.false.88, %lor.lhs.false.84, %lor.lhs.false.80, %if.end.76
  %72 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %call109 = call i32 @standard_80387_constant_p(%struct.rtx_def* %72)
  %tobool110 = icmp ne i32 %call109, 0
  br i1 %tobool110, label %if.then.111, label %if.else.113

if.then.111:                                      ; preds = %if.then.108
  %73 = load i32, i32* %op_mode, align 4
  %74 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %call112 = call %struct.rtx_def* @force_reg(i32 %73, %struct.rtx_def* %74)
  store %struct.rtx_def* %call112, %struct.rtx_def** %op1, align 8
  br label %if.end.116

if.else.113:                                      ; preds = %if.then.108
  %75 = load i32, i32* %op_mode, align 4
  %76 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %call114 = call %struct.rtx_def* @force_const_mem(i32 %75, %struct.rtx_def* %76)
  %call115 = call %struct.rtx_def* @validize_mem(%struct.rtx_def* %call114)
  store %struct.rtx_def* %call115, %struct.rtx_def** %op1, align 8
  br label %if.end.116

if.end.116:                                       ; preds = %if.else.113, %if.then.111
  br label %if.end.117

if.end.117:                                       ; preds = %if.end.116, %lor.lhs.false.104
  br label %if.end.118

if.end.118:                                       ; preds = %if.end.117, %if.then
  %77 = load i32, i32* %code.addr, align 4
  %call119 = call i32 @ix86_fp_comparison_cost(i32 %77)
  %78 = load i32, i32* %code.addr, align 4
  %call120 = call i32 @swap_condition(i32 %78)
  %call121 = call i32 @ix86_fp_comparison_cost(i32 %call120)
  %cmp122 = icmp sgt i32 %call119, %call121
  br i1 %cmp122, label %land.lhs.true.123, label %if.end.139

land.lhs.true.123:                                ; preds = %if.end.118
  %79 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %80 = bitcast %struct.rtx_def* %79 to i32*
  %bf.load124 = load i32, i32* %80, align 8
  %bf.clear125 = and i32 %bf.load124, 65535
  %cmp126 = icmp eq i32 %bf.clear125, 61
  br i1 %cmp126, label %if.then.129, label %lor.lhs.false.127

lor.lhs.false.127:                                ; preds = %land.lhs.true.123
  %81 = load i32, i32* @no_new_pseudos, align 4
  %tobool128 = icmp ne i32 %81, 0
  br i1 %tobool128, label %if.end.139, label %if.then.129

if.then.129:                                      ; preds = %lor.lhs.false.127, %land.lhs.true.123
  %82 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  store %struct.rtx_def* %82, %struct.rtx_def** %tmp131, align 8
  %83 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  store %struct.rtx_def* %83, %struct.rtx_def** %op0, align 8
  %84 = load %struct.rtx_def*, %struct.rtx_def** %tmp131, align 8
  store %struct.rtx_def* %84, %struct.rtx_def** %op1, align 8
  %85 = load i32, i32* %code.addr, align 4
  %call132 = call i32 @swap_condition(i32 %85)
  store i32 %call132, i32* %code.addr, align 4
  %86 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %87 = bitcast %struct.rtx_def* %86 to i32*
  %bf.load133 = load i32, i32* %87, align 8
  %bf.clear134 = and i32 %bf.load133, 65535
  %cmp135 = icmp ne i32 %bf.clear134, 61
  br i1 %cmp135, label %if.then.136, label %if.end.138

if.then.136:                                      ; preds = %if.then.129
  %88 = load i32, i32* %op_mode, align 4
  %89 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call137 = call %struct.rtx_def* @force_reg(i32 %88, %struct.rtx_def* %89)
  store %struct.rtx_def* %call137, %struct.rtx_def** %op0, align 8
  br label %if.end.138

if.end.138:                                       ; preds = %if.then.136, %if.then.129
  br label %if.end.139

if.end.139:                                       ; preds = %if.end.138, %lor.lhs.false.127, %if.end.118
  %90 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %91 = load %struct.rtx_def**, %struct.rtx_def*** %pop0.addr, align 8
  store %struct.rtx_def* %90, %struct.rtx_def** %91, align 8
  %92 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %93 = load %struct.rtx_def**, %struct.rtx_def*** %pop1.addr, align 8
  store %struct.rtx_def* %92, %struct.rtx_def** %93, align 8
  %94 = load i32, i32* %code.addr, align 4
  ret i32 %94
}

; Function Attrs: nounwind uwtable
define void @ix86_split_fp_branch(i32 %code, %struct.rtx_def* %op1, %struct.rtx_def* %op2, %struct.rtx_def* %target1, %struct.rtx_def* %target2, %struct.rtx_def* %tmp) #1 {
entry:
  %code.addr = alloca i32, align 4
  %op1.addr = alloca %struct.rtx_def*, align 8
  %op2.addr = alloca %struct.rtx_def*, align 8
  %target1.addr = alloca %struct.rtx_def*, align 8
  %target2.addr = alloca %struct.rtx_def*, align 8
  %tmp.addr = alloca %struct.rtx_def*, align 8
  %second = alloca %struct.rtx_def*, align 8
  %bypass = alloca %struct.rtx_def*, align 8
  %label = alloca %struct.rtx_def*, align 8
  %condition = alloca %struct.rtx_def*, align 8
  %bypass_probability = alloca i32, align 4
  %second_probability = alloca i32, align 4
  %probability = alloca i32, align 4
  %i = alloca %struct.rtx_def*, align 8
  %tmp10 = alloca %struct.rtx_def*, align 8
  store i32 %code, i32* %code.addr, align 4
  store %struct.rtx_def* %op1, %struct.rtx_def** %op1.addr, align 8
  store %struct.rtx_def* %op2, %struct.rtx_def** %op2.addr, align 8
  store %struct.rtx_def* %target1, %struct.rtx_def** %target1.addr, align 8
  store %struct.rtx_def* %target2, %struct.rtx_def** %target2.addr, align 8
  store %struct.rtx_def* %tmp, %struct.rtx_def** %tmp.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %label, align 8
  store i32 -1, i32* %bypass_probability, align 4
  store i32 -1, i32* %second_probability, align 4
  store i32 -1, i32* %probability, align 4
  %0 = load %struct.rtx_def*, %struct.rtx_def** %target2.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 0), align 8
  %cmp = icmp ne %struct.rtx_def* %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %target2.addr, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %tmp10, align 8
  %3 = load i32, i32* %code.addr, align 4
  %call = call i32 @reverse_condition_maybe_unordered(i32 %3)
  store i32 %call, i32* %code.addr, align 4
  %4 = load %struct.rtx_def*, %struct.rtx_def** %target1.addr, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %target2.addr, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %tmp10, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %target1.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %6 = load i32, i32* %code.addr, align 4
  %7 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %op2.addr, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %tmp.addr, align 8
  %call11 = call %struct.rtx_def* @ix86_expand_fp_compare(i32 %6, %struct.rtx_def* %7, %struct.rtx_def* %8, %struct.rtx_def* %9, %struct.rtx_def** %second, %struct.rtx_def** %bypass)
  store %struct.rtx_def* %call11, %struct.rtx_def** %condition, align 8
  %10 = load i32, i32* @split_branch_probability, align 4
  %cmp12 = icmp sge i32 %10, 0
  br i1 %cmp12, label %if.then.13, label %if.end.19

if.then.13:                                       ; preds = %if.end
  %11 = load i32, i32* @split_branch_probability, align 4
  store i32 %11, i32* %probability, align 4
  %12 = load %struct.rtx_def*, %struct.rtx_def** %bypass, align 8
  %tobool = icmp ne %struct.rtx_def* %12, null
  br i1 %tobool, label %if.then.14, label %if.end.15

if.then.14:                                       ; preds = %if.then.13
  store i32 1, i32* %bypass_probability, align 4
  br label %if.end.15

if.end.15:                                        ; preds = %if.then.14, %if.then.13
  %13 = load %struct.rtx_def*, %struct.rtx_def** %second, align 8
  %tobool16 = icmp ne %struct.rtx_def* %13, null
  br i1 %tobool16, label %if.then.17, label %if.end.18

if.then.17:                                       ; preds = %if.end.15
  store i32 1, i32* %second_probability, align 4
  br label %if.end.18

if.end.18:                                        ; preds = %if.then.17, %if.end.15
  br label %if.end.19

if.end.19:                                        ; preds = %if.end.18, %if.end
  %14 = load %struct.rtx_def*, %struct.rtx_def** %bypass, align 8
  %cmp20 = icmp ne %struct.rtx_def* %14, null
  br i1 %cmp20, label %if.then.21, label %if.end.35

if.then.21:                                       ; preds = %if.end.19
  %call22 = call %struct.rtx_def* @gen_label_rtx()
  store %struct.rtx_def* %call22, %struct.rtx_def** %label, align 8
  %15 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 0), align 8
  %16 = load %struct.rtx_def*, %struct.rtx_def** %bypass, align 8
  %17 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  %call23 = call %struct.rtx_def* @gen_rtx_fmt_u00(i32 67, i32 0, %struct.rtx_def* %17)
  %18 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 0), align 8
  %call24 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 72, i32 0, %struct.rtx_def* %16, %struct.rtx_def* %call23, %struct.rtx_def* %18)
  %call25 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %15, %struct.rtx_def* %call24)
  %call26 = call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %call25)
  store %struct.rtx_def* %call26, %struct.rtx_def** %i, align 8
  %19 = load i32, i32* %bypass_probability, align 4
  %cmp27 = icmp sge i32 %19, 0
  br i1 %cmp27, label %if.then.28, label %if.end.34

if.then.28:                                       ; preds = %if.then.21
  %20 = load i32, i32* %bypass_probability, align 4
  %conv = sext i32 %20 to i64
  %call29 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv)
  %21 = load %struct.rtx_def*, %struct.rtx_def** %i, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 6
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %22 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %call30 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 16, %struct.rtx_def* %call29, %struct.rtx_def* %22)
  %23 = load %struct.rtx_def*, %struct.rtx_def** %i, align 8
  %fld31 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1
  %arrayidx32 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld31, i32 0, i64 6
  %rtx33 = bitcast %union.rtunion_def* %arrayidx32 to %struct.rtx_def**
  store %struct.rtx_def* %call30, %struct.rtx_def** %rtx33, align 8
  br label %if.end.34

if.end.34:                                        ; preds = %if.then.28, %if.then.21
  br label %if.end.35

if.end.35:                                        ; preds = %if.end.34, %if.end.19
  %24 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 0), align 8
  %25 = load %struct.rtx_def*, %struct.rtx_def** %condition, align 8
  %26 = load %struct.rtx_def*, %struct.rtx_def** %target1.addr, align 8
  %27 = load %struct.rtx_def*, %struct.rtx_def** %target2.addr, align 8
  %call36 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 72, i32 0, %struct.rtx_def* %25, %struct.rtx_def* %26, %struct.rtx_def* %27)
  %call37 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %24, %struct.rtx_def* %call36)
  %call38 = call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %call37)
  store %struct.rtx_def* %call38, %struct.rtx_def** %i, align 8
  %28 = load i32, i32* %probability, align 4
  %cmp39 = icmp sge i32 %28, 0
  br i1 %cmp39, label %if.then.41, label %if.end.51

if.then.41:                                       ; preds = %if.end.35
  %29 = load i32, i32* %probability, align 4
  %conv42 = sext i32 %29 to i64
  %call43 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv42)
  %30 = load %struct.rtx_def*, %struct.rtx_def** %i, align 8
  %fld44 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %30, i32 0, i32 1
  %arrayidx45 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld44, i32 0, i64 6
  %rtx46 = bitcast %union.rtunion_def* %arrayidx45 to %struct.rtx_def**
  %31 = load %struct.rtx_def*, %struct.rtx_def** %rtx46, align 8
  %call47 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 16, %struct.rtx_def* %call43, %struct.rtx_def* %31)
  %32 = load %struct.rtx_def*, %struct.rtx_def** %i, align 8
  %fld48 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %32, i32 0, i32 1
  %arrayidx49 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld48, i32 0, i64 6
  %rtx50 = bitcast %union.rtunion_def* %arrayidx49 to %struct.rtx_def**
  store %struct.rtx_def* %call47, %struct.rtx_def** %rtx50, align 8
  br label %if.end.51

if.end.51:                                        ; preds = %if.then.41, %if.end.35
  %33 = load %struct.rtx_def*, %struct.rtx_def** %second, align 8
  %cmp52 = icmp ne %struct.rtx_def* %33, null
  br i1 %cmp52, label %if.then.54, label %if.end.71

if.then.54:                                       ; preds = %if.end.51
  %34 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 0), align 8
  %35 = load %struct.rtx_def*, %struct.rtx_def** %second, align 8
  %36 = load %struct.rtx_def*, %struct.rtx_def** %target1.addr, align 8
  %37 = load %struct.rtx_def*, %struct.rtx_def** %target2.addr, align 8
  %call55 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 72, i32 0, %struct.rtx_def* %35, %struct.rtx_def* %36, %struct.rtx_def* %37)
  %call56 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %34, %struct.rtx_def* %call55)
  %call57 = call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %call56)
  store %struct.rtx_def* %call57, %struct.rtx_def** %i, align 8
  %38 = load i32, i32* %second_probability, align 4
  %cmp58 = icmp sge i32 %38, 0
  br i1 %cmp58, label %if.then.60, label %if.end.70

if.then.60:                                       ; preds = %if.then.54
  %39 = load i32, i32* %second_probability, align 4
  %conv61 = sext i32 %39 to i64
  %call62 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv61)
  %40 = load %struct.rtx_def*, %struct.rtx_def** %i, align 8
  %fld63 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %40, i32 0, i32 1
  %arrayidx64 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld63, i32 0, i64 6
  %rtx65 = bitcast %union.rtunion_def* %arrayidx64 to %struct.rtx_def**
  %41 = load %struct.rtx_def*, %struct.rtx_def** %rtx65, align 8
  %call66 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 16, %struct.rtx_def* %call62, %struct.rtx_def* %41)
  %42 = load %struct.rtx_def*, %struct.rtx_def** %i, align 8
  %fld67 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %42, i32 0, i32 1
  %arrayidx68 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld67, i32 0, i64 6
  %rtx69 = bitcast %union.rtunion_def* %arrayidx68 to %struct.rtx_def**
  store %struct.rtx_def* %call66, %struct.rtx_def** %rtx69, align 8
  br label %if.end.70

if.end.70:                                        ; preds = %if.then.60, %if.then.54
  br label %if.end.71

if.end.71:                                        ; preds = %if.end.70, %if.end.51
  %43 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  %cmp72 = icmp ne %struct.rtx_def* %43, null
  br i1 %cmp72, label %if.then.74, label %if.end.76

if.then.74:                                       ; preds = %if.end.71
  %44 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  %call75 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %44)
  br label %if.end.76

if.end.76:                                        ; preds = %if.then.74, %if.end.71
  ret void
}

declare %struct.rtvec_def* @rtvec_alloc(i32) #0

declare %struct.rtx_def* @gen_rtx_fmt_0(i32, i32) #0

declare %struct.rtx_def* @expand_binop(i32, %struct.optab*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32, i32) #0

declare i32 @unsigned_condition(i32) #0

declare i32 @reverse_condition_maybe_unordered(i32) #0

; Function Attrs: nounwind uwtable
define i32 @ix86_expand_setcc(i32 %code, %struct.rtx_def* %dest) #1 {
entry:
  %retval = alloca i32, align 4
  %code.addr = alloca i32, align 4
  %dest.addr = alloca %struct.rtx_def*, align 8
  %ret = alloca %struct.rtx_def*, align 8
  %tmp = alloca %struct.rtx_def*, align 8
  %tmpreg = alloca %struct.rtx_def*, align 8
  %second_test = alloca %struct.rtx_def*, align 8
  %bypass_test = alloca %struct.rtx_def*, align 8
  %test = alloca %struct.rtx_def*, align 8
  %bypass = alloca i32, align 4
  %tmp2 = alloca %struct.rtx_def*, align 8
  store i32 %code, i32* %code.addr, align 4
  store %struct.rtx_def* %dest, %struct.rtx_def** %dest.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** @ix86_compare_op0, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %cmp = icmp eq i32 %bf.clear, 5
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load i32, i32* @target_flags, align 4
  %and = and i32 %2, 33554432
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %dest.addr, align 8
  %4 = bitcast %struct.rtx_def* %3 to i32*
  %bf.load4 = load i32, i32* %4, align 8
  %bf.lshr5 = lshr i32 %bf.load4, 16
  %bf.clear6 = and i32 %bf.lshr5, 255
  %cmp7 = icmp ne i32 %bf.clear6, 2
  br i1 %cmp7, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 7980, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__FUNCTION__.ix86_expand_setcc, i32 0, i32 0)) #7
  unreachable

if.end.9:                                         ; preds = %if.end
  %5 = load i32, i32* %code.addr, align 4
  %call = call %struct.rtx_def* @ix86_expand_compare(i32 %5, %struct.rtx_def** %second_test, %struct.rtx_def** %bypass_test)
  store %struct.rtx_def* %call, %struct.rtx_def** %ret, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %ret, align 8
  %7 = bitcast %struct.rtx_def* %6 to i32*
  %bf.load10 = load i32, i32* %7, align 8
  %bf.clear11 = and i32 %bf.load10, -16711681
  %bf.set = or i32 %bf.clear11, 131072
  store i32 %bf.set, i32* %7, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %dest.addr, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %tmp, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %dest.addr, align 8
  store %struct.rtx_def* %9, %struct.rtx_def** %tmpreg, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %11 = load %struct.rtx_def*, %struct.rtx_def** %ret, align 8
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %10, %struct.rtx_def* %11)
  %call13 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call12)
  %12 = load %struct.rtx_def*, %struct.rtx_def** %bypass_test, align 8
  %tobool14 = icmp ne %struct.rtx_def* %12, null
  br i1 %tobool14, label %if.then.16, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.9
  %13 = load %struct.rtx_def*, %struct.rtx_def** %second_test, align 8
  %tobool15 = icmp ne %struct.rtx_def* %13, null
  br i1 %tobool15, label %if.then.16, label %if.end.45

if.then.16:                                       ; preds = %lor.lhs.false, %if.end.9
  %14 = load %struct.rtx_def*, %struct.rtx_def** %second_test, align 8
  store %struct.rtx_def* %14, %struct.rtx_def** %test, align 8
  store i32 0, i32* %bypass, align 4
  %call20 = call %struct.rtx_def* @gen_reg_rtx(i32 2)
  store %struct.rtx_def* %call20, %struct.rtx_def** %tmp2, align 8
  %15 = load %struct.rtx_def*, %struct.rtx_def** %bypass_test, align 8
  %tobool21 = icmp ne %struct.rtx_def* %15, null
  br i1 %tobool21, label %if.then.22, label %if.end.32

if.then.22:                                       ; preds = %if.then.16
  %16 = load %struct.rtx_def*, %struct.rtx_def** %second_test, align 8
  %tobool23 = icmp ne %struct.rtx_def* %16, null
  br i1 %tobool23, label %if.then.24, label %if.end.25

if.then.24:                                       ; preds = %if.then.22
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 7997, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__FUNCTION__.ix86_expand_setcc, i32 0, i32 0)) #7
  unreachable

if.end.25:                                        ; preds = %if.then.22
  %17 = load %struct.rtx_def*, %struct.rtx_def** %bypass_test, align 8
  store %struct.rtx_def* %17, %struct.rtx_def** %test, align 8
  store i32 1, i32* %bypass, align 4
  %18 = load %struct.rtx_def*, %struct.rtx_def** %test, align 8
  %19 = bitcast %struct.rtx_def* %18 to i32*
  %bf.load26 = load i32, i32* %19, align 8
  %bf.clear27 = and i32 %bf.load26, 65535
  %call28 = call i32 @reverse_condition_maybe_unordered(i32 %bf.clear27)
  %20 = load %struct.rtx_def*, %struct.rtx_def** %test, align 8
  %21 = bitcast %struct.rtx_def* %20 to i32*
  %bf.load29 = load i32, i32* %21, align 8
  %bf.value = and i32 %call28, 65535
  %bf.clear30 = and i32 %bf.load29, -65536
  %bf.set31 = or i32 %bf.clear30, %bf.value
  store i32 %bf.set31, i32* %21, align 8
  br label %if.end.32

if.end.32:                                        ; preds = %if.end.25, %if.then.16
  %22 = load %struct.rtx_def*, %struct.rtx_def** %test, align 8
  %23 = bitcast %struct.rtx_def* %22 to i32*
  %bf.load33 = load i32, i32* %23, align 8
  %bf.clear34 = and i32 %bf.load33, -16711681
  %bf.set35 = or i32 %bf.clear34, 131072
  store i32 %bf.set35, i32* %23, align 8
  %24 = load %struct.rtx_def*, %struct.rtx_def** %tmp2, align 8
  %25 = load %struct.rtx_def*, %struct.rtx_def** %test, align 8
  %call36 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %24, %struct.rtx_def* %25)
  %call37 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call36)
  %26 = load i32, i32* %bypass, align 4
  %tobool38 = icmp ne i32 %26, 0
  br i1 %tobool38, label %if.then.39, label %if.else

if.then.39:                                       ; preds = %if.end.32
  %27 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %28 = load %struct.rtx_def*, %struct.rtx_def** %tmpreg, align 8
  %29 = load %struct.rtx_def*, %struct.rtx_def** %tmp2, align 8
  %call40 = call %struct.rtx_def* @gen_andqi3(%struct.rtx_def* %27, %struct.rtx_def* %28, %struct.rtx_def* %29)
  %call41 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call40)
  br label %if.end.44

if.else:                                          ; preds = %if.end.32
  %30 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %31 = load %struct.rtx_def*, %struct.rtx_def** %tmpreg, align 8
  %32 = load %struct.rtx_def*, %struct.rtx_def** %tmp2, align 8
  %call42 = call %struct.rtx_def* @gen_iorqi3(%struct.rtx_def* %30, %struct.rtx_def* %31, %struct.rtx_def* %32)
  %call43 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call42)
  br label %if.end.44

if.end.44:                                        ; preds = %if.else, %if.then.39
  br label %if.end.45

if.end.45:                                        ; preds = %if.end.44, %lor.lhs.false
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.45, %if.then
  %33 = load i32, i32* %retval
  ret i32 %33
}

declare %struct.rtx_def* @gen_andqi3(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #0

declare %struct.rtx_def* @gen_iorqi3(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #0

; Function Attrs: nounwind uwtable
define i32 @ix86_expand_int_movcc(%struct.rtx_def** %operands) #1 {
entry:
  %retval = alloca i32, align 4
  %operands.addr = alloca %struct.rtx_def**, align 8
  %code = alloca i32, align 4
  %compare_code = alloca i32, align 4
  %compare_seq = alloca %struct.rtx_def*, align 8
  %compare_op = alloca %struct.rtx_def*, align 8
  %second_test = alloca %struct.rtx_def*, align 8
  %bypass_test = alloca %struct.rtx_def*, align 8
  %mode = alloca i32, align 4
  %out = alloca %struct.rtx_def*, align 8
  %ct = alloca i64, align 8
  %cf = alloca i64, align 8
  %diff = alloca i64, align 8
  %tmp = alloca %struct.rtx_def*, align 8
  %tmp84 = alloca i32, align 4
  %tmp157 = alloca i64, align 8
  %tmp218 = alloca %struct.rtx_def*, align 8
  %nops = alloca i32, align 4
  %out1 = alloca %struct.rtx_def*, align 8
  %clob = alloca %struct.rtx_def*, align 8
  %op = alloca %struct.optab*, align 8
  %var = alloca %struct.rtx_def*, align 8
  %orig_out = alloca %struct.rtx_def*, align 8
  %out351 = alloca %struct.rtx_def*, align 8
  %tmp353 = alloca %struct.rtx_def*, align 8
  %tmp454 = alloca %struct.rtx_def*, align 8
  %tmp468 = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 1
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load = load i32, i32* %2, align 8
  %bf.clear = and i32 %bf.load, 65535
  store i32 %bf.clear, i32* %code, align 4
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 0
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  %5 = bitcast %struct.rtx_def* %4 to i32*
  %bf.load2 = load i32, i32* %5, align 8
  %bf.lshr = lshr i32 %bf.load2, 16
  %bf.clear3 = and i32 %bf.lshr, 255
  store i32 %bf.clear3, i32* %mode, align 4
  %6 = load i32, i32* %code, align 4
  %cmp = icmp eq i32 %6, 110
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %7 = load i32, i32* %code, align 4
  %cmp4 = icmp eq i32 %7, 109
  br i1 %cmp4, label %land.lhs.true, label %if.end.42

land.lhs.true:                                    ; preds = %lor.lhs.false, %entry
  %8 = load %struct.rtx_def*, %struct.rtx_def** @ix86_compare_op1, align 8
  %9 = bitcast %struct.rtx_def* %8 to i32*
  %bf.load5 = load i32, i32* %9, align 8
  %bf.clear6 = and i32 %bf.load5, 65535
  %cmp7 = icmp eq i32 %bf.clear6, 54
  br i1 %cmp7, label %land.lhs.true.8, label %if.end.42

land.lhs.true.8:                                  ; preds = %land.lhs.true
  %10 = load i32, i32* %mode, align 4
  %cmp9 = icmp ne i32 %10, 3
  br i1 %cmp9, label %land.lhs.true.10, label %if.end.42

land.lhs.true.10:                                 ; preds = %land.lhs.true.8
  %11 = load %struct.rtx_def*, %struct.rtx_def** @ix86_compare_op1, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1
  %arrayidx11 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx11 to i64*
  %12 = load i64, i64* %rtwint, align 8
  %cmp12 = icmp ne i64 %12, -1
  br i1 %cmp12, label %land.lhs.true.13, label %if.end.42

land.lhs.true.13:                                 ; preds = %land.lhs.true.10
  %13 = load i32, i32* @target_flags, align 4
  %and = and i32 %13, 33554432
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %lor.lhs.false.14, label %land.lhs.true.24

lor.lhs.false.14:                                 ; preds = %land.lhs.true.13
  %14 = load %struct.rtx_def*, %struct.rtx_def** @ix86_compare_op0, align 8
  %15 = bitcast %struct.rtx_def* %14 to i32*
  %bf.load15 = load i32, i32* %15, align 8
  %bf.lshr16 = lshr i32 %bf.load15, 16
  %bf.clear17 = and i32 %bf.lshr16, 255
  %cmp18 = icmp ne i32 %bf.clear17, 5
  br i1 %cmp18, label %land.lhs.true.24, label %lor.lhs.false.19

lor.lhs.false.19:                                 ; preds = %lor.lhs.false.14
  %16 = load %struct.rtx_def*, %struct.rtx_def** @ix86_compare_op1, align 8
  %fld20 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1
  %arrayidx21 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld20, i32 0, i64 0
  %rtwint22 = bitcast %union.rtunion_def* %arrayidx21 to i64*
  %17 = load i64, i64* %rtwint22, align 8
  %cmp23 = icmp ne i64 %17, 2147483647
  br i1 %cmp23, label %land.lhs.true.24, label %if.end.42

land.lhs.true.24:                                 ; preds = %lor.lhs.false.19, %lor.lhs.false.14, %land.lhs.true.13
  %18 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx25 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %18, i64 2
  %19 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx25, align 8
  %20 = bitcast %struct.rtx_def* %19 to i32*
  %bf.load26 = load i32, i32* %20, align 8
  %bf.clear27 = and i32 %bf.load26, 65535
  %cmp28 = icmp eq i32 %bf.clear27, 54
  br i1 %cmp28, label %land.lhs.true.29, label %if.end.42

land.lhs.true.29:                                 ; preds = %land.lhs.true.24
  %21 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx30 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %21, i64 3
  %22 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx30, align 8
  %23 = bitcast %struct.rtx_def* %22 to i32*
  %bf.load31 = load i32, i32* %23, align 8
  %bf.clear32 = and i32 %bf.load31, 65535
  %cmp33 = icmp eq i32 %bf.clear32, 54
  br i1 %cmp33, label %if.then, label %if.end.42

if.then:                                          ; preds = %land.lhs.true.29
  %24 = load i32, i32* %code, align 4
  %cmp34 = icmp eq i32 %24, 110
  br i1 %cmp34, label %if.then.35, label %if.else

if.then.35:                                       ; preds = %if.then
  store i32 111, i32* %code, align 4
  br label %if.end

if.else:                                          ; preds = %if.then
  store i32 108, i32* %code, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.35
  %25 = load %struct.rtx_def*, %struct.rtx_def** @ix86_compare_op1, align 8
  %fld36 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1
  %arrayidx37 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld36, i32 0, i64 0
  %rtwint38 = bitcast %union.rtunion_def* %arrayidx37 to i64*
  %26 = load i64, i64* %rtwint38, align 8
  %add = add nsw i64 %26, 1
  %27 = load %struct.rtx_def*, %struct.rtx_def** @ix86_compare_op0, align 8
  %28 = bitcast %struct.rtx_def* %27 to i32*
  %bf.load39 = load i32, i32* %28, align 8
  %bf.lshr40 = lshr i32 %bf.load39, 16
  %bf.clear41 = and i32 %bf.lshr40, 255
  %call = call %struct.rtx_def* @gen_int_mode(i64 %add, i32 %bf.clear41)
  store %struct.rtx_def* %call, %struct.rtx_def** @ix86_compare_op1, align 8
  br label %if.end.42

if.end.42:                                        ; preds = %if.end, %land.lhs.true.29, %land.lhs.true.24, %lor.lhs.false.19, %land.lhs.true.10, %land.lhs.true.8, %land.lhs.true, %lor.lhs.false
  call void @start_sequence()
  %29 = load i32, i32* %code, align 4
  %call43 = call %struct.rtx_def* @ix86_expand_compare(i32 %29, %struct.rtx_def** %second_test, %struct.rtx_def** %bypass_test)
  store %struct.rtx_def* %call43, %struct.rtx_def** %compare_op, align 8
  %call44 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call44, %struct.rtx_def** %compare_seq, align 8
  call void @end_sequence()
  %30 = load %struct.rtx_def*, %struct.rtx_def** %compare_op, align 8
  %31 = bitcast %struct.rtx_def* %30 to i32*
  %bf.load45 = load i32, i32* %31, align 8
  %bf.clear46 = and i32 %bf.load45, 65535
  store i32 %bf.clear46, i32* %compare_code, align 4
  %32 = load i32, i32* %mode, align 4
  %cmp47 = icmp ne i32 %32, 3
  br i1 %cmp47, label %land.lhs.true.48, label %if.end.338

land.lhs.true.48:                                 ; preds = %if.end.42
  %33 = load i32, i32* %mode, align 4
  %cmp49 = icmp ne i32 %33, 5
  br i1 %cmp49, label %land.lhs.true.53, label %lor.lhs.false.50

lor.lhs.false.50:                                 ; preds = %land.lhs.true.48
  %34 = load i32, i32* @target_flags, align 4
  %and51 = and i32 %34, 33554432
  %tobool52 = icmp ne i32 %and51, 0
  br i1 %tobool52, label %land.lhs.true.53, label %if.end.338

land.lhs.true.53:                                 ; preds = %lor.lhs.false.50, %land.lhs.true.48
  %35 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx54 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %35, i64 2
  %36 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx54, align 8
  %37 = bitcast %struct.rtx_def* %36 to i32*
  %bf.load55 = load i32, i32* %37, align 8
  %bf.clear56 = and i32 %bf.load55, 65535
  %cmp57 = icmp eq i32 %bf.clear56, 54
  br i1 %cmp57, label %land.lhs.true.58, label %if.end.338

land.lhs.true.58:                                 ; preds = %land.lhs.true.53
  %38 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx59 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %38, i64 3
  %39 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx59, align 8
  %40 = bitcast %struct.rtx_def* %39 to i32*
  %bf.load60 = load i32, i32* %40, align 8
  %bf.clear61 = and i32 %bf.load60, 65535
  %cmp62 = icmp eq i32 %bf.clear61, 54
  br i1 %cmp62, label %if.then.63, label %if.end.338

if.then.63:                                       ; preds = %land.lhs.true.58
  %41 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx64 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %41, i64 0
  %42 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx64, align 8
  store %struct.rtx_def* %42, %struct.rtx_def** %out, align 8
  %43 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx65 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %43, i64 2
  %44 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx65, align 8
  %fld66 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %44, i32 0, i32 1
  %arrayidx67 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld66, i32 0, i64 0
  %rtwint68 = bitcast %union.rtunion_def* %arrayidx67 to i64*
  %45 = load i64, i64* %rtwint68, align 8
  store i64 %45, i64* %ct, align 8
  %46 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx69 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %46, i64 3
  %47 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx69, align 8
  %fld70 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %47, i32 0, i32 1
  %arrayidx71 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld70, i32 0, i64 0
  %rtwint72 = bitcast %union.rtunion_def* %arrayidx71 to i64*
  %48 = load i64, i64* %rtwint72, align 8
  store i64 %48, i64* %cf, align 8
  %49 = load i32, i32* %compare_code, align 4
  %cmp73 = icmp eq i32 %49, 111
  br i1 %cmp73, label %land.lhs.true.76, label %lor.lhs.false.74

lor.lhs.false.74:                                 ; preds = %if.then.63
  %50 = load i32, i32* %compare_code, align 4
  %cmp75 = icmp eq i32 %50, 108
  br i1 %cmp75, label %land.lhs.true.76, label %if.end.151

land.lhs.true.76:                                 ; preds = %lor.lhs.false.74, %if.then.63
  %51 = load %struct.rtx_def*, %struct.rtx_def** %second_test, align 8
  %tobool77 = icmp ne %struct.rtx_def* %51, null
  br i1 %tobool77, label %if.end.151, label %land.lhs.true.78

land.lhs.true.78:                                 ; preds = %land.lhs.true.76
  %52 = load %struct.rtx_def*, %struct.rtx_def** %bypass_test, align 8
  %tobool79 = icmp ne %struct.rtx_def* %52, null
  br i1 %tobool79, label %if.end.151, label %if.then.80

if.then.80:                                       ; preds = %land.lhs.true.78
  %53 = load %struct.rtx_def*, %struct.rtx_def** %out, align 8
  store %struct.rtx_def* %53, %struct.rtx_def** %tmp, align 8
  %54 = load i32, i32* %compare_code, align 4
  %cmp81 = icmp eq i32 %54, 111
  br i1 %cmp81, label %if.then.82, label %if.end.88

if.then.82:                                       ; preds = %if.then.80
  %55 = load i64, i64* %ct, align 8
  %conv = trunc i64 %55 to i32
  store i32 %conv, i32* %tmp84, align 4
  %56 = load i64, i64* %cf, align 8
  store i64 %56, i64* %ct, align 8
  %57 = load i32, i32* %tmp84, align 4
  %conv85 = sext i32 %57 to i64
  store i64 %conv85, i64* %cf, align 8
  %58 = load i32, i32* %compare_code, align 4
  %call86 = call i32 @reverse_condition(i32 %58)
  store i32 %call86, i32* %compare_code, align 4
  %59 = load i32, i32* %code, align 4
  %call87 = call i32 @reverse_condition(i32 %59)
  store i32 %call87, i32* %code, align 4
  br label %if.end.88

if.end.88:                                        ; preds = %if.then.82, %if.then.80
  %60 = load i64, i64* %ct, align 8
  %61 = load i64, i64* %cf, align 8
  %sub = sub nsw i64 %60, %61
  store i64 %sub, i64* %diff, align 8
  %62 = load %struct.rtx_def*, %struct.rtx_def** %out, align 8
  %63 = load %struct.rtx_def*, %struct.rtx_def** @ix86_compare_op0, align 8
  %call89 = call i32 @reg_overlap_mentioned_p(%struct.rtx_def* %62, %struct.rtx_def* %63)
  %tobool90 = icmp ne i32 %call89, 0
  br i1 %tobool90, label %if.then.94, label %lor.lhs.false.91

lor.lhs.false.91:                                 ; preds = %if.end.88
  %64 = load %struct.rtx_def*, %struct.rtx_def** %out, align 8
  %65 = load %struct.rtx_def*, %struct.rtx_def** @ix86_compare_op1, align 8
  %call92 = call i32 @reg_overlap_mentioned_p(%struct.rtx_def* %64, %struct.rtx_def* %65)
  %tobool93 = icmp ne i32 %call92, 0
  br i1 %tobool93, label %if.then.94, label %if.end.96

if.then.94:                                       ; preds = %lor.lhs.false.91, %if.end.88
  %66 = load i32, i32* %mode, align 4
  %call95 = call %struct.rtx_def* @gen_reg_rtx(i32 %66)
  store %struct.rtx_def* %call95, %struct.rtx_def** %tmp, align 8
  br label %if.end.96

if.end.96:                                        ; preds = %if.then.94, %lor.lhs.false.91
  %67 = load %struct.rtx_def*, %struct.rtx_def** %compare_seq, align 8
  %call97 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %67)
  %68 = load i32, i32* %mode, align 4
  %cmp98 = icmp eq i32 %68, 5
  br i1 %cmp98, label %if.then.100, label %if.else.103

if.then.100:                                      ; preds = %if.end.96
  %69 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %call101 = call %struct.rtx_def* @gen_x86_movdicc_0_m1_rex64(%struct.rtx_def* %69)
  %call102 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call101)
  br label %if.end.106

if.else.103:                                      ; preds = %if.end.96
  %70 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %call104 = call %struct.rtx_def* @gen_x86_movsicc_0_m1(%struct.rtx_def* %70)
  %call105 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call104)
  br label %if.end.106

if.end.106:                                       ; preds = %if.else.103, %if.then.100
  %71 = load i64, i64* %diff, align 8
  %cmp107 = icmp eq i64 %71, 1
  br i1 %cmp107, label %if.then.109, label %if.else.115

if.then.109:                                      ; preds = %if.end.106
  %72 = load i64, i64* %ct, align 8
  %tobool110 = icmp ne i64 %72, 0
  br i1 %tobool110, label %if.then.111, label %if.end.114

if.then.111:                                      ; preds = %if.then.109
  %73 = load i32, i32* %mode, align 4
  %74 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %75 = load i64, i64* %ct, align 8
  %call112 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %75)
  %76 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %call113 = call %struct.rtx_def* @expand_simple_binop(i32 %73, i32 75, %struct.rtx_def* %74, %struct.rtx_def* %call112, %struct.rtx_def* %76, i32 1, i32 0)
  store %struct.rtx_def* %call113, %struct.rtx_def** %tmp, align 8
  br label %if.end.114

if.end.114:                                       ; preds = %if.then.111, %if.then.109
  br label %if.end.145

if.else.115:                                      ; preds = %if.end.106
  %77 = load i64, i64* %cf, align 8
  %cmp116 = icmp eq i64 %77, -1
  br i1 %cmp116, label %if.then.118, label %if.else.121

if.then.118:                                      ; preds = %if.else.115
  %78 = load i32, i32* %mode, align 4
  %79 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %80 = load i64, i64* %ct, align 8
  %call119 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %80)
  %81 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %call120 = call %struct.rtx_def* @expand_simple_binop(i32 %78, i32 84, %struct.rtx_def* %79, %struct.rtx_def* %call119, %struct.rtx_def* %81, i32 1, i32 0)
  store %struct.rtx_def* %call120, %struct.rtx_def** %tmp, align 8
  br label %if.end.144

if.else.121:                                      ; preds = %if.else.115
  %82 = load i64, i64* %diff, align 8
  %cmp122 = icmp eq i64 %82, -1
  br i1 %cmp122, label %land.lhs.true.124, label %if.else.133

land.lhs.true.124:                                ; preds = %if.else.121
  %83 = load i64, i64* %ct, align 8
  %tobool125 = icmp ne i64 %83, 0
  br i1 %tobool125, label %if.then.126, label %if.else.133

if.then.126:                                      ; preds = %land.lhs.true.124
  %84 = load i32, i32* %mode, align 4
  %85 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %86 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %call127 = call %struct.rtx_def* @expand_simple_unop(i32 %84, i32 86, %struct.rtx_def* %85, %struct.rtx_def* %86, i32 1)
  store %struct.rtx_def* %call127, %struct.rtx_def** %tmp, align 8
  %87 = load i64, i64* %cf, align 8
  %tobool128 = icmp ne i64 %87, 0
  br i1 %tobool128, label %if.then.129, label %if.end.132

if.then.129:                                      ; preds = %if.then.126
  %88 = load i32, i32* %mode, align 4
  %89 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %90 = load i64, i64* %cf, align 8
  %call130 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %90)
  %91 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %call131 = call %struct.rtx_def* @expand_simple_binop(i32 %88, i32 75, %struct.rtx_def* %89, %struct.rtx_def* %call130, %struct.rtx_def* %91, i32 1, i32 0)
  store %struct.rtx_def* %call131, %struct.rtx_def** %tmp, align 8
  br label %if.end.132

if.end.132:                                       ; preds = %if.then.129, %if.then.126
  br label %if.end.143

if.else.133:                                      ; preds = %land.lhs.true.124, %if.else.121
  %92 = load i32, i32* %mode, align 4
  %93 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %94 = load i64, i64* %cf, align 8
  %95 = load i64, i64* %ct, align 8
  %sub134 = sub nsw i64 %94, %95
  %96 = load i32, i32* %mode, align 4
  %call135 = call i64 @trunc_int_for_mode(i64 %sub134, i32 %96)
  %call136 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %call135)
  %97 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %call137 = call %struct.rtx_def* @expand_simple_binop(i32 %92, i32 83, %struct.rtx_def* %93, %struct.rtx_def* %call136, %struct.rtx_def* %97, i32 1, i32 0)
  store %struct.rtx_def* %call137, %struct.rtx_def** %tmp, align 8
  %98 = load i64, i64* %ct, align 8
  %tobool138 = icmp ne i64 %98, 0
  br i1 %tobool138, label %if.then.139, label %if.end.142

if.then.139:                                      ; preds = %if.else.133
  %99 = load i32, i32* %mode, align 4
  %100 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %101 = load i64, i64* %ct, align 8
  %call140 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %101)
  %102 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %call141 = call %struct.rtx_def* @expand_simple_binop(i32 %99, i32 75, %struct.rtx_def* %100, %struct.rtx_def* %call140, %struct.rtx_def* %102, i32 1, i32 0)
  store %struct.rtx_def* %call141, %struct.rtx_def** %tmp, align 8
  br label %if.end.142

if.end.142:                                       ; preds = %if.then.139, %if.else.133
  br label %if.end.143

if.end.143:                                       ; preds = %if.end.142, %if.end.132
  br label %if.end.144

if.end.144:                                       ; preds = %if.end.143, %if.then.118
  br label %if.end.145

if.end.145:                                       ; preds = %if.end.144, %if.end.114
  %103 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %104 = load %struct.rtx_def*, %struct.rtx_def** %out, align 8
  %cmp146 = icmp ne %struct.rtx_def* %103, %104
  br i1 %cmp146, label %if.then.148, label %if.end.150

if.then.148:                                      ; preds = %if.end.145
  %105 = load %struct.rtx_def*, %struct.rtx_def** %out, align 8
  %106 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %call149 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %105, %struct.rtx_def* %106)
  br label %if.end.150

if.end.150:                                       ; preds = %if.then.148, %if.end.145
  store i32 1, i32* %retval
  br label %return

if.end.151:                                       ; preds = %land.lhs.true.78, %land.lhs.true.76, %lor.lhs.false.74
  %107 = load i64, i64* %ct, align 8
  %108 = load i64, i64* %cf, align 8
  %sub152 = sub nsw i64 %107, %108
  store i64 %sub152, i64* %diff, align 8
  %109 = load i64, i64* %diff, align 8
  %cmp153 = icmp slt i64 %109, 0
  br i1 %cmp153, label %if.then.155, label %if.end.188

if.then.155:                                      ; preds = %if.end.151
  %110 = load i64, i64* %ct, align 8
  store i64 %110, i64* %tmp157, align 8
  %111 = load i64, i64* %cf, align 8
  store i64 %111, i64* %ct, align 8
  %112 = load i64, i64* %tmp157, align 8
  store i64 %112, i64* %cf, align 8
  %113 = load i64, i64* %diff, align 8
  %sub158 = sub nsw i64 0, %113
  store i64 %sub158, i64* %diff, align 8
  %114 = load %struct.rtx_def*, %struct.rtx_def** @ix86_compare_op0, align 8
  %115 = bitcast %struct.rtx_def* %114 to i32*
  %bf.load159 = load i32, i32* %115, align 8
  %bf.lshr160 = lshr i32 %bf.load159, 16
  %bf.clear161 = and i32 %bf.lshr160, 255
  %idxprom = sext i32 %bf.clear161 to i64
  %arrayidx162 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom
  %116 = load i32, i32* %arrayidx162, align 4
  %cmp163 = icmp eq i32 %116, 2
  br i1 %cmp163, label %if.then.181, label %lor.lhs.false.165

lor.lhs.false.165:                                ; preds = %if.then.155
  %117 = load %struct.rtx_def*, %struct.rtx_def** @ix86_compare_op0, align 8
  %118 = bitcast %struct.rtx_def* %117 to i32*
  %bf.load166 = load i32, i32* %118, align 8
  %bf.lshr167 = lshr i32 %bf.load166, 16
  %bf.clear168 = and i32 %bf.lshr167, 255
  %idxprom169 = sext i32 %bf.clear168 to i64
  %arrayidx170 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom169
  %119 = load i32, i32* %arrayidx170, align 4
  %cmp171 = icmp eq i32 %119, 6
  br i1 %cmp171, label %if.then.181, label %lor.lhs.false.173

lor.lhs.false.173:                                ; preds = %lor.lhs.false.165
  %120 = load %struct.rtx_def*, %struct.rtx_def** @ix86_compare_op0, align 8
  %121 = bitcast %struct.rtx_def* %120 to i32*
  %bf.load174 = load i32, i32* %121, align 8
  %bf.lshr175 = lshr i32 %bf.load174, 16
  %bf.clear176 = and i32 %bf.lshr175, 255
  %idxprom177 = sext i32 %bf.clear176 to i64
  %arrayidx178 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom177
  %122 = load i32, i32* %arrayidx178, align 4
  %cmp179 = icmp eq i32 %122, 8
  br i1 %cmp179, label %if.then.181, label %if.else.184

if.then.181:                                      ; preds = %lor.lhs.false.173, %lor.lhs.false.165, %if.then.155
  %123 = load i32, i32* %compare_code, align 4
  %call182 = call i32 @reverse_condition_maybe_unordered(i32 %123)
  store i32 %call182, i32* %compare_code, align 4
  %124 = load i32, i32* %code, align 4
  %call183 = call i32 @reverse_condition_maybe_unordered(i32 %124)
  store i32 %call183, i32* %code, align 4
  br label %if.end.187

if.else.184:                                      ; preds = %lor.lhs.false.173
  %125 = load i32, i32* %compare_code, align 4
  %call185 = call i32 @reverse_condition(i32 %125)
  store i32 %call185, i32* %compare_code, align 4
  %126 = load i32, i32* %code, align 4
  %call186 = call i32 @reverse_condition(i32 %126)
  store i32 %call186, i32* %code, align 4
  br label %if.end.187

if.end.187:                                       ; preds = %if.else.184, %if.then.181
  br label %if.end.188

if.end.188:                                       ; preds = %if.end.187, %if.end.151
  %127 = load i64, i64* %diff, align 8
  %cmp189 = icmp eq i64 %127, 1
  br i1 %cmp189, label %land.lhs.true.209, label %lor.lhs.false.191

lor.lhs.false.191:                                ; preds = %if.end.188
  %128 = load i64, i64* %diff, align 8
  %cmp192 = icmp eq i64 %128, 2
  br i1 %cmp192, label %land.lhs.true.209, label %lor.lhs.false.194

lor.lhs.false.194:                                ; preds = %lor.lhs.false.191
  %129 = load i64, i64* %diff, align 8
  %cmp195 = icmp eq i64 %129, 4
  br i1 %cmp195, label %land.lhs.true.209, label %lor.lhs.false.197

lor.lhs.false.197:                                ; preds = %lor.lhs.false.194
  %130 = load i64, i64* %diff, align 8
  %cmp198 = icmp eq i64 %130, 8
  br i1 %cmp198, label %land.lhs.true.209, label %lor.lhs.false.200

lor.lhs.false.200:                                ; preds = %lor.lhs.false.197
  %131 = load i64, i64* %diff, align 8
  %cmp201 = icmp eq i64 %131, 3
  br i1 %cmp201, label %land.lhs.true.209, label %lor.lhs.false.203

lor.lhs.false.203:                                ; preds = %lor.lhs.false.200
  %132 = load i64, i64* %diff, align 8
  %cmp204 = icmp eq i64 %132, 5
  br i1 %cmp204, label %land.lhs.true.209, label %lor.lhs.false.206

lor.lhs.false.206:                                ; preds = %lor.lhs.false.203
  %133 = load i64, i64* %diff, align 8
  %cmp207 = icmp eq i64 %133, 9
  br i1 %cmp207, label %land.lhs.true.209, label %if.end.278

land.lhs.true.209:                                ; preds = %lor.lhs.false.206, %lor.lhs.false.203, %lor.lhs.false.200, %lor.lhs.false.197, %lor.lhs.false.194, %lor.lhs.false.191, %if.end.188
  %134 = load i32, i32* %mode, align 4
  %cmp210 = icmp ne i32 %134, 5
  br i1 %cmp210, label %if.then.216, label %lor.lhs.false.212

lor.lhs.false.212:                                ; preds = %land.lhs.true.209
  %135 = load i64, i64* %cf, align 8
  %call213 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %135)
  %call214 = call i32 @x86_64_sign_extended_value(%struct.rtx_def* %call213)
  %tobool215 = icmp ne i32 %call214, 0
  br i1 %tobool215, label %if.then.216, label %if.end.278

if.then.216:                                      ; preds = %lor.lhs.false.212, %land.lhs.true.209
  %136 = load %struct.rtx_def*, %struct.rtx_def** %out, align 8
  %137 = load i32, i32* %code, align 4
  %138 = load %struct.rtx_def*, %struct.rtx_def** @ix86_compare_op0, align 8
  %139 = load %struct.rtx_def*, %struct.rtx_def** @ix86_compare_op1, align 8
  %call220 = call %struct.rtx_def* @emit_store_flag(%struct.rtx_def* %136, i32 %137, %struct.rtx_def* %138, %struct.rtx_def* %139, i32 0, i32 0, i32 1)
  store %struct.rtx_def* %call220, %struct.rtx_def** %out, align 8
  store i32 0, i32* %nops, align 4
  %140 = load i64, i64* %diff, align 8
  %cmp221 = icmp eq i64 %140, 1
  br i1 %cmp221, label %if.then.223, label %if.else.224

if.then.223:                                      ; preds = %if.then.216
  %141 = load %struct.rtx_def*, %struct.rtx_def** %out, align 8
  store %struct.rtx_def* %141, %struct.rtx_def** %tmp218, align 8
  br label %if.end.235

if.else.224:                                      ; preds = %if.then.216
  %142 = load %struct.rtx_def*, %struct.rtx_def** %out, align 8
  store %struct.rtx_def* %142, %struct.rtx_def** %out1, align 8
  %143 = load i32, i32* %mode, align 4
  %144 = load %struct.rtx_def*, %struct.rtx_def** %out1, align 8
  %145 = load i64, i64* %diff, align 8
  %and226 = and i64 %145, -2
  %call227 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %and226)
  %call228 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 78, i32 %143, %struct.rtx_def* %144, %struct.rtx_def* %call227)
  store %struct.rtx_def* %call228, %struct.rtx_def** %tmp218, align 8
  %146 = load i32, i32* %nops, align 4
  %inc = add nsw i32 %146, 1
  store i32 %inc, i32* %nops, align 4
  %147 = load i64, i64* %diff, align 8
  %and229 = and i64 %147, 1
  %tobool230 = icmp ne i64 %and229, 0
  br i1 %tobool230, label %if.then.231, label %if.end.234

if.then.231:                                      ; preds = %if.else.224
  %148 = load i32, i32* %mode, align 4
  %149 = load %struct.rtx_def*, %struct.rtx_def** %tmp218, align 8
  %150 = load %struct.rtx_def*, %struct.rtx_def** %out1, align 8
  %call232 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %148, %struct.rtx_def* %149, %struct.rtx_def* %150)
  store %struct.rtx_def* %call232, %struct.rtx_def** %tmp218, align 8
  %151 = load i32, i32* %nops, align 4
  %inc233 = add nsw i32 %151, 1
  store i32 %inc233, i32* %nops, align 4
  br label %if.end.234

if.end.234:                                       ; preds = %if.then.231, %if.else.224
  br label %if.end.235

if.end.235:                                       ; preds = %if.end.234, %if.then.223
  %152 = load i64, i64* %cf, align 8
  %cmp236 = icmp ne i64 %152, 0
  br i1 %cmp236, label %if.then.238, label %if.end.242

if.then.238:                                      ; preds = %if.end.235
  %153 = load i32, i32* %mode, align 4
  %154 = load %struct.rtx_def*, %struct.rtx_def** %tmp218, align 8
  %155 = load i64, i64* %cf, align 8
  %call239 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %155)
  %call240 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %153, %struct.rtx_def* %154, %struct.rtx_def* %call239)
  store %struct.rtx_def* %call240, %struct.rtx_def** %tmp218, align 8
  %156 = load i32, i32* %nops, align 4
  %inc241 = add nsw i32 %156, 1
  store i32 %inc241, i32* %nops, align 4
  br label %if.end.242

if.end.242:                                       ; preds = %if.then.238, %if.end.235
  %157 = load %struct.rtx_def*, %struct.rtx_def** %tmp218, align 8
  %158 = load %struct.rtx_def*, %struct.rtx_def** %out, align 8
  %cmp243 = icmp ne %struct.rtx_def* %157, %158
  br i1 %cmp243, label %land.lhs.true.245, label %if.end.270

land.lhs.true.245:                                ; preds = %if.end.242
  %159 = load %struct.rtx_def*, %struct.rtx_def** %tmp218, align 8
  %160 = bitcast %struct.rtx_def* %159 to i32*
  %bf.load246 = load i32, i32* %160, align 8
  %bf.clear247 = and i32 %bf.load246, 65535
  %cmp248 = icmp ne i32 %bf.clear247, 63
  br i1 %cmp248, label %if.then.255, label %lor.lhs.false.250

lor.lhs.false.250:                                ; preds = %land.lhs.true.245
  %161 = load %struct.rtx_def*, %struct.rtx_def** %tmp218, align 8
  %fld251 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %161, i32 0, i32 1
  %arrayidx252 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld251, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx252 to %struct.rtx_def**
  %162 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %163 = load %struct.rtx_def*, %struct.rtx_def** %out, align 8
  %cmp253 = icmp ne %struct.rtx_def* %162, %163
  br i1 %cmp253, label %if.then.255, label %if.end.270

if.then.255:                                      ; preds = %lor.lhs.false.250, %land.lhs.true.245
  %164 = load i32, i32* %nops, align 4
  %cmp256 = icmp eq i32 %164, 1
  br i1 %cmp256, label %if.then.258, label %if.else.266

if.then.258:                                      ; preds = %if.then.255
  %call260 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  store %struct.rtx_def* %call260, %struct.rtx_def** %clob, align 8
  %165 = load %struct.rtx_def*, %struct.rtx_def** %clob, align 8
  %call261 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %165)
  store %struct.rtx_def* %call261, %struct.rtx_def** %clob, align 8
  %166 = load %struct.rtx_def*, %struct.rtx_def** %out, align 8
  %167 = load %struct.rtx_def*, %struct.rtx_def** %tmp218, align 8
  %call262 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %166, %struct.rtx_def* %167)
  store %struct.rtx_def* %call262, %struct.rtx_def** %tmp218, align 8
  %168 = load %struct.rtx_def*, %struct.rtx_def** %tmp218, align 8
  %169 = load %struct.rtx_def*, %struct.rtx_def** %clob, align 8
  %call263 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %168, %struct.rtx_def* %169)
  %call264 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call263)
  store %struct.rtx_def* %call264, %struct.rtx_def** %tmp218, align 8
  %170 = load %struct.rtx_def*, %struct.rtx_def** %tmp218, align 8
  %call265 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %170)
  br label %if.end.269

if.else.266:                                      ; preds = %if.then.255
  %171 = load %struct.rtx_def*, %struct.rtx_def** %out, align 8
  %172 = load %struct.rtx_def*, %struct.rtx_def** %tmp218, align 8
  %call267 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %171, %struct.rtx_def* %172)
  %call268 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call267)
  br label %if.end.269

if.end.269:                                       ; preds = %if.else.266, %if.then.258
  br label %if.end.270

if.end.270:                                       ; preds = %if.end.269, %lor.lhs.false.250, %if.end.242
  %173 = load %struct.rtx_def*, %struct.rtx_def** %out, align 8
  %174 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx271 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %174, i64 0
  %175 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx271, align 8
  %cmp272 = icmp ne %struct.rtx_def* %173, %175
  br i1 %cmp272, label %if.then.274, label %if.end.277

if.then.274:                                      ; preds = %if.end.270
  %176 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx275 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %176, i64 0
  %177 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx275, align 8
  %178 = load %struct.rtx_def*, %struct.rtx_def** %out, align 8
  %call276 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %177, %struct.rtx_def* %178)
  br label %if.end.277

if.end.277:                                       ; preds = %if.then.274, %if.end.270
  store i32 1, i32* %retval
  br label %return

if.end.278:                                       ; preds = %lor.lhs.false.212, %lor.lhs.false.206
  %179 = load i32, i32* @optimize_size, align 4
  %tobool279 = icmp ne i32 %179, 0
  br i1 %tobool279, label %if.end.337, label %land.lhs.true.280

land.lhs.true.280:                                ; preds = %if.end.278
  %180 = load i32, i32* @ix86_arch, align 4
  %shl = shl i32 1, %180
  %and281 = and i32 104, %shl
  %tobool282 = icmp ne i32 %and281, 0
  br i1 %tobool282, label %if.end.337, label %lor.lhs.false.283

lor.lhs.false.283:                                ; preds = %land.lhs.true.280
  %181 = load i32, i32* @target_flags, align 4
  %and284 = and i32 %181, 327680
  %cmp285 = icmp ne i32 %and284, 0
  br i1 %cmp285, label %if.end.337, label %if.then.287

if.then.287:                                      ; preds = %lor.lhs.false.283
  %182 = load i64, i64* %ct, align 8
  %cmp288 = icmp eq i64 %182, 0
  br i1 %cmp288, label %if.then.290, label %if.end.321

if.then.290:                                      ; preds = %if.then.287
  %183 = load i64, i64* %cf, align 8
  store i64 %183, i64* %ct, align 8
  store i64 0, i64* %cf, align 8
  %184 = load %struct.rtx_def*, %struct.rtx_def** @ix86_compare_op0, align 8
  %185 = bitcast %struct.rtx_def* %184 to i32*
  %bf.load291 = load i32, i32* %185, align 8
  %bf.lshr292 = lshr i32 %bf.load291, 16
  %bf.clear293 = and i32 %bf.lshr292, 255
  %idxprom294 = sext i32 %bf.clear293 to i64
  %arrayidx295 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom294
  %186 = load i32, i32* %arrayidx295, align 4
  %cmp296 = icmp eq i32 %186, 2
  br i1 %cmp296, label %if.then.314, label %lor.lhs.false.298

lor.lhs.false.298:                                ; preds = %if.then.290
  %187 = load %struct.rtx_def*, %struct.rtx_def** @ix86_compare_op0, align 8
  %188 = bitcast %struct.rtx_def* %187 to i32*
  %bf.load299 = load i32, i32* %188, align 8
  %bf.lshr300 = lshr i32 %bf.load299, 16
  %bf.clear301 = and i32 %bf.lshr300, 255
  %idxprom302 = sext i32 %bf.clear301 to i64
  %arrayidx303 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom302
  %189 = load i32, i32* %arrayidx303, align 4
  %cmp304 = icmp eq i32 %189, 6
  br i1 %cmp304, label %if.then.314, label %lor.lhs.false.306

lor.lhs.false.306:                                ; preds = %lor.lhs.false.298
  %190 = load %struct.rtx_def*, %struct.rtx_def** @ix86_compare_op0, align 8
  %191 = bitcast %struct.rtx_def* %190 to i32*
  %bf.load307 = load i32, i32* %191, align 8
  %bf.lshr308 = lshr i32 %bf.load307, 16
  %bf.clear309 = and i32 %bf.lshr308, 255
  %idxprom310 = sext i32 %bf.clear309 to i64
  %arrayidx311 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom310
  %192 = load i32, i32* %arrayidx311, align 4
  %cmp312 = icmp eq i32 %192, 8
  br i1 %cmp312, label %if.then.314, label %if.else.317

if.then.314:                                      ; preds = %lor.lhs.false.306, %lor.lhs.false.298, %if.then.290
  %193 = load i32, i32* %compare_code, align 4
  %call315 = call i32 @reverse_condition_maybe_unordered(i32 %193)
  store i32 %call315, i32* %compare_code, align 4
  %194 = load i32, i32* %code, align 4
  %call316 = call i32 @reverse_condition_maybe_unordered(i32 %194)
  store i32 %call316, i32* %code, align 4
  br label %if.end.320

if.else.317:                                      ; preds = %lor.lhs.false.306
  %195 = load i32, i32* %compare_code, align 4
  %call318 = call i32 @reverse_condition(i32 %195)
  store i32 %call318, i32* %compare_code, align 4
  %196 = load i32, i32* %code, align 4
  %call319 = call i32 @reverse_condition(i32 %196)
  store i32 %call319, i32* %code, align 4
  br label %if.end.320

if.end.320:                                       ; preds = %if.else.317, %if.then.314
  br label %if.end.321

if.end.321:                                       ; preds = %if.end.320, %if.then.287
  %197 = load %struct.rtx_def*, %struct.rtx_def** %out, align 8
  %198 = load i32, i32* %code, align 4
  %199 = load %struct.rtx_def*, %struct.rtx_def** @ix86_compare_op0, align 8
  %200 = load %struct.rtx_def*, %struct.rtx_def** @ix86_compare_op1, align 8
  %call322 = call %struct.rtx_def* @emit_store_flag(%struct.rtx_def* %197, i32 %198, %struct.rtx_def* %199, %struct.rtx_def* %200, i32 0, i32 0, i32 1)
  store %struct.rtx_def* %call322, %struct.rtx_def** %out, align 8
  %201 = load i32, i32* %mode, align 4
  %202 = load %struct.rtx_def*, %struct.rtx_def** %out, align 8
  %203 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 63), align 8
  %204 = load %struct.rtx_def*, %struct.rtx_def** %out, align 8
  %call323 = call %struct.rtx_def* @expand_simple_binop(i32 %201, i32 75, %struct.rtx_def* %202, %struct.rtx_def* %203, %struct.rtx_def* %204, i32 1, i32 0)
  store %struct.rtx_def* %call323, %struct.rtx_def** %out, align 8
  %205 = load i32, i32* %mode, align 4
  %206 = load %struct.rtx_def*, %struct.rtx_def** %out, align 8
  %207 = load i64, i64* %cf, align 8
  %208 = load i64, i64* %ct, align 8
  %sub324 = sub nsw i64 %207, %208
  %209 = load i32, i32* %mode, align 4
  %call325 = call i64 @trunc_int_for_mode(i64 %sub324, i32 %209)
  %call326 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %call325)
  %210 = load %struct.rtx_def*, %struct.rtx_def** %out, align 8
  %call327 = call %struct.rtx_def* @expand_simple_binop(i32 %205, i32 83, %struct.rtx_def* %206, %struct.rtx_def* %call326, %struct.rtx_def* %210, i32 1, i32 0)
  store %struct.rtx_def* %call327, %struct.rtx_def** %out, align 8
  %211 = load i32, i32* %mode, align 4
  %212 = load %struct.rtx_def*, %struct.rtx_def** %out, align 8
  %213 = load i64, i64* %ct, align 8
  %call328 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %213)
  %214 = load %struct.rtx_def*, %struct.rtx_def** %out, align 8
  %call329 = call %struct.rtx_def* @expand_simple_binop(i32 %211, i32 75, %struct.rtx_def* %212, %struct.rtx_def* %call328, %struct.rtx_def* %214, i32 1, i32 0)
  store %struct.rtx_def* %call329, %struct.rtx_def** %out, align 8
  %215 = load %struct.rtx_def*, %struct.rtx_def** %out, align 8
  %216 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx330 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %216, i64 0
  %217 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx330, align 8
  %cmp331 = icmp ne %struct.rtx_def* %215, %217
  br i1 %cmp331, label %if.then.333, label %if.end.336

if.then.333:                                      ; preds = %if.end.321
  %218 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx334 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %218, i64 0
  %219 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx334, align 8
  %220 = load %struct.rtx_def*, %struct.rtx_def** %out, align 8
  %call335 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %219, %struct.rtx_def* %220)
  br label %if.end.336

if.end.336:                                       ; preds = %if.then.333, %if.end.321
  store i32 1, i32* %retval
  br label %return

if.end.337:                                       ; preds = %lor.lhs.false.283, %land.lhs.true.280, %if.end.278
  br label %if.end.338

if.end.338:                                       ; preds = %if.end.337, %land.lhs.true.58, %land.lhs.true.53, %lor.lhs.false.50, %if.end.42
  %221 = load i32, i32* @ix86_arch, align 4
  %shl339 = shl i32 1, %221
  %and340 = and i32 104, %shl339
  %tobool341 = icmp ne i32 %and340, 0
  br i1 %tobool341, label %if.end.429, label %lor.lhs.false.342

lor.lhs.false.342:                                ; preds = %if.end.338
  %222 = load i32, i32* @target_flags, align 4
  %and343 = and i32 %222, 327680
  %cmp344 = icmp ne i32 %and343, 0
  br i1 %cmp344, label %if.end.429, label %if.then.346

if.then.346:                                      ; preds = %lor.lhs.false.342
  %223 = load i32, i32* @optimize_size, align 4
  %tobool354 = icmp ne i32 %223, 0
  br i1 %tobool354, label %if.then.355, label %if.end.356

if.then.355:                                      ; preds = %if.then.346
  store i32 0, i32* %retval
  br label %return

if.end.356:                                       ; preds = %if.then.346
  %224 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx357 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %224, i64 2
  %225 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx357, align 8
  %226 = bitcast %struct.rtx_def* %225 to i32*
  %bf.load358 = load i32, i32* %226, align 8
  %bf.clear359 = and i32 %bf.load358, 65535
  %cmp360 = icmp eq i32 %bf.clear359, 54
  br i1 %cmp360, label %if.then.362, label %if.else.384

if.then.362:                                      ; preds = %if.end.356
  %227 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx363 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %227, i64 3
  %228 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx363, align 8
  store %struct.rtx_def* %228, %struct.rtx_def** %var, align 8
  %229 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx364 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %229, i64 2
  %230 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx364, align 8
  %fld365 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %230, i32 0, i32 1
  %arrayidx366 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld365, i32 0, i64 0
  %rtwint367 = bitcast %union.rtunion_def* %arrayidx366 to i64*
  %231 = load i64, i64* %rtwint367, align 8
  %cmp368 = icmp eq i64 %231, 0
  br i1 %cmp368, label %if.then.370, label %if.else.372

if.then.370:                                      ; preds = %if.then.362
  %232 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 63), align 8
  %233 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx371 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %233, i64 3
  store %struct.rtx_def* %232, %struct.rtx_def** %arrayidx371, align 8
  %234 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 18), align 8
  store %struct.optab* %234, %struct.optab** %op, align 8
  br label %if.end.383

if.else.372:                                      ; preds = %if.then.362
  %235 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx373 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %235, i64 2
  %236 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx373, align 8
  %fld374 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %236, i32 0, i32 1
  %arrayidx375 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld374, i32 0, i64 0
  %rtwint376 = bitcast %union.rtunion_def* %arrayidx375 to i64*
  %237 = load i64, i64* %rtwint376, align 8
  %cmp377 = icmp eq i64 %237, -1
  br i1 %cmp377, label %if.then.379, label %if.else.381

if.then.379:                                      ; preds = %if.else.372
  %238 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %239 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx380 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %239, i64 3
  store %struct.rtx_def* %238, %struct.rtx_def** %arrayidx380, align 8
  %240 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 19), align 8
  store %struct.optab* %240, %struct.optab** %op, align 8
  br label %if.end.382

if.else.381:                                      ; preds = %if.else.372
  store i32 0, i32* %retval
  br label %return

if.end.382:                                       ; preds = %if.then.379
  br label %if.end.383

if.end.383:                                       ; preds = %if.end.382, %if.then.370
  br label %if.end.414

if.else.384:                                      ; preds = %if.end.356
  %241 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx385 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %241, i64 3
  %242 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx385, align 8
  %243 = bitcast %struct.rtx_def* %242 to i32*
  %bf.load386 = load i32, i32* %243, align 8
  %bf.clear387 = and i32 %bf.load386, 65535
  %cmp388 = icmp eq i32 %bf.clear387, 54
  br i1 %cmp388, label %if.then.390, label %if.else.412

if.then.390:                                      ; preds = %if.else.384
  %244 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx391 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %244, i64 2
  %245 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx391, align 8
  store %struct.rtx_def* %245, %struct.rtx_def** %var, align 8
  %246 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx392 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %246, i64 3
  %247 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx392, align 8
  %fld393 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %247, i32 0, i32 1
  %arrayidx394 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld393, i32 0, i64 0
  %rtwint395 = bitcast %union.rtunion_def* %arrayidx394 to i64*
  %248 = load i64, i64* %rtwint395, align 8
  %cmp396 = icmp eq i64 %248, 0
  br i1 %cmp396, label %if.then.398, label %if.else.400

if.then.398:                                      ; preds = %if.then.390
  %249 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 63), align 8
  %250 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx399 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %250, i64 2
  store %struct.rtx_def* %249, %struct.rtx_def** %arrayidx399, align 8
  %251 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 18), align 8
  store %struct.optab* %251, %struct.optab** %op, align 8
  br label %if.end.411

if.else.400:                                      ; preds = %if.then.390
  %252 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx401 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %252, i64 3
  %253 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx401, align 8
  %fld402 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %253, i32 0, i32 1
  %arrayidx403 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld402, i32 0, i64 0
  %rtwint404 = bitcast %union.rtunion_def* %arrayidx403 to i64*
  %254 = load i64, i64* %rtwint404, align 8
  %cmp405 = icmp eq i64 %254, -1
  br i1 %cmp405, label %if.then.407, label %if.else.409

if.then.407:                                      ; preds = %if.else.400
  %255 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %256 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx408 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %256, i64 2
  store %struct.rtx_def* %255, %struct.rtx_def** %arrayidx408, align 8
  %257 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 19), align 8
  store %struct.optab* %257, %struct.optab** %op, align 8
  br label %if.end.410

if.else.409:                                      ; preds = %if.else.400
  store i32 0, i32* %retval
  br label %return

if.end.410:                                       ; preds = %if.then.407
  br label %if.end.411

if.end.411:                                       ; preds = %if.end.410, %if.then.398
  br label %if.end.413

if.else.412:                                      ; preds = %if.else.384
  store i32 0, i32* %retval
  br label %return

if.end.413:                                       ; preds = %if.end.411
  br label %if.end.414

if.end.414:                                       ; preds = %if.end.413, %if.end.383
  %258 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx415 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %258, i64 0
  %259 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx415, align 8
  store %struct.rtx_def* %259, %struct.rtx_def** %orig_out, align 8
  %260 = load i32, i32* %mode, align 4
  %call416 = call %struct.rtx_def* @gen_reg_rtx(i32 %260)
  store %struct.rtx_def* %call416, %struct.rtx_def** %tmp353, align 8
  %261 = load %struct.rtx_def*, %struct.rtx_def** %tmp353, align 8
  %262 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx417 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %262, i64 0
  store %struct.rtx_def* %261, %struct.rtx_def** %arrayidx417, align 8
  %263 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %call418 = call i32 @ix86_expand_int_movcc(%struct.rtx_def** %263)
  %cmp419 = icmp eq i32 %call418, 0
  br i1 %cmp419, label %if.then.421, label %if.end.422

if.then.421:                                      ; preds = %if.end.414
  store i32 0, i32* %retval
  br label %return

if.end.422:                                       ; preds = %if.end.414
  %264 = load i32, i32* %mode, align 4
  %265 = load %struct.optab*, %struct.optab** %op, align 8
  %266 = load %struct.rtx_def*, %struct.rtx_def** %var, align 8
  %267 = load %struct.rtx_def*, %struct.rtx_def** %tmp353, align 8
  %268 = load %struct.rtx_def*, %struct.rtx_def** %orig_out, align 8
  %call423 = call %struct.rtx_def* @expand_binop(i32 %264, %struct.optab* %265, %struct.rtx_def* %266, %struct.rtx_def* %267, %struct.rtx_def* %268, i32 0, i32 2)
  store %struct.rtx_def* %call423, %struct.rtx_def** %out351, align 8
  %269 = load %struct.rtx_def*, %struct.rtx_def** %out351, align 8
  %270 = load %struct.rtx_def*, %struct.rtx_def** %orig_out, align 8
  %cmp424 = icmp ne %struct.rtx_def* %269, %270
  br i1 %cmp424, label %if.then.426, label %if.end.428

if.then.426:                                      ; preds = %if.end.422
  %271 = load %struct.rtx_def*, %struct.rtx_def** %orig_out, align 8
  %272 = load %struct.rtx_def*, %struct.rtx_def** %out351, align 8
  %call427 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %271, %struct.rtx_def* %272)
  br label %if.end.428

if.end.428:                                       ; preds = %if.then.426, %if.end.422
  store i32 1, i32* %retval
  br label %return

if.end.429:                                       ; preds = %lor.lhs.false.342, %if.end.338
  %273 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx430 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %273, i64 2
  %274 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx430, align 8
  %275 = load i32, i32* %mode, align 4
  %call431 = call i32 @nonimmediate_operand(%struct.rtx_def* %274, i32 %275)
  %tobool432 = icmp ne i32 %call431, 0
  br i1 %tobool432, label %if.end.437, label %if.then.433

if.then.433:                                      ; preds = %if.end.429
  %276 = load i32, i32* %mode, align 4
  %277 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx434 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %277, i64 2
  %278 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx434, align 8
  %call435 = call %struct.rtx_def* @force_reg(i32 %276, %struct.rtx_def* %278)
  %279 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx436 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %279, i64 2
  store %struct.rtx_def* %call435, %struct.rtx_def** %arrayidx436, align 8
  br label %if.end.437

if.end.437:                                       ; preds = %if.then.433, %if.end.429
  %280 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx438 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %280, i64 3
  %281 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx438, align 8
  %282 = load i32, i32* %mode, align 4
  %call439 = call i32 @nonimmediate_operand(%struct.rtx_def* %281, i32 %282)
  %tobool440 = icmp ne i32 %call439, 0
  br i1 %tobool440, label %if.end.445, label %if.then.441

if.then.441:                                      ; preds = %if.end.437
  %283 = load i32, i32* %mode, align 4
  %284 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx442 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %284, i64 3
  %285 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx442, align 8
  %call443 = call %struct.rtx_def* @force_reg(i32 %283, %struct.rtx_def* %285)
  %286 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx444 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %286, i64 3
  store %struct.rtx_def* %call443, %struct.rtx_def** %arrayidx444, align 8
  br label %if.end.445

if.end.445:                                       ; preds = %if.then.441, %if.end.437
  %287 = load %struct.rtx_def*, %struct.rtx_def** %bypass_test, align 8
  %tobool446 = icmp ne %struct.rtx_def* %287, null
  br i1 %tobool446, label %land.lhs.true.447, label %if.end.459

land.lhs.true.447:                                ; preds = %if.end.445
  %288 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx448 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %288, i64 0
  %289 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx448, align 8
  %290 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx449 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %290, i64 3
  %291 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx449, align 8
  %call450 = call i32 @reg_overlap_mentioned_p(%struct.rtx_def* %289, %struct.rtx_def* %291)
  %tobool451 = icmp ne i32 %call450, 0
  br i1 %tobool451, label %if.then.452, label %if.end.459

if.then.452:                                      ; preds = %land.lhs.true.447
  %292 = load i32, i32* %mode, align 4
  %call455 = call %struct.rtx_def* @gen_reg_rtx(i32 %292)
  store %struct.rtx_def* %call455, %struct.rtx_def** %tmp454, align 8
  %293 = load %struct.rtx_def*, %struct.rtx_def** %tmp454, align 8
  %294 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx456 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %294, i64 3
  %295 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx456, align 8
  %call457 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %293, %struct.rtx_def* %295)
  %296 = load %struct.rtx_def*, %struct.rtx_def** %tmp454, align 8
  %297 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx458 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %297, i64 3
  store %struct.rtx_def* %296, %struct.rtx_def** %arrayidx458, align 8
  br label %if.end.459

if.end.459:                                       ; preds = %if.then.452, %land.lhs.true.447, %if.end.445
  %298 = load %struct.rtx_def*, %struct.rtx_def** %second_test, align 8
  %tobool460 = icmp ne %struct.rtx_def* %298, null
  br i1 %tobool460, label %land.lhs.true.461, label %if.end.473

land.lhs.true.461:                                ; preds = %if.end.459
  %299 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx462 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %299, i64 0
  %300 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx462, align 8
  %301 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx463 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %301, i64 2
  %302 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx463, align 8
  %call464 = call i32 @reg_overlap_mentioned_p(%struct.rtx_def* %300, %struct.rtx_def* %302)
  %tobool465 = icmp ne i32 %call464, 0
  br i1 %tobool465, label %if.then.466, label %if.end.473

if.then.466:                                      ; preds = %land.lhs.true.461
  %303 = load i32, i32* %mode, align 4
  %call469 = call %struct.rtx_def* @gen_reg_rtx(i32 %303)
  store %struct.rtx_def* %call469, %struct.rtx_def** %tmp468, align 8
  %304 = load %struct.rtx_def*, %struct.rtx_def** %tmp468, align 8
  %305 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx470 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %305, i64 2
  %306 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx470, align 8
  %call471 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %304, %struct.rtx_def* %306)
  %307 = load %struct.rtx_def*, %struct.rtx_def** %tmp468, align 8
  %308 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx472 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %308, i64 2
  store %struct.rtx_def* %307, %struct.rtx_def** %arrayidx472, align 8
  br label %if.end.473

if.end.473:                                       ; preds = %if.then.466, %land.lhs.true.461, %if.end.459
  %309 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx474 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %309, i64 2
  %310 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx474, align 8
  %call475 = call i32 @register_operand(%struct.rtx_def* %310, i32 0)
  %tobool476 = icmp ne i32 %call475, 0
  br i1 %tobool476, label %if.end.485, label %land.lhs.true.477

land.lhs.true.477:                                ; preds = %if.end.473
  %311 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx478 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %311, i64 3
  %312 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx478, align 8
  %call479 = call i32 @register_operand(%struct.rtx_def* %312, i32 0)
  %tobool480 = icmp ne i32 %call479, 0
  br i1 %tobool480, label %if.end.485, label %if.then.481

if.then.481:                                      ; preds = %land.lhs.true.477
  %313 = load i32, i32* %mode, align 4
  %314 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx482 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %314, i64 2
  %315 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx482, align 8
  %call483 = call %struct.rtx_def* @force_reg(i32 %313, %struct.rtx_def* %315)
  %316 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx484 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %316, i64 2
  store %struct.rtx_def* %call483, %struct.rtx_def** %arrayidx484, align 8
  br label %if.end.485

if.end.485:                                       ; preds = %if.then.481, %land.lhs.true.477, %if.end.473
  %317 = load %struct.rtx_def*, %struct.rtx_def** %compare_seq, align 8
  %call486 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %317)
  %318 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx487 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %318, i64 0
  %319 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx487, align 8
  %320 = load i32, i32* %mode, align 4
  %321 = load %struct.rtx_def*, %struct.rtx_def** %compare_op, align 8
  %322 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx488 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %322, i64 2
  %323 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx488, align 8
  %324 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx489 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %324, i64 3
  %325 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx489, align 8
  %call490 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 72, i32 %320, %struct.rtx_def* %321, %struct.rtx_def* %323, %struct.rtx_def* %325)
  %call491 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %319, %struct.rtx_def* %call490)
  %call492 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call491)
  %326 = load %struct.rtx_def*, %struct.rtx_def** %bypass_test, align 8
  %tobool493 = icmp ne %struct.rtx_def* %326, null
  br i1 %tobool493, label %if.then.494, label %if.end.501

if.then.494:                                      ; preds = %if.end.485
  %327 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx495 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %327, i64 0
  %328 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx495, align 8
  %329 = load i32, i32* %mode, align 4
  %330 = load %struct.rtx_def*, %struct.rtx_def** %bypass_test, align 8
  %331 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx496 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %331, i64 3
  %332 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx496, align 8
  %333 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx497 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %333, i64 0
  %334 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx497, align 8
  %call498 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 72, i32 %329, %struct.rtx_def* %330, %struct.rtx_def* %332, %struct.rtx_def* %334)
  %call499 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %328, %struct.rtx_def* %call498)
  %call500 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call499)
  br label %if.end.501

if.end.501:                                       ; preds = %if.then.494, %if.end.485
  %335 = load %struct.rtx_def*, %struct.rtx_def** %second_test, align 8
  %tobool502 = icmp ne %struct.rtx_def* %335, null
  br i1 %tobool502, label %if.then.503, label %if.end.510

if.then.503:                                      ; preds = %if.end.501
  %336 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx504 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %336, i64 0
  %337 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx504, align 8
  %338 = load i32, i32* %mode, align 4
  %339 = load %struct.rtx_def*, %struct.rtx_def** %second_test, align 8
  %340 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx505 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %340, i64 2
  %341 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx505, align 8
  %342 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx506 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %342, i64 0
  %343 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx506, align 8
  %call507 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 72, i32 %338, %struct.rtx_def* %339, %struct.rtx_def* %341, %struct.rtx_def* %343)
  %call508 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %337, %struct.rtx_def* %call507)
  %call509 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call508)
  br label %if.end.510

if.end.510:                                       ; preds = %if.then.503, %if.end.501
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.510, %if.end.428, %if.then.421, %if.else.412, %if.else.409, %if.else.381, %if.then.355, %if.end.336, %if.end.277, %if.end.150
  %344 = load i32, i32* %retval
  ret i32 %344
}

declare %struct.rtx_def* @gen_int_mode(i64, i32) #0

declare void @start_sequence() #0

declare %struct.rtx_def* @gen_sequence() #0

declare void @end_sequence() #0

declare i32 @reverse_condition(i32) #0

declare i32 @reg_overlap_mentioned_p(%struct.rtx_def*, %struct.rtx_def*) #0

declare %struct.rtx_def* @gen_x86_movdicc_0_m1_rex64(%struct.rtx_def*) #0

declare %struct.rtx_def* @gen_x86_movsicc_0_m1(%struct.rtx_def*) #0

declare %struct.rtx_def* @expand_simple_binop(i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32, i32) #0

declare %struct.rtx_def* @expand_simple_unop(i32, i32, %struct.rtx_def*, %struct.rtx_def*, i32) #0

declare %struct.rtx_def* @emit_store_flag(%struct.rtx_def*, i32, %struct.rtx_def*, %struct.rtx_def*, i32, i32, i32) #0

; Function Attrs: nounwind uwtable
define i32 @ix86_expand_fp_movcc(%struct.rtx_def** %operands) #1 {
entry:
  %retval = alloca i32, align 4
  %operands.addr = alloca %struct.rtx_def**, align 8
  %code = alloca i32, align 4
  %tmp = alloca %struct.rtx_def*, align 8
  %compare_op = alloca %struct.rtx_def*, align 8
  %second_test = alloca %struct.rtx_def*, align 8
  %bypass_test = alloca %struct.rtx_def*, align 8
  %op0 = alloca %struct.rtx_def*, align 8
  %op1 = alloca %struct.rtx_def*, align 8
  %tmp84 = alloca %struct.rtx_def*, align 8
  %tmp172 = alloca %struct.rtx_def*, align 8
  %tmp202 = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  %0 = load i32, i32* @ix86_fpmath, align 4
  %and = and i32 %0, 2
  %cmp = icmp ne i32 %and, 0
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 0
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %3 = bitcast %struct.rtx_def* %2 to i32*
  %bf.load = load i32, i32* %3, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %cmp4 = icmp eq i32 %bf.clear, 15
  br i1 %cmp4, label %land.lhs.true.16, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true, %entry
  %4 = load i32, i32* @target_flags, align 4
  %and5 = and i32 %4, 262144
  %cmp6 = icmp ne i32 %and5, 0
  br i1 %cmp6, label %land.lhs.true.7, label %if.end.234

land.lhs.true.7:                                  ; preds = %lor.lhs.false
  %5 = load i32, i32* @ix86_fpmath, align 4
  %and8 = and i32 %5, 2
  %cmp9 = icmp ne i32 %and8, 0
  br i1 %cmp9, label %land.lhs.true.10, label %if.end.234

land.lhs.true.10:                                 ; preds = %land.lhs.true.7
  %6 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx11 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %6, i64 0
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx11, align 8
  %8 = bitcast %struct.rtx_def* %7 to i32*
  %bf.load12 = load i32, i32* %8, align 8
  %bf.lshr13 = lshr i32 %bf.load12, 16
  %bf.clear14 = and i32 %bf.lshr13, 255
  %cmp15 = icmp eq i32 %bf.clear14, 16
  br i1 %cmp15, label %land.lhs.true.16, label %if.end.234

land.lhs.true.16:                                 ; preds = %land.lhs.true.10, %land.lhs.true
  %9 = load %struct.rtx_def*, %struct.rtx_def** @ix86_compare_op0, align 8
  %10 = bitcast %struct.rtx_def* %9 to i32*
  %bf.load17 = load i32, i32* %10, align 8
  %bf.lshr18 = lshr i32 %bf.load17, 16
  %bf.clear19 = and i32 %bf.lshr18, 255
  %11 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx20 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %11, i64 0
  %12 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx20, align 8
  %13 = bitcast %struct.rtx_def* %12 to i32*
  %bf.load21 = load i32, i32* %13, align 8
  %bf.lshr22 = lshr i32 %bf.load21, 16
  %bf.clear23 = and i32 %bf.lshr22, 255
  %cmp24 = icmp eq i32 %bf.clear19, %bf.clear23
  br i1 %cmp24, label %land.lhs.true.25, label %if.end.234

land.lhs.true.25:                                 ; preds = %land.lhs.true.16
  %14 = load i32, i32* @target_flags, align 4
  %and26 = and i32 %14, 16
  %tobool = icmp ne i32 %and26, 0
  br i1 %tobool, label %lor.lhs.false.27, label %land.lhs.true.37

lor.lhs.false.27:                                 ; preds = %land.lhs.true.25
  %15 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx28 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %15, i64 1
  %16 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx28, align 8
  %17 = bitcast %struct.rtx_def* %16 to i32*
  %bf.load29 = load i32, i32* %17, align 8
  %bf.clear30 = and i32 %bf.load29, 65535
  %cmp31 = icmp ne i32 %bf.clear30, 119
  br i1 %cmp31, label %land.lhs.true.32, label %if.end.234

land.lhs.true.32:                                 ; preds = %lor.lhs.false.27
  %18 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx33 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %18, i64 1
  %19 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx33, align 8
  %20 = bitcast %struct.rtx_def* %19 to i32*
  %bf.load34 = load i32, i32* %20, align 8
  %bf.clear35 = and i32 %bf.load34, 65535
  %cmp36 = icmp ne i32 %bf.clear35, 114
  br i1 %cmp36, label %land.lhs.true.37, label %if.end.234

land.lhs.true.37:                                 ; preds = %land.lhs.true.32, %land.lhs.true.25
  %21 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx38 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %21, i64 0
  %22 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx38, align 8
  %23 = bitcast %struct.rtx_def* %22 to i32*
  %bf.load39 = load i32, i32* %23, align 8
  %bf.clear40 = and i32 %bf.load39, 65535
  %cmp41 = icmp eq i32 %bf.clear40, 61
  br i1 %cmp41, label %lor.lhs.false.42, label %if.then

lor.lhs.false.42:                                 ; preds = %land.lhs.true.37
  %24 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx43 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %24, i64 0
  %25 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx43, align 8
  %26 = bitcast %struct.rtx_def* %25 to i32*
  %bf.load44 = load i32, i32* %26, align 8
  %bf.clear45 = and i32 %bf.load44, 65535
  %cmp46 = icmp eq i32 %bf.clear45, 61
  br i1 %cmp46, label %land.lhs.true.47, label %lor.lhs.false.69

land.lhs.true.47:                                 ; preds = %lor.lhs.false.42
  %27 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx48 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %27, i64 0
  %28 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx48, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1
  %arrayidx49 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx49 to i32*
  %29 = load i32, i32* %rtuint, align 4
  %cmp50 = icmp uge i32 %29, 21
  br i1 %cmp50, label %land.lhs.true.51, label %lor.lhs.false.57

land.lhs.true.51:                                 ; preds = %land.lhs.true.47
  %30 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx52 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %30, i64 0
  %31 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx52, align 8
  %fld53 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1
  %arrayidx54 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld53, i32 0, i64 0
  %rtuint55 = bitcast %union.rtunion_def* %arrayidx54 to i32*
  %32 = load i32, i32* %rtuint55, align 4
  %cmp56 = icmp ule i32 %32, 28
  br i1 %cmp56, label %if.then, label %lor.lhs.false.57

lor.lhs.false.57:                                 ; preds = %land.lhs.true.51, %land.lhs.true.47
  %33 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx58 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %33, i64 0
  %34 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx58, align 8
  %fld59 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %34, i32 0, i32 1
  %arrayidx60 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld59, i32 0, i64 0
  %rtuint61 = bitcast %union.rtunion_def* %arrayidx60 to i32*
  %35 = load i32, i32* %rtuint61, align 4
  %cmp62 = icmp uge i32 %35, 45
  br i1 %cmp62, label %land.lhs.true.63, label %lor.lhs.false.69

land.lhs.true.63:                                 ; preds = %lor.lhs.false.57
  %36 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx64 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %36, i64 0
  %37 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx64, align 8
  %fld65 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %37, i32 0, i32 1
  %arrayidx66 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld65, i32 0, i64 0
  %rtuint67 = bitcast %union.rtunion_def* %arrayidx66 to i32*
  %38 = load i32, i32* %rtuint67, align 4
  %cmp68 = icmp ule i32 %38, 52
  br i1 %cmp68, label %if.then, label %lor.lhs.false.69

lor.lhs.false.69:                                 ; preds = %land.lhs.true.63, %lor.lhs.false.57, %lor.lhs.false.42
  %39 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx70 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %39, i64 0
  %40 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx70, align 8
  %fld71 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %40, i32 0, i32 1
  %arrayidx72 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld71, i32 0, i64 0
  %rtuint73 = bitcast %union.rtunion_def* %arrayidx72 to i32*
  %41 = load i32, i32* %rtuint73, align 4
  %cmp74 = icmp uge i32 %41, 53
  br i1 %cmp74, label %if.then, label %if.end.234

if.then:                                          ; preds = %lor.lhs.false.69, %land.lhs.true.63, %land.lhs.true.51, %land.lhs.true.37
  %42 = load %struct.rtx_def*, %struct.rtx_def** @ix86_compare_op0, align 8
  store %struct.rtx_def* %42, %struct.rtx_def** %op0, align 8
  %43 = load %struct.rtx_def*, %struct.rtx_def** @ix86_compare_op1, align 8
  store %struct.rtx_def* %43, %struct.rtx_def** %op1, align 8
  %44 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx77 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %44, i64 1
  %45 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx77, align 8
  %46 = bitcast %struct.rtx_def* %45 to i32*
  %bf.load78 = load i32, i32* %46, align 8
  %bf.clear79 = and i32 %bf.load78, 65535
  store i32 %bf.clear79, i32* %code, align 4
  %47 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx80 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %47, i64 2
  %48 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx80, align 8
  %49 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %call = call i32 @rtx_equal_p(%struct.rtx_def* %48, %struct.rtx_def* %49)
  %tobool81 = icmp ne i32 %call, 0
  br i1 %tobool81, label %if.then.82, label %if.end

if.then.82:                                       ; preds = %if.then
  %50 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  store %struct.rtx_def* %50, %struct.rtx_def** %tmp84, align 8
  %51 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  store %struct.rtx_def* %51, %struct.rtx_def** %op0, align 8
  %52 = load %struct.rtx_def*, %struct.rtx_def** %tmp84, align 8
  store %struct.rtx_def* %52, %struct.rtx_def** %op1, align 8
  %53 = load i32, i32* %code, align 4
  %call85 = call i32 @reverse_condition_maybe_unordered(i32 %53)
  store i32 %call85, i32* %code, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.82, %if.then
  %54 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx86 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %54, i64 2
  %55 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx86, align 8
  %56 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call87 = call i32 @rtx_equal_p(%struct.rtx_def* %55, %struct.rtx_def* %56)
  %tobool88 = icmp ne i32 %call87, 0
  br i1 %tobool88, label %land.lhs.true.89, label %if.end.159

land.lhs.true.89:                                 ; preds = %if.end
  %57 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx90 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %57, i64 3
  %58 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx90, align 8
  %59 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %call91 = call i32 @rtx_equal_p(%struct.rtx_def* %58, %struct.rtx_def* %59)
  %tobool92 = icmp ne i32 %call91, 0
  br i1 %tobool92, label %if.then.93, label %if.end.159

if.then.93:                                       ; preds = %land.lhs.true.89
  %60 = load i32, i32* %code, align 4
  %cmp94 = icmp eq i32 %60, 107
  br i1 %cmp94, label %if.then.95, label %if.end.125

if.then.95:                                       ; preds = %if.then.93
  %61 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx96 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %61, i64 0
  %62 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx96, align 8
  %63 = bitcast %struct.rtx_def* %62 to i32*
  %bf.load97 = load i32, i32* %63, align 8
  %bf.lshr98 = lshr i32 %bf.load97, 16
  %bf.clear99 = and i32 %bf.lshr98, 255
  %64 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx100 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %64, i64 0
  %65 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx100, align 8
  %call101 = call %struct.rtx_def* @force_reg(i32 %bf.clear99, %struct.rtx_def* %65)
  %66 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx102 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %66, i64 0
  store %struct.rtx_def* %call101, %struct.rtx_def** %arrayidx102, align 8
  %67 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call103 = call i32 @memory_operand(%struct.rtx_def* %67, i32 0)
  %tobool104 = icmp ne i32 %call103, 0
  br i1 %tobool104, label %if.then.105, label %if.end.111

if.then.105:                                      ; preds = %if.then.95
  %68 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx106 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %68, i64 0
  %69 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx106, align 8
  %70 = bitcast %struct.rtx_def* %69 to i32*
  %bf.load107 = load i32, i32* %70, align 8
  %bf.lshr108 = lshr i32 %bf.load107, 16
  %bf.clear109 = and i32 %bf.lshr108, 255
  %71 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call110 = call %struct.rtx_def* @force_reg(i32 %bf.clear109, %struct.rtx_def* %71)
  store %struct.rtx_def* %call110, %struct.rtx_def** %op0, align 8
  br label %if.end.111

if.end.111:                                       ; preds = %if.then.105, %if.then.95
  %72 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx112 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %72, i64 0
  %73 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx112, align 8
  %74 = bitcast %struct.rtx_def* %73 to i32*
  %bf.load113 = load i32, i32* %74, align 8
  %bf.lshr114 = lshr i32 %bf.load113, 16
  %bf.clear115 = and i32 %bf.lshr114, 255
  %cmp116 = icmp eq i32 %bf.clear115, 15
  br i1 %cmp116, label %if.then.117, label %if.else

if.then.117:                                      ; preds = %if.end.111
  %75 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx118 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %75, i64 0
  %76 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx118, align 8
  %77 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %78 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %call119 = call %struct.rtx_def* @gen_minsf3(%struct.rtx_def* %76, %struct.rtx_def* %77, %struct.rtx_def* %78)
  %call120 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call119)
  br label %if.end.124

if.else:                                          ; preds = %if.end.111
  %79 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx121 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %79, i64 0
  %80 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx121, align 8
  %81 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %82 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %call122 = call %struct.rtx_def* @gen_mindf3(%struct.rtx_def* %80, %struct.rtx_def* %81, %struct.rtx_def* %82)
  %call123 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call122)
  br label %if.end.124

if.end.124:                                       ; preds = %if.else, %if.then.117
  store i32 1, i32* %retval
  br label %return

if.end.125:                                       ; preds = %if.then.93
  %83 = load i32, i32* %code, align 4
  %cmp126 = icmp eq i32 %83, 105
  br i1 %cmp126, label %if.then.127, label %if.end.158

if.then.127:                                      ; preds = %if.end.125
  %84 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx128 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %84, i64 0
  %85 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx128, align 8
  %86 = bitcast %struct.rtx_def* %85 to i32*
  %bf.load129 = load i32, i32* %86, align 8
  %bf.lshr130 = lshr i32 %bf.load129, 16
  %bf.clear131 = and i32 %bf.lshr130, 255
  %87 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx132 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %87, i64 0
  %88 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx132, align 8
  %call133 = call %struct.rtx_def* @force_reg(i32 %bf.clear131, %struct.rtx_def* %88)
  %89 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx134 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %89, i64 0
  store %struct.rtx_def* %call133, %struct.rtx_def** %arrayidx134, align 8
  %90 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call135 = call i32 @memory_operand(%struct.rtx_def* %90, i32 0)
  %tobool136 = icmp ne i32 %call135, 0
  br i1 %tobool136, label %if.then.137, label %if.end.143

if.then.137:                                      ; preds = %if.then.127
  %91 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx138 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %91, i64 0
  %92 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx138, align 8
  %93 = bitcast %struct.rtx_def* %92 to i32*
  %bf.load139 = load i32, i32* %93, align 8
  %bf.lshr140 = lshr i32 %bf.load139, 16
  %bf.clear141 = and i32 %bf.lshr140, 255
  %94 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call142 = call %struct.rtx_def* @force_reg(i32 %bf.clear141, %struct.rtx_def* %94)
  store %struct.rtx_def* %call142, %struct.rtx_def** %op0, align 8
  br label %if.end.143

if.end.143:                                       ; preds = %if.then.137, %if.then.127
  %95 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx144 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %95, i64 0
  %96 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx144, align 8
  %97 = bitcast %struct.rtx_def* %96 to i32*
  %bf.load145 = load i32, i32* %97, align 8
  %bf.lshr146 = lshr i32 %bf.load145, 16
  %bf.clear147 = and i32 %bf.lshr146, 255
  %cmp148 = icmp eq i32 %bf.clear147, 15
  br i1 %cmp148, label %if.then.149, label %if.else.153

if.then.149:                                      ; preds = %if.end.143
  %98 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx150 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %98, i64 0
  %99 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx150, align 8
  %100 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %101 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %call151 = call %struct.rtx_def* @gen_maxsf3(%struct.rtx_def* %99, %struct.rtx_def* %100, %struct.rtx_def* %101)
  %call152 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call151)
  br label %if.end.157

if.else.153:                                      ; preds = %if.end.143
  %102 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx154 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %102, i64 0
  %103 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx154, align 8
  %104 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %105 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %call155 = call %struct.rtx_def* @gen_maxdf3(%struct.rtx_def* %103, %struct.rtx_def* %104, %struct.rtx_def* %105)
  %call156 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call155)
  br label %if.end.157

if.end.157:                                       ; preds = %if.else.153, %if.then.149
  store i32 1, i32* %retval
  br label %return

if.end.158:                                       ; preds = %if.end.125
  br label %if.end.159

if.end.159:                                       ; preds = %if.end.158, %land.lhs.true.89, %if.end
  %106 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx160 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %106, i64 1
  %107 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx160, align 8
  %call161 = call i32 @sse_comparison_operator(%struct.rtx_def* %107, i32 0)
  %tobool162 = icmp ne i32 %call161, 0
  br i1 %tobool162, label %lor.lhs.false.163, label %if.then.170

lor.lhs.false.163:                                ; preds = %if.end.159
  %108 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx164 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %108, i64 0
  %109 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx164, align 8
  %110 = load %struct.rtx_def*, %struct.rtx_def** @ix86_compare_op1, align 8
  %call165 = call i32 @rtx_equal_p(%struct.rtx_def* %109, %struct.rtx_def* %110)
  %tobool166 = icmp ne i32 %call165, 0
  br i1 %tobool166, label %land.lhs.true.167, label %if.end.179

land.lhs.true.167:                                ; preds = %lor.lhs.false.163
  %111 = load i32, i32* @target_flags, align 4
  %and168 = and i32 %111, 16
  %tobool169 = icmp ne i32 %and168, 0
  br i1 %tobool169, label %if.end.179, label %if.then.170

if.then.170:                                      ; preds = %land.lhs.true.167, %if.end.159
  %112 = load %struct.rtx_def*, %struct.rtx_def** @ix86_compare_op0, align 8
  store %struct.rtx_def* %112, %struct.rtx_def** %tmp172, align 8
  %113 = load %struct.rtx_def*, %struct.rtx_def** @ix86_compare_op1, align 8
  store %struct.rtx_def* %113, %struct.rtx_def** @ix86_compare_op0, align 8
  %114 = load %struct.rtx_def*, %struct.rtx_def** %tmp172, align 8
  store %struct.rtx_def* %114, %struct.rtx_def** @ix86_compare_op1, align 8
  %115 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx173 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %115, i64 1
  %116 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx173, align 8
  %117 = bitcast %struct.rtx_def* %116 to i32*
  %bf.load174 = load i32, i32* %117, align 8
  %bf.clear175 = and i32 %bf.load174, 65535
  %call176 = call i32 @swap_condition(i32 %bf.clear175)
  %118 = load %struct.rtx_def*, %struct.rtx_def** @ix86_compare_op0, align 8
  %119 = load %struct.rtx_def*, %struct.rtx_def** @ix86_compare_op1, align 8
  %call177 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 %call176, i32 0, %struct.rtx_def* %118, %struct.rtx_def* %119)
  %120 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx178 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %120, i64 1
  store %struct.rtx_def* %call177, %struct.rtx_def** %arrayidx178, align 8
  br label %if.end.179

if.end.179:                                       ; preds = %if.then.170, %land.lhs.true.167, %lor.lhs.false.163
  %121 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx180 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %121, i64 0
  %122 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx180, align 8
  %123 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx181 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %123, i64 3
  %124 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx181, align 8
  %call182 = call i32 @rtx_equal_p(%struct.rtx_def* %122, %struct.rtx_def* %124)
  %tobool183 = icmp ne i32 %call182, 0
  br i1 %tobool183, label %land.lhs.true.184, label %lor.lhs.false.192

land.lhs.true.184:                                ; preds = %if.end.179
  %125 = load i32, i32* @target_flags, align 4
  %and185 = and i32 %125, 16
  %tobool186 = icmp ne i32 %and185, 0
  br i1 %tobool186, label %lor.lhs.false.187, label %if.then.200

lor.lhs.false.187:                                ; preds = %land.lhs.true.184
  %126 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx188 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %126, i64 1
  %127 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx188, align 8
  %128 = bitcast %struct.rtx_def* %127 to i32*
  %bf.load189 = load i32, i32* %128, align 8
  %bf.clear190 = and i32 %bf.load189, 65535
  %cmp191 = icmp ne i32 %bf.clear190, 103
  br i1 %cmp191, label %if.then.200, label %lor.lhs.false.192

lor.lhs.false.192:                                ; preds = %lor.lhs.false.187, %if.end.179
  %129 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx193 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %129, i64 1
  %130 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx193, align 8
  %131 = bitcast %struct.rtx_def* %130 to i32*
  %bf.load194 = load i32, i32* %131, align 8
  %bf.clear195 = and i32 %bf.load194, 65535
  %cmp196 = icmp eq i32 %bf.clear195, 102
  br i1 %cmp196, label %land.lhs.true.197, label %if.end.213

land.lhs.true.197:                                ; preds = %lor.lhs.false.192
  %132 = load i32, i32* @target_flags, align 4
  %and198 = and i32 %132, 16
  %tobool199 = icmp ne i32 %and198, 0
  br i1 %tobool199, label %if.then.200, label %if.end.213

if.then.200:                                      ; preds = %land.lhs.true.197, %lor.lhs.false.187, %land.lhs.true.184
  %133 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx203 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %133, i64 2
  %134 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx203, align 8
  store %struct.rtx_def* %134, %struct.rtx_def** %tmp202, align 8
  %135 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx204 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %135, i64 3
  %136 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx204, align 8
  %137 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx205 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %137, i64 2
  store %struct.rtx_def* %136, %struct.rtx_def** %arrayidx205, align 8
  %138 = load %struct.rtx_def*, %struct.rtx_def** %tmp202, align 8
  %139 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx206 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %139, i64 3
  store %struct.rtx_def* %138, %struct.rtx_def** %arrayidx206, align 8
  %140 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx207 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %140, i64 1
  %141 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx207, align 8
  %142 = bitcast %struct.rtx_def* %141 to i32*
  %bf.load208 = load i32, i32* %142, align 8
  %bf.clear209 = and i32 %bf.load208, 65535
  %call210 = call i32 @reverse_condition_maybe_unordered(i32 %bf.clear209)
  %143 = load %struct.rtx_def*, %struct.rtx_def** @ix86_compare_op0, align 8
  %144 = load %struct.rtx_def*, %struct.rtx_def** @ix86_compare_op1, align 8
  %call211 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 %call210, i32 0, %struct.rtx_def* %143, %struct.rtx_def* %144)
  %145 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx212 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %145, i64 1
  store %struct.rtx_def* %call211, %struct.rtx_def** %arrayidx212, align 8
  br label %if.end.213

if.end.213:                                       ; preds = %if.then.200, %land.lhs.true.197, %lor.lhs.false.192
  %146 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx214 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %146, i64 0
  %147 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx214, align 8
  %148 = bitcast %struct.rtx_def* %147 to i32*
  %bf.load215 = load i32, i32* %148, align 8
  %bf.lshr216 = lshr i32 %bf.load215, 16
  %bf.clear217 = and i32 %bf.lshr216, 255
  %cmp218 = icmp eq i32 %bf.clear217, 15
  br i1 %cmp218, label %if.then.219, label %if.else.226

if.then.219:                                      ; preds = %if.end.213
  %149 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx220 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %149, i64 0
  %150 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx220, align 8
  %151 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx221 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %151, i64 1
  %152 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx221, align 8
  %153 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx222 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %153, i64 2
  %154 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx222, align 8
  %155 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx223 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %155, i64 3
  %156 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx223, align 8
  %157 = load %struct.rtx_def*, %struct.rtx_def** @ix86_compare_op0, align 8
  %158 = load %struct.rtx_def*, %struct.rtx_def** @ix86_compare_op1, align 8
  %call224 = call %struct.rtx_def* @gen_sse_movsfcc(%struct.rtx_def* %150, %struct.rtx_def* %152, %struct.rtx_def* %154, %struct.rtx_def* %156, %struct.rtx_def* %157, %struct.rtx_def* %158)
  %call225 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call224)
  br label %if.end.233

if.else.226:                                      ; preds = %if.end.213
  %159 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx227 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %159, i64 0
  %160 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx227, align 8
  %161 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx228 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %161, i64 1
  %162 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx228, align 8
  %163 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx229 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %163, i64 2
  %164 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx229, align 8
  %165 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx230 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %165, i64 3
  %166 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx230, align 8
  %167 = load %struct.rtx_def*, %struct.rtx_def** @ix86_compare_op0, align 8
  %168 = load %struct.rtx_def*, %struct.rtx_def** @ix86_compare_op1, align 8
  %call231 = call %struct.rtx_def* @gen_sse_movdfcc(%struct.rtx_def* %160, %struct.rtx_def* %162, %struct.rtx_def* %164, %struct.rtx_def* %166, %struct.rtx_def* %167, %struct.rtx_def* %168)
  %call232 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call231)
  br label %if.end.233

if.end.233:                                       ; preds = %if.else.226, %if.then.219
  store i32 1, i32* %retval
  br label %return

if.end.234:                                       ; preds = %lor.lhs.false.69, %land.lhs.true.32, %lor.lhs.false.27, %land.lhs.true.16, %land.lhs.true.10, %land.lhs.true.7, %lor.lhs.false
  %169 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx235 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %169, i64 1
  %170 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx235, align 8
  %171 = bitcast %struct.rtx_def* %170 to i32*
  %bf.load236 = load i32, i32* %171, align 8
  %bf.clear237 = and i32 %bf.load236, 65535
  store i32 %bf.clear237, i32* %code, align 4
  %172 = load i32, i32* %code, align 4
  %call238 = call %struct.rtx_def* @ix86_expand_compare(i32 %172, %struct.rtx_def** %second_test, %struct.rtx_def** %bypass_test)
  store %struct.rtx_def* %call238, %struct.rtx_def** %compare_op, align 8
  %173 = load %struct.rtx_def*, %struct.rtx_def** %compare_op, align 8
  %call239 = call i32 @fcmov_comparison_operator(%struct.rtx_def* %173, i32 0)
  %tobool240 = icmp ne i32 %call239, 0
  br i1 %tobool240, label %if.end.250, label %if.then.241

if.then.241:                                      ; preds = %if.end.234
  %174 = load %struct.rtx_def*, %struct.rtx_def** %second_test, align 8
  %cmp242 = icmp ne %struct.rtx_def* %174, null
  br i1 %cmp242, label %if.then.245, label %lor.lhs.false.243

lor.lhs.false.243:                                ; preds = %if.then.241
  %175 = load %struct.rtx_def*, %struct.rtx_def** %bypass_test, align 8
  %cmp244 = icmp ne %struct.rtx_def* %175, null
  br i1 %cmp244, label %if.then.245, label %if.end.246

if.then.245:                                      ; preds = %lor.lhs.false.243, %if.then.241
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 8532, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__FUNCTION__.ix86_expand_fp_movcc, i32 0, i32 0)) #7
  unreachable

if.end.246:                                       ; preds = %lor.lhs.false.243
  %call247 = call %struct.rtx_def* @gen_reg_rtx(i32 2)
  store %struct.rtx_def* %call247, %struct.rtx_def** %tmp, align 8
  %176 = load i32, i32* %code, align 4
  %177 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %call248 = call i32 @ix86_expand_setcc(i32 %176, %struct.rtx_def* %177)
  store i32 102, i32* %code, align 4
  %178 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  store %struct.rtx_def* %178, %struct.rtx_def** @ix86_compare_op0, align 8
  %179 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  store %struct.rtx_def* %179, %struct.rtx_def** @ix86_compare_op1, align 8
  %180 = load i32, i32* %code, align 4
  %call249 = call %struct.rtx_def* @ix86_expand_compare(i32 %180, %struct.rtx_def** %second_test, %struct.rtx_def** %bypass_test)
  store %struct.rtx_def* %call249, %struct.rtx_def** %compare_op, align 8
  br label %if.end.250

if.end.250:                                       ; preds = %if.end.246, %if.end.234
  %181 = load %struct.rtx_def*, %struct.rtx_def** %bypass_test, align 8
  %tobool251 = icmp ne %struct.rtx_def* %181, null
  br i1 %tobool251, label %land.lhs.true.252, label %if.end.266

land.lhs.true.252:                                ; preds = %if.end.250
  %182 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx253 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %182, i64 0
  %183 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx253, align 8
  %184 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx254 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %184, i64 3
  %185 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx254, align 8
  %call255 = call i32 @reg_overlap_mentioned_p(%struct.rtx_def* %183, %struct.rtx_def* %185)
  %tobool256 = icmp ne i32 %call255, 0
  br i1 %tobool256, label %if.then.257, label %if.end.266

if.then.257:                                      ; preds = %land.lhs.true.252
  %186 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx258 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %186, i64 0
  %187 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx258, align 8
  %188 = bitcast %struct.rtx_def* %187 to i32*
  %bf.load259 = load i32, i32* %188, align 8
  %bf.lshr260 = lshr i32 %bf.load259, 16
  %bf.clear261 = and i32 %bf.lshr260, 255
  %call262 = call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear261)
  store %struct.rtx_def* %call262, %struct.rtx_def** %tmp, align 8
  %189 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %190 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx263 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %190, i64 3
  %191 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx263, align 8
  %call264 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %189, %struct.rtx_def* %191)
  %192 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %193 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx265 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %193, i64 3
  store %struct.rtx_def* %192, %struct.rtx_def** %arrayidx265, align 8
  br label %if.end.266

if.end.266:                                       ; preds = %if.then.257, %land.lhs.true.252, %if.end.250
  %194 = load %struct.rtx_def*, %struct.rtx_def** %second_test, align 8
  %tobool267 = icmp ne %struct.rtx_def* %194, null
  br i1 %tobool267, label %land.lhs.true.268, label %if.end.282

land.lhs.true.268:                                ; preds = %if.end.266
  %195 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx269 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %195, i64 0
  %196 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx269, align 8
  %197 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx270 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %197, i64 2
  %198 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx270, align 8
  %call271 = call i32 @reg_overlap_mentioned_p(%struct.rtx_def* %196, %struct.rtx_def* %198)
  %tobool272 = icmp ne i32 %call271, 0
  br i1 %tobool272, label %if.then.273, label %if.end.282

if.then.273:                                      ; preds = %land.lhs.true.268
  %199 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx274 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %199, i64 0
  %200 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx274, align 8
  %201 = bitcast %struct.rtx_def* %200 to i32*
  %bf.load275 = load i32, i32* %201, align 8
  %bf.lshr276 = lshr i32 %bf.load275, 16
  %bf.clear277 = and i32 %bf.lshr276, 255
  %call278 = call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear277)
  store %struct.rtx_def* %call278, %struct.rtx_def** %tmp, align 8
  %202 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %203 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx279 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %203, i64 2
  %204 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx279, align 8
  %call280 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %202, %struct.rtx_def* %204)
  %205 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %206 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx281 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %206, i64 2
  store %struct.rtx_def* %205, %struct.rtx_def** %arrayidx281, align 8
  br label %if.end.282

if.end.282:                                       ; preds = %if.then.273, %land.lhs.true.268, %if.end.266
  %207 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx283 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %207, i64 0
  %208 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx283, align 8
  %209 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx284 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %209, i64 0
  %210 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx284, align 8
  %211 = bitcast %struct.rtx_def* %210 to i32*
  %bf.load285 = load i32, i32* %211, align 8
  %bf.lshr286 = lshr i32 %bf.load285, 16
  %bf.clear287 = and i32 %bf.lshr286, 255
  %212 = load %struct.rtx_def*, %struct.rtx_def** %compare_op, align 8
  %213 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx288 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %213, i64 2
  %214 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx288, align 8
  %215 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx289 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %215, i64 3
  %216 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx289, align 8
  %call290 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 72, i32 %bf.clear287, %struct.rtx_def* %212, %struct.rtx_def* %214, %struct.rtx_def* %216)
  %call291 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %208, %struct.rtx_def* %call290)
  %call292 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call291)
  %217 = load %struct.rtx_def*, %struct.rtx_def** %bypass_test, align 8
  %tobool293 = icmp ne %struct.rtx_def* %217, null
  br i1 %tobool293, label %if.then.294, label %if.end.305

if.then.294:                                      ; preds = %if.end.282
  %218 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx295 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %218, i64 0
  %219 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx295, align 8
  %220 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx296 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %220, i64 0
  %221 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx296, align 8
  %222 = bitcast %struct.rtx_def* %221 to i32*
  %bf.load297 = load i32, i32* %222, align 8
  %bf.lshr298 = lshr i32 %bf.load297, 16
  %bf.clear299 = and i32 %bf.lshr298, 255
  %223 = load %struct.rtx_def*, %struct.rtx_def** %bypass_test, align 8
  %224 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx300 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %224, i64 3
  %225 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx300, align 8
  %226 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx301 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %226, i64 0
  %227 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx301, align 8
  %call302 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 72, i32 %bf.clear299, %struct.rtx_def* %223, %struct.rtx_def* %225, %struct.rtx_def* %227)
  %call303 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %219, %struct.rtx_def* %call302)
  %call304 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call303)
  br label %if.end.305

if.end.305:                                       ; preds = %if.then.294, %if.end.282
  %228 = load %struct.rtx_def*, %struct.rtx_def** %second_test, align 8
  %tobool306 = icmp ne %struct.rtx_def* %228, null
  br i1 %tobool306, label %if.then.307, label %if.end.318

if.then.307:                                      ; preds = %if.end.305
  %229 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx308 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %229, i64 0
  %230 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx308, align 8
  %231 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx309 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %231, i64 0
  %232 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx309, align 8
  %233 = bitcast %struct.rtx_def* %232 to i32*
  %bf.load310 = load i32, i32* %233, align 8
  %bf.lshr311 = lshr i32 %bf.load310, 16
  %bf.clear312 = and i32 %bf.lshr311, 255
  %234 = load %struct.rtx_def*, %struct.rtx_def** %second_test, align 8
  %235 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx313 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %235, i64 2
  %236 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx313, align 8
  %237 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx314 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %237, i64 0
  %238 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx314, align 8
  %call315 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 72, i32 %bf.clear312, %struct.rtx_def* %234, %struct.rtx_def* %236, %struct.rtx_def* %238)
  %call316 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %230, %struct.rtx_def* %call315)
  %call317 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call316)
  br label %if.end.318

if.end.318:                                       ; preds = %if.then.307, %if.end.305
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.318, %if.end.233, %if.end.157, %if.end.124
  %239 = load i32, i32* %retval
  ret i32 %239
}

declare %struct.rtx_def* @gen_minsf3(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #0

declare %struct.rtx_def* @gen_mindf3(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #0

declare %struct.rtx_def* @gen_maxsf3(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #0

declare %struct.rtx_def* @gen_maxdf3(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #0

declare %struct.rtx_def* @gen_sse_movsfcc(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #0

declare %struct.rtx_def* @gen_sse_movdfcc(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #0

; Function Attrs: nounwind uwtable
define void @ix86_split_long_move(%struct.rtx_def** %operands) #1 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %part = alloca [2 x [3 x %struct.rtx_def*]], align 16
  %nparts = alloca i32, align 4
  %push = alloca i32, align 4
  %collisions = alloca i32, align 4
  %mode = alloca i32, align 4
  %tmp = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store i32 0, i32* %push, align 4
  store i32 0, i32* %collisions, align 4
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load = load i32, i32* %2, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  store i32 %bf.clear, i32* %mode, align 4
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 0
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  %5 = bitcast %struct.rtx_def* %4 to i32*
  %bf.load2 = load i32, i32* %5, align 8
  %bf.lshr3 = lshr i32 %bf.load2, 16
  %bf.clear4 = and i32 %bf.lshr3, 255
  %idxprom = sext i32 %bf.clear4 to i64
  %arrayidx5 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom
  %6 = load i8, i8* %arrayidx5, align 1
  %conv = zext i8 %6 to i32
  %cmp = icmp eq i32 %conv, 8
  br i1 %cmp, label %land.lhs.true, label %if.end.56

land.lhs.true:                                    ; preds = %entry
  %7 = load i32, i32* @target_flags, align 4
  %and = and i32 %7, 33554432
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end.56

if.then:                                          ; preds = %land.lhs.true
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx7 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %8, i64 1
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx7, align 8
  %10 = bitcast %struct.rtx_def* %9 to i32*
  %bf.load8 = load i32, i32* %10, align 8
  %bf.clear9 = and i32 %bf.load8, 65535
  %cmp10 = icmp eq i32 %bf.clear9, 66
  br i1 %cmp10, label %land.lhs.true.12, label %if.end

land.lhs.true.12:                                 ; preds = %if.then
  %11 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx13 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %11, i64 1
  %12 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx13, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1
  %arrayidx14 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx14 to %struct.rtx_def**
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %14 = bitcast %struct.rtx_def* %13 to i32*
  %bf.load15 = load i32, i32* %14, align 8
  %bf.clear16 = and i32 %bf.load15, 65535
  %cmp17 = icmp eq i32 %bf.clear16, 68
  br i1 %cmp17, label %land.lhs.true.19, label %if.end

land.lhs.true.19:                                 ; preds = %land.lhs.true.12
  %15 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx20 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %15, i64 1
  %16 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx20, align 8
  %fld21 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1
  %arrayidx22 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld21, i32 0, i64 0
  %rtx23 = bitcast %union.rtunion_def* %arrayidx22 to %struct.rtx_def**
  %17 = load %struct.rtx_def*, %struct.rtx_def** %rtx23, align 8
  %18 = bitcast %struct.rtx_def* %17 to i32*
  %bf.load24 = load i32, i32* %18, align 8
  %bf.lshr25 = lshr i32 %bf.load24, 26
  %bf.clear26 = and i32 %bf.lshr25, 1
  %tobool27 = icmp ne i32 %bf.clear26, 0
  br i1 %tobool27, label %if.then.28, label %if.end

if.then.28:                                       ; preds = %land.lhs.true.19
  %19 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx29 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %19, i64 1
  %20 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx29, align 8
  %fld30 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1
  %arrayidx31 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld30, i32 0, i64 0
  %rtx32 = bitcast %union.rtunion_def* %arrayidx31 to %struct.rtx_def**
  %21 = load %struct.rtx_def*, %struct.rtx_def** %rtx32, align 8
  %call = call %struct.rtx_def* @get_pool_constant(%struct.rtx_def* %21)
  %22 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx33 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %22, i64 1
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx33, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.28, %land.lhs.true.19, %land.lhs.true.12, %if.then
  %23 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx34 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %23, i64 0
  %24 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx34, align 8
  %call35 = call i32 @push_operand(%struct.rtx_def* %24, i32 0)
  %tobool36 = icmp ne i32 %call35, 0
  br i1 %tobool36, label %if.then.37, label %if.else

if.then.37:                                       ; preds = %if.end
  %25 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx38 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %25, i64 0
  %26 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx38, align 8
  %call39 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %26)
  %27 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx40 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %27, i64 0
  store %struct.rtx_def* %call39, %struct.rtx_def** %arrayidx40, align 8
  %28 = load i32, i32* @target_flags, align 4
  %and41 = and i32 %28, 33554432
  %tobool42 = icmp ne i32 %and41, 0
  %cond = select i1 %tobool42, i32 5, i32 4
  %29 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx43 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %29, i64 0
  %30 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx43, align 8
  %31 = bitcast %struct.rtx_def* %30 to i32*
  %bf.load44 = load i32, i32* %31, align 8
  %bf.value = and i32 %cond, 255
  %bf.shl = shl i32 %bf.value, 16
  %bf.clear45 = and i32 %bf.load44, -16711681
  %bf.set = or i32 %bf.clear45, %bf.shl
  store i32 %bf.set, i32* %31, align 8
  br label %if.end.49

if.else:                                          ; preds = %if.end
  %32 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx46 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %32, i64 0
  %33 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx46, align 8
  %call47 = call %struct.rtx_def* @gen_lowpart(i32 5, %struct.rtx_def* %33)
  %34 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx48 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %34, i64 0
  store %struct.rtx_def* %call47, %struct.rtx_def** %arrayidx48, align 8
  br label %if.end.49

if.end.49:                                        ; preds = %if.else, %if.then.37
  %35 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx50 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %35, i64 1
  %36 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx50, align 8
  %call51 = call %struct.rtx_def* @gen_lowpart(i32 5, %struct.rtx_def* %36)
  %37 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx52 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %37, i64 1
  store %struct.rtx_def* %call51, %struct.rtx_def** %arrayidx52, align 8
  %38 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx53 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %38, i64 0
  %39 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx53, align 8
  %40 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx54 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %40, i64 1
  %41 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx54, align 8
  %call55 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %39, %struct.rtx_def* %41)
  br label %return

if.end.56:                                        ; preds = %land.lhs.true, %entry
  %42 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx57 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %42, i64 0
  %43 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx57, align 8
  %call58 = call i32 @push_operand(%struct.rtx_def* %43, i32 0)
  %tobool59 = icmp ne i32 %call58, 0
  br i1 %tobool59, label %if.then.60, label %if.else.61

if.then.60:                                       ; preds = %if.end.56
  store i32 1, i32* %push, align 4
  br label %if.end.73

if.else.61:                                       ; preds = %if.end.56
  %44 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx62 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %44, i64 0
  %45 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx62, align 8
  %46 = bitcast %struct.rtx_def* %45 to i32*
  %bf.load63 = load i32, i32* %46, align 8
  %bf.clear64 = and i32 %bf.load63, 65535
  %cmp65 = icmp eq i32 %bf.clear64, 66
  br i1 %cmp65, label %land.lhs.true.67, label %if.end.72

land.lhs.true.67:                                 ; preds = %if.else.61
  %47 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx68 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %47, i64 0
  %48 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx68, align 8
  %call69 = call i32 @offsettable_memref_p(%struct.rtx_def* %48)
  %tobool70 = icmp ne i32 %call69, 0
  br i1 %tobool70, label %if.end.72, label %if.then.71

if.then.71:                                       ; preds = %land.lhs.true.67
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 8753, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__FUNCTION__.ix86_split_long_move, i32 0, i32 0)) #7
  unreachable

if.end.72:                                        ; preds = %land.lhs.true.67, %if.else.61
  br label %if.end.73

if.end.73:                                        ; preds = %if.end.72, %if.then.60
  %49 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx74 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %49, i64 1
  %50 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx74, align 8
  %arrayidx75 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 1
  %arraydecay = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx75, i32 0, i32 0
  %51 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx76 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %51, i64 0
  %52 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx76, align 8
  %53 = bitcast %struct.rtx_def* %52 to i32*
  %bf.load77 = load i32, i32* %53, align 8
  %bf.lshr78 = lshr i32 %bf.load77, 16
  %bf.clear79 = and i32 %bf.lshr78, 255
  %call80 = call i32 @ix86_split_to_parts(%struct.rtx_def* %50, %struct.rtx_def** %arraydecay, i32 %bf.clear79)
  store i32 %call80, i32* %nparts, align 4
  %54 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx81 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %54, i64 0
  %55 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx81, align 8
  %arrayidx82 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 0
  %arraydecay83 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx82, i32 0, i32 0
  %56 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx84 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %56, i64 0
  %57 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx84, align 8
  %58 = bitcast %struct.rtx_def* %57 to i32*
  %bf.load85 = load i32, i32* %58, align 8
  %bf.lshr86 = lshr i32 %bf.load85, 16
  %bf.clear87 = and i32 %bf.lshr86, 255
  %call88 = call i32 @ix86_split_to_parts(%struct.rtx_def* %55, %struct.rtx_def** %arraydecay83, i32 %bf.clear87)
  %59 = load i32, i32* %push, align 4
  %tobool89 = icmp ne i32 %59, 0
  br i1 %tobool89, label %land.lhs.true.90, label %if.end.135

land.lhs.true.90:                                 ; preds = %if.end.73
  %60 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx91 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %60, i64 1
  %61 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx91, align 8
  %62 = bitcast %struct.rtx_def* %61 to i32*
  %bf.load92 = load i32, i32* %62, align 8
  %bf.clear93 = and i32 %bf.load92, 65535
  %cmp94 = icmp eq i32 %bf.clear93, 66
  br i1 %cmp94, label %land.lhs.true.96, label %if.end.135

land.lhs.true.96:                                 ; preds = %land.lhs.true.90
  %63 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %64 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx97 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %64, i64 1
  %65 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx97, align 8
  %call98 = call i32 @reg_overlap_mentioned_p(%struct.rtx_def* %63, %struct.rtx_def* %65)
  %tobool99 = icmp ne i32 %call98, 0
  br i1 %tobool99, label %if.then.100, label %if.end.135

if.then.100:                                      ; preds = %land.lhs.true.96
  %66 = load i32, i32* %nparts, align 4
  %cmp101 = icmp eq i32 %66, 3
  br i1 %cmp101, label %if.then.103, label %if.end.119

if.then.103:                                      ; preds = %if.then.100
  %arrayidx104 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 1
  %arrayidx105 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx104, i32 0, i64 1
  %67 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx105, align 8
  %arrayidx106 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 1
  %arrayidx107 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx106, i32 0, i64 1
  %68 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx107, align 8
  %69 = bitcast %struct.rtx_def* %68 to i32*
  %bf.load108 = load i32, i32* %69, align 8
  %bf.lshr109 = lshr i32 %bf.load108, 16
  %bf.clear110 = and i32 %bf.lshr109, 255
  %arrayidx111 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 1
  %arrayidx112 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx111, i32 0, i64 2
  %70 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx112, align 8
  %fld113 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %70, i32 0, i32 1
  %arrayidx114 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld113, i32 0, i64 0
  %rtx115 = bitcast %union.rtunion_def* %arrayidx114 to %struct.rtx_def**
  %71 = load %struct.rtx_def*, %struct.rtx_def** %rtx115, align 8
  %call116 = call %struct.rtx_def* @change_address(%struct.rtx_def* %67, i32 %bf.clear110, %struct.rtx_def* %71)
  %arrayidx117 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 1
  %arrayidx118 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx117, i32 0, i64 1
  store %struct.rtx_def* %call116, %struct.rtx_def** %arrayidx118, align 8
  br label %if.end.119

if.end.119:                                       ; preds = %if.then.103, %if.then.100
  %arrayidx120 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 1
  %arrayidx121 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx120, i32 0, i64 0
  %72 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx121, align 8
  %arrayidx122 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 1
  %arrayidx123 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx122, i32 0, i64 0
  %73 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx123, align 8
  %74 = bitcast %struct.rtx_def* %73 to i32*
  %bf.load124 = load i32, i32* %74, align 8
  %bf.lshr125 = lshr i32 %bf.load124, 16
  %bf.clear126 = and i32 %bf.lshr125, 255
  %arrayidx127 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 1
  %arrayidx128 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx127, i32 0, i64 1
  %75 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx128, align 8
  %fld129 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %75, i32 0, i32 1
  %arrayidx130 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld129, i32 0, i64 0
  %rtx131 = bitcast %union.rtunion_def* %arrayidx130 to %struct.rtx_def**
  %76 = load %struct.rtx_def*, %struct.rtx_def** %rtx131, align 8
  %call132 = call %struct.rtx_def* @change_address(%struct.rtx_def* %72, i32 %bf.clear126, %struct.rtx_def* %76)
  %arrayidx133 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 1
  %arrayidx134 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx133, i32 0, i64 0
  store %struct.rtx_def* %call132, %struct.rtx_def** %arrayidx134, align 8
  br label %if.end.135

if.end.135:                                       ; preds = %if.end.119, %land.lhs.true.96, %land.lhs.true.90, %if.end.73
  %arrayidx136 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 0
  %arrayidx137 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx136, i32 0, i64 0
  %77 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx137, align 8
  %78 = bitcast %struct.rtx_def* %77 to i32*
  %bf.load138 = load i32, i32* %78, align 8
  %bf.clear139 = and i32 %bf.load138, 65535
  %cmp140 = icmp eq i32 %bf.clear139, 61
  br i1 %cmp140, label %land.lhs.true.142, label %if.end.266

land.lhs.true.142:                                ; preds = %if.end.135
  %arrayidx143 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 1
  %arrayidx144 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx143, i32 0, i64 0
  %79 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx144, align 8
  %80 = bitcast %struct.rtx_def* %79 to i32*
  %bf.load145 = load i32, i32* %80, align 8
  %bf.clear146 = and i32 %bf.load145, 65535
  %cmp147 = icmp eq i32 %bf.clear146, 66
  br i1 %cmp147, label %if.then.149, label %if.end.266

if.then.149:                                      ; preds = %land.lhs.true.142
  %arrayidx150 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 0
  %arrayidx151 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx150, i32 0, i64 0
  %81 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx151, align 8
  %arrayidx152 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 1
  %arrayidx153 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx152, i32 0, i64 0
  %82 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx153, align 8
  %fld154 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %82, i32 0, i32 1
  %arrayidx155 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld154, i32 0, i64 0
  %rtx156 = bitcast %union.rtunion_def* %arrayidx155 to %struct.rtx_def**
  %83 = load %struct.rtx_def*, %struct.rtx_def** %rtx156, align 8
  %call157 = call i32 @reg_overlap_mentioned_p(%struct.rtx_def* %81, %struct.rtx_def* %83)
  %tobool158 = icmp ne i32 %call157, 0
  br i1 %tobool158, label %if.then.159, label %if.end.160

if.then.159:                                      ; preds = %if.then.149
  %84 = load i32, i32* %collisions, align 4
  %inc = add nsw i32 %84, 1
  store i32 %inc, i32* %collisions, align 4
  br label %if.end.160

if.end.160:                                       ; preds = %if.then.159, %if.then.149
  %arrayidx161 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 0
  %arrayidx162 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx161, i32 0, i64 1
  %85 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx162, align 8
  %arrayidx163 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 1
  %arrayidx164 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx163, i32 0, i64 0
  %86 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx164, align 8
  %fld165 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %86, i32 0, i32 1
  %arrayidx166 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld165, i32 0, i64 0
  %rtx167 = bitcast %union.rtunion_def* %arrayidx166 to %struct.rtx_def**
  %87 = load %struct.rtx_def*, %struct.rtx_def** %rtx167, align 8
  %call168 = call i32 @reg_overlap_mentioned_p(%struct.rtx_def* %85, %struct.rtx_def* %87)
  %tobool169 = icmp ne i32 %call168, 0
  br i1 %tobool169, label %if.then.170, label %if.end.172

if.then.170:                                      ; preds = %if.end.160
  %88 = load i32, i32* %collisions, align 4
  %inc171 = add nsw i32 %88, 1
  store i32 %inc171, i32* %collisions, align 4
  br label %if.end.172

if.end.172:                                       ; preds = %if.then.170, %if.end.160
  %89 = load i32, i32* %nparts, align 4
  %cmp173 = icmp eq i32 %89, 3
  br i1 %cmp173, label %land.lhs.true.175, label %if.end.187

land.lhs.true.175:                                ; preds = %if.end.172
  %arrayidx176 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 0
  %arrayidx177 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx176, i32 0, i64 2
  %90 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx177, align 8
  %arrayidx178 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 1
  %arrayidx179 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx178, i32 0, i64 0
  %91 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx179, align 8
  %fld180 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %91, i32 0, i32 1
  %arrayidx181 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld180, i32 0, i64 0
  %rtx182 = bitcast %union.rtunion_def* %arrayidx181 to %struct.rtx_def**
  %92 = load %struct.rtx_def*, %struct.rtx_def** %rtx182, align 8
  %call183 = call i32 @reg_overlap_mentioned_p(%struct.rtx_def* %90, %struct.rtx_def* %92)
  %tobool184 = icmp ne i32 %call183, 0
  br i1 %tobool184, label %if.then.185, label %if.end.187

if.then.185:                                      ; preds = %land.lhs.true.175
  %93 = load i32, i32* %collisions, align 4
  %inc186 = add nsw i32 %93, 1
  store i32 %inc186, i32* %collisions, align 4
  br label %if.end.187

if.end.187:                                       ; preds = %if.then.185, %land.lhs.true.175, %if.end.172
  %94 = load i32, i32* %collisions, align 4
  %cmp188 = icmp eq i32 %94, 1
  br i1 %cmp188, label %land.lhs.true.190, label %if.else.220

land.lhs.true.190:                                ; preds = %if.end.187
  %95 = load i32, i32* %nparts, align 4
  %cmp191 = icmp eq i32 %95, 3
  br i1 %cmp191, label %land.lhs.true.193, label %if.else.220

land.lhs.true.193:                                ; preds = %land.lhs.true.190
  %arrayidx194 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 0
  %arrayidx195 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx194, i32 0, i64 1
  %96 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx195, align 8
  %arrayidx196 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 1
  %arrayidx197 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx196, i32 0, i64 0
  %97 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx197, align 8
  %fld198 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %97, i32 0, i32 1
  %arrayidx199 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld198, i32 0, i64 0
  %rtx200 = bitcast %union.rtunion_def* %arrayidx199 to %struct.rtx_def**
  %98 = load %struct.rtx_def*, %struct.rtx_def** %rtx200, align 8
  %call201 = call i32 @reg_overlap_mentioned_p(%struct.rtx_def* %96, %struct.rtx_def* %98)
  %tobool202 = icmp ne i32 %call201, 0
  br i1 %tobool202, label %if.then.203, label %if.else.220

if.then.203:                                      ; preds = %land.lhs.true.193
  %arrayidx204 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 0
  %arrayidx205 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx204, i32 0, i64 1
  %99 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx205, align 8
  store %struct.rtx_def* %99, %struct.rtx_def** %tmp, align 8
  %arrayidx206 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 0
  %arrayidx207 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx206, i32 0, i64 2
  %100 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx207, align 8
  %arrayidx208 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 0
  %arrayidx209 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx208, i32 0, i64 1
  store %struct.rtx_def* %100, %struct.rtx_def** %arrayidx209, align 8
  %101 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %arrayidx210 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 0
  %arrayidx211 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx210, i32 0, i64 2
  store %struct.rtx_def* %101, %struct.rtx_def** %arrayidx211, align 8
  %arrayidx212 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 1
  %arrayidx213 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx212, i32 0, i64 1
  %102 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx213, align 8
  store %struct.rtx_def* %102, %struct.rtx_def** %tmp, align 8
  %arrayidx214 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 1
  %arrayidx215 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx214, i32 0, i64 2
  %103 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx215, align 8
  %arrayidx216 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 1
  %arrayidx217 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx216, i32 0, i64 1
  store %struct.rtx_def* %103, %struct.rtx_def** %arrayidx217, align 8
  %104 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %arrayidx218 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 1
  %arrayidx219 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx218, i32 0, i64 2
  store %struct.rtx_def* %104, %struct.rtx_def** %arrayidx219, align 8
  br label %if.end.265

if.else.220:                                      ; preds = %land.lhs.true.193, %land.lhs.true.190, %if.end.187
  %105 = load i32, i32* %collisions, align 4
  %cmp221 = icmp sgt i32 %105, 1
  br i1 %cmp221, label %if.then.223, label %if.end.264

if.then.223:                                      ; preds = %if.else.220
  store i32 1, i32* %collisions, align 4
  %106 = load i32, i32* %nparts, align 4
  %sub = sub nsw i32 %106, 1
  %idxprom224 = sext i32 %sub to i64
  %arrayidx225 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 0
  %arrayidx226 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx225, i32 0, i64 %idxprom224
  %107 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx226, align 8
  %arrayidx227 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 1
  %arrayidx228 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx227, i32 0, i64 0
  %108 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx228, align 8
  %fld229 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %108, i32 0, i32 1
  %arrayidx230 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld229, i32 0, i64 0
  %rtx231 = bitcast %union.rtunion_def* %arrayidx230 to %struct.rtx_def**
  %109 = load %struct.rtx_def*, %struct.rtx_def** %rtx231, align 8
  %call232 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %107, %struct.rtx_def* %109)
  %call233 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call232)
  %arrayidx234 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 1
  %arrayidx235 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx234, i32 0, i64 0
  %110 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx235, align 8
  %111 = load i32, i32* @target_flags, align 4
  %and236 = and i32 %111, 33554432
  %tobool237 = icmp ne i32 %and236, 0
  %cond238 = select i1 %tobool237, i32 5, i32 4
  %112 = load i32, i32* %nparts, align 4
  %sub239 = sub nsw i32 %112, 1
  %idxprom240 = sext i32 %sub239 to i64
  %arrayidx241 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 0
  %arrayidx242 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx241, i32 0, i64 %idxprom240
  %113 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx242, align 8
  %call243 = call %struct.rtx_def* @change_address(%struct.rtx_def* %110, i32 %cond238, %struct.rtx_def* %113)
  %arrayidx244 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 1
  %arrayidx245 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx244, i32 0, i64 0
  store %struct.rtx_def* %call243, %struct.rtx_def** %arrayidx245, align 8
  %arrayidx246 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 1
  %arrayidx247 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx246, i32 0, i64 0
  %114 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx247, align 8
  %115 = load i32, i32* @target_flags, align 4
  %and248 = and i32 %115, 33554432
  %tobool249 = icmp ne i32 %and248, 0
  %cond250 = select i1 %tobool249, i32 8, i32 4
  %conv251 = sext i32 %cond250 to i64
  %call252 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %114, i32 0, i64 %conv251, i32 1, i32 1)
  %arrayidx253 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 1
  %arrayidx254 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx253, i32 0, i64 1
  store %struct.rtx_def* %call252, %struct.rtx_def** %arrayidx254, align 8
  %116 = load i32, i32* %nparts, align 4
  %cmp255 = icmp eq i32 %116, 3
  br i1 %cmp255, label %if.then.257, label %if.end.263

if.then.257:                                      ; preds = %if.then.223
  %arrayidx258 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 1
  %arrayidx259 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx258, i32 0, i64 0
  %117 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx259, align 8
  %call260 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %117, i32 0, i64 8, i32 1, i32 1)
  %arrayidx261 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 1
  %arrayidx262 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx261, i32 0, i64 2
  store %struct.rtx_def* %call260, %struct.rtx_def** %arrayidx262, align 8
  br label %if.end.263

if.end.263:                                       ; preds = %if.then.257, %if.then.223
  br label %if.end.264

if.end.264:                                       ; preds = %if.end.263, %if.else.220
  br label %if.end.265

if.end.265:                                       ; preds = %if.end.264, %if.then.203
  br label %if.end.266

if.end.266:                                       ; preds = %if.end.265, %land.lhs.true.142, %if.end.135
  %118 = load i32, i32* %push, align 4
  %tobool267 = icmp ne i32 %118, 0
  br i1 %tobool267, label %if.then.268, label %if.end.355

if.then.268:                                      ; preds = %if.end.266
  %119 = load i32, i32* @target_flags, align 4
  %and269 = and i32 %119, 33554432
  %tobool270 = icmp ne i32 %and269, 0
  br i1 %tobool270, label %if.else.291, label %if.then.271

if.then.271:                                      ; preds = %if.then.268
  %120 = load i32, i32* %nparts, align 4
  %cmp272 = icmp eq i32 %120, 3
  br i1 %cmp272, label %if.then.274, label %if.end.290

if.then.274:                                      ; preds = %if.then.271
  %121 = load i32, i32* %mode, align 4
  %cmp275 = icmp eq i32 %121, 18
  br i1 %cmp275, label %land.lhs.true.277, label %if.end.284

land.lhs.true.277:                                ; preds = %if.then.274
  %122 = load i32, i32* @target_flags, align 4
  %and278 = and i32 %122, 33554432
  %tobool279 = icmp ne i32 %and278, 0
  br i1 %tobool279, label %if.end.284, label %if.then.280

if.then.280:                                      ; preds = %land.lhs.true.277
  %123 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %124 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %call281 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 -4)
  %call282 = call %struct.rtx_def* @gen_addsi3(%struct.rtx_def* %123, %struct.rtx_def* %124, %struct.rtx_def* %call281)
  %call283 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call282)
  br label %if.end.284

if.end.284:                                       ; preds = %if.then.280, %land.lhs.true.277, %if.then.274
  %arrayidx285 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 0
  %arrayidx286 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx285, i32 0, i64 2
  %125 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx286, align 8
  %arrayidx287 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 1
  %arrayidx288 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx287, i32 0, i64 2
  %126 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx288, align 8
  %call289 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %125, %struct.rtx_def* %126)
  br label %if.end.290

if.end.290:                                       ; preds = %if.end.284, %if.then.271
  br label %if.end.344

if.else.291:                                      ; preds = %if.then.268
  %arrayidx292 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 1
  %arrayidx293 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx292, i32 0, i64 1
  %127 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx293, align 8
  %128 = bitcast %struct.rtx_def* %127 to i32*
  %bf.load294 = load i32, i32* %128, align 8
  %bf.lshr295 = lshr i32 %bf.load294, 16
  %bf.clear296 = and i32 %bf.lshr295, 255
  %cmp297 = icmp eq i32 %bf.clear296, 4
  br i1 %cmp297, label %if.then.299, label %if.end.343

if.then.299:                                      ; preds = %if.else.291
  %arrayidx300 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 1
  %arrayidx301 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx300, i32 0, i64 1
  %129 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx301, align 8
  %130 = bitcast %struct.rtx_def* %129 to i32*
  %bf.load302 = load i32, i32* %130, align 8
  %bf.clear303 = and i32 %bf.load302, 65535
  %cmp304 = icmp eq i32 %bf.clear303, 66
  br i1 %cmp304, label %if.then.306, label %if.else.312

if.then.306:                                      ; preds = %if.then.299
  %arrayidx307 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 1
  %arrayidx308 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx307, i32 0, i64 1
  %131 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx308, align 8
  %call309 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %131, i32 5, i64 0, i32 1, i32 1)
  %arrayidx310 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 1
  %arrayidx311 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx310, i32 0, i64 1
  store %struct.rtx_def* %call309, %struct.rtx_def** %arrayidx311, align 8
  br label %if.end.329

if.else.312:                                      ; preds = %if.then.299
  %arrayidx313 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 1
  %arrayidx314 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx313, i32 0, i64 1
  %132 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx314, align 8
  %133 = bitcast %struct.rtx_def* %132 to i32*
  %bf.load315 = load i32, i32* %133, align 8
  %bf.clear316 = and i32 %bf.load315, 65535
  %cmp317 = icmp eq i32 %bf.clear316, 61
  br i1 %cmp317, label %if.then.319, label %if.else.327

if.then.319:                                      ; preds = %if.else.312
  %arrayidx320 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 1
  %arrayidx321 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx320, i32 0, i64 1
  %134 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx321, align 8
  %fld322 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %134, i32 0, i32 1
  %arrayidx323 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld322, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx323 to i32*
  %135 = load i32, i32* %rtuint, align 4
  %call324 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 %135)
  %arrayidx325 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 1
  %arrayidx326 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx325, i32 0, i64 1
  store %struct.rtx_def* %call324, %struct.rtx_def** %arrayidx326, align 8
  br label %if.end.328

if.else.327:                                      ; preds = %if.else.312
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 8834, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__FUNCTION__.ix86_split_long_move, i32 0, i32 0)) #7
  unreachable

if.end.328:                                       ; preds = %if.then.319
  br label %if.end.329

if.end.329:                                       ; preds = %if.end.328, %if.then.306
  %arrayidx330 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 1
  %arrayidx331 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx330, i32 0, i64 0
  %136 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx331, align 8
  %137 = bitcast %struct.rtx_def* %136 to i32*
  %bf.load332 = load i32, i32* %137, align 8
  %bf.lshr333 = lshr i32 %bf.load332, 16
  %bf.clear334 = and i32 %bf.lshr333, 255
  %cmp335 = icmp eq i32 %bf.clear334, 4
  br i1 %cmp335, label %if.then.337, label %if.end.342

if.then.337:                                      ; preds = %if.end.329
  %arrayidx338 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 1
  %arrayidx339 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx338, i32 0, i64 1
  %138 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx339, align 8
  %arrayidx340 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 1
  %arrayidx341 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx340, i32 0, i64 0
  store %struct.rtx_def* %138, %struct.rtx_def** %arrayidx341, align 8
  br label %if.end.342

if.end.342:                                       ; preds = %if.then.337, %if.end.329
  br label %if.end.343

if.end.343:                                       ; preds = %if.end.342, %if.else.291
  br label %if.end.344

if.end.344:                                       ; preds = %if.end.343, %if.end.290
  %arrayidx345 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 0
  %arrayidx346 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx345, i32 0, i64 1
  %139 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx346, align 8
  %arrayidx347 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 1
  %arrayidx348 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx347, i32 0, i64 1
  %140 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx348, align 8
  %call349 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %139, %struct.rtx_def* %140)
  %arrayidx350 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 0
  %arrayidx351 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx350, i32 0, i64 0
  %141 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx351, align 8
  %arrayidx352 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 1
  %arrayidx353 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx352, i32 0, i64 0
  %142 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx353, align 8
  %call354 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %141, %struct.rtx_def* %142)
  br label %return

if.end.355:                                       ; preds = %if.end.266
  %arrayidx356 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 0
  %arrayidx357 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx356, i32 0, i64 0
  %143 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx357, align 8
  %144 = bitcast %struct.rtx_def* %143 to i32*
  %bf.load358 = load i32, i32* %144, align 8
  %bf.clear359 = and i32 %bf.load358, 65535
  %cmp360 = icmp eq i32 %bf.clear359, 61
  br i1 %cmp360, label %land.lhs.true.362, label %lor.lhs.false.397

land.lhs.true.362:                                ; preds = %if.end.355
  %arrayidx363 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 1
  %arrayidx364 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx363, i32 0, i64 1
  %145 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx364, align 8
  %146 = bitcast %struct.rtx_def* %145 to i32*
  %bf.load365 = load i32, i32* %146, align 8
  %bf.clear366 = and i32 %bf.load365, 65535
  %cmp367 = icmp eq i32 %bf.clear366, 61
  br i1 %cmp367, label %land.lhs.true.369, label %lor.lhs.false.397

land.lhs.true.369:                                ; preds = %land.lhs.true.362
  %arrayidx370 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 0
  %arrayidx371 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx370, i32 0, i64 0
  %147 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx371, align 8
  %fld372 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %147, i32 0, i32 1
  %arrayidx373 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld372, i32 0, i64 0
  %rtuint374 = bitcast %union.rtunion_def* %arrayidx373 to i32*
  %148 = load i32, i32* %rtuint374, align 4
  %arrayidx375 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 1
  %arrayidx376 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx375, i32 0, i64 1
  %149 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx376, align 8
  %fld377 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %149, i32 0, i32 1
  %arrayidx378 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld377, i32 0, i64 0
  %rtuint379 = bitcast %union.rtunion_def* %arrayidx378 to i32*
  %150 = load i32, i32* %rtuint379, align 4
  %cmp380 = icmp eq i32 %148, %150
  br i1 %cmp380, label %if.then.410, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.369
  %151 = load i32, i32* %nparts, align 4
  %cmp382 = icmp eq i32 %151, 3
  br i1 %cmp382, label %land.lhs.true.384, label %lor.lhs.false.397

land.lhs.true.384:                                ; preds = %lor.lhs.false
  %arrayidx385 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 0
  %arrayidx386 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx385, i32 0, i64 0
  %152 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx386, align 8
  %fld387 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %152, i32 0, i32 1
  %arrayidx388 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld387, i32 0, i64 0
  %rtuint389 = bitcast %union.rtunion_def* %arrayidx388 to i32*
  %153 = load i32, i32* %rtuint389, align 4
  %arrayidx390 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 1
  %arrayidx391 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx390, i32 0, i64 2
  %154 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx391, align 8
  %fld392 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %154, i32 0, i32 1
  %arrayidx393 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld392, i32 0, i64 0
  %rtuint394 = bitcast %union.rtunion_def* %arrayidx393 to i32*
  %155 = load i32, i32* %rtuint394, align 4
  %cmp395 = icmp eq i32 %153, %155
  br i1 %cmp395, label %if.then.410, label %lor.lhs.false.397

lor.lhs.false.397:                                ; preds = %land.lhs.true.384, %lor.lhs.false, %land.lhs.true.362, %if.end.355
  %156 = load i32, i32* %collisions, align 4
  %cmp398 = icmp sgt i32 %156, 0
  br i1 %cmp398, label %land.lhs.true.400, label %if.else.446

land.lhs.true.400:                                ; preds = %lor.lhs.false.397
  %arrayidx401 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 0
  %arrayidx402 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx401, i32 0, i64 0
  %157 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx402, align 8
  %arrayidx403 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 1
  %arrayidx404 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx403, i32 0, i64 0
  %158 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx404, align 8
  %fld405 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %158, i32 0, i32 1
  %arrayidx406 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld405, i32 0, i64 0
  %rtx407 = bitcast %union.rtunion_def* %arrayidx406 to %struct.rtx_def**
  %159 = load %struct.rtx_def*, %struct.rtx_def** %rtx407, align 8
  %call408 = call i32 @reg_overlap_mentioned_p(%struct.rtx_def* %157, %struct.rtx_def* %159)
  %tobool409 = icmp ne i32 %call408, 0
  br i1 %tobool409, label %if.then.410, label %if.else.446

if.then.410:                                      ; preds = %land.lhs.true.400, %land.lhs.true.384, %land.lhs.true.369
  %160 = load i32, i32* %nparts, align 4
  %cmp411 = icmp eq i32 %160, 3
  br i1 %cmp411, label %if.then.413, label %if.else.432

if.then.413:                                      ; preds = %if.then.410
  %arrayidx414 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 0
  %arrayidx415 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx414, i32 0, i64 2
  %161 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx415, align 8
  %162 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx416 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %162, i64 2
  store %struct.rtx_def* %161, %struct.rtx_def** %arrayidx416, align 8
  %arrayidx417 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 0
  %arrayidx418 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx417, i32 0, i64 1
  %163 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx418, align 8
  %164 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx419 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %164, i64 3
  store %struct.rtx_def* %163, %struct.rtx_def** %arrayidx419, align 8
  %arrayidx420 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 0
  %arrayidx421 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx420, i32 0, i64 0
  %165 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx421, align 8
  %166 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx422 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %166, i64 4
  store %struct.rtx_def* %165, %struct.rtx_def** %arrayidx422, align 8
  %arrayidx423 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 1
  %arrayidx424 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx423, i32 0, i64 2
  %167 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx424, align 8
  %168 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx425 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %168, i64 5
  store %struct.rtx_def* %167, %struct.rtx_def** %arrayidx425, align 8
  %arrayidx426 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 1
  %arrayidx427 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx426, i32 0, i64 1
  %169 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx427, align 8
  %170 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx428 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %170, i64 6
  store %struct.rtx_def* %169, %struct.rtx_def** %arrayidx428, align 8
  %arrayidx429 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 1
  %arrayidx430 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx429, i32 0, i64 0
  %171 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx430, align 8
  %172 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx431 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %172, i64 7
  store %struct.rtx_def* %171, %struct.rtx_def** %arrayidx431, align 8
  br label %if.end.445

if.else.432:                                      ; preds = %if.then.410
  %arrayidx433 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 0
  %arrayidx434 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx433, i32 0, i64 1
  %173 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx434, align 8
  %174 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx435 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %174, i64 2
  store %struct.rtx_def* %173, %struct.rtx_def** %arrayidx435, align 8
  %arrayidx436 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 0
  %arrayidx437 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx436, i32 0, i64 0
  %175 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx437, align 8
  %176 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx438 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %176, i64 3
  store %struct.rtx_def* %175, %struct.rtx_def** %arrayidx438, align 8
  %arrayidx439 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 1
  %arrayidx440 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx439, i32 0, i64 1
  %177 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx440, align 8
  %178 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx441 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %178, i64 5
  store %struct.rtx_def* %177, %struct.rtx_def** %arrayidx441, align 8
  %arrayidx442 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 1
  %arrayidx443 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx442, i32 0, i64 0
  %179 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx443, align 8
  %180 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx444 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %180, i64 6
  store %struct.rtx_def* %179, %struct.rtx_def** %arrayidx444, align 8
  br label %if.end.445

if.end.445:                                       ; preds = %if.else.432, %if.then.413
  br label %if.end.482

if.else.446:                                      ; preds = %land.lhs.true.400, %lor.lhs.false.397
  %181 = load i32, i32* %nparts, align 4
  %cmp447 = icmp eq i32 %181, 3
  br i1 %cmp447, label %if.then.449, label %if.else.468

if.then.449:                                      ; preds = %if.else.446
  %arrayidx450 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 0
  %arrayidx451 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx450, i32 0, i64 0
  %182 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx451, align 8
  %183 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx452 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %183, i64 2
  store %struct.rtx_def* %182, %struct.rtx_def** %arrayidx452, align 8
  %arrayidx453 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 0
  %arrayidx454 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx453, i32 0, i64 1
  %184 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx454, align 8
  %185 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx455 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %185, i64 3
  store %struct.rtx_def* %184, %struct.rtx_def** %arrayidx455, align 8
  %arrayidx456 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 0
  %arrayidx457 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx456, i32 0, i64 2
  %186 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx457, align 8
  %187 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx458 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %187, i64 4
  store %struct.rtx_def* %186, %struct.rtx_def** %arrayidx458, align 8
  %arrayidx459 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 1
  %arrayidx460 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx459, i32 0, i64 0
  %188 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx460, align 8
  %189 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx461 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %189, i64 5
  store %struct.rtx_def* %188, %struct.rtx_def** %arrayidx461, align 8
  %arrayidx462 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 1
  %arrayidx463 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx462, i32 0, i64 1
  %190 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx463, align 8
  %191 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx464 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %191, i64 6
  store %struct.rtx_def* %190, %struct.rtx_def** %arrayidx464, align 8
  %arrayidx465 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 1
  %arrayidx466 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx465, i32 0, i64 2
  %192 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx466, align 8
  %193 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx467 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %193, i64 7
  store %struct.rtx_def* %192, %struct.rtx_def** %arrayidx467, align 8
  br label %if.end.481

if.else.468:                                      ; preds = %if.else.446
  %arrayidx469 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 0
  %arrayidx470 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx469, i32 0, i64 0
  %194 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx470, align 8
  %195 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx471 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %195, i64 2
  store %struct.rtx_def* %194, %struct.rtx_def** %arrayidx471, align 8
  %arrayidx472 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 0
  %arrayidx473 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx472, i32 0, i64 1
  %196 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx473, align 8
  %197 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx474 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %197, i64 3
  store %struct.rtx_def* %196, %struct.rtx_def** %arrayidx474, align 8
  %arrayidx475 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 1
  %arrayidx476 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx475, i32 0, i64 0
  %198 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx476, align 8
  %199 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx477 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %199, i64 5
  store %struct.rtx_def* %198, %struct.rtx_def** %arrayidx477, align 8
  %arrayidx478 = getelementptr inbounds [2 x [3 x %struct.rtx_def*]], [2 x [3 x %struct.rtx_def*]]* %part, i32 0, i64 1
  %arrayidx479 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx478, i32 0, i64 1
  %200 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx479, align 8
  %201 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx480 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %201, i64 6
  store %struct.rtx_def* %200, %struct.rtx_def** %arrayidx480, align 8
  br label %if.end.481

if.end.481:                                       ; preds = %if.else.468, %if.then.449
  br label %if.end.482

if.end.482:                                       ; preds = %if.end.481, %if.end.445
  %202 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx483 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %202, i64 2
  %203 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx483, align 8
  %204 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx484 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %204, i64 5
  %205 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx484, align 8
  %call485 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %203, %struct.rtx_def* %205)
  %206 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx486 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %206, i64 3
  %207 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx486, align 8
  %208 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx487 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %208, i64 6
  %209 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx487, align 8
  %call488 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %207, %struct.rtx_def* %209)
  %210 = load i32, i32* %nparts, align 4
  %cmp489 = icmp eq i32 %210, 3
  br i1 %cmp489, label %if.then.491, label %if.end.495

if.then.491:                                      ; preds = %if.end.482
  %211 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx492 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %211, i64 4
  %212 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx492, align 8
  %213 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx493 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %213, i64 7
  %214 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx493, align 8
  %call494 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %212, %struct.rtx_def* %214)
  br label %if.end.495

if.end.495:                                       ; preds = %if.then.491, %if.end.482
  br label %return

return:                                           ; preds = %if.end.495, %if.end.344, %if.end.49
  ret void
}

declare %struct.rtx_def* @get_pool_constant(%struct.rtx_def*) #0

declare %struct.rtx_def* @copy_rtx(%struct.rtx_def*) #0

declare %struct.rtx_def* @gen_lowpart(i32, %struct.rtx_def*) #0

declare i32 @offsettable_memref_p(%struct.rtx_def*) #0

; Function Attrs: nounwind uwtable
define internal i32 @ix86_split_to_parts(%struct.rtx_def* %operand, %struct.rtx_def** %parts, i32 %mode) #1 {
entry:
  %operand.addr = alloca %struct.rtx_def*, align 8
  %parts.addr = alloca %struct.rtx_def**, align 8
  %mode.addr = alloca i32, align 4
  %size = alloca i32, align 4
  %r = alloca %struct.realvaluetype, align 8
  %l = alloca [4 x i64], align 16
  %u = alloca %union.real_extract, align 8
  %r222 = alloca %struct.realvaluetype, align 8
  %l223 = alloca [3 x i64], align 16
  %u225 = alloca %union.real_extract, align 8
  store %struct.rtx_def* %operand, %struct.rtx_def** %operand.addr, align 8
  store %struct.rtx_def** %parts, %struct.rtx_def*** %parts.addr, align 8
  store i32 %mode, i32* %mode.addr, align 4
  %0 = load i32, i32* @target_flags, align 4
  %and = and i32 %0, 33554432
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %mode.addr, align 4
  %cmp = icmp eq i32 %1, 18
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %2 = load i32, i32* %mode.addr, align 4
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom
  %3 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %3 to i32
  %div = sdiv i32 %conv, 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 3, %cond.true ], [ %div, %cond.false ]
  store i32 %cond, i32* %size, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %4 = load i32, i32* %mode.addr, align 4
  %idxprom1 = sext i32 %4 to i64
  %arrayidx2 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom1
  %5 = load i8, i8* %arrayidx2, align 1
  %conv3 = zext i8 %5 to i32
  %add = add nsw i32 %conv3, 4
  %div4 = sdiv i32 %add, 8
  store i32 %div4, i32* %size, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %cond.end
  %6 = load %struct.rtx_def*, %struct.rtx_def** %operand.addr, align 8
  %7 = bitcast %struct.rtx_def* %6 to i32*
  %bf.load = load i32, i32* %7, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp5 = icmp eq i32 %bf.clear, 61
  br i1 %cmp5, label %land.lhs.true, label %if.end.17

land.lhs.true:                                    ; preds = %if.end
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx7 to i32*
  %9 = load i32, i32* %rtuint, align 4
  %cmp8 = icmp uge i32 %9, 29
  br i1 %cmp8, label %land.lhs.true.10, label %if.end.17

land.lhs.true.10:                                 ; preds = %land.lhs.true
  %10 = load %struct.rtx_def*, %struct.rtx_def** %operand.addr, align 8
  %fld11 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1
  %arrayidx12 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld11, i32 0, i64 0
  %rtuint13 = bitcast %union.rtunion_def* %arrayidx12 to i32*
  %11 = load i32, i32* %rtuint13, align 4
  %cmp14 = icmp ule i32 %11, 36
  br i1 %cmp14, label %if.then.16, label %if.end.17

if.then.16:                                       ; preds = %land.lhs.true.10
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 8593, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__FUNCTION__.ix86_split_to_parts, i32 0, i32 0)) #7
  unreachable

if.end.17:                                        ; preds = %land.lhs.true.10, %land.lhs.true, %if.end
  %12 = load i32, i32* %size, align 4
  %cmp18 = icmp slt i32 %12, 2
  br i1 %cmp18, label %if.then.22, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.17
  %13 = load i32, i32* %size, align 4
  %cmp20 = icmp sgt i32 %13, 3
  br i1 %cmp20, label %if.then.22, label %if.end.23

if.then.22:                                       ; preds = %lor.lhs.false, %if.end.17
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 8595, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__FUNCTION__.ix86_split_to_parts, i32 0, i32 0)) #7
  unreachable

if.end.23:                                        ; preds = %lor.lhs.false
  %14 = load %struct.rtx_def*, %struct.rtx_def** %operand.addr, align 8
  %15 = bitcast %struct.rtx_def* %14 to i32*
  %bf.load24 = load i32, i32* %15, align 8
  %bf.clear25 = and i32 %bf.load24, 65535
  %cmp26 = icmp eq i32 %bf.clear25, 66
  br i1 %cmp26, label %land.lhs.true.28, label %if.end.46

land.lhs.true.28:                                 ; preds = %if.end.23
  %16 = load %struct.rtx_def*, %struct.rtx_def** %operand.addr, align 8
  %fld29 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1
  %arrayidx30 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld29, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx30 to %struct.rtx_def**
  %17 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %18 = bitcast %struct.rtx_def* %17 to i32*
  %bf.load31 = load i32, i32* %18, align 8
  %bf.clear32 = and i32 %bf.load31, 65535
  %cmp33 = icmp eq i32 %bf.clear32, 68
  br i1 %cmp33, label %land.lhs.true.35, label %if.end.46

land.lhs.true.35:                                 ; preds = %land.lhs.true.28
  %19 = load %struct.rtx_def*, %struct.rtx_def** %operand.addr, align 8
  %fld36 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1
  %arrayidx37 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld36, i32 0, i64 0
  %rtx38 = bitcast %union.rtunion_def* %arrayidx37 to %struct.rtx_def**
  %20 = load %struct.rtx_def*, %struct.rtx_def** %rtx38, align 8
  %21 = bitcast %struct.rtx_def* %20 to i32*
  %bf.load39 = load i32, i32* %21, align 8
  %bf.lshr = lshr i32 %bf.load39, 26
  %bf.clear40 = and i32 %bf.lshr, 1
  %tobool41 = icmp ne i32 %bf.clear40, 0
  br i1 %tobool41, label %if.then.42, label %if.end.46

if.then.42:                                       ; preds = %land.lhs.true.35
  %22 = load %struct.rtx_def*, %struct.rtx_def** %operand.addr, align 8
  %fld43 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1
  %arrayidx44 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld43, i32 0, i64 0
  %rtx45 = bitcast %union.rtunion_def* %arrayidx44 to %struct.rtx_def**
  %23 = load %struct.rtx_def*, %struct.rtx_def** %rtx45, align 8
  %call = call %struct.rtx_def* @get_pool_constant(%struct.rtx_def* %23)
  store %struct.rtx_def* %call, %struct.rtx_def** %operand.addr, align 8
  br label %if.end.46

if.end.46:                                        ; preds = %if.then.42, %land.lhs.true.35, %land.lhs.true.28, %if.end.23
  %24 = load %struct.rtx_def*, %struct.rtx_def** %operand.addr, align 8
  %25 = bitcast %struct.rtx_def* %24 to i32*
  %bf.load47 = load i32, i32* %25, align 8
  %bf.clear48 = and i32 %bf.load47, 65535
  %cmp49 = icmp eq i32 %bf.clear48, 66
  br i1 %cmp49, label %land.lhs.true.51, label %if.else.68

land.lhs.true.51:                                 ; preds = %if.end.46
  %26 = load %struct.rtx_def*, %struct.rtx_def** %operand.addr, align 8
  %call52 = call i32 @offsettable_memref_p(%struct.rtx_def* %26)
  %tobool53 = icmp ne i32 %call52, 0
  br i1 %tobool53, label %if.else.68, label %if.then.54

if.then.54:                                       ; preds = %land.lhs.true.51
  %27 = load %struct.rtx_def*, %struct.rtx_def** %operand.addr, align 8
  %call55 = call i32 @push_operand(%struct.rtx_def* %27, i32 0)
  %tobool56 = icmp ne i32 %call55, 0
  br i1 %tobool56, label %if.end.58, label %if.then.57

if.then.57:                                       ; preds = %if.then.54
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 8609, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__FUNCTION__.ix86_split_to_parts, i32 0, i32 0)) #7
  unreachable

if.end.58:                                        ; preds = %if.then.54
  %28 = load %struct.rtx_def*, %struct.rtx_def** %operand.addr, align 8
  %call59 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %28)
  store %struct.rtx_def* %call59, %struct.rtx_def** %operand.addr, align 8
  %29 = load i32, i32* @target_flags, align 4
  %and60 = and i32 %29, 33554432
  %tobool61 = icmp ne i32 %and60, 0
  %cond62 = select i1 %tobool61, i32 5, i32 4
  %30 = load %struct.rtx_def*, %struct.rtx_def** %operand.addr, align 8
  %31 = bitcast %struct.rtx_def* %30 to i32*
  %bf.load63 = load i32, i32* %31, align 8
  %bf.value = and i32 %cond62, 255
  %bf.shl = shl i32 %bf.value, 16
  %bf.clear64 = and i32 %bf.load63, -16711681
  %bf.set = or i32 %bf.clear64, %bf.shl
  store i32 %bf.set, i32* %31, align 8
  %32 = load %struct.rtx_def*, %struct.rtx_def** %operand.addr, align 8
  %33 = load %struct.rtx_def**, %struct.rtx_def*** %parts.addr, align 8
  %arrayidx65 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %33, i64 2
  store %struct.rtx_def* %32, %struct.rtx_def** %arrayidx65, align 8
  %34 = load %struct.rtx_def**, %struct.rtx_def*** %parts.addr, align 8
  %arrayidx66 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %34, i64 1
  store %struct.rtx_def* %32, %struct.rtx_def** %arrayidx66, align 8
  %35 = load %struct.rtx_def**, %struct.rtx_def*** %parts.addr, align 8
  %arrayidx67 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %35, i64 0
  store %struct.rtx_def* %32, %struct.rtx_def** %arrayidx67, align 8
  br label %if.end.276

if.else.68:                                       ; preds = %land.lhs.true.51, %if.end.46
  %36 = load i32, i32* @target_flags, align 4
  %and69 = and i32 %36, 33554432
  %tobool70 = icmp ne i32 %and69, 0
  br i1 %tobool70, label %if.else.175, label %if.then.71

if.then.71:                                       ; preds = %if.else.68
  %37 = load i32, i32* %mode.addr, align 4
  %cmp72 = icmp eq i32 %37, 5
  br i1 %cmp72, label %if.then.74, label %if.else.77

if.then.74:                                       ; preds = %if.then.71
  %38 = load %struct.rtx_def**, %struct.rtx_def*** %parts.addr, align 8
  %arrayidx75 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %38, i64 0
  %39 = load %struct.rtx_def**, %struct.rtx_def*** %parts.addr, align 8
  %arrayidx76 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %39, i64 1
  call void @split_di(%struct.rtx_def** %operand.addr, i32 1, %struct.rtx_def** %arrayidx75, %struct.rtx_def** %arrayidx76)
  br label %if.end.174

if.else.77:                                       ; preds = %if.then.71
  %40 = load %struct.rtx_def*, %struct.rtx_def** %operand.addr, align 8
  %41 = bitcast %struct.rtx_def* %40 to i32*
  %bf.load78 = load i32, i32* %41, align 8
  %bf.clear79 = and i32 %bf.load78, 65535
  %cmp80 = icmp eq i32 %bf.clear79, 61
  br i1 %cmp80, label %if.then.82, label %if.else.108

if.then.82:                                       ; preds = %if.else.77
  %42 = load i32, i32* @reload_completed, align 4
  %tobool83 = icmp ne i32 %42, 0
  br i1 %tobool83, label %if.end.85, label %if.then.84

if.then.84:                                       ; preds = %if.then.82
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 8624, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__FUNCTION__.ix86_split_to_parts, i32 0, i32 0)) #7
  unreachable

if.end.85:                                        ; preds = %if.then.82
  %43 = load %struct.rtx_def*, %struct.rtx_def** %operand.addr, align 8
  %fld86 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %43, i32 0, i32 1
  %arrayidx87 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld86, i32 0, i64 0
  %rtuint88 = bitcast %union.rtunion_def* %arrayidx87 to i32*
  %44 = load i32, i32* %rtuint88, align 4
  %add89 = add i32 %44, 0
  %call90 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 %add89)
  %45 = load %struct.rtx_def**, %struct.rtx_def*** %parts.addr, align 8
  %arrayidx91 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %45, i64 0
  store %struct.rtx_def* %call90, %struct.rtx_def** %arrayidx91, align 8
  %46 = load %struct.rtx_def*, %struct.rtx_def** %operand.addr, align 8
  %fld92 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %46, i32 0, i32 1
  %arrayidx93 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld92, i32 0, i64 0
  %rtuint94 = bitcast %union.rtunion_def* %arrayidx93 to i32*
  %47 = load i32, i32* %rtuint94, align 4
  %add95 = add i32 %47, 1
  %call96 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 %add95)
  %48 = load %struct.rtx_def**, %struct.rtx_def*** %parts.addr, align 8
  %arrayidx97 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %48, i64 1
  store %struct.rtx_def* %call96, %struct.rtx_def** %arrayidx97, align 8
  %49 = load i32, i32* %size, align 4
  %cmp98 = icmp eq i32 %49, 3
  br i1 %cmp98, label %if.then.100, label %if.end.107

if.then.100:                                      ; preds = %if.end.85
  %50 = load %struct.rtx_def*, %struct.rtx_def** %operand.addr, align 8
  %fld101 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %50, i32 0, i32 1
  %arrayidx102 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld101, i32 0, i64 0
  %rtuint103 = bitcast %union.rtunion_def* %arrayidx102 to i32*
  %51 = load i32, i32* %rtuint103, align 4
  %add104 = add i32 %51, 2
  %call105 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 %add104)
  %52 = load %struct.rtx_def**, %struct.rtx_def*** %parts.addr, align 8
  %arrayidx106 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %52, i64 2
  store %struct.rtx_def* %call105, %struct.rtx_def** %arrayidx106, align 8
  br label %if.end.107

if.end.107:                                       ; preds = %if.then.100, %if.end.85
  br label %if.end.173

if.else.108:                                      ; preds = %if.else.77
  %53 = load %struct.rtx_def*, %struct.rtx_def** %operand.addr, align 8
  %call109 = call i32 @offsettable_memref_p(%struct.rtx_def* %53)
  %tobool110 = icmp ne i32 %call109, 0
  br i1 %tobool110, label %if.then.111, label %if.else.122

if.then.111:                                      ; preds = %if.else.108
  %54 = load %struct.rtx_def*, %struct.rtx_def** %operand.addr, align 8
  %call112 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %54, i32 4, i64 0, i32 1, i32 1)
  store %struct.rtx_def* %call112, %struct.rtx_def** %operand.addr, align 8
  %55 = load %struct.rtx_def*, %struct.rtx_def** %operand.addr, align 8
  %56 = load %struct.rtx_def**, %struct.rtx_def*** %parts.addr, align 8
  %arrayidx113 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %56, i64 0
  store %struct.rtx_def* %55, %struct.rtx_def** %arrayidx113, align 8
  %57 = load %struct.rtx_def*, %struct.rtx_def** %operand.addr, align 8
  %call114 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %57, i32 4, i64 4, i32 1, i32 1)
  %58 = load %struct.rtx_def**, %struct.rtx_def*** %parts.addr, align 8
  %arrayidx115 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %58, i64 1
  store %struct.rtx_def* %call114, %struct.rtx_def** %arrayidx115, align 8
  %59 = load i32, i32* %size, align 4
  %cmp116 = icmp eq i32 %59, 3
  br i1 %cmp116, label %if.then.118, label %if.end.121

if.then.118:                                      ; preds = %if.then.111
  %60 = load %struct.rtx_def*, %struct.rtx_def** %operand.addr, align 8
  %call119 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %60, i32 4, i64 8, i32 1, i32 1)
  %61 = load %struct.rtx_def**, %struct.rtx_def*** %parts.addr, align 8
  %arrayidx120 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %61, i64 2
  store %struct.rtx_def* %call119, %struct.rtx_def** %arrayidx120, align 8
  br label %if.end.121

if.end.121:                                       ; preds = %if.then.118, %if.then.111
  br label %if.end.172

if.else.122:                                      ; preds = %if.else.108
  %62 = load %struct.rtx_def*, %struct.rtx_def** %operand.addr, align 8
  %63 = bitcast %struct.rtx_def* %62 to i32*
  %bf.load123 = load i32, i32* %63, align 8
  %bf.clear124 = and i32 %bf.load123, 65535
  %cmp125 = icmp eq i32 %bf.clear124, 55
  br i1 %cmp125, label %if.then.127, label %if.else.170

if.then.127:                                      ; preds = %if.else.122
  br label %do.body

do.body:                                          ; preds = %if.then.127
  %64 = bitcast %union.real_extract* %u to i8*
  %65 = load %struct.rtx_def*, %struct.rtx_def** %operand.addr, align 8
  %fld128 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %65, i32 0, i32 1
  %arrayidx129 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld128, i32 0, i64 1
  %rtwint = bitcast %union.rtunion_def* %arrayidx129 to i64*
  %66 = bitcast i64* %rtwint to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %64, i8* %66, i64 24, i32 8, i1 false)
  %d = bitcast %union.real_extract* %u to %struct.realvaluetype*
  %67 = bitcast %struct.realvaluetype* %r to i8*
  %68 = bitcast %struct.realvaluetype* %d to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %67, i8* %68, i64 24, i32 8, i1 false)
  br label %do.end

do.end:                                           ; preds = %do.body
  %69 = load i32, i32* %mode.addr, align 4
  switch i32 %69, label %sw.default [
    i32 17, label %sw.bb
    i32 18, label %sw.bb
    i32 16, label %sw.bb.160
  ]

sw.bb:                                            ; preds = %do.end, %do.end
  %70 = load i32, i32* @target_flags, align 4
  %and130 = and i32 %70, 16777216
  %tobool131 = icmp ne i32 %and130, 0
  %cond132 = select i1 %tobool131, i32 128, i32 96
  %cmp133 = icmp eq i32 %cond132, 64
  br i1 %cmp133, label %cond.true.135, label %cond.false.136

cond.true.135:                                    ; preds = %sw.bb
  %arraydecay = getelementptr inbounds [4 x i64], [4 x i64]* %l, i32 0, i32 0
  call void @etardouble(%struct.realvaluetype* byval align 8 %r, i64* %arraydecay)
  br label %cond.end.155

cond.false.136:                                   ; preds = %sw.bb
  %71 = load i32, i32* @target_flags, align 4
  %and137 = and i32 %71, 16777216
  %tobool138 = icmp ne i32 %and137, 0
  %cond139 = select i1 %tobool138, i32 128, i32 96
  %cmp140 = icmp eq i32 %cond139, 96
  br i1 %cmp140, label %cond.true.142, label %cond.false.144

cond.true.142:                                    ; preds = %cond.false.136
  %arraydecay143 = getelementptr inbounds [4 x i64], [4 x i64]* %l, i32 0, i32 0
  call void @etarldouble(%struct.realvaluetype* byval align 8 %r, i64* %arraydecay143)
  br label %cond.end.154

cond.false.144:                                   ; preds = %cond.false.136
  %72 = load i32, i32* @target_flags, align 4
  %and145 = and i32 %72, 16777216
  %tobool146 = icmp ne i32 %and145, 0
  %cond147 = select i1 %tobool146, i32 128, i32 96
  %cmp148 = icmp eq i32 %cond147, 128
  br i1 %cmp148, label %cond.true.150, label %cond.false.152

cond.true.150:                                    ; preds = %cond.false.144
  %arraydecay151 = getelementptr inbounds [4 x i64], [4 x i64]* %l, i32 0, i32 0
  call void @etartdouble(%struct.realvaluetype* byval align 8 %r, i64* %arraydecay151)
  br label %cond.end.153

cond.false.152:                                   ; preds = %cond.false.144
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 8648, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__FUNCTION__.ix86_split_to_parts, i32 0, i32 0)) #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end.153

cond.end.153:                                     ; preds = %73, %cond.true.150
  br label %cond.end.154

cond.end.154:                                     ; preds = %cond.end.153, %cond.true.142
  br label %cond.end.155

cond.end.155:                                     ; preds = %cond.end.154, %cond.true.135
  %arrayidx156 = getelementptr inbounds [4 x i64], [4 x i64]* %l, i32 0, i64 2
  %74 = load i64, i64* %arrayidx156, align 8
  %call157 = call i64 @trunc_int_for_mode(i64 %74, i32 4)
  %call158 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %call157)
  %75 = load %struct.rtx_def**, %struct.rtx_def*** %parts.addr, align 8
  %arrayidx159 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %75, i64 2
  store %struct.rtx_def* %call158, %struct.rtx_def** %arrayidx159, align 8
  br label %sw.epilog

sw.bb.160:                                        ; preds = %do.end
  %arraydecay161 = getelementptr inbounds [4 x i64], [4 x i64]* %l, i32 0, i32 0
  call void @etardouble(%struct.realvaluetype* byval align 8 %r, i64* %arraydecay161)
  br label %sw.epilog

sw.default:                                       ; preds = %do.end
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 8655, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__FUNCTION__.ix86_split_to_parts, i32 0, i32 0)) #7
  unreachable

sw.epilog:                                        ; preds = %sw.bb.160, %cond.end.155
  %arrayidx162 = getelementptr inbounds [4 x i64], [4 x i64]* %l, i32 0, i64 1
  %76 = load i64, i64* %arrayidx162, align 8
  %call163 = call i64 @trunc_int_for_mode(i64 %76, i32 4)
  %call164 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %call163)
  %77 = load %struct.rtx_def**, %struct.rtx_def*** %parts.addr, align 8
  %arrayidx165 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %77, i64 1
  store %struct.rtx_def* %call164, %struct.rtx_def** %arrayidx165, align 8
  %arrayidx166 = getelementptr inbounds [4 x i64], [4 x i64]* %l, i32 0, i64 0
  %78 = load i64, i64* %arrayidx166, align 8
  %call167 = call i64 @trunc_int_for_mode(i64 %78, i32 4)
  %call168 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %call167)
  %79 = load %struct.rtx_def**, %struct.rtx_def*** %parts.addr, align 8
  %arrayidx169 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %79, i64 0
  store %struct.rtx_def* %call168, %struct.rtx_def** %arrayidx169, align 8
  br label %if.end.171

if.else.170:                                      ; preds = %if.else.122
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 8661, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__FUNCTION__.ix86_split_to_parts, i32 0, i32 0)) #7
  unreachable

if.end.171:                                       ; preds = %sw.epilog
  br label %if.end.172

if.end.172:                                       ; preds = %if.end.171, %if.end.121
  br label %if.end.173

if.end.173:                                       ; preds = %if.end.172, %if.end.107
  br label %if.end.174

if.end.174:                                       ; preds = %if.end.173, %if.then.74
  br label %if.end.275

if.else.175:                                      ; preds = %if.else.68
  %80 = load i32, i32* %mode.addr, align 4
  %cmp176 = icmp eq i32 %80, 6
  br i1 %cmp176, label %if.then.178, label %if.end.181

if.then.178:                                      ; preds = %if.else.175
  %81 = load %struct.rtx_def**, %struct.rtx_def*** %parts.addr, align 8
  %arrayidx179 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %81, i64 0
  %82 = load %struct.rtx_def**, %struct.rtx_def*** %parts.addr, align 8
  %arrayidx180 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %82, i64 1
  call void @split_ti(%struct.rtx_def** %operand.addr, i32 1, %struct.rtx_def** %arrayidx179, %struct.rtx_def** %arrayidx180)
  br label %if.end.181

if.end.181:                                       ; preds = %if.then.178, %if.else.175
  %83 = load i32, i32* %mode.addr, align 4
  %cmp182 = icmp eq i32 %83, 17
  br i1 %cmp182, label %if.then.187, label %lor.lhs.false.184

lor.lhs.false.184:                                ; preds = %if.end.181
  %84 = load i32, i32* %mode.addr, align 4
  %cmp185 = icmp eq i32 %84, 18
  br i1 %cmp185, label %if.then.187, label %if.end.274

if.then.187:                                      ; preds = %lor.lhs.false.184, %if.end.181
  %85 = load %struct.rtx_def*, %struct.rtx_def** %operand.addr, align 8
  %86 = bitcast %struct.rtx_def* %85 to i32*
  %bf.load188 = load i32, i32* %86, align 8
  %bf.clear189 = and i32 %bf.load188, 65535
  %cmp190 = icmp eq i32 %bf.clear189, 61
  br i1 %cmp190, label %if.then.192, label %if.else.208

if.then.192:                                      ; preds = %if.then.187
  %87 = load i32, i32* @reload_completed, align 4
  %tobool193 = icmp ne i32 %87, 0
  br i1 %tobool193, label %if.end.195, label %if.then.194

if.then.194:                                      ; preds = %if.then.192
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 8673, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__FUNCTION__.ix86_split_to_parts, i32 0, i32 0)) #7
  unreachable

if.end.195:                                       ; preds = %if.then.192
  %88 = load %struct.rtx_def*, %struct.rtx_def** %operand.addr, align 8
  %fld196 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %88, i32 0, i32 1
  %arrayidx197 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld196, i32 0, i64 0
  %rtuint198 = bitcast %union.rtunion_def* %arrayidx197 to i32*
  %89 = load i32, i32* %rtuint198, align 4
  %add199 = add i32 %89, 0
  %call200 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 %add199)
  %90 = load %struct.rtx_def**, %struct.rtx_def*** %parts.addr, align 8
  %arrayidx201 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %90, i64 0
  store %struct.rtx_def* %call200, %struct.rtx_def** %arrayidx201, align 8
  %91 = load %struct.rtx_def*, %struct.rtx_def** %operand.addr, align 8
  %fld202 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %91, i32 0, i32 1
  %arrayidx203 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld202, i32 0, i64 0
  %rtuint204 = bitcast %union.rtunion_def* %arrayidx203 to i32*
  %92 = load i32, i32* %rtuint204, align 4
  %add205 = add i32 %92, 1
  %call206 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 %add205)
  %93 = load %struct.rtx_def**, %struct.rtx_def*** %parts.addr, align 8
  %arrayidx207 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %93, i64 1
  store %struct.rtx_def* %call206, %struct.rtx_def** %arrayidx207, align 8
  br label %if.end.273

if.else.208:                                      ; preds = %if.then.187
  %94 = load %struct.rtx_def*, %struct.rtx_def** %operand.addr, align 8
  %call209 = call i32 @offsettable_memref_p(%struct.rtx_def* %94)
  %tobool210 = icmp ne i32 %call209, 0
  br i1 %tobool210, label %if.then.211, label %if.else.216

if.then.211:                                      ; preds = %if.else.208
  %95 = load %struct.rtx_def*, %struct.rtx_def** %operand.addr, align 8
  %call212 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %95, i32 5, i64 0, i32 1, i32 1)
  store %struct.rtx_def* %call212, %struct.rtx_def** %operand.addr, align 8
  %96 = load %struct.rtx_def*, %struct.rtx_def** %operand.addr, align 8
  %97 = load %struct.rtx_def**, %struct.rtx_def*** %parts.addr, align 8
  %arrayidx213 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %97, i64 0
  store %struct.rtx_def* %96, %struct.rtx_def** %arrayidx213, align 8
  %98 = load %struct.rtx_def*, %struct.rtx_def** %operand.addr, align 8
  %call214 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %98, i32 4, i64 8, i32 1, i32 1)
  %99 = load %struct.rtx_def**, %struct.rtx_def*** %parts.addr, align 8
  %arrayidx215 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %99, i64 1
  store %struct.rtx_def* %call214, %struct.rtx_def** %arrayidx215, align 8
  br label %if.end.272

if.else.216:                                      ; preds = %if.else.208
  %100 = load %struct.rtx_def*, %struct.rtx_def** %operand.addr, align 8
  %101 = bitcast %struct.rtx_def* %100 to i32*
  %bf.load217 = load i32, i32* %101, align 8
  %bf.clear218 = and i32 %bf.load217, 65535
  %cmp219 = icmp eq i32 %bf.clear218, 55
  br i1 %cmp219, label %if.then.221, label %if.else.270

if.then.221:                                      ; preds = %if.else.216
  br label %do.body.224

do.body.224:                                      ; preds = %if.then.221
  %102 = bitcast %union.real_extract* %u225 to i8*
  %103 = load %struct.rtx_def*, %struct.rtx_def** %operand.addr, align 8
  %fld226 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %103, i32 0, i32 1
  %arrayidx227 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld226, i32 0, i64 1
  %rtwint228 = bitcast %union.rtunion_def* %arrayidx227 to i64*
  %104 = bitcast i64* %rtwint228 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %102, i8* %104, i64 24, i32 8, i1 false)
  %d229 = bitcast %union.real_extract* %u225 to %struct.realvaluetype*
  %105 = bitcast %struct.realvaluetype* %r222 to i8*
  %106 = bitcast %struct.realvaluetype* %d229 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %105, i8* %106, i64 24, i32 8, i1 false)
  br label %do.end.230

do.end.230:                                       ; preds = %do.body.224
  %107 = load i32, i32* @target_flags, align 4
  %and231 = and i32 %107, 16777216
  %tobool232 = icmp ne i32 %and231, 0
  %cond233 = select i1 %tobool232, i32 128, i32 96
  %cmp234 = icmp eq i32 %cond233, 64
  br i1 %cmp234, label %cond.true.236, label %cond.false.238

cond.true.236:                                    ; preds = %do.end.230
  %arraydecay237 = getelementptr inbounds [3 x i64], [3 x i64]* %l223, i32 0, i32 0
  call void @etardouble(%struct.realvaluetype* byval align 8 %r222, i64* %arraydecay237)
  br label %cond.end.257

cond.false.238:                                   ; preds = %do.end.230
  %108 = load i32, i32* @target_flags, align 4
  %and239 = and i32 %108, 16777216
  %tobool240 = icmp ne i32 %and239, 0
  %cond241 = select i1 %tobool240, i32 128, i32 96
  %cmp242 = icmp eq i32 %cond241, 96
  br i1 %cmp242, label %cond.true.244, label %cond.false.246

cond.true.244:                                    ; preds = %cond.false.238
  %arraydecay245 = getelementptr inbounds [3 x i64], [3 x i64]* %l223, i32 0, i32 0
  call void @etarldouble(%struct.realvaluetype* byval align 8 %r222, i64* %arraydecay245)
  br label %cond.end.256

cond.false.246:                                   ; preds = %cond.false.238
  %109 = load i32, i32* @target_flags, align 4
  %and247 = and i32 %109, 16777216
  %tobool248 = icmp ne i32 %and247, 0
  %cond249 = select i1 %tobool248, i32 128, i32 96
  %cmp250 = icmp eq i32 %cond249, 128
  br i1 %cmp250, label %cond.true.252, label %cond.false.254

cond.true.252:                                    ; preds = %cond.false.246
  %arraydecay253 = getelementptr inbounds [3 x i64], [3 x i64]* %l223, i32 0, i32 0
  call void @etartdouble(%struct.realvaluetype* byval align 8 %r222, i64* %arraydecay253)
  br label %cond.end.255

cond.false.254:                                   ; preds = %cond.false.246
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 8689, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__FUNCTION__.ix86_split_to_parts, i32 0, i32 0)) #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end.255

cond.end.255:                                     ; preds = %110, %cond.true.252
  br label %cond.end.256

cond.end.256:                                     ; preds = %cond.end.255, %cond.true.244
  br label %cond.end.257

cond.end.257:                                     ; preds = %cond.end.256, %cond.true.236
  %arrayidx258 = getelementptr inbounds [3 x i64], [3 x i64]* %l223, i32 0, i64 0
  %111 = load i64, i64* %arrayidx258, align 8
  %and259 = and i64 %111, 4294967295
  %arrayidx260 = getelementptr inbounds [3 x i64], [3 x i64]* %l223, i32 0, i64 1
  %112 = load i64, i64* %arrayidx260, align 8
  %shl = shl i64 %112, 31
  %shl261 = shl i64 %shl, 1
  %add262 = add nsw i64 %and259, %shl261
  %call263 = call i64 @trunc_int_for_mode(i64 %add262, i32 5)
  %call264 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %call263)
  %113 = load %struct.rtx_def**, %struct.rtx_def*** %parts.addr, align 8
  %arrayidx265 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %113, i64 0
  store %struct.rtx_def* %call264, %struct.rtx_def** %arrayidx265, align 8
  %arrayidx266 = getelementptr inbounds [3 x i64], [3 x i64]* %l223, i32 0, i64 2
  %114 = load i64, i64* %arrayidx266, align 8
  %call267 = call i64 @trunc_int_for_mode(i64 %114, i32 4)
  %call268 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %call267)
  %115 = load %struct.rtx_def**, %struct.rtx_def*** %parts.addr, align 8
  %arrayidx269 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %115, i64 1
  store %struct.rtx_def* %call268, %struct.rtx_def** %arrayidx269, align 8
  br label %if.end.271

if.else.270:                                      ; preds = %if.else.216
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 8702, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__FUNCTION__.ix86_split_to_parts, i32 0, i32 0)) #7
  unreachable

if.end.271:                                       ; preds = %cond.end.257
  br label %if.end.272

if.end.272:                                       ; preds = %if.end.271, %if.then.211
  br label %if.end.273

if.end.273:                                       ; preds = %if.end.272, %if.end.195
  br label %if.end.274

if.end.274:                                       ; preds = %if.end.273, %lor.lhs.false.184
  br label %if.end.275

if.end.275:                                       ; preds = %if.end.274, %if.end.174
  br label %if.end.276

if.end.276:                                       ; preds = %if.end.275, %if.end.58
  %116 = load i32, i32* %size, align 4
  ret i32 %116
}

declare %struct.rtx_def* @change_address(%struct.rtx_def*, i32, %struct.rtx_def*) #0

; Function Attrs: nounwind uwtable
define void @ix86_split_ashldi(%struct.rtx_def** %operands, %struct.rtx_def* %scratch) #1 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %scratch.addr = alloca %struct.rtx_def*, align 8
  %low = alloca [2 x %struct.rtx_def*], align 16
  %high = alloca [2 x %struct.rtx_def*], align 16
  %count = alloca i32, align 4
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* %scratch, %struct.rtx_def** %scratch.addr, align 8
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 2
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load = load i32, i32* %2, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 54
  br i1 %cmp, label %if.then, label %if.else.41

if.then:                                          ; preds = %entry
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arraydecay = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %low, i32 0, i32 0
  %arraydecay1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %high, i32 0, i32 0
  call void @split_di(%struct.rtx_def** %3, i32 2, %struct.rtx_def** %arraydecay, %struct.rtx_def** %arraydecay1)
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 2
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx3 to i64*
  %6 = load i64, i64* %rtwint, align 8
  %and = and i64 %6, 63
  %conv = trunc i64 %and to i32
  store i32 %conv, i32* %count, align 4
  %7 = load i32, i32* %count, align 4
  %cmp4 = icmp sge i32 %7, 32
  br i1 %cmp4, label %if.then.6, label %if.else

if.then.6:                                        ; preds = %if.then
  %arrayidx7 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %high, i32 0, i64 0
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx7, align 8
  %arrayidx8 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %low, i32 0, i64 1
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx8, align 8
  %call = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %8, %struct.rtx_def* %9)
  %arrayidx9 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %low, i32 0, i64 0
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx9, align 8
  %11 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call10 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %10, %struct.rtx_def* %11)
  %12 = load i32, i32* %count, align 4
  %cmp11 = icmp sgt i32 %12, 32
  br i1 %cmp11, label %if.then.13, label %if.end

if.then.13:                                       ; preds = %if.then.6
  %arrayidx14 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %high, i32 0, i64 0
  %13 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx14, align 8
  %arrayidx15 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %high, i32 0, i64 0
  %14 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx15, align 8
  %15 = load i32, i32* %count, align 4
  %sub = sub nsw i32 %15, 32
  %conv16 = sext i32 %sub to i64
  %call17 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv16)
  %call18 = call %struct.rtx_def* @gen_ashlsi3(%struct.rtx_def* %13, %struct.rtx_def* %14, %struct.rtx_def* %call17)
  %call19 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call18)
  br label %if.end

if.end:                                           ; preds = %if.then.13, %if.then.6
  br label %if.end.40

if.else:                                          ; preds = %if.then
  %16 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx20 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %16, i64 0
  %17 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx20, align 8
  %18 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx21 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %18, i64 1
  %19 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx21, align 8
  %call22 = call i32 @rtx_equal_p(%struct.rtx_def* %17, %struct.rtx_def* %19)
  %tobool = icmp ne i32 %call22, 0
  br i1 %tobool, label %if.end.27, label %if.then.23

if.then.23:                                       ; preds = %if.else
  %20 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx24 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %20, i64 0
  %21 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx24, align 8
  %22 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx25 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %22, i64 1
  %23 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx25, align 8
  %call26 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %21, %struct.rtx_def* %23)
  br label %if.end.27

if.end.27:                                        ; preds = %if.then.23, %if.else
  %arrayidx28 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %high, i32 0, i64 0
  %24 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx28, align 8
  %arrayidx29 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %low, i32 0, i64 0
  %25 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx29, align 8
  %26 = load i32, i32* %count, align 4
  %conv30 = sext i32 %26 to i64
  %call31 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv30)
  %call32 = call %struct.rtx_def* @gen_x86_shld_1(%struct.rtx_def* %24, %struct.rtx_def* %25, %struct.rtx_def* %call31)
  %call33 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call32)
  %arrayidx34 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %low, i32 0, i64 0
  %27 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx34, align 8
  %arrayidx35 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %low, i32 0, i64 0
  %28 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx35, align 8
  %29 = load i32, i32* %count, align 4
  %conv36 = sext i32 %29 to i64
  %call37 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv36)
  %call38 = call %struct.rtx_def* @gen_ashlsi3(%struct.rtx_def* %27, %struct.rtx_def* %28, %struct.rtx_def* %call37)
  %call39 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call38)
  br label %if.end.40

if.end.40:                                        ; preds = %if.end.27, %if.end
  br label %if.end.90

if.else.41:                                       ; preds = %entry
  %30 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx42 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %30, i64 0
  %31 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx42, align 8
  %32 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx43 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %32, i64 1
  %33 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx43, align 8
  %call44 = call i32 @rtx_equal_p(%struct.rtx_def* %31, %struct.rtx_def* %33)
  %tobool45 = icmp ne i32 %call44, 0
  br i1 %tobool45, label %if.end.50, label %if.then.46

if.then.46:                                       ; preds = %if.else.41
  %34 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx47 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %34, i64 0
  %35 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx47, align 8
  %36 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx48 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %36, i64 1
  %37 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx48, align 8
  %call49 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %35, %struct.rtx_def* %37)
  br label %if.end.50

if.end.50:                                        ; preds = %if.then.46, %if.else.41
  %38 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arraydecay51 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %low, i32 0, i32 0
  %arraydecay52 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %high, i32 0, i32 0
  call void @split_di(%struct.rtx_def** %38, i32 1, %struct.rtx_def** %arraydecay51, %struct.rtx_def** %arraydecay52)
  %arrayidx53 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %high, i32 0, i64 0
  %39 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx53, align 8
  %arrayidx54 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %low, i32 0, i64 0
  %40 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx54, align 8
  %41 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx55 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %41, i64 2
  %42 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx55, align 8
  %call56 = call %struct.rtx_def* @gen_x86_shld_1(%struct.rtx_def* %39, %struct.rtx_def* %40, %struct.rtx_def* %42)
  %call57 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call56)
  %arrayidx58 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %low, i32 0, i64 0
  %43 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx58, align 8
  %arrayidx59 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %low, i32 0, i64 0
  %44 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx59, align 8
  %45 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx60 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %45, i64 2
  %46 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx60, align 8
  %call61 = call %struct.rtx_def* @gen_ashlsi3(%struct.rtx_def* %43, %struct.rtx_def* %44, %struct.rtx_def* %46)
  %call62 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call61)
  %47 = load i32, i32* @ix86_arch, align 4
  %shl = shl i32 1, %47
  %and63 = and i32 104, %shl
  %tobool64 = icmp ne i32 %and63, 0
  br i1 %tobool64, label %land.lhs.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.50
  %48 = load i32, i32* @target_flags, align 4
  %and65 = and i32 %48, 327680
  %cmp66 = icmp ne i32 %and65, 0
  br i1 %cmp66, label %land.lhs.true, label %if.else.83

land.lhs.true:                                    ; preds = %lor.lhs.false, %if.end.50
  %49 = load i32, i32* @no_new_pseudos, align 4
  %tobool68 = icmp ne i32 %49, 0
  br i1 %tobool68, label %lor.lhs.false.69, label %if.then.71

lor.lhs.false.69:                                 ; preds = %land.lhs.true
  %50 = load %struct.rtx_def*, %struct.rtx_def** %scratch.addr, align 8
  %tobool70 = icmp ne %struct.rtx_def* %50, null
  br i1 %tobool70, label %if.then.71, label %if.else.83

if.then.71:                                       ; preds = %lor.lhs.false.69, %land.lhs.true
  %51 = load i32, i32* @no_new_pseudos, align 4
  %tobool72 = icmp ne i32 %51, 0
  br i1 %tobool72, label %if.else.75, label %if.then.73

if.then.73:                                       ; preds = %if.then.71
  %52 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call74 = call %struct.rtx_def* @force_reg(i32 4, %struct.rtx_def* %52)
  store %struct.rtx_def* %call74, %struct.rtx_def** %scratch.addr, align 8
  br label %if.end.77

if.else.75:                                       ; preds = %if.then.71
  %53 = load %struct.rtx_def*, %struct.rtx_def** %scratch.addr, align 8
  %54 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call76 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %53, %struct.rtx_def* %54)
  br label %if.end.77

if.end.77:                                        ; preds = %if.else.75, %if.then.73
  %arrayidx78 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %high, i32 0, i64 0
  %55 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx78, align 8
  %arrayidx79 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %low, i32 0, i64 0
  %56 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx79, align 8
  %57 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx80 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %57, i64 2
  %58 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx80, align 8
  %59 = load %struct.rtx_def*, %struct.rtx_def** %scratch.addr, align 8
  %call81 = call %struct.rtx_def* @gen_x86_shift_adj_1(%struct.rtx_def* %55, %struct.rtx_def* %56, %struct.rtx_def* %58, %struct.rtx_def* %59)
  %call82 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call81)
  br label %if.end.89

if.else.83:                                       ; preds = %lor.lhs.false.69, %lor.lhs.false
  %arrayidx84 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %high, i32 0, i64 0
  %60 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx84, align 8
  %arrayidx85 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %low, i32 0, i64 0
  %61 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx85, align 8
  %62 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx86 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %62, i64 2
  %63 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx86, align 8
  %call87 = call %struct.rtx_def* @gen_x86_shift_adj_2(%struct.rtx_def* %60, %struct.rtx_def* %61, %struct.rtx_def* %63)
  %call88 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call87)
  br label %if.end.89

if.end.89:                                        ; preds = %if.else.83, %if.end.77
  br label %if.end.90

if.end.90:                                        ; preds = %if.end.89, %if.end.40
  ret void
}

declare %struct.rtx_def* @gen_ashlsi3(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #0

declare %struct.rtx_def* @gen_x86_shld_1(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #0

declare %struct.rtx_def* @gen_x86_shift_adj_1(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #0

declare %struct.rtx_def* @gen_x86_shift_adj_2(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #0

; Function Attrs: nounwind uwtable
define void @ix86_split_ashrdi(%struct.rtx_def** %operands, %struct.rtx_def* %scratch) #1 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %scratch.addr = alloca %struct.rtx_def*, align 8
  %low = alloca [2 x %struct.rtx_def*], align 16
  %high = alloca [2 x %struct.rtx_def*], align 16
  %count = alloca i32, align 4
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* %scratch, %struct.rtx_def** %scratch.addr, align 8
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 2
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load = load i32, i32* %2, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 54
  br i1 %cmp, label %if.then, label %if.else.56

if.then:                                          ; preds = %entry
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arraydecay = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %low, i32 0, i32 0
  %arraydecay1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %high, i32 0, i32 0
  call void @split_di(%struct.rtx_def** %3, i32 2, %struct.rtx_def** %arraydecay, %struct.rtx_def** %arraydecay1)
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 2
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx3 to i64*
  %6 = load i64, i64* %rtwint, align 8
  %and = and i64 %6, 63
  %conv = trunc i64 %and to i32
  store i32 %conv, i32* %count, align 4
  %7 = load i32, i32* %count, align 4
  %cmp4 = icmp sge i32 %7, 32
  br i1 %cmp4, label %if.then.6, label %if.else.33

if.then.6:                                        ; preds = %if.then
  %arrayidx7 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %low, i32 0, i64 0
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx7, align 8
  %arrayidx8 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %high, i32 0, i64 1
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx8, align 8
  %call = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %8, %struct.rtx_def* %9)
  %10 = load i32, i32* @reload_completed, align 4
  %tobool = icmp ne i32 %10, 0
  br i1 %tobool, label %if.else, label %if.then.9

if.then.9:                                        ; preds = %if.then.6
  %arrayidx10 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %high, i32 0, i64 0
  %11 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx10, align 8
  %arrayidx11 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %low, i32 0, i64 0
  %12 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx11, align 8
  %call12 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 31)
  %call13 = call %struct.rtx_def* @gen_ashrsi3(%struct.rtx_def* %11, %struct.rtx_def* %12, %struct.rtx_def* %call12)
  %call14 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call13)
  br label %if.end

if.else:                                          ; preds = %if.then.6
  %arrayidx15 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %high, i32 0, i64 0
  %13 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx15, align 8
  %arrayidx16 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %low, i32 0, i64 0
  %14 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx16, align 8
  %call17 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %13, %struct.rtx_def* %14)
  %arrayidx18 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %high, i32 0, i64 0
  %15 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx18, align 8
  %arrayidx19 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %high, i32 0, i64 0
  %16 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx19, align 8
  %call20 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 31)
  %call21 = call %struct.rtx_def* @gen_ashrsi3(%struct.rtx_def* %15, %struct.rtx_def* %16, %struct.rtx_def* %call20)
  %call22 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call21)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.9
  %17 = load i32, i32* %count, align 4
  %cmp23 = icmp sgt i32 %17, 32
  br i1 %cmp23, label %if.then.25, label %if.end.32

if.then.25:                                       ; preds = %if.end
  %arrayidx26 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %low, i32 0, i64 0
  %18 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx26, align 8
  %arrayidx27 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %low, i32 0, i64 0
  %19 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx27, align 8
  %20 = load i32, i32* %count, align 4
  %sub = sub nsw i32 %20, 32
  %conv28 = sext i32 %sub to i64
  %call29 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv28)
  %call30 = call %struct.rtx_def* @gen_ashrsi3(%struct.rtx_def* %18, %struct.rtx_def* %19, %struct.rtx_def* %call29)
  %call31 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call30)
  br label %if.end.32

if.end.32:                                        ; preds = %if.then.25, %if.end
  br label %if.end.55

if.else.33:                                       ; preds = %if.then
  %21 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx34 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %21, i64 0
  %22 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx34, align 8
  %23 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx35 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %23, i64 1
  %24 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx35, align 8
  %call36 = call i32 @rtx_equal_p(%struct.rtx_def* %22, %struct.rtx_def* %24)
  %tobool37 = icmp ne i32 %call36, 0
  br i1 %tobool37, label %if.end.42, label %if.then.38

if.then.38:                                       ; preds = %if.else.33
  %25 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx39 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %25, i64 0
  %26 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx39, align 8
  %27 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx40 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %27, i64 1
  %28 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx40, align 8
  %call41 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %26, %struct.rtx_def* %28)
  br label %if.end.42

if.end.42:                                        ; preds = %if.then.38, %if.else.33
  %arrayidx43 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %low, i32 0, i64 0
  %29 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx43, align 8
  %arrayidx44 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %high, i32 0, i64 0
  %30 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx44, align 8
  %31 = load i32, i32* %count, align 4
  %conv45 = sext i32 %31 to i64
  %call46 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv45)
  %call47 = call %struct.rtx_def* @gen_x86_shrd_1(%struct.rtx_def* %29, %struct.rtx_def* %30, %struct.rtx_def* %call46)
  %call48 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call47)
  %arrayidx49 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %high, i32 0, i64 0
  %32 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx49, align 8
  %arrayidx50 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %high, i32 0, i64 0
  %33 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx50, align 8
  %34 = load i32, i32* %count, align 4
  %conv51 = sext i32 %34 to i64
  %call52 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv51)
  %call53 = call %struct.rtx_def* @gen_ashrsi3(%struct.rtx_def* %32, %struct.rtx_def* %33, %struct.rtx_def* %call52)
  %call54 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call53)
  br label %if.end.55

if.end.55:                                        ; preds = %if.end.42, %if.end.32
  br label %if.end.108

if.else.56:                                       ; preds = %entry
  %35 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx57 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %35, i64 0
  %36 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx57, align 8
  %37 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx58 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %37, i64 1
  %38 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx58, align 8
  %call59 = call i32 @rtx_equal_p(%struct.rtx_def* %36, %struct.rtx_def* %38)
  %tobool60 = icmp ne i32 %call59, 0
  br i1 %tobool60, label %if.end.65, label %if.then.61

if.then.61:                                       ; preds = %if.else.56
  %39 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx62 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %39, i64 0
  %40 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx62, align 8
  %41 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx63 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %41, i64 1
  %42 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx63, align 8
  %call64 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %40, %struct.rtx_def* %42)
  br label %if.end.65

if.end.65:                                        ; preds = %if.then.61, %if.else.56
  %43 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arraydecay66 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %low, i32 0, i32 0
  %arraydecay67 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %high, i32 0, i32 0
  call void @split_di(%struct.rtx_def** %43, i32 1, %struct.rtx_def** %arraydecay66, %struct.rtx_def** %arraydecay67)
  %arrayidx68 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %low, i32 0, i64 0
  %44 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx68, align 8
  %arrayidx69 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %high, i32 0, i64 0
  %45 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx69, align 8
  %46 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx70 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %46, i64 2
  %47 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx70, align 8
  %call71 = call %struct.rtx_def* @gen_x86_shrd_1(%struct.rtx_def* %44, %struct.rtx_def* %45, %struct.rtx_def* %47)
  %call72 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call71)
  %arrayidx73 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %high, i32 0, i64 0
  %48 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx73, align 8
  %arrayidx74 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %high, i32 0, i64 0
  %49 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx74, align 8
  %50 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx75 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %50, i64 2
  %51 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx75, align 8
  %call76 = call %struct.rtx_def* @gen_ashrsi3(%struct.rtx_def* %48, %struct.rtx_def* %49, %struct.rtx_def* %51)
  %call77 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call76)
  %52 = load i32, i32* @ix86_arch, align 4
  %shl = shl i32 1, %52
  %and78 = and i32 104, %shl
  %tobool79 = icmp ne i32 %and78, 0
  br i1 %tobool79, label %land.lhs.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.65
  %53 = load i32, i32* @target_flags, align 4
  %and80 = and i32 %53, 327680
  %cmp81 = icmp ne i32 %and80, 0
  br i1 %cmp81, label %land.lhs.true, label %if.else.101

land.lhs.true:                                    ; preds = %lor.lhs.false, %if.end.65
  %54 = load i32, i32* @no_new_pseudos, align 4
  %tobool83 = icmp ne i32 %54, 0
  br i1 %tobool83, label %lor.lhs.false.84, label %if.then.86

lor.lhs.false.84:                                 ; preds = %land.lhs.true
  %55 = load %struct.rtx_def*, %struct.rtx_def** %scratch.addr, align 8
  %tobool85 = icmp ne %struct.rtx_def* %55, null
  br i1 %tobool85, label %if.then.86, label %if.else.101

if.then.86:                                       ; preds = %lor.lhs.false.84, %land.lhs.true
  %56 = load i32, i32* @no_new_pseudos, align 4
  %tobool87 = icmp ne i32 %56, 0
  br i1 %tobool87, label %if.end.90, label %if.then.88

if.then.88:                                       ; preds = %if.then.86
  %call89 = call %struct.rtx_def* @gen_reg_rtx(i32 4)
  store %struct.rtx_def* %call89, %struct.rtx_def** %scratch.addr, align 8
  br label %if.end.90

if.end.90:                                        ; preds = %if.then.88, %if.then.86
  %57 = load %struct.rtx_def*, %struct.rtx_def** %scratch.addr, align 8
  %arrayidx91 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %high, i32 0, i64 0
  %58 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx91, align 8
  %call92 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %57, %struct.rtx_def* %58)
  %59 = load %struct.rtx_def*, %struct.rtx_def** %scratch.addr, align 8
  %60 = load %struct.rtx_def*, %struct.rtx_def** %scratch.addr, align 8
  %call93 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 31)
  %call94 = call %struct.rtx_def* @gen_ashrsi3(%struct.rtx_def* %59, %struct.rtx_def* %60, %struct.rtx_def* %call93)
  %call95 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call94)
  %arrayidx96 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %low, i32 0, i64 0
  %61 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx96, align 8
  %arrayidx97 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %high, i32 0, i64 0
  %62 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx97, align 8
  %63 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx98 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %63, i64 2
  %64 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx98, align 8
  %65 = load %struct.rtx_def*, %struct.rtx_def** %scratch.addr, align 8
  %call99 = call %struct.rtx_def* @gen_x86_shift_adj_1(%struct.rtx_def* %61, %struct.rtx_def* %62, %struct.rtx_def* %64, %struct.rtx_def* %65)
  %call100 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call99)
  br label %if.end.107

if.else.101:                                      ; preds = %lor.lhs.false.84, %lor.lhs.false
  %arrayidx102 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %low, i32 0, i64 0
  %66 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx102, align 8
  %arrayidx103 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %high, i32 0, i64 0
  %67 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx103, align 8
  %68 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx104 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %68, i64 2
  %69 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx104, align 8
  %call105 = call %struct.rtx_def* @gen_x86_shift_adj_3(%struct.rtx_def* %66, %struct.rtx_def* %67, %struct.rtx_def* %69)
  %call106 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call105)
  br label %if.end.107

if.end.107:                                       ; preds = %if.else.101, %if.end.90
  br label %if.end.108

if.end.108:                                       ; preds = %if.end.107, %if.end.55
  ret void
}

declare %struct.rtx_def* @gen_ashrsi3(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #0

declare %struct.rtx_def* @gen_x86_shrd_1(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #0

declare %struct.rtx_def* @gen_x86_shift_adj_3(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #0

; Function Attrs: nounwind uwtable
define void @ix86_split_lshrdi(%struct.rtx_def** %operands, %struct.rtx_def* %scratch) #1 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %scratch.addr = alloca %struct.rtx_def*, align 8
  %low = alloca [2 x %struct.rtx_def*], align 16
  %high = alloca [2 x %struct.rtx_def*], align 16
  %count = alloca i32, align 4
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* %scratch, %struct.rtx_def** %scratch.addr, align 8
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 2
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load = load i32, i32* %2, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 54
  br i1 %cmp, label %if.then, label %if.else.41

if.then:                                          ; preds = %entry
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arraydecay = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %low, i32 0, i32 0
  %arraydecay1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %high, i32 0, i32 0
  call void @split_di(%struct.rtx_def** %3, i32 2, %struct.rtx_def** %arraydecay, %struct.rtx_def** %arraydecay1)
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 2
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx3 to i64*
  %6 = load i64, i64* %rtwint, align 8
  %and = and i64 %6, 63
  %conv = trunc i64 %and to i32
  store i32 %conv, i32* %count, align 4
  %7 = load i32, i32* %count, align 4
  %cmp4 = icmp sge i32 %7, 32
  br i1 %cmp4, label %if.then.6, label %if.else

if.then.6:                                        ; preds = %if.then
  %arrayidx7 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %low, i32 0, i64 0
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx7, align 8
  %arrayidx8 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %high, i32 0, i64 1
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx8, align 8
  %call = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %8, %struct.rtx_def* %9)
  %arrayidx9 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %high, i32 0, i64 0
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx9, align 8
  %11 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call10 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %10, %struct.rtx_def* %11)
  %12 = load i32, i32* %count, align 4
  %cmp11 = icmp sgt i32 %12, 32
  br i1 %cmp11, label %if.then.13, label %if.end

if.then.13:                                       ; preds = %if.then.6
  %arrayidx14 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %low, i32 0, i64 0
  %13 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx14, align 8
  %arrayidx15 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %low, i32 0, i64 0
  %14 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx15, align 8
  %15 = load i32, i32* %count, align 4
  %sub = sub nsw i32 %15, 32
  %conv16 = sext i32 %sub to i64
  %call17 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv16)
  %call18 = call %struct.rtx_def* @gen_lshrsi3(%struct.rtx_def* %13, %struct.rtx_def* %14, %struct.rtx_def* %call17)
  %call19 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call18)
  br label %if.end

if.end:                                           ; preds = %if.then.13, %if.then.6
  br label %if.end.40

if.else:                                          ; preds = %if.then
  %16 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx20 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %16, i64 0
  %17 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx20, align 8
  %18 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx21 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %18, i64 1
  %19 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx21, align 8
  %call22 = call i32 @rtx_equal_p(%struct.rtx_def* %17, %struct.rtx_def* %19)
  %tobool = icmp ne i32 %call22, 0
  br i1 %tobool, label %if.end.27, label %if.then.23

if.then.23:                                       ; preds = %if.else
  %20 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx24 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %20, i64 0
  %21 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx24, align 8
  %22 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx25 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %22, i64 1
  %23 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx25, align 8
  %call26 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %21, %struct.rtx_def* %23)
  br label %if.end.27

if.end.27:                                        ; preds = %if.then.23, %if.else
  %arrayidx28 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %low, i32 0, i64 0
  %24 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx28, align 8
  %arrayidx29 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %high, i32 0, i64 0
  %25 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx29, align 8
  %26 = load i32, i32* %count, align 4
  %conv30 = sext i32 %26 to i64
  %call31 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv30)
  %call32 = call %struct.rtx_def* @gen_x86_shrd_1(%struct.rtx_def* %24, %struct.rtx_def* %25, %struct.rtx_def* %call31)
  %call33 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call32)
  %arrayidx34 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %high, i32 0, i64 0
  %27 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx34, align 8
  %arrayidx35 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %high, i32 0, i64 0
  %28 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx35, align 8
  %29 = load i32, i32* %count, align 4
  %conv36 = sext i32 %29 to i64
  %call37 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv36)
  %call38 = call %struct.rtx_def* @gen_lshrsi3(%struct.rtx_def* %27, %struct.rtx_def* %28, %struct.rtx_def* %call37)
  %call39 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call38)
  br label %if.end.40

if.end.40:                                        ; preds = %if.end.27, %if.end
  br label %if.end.90

if.else.41:                                       ; preds = %entry
  %30 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx42 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %30, i64 0
  %31 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx42, align 8
  %32 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx43 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %32, i64 1
  %33 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx43, align 8
  %call44 = call i32 @rtx_equal_p(%struct.rtx_def* %31, %struct.rtx_def* %33)
  %tobool45 = icmp ne i32 %call44, 0
  br i1 %tobool45, label %if.end.50, label %if.then.46

if.then.46:                                       ; preds = %if.else.41
  %34 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx47 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %34, i64 0
  %35 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx47, align 8
  %36 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx48 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %36, i64 1
  %37 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx48, align 8
  %call49 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %35, %struct.rtx_def* %37)
  br label %if.end.50

if.end.50:                                        ; preds = %if.then.46, %if.else.41
  %38 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arraydecay51 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %low, i32 0, i32 0
  %arraydecay52 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %high, i32 0, i32 0
  call void @split_di(%struct.rtx_def** %38, i32 1, %struct.rtx_def** %arraydecay51, %struct.rtx_def** %arraydecay52)
  %arrayidx53 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %low, i32 0, i64 0
  %39 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx53, align 8
  %arrayidx54 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %high, i32 0, i64 0
  %40 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx54, align 8
  %41 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx55 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %41, i64 2
  %42 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx55, align 8
  %call56 = call %struct.rtx_def* @gen_x86_shrd_1(%struct.rtx_def* %39, %struct.rtx_def* %40, %struct.rtx_def* %42)
  %call57 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call56)
  %arrayidx58 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %high, i32 0, i64 0
  %43 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx58, align 8
  %arrayidx59 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %high, i32 0, i64 0
  %44 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx59, align 8
  %45 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx60 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %45, i64 2
  %46 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx60, align 8
  %call61 = call %struct.rtx_def* @gen_lshrsi3(%struct.rtx_def* %43, %struct.rtx_def* %44, %struct.rtx_def* %46)
  %call62 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call61)
  %47 = load i32, i32* @ix86_arch, align 4
  %shl = shl i32 1, %47
  %and63 = and i32 104, %shl
  %tobool64 = icmp ne i32 %and63, 0
  br i1 %tobool64, label %land.lhs.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.50
  %48 = load i32, i32* @target_flags, align 4
  %and65 = and i32 %48, 327680
  %cmp66 = icmp ne i32 %and65, 0
  br i1 %cmp66, label %land.lhs.true, label %if.else.83

land.lhs.true:                                    ; preds = %lor.lhs.false, %if.end.50
  %49 = load i32, i32* @no_new_pseudos, align 4
  %tobool68 = icmp ne i32 %49, 0
  br i1 %tobool68, label %lor.lhs.false.69, label %if.then.71

lor.lhs.false.69:                                 ; preds = %land.lhs.true
  %50 = load %struct.rtx_def*, %struct.rtx_def** %scratch.addr, align 8
  %tobool70 = icmp ne %struct.rtx_def* %50, null
  br i1 %tobool70, label %if.then.71, label %if.else.83

if.then.71:                                       ; preds = %lor.lhs.false.69, %land.lhs.true
  %51 = load i32, i32* @no_new_pseudos, align 4
  %tobool72 = icmp ne i32 %51, 0
  br i1 %tobool72, label %if.else.75, label %if.then.73

if.then.73:                                       ; preds = %if.then.71
  %52 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call74 = call %struct.rtx_def* @force_reg(i32 4, %struct.rtx_def* %52)
  store %struct.rtx_def* %call74, %struct.rtx_def** %scratch.addr, align 8
  br label %if.end.77

if.else.75:                                       ; preds = %if.then.71
  %53 = load %struct.rtx_def*, %struct.rtx_def** %scratch.addr, align 8
  %54 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call76 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %53, %struct.rtx_def* %54)
  br label %if.end.77

if.end.77:                                        ; preds = %if.else.75, %if.then.73
  %arrayidx78 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %low, i32 0, i64 0
  %55 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx78, align 8
  %arrayidx79 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %high, i32 0, i64 0
  %56 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx79, align 8
  %57 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx80 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %57, i64 2
  %58 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx80, align 8
  %59 = load %struct.rtx_def*, %struct.rtx_def** %scratch.addr, align 8
  %call81 = call %struct.rtx_def* @gen_x86_shift_adj_1(%struct.rtx_def* %55, %struct.rtx_def* %56, %struct.rtx_def* %58, %struct.rtx_def* %59)
  %call82 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call81)
  br label %if.end.89

if.else.83:                                       ; preds = %lor.lhs.false.69, %lor.lhs.false
  %arrayidx84 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %low, i32 0, i64 0
  %60 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx84, align 8
  %arrayidx85 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %high, i32 0, i64 0
  %61 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx85, align 8
  %62 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx86 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %62, i64 2
  %63 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx86, align 8
  %call87 = call %struct.rtx_def* @gen_x86_shift_adj_2(%struct.rtx_def* %60, %struct.rtx_def* %61, %struct.rtx_def* %63)
  %call88 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call87)
  br label %if.end.89

if.end.89:                                        ; preds = %if.else.83, %if.end.77
  br label %if.end.90

if.end.90:                                        ; preds = %if.end.89, %if.end.40
  ret void
}

declare %struct.rtx_def* @gen_lshrsi3(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #0

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @ix86_zero_extend_to_Pmode(%struct.rtx_def* %exp) #1 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %exp.addr = alloca %struct.rtx_def*, align 8
  %r = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %exp, %struct.rtx_def** %exp.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %exp.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %cmp = icmp eq i32 %bf.clear, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i32, i32* @target_flags, align 4
  %and = and i32 %2, 33554432
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, i32 5, i32 4
  %3 = load %struct.rtx_def*, %struct.rtx_def** %exp.addr, align 8
  %call = call %struct.rtx_def* @force_reg(i32 %cond, %struct.rtx_def* %3)
  store %struct.rtx_def* %call, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %exp.addr, align 8
  %5 = bitcast %struct.rtx_def* %4 to i32*
  %bf.load1 = load i32, i32* %5, align 8
  %bf.lshr2 = lshr i32 %bf.load1, 16
  %bf.clear3 = and i32 %bf.lshr2, 255
  %6 = load i32, i32* @target_flags, align 4
  %and4 = and i32 %6, 33554432
  %tobool5 = icmp ne i32 %and4, 0
  %cond6 = select i1 %tobool5, i32 5, i32 4
  %cmp7 = icmp eq i32 %bf.clear3, %cond6
  br i1 %cmp7, label %if.then.8, label %if.end.13

if.then.8:                                        ; preds = %if.end
  %7 = load i32, i32* @target_flags, align 4
  %and9 = and i32 %7, 33554432
  %tobool10 = icmp ne i32 %and9, 0
  %cond11 = select i1 %tobool10, i32 5, i32 4
  %8 = load %struct.rtx_def*, %struct.rtx_def** %exp.addr, align 8
  %call12 = call %struct.rtx_def* @copy_to_mode_reg(i32 %cond11, %struct.rtx_def* %8)
  store %struct.rtx_def* %call12, %struct.rtx_def** %retval
  br label %return

if.end.13:                                        ; preds = %if.end
  %9 = load i32, i32* @target_flags, align 4
  %and14 = and i32 %9, 33554432
  %tobool15 = icmp ne i32 %and14, 0
  %cond16 = select i1 %tobool15, i32 5, i32 4
  %call17 = call %struct.rtx_def* @gen_reg_rtx(i32 %cond16)
  store %struct.rtx_def* %call17, %struct.rtx_def** %r, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %r, align 8
  %11 = load %struct.rtx_def*, %struct.rtx_def** %exp.addr, align 8
  %call18 = call %struct.rtx_def* @gen_zero_extendsidi2(%struct.rtx_def* %10, %struct.rtx_def* %11)
  %call19 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call18)
  %12 = load %struct.rtx_def*, %struct.rtx_def** %r, align 8
  store %struct.rtx_def* %12, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end.13, %if.then.8, %if.then
  %13 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %13
}

declare %struct.rtx_def* @gen_zero_extendsidi2(%struct.rtx_def*, %struct.rtx_def*) #0

; Function Attrs: nounwind uwtable
define i32 @ix86_expand_movstr(%struct.rtx_def* %dst, %struct.rtx_def* %src, %struct.rtx_def* %count_exp, %struct.rtx_def* %align_exp) #1 {
entry:
  %retval = alloca i32, align 4
  %dst.addr = alloca %struct.rtx_def*, align 8
  %src.addr = alloca %struct.rtx_def*, align 8
  %count_exp.addr = alloca %struct.rtx_def*, align 8
  %align_exp.addr = alloca %struct.rtx_def*, align 8
  %srcreg = alloca %struct.rtx_def*, align 8
  %destreg = alloca %struct.rtx_def*, align 8
  %countreg = alloca %struct.rtx_def*, align 8
  %counter_mode = alloca i32, align 4
  %align = alloca i64, align 8
  %count = alloca i64, align 8
  %insns = alloca %struct.rtx_def*, align 8
  %size = alloca i32, align 4
  %countreg2 = alloca %struct.rtx_def*, align 8
  %label = alloca %struct.rtx_def*, align 8
  %desired_alignment = alloca i32, align 4
  %label179 = alloca %struct.rtx_def*, align 8
  %label190 = alloca %struct.rtx_def*, align 8
  %label205 = alloca %struct.rtx_def*, align 8
  %label281 = alloca %struct.rtx_def*, align 8
  %label308 = alloca %struct.rtx_def*, align 8
  %label335 = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %dst, %struct.rtx_def** %dst.addr, align 8
  store %struct.rtx_def* %src, %struct.rtx_def** %src.addr, align 8
  store %struct.rtx_def* %count_exp, %struct.rtx_def** %count_exp.addr, align 8
  store %struct.rtx_def* %align_exp, %struct.rtx_def** %align_exp.addr, align 8
  store i64 0, i64* %align, align 8
  store i64 0, i64* %count, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %align_exp.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 54
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %align_exp.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx to i64*
  %3 = load i64, i64* %rtwint, align 8
  store i64 %3, i64* %align, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* @target_flags, align 4
  %and = and i32 %4, 512
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then.1, label %if.end.2

if.then.1:                                        ; preds = %if.end
  store i64 64, i64* %align, align 8
  br label %if.end.2

if.end.2:                                         ; preds = %if.then.1, %if.end
  %5 = load %struct.rtx_def*, %struct.rtx_def** %count_exp.addr, align 8
  %6 = bitcast %struct.rtx_def* %5 to i32*
  %bf.load3 = load i32, i32* %6, align 8
  %bf.clear4 = and i32 %bf.load3, 65535
  %cmp5 = icmp eq i32 %bf.clear4, 54
  br i1 %cmp5, label %if.then.6, label %if.end.10

if.then.6:                                        ; preds = %if.end.2
  %7 = load %struct.rtx_def*, %struct.rtx_def** %count_exp.addr, align 8
  %fld7 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1
  %arrayidx8 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld7, i32 0, i64 0
  %rtwint9 = bitcast %union.rtunion_def* %arrayidx8 to i64*
  %8 = load i64, i64* %rtwint9, align 8
  store i64 %8, i64* %count, align 8
  br label %if.end.10

if.end.10:                                        ; preds = %if.then.6, %if.end.2
  %9 = load i32, i32* @target_flags, align 4
  %and11 = and i32 %9, 33554432
  %tobool12 = icmp ne i32 %and11, 0
  br i1 %tobool12, label %lor.lhs.false, label %if.then.18

lor.lhs.false:                                    ; preds = %if.end.10
  %10 = load %struct.rtx_def*, %struct.rtx_def** %count_exp.addr, align 8
  %11 = bitcast %struct.rtx_def* %10 to i32*
  %bf.load13 = load i32, i32* %11, align 8
  %bf.lshr = lshr i32 %bf.load13, 16
  %bf.clear14 = and i32 %bf.lshr, 255
  %cmp15 = icmp eq i32 %bf.clear14, 4
  br i1 %cmp15, label %if.then.18, label %lor.lhs.false.16

lor.lhs.false.16:                                 ; preds = %lor.lhs.false
  %12 = load %struct.rtx_def*, %struct.rtx_def** %count_exp.addr, align 8
  %call = call i32 @x86_64_zero_extended_value(%struct.rtx_def* %12)
  %tobool17 = icmp ne i32 %call, 0
  br i1 %tobool17, label %if.then.18, label %if.else

if.then.18:                                       ; preds = %lor.lhs.false.16, %lor.lhs.false, %if.end.10
  store i32 4, i32* %counter_mode, align 4
  br label %if.end.19

if.else:                                          ; preds = %lor.lhs.false.16
  store i32 5, i32* %counter_mode, align 4
  br label %if.end.19

if.end.19:                                        ; preds = %if.else, %if.then.18
  %13 = load i32, i32* %counter_mode, align 4
  %cmp20 = icmp ne i32 %13, 4
  br i1 %cmp20, label %land.lhs.true, label %if.end.23

land.lhs.true:                                    ; preds = %if.end.19
  %14 = load i32, i32* %counter_mode, align 4
  %cmp21 = icmp ne i32 %14, 5
  br i1 %cmp21, label %if.then.22, label %if.end.23

if.then.22:                                       ; preds = %land.lhs.true
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 9142, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__FUNCTION__.ix86_expand_movstr, i32 0, i32 0)) #7
  unreachable

if.end.23:                                        ; preds = %land.lhs.true, %if.end.19
  %15 = load i32, i32* @target_flags, align 4
  %and24 = and i32 %15, 33554432
  %tobool25 = icmp ne i32 %and24, 0
  %cond = select i1 %tobool25, i32 5, i32 4
  %16 = load %struct.rtx_def*, %struct.rtx_def** %dst.addr, align 8
  %fld26 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1
  %arrayidx27 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld26, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx27 to %struct.rtx_def**
  %17 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %call28 = call %struct.rtx_def* @copy_to_mode_reg(i32 %cond, %struct.rtx_def* %17)
  store %struct.rtx_def* %call28, %struct.rtx_def** %destreg, align 8
  %18 = load i32, i32* @target_flags, align 4
  %and29 = and i32 %18, 33554432
  %tobool30 = icmp ne i32 %and29, 0
  %cond31 = select i1 %tobool30, i32 5, i32 4
  %19 = load %struct.rtx_def*, %struct.rtx_def** %src.addr, align 8
  %fld32 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1
  %arrayidx33 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld32, i32 0, i64 0
  %rtx34 = bitcast %union.rtunion_def* %arrayidx33 to %struct.rtx_def**
  %20 = load %struct.rtx_def*, %struct.rtx_def** %rtx34, align 8
  %call35 = call %struct.rtx_def* @copy_to_mode_reg(i32 %cond31, %struct.rtx_def* %20)
  store %struct.rtx_def* %call35, %struct.rtx_def** %srcreg, align 8
  %call36 = call %struct.rtx_def* @gen_cld()
  %call37 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call36)
  %21 = load i32, i32* @optimize, align 4
  %tobool38 = icmp ne i32 %21, 0
  br i1 %tobool38, label %lor.lhs.false.39, label %land.lhs.true.41

lor.lhs.false.39:                                 ; preds = %if.end.23
  %22 = load i32, i32* @optimize_size, align 4
  %tobool40 = icmp ne i32 %22, 0
  br i1 %tobool40, label %land.lhs.true.41, label %if.else.57

land.lhs.true.41:                                 ; preds = %lor.lhs.false.39, %if.end.23
  %23 = load i64, i64* %count, align 8
  %cmp42 = icmp eq i64 %23, 0
  br i1 %cmp42, label %if.then.46, label %lor.lhs.false.43

lor.lhs.false.43:                                 ; preds = %land.lhs.true.41
  %24 = load i64, i64* %count, align 8
  %and44 = and i64 %24, 3
  %tobool45 = icmp ne i64 %and44, 0
  br i1 %tobool45, label %if.then.46, label %if.else.57

if.then.46:                                       ; preds = %lor.lhs.false.43, %land.lhs.true.41
  %25 = load %struct.rtx_def*, %struct.rtx_def** %count_exp.addr, align 8
  %call47 = call %struct.rtx_def* @ix86_zero_extend_to_Pmode(%struct.rtx_def* %25)
  store %struct.rtx_def* %call47, %struct.rtx_def** %countreg, align 8
  %26 = load i32, i32* @target_flags, align 4
  %and48 = and i32 %26, 33554432
  %tobool49 = icmp ne i32 %and48, 0
  br i1 %tobool49, label %if.then.50, label %if.else.53

if.then.50:                                       ; preds = %if.then.46
  %27 = load %struct.rtx_def*, %struct.rtx_def** %destreg, align 8
  %28 = load %struct.rtx_def*, %struct.rtx_def** %srcreg, align 8
  %29 = load %struct.rtx_def*, %struct.rtx_def** %countreg, align 8
  %30 = load %struct.rtx_def*, %struct.rtx_def** %destreg, align 8
  %31 = load %struct.rtx_def*, %struct.rtx_def** %srcreg, align 8
  %32 = load %struct.rtx_def*, %struct.rtx_def** %countreg, align 8
  %call51 = call %struct.rtx_def* @gen_rep_movqi_rex64(%struct.rtx_def* %27, %struct.rtx_def* %28, %struct.rtx_def* %29, %struct.rtx_def* %30, %struct.rtx_def* %31, %struct.rtx_def* %32)
  %call52 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call51)
  br label %if.end.56

if.else.53:                                       ; preds = %if.then.46
  %33 = load %struct.rtx_def*, %struct.rtx_def** %destreg, align 8
  %34 = load %struct.rtx_def*, %struct.rtx_def** %srcreg, align 8
  %35 = load %struct.rtx_def*, %struct.rtx_def** %countreg, align 8
  %36 = load %struct.rtx_def*, %struct.rtx_def** %destreg, align 8
  %37 = load %struct.rtx_def*, %struct.rtx_def** %srcreg, align 8
  %38 = load %struct.rtx_def*, %struct.rtx_def** %countreg, align 8
  %call54 = call %struct.rtx_def* @gen_rep_movqi(%struct.rtx_def* %33, %struct.rtx_def* %34, %struct.rtx_def* %35, %struct.rtx_def* %36, %struct.rtx_def* %37, %struct.rtx_def* %38)
  %call55 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call54)
  br label %if.end.56

if.end.56:                                        ; preds = %if.else.53, %if.then.50
  br label %if.end.345

if.else.57:                                       ; preds = %lor.lhs.false.43, %lor.lhs.false.39
  %39 = load i64, i64* %count, align 8
  %cmp58 = icmp ne i64 %39, 0
  br i1 %cmp58, label %land.lhs.true.59, label %if.else.129

land.lhs.true.59:                                 ; preds = %if.else.57
  %40 = load i64, i64* %align, align 8
  %cmp60 = icmp sge i64 %40, 8
  br i1 %cmp60, label %if.then.72, label %lor.lhs.false.61

lor.lhs.false.61:                                 ; preds = %land.lhs.true.59
  %41 = load i32, i32* @ix86_cpu, align 4
  %cmp62 = icmp eq i32 %41, 3
  br i1 %cmp62, label %lor.lhs.false.68, label %land.lhs.true.63

land.lhs.true.63:                                 ; preds = %lor.lhs.false.61
  %42 = load i32, i32* @target_flags, align 4
  %and64 = and i32 %42, 33554432
  %tobool65 = icmp ne i32 %and64, 0
  br i1 %tobool65, label %lor.lhs.false.68, label %land.lhs.true.66

land.lhs.true.66:                                 ; preds = %land.lhs.true.63
  %43 = load i64, i64* %align, align 8
  %cmp67 = icmp sge i64 %43, 4
  br i1 %cmp67, label %if.then.72, label %lor.lhs.false.68

lor.lhs.false.68:                                 ; preds = %land.lhs.true.66, %land.lhs.true.63, %lor.lhs.false.61
  %44 = load i32, i32* @optimize_size, align 4
  %tobool69 = icmp ne i32 %44, 0
  br i1 %tobool69, label %if.then.72, label %lor.lhs.false.70

lor.lhs.false.70:                                 ; preds = %lor.lhs.false.68
  %45 = load i64, i64* %count, align 8
  %cmp71 = icmp ult i64 %45, 64
  br i1 %cmp71, label %if.then.72, label %if.else.129

if.then.72:                                       ; preds = %lor.lhs.false.70, %lor.lhs.false.68, %land.lhs.true.66, %land.lhs.true.59
  %46 = load i32, i32* @target_flags, align 4
  %and73 = and i32 %46, 33554432
  %tobool74 = icmp ne i32 %and73, 0
  br i1 %tobool74, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then.72
  %47 = load i32, i32* @optimize_size, align 4
  %tobool75 = icmp ne i32 %47, 0
  %lnot = xor i1 %tobool75, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then.72
  %48 = phi i1 [ false, %if.then.72 ], [ %lnot, %land.rhs ]
  %cond76 = select i1 %48, i32 8, i32 4
  store i32 %cond76, i32* %size, align 4
  %49 = load i64, i64* %count, align 8
  %50 = load i32, i32* %size, align 4
  %sub = sub nsw i32 %50, 1
  %neg = xor i32 %sub, -1
  %conv = sext i32 %neg to i64
  %and77 = and i64 %49, %conv
  %tobool78 = icmp ne i64 %and77, 0
  br i1 %tobool78, label %if.then.79, label %if.end.107

if.then.79:                                       ; preds = %land.end
  %51 = load i32, i32* %counter_mode, align 4
  %52 = load i64, i64* %count, align 8
  %53 = load i32, i32* %size, align 4
  %cmp80 = icmp eq i32 %53, 4
  %cond82 = select i1 %cmp80, i32 2, i32 3
  %sh_prom = zext i32 %cond82 to i64
  %shr = lshr i64 %52, %sh_prom
  %54 = load i32, i32* @target_flags, align 4
  %and83 = and i32 %54, 33554432
  %tobool84 = icmp ne i32 %and83, 0
  %cond85 = select i1 %tobool84, i32 -1, i32 1073741823
  %conv86 = sext i32 %cond85 to i64
  %and87 = and i64 %shr, %conv86
  %call88 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %and87)
  %call89 = call %struct.rtx_def* @copy_to_mode_reg(i32 %51, %struct.rtx_def* %call88)
  store %struct.rtx_def* %call89, %struct.rtx_def** %countreg, align 8
  %55 = load %struct.rtx_def*, %struct.rtx_def** %countreg, align 8
  %call90 = call %struct.rtx_def* @ix86_zero_extend_to_Pmode(%struct.rtx_def* %55)
  store %struct.rtx_def* %call90, %struct.rtx_def** %countreg, align 8
  %56 = load i32, i32* %size, align 4
  %cmp91 = icmp eq i32 %56, 4
  br i1 %cmp91, label %if.then.93, label %if.else.103

if.then.93:                                       ; preds = %if.then.79
  %57 = load i32, i32* @target_flags, align 4
  %and94 = and i32 %57, 33554432
  %tobool95 = icmp ne i32 %and94, 0
  br i1 %tobool95, label %if.then.96, label %if.else.99

if.then.96:                                       ; preds = %if.then.93
  %58 = load %struct.rtx_def*, %struct.rtx_def** %destreg, align 8
  %59 = load %struct.rtx_def*, %struct.rtx_def** %srcreg, align 8
  %60 = load %struct.rtx_def*, %struct.rtx_def** %countreg, align 8
  %61 = load %struct.rtx_def*, %struct.rtx_def** %destreg, align 8
  %62 = load %struct.rtx_def*, %struct.rtx_def** %srcreg, align 8
  %63 = load %struct.rtx_def*, %struct.rtx_def** %countreg, align 8
  %call97 = call %struct.rtx_def* @gen_rep_movsi_rex64(%struct.rtx_def* %58, %struct.rtx_def* %59, %struct.rtx_def* %60, %struct.rtx_def* %61, %struct.rtx_def* %62, %struct.rtx_def* %63)
  %call98 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call97)
  br label %if.end.102

if.else.99:                                       ; preds = %if.then.93
  %64 = load %struct.rtx_def*, %struct.rtx_def** %destreg, align 8
  %65 = load %struct.rtx_def*, %struct.rtx_def** %srcreg, align 8
  %66 = load %struct.rtx_def*, %struct.rtx_def** %countreg, align 8
  %67 = load %struct.rtx_def*, %struct.rtx_def** %destreg, align 8
  %68 = load %struct.rtx_def*, %struct.rtx_def** %srcreg, align 8
  %69 = load %struct.rtx_def*, %struct.rtx_def** %countreg, align 8
  %call100 = call %struct.rtx_def* @gen_rep_movsi(%struct.rtx_def* %64, %struct.rtx_def* %65, %struct.rtx_def* %66, %struct.rtx_def* %67, %struct.rtx_def* %68, %struct.rtx_def* %69)
  %call101 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call100)
  br label %if.end.102

if.end.102:                                       ; preds = %if.else.99, %if.then.96
  br label %if.end.106

if.else.103:                                      ; preds = %if.then.79
  %70 = load %struct.rtx_def*, %struct.rtx_def** %destreg, align 8
  %71 = load %struct.rtx_def*, %struct.rtx_def** %srcreg, align 8
  %72 = load %struct.rtx_def*, %struct.rtx_def** %countreg, align 8
  %73 = load %struct.rtx_def*, %struct.rtx_def** %destreg, align 8
  %74 = load %struct.rtx_def*, %struct.rtx_def** %srcreg, align 8
  %75 = load %struct.rtx_def*, %struct.rtx_def** %countreg, align 8
  %call104 = call %struct.rtx_def* @gen_rep_movdi_rex64(%struct.rtx_def* %70, %struct.rtx_def* %71, %struct.rtx_def* %72, %struct.rtx_def* %73, %struct.rtx_def* %74, %struct.rtx_def* %75)
  %call105 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call104)
  br label %if.end.106

if.end.106:                                       ; preds = %if.else.103, %if.end.102
  br label %if.end.107

if.end.107:                                       ; preds = %if.end.106, %land.end
  %76 = load i32, i32* %size, align 4
  %cmp108 = icmp eq i32 %76, 8
  br i1 %cmp108, label %land.lhs.true.110, label %if.end.116

land.lhs.true.110:                                ; preds = %if.end.107
  %77 = load i64, i64* %count, align 8
  %and111 = and i64 %77, 4
  %tobool112 = icmp ne i64 %and111, 0
  br i1 %tobool112, label %if.then.113, label %if.end.116

if.then.113:                                      ; preds = %land.lhs.true.110
  %78 = load %struct.rtx_def*, %struct.rtx_def** %destreg, align 8
  %79 = load %struct.rtx_def*, %struct.rtx_def** %srcreg, align 8
  %call114 = call %struct.rtx_def* @gen_strmovsi(%struct.rtx_def* %78, %struct.rtx_def* %79)
  %call115 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call114)
  br label %if.end.116

if.end.116:                                       ; preds = %if.then.113, %land.lhs.true.110, %if.end.107
  %80 = load i64, i64* %count, align 8
  %and117 = and i64 %80, 2
  %tobool118 = icmp ne i64 %and117, 0
  br i1 %tobool118, label %if.then.119, label %if.end.122

if.then.119:                                      ; preds = %if.end.116
  %81 = load %struct.rtx_def*, %struct.rtx_def** %destreg, align 8
  %82 = load %struct.rtx_def*, %struct.rtx_def** %srcreg, align 8
  %call120 = call %struct.rtx_def* @gen_strmovhi(%struct.rtx_def* %81, %struct.rtx_def* %82)
  %call121 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call120)
  br label %if.end.122

if.end.122:                                       ; preds = %if.then.119, %if.end.116
  %83 = load i64, i64* %count, align 8
  %and123 = and i64 %83, 1
  %tobool124 = icmp ne i64 %and123, 0
  br i1 %tobool124, label %if.then.125, label %if.end.128

if.then.125:                                      ; preds = %if.end.122
  %84 = load %struct.rtx_def*, %struct.rtx_def** %destreg, align 8
  %85 = load %struct.rtx_def*, %struct.rtx_def** %srcreg, align 8
  %call126 = call %struct.rtx_def* @gen_strmovqi(%struct.rtx_def* %84, %struct.rtx_def* %85)
  %call127 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call126)
  br label %if.end.128

if.end.128:                                       ; preds = %if.then.125, %if.end.122
  br label %if.end.344

if.else.129:                                      ; preds = %lor.lhs.false.70, %if.else.57
  store %struct.rtx_def* null, %struct.rtx_def** %label, align 8
  %86 = load i32, i32* @ix86_cpu, align 4
  %cmp130 = icmp eq i32 %86, 3
  br i1 %cmp130, label %land.lhs.true.132, label %cond.false

land.lhs.true.132:                                ; preds = %if.else.129
  %87 = load i64, i64* %count, align 8
  %cmp133 = icmp eq i64 %87, 0
  br i1 %cmp133, label %cond.true, label %lor.lhs.false.135

lor.lhs.false.135:                                ; preds = %land.lhs.true.132
  %88 = load i64, i64* %count, align 8
  %cmp136 = icmp uge i64 %88, 260
  br i1 %cmp136, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false.135, %land.lhs.true.132
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false.135, %if.else.129
  %89 = load i32, i32* @target_flags, align 4
  %and138 = and i32 %89, 33554432
  %tobool139 = icmp ne i32 %and138, 0
  %cond140 = select i1 %tobool139, i32 8, i32 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond141 = phi i32 [ 8, %cond.true ], [ %cond140, %cond.false ]
  store i32 %cond141, i32* %desired_alignment, align 4
  %90 = load i32, i32* @target_flags, align 4
  %and142 = and i32 %90, 1024
  %tobool143 = icmp ne i32 %and142, 0
  br i1 %tobool143, label %if.end.152, label %land.lhs.true.144

land.lhs.true.144:                                ; preds = %cond.end
  %91 = load i64, i64* %align, align 8
  %92 = load i32, i32* @target_flags, align 4
  %and145 = and i32 %92, 33554432
  %tobool146 = icmp ne i32 %and145, 0
  %cond147 = select i1 %tobool146, i32 8, i32 4
  %conv148 = sext i32 %cond147 to i64
  %cmp149 = icmp slt i64 %91, %conv148
  br i1 %cmp149, label %if.then.151, label %if.end.152

if.then.151:                                      ; preds = %land.lhs.true.144
  call void @end_sequence()
  store i32 0, i32* %retval
  br label %return

if.end.152:                                       ; preds = %land.lhs.true.144, %cond.end
  %93 = load i32, i32* @ix86_cpu, align 4
  %shl = shl i32 1, %93
  %and153 = and i32 65, %shl
  %tobool154 = icmp ne i32 %and153, 0
  br i1 %tobool154, label %if.then.155, label %if.end.158

if.then.155:                                      ; preds = %if.end.152
  %call156 = call %struct.rtx_def* @gen_cld()
  %call157 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call156)
  br label %if.end.158

if.end.158:                                       ; preds = %if.then.155, %if.end.152
  %94 = load i32, i32* @target_flags, align 4
  %and159 = and i32 %94, 33554432
  %tobool160 = icmp ne i32 %and159, 0
  %cond161 = select i1 %tobool160, i32 5, i32 4
  %call162 = call %struct.rtx_def* @gen_reg_rtx(i32 %cond161)
  store %struct.rtx_def* %call162, %struct.rtx_def** %countreg2, align 8
  %95 = load i32, i32* %counter_mode, align 4
  %96 = load %struct.rtx_def*, %struct.rtx_def** %count_exp.addr, align 8
  %call163 = call %struct.rtx_def* @copy_to_mode_reg(i32 %95, %struct.rtx_def* %96)
  store %struct.rtx_def* %call163, %struct.rtx_def** %countreg, align 8
  %97 = load i64, i64* %count, align 8
  %cmp164 = icmp eq i64 %97, 0
  br i1 %cmp164, label %land.lhs.true.166, label %if.end.175

land.lhs.true.166:                                ; preds = %if.end.158
  %98 = load i64, i64* %align, align 8
  %99 = load i32, i32* %desired_alignment, align 4
  %conv167 = sext i32 %99 to i64
  %cmp168 = icmp slt i64 %98, %conv167
  br i1 %cmp168, label %if.then.170, label %if.end.175

if.then.170:                                      ; preds = %land.lhs.true.166
  %call171 = call %struct.rtx_def* @gen_label_rtx()
  store %struct.rtx_def* %call171, %struct.rtx_def** %label, align 8
  %100 = load %struct.rtx_def*, %struct.rtx_def** %countreg, align 8
  %101 = load i32, i32* %desired_alignment, align 4
  %sub172 = sub nsw i32 %101, 1
  %conv173 = sext i32 %sub172 to i64
  %call174 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv173)
  %102 = load i32, i32* %counter_mode, align 4
  %103 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  call void @emit_cmp_and_jump_insns(%struct.rtx_def* %100, %struct.rtx_def* %call174, i32 110, %struct.rtx_def* null, i32 %102, i32 1, %struct.rtx_def* %103)
  br label %if.end.175

if.end.175:                                       ; preds = %if.then.170, %land.lhs.true.166, %if.end.158
  %104 = load i64, i64* %align, align 8
  %cmp176 = icmp sle i64 %104, 1
  br i1 %cmp176, label %if.then.178, label %if.end.186

if.then.178:                                      ; preds = %if.end.175
  %105 = load %struct.rtx_def*, %struct.rtx_def** %destreg, align 8
  %call180 = call %struct.rtx_def* @ix86_expand_aligntest(%struct.rtx_def* %105, i32 1)
  store %struct.rtx_def* %call180, %struct.rtx_def** %label179, align 8
  %106 = load %struct.rtx_def*, %struct.rtx_def** %destreg, align 8
  %107 = load %struct.rtx_def*, %struct.rtx_def** %srcreg, align 8
  %call181 = call %struct.rtx_def* @gen_strmovqi(%struct.rtx_def* %106, %struct.rtx_def* %107)
  %call182 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call181)
  %108 = load %struct.rtx_def*, %struct.rtx_def** %countreg, align 8
  call void @ix86_adjust_counter(%struct.rtx_def* %108, i64 1)
  %109 = load %struct.rtx_def*, %struct.rtx_def** %label179, align 8
  %call183 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %109)
  %110 = load %struct.rtx_def*, %struct.rtx_def** %label179, align 8
  %fld184 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %110, i32 0, i32 1
  %arrayidx185 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld184, i32 0, i64 3
  %rtint = bitcast %union.rtunion_def* %arrayidx185 to i32*
  store i32 1, i32* %rtint, align 4
  br label %if.end.186

if.end.186:                                       ; preds = %if.then.178, %if.end.175
  %111 = load i64, i64* %align, align 8
  %cmp187 = icmp sle i64 %111, 2
  br i1 %cmp187, label %if.then.189, label %if.end.198

if.then.189:                                      ; preds = %if.end.186
  %112 = load %struct.rtx_def*, %struct.rtx_def** %destreg, align 8
  %call191 = call %struct.rtx_def* @ix86_expand_aligntest(%struct.rtx_def* %112, i32 2)
  store %struct.rtx_def* %call191, %struct.rtx_def** %label190, align 8
  %113 = load %struct.rtx_def*, %struct.rtx_def** %destreg, align 8
  %114 = load %struct.rtx_def*, %struct.rtx_def** %srcreg, align 8
  %call192 = call %struct.rtx_def* @gen_strmovhi(%struct.rtx_def* %113, %struct.rtx_def* %114)
  %call193 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call192)
  %115 = load %struct.rtx_def*, %struct.rtx_def** %countreg, align 8
  call void @ix86_adjust_counter(%struct.rtx_def* %115, i64 2)
  %116 = load %struct.rtx_def*, %struct.rtx_def** %label190, align 8
  %call194 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %116)
  %117 = load %struct.rtx_def*, %struct.rtx_def** %label190, align 8
  %fld195 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %117, i32 0, i32 1
  %arrayidx196 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld195, i32 0, i64 3
  %rtint197 = bitcast %union.rtunion_def* %arrayidx196 to i32*
  store i32 1, i32* %rtint197, align 4
  br label %if.end.198

if.end.198:                                       ; preds = %if.then.189, %if.end.186
  %118 = load i64, i64* %align, align 8
  %cmp199 = icmp sle i64 %118, 4
  br i1 %cmp199, label %land.lhs.true.201, label %if.end.213

land.lhs.true.201:                                ; preds = %if.end.198
  %119 = load i32, i32* %desired_alignment, align 4
  %cmp202 = icmp sgt i32 %119, 4
  br i1 %cmp202, label %if.then.204, label %if.end.213

if.then.204:                                      ; preds = %land.lhs.true.201
  %120 = load %struct.rtx_def*, %struct.rtx_def** %destreg, align 8
  %call206 = call %struct.rtx_def* @ix86_expand_aligntest(%struct.rtx_def* %120, i32 4)
  store %struct.rtx_def* %call206, %struct.rtx_def** %label205, align 8
  %121 = load %struct.rtx_def*, %struct.rtx_def** %destreg, align 8
  %122 = load %struct.rtx_def*, %struct.rtx_def** %srcreg, align 8
  %call207 = call %struct.rtx_def* @gen_strmovsi(%struct.rtx_def* %121, %struct.rtx_def* %122)
  %call208 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call207)
  %123 = load %struct.rtx_def*, %struct.rtx_def** %countreg, align 8
  call void @ix86_adjust_counter(%struct.rtx_def* %123, i64 4)
  %124 = load %struct.rtx_def*, %struct.rtx_def** %label205, align 8
  %call209 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %124)
  %125 = load %struct.rtx_def*, %struct.rtx_def** %label205, align 8
  %fld210 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %125, i32 0, i32 1
  %arrayidx211 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld210, i32 0, i64 3
  %rtint212 = bitcast %union.rtunion_def* %arrayidx211 to i32*
  store i32 1, i32* %rtint212, align 4
  br label %if.end.213

if.end.213:                                       ; preds = %if.then.204, %land.lhs.true.201, %if.end.198
  %126 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  %tobool214 = icmp ne %struct.rtx_def* %126, null
  br i1 %tobool214, label %land.lhs.true.215, label %if.end.226

land.lhs.true.215:                                ; preds = %if.end.213
  %127 = load i32, i32* %desired_alignment, align 4
  %cmp216 = icmp sgt i32 %127, 4
  br i1 %cmp216, label %land.lhs.true.218, label %if.end.226

land.lhs.true.218:                                ; preds = %land.lhs.true.215
  %128 = load i32, i32* @target_flags, align 4
  %and219 = and i32 %128, 33554432
  %tobool220 = icmp ne i32 %and219, 0
  br i1 %tobool220, label %if.end.226, label %if.then.221

if.then.221:                                      ; preds = %land.lhs.true.218
  %129 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  %call222 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %129)
  %130 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  %fld223 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %130, i32 0, i32 1
  %arrayidx224 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld223, i32 0, i64 3
  %rtint225 = bitcast %union.rtunion_def* %arrayidx224 to i32*
  store i32 1, i32* %rtint225, align 4
  store %struct.rtx_def* null, %struct.rtx_def** %label, align 8
  br label %if.end.226

if.end.226:                                       ; preds = %if.then.221, %land.lhs.true.218, %land.lhs.true.215, %if.end.213
  %131 = load i32, i32* @ix86_cpu, align 4
  %shl227 = shl i32 1, %131
  %and228 = and i32 65, %shl227
  %tobool229 = icmp ne i32 %and228, 0
  br i1 %tobool229, label %if.end.233, label %if.then.230

if.then.230:                                      ; preds = %if.end.226
  %call231 = call %struct.rtx_def* @gen_cld()
  %call232 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call231)
  br label %if.end.233

if.end.233:                                       ; preds = %if.then.230, %if.end.226
  %132 = load i32, i32* @target_flags, align 4
  %and234 = and i32 %132, 33554432
  %tobool235 = icmp ne i32 %and234, 0
  br i1 %tobool235, label %if.then.236, label %if.else.243

if.then.236:                                      ; preds = %if.end.233
  %133 = load %struct.rtx_def*, %struct.rtx_def** %countreg2, align 8
  %134 = load %struct.rtx_def*, %struct.rtx_def** %countreg, align 8
  %call237 = call %struct.rtx_def* @ix86_zero_extend_to_Pmode(%struct.rtx_def* %134)
  %call238 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 3)
  %call239 = call %struct.rtx_def* @gen_lshrdi3(%struct.rtx_def* %133, %struct.rtx_def* %call237, %struct.rtx_def* %call238)
  %call240 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call239)
  %135 = load %struct.rtx_def*, %struct.rtx_def** %destreg, align 8
  %136 = load %struct.rtx_def*, %struct.rtx_def** %srcreg, align 8
  %137 = load %struct.rtx_def*, %struct.rtx_def** %countreg2, align 8
  %138 = load %struct.rtx_def*, %struct.rtx_def** %destreg, align 8
  %139 = load %struct.rtx_def*, %struct.rtx_def** %srcreg, align 8
  %140 = load %struct.rtx_def*, %struct.rtx_def** %countreg2, align 8
  %call241 = call %struct.rtx_def* @gen_rep_movdi_rex64(%struct.rtx_def* %135, %struct.rtx_def* %136, %struct.rtx_def* %137, %struct.rtx_def* %138, %struct.rtx_def* %139, %struct.rtx_def* %140)
  %call242 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call241)
  br label %if.end.249

if.else.243:                                      ; preds = %if.end.233
  %141 = load %struct.rtx_def*, %struct.rtx_def** %countreg2, align 8
  %142 = load %struct.rtx_def*, %struct.rtx_def** %countreg, align 8
  %call244 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 2)
  %call245 = call %struct.rtx_def* @gen_lshrsi3(%struct.rtx_def* %141, %struct.rtx_def* %142, %struct.rtx_def* %call244)
  %call246 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call245)
  %143 = load %struct.rtx_def*, %struct.rtx_def** %destreg, align 8
  %144 = load %struct.rtx_def*, %struct.rtx_def** %srcreg, align 8
  %145 = load %struct.rtx_def*, %struct.rtx_def** %countreg2, align 8
  %146 = load %struct.rtx_def*, %struct.rtx_def** %destreg, align 8
  %147 = load %struct.rtx_def*, %struct.rtx_def** %srcreg, align 8
  %148 = load %struct.rtx_def*, %struct.rtx_def** %countreg2, align 8
  %call247 = call %struct.rtx_def* @gen_rep_movsi(%struct.rtx_def* %143, %struct.rtx_def* %144, %struct.rtx_def* %145, %struct.rtx_def* %146, %struct.rtx_def* %147, %struct.rtx_def* %148)
  %call248 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call247)
  br label %if.end.249

if.end.249:                                       ; preds = %if.else.243, %if.then.236
  %149 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  %tobool250 = icmp ne %struct.rtx_def* %149, null
  br i1 %tobool250, label %if.then.251, label %if.end.256

if.then.251:                                      ; preds = %if.end.249
  %150 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  %call252 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %150)
  %151 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  %fld253 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %151, i32 0, i32 1
  %arrayidx254 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld253, i32 0, i64 3
  %rtint255 = bitcast %union.rtunion_def* %arrayidx254 to i32*
  store i32 1, i32* %rtint255, align 4
  br label %if.end.256

if.end.256:                                       ; preds = %if.then.251, %if.end.249
  %152 = load i32, i32* @target_flags, align 4
  %and257 = and i32 %152, 33554432
  %tobool258 = icmp ne i32 %and257, 0
  br i1 %tobool258, label %land.lhs.true.259, label %if.end.271

land.lhs.true.259:                                ; preds = %if.end.256
  %153 = load i64, i64* %align, align 8
  %cmp260 = icmp sgt i64 %153, 4
  br i1 %cmp260, label %land.lhs.true.262, label %if.end.271

land.lhs.true.262:                                ; preds = %land.lhs.true.259
  %154 = load i64, i64* %count, align 8
  %cmp263 = icmp ne i64 %154, 0
  br i1 %cmp263, label %land.lhs.true.265, label %if.end.271

land.lhs.true.265:                                ; preds = %land.lhs.true.262
  %155 = load i64, i64* %count, align 8
  %and266 = and i64 %155, 4
  %tobool267 = icmp ne i64 %and266, 0
  br i1 %tobool267, label %if.then.268, label %if.end.271

if.then.268:                                      ; preds = %land.lhs.true.265
  %156 = load %struct.rtx_def*, %struct.rtx_def** %destreg, align 8
  %157 = load %struct.rtx_def*, %struct.rtx_def** %srcreg, align 8
  %call269 = call %struct.rtx_def* @gen_strmovsi(%struct.rtx_def* %156, %struct.rtx_def* %157)
  %call270 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call269)
  br label %if.end.271

if.end.271:                                       ; preds = %if.then.268, %land.lhs.true.265, %land.lhs.true.262, %land.lhs.true.259, %if.end.256
  %158 = load i64, i64* %align, align 8
  %cmp272 = icmp sle i64 %158, 4
  br i1 %cmp272, label %land.lhs.true.277, label %lor.lhs.false.274

lor.lhs.false.274:                                ; preds = %if.end.271
  %159 = load i64, i64* %count, align 8
  %cmp275 = icmp eq i64 %159, 0
  br i1 %cmp275, label %land.lhs.true.277, label %if.end.289

land.lhs.true.277:                                ; preds = %lor.lhs.false.274, %if.end.271
  %160 = load i32, i32* @target_flags, align 4
  %and278 = and i32 %160, 33554432
  %tobool279 = icmp ne i32 %and278, 0
  br i1 %tobool279, label %if.then.280, label %if.end.289

if.then.280:                                      ; preds = %land.lhs.true.277
  %161 = load %struct.rtx_def*, %struct.rtx_def** %countreg, align 8
  %call282 = call %struct.rtx_def* @ix86_expand_aligntest(%struct.rtx_def* %161, i32 4)
  store %struct.rtx_def* %call282, %struct.rtx_def** %label281, align 8
  %162 = load %struct.rtx_def*, %struct.rtx_def** %destreg, align 8
  %163 = load %struct.rtx_def*, %struct.rtx_def** %srcreg, align 8
  %call283 = call %struct.rtx_def* @gen_strmovsi(%struct.rtx_def* %162, %struct.rtx_def* %163)
  %call284 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call283)
  %164 = load %struct.rtx_def*, %struct.rtx_def** %label281, align 8
  %call285 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %164)
  %165 = load %struct.rtx_def*, %struct.rtx_def** %label281, align 8
  %fld286 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %165, i32 0, i32 1
  %arrayidx287 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld286, i32 0, i64 3
  %rtint288 = bitcast %union.rtunion_def* %arrayidx287 to i32*
  store i32 1, i32* %rtint288, align 4
  br label %if.end.289

if.end.289:                                       ; preds = %if.then.280, %land.lhs.true.277, %lor.lhs.false.274
  %166 = load i64, i64* %align, align 8
  %cmp290 = icmp sgt i64 %166, 2
  br i1 %cmp290, label %land.lhs.true.292, label %if.end.301

land.lhs.true.292:                                ; preds = %if.end.289
  %167 = load i64, i64* %count, align 8
  %cmp293 = icmp ne i64 %167, 0
  br i1 %cmp293, label %land.lhs.true.295, label %if.end.301

land.lhs.true.295:                                ; preds = %land.lhs.true.292
  %168 = load i64, i64* %count, align 8
  %and296 = and i64 %168, 2
  %tobool297 = icmp ne i64 %and296, 0
  br i1 %tobool297, label %if.then.298, label %if.end.301

if.then.298:                                      ; preds = %land.lhs.true.295
  %169 = load %struct.rtx_def*, %struct.rtx_def** %destreg, align 8
  %170 = load %struct.rtx_def*, %struct.rtx_def** %srcreg, align 8
  %call299 = call %struct.rtx_def* @gen_strmovhi(%struct.rtx_def* %169, %struct.rtx_def* %170)
  %call300 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call299)
  br label %if.end.301

if.end.301:                                       ; preds = %if.then.298, %land.lhs.true.295, %land.lhs.true.292, %if.end.289
  %171 = load i64, i64* %align, align 8
  %cmp302 = icmp sle i64 %171, 2
  br i1 %cmp302, label %if.then.307, label %lor.lhs.false.304

lor.lhs.false.304:                                ; preds = %if.end.301
  %172 = load i64, i64* %count, align 8
  %cmp305 = icmp eq i64 %172, 0
  br i1 %cmp305, label %if.then.307, label %if.end.316

if.then.307:                                      ; preds = %lor.lhs.false.304, %if.end.301
  %173 = load %struct.rtx_def*, %struct.rtx_def** %countreg, align 8
  %call309 = call %struct.rtx_def* @ix86_expand_aligntest(%struct.rtx_def* %173, i32 2)
  store %struct.rtx_def* %call309, %struct.rtx_def** %label308, align 8
  %174 = load %struct.rtx_def*, %struct.rtx_def** %destreg, align 8
  %175 = load %struct.rtx_def*, %struct.rtx_def** %srcreg, align 8
  %call310 = call %struct.rtx_def* @gen_strmovhi(%struct.rtx_def* %174, %struct.rtx_def* %175)
  %call311 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call310)
  %176 = load %struct.rtx_def*, %struct.rtx_def** %label308, align 8
  %call312 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %176)
  %177 = load %struct.rtx_def*, %struct.rtx_def** %label308, align 8
  %fld313 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %177, i32 0, i32 1
  %arrayidx314 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld313, i32 0, i64 3
  %rtint315 = bitcast %union.rtunion_def* %arrayidx314 to i32*
  store i32 1, i32* %rtint315, align 4
  br label %if.end.316

if.end.316:                                       ; preds = %if.then.307, %lor.lhs.false.304
  %178 = load i64, i64* %align, align 8
  %cmp317 = icmp sgt i64 %178, 1
  br i1 %cmp317, label %land.lhs.true.319, label %if.end.328

land.lhs.true.319:                                ; preds = %if.end.316
  %179 = load i64, i64* %count, align 8
  %cmp320 = icmp ne i64 %179, 0
  br i1 %cmp320, label %land.lhs.true.322, label %if.end.328

land.lhs.true.322:                                ; preds = %land.lhs.true.319
  %180 = load i64, i64* %count, align 8
  %and323 = and i64 %180, 1
  %tobool324 = icmp ne i64 %and323, 0
  br i1 %tobool324, label %if.then.325, label %if.end.328

if.then.325:                                      ; preds = %land.lhs.true.322
  %181 = load %struct.rtx_def*, %struct.rtx_def** %destreg, align 8
  %182 = load %struct.rtx_def*, %struct.rtx_def** %srcreg, align 8
  %call326 = call %struct.rtx_def* @gen_strmovqi(%struct.rtx_def* %181, %struct.rtx_def* %182)
  %call327 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call326)
  br label %if.end.328

if.end.328:                                       ; preds = %if.then.325, %land.lhs.true.322, %land.lhs.true.319, %if.end.316
  %183 = load i64, i64* %align, align 8
  %cmp329 = icmp sle i64 %183, 1
  br i1 %cmp329, label %if.then.334, label %lor.lhs.false.331

lor.lhs.false.331:                                ; preds = %if.end.328
  %184 = load i64, i64* %count, align 8
  %cmp332 = icmp eq i64 %184, 0
  br i1 %cmp332, label %if.then.334, label %if.end.343

if.then.334:                                      ; preds = %lor.lhs.false.331, %if.end.328
  %185 = load %struct.rtx_def*, %struct.rtx_def** %countreg, align 8
  %call336 = call %struct.rtx_def* @ix86_expand_aligntest(%struct.rtx_def* %185, i32 1)
  store %struct.rtx_def* %call336, %struct.rtx_def** %label335, align 8
  %186 = load %struct.rtx_def*, %struct.rtx_def** %destreg, align 8
  %187 = load %struct.rtx_def*, %struct.rtx_def** %srcreg, align 8
  %call337 = call %struct.rtx_def* @gen_strmovqi(%struct.rtx_def* %186, %struct.rtx_def* %187)
  %call338 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call337)
  %188 = load %struct.rtx_def*, %struct.rtx_def** %label335, align 8
  %call339 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %188)
  %189 = load %struct.rtx_def*, %struct.rtx_def** %label335, align 8
  %fld340 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %189, i32 0, i32 1
  %arrayidx341 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld340, i32 0, i64 3
  %rtint342 = bitcast %union.rtunion_def* %arrayidx341 to i32*
  store i32 1, i32* %rtint342, align 4
  br label %if.end.343

if.end.343:                                       ; preds = %if.then.334, %lor.lhs.false.331
  br label %if.end.344

if.end.344:                                       ; preds = %if.end.343, %if.end.128
  br label %if.end.345

if.end.345:                                       ; preds = %if.end.344, %if.end.56
  %call346 = call %struct.rtx_def* @get_insns()
  store %struct.rtx_def* %call346, %struct.rtx_def** %insns, align 8
  call void @end_sequence()
  %190 = load %struct.rtx_def*, %struct.rtx_def** %insns, align 8
  %191 = load %struct.rtx_def*, %struct.rtx_def** %dst.addr, align 8
  %192 = load %struct.rtx_def*, %struct.rtx_def** %src.addr, align 8
  %193 = load %struct.rtx_def*, %struct.rtx_def** %destreg, align 8
  %194 = load %struct.rtx_def*, %struct.rtx_def** %srcreg, align 8
  call void @ix86_set_move_mem_attrs(%struct.rtx_def* %190, %struct.rtx_def* %191, %struct.rtx_def* %192, %struct.rtx_def* %193, %struct.rtx_def* %194)
  %195 = load %struct.rtx_def*, %struct.rtx_def** %insns, align 8
  %call347 = call %struct.rtx_def* @emit_insns(%struct.rtx_def* %195)
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.345, %if.then.151
  %196 = load i32, i32* %retval
  ret i32 %196
}

declare %struct.rtx_def* @gen_cld() #0

declare %struct.rtx_def* @gen_rep_movqi_rex64(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #0

declare %struct.rtx_def* @gen_rep_movqi(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #0

declare %struct.rtx_def* @gen_rep_movsi_rex64(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #0

declare %struct.rtx_def* @gen_rep_movsi(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #0

declare %struct.rtx_def* @gen_rep_movdi_rex64(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #0

declare %struct.rtx_def* @gen_strmovsi(%struct.rtx_def*, %struct.rtx_def*) #0

declare %struct.rtx_def* @gen_strmovhi(%struct.rtx_def*, %struct.rtx_def*) #0

declare %struct.rtx_def* @gen_strmovqi(%struct.rtx_def*, %struct.rtx_def*) #0

; Function Attrs: nounwind uwtable
define internal %struct.rtx_def* @ix86_expand_aligntest(%struct.rtx_def* %variable, i32 %value) #1 {
entry:
  %variable.addr = alloca %struct.rtx_def*, align 8
  %value.addr = alloca i32, align 4
  %label = alloca %struct.rtx_def*, align 8
  %tmpcount = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %variable, %struct.rtx_def** %variable.addr, align 8
  store i32 %value, i32* %value.addr, align 4
  %call = call %struct.rtx_def* @gen_label_rtx()
  store %struct.rtx_def* %call, %struct.rtx_def** %label, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %variable.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %call1 = call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear)
  store %struct.rtx_def* %call1, %struct.rtx_def** %tmpcount, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %variable.addr, align 8
  %3 = bitcast %struct.rtx_def* %2 to i32*
  %bf.load2 = load i32, i32* %3, align 8
  %bf.lshr3 = lshr i32 %bf.load2, 16
  %bf.clear4 = and i32 %bf.lshr3, 255
  %cmp = icmp eq i32 %bf.clear4, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %tmpcount, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %variable.addr, align 8
  %6 = load i32, i32* %value.addr, align 4
  %conv = sext i32 %6 to i64
  %call5 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv)
  %call6 = call %struct.rtx_def* @gen_anddi3(%struct.rtx_def* %4, %struct.rtx_def* %5, %struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call6)
  br label %if.end

if.else:                                          ; preds = %entry
  %7 = load %struct.rtx_def*, %struct.rtx_def** %tmpcount, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %variable.addr, align 8
  %9 = load i32, i32* %value.addr, align 4
  %conv8 = sext i32 %9 to i64
  %call9 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv8)
  %call10 = call %struct.rtx_def* @gen_andsi3(%struct.rtx_def* %7, %struct.rtx_def* %8, %struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call10)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %10 = load %struct.rtx_def*, %struct.rtx_def** %tmpcount, align 8
  %11 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %12 = load %struct.rtx_def*, %struct.rtx_def** %variable.addr, align 8
  %13 = bitcast %struct.rtx_def* %12 to i32*
  %bf.load12 = load i32, i32* %13, align 8
  %bf.lshr13 = lshr i32 %bf.load12, 16
  %bf.clear14 = and i32 %bf.lshr13, 255
  %14 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  call void @emit_cmp_and_jump_insns(%struct.rtx_def* %10, %struct.rtx_def* %11, i32 103, %struct.rtx_def* null, i32 %bf.clear14, i32 1, %struct.rtx_def* %14)
  %15 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  ret %struct.rtx_def* %15
}

; Function Attrs: nounwind uwtable
define internal void @ix86_adjust_counter(%struct.rtx_def* %countreg, i64 %value) #1 {
entry:
  %countreg.addr = alloca %struct.rtx_def*, align 8
  %value.addr = alloca i64, align 8
  store %struct.rtx_def* %countreg, %struct.rtx_def** %countreg.addr, align 8
  store i64 %value, i64* %value.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %countreg.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %cmp = icmp eq i32 %bf.clear, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %countreg.addr, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %countreg.addr, align 8
  %4 = load i64, i64* %value.addr, align 8
  %sub = sub nsw i64 0, %4
  %call = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %sub)
  %call1 = call %struct.rtx_def* @gen_adddi3(%struct.rtx_def* %2, %struct.rtx_def* %3, %struct.rtx_def* %call)
  %call2 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call1)
  br label %if.end

if.else:                                          ; preds = %entry
  %5 = load %struct.rtx_def*, %struct.rtx_def** %countreg.addr, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %countreg.addr, align 8
  %7 = load i64, i64* %value.addr, align 8
  %sub3 = sub nsw i64 0, %7
  %call4 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %sub3)
  %call5 = call %struct.rtx_def* @gen_addsi3(%struct.rtx_def* %5, %struct.rtx_def* %6, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call5)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

declare %struct.rtx_def* @gen_lshrdi3(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #0

declare %struct.rtx_def* @get_insns() #0

; Function Attrs: nounwind uwtable
define void @ix86_set_move_mem_attrs(%struct.rtx_def* %insns, %struct.rtx_def* %dstref, %struct.rtx_def* %srcref, %struct.rtx_def* %dstreg, %struct.rtx_def* %srcreg) #1 {
entry:
  %insns.addr = alloca %struct.rtx_def*, align 8
  %dstref.addr = alloca %struct.rtx_def*, align 8
  %srcref.addr = alloca %struct.rtx_def*, align 8
  %dstreg.addr = alloca %struct.rtx_def*, align 8
  %srcreg.addr = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insns, %struct.rtx_def** %insns.addr, align 8
  store %struct.rtx_def* %dstref, %struct.rtx_def** %dstref.addr, align 8
  store %struct.rtx_def* %srcref, %struct.rtx_def** %srcref.addr, align 8
  store %struct.rtx_def* %dstreg, %struct.rtx_def** %dstreg.addr, align 8
  store %struct.rtx_def* %srcreg, %struct.rtx_def** %srcreg.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insns.addr, align 8
  store %struct.rtx_def* %0, %struct.rtx_def** %insn, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %cmp = icmp ne %struct.rtx_def* %1, null
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %3 = bitcast %struct.rtx_def* %2 to i32*
  %bf.load = load i32, i32* %3, align 8
  %bf.clear = and i32 %bf.load, 65535
  %idxprom = sext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom
  %4 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %4 to i32
  %cmp1 = icmp eq i32 %conv, 105
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx3 to %struct.rtx_def**
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %dstref.addr, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %srcref.addr, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %dstreg.addr, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %srcreg.addr, align 8
  call void @ix86_set_move_mem_attrs_1(%struct.rtx_def* %6, %struct.rtx_def* %7, %struct.rtx_def* %8, %struct.rtx_def* %9, %struct.rtx_def* %10)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld4 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1
  %arrayidx5 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld4, i32 0, i64 2
  %rtx6 = bitcast %union.rtunion_def* %arrayidx5 to %struct.rtx_def**
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rtx6, align 8
  store %struct.rtx_def* %12, %struct.rtx_def** %insn, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare %struct.rtx_def* @emit_insns(%struct.rtx_def*) #0

; Function Attrs: nounwind uwtable
define i32 @ix86_expand_clrstr(%struct.rtx_def* %src, %struct.rtx_def* %count_exp, %struct.rtx_def* %align_exp) #1 {
entry:
  %retval = alloca i32, align 4
  %src.addr = alloca %struct.rtx_def*, align 8
  %count_exp.addr = alloca %struct.rtx_def*, align 8
  %align_exp.addr = alloca %struct.rtx_def*, align 8
  %destreg = alloca %struct.rtx_def*, align 8
  %zeroreg = alloca %struct.rtx_def*, align 8
  %countreg = alloca %struct.rtx_def*, align 8
  %counter_mode = alloca i32, align 4
  %align = alloca i64, align 8
  %count = alloca i64, align 8
  %size = alloca i32, align 4
  %countreg2 = alloca %struct.rtx_def*, align 8
  %label = alloca %struct.rtx_def*, align 8
  %desired_alignment = alloca i32, align 4
  %label178 = alloca %struct.rtx_def*, align 8
  %label190 = alloca %struct.rtx_def*, align 8
  %label206 = alloca %struct.rtx_def*, align 8
  %label290 = alloca %struct.rtx_def*, align 8
  %label319 = alloca %struct.rtx_def*, align 8
  %label348 = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %src, %struct.rtx_def** %src.addr, align 8
  store %struct.rtx_def* %count_exp, %struct.rtx_def** %count_exp.addr, align 8
  store %struct.rtx_def* %align_exp, %struct.rtx_def** %align_exp.addr, align 8
  store i64 0, i64* %align, align 8
  store i64 0, i64* %count, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %align_exp.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 54
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %align_exp.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx to i64*
  %3 = load i64, i64* %rtwint, align 8
  store i64 %3, i64* %align, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* @target_flags, align 4
  %and = and i32 %4, 512
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then.1, label %if.end.2

if.then.1:                                        ; preds = %if.end
  store i64 32, i64* %align, align 8
  br label %if.end.2

if.end.2:                                         ; preds = %if.then.1, %if.end
  %5 = load %struct.rtx_def*, %struct.rtx_def** %count_exp.addr, align 8
  %6 = bitcast %struct.rtx_def* %5 to i32*
  %bf.load3 = load i32, i32* %6, align 8
  %bf.clear4 = and i32 %bf.load3, 65535
  %cmp5 = icmp eq i32 %bf.clear4, 54
  br i1 %cmp5, label %if.then.6, label %if.end.10

if.then.6:                                        ; preds = %if.end.2
  %7 = load %struct.rtx_def*, %struct.rtx_def** %count_exp.addr, align 8
  %fld7 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1
  %arrayidx8 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld7, i32 0, i64 0
  %rtwint9 = bitcast %union.rtunion_def* %arrayidx8 to i64*
  %8 = load i64, i64* %rtwint9, align 8
  store i64 %8, i64* %count, align 8
  br label %if.end.10

if.end.10:                                        ; preds = %if.then.6, %if.end.2
  %9 = load i32, i32* @target_flags, align 4
  %and11 = and i32 %9, 33554432
  %tobool12 = icmp ne i32 %and11, 0
  br i1 %tobool12, label %lor.lhs.false, label %if.then.18

lor.lhs.false:                                    ; preds = %if.end.10
  %10 = load %struct.rtx_def*, %struct.rtx_def** %count_exp.addr, align 8
  %11 = bitcast %struct.rtx_def* %10 to i32*
  %bf.load13 = load i32, i32* %11, align 8
  %bf.lshr = lshr i32 %bf.load13, 16
  %bf.clear14 = and i32 %bf.lshr, 255
  %cmp15 = icmp eq i32 %bf.clear14, 4
  br i1 %cmp15, label %if.then.18, label %lor.lhs.false.16

lor.lhs.false.16:                                 ; preds = %lor.lhs.false
  %12 = load %struct.rtx_def*, %struct.rtx_def** %count_exp.addr, align 8
  %call = call i32 @x86_64_zero_extended_value(%struct.rtx_def* %12)
  %tobool17 = icmp ne i32 %call, 0
  br i1 %tobool17, label %if.then.18, label %if.else

if.then.18:                                       ; preds = %lor.lhs.false.16, %lor.lhs.false, %if.end.10
  store i32 4, i32* %counter_mode, align 4
  br label %if.end.19

if.else:                                          ; preds = %lor.lhs.false.16
  store i32 5, i32* %counter_mode, align 4
  br label %if.end.19

if.end.19:                                        ; preds = %if.else, %if.then.18
  %13 = load i32, i32* @target_flags, align 4
  %and20 = and i32 %13, 33554432
  %tobool21 = icmp ne i32 %and20, 0
  %cond = select i1 %tobool21, i32 5, i32 4
  %14 = load %struct.rtx_def*, %struct.rtx_def** %src.addr, align 8
  %fld22 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1
  %arrayidx23 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld22, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx23 to %struct.rtx_def**
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %call24 = call %struct.rtx_def* @copy_to_mode_reg(i32 %cond, %struct.rtx_def* %15)
  store %struct.rtx_def* %call24, %struct.rtx_def** %destreg, align 8
  %call25 = call %struct.rtx_def* @gen_cld()
  %call26 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call25)
  %16 = load i32, i32* @optimize, align 4
  %tobool27 = icmp ne i32 %16, 0
  br i1 %tobool27, label %lor.lhs.false.28, label %land.lhs.true

lor.lhs.false.28:                                 ; preds = %if.end.19
  %17 = load i32, i32* @optimize_size, align 4
  %tobool29 = icmp ne i32 %17, 0
  br i1 %tobool29, label %land.lhs.true, label %if.else.46

land.lhs.true:                                    ; preds = %lor.lhs.false.28, %if.end.19
  %18 = load i64, i64* %count, align 8
  %cmp30 = icmp eq i64 %18, 0
  br i1 %cmp30, label %if.then.34, label %lor.lhs.false.31

lor.lhs.false.31:                                 ; preds = %land.lhs.true
  %19 = load i64, i64* %count, align 8
  %and32 = and i64 %19, 3
  %tobool33 = icmp ne i64 %and32, 0
  br i1 %tobool33, label %if.then.34, label %if.else.46

if.then.34:                                       ; preds = %lor.lhs.false.31, %land.lhs.true
  %20 = load %struct.rtx_def*, %struct.rtx_def** %count_exp.addr, align 8
  %call35 = call %struct.rtx_def* @ix86_zero_extend_to_Pmode(%struct.rtx_def* %20)
  store %struct.rtx_def* %call35, %struct.rtx_def** %countreg, align 8
  %21 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call36 = call %struct.rtx_def* @copy_to_mode_reg(i32 2, %struct.rtx_def* %21)
  store %struct.rtx_def* %call36, %struct.rtx_def** %zeroreg, align 8
  %22 = load i32, i32* @target_flags, align 4
  %and37 = and i32 %22, 33554432
  %tobool38 = icmp ne i32 %and37, 0
  br i1 %tobool38, label %if.then.39, label %if.else.42

if.then.39:                                       ; preds = %if.then.34
  %23 = load %struct.rtx_def*, %struct.rtx_def** %destreg, align 8
  %24 = load %struct.rtx_def*, %struct.rtx_def** %countreg, align 8
  %25 = load %struct.rtx_def*, %struct.rtx_def** %zeroreg, align 8
  %26 = load %struct.rtx_def*, %struct.rtx_def** %destreg, align 8
  %27 = load %struct.rtx_def*, %struct.rtx_def** %countreg, align 8
  %call40 = call %struct.rtx_def* @gen_rep_stosqi_rex64(%struct.rtx_def* %23, %struct.rtx_def* %24, %struct.rtx_def* %25, %struct.rtx_def* %26, %struct.rtx_def* %27)
  %call41 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call40)
  br label %if.end.45

if.else.42:                                       ; preds = %if.then.34
  %28 = load %struct.rtx_def*, %struct.rtx_def** %destreg, align 8
  %29 = load %struct.rtx_def*, %struct.rtx_def** %countreg, align 8
  %30 = load %struct.rtx_def*, %struct.rtx_def** %zeroreg, align 8
  %31 = load %struct.rtx_def*, %struct.rtx_def** %destreg, align 8
  %32 = load %struct.rtx_def*, %struct.rtx_def** %countreg, align 8
  %call43 = call %struct.rtx_def* @gen_rep_stosqi(%struct.rtx_def* %28, %struct.rtx_def* %29, %struct.rtx_def* %30, %struct.rtx_def* %31, %struct.rtx_def* %32)
  %call44 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call43)
  br label %if.end.45

if.end.45:                                        ; preds = %if.else.42, %if.then.39
  br label %if.end.359

if.else.46:                                       ; preds = %lor.lhs.false.31, %lor.lhs.false.28
  %33 = load i64, i64* %count, align 8
  %cmp47 = icmp ne i64 %33, 0
  br i1 %cmp47, label %land.lhs.true.48, label %if.else.124

land.lhs.true.48:                                 ; preds = %if.else.46
  %34 = load i64, i64* %align, align 8
  %cmp49 = icmp sge i64 %34, 8
  br i1 %cmp49, label %if.then.61, label %lor.lhs.false.50

lor.lhs.false.50:                                 ; preds = %land.lhs.true.48
  %35 = load i32, i32* @ix86_cpu, align 4
  %cmp51 = icmp eq i32 %35, 3
  br i1 %cmp51, label %lor.lhs.false.57, label %land.lhs.true.52

land.lhs.true.52:                                 ; preds = %lor.lhs.false.50
  %36 = load i32, i32* @target_flags, align 4
  %and53 = and i32 %36, 33554432
  %tobool54 = icmp ne i32 %and53, 0
  br i1 %tobool54, label %lor.lhs.false.57, label %land.lhs.true.55

land.lhs.true.55:                                 ; preds = %land.lhs.true.52
  %37 = load i64, i64* %align, align 8
  %cmp56 = icmp sge i64 %37, 4
  br i1 %cmp56, label %if.then.61, label %lor.lhs.false.57

lor.lhs.false.57:                                 ; preds = %land.lhs.true.55, %land.lhs.true.52, %lor.lhs.false.50
  %38 = load i32, i32* @optimize_size, align 4
  %tobool58 = icmp ne i32 %38, 0
  br i1 %tobool58, label %if.then.61, label %lor.lhs.false.59

lor.lhs.false.59:                                 ; preds = %lor.lhs.false.57
  %39 = load i64, i64* %count, align 8
  %cmp60 = icmp ult i64 %39, 64
  br i1 %cmp60, label %if.then.61, label %if.else.124

if.then.61:                                       ; preds = %lor.lhs.false.59, %lor.lhs.false.57, %land.lhs.true.55, %land.lhs.true.48
  %40 = load i32, i32* @target_flags, align 4
  %and62 = and i32 %40, 33554432
  %tobool63 = icmp ne i32 %and62, 0
  br i1 %tobool63, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then.61
  %41 = load i32, i32* @optimize_size, align 4
  %tobool64 = icmp ne i32 %41, 0
  %lnot = xor i1 %tobool64, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then.61
  %42 = phi i1 [ false, %if.then.61 ], [ %lnot, %land.rhs ]
  %cond65 = select i1 %42, i32 8, i32 4
  store i32 %cond65, i32* %size, align 4
  %43 = load i32, i32* %size, align 4
  %cmp66 = icmp eq i32 %43, 4
  %cond67 = select i1 %cmp66, i32 4, i32 5
  %44 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call68 = call %struct.rtx_def* @copy_to_mode_reg(i32 %cond67, %struct.rtx_def* %44)
  store %struct.rtx_def* %call68, %struct.rtx_def** %zeroreg, align 8
  %45 = load i64, i64* %count, align 8
  %46 = load i32, i32* %size, align 4
  %sub = sub nsw i32 %46, 1
  %neg = xor i32 %sub, -1
  %conv = sext i32 %neg to i64
  %and69 = and i64 %45, %conv
  %tobool70 = icmp ne i64 %and69, 0
  br i1 %tobool70, label %if.then.71, label %if.end.99

if.then.71:                                       ; preds = %land.end
  %47 = load i32, i32* %counter_mode, align 4
  %48 = load i64, i64* %count, align 8
  %49 = load i32, i32* %size, align 4
  %cmp72 = icmp eq i32 %49, 4
  %cond74 = select i1 %cmp72, i32 2, i32 3
  %sh_prom = zext i32 %cond74 to i64
  %shr = lshr i64 %48, %sh_prom
  %50 = load i32, i32* @target_flags, align 4
  %and75 = and i32 %50, 33554432
  %tobool76 = icmp ne i32 %and75, 0
  %cond77 = select i1 %tobool76, i32 -1, i32 1073741823
  %conv78 = sext i32 %cond77 to i64
  %and79 = and i64 %shr, %conv78
  %call80 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %and79)
  %call81 = call %struct.rtx_def* @copy_to_mode_reg(i32 %47, %struct.rtx_def* %call80)
  store %struct.rtx_def* %call81, %struct.rtx_def** %countreg, align 8
  %51 = load %struct.rtx_def*, %struct.rtx_def** %countreg, align 8
  %call82 = call %struct.rtx_def* @ix86_zero_extend_to_Pmode(%struct.rtx_def* %51)
  store %struct.rtx_def* %call82, %struct.rtx_def** %countreg, align 8
  %52 = load i32, i32* %size, align 4
  %cmp83 = icmp eq i32 %52, 4
  br i1 %cmp83, label %if.then.85, label %if.else.95

if.then.85:                                       ; preds = %if.then.71
  %53 = load i32, i32* @target_flags, align 4
  %and86 = and i32 %53, 33554432
  %tobool87 = icmp ne i32 %and86, 0
  br i1 %tobool87, label %if.then.88, label %if.else.91

if.then.88:                                       ; preds = %if.then.85
  %54 = load %struct.rtx_def*, %struct.rtx_def** %destreg, align 8
  %55 = load %struct.rtx_def*, %struct.rtx_def** %countreg, align 8
  %56 = load %struct.rtx_def*, %struct.rtx_def** %zeroreg, align 8
  %57 = load %struct.rtx_def*, %struct.rtx_def** %destreg, align 8
  %58 = load %struct.rtx_def*, %struct.rtx_def** %countreg, align 8
  %call89 = call %struct.rtx_def* @gen_rep_stossi_rex64(%struct.rtx_def* %54, %struct.rtx_def* %55, %struct.rtx_def* %56, %struct.rtx_def* %57, %struct.rtx_def* %58)
  %call90 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call89)
  br label %if.end.94

if.else.91:                                       ; preds = %if.then.85
  %59 = load %struct.rtx_def*, %struct.rtx_def** %destreg, align 8
  %60 = load %struct.rtx_def*, %struct.rtx_def** %countreg, align 8
  %61 = load %struct.rtx_def*, %struct.rtx_def** %zeroreg, align 8
  %62 = load %struct.rtx_def*, %struct.rtx_def** %destreg, align 8
  %63 = load %struct.rtx_def*, %struct.rtx_def** %countreg, align 8
  %call92 = call %struct.rtx_def* @gen_rep_stossi(%struct.rtx_def* %59, %struct.rtx_def* %60, %struct.rtx_def* %61, %struct.rtx_def* %62, %struct.rtx_def* %63)
  %call93 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call92)
  br label %if.end.94

if.end.94:                                        ; preds = %if.else.91, %if.then.88
  br label %if.end.98

if.else.95:                                       ; preds = %if.then.71
  %64 = load %struct.rtx_def*, %struct.rtx_def** %destreg, align 8
  %65 = load %struct.rtx_def*, %struct.rtx_def** %countreg, align 8
  %66 = load %struct.rtx_def*, %struct.rtx_def** %zeroreg, align 8
  %67 = load %struct.rtx_def*, %struct.rtx_def** %destreg, align 8
  %68 = load %struct.rtx_def*, %struct.rtx_def** %countreg, align 8
  %call96 = call %struct.rtx_def* @gen_rep_stosdi_rex64(%struct.rtx_def* %64, %struct.rtx_def* %65, %struct.rtx_def* %66, %struct.rtx_def* %67, %struct.rtx_def* %68)
  %call97 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call96)
  br label %if.end.98

if.end.98:                                        ; preds = %if.else.95, %if.end.94
  br label %if.end.99

if.end.99:                                        ; preds = %if.end.98, %land.end
  %69 = load i32, i32* %size, align 4
  %cmp100 = icmp eq i32 %69, 8
  br i1 %cmp100, label %land.lhs.true.102, label %if.end.109

land.lhs.true.102:                                ; preds = %if.end.99
  %70 = load i64, i64* %count, align 8
  %and103 = and i64 %70, 4
  %tobool104 = icmp ne i64 %and103, 0
  br i1 %tobool104, label %if.then.105, label %if.end.109

if.then.105:                                      ; preds = %land.lhs.true.102
  %71 = load %struct.rtx_def*, %struct.rtx_def** %destreg, align 8
  %72 = load %struct.rtx_def*, %struct.rtx_def** %zeroreg, align 8
  %call106 = call %struct.rtx_def* @gen_rtx_SUBREG(i32 4, %struct.rtx_def* %72, i32 0)
  %call107 = call %struct.rtx_def* @gen_strsetsi(%struct.rtx_def* %71, %struct.rtx_def* %call106)
  %call108 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call107)
  br label %if.end.109

if.end.109:                                       ; preds = %if.then.105, %land.lhs.true.102, %if.end.99
  %73 = load i64, i64* %count, align 8
  %and110 = and i64 %73, 2
  %tobool111 = icmp ne i64 %and110, 0
  br i1 %tobool111, label %if.then.112, label %if.end.116

if.then.112:                                      ; preds = %if.end.109
  %74 = load %struct.rtx_def*, %struct.rtx_def** %destreg, align 8
  %75 = load %struct.rtx_def*, %struct.rtx_def** %zeroreg, align 8
  %call113 = call %struct.rtx_def* @gen_rtx_SUBREG(i32 3, %struct.rtx_def* %75, i32 0)
  %call114 = call %struct.rtx_def* @gen_strsethi(%struct.rtx_def* %74, %struct.rtx_def* %call113)
  %call115 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call114)
  br label %if.end.116

if.end.116:                                       ; preds = %if.then.112, %if.end.109
  %76 = load i64, i64* %count, align 8
  %and117 = and i64 %76, 1
  %tobool118 = icmp ne i64 %and117, 0
  br i1 %tobool118, label %if.then.119, label %if.end.123

if.then.119:                                      ; preds = %if.end.116
  %77 = load %struct.rtx_def*, %struct.rtx_def** %destreg, align 8
  %78 = load %struct.rtx_def*, %struct.rtx_def** %zeroreg, align 8
  %call120 = call %struct.rtx_def* @gen_rtx_SUBREG(i32 2, %struct.rtx_def* %78, i32 0)
  %call121 = call %struct.rtx_def* @gen_strsetqi(%struct.rtx_def* %77, %struct.rtx_def* %call120)
  %call122 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call121)
  br label %if.end.123

if.end.123:                                       ; preds = %if.then.119, %if.end.116
  br label %if.end.358

if.else.124:                                      ; preds = %lor.lhs.false.59, %if.else.46
  store %struct.rtx_def* null, %struct.rtx_def** %label, align 8
  %79 = load i32, i32* @ix86_cpu, align 4
  %cmp125 = icmp eq i32 %79, 3
  br i1 %cmp125, label %land.lhs.true.127, label %cond.false

land.lhs.true.127:                                ; preds = %if.else.124
  %80 = load i64, i64* %count, align 8
  %cmp128 = icmp eq i64 %80, 0
  br i1 %cmp128, label %cond.true, label %lor.lhs.false.130

lor.lhs.false.130:                                ; preds = %land.lhs.true.127
  %81 = load i64, i64* %count, align 8
  %cmp131 = icmp uge i64 %81, 260
  br i1 %cmp131, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false.130, %land.lhs.true.127
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false.130, %if.else.124
  %82 = load i32, i32* @target_flags, align 4
  %and133 = and i32 %82, 33554432
  %tobool134 = icmp ne i32 %and133, 0
  %cond135 = select i1 %tobool134, i32 8, i32 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond136 = phi i32 [ 8, %cond.true ], [ %cond135, %cond.false ]
  store i32 %cond136, i32* %desired_alignment, align 4
  %83 = load i32, i32* @target_flags, align 4
  %and137 = and i32 %83, 1024
  %tobool138 = icmp ne i32 %and137, 0
  br i1 %tobool138, label %if.end.147, label %land.lhs.true.139

land.lhs.true.139:                                ; preds = %cond.end
  %84 = load i64, i64* %align, align 8
  %85 = load i32, i32* @target_flags, align 4
  %and140 = and i32 %85, 33554432
  %tobool141 = icmp ne i32 %and140, 0
  %cond142 = select i1 %tobool141, i32 8, i32 4
  %conv143 = sext i32 %cond142 to i64
  %cmp144 = icmp slt i64 %84, %conv143
  br i1 %cmp144, label %if.then.146, label %if.end.147

if.then.146:                                      ; preds = %land.lhs.true.139
  store i32 0, i32* %retval
  br label %return

if.end.147:                                       ; preds = %land.lhs.true.139, %cond.end
  %86 = load i32, i32* @ix86_cpu, align 4
  %shl = shl i32 1, %86
  %and148 = and i32 65, %shl
  %tobool149 = icmp ne i32 %and148, 0
  br i1 %tobool149, label %if.then.150, label %if.end.153

if.then.150:                                      ; preds = %if.end.147
  %call151 = call %struct.rtx_def* @gen_cld()
  %call152 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call151)
  br label %if.end.153

if.end.153:                                       ; preds = %if.then.150, %if.end.147
  %87 = load i32, i32* @target_flags, align 4
  %and154 = and i32 %87, 33554432
  %tobool155 = icmp ne i32 %and154, 0
  %cond156 = select i1 %tobool155, i32 5, i32 4
  %call157 = call %struct.rtx_def* @gen_reg_rtx(i32 %cond156)
  store %struct.rtx_def* %call157, %struct.rtx_def** %countreg2, align 8
  %88 = load i32, i32* %counter_mode, align 4
  %89 = load %struct.rtx_def*, %struct.rtx_def** %count_exp.addr, align 8
  %call158 = call %struct.rtx_def* @copy_to_mode_reg(i32 %88, %struct.rtx_def* %89)
  store %struct.rtx_def* %call158, %struct.rtx_def** %countreg, align 8
  %90 = load i32, i32* @target_flags, align 4
  %and159 = and i32 %90, 33554432
  %tobool160 = icmp ne i32 %and159, 0
  %cond161 = select i1 %tobool160, i32 5, i32 4
  %91 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call162 = call %struct.rtx_def* @copy_to_mode_reg(i32 %cond161, %struct.rtx_def* %91)
  store %struct.rtx_def* %call162, %struct.rtx_def** %zeroreg, align 8
  %92 = load i64, i64* %count, align 8
  %cmp163 = icmp eq i64 %92, 0
  br i1 %cmp163, label %land.lhs.true.165, label %if.end.174

land.lhs.true.165:                                ; preds = %if.end.153
  %93 = load i64, i64* %align, align 8
  %94 = load i32, i32* %desired_alignment, align 4
  %conv166 = sext i32 %94 to i64
  %cmp167 = icmp slt i64 %93, %conv166
  br i1 %cmp167, label %if.then.169, label %if.end.174

if.then.169:                                      ; preds = %land.lhs.true.165
  %call170 = call %struct.rtx_def* @gen_label_rtx()
  store %struct.rtx_def* %call170, %struct.rtx_def** %label, align 8
  %95 = load %struct.rtx_def*, %struct.rtx_def** %countreg, align 8
  %96 = load i32, i32* %desired_alignment, align 4
  %sub171 = sub nsw i32 %96, 1
  %conv172 = sext i32 %sub171 to i64
  %call173 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv172)
  %97 = load i32, i32* %counter_mode, align 4
  %98 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  call void @emit_cmp_and_jump_insns(%struct.rtx_def* %95, %struct.rtx_def* %call173, i32 110, %struct.rtx_def* null, i32 %97, i32 1, %struct.rtx_def* %98)
  br label %if.end.174

if.end.174:                                       ; preds = %if.then.169, %land.lhs.true.165, %if.end.153
  %99 = load i64, i64* %align, align 8
  %cmp175 = icmp sle i64 %99, 1
  br i1 %cmp175, label %if.then.177, label %if.end.186

if.then.177:                                      ; preds = %if.end.174
  %100 = load %struct.rtx_def*, %struct.rtx_def** %destreg, align 8
  %call179 = call %struct.rtx_def* @ix86_expand_aligntest(%struct.rtx_def* %100, i32 1)
  store %struct.rtx_def* %call179, %struct.rtx_def** %label178, align 8
  %101 = load %struct.rtx_def*, %struct.rtx_def** %destreg, align 8
  %102 = load %struct.rtx_def*, %struct.rtx_def** %zeroreg, align 8
  %call180 = call %struct.rtx_def* @gen_rtx_SUBREG(i32 2, %struct.rtx_def* %102, i32 0)
  %call181 = call %struct.rtx_def* @gen_strsetqi(%struct.rtx_def* %101, %struct.rtx_def* %call180)
  %call182 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call181)
  %103 = load %struct.rtx_def*, %struct.rtx_def** %countreg, align 8
  call void @ix86_adjust_counter(%struct.rtx_def* %103, i64 1)
  %104 = load %struct.rtx_def*, %struct.rtx_def** %label178, align 8
  %call183 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %104)
  %105 = load %struct.rtx_def*, %struct.rtx_def** %label178, align 8
  %fld184 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %105, i32 0, i32 1
  %arrayidx185 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld184, i32 0, i64 3
  %rtint = bitcast %union.rtunion_def* %arrayidx185 to i32*
  store i32 1, i32* %rtint, align 4
  br label %if.end.186

if.end.186:                                       ; preds = %if.then.177, %if.end.174
  %106 = load i64, i64* %align, align 8
  %cmp187 = icmp sle i64 %106, 2
  br i1 %cmp187, label %if.then.189, label %if.end.199

if.then.189:                                      ; preds = %if.end.186
  %107 = load %struct.rtx_def*, %struct.rtx_def** %destreg, align 8
  %call191 = call %struct.rtx_def* @ix86_expand_aligntest(%struct.rtx_def* %107, i32 2)
  store %struct.rtx_def* %call191, %struct.rtx_def** %label190, align 8
  %108 = load %struct.rtx_def*, %struct.rtx_def** %destreg, align 8
  %109 = load %struct.rtx_def*, %struct.rtx_def** %zeroreg, align 8
  %call192 = call %struct.rtx_def* @gen_rtx_SUBREG(i32 3, %struct.rtx_def* %109, i32 0)
  %call193 = call %struct.rtx_def* @gen_strsethi(%struct.rtx_def* %108, %struct.rtx_def* %call192)
  %call194 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call193)
  %110 = load %struct.rtx_def*, %struct.rtx_def** %countreg, align 8
  call void @ix86_adjust_counter(%struct.rtx_def* %110, i64 2)
  %111 = load %struct.rtx_def*, %struct.rtx_def** %label190, align 8
  %call195 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %111)
  %112 = load %struct.rtx_def*, %struct.rtx_def** %label190, align 8
  %fld196 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %112, i32 0, i32 1
  %arrayidx197 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld196, i32 0, i64 3
  %rtint198 = bitcast %union.rtunion_def* %arrayidx197 to i32*
  store i32 1, i32* %rtint198, align 4
  br label %if.end.199

if.end.199:                                       ; preds = %if.then.189, %if.end.186
  %113 = load i64, i64* %align, align 8
  %cmp200 = icmp sle i64 %113, 4
  br i1 %cmp200, label %land.lhs.true.202, label %if.end.221

land.lhs.true.202:                                ; preds = %if.end.199
  %114 = load i32, i32* %desired_alignment, align 4
  %cmp203 = icmp sgt i32 %114, 4
  br i1 %cmp203, label %if.then.205, label %if.end.221

if.then.205:                                      ; preds = %land.lhs.true.202
  %115 = load %struct.rtx_def*, %struct.rtx_def** %destreg, align 8
  %call207 = call %struct.rtx_def* @ix86_expand_aligntest(%struct.rtx_def* %115, i32 4)
  store %struct.rtx_def* %call207, %struct.rtx_def** %label206, align 8
  %116 = load %struct.rtx_def*, %struct.rtx_def** %destreg, align 8
  %117 = load i32, i32* @target_flags, align 4
  %and208 = and i32 %117, 33554432
  %tobool209 = icmp ne i32 %and208, 0
  br i1 %tobool209, label %cond.true.210, label %cond.false.212

cond.true.210:                                    ; preds = %if.then.205
  %118 = load %struct.rtx_def*, %struct.rtx_def** %zeroreg, align 8
  %call211 = call %struct.rtx_def* @gen_rtx_SUBREG(i32 4, %struct.rtx_def* %118, i32 0)
  br label %cond.end.213

cond.false.212:                                   ; preds = %if.then.205
  %119 = load %struct.rtx_def*, %struct.rtx_def** %zeroreg, align 8
  br label %cond.end.213

cond.end.213:                                     ; preds = %cond.false.212, %cond.true.210
  %cond214 = phi %struct.rtx_def* [ %call211, %cond.true.210 ], [ %119, %cond.false.212 ]
  %call215 = call %struct.rtx_def* @gen_strsetsi(%struct.rtx_def* %116, %struct.rtx_def* %cond214)
  %call216 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call215)
  %120 = load %struct.rtx_def*, %struct.rtx_def** %countreg, align 8
  call void @ix86_adjust_counter(%struct.rtx_def* %120, i64 4)
  %121 = load %struct.rtx_def*, %struct.rtx_def** %label206, align 8
  %call217 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %121)
  %122 = load %struct.rtx_def*, %struct.rtx_def** %label206, align 8
  %fld218 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %122, i32 0, i32 1
  %arrayidx219 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld218, i32 0, i64 3
  %rtint220 = bitcast %union.rtunion_def* %arrayidx219 to i32*
  store i32 1, i32* %rtint220, align 4
  br label %if.end.221

if.end.221:                                       ; preds = %cond.end.213, %land.lhs.true.202, %if.end.199
  %123 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  %tobool222 = icmp ne %struct.rtx_def* %123, null
  br i1 %tobool222, label %land.lhs.true.223, label %if.end.234

land.lhs.true.223:                                ; preds = %if.end.221
  %124 = load i32, i32* %desired_alignment, align 4
  %cmp224 = icmp sgt i32 %124, 4
  br i1 %cmp224, label %land.lhs.true.226, label %if.end.234

land.lhs.true.226:                                ; preds = %land.lhs.true.223
  %125 = load i32, i32* @target_flags, align 4
  %and227 = and i32 %125, 33554432
  %tobool228 = icmp ne i32 %and227, 0
  br i1 %tobool228, label %if.end.234, label %if.then.229

if.then.229:                                      ; preds = %land.lhs.true.226
  %126 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  %call230 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %126)
  %127 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  %fld231 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %127, i32 0, i32 1
  %arrayidx232 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld231, i32 0, i64 3
  %rtint233 = bitcast %union.rtunion_def* %arrayidx232 to i32*
  store i32 1, i32* %rtint233, align 4
  store %struct.rtx_def* null, %struct.rtx_def** %label, align 8
  br label %if.end.234

if.end.234:                                       ; preds = %if.then.229, %land.lhs.true.226, %land.lhs.true.223, %if.end.221
  %128 = load i32, i32* @ix86_cpu, align 4
  %shl235 = shl i32 1, %128
  %and236 = and i32 65, %shl235
  %tobool237 = icmp ne i32 %and236, 0
  br i1 %tobool237, label %if.end.241, label %if.then.238

if.then.238:                                      ; preds = %if.end.234
  %call239 = call %struct.rtx_def* @gen_cld()
  %call240 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call239)
  br label %if.end.241

if.end.241:                                       ; preds = %if.then.238, %if.end.234
  %129 = load i32, i32* @target_flags, align 4
  %and242 = and i32 %129, 33554432
  %tobool243 = icmp ne i32 %and242, 0
  br i1 %tobool243, label %if.then.244, label %if.else.251

if.then.244:                                      ; preds = %if.end.241
  %130 = load %struct.rtx_def*, %struct.rtx_def** %countreg2, align 8
  %131 = load %struct.rtx_def*, %struct.rtx_def** %countreg, align 8
  %call245 = call %struct.rtx_def* @ix86_zero_extend_to_Pmode(%struct.rtx_def* %131)
  %call246 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 3)
  %call247 = call %struct.rtx_def* @gen_lshrdi3(%struct.rtx_def* %130, %struct.rtx_def* %call245, %struct.rtx_def* %call246)
  %call248 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call247)
  %132 = load %struct.rtx_def*, %struct.rtx_def** %destreg, align 8
  %133 = load %struct.rtx_def*, %struct.rtx_def** %countreg2, align 8
  %134 = load %struct.rtx_def*, %struct.rtx_def** %zeroreg, align 8
  %135 = load %struct.rtx_def*, %struct.rtx_def** %destreg, align 8
  %136 = load %struct.rtx_def*, %struct.rtx_def** %countreg2, align 8
  %call249 = call %struct.rtx_def* @gen_rep_stosdi_rex64(%struct.rtx_def* %132, %struct.rtx_def* %133, %struct.rtx_def* %134, %struct.rtx_def* %135, %struct.rtx_def* %136)
  %call250 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call249)
  br label %if.end.257

if.else.251:                                      ; preds = %if.end.241
  %137 = load %struct.rtx_def*, %struct.rtx_def** %countreg2, align 8
  %138 = load %struct.rtx_def*, %struct.rtx_def** %countreg, align 8
  %call252 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 2)
  %call253 = call %struct.rtx_def* @gen_lshrsi3(%struct.rtx_def* %137, %struct.rtx_def* %138, %struct.rtx_def* %call252)
  %call254 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call253)
  %139 = load %struct.rtx_def*, %struct.rtx_def** %destreg, align 8
  %140 = load %struct.rtx_def*, %struct.rtx_def** %countreg2, align 8
  %141 = load %struct.rtx_def*, %struct.rtx_def** %zeroreg, align 8
  %142 = load %struct.rtx_def*, %struct.rtx_def** %destreg, align 8
  %143 = load %struct.rtx_def*, %struct.rtx_def** %countreg2, align 8
  %call255 = call %struct.rtx_def* @gen_rep_stossi(%struct.rtx_def* %139, %struct.rtx_def* %140, %struct.rtx_def* %141, %struct.rtx_def* %142, %struct.rtx_def* %143)
  %call256 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call255)
  br label %if.end.257

if.end.257:                                       ; preds = %if.else.251, %if.then.244
  %144 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  %tobool258 = icmp ne %struct.rtx_def* %144, null
  br i1 %tobool258, label %if.then.259, label %if.end.264

if.then.259:                                      ; preds = %if.end.257
  %145 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  %call260 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %145)
  %146 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  %fld261 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %146, i32 0, i32 1
  %arrayidx262 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld261, i32 0, i64 3
  %rtint263 = bitcast %union.rtunion_def* %arrayidx262 to i32*
  store i32 1, i32* %rtint263, align 4
  br label %if.end.264

if.end.264:                                       ; preds = %if.then.259, %if.end.257
  %147 = load i32, i32* @target_flags, align 4
  %and265 = and i32 %147, 33554432
  %tobool266 = icmp ne i32 %and265, 0
  br i1 %tobool266, label %land.lhs.true.267, label %if.end.280

land.lhs.true.267:                                ; preds = %if.end.264
  %148 = load i64, i64* %align, align 8
  %cmp268 = icmp sgt i64 %148, 4
  br i1 %cmp268, label %land.lhs.true.270, label %if.end.280

land.lhs.true.270:                                ; preds = %land.lhs.true.267
  %149 = load i64, i64* %count, align 8
  %cmp271 = icmp ne i64 %149, 0
  br i1 %cmp271, label %land.lhs.true.273, label %if.end.280

land.lhs.true.273:                                ; preds = %land.lhs.true.270
  %150 = load i64, i64* %count, align 8
  %and274 = and i64 %150, 4
  %tobool275 = icmp ne i64 %and274, 0
  br i1 %tobool275, label %if.then.276, label %if.end.280

if.then.276:                                      ; preds = %land.lhs.true.273
  %151 = load %struct.rtx_def*, %struct.rtx_def** %destreg, align 8
  %152 = load %struct.rtx_def*, %struct.rtx_def** %zeroreg, align 8
  %call277 = call %struct.rtx_def* @gen_rtx_SUBREG(i32 4, %struct.rtx_def* %152, i32 0)
  %call278 = call %struct.rtx_def* @gen_strsetsi(%struct.rtx_def* %151, %struct.rtx_def* %call277)
  %call279 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call278)
  br label %if.end.280

if.end.280:                                       ; preds = %if.then.276, %land.lhs.true.273, %land.lhs.true.270, %land.lhs.true.267, %if.end.264
  %153 = load i32, i32* @target_flags, align 4
  %and281 = and i32 %153, 33554432
  %tobool282 = icmp ne i32 %and281, 0
  br i1 %tobool282, label %land.lhs.true.283, label %if.end.299

land.lhs.true.283:                                ; preds = %if.end.280
  %154 = load i64, i64* %align, align 8
  %cmp284 = icmp sle i64 %154, 4
  br i1 %cmp284, label %if.then.289, label %lor.lhs.false.286

lor.lhs.false.286:                                ; preds = %land.lhs.true.283
  %155 = load i64, i64* %count, align 8
  %cmp287 = icmp eq i64 %155, 0
  br i1 %cmp287, label %if.then.289, label %if.end.299

if.then.289:                                      ; preds = %lor.lhs.false.286, %land.lhs.true.283
  %156 = load %struct.rtx_def*, %struct.rtx_def** %countreg, align 8
  %call291 = call %struct.rtx_def* @ix86_expand_aligntest(%struct.rtx_def* %156, i32 4)
  store %struct.rtx_def* %call291, %struct.rtx_def** %label290, align 8
  %157 = load %struct.rtx_def*, %struct.rtx_def** %destreg, align 8
  %158 = load %struct.rtx_def*, %struct.rtx_def** %zeroreg, align 8
  %call292 = call %struct.rtx_def* @gen_rtx_SUBREG(i32 4, %struct.rtx_def* %158, i32 0)
  %call293 = call %struct.rtx_def* @gen_strsetsi(%struct.rtx_def* %157, %struct.rtx_def* %call292)
  %call294 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call293)
  %159 = load %struct.rtx_def*, %struct.rtx_def** %label290, align 8
  %call295 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %159)
  %160 = load %struct.rtx_def*, %struct.rtx_def** %label290, align 8
  %fld296 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %160, i32 0, i32 1
  %arrayidx297 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld296, i32 0, i64 3
  %rtint298 = bitcast %union.rtunion_def* %arrayidx297 to i32*
  store i32 1, i32* %rtint298, align 4
  br label %if.end.299

if.end.299:                                       ; preds = %if.then.289, %lor.lhs.false.286, %if.end.280
  %161 = load i64, i64* %align, align 8
  %cmp300 = icmp sgt i64 %161, 2
  br i1 %cmp300, label %land.lhs.true.302, label %if.end.312

land.lhs.true.302:                                ; preds = %if.end.299
  %162 = load i64, i64* %count, align 8
  %cmp303 = icmp ne i64 %162, 0
  br i1 %cmp303, label %land.lhs.true.305, label %if.end.312

land.lhs.true.305:                                ; preds = %land.lhs.true.302
  %163 = load i64, i64* %count, align 8
  %and306 = and i64 %163, 2
  %tobool307 = icmp ne i64 %and306, 0
  br i1 %tobool307, label %if.then.308, label %if.end.312

if.then.308:                                      ; preds = %land.lhs.true.305
  %164 = load %struct.rtx_def*, %struct.rtx_def** %destreg, align 8
  %165 = load %struct.rtx_def*, %struct.rtx_def** %zeroreg, align 8
  %call309 = call %struct.rtx_def* @gen_rtx_SUBREG(i32 3, %struct.rtx_def* %165, i32 0)
  %call310 = call %struct.rtx_def* @gen_strsethi(%struct.rtx_def* %164, %struct.rtx_def* %call309)
  %call311 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call310)
  br label %if.end.312

if.end.312:                                       ; preds = %if.then.308, %land.lhs.true.305, %land.lhs.true.302, %if.end.299
  %166 = load i64, i64* %align, align 8
  %cmp313 = icmp sle i64 %166, 2
  br i1 %cmp313, label %if.then.318, label %lor.lhs.false.315

lor.lhs.false.315:                                ; preds = %if.end.312
  %167 = load i64, i64* %count, align 8
  %cmp316 = icmp eq i64 %167, 0
  br i1 %cmp316, label %if.then.318, label %if.end.328

if.then.318:                                      ; preds = %lor.lhs.false.315, %if.end.312
  %168 = load %struct.rtx_def*, %struct.rtx_def** %countreg, align 8
  %call320 = call %struct.rtx_def* @ix86_expand_aligntest(%struct.rtx_def* %168, i32 2)
  store %struct.rtx_def* %call320, %struct.rtx_def** %label319, align 8
  %169 = load %struct.rtx_def*, %struct.rtx_def** %destreg, align 8
  %170 = load %struct.rtx_def*, %struct.rtx_def** %zeroreg, align 8
  %call321 = call %struct.rtx_def* @gen_rtx_SUBREG(i32 3, %struct.rtx_def* %170, i32 0)
  %call322 = call %struct.rtx_def* @gen_strsethi(%struct.rtx_def* %169, %struct.rtx_def* %call321)
  %call323 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call322)
  %171 = load %struct.rtx_def*, %struct.rtx_def** %label319, align 8
  %call324 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %171)
  %172 = load %struct.rtx_def*, %struct.rtx_def** %label319, align 8
  %fld325 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %172, i32 0, i32 1
  %arrayidx326 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld325, i32 0, i64 3
  %rtint327 = bitcast %union.rtunion_def* %arrayidx326 to i32*
  store i32 1, i32* %rtint327, align 4
  br label %if.end.328

if.end.328:                                       ; preds = %if.then.318, %lor.lhs.false.315
  %173 = load i64, i64* %align, align 8
  %cmp329 = icmp sgt i64 %173, 1
  br i1 %cmp329, label %land.lhs.true.331, label %if.end.341

land.lhs.true.331:                                ; preds = %if.end.328
  %174 = load i64, i64* %count, align 8
  %cmp332 = icmp ne i64 %174, 0
  br i1 %cmp332, label %land.lhs.true.334, label %if.end.341

land.lhs.true.334:                                ; preds = %land.lhs.true.331
  %175 = load i64, i64* %count, align 8
  %and335 = and i64 %175, 1
  %tobool336 = icmp ne i64 %and335, 0
  br i1 %tobool336, label %if.then.337, label %if.end.341

if.then.337:                                      ; preds = %land.lhs.true.334
  %176 = load %struct.rtx_def*, %struct.rtx_def** %destreg, align 8
  %177 = load %struct.rtx_def*, %struct.rtx_def** %zeroreg, align 8
  %call338 = call %struct.rtx_def* @gen_rtx_SUBREG(i32 2, %struct.rtx_def* %177, i32 0)
  %call339 = call %struct.rtx_def* @gen_strsetqi(%struct.rtx_def* %176, %struct.rtx_def* %call338)
  %call340 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call339)
  br label %if.end.341

if.end.341:                                       ; preds = %if.then.337, %land.lhs.true.334, %land.lhs.true.331, %if.end.328
  %178 = load i64, i64* %align, align 8
  %cmp342 = icmp sle i64 %178, 1
  br i1 %cmp342, label %if.then.347, label %lor.lhs.false.344

lor.lhs.false.344:                                ; preds = %if.end.341
  %179 = load i64, i64* %count, align 8
  %cmp345 = icmp eq i64 %179, 0
  br i1 %cmp345, label %if.then.347, label %if.end.357

if.then.347:                                      ; preds = %lor.lhs.false.344, %if.end.341
  %180 = load %struct.rtx_def*, %struct.rtx_def** %countreg, align 8
  %call349 = call %struct.rtx_def* @ix86_expand_aligntest(%struct.rtx_def* %180, i32 1)
  store %struct.rtx_def* %call349, %struct.rtx_def** %label348, align 8
  %181 = load %struct.rtx_def*, %struct.rtx_def** %destreg, align 8
  %182 = load %struct.rtx_def*, %struct.rtx_def** %zeroreg, align 8
  %call350 = call %struct.rtx_def* @gen_rtx_SUBREG(i32 2, %struct.rtx_def* %182, i32 0)
  %call351 = call %struct.rtx_def* @gen_strsetqi(%struct.rtx_def* %181, %struct.rtx_def* %call350)
  %call352 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call351)
  %183 = load %struct.rtx_def*, %struct.rtx_def** %label348, align 8
  %call353 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %183)
  %184 = load %struct.rtx_def*, %struct.rtx_def** %label348, align 8
  %fld354 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %184, i32 0, i32 1
  %arrayidx355 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld354, i32 0, i64 3
  %rtint356 = bitcast %union.rtunion_def* %arrayidx355 to i32*
  store i32 1, i32* %rtint356, align 4
  br label %if.end.357

if.end.357:                                       ; preds = %if.then.347, %lor.lhs.false.344
  br label %if.end.358

if.end.358:                                       ; preds = %if.end.357, %if.end.123
  br label %if.end.359

if.end.359:                                       ; preds = %if.end.358, %if.end.45
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.359, %if.then.146
  %185 = load i32, i32* %retval
  ret i32 %185
}

declare %struct.rtx_def* @gen_rep_stosqi_rex64(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #0

declare %struct.rtx_def* @gen_rep_stosqi(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #0

declare %struct.rtx_def* @gen_rep_stossi_rex64(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #0

declare %struct.rtx_def* @gen_rep_stossi(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #0

declare %struct.rtx_def* @gen_rep_stosdi_rex64(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #0

declare %struct.rtx_def* @gen_strsetsi(%struct.rtx_def*, %struct.rtx_def*) #0

declare %struct.rtx_def* @gen_rtx_SUBREG(i32, %struct.rtx_def*, i32) #0

declare %struct.rtx_def* @gen_strsethi(%struct.rtx_def*, %struct.rtx_def*) #0

declare %struct.rtx_def* @gen_strsetqi(%struct.rtx_def*, %struct.rtx_def*) #0

; Function Attrs: nounwind uwtable
define i32 @ix86_expand_strlen(%struct.rtx_def* %out, %struct.rtx_def* %src, %struct.rtx_def* %eoschar, %struct.rtx_def* %align) #1 {
entry:
  %retval = alloca i32, align 4
  %out.addr = alloca %struct.rtx_def*, align 8
  %src.addr = alloca %struct.rtx_def*, align 8
  %eoschar.addr = alloca %struct.rtx_def*, align 8
  %align.addr = alloca %struct.rtx_def*, align 8
  %addr = alloca %struct.rtx_def*, align 8
  %scratch1 = alloca %struct.rtx_def*, align 8
  %scratch2 = alloca %struct.rtx_def*, align 8
  %scratch3 = alloca %struct.rtx_def*, align 8
  %scratch4 = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %out, %struct.rtx_def** %out.addr, align 8
  store %struct.rtx_def* %src, %struct.rtx_def** %src.addr, align 8
  store %struct.rtx_def* %eoschar, %struct.rtx_def** %eoschar.addr, align 8
  store %struct.rtx_def* %align, %struct.rtx_def** %align.addr, align 8
  %0 = load i32, i32* @ix86_cpu, align 4
  %shl = shl i32 1, %0
  %and = and i32 62, %shl
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %eoschar.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %cmp = icmp eq %struct.rtx_def* %1, %2
  br i1 %cmp, label %land.lhs.true.1, label %if.end

land.lhs.true.1:                                  ; preds = %land.lhs.true
  %3 = load i32, i32* @optimize, align 4
  %cmp2 = icmp sgt i32 %3, 1
  br i1 %cmp2, label %land.lhs.true.3, label %if.end

land.lhs.true.3:                                  ; preds = %land.lhs.true.1
  %4 = load i32, i32* @target_flags, align 4
  %and4 = and i32 %4, 1024
  %tobool5 = icmp ne i32 %and4, 0
  br i1 %tobool5, label %if.end, label %land.lhs.true.6

land.lhs.true.6:                                  ; preds = %land.lhs.true.3
  %5 = load i32, i32* @optimize_size, align 4
  %tobool7 = icmp ne i32 %5, 0
  br i1 %tobool7, label %if.end, label %land.lhs.true.8

land.lhs.true.8:                                  ; preds = %land.lhs.true.6
  %6 = load %struct.rtx_def*, %struct.rtx_def** %align.addr, align 8
  %7 = bitcast %struct.rtx_def* %6 to i32*
  %bf.load = load i32, i32* %7, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp9 = icmp ne i32 %bf.clear, 54
  br i1 %cmp9, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %align.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx to i64*
  %9 = load i64, i64* %rtwint, align 8
  %cmp10 = icmp slt i64 %9, 4
  br i1 %cmp10, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true.8
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false, %land.lhs.true.6, %land.lhs.true.3, %land.lhs.true.1, %land.lhs.true, %entry
  %10 = load i32, i32* @target_flags, align 4
  %and11 = and i32 %10, 33554432
  %tobool12 = icmp ne i32 %and11, 0
  %cond = select i1 %tobool12, i32 5, i32 4
  %11 = load %struct.rtx_def*, %struct.rtx_def** %src.addr, align 8
  %fld13 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1
  %arrayidx14 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld13, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx14 to %struct.rtx_def**
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %call = call %struct.rtx_def* @force_reg(i32 %cond, %struct.rtx_def* %12)
  store %struct.rtx_def* %call, %struct.rtx_def** %addr, align 8
  %13 = load i32, i32* @target_flags, align 4
  %and15 = and i32 %13, 33554432
  %tobool16 = icmp ne i32 %and15, 0
  %cond17 = select i1 %tobool16, i32 5, i32 4
  %call18 = call %struct.rtx_def* @gen_reg_rtx(i32 %cond17)
  store %struct.rtx_def* %call18, %struct.rtx_def** %scratch1, align 8
  %14 = load i32, i32* @ix86_cpu, align 4
  %shl19 = shl i32 1, %14
  %and20 = and i32 62, %shl19
  %tobool21 = icmp ne i32 %and20, 0
  br i1 %tobool21, label %land.lhs.true.22, label %if.else.38

land.lhs.true.22:                                 ; preds = %if.end
  %15 = load %struct.rtx_def*, %struct.rtx_def** %eoschar.addr, align 8
  %16 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %cmp23 = icmp eq %struct.rtx_def* %15, %16
  br i1 %cmp23, label %land.lhs.true.24, label %if.else.38

land.lhs.true.24:                                 ; preds = %land.lhs.true.22
  %17 = load i32, i32* @optimize, align 4
  %cmp25 = icmp sgt i32 %17, 1
  br i1 %cmp25, label %land.lhs.true.26, label %if.else.38

land.lhs.true.26:                                 ; preds = %land.lhs.true.24
  %18 = load i32, i32* @optimize_size, align 4
  %tobool27 = icmp ne i32 %18, 0
  br i1 %tobool27, label %if.else.38, label %if.then.28

if.then.28:                                       ; preds = %land.lhs.true.26
  %19 = load %struct.rtx_def*, %struct.rtx_def** %out.addr, align 8
  %20 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %call29 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %19, %struct.rtx_def* %20)
  %21 = load %struct.rtx_def*, %struct.rtx_def** %out.addr, align 8
  %22 = load %struct.rtx_def*, %struct.rtx_def** %align.addr, align 8
  call void @ix86_expand_strlensi_unroll_1(%struct.rtx_def* %21, %struct.rtx_def* %22)
  %23 = load i32, i32* @target_flags, align 4
  %and30 = and i32 %23, 33554432
  %tobool31 = icmp ne i32 %and30, 0
  br i1 %tobool31, label %if.then.32, label %if.else

if.then.32:                                       ; preds = %if.then.28
  %24 = load %struct.rtx_def*, %struct.rtx_def** %out.addr, align 8
  %25 = load %struct.rtx_def*, %struct.rtx_def** %out.addr, align 8
  %26 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %call33 = call %struct.rtx_def* @gen_subdi3(%struct.rtx_def* %24, %struct.rtx_def* %25, %struct.rtx_def* %26)
  %call34 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call33)
  br label %if.end.37

if.else:                                          ; preds = %if.then.28
  %27 = load %struct.rtx_def*, %struct.rtx_def** %out.addr, align 8
  %28 = load %struct.rtx_def*, %struct.rtx_def** %out.addr, align 8
  %29 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %call35 = call %struct.rtx_def* @gen_subsi3(%struct.rtx_def* %27, %struct.rtx_def* %28, %struct.rtx_def* %29)
  %call36 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call35)
  br label %if.end.37

if.end.37:                                        ; preds = %if.else, %if.then.32
  br label %if.end.72

if.else.38:                                       ; preds = %land.lhs.true.26, %land.lhs.true.24, %land.lhs.true.22, %if.end
  %30 = load i32, i32* @target_flags, align 4
  %and39 = and i32 %30, 33554432
  %tobool40 = icmp ne i32 %and39, 0
  %cond41 = select i1 %tobool40, i32 5, i32 4
  %call42 = call %struct.rtx_def* @gen_reg_rtx(i32 %cond41)
  store %struct.rtx_def* %call42, %struct.rtx_def** %scratch2, align 8
  %31 = load i32, i32* @target_flags, align 4
  %and43 = and i32 %31, 33554432
  %tobool44 = icmp ne i32 %and43, 0
  %cond45 = select i1 %tobool44, i32 5, i32 4
  %call46 = call %struct.rtx_def* @gen_reg_rtx(i32 %cond45)
  store %struct.rtx_def* %call46, %struct.rtx_def** %scratch3, align 8
  %32 = load i32, i32* @target_flags, align 4
  %and47 = and i32 %32, 33554432
  %tobool48 = icmp ne i32 %and47, 0
  %cond49 = select i1 %tobool48, i32 5, i32 4
  %33 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 63), align 8
  %call50 = call %struct.rtx_def* @force_reg(i32 %cond49, %struct.rtx_def* %33)
  store %struct.rtx_def* %call50, %struct.rtx_def** %scratch4, align 8
  %34 = load %struct.rtx_def*, %struct.rtx_def** %scratch3, align 8
  %35 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %call51 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %34, %struct.rtx_def* %35)
  %36 = load %struct.rtx_def*, %struct.rtx_def** %eoschar.addr, align 8
  %call52 = call %struct.rtx_def* @force_reg(i32 2, %struct.rtx_def* %36)
  store %struct.rtx_def* %call52, %struct.rtx_def** %eoschar.addr, align 8
  %call53 = call %struct.rtx_def* @gen_cld()
  %call54 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call53)
  %37 = load i32, i32* @target_flags, align 4
  %and55 = and i32 %37, 33554432
  %tobool56 = icmp ne i32 %and55, 0
  br i1 %tobool56, label %if.then.57, label %if.else.64

if.then.57:                                       ; preds = %if.else.38
  %38 = load %struct.rtx_def*, %struct.rtx_def** %scratch1, align 8
  %39 = load %struct.rtx_def*, %struct.rtx_def** %scratch3, align 8
  %40 = load %struct.rtx_def*, %struct.rtx_def** %eoschar.addr, align 8
  %41 = load %struct.rtx_def*, %struct.rtx_def** %align.addr, align 8
  %42 = load %struct.rtx_def*, %struct.rtx_def** %scratch4, align 8
  %43 = load %struct.rtx_def*, %struct.rtx_def** %scratch3, align 8
  %call58 = call %struct.rtx_def* @gen_strlenqi_rex_1(%struct.rtx_def* %38, %struct.rtx_def* %39, %struct.rtx_def* %40, %struct.rtx_def* %41, %struct.rtx_def* %42, %struct.rtx_def* %43)
  %call59 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call58)
  %44 = load %struct.rtx_def*, %struct.rtx_def** %scratch2, align 8
  %45 = load %struct.rtx_def*, %struct.rtx_def** %scratch1, align 8
  %call60 = call %struct.rtx_def* @gen_one_cmpldi2(%struct.rtx_def* %44, %struct.rtx_def* %45)
  %call61 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call60)
  %46 = load %struct.rtx_def*, %struct.rtx_def** %out.addr, align 8
  %47 = load %struct.rtx_def*, %struct.rtx_def** %scratch2, align 8
  %48 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 63), align 8
  %call62 = call %struct.rtx_def* @gen_adddi3(%struct.rtx_def* %46, %struct.rtx_def* %47, %struct.rtx_def* %48)
  %call63 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call62)
  br label %if.end.71

if.else.64:                                       ; preds = %if.else.38
  %49 = load %struct.rtx_def*, %struct.rtx_def** %scratch1, align 8
  %50 = load %struct.rtx_def*, %struct.rtx_def** %scratch3, align 8
  %51 = load %struct.rtx_def*, %struct.rtx_def** %eoschar.addr, align 8
  %52 = load %struct.rtx_def*, %struct.rtx_def** %align.addr, align 8
  %53 = load %struct.rtx_def*, %struct.rtx_def** %scratch4, align 8
  %54 = load %struct.rtx_def*, %struct.rtx_def** %scratch3, align 8
  %call65 = call %struct.rtx_def* @gen_strlenqi_1(%struct.rtx_def* %49, %struct.rtx_def* %50, %struct.rtx_def* %51, %struct.rtx_def* %52, %struct.rtx_def* %53, %struct.rtx_def* %54)
  %call66 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call65)
  %55 = load %struct.rtx_def*, %struct.rtx_def** %scratch2, align 8
  %56 = load %struct.rtx_def*, %struct.rtx_def** %scratch1, align 8
  %call67 = call %struct.rtx_def* @gen_one_cmplsi2(%struct.rtx_def* %55, %struct.rtx_def* %56)
  %call68 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call67)
  %57 = load %struct.rtx_def*, %struct.rtx_def** %out.addr, align 8
  %58 = load %struct.rtx_def*, %struct.rtx_def** %scratch2, align 8
  %59 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 63), align 8
  %call69 = call %struct.rtx_def* @gen_addsi3(%struct.rtx_def* %57, %struct.rtx_def* %58, %struct.rtx_def* %59)
  %call70 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call69)
  br label %if.end.71

if.end.71:                                        ; preds = %if.else.64, %if.then.57
  br label %if.end.72

if.end.72:                                        ; preds = %if.end.71, %if.end.37
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.72, %if.then
  %60 = load i32, i32* %retval
  ret i32 %60
}

; Function Attrs: nounwind uwtable
define internal void @ix86_expand_strlensi_unroll_1(%struct.rtx_def* %out, %struct.rtx_def* %align_rtx) #1 {
entry:
  %out.addr = alloca %struct.rtx_def*, align 8
  %align_rtx.addr = alloca %struct.rtx_def*, align 8
  %align = alloca i32, align 4
  %tmp = alloca %struct.rtx_def*, align 8
  %align_2_label = alloca %struct.rtx_def*, align 8
  %align_3_label = alloca %struct.rtx_def*, align 8
  %align_4_label = alloca %struct.rtx_def*, align 8
  %end_0_label = alloca %struct.rtx_def*, align 8
  %mem = alloca %struct.rtx_def*, align 8
  %tmpreg = alloca %struct.rtx_def*, align 8
  %scratch = alloca %struct.rtx_def*, align 8
  %scratch1 = alloca %struct.rtx_def*, align 8
  %reg = alloca %struct.rtx_def*, align 8
  %reg2 = alloca %struct.rtx_def*, align 8
  %end_2_label = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %out, %struct.rtx_def** %out.addr, align 8
  store %struct.rtx_def* %align_rtx, %struct.rtx_def** %align_rtx.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %align_2_label, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %align_3_label, align 8
  %call = call %struct.rtx_def* @gen_label_rtx()
  store %struct.rtx_def* %call, %struct.rtx_def** %align_4_label, align 8
  %call5 = call %struct.rtx_def* @gen_label_rtx()
  store %struct.rtx_def* %call5, %struct.rtx_def** %end_0_label, align 8
  %call8 = call %struct.rtx_def* @gen_reg_rtx(i32 4)
  store %struct.rtx_def* %call8, %struct.rtx_def** %tmpreg, align 8
  %call10 = call %struct.rtx_def* @gen_reg_rtx(i32 4)
  store %struct.rtx_def* %call10, %struct.rtx_def** %scratch, align 8
  store i32 0, i32* %align, align 4
  %0 = load %struct.rtx_def*, %struct.rtx_def** %align_rtx.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 54
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %align_rtx.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx to i64*
  %3 = load i64, i64* %rtwint, align 8
  %conv = trunc i64 %3 to i32
  store i32 %conv, i32* %align, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* %align, align 4
  %cmp11 = icmp slt i32 %4, 4
  br i1 %cmp11, label %if.then.13, label %if.end.81

if.then.13:                                       ; preds = %if.end
  %5 = load i32, i32* @target_flags, align 4
  %and = and i32 %5, 33554432
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, i32 5, i32 4
  %call15 = call %struct.rtx_def* @gen_reg_rtx(i32 %cond)
  store %struct.rtx_def* %call15, %struct.rtx_def** %scratch1, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %scratch1, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %out.addr, align 8
  %call16 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %6, %struct.rtx_def* %7)
  %8 = load i32, i32* %align, align 4
  %cmp17 = icmp ne i32 %8, 2
  br i1 %cmp17, label %if.then.19, label %if.else

if.then.19:                                       ; preds = %if.then.13
  %call20 = call %struct.rtx_def* @gen_label_rtx()
  store %struct.rtx_def* %call20, %struct.rtx_def** %align_3_label, align 8
  %call21 = call %struct.rtx_def* @gen_label_rtx()
  store %struct.rtx_def* %call21, %struct.rtx_def** %align_2_label, align 8
  %9 = load i32, i32* @target_flags, align 4
  %and22 = and i32 %9, 33554432
  %tobool23 = icmp ne i32 %and22, 0
  %cond24 = select i1 %tobool23, i32 5, i32 4
  %10 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 18), align 8
  %11 = load %struct.rtx_def*, %struct.rtx_def** %scratch1, align 8
  %call25 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 3)
  %call26 = call %struct.rtx_def* @expand_binop(i32 %cond24, %struct.optab* %10, %struct.rtx_def* %11, %struct.rtx_def* %call25, %struct.rtx_def* null, i32 0, i32 2)
  store %struct.rtx_def* %call26, %struct.rtx_def** %align_rtx.addr, align 8
  %12 = load %struct.rtx_def*, %struct.rtx_def** %align_rtx.addr, align 8
  %13 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %14 = load i32, i32* @target_flags, align 4
  %and27 = and i32 %14, 33554432
  %tobool28 = icmp ne i32 %and27, 0
  %cond29 = select i1 %tobool28, i32 5, i32 4
  %15 = load %struct.rtx_def*, %struct.rtx_def** %align_4_label, align 8
  call void @emit_cmp_and_jump_insns(%struct.rtx_def* %12, %struct.rtx_def* %13, i32 103, %struct.rtx_def* null, i32 %cond29, i32 1, %struct.rtx_def* %15)
  %16 = load %struct.rtx_def*, %struct.rtx_def** %align_rtx.addr, align 8
  %call30 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 2)
  %17 = load i32, i32* @target_flags, align 4
  %and31 = and i32 %17, 33554432
  %tobool32 = icmp ne i32 %and31, 0
  %cond33 = select i1 %tobool32, i32 5, i32 4
  %18 = load %struct.rtx_def*, %struct.rtx_def** %align_2_label, align 8
  call void @emit_cmp_and_jump_insns(%struct.rtx_def* %16, %struct.rtx_def* %call30, i32 103, %struct.rtx_def* null, i32 %cond33, i32 1, %struct.rtx_def* %18)
  %19 = load %struct.rtx_def*, %struct.rtx_def** %align_rtx.addr, align 8
  %call34 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 2)
  %20 = load i32, i32* @target_flags, align 4
  %and35 = and i32 %20, 33554432
  %tobool36 = icmp ne i32 %and35, 0
  %cond37 = select i1 %tobool36, i32 5, i32 4
  %21 = load %struct.rtx_def*, %struct.rtx_def** %align_3_label, align 8
  call void @emit_cmp_and_jump_insns(%struct.rtx_def* %19, %struct.rtx_def* %call34, i32 109, %struct.rtx_def* null, i32 %cond37, i32 1, %struct.rtx_def* %21)
  br label %if.end.46

if.else:                                          ; preds = %if.then.13
  %22 = load i32, i32* @target_flags, align 4
  %and38 = and i32 %22, 33554432
  %tobool39 = icmp ne i32 %and38, 0
  %cond40 = select i1 %tobool39, i32 5, i32 4
  %23 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 18), align 8
  %24 = load %struct.rtx_def*, %struct.rtx_def** %scratch1, align 8
  %call41 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 2)
  %call42 = call %struct.rtx_def* @expand_binop(i32 %cond40, %struct.optab* %23, %struct.rtx_def* %24, %struct.rtx_def* %call41, %struct.rtx_def* null, i32 0, i32 2)
  store %struct.rtx_def* %call42, %struct.rtx_def** %align_rtx.addr, align 8
  %25 = load %struct.rtx_def*, %struct.rtx_def** %align_rtx.addr, align 8
  %26 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %27 = load i32, i32* @target_flags, align 4
  %and43 = and i32 %27, 33554432
  %tobool44 = icmp ne i32 %and43, 0
  %cond45 = select i1 %tobool44, i32 5, i32 4
  %28 = load %struct.rtx_def*, %struct.rtx_def** %align_4_label, align 8
  call void @emit_cmp_and_jump_insns(%struct.rtx_def* %25, %struct.rtx_def* %26, i32 103, %struct.rtx_def* null, i32 %cond45, i32 1, %struct.rtx_def* %28)
  br label %if.end.46

if.end.46:                                        ; preds = %if.else, %if.then.19
  %29 = load %struct.rtx_def*, %struct.rtx_def** %out.addr, align 8
  %call47 = call %struct.rtx_def* @gen_rtx_MEM(i32 2, %struct.rtx_def* %29)
  store %struct.rtx_def* %call47, %struct.rtx_def** %mem, align 8
  %30 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8
  %31 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %32 = load %struct.rtx_def*, %struct.rtx_def** %end_0_label, align 8
  call void @emit_cmp_and_jump_insns(%struct.rtx_def* %30, %struct.rtx_def* %31, i32 103, %struct.rtx_def* null, i32 2, i32 1, %struct.rtx_def* %32)
  %33 = load i32, i32* @target_flags, align 4
  %and48 = and i32 %33, 33554432
  %tobool49 = icmp ne i32 %and48, 0
  br i1 %tobool49, label %if.then.50, label %if.else.53

if.then.50:                                       ; preds = %if.end.46
  %34 = load %struct.rtx_def*, %struct.rtx_def** %out.addr, align 8
  %35 = load %struct.rtx_def*, %struct.rtx_def** %out.addr, align 8
  %36 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call51 = call %struct.rtx_def* @gen_adddi3(%struct.rtx_def* %34, %struct.rtx_def* %35, %struct.rtx_def* %36)
  %call52 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call51)
  br label %if.end.56

if.else.53:                                       ; preds = %if.end.46
  %37 = load %struct.rtx_def*, %struct.rtx_def** %out.addr, align 8
  %38 = load %struct.rtx_def*, %struct.rtx_def** %out.addr, align 8
  %39 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call54 = call %struct.rtx_def* @gen_addsi3(%struct.rtx_def* %37, %struct.rtx_def* %38, %struct.rtx_def* %39)
  %call55 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call54)
  br label %if.end.56

if.end.56:                                        ; preds = %if.else.53, %if.then.50
  %40 = load i32, i32* %align, align 4
  %cmp57 = icmp ne i32 %40, 2
  br i1 %cmp57, label %if.then.59, label %if.end.71

if.then.59:                                       ; preds = %if.end.56
  %41 = load %struct.rtx_def*, %struct.rtx_def** %align_2_label, align 8
  %call60 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %41)
  %42 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8
  %43 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %44 = load %struct.rtx_def*, %struct.rtx_def** %end_0_label, align 8
  call void @emit_cmp_and_jump_insns(%struct.rtx_def* %42, %struct.rtx_def* %43, i32 103, %struct.rtx_def* null, i32 2, i32 1, %struct.rtx_def* %44)
  %45 = load i32, i32* @target_flags, align 4
  %and61 = and i32 %45, 33554432
  %tobool62 = icmp ne i32 %and61, 0
  br i1 %tobool62, label %if.then.63, label %if.else.66

if.then.63:                                       ; preds = %if.then.59
  %46 = load %struct.rtx_def*, %struct.rtx_def** %out.addr, align 8
  %47 = load %struct.rtx_def*, %struct.rtx_def** %out.addr, align 8
  %48 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call64 = call %struct.rtx_def* @gen_adddi3(%struct.rtx_def* %46, %struct.rtx_def* %47, %struct.rtx_def* %48)
  %call65 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call64)
  br label %if.end.69

if.else.66:                                       ; preds = %if.then.59
  %49 = load %struct.rtx_def*, %struct.rtx_def** %out.addr, align 8
  %50 = load %struct.rtx_def*, %struct.rtx_def** %out.addr, align 8
  %51 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call67 = call %struct.rtx_def* @gen_addsi3(%struct.rtx_def* %49, %struct.rtx_def* %50, %struct.rtx_def* %51)
  %call68 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call67)
  br label %if.end.69

if.end.69:                                        ; preds = %if.else.66, %if.then.63
  %52 = load %struct.rtx_def*, %struct.rtx_def** %align_3_label, align 8
  %call70 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %52)
  br label %if.end.71

if.end.71:                                        ; preds = %if.end.69, %if.end.56
  %53 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8
  %54 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %55 = load %struct.rtx_def*, %struct.rtx_def** %end_0_label, align 8
  call void @emit_cmp_and_jump_insns(%struct.rtx_def* %53, %struct.rtx_def* %54, i32 103, %struct.rtx_def* null, i32 2, i32 1, %struct.rtx_def* %55)
  %56 = load i32, i32* @target_flags, align 4
  %and72 = and i32 %56, 33554432
  %tobool73 = icmp ne i32 %and72, 0
  br i1 %tobool73, label %if.then.74, label %if.else.77

if.then.74:                                       ; preds = %if.end.71
  %57 = load %struct.rtx_def*, %struct.rtx_def** %out.addr, align 8
  %58 = load %struct.rtx_def*, %struct.rtx_def** %out.addr, align 8
  %59 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call75 = call %struct.rtx_def* @gen_adddi3(%struct.rtx_def* %57, %struct.rtx_def* %58, %struct.rtx_def* %59)
  %call76 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call75)
  br label %if.end.80

if.else.77:                                       ; preds = %if.end.71
  %60 = load %struct.rtx_def*, %struct.rtx_def** %out.addr, align 8
  %61 = load %struct.rtx_def*, %struct.rtx_def** %out.addr, align 8
  %62 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call78 = call %struct.rtx_def* @gen_addsi3(%struct.rtx_def* %60, %struct.rtx_def* %61, %struct.rtx_def* %62)
  %call79 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call78)
  br label %if.end.80

if.end.80:                                        ; preds = %if.else.77, %if.then.74
  br label %if.end.81

if.end.81:                                        ; preds = %if.end.80, %if.end
  %63 = load %struct.rtx_def*, %struct.rtx_def** %align_4_label, align 8
  %call82 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %63)
  %64 = load %struct.rtx_def*, %struct.rtx_def** %out.addr, align 8
  %call83 = call %struct.rtx_def* @gen_rtx_MEM(i32 4, %struct.rtx_def* %64)
  store %struct.rtx_def* %call83, %struct.rtx_def** %mem, align 8
  %65 = load %struct.rtx_def*, %struct.rtx_def** %scratch, align 8
  %66 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8
  %call84 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %65, %struct.rtx_def* %66)
  %67 = load i32, i32* @target_flags, align 4
  %and85 = and i32 %67, 33554432
  %tobool86 = icmp ne i32 %and85, 0
  br i1 %tobool86, label %if.then.87, label %if.else.91

if.then.87:                                       ; preds = %if.end.81
  %68 = load %struct.rtx_def*, %struct.rtx_def** %out.addr, align 8
  %69 = load %struct.rtx_def*, %struct.rtx_def** %out.addr, align 8
  %call88 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 4)
  %call89 = call %struct.rtx_def* @gen_adddi3(%struct.rtx_def* %68, %struct.rtx_def* %69, %struct.rtx_def* %call88)
  %call90 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call89)
  br label %if.end.95

if.else.91:                                       ; preds = %if.end.81
  %70 = load %struct.rtx_def*, %struct.rtx_def** %out.addr, align 8
  %71 = load %struct.rtx_def*, %struct.rtx_def** %out.addr, align 8
  %call92 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 4)
  %call93 = call %struct.rtx_def* @gen_addsi3(%struct.rtx_def* %70, %struct.rtx_def* %71, %struct.rtx_def* %call92)
  %call94 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call93)
  br label %if.end.95

if.end.95:                                        ; preds = %if.else.91, %if.then.87
  %72 = load %struct.rtx_def*, %struct.rtx_def** %tmpreg, align 8
  %73 = load %struct.rtx_def*, %struct.rtx_def** %scratch, align 8
  %call96 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 -16843009)
  %call97 = call %struct.rtx_def* @gen_addsi3(%struct.rtx_def* %72, %struct.rtx_def* %73, %struct.rtx_def* %call96)
  %call98 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call97)
  %74 = load %struct.rtx_def*, %struct.rtx_def** %scratch, align 8
  %75 = load %struct.rtx_def*, %struct.rtx_def** %scratch, align 8
  %call99 = call %struct.rtx_def* @gen_one_cmplsi2(%struct.rtx_def* %74, %struct.rtx_def* %75)
  %call100 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call99)
  %76 = load %struct.rtx_def*, %struct.rtx_def** %tmpreg, align 8
  %77 = load %struct.rtx_def*, %struct.rtx_def** %tmpreg, align 8
  %78 = load %struct.rtx_def*, %struct.rtx_def** %scratch, align 8
  %call101 = call %struct.rtx_def* @gen_andsi3(%struct.rtx_def* %76, %struct.rtx_def* %77, %struct.rtx_def* %78)
  %call102 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call101)
  %79 = load %struct.rtx_def*, %struct.rtx_def** %tmpreg, align 8
  %80 = load %struct.rtx_def*, %struct.rtx_def** %tmpreg, align 8
  %call103 = call i64 @trunc_int_for_mode(i64 2155905152, i32 4)
  %call104 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %call103)
  %call105 = call %struct.rtx_def* @gen_andsi3(%struct.rtx_def* %79, %struct.rtx_def* %80, %struct.rtx_def* %call104)
  %call106 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call105)
  %81 = load %struct.rtx_def*, %struct.rtx_def** %tmpreg, align 8
  %82 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %83 = load %struct.rtx_def*, %struct.rtx_def** %align_4_label, align 8
  call void @emit_cmp_and_jump_insns(%struct.rtx_def* %81, %struct.rtx_def* %82, i32 103, %struct.rtx_def* null, i32 4, i32 1, %struct.rtx_def* %83)
  %84 = load i32, i32* @ix86_arch, align 4
  %shl = shl i32 1, %84
  %and107 = and i32 104, %shl
  %tobool108 = icmp ne i32 %and107, 0
  br i1 %tobool108, label %if.then.112, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.95
  %85 = load i32, i32* @target_flags, align 4
  %and109 = and i32 %85, 327680
  %cmp110 = icmp ne i32 %and109, 0
  br i1 %cmp110, label %if.then.112, label %if.else.147

if.then.112:                                      ; preds = %lor.lhs.false, %if.end.95
  %call114 = call %struct.rtx_def* @gen_reg_rtx(i32 4)
  store %struct.rtx_def* %call114, %struct.rtx_def** %reg, align 8
  %86 = load i32, i32* @target_flags, align 4
  %and116 = and i32 %86, 33554432
  %tobool117 = icmp ne i32 %and116, 0
  %cond118 = select i1 %tobool117, i32 5, i32 4
  %call119 = call %struct.rtx_def* @gen_reg_rtx(i32 %cond118)
  store %struct.rtx_def* %call119, %struct.rtx_def** %reg2, align 8
  %87 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %88 = load %struct.rtx_def*, %struct.rtx_def** %tmpreg, align 8
  %call120 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %87, %struct.rtx_def* %88)
  %89 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %90 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %call121 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 16)
  %call122 = call %struct.rtx_def* @gen_lshrsi3(%struct.rtx_def* %89, %struct.rtx_def* %90, %struct.rtx_def* %call121)
  %call123 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call122)
  %91 = load %struct.rtx_def*, %struct.rtx_def** %tmpreg, align 8
  %call124 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 32896)
  %call125 = call %struct.rtx_def* @gen_testsi_ccno_1(%struct.rtx_def* %91, %struct.rtx_def* %call124)
  %call126 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call125)
  %call127 = call %struct.rtx_def* @gen_rtx_REG(i32 55, i32 17)
  store %struct.rtx_def* %call127, %struct.rtx_def** %tmp, align 8
  %92 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %93 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call128 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 103, i32 0, %struct.rtx_def* %92, %struct.rtx_def* %93)
  store %struct.rtx_def* %call128, %struct.rtx_def** %tmp, align 8
  %94 = load %struct.rtx_def*, %struct.rtx_def** %tmpreg, align 8
  %95 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %96 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %97 = load %struct.rtx_def*, %struct.rtx_def** %tmpreg, align 8
  %call129 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 72, i32 4, %struct.rtx_def* %95, %struct.rtx_def* %96, %struct.rtx_def* %97)
  %call130 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %94, %struct.rtx_def* %call129)
  %call131 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call130)
  %98 = load %struct.rtx_def*, %struct.rtx_def** %reg2, align 8
  %99 = load i32, i32* @target_flags, align 4
  %and132 = and i32 %99, 33554432
  %tobool133 = icmp ne i32 %and132, 0
  %cond134 = select i1 %tobool133, i32 5, i32 4
  %100 = load %struct.rtx_def*, %struct.rtx_def** %out.addr, align 8
  %call135 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 2)
  %call136 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %cond134, %struct.rtx_def* %100, %struct.rtx_def* %call135)
  %call137 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 4, %struct.rtx_def* %98, %struct.rtx_def* %call136)
  %call138 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call137)
  %call139 = call %struct.rtx_def* @gen_rtx_REG(i32 55, i32 17)
  store %struct.rtx_def* %call139, %struct.rtx_def** %tmp, align 8
  %101 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %102 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call140 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 103, i32 0, %struct.rtx_def* %101, %struct.rtx_def* %102)
  store %struct.rtx_def* %call140, %struct.rtx_def** %tmp, align 8
  %103 = load %struct.rtx_def*, %struct.rtx_def** %out.addr, align 8
  %104 = load i32, i32* @target_flags, align 4
  %and141 = and i32 %104, 33554432
  %tobool142 = icmp ne i32 %and141, 0
  %cond143 = select i1 %tobool142, i32 5, i32 4
  %105 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %106 = load %struct.rtx_def*, %struct.rtx_def** %reg2, align 8
  %107 = load %struct.rtx_def*, %struct.rtx_def** %out.addr, align 8
  %call144 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 72, i32 %cond143, %struct.rtx_def* %105, %struct.rtx_def* %106, %struct.rtx_def* %107)
  %call145 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %103, %struct.rtx_def* %call144)
  %call146 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call145)
  br label %if.end.176

if.else.147:                                      ; preds = %lor.lhs.false
  %call149 = call %struct.rtx_def* @gen_label_rtx()
  store %struct.rtx_def* %call149, %struct.rtx_def** %end_2_label, align 8
  %108 = load %struct.rtx_def*, %struct.rtx_def** %tmpreg, align 8
  %call150 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 32896)
  %call151 = call %struct.rtx_def* @gen_testsi_ccno_1(%struct.rtx_def* %108, %struct.rtx_def* %call150)
  %call152 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call151)
  %call153 = call %struct.rtx_def* @gen_rtx_REG(i32 55, i32 17)
  store %struct.rtx_def* %call153, %struct.rtx_def** %tmp, align 8
  %109 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %110 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call154 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 102, i32 0, %struct.rtx_def* %109, %struct.rtx_def* %110)
  store %struct.rtx_def* %call154, %struct.rtx_def** %tmp, align 8
  %111 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %112 = load %struct.rtx_def*, %struct.rtx_def** %end_2_label, align 8
  %call155 = call %struct.rtx_def* @gen_rtx_fmt_u00(i32 67, i32 0, %struct.rtx_def* %112)
  %113 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 0), align 8
  %call156 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 72, i32 0, %struct.rtx_def* %111, %struct.rtx_def* %call155, %struct.rtx_def* %113)
  store %struct.rtx_def* %call156, %struct.rtx_def** %tmp, align 8
  %114 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 0), align 8
  %115 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %call157 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %114, %struct.rtx_def* %115)
  %call158 = call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %call157)
  store %struct.rtx_def* %call158, %struct.rtx_def** %tmp, align 8
  %116 = load %struct.rtx_def*, %struct.rtx_def** %end_2_label, align 8
  %117 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %fld159 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %117, i32 0, i32 1
  %arrayidx160 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld159, i32 0, i64 7
  %rtx = bitcast %union.rtunion_def* %arrayidx160 to %struct.rtx_def**
  store %struct.rtx_def* %116, %struct.rtx_def** %rtx, align 8
  %118 = load %struct.rtx_def*, %struct.rtx_def** %tmpreg, align 8
  %119 = load %struct.rtx_def*, %struct.rtx_def** %tmpreg, align 8
  %call161 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 16)
  %call162 = call %struct.rtx_def* @gen_lshrsi3(%struct.rtx_def* %118, %struct.rtx_def* %119, %struct.rtx_def* %call161)
  %call163 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call162)
  %120 = load i32, i32* @target_flags, align 4
  %and164 = and i32 %120, 33554432
  %tobool165 = icmp ne i32 %and164, 0
  br i1 %tobool165, label %if.then.166, label %if.else.170

if.then.166:                                      ; preds = %if.else.147
  %121 = load %struct.rtx_def*, %struct.rtx_def** %out.addr, align 8
  %122 = load %struct.rtx_def*, %struct.rtx_def** %out.addr, align 8
  %call167 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 2)
  %call168 = call %struct.rtx_def* @gen_adddi3(%struct.rtx_def* %121, %struct.rtx_def* %122, %struct.rtx_def* %call167)
  %call169 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call168)
  br label %if.end.174

if.else.170:                                      ; preds = %if.else.147
  %123 = load %struct.rtx_def*, %struct.rtx_def** %out.addr, align 8
  %124 = load %struct.rtx_def*, %struct.rtx_def** %out.addr, align 8
  %call171 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 2)
  %call172 = call %struct.rtx_def* @gen_addsi3(%struct.rtx_def* %123, %struct.rtx_def* %124, %struct.rtx_def* %call171)
  %call173 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call172)
  br label %if.end.174

if.end.174:                                       ; preds = %if.else.170, %if.then.166
  %125 = load %struct.rtx_def*, %struct.rtx_def** %end_2_label, align 8
  %call175 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %125)
  br label %if.end.176

if.end.176:                                       ; preds = %if.end.174, %if.then.112
  %126 = load %struct.rtx_def*, %struct.rtx_def** %tmpreg, align 8
  %call177 = call %struct.rtx_def* @gen_lowpart(i32 2, %struct.rtx_def* %126)
  store %struct.rtx_def* %call177, %struct.rtx_def** %tmpreg, align 8
  %127 = load %struct.rtx_def*, %struct.rtx_def** %tmpreg, align 8
  %128 = load %struct.rtx_def*, %struct.rtx_def** %tmpreg, align 8
  %129 = load %struct.rtx_def*, %struct.rtx_def** %tmpreg, align 8
  %call178 = call %struct.rtx_def* @gen_addqi3_cc(%struct.rtx_def* %127, %struct.rtx_def* %128, %struct.rtx_def* %129)
  %call179 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call178)
  %130 = load i32, i32* @target_flags, align 4
  %and180 = and i32 %130, 33554432
  %tobool181 = icmp ne i32 %and180, 0
  br i1 %tobool181, label %if.then.182, label %if.else.186

if.then.182:                                      ; preds = %if.end.176
  %131 = load %struct.rtx_def*, %struct.rtx_def** %out.addr, align 8
  %132 = load %struct.rtx_def*, %struct.rtx_def** %out.addr, align 8
  %call183 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 3)
  %call184 = call %struct.rtx_def* @gen_subdi3_carry_rex64(%struct.rtx_def* %131, %struct.rtx_def* %132, %struct.rtx_def* %call183)
  %call185 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call184)
  br label %if.end.190

if.else.186:                                      ; preds = %if.end.176
  %133 = load %struct.rtx_def*, %struct.rtx_def** %out.addr, align 8
  %134 = load %struct.rtx_def*, %struct.rtx_def** %out.addr, align 8
  %call187 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 3)
  %call188 = call %struct.rtx_def* @gen_subsi3_carry(%struct.rtx_def* %133, %struct.rtx_def* %134, %struct.rtx_def* %call187)
  %call189 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call188)
  br label %if.end.190

if.end.190:                                       ; preds = %if.else.186, %if.then.182
  %135 = load %struct.rtx_def*, %struct.rtx_def** %end_0_label, align 8
  %call191 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %135)
  ret void
}

declare %struct.rtx_def* @gen_subsi3(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #0

declare %struct.rtx_def* @gen_strlenqi_rex_1(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #0

declare %struct.rtx_def* @gen_one_cmpldi2(%struct.rtx_def*, %struct.rtx_def*) #0

declare %struct.rtx_def* @gen_adddi3(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #0

declare %struct.rtx_def* @gen_strlenqi_1(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #0

declare %struct.rtx_def* @gen_one_cmplsi2(%struct.rtx_def*, %struct.rtx_def*) #0

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @assign_386_stack_local(i32 %mode, i32 %n) #1 {
entry:
  %mode.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  store i32 %mode, i32* %mode.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4
  %cmp1 = icmp sge i32 %1, 3
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 9850, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @__FUNCTION__.assign_386_stack_local, i32 0, i32 0)) #7
  unreachable

if.end:                                           ; preds = %lor.lhs.false
  %2 = load i32, i32* %n.addr, align 4
  %idxprom = sext i32 %2 to i64
  %3 = load i32, i32* %mode.addr, align 4
  %idxprom2 = sext i32 %3 to i64
  %4 = load %struct.function*, %struct.function** @cfun, align 8
  %machine = getelementptr inbounds %struct.function, %struct.function* %4, i32 0, i32 51
  %5 = load %struct.machine_function*, %struct.machine_function** %machine, align 8
  %stack_locals = getelementptr inbounds %struct.machine_function, %struct.machine_function* %5, i32 0, i32 0
  %arrayidx = getelementptr inbounds [59 x [3 x %struct.rtx_def*]], [59 x [3 x %struct.rtx_def*]]* %stack_locals, i32 0, i64 %idxprom2
  %arrayidx3 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx, i32 0, i64 %idxprom
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  %cmp4 = icmp eq %struct.rtx_def* %6, null
  br i1 %cmp4, label %if.then.5, label %if.end.14

if.then.5:                                        ; preds = %if.end
  %7 = load i32, i32* %mode.addr, align 4
  %8 = load i32, i32* %mode.addr, align 4
  %idxprom6 = sext i32 %8 to i64
  %arrayidx7 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom6
  %9 = load i8, i8* %arrayidx7, align 1
  %conv = zext i8 %9 to i64
  %call = call %struct.rtx_def* @assign_stack_local(i32 %7, i64 %conv, i32 0)
  %10 = load i32, i32* %n.addr, align 4
  %idxprom8 = sext i32 %10 to i64
  %11 = load i32, i32* %mode.addr, align 4
  %idxprom9 = sext i32 %11 to i64
  %12 = load %struct.function*, %struct.function** @cfun, align 8
  %machine10 = getelementptr inbounds %struct.function, %struct.function* %12, i32 0, i32 51
  %13 = load %struct.machine_function*, %struct.machine_function** %machine10, align 8
  %stack_locals11 = getelementptr inbounds %struct.machine_function, %struct.machine_function* %13, i32 0, i32 0
  %arrayidx12 = getelementptr inbounds [59 x [3 x %struct.rtx_def*]], [59 x [3 x %struct.rtx_def*]]* %stack_locals11, i32 0, i64 %idxprom9
  %arrayidx13 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx12, i32 0, i64 %idxprom8
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx13, align 8
  br label %if.end.14

if.end.14:                                        ; preds = %if.then.5, %if.end
  %14 = load i32, i32* %n.addr, align 4
  %idxprom15 = sext i32 %14 to i64
  %15 = load i32, i32* %mode.addr, align 4
  %idxprom16 = sext i32 %15 to i64
  %16 = load %struct.function*, %struct.function** @cfun, align 8
  %machine17 = getelementptr inbounds %struct.function, %struct.function* %16, i32 0, i32 51
  %17 = load %struct.machine_function*, %struct.machine_function** %machine17, align 8
  %stack_locals18 = getelementptr inbounds %struct.machine_function, %struct.machine_function* %17, i32 0, i32 0
  %arrayidx19 = getelementptr inbounds [59 x [3 x %struct.rtx_def*]], [59 x [3 x %struct.rtx_def*]]* %stack_locals18, i32 0, i64 %idxprom16
  %arrayidx20 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %arrayidx19, i32 0, i64 %idxprom15
  %18 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx20, align 8
  ret %struct.rtx_def* %18
}

declare %struct.rtx_def* @assign_stack_local(i32, i64, i32) #0

; Function Attrs: nounwind uwtable
define i32 @ix86_attr_length_immediate_default(%struct.rtx_def* %insn, i32 %shortform) #1 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %shortform.addr = alloca i32, align 4
  %len = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  store i32 %shortform, i32* %shortform.addr, align 4
  store i32 0, i32* %len, align 4
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  call void @extract_insn_cached(%struct.rtx_def* %0)
  %1 = load i8, i8* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 7), align 1
  %conv = sext i8 %1 to i32
  %sub = sub nsw i32 %conv, 1
  store i32 %sub, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %cmp = icmp sge i32 %2, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %idxprom = sext i32 %3 to i64
  %arrayidx = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i32 0, i64 %idxprom
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %5 = bitcast %struct.rtx_def* %4 to i32*
  %bf.load = load i32, i32* %5, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp2 = icmp eq i32 %bf.clear, 67
  br i1 %cmp2, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %idxprom4 = sext i32 %6 to i64
  %arrayidx5 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i32 0, i64 %idxprom4
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  %8 = bitcast %struct.rtx_def* %7 to i32*
  %bf.load6 = load i32, i32* %8, align 8
  %bf.clear7 = and i32 %bf.load6, 65535
  %cmp8 = icmp eq i32 %bf.clear7, 68
  br i1 %cmp8, label %if.then, label %lor.lhs.false.10

lor.lhs.false.10:                                 ; preds = %lor.lhs.false
  %9 = load i32, i32* %i, align 4
  %idxprom11 = sext i32 %9 to i64
  %arrayidx12 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i32 0, i64 %idxprom11
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx12, align 8
  %11 = bitcast %struct.rtx_def* %10 to i32*
  %bf.load13 = load i32, i32* %11, align 8
  %bf.clear14 = and i32 %bf.load13, 65535
  %cmp15 = icmp eq i32 %bf.clear14, 54
  br i1 %cmp15, label %if.then, label %lor.lhs.false.17

lor.lhs.false.17:                                 ; preds = %lor.lhs.false.10
  %12 = load i32, i32* %i, align 4
  %idxprom18 = sext i32 %12 to i64
  %arrayidx19 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i32 0, i64 %idxprom18
  %13 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx19, align 8
  %14 = bitcast %struct.rtx_def* %13 to i32*
  %bf.load20 = load i32, i32* %14, align 8
  %bf.clear21 = and i32 %bf.load20, 65535
  %cmp22 = icmp eq i32 %bf.clear21, 55
  br i1 %cmp22, label %if.then, label %lor.lhs.false.24

lor.lhs.false.24:                                 ; preds = %lor.lhs.false.17
  %15 = load i32, i32* %i, align 4
  %idxprom25 = sext i32 %15 to i64
  %arrayidx26 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i32 0, i64 %idxprom25
  %16 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx26, align 8
  %17 = bitcast %struct.rtx_def* %16 to i32*
  %bf.load27 = load i32, i32* %17, align 8
  %bf.clear28 = and i32 %bf.load27, 65535
  %cmp29 = icmp eq i32 %bf.clear28, 58
  br i1 %cmp29, label %if.then, label %lor.lhs.false.31

lor.lhs.false.31:                                 ; preds = %lor.lhs.false.24
  %18 = load i32, i32* %i, align 4
  %idxprom32 = sext i32 %18 to i64
  %arrayidx33 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i32 0, i64 %idxprom32
  %19 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx33, align 8
  %20 = bitcast %struct.rtx_def* %19 to i32*
  %bf.load34 = load i32, i32* %20, align 8
  %bf.clear35 = and i32 %bf.load34, 65535
  %cmp36 = icmp eq i32 %bf.clear35, 134
  br i1 %cmp36, label %if.then, label %lor.lhs.false.38

lor.lhs.false.38:                                 ; preds = %lor.lhs.false.31
  %21 = load i32, i32* %i, align 4
  %idxprom39 = sext i32 %21 to i64
  %arrayidx40 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i32 0, i64 %idxprom39
  %22 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx40, align 8
  %23 = bitcast %struct.rtx_def* %22 to i32*
  %bf.load41 = load i32, i32* %23, align 8
  %bf.clear42 = and i32 %bf.load41, 65535
  %cmp43 = icmp eq i32 %bf.clear42, 56
  br i1 %cmp43, label %if.then, label %lor.lhs.false.45

lor.lhs.false.45:                                 ; preds = %lor.lhs.false.38
  %24 = load i32, i32* %i, align 4
  %idxprom46 = sext i32 %24 to i64
  %arrayidx47 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i32 0, i64 %idxprom46
  %25 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx47, align 8
  %26 = bitcast %struct.rtx_def* %25 to i32*
  %bf.load48 = load i32, i32* %26, align 8
  %bf.clear49 = and i32 %bf.load48, 65535
  %cmp50 = icmp eq i32 %bf.clear49, 140
  br i1 %cmp50, label %if.then, label %if.end.167

if.then:                                          ; preds = %lor.lhs.false.45, %lor.lhs.false.38, %lor.lhs.false.31, %lor.lhs.false.24, %lor.lhs.false.17, %lor.lhs.false.10, %lor.lhs.false, %for.body
  %27 = load i32, i32* %len, align 4
  %tobool = icmp ne i32 %27, 0
  br i1 %tobool, label %if.then.52, label %if.end

if.then.52:                                       ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 9933, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @__FUNCTION__.ix86_attr_length_immediate_default, i32 0, i32 0)) #7
  unreachable

if.end:                                           ; preds = %if.then
  %28 = load i32, i32* %shortform.addr, align 4
  %tobool53 = icmp ne i32 %28, 0
  br i1 %tobool53, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.end
  %29 = load i32, i32* %i, align 4
  %idxprom54 = sext i32 %29 to i64
  %arrayidx55 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i32 0, i64 %idxprom54
  %30 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx55, align 8
  %31 = bitcast %struct.rtx_def* %30 to i32*
  %bf.load56 = load i32, i32* %31, align 8
  %bf.clear57 = and i32 %bf.load56, 65535
  %cmp58 = icmp eq i32 %bf.clear57, 54
  br i1 %cmp58, label %land.lhs.true.60, label %if.else

land.lhs.true.60:                                 ; preds = %land.lhs.true
  br i1 false, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true.60
  %32 = load i32, i32* %i, align 4
  %idxprom61 = sext i32 %32 to i64
  %arrayidx62 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i32 0, i64 %idxprom61
  %33 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx62, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1
  %arrayidx63 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx63 to i64*
  %34 = load i64, i64* %rtwint, align 8
  %cmp64 = icmp sge i64 %34, 0
  br i1 %cmp64, label %land.lhs.true.66, label %if.else

land.lhs.true.66:                                 ; preds = %cond.true
  %35 = load i32, i32* %i, align 4
  %idxprom67 = sext i32 %35 to i64
  %arrayidx68 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i32 0, i64 %idxprom67
  %36 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx68, align 8
  %fld69 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %36, i32 0, i32 1
  %arrayidx70 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld69, i32 0, i64 0
  %rtwint71 = bitcast %union.rtunion_def* %arrayidx70 to i64*
  %37 = load i64, i64* %rtwint71, align 8
  %cmp72 = icmp sle i64 %37, 31
  br i1 %cmp72, label %if.then.159, label %if.else

cond.false:                                       ; preds = %land.lhs.true.60
  br i1 false, label %cond.true.74, label %cond.false.90

cond.true.74:                                     ; preds = %cond.false
  %38 = load i32, i32* %i, align 4
  %idxprom75 = sext i32 %38 to i64
  %arrayidx76 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i32 0, i64 %idxprom75
  %39 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx76, align 8
  %fld77 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1
  %arrayidx78 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld77, i32 0, i64 0
  %rtwint79 = bitcast %union.rtunion_def* %arrayidx78 to i64*
  %40 = load i64, i64* %rtwint79, align 8
  %cmp80 = icmp sge i64 %40, 0
  br i1 %cmp80, label %land.lhs.true.82, label %if.else

land.lhs.true.82:                                 ; preds = %cond.true.74
  %41 = load i32, i32* %i, align 4
  %idxprom83 = sext i32 %41 to i64
  %arrayidx84 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i32 0, i64 %idxprom83
  %42 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx84, align 8
  %fld85 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %42, i32 0, i32 1
  %arrayidx86 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld85, i32 0, i64 0
  %rtwint87 = bitcast %union.rtunion_def* %arrayidx86 to i64*
  %43 = load i64, i64* %rtwint87, align 8
  %cmp88 = icmp sle i64 %43, 63
  br i1 %cmp88, label %if.then.159, label %if.else

cond.false.90:                                    ; preds = %cond.false
  br i1 true, label %cond.true.91, label %cond.false.107

cond.true.91:                                     ; preds = %cond.false.90
  %44 = load i32, i32* %i, align 4
  %idxprom92 = sext i32 %44 to i64
  %arrayidx93 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i32 0, i64 %idxprom92
  %45 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx93, align 8
  %fld94 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %45, i32 0, i32 1
  %arrayidx95 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld94, i32 0, i64 0
  %rtwint96 = bitcast %union.rtunion_def* %arrayidx95 to i64*
  %46 = load i64, i64* %rtwint96, align 8
  %cmp97 = icmp sge i64 %46, -128
  br i1 %cmp97, label %land.lhs.true.99, label %if.else

land.lhs.true.99:                                 ; preds = %cond.true.91
  %47 = load i32, i32* %i, align 4
  %idxprom100 = sext i32 %47 to i64
  %arrayidx101 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i32 0, i64 %idxprom100
  %48 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx101, align 8
  %fld102 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %48, i32 0, i32 1
  %arrayidx103 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld102, i32 0, i64 0
  %rtwint104 = bitcast %union.rtunion_def* %arrayidx103 to i64*
  %49 = load i64, i64* %rtwint104, align 8
  %cmp105 = icmp sle i64 %49, 127
  br i1 %cmp105, label %if.then.159, label %if.else

cond.false.107:                                   ; preds = %cond.false.90
  br i1 false, label %cond.true.108, label %cond.false.124

cond.true.108:                                    ; preds = %cond.false.107
  %50 = load i32, i32* %i, align 4
  %idxprom109 = sext i32 %50 to i64
  %arrayidx110 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i32 0, i64 %idxprom109
  %51 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx110, align 8
  %fld111 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %51, i32 0, i32 1
  %arrayidx112 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld111, i32 0, i64 0
  %rtwint113 = bitcast %union.rtunion_def* %arrayidx112 to i64*
  %52 = load i64, i64* %rtwint113, align 8
  %cmp114 = icmp eq i64 %52, 255
  br i1 %cmp114, label %if.then.159, label %lor.lhs.false.116

lor.lhs.false.116:                                ; preds = %cond.true.108
  %53 = load i32, i32* %i, align 4
  %idxprom117 = sext i32 %53 to i64
  %arrayidx118 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i32 0, i64 %idxprom117
  %54 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx118, align 8
  %fld119 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %54, i32 0, i32 1
  %arrayidx120 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld119, i32 0, i64 0
  %rtwint121 = bitcast %union.rtunion_def* %arrayidx120 to i64*
  %55 = load i64, i64* %rtwint121, align 8
  %cmp122 = icmp eq i64 %55, 65535
  br i1 %cmp122, label %if.then.159, label %if.else

cond.false.124:                                   ; preds = %cond.false.107
  br i1 false, label %cond.true.125, label %cond.false.141

cond.true.125:                                    ; preds = %cond.false.124
  %56 = load i32, i32* %i, align 4
  %idxprom126 = sext i32 %56 to i64
  %arrayidx127 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i32 0, i64 %idxprom126
  %57 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx127, align 8
  %fld128 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %57, i32 0, i32 1
  %arrayidx129 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld128, i32 0, i64 0
  %rtwint130 = bitcast %union.rtunion_def* %arrayidx129 to i64*
  %58 = load i64, i64* %rtwint130, align 8
  %cmp131 = icmp sge i64 %58, 0
  br i1 %cmp131, label %land.lhs.true.133, label %if.else

land.lhs.true.133:                                ; preds = %cond.true.125
  %59 = load i32, i32* %i, align 4
  %idxprom134 = sext i32 %59 to i64
  %arrayidx135 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i32 0, i64 %idxprom134
  %60 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx135, align 8
  %fld136 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %60, i32 0, i32 1
  %arrayidx137 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld136, i32 0, i64 0
  %rtwint138 = bitcast %union.rtunion_def* %arrayidx137 to i64*
  %61 = load i64, i64* %rtwint138, align 8
  %cmp139 = icmp sle i64 %61, 3
  br i1 %cmp139, label %if.then.159, label %if.else

cond.false.141:                                   ; preds = %cond.false.124
  br i1 false, label %cond.true.142, label %cond.false.158

cond.true.142:                                    ; preds = %cond.false.141
  %62 = load i32, i32* %i, align 4
  %idxprom143 = sext i32 %62 to i64
  %arrayidx144 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i32 0, i64 %idxprom143
  %63 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx144, align 8
  %fld145 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %63, i32 0, i32 1
  %arrayidx146 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld145, i32 0, i64 0
  %rtwint147 = bitcast %union.rtunion_def* %arrayidx146 to i64*
  %64 = load i64, i64* %rtwint147, align 8
  %cmp148 = icmp sge i64 %64, 0
  br i1 %cmp148, label %land.lhs.true.150, label %if.else

land.lhs.true.150:                                ; preds = %cond.true.142
  %65 = load i32, i32* %i, align 4
  %idxprom151 = sext i32 %65 to i64
  %arrayidx152 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i32 0, i64 %idxprom151
  %66 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx152, align 8
  %fld153 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %66, i32 0, i32 1
  %arrayidx154 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld153, i32 0, i64 0
  %rtwint155 = bitcast %union.rtunion_def* %arrayidx154 to i64*
  %67 = load i64, i64* %rtwint155, align 8
  %cmp156 = icmp sle i64 %67, 255
  br i1 %cmp156, label %if.then.159, label %if.else

cond.false.158:                                   ; preds = %cond.false.141
  br i1 false, label %if.then.159, label %if.else

if.then.159:                                      ; preds = %cond.false.158, %land.lhs.true.150, %land.lhs.true.133, %lor.lhs.false.116, %cond.true.108, %land.lhs.true.99, %land.lhs.true.82, %land.lhs.true.66
  store i32 1, i32* %len, align 4
  br label %if.end.166

if.else:                                          ; preds = %cond.false.158, %land.lhs.true.150, %cond.true.142, %land.lhs.true.133, %cond.true.125, %lor.lhs.false.116, %land.lhs.true.99, %cond.true.91, %land.lhs.true.82, %cond.true.74, %land.lhs.true.66, %cond.true, %land.lhs.true, %if.end
  %68 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call = call i32 @get_attr_mode(%struct.rtx_def* %68)
  switch i32 %call, label %sw.default [
    i32 2, label %sw.bb
    i32 3, label %sw.bb.160
    i32 4, label %sw.bb.162
    i32 5, label %sw.bb.164
  ]

sw.bb:                                            ; preds = %if.else
  %69 = load i32, i32* %len, align 4
  %add = add nsw i32 %69, 1
  store i32 %add, i32* %len, align 4
  br label %sw.epilog

sw.bb.160:                                        ; preds = %if.else
  %70 = load i32, i32* %len, align 4
  %add161 = add nsw i32 %70, 2
  store i32 %add161, i32* %len, align 4
  br label %sw.epilog

sw.bb.162:                                        ; preds = %if.else
  %71 = load i32, i32* %len, align 4
  %add163 = add nsw i32 %71, 4
  store i32 %add163, i32* %len, align 4
  br label %sw.epilog

sw.bb.164:                                        ; preds = %if.else
  %72 = load i32, i32* %len, align 4
  %add165 = add nsw i32 %72, 4
  store i32 %add165, i32* %len, align 4
  br label %sw.epilog

sw.default:                                       ; preds = %if.else
  %73 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  call void @_fatal_insn(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.196, i32 0, i32 0), %struct.rtx_def* %73, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 9956, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @__FUNCTION__.ix86_attr_length_immediate_default, i32 0, i32 0)) #7
  unreachable

sw.epilog:                                        ; preds = %sw.bb.164, %sw.bb.162, %sw.bb.160, %sw.bb
  br label %if.end.166

if.end.166:                                       ; preds = %sw.epilog, %if.then.159
  br label %if.end.167

if.end.167:                                       ; preds = %if.end.166, %lor.lhs.false.45
  br label %for.inc

for.inc:                                          ; preds = %if.end.167
  %74 = load i32, i32* %i, align 4
  %dec = add nsw i32 %74, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %75 = load i32, i32* %len, align 4
  ret i32 %75
}

declare void @extract_insn_cached(%struct.rtx_def*) #0

declare i32 @get_attr_mode(%struct.rtx_def*) #0

; Function Attrs: noreturn
declare void @_fatal_insn(i8*, %struct.rtx_def*, i8*, i32, i8*) #5

; Function Attrs: nounwind uwtable
define i32 @ix86_attr_length_address_default(%struct.rtx_def* %insn) #1 {
entry:
  %retval = alloca i32, align 4
  %insn.addr = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  call void @extract_insn_cached(%struct.rtx_def* %0)
  %1 = load i8, i8* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 7), align 1
  %conv = sext i8 %1 to i32
  %sub = sub nsw i32 %conv, 1
  store i32 %sub, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %cmp = icmp sge i32 %2, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %idxprom = sext i32 %3 to i64
  %arrayidx = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i32 0, i64 %idxprom
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %5 = bitcast %struct.rtx_def* %4 to i32*
  %bf.load = load i32, i32* %5, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp2 = icmp eq i32 %bf.clear, 66
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %idxprom4 = sext i32 %6 to i64
  %arrayidx5 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i32 0, i64 %idxprom4
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1
  %arrayidx6 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx6 to %struct.rtx_def**
  %8 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %call = call i32 @memory_address_length(%struct.rtx_def* %8)
  store i32 %call, i32* %retval
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %9 = load i32, i32* %i, align 4
  %dec = add nsw i32 %9, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then
  %10 = load i32, i32* %retval
  ret i32 %10
}

; Function Attrs: nounwind uwtable
define internal void @ix86_set_move_mem_attrs_1(%struct.rtx_def* %x, %struct.rtx_def* %dstref, %struct.rtx_def* %srcref, %struct.rtx_def* %dstreg, %struct.rtx_def* %srcreg) #1 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  %dstref.addr = alloca %struct.rtx_def*, align 8
  %srcref.addr = alloca %struct.rtx_def*, align 8
  %dstreg.addr = alloca %struct.rtx_def*, align 8
  %srcreg.addr = alloca %struct.rtx_def*, align 8
  %code = alloca i32, align 4
  %format_ptr = alloca i8*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  store %struct.rtx_def* %dstref, %struct.rtx_def** %dstref.addr, align 8
  store %struct.rtx_def* %srcref, %struct.rtx_def** %srcref.addr, align 8
  store %struct.rtx_def* %dstreg, %struct.rtx_def** %dstreg.addr, align 8
  store %struct.rtx_def* %srcreg, %struct.rtx_def** %srcreg.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  store i32 %bf.clear, i32* %code, align 4
  %2 = load i32, i32* %code, align 4
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds [153 x i8*], [153 x i8*]* @rtx_format, i32 0, i64 %idxprom
  %3 = load i8*, i8** %arrayidx, align 8
  store i8* %3, i8** %format_ptr, align 8
  %4 = load i32, i32* %code, align 4
  %cmp = icmp eq i32 %4, 66
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %5 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1
  %arrayidx1 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx1 to %struct.rtx_def**
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %dstreg.addr, align 8
  %cmp2 = icmp eq %struct.rtx_def* %6, %7
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %8 = load %struct.rtx_def*, %struct.rtx_def** %dstref.addr, align 8
  %9 = bitcast %struct.rtx_def* %8 to i32*
  %bf.load3 = load i32, i32* %9, align 8
  %bf.lshr = lshr i32 %bf.load3, 27
  %bf.clear4 = and i32 %bf.lshr, 1
  %10 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %11 = bitcast %struct.rtx_def* %10 to i32*
  %bf.load5 = load i32, i32* %11, align 8
  %bf.value = and i32 %bf.clear4, 1
  %bf.shl = shl i32 %bf.value, 27
  %bf.clear6 = and i32 %bf.load5, -134217729
  %bf.set = or i32 %bf.clear6, %bf.shl
  store i32 %bf.set, i32* %11, align 8
  %12 = load %struct.rtx_def*, %struct.rtx_def** %dstref.addr, align 8
  %13 = bitcast %struct.rtx_def* %12 to i32*
  %bf.load7 = load i32, i32* %13, align 8
  %bf.lshr8 = lshr i32 %bf.load7, 28
  %bf.clear9 = and i32 %bf.lshr8, 1
  %14 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %15 = bitcast %struct.rtx_def* %14 to i32*
  %bf.load10 = load i32, i32* %15, align 8
  %bf.value11 = and i32 %bf.clear9, 1
  %bf.shl12 = shl i32 %bf.value11, 28
  %bf.clear13 = and i32 %bf.load10, -268435457
  %bf.set14 = or i32 %bf.clear13, %bf.shl12
  store i32 %bf.set14, i32* %15, align 8
  %16 = load %struct.rtx_def*, %struct.rtx_def** %dstref.addr, align 8
  %17 = bitcast %struct.rtx_def* %16 to i32*
  %bf.load15 = load i32, i32* %17, align 8
  %bf.lshr16 = lshr i32 %bf.load15, 31
  %18 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %19 = bitcast %struct.rtx_def* %18 to i32*
  %bf.load17 = load i32, i32* %19, align 8
  %bf.value18 = and i32 %bf.lshr16, 1
  %bf.shl19 = shl i32 %bf.value18, 31
  %bf.clear20 = and i32 %bf.load17, 2147483647
  %bf.set21 = or i32 %bf.clear20, %bf.shl19
  store i32 %bf.set21, i32* %19, align 8
  %20 = load %struct.rtx_def*, %struct.rtx_def** %dstref.addr, align 8
  %21 = bitcast %struct.rtx_def* %20 to i32*
  %bf.load22 = load i32, i32* %21, align 8
  %bf.lshr23 = lshr i32 %bf.load22, 26
  %bf.clear24 = and i32 %bf.lshr23, 1
  %22 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %23 = bitcast %struct.rtx_def* %22 to i32*
  %bf.load25 = load i32, i32* %23, align 8
  %bf.value26 = and i32 %bf.clear24, 1
  %bf.shl27 = shl i32 %bf.value26, 26
  %bf.clear28 = and i32 %bf.load25, -67108865
  %bf.set29 = or i32 %bf.clear28, %bf.shl27
  store i32 %bf.set29, i32* %23, align 8
  %24 = load %struct.rtx_def*, %struct.rtx_def** %dstref.addr, align 8
  %25 = bitcast %struct.rtx_def* %24 to i32*
  %bf.load30 = load i32, i32* %25, align 8
  %bf.lshr31 = lshr i32 %bf.load30, 24
  %bf.clear32 = and i32 %bf.lshr31, 1
  %26 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %27 = bitcast %struct.rtx_def* %26 to i32*
  %bf.load33 = load i32, i32* %27, align 8
  %bf.value34 = and i32 %bf.clear32, 1
  %bf.shl35 = shl i32 %bf.value34, 24
  %bf.clear36 = and i32 %bf.load33, -16777217
  %bf.set37 = or i32 %bf.clear36, %bf.shl35
  store i32 %bf.set37, i32* %27, align 8
  %28 = load %struct.rtx_def*, %struct.rtx_def** %dstref.addr, align 8
  %fld38 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1
  %arrayidx39 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld38, i32 0, i64 1
  %rtmem = bitcast %union.rtunion_def* %arrayidx39 to %struct.mem_attrs**
  %29 = load %struct.mem_attrs*, %struct.mem_attrs** %rtmem, align 8
  %30 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld40 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %30, i32 0, i32 1
  %arrayidx41 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld40, i32 0, i64 1
  %rtmem42 = bitcast %union.rtunion_def* %arrayidx41 to %struct.mem_attrs**
  store %struct.mem_attrs* %29, %struct.mem_attrs** %rtmem42, align 8
  br label %if.end.95

if.else:                                          ; preds = %land.lhs.true, %entry
  %31 = load i32, i32* %code, align 4
  %cmp43 = icmp eq i32 %31, 66
  br i1 %cmp43, label %land.lhs.true.44, label %if.end

land.lhs.true.44:                                 ; preds = %if.else
  %32 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld45 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %32, i32 0, i32 1
  %arrayidx46 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld45, i32 0, i64 0
  %rtx47 = bitcast %union.rtunion_def* %arrayidx46 to %struct.rtx_def**
  %33 = load %struct.rtx_def*, %struct.rtx_def** %rtx47, align 8
  %34 = load %struct.rtx_def*, %struct.rtx_def** %srcreg.addr, align 8
  %cmp48 = icmp eq %struct.rtx_def* %33, %34
  br i1 %cmp48, label %if.then.49, label %if.end

if.then.49:                                       ; preds = %land.lhs.true.44
  %35 = load %struct.rtx_def*, %struct.rtx_def** %srcref.addr, align 8
  %36 = bitcast %struct.rtx_def* %35 to i32*
  %bf.load50 = load i32, i32* %36, align 8
  %bf.lshr51 = lshr i32 %bf.load50, 27
  %bf.clear52 = and i32 %bf.lshr51, 1
  %37 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %38 = bitcast %struct.rtx_def* %37 to i32*
  %bf.load53 = load i32, i32* %38, align 8
  %bf.value54 = and i32 %bf.clear52, 1
  %bf.shl55 = shl i32 %bf.value54, 27
  %bf.clear56 = and i32 %bf.load53, -134217729
  %bf.set57 = or i32 %bf.clear56, %bf.shl55
  store i32 %bf.set57, i32* %38, align 8
  %39 = load %struct.rtx_def*, %struct.rtx_def** %srcref.addr, align 8
  %40 = bitcast %struct.rtx_def* %39 to i32*
  %bf.load58 = load i32, i32* %40, align 8
  %bf.lshr59 = lshr i32 %bf.load58, 28
  %bf.clear60 = and i32 %bf.lshr59, 1
  %41 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %42 = bitcast %struct.rtx_def* %41 to i32*
  %bf.load61 = load i32, i32* %42, align 8
  %bf.value62 = and i32 %bf.clear60, 1
  %bf.shl63 = shl i32 %bf.value62, 28
  %bf.clear64 = and i32 %bf.load61, -268435457
  %bf.set65 = or i32 %bf.clear64, %bf.shl63
  store i32 %bf.set65, i32* %42, align 8
  %43 = load %struct.rtx_def*, %struct.rtx_def** %srcref.addr, align 8
  %44 = bitcast %struct.rtx_def* %43 to i32*
  %bf.load66 = load i32, i32* %44, align 8
  %bf.lshr67 = lshr i32 %bf.load66, 31
  %45 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %46 = bitcast %struct.rtx_def* %45 to i32*
  %bf.load68 = load i32, i32* %46, align 8
  %bf.value69 = and i32 %bf.lshr67, 1
  %bf.shl70 = shl i32 %bf.value69, 31
  %bf.clear71 = and i32 %bf.load68, 2147483647
  %bf.set72 = or i32 %bf.clear71, %bf.shl70
  store i32 %bf.set72, i32* %46, align 8
  %47 = load %struct.rtx_def*, %struct.rtx_def** %srcref.addr, align 8
  %48 = bitcast %struct.rtx_def* %47 to i32*
  %bf.load73 = load i32, i32* %48, align 8
  %bf.lshr74 = lshr i32 %bf.load73, 26
  %bf.clear75 = and i32 %bf.lshr74, 1
  %49 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %50 = bitcast %struct.rtx_def* %49 to i32*
  %bf.load76 = load i32, i32* %50, align 8
  %bf.value77 = and i32 %bf.clear75, 1
  %bf.shl78 = shl i32 %bf.value77, 26
  %bf.clear79 = and i32 %bf.load76, -67108865
  %bf.set80 = or i32 %bf.clear79, %bf.shl78
  store i32 %bf.set80, i32* %50, align 8
  %51 = load %struct.rtx_def*, %struct.rtx_def** %srcref.addr, align 8
  %52 = bitcast %struct.rtx_def* %51 to i32*
  %bf.load81 = load i32, i32* %52, align 8
  %bf.lshr82 = lshr i32 %bf.load81, 24
  %bf.clear83 = and i32 %bf.lshr82, 1
  %53 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %54 = bitcast %struct.rtx_def* %53 to i32*
  %bf.load84 = load i32, i32* %54, align 8
  %bf.value85 = and i32 %bf.clear83, 1
  %bf.shl86 = shl i32 %bf.value85, 24
  %bf.clear87 = and i32 %bf.load84, -16777217
  %bf.set88 = or i32 %bf.clear87, %bf.shl86
  store i32 %bf.set88, i32* %54, align 8
  %55 = load %struct.rtx_def*, %struct.rtx_def** %srcref.addr, align 8
  %fld89 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %55, i32 0, i32 1
  %arrayidx90 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld89, i32 0, i64 1
  %rtmem91 = bitcast %union.rtunion_def* %arrayidx90 to %struct.mem_attrs**
  %56 = load %struct.mem_attrs*, %struct.mem_attrs** %rtmem91, align 8
  %57 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld92 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %57, i32 0, i32 1
  %arrayidx93 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld92, i32 0, i64 1
  %rtmem94 = bitcast %union.rtunion_def* %arrayidx93 to %struct.mem_attrs**
  store %struct.mem_attrs* %56, %struct.mem_attrs** %rtmem94, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.49, %land.lhs.true.44, %if.else
  br label %if.end.95

if.end.95:                                        ; preds = %if.end, %if.then
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.128, %if.end.95
  %58 = load i32, i32* %i, align 4
  %59 = load i32, i32* %code, align 4
  %idxprom96 = sext i32 %59 to i64
  %arrayidx97 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_length, i32 0, i64 %idxprom96
  %60 = load i8, i8* %arrayidx97, align 1
  %conv = zext i8 %60 to i32
  %cmp98 = icmp slt i32 %58, %conv
  br i1 %cmp98, label %for.body, label %for.end.129

for.body:                                         ; preds = %for.cond
  %61 = load i8*, i8** %format_ptr, align 8
  %62 = load i8, i8* %61, align 1
  %conv100 = sext i8 %62 to i32
  %cmp101 = icmp eq i32 %conv100, 101
  br i1 %cmp101, label %if.then.103, label %if.else.108

if.then.103:                                      ; preds = %for.body
  %63 = load i32, i32* %i, align 4
  %idxprom104 = sext i32 %63 to i64
  %64 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld105 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %64, i32 0, i32 1
  %arrayidx106 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld105, i32 0, i64 %idxprom104
  %rtx107 = bitcast %union.rtunion_def* %arrayidx106 to %struct.rtx_def**
  %65 = load %struct.rtx_def*, %struct.rtx_def** %rtx107, align 8
  %66 = load %struct.rtx_def*, %struct.rtx_def** %dstref.addr, align 8
  %67 = load %struct.rtx_def*, %struct.rtx_def** %srcref.addr, align 8
  %68 = load %struct.rtx_def*, %struct.rtx_def** %dstreg.addr, align 8
  %69 = load %struct.rtx_def*, %struct.rtx_def** %srcreg.addr, align 8
  call void @ix86_set_move_mem_attrs_1(%struct.rtx_def* %65, %struct.rtx_def* %66, %struct.rtx_def* %67, %struct.rtx_def* %68, %struct.rtx_def* %69)
  br label %if.end.127

if.else.108:                                      ; preds = %for.body
  %70 = load i8*, i8** %format_ptr, align 8
  %71 = load i8, i8* %70, align 1
  %conv109 = sext i8 %71 to i32
  %cmp110 = icmp eq i32 %conv109, 69
  br i1 %cmp110, label %if.then.112, label %if.end.126

if.then.112:                                      ; preds = %if.else.108
  %72 = load i32, i32* %i, align 4
  %idxprom113 = sext i32 %72 to i64
  %73 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld114 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %73, i32 0, i32 1
  %arrayidx115 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld114, i32 0, i64 %idxprom113
  %rtvec = bitcast %union.rtunion_def* %arrayidx115 to %struct.rtvec_def**
  %74 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec, align 8
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %74, i32 0, i32 0
  %75 = load i32, i32* %num_elem, align 4
  %sub = sub nsw i32 %75, 1
  store i32 %sub, i32* %j, align 4
  br label %for.cond.116

for.cond.116:                                     ; preds = %for.inc, %if.then.112
  %76 = load i32, i32* %j, align 4
  %cmp117 = icmp sge i32 %76, 0
  br i1 %cmp117, label %for.body.119, label %for.end

for.body.119:                                     ; preds = %for.cond.116
  %77 = load i32, i32* %j, align 4
  %idxprom120 = sext i32 %77 to i64
  %78 = load i32, i32* %i, align 4
  %idxprom121 = sext i32 %78 to i64
  %79 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld122 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %79, i32 0, i32 1
  %arrayidx123 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld122, i32 0, i64 %idxprom121
  %rtvec124 = bitcast %union.rtunion_def* %arrayidx123 to %struct.rtvec_def**
  %80 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec124, align 8
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %80, i32 0, i32 1
  %arrayidx125 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i32 0, i64 %idxprom120
  %81 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx125, align 8
  %82 = load %struct.rtx_def*, %struct.rtx_def** %dstref.addr, align 8
  %83 = load %struct.rtx_def*, %struct.rtx_def** %srcref.addr, align 8
  %84 = load %struct.rtx_def*, %struct.rtx_def** %dstreg.addr, align 8
  %85 = load %struct.rtx_def*, %struct.rtx_def** %srcreg.addr, align 8
  call void @ix86_set_move_mem_attrs_1(%struct.rtx_def* %81, %struct.rtx_def* %82, %struct.rtx_def* %83, %struct.rtx_def* %84, %struct.rtx_def* %85)
  br label %for.inc

for.inc:                                          ; preds = %for.body.119
  %86 = load i32, i32* %j, align 4
  %dec = add nsw i32 %86, -1
  store i32 %dec, i32* %j, align 4
  br label %for.cond.116

for.end:                                          ; preds = %for.cond.116
  br label %if.end.126

if.end.126:                                       ; preds = %for.end, %if.else.108
  br label %if.end.127

if.end.127:                                       ; preds = %if.end.126, %if.then.103
  br label %for.inc.128

for.inc.128:                                      ; preds = %if.end.127
  %87 = load i32, i32* %i, align 4
  %inc = add nsw i32 %87, 1
  store i32 %inc, i32* %i, align 4
  %88 = load i8*, i8** %format_ptr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %88, i32 1
  store i8* %incdec.ptr, i8** %format_ptr, align 8
  br label %for.cond

for.end.129:                                      ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @ix86_constant_alignment(%union.tree_node* %exp, i32 %align) #1 {
entry:
  %retval = alloca i32, align 4
  %exp.addr = alloca %union.tree_node*, align 8
  %align.addr = alloca i32, align 4
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  store i32 %align, i32* %align.addr, align 4
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 26
  br i1 %cmp, label %if.then, label %if.else.55

if.then:                                          ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common1 = bitcast %union.tree_node* %1 to %struct.tree_common*
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1, i32 0, i32 1
  %2 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type2 = bitcast %union.tree_node* %2 to %struct.tree_type*
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type2, i32 0, i32 6
  %bf.load3 = load i32, i32* %mode, align 4
  %bf.lshr = lshr i32 %bf.load3, 9
  %bf.clear4 = and i32 %bf.lshr, 127
  %cmp5 = icmp eq i32 %bf.clear4, 16
  br i1 %cmp5, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.then
  %3 = load i32, i32* %align.addr, align 4
  %cmp6 = icmp slt i32 %3, 64
  br i1 %cmp6, label %if.then.7, label %if.else

if.then.7:                                        ; preds = %land.lhs.true
  store i32 64, i32* %retval
  br label %return

if.else:                                          ; preds = %land.lhs.true, %if.then
  %4 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common8 = bitcast %union.tree_node* %4 to %struct.tree_common*
  %type9 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common8, i32 0, i32 1
  %5 = load %union.tree_node*, %union.tree_node** %type9, align 8
  %type10 = bitcast %union.tree_node* %5 to %struct.tree_type*
  %mode11 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type10, i32 0, i32 6
  %bf.load12 = load i32, i32* %mode11, align 4
  %bf.lshr13 = lshr i32 %bf.load12, 9
  %bf.clear14 = and i32 %bf.lshr13, 127
  %cmp15 = icmp eq i32 %bf.clear14, 17
  br i1 %cmp15, label %land.lhs.true.51, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %6 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common16 = bitcast %union.tree_node* %6 to %struct.tree_common*
  %type17 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common16, i32 0, i32 1
  %7 = load %union.tree_node*, %union.tree_node** %type17, align 8
  %type18 = bitcast %union.tree_node* %7 to %struct.tree_type*
  %mode19 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type18, i32 0, i32 6
  %bf.load20 = load i32, i32* %mode19, align 4
  %bf.lshr21 = lshr i32 %bf.load20, 9
  %bf.clear22 = and i32 %bf.lshr21, 127
  %cmp23 = icmp eq i32 %bf.clear22, 18
  br i1 %cmp23, label %land.lhs.true.51, label %lor.lhs.false.24

lor.lhs.false.24:                                 ; preds = %lor.lhs.false
  %8 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common25 = bitcast %union.tree_node* %8 to %struct.tree_common*
  %type26 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common25, i32 0, i32 1
  %9 = load %union.tree_node*, %union.tree_node** %type26, align 8
  %type27 = bitcast %union.tree_node* %9 to %struct.tree_type*
  %mode28 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type27, i32 0, i32 6
  %bf.load29 = load i32, i32* %mode28, align 4
  %bf.lshr30 = lshr i32 %bf.load29, 9
  %bf.clear31 = and i32 %bf.lshr30, 127
  %cmp32 = icmp eq i32 %bf.clear31, 6
  br i1 %cmp32, label %land.lhs.true.51, label %lor.lhs.false.33

lor.lhs.false.33:                                 ; preds = %lor.lhs.false.24
  %10 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common34 = bitcast %union.tree_node* %10 to %struct.tree_common*
  %type35 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common34, i32 0, i32 1
  %11 = load %union.tree_node*, %union.tree_node** %type35, align 8
  %type36 = bitcast %union.tree_node* %11 to %struct.tree_type*
  %mode37 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type36, i32 0, i32 6
  %bf.load38 = load i32, i32* %mode37, align 4
  %bf.lshr39 = lshr i32 %bf.load38, 9
  %bf.clear40 = and i32 %bf.lshr39, 127
  %cmp41 = icmp eq i32 %bf.clear40, 46
  br i1 %cmp41, label %land.lhs.true.51, label %lor.lhs.false.42

lor.lhs.false.42:                                 ; preds = %lor.lhs.false.33
  %12 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common43 = bitcast %union.tree_node* %12 to %struct.tree_common*
  %type44 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common43, i32 0, i32 1
  %13 = load %union.tree_node*, %union.tree_node** %type44, align 8
  %type45 = bitcast %union.tree_node* %13 to %struct.tree_type*
  %mode46 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type45, i32 0, i32 6
  %bf.load47 = load i32, i32* %mode46, align 4
  %bf.lshr48 = lshr i32 %bf.load47, 9
  %bf.clear49 = and i32 %bf.lshr48, 127
  %cmp50 = icmp eq i32 %bf.clear49, 37
  br i1 %cmp50, label %land.lhs.true.51, label %if.end

land.lhs.true.51:                                 ; preds = %lor.lhs.false.42, %lor.lhs.false.33, %lor.lhs.false.24, %lor.lhs.false, %if.else
  %14 = load i32, i32* %align.addr, align 4
  %cmp52 = icmp slt i32 %14, 128
  br i1 %cmp52, label %if.then.53, label %if.end

if.then.53:                                       ; preds = %land.lhs.true.51
  store i32 128, i32* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true.51, %lor.lhs.false.42
  br label %if.end.54

if.end.54:                                        ; preds = %if.end
  br label %if.end.67

if.else.55:                                       ; preds = %entry
  %15 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common56 = bitcast %union.tree_node* %15 to %struct.tree_common*
  %code57 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common56, i32 0, i32 2
  %bf.load58 = load i32, i32* %code57, align 8
  %bf.clear59 = and i32 %bf.load58, 255
  %cmp60 = icmp eq i32 %bf.clear59, 29
  br i1 %cmp60, label %land.lhs.true.61, label %if.end.66

land.lhs.true.61:                                 ; preds = %if.else.55
  %16 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %string = bitcast %union.tree_node* %16 to %struct.tree_string*
  %length = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string, i32 0, i32 2
  %17 = load i32, i32* %length, align 4
  %cmp62 = icmp sge i32 %17, 31
  br i1 %cmp62, label %land.lhs.true.63, label %if.end.66

land.lhs.true.63:                                 ; preds = %land.lhs.true.61
  %18 = load i32, i32* %align.addr, align 4
  %cmp64 = icmp slt i32 %18, 256
  br i1 %cmp64, label %if.then.65, label %if.end.66

if.then.65:                                       ; preds = %land.lhs.true.63
  store i32 256, i32* %retval
  br label %return

if.end.66:                                        ; preds = %land.lhs.true.63, %land.lhs.true.61, %if.else.55
  br label %if.end.67

if.end.67:                                        ; preds = %if.end.66, %if.end.54
  %19 = load i32, i32* %align.addr, align 4
  store i32 %19, i32* %retval
  br label %return

return:                                           ; preds = %if.end.67, %if.then.65, %if.then.53, %if.then.7
  %20 = load i32, i32* %retval
  ret i32 %20
}

; Function Attrs: nounwind uwtable
define i32 @ix86_data_alignment(%union.tree_node* %type, i32 %align) #1 {
entry:
  %retval = alloca i32, align 4
  %type.addr = alloca %union.tree_node*, align 8
  %align.addr = alloca i32, align 4
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  store i32 %align, i32* %align.addr, align 4
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 18
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common1 = bitcast %union.tree_node* %1 to %struct.tree_common*
  %code2 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1, i32 0, i32 2
  %bf.load3 = load i32, i32* %code2, align 8
  %bf.clear4 = and i32 %bf.load3, 255
  %cmp5 = icmp eq i32 %bf.clear4, 20
  br i1 %cmp5, label %land.lhs.true, label %lor.lhs.false.6

lor.lhs.false.6:                                  ; preds = %lor.lhs.false
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common7 = bitcast %union.tree_node* %2 to %struct.tree_common*
  %code8 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common7, i32 0, i32 2
  %bf.load9 = load i32, i32* %code8, align 8
  %bf.clear10 = and i32 %bf.load9, 255
  %cmp11 = icmp eq i32 %bf.clear10, 21
  br i1 %cmp11, label %land.lhs.true, label %lor.lhs.false.12

lor.lhs.false.12:                                 ; preds = %lor.lhs.false.6
  %3 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common13 = bitcast %union.tree_node* %3 to %struct.tree_common*
  %code14 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common13, i32 0, i32 2
  %bf.load15 = load i32, i32* %code14, align 8
  %bf.clear16 = and i32 %bf.load15, 255
  %cmp17 = icmp eq i32 %bf.clear16, 22
  br i1 %cmp17, label %land.lhs.true, label %lor.lhs.false.18

lor.lhs.false.18:                                 ; preds = %lor.lhs.false.12
  %4 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common19 = bitcast %union.tree_node* %4 to %struct.tree_common*
  %code20 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common19, i32 0, i32 2
  %bf.load21 = load i32, i32* %code20, align 8
  %bf.clear22 = and i32 %bf.load21, 255
  %cmp23 = icmp eq i32 %bf.clear22, 19
  br i1 %cmp23, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.lhs.false.18, %lor.lhs.false.12, %lor.lhs.false.6, %lor.lhs.false, %entry
  %5 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type24 = bitcast %union.tree_node* %5 to %struct.tree_type*
  %size = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type24, i32 0, i32 2
  %6 = load %union.tree_node*, %union.tree_node** %size, align 8
  %tobool = icmp ne %union.tree_node* %6, null
  br i1 %tobool, label %land.lhs.true.25, label %if.end

land.lhs.true.25:                                 ; preds = %land.lhs.true
  %7 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type26 = bitcast %union.tree_node* %7 to %struct.tree_type*
  %size27 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type26, i32 0, i32 2
  %8 = load %union.tree_node*, %union.tree_node** %size27, align 8
  %common28 = bitcast %union.tree_node* %8 to %struct.tree_common*
  %code29 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common28, i32 0, i32 2
  %bf.load30 = load i32, i32* %code29, align 8
  %bf.clear31 = and i32 %bf.load30, 255
  %cmp32 = icmp eq i32 %bf.clear31, 25
  br i1 %cmp32, label %land.lhs.true.33, label %if.end

land.lhs.true.33:                                 ; preds = %land.lhs.true.25
  %9 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type34 = bitcast %union.tree_node* %9 to %struct.tree_type*
  %size35 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type34, i32 0, i32 2
  %10 = load %union.tree_node*, %union.tree_node** %size35, align 8
  %int_cst = bitcast %union.tree_node* %10 to %struct.tree_int_cst*
  %int_cst36 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 2
  %low = getelementptr inbounds %struct.anon, %struct.anon* %int_cst36, i32 0, i32 0
  %11 = load i64, i64* %low, align 8
  %cmp37 = icmp uge i64 %11, 256
  br i1 %cmp37, label %land.lhs.true.44, label %lor.lhs.false.38

lor.lhs.false.38:                                 ; preds = %land.lhs.true.33
  %12 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type39 = bitcast %union.tree_node* %12 to %struct.tree_type*
  %size40 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type39, i32 0, i32 2
  %13 = load %union.tree_node*, %union.tree_node** %size40, align 8
  %int_cst41 = bitcast %union.tree_node* %13 to %struct.tree_int_cst*
  %int_cst42 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst41, i32 0, i32 2
  %high = getelementptr inbounds %struct.anon, %struct.anon* %int_cst42, i32 0, i32 1
  %14 = load i64, i64* %high, align 8
  %tobool43 = icmp ne i64 %14, 0
  br i1 %tobool43, label %land.lhs.true.44, label %if.end

land.lhs.true.44:                                 ; preds = %lor.lhs.false.38, %land.lhs.true.33
  %15 = load i32, i32* %align.addr, align 4
  %cmp45 = icmp slt i32 %15, 256
  br i1 %cmp45, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true.44
  store i32 256, i32* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true.44, %lor.lhs.false.38, %land.lhs.true.25, %land.lhs.true, %lor.lhs.false.18
  %16 = load i32, i32* @target_flags, align 4
  %and = and i32 %16, 33554432
  %tobool46 = icmp ne i32 %and, 0
  br i1 %tobool46, label %if.then.47, label %if.end.107

if.then.47:                                       ; preds = %if.end
  %17 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common48 = bitcast %union.tree_node* %17 to %struct.tree_common*
  %code49 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common48, i32 0, i32 2
  %bf.load50 = load i32, i32* %code49, align 8
  %bf.clear51 = and i32 %bf.load50, 255
  %cmp52 = icmp eq i32 %bf.clear51, 18
  br i1 %cmp52, label %land.lhs.true.77, label %lor.lhs.false.53

lor.lhs.false.53:                                 ; preds = %if.then.47
  %18 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common54 = bitcast %union.tree_node* %18 to %struct.tree_common*
  %code55 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common54, i32 0, i32 2
  %bf.load56 = load i32, i32* %code55, align 8
  %bf.clear57 = and i32 %bf.load56, 255
  %cmp58 = icmp eq i32 %bf.clear57, 20
  br i1 %cmp58, label %land.lhs.true.77, label %lor.lhs.false.59

lor.lhs.false.59:                                 ; preds = %lor.lhs.false.53
  %19 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common60 = bitcast %union.tree_node* %19 to %struct.tree_common*
  %code61 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common60, i32 0, i32 2
  %bf.load62 = load i32, i32* %code61, align 8
  %bf.clear63 = and i32 %bf.load62, 255
  %cmp64 = icmp eq i32 %bf.clear63, 21
  br i1 %cmp64, label %land.lhs.true.77, label %lor.lhs.false.65

lor.lhs.false.65:                                 ; preds = %lor.lhs.false.59
  %20 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common66 = bitcast %union.tree_node* %20 to %struct.tree_common*
  %code67 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common66, i32 0, i32 2
  %bf.load68 = load i32, i32* %code67, align 8
  %bf.clear69 = and i32 %bf.load68, 255
  %cmp70 = icmp eq i32 %bf.clear69, 22
  br i1 %cmp70, label %land.lhs.true.77, label %lor.lhs.false.71

lor.lhs.false.71:                                 ; preds = %lor.lhs.false.65
  %21 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common72 = bitcast %union.tree_node* %21 to %struct.tree_common*
  %code73 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common72, i32 0, i32 2
  %bf.load74 = load i32, i32* %code73, align 8
  %bf.clear75 = and i32 %bf.load74, 255
  %cmp76 = icmp eq i32 %bf.clear75, 19
  br i1 %cmp76, label %land.lhs.true.77, label %if.end.106

land.lhs.true.77:                                 ; preds = %lor.lhs.false.71, %lor.lhs.false.65, %lor.lhs.false.59, %lor.lhs.false.53, %if.then.47
  %22 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type78 = bitcast %union.tree_node* %22 to %struct.tree_type*
  %size79 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type78, i32 0, i32 2
  %23 = load %union.tree_node*, %union.tree_node** %size79, align 8
  %tobool80 = icmp ne %union.tree_node* %23, null
  br i1 %tobool80, label %land.lhs.true.81, label %if.end.106

land.lhs.true.81:                                 ; preds = %land.lhs.true.77
  %24 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type82 = bitcast %union.tree_node* %24 to %struct.tree_type*
  %size83 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type82, i32 0, i32 2
  %25 = load %union.tree_node*, %union.tree_node** %size83, align 8
  %common84 = bitcast %union.tree_node* %25 to %struct.tree_common*
  %code85 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common84, i32 0, i32 2
  %bf.load86 = load i32, i32* %code85, align 8
  %bf.clear87 = and i32 %bf.load86, 255
  %cmp88 = icmp eq i32 %bf.clear87, 25
  br i1 %cmp88, label %land.lhs.true.89, label %if.end.106

land.lhs.true.89:                                 ; preds = %land.lhs.true.81
  %26 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type90 = bitcast %union.tree_node* %26 to %struct.tree_type*
  %size91 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type90, i32 0, i32 2
  %27 = load %union.tree_node*, %union.tree_node** %size91, align 8
  %int_cst92 = bitcast %union.tree_node* %27 to %struct.tree_int_cst*
  %int_cst93 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst92, i32 0, i32 2
  %low94 = getelementptr inbounds %struct.anon, %struct.anon* %int_cst93, i32 0, i32 0
  %28 = load i64, i64* %low94, align 8
  %cmp95 = icmp uge i64 %28, 128
  br i1 %cmp95, label %land.lhs.true.103, label %lor.lhs.false.96

lor.lhs.false.96:                                 ; preds = %land.lhs.true.89
  %29 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type97 = bitcast %union.tree_node* %29 to %struct.tree_type*
  %size98 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type97, i32 0, i32 2
  %30 = load %union.tree_node*, %union.tree_node** %size98, align 8
  %int_cst99 = bitcast %union.tree_node* %30 to %struct.tree_int_cst*
  %int_cst100 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst99, i32 0, i32 2
  %high101 = getelementptr inbounds %struct.anon, %struct.anon* %int_cst100, i32 0, i32 1
  %31 = load i64, i64* %high101, align 8
  %tobool102 = icmp ne i64 %31, 0
  br i1 %tobool102, label %land.lhs.true.103, label %if.end.106

land.lhs.true.103:                                ; preds = %lor.lhs.false.96, %land.lhs.true.89
  %32 = load i32, i32* %align.addr, align 4
  %cmp104 = icmp slt i32 %32, 128
  br i1 %cmp104, label %if.then.105, label %if.end.106

if.then.105:                                      ; preds = %land.lhs.true.103
  store i32 128, i32* %retval
  br label %return

if.end.106:                                       ; preds = %land.lhs.true.103, %lor.lhs.false.96, %land.lhs.true.81, %land.lhs.true.77, %lor.lhs.false.71
  br label %if.end.107

if.end.107:                                       ; preds = %if.end.106, %if.end
  %33 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common108 = bitcast %union.tree_node* %33 to %struct.tree_common*
  %code109 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common108, i32 0, i32 2
  %bf.load110 = load i32, i32* %code109, align 8
  %bf.clear111 = and i32 %bf.load110, 255
  %cmp112 = icmp eq i32 %bf.clear111, 18
  br i1 %cmp112, label %if.then.113, label %if.else

if.then.113:                                      ; preds = %if.end.107
  %34 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common114 = bitcast %union.tree_node* %34 to %struct.tree_common*
  %type115 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common114, i32 0, i32 1
  %35 = load %union.tree_node*, %union.tree_node** %type115, align 8
  %type116 = bitcast %union.tree_node* %35 to %struct.tree_type*
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type116, i32 0, i32 6
  %bf.load117 = load i32, i32* %mode, align 4
  %bf.lshr = lshr i32 %bf.load117, 9
  %bf.clear118 = and i32 %bf.lshr, 127
  %cmp119 = icmp eq i32 %bf.clear118, 16
  br i1 %cmp119, label %land.lhs.true.120, label %if.end.123

land.lhs.true.120:                                ; preds = %if.then.113
  %36 = load i32, i32* %align.addr, align 4
  %cmp121 = icmp slt i32 %36, 64
  br i1 %cmp121, label %if.then.122, label %if.end.123

if.then.122:                                      ; preds = %land.lhs.true.120
  store i32 64, i32* %retval
  br label %return

if.end.123:                                       ; preds = %land.lhs.true.120, %if.then.113
  %37 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common124 = bitcast %union.tree_node* %37 to %struct.tree_common*
  %type125 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common124, i32 0, i32 1
  %38 = load %union.tree_node*, %union.tree_node** %type125, align 8
  %type126 = bitcast %union.tree_node* %38 to %struct.tree_type*
  %mode127 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type126, i32 0, i32 6
  %bf.load128 = load i32, i32* %mode127, align 4
  %bf.lshr129 = lshr i32 %bf.load128, 9
  %bf.clear130 = and i32 %bf.lshr129, 127
  %cmp131 = icmp eq i32 %bf.clear130, 17
  br i1 %cmp131, label %land.lhs.true.168, label %lor.lhs.false.132

lor.lhs.false.132:                                ; preds = %if.end.123
  %39 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common133 = bitcast %union.tree_node* %39 to %struct.tree_common*
  %type134 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common133, i32 0, i32 1
  %40 = load %union.tree_node*, %union.tree_node** %type134, align 8
  %type135 = bitcast %union.tree_node* %40 to %struct.tree_type*
  %mode136 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type135, i32 0, i32 6
  %bf.load137 = load i32, i32* %mode136, align 4
  %bf.lshr138 = lshr i32 %bf.load137, 9
  %bf.clear139 = and i32 %bf.lshr138, 127
  %cmp140 = icmp eq i32 %bf.clear139, 18
  br i1 %cmp140, label %land.lhs.true.168, label %lor.lhs.false.141

lor.lhs.false.141:                                ; preds = %lor.lhs.false.132
  %41 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common142 = bitcast %union.tree_node* %41 to %struct.tree_common*
  %type143 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common142, i32 0, i32 1
  %42 = load %union.tree_node*, %union.tree_node** %type143, align 8
  %type144 = bitcast %union.tree_node* %42 to %struct.tree_type*
  %mode145 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type144, i32 0, i32 6
  %bf.load146 = load i32, i32* %mode145, align 4
  %bf.lshr147 = lshr i32 %bf.load146, 9
  %bf.clear148 = and i32 %bf.lshr147, 127
  %cmp149 = icmp eq i32 %bf.clear148, 6
  br i1 %cmp149, label %land.lhs.true.168, label %lor.lhs.false.150

lor.lhs.false.150:                                ; preds = %lor.lhs.false.141
  %43 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common151 = bitcast %union.tree_node* %43 to %struct.tree_common*
  %type152 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common151, i32 0, i32 1
  %44 = load %union.tree_node*, %union.tree_node** %type152, align 8
  %type153 = bitcast %union.tree_node* %44 to %struct.tree_type*
  %mode154 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type153, i32 0, i32 6
  %bf.load155 = load i32, i32* %mode154, align 4
  %bf.lshr156 = lshr i32 %bf.load155, 9
  %bf.clear157 = and i32 %bf.lshr156, 127
  %cmp158 = icmp eq i32 %bf.clear157, 46
  br i1 %cmp158, label %land.lhs.true.168, label %lor.lhs.false.159

lor.lhs.false.159:                                ; preds = %lor.lhs.false.150
  %45 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common160 = bitcast %union.tree_node* %45 to %struct.tree_common*
  %type161 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common160, i32 0, i32 1
  %46 = load %union.tree_node*, %union.tree_node** %type161, align 8
  %type162 = bitcast %union.tree_node* %46 to %struct.tree_type*
  %mode163 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type162, i32 0, i32 6
  %bf.load164 = load i32, i32* %mode163, align 4
  %bf.lshr165 = lshr i32 %bf.load164, 9
  %bf.clear166 = and i32 %bf.lshr165, 127
  %cmp167 = icmp eq i32 %bf.clear166, 37
  br i1 %cmp167, label %land.lhs.true.168, label %if.end.171

land.lhs.true.168:                                ; preds = %lor.lhs.false.159, %lor.lhs.false.150, %lor.lhs.false.141, %lor.lhs.false.132, %if.end.123
  %47 = load i32, i32* %align.addr, align 4
  %cmp169 = icmp slt i32 %47, 128
  br i1 %cmp169, label %if.then.170, label %if.end.171

if.then.170:                                      ; preds = %land.lhs.true.168
  store i32 128, i32* %retval
  br label %return

if.end.171:                                       ; preds = %land.lhs.true.168, %lor.lhs.false.159
  br label %if.end.348

if.else:                                          ; preds = %if.end.107
  %48 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common172 = bitcast %union.tree_node* %48 to %struct.tree_common*
  %code173 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common172, i32 0, i32 2
  %bf.load174 = load i32, i32* %code173, align 8
  %bf.clear175 = and i32 %bf.load174, 255
  %cmp176 = icmp eq i32 %bf.clear175, 8
  br i1 %cmp176, label %if.then.177, label %if.else.198

if.then.177:                                      ; preds = %if.else
  %49 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type178 = bitcast %union.tree_node* %49 to %struct.tree_type*
  %mode179 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type178, i32 0, i32 6
  %bf.load180 = load i32, i32* %mode179, align 4
  %bf.lshr181 = lshr i32 %bf.load180, 9
  %bf.clear182 = and i32 %bf.lshr181, 127
  %cmp183 = icmp eq i32 %bf.clear182, 22
  br i1 %cmp183, label %land.lhs.true.184, label %if.end.187

land.lhs.true.184:                                ; preds = %if.then.177
  %50 = load i32, i32* %align.addr, align 4
  %cmp185 = icmp slt i32 %50, 64
  br i1 %cmp185, label %if.then.186, label %if.end.187

if.then.186:                                      ; preds = %land.lhs.true.184
  store i32 64, i32* %retval
  br label %return

if.end.187:                                       ; preds = %land.lhs.true.184, %if.then.177
  %51 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type188 = bitcast %union.tree_node* %51 to %struct.tree_type*
  %mode189 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type188, i32 0, i32 6
  %bf.load190 = load i32, i32* %mode189, align 4
  %bf.lshr191 = lshr i32 %bf.load190, 9
  %bf.clear192 = and i32 %bf.lshr191, 127
  %cmp193 = icmp eq i32 %bf.clear192, 23
  br i1 %cmp193, label %land.lhs.true.194, label %if.end.197

land.lhs.true.194:                                ; preds = %if.end.187
  %52 = load i32, i32* %align.addr, align 4
  %cmp195 = icmp slt i32 %52, 128
  br i1 %cmp195, label %if.then.196, label %if.end.197

if.then.196:                                      ; preds = %land.lhs.true.194
  store i32 128, i32* %retval
  br label %return

if.end.197:                                       ; preds = %land.lhs.true.194, %if.end.187
  br label %if.end.347

if.else.198:                                      ; preds = %if.else
  %53 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common199 = bitcast %union.tree_node* %53 to %struct.tree_common*
  %code200 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common199, i32 0, i32 2
  %bf.load201 = load i32, i32* %code200, align 8
  %bf.clear202 = and i32 %bf.load201, 255
  %cmp203 = icmp eq i32 %bf.clear202, 20
  br i1 %cmp203, label %land.lhs.true.216, label %lor.lhs.false.204

lor.lhs.false.204:                                ; preds = %if.else.198
  %54 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common205 = bitcast %union.tree_node* %54 to %struct.tree_common*
  %code206 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common205, i32 0, i32 2
  %bf.load207 = load i32, i32* %code206, align 8
  %bf.clear208 = and i32 %bf.load207, 255
  %cmp209 = icmp eq i32 %bf.clear208, 21
  br i1 %cmp209, label %land.lhs.true.216, label %lor.lhs.false.210

lor.lhs.false.210:                                ; preds = %lor.lhs.false.204
  %55 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common211 = bitcast %union.tree_node* %55 to %struct.tree_common*
  %code212 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common211, i32 0, i32 2
  %bf.load213 = load i32, i32* %code212, align 8
  %bf.clear214 = and i32 %bf.load213, 255
  %cmp215 = icmp eq i32 %bf.clear214, 22
  br i1 %cmp215, label %land.lhs.true.216, label %if.else.278

land.lhs.true.216:                                ; preds = %lor.lhs.false.210, %lor.lhs.false.204, %if.else.198
  %56 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type217 = bitcast %union.tree_node* %56 to %struct.tree_type*
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type217, i32 0, i32 1
  %57 = load %union.tree_node*, %union.tree_node** %values, align 8
  %tobool218 = icmp ne %union.tree_node* %57, null
  br i1 %tobool218, label %if.then.219, label %if.else.278

if.then.219:                                      ; preds = %land.lhs.true.216
  %58 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type220 = bitcast %union.tree_node* %58 to %struct.tree_type*
  %values221 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type220, i32 0, i32 1
  %59 = load %union.tree_node*, %union.tree_node** %values221, align 8
  %decl = bitcast %union.tree_node* %59 to %struct.tree_decl*
  %mode222 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl, i32 0, i32 5
  %60 = bitcast i48* %mode222 to i64*
  %bf.load223 = load i64, i64* %60, align 8
  %bf.clear224 = and i64 %bf.load223, 255
  %bf.cast = trunc i64 %bf.clear224 to i32
  %cmp225 = icmp eq i32 %bf.cast, 16
  br i1 %cmp225, label %land.lhs.true.226, label %if.end.229

land.lhs.true.226:                                ; preds = %if.then.219
  %61 = load i32, i32* %align.addr, align 4
  %cmp227 = icmp slt i32 %61, 64
  br i1 %cmp227, label %if.then.228, label %if.end.229

if.then.228:                                      ; preds = %land.lhs.true.226
  store i32 64, i32* %retval
  br label %return

if.end.229:                                       ; preds = %land.lhs.true.226, %if.then.219
  %62 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type230 = bitcast %union.tree_node* %62 to %struct.tree_type*
  %values231 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type230, i32 0, i32 1
  %63 = load %union.tree_node*, %union.tree_node** %values231, align 8
  %decl232 = bitcast %union.tree_node* %63 to %struct.tree_decl*
  %mode233 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl232, i32 0, i32 5
  %64 = bitcast i48* %mode233 to i64*
  %bf.load234 = load i64, i64* %64, align 8
  %bf.clear235 = and i64 %bf.load234, 255
  %bf.cast236 = trunc i64 %bf.clear235 to i32
  %cmp237 = icmp eq i32 %bf.cast236, 17
  br i1 %cmp237, label %land.lhs.true.274, label %lor.lhs.false.238

lor.lhs.false.238:                                ; preds = %if.end.229
  %65 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type239 = bitcast %union.tree_node* %65 to %struct.tree_type*
  %values240 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type239, i32 0, i32 1
  %66 = load %union.tree_node*, %union.tree_node** %values240, align 8
  %decl241 = bitcast %union.tree_node* %66 to %struct.tree_decl*
  %mode242 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl241, i32 0, i32 5
  %67 = bitcast i48* %mode242 to i64*
  %bf.load243 = load i64, i64* %67, align 8
  %bf.clear244 = and i64 %bf.load243, 255
  %bf.cast245 = trunc i64 %bf.clear244 to i32
  %cmp246 = icmp eq i32 %bf.cast245, 18
  br i1 %cmp246, label %land.lhs.true.274, label %lor.lhs.false.247

lor.lhs.false.247:                                ; preds = %lor.lhs.false.238
  %68 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type248 = bitcast %union.tree_node* %68 to %struct.tree_type*
  %values249 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type248, i32 0, i32 1
  %69 = load %union.tree_node*, %union.tree_node** %values249, align 8
  %decl250 = bitcast %union.tree_node* %69 to %struct.tree_decl*
  %mode251 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl250, i32 0, i32 5
  %70 = bitcast i48* %mode251 to i64*
  %bf.load252 = load i64, i64* %70, align 8
  %bf.clear253 = and i64 %bf.load252, 255
  %bf.cast254 = trunc i64 %bf.clear253 to i32
  %cmp255 = icmp eq i32 %bf.cast254, 6
  br i1 %cmp255, label %land.lhs.true.274, label %lor.lhs.false.256

lor.lhs.false.256:                                ; preds = %lor.lhs.false.247
  %71 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type257 = bitcast %union.tree_node* %71 to %struct.tree_type*
  %values258 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type257, i32 0, i32 1
  %72 = load %union.tree_node*, %union.tree_node** %values258, align 8
  %decl259 = bitcast %union.tree_node* %72 to %struct.tree_decl*
  %mode260 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl259, i32 0, i32 5
  %73 = bitcast i48* %mode260 to i64*
  %bf.load261 = load i64, i64* %73, align 8
  %bf.clear262 = and i64 %bf.load261, 255
  %bf.cast263 = trunc i64 %bf.clear262 to i32
  %cmp264 = icmp eq i32 %bf.cast263, 46
  br i1 %cmp264, label %land.lhs.true.274, label %lor.lhs.false.265

lor.lhs.false.265:                                ; preds = %lor.lhs.false.256
  %74 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type266 = bitcast %union.tree_node* %74 to %struct.tree_type*
  %values267 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type266, i32 0, i32 1
  %75 = load %union.tree_node*, %union.tree_node** %values267, align 8
  %decl268 = bitcast %union.tree_node* %75 to %struct.tree_decl*
  %mode269 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl268, i32 0, i32 5
  %76 = bitcast i48* %mode269 to i64*
  %bf.load270 = load i64, i64* %76, align 8
  %bf.clear271 = and i64 %bf.load270, 255
  %bf.cast272 = trunc i64 %bf.clear271 to i32
  %cmp273 = icmp eq i32 %bf.cast272, 37
  br i1 %cmp273, label %land.lhs.true.274, label %if.end.277

land.lhs.true.274:                                ; preds = %lor.lhs.false.265, %lor.lhs.false.256, %lor.lhs.false.247, %lor.lhs.false.238, %if.end.229
  %77 = load i32, i32* %align.addr, align 4
  %cmp275 = icmp slt i32 %77, 128
  br i1 %cmp275, label %if.then.276, label %if.end.277

if.then.276:                                      ; preds = %land.lhs.true.274
  store i32 128, i32* %retval
  br label %return

if.end.277:                                       ; preds = %land.lhs.true.274, %lor.lhs.false.265
  br label %if.end.346

if.else.278:                                      ; preds = %land.lhs.true.216, %lor.lhs.false.210
  %78 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common279 = bitcast %union.tree_node* %78 to %struct.tree_common*
  %code280 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common279, i32 0, i32 2
  %bf.load281 = load i32, i32* %code280, align 8
  %bf.clear282 = and i32 %bf.load281, 255
  %cmp283 = icmp eq i32 %bf.clear282, 7
  br i1 %cmp283, label %if.then.296, label %lor.lhs.false.284

lor.lhs.false.284:                                ; preds = %if.else.278
  %79 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common285 = bitcast %union.tree_node* %79 to %struct.tree_common*
  %code286 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common285, i32 0, i32 2
  %bf.load287 = load i32, i32* %code286, align 8
  %bf.clear288 = and i32 %bf.load287, 255
  %cmp289 = icmp eq i32 %bf.clear288, 9
  br i1 %cmp289, label %if.then.296, label %lor.lhs.false.290

lor.lhs.false.290:                                ; preds = %lor.lhs.false.284
  %80 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common291 = bitcast %union.tree_node* %80 to %struct.tree_common*
  %code292 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common291, i32 0, i32 2
  %bf.load293 = load i32, i32* %code292, align 8
  %bf.clear294 = and i32 %bf.load293, 255
  %cmp295 = icmp eq i32 %bf.clear294, 6
  br i1 %cmp295, label %if.then.296, label %if.end.345

if.then.296:                                      ; preds = %lor.lhs.false.290, %lor.lhs.false.284, %if.else.278
  %81 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type297 = bitcast %union.tree_node* %81 to %struct.tree_type*
  %mode298 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type297, i32 0, i32 6
  %bf.load299 = load i32, i32* %mode298, align 4
  %bf.lshr300 = lshr i32 %bf.load299, 9
  %bf.clear301 = and i32 %bf.lshr300, 127
  %cmp302 = icmp eq i32 %bf.clear301, 16
  br i1 %cmp302, label %land.lhs.true.303, label %if.end.306

land.lhs.true.303:                                ; preds = %if.then.296
  %82 = load i32, i32* %align.addr, align 4
  %cmp304 = icmp slt i32 %82, 64
  br i1 %cmp304, label %if.then.305, label %if.end.306

if.then.305:                                      ; preds = %land.lhs.true.303
  store i32 64, i32* %retval
  br label %return

if.end.306:                                       ; preds = %land.lhs.true.303, %if.then.296
  %83 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type307 = bitcast %union.tree_node* %83 to %struct.tree_type*
  %mode308 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type307, i32 0, i32 6
  %bf.load309 = load i32, i32* %mode308, align 4
  %bf.lshr310 = lshr i32 %bf.load309, 9
  %bf.clear311 = and i32 %bf.lshr310, 127
  %cmp312 = icmp eq i32 %bf.clear311, 17
  br i1 %cmp312, label %land.lhs.true.341, label %lor.lhs.false.313

lor.lhs.false.313:                                ; preds = %if.end.306
  %84 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type314 = bitcast %union.tree_node* %84 to %struct.tree_type*
  %mode315 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type314, i32 0, i32 6
  %bf.load316 = load i32, i32* %mode315, align 4
  %bf.lshr317 = lshr i32 %bf.load316, 9
  %bf.clear318 = and i32 %bf.lshr317, 127
  %cmp319 = icmp eq i32 %bf.clear318, 18
  br i1 %cmp319, label %land.lhs.true.341, label %lor.lhs.false.320

lor.lhs.false.320:                                ; preds = %lor.lhs.false.313
  %85 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type321 = bitcast %union.tree_node* %85 to %struct.tree_type*
  %mode322 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type321, i32 0, i32 6
  %bf.load323 = load i32, i32* %mode322, align 4
  %bf.lshr324 = lshr i32 %bf.load323, 9
  %bf.clear325 = and i32 %bf.lshr324, 127
  %cmp326 = icmp eq i32 %bf.clear325, 6
  br i1 %cmp326, label %land.lhs.true.341, label %lor.lhs.false.327

lor.lhs.false.327:                                ; preds = %lor.lhs.false.320
  %86 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type328 = bitcast %union.tree_node* %86 to %struct.tree_type*
  %mode329 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type328, i32 0, i32 6
  %bf.load330 = load i32, i32* %mode329, align 4
  %bf.lshr331 = lshr i32 %bf.load330, 9
  %bf.clear332 = and i32 %bf.lshr331, 127
  %cmp333 = icmp eq i32 %bf.clear332, 46
  br i1 %cmp333, label %land.lhs.true.341, label %lor.lhs.false.334

lor.lhs.false.334:                                ; preds = %lor.lhs.false.327
  %87 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type335 = bitcast %union.tree_node* %87 to %struct.tree_type*
  %mode336 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type335, i32 0, i32 6
  %bf.load337 = load i32, i32* %mode336, align 4
  %bf.lshr338 = lshr i32 %bf.load337, 9
  %bf.clear339 = and i32 %bf.lshr338, 127
  %cmp340 = icmp eq i32 %bf.clear339, 37
  br i1 %cmp340, label %land.lhs.true.341, label %if.end.344

land.lhs.true.341:                                ; preds = %lor.lhs.false.334, %lor.lhs.false.327, %lor.lhs.false.320, %lor.lhs.false.313, %if.end.306
  %88 = load i32, i32* %align.addr, align 4
  %cmp342 = icmp slt i32 %88, 128
  br i1 %cmp342, label %if.then.343, label %if.end.344

if.then.343:                                      ; preds = %land.lhs.true.341
  store i32 128, i32* %retval
  br label %return

if.end.344:                                       ; preds = %land.lhs.true.341, %lor.lhs.false.334
  br label %if.end.345

if.end.345:                                       ; preds = %if.end.344, %lor.lhs.false.290
  br label %if.end.346

if.end.346:                                       ; preds = %if.end.345, %if.end.277
  br label %if.end.347

if.end.347:                                       ; preds = %if.end.346, %if.end.197
  br label %if.end.348

if.end.348:                                       ; preds = %if.end.347, %if.end.171
  %89 = load i32, i32* %align.addr, align 4
  store i32 %89, i32* %retval
  br label %return

return:                                           ; preds = %if.end.348, %if.then.343, %if.then.305, %if.then.276, %if.then.228, %if.then.196, %if.then.186, %if.then.170, %if.then.122, %if.then.105, %if.then
  %90 = load i32, i32* %retval
  ret i32 %90
}

; Function Attrs: nounwind uwtable
define i32 @ix86_local_alignment(%union.tree_node* %type, i32 %align) #1 {
entry:
  %retval = alloca i32, align 4
  %type.addr = alloca %union.tree_node*, align 8
  %align.addr = alloca i32, align 4
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  store i32 %align, i32* %align.addr, align 4
  %0 = load i32, i32* @target_flags, align 4
  %and = and i32 %0, 33554432
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end.48

if.then:                                          ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common = bitcast %union.tree_node* %1 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 18
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common1 = bitcast %union.tree_node* %2 to %struct.tree_common*
  %code2 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1, i32 0, i32 2
  %bf.load3 = load i32, i32* %code2, align 8
  %bf.clear4 = and i32 %bf.load3, 255
  %cmp5 = icmp eq i32 %bf.clear4, 20
  br i1 %cmp5, label %land.lhs.true, label %lor.lhs.false.6

lor.lhs.false.6:                                  ; preds = %lor.lhs.false
  %3 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common7 = bitcast %union.tree_node* %3 to %struct.tree_common*
  %code8 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common7, i32 0, i32 2
  %bf.load9 = load i32, i32* %code8, align 8
  %bf.clear10 = and i32 %bf.load9, 255
  %cmp11 = icmp eq i32 %bf.clear10, 21
  br i1 %cmp11, label %land.lhs.true, label %lor.lhs.false.12

lor.lhs.false.12:                                 ; preds = %lor.lhs.false.6
  %4 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common13 = bitcast %union.tree_node* %4 to %struct.tree_common*
  %code14 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common13, i32 0, i32 2
  %bf.load15 = load i32, i32* %code14, align 8
  %bf.clear16 = and i32 %bf.load15, 255
  %cmp17 = icmp eq i32 %bf.clear16, 22
  br i1 %cmp17, label %land.lhs.true, label %lor.lhs.false.18

lor.lhs.false.18:                                 ; preds = %lor.lhs.false.12
  %5 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common19 = bitcast %union.tree_node* %5 to %struct.tree_common*
  %code20 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common19, i32 0, i32 2
  %bf.load21 = load i32, i32* %code20, align 8
  %bf.clear22 = and i32 %bf.load21, 255
  %cmp23 = icmp eq i32 %bf.clear22, 19
  br i1 %cmp23, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.lhs.false.18, %lor.lhs.false.12, %lor.lhs.false.6, %lor.lhs.false, %if.then
  %6 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type24 = bitcast %union.tree_node* %6 to %struct.tree_type*
  %size = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type24, i32 0, i32 2
  %7 = load %union.tree_node*, %union.tree_node** %size, align 8
  %tobool25 = icmp ne %union.tree_node* %7, null
  br i1 %tobool25, label %land.lhs.true.26, label %if.end

land.lhs.true.26:                                 ; preds = %land.lhs.true
  %8 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type27 = bitcast %union.tree_node* %8 to %struct.tree_type*
  %size28 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type27, i32 0, i32 2
  %9 = load %union.tree_node*, %union.tree_node** %size28, align 8
  %common29 = bitcast %union.tree_node* %9 to %struct.tree_common*
  %code30 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common29, i32 0, i32 2
  %bf.load31 = load i32, i32* %code30, align 8
  %bf.clear32 = and i32 %bf.load31, 255
  %cmp33 = icmp eq i32 %bf.clear32, 25
  br i1 %cmp33, label %land.lhs.true.34, label %if.end

land.lhs.true.34:                                 ; preds = %land.lhs.true.26
  %10 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type35 = bitcast %union.tree_node* %10 to %struct.tree_type*
  %size36 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type35, i32 0, i32 2
  %11 = load %union.tree_node*, %union.tree_node** %size36, align 8
  %int_cst = bitcast %union.tree_node* %11 to %struct.tree_int_cst*
  %int_cst37 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 2
  %low = getelementptr inbounds %struct.anon, %struct.anon* %int_cst37, i32 0, i32 0
  %12 = load i64, i64* %low, align 8
  %cmp38 = icmp uge i64 %12, 16
  br i1 %cmp38, label %land.lhs.true.45, label %lor.lhs.false.39

lor.lhs.false.39:                                 ; preds = %land.lhs.true.34
  %13 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type40 = bitcast %union.tree_node* %13 to %struct.tree_type*
  %size41 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type40, i32 0, i32 2
  %14 = load %union.tree_node*, %union.tree_node** %size41, align 8
  %int_cst42 = bitcast %union.tree_node* %14 to %struct.tree_int_cst*
  %int_cst43 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst42, i32 0, i32 2
  %high = getelementptr inbounds %struct.anon, %struct.anon* %int_cst43, i32 0, i32 1
  %15 = load i64, i64* %high, align 8
  %tobool44 = icmp ne i64 %15, 0
  br i1 %tobool44, label %land.lhs.true.45, label %if.end

land.lhs.true.45:                                 ; preds = %lor.lhs.false.39, %land.lhs.true.34
  %16 = load i32, i32* %align.addr, align 4
  %cmp46 = icmp slt i32 %16, 128
  br i1 %cmp46, label %if.then.47, label %if.end

if.then.47:                                       ; preds = %land.lhs.true.45
  store i32 128, i32* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true.45, %lor.lhs.false.39, %land.lhs.true.26, %land.lhs.true, %lor.lhs.false.18
  br label %if.end.48

if.end.48:                                        ; preds = %if.end, %entry
  %17 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common49 = bitcast %union.tree_node* %17 to %struct.tree_common*
  %code50 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common49, i32 0, i32 2
  %bf.load51 = load i32, i32* %code50, align 8
  %bf.clear52 = and i32 %bf.load51, 255
  %cmp53 = icmp eq i32 %bf.clear52, 18
  br i1 %cmp53, label %if.then.54, label %if.else

if.then.54:                                       ; preds = %if.end.48
  %18 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common55 = bitcast %union.tree_node* %18 to %struct.tree_common*
  %type56 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common55, i32 0, i32 1
  %19 = load %union.tree_node*, %union.tree_node** %type56, align 8
  %type57 = bitcast %union.tree_node* %19 to %struct.tree_type*
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type57, i32 0, i32 6
  %bf.load58 = load i32, i32* %mode, align 4
  %bf.lshr = lshr i32 %bf.load58, 9
  %bf.clear59 = and i32 %bf.lshr, 127
  %cmp60 = icmp eq i32 %bf.clear59, 16
  br i1 %cmp60, label %land.lhs.true.61, label %if.end.64

land.lhs.true.61:                                 ; preds = %if.then.54
  %20 = load i32, i32* %align.addr, align 4
  %cmp62 = icmp slt i32 %20, 64
  br i1 %cmp62, label %if.then.63, label %if.end.64

if.then.63:                                       ; preds = %land.lhs.true.61
  store i32 64, i32* %retval
  br label %return

if.end.64:                                        ; preds = %land.lhs.true.61, %if.then.54
  %21 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common65 = bitcast %union.tree_node* %21 to %struct.tree_common*
  %type66 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common65, i32 0, i32 1
  %22 = load %union.tree_node*, %union.tree_node** %type66, align 8
  %type67 = bitcast %union.tree_node* %22 to %struct.tree_type*
  %mode68 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type67, i32 0, i32 6
  %bf.load69 = load i32, i32* %mode68, align 4
  %bf.lshr70 = lshr i32 %bf.load69, 9
  %bf.clear71 = and i32 %bf.lshr70, 127
  %cmp72 = icmp eq i32 %bf.clear71, 17
  br i1 %cmp72, label %land.lhs.true.109, label %lor.lhs.false.73

lor.lhs.false.73:                                 ; preds = %if.end.64
  %23 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common74 = bitcast %union.tree_node* %23 to %struct.tree_common*
  %type75 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common74, i32 0, i32 1
  %24 = load %union.tree_node*, %union.tree_node** %type75, align 8
  %type76 = bitcast %union.tree_node* %24 to %struct.tree_type*
  %mode77 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type76, i32 0, i32 6
  %bf.load78 = load i32, i32* %mode77, align 4
  %bf.lshr79 = lshr i32 %bf.load78, 9
  %bf.clear80 = and i32 %bf.lshr79, 127
  %cmp81 = icmp eq i32 %bf.clear80, 18
  br i1 %cmp81, label %land.lhs.true.109, label %lor.lhs.false.82

lor.lhs.false.82:                                 ; preds = %lor.lhs.false.73
  %25 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common83 = bitcast %union.tree_node* %25 to %struct.tree_common*
  %type84 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common83, i32 0, i32 1
  %26 = load %union.tree_node*, %union.tree_node** %type84, align 8
  %type85 = bitcast %union.tree_node* %26 to %struct.tree_type*
  %mode86 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type85, i32 0, i32 6
  %bf.load87 = load i32, i32* %mode86, align 4
  %bf.lshr88 = lshr i32 %bf.load87, 9
  %bf.clear89 = and i32 %bf.lshr88, 127
  %cmp90 = icmp eq i32 %bf.clear89, 6
  br i1 %cmp90, label %land.lhs.true.109, label %lor.lhs.false.91

lor.lhs.false.91:                                 ; preds = %lor.lhs.false.82
  %27 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common92 = bitcast %union.tree_node* %27 to %struct.tree_common*
  %type93 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common92, i32 0, i32 1
  %28 = load %union.tree_node*, %union.tree_node** %type93, align 8
  %type94 = bitcast %union.tree_node* %28 to %struct.tree_type*
  %mode95 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type94, i32 0, i32 6
  %bf.load96 = load i32, i32* %mode95, align 4
  %bf.lshr97 = lshr i32 %bf.load96, 9
  %bf.clear98 = and i32 %bf.lshr97, 127
  %cmp99 = icmp eq i32 %bf.clear98, 46
  br i1 %cmp99, label %land.lhs.true.109, label %lor.lhs.false.100

lor.lhs.false.100:                                ; preds = %lor.lhs.false.91
  %29 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common101 = bitcast %union.tree_node* %29 to %struct.tree_common*
  %type102 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common101, i32 0, i32 1
  %30 = load %union.tree_node*, %union.tree_node** %type102, align 8
  %type103 = bitcast %union.tree_node* %30 to %struct.tree_type*
  %mode104 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type103, i32 0, i32 6
  %bf.load105 = load i32, i32* %mode104, align 4
  %bf.lshr106 = lshr i32 %bf.load105, 9
  %bf.clear107 = and i32 %bf.lshr106, 127
  %cmp108 = icmp eq i32 %bf.clear107, 37
  br i1 %cmp108, label %land.lhs.true.109, label %if.end.112

land.lhs.true.109:                                ; preds = %lor.lhs.false.100, %lor.lhs.false.91, %lor.lhs.false.82, %lor.lhs.false.73, %if.end.64
  %31 = load i32, i32* %align.addr, align 4
  %cmp110 = icmp slt i32 %31, 128
  br i1 %cmp110, label %if.then.111, label %if.end.112

if.then.111:                                      ; preds = %land.lhs.true.109
  store i32 128, i32* %retval
  br label %return

if.end.112:                                       ; preds = %land.lhs.true.109, %lor.lhs.false.100
  br label %if.end.289

if.else:                                          ; preds = %if.end.48
  %32 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common113 = bitcast %union.tree_node* %32 to %struct.tree_common*
  %code114 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common113, i32 0, i32 2
  %bf.load115 = load i32, i32* %code114, align 8
  %bf.clear116 = and i32 %bf.load115, 255
  %cmp117 = icmp eq i32 %bf.clear116, 8
  br i1 %cmp117, label %if.then.118, label %if.else.139

if.then.118:                                      ; preds = %if.else
  %33 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type119 = bitcast %union.tree_node* %33 to %struct.tree_type*
  %mode120 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type119, i32 0, i32 6
  %bf.load121 = load i32, i32* %mode120, align 4
  %bf.lshr122 = lshr i32 %bf.load121, 9
  %bf.clear123 = and i32 %bf.lshr122, 127
  %cmp124 = icmp eq i32 %bf.clear123, 22
  br i1 %cmp124, label %land.lhs.true.125, label %if.end.128

land.lhs.true.125:                                ; preds = %if.then.118
  %34 = load i32, i32* %align.addr, align 4
  %cmp126 = icmp slt i32 %34, 64
  br i1 %cmp126, label %if.then.127, label %if.end.128

if.then.127:                                      ; preds = %land.lhs.true.125
  store i32 64, i32* %retval
  br label %return

if.end.128:                                       ; preds = %land.lhs.true.125, %if.then.118
  %35 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type129 = bitcast %union.tree_node* %35 to %struct.tree_type*
  %mode130 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type129, i32 0, i32 6
  %bf.load131 = load i32, i32* %mode130, align 4
  %bf.lshr132 = lshr i32 %bf.load131, 9
  %bf.clear133 = and i32 %bf.lshr132, 127
  %cmp134 = icmp eq i32 %bf.clear133, 23
  br i1 %cmp134, label %land.lhs.true.135, label %if.end.138

land.lhs.true.135:                                ; preds = %if.end.128
  %36 = load i32, i32* %align.addr, align 4
  %cmp136 = icmp slt i32 %36, 128
  br i1 %cmp136, label %if.then.137, label %if.end.138

if.then.137:                                      ; preds = %land.lhs.true.135
  store i32 128, i32* %retval
  br label %return

if.end.138:                                       ; preds = %land.lhs.true.135, %if.end.128
  br label %if.end.288

if.else.139:                                      ; preds = %if.else
  %37 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common140 = bitcast %union.tree_node* %37 to %struct.tree_common*
  %code141 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common140, i32 0, i32 2
  %bf.load142 = load i32, i32* %code141, align 8
  %bf.clear143 = and i32 %bf.load142, 255
  %cmp144 = icmp eq i32 %bf.clear143, 20
  br i1 %cmp144, label %land.lhs.true.157, label %lor.lhs.false.145

lor.lhs.false.145:                                ; preds = %if.else.139
  %38 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common146 = bitcast %union.tree_node* %38 to %struct.tree_common*
  %code147 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common146, i32 0, i32 2
  %bf.load148 = load i32, i32* %code147, align 8
  %bf.clear149 = and i32 %bf.load148, 255
  %cmp150 = icmp eq i32 %bf.clear149, 21
  br i1 %cmp150, label %land.lhs.true.157, label %lor.lhs.false.151

lor.lhs.false.151:                                ; preds = %lor.lhs.false.145
  %39 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common152 = bitcast %union.tree_node* %39 to %struct.tree_common*
  %code153 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common152, i32 0, i32 2
  %bf.load154 = load i32, i32* %code153, align 8
  %bf.clear155 = and i32 %bf.load154, 255
  %cmp156 = icmp eq i32 %bf.clear155, 22
  br i1 %cmp156, label %land.lhs.true.157, label %if.else.219

land.lhs.true.157:                                ; preds = %lor.lhs.false.151, %lor.lhs.false.145, %if.else.139
  %40 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type158 = bitcast %union.tree_node* %40 to %struct.tree_type*
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type158, i32 0, i32 1
  %41 = load %union.tree_node*, %union.tree_node** %values, align 8
  %tobool159 = icmp ne %union.tree_node* %41, null
  br i1 %tobool159, label %if.then.160, label %if.else.219

if.then.160:                                      ; preds = %land.lhs.true.157
  %42 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type161 = bitcast %union.tree_node* %42 to %struct.tree_type*
  %values162 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type161, i32 0, i32 1
  %43 = load %union.tree_node*, %union.tree_node** %values162, align 8
  %decl = bitcast %union.tree_node* %43 to %struct.tree_decl*
  %mode163 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl, i32 0, i32 5
  %44 = bitcast i48* %mode163 to i64*
  %bf.load164 = load i64, i64* %44, align 8
  %bf.clear165 = and i64 %bf.load164, 255
  %bf.cast = trunc i64 %bf.clear165 to i32
  %cmp166 = icmp eq i32 %bf.cast, 16
  br i1 %cmp166, label %land.lhs.true.167, label %if.end.170

land.lhs.true.167:                                ; preds = %if.then.160
  %45 = load i32, i32* %align.addr, align 4
  %cmp168 = icmp slt i32 %45, 64
  br i1 %cmp168, label %if.then.169, label %if.end.170

if.then.169:                                      ; preds = %land.lhs.true.167
  store i32 64, i32* %retval
  br label %return

if.end.170:                                       ; preds = %land.lhs.true.167, %if.then.160
  %46 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type171 = bitcast %union.tree_node* %46 to %struct.tree_type*
  %values172 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type171, i32 0, i32 1
  %47 = load %union.tree_node*, %union.tree_node** %values172, align 8
  %decl173 = bitcast %union.tree_node* %47 to %struct.tree_decl*
  %mode174 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl173, i32 0, i32 5
  %48 = bitcast i48* %mode174 to i64*
  %bf.load175 = load i64, i64* %48, align 8
  %bf.clear176 = and i64 %bf.load175, 255
  %bf.cast177 = trunc i64 %bf.clear176 to i32
  %cmp178 = icmp eq i32 %bf.cast177, 17
  br i1 %cmp178, label %land.lhs.true.215, label %lor.lhs.false.179

lor.lhs.false.179:                                ; preds = %if.end.170
  %49 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type180 = bitcast %union.tree_node* %49 to %struct.tree_type*
  %values181 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type180, i32 0, i32 1
  %50 = load %union.tree_node*, %union.tree_node** %values181, align 8
  %decl182 = bitcast %union.tree_node* %50 to %struct.tree_decl*
  %mode183 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl182, i32 0, i32 5
  %51 = bitcast i48* %mode183 to i64*
  %bf.load184 = load i64, i64* %51, align 8
  %bf.clear185 = and i64 %bf.load184, 255
  %bf.cast186 = trunc i64 %bf.clear185 to i32
  %cmp187 = icmp eq i32 %bf.cast186, 18
  br i1 %cmp187, label %land.lhs.true.215, label %lor.lhs.false.188

lor.lhs.false.188:                                ; preds = %lor.lhs.false.179
  %52 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type189 = bitcast %union.tree_node* %52 to %struct.tree_type*
  %values190 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type189, i32 0, i32 1
  %53 = load %union.tree_node*, %union.tree_node** %values190, align 8
  %decl191 = bitcast %union.tree_node* %53 to %struct.tree_decl*
  %mode192 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl191, i32 0, i32 5
  %54 = bitcast i48* %mode192 to i64*
  %bf.load193 = load i64, i64* %54, align 8
  %bf.clear194 = and i64 %bf.load193, 255
  %bf.cast195 = trunc i64 %bf.clear194 to i32
  %cmp196 = icmp eq i32 %bf.cast195, 6
  br i1 %cmp196, label %land.lhs.true.215, label %lor.lhs.false.197

lor.lhs.false.197:                                ; preds = %lor.lhs.false.188
  %55 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type198 = bitcast %union.tree_node* %55 to %struct.tree_type*
  %values199 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type198, i32 0, i32 1
  %56 = load %union.tree_node*, %union.tree_node** %values199, align 8
  %decl200 = bitcast %union.tree_node* %56 to %struct.tree_decl*
  %mode201 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl200, i32 0, i32 5
  %57 = bitcast i48* %mode201 to i64*
  %bf.load202 = load i64, i64* %57, align 8
  %bf.clear203 = and i64 %bf.load202, 255
  %bf.cast204 = trunc i64 %bf.clear203 to i32
  %cmp205 = icmp eq i32 %bf.cast204, 46
  br i1 %cmp205, label %land.lhs.true.215, label %lor.lhs.false.206

lor.lhs.false.206:                                ; preds = %lor.lhs.false.197
  %58 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type207 = bitcast %union.tree_node* %58 to %struct.tree_type*
  %values208 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type207, i32 0, i32 1
  %59 = load %union.tree_node*, %union.tree_node** %values208, align 8
  %decl209 = bitcast %union.tree_node* %59 to %struct.tree_decl*
  %mode210 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl209, i32 0, i32 5
  %60 = bitcast i48* %mode210 to i64*
  %bf.load211 = load i64, i64* %60, align 8
  %bf.clear212 = and i64 %bf.load211, 255
  %bf.cast213 = trunc i64 %bf.clear212 to i32
  %cmp214 = icmp eq i32 %bf.cast213, 37
  br i1 %cmp214, label %land.lhs.true.215, label %if.end.218

land.lhs.true.215:                                ; preds = %lor.lhs.false.206, %lor.lhs.false.197, %lor.lhs.false.188, %lor.lhs.false.179, %if.end.170
  %61 = load i32, i32* %align.addr, align 4
  %cmp216 = icmp slt i32 %61, 128
  br i1 %cmp216, label %if.then.217, label %if.end.218

if.then.217:                                      ; preds = %land.lhs.true.215
  store i32 128, i32* %retval
  br label %return

if.end.218:                                       ; preds = %land.lhs.true.215, %lor.lhs.false.206
  br label %if.end.287

if.else.219:                                      ; preds = %land.lhs.true.157, %lor.lhs.false.151
  %62 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common220 = bitcast %union.tree_node* %62 to %struct.tree_common*
  %code221 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common220, i32 0, i32 2
  %bf.load222 = load i32, i32* %code221, align 8
  %bf.clear223 = and i32 %bf.load222, 255
  %cmp224 = icmp eq i32 %bf.clear223, 7
  br i1 %cmp224, label %if.then.237, label %lor.lhs.false.225

lor.lhs.false.225:                                ; preds = %if.else.219
  %63 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common226 = bitcast %union.tree_node* %63 to %struct.tree_common*
  %code227 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common226, i32 0, i32 2
  %bf.load228 = load i32, i32* %code227, align 8
  %bf.clear229 = and i32 %bf.load228, 255
  %cmp230 = icmp eq i32 %bf.clear229, 9
  br i1 %cmp230, label %if.then.237, label %lor.lhs.false.231

lor.lhs.false.231:                                ; preds = %lor.lhs.false.225
  %64 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common232 = bitcast %union.tree_node* %64 to %struct.tree_common*
  %code233 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common232, i32 0, i32 2
  %bf.load234 = load i32, i32* %code233, align 8
  %bf.clear235 = and i32 %bf.load234, 255
  %cmp236 = icmp eq i32 %bf.clear235, 6
  br i1 %cmp236, label %if.then.237, label %if.end.286

if.then.237:                                      ; preds = %lor.lhs.false.231, %lor.lhs.false.225, %if.else.219
  %65 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type238 = bitcast %union.tree_node* %65 to %struct.tree_type*
  %mode239 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type238, i32 0, i32 6
  %bf.load240 = load i32, i32* %mode239, align 4
  %bf.lshr241 = lshr i32 %bf.load240, 9
  %bf.clear242 = and i32 %bf.lshr241, 127
  %cmp243 = icmp eq i32 %bf.clear242, 16
  br i1 %cmp243, label %land.lhs.true.244, label %if.end.247

land.lhs.true.244:                                ; preds = %if.then.237
  %66 = load i32, i32* %align.addr, align 4
  %cmp245 = icmp slt i32 %66, 64
  br i1 %cmp245, label %if.then.246, label %if.end.247

if.then.246:                                      ; preds = %land.lhs.true.244
  store i32 64, i32* %retval
  br label %return

if.end.247:                                       ; preds = %land.lhs.true.244, %if.then.237
  %67 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type248 = bitcast %union.tree_node* %67 to %struct.tree_type*
  %mode249 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type248, i32 0, i32 6
  %bf.load250 = load i32, i32* %mode249, align 4
  %bf.lshr251 = lshr i32 %bf.load250, 9
  %bf.clear252 = and i32 %bf.lshr251, 127
  %cmp253 = icmp eq i32 %bf.clear252, 17
  br i1 %cmp253, label %land.lhs.true.282, label %lor.lhs.false.254

lor.lhs.false.254:                                ; preds = %if.end.247
  %68 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type255 = bitcast %union.tree_node* %68 to %struct.tree_type*
  %mode256 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type255, i32 0, i32 6
  %bf.load257 = load i32, i32* %mode256, align 4
  %bf.lshr258 = lshr i32 %bf.load257, 9
  %bf.clear259 = and i32 %bf.lshr258, 127
  %cmp260 = icmp eq i32 %bf.clear259, 18
  br i1 %cmp260, label %land.lhs.true.282, label %lor.lhs.false.261

lor.lhs.false.261:                                ; preds = %lor.lhs.false.254
  %69 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type262 = bitcast %union.tree_node* %69 to %struct.tree_type*
  %mode263 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type262, i32 0, i32 6
  %bf.load264 = load i32, i32* %mode263, align 4
  %bf.lshr265 = lshr i32 %bf.load264, 9
  %bf.clear266 = and i32 %bf.lshr265, 127
  %cmp267 = icmp eq i32 %bf.clear266, 6
  br i1 %cmp267, label %land.lhs.true.282, label %lor.lhs.false.268

lor.lhs.false.268:                                ; preds = %lor.lhs.false.261
  %70 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type269 = bitcast %union.tree_node* %70 to %struct.tree_type*
  %mode270 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type269, i32 0, i32 6
  %bf.load271 = load i32, i32* %mode270, align 4
  %bf.lshr272 = lshr i32 %bf.load271, 9
  %bf.clear273 = and i32 %bf.lshr272, 127
  %cmp274 = icmp eq i32 %bf.clear273, 46
  br i1 %cmp274, label %land.lhs.true.282, label %lor.lhs.false.275

lor.lhs.false.275:                                ; preds = %lor.lhs.false.268
  %71 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type276 = bitcast %union.tree_node* %71 to %struct.tree_type*
  %mode277 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type276, i32 0, i32 6
  %bf.load278 = load i32, i32* %mode277, align 4
  %bf.lshr279 = lshr i32 %bf.load278, 9
  %bf.clear280 = and i32 %bf.lshr279, 127
  %cmp281 = icmp eq i32 %bf.clear280, 37
  br i1 %cmp281, label %land.lhs.true.282, label %if.end.285

land.lhs.true.282:                                ; preds = %lor.lhs.false.275, %lor.lhs.false.268, %lor.lhs.false.261, %lor.lhs.false.254, %if.end.247
  %72 = load i32, i32* %align.addr, align 4
  %cmp283 = icmp slt i32 %72, 128
  br i1 %cmp283, label %if.then.284, label %if.end.285

if.then.284:                                      ; preds = %land.lhs.true.282
  store i32 128, i32* %retval
  br label %return

if.end.285:                                       ; preds = %land.lhs.true.282, %lor.lhs.false.275
  br label %if.end.286

if.end.286:                                       ; preds = %if.end.285, %lor.lhs.false.231
  br label %if.end.287

if.end.287:                                       ; preds = %if.end.286, %if.end.218
  br label %if.end.288

if.end.288:                                       ; preds = %if.end.287, %if.end.138
  br label %if.end.289

if.end.289:                                       ; preds = %if.end.288, %if.end.112
  %73 = load i32, i32* %align.addr, align 4
  store i32 %73, i32* %retval
  br label %return

return:                                           ; preds = %if.end.289, %if.then.284, %if.then.246, %if.then.217, %if.then.169, %if.then.137, %if.then.127, %if.then.111, %if.then.63, %if.then.47
  %74 = load i32, i32* %retval
  ret i32 %74
}

; Function Attrs: nounwind uwtable
define void @x86_initialize_trampoline(%struct.rtx_def* %tramp, %struct.rtx_def* %fnaddr, %struct.rtx_def* %cxt) #1 {
entry:
  %tramp.addr = alloca %struct.rtx_def*, align 8
  %fnaddr.addr = alloca %struct.rtx_def*, align 8
  %cxt.addr = alloca %struct.rtx_def*, align 8
  %disp = alloca %struct.rtx_def*, align 8
  %offset = alloca i32, align 4
  store %struct.rtx_def* %tramp, %struct.rtx_def** %tramp.addr, align 8
  store %struct.rtx_def* %fnaddr, %struct.rtx_def** %fnaddr.addr, align 8
  store %struct.rtx_def* %cxt, %struct.rtx_def** %cxt.addr, align 8
  %0 = load i32, i32* @target_flags, align 4
  %and = and i32 %0, 33554432
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 2), align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %fnaddr.addr, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %tramp.addr, align 8
  %call = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %3, i64 10)
  %call1 = call %struct.rtx_def* @expand_binop(i32 4, %struct.optab* %1, %struct.rtx_def* %2, %struct.rtx_def* %call, %struct.rtx_def* null, i32 1, i32 0)
  store %struct.rtx_def* %call1, %struct.rtx_def** %disp, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %tramp.addr, align 8
  %call2 = call %struct.rtx_def* @gen_rtx_MEM(i32 2, %struct.rtx_def* %4)
  %call3 = call i64 @trunc_int_for_mode(i64 185, i32 2)
  %call4 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %call3)
  %call5 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call2, %struct.rtx_def* %call4)
  %5 = load %struct.rtx_def*, %struct.rtx_def** %tramp.addr, align 8
  %call6 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %5, i64 1)
  %call7 = call %struct.rtx_def* @gen_rtx_MEM(i32 4, %struct.rtx_def* %call6)
  %6 = load %struct.rtx_def*, %struct.rtx_def** %cxt.addr, align 8
  %call8 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call7, %struct.rtx_def* %6)
  %7 = load %struct.rtx_def*, %struct.rtx_def** %tramp.addr, align 8
  %call9 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %7, i64 5)
  %call10 = call %struct.rtx_def* @gen_rtx_MEM(i32 2, %struct.rtx_def* %call9)
  %call11 = call i64 @trunc_int_for_mode(i64 233, i32 2)
  %call12 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %call11)
  %call13 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call10, %struct.rtx_def* %call12)
  %8 = load %struct.rtx_def*, %struct.rtx_def** %tramp.addr, align 8
  %call14 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %8, i64 6)
  %call15 = call %struct.rtx_def* @gen_rtx_MEM(i32 4, %struct.rtx_def* %call14)
  %9 = load %struct.rtx_def*, %struct.rtx_def** %disp, align 8
  %call16 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call15, %struct.rtx_def* %9)
  br label %if.end.76

if.else:                                          ; preds = %entry
  store i32 0, i32* %offset, align 4
  %10 = load %struct.rtx_def*, %struct.rtx_def** %fnaddr.addr, align 8
  %call17 = call i32 @x86_64_zero_extended_value(%struct.rtx_def* %10)
  %tobool18 = icmp ne i32 %call17, 0
  br i1 %tobool18, label %if.then.19, label %if.else.32

if.then.19:                                       ; preds = %if.else
  %11 = load %struct.rtx_def*, %struct.rtx_def** %fnaddr.addr, align 8
  %call20 = call %struct.rtx_def* @copy_to_mode_reg(i32 5, %struct.rtx_def* %11)
  store %struct.rtx_def* %call20, %struct.rtx_def** %fnaddr.addr, align 8
  %12 = load %struct.rtx_def*, %struct.rtx_def** %tramp.addr, align 8
  %13 = load i32, i32* %offset, align 4
  %conv = sext i32 %13 to i64
  %call21 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %12, i64 %conv)
  %call22 = call %struct.rtx_def* @gen_rtx_MEM(i32 3, %struct.rtx_def* %call21)
  %call23 = call i64 @trunc_int_for_mode(i64 47937, i32 3)
  %call24 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %call23)
  %call25 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call22, %struct.rtx_def* %call24)
  %14 = load %struct.rtx_def*, %struct.rtx_def** %tramp.addr, align 8
  %15 = load i32, i32* %offset, align 4
  %add = add nsw i32 %15, 2
  %conv26 = sext i32 %add to i64
  %call27 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %14, i64 %conv26)
  %call28 = call %struct.rtx_def* @gen_rtx_MEM(i32 4, %struct.rtx_def* %call27)
  %16 = load %struct.rtx_def*, %struct.rtx_def** %fnaddr.addr, align 8
  %call29 = call %struct.rtx_def* @gen_lowpart(i32 4, %struct.rtx_def* %16)
  %call30 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call28, %struct.rtx_def* %call29)
  %17 = load i32, i32* %offset, align 4
  %add31 = add nsw i32 %17, 6
  store i32 %add31, i32* %offset, align 4
  br label %if.end

if.else.32:                                       ; preds = %if.else
  %18 = load %struct.rtx_def*, %struct.rtx_def** %tramp.addr, align 8
  %19 = load i32, i32* %offset, align 4
  %conv33 = sext i32 %19 to i64
  %call34 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %18, i64 %conv33)
  %call35 = call %struct.rtx_def* @gen_rtx_MEM(i32 3, %struct.rtx_def* %call34)
  %call36 = call i64 @trunc_int_for_mode(i64 47945, i32 3)
  %call37 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %call36)
  %call38 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call35, %struct.rtx_def* %call37)
  %20 = load %struct.rtx_def*, %struct.rtx_def** %tramp.addr, align 8
  %21 = load i32, i32* %offset, align 4
  %add39 = add nsw i32 %21, 2
  %conv40 = sext i32 %add39 to i64
  %call41 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %20, i64 %conv40)
  %call42 = call %struct.rtx_def* @gen_rtx_MEM(i32 5, %struct.rtx_def* %call41)
  %22 = load %struct.rtx_def*, %struct.rtx_def** %fnaddr.addr, align 8
  %call43 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call42, %struct.rtx_def* %22)
  %23 = load i32, i32* %offset, align 4
  %add44 = add nsw i32 %23, 10
  store i32 %add44, i32* %offset, align 4
  br label %if.end

if.end:                                           ; preds = %if.else.32, %if.then.19
  %24 = load %struct.rtx_def*, %struct.rtx_def** %tramp.addr, align 8
  %25 = load i32, i32* %offset, align 4
  %conv45 = sext i32 %25 to i64
  %call46 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %24, i64 %conv45)
  %call47 = call %struct.rtx_def* @gen_rtx_MEM(i32 3, %struct.rtx_def* %call46)
  %call48 = call i64 @trunc_int_for_mode(i64 47689, i32 3)
  %call49 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %call48)
  %call50 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call47, %struct.rtx_def* %call49)
  %26 = load %struct.rtx_def*, %struct.rtx_def** %tramp.addr, align 8
  %27 = load i32, i32* %offset, align 4
  %add51 = add nsw i32 %27, 2
  %conv52 = sext i32 %add51 to i64
  %call53 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %26, i64 %conv52)
  %call54 = call %struct.rtx_def* @gen_rtx_MEM(i32 5, %struct.rtx_def* %call53)
  %28 = load %struct.rtx_def*, %struct.rtx_def** %cxt.addr, align 8
  %call55 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call54, %struct.rtx_def* %28)
  %29 = load i32, i32* %offset, align 4
  %add56 = add nsw i32 %29, 10
  store i32 %add56, i32* %offset, align 4
  %30 = load %struct.rtx_def*, %struct.rtx_def** %tramp.addr, align 8
  %31 = load i32, i32* %offset, align 4
  %conv57 = sext i32 %31 to i64
  %call58 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %30, i64 %conv57)
  %call59 = call %struct.rtx_def* @gen_rtx_MEM(i32 3, %struct.rtx_def* %call58)
  %call60 = call i64 @trunc_int_for_mode(i64 65353, i32 3)
  %call61 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %call60)
  %call62 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call59, %struct.rtx_def* %call61)
  %32 = load %struct.rtx_def*, %struct.rtx_def** %tramp.addr, align 8
  %33 = load i32, i32* %offset, align 4
  %add63 = add nsw i32 %33, 2
  %conv64 = sext i32 %add63 to i64
  %call65 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %32, i64 %conv64)
  %call66 = call %struct.rtx_def* @gen_rtx_MEM(i32 2, %struct.rtx_def* %call65)
  %call67 = call i64 @trunc_int_for_mode(i64 227, i32 2)
  %call68 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %call67)
  %call69 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call66, %struct.rtx_def* %call68)
  %34 = load i32, i32* %offset, align 4
  %add70 = add nsw i32 %34, 3
  store i32 %add70, i32* %offset, align 4
  %35 = load i32, i32* %offset, align 4
  %36 = load i32, i32* @target_flags, align 4
  %and71 = and i32 %36, 33554432
  %tobool72 = icmp ne i32 %and71, 0
  %cond = select i1 %tobool72, i32 23, i32 10
  %cmp = icmp sgt i32 %35, %cond
  br i1 %cmp, label %if.then.74, label %if.end.75

if.then.74:                                       ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 10894, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @__FUNCTION__.x86_initialize_trampoline, i32 0, i32 0)) #7
  unreachable

if.end.75:                                        ; preds = %if.end
  br label %if.end.76

if.end.76:                                        ; preds = %if.end.75, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @ix86_init_mmx_sse_builtins() #1 {
entry:
  %d = alloca %struct.builtin_description*, align 8
  %i = alloca i64, align 8
  %endlink = alloca %union.tree_node*, align 8
  %pchar_type_node = alloca %union.tree_node*, align 8
  %pfloat_type_node = alloca %union.tree_node*, align 8
  %pv2si_type_node = alloca %union.tree_node*, align 8
  %pdi_type_node = alloca %union.tree_node*, align 8
  %int_ftype_v4sf_v4sf = alloca %union.tree_node*, align 8
  %v4si_ftype_v4sf_v4sf = alloca %union.tree_node*, align 8
  %int_ftype_v4sf = alloca %union.tree_node*, align 8
  %int_ftype_v8qi = alloca %union.tree_node*, align 8
  %v4sf_ftype_v4sf_int = alloca %union.tree_node*, align 8
  %v4sf_ftype_v4sf_v2si = alloca %union.tree_node*, align 8
  %int_ftype_v4hi_int = alloca %union.tree_node*, align 8
  %v4hi_ftype_v4hi_int_int = alloca %union.tree_node*, align 8
  %v8qi_ftype_v4hi_v4hi = alloca %union.tree_node*, align 8
  %v4hi_ftype_v2si_v2si = alloca %union.tree_node*, align 8
  %v4sf_ftype_v4sf_v4sf_int = alloca %union.tree_node*, align 8
  %v4hi_ftype_v8qi_v8qi = alloca %union.tree_node*, align 8
  %v2si_ftype_v4hi_v4hi = alloca %union.tree_node*, align 8
  %v4hi_ftype_v4hi_int = alloca %union.tree_node*, align 8
  %v4hi_ftype_v4hi_di = alloca %union.tree_node*, align 8
  %v2si_ftype_v2si_di = alloca %union.tree_node*, align 8
  %void_ftype_void = alloca %union.tree_node*, align 8
  %void_ftype_unsigned = alloca %union.tree_node*, align 8
  %unsigned_ftype_void = alloca %union.tree_node*, align 8
  %di_ftype_void = alloca %union.tree_node*, align 8
  %v4sf_ftype_void = alloca %union.tree_node*, align 8
  %v2si_ftype_v4sf = alloca %union.tree_node*, align 8
  %maskmovq_args = alloca %union.tree_node*, align 8
  %void_ftype_v8qi_v8qi_pchar = alloca %union.tree_node*, align 8
  %v4sf_ftype_pfloat = alloca %union.tree_node*, align 8
  %v4sf_ftype_v4sf_pv2si = alloca %union.tree_node*, align 8
  %void_ftype_pv2si_v4sf = alloca %union.tree_node*, align 8
  %void_ftype_pfloat_v4sf = alloca %union.tree_node*, align 8
  %void_ftype_pdi_di = alloca %union.tree_node*, align 8
  %v4sf_ftype_v4sf = alloca %union.tree_node*, align 8
  %v4sf_ftype_v4sf_v4sf = alloca %union.tree_node*, align 8
  %v8qi_ftype_v8qi_v8qi = alloca %union.tree_node*, align 8
  %v4hi_ftype_v4hi_v4hi = alloca %union.tree_node*, align 8
  %v2si_ftype_v2si_v2si = alloca %union.tree_node*, align 8
  %di_ftype_di_di = alloca %union.tree_node*, align 8
  %v2si_ftype_v2sf = alloca %union.tree_node*, align 8
  %v2sf_ftype_v2si = alloca %union.tree_node*, align 8
  %v2si_ftype_v2si = alloca %union.tree_node*, align 8
  %v2sf_ftype_v2sf = alloca %union.tree_node*, align 8
  %v2sf_ftype_v2sf_v2sf = alloca %union.tree_node*, align 8
  %v2si_ftype_v2sf_v2sf = alloca %union.tree_node*, align 8
  %mode = alloca i32, align 4
  %type = alloca %union.tree_node*, align 8
  %0 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 32), align 8
  store %union.tree_node* %0, %union.tree_node** %endlink, align 8
  %1 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i32 0, i64 0), align 8
  %call = call %union.tree_node* @build_pointer_type(%union.tree_node* %1)
  store %union.tree_node* %call, %union.tree_node** %pchar_type_node, align 8
  %2 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 24), align 8
  %call1 = call %union.tree_node* @build_pointer_type(%union.tree_node* %2)
  store %union.tree_node* %call1, %union.tree_node** %pfloat_type_node, align 8
  %3 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 47), align 8
  %call2 = call %union.tree_node* @build_pointer_type(%union.tree_node* %3)
  store %union.tree_node* %call2, %union.tree_node** %pv2si_type_node, align 8
  %4 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i32 0, i64 10), align 8
  %call3 = call %union.tree_node* @build_pointer_type(%union.tree_node* %4)
  store %union.tree_node* %call3, %union.tree_node** %pdi_type_node, align 8
  %5 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i32 0, i64 5), align 8
  %6 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 41), align 8
  %7 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 41), align 8
  %8 = load %union.tree_node*, %union.tree_node** %endlink, align 8
  %call4 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %7, %union.tree_node* %8)
  %call5 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %6, %union.tree_node* %call4)
  %call6 = call %union.tree_node* @build_function_type(%union.tree_node* %5, %union.tree_node* %call5)
  store %union.tree_node* %call6, %union.tree_node** %int_ftype_v4sf_v4sf, align 8
  %9 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 43), align 8
  %10 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 41), align 8
  %11 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 41), align 8
  %12 = load %union.tree_node*, %union.tree_node** %endlink, align 8
  %call7 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %11, %union.tree_node* %12)
  %call8 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %10, %union.tree_node* %call7)
  %call9 = call %union.tree_node* @build_function_type(%union.tree_node* %9, %union.tree_node* %call8)
  store %union.tree_node* %call9, %union.tree_node** %v4si_ftype_v4sf_v4sf, align 8
  %13 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i32 0, i64 5), align 8
  %14 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 41), align 8
  %15 = load %union.tree_node*, %union.tree_node** %endlink, align 8
  %call10 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %14, %union.tree_node* %15)
  %call11 = call %union.tree_node* @build_function_type(%union.tree_node* %13, %union.tree_node* %call10)
  store %union.tree_node* %call11, %union.tree_node** %int_ftype_v4sf, align 8
  %16 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i32 0, i64 5), align 8
  %17 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 45), align 8
  %18 = load %union.tree_node*, %union.tree_node** %endlink, align 8
  %call12 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %17, %union.tree_node* %18)
  %call13 = call %union.tree_node* @build_function_type(%union.tree_node* %16, %union.tree_node* %call12)
  store %union.tree_node* %call13, %union.tree_node** %int_ftype_v8qi, align 8
  %19 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 41), align 8
  %20 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 41), align 8
  %21 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i32 0, i64 5), align 8
  %22 = load %union.tree_node*, %union.tree_node** %endlink, align 8
  %call14 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %21, %union.tree_node* %22)
  %call15 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %20, %union.tree_node* %call14)
  %call16 = call %union.tree_node* @build_function_type(%union.tree_node* %19, %union.tree_node* %call15)
  store %union.tree_node* %call16, %union.tree_node** %v4sf_ftype_v4sf_int, align 8
  %23 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 41), align 8
  %24 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 41), align 8
  %25 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 47), align 8
  %26 = load %union.tree_node*, %union.tree_node** %endlink, align 8
  %call17 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %25, %union.tree_node* %26)
  %call18 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %24, %union.tree_node* %call17)
  %call19 = call %union.tree_node* @build_function_type(%union.tree_node* %23, %union.tree_node* %call18)
  store %union.tree_node* %call19, %union.tree_node** %v4sf_ftype_v4sf_v2si, align 8
  %27 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i32 0, i64 5), align 8
  %28 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 46), align 8
  %29 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i32 0, i64 5), align 8
  %30 = load %union.tree_node*, %union.tree_node** %endlink, align 8
  %call20 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %29, %union.tree_node* %30)
  %call21 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %28, %union.tree_node* %call20)
  %call22 = call %union.tree_node* @build_function_type(%union.tree_node* %27, %union.tree_node* %call21)
  store %union.tree_node* %call22, %union.tree_node** %int_ftype_v4hi_int, align 8
  %31 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 46), align 8
  %32 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 46), align 8
  %33 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i32 0, i64 5), align 8
  %34 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i32 0, i64 5), align 8
  %35 = load %union.tree_node*, %union.tree_node** %endlink, align 8
  %call23 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %34, %union.tree_node* %35)
  %call24 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %33, %union.tree_node* %call23)
  %call25 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %32, %union.tree_node* %call24)
  %call26 = call %union.tree_node* @build_function_type(%union.tree_node* %31, %union.tree_node* %call25)
  store %union.tree_node* %call26, %union.tree_node** %v4hi_ftype_v4hi_int_int, align 8
  %36 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 45), align 8
  %37 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 46), align 8
  %38 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 46), align 8
  %39 = load %union.tree_node*, %union.tree_node** %endlink, align 8
  %call27 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %38, %union.tree_node* %39)
  %call28 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %37, %union.tree_node* %call27)
  %call29 = call %union.tree_node* @build_function_type(%union.tree_node* %36, %union.tree_node* %call28)
  store %union.tree_node* %call29, %union.tree_node** %v8qi_ftype_v4hi_v4hi, align 8
  %40 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 46), align 8
  %41 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 47), align 8
  %42 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 47), align 8
  %43 = load %union.tree_node*, %union.tree_node** %endlink, align 8
  %call30 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %42, %union.tree_node* %43)
  %call31 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %41, %union.tree_node* %call30)
  %call32 = call %union.tree_node* @build_function_type(%union.tree_node* %40, %union.tree_node* %call31)
  store %union.tree_node* %call32, %union.tree_node** %v4hi_ftype_v2si_v2si, align 8
  %44 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 41), align 8
  %45 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 41), align 8
  %46 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 41), align 8
  %47 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i32 0, i64 5), align 8
  %48 = load %union.tree_node*, %union.tree_node** %endlink, align 8
  %call33 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %47, %union.tree_node* %48)
  %call34 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %46, %union.tree_node* %call33)
  %call35 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %45, %union.tree_node* %call34)
  %call36 = call %union.tree_node* @build_function_type(%union.tree_node* %44, %union.tree_node* %call35)
  store %union.tree_node* %call36, %union.tree_node** %v4sf_ftype_v4sf_v4sf_int, align 8
  %49 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 46), align 8
  %50 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 45), align 8
  %51 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 45), align 8
  %52 = load %union.tree_node*, %union.tree_node** %endlink, align 8
  %call37 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %51, %union.tree_node* %52)
  %call38 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %50, %union.tree_node* %call37)
  %call39 = call %union.tree_node* @build_function_type(%union.tree_node* %49, %union.tree_node* %call38)
  store %union.tree_node* %call39, %union.tree_node** %v4hi_ftype_v8qi_v8qi, align 8
  %53 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 47), align 8
  %54 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 46), align 8
  %55 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 46), align 8
  %56 = load %union.tree_node*, %union.tree_node** %endlink, align 8
  %call40 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %55, %union.tree_node* %56)
  %call41 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %54, %union.tree_node* %call40)
  %call42 = call %union.tree_node* @build_function_type(%union.tree_node* %53, %union.tree_node* %call41)
  store %union.tree_node* %call42, %union.tree_node** %v2si_ftype_v4hi_v4hi, align 8
  %57 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 46), align 8
  %58 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 46), align 8
  %59 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i32 0, i64 5), align 8
  %60 = load %union.tree_node*, %union.tree_node** %endlink, align 8
  %call43 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %59, %union.tree_node* %60)
  %call44 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %58, %union.tree_node* %call43)
  %call45 = call %union.tree_node* @build_function_type(%union.tree_node* %57, %union.tree_node* %call44)
  store %union.tree_node* %call45, %union.tree_node** %v4hi_ftype_v4hi_int, align 8
  %61 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 46), align 8
  %62 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 46), align 8
  %63 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i32 0, i64 9), align 8
  %64 = load %union.tree_node*, %union.tree_node** %endlink, align 8
  %call46 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %63, %union.tree_node* %64)
  %call47 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %62, %union.tree_node* %call46)
  %call48 = call %union.tree_node* @build_function_type(%union.tree_node* %61, %union.tree_node* %call47)
  store %union.tree_node* %call48, %union.tree_node** %v4hi_ftype_v4hi_di, align 8
  %65 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 47), align 8
  %66 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 47), align 8
  %67 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i32 0, i64 9), align 8
  %68 = load %union.tree_node*, %union.tree_node** %endlink, align 8
  %call49 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %67, %union.tree_node* %68)
  %call50 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %66, %union.tree_node* %call49)
  %call51 = call %union.tree_node* @build_function_type(%union.tree_node* %65, %union.tree_node* %call50)
  store %union.tree_node* %call51, %union.tree_node** %v2si_ftype_v2si_di, align 8
  %69 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 27), align 8
  %70 = load %union.tree_node*, %union.tree_node** %endlink, align 8
  %call52 = call %union.tree_node* @build_function_type(%union.tree_node* %69, %union.tree_node* %70)
  store %union.tree_node* %call52, %union.tree_node** %void_ftype_void, align 8
  %71 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 27), align 8
  %72 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i32 0, i64 6), align 8
  %73 = load %union.tree_node*, %union.tree_node** %endlink, align 8
  %call53 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %72, %union.tree_node* %73)
  %call54 = call %union.tree_node* @build_function_type(%union.tree_node* %71, %union.tree_node* %call53)
  store %union.tree_node* %call54, %union.tree_node** %void_ftype_unsigned, align 8
  %74 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i32 0, i64 6), align 8
  %75 = load %union.tree_node*, %union.tree_node** %endlink, align 8
  %call55 = call %union.tree_node* @build_function_type(%union.tree_node* %74, %union.tree_node* %75)
  store %union.tree_node* %call55, %union.tree_node** %unsigned_ftype_void, align 8
  %76 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i32 0, i64 10), align 8
  %77 = load %union.tree_node*, %union.tree_node** %endlink, align 8
  %call56 = call %union.tree_node* @build_function_type(%union.tree_node* %76, %union.tree_node* %77)
  store %union.tree_node* %call56, %union.tree_node** %di_ftype_void, align 8
  %78 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 41), align 8
  %79 = load %union.tree_node*, %union.tree_node** %endlink, align 8
  %call57 = call %union.tree_node* @build_function_type(%union.tree_node* %78, %union.tree_node* %79)
  store %union.tree_node* %call57, %union.tree_node** %v4sf_ftype_void, align 8
  %80 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 47), align 8
  %81 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 41), align 8
  %82 = load %union.tree_node*, %union.tree_node** %endlink, align 8
  %call58 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %81, %union.tree_node* %82)
  %call59 = call %union.tree_node* @build_function_type(%union.tree_node* %80, %union.tree_node* %call58)
  store %union.tree_node* %call59, %union.tree_node** %v2si_ftype_v4sf, align 8
  %83 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 45), align 8
  %84 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 45), align 8
  %85 = load %union.tree_node*, %union.tree_node** %pchar_type_node, align 8
  %86 = load %union.tree_node*, %union.tree_node** %endlink, align 8
  %call60 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %85, %union.tree_node* %86)
  %call61 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %84, %union.tree_node* %call60)
  %call62 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %83, %union.tree_node* %call61)
  store %union.tree_node* %call62, %union.tree_node** %maskmovq_args, align 8
  %87 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 27), align 8
  %88 = load %union.tree_node*, %union.tree_node** %maskmovq_args, align 8
  %call63 = call %union.tree_node* @build_function_type(%union.tree_node* %87, %union.tree_node* %88)
  store %union.tree_node* %call63, %union.tree_node** %void_ftype_v8qi_v8qi_pchar, align 8
  %89 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 41), align 8
  %90 = load %union.tree_node*, %union.tree_node** %pfloat_type_node, align 8
  %91 = load %union.tree_node*, %union.tree_node** %endlink, align 8
  %call64 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %90, %union.tree_node* %91)
  %call65 = call %union.tree_node* @build_function_type(%union.tree_node* %89, %union.tree_node* %call64)
  store %union.tree_node* %call65, %union.tree_node** %v4sf_ftype_pfloat, align 8
  %92 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 41), align 8
  %93 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 41), align 8
  %94 = load %union.tree_node*, %union.tree_node** %pv2si_type_node, align 8
  %95 = load %union.tree_node*, %union.tree_node** %endlink, align 8
  %call66 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %94, %union.tree_node* %95)
  %call67 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %93, %union.tree_node* %call66)
  %call68 = call %union.tree_node* @build_function_type(%union.tree_node* %92, %union.tree_node* %call67)
  store %union.tree_node* %call68, %union.tree_node** %v4sf_ftype_v4sf_pv2si, align 8
  %96 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 27), align 8
  %97 = load %union.tree_node*, %union.tree_node** %pv2si_type_node, align 8
  %98 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 41), align 8
  %99 = load %union.tree_node*, %union.tree_node** %endlink, align 8
  %call69 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %98, %union.tree_node* %99)
  %call70 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %97, %union.tree_node* %call69)
  %call71 = call %union.tree_node* @build_function_type(%union.tree_node* %96, %union.tree_node* %call70)
  store %union.tree_node* %call71, %union.tree_node** %void_ftype_pv2si_v4sf, align 8
  %100 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 27), align 8
  %101 = load %union.tree_node*, %union.tree_node** %pfloat_type_node, align 8
  %102 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 41), align 8
  %103 = load %union.tree_node*, %union.tree_node** %endlink, align 8
  %call72 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %102, %union.tree_node* %103)
  %call73 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %101, %union.tree_node* %call72)
  %call74 = call %union.tree_node* @build_function_type(%union.tree_node* %100, %union.tree_node* %call73)
  store %union.tree_node* %call74, %union.tree_node** %void_ftype_pfloat_v4sf, align 8
  %104 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 27), align 8
  %105 = load %union.tree_node*, %union.tree_node** %pdi_type_node, align 8
  %106 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i32 0, i64 10), align 8
  %107 = load %union.tree_node*, %union.tree_node** %endlink, align 8
  %call75 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %106, %union.tree_node* %107)
  %call76 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %105, %union.tree_node* %call75)
  %call77 = call %union.tree_node* @build_function_type(%union.tree_node* %104, %union.tree_node* %call76)
  store %union.tree_node* %call77, %union.tree_node** %void_ftype_pdi_di, align 8
  %108 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 41), align 8
  %109 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 41), align 8
  %110 = load %union.tree_node*, %union.tree_node** %endlink, align 8
  %call78 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %109, %union.tree_node* %110)
  %call79 = call %union.tree_node* @build_function_type(%union.tree_node* %108, %union.tree_node* %call78)
  store %union.tree_node* %call79, %union.tree_node** %v4sf_ftype_v4sf, align 8
  %111 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 41), align 8
  %112 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 41), align 8
  %113 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 41), align 8
  %114 = load %union.tree_node*, %union.tree_node** %endlink, align 8
  %call80 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %113, %union.tree_node* %114)
  %call81 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %112, %union.tree_node* %call80)
  %call82 = call %union.tree_node* @build_function_type(%union.tree_node* %111, %union.tree_node* %call81)
  store %union.tree_node* %call82, %union.tree_node** %v4sf_ftype_v4sf_v4sf, align 8
  %115 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 45), align 8
  %116 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 45), align 8
  %117 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 45), align 8
  %118 = load %union.tree_node*, %union.tree_node** %endlink, align 8
  %call83 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %117, %union.tree_node* %118)
  %call84 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %116, %union.tree_node* %call83)
  %call85 = call %union.tree_node* @build_function_type(%union.tree_node* %115, %union.tree_node* %call84)
  store %union.tree_node* %call85, %union.tree_node** %v8qi_ftype_v8qi_v8qi, align 8
  %119 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 46), align 8
  %120 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 46), align 8
  %121 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 46), align 8
  %122 = load %union.tree_node*, %union.tree_node** %endlink, align 8
  %call86 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %121, %union.tree_node* %122)
  %call87 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %120, %union.tree_node* %call86)
  %call88 = call %union.tree_node* @build_function_type(%union.tree_node* %119, %union.tree_node* %call87)
  store %union.tree_node* %call88, %union.tree_node** %v4hi_ftype_v4hi_v4hi, align 8
  %123 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 47), align 8
  %124 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 47), align 8
  %125 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 47), align 8
  %126 = load %union.tree_node*, %union.tree_node** %endlink, align 8
  %call89 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %125, %union.tree_node* %126)
  %call90 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %124, %union.tree_node* %call89)
  %call91 = call %union.tree_node* @build_function_type(%union.tree_node* %123, %union.tree_node* %call90)
  store %union.tree_node* %call91, %union.tree_node** %v2si_ftype_v2si_v2si, align 8
  %127 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i32 0, i64 10), align 8
  %128 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i32 0, i64 10), align 8
  %129 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i32 0, i64 10), align 8
  %130 = load %union.tree_node*, %union.tree_node** %endlink, align 8
  %call92 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %129, %union.tree_node* %130)
  %call93 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %128, %union.tree_node* %call92)
  %call94 = call %union.tree_node* @build_function_type(%union.tree_node* %127, %union.tree_node* %call93)
  store %union.tree_node* %call94, %union.tree_node** %di_ftype_di_di, align 8
  %131 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 47), align 8
  %132 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 48), align 8
  %133 = load %union.tree_node*, %union.tree_node** %endlink, align 8
  %call95 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %132, %union.tree_node* %133)
  %call96 = call %union.tree_node* @build_function_type(%union.tree_node* %131, %union.tree_node* %call95)
  store %union.tree_node* %call96, %union.tree_node** %v2si_ftype_v2sf, align 8
  %134 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 48), align 8
  %135 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 47), align 8
  %136 = load %union.tree_node*, %union.tree_node** %endlink, align 8
  %call97 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %135, %union.tree_node* %136)
  %call98 = call %union.tree_node* @build_function_type(%union.tree_node* %134, %union.tree_node* %call97)
  store %union.tree_node* %call98, %union.tree_node** %v2sf_ftype_v2si, align 8
  %137 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 47), align 8
  %138 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 47), align 8
  %139 = load %union.tree_node*, %union.tree_node** %endlink, align 8
  %call99 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %138, %union.tree_node* %139)
  %call100 = call %union.tree_node* @build_function_type(%union.tree_node* %137, %union.tree_node* %call99)
  store %union.tree_node* %call100, %union.tree_node** %v2si_ftype_v2si, align 8
  %140 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 48), align 8
  %141 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 48), align 8
  %142 = load %union.tree_node*, %union.tree_node** %endlink, align 8
  %call101 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %141, %union.tree_node* %142)
  %call102 = call %union.tree_node* @build_function_type(%union.tree_node* %140, %union.tree_node* %call101)
  store %union.tree_node* %call102, %union.tree_node** %v2sf_ftype_v2sf, align 8
  %143 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 48), align 8
  %144 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 48), align 8
  %145 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 48), align 8
  %146 = load %union.tree_node*, %union.tree_node** %endlink, align 8
  %call103 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %145, %union.tree_node* %146)
  %call104 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %144, %union.tree_node* %call103)
  %call105 = call %union.tree_node* @build_function_type(%union.tree_node* %143, %union.tree_node* %call104)
  store %union.tree_node* %call105, %union.tree_node** %v2sf_ftype_v2sf_v2sf, align 8
  %147 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 47), align 8
  %148 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 48), align 8
  %149 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 48), align 8
  %150 = load %union.tree_node*, %union.tree_node** %endlink, align 8
  %call106 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %149, %union.tree_node* %150)
  %call107 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %148, %union.tree_node* %call106)
  %call108 = call %union.tree_node* @build_function_type(%union.tree_node* %147, %union.tree_node* %call107)
  store %union.tree_node* %call108, %union.tree_node** %v2si_ftype_v2sf_v2sf, align 8
  store i64 0, i64* %i, align 8
  store %struct.builtin_description* getelementptr inbounds ([103 x %struct.builtin_description], [103 x %struct.builtin_description]* @bdesc_2arg, i32 0, i32 0), %struct.builtin_description** %d, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %151 = load i64, i64* %i, align 8
  %cmp = icmp ult i64 %151, 103
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %152 = load %struct.builtin_description*, %struct.builtin_description** %d, align 8
  %name = getelementptr inbounds %struct.builtin_description, %struct.builtin_description* %152, i32 0, i32 2
  %153 = load i8*, i8** %name, align 8
  %cmp109 = icmp eq i8* %153, null
  br i1 %cmp109, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.inc

if.end:                                           ; preds = %for.body
  %154 = load %struct.builtin_description*, %struct.builtin_description** %d, align 8
  %icode = getelementptr inbounds %struct.builtin_description, %struct.builtin_description* %154, i32 0, i32 1
  %155 = load i32, i32* %icode, align 4
  %idxprom = zext i32 %155 to i64
  %arrayidx = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom
  %operand = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx, i32 0, i32 3
  %156 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand, align 8
  %arrayidx110 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %156, i64 1
  %mode111 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx110, i32 0, i32 2
  %bf.load = load i16, i16* %mode111, align 8
  %bf.cast = zext i16 %bf.load to i32
  store i32 %bf.cast, i32* %mode, align 4
  %157 = load i32, i32* %mode, align 4
  switch i32 %157, label %sw.default [
    i32 46, label %sw.bb
    i32 39, label %sw.bb.112
    i32 36, label %sw.bb.113
    i32 33, label %sw.bb.114
    i32 5, label %sw.bb.115
  ]

sw.bb:                                            ; preds = %if.end
  %158 = load %union.tree_node*, %union.tree_node** %v4sf_ftype_v4sf_v4sf, align 8
  store %union.tree_node* %158, %union.tree_node** %type, align 8
  br label %sw.epilog

sw.bb.112:                                        ; preds = %if.end
  %159 = load %union.tree_node*, %union.tree_node** %v8qi_ftype_v8qi_v8qi, align 8
  store %union.tree_node* %159, %union.tree_node** %type, align 8
  br label %sw.epilog

sw.bb.113:                                        ; preds = %if.end
  %160 = load %union.tree_node*, %union.tree_node** %v4hi_ftype_v4hi_v4hi, align 8
  store %union.tree_node* %160, %union.tree_node** %type, align 8
  br label %sw.epilog

sw.bb.114:                                        ; preds = %if.end
  %161 = load %union.tree_node*, %union.tree_node** %v2si_ftype_v2si_v2si, align 8
  store %union.tree_node* %161, %union.tree_node** %type, align 8
  br label %sw.epilog

sw.bb.115:                                        ; preds = %if.end
  %162 = load %union.tree_node*, %union.tree_node** %di_ftype_di_di, align 8
  store %union.tree_node* %162, %union.tree_node** %type, align 8
  br label %sw.epilog

sw.default:                                       ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 11330, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @__FUNCTION__.ix86_init_mmx_sse_builtins, i32 0, i32 0)) #7
  unreachable

sw.epilog:                                        ; preds = %sw.bb.115, %sw.bb.114, %sw.bb.113, %sw.bb.112, %sw.bb
  %163 = load %struct.builtin_description*, %struct.builtin_description** %d, align 8
  %icode116 = getelementptr inbounds %struct.builtin_description, %struct.builtin_description* %163, i32 0, i32 1
  %164 = load i32, i32* %icode116, align 4
  %cmp117 = icmp eq i32 %164, 727
  br i1 %cmp117, label %if.then.126, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %sw.epilog
  %165 = load %struct.builtin_description*, %struct.builtin_description** %d, align 8
  %icode118 = getelementptr inbounds %struct.builtin_description, %struct.builtin_description* %165, i32 0, i32 1
  %166 = load i32, i32* %icode118, align 4
  %cmp119 = icmp eq i32 %166, 728
  br i1 %cmp119, label %if.then.126, label %lor.lhs.false.120

lor.lhs.false.120:                                ; preds = %lor.lhs.false
  %167 = load %struct.builtin_description*, %struct.builtin_description** %d, align 8
  %icode121 = getelementptr inbounds %struct.builtin_description, %struct.builtin_description* %167, i32 0, i32 1
  %168 = load i32, i32* %icode121, align 4
  %cmp122 = icmp eq i32 %168, 729
  br i1 %cmp122, label %if.then.126, label %lor.lhs.false.123

lor.lhs.false.123:                                ; preds = %lor.lhs.false.120
  %169 = load %struct.builtin_description*, %struct.builtin_description** %d, align 8
  %icode124 = getelementptr inbounds %struct.builtin_description, %struct.builtin_description* %169, i32 0, i32 1
  %170 = load i32, i32* %icode124, align 4
  %cmp125 = icmp eq i32 %170, 730
  br i1 %cmp125, label %if.then.126, label %if.end.127

if.then.126:                                      ; preds = %lor.lhs.false.123, %lor.lhs.false.120, %lor.lhs.false, %sw.epilog
  %171 = load %union.tree_node*, %union.tree_node** %v4si_ftype_v4sf_v4sf, align 8
  store %union.tree_node* %171, %union.tree_node** %type, align 8
  br label %if.end.127

if.end.127:                                       ; preds = %if.then.126, %lor.lhs.false.123
  br label %do.body

do.body:                                          ; preds = %if.end.127
  %172 = load %struct.builtin_description*, %struct.builtin_description** %d, align 8
  %mask = getelementptr inbounds %struct.builtin_description, %struct.builtin_description* %172, i32 0, i32 0
  %173 = load i32, i32* %mask, align 4
  %174 = load i32, i32* @target_flags, align 4
  %and = and i32 %173, %174
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then.128, label %if.end.131

if.then.128:                                      ; preds = %do.body
  %175 = load %struct.builtin_description*, %struct.builtin_description** %d, align 8
  %name129 = getelementptr inbounds %struct.builtin_description, %struct.builtin_description* %175, i32 0, i32 2
  %176 = load i8*, i8** %name129, align 8
  %177 = load %union.tree_node*, %union.tree_node** %type, align 8
  %178 = load %struct.builtin_description*, %struct.builtin_description** %d, align 8
  %code = getelementptr inbounds %struct.builtin_description, %struct.builtin_description* %178, i32 0, i32 3
  %179 = load i32, i32* %code, align 4
  %call130 = call %union.tree_node* @builtin_function(i8* %176, %union.tree_node* %177, i32 %179, i32 2, i8* null)
  br label %if.end.131

if.end.131:                                       ; preds = %if.then.128, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end.131
  br label %for.inc

for.inc:                                          ; preds = %do.end, %if.then
  %180 = load i64, i64* %i, align 8
  %inc = add i64 %180, 1
  store i64 %inc, i64* %i, align 8
  %181 = load %struct.builtin_description*, %struct.builtin_description** %d, align 8
  %incdec.ptr = getelementptr inbounds %struct.builtin_description, %struct.builtin_description* %181, i32 1
  store %struct.builtin_description* %incdec.ptr, %struct.builtin_description** %d, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %do.body.132

do.body.132:                                      ; preds = %for.end
  %182 = load i32, i32* @target_flags, align 4
  %and133 = and i32 16384, %182
  %tobool134 = icmp ne i32 %and133, 0
  br i1 %tobool134, label %if.then.135, label %if.end.137

if.then.135:                                      ; preds = %do.body.132
  %183 = load %union.tree_node*, %union.tree_node** %di_ftype_void, align 8
  %call136 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.320, i32 0, i32 0), %union.tree_node* %183, i32 181, i32 2, i8* null)
  br label %if.end.137

if.end.137:                                       ; preds = %if.then.135, %do.body.132
  br label %do.end.138

do.end.138:                                       ; preds = %if.end.137
  br label %do.body.139

do.body.139:                                      ; preds = %do.end.138
  %184 = load i32, i32* @target_flags, align 4
  %and140 = and i32 16384, %184
  %tobool141 = icmp ne i32 %and140, 0
  br i1 %tobool141, label %if.then.142, label %if.end.144

if.then.142:                                      ; preds = %do.body.139
  %185 = load %union.tree_node*, %union.tree_node** %void_ftype_void, align 8
  %call143 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.321, i32 0, i32 0), %union.tree_node* %185, i32 150, i32 2, i8* null)
  br label %if.end.144

if.end.144:                                       ; preds = %if.then.142, %do.body.139
  br label %do.end.145

do.end.145:                                       ; preds = %if.end.144
  br label %do.body.146

do.body.146:                                      ; preds = %do.end.145
  %186 = load i32, i32* @target_flags, align 4
  %and147 = and i32 16384, %186
  %tobool148 = icmp ne i32 %and147, 0
  br i1 %tobool148, label %if.then.149, label %if.end.151

if.then.149:                                      ; preds = %do.body.146
  %187 = load %union.tree_node*, %union.tree_node** %void_ftype_unsigned, align 8
  %call150 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.322, i32 0, i32 0), %union.tree_node* %187, i32 151, i32 2, i8* null)
  br label %if.end.151

if.end.151:                                       ; preds = %if.then.149, %do.body.146
  br label %do.end.152

do.end.152:                                       ; preds = %if.end.151
  br label %do.body.153

do.body.153:                                      ; preds = %do.end.152
  %188 = load i32, i32* @target_flags, align 4
  %and154 = and i32 16384, %188
  %tobool155 = icmp ne i32 %and154, 0
  br i1 %tobool155, label %if.then.156, label %if.end.158

if.then.156:                                      ; preds = %do.body.153
  %189 = load %union.tree_node*, %union.tree_node** %unsigned_ftype_void, align 8
  %call157 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.323, i32 0, i32 0), %union.tree_node* %189, i32 152, i32 2, i8* null)
  br label %if.end.158

if.end.158:                                       ; preds = %if.then.156, %do.body.153
  br label %do.end.159

do.end.159:                                       ; preds = %if.end.158
  br label %do.body.160

do.body.160:                                      ; preds = %do.end.159
  %190 = load i32, i32* @target_flags, align 4
  %and161 = and i32 16384, %190
  %tobool162 = icmp ne i32 %and161, 0
  br i1 %tobool162, label %if.then.163, label %if.end.165

if.then.163:                                      ; preds = %do.body.160
  %191 = load %union.tree_node*, %union.tree_node** %v4hi_ftype_v4hi_di, align 8
  %call164 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.324, i32 0, i32 0), %union.tree_node* %191, i32 115, i32 2, i8* null)
  br label %if.end.165

if.end.165:                                       ; preds = %if.then.163, %do.body.160
  br label %do.end.166

do.end.166:                                       ; preds = %if.end.165
  br label %do.body.167

do.body.167:                                      ; preds = %do.end.166
  %192 = load i32, i32* @target_flags, align 4
  %and168 = and i32 16384, %192
  %tobool169 = icmp ne i32 %and168, 0
  br i1 %tobool169, label %if.then.170, label %if.end.172

if.then.170:                                      ; preds = %do.body.167
  %193 = load %union.tree_node*, %union.tree_node** %v2si_ftype_v2si_di, align 8
  %call171 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.325, i32 0, i32 0), %union.tree_node* %193, i32 116, i32 2, i8* null)
  br label %if.end.172

if.end.172:                                       ; preds = %if.then.170, %do.body.167
  br label %do.end.173

do.end.173:                                       ; preds = %if.end.172
  br label %do.body.174

do.body.174:                                      ; preds = %do.end.173
  %194 = load i32, i32* @target_flags, align 4
  %and175 = and i32 16384, %194
  %tobool176 = icmp ne i32 %and175, 0
  br i1 %tobool176, label %if.then.177, label %if.end.179

if.then.177:                                      ; preds = %do.body.174
  %195 = load %union.tree_node*, %union.tree_node** %di_ftype_di_di, align 8
  %call178 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.326, i32 0, i32 0), %union.tree_node* %195, i32 117, i32 2, i8* null)
  br label %if.end.179

if.end.179:                                       ; preds = %if.then.177, %do.body.174
  br label %do.end.180

do.end.180:                                       ; preds = %if.end.179
  br label %do.body.181

do.body.181:                                      ; preds = %do.end.180
  %196 = load i32, i32* @target_flags, align 4
  %and182 = and i32 16384, %196
  %tobool183 = icmp ne i32 %and182, 0
  br i1 %tobool183, label %if.then.184, label %if.end.186

if.then.184:                                      ; preds = %do.body.181
  %197 = load %union.tree_node*, %union.tree_node** %v4hi_ftype_v4hi_di, align 8
  %call185 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.327, i32 0, i32 0), %union.tree_node* %197, i32 120, i32 2, i8* null)
  br label %if.end.186

if.end.186:                                       ; preds = %if.then.184, %do.body.181
  br label %do.end.187

do.end.187:                                       ; preds = %if.end.186
  br label %do.body.188

do.body.188:                                      ; preds = %do.end.187
  %198 = load i32, i32* @target_flags, align 4
  %and189 = and i32 16384, %198
  %tobool190 = icmp ne i32 %and189, 0
  br i1 %tobool190, label %if.then.191, label %if.end.193

if.then.191:                                      ; preds = %do.body.188
  %199 = load %union.tree_node*, %union.tree_node** %v2si_ftype_v2si_di, align 8
  %call192 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.328, i32 0, i32 0), %union.tree_node* %199, i32 121, i32 2, i8* null)
  br label %if.end.193

if.end.193:                                       ; preds = %if.then.191, %do.body.188
  br label %do.end.194

do.end.194:                                       ; preds = %if.end.193
  br label %do.body.195

do.body.195:                                      ; preds = %do.end.194
  %200 = load i32, i32* @target_flags, align 4
  %and196 = and i32 16384, %200
  %tobool197 = icmp ne i32 %and196, 0
  br i1 %tobool197, label %if.then.198, label %if.end.200

if.then.198:                                      ; preds = %do.body.195
  %201 = load %union.tree_node*, %union.tree_node** %di_ftype_di_di, align 8
  %call199 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.329, i32 0, i32 0), %union.tree_node* %201, i32 122, i32 2, i8* null)
  br label %if.end.200

if.end.200:                                       ; preds = %if.then.198, %do.body.195
  br label %do.end.201

do.end.201:                                       ; preds = %if.end.200
  br label %do.body.202

do.body.202:                                      ; preds = %do.end.201
  %202 = load i32, i32* @target_flags, align 4
  %and203 = and i32 16384, %202
  %tobool204 = icmp ne i32 %and203, 0
  br i1 %tobool204, label %if.then.205, label %if.end.207

if.then.205:                                      ; preds = %do.body.202
  %203 = load %union.tree_node*, %union.tree_node** %v4hi_ftype_v4hi_di, align 8
  %call206 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.330, i32 0, i32 0), %union.tree_node* %203, i32 118, i32 2, i8* null)
  br label %if.end.207

if.end.207:                                       ; preds = %if.then.205, %do.body.202
  br label %do.end.208

do.end.208:                                       ; preds = %if.end.207
  br label %do.body.209

do.body.209:                                      ; preds = %do.end.208
  %204 = load i32, i32* @target_flags, align 4
  %and210 = and i32 16384, %204
  %tobool211 = icmp ne i32 %and210, 0
  br i1 %tobool211, label %if.then.212, label %if.end.214

if.then.212:                                      ; preds = %do.body.209
  %205 = load %union.tree_node*, %union.tree_node** %v2si_ftype_v2si_di, align 8
  %call213 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.331, i32 0, i32 0), %union.tree_node* %205, i32 119, i32 2, i8* null)
  br label %if.end.214

if.end.214:                                       ; preds = %if.then.212, %do.body.209
  br label %do.end.215

do.end.215:                                       ; preds = %if.end.214
  br label %do.body.216

do.body.216:                                      ; preds = %do.end.215
  %206 = load i32, i32* @target_flags, align 4
  %and217 = and i32 16384, %206
  %tobool218 = icmp ne i32 %and217, 0
  br i1 %tobool218, label %if.then.219, label %if.end.221

if.then.219:                                      ; preds = %do.body.216
  %207 = load %union.tree_node*, %union.tree_node** %v4hi_ftype_v4hi_int, align 8
  %call220 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.332, i32 0, i32 0), %union.tree_node* %207, i32 114, i32 2, i8* null)
  br label %if.end.221

if.end.221:                                       ; preds = %if.then.219, %do.body.216
  br label %do.end.222

do.end.222:                                       ; preds = %if.end.221
  br label %do.body.223

do.body.223:                                      ; preds = %do.end.222
  %208 = load i32, i32* @target_flags, align 4
  %and224 = and i32 16384, %208
  %tobool225 = icmp ne i32 %and224, 0
  br i1 %tobool225, label %if.then.226, label %if.end.228

if.then.226:                                      ; preds = %do.body.223
  %209 = load %union.tree_node*, %union.tree_node** %v2si_ftype_v4hi_v4hi, align 8
  %call227 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.333, i32 0, i32 0), %union.tree_node* %209, i32 105, i32 2, i8* null)
  br label %if.end.228

if.end.228:                                       ; preds = %if.then.226, %do.body.223
  br label %do.end.229

do.end.229:                                       ; preds = %if.end.228
  store i64 0, i64* %i, align 8
  store %struct.builtin_description* getelementptr inbounds ([12 x %struct.builtin_description], [12 x %struct.builtin_description]* @bdesc_comi, i32 0, i32 0), %struct.builtin_description** %d, align 8
  br label %for.cond.230

for.cond.230:                                     ; preds = %for.inc.243, %do.end.229
  %210 = load i64, i64* %i, align 8
  %cmp231 = icmp ult i64 %210, 12
  br i1 %cmp231, label %for.body.232, label %for.end.246

for.body.232:                                     ; preds = %for.cond.230
  br label %do.body.233

do.body.233:                                      ; preds = %for.body.232
  %211 = load %struct.builtin_description*, %struct.builtin_description** %d, align 8
  %mask234 = getelementptr inbounds %struct.builtin_description, %struct.builtin_description* %211, i32 0, i32 0
  %212 = load i32, i32* %mask234, align 4
  %213 = load i32, i32* @target_flags, align 4
  %and235 = and i32 %212, %213
  %tobool236 = icmp ne i32 %and235, 0
  br i1 %tobool236, label %if.then.237, label %if.end.241

if.then.237:                                      ; preds = %do.body.233
  %214 = load %struct.builtin_description*, %struct.builtin_description** %d, align 8
  %name238 = getelementptr inbounds %struct.builtin_description, %struct.builtin_description* %214, i32 0, i32 2
  %215 = load i8*, i8** %name238, align 8
  %216 = load %union.tree_node*, %union.tree_node** %int_ftype_v4sf_v4sf, align 8
  %217 = load %struct.builtin_description*, %struct.builtin_description** %d, align 8
  %code239 = getelementptr inbounds %struct.builtin_description, %struct.builtin_description* %217, i32 0, i32 3
  %218 = load i32, i32* %code239, align 4
  %call240 = call %union.tree_node* @builtin_function(i8* %215, %union.tree_node* %216, i32 %218, i32 2, i8* null)
  br label %if.end.241

if.end.241:                                       ; preds = %if.then.237, %do.body.233
  br label %do.end.242

do.end.242:                                       ; preds = %if.end.241
  br label %for.inc.243

for.inc.243:                                      ; preds = %do.end.242
  %219 = load i64, i64* %i, align 8
  %inc244 = add i64 %219, 1
  store i64 %inc244, i64* %i, align 8
  %220 = load %struct.builtin_description*, %struct.builtin_description** %d, align 8
  %incdec.ptr245 = getelementptr inbounds %struct.builtin_description, %struct.builtin_description* %220, i32 1
  store %struct.builtin_description* %incdec.ptr245, %struct.builtin_description** %d, align 8
  br label %for.cond.230

for.end.246:                                      ; preds = %for.cond.230
  br label %do.body.247

do.body.247:                                      ; preds = %for.end.246
  %221 = load i32, i32* @target_flags, align 4
  %and248 = and i32 16384, %221
  %tobool249 = icmp ne i32 %and248, 0
  br i1 %tobool249, label %if.then.250, label %if.end.252

if.then.250:                                      ; preds = %do.body.247
  %222 = load %union.tree_node*, %union.tree_node** %v8qi_ftype_v4hi_v4hi, align 8
  %call251 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.334, i32 0, i32 0), %union.tree_node* %222, i32 74, i32 2, i8* null)
  br label %if.end.252

if.end.252:                                       ; preds = %if.then.250, %do.body.247
  br label %do.end.253

do.end.253:                                       ; preds = %if.end.252
  br label %do.body.254

do.body.254:                                      ; preds = %do.end.253
  %223 = load i32, i32* @target_flags, align 4
  %and255 = and i32 16384, %223
  %tobool256 = icmp ne i32 %and255, 0
  br i1 %tobool256, label %if.then.257, label %if.end.259

if.then.257:                                      ; preds = %do.body.254
  %224 = load %union.tree_node*, %union.tree_node** %v4hi_ftype_v2si_v2si, align 8
  %call258 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.335, i32 0, i32 0), %union.tree_node* %224, i32 75, i32 2, i8* null)
  br label %if.end.259

if.end.259:                                       ; preds = %if.then.257, %do.body.254
  br label %do.end.260

do.end.260:                                       ; preds = %if.end.259
  br label %do.body.261

do.body.261:                                      ; preds = %do.end.260
  %225 = load i32, i32* @target_flags, align 4
  %and262 = and i32 16384, %225
  %tobool263 = icmp ne i32 %and262, 0
  br i1 %tobool263, label %if.then.264, label %if.end.266

if.then.264:                                      ; preds = %do.body.261
  %226 = load %union.tree_node*, %union.tree_node** %v8qi_ftype_v4hi_v4hi, align 8
  %call265 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.336, i32 0, i32 0), %union.tree_node* %226, i32 76, i32 2, i8* null)
  br label %if.end.266

if.end.266:                                       ; preds = %if.then.264, %do.body.261
  br label %do.end.267

do.end.267:                                       ; preds = %if.end.266
  br label %do.body.268

do.body.268:                                      ; preds = %do.end.267
  %227 = load i32, i32* @target_flags, align 4
  %and269 = and i32 65536, %227
  %tobool270 = icmp ne i32 %and269, 0
  br i1 %tobool270, label %if.then.271, label %if.end.273

if.then.271:                                      ; preds = %do.body.268
  %228 = load %union.tree_node*, %union.tree_node** %v4sf_ftype_v4sf_v2si, align 8
  %call272 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.337, i32 0, i32 0), %union.tree_node* %228, i32 46, i32 2, i8* null)
  br label %if.end.273

if.end.273:                                       ; preds = %if.then.271, %do.body.268
  br label %do.end.274

do.end.274:                                       ; preds = %if.end.273
  br label %do.body.275

do.body.275:                                      ; preds = %do.end.274
  %229 = load i32, i32* @target_flags, align 4
  %and276 = and i32 65536, %229
  %tobool277 = icmp ne i32 %and276, 0
  br i1 %tobool277, label %if.then.278, label %if.end.280

if.then.278:                                      ; preds = %do.body.275
  %230 = load %union.tree_node*, %union.tree_node** %v2si_ftype_v4sf, align 8
  %call279 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.338, i32 0, i32 0), %union.tree_node* %230, i32 47, i32 2, i8* null)
  br label %if.end.280

if.end.280:                                       ; preds = %if.then.278, %do.body.275
  br label %do.end.281

do.end.281:                                       ; preds = %if.end.280
  br label %do.body.282

do.body.282:                                      ; preds = %do.end.281
  %231 = load i32, i32* @target_flags, align 4
  %and283 = and i32 65536, %231
  %tobool284 = icmp ne i32 %and283, 0
  br i1 %tobool284, label %if.then.285, label %if.end.287

if.then.285:                                      ; preds = %do.body.282
  %232 = load %union.tree_node*, %union.tree_node** %v4sf_ftype_v4sf_int, align 8
  %call286 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.339, i32 0, i32 0), %union.tree_node* %232, i32 48, i32 2, i8* null)
  br label %if.end.287

if.end.287:                                       ; preds = %if.then.285, %do.body.282
  br label %do.end.288

do.end.288:                                       ; preds = %if.end.287
  br label %do.body.289

do.body.289:                                      ; preds = %do.end.288
  %233 = load i32, i32* @target_flags, align 4
  %and290 = and i32 65536, %233
  %tobool291 = icmp ne i32 %and290, 0
  br i1 %tobool291, label %if.then.292, label %if.end.294

if.then.292:                                      ; preds = %do.body.289
  %234 = load %union.tree_node*, %union.tree_node** %int_ftype_v4sf, align 8
  %call293 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.340, i32 0, i32 0), %union.tree_node* %234, i32 49, i32 2, i8* null)
  br label %if.end.294

if.end.294:                                       ; preds = %if.then.292, %do.body.289
  br label %do.end.295

do.end.295:                                       ; preds = %if.end.294
  br label %do.body.296

do.body.296:                                      ; preds = %do.end.295
  %235 = load i32, i32* @target_flags, align 4
  %and297 = and i32 65536, %235
  %tobool298 = icmp ne i32 %and297, 0
  br i1 %tobool298, label %if.then.299, label %if.end.301

if.then.299:                                      ; preds = %do.body.296
  %236 = load %union.tree_node*, %union.tree_node** %v2si_ftype_v4sf, align 8
  %call300 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.341, i32 0, i32 0), %union.tree_node* %236, i32 50, i32 2, i8* null)
  br label %if.end.301

if.end.301:                                       ; preds = %if.then.299, %do.body.296
  br label %do.end.302

do.end.302:                                       ; preds = %if.end.301
  br label %do.body.303

do.body.303:                                      ; preds = %do.end.302
  %237 = load i32, i32* @target_flags, align 4
  %and304 = and i32 65536, %237
  %tobool305 = icmp ne i32 %and304, 0
  br i1 %tobool305, label %if.then.306, label %if.end.308

if.then.306:                                      ; preds = %do.body.303
  %238 = load %union.tree_node*, %union.tree_node** %int_ftype_v4sf, align 8
  %call307 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.342, i32 0, i32 0), %union.tree_node* %238, i32 51, i32 2, i8* null)
  br label %if.end.308

if.end.308:                                       ; preds = %if.then.306, %do.body.303
  br label %do.end.309

do.end.309:                                       ; preds = %if.end.308
  br label %do.body.310

do.body.310:                                      ; preds = %do.end.309
  %239 = load i32, i32* @target_flags, align 4
  %and311 = and i32 65536, %239
  %tobool312 = icmp ne i32 %and311, 0
  br i1 %tobool312, label %if.then.313, label %if.end.315

if.then.313:                                      ; preds = %do.body.310
  %240 = load %union.tree_node*, %union.tree_node** %v4sf_ftype_v4sf_v4sf, align 8
  %call314 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.343, i32 0, i32 0), %union.tree_node* %240, i32 146, i32 2, i8* null)
  br label %if.end.315

if.end.315:                                       ; preds = %if.then.313, %do.body.310
  br label %do.end.316

do.end.316:                                       ; preds = %if.end.315
  br label %do.body.317

do.body.317:                                      ; preds = %do.end.316
  %241 = load i32, i32* @target_flags, align 4
  %and318 = and i32 65536, %241
  %tobool319 = icmp ne i32 %and318, 0
  br i1 %tobool319, label %if.then.320, label %if.end.322

if.then.320:                                      ; preds = %do.body.317
  %242 = load %union.tree_node*, %union.tree_node** %v4sf_ftype_v4sf_v4sf, align 8
  %call321 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.344, i32 0, i32 0), %union.tree_node* %242, i32 147, i32 2, i8* null)
  br label %if.end.322

if.end.322:                                       ; preds = %if.then.320, %do.body.317
  br label %do.end.323

do.end.323:                                       ; preds = %if.end.322
  br label %do.body.324

do.body.324:                                      ; preds = %do.end.323
  %243 = load i32, i32* @target_flags, align 4
  %and325 = and i32 65536, %243
  %tobool326 = icmp ne i32 %and325, 0
  br i1 %tobool326, label %if.then.327, label %if.end.329

if.then.327:                                      ; preds = %do.body.324
  %244 = load %union.tree_node*, %union.tree_node** %v4sf_ftype_v4sf_v4sf, align 8
  %call328 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.345, i32 0, i32 0), %union.tree_node* %244, i32 148, i32 2, i8* null)
  br label %if.end.329

if.end.329:                                       ; preds = %if.then.327, %do.body.324
  br label %do.end.330

do.end.330:                                       ; preds = %if.end.329
  br label %do.body.331

do.body.331:                                      ; preds = %do.end.330
  %245 = load i32, i32* @target_flags, align 4
  %and332 = and i32 65536, %245
  %tobool333 = icmp ne i32 %and332, 0
  br i1 %tobool333, label %if.then.334, label %if.end.336

if.then.334:                                      ; preds = %do.body.331
  %246 = load %union.tree_node*, %union.tree_node** %v4sf_ftype_v4sf_v4sf, align 8
  %call335 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.346, i32 0, i32 0), %union.tree_node* %246, i32 149, i32 2, i8* null)
  br label %if.end.336

if.end.336:                                       ; preds = %if.then.334, %do.body.331
  br label %do.end.337

do.end.337:                                       ; preds = %if.end.336
  br label %do.body.338

do.body.338:                                      ; preds = %do.end.337
  %247 = load i32, i32* @target_flags, align 4
  %and339 = and i32 4259840, %247
  %tobool340 = icmp ne i32 %and339, 0
  br i1 %tobool340, label %if.then.341, label %if.end.343

if.then.341:                                      ; preds = %do.body.338
  %248 = load %union.tree_node*, %union.tree_node** %int_ftype_v4hi_int, align 8
  %call342 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.347, i32 0, i32 0), %union.tree_node* %248, i32 103, i32 2, i8* null)
  br label %if.end.343

if.end.343:                                       ; preds = %if.then.341, %do.body.338
  br label %do.end.344

do.end.344:                                       ; preds = %if.end.343
  br label %do.body.345

do.body.345:                                      ; preds = %do.end.344
  %249 = load i32, i32* @target_flags, align 4
  %and346 = and i32 4259840, %249
  %tobool347 = icmp ne i32 %and346, 0
  br i1 %tobool347, label %if.then.348, label %if.end.350

if.then.348:                                      ; preds = %do.body.345
  %250 = load %union.tree_node*, %union.tree_node** %v4hi_ftype_v4hi_int_int, align 8
  %call349 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.348, i32 0, i32 0), %union.tree_node* %250, i32 104, i32 2, i8* null)
  br label %if.end.350

if.end.350:                                       ; preds = %if.then.348, %do.body.345
  br label %do.end.351

do.end.351:                                       ; preds = %if.end.350
  br label %do.body.352

do.body.352:                                      ; preds = %do.end.351
  %251 = load i32, i32* @target_flags, align 4
  %and353 = and i32 4259840, %251
  %tobool354 = icmp ne i32 %and353, 0
  br i1 %tobool354, label %if.then.355, label %if.end.357

if.then.355:                                      ; preds = %do.body.352
  %252 = load %union.tree_node*, %union.tree_node** %void_ftype_v8qi_v8qi_pchar, align 8
  %call356 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.349, i32 0, i32 0), %union.tree_node* %252, i32 69, i32 2, i8* null)
  br label %if.end.357

if.end.357:                                       ; preds = %if.then.355, %do.body.352
  br label %do.end.358

do.end.358:                                       ; preds = %if.end.357
  br label %do.body.359

do.body.359:                                      ; preds = %do.end.358
  %253 = load i32, i32* @target_flags, align 4
  %and360 = and i32 65536, %253
  %tobool361 = icmp ne i32 %and360, 0
  br i1 %tobool361, label %if.then.362, label %if.end.364

if.then.362:                                      ; preds = %do.body.359
  %254 = load %union.tree_node*, %union.tree_node** %v4sf_ftype_pfloat, align 8
  %call363 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.350, i32 0, i32 0), %union.tree_node* %254, i32 56, i32 2, i8* null)
  br label %if.end.364

if.end.364:                                       ; preds = %if.then.362, %do.body.359
  br label %do.end.365

do.end.365:                                       ; preds = %if.end.364
  br label %do.body.366

do.body.366:                                      ; preds = %do.end.365
  %255 = load i32, i32* @target_flags, align 4
  %and367 = and i32 65536, %255
  %tobool368 = icmp ne i32 %and367, 0
  br i1 %tobool368, label %if.then.369, label %if.end.371

if.then.369:                                      ; preds = %do.body.366
  %256 = load %union.tree_node*, %union.tree_node** %v4sf_ftype_pfloat, align 8
  %call370 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.351, i32 0, i32 0), %union.tree_node* %256, i32 57, i32 2, i8* null)
  br label %if.end.371

if.end.371:                                       ; preds = %if.then.369, %do.body.366
  br label %do.end.372

do.end.372:                                       ; preds = %if.end.371
  br label %do.body.373

do.body.373:                                      ; preds = %do.end.372
  %257 = load i32, i32* @target_flags, align 4
  %and374 = and i32 65536, %257
  %tobool375 = icmp ne i32 %and374, 0
  br i1 %tobool375, label %if.then.376, label %if.end.378

if.then.376:                                      ; preds = %do.body.373
  %258 = load %union.tree_node*, %union.tree_node** %v4sf_ftype_pfloat, align 8
  %call377 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.352, i32 0, i32 0), %union.tree_node* %258, i32 60, i32 2, i8* null)
  br label %if.end.378

if.end.378:                                       ; preds = %if.then.376, %do.body.373
  br label %do.end.379

do.end.379:                                       ; preds = %if.end.378
  br label %do.body.380

do.body.380:                                      ; preds = %do.end.379
  %259 = load i32, i32* @target_flags, align 4
  %and381 = and i32 65536, %259
  %tobool382 = icmp ne i32 %and381, 0
  br i1 %tobool382, label %if.then.383, label %if.end.385

if.then.383:                                      ; preds = %do.body.380
  %260 = load %union.tree_node*, %union.tree_node** %void_ftype_pfloat_v4sf, align 8
  %call384 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.353, i32 0, i32 0), %union.tree_node* %260, i32 58, i32 2, i8* null)
  br label %if.end.385

if.end.385:                                       ; preds = %if.then.383, %do.body.380
  br label %do.end.386

do.end.386:                                       ; preds = %if.end.385
  br label %do.body.387

do.body.387:                                      ; preds = %do.end.386
  %261 = load i32, i32* @target_flags, align 4
  %and388 = and i32 65536, %261
  %tobool389 = icmp ne i32 %and388, 0
  br i1 %tobool389, label %if.then.390, label %if.end.392

if.then.390:                                      ; preds = %do.body.387
  %262 = load %union.tree_node*, %union.tree_node** %void_ftype_pfloat_v4sf, align 8
  %call391 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.354, i32 0, i32 0), %union.tree_node* %262, i32 59, i32 2, i8* null)
  br label %if.end.392

if.end.392:                                       ; preds = %if.then.390, %do.body.387
  br label %do.end.393

do.end.393:                                       ; preds = %if.end.392
  br label %do.body.394

do.body.394:                                      ; preds = %do.end.393
  %263 = load i32, i32* @target_flags, align 4
  %and395 = and i32 65536, %263
  %tobool396 = icmp ne i32 %and395, 0
  br i1 %tobool396, label %if.then.397, label %if.end.399

if.then.397:                                      ; preds = %do.body.394
  %264 = load %union.tree_node*, %union.tree_node** %void_ftype_pfloat_v4sf, align 8
  %call398 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.355, i32 0, i32 0), %union.tree_node* %264, i32 61, i32 2, i8* null)
  br label %if.end.399

if.end.399:                                       ; preds = %if.then.397, %do.body.394
  br label %do.end.400

do.end.400:                                       ; preds = %if.end.399
  br label %do.body.401

do.body.401:                                      ; preds = %do.end.400
  %265 = load i32, i32* @target_flags, align 4
  %and402 = and i32 65536, %265
  %tobool403 = icmp ne i32 %and402, 0
  br i1 %tobool403, label %if.then.404, label %if.end.406

if.then.404:                                      ; preds = %do.body.401
  %266 = load %union.tree_node*, %union.tree_node** %v4sf_ftype_v4sf_pv2si, align 8
  %call405 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.356, i32 0, i32 0), %union.tree_node* %266, i32 65, i32 2, i8* null)
  br label %if.end.406

if.end.406:                                       ; preds = %if.then.404, %do.body.401
  br label %do.end.407

do.end.407:                                       ; preds = %if.end.406
  br label %do.body.408

do.body.408:                                      ; preds = %do.end.407
  %267 = load i32, i32* @target_flags, align 4
  %and409 = and i32 65536, %267
  %tobool410 = icmp ne i32 %and409, 0
  br i1 %tobool410, label %if.then.411, label %if.end.413

if.then.411:                                      ; preds = %do.body.408
  %268 = load %union.tree_node*, %union.tree_node** %v4sf_ftype_v4sf_pv2si, align 8
  %call412 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.357, i32 0, i32 0), %union.tree_node* %268, i32 66, i32 2, i8* null)
  br label %if.end.413

if.end.413:                                       ; preds = %if.then.411, %do.body.408
  br label %do.end.414

do.end.414:                                       ; preds = %if.end.413
  br label %do.body.415

do.body.415:                                      ; preds = %do.end.414
  %269 = load i32, i32* @target_flags, align 4
  %and416 = and i32 65536, %269
  %tobool417 = icmp ne i32 %and416, 0
  br i1 %tobool417, label %if.then.418, label %if.end.420

if.then.418:                                      ; preds = %do.body.415
  %270 = load %union.tree_node*, %union.tree_node** %void_ftype_pv2si_v4sf, align 8
  %call419 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.358, i32 0, i32 0), %union.tree_node* %270, i32 67, i32 2, i8* null)
  br label %if.end.420

if.end.420:                                       ; preds = %if.then.418, %do.body.415
  br label %do.end.421

do.end.421:                                       ; preds = %if.end.420
  br label %do.body.422

do.body.422:                                      ; preds = %do.end.421
  %271 = load i32, i32* @target_flags, align 4
  %and423 = and i32 65536, %271
  %tobool424 = icmp ne i32 %and423, 0
  br i1 %tobool424, label %if.then.425, label %if.end.427

if.then.425:                                      ; preds = %do.body.422
  %272 = load %union.tree_node*, %union.tree_node** %void_ftype_pv2si_v4sf, align 8
  %call426 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.359, i32 0, i32 0), %union.tree_node* %272, i32 68, i32 2, i8* null)
  br label %if.end.427

if.end.427:                                       ; preds = %if.then.425, %do.body.422
  br label %do.end.428

do.end.428:                                       ; preds = %if.end.427
  br label %do.body.429

do.body.429:                                      ; preds = %do.end.428
  %273 = load i32, i32* @target_flags, align 4
  %and430 = and i32 65536, %273
  %tobool431 = icmp ne i32 %and430, 0
  br i1 %tobool431, label %if.then.432, label %if.end.434

if.then.432:                                      ; preds = %do.body.429
  %274 = load %union.tree_node*, %union.tree_node** %int_ftype_v4sf, align 8
  %call433 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.360, i32 0, i32 0), %union.tree_node* %274, i32 70, i32 2, i8* null)
  br label %if.end.434

if.end.434:                                       ; preds = %if.then.432, %do.body.429
  br label %do.end.435

do.end.435:                                       ; preds = %if.end.434
  br label %do.body.436

do.body.436:                                      ; preds = %do.end.435
  %275 = load i32, i32* @target_flags, align 4
  %and437 = and i32 4259840, %275
  %tobool438 = icmp ne i32 %and437, 0
  br i1 %tobool438, label %if.then.439, label %if.end.441

if.then.439:                                      ; preds = %do.body.436
  %276 = load %union.tree_node*, %union.tree_node** %int_ftype_v8qi, align 8
  %call440 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.361, i32 0, i32 0), %union.tree_node* %276, i32 71, i32 2, i8* null)
  br label %if.end.441

if.end.441:                                       ; preds = %if.then.439, %do.body.436
  br label %do.end.442

do.end.442:                                       ; preds = %if.end.441
  br label %do.body.443

do.body.443:                                      ; preds = %do.end.442
  %277 = load i32, i32* @target_flags, align 4
  %and444 = and i32 65536, %277
  %tobool445 = icmp ne i32 %and444, 0
  br i1 %tobool445, label %if.then.446, label %if.end.448

if.then.446:                                      ; preds = %do.body.443
  %278 = load %union.tree_node*, %union.tree_node** %void_ftype_pfloat_v4sf, align 8
  %call447 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.362, i32 0, i32 0), %union.tree_node* %278, i32 72, i32 2, i8* null)
  br label %if.end.448

if.end.448:                                       ; preds = %if.then.446, %do.body.443
  br label %do.end.449

do.end.449:                                       ; preds = %if.end.448
  br label %do.body.450

do.body.450:                                      ; preds = %do.end.449
  %279 = load i32, i32* @target_flags, align 4
  %and451 = and i32 4259840, %279
  %tobool452 = icmp ne i32 %and451, 0
  br i1 %tobool452, label %if.then.453, label %if.end.455

if.then.453:                                      ; preds = %do.body.450
  %280 = load %union.tree_node*, %union.tree_node** %void_ftype_pdi_di, align 8
  %call454 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.363, i32 0, i32 0), %union.tree_node* %280, i32 73, i32 2, i8* null)
  br label %if.end.455

if.end.455:                                       ; preds = %if.then.453, %do.body.450
  br label %do.end.456

do.end.456:                                       ; preds = %if.end.455
  br label %do.body.457

do.body.457:                                      ; preds = %do.end.456
  %281 = load i32, i32* @target_flags, align 4
  %and458 = and i32 4259840, %281
  %tobool459 = icmp ne i32 %and458, 0
  br i1 %tobool459, label %if.then.460, label %if.end.462

if.then.460:                                      ; preds = %do.body.457
  %282 = load %union.tree_node*, %union.tree_node** %void_ftype_void, align 8
  %call461 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.364, i32 0, i32 0), %union.tree_node* %282, i32 153, i32 2, i8* null)
  br label %if.end.462

if.end.462:                                       ; preds = %if.then.460, %do.body.457
  br label %do.end.463

do.end.463:                                       ; preds = %if.end.462
  br label %do.body.464

do.body.464:                                      ; preds = %do.end.463
  %283 = load i32, i32* @target_flags, align 4
  %and465 = and i32 4259840, %283
  %tobool466 = icmp ne i32 %and465, 0
  br i1 %tobool466, label %if.then.467, label %if.end.469

if.then.467:                                      ; preds = %do.body.464
  %284 = load %union.tree_node*, %union.tree_node** %v4hi_ftype_v8qi_v8qi, align 8
  %call468 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.365, i32 0, i32 0), %union.tree_node* %284, i32 113, i32 2, i8* null)
  br label %if.end.469

if.end.469:                                       ; preds = %if.then.467, %do.body.464
  br label %do.end.470

do.end.470:                                       ; preds = %if.end.469
  br label %do.body.471

do.body.471:                                      ; preds = %do.end.470
  %285 = load i32, i32* @target_flags, align 4
  %and472 = and i32 65536, %285
  %tobool473 = icmp ne i32 %and472, 0
  br i1 %tobool473, label %if.then.474, label %if.end.476

if.then.474:                                      ; preds = %do.body.471
  %286 = load %union.tree_node*, %union.tree_node** %v4sf_ftype_v4sf, align 8
  %call475 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.366, i32 0, i32 0), %union.tree_node* %286, i32 138, i32 2, i8* null)
  br label %if.end.476

if.end.476:                                       ; preds = %if.then.474, %do.body.471
  br label %do.end.477

do.end.477:                                       ; preds = %if.end.476
  br label %do.body.478

do.body.478:                                      ; preds = %do.end.477
  %287 = load i32, i32* @target_flags, align 4
  %and479 = and i32 65536, %287
  %tobool480 = icmp ne i32 %and479, 0
  br i1 %tobool480, label %if.then.481, label %if.end.483

if.then.481:                                      ; preds = %do.body.478
  %288 = load %union.tree_node*, %union.tree_node** %v4sf_ftype_v4sf, align 8
  %call482 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.367, i32 0, i32 0), %union.tree_node* %288, i32 139, i32 2, i8* null)
  br label %if.end.483

if.end.483:                                       ; preds = %if.then.481, %do.body.478
  br label %do.end.484

do.end.484:                                       ; preds = %if.end.483
  br label %do.body.485

do.body.485:                                      ; preds = %do.end.484
  %289 = load i32, i32* @target_flags, align 4
  %and486 = and i32 65536, %289
  %tobool487 = icmp ne i32 %and486, 0
  br i1 %tobool487, label %if.then.488, label %if.end.490

if.then.488:                                      ; preds = %do.body.485
  %290 = load %union.tree_node*, %union.tree_node** %v4sf_ftype_v4sf, align 8
  %call489 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.368, i32 0, i32 0), %union.tree_node* %290, i32 140, i32 2, i8* null)
  br label %if.end.490

if.end.490:                                       ; preds = %if.then.488, %do.body.485
  br label %do.end.491

do.end.491:                                       ; preds = %if.end.490
  br label %do.body.492

do.body.492:                                      ; preds = %do.end.491
  %291 = load i32, i32* @target_flags, align 4
  %and493 = and i32 65536, %291
  %tobool494 = icmp ne i32 %and493, 0
  br i1 %tobool494, label %if.then.495, label %if.end.497

if.then.495:                                      ; preds = %do.body.492
  %292 = load %union.tree_node*, %union.tree_node** %v4sf_ftype_v4sf, align 8
  %call496 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.369, i32 0, i32 0), %union.tree_node* %292, i32 141, i32 2, i8* null)
  br label %if.end.497

if.end.497:                                       ; preds = %if.then.495, %do.body.492
  br label %do.end.498

do.end.498:                                       ; preds = %if.end.497
  br label %do.body.499

do.body.499:                                      ; preds = %do.end.498
  %293 = load i32, i32* @target_flags, align 4
  %and500 = and i32 65536, %293
  %tobool501 = icmp ne i32 %and500, 0
  br i1 %tobool501, label %if.then.502, label %if.end.504

if.then.502:                                      ; preds = %do.body.499
  %294 = load %union.tree_node*, %union.tree_node** %v4sf_ftype_v4sf, align 8
  %call503 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.370, i32 0, i32 0), %union.tree_node* %294, i32 142, i32 2, i8* null)
  br label %if.end.504

if.end.504:                                       ; preds = %if.then.502, %do.body.499
  br label %do.end.505

do.end.505:                                       ; preds = %if.end.504
  br label %do.body.506

do.body.506:                                      ; preds = %do.end.505
  %295 = load i32, i32* @target_flags, align 4
  %and507 = and i32 65536, %295
  %tobool508 = icmp ne i32 %and507, 0
  br i1 %tobool508, label %if.then.509, label %if.end.511

if.then.509:                                      ; preds = %do.body.506
  %296 = load %union.tree_node*, %union.tree_node** %v4sf_ftype_v4sf, align 8
  %call510 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.371, i32 0, i32 0), %union.tree_node* %296, i32 143, i32 2, i8* null)
  br label %if.end.511

if.end.511:                                       ; preds = %if.then.509, %do.body.506
  br label %do.end.512

do.end.512:                                       ; preds = %if.end.511
  br label %do.body.513

do.body.513:                                      ; preds = %do.end.512
  %297 = load i32, i32* @target_flags, align 4
  %and514 = and i32 65536, %297
  %tobool515 = icmp ne i32 %and514, 0
  br i1 %tobool515, label %if.then.516, label %if.end.518

if.then.516:                                      ; preds = %do.body.513
  %298 = load %union.tree_node*, %union.tree_node** %v4sf_ftype_v4sf_v4sf_int, align 8
  %call517 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.372, i32 0, i32 0), %union.tree_node* %298, i32 137, i32 2, i8* null)
  br label %if.end.518

if.end.518:                                       ; preds = %if.then.516, %do.body.513
  br label %do.end.519

do.end.519:                                       ; preds = %if.end.518
  br label %do.body.520

do.body.520:                                      ; preds = %do.end.519
  %299 = load i32, i32* @target_flags, align 4
  %and521 = and i32 1048576, %299
  %tobool522 = icmp ne i32 %and521, 0
  br i1 %tobool522, label %if.then.523, label %if.end.525

if.then.523:                                      ; preds = %do.body.520
  %300 = load %union.tree_node*, %union.tree_node** %void_ftype_void, align 8
  %call524 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.373, i32 0, i32 0), %union.tree_node* %300, i32 154, i32 2, i8* null)
  br label %if.end.525

if.end.525:                                       ; preds = %if.then.523, %do.body.520
  br label %do.end.526

do.end.526:                                       ; preds = %if.end.525
  br label %do.body.527

do.body.527:                                      ; preds = %do.end.526
  %301 = load i32, i32* @target_flags, align 4
  %and528 = and i32 1048576, %301
  %tobool529 = icmp ne i32 %and528, 0
  br i1 %tobool529, label %if.then.530, label %if.end.532

if.then.530:                                      ; preds = %do.body.527
  %302 = load %union.tree_node*, %union.tree_node** %v8qi_ftype_v8qi_v8qi, align 8
  %call531 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.374, i32 0, i32 0), %union.tree_node* %302, i32 155, i32 2, i8* null)
  br label %if.end.532

if.end.532:                                       ; preds = %if.then.530, %do.body.527
  br label %do.end.533

do.end.533:                                       ; preds = %if.end.532
  br label %do.body.534

do.body.534:                                      ; preds = %do.end.533
  %303 = load i32, i32* @target_flags, align 4
  %and535 = and i32 1048576, %303
  %tobool536 = icmp ne i32 %and535, 0
  br i1 %tobool536, label %if.then.537, label %if.end.539

if.then.537:                                      ; preds = %do.body.534
  %304 = load %union.tree_node*, %union.tree_node** %v2si_ftype_v2sf, align 8
  %call538 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.375, i32 0, i32 0), %union.tree_node* %304, i32 156, i32 2, i8* null)
  br label %if.end.539

if.end.539:                                       ; preds = %if.then.537, %do.body.534
  br label %do.end.540

do.end.540:                                       ; preds = %if.end.539
  br label %do.body.541

do.body.541:                                      ; preds = %do.end.540
  %305 = load i32, i32* @target_flags, align 4
  %and542 = and i32 1048576, %305
  %tobool543 = icmp ne i32 %and542, 0
  br i1 %tobool543, label %if.then.544, label %if.end.546

if.then.544:                                      ; preds = %do.body.541
  %306 = load %union.tree_node*, %union.tree_node** %v2sf_ftype_v2sf_v2sf, align 8
  %call545 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.376, i32 0, i32 0), %union.tree_node* %306, i32 157, i32 2, i8* null)
  br label %if.end.546

if.end.546:                                       ; preds = %if.then.544, %do.body.541
  br label %do.end.547

do.end.547:                                       ; preds = %if.end.546
  br label %do.body.548

do.body.548:                                      ; preds = %do.end.547
  %307 = load i32, i32* @target_flags, align 4
  %and549 = and i32 1048576, %307
  %tobool550 = icmp ne i32 %and549, 0
  br i1 %tobool550, label %if.then.551, label %if.end.553

if.then.551:                                      ; preds = %do.body.548
  %308 = load %union.tree_node*, %union.tree_node** %v2sf_ftype_v2sf_v2sf, align 8
  %call552 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.377, i32 0, i32 0), %union.tree_node* %308, i32 158, i32 2, i8* null)
  br label %if.end.553

if.end.553:                                       ; preds = %if.then.551, %do.body.548
  br label %do.end.554

do.end.554:                                       ; preds = %if.end.553
  br label %do.body.555

do.body.555:                                      ; preds = %do.end.554
  %309 = load i32, i32* @target_flags, align 4
  %and556 = and i32 1048576, %309
  %tobool557 = icmp ne i32 %and556, 0
  br i1 %tobool557, label %if.then.558, label %if.end.560

if.then.558:                                      ; preds = %do.body.555
  %310 = load %union.tree_node*, %union.tree_node** %v2si_ftype_v2sf_v2sf, align 8
  %call559 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.378, i32 0, i32 0), %union.tree_node* %310, i32 159, i32 2, i8* null)
  br label %if.end.560

if.end.560:                                       ; preds = %if.then.558, %do.body.555
  br label %do.end.561

do.end.561:                                       ; preds = %if.end.560
  br label %do.body.562

do.body.562:                                      ; preds = %do.end.561
  %311 = load i32, i32* @target_flags, align 4
  %and563 = and i32 1048576, %311
  %tobool564 = icmp ne i32 %and563, 0
  br i1 %tobool564, label %if.then.565, label %if.end.567

if.then.565:                                      ; preds = %do.body.562
  %312 = load %union.tree_node*, %union.tree_node** %v2si_ftype_v2sf_v2sf, align 8
  %call566 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.379, i32 0, i32 0), %union.tree_node* %312, i32 160, i32 2, i8* null)
  br label %if.end.567

if.end.567:                                       ; preds = %if.then.565, %do.body.562
  br label %do.end.568

do.end.568:                                       ; preds = %if.end.567
  br label %do.body.569

do.body.569:                                      ; preds = %do.end.568
  %313 = load i32, i32* @target_flags, align 4
  %and570 = and i32 1048576, %313
  %tobool571 = icmp ne i32 %and570, 0
  br i1 %tobool571, label %if.then.572, label %if.end.574

if.then.572:                                      ; preds = %do.body.569
  %314 = load %union.tree_node*, %union.tree_node** %v2si_ftype_v2sf_v2sf, align 8
  %call573 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.380, i32 0, i32 0), %union.tree_node* %314, i32 161, i32 2, i8* null)
  br label %if.end.574

if.end.574:                                       ; preds = %if.then.572, %do.body.569
  br label %do.end.575

do.end.575:                                       ; preds = %if.end.574
  br label %do.body.576

do.body.576:                                      ; preds = %do.end.575
  %315 = load i32, i32* @target_flags, align 4
  %and577 = and i32 1048576, %315
  %tobool578 = icmp ne i32 %and577, 0
  br i1 %tobool578, label %if.then.579, label %if.end.581

if.then.579:                                      ; preds = %do.body.576
  %316 = load %union.tree_node*, %union.tree_node** %v2sf_ftype_v2sf_v2sf, align 8
  %call580 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.381, i32 0, i32 0), %union.tree_node* %316, i32 162, i32 2, i8* null)
  br label %if.end.581

if.end.581:                                       ; preds = %if.then.579, %do.body.576
  br label %do.end.582

do.end.582:                                       ; preds = %if.end.581
  br label %do.body.583

do.body.583:                                      ; preds = %do.end.582
  %317 = load i32, i32* @target_flags, align 4
  %and584 = and i32 1048576, %317
  %tobool585 = icmp ne i32 %and584, 0
  br i1 %tobool585, label %if.then.586, label %if.end.588

if.then.586:                                      ; preds = %do.body.583
  %318 = load %union.tree_node*, %union.tree_node** %v2sf_ftype_v2sf_v2sf, align 8
  %call587 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.382, i32 0, i32 0), %union.tree_node* %318, i32 163, i32 2, i8* null)
  br label %if.end.588

if.end.588:                                       ; preds = %if.then.586, %do.body.583
  br label %do.end.589

do.end.589:                                       ; preds = %if.end.588
  br label %do.body.590

do.body.590:                                      ; preds = %do.end.589
  %319 = load i32, i32* @target_flags, align 4
  %and591 = and i32 1048576, %319
  %tobool592 = icmp ne i32 %and591, 0
  br i1 %tobool592, label %if.then.593, label %if.end.595

if.then.593:                                      ; preds = %do.body.590
  %320 = load %union.tree_node*, %union.tree_node** %v2sf_ftype_v2sf_v2sf, align 8
  %call594 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.383, i32 0, i32 0), %union.tree_node* %320, i32 164, i32 2, i8* null)
  br label %if.end.595

if.end.595:                                       ; preds = %if.then.593, %do.body.590
  br label %do.end.596

do.end.596:                                       ; preds = %if.end.595
  br label %do.body.597

do.body.597:                                      ; preds = %do.end.596
  %321 = load i32, i32* @target_flags, align 4
  %and598 = and i32 1048576, %321
  %tobool599 = icmp ne i32 %and598, 0
  br i1 %tobool599, label %if.then.600, label %if.end.602

if.then.600:                                      ; preds = %do.body.597
  %322 = load %union.tree_node*, %union.tree_node** %v2sf_ftype_v2sf, align 8
  %call601 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.384, i32 0, i32 0), %union.tree_node* %322, i32 165, i32 2, i8* null)
  br label %if.end.602

if.end.602:                                       ; preds = %if.then.600, %do.body.597
  br label %do.end.603

do.end.603:                                       ; preds = %if.end.602
  br label %do.body.604

do.body.604:                                      ; preds = %do.end.603
  %323 = load i32, i32* @target_flags, align 4
  %and605 = and i32 1048576, %323
  %tobool606 = icmp ne i32 %and605, 0
  br i1 %tobool606, label %if.then.607, label %if.end.609

if.then.607:                                      ; preds = %do.body.604
  %324 = load %union.tree_node*, %union.tree_node** %v2sf_ftype_v2sf_v2sf, align 8
  %call608 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.385, i32 0, i32 0), %union.tree_node* %324, i32 166, i32 2, i8* null)
  br label %if.end.609

if.end.609:                                       ; preds = %if.then.607, %do.body.604
  br label %do.end.610

do.end.610:                                       ; preds = %if.end.609
  br label %do.body.611

do.body.611:                                      ; preds = %do.end.610
  %325 = load i32, i32* @target_flags, align 4
  %and612 = and i32 1048576, %325
  %tobool613 = icmp ne i32 %and612, 0
  br i1 %tobool613, label %if.then.614, label %if.end.616

if.then.614:                                      ; preds = %do.body.611
  %326 = load %union.tree_node*, %union.tree_node** %v2sf_ftype_v2sf_v2sf, align 8
  %call615 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.386, i32 0, i32 0), %union.tree_node* %326, i32 167, i32 2, i8* null)
  br label %if.end.616

if.end.616:                                       ; preds = %if.then.614, %do.body.611
  br label %do.end.617

do.end.617:                                       ; preds = %if.end.616
  br label %do.body.618

do.body.618:                                      ; preds = %do.end.617
  %327 = load i32, i32* @target_flags, align 4
  %and619 = and i32 1048576, %327
  %tobool620 = icmp ne i32 %and619, 0
  br i1 %tobool620, label %if.then.621, label %if.end.623

if.then.621:                                      ; preds = %do.body.618
  %328 = load %union.tree_node*, %union.tree_node** %v2sf_ftype_v2sf, align 8
  %call622 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.387, i32 0, i32 0), %union.tree_node* %328, i32 169, i32 2, i8* null)
  br label %if.end.623

if.end.623:                                       ; preds = %if.then.621, %do.body.618
  br label %do.end.624

do.end.624:                                       ; preds = %if.end.623
  br label %do.body.625

do.body.625:                                      ; preds = %do.end.624
  %329 = load i32, i32* @target_flags, align 4
  %and626 = and i32 1048576, %329
  %tobool627 = icmp ne i32 %and626, 0
  br i1 %tobool627, label %if.then.628, label %if.end.630

if.then.628:                                      ; preds = %do.body.625
  %330 = load %union.tree_node*, %union.tree_node** %v2sf_ftype_v2sf_v2sf, align 8
  %call629 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.388, i32 0, i32 0), %union.tree_node* %330, i32 168, i32 2, i8* null)
  br label %if.end.630

if.end.630:                                       ; preds = %if.then.628, %do.body.625
  br label %do.end.631

do.end.631:                                       ; preds = %if.end.630
  br label %do.body.632

do.body.632:                                      ; preds = %do.end.631
  %331 = load i32, i32* @target_flags, align 4
  %and633 = and i32 1048576, %331
  %tobool634 = icmp ne i32 %and633, 0
  br i1 %tobool634, label %if.then.635, label %if.end.637

if.then.635:                                      ; preds = %do.body.632
  %332 = load %union.tree_node*, %union.tree_node** %v2sf_ftype_v2sf_v2sf, align 8
  %call636 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.389, i32 0, i32 0), %union.tree_node* %332, i32 170, i32 2, i8* null)
  br label %if.end.637

if.end.637:                                       ; preds = %if.then.635, %do.body.632
  br label %do.end.638

do.end.638:                                       ; preds = %if.end.637
  br label %do.body.639

do.body.639:                                      ; preds = %do.end.638
  %333 = load i32, i32* @target_flags, align 4
  %and640 = and i32 1048576, %333
  %tobool641 = icmp ne i32 %and640, 0
  br i1 %tobool641, label %if.then.642, label %if.end.644

if.then.642:                                      ; preds = %do.body.639
  %334 = load %union.tree_node*, %union.tree_node** %v2sf_ftype_v2sf_v2sf, align 8
  %call643 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.390, i32 0, i32 0), %union.tree_node* %334, i32 171, i32 2, i8* null)
  br label %if.end.644

if.end.644:                                       ; preds = %if.then.642, %do.body.639
  br label %do.end.645

do.end.645:                                       ; preds = %if.end.644
  br label %do.body.646

do.body.646:                                      ; preds = %do.end.645
  %335 = load i32, i32* @target_flags, align 4
  %and647 = and i32 1048576, %335
  %tobool648 = icmp ne i32 %and647, 0
  br i1 %tobool648, label %if.then.649, label %if.end.651

if.then.649:                                      ; preds = %do.body.646
  %336 = load %union.tree_node*, %union.tree_node** %v2sf_ftype_v2si, align 8
  %call650 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.391, i32 0, i32 0), %union.tree_node* %336, i32 172, i32 2, i8* null)
  br label %if.end.651

if.end.651:                                       ; preds = %if.then.649, %do.body.646
  br label %do.end.652

do.end.652:                                       ; preds = %if.end.651
  br label %do.body.653

do.body.653:                                      ; preds = %do.end.652
  %337 = load i32, i32* @target_flags, align 4
  %and654 = and i32 1048576, %337
  %tobool655 = icmp ne i32 %and654, 0
  br i1 %tobool655, label %if.then.656, label %if.end.658

if.then.656:                                      ; preds = %do.body.653
  %338 = load %union.tree_node*, %union.tree_node** %v4hi_ftype_v4hi_v4hi, align 8
  %call657 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.392, i32 0, i32 0), %union.tree_node* %338, i32 173, i32 2, i8* null)
  br label %if.end.658

if.end.658:                                       ; preds = %if.then.656, %do.body.653
  br label %do.end.659

do.end.659:                                       ; preds = %if.end.658
  br label %do.body.660

do.body.660:                                      ; preds = %do.end.659
  %339 = load i32, i32* @target_flags, align 4
  %and661 = and i32 4194304, %339
  %tobool662 = icmp ne i32 %and661, 0
  br i1 %tobool662, label %if.then.663, label %if.end.665

if.then.663:                                      ; preds = %do.body.660
  %340 = load %union.tree_node*, %union.tree_node** %v2si_ftype_v2sf, align 8
  %call664 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.393, i32 0, i32 0), %union.tree_node* %340, i32 174, i32 2, i8* null)
  br label %if.end.665

if.end.665:                                       ; preds = %if.then.663, %do.body.660
  br label %do.end.666

do.end.666:                                       ; preds = %if.end.665
  br label %do.body.667

do.body.667:                                      ; preds = %do.end.666
  %341 = load i32, i32* @target_flags, align 4
  %and668 = and i32 4194304, %341
  %tobool669 = icmp ne i32 %and668, 0
  br i1 %tobool669, label %if.then.670, label %if.end.672

if.then.670:                                      ; preds = %do.body.667
  %342 = load %union.tree_node*, %union.tree_node** %v2sf_ftype_v2sf_v2sf, align 8
  %call671 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.394, i32 0, i32 0), %union.tree_node* %342, i32 175, i32 2, i8* null)
  br label %if.end.672

if.end.672:                                       ; preds = %if.then.670, %do.body.667
  br label %do.end.673

do.end.673:                                       ; preds = %if.end.672
  br label %do.body.674

do.body.674:                                      ; preds = %do.end.673
  %343 = load i32, i32* @target_flags, align 4
  %and675 = and i32 4194304, %343
  %tobool676 = icmp ne i32 %and675, 0
  br i1 %tobool676, label %if.then.677, label %if.end.679

if.then.677:                                      ; preds = %do.body.674
  %344 = load %union.tree_node*, %union.tree_node** %v2sf_ftype_v2sf_v2sf, align 8
  %call678 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.395, i32 0, i32 0), %union.tree_node* %344, i32 176, i32 2, i8* null)
  br label %if.end.679

if.end.679:                                       ; preds = %if.then.677, %do.body.674
  br label %do.end.680

do.end.680:                                       ; preds = %if.end.679
  br label %do.body.681

do.body.681:                                      ; preds = %do.end.680
  %345 = load i32, i32* @target_flags, align 4
  %and682 = and i32 4194304, %345
  %tobool683 = icmp ne i32 %and682, 0
  br i1 %tobool683, label %if.then.684, label %if.end.686

if.then.684:                                      ; preds = %do.body.681
  %346 = load %union.tree_node*, %union.tree_node** %v2sf_ftype_v2si, align 8
  %call685 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.396, i32 0, i32 0), %union.tree_node* %346, i32 177, i32 2, i8* null)
  br label %if.end.686

if.end.686:                                       ; preds = %if.then.684, %do.body.681
  br label %do.end.687

do.end.687:                                       ; preds = %if.end.686
  br label %do.body.688

do.body.688:                                      ; preds = %do.end.687
  %347 = load i32, i32* @target_flags, align 4
  %and689 = and i32 4194304, %347
  %tobool690 = icmp ne i32 %and689, 0
  br i1 %tobool690, label %if.then.691, label %if.end.693

if.then.691:                                      ; preds = %do.body.688
  %348 = load %union.tree_node*, %union.tree_node** %v2sf_ftype_v2sf, align 8
  %call692 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.397, i32 0, i32 0), %union.tree_node* %348, i32 179, i32 2, i8* null)
  br label %if.end.693

if.end.693:                                       ; preds = %if.then.691, %do.body.688
  br label %do.end.694

do.end.694:                                       ; preds = %if.end.693
  br label %do.body.695

do.body.695:                                      ; preds = %do.end.694
  %349 = load i32, i32* @target_flags, align 4
  %and696 = and i32 4194304, %349
  %tobool697 = icmp ne i32 %and696, 0
  br i1 %tobool697, label %if.then.698, label %if.end.700

if.then.698:                                      ; preds = %do.body.695
  %350 = load %union.tree_node*, %union.tree_node** %v2si_ftype_v2si, align 8
  %call699 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.398, i32 0, i32 0), %union.tree_node* %350, i32 178, i32 2, i8* null)
  br label %if.end.700

if.end.700:                                       ; preds = %if.then.698, %do.body.695
  br label %do.end.701

do.end.701:                                       ; preds = %if.end.700
  br label %do.body.702

do.body.702:                                      ; preds = %do.end.701
  %351 = load i32, i32* @target_flags, align 4
  %and703 = and i32 65536, %351
  %tobool704 = icmp ne i32 %and703, 0
  br i1 %tobool704, label %if.then.705, label %if.end.707

if.then.705:                                      ; preds = %do.body.702
  %352 = load %union.tree_node*, %union.tree_node** %v4sf_ftype_void, align 8
  %call706 = call %union.tree_node* @builtin_function(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.399, i32 0, i32 0), %union.tree_node* %352, i32 180, i32 2, i8* null)
  br label %if.end.707

if.end.707:                                       ; preds = %if.then.705, %do.body.702
  br label %do.end.708

do.end.708:                                       ; preds = %if.end.707
  ret void
}

declare %struct.rtx_def* @gen_emms() #0

declare %struct.rtx_def* @gen_sfence() #0

; Function Attrs: nounwind uwtable
define internal %struct.rtx_def* @ix86_expand_unop1_builtin(i32 %icode, %union.tree_node* %arglist, %struct.rtx_def* %target) #1 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %icode.addr = alloca i32, align 4
  %arglist.addr = alloca %union.tree_node*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %pat = alloca %struct.rtx_def*, align 8
  %arg0 = alloca %union.tree_node*, align 8
  %op1 = alloca %struct.rtx_def*, align 8
  %op0 = alloca %struct.rtx_def*, align 8
  %tmode = alloca i32, align 4
  %mode0 = alloca i32, align 4
  store i32 %icode, i32* %icode.addr, align 4
  store %union.tree_node* %arglist, %union.tree_node** %arglist.addr, align 8
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %arglist.addr, align 8
  %list = bitcast %union.tree_node* %0 to %struct.tree_list*
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2
  %1 = load %union.tree_node*, %union.tree_node** %value, align 8
  store %union.tree_node* %1, %union.tree_node** %arg0, align 8
  %2 = load %union.tree_node*, %union.tree_node** %arg0, align 8
  %call = call %struct.rtx_def* @expand_expr(%union.tree_node* %2, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call, %struct.rtx_def** %op0, align 8
  %3 = load i32, i32* %icode.addr, align 4
  %idxprom = zext i32 %3 to i64
  %arrayidx = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom
  %operand = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx, i32 0, i32 3
  %4 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand, align 8
  %arrayidx1 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %4, i64 0
  %mode = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx1, i32 0, i32 2
  %bf.load = load i16, i16* %mode, align 8
  %bf.cast = zext i16 %bf.load to i32
  store i32 %bf.cast, i32* %tmode, align 4
  %5 = load i32, i32* %icode.addr, align 4
  %idxprom2 = zext i32 %5 to i64
  %arrayidx3 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom2
  %operand4 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx3, i32 0, i32 3
  %6 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand4, align 8
  %arrayidx5 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %6, i64 1
  %mode6 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx5, i32 0, i32 2
  %bf.load7 = load i16, i16* %mode6, align 8
  %bf.cast8 = zext i16 %bf.load7 to i32
  store i32 %bf.cast8, i32* %mode0, align 4
  %7 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %tobool = icmp ne %struct.rtx_def* %7, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %8 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %9 = bitcast %struct.rtx_def* %8 to i32*
  %bf.load9 = load i32, i32* %9, align 8
  %bf.lshr = lshr i32 %bf.load9, 16
  %bf.clear = and i32 %bf.lshr, 255
  %10 = load i32, i32* %tmode, align 4
  %cmp = icmp ne i32 %bf.clear, %10
  br i1 %cmp, label %if.then, label %lor.lhs.false.10

lor.lhs.false.10:                                 ; preds = %lor.lhs.false
  %11 = load i32, i32* %icode.addr, align 4
  %idxprom11 = zext i32 %11 to i64
  %arrayidx12 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom11
  %operand13 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx12, i32 0, i32 3
  %12 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand13, align 8
  %arrayidx14 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %12, i64 0
  %predicate = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx14, i32 0, i32 0
  %13 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate, align 8
  %14 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %15 = load i32, i32* %tmode, align 4
  %call15 = call i32 %13(%struct.rtx_def* %14, i32 %15)
  %tobool16 = icmp ne i32 %call15, 0
  br i1 %tobool16, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false.10, %lor.lhs.false, %entry
  %16 = load i32, i32* %tmode, align 4
  %call17 = call %struct.rtx_def* @gen_reg_rtx(i32 %16)
  store %struct.rtx_def* %call17, %struct.rtx_def** %target.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false.10
  %17 = load i32, i32* %mode0, align 4
  %idxprom18 = sext i32 %17 to i64
  %arrayidx19 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom18
  %18 = load i32, i32* %arrayidx19, align 4
  %cmp20 = icmp eq i32 %18, 7
  br i1 %cmp20, label %if.then.25, label %lor.lhs.false.21

lor.lhs.false.21:                                 ; preds = %if.end
  %19 = load i32, i32* %mode0, align 4
  %idxprom22 = sext i32 %19 to i64
  %arrayidx23 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom22
  %20 = load i32, i32* %arrayidx23, align 4
  %cmp24 = icmp eq i32 %20, 8
  br i1 %cmp24, label %if.then.25, label %if.end.27

if.then.25:                                       ; preds = %lor.lhs.false.21, %if.end
  %21 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %22 = load i32, i32* %mode0, align 4
  %call26 = call %struct.rtx_def* @safe_vector_operand(%struct.rtx_def* %21, i32 %22)
  store %struct.rtx_def* %call26, %struct.rtx_def** %op0, align 8
  br label %if.end.27

if.end.27:                                        ; preds = %if.then.25, %lor.lhs.false.21
  %23 = load i32, i32* %icode.addr, align 4
  %idxprom28 = zext i32 %23 to i64
  %arrayidx29 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom28
  %operand30 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx29, i32 0, i32 3
  %24 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand30, align 8
  %arrayidx31 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %24, i64 1
  %predicate32 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx31, i32 0, i32 0
  %25 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate32, align 8
  %26 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %27 = load i32, i32* %mode0, align 4
  %call33 = call i32 %25(%struct.rtx_def* %26, i32 %27)
  %tobool34 = icmp ne i32 %call33, 0
  br i1 %tobool34, label %if.end.37, label %if.then.35

if.then.35:                                       ; preds = %if.end.27
  %28 = load i32, i32* %mode0, align 4
  %29 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call36 = call %struct.rtx_def* @copy_to_mode_reg(i32 %28, %struct.rtx_def* %29)
  store %struct.rtx_def* %call36, %struct.rtx_def** %op0, align 8
  br label %if.end.37

if.end.37:                                        ; preds = %if.then.35, %if.end.27
  %30 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  store %struct.rtx_def* %30, %struct.rtx_def** %op1, align 8
  %31 = load i32, i32* %icode.addr, align 4
  %idxprom38 = zext i32 %31 to i64
  %arrayidx39 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom38
  %operand40 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx39, i32 0, i32 3
  %32 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand40, align 8
  %arrayidx41 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %32, i64 2
  %predicate42 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx41, i32 0, i32 0
  %33 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate42, align 8
  %34 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %35 = load i32, i32* %mode0, align 4
  %call43 = call i32 %33(%struct.rtx_def* %34, i32 %35)
  %tobool44 = icmp ne i32 %call43, 0
  br i1 %tobool44, label %if.end.47, label %if.then.45

if.then.45:                                       ; preds = %if.end.37
  %36 = load i32, i32* %mode0, align 4
  %37 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %call46 = call %struct.rtx_def* @copy_to_mode_reg(i32 %36, %struct.rtx_def* %37)
  store %struct.rtx_def* %call46, %struct.rtx_def** %op1, align 8
  br label %if.end.47

if.end.47:                                        ; preds = %if.then.45, %if.end.37
  %38 = load i32, i32* %icode.addr, align 4
  %idxprom48 = sext i32 %38 to i64
  %arrayidx49 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom48
  %genfun = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx49, i32 0, i32 2
  %39 = load %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.rtx_def* (%struct.rtx_def*, ...)** %genfun, align 8
  %40 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %41 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %42 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %call50 = call %struct.rtx_def* (%struct.rtx_def*, ...) %39(%struct.rtx_def* %40, %struct.rtx_def* %41, %struct.rtx_def* %42)
  store %struct.rtx_def* %call50, %struct.rtx_def** %pat, align 8
  %43 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8
  %tobool51 = icmp ne %struct.rtx_def* %43, null
  br i1 %tobool51, label %if.end.53, label %if.then.52

if.then.52:                                       ; preds = %if.end.47
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end.53:                                        ; preds = %if.end.47
  %44 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8
  %call54 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %44)
  %45 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  store %struct.rtx_def* %45, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end.53, %if.then.52
  %46 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %46
}

; Function Attrs: nounwind uwtable
define internal %struct.rtx_def* @ix86_expand_timode_binop_builtin(i32 %icode, %union.tree_node* %arglist, %struct.rtx_def* %target) #1 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %icode.addr = alloca i32, align 4
  %arglist.addr = alloca %union.tree_node*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %pat = alloca %struct.rtx_def*, align 8
  %arg0 = alloca %union.tree_node*, align 8
  %arg1 = alloca %union.tree_node*, align 8
  %op0 = alloca %struct.rtx_def*, align 8
  %op1 = alloca %struct.rtx_def*, align 8
  store i32 %icode, i32* %icode.addr, align 4
  store %union.tree_node* %arglist, %union.tree_node** %arglist.addr, align 8
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %arglist.addr, align 8
  %list = bitcast %union.tree_node* %0 to %struct.tree_list*
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2
  %1 = load %union.tree_node*, %union.tree_node** %value, align 8
  store %union.tree_node* %1, %union.tree_node** %arg0, align 8
  %2 = load %union.tree_node*, %union.tree_node** %arglist.addr, align 8
  %common = bitcast %union.tree_node* %2 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 0
  %3 = load %union.tree_node*, %union.tree_node** %chain, align 8
  %list1 = bitcast %union.tree_node* %3 to %struct.tree_list*
  %value2 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list1, i32 0, i32 2
  %4 = load %union.tree_node*, %union.tree_node** %value2, align 8
  store %union.tree_node* %4, %union.tree_node** %arg1, align 8
  %5 = load %union.tree_node*, %union.tree_node** %arg0, align 8
  %call = call %struct.rtx_def* @expand_expr(%union.tree_node* %5, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call, %struct.rtx_def** %op0, align 8
  %6 = load %union.tree_node*, %union.tree_node** %arg1, align 8
  %call3 = call %struct.rtx_def* @expand_expr(%union.tree_node* %6, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call3, %struct.rtx_def** %op1, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call4 = call %struct.rtx_def* @gen_lowpart(i32 6, %struct.rtx_def* %7)
  store %struct.rtx_def* %call4, %struct.rtx_def** %op0, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %call5 = call %struct.rtx_def* @gen_lowpart(i32 6, %struct.rtx_def* %8)
  store %struct.rtx_def* %call5, %struct.rtx_def** %op1, align 8
  %call6 = call %struct.rtx_def* @gen_reg_rtx(i32 6)
  store %struct.rtx_def* %call6, %struct.rtx_def** %target.addr, align 8
  %9 = load i32, i32* %icode.addr, align 4
  %idxprom = zext i32 %9 to i64
  %arrayidx = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom
  %operand = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx, i32 0, i32 3
  %10 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand, align 8
  %arrayidx7 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %10, i64 1
  %predicate = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx7, i32 0, i32 0
  %11 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate, align 8
  %12 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call8 = call i32 %11(%struct.rtx_def* %12, i32 6)
  %tobool = icmp ne i32 %call8, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %13 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call9 = call %struct.rtx_def* @copy_to_mode_reg(i32 6, %struct.rtx_def* %13)
  store %struct.rtx_def* %call9, %struct.rtx_def** %op0, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %14 = load i32, i32* %icode.addr, align 4
  %idxprom10 = zext i32 %14 to i64
  %arrayidx11 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom10
  %operand12 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx11, i32 0, i32 3
  %15 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand12, align 8
  %arrayidx13 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %15, i64 2
  %predicate14 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx13, i32 0, i32 0
  %16 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate14, align 8
  %17 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %call15 = call i32 %16(%struct.rtx_def* %17, i32 6)
  %tobool16 = icmp ne i32 %call15, 0
  br i1 %tobool16, label %if.end.19, label %if.then.17

if.then.17:                                       ; preds = %if.end
  %18 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %call18 = call %struct.rtx_def* @copy_to_mode_reg(i32 6, %struct.rtx_def* %18)
  store %struct.rtx_def* %call18, %struct.rtx_def** %op1, align 8
  br label %if.end.19

if.end.19:                                        ; preds = %if.then.17, %if.end
  %19 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %20 = bitcast %struct.rtx_def* %19 to i32*
  %bf.load = load i32, i32* %20, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 66
  br i1 %cmp, label %land.lhs.true, label %if.end.25

land.lhs.true:                                    ; preds = %if.end.19
  %21 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %22 = bitcast %struct.rtx_def* %21 to i32*
  %bf.load20 = load i32, i32* %22, align 8
  %bf.clear21 = and i32 %bf.load20, 65535
  %cmp22 = icmp eq i32 %bf.clear21, 66
  br i1 %cmp22, label %if.then.23, label %if.end.25

if.then.23:                                       ; preds = %land.lhs.true
  %23 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call24 = call %struct.rtx_def* @copy_to_mode_reg(i32 6, %struct.rtx_def* %23)
  store %struct.rtx_def* %call24, %struct.rtx_def** %op0, align 8
  br label %if.end.25

if.end.25:                                        ; preds = %if.then.23, %land.lhs.true, %if.end.19
  %24 = load i32, i32* %icode.addr, align 4
  %idxprom26 = sext i32 %24 to i64
  %arrayidx27 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom26
  %genfun = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx27, i32 0, i32 2
  %25 = load %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.rtx_def* (%struct.rtx_def*, ...)** %genfun, align 8
  %26 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %27 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %28 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %call28 = call %struct.rtx_def* (%struct.rtx_def*, ...) %25(%struct.rtx_def* %26, %struct.rtx_def* %27, %struct.rtx_def* %28)
  store %struct.rtx_def* %call28, %struct.rtx_def** %pat, align 8
  %29 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8
  %tobool29 = icmp ne %struct.rtx_def* %29, null
  br i1 %tobool29, label %if.end.31, label %if.then.30

if.then.30:                                       ; preds = %if.end.25
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end.31:                                        ; preds = %if.end.25
  %30 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8
  %call32 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %30)
  %31 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call33 = call %struct.rtx_def* @gen_lowpart(i32 46, %struct.rtx_def* %31)
  store %struct.rtx_def* %call33, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end.31, %if.then.30
  %32 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %32
}

; Function Attrs: nounwind uwtable
define internal %struct.rtx_def* @ix86_expand_unop_builtin(i32 %icode, %union.tree_node* %arglist, %struct.rtx_def* %target, i32 %do_load) #1 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %icode.addr = alloca i32, align 4
  %arglist.addr = alloca %union.tree_node*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %do_load.addr = alloca i32, align 4
  %pat = alloca %struct.rtx_def*, align 8
  %arg0 = alloca %union.tree_node*, align 8
  %op0 = alloca %struct.rtx_def*, align 8
  %tmode = alloca i32, align 4
  %mode0 = alloca i32, align 4
  store i32 %icode, i32* %icode.addr, align 4
  store %union.tree_node* %arglist, %union.tree_node** %arglist.addr, align 8
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  store i32 %do_load, i32* %do_load.addr, align 4
  %0 = load %union.tree_node*, %union.tree_node** %arglist.addr, align 8
  %list = bitcast %union.tree_node* %0 to %struct.tree_list*
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2
  %1 = load %union.tree_node*, %union.tree_node** %value, align 8
  store %union.tree_node* %1, %union.tree_node** %arg0, align 8
  %2 = load %union.tree_node*, %union.tree_node** %arg0, align 8
  %call = call %struct.rtx_def* @expand_expr(%union.tree_node* %2, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call, %struct.rtx_def** %op0, align 8
  %3 = load i32, i32* %icode.addr, align 4
  %idxprom = zext i32 %3 to i64
  %arrayidx = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom
  %operand = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx, i32 0, i32 3
  %4 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand, align 8
  %arrayidx1 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %4, i64 0
  %mode = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx1, i32 0, i32 2
  %bf.load = load i16, i16* %mode, align 8
  %bf.cast = zext i16 %bf.load to i32
  store i32 %bf.cast, i32* %tmode, align 4
  %5 = load i32, i32* %icode.addr, align 4
  %idxprom2 = zext i32 %5 to i64
  %arrayidx3 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom2
  %operand4 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx3, i32 0, i32 3
  %6 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand4, align 8
  %arrayidx5 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %6, i64 1
  %mode6 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx5, i32 0, i32 2
  %bf.load7 = load i16, i16* %mode6, align 8
  %bf.cast8 = zext i16 %bf.load7 to i32
  store i32 %bf.cast8, i32* %mode0, align 4
  %7 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %tobool = icmp ne %struct.rtx_def* %7, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %8 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %9 = bitcast %struct.rtx_def* %8 to i32*
  %bf.load9 = load i32, i32* %9, align 8
  %bf.lshr = lshr i32 %bf.load9, 16
  %bf.clear = and i32 %bf.lshr, 255
  %10 = load i32, i32* %tmode, align 4
  %cmp = icmp ne i32 %bf.clear, %10
  br i1 %cmp, label %if.then, label %lor.lhs.false.10

lor.lhs.false.10:                                 ; preds = %lor.lhs.false
  %11 = load i32, i32* %icode.addr, align 4
  %idxprom11 = zext i32 %11 to i64
  %arrayidx12 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom11
  %operand13 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx12, i32 0, i32 3
  %12 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand13, align 8
  %arrayidx14 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %12, i64 0
  %predicate = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx14, i32 0, i32 0
  %13 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate, align 8
  %14 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %15 = load i32, i32* %tmode, align 4
  %call15 = call i32 %13(%struct.rtx_def* %14, i32 %15)
  %tobool16 = icmp ne i32 %call15, 0
  br i1 %tobool16, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false.10, %lor.lhs.false, %entry
  %16 = load i32, i32* %tmode, align 4
  %call17 = call %struct.rtx_def* @gen_reg_rtx(i32 %16)
  store %struct.rtx_def* %call17, %struct.rtx_def** %target.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false.10
  %17 = load i32, i32* %do_load.addr, align 4
  %tobool18 = icmp ne i32 %17, 0
  br i1 %tobool18, label %if.then.19, label %if.else

if.then.19:                                       ; preds = %if.end
  %18 = load i32, i32* %mode0, align 4
  %19 = load i32, i32* @target_flags, align 4
  %and = and i32 %19, 33554432
  %tobool20 = icmp ne i32 %and, 0
  %cond = select i1 %tobool20, i32 5, i32 4
  %20 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call21 = call %struct.rtx_def* @copy_to_mode_reg(i32 %cond, %struct.rtx_def* %20)
  %call22 = call %struct.rtx_def* @gen_rtx_MEM(i32 %18, %struct.rtx_def* %call21)
  store %struct.rtx_def* %call22, %struct.rtx_def** %op0, align 8
  br label %if.end.43

if.else:                                          ; preds = %if.end
  %21 = load i32, i32* %mode0, align 4
  %idxprom23 = sext i32 %21 to i64
  %arrayidx24 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom23
  %22 = load i32, i32* %arrayidx24, align 4
  %cmp25 = icmp eq i32 %22, 7
  br i1 %cmp25, label %if.then.30, label %lor.lhs.false.26

lor.lhs.false.26:                                 ; preds = %if.else
  %23 = load i32, i32* %mode0, align 4
  %idxprom27 = sext i32 %23 to i64
  %arrayidx28 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom27
  %24 = load i32, i32* %arrayidx28, align 4
  %cmp29 = icmp eq i32 %24, 8
  br i1 %cmp29, label %if.then.30, label %if.end.32

if.then.30:                                       ; preds = %lor.lhs.false.26, %if.else
  %25 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %26 = load i32, i32* %mode0, align 4
  %call31 = call %struct.rtx_def* @safe_vector_operand(%struct.rtx_def* %25, i32 %26)
  store %struct.rtx_def* %call31, %struct.rtx_def** %op0, align 8
  br label %if.end.32

if.end.32:                                        ; preds = %if.then.30, %lor.lhs.false.26
  %27 = load i32, i32* %icode.addr, align 4
  %idxprom33 = zext i32 %27 to i64
  %arrayidx34 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom33
  %operand35 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx34, i32 0, i32 3
  %28 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand35, align 8
  %arrayidx36 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %28, i64 1
  %predicate37 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx36, i32 0, i32 0
  %29 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate37, align 8
  %30 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %31 = load i32, i32* %mode0, align 4
  %call38 = call i32 %29(%struct.rtx_def* %30, i32 %31)
  %tobool39 = icmp ne i32 %call38, 0
  br i1 %tobool39, label %if.end.42, label %if.then.40

if.then.40:                                       ; preds = %if.end.32
  %32 = load i32, i32* %mode0, align 4
  %33 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call41 = call %struct.rtx_def* @copy_to_mode_reg(i32 %32, %struct.rtx_def* %33)
  store %struct.rtx_def* %call41, %struct.rtx_def** %op0, align 8
  br label %if.end.42

if.end.42:                                        ; preds = %if.then.40, %if.end.32
  br label %if.end.43

if.end.43:                                        ; preds = %if.end.42, %if.then.19
  %34 = load i32, i32* %icode.addr, align 4
  %idxprom44 = sext i32 %34 to i64
  %arrayidx45 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom44
  %genfun = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx45, i32 0, i32 2
  %35 = load %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.rtx_def* (%struct.rtx_def*, ...)** %genfun, align 8
  %36 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %37 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call46 = call %struct.rtx_def* (%struct.rtx_def*, ...) %35(%struct.rtx_def* %36, %struct.rtx_def* %37)
  store %struct.rtx_def* %call46, %struct.rtx_def** %pat, align 8
  %38 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8
  %tobool47 = icmp ne %struct.rtx_def* %38, null
  br i1 %tobool47, label %if.end.49, label %if.then.48

if.then.48:                                       ; preds = %if.end.43
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end.49:                                        ; preds = %if.end.43
  %39 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8
  %call50 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %39)
  %40 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  store %struct.rtx_def* %40, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end.49, %if.then.48
  %41 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %41
}

; Function Attrs: nounwind uwtable
define internal %struct.rtx_def* @ix86_expand_store_builtin(i32 %icode, %union.tree_node* %arglist) #1 {
entry:
  %icode.addr = alloca i32, align 4
  %arglist.addr = alloca %union.tree_node*, align 8
  %pat = alloca %struct.rtx_def*, align 8
  %arg0 = alloca %union.tree_node*, align 8
  %arg1 = alloca %union.tree_node*, align 8
  %op0 = alloca %struct.rtx_def*, align 8
  %op1 = alloca %struct.rtx_def*, align 8
  %mode0 = alloca i32, align 4
  %mode1 = alloca i32, align 4
  store i32 %icode, i32* %icode.addr, align 4
  store %union.tree_node* %arglist, %union.tree_node** %arglist.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %arglist.addr, align 8
  %list = bitcast %union.tree_node* %0 to %struct.tree_list*
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2
  %1 = load %union.tree_node*, %union.tree_node** %value, align 8
  store %union.tree_node* %1, %union.tree_node** %arg0, align 8
  %2 = load %union.tree_node*, %union.tree_node** %arglist.addr, align 8
  %common = bitcast %union.tree_node* %2 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 0
  %3 = load %union.tree_node*, %union.tree_node** %chain, align 8
  %list1 = bitcast %union.tree_node* %3 to %struct.tree_list*
  %value2 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list1, i32 0, i32 2
  %4 = load %union.tree_node*, %union.tree_node** %value2, align 8
  store %union.tree_node* %4, %union.tree_node** %arg1, align 8
  %5 = load %union.tree_node*, %union.tree_node** %arg0, align 8
  %call = call %struct.rtx_def* @expand_expr(%union.tree_node* %5, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call, %struct.rtx_def** %op0, align 8
  %6 = load %union.tree_node*, %union.tree_node** %arg1, align 8
  %call3 = call %struct.rtx_def* @expand_expr(%union.tree_node* %6, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call3, %struct.rtx_def** %op1, align 8
  %7 = load i32, i32* %icode.addr, align 4
  %idxprom = zext i32 %7 to i64
  %arrayidx = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom
  %operand = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx, i32 0, i32 3
  %8 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand, align 8
  %arrayidx4 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %8, i64 0
  %mode = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx4, i32 0, i32 2
  %bf.load = load i16, i16* %mode, align 8
  %bf.cast = zext i16 %bf.load to i32
  store i32 %bf.cast, i32* %mode0, align 4
  %9 = load i32, i32* %icode.addr, align 4
  %idxprom5 = zext i32 %9 to i64
  %arrayidx6 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom5
  %operand7 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx6, i32 0, i32 3
  %10 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand7, align 8
  %arrayidx8 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %10, i64 1
  %mode9 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx8, i32 0, i32 2
  %bf.load10 = load i16, i16* %mode9, align 8
  %bf.cast11 = zext i16 %bf.load10 to i32
  store i32 %bf.cast11, i32* %mode1, align 4
  %11 = load i32, i32* %mode1, align 4
  %idxprom12 = sext i32 %11 to i64
  %arrayidx13 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom12
  %12 = load i32, i32* %arrayidx13, align 4
  %cmp = icmp eq i32 %12, 7
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %13 = load i32, i32* %mode1, align 4
  %idxprom14 = sext i32 %13 to i64
  %arrayidx15 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom14
  %14 = load i32, i32* %arrayidx15, align 4
  %cmp16 = icmp eq i32 %14, 8
  br i1 %cmp16, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %15 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %16 = load i32, i32* %mode1, align 4
  %call17 = call %struct.rtx_def* @safe_vector_operand(%struct.rtx_def* %15, i32 %16)
  store %struct.rtx_def* %call17, %struct.rtx_def** %op1, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %17 = load i32, i32* %mode0, align 4
  %18 = load i32, i32* @target_flags, align 4
  %and = and i32 %18, 33554432
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, i32 5, i32 4
  %19 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call18 = call %struct.rtx_def* @copy_to_mode_reg(i32 %cond, %struct.rtx_def* %19)
  %call19 = call %struct.rtx_def* @gen_rtx_MEM(i32 %17, %struct.rtx_def* %call18)
  store %struct.rtx_def* %call19, %struct.rtx_def** %op0, align 8
  %20 = load i32, i32* %icode.addr, align 4
  %idxprom20 = zext i32 %20 to i64
  %arrayidx21 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom20
  %operand22 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx21, i32 0, i32 3
  %21 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand22, align 8
  %arrayidx23 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %21, i64 1
  %predicate = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx23, i32 0, i32 0
  %22 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate, align 8
  %23 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %24 = load i32, i32* %mode1, align 4
  %call24 = call i32 %22(%struct.rtx_def* %23, i32 %24)
  %tobool25 = icmp ne i32 %call24, 0
  br i1 %tobool25, label %if.end.28, label %if.then.26

if.then.26:                                       ; preds = %if.end
  %25 = load i32, i32* %mode1, align 4
  %26 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %call27 = call %struct.rtx_def* @copy_to_mode_reg(i32 %25, %struct.rtx_def* %26)
  store %struct.rtx_def* %call27, %struct.rtx_def** %op1, align 8
  br label %if.end.28

if.end.28:                                        ; preds = %if.then.26, %if.end
  %27 = load i32, i32* %icode.addr, align 4
  %idxprom29 = sext i32 %27 to i64
  %arrayidx30 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom29
  %genfun = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx30, i32 0, i32 2
  %28 = load %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.rtx_def* (%struct.rtx_def*, ...)** %genfun, align 8
  %29 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %30 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %call31 = call %struct.rtx_def* (%struct.rtx_def*, ...) %28(%struct.rtx_def* %29, %struct.rtx_def* %30)
  store %struct.rtx_def* %call31, %struct.rtx_def** %pat, align 8
  %31 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8
  %tobool32 = icmp ne %struct.rtx_def* %31, null
  br i1 %tobool32, label %if.then.33, label %if.end.35

if.then.33:                                       ; preds = %if.end.28
  %32 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8
  %call34 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %32)
  br label %if.end.35

if.end.35:                                        ; preds = %if.then.33, %if.end.28
  ret %struct.rtx_def* null
}

declare %struct.rtx_def* @gen_ldmxcsr(%struct.rtx_def*) #0

declare %struct.rtx_def* @gen_stmxcsr(%struct.rtx_def*) #0

declare %struct.rtx_def* @gen_femms() #0

; Function Attrs: nounwind uwtable
define internal %struct.rtx_def* @ix86_expand_binop_builtin(i32 %icode, %union.tree_node* %arglist, %struct.rtx_def* %target) #1 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %icode.addr = alloca i32, align 4
  %arglist.addr = alloca %union.tree_node*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %pat = alloca %struct.rtx_def*, align 8
  %arg0 = alloca %union.tree_node*, align 8
  %arg1 = alloca %union.tree_node*, align 8
  %op0 = alloca %struct.rtx_def*, align 8
  %op1 = alloca %struct.rtx_def*, align 8
  %tmode = alloca i32, align 4
  %mode0 = alloca i32, align 4
  %mode1 = alloca i32, align 4
  store i32 %icode, i32* %icode.addr, align 4
  store %union.tree_node* %arglist, %union.tree_node** %arglist.addr, align 8
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %arglist.addr, align 8
  %list = bitcast %union.tree_node* %0 to %struct.tree_list*
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2
  %1 = load %union.tree_node*, %union.tree_node** %value, align 8
  store %union.tree_node* %1, %union.tree_node** %arg0, align 8
  %2 = load %union.tree_node*, %union.tree_node** %arglist.addr, align 8
  %common = bitcast %union.tree_node* %2 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 0
  %3 = load %union.tree_node*, %union.tree_node** %chain, align 8
  %list1 = bitcast %union.tree_node* %3 to %struct.tree_list*
  %value2 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list1, i32 0, i32 2
  %4 = load %union.tree_node*, %union.tree_node** %value2, align 8
  store %union.tree_node* %4, %union.tree_node** %arg1, align 8
  %5 = load %union.tree_node*, %union.tree_node** %arg0, align 8
  %call = call %struct.rtx_def* @expand_expr(%union.tree_node* %5, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call, %struct.rtx_def** %op0, align 8
  %6 = load %union.tree_node*, %union.tree_node** %arg1, align 8
  %call3 = call %struct.rtx_def* @expand_expr(%union.tree_node* %6, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call3, %struct.rtx_def** %op1, align 8
  %7 = load i32, i32* %icode.addr, align 4
  %idxprom = zext i32 %7 to i64
  %arrayidx = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom
  %operand = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx, i32 0, i32 3
  %8 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand, align 8
  %arrayidx4 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %8, i64 0
  %mode = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx4, i32 0, i32 2
  %bf.load = load i16, i16* %mode, align 8
  %bf.cast = zext i16 %bf.load to i32
  store i32 %bf.cast, i32* %tmode, align 4
  %9 = load i32, i32* %icode.addr, align 4
  %idxprom5 = zext i32 %9 to i64
  %arrayidx6 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom5
  %operand7 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx6, i32 0, i32 3
  %10 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand7, align 8
  %arrayidx8 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %10, i64 1
  %mode9 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx8, i32 0, i32 2
  %bf.load10 = load i16, i16* %mode9, align 8
  %bf.cast11 = zext i16 %bf.load10 to i32
  store i32 %bf.cast11, i32* %mode0, align 4
  %11 = load i32, i32* %icode.addr, align 4
  %idxprom12 = zext i32 %11 to i64
  %arrayidx13 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom12
  %operand14 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx13, i32 0, i32 3
  %12 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand14, align 8
  %arrayidx15 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %12, i64 2
  %mode16 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx15, i32 0, i32 2
  %bf.load17 = load i16, i16* %mode16, align 8
  %bf.cast18 = zext i16 %bf.load17 to i32
  store i32 %bf.cast18, i32* %mode1, align 4
  %13 = load i32, i32* %mode0, align 4
  %idxprom19 = sext i32 %13 to i64
  %arrayidx20 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom19
  %14 = load i32, i32* %arrayidx20, align 4
  %cmp = icmp eq i32 %14, 7
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %15 = load i32, i32* %mode0, align 4
  %idxprom21 = sext i32 %15 to i64
  %arrayidx22 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom21
  %16 = load i32, i32* %arrayidx22, align 4
  %cmp23 = icmp eq i32 %16, 8
  br i1 %cmp23, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %17 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %18 = load i32, i32* %mode0, align 4
  %call24 = call %struct.rtx_def* @safe_vector_operand(%struct.rtx_def* %17, i32 %18)
  store %struct.rtx_def* %call24, %struct.rtx_def** %op0, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %19 = load i32, i32* %mode1, align 4
  %idxprom25 = sext i32 %19 to i64
  %arrayidx26 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom25
  %20 = load i32, i32* %arrayidx26, align 4
  %cmp27 = icmp eq i32 %20, 7
  br i1 %cmp27, label %if.then.32, label %lor.lhs.false.28

lor.lhs.false.28:                                 ; preds = %if.end
  %21 = load i32, i32* %mode1, align 4
  %idxprom29 = sext i32 %21 to i64
  %arrayidx30 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom29
  %22 = load i32, i32* %arrayidx30, align 4
  %cmp31 = icmp eq i32 %22, 8
  br i1 %cmp31, label %if.then.32, label %if.end.34

if.then.32:                                       ; preds = %lor.lhs.false.28, %if.end
  %23 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %24 = load i32, i32* %mode1, align 4
  %call33 = call %struct.rtx_def* @safe_vector_operand(%struct.rtx_def* %23, i32 %24)
  store %struct.rtx_def* %call33, %struct.rtx_def** %op1, align 8
  br label %if.end.34

if.end.34:                                        ; preds = %if.then.32, %lor.lhs.false.28
  %25 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %tobool = icmp ne %struct.rtx_def* %25, null
  br i1 %tobool, label %lor.lhs.false.35, label %if.then.45

lor.lhs.false.35:                                 ; preds = %if.end.34
  %26 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %27 = bitcast %struct.rtx_def* %26 to i32*
  %bf.load36 = load i32, i32* %27, align 8
  %bf.lshr = lshr i32 %bf.load36, 16
  %bf.clear = and i32 %bf.lshr, 255
  %28 = load i32, i32* %tmode, align 4
  %cmp37 = icmp ne i32 %bf.clear, %28
  br i1 %cmp37, label %if.then.45, label %lor.lhs.false.38

lor.lhs.false.38:                                 ; preds = %lor.lhs.false.35
  %29 = load i32, i32* %icode.addr, align 4
  %idxprom39 = zext i32 %29 to i64
  %arrayidx40 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom39
  %operand41 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx40, i32 0, i32 3
  %30 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand41, align 8
  %arrayidx42 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %30, i64 0
  %predicate = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx42, i32 0, i32 0
  %31 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate, align 8
  %32 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %33 = load i32, i32* %tmode, align 4
  %call43 = call i32 %31(%struct.rtx_def* %32, i32 %33)
  %tobool44 = icmp ne i32 %call43, 0
  br i1 %tobool44, label %if.end.47, label %if.then.45

if.then.45:                                       ; preds = %lor.lhs.false.38, %lor.lhs.false.35, %if.end.34
  %34 = load i32, i32* %tmode, align 4
  %call46 = call %struct.rtx_def* @gen_reg_rtx(i32 %34)
  store %struct.rtx_def* %call46, %struct.rtx_def** %target.addr, align 8
  br label %if.end.47

if.end.47:                                        ; preds = %if.then.45, %lor.lhs.false.38
  %35 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %36 = bitcast %struct.rtx_def* %35 to i32*
  %bf.load48 = load i32, i32* %36, align 8
  %bf.lshr49 = lshr i32 %bf.load48, 16
  %bf.clear50 = and i32 %bf.lshr49, 255
  %37 = load i32, i32* %mode0, align 4
  %cmp51 = icmp ne i32 %bf.clear50, %37
  br i1 %cmp51, label %if.then.57, label %lor.lhs.false.52

lor.lhs.false.52:                                 ; preds = %if.end.47
  %38 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %39 = bitcast %struct.rtx_def* %38 to i32*
  %bf.load53 = load i32, i32* %39, align 8
  %bf.lshr54 = lshr i32 %bf.load53, 16
  %bf.clear55 = and i32 %bf.lshr54, 255
  %40 = load i32, i32* %mode1, align 4
  %cmp56 = icmp ne i32 %bf.clear55, %40
  br i1 %cmp56, label %if.then.57, label %if.end.58

if.then.57:                                       ; preds = %lor.lhs.false.52, %if.end.47
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 11501, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @__FUNCTION__.ix86_expand_binop_builtin, i32 0, i32 0)) #7
  unreachable

if.end.58:                                        ; preds = %lor.lhs.false.52
  %41 = load i32, i32* %icode.addr, align 4
  %idxprom59 = zext i32 %41 to i64
  %arrayidx60 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom59
  %operand61 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx60, i32 0, i32 3
  %42 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand61, align 8
  %arrayidx62 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %42, i64 1
  %predicate63 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx62, i32 0, i32 0
  %43 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate63, align 8
  %44 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %45 = load i32, i32* %mode0, align 4
  %call64 = call i32 %43(%struct.rtx_def* %44, i32 %45)
  %tobool65 = icmp ne i32 %call64, 0
  br i1 %tobool65, label %if.end.68, label %if.then.66

if.then.66:                                       ; preds = %if.end.58
  %46 = load i32, i32* %mode0, align 4
  %47 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call67 = call %struct.rtx_def* @copy_to_mode_reg(i32 %46, %struct.rtx_def* %47)
  store %struct.rtx_def* %call67, %struct.rtx_def** %op0, align 8
  br label %if.end.68

if.end.68:                                        ; preds = %if.then.66, %if.end.58
  %48 = load i32, i32* %icode.addr, align 4
  %idxprom69 = zext i32 %48 to i64
  %arrayidx70 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom69
  %operand71 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx70, i32 0, i32 3
  %49 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand71, align 8
  %arrayidx72 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %49, i64 2
  %predicate73 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx72, i32 0, i32 0
  %50 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate73, align 8
  %51 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %52 = load i32, i32* %mode1, align 4
  %call74 = call i32 %50(%struct.rtx_def* %51, i32 %52)
  %tobool75 = icmp ne i32 %call74, 0
  br i1 %tobool75, label %if.end.78, label %if.then.76

if.then.76:                                       ; preds = %if.end.68
  %53 = load i32, i32* %mode1, align 4
  %54 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %call77 = call %struct.rtx_def* @copy_to_mode_reg(i32 %53, %struct.rtx_def* %54)
  store %struct.rtx_def* %call77, %struct.rtx_def** %op1, align 8
  br label %if.end.78

if.end.78:                                        ; preds = %if.then.76, %if.end.68
  %55 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %56 = bitcast %struct.rtx_def* %55 to i32*
  %bf.load79 = load i32, i32* %56, align 8
  %bf.clear80 = and i32 %bf.load79, 65535
  %cmp81 = icmp eq i32 %bf.clear80, 66
  br i1 %cmp81, label %land.lhs.true, label %if.end.87

land.lhs.true:                                    ; preds = %if.end.78
  %57 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %58 = bitcast %struct.rtx_def* %57 to i32*
  %bf.load82 = load i32, i32* %58, align 8
  %bf.clear83 = and i32 %bf.load82, 65535
  %cmp84 = icmp eq i32 %bf.clear83, 66
  br i1 %cmp84, label %if.then.85, label %if.end.87

if.then.85:                                       ; preds = %land.lhs.true
  %59 = load i32, i32* %mode0, align 4
  %60 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call86 = call %struct.rtx_def* @copy_to_mode_reg(i32 %59, %struct.rtx_def* %60)
  store %struct.rtx_def* %call86, %struct.rtx_def** %op0, align 8
  br label %if.end.87

if.end.87:                                        ; preds = %if.then.85, %land.lhs.true, %if.end.78
  %61 = load i32, i32* %icode.addr, align 4
  %idxprom88 = sext i32 %61 to i64
  %arrayidx89 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom88
  %genfun = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx89, i32 0, i32 2
  %62 = load %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.rtx_def* (%struct.rtx_def*, ...)** %genfun, align 8
  %63 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %64 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %65 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %call90 = call %struct.rtx_def* (%struct.rtx_def*, ...) %62(%struct.rtx_def* %63, %struct.rtx_def* %64, %struct.rtx_def* %65)
  store %struct.rtx_def* %call90, %struct.rtx_def** %pat, align 8
  %66 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8
  %tobool91 = icmp ne %struct.rtx_def* %66, null
  br i1 %tobool91, label %if.end.93, label %if.then.92

if.then.92:                                       ; preds = %if.end.87
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end.93:                                        ; preds = %if.end.87
  %67 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8
  %call94 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %67)
  %68 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  store %struct.rtx_def* %68, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end.93, %if.then.92
  %69 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %69
}

declare %struct.rtx_def* @gen_sse_clrv4sf(%struct.rtx_def*) #0

declare %struct.rtx_def* @gen_mmx_clrdi(%struct.rtx_def*) #0

; Function Attrs: nounwind uwtable
define internal %struct.rtx_def* @ix86_expand_sse_compare(%struct.builtin_description* %d, %union.tree_node* %arglist, %struct.rtx_def* %target) #1 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %d.addr = alloca %struct.builtin_description*, align 8
  %arglist.addr = alloca %union.tree_node*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %pat = alloca %struct.rtx_def*, align 8
  %arg0 = alloca %union.tree_node*, align 8
  %arg1 = alloca %union.tree_node*, align 8
  %op0 = alloca %struct.rtx_def*, align 8
  %op1 = alloca %struct.rtx_def*, align 8
  %op2 = alloca %struct.rtx_def*, align 8
  %tmode = alloca i32, align 4
  %mode0 = alloca i32, align 4
  %mode1 = alloca i32, align 4
  %comparison = alloca i32, align 4
  %tmp = alloca %struct.rtx_def*, align 8
  store %struct.builtin_description* %d, %struct.builtin_description** %d.addr, align 8
  store %union.tree_node* %arglist, %union.tree_node** %arglist.addr, align 8
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %arglist.addr, align 8
  %list = bitcast %union.tree_node* %0 to %struct.tree_list*
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2
  %1 = load %union.tree_node*, %union.tree_node** %value, align 8
  store %union.tree_node* %1, %union.tree_node** %arg0, align 8
  %2 = load %union.tree_node*, %union.tree_node** %arglist.addr, align 8
  %common = bitcast %union.tree_node* %2 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 0
  %3 = load %union.tree_node*, %union.tree_node** %chain, align 8
  %list1 = bitcast %union.tree_node* %3 to %struct.tree_list*
  %value2 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list1, i32 0, i32 2
  %4 = load %union.tree_node*, %union.tree_node** %value2, align 8
  store %union.tree_node* %4, %union.tree_node** %arg1, align 8
  %5 = load %union.tree_node*, %union.tree_node** %arg0, align 8
  %call = call %struct.rtx_def* @expand_expr(%union.tree_node* %5, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call, %struct.rtx_def** %op0, align 8
  %6 = load %union.tree_node*, %union.tree_node** %arg1, align 8
  %call3 = call %struct.rtx_def* @expand_expr(%union.tree_node* %6, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call3, %struct.rtx_def** %op1, align 8
  %7 = load %struct.builtin_description*, %struct.builtin_description** %d.addr, align 8
  %icode = getelementptr inbounds %struct.builtin_description, %struct.builtin_description* %7, i32 0, i32 1
  %8 = load i32, i32* %icode, align 4
  %idxprom = zext i32 %8 to i64
  %arrayidx = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom
  %operand = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx, i32 0, i32 3
  %9 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand, align 8
  %arrayidx4 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %9, i64 0
  %mode = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx4, i32 0, i32 2
  %bf.load = load i16, i16* %mode, align 8
  %bf.cast = zext i16 %bf.load to i32
  store i32 %bf.cast, i32* %tmode, align 4
  %10 = load %struct.builtin_description*, %struct.builtin_description** %d.addr, align 8
  %icode5 = getelementptr inbounds %struct.builtin_description, %struct.builtin_description* %10, i32 0, i32 1
  %11 = load i32, i32* %icode5, align 4
  %idxprom6 = zext i32 %11 to i64
  %arrayidx7 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom6
  %operand8 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx7, i32 0, i32 3
  %12 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand8, align 8
  %arrayidx9 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %12, i64 1
  %mode10 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx9, i32 0, i32 2
  %bf.load11 = load i16, i16* %mode10, align 8
  %bf.cast12 = zext i16 %bf.load11 to i32
  store i32 %bf.cast12, i32* %mode0, align 4
  %13 = load %struct.builtin_description*, %struct.builtin_description** %d.addr, align 8
  %icode13 = getelementptr inbounds %struct.builtin_description, %struct.builtin_description* %13, i32 0, i32 1
  %14 = load i32, i32* %icode13, align 4
  %idxprom14 = zext i32 %14 to i64
  %arrayidx15 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom14
  %operand16 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx15, i32 0, i32 3
  %15 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand16, align 8
  %arrayidx17 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %15, i64 2
  %mode18 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx17, i32 0, i32 2
  %bf.load19 = load i16, i16* %mode18, align 8
  %bf.cast20 = zext i16 %bf.load19 to i32
  store i32 %bf.cast20, i32* %mode1, align 4
  %16 = load %struct.builtin_description*, %struct.builtin_description** %d.addr, align 8
  %comparison21 = getelementptr inbounds %struct.builtin_description, %struct.builtin_description* %16, i32 0, i32 4
  %17 = load i32, i32* %comparison21, align 4
  store i32 %17, i32* %comparison, align 4
  %18 = load i32, i32* %mode0, align 4
  %idxprom22 = sext i32 %18 to i64
  %arrayidx23 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom22
  %19 = load i32, i32* %arrayidx23, align 4
  %cmp = icmp eq i32 %19, 7
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %20 = load i32, i32* %mode0, align 4
  %idxprom24 = sext i32 %20 to i64
  %arrayidx25 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom24
  %21 = load i32, i32* %arrayidx25, align 4
  %cmp26 = icmp eq i32 %21, 8
  br i1 %cmp26, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %22 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %23 = load i32, i32* %mode0, align 4
  %call27 = call %struct.rtx_def* @safe_vector_operand(%struct.rtx_def* %22, i32 %23)
  store %struct.rtx_def* %call27, %struct.rtx_def** %op0, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %24 = load i32, i32* %mode1, align 4
  %idxprom28 = sext i32 %24 to i64
  %arrayidx29 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom28
  %25 = load i32, i32* %arrayidx29, align 4
  %cmp30 = icmp eq i32 %25, 7
  br i1 %cmp30, label %if.then.35, label %lor.lhs.false.31

lor.lhs.false.31:                                 ; preds = %if.end
  %26 = load i32, i32* %mode1, align 4
  %idxprom32 = sext i32 %26 to i64
  %arrayidx33 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom32
  %27 = load i32, i32* %arrayidx33, align 4
  %cmp34 = icmp eq i32 %27, 8
  br i1 %cmp34, label %if.then.35, label %if.end.37

if.then.35:                                       ; preds = %lor.lhs.false.31, %if.end
  %28 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %29 = load i32, i32* %mode1, align 4
  %call36 = call %struct.rtx_def* @safe_vector_operand(%struct.rtx_def* %28, i32 %29)
  store %struct.rtx_def* %call36, %struct.rtx_def** %op1, align 8
  br label %if.end.37

if.end.37:                                        ; preds = %if.then.35, %lor.lhs.false.31
  %30 = load %struct.builtin_description*, %struct.builtin_description** %d.addr, align 8
  %flag = getelementptr inbounds %struct.builtin_description, %struct.builtin_description* %30, i32 0, i32 5
  %31 = load i32, i32* %flag, align 4
  %tobool = icmp ne i32 %31, 0
  br i1 %tobool, label %if.then.38, label %if.end.41

if.then.38:                                       ; preds = %if.end.37
  %32 = load i32, i32* %mode1, align 4
  %call39 = call %struct.rtx_def* @gen_reg_rtx(i32 %32)
  store %struct.rtx_def* %call39, %struct.rtx_def** %tmp, align 8
  %33 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %34 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %call40 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %33, %struct.rtx_def* %34)
  %35 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  store %struct.rtx_def* %35, %struct.rtx_def** %op1, align 8
  %36 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  store %struct.rtx_def* %36, %struct.rtx_def** %op0, align 8
  br label %if.end.41

if.end.41:                                        ; preds = %if.then.38, %if.end.37
  %37 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %tobool42 = icmp ne %struct.rtx_def* %37, null
  br i1 %tobool42, label %lor.lhs.false.43, label %if.then.54

lor.lhs.false.43:                                 ; preds = %if.end.41
  %38 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %39 = bitcast %struct.rtx_def* %38 to i32*
  %bf.load44 = load i32, i32* %39, align 8
  %bf.lshr = lshr i32 %bf.load44, 16
  %bf.clear = and i32 %bf.lshr, 255
  %40 = load i32, i32* %tmode, align 4
  %cmp45 = icmp ne i32 %bf.clear, %40
  br i1 %cmp45, label %if.then.54, label %lor.lhs.false.46

lor.lhs.false.46:                                 ; preds = %lor.lhs.false.43
  %41 = load %struct.builtin_description*, %struct.builtin_description** %d.addr, align 8
  %icode47 = getelementptr inbounds %struct.builtin_description, %struct.builtin_description* %41, i32 0, i32 1
  %42 = load i32, i32* %icode47, align 4
  %idxprom48 = zext i32 %42 to i64
  %arrayidx49 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom48
  %operand50 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx49, i32 0, i32 3
  %43 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand50, align 8
  %arrayidx51 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %43, i64 0
  %predicate = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx51, i32 0, i32 0
  %44 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate, align 8
  %45 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %46 = load i32, i32* %tmode, align 4
  %call52 = call i32 %44(%struct.rtx_def* %45, i32 %46)
  %tobool53 = icmp ne i32 %call52, 0
  br i1 %tobool53, label %if.end.56, label %if.then.54

if.then.54:                                       ; preds = %lor.lhs.false.46, %lor.lhs.false.43, %if.end.41
  %47 = load i32, i32* %tmode, align 4
  %call55 = call %struct.rtx_def* @gen_reg_rtx(i32 %47)
  store %struct.rtx_def* %call55, %struct.rtx_def** %target.addr, align 8
  br label %if.end.56

if.end.56:                                        ; preds = %if.then.54, %lor.lhs.false.46
  %48 = load %struct.builtin_description*, %struct.builtin_description** %d.addr, align 8
  %icode57 = getelementptr inbounds %struct.builtin_description, %struct.builtin_description* %48, i32 0, i32 1
  %49 = load i32, i32* %icode57, align 4
  %idxprom58 = zext i32 %49 to i64
  %arrayidx59 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom58
  %operand60 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx59, i32 0, i32 3
  %50 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand60, align 8
  %arrayidx61 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %50, i64 1
  %predicate62 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx61, i32 0, i32 0
  %51 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate62, align 8
  %52 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %53 = load i32, i32* %mode0, align 4
  %call63 = call i32 %51(%struct.rtx_def* %52, i32 %53)
  %tobool64 = icmp ne i32 %call63, 0
  br i1 %tobool64, label %if.end.67, label %if.then.65

if.then.65:                                       ; preds = %if.end.56
  %54 = load i32, i32* %mode0, align 4
  %55 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call66 = call %struct.rtx_def* @copy_to_mode_reg(i32 %54, %struct.rtx_def* %55)
  store %struct.rtx_def* %call66, %struct.rtx_def** %op0, align 8
  br label %if.end.67

if.end.67:                                        ; preds = %if.then.65, %if.end.56
  %56 = load %struct.builtin_description*, %struct.builtin_description** %d.addr, align 8
  %icode68 = getelementptr inbounds %struct.builtin_description, %struct.builtin_description* %56, i32 0, i32 1
  %57 = load i32, i32* %icode68, align 4
  %idxprom69 = zext i32 %57 to i64
  %arrayidx70 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom69
  %operand71 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx70, i32 0, i32 3
  %58 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand71, align 8
  %arrayidx72 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %58, i64 2
  %predicate73 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx72, i32 0, i32 0
  %59 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate73, align 8
  %60 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %61 = load i32, i32* %mode1, align 4
  %call74 = call i32 %59(%struct.rtx_def* %60, i32 %61)
  %tobool75 = icmp ne i32 %call74, 0
  br i1 %tobool75, label %if.end.78, label %if.then.76

if.then.76:                                       ; preds = %if.end.67
  %62 = load i32, i32* %mode1, align 4
  %63 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %call77 = call %struct.rtx_def* @copy_to_mode_reg(i32 %62, %struct.rtx_def* %63)
  store %struct.rtx_def* %call77, %struct.rtx_def** %op1, align 8
  br label %if.end.78

if.end.78:                                        ; preds = %if.then.76, %if.end.67
  %64 = load i32, i32* %comparison, align 4
  %65 = load i32, i32* %mode0, align 4
  %66 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %67 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %call79 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 %64, i32 %65, %struct.rtx_def* %66, %struct.rtx_def* %67)
  store %struct.rtx_def* %call79, %struct.rtx_def** %op2, align 8
  %68 = load %struct.builtin_description*, %struct.builtin_description** %d.addr, align 8
  %icode80 = getelementptr inbounds %struct.builtin_description, %struct.builtin_description* %68, i32 0, i32 1
  %69 = load i32, i32* %icode80, align 4
  %idxprom81 = sext i32 %69 to i64
  %arrayidx82 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom81
  %genfun = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx82, i32 0, i32 2
  %70 = load %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.rtx_def* (%struct.rtx_def*, ...)** %genfun, align 8
  %71 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %72 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %73 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %74 = load %struct.rtx_def*, %struct.rtx_def** %op2, align 8
  %call83 = call %struct.rtx_def* (%struct.rtx_def*, ...) %70(%struct.rtx_def* %71, %struct.rtx_def* %72, %struct.rtx_def* %73, %struct.rtx_def* %74)
  store %struct.rtx_def* %call83, %struct.rtx_def** %pat, align 8
  %75 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8
  %tobool84 = icmp ne %struct.rtx_def* %75, null
  br i1 %tobool84, label %if.end.86, label %if.then.85

if.then.85:                                       ; preds = %if.end.78
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end.86:                                        ; preds = %if.end.78
  %76 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8
  %call87 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %76)
  %77 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  store %struct.rtx_def* %77, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end.86, %if.then.85
  %78 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %78
}

; Function Attrs: nounwind uwtable
define internal %struct.rtx_def* @ix86_expand_sse_comi(%struct.builtin_description* %d, %union.tree_node* %arglist, %struct.rtx_def* %target) #1 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %d.addr = alloca %struct.builtin_description*, align 8
  %arglist.addr = alloca %union.tree_node*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %pat = alloca %struct.rtx_def*, align 8
  %arg0 = alloca %union.tree_node*, align 8
  %arg1 = alloca %union.tree_node*, align 8
  %op0 = alloca %struct.rtx_def*, align 8
  %op1 = alloca %struct.rtx_def*, align 8
  %op2 = alloca %struct.rtx_def*, align 8
  %mode0 = alloca i32, align 4
  %mode1 = alloca i32, align 4
  %comparison = alloca i32, align 4
  %tmp = alloca %struct.rtx_def*, align 8
  store %struct.builtin_description* %d, %struct.builtin_description** %d.addr, align 8
  store %union.tree_node* %arglist, %union.tree_node** %arglist.addr, align 8
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %arglist.addr, align 8
  %list = bitcast %union.tree_node* %0 to %struct.tree_list*
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2
  %1 = load %union.tree_node*, %union.tree_node** %value, align 8
  store %union.tree_node* %1, %union.tree_node** %arg0, align 8
  %2 = load %union.tree_node*, %union.tree_node** %arglist.addr, align 8
  %common = bitcast %union.tree_node* %2 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 0
  %3 = load %union.tree_node*, %union.tree_node** %chain, align 8
  %list1 = bitcast %union.tree_node* %3 to %struct.tree_list*
  %value2 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list1, i32 0, i32 2
  %4 = load %union.tree_node*, %union.tree_node** %value2, align 8
  store %union.tree_node* %4, %union.tree_node** %arg1, align 8
  %5 = load %union.tree_node*, %union.tree_node** %arg0, align 8
  %call = call %struct.rtx_def* @expand_expr(%union.tree_node* %5, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call, %struct.rtx_def** %op0, align 8
  %6 = load %union.tree_node*, %union.tree_node** %arg1, align 8
  %call3 = call %struct.rtx_def* @expand_expr(%union.tree_node* %6, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call3, %struct.rtx_def** %op1, align 8
  %7 = load %struct.builtin_description*, %struct.builtin_description** %d.addr, align 8
  %icode = getelementptr inbounds %struct.builtin_description, %struct.builtin_description* %7, i32 0, i32 1
  %8 = load i32, i32* %icode, align 4
  %idxprom = zext i32 %8 to i64
  %arrayidx = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom
  %operand = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx, i32 0, i32 3
  %9 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand, align 8
  %arrayidx4 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %9, i64 0
  %mode = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx4, i32 0, i32 2
  %bf.load = load i16, i16* %mode, align 8
  %bf.cast = zext i16 %bf.load to i32
  store i32 %bf.cast, i32* %mode0, align 4
  %10 = load %struct.builtin_description*, %struct.builtin_description** %d.addr, align 8
  %icode5 = getelementptr inbounds %struct.builtin_description, %struct.builtin_description* %10, i32 0, i32 1
  %11 = load i32, i32* %icode5, align 4
  %idxprom6 = zext i32 %11 to i64
  %arrayidx7 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom6
  %operand8 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx7, i32 0, i32 3
  %12 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand8, align 8
  %arrayidx9 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %12, i64 1
  %mode10 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx9, i32 0, i32 2
  %bf.load11 = load i16, i16* %mode10, align 8
  %bf.cast12 = zext i16 %bf.load11 to i32
  store i32 %bf.cast12, i32* %mode1, align 4
  %13 = load %struct.builtin_description*, %struct.builtin_description** %d.addr, align 8
  %comparison13 = getelementptr inbounds %struct.builtin_description, %struct.builtin_description* %13, i32 0, i32 4
  %14 = load i32, i32* %comparison13, align 4
  store i32 %14, i32* %comparison, align 4
  %15 = load i32, i32* %mode0, align 4
  %idxprom14 = sext i32 %15 to i64
  %arrayidx15 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom14
  %16 = load i32, i32* %arrayidx15, align 4
  %cmp = icmp eq i32 %16, 7
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %17 = load i32, i32* %mode0, align 4
  %idxprom16 = sext i32 %17 to i64
  %arrayidx17 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom16
  %18 = load i32, i32* %arrayidx17, align 4
  %cmp18 = icmp eq i32 %18, 8
  br i1 %cmp18, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %19 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %20 = load i32, i32* %mode0, align 4
  %call19 = call %struct.rtx_def* @safe_vector_operand(%struct.rtx_def* %19, i32 %20)
  store %struct.rtx_def* %call19, %struct.rtx_def** %op0, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %21 = load i32, i32* %mode1, align 4
  %idxprom20 = sext i32 %21 to i64
  %arrayidx21 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom20
  %22 = load i32, i32* %arrayidx21, align 4
  %cmp22 = icmp eq i32 %22, 7
  br i1 %cmp22, label %if.then.27, label %lor.lhs.false.23

lor.lhs.false.23:                                 ; preds = %if.end
  %23 = load i32, i32* %mode1, align 4
  %idxprom24 = sext i32 %23 to i64
  %arrayidx25 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom24
  %24 = load i32, i32* %arrayidx25, align 4
  %cmp26 = icmp eq i32 %24, 8
  br i1 %cmp26, label %if.then.27, label %if.end.29

if.then.27:                                       ; preds = %lor.lhs.false.23, %if.end
  %25 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %26 = load i32, i32* %mode1, align 4
  %call28 = call %struct.rtx_def* @safe_vector_operand(%struct.rtx_def* %25, i32 %26)
  store %struct.rtx_def* %call28, %struct.rtx_def** %op1, align 8
  br label %if.end.29

if.end.29:                                        ; preds = %if.then.27, %lor.lhs.false.23
  %27 = load %struct.builtin_description*, %struct.builtin_description** %d.addr, align 8
  %flag = getelementptr inbounds %struct.builtin_description, %struct.builtin_description* %27, i32 0, i32 5
  %28 = load i32, i32* %flag, align 4
  %tobool = icmp ne i32 %28, 0
  br i1 %tobool, label %if.then.30, label %if.end.31

if.then.30:                                       ; preds = %if.end.29
  %29 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  store %struct.rtx_def* %29, %struct.rtx_def** %tmp, align 8
  %30 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  store %struct.rtx_def* %30, %struct.rtx_def** %op1, align 8
  %31 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  store %struct.rtx_def* %31, %struct.rtx_def** %op0, align 8
  br label %if.end.31

if.end.31:                                        ; preds = %if.then.30, %if.end.29
  %call32 = call %struct.rtx_def* @gen_reg_rtx(i32 4)
  store %struct.rtx_def* %call32, %struct.rtx_def** %target.addr, align 8
  %32 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %33 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call33 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %32, %struct.rtx_def* %33)
  %34 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call34 = call %struct.rtx_def* @gen_rtx_SUBREG(i32 2, %struct.rtx_def* %34, i32 0)
  store %struct.rtx_def* %call34, %struct.rtx_def** %target.addr, align 8
  %35 = load %struct.builtin_description*, %struct.builtin_description** %d.addr, align 8
  %icode35 = getelementptr inbounds %struct.builtin_description, %struct.builtin_description* %35, i32 0, i32 1
  %36 = load i32, i32* %icode35, align 4
  %idxprom36 = zext i32 %36 to i64
  %arrayidx37 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom36
  %operand38 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx37, i32 0, i32 3
  %37 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand38, align 8
  %arrayidx39 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %37, i64 0
  %predicate = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx39, i32 0, i32 0
  %38 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate, align 8
  %39 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %40 = load i32, i32* %mode0, align 4
  %call40 = call i32 %38(%struct.rtx_def* %39, i32 %40)
  %tobool41 = icmp ne i32 %call40, 0
  br i1 %tobool41, label %if.end.44, label %if.then.42

if.then.42:                                       ; preds = %if.end.31
  %41 = load i32, i32* %mode0, align 4
  %42 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call43 = call %struct.rtx_def* @copy_to_mode_reg(i32 %41, %struct.rtx_def* %42)
  store %struct.rtx_def* %call43, %struct.rtx_def** %op0, align 8
  br label %if.end.44

if.end.44:                                        ; preds = %if.then.42, %if.end.31
  %43 = load %struct.builtin_description*, %struct.builtin_description** %d.addr, align 8
  %icode45 = getelementptr inbounds %struct.builtin_description, %struct.builtin_description* %43, i32 0, i32 1
  %44 = load i32, i32* %icode45, align 4
  %idxprom46 = zext i32 %44 to i64
  %arrayidx47 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom46
  %operand48 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx47, i32 0, i32 3
  %45 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand48, align 8
  %arrayidx49 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %45, i64 1
  %predicate50 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx49, i32 0, i32 0
  %46 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate50, align 8
  %47 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %48 = load i32, i32* %mode1, align 4
  %call51 = call i32 %46(%struct.rtx_def* %47, i32 %48)
  %tobool52 = icmp ne i32 %call51, 0
  br i1 %tobool52, label %if.end.55, label %if.then.53

if.then.53:                                       ; preds = %if.end.44
  %49 = load i32, i32* %mode1, align 4
  %50 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %call54 = call %struct.rtx_def* @copy_to_mode_reg(i32 %49, %struct.rtx_def* %50)
  store %struct.rtx_def* %call54, %struct.rtx_def** %op1, align 8
  br label %if.end.55

if.end.55:                                        ; preds = %if.then.53, %if.end.44
  %51 = load i32, i32* %comparison, align 4
  %52 = load i32, i32* %mode0, align 4
  %53 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %54 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %call56 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 %51, i32 %52, %struct.rtx_def* %53, %struct.rtx_def* %54)
  store %struct.rtx_def* %call56, %struct.rtx_def** %op2, align 8
  %55 = load %struct.builtin_description*, %struct.builtin_description** %d.addr, align 8
  %icode57 = getelementptr inbounds %struct.builtin_description, %struct.builtin_description* %55, i32 0, i32 1
  %56 = load i32, i32* %icode57, align 4
  %idxprom58 = sext i32 %56 to i64
  %arrayidx59 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom58
  %genfun = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx59, i32 0, i32 2
  %57 = load %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.rtx_def* (%struct.rtx_def*, ...)** %genfun, align 8
  %58 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %59 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %60 = load %struct.rtx_def*, %struct.rtx_def** %op2, align 8
  %call60 = call %struct.rtx_def* (%struct.rtx_def*, ...) %57(%struct.rtx_def* %58, %struct.rtx_def* %59, %struct.rtx_def* %60)
  store %struct.rtx_def* %call60, %struct.rtx_def** %pat, align 8
  %61 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8
  %tobool61 = icmp ne %struct.rtx_def* %61, null
  br i1 %tobool61, label %if.end.63, label %if.then.62

if.then.62:                                       ; preds = %if.end.55
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end.63:                                        ; preds = %if.end.55
  %62 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8
  %call64 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %62)
  %63 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call65 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 64, i32 0, %struct.rtx_def* %63)
  %64 = load i32, i32* %comparison, align 4
  %call66 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %65 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call67 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 %64, i32 2, %struct.rtx_def* %call66, %struct.rtx_def* %65)
  %call68 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call65, %struct.rtx_def* %call67)
  %call69 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call68)
  %66 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %66, i32 0, i32 1
  %arrayidx70 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx70 to %struct.rtx_def**
  %67 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %67, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end.63, %if.then.62
  %68 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %68
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @ix86_force_to_memory(i32 %mode, %struct.rtx_def* %operand) #1 {
entry:
  %mode.addr = alloca i32, align 4
  %operand.addr = alloca %struct.rtx_def*, align 8
  %result = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store i32 %mode, i32* %mode.addr, align 4
  store %struct.rtx_def* %operand, %struct.rtx_def** %operand.addr, align 8
  %0 = load i32, i32* @reload_completed, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 12178, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__FUNCTION__.ix86_force_to_memory, i32 0, i32 0)) #7
  unreachable

if.end:                                           ; preds = %entry
  %1 = load i32, i32* @target_flags, align 4
  %and = and i32 %1, 33554432
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.end
  %2 = load i32, i32* @target_flags, align 4
  %and2 = and i32 %2, 67108864
  %tobool3 = icmp ne i32 %and2, 0
  br i1 %tobool3, label %if.else, label %if.then.4

if.then.4:                                        ; preds = %land.lhs.true
  %3 = load i32, i32* %mode.addr, align 4
  %4 = load i32, i32* @target_flags, align 4
  %and5 = and i32 %4, 33554432
  %tobool6 = icmp ne i32 %and5, 0
  %cond = select i1 %tobool6, i32 5, i32 4
  %5 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %call = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 -128)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %cond, %struct.rtx_def* %5, %struct.rtx_def* %call)
  %call8 = call %struct.rtx_def* @gen_rtx_MEM(i32 %3, %struct.rtx_def* %call7)
  store %struct.rtx_def* %call8, %struct.rtx_def** %result, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand.addr, align 8
  %call9 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %6, %struct.rtx_def* %7)
  br label %if.end.56

if.else:                                          ; preds = %land.lhs.true, %if.end
  %8 = load i32, i32* @target_flags, align 4
  %and10 = and i32 %8, 33554432
  %tobool11 = icmp ne i32 %and10, 0
  br i1 %tobool11, label %land.lhs.true.12, label %if.else.23

land.lhs.true.12:                                 ; preds = %if.else
  %9 = load i32, i32* @target_flags, align 4
  %and13 = and i32 %9, 67108864
  %tobool14 = icmp ne i32 %and13, 0
  br i1 %tobool14, label %if.then.15, label %if.else.23

if.then.15:                                       ; preds = %land.lhs.true.12
  %10 = load i32, i32* %mode.addr, align 4
  switch i32 %10, label %sw.default [
    i32 3, label %sw.bb
    i32 4, label %sw.bb
    i32 5, label %sw.bb.17
  ]

sw.bb:                                            ; preds = %if.then.15, %if.then.15
  %11 = load %struct.rtx_def*, %struct.rtx_def** %operand.addr, align 8
  %call16 = call %struct.rtx_def* @gen_lowpart(i32 5, %struct.rtx_def* %11)
  store %struct.rtx_def* %call16, %struct.rtx_def** %operand.addr, align 8
  br label %sw.bb.17

sw.bb.17:                                         ; preds = %if.then.15, %sw.bb
  %12 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %call18 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 96, i32 5, %struct.rtx_def* %12)
  %call19 = call %struct.rtx_def* @gen_rtx_MEM(i32 5, %struct.rtx_def* %call18)
  %13 = load %struct.rtx_def*, %struct.rtx_def** %operand.addr, align 8
  %call20 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call19, %struct.rtx_def* %13)
  %call21 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call20)
  br label %sw.epilog

sw.default:                                       ; preds = %if.then.15
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 12204, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__FUNCTION__.ix86_force_to_memory, i32 0, i32 0)) #7
  unreachable

sw.epilog:                                        ; preds = %sw.bb.17
  %14 = load i32, i32* %mode.addr, align 4
  %15 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %call22 = call %struct.rtx_def* @gen_rtx_MEM(i32 %14, %struct.rtx_def* %15)
  store %struct.rtx_def* %call22, %struct.rtx_def** %result, align 8
  br label %if.end.55

if.else.23:                                       ; preds = %land.lhs.true.12, %if.else
  %16 = load i32, i32* %mode.addr, align 4
  switch i32 %16, label %sw.default.52 [
    i32 5, label %sw.bb.24
    i32 3, label %sw.bb.41
    i32 4, label %sw.bb.47
  ]

sw.bb.24:                                         ; preds = %if.else.23
  %arraydecay = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i32 0
  %arraydecay25 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i32 0
  %add.ptr = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %arraydecay25, i64 1
  call void @split_di(%struct.rtx_def** %operand.addr, i32 1, %struct.rtx_def** %arraydecay, %struct.rtx_def** %add.ptr)
  %17 = load i32, i32* @target_flags, align 4
  %and26 = and i32 %17, 33554432
  %tobool27 = icmp ne i32 %and26, 0
  %cond28 = select i1 %tobool27, i32 5, i32 4
  %18 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %call29 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 96, i32 %cond28, %struct.rtx_def* %18)
  %call30 = call %struct.rtx_def* @gen_rtx_MEM(i32 4, %struct.rtx_def* %call29)
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %19 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %call31 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call30, %struct.rtx_def* %19)
  %call32 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call31)
  %20 = load i32, i32* @target_flags, align 4
  %and33 = and i32 %20, 33554432
  %tobool34 = icmp ne i32 %and33, 0
  %cond35 = select i1 %tobool34, i32 5, i32 4
  %21 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %call36 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 96, i32 %cond35, %struct.rtx_def* %21)
  %call37 = call %struct.rtx_def* @gen_rtx_MEM(i32 4, %struct.rtx_def* %call36)
  %arrayidx38 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %22 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx38, align 8
  %call39 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call37, %struct.rtx_def* %22)
  %call40 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call39)
  br label %sw.epilog.53

sw.bb.41:                                         ; preds = %if.else.23
  %23 = load i32, i32* @ix86_cpu, align 4
  %shl = shl i32 1, %23
  %and42 = and i32 8, %shl
  %tobool43 = icmp ne i32 %and42, 0
  br i1 %tobool43, label %if.end.46, label %if.then.44

if.then.44:                                       ; preds = %sw.bb.41
  %24 = load %struct.rtx_def*, %struct.rtx_def** %operand.addr, align 8
  %call45 = call %struct.rtx_def* @gen_lowpart(i32 4, %struct.rtx_def* %24)
  store %struct.rtx_def* %call45, %struct.rtx_def** %operand.addr, align 8
  br label %if.end.46

if.end.46:                                        ; preds = %if.then.44, %sw.bb.41
  br label %sw.bb.47

sw.bb.47:                                         ; preds = %if.else.23, %if.end.46
  %25 = load %struct.rtx_def*, %struct.rtx_def** %operand.addr, align 8
  %26 = bitcast %struct.rtx_def* %25 to i32*
  %bf.load = load i32, i32* %26, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %27 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %call48 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 96, i32 4, %struct.rtx_def* %27)
  %call49 = call %struct.rtx_def* @gen_rtx_MEM(i32 %bf.clear, %struct.rtx_def* %call48)
  %28 = load %struct.rtx_def*, %struct.rtx_def** %operand.addr, align 8
  %call50 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call49, %struct.rtx_def* %28)
  %call51 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call50)
  br label %sw.epilog.53

sw.default.52:                                    ; preds = %if.else.23
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 12244, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__FUNCTION__.ix86_force_to_memory, i32 0, i32 0)) #7
  unreachable

sw.epilog.53:                                     ; preds = %sw.bb.47, %sw.bb.24
  %29 = load i32, i32* %mode.addr, align 4
  %30 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %call54 = call %struct.rtx_def* @gen_rtx_MEM(i32 %29, %struct.rtx_def* %30)
  store %struct.rtx_def* %call54, %struct.rtx_def** %result, align 8
  br label %if.end.55

if.end.55:                                        ; preds = %sw.epilog.53, %sw.epilog
  br label %if.end.56

if.end.56:                                        ; preds = %if.end.55, %if.then.4
  %31 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8
  ret %struct.rtx_def* %31
}

; Function Attrs: nounwind uwtable
define void @ix86_free_from_memory(i32 %mode) #1 {
entry:
  %mode.addr = alloca i32, align 4
  %size = alloca i32, align 4
  store i32 %mode, i32* %mode.addr, align 4
  %0 = load i32, i32* @target_flags, align 4
  %and = and i32 %0, 33554432
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* @target_flags, align 4
  %and1 = and i32 %1, 67108864
  %tobool2 = icmp ne i32 %and1, 0
  br i1 %tobool2, label %if.then, label %if.end.18

if.then:                                          ; preds = %lor.lhs.false, %entry
  %2 = load i32, i32* %mode.addr, align 4
  %cmp = icmp eq i32 %2, 5
  br i1 %cmp, label %if.then.6, label %lor.lhs.false.3

lor.lhs.false.3:                                  ; preds = %if.then
  %3 = load i32, i32* @target_flags, align 4
  %and4 = and i32 %3, 33554432
  %tobool5 = icmp ne i32 %and4, 0
  br i1 %tobool5, label %if.then.6, label %if.else

if.then.6:                                        ; preds = %lor.lhs.false.3, %if.then
  store i32 8, i32* %size, align 4
  br label %if.end.12

if.else:                                          ; preds = %lor.lhs.false.3
  %4 = load i32, i32* %mode.addr, align 4
  %cmp7 = icmp eq i32 %4, 3
  br i1 %cmp7, label %land.lhs.true, label %if.else.11

land.lhs.true:                                    ; preds = %if.else
  %5 = load i32, i32* @ix86_cpu, align 4
  %shl = shl i32 1, %5
  %and8 = and i32 8, %shl
  %tobool9 = icmp ne i32 %and8, 0
  br i1 %tobool9, label %if.then.10, label %if.else.11

if.then.10:                                       ; preds = %land.lhs.true
  store i32 2, i32* %size, align 4
  br label %if.end

if.else.11:                                       ; preds = %land.lhs.true, %if.else
  store i32 4, i32* %size, align 4
  br label %if.end

if.end:                                           ; preds = %if.else.11, %if.then.10
  br label %if.end.12

if.end.12:                                        ; preds = %if.end, %if.then.6
  %6 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %7 = load i32, i32* @target_flags, align 4
  %and13 = and i32 %7, 33554432
  %tobool14 = icmp ne i32 %and13, 0
  %cond = select i1 %tobool14, i32 5, i32 4
  %8 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %9 = load i32, i32* %size, align 4
  %conv = sext i32 %9 to i64
  %call = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv)
  %call15 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %cond, %struct.rtx_def* %8, %struct.rtx_def* %call)
  %call16 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %6, %struct.rtx_def* %call15)
  %call17 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call16)
  br label %if.end.18

if.end.18:                                        ; preds = %if.end.12, %lor.lhs.false
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @ix86_preferred_reload_class(%struct.rtx_def* %x, i32 %class) #1 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca %struct.rtx_def*, align 8
  %class.addr = alloca i32, align 4
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  store i32 %class, i32* %class.addr, align 4
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 55
  br i1 %cmp, label %land.lhs.true, label %if.end.27

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %3 = bitcast %struct.rtx_def* %2 to i32*
  %bf.load1 = load i32, i32* %3, align 8
  %bf.lshr = lshr i32 %bf.load1, 16
  %bf.clear2 = and i32 %bf.lshr, 255
  %cmp3 = icmp ne i32 %bf.clear2, 0
  br i1 %cmp3, label %if.then, label %if.end.27

if.then:                                          ; preds = %land.lhs.true
  %4 = load i32, i32* %class.addr, align 4
  %call = call i32 @reg_class_subset_p(i32 %4, i32 16)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then.4, label %if.end

if.then.4:                                        ; preds = %if.then
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then
  %5 = load i32, i32* %class.addr, align 4
  %call5 = call i32 @reg_classes_intersect_p(i32 %5, i32 15)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %land.lhs.true.7, label %if.end.16

land.lhs.true.7:                                  ; preds = %if.end
  %6 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %call8 = call i32 @standard_80387_constant_p(%struct.rtx_def* %6)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %if.then.10, label %if.end.16

if.then.10:                                       ; preds = %land.lhs.true.7
  %7 = load i32, i32* %class.addr, align 4
  %call11 = call i32 @reg_classes_intersect_p(i32 16, i32 %7)
  %tobool12 = icmp ne i32 %call11, 0
  br i1 %tobool12, label %if.then.13, label %if.else

if.then.13:                                       ; preds = %if.then.10
  %8 = load i32, i32* %class.addr, align 4
  %call14 = call i32 @reg_class_subset_p(i32 %8, i32 12)
  %tobool15 = icmp ne i32 %call14, 0
  %cond = select i1 %tobool15, i32 12, i32 15
  store i32 %cond, i32* %retval
  br label %return

if.else:                                          ; preds = %if.then.10
  %9 = load i32, i32* %class.addr, align 4
  store i32 %9, i32* %retval
  br label %return

if.end.16:                                        ; preds = %land.lhs.true.7, %if.end
  %10 = load i32, i32* %class.addr, align 4
  %call17 = call i32 @reg_class_subset_p(i32 %10, i32 12)
  %tobool18 = icmp ne i32 %call17, 0
  br i1 %tobool18, label %if.then.19, label %if.end.20

if.then.19:                                       ; preds = %if.end.16
  store i32 12, i32* %retval
  br label %return

if.end.20:                                        ; preds = %if.end.16
  %11 = load i32, i32* %class.addr, align 4
  %call21 = call i32 @reg_classes_intersect_p(i32 %11, i32 15)
  %tobool22 = icmp ne i32 %call21, 0
  br i1 %tobool22, label %if.then.25, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.20
  %12 = load i32, i32* %class.addr, align 4
  %call23 = call i32 @reg_classes_intersect_p(i32 16, i32 %12)
  %tobool24 = icmp ne i32 %call23, 0
  br i1 %tobool24, label %if.then.25, label %if.end.26

if.then.25:                                       ; preds = %lor.lhs.false, %if.end.20
  store i32 0, i32* %retval
  br label %return

if.end.26:                                        ; preds = %lor.lhs.false
  br label %if.end.27

if.end.27:                                        ; preds = %if.end.26, %land.lhs.true, %entry
  %13 = load i32, i32* %class.addr, align 4
  %call28 = call i32 @reg_classes_intersect_p(i32 17, i32 %13)
  %tobool29 = icmp ne i32 %call28, 0
  br i1 %tobool29, label %land.lhs.true.30, label %if.end.63

land.lhs.true.30:                                 ; preds = %if.end.27
  %14 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %15 = bitcast %struct.rtx_def* %14 to i32*
  %bf.load31 = load i32, i32* %15, align 8
  %bf.clear32 = and i32 %bf.load31, 65535
  %cmp33 = icmp eq i32 %bf.clear32, 67
  br i1 %cmp33, label %if.then.62, label %lor.lhs.false.34

lor.lhs.false.34:                                 ; preds = %land.lhs.true.30
  %16 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %17 = bitcast %struct.rtx_def* %16 to i32*
  %bf.load35 = load i32, i32* %17, align 8
  %bf.clear36 = and i32 %bf.load35, 65535
  %cmp37 = icmp eq i32 %bf.clear36, 68
  br i1 %cmp37, label %if.then.62, label %lor.lhs.false.38

lor.lhs.false.38:                                 ; preds = %lor.lhs.false.34
  %18 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %19 = bitcast %struct.rtx_def* %18 to i32*
  %bf.load39 = load i32, i32* %19, align 8
  %bf.clear40 = and i32 %bf.load39, 65535
  %cmp41 = icmp eq i32 %bf.clear40, 54
  br i1 %cmp41, label %if.then.62, label %lor.lhs.false.42

lor.lhs.false.42:                                 ; preds = %lor.lhs.false.38
  %20 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %21 = bitcast %struct.rtx_def* %20 to i32*
  %bf.load43 = load i32, i32* %21, align 8
  %bf.clear44 = and i32 %bf.load43, 65535
  %cmp45 = icmp eq i32 %bf.clear44, 55
  br i1 %cmp45, label %if.then.62, label %lor.lhs.false.46

lor.lhs.false.46:                                 ; preds = %lor.lhs.false.42
  %22 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %23 = bitcast %struct.rtx_def* %22 to i32*
  %bf.load47 = load i32, i32* %23, align 8
  %bf.clear48 = and i32 %bf.load47, 65535
  %cmp49 = icmp eq i32 %bf.clear48, 58
  br i1 %cmp49, label %if.then.62, label %lor.lhs.false.50

lor.lhs.false.50:                                 ; preds = %lor.lhs.false.46
  %24 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %25 = bitcast %struct.rtx_def* %24 to i32*
  %bf.load51 = load i32, i32* %25, align 8
  %bf.clear52 = and i32 %bf.load51, 65535
  %cmp53 = icmp eq i32 %bf.clear52, 134
  br i1 %cmp53, label %if.then.62, label %lor.lhs.false.54

lor.lhs.false.54:                                 ; preds = %lor.lhs.false.50
  %26 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %27 = bitcast %struct.rtx_def* %26 to i32*
  %bf.load55 = load i32, i32* %27, align 8
  %bf.clear56 = and i32 %bf.load55, 65535
  %cmp57 = icmp eq i32 %bf.clear56, 56
  br i1 %cmp57, label %if.then.62, label %lor.lhs.false.58

lor.lhs.false.58:                                 ; preds = %lor.lhs.false.54
  %28 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %29 = bitcast %struct.rtx_def* %28 to i32*
  %bf.load59 = load i32, i32* %29, align 8
  %bf.clear60 = and i32 %bf.load59, 65535
  %cmp61 = icmp eq i32 %bf.clear60, 140
  br i1 %cmp61, label %if.then.62, label %if.end.63

if.then.62:                                       ; preds = %lor.lhs.false.58, %lor.lhs.false.54, %lor.lhs.false.50, %lor.lhs.false.46, %lor.lhs.false.42, %lor.lhs.false.38, %lor.lhs.false.34, %land.lhs.true.30
  store i32 0, i32* %retval
  br label %return

if.end.63:                                        ; preds = %lor.lhs.false.58, %if.end.27
  %30 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %31 = bitcast %struct.rtx_def* %30 to i32*
  %bf.load64 = load i32, i32* %31, align 8
  %bf.lshr65 = lshr i32 %bf.load64, 16
  %bf.clear66 = and i32 %bf.lshr65, 255
  %cmp67 = icmp eq i32 %bf.clear66, 2
  br i1 %cmp67, label %land.lhs.true.68, label %if.end.72

land.lhs.true.68:                                 ; preds = %if.end.63
  %32 = load i32, i32* %class.addr, align 4
  %call69 = call i32 @reg_class_subset_p(i32 %32, i32 8)
  %tobool70 = icmp ne i32 %call69, 0
  br i1 %tobool70, label %if.end.72, label %if.then.71

if.then.71:                                       ; preds = %land.lhs.true.68
  store i32 8, i32* %retval
  br label %return

if.end.72:                                        ; preds = %land.lhs.true.68, %if.end.63
  %33 = load i32, i32* %class.addr, align 4
  store i32 %33, i32* %retval
  br label %return

return:                                           ; preds = %if.end.72, %if.then.71, %if.then.62, %if.then.25, %if.then.19, %if.else, %if.then.13, %if.then.4
  %34 = load i32, i32* %retval
  ret i32 %34
}

declare i32 @reg_class_subset_p(i32, i32) #0

declare i32 @reg_classes_intersect_p(i32, i32) #0

; Function Attrs: nounwind uwtable
define i32 @ix86_secondary_memory_needed(i32 %class1, i32 %class2, i32 %mode, i32 %strict) #1 {
entry:
  %retval = alloca i32, align 4
  %class1.addr = alloca i32, align 4
  %class2.addr = alloca i32, align 4
  %mode.addr = alloca i32, align 4
  %strict.addr = alloca i32, align 4
  store i32 %class1, i32* %class1.addr, align 4
  store i32 %class2, i32* %class2.addr, align 4
  store i32 %mode, i32* %mode.addr, align 4
  store i32 %strict, i32* %strict.addr, align 4
  %0 = load i32, i32* %class1.addr, align 4
  %call = call i32 @reg_classes_intersect_p(i32 %0, i32 15)
  %1 = load i32, i32* %class1.addr, align 4
  %call1 = call i32 @reg_class_subset_p(i32 %1, i32 15)
  %cmp = icmp ne i32 %call, %call1
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %class2.addr, align 4
  %call2 = call i32 @reg_classes_intersect_p(i32 %2, i32 15)
  %3 = load i32, i32* %class2.addr, align 4
  %call3 = call i32 @reg_class_subset_p(i32 %3, i32 15)
  %cmp4 = icmp ne i32 %call2, %call3
  br i1 %cmp4, label %if.then, label %lor.lhs.false.5

lor.lhs.false.5:                                  ; preds = %lor.lhs.false
  %4 = load i32, i32* %class1.addr, align 4
  %call6 = call i32 @reg_classes_intersect_p(i32 16, i32 %4)
  %5 = load i32, i32* %class1.addr, align 4
  %call7 = call i32 @reg_class_subset_p(i32 %5, i32 16)
  %cmp8 = icmp ne i32 %call6, %call7
  br i1 %cmp8, label %if.then, label %lor.lhs.false.9

lor.lhs.false.9:                                  ; preds = %lor.lhs.false.5
  %6 = load i32, i32* %class2.addr, align 4
  %call10 = call i32 @reg_classes_intersect_p(i32 16, i32 %6)
  %7 = load i32, i32* %class2.addr, align 4
  %call11 = call i32 @reg_class_subset_p(i32 %7, i32 16)
  %cmp12 = icmp ne i32 %call10, %call11
  br i1 %cmp12, label %if.then, label %lor.lhs.false.13

lor.lhs.false.13:                                 ; preds = %lor.lhs.false.9
  %8 = load i32, i32* %class1.addr, align 4
  %call14 = call i32 @reg_classes_intersect_p(i32 17, i32 %8)
  %9 = load i32, i32* %class1.addr, align 4
  %call15 = call i32 @reg_class_subset_p(i32 %9, i32 17)
  %cmp16 = icmp ne i32 %call14, %call15
  br i1 %cmp16, label %if.then, label %lor.lhs.false.17

lor.lhs.false.17:                                 ; preds = %lor.lhs.false.13
  %10 = load i32, i32* %class2.addr, align 4
  %call18 = call i32 @reg_classes_intersect_p(i32 17, i32 %10)
  %11 = load i32, i32* %class2.addr, align 4
  %call19 = call i32 @reg_class_subset_p(i32 %11, i32 17)
  %cmp20 = icmp ne i32 %call18, %call19
  br i1 %cmp20, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false.17, %lor.lhs.false.13, %lor.lhs.false.9, %lor.lhs.false.5, %lor.lhs.false, %entry
  %12 = load i32, i32* %strict.addr, align 4
  %tobool = icmp ne i32 %12, 0
  br i1 %tobool, label %if.then.21, label %if.else

if.then.21:                                       ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 12336, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @__FUNCTION__.ix86_secondary_memory_needed, i32 0, i32 0)) #7
  unreachable

if.else:                                          ; preds = %if.then
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false.17
  %13 = load i32, i32* %class1.addr, align 4
  %call22 = call i32 @reg_class_subset_p(i32 %13, i32 15)
  %14 = load i32, i32* %class2.addr, align 4
  %call23 = call i32 @reg_class_subset_p(i32 %14, i32 15)
  %cmp24 = icmp ne i32 %call22, %call23
  br i1 %cmp24, label %lor.end, label %lor.lhs.false.25

lor.lhs.false.25:                                 ; preds = %if.end
  %15 = load i32, i32* %class1.addr, align 4
  %call26 = call i32 @reg_class_subset_p(i32 %15, i32 16)
  %16 = load i32, i32* %class2.addr, align 4
  %call27 = call i32 @reg_class_subset_p(i32 %16, i32 16)
  %cmp28 = icmp ne i32 %call26, %call27
  br i1 %cmp28, label %land.lhs.true, label %lor.rhs

land.lhs.true:                                    ; preds = %lor.lhs.false.25
  %17 = load i32, i32* %mode.addr, align 4
  %cmp29 = icmp ne i32 %17, 4
  br i1 %cmp29, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.lhs.true, %lor.lhs.false.25
  %18 = load i32, i32* %class1.addr, align 4
  %call30 = call i32 @reg_class_subset_p(i32 %18, i32 17)
  %19 = load i32, i32* %class2.addr, align 4
  %call31 = call i32 @reg_class_subset_p(i32 %19, i32 17)
  %cmp32 = icmp ne i32 %call30, %call31
  br i1 %cmp32, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %lor.rhs
  %20 = load i32, i32* %mode.addr, align 4
  %cmp33 = icmp ne i32 %20, 4
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %21 = phi i1 [ false, %lor.rhs ], [ %cmp33, %land.rhs ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %land.lhs.true, %if.end
  %22 = phi i1 [ true, %land.lhs.true ], [ true, %if.end ], [ %21, %land.end ]
  %lor.ext = zext i1 %22 to i32
  store i32 %lor.ext, i32* %retval
  br label %return

return:                                           ; preds = %lor.end, %if.else
  %23 = load i32, i32* %retval
  ret i32 %23
}

; Function Attrs: nounwind uwtable
define i32 @ix86_register_move_cost(i32 %mode, i32 %class1, i32 %class2) #1 {
entry:
  %retval = alloca i32, align 4
  %mode.addr = alloca i32, align 4
  %class1.addr = alloca i32, align 4
  %class2.addr = alloca i32, align 4
  %add_cost = alloca i32, align 4
  store i32 %mode, i32* %mode.addr, align 4
  store i32 %class1, i32* %class1.addr, align 4
  store i32 %class2, i32* %class2.addr, align 4
  %0 = load i32, i32* %class1.addr, align 4
  %1 = load i32, i32* %class2.addr, align 4
  %2 = load i32, i32* %mode.addr, align 4
  %call = call i32 @ix86_secondary_memory_needed(i32 %0, i32 %1, i32 %2, i32 0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end.61

if.then:                                          ; preds = %entry
  store i32 0, i32* %add_cost, align 4
  %3 = load i32, i32* %class1.addr, align 4
  %call1 = call i32 @reg_classes_intersect_p(i32 %3, i32 12)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %cond.false, label %cond.true

cond.true:                                        ; preds = %if.then
  %4 = load i32, i32* %mode.addr, align 4
  %idxprom = sext i32 %4 to i64
  %arrayidx = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom
  %5 = load i32, i32* %arrayidx, align 4
  %cmp = icmp eq i32 %5, 5
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %cond.true
  %6 = load i32, i32* %mode.addr, align 4
  %idxprom3 = sext i32 %6 to i64
  %arrayidx4 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom3
  %7 = load i32, i32* %arrayidx4, align 4
  %cmp5 = icmp eq i32 %7, 6
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %cond.true
  %8 = phi i1 [ true, %cond.true ], [ %cmp5, %lor.rhs ]
  %cond = select i1 %8, i32 2, i32 1
  br label %cond.end.17

cond.false:                                       ; preds = %if.then
  %9 = load i32, i32* %mode.addr, align 4
  %cmp6 = icmp eq i32 %9, 18
  br i1 %cmp6, label %cond.true.7, label %cond.false.8

cond.true.7:                                      ; preds = %cond.false
  br label %cond.end

cond.false.8:                                     ; preds = %cond.false
  %10 = load i32, i32* %mode.addr, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false.8, %cond.true.7
  %cond9 = phi i32 [ 17, %cond.true.7 ], [ %10, %cond.false.8 ]
  %idxprom10 = sext i32 %cond9 to i64
  %arrayidx11 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom10
  %11 = load i8, i8* %arrayidx11, align 1
  %conv = zext i8 %11 to i32
  %12 = load i32, i32* @target_flags, align 4
  %and = and i32 %12, 33554432
  %tobool12 = icmp ne i32 %and, 0
  %cond13 = select i1 %tobool12, i32 8, i32 4
  %add = add nsw i32 %conv, %cond13
  %sub = sub nsw i32 %add, 1
  %13 = load i32, i32* @target_flags, align 4
  %and14 = and i32 %13, 33554432
  %tobool15 = icmp ne i32 %and14, 0
  %cond16 = select i1 %tobool15, i32 8, i32 4
  %div = sdiv i32 %sub, %cond16
  br label %cond.end.17

cond.end.17:                                      ; preds = %cond.end, %lor.end
  %cond18 = phi i32 [ %cond, %lor.end ], [ %div, %cond.end ]
  %14 = load i32, i32* %class2.addr, align 4
  %call19 = call i32 @reg_classes_intersect_p(i32 %14, i32 12)
  %tobool20 = icmp ne i32 %call19, 0
  br i1 %tobool20, label %cond.false.33, label %cond.true.21

cond.true.21:                                     ; preds = %cond.end.17
  %15 = load i32, i32* %mode.addr, align 4
  %idxprom22 = sext i32 %15 to i64
  %arrayidx23 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom22
  %16 = load i32, i32* %arrayidx23, align 4
  %cmp24 = icmp eq i32 %16, 5
  br i1 %cmp24, label %lor.end.31, label %lor.rhs.26

lor.rhs.26:                                       ; preds = %cond.true.21
  %17 = load i32, i32* %mode.addr, align 4
  %idxprom27 = sext i32 %17 to i64
  %arrayidx28 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom27
  %18 = load i32, i32* %arrayidx28, align 4
  %cmp29 = icmp eq i32 %18, 6
  br label %lor.end.31

lor.end.31:                                       ; preds = %lor.rhs.26, %cond.true.21
  %19 = phi i1 [ true, %cond.true.21 ], [ %cmp29, %lor.rhs.26 ]
  %cond32 = select i1 %19, i32 2, i32 1
  br label %cond.end.52

cond.false.33:                                    ; preds = %cond.end.17
  %20 = load i32, i32* %mode.addr, align 4
  %cmp34 = icmp eq i32 %20, 18
  br i1 %cmp34, label %cond.true.36, label %cond.false.37

cond.true.36:                                     ; preds = %cond.false.33
  br label %cond.end.38

cond.false.37:                                    ; preds = %cond.false.33
  %21 = load i32, i32* %mode.addr, align 4
  br label %cond.end.38

cond.end.38:                                      ; preds = %cond.false.37, %cond.true.36
  %cond39 = phi i32 [ 17, %cond.true.36 ], [ %21, %cond.false.37 ]
  %idxprom40 = sext i32 %cond39 to i64
  %arrayidx41 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom40
  %22 = load i8, i8* %arrayidx41, align 1
  %conv42 = zext i8 %22 to i32
  %23 = load i32, i32* @target_flags, align 4
  %and43 = and i32 %23, 33554432
  %tobool44 = icmp ne i32 %and43, 0
  %cond45 = select i1 %tobool44, i32 8, i32 4
  %add46 = add nsw i32 %conv42, %cond45
  %sub47 = sub nsw i32 %add46, 1
  %24 = load i32, i32* @target_flags, align 4
  %and48 = and i32 %24, 33554432
  %tobool49 = icmp ne i32 %and48, 0
  %cond50 = select i1 %tobool49, i32 8, i32 4
  %div51 = sdiv i32 %sub47, %cond50
  br label %cond.end.52

cond.end.52:                                      ; preds = %cond.end.38, %lor.end.31
  %cond53 = phi i32 [ %cond32, %lor.end.31 ], [ %div51, %cond.end.38 ]
  %cmp54 = icmp sgt i32 %cond18, %cond53
  br i1 %cmp54, label %if.then.56, label %if.end

if.then.56:                                       ; preds = %cond.end.52
  store i32 20, i32* %add_cost, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.56, %cond.end.52
  %25 = load i32, i32* %mode.addr, align 4
  %26 = load i32, i32* %class1.addr, align 4
  %call57 = call i32 @ix86_memory_move_cost(i32 %25, i32 %26, i32 0)
  %27 = load i32, i32* %mode.addr, align 4
  %28 = load i32, i32* %class2.addr, align 4
  %call58 = call i32 @ix86_memory_move_cost(i32 %27, i32 %28, i32 1)
  %add59 = add nsw i32 %call57, %call58
  %29 = load i32, i32* %add_cost, align 4
  %add60 = add nsw i32 %add59, %29
  store i32 %add60, i32* %retval
  br label %return

if.end.61:                                        ; preds = %entry
  %30 = load i32, i32* %class1.addr, align 4
  %call62 = call i32 @reg_class_subset_p(i32 %30, i32 17)
  %31 = load i32, i32* %class2.addr, align 4
  %call63 = call i32 @reg_class_subset_p(i32 %31, i32 17)
  %cmp64 = icmp ne i32 %call62, %call63
  br i1 %cmp64, label %if.then.70, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.61
  %32 = load i32, i32* %class1.addr, align 4
  %call66 = call i32 @reg_class_subset_p(i32 %32, i32 16)
  %33 = load i32, i32* %class2.addr, align 4
  %call67 = call i32 @reg_class_subset_p(i32 %33, i32 16)
  %cmp68 = icmp ne i32 %call66, %call67
  br i1 %cmp68, label %if.then.70, label %if.end.71

if.then.70:                                       ; preds = %lor.lhs.false, %if.end.61
  %34 = load %struct.processor_costs*, %struct.processor_costs** @ix86_cost, align 8
  %mmxsse_to_integer = getelementptr inbounds %struct.processor_costs, %struct.processor_costs* %34, i32 0, i32 23
  %35 = load i32, i32* %mmxsse_to_integer, align 4
  store i32 %35, i32* %retval
  br label %return

if.end.71:                                        ; preds = %lor.lhs.false
  %36 = load i32, i32* %class1.addr, align 4
  %call72 = call i32 @reg_classes_intersect_p(i32 %36, i32 15)
  %tobool73 = icmp ne i32 %call72, 0
  br i1 %tobool73, label %if.then.74, label %if.end.75

if.then.74:                                       ; preds = %if.end.71
  %37 = load %struct.processor_costs*, %struct.processor_costs** @ix86_cost, align 8
  %fp_move = getelementptr inbounds %struct.processor_costs, %struct.processor_costs* %37, i32 0, i32 14
  %38 = load i32, i32* %fp_move, align 4
  store i32 %38, i32* %retval
  br label %return

if.end.75:                                        ; preds = %if.end.71
  %39 = load i32, i32* %class1.addr, align 4
  %call76 = call i32 @reg_classes_intersect_p(i32 16, i32 %39)
  %tobool77 = icmp ne i32 %call76, 0
  br i1 %tobool77, label %if.then.78, label %if.end.79

if.then.78:                                       ; preds = %if.end.75
  %40 = load %struct.processor_costs*, %struct.processor_costs** @ix86_cost, align 8
  %sse_move = getelementptr inbounds %struct.processor_costs, %struct.processor_costs* %40, i32 0, i32 20
  %41 = load i32, i32* %sse_move, align 4
  store i32 %41, i32* %retval
  br label %return

if.end.79:                                        ; preds = %if.end.75
  %42 = load i32, i32* %class1.addr, align 4
  %call80 = call i32 @reg_classes_intersect_p(i32 17, i32 %42)
  %tobool81 = icmp ne i32 %call80, 0
  br i1 %tobool81, label %if.then.82, label %if.end.83

if.then.82:                                       ; preds = %if.end.79
  %43 = load %struct.processor_costs*, %struct.processor_costs** @ix86_cost, align 8
  %mmx_move = getelementptr inbounds %struct.processor_costs, %struct.processor_costs* %43, i32 0, i32 17
  %44 = load i32, i32* %mmx_move, align 4
  store i32 %44, i32* %retval
  br label %return

if.end.83:                                        ; preds = %if.end.79
  store i32 2, i32* %retval
  br label %return

return:                                           ; preds = %if.end.83, %if.then.82, %if.then.78, %if.then.74, %if.then.70, %if.end
  %45 = load i32, i32* %retval
  ret i32 %45
}

; Function Attrs: nounwind uwtable
define i32 @ix86_memory_move_cost(i32 %mode, i32 %class, i32 %in) #1 {
entry:
  %retval = alloca i32, align 4
  %mode.addr = alloca i32, align 4
  %class.addr = alloca i32, align 4
  %in.addr = alloca i32, align 4
  %index = alloca i32, align 4
  %index9 = alloca i32, align 4
  %index30 = alloca i32, align 4
  store i32 %mode, i32* %mode.addr, align 4
  store i32 %class, i32* %class.addr, align 4
  store i32 %in, i32* %in.addr, align 4
  %0 = load i32, i32* %class.addr, align 4
  %call = call i32 @reg_class_subset_p(i32 %0, i32 15)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %mode.addr, align 4
  switch i32 %1, label %sw.default [
    i32 15, label %sw.bb
    i32 16, label %sw.bb.1
    i32 17, label %sw.bb.2
    i32 18, label %sw.bb.2
  ]

sw.bb:                                            ; preds = %if.then
  store i32 0, i32* %index, align 4
  br label %sw.epilog

sw.bb.1:                                          ; preds = %if.then
  store i32 1, i32* %index, align 4
  br label %sw.epilog

sw.bb.2:                                          ; preds = %if.then, %if.then
  store i32 2, i32* %index, align 4
  br label %sw.epilog

sw.default:                                       ; preds = %if.then
  store i32 100, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %sw.bb.2, %sw.bb.1, %sw.bb
  %2 = load i32, i32* %in.addr, align 4
  %tobool3 = icmp ne i32 %2, 0
  br i1 %tobool3, label %cond.true, label %cond.false

cond.true:                                        ; preds = %sw.epilog
  %3 = load i32, i32* %index, align 4
  %idxprom = sext i32 %3 to i64
  %4 = load %struct.processor_costs*, %struct.processor_costs** @ix86_cost, align 8
  %fp_load = getelementptr inbounds %struct.processor_costs, %struct.processor_costs* %4, i32 0, i32 15
  %arrayidx = getelementptr inbounds [3 x i32], [3 x i32]* %fp_load, i32 0, i64 %idxprom
  %5 = load i32, i32* %arrayidx, align 4
  br label %cond.end

cond.false:                                       ; preds = %sw.epilog
  %6 = load i32, i32* %index, align 4
  %idxprom4 = sext i32 %6 to i64
  %7 = load %struct.processor_costs*, %struct.processor_costs** @ix86_cost, align 8
  %fp_store = getelementptr inbounds %struct.processor_costs, %struct.processor_costs* %7, i32 0, i32 16
  %arrayidx5 = getelementptr inbounds [3 x i32], [3 x i32]* %fp_store, i32 0, i64 %idxprom4
  %8 = load i32, i32* %arrayidx5, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %5, %cond.true ], [ %8, %cond.false ]
  store i32 %cond, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %9 = load i32, i32* %class.addr, align 4
  %call6 = call i32 @reg_class_subset_p(i32 %9, i32 16)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.then.8, label %if.end.26

if.then.8:                                        ; preds = %if.end
  %10 = load i32, i32* %mode.addr, align 4
  %idxprom10 = sext i32 %10 to i64
  %arrayidx11 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom10
  %11 = load i8, i8* %arrayidx11, align 1
  %conv = zext i8 %11 to i32
  switch i32 %conv, label %sw.default.15 [
    i32 4, label %sw.bb.12
    i32 8, label %sw.bb.13
    i32 16, label %sw.bb.14
  ]

sw.bb.12:                                         ; preds = %if.then.8
  store i32 0, i32* %index9, align 4
  br label %sw.epilog.16

sw.bb.13:                                         ; preds = %if.then.8
  store i32 1, i32* %index9, align 4
  br label %sw.epilog.16

sw.bb.14:                                         ; preds = %if.then.8
  store i32 2, i32* %index9, align 4
  br label %sw.epilog.16

sw.default.15:                                    ; preds = %if.then.8
  store i32 100, i32* %retval
  br label %return

sw.epilog.16:                                     ; preds = %sw.bb.14, %sw.bb.13, %sw.bb.12
  %12 = load i32, i32* %in.addr, align 4
  %tobool17 = icmp ne i32 %12, 0
  br i1 %tobool17, label %cond.true.18, label %cond.false.21

cond.true.18:                                     ; preds = %sw.epilog.16
  %13 = load i32, i32* %index9, align 4
  %idxprom19 = sext i32 %13 to i64
  %14 = load %struct.processor_costs*, %struct.processor_costs** @ix86_cost, align 8
  %sse_load = getelementptr inbounds %struct.processor_costs, %struct.processor_costs* %14, i32 0, i32 21
  %arrayidx20 = getelementptr inbounds [3 x i32], [3 x i32]* %sse_load, i32 0, i64 %idxprom19
  %15 = load i32, i32* %arrayidx20, align 4
  br label %cond.end.24

cond.false.21:                                    ; preds = %sw.epilog.16
  %16 = load i32, i32* %index9, align 4
  %idxprom22 = sext i32 %16 to i64
  %17 = load %struct.processor_costs*, %struct.processor_costs** @ix86_cost, align 8
  %sse_store = getelementptr inbounds %struct.processor_costs, %struct.processor_costs* %17, i32 0, i32 22
  %arrayidx23 = getelementptr inbounds [3 x i32], [3 x i32]* %sse_store, i32 0, i64 %idxprom22
  %18 = load i32, i32* %arrayidx23, align 4
  br label %cond.end.24

cond.end.24:                                      ; preds = %cond.false.21, %cond.true.18
  %cond25 = phi i32 [ %15, %cond.true.18 ], [ %18, %cond.false.21 ]
  store i32 %cond25, i32* %retval
  br label %return

if.end.26:                                        ; preds = %if.end
  %19 = load i32, i32* %class.addr, align 4
  %call27 = call i32 @reg_class_subset_p(i32 %19, i32 17)
  %tobool28 = icmp ne i32 %call27, 0
  br i1 %tobool28, label %if.then.29, label %if.end.47

if.then.29:                                       ; preds = %if.end.26
  %20 = load i32, i32* %mode.addr, align 4
  %idxprom31 = sext i32 %20 to i64
  %arrayidx32 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom31
  %21 = load i8, i8* %arrayidx32, align 1
  %conv33 = zext i8 %21 to i32
  switch i32 %conv33, label %sw.default.36 [
    i32 4, label %sw.bb.34
    i32 8, label %sw.bb.35
  ]

sw.bb.34:                                         ; preds = %if.then.29
  store i32 0, i32* %index30, align 4
  br label %sw.epilog.37

sw.bb.35:                                         ; preds = %if.then.29
  store i32 1, i32* %index30, align 4
  br label %sw.epilog.37

sw.default.36:                                    ; preds = %if.then.29
  store i32 100, i32* %retval
  br label %return

sw.epilog.37:                                     ; preds = %sw.bb.35, %sw.bb.34
  %22 = load i32, i32* %in.addr, align 4
  %tobool38 = icmp ne i32 %22, 0
  br i1 %tobool38, label %cond.true.39, label %cond.false.42

cond.true.39:                                     ; preds = %sw.epilog.37
  %23 = load i32, i32* %index30, align 4
  %idxprom40 = sext i32 %23 to i64
  %24 = load %struct.processor_costs*, %struct.processor_costs** @ix86_cost, align 8
  %mmx_load = getelementptr inbounds %struct.processor_costs, %struct.processor_costs* %24, i32 0, i32 18
  %arrayidx41 = getelementptr inbounds [2 x i32], [2 x i32]* %mmx_load, i32 0, i64 %idxprom40
  %25 = load i32, i32* %arrayidx41, align 4
  br label %cond.end.45

cond.false.42:                                    ; preds = %sw.epilog.37
  %26 = load i32, i32* %index30, align 4
  %idxprom43 = sext i32 %26 to i64
  %27 = load %struct.processor_costs*, %struct.processor_costs** @ix86_cost, align 8
  %mmx_store = getelementptr inbounds %struct.processor_costs, %struct.processor_costs* %27, i32 0, i32 19
  %arrayidx44 = getelementptr inbounds [2 x i32], [2 x i32]* %mmx_store, i32 0, i64 %idxprom43
  %28 = load i32, i32* %arrayidx44, align 4
  br label %cond.end.45

cond.end.45:                                      ; preds = %cond.false.42, %cond.true.39
  %cond46 = phi i32 [ %25, %cond.true.39 ], [ %28, %cond.false.42 ]
  store i32 %cond46, i32* %retval
  br label %return

if.end.47:                                        ; preds = %if.end.26
  %29 = load i32, i32* %mode.addr, align 4
  %idxprom48 = sext i32 %29 to i64
  %arrayidx49 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom48
  %30 = load i8, i8* %arrayidx49, align 1
  %conv50 = zext i8 %30 to i32
  switch i32 %conv50, label %sw.default.80 [
    i32 1, label %sw.bb.51
    i32 2, label %sw.bb.70
  ]

sw.bb.51:                                         ; preds = %if.end.47
  %31 = load i32, i32* %in.addr, align 4
  %tobool52 = icmp ne i32 %31, 0
  br i1 %tobool52, label %if.then.53, label %if.else

if.then.53:                                       ; preds = %sw.bb.51
  %32 = load i32, i32* %class.addr, align 4
  %call54 = call i32 @reg_class_subset_p(i32 %32, i32 8)
  %tobool55 = icmp ne i32 %call54, 0
  br i1 %tobool55, label %cond.true.56, label %cond.false.58

cond.true.56:                                     ; preds = %if.then.53
  %33 = load %struct.processor_costs*, %struct.processor_costs** @ix86_cost, align 8
  %int_load = getelementptr inbounds %struct.processor_costs, %struct.processor_costs* %33, i32 0, i32 12
  %arrayidx57 = getelementptr inbounds [3 x i32], [3 x i32]* %int_load, i32 0, i64 0
  %34 = load i32, i32* %arrayidx57, align 4
  br label %cond.end.59

cond.false.58:                                    ; preds = %if.then.53
  %35 = load %struct.processor_costs*, %struct.processor_costs** @ix86_cost, align 8
  %movzbl_load = getelementptr inbounds %struct.processor_costs, %struct.processor_costs* %35, i32 0, i32 11
  %36 = load i32, i32* %movzbl_load, align 4
  br label %cond.end.59

cond.end.59:                                      ; preds = %cond.false.58, %cond.true.56
  %cond60 = phi i32 [ %34, %cond.true.56 ], [ %36, %cond.false.58 ]
  store i32 %cond60, i32* %retval
  br label %return

if.else:                                          ; preds = %sw.bb.51
  %37 = load i32, i32* %class.addr, align 4
  %call61 = call i32 @reg_class_subset_p(i32 %37, i32 8)
  %tobool62 = icmp ne i32 %call61, 0
  br i1 %tobool62, label %cond.true.63, label %cond.false.65

cond.true.63:                                     ; preds = %if.else
  %38 = load %struct.processor_costs*, %struct.processor_costs** @ix86_cost, align 8
  %int_store = getelementptr inbounds %struct.processor_costs, %struct.processor_costs* %38, i32 0, i32 13
  %arrayidx64 = getelementptr inbounds [3 x i32], [3 x i32]* %int_store, i32 0, i64 0
  %39 = load i32, i32* %arrayidx64, align 4
  br label %cond.end.68

cond.false.65:                                    ; preds = %if.else
  %40 = load %struct.processor_costs*, %struct.processor_costs** @ix86_cost, align 8
  %int_store66 = getelementptr inbounds %struct.processor_costs, %struct.processor_costs* %40, i32 0, i32 13
  %arrayidx67 = getelementptr inbounds [3 x i32], [3 x i32]* %int_store66, i32 0, i64 0
  %41 = load i32, i32* %arrayidx67, align 4
  %add = add nsw i32 %41, 4
  br label %cond.end.68

cond.end.68:                                      ; preds = %cond.false.65, %cond.true.63
  %cond69 = phi i32 [ %39, %cond.true.63 ], [ %add, %cond.false.65 ]
  store i32 %cond69, i32* %retval
  br label %return

sw.bb.70:                                         ; preds = %if.end.47
  %42 = load i32, i32* %in.addr, align 4
  %tobool71 = icmp ne i32 %42, 0
  br i1 %tobool71, label %cond.true.72, label %cond.false.75

cond.true.72:                                     ; preds = %sw.bb.70
  %43 = load %struct.processor_costs*, %struct.processor_costs** @ix86_cost, align 8
  %int_load73 = getelementptr inbounds %struct.processor_costs, %struct.processor_costs* %43, i32 0, i32 12
  %arrayidx74 = getelementptr inbounds [3 x i32], [3 x i32]* %int_load73, i32 0, i64 1
  %44 = load i32, i32* %arrayidx74, align 4
  br label %cond.end.78

cond.false.75:                                    ; preds = %sw.bb.70
  %45 = load %struct.processor_costs*, %struct.processor_costs** @ix86_cost, align 8
  %int_store76 = getelementptr inbounds %struct.processor_costs, %struct.processor_costs* %45, i32 0, i32 13
  %arrayidx77 = getelementptr inbounds [3 x i32], [3 x i32]* %int_store76, i32 0, i64 1
  %46 = load i32, i32* %arrayidx77, align 4
  br label %cond.end.78

cond.end.78:                                      ; preds = %cond.false.75, %cond.true.72
  %cond79 = phi i32 [ %44, %cond.true.72 ], [ %46, %cond.false.75 ]
  store i32 %cond79, i32* %retval
  br label %return

sw.default.80:                                    ; preds = %if.end.47
  %47 = load i32, i32* %mode.addr, align 4
  %cmp = icmp eq i32 %47, 18
  br i1 %cmp, label %if.then.82, label %if.end.83

if.then.82:                                       ; preds = %sw.default.80
  store i32 17, i32* %mode.addr, align 4
  br label %if.end.83

if.end.83:                                        ; preds = %if.then.82, %sw.default.80
  %48 = load i32, i32* %in.addr, align 4
  %tobool84 = icmp ne i32 %48, 0
  br i1 %tobool84, label %cond.true.85, label %cond.false.88

cond.true.85:                                     ; preds = %if.end.83
  %49 = load %struct.processor_costs*, %struct.processor_costs** @ix86_cost, align 8
  %int_load86 = getelementptr inbounds %struct.processor_costs, %struct.processor_costs* %49, i32 0, i32 12
  %arrayidx87 = getelementptr inbounds [3 x i32], [3 x i32]* %int_load86, i32 0, i64 2
  %50 = load i32, i32* %arrayidx87, align 4
  br label %cond.end.91

cond.false.88:                                    ; preds = %if.end.83
  %51 = load %struct.processor_costs*, %struct.processor_costs** @ix86_cost, align 8
  %int_store89 = getelementptr inbounds %struct.processor_costs, %struct.processor_costs* %51, i32 0, i32 13
  %arrayidx90 = getelementptr inbounds [3 x i32], [3 x i32]* %int_store89, i32 0, i64 2
  %52 = load i32, i32* %arrayidx90, align 4
  br label %cond.end.91

cond.end.91:                                      ; preds = %cond.false.88, %cond.true.85
  %cond92 = phi i32 [ %50, %cond.true.85 ], [ %52, %cond.false.88 ]
  %53 = load i32, i32* %mode.addr, align 4
  %idxprom93 = sext i32 %53 to i64
  %arrayidx94 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom93
  %54 = load i8, i8* %arrayidx94, align 1
  %conv95 = zext i8 %54 to i32
  %mul = mul nsw i32 %cond92, %conv95
  %div = sdiv i32 %mul, 4
  store i32 %div, i32* %retval
  br label %return

return:                                           ; preds = %cond.end.91, %cond.end.78, %cond.end.68, %cond.end.59, %cond.end.45, %sw.default.36, %cond.end.24, %sw.default.15, %cond.end, %sw.default
  %55 = load i32, i32* %retval
  ret i32 %55
}

; Function Attrs: nounwind uwtable
define i32 @ix86_hard_regno_mode_ok(i32 %regno, i32 %mode) #1 {
entry:
  %retval = alloca i32, align 4
  %regno.addr = alloca i32, align 4
  %mode.addr = alloca i32, align 4
  store i32 %regno, i32* %regno.addr, align 4
  store i32 %mode, i32* %mode.addr, align 4
  %0 = load i32, i32* %regno.addr, align 4
  %cmp = icmp eq i32 %0, 17
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %regno.addr, align 4
  %cmp1 = icmp eq i32 %1, 18
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %2 = load i32, i32* %mode.addr, align 4
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom
  %3 = load i32, i32* %arrayidx, align 4
  %cmp2 = icmp eq i32 %3, 4
  %conv = zext i1 %cmp2 to i32
  store i32 %conv, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %4 = load i32, i32* %mode.addr, align 4
  %idxprom3 = sext i32 %4 to i64
  %arrayidx4 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom3
  %5 = load i32, i32* %arrayidx4, align 4
  %cmp5 = icmp eq i32 %5, 4
  br i1 %cmp5, label %if.then.17, label %lor.lhs.false.7

lor.lhs.false.7:                                  ; preds = %if.end
  %6 = load i32, i32* %mode.addr, align 4
  %idxprom8 = sext i32 %6 to i64
  %arrayidx9 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom8
  %7 = load i32, i32* %arrayidx9, align 4
  %cmp10 = icmp eq i32 %7, 0
  br i1 %cmp10, label %if.then.17, label %lor.lhs.false.12

lor.lhs.false.12:                                 ; preds = %lor.lhs.false.7
  %8 = load i32, i32* %mode.addr, align 4
  %idxprom13 = sext i32 %8 to i64
  %arrayidx14 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom13
  %9 = load i32, i32* %arrayidx14, align 4
  %cmp15 = icmp eq i32 %9, 3
  br i1 %cmp15, label %if.then.17, label %if.end.18

if.then.17:                                       ; preds = %lor.lhs.false.12, %lor.lhs.false.7, %if.end
  store i32 0, i32* %retval
  br label %return

if.end.18:                                        ; preds = %lor.lhs.false.12
  %10 = load i32, i32* %regno.addr, align 4
  %cmp19 = icmp sge i32 %10, 8
  br i1 %cmp19, label %land.lhs.true, label %if.end.49

land.lhs.true:                                    ; preds = %if.end.18
  %11 = load i32, i32* %regno.addr, align 4
  %cmp21 = icmp sle i32 %11, 15
  br i1 %cmp21, label %if.then.23, label %if.end.49

if.then.23:                                       ; preds = %land.lhs.true
  %12 = load i32, i32* %mode.addr, align 4
  %cmp24 = icmp eq i32 %12, 15
  br i1 %cmp24, label %lor.end, label %lor.lhs.false.26

lor.lhs.false.26:                                 ; preds = %if.then.23
  %13 = load i32, i32* %mode.addr, align 4
  %cmp27 = icmp eq i32 %13, 16
  br i1 %cmp27, label %lor.end, label %lor.lhs.false.29

lor.lhs.false.29:                                 ; preds = %lor.lhs.false.26
  %14 = load i32, i32* %mode.addr, align 4
  %cmp30 = icmp eq i32 %14, 18
  br i1 %cmp30, label %lor.end, label %lor.lhs.false.32

lor.lhs.false.32:                                 ; preds = %lor.lhs.false.29
  %15 = load i32, i32* @target_flags, align 4
  %and = and i32 %15, 33554432
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %lor.lhs.false.36, label %land.lhs.true.33

land.lhs.true.33:                                 ; preds = %lor.lhs.false.32
  %16 = load i32, i32* %mode.addr, align 4
  %cmp34 = icmp eq i32 %16, 17
  br i1 %cmp34, label %lor.end, label %lor.lhs.false.36

lor.lhs.false.36:                                 ; preds = %land.lhs.true.33, %lor.lhs.false.32
  %17 = load i32, i32* %mode.addr, align 4
  %cmp37 = icmp eq i32 %17, 21
  br i1 %cmp37, label %lor.end, label %lor.lhs.false.39

lor.lhs.false.39:                                 ; preds = %lor.lhs.false.36
  %18 = load i32, i32* %mode.addr, align 4
  %cmp40 = icmp eq i32 %18, 22
  br i1 %cmp40, label %lor.end, label %lor.lhs.false.42

lor.lhs.false.42:                                 ; preds = %lor.lhs.false.39
  %19 = load i32, i32* %mode.addr, align 4
  %cmp43 = icmp eq i32 %19, 24
  br i1 %cmp43, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false.42
  %20 = load i32, i32* @target_flags, align 4
  %and45 = and i32 %20, 33554432
  %tobool46 = icmp ne i32 %and45, 0
  br i1 %tobool46, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %lor.rhs
  %21 = load i32, i32* %mode.addr, align 4
  %cmp47 = icmp eq i32 %21, 23
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %22 = phi i1 [ false, %lor.rhs ], [ %cmp47, %land.rhs ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %lor.lhs.false.42, %lor.lhs.false.39, %lor.lhs.false.36, %land.lhs.true.33, %lor.lhs.false.29, %lor.lhs.false.26, %if.then.23
  %23 = phi i1 [ true, %lor.lhs.false.42 ], [ true, %lor.lhs.false.39 ], [ true, %lor.lhs.false.36 ], [ true, %land.lhs.true.33 ], [ true, %lor.lhs.false.29 ], [ true, %lor.lhs.false.26 ], [ true, %if.then.23 ], [ %22, %land.end ]
  %lor.ext = zext i1 %23 to i32
  store i32 %lor.ext, i32* %retval
  br label %return

if.end.49:                                        ; preds = %land.lhs.true, %if.end.18
  %24 = load i32, i32* %regno.addr, align 4
  %cmp50 = icmp sge i32 %24, 21
  br i1 %cmp50, label %land.lhs.true.52, label %lor.lhs.false.55

land.lhs.true.52:                                 ; preds = %if.end.49
  %25 = load i32, i32* %regno.addr, align 4
  %cmp53 = icmp sle i32 %25, 28
  br i1 %cmp53, label %if.then.61, label %lor.lhs.false.55

lor.lhs.false.55:                                 ; preds = %land.lhs.true.52, %if.end.49
  %26 = load i32, i32* %regno.addr, align 4
  %cmp56 = icmp sge i32 %26, 45
  br i1 %cmp56, label %land.lhs.true.58, label %if.end.102

land.lhs.true.58:                                 ; preds = %lor.lhs.false.55
  %27 = load i32, i32* %regno.addr, align 4
  %cmp59 = icmp sle i32 %27, 52
  br i1 %cmp59, label %if.then.61, label %if.end.102

if.then.61:                                       ; preds = %land.lhs.true.58, %land.lhs.true.52
  %28 = load i32, i32* %mode.addr, align 4
  %cmp62 = icmp eq i32 %28, 6
  br i1 %cmp62, label %lor.end.100, label %lor.lhs.false.64

lor.lhs.false.64:                                 ; preds = %if.then.61
  %29 = load i32, i32* %mode.addr, align 4
  %cmp65 = icmp eq i32 %29, 46
  br i1 %cmp65, label %lor.end.100, label %lor.lhs.false.67

lor.lhs.false.67:                                 ; preds = %lor.lhs.false.64
  %30 = load i32, i32* %mode.addr, align 4
  %cmp68 = icmp eq i32 %30, 37
  br i1 %cmp68, label %lor.end.100, label %lor.lhs.false.70

lor.lhs.false.70:                                 ; preds = %lor.lhs.false.67
  %31 = load i32, i32* %mode.addr, align 4
  %cmp71 = icmp eq i32 %31, 15
  br i1 %cmp71, label %lor.end.100, label %lor.rhs.73

lor.rhs.73:                                       ; preds = %lor.lhs.false.70
  %32 = load i32, i32* @target_flags, align 4
  %and74 = and i32 %32, 262144
  %cmp75 = icmp ne i32 %and74, 0
  br i1 %cmp75, label %land.rhs.77, label %land.end.99

land.rhs.77:                                      ; preds = %lor.rhs.73
  %33 = load i32, i32* %mode.addr, align 4
  %cmp78 = icmp eq i32 %33, 16
  br i1 %cmp78, label %lor.end.97, label %lor.rhs.80

lor.rhs.80:                                       ; preds = %land.rhs.77
  %34 = load i32, i32* %mode.addr, align 4
  %cmp81 = icmp eq i32 %34, 5
  br i1 %cmp81, label %lor.end.95, label %lor.lhs.false.83

lor.lhs.false.83:                                 ; preds = %lor.rhs.80
  %35 = load i32, i32* %mode.addr, align 4
  %cmp84 = icmp eq i32 %35, 39
  br i1 %cmp84, label %lor.end.95, label %lor.lhs.false.86

lor.lhs.false.86:                                 ; preds = %lor.lhs.false.83
  %36 = load i32, i32* %mode.addr, align 4
  %cmp87 = icmp eq i32 %36, 36
  br i1 %cmp87, label %lor.end.95, label %lor.lhs.false.89

lor.lhs.false.89:                                 ; preds = %lor.lhs.false.86
  %37 = load i32, i32* %mode.addr, align 4
  %cmp90 = icmp eq i32 %37, 33
  br i1 %cmp90, label %lor.end.95, label %lor.rhs.92

lor.rhs.92:                                       ; preds = %lor.lhs.false.89
  %38 = load i32, i32* %mode.addr, align 4
  %cmp93 = icmp eq i32 %38, 4
  br label %lor.end.95

lor.end.95:                                       ; preds = %lor.rhs.92, %lor.lhs.false.89, %lor.lhs.false.86, %lor.lhs.false.83, %lor.rhs.80
  %39 = phi i1 [ true, %lor.lhs.false.89 ], [ true, %lor.lhs.false.86 ], [ true, %lor.lhs.false.83 ], [ true, %lor.rhs.80 ], [ %cmp93, %lor.rhs.92 ]
  br label %lor.end.97

lor.end.97:                                       ; preds = %lor.end.95, %land.rhs.77
  %40 = phi i1 [ true, %land.rhs.77 ], [ %39, %lor.end.95 ]
  br label %land.end.99

land.end.99:                                      ; preds = %lor.end.97, %lor.rhs.73
  %41 = phi i1 [ false, %lor.rhs.73 ], [ %40, %lor.end.97 ]
  br label %lor.end.100

lor.end.100:                                      ; preds = %land.end.99, %lor.lhs.false.70, %lor.lhs.false.67, %lor.lhs.false.64, %if.then.61
  %42 = phi i1 [ true, %lor.lhs.false.70 ], [ true, %lor.lhs.false.67 ], [ true, %lor.lhs.false.64 ], [ true, %if.then.61 ], [ %41, %land.end.99 ]
  %lor.ext101 = zext i1 %42 to i32
  store i32 %lor.ext101, i32* %retval
  br label %return

if.end.102:                                       ; preds = %land.lhs.true.58, %lor.lhs.false.55
  %43 = load i32, i32* %regno.addr, align 4
  %cmp103 = icmp sge i32 %43, 29
  br i1 %cmp103, label %land.lhs.true.105, label %if.end.133

land.lhs.true.105:                                ; preds = %if.end.102
  %44 = load i32, i32* %regno.addr, align 4
  %cmp106 = icmp sle i32 %44, 36
  br i1 %cmp106, label %if.then.108, label %if.end.133

if.then.108:                                      ; preds = %land.lhs.true.105
  %45 = load i32, i32* %mode.addr, align 4
  %cmp109 = icmp eq i32 %45, 5
  br i1 %cmp109, label %lor.end.131, label %lor.lhs.false.111

lor.lhs.false.111:                                ; preds = %if.then.108
  %46 = load i32, i32* %mode.addr, align 4
  %cmp112 = icmp eq i32 %46, 39
  br i1 %cmp112, label %lor.end.131, label %lor.lhs.false.114

lor.lhs.false.114:                                ; preds = %lor.lhs.false.111
  %47 = load i32, i32* %mode.addr, align 4
  %cmp115 = icmp eq i32 %47, 36
  br i1 %cmp115, label %lor.end.131, label %lor.lhs.false.117

lor.lhs.false.117:                                ; preds = %lor.lhs.false.114
  %48 = load i32, i32* %mode.addr, align 4
  %cmp118 = icmp eq i32 %48, 33
  br i1 %cmp118, label %lor.end.131, label %lor.lhs.false.120

lor.lhs.false.120:                                ; preds = %lor.lhs.false.117
  %49 = load i32, i32* %mode.addr, align 4
  %cmp121 = icmp eq i32 %49, 4
  br i1 %cmp121, label %lor.end.131, label %lor.rhs.123

lor.rhs.123:                                      ; preds = %lor.lhs.false.120
  %50 = load i32, i32* %mode.addr, align 4
  %cmp124 = icmp eq i32 %50, 44
  br i1 %cmp124, label %lor.end.129, label %lor.rhs.126

lor.rhs.126:                                      ; preds = %lor.rhs.123
  %51 = load i32, i32* %mode.addr, align 4
  %cmp127 = icmp eq i32 %51, 15
  br label %lor.end.129

lor.end.129:                                      ; preds = %lor.rhs.126, %lor.rhs.123
  %52 = phi i1 [ true, %lor.rhs.123 ], [ %cmp127, %lor.rhs.126 ]
  br label %lor.end.131

lor.end.131:                                      ; preds = %lor.end.129, %lor.lhs.false.120, %lor.lhs.false.117, %lor.lhs.false.114, %lor.lhs.false.111, %if.then.108
  %53 = phi i1 [ true, %lor.lhs.false.120 ], [ true, %lor.lhs.false.117 ], [ true, %lor.lhs.false.114 ], [ true, %lor.lhs.false.111 ], [ true, %if.then.108 ], [ %52, %lor.end.129 ]
  %lor.ext132 = zext i1 %53 to i32
  store i32 %lor.ext132, i32* %retval
  br label %return

if.end.133:                                       ; preds = %land.lhs.true.105, %if.end.102
  %54 = load i32, i32* %mode.addr, align 4
  %cmp134 = icmp eq i32 %54, 2
  br i1 %cmp134, label %if.end.197, label %lor.lhs.false.136

lor.lhs.false.136:                                ; preds = %if.end.133
  %55 = load i32, i32* %mode.addr, align 4
  %cmp137 = icmp eq i32 %55, 3
  br i1 %cmp137, label %if.end.197, label %lor.lhs.false.139

lor.lhs.false.139:                                ; preds = %lor.lhs.false.136
  %56 = load i32, i32* %mode.addr, align 4
  %cmp140 = icmp eq i32 %56, 4
  br i1 %cmp140, label %if.end.197, label %lor.lhs.false.142

lor.lhs.false.142:                                ; preds = %lor.lhs.false.139
  %57 = load i32, i32* %mode.addr, align 4
  %cmp143 = icmp eq i32 %57, 5
  br i1 %cmp143, label %if.end.197, label %lor.lhs.false.145

lor.lhs.false.145:                                ; preds = %lor.lhs.false.142
  %58 = load i32, i32* %mode.addr, align 4
  %cmp146 = icmp eq i32 %58, 25
  br i1 %cmp146, label %if.end.197, label %lor.lhs.false.148

lor.lhs.false.148:                                ; preds = %lor.lhs.false.145
  %59 = load i32, i32* %mode.addr, align 4
  %cmp149 = icmp eq i32 %59, 26
  br i1 %cmp149, label %if.end.197, label %lor.lhs.false.151

lor.lhs.false.151:                                ; preds = %lor.lhs.false.148
  %60 = load i32, i32* %mode.addr, align 4
  %cmp152 = icmp eq i32 %60, 27
  br i1 %cmp152, label %if.end.197, label %lor.lhs.false.154

lor.lhs.false.154:                                ; preds = %lor.lhs.false.151
  %61 = load i32, i32* %mode.addr, align 4
  %cmp155 = icmp eq i32 %61, 28
  br i1 %cmp155, label %if.end.197, label %lor.lhs.false.157

lor.lhs.false.157:                                ; preds = %lor.lhs.false.154
  %62 = load i32, i32* @target_flags, align 4
  %and158 = and i32 %62, 33554432
  %tobool159 = icmp ne i32 %and158, 0
  br i1 %tobool159, label %land.lhs.true.160, label %land.lhs.true.166

land.lhs.true.160:                                ; preds = %lor.lhs.false.157
  %63 = load i32, i32* %mode.addr, align 4
  %cmp161 = icmp eq i32 %63, 6
  br i1 %cmp161, label %if.end.197, label %lor.lhs.false.163

lor.lhs.false.163:                                ; preds = %land.lhs.true.160
  %64 = load i32, i32* %mode.addr, align 4
  %cmp164 = icmp eq i32 %64, 29
  br i1 %cmp164, label %if.end.197, label %land.lhs.true.166

land.lhs.true.166:                                ; preds = %lor.lhs.false.163, %lor.lhs.false.157
  %65 = load i32, i32* %mode.addr, align 4
  %cmp167 = icmp eq i32 %65, 15
  br i1 %cmp167, label %if.end.197, label %lor.lhs.false.169

lor.lhs.false.169:                                ; preds = %land.lhs.true.166
  %66 = load i32, i32* %mode.addr, align 4
  %cmp170 = icmp eq i32 %66, 16
  br i1 %cmp170, label %if.end.197, label %lor.lhs.false.172

lor.lhs.false.172:                                ; preds = %lor.lhs.false.169
  %67 = load i32, i32* %mode.addr, align 4
  %cmp173 = icmp eq i32 %67, 18
  br i1 %cmp173, label %if.end.197, label %lor.lhs.false.175

lor.lhs.false.175:                                ; preds = %lor.lhs.false.172
  %68 = load i32, i32* @target_flags, align 4
  %and176 = and i32 %68, 33554432
  %tobool177 = icmp ne i32 %and176, 0
  br i1 %tobool177, label %lor.lhs.false.181, label %land.lhs.true.178

land.lhs.true.178:                                ; preds = %lor.lhs.false.175
  %69 = load i32, i32* %mode.addr, align 4
  %cmp179 = icmp eq i32 %69, 17
  br i1 %cmp179, label %if.end.197, label %lor.lhs.false.181

lor.lhs.false.181:                                ; preds = %land.lhs.true.178, %lor.lhs.false.175
  %70 = load i32, i32* %mode.addr, align 4
  %cmp182 = icmp eq i32 %70, 21
  br i1 %cmp182, label %if.end.197, label %lor.lhs.false.184

lor.lhs.false.184:                                ; preds = %lor.lhs.false.181
  %71 = load i32, i32* %mode.addr, align 4
  %cmp185 = icmp eq i32 %71, 22
  br i1 %cmp185, label %if.end.197, label %lor.lhs.false.187

lor.lhs.false.187:                                ; preds = %lor.lhs.false.184
  %72 = load i32, i32* %mode.addr, align 4
  %cmp188 = icmp eq i32 %72, 24
  br i1 %cmp188, label %if.end.197, label %lor.lhs.false.190

lor.lhs.false.190:                                ; preds = %lor.lhs.false.187
  %73 = load i32, i32* @target_flags, align 4
  %and191 = and i32 %73, 33554432
  %tobool192 = icmp ne i32 %and191, 0
  br i1 %tobool192, label %if.then.196, label %land.lhs.true.193

land.lhs.true.193:                                ; preds = %lor.lhs.false.190
  %74 = load i32, i32* %mode.addr, align 4
  %cmp194 = icmp eq i32 %74, 23
  br i1 %cmp194, label %if.end.197, label %if.then.196

if.then.196:                                      ; preds = %land.lhs.true.193, %lor.lhs.false.190
  store i32 0, i32* %retval
  br label %return

if.end.197:                                       ; preds = %land.lhs.true.193, %lor.lhs.false.187, %lor.lhs.false.184, %lor.lhs.false.181, %land.lhs.true.178, %lor.lhs.false.172, %lor.lhs.false.169, %land.lhs.true.166, %lor.lhs.false.163, %land.lhs.true.160, %lor.lhs.false.154, %lor.lhs.false.151, %lor.lhs.false.148, %lor.lhs.false.145, %lor.lhs.false.142, %lor.lhs.false.139, %lor.lhs.false.136, %if.end.133
  %75 = load i32, i32* %regno.addr, align 4
  %cmp198 = icmp slt i32 %75, 4
  br i1 %cmp198, label %if.then.206, label %lor.lhs.false.200

lor.lhs.false.200:                                ; preds = %if.end.197
  %76 = load i32, i32* %mode.addr, align 4
  %cmp201 = icmp ne i32 %76, 2
  br i1 %cmp201, label %if.then.206, label %lor.lhs.false.203

lor.lhs.false.203:                                ; preds = %lor.lhs.false.200
  %77 = load i32, i32* @target_flags, align 4
  %and204 = and i32 %77, 33554432
  %tobool205 = icmp ne i32 %and204, 0
  br i1 %tobool205, label %if.then.206, label %if.end.207

if.then.206:                                      ; preds = %lor.lhs.false.203, %lor.lhs.false.200, %if.end.197
  store i32 1, i32* %retval
  br label %return

if.end.207:                                       ; preds = %lor.lhs.false.203
  %78 = load i32, i32* @reload_in_progress, align 4
  %tobool208 = icmp ne i32 %78, 0
  br i1 %tobool208, label %lor.end.214, label %lor.lhs.false.209

lor.lhs.false.209:                                ; preds = %if.end.207
  %79 = load i32, i32* @reload_completed, align 4
  %tobool210 = icmp ne i32 %79, 0
  br i1 %tobool210, label %lor.end.214, label %lor.rhs.211

lor.rhs.211:                                      ; preds = %lor.lhs.false.209
  %80 = load i32, i32* @ix86_cpu, align 4
  %shl = shl i32 1, %80
  %and212 = and i32 8, %shl
  %tobool213 = icmp ne i32 %and212, 0
  %lnot = xor i1 %tobool213, true
  br label %lor.end.214

lor.end.214:                                      ; preds = %lor.rhs.211, %lor.lhs.false.209, %if.end.207
  %81 = phi i1 [ true, %lor.lhs.false.209 ], [ true, %if.end.207 ], [ %lnot, %lor.rhs.211 ]
  %lor.ext215 = zext i1 %81 to i32
  store i32 %lor.ext215, i32* %retval
  br label %return

return:                                           ; preds = %lor.end.214, %if.then.206, %if.then.196, %lor.end.131, %lor.end.100, %lor.end, %if.then.17, %if.then
  %82 = load i32, i32* %retval
  ret i32 %82
}

; Function Attrs: nounwind uwtable
define void @x86_order_regs_for_local_alloc() #1 {
entry:
  %pos = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %pos, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 53
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %cmp1 = icmp slt i32 %1, 8
  br i1 %cmp1, label %land.lhs.true.4, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body
  %2 = load i32, i32* %i, align 4
  %cmp2 = icmp sge i32 %2, 37
  br i1 %cmp2, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.lhs.false
  %3 = load i32, i32* %i, align 4
  %cmp3 = icmp sle i32 %3, 44
  br i1 %cmp3, label %land.lhs.true.4, label %if.end

land.lhs.true.4:                                  ; preds = %land.lhs.true, %for.body
  %4 = load i32, i32* %i, align 4
  %idxprom = sext i32 %4 to i64
  %arrayidx = getelementptr inbounds [53 x i8], [53 x i8]* @call_used_regs, i32 0, i64 %idxprom
  %5 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %5 to i32
  %tobool = icmp ne i32 %conv, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true.4
  %6 = load i32, i32* %i, align 4
  %7 = load i32, i32* %pos, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %pos, align 4
  %idxprom5 = sext i32 %7 to i64
  %arrayidx6 = getelementptr inbounds [53 x i32], [53 x i32]* @reg_alloc_order, i32 0, i64 %idxprom5
  store i32 %6, i32* %arrayidx6, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true.4, %land.lhs.true, %lor.lhs.false
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %8 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %8, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond.8

for.cond.8:                                       ; preds = %for.inc.29, %for.end
  %9 = load i32, i32* %i, align 4
  %cmp9 = icmp slt i32 %9, 53
  br i1 %cmp9, label %for.body.11, label %for.end.31

for.body.11:                                      ; preds = %for.cond.8
  %10 = load i32, i32* %i, align 4
  %cmp12 = icmp slt i32 %10, 8
  br i1 %cmp12, label %land.lhs.true.20, label %lor.lhs.false.14

lor.lhs.false.14:                                 ; preds = %for.body.11
  %11 = load i32, i32* %i, align 4
  %cmp15 = icmp sge i32 %11, 37
  br i1 %cmp15, label %land.lhs.true.17, label %if.end.28

land.lhs.true.17:                                 ; preds = %lor.lhs.false.14
  %12 = load i32, i32* %i, align 4
  %cmp18 = icmp sle i32 %12, 44
  br i1 %cmp18, label %land.lhs.true.20, label %if.end.28

land.lhs.true.20:                                 ; preds = %land.lhs.true.17, %for.body.11
  %13 = load i32, i32* %i, align 4
  %idxprom21 = sext i32 %13 to i64
  %arrayidx22 = getelementptr inbounds [53 x i8], [53 x i8]* @call_used_regs, i32 0, i64 %idxprom21
  %14 = load i8, i8* %arrayidx22, align 1
  %tobool23 = icmp ne i8 %14, 0
  br i1 %tobool23, label %if.end.28, label %if.then.24

if.then.24:                                       ; preds = %land.lhs.true.20
  %15 = load i32, i32* %i, align 4
  %16 = load i32, i32* %pos, align 4
  %inc25 = add nsw i32 %16, 1
  store i32 %inc25, i32* %pos, align 4
  %idxprom26 = sext i32 %16 to i64
  %arrayidx27 = getelementptr inbounds [53 x i32], [53 x i32]* @reg_alloc_order, i32 0, i64 %idxprom26
  store i32 %15, i32* %arrayidx27, align 4
  br label %if.end.28

if.end.28:                                        ; preds = %if.then.24, %land.lhs.true.20, %land.lhs.true.17, %lor.lhs.false.14
  br label %for.inc.29

for.inc.29:                                       ; preds = %if.end.28
  %17 = load i32, i32* %i, align 4
  %inc30 = add nsw i32 %17, 1
  store i32 %inc30, i32* %i, align 4
  br label %for.cond.8

for.end.31:                                       ; preds = %for.cond.8
  %18 = load i32, i32* @ix86_fpmath, align 4
  %and = and i32 %18, 2
  %cmp32 = icmp ne i32 %and, 0
  br i1 %cmp32, label %if.end.45, label %if.then.34

if.then.34:                                       ; preds = %for.end.31
  store i32 8, i32* %i, align 4
  br label %for.cond.35

for.cond.35:                                      ; preds = %for.inc.42, %if.then.34
  %19 = load i32, i32* %i, align 4
  %cmp36 = icmp sle i32 %19, 15
  br i1 %cmp36, label %for.body.38, label %for.end.44

for.body.38:                                      ; preds = %for.cond.35
  %20 = load i32, i32* %i, align 4
  %21 = load i32, i32* %pos, align 4
  %inc39 = add nsw i32 %21, 1
  store i32 %inc39, i32* %pos, align 4
  %idxprom40 = sext i32 %21 to i64
  %arrayidx41 = getelementptr inbounds [53 x i32], [53 x i32]* @reg_alloc_order, i32 0, i64 %idxprom40
  store i32 %20, i32* %arrayidx41, align 4
  br label %for.inc.42

for.inc.42:                                       ; preds = %for.body.38
  %22 = load i32, i32* %i, align 4
  %inc43 = add nsw i32 %22, 1
  store i32 %inc43, i32* %i, align 4
  br label %for.cond.35

for.end.44:                                       ; preds = %for.cond.35
  br label %if.end.45

if.end.45:                                        ; preds = %for.end.44, %for.end.31
  store i32 21, i32* %i, align 4
  br label %for.cond.46

for.cond.46:                                      ; preds = %for.inc.53, %if.end.45
  %23 = load i32, i32* %i, align 4
  %cmp47 = icmp sle i32 %23, 28
  br i1 %cmp47, label %for.body.49, label %for.end.55

for.body.49:                                      ; preds = %for.cond.46
  %24 = load i32, i32* %i, align 4
  %25 = load i32, i32* %pos, align 4
  %inc50 = add nsw i32 %25, 1
  store i32 %inc50, i32* %pos, align 4
  %idxprom51 = sext i32 %25 to i64
  %arrayidx52 = getelementptr inbounds [53 x i32], [53 x i32]* @reg_alloc_order, i32 0, i64 %idxprom51
  store i32 %24, i32* %arrayidx52, align 4
  br label %for.inc.53

for.inc.53:                                       ; preds = %for.body.49
  %26 = load i32, i32* %i, align 4
  %inc54 = add nsw i32 %26, 1
  store i32 %inc54, i32* %i, align 4
  br label %for.cond.46

for.end.55:                                       ; preds = %for.cond.46
  store i32 45, i32* %i, align 4
  br label %for.cond.56

for.cond.56:                                      ; preds = %for.inc.63, %for.end.55
  %27 = load i32, i32* %i, align 4
  %cmp57 = icmp sle i32 %27, 52
  br i1 %cmp57, label %for.body.59, label %for.end.65

for.body.59:                                      ; preds = %for.cond.56
  %28 = load i32, i32* %i, align 4
  %29 = load i32, i32* %pos, align 4
  %inc60 = add nsw i32 %29, 1
  store i32 %inc60, i32* %pos, align 4
  %idxprom61 = sext i32 %29 to i64
  %arrayidx62 = getelementptr inbounds [53 x i32], [53 x i32]* @reg_alloc_order, i32 0, i64 %idxprom61
  store i32 %28, i32* %arrayidx62, align 4
  br label %for.inc.63

for.inc.63:                                       ; preds = %for.body.59
  %30 = load i32, i32* %i, align 4
  %inc64 = add nsw i32 %30, 1
  store i32 %inc64, i32* %i, align 4
  br label %for.cond.56

for.end.65:                                       ; preds = %for.cond.56
  %31 = load i32, i32* @ix86_fpmath, align 4
  %and66 = and i32 %31, 2
  %cmp67 = icmp ne i32 %and66, 0
  br i1 %cmp67, label %if.then.69, label %if.end.80

if.then.69:                                       ; preds = %for.end.65
  store i32 8, i32* %i, align 4
  br label %for.cond.70

for.cond.70:                                      ; preds = %for.inc.77, %if.then.69
  %32 = load i32, i32* %i, align 4
  %cmp71 = icmp sle i32 %32, 15
  br i1 %cmp71, label %for.body.73, label %for.end.79

for.body.73:                                      ; preds = %for.cond.70
  %33 = load i32, i32* %i, align 4
  %34 = load i32, i32* %pos, align 4
  %inc74 = add nsw i32 %34, 1
  store i32 %inc74, i32* %pos, align 4
  %idxprom75 = sext i32 %34 to i64
  %arrayidx76 = getelementptr inbounds [53 x i32], [53 x i32]* @reg_alloc_order, i32 0, i64 %idxprom75
  store i32 %33, i32* %arrayidx76, align 4
  br label %for.inc.77

for.inc.77:                                       ; preds = %for.body.73
  %35 = load i32, i32* %i, align 4
  %inc78 = add nsw i32 %35, 1
  store i32 %inc78, i32* %i, align 4
  br label %for.cond.70

for.end.79:                                       ; preds = %for.cond.70
  br label %if.end.80

if.end.80:                                        ; preds = %for.end.79, %for.end.65
  store i32 29, i32* %i, align 4
  br label %for.cond.81

for.cond.81:                                      ; preds = %for.inc.88, %if.end.80
  %36 = load i32, i32* %i, align 4
  %cmp82 = icmp sle i32 %36, 36
  br i1 %cmp82, label %for.body.84, label %for.end.90

for.body.84:                                      ; preds = %for.cond.81
  %37 = load i32, i32* %i, align 4
  %38 = load i32, i32* %pos, align 4
  %inc85 = add nsw i32 %38, 1
  store i32 %inc85, i32* %pos, align 4
  %idxprom86 = sext i32 %38 to i64
  %arrayidx87 = getelementptr inbounds [53 x i32], [53 x i32]* @reg_alloc_order, i32 0, i64 %idxprom86
  store i32 %37, i32* %arrayidx87, align 4
  br label %for.inc.88

for.inc.88:                                       ; preds = %for.body.84
  %39 = load i32, i32* %i, align 4
  %inc89 = add nsw i32 %39, 1
  store i32 %inc89, i32* %i, align 4
  br label %for.cond.81

for.end.90:                                       ; preds = %for.cond.81
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end.90
  %40 = load i32, i32* %pos, align 4
  %cmp91 = icmp slt i32 %40, 53
  br i1 %cmp91, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %41 = load i32, i32* %pos, align 4
  %inc93 = add nsw i32 %41, 1
  store i32 %inc93, i32* %pos, align 4
  %idxprom94 = sext i32 %41 to i64
  %arrayidx95 = getelementptr inbounds [53 x i32], [53 x i32]* @reg_alloc_order, i32 0, i64 %idxprom94
  store i32 0, i32* %arrayidx95, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: nounwind uwtable
define void @x86_output_mi_thunk(%struct._IO_FILE* %file, i32 %delta, %union.tree_node* %function) #1 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %delta.addr = alloca i32, align 4
  %function.addr = alloca %union.tree_node*, align 8
  %parm = alloca %union.tree_node*, align 8
  %xops = alloca [3 x %struct.rtx_def*], align 16
  %n = alloca i32, align 4
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  store i32 %delta, i32* %delta.addr, align 4
  store %union.tree_node* %function, %union.tree_node** %function.addr, align 8
  %0 = load i32, i32* @ix86_regparm, align 4
  %cmp = icmp sgt i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %function.addr, align 8
  %common = bitcast %union.tree_node* %1 to %struct.tree_common*
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1
  %2 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type1 = bitcast %union.tree_node* %2 to %struct.tree_type*
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 1
  %3 = load %union.tree_node*, %union.tree_node** %values, align 8
  store %union.tree_node* %3, %union.tree_node** %parm, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %parm, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %4 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %tobool = icmp ne %union.tree_node* %4, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %list = bitcast %union.tree_node* %5 to %struct.tree_list*
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2
  %6 = load %union.tree_node*, %union.tree_node** %value, align 8
  %7 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 27), align 8
  %cmp2 = icmp eq %union.tree_node* %6, %7
  br i1 %cmp2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %for.body
  br label %for.end

if.end.4:                                         ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.4
  %8 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %common5 = bitcast %union.tree_node* %8 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5, i32 0, i32 0
  %9 = load %union.tree_node*, %union.tree_node** %chain, align 8
  store %union.tree_node* %9, %union.tree_node** %parm, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then.3, %for.cond
  %10 = load i32, i32* %delta.addr, align 4
  %conv = sext i32 %10 to i64
  %call = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv)
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %xops, i32 0, i64 0
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx, align 8
  %11 = load i32, i32* @target_flags, align 4
  %and = and i32 %11, 33554432
  %tobool6 = icmp ne i32 %and, 0
  br i1 %tobool6, label %if.then.7, label %if.else.51

if.then.7:                                        ; preds = %for.end
  %12 = load %union.tree_node*, %union.tree_node** %function.addr, align 8
  %common8 = bitcast %union.tree_node* %12 to %struct.tree_common*
  %type9 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common8, i32 0, i32 1
  %13 = load %union.tree_node*, %union.tree_node** %type9, align 8
  %common10 = bitcast %union.tree_node* %13 to %struct.tree_common*
  %type11 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common10, i32 0, i32 1
  %14 = load %union.tree_node*, %union.tree_node** %type11, align 8
  %call12 = call i32 @aggregate_value_p(%union.tree_node* %14)
  %cmp13 = icmp ne i32 %call12, 0
  %conv14 = zext i1 %cmp13 to i32
  store i32 %conv14, i32* %n, align 4
  %15 = load i32, i32* %n, align 4
  %idxprom = sext i32 %15 to i64
  %arrayidx15 = getelementptr inbounds [6 x i32], [6 x i32]* @x86_64_int_parameter_registers, i32 0, i64 %idxprom
  %16 = load i32, i32* %arrayidx15, align 4
  %call16 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 %16)
  %arrayidx17 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %xops, i32 0, i64 1
  store %struct.rtx_def* %call16, %struct.rtx_def** %arrayidx17, align 8
  %arraydecay = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %xops, i32 0, i32 0
  call void @output_asm_insn(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.199, i32 0, i32 0), %struct.rtx_def** %arraydecay)
  %17 = load i32, i32* @flag_pic, align 4
  %tobool18 = icmp ne i32 %17, 0
  br i1 %tobool18, label %if.then.19, label %if.else.30

if.then.19:                                       ; preds = %if.then.7
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call20 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %18, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.200, i32 0, i32 0))
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %20 = load %union.tree_node*, %union.tree_node** %function.addr, align 8
  %decl = bitcast %union.tree_node* %20 to %struct.tree_decl*
  %rtl = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl, i32 0, i32 17
  %21 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %tobool21 = icmp ne %struct.rtx_def* %21, null
  br i1 %tobool21, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.19
  %22 = load %union.tree_node*, %union.tree_node** %function.addr, align 8
  %decl22 = bitcast %union.tree_node* %22 to %struct.tree_decl*
  %rtl23 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl22, i32 0, i32 17
  %23 = load %struct.rtx_def*, %struct.rtx_def** %rtl23, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then.19
  %24 = load %union.tree_node*, %union.tree_node** %function.addr, align 8
  call void @make_decl_rtl(%union.tree_node* %24, i8* null)
  %25 = load %union.tree_node*, %union.tree_node** %function.addr, align 8
  %decl24 = bitcast %union.tree_node* %25 to %struct.tree_decl*
  %rtl25 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl24, i32 0, i32 17
  %26 = load %struct.rtx_def*, %struct.rtx_def** %rtl25, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %23, %cond.true ], [ %26, %cond.false ]
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond, i32 0, i32 1
  %arrayidx26 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx26 to %struct.rtx_def**
  %27 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %fld27 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1
  %arrayidx28 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld27, i32 0, i64 0
  %rtstr = bitcast %union.rtunion_def* %arrayidx28 to i8**
  %28 = load i8*, i8** %rtstr, align 8
  call void @assemble_name(%struct._IO_FILE* %19, i8* %28)
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call29 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %29, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.201, i32 0, i32 0))
  br label %if.end.50

if.else.30:                                       ; preds = %if.then.7
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call31 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %30, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.202, i32 0, i32 0))
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %32 = load %union.tree_node*, %union.tree_node** %function.addr, align 8
  %decl32 = bitcast %union.tree_node* %32 to %struct.tree_decl*
  %rtl33 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl32, i32 0, i32 17
  %33 = load %struct.rtx_def*, %struct.rtx_def** %rtl33, align 8
  %tobool34 = icmp ne %struct.rtx_def* %33, null
  br i1 %tobool34, label %cond.true.35, label %cond.false.38

cond.true.35:                                     ; preds = %if.else.30
  %34 = load %union.tree_node*, %union.tree_node** %function.addr, align 8
  %decl36 = bitcast %union.tree_node* %34 to %struct.tree_decl*
  %rtl37 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl36, i32 0, i32 17
  %35 = load %struct.rtx_def*, %struct.rtx_def** %rtl37, align 8
  br label %cond.end.41

cond.false.38:                                    ; preds = %if.else.30
  %36 = load %union.tree_node*, %union.tree_node** %function.addr, align 8
  call void @make_decl_rtl(%union.tree_node* %36, i8* null)
  %37 = load %union.tree_node*, %union.tree_node** %function.addr, align 8
  %decl39 = bitcast %union.tree_node* %37 to %struct.tree_decl*
  %rtl40 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl39, i32 0, i32 17
  %38 = load %struct.rtx_def*, %struct.rtx_def** %rtl40, align 8
  br label %cond.end.41

cond.end.41:                                      ; preds = %cond.false.38, %cond.true.35
  %cond42 = phi %struct.rtx_def* [ %35, %cond.true.35 ], [ %38, %cond.false.38 ]
  %fld43 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond42, i32 0, i32 1
  %arrayidx44 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld43, i32 0, i64 0
  %rtx45 = bitcast %union.rtunion_def* %arrayidx44 to %struct.rtx_def**
  %39 = load %struct.rtx_def*, %struct.rtx_def** %rtx45, align 8
  %fld46 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1
  %arrayidx47 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld46, i32 0, i64 0
  %rtstr48 = bitcast %union.rtunion_def* %arrayidx47 to i8**
  %40 = load i8*, i8** %rtstr48, align 8
  call void @assemble_name(%struct._IO_FILE* %31, i8* %40)
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call49 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %41, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.203, i32 0, i32 0))
  br label %if.end.50

if.end.50:                                        ; preds = %cond.end.41, %cond.end
  br label %if.end.134

if.else.51:                                       ; preds = %for.end
  %42 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %tobool52 = icmp ne %union.tree_node* %42, null
  br i1 %tobool52, label %if.then.53, label %if.else.56

if.then.53:                                       ; preds = %if.else.51
  %call54 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 0)
  %arrayidx55 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %xops, i32 0, i64 1
  store %struct.rtx_def* %call54, %struct.rtx_def** %arrayidx55, align 8
  br label %if.end.72

if.else.56:                                       ; preds = %if.else.51
  %43 = load %union.tree_node*, %union.tree_node** %function.addr, align 8
  %common57 = bitcast %union.tree_node* %43 to %struct.tree_common*
  %type58 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common57, i32 0, i32 1
  %44 = load %union.tree_node*, %union.tree_node** %type58, align 8
  %common59 = bitcast %union.tree_node* %44 to %struct.tree_common*
  %type60 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common59, i32 0, i32 1
  %45 = load %union.tree_node*, %union.tree_node** %type60, align 8
  %call61 = call i32 @aggregate_value_p(%union.tree_node* %45)
  %tobool62 = icmp ne i32 %call61, 0
  br i1 %tobool62, label %if.then.63, label %if.else.67

if.then.63:                                       ; preds = %if.else.56
  %46 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %call64 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %46, i64 8)
  %call65 = call %struct.rtx_def* @gen_rtx_MEM(i32 4, %struct.rtx_def* %call64)
  %arrayidx66 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %xops, i32 0, i64 1
  store %struct.rtx_def* %call65, %struct.rtx_def** %arrayidx66, align 8
  br label %if.end.71

if.else.67:                                       ; preds = %if.else.56
  %47 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %call68 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %47, i64 4)
  %call69 = call %struct.rtx_def* @gen_rtx_MEM(i32 4, %struct.rtx_def* %call68)
  %arrayidx70 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %xops, i32 0, i64 1
  store %struct.rtx_def* %call69, %struct.rtx_def** %arrayidx70, align 8
  br label %if.end.71

if.end.71:                                        ; preds = %if.else.67, %if.then.63
  br label %if.end.72

if.end.72:                                        ; preds = %if.end.71, %if.then.53
  %arraydecay73 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %xops, i32 0, i32 0
  call void @output_asm_insn(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.204, i32 0, i32 0), %struct.rtx_def** %arraydecay73)
  %48 = load i32, i32* @flag_pic, align 4
  %tobool74 = icmp ne i32 %48, 0
  br i1 %tobool74, label %if.then.75, label %if.else.113

if.then.75:                                       ; preds = %if.end.72
  %49 = load %struct.rtx_def*, %struct.rtx_def** @pic_offset_table_rtx, align 8
  %arrayidx76 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %xops, i32 0, i64 0
  store %struct.rtx_def* %49, %struct.rtx_def** %arrayidx76, align 8
  %call77 = call %struct.rtx_def* @gen_label_rtx()
  %arrayidx78 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %xops, i32 0, i64 1
  store %struct.rtx_def* %call77, %struct.rtx_def** %arrayidx78, align 8
  %50 = load i32, i32* @target_flags, align 4
  %and79 = and i32 %50, 33554432
  %tobool80 = icmp ne i32 %and79, 0
  %cond81 = select i1 %tobool80, i32 5, i32 4
  %call82 = call %struct.rtx_def* @gen_rtx_fmt_s(i32 68, i32 %cond81, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.80, i32 0, i32 0))
  %arrayidx83 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %xops, i32 0, i64 2
  store %struct.rtx_def* %call82, %struct.rtx_def** %arrayidx83, align 8
  %51 = load i32, i32* @ix86_regparm, align 4
  %cmp84 = icmp sgt i32 %51, 2
  br i1 %cmp84, label %if.then.86, label %if.end.87

if.then.86:                                       ; preds = %if.then.75
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 12615, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__FUNCTION__.x86_output_mi_thunk, i32 0, i32 0)) #7
  unreachable

if.end.87:                                        ; preds = %if.then.75
  %arraydecay88 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %xops, i32 0, i32 0
  call void @output_asm_insn(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.205, i32 0, i32 0), %struct.rtx_def** %arraydecay88)
  %arraydecay89 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %xops, i32 0, i32 0
  call void @output_asm_insn(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.206, i32 0, i32 0), %struct.rtx_def** %arraydecay89)
  br label %do.body

do.body:                                          ; preds = %if.end.87
  %52 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %arrayidx90 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %xops, i32 0, i64 1
  %53 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx90, align 8
  %fld91 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %53, i32 0, i32 1
  %arrayidx92 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld91, i32 0, i64 5
  %rtint = bitcast %union.rtunion_def* %arrayidx92 to i32*
  %54 = load i32, i32* %rtint, align 4
  %call93 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %52, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.207, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.208, i32 0, i32 0), i32 %54)
  br label %do.end

do.end:                                           ; preds = %do.body
  %arraydecay94 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %xops, i32 0, i32 0
  call void @output_asm_insn(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.209, i32 0, i32 0), %struct.rtx_def** %arraydecay94)
  %arraydecay95 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %xops, i32 0, i32 0
  call void @output_asm_insn(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.210, i32 0, i32 0), %struct.rtx_def** %arraydecay95)
  %55 = load %union.tree_node*, %union.tree_node** %function.addr, align 8
  %decl96 = bitcast %union.tree_node* %55 to %struct.tree_decl*
  %rtl97 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl96, i32 0, i32 17
  %56 = load %struct.rtx_def*, %struct.rtx_def** %rtl97, align 8
  %tobool98 = icmp ne %struct.rtx_def* %56, null
  br i1 %tobool98, label %cond.true.99, label %cond.false.102

cond.true.99:                                     ; preds = %do.end
  %57 = load %union.tree_node*, %union.tree_node** %function.addr, align 8
  %decl100 = bitcast %union.tree_node* %57 to %struct.tree_decl*
  %rtl101 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl100, i32 0, i32 17
  %58 = load %struct.rtx_def*, %struct.rtx_def** %rtl101, align 8
  br label %cond.end.105

cond.false.102:                                   ; preds = %do.end
  %59 = load %union.tree_node*, %union.tree_node** %function.addr, align 8
  call void @make_decl_rtl(%union.tree_node* %59, i8* null)
  %60 = load %union.tree_node*, %union.tree_node** %function.addr, align 8
  %decl103 = bitcast %union.tree_node* %60 to %struct.tree_decl*
  %rtl104 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl103, i32 0, i32 17
  %61 = load %struct.rtx_def*, %struct.rtx_def** %rtl104, align 8
  br label %cond.end.105

cond.end.105:                                     ; preds = %cond.false.102, %cond.true.99
  %cond106 = phi %struct.rtx_def* [ %58, %cond.true.99 ], [ %61, %cond.false.102 ]
  %fld107 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond106, i32 0, i32 1
  %arrayidx108 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld107, i32 0, i64 0
  %rtx109 = bitcast %union.rtunion_def* %arrayidx108 to %struct.rtx_def**
  %62 = load %struct.rtx_def*, %struct.rtx_def** %rtx109, align 8
  %call110 = call %struct.rtx_def* @gen_rtx_MEM(i32 4, %struct.rtx_def* %62)
  %arrayidx111 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %xops, i32 0, i64 0
  store %struct.rtx_def* %call110, %struct.rtx_def** %arrayidx111, align 8
  %arraydecay112 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %xops, i32 0, i32 0
  call void @output_asm_insn(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.211, i32 0, i32 0), %struct.rtx_def** %arraydecay112)
  %63 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  call void (%struct._IO_FILE*, i8*, ...) @asm_fprintf(%struct._IO_FILE* %63, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.212, i32 0, i32 0))
  %64 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  call void (%struct._IO_FILE*, i8*, ...) @asm_fprintf(%struct._IO_FILE* %64, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.213, i32 0, i32 0))
  br label %if.end.133

if.else.113:                                      ; preds = %if.end.72
  %65 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call114 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %65, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.202, i32 0, i32 0))
  %66 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %67 = load %union.tree_node*, %union.tree_node** %function.addr, align 8
  %decl115 = bitcast %union.tree_node* %67 to %struct.tree_decl*
  %rtl116 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl115, i32 0, i32 17
  %68 = load %struct.rtx_def*, %struct.rtx_def** %rtl116, align 8
  %tobool117 = icmp ne %struct.rtx_def* %68, null
  br i1 %tobool117, label %cond.true.118, label %cond.false.121

cond.true.118:                                    ; preds = %if.else.113
  %69 = load %union.tree_node*, %union.tree_node** %function.addr, align 8
  %decl119 = bitcast %union.tree_node* %69 to %struct.tree_decl*
  %rtl120 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl119, i32 0, i32 17
  %70 = load %struct.rtx_def*, %struct.rtx_def** %rtl120, align 8
  br label %cond.end.124

cond.false.121:                                   ; preds = %if.else.113
  %71 = load %union.tree_node*, %union.tree_node** %function.addr, align 8
  call void @make_decl_rtl(%union.tree_node* %71, i8* null)
  %72 = load %union.tree_node*, %union.tree_node** %function.addr, align 8
  %decl122 = bitcast %union.tree_node* %72 to %struct.tree_decl*
  %rtl123 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl122, i32 0, i32 17
  %73 = load %struct.rtx_def*, %struct.rtx_def** %rtl123, align 8
  br label %cond.end.124

cond.end.124:                                     ; preds = %cond.false.121, %cond.true.118
  %cond125 = phi %struct.rtx_def* [ %70, %cond.true.118 ], [ %73, %cond.false.121 ]
  %fld126 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond125, i32 0, i32 1
  %arrayidx127 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld126, i32 0, i64 0
  %rtx128 = bitcast %union.rtunion_def* %arrayidx127 to %struct.rtx_def**
  %74 = load %struct.rtx_def*, %struct.rtx_def** %rtx128, align 8
  %fld129 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %74, i32 0, i32 1
  %arrayidx130 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld129, i32 0, i64 0
  %rtstr131 = bitcast %union.rtunion_def* %arrayidx130 to i8**
  %75 = load i8*, i8** %rtstr131, align 8
  call void @assemble_name(%struct._IO_FILE* %66, i8* %75)
  %76 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %call132 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %76, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.203, i32 0, i32 0))
  br label %if.end.133

if.end.133:                                       ; preds = %cond.end.124, %cond.end.105
  br label %if.end.134

if.end.134:                                       ; preds = %if.end.133, %if.end.50
  ret void
}

declare void @make_decl_rtl(%union.tree_node*, i8*) #0

; Function Attrs: nounwind uwtable
define i32 @x86_field_alignment(%union.tree_node* %field, i32 %computed) #1 {
entry:
  %retval = alloca i32, align 4
  %field.addr = alloca %union.tree_node*, align 8
  %computed.addr = alloca i32, align 4
  %mode = alloca i32, align 4
  %type = alloca %union.tree_node*, align 8
  store %union.tree_node* %field, %union.tree_node** %field.addr, align 8
  store i32 %computed, i32* %computed.addr, align 4
  %0 = load %union.tree_node*, %union.tree_node** %field.addr, align 8
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1
  %1 = load %union.tree_node*, %union.tree_node** %type1, align 8
  store %union.tree_node* %1, %union.tree_node** %type, align 8
  %2 = load i32, i32* @target_flags, align 4
  %and = and i32 %2, 33554432
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %3 = load i32, i32* @target_flags, align 4
  %and2 = and i32 %3, 4
  %tobool3 = icmp ne i32 %and2, 0
  br i1 %tobool3, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %4 = load i32, i32* %computed.addr, align 4
  store i32 %4, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common4 = bitcast %union.tree_node* %5 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 18
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %6 = load %union.tree_node*, %union.tree_node** %type, align 8
  %call = call %union.tree_node* @get_inner_array_type(%union.tree_node* %6)
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %7 = load %union.tree_node*, %union.tree_node** %type, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %call, %cond.true ], [ %7, %cond.false ]
  %type5 = bitcast %union.tree_node* %cond to %struct.tree_type*
  %mode6 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type5, i32 0, i32 6
  %bf.load7 = load i32, i32* %mode6, align 4
  %bf.lshr = lshr i32 %bf.load7, 9
  %bf.clear8 = and i32 %bf.lshr, 127
  store i32 %bf.clear8, i32* %mode, align 4
  %8 = load i32, i32* %mode, align 4
  %cmp9 = icmp eq i32 %8, 16
  br i1 %cmp9, label %if.then.18, label %lor.lhs.false.10

lor.lhs.false.10:                                 ; preds = %cond.end
  %9 = load i32, i32* %mode, align 4
  %cmp11 = icmp eq i32 %9, 22
  br i1 %cmp11, label %if.then.18, label %lor.lhs.false.12

lor.lhs.false.12:                                 ; preds = %lor.lhs.false.10
  %10 = load i32, i32* %mode, align 4
  %idxprom = sext i32 %10 to i64
  %arrayidx = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom
  %11 = load i32, i32* %arrayidx, align 4
  %cmp13 = icmp eq i32 %11, 1
  br i1 %cmp13, label %if.then.18, label %lor.lhs.false.14

lor.lhs.false.14:                                 ; preds = %lor.lhs.false.12
  %12 = load i32, i32* %mode, align 4
  %idxprom15 = sext i32 %12 to i64
  %arrayidx16 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom15
  %13 = load i32, i32* %arrayidx16, align 4
  %cmp17 = icmp eq i32 %13, 5
  br i1 %cmp17, label %if.then.18, label %if.end.24

if.then.18:                                       ; preds = %lor.lhs.false.14, %lor.lhs.false.12, %lor.lhs.false.10, %cond.end
  %14 = load i32, i32* %computed.addr, align 4
  %cmp19 = icmp slt i32 32, %14
  br i1 %cmp19, label %cond.true.20, label %cond.false.21

cond.true.20:                                     ; preds = %if.then.18
  br label %cond.end.22

cond.false.21:                                    ; preds = %if.then.18
  %15 = load i32, i32* %computed.addr, align 4
  br label %cond.end.22

cond.end.22:                                      ; preds = %cond.false.21, %cond.true.20
  %cond23 = phi i32 [ 32, %cond.true.20 ], [ %15, %cond.false.21 ]
  store i32 %cond23, i32* %retval
  br label %return

if.end.24:                                        ; preds = %lor.lhs.false.14
  %16 = load i32, i32* %computed.addr, align 4
  store i32 %16, i32* %retval
  br label %return

return:                                           ; preds = %if.end.24, %cond.end.22, %if.then
  %17 = load i32, i32* %retval
  ret i32 %17
}

declare %union.tree_node* @get_inner_array_type(%union.tree_node*) #0

declare i32 @compare_tree_int(%union.tree_node*, i64) #0

; Function Attrs: nounwind uwtable
define internal i32 @classify_argument(i32 %mode, %union.tree_node* %type, i32* %classes, i32 %bit_offset) #1 {
entry:
  %retval = alloca i32, align 4
  %mode.addr = alloca i32, align 4
  %type.addr = alloca %union.tree_node*, align 8
  %classes.addr = alloca i32*, align 8
  %bit_offset.addr = alloca i32, align 4
  %bytes = alloca i32, align 4
  %words = alloca i32, align 4
  %i = alloca i32, align 4
  %field = alloca %union.tree_node*, align 8
  %subclasses = alloca [4 x i32], align 16
  %bases = alloca %union.tree_node*, align 8
  %n_bases = alloca i32, align 4
  %i71 = alloca i32, align 4
  %binfo76 = alloca %union.tree_node*, align 8
  %num = alloca i32, align 4
  %offset = alloca i32, align 4
  %type86 = alloca %union.tree_node*, align 8
  %pos = alloca i32, align 4
  %num132 = alloca i32, align 4
  %pos185 = alloca i32, align 4
  %num217 = alloca i32, align 4
  %bases290 = alloca %union.tree_node*, align 8
  %n_bases296 = alloca i32, align 4
  %i299 = alloca i32, align 4
  %binfo304 = alloca %union.tree_node*, align 8
  %num309 = alloca i32, align 4
  %offset310 = alloca i32, align 4
  %type317 = alloca %union.tree_node*, align 8
  %pos336 = alloca i32, align 4
  %num368 = alloca i32, align 4
  %mode_alignment = alloca i32, align 4
  store i32 %mode, i32* %mode.addr, align 4
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  store i32* %classes, i32** %classes.addr, align 8
  store i32 %bit_offset, i32* %bit_offset.addr, align 4
  %0 = load i32, i32* %mode.addr, align 4
  %cmp = icmp eq i32 %0, 51
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %call = call i64 @int_size_in_bytes(%union.tree_node* %1)
  br label %cond.end

cond.false:                                       ; preds = %entry
  %2 = load i32, i32* %mode.addr, align 4
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom
  %3 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %3 to i32
  %conv1 = sext i32 %conv to i64
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call, %cond.true ], [ %conv1, %cond.false ]
  %conv2 = trunc i64 %cond to i32
  store i32 %conv2, i32* %bytes, align 4
  %4 = load i32, i32* %bytes, align 4
  %5 = load i32, i32* @target_flags, align 4
  %and = and i32 %5, 33554432
  %tobool = icmp ne i32 %and, 0
  %cond3 = select i1 %tobool, i32 8, i32 4
  %add = add nsw i32 %4, %cond3
  %sub = sub nsw i32 %add, 1
  %6 = load i32, i32* @target_flags, align 4
  %and4 = and i32 %6, 33554432
  %tobool5 = icmp ne i32 %and4, 0
  %cond6 = select i1 %tobool5, i32 8, i32 4
  %div = sdiv i32 %sub, %cond6
  store i32 %div, i32* %words, align 4
  %7 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %tobool7 = icmp ne %union.tree_node* %7, null
  br i1 %tobool7, label %land.lhs.true, label %if.end.453

land.lhs.true:                                    ; preds = %cond.end
  %8 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common = bitcast %union.tree_node* %8 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp8 = icmp eq i32 %bf.clear, 18
  br i1 %cmp8, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %9 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common10 = bitcast %union.tree_node* %9 to %struct.tree_common*
  %code11 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common10, i32 0, i32 2
  %bf.load12 = load i32, i32* %code11, align 8
  %bf.clear13 = and i32 %bf.load12, 255
  %cmp14 = icmp eq i32 %bf.clear13, 20
  br i1 %cmp14, label %if.then, label %lor.lhs.false.16

lor.lhs.false.16:                                 ; preds = %lor.lhs.false
  %10 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common17 = bitcast %union.tree_node* %10 to %struct.tree_common*
  %code18 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common17, i32 0, i32 2
  %bf.load19 = load i32, i32* %code18, align 8
  %bf.clear20 = and i32 %bf.load19, 255
  %cmp21 = icmp eq i32 %bf.clear20, 21
  br i1 %cmp21, label %if.then, label %lor.lhs.false.23

lor.lhs.false.23:                                 ; preds = %lor.lhs.false.16
  %11 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common24 = bitcast %union.tree_node* %11 to %struct.tree_common*
  %code25 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common24, i32 0, i32 2
  %bf.load26 = load i32, i32* %code25, align 8
  %bf.clear27 = and i32 %bf.load26, 255
  %cmp28 = icmp eq i32 %bf.clear27, 22
  br i1 %cmp28, label %if.then, label %lor.lhs.false.30

lor.lhs.false.30:                                 ; preds = %lor.lhs.false.23
  %12 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common31 = bitcast %union.tree_node* %12 to %struct.tree_common*
  %code32 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common31, i32 0, i32 2
  %bf.load33 = load i32, i32* %code32, align 8
  %bf.clear34 = and i32 %bf.load33, 255
  %cmp35 = icmp eq i32 %bf.clear34, 19
  br i1 %cmp35, label %if.then, label %if.end.453

if.then:                                          ; preds = %lor.lhs.false.30, %lor.lhs.false.23, %lor.lhs.false.16, %lor.lhs.false, %land.lhs.true
  %13 = load i32, i32* %bytes, align 4
  %cmp37 = icmp sgt i32 %13, 16
  br i1 %cmp37, label %if.then.39, label %if.end

if.then.39:                                       ; preds = %if.then
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %14 = load i32, i32* %i, align 4
  %15 = load i32, i32* %words, align 4
  %cmp40 = icmp slt i32 %14, %15
  br i1 %cmp40, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %16 = load i32, i32* %i, align 4
  %idxprom42 = sext i32 %16 to i64
  %17 = load i32*, i32** %classes.addr, align 8
  %arrayidx43 = getelementptr inbounds i32, i32* %17, i64 %idxprom42
  store i32 0, i32* %arrayidx43, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %18 = load i32, i32* %i, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %19 = load i32, i32* %words, align 4
  %tobool44 = icmp ne i32 %19, 0
  br i1 %tobool44, label %if.end.47, label %if.then.45

if.then.45:                                       ; preds = %for.end
  %20 = load i32*, i32** %classes.addr, align 8
  %arrayidx46 = getelementptr inbounds i32, i32* %20, i64 0
  store i32 0, i32* %arrayidx46, align 4
  store i32 1, i32* %retval
  br label %return

if.end.47:                                        ; preds = %for.end
  %21 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common48 = bitcast %union.tree_node* %21 to %struct.tree_common*
  %code49 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common48, i32 0, i32 2
  %bf.load50 = load i32, i32* %code49, align 8
  %bf.clear51 = and i32 %bf.load50, 255
  %cmp52 = icmp eq i32 %bf.clear51, 20
  br i1 %cmp52, label %if.then.54, label %if.else.209

if.then.54:                                       ; preds = %if.end.47
  %22 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type55 = bitcast %union.tree_node* %22 to %struct.tree_type*
  %binfo = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type55, i32 0, i32 16
  %23 = load %union.tree_node*, %union.tree_node** %binfo, align 8
  %cmp56 = icmp ne %union.tree_node* %23, null
  br i1 %cmp56, label %land.lhs.true.58, label %if.end.120

land.lhs.true.58:                                 ; preds = %if.then.54
  %24 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type59 = bitcast %union.tree_node* %24 to %struct.tree_type*
  %binfo60 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type59, i32 0, i32 16
  %25 = load %union.tree_node*, %union.tree_node** %binfo60, align 8
  %vec = bitcast %union.tree_node* %25 to %struct.tree_vec*
  %a = getelementptr inbounds %struct.tree_vec, %struct.tree_vec* %vec, i32 0, i32 2
  %arrayidx61 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %a, i32 0, i64 4
  %26 = load %union.tree_node*, %union.tree_node** %arrayidx61, align 8
  %cmp62 = icmp ne %union.tree_node* %26, null
  br i1 %cmp62, label %if.then.64, label %if.end.120

if.then.64:                                       ; preds = %land.lhs.true.58
  %27 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type65 = bitcast %union.tree_node* %27 to %struct.tree_type*
  %binfo66 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type65, i32 0, i32 16
  %28 = load %union.tree_node*, %union.tree_node** %binfo66, align 8
  %vec67 = bitcast %union.tree_node* %28 to %struct.tree_vec*
  %a68 = getelementptr inbounds %struct.tree_vec, %struct.tree_vec* %vec67, i32 0, i32 2
  %arrayidx69 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %a68, i32 0, i64 4
  %29 = load %union.tree_node*, %union.tree_node** %arrayidx69, align 8
  store %union.tree_node* %29, %union.tree_node** %bases, align 8
  %30 = load %union.tree_node*, %union.tree_node** %bases, align 8
  %vec70 = bitcast %union.tree_node* %30 to %struct.tree_vec*
  %length = getelementptr inbounds %struct.tree_vec, %struct.tree_vec* %vec70, i32 0, i32 1
  %31 = load i32, i32* %length, align 4
  store i32 %31, i32* %n_bases, align 4
  store i32 0, i32* %i71, align 4
  br label %for.cond.72

for.cond.72:                                      ; preds = %for.inc.117, %if.then.64
  %32 = load i32, i32* %i71, align 4
  %33 = load i32, i32* %n_bases, align 4
  %cmp73 = icmp slt i32 %32, %33
  br i1 %cmp73, label %for.body.75, label %for.end.119

for.body.75:                                      ; preds = %for.cond.72
  %34 = load i32, i32* %i71, align 4
  %idxprom77 = sext i32 %34 to i64
  %35 = load %union.tree_node*, %union.tree_node** %bases, align 8
  %vec78 = bitcast %union.tree_node* %35 to %struct.tree_vec*
  %a79 = getelementptr inbounds %struct.tree_vec, %struct.tree_vec* %vec78, i32 0, i32 2
  %arrayidx80 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %a79, i32 0, i64 %idxprom77
  %36 = load %union.tree_node*, %union.tree_node** %arrayidx80, align 8
  store %union.tree_node* %36, %union.tree_node** %binfo76, align 8
  %37 = load %union.tree_node*, %union.tree_node** %binfo76, align 8
  %vec81 = bitcast %union.tree_node* %37 to %struct.tree_vec*
  %a82 = getelementptr inbounds %struct.tree_vec, %struct.tree_vec* %vec81, i32 0, i32 2
  %arrayidx83 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %a82, i32 0, i64 1
  %38 = load %union.tree_node*, %union.tree_node** %arrayidx83, align 8
  %call84 = call i64 @tree_low_cst(%union.tree_node* %38, i32 0)
  %mul = mul nsw i64 %call84, 8
  %conv85 = trunc i64 %mul to i32
  store i32 %conv85, i32* %offset, align 4
  %39 = load %union.tree_node*, %union.tree_node** %binfo76, align 8
  %common87 = bitcast %union.tree_node* %39 to %struct.tree_common*
  %type88 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common87, i32 0, i32 1
  %40 = load %union.tree_node*, %union.tree_node** %type88, align 8
  store %union.tree_node* %40, %union.tree_node** %type86, align 8
  %41 = load %union.tree_node*, %union.tree_node** %type86, align 8
  %type89 = bitcast %union.tree_node* %41 to %struct.tree_type*
  %mode90 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type89, i32 0, i32 6
  %bf.load91 = load i32, i32* %mode90, align 4
  %bf.lshr = lshr i32 %bf.load91, 9
  %bf.clear92 = and i32 %bf.lshr, 127
  %42 = load %union.tree_node*, %union.tree_node** %type86, align 8
  %arraydecay = getelementptr inbounds [4 x i32], [4 x i32]* %subclasses, i32 0, i32 0
  %43 = load i32, i32* %offset, align 4
  %44 = load i32, i32* %bit_offset.addr, align 4
  %add93 = add nsw i32 %43, %44
  %rem = srem i32 %add93, 256
  %call94 = call i32 @classify_argument(i32 %bf.clear92, %union.tree_node* %42, i32* %arraydecay, i32 %rem)
  store i32 %call94, i32* %num, align 4
  %45 = load i32, i32* %num, align 4
  %tobool95 = icmp ne i32 %45, 0
  br i1 %tobool95, label %if.end.97, label %if.then.96

if.then.96:                                       ; preds = %for.body.75
  store i32 0, i32* %retval
  br label %return

if.end.97:                                        ; preds = %for.body.75
  store i32 0, i32* %i71, align 4
  br label %for.cond.98

for.cond.98:                                      ; preds = %for.inc.114, %if.end.97
  %46 = load i32, i32* %i71, align 4
  %47 = load i32, i32* %num, align 4
  %cmp99 = icmp slt i32 %46, %47
  br i1 %cmp99, label %for.body.101, label %for.end.116

for.body.101:                                     ; preds = %for.cond.98
  %48 = load i32, i32* %offset, align 4
  %49 = load i32, i32* %bit_offset.addr, align 4
  %add102 = add nsw i32 %48, %49
  %div103 = sdiv i32 %add102, 8
  %div104 = sdiv i32 %div103, 8
  store i32 %div104, i32* %pos, align 4
  %50 = load i32, i32* %i71, align 4
  %idxprom105 = sext i32 %50 to i64
  %arrayidx106 = getelementptr inbounds [4 x i32], [4 x i32]* %subclasses, i32 0, i64 %idxprom105
  %51 = load i32, i32* %arrayidx106, align 4
  %52 = load i32, i32* %i71, align 4
  %53 = load i32, i32* %pos, align 4
  %add107 = add nsw i32 %52, %53
  %idxprom108 = sext i32 %add107 to i64
  %54 = load i32*, i32** %classes.addr, align 8
  %arrayidx109 = getelementptr inbounds i32, i32* %54, i64 %idxprom108
  %55 = load i32, i32* %arrayidx109, align 4
  %call110 = call i32 @merge_classes(i32 %51, i32 %55)
  %56 = load i32, i32* %i71, align 4
  %57 = load i32, i32* %pos, align 4
  %add111 = add nsw i32 %56, %57
  %idxprom112 = sext i32 %add111 to i64
  %58 = load i32*, i32** %classes.addr, align 8
  %arrayidx113 = getelementptr inbounds i32, i32* %58, i64 %idxprom112
  store i32 %call110, i32* %arrayidx113, align 4
  br label %for.inc.114

for.inc.114:                                      ; preds = %for.body.101
  %59 = load i32, i32* %i71, align 4
  %inc115 = add nsw i32 %59, 1
  store i32 %inc115, i32* %i71, align 4
  br label %for.cond.98

for.end.116:                                      ; preds = %for.cond.98
  br label %for.inc.117

for.inc.117:                                      ; preds = %for.end.116
  %60 = load i32, i32* %i71, align 4
  %inc118 = add nsw i32 %60, 1
  store i32 %inc118, i32* %i71, align 4
  br label %for.cond.72

for.end.119:                                      ; preds = %for.cond.72
  br label %if.end.120

if.end.120:                                       ; preds = %for.end.119, %land.lhs.true.58, %if.then.54
  %61 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type121 = bitcast %union.tree_node* %61 to %struct.tree_type*
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type121, i32 0, i32 1
  %62 = load %union.tree_node*, %union.tree_node** %values, align 8
  store %union.tree_node* %62, %union.tree_node** %field, align 8
  br label %for.cond.122

for.cond.122:                                     ; preds = %for.inc.206, %if.end.120
  %63 = load %union.tree_node*, %union.tree_node** %field, align 8
  %tobool123 = icmp ne %union.tree_node* %63, null
  br i1 %tobool123, label %for.body.124, label %for.end.208

for.body.124:                                     ; preds = %for.cond.122
  %64 = load %union.tree_node*, %union.tree_node** %field, align 8
  %common125 = bitcast %union.tree_node* %64 to %struct.tree_common*
  %code126 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common125, i32 0, i32 2
  %bf.load127 = load i32, i32* %code126, align 8
  %bf.clear128 = and i32 %bf.load127, 255
  %cmp129 = icmp eq i32 %bf.clear128, 37
  br i1 %cmp129, label %if.then.131, label %if.end.205

if.then.131:                                      ; preds = %for.body.124
  %65 = load %union.tree_node*, %union.tree_node** %field, align 8
  %decl = bitcast %union.tree_node* %65 to %struct.tree_decl*
  %bit_field_flag = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl, i32 0, i32 5
  %66 = bitcast i48* %bit_field_flag to i64*
  %bf.load133 = load i64, i64* %66, align 8
  %bf.lshr134 = lshr i64 %bf.load133, 12
  %bf.clear135 = and i64 %bf.lshr134, 1
  %bf.cast = trunc i64 %bf.clear135 to i32
  %tobool136 = icmp ne i32 %bf.cast, 0
  br i1 %tobool136, label %if.then.137, label %if.else

if.then.137:                                      ; preds = %if.then.131
  %67 = load %union.tree_node*, %union.tree_node** %field, align 8
  %call138 = call i64 @int_bit_position(%union.tree_node* %67)
  %div139 = sdiv i64 %call138, 8
  %div140 = sdiv i64 %div139, 8
  %conv141 = trunc i64 %div140 to i32
  store i32 %conv141, i32* %i, align 4
  br label %for.cond.142

for.cond.142:                                     ; preds = %for.inc.159, %if.then.137
  %68 = load i32, i32* %i, align 4
  %conv143 = sext i32 %68 to i64
  %69 = load %union.tree_node*, %union.tree_node** %field, align 8
  %call144 = call i64 @int_bit_position(%union.tree_node* %69)
  %70 = load %union.tree_node*, %union.tree_node** %field, align 8
  %decl145 = bitcast %union.tree_node* %70 to %struct.tree_decl*
  %size = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl145, i32 0, i32 4
  %71 = load %union.tree_node*, %union.tree_node** %size, align 8
  %call146 = call i64 @tree_low_cst(%union.tree_node* %71, i32 0)
  %add147 = add nsw i64 %call144, %call146
  %add148 = add nsw i64 %add147, 63
  %div149 = sdiv i64 %add148, 8
  %div150 = sdiv i64 %div149, 8
  %cmp151 = icmp slt i64 %conv143, %div150
  br i1 %cmp151, label %for.body.153, label %for.end.161

for.body.153:                                     ; preds = %for.cond.142
  %72 = load i32, i32* %i, align 4
  %idxprom154 = sext i32 %72 to i64
  %73 = load i32*, i32** %classes.addr, align 8
  %arrayidx155 = getelementptr inbounds i32, i32* %73, i64 %idxprom154
  %74 = load i32, i32* %arrayidx155, align 4
  %call156 = call i32 @merge_classes(i32 1, i32 %74)
  %75 = load i32, i32* %i, align 4
  %idxprom157 = sext i32 %75 to i64
  %76 = load i32*, i32** %classes.addr, align 8
  %arrayidx158 = getelementptr inbounds i32, i32* %76, i64 %idxprom157
  store i32 %call156, i32* %arrayidx158, align 4
  br label %for.inc.159

for.inc.159:                                      ; preds = %for.body.153
  %77 = load i32, i32* %i, align 4
  %inc160 = add nsw i32 %77, 1
  store i32 %inc160, i32* %i, align 4
  br label %for.cond.142

for.end.161:                                      ; preds = %for.cond.142
  br label %if.end.204

if.else:                                          ; preds = %if.then.131
  %78 = load %union.tree_node*, %union.tree_node** %field, align 8
  %common162 = bitcast %union.tree_node* %78 to %struct.tree_common*
  %type163 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common162, i32 0, i32 1
  %79 = load %union.tree_node*, %union.tree_node** %type163, align 8
  %type164 = bitcast %union.tree_node* %79 to %struct.tree_type*
  %mode165 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type164, i32 0, i32 6
  %bf.load166 = load i32, i32* %mode165, align 4
  %bf.lshr167 = lshr i32 %bf.load166, 9
  %bf.clear168 = and i32 %bf.lshr167, 127
  %80 = load %union.tree_node*, %union.tree_node** %field, align 8
  %common169 = bitcast %union.tree_node* %80 to %struct.tree_common*
  %type170 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common169, i32 0, i32 1
  %81 = load %union.tree_node*, %union.tree_node** %type170, align 8
  %arraydecay171 = getelementptr inbounds [4 x i32], [4 x i32]* %subclasses, i32 0, i32 0
  %82 = load %union.tree_node*, %union.tree_node** %field, align 8
  %call172 = call i64 @int_bit_position(%union.tree_node* %82)
  %83 = load i32, i32* %bit_offset.addr, align 4
  %conv173 = sext i32 %83 to i64
  %add174 = add nsw i64 %call172, %conv173
  %rem175 = srem i64 %add174, 256
  %conv176 = trunc i64 %rem175 to i32
  %call177 = call i32 @classify_argument(i32 %bf.clear168, %union.tree_node* %81, i32* %arraydecay171, i32 %conv176)
  store i32 %call177, i32* %num132, align 4
  %84 = load i32, i32* %num132, align 4
  %tobool178 = icmp ne i32 %84, 0
  br i1 %tobool178, label %if.end.180, label %if.then.179

if.then.179:                                      ; preds = %if.else
  store i32 0, i32* %retval
  br label %return

if.end.180:                                       ; preds = %if.else
  store i32 0, i32* %i, align 4
  br label %for.cond.181

for.cond.181:                                     ; preds = %for.inc.201, %if.end.180
  %85 = load i32, i32* %i, align 4
  %86 = load i32, i32* %num132, align 4
  %cmp182 = icmp slt i32 %85, %86
  br i1 %cmp182, label %for.body.184, label %for.end.203

for.body.184:                                     ; preds = %for.cond.181
  %87 = load %union.tree_node*, %union.tree_node** %field, align 8
  %call186 = call i64 @int_bit_position(%union.tree_node* %87)
  %88 = load i32, i32* %bit_offset.addr, align 4
  %conv187 = sext i32 %88 to i64
  %add188 = add nsw i64 %call186, %conv187
  %div189 = sdiv i64 %add188, 8
  %div190 = sdiv i64 %div189, 8
  %conv191 = trunc i64 %div190 to i32
  store i32 %conv191, i32* %pos185, align 4
  %89 = load i32, i32* %i, align 4
  %idxprom192 = sext i32 %89 to i64
  %arrayidx193 = getelementptr inbounds [4 x i32], [4 x i32]* %subclasses, i32 0, i64 %idxprom192
  %90 = load i32, i32* %arrayidx193, align 4
  %91 = load i32, i32* %i, align 4
  %92 = load i32, i32* %pos185, align 4
  %add194 = add nsw i32 %91, %92
  %idxprom195 = sext i32 %add194 to i64
  %93 = load i32*, i32** %classes.addr, align 8
  %arrayidx196 = getelementptr inbounds i32, i32* %93, i64 %idxprom195
  %94 = load i32, i32* %arrayidx196, align 4
  %call197 = call i32 @merge_classes(i32 %90, i32 %94)
  %95 = load i32, i32* %i, align 4
  %96 = load i32, i32* %pos185, align 4
  %add198 = add nsw i32 %95, %96
  %idxprom199 = sext i32 %add198 to i64
  %97 = load i32*, i32** %classes.addr, align 8
  %arrayidx200 = getelementptr inbounds i32, i32* %97, i64 %idxprom199
  store i32 %call197, i32* %arrayidx200, align 4
  br label %for.inc.201

for.inc.201:                                      ; preds = %for.body.184
  %98 = load i32, i32* %i, align 4
  %inc202 = add nsw i32 %98, 1
  store i32 %inc202, i32* %i, align 4
  br label %for.cond.181

for.end.203:                                      ; preds = %for.cond.181
  br label %if.end.204

if.end.204:                                       ; preds = %for.end.203, %for.end.161
  br label %if.end.205

if.end.205:                                       ; preds = %if.end.204, %for.body.124
  br label %for.inc.206

for.inc.206:                                      ; preds = %if.end.205
  %99 = load %union.tree_node*, %union.tree_node** %field, align 8
  %common207 = bitcast %union.tree_node* %99 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common207, i32 0, i32 0
  %100 = load %union.tree_node*, %union.tree_node** %chain, align 8
  store %union.tree_node* %100, %union.tree_node** %field, align 8
  br label %for.cond.122

for.end.208:                                      ; preds = %for.cond.122
  br label %if.end.405

if.else.209:                                      ; preds = %if.end.47
  %101 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common210 = bitcast %union.tree_node* %101 to %struct.tree_common*
  %code211 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common210, i32 0, i32 2
  %bf.load212 = load i32, i32* %code211, align 8
  %bf.clear213 = and i32 %bf.load212, 255
  %cmp214 = icmp eq i32 %bf.clear213, 18
  br i1 %cmp214, label %if.then.216, label %if.else.262

if.then.216:                                      ; preds = %if.else.209
  %102 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common218 = bitcast %union.tree_node* %102 to %struct.tree_common*
  %type219 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common218, i32 0, i32 1
  %103 = load %union.tree_node*, %union.tree_node** %type219, align 8
  %type220 = bitcast %union.tree_node* %103 to %struct.tree_type*
  %mode221 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type220, i32 0, i32 6
  %bf.load222 = load i32, i32* %mode221, align 4
  %bf.lshr223 = lshr i32 %bf.load222, 9
  %bf.clear224 = and i32 %bf.lshr223, 127
  %104 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common225 = bitcast %union.tree_node* %104 to %struct.tree_common*
  %type226 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common225, i32 0, i32 1
  %105 = load %union.tree_node*, %union.tree_node** %type226, align 8
  %arraydecay227 = getelementptr inbounds [4 x i32], [4 x i32]* %subclasses, i32 0, i32 0
  %106 = load i32, i32* %bit_offset.addr, align 4
  %call228 = call i32 @classify_argument(i32 %bf.clear224, %union.tree_node* %105, i32* %arraydecay227, i32 %106)
  store i32 %call228, i32* %num217, align 4
  %107 = load i32, i32* %num217, align 4
  %tobool229 = icmp ne i32 %107, 0
  br i1 %tobool229, label %if.end.231, label %if.then.230

if.then.230:                                      ; preds = %if.then.216
  store i32 0, i32* %retval
  br label %return

if.end.231:                                       ; preds = %if.then.216
  %arrayidx232 = getelementptr inbounds [4 x i32], [4 x i32]* %subclasses, i32 0, i64 0
  %108 = load i32, i32* %arrayidx232, align 4
  %cmp233 = icmp eq i32 %108, 4
  br i1 %cmp233, label %land.lhs.true.235, label %if.end.240

land.lhs.true.235:                                ; preds = %if.end.231
  %109 = load i32, i32* %bytes, align 4
  %cmp236 = icmp ne i32 %109, 4
  br i1 %cmp236, label %if.then.238, label %if.end.240

if.then.238:                                      ; preds = %land.lhs.true.235
  %arrayidx239 = getelementptr inbounds [4 x i32], [4 x i32]* %subclasses, i32 0, i64 0
  store i32 3, i32* %arrayidx239, align 4
  br label %if.end.240

if.end.240:                                       ; preds = %if.then.238, %land.lhs.true.235, %if.end.231
  %arrayidx241 = getelementptr inbounds [4 x i32], [4 x i32]* %subclasses, i32 0, i64 0
  %110 = load i32, i32* %arrayidx241, align 4
  %cmp242 = icmp eq i32 %110, 2
  br i1 %cmp242, label %land.lhs.true.244, label %if.end.249

land.lhs.true.244:                                ; preds = %if.end.240
  %111 = load i32, i32* %bytes, align 4
  %cmp245 = icmp ne i32 %111, 4
  br i1 %cmp245, label %if.then.247, label %if.end.249

if.then.247:                                      ; preds = %land.lhs.true.244
  %arrayidx248 = getelementptr inbounds [4 x i32], [4 x i32]* %subclasses, i32 0, i64 0
  store i32 1, i32* %arrayidx248, align 4
  br label %if.end.249

if.end.249:                                       ; preds = %if.then.247, %land.lhs.true.244, %if.end.240
  store i32 0, i32* %i, align 4
  br label %for.cond.250

for.cond.250:                                     ; preds = %for.inc.259, %if.end.249
  %112 = load i32, i32* %i, align 4
  %113 = load i32, i32* %words, align 4
  %cmp251 = icmp slt i32 %112, %113
  br i1 %cmp251, label %for.body.253, label %for.end.261

for.body.253:                                     ; preds = %for.cond.250
  %114 = load i32, i32* %i, align 4
  %115 = load i32, i32* %num217, align 4
  %rem254 = srem i32 %114, %115
  %idxprom255 = sext i32 %rem254 to i64
  %arrayidx256 = getelementptr inbounds [4 x i32], [4 x i32]* %subclasses, i32 0, i64 %idxprom255
  %116 = load i32, i32* %arrayidx256, align 4
  %117 = load i32, i32* %i, align 4
  %idxprom257 = sext i32 %117 to i64
  %118 = load i32*, i32** %classes.addr, align 8
  %arrayidx258 = getelementptr inbounds i32, i32* %118, i64 %idxprom257
  store i32 %116, i32* %arrayidx258, align 4
  br label %for.inc.259

for.inc.259:                                      ; preds = %for.body.253
  %119 = load i32, i32* %i, align 4
  %inc260 = add nsw i32 %119, 1
  store i32 %inc260, i32* %i, align 4
  br label %for.cond.250

for.end.261:                                      ; preds = %for.cond.250
  br label %if.end.404

if.else.262:                                      ; preds = %if.else.209
  %120 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common263 = bitcast %union.tree_node* %120 to %struct.tree_common*
  %code264 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common263, i32 0, i32 2
  %bf.load265 = load i32, i32* %code264, align 8
  %bf.clear266 = and i32 %bf.load265, 255
  %cmp267 = icmp eq i32 %bf.clear266, 21
  br i1 %cmp267, label %if.then.276, label %lor.lhs.false.269

lor.lhs.false.269:                                ; preds = %if.else.262
  %121 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common270 = bitcast %union.tree_node* %121 to %struct.tree_common*
  %code271 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common270, i32 0, i32 2
  %bf.load272 = load i32, i32* %code271, align 8
  %bf.clear273 = and i32 %bf.load272, 255
  %cmp274 = icmp eq i32 %bf.clear273, 22
  br i1 %cmp274, label %if.then.276, label %if.else.402

if.then.276:                                      ; preds = %lor.lhs.false.269, %if.else.262
  %122 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type277 = bitcast %union.tree_node* %122 to %struct.tree_type*
  %binfo278 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type277, i32 0, i32 16
  %123 = load %union.tree_node*, %union.tree_node** %binfo278, align 8
  %cmp279 = icmp ne %union.tree_node* %123, null
  br i1 %cmp279, label %land.lhs.true.281, label %if.end.355

land.lhs.true.281:                                ; preds = %if.then.276
  %124 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type282 = bitcast %union.tree_node* %124 to %struct.tree_type*
  %binfo283 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type282, i32 0, i32 16
  %125 = load %union.tree_node*, %union.tree_node** %binfo283, align 8
  %vec284 = bitcast %union.tree_node* %125 to %struct.tree_vec*
  %a285 = getelementptr inbounds %struct.tree_vec, %struct.tree_vec* %vec284, i32 0, i32 2
  %arrayidx286 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %a285, i32 0, i64 4
  %126 = load %union.tree_node*, %union.tree_node** %arrayidx286, align 8
  %cmp287 = icmp ne %union.tree_node* %126, null
  br i1 %cmp287, label %if.then.289, label %if.end.355

if.then.289:                                      ; preds = %land.lhs.true.281
  %127 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type291 = bitcast %union.tree_node* %127 to %struct.tree_type*
  %binfo292 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type291, i32 0, i32 16
  %128 = load %union.tree_node*, %union.tree_node** %binfo292, align 8
  %vec293 = bitcast %union.tree_node* %128 to %struct.tree_vec*
  %a294 = getelementptr inbounds %struct.tree_vec, %struct.tree_vec* %vec293, i32 0, i32 2
  %arrayidx295 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %a294, i32 0, i64 4
  %129 = load %union.tree_node*, %union.tree_node** %arrayidx295, align 8
  store %union.tree_node* %129, %union.tree_node** %bases290, align 8
  %130 = load %union.tree_node*, %union.tree_node** %bases290, align 8
  %vec297 = bitcast %union.tree_node* %130 to %struct.tree_vec*
  %length298 = getelementptr inbounds %struct.tree_vec, %struct.tree_vec* %vec297, i32 0, i32 1
  %131 = load i32, i32* %length298, align 4
  store i32 %131, i32* %n_bases296, align 4
  store i32 0, i32* %i299, align 4
  br label %for.cond.300

for.cond.300:                                     ; preds = %for.inc.352, %if.then.289
  %132 = load i32, i32* %i299, align 4
  %133 = load i32, i32* %n_bases296, align 4
  %cmp301 = icmp slt i32 %132, %133
  br i1 %cmp301, label %for.body.303, label %for.end.354

for.body.303:                                     ; preds = %for.cond.300
  %134 = load i32, i32* %i299, align 4
  %idxprom305 = sext i32 %134 to i64
  %135 = load %union.tree_node*, %union.tree_node** %bases290, align 8
  %vec306 = bitcast %union.tree_node* %135 to %struct.tree_vec*
  %a307 = getelementptr inbounds %struct.tree_vec, %struct.tree_vec* %vec306, i32 0, i32 2
  %arrayidx308 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %a307, i32 0, i64 %idxprom305
  %136 = load %union.tree_node*, %union.tree_node** %arrayidx308, align 8
  store %union.tree_node* %136, %union.tree_node** %binfo304, align 8
  %137 = load %union.tree_node*, %union.tree_node** %binfo304, align 8
  %vec311 = bitcast %union.tree_node* %137 to %struct.tree_vec*
  %a312 = getelementptr inbounds %struct.tree_vec, %struct.tree_vec* %vec311, i32 0, i32 2
  %arrayidx313 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %a312, i32 0, i64 1
  %138 = load %union.tree_node*, %union.tree_node** %arrayidx313, align 8
  %call314 = call i64 @tree_low_cst(%union.tree_node* %138, i32 0)
  %mul315 = mul nsw i64 %call314, 8
  %conv316 = trunc i64 %mul315 to i32
  store i32 %conv316, i32* %offset310, align 4
  %139 = load %union.tree_node*, %union.tree_node** %binfo304, align 8
  %common318 = bitcast %union.tree_node* %139 to %struct.tree_common*
  %type319 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common318, i32 0, i32 1
  %140 = load %union.tree_node*, %union.tree_node** %type319, align 8
  store %union.tree_node* %140, %union.tree_node** %type317, align 8
  %141 = load %union.tree_node*, %union.tree_node** %type317, align 8
  %type320 = bitcast %union.tree_node* %141 to %struct.tree_type*
  %mode321 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type320, i32 0, i32 6
  %bf.load322 = load i32, i32* %mode321, align 4
  %bf.lshr323 = lshr i32 %bf.load322, 9
  %bf.clear324 = and i32 %bf.lshr323, 127
  %142 = load %union.tree_node*, %union.tree_node** %type317, align 8
  %arraydecay325 = getelementptr inbounds [4 x i32], [4 x i32]* %subclasses, i32 0, i32 0
  %143 = load i32, i32* %offset310, align 4
  %144 = load i32, i32* %bit_offset.addr, align 4
  %add326 = add nsw i32 %143, %144
  %rem327 = srem i32 %add326, 256
  %call328 = call i32 @classify_argument(i32 %bf.clear324, %union.tree_node* %142, i32* %arraydecay325, i32 %rem327)
  store i32 %call328, i32* %num309, align 4
  %145 = load i32, i32* %num309, align 4
  %tobool329 = icmp ne i32 %145, 0
  br i1 %tobool329, label %if.end.331, label %if.then.330

if.then.330:                                      ; preds = %for.body.303
  store i32 0, i32* %retval
  br label %return

if.end.331:                                       ; preds = %for.body.303
  store i32 0, i32* %i299, align 4
  br label %for.cond.332

for.cond.332:                                     ; preds = %for.inc.349, %if.end.331
  %146 = load i32, i32* %i299, align 4
  %147 = load i32, i32* %num309, align 4
  %cmp333 = icmp slt i32 %146, %147
  br i1 %cmp333, label %for.body.335, label %for.end.351

for.body.335:                                     ; preds = %for.cond.332
  %148 = load i32, i32* %offset310, align 4
  %149 = load i32, i32* %bit_offset.addr, align 4
  %add337 = add nsw i32 %148, %149
  %div338 = sdiv i32 %add337, 8
  %div339 = sdiv i32 %div338, 8
  store i32 %div339, i32* %pos336, align 4
  %150 = load i32, i32* %i299, align 4
  %idxprom340 = sext i32 %150 to i64
  %arrayidx341 = getelementptr inbounds [4 x i32], [4 x i32]* %subclasses, i32 0, i64 %idxprom340
  %151 = load i32, i32* %arrayidx341, align 4
  %152 = load i32, i32* %i299, align 4
  %153 = load i32, i32* %pos336, align 4
  %add342 = add nsw i32 %152, %153
  %idxprom343 = sext i32 %add342 to i64
  %154 = load i32*, i32** %classes.addr, align 8
  %arrayidx344 = getelementptr inbounds i32, i32* %154, i64 %idxprom343
  %155 = load i32, i32* %arrayidx344, align 4
  %call345 = call i32 @merge_classes(i32 %151, i32 %155)
  %156 = load i32, i32* %i299, align 4
  %157 = load i32, i32* %pos336, align 4
  %add346 = add nsw i32 %156, %157
  %idxprom347 = sext i32 %add346 to i64
  %158 = load i32*, i32** %classes.addr, align 8
  %arrayidx348 = getelementptr inbounds i32, i32* %158, i64 %idxprom347
  store i32 %call345, i32* %arrayidx348, align 4
  br label %for.inc.349

for.inc.349:                                      ; preds = %for.body.335
  %159 = load i32, i32* %i299, align 4
  %inc350 = add nsw i32 %159, 1
  store i32 %inc350, i32* %i299, align 4
  br label %for.cond.332

for.end.351:                                      ; preds = %for.cond.332
  br label %for.inc.352

for.inc.352:                                      ; preds = %for.end.351
  %160 = load i32, i32* %i299, align 4
  %inc353 = add nsw i32 %160, 1
  store i32 %inc353, i32* %i299, align 4
  br label %for.cond.300

for.end.354:                                      ; preds = %for.cond.300
  br label %if.end.355

if.end.355:                                       ; preds = %for.end.354, %land.lhs.true.281, %if.then.276
  %161 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type356 = bitcast %union.tree_node* %161 to %struct.tree_type*
  %values357 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type356, i32 0, i32 1
  %162 = load %union.tree_node*, %union.tree_node** %values357, align 8
  store %union.tree_node* %162, %union.tree_node** %field, align 8
  br label %for.cond.358

for.cond.358:                                     ; preds = %for.inc.398, %if.end.355
  %163 = load %union.tree_node*, %union.tree_node** %field, align 8
  %tobool359 = icmp ne %union.tree_node* %163, null
  br i1 %tobool359, label %for.body.360, label %for.end.401

for.body.360:                                     ; preds = %for.cond.358
  %164 = load %union.tree_node*, %union.tree_node** %field, align 8
  %common361 = bitcast %union.tree_node* %164 to %struct.tree_common*
  %code362 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common361, i32 0, i32 2
  %bf.load363 = load i32, i32* %code362, align 8
  %bf.clear364 = and i32 %bf.load363, 255
  %cmp365 = icmp eq i32 %bf.clear364, 37
  br i1 %cmp365, label %if.then.367, label %if.end.397

if.then.367:                                      ; preds = %for.body.360
  %165 = load %union.tree_node*, %union.tree_node** %field, align 8
  %common369 = bitcast %union.tree_node* %165 to %struct.tree_common*
  %type370 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common369, i32 0, i32 1
  %166 = load %union.tree_node*, %union.tree_node** %type370, align 8
  %type371 = bitcast %union.tree_node* %166 to %struct.tree_type*
  %mode372 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type371, i32 0, i32 6
  %bf.load373 = load i32, i32* %mode372, align 4
  %bf.lshr374 = lshr i32 %bf.load373, 9
  %bf.clear375 = and i32 %bf.lshr374, 127
  %167 = load %union.tree_node*, %union.tree_node** %field, align 8
  %common376 = bitcast %union.tree_node* %167 to %struct.tree_common*
  %type377 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common376, i32 0, i32 1
  %168 = load %union.tree_node*, %union.tree_node** %type377, align 8
  %arraydecay378 = getelementptr inbounds [4 x i32], [4 x i32]* %subclasses, i32 0, i32 0
  %169 = load i32, i32* %bit_offset.addr, align 4
  %call379 = call i32 @classify_argument(i32 %bf.clear375, %union.tree_node* %168, i32* %arraydecay378, i32 %169)
  store i32 %call379, i32* %num368, align 4
  %170 = load i32, i32* %num368, align 4
  %tobool380 = icmp ne i32 %170, 0
  br i1 %tobool380, label %if.end.382, label %if.then.381

if.then.381:                                      ; preds = %if.then.367
  store i32 0, i32* %retval
  br label %return

if.end.382:                                       ; preds = %if.then.367
  store i32 0, i32* %i, align 4
  br label %for.cond.383

for.cond.383:                                     ; preds = %for.inc.394, %if.end.382
  %171 = load i32, i32* %i, align 4
  %172 = load i32, i32* %num368, align 4
  %cmp384 = icmp slt i32 %171, %172
  br i1 %cmp384, label %for.body.386, label %for.end.396

for.body.386:                                     ; preds = %for.cond.383
  %173 = load i32, i32* %i, align 4
  %idxprom387 = sext i32 %173 to i64
  %arrayidx388 = getelementptr inbounds [4 x i32], [4 x i32]* %subclasses, i32 0, i64 %idxprom387
  %174 = load i32, i32* %arrayidx388, align 4
  %175 = load i32, i32* %i, align 4
  %idxprom389 = sext i32 %175 to i64
  %176 = load i32*, i32** %classes.addr, align 8
  %arrayidx390 = getelementptr inbounds i32, i32* %176, i64 %idxprom389
  %177 = load i32, i32* %arrayidx390, align 4
  %call391 = call i32 @merge_classes(i32 %174, i32 %177)
  %178 = load i32, i32* %i, align 4
  %idxprom392 = sext i32 %178 to i64
  %179 = load i32*, i32** %classes.addr, align 8
  %arrayidx393 = getelementptr inbounds i32, i32* %179, i64 %idxprom392
  store i32 %call391, i32* %arrayidx393, align 4
  br label %for.inc.394

for.inc.394:                                      ; preds = %for.body.386
  %180 = load i32, i32* %i, align 4
  %inc395 = add nsw i32 %180, 1
  store i32 %inc395, i32* %i, align 4
  br label %for.cond.383

for.end.396:                                      ; preds = %for.cond.383
  br label %if.end.397

if.end.397:                                       ; preds = %for.end.396, %for.body.360
  br label %for.inc.398

for.inc.398:                                      ; preds = %if.end.397
  %181 = load %union.tree_node*, %union.tree_node** %field, align 8
  %common399 = bitcast %union.tree_node* %181 to %struct.tree_common*
  %chain400 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common399, i32 0, i32 0
  %182 = load %union.tree_node*, %union.tree_node** %chain400, align 8
  store %union.tree_node* %182, %union.tree_node** %field, align 8
  br label %for.cond.358

for.end.401:                                      ; preds = %for.cond.358
  br label %if.end.403

if.else.402:                                      ; preds = %lor.lhs.false.269
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 1809, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__FUNCTION__.classify_argument, i32 0, i32 0)) #7
  unreachable

if.end.403:                                       ; preds = %for.end.401
  br label %if.end.404

if.end.404:                                       ; preds = %if.end.403, %for.end.261
  br label %if.end.405

if.end.405:                                       ; preds = %if.end.404, %for.end.208
  store i32 0, i32* %i, align 4
  br label %for.cond.406

for.cond.406:                                     ; preds = %for.inc.450, %if.end.405
  %183 = load i32, i32* %i, align 4
  %184 = load i32, i32* %words, align 4
  %cmp407 = icmp slt i32 %183, %184
  br i1 %cmp407, label %for.body.409, label %for.end.452

for.body.409:                                     ; preds = %for.cond.406
  %185 = load i32, i32* %i, align 4
  %idxprom410 = sext i32 %185 to i64
  %186 = load i32*, i32** %classes.addr, align 8
  %arrayidx411 = getelementptr inbounds i32, i32* %186, i64 %idxprom410
  %187 = load i32, i32* %arrayidx411, align 4
  %cmp412 = icmp eq i32 %187, 9
  br i1 %cmp412, label %if.then.414, label %if.end.415

if.then.414:                                      ; preds = %for.body.409
  store i32 0, i32* %retval
  br label %return

if.end.415:                                       ; preds = %for.body.409
  %188 = load i32, i32* %i, align 4
  %idxprom416 = sext i32 %188 to i64
  %189 = load i32*, i32** %classes.addr, align 8
  %arrayidx417 = getelementptr inbounds i32, i32* %189, i64 %idxprom416
  %190 = load i32, i32* %arrayidx417, align 4
  %cmp418 = icmp eq i32 %190, 6
  br i1 %cmp418, label %land.lhs.true.420, label %if.end.432

land.lhs.true.420:                                ; preds = %if.end.415
  %191 = load i32, i32* %i, align 4
  %cmp421 = icmp eq i32 %191, 0
  br i1 %cmp421, label %if.then.429, label %lor.lhs.false.423

lor.lhs.false.423:                                ; preds = %land.lhs.true.420
  %192 = load i32, i32* %i, align 4
  %sub424 = sub nsw i32 %192, 1
  %idxprom425 = sext i32 %sub424 to i64
  %193 = load i32*, i32** %classes.addr, align 8
  %arrayidx426 = getelementptr inbounds i32, i32* %193, i64 %idxprom425
  %194 = load i32, i32* %arrayidx426, align 4
  %cmp427 = icmp ne i32 %194, 3
  br i1 %cmp427, label %if.then.429, label %if.end.432

if.then.429:                                      ; preds = %lor.lhs.false.423, %land.lhs.true.420
  %195 = load i32, i32* %i, align 4
  %idxprom430 = sext i32 %195 to i64
  %196 = load i32*, i32** %classes.addr, align 8
  %arrayidx431 = getelementptr inbounds i32, i32* %196, i64 %idxprom430
  store i32 3, i32* %arrayidx431, align 4
  br label %if.end.432

if.end.432:                                       ; preds = %if.then.429, %lor.lhs.false.423, %if.end.415
  %197 = load i32, i32* %i, align 4
  %idxprom433 = sext i32 %197 to i64
  %198 = load i32*, i32** %classes.addr, align 8
  %arrayidx434 = getelementptr inbounds i32, i32* %198, i64 %idxprom433
  %199 = load i32, i32* %arrayidx434, align 4
  %cmp435 = icmp eq i32 %199, 8
  br i1 %cmp435, label %land.lhs.true.437, label %if.end.449

land.lhs.true.437:                                ; preds = %if.end.432
  %200 = load i32, i32* %i, align 4
  %cmp438 = icmp eq i32 %200, 0
  br i1 %cmp438, label %if.then.446, label %lor.lhs.false.440

lor.lhs.false.440:                                ; preds = %land.lhs.true.437
  %201 = load i32, i32* %i, align 4
  %sub441 = sub nsw i32 %201, 1
  %idxprom442 = sext i32 %sub441 to i64
  %202 = load i32*, i32** %classes.addr, align 8
  %arrayidx443 = getelementptr inbounds i32, i32* %202, i64 %idxprom442
  %203 = load i32, i32* %arrayidx443, align 4
  %cmp444 = icmp ne i32 %203, 7
  br i1 %cmp444, label %if.then.446, label %if.end.449

if.then.446:                                      ; preds = %lor.lhs.false.440, %land.lhs.true.437
  %204 = load i32, i32* %i, align 4
  %idxprom447 = sext i32 %204 to i64
  %205 = load i32*, i32** %classes.addr, align 8
  %arrayidx448 = getelementptr inbounds i32, i32* %205, i64 %idxprom447
  store i32 3, i32* %arrayidx448, align 4
  br label %if.end.449

if.end.449:                                       ; preds = %if.then.446, %lor.lhs.false.440, %if.end.432
  br label %for.inc.450

for.inc.450:                                      ; preds = %if.end.449
  %206 = load i32, i32* %i, align 4
  %inc451 = add nsw i32 %206, 1
  store i32 %inc451, i32* %i, align 4
  br label %for.cond.406

for.end.452:                                      ; preds = %for.cond.406
  %207 = load i32, i32* %words, align 4
  store i32 %207, i32* %retval
  br label %return

if.end.453:                                       ; preds = %lor.lhs.false.30, %cond.end
  %208 = load i32, i32* %mode.addr, align 4
  %cmp454 = icmp ne i32 %208, 0
  br i1 %cmp454, label %land.lhs.true.456, label %if.end.476

land.lhs.true.456:                                ; preds = %if.end.453
  %209 = load i32, i32* %mode.addr, align 4
  %cmp457 = icmp ne i32 %209, 51
  br i1 %cmp457, label %if.then.459, label %if.end.476

if.then.459:                                      ; preds = %land.lhs.true.456
  %210 = load i32, i32* %mode.addr, align 4
  %idxprom460 = sext i32 %210 to i64
  %arrayidx461 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom460
  %211 = load i16, i16* %arrayidx461, align 2
  %conv462 = zext i16 %211 to i32
  store i32 %conv462, i32* %mode_alignment, align 4
  %212 = load i32, i32* %mode.addr, align 4
  %cmp463 = icmp eq i32 %212, 17
  br i1 %cmp463, label %if.then.465, label %if.else.466

if.then.465:                                      ; preds = %if.then.459
  store i32 128, i32* %mode_alignment, align 4
  br label %if.end.471

if.else.466:                                      ; preds = %if.then.459
  %213 = load i32, i32* %mode.addr, align 4
  %cmp467 = icmp eq i32 %213, 23
  br i1 %cmp467, label %if.then.469, label %if.end.470

if.then.469:                                      ; preds = %if.else.466
  store i32 256, i32* %mode_alignment, align 4
  br label %if.end.470

if.end.470:                                       ; preds = %if.then.469, %if.else.466
  br label %if.end.471

if.end.471:                                       ; preds = %if.end.470, %if.then.465
  %214 = load i32, i32* %bit_offset.addr, align 4
  %215 = load i32, i32* %mode_alignment, align 4
  %rem472 = srem i32 %214, %215
  %tobool473 = icmp ne i32 %rem472, 0
  br i1 %tobool473, label %if.then.474, label %if.end.475

if.then.474:                                      ; preds = %if.end.471
  store i32 0, i32* %retval
  br label %return

if.end.475:                                       ; preds = %if.end.471
  br label %if.end.476

if.end.476:                                       ; preds = %if.end.475, %land.lhs.true.456, %if.end.453
  %216 = load i32, i32* %mode.addr, align 4
  switch i32 %216, label %sw.default [
    i32 5, label %sw.bb
    i32 4, label %sw.bb
    i32 3, label %sw.bb
    i32 2, label %sw.bb
    i32 27, label %sw.bb
    i32 26, label %sw.bb
    i32 25, label %sw.bb
    i32 28, label %sw.bb.488
    i32 6, label %sw.bb.488
    i32 29, label %sw.bb.491
    i32 15, label %sw.bb.496
    i32 16, label %sw.bb.504
    i32 18, label %sw.bb.506
    i32 24, label %sw.bb.509
    i32 22, label %sw.bb.514
    i32 21, label %sw.bb.517
    i32 46, label %sw.bb.519
    i32 37, label %sw.bb.519
    i32 44, label %sw.bb.522
    i32 33, label %sw.bb.522
    i32 36, label %sw.bb.522
    i32 39, label %sw.bb.522
    i32 51, label %sw.bb.524
    i32 0, label %sw.bb.524
  ]

sw.bb:                                            ; preds = %if.end.476, %if.end.476, %if.end.476, %if.end.476, %if.end.476, %if.end.476, %if.end.476
  %217 = load i32, i32* %bit_offset.addr, align 4
  %218 = load i32, i32* %mode.addr, align 4
  %idxprom477 = sext i32 %218 to i64
  %arrayidx478 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom477
  %219 = load i16, i16* %arrayidx478, align 2
  %conv479 = zext i16 %219 to i32
  %add480 = add nsw i32 %217, %conv479
  %cmp481 = icmp sle i32 %add480, 32
  br i1 %cmp481, label %if.then.483, label %if.else.485

if.then.483:                                      ; preds = %sw.bb
  %220 = load i32*, i32** %classes.addr, align 8
  %arrayidx484 = getelementptr inbounds i32, i32* %220, i64 0
  store i32 2, i32* %arrayidx484, align 4
  br label %if.end.487

if.else.485:                                      ; preds = %sw.bb
  %221 = load i32*, i32** %classes.addr, align 8
  %arrayidx486 = getelementptr inbounds i32, i32* %221, i64 0
  store i32 1, i32* %arrayidx486, align 4
  br label %if.end.487

if.end.487:                                       ; preds = %if.else.485, %if.then.483
  store i32 1, i32* %retval
  br label %return

sw.bb.488:                                        ; preds = %if.end.476, %if.end.476
  %222 = load i32*, i32** %classes.addr, align 8
  %arrayidx489 = getelementptr inbounds i32, i32* %222, i64 1
  store i32 1, i32* %arrayidx489, align 4
  %223 = load i32*, i32** %classes.addr, align 8
  %arrayidx490 = getelementptr inbounds i32, i32* %223, i64 0
  store i32 1, i32* %arrayidx490, align 4
  store i32 2, i32* %retval
  br label %return

sw.bb.491:                                        ; preds = %if.end.476
  %224 = load i32*, i32** %classes.addr, align 8
  %arrayidx492 = getelementptr inbounds i32, i32* %224, i64 1
  store i32 1, i32* %arrayidx492, align 4
  %225 = load i32*, i32** %classes.addr, align 8
  %arrayidx493 = getelementptr inbounds i32, i32* %225, i64 0
  store i32 1, i32* %arrayidx493, align 4
  %226 = load i32*, i32** %classes.addr, align 8
  %arrayidx494 = getelementptr inbounds i32, i32* %226, i64 3
  store i32 1, i32* %arrayidx494, align 4
  %227 = load i32*, i32** %classes.addr, align 8
  %arrayidx495 = getelementptr inbounds i32, i32* %227, i64 2
  store i32 1, i32* %arrayidx495, align 4
  store i32 4, i32* %retval
  br label %return

sw.bb.496:                                        ; preds = %if.end.476
  %228 = load i32, i32* %bit_offset.addr, align 4
  %rem497 = srem i32 %228, 64
  %tobool498 = icmp ne i32 %rem497, 0
  br i1 %tobool498, label %if.else.501, label %if.then.499

if.then.499:                                      ; preds = %sw.bb.496
  %229 = load i32*, i32** %classes.addr, align 8
  %arrayidx500 = getelementptr inbounds i32, i32* %229, i64 0
  store i32 4, i32* %arrayidx500, align 4
  br label %if.end.503

if.else.501:                                      ; preds = %sw.bb.496
  %230 = load i32*, i32** %classes.addr, align 8
  %arrayidx502 = getelementptr inbounds i32, i32* %230, i64 0
  store i32 3, i32* %arrayidx502, align 4
  br label %if.end.503

if.end.503:                                       ; preds = %if.else.501, %if.then.499
  store i32 1, i32* %retval
  br label %return

sw.bb.504:                                        ; preds = %if.end.476
  %231 = load i32*, i32** %classes.addr, align 8
  %arrayidx505 = getelementptr inbounds i32, i32* %231, i64 0
  store i32 5, i32* %arrayidx505, align 4
  store i32 1, i32* %retval
  br label %return

sw.bb.506:                                        ; preds = %if.end.476
  %232 = load i32*, i32** %classes.addr, align 8
  %arrayidx507 = getelementptr inbounds i32, i32* %232, i64 0
  store i32 7, i32* %arrayidx507, align 4
  %233 = load i32*, i32** %classes.addr, align 8
  %arrayidx508 = getelementptr inbounds i32, i32* %233, i64 1
  store i32 8, i32* %arrayidx508, align 4
  store i32 2, i32* %retval
  br label %return

sw.bb.509:                                        ; preds = %if.end.476
  %234 = load i32*, i32** %classes.addr, align 8
  %arrayidx510 = getelementptr inbounds i32, i32* %234, i64 0
  store i32 7, i32* %arrayidx510, align 4
  %235 = load i32*, i32** %classes.addr, align 8
  %arrayidx511 = getelementptr inbounds i32, i32* %235, i64 1
  store i32 8, i32* %arrayidx511, align 4
  %236 = load i32*, i32** %classes.addr, align 8
  %arrayidx512 = getelementptr inbounds i32, i32* %236, i64 2
  store i32 7, i32* %arrayidx512, align 4
  %237 = load i32*, i32** %classes.addr, align 8
  %arrayidx513 = getelementptr inbounds i32, i32* %237, i64 3
  store i32 8, i32* %arrayidx513, align 4
  store i32 4, i32* %retval
  br label %return

sw.bb.514:                                        ; preds = %if.end.476
  %238 = load i32*, i32** %classes.addr, align 8
  %arrayidx515 = getelementptr inbounds i32, i32* %238, i64 0
  store i32 5, i32* %arrayidx515, align 4
  %239 = load i32*, i32** %classes.addr, align 8
  %arrayidx516 = getelementptr inbounds i32, i32* %239, i64 1
  store i32 5, i32* %arrayidx516, align 4
  store i32 2, i32* %retval
  br label %return

sw.bb.517:                                        ; preds = %if.end.476
  %240 = load i32*, i32** %classes.addr, align 8
  %arrayidx518 = getelementptr inbounds i32, i32* %240, i64 0
  store i32 3, i32* %arrayidx518, align 4
  store i32 1, i32* %retval
  br label %return

sw.bb.519:                                        ; preds = %if.end.476, %if.end.476
  %241 = load i32*, i32** %classes.addr, align 8
  %arrayidx520 = getelementptr inbounds i32, i32* %241, i64 0
  store i32 3, i32* %arrayidx520, align 4
  %242 = load i32*, i32** %classes.addr, align 8
  %arrayidx521 = getelementptr inbounds i32, i32* %242, i64 1
  store i32 6, i32* %arrayidx521, align 4
  store i32 2, i32* %retval
  br label %return

sw.bb.522:                                        ; preds = %if.end.476, %if.end.476, %if.end.476, %if.end.476
  %243 = load i32*, i32** %classes.addr, align 8
  %arrayidx523 = getelementptr inbounds i32, i32* %243, i64 0
  store i32 3, i32* %arrayidx523, align 4
  store i32 1, i32* %retval
  br label %return

sw.bb.524:                                        ; preds = %if.end.476, %if.end.476
  store i32 0, i32* %retval
  br label %return

sw.default:                                       ; preds = %if.end.476
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 1912, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__FUNCTION__.classify_argument, i32 0, i32 0)) #7
  unreachable

return:                                           ; preds = %sw.bb.524, %sw.bb.522, %sw.bb.519, %sw.bb.517, %sw.bb.514, %sw.bb.509, %sw.bb.506, %sw.bb.504, %if.end.503, %sw.bb.491, %sw.bb.488, %if.end.487, %if.then.474, %for.end.452, %if.then.414, %if.then.381, %if.then.330, %if.then.230, %if.then.179, %if.then.96, %if.then.45, %if.then.39
  %244 = load i32, i32* %retval
  ret i32 %244
}

declare i64 @tree_low_cst(%union.tree_node*, i32) #0

; Function Attrs: nounwind uwtable
define internal i32 @merge_classes(i32 %class1, i32 %class2) #1 {
entry:
  %retval = alloca i32, align 4
  %class1.addr = alloca i32, align 4
  %class2.addr = alloca i32, align 4
  store i32 %class1, i32* %class1.addr, align 4
  store i32 %class2, i32* %class2.addr, align 4
  %0 = load i32, i32* %class1.addr, align 4
  %1 = load i32, i32* %class2.addr, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %class1.addr, align 4
  store i32 %2, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i32, i32* %class1.addr, align 4
  %cmp1 = icmp eq i32 %3, 0
  br i1 %cmp1, label %if.then.2, label %if.end.3

if.then.2:                                        ; preds = %if.end
  %4 = load i32, i32* %class2.addr, align 4
  store i32 %4, i32* %retval
  br label %return

if.end.3:                                         ; preds = %if.end
  %5 = load i32, i32* %class2.addr, align 4
  %cmp4 = icmp eq i32 %5, 0
  br i1 %cmp4, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %if.end.3
  %6 = load i32, i32* %class1.addr, align 4
  store i32 %6, i32* %retval
  br label %return

if.end.6:                                         ; preds = %if.end.3
  %7 = load i32, i32* %class1.addr, align 4
  %cmp7 = icmp eq i32 %7, 9
  br i1 %cmp7, label %if.then.9, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.6
  %8 = load i32, i32* %class2.addr, align 4
  %cmp8 = icmp eq i32 %8, 9
  br i1 %cmp8, label %if.then.9, label %if.end.10

if.then.9:                                        ; preds = %lor.lhs.false, %if.end.6
  store i32 9, i32* %retval
  br label %return

if.end.10:                                        ; preds = %lor.lhs.false
  %9 = load i32, i32* %class1.addr, align 4
  %cmp11 = icmp eq i32 %9, 2
  br i1 %cmp11, label %land.lhs.true, label %lor.lhs.false.13

land.lhs.true:                                    ; preds = %if.end.10
  %10 = load i32, i32* %class2.addr, align 4
  %cmp12 = icmp eq i32 %10, 4
  br i1 %cmp12, label %if.then.17, label %lor.lhs.false.13

lor.lhs.false.13:                                 ; preds = %land.lhs.true, %if.end.10
  %11 = load i32, i32* %class2.addr, align 4
  %cmp14 = icmp eq i32 %11, 2
  br i1 %cmp14, label %land.lhs.true.15, label %if.end.18

land.lhs.true.15:                                 ; preds = %lor.lhs.false.13
  %12 = load i32, i32* %class1.addr, align 4
  %cmp16 = icmp eq i32 %12, 4
  br i1 %cmp16, label %if.then.17, label %if.end.18

if.then.17:                                       ; preds = %land.lhs.true.15, %land.lhs.true
  store i32 2, i32* %retval
  br label %return

if.end.18:                                        ; preds = %land.lhs.true.15, %lor.lhs.false.13
  %13 = load i32, i32* %class1.addr, align 4
  %cmp19 = icmp eq i32 %13, 1
  br i1 %cmp19, label %if.then.26, label %lor.lhs.false.20

lor.lhs.false.20:                                 ; preds = %if.end.18
  %14 = load i32, i32* %class1.addr, align 4
  %cmp21 = icmp eq i32 %14, 2
  br i1 %cmp21, label %if.then.26, label %lor.lhs.false.22

lor.lhs.false.22:                                 ; preds = %lor.lhs.false.20
  %15 = load i32, i32* %class2.addr, align 4
  %cmp23 = icmp eq i32 %15, 1
  br i1 %cmp23, label %if.then.26, label %lor.lhs.false.24

lor.lhs.false.24:                                 ; preds = %lor.lhs.false.22
  %16 = load i32, i32* %class2.addr, align 4
  %cmp25 = icmp eq i32 %16, 2
  br i1 %cmp25, label %if.then.26, label %if.end.27

if.then.26:                                       ; preds = %lor.lhs.false.24, %lor.lhs.false.22, %lor.lhs.false.20, %if.end.18
  store i32 1, i32* %retval
  br label %return

if.end.27:                                        ; preds = %lor.lhs.false.24
  %17 = load i32, i32* %class1.addr, align 4
  %cmp28 = icmp eq i32 %17, 7
  br i1 %cmp28, label %if.then.35, label %lor.lhs.false.29

lor.lhs.false.29:                                 ; preds = %if.end.27
  %18 = load i32, i32* %class1.addr, align 4
  %cmp30 = icmp eq i32 %18, 8
  br i1 %cmp30, label %if.then.35, label %lor.lhs.false.31

lor.lhs.false.31:                                 ; preds = %lor.lhs.false.29
  %19 = load i32, i32* %class2.addr, align 4
  %cmp32 = icmp eq i32 %19, 7
  br i1 %cmp32, label %if.then.35, label %lor.lhs.false.33

lor.lhs.false.33:                                 ; preds = %lor.lhs.false.31
  %20 = load i32, i32* %class2.addr, align 4
  %cmp34 = icmp eq i32 %20, 8
  br i1 %cmp34, label %if.then.35, label %if.end.36

if.then.35:                                       ; preds = %lor.lhs.false.33, %lor.lhs.false.31, %lor.lhs.false.29, %if.end.27
  store i32 9, i32* %retval
  br label %return

if.end.36:                                        ; preds = %lor.lhs.false.33
  store i32 3, i32* %retval
  br label %return

return:                                           ; preds = %if.end.36, %if.then.35, %if.then.26, %if.then.17, %if.then.9, %if.then.5, %if.then.2, %if.then
  %21 = load i32, i32* %retval
  ret i32 %21
}

declare i64 @int_bit_position(%union.tree_node*) #0

declare i32 @mode_for_size(i32, i32, i32) #0

declare i64 @get_frame_size() #0

; Function Attrs: nounwind uwtable
define internal i32 @ix86_nsaved_regs() #1 {
entry:
  %nregs = alloca i32, align 4
  %regno = alloca i32, align 4
  store i32 0, i32* %nregs, align 4
  store i32 52, i32* %regno, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %regno, align 4
  %cmp = icmp sge i32 %0, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %regno, align 4
  %call = call i32 @ix86_save_reg(i32 %1, i32 1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %2 = load i32, i32* %nregs, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* %nregs, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %3 = load i32, i32* %regno, align 4
  %dec = add nsw i32 %3, -1
  store i32 %dec, i32* %regno, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %4 = load i32, i32* %nregs, align 4
  ret i32 %4
}

; Function Attrs: nounwind readonly
declare i32 @strncmp(i8*, i8*, i64) #2

declare i64 @new_alias_set() #0

; Function Attrs: nounwind uwtable
define internal i32 @ix86_fp_comparison_sahf_cost(i32 %code) #1 {
entry:
  %retval = alloca i32, align 4
  %code.addr = alloca i32, align 4
  %bypass_code = alloca i32, align 4
  %first_code = alloca i32, align 4
  %second_code = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  %0 = load i32, i32* @ix86_cpu, align 4
  %shl = shl i32 1, %0
  %and = and i32 88, %shl
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.lhs.true, label %land.lhs.true.3

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* @target_flags, align 4
  %and1 = and i32 %1, 33554432
  %tobool2 = icmp ne i32 %and1, 0
  br i1 %tobool2, label %land.lhs.true.3, label %if.end

land.lhs.true.3:                                  ; preds = %land.lhs.true, %entry
  %2 = load i32, i32* @optimize_size, align 4
  %tobool4 = icmp ne i32 %2, 0
  br i1 %tobool4, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true.3
  store i32 1024, i32* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true.3, %land.lhs.true
  %3 = load i32, i32* %code.addr, align 4
  call void @ix86_fp_comparison_codes(i32 %3, i32* %bypass_code, i32* %first_code, i32* %second_code)
  %4 = load i32, i32* %bypass_code, align 4
  %cmp = icmp ne i32 %4, 1
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.end
  %5 = load i32, i32* %second_code, align 4
  %cmp5 = icmp ne i32 %5, 1
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.end
  %6 = phi i1 [ true, %if.end ], [ %cmp5, %lor.rhs ]
  %lor.ext = zext i1 %6 to i32
  %add = add nsw i32 %lor.ext, 3
  store i32 %add, i32* %retval
  br label %return

return:                                           ; preds = %lor.end, %if.then
  %7 = load i32, i32* %retval
  ret i32 %7
}

; Function Attrs: nounwind uwtable
define internal i32 @ix86_fp_comparison_arithmetics_cost(i32 %code) #1 {
entry:
  %retval = alloca i32, align 4
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  %0 = load i32, i32* @target_flags, align 4
  %and = and i32 %0, 16
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 4, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %code.addr, align 4
  switch i32 %1, label %sw.default [
    i32 117, label %sw.bb
    i32 118, label %sw.bb
    i32 119, label %sw.bb
    i32 105, label %sw.bb
    i32 104, label %sw.bb
    i32 112, label %sw.bb
    i32 113, label %sw.bb
    i32 114, label %sw.bb
    i32 107, label %sw.bb.1
    i32 102, label %sw.bb.1
    i32 103, label %sw.bb.1
    i32 115, label %sw.bb.1
    i32 106, label %sw.bb.2
    i32 116, label %sw.bb.2
  ]

sw.bb:                                            ; preds = %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end
  store i32 4, i32* %retval
  br label %return

sw.bb.1:                                          ; preds = %if.end, %if.end, %if.end, %if.end
  store i32 5, i32* %retval
  br label %return

sw.bb.2:                                          ; preds = %if.end, %if.end
  store i32 6, i32* %retval
  br label %return

sw.default:                                       ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 7422, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @__FUNCTION__.ix86_fp_comparison_arithmetics_cost, i32 0, i32 0)) #7
  unreachable

return:                                           ; preds = %sw.bb.2, %sw.bb.1, %sw.bb, %if.then
  %2 = load i32, i32* %retval
  ret i32 %2
}

declare %struct.rtx_def* @gen_x86_sahf_1(%struct.rtx_def*) #0

declare %struct.rtx_def* @gen_testqi_ext_ccno_0(%struct.rtx_def*, %struct.rtx_def*) #0

declare %struct.rtx_def* @gen_andqi_ext_0(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #0

declare %struct.rtx_def* @gen_addqi_ext_1(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #0

declare %struct.rtx_def* @gen_cmpqi_ext_3(%struct.rtx_def*, %struct.rtx_def*) #0

declare %struct.rtx_def* @gen_xorqi_cc_ext_1(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #0

declare void @etardouble(%struct.realvaluetype* byval align 8, i64*) #0

declare void @etarldouble(%struct.realvaluetype* byval align 8, i64*) #0

declare void @etartdouble(%struct.realvaluetype* byval align 8, i64*) #0

declare %struct.rtx_def* @gen_anddi3(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #0

declare %struct.rtx_def* @gen_andsi3(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #0

declare %struct.rtx_def* @gen_testsi_ccno_1(%struct.rtx_def*, %struct.rtx_def*) #0

declare %struct.rtx_def* @gen_addqi3_cc(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #0

declare %struct.rtx_def* @gen_subdi3_carry_rex64(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #0

declare %struct.rtx_def* @gen_subsi3_carry(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #0

declare noalias i8* @xcalloc(i64, i64) #0

declare i32 @ggc_set_mark(i8*) #0

declare void @ggc_mark_rtx_children(%struct.rtx_def*) #0

; Function Attrs: nounwind
declare void @free(i8*) #3

declare i32 @recog_memoized_1(%struct.rtx_def*) #0

declare i32 @get_attr_type(%struct.rtx_def*) #0

; Function Attrs: nounwind uwtable
define internal i32 @ix86_agi_dependant(%struct.rtx_def* %insn, %struct.rtx_def* %dep_insn, i32 %insn_type) #1 {
entry:
  %retval = alloca i32, align 4
  %insn.addr = alloca %struct.rtx_def*, align 8
  %dep_insn.addr = alloca %struct.rtx_def*, align 8
  %insn_type.addr = alloca i32, align 4
  %addr = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  store %struct.rtx_def* %dep_insn, %struct.rtx_def** %dep_insn.addr, align 8
  store i32 %insn_type, i32* %insn_type.addr, align 4
  %0 = load i32, i32* %insn_type.addr, align 4
  %cmp = icmp eq i32 %0, 9
  br i1 %cmp, label %land.lhs.true, label %if.else.25

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* @ix86_cpu, align 4
  %cmp1 = icmp eq i32 %1, 2
  br i1 %cmp1, label %if.then, label %if.else.25

if.then:                                          ; preds = %land.lhs.true
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %3 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %addr, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %5 = bitcast %struct.rtx_def* %4 to i32*
  %bf.load = load i32, i32* %5, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp2 = icmp eq i32 %bf.clear, 47
  br i1 %cmp2, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %if.then
  br label %if.end.21

if.else:                                          ; preds = %if.then
  %6 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %7 = bitcast %struct.rtx_def* %6 to i32*
  %bf.load4 = load i32, i32* %7, align 8
  %bf.clear5 = and i32 %bf.load4, 65535
  %cmp6 = icmp eq i32 %bf.clear5, 39
  br i1 %cmp6, label %land.lhs.true.7, label %if.else.20

land.lhs.true.7:                                  ; preds = %if.else
  %8 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %fld8 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1
  %arrayidx9 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld8, i32 0, i64 0
  %rtvec = bitcast %union.rtunion_def* %arrayidx9 to %struct.rtvec_def**
  %9 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec, align 8
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %9, i32 0, i32 1
  %arrayidx10 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i32 0, i64 0
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx10, align 8
  %11 = bitcast %struct.rtx_def* %10 to i32*
  %bf.load11 = load i32, i32* %11, align 8
  %bf.clear12 = and i32 %bf.load11, 65535
  %cmp13 = icmp eq i32 %bf.clear12, 47
  br i1 %cmp13, label %if.then.14, label %if.else.20

if.then.14:                                       ; preds = %land.lhs.true.7
  %12 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %fld15 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1
  %arrayidx16 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld15, i32 0, i64 0
  %rtvec17 = bitcast %union.rtunion_def* %arrayidx16 to %struct.rtvec_def**
  %13 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec17, align 8
  %elem18 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %13, i32 0, i32 1
  %arrayidx19 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem18, i32 0, i64 0
  %14 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx19, align 8
  store %struct.rtx_def* %14, %struct.rtx_def** %addr, align 8
  br label %if.end

if.else.20:                                       ; preds = %land.lhs.true.7, %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i32 0, i32 0), i32 10066, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__FUNCTION__.ix86_agi_dependant, i32 0, i32 0)) #7
  unreachable

if.end:                                           ; preds = %if.then.14
  br label %if.end.21

if.end.21:                                        ; preds = %if.end, %if.then.3
  %15 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %fld22 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1
  %arrayidx23 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld22, i32 0, i64 1
  %rtx24 = bitcast %union.rtunion_def* %arrayidx23 to %struct.rtx_def**
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rtx24, align 8
  store %struct.rtx_def* %16, %struct.rtx_def** %addr, align 8
  br label %if.end.40

if.else.25:                                       ; preds = %land.lhs.true, %entry
  %17 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  call void @extract_insn_cached(%struct.rtx_def* %17)
  %18 = load i8, i8* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 7), align 1
  %conv = sext i8 %18 to i32
  %sub = sub nsw i32 %conv, 1
  store i32 %sub, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else.25
  %19 = load i32, i32* %i, align 4
  %cmp26 = icmp sge i32 %19, 0
  br i1 %cmp26, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %20 = load i32, i32* %i, align 4
  %idxprom = sext i32 %20 to i64
  %arrayidx28 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i32 0, i64 %idxprom
  %21 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx28, align 8
  %22 = bitcast %struct.rtx_def* %21 to i32*
  %bf.load29 = load i32, i32* %22, align 8
  %bf.clear30 = and i32 %bf.load29, 65535
  %cmp31 = icmp eq i32 %bf.clear30, 66
  br i1 %cmp31, label %if.then.33, label %if.end.39

if.then.33:                                       ; preds = %for.body
  %23 = load i32, i32* %i, align 4
  %idxprom34 = sext i32 %23 to i64
  %arrayidx35 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i32 0, i64 %idxprom34
  %24 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx35, align 8
  %fld36 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1
  %arrayidx37 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld36, i32 0, i64 0
  %rtx38 = bitcast %union.rtunion_def* %arrayidx37 to %struct.rtx_def**
  %25 = load %struct.rtx_def*, %struct.rtx_def** %rtx38, align 8
  store %struct.rtx_def* %25, %struct.rtx_def** %addr, align 8
  br label %found

if.end.39:                                        ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.39
  %26 = load i32, i32* %i, align 4
  %dec = add nsw i32 %26, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval
  br label %return

found:                                            ; preds = %if.then.33
  br label %if.end.40

if.end.40:                                        ; preds = %found, %if.end.21
  %27 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %28 = load %struct.rtx_def*, %struct.rtx_def** %dep_insn.addr, align 8
  %call = call i32 @modified_in_p(%struct.rtx_def* %27, %struct.rtx_def* %28)
  store i32 %call, i32* %retval
  br label %return

return:                                           ; preds = %if.end.40, %for.end
  %29 = load i32, i32* %retval
  ret i32 %29
}

; Function Attrs: nounwind uwtable
define internal i32 @ix86_flags_dependant(%struct.rtx_def* %insn, %struct.rtx_def* %dep_insn, i32 %insn_type) #1 {
entry:
  %retval = alloca i32, align 4
  %insn.addr = alloca %struct.rtx_def*, align 8
  %dep_insn.addr = alloca %struct.rtx_def*, align 8
  %insn_type.addr = alloca i32, align 4
  %set = alloca %struct.rtx_def*, align 8
  %set2 = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  store %struct.rtx_def* %dep_insn, %struct.rtx_def** %dep_insn.addr, align 8
  store i32 %insn_type, i32* %insn_type.addr, align 4
  %0 = load i32, i32* %insn_type.addr, align 4
  %cmp = icmp ne i32 %0, 15
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %insn_type.addr, align 4
  %cmp1 = icmp ne i32 %1, 20
  br i1 %cmp1, label %land.lhs.true.2, label %if.end

land.lhs.true.2:                                  ; preds = %land.lhs.true
  %2 = load i32, i32* %insn_type.addr, align 4
  %cmp3 = icmp ne i32 %2, 28
  br i1 %cmp3, label %land.lhs.true.4, label %if.end

land.lhs.true.4:                                  ; preds = %land.lhs.true.2
  %3 = load i32, i32* %insn_type.addr, align 4
  %cmp5 = icmp ne i32 %3, 14
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true.4
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true.4, %land.lhs.true.2, %land.lhs.true, %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %dep_insn.addr, align 8
  %5 = bitcast %struct.rtx_def* %4 to i32*
  %bf.load = load i32, i32* %5, align 8
  %bf.clear = and i32 %bf.load, 65535
  %idxprom = sext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %6 to i32
  %cmp6 = icmp eq i32 %conv, 105
  br i1 %cmp6, label %cond.true, label %cond.false.20

cond.true:                                        ; preds = %if.end
  %7 = load %struct.rtx_def*, %struct.rtx_def** %dep_insn.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1
  %arrayidx8 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx8 to %struct.rtx_def**
  %8 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %9 = bitcast %struct.rtx_def* %8 to i32*
  %bf.load9 = load i32, i32* %9, align 8
  %bf.clear10 = and i32 %bf.load9, 65535
  %cmp11 = icmp eq i32 %bf.clear10, 47
  br i1 %cmp11, label %cond.true.13, label %cond.false

cond.true.13:                                     ; preds = %cond.true
  %10 = load %struct.rtx_def*, %struct.rtx_def** %dep_insn.addr, align 8
  %fld14 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1
  %arrayidx15 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld14, i32 0, i64 3
  %rtx16 = bitcast %union.rtunion_def* %arrayidx15 to %struct.rtx_def**
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rtx16, align 8
  br label %cond.end

cond.false:                                       ; preds = %cond.true
  %12 = load %struct.rtx_def*, %struct.rtx_def** %dep_insn.addr, align 8
  %13 = load %struct.rtx_def*, %struct.rtx_def** %dep_insn.addr, align 8
  %fld17 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1
  %arrayidx18 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld17, i32 0, i64 3
  %rtx19 = bitcast %union.rtunion_def* %arrayidx18 to %struct.rtx_def**
  %14 = load %struct.rtx_def*, %struct.rtx_def** %rtx19, align 8
  %call = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %12, %struct.rtx_def* %14)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true.13
  %cond = phi %struct.rtx_def* [ %11, %cond.true.13 ], [ %call, %cond.false ]
  br label %cond.end.21

cond.false.20:                                    ; preds = %if.end
  br label %cond.end.21

cond.end.21:                                      ; preds = %cond.false.20, %cond.end
  %cond22 = phi %struct.rtx_def* [ %cond, %cond.end ], [ null, %cond.false.20 ]
  store %struct.rtx_def* %cond22, %struct.rtx_def** %set, align 8
  %cmp23 = icmp ne %struct.rtx_def* %cond22, null
  br i1 %cmp23, label %if.then.25, label %if.else

if.then.25:                                       ; preds = %cond.end.21
  %15 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld26 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1
  %arrayidx27 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld26, i32 0, i64 0
  %rtx28 = bitcast %union.rtunion_def* %arrayidx27 to %struct.rtx_def**
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rtx28, align 8
  store %struct.rtx_def* %16, %struct.rtx_def** %set, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %set2, align 8
  br label %if.end.94

if.else:                                          ; preds = %cond.end.21
  %17 = load %struct.rtx_def*, %struct.rtx_def** %dep_insn.addr, align 8
  %fld29 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1
  %arrayidx30 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld29, i32 0, i64 3
  %rtx31 = bitcast %union.rtunion_def* %arrayidx30 to %struct.rtx_def**
  %18 = load %struct.rtx_def*, %struct.rtx_def** %rtx31, align 8
  %19 = bitcast %struct.rtx_def* %18 to i32*
  %bf.load32 = load i32, i32* %19, align 8
  %bf.clear33 = and i32 %bf.load32, 65535
  %cmp34 = icmp eq i32 %bf.clear33, 39
  br i1 %cmp34, label %land.lhs.true.36, label %if.else.92

land.lhs.true.36:                                 ; preds = %if.else
  %20 = load %struct.rtx_def*, %struct.rtx_def** %dep_insn.addr, align 8
  %fld37 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1
  %arrayidx38 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld37, i32 0, i64 3
  %rtx39 = bitcast %union.rtunion_def* %arrayidx38 to %struct.rtx_def**
  %21 = load %struct.rtx_def*, %struct.rtx_def** %rtx39, align 8
  %fld40 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1
  %arrayidx41 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld40, i32 0, i64 0
  %rtvec = bitcast %union.rtunion_def* %arrayidx41 to %struct.rtvec_def**
  %22 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec, align 8
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %22, i32 0, i32 0
  %23 = load i32, i32* %num_elem, align 4
  %cmp42 = icmp eq i32 %23, 2
  br i1 %cmp42, label %land.lhs.true.44, label %if.else.92

land.lhs.true.44:                                 ; preds = %land.lhs.true.36
  %24 = load %struct.rtx_def*, %struct.rtx_def** %dep_insn.addr, align 8
  %fld45 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1
  %arrayidx46 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld45, i32 0, i64 3
  %rtx47 = bitcast %union.rtunion_def* %arrayidx46 to %struct.rtx_def**
  %25 = load %struct.rtx_def*, %struct.rtx_def** %rtx47, align 8
  %fld48 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1
  %arrayidx49 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld48, i32 0, i64 0
  %rtvec50 = bitcast %union.rtunion_def* %arrayidx49 to %struct.rtvec_def**
  %26 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec50, align 8
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %26, i32 0, i32 1
  %arrayidx51 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i32 0, i64 0
  %27 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx51, align 8
  %28 = bitcast %struct.rtx_def* %27 to i32*
  %bf.load52 = load i32, i32* %28, align 8
  %bf.clear53 = and i32 %bf.load52, 65535
  %cmp54 = icmp eq i32 %bf.clear53, 47
  br i1 %cmp54, label %land.lhs.true.56, label %if.else.92

land.lhs.true.56:                                 ; preds = %land.lhs.true.44
  %29 = load %struct.rtx_def*, %struct.rtx_def** %dep_insn.addr, align 8
  %fld57 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %29, i32 0, i32 1
  %arrayidx58 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld57, i32 0, i64 3
  %rtx59 = bitcast %union.rtunion_def* %arrayidx58 to %struct.rtx_def**
  %30 = load %struct.rtx_def*, %struct.rtx_def** %rtx59, align 8
  %fld60 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %30, i32 0, i32 1
  %arrayidx61 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld60, i32 0, i64 0
  %rtvec62 = bitcast %union.rtunion_def* %arrayidx61 to %struct.rtvec_def**
  %31 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec62, align 8
  %elem63 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %31, i32 0, i32 1
  %arrayidx64 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem63, i32 0, i64 1
  %32 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx64, align 8
  %33 = bitcast %struct.rtx_def* %32 to i32*
  %bf.load65 = load i32, i32* %33, align 8
  %bf.clear66 = and i32 %bf.load65, 65535
  %cmp67 = icmp eq i32 %bf.clear66, 47
  br i1 %cmp67, label %if.then.69, label %if.else.92

if.then.69:                                       ; preds = %land.lhs.true.56
  %34 = load %struct.rtx_def*, %struct.rtx_def** %dep_insn.addr, align 8
  %fld70 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %34, i32 0, i32 1
  %arrayidx71 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld70, i32 0, i64 3
  %rtx72 = bitcast %union.rtunion_def* %arrayidx71 to %struct.rtx_def**
  %35 = load %struct.rtx_def*, %struct.rtx_def** %rtx72, align 8
  %fld73 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %35, i32 0, i32 1
  %arrayidx74 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld73, i32 0, i64 0
  %rtvec75 = bitcast %union.rtunion_def* %arrayidx74 to %struct.rtvec_def**
  %36 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec75, align 8
  %elem76 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %36, i32 0, i32 1
  %arrayidx77 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem76, i32 0, i64 0
  %37 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx77, align 8
  %fld78 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %37, i32 0, i32 1
  %arrayidx79 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld78, i32 0, i64 0
  %rtx80 = bitcast %union.rtunion_def* %arrayidx79 to %struct.rtx_def**
  %38 = load %struct.rtx_def*, %struct.rtx_def** %rtx80, align 8
  store %struct.rtx_def* %38, %struct.rtx_def** %set, align 8
  %39 = load %struct.rtx_def*, %struct.rtx_def** %dep_insn.addr, align 8
  %fld81 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1
  %arrayidx82 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld81, i32 0, i64 3
  %rtx83 = bitcast %union.rtunion_def* %arrayidx82 to %struct.rtx_def**
  %40 = load %struct.rtx_def*, %struct.rtx_def** %rtx83, align 8
  %fld84 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %40, i32 0, i32 1
  %arrayidx85 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld84, i32 0, i64 0
  %rtvec86 = bitcast %union.rtunion_def* %arrayidx85 to %struct.rtvec_def**
  %41 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec86, align 8
  %elem87 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %41, i32 0, i32 1
  %arrayidx88 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem87, i32 0, i64 0
  %42 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx88, align 8
  %fld89 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %42, i32 0, i32 1
  %arrayidx90 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld89, i32 0, i64 0
  %rtx91 = bitcast %union.rtunion_def* %arrayidx90 to %struct.rtx_def**
  %43 = load %struct.rtx_def*, %struct.rtx_def** %rtx91, align 8
  store %struct.rtx_def* %43, %struct.rtx_def** %set2, align 8
  br label %if.end.93

if.else.92:                                       ; preds = %land.lhs.true.56, %land.lhs.true.44, %land.lhs.true.36, %if.else
  store i32 0, i32* %retval
  br label %return

if.end.93:                                        ; preds = %if.then.69
  br label %if.end.94

if.end.94:                                        ; preds = %if.end.93, %if.then.25
  %44 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %45 = bitcast %struct.rtx_def* %44 to i32*
  %bf.load95 = load i32, i32* %45, align 8
  %bf.clear96 = and i32 %bf.load95, 65535
  %cmp97 = icmp ne i32 %bf.clear96, 61
  br i1 %cmp97, label %if.then.103, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.94
  %46 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld99 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %46, i32 0, i32 1
  %arrayidx100 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld99, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx100 to i32*
  %47 = load i32, i32* %rtuint, align 4
  %cmp101 = icmp ne i32 %47, 17
  br i1 %cmp101, label %if.then.103, label %if.end.104

if.then.103:                                      ; preds = %lor.lhs.false, %if.end.94
  store i32 0, i32* %retval
  br label %return

if.end.104:                                       ; preds = %lor.lhs.false
  %48 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %49 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld105 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %49, i32 0, i32 1
  %arrayidx106 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld105, i32 0, i64 3
  %rtx107 = bitcast %union.rtunion_def* %arrayidx106 to %struct.rtx_def**
  %50 = load %struct.rtx_def*, %struct.rtx_def** %rtx107, align 8
  %call108 = call i32 @reg_overlap_mentioned_p(%struct.rtx_def* %48, %struct.rtx_def* %50)
  %tobool = icmp ne i32 %call108, 0
  br i1 %tobool, label %if.end.110, label %if.then.109

if.then.109:                                      ; preds = %if.end.104
  store i32 0, i32* %retval
  br label %return

if.end.110:                                       ; preds = %if.end.104
  %51 = load %struct.rtx_def*, %struct.rtx_def** %set2, align 8
  %tobool111 = icmp ne %struct.rtx_def* %51, null
  br i1 %tobool111, label %land.lhs.true.112, label %if.end.119

land.lhs.true.112:                                ; preds = %if.end.110
  %52 = load %struct.rtx_def*, %struct.rtx_def** %set2, align 8
  %53 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld113 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %53, i32 0, i32 1
  %arrayidx114 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld113, i32 0, i64 3
  %rtx115 = bitcast %union.rtunion_def* %arrayidx114 to %struct.rtx_def**
  %54 = load %struct.rtx_def*, %struct.rtx_def** %rtx115, align 8
  %call116 = call i32 @reg_overlap_mentioned_p(%struct.rtx_def* %52, %struct.rtx_def* %54)
  %tobool117 = icmp ne i32 %call116, 0
  br i1 %tobool117, label %if.then.118, label %if.end.119

if.then.118:                                      ; preds = %land.lhs.true.112
  store i32 0, i32* %retval
  br label %return

if.end.119:                                       ; preds = %land.lhs.true.112, %if.end.110
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.119, %if.then.118, %if.then.109, %if.then.103, %if.else.92, %if.then
  %55 = load i32, i32* %retval
  ret i32 %55
}

declare i32 @get_attr_memory(%struct.rtx_def*) #0

declare i32 @get_attr_fp_int_src(%struct.rtx_def*) #0

declare %struct.rtx_def* @single_set_2(%struct.rtx_def*, %struct.rtx_def*) #0

declare i32 @modified_in_p(%struct.rtx_def*, %struct.rtx_def*) #0

; Function Attrs: nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #4

; Function Attrs: nounwind uwtable
define internal void @ix86_sched_reorder_pentium(%struct.rtx_def** %ready, %struct.rtx_def** %e_ready) #1 {
entry:
  %ready.addr = alloca %struct.rtx_def**, align 8
  %e_ready.addr = alloca %struct.rtx_def**, align 8
  %pair1 = alloca i32, align 4
  %pair2 = alloca i32, align 4
  %insnp = alloca %struct.rtx_def**, align 8
  store %struct.rtx_def** %ready, %struct.rtx_def*** %ready.addr, align 8
  store %struct.rtx_def** %e_ready, %struct.rtx_def*** %e_ready.addr, align 8
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %e_ready.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %0, align 8
  %call = call i32 @ix86_safe_pent_pair(%struct.rtx_def* %1)
  store i32 %call, i32* %pair1, align 4
  %2 = load i32, i32* %pair1, align 4
  %cmp = icmp eq i32 %2, 3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %if.end.45

if.end:                                           ; preds = %entry
  store i32 3, i32* %pair2, align 4
  store %struct.rtx_def** null, %struct.rtx_def*** %insnp, align 8
  %3 = load i32, i32* %pair1, align 4
  %cmp1 = icmp eq i32 %3, 0
  br i1 %cmp1, label %if.then.3, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %4 = load i32, i32* %pair1, align 4
  %cmp2 = icmp eq i32 %4, 2
  br i1 %cmp2, label %if.then.3, label %if.end.7

if.then.3:                                        ; preds = %lor.lhs.false, %if.end
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %e_ready.addr, align 8
  %add.ptr = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 -1
  %6 = load %struct.rtx_def**, %struct.rtx_def*** %ready.addr, align 8
  %7 = load %struct.rtx_def**, %struct.rtx_def*** %e_ready.addr, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %7, align 8
  %call4 = call %struct.rtx_def** @ix86_pent_find_pair(%struct.rtx_def** %add.ptr, %struct.rtx_def** %6, i32 1, %struct.rtx_def* %8)
  store %struct.rtx_def** %call4, %struct.rtx_def*** %insnp, align 8
  %9 = load %struct.rtx_def**, %struct.rtx_def*** %insnp, align 8
  %tobool = icmp ne %struct.rtx_def** %9, null
  br i1 %tobool, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %if.then.3
  store i32 1, i32* %pair2, align 4
  br label %if.end.6

if.end.6:                                         ; preds = %if.then.5, %if.then.3
  br label %if.end.7

if.end.7:                                         ; preds = %if.end.6, %lor.lhs.false
  %10 = load i32, i32* %pair2, align 4
  %cmp8 = icmp eq i32 %10, 3
  br i1 %cmp8, label %land.lhs.true, label %if.end.18

land.lhs.true:                                    ; preds = %if.end.7
  %11 = load i32, i32* %pair1, align 4
  %cmp9 = icmp eq i32 %11, 1
  br i1 %cmp9, label %if.then.12, label %lor.lhs.false.10

lor.lhs.false.10:                                 ; preds = %land.lhs.true
  %12 = load i32, i32* %pair1, align 4
  %cmp11 = icmp eq i32 %12, 0
  br i1 %cmp11, label %if.then.12, label %if.end.18

if.then.12:                                       ; preds = %lor.lhs.false.10, %land.lhs.true
  %13 = load %struct.rtx_def**, %struct.rtx_def*** %e_ready.addr, align 8
  %add.ptr13 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %13, i64 -1
  %14 = load %struct.rtx_def**, %struct.rtx_def*** %ready.addr, align 8
  %15 = load %struct.rtx_def**, %struct.rtx_def*** %e_ready.addr, align 8
  %16 = load %struct.rtx_def*, %struct.rtx_def** %15, align 8
  %call14 = call %struct.rtx_def** @ix86_pent_find_pair(%struct.rtx_def** %add.ptr13, %struct.rtx_def** %14, i32 2, %struct.rtx_def* %16)
  store %struct.rtx_def** %call14, %struct.rtx_def*** %insnp, align 8
  %17 = load %struct.rtx_def**, %struct.rtx_def*** %insnp, align 8
  %tobool15 = icmp ne %struct.rtx_def** %17, null
  br i1 %tobool15, label %if.then.16, label %if.end.17

if.then.16:                                       ; preds = %if.then.12
  store i32 2, i32* %pair2, align 4
  br label %if.end.17

if.end.17:                                        ; preds = %if.then.16, %if.then.12
  br label %if.end.18

if.end.18:                                        ; preds = %if.end.17, %lor.lhs.false.10, %if.end.7
  %18 = load i32, i32* %pair2, align 4
  %cmp19 = icmp eq i32 %18, 3
  br i1 %cmp19, label %if.then.20, label %if.end.26

if.then.20:                                       ; preds = %if.end.18
  %19 = load %struct.rtx_def**, %struct.rtx_def*** %e_ready.addr, align 8
  %add.ptr21 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %19, i64 -1
  %20 = load %struct.rtx_def**, %struct.rtx_def*** %ready.addr, align 8
  %21 = load %struct.rtx_def**, %struct.rtx_def*** %e_ready.addr, align 8
  %22 = load %struct.rtx_def*, %struct.rtx_def** %21, align 8
  %call22 = call %struct.rtx_def** @ix86_pent_find_pair(%struct.rtx_def** %add.ptr21, %struct.rtx_def** %20, i32 0, %struct.rtx_def* %22)
  store %struct.rtx_def** %call22, %struct.rtx_def*** %insnp, align 8
  %23 = load %struct.rtx_def**, %struct.rtx_def*** %insnp, align 8
  %tobool23 = icmp ne %struct.rtx_def** %23, null
  br i1 %tobool23, label %if.then.24, label %if.end.25

if.then.24:                                       ; preds = %if.then.20
  store i32 0, i32* %pair2, align 4
  br label %if.end.25

if.end.25:                                        ; preds = %if.then.24, %if.then.20
  br label %if.end.26

if.end.26:                                        ; preds = %if.end.25, %if.end.18
  %24 = load i32, i32* %pair2, align 4
  %cmp27 = icmp eq i32 %24, 3
  br i1 %cmp27, label %if.then.28, label %if.end.29

if.then.28:                                       ; preds = %if.end.26
  br label %if.end.45

if.end.29:                                        ; preds = %if.end.26
  %25 = load i32, i32* %pair1, align 4
  %cmp30 = icmp eq i32 %25, 2
  br i1 %cmp30, label %if.then.43, label %lor.lhs.false.31

lor.lhs.false.31:                                 ; preds = %if.end.29
  %26 = load i32, i32* %pair2, align 4
  %cmp32 = icmp eq i32 %26, 1
  br i1 %cmp32, label %if.then.43, label %lor.lhs.false.33

lor.lhs.false.33:                                 ; preds = %lor.lhs.false.31
  %27 = load i32, i32* %pair1, align 4
  %cmp34 = icmp eq i32 %27, 0
  br i1 %cmp34, label %land.lhs.true.35, label %if.else

land.lhs.true.35:                                 ; preds = %lor.lhs.false.33
  %28 = load i32, i32* %pair2, align 4
  %cmp36 = icmp eq i32 %28, 0
  br i1 %cmp36, label %land.lhs.true.37, label %if.else

land.lhs.true.37:                                 ; preds = %land.lhs.true.35
  %29 = load %struct.rtx_def**, %struct.rtx_def*** %e_ready.addr, align 8
  %30 = load %struct.rtx_def*, %struct.rtx_def** %29, align 8
  %call38 = call i32 @ix86_safe_memory(%struct.rtx_def* %30)
  %cmp39 = icmp eq i32 %call38, 3
  br i1 %cmp39, label %land.lhs.true.40, label %if.else

land.lhs.true.40:                                 ; preds = %land.lhs.true.37
  %31 = load %struct.rtx_def**, %struct.rtx_def*** %insnp, align 8
  %32 = load %struct.rtx_def*, %struct.rtx_def** %31, align 8
  %call41 = call i32 @ix86_safe_memory(%struct.rtx_def* %32)
  %cmp42 = icmp eq i32 %call41, 1
  br i1 %cmp42, label %if.then.43, label %if.else

if.then.43:                                       ; preds = %land.lhs.true.40, %lor.lhs.false.31, %if.end.29
  %33 = load %struct.rtx_def**, %struct.rtx_def*** %insnp, align 8
  %34 = load %struct.rtx_def**, %struct.rtx_def*** %e_ready.addr, align 8
  call void @ix86_reorder_insn(%struct.rtx_def** %33, %struct.rtx_def** %34)
  br label %if.end.45

if.else:                                          ; preds = %land.lhs.true.40, %land.lhs.true.37, %land.lhs.true.35, %lor.lhs.false.33
  %35 = load %struct.rtx_def**, %struct.rtx_def*** %insnp, align 8
  %36 = load %struct.rtx_def**, %struct.rtx_def*** %e_ready.addr, align 8
  %add.ptr44 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %36, i64 -1
  call void @ix86_reorder_insn(%struct.rtx_def** %35, %struct.rtx_def** %add.ptr44)
  br label %if.end.45

if.end.45:                                        ; preds = %if.then, %if.then.28, %if.else, %if.then.43
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @ix86_sched_reorder_ppro(%struct.rtx_def** %ready, %struct.rtx_def** %e_ready) #1 {
entry:
  %ready.addr = alloca %struct.rtx_def**, align 8
  %e_ready.addr = alloca %struct.rtx_def**, align 8
  %decode = alloca [3 x %struct.rtx_def*], align 16
  %cur_uops = alloca i32, align 4
  %issued_this_cycle = alloca i32, align 4
  %insnp = alloca %struct.rtx_def**, align 8
  %i = alloca i32, align 4
  store %struct.rtx_def** %ready, %struct.rtx_def*** %ready.addr, align 8
  store %struct.rtx_def** %e_ready, %struct.rtx_def*** %e_ready.addr, align 8
  %0 = bitcast [3 x %struct.rtx_def*]* %decode to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* bitcast (%union.anon.4* @ix86_sched_data to i8*), i64 24, i32 8, i1 false)
  store i32 0, i32* %issued_this_cycle, align 4
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %e_ready.addr, align 8
  store %struct.rtx_def** %1, %struct.rtx_def*** %insnp, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %insnp, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %2, align 8
  %call = call i32 @ix86_safe_ppro_uops(%struct.rtx_def* %3)
  store i32 %call, i32* %cur_uops, align 4
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %decode, i32 0, i64 0
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %cmp = icmp eq %struct.rtx_def* %4, null
  br i1 %cmp, label %if.then, label %if.end.14

if.then:                                          ; preds = %entry
  %5 = load i32, i32* %cur_uops, align 4
  %cmp1 = icmp eq i32 %5, 2
  br i1 %cmp1, label %if.then.2, label %if.end

if.then.2:                                        ; preds = %if.then
  %6 = load %struct.rtx_def**, %struct.rtx_def*** %insnp, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  %arrayidx3 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %decode, i32 0, i64 0
  store %struct.rtx_def* %7, %struct.rtx_def** %arrayidx3, align 8
  br label %ppro_done

if.end:                                           ; preds = %if.then
  br label %while.cond

while.cond:                                       ; preds = %if.end.7, %if.end
  %8 = load i32, i32* %cur_uops, align 4
  %cmp4 = icmp ne i32 %8, 1
  br i1 %cmp4, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %9 = load %struct.rtx_def**, %struct.rtx_def*** %insnp, align 8
  %10 = load %struct.rtx_def**, %struct.rtx_def*** %ready.addr, align 8
  %cmp5 = icmp eq %struct.rtx_def** %9, %10
  br i1 %cmp5, label %if.then.6, label %if.end.7

if.then.6:                                        ; preds = %while.body
  br label %while.end

if.end.7:                                         ; preds = %while.body
  %11 = load %struct.rtx_def**, %struct.rtx_def*** %insnp, align 8
  %incdec.ptr = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %11, i32 -1
  store %struct.rtx_def** %incdec.ptr, %struct.rtx_def*** %insnp, align 8
  %12 = load %struct.rtx_def*, %struct.rtx_def** %incdec.ptr, align 8
  %call8 = call i32 @ix86_safe_ppro_uops(%struct.rtx_def* %12)
  store i32 %call8, i32* %cur_uops, align 4
  br label %while.cond

while.end:                                        ; preds = %if.then.6, %while.cond
  %13 = load i32, i32* %cur_uops, align 4
  %cmp9 = icmp eq i32 %13, 1
  br i1 %cmp9, label %if.then.10, label %if.end.11

if.then.10:                                       ; preds = %while.end
  %14 = load %struct.rtx_def**, %struct.rtx_def*** %insnp, align 8
  %15 = load %struct.rtx_def**, %struct.rtx_def*** %e_ready.addr, align 8
  call void @ix86_reorder_insn(%struct.rtx_def** %14, %struct.rtx_def** %15)
  br label %if.end.11

if.end.11:                                        ; preds = %if.then.10, %while.end
  store i32 1, i32* %issued_this_cycle, align 4
  %16 = load %struct.rtx_def**, %struct.rtx_def*** %e_ready.addr, align 8
  %incdec.ptr12 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %16, i32 -1
  store %struct.rtx_def** %incdec.ptr12, %struct.rtx_def*** %e_ready.addr, align 8
  %17 = load %struct.rtx_def*, %struct.rtx_def** %16, align 8
  %arrayidx13 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %decode, i32 0, i64 0
  store %struct.rtx_def* %17, %struct.rtx_def** %arrayidx13, align 8
  br label %if.end.14

if.end.14:                                        ; preds = %if.end.11, %entry
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.14
  %18 = load i32, i32* %i, align 4
  %cmp15 = icmp slt i32 %18, 3
  br i1 %cmp15, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %19 = load i32, i32* %i, align 4
  %idxprom = sext i32 %19 to i64
  %arrayidx16 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %decode, i32 0, i64 %idxprom
  %20 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx16, align 8
  %cmp17 = icmp eq %struct.rtx_def* %20, null
  br i1 %cmp17, label %if.then.18, label %if.end.38

if.then.18:                                       ; preds = %for.body
  %21 = load %struct.rtx_def**, %struct.rtx_def*** %ready.addr, align 8
  %22 = load %struct.rtx_def**, %struct.rtx_def*** %e_ready.addr, align 8
  %cmp19 = icmp uge %struct.rtx_def** %21, %22
  br i1 %cmp19, label %if.then.20, label %if.end.21

if.then.20:                                       ; preds = %if.then.18
  br label %ppro_done

if.end.21:                                        ; preds = %if.then.18
  %23 = load %struct.rtx_def**, %struct.rtx_def*** %e_ready.addr, align 8
  store %struct.rtx_def** %23, %struct.rtx_def*** %insnp, align 8
  %24 = load %struct.rtx_def**, %struct.rtx_def*** %insnp, align 8
  %25 = load %struct.rtx_def*, %struct.rtx_def** %24, align 8
  %call22 = call i32 @ix86_safe_ppro_uops(%struct.rtx_def* %25)
  store i32 %call22, i32* %cur_uops, align 4
  br label %while.cond.23

while.cond.23:                                    ; preds = %if.end.28, %if.end.21
  %26 = load i32, i32* %cur_uops, align 4
  %cmp24 = icmp ne i32 %26, 0
  br i1 %cmp24, label %while.body.25, label %while.end.31

while.body.25:                                    ; preds = %while.cond.23
  %27 = load %struct.rtx_def**, %struct.rtx_def*** %insnp, align 8
  %28 = load %struct.rtx_def**, %struct.rtx_def*** %ready.addr, align 8
  %cmp26 = icmp eq %struct.rtx_def** %27, %28
  br i1 %cmp26, label %if.then.27, label %if.end.28

if.then.27:                                       ; preds = %while.body.25
  br label %while.end.31

if.end.28:                                        ; preds = %while.body.25
  %29 = load %struct.rtx_def**, %struct.rtx_def*** %insnp, align 8
  %incdec.ptr29 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %29, i32 -1
  store %struct.rtx_def** %incdec.ptr29, %struct.rtx_def*** %insnp, align 8
  %30 = load %struct.rtx_def*, %struct.rtx_def** %incdec.ptr29, align 8
  %call30 = call i32 @ix86_safe_ppro_uops(%struct.rtx_def* %30)
  store i32 %call30, i32* %cur_uops, align 4
  br label %while.cond.23

while.end.31:                                     ; preds = %if.then.27, %while.cond.23
  %31 = load i32, i32* %cur_uops, align 4
  %cmp32 = icmp eq i32 %31, 0
  br i1 %cmp32, label %if.then.33, label %if.end.37

if.then.33:                                       ; preds = %while.end.31
  %32 = load %struct.rtx_def**, %struct.rtx_def*** %insnp, align 8
  %33 = load %struct.rtx_def**, %struct.rtx_def*** %e_ready.addr, align 8
  call void @ix86_reorder_insn(%struct.rtx_def** %32, %struct.rtx_def** %33)
  %34 = load %struct.rtx_def**, %struct.rtx_def*** %e_ready.addr, align 8
  %incdec.ptr34 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %34, i32 -1
  store %struct.rtx_def** %incdec.ptr34, %struct.rtx_def*** %e_ready.addr, align 8
  %35 = load %struct.rtx_def*, %struct.rtx_def** %34, align 8
  %36 = load i32, i32* %i, align 4
  %idxprom35 = sext i32 %36 to i64
  %arrayidx36 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %decode, i32 0, i64 %idxprom35
  store %struct.rtx_def* %35, %struct.rtx_def** %arrayidx36, align 8
  %37 = load i32, i32* %issued_this_cycle, align 4
  %inc = add nsw i32 %37, 1
  store i32 %inc, i32* %issued_this_cycle, align 4
  br label %for.inc

if.end.37:                                        ; preds = %while.end.31
  br label %if.end.38

if.end.38:                                        ; preds = %if.end.37, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.38, %if.then.33
  %38 = load i32, i32* %i, align 4
  %inc39 = add nsw i32 %38, 1
  store i32 %inc39, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %ppro_done

ppro_done:                                        ; preds = %for.end, %if.then.20, %if.then.2
  %39 = load i32, i32* %issued_this_cycle, align 4
  %cmp40 = icmp eq i32 %39, 0
  br i1 %cmp40, label %if.then.41, label %if.end.42

if.then.41:                                       ; preds = %ppro_done
  store i32 1, i32* %issued_this_cycle, align 4
  br label %if.end.42

if.end.42:                                        ; preds = %if.then.41, %ppro_done
  %40 = load i32, i32* %issued_this_cycle, align 4
  store i32 %40, i32* getelementptr inbounds (%union.anon.4, %union.anon.4* @ix86_sched_data, i32 0, i32 0, i32 1), align 4
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @ix86_safe_pent_pair(%struct.rtx_def* %insn) #1 {
entry:
  %retval = alloca i32, align 4
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 4
  %rtint = bitcast %union.rtunion_def* %arrayidx to i32*
  %1 = load i32, i32* %rtint, align 4
  %cmp = icmp sge i32 %1, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1
  %arrayidx2 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1, i32 0, i64 4
  %rtint3 = bitcast %union.rtunion_def* %arrayidx2 to i32*
  %3 = load i32, i32* %rtint3, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call = call i32 @recog_memoized_1(%struct.rtx_def* %4)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %3, %cond.true ], [ %call, %cond.false ]
  %cmp4 = icmp sge i32 %cond, 0
  br i1 %cmp4, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call5 = call i32 @get_attr_pent_pair(%struct.rtx_def* %5)
  store i32 %call5, i32* %retval
  br label %return

if.else:                                          ; preds = %cond.end
  store i32 3, i32* %retval
  br label %return

return:                                           ; preds = %if.else, %if.then
  %6 = load i32, i32* %retval
  ret i32 %6
}

; Function Attrs: nounwind uwtable
define internal %struct.rtx_def** @ix86_pent_find_pair(%struct.rtx_def** %e_ready, %struct.rtx_def** %ready, i32 %type, %struct.rtx_def* %first) #1 {
entry:
  %retval = alloca %struct.rtx_def**, align 8
  %e_ready.addr = alloca %struct.rtx_def**, align 8
  %ready.addr = alloca %struct.rtx_def**, align 8
  %type.addr = alloca i32, align 4
  %first.addr = alloca %struct.rtx_def*, align 8
  %mincycles = alloca i32, align 4
  %cycles = alloca i32, align 4
  %tmp = alloca i32, align 4
  %memory = alloca i32, align 4
  %insnp = alloca %struct.rtx_def**, align 8
  %bestinsnp = alloca %struct.rtx_def**, align 8
  %second_memory = alloca i32, align 4
  %secondcycles = alloca i32, align 4
  %currentcycles = alloca i32, align 4
  store %struct.rtx_def** %e_ready, %struct.rtx_def*** %e_ready.addr, align 8
  store %struct.rtx_def** %ready, %struct.rtx_def*** %ready.addr, align 8
  store i32 %type, i32* %type.addr, align 4
  store %struct.rtx_def* %first, %struct.rtx_def** %first.addr, align 8
  store %struct.rtx_def** null, %struct.rtx_def*** %bestinsnp, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %first.addr, align 8
  %call = call i32 @ix86_safe_length(%struct.rtx_def* %0)
  %1 = load %struct.rtx_def*, %struct.rtx_def** %first.addr, align 8
  %call4 = call i32 @ix86_safe_length_prefix(%struct.rtx_def* %1)
  %add = add nsw i32 7, %call4
  %cmp = icmp sgt i32 %call, %add
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.rtx_def** null, %struct.rtx_def*** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %first.addr, align 8
  %call5 = call i32 @ix86_safe_memory(%struct.rtx_def* %2)
  store i32 %call5, i32* %memory, align 4
  %3 = load %struct.rtx_def*, %struct.rtx_def** %first.addr, align 8
  %call6 = call i32 @result_ready_cost(%struct.rtx_def* %3)
  store i32 %call6, i32* %cycles, align 4
  store i32 2147483647, i32* %mincycles, align 4
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %e_ready.addr, align 8
  store %struct.rtx_def** %4, %struct.rtx_def*** %insnp, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %insnp, align 8
  %6 = load %struct.rtx_def**, %struct.rtx_def*** %ready.addr, align 8
  %cmp7 = icmp uge %struct.rtx_def** %5, %6
  br i1 %cmp7, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %7 = load i32, i32* %mincycles, align 4
  %tobool = icmp ne i32 %7, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %8 = phi i1 [ false, %for.cond ], [ %tobool, %land.rhs ]
  br i1 %8, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %9 = load %struct.rtx_def**, %struct.rtx_def*** %insnp, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %call8 = call i32 @ix86_safe_pent_pair(%struct.rtx_def* %10)
  store i32 %call8, i32* %tmp, align 4
  %11 = load i32, i32* %type.addr, align 4
  %cmp9 = icmp eq i32 %call8, %11
  br i1 %cmp9, label %land.lhs.true, label %if.end.46

land.lhs.true:                                    ; preds = %for.body
  %12 = load %struct.rtx_def**, %struct.rtx_def*** %insnp, align 8
  %13 = load %struct.rtx_def*, %struct.rtx_def** %12, align 8
  %call10 = call i32 @ix86_safe_length(%struct.rtx_def* %13)
  %14 = load %struct.rtx_def**, %struct.rtx_def*** %insnp, align 8
  %15 = load %struct.rtx_def*, %struct.rtx_def** %14, align 8
  %call11 = call i32 @ix86_safe_length_prefix(%struct.rtx_def* %15)
  %add12 = add nsw i32 7, %call11
  %cmp13 = icmp sle i32 %call10, %add12
  br i1 %cmp13, label %if.then.14, label %if.end.46

if.then.14:                                       ; preds = %land.lhs.true
  %16 = load %struct.rtx_def**, %struct.rtx_def*** %insnp, align 8
  %17 = load %struct.rtx_def*, %struct.rtx_def** %16, align 8
  %call18 = call i32 @ix86_safe_memory(%struct.rtx_def* %17)
  store i32 %call18, i32* %second_memory, align 4
  %18 = load %struct.rtx_def**, %struct.rtx_def*** %insnp, align 8
  %19 = load %struct.rtx_def*, %struct.rtx_def** %18, align 8
  %call19 = call i32 @result_ready_cost(%struct.rtx_def* %19)
  store i32 %call19, i32* %secondcycles, align 4
  %20 = load i32, i32* %cycles, align 4
  %21 = load i32, i32* %secondcycles, align 4
  %sub = sub nsw i32 %20, %21
  %call20 = call i32 @abs(i32 %sub) #9
  store i32 %call20, i32* %currentcycles, align 4
  %22 = load i32, i32* %secondcycles, align 4
  %cmp21 = icmp sge i32 %22, 1
  br i1 %cmp21, label %land.lhs.true.22, label %if.end.42

land.lhs.true.22:                                 ; preds = %if.then.14
  %23 = load i32, i32* %cycles, align 4
  %cmp23 = icmp sge i32 %23, 1
  br i1 %cmp23, label %if.then.24, label %if.end.42

if.then.24:                                       ; preds = %land.lhs.true.22
  %24 = load i32, i32* %memory, align 4
  %cmp25 = icmp eq i32 %24, 3
  br i1 %cmp25, label %land.lhs.true.26, label %if.end.30

land.lhs.true.26:                                 ; preds = %if.then.24
  %25 = load i32, i32* %second_memory, align 4
  %cmp27 = icmp eq i32 %25, 3
  br i1 %cmp27, label %if.then.28, label %if.end.30

if.then.28:                                       ; preds = %land.lhs.true.26
  %26 = load i32, i32* %currentcycles, align 4
  %add29 = add nsw i32 %26, 2
  store i32 %add29, i32* %currentcycles, align 4
  br label %if.end.30

if.end.30:                                        ; preds = %if.then.28, %land.lhs.true.26, %if.then.24
  %27 = load i32, i32* %memory, align 4
  %cmp31 = icmp eq i32 %27, 3
  br i1 %cmp31, label %land.lhs.true.32, label %if.end.41

land.lhs.true.32:                                 ; preds = %if.end.30
  %28 = load i32, i32* %second_memory, align 4
  %cmp33 = icmp eq i32 %28, 1
  br i1 %cmp33, label %land.lhs.true.34, label %if.end.41

land.lhs.true.34:                                 ; preds = %land.lhs.true.32
  %29 = load i32, i32* %tmp, align 4
  %cmp35 = icmp ne i32 %29, 0
  br i1 %cmp35, label %land.lhs.true.36, label %if.end.41

land.lhs.true.36:                                 ; preds = %land.lhs.true.34
  %30 = load %struct.rtx_def*, %struct.rtx_def** %first.addr, align 8
  %call37 = call i32 @ix86_safe_pent_pair(%struct.rtx_def* %30)
  %cmp38 = icmp ne i32 %call37, 0
  br i1 %cmp38, label %if.then.39, label %if.end.41

if.then.39:                                       ; preds = %land.lhs.true.36
  %31 = load i32, i32* %currentcycles, align 4
  %add40 = add nsw i32 %31, 1
  store i32 %add40, i32* %currentcycles, align 4
  br label %if.end.41

if.end.41:                                        ; preds = %if.then.39, %land.lhs.true.36, %land.lhs.true.34, %land.lhs.true.32, %if.end.30
  br label %if.end.42

if.end.42:                                        ; preds = %if.end.41, %land.lhs.true.22, %if.then.14
  %32 = load i32, i32* %currentcycles, align 4
  %33 = load i32, i32* %mincycles, align 4
  %cmp43 = icmp slt i32 %32, %33
  br i1 %cmp43, label %if.then.44, label %if.end.45

if.then.44:                                       ; preds = %if.end.42
  %34 = load %struct.rtx_def**, %struct.rtx_def*** %insnp, align 8
  store %struct.rtx_def** %34, %struct.rtx_def*** %bestinsnp, align 8
  %35 = load i32, i32* %currentcycles, align 4
  store i32 %35, i32* %mincycles, align 4
  br label %if.end.45

if.end.45:                                        ; preds = %if.then.44, %if.end.42
  br label %if.end.46

if.end.46:                                        ; preds = %if.end.45, %land.lhs.true, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.46
  %36 = load %struct.rtx_def**, %struct.rtx_def*** %insnp, align 8
  %incdec.ptr = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %36, i32 -1
  store %struct.rtx_def** %incdec.ptr, %struct.rtx_def*** %insnp, align 8
  br label %for.cond

for.end:                                          ; preds = %land.end
  %37 = load %struct.rtx_def**, %struct.rtx_def*** %bestinsnp, align 8
  store %struct.rtx_def** %37, %struct.rtx_def*** %retval
  br label %return

return:                                           ; preds = %for.end, %if.then
  %38 = load %struct.rtx_def**, %struct.rtx_def*** %retval
  ret %struct.rtx_def** %38
}

; Function Attrs: nounwind uwtable
define internal i32 @ix86_safe_memory(%struct.rtx_def* %insn) #1 {
entry:
  %retval = alloca i32, align 4
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 4
  %rtint = bitcast %union.rtunion_def* %arrayidx to i32*
  %1 = load i32, i32* %rtint, align 4
  %cmp = icmp sge i32 %1, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1
  %arrayidx2 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1, i32 0, i64 4
  %rtint3 = bitcast %union.rtunion_def* %arrayidx2 to i32*
  %3 = load i32, i32* %rtint3, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call = call i32 @recog_memoized_1(%struct.rtx_def* %4)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %3, %cond.true ], [ %call, %cond.false ]
  %cmp4 = icmp sge i32 %cond, 0
  br i1 %cmp4, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call5 = call i32 @get_attr_memory(%struct.rtx_def* %5)
  store i32 %call5, i32* %retval
  br label %return

if.else:                                          ; preds = %cond.end
  store i32 4, i32* %retval
  br label %return

return:                                           ; preds = %if.else, %if.then
  %6 = load i32, i32* %retval
  ret i32 %6
}

; Function Attrs: nounwind uwtable
define internal void @ix86_reorder_insn(%struct.rtx_def** %insnp, %struct.rtx_def** %slot) #1 {
entry:
  %insnp.addr = alloca %struct.rtx_def**, align 8
  %slot.addr = alloca %struct.rtx_def**, align 8
  %insn = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %insnp, %struct.rtx_def*** %insnp.addr, align 8
  store %struct.rtx_def** %slot, %struct.rtx_def*** %slot.addr, align 8
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %insnp.addr, align 8
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %slot.addr, align 8
  %cmp = icmp ne %struct.rtx_def** %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %insnp.addr, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %2, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %insn, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.then
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %insnp.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 1
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %6 = load %struct.rtx_def**, %struct.rtx_def*** %insnp.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %6, i64 0
  store %struct.rtx_def* %5, %struct.rtx_def** %arrayidx1, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %7 = load %struct.rtx_def**, %struct.rtx_def*** %insnp.addr, align 8
  %incdec.ptr = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %7, i32 1
  store %struct.rtx_def** %incdec.ptr, %struct.rtx_def*** %insnp.addr, align 8
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %slot.addr, align 8
  %cmp2 = icmp ne %struct.rtx_def** %incdec.ptr, %8
  br i1 %cmp2, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %9 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %10 = load %struct.rtx_def**, %struct.rtx_def*** %insnp.addr, align 8
  store %struct.rtx_def* %9, %struct.rtx_def** %10, align 8
  br label %if.end

if.end:                                           ; preds = %do.end, %entry
  ret void
}

declare i32 @get_attr_pent_pair(%struct.rtx_def*) #0

; Function Attrs: nounwind uwtable
define internal i32 @ix86_safe_length(%struct.rtx_def* %insn) #1 {
entry:
  %retval = alloca i32, align 4
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 4
  %rtint = bitcast %union.rtunion_def* %arrayidx to i32*
  %1 = load i32, i32* %rtint, align 4
  %cmp = icmp sge i32 %1, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1
  %arrayidx2 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1, i32 0, i64 4
  %rtint3 = bitcast %union.rtunion_def* %arrayidx2 to i32*
  %3 = load i32, i32* %rtint3, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call = call i32 @recog_memoized_1(%struct.rtx_def* %4)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %3, %cond.true ], [ %call, %cond.false ]
  %cmp4 = icmp sge i32 %cond, 0
  br i1 %cmp4, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call5 = call i32 @get_attr_length(%struct.rtx_def* %5)
  store i32 %call5, i32* %retval
  br label %return

if.else:                                          ; preds = %cond.end
  store i32 128, i32* %retval
  br label %return

return:                                           ; preds = %if.else, %if.then
  %6 = load i32, i32* %retval
  ret i32 %6
}

; Function Attrs: nounwind uwtable
define internal i32 @ix86_safe_length_prefix(%struct.rtx_def* %insn) #1 {
entry:
  %retval = alloca i32, align 4
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 4
  %rtint = bitcast %union.rtunion_def* %arrayidx to i32*
  %1 = load i32, i32* %rtint, align 4
  %cmp = icmp sge i32 %1, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1
  %arrayidx2 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1, i32 0, i64 4
  %rtint3 = bitcast %union.rtunion_def* %arrayidx2 to i32*
  %3 = load i32, i32* %rtint3, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call = call i32 @recog_memoized_1(%struct.rtx_def* %4)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %3, %cond.true ], [ %call, %cond.false ]
  %cmp4 = icmp sge i32 %cond, 0
  br i1 %cmp4, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call5 = call i32 @get_attr_length(%struct.rtx_def* %5)
  store i32 %call5, i32* %retval
  br label %return

if.else:                                          ; preds = %cond.end
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.else, %if.then
  %6 = load i32, i32* %retval
  ret i32 %6
}

declare i32 @result_ready_cost(%struct.rtx_def*) #0

; Function Attrs: nounwind readnone
declare i32 @abs(i32) #6

declare i32 @get_attr_length(%struct.rtx_def*) #0

; Function Attrs: nounwind uwtable
define internal i32 @ix86_safe_ppro_uops(%struct.rtx_def* %insn) #1 {
entry:
  %retval = alloca i32, align 4
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 4
  %rtint = bitcast %union.rtunion_def* %arrayidx to i32*
  %1 = load i32, i32* %rtint, align 4
  %cmp = icmp sge i32 %1, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1
  %arrayidx2 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1, i32 0, i64 4
  %rtint3 = bitcast %union.rtunion_def* %arrayidx2 to i32*
  %3 = load i32, i32* %rtint3, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call = call i32 @recog_memoized_1(%struct.rtx_def* %4)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %3, %cond.true ], [ %call, %cond.false ]
  %cmp4 = icmp sge i32 %cond, 0
  br i1 %cmp4, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call5 = call i32 @get_attr_ppro_uops(%struct.rtx_def* %5)
  store i32 %call5, i32* %retval
  br label %return

if.else:                                          ; preds = %cond.end
  store i32 2, i32* %retval
  br label %return

return:                                           ; preds = %if.else, %if.then
  %6 = load i32, i32* %retval
  ret i32 %6
}

declare i32 @get_attr_ppro_uops(%struct.rtx_def*) #0

; Function Attrs: nounwind uwtable
define internal void @ix86_dump_ppro_packet(%struct._IO_FILE* %dump) #1 {
entry:
  %dump.addr = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %dump, %struct._IO_FILE** %dump.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%union.anon.4, %union.anon.4* @ix86_sched_data, i32 0, i32 0, i32 0, i64 0), align 8
  %tobool = icmp ne %struct.rtx_def* %0, null
  br i1 %tobool, label %if.then, label %if.end.15

if.then:                                          ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** %dump.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%union.anon.4, %union.anon.4* @ix86_sched_data, i32 0, i32 0, i32 0, i64 0), align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtint = bitcast %union.rtunion_def* %arrayidx to i32*
  %3 = load i32, i32* %rtint, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.318, i32 0, i32 0), i32 %3)
  %4 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%union.anon.4, %union.anon.4* @ix86_sched_data, i32 0, i32 0, i32 0, i64 1), align 8
  %tobool1 = icmp ne %struct.rtx_def* %4, null
  br i1 %tobool1, label %if.then.2, label %if.end

if.then.2:                                        ; preds = %if.then
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %dump.addr, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%union.anon.4, %union.anon.4* @ix86_sched_data, i32 0, i32 0, i32 0, i64 1), align 8
  %fld3 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1
  %arrayidx4 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3, i32 0, i64 0
  %rtint5 = bitcast %union.rtunion_def* %arrayidx4 to i32*
  %7 = load i32, i32* %rtint5, align 4
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.319, i32 0, i32 0), i32 %7)
  br label %if.end

if.end:                                           ; preds = %if.then.2, %if.then
  %8 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%union.anon.4, %union.anon.4* @ix86_sched_data, i32 0, i32 0, i32 0, i64 2), align 8
  %tobool7 = icmp ne %struct.rtx_def* %8, null
  br i1 %tobool7, label %if.then.8, label %if.end.13

if.then.8:                                        ; preds = %if.end
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** %dump.addr, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%union.anon.4, %union.anon.4* @ix86_sched_data, i32 0, i32 0, i32 0, i64 2), align 8
  %fld9 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1
  %arrayidx10 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld9, i32 0, i64 0
  %rtint11 = bitcast %union.rtunion_def* %arrayidx10 to i32*
  %11 = load i32, i32* %rtint11, align 4
  %call12 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.319, i32 0, i32 0), i32 %11)
  br label %if.end.13

if.end.13:                                        ; preds = %if.then.8, %if.end
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** %dump.addr, align 8
  %call14 = call i32 @fputc(i32 10, %struct._IO_FILE* %12)
  br label %if.end.15

if.end.15:                                        ; preds = %if.end.13, %entry
  ret void
}

declare %union.tree_node* @build_function_type(%union.tree_node*, %union.tree_node*) #0

declare %union.tree_node* @tree_cons(%union.tree_node*, %union.tree_node*, %union.tree_node*) #0

declare %union.tree_node* @builtin_function(i8*, %union.tree_node*, i32, i32, i8*) #0

; Function Attrs: nounwind uwtable
define internal %struct.rtx_def* @safe_vector_operand(%struct.rtx_def* %x, i32 %mode) #1 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %x.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  store i32 %mode, i32* %mode.addr, align 4
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %cmp = icmp ne %struct.rtx_def* %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i32, i32* %mode.addr, align 4
  %call = call %struct.rtx_def* @gen_reg_rtx(i32 %3)
  store %struct.rtx_def* %call, %struct.rtx_def** %x.addr, align 8
  %4 = load i32, i32* %mode.addr, align 4
  %cmp1 = icmp eq i32 %4, 5
  br i1 %cmp1, label %if.then.13, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %5 = load i32, i32* %mode.addr, align 4
  %cmp2 = icmp eq i32 %5, 39
  br i1 %cmp2, label %if.then.13, label %lor.lhs.false.3

lor.lhs.false.3:                                  ; preds = %lor.lhs.false
  %6 = load i32, i32* %mode.addr, align 4
  %cmp4 = icmp eq i32 %6, 36
  br i1 %cmp4, label %if.then.13, label %lor.lhs.false.5

lor.lhs.false.5:                                  ; preds = %lor.lhs.false.3
  %7 = load i32, i32* %mode.addr, align 4
  %cmp6 = icmp eq i32 %7, 33
  br i1 %cmp6, label %if.then.13, label %lor.lhs.false.7

lor.lhs.false.7:                                  ; preds = %lor.lhs.false.5
  %8 = load i32, i32* %mode.addr, align 4
  %cmp8 = icmp eq i32 %8, 4
  br i1 %cmp8, label %if.then.13, label %lor.lhs.false.9

lor.lhs.false.9:                                  ; preds = %lor.lhs.false.7
  %9 = load i32, i32* %mode.addr, align 4
  %cmp10 = icmp eq i32 %9, 44
  br i1 %cmp10, label %if.then.13, label %lor.lhs.false.11

lor.lhs.false.11:                                 ; preds = %lor.lhs.false.9
  %10 = load i32, i32* %mode.addr, align 4
  %cmp12 = icmp eq i32 %10, 15
  br i1 %cmp12, label %if.then.13, label %if.else

if.then.13:                                       ; preds = %lor.lhs.false.11, %lor.lhs.false.9, %lor.lhs.false.7, %lor.lhs.false.5, %lor.lhs.false.3, %lor.lhs.false, %if.end
  %11 = load i32, i32* %mode.addr, align 4
  %cmp14 = icmp eq i32 %11, 5
  br i1 %cmp14, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.13
  %12 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then.13
  %13 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %call15 = call %struct.rtx_def* @gen_rtx_SUBREG(i32 5, %struct.rtx_def* %13, i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %12, %cond.true ], [ %call15, %cond.false ]
  %call16 = call %struct.rtx_def* @gen_mmx_clrdi(%struct.rtx_def* %cond)
  %call17 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call16)
  br label %if.end.26

if.else:                                          ; preds = %lor.lhs.false.11
  %14 = load i32, i32* %mode.addr, align 4
  %cmp18 = icmp eq i32 %14, 46
  br i1 %cmp18, label %cond.true.19, label %cond.false.20

cond.true.19:                                     ; preds = %if.else
  %15 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  br label %cond.end.22

cond.false.20:                                    ; preds = %if.else
  %16 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %call21 = call %struct.rtx_def* @gen_rtx_SUBREG(i32 46, %struct.rtx_def* %16, i32 0)
  br label %cond.end.22

cond.end.22:                                      ; preds = %cond.false.20, %cond.true.19
  %cond23 = phi %struct.rtx_def* [ %15, %cond.true.19 ], [ %call21, %cond.false.20 ]
  %call24 = call %struct.rtx_def* @gen_sse_clrv4sf(%struct.rtx_def* %cond23)
  %call25 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call24)
  br label %if.end.26

if.end.26:                                        ; preds = %cond.end.22, %cond.end
  %17 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  store %struct.rtx_def* %17, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end.26, %if.then
  %18 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %18
}

attributes #0 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { noreturn "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn }
attributes #8 = { nounwind readonly }
attributes #9 = { nounwind readnone }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
